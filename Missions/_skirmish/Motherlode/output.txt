// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 57 0 0
// if gameType = 1 then
   8: LD_EXP 2
  12: PUSH
  13: LD_INT 1
  15: EQUAL
  16: IFFALSE 56
// InitEcoMode ( [ 189 , 97 ] , [ [ 215 , 93 ] , [ 204 , 126 ] ] ) ;
  18: LD_INT 189
  20: PUSH
  21: LD_INT 97
  23: PUSH
  24: EMPTY
  25: LIST
  26: LIST
  27: PPUSH
  28: LD_INT 215
  30: PUSH
  31: LD_INT 93
  33: PUSH
  34: EMPTY
  35: LIST
  36: LIST
  37: PUSH
  38: LD_INT 204
  40: PUSH
  41: LD_INT 126
  43: PUSH
  44: EMPTY
  45: LIST
  46: LIST
  47: PUSH
  48: EMPTY
  49: LIST
  50: LIST
  51: PPUSH
  52: CALL 37930 0 2
// end ;
  56: END
// export debug , gameType ; function Init ; begin
  57: LD_INT 0
  59: PPUSH
// debug := true ;
  60: LD_ADDR_EXP 1
  64: PUSH
  65: LD_INT 1
  67: ST_TO_ADDR
// if debug then
  68: LD_EXP 1
  72: IFFALSE 84
// gameType := 1 else
  74: LD_ADDR_EXP 2
  78: PUSH
  79: LD_INT 1
  81: ST_TO_ADDR
  82: GO 101
// gameType := GetMultiplayerSetting ( 50 ) + 1 ;
  84: LD_ADDR_EXP 2
  88: PUSH
  89: LD_INT 50
  91: PPUSH
  92: CALL_OW 426
  96: PUSH
  97: LD_INT 1
  99: PLUS
 100: ST_TO_ADDR
// end ; end_of_file
 101: LD_VAR 0 1
 105: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
 106: LD_INT 0
 108: PPUSH
// ar_miner := 81 ;
 109: LD_ADDR_EXP 10
 113: PUSH
 114: LD_INT 81
 116: ST_TO_ADDR
// ar_crane := 88 ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 88
 124: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 89
 132: ST_TO_ADDR
// us_hack := 99 ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 99
 140: ST_TO_ADDR
// us_artillery := 97 ;
 141: LD_ADDR_EXP 6
 145: PUSH
 146: LD_INT 97
 148: ST_TO_ADDR
// ar_bio_bomb := 91 ;
 149: LD_ADDR_EXP 7
 153: PUSH
 154: LD_INT 91
 156: ST_TO_ADDR
// ar_mortar := 92 ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_INT 92
 164: ST_TO_ADDR
// ru_radar := 98 ;
 165: LD_ADDR_EXP 3
 169: PUSH
 170: LD_INT 98
 172: ST_TO_ADDR
// tech_Artillery := 80 ;
 173: LD_ADDR_EXP 11
 177: PUSH
 178: LD_INT 80
 180: ST_TO_ADDR
// tech_RadMat := 81 ;
 181: LD_ADDR_EXP 12
 185: PUSH
 186: LD_INT 81
 188: ST_TO_ADDR
// tech_BasicTools := 82 ;
 189: LD_ADDR_EXP 13
 193: PUSH
 194: LD_INT 82
 196: ST_TO_ADDR
// tech_Cargo := 83 ;
 197: LD_ADDR_EXP 14
 201: PUSH
 202: LD_INT 83
 204: ST_TO_ADDR
// tech_Track := 84 ;
 205: LD_ADDR_EXP 15
 209: PUSH
 210: LD_INT 84
 212: ST_TO_ADDR
// tech_Crane := 85 ;
 213: LD_ADDR_EXP 16
 217: PUSH
 218: LD_INT 85
 220: ST_TO_ADDR
// tech_Bulldozer := 86 ;
 221: LD_ADDR_EXP 17
 225: PUSH
 226: LD_INT 86
 228: ST_TO_ADDR
// tech_Hovercraft := 87 ;
 229: LD_ADDR_EXP 18
 233: PUSH
 234: LD_INT 87
 236: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
 237: LD_ADDR_EXP 19
 241: PUSH
 242: LD_INT 88
 244: ST_TO_ADDR
// class_mastodont := 31 ;
 245: LD_ADDR_EXP 20
 249: PUSH
 250: LD_INT 31
 252: ST_TO_ADDR
// class_horse := 21 ;
 253: LD_ADDR_EXP 21
 257: PUSH
 258: LD_INT 21
 260: ST_TO_ADDR
// end ;
 261: LD_VAR 0 1
 265: RET
// every 1 do
 266: GO 268
 268: DISABLE
// InitGlobalVariables ; end_of_file
 269: CALL 106 0 0
 273: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 274: LD_INT 0
 276: PPUSH
 277: PPUSH
// if exist_mode then
 278: LD_VAR 0 2
 282: IFFALSE 307
// unit := CreateCharacter ( prefix & ident ) else
 284: LD_ADDR_VAR 0 5
 288: PUSH
 289: LD_VAR 0 3
 293: PUSH
 294: LD_VAR 0 1
 298: STR
 299: PPUSH
 300: CALL_OW 34
 304: ST_TO_ADDR
 305: GO 322
// unit := NewCharacter ( ident ) ;
 307: LD_ADDR_VAR 0 5
 311: PUSH
 312: LD_VAR 0 1
 316: PPUSH
 317: CALL_OW 25
 321: ST_TO_ADDR
// result := unit ;
 322: LD_ADDR_VAR 0 4
 326: PUSH
 327: LD_VAR 0 5
 331: ST_TO_ADDR
// end ;
 332: LD_VAR 0 4
 336: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 337: LD_INT 0
 339: PPUSH
 340: PPUSH
// if not side or not nation then
 341: LD_VAR 0 1
 345: NOT
 346: PUSH
 347: LD_VAR 0 2
 351: NOT
 352: OR
 353: IFFALSE 357
// exit ;
 355: GO 1121
// case nation of nation_american :
 357: LD_VAR 0 2
 361: PUSH
 362: LD_INT 1
 364: DOUBLE
 365: EQUAL
 366: IFTRUE 370
 368: GO 584
 370: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 371: LD_ADDR_VAR 0 4
 375: PUSH
 376: LD_INT 35
 378: PUSH
 379: LD_INT 45
 381: PUSH
 382: LD_INT 46
 384: PUSH
 385: LD_INT 47
 387: PUSH
 388: LD_INT 82
 390: PUSH
 391: LD_INT 83
 393: PUSH
 394: LD_INT 84
 396: PUSH
 397: LD_INT 85
 399: PUSH
 400: LD_INT 86
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: LD_INT 2
 408: PUSH
 409: LD_INT 6
 411: PUSH
 412: LD_INT 15
 414: PUSH
 415: LD_INT 16
 417: PUSH
 418: LD_INT 7
 420: PUSH
 421: LD_INT 12
 423: PUSH
 424: LD_INT 13
 426: PUSH
 427: LD_INT 10
 429: PUSH
 430: LD_INT 14
 432: PUSH
 433: LD_INT 20
 435: PUSH
 436: LD_INT 21
 438: PUSH
 439: LD_INT 22
 441: PUSH
 442: LD_INT 25
 444: PUSH
 445: LD_INT 32
 447: PUSH
 448: LD_INT 27
 450: PUSH
 451: LD_INT 36
 453: PUSH
 454: LD_INT 69
 456: PUSH
 457: LD_INT 39
 459: PUSH
 460: LD_INT 34
 462: PUSH
 463: LD_INT 40
 465: PUSH
 466: LD_INT 48
 468: PUSH
 469: LD_INT 49
 471: PUSH
 472: LD_INT 50
 474: PUSH
 475: LD_INT 51
 477: PUSH
 478: LD_INT 52
 480: PUSH
 481: LD_INT 53
 483: PUSH
 484: LD_INT 54
 486: PUSH
 487: LD_INT 55
 489: PUSH
 490: LD_INT 56
 492: PUSH
 493: LD_INT 57
 495: PUSH
 496: LD_INT 58
 498: PUSH
 499: LD_INT 59
 501: PUSH
 502: LD_INT 60
 504: PUSH
 505: LD_INT 61
 507: PUSH
 508: LD_INT 62
 510: PUSH
 511: LD_INT 80
 513: PUSH
 514: LD_INT 82
 516: PUSH
 517: LD_INT 83
 519: PUSH
 520: LD_INT 84
 522: PUSH
 523: LD_INT 85
 525: PUSH
 526: LD_INT 86
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: LIST
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: LIST
 553: LIST
 554: LIST
 555: LIST
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: LIST
 566: LIST
 567: LIST
 568: LIST
 569: LIST
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: LIST
 580: LIST
 581: ST_TO_ADDR
 582: GO 1045
 584: LD_INT 2
 586: DOUBLE
 587: EQUAL
 588: IFTRUE 592
 590: GO 814
 592: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
 593: LD_ADDR_VAR 0 4
 597: PUSH
 598: LD_INT 35
 600: PUSH
 601: LD_INT 45
 603: PUSH
 604: LD_INT 46
 606: PUSH
 607: LD_INT 47
 609: PUSH
 610: LD_INT 82
 612: PUSH
 613: LD_INT 83
 615: PUSH
 616: LD_INT 84
 618: PUSH
 619: LD_INT 85
 621: PUSH
 622: LD_INT 87
 624: PUSH
 625: LD_INT 70
 627: PUSH
 628: LD_INT 1
 630: PUSH
 631: LD_INT 11
 633: PUSH
 634: LD_INT 3
 636: PUSH
 637: LD_INT 4
 639: PUSH
 640: LD_INT 5
 642: PUSH
 643: LD_INT 6
 645: PUSH
 646: LD_INT 15
 648: PUSH
 649: LD_INT 18
 651: PUSH
 652: LD_INT 7
 654: PUSH
 655: LD_INT 17
 657: PUSH
 658: LD_INT 8
 660: PUSH
 661: LD_INT 20
 663: PUSH
 664: LD_INT 21
 666: PUSH
 667: LD_INT 22
 669: PUSH
 670: LD_INT 72
 672: PUSH
 673: LD_INT 26
 675: PUSH
 676: LD_INT 69
 678: PUSH
 679: LD_INT 39
 681: PUSH
 682: LD_INT 40
 684: PUSH
 685: LD_INT 41
 687: PUSH
 688: LD_INT 42
 690: PUSH
 691: LD_INT 43
 693: PUSH
 694: LD_INT 48
 696: PUSH
 697: LD_INT 49
 699: PUSH
 700: LD_INT 50
 702: PUSH
 703: LD_INT 51
 705: PUSH
 706: LD_INT 52
 708: PUSH
 709: LD_INT 53
 711: PUSH
 712: LD_INT 54
 714: PUSH
 715: LD_INT 55
 717: PUSH
 718: LD_INT 56
 720: PUSH
 721: LD_INT 60
 723: PUSH
 724: LD_INT 61
 726: PUSH
 727: LD_INT 62
 729: PUSH
 730: LD_INT 66
 732: PUSH
 733: LD_INT 67
 735: PUSH
 736: LD_INT 68
 738: PUSH
 739: LD_INT 81
 741: PUSH
 742: LD_INT 82
 744: PUSH
 745: LD_INT 83
 747: PUSH
 748: LD_INT 84
 750: PUSH
 751: LD_INT 85
 753: PUSH
 754: LD_INT 87
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: LIST
 763: LIST
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: ST_TO_ADDR
 812: GO 1045
 814: LD_INT 3
 816: DOUBLE
 817: EQUAL
 818: IFTRUE 822
 820: GO 1044
 822: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
 823: LD_ADDR_VAR 0 4
 827: PUSH
 828: LD_INT 46
 830: PUSH
 831: LD_INT 47
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: LD_INT 2
 839: PUSH
 840: LD_INT 82
 842: PUSH
 843: LD_INT 83
 845: PUSH
 846: LD_INT 84
 848: PUSH
 849: LD_INT 85
 851: PUSH
 852: LD_INT 86
 854: PUSH
 855: LD_INT 11
 857: PUSH
 858: LD_INT 9
 860: PUSH
 861: LD_INT 20
 863: PUSH
 864: LD_INT 19
 866: PUSH
 867: LD_INT 21
 869: PUSH
 870: LD_INT 24
 872: PUSH
 873: LD_INT 22
 875: PUSH
 876: LD_INT 25
 878: PUSH
 879: LD_INT 28
 881: PUSH
 882: LD_INT 29
 884: PUSH
 885: LD_INT 30
 887: PUSH
 888: LD_INT 31
 890: PUSH
 891: LD_INT 37
 893: PUSH
 894: LD_INT 38
 896: PUSH
 897: LD_INT 32
 899: PUSH
 900: LD_INT 27
 902: PUSH
 903: LD_INT 33
 905: PUSH
 906: LD_INT 69
 908: PUSH
 909: LD_INT 39
 911: PUSH
 912: LD_INT 34
 914: PUSH
 915: LD_INT 40
 917: PUSH
 918: LD_INT 71
 920: PUSH
 921: LD_INT 23
 923: PUSH
 924: LD_INT 44
 926: PUSH
 927: LD_INT 48
 929: PUSH
 930: LD_INT 49
 932: PUSH
 933: LD_INT 50
 935: PUSH
 936: LD_INT 51
 938: PUSH
 939: LD_INT 52
 941: PUSH
 942: LD_INT 53
 944: PUSH
 945: LD_INT 54
 947: PUSH
 948: LD_INT 55
 950: PUSH
 951: LD_INT 56
 953: PUSH
 954: LD_INT 57
 956: PUSH
 957: LD_INT 58
 959: PUSH
 960: LD_INT 59
 962: PUSH
 963: LD_INT 63
 965: PUSH
 966: LD_INT 64
 968: PUSH
 969: LD_INT 65
 971: PUSH
 972: LD_INT 82
 974: PUSH
 975: LD_INT 83
 977: PUSH
 978: LD_INT 84
 980: PUSH
 981: LD_INT 85
 983: PUSH
 984: LD_INT 86
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: ST_TO_ADDR
1042: GO 1045
1044: POP
// if state > - 1 and state < 3 then
1045: LD_VAR 0 3
1049: PUSH
1050: LD_INT 1
1052: NEG
1053: GREATER
1054: PUSH
1055: LD_VAR 0 3
1059: PUSH
1060: LD_INT 3
1062: LESS
1063: AND
1064: IFFALSE 1121
// for i in result do
1066: LD_ADDR_VAR 0 5
1070: PUSH
1071: LD_VAR 0 4
1075: PUSH
1076: FOR_IN
1077: IFFALSE 1119
// if GetTech ( i , side ) <> state then
1079: LD_VAR 0 5
1083: PPUSH
1084: LD_VAR 0 1
1088: PPUSH
1089: CALL_OW 321
1093: PUSH
1094: LD_VAR 0 3
1098: NONEQUAL
1099: IFFALSE 1117
// result := result diff i ;
1101: LD_ADDR_VAR 0 4
1105: PUSH
1106: LD_VAR 0 4
1110: PUSH
1111: LD_VAR 0 5
1115: DIFF
1116: ST_TO_ADDR
1117: GO 1076
1119: POP
1120: POP
// end ;
1121: LD_VAR 0 4
1125: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1126: LD_INT 0
1128: PPUSH
1129: PPUSH
1130: PPUSH
// result := true ;
1131: LD_ADDR_VAR 0 3
1135: PUSH
1136: LD_INT 1
1138: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1139: LD_ADDR_VAR 0 5
1143: PUSH
1144: LD_VAR 0 2
1148: PPUSH
1149: CALL_OW 480
1153: ST_TO_ADDR
// if not tmp then
1154: LD_VAR 0 5
1158: NOT
1159: IFFALSE 1163
// exit ;
1161: GO 1212
// for i in tmp do
1163: LD_ADDR_VAR 0 4
1167: PUSH
1168: LD_VAR 0 5
1172: PUSH
1173: FOR_IN
1174: IFFALSE 1210
// if GetTech ( i , side ) <> state_researched then
1176: LD_VAR 0 4
1180: PPUSH
1181: LD_VAR 0 1
1185: PPUSH
1186: CALL_OW 321
1190: PUSH
1191: LD_INT 2
1193: NONEQUAL
1194: IFFALSE 1208
// begin result := false ;
1196: LD_ADDR_VAR 0 3
1200: PUSH
1201: LD_INT 0
1203: ST_TO_ADDR
// exit ;
1204: POP
1205: POP
1206: GO 1212
// end ;
1208: GO 1173
1210: POP
1211: POP
// end ;
1212: LD_VAR 0 3
1216: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1217: LD_INT 0
1219: PPUSH
1220: PPUSH
1221: PPUSH
1222: PPUSH
1223: PPUSH
1224: PPUSH
1225: PPUSH
1226: PPUSH
1227: PPUSH
1228: PPUSH
1229: PPUSH
1230: PPUSH
1231: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1232: LD_VAR 0 1
1236: NOT
1237: PUSH
1238: LD_VAR 0 1
1242: PPUSH
1243: CALL_OW 257
1247: PUSH
1248: LD_INT 9
1250: NONEQUAL
1251: OR
1252: IFFALSE 1256
// exit ;
1254: GO 1829
// side := GetSide ( unit ) ;
1256: LD_ADDR_VAR 0 9
1260: PUSH
1261: LD_VAR 0 1
1265: PPUSH
1266: CALL_OW 255
1270: ST_TO_ADDR
// tech_space := tech_spacanom ;
1271: LD_ADDR_VAR 0 12
1275: PUSH
1276: LD_INT 29
1278: ST_TO_ADDR
// tech_time := tech_taurad ;
1279: LD_ADDR_VAR 0 13
1283: PUSH
1284: LD_INT 28
1286: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1287: LD_ADDR_VAR 0 11
1291: PUSH
1292: LD_VAR 0 1
1296: PPUSH
1297: CALL_OW 310
1301: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1302: LD_VAR 0 11
1306: PPUSH
1307: CALL_OW 247
1311: PUSH
1312: LD_INT 2
1314: EQUAL
1315: IFFALSE 1319
// exit ;
1317: GO 1829
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1319: LD_ADDR_VAR 0 8
1323: PUSH
1324: LD_INT 81
1326: PUSH
1327: LD_VAR 0 9
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 21
1341: PUSH
1342: LD_INT 3
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PPUSH
1357: CALL_OW 69
1361: ST_TO_ADDR
// if not tmp then
1362: LD_VAR 0 8
1366: NOT
1367: IFFALSE 1371
// exit ;
1369: GO 1829
// if in_unit then
1371: LD_VAR 0 11
1375: IFFALSE 1399
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1377: LD_ADDR_VAR 0 10
1381: PUSH
1382: LD_VAR 0 8
1386: PPUSH
1387: LD_VAR 0 11
1391: PPUSH
1392: CALL_OW 74
1396: ST_TO_ADDR
1397: GO 1419
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1399: LD_ADDR_VAR 0 10
1403: PUSH
1404: LD_VAR 0 8
1408: PPUSH
1409: LD_VAR 0 1
1413: PPUSH
1414: CALL_OW 74
1418: ST_TO_ADDR
// if not enemy then
1419: LD_VAR 0 10
1423: NOT
1424: IFFALSE 1428
// exit ;
1426: GO 1829
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1428: LD_VAR 0 11
1432: PUSH
1433: LD_VAR 0 11
1437: PPUSH
1438: LD_VAR 0 10
1442: PPUSH
1443: CALL_OW 296
1447: PUSH
1448: LD_INT 13
1450: GREATER
1451: AND
1452: PUSH
1453: LD_VAR 0 1
1457: PPUSH
1458: LD_VAR 0 10
1462: PPUSH
1463: CALL_OW 296
1467: PUSH
1468: LD_INT 12
1470: GREATER
1471: OR
1472: IFFALSE 1476
// exit ;
1474: GO 1829
// missile := [ 1 ] ;
1476: LD_ADDR_VAR 0 14
1480: PUSH
1481: LD_INT 1
1483: PUSH
1484: EMPTY
1485: LIST
1486: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1487: LD_VAR 0 9
1491: PPUSH
1492: LD_VAR 0 12
1496: PPUSH
1497: CALL_OW 325
1501: IFFALSE 1530
// missile := Insert ( missile , missile + 1 , 2 ) ;
1503: LD_ADDR_VAR 0 14
1507: PUSH
1508: LD_VAR 0 14
1512: PPUSH
1513: LD_VAR 0 14
1517: PUSH
1518: LD_INT 1
1520: PLUS
1521: PPUSH
1522: LD_INT 2
1524: PPUSH
1525: CALL_OW 2
1529: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1530: LD_VAR 0 9
1534: PPUSH
1535: LD_VAR 0 13
1539: PPUSH
1540: CALL_OW 325
1544: PUSH
1545: LD_VAR 0 10
1549: PPUSH
1550: CALL_OW 255
1554: PPUSH
1555: LD_VAR 0 13
1559: PPUSH
1560: CALL_OW 325
1564: NOT
1565: AND
1566: IFFALSE 1595
// missile := Insert ( missile , missile + 1 , 3 ) ;
1568: LD_ADDR_VAR 0 14
1572: PUSH
1573: LD_VAR 0 14
1577: PPUSH
1578: LD_VAR 0 14
1582: PUSH
1583: LD_INT 1
1585: PLUS
1586: PPUSH
1587: LD_INT 3
1589: PPUSH
1590: CALL_OW 2
1594: ST_TO_ADDR
// if missile < 2 then
1595: LD_VAR 0 14
1599: PUSH
1600: LD_INT 2
1602: LESS
1603: IFFALSE 1607
// exit ;
1605: GO 1829
// x := GetX ( enemy ) ;
1607: LD_ADDR_VAR 0 4
1611: PUSH
1612: LD_VAR 0 10
1616: PPUSH
1617: CALL_OW 250
1621: ST_TO_ADDR
// y := GetY ( enemy ) ;
1622: LD_ADDR_VAR 0 5
1626: PUSH
1627: LD_VAR 0 10
1631: PPUSH
1632: CALL_OW 251
1636: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1637: LD_ADDR_VAR 0 6
1641: PUSH
1642: LD_VAR 0 4
1646: PUSH
1647: LD_INT 1
1649: NEG
1650: PPUSH
1651: LD_INT 1
1653: PPUSH
1654: CALL_OW 12
1658: PLUS
1659: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1660: LD_ADDR_VAR 0 7
1664: PUSH
1665: LD_VAR 0 5
1669: PUSH
1670: LD_INT 1
1672: NEG
1673: PPUSH
1674: LD_INT 1
1676: PPUSH
1677: CALL_OW 12
1681: PLUS
1682: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1683: LD_VAR 0 6
1687: PPUSH
1688: LD_VAR 0 7
1692: PPUSH
1693: CALL_OW 488
1697: NOT
1698: IFFALSE 1720
// begin _x := x ;
1700: LD_ADDR_VAR 0 6
1704: PUSH
1705: LD_VAR 0 4
1709: ST_TO_ADDR
// _y := y ;
1710: LD_ADDR_VAR 0 7
1714: PUSH
1715: LD_VAR 0 5
1719: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1720: LD_ADDR_VAR 0 3
1724: PUSH
1725: LD_INT 1
1727: PPUSH
1728: LD_VAR 0 14
1732: PPUSH
1733: CALL_OW 12
1737: ST_TO_ADDR
// case i of 1 :
1738: LD_VAR 0 3
1742: PUSH
1743: LD_INT 1
1745: DOUBLE
1746: EQUAL
1747: IFTRUE 1751
1749: GO 1768
1751: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1752: LD_VAR 0 1
1756: PPUSH
1757: LD_VAR 0 10
1761: PPUSH
1762: CALL_OW 115
1766: GO 1829
1768: LD_INT 2
1770: DOUBLE
1771: EQUAL
1772: IFTRUE 1776
1774: GO 1798
1776: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1777: LD_VAR 0 1
1781: PPUSH
1782: LD_VAR 0 6
1786: PPUSH
1787: LD_VAR 0 7
1791: PPUSH
1792: CALL_OW 153
1796: GO 1829
1798: LD_INT 3
1800: DOUBLE
1801: EQUAL
1802: IFTRUE 1806
1804: GO 1828
1806: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1807: LD_VAR 0 1
1811: PPUSH
1812: LD_VAR 0 6
1816: PPUSH
1817: LD_VAR 0 7
1821: PPUSH
1822: CALL_OW 154
1826: GO 1829
1828: POP
// end ;
1829: LD_VAR 0 2
1833: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1834: LD_INT 0
1836: PPUSH
1837: PPUSH
1838: PPUSH
1839: PPUSH
1840: PPUSH
1841: PPUSH
// if not unit or not building then
1842: LD_VAR 0 1
1846: NOT
1847: PUSH
1848: LD_VAR 0 2
1852: NOT
1853: OR
1854: IFFALSE 1858
// exit ;
1856: GO 2016
// x := GetX ( building ) ;
1858: LD_ADDR_VAR 0 5
1862: PUSH
1863: LD_VAR 0 2
1867: PPUSH
1868: CALL_OW 250
1872: ST_TO_ADDR
// y := GetY ( building ) ;
1873: LD_ADDR_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: PPUSH
1883: CALL_OW 251
1887: ST_TO_ADDR
// for i = 0 to 5 do
1888: LD_ADDR_VAR 0 4
1892: PUSH
1893: DOUBLE
1894: LD_INT 0
1896: DEC
1897: ST_TO_ADDR
1898: LD_INT 5
1900: PUSH
1901: FOR_TO
1902: IFFALSE 2014
// begin _x := ShiftX ( x , i , 3 ) ;
1904: LD_ADDR_VAR 0 7
1908: PUSH
1909: LD_VAR 0 5
1913: PPUSH
1914: LD_VAR 0 4
1918: PPUSH
1919: LD_INT 3
1921: PPUSH
1922: CALL_OW 272
1926: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
1927: LD_ADDR_VAR 0 8
1931: PUSH
1932: LD_VAR 0 6
1936: PPUSH
1937: LD_VAR 0 4
1941: PPUSH
1942: LD_INT 3
1944: PPUSH
1945: CALL_OW 273
1949: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1950: LD_VAR 0 7
1954: PPUSH
1955: LD_VAR 0 8
1959: PPUSH
1960: CALL_OW 488
1964: NOT
1965: IFFALSE 1969
// continue ;
1967: GO 1901
// if HexInfo ( _x , _y ) = 0 then
1969: LD_VAR 0 7
1973: PPUSH
1974: LD_VAR 0 8
1978: PPUSH
1979: CALL_OW 428
1983: PUSH
1984: LD_INT 0
1986: EQUAL
1987: IFFALSE 2012
// begin ComMoveXY ( unit , _x , _y ) ;
1989: LD_VAR 0 1
1993: PPUSH
1994: LD_VAR 0 7
1998: PPUSH
1999: LD_VAR 0 8
2003: PPUSH
2004: CALL_OW 111
// exit ;
2008: POP
2009: POP
2010: GO 2016
// end ; end ;
2012: GO 1901
2014: POP
2015: POP
// end ;
2016: LD_VAR 0 3
2020: RET
// export function ScanBase ( side , base_area ) ; begin
2021: LD_INT 0
2023: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2024: LD_ADDR_VAR 0 3
2028: PUSH
2029: LD_VAR 0 2
2033: PPUSH
2034: LD_INT 81
2036: PUSH
2037: LD_VAR 0 1
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PPUSH
2046: CALL_OW 70
2050: ST_TO_ADDR
// end ;
2051: LD_VAR 0 3
2055: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2056: LD_INT 0
2058: PPUSH
2059: PPUSH
2060: PPUSH
2061: PPUSH
// result := false ;
2062: LD_ADDR_VAR 0 2
2066: PUSH
2067: LD_INT 0
2069: ST_TO_ADDR
// side := GetSide ( unit ) ;
2070: LD_ADDR_VAR 0 3
2074: PUSH
2075: LD_VAR 0 1
2079: PPUSH
2080: CALL_OW 255
2084: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2085: LD_ADDR_VAR 0 4
2089: PUSH
2090: LD_VAR 0 1
2094: PPUSH
2095: CALL_OW 248
2099: ST_TO_ADDR
// case nat of 1 :
2100: LD_VAR 0 4
2104: PUSH
2105: LD_INT 1
2107: DOUBLE
2108: EQUAL
2109: IFTRUE 2113
2111: GO 2124
2113: POP
// tech := tech_lassight ; 2 :
2114: LD_ADDR_VAR 0 5
2118: PUSH
2119: LD_INT 12
2121: ST_TO_ADDR
2122: GO 2163
2124: LD_INT 2
2126: DOUBLE
2127: EQUAL
2128: IFTRUE 2132
2130: GO 2143
2132: POP
// tech := tech_mortar ; 3 :
2133: LD_ADDR_VAR 0 5
2137: PUSH
2138: LD_INT 41
2140: ST_TO_ADDR
2141: GO 2163
2143: LD_INT 3
2145: DOUBLE
2146: EQUAL
2147: IFTRUE 2151
2149: GO 2162
2151: POP
// tech := tech_bazooka ; end ;
2152: LD_ADDR_VAR 0 5
2156: PUSH
2157: LD_INT 44
2159: ST_TO_ADDR
2160: GO 2163
2162: POP
// if Researched ( side , tech ) then
2163: LD_VAR 0 3
2167: PPUSH
2168: LD_VAR 0 5
2172: PPUSH
2173: CALL_OW 325
2177: IFFALSE 2204
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2179: LD_ADDR_VAR 0 2
2183: PUSH
2184: LD_INT 5
2186: PUSH
2187: LD_INT 8
2189: PUSH
2190: LD_INT 9
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: LIST
2197: PUSH
2198: LD_VAR 0 4
2202: ARRAY
2203: ST_TO_ADDR
// end ;
2204: LD_VAR 0 2
2208: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2209: LD_INT 0
2211: PPUSH
2212: PPUSH
2213: PPUSH
// if not mines then
2214: LD_VAR 0 2
2218: NOT
2219: IFFALSE 2223
// exit ;
2221: GO 2367
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2223: LD_ADDR_VAR 0 5
2227: PUSH
2228: LD_INT 81
2230: PUSH
2231: LD_VAR 0 1
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: PUSH
2240: LD_INT 3
2242: PUSH
2243: LD_INT 21
2245: PUSH
2246: LD_INT 3
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PPUSH
2261: CALL_OW 69
2265: ST_TO_ADDR
// for i in mines do
2266: LD_ADDR_VAR 0 4
2270: PUSH
2271: LD_VAR 0 2
2275: PUSH
2276: FOR_IN
2277: IFFALSE 2365
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2279: LD_VAR 0 4
2283: PUSH
2284: LD_INT 1
2286: ARRAY
2287: PPUSH
2288: LD_VAR 0 4
2292: PUSH
2293: LD_INT 2
2295: ARRAY
2296: PPUSH
2297: CALL_OW 458
2301: NOT
2302: IFFALSE 2306
// continue ;
2304: GO 2276
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2306: LD_VAR 0 4
2310: PUSH
2311: LD_INT 1
2313: ARRAY
2314: PPUSH
2315: LD_VAR 0 4
2319: PUSH
2320: LD_INT 2
2322: ARRAY
2323: PPUSH
2324: CALL_OW 428
2328: PUSH
2329: LD_VAR 0 5
2333: IN
2334: IFFALSE 2363
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2336: LD_VAR 0 4
2340: PUSH
2341: LD_INT 1
2343: ARRAY
2344: PPUSH
2345: LD_VAR 0 4
2349: PUSH
2350: LD_INT 2
2352: ARRAY
2353: PPUSH
2354: LD_VAR 0 1
2358: PPUSH
2359: CALL_OW 456
// end ;
2363: GO 2276
2365: POP
2366: POP
// end ;
2367: LD_VAR 0 3
2371: RET
// export function Count ( array ) ; var i ; begin
2372: LD_INT 0
2374: PPUSH
2375: PPUSH
// result := 0 ;
2376: LD_ADDR_VAR 0 2
2380: PUSH
2381: LD_INT 0
2383: ST_TO_ADDR
// for i in array do
2384: LD_ADDR_VAR 0 3
2388: PUSH
2389: LD_VAR 0 1
2393: PUSH
2394: FOR_IN
2395: IFFALSE 2419
// if i then
2397: LD_VAR 0 3
2401: IFFALSE 2417
// result := result + 1 ;
2403: LD_ADDR_VAR 0 2
2407: PUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_INT 1
2415: PLUS
2416: ST_TO_ADDR
2417: GO 2394
2419: POP
2420: POP
// end ;
2421: LD_VAR 0 2
2425: RET
// export function IsEmpty ( building ) ; begin
2426: LD_INT 0
2428: PPUSH
// if not building then
2429: LD_VAR 0 1
2433: NOT
2434: IFFALSE 2438
// exit ;
2436: GO 2481
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2438: LD_ADDR_VAR 0 2
2442: PUSH
2443: LD_VAR 0 1
2447: PUSH
2448: LD_INT 22
2450: PUSH
2451: LD_VAR 0 1
2455: PPUSH
2456: CALL_OW 255
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 58
2467: PUSH
2468: EMPTY
2469: LIST
2470: PUSH
2471: EMPTY
2472: LIST
2473: LIST
2474: PPUSH
2475: CALL_OW 69
2479: IN
2480: ST_TO_ADDR
// end ;
2481: LD_VAR 0 2
2485: RET
// export function IsNotFull ( building ) ; begin
2486: LD_INT 0
2488: PPUSH
// if not building then
2489: LD_VAR 0 1
2493: NOT
2494: IFFALSE 2498
// exit ;
2496: GO 2517
// result := UnitsInside ( building ) < 6 ;
2498: LD_ADDR_VAR 0 2
2502: PUSH
2503: LD_VAR 0 1
2507: PPUSH
2508: CALL_OW 313
2512: PUSH
2513: LD_INT 6
2515: LESS
2516: ST_TO_ADDR
// end ;
2517: LD_VAR 0 2
2521: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2522: LD_INT 0
2524: PPUSH
2525: PPUSH
2526: PPUSH
2527: PPUSH
// tmp := [ ] ;
2528: LD_ADDR_VAR 0 3
2532: PUSH
2533: EMPTY
2534: ST_TO_ADDR
// list := [ ] ;
2535: LD_ADDR_VAR 0 5
2539: PUSH
2540: EMPTY
2541: ST_TO_ADDR
// for i = 16 to 25 do
2542: LD_ADDR_VAR 0 4
2546: PUSH
2547: DOUBLE
2548: LD_INT 16
2550: DEC
2551: ST_TO_ADDR
2552: LD_INT 25
2554: PUSH
2555: FOR_TO
2556: IFFALSE 2629
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2558: LD_ADDR_VAR 0 3
2562: PUSH
2563: LD_VAR 0 3
2567: PUSH
2568: LD_INT 22
2570: PUSH
2571: LD_VAR 0 1
2575: PPUSH
2576: CALL_OW 255
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: LD_INT 91
2587: PUSH
2588: LD_VAR 0 1
2592: PUSH
2593: LD_INT 6
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: LIST
2600: PUSH
2601: LD_INT 30
2603: PUSH
2604: LD_VAR 0 4
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: LIST
2617: PUSH
2618: EMPTY
2619: LIST
2620: PPUSH
2621: CALL_OW 69
2625: ADD
2626: ST_TO_ADDR
2627: GO 2555
2629: POP
2630: POP
// for i = 1 to tmp do
2631: LD_ADDR_VAR 0 4
2635: PUSH
2636: DOUBLE
2637: LD_INT 1
2639: DEC
2640: ST_TO_ADDR
2641: LD_VAR 0 3
2645: PUSH
2646: FOR_TO
2647: IFFALSE 2735
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2649: LD_ADDR_VAR 0 5
2653: PUSH
2654: LD_VAR 0 5
2658: PUSH
2659: LD_VAR 0 3
2663: PUSH
2664: LD_VAR 0 4
2668: ARRAY
2669: PPUSH
2670: CALL_OW 266
2674: PUSH
2675: LD_VAR 0 3
2679: PUSH
2680: LD_VAR 0 4
2684: ARRAY
2685: PPUSH
2686: CALL_OW 250
2690: PUSH
2691: LD_VAR 0 3
2695: PUSH
2696: LD_VAR 0 4
2700: ARRAY
2701: PPUSH
2702: CALL_OW 251
2706: PUSH
2707: LD_VAR 0 3
2711: PUSH
2712: LD_VAR 0 4
2716: ARRAY
2717: PPUSH
2718: CALL_OW 254
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: PUSH
2729: EMPTY
2730: LIST
2731: ADD
2732: ST_TO_ADDR
2733: GO 2646
2735: POP
2736: POP
// result := list ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_VAR 0 5
2746: ST_TO_ADDR
// end ;
2747: LD_VAR 0 2
2751: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2752: LD_INT 0
2754: PPUSH
2755: PPUSH
2756: PPUSH
2757: PPUSH
2758: PPUSH
2759: PPUSH
2760: PPUSH
// if not factory then
2761: LD_VAR 0 1
2765: NOT
2766: IFFALSE 2770
// exit ;
2768: GO 3363
// if control = control_apeman then
2770: LD_VAR 0 4
2774: PUSH
2775: LD_INT 5
2777: EQUAL
2778: IFFALSE 2887
// begin tmp := UnitsInside ( factory ) ;
2780: LD_ADDR_VAR 0 8
2784: PUSH
2785: LD_VAR 0 1
2789: PPUSH
2790: CALL_OW 313
2794: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2795: LD_VAR 0 8
2799: PPUSH
2800: LD_INT 25
2802: PUSH
2803: LD_INT 12
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PPUSH
2810: CALL_OW 72
2814: NOT
2815: IFFALSE 2825
// control := control_manual ;
2817: LD_ADDR_VAR 0 4
2821: PUSH
2822: LD_INT 1
2824: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2825: LD_ADDR_VAR 0 8
2829: PUSH
2830: LD_VAR 0 1
2834: PPUSH
2835: CALL 2522 0 1
2839: ST_TO_ADDR
// if tmp then
2840: LD_VAR 0 8
2844: IFFALSE 2887
// begin for i in tmp do
2846: LD_ADDR_VAR 0 7
2850: PUSH
2851: LD_VAR 0 8
2855: PUSH
2856: FOR_IN
2857: IFFALSE 2885
// if i [ 1 ] = b_ext_radio then
2859: LD_VAR 0 7
2863: PUSH
2864: LD_INT 1
2866: ARRAY
2867: PUSH
2868: LD_INT 22
2870: EQUAL
2871: IFFALSE 2883
// begin control := control_remote ;
2873: LD_ADDR_VAR 0 4
2877: PUSH
2878: LD_INT 2
2880: ST_TO_ADDR
// break ;
2881: GO 2885
// end ;
2883: GO 2856
2885: POP
2886: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
2887: LD_VAR 0 1
2891: PPUSH
2892: LD_VAR 0 2
2896: PPUSH
2897: LD_VAR 0 3
2901: PPUSH
2902: LD_VAR 0 4
2906: PPUSH
2907: LD_VAR 0 5
2911: PPUSH
2912: CALL_OW 448
2916: IFFALSE 2951
// begin result := [ chassis , engine , control , weapon ] ;
2918: LD_ADDR_VAR 0 6
2922: PUSH
2923: LD_VAR 0 2
2927: PUSH
2928: LD_VAR 0 3
2932: PUSH
2933: LD_VAR 0 4
2937: PUSH
2938: LD_VAR 0 5
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: ST_TO_ADDR
// exit ;
2949: GO 3363
// end ; _chassis := AvailableChassisList ( factory ) ;
2951: LD_ADDR_VAR 0 9
2955: PUSH
2956: LD_VAR 0 1
2960: PPUSH
2961: CALL_OW 475
2965: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
2966: LD_ADDR_VAR 0 11
2970: PUSH
2971: LD_VAR 0 1
2975: PPUSH
2976: CALL_OW 476
2980: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
2981: LD_ADDR_VAR 0 12
2985: PUSH
2986: LD_VAR 0 1
2990: PPUSH
2991: CALL_OW 477
2995: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
2996: LD_ADDR_VAR 0 10
3000: PUSH
3001: LD_VAR 0 1
3005: PPUSH
3006: CALL_OW 478
3010: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3011: LD_VAR 0 9
3015: NOT
3016: PUSH
3017: LD_VAR 0 11
3021: NOT
3022: OR
3023: PUSH
3024: LD_VAR 0 12
3028: NOT
3029: OR
3030: PUSH
3031: LD_VAR 0 10
3035: NOT
3036: OR
3037: IFFALSE 3072
// begin result := [ chassis , engine , control , weapon ] ;
3039: LD_ADDR_VAR 0 6
3043: PUSH
3044: LD_VAR 0 2
3048: PUSH
3049: LD_VAR 0 3
3053: PUSH
3054: LD_VAR 0 4
3058: PUSH
3059: LD_VAR 0 5
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: ST_TO_ADDR
// exit ;
3070: GO 3363
// end ; if not chassis in _chassis then
3072: LD_VAR 0 2
3076: PUSH
3077: LD_VAR 0 9
3081: IN
3082: NOT
3083: IFFALSE 3109
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3085: LD_ADDR_VAR 0 2
3089: PUSH
3090: LD_VAR 0 9
3094: PUSH
3095: LD_INT 1
3097: PPUSH
3098: LD_VAR 0 9
3102: PPUSH
3103: CALL_OW 12
3107: ARRAY
3108: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3109: LD_VAR 0 2
3113: PPUSH
3114: LD_VAR 0 3
3118: PPUSH
3119: CALL 3368 0 2
3123: NOT
3124: IFFALSE 3183
// repeat engine := _engine [ 1 ] ;
3126: LD_ADDR_VAR 0 3
3130: PUSH
3131: LD_VAR 0 11
3135: PUSH
3136: LD_INT 1
3138: ARRAY
3139: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3140: LD_ADDR_VAR 0 11
3144: PUSH
3145: LD_VAR 0 11
3149: PPUSH
3150: LD_INT 1
3152: PPUSH
3153: CALL_OW 3
3157: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3158: LD_VAR 0 2
3162: PPUSH
3163: LD_VAR 0 3
3167: PPUSH
3168: CALL 3368 0 2
3172: PUSH
3173: LD_VAR 0 11
3177: PUSH
3178: EMPTY
3179: EQUAL
3180: OR
3181: IFFALSE 3126
// if not control in _control then
3183: LD_VAR 0 4
3187: PUSH
3188: LD_VAR 0 12
3192: IN
3193: NOT
3194: IFFALSE 3220
// control := _control [ rand ( 1 , _control ) ] ;
3196: LD_ADDR_VAR 0 4
3200: PUSH
3201: LD_VAR 0 12
3205: PUSH
3206: LD_INT 1
3208: PPUSH
3209: LD_VAR 0 12
3213: PPUSH
3214: CALL_OW 12
3218: ARRAY
3219: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3220: LD_VAR 0 2
3224: PPUSH
3225: LD_VAR 0 5
3229: PPUSH
3230: CALL 3588 0 2
3234: NOT
3235: IFFALSE 3294
// repeat weapon := _weapon [ 1 ] ;
3237: LD_ADDR_VAR 0 5
3241: PUSH
3242: LD_VAR 0 10
3246: PUSH
3247: LD_INT 1
3249: ARRAY
3250: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3251: LD_ADDR_VAR 0 10
3255: PUSH
3256: LD_VAR 0 10
3260: PPUSH
3261: LD_INT 1
3263: PPUSH
3264: CALL_OW 3
3268: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3269: LD_VAR 0 2
3273: PPUSH
3274: LD_VAR 0 5
3278: PPUSH
3279: CALL 3588 0 2
3283: PUSH
3284: LD_VAR 0 10
3288: PUSH
3289: EMPTY
3290: EQUAL
3291: OR
3292: IFFALSE 3237
// result := [ ] ;
3294: LD_ADDR_VAR 0 6
3298: PUSH
3299: EMPTY
3300: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3301: LD_VAR 0 1
3305: PPUSH
3306: LD_VAR 0 2
3310: PPUSH
3311: LD_VAR 0 3
3315: PPUSH
3316: LD_VAR 0 4
3320: PPUSH
3321: LD_VAR 0 5
3325: PPUSH
3326: CALL_OW 448
3330: IFFALSE 3363
// result := [ chassis , engine , control , weapon ] ;
3332: LD_ADDR_VAR 0 6
3336: PUSH
3337: LD_VAR 0 2
3341: PUSH
3342: LD_VAR 0 3
3346: PUSH
3347: LD_VAR 0 4
3351: PUSH
3352: LD_VAR 0 5
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: ST_TO_ADDR
// end ;
3363: LD_VAR 0 6
3367: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3368: LD_INT 0
3370: PPUSH
// if not chassis or not engine then
3371: LD_VAR 0 1
3375: NOT
3376: PUSH
3377: LD_VAR 0 2
3381: NOT
3382: OR
3383: IFFALSE 3387
// exit ;
3385: GO 3583
// case engine of engine_solar :
3387: LD_VAR 0 2
3391: PUSH
3392: LD_INT 2
3394: DOUBLE
3395: EQUAL
3396: IFTRUE 3400
3398: GO 3438
3400: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3401: LD_ADDR_VAR 0 3
3405: PUSH
3406: LD_INT 11
3408: PUSH
3409: LD_INT 12
3411: PUSH
3412: LD_INT 13
3414: PUSH
3415: LD_INT 14
3417: PUSH
3418: LD_INT 1
3420: PUSH
3421: LD_INT 2
3423: PUSH
3424: LD_INT 3
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: ST_TO_ADDR
3436: GO 3567
3438: LD_INT 1
3440: DOUBLE
3441: EQUAL
3442: IFTRUE 3446
3444: GO 3508
3446: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3447: LD_ADDR_VAR 0 3
3451: PUSH
3452: LD_INT 11
3454: PUSH
3455: LD_INT 12
3457: PUSH
3458: LD_INT 13
3460: PUSH
3461: LD_INT 14
3463: PUSH
3464: LD_INT 1
3466: PUSH
3467: LD_INT 2
3469: PUSH
3470: LD_INT 3
3472: PUSH
3473: LD_INT 4
3475: PUSH
3476: LD_INT 5
3478: PUSH
3479: LD_INT 21
3481: PUSH
3482: LD_INT 23
3484: PUSH
3485: LD_INT 22
3487: PUSH
3488: LD_INT 24
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: ST_TO_ADDR
3506: GO 3567
3508: LD_INT 3
3510: DOUBLE
3511: EQUAL
3512: IFTRUE 3516
3514: GO 3566
3516: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3517: LD_ADDR_VAR 0 3
3521: PUSH
3522: LD_INT 13
3524: PUSH
3525: LD_INT 14
3527: PUSH
3528: LD_INT 2
3530: PUSH
3531: LD_INT 3
3533: PUSH
3534: LD_INT 4
3536: PUSH
3537: LD_INT 5
3539: PUSH
3540: LD_INT 21
3542: PUSH
3543: LD_INT 22
3545: PUSH
3546: LD_INT 23
3548: PUSH
3549: LD_INT 24
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: ST_TO_ADDR
3564: GO 3567
3566: POP
// result := ( chassis in result ) ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: LD_VAR 0 1
3576: PUSH
3577: LD_VAR 0 3
3581: IN
3582: ST_TO_ADDR
// end ;
3583: LD_VAR 0 3
3587: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3588: LD_INT 0
3590: PPUSH
// if not chassis or not weapon then
3591: LD_VAR 0 1
3595: NOT
3596: PUSH
3597: LD_VAR 0 2
3601: NOT
3602: OR
3603: IFFALSE 3607
// exit ;
3605: GO 4633
// case weapon of us_machine_gun :
3607: LD_VAR 0 2
3611: PUSH
3612: LD_INT 2
3614: DOUBLE
3615: EQUAL
3616: IFTRUE 3620
3618: GO 3650
3620: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3621: LD_ADDR_VAR 0 3
3625: PUSH
3626: LD_INT 1
3628: PUSH
3629: LD_INT 2
3631: PUSH
3632: LD_INT 3
3634: PUSH
3635: LD_INT 4
3637: PUSH
3638: LD_INT 5
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: ST_TO_ADDR
3648: GO 4617
3650: LD_INT 3
3652: DOUBLE
3653: EQUAL
3654: IFTRUE 3658
3656: GO 3688
3658: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3659: LD_ADDR_VAR 0 3
3663: PUSH
3664: LD_INT 1
3666: PUSH
3667: LD_INT 2
3669: PUSH
3670: LD_INT 3
3672: PUSH
3673: LD_INT 4
3675: PUSH
3676: LD_INT 5
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: ST_TO_ADDR
3686: GO 4617
3688: LD_INT 11
3690: DOUBLE
3691: EQUAL
3692: IFTRUE 3696
3694: GO 3726
3696: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3697: LD_ADDR_VAR 0 3
3701: PUSH
3702: LD_INT 1
3704: PUSH
3705: LD_INT 2
3707: PUSH
3708: LD_INT 3
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: LD_INT 5
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: ST_TO_ADDR
3724: GO 4617
3726: LD_INT 4
3728: DOUBLE
3729: EQUAL
3730: IFTRUE 3734
3732: GO 3760
3734: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3735: LD_ADDR_VAR 0 3
3739: PUSH
3740: LD_INT 2
3742: PUSH
3743: LD_INT 3
3745: PUSH
3746: LD_INT 4
3748: PUSH
3749: LD_INT 5
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: ST_TO_ADDR
3758: GO 4617
3760: LD_INT 5
3762: DOUBLE
3763: EQUAL
3764: IFTRUE 3768
3766: GO 3794
3768: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3769: LD_ADDR_VAR 0 3
3773: PUSH
3774: LD_INT 2
3776: PUSH
3777: LD_INT 3
3779: PUSH
3780: LD_INT 4
3782: PUSH
3783: LD_INT 5
3785: PUSH
3786: EMPTY
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: ST_TO_ADDR
3792: GO 4617
3794: LD_INT 9
3796: DOUBLE
3797: EQUAL
3798: IFTRUE 3802
3800: GO 3828
3802: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3803: LD_ADDR_VAR 0 3
3807: PUSH
3808: LD_INT 2
3810: PUSH
3811: LD_INT 3
3813: PUSH
3814: LD_INT 4
3816: PUSH
3817: LD_INT 5
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: ST_TO_ADDR
3826: GO 4617
3828: LD_INT 7
3830: DOUBLE
3831: EQUAL
3832: IFTRUE 3836
3834: GO 3862
3836: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
3837: LD_ADDR_VAR 0 3
3841: PUSH
3842: LD_INT 2
3844: PUSH
3845: LD_INT 3
3847: PUSH
3848: LD_INT 4
3850: PUSH
3851: LD_INT 5
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: ST_TO_ADDR
3860: GO 4617
3862: LD_INT 12
3864: DOUBLE
3865: EQUAL
3866: IFTRUE 3870
3868: GO 3896
3870: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
3871: LD_ADDR_VAR 0 3
3875: PUSH
3876: LD_INT 2
3878: PUSH
3879: LD_INT 3
3881: PUSH
3882: LD_INT 4
3884: PUSH
3885: LD_INT 5
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: ST_TO_ADDR
3894: GO 4617
3896: LD_INT 13
3898: DOUBLE
3899: EQUAL
3900: IFTRUE 3904
3902: GO 3930
3904: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
3905: LD_ADDR_VAR 0 3
3909: PUSH
3910: LD_INT 2
3912: PUSH
3913: LD_INT 3
3915: PUSH
3916: LD_INT 4
3918: PUSH
3919: LD_INT 5
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: ST_TO_ADDR
3928: GO 4617
3930: LD_INT 14
3932: DOUBLE
3933: EQUAL
3934: IFTRUE 3938
3936: GO 3956
3938: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
3939: LD_ADDR_VAR 0 3
3943: PUSH
3944: LD_INT 4
3946: PUSH
3947: LD_INT 5
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: ST_TO_ADDR
3954: GO 4617
3956: LD_INT 6
3958: DOUBLE
3959: EQUAL
3960: IFTRUE 3964
3962: GO 3982
3964: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
3965: LD_ADDR_VAR 0 3
3969: PUSH
3970: LD_INT 4
3972: PUSH
3973: LD_INT 5
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: ST_TO_ADDR
3980: GO 4617
3982: LD_INT 10
3984: DOUBLE
3985: EQUAL
3986: IFTRUE 3990
3988: GO 4008
3990: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
3991: LD_ADDR_VAR 0 3
3995: PUSH
3996: LD_INT 4
3998: PUSH
3999: LD_INT 5
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: ST_TO_ADDR
4006: GO 4617
4008: LD_INT 22
4010: DOUBLE
4011: EQUAL
4012: IFTRUE 4016
4014: GO 4042
4016: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4017: LD_ADDR_VAR 0 3
4021: PUSH
4022: LD_INT 11
4024: PUSH
4025: LD_INT 12
4027: PUSH
4028: LD_INT 13
4030: PUSH
4031: LD_INT 14
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: ST_TO_ADDR
4040: GO 4617
4042: LD_INT 23
4044: DOUBLE
4045: EQUAL
4046: IFTRUE 4050
4048: GO 4076
4050: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4051: LD_ADDR_VAR 0 3
4055: PUSH
4056: LD_INT 11
4058: PUSH
4059: LD_INT 12
4061: PUSH
4062: LD_INT 13
4064: PUSH
4065: LD_INT 14
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: ST_TO_ADDR
4074: GO 4617
4076: LD_INT 24
4078: DOUBLE
4079: EQUAL
4080: IFTRUE 4084
4082: GO 4110
4084: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4085: LD_ADDR_VAR 0 3
4089: PUSH
4090: LD_INT 11
4092: PUSH
4093: LD_INT 12
4095: PUSH
4096: LD_INT 13
4098: PUSH
4099: LD_INT 14
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: ST_TO_ADDR
4108: GO 4617
4110: LD_INT 30
4112: DOUBLE
4113: EQUAL
4114: IFTRUE 4118
4116: GO 4144
4118: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4119: LD_ADDR_VAR 0 3
4123: PUSH
4124: LD_INT 11
4126: PUSH
4127: LD_INT 12
4129: PUSH
4130: LD_INT 13
4132: PUSH
4133: LD_INT 14
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: ST_TO_ADDR
4142: GO 4617
4144: LD_INT 25
4146: DOUBLE
4147: EQUAL
4148: IFTRUE 4152
4150: GO 4170
4152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4153: LD_ADDR_VAR 0 3
4157: PUSH
4158: LD_INT 13
4160: PUSH
4161: LD_INT 14
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: ST_TO_ADDR
4168: GO 4617
4170: LD_INT 27
4172: DOUBLE
4173: EQUAL
4174: IFTRUE 4178
4176: GO 4196
4178: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4179: LD_ADDR_VAR 0 3
4183: PUSH
4184: LD_INT 13
4186: PUSH
4187: LD_INT 14
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: ST_TO_ADDR
4194: GO 4617
4196: LD_INT 28
4198: DOUBLE
4199: EQUAL
4200: IFTRUE 4204
4202: GO 4222
4204: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4205: LD_ADDR_VAR 0 3
4209: PUSH
4210: LD_INT 13
4212: PUSH
4213: LD_INT 14
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: ST_TO_ADDR
4220: GO 4617
4222: LD_INT 29
4224: DOUBLE
4225: EQUAL
4226: IFTRUE 4230
4228: GO 4248
4230: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4231: LD_ADDR_VAR 0 3
4235: PUSH
4236: LD_INT 13
4238: PUSH
4239: LD_INT 14
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: ST_TO_ADDR
4246: GO 4617
4248: LD_INT 31
4250: DOUBLE
4251: EQUAL
4252: IFTRUE 4256
4254: GO 4274
4256: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4257: LD_ADDR_VAR 0 3
4261: PUSH
4262: LD_INT 13
4264: PUSH
4265: LD_INT 14
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: ST_TO_ADDR
4272: GO 4617
4274: LD_INT 26
4276: DOUBLE
4277: EQUAL
4278: IFTRUE 4282
4280: GO 4300
4282: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4283: LD_ADDR_VAR 0 3
4287: PUSH
4288: LD_INT 13
4290: PUSH
4291: LD_INT 14
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: ST_TO_ADDR
4298: GO 4617
4300: LD_INT 42
4302: DOUBLE
4303: EQUAL
4304: IFTRUE 4308
4306: GO 4334
4308: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4309: LD_ADDR_VAR 0 3
4313: PUSH
4314: LD_INT 21
4316: PUSH
4317: LD_INT 22
4319: PUSH
4320: LD_INT 23
4322: PUSH
4323: LD_INT 24
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: ST_TO_ADDR
4332: GO 4617
4334: LD_INT 43
4336: DOUBLE
4337: EQUAL
4338: IFTRUE 4342
4340: GO 4368
4342: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4343: LD_ADDR_VAR 0 3
4347: PUSH
4348: LD_INT 21
4350: PUSH
4351: LD_INT 22
4353: PUSH
4354: LD_INT 23
4356: PUSH
4357: LD_INT 24
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: ST_TO_ADDR
4366: GO 4617
4368: LD_INT 44
4370: DOUBLE
4371: EQUAL
4372: IFTRUE 4376
4374: GO 4402
4376: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4377: LD_ADDR_VAR 0 3
4381: PUSH
4382: LD_INT 21
4384: PUSH
4385: LD_INT 22
4387: PUSH
4388: LD_INT 23
4390: PUSH
4391: LD_INT 24
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: ST_TO_ADDR
4400: GO 4617
4402: LD_INT 45
4404: DOUBLE
4405: EQUAL
4406: IFTRUE 4410
4408: GO 4436
4410: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4411: LD_ADDR_VAR 0 3
4415: PUSH
4416: LD_INT 21
4418: PUSH
4419: LD_INT 22
4421: PUSH
4422: LD_INT 23
4424: PUSH
4425: LD_INT 24
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: ST_TO_ADDR
4434: GO 4617
4436: LD_INT 49
4438: DOUBLE
4439: EQUAL
4440: IFTRUE 4444
4442: GO 4470
4444: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: LD_INT 21
4452: PUSH
4453: LD_INT 22
4455: PUSH
4456: LD_INT 23
4458: PUSH
4459: LD_INT 24
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: ST_TO_ADDR
4468: GO 4617
4470: LD_INT 51
4472: DOUBLE
4473: EQUAL
4474: IFTRUE 4478
4476: GO 4504
4478: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4479: LD_ADDR_VAR 0 3
4483: PUSH
4484: LD_INT 21
4486: PUSH
4487: LD_INT 22
4489: PUSH
4490: LD_INT 23
4492: PUSH
4493: LD_INT 24
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: ST_TO_ADDR
4502: GO 4617
4504: LD_INT 52
4506: DOUBLE
4507: EQUAL
4508: IFTRUE 4512
4510: GO 4538
4512: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4513: LD_ADDR_VAR 0 3
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 22
4523: PUSH
4524: LD_INT 23
4526: PUSH
4527: LD_INT 24
4529: PUSH
4530: EMPTY
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: ST_TO_ADDR
4536: GO 4617
4538: LD_INT 53
4540: DOUBLE
4541: EQUAL
4542: IFTRUE 4546
4544: GO 4564
4546: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4547: LD_ADDR_VAR 0 3
4551: PUSH
4552: LD_INT 23
4554: PUSH
4555: LD_INT 24
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: ST_TO_ADDR
4562: GO 4617
4564: LD_INT 46
4566: DOUBLE
4567: EQUAL
4568: IFTRUE 4572
4570: GO 4590
4572: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4573: LD_ADDR_VAR 0 3
4577: PUSH
4578: LD_INT 23
4580: PUSH
4581: LD_INT 24
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: ST_TO_ADDR
4588: GO 4617
4590: LD_INT 47
4592: DOUBLE
4593: EQUAL
4594: IFTRUE 4598
4596: GO 4616
4598: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4599: LD_ADDR_VAR 0 3
4603: PUSH
4604: LD_INT 23
4606: PUSH
4607: LD_INT 24
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: ST_TO_ADDR
4614: GO 4617
4616: POP
// result := ( chassis in result ) ;
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: LD_VAR 0 1
4626: PUSH
4627: LD_VAR 0 3
4631: IN
4632: ST_TO_ADDR
// end ;
4633: LD_VAR 0 3
4637: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4638: LD_INT 0
4640: PPUSH
4641: PPUSH
4642: PPUSH
4643: PPUSH
4644: PPUSH
4645: PPUSH
4646: PPUSH
// result := array ;
4647: LD_ADDR_VAR 0 5
4651: PUSH
4652: LD_VAR 0 1
4656: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4657: LD_VAR 0 1
4661: NOT
4662: PUSH
4663: LD_VAR 0 2
4667: NOT
4668: OR
4669: PUSH
4670: LD_VAR 0 3
4674: NOT
4675: OR
4676: PUSH
4677: LD_VAR 0 2
4681: PUSH
4682: LD_VAR 0 1
4686: GREATER
4687: OR
4688: PUSH
4689: LD_VAR 0 3
4693: PUSH
4694: LD_VAR 0 1
4698: GREATER
4699: OR
4700: IFFALSE 4704
// exit ;
4702: GO 5000
// if direction then
4704: LD_VAR 0 4
4708: IFFALSE 4772
// begin d := 1 ;
4710: LD_ADDR_VAR 0 9
4714: PUSH
4715: LD_INT 1
4717: ST_TO_ADDR
// if i_from > i_to then
4718: LD_VAR 0 2
4722: PUSH
4723: LD_VAR 0 3
4727: GREATER
4728: IFFALSE 4754
// length := ( array - i_from ) + i_to else
4730: LD_ADDR_VAR 0 11
4734: PUSH
4735: LD_VAR 0 1
4739: PUSH
4740: LD_VAR 0 2
4744: MINUS
4745: PUSH
4746: LD_VAR 0 3
4750: PLUS
4751: ST_TO_ADDR
4752: GO 4770
// length := i_to - i_from ;
4754: LD_ADDR_VAR 0 11
4758: PUSH
4759: LD_VAR 0 3
4763: PUSH
4764: LD_VAR 0 2
4768: MINUS
4769: ST_TO_ADDR
// end else
4770: GO 4833
// begin d := - 1 ;
4772: LD_ADDR_VAR 0 9
4776: PUSH
4777: LD_INT 1
4779: NEG
4780: ST_TO_ADDR
// if i_from > i_to then
4781: LD_VAR 0 2
4785: PUSH
4786: LD_VAR 0 3
4790: GREATER
4791: IFFALSE 4811
// length := i_from - i_to else
4793: LD_ADDR_VAR 0 11
4797: PUSH
4798: LD_VAR 0 2
4802: PUSH
4803: LD_VAR 0 3
4807: MINUS
4808: ST_TO_ADDR
4809: GO 4833
// length := ( array - i_to ) + i_from ;
4811: LD_ADDR_VAR 0 11
4815: PUSH
4816: LD_VAR 0 1
4820: PUSH
4821: LD_VAR 0 3
4825: MINUS
4826: PUSH
4827: LD_VAR 0 2
4831: PLUS
4832: ST_TO_ADDR
// end ; if not length then
4833: LD_VAR 0 11
4837: NOT
4838: IFFALSE 4842
// exit ;
4840: GO 5000
// tmp := array ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_VAR 0 1
4851: ST_TO_ADDR
// for i = 1 to length do
4852: LD_ADDR_VAR 0 6
4856: PUSH
4857: DOUBLE
4858: LD_INT 1
4860: DEC
4861: ST_TO_ADDR
4862: LD_VAR 0 11
4866: PUSH
4867: FOR_TO
4868: IFFALSE 4988
// begin for j = 1 to array do
4870: LD_ADDR_VAR 0 7
4874: PUSH
4875: DOUBLE
4876: LD_INT 1
4878: DEC
4879: ST_TO_ADDR
4880: LD_VAR 0 1
4884: PUSH
4885: FOR_TO
4886: IFFALSE 4974
// begin k := j + d ;
4888: LD_ADDR_VAR 0 8
4892: PUSH
4893: LD_VAR 0 7
4897: PUSH
4898: LD_VAR 0 9
4902: PLUS
4903: ST_TO_ADDR
// if k > array then
4904: LD_VAR 0 8
4908: PUSH
4909: LD_VAR 0 1
4913: GREATER
4914: IFFALSE 4924
// k := 1 ;
4916: LD_ADDR_VAR 0 8
4920: PUSH
4921: LD_INT 1
4923: ST_TO_ADDR
// if not k then
4924: LD_VAR 0 8
4928: NOT
4929: IFFALSE 4941
// k := array ;
4931: LD_ADDR_VAR 0 8
4935: PUSH
4936: LD_VAR 0 1
4940: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
4941: LD_ADDR_VAR 0 10
4945: PUSH
4946: LD_VAR 0 10
4950: PPUSH
4951: LD_VAR 0 8
4955: PPUSH
4956: LD_VAR 0 1
4960: PUSH
4961: LD_VAR 0 7
4965: ARRAY
4966: PPUSH
4967: CALL_OW 1
4971: ST_TO_ADDR
// end ;
4972: GO 4885
4974: POP
4975: POP
// array := tmp ;
4976: LD_ADDR_VAR 0 1
4980: PUSH
4981: LD_VAR 0 10
4985: ST_TO_ADDR
// end ;
4986: GO 4867
4988: POP
4989: POP
// result := array ;
4990: LD_ADDR_VAR 0 5
4994: PUSH
4995: LD_VAR 0 1
4999: ST_TO_ADDR
// end ;
5000: LD_VAR 0 5
5004: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5005: LD_INT 0
5007: PPUSH
5008: PPUSH
// result := 0 ;
5009: LD_ADDR_VAR 0 3
5013: PUSH
5014: LD_INT 0
5016: ST_TO_ADDR
// if not array or not value in array then
5017: LD_VAR 0 1
5021: NOT
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: LD_VAR 0 1
5032: IN
5033: NOT
5034: OR
5035: IFFALSE 5039
// exit ;
5037: GO 5093
// for i = 1 to array do
5039: LD_ADDR_VAR 0 4
5043: PUSH
5044: DOUBLE
5045: LD_INT 1
5047: DEC
5048: ST_TO_ADDR
5049: LD_VAR 0 1
5053: PUSH
5054: FOR_TO
5055: IFFALSE 5091
// if value = array [ i ] then
5057: LD_VAR 0 2
5061: PUSH
5062: LD_VAR 0 1
5066: PUSH
5067: LD_VAR 0 4
5071: ARRAY
5072: EQUAL
5073: IFFALSE 5089
// begin result := i ;
5075: LD_ADDR_VAR 0 3
5079: PUSH
5080: LD_VAR 0 4
5084: ST_TO_ADDR
// exit ;
5085: POP
5086: POP
5087: GO 5093
// end ;
5089: GO 5054
5091: POP
5092: POP
// end ;
5093: LD_VAR 0 3
5097: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5098: LD_INT 0
5100: PPUSH
// vc_chassis := chassis ;
5101: LD_ADDR_OWVAR 37
5105: PUSH
5106: LD_VAR 0 1
5110: ST_TO_ADDR
// vc_engine := engine ;
5111: LD_ADDR_OWVAR 39
5115: PUSH
5116: LD_VAR 0 2
5120: ST_TO_ADDR
// vc_control := control ;
5121: LD_ADDR_OWVAR 38
5125: PUSH
5126: LD_VAR 0 3
5130: ST_TO_ADDR
// vc_weapon := weapon ;
5131: LD_ADDR_OWVAR 40
5135: PUSH
5136: LD_VAR 0 4
5140: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5141: LD_ADDR_OWVAR 41
5145: PUSH
5146: LD_VAR 0 5
5150: ST_TO_ADDR
// end ;
5151: LD_VAR 0 6
5155: RET
// export function WantPlant ( unit ) ; var task ; begin
5156: LD_INT 0
5158: PPUSH
5159: PPUSH
// result := false ;
5160: LD_ADDR_VAR 0 2
5164: PUSH
5165: LD_INT 0
5167: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5168: LD_ADDR_VAR 0 3
5172: PUSH
5173: LD_VAR 0 1
5177: PPUSH
5178: CALL_OW 437
5182: ST_TO_ADDR
// if task then
5183: LD_VAR 0 3
5187: IFFALSE 5215
// if task [ 1 ] [ 1 ] = p then
5189: LD_VAR 0 3
5193: PUSH
5194: LD_INT 1
5196: ARRAY
5197: PUSH
5198: LD_INT 1
5200: ARRAY
5201: PUSH
5202: LD_STRING p
5204: EQUAL
5205: IFFALSE 5215
// result := true ;
5207: LD_ADDR_VAR 0 2
5211: PUSH
5212: LD_INT 1
5214: ST_TO_ADDR
// end ;
5215: LD_VAR 0 2
5219: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5220: LD_INT 0
5222: PPUSH
5223: PPUSH
5224: PPUSH
5225: PPUSH
// if pos < 1 then
5226: LD_VAR 0 2
5230: PUSH
5231: LD_INT 1
5233: LESS
5234: IFFALSE 5238
// exit ;
5236: GO 5541
// if pos = 1 then
5238: LD_VAR 0 2
5242: PUSH
5243: LD_INT 1
5245: EQUAL
5246: IFFALSE 5279
// result := Replace ( arr , pos [ 1 ] , value ) else
5248: LD_ADDR_VAR 0 4
5252: PUSH
5253: LD_VAR 0 1
5257: PPUSH
5258: LD_VAR 0 2
5262: PUSH
5263: LD_INT 1
5265: ARRAY
5266: PPUSH
5267: LD_VAR 0 3
5271: PPUSH
5272: CALL_OW 1
5276: ST_TO_ADDR
5277: GO 5541
// begin tmp := arr ;
5279: LD_ADDR_VAR 0 6
5283: PUSH
5284: LD_VAR 0 1
5288: ST_TO_ADDR
// s_arr := [ tmp ] ;
5289: LD_ADDR_VAR 0 7
5293: PUSH
5294: LD_VAR 0 6
5298: PUSH
5299: EMPTY
5300: LIST
5301: ST_TO_ADDR
// for i = 1 to pos - 1 do
5302: LD_ADDR_VAR 0 5
5306: PUSH
5307: DOUBLE
5308: LD_INT 1
5310: DEC
5311: ST_TO_ADDR
5312: LD_VAR 0 2
5316: PUSH
5317: LD_INT 1
5319: MINUS
5320: PUSH
5321: FOR_TO
5322: IFFALSE 5367
// begin tmp := tmp [ pos [ i ] ] ;
5324: LD_ADDR_VAR 0 6
5328: PUSH
5329: LD_VAR 0 6
5333: PUSH
5334: LD_VAR 0 2
5338: PUSH
5339: LD_VAR 0 5
5343: ARRAY
5344: ARRAY
5345: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5346: LD_ADDR_VAR 0 7
5350: PUSH
5351: LD_VAR 0 7
5355: PUSH
5356: LD_VAR 0 6
5360: PUSH
5361: EMPTY
5362: LIST
5363: ADD
5364: ST_TO_ADDR
// end ;
5365: GO 5321
5367: POP
5368: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5369: LD_ADDR_VAR 0 6
5373: PUSH
5374: LD_VAR 0 6
5378: PPUSH
5379: LD_VAR 0 2
5383: PUSH
5384: LD_VAR 0 2
5388: ARRAY
5389: PPUSH
5390: LD_VAR 0 3
5394: PPUSH
5395: CALL_OW 1
5399: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5400: LD_ADDR_VAR 0 7
5404: PUSH
5405: LD_VAR 0 7
5409: PPUSH
5410: LD_VAR 0 7
5414: PPUSH
5415: LD_VAR 0 6
5419: PPUSH
5420: CALL_OW 1
5424: ST_TO_ADDR
// for i = s_arr downto 2 do
5425: LD_ADDR_VAR 0 5
5429: PUSH
5430: DOUBLE
5431: LD_VAR 0 7
5435: INC
5436: ST_TO_ADDR
5437: LD_INT 2
5439: PUSH
5440: FOR_DOWNTO
5441: IFFALSE 5525
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5443: LD_ADDR_VAR 0 6
5447: PUSH
5448: LD_VAR 0 7
5452: PUSH
5453: LD_VAR 0 5
5457: PUSH
5458: LD_INT 1
5460: MINUS
5461: ARRAY
5462: PPUSH
5463: LD_VAR 0 2
5467: PUSH
5468: LD_VAR 0 5
5472: PUSH
5473: LD_INT 1
5475: MINUS
5476: ARRAY
5477: PPUSH
5478: LD_VAR 0 7
5482: PUSH
5483: LD_VAR 0 5
5487: ARRAY
5488: PPUSH
5489: CALL_OW 1
5493: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5494: LD_ADDR_VAR 0 7
5498: PUSH
5499: LD_VAR 0 7
5503: PPUSH
5504: LD_VAR 0 5
5508: PUSH
5509: LD_INT 1
5511: MINUS
5512: PPUSH
5513: LD_VAR 0 6
5517: PPUSH
5518: CALL_OW 1
5522: ST_TO_ADDR
// end ;
5523: GO 5440
5525: POP
5526: POP
// result := s_arr [ 1 ] ;
5527: LD_ADDR_VAR 0 4
5531: PUSH
5532: LD_VAR 0 7
5536: PUSH
5537: LD_INT 1
5539: ARRAY
5540: ST_TO_ADDR
// end ; end ;
5541: LD_VAR 0 4
5545: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5546: LD_INT 0
5548: PPUSH
5549: PPUSH
// if not list then
5550: LD_VAR 0 1
5554: NOT
5555: IFFALSE 5559
// exit ;
5557: GO 5650
// i := list [ pos1 ] ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_VAR 0 1
5568: PUSH
5569: LD_VAR 0 2
5573: ARRAY
5574: ST_TO_ADDR
// if not i then
5575: LD_VAR 0 5
5579: NOT
5580: IFFALSE 5584
// exit ;
5582: GO 5650
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5584: LD_ADDR_VAR 0 1
5588: PUSH
5589: LD_VAR 0 1
5593: PPUSH
5594: LD_VAR 0 2
5598: PPUSH
5599: LD_VAR 0 1
5603: PUSH
5604: LD_VAR 0 3
5608: ARRAY
5609: PPUSH
5610: CALL_OW 1
5614: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5615: LD_ADDR_VAR 0 1
5619: PUSH
5620: LD_VAR 0 1
5624: PPUSH
5625: LD_VAR 0 3
5629: PPUSH
5630: LD_VAR 0 5
5634: PPUSH
5635: CALL_OW 1
5639: ST_TO_ADDR
// result := list ;
5640: LD_ADDR_VAR 0 4
5644: PUSH
5645: LD_VAR 0 1
5649: ST_TO_ADDR
// end ;
5650: LD_VAR 0 4
5654: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5655: LD_INT 0
5657: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5658: LD_ADDR_VAR 0 5
5662: PUSH
5663: LD_VAR 0 1
5667: PPUSH
5668: CALL_OW 250
5672: PPUSH
5673: LD_VAR 0 1
5677: PPUSH
5678: CALL_OW 251
5682: PPUSH
5683: LD_VAR 0 2
5687: PPUSH
5688: LD_VAR 0 3
5692: PPUSH
5693: LD_VAR 0 4
5697: PPUSH
5698: CALL 5708 0 5
5702: ST_TO_ADDR
// end ;
5703: LD_VAR 0 5
5707: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
5708: LD_INT 0
5710: PPUSH
5711: PPUSH
5712: PPUSH
5713: PPUSH
// if not list then
5714: LD_VAR 0 3
5718: NOT
5719: IFFALSE 5723
// exit ;
5721: GO 6111
// result := [ ] ;
5723: LD_ADDR_VAR 0 6
5727: PUSH
5728: EMPTY
5729: ST_TO_ADDR
// for i in list do
5730: LD_ADDR_VAR 0 7
5734: PUSH
5735: LD_VAR 0 3
5739: PUSH
5740: FOR_IN
5741: IFFALSE 5943
// begin tmp := GetDistUnitXY ( i , x , y ) ;
5743: LD_ADDR_VAR 0 9
5747: PUSH
5748: LD_VAR 0 7
5752: PPUSH
5753: LD_VAR 0 1
5757: PPUSH
5758: LD_VAR 0 2
5762: PPUSH
5763: CALL_OW 297
5767: ST_TO_ADDR
// if not result then
5768: LD_VAR 0 6
5772: NOT
5773: IFFALSE 5799
// result := [ [ i , tmp ] ] else
5775: LD_ADDR_VAR 0 6
5779: PUSH
5780: LD_VAR 0 7
5784: PUSH
5785: LD_VAR 0 9
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PUSH
5794: EMPTY
5795: LIST
5796: ST_TO_ADDR
5797: GO 5941
// begin if result [ result ] [ 2 ] < tmp then
5799: LD_VAR 0 6
5803: PUSH
5804: LD_VAR 0 6
5808: ARRAY
5809: PUSH
5810: LD_INT 2
5812: ARRAY
5813: PUSH
5814: LD_VAR 0 9
5818: LESS
5819: IFFALSE 5861
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
5821: LD_ADDR_VAR 0 6
5825: PUSH
5826: LD_VAR 0 6
5830: PPUSH
5831: LD_VAR 0 6
5835: PUSH
5836: LD_INT 1
5838: PLUS
5839: PPUSH
5840: LD_VAR 0 7
5844: PUSH
5845: LD_VAR 0 9
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PPUSH
5854: CALL_OW 2
5858: ST_TO_ADDR
5859: GO 5941
// for j = 1 to result do
5861: LD_ADDR_VAR 0 8
5865: PUSH
5866: DOUBLE
5867: LD_INT 1
5869: DEC
5870: ST_TO_ADDR
5871: LD_VAR 0 6
5875: PUSH
5876: FOR_TO
5877: IFFALSE 5939
// begin if tmp < result [ j ] [ 2 ] then
5879: LD_VAR 0 9
5883: PUSH
5884: LD_VAR 0 6
5888: PUSH
5889: LD_VAR 0 8
5893: ARRAY
5894: PUSH
5895: LD_INT 2
5897: ARRAY
5898: LESS
5899: IFFALSE 5937
// begin result := Insert ( result , j , [ i , tmp ] ) ;
5901: LD_ADDR_VAR 0 6
5905: PUSH
5906: LD_VAR 0 6
5910: PPUSH
5911: LD_VAR 0 8
5915: PPUSH
5916: LD_VAR 0 7
5920: PUSH
5921: LD_VAR 0 9
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PPUSH
5930: CALL_OW 2
5934: ST_TO_ADDR
// break ;
5935: GO 5939
// end ; end ;
5937: GO 5876
5939: POP
5940: POP
// end ; end ;
5941: GO 5740
5943: POP
5944: POP
// if result and not asc then
5945: LD_VAR 0 6
5949: PUSH
5950: LD_VAR 0 4
5954: NOT
5955: AND
5956: IFFALSE 6031
// begin tmp := result ;
5958: LD_ADDR_VAR 0 9
5962: PUSH
5963: LD_VAR 0 6
5967: ST_TO_ADDR
// for i = tmp downto 1 do
5968: LD_ADDR_VAR 0 7
5972: PUSH
5973: DOUBLE
5974: LD_VAR 0 9
5978: INC
5979: ST_TO_ADDR
5980: LD_INT 1
5982: PUSH
5983: FOR_DOWNTO
5984: IFFALSE 6029
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
5986: LD_ADDR_VAR 0 6
5990: PUSH
5991: LD_VAR 0 6
5995: PPUSH
5996: LD_VAR 0 9
6000: PUSH
6001: LD_VAR 0 7
6005: MINUS
6006: PUSH
6007: LD_INT 1
6009: PLUS
6010: PPUSH
6011: LD_VAR 0 9
6015: PUSH
6016: LD_VAR 0 7
6020: ARRAY
6021: PPUSH
6022: CALL_OW 1
6026: ST_TO_ADDR
6027: GO 5983
6029: POP
6030: POP
// end ; tmp := [ ] ;
6031: LD_ADDR_VAR 0 9
6035: PUSH
6036: EMPTY
6037: ST_TO_ADDR
// if mode then
6038: LD_VAR 0 5
6042: IFFALSE 6111
// begin for i = 1 to result do
6044: LD_ADDR_VAR 0 7
6048: PUSH
6049: DOUBLE
6050: LD_INT 1
6052: DEC
6053: ST_TO_ADDR
6054: LD_VAR 0 6
6058: PUSH
6059: FOR_TO
6060: IFFALSE 6099
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6062: LD_ADDR_VAR 0 9
6066: PUSH
6067: LD_VAR 0 9
6071: PPUSH
6072: LD_VAR 0 7
6076: PPUSH
6077: LD_VAR 0 6
6081: PUSH
6082: LD_VAR 0 7
6086: ARRAY
6087: PUSH
6088: LD_INT 1
6090: ARRAY
6091: PPUSH
6092: CALL_OW 1
6096: ST_TO_ADDR
6097: GO 6059
6099: POP
6100: POP
// result := tmp ;
6101: LD_ADDR_VAR 0 6
6105: PUSH
6106: LD_VAR 0 9
6110: ST_TO_ADDR
// end ; end ;
6111: LD_VAR 0 6
6115: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6116: LD_INT 0
6118: PPUSH
6119: PPUSH
6120: PPUSH
6121: PPUSH
6122: PPUSH
6123: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6124: LD_ADDR_VAR 0 5
6128: PUSH
6129: LD_INT 0
6131: PUSH
6132: LD_INT 0
6134: PUSH
6135: LD_INT 0
6137: PUSH
6138: EMPTY
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: ST_TO_ADDR
// if not x or not y then
6146: LD_VAR 0 2
6150: NOT
6151: PUSH
6152: LD_VAR 0 3
6156: NOT
6157: OR
6158: IFFALSE 6162
// exit ;
6160: GO 7808
// if not range then
6162: LD_VAR 0 4
6166: NOT
6167: IFFALSE 6177
// range := 10 ;
6169: LD_ADDR_VAR 0 4
6173: PUSH
6174: LD_INT 10
6176: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6177: LD_ADDR_VAR 0 8
6181: PUSH
6182: LD_INT 81
6184: PUSH
6185: LD_VAR 0 1
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 92
6196: PUSH
6197: LD_VAR 0 2
6201: PUSH
6202: LD_VAR 0 3
6206: PUSH
6207: LD_VAR 0 4
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 3
6220: PUSH
6221: LD_INT 21
6223: PUSH
6224: LD_INT 3
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: ST_TO_ADDR
// if not tmp then
6245: LD_VAR 0 8
6249: NOT
6250: IFFALSE 6254
// exit ;
6252: GO 7808
// for i in tmp do
6254: LD_ADDR_VAR 0 6
6258: PUSH
6259: LD_VAR 0 8
6263: PUSH
6264: FOR_IN
6265: IFFALSE 7783
// begin points := [ 0 , 0 , 0 ] ;
6267: LD_ADDR_VAR 0 9
6271: PUSH
6272: LD_INT 0
6274: PUSH
6275: LD_INT 0
6277: PUSH
6278: LD_INT 0
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: LIST
6285: ST_TO_ADDR
// bpoints := 1 ;
6286: LD_ADDR_VAR 0 10
6290: PUSH
6291: LD_INT 1
6293: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6294: LD_VAR 0 6
6298: PPUSH
6299: CALL_OW 247
6303: PUSH
6304: LD_INT 1
6306: DOUBLE
6307: EQUAL
6308: IFTRUE 6312
6310: GO 6890
6312: POP
// begin if GetClass ( i ) = 1 then
6313: LD_VAR 0 6
6317: PPUSH
6318: CALL_OW 257
6322: PUSH
6323: LD_INT 1
6325: EQUAL
6326: IFFALSE 6347
// points := [ 10 , 5 , 3 ] ;
6328: LD_ADDR_VAR 0 9
6332: PUSH
6333: LD_INT 10
6335: PUSH
6336: LD_INT 5
6338: PUSH
6339: LD_INT 3
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6347: LD_VAR 0 6
6351: PPUSH
6352: CALL_OW 257
6356: PUSH
6357: LD_INT 2
6359: PUSH
6360: LD_INT 3
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: LIST
6370: IN
6371: IFFALSE 6392
// points := [ 3 , 2 , 1 ] ;
6373: LD_ADDR_VAR 0 9
6377: PUSH
6378: LD_INT 3
6380: PUSH
6381: LD_INT 2
6383: PUSH
6384: LD_INT 1
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: LIST
6391: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6392: LD_VAR 0 6
6396: PPUSH
6397: CALL_OW 257
6401: PUSH
6402: LD_INT 5
6404: EQUAL
6405: IFFALSE 6426
// points := [ 130 , 5 , 2 ] ;
6407: LD_ADDR_VAR 0 9
6411: PUSH
6412: LD_INT 130
6414: PUSH
6415: LD_INT 5
6417: PUSH
6418: LD_INT 2
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: LIST
6425: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6426: LD_VAR 0 6
6430: PPUSH
6431: CALL_OW 257
6435: PUSH
6436: LD_INT 8
6438: EQUAL
6439: IFFALSE 6460
// points := [ 35 , 35 , 30 ] ;
6441: LD_ADDR_VAR 0 9
6445: PUSH
6446: LD_INT 35
6448: PUSH
6449: LD_INT 35
6451: PUSH
6452: LD_INT 30
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6460: LD_VAR 0 6
6464: PPUSH
6465: CALL_OW 257
6469: PUSH
6470: LD_INT 9
6472: EQUAL
6473: IFFALSE 6494
// points := [ 20 , 55 , 40 ] ;
6475: LD_ADDR_VAR 0 9
6479: PUSH
6480: LD_INT 20
6482: PUSH
6483: LD_INT 55
6485: PUSH
6486: LD_INT 40
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: LIST
6493: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6494: LD_VAR 0 6
6498: PPUSH
6499: CALL_OW 257
6503: PUSH
6504: LD_INT 12
6506: PUSH
6507: LD_INT 16
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: IN
6514: IFFALSE 6535
// points := [ 5 , 3 , 2 ] ;
6516: LD_ADDR_VAR 0 9
6520: PUSH
6521: LD_INT 5
6523: PUSH
6524: LD_INT 3
6526: PUSH
6527: LD_INT 2
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: LIST
6534: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6535: LD_VAR 0 6
6539: PPUSH
6540: CALL_OW 257
6544: PUSH
6545: LD_INT 17
6547: EQUAL
6548: IFFALSE 6569
// points := [ 100 , 50 , 75 ] ;
6550: LD_ADDR_VAR 0 9
6554: PUSH
6555: LD_INT 100
6557: PUSH
6558: LD_INT 50
6560: PUSH
6561: LD_INT 75
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: LIST
6568: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6569: LD_VAR 0 6
6573: PPUSH
6574: CALL_OW 257
6578: PUSH
6579: LD_INT 15
6581: EQUAL
6582: IFFALSE 6603
// points := [ 10 , 5 , 3 ] ;
6584: LD_ADDR_VAR 0 9
6588: PUSH
6589: LD_INT 10
6591: PUSH
6592: LD_INT 5
6594: PUSH
6595: LD_INT 3
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: LIST
6602: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6603: LD_VAR 0 6
6607: PPUSH
6608: CALL_OW 257
6612: PUSH
6613: LD_INT 14
6615: EQUAL
6616: IFFALSE 6637
// points := [ 10 , 0 , 0 ] ;
6618: LD_ADDR_VAR 0 9
6622: PUSH
6623: LD_INT 10
6625: PUSH
6626: LD_INT 0
6628: PUSH
6629: LD_INT 0
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6637: LD_VAR 0 6
6641: PPUSH
6642: CALL_OW 257
6646: PUSH
6647: LD_INT 11
6649: EQUAL
6650: IFFALSE 6671
// points := [ 30 , 10 , 5 ] ;
6652: LD_ADDR_VAR 0 9
6656: PUSH
6657: LD_INT 30
6659: PUSH
6660: LD_INT 10
6662: PUSH
6663: LD_INT 5
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6671: LD_VAR 0 1
6675: PPUSH
6676: LD_INT 5
6678: PPUSH
6679: CALL_OW 321
6683: PUSH
6684: LD_INT 2
6686: EQUAL
6687: IFFALSE 6704
// bpoints := bpoints * 1.8 ;
6689: LD_ADDR_VAR 0 10
6693: PUSH
6694: LD_VAR 0 10
6698: PUSH
6699: LD_REAL  1.80000000000000E+0000
6702: MUL
6703: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
6704: LD_VAR 0 6
6708: PPUSH
6709: CALL_OW 257
6713: PUSH
6714: LD_INT 1
6716: PUSH
6717: LD_INT 2
6719: PUSH
6720: LD_INT 3
6722: PUSH
6723: LD_INT 4
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: IN
6732: PUSH
6733: LD_VAR 0 1
6737: PPUSH
6738: LD_INT 51
6740: PPUSH
6741: CALL_OW 321
6745: PUSH
6746: LD_INT 2
6748: EQUAL
6749: AND
6750: IFFALSE 6767
// bpoints := bpoints * 1.2 ;
6752: LD_ADDR_VAR 0 10
6756: PUSH
6757: LD_VAR 0 10
6761: PUSH
6762: LD_REAL  1.20000000000000E+0000
6765: MUL
6766: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
6767: LD_VAR 0 6
6771: PPUSH
6772: CALL_OW 257
6776: PUSH
6777: LD_INT 5
6779: PUSH
6780: LD_INT 7
6782: PUSH
6783: LD_INT 9
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: IN
6791: PUSH
6792: LD_VAR 0 1
6796: PPUSH
6797: LD_INT 52
6799: PPUSH
6800: CALL_OW 321
6804: PUSH
6805: LD_INT 2
6807: EQUAL
6808: AND
6809: IFFALSE 6826
// bpoints := bpoints * 1.5 ;
6811: LD_ADDR_VAR 0 10
6815: PUSH
6816: LD_VAR 0 10
6820: PUSH
6821: LD_REAL  1.50000000000000E+0000
6824: MUL
6825: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
6826: LD_VAR 0 1
6830: PPUSH
6831: LD_INT 66
6833: PPUSH
6834: CALL_OW 321
6838: PUSH
6839: LD_INT 2
6841: EQUAL
6842: IFFALSE 6859
// bpoints := bpoints * 1.1 ;
6844: LD_ADDR_VAR 0 10
6848: PUSH
6849: LD_VAR 0 10
6853: PUSH
6854: LD_REAL  1.10000000000000E+0000
6857: MUL
6858: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
6859: LD_ADDR_VAR 0 10
6863: PUSH
6864: LD_VAR 0 10
6868: PUSH
6869: LD_VAR 0 6
6873: PPUSH
6874: LD_INT 1
6876: PPUSH
6877: CALL_OW 259
6881: PUSH
6882: LD_REAL  1.15000000000000E+0000
6885: MUL
6886: MUL
6887: ST_TO_ADDR
// end ; unit_vehicle :
6888: GO 7712
6890: LD_INT 2
6892: DOUBLE
6893: EQUAL
6894: IFTRUE 6898
6896: GO 7700
6898: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
6899: LD_VAR 0 6
6903: PPUSH
6904: CALL_OW 264
6908: PUSH
6909: LD_INT 2
6911: PUSH
6912: LD_INT 42
6914: PUSH
6915: LD_INT 24
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: LIST
6922: IN
6923: IFFALSE 6944
// points := [ 25 , 5 , 3 ] ;
6925: LD_ADDR_VAR 0 9
6929: PUSH
6930: LD_INT 25
6932: PUSH
6933: LD_INT 5
6935: PUSH
6936: LD_INT 3
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: LIST
6943: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
6944: LD_VAR 0 6
6948: PPUSH
6949: CALL_OW 264
6953: PUSH
6954: LD_INT 4
6956: PUSH
6957: LD_INT 43
6959: PUSH
6960: LD_INT 25
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: LIST
6967: IN
6968: IFFALSE 6989
// points := [ 40 , 15 , 5 ] ;
6970: LD_ADDR_VAR 0 9
6974: PUSH
6975: LD_INT 40
6977: PUSH
6978: LD_INT 15
6980: PUSH
6981: LD_INT 5
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: LIST
6988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
6989: LD_VAR 0 6
6993: PPUSH
6994: CALL_OW 264
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: LD_INT 23
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: IN
7009: IFFALSE 7030
// points := [ 7 , 25 , 8 ] ;
7011: LD_ADDR_VAR 0 9
7015: PUSH
7016: LD_INT 7
7018: PUSH
7019: LD_INT 25
7021: PUSH
7022: LD_INT 8
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7030: LD_VAR 0 6
7034: PPUSH
7035: CALL_OW 264
7039: PUSH
7040: LD_INT 5
7042: PUSH
7043: LD_INT 27
7045: PUSH
7046: LD_INT 44
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: IN
7054: IFFALSE 7075
// points := [ 14 , 50 , 16 ] ;
7056: LD_ADDR_VAR 0 9
7060: PUSH
7061: LD_INT 14
7063: PUSH
7064: LD_INT 50
7066: PUSH
7067: LD_INT 16
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: LIST
7074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7075: LD_VAR 0 6
7079: PPUSH
7080: CALL_OW 264
7084: PUSH
7085: LD_INT 6
7087: PUSH
7088: LD_INT 46
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: IN
7095: IFFALSE 7116
// points := [ 32 , 120 , 70 ] ;
7097: LD_ADDR_VAR 0 9
7101: PUSH
7102: LD_INT 32
7104: PUSH
7105: LD_INT 120
7107: PUSH
7108: LD_INT 70
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: LIST
7115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
7116: LD_VAR 0 6
7120: PPUSH
7121: CALL_OW 264
7125: PUSH
7126: LD_INT 7
7128: PUSH
7129: LD_INT 28
7131: PUSH
7132: LD_INT 45
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: LIST
7139: IN
7140: IFFALSE 7161
// points := [ 35 , 20 , 45 ] ;
7142: LD_ADDR_VAR 0 9
7146: PUSH
7147: LD_INT 35
7149: PUSH
7150: LD_INT 20
7152: PUSH
7153: LD_INT 45
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: LIST
7160: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7161: LD_VAR 0 6
7165: PPUSH
7166: CALL_OW 264
7170: PUSH
7171: LD_INT 47
7173: PUSH
7174: EMPTY
7175: LIST
7176: IN
7177: IFFALSE 7198
// points := [ 67 , 45 , 75 ] ;
7179: LD_ADDR_VAR 0 9
7183: PUSH
7184: LD_INT 67
7186: PUSH
7187: LD_INT 45
7189: PUSH
7190: LD_INT 75
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7198: LD_VAR 0 6
7202: PPUSH
7203: CALL_OW 264
7207: PUSH
7208: LD_INT 26
7210: PUSH
7211: EMPTY
7212: LIST
7213: IN
7214: IFFALSE 7235
// points := [ 120 , 30 , 80 ] ;
7216: LD_ADDR_VAR 0 9
7220: PUSH
7221: LD_INT 120
7223: PUSH
7224: LD_INT 30
7226: PUSH
7227: LD_INT 80
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: LIST
7234: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7235: LD_VAR 0 6
7239: PPUSH
7240: CALL_OW 264
7244: PUSH
7245: LD_INT 22
7247: PUSH
7248: EMPTY
7249: LIST
7250: IN
7251: IFFALSE 7272
// points := [ 40 , 1 , 1 ] ;
7253: LD_ADDR_VAR 0 9
7257: PUSH
7258: LD_INT 40
7260: PUSH
7261: LD_INT 1
7263: PUSH
7264: LD_INT 1
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: LIST
7271: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7272: LD_VAR 0 6
7276: PPUSH
7277: CALL_OW 264
7281: PUSH
7282: LD_INT 29
7284: PUSH
7285: EMPTY
7286: LIST
7287: IN
7288: IFFALSE 7309
// points := [ 70 , 200 , 400 ] ;
7290: LD_ADDR_VAR 0 9
7294: PUSH
7295: LD_INT 70
7297: PUSH
7298: LD_INT 200
7300: PUSH
7301: LD_INT 400
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7309: LD_VAR 0 6
7313: PPUSH
7314: CALL_OW 264
7318: PUSH
7319: LD_INT 14
7321: PUSH
7322: LD_INT 53
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: IN
7329: IFFALSE 7350
// points := [ 40 , 10 , 20 ] ;
7331: LD_ADDR_VAR 0 9
7335: PUSH
7336: LD_INT 40
7338: PUSH
7339: LD_INT 10
7341: PUSH
7342: LD_INT 20
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: LIST
7349: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7350: LD_VAR 0 6
7354: PPUSH
7355: CALL_OW 264
7359: PUSH
7360: LD_INT 9
7362: PUSH
7363: EMPTY
7364: LIST
7365: IN
7366: IFFALSE 7387
// points := [ 5 , 70 , 20 ] ;
7368: LD_ADDR_VAR 0 9
7372: PUSH
7373: LD_INT 5
7375: PUSH
7376: LD_INT 70
7378: PUSH
7379: LD_INT 20
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: LIST
7386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7387: LD_VAR 0 6
7391: PPUSH
7392: CALL_OW 264
7396: PUSH
7397: LD_INT 10
7399: PUSH
7400: EMPTY
7401: LIST
7402: IN
7403: IFFALSE 7424
// points := [ 35 , 110 , 70 ] ;
7405: LD_ADDR_VAR 0 9
7409: PUSH
7410: LD_INT 35
7412: PUSH
7413: LD_INT 110
7415: PUSH
7416: LD_INT 70
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: LIST
7423: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7424: LD_VAR 0 6
7428: PPUSH
7429: CALL_OW 265
7433: PUSH
7434: LD_INT 25
7436: EQUAL
7437: IFFALSE 7458
// points := [ 80 , 65 , 100 ] ;
7439: LD_ADDR_VAR 0 9
7443: PUSH
7444: LD_INT 80
7446: PUSH
7447: LD_INT 65
7449: PUSH
7450: LD_INT 100
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: LIST
7457: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7458: LD_VAR 0 6
7462: PPUSH
7463: CALL_OW 263
7467: PUSH
7468: LD_INT 1
7470: EQUAL
7471: IFFALSE 7506
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7473: LD_ADDR_VAR 0 10
7477: PUSH
7478: LD_VAR 0 10
7482: PUSH
7483: LD_VAR 0 6
7487: PPUSH
7488: CALL_OW 311
7492: PPUSH
7493: LD_INT 3
7495: PPUSH
7496: CALL_OW 259
7500: PUSH
7501: LD_INT 4
7503: MUL
7504: MUL
7505: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7506: LD_VAR 0 6
7510: PPUSH
7511: CALL_OW 263
7515: PUSH
7516: LD_INT 2
7518: EQUAL
7519: IFFALSE 7570
// begin j := IsControledBy ( i ) ;
7521: LD_ADDR_VAR 0 7
7525: PUSH
7526: LD_VAR 0 6
7530: PPUSH
7531: CALL_OW 312
7535: ST_TO_ADDR
// if j then
7536: LD_VAR 0 7
7540: IFFALSE 7570
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7542: LD_ADDR_VAR 0 10
7546: PUSH
7547: LD_VAR 0 10
7551: PUSH
7552: LD_VAR 0 7
7556: PPUSH
7557: LD_INT 3
7559: PPUSH
7560: CALL_OW 259
7564: PUSH
7565: LD_INT 3
7567: MUL
7568: MUL
7569: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7570: LD_VAR 0 6
7574: PPUSH
7575: CALL_OW 264
7579: PUSH
7580: LD_INT 5
7582: PUSH
7583: LD_INT 6
7585: PUSH
7586: LD_INT 46
7588: PUSH
7589: LD_INT 44
7591: PUSH
7592: LD_INT 47
7594: PUSH
7595: LD_INT 45
7597: PUSH
7598: LD_INT 28
7600: PUSH
7601: LD_INT 7
7603: PUSH
7604: LD_INT 27
7606: PUSH
7607: LD_INT 29
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: IN
7622: PUSH
7623: LD_VAR 0 1
7627: PPUSH
7628: LD_INT 52
7630: PPUSH
7631: CALL_OW 321
7635: PUSH
7636: LD_INT 2
7638: EQUAL
7639: AND
7640: IFFALSE 7657
// bpoints := bpoints * 1.2 ;
7642: LD_ADDR_VAR 0 10
7646: PUSH
7647: LD_VAR 0 10
7651: PUSH
7652: LD_REAL  1.20000000000000E+0000
7655: MUL
7656: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7657: LD_VAR 0 6
7661: PPUSH
7662: CALL_OW 264
7666: PUSH
7667: LD_INT 6
7669: PUSH
7670: LD_INT 46
7672: PUSH
7673: LD_INT 47
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: LIST
7680: IN
7681: IFFALSE 7698
// bpoints := bpoints * 1.2 ;
7683: LD_ADDR_VAR 0 10
7687: PUSH
7688: LD_VAR 0 10
7692: PUSH
7693: LD_REAL  1.20000000000000E+0000
7696: MUL
7697: ST_TO_ADDR
// end ; unit_building :
7698: GO 7712
7700: LD_INT 3
7702: DOUBLE
7703: EQUAL
7704: IFTRUE 7708
7706: GO 7711
7708: POP
// ; end ;
7709: GO 7712
7711: POP
// for j = 1 to 3 do
7712: LD_ADDR_VAR 0 7
7716: PUSH
7717: DOUBLE
7718: LD_INT 1
7720: DEC
7721: ST_TO_ADDR
7722: LD_INT 3
7724: PUSH
7725: FOR_TO
7726: IFFALSE 7779
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
7728: LD_ADDR_VAR 0 5
7732: PUSH
7733: LD_VAR 0 5
7737: PPUSH
7738: LD_VAR 0 7
7742: PPUSH
7743: LD_VAR 0 5
7747: PUSH
7748: LD_VAR 0 7
7752: ARRAY
7753: PUSH
7754: LD_VAR 0 9
7758: PUSH
7759: LD_VAR 0 7
7763: ARRAY
7764: PUSH
7765: LD_VAR 0 10
7769: MUL
7770: PLUS
7771: PPUSH
7772: CALL_OW 1
7776: ST_TO_ADDR
7777: GO 7725
7779: POP
7780: POP
// end ;
7781: GO 6264
7783: POP
7784: POP
// result := Replace ( result , 4 , tmp ) ;
7785: LD_ADDR_VAR 0 5
7789: PUSH
7790: LD_VAR 0 5
7794: PPUSH
7795: LD_INT 4
7797: PPUSH
7798: LD_VAR 0 8
7802: PPUSH
7803: CALL_OW 1
7807: ST_TO_ADDR
// end ;
7808: LD_VAR 0 5
7812: RET
// export function DangerAtRange ( unit , range ) ; begin
7813: LD_INT 0
7815: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
7816: LD_ADDR_VAR 0 3
7820: PUSH
7821: LD_VAR 0 1
7825: PPUSH
7826: CALL_OW 255
7830: PPUSH
7831: LD_VAR 0 1
7835: PPUSH
7836: CALL_OW 250
7840: PPUSH
7841: LD_VAR 0 1
7845: PPUSH
7846: CALL_OW 251
7850: PPUSH
7851: LD_VAR 0 2
7855: PPUSH
7856: CALL 6116 0 4
7860: ST_TO_ADDR
// end ;
7861: LD_VAR 0 3
7865: RET
// export function DangerInArea ( side , area ) ; begin
7866: LD_INT 0
7868: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7869: LD_ADDR_VAR 0 3
7873: PUSH
7874: LD_VAR 0 2
7878: PPUSH
7879: LD_INT 81
7881: PUSH
7882: LD_VAR 0 1
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PPUSH
7891: CALL_OW 70
7895: ST_TO_ADDR
// end ;
7896: LD_VAR 0 3
7900: RET
// export function IsExtension ( b ) ; begin
7901: LD_INT 0
7903: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
7904: LD_ADDR_VAR 0 2
7908: PUSH
7909: LD_VAR 0 1
7913: PUSH
7914: LD_INT 23
7916: PUSH
7917: LD_INT 20
7919: PUSH
7920: LD_INT 22
7922: PUSH
7923: LD_INT 17
7925: PUSH
7926: LD_INT 24
7928: PUSH
7929: LD_INT 21
7931: PUSH
7932: LD_INT 19
7934: PUSH
7935: LD_INT 16
7937: PUSH
7938: LD_INT 25
7940: PUSH
7941: LD_INT 18
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: IN
7956: ST_TO_ADDR
// end ;
7957: LD_VAR 0 2
7961: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
7966: PPUSH
// result := [ ] ;
7967: LD_ADDR_VAR 0 4
7971: PUSH
7972: EMPTY
7973: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
7974: LD_ADDR_VAR 0 5
7978: PUSH
7979: LD_VAR 0 2
7983: PPUSH
7984: LD_INT 21
7986: PUSH
7987: LD_INT 3
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PPUSH
7994: CALL_OW 70
7998: ST_TO_ADDR
// if not tmp then
7999: LD_VAR 0 5
8003: NOT
8004: IFFALSE 8008
// exit ;
8006: GO 8072
// if checkLink then
8008: LD_VAR 0 3
8012: IFFALSE 8062
// begin for i in tmp do
8014: LD_ADDR_VAR 0 6
8018: PUSH
8019: LD_VAR 0 5
8023: PUSH
8024: FOR_IN
8025: IFFALSE 8060
// if GetBase ( i ) <> base then
8027: LD_VAR 0 6
8031: PPUSH
8032: CALL_OW 274
8036: PUSH
8037: LD_VAR 0 1
8041: NONEQUAL
8042: IFFALSE 8058
// ComLinkToBase ( base , i ) ;
8044: LD_VAR 0 1
8048: PPUSH
8049: LD_VAR 0 6
8053: PPUSH
8054: CALL_OW 169
8058: GO 8024
8060: POP
8061: POP
// end ; result := tmp ;
8062: LD_ADDR_VAR 0 4
8066: PUSH
8067: LD_VAR 0 5
8071: ST_TO_ADDR
// end ;
8072: LD_VAR 0 4
8076: RET
// export function ComComplete ( units , b ) ; var i ; begin
8077: LD_INT 0
8079: PPUSH
8080: PPUSH
// if not units then
8081: LD_VAR 0 1
8085: NOT
8086: IFFALSE 8090
// exit ;
8088: GO 8180
// for i in units do
8090: LD_ADDR_VAR 0 4
8094: PUSH
8095: LD_VAR 0 1
8099: PUSH
8100: FOR_IN
8101: IFFALSE 8178
// if BuildingStatus ( b ) = bs_build then
8103: LD_VAR 0 2
8107: PPUSH
8108: CALL_OW 461
8112: PUSH
8113: LD_INT 1
8115: EQUAL
8116: IFFALSE 8176
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8118: LD_VAR 0 4
8122: PPUSH
8123: LD_STRING h
8125: PUSH
8126: LD_VAR 0 2
8130: PPUSH
8131: CALL_OW 250
8135: PUSH
8136: LD_VAR 0 2
8140: PPUSH
8141: CALL_OW 251
8145: PUSH
8146: LD_VAR 0 2
8150: PUSH
8151: LD_INT 0
8153: PUSH
8154: LD_INT 0
8156: PUSH
8157: LD_INT 0
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: PUSH
8169: EMPTY
8170: LIST
8171: PPUSH
8172: CALL_OW 446
8176: GO 8100
8178: POP
8179: POP
// end ;
8180: LD_VAR 0 3
8184: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8185: LD_INT 0
8187: PPUSH
8188: PPUSH
8189: PPUSH
8190: PPUSH
8191: PPUSH
8192: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
8193: LD_VAR 0 1
8197: NOT
8198: PUSH
8199: LD_VAR 0 1
8203: PPUSH
8204: CALL_OW 263
8208: PUSH
8209: LD_INT 2
8211: EQUAL
8212: NOT
8213: OR
8214: IFFALSE 8218
// exit ;
8216: GO 8534
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8218: LD_ADDR_VAR 0 6
8222: PUSH
8223: LD_INT 22
8225: PUSH
8226: LD_VAR 0 1
8230: PPUSH
8231: CALL_OW 255
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PUSH
8240: LD_INT 2
8242: PUSH
8243: LD_INT 30
8245: PUSH
8246: LD_INT 36
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: PUSH
8253: LD_INT 34
8255: PUSH
8256: LD_INT 31
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: LIST
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PPUSH
8272: CALL_OW 69
8276: ST_TO_ADDR
// if not tmp then
8277: LD_VAR 0 6
8281: NOT
8282: IFFALSE 8286
// exit ;
8284: GO 8534
// result := [ ] ;
8286: LD_ADDR_VAR 0 2
8290: PUSH
8291: EMPTY
8292: ST_TO_ADDR
// for i in tmp do
8293: LD_ADDR_VAR 0 3
8297: PUSH
8298: LD_VAR 0 6
8302: PUSH
8303: FOR_IN
8304: IFFALSE 8375
// begin t := UnitsInside ( i ) ;
8306: LD_ADDR_VAR 0 4
8310: PUSH
8311: LD_VAR 0 3
8315: PPUSH
8316: CALL_OW 313
8320: ST_TO_ADDR
// if t then
8321: LD_VAR 0 4
8325: IFFALSE 8373
// for j in t do
8327: LD_ADDR_VAR 0 7
8331: PUSH
8332: LD_VAR 0 4
8336: PUSH
8337: FOR_IN
8338: IFFALSE 8371
// result := Insert ( result , result + 1 , j ) ;
8340: LD_ADDR_VAR 0 2
8344: PUSH
8345: LD_VAR 0 2
8349: PPUSH
8350: LD_VAR 0 2
8354: PUSH
8355: LD_INT 1
8357: PLUS
8358: PPUSH
8359: LD_VAR 0 7
8363: PPUSH
8364: CALL_OW 2
8368: ST_TO_ADDR
8369: GO 8337
8371: POP
8372: POP
// end ;
8373: GO 8303
8375: POP
8376: POP
// if not result then
8377: LD_VAR 0 2
8381: NOT
8382: IFFALSE 8386
// exit ;
8384: GO 8534
// mech := result [ 1 ] ;
8386: LD_ADDR_VAR 0 5
8390: PUSH
8391: LD_VAR 0 2
8395: PUSH
8396: LD_INT 1
8398: ARRAY
8399: ST_TO_ADDR
// if result > 1 then
8400: LD_VAR 0 2
8404: PUSH
8405: LD_INT 1
8407: GREATER
8408: IFFALSE 8520
// for i = 2 to result do
8410: LD_ADDR_VAR 0 3
8414: PUSH
8415: DOUBLE
8416: LD_INT 2
8418: DEC
8419: ST_TO_ADDR
8420: LD_VAR 0 2
8424: PUSH
8425: FOR_TO
8426: IFFALSE 8518
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8428: LD_ADDR_VAR 0 4
8432: PUSH
8433: LD_VAR 0 2
8437: PUSH
8438: LD_VAR 0 3
8442: ARRAY
8443: PPUSH
8444: LD_INT 3
8446: PPUSH
8447: CALL_OW 259
8451: PUSH
8452: LD_VAR 0 2
8456: PUSH
8457: LD_VAR 0 3
8461: ARRAY
8462: PPUSH
8463: CALL_OW 432
8467: MINUS
8468: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8469: LD_VAR 0 4
8473: PUSH
8474: LD_VAR 0 5
8478: PPUSH
8479: LD_INT 3
8481: PPUSH
8482: CALL_OW 259
8486: PUSH
8487: LD_VAR 0 5
8491: PPUSH
8492: CALL_OW 432
8496: MINUS
8497: GREATEREQUAL
8498: IFFALSE 8516
// mech := result [ i ] ;
8500: LD_ADDR_VAR 0 5
8504: PUSH
8505: LD_VAR 0 2
8509: PUSH
8510: LD_VAR 0 3
8514: ARRAY
8515: ST_TO_ADDR
// end ;
8516: GO 8425
8518: POP
8519: POP
// ComLinkTo ( vehicle , mech ) ;
8520: LD_VAR 0 1
8524: PPUSH
8525: LD_VAR 0 5
8529: PPUSH
8530: CALL_OW 135
// end ;
8534: LD_VAR 0 2
8538: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8539: LD_INT 0
8541: PPUSH
8542: PPUSH
8543: PPUSH
8544: PPUSH
8545: PPUSH
8546: PPUSH
8547: PPUSH
8548: PPUSH
8549: PPUSH
8550: PPUSH
8551: PPUSH
8552: PPUSH
8553: PPUSH
// result := [ ] ;
8554: LD_ADDR_VAR 0 7
8558: PUSH
8559: EMPTY
8560: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8561: LD_VAR 0 1
8565: PPUSH
8566: CALL_OW 266
8570: PUSH
8571: LD_INT 0
8573: PUSH
8574: LD_INT 1
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: IN
8581: NOT
8582: IFFALSE 8586
// exit ;
8584: GO 10220
// if name then
8586: LD_VAR 0 3
8590: IFFALSE 8606
// SetBName ( base_dep , name ) ;
8592: LD_VAR 0 1
8596: PPUSH
8597: LD_VAR 0 3
8601: PPUSH
8602: CALL_OW 500
// base := GetBase ( base_dep ) ;
8606: LD_ADDR_VAR 0 15
8610: PUSH
8611: LD_VAR 0 1
8615: PPUSH
8616: CALL_OW 274
8620: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8621: LD_ADDR_VAR 0 16
8625: PUSH
8626: LD_VAR 0 1
8630: PPUSH
8631: CALL_OW 255
8635: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8636: LD_ADDR_VAR 0 17
8640: PUSH
8641: LD_VAR 0 1
8645: PPUSH
8646: CALL_OW 248
8650: ST_TO_ADDR
// if sources then
8651: LD_VAR 0 5
8655: IFFALSE 8702
// for i = 1 to 3 do
8657: LD_ADDR_VAR 0 8
8661: PUSH
8662: DOUBLE
8663: LD_INT 1
8665: DEC
8666: ST_TO_ADDR
8667: LD_INT 3
8669: PUSH
8670: FOR_TO
8671: IFFALSE 8700
// AddResourceType ( base , i , sources [ i ] ) ;
8673: LD_VAR 0 15
8677: PPUSH
8678: LD_VAR 0 8
8682: PPUSH
8683: LD_VAR 0 5
8687: PUSH
8688: LD_VAR 0 8
8692: ARRAY
8693: PPUSH
8694: CALL_OW 276
8698: GO 8670
8700: POP
8701: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
8702: LD_ADDR_VAR 0 18
8706: PUSH
8707: LD_VAR 0 15
8711: PPUSH
8712: LD_VAR 0 2
8716: PPUSH
8717: LD_INT 1
8719: PPUSH
8720: CALL 7962 0 3
8724: ST_TO_ADDR
// InitHc ;
8725: CALL_OW 19
// InitUc ;
8729: CALL_OW 18
// uc_side := side ;
8733: LD_ADDR_OWVAR 20
8737: PUSH
8738: LD_VAR 0 16
8742: ST_TO_ADDR
// uc_nation := nation ;
8743: LD_ADDR_OWVAR 21
8747: PUSH
8748: LD_VAR 0 17
8752: ST_TO_ADDR
// if buildings then
8753: LD_VAR 0 18
8757: IFFALSE 10079
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
8759: LD_ADDR_VAR 0 19
8763: PUSH
8764: LD_VAR 0 18
8768: PPUSH
8769: LD_INT 2
8771: PUSH
8772: LD_INT 30
8774: PUSH
8775: LD_INT 29
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 30
8784: PUSH
8785: LD_INT 30
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: LIST
8796: PPUSH
8797: CALL_OW 72
8801: ST_TO_ADDR
// if tmp then
8802: LD_VAR 0 19
8806: IFFALSE 8854
// for i in tmp do
8808: LD_ADDR_VAR 0 8
8812: PUSH
8813: LD_VAR 0 19
8817: PUSH
8818: FOR_IN
8819: IFFALSE 8852
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
8821: LD_VAR 0 8
8825: PPUSH
8826: CALL_OW 250
8830: PPUSH
8831: LD_VAR 0 8
8835: PPUSH
8836: CALL_OW 251
8840: PPUSH
8841: LD_VAR 0 16
8845: PPUSH
8846: CALL_OW 441
8850: GO 8818
8852: POP
8853: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
8854: LD_VAR 0 18
8858: PPUSH
8859: LD_INT 2
8861: PUSH
8862: LD_INT 30
8864: PUSH
8865: LD_INT 32
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 30
8874: PUSH
8875: LD_INT 33
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: LIST
8886: PPUSH
8887: CALL_OW 72
8891: IFFALSE 8979
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
8893: LD_ADDR_VAR 0 8
8897: PUSH
8898: LD_VAR 0 18
8902: PPUSH
8903: LD_INT 2
8905: PUSH
8906: LD_INT 30
8908: PUSH
8909: LD_INT 32
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: LD_INT 30
8918: PUSH
8919: LD_INT 33
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: LIST
8930: PPUSH
8931: CALL_OW 72
8935: PUSH
8936: FOR_IN
8937: IFFALSE 8977
// begin if not GetBWeapon ( i ) then
8939: LD_VAR 0 8
8943: PPUSH
8944: CALL_OW 269
8948: NOT
8949: IFFALSE 8975
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
8951: LD_VAR 0 8
8955: PPUSH
8956: LD_VAR 0 8
8960: PPUSH
8961: LD_VAR 0 2
8965: PPUSH
8966: CALL 10225 0 2
8970: PPUSH
8971: CALL_OW 431
// end ;
8975: GO 8936
8977: POP
8978: POP
// end ; for i = 1 to personel do
8979: LD_ADDR_VAR 0 8
8983: PUSH
8984: DOUBLE
8985: LD_INT 1
8987: DEC
8988: ST_TO_ADDR
8989: LD_VAR 0 6
8993: PUSH
8994: FOR_TO
8995: IFFALSE 10059
// begin if i > 4 then
8997: LD_VAR 0 8
9001: PUSH
9002: LD_INT 4
9004: GREATER
9005: IFFALSE 9009
// break ;
9007: GO 10059
// case i of 1 :
9009: LD_VAR 0 8
9013: PUSH
9014: LD_INT 1
9016: DOUBLE
9017: EQUAL
9018: IFTRUE 9022
9020: GO 9102
9022: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9023: LD_ADDR_VAR 0 12
9027: PUSH
9028: LD_VAR 0 18
9032: PPUSH
9033: LD_INT 22
9035: PUSH
9036: LD_VAR 0 16
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PUSH
9045: LD_INT 58
9047: PUSH
9048: EMPTY
9049: LIST
9050: PUSH
9051: LD_INT 2
9053: PUSH
9054: LD_INT 30
9056: PUSH
9057: LD_INT 32
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PUSH
9064: LD_INT 30
9066: PUSH
9067: LD_INT 4
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PUSH
9074: LD_INT 30
9076: PUSH
9077: LD_INT 5
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: LIST
9094: PPUSH
9095: CALL_OW 72
9099: ST_TO_ADDR
9100: GO 9324
9102: LD_INT 2
9104: DOUBLE
9105: EQUAL
9106: IFTRUE 9110
9108: GO 9172
9110: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9111: LD_ADDR_VAR 0 12
9115: PUSH
9116: LD_VAR 0 18
9120: PPUSH
9121: LD_INT 22
9123: PUSH
9124: LD_VAR 0 16
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 2
9135: PUSH
9136: LD_INT 30
9138: PUSH
9139: LD_INT 0
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PUSH
9146: LD_INT 30
9148: PUSH
9149: LD_INT 1
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 72
9169: ST_TO_ADDR
9170: GO 9324
9172: LD_INT 3
9174: DOUBLE
9175: EQUAL
9176: IFTRUE 9180
9178: GO 9242
9180: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9181: LD_ADDR_VAR 0 12
9185: PUSH
9186: LD_VAR 0 18
9190: PPUSH
9191: LD_INT 22
9193: PUSH
9194: LD_VAR 0 16
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PUSH
9203: LD_INT 2
9205: PUSH
9206: LD_INT 30
9208: PUSH
9209: LD_INT 2
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 30
9218: PUSH
9219: LD_INT 3
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PPUSH
9235: CALL_OW 72
9239: ST_TO_ADDR
9240: GO 9324
9242: LD_INT 4
9244: DOUBLE
9245: EQUAL
9246: IFTRUE 9250
9248: GO 9323
9250: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9251: LD_ADDR_VAR 0 12
9255: PUSH
9256: LD_VAR 0 18
9260: PPUSH
9261: LD_INT 22
9263: PUSH
9264: LD_VAR 0 16
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: PUSH
9273: LD_INT 2
9275: PUSH
9276: LD_INT 30
9278: PUSH
9279: LD_INT 6
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: PUSH
9286: LD_INT 30
9288: PUSH
9289: LD_INT 7
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 30
9298: PUSH
9299: LD_INT 8
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: PPUSH
9316: CALL_OW 72
9320: ST_TO_ADDR
9321: GO 9324
9323: POP
// if i = 1 then
9324: LD_VAR 0 8
9328: PUSH
9329: LD_INT 1
9331: EQUAL
9332: IFFALSE 9443
// begin tmp := [ ] ;
9334: LD_ADDR_VAR 0 19
9338: PUSH
9339: EMPTY
9340: ST_TO_ADDR
// for j in f do
9341: LD_ADDR_VAR 0 9
9345: PUSH
9346: LD_VAR 0 12
9350: PUSH
9351: FOR_IN
9352: IFFALSE 9425
// if GetBType ( j ) = b_bunker then
9354: LD_VAR 0 9
9358: PPUSH
9359: CALL_OW 266
9363: PUSH
9364: LD_INT 32
9366: EQUAL
9367: IFFALSE 9394
// tmp := Insert ( tmp , 1 , j ) else
9369: LD_ADDR_VAR 0 19
9373: PUSH
9374: LD_VAR 0 19
9378: PPUSH
9379: LD_INT 1
9381: PPUSH
9382: LD_VAR 0 9
9386: PPUSH
9387: CALL_OW 2
9391: ST_TO_ADDR
9392: GO 9423
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9394: LD_ADDR_VAR 0 19
9398: PUSH
9399: LD_VAR 0 19
9403: PPUSH
9404: LD_VAR 0 19
9408: PUSH
9409: LD_INT 1
9411: PLUS
9412: PPUSH
9413: LD_VAR 0 9
9417: PPUSH
9418: CALL_OW 2
9422: ST_TO_ADDR
9423: GO 9351
9425: POP
9426: POP
// if tmp then
9427: LD_VAR 0 19
9431: IFFALSE 9443
// f := tmp ;
9433: LD_ADDR_VAR 0 12
9437: PUSH
9438: LD_VAR 0 19
9442: ST_TO_ADDR
// end ; x := personel [ i ] ;
9443: LD_ADDR_VAR 0 13
9447: PUSH
9448: LD_VAR 0 6
9452: PUSH
9453: LD_VAR 0 8
9457: ARRAY
9458: ST_TO_ADDR
// if x = - 1 then
9459: LD_VAR 0 13
9463: PUSH
9464: LD_INT 1
9466: NEG
9467: EQUAL
9468: IFFALSE 9677
// begin for j in f do
9470: LD_ADDR_VAR 0 9
9474: PUSH
9475: LD_VAR 0 12
9479: PUSH
9480: FOR_IN
9481: IFFALSE 9673
// repeat InitHc ;
9483: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9487: LD_VAR 0 9
9491: PPUSH
9492: CALL_OW 266
9496: PUSH
9497: LD_INT 5
9499: EQUAL
9500: IFFALSE 9570
// begin if UnitsInside ( j ) < 3 then
9502: LD_VAR 0 9
9506: PPUSH
9507: CALL_OW 313
9511: PUSH
9512: LD_INT 3
9514: LESS
9515: IFFALSE 9551
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9517: LD_INT 0
9519: PPUSH
9520: LD_INT 5
9522: PUSH
9523: LD_INT 8
9525: PUSH
9526: LD_INT 9
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: LIST
9533: PUSH
9534: LD_VAR 0 17
9538: ARRAY
9539: PPUSH
9540: LD_VAR 0 4
9544: PPUSH
9545: CALL_OW 380
9549: GO 9568
// PrepareHuman ( false , i , skill ) ;
9551: LD_INT 0
9553: PPUSH
9554: LD_VAR 0 8
9558: PPUSH
9559: LD_VAR 0 4
9563: PPUSH
9564: CALL_OW 380
// end else
9568: GO 9587
// PrepareHuman ( false , i , skill ) ;
9570: LD_INT 0
9572: PPUSH
9573: LD_VAR 0 8
9577: PPUSH
9578: LD_VAR 0 4
9582: PPUSH
9583: CALL_OW 380
// un := CreateHuman ;
9587: LD_ADDR_VAR 0 14
9591: PUSH
9592: CALL_OW 44
9596: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9597: LD_ADDR_VAR 0 7
9601: PUSH
9602: LD_VAR 0 7
9606: PPUSH
9607: LD_INT 1
9609: PPUSH
9610: LD_VAR 0 14
9614: PPUSH
9615: CALL_OW 2
9619: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9620: LD_VAR 0 14
9624: PPUSH
9625: LD_VAR 0 9
9629: PPUSH
9630: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9634: LD_VAR 0 9
9638: PPUSH
9639: CALL_OW 313
9643: PUSH
9644: LD_INT 6
9646: EQUAL
9647: PUSH
9648: LD_VAR 0 9
9652: PPUSH
9653: CALL_OW 266
9657: PUSH
9658: LD_INT 32
9660: PUSH
9661: LD_INT 31
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: IN
9668: OR
9669: IFFALSE 9483
9671: GO 9480
9673: POP
9674: POP
// end else
9675: GO 10057
// for j = 1 to x do
9677: LD_ADDR_VAR 0 9
9681: PUSH
9682: DOUBLE
9683: LD_INT 1
9685: DEC
9686: ST_TO_ADDR
9687: LD_VAR 0 13
9691: PUSH
9692: FOR_TO
9693: IFFALSE 10055
// begin InitHc ;
9695: CALL_OW 19
// if not f then
9699: LD_VAR 0 12
9703: NOT
9704: IFFALSE 9793
// begin PrepareHuman ( false , i , skill ) ;
9706: LD_INT 0
9708: PPUSH
9709: LD_VAR 0 8
9713: PPUSH
9714: LD_VAR 0 4
9718: PPUSH
9719: CALL_OW 380
// un := CreateHuman ;
9723: LD_ADDR_VAR 0 14
9727: PUSH
9728: CALL_OW 44
9732: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9733: LD_ADDR_VAR 0 7
9737: PUSH
9738: LD_VAR 0 7
9742: PPUSH
9743: LD_INT 1
9745: PPUSH
9746: LD_VAR 0 14
9750: PPUSH
9751: CALL_OW 2
9755: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
9756: LD_VAR 0 14
9760: PPUSH
9761: LD_VAR 0 1
9765: PPUSH
9766: CALL_OW 250
9770: PPUSH
9771: LD_VAR 0 1
9775: PPUSH
9776: CALL_OW 251
9780: PPUSH
9781: LD_INT 10
9783: PPUSH
9784: LD_INT 0
9786: PPUSH
9787: CALL_OW 50
// continue ;
9791: GO 9692
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
9793: LD_VAR 0 12
9797: PUSH
9798: LD_INT 1
9800: ARRAY
9801: PPUSH
9802: CALL_OW 313
9806: PUSH
9807: LD_VAR 0 12
9811: PUSH
9812: LD_INT 1
9814: ARRAY
9815: PPUSH
9816: CALL_OW 266
9820: PUSH
9821: LD_INT 32
9823: PUSH
9824: LD_INT 31
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: IN
9831: AND
9832: PUSH
9833: LD_VAR 0 12
9837: PUSH
9838: LD_INT 1
9840: ARRAY
9841: PPUSH
9842: CALL_OW 313
9846: PUSH
9847: LD_INT 6
9849: EQUAL
9850: OR
9851: IFFALSE 9871
// f := Delete ( f , 1 ) ;
9853: LD_ADDR_VAR 0 12
9857: PUSH
9858: LD_VAR 0 12
9862: PPUSH
9863: LD_INT 1
9865: PPUSH
9866: CALL_OW 3
9870: ST_TO_ADDR
// if not f then
9871: LD_VAR 0 12
9875: NOT
9876: IFFALSE 9894
// begin x := x + 2 ;
9878: LD_ADDR_VAR 0 13
9882: PUSH
9883: LD_VAR 0 13
9887: PUSH
9888: LD_INT 2
9890: PLUS
9891: ST_TO_ADDR
// continue ;
9892: GO 9692
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
9894: LD_VAR 0 12
9898: PUSH
9899: LD_INT 1
9901: ARRAY
9902: PPUSH
9903: CALL_OW 266
9907: PUSH
9908: LD_INT 5
9910: EQUAL
9911: IFFALSE 9985
// begin if UnitsInside ( f [ 1 ] ) < 3 then
9913: LD_VAR 0 12
9917: PUSH
9918: LD_INT 1
9920: ARRAY
9921: PPUSH
9922: CALL_OW 313
9926: PUSH
9927: LD_INT 3
9929: LESS
9930: IFFALSE 9966
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9932: LD_INT 0
9934: PPUSH
9935: LD_INT 5
9937: PUSH
9938: LD_INT 8
9940: PUSH
9941: LD_INT 9
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: LIST
9948: PUSH
9949: LD_VAR 0 17
9953: ARRAY
9954: PPUSH
9955: LD_VAR 0 4
9959: PPUSH
9960: CALL_OW 380
9964: GO 9983
// PrepareHuman ( false , i , skill ) ;
9966: LD_INT 0
9968: PPUSH
9969: LD_VAR 0 8
9973: PPUSH
9974: LD_VAR 0 4
9978: PPUSH
9979: CALL_OW 380
// end else
9983: GO 10002
// PrepareHuman ( false , i , skill ) ;
9985: LD_INT 0
9987: PPUSH
9988: LD_VAR 0 8
9992: PPUSH
9993: LD_VAR 0 4
9997: PPUSH
9998: CALL_OW 380
// un := CreateHuman ;
10002: LD_ADDR_VAR 0 14
10006: PUSH
10007: CALL_OW 44
10011: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10012: LD_ADDR_VAR 0 7
10016: PUSH
10017: LD_VAR 0 7
10021: PPUSH
10022: LD_INT 1
10024: PPUSH
10025: LD_VAR 0 14
10029: PPUSH
10030: CALL_OW 2
10034: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10035: LD_VAR 0 14
10039: PPUSH
10040: LD_VAR 0 12
10044: PUSH
10045: LD_INT 1
10047: ARRAY
10048: PPUSH
10049: CALL_OW 52
// end ;
10053: GO 9692
10055: POP
10056: POP
// end ;
10057: GO 8994
10059: POP
10060: POP
// result := result ^ buildings ;
10061: LD_ADDR_VAR 0 7
10065: PUSH
10066: LD_VAR 0 7
10070: PUSH
10071: LD_VAR 0 18
10075: ADD
10076: ST_TO_ADDR
// end else
10077: GO 10220
// begin for i = 1 to personel do
10079: LD_ADDR_VAR 0 8
10083: PUSH
10084: DOUBLE
10085: LD_INT 1
10087: DEC
10088: ST_TO_ADDR
10089: LD_VAR 0 6
10093: PUSH
10094: FOR_TO
10095: IFFALSE 10218
// begin if i > 4 then
10097: LD_VAR 0 8
10101: PUSH
10102: LD_INT 4
10104: GREATER
10105: IFFALSE 10109
// break ;
10107: GO 10218
// x := personel [ i ] ;
10109: LD_ADDR_VAR 0 13
10113: PUSH
10114: LD_VAR 0 6
10118: PUSH
10119: LD_VAR 0 8
10123: ARRAY
10124: ST_TO_ADDR
// if x = - 1 then
10125: LD_VAR 0 13
10129: PUSH
10130: LD_INT 1
10132: NEG
10133: EQUAL
10134: IFFALSE 10138
// continue ;
10136: GO 10094
// PrepareHuman ( false , i , skill ) ;
10138: LD_INT 0
10140: PPUSH
10141: LD_VAR 0 8
10145: PPUSH
10146: LD_VAR 0 4
10150: PPUSH
10151: CALL_OW 380
// un := CreateHuman ;
10155: LD_ADDR_VAR 0 14
10159: PUSH
10160: CALL_OW 44
10164: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10165: LD_VAR 0 14
10169: PPUSH
10170: LD_VAR 0 1
10174: PPUSH
10175: CALL_OW 250
10179: PPUSH
10180: LD_VAR 0 1
10184: PPUSH
10185: CALL_OW 251
10189: PPUSH
10190: LD_INT 10
10192: PPUSH
10193: LD_INT 0
10195: PPUSH
10196: CALL_OW 50
// result := result ^ un ;
10200: LD_ADDR_VAR 0 7
10204: PUSH
10205: LD_VAR 0 7
10209: PUSH
10210: LD_VAR 0 14
10214: ADD
10215: ST_TO_ADDR
// end ;
10216: GO 10094
10218: POP
10219: POP
// end ; end ;
10220: LD_VAR 0 7
10224: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10225: LD_INT 0
10227: PPUSH
10228: PPUSH
10229: PPUSH
10230: PPUSH
10231: PPUSH
10232: PPUSH
10233: PPUSH
10234: PPUSH
10235: PPUSH
10236: PPUSH
10237: PPUSH
10238: PPUSH
10239: PPUSH
10240: PPUSH
10241: PPUSH
10242: PPUSH
// result := false ;
10243: LD_ADDR_VAR 0 3
10247: PUSH
10248: LD_INT 0
10250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10251: LD_VAR 0 1
10255: NOT
10256: PUSH
10257: LD_VAR 0 1
10261: PPUSH
10262: CALL_OW 266
10266: PUSH
10267: LD_INT 32
10269: PUSH
10270: LD_INT 33
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: IN
10277: NOT
10278: OR
10279: IFFALSE 10283
// exit ;
10281: GO 11422
// nat := GetNation ( tower ) ;
10283: LD_ADDR_VAR 0 12
10287: PUSH
10288: LD_VAR 0 1
10292: PPUSH
10293: CALL_OW 248
10297: ST_TO_ADDR
// side := GetSide ( tower ) ;
10298: LD_ADDR_VAR 0 16
10302: PUSH
10303: LD_VAR 0 1
10307: PPUSH
10308: CALL_OW 255
10312: ST_TO_ADDR
// x := GetX ( tower ) ;
10313: LD_ADDR_VAR 0 10
10317: PUSH
10318: LD_VAR 0 1
10322: PPUSH
10323: CALL_OW 250
10327: ST_TO_ADDR
// y := GetY ( tower ) ;
10328: LD_ADDR_VAR 0 11
10332: PUSH
10333: LD_VAR 0 1
10337: PPUSH
10338: CALL_OW 251
10342: ST_TO_ADDR
// if not x or not y then
10343: LD_VAR 0 10
10347: NOT
10348: PUSH
10349: LD_VAR 0 11
10353: NOT
10354: OR
10355: IFFALSE 10359
// exit ;
10357: GO 11422
// weapon := 0 ;
10359: LD_ADDR_VAR 0 18
10363: PUSH
10364: LD_INT 0
10366: ST_TO_ADDR
// fac_list := [ ] ;
10367: LD_ADDR_VAR 0 17
10371: PUSH
10372: EMPTY
10373: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10374: LD_ADDR_VAR 0 6
10378: PUSH
10379: LD_VAR 0 1
10383: PPUSH
10384: CALL_OW 274
10388: PPUSH
10389: LD_VAR 0 2
10393: PPUSH
10394: LD_INT 0
10396: PPUSH
10397: CALL 7962 0 3
10401: PPUSH
10402: LD_INT 30
10404: PUSH
10405: LD_INT 3
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PPUSH
10412: CALL_OW 72
10416: ST_TO_ADDR
// if not factories then
10417: LD_VAR 0 6
10421: NOT
10422: IFFALSE 10426
// exit ;
10424: GO 11422
// for i in factories do
10426: LD_ADDR_VAR 0 8
10430: PUSH
10431: LD_VAR 0 6
10435: PUSH
10436: FOR_IN
10437: IFFALSE 10462
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10439: LD_ADDR_VAR 0 17
10443: PUSH
10444: LD_VAR 0 17
10448: PUSH
10449: LD_VAR 0 8
10453: PPUSH
10454: CALL_OW 478
10458: UNION
10459: ST_TO_ADDR
10460: GO 10436
10462: POP
10463: POP
// if not fac_list then
10464: LD_VAR 0 17
10468: NOT
10469: IFFALSE 10473
// exit ;
10471: GO 11422
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10473: LD_ADDR_VAR 0 5
10477: PUSH
10478: LD_INT 4
10480: PUSH
10481: LD_INT 5
10483: PUSH
10484: LD_INT 9
10486: PUSH
10487: LD_INT 10
10489: PUSH
10490: LD_INT 6
10492: PUSH
10493: LD_INT 7
10495: PUSH
10496: LD_INT 11
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: PUSH
10508: LD_INT 27
10510: PUSH
10511: LD_INT 28
10513: PUSH
10514: LD_INT 26
10516: PUSH
10517: LD_INT 30
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: PUSH
10526: LD_INT 43
10528: PUSH
10529: LD_INT 44
10531: PUSH
10532: LD_INT 46
10534: PUSH
10535: LD_INT 45
10537: PUSH
10538: LD_INT 47
10540: PUSH
10541: LD_INT 49
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: LD_VAR 0 12
10561: ARRAY
10562: ST_TO_ADDR
// for i in list do
10563: LD_ADDR_VAR 0 8
10567: PUSH
10568: LD_VAR 0 5
10572: PUSH
10573: FOR_IN
10574: IFFALSE 10607
// if not i in fac_list then
10576: LD_VAR 0 8
10580: PUSH
10581: LD_VAR 0 17
10585: IN
10586: NOT
10587: IFFALSE 10605
// list := list diff i ;
10589: LD_ADDR_VAR 0 5
10593: PUSH
10594: LD_VAR 0 5
10598: PUSH
10599: LD_VAR 0 8
10603: DIFF
10604: ST_TO_ADDR
10605: GO 10573
10607: POP
10608: POP
// if not list then
10609: LD_VAR 0 5
10613: NOT
10614: IFFALSE 10618
// exit ;
10616: GO 11422
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10618: LD_VAR 0 12
10622: PUSH
10623: LD_INT 3
10625: EQUAL
10626: PUSH
10627: LD_INT 49
10629: PUSH
10630: LD_VAR 0 5
10634: IN
10635: AND
10636: PUSH
10637: LD_INT 31
10639: PPUSH
10640: LD_VAR 0 16
10644: PPUSH
10645: CALL_OW 321
10649: PUSH
10650: LD_INT 2
10652: EQUAL
10653: AND
10654: IFFALSE 10714
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10656: LD_INT 22
10658: PUSH
10659: LD_VAR 0 16
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 35
10670: PUSH
10671: LD_INT 49
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 91
10680: PUSH
10681: LD_VAR 0 1
10685: PUSH
10686: LD_INT 10
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: LIST
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: PPUSH
10699: CALL_OW 69
10703: NOT
10704: IFFALSE 10714
// weapon := ru_time_lapser ;
10706: LD_ADDR_VAR 0 18
10710: PUSH
10711: LD_INT 49
10713: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
10714: LD_VAR 0 12
10718: PUSH
10719: LD_INT 1
10721: PUSH
10722: LD_INT 2
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: IN
10729: PUSH
10730: LD_INT 11
10732: PUSH
10733: LD_VAR 0 5
10737: IN
10738: PUSH
10739: LD_INT 30
10741: PUSH
10742: LD_VAR 0 5
10746: IN
10747: OR
10748: AND
10749: PUSH
10750: LD_INT 6
10752: PPUSH
10753: LD_VAR 0 16
10757: PPUSH
10758: CALL_OW 321
10762: PUSH
10763: LD_INT 2
10765: EQUAL
10766: AND
10767: IFFALSE 10932
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
10769: LD_INT 22
10771: PUSH
10772: LD_VAR 0 16
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 2
10783: PUSH
10784: LD_INT 35
10786: PUSH
10787: LD_INT 11
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PUSH
10794: LD_INT 35
10796: PUSH
10797: LD_INT 30
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 91
10811: PUSH
10812: LD_VAR 0 1
10816: PUSH
10817: LD_INT 18
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: LIST
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: LIST
10829: PPUSH
10830: CALL_OW 69
10834: NOT
10835: PUSH
10836: LD_INT 22
10838: PUSH
10839: LD_VAR 0 16
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PUSH
10848: LD_INT 2
10850: PUSH
10851: LD_INT 30
10853: PUSH
10854: LD_INT 32
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: PUSH
10861: LD_INT 30
10863: PUSH
10864: LD_INT 33
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 91
10878: PUSH
10879: LD_VAR 0 1
10883: PUSH
10884: LD_INT 12
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: LIST
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: LIST
10896: PUSH
10897: EMPTY
10898: LIST
10899: PPUSH
10900: CALL_OW 69
10904: PUSH
10905: LD_INT 2
10907: GREATER
10908: AND
10909: IFFALSE 10932
// weapon := [ us_radar , ar_radar ] [ nat ] ;
10911: LD_ADDR_VAR 0 18
10915: PUSH
10916: LD_INT 11
10918: PUSH
10919: LD_INT 30
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PUSH
10926: LD_VAR 0 12
10930: ARRAY
10931: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
10932: LD_VAR 0 18
10936: NOT
10937: PUSH
10938: LD_INT 40
10940: PPUSH
10941: LD_VAR 0 16
10945: PPUSH
10946: CALL_OW 321
10950: PUSH
10951: LD_INT 2
10953: EQUAL
10954: AND
10955: PUSH
10956: LD_INT 7
10958: PUSH
10959: LD_VAR 0 5
10963: IN
10964: PUSH
10965: LD_INT 28
10967: PUSH
10968: LD_VAR 0 5
10972: IN
10973: OR
10974: PUSH
10975: LD_INT 45
10977: PUSH
10978: LD_VAR 0 5
10982: IN
10983: OR
10984: AND
10985: IFFALSE 11239
// begin hex := GetHexInfo ( x , y ) ;
10987: LD_ADDR_VAR 0 4
10991: PUSH
10992: LD_VAR 0 10
10996: PPUSH
10997: LD_VAR 0 11
11001: PPUSH
11002: CALL_OW 546
11006: ST_TO_ADDR
// if hex [ 1 ] then
11007: LD_VAR 0 4
11011: PUSH
11012: LD_INT 1
11014: ARRAY
11015: IFFALSE 11019
// exit ;
11017: GO 11422
// height := hex [ 2 ] ;
11019: LD_ADDR_VAR 0 15
11023: PUSH
11024: LD_VAR 0 4
11028: PUSH
11029: LD_INT 2
11031: ARRAY
11032: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11033: LD_ADDR_VAR 0 14
11037: PUSH
11038: LD_INT 0
11040: PUSH
11041: LD_INT 2
11043: PUSH
11044: LD_INT 3
11046: PUSH
11047: LD_INT 5
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: ST_TO_ADDR
// for i in tmp do
11056: LD_ADDR_VAR 0 8
11060: PUSH
11061: LD_VAR 0 14
11065: PUSH
11066: FOR_IN
11067: IFFALSE 11237
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11069: LD_ADDR_VAR 0 9
11073: PUSH
11074: LD_VAR 0 10
11078: PPUSH
11079: LD_VAR 0 8
11083: PPUSH
11084: LD_INT 5
11086: PPUSH
11087: CALL_OW 272
11091: PUSH
11092: LD_VAR 0 11
11096: PPUSH
11097: LD_VAR 0 8
11101: PPUSH
11102: LD_INT 5
11104: PPUSH
11105: CALL_OW 273
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11114: LD_VAR 0 9
11118: PUSH
11119: LD_INT 1
11121: ARRAY
11122: PPUSH
11123: LD_VAR 0 9
11127: PUSH
11128: LD_INT 2
11130: ARRAY
11131: PPUSH
11132: CALL_OW 488
11136: IFFALSE 11235
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11138: LD_ADDR_VAR 0 4
11142: PUSH
11143: LD_VAR 0 9
11147: PUSH
11148: LD_INT 1
11150: ARRAY
11151: PPUSH
11152: LD_VAR 0 9
11156: PUSH
11157: LD_INT 2
11159: ARRAY
11160: PPUSH
11161: CALL_OW 546
11165: ST_TO_ADDR
// if hex [ 1 ] then
11166: LD_VAR 0 4
11170: PUSH
11171: LD_INT 1
11173: ARRAY
11174: IFFALSE 11178
// continue ;
11176: GO 11066
// h := hex [ 2 ] ;
11178: LD_ADDR_VAR 0 13
11182: PUSH
11183: LD_VAR 0 4
11187: PUSH
11188: LD_INT 2
11190: ARRAY
11191: ST_TO_ADDR
// if h + 7 < height then
11192: LD_VAR 0 13
11196: PUSH
11197: LD_INT 7
11199: PLUS
11200: PUSH
11201: LD_VAR 0 15
11205: LESS
11206: IFFALSE 11235
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11208: LD_ADDR_VAR 0 18
11212: PUSH
11213: LD_INT 7
11215: PUSH
11216: LD_INT 28
11218: PUSH
11219: LD_INT 45
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: PUSH
11227: LD_VAR 0 12
11231: ARRAY
11232: ST_TO_ADDR
// break ;
11233: GO 11237
// end ; end ; end ;
11235: GO 11066
11237: POP
11238: POP
// end ; if not weapon then
11239: LD_VAR 0 18
11243: NOT
11244: IFFALSE 11304
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11246: LD_ADDR_VAR 0 5
11250: PUSH
11251: LD_VAR 0 5
11255: PUSH
11256: LD_INT 11
11258: PUSH
11259: LD_INT 30
11261: PUSH
11262: LD_INT 49
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: LIST
11269: DIFF
11270: ST_TO_ADDR
// if not list then
11271: LD_VAR 0 5
11275: NOT
11276: IFFALSE 11280
// exit ;
11278: GO 11422
// weapon := list [ rand ( 1 , list ) ] ;
11280: LD_ADDR_VAR 0 18
11284: PUSH
11285: LD_VAR 0 5
11289: PUSH
11290: LD_INT 1
11292: PPUSH
11293: LD_VAR 0 5
11297: PPUSH
11298: CALL_OW 12
11302: ARRAY
11303: ST_TO_ADDR
// end ; if weapon then
11304: LD_VAR 0 18
11308: IFFALSE 11422
// begin tmp := CostOfWeapon ( weapon ) ;
11310: LD_ADDR_VAR 0 14
11314: PUSH
11315: LD_VAR 0 18
11319: PPUSH
11320: CALL_OW 451
11324: ST_TO_ADDR
// j := GetBase ( tower ) ;
11325: LD_ADDR_VAR 0 9
11329: PUSH
11330: LD_VAR 0 1
11334: PPUSH
11335: CALL_OW 274
11339: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11340: LD_VAR 0 9
11344: PPUSH
11345: LD_INT 1
11347: PPUSH
11348: CALL_OW 275
11352: PUSH
11353: LD_VAR 0 14
11357: PUSH
11358: LD_INT 1
11360: ARRAY
11361: GREATEREQUAL
11362: PUSH
11363: LD_VAR 0 9
11367: PPUSH
11368: LD_INT 2
11370: PPUSH
11371: CALL_OW 275
11375: PUSH
11376: LD_VAR 0 14
11380: PUSH
11381: LD_INT 2
11383: ARRAY
11384: GREATEREQUAL
11385: AND
11386: PUSH
11387: LD_VAR 0 9
11391: PPUSH
11392: LD_INT 3
11394: PPUSH
11395: CALL_OW 275
11399: PUSH
11400: LD_VAR 0 14
11404: PUSH
11405: LD_INT 3
11407: ARRAY
11408: GREATEREQUAL
11409: AND
11410: IFFALSE 11422
// result := weapon ;
11412: LD_ADDR_VAR 0 3
11416: PUSH
11417: LD_VAR 0 18
11421: ST_TO_ADDR
// end ; end ;
11422: LD_VAR 0 3
11426: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11427: LD_INT 0
11429: PPUSH
11430: PPUSH
// result := true ;
11431: LD_ADDR_VAR 0 3
11435: PUSH
11436: LD_INT 1
11438: ST_TO_ADDR
// if array1 = array2 then
11439: LD_VAR 0 1
11443: PUSH
11444: LD_VAR 0 2
11448: EQUAL
11449: IFFALSE 11509
// begin for i = 1 to array1 do
11451: LD_ADDR_VAR 0 4
11455: PUSH
11456: DOUBLE
11457: LD_INT 1
11459: DEC
11460: ST_TO_ADDR
11461: LD_VAR 0 1
11465: PUSH
11466: FOR_TO
11467: IFFALSE 11505
// if array1 [ i ] <> array2 [ i ] then
11469: LD_VAR 0 1
11473: PUSH
11474: LD_VAR 0 4
11478: ARRAY
11479: PUSH
11480: LD_VAR 0 2
11484: PUSH
11485: LD_VAR 0 4
11489: ARRAY
11490: NONEQUAL
11491: IFFALSE 11503
// begin result := false ;
11493: LD_ADDR_VAR 0 3
11497: PUSH
11498: LD_INT 0
11500: ST_TO_ADDR
// break ;
11501: GO 11505
// end ;
11503: GO 11466
11505: POP
11506: POP
// end else
11507: GO 11517
// result := false ;
11509: LD_ADDR_VAR 0 3
11513: PUSH
11514: LD_INT 0
11516: ST_TO_ADDR
// end ;
11517: LD_VAR 0 3
11521: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11522: LD_INT 0
11524: PPUSH
11525: PPUSH
// if not array1 or not array2 then
11526: LD_VAR 0 1
11530: NOT
11531: PUSH
11532: LD_VAR 0 2
11536: NOT
11537: OR
11538: IFFALSE 11542
// exit ;
11540: GO 11606
// result := true ;
11542: LD_ADDR_VAR 0 3
11546: PUSH
11547: LD_INT 1
11549: ST_TO_ADDR
// for i = 1 to array1 do
11550: LD_ADDR_VAR 0 4
11554: PUSH
11555: DOUBLE
11556: LD_INT 1
11558: DEC
11559: ST_TO_ADDR
11560: LD_VAR 0 1
11564: PUSH
11565: FOR_TO
11566: IFFALSE 11604
// if array1 [ i ] <> array2 [ i ] then
11568: LD_VAR 0 1
11572: PUSH
11573: LD_VAR 0 4
11577: ARRAY
11578: PUSH
11579: LD_VAR 0 2
11583: PUSH
11584: LD_VAR 0 4
11588: ARRAY
11589: NONEQUAL
11590: IFFALSE 11602
// begin result := false ;
11592: LD_ADDR_VAR 0 3
11596: PUSH
11597: LD_INT 0
11599: ST_TO_ADDR
// break ;
11600: GO 11604
// end ;
11602: GO 11565
11604: POP
11605: POP
// end ;
11606: LD_VAR 0 3
11610: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11611: LD_INT 0
11613: PPUSH
11614: PPUSH
11615: PPUSH
// pom := GetBase ( fac ) ;
11616: LD_ADDR_VAR 0 5
11620: PUSH
11621: LD_VAR 0 1
11625: PPUSH
11626: CALL_OW 274
11630: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11631: LD_ADDR_VAR 0 4
11635: PUSH
11636: LD_VAR 0 2
11640: PUSH
11641: LD_INT 1
11643: ARRAY
11644: PPUSH
11645: LD_VAR 0 2
11649: PUSH
11650: LD_INT 2
11652: ARRAY
11653: PPUSH
11654: LD_VAR 0 2
11658: PUSH
11659: LD_INT 3
11661: ARRAY
11662: PPUSH
11663: LD_VAR 0 2
11667: PUSH
11668: LD_INT 4
11670: ARRAY
11671: PPUSH
11672: CALL_OW 449
11676: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11677: LD_ADDR_VAR 0 3
11681: PUSH
11682: LD_VAR 0 5
11686: PPUSH
11687: LD_INT 1
11689: PPUSH
11690: CALL_OW 275
11694: PUSH
11695: LD_VAR 0 4
11699: PUSH
11700: LD_INT 1
11702: ARRAY
11703: GREATEREQUAL
11704: PUSH
11705: LD_VAR 0 5
11709: PPUSH
11710: LD_INT 2
11712: PPUSH
11713: CALL_OW 275
11717: PUSH
11718: LD_VAR 0 4
11722: PUSH
11723: LD_INT 2
11725: ARRAY
11726: GREATEREQUAL
11727: AND
11728: PUSH
11729: LD_VAR 0 5
11733: PPUSH
11734: LD_INT 3
11736: PPUSH
11737: CALL_OW 275
11741: PUSH
11742: LD_VAR 0 4
11746: PUSH
11747: LD_INT 3
11749: ARRAY
11750: GREATEREQUAL
11751: AND
11752: ST_TO_ADDR
// end ;
11753: LD_VAR 0 3
11757: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
11758: LD_INT 0
11760: PPUSH
11761: PPUSH
11762: PPUSH
11763: PPUSH
// pom := GetBase ( building ) ;
11764: LD_ADDR_VAR 0 3
11768: PUSH
11769: LD_VAR 0 1
11773: PPUSH
11774: CALL_OW 274
11778: ST_TO_ADDR
// if not pom then
11779: LD_VAR 0 3
11783: NOT
11784: IFFALSE 11788
// exit ;
11786: GO 11958
// btype := GetBType ( building ) ;
11788: LD_ADDR_VAR 0 5
11792: PUSH
11793: LD_VAR 0 1
11797: PPUSH
11798: CALL_OW 266
11802: ST_TO_ADDR
// if btype = b_armoury then
11803: LD_VAR 0 5
11807: PUSH
11808: LD_INT 4
11810: EQUAL
11811: IFFALSE 11821
// btype := b_barracks ;
11813: LD_ADDR_VAR 0 5
11817: PUSH
11818: LD_INT 5
11820: ST_TO_ADDR
// if btype = b_depot then
11821: LD_VAR 0 5
11825: PUSH
11826: LD_INT 0
11828: EQUAL
11829: IFFALSE 11839
// btype := b_warehouse ;
11831: LD_ADDR_VAR 0 5
11835: PUSH
11836: LD_INT 1
11838: ST_TO_ADDR
// if btype = b_workshop then
11839: LD_VAR 0 5
11843: PUSH
11844: LD_INT 2
11846: EQUAL
11847: IFFALSE 11857
// btype := b_factory ;
11849: LD_ADDR_VAR 0 5
11853: PUSH
11854: LD_INT 3
11856: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11857: LD_ADDR_VAR 0 4
11861: PUSH
11862: LD_VAR 0 5
11866: PPUSH
11867: LD_VAR 0 1
11871: PPUSH
11872: CALL_OW 248
11876: PPUSH
11877: CALL_OW 450
11881: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11882: LD_ADDR_VAR 0 2
11886: PUSH
11887: LD_VAR 0 3
11891: PPUSH
11892: LD_INT 1
11894: PPUSH
11895: CALL_OW 275
11899: PUSH
11900: LD_VAR 0 4
11904: PUSH
11905: LD_INT 1
11907: ARRAY
11908: GREATEREQUAL
11909: PUSH
11910: LD_VAR 0 3
11914: PPUSH
11915: LD_INT 2
11917: PPUSH
11918: CALL_OW 275
11922: PUSH
11923: LD_VAR 0 4
11927: PUSH
11928: LD_INT 2
11930: ARRAY
11931: GREATEREQUAL
11932: AND
11933: PUSH
11934: LD_VAR 0 3
11938: PPUSH
11939: LD_INT 3
11941: PPUSH
11942: CALL_OW 275
11946: PUSH
11947: LD_VAR 0 4
11951: PUSH
11952: LD_INT 3
11954: ARRAY
11955: GREATEREQUAL
11956: AND
11957: ST_TO_ADDR
// end ;
11958: LD_VAR 0 2
11962: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
11963: LD_INT 0
11965: PPUSH
11966: PPUSH
11967: PPUSH
// pom := GetBase ( building ) ;
11968: LD_ADDR_VAR 0 4
11972: PUSH
11973: LD_VAR 0 1
11977: PPUSH
11978: CALL_OW 274
11982: ST_TO_ADDR
// if not pom then
11983: LD_VAR 0 4
11987: NOT
11988: IFFALSE 11992
// exit ;
11990: GO 12093
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11992: LD_ADDR_VAR 0 5
11996: PUSH
11997: LD_VAR 0 2
12001: PPUSH
12002: LD_VAR 0 1
12006: PPUSH
12007: CALL_OW 248
12011: PPUSH
12012: CALL_OW 450
12016: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12017: LD_ADDR_VAR 0 3
12021: PUSH
12022: LD_VAR 0 4
12026: PPUSH
12027: LD_INT 1
12029: PPUSH
12030: CALL_OW 275
12034: PUSH
12035: LD_VAR 0 5
12039: PUSH
12040: LD_INT 1
12042: ARRAY
12043: GREATEREQUAL
12044: PUSH
12045: LD_VAR 0 4
12049: PPUSH
12050: LD_INT 2
12052: PPUSH
12053: CALL_OW 275
12057: PUSH
12058: LD_VAR 0 5
12062: PUSH
12063: LD_INT 2
12065: ARRAY
12066: GREATEREQUAL
12067: AND
12068: PUSH
12069: LD_VAR 0 4
12073: PPUSH
12074: LD_INT 3
12076: PPUSH
12077: CALL_OW 275
12081: PUSH
12082: LD_VAR 0 5
12086: PUSH
12087: LD_INT 3
12089: ARRAY
12090: GREATEREQUAL
12091: AND
12092: ST_TO_ADDR
// end ;
12093: LD_VAR 0 3
12097: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12098: LD_INT 0
12100: PPUSH
12101: PPUSH
12102: PPUSH
12103: PPUSH
12104: PPUSH
12105: PPUSH
12106: PPUSH
12107: PPUSH
12108: PPUSH
12109: PPUSH
12110: PPUSH
// result := false ;
12111: LD_ADDR_VAR 0 8
12115: PUSH
12116: LD_INT 0
12118: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12119: LD_VAR 0 5
12123: NOT
12124: PUSH
12125: LD_VAR 0 1
12129: NOT
12130: OR
12131: PUSH
12132: LD_VAR 0 2
12136: NOT
12137: OR
12138: PUSH
12139: LD_VAR 0 3
12143: NOT
12144: OR
12145: IFFALSE 12149
// exit ;
12147: GO 12963
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12149: LD_ADDR_VAR 0 14
12153: PUSH
12154: LD_VAR 0 1
12158: PPUSH
12159: LD_VAR 0 2
12163: PPUSH
12164: LD_VAR 0 3
12168: PPUSH
12169: LD_VAR 0 4
12173: PPUSH
12174: LD_VAR 0 5
12178: PUSH
12179: LD_INT 1
12181: ARRAY
12182: PPUSH
12183: CALL_OW 248
12187: PPUSH
12188: LD_INT 0
12190: PPUSH
12191: CALL 13800 0 6
12195: ST_TO_ADDR
// if not hexes then
12196: LD_VAR 0 14
12200: NOT
12201: IFFALSE 12205
// exit ;
12203: GO 12963
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12205: LD_ADDR_VAR 0 17
12209: PUSH
12210: LD_VAR 0 5
12214: PPUSH
12215: LD_INT 22
12217: PUSH
12218: LD_VAR 0 13
12222: PPUSH
12223: CALL_OW 255
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 2
12234: PUSH
12235: LD_INT 30
12237: PUSH
12238: LD_INT 0
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: LD_INT 30
12247: PUSH
12248: LD_INT 1
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PPUSH
12264: CALL_OW 72
12268: ST_TO_ADDR
// for i = 1 to hexes do
12269: LD_ADDR_VAR 0 9
12273: PUSH
12274: DOUBLE
12275: LD_INT 1
12277: DEC
12278: ST_TO_ADDR
12279: LD_VAR 0 14
12283: PUSH
12284: FOR_TO
12285: IFFALSE 12961
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12287: LD_ADDR_VAR 0 13
12291: PUSH
12292: LD_VAR 0 14
12296: PUSH
12297: LD_VAR 0 9
12301: ARRAY
12302: PUSH
12303: LD_INT 1
12305: ARRAY
12306: PPUSH
12307: LD_VAR 0 14
12311: PUSH
12312: LD_VAR 0 9
12316: ARRAY
12317: PUSH
12318: LD_INT 2
12320: ARRAY
12321: PPUSH
12322: CALL_OW 428
12326: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12327: LD_VAR 0 14
12331: PUSH
12332: LD_VAR 0 9
12336: ARRAY
12337: PUSH
12338: LD_INT 1
12340: ARRAY
12341: PPUSH
12342: LD_VAR 0 14
12346: PUSH
12347: LD_VAR 0 9
12351: ARRAY
12352: PUSH
12353: LD_INT 2
12355: ARRAY
12356: PPUSH
12357: CALL_OW 351
12361: PUSH
12362: LD_VAR 0 14
12366: PUSH
12367: LD_VAR 0 9
12371: ARRAY
12372: PUSH
12373: LD_INT 1
12375: ARRAY
12376: PPUSH
12377: LD_VAR 0 14
12381: PUSH
12382: LD_VAR 0 9
12386: ARRAY
12387: PUSH
12388: LD_INT 2
12390: ARRAY
12391: PPUSH
12392: CALL_OW 488
12396: NOT
12397: OR
12398: PUSH
12399: LD_VAR 0 13
12403: PPUSH
12404: CALL_OW 247
12408: PUSH
12409: LD_INT 3
12411: EQUAL
12412: OR
12413: IFFALSE 12419
// exit ;
12415: POP
12416: POP
12417: GO 12963
// if not tmp then
12419: LD_VAR 0 13
12423: NOT
12424: IFFALSE 12428
// continue ;
12426: GO 12284
// result := true ;
12428: LD_ADDR_VAR 0 8
12432: PUSH
12433: LD_INT 1
12435: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12436: LD_VAR 0 6
12440: PUSH
12441: LD_VAR 0 13
12445: PPUSH
12446: CALL_OW 247
12450: PUSH
12451: LD_INT 2
12453: EQUAL
12454: AND
12455: PUSH
12456: LD_VAR 0 13
12460: PPUSH
12461: CALL_OW 263
12465: PUSH
12466: LD_INT 1
12468: EQUAL
12469: AND
12470: IFFALSE 12634
// begin if IsDrivenBy ( tmp ) then
12472: LD_VAR 0 13
12476: PPUSH
12477: CALL_OW 311
12481: IFFALSE 12485
// continue ;
12483: GO 12284
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12485: LD_VAR 0 6
12489: PPUSH
12490: LD_INT 3
12492: PUSH
12493: LD_INT 60
12495: PUSH
12496: EMPTY
12497: LIST
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PUSH
12503: LD_INT 3
12505: PUSH
12506: LD_INT 55
12508: PUSH
12509: EMPTY
12510: LIST
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PPUSH
12520: CALL_OW 72
12524: IFFALSE 12632
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12526: LD_ADDR_VAR 0 18
12530: PUSH
12531: LD_VAR 0 6
12535: PPUSH
12536: LD_INT 3
12538: PUSH
12539: LD_INT 60
12541: PUSH
12542: EMPTY
12543: LIST
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PUSH
12549: LD_INT 3
12551: PUSH
12552: LD_INT 55
12554: PUSH
12555: EMPTY
12556: LIST
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PPUSH
12566: CALL_OW 72
12570: PUSH
12571: LD_INT 1
12573: ARRAY
12574: ST_TO_ADDR
// if IsInUnit ( driver ) then
12575: LD_VAR 0 18
12579: PPUSH
12580: CALL_OW 310
12584: IFFALSE 12595
// ComExit ( driver ) ;
12586: LD_VAR 0 18
12590: PPUSH
12591: CALL 36984 0 1
// AddComEnterUnit ( driver , tmp ) ;
12595: LD_VAR 0 18
12599: PPUSH
12600: LD_VAR 0 13
12604: PPUSH
12605: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12609: LD_VAR 0 18
12613: PPUSH
12614: LD_VAR 0 7
12618: PPUSH
12619: CALL_OW 173
// AddComExitVehicle ( driver ) ;
12623: LD_VAR 0 18
12627: PPUSH
12628: CALL_OW 181
// end ; continue ;
12632: GO 12284
// end ; if not cleaners or not tmp in cleaners then
12634: LD_VAR 0 6
12638: NOT
12639: PUSH
12640: LD_VAR 0 13
12644: PUSH
12645: LD_VAR 0 6
12649: IN
12650: NOT
12651: OR
12652: IFFALSE 12959
// begin if dep then
12654: LD_VAR 0 17
12658: IFFALSE 12794
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
12660: LD_ADDR_VAR 0 16
12664: PUSH
12665: LD_VAR 0 17
12669: PUSH
12670: LD_INT 1
12672: ARRAY
12673: PPUSH
12674: CALL_OW 250
12678: PPUSH
12679: LD_VAR 0 17
12683: PUSH
12684: LD_INT 1
12686: ARRAY
12687: PPUSH
12688: CALL_OW 254
12692: PPUSH
12693: LD_INT 5
12695: PPUSH
12696: CALL_OW 272
12700: PUSH
12701: LD_VAR 0 17
12705: PUSH
12706: LD_INT 1
12708: ARRAY
12709: PPUSH
12710: CALL_OW 251
12714: PPUSH
12715: LD_VAR 0 17
12719: PUSH
12720: LD_INT 1
12722: ARRAY
12723: PPUSH
12724: CALL_OW 254
12728: PPUSH
12729: LD_INT 5
12731: PPUSH
12732: CALL_OW 273
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
12741: LD_VAR 0 16
12745: PUSH
12746: LD_INT 1
12748: ARRAY
12749: PPUSH
12750: LD_VAR 0 16
12754: PUSH
12755: LD_INT 2
12757: ARRAY
12758: PPUSH
12759: CALL_OW 488
12763: IFFALSE 12794
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
12765: LD_VAR 0 13
12769: PPUSH
12770: LD_VAR 0 16
12774: PUSH
12775: LD_INT 1
12777: ARRAY
12778: PPUSH
12779: LD_VAR 0 16
12783: PUSH
12784: LD_INT 2
12786: ARRAY
12787: PPUSH
12788: CALL_OW 111
// continue ;
12792: GO 12284
// end ; end ; r := GetDir ( tmp ) ;
12794: LD_ADDR_VAR 0 15
12798: PUSH
12799: LD_VAR 0 13
12803: PPUSH
12804: CALL_OW 254
12808: ST_TO_ADDR
// if r = 5 then
12809: LD_VAR 0 15
12813: PUSH
12814: LD_INT 5
12816: EQUAL
12817: IFFALSE 12827
// r := 0 ;
12819: LD_ADDR_VAR 0 15
12823: PUSH
12824: LD_INT 0
12826: ST_TO_ADDR
// for j = r to 5 do
12827: LD_ADDR_VAR 0 10
12831: PUSH
12832: DOUBLE
12833: LD_VAR 0 15
12837: DEC
12838: ST_TO_ADDR
12839: LD_INT 5
12841: PUSH
12842: FOR_TO
12843: IFFALSE 12957
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
12845: LD_ADDR_VAR 0 11
12849: PUSH
12850: LD_VAR 0 13
12854: PPUSH
12855: CALL_OW 250
12859: PPUSH
12860: LD_VAR 0 10
12864: PPUSH
12865: LD_INT 2
12867: PPUSH
12868: CALL_OW 272
12872: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
12873: LD_ADDR_VAR 0 12
12877: PUSH
12878: LD_VAR 0 13
12882: PPUSH
12883: CALL_OW 251
12887: PPUSH
12888: LD_VAR 0 10
12892: PPUSH
12893: LD_INT 2
12895: PPUSH
12896: CALL_OW 273
12900: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
12901: LD_VAR 0 11
12905: PPUSH
12906: LD_VAR 0 12
12910: PPUSH
12911: CALL_OW 488
12915: PUSH
12916: LD_VAR 0 11
12920: PPUSH
12921: LD_VAR 0 12
12925: PPUSH
12926: CALL_OW 428
12930: NOT
12931: AND
12932: IFFALSE 12955
// begin ComMoveXY ( tmp , _x , _y ) ;
12934: LD_VAR 0 13
12938: PPUSH
12939: LD_VAR 0 11
12943: PPUSH
12944: LD_VAR 0 12
12948: PPUSH
12949: CALL_OW 111
// break ;
12953: GO 12957
// end ; end ;
12955: GO 12842
12957: POP
12958: POP
// end ; end ;
12959: GO 12284
12961: POP
12962: POP
// end ;
12963: LD_VAR 0 8
12967: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
12968: LD_INT 0
12970: PPUSH
12971: PPUSH
12972: PPUSH
12973: PPUSH
12974: PPUSH
12975: PPUSH
12976: PPUSH
12977: PPUSH
12978: PPUSH
12979: PPUSH
// result := false ;
12980: LD_ADDR_VAR 0 6
12984: PUSH
12985: LD_INT 0
12987: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
12988: LD_VAR 0 1
12992: NOT
12993: PUSH
12994: LD_VAR 0 1
12998: PPUSH
12999: CALL_OW 266
13003: PUSH
13004: LD_INT 0
13006: PUSH
13007: LD_INT 1
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: IN
13014: NOT
13015: OR
13016: PUSH
13017: LD_VAR 0 2
13021: NOT
13022: OR
13023: PUSH
13024: LD_VAR 0 5
13028: PUSH
13029: LD_INT 0
13031: PUSH
13032: LD_INT 1
13034: PUSH
13035: LD_INT 2
13037: PUSH
13038: LD_INT 3
13040: PUSH
13041: LD_INT 4
13043: PUSH
13044: LD_INT 5
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: IN
13055: NOT
13056: OR
13057: PUSH
13058: LD_VAR 0 3
13062: PPUSH
13063: LD_VAR 0 4
13067: PPUSH
13068: CALL_OW 488
13072: NOT
13073: OR
13074: IFFALSE 13078
// exit ;
13076: GO 13795
// pom := GetBase ( depot ) ;
13078: LD_ADDR_VAR 0 10
13082: PUSH
13083: LD_VAR 0 1
13087: PPUSH
13088: CALL_OW 274
13092: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13093: LD_ADDR_VAR 0 11
13097: PUSH
13098: LD_VAR 0 2
13102: PPUSH
13103: LD_VAR 0 1
13107: PPUSH
13108: CALL_OW 248
13112: PPUSH
13113: CALL_OW 450
13117: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13118: LD_VAR 0 10
13122: PPUSH
13123: LD_INT 1
13125: PPUSH
13126: CALL_OW 275
13130: PUSH
13131: LD_VAR 0 11
13135: PUSH
13136: LD_INT 1
13138: ARRAY
13139: GREATEREQUAL
13140: PUSH
13141: LD_VAR 0 10
13145: PPUSH
13146: LD_INT 2
13148: PPUSH
13149: CALL_OW 275
13153: PUSH
13154: LD_VAR 0 11
13158: PUSH
13159: LD_INT 2
13161: ARRAY
13162: GREATEREQUAL
13163: AND
13164: PUSH
13165: LD_VAR 0 10
13169: PPUSH
13170: LD_INT 3
13172: PPUSH
13173: CALL_OW 275
13177: PUSH
13178: LD_VAR 0 11
13182: PUSH
13183: LD_INT 3
13185: ARRAY
13186: GREATEREQUAL
13187: AND
13188: NOT
13189: IFFALSE 13193
// exit ;
13191: GO 13795
// if GetBType ( depot ) = b_depot then
13193: LD_VAR 0 1
13197: PPUSH
13198: CALL_OW 266
13202: PUSH
13203: LD_INT 0
13205: EQUAL
13206: IFFALSE 13218
// dist := 28 else
13208: LD_ADDR_VAR 0 14
13212: PUSH
13213: LD_INT 28
13215: ST_TO_ADDR
13216: GO 13226
// dist := 36 ;
13218: LD_ADDR_VAR 0 14
13222: PUSH
13223: LD_INT 36
13225: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
13226: LD_VAR 0 1
13230: PPUSH
13231: LD_VAR 0 3
13235: PPUSH
13236: LD_VAR 0 4
13240: PPUSH
13241: CALL_OW 297
13245: PUSH
13246: LD_VAR 0 14
13250: GREATER
13251: IFFALSE 13255
// exit ;
13253: GO 13795
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
13255: LD_ADDR_VAR 0 12
13259: PUSH
13260: LD_VAR 0 2
13264: PPUSH
13265: LD_VAR 0 3
13269: PPUSH
13270: LD_VAR 0 4
13274: PPUSH
13275: LD_VAR 0 5
13279: PPUSH
13280: LD_VAR 0 1
13284: PPUSH
13285: CALL_OW 248
13289: PPUSH
13290: LD_INT 0
13292: PPUSH
13293: CALL 13800 0 6
13297: ST_TO_ADDR
// if not hexes then
13298: LD_VAR 0 12
13302: NOT
13303: IFFALSE 13307
// exit ;
13305: GO 13795
// hex := GetHexInfo ( x , y ) ;
13307: LD_ADDR_VAR 0 15
13311: PUSH
13312: LD_VAR 0 3
13316: PPUSH
13317: LD_VAR 0 4
13321: PPUSH
13322: CALL_OW 546
13326: ST_TO_ADDR
// if hex [ 1 ] then
13327: LD_VAR 0 15
13331: PUSH
13332: LD_INT 1
13334: ARRAY
13335: IFFALSE 13339
// exit ;
13337: GO 13795
// height := hex [ 2 ] ;
13339: LD_ADDR_VAR 0 13
13343: PUSH
13344: LD_VAR 0 15
13348: PUSH
13349: LD_INT 2
13351: ARRAY
13352: ST_TO_ADDR
// for i = 1 to hexes do
13353: LD_ADDR_VAR 0 7
13357: PUSH
13358: DOUBLE
13359: LD_INT 1
13361: DEC
13362: ST_TO_ADDR
13363: LD_VAR 0 12
13367: PUSH
13368: FOR_TO
13369: IFFALSE 13699
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
13371: LD_VAR 0 12
13375: PUSH
13376: LD_VAR 0 7
13380: ARRAY
13381: PUSH
13382: LD_INT 1
13384: ARRAY
13385: PPUSH
13386: LD_VAR 0 12
13390: PUSH
13391: LD_VAR 0 7
13395: ARRAY
13396: PUSH
13397: LD_INT 2
13399: ARRAY
13400: PPUSH
13401: CALL_OW 488
13405: NOT
13406: PUSH
13407: LD_VAR 0 12
13411: PUSH
13412: LD_VAR 0 7
13416: ARRAY
13417: PUSH
13418: LD_INT 1
13420: ARRAY
13421: PPUSH
13422: LD_VAR 0 12
13426: PUSH
13427: LD_VAR 0 7
13431: ARRAY
13432: PUSH
13433: LD_INT 2
13435: ARRAY
13436: PPUSH
13437: CALL_OW 428
13441: PUSH
13442: LD_INT 0
13444: GREATER
13445: OR
13446: PUSH
13447: LD_VAR 0 12
13451: PUSH
13452: LD_VAR 0 7
13456: ARRAY
13457: PUSH
13458: LD_INT 1
13460: ARRAY
13461: PPUSH
13462: LD_VAR 0 12
13466: PUSH
13467: LD_VAR 0 7
13471: ARRAY
13472: PUSH
13473: LD_INT 2
13475: ARRAY
13476: PPUSH
13477: CALL_OW 351
13481: OR
13482: IFFALSE 13488
// exit ;
13484: POP
13485: POP
13486: GO 13795
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13488: LD_ADDR_VAR 0 8
13492: PUSH
13493: LD_VAR 0 12
13497: PUSH
13498: LD_VAR 0 7
13502: ARRAY
13503: PUSH
13504: LD_INT 1
13506: ARRAY
13507: PPUSH
13508: LD_VAR 0 12
13512: PUSH
13513: LD_VAR 0 7
13517: ARRAY
13518: PUSH
13519: LD_INT 2
13521: ARRAY
13522: PPUSH
13523: CALL_OW 546
13527: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
13528: LD_VAR 0 8
13532: PUSH
13533: LD_INT 1
13535: ARRAY
13536: PUSH
13537: LD_VAR 0 8
13541: PUSH
13542: LD_INT 2
13544: ARRAY
13545: PUSH
13546: LD_VAR 0 13
13550: PUSH
13551: LD_INT 2
13553: PLUS
13554: GREATER
13555: OR
13556: PUSH
13557: LD_VAR 0 8
13561: PUSH
13562: LD_INT 2
13564: ARRAY
13565: PUSH
13566: LD_VAR 0 13
13570: PUSH
13571: LD_INT 2
13573: MINUS
13574: LESS
13575: OR
13576: PUSH
13577: LD_VAR 0 8
13581: PUSH
13582: LD_INT 3
13584: ARRAY
13585: PUSH
13586: LD_INT 0
13588: PUSH
13589: LD_INT 8
13591: PUSH
13592: LD_INT 9
13594: PUSH
13595: LD_INT 10
13597: PUSH
13598: LD_INT 11
13600: PUSH
13601: LD_INT 12
13603: PUSH
13604: LD_INT 13
13606: PUSH
13607: LD_INT 16
13609: PUSH
13610: LD_INT 17
13612: PUSH
13613: LD_INT 18
13615: PUSH
13616: LD_INT 19
13618: PUSH
13619: LD_INT 20
13621: PUSH
13622: LD_INT 21
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: IN
13640: NOT
13641: OR
13642: PUSH
13643: LD_VAR 0 8
13647: PUSH
13648: LD_INT 5
13650: ARRAY
13651: NOT
13652: OR
13653: PUSH
13654: LD_VAR 0 8
13658: PUSH
13659: LD_INT 6
13661: ARRAY
13662: PUSH
13663: LD_INT 1
13665: PUSH
13666: LD_INT 2
13668: PUSH
13669: LD_INT 7
13671: PUSH
13672: LD_INT 9
13674: PUSH
13675: LD_INT 10
13677: PUSH
13678: LD_INT 11
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: IN
13689: NOT
13690: OR
13691: IFFALSE 13697
// exit ;
13693: POP
13694: POP
13695: GO 13795
// end ;
13697: GO 13368
13699: POP
13700: POP
// side := GetSide ( depot ) ;
13701: LD_ADDR_VAR 0 9
13705: PUSH
13706: LD_VAR 0 1
13710: PPUSH
13711: CALL_OW 255
13715: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
13716: LD_VAR 0 9
13720: PPUSH
13721: LD_VAR 0 3
13725: PPUSH
13726: LD_VAR 0 4
13730: PPUSH
13731: LD_INT 20
13733: PPUSH
13734: CALL 6116 0 4
13738: PUSH
13739: LD_INT 4
13741: ARRAY
13742: IFFALSE 13746
// exit ;
13744: GO 13795
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
13746: LD_VAR 0 2
13750: PUSH
13751: LD_INT 29
13753: PUSH
13754: LD_INT 30
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: IN
13761: PUSH
13762: LD_VAR 0 3
13766: PPUSH
13767: LD_VAR 0 4
13771: PPUSH
13772: LD_VAR 0 9
13776: PPUSH
13777: CALL_OW 440
13781: NOT
13782: AND
13783: IFFALSE 13787
// exit ;
13785: GO 13795
// result := true ;
13787: LD_ADDR_VAR 0 6
13791: PUSH
13792: LD_INT 1
13794: ST_TO_ADDR
// end ;
13795: LD_VAR 0 6
13799: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
13800: LD_INT 0
13802: PPUSH
13803: PPUSH
13804: PPUSH
13805: PPUSH
13806: PPUSH
13807: PPUSH
13808: PPUSH
13809: PPUSH
13810: PPUSH
13811: PPUSH
13812: PPUSH
13813: PPUSH
13814: PPUSH
13815: PPUSH
13816: PPUSH
13817: PPUSH
13818: PPUSH
13819: PPUSH
13820: PPUSH
13821: PPUSH
13822: PPUSH
13823: PPUSH
13824: PPUSH
13825: PPUSH
13826: PPUSH
13827: PPUSH
13828: PPUSH
13829: PPUSH
13830: PPUSH
13831: PPUSH
13832: PPUSH
13833: PPUSH
13834: PPUSH
13835: PPUSH
13836: PPUSH
13837: PPUSH
13838: PPUSH
13839: PPUSH
13840: PPUSH
13841: PPUSH
13842: PPUSH
13843: PPUSH
13844: PPUSH
13845: PPUSH
13846: PPUSH
13847: PPUSH
13848: PPUSH
13849: PPUSH
13850: PPUSH
13851: PPUSH
13852: PPUSH
13853: PPUSH
13854: PPUSH
13855: PPUSH
13856: PPUSH
13857: PPUSH
13858: PPUSH
13859: PPUSH
// result = [ ] ;
13860: LD_ADDR_VAR 0 7
13864: PUSH
13865: EMPTY
13866: ST_TO_ADDR
// temp_list = [ ] ;
13867: LD_ADDR_VAR 0 9
13871: PUSH
13872: EMPTY
13873: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
13874: LD_VAR 0 4
13878: PUSH
13879: LD_INT 0
13881: PUSH
13882: LD_INT 1
13884: PUSH
13885: LD_INT 2
13887: PUSH
13888: LD_INT 3
13890: PUSH
13891: LD_INT 4
13893: PUSH
13894: LD_INT 5
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: IN
13905: NOT
13906: PUSH
13907: LD_VAR 0 1
13911: PUSH
13912: LD_INT 0
13914: PUSH
13915: LD_INT 1
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: IN
13922: PUSH
13923: LD_VAR 0 5
13927: PUSH
13928: LD_INT 1
13930: PUSH
13931: LD_INT 2
13933: PUSH
13934: LD_INT 3
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: IN
13942: NOT
13943: AND
13944: OR
13945: IFFALSE 13949
// exit ;
13947: GO 32340
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
13949: LD_VAR 0 1
13953: PUSH
13954: LD_INT 6
13956: PUSH
13957: LD_INT 7
13959: PUSH
13960: LD_INT 8
13962: PUSH
13963: LD_INT 13
13965: PUSH
13966: LD_INT 12
13968: PUSH
13969: LD_INT 15
13971: PUSH
13972: LD_INT 11
13974: PUSH
13975: LD_INT 14
13977: PUSH
13978: LD_INT 10
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: IN
13992: IFFALSE 14002
// btype = b_lab ;
13994: LD_ADDR_VAR 0 1
13998: PUSH
13999: LD_INT 6
14001: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14002: LD_VAR 0 6
14006: PUSH
14007: LD_INT 0
14009: PUSH
14010: LD_INT 1
14012: PUSH
14013: LD_INT 2
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: IN
14021: NOT
14022: PUSH
14023: LD_VAR 0 1
14027: PUSH
14028: LD_INT 0
14030: PUSH
14031: LD_INT 1
14033: PUSH
14034: LD_INT 2
14036: PUSH
14037: LD_INT 3
14039: PUSH
14040: LD_INT 6
14042: PUSH
14043: LD_INT 36
14045: PUSH
14046: LD_INT 4
14048: PUSH
14049: LD_INT 5
14051: PUSH
14052: LD_INT 31
14054: PUSH
14055: LD_INT 32
14057: PUSH
14058: LD_INT 33
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: IN
14074: NOT
14075: PUSH
14076: LD_VAR 0 6
14080: PUSH
14081: LD_INT 1
14083: EQUAL
14084: AND
14085: OR
14086: PUSH
14087: LD_VAR 0 1
14091: PUSH
14092: LD_INT 2
14094: PUSH
14095: LD_INT 3
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: IN
14102: NOT
14103: PUSH
14104: LD_VAR 0 6
14108: PUSH
14109: LD_INT 2
14111: EQUAL
14112: AND
14113: OR
14114: IFFALSE 14124
// mode = 0 ;
14116: LD_ADDR_VAR 0 6
14120: PUSH
14121: LD_INT 0
14123: ST_TO_ADDR
// case mode of 0 :
14124: LD_VAR 0 6
14128: PUSH
14129: LD_INT 0
14131: DOUBLE
14132: EQUAL
14133: IFTRUE 14137
14135: GO 25590
14137: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14138: LD_ADDR_VAR 0 11
14142: PUSH
14143: LD_INT 0
14145: PUSH
14146: LD_INT 0
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: PUSH
14153: LD_INT 0
14155: PUSH
14156: LD_INT 1
14158: NEG
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: LD_INT 1
14166: PUSH
14167: LD_INT 0
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 1
14176: PUSH
14177: LD_INT 1
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: LD_INT 0
14186: PUSH
14187: LD_INT 1
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PUSH
14194: LD_INT 1
14196: NEG
14197: PUSH
14198: LD_INT 0
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 1
14207: NEG
14208: PUSH
14209: LD_INT 1
14211: NEG
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 1
14219: NEG
14220: PUSH
14221: LD_INT 2
14223: NEG
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 0
14231: PUSH
14232: LD_INT 2
14234: NEG
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PUSH
14240: LD_INT 1
14242: PUSH
14243: LD_INT 1
14245: NEG
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PUSH
14251: LD_INT 1
14253: PUSH
14254: LD_INT 2
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PUSH
14261: LD_INT 0
14263: PUSH
14264: LD_INT 2
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: PUSH
14271: LD_INT 1
14273: NEG
14274: PUSH
14275: LD_INT 1
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: LD_INT 1
14284: PUSH
14285: LD_INT 3
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 0
14294: PUSH
14295: LD_INT 3
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 1
14304: NEG
14305: PUSH
14306: LD_INT 2
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
14331: LD_ADDR_VAR 0 12
14335: PUSH
14336: LD_INT 0
14338: PUSH
14339: LD_INT 0
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: LD_INT 0
14348: PUSH
14349: LD_INT 1
14351: NEG
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 1
14359: PUSH
14360: LD_INT 0
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: LD_INT 1
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: LD_INT 0
14379: PUSH
14380: LD_INT 1
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PUSH
14387: LD_INT 1
14389: NEG
14390: PUSH
14391: LD_INT 0
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 1
14400: NEG
14401: PUSH
14402: LD_INT 1
14404: NEG
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: LD_INT 1
14412: PUSH
14413: LD_INT 1
14415: NEG
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: LD_INT 2
14423: PUSH
14424: LD_INT 0
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: LD_INT 2
14433: PUSH
14434: LD_INT 1
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PUSH
14441: LD_INT 1
14443: NEG
14444: PUSH
14445: LD_INT 1
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: LD_INT 2
14454: NEG
14455: PUSH
14456: LD_INT 0
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: LD_INT 2
14465: NEG
14466: PUSH
14467: LD_INT 1
14469: NEG
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: LD_INT 2
14477: NEG
14478: PUSH
14479: LD_INT 1
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: PUSH
14486: LD_INT 3
14488: NEG
14489: PUSH
14490: LD_INT 0
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 3
14499: NEG
14500: PUSH
14501: LD_INT 1
14503: NEG
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
14527: LD_ADDR_VAR 0 13
14531: PUSH
14532: LD_INT 0
14534: PUSH
14535: LD_INT 0
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 0
14544: PUSH
14545: LD_INT 1
14547: NEG
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: PUSH
14553: LD_INT 1
14555: PUSH
14556: LD_INT 0
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PUSH
14563: LD_INT 1
14565: PUSH
14566: LD_INT 1
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PUSH
14573: LD_INT 0
14575: PUSH
14576: LD_INT 1
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 1
14585: NEG
14586: PUSH
14587: LD_INT 0
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PUSH
14594: LD_INT 1
14596: NEG
14597: PUSH
14598: LD_INT 1
14600: NEG
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 1
14608: NEG
14609: PUSH
14610: LD_INT 2
14612: NEG
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: LD_INT 2
14620: PUSH
14621: LD_INT 1
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PUSH
14628: LD_INT 2
14630: PUSH
14631: LD_INT 2
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: LD_INT 1
14640: PUSH
14641: LD_INT 2
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: LD_INT 2
14650: NEG
14651: PUSH
14652: LD_INT 1
14654: NEG
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: PUSH
14660: LD_INT 2
14662: NEG
14663: PUSH
14664: LD_INT 2
14666: NEG
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: LD_INT 2
14674: NEG
14675: PUSH
14676: LD_INT 3
14678: NEG
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 3
14686: NEG
14687: PUSH
14688: LD_INT 2
14690: NEG
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 3
14698: NEG
14699: PUSH
14700: LD_INT 3
14702: NEG
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
14726: LD_ADDR_VAR 0 14
14730: PUSH
14731: LD_INT 0
14733: PUSH
14734: LD_INT 0
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 0
14743: PUSH
14744: LD_INT 1
14746: NEG
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 1
14754: PUSH
14755: LD_INT 0
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PUSH
14762: LD_INT 1
14764: PUSH
14765: LD_INT 1
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: LD_INT 0
14774: PUSH
14775: LD_INT 1
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PUSH
14782: LD_INT 1
14784: NEG
14785: PUSH
14786: LD_INT 0
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: PUSH
14793: LD_INT 1
14795: NEG
14796: PUSH
14797: LD_INT 1
14799: NEG
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: LD_INT 1
14807: NEG
14808: PUSH
14809: LD_INT 2
14811: NEG
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 0
14819: PUSH
14820: LD_INT 2
14822: NEG
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: PUSH
14828: LD_INT 1
14830: PUSH
14831: LD_INT 1
14833: NEG
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 1
14841: PUSH
14842: LD_INT 2
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 0
14851: PUSH
14852: LD_INT 2
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 1
14861: NEG
14862: PUSH
14863: LD_INT 1
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 1
14872: NEG
14873: PUSH
14874: LD_INT 3
14876: NEG
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 0
14884: PUSH
14885: LD_INT 3
14887: NEG
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: LD_INT 1
14895: PUSH
14896: LD_INT 2
14898: NEG
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
14922: LD_ADDR_VAR 0 15
14926: PUSH
14927: LD_INT 0
14929: PUSH
14930: LD_INT 0
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 0
14939: PUSH
14940: LD_INT 1
14942: NEG
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: LD_INT 1
14950: PUSH
14951: LD_INT 0
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 1
14960: PUSH
14961: LD_INT 1
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 0
14970: PUSH
14971: LD_INT 1
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 1
14980: NEG
14981: PUSH
14982: LD_INT 0
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: LD_INT 1
14991: NEG
14992: PUSH
14993: LD_INT 1
14995: NEG
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 1
15003: PUSH
15004: LD_INT 1
15006: NEG
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 2
15014: PUSH
15015: LD_INT 0
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: LD_INT 2
15024: PUSH
15025: LD_INT 1
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 1
15034: NEG
15035: PUSH
15036: LD_INT 1
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 2
15045: NEG
15046: PUSH
15047: LD_INT 0
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: LD_INT 2
15056: NEG
15057: PUSH
15058: LD_INT 1
15060: NEG
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: LD_INT 2
15068: PUSH
15069: LD_INT 1
15071: NEG
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: LD_INT 3
15079: PUSH
15080: LD_INT 0
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 3
15089: PUSH
15090: LD_INT 1
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15115: LD_ADDR_VAR 0 16
15119: PUSH
15120: LD_INT 0
15122: PUSH
15123: LD_INT 0
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: LD_INT 0
15132: PUSH
15133: LD_INT 1
15135: NEG
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: LD_INT 1
15143: PUSH
15144: LD_INT 0
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: LD_INT 1
15153: PUSH
15154: LD_INT 1
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: LD_INT 0
15163: PUSH
15164: LD_INT 1
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: LD_INT 1
15173: NEG
15174: PUSH
15175: LD_INT 0
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: LD_INT 1
15184: NEG
15185: PUSH
15186: LD_INT 1
15188: NEG
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 1
15196: NEG
15197: PUSH
15198: LD_INT 2
15200: NEG
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PUSH
15206: LD_INT 2
15208: PUSH
15209: LD_INT 1
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: LD_INT 2
15218: PUSH
15219: LD_INT 2
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PUSH
15226: LD_INT 1
15228: PUSH
15229: LD_INT 2
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: LD_INT 2
15238: NEG
15239: PUSH
15240: LD_INT 1
15242: NEG
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_INT 2
15250: NEG
15251: PUSH
15252: LD_INT 2
15254: NEG
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: LD_INT 3
15262: PUSH
15263: LD_INT 2
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: LD_INT 3
15272: PUSH
15273: LD_INT 3
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: LD_INT 2
15282: PUSH
15283: LD_INT 3
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15308: LD_ADDR_VAR 0 17
15312: PUSH
15313: LD_INT 0
15315: PUSH
15316: LD_INT 0
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 0
15325: PUSH
15326: LD_INT 1
15328: NEG
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: LD_INT 1
15336: PUSH
15337: LD_INT 0
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 1
15346: PUSH
15347: LD_INT 1
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PUSH
15354: LD_INT 0
15356: PUSH
15357: LD_INT 1
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PUSH
15364: LD_INT 1
15366: NEG
15367: PUSH
15368: LD_INT 0
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PUSH
15375: LD_INT 1
15377: NEG
15378: PUSH
15379: LD_INT 1
15381: NEG
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: LD_INT 1
15389: NEG
15390: PUSH
15391: LD_INT 2
15393: NEG
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: LD_INT 0
15401: PUSH
15402: LD_INT 2
15404: NEG
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: LD_INT 1
15412: PUSH
15413: LD_INT 1
15415: NEG
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 2
15423: PUSH
15424: LD_INT 0
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 2
15433: PUSH
15434: LD_INT 1
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 2
15443: PUSH
15444: LD_INT 2
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: LD_INT 1
15453: PUSH
15454: LD_INT 2
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: LD_INT 0
15463: PUSH
15464: LD_INT 2
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 1
15473: NEG
15474: PUSH
15475: LD_INT 1
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 2
15484: NEG
15485: PUSH
15486: LD_INT 0
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: PUSH
15493: LD_INT 2
15495: NEG
15496: PUSH
15497: LD_INT 1
15499: NEG
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: LD_INT 2
15507: NEG
15508: PUSH
15509: LD_INT 2
15511: NEG
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15538: LD_ADDR_VAR 0 18
15542: PUSH
15543: LD_INT 0
15545: PUSH
15546: LD_INT 0
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: LD_INT 0
15555: PUSH
15556: LD_INT 1
15558: NEG
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 1
15566: PUSH
15567: LD_INT 0
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: LD_INT 1
15576: PUSH
15577: LD_INT 1
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: LD_INT 0
15586: PUSH
15587: LD_INT 1
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 1
15596: NEG
15597: PUSH
15598: LD_INT 0
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 1
15607: NEG
15608: PUSH
15609: LD_INT 1
15611: NEG
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: LD_INT 1
15619: NEG
15620: PUSH
15621: LD_INT 2
15623: NEG
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 0
15631: PUSH
15632: LD_INT 2
15634: NEG
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 1
15642: PUSH
15643: LD_INT 1
15645: NEG
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 2
15653: PUSH
15654: LD_INT 0
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 2
15663: PUSH
15664: LD_INT 1
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: LD_INT 2
15673: PUSH
15674: LD_INT 2
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 1
15683: PUSH
15684: LD_INT 2
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 0
15693: PUSH
15694: LD_INT 2
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 1
15703: NEG
15704: PUSH
15705: LD_INT 1
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PUSH
15712: LD_INT 2
15714: NEG
15715: PUSH
15716: LD_INT 0
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: LD_INT 2
15725: NEG
15726: PUSH
15727: LD_INT 1
15729: NEG
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 2
15737: NEG
15738: PUSH
15739: LD_INT 2
15741: NEG
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15768: LD_ADDR_VAR 0 19
15772: PUSH
15773: LD_INT 0
15775: PUSH
15776: LD_INT 0
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 0
15785: PUSH
15786: LD_INT 1
15788: NEG
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: LD_INT 1
15796: PUSH
15797: LD_INT 0
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: LD_INT 1
15806: PUSH
15807: LD_INT 1
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 0
15816: PUSH
15817: LD_INT 1
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 1
15826: NEG
15827: PUSH
15828: LD_INT 0
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PUSH
15835: LD_INT 1
15837: NEG
15838: PUSH
15839: LD_INT 1
15841: NEG
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 1
15849: NEG
15850: PUSH
15851: LD_INT 2
15853: NEG
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 0
15861: PUSH
15862: LD_INT 2
15864: NEG
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 1
15872: PUSH
15873: LD_INT 1
15875: NEG
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 2
15883: PUSH
15884: LD_INT 0
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 2
15893: PUSH
15894: LD_INT 1
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 2
15903: PUSH
15904: LD_INT 2
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: PUSH
15911: LD_INT 1
15913: PUSH
15914: LD_INT 2
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PUSH
15921: LD_INT 0
15923: PUSH
15924: LD_INT 2
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: LD_INT 1
15933: NEG
15934: PUSH
15935: LD_INT 1
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 2
15944: NEG
15945: PUSH
15946: LD_INT 0
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 2
15955: NEG
15956: PUSH
15957: LD_INT 1
15959: NEG
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 2
15967: NEG
15968: PUSH
15969: LD_INT 2
15971: NEG
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15998: LD_ADDR_VAR 0 20
16002: PUSH
16003: LD_INT 0
16005: PUSH
16006: LD_INT 0
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 0
16015: PUSH
16016: LD_INT 1
16018: NEG
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 1
16026: PUSH
16027: LD_INT 0
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 1
16036: PUSH
16037: LD_INT 1
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 0
16046: PUSH
16047: LD_INT 1
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: LD_INT 1
16056: NEG
16057: PUSH
16058: LD_INT 0
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 1
16067: NEG
16068: PUSH
16069: LD_INT 1
16071: NEG
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 1
16079: NEG
16080: PUSH
16081: LD_INT 2
16083: NEG
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 0
16091: PUSH
16092: LD_INT 2
16094: NEG
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 1
16102: PUSH
16103: LD_INT 1
16105: NEG
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 2
16113: PUSH
16114: LD_INT 0
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: LD_INT 2
16123: PUSH
16124: LD_INT 1
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: PUSH
16131: LD_INT 2
16133: PUSH
16134: LD_INT 2
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PUSH
16141: LD_INT 1
16143: PUSH
16144: LD_INT 2
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: LD_INT 0
16153: PUSH
16154: LD_INT 2
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: LD_INT 1
16163: NEG
16164: PUSH
16165: LD_INT 1
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: LD_INT 2
16174: NEG
16175: PUSH
16176: LD_INT 0
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: LD_INT 2
16185: NEG
16186: PUSH
16187: LD_INT 1
16189: NEG
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 2
16197: NEG
16198: PUSH
16199: LD_INT 2
16201: NEG
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16228: LD_ADDR_VAR 0 21
16232: PUSH
16233: LD_INT 0
16235: PUSH
16236: LD_INT 0
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 0
16245: PUSH
16246: LD_INT 1
16248: NEG
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 1
16256: PUSH
16257: LD_INT 0
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PUSH
16264: LD_INT 1
16266: PUSH
16267: LD_INT 1
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: LD_INT 0
16276: PUSH
16277: LD_INT 1
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 1
16286: NEG
16287: PUSH
16288: LD_INT 0
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 1
16297: NEG
16298: PUSH
16299: LD_INT 1
16301: NEG
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 1
16309: NEG
16310: PUSH
16311: LD_INT 2
16313: NEG
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 0
16321: PUSH
16322: LD_INT 2
16324: NEG
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 1
16332: PUSH
16333: LD_INT 1
16335: NEG
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: LD_INT 2
16343: PUSH
16344: LD_INT 0
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 2
16353: PUSH
16354: LD_INT 1
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PUSH
16361: LD_INT 2
16363: PUSH
16364: LD_INT 2
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: PUSH
16371: LD_INT 1
16373: PUSH
16374: LD_INT 2
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PUSH
16381: LD_INT 0
16383: PUSH
16384: LD_INT 2
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: LD_INT 1
16393: NEG
16394: PUSH
16395: LD_INT 1
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PUSH
16402: LD_INT 2
16404: NEG
16405: PUSH
16406: LD_INT 0
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 2
16415: NEG
16416: PUSH
16417: LD_INT 1
16419: NEG
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 2
16427: NEG
16428: PUSH
16429: LD_INT 2
16431: NEG
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16458: LD_ADDR_VAR 0 22
16462: PUSH
16463: LD_INT 0
16465: PUSH
16466: LD_INT 0
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: LD_INT 0
16475: PUSH
16476: LD_INT 1
16478: NEG
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 1
16486: PUSH
16487: LD_INT 0
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 1
16496: PUSH
16497: LD_INT 1
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: LD_INT 0
16506: PUSH
16507: LD_INT 1
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PUSH
16514: LD_INT 1
16516: NEG
16517: PUSH
16518: LD_INT 0
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 1
16527: NEG
16528: PUSH
16529: LD_INT 1
16531: NEG
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 1
16539: NEG
16540: PUSH
16541: LD_INT 2
16543: NEG
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PUSH
16549: LD_INT 0
16551: PUSH
16552: LD_INT 2
16554: NEG
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 1
16562: PUSH
16563: LD_INT 1
16565: NEG
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 2
16573: PUSH
16574: LD_INT 0
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 2
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 2
16593: PUSH
16594: LD_INT 2
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: LD_INT 1
16603: PUSH
16604: LD_INT 2
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: LD_INT 0
16613: PUSH
16614: LD_INT 2
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 1
16623: NEG
16624: PUSH
16625: LD_INT 1
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 2
16634: NEG
16635: PUSH
16636: LD_INT 0
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 2
16645: NEG
16646: PUSH
16647: LD_INT 1
16649: NEG
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 2
16657: NEG
16658: PUSH
16659: LD_INT 2
16661: NEG
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
16688: LD_ADDR_VAR 0 23
16692: PUSH
16693: LD_INT 0
16695: PUSH
16696: LD_INT 0
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: LD_INT 0
16705: PUSH
16706: LD_INT 1
16708: NEG
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 1
16716: PUSH
16717: LD_INT 0
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 1
16726: PUSH
16727: LD_INT 1
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: LD_INT 0
16736: PUSH
16737: LD_INT 1
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PUSH
16744: LD_INT 1
16746: NEG
16747: PUSH
16748: LD_INT 0
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 1
16757: NEG
16758: PUSH
16759: LD_INT 1
16761: NEG
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 1
16769: NEG
16770: PUSH
16771: LD_INT 2
16773: NEG
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PUSH
16779: LD_INT 0
16781: PUSH
16782: LD_INT 2
16784: NEG
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 1
16792: PUSH
16793: LD_INT 1
16795: NEG
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 2
16803: PUSH
16804: LD_INT 0
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 2
16813: PUSH
16814: LD_INT 1
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 2
16823: PUSH
16824: LD_INT 2
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 1
16833: PUSH
16834: LD_INT 2
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 0
16843: PUSH
16844: LD_INT 2
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: LD_INT 1
16853: NEG
16854: PUSH
16855: LD_INT 1
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 2
16864: NEG
16865: PUSH
16866: LD_INT 0
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: LD_INT 2
16875: NEG
16876: PUSH
16877: LD_INT 1
16879: NEG
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: PUSH
16885: LD_INT 2
16887: NEG
16888: PUSH
16889: LD_INT 2
16891: NEG
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 2
16899: NEG
16900: PUSH
16901: LD_INT 3
16903: NEG
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 1
16911: NEG
16912: PUSH
16913: LD_INT 3
16915: NEG
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 1
16923: PUSH
16924: LD_INT 2
16926: NEG
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 2
16934: PUSH
16935: LD_INT 1
16937: NEG
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
16968: LD_ADDR_VAR 0 24
16972: PUSH
16973: LD_INT 0
16975: PUSH
16976: LD_INT 0
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: PUSH
16983: LD_INT 0
16985: PUSH
16986: LD_INT 1
16988: NEG
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 1
16996: PUSH
16997: LD_INT 0
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 1
17006: PUSH
17007: LD_INT 1
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 0
17016: PUSH
17017: LD_INT 1
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 1
17026: NEG
17027: PUSH
17028: LD_INT 0
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PUSH
17035: LD_INT 1
17037: NEG
17038: PUSH
17039: LD_INT 1
17041: NEG
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 1
17049: NEG
17050: PUSH
17051: LD_INT 2
17053: NEG
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: PUSH
17059: LD_INT 0
17061: PUSH
17062: LD_INT 2
17064: NEG
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: LD_INT 1
17072: PUSH
17073: LD_INT 1
17075: NEG
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 2
17083: PUSH
17084: LD_INT 0
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: LD_INT 2
17093: PUSH
17094: LD_INT 1
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 2
17103: PUSH
17104: LD_INT 2
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 1
17113: PUSH
17114: LD_INT 2
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 0
17123: PUSH
17124: LD_INT 2
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: LD_INT 1
17133: NEG
17134: PUSH
17135: LD_INT 1
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: LD_INT 2
17144: NEG
17145: PUSH
17146: LD_INT 0
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: LD_INT 2
17155: NEG
17156: PUSH
17157: LD_INT 1
17159: NEG
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 2
17167: NEG
17168: PUSH
17169: LD_INT 2
17171: NEG
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 1
17179: PUSH
17180: LD_INT 2
17182: NEG
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 2
17190: PUSH
17191: LD_INT 1
17193: NEG
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 3
17201: PUSH
17202: LD_INT 1
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 3
17211: PUSH
17212: LD_INT 2
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
17244: LD_ADDR_VAR 0 25
17248: PUSH
17249: LD_INT 0
17251: PUSH
17252: LD_INT 0
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 0
17261: PUSH
17262: LD_INT 1
17264: NEG
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PUSH
17270: LD_INT 1
17272: PUSH
17273: LD_INT 0
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: LD_INT 1
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 0
17292: PUSH
17293: LD_INT 1
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: LD_INT 1
17302: NEG
17303: PUSH
17304: LD_INT 0
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 1
17313: NEG
17314: PUSH
17315: LD_INT 1
17317: NEG
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 1
17325: NEG
17326: PUSH
17327: LD_INT 2
17329: NEG
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 0
17337: PUSH
17338: LD_INT 2
17340: NEG
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: LD_INT 1
17348: PUSH
17349: LD_INT 1
17351: NEG
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 2
17359: PUSH
17360: LD_INT 0
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 2
17369: PUSH
17370: LD_INT 1
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 2
17379: PUSH
17380: LD_INT 2
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 1
17389: PUSH
17390: LD_INT 2
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 0
17399: PUSH
17400: LD_INT 2
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 1
17409: NEG
17410: PUSH
17411: LD_INT 1
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: LD_INT 2
17420: NEG
17421: PUSH
17422: LD_INT 0
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 2
17431: NEG
17432: PUSH
17433: LD_INT 1
17435: NEG
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 2
17443: NEG
17444: PUSH
17445: LD_INT 2
17447: NEG
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 3
17455: PUSH
17456: LD_INT 1
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 3
17465: PUSH
17466: LD_INT 2
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 2
17475: PUSH
17476: LD_INT 3
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 1
17485: PUSH
17486: LD_INT 3
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
17518: LD_ADDR_VAR 0 26
17522: PUSH
17523: LD_INT 0
17525: PUSH
17526: LD_INT 0
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 0
17535: PUSH
17536: LD_INT 1
17538: NEG
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 1
17546: PUSH
17547: LD_INT 0
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 1
17556: PUSH
17557: LD_INT 1
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 0
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 1
17576: NEG
17577: PUSH
17578: LD_INT 0
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 1
17587: NEG
17588: PUSH
17589: LD_INT 1
17591: NEG
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 1
17599: NEG
17600: PUSH
17601: LD_INT 2
17603: NEG
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 0
17611: PUSH
17612: LD_INT 2
17614: NEG
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 1
17622: PUSH
17623: LD_INT 1
17625: NEG
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: LD_INT 2
17633: PUSH
17634: LD_INT 0
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: LD_INT 2
17643: PUSH
17644: LD_INT 1
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 2
17653: PUSH
17654: LD_INT 2
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 1
17663: PUSH
17664: LD_INT 2
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 0
17673: PUSH
17674: LD_INT 2
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 1
17683: NEG
17684: PUSH
17685: LD_INT 1
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 2
17694: NEG
17695: PUSH
17696: LD_INT 0
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 2
17705: NEG
17706: PUSH
17707: LD_INT 1
17709: NEG
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 2
17717: NEG
17718: PUSH
17719: LD_INT 2
17721: NEG
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 2
17729: PUSH
17730: LD_INT 3
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 1
17739: PUSH
17740: LD_INT 3
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 1
17749: NEG
17750: PUSH
17751: LD_INT 2
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 2
17760: NEG
17761: PUSH
17762: LD_INT 1
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
17794: LD_ADDR_VAR 0 27
17798: PUSH
17799: LD_INT 0
17801: PUSH
17802: LD_INT 0
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 0
17811: PUSH
17812: LD_INT 1
17814: NEG
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 1
17822: PUSH
17823: LD_INT 0
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 1
17832: PUSH
17833: LD_INT 1
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 0
17842: PUSH
17843: LD_INT 1
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 1
17852: NEG
17853: PUSH
17854: LD_INT 0
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 1
17863: NEG
17864: PUSH
17865: LD_INT 1
17867: NEG
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 1
17875: NEG
17876: PUSH
17877: LD_INT 2
17879: NEG
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 0
17887: PUSH
17888: LD_INT 2
17890: NEG
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 1
17898: PUSH
17899: LD_INT 1
17901: NEG
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 2
17909: PUSH
17910: LD_INT 0
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 2
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 2
17929: PUSH
17930: LD_INT 2
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 1
17939: PUSH
17940: LD_INT 2
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 0
17949: PUSH
17950: LD_INT 2
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 1
17959: NEG
17960: PUSH
17961: LD_INT 1
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 2
17970: NEG
17971: PUSH
17972: LD_INT 0
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 2
17981: NEG
17982: PUSH
17983: LD_INT 1
17985: NEG
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 2
17993: NEG
17994: PUSH
17995: LD_INT 2
17997: NEG
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 1
18005: NEG
18006: PUSH
18007: LD_INT 2
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 2
18016: NEG
18017: PUSH
18018: LD_INT 1
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 3
18027: NEG
18028: PUSH
18029: LD_INT 1
18031: NEG
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 3
18039: NEG
18040: PUSH
18041: LD_INT 2
18043: NEG
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18074: LD_ADDR_VAR 0 28
18078: PUSH
18079: LD_INT 0
18081: PUSH
18082: LD_INT 0
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 0
18091: PUSH
18092: LD_INT 1
18094: NEG
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: LD_INT 1
18102: PUSH
18103: LD_INT 0
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 1
18112: PUSH
18113: LD_INT 1
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 0
18122: PUSH
18123: LD_INT 1
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 1
18132: NEG
18133: PUSH
18134: LD_INT 0
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 1
18143: NEG
18144: PUSH
18145: LD_INT 1
18147: NEG
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 1
18155: NEG
18156: PUSH
18157: LD_INT 2
18159: NEG
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: LD_INT 2
18170: NEG
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 1
18178: PUSH
18179: LD_INT 1
18181: NEG
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 2
18189: PUSH
18190: LD_INT 0
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 2
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 2
18209: PUSH
18210: LD_INT 2
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: LD_INT 2
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 0
18229: PUSH
18230: LD_INT 2
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 1
18239: NEG
18240: PUSH
18241: LD_INT 1
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 2
18250: NEG
18251: PUSH
18252: LD_INT 0
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 2
18261: NEG
18262: PUSH
18263: LD_INT 1
18265: NEG
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 2
18273: NEG
18274: PUSH
18275: LD_INT 2
18277: NEG
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 2
18285: NEG
18286: PUSH
18287: LD_INT 3
18289: NEG
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 1
18297: NEG
18298: PUSH
18299: LD_INT 3
18301: NEG
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: LD_INT 3
18309: NEG
18310: PUSH
18311: LD_INT 1
18313: NEG
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 3
18321: NEG
18322: PUSH
18323: LD_INT 2
18325: NEG
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18356: LD_ADDR_VAR 0 29
18360: PUSH
18361: LD_INT 0
18363: PUSH
18364: LD_INT 0
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 0
18373: PUSH
18374: LD_INT 1
18376: NEG
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: LD_INT 0
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 1
18394: PUSH
18395: LD_INT 1
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 0
18404: PUSH
18405: LD_INT 1
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 1
18414: NEG
18415: PUSH
18416: LD_INT 0
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 1
18425: NEG
18426: PUSH
18427: LD_INT 1
18429: NEG
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 1
18437: NEG
18438: PUSH
18439: LD_INT 2
18441: NEG
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 0
18449: PUSH
18450: LD_INT 2
18452: NEG
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 1
18460: PUSH
18461: LD_INT 1
18463: NEG
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 2
18471: PUSH
18472: LD_INT 0
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: LD_INT 2
18481: PUSH
18482: LD_INT 1
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 1
18491: PUSH
18492: LD_INT 2
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 0
18501: PUSH
18502: LD_INT 2
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 1
18511: NEG
18512: PUSH
18513: LD_INT 1
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 2
18522: NEG
18523: PUSH
18524: LD_INT 1
18526: NEG
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 2
18534: NEG
18535: PUSH
18536: LD_INT 2
18538: NEG
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 2
18546: NEG
18547: PUSH
18548: LD_INT 3
18550: NEG
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 2
18558: PUSH
18559: LD_INT 1
18561: NEG
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 3
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: LD_INT 3
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 1
18589: NEG
18590: PUSH
18591: LD_INT 2
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 3
18600: NEG
18601: PUSH
18602: LD_INT 2
18604: NEG
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
18635: LD_ADDR_VAR 0 30
18639: PUSH
18640: LD_INT 0
18642: PUSH
18643: LD_INT 0
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 0
18652: PUSH
18653: LD_INT 1
18655: NEG
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 1
18663: PUSH
18664: LD_INT 0
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 1
18673: PUSH
18674: LD_INT 1
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 0
18683: PUSH
18684: LD_INT 1
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 1
18693: NEG
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 1
18704: NEG
18705: PUSH
18706: LD_INT 1
18708: NEG
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 1
18716: NEG
18717: PUSH
18718: LD_INT 2
18720: NEG
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 0
18728: PUSH
18729: LD_INT 2
18731: NEG
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: LD_INT 1
18742: NEG
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 2
18750: PUSH
18751: LD_INT 0
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 2
18760: PUSH
18761: LD_INT 1
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 2
18770: PUSH
18771: LD_INT 2
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 1
18780: PUSH
18781: LD_INT 2
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 1
18790: NEG
18791: PUSH
18792: LD_INT 1
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 2
18801: NEG
18802: PUSH
18803: LD_INT 0
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 2
18812: NEG
18813: PUSH
18814: LD_INT 1
18816: NEG
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: LD_INT 1
18824: NEG
18825: PUSH
18826: LD_INT 3
18828: NEG
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 1
18836: PUSH
18837: LD_INT 2
18839: NEG
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 3
18847: PUSH
18848: LD_INT 2
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 2
18857: PUSH
18858: LD_INT 3
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 2
18867: NEG
18868: PUSH
18869: LD_INT 1
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 3
18878: NEG
18879: PUSH
18880: LD_INT 1
18882: NEG
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18913: LD_ADDR_VAR 0 31
18917: PUSH
18918: LD_INT 0
18920: PUSH
18921: LD_INT 0
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 0
18930: PUSH
18931: LD_INT 1
18933: NEG
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 1
18941: PUSH
18942: LD_INT 0
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 1
18951: PUSH
18952: LD_INT 1
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 0
18961: PUSH
18962: LD_INT 1
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 1
18971: NEG
18972: PUSH
18973: LD_INT 0
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 1
18982: NEG
18983: PUSH
18984: LD_INT 1
18986: NEG
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 1
18994: NEG
18995: PUSH
18996: LD_INT 2
18998: NEG
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: LD_INT 1
19009: NEG
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 2
19017: PUSH
19018: LD_INT 0
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 2
19027: PUSH
19028: LD_INT 1
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 2
19037: PUSH
19038: LD_INT 2
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 0
19057: PUSH
19058: LD_INT 2
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 1
19067: NEG
19068: PUSH
19069: LD_INT 1
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 2
19078: NEG
19079: PUSH
19080: LD_INT 1
19082: NEG
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 2
19090: NEG
19091: PUSH
19092: LD_INT 2
19094: NEG
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 2
19102: NEG
19103: PUSH
19104: LD_INT 3
19106: NEG
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 2
19114: PUSH
19115: LD_INT 1
19117: NEG
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 3
19125: PUSH
19126: LD_INT 1
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: LD_INT 3
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 1
19145: NEG
19146: PUSH
19147: LD_INT 2
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 3
19156: NEG
19157: PUSH
19158: LD_INT 2
19160: NEG
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19191: LD_ADDR_VAR 0 32
19195: PUSH
19196: LD_INT 0
19198: PUSH
19199: LD_INT 0
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 0
19208: PUSH
19209: LD_INT 1
19211: NEG
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 1
19219: PUSH
19220: LD_INT 0
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 1
19229: PUSH
19230: LD_INT 1
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 0
19239: PUSH
19240: LD_INT 1
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 1
19249: NEG
19250: PUSH
19251: LD_INT 0
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 1
19260: NEG
19261: PUSH
19262: LD_INT 1
19264: NEG
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 1
19272: NEG
19273: PUSH
19274: LD_INT 2
19276: NEG
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 0
19284: PUSH
19285: LD_INT 2
19287: NEG
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 1
19295: PUSH
19296: LD_INT 1
19298: NEG
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 2
19306: PUSH
19307: LD_INT 1
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 2
19316: PUSH
19317: LD_INT 2
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 1
19326: PUSH
19327: LD_INT 2
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 0
19336: PUSH
19337: LD_INT 2
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 1
19346: NEG
19347: PUSH
19348: LD_INT 1
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 2
19357: NEG
19358: PUSH
19359: LD_INT 0
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 2
19368: NEG
19369: PUSH
19370: LD_INT 1
19372: NEG
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 1
19380: NEG
19381: PUSH
19382: LD_INT 3
19384: NEG
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 1
19392: PUSH
19393: LD_INT 2
19395: NEG
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 3
19403: PUSH
19404: LD_INT 2
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 2
19413: PUSH
19414: LD_INT 3
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 2
19423: NEG
19424: PUSH
19425: LD_INT 1
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: LD_INT 3
19434: NEG
19435: PUSH
19436: LD_INT 1
19438: NEG
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19469: LD_ADDR_VAR 0 33
19473: PUSH
19474: LD_INT 0
19476: PUSH
19477: LD_INT 0
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 0
19486: PUSH
19487: LD_INT 1
19489: NEG
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: LD_INT 0
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: LD_INT 1
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 1
19527: NEG
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 1
19538: NEG
19539: PUSH
19540: LD_INT 1
19542: NEG
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 1
19550: NEG
19551: PUSH
19552: LD_INT 2
19554: NEG
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: LD_INT 1
19565: NEG
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 2
19573: PUSH
19574: LD_INT 0
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 2
19583: PUSH
19584: LD_INT 1
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: LD_INT 2
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 0
19603: PUSH
19604: LD_INT 2
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 1
19613: NEG
19614: PUSH
19615: LD_INT 1
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 2
19624: NEG
19625: PUSH
19626: LD_INT 0
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 2
19635: NEG
19636: PUSH
19637: LD_INT 1
19639: NEG
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 2
19647: NEG
19648: PUSH
19649: LD_INT 2
19651: NEG
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 2
19659: NEG
19660: PUSH
19661: LD_INT 3
19663: NEG
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 2
19671: PUSH
19672: LD_INT 1
19674: NEG
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 3
19682: PUSH
19683: LD_INT 1
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 1
19692: PUSH
19693: LD_INT 3
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 1
19702: NEG
19703: PUSH
19704: LD_INT 2
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 3
19713: NEG
19714: PUSH
19715: LD_INT 2
19717: NEG
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19748: LD_ADDR_VAR 0 34
19752: PUSH
19753: LD_INT 0
19755: PUSH
19756: LD_INT 0
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: LD_INT 1
19768: NEG
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 1
19776: PUSH
19777: LD_INT 0
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 1
19786: PUSH
19787: LD_INT 1
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 0
19796: PUSH
19797: LD_INT 1
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 1
19806: NEG
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 1
19817: NEG
19818: PUSH
19819: LD_INT 1
19821: NEG
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 1
19829: NEG
19830: PUSH
19831: LD_INT 2
19833: NEG
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 0
19841: PUSH
19842: LD_INT 2
19844: NEG
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 1
19852: PUSH
19853: LD_INT 1
19855: NEG
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 2
19863: PUSH
19864: LD_INT 1
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: LD_INT 2
19873: PUSH
19874: LD_INT 2
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 1
19883: PUSH
19884: LD_INT 2
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 1
19893: NEG
19894: PUSH
19895: LD_INT 1
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 2
19904: NEG
19905: PUSH
19906: LD_INT 0
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 2
19915: NEG
19916: PUSH
19917: LD_INT 1
19919: NEG
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 2
19927: NEG
19928: PUSH
19929: LD_INT 2
19931: NEG
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 1
19939: NEG
19940: PUSH
19941: LD_INT 3
19943: NEG
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 1
19951: PUSH
19952: LD_INT 2
19954: NEG
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 3
19962: PUSH
19963: LD_INT 2
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 2
19972: PUSH
19973: LD_INT 3
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 2
19982: NEG
19983: PUSH
19984: LD_INT 1
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 3
19993: NEG
19994: PUSH
19995: LD_INT 1
19997: NEG
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20028: LD_ADDR_VAR 0 35
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: LD_INT 0
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 0
20045: PUSH
20046: LD_INT 1
20048: NEG
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 1
20056: PUSH
20057: LD_INT 0
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 1
20066: PUSH
20067: LD_INT 1
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 0
20076: PUSH
20077: LD_INT 1
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 1
20086: NEG
20087: PUSH
20088: LD_INT 0
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 1
20097: NEG
20098: PUSH
20099: LD_INT 1
20101: NEG
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 2
20109: PUSH
20110: LD_INT 1
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 2
20119: NEG
20120: PUSH
20121: LD_INT 1
20123: NEG
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20140: LD_ADDR_VAR 0 36
20144: PUSH
20145: LD_INT 0
20147: PUSH
20148: LD_INT 0
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 0
20157: PUSH
20158: LD_INT 1
20160: NEG
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: LD_INT 0
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 1
20178: PUSH
20179: LD_INT 1
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 0
20188: PUSH
20189: LD_INT 1
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 1
20198: NEG
20199: PUSH
20200: LD_INT 0
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 1
20209: NEG
20210: PUSH
20211: LD_INT 1
20213: NEG
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 1
20221: NEG
20222: PUSH
20223: LD_INT 2
20225: NEG
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 1
20233: PUSH
20234: LD_INT 2
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20252: LD_ADDR_VAR 0 37
20256: PUSH
20257: LD_INT 0
20259: PUSH
20260: LD_INT 0
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 0
20269: PUSH
20270: LD_INT 1
20272: NEG
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: LD_INT 0
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 1
20290: PUSH
20291: LD_INT 1
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 0
20300: PUSH
20301: LD_INT 1
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 1
20310: NEG
20311: PUSH
20312: LD_INT 0
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 1
20321: NEG
20322: PUSH
20323: LD_INT 1
20325: NEG
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 1
20333: PUSH
20334: LD_INT 1
20336: NEG
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 1
20344: NEG
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20364: LD_ADDR_VAR 0 38
20368: PUSH
20369: LD_INT 0
20371: PUSH
20372: LD_INT 0
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 0
20381: PUSH
20382: LD_INT 1
20384: NEG
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 1
20392: PUSH
20393: LD_INT 0
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 1
20402: PUSH
20403: LD_INT 1
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 0
20412: PUSH
20413: LD_INT 1
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 1
20422: NEG
20423: PUSH
20424: LD_INT 0
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 1
20433: NEG
20434: PUSH
20435: LD_INT 1
20437: NEG
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 2
20455: NEG
20456: PUSH
20457: LD_INT 1
20459: NEG
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20476: LD_ADDR_VAR 0 39
20480: PUSH
20481: LD_INT 0
20483: PUSH
20484: LD_INT 0
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 0
20493: PUSH
20494: LD_INT 1
20496: NEG
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 1
20504: PUSH
20505: LD_INT 0
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PUSH
20512: LD_INT 1
20514: PUSH
20515: LD_INT 1
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 0
20524: PUSH
20525: LD_INT 1
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 1
20534: NEG
20535: PUSH
20536: LD_INT 0
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 1
20545: NEG
20546: PUSH
20547: LD_INT 1
20549: NEG
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 1
20557: NEG
20558: PUSH
20559: LD_INT 2
20561: NEG
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 1
20569: PUSH
20570: LD_INT 2
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20588: LD_ADDR_VAR 0 40
20592: PUSH
20593: LD_INT 0
20595: PUSH
20596: LD_INT 0
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 0
20605: PUSH
20606: LD_INT 1
20608: NEG
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 1
20616: PUSH
20617: LD_INT 0
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 1
20626: PUSH
20627: LD_INT 1
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: LD_INT 0
20636: PUSH
20637: LD_INT 1
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 1
20646: NEG
20647: PUSH
20648: LD_INT 0
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 1
20657: NEG
20658: PUSH
20659: LD_INT 1
20661: NEG
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 1
20669: PUSH
20670: LD_INT 1
20672: NEG
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PUSH
20678: LD_INT 1
20680: NEG
20681: PUSH
20682: LD_INT 1
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20700: LD_ADDR_VAR 0 41
20704: PUSH
20705: LD_INT 0
20707: PUSH
20708: LD_INT 0
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 0
20717: PUSH
20718: LD_INT 1
20720: NEG
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 1
20728: PUSH
20729: LD_INT 0
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 1
20738: PUSH
20739: LD_INT 1
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 0
20748: PUSH
20749: LD_INT 1
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 1
20758: NEG
20759: PUSH
20760: LD_INT 0
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 1
20769: NEG
20770: PUSH
20771: LD_INT 1
20773: NEG
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 1
20781: NEG
20782: PUSH
20783: LD_INT 2
20785: NEG
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 1
20793: PUSH
20794: LD_INT 1
20796: NEG
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 2
20804: PUSH
20805: LD_INT 0
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 2
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 2
20824: PUSH
20825: LD_INT 2
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: LD_INT 2
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 1
20844: NEG
20845: PUSH
20846: LD_INT 1
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 2
20855: NEG
20856: PUSH
20857: LD_INT 0
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 2
20866: NEG
20867: PUSH
20868: LD_INT 1
20870: NEG
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 2
20878: NEG
20879: PUSH
20880: LD_INT 2
20882: NEG
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 2
20890: NEG
20891: PUSH
20892: LD_INT 3
20894: NEG
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 2
20902: PUSH
20903: LD_INT 1
20905: NEG
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 3
20913: PUSH
20914: LD_INT 0
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 3
20923: PUSH
20924: LD_INT 1
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 3
20933: PUSH
20934: LD_INT 2
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 3
20943: PUSH
20944: LD_INT 3
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 2
20953: PUSH
20954: LD_INT 3
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 2
20963: NEG
20964: PUSH
20965: LD_INT 1
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 3
20974: NEG
20975: PUSH
20976: LD_INT 0
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 3
20985: NEG
20986: PUSH
20987: LD_INT 1
20989: NEG
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 3
20997: NEG
20998: PUSH
20999: LD_INT 2
21001: NEG
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 3
21009: NEG
21010: PUSH
21011: LD_INT 3
21013: NEG
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21050: LD_ADDR_VAR 0 42
21054: PUSH
21055: LD_INT 0
21057: PUSH
21058: LD_INT 0
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 0
21067: PUSH
21068: LD_INT 1
21070: NEG
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 1
21078: PUSH
21079: LD_INT 0
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 1
21088: PUSH
21089: LD_INT 1
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 0
21098: PUSH
21099: LD_INT 1
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 1
21108: NEG
21109: PUSH
21110: LD_INT 0
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 1
21119: NEG
21120: PUSH
21121: LD_INT 1
21123: NEG
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 1
21131: NEG
21132: PUSH
21133: LD_INT 2
21135: NEG
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 0
21143: PUSH
21144: LD_INT 2
21146: NEG
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 1
21154: PUSH
21155: LD_INT 1
21157: NEG
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 2
21165: PUSH
21166: LD_INT 1
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 2
21175: PUSH
21176: LD_INT 2
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 1
21185: PUSH
21186: LD_INT 2
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: LD_INT 2
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 1
21205: NEG
21206: PUSH
21207: LD_INT 1
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 2
21216: NEG
21217: PUSH
21218: LD_INT 1
21220: NEG
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 2
21228: NEG
21229: PUSH
21230: LD_INT 2
21232: NEG
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 2
21240: NEG
21241: PUSH
21242: LD_INT 3
21244: NEG
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 1
21252: NEG
21253: PUSH
21254: LD_INT 3
21256: NEG
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 0
21264: PUSH
21265: LD_INT 3
21267: NEG
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 1
21275: PUSH
21276: LD_INT 2
21278: NEG
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 3
21286: PUSH
21287: LD_INT 2
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 3
21296: PUSH
21297: LD_INT 3
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 2
21306: PUSH
21307: LD_INT 3
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: LD_INT 3
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 0
21326: PUSH
21327: LD_INT 3
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 1
21336: NEG
21337: PUSH
21338: LD_INT 2
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 3
21347: NEG
21348: PUSH
21349: LD_INT 2
21351: NEG
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 3
21359: NEG
21360: PUSH
21361: LD_INT 3
21363: NEG
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21400: LD_ADDR_VAR 0 43
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: LD_INT 0
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 0
21417: PUSH
21418: LD_INT 1
21420: NEG
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 1
21428: PUSH
21429: LD_INT 0
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 1
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 0
21448: PUSH
21449: LD_INT 1
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 1
21458: NEG
21459: PUSH
21460: LD_INT 0
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 1
21469: NEG
21470: PUSH
21471: LD_INT 1
21473: NEG
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 1
21481: NEG
21482: PUSH
21483: LD_INT 2
21485: NEG
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 0
21493: PUSH
21494: LD_INT 2
21496: NEG
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 1
21504: PUSH
21505: LD_INT 1
21507: NEG
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: LD_INT 0
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 2
21525: PUSH
21526: LD_INT 1
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 1
21535: PUSH
21536: LD_INT 2
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 0
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 1
21555: NEG
21556: PUSH
21557: LD_INT 1
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 2
21566: NEG
21567: PUSH
21568: LD_INT 0
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 2
21577: NEG
21578: PUSH
21579: LD_INT 1
21581: NEG
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 1
21589: NEG
21590: PUSH
21591: LD_INT 3
21593: NEG
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 0
21601: PUSH
21602: LD_INT 3
21604: NEG
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 1
21612: PUSH
21613: LD_INT 2
21615: NEG
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 2
21623: PUSH
21624: LD_INT 1
21626: NEG
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 3
21634: PUSH
21635: LD_INT 0
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 3
21644: PUSH
21645: LD_INT 1
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 1
21654: PUSH
21655: LD_INT 3
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 0
21664: PUSH
21665: LD_INT 3
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 1
21674: NEG
21675: PUSH
21676: LD_INT 2
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 2
21685: NEG
21686: PUSH
21687: LD_INT 1
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: LD_INT 3
21696: NEG
21697: PUSH
21698: LD_INT 0
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 3
21707: NEG
21708: PUSH
21709: LD_INT 1
21711: NEG
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21748: LD_ADDR_VAR 0 44
21752: PUSH
21753: LD_INT 0
21755: PUSH
21756: LD_INT 0
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 0
21765: PUSH
21766: LD_INT 1
21768: NEG
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 1
21776: PUSH
21777: LD_INT 0
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 1
21786: PUSH
21787: LD_INT 1
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 0
21796: PUSH
21797: LD_INT 1
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 1
21806: NEG
21807: PUSH
21808: LD_INT 0
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 1
21817: NEG
21818: PUSH
21819: LD_INT 1
21821: NEG
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 1
21829: NEG
21830: PUSH
21831: LD_INT 2
21833: NEG
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: LD_INT 1
21844: NEG
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 2
21852: PUSH
21853: LD_INT 0
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 2
21862: PUSH
21863: LD_INT 1
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 2
21872: PUSH
21873: LD_INT 2
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 1
21882: PUSH
21883: LD_INT 2
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 1
21892: NEG
21893: PUSH
21894: LD_INT 1
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 2
21903: NEG
21904: PUSH
21905: LD_INT 0
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 2
21914: NEG
21915: PUSH
21916: LD_INT 1
21918: NEG
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 2
21926: NEG
21927: PUSH
21928: LD_INT 2
21930: NEG
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 2
21938: NEG
21939: PUSH
21940: LD_INT 3
21942: NEG
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 2
21950: PUSH
21951: LD_INT 1
21953: NEG
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 3
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 3
21971: PUSH
21972: LD_INT 1
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 3
21981: PUSH
21982: LD_INT 2
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 3
21991: PUSH
21992: LD_INT 3
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 2
22001: PUSH
22002: LD_INT 3
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 2
22011: NEG
22012: PUSH
22013: LD_INT 1
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 3
22022: NEG
22023: PUSH
22024: LD_INT 0
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 3
22033: NEG
22034: PUSH
22035: LD_INT 1
22037: NEG
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 3
22045: NEG
22046: PUSH
22047: LD_INT 2
22049: NEG
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 3
22057: NEG
22058: PUSH
22059: LD_INT 3
22061: NEG
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22098: LD_ADDR_VAR 0 45
22102: PUSH
22103: LD_INT 0
22105: PUSH
22106: LD_INT 0
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 0
22115: PUSH
22116: LD_INT 1
22118: NEG
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 1
22126: PUSH
22127: LD_INT 0
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 1
22136: PUSH
22137: LD_INT 1
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 0
22146: PUSH
22147: LD_INT 1
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 1
22156: NEG
22157: PUSH
22158: LD_INT 0
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 1
22167: NEG
22168: PUSH
22169: LD_INT 1
22171: NEG
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 1
22179: NEG
22180: PUSH
22181: LD_INT 2
22183: NEG
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 0
22191: PUSH
22192: LD_INT 2
22194: NEG
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 1
22202: PUSH
22203: LD_INT 1
22205: NEG
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 2
22213: PUSH
22214: LD_INT 1
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: LD_INT 2
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: LD_INT 2
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 0
22243: PUSH
22244: LD_INT 2
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 1
22253: NEG
22254: PUSH
22255: LD_INT 1
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 2
22264: NEG
22265: PUSH
22266: LD_INT 1
22268: NEG
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 2
22276: NEG
22277: PUSH
22278: LD_INT 2
22280: NEG
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 2
22288: NEG
22289: PUSH
22290: LD_INT 3
22292: NEG
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 1
22300: NEG
22301: PUSH
22302: LD_INT 3
22304: NEG
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 0
22312: PUSH
22313: LD_INT 3
22315: NEG
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 1
22323: PUSH
22324: LD_INT 2
22326: NEG
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 3
22334: PUSH
22335: LD_INT 2
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 3
22344: PUSH
22345: LD_INT 3
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 2
22354: PUSH
22355: LD_INT 3
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: LD_INT 3
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: LD_INT 3
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 1
22384: NEG
22385: PUSH
22386: LD_INT 2
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 3
22395: NEG
22396: PUSH
22397: LD_INT 2
22399: NEG
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 3
22407: NEG
22408: PUSH
22409: LD_INT 3
22411: NEG
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22448: LD_ADDR_VAR 0 46
22452: PUSH
22453: LD_INT 0
22455: PUSH
22456: LD_INT 0
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 0
22465: PUSH
22466: LD_INT 1
22468: NEG
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 1
22476: PUSH
22477: LD_INT 0
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: LD_INT 1
22486: PUSH
22487: LD_INT 1
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 0
22496: PUSH
22497: LD_INT 1
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 1
22506: NEG
22507: PUSH
22508: LD_INT 0
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 1
22517: NEG
22518: PUSH
22519: LD_INT 1
22521: NEG
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 1
22529: NEG
22530: PUSH
22531: LD_INT 2
22533: NEG
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 0
22541: PUSH
22542: LD_INT 2
22544: NEG
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: PUSH
22553: LD_INT 1
22555: NEG
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 2
22563: PUSH
22564: LD_INT 0
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 2
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: LD_INT 2
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 0
22593: PUSH
22594: LD_INT 2
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 1
22603: NEG
22604: PUSH
22605: LD_INT 1
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 2
22614: NEG
22615: PUSH
22616: LD_INT 0
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 2
22625: NEG
22626: PUSH
22627: LD_INT 1
22629: NEG
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 1
22637: NEG
22638: PUSH
22639: LD_INT 3
22641: NEG
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 0
22649: PUSH
22650: LD_INT 3
22652: NEG
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 1
22660: PUSH
22661: LD_INT 2
22663: NEG
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 2
22671: PUSH
22672: LD_INT 1
22674: NEG
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 3
22682: PUSH
22683: LD_INT 0
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 3
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: LD_INT 3
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 0
22712: PUSH
22713: LD_INT 3
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 1
22722: NEG
22723: PUSH
22724: LD_INT 2
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 2
22733: NEG
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 3
22744: NEG
22745: PUSH
22746: LD_INT 0
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 3
22755: NEG
22756: PUSH
22757: LD_INT 1
22759: NEG
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22796: LD_ADDR_VAR 0 47
22800: PUSH
22801: LD_INT 0
22803: PUSH
22804: LD_INT 0
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 0
22813: PUSH
22814: LD_INT 1
22816: NEG
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 1
22824: PUSH
22825: LD_INT 0
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 1
22834: PUSH
22835: LD_INT 1
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 0
22844: PUSH
22845: LD_INT 1
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 1
22854: NEG
22855: PUSH
22856: LD_INT 0
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 1
22865: NEG
22866: PUSH
22867: LD_INT 1
22869: NEG
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 1
22877: NEG
22878: PUSH
22879: LD_INT 2
22881: NEG
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 0
22889: PUSH
22890: LD_INT 2
22892: NEG
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 1
22900: PUSH
22901: LD_INT 1
22903: NEG
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PUSH
22909: LD_INT 2
22911: NEG
22912: PUSH
22913: LD_INT 1
22915: NEG
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 2
22923: NEG
22924: PUSH
22925: LD_INT 2
22927: NEG
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
22947: LD_ADDR_VAR 0 48
22951: PUSH
22952: LD_INT 0
22954: PUSH
22955: LD_INT 0
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 0
22964: PUSH
22965: LD_INT 1
22967: NEG
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 1
22975: PUSH
22976: LD_INT 0
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 1
22985: PUSH
22986: LD_INT 1
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 0
22995: PUSH
22996: LD_INT 1
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 1
23005: NEG
23006: PUSH
23007: LD_INT 0
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 1
23016: NEG
23017: PUSH
23018: LD_INT 1
23020: NEG
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 1
23028: NEG
23029: PUSH
23030: LD_INT 2
23032: NEG
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 0
23040: PUSH
23041: LD_INT 2
23043: NEG
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 1
23051: PUSH
23052: LD_INT 1
23054: NEG
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 2
23062: PUSH
23063: LD_INT 0
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 2
23072: PUSH
23073: LD_INT 1
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23094: LD_ADDR_VAR 0 49
23098: PUSH
23099: LD_INT 0
23101: PUSH
23102: LD_INT 0
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 0
23111: PUSH
23112: LD_INT 1
23114: NEG
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 1
23122: PUSH
23123: LD_INT 0
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 1
23132: PUSH
23133: LD_INT 1
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 0
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 1
23152: NEG
23153: PUSH
23154: LD_INT 0
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 1
23163: NEG
23164: PUSH
23165: LD_INT 1
23167: NEG
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 1
23175: PUSH
23176: LD_INT 1
23178: NEG
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 2
23186: PUSH
23187: LD_INT 0
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 2
23196: PUSH
23197: LD_INT 1
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 2
23206: PUSH
23207: LD_INT 2
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 1
23216: PUSH
23217: LD_INT 2
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23238: LD_ADDR_VAR 0 50
23242: PUSH
23243: LD_INT 0
23245: PUSH
23246: LD_INT 0
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 0
23255: PUSH
23256: LD_INT 1
23258: NEG
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 1
23266: PUSH
23267: LD_INT 0
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 1
23276: PUSH
23277: LD_INT 1
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 0
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 1
23296: NEG
23297: PUSH
23298: LD_INT 0
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 1
23307: NEG
23308: PUSH
23309: LD_INT 1
23311: NEG
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 2
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 2
23329: PUSH
23330: LD_INT 2
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 1
23339: PUSH
23340: LD_INT 2
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 0
23349: PUSH
23350: LD_INT 2
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 1
23359: NEG
23360: PUSH
23361: LD_INT 1
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23382: LD_ADDR_VAR 0 51
23386: PUSH
23387: LD_INT 0
23389: PUSH
23390: LD_INT 0
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 0
23399: PUSH
23400: LD_INT 1
23402: NEG
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 1
23410: PUSH
23411: LD_INT 0
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 1
23420: PUSH
23421: LD_INT 1
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: LD_INT 1
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 1
23440: NEG
23441: PUSH
23442: LD_INT 0
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 1
23451: NEG
23452: PUSH
23453: LD_INT 1
23455: NEG
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 1
23463: PUSH
23464: LD_INT 2
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 0
23473: PUSH
23474: LD_INT 2
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 1
23483: NEG
23484: PUSH
23485: LD_INT 1
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 2
23494: NEG
23495: PUSH
23496: LD_INT 0
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 2
23505: NEG
23506: PUSH
23507: LD_INT 1
23509: NEG
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23529: LD_ADDR_VAR 0 52
23533: PUSH
23534: LD_INT 0
23536: PUSH
23537: LD_INT 0
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 0
23546: PUSH
23547: LD_INT 1
23549: NEG
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 1
23557: PUSH
23558: LD_INT 0
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 1
23567: PUSH
23568: LD_INT 1
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 0
23577: PUSH
23578: LD_INT 1
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 1
23587: NEG
23588: PUSH
23589: LD_INT 0
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 1
23598: NEG
23599: PUSH
23600: LD_INT 1
23602: NEG
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 1
23610: NEG
23611: PUSH
23612: LD_INT 2
23614: NEG
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 1
23622: NEG
23623: PUSH
23624: LD_INT 1
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 2
23633: NEG
23634: PUSH
23635: LD_INT 0
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 2
23644: NEG
23645: PUSH
23646: LD_INT 1
23648: NEG
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 2
23656: NEG
23657: PUSH
23658: LD_INT 2
23660: NEG
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23680: LD_ADDR_VAR 0 53
23684: PUSH
23685: LD_INT 0
23687: PUSH
23688: LD_INT 0
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 0
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 1
23708: PUSH
23709: LD_INT 0
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 0
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 1
23738: NEG
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: NEG
23750: PUSH
23751: LD_INT 1
23753: NEG
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 1
23761: NEG
23762: PUSH
23763: LD_INT 2
23765: NEG
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 0
23773: PUSH
23774: LD_INT 2
23776: NEG
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: PUSH
23785: LD_INT 1
23787: NEG
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 2
23795: PUSH
23796: LD_INT 0
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 2
23805: PUSH
23806: LD_INT 1
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: LD_INT 2
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 1
23825: PUSH
23826: LD_INT 2
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: LD_INT 2
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 1
23845: NEG
23846: PUSH
23847: LD_INT 1
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 2
23856: NEG
23857: PUSH
23858: LD_INT 0
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 2
23867: NEG
23868: PUSH
23869: LD_INT 1
23871: NEG
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 2
23879: NEG
23880: PUSH
23881: LD_INT 2
23883: NEG
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23910: LD_ADDR_VAR 0 54
23914: PUSH
23915: LD_INT 0
23917: PUSH
23918: LD_INT 0
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 0
23927: PUSH
23928: LD_INT 1
23930: NEG
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 1
23938: PUSH
23939: LD_INT 0
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: LD_INT 1
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 0
23958: PUSH
23959: LD_INT 1
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 1
23968: NEG
23969: PUSH
23970: LD_INT 0
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 1
23979: NEG
23980: PUSH
23981: LD_INT 1
23983: NEG
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 1
23991: NEG
23992: PUSH
23993: LD_INT 2
23995: NEG
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 0
24003: PUSH
24004: LD_INT 2
24006: NEG
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 1
24014: PUSH
24015: LD_INT 1
24017: NEG
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 2
24025: PUSH
24026: LD_INT 0
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 2
24035: PUSH
24036: LD_INT 1
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 2
24045: PUSH
24046: LD_INT 2
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 1
24055: PUSH
24056: LD_INT 2
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 0
24065: PUSH
24066: LD_INT 2
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 1
24075: NEG
24076: PUSH
24077: LD_INT 1
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 2
24086: NEG
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 2
24097: NEG
24098: PUSH
24099: LD_INT 1
24101: NEG
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 2
24109: NEG
24110: PUSH
24111: LD_INT 2
24113: NEG
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24140: LD_ADDR_VAR 0 55
24144: PUSH
24145: LD_INT 0
24147: PUSH
24148: LD_INT 0
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 0
24157: PUSH
24158: LD_INT 1
24160: NEG
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 1
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 1
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 0
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 1
24198: NEG
24199: PUSH
24200: LD_INT 0
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 1
24209: NEG
24210: PUSH
24211: LD_INT 1
24213: NEG
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 1
24221: NEG
24222: PUSH
24223: LD_INT 2
24225: NEG
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 0
24233: PUSH
24234: LD_INT 2
24236: NEG
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: LD_INT 1
24247: NEG
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 2
24255: PUSH
24256: LD_INT 0
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 2
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 2
24275: PUSH
24276: LD_INT 2
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 1
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 0
24295: PUSH
24296: LD_INT 2
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 1
24305: NEG
24306: PUSH
24307: LD_INT 1
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 2
24316: NEG
24317: PUSH
24318: LD_INT 0
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 2
24327: NEG
24328: PUSH
24329: LD_INT 1
24331: NEG
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 2
24339: NEG
24340: PUSH
24341: LD_INT 2
24343: NEG
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24370: LD_ADDR_VAR 0 56
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: LD_INT 0
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: LD_INT 1
24390: NEG
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: LD_INT 0
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: LD_INT 1
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 0
24418: PUSH
24419: LD_INT 1
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 1
24428: NEG
24429: PUSH
24430: LD_INT 0
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 1
24439: NEG
24440: PUSH
24441: LD_INT 1
24443: NEG
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 1
24451: NEG
24452: PUSH
24453: LD_INT 2
24455: NEG
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 0
24463: PUSH
24464: LD_INT 2
24466: NEG
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 1
24474: PUSH
24475: LD_INT 1
24477: NEG
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 2
24485: PUSH
24486: LD_INT 0
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 2
24495: PUSH
24496: LD_INT 1
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 2
24505: PUSH
24506: LD_INT 2
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 1
24515: PUSH
24516: LD_INT 2
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 0
24525: PUSH
24526: LD_INT 2
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 1
24535: NEG
24536: PUSH
24537: LD_INT 1
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 2
24546: NEG
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 2
24557: NEG
24558: PUSH
24559: LD_INT 1
24561: NEG
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 2
24569: NEG
24570: PUSH
24571: LD_INT 2
24573: NEG
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24600: LD_ADDR_VAR 0 57
24604: PUSH
24605: LD_INT 0
24607: PUSH
24608: LD_INT 0
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 0
24617: PUSH
24618: LD_INT 1
24620: NEG
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 1
24628: PUSH
24629: LD_INT 0
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: LD_INT 1
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 0
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 1
24658: NEG
24659: PUSH
24660: LD_INT 0
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 1
24669: NEG
24670: PUSH
24671: LD_INT 1
24673: NEG
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 1
24681: NEG
24682: PUSH
24683: LD_INT 2
24685: NEG
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 0
24693: PUSH
24694: LD_INT 2
24696: NEG
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 1
24704: PUSH
24705: LD_INT 1
24707: NEG
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 2
24715: PUSH
24716: LD_INT 0
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 2
24725: PUSH
24726: LD_INT 1
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 2
24735: PUSH
24736: LD_INT 2
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: LD_INT 2
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: LD_INT 2
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: NEG
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 2
24776: NEG
24777: PUSH
24778: LD_INT 0
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 2
24787: NEG
24788: PUSH
24789: LD_INT 1
24791: NEG
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 2
24799: NEG
24800: PUSH
24801: LD_INT 2
24803: NEG
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24830: LD_ADDR_VAR 0 58
24834: PUSH
24835: LD_INT 0
24837: PUSH
24838: LD_INT 0
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 0
24847: PUSH
24848: LD_INT 1
24850: NEG
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 1
24858: PUSH
24859: LD_INT 0
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 1
24868: PUSH
24869: LD_INT 1
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 0
24878: PUSH
24879: LD_INT 1
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 1
24888: NEG
24889: PUSH
24890: LD_INT 0
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 1
24899: NEG
24900: PUSH
24901: LD_INT 1
24903: NEG
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 1
24911: NEG
24912: PUSH
24913: LD_INT 2
24915: NEG
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 0
24923: PUSH
24924: LD_INT 2
24926: NEG
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: LD_INT 1
24937: NEG
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 2
24945: PUSH
24946: LD_INT 0
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 2
24955: PUSH
24956: LD_INT 1
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 2
24965: PUSH
24966: LD_INT 2
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 1
24975: PUSH
24976: LD_INT 2
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 0
24985: PUSH
24986: LD_INT 2
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 1
24995: NEG
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 2
25006: NEG
25007: PUSH
25008: LD_INT 0
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 2
25017: NEG
25018: PUSH
25019: LD_INT 1
25021: NEG
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 2
25029: NEG
25030: PUSH
25031: LD_INT 2
25033: NEG
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25060: LD_ADDR_VAR 0 59
25064: PUSH
25065: LD_INT 0
25067: PUSH
25068: LD_INT 0
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 0
25077: PUSH
25078: LD_INT 1
25080: NEG
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: LD_INT 0
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 1
25098: PUSH
25099: LD_INT 1
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 0
25108: PUSH
25109: LD_INT 1
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 1
25118: NEG
25119: PUSH
25120: LD_INT 0
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 1
25129: NEG
25130: PUSH
25131: LD_INT 1
25133: NEG
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25148: LD_ADDR_VAR 0 60
25152: PUSH
25153: LD_INT 0
25155: PUSH
25156: LD_INT 0
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 0
25165: PUSH
25166: LD_INT 1
25168: NEG
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: LD_INT 0
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 1
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 0
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 1
25206: NEG
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 1
25217: NEG
25218: PUSH
25219: LD_INT 1
25221: NEG
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25236: LD_ADDR_VAR 0 61
25240: PUSH
25241: LD_INT 0
25243: PUSH
25244: LD_INT 0
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: LD_INT 1
25256: NEG
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 1
25274: PUSH
25275: LD_INT 1
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 0
25284: PUSH
25285: LD_INT 1
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 1
25294: NEG
25295: PUSH
25296: LD_INT 0
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 1
25305: NEG
25306: PUSH
25307: LD_INT 1
25309: NEG
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25324: LD_ADDR_VAR 0 62
25328: PUSH
25329: LD_INT 0
25331: PUSH
25332: LD_INT 0
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: LD_INT 1
25344: NEG
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 1
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 1
25362: PUSH
25363: LD_INT 1
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 0
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 1
25382: NEG
25383: PUSH
25384: LD_INT 0
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 1
25393: NEG
25394: PUSH
25395: LD_INT 1
25397: NEG
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25412: LD_ADDR_VAR 0 63
25416: PUSH
25417: LD_INT 0
25419: PUSH
25420: LD_INT 0
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: LD_INT 1
25432: NEG
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 1
25440: PUSH
25441: LD_INT 0
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 1
25450: PUSH
25451: LD_INT 1
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 1
25470: NEG
25471: PUSH
25472: LD_INT 0
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 1
25481: NEG
25482: PUSH
25483: LD_INT 1
25485: NEG
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25500: LD_ADDR_VAR 0 64
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: LD_INT 0
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: LD_INT 1
25520: NEG
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: LD_INT 0
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: LD_INT 1
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: LD_INT 1
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 1
25558: NEG
25559: PUSH
25560: LD_INT 0
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: NEG
25570: PUSH
25571: LD_INT 1
25573: NEG
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: ST_TO_ADDR
// end ; 1 :
25588: GO 31485
25590: LD_INT 1
25592: DOUBLE
25593: EQUAL
25594: IFTRUE 25598
25596: GO 28221
25598: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25599: LD_ADDR_VAR 0 11
25603: PUSH
25604: LD_INT 1
25606: NEG
25607: PUSH
25608: LD_INT 3
25610: NEG
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 0
25618: PUSH
25619: LD_INT 3
25621: NEG
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: LD_INT 2
25632: NEG
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: LIST
25642: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25643: LD_ADDR_VAR 0 12
25647: PUSH
25648: LD_INT 2
25650: PUSH
25651: LD_INT 1
25653: NEG
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 3
25661: PUSH
25662: LD_INT 0
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 3
25671: PUSH
25672: LD_INT 1
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: LIST
25683: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25684: LD_ADDR_VAR 0 13
25688: PUSH
25689: LD_INT 3
25691: PUSH
25692: LD_INT 2
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 3
25701: PUSH
25702: LD_INT 3
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 2
25711: PUSH
25712: LD_INT 3
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: LIST
25723: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25724: LD_ADDR_VAR 0 14
25728: PUSH
25729: LD_INT 1
25731: PUSH
25732: LD_INT 3
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: LD_INT 3
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 1
25751: NEG
25752: PUSH
25753: LD_INT 2
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: LIST
25764: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25765: LD_ADDR_VAR 0 15
25769: PUSH
25770: LD_INT 2
25772: NEG
25773: PUSH
25774: LD_INT 1
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 3
25783: NEG
25784: PUSH
25785: LD_INT 0
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 3
25794: NEG
25795: PUSH
25796: LD_INT 1
25798: NEG
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: LIST
25808: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25809: LD_ADDR_VAR 0 16
25813: PUSH
25814: LD_INT 2
25816: NEG
25817: PUSH
25818: LD_INT 3
25820: NEG
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 3
25828: NEG
25829: PUSH
25830: LD_INT 2
25832: NEG
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 3
25840: NEG
25841: PUSH
25842: LD_INT 3
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: LIST
25854: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25855: LD_ADDR_VAR 0 17
25859: PUSH
25860: LD_INT 1
25862: NEG
25863: PUSH
25864: LD_INT 3
25866: NEG
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 0
25874: PUSH
25875: LD_INT 3
25877: NEG
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 1
25885: PUSH
25886: LD_INT 2
25888: NEG
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: LIST
25898: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25899: LD_ADDR_VAR 0 18
25903: PUSH
25904: LD_INT 2
25906: PUSH
25907: LD_INT 1
25909: NEG
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 3
25917: PUSH
25918: LD_INT 0
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 3
25927: PUSH
25928: LD_INT 1
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: LIST
25939: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25940: LD_ADDR_VAR 0 19
25944: PUSH
25945: LD_INT 3
25947: PUSH
25948: LD_INT 2
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 3
25957: PUSH
25958: LD_INT 3
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 2
25967: PUSH
25968: LD_INT 3
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: LIST
25979: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25980: LD_ADDR_VAR 0 20
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: LD_INT 3
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 0
25997: PUSH
25998: LD_INT 3
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 1
26007: NEG
26008: PUSH
26009: LD_INT 2
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: LIST
26020: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26021: LD_ADDR_VAR 0 21
26025: PUSH
26026: LD_INT 2
26028: NEG
26029: PUSH
26030: LD_INT 1
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 3
26039: NEG
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 3
26050: NEG
26051: PUSH
26052: LD_INT 1
26054: NEG
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: LIST
26064: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26065: LD_ADDR_VAR 0 22
26069: PUSH
26070: LD_INT 2
26072: NEG
26073: PUSH
26074: LD_INT 3
26076: NEG
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 3
26084: NEG
26085: PUSH
26086: LD_INT 2
26088: NEG
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 3
26096: NEG
26097: PUSH
26098: LD_INT 3
26100: NEG
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: LIST
26110: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26111: LD_ADDR_VAR 0 23
26115: PUSH
26116: LD_INT 0
26118: PUSH
26119: LD_INT 3
26121: NEG
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 1
26129: NEG
26130: PUSH
26131: LD_INT 4
26133: NEG
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: LD_INT 3
26144: NEG
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: LIST
26154: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26155: LD_ADDR_VAR 0 24
26159: PUSH
26160: LD_INT 3
26162: PUSH
26163: LD_INT 0
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 3
26172: PUSH
26173: LD_INT 1
26175: NEG
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 4
26183: PUSH
26184: LD_INT 1
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: LIST
26195: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26196: LD_ADDR_VAR 0 25
26200: PUSH
26201: LD_INT 3
26203: PUSH
26204: LD_INT 3
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 4
26213: PUSH
26214: LD_INT 3
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 3
26223: PUSH
26224: LD_INT 4
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: LIST
26235: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
26236: LD_ADDR_VAR 0 26
26240: PUSH
26241: LD_INT 0
26243: PUSH
26244: LD_INT 3
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: LD_INT 4
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 1
26263: NEG
26264: PUSH
26265: LD_INT 3
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: LIST
26276: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
26277: LD_ADDR_VAR 0 27
26281: PUSH
26282: LD_INT 3
26284: NEG
26285: PUSH
26286: LD_INT 0
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 3
26295: NEG
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 4
26306: NEG
26307: PUSH
26308: LD_INT 1
26310: NEG
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: LIST
26320: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
26321: LD_ADDR_VAR 0 28
26325: PUSH
26326: LD_INT 3
26328: NEG
26329: PUSH
26330: LD_INT 3
26332: NEG
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 3
26340: NEG
26341: PUSH
26342: LD_INT 4
26344: NEG
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 4
26352: NEG
26353: PUSH
26354: LD_INT 3
26356: NEG
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: LIST
26366: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
26367: LD_ADDR_VAR 0 29
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: LD_INT 3
26378: NEG
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 0
26386: PUSH
26387: LD_INT 3
26389: NEG
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 1
26397: PUSH
26398: LD_INT 2
26400: NEG
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 1
26408: NEG
26409: PUSH
26410: LD_INT 4
26412: NEG
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: LD_INT 4
26423: NEG
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 1
26431: PUSH
26432: LD_INT 3
26434: NEG
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: LD_INT 5
26446: NEG
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 0
26454: PUSH
26455: LD_INT 5
26457: NEG
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 1
26465: PUSH
26466: LD_INT 4
26468: NEG
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 1
26476: NEG
26477: PUSH
26478: LD_INT 6
26480: NEG
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: LD_INT 6
26491: NEG
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: PUSH
26500: LD_INT 5
26502: NEG
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
26522: LD_ADDR_VAR 0 30
26526: PUSH
26527: LD_INT 2
26529: PUSH
26530: LD_INT 1
26532: NEG
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 3
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 3
26550: PUSH
26551: LD_INT 1
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 3
26560: PUSH
26561: LD_INT 1
26563: NEG
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 4
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 4
26581: PUSH
26582: LD_INT 1
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 4
26591: PUSH
26592: LD_INT 1
26594: NEG
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 5
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 5
26612: PUSH
26613: LD_INT 1
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 5
26622: PUSH
26623: LD_INT 1
26625: NEG
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 6
26633: PUSH
26634: LD_INT 0
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 6
26643: PUSH
26644: LD_INT 1
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
26665: LD_ADDR_VAR 0 31
26669: PUSH
26670: LD_INT 3
26672: PUSH
26673: LD_INT 2
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 3
26682: PUSH
26683: LD_INT 3
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 2
26692: PUSH
26693: LD_INT 3
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 4
26702: PUSH
26703: LD_INT 3
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 4
26712: PUSH
26713: LD_INT 4
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 3
26722: PUSH
26723: LD_INT 4
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 5
26732: PUSH
26733: LD_INT 4
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 5
26742: PUSH
26743: LD_INT 5
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 4
26752: PUSH
26753: LD_INT 5
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 6
26762: PUSH
26763: LD_INT 5
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 6
26772: PUSH
26773: LD_INT 6
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 5
26782: PUSH
26783: LD_INT 6
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
26804: LD_ADDR_VAR 0 32
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: LD_INT 3
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: LD_INT 3
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 1
26831: NEG
26832: PUSH
26833: LD_INT 2
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 1
26842: PUSH
26843: LD_INT 4
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: LD_INT 4
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 1
26862: NEG
26863: PUSH
26864: LD_INT 3
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 1
26873: PUSH
26874: LD_INT 5
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: LD_INT 5
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 1
26893: NEG
26894: PUSH
26895: LD_INT 4
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: LD_INT 6
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 0
26914: PUSH
26915: LD_INT 6
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 1
26924: NEG
26925: PUSH
26926: LD_INT 5
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
26947: LD_ADDR_VAR 0 33
26951: PUSH
26952: LD_INT 2
26954: NEG
26955: PUSH
26956: LD_INT 1
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 3
26965: NEG
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 3
26976: NEG
26977: PUSH
26978: LD_INT 1
26980: NEG
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 3
26988: NEG
26989: PUSH
26990: LD_INT 1
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 4
26999: NEG
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 4
27010: NEG
27011: PUSH
27012: LD_INT 1
27014: NEG
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 4
27022: NEG
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 5
27033: NEG
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 5
27044: NEG
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 5
27056: NEG
27057: PUSH
27058: LD_INT 1
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 6
27067: NEG
27068: PUSH
27069: LD_INT 0
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 6
27078: NEG
27079: PUSH
27080: LD_INT 1
27082: NEG
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27102: LD_ADDR_VAR 0 34
27106: PUSH
27107: LD_INT 2
27109: NEG
27110: PUSH
27111: LD_INT 3
27113: NEG
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 3
27121: NEG
27122: PUSH
27123: LD_INT 2
27125: NEG
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 3
27133: NEG
27134: PUSH
27135: LD_INT 3
27137: NEG
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 3
27145: NEG
27146: PUSH
27147: LD_INT 4
27149: NEG
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 4
27157: NEG
27158: PUSH
27159: LD_INT 3
27161: NEG
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 4
27169: NEG
27170: PUSH
27171: LD_INT 4
27173: NEG
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 4
27181: NEG
27182: PUSH
27183: LD_INT 5
27185: NEG
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 5
27193: NEG
27194: PUSH
27195: LD_INT 4
27197: NEG
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 5
27205: NEG
27206: PUSH
27207: LD_INT 5
27209: NEG
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 5
27217: NEG
27218: PUSH
27219: LD_INT 6
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 6
27229: NEG
27230: PUSH
27231: LD_INT 5
27233: NEG
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 6
27241: NEG
27242: PUSH
27243: LD_INT 6
27245: NEG
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
27265: LD_ADDR_VAR 0 41
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: LD_INT 2
27275: NEG
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: LD_INT 3
27287: NEG
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: LD_INT 2
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: LIST
27308: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
27309: LD_ADDR_VAR 0 42
27313: PUSH
27314: LD_INT 2
27316: PUSH
27317: LD_INT 0
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 2
27326: PUSH
27327: LD_INT 1
27329: NEG
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 3
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: LIST
27349: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
27350: LD_ADDR_VAR 0 43
27354: PUSH
27355: LD_INT 2
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 3
27367: PUSH
27368: LD_INT 2
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: LD_INT 3
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: LIST
27389: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
27390: LD_ADDR_VAR 0 44
27394: PUSH
27395: LD_INT 0
27397: PUSH
27398: LD_INT 2
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: LD_INT 3
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 1
27417: NEG
27418: PUSH
27419: LD_INT 2
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: LIST
27430: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27431: LD_ADDR_VAR 0 45
27435: PUSH
27436: LD_INT 2
27438: NEG
27439: PUSH
27440: LD_INT 0
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 2
27449: NEG
27450: PUSH
27451: LD_INT 1
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 3
27460: NEG
27461: PUSH
27462: LD_INT 1
27464: NEG
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: LIST
27474: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
27475: LD_ADDR_VAR 0 46
27479: PUSH
27480: LD_INT 2
27482: NEG
27483: PUSH
27484: LD_INT 2
27486: NEG
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 2
27494: NEG
27495: PUSH
27496: LD_INT 3
27498: NEG
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 3
27506: NEG
27507: PUSH
27508: LD_INT 2
27510: NEG
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: LIST
27520: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
27521: LD_ADDR_VAR 0 47
27525: PUSH
27526: LD_INT 2
27528: NEG
27529: PUSH
27530: LD_INT 3
27532: NEG
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 1
27540: NEG
27541: PUSH
27542: LD_INT 3
27544: NEG
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27554: LD_ADDR_VAR 0 48
27558: PUSH
27559: LD_INT 1
27561: PUSH
27562: LD_INT 2
27564: NEG
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 2
27572: PUSH
27573: LD_INT 1
27575: NEG
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
27585: LD_ADDR_VAR 0 49
27589: PUSH
27590: LD_INT 3
27592: PUSH
27593: LD_INT 1
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 3
27602: PUSH
27603: LD_INT 2
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
27614: LD_ADDR_VAR 0 50
27618: PUSH
27619: LD_INT 2
27621: PUSH
27622: LD_INT 3
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 1
27631: PUSH
27632: LD_INT 3
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27643: LD_ADDR_VAR 0 51
27647: PUSH
27648: LD_INT 1
27650: NEG
27651: PUSH
27652: LD_INT 2
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 2
27661: NEG
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27674: LD_ADDR_VAR 0 52
27678: PUSH
27679: LD_INT 3
27681: NEG
27682: PUSH
27683: LD_INT 1
27685: NEG
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 3
27693: NEG
27694: PUSH
27695: LD_INT 2
27697: NEG
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27707: LD_ADDR_VAR 0 53
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: LD_INT 3
27718: NEG
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 0
27726: PUSH
27727: LD_INT 3
27729: NEG
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 1
27737: PUSH
27738: LD_INT 2
27740: NEG
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: LIST
27750: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27751: LD_ADDR_VAR 0 54
27755: PUSH
27756: LD_INT 2
27758: PUSH
27759: LD_INT 1
27761: NEG
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 3
27769: PUSH
27770: LD_INT 0
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 3
27779: PUSH
27780: LD_INT 1
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: LIST
27791: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27792: LD_ADDR_VAR 0 55
27796: PUSH
27797: LD_INT 3
27799: PUSH
27800: LD_INT 2
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 3
27809: PUSH
27810: LD_INT 3
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 2
27819: PUSH
27820: LD_INT 3
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: LIST
27831: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27832: LD_ADDR_VAR 0 56
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: LD_INT 3
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: LD_INT 3
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 1
27859: NEG
27860: PUSH
27861: LD_INT 2
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: LIST
27872: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27873: LD_ADDR_VAR 0 57
27877: PUSH
27878: LD_INT 2
27880: NEG
27881: PUSH
27882: LD_INT 1
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 3
27891: NEG
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 3
27902: NEG
27903: PUSH
27904: LD_INT 1
27906: NEG
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: LIST
27916: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27917: LD_ADDR_VAR 0 58
27921: PUSH
27922: LD_INT 2
27924: NEG
27925: PUSH
27926: LD_INT 3
27928: NEG
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 3
27936: NEG
27937: PUSH
27938: LD_INT 2
27940: NEG
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 3
27948: NEG
27949: PUSH
27950: LD_INT 3
27952: NEG
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: LIST
27962: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
27963: LD_ADDR_VAR 0 59
27967: PUSH
27968: LD_INT 1
27970: NEG
27971: PUSH
27972: LD_INT 2
27974: NEG
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 0
27982: PUSH
27983: LD_INT 2
27985: NEG
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 1
27993: PUSH
27994: LD_INT 1
27996: NEG
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: LIST
28006: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28007: LD_ADDR_VAR 0 60
28011: PUSH
28012: LD_INT 1
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 2
28025: PUSH
28026: LD_INT 0
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 2
28035: PUSH
28036: LD_INT 1
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: LIST
28047: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28048: LD_ADDR_VAR 0 61
28052: PUSH
28053: LD_INT 2
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 2
28065: PUSH
28066: LD_INT 2
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: LD_INT 2
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: LIST
28087: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28088: LD_ADDR_VAR 0 62
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 0
28105: PUSH
28106: LD_INT 2
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: LD_INT 1
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: LIST
28128: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28129: LD_ADDR_VAR 0 63
28133: PUSH
28134: LD_INT 1
28136: NEG
28137: PUSH
28138: LD_INT 1
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 2
28147: NEG
28148: PUSH
28149: LD_INT 0
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 2
28158: NEG
28159: PUSH
28160: LD_INT 1
28162: NEG
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: LIST
28172: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28173: LD_ADDR_VAR 0 64
28177: PUSH
28178: LD_INT 1
28180: NEG
28181: PUSH
28182: LD_INT 2
28184: NEG
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 2
28192: NEG
28193: PUSH
28194: LD_INT 1
28196: NEG
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 2
28204: NEG
28205: PUSH
28206: LD_INT 2
28208: NEG
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: LIST
28218: ST_TO_ADDR
// end ; 2 :
28219: GO 31485
28221: LD_INT 2
28223: DOUBLE
28224: EQUAL
28225: IFTRUE 28229
28227: GO 31484
28229: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
28230: LD_ADDR_VAR 0 29
28234: PUSH
28235: LD_INT 4
28237: PUSH
28238: LD_INT 0
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 4
28247: PUSH
28248: LD_INT 1
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 5
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 5
28268: PUSH
28269: LD_INT 1
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 4
28278: PUSH
28279: LD_INT 1
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 3
28288: PUSH
28289: LD_INT 0
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 3
28298: PUSH
28299: LD_INT 1
28301: NEG
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 3
28309: PUSH
28310: LD_INT 2
28312: NEG
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 5
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 3
28330: PUSH
28331: LD_INT 3
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 3
28340: PUSH
28341: LD_INT 2
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 4
28350: PUSH
28351: LD_INT 3
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 4
28360: PUSH
28361: LD_INT 4
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 3
28370: PUSH
28371: LD_INT 4
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 2
28380: PUSH
28381: LD_INT 3
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 2
28390: PUSH
28391: LD_INT 2
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 4
28400: PUSH
28401: LD_INT 2
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 2
28410: PUSH
28411: LD_INT 4
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 0
28420: PUSH
28421: LD_INT 4
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: LD_INT 3
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: PUSH
28441: LD_INT 4
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: LD_INT 5
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: LD_INT 5
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: LD_INT 4
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 1
28481: NEG
28482: PUSH
28483: LD_INT 3
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 2
28492: PUSH
28493: LD_INT 5
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 2
28502: NEG
28503: PUSH
28504: LD_INT 3
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 3
28513: NEG
28514: PUSH
28515: LD_INT 0
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 3
28524: NEG
28525: PUSH
28526: LD_INT 1
28528: NEG
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 2
28536: NEG
28537: PUSH
28538: LD_INT 0
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 2
28547: NEG
28548: PUSH
28549: LD_INT 1
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 3
28558: NEG
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 4
28569: NEG
28570: PUSH
28571: LD_INT 0
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 4
28580: NEG
28581: PUSH
28582: LD_INT 1
28584: NEG
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 4
28592: NEG
28593: PUSH
28594: LD_INT 2
28596: NEG
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 2
28604: NEG
28605: PUSH
28606: LD_INT 2
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 4
28615: NEG
28616: PUSH
28617: LD_INT 4
28619: NEG
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 4
28627: NEG
28628: PUSH
28629: LD_INT 5
28631: NEG
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 3
28639: NEG
28640: PUSH
28641: LD_INT 4
28643: NEG
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 3
28651: NEG
28652: PUSH
28653: LD_INT 3
28655: NEG
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 4
28663: NEG
28664: PUSH
28665: LD_INT 3
28667: NEG
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 5
28675: NEG
28676: PUSH
28677: LD_INT 4
28679: NEG
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 5
28687: NEG
28688: PUSH
28689: LD_INT 5
28691: NEG
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 3
28699: NEG
28700: PUSH
28701: LD_INT 5
28703: NEG
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 5
28711: NEG
28712: PUSH
28713: LD_INT 3
28715: NEG
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
28768: LD_ADDR_VAR 0 30
28772: PUSH
28773: LD_INT 4
28775: PUSH
28776: LD_INT 4
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 4
28785: PUSH
28786: LD_INT 3
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 5
28795: PUSH
28796: LD_INT 4
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 5
28805: PUSH
28806: LD_INT 5
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 4
28815: PUSH
28816: LD_INT 5
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 3
28825: PUSH
28826: LD_INT 4
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 3
28835: PUSH
28836: LD_INT 3
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 5
28845: PUSH
28846: LD_INT 3
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 3
28855: PUSH
28856: LD_INT 5
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 0
28865: PUSH
28866: LD_INT 3
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: LD_INT 2
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: LD_INT 3
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 1
28895: PUSH
28896: LD_INT 4
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 0
28905: PUSH
28906: LD_INT 4
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: LD_INT 3
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 1
28926: NEG
28927: PUSH
28928: LD_INT 2
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 2
28937: PUSH
28938: LD_INT 4
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 2
28947: NEG
28948: PUSH
28949: LD_INT 2
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 4
28958: NEG
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 4
28969: NEG
28970: PUSH
28971: LD_INT 1
28973: NEG
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 3
28981: NEG
28982: PUSH
28983: LD_INT 0
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 3
28992: NEG
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 4
29003: NEG
29004: PUSH
29005: LD_INT 1
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 5
29014: NEG
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 5
29025: NEG
29026: PUSH
29027: LD_INT 1
29029: NEG
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 5
29037: NEG
29038: PUSH
29039: LD_INT 2
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 3
29049: NEG
29050: PUSH
29051: LD_INT 2
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 3
29060: NEG
29061: PUSH
29062: LD_INT 3
29064: NEG
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 3
29072: NEG
29073: PUSH
29074: LD_INT 4
29076: NEG
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 2
29084: NEG
29085: PUSH
29086: LD_INT 3
29088: NEG
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 2
29096: NEG
29097: PUSH
29098: LD_INT 2
29100: NEG
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 3
29108: NEG
29109: PUSH
29110: LD_INT 2
29112: NEG
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 4
29120: NEG
29121: PUSH
29122: LD_INT 3
29124: NEG
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 4
29132: NEG
29133: PUSH
29134: LD_INT 4
29136: NEG
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 2
29144: NEG
29145: PUSH
29146: LD_INT 4
29148: NEG
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 4
29156: NEG
29157: PUSH
29158: LD_INT 2
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 0
29168: PUSH
29169: LD_INT 4
29171: NEG
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 0
29179: PUSH
29180: LD_INT 5
29182: NEG
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 1
29190: PUSH
29191: LD_INT 4
29193: NEG
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: LD_INT 3
29204: NEG
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: LD_INT 3
29215: NEG
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 1
29223: NEG
29224: PUSH
29225: LD_INT 4
29227: NEG
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 1
29235: NEG
29236: PUSH
29237: LD_INT 5
29239: NEG
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 2
29247: PUSH
29248: LD_INT 3
29250: NEG
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 2
29258: NEG
29259: PUSH
29260: LD_INT 5
29262: NEG
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
29315: LD_ADDR_VAR 0 31
29319: PUSH
29320: LD_INT 0
29322: PUSH
29323: LD_INT 4
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: LD_INT 3
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 1
29342: PUSH
29343: LD_INT 4
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 1
29352: PUSH
29353: LD_INT 5
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 0
29362: PUSH
29363: LD_INT 5
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 1
29372: NEG
29373: PUSH
29374: LD_INT 4
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 1
29383: NEG
29384: PUSH
29385: LD_INT 3
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 2
29394: PUSH
29395: LD_INT 5
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 2
29404: NEG
29405: PUSH
29406: LD_INT 3
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 3
29415: NEG
29416: PUSH
29417: LD_INT 0
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 3
29426: NEG
29427: PUSH
29428: LD_INT 1
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 2
29438: NEG
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 2
29449: NEG
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 3
29460: NEG
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 4
29471: NEG
29472: PUSH
29473: LD_INT 0
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 4
29482: NEG
29483: PUSH
29484: LD_INT 1
29486: NEG
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 4
29494: NEG
29495: PUSH
29496: LD_INT 2
29498: NEG
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 2
29506: NEG
29507: PUSH
29508: LD_INT 2
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 4
29517: NEG
29518: PUSH
29519: LD_INT 4
29521: NEG
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 4
29529: NEG
29530: PUSH
29531: LD_INT 5
29533: NEG
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 3
29541: NEG
29542: PUSH
29543: LD_INT 4
29545: NEG
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 3
29553: NEG
29554: PUSH
29555: LD_INT 3
29557: NEG
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 4
29565: NEG
29566: PUSH
29567: LD_INT 3
29569: NEG
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 5
29577: NEG
29578: PUSH
29579: LD_INT 4
29581: NEG
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 5
29589: NEG
29590: PUSH
29591: LD_INT 5
29593: NEG
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 3
29601: NEG
29602: PUSH
29603: LD_INT 5
29605: NEG
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 5
29613: NEG
29614: PUSH
29615: LD_INT 3
29617: NEG
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 0
29625: PUSH
29626: LD_INT 3
29628: NEG
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 0
29636: PUSH
29637: LD_INT 4
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 1
29647: PUSH
29648: LD_INT 3
29650: NEG
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 1
29658: PUSH
29659: LD_INT 2
29661: NEG
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 0
29669: PUSH
29670: LD_INT 2
29672: NEG
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 1
29680: NEG
29681: PUSH
29682: LD_INT 3
29684: NEG
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 1
29692: NEG
29693: PUSH
29694: LD_INT 4
29696: NEG
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 2
29704: PUSH
29705: LD_INT 2
29707: NEG
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 2
29715: NEG
29716: PUSH
29717: LD_INT 4
29719: NEG
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 4
29727: PUSH
29728: LD_INT 0
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 4
29737: PUSH
29738: LD_INT 1
29740: NEG
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 5
29748: PUSH
29749: LD_INT 0
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 5
29758: PUSH
29759: LD_INT 1
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 4
29768: PUSH
29769: LD_INT 1
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 3
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 3
29788: PUSH
29789: LD_INT 1
29791: NEG
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 3
29799: PUSH
29800: LD_INT 2
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 5
29810: PUSH
29811: LD_INT 2
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
29865: LD_ADDR_VAR 0 32
29869: PUSH
29870: LD_INT 4
29872: NEG
29873: PUSH
29874: LD_INT 0
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 4
29883: NEG
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 3
29895: NEG
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 3
29906: NEG
29907: PUSH
29908: LD_INT 1
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 4
29917: NEG
29918: PUSH
29919: LD_INT 1
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 5
29928: NEG
29929: PUSH
29930: LD_INT 0
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 5
29939: NEG
29940: PUSH
29941: LD_INT 1
29943: NEG
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 5
29951: NEG
29952: PUSH
29953: LD_INT 2
29955: NEG
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 3
29963: NEG
29964: PUSH
29965: LD_INT 2
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 3
29974: NEG
29975: PUSH
29976: LD_INT 3
29978: NEG
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 3
29986: NEG
29987: PUSH
29988: LD_INT 4
29990: NEG
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 2
29998: NEG
29999: PUSH
30000: LD_INT 3
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 2
30010: NEG
30011: PUSH
30012: LD_INT 2
30014: NEG
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 3
30022: NEG
30023: PUSH
30024: LD_INT 2
30026: NEG
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 4
30034: NEG
30035: PUSH
30036: LD_INT 3
30038: NEG
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 4
30046: NEG
30047: PUSH
30048: LD_INT 4
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 2
30058: NEG
30059: PUSH
30060: LD_INT 4
30062: NEG
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 4
30070: NEG
30071: PUSH
30072: LD_INT 2
30074: NEG
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 0
30082: PUSH
30083: LD_INT 4
30085: NEG
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 0
30093: PUSH
30094: LD_INT 5
30096: NEG
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: LD_INT 4
30107: NEG
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 1
30115: PUSH
30116: LD_INT 3
30118: NEG
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 0
30126: PUSH
30127: LD_INT 3
30129: NEG
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 1
30137: NEG
30138: PUSH
30139: LD_INT 4
30141: NEG
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 1
30149: NEG
30150: PUSH
30151: LD_INT 5
30153: NEG
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 2
30161: PUSH
30162: LD_INT 3
30164: NEG
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 2
30172: NEG
30173: PUSH
30174: LD_INT 5
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 3
30184: PUSH
30185: LD_INT 0
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 3
30194: PUSH
30195: LD_INT 1
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 4
30205: PUSH
30206: LD_INT 0
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 4
30215: PUSH
30216: LD_INT 1
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 3
30225: PUSH
30226: LD_INT 1
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 2
30235: PUSH
30236: LD_INT 0
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 2
30245: PUSH
30246: LD_INT 1
30248: NEG
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 2
30256: PUSH
30257: LD_INT 2
30259: NEG
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 4
30267: PUSH
30268: LD_INT 2
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 4
30277: PUSH
30278: LD_INT 4
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 4
30287: PUSH
30288: LD_INT 3
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 5
30297: PUSH
30298: LD_INT 4
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 5
30307: PUSH
30308: LD_INT 5
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 4
30317: PUSH
30318: LD_INT 5
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 3
30327: PUSH
30328: LD_INT 4
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 3
30337: PUSH
30338: LD_INT 3
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 5
30347: PUSH
30348: LD_INT 3
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 3
30357: PUSH
30358: LD_INT 5
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
30412: LD_ADDR_VAR 0 33
30416: PUSH
30417: LD_INT 4
30419: NEG
30420: PUSH
30421: LD_INT 4
30423: NEG
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 4
30431: NEG
30432: PUSH
30433: LD_INT 5
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 3
30443: NEG
30444: PUSH
30445: LD_INT 4
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 3
30455: NEG
30456: PUSH
30457: LD_INT 3
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 4
30467: NEG
30468: PUSH
30469: LD_INT 3
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 5
30479: NEG
30480: PUSH
30481: LD_INT 4
30483: NEG
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 5
30491: NEG
30492: PUSH
30493: LD_INT 5
30495: NEG
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 3
30503: NEG
30504: PUSH
30505: LD_INT 5
30507: NEG
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 5
30515: NEG
30516: PUSH
30517: LD_INT 3
30519: NEG
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 0
30527: PUSH
30528: LD_INT 3
30530: NEG
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 0
30538: PUSH
30539: LD_INT 4
30541: NEG
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 1
30549: PUSH
30550: LD_INT 3
30552: NEG
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 1
30560: PUSH
30561: LD_INT 2
30563: NEG
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 0
30571: PUSH
30572: LD_INT 2
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: LD_INT 3
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 1
30594: NEG
30595: PUSH
30596: LD_INT 4
30598: NEG
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 2
30606: PUSH
30607: LD_INT 2
30609: NEG
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 2
30617: NEG
30618: PUSH
30619: LD_INT 4
30621: NEG
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 4
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 4
30639: PUSH
30640: LD_INT 1
30642: NEG
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 5
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 5
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 4
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 3
30680: PUSH
30681: LD_INT 0
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 3
30690: PUSH
30691: LD_INT 1
30693: NEG
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 3
30701: PUSH
30702: LD_INT 2
30704: NEG
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 5
30712: PUSH
30713: LD_INT 2
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 3
30722: PUSH
30723: LD_INT 3
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 3
30732: PUSH
30733: LD_INT 2
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 4
30742: PUSH
30743: LD_INT 3
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 4
30752: PUSH
30753: LD_INT 4
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 3
30762: PUSH
30763: LD_INT 4
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 2
30772: PUSH
30773: LD_INT 3
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 2
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 4
30792: PUSH
30793: LD_INT 2
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 2
30802: PUSH
30803: LD_INT 4
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: LD_INT 4
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: LD_INT 3
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: LD_INT 4
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: LD_INT 5
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: LD_INT 5
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 1
30862: NEG
30863: PUSH
30864: LD_INT 4
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 1
30873: NEG
30874: PUSH
30875: LD_INT 3
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 2
30884: PUSH
30885: LD_INT 5
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 2
30894: NEG
30895: PUSH
30896: LD_INT 3
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
30950: LD_ADDR_VAR 0 34
30954: PUSH
30955: LD_INT 0
30957: PUSH
30958: LD_INT 4
30960: NEG
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 0
30968: PUSH
30969: LD_INT 5
30971: NEG
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 1
30979: PUSH
30980: LD_INT 4
30982: NEG
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 1
30990: PUSH
30991: LD_INT 3
30993: NEG
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 0
31001: PUSH
31002: LD_INT 3
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 1
31012: NEG
31013: PUSH
31014: LD_INT 4
31016: NEG
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 1
31024: NEG
31025: PUSH
31026: LD_INT 5
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 2
31036: PUSH
31037: LD_INT 3
31039: NEG
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 2
31047: NEG
31048: PUSH
31049: LD_INT 5
31051: NEG
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 3
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 3
31069: PUSH
31070: LD_INT 1
31072: NEG
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 4
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 4
31090: PUSH
31091: LD_INT 1
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 3
31100: PUSH
31101: LD_INT 1
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 2
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 2
31120: PUSH
31121: LD_INT 1
31123: NEG
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 2
31131: PUSH
31132: LD_INT 2
31134: NEG
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 4
31142: PUSH
31143: LD_INT 2
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 4
31152: PUSH
31153: LD_INT 4
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 4
31162: PUSH
31163: LD_INT 3
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 5
31172: PUSH
31173: LD_INT 4
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 5
31182: PUSH
31183: LD_INT 5
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 4
31192: PUSH
31193: LD_INT 5
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 3
31202: PUSH
31203: LD_INT 4
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 3
31212: PUSH
31213: LD_INT 3
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 5
31222: PUSH
31223: LD_INT 3
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 3
31232: PUSH
31233: LD_INT 5
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 0
31242: PUSH
31243: LD_INT 3
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: LD_INT 2
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 1
31262: PUSH
31263: LD_INT 3
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 1
31272: PUSH
31273: LD_INT 4
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 0
31282: PUSH
31283: LD_INT 4
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 1
31292: NEG
31293: PUSH
31294: LD_INT 3
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 1
31303: NEG
31304: PUSH
31305: LD_INT 2
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 2
31314: PUSH
31315: LD_INT 4
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 2
31324: NEG
31325: PUSH
31326: LD_INT 2
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 4
31335: NEG
31336: PUSH
31337: LD_INT 0
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 4
31346: NEG
31347: PUSH
31348: LD_INT 1
31350: NEG
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 3
31358: NEG
31359: PUSH
31360: LD_INT 0
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 3
31369: NEG
31370: PUSH
31371: LD_INT 1
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 4
31380: NEG
31381: PUSH
31382: LD_INT 1
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 5
31391: NEG
31392: PUSH
31393: LD_INT 0
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 5
31402: NEG
31403: PUSH
31404: LD_INT 1
31406: NEG
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 5
31414: NEG
31415: PUSH
31416: LD_INT 2
31418: NEG
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 3
31426: NEG
31427: PUSH
31428: LD_INT 2
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: ST_TO_ADDR
// end ; end ;
31482: GO 31485
31484: POP
// case btype of b_depot , b_warehouse :
31485: LD_VAR 0 1
31489: PUSH
31490: LD_INT 0
31492: DOUBLE
31493: EQUAL
31494: IFTRUE 31504
31496: LD_INT 1
31498: DOUBLE
31499: EQUAL
31500: IFTRUE 31504
31502: GO 31705
31504: POP
// case nation of nation_american :
31505: LD_VAR 0 5
31509: PUSH
31510: LD_INT 1
31512: DOUBLE
31513: EQUAL
31514: IFTRUE 31518
31516: GO 31574
31518: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
31519: LD_ADDR_VAR 0 9
31523: PUSH
31524: LD_VAR 0 11
31528: PUSH
31529: LD_VAR 0 12
31533: PUSH
31534: LD_VAR 0 13
31538: PUSH
31539: LD_VAR 0 14
31543: PUSH
31544: LD_VAR 0 15
31548: PUSH
31549: LD_VAR 0 16
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: PUSH
31562: LD_VAR 0 4
31566: PUSH
31567: LD_INT 1
31569: PLUS
31570: ARRAY
31571: ST_TO_ADDR
31572: GO 31703
31574: LD_INT 2
31576: DOUBLE
31577: EQUAL
31578: IFTRUE 31582
31580: GO 31638
31582: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
31583: LD_ADDR_VAR 0 9
31587: PUSH
31588: LD_VAR 0 17
31592: PUSH
31593: LD_VAR 0 18
31597: PUSH
31598: LD_VAR 0 19
31602: PUSH
31603: LD_VAR 0 20
31607: PUSH
31608: LD_VAR 0 21
31612: PUSH
31613: LD_VAR 0 22
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: PUSH
31626: LD_VAR 0 4
31630: PUSH
31631: LD_INT 1
31633: PLUS
31634: ARRAY
31635: ST_TO_ADDR
31636: GO 31703
31638: LD_INT 3
31640: DOUBLE
31641: EQUAL
31642: IFTRUE 31646
31644: GO 31702
31646: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
31647: LD_ADDR_VAR 0 9
31651: PUSH
31652: LD_VAR 0 23
31656: PUSH
31657: LD_VAR 0 24
31661: PUSH
31662: LD_VAR 0 25
31666: PUSH
31667: LD_VAR 0 26
31671: PUSH
31672: LD_VAR 0 27
31676: PUSH
31677: LD_VAR 0 28
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: PUSH
31690: LD_VAR 0 4
31694: PUSH
31695: LD_INT 1
31697: PLUS
31698: ARRAY
31699: ST_TO_ADDR
31700: GO 31703
31702: POP
31703: GO 32258
31705: LD_INT 2
31707: DOUBLE
31708: EQUAL
31709: IFTRUE 31719
31711: LD_INT 3
31713: DOUBLE
31714: EQUAL
31715: IFTRUE 31719
31717: GO 31775
31719: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
31720: LD_ADDR_VAR 0 9
31724: PUSH
31725: LD_VAR 0 29
31729: PUSH
31730: LD_VAR 0 30
31734: PUSH
31735: LD_VAR 0 31
31739: PUSH
31740: LD_VAR 0 32
31744: PUSH
31745: LD_VAR 0 33
31749: PUSH
31750: LD_VAR 0 34
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: PUSH
31763: LD_VAR 0 4
31767: PUSH
31768: LD_INT 1
31770: PLUS
31771: ARRAY
31772: ST_TO_ADDR
31773: GO 32258
31775: LD_INT 16
31777: DOUBLE
31778: EQUAL
31779: IFTRUE 31837
31781: LD_INT 17
31783: DOUBLE
31784: EQUAL
31785: IFTRUE 31837
31787: LD_INT 18
31789: DOUBLE
31790: EQUAL
31791: IFTRUE 31837
31793: LD_INT 19
31795: DOUBLE
31796: EQUAL
31797: IFTRUE 31837
31799: LD_INT 22
31801: DOUBLE
31802: EQUAL
31803: IFTRUE 31837
31805: LD_INT 20
31807: DOUBLE
31808: EQUAL
31809: IFTRUE 31837
31811: LD_INT 21
31813: DOUBLE
31814: EQUAL
31815: IFTRUE 31837
31817: LD_INT 23
31819: DOUBLE
31820: EQUAL
31821: IFTRUE 31837
31823: LD_INT 24
31825: DOUBLE
31826: EQUAL
31827: IFTRUE 31837
31829: LD_INT 25
31831: DOUBLE
31832: EQUAL
31833: IFTRUE 31837
31835: GO 31893
31837: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
31838: LD_ADDR_VAR 0 9
31842: PUSH
31843: LD_VAR 0 35
31847: PUSH
31848: LD_VAR 0 36
31852: PUSH
31853: LD_VAR 0 37
31857: PUSH
31858: LD_VAR 0 38
31862: PUSH
31863: LD_VAR 0 39
31867: PUSH
31868: LD_VAR 0 40
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: PUSH
31881: LD_VAR 0 4
31885: PUSH
31886: LD_INT 1
31888: PLUS
31889: ARRAY
31890: ST_TO_ADDR
31891: GO 32258
31893: LD_INT 6
31895: DOUBLE
31896: EQUAL
31897: IFTRUE 31949
31899: LD_INT 7
31901: DOUBLE
31902: EQUAL
31903: IFTRUE 31949
31905: LD_INT 8
31907: DOUBLE
31908: EQUAL
31909: IFTRUE 31949
31911: LD_INT 13
31913: DOUBLE
31914: EQUAL
31915: IFTRUE 31949
31917: LD_INT 12
31919: DOUBLE
31920: EQUAL
31921: IFTRUE 31949
31923: LD_INT 15
31925: DOUBLE
31926: EQUAL
31927: IFTRUE 31949
31929: LD_INT 11
31931: DOUBLE
31932: EQUAL
31933: IFTRUE 31949
31935: LD_INT 14
31937: DOUBLE
31938: EQUAL
31939: IFTRUE 31949
31941: LD_INT 10
31943: DOUBLE
31944: EQUAL
31945: IFTRUE 31949
31947: GO 32005
31949: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
31950: LD_ADDR_VAR 0 9
31954: PUSH
31955: LD_VAR 0 41
31959: PUSH
31960: LD_VAR 0 42
31964: PUSH
31965: LD_VAR 0 43
31969: PUSH
31970: LD_VAR 0 44
31974: PUSH
31975: LD_VAR 0 45
31979: PUSH
31980: LD_VAR 0 46
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: PUSH
31993: LD_VAR 0 4
31997: PUSH
31998: LD_INT 1
32000: PLUS
32001: ARRAY
32002: ST_TO_ADDR
32003: GO 32258
32005: LD_INT 36
32007: DOUBLE
32008: EQUAL
32009: IFTRUE 32013
32011: GO 32069
32013: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32014: LD_ADDR_VAR 0 9
32018: PUSH
32019: LD_VAR 0 47
32023: PUSH
32024: LD_VAR 0 48
32028: PUSH
32029: LD_VAR 0 49
32033: PUSH
32034: LD_VAR 0 50
32038: PUSH
32039: LD_VAR 0 51
32043: PUSH
32044: LD_VAR 0 52
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: PUSH
32057: LD_VAR 0 4
32061: PUSH
32062: LD_INT 1
32064: PLUS
32065: ARRAY
32066: ST_TO_ADDR
32067: GO 32258
32069: LD_INT 4
32071: DOUBLE
32072: EQUAL
32073: IFTRUE 32095
32075: LD_INT 5
32077: DOUBLE
32078: EQUAL
32079: IFTRUE 32095
32081: LD_INT 34
32083: DOUBLE
32084: EQUAL
32085: IFTRUE 32095
32087: LD_INT 37
32089: DOUBLE
32090: EQUAL
32091: IFTRUE 32095
32093: GO 32151
32095: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32096: LD_ADDR_VAR 0 9
32100: PUSH
32101: LD_VAR 0 53
32105: PUSH
32106: LD_VAR 0 54
32110: PUSH
32111: LD_VAR 0 55
32115: PUSH
32116: LD_VAR 0 56
32120: PUSH
32121: LD_VAR 0 57
32125: PUSH
32126: LD_VAR 0 58
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: PUSH
32139: LD_VAR 0 4
32143: PUSH
32144: LD_INT 1
32146: PLUS
32147: ARRAY
32148: ST_TO_ADDR
32149: GO 32258
32151: LD_INT 31
32153: DOUBLE
32154: EQUAL
32155: IFTRUE 32201
32157: LD_INT 32
32159: DOUBLE
32160: EQUAL
32161: IFTRUE 32201
32163: LD_INT 33
32165: DOUBLE
32166: EQUAL
32167: IFTRUE 32201
32169: LD_INT 27
32171: DOUBLE
32172: EQUAL
32173: IFTRUE 32201
32175: LD_INT 26
32177: DOUBLE
32178: EQUAL
32179: IFTRUE 32201
32181: LD_INT 28
32183: DOUBLE
32184: EQUAL
32185: IFTRUE 32201
32187: LD_INT 29
32189: DOUBLE
32190: EQUAL
32191: IFTRUE 32201
32193: LD_INT 30
32195: DOUBLE
32196: EQUAL
32197: IFTRUE 32201
32199: GO 32257
32201: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
32202: LD_ADDR_VAR 0 9
32206: PUSH
32207: LD_VAR 0 59
32211: PUSH
32212: LD_VAR 0 60
32216: PUSH
32217: LD_VAR 0 61
32221: PUSH
32222: LD_VAR 0 62
32226: PUSH
32227: LD_VAR 0 63
32231: PUSH
32232: LD_VAR 0 64
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: PUSH
32245: LD_VAR 0 4
32249: PUSH
32250: LD_INT 1
32252: PLUS
32253: ARRAY
32254: ST_TO_ADDR
32255: GO 32258
32257: POP
// temp_list2 = [ ] ;
32258: LD_ADDR_VAR 0 10
32262: PUSH
32263: EMPTY
32264: ST_TO_ADDR
// for i in temp_list do
32265: LD_ADDR_VAR 0 8
32269: PUSH
32270: LD_VAR 0 9
32274: PUSH
32275: FOR_IN
32276: IFFALSE 32328
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
32278: LD_ADDR_VAR 0 10
32282: PUSH
32283: LD_VAR 0 10
32287: PUSH
32288: LD_VAR 0 8
32292: PUSH
32293: LD_INT 1
32295: ARRAY
32296: PUSH
32297: LD_VAR 0 2
32301: PLUS
32302: PUSH
32303: LD_VAR 0 8
32307: PUSH
32308: LD_INT 2
32310: ARRAY
32311: PUSH
32312: LD_VAR 0 3
32316: PLUS
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: EMPTY
32323: LIST
32324: ADD
32325: ST_TO_ADDR
32326: GO 32275
32328: POP
32329: POP
// result = temp_list2 ;
32330: LD_ADDR_VAR 0 7
32334: PUSH
32335: LD_VAR 0 10
32339: ST_TO_ADDR
// end ;
32340: LD_VAR 0 7
32344: RET
// export function EnemyInRange ( unit , dist ) ; begin
32345: LD_INT 0
32347: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
32348: LD_ADDR_VAR 0 3
32352: PUSH
32353: LD_VAR 0 1
32357: PPUSH
32358: CALL_OW 255
32362: PPUSH
32363: LD_VAR 0 1
32367: PPUSH
32368: CALL_OW 250
32372: PPUSH
32373: LD_VAR 0 1
32377: PPUSH
32378: CALL_OW 251
32382: PPUSH
32383: LD_VAR 0 2
32387: PPUSH
32388: CALL 6116 0 4
32392: PUSH
32393: LD_INT 4
32395: ARRAY
32396: ST_TO_ADDR
// end ;
32397: LD_VAR 0 3
32401: RET
// export function PlayerSeeMe ( unit ) ; begin
32402: LD_INT 0
32404: PPUSH
// result := See ( your_side , unit ) ;
32405: LD_ADDR_VAR 0 2
32409: PUSH
32410: LD_OWVAR 2
32414: PPUSH
32415: LD_VAR 0 1
32419: PPUSH
32420: CALL_OW 292
32424: ST_TO_ADDR
// end ;
32425: LD_VAR 0 2
32429: RET
// export function ReverseDir ( unit ) ; begin
32430: LD_INT 0
32432: PPUSH
// if not unit then
32433: LD_VAR 0 1
32437: NOT
32438: IFFALSE 32442
// exit ;
32440: GO 32465
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
32442: LD_ADDR_VAR 0 2
32446: PUSH
32447: LD_VAR 0 1
32451: PPUSH
32452: CALL_OW 254
32456: PUSH
32457: LD_INT 3
32459: PLUS
32460: PUSH
32461: LD_INT 6
32463: MOD
32464: ST_TO_ADDR
// end ;
32465: LD_VAR 0 2
32469: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
32470: LD_INT 0
32472: PPUSH
32473: PPUSH
32474: PPUSH
32475: PPUSH
32476: PPUSH
// if not hexes then
32477: LD_VAR 0 2
32481: NOT
32482: IFFALSE 32486
// exit ;
32484: GO 32634
// dist := 9999 ;
32486: LD_ADDR_VAR 0 5
32490: PUSH
32491: LD_INT 9999
32493: ST_TO_ADDR
// for i = 1 to hexes do
32494: LD_ADDR_VAR 0 4
32498: PUSH
32499: DOUBLE
32500: LD_INT 1
32502: DEC
32503: ST_TO_ADDR
32504: LD_VAR 0 2
32508: PUSH
32509: FOR_TO
32510: IFFALSE 32622
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
32512: LD_VAR 0 1
32516: PPUSH
32517: LD_VAR 0 2
32521: PUSH
32522: LD_VAR 0 4
32526: ARRAY
32527: PUSH
32528: LD_INT 1
32530: ARRAY
32531: PPUSH
32532: LD_VAR 0 2
32536: PUSH
32537: LD_VAR 0 4
32541: ARRAY
32542: PUSH
32543: LD_INT 2
32545: ARRAY
32546: PPUSH
32547: CALL_OW 297
32551: PUSH
32552: LD_VAR 0 5
32556: LESS
32557: IFFALSE 32620
// begin hex := hexes [ i ] ;
32559: LD_ADDR_VAR 0 7
32563: PUSH
32564: LD_VAR 0 2
32568: PUSH
32569: LD_VAR 0 4
32573: ARRAY
32574: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32575: LD_ADDR_VAR 0 5
32579: PUSH
32580: LD_VAR 0 1
32584: PPUSH
32585: LD_VAR 0 2
32589: PUSH
32590: LD_VAR 0 4
32594: ARRAY
32595: PUSH
32596: LD_INT 1
32598: ARRAY
32599: PPUSH
32600: LD_VAR 0 2
32604: PUSH
32605: LD_VAR 0 4
32609: ARRAY
32610: PUSH
32611: LD_INT 2
32613: ARRAY
32614: PPUSH
32615: CALL_OW 297
32619: ST_TO_ADDR
// end ; end ;
32620: GO 32509
32622: POP
32623: POP
// result := hex ;
32624: LD_ADDR_VAR 0 3
32628: PUSH
32629: LD_VAR 0 7
32633: ST_TO_ADDR
// end ;
32634: LD_VAR 0 3
32638: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
32639: LD_INT 0
32641: PPUSH
32642: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
32643: LD_VAR 0 1
32647: NOT
32648: PUSH
32649: LD_VAR 0 1
32653: PUSH
32654: LD_INT 21
32656: PUSH
32657: LD_INT 2
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 23
32666: PUSH
32667: LD_INT 2
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PPUSH
32678: CALL_OW 69
32682: IN
32683: NOT
32684: OR
32685: IFFALSE 32689
// exit ;
32687: GO 32736
// for i = 1 to 3 do
32689: LD_ADDR_VAR 0 3
32693: PUSH
32694: DOUBLE
32695: LD_INT 1
32697: DEC
32698: ST_TO_ADDR
32699: LD_INT 3
32701: PUSH
32702: FOR_TO
32703: IFFALSE 32734
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
32705: LD_VAR 0 1
32709: PPUSH
32710: CALL_OW 250
32714: PPUSH
32715: LD_VAR 0 1
32719: PPUSH
32720: CALL_OW 251
32724: PPUSH
32725: LD_INT 1
32727: PPUSH
32728: CALL_OW 453
32732: GO 32702
32734: POP
32735: POP
// end ;
32736: LD_VAR 0 2
32740: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
32741: LD_INT 0
32743: PPUSH
32744: PPUSH
32745: PPUSH
32746: PPUSH
32747: PPUSH
32748: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
32749: LD_VAR 0 1
32753: NOT
32754: PUSH
32755: LD_VAR 0 2
32759: NOT
32760: OR
32761: PUSH
32762: LD_VAR 0 1
32766: PPUSH
32767: CALL_OW 314
32771: OR
32772: IFFALSE 32776
// exit ;
32774: GO 33217
// x := GetX ( enemy_unit ) ;
32776: LD_ADDR_VAR 0 7
32780: PUSH
32781: LD_VAR 0 2
32785: PPUSH
32786: CALL_OW 250
32790: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
32791: LD_ADDR_VAR 0 8
32795: PUSH
32796: LD_VAR 0 2
32800: PPUSH
32801: CALL_OW 251
32805: ST_TO_ADDR
// if not x or not y then
32806: LD_VAR 0 7
32810: NOT
32811: PUSH
32812: LD_VAR 0 8
32816: NOT
32817: OR
32818: IFFALSE 32822
// exit ;
32820: GO 33217
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
32822: LD_ADDR_VAR 0 6
32826: PUSH
32827: LD_VAR 0 7
32831: PPUSH
32832: LD_INT 0
32834: PPUSH
32835: LD_INT 4
32837: PPUSH
32838: CALL_OW 272
32842: PUSH
32843: LD_VAR 0 8
32847: PPUSH
32848: LD_INT 0
32850: PPUSH
32851: LD_INT 4
32853: PPUSH
32854: CALL_OW 273
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_VAR 0 7
32867: PPUSH
32868: LD_INT 1
32870: PPUSH
32871: LD_INT 4
32873: PPUSH
32874: CALL_OW 272
32878: PUSH
32879: LD_VAR 0 8
32883: PPUSH
32884: LD_INT 1
32886: PPUSH
32887: LD_INT 4
32889: PPUSH
32890: CALL_OW 273
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_VAR 0 7
32903: PPUSH
32904: LD_INT 2
32906: PPUSH
32907: LD_INT 4
32909: PPUSH
32910: CALL_OW 272
32914: PUSH
32915: LD_VAR 0 8
32919: PPUSH
32920: LD_INT 2
32922: PPUSH
32923: LD_INT 4
32925: PPUSH
32926: CALL_OW 273
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_VAR 0 7
32939: PPUSH
32940: LD_INT 3
32942: PPUSH
32943: LD_INT 4
32945: PPUSH
32946: CALL_OW 272
32950: PUSH
32951: LD_VAR 0 8
32955: PPUSH
32956: LD_INT 3
32958: PPUSH
32959: LD_INT 4
32961: PPUSH
32962: CALL_OW 273
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_VAR 0 7
32975: PPUSH
32976: LD_INT 4
32978: PPUSH
32979: LD_INT 4
32981: PPUSH
32982: CALL_OW 272
32986: PUSH
32987: LD_VAR 0 8
32991: PPUSH
32992: LD_INT 4
32994: PPUSH
32995: LD_INT 4
32997: PPUSH
32998: CALL_OW 273
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_VAR 0 7
33011: PPUSH
33012: LD_INT 5
33014: PPUSH
33015: LD_INT 4
33017: PPUSH
33018: CALL_OW 272
33022: PUSH
33023: LD_VAR 0 8
33027: PPUSH
33028: LD_INT 5
33030: PPUSH
33031: LD_INT 4
33033: PPUSH
33034: CALL_OW 273
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: ST_TO_ADDR
// for i = tmp downto 1 do
33051: LD_ADDR_VAR 0 4
33055: PUSH
33056: DOUBLE
33057: LD_VAR 0 6
33061: INC
33062: ST_TO_ADDR
33063: LD_INT 1
33065: PUSH
33066: FOR_DOWNTO
33067: IFFALSE 33168
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33069: LD_VAR 0 6
33073: PUSH
33074: LD_VAR 0 4
33078: ARRAY
33079: PUSH
33080: LD_INT 1
33082: ARRAY
33083: PPUSH
33084: LD_VAR 0 6
33088: PUSH
33089: LD_VAR 0 4
33093: ARRAY
33094: PUSH
33095: LD_INT 2
33097: ARRAY
33098: PPUSH
33099: CALL_OW 488
33103: NOT
33104: PUSH
33105: LD_VAR 0 6
33109: PUSH
33110: LD_VAR 0 4
33114: ARRAY
33115: PUSH
33116: LD_INT 1
33118: ARRAY
33119: PPUSH
33120: LD_VAR 0 6
33124: PUSH
33125: LD_VAR 0 4
33129: ARRAY
33130: PUSH
33131: LD_INT 2
33133: ARRAY
33134: PPUSH
33135: CALL_OW 428
33139: PUSH
33140: LD_INT 0
33142: NONEQUAL
33143: OR
33144: IFFALSE 33166
// tmp := Delete ( tmp , i ) ;
33146: LD_ADDR_VAR 0 6
33150: PUSH
33151: LD_VAR 0 6
33155: PPUSH
33156: LD_VAR 0 4
33160: PPUSH
33161: CALL_OW 3
33165: ST_TO_ADDR
33166: GO 33066
33168: POP
33169: POP
// j := GetClosestHex ( unit , tmp ) ;
33170: LD_ADDR_VAR 0 5
33174: PUSH
33175: LD_VAR 0 1
33179: PPUSH
33180: LD_VAR 0 6
33184: PPUSH
33185: CALL 32470 0 2
33189: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
33190: LD_VAR 0 1
33194: PPUSH
33195: LD_VAR 0 5
33199: PUSH
33200: LD_INT 1
33202: ARRAY
33203: PPUSH
33204: LD_VAR 0 5
33208: PUSH
33209: LD_INT 2
33211: ARRAY
33212: PPUSH
33213: CALL_OW 111
// end ;
33217: LD_VAR 0 3
33221: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
33222: LD_INT 0
33224: PPUSH
33225: PPUSH
33226: PPUSH
// uc_side = 0 ;
33227: LD_ADDR_OWVAR 20
33231: PUSH
33232: LD_INT 0
33234: ST_TO_ADDR
// uc_nation = 0 ;
33235: LD_ADDR_OWVAR 21
33239: PUSH
33240: LD_INT 0
33242: ST_TO_ADDR
// InitHc_All ( ) ;
33243: CALL_OW 584
// InitVc ;
33247: CALL_OW 20
// if mastodonts then
33251: LD_VAR 0 6
33255: IFFALSE 33322
// for i = 1 to mastodonts do
33257: LD_ADDR_VAR 0 11
33261: PUSH
33262: DOUBLE
33263: LD_INT 1
33265: DEC
33266: ST_TO_ADDR
33267: LD_VAR 0 6
33271: PUSH
33272: FOR_TO
33273: IFFALSE 33320
// begin vc_chassis := 31 ;
33275: LD_ADDR_OWVAR 37
33279: PUSH
33280: LD_INT 31
33282: ST_TO_ADDR
// vc_control := control_rider ;
33283: LD_ADDR_OWVAR 38
33287: PUSH
33288: LD_INT 4
33290: ST_TO_ADDR
// animal := CreateVehicle ;
33291: LD_ADDR_VAR 0 12
33295: PUSH
33296: CALL_OW 45
33300: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33301: LD_VAR 0 12
33305: PPUSH
33306: LD_VAR 0 8
33310: PPUSH
33311: LD_INT 0
33313: PPUSH
33314: CALL 35510 0 3
// end ;
33318: GO 33272
33320: POP
33321: POP
// if horses then
33322: LD_VAR 0 5
33326: IFFALSE 33393
// for i = 1 to horses do
33328: LD_ADDR_VAR 0 11
33332: PUSH
33333: DOUBLE
33334: LD_INT 1
33336: DEC
33337: ST_TO_ADDR
33338: LD_VAR 0 5
33342: PUSH
33343: FOR_TO
33344: IFFALSE 33391
// begin hc_class := 21 ;
33346: LD_ADDR_OWVAR 28
33350: PUSH
33351: LD_INT 21
33353: ST_TO_ADDR
// hc_gallery :=  ;
33354: LD_ADDR_OWVAR 33
33358: PUSH
33359: LD_STRING 
33361: ST_TO_ADDR
// animal := CreateHuman ;
33362: LD_ADDR_VAR 0 12
33366: PUSH
33367: CALL_OW 44
33371: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33372: LD_VAR 0 12
33376: PPUSH
33377: LD_VAR 0 8
33381: PPUSH
33382: LD_INT 0
33384: PPUSH
33385: CALL 35510 0 3
// end ;
33389: GO 33343
33391: POP
33392: POP
// if birds then
33393: LD_VAR 0 1
33397: IFFALSE 33464
// for i = 1 to birds do
33399: LD_ADDR_VAR 0 11
33403: PUSH
33404: DOUBLE
33405: LD_INT 1
33407: DEC
33408: ST_TO_ADDR
33409: LD_VAR 0 1
33413: PUSH
33414: FOR_TO
33415: IFFALSE 33462
// begin hc_class = 18 ;
33417: LD_ADDR_OWVAR 28
33421: PUSH
33422: LD_INT 18
33424: ST_TO_ADDR
// hc_gallery =  ;
33425: LD_ADDR_OWVAR 33
33429: PUSH
33430: LD_STRING 
33432: ST_TO_ADDR
// animal := CreateHuman ;
33433: LD_ADDR_VAR 0 12
33437: PUSH
33438: CALL_OW 44
33442: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33443: LD_VAR 0 12
33447: PPUSH
33448: LD_VAR 0 8
33452: PPUSH
33453: LD_INT 0
33455: PPUSH
33456: CALL 35510 0 3
// end ;
33460: GO 33414
33462: POP
33463: POP
// if tigers then
33464: LD_VAR 0 2
33468: IFFALSE 33552
// for i = 1 to tigers do
33470: LD_ADDR_VAR 0 11
33474: PUSH
33475: DOUBLE
33476: LD_INT 1
33478: DEC
33479: ST_TO_ADDR
33480: LD_VAR 0 2
33484: PUSH
33485: FOR_TO
33486: IFFALSE 33550
// begin hc_class = class_tiger ;
33488: LD_ADDR_OWVAR 28
33492: PUSH
33493: LD_INT 14
33495: ST_TO_ADDR
// hc_gallery =  ;
33496: LD_ADDR_OWVAR 33
33500: PUSH
33501: LD_STRING 
33503: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
33504: LD_ADDR_OWVAR 35
33508: PUSH
33509: LD_INT 7
33511: NEG
33512: PPUSH
33513: LD_INT 7
33515: PPUSH
33516: CALL_OW 12
33520: ST_TO_ADDR
// animal := CreateHuman ;
33521: LD_ADDR_VAR 0 12
33525: PUSH
33526: CALL_OW 44
33530: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33531: LD_VAR 0 12
33535: PPUSH
33536: LD_VAR 0 8
33540: PPUSH
33541: LD_INT 0
33543: PPUSH
33544: CALL 35510 0 3
// end ;
33548: GO 33485
33550: POP
33551: POP
// if apemans then
33552: LD_VAR 0 3
33556: IFFALSE 33679
// for i = 1 to apemans do
33558: LD_ADDR_VAR 0 11
33562: PUSH
33563: DOUBLE
33564: LD_INT 1
33566: DEC
33567: ST_TO_ADDR
33568: LD_VAR 0 3
33572: PUSH
33573: FOR_TO
33574: IFFALSE 33677
// begin hc_class = class_apeman ;
33576: LD_ADDR_OWVAR 28
33580: PUSH
33581: LD_INT 12
33583: ST_TO_ADDR
// hc_gallery =  ;
33584: LD_ADDR_OWVAR 33
33588: PUSH
33589: LD_STRING 
33591: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
33592: LD_ADDR_OWVAR 35
33596: PUSH
33597: LD_INT 5
33599: NEG
33600: PPUSH
33601: LD_INT 5
33603: PPUSH
33604: CALL_OW 12
33608: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
33609: LD_ADDR_OWVAR 31
33613: PUSH
33614: LD_INT 1
33616: PPUSH
33617: LD_INT 3
33619: PPUSH
33620: CALL_OW 12
33624: PUSH
33625: LD_INT 1
33627: PPUSH
33628: LD_INT 3
33630: PPUSH
33631: CALL_OW 12
33635: PUSH
33636: LD_INT 0
33638: PUSH
33639: LD_INT 0
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: ST_TO_ADDR
// animal := CreateHuman ;
33648: LD_ADDR_VAR 0 12
33652: PUSH
33653: CALL_OW 44
33657: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33658: LD_VAR 0 12
33662: PPUSH
33663: LD_VAR 0 8
33667: PPUSH
33668: LD_INT 0
33670: PPUSH
33671: CALL 35510 0 3
// end ;
33675: GO 33573
33677: POP
33678: POP
// if enchidnas then
33679: LD_VAR 0 4
33683: IFFALSE 33750
// for i = 1 to enchidnas do
33685: LD_ADDR_VAR 0 11
33689: PUSH
33690: DOUBLE
33691: LD_INT 1
33693: DEC
33694: ST_TO_ADDR
33695: LD_VAR 0 4
33699: PUSH
33700: FOR_TO
33701: IFFALSE 33748
// begin hc_class = 13 ;
33703: LD_ADDR_OWVAR 28
33707: PUSH
33708: LD_INT 13
33710: ST_TO_ADDR
// hc_gallery =  ;
33711: LD_ADDR_OWVAR 33
33715: PUSH
33716: LD_STRING 
33718: ST_TO_ADDR
// animal := CreateHuman ;
33719: LD_ADDR_VAR 0 12
33723: PUSH
33724: CALL_OW 44
33728: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33729: LD_VAR 0 12
33733: PPUSH
33734: LD_VAR 0 8
33738: PPUSH
33739: LD_INT 0
33741: PPUSH
33742: CALL 35510 0 3
// end ;
33746: GO 33700
33748: POP
33749: POP
// if fishes then
33750: LD_VAR 0 7
33754: IFFALSE 33821
// for i = 1 to fishes do
33756: LD_ADDR_VAR 0 11
33760: PUSH
33761: DOUBLE
33762: LD_INT 1
33764: DEC
33765: ST_TO_ADDR
33766: LD_VAR 0 7
33770: PUSH
33771: FOR_TO
33772: IFFALSE 33819
// begin hc_class = 20 ;
33774: LD_ADDR_OWVAR 28
33778: PUSH
33779: LD_INT 20
33781: ST_TO_ADDR
// hc_gallery =  ;
33782: LD_ADDR_OWVAR 33
33786: PUSH
33787: LD_STRING 
33789: ST_TO_ADDR
// animal := CreateHuman ;
33790: LD_ADDR_VAR 0 12
33794: PUSH
33795: CALL_OW 44
33799: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
33800: LD_VAR 0 12
33804: PPUSH
33805: LD_VAR 0 9
33809: PPUSH
33810: LD_INT 0
33812: PPUSH
33813: CALL 35510 0 3
// end ;
33817: GO 33771
33819: POP
33820: POP
// end ;
33821: LD_VAR 0 10
33825: RET
// export function WantHeal ( sci , unit ) ; begin
33826: LD_INT 0
33828: PPUSH
// if GetTaskList ( sci ) > 0 then
33829: LD_VAR 0 1
33833: PPUSH
33834: CALL_OW 437
33838: PUSH
33839: LD_INT 0
33841: GREATER
33842: IFFALSE 33912
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
33844: LD_VAR 0 1
33848: PPUSH
33849: CALL_OW 437
33853: PUSH
33854: LD_INT 1
33856: ARRAY
33857: PUSH
33858: LD_INT 1
33860: ARRAY
33861: PUSH
33862: LD_STRING l
33864: EQUAL
33865: PUSH
33866: LD_VAR 0 1
33870: PPUSH
33871: CALL_OW 437
33875: PUSH
33876: LD_INT 1
33878: ARRAY
33879: PUSH
33880: LD_INT 4
33882: ARRAY
33883: PUSH
33884: LD_VAR 0 2
33888: EQUAL
33889: AND
33890: IFFALSE 33902
// result := true else
33892: LD_ADDR_VAR 0 3
33896: PUSH
33897: LD_INT 1
33899: ST_TO_ADDR
33900: GO 33910
// result := false ;
33902: LD_ADDR_VAR 0 3
33906: PUSH
33907: LD_INT 0
33909: ST_TO_ADDR
// end else
33910: GO 33920
// result := false ;
33912: LD_ADDR_VAR 0 3
33916: PUSH
33917: LD_INT 0
33919: ST_TO_ADDR
// end ;
33920: LD_VAR 0 3
33924: RET
// export function HealTarget ( sci ) ; begin
33925: LD_INT 0
33927: PPUSH
// if not sci then
33928: LD_VAR 0 1
33932: NOT
33933: IFFALSE 33937
// exit ;
33935: GO 34002
// result := 0 ;
33937: LD_ADDR_VAR 0 2
33941: PUSH
33942: LD_INT 0
33944: ST_TO_ADDR
// if GetTaskList ( sci ) then
33945: LD_VAR 0 1
33949: PPUSH
33950: CALL_OW 437
33954: IFFALSE 34002
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
33956: LD_VAR 0 1
33960: PPUSH
33961: CALL_OW 437
33965: PUSH
33966: LD_INT 1
33968: ARRAY
33969: PUSH
33970: LD_INT 1
33972: ARRAY
33973: PUSH
33974: LD_STRING l
33976: EQUAL
33977: IFFALSE 34002
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
33979: LD_ADDR_VAR 0 2
33983: PUSH
33984: LD_VAR 0 1
33988: PPUSH
33989: CALL_OW 437
33993: PUSH
33994: LD_INT 1
33996: ARRAY
33997: PUSH
33998: LD_INT 4
34000: ARRAY
34001: ST_TO_ADDR
// end ;
34002: LD_VAR 0 2
34006: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
34007: LD_INT 0
34009: PPUSH
34010: PPUSH
34011: PPUSH
34012: PPUSH
// if not base_units then
34013: LD_VAR 0 1
34017: NOT
34018: IFFALSE 34022
// exit ;
34020: GO 34109
// result := false ;
34022: LD_ADDR_VAR 0 2
34026: PUSH
34027: LD_INT 0
34029: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
34030: LD_ADDR_VAR 0 5
34034: PUSH
34035: LD_VAR 0 1
34039: PPUSH
34040: LD_INT 21
34042: PUSH
34043: LD_INT 3
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PPUSH
34050: CALL_OW 72
34054: ST_TO_ADDR
// if not tmp then
34055: LD_VAR 0 5
34059: NOT
34060: IFFALSE 34064
// exit ;
34062: GO 34109
// for i in tmp do
34064: LD_ADDR_VAR 0 3
34068: PUSH
34069: LD_VAR 0 5
34073: PUSH
34074: FOR_IN
34075: IFFALSE 34107
// begin result := EnemyInRange ( i , 22 ) ;
34077: LD_ADDR_VAR 0 2
34081: PUSH
34082: LD_VAR 0 3
34086: PPUSH
34087: LD_INT 22
34089: PPUSH
34090: CALL 32345 0 2
34094: ST_TO_ADDR
// if result then
34095: LD_VAR 0 2
34099: IFFALSE 34105
// exit ;
34101: POP
34102: POP
34103: GO 34109
// end ;
34105: GO 34074
34107: POP
34108: POP
// end ;
34109: LD_VAR 0 2
34113: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
34114: LD_INT 0
34116: PPUSH
34117: PPUSH
// if not units then
34118: LD_VAR 0 1
34122: NOT
34123: IFFALSE 34127
// exit ;
34125: GO 34197
// result := [ ] ;
34127: LD_ADDR_VAR 0 3
34131: PUSH
34132: EMPTY
34133: ST_TO_ADDR
// for i in units do
34134: LD_ADDR_VAR 0 4
34138: PUSH
34139: LD_VAR 0 1
34143: PUSH
34144: FOR_IN
34145: IFFALSE 34195
// if GetTag ( i ) = tag then
34147: LD_VAR 0 4
34151: PPUSH
34152: CALL_OW 110
34156: PUSH
34157: LD_VAR 0 2
34161: EQUAL
34162: IFFALSE 34193
// result := Insert ( result , result + 1 , i ) ;
34164: LD_ADDR_VAR 0 3
34168: PUSH
34169: LD_VAR 0 3
34173: PPUSH
34174: LD_VAR 0 3
34178: PUSH
34179: LD_INT 1
34181: PLUS
34182: PPUSH
34183: LD_VAR 0 4
34187: PPUSH
34188: CALL_OW 2
34192: ST_TO_ADDR
34193: GO 34144
34195: POP
34196: POP
// end ;
34197: LD_VAR 0 3
34201: RET
// export function IsDriver ( un ) ; begin
34202: LD_INT 0
34204: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
34205: LD_ADDR_VAR 0 2
34209: PUSH
34210: LD_VAR 0 1
34214: PUSH
34215: LD_INT 55
34217: PUSH
34218: EMPTY
34219: LIST
34220: PPUSH
34221: CALL_OW 69
34225: IN
34226: ST_TO_ADDR
// end ;
34227: LD_VAR 0 2
34231: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
34232: LD_INT 0
34234: PPUSH
34235: PPUSH
// list := [ ] ;
34236: LD_ADDR_VAR 0 5
34240: PUSH
34241: EMPTY
34242: ST_TO_ADDR
// case d of 0 :
34243: LD_VAR 0 3
34247: PUSH
34248: LD_INT 0
34250: DOUBLE
34251: EQUAL
34252: IFTRUE 34256
34254: GO 34389
34256: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
34257: LD_ADDR_VAR 0 5
34261: PUSH
34262: LD_VAR 0 1
34266: PUSH
34267: LD_INT 4
34269: MINUS
34270: PUSH
34271: LD_VAR 0 2
34275: PUSH
34276: LD_INT 4
34278: MINUS
34279: PUSH
34280: LD_INT 2
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: LIST
34287: PUSH
34288: LD_VAR 0 1
34292: PUSH
34293: LD_INT 3
34295: MINUS
34296: PUSH
34297: LD_VAR 0 2
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: LIST
34309: PUSH
34310: LD_VAR 0 1
34314: PUSH
34315: LD_INT 4
34317: PLUS
34318: PUSH
34319: LD_VAR 0 2
34323: PUSH
34324: LD_INT 4
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: LIST
34331: PUSH
34332: LD_VAR 0 1
34336: PUSH
34337: LD_INT 3
34339: PLUS
34340: PUSH
34341: LD_VAR 0 2
34345: PUSH
34346: LD_INT 3
34348: PLUS
34349: PUSH
34350: LD_INT 5
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: LIST
34357: PUSH
34358: LD_VAR 0 1
34362: PUSH
34363: LD_VAR 0 2
34367: PUSH
34368: LD_INT 4
34370: PLUS
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: LIST
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: ST_TO_ADDR
// end ; 1 :
34387: GO 35087
34389: LD_INT 1
34391: DOUBLE
34392: EQUAL
34393: IFTRUE 34397
34395: GO 34530
34397: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
34398: LD_ADDR_VAR 0 5
34402: PUSH
34403: LD_VAR 0 1
34407: PUSH
34408: LD_VAR 0 2
34412: PUSH
34413: LD_INT 4
34415: MINUS
34416: PUSH
34417: LD_INT 3
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: LIST
34424: PUSH
34425: LD_VAR 0 1
34429: PUSH
34430: LD_INT 3
34432: MINUS
34433: PUSH
34434: LD_VAR 0 2
34438: PUSH
34439: LD_INT 3
34441: MINUS
34442: PUSH
34443: LD_INT 2
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: PUSH
34451: LD_VAR 0 1
34455: PUSH
34456: LD_INT 4
34458: MINUS
34459: PUSH
34460: LD_VAR 0 2
34464: PUSH
34465: LD_INT 1
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: LIST
34472: PUSH
34473: LD_VAR 0 1
34477: PUSH
34478: LD_VAR 0 2
34482: PUSH
34483: LD_INT 3
34485: PLUS
34486: PUSH
34487: LD_INT 0
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: LIST
34494: PUSH
34495: LD_VAR 0 1
34499: PUSH
34500: LD_INT 4
34502: PLUS
34503: PUSH
34504: LD_VAR 0 2
34508: PUSH
34509: LD_INT 4
34511: PLUS
34512: PUSH
34513: LD_INT 5
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: LIST
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: ST_TO_ADDR
// end ; 2 :
34528: GO 35087
34530: LD_INT 2
34532: DOUBLE
34533: EQUAL
34534: IFTRUE 34538
34536: GO 34667
34538: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
34539: LD_ADDR_VAR 0 5
34543: PUSH
34544: LD_VAR 0 1
34548: PUSH
34549: LD_VAR 0 2
34553: PUSH
34554: LD_INT 3
34556: MINUS
34557: PUSH
34558: LD_INT 3
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: LIST
34565: PUSH
34566: LD_VAR 0 1
34570: PUSH
34571: LD_INT 4
34573: PLUS
34574: PUSH
34575: LD_VAR 0 2
34579: PUSH
34580: LD_INT 4
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: LIST
34587: PUSH
34588: LD_VAR 0 1
34592: PUSH
34593: LD_VAR 0 2
34597: PUSH
34598: LD_INT 4
34600: PLUS
34601: PUSH
34602: LD_INT 0
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: LIST
34609: PUSH
34610: LD_VAR 0 1
34614: PUSH
34615: LD_INT 3
34617: MINUS
34618: PUSH
34619: LD_VAR 0 2
34623: PUSH
34624: LD_INT 1
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: LIST
34631: PUSH
34632: LD_VAR 0 1
34636: PUSH
34637: LD_INT 4
34639: MINUS
34640: PUSH
34641: LD_VAR 0 2
34645: PUSH
34646: LD_INT 4
34648: MINUS
34649: PUSH
34650: LD_INT 2
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: LIST
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: ST_TO_ADDR
// end ; 3 :
34665: GO 35087
34667: LD_INT 3
34669: DOUBLE
34670: EQUAL
34671: IFTRUE 34675
34673: GO 34808
34675: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
34676: LD_ADDR_VAR 0 5
34680: PUSH
34681: LD_VAR 0 1
34685: PUSH
34686: LD_INT 3
34688: PLUS
34689: PUSH
34690: LD_VAR 0 2
34694: PUSH
34695: LD_INT 4
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: LIST
34702: PUSH
34703: LD_VAR 0 1
34707: PUSH
34708: LD_INT 4
34710: PLUS
34711: PUSH
34712: LD_VAR 0 2
34716: PUSH
34717: LD_INT 4
34719: PLUS
34720: PUSH
34721: LD_INT 5
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: LIST
34728: PUSH
34729: LD_VAR 0 1
34733: PUSH
34734: LD_INT 4
34736: MINUS
34737: PUSH
34738: LD_VAR 0 2
34742: PUSH
34743: LD_INT 1
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: LIST
34750: PUSH
34751: LD_VAR 0 1
34755: PUSH
34756: LD_VAR 0 2
34760: PUSH
34761: LD_INT 4
34763: MINUS
34764: PUSH
34765: LD_INT 3
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: LIST
34772: PUSH
34773: LD_VAR 0 1
34777: PUSH
34778: LD_INT 3
34780: MINUS
34781: PUSH
34782: LD_VAR 0 2
34786: PUSH
34787: LD_INT 3
34789: MINUS
34790: PUSH
34791: LD_INT 2
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: LIST
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: ST_TO_ADDR
// end ; 4 :
34806: GO 35087
34808: LD_INT 4
34810: DOUBLE
34811: EQUAL
34812: IFTRUE 34816
34814: GO 34949
34816: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
34817: LD_ADDR_VAR 0 5
34821: PUSH
34822: LD_VAR 0 1
34826: PUSH
34827: LD_VAR 0 2
34831: PUSH
34832: LD_INT 4
34834: PLUS
34835: PUSH
34836: LD_INT 0
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: LIST
34843: PUSH
34844: LD_VAR 0 1
34848: PUSH
34849: LD_INT 3
34851: PLUS
34852: PUSH
34853: LD_VAR 0 2
34857: PUSH
34858: LD_INT 3
34860: PLUS
34861: PUSH
34862: LD_INT 5
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: LIST
34869: PUSH
34870: LD_VAR 0 1
34874: PUSH
34875: LD_INT 4
34877: PLUS
34878: PUSH
34879: LD_VAR 0 2
34883: PUSH
34884: LD_INT 4
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: LIST
34891: PUSH
34892: LD_VAR 0 1
34896: PUSH
34897: LD_VAR 0 2
34901: PUSH
34902: LD_INT 3
34904: MINUS
34905: PUSH
34906: LD_INT 3
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: LIST
34913: PUSH
34914: LD_VAR 0 1
34918: PUSH
34919: LD_INT 4
34921: MINUS
34922: PUSH
34923: LD_VAR 0 2
34927: PUSH
34928: LD_INT 4
34930: MINUS
34931: PUSH
34932: LD_INT 2
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: LIST
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: ST_TO_ADDR
// end ; 5 :
34947: GO 35087
34949: LD_INT 5
34951: DOUBLE
34952: EQUAL
34953: IFTRUE 34957
34955: GO 35086
34957: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
34958: LD_ADDR_VAR 0 5
34962: PUSH
34963: LD_VAR 0 1
34967: PUSH
34968: LD_INT 4
34970: MINUS
34971: PUSH
34972: LD_VAR 0 2
34976: PUSH
34977: LD_INT 1
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: LIST
34984: PUSH
34985: LD_VAR 0 1
34989: PUSH
34990: LD_VAR 0 2
34994: PUSH
34995: LD_INT 4
34997: MINUS
34998: PUSH
34999: LD_INT 3
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: LIST
35006: PUSH
35007: LD_VAR 0 1
35011: PUSH
35012: LD_INT 4
35014: PLUS
35015: PUSH
35016: LD_VAR 0 2
35020: PUSH
35021: LD_INT 4
35023: PLUS
35024: PUSH
35025: LD_INT 5
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: LIST
35032: PUSH
35033: LD_VAR 0 1
35037: PUSH
35038: LD_INT 3
35040: PLUS
35041: PUSH
35042: LD_VAR 0 2
35046: PUSH
35047: LD_INT 4
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: LIST
35054: PUSH
35055: LD_VAR 0 1
35059: PUSH
35060: LD_VAR 0 2
35064: PUSH
35065: LD_INT 3
35067: PLUS
35068: PUSH
35069: LD_INT 0
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: ST_TO_ADDR
// end ; end ;
35084: GO 35087
35086: POP
// result := list ;
35087: LD_ADDR_VAR 0 4
35091: PUSH
35092: LD_VAR 0 5
35096: ST_TO_ADDR
// end ;
35097: LD_VAR 0 4
35101: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
35102: LD_INT 0
35104: PPUSH
35105: PPUSH
35106: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
35107: LD_VAR 0 1
35111: NOT
35112: PUSH
35113: LD_VAR 0 2
35117: PUSH
35118: LD_INT 1
35120: PUSH
35121: LD_INT 2
35123: PUSH
35124: LD_INT 3
35126: PUSH
35127: LD_INT 4
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: IN
35136: NOT
35137: OR
35138: IFFALSE 35142
// exit ;
35140: GO 35234
// tmp := [ ] ;
35142: LD_ADDR_VAR 0 5
35146: PUSH
35147: EMPTY
35148: ST_TO_ADDR
// for i in units do
35149: LD_ADDR_VAR 0 4
35153: PUSH
35154: LD_VAR 0 1
35158: PUSH
35159: FOR_IN
35160: IFFALSE 35203
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
35162: LD_ADDR_VAR 0 5
35166: PUSH
35167: LD_VAR 0 5
35171: PPUSH
35172: LD_VAR 0 5
35176: PUSH
35177: LD_INT 1
35179: PLUS
35180: PPUSH
35181: LD_VAR 0 4
35185: PPUSH
35186: LD_VAR 0 2
35190: PPUSH
35191: CALL_OW 259
35195: PPUSH
35196: CALL_OW 2
35200: ST_TO_ADDR
35201: GO 35159
35203: POP
35204: POP
// if not tmp then
35205: LD_VAR 0 5
35209: NOT
35210: IFFALSE 35214
// exit ;
35212: GO 35234
// result := SortListByListDesc ( units , tmp ) ;
35214: LD_ADDR_VAR 0 3
35218: PUSH
35219: LD_VAR 0 1
35223: PPUSH
35224: LD_VAR 0 5
35228: PPUSH
35229: CALL_OW 77
35233: ST_TO_ADDR
// end ;
35234: LD_VAR 0 3
35238: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
35239: LD_INT 0
35241: PPUSH
35242: PPUSH
35243: PPUSH
// result := false ;
35244: LD_ADDR_VAR 0 3
35248: PUSH
35249: LD_INT 0
35251: ST_TO_ADDR
// x := GetX ( building ) ;
35252: LD_ADDR_VAR 0 4
35256: PUSH
35257: LD_VAR 0 2
35261: PPUSH
35262: CALL_OW 250
35266: ST_TO_ADDR
// y := GetY ( building ) ;
35267: LD_ADDR_VAR 0 5
35271: PUSH
35272: LD_VAR 0 2
35276: PPUSH
35277: CALL_OW 251
35281: ST_TO_ADDR
// if not building or not x or not y then
35282: LD_VAR 0 2
35286: NOT
35287: PUSH
35288: LD_VAR 0 4
35292: NOT
35293: OR
35294: PUSH
35295: LD_VAR 0 5
35299: NOT
35300: OR
35301: IFFALSE 35305
// exit ;
35303: GO 35397
// if GetTaskList ( unit ) then
35305: LD_VAR 0 1
35309: PPUSH
35310: CALL_OW 437
35314: IFFALSE 35397
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
35316: LD_STRING e
35318: PUSH
35319: LD_VAR 0 1
35323: PPUSH
35324: CALL_OW 437
35328: PUSH
35329: LD_INT 1
35331: ARRAY
35332: PUSH
35333: LD_INT 1
35335: ARRAY
35336: EQUAL
35337: PUSH
35338: LD_VAR 0 4
35342: PUSH
35343: LD_VAR 0 1
35347: PPUSH
35348: CALL_OW 437
35352: PUSH
35353: LD_INT 1
35355: ARRAY
35356: PUSH
35357: LD_INT 2
35359: ARRAY
35360: EQUAL
35361: AND
35362: PUSH
35363: LD_VAR 0 5
35367: PUSH
35368: LD_VAR 0 1
35372: PPUSH
35373: CALL_OW 437
35377: PUSH
35378: LD_INT 1
35380: ARRAY
35381: PUSH
35382: LD_INT 3
35384: ARRAY
35385: EQUAL
35386: AND
35387: IFFALSE 35397
// result := true end ;
35389: LD_ADDR_VAR 0 3
35393: PUSH
35394: LD_INT 1
35396: ST_TO_ADDR
// end ;
35397: LD_VAR 0 3
35401: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
35402: LD_INT 0
35404: PPUSH
// result := false ;
35405: LD_ADDR_VAR 0 4
35409: PUSH
35410: LD_INT 0
35412: ST_TO_ADDR
// if GetTaskList ( unit ) then
35413: LD_VAR 0 1
35417: PPUSH
35418: CALL_OW 437
35422: IFFALSE 35505
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
35424: LD_STRING M
35426: PUSH
35427: LD_VAR 0 1
35431: PPUSH
35432: CALL_OW 437
35436: PUSH
35437: LD_INT 1
35439: ARRAY
35440: PUSH
35441: LD_INT 1
35443: ARRAY
35444: EQUAL
35445: PUSH
35446: LD_VAR 0 2
35450: PUSH
35451: LD_VAR 0 1
35455: PPUSH
35456: CALL_OW 437
35460: PUSH
35461: LD_INT 1
35463: ARRAY
35464: PUSH
35465: LD_INT 2
35467: ARRAY
35468: EQUAL
35469: AND
35470: PUSH
35471: LD_VAR 0 3
35475: PUSH
35476: LD_VAR 0 1
35480: PPUSH
35481: CALL_OW 437
35485: PUSH
35486: LD_INT 1
35488: ARRAY
35489: PUSH
35490: LD_INT 3
35492: ARRAY
35493: EQUAL
35494: AND
35495: IFFALSE 35505
// result := true ;
35497: LD_ADDR_VAR 0 4
35501: PUSH
35502: LD_INT 1
35504: ST_TO_ADDR
// end ; end ;
35505: LD_VAR 0 4
35509: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
35510: LD_INT 0
35512: PPUSH
35513: PPUSH
35514: PPUSH
35515: PPUSH
// if not unit or not area then
35516: LD_VAR 0 1
35520: NOT
35521: PUSH
35522: LD_VAR 0 2
35526: NOT
35527: OR
35528: IFFALSE 35532
// exit ;
35530: GO 35696
// tmp := AreaToList ( area , i ) ;
35532: LD_ADDR_VAR 0 6
35536: PUSH
35537: LD_VAR 0 2
35541: PPUSH
35542: LD_VAR 0 5
35546: PPUSH
35547: CALL_OW 517
35551: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
35552: LD_ADDR_VAR 0 5
35556: PUSH
35557: DOUBLE
35558: LD_INT 1
35560: DEC
35561: ST_TO_ADDR
35562: LD_VAR 0 6
35566: PUSH
35567: LD_INT 1
35569: ARRAY
35570: PUSH
35571: FOR_TO
35572: IFFALSE 35694
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
35574: LD_ADDR_VAR 0 7
35578: PUSH
35579: LD_VAR 0 6
35583: PUSH
35584: LD_INT 1
35586: ARRAY
35587: PUSH
35588: LD_VAR 0 5
35592: ARRAY
35593: PUSH
35594: LD_VAR 0 6
35598: PUSH
35599: LD_INT 2
35601: ARRAY
35602: PUSH
35603: LD_VAR 0 5
35607: ARRAY
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
35613: LD_VAR 0 7
35617: PUSH
35618: LD_INT 1
35620: ARRAY
35621: PPUSH
35622: LD_VAR 0 7
35626: PUSH
35627: LD_INT 2
35629: ARRAY
35630: PPUSH
35631: CALL_OW 428
35635: PUSH
35636: LD_INT 0
35638: EQUAL
35639: IFFALSE 35692
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
35641: LD_VAR 0 1
35645: PPUSH
35646: LD_VAR 0 7
35650: PUSH
35651: LD_INT 1
35653: ARRAY
35654: PPUSH
35655: LD_VAR 0 7
35659: PUSH
35660: LD_INT 2
35662: ARRAY
35663: PPUSH
35664: LD_VAR 0 3
35668: PPUSH
35669: CALL_OW 48
// result := IsPlaced ( unit ) ;
35673: LD_ADDR_VAR 0 4
35677: PUSH
35678: LD_VAR 0 1
35682: PPUSH
35683: CALL_OW 305
35687: ST_TO_ADDR
// exit ;
35688: POP
35689: POP
35690: GO 35696
// end ; end ;
35692: GO 35571
35694: POP
35695: POP
// end ;
35696: LD_VAR 0 4
35700: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
35701: LD_INT 0
35703: PPUSH
35704: PPUSH
35705: PPUSH
// if not side or side > 8 then
35706: LD_VAR 0 1
35710: NOT
35711: PUSH
35712: LD_VAR 0 1
35716: PUSH
35717: LD_INT 8
35719: GREATER
35720: OR
35721: IFFALSE 35725
// exit ;
35723: GO 35912
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
35725: LD_ADDR_VAR 0 4
35729: PUSH
35730: LD_INT 22
35732: PUSH
35733: LD_VAR 0 1
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 21
35744: PUSH
35745: LD_INT 3
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PPUSH
35756: CALL_OW 69
35760: ST_TO_ADDR
// if not tmp then
35761: LD_VAR 0 4
35765: NOT
35766: IFFALSE 35770
// exit ;
35768: GO 35912
// enable_addtolog := true ;
35770: LD_ADDR_OWVAR 81
35774: PUSH
35775: LD_INT 1
35777: ST_TO_ADDR
// AddToLog ( [ ) ;
35778: LD_STRING [
35780: PPUSH
35781: CALL_OW 561
// for i in tmp do
35785: LD_ADDR_VAR 0 3
35789: PUSH
35790: LD_VAR 0 4
35794: PUSH
35795: FOR_IN
35796: IFFALSE 35903
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
35798: LD_STRING [
35800: PUSH
35801: LD_VAR 0 3
35805: PPUSH
35806: CALL_OW 266
35810: STR
35811: PUSH
35812: LD_STRING , 
35814: STR
35815: PUSH
35816: LD_VAR 0 3
35820: PPUSH
35821: CALL_OW 250
35825: STR
35826: PUSH
35827: LD_STRING , 
35829: STR
35830: PUSH
35831: LD_VAR 0 3
35835: PPUSH
35836: CALL_OW 251
35840: STR
35841: PUSH
35842: LD_STRING , 
35844: STR
35845: PUSH
35846: LD_VAR 0 3
35850: PPUSH
35851: CALL_OW 254
35855: STR
35856: PUSH
35857: LD_STRING , 
35859: STR
35860: PUSH
35861: LD_VAR 0 3
35865: PPUSH
35866: LD_INT 1
35868: PPUSH
35869: CALL_OW 268
35873: STR
35874: PUSH
35875: LD_STRING , 
35877: STR
35878: PUSH
35879: LD_VAR 0 3
35883: PPUSH
35884: LD_INT 2
35886: PPUSH
35887: CALL_OW 268
35891: STR
35892: PUSH
35893: LD_STRING ],
35895: STR
35896: PPUSH
35897: CALL_OW 561
// end ;
35901: GO 35795
35903: POP
35904: POP
// AddToLog ( ]; ) ;
35905: LD_STRING ];
35907: PPUSH
35908: CALL_OW 561
// end ;
35912: LD_VAR 0 2
35916: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
35917: LD_INT 0
35919: PPUSH
35920: PPUSH
35921: PPUSH
35922: PPUSH
35923: PPUSH
// if not area or not rate or not max then
35924: LD_VAR 0 1
35928: NOT
35929: PUSH
35930: LD_VAR 0 2
35934: NOT
35935: OR
35936: PUSH
35937: LD_VAR 0 4
35941: NOT
35942: OR
35943: IFFALSE 35947
// exit ;
35945: GO 36139
// while 1 do
35947: LD_INT 1
35949: IFFALSE 36139
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
35951: LD_ADDR_VAR 0 9
35955: PUSH
35956: LD_VAR 0 1
35960: PPUSH
35961: LD_INT 1
35963: PPUSH
35964: CALL_OW 287
35968: PUSH
35969: LD_INT 10
35971: MUL
35972: ST_TO_ADDR
// r := rate / 10 ;
35973: LD_ADDR_VAR 0 7
35977: PUSH
35978: LD_VAR 0 2
35982: PUSH
35983: LD_INT 10
35985: DIVREAL
35986: ST_TO_ADDR
// time := 1 1$00 ;
35987: LD_ADDR_VAR 0 8
35991: PUSH
35992: LD_INT 2100
35994: ST_TO_ADDR
// if amount < min then
35995: LD_VAR 0 9
35999: PUSH
36000: LD_VAR 0 3
36004: LESS
36005: IFFALSE 36023
// r := r * 2 else
36007: LD_ADDR_VAR 0 7
36011: PUSH
36012: LD_VAR 0 7
36016: PUSH
36017: LD_INT 2
36019: MUL
36020: ST_TO_ADDR
36021: GO 36049
// if amount > max then
36023: LD_VAR 0 9
36027: PUSH
36028: LD_VAR 0 4
36032: GREATER
36033: IFFALSE 36049
// r := r / 2 ;
36035: LD_ADDR_VAR 0 7
36039: PUSH
36040: LD_VAR 0 7
36044: PUSH
36045: LD_INT 2
36047: DIVREAL
36048: ST_TO_ADDR
// time := time / r ;
36049: LD_ADDR_VAR 0 8
36053: PUSH
36054: LD_VAR 0 8
36058: PUSH
36059: LD_VAR 0 7
36063: DIVREAL
36064: ST_TO_ADDR
// if time < 0 then
36065: LD_VAR 0 8
36069: PUSH
36070: LD_INT 0
36072: LESS
36073: IFFALSE 36090
// time := time * - 1 ;
36075: LD_ADDR_VAR 0 8
36079: PUSH
36080: LD_VAR 0 8
36084: PUSH
36085: LD_INT 1
36087: NEG
36088: MUL
36089: ST_TO_ADDR
// wait ( time ) ;
36090: LD_VAR 0 8
36094: PPUSH
36095: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
36099: LD_INT 35
36101: PPUSH
36102: LD_INT 875
36104: PPUSH
36105: CALL_OW 12
36109: PPUSH
36110: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
36114: LD_INT 1
36116: PPUSH
36117: LD_INT 5
36119: PPUSH
36120: CALL_OW 12
36124: PPUSH
36125: LD_VAR 0 1
36129: PPUSH
36130: LD_INT 1
36132: PPUSH
36133: CALL_OW 55
// end ;
36137: GO 35947
// end ;
36139: LD_VAR 0 5
36143: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
36144: LD_INT 0
36146: PPUSH
36147: PPUSH
36148: PPUSH
36149: PPUSH
36150: PPUSH
36151: PPUSH
36152: PPUSH
36153: PPUSH
// if not turrets or not factories then
36154: LD_VAR 0 1
36158: NOT
36159: PUSH
36160: LD_VAR 0 2
36164: NOT
36165: OR
36166: IFFALSE 36170
// exit ;
36168: GO 36477
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
36170: LD_ADDR_VAR 0 10
36174: PUSH
36175: LD_INT 5
36177: PUSH
36178: LD_INT 6
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 2
36187: PUSH
36188: LD_INT 4
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 3
36197: PUSH
36198: LD_INT 5
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 24
36212: PUSH
36213: LD_INT 25
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 23
36222: PUSH
36223: LD_INT 27
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 42
36236: PUSH
36237: LD_INT 43
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 44
36246: PUSH
36247: LD_INT 46
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 45
36256: PUSH
36257: LD_INT 47
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: LIST
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: LIST
36273: ST_TO_ADDR
// result := [ ] ;
36274: LD_ADDR_VAR 0 3
36278: PUSH
36279: EMPTY
36280: ST_TO_ADDR
// for i in turrets do
36281: LD_ADDR_VAR 0 4
36285: PUSH
36286: LD_VAR 0 1
36290: PUSH
36291: FOR_IN
36292: IFFALSE 36475
// begin nat := GetNation ( i ) ;
36294: LD_ADDR_VAR 0 7
36298: PUSH
36299: LD_VAR 0 4
36303: PPUSH
36304: CALL_OW 248
36308: ST_TO_ADDR
// weapon := 0 ;
36309: LD_ADDR_VAR 0 8
36313: PUSH
36314: LD_INT 0
36316: ST_TO_ADDR
// if not nat then
36317: LD_VAR 0 7
36321: NOT
36322: IFFALSE 36326
// continue ;
36324: GO 36291
// for j in list [ nat ] do
36326: LD_ADDR_VAR 0 5
36330: PUSH
36331: LD_VAR 0 10
36335: PUSH
36336: LD_VAR 0 7
36340: ARRAY
36341: PUSH
36342: FOR_IN
36343: IFFALSE 36384
// if GetBWeapon ( i ) = j [ 1 ] then
36345: LD_VAR 0 4
36349: PPUSH
36350: CALL_OW 269
36354: PUSH
36355: LD_VAR 0 5
36359: PUSH
36360: LD_INT 1
36362: ARRAY
36363: EQUAL
36364: IFFALSE 36382
// begin weapon := j [ 2 ] ;
36366: LD_ADDR_VAR 0 8
36370: PUSH
36371: LD_VAR 0 5
36375: PUSH
36376: LD_INT 2
36378: ARRAY
36379: ST_TO_ADDR
// break ;
36380: GO 36384
// end ;
36382: GO 36342
36384: POP
36385: POP
// if not weapon then
36386: LD_VAR 0 8
36390: NOT
36391: IFFALSE 36395
// continue ;
36393: GO 36291
// for k in factories do
36395: LD_ADDR_VAR 0 6
36399: PUSH
36400: LD_VAR 0 2
36404: PUSH
36405: FOR_IN
36406: IFFALSE 36471
// begin weapons := AvailableWeaponList ( k ) ;
36408: LD_ADDR_VAR 0 9
36412: PUSH
36413: LD_VAR 0 6
36417: PPUSH
36418: CALL_OW 478
36422: ST_TO_ADDR
// if not weapons then
36423: LD_VAR 0 9
36427: NOT
36428: IFFALSE 36432
// continue ;
36430: GO 36405
// if weapon in weapons then
36432: LD_VAR 0 8
36436: PUSH
36437: LD_VAR 0 9
36441: IN
36442: IFFALSE 36469
// begin result := [ i , weapon ] ;
36444: LD_ADDR_VAR 0 3
36448: PUSH
36449: LD_VAR 0 4
36453: PUSH
36454: LD_VAR 0 8
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: ST_TO_ADDR
// exit ;
36463: POP
36464: POP
36465: POP
36466: POP
36467: GO 36477
// end ; end ;
36469: GO 36405
36471: POP
36472: POP
// end ;
36473: GO 36291
36475: POP
36476: POP
// end ;
36477: LD_VAR 0 3
36481: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
36482: LD_INT 0
36484: PPUSH
// if not side or side > 8 then
36485: LD_VAR 0 3
36489: NOT
36490: PUSH
36491: LD_VAR 0 3
36495: PUSH
36496: LD_INT 8
36498: GREATER
36499: OR
36500: IFFALSE 36504
// exit ;
36502: GO 36563
// if not range then
36504: LD_VAR 0 4
36508: NOT
36509: IFFALSE 36520
// range := - 12 ;
36511: LD_ADDR_VAR 0 4
36515: PUSH
36516: LD_INT 12
36518: NEG
36519: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
36520: LD_VAR 0 1
36524: PPUSH
36525: LD_VAR 0 2
36529: PPUSH
36530: LD_VAR 0 3
36534: PPUSH
36535: LD_VAR 0 4
36539: PPUSH
36540: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
36544: LD_VAR 0 1
36548: PPUSH
36549: LD_VAR 0 2
36553: PPUSH
36554: LD_VAR 0 3
36558: PPUSH
36559: CALL_OW 331
// end ;
36563: LD_VAR 0 5
36567: RET
// export function Video ( mode ) ; begin
36568: LD_INT 0
36570: PPUSH
// ingame_video = mode ;
36571: LD_ADDR_OWVAR 52
36575: PUSH
36576: LD_VAR 0 1
36580: ST_TO_ADDR
// interface_hidden = mode ;
36581: LD_ADDR_OWVAR 54
36585: PUSH
36586: LD_VAR 0 1
36590: ST_TO_ADDR
// end ;
36591: LD_VAR 0 2
36595: RET
// export function Join ( array , element ) ; begin
36596: LD_INT 0
36598: PPUSH
// result := Replace ( array , array + 1 , element ) ;
36599: LD_ADDR_VAR 0 3
36603: PUSH
36604: LD_VAR 0 1
36608: PPUSH
36609: LD_VAR 0 1
36613: PUSH
36614: LD_INT 1
36616: PLUS
36617: PPUSH
36618: LD_VAR 0 2
36622: PPUSH
36623: CALL_OW 1
36627: ST_TO_ADDR
// end ;
36628: LD_VAR 0 3
36632: RET
// export function JoinUnion ( array , element ) ; begin
36633: LD_INT 0
36635: PPUSH
// result := array union element ;
36636: LD_ADDR_VAR 0 3
36640: PUSH
36641: LD_VAR 0 1
36645: PUSH
36646: LD_VAR 0 2
36650: UNION
36651: ST_TO_ADDR
// end ;
36652: LD_VAR 0 3
36656: RET
// export function GetBehemoths ( side ) ; begin
36657: LD_INT 0
36659: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
36660: LD_ADDR_VAR 0 2
36664: PUSH
36665: LD_INT 22
36667: PUSH
36668: LD_VAR 0 1
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 31
36679: PUSH
36680: LD_INT 25
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PPUSH
36691: CALL_OW 69
36695: ST_TO_ADDR
// end ;
36696: LD_VAR 0 2
36700: RET
// export function Shuffle ( array ) ; var i , index ; begin
36701: LD_INT 0
36703: PPUSH
36704: PPUSH
36705: PPUSH
// result := [ ] ;
36706: LD_ADDR_VAR 0 2
36710: PUSH
36711: EMPTY
36712: ST_TO_ADDR
// if not array then
36713: LD_VAR 0 1
36717: NOT
36718: IFFALSE 36722
// exit ;
36720: GO 36821
// Randomize ;
36722: CALL_OW 10
// for i = array downto 1 do
36726: LD_ADDR_VAR 0 3
36730: PUSH
36731: DOUBLE
36732: LD_VAR 0 1
36736: INC
36737: ST_TO_ADDR
36738: LD_INT 1
36740: PUSH
36741: FOR_DOWNTO
36742: IFFALSE 36819
// begin index := rand ( 1 , array ) ;
36744: LD_ADDR_VAR 0 4
36748: PUSH
36749: LD_INT 1
36751: PPUSH
36752: LD_VAR 0 1
36756: PPUSH
36757: CALL_OW 12
36761: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
36762: LD_ADDR_VAR 0 2
36766: PUSH
36767: LD_VAR 0 2
36771: PPUSH
36772: LD_VAR 0 2
36776: PUSH
36777: LD_INT 1
36779: PLUS
36780: PPUSH
36781: LD_VAR 0 1
36785: PUSH
36786: LD_VAR 0 4
36790: ARRAY
36791: PPUSH
36792: CALL_OW 2
36796: ST_TO_ADDR
// array := Delete ( array , index ) ;
36797: LD_ADDR_VAR 0 1
36801: PUSH
36802: LD_VAR 0 1
36806: PPUSH
36807: LD_VAR 0 4
36811: PPUSH
36812: CALL_OW 3
36816: ST_TO_ADDR
// end ;
36817: GO 36741
36819: POP
36820: POP
// end ;
36821: LD_VAR 0 2
36825: RET
// export function GetBaseMaterials ( base ) ; begin
36826: LD_INT 0
36828: PPUSH
// result := [ 0 , 0 , 0 ] ;
36829: LD_ADDR_VAR 0 2
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: LD_INT 0
36839: PUSH
36840: LD_INT 0
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: LIST
36847: ST_TO_ADDR
// if not base then
36848: LD_VAR 0 1
36852: NOT
36853: IFFALSE 36857
// exit ;
36855: GO 36906
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
36857: LD_ADDR_VAR 0 2
36861: PUSH
36862: LD_VAR 0 1
36866: PPUSH
36867: LD_INT 1
36869: PPUSH
36870: CALL_OW 275
36874: PUSH
36875: LD_VAR 0 1
36879: PPUSH
36880: LD_INT 2
36882: PPUSH
36883: CALL_OW 275
36887: PUSH
36888: LD_VAR 0 1
36892: PPUSH
36893: LD_INT 3
36895: PPUSH
36896: CALL_OW 275
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: LIST
36905: ST_TO_ADDR
// end ;
36906: LD_VAR 0 2
36910: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
36911: LD_INT 0
36913: PPUSH
36914: PPUSH
// result := array ;
36915: LD_ADDR_VAR 0 3
36919: PUSH
36920: LD_VAR 0 1
36924: ST_TO_ADDR
// if size > 0 then
36925: LD_VAR 0 2
36929: PUSH
36930: LD_INT 0
36932: GREATER
36933: IFFALSE 36979
// for i := array downto size do
36935: LD_ADDR_VAR 0 4
36939: PUSH
36940: DOUBLE
36941: LD_VAR 0 1
36945: INC
36946: ST_TO_ADDR
36947: LD_VAR 0 2
36951: PUSH
36952: FOR_DOWNTO
36953: IFFALSE 36977
// result := Delete ( result , result ) ;
36955: LD_ADDR_VAR 0 3
36959: PUSH
36960: LD_VAR 0 3
36964: PPUSH
36965: LD_VAR 0 3
36969: PPUSH
36970: CALL_OW 3
36974: ST_TO_ADDR
36975: GO 36952
36977: POP
36978: POP
// end ;
36979: LD_VAR 0 3
36983: RET
// export function ComExit ( unit ) ; var tmp ; begin
36984: LD_INT 0
36986: PPUSH
36987: PPUSH
// if not IsInUnit ( unit ) then
36988: LD_VAR 0 1
36992: PPUSH
36993: CALL_OW 310
36997: NOT
36998: IFFALSE 37002
// exit ;
37000: GO 37062
// tmp := IsInUnit ( unit ) ;
37002: LD_ADDR_VAR 0 3
37006: PUSH
37007: LD_VAR 0 1
37011: PPUSH
37012: CALL_OW 310
37016: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
37017: LD_VAR 0 3
37021: PPUSH
37022: CALL_OW 247
37026: PUSH
37027: LD_INT 2
37029: EQUAL
37030: IFFALSE 37043
// ComExitVehicle ( unit ) else
37032: LD_VAR 0 1
37036: PPUSH
37037: CALL_OW 121
37041: GO 37052
// ComExitBuilding ( unit ) ;
37043: LD_VAR 0 1
37047: PPUSH
37048: CALL_OW 122
// result := tmp ;
37052: LD_ADDR_VAR 0 2
37056: PUSH
37057: LD_VAR 0 3
37061: ST_TO_ADDR
// end ;
37062: LD_VAR 0 2
37066: RET
// export function ComExitAll ( units ) ; var i ; begin
37067: LD_INT 0
37069: PPUSH
37070: PPUSH
// if not units then
37071: LD_VAR 0 1
37075: NOT
37076: IFFALSE 37080
// exit ;
37078: GO 37106
// for i in units do
37080: LD_ADDR_VAR 0 3
37084: PUSH
37085: LD_VAR 0 1
37089: PUSH
37090: FOR_IN
37091: IFFALSE 37104
// ComExit ( i ) ;
37093: LD_VAR 0 3
37097: PPUSH
37098: CALL 36984 0 1
37102: GO 37090
37104: POP
37105: POP
// end ;
37106: LD_VAR 0 2
37110: RET
// export function ResetHc ; begin
37111: LD_INT 0
37113: PPUSH
// InitHc ;
37114: CALL_OW 19
// hc_importance := 0 ;
37118: LD_ADDR_OWVAR 32
37122: PUSH
37123: LD_INT 0
37125: ST_TO_ADDR
// end ;
37126: LD_VAR 0 1
37130: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
37131: LD_INT 0
37133: PPUSH
37134: PPUSH
37135: PPUSH
// _x := ( x1 + x2 ) div 2 ;
37136: LD_ADDR_VAR 0 6
37140: PUSH
37141: LD_VAR 0 1
37145: PUSH
37146: LD_VAR 0 3
37150: PLUS
37151: PUSH
37152: LD_INT 2
37154: DIV
37155: ST_TO_ADDR
// if _x < 0 then
37156: LD_VAR 0 6
37160: PUSH
37161: LD_INT 0
37163: LESS
37164: IFFALSE 37181
// _x := _x * - 1 ;
37166: LD_ADDR_VAR 0 6
37170: PUSH
37171: LD_VAR 0 6
37175: PUSH
37176: LD_INT 1
37178: NEG
37179: MUL
37180: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
37181: LD_ADDR_VAR 0 7
37185: PUSH
37186: LD_VAR 0 2
37190: PUSH
37191: LD_VAR 0 4
37195: PLUS
37196: PUSH
37197: LD_INT 2
37199: DIV
37200: ST_TO_ADDR
// if _y < 0 then
37201: LD_VAR 0 7
37205: PUSH
37206: LD_INT 0
37208: LESS
37209: IFFALSE 37226
// _y := _y * - 1 ;
37211: LD_ADDR_VAR 0 7
37215: PUSH
37216: LD_VAR 0 7
37220: PUSH
37221: LD_INT 1
37223: NEG
37224: MUL
37225: ST_TO_ADDR
// result := [ _x , _y ] ;
37226: LD_ADDR_VAR 0 5
37230: PUSH
37231: LD_VAR 0 6
37235: PUSH
37236: LD_VAR 0 7
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: ST_TO_ADDR
// end ;
37245: LD_VAR 0 5
37249: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
37250: LD_INT 0
37252: PPUSH
37253: PPUSH
37254: PPUSH
37255: PPUSH
// task := GetTaskList ( unit ) ;
37256: LD_ADDR_VAR 0 7
37260: PUSH
37261: LD_VAR 0 1
37265: PPUSH
37266: CALL_OW 437
37270: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
37271: LD_VAR 0 7
37275: NOT
37276: PUSH
37277: LD_VAR 0 1
37281: PPUSH
37282: LD_VAR 0 2
37286: PPUSH
37287: CALL_OW 308
37291: NOT
37292: AND
37293: IFFALSE 37297
// exit ;
37295: GO 37415
// if IsInArea ( unit , area ) then
37297: LD_VAR 0 1
37301: PPUSH
37302: LD_VAR 0 2
37306: PPUSH
37307: CALL_OW 308
37311: IFFALSE 37329
// begin ComMoveToArea ( unit , goAway ) ;
37313: LD_VAR 0 1
37317: PPUSH
37318: LD_VAR 0 3
37322: PPUSH
37323: CALL_OW 113
// exit ;
37327: GO 37415
// end ; if task [ 1 ] [ 1 ] <> M then
37329: LD_VAR 0 7
37333: PUSH
37334: LD_INT 1
37336: ARRAY
37337: PUSH
37338: LD_INT 1
37340: ARRAY
37341: PUSH
37342: LD_STRING M
37344: NONEQUAL
37345: IFFALSE 37349
// exit ;
37347: GO 37415
// x := task [ 1 ] [ 2 ] ;
37349: LD_ADDR_VAR 0 5
37353: PUSH
37354: LD_VAR 0 7
37358: PUSH
37359: LD_INT 1
37361: ARRAY
37362: PUSH
37363: LD_INT 2
37365: ARRAY
37366: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
37367: LD_ADDR_VAR 0 6
37371: PUSH
37372: LD_VAR 0 7
37376: PUSH
37377: LD_INT 1
37379: ARRAY
37380: PUSH
37381: LD_INT 3
37383: ARRAY
37384: ST_TO_ADDR
// if InArea ( x , y , area ) then
37385: LD_VAR 0 5
37389: PPUSH
37390: LD_VAR 0 6
37394: PPUSH
37395: LD_VAR 0 2
37399: PPUSH
37400: CALL_OW 309
37404: IFFALSE 37415
// ComStop ( unit ) ;
37406: LD_VAR 0 1
37410: PPUSH
37411: CALL_OW 141
// end ;
37415: LD_VAR 0 4
37419: RET
// export function Abs ( value ) ; begin
37420: LD_INT 0
37422: PPUSH
// result := value ;
37423: LD_ADDR_VAR 0 2
37427: PUSH
37428: LD_VAR 0 1
37432: ST_TO_ADDR
// if value < 0 then
37433: LD_VAR 0 1
37437: PUSH
37438: LD_INT 0
37440: LESS
37441: IFFALSE 37458
// result := value * - 1 ;
37443: LD_ADDR_VAR 0 2
37447: PUSH
37448: LD_VAR 0 1
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: MUL
37457: ST_TO_ADDR
// end ;
37458: LD_VAR 0 2
37462: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
37463: LD_INT 0
37465: PPUSH
37466: PPUSH
37467: PPUSH
37468: PPUSH
37469: PPUSH
37470: PPUSH
37471: PPUSH
37472: PPUSH
// if not unit or not building then
37473: LD_VAR 0 1
37477: NOT
37478: PUSH
37479: LD_VAR 0 2
37483: NOT
37484: OR
37485: IFFALSE 37489
// exit ;
37487: GO 37715
// x := GetX ( building ) ;
37489: LD_ADDR_VAR 0 4
37493: PUSH
37494: LD_VAR 0 2
37498: PPUSH
37499: CALL_OW 250
37503: ST_TO_ADDR
// y := GetY ( building ) ;
37504: LD_ADDR_VAR 0 6
37508: PUSH
37509: LD_VAR 0 2
37513: PPUSH
37514: CALL_OW 251
37518: ST_TO_ADDR
// d := GetDir ( building ) ;
37519: LD_ADDR_VAR 0 8
37523: PUSH
37524: LD_VAR 0 2
37528: PPUSH
37529: CALL_OW 254
37533: ST_TO_ADDR
// r := 4 ;
37534: LD_ADDR_VAR 0 9
37538: PUSH
37539: LD_INT 4
37541: ST_TO_ADDR
// for i := 1 to 5 do
37542: LD_ADDR_VAR 0 10
37546: PUSH
37547: DOUBLE
37548: LD_INT 1
37550: DEC
37551: ST_TO_ADDR
37552: LD_INT 5
37554: PUSH
37555: FOR_TO
37556: IFFALSE 37713
// begin _x := ShiftX ( x , d , r + i ) ;
37558: LD_ADDR_VAR 0 5
37562: PUSH
37563: LD_VAR 0 4
37567: PPUSH
37568: LD_VAR 0 8
37572: PPUSH
37573: LD_VAR 0 9
37577: PUSH
37578: LD_VAR 0 10
37582: PLUS
37583: PPUSH
37584: CALL_OW 272
37588: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
37589: LD_ADDR_VAR 0 7
37593: PUSH
37594: LD_VAR 0 6
37598: PPUSH
37599: LD_VAR 0 8
37603: PPUSH
37604: LD_VAR 0 9
37608: PUSH
37609: LD_VAR 0 10
37613: PLUS
37614: PPUSH
37615: CALL_OW 273
37619: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
37620: LD_VAR 0 5
37624: PPUSH
37625: LD_VAR 0 7
37629: PPUSH
37630: CALL_OW 488
37634: PUSH
37635: LD_VAR 0 5
37639: PPUSH
37640: LD_VAR 0 7
37644: PPUSH
37645: CALL_OW 428
37649: PPUSH
37650: CALL_OW 247
37654: PUSH
37655: LD_INT 3
37657: PUSH
37658: LD_INT 2
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: IN
37665: NOT
37666: AND
37667: IFFALSE 37711
// begin ComMoveXY ( unit , _x , _y ) ;
37669: LD_VAR 0 1
37673: PPUSH
37674: LD_VAR 0 5
37678: PPUSH
37679: LD_VAR 0 7
37683: PPUSH
37684: CALL_OW 111
// result := [ _x , _y ] ;
37688: LD_ADDR_VAR 0 3
37692: PUSH
37693: LD_VAR 0 5
37697: PUSH
37698: LD_VAR 0 7
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: ST_TO_ADDR
// exit ;
37707: POP
37708: POP
37709: GO 37715
// end ; end ;
37711: GO 37555
37713: POP
37714: POP
// end ;
37715: LD_VAR 0 3
37719: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
37720: LD_INT 0
37722: PPUSH
37723: PPUSH
37724: PPUSH
// result := 0 ;
37725: LD_ADDR_VAR 0 3
37729: PUSH
37730: LD_INT 0
37732: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
37733: LD_VAR 0 1
37737: PUSH
37738: LD_INT 0
37740: LESS
37741: PUSH
37742: LD_VAR 0 1
37746: PUSH
37747: LD_INT 8
37749: GREATER
37750: OR
37751: PUSH
37752: LD_VAR 0 2
37756: PUSH
37757: LD_INT 0
37759: LESS
37760: OR
37761: PUSH
37762: LD_VAR 0 2
37766: PUSH
37767: LD_INT 8
37769: GREATER
37770: OR
37771: IFFALSE 37775
// exit ;
37773: GO 37850
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
37775: LD_ADDR_VAR 0 4
37779: PUSH
37780: LD_INT 22
37782: PUSH
37783: LD_VAR 0 2
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PPUSH
37792: CALL_OW 69
37796: PUSH
37797: FOR_IN
37798: IFFALSE 37848
// begin un := UnitShoot ( i ) ;
37800: LD_ADDR_VAR 0 5
37804: PUSH
37805: LD_VAR 0 4
37809: PPUSH
37810: CALL_OW 504
37814: ST_TO_ADDR
// if GetSide ( un ) = side1 then
37815: LD_VAR 0 5
37819: PPUSH
37820: CALL_OW 255
37824: PUSH
37825: LD_VAR 0 1
37829: EQUAL
37830: IFFALSE 37846
// begin result := un ;
37832: LD_ADDR_VAR 0 3
37836: PUSH
37837: LD_VAR 0 5
37841: ST_TO_ADDR
// exit ;
37842: POP
37843: POP
37844: GO 37850
// end ; end ;
37846: GO 37797
37848: POP
37849: POP
// end ;
37850: LD_VAR 0 3
37854: RET
// export function GetCargoBay ( units ) ; begin
37855: LD_INT 0
37857: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
37858: LD_ADDR_VAR 0 2
37862: PUSH
37863: LD_VAR 0 1
37867: PPUSH
37868: LD_INT 2
37870: PUSH
37871: LD_INT 34
37873: PUSH
37874: LD_INT 12
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 34
37883: PUSH
37884: LD_INT 51
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 34
37893: PUSH
37894: LD_INT 32
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 34
37903: PUSH
37904: LD_EXP 4
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: PPUSH
37920: CALL_OW 72
37924: ST_TO_ADDR
// end ; end_of_file
37925: LD_VAR 0 2
37929: RET
// export ecoSide , ecoNation , ecoPeopleAmount , ecoStartPoint , ecoCratesDrop , ecoCratesDropXY ; export function InitEcoMode ( startPoint , cratesDropXY ) ; var i , tmp , side , nation , peopleAmount , resourcesAmount ; begin
37930: LD_INT 0
37932: PPUSH
37933: PPUSH
37934: PPUSH
37935: PPUSH
37936: PPUSH
37937: PPUSH
37938: PPUSH
// ecoStartPoint := startPoint ;
37939: LD_ADDR_EXP 25
37943: PUSH
37944: LD_VAR 0 1
37948: ST_TO_ADDR
// CenterNowOnXY ( ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
37949: LD_EXP 25
37953: PUSH
37954: LD_INT 1
37956: ARRAY
37957: PPUSH
37958: LD_EXP 25
37962: PUSH
37963: LD_INT 2
37965: ARRAY
37966: PPUSH
37967: CALL_OW 86
// ToLua ( ShowEcoButton(); ) ;
37971: LD_STRING ShowEcoButton();
37973: PPUSH
37974: CALL_OW 559
// ecoCratesDropXY := cratesDropXY ;
37978: LD_ADDR_EXP 27
37982: PUSH
37983: LD_VAR 0 2
37987: ST_TO_ADDR
// if debug then
37988: LD_EXP 1
37992: IFFALSE 38036
// begin side := 1 ;
37994: LD_ADDR_VAR 0 6
37998: PUSH
37999: LD_INT 1
38001: ST_TO_ADDR
// nation := 1 ;
38002: LD_ADDR_VAR 0 7
38006: PUSH
38007: LD_INT 1
38009: ST_TO_ADDR
// peopleAmount := 15 ;
38010: LD_ADDR_VAR 0 8
38014: PUSH
38015: LD_INT 15
38017: ST_TO_ADDR
// resourcesAmount := 2 ;
38018: LD_ADDR_VAR 0 9
38022: PUSH
38023: LD_INT 2
38025: ST_TO_ADDR
// ecoCratesDrop := 3 ;
38026: LD_ADDR_EXP 26
38030: PUSH
38031: LD_INT 3
38033: ST_TO_ADDR
// end else
38034: GO 38152
// begin side := GetMultiplayerSetting ( 1 ) + 1 ;
38036: LD_ADDR_VAR 0 6
38040: PUSH
38041: LD_INT 1
38043: PPUSH
38044: CALL_OW 426
38048: PUSH
38049: LD_INT 1
38051: PLUS
38052: ST_TO_ADDR
// nation := GetMultiplayerSetting ( 2 ) + 1 ;
38053: LD_ADDR_VAR 0 7
38057: PUSH
38058: LD_INT 2
38060: PPUSH
38061: CALL_OW 426
38065: PUSH
38066: LD_INT 1
38068: PLUS
38069: ST_TO_ADDR
// peopleAmount := [ 6 , 9 , 12 , 15 , 18 , 21 , 24 ] [ GetMultiplayerSetting ( 3 ) + 1 ] ;
38070: LD_ADDR_VAR 0 8
38074: PUSH
38075: LD_INT 6
38077: PUSH
38078: LD_INT 9
38080: PUSH
38081: LD_INT 12
38083: PUSH
38084: LD_INT 15
38086: PUSH
38087: LD_INT 18
38089: PUSH
38090: LD_INT 21
38092: PUSH
38093: LD_INT 24
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 3
38107: PPUSH
38108: CALL_OW 426
38112: PUSH
38113: LD_INT 1
38115: PLUS
38116: ARRAY
38117: ST_TO_ADDR
// resourcesAmount := GetMultiplayerSetting ( 4 ) + 1 ;
38118: LD_ADDR_VAR 0 9
38122: PUSH
38123: LD_INT 4
38125: PPUSH
38126: CALL_OW 426
38130: PUSH
38131: LD_INT 1
38133: PLUS
38134: ST_TO_ADDR
// ecoCratesDrop := GetMultiplayerSetting ( 5 ) + 1 ;
38135: LD_ADDR_EXP 26
38139: PUSH
38140: LD_INT 5
38142: PPUSH
38143: CALL_OW 426
38147: PUSH
38148: LD_INT 1
38150: PLUS
38151: ST_TO_ADDR
// end ; ecoSide := side ;
38152: LD_ADDR_EXP 22
38156: PUSH
38157: LD_VAR 0 6
38161: ST_TO_ADDR
// your_side := side ;
38162: LD_ADDR_OWVAR 2
38166: PUSH
38167: LD_VAR 0 6
38171: ST_TO_ADDR
// ChangeSideFog ( 1 , side ) ;
38172: LD_INT 1
38174: PPUSH
38175: LD_VAR 0 6
38179: PPUSH
38180: CALL_OW 343
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
38184: LD_INT 1
38186: PPUSH
38187: LD_INT 1
38189: PPUSH
38190: LD_VAR 0 6
38194: PPUSH
38195: LD_INT 32793
38197: NEG
38198: PPUSH
38199: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
38203: LD_INT 1
38205: PPUSH
38206: LD_INT 1
38208: PPUSH
38209: LD_VAR 0 6
38213: PPUSH
38214: CALL_OW 331
// ecoNation := nation ;
38218: LD_ADDR_EXP 23
38222: PUSH
38223: LD_VAR 0 7
38227: ST_TO_ADDR
// ecoPeopleAmount := peopleAmount ;
38228: LD_ADDR_EXP 24
38232: PUSH
38233: LD_VAR 0 8
38237: ST_TO_ADDR
// for i = 1 to resourcesAmount * 5 do
38238: LD_ADDR_VAR 0 4
38242: PUSH
38243: DOUBLE
38244: LD_INT 1
38246: DEC
38247: ST_TO_ADDR
38248: LD_VAR 0 9
38252: PUSH
38253: LD_INT 5
38255: MUL
38256: PUSH
38257: FOR_TO
38258: IFFALSE 38296
// CreateResourcesXYR ( mat_cans , 5 , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 6 , false ) ;
38260: LD_INT 1
38262: PPUSH
38263: LD_INT 5
38265: PPUSH
38266: LD_EXP 25
38270: PUSH
38271: LD_INT 1
38273: ARRAY
38274: PPUSH
38275: LD_EXP 25
38279: PUSH
38280: LD_INT 2
38282: ARRAY
38283: PPUSH
38284: LD_INT 6
38286: PPUSH
38287: LD_INT 0
38289: PPUSH
38290: CALL_OW 60
38294: GO 38257
38296: POP
38297: POP
// uc_side := side ;
38298: LD_ADDR_OWVAR 20
38302: PUSH
38303: LD_VAR 0 6
38307: ST_TO_ADDR
// uc_nation := nation ;
38308: LD_ADDR_OWVAR 21
38312: PUSH
38313: LD_VAR 0 7
38317: ST_TO_ADDR
// hc_importance := 100 ;
38318: LD_ADDR_OWVAR 32
38322: PUSH
38323: LD_INT 100
38325: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
38326: LD_INT 0
38328: PPUSH
38329: LD_INT 1
38331: PPUSH
38332: LD_INT 4
38334: PPUSH
38335: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
38339: CALL_OW 44
38343: PPUSH
38344: LD_EXP 25
38348: PUSH
38349: LD_INT 1
38351: ARRAY
38352: PPUSH
38353: LD_EXP 25
38357: PUSH
38358: LD_INT 2
38360: ARRAY
38361: PPUSH
38362: LD_INT 12
38364: PPUSH
38365: LD_INT 0
38367: PPUSH
38368: CALL_OW 50
// InitHc_All ( ) ;
38372: CALL_OW 584
// for i = 1 to peopleAmount - 1 do
38376: LD_ADDR_VAR 0 4
38380: PUSH
38381: DOUBLE
38382: LD_INT 1
38384: DEC
38385: ST_TO_ADDR
38386: LD_VAR 0 8
38390: PUSH
38391: LD_INT 1
38393: MINUS
38394: PUSH
38395: FOR_TO
38396: IFFALSE 38491
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
38398: LD_INT 0
38400: PPUSH
38401: LD_VAR 0 4
38405: PUSH
38406: LD_INT 4
38408: MOD
38409: PUSH
38410: LD_INT 1
38412: PLUS
38413: PPUSH
38414: LD_INT 3
38416: PPUSH
38417: CALL_OW 380
// tmp := Replace ( tmp , tmp + 1 , CreateHuman ) ;
38421: LD_ADDR_VAR 0 5
38425: PUSH
38426: LD_VAR 0 5
38430: PPUSH
38431: LD_VAR 0 5
38435: PUSH
38436: LD_INT 1
38438: PLUS
38439: PPUSH
38440: CALL_OW 44
38444: PPUSH
38445: CALL_OW 1
38449: ST_TO_ADDR
// PlaceUnitXYR ( tmp [ tmp ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
38450: LD_VAR 0 5
38454: PUSH
38455: LD_VAR 0 5
38459: ARRAY
38460: PPUSH
38461: LD_EXP 25
38465: PUSH
38466: LD_INT 1
38468: ARRAY
38469: PPUSH
38470: LD_EXP 25
38474: PUSH
38475: LD_INT 2
38477: ARRAY
38478: PPUSH
38479: LD_INT 12
38481: PPUSH
38482: LD_INT 0
38484: PPUSH
38485: CALL_OW 50
// end ;
38489: GO 38395
38491: POP
38492: POP
// end ;
38493: LD_VAR 0 3
38497: RET
// every 0 0$1 trigger ecoCratesDrop and ecoCratesDropXY do var time , xy ;
38498: LD_EXP 26
38502: PUSH
38503: LD_EXP 27
38507: AND
38508: IFFALSE 38652
38510: GO 38512
38512: DISABLE
38513: LD_INT 0
38515: PPUSH
38516: PPUSH
// begin time := [ 0 0$30 , 0 0$20 , 0 0$10 ] [ ecoCratesDrop ] ;
38517: LD_ADDR_VAR 0 1
38521: PUSH
38522: LD_INT 1050
38524: PUSH
38525: LD_INT 700
38527: PUSH
38528: LD_INT 350
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: LIST
38535: PUSH
38536: LD_EXP 26
38540: ARRAY
38541: ST_TO_ADDR
// while true do
38542: LD_INT 1
38544: IFFALSE 38652
// begin wait ( time ) ;
38546: LD_VAR 0 1
38550: PPUSH
38551: CALL_OW 67
// time := time + 0 0$3 ;
38555: LD_ADDR_VAR 0 1
38559: PUSH
38560: LD_VAR 0 1
38564: PUSH
38565: LD_INT 105
38567: PLUS
38568: ST_TO_ADDR
// if time > 1 1$00 then
38569: LD_VAR 0 1
38573: PUSH
38574: LD_INT 2100
38576: GREATER
38577: IFFALSE 38587
// time := 0 0$30 ;
38579: LD_ADDR_VAR 0 1
38583: PUSH
38584: LD_INT 1050
38586: ST_TO_ADDR
// xy := ecoCratesDropXY [ rand ( 1 , ecoCratesDropXY ) ] ;
38587: LD_ADDR_VAR 0 2
38591: PUSH
38592: LD_EXP 27
38596: PUSH
38597: LD_INT 1
38599: PPUSH
38600: LD_EXP 27
38604: PPUSH
38605: CALL_OW 12
38609: ARRAY
38610: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , xy [ 1 ] , xy [ 2 ] , 6 , true ) ;
38611: LD_INT 1
38613: PPUSH
38614: LD_INT 5
38616: PPUSH
38617: CALL_OW 12
38621: PPUSH
38622: LD_VAR 0 2
38626: PUSH
38627: LD_INT 1
38629: ARRAY
38630: PPUSH
38631: LD_VAR 0 2
38635: PUSH
38636: LD_INT 2
38638: ARRAY
38639: PPUSH
38640: LD_INT 6
38642: PPUSH
38643: LD_INT 1
38645: PPUSH
38646: CALL_OW 56
// end ;
38650: GO 38542
// end ;
38652: PPOPN 2
38654: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
38655: LD_VAR 0 1
38659: PPUSH
38660: LD_VAR 0 2
38664: PPUSH
38665: LD_VAR 0 3
38669: PPUSH
38670: LD_VAR 0 4
38674: PPUSH
38675: LD_VAR 0 5
38679: PPUSH
38680: LD_VAR 0 6
38684: PPUSH
38685: CALL 38692 0 6
// end ; end_of_file
38689: PPOPN 6
38691: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
38692: LD_INT 0
38694: PPUSH
// if p2 = 100 then
38695: LD_VAR 0 2
38699: PUSH
38700: LD_INT 100
38702: EQUAL
38703: IFFALSE 39652
// begin if not StreamModeActive then
38705: LD_EXP 28
38709: NOT
38710: IFFALSE 38720
// StreamModeActive := true ;
38712: LD_ADDR_EXP 28
38716: PUSH
38717: LD_INT 1
38719: ST_TO_ADDR
// if p3 = 0 then
38720: LD_VAR 0 3
38724: PUSH
38725: LD_INT 0
38727: EQUAL
38728: IFFALSE 38734
// InitStreamMode ;
38730: CALL 39812 0 0
// if p3 = 1 then
38734: LD_VAR 0 3
38738: PUSH
38739: LD_INT 1
38741: EQUAL
38742: IFFALSE 38752
// sRocket := true ;
38744: LD_ADDR_EXP 33
38748: PUSH
38749: LD_INT 1
38751: ST_TO_ADDR
// if p3 = 2 then
38752: LD_VAR 0 3
38756: PUSH
38757: LD_INT 2
38759: EQUAL
38760: IFFALSE 38770
// sSpeed := true ;
38762: LD_ADDR_EXP 32
38766: PUSH
38767: LD_INT 1
38769: ST_TO_ADDR
// if p3 = 3 then
38770: LD_VAR 0 3
38774: PUSH
38775: LD_INT 3
38777: EQUAL
38778: IFFALSE 38788
// sEngine := true ;
38780: LD_ADDR_EXP 34
38784: PUSH
38785: LD_INT 1
38787: ST_TO_ADDR
// if p3 = 4 then
38788: LD_VAR 0 3
38792: PUSH
38793: LD_INT 4
38795: EQUAL
38796: IFFALSE 38806
// sSpec := true ;
38798: LD_ADDR_EXP 31
38802: PUSH
38803: LD_INT 1
38805: ST_TO_ADDR
// if p3 = 5 then
38806: LD_VAR 0 3
38810: PUSH
38811: LD_INT 5
38813: EQUAL
38814: IFFALSE 38824
// sLevel := true ;
38816: LD_ADDR_EXP 35
38820: PUSH
38821: LD_INT 1
38823: ST_TO_ADDR
// if p3 = 6 then
38824: LD_VAR 0 3
38828: PUSH
38829: LD_INT 6
38831: EQUAL
38832: IFFALSE 38842
// sArmoury := true ;
38834: LD_ADDR_EXP 36
38838: PUSH
38839: LD_INT 1
38841: ST_TO_ADDR
// if p3 = 7 then
38842: LD_VAR 0 3
38846: PUSH
38847: LD_INT 7
38849: EQUAL
38850: IFFALSE 38860
// sRadar := true ;
38852: LD_ADDR_EXP 37
38856: PUSH
38857: LD_INT 1
38859: ST_TO_ADDR
// if p3 = 8 then
38860: LD_VAR 0 3
38864: PUSH
38865: LD_INT 8
38867: EQUAL
38868: IFFALSE 38878
// sBunker := true ;
38870: LD_ADDR_EXP 38
38874: PUSH
38875: LD_INT 1
38877: ST_TO_ADDR
// if p3 = 9 then
38878: LD_VAR 0 3
38882: PUSH
38883: LD_INT 9
38885: EQUAL
38886: IFFALSE 38896
// sHack := true ;
38888: LD_ADDR_EXP 39
38892: PUSH
38893: LD_INT 1
38895: ST_TO_ADDR
// if p3 = 10 then
38896: LD_VAR 0 3
38900: PUSH
38901: LD_INT 10
38903: EQUAL
38904: IFFALSE 38914
// sFire := true ;
38906: LD_ADDR_EXP 40
38910: PUSH
38911: LD_INT 1
38913: ST_TO_ADDR
// if p3 = 11 then
38914: LD_VAR 0 3
38918: PUSH
38919: LD_INT 11
38921: EQUAL
38922: IFFALSE 38932
// sRefresh := true ;
38924: LD_ADDR_EXP 41
38928: PUSH
38929: LD_INT 1
38931: ST_TO_ADDR
// if p3 = 12 then
38932: LD_VAR 0 3
38936: PUSH
38937: LD_INT 12
38939: EQUAL
38940: IFFALSE 38950
// sExp := true ;
38942: LD_ADDR_EXP 42
38946: PUSH
38947: LD_INT 1
38949: ST_TO_ADDR
// if p3 = 13 then
38950: LD_VAR 0 3
38954: PUSH
38955: LD_INT 13
38957: EQUAL
38958: IFFALSE 38968
// sDepot := true ;
38960: LD_ADDR_EXP 43
38964: PUSH
38965: LD_INT 1
38967: ST_TO_ADDR
// if p3 = 14 then
38968: LD_VAR 0 3
38972: PUSH
38973: LD_INT 14
38975: EQUAL
38976: IFFALSE 38986
// sFlag := true ;
38978: LD_ADDR_EXP 44
38982: PUSH
38983: LD_INT 1
38985: ST_TO_ADDR
// if p3 = 15 then
38986: LD_VAR 0 3
38990: PUSH
38991: LD_INT 15
38993: EQUAL
38994: IFFALSE 39004
// sKamikadze := true ;
38996: LD_ADDR_EXP 52
39000: PUSH
39001: LD_INT 1
39003: ST_TO_ADDR
// if p3 = 16 then
39004: LD_VAR 0 3
39008: PUSH
39009: LD_INT 16
39011: EQUAL
39012: IFFALSE 39022
// sTroll := true ;
39014: LD_ADDR_EXP 53
39018: PUSH
39019: LD_INT 1
39021: ST_TO_ADDR
// if p3 = 17 then
39022: LD_VAR 0 3
39026: PUSH
39027: LD_INT 17
39029: EQUAL
39030: IFFALSE 39040
// sSlow := true ;
39032: LD_ADDR_EXP 54
39036: PUSH
39037: LD_INT 1
39039: ST_TO_ADDR
// if p3 = 18 then
39040: LD_VAR 0 3
39044: PUSH
39045: LD_INT 18
39047: EQUAL
39048: IFFALSE 39058
// sLack := true ;
39050: LD_ADDR_EXP 55
39054: PUSH
39055: LD_INT 1
39057: ST_TO_ADDR
// if p3 = 19 then
39058: LD_VAR 0 3
39062: PUSH
39063: LD_INT 19
39065: EQUAL
39066: IFFALSE 39076
// sTank := true ;
39068: LD_ADDR_EXP 57
39072: PUSH
39073: LD_INT 1
39075: ST_TO_ADDR
// if p3 = 20 then
39076: LD_VAR 0 3
39080: PUSH
39081: LD_INT 20
39083: EQUAL
39084: IFFALSE 39094
// sRemote := true ;
39086: LD_ADDR_EXP 58
39090: PUSH
39091: LD_INT 1
39093: ST_TO_ADDR
// if p3 = 21 then
39094: LD_VAR 0 3
39098: PUSH
39099: LD_INT 21
39101: EQUAL
39102: IFFALSE 39112
// sPowell := true ;
39104: LD_ADDR_EXP 59
39108: PUSH
39109: LD_INT 1
39111: ST_TO_ADDR
// if p3 = 22 then
39112: LD_VAR 0 3
39116: PUSH
39117: LD_INT 22
39119: EQUAL
39120: IFFALSE 39130
// sTeleport := true ;
39122: LD_ADDR_EXP 62
39126: PUSH
39127: LD_INT 1
39129: ST_TO_ADDR
// if p3 = 23 then
39130: LD_VAR 0 3
39134: PUSH
39135: LD_INT 23
39137: EQUAL
39138: IFFALSE 39148
// sOilTower := true ;
39140: LD_ADDR_EXP 64
39144: PUSH
39145: LD_INT 1
39147: ST_TO_ADDR
// if p3 = 24 then
39148: LD_VAR 0 3
39152: PUSH
39153: LD_INT 24
39155: EQUAL
39156: IFFALSE 39166
// sShovel := true ;
39158: LD_ADDR_EXP 65
39162: PUSH
39163: LD_INT 1
39165: ST_TO_ADDR
// if p3 = 25 then
39166: LD_VAR 0 3
39170: PUSH
39171: LD_INT 25
39173: EQUAL
39174: IFFALSE 39184
// sSheik := true ;
39176: LD_ADDR_EXP 66
39180: PUSH
39181: LD_INT 1
39183: ST_TO_ADDR
// if p3 = 26 then
39184: LD_VAR 0 3
39188: PUSH
39189: LD_INT 26
39191: EQUAL
39192: IFFALSE 39202
// sEarthquake := true ;
39194: LD_ADDR_EXP 68
39198: PUSH
39199: LD_INT 1
39201: ST_TO_ADDR
// if p3 = 27 then
39202: LD_VAR 0 3
39206: PUSH
39207: LD_INT 27
39209: EQUAL
39210: IFFALSE 39220
// sAI := true ;
39212: LD_ADDR_EXP 69
39216: PUSH
39217: LD_INT 1
39219: ST_TO_ADDR
// if p3 = 28 then
39220: LD_VAR 0 3
39224: PUSH
39225: LD_INT 28
39227: EQUAL
39228: IFFALSE 39238
// sCargo := true ;
39230: LD_ADDR_EXP 72
39234: PUSH
39235: LD_INT 1
39237: ST_TO_ADDR
// if p3 = 29 then
39238: LD_VAR 0 3
39242: PUSH
39243: LD_INT 29
39245: EQUAL
39246: IFFALSE 39256
// sDLaser := true ;
39248: LD_ADDR_EXP 73
39252: PUSH
39253: LD_INT 1
39255: ST_TO_ADDR
// if p3 = 30 then
39256: LD_VAR 0 3
39260: PUSH
39261: LD_INT 30
39263: EQUAL
39264: IFFALSE 39274
// sExchange := true ;
39266: LD_ADDR_EXP 74
39270: PUSH
39271: LD_INT 1
39273: ST_TO_ADDR
// if p3 = 31 then
39274: LD_VAR 0 3
39278: PUSH
39279: LD_INT 31
39281: EQUAL
39282: IFFALSE 39292
// sFac := true ;
39284: LD_ADDR_EXP 75
39288: PUSH
39289: LD_INT 1
39291: ST_TO_ADDR
// if p3 = 32 then
39292: LD_VAR 0 3
39296: PUSH
39297: LD_INT 32
39299: EQUAL
39300: IFFALSE 39310
// sPower := true ;
39302: LD_ADDR_EXP 76
39306: PUSH
39307: LD_INT 1
39309: ST_TO_ADDR
// if p3 = 33 then
39310: LD_VAR 0 3
39314: PUSH
39315: LD_INT 33
39317: EQUAL
39318: IFFALSE 39328
// sRandom := true ;
39320: LD_ADDR_EXP 77
39324: PUSH
39325: LD_INT 1
39327: ST_TO_ADDR
// if p3 = 34 then
39328: LD_VAR 0 3
39332: PUSH
39333: LD_INT 34
39335: EQUAL
39336: IFFALSE 39346
// sShield := true ;
39338: LD_ADDR_EXP 78
39342: PUSH
39343: LD_INT 1
39345: ST_TO_ADDR
// if p3 = 35 then
39346: LD_VAR 0 3
39350: PUSH
39351: LD_INT 35
39353: EQUAL
39354: IFFALSE 39364
// sTime := true ;
39356: LD_ADDR_EXP 79
39360: PUSH
39361: LD_INT 1
39363: ST_TO_ADDR
// if p3 = 36 then
39364: LD_VAR 0 3
39368: PUSH
39369: LD_INT 36
39371: EQUAL
39372: IFFALSE 39382
// sTools := true ;
39374: LD_ADDR_EXP 80
39378: PUSH
39379: LD_INT 1
39381: ST_TO_ADDR
// if p3 = 101 then
39382: LD_VAR 0 3
39386: PUSH
39387: LD_INT 101
39389: EQUAL
39390: IFFALSE 39400
// sSold := true ;
39392: LD_ADDR_EXP 45
39396: PUSH
39397: LD_INT 1
39399: ST_TO_ADDR
// if p3 = 102 then
39400: LD_VAR 0 3
39404: PUSH
39405: LD_INT 102
39407: EQUAL
39408: IFFALSE 39418
// sDiff := true ;
39410: LD_ADDR_EXP 46
39414: PUSH
39415: LD_INT 1
39417: ST_TO_ADDR
// if p3 = 103 then
39418: LD_VAR 0 3
39422: PUSH
39423: LD_INT 103
39425: EQUAL
39426: IFFALSE 39436
// sFog := true ;
39428: LD_ADDR_EXP 49
39432: PUSH
39433: LD_INT 1
39435: ST_TO_ADDR
// if p3 = 104 then
39436: LD_VAR 0 3
39440: PUSH
39441: LD_INT 104
39443: EQUAL
39444: IFFALSE 39454
// sReset := true ;
39446: LD_ADDR_EXP 50
39450: PUSH
39451: LD_INT 1
39453: ST_TO_ADDR
// if p3 = 105 then
39454: LD_VAR 0 3
39458: PUSH
39459: LD_INT 105
39461: EQUAL
39462: IFFALSE 39472
// sSun := true ;
39464: LD_ADDR_EXP 51
39468: PUSH
39469: LD_INT 1
39471: ST_TO_ADDR
// if p3 = 106 then
39472: LD_VAR 0 3
39476: PUSH
39477: LD_INT 106
39479: EQUAL
39480: IFFALSE 39490
// sTiger := true ;
39482: LD_ADDR_EXP 47
39486: PUSH
39487: LD_INT 1
39489: ST_TO_ADDR
// if p3 = 107 then
39490: LD_VAR 0 3
39494: PUSH
39495: LD_INT 107
39497: EQUAL
39498: IFFALSE 39508
// sBomb := true ;
39500: LD_ADDR_EXP 48
39504: PUSH
39505: LD_INT 1
39507: ST_TO_ADDR
// if p3 = 108 then
39508: LD_VAR 0 3
39512: PUSH
39513: LD_INT 108
39515: EQUAL
39516: IFFALSE 39526
// sWound := true ;
39518: LD_ADDR_EXP 56
39522: PUSH
39523: LD_INT 1
39525: ST_TO_ADDR
// if p3 = 109 then
39526: LD_VAR 0 3
39530: PUSH
39531: LD_INT 109
39533: EQUAL
39534: IFFALSE 39544
// sBetray := true ;
39536: LD_ADDR_EXP 60
39540: PUSH
39541: LD_INT 1
39543: ST_TO_ADDR
// if p3 = 110 then
39544: LD_VAR 0 3
39548: PUSH
39549: LD_INT 110
39551: EQUAL
39552: IFFALSE 39562
// sContamin := true ;
39554: LD_ADDR_EXP 61
39558: PUSH
39559: LD_INT 1
39561: ST_TO_ADDR
// if p3 = 111 then
39562: LD_VAR 0 3
39566: PUSH
39567: LD_INT 111
39569: EQUAL
39570: IFFALSE 39580
// sOil := true ;
39572: LD_ADDR_EXP 63
39576: PUSH
39577: LD_INT 1
39579: ST_TO_ADDR
// if p3 = 112 then
39580: LD_VAR 0 3
39584: PUSH
39585: LD_INT 112
39587: EQUAL
39588: IFFALSE 39598
// sStu := true ;
39590: LD_ADDR_EXP 67
39594: PUSH
39595: LD_INT 1
39597: ST_TO_ADDR
// if p3 = 113 then
39598: LD_VAR 0 3
39602: PUSH
39603: LD_INT 113
39605: EQUAL
39606: IFFALSE 39616
// sBazooka := true ;
39608: LD_ADDR_EXP 70
39612: PUSH
39613: LD_INT 1
39615: ST_TO_ADDR
// if p3 = 114 then
39616: LD_VAR 0 3
39620: PUSH
39621: LD_INT 114
39623: EQUAL
39624: IFFALSE 39634
// sMortar := true ;
39626: LD_ADDR_EXP 71
39630: PUSH
39631: LD_INT 1
39633: ST_TO_ADDR
// if p3 = 115 then
39634: LD_VAR 0 3
39638: PUSH
39639: LD_INT 115
39641: EQUAL
39642: IFFALSE 39652
// sRanger := true ;
39644: LD_ADDR_EXP 81
39648: PUSH
39649: LD_INT 1
39651: ST_TO_ADDR
// end ; if p2 = 101 then
39652: LD_VAR 0 2
39656: PUSH
39657: LD_INT 101
39659: EQUAL
39660: IFFALSE 39788
// begin case p3 of 1 :
39662: LD_VAR 0 3
39666: PUSH
39667: LD_INT 1
39669: DOUBLE
39670: EQUAL
39671: IFTRUE 39675
39673: GO 39682
39675: POP
// hHackUnlimitedResources ; 2 :
39676: CALL 50825 0 0
39680: GO 39788
39682: LD_INT 2
39684: DOUBLE
39685: EQUAL
39686: IFTRUE 39690
39688: GO 39697
39690: POP
// hHackSetLevel10 ; 3 :
39691: CALL 50958 0 0
39695: GO 39788
39697: LD_INT 3
39699: DOUBLE
39700: EQUAL
39701: IFTRUE 39705
39703: GO 39712
39705: POP
// hHackSetLevel10YourUnits ; 4 :
39706: CALL 51043 0 0
39710: GO 39788
39712: LD_INT 4
39714: DOUBLE
39715: EQUAL
39716: IFTRUE 39720
39718: GO 39727
39720: POP
// hHackInvincible ; 5 :
39721: CALL 51491 0 0
39725: GO 39788
39727: LD_INT 5
39729: DOUBLE
39730: EQUAL
39731: IFTRUE 39735
39733: GO 39742
39735: POP
// hHackInvisible ; 6 :
39736: CALL 51602 0 0
39740: GO 39788
39742: LD_INT 6
39744: DOUBLE
39745: EQUAL
39746: IFTRUE 39750
39748: GO 39757
39750: POP
// hHackChangeYourSide ; 7 :
39751: CALL 51659 0 0
39755: GO 39788
39757: LD_INT 7
39759: DOUBLE
39760: EQUAL
39761: IFTRUE 39765
39763: GO 39772
39765: POP
// hHackChangeUnitSide ; 8 :
39766: CALL 51701 0 0
39770: GO 39788
39772: LD_INT 8
39774: DOUBLE
39775: EQUAL
39776: IFTRUE 39780
39778: GO 39787
39780: POP
// hHackFog ; end ;
39781: CALL 51802 0 0
39785: GO 39788
39787: POP
// end ; end ;
39788: LD_VAR 0 7
39792: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
39793: GO 39795
39795: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
39796: LD_STRING initStreamRollete();
39798: PPUSH
39799: CALL_OW 559
// InitStreamMode ;
39803: CALL 39812 0 0
// DefineStreamItems ( ) ;
39807: CALL 40252 0 0
// end ;
39811: END
// function InitStreamMode ; begin
39812: LD_INT 0
39814: PPUSH
// streamModeActive := false ;
39815: LD_ADDR_EXP 28
39819: PUSH
39820: LD_INT 0
39822: ST_TO_ADDR
// normalCounter := 36 ;
39823: LD_ADDR_EXP 29
39827: PUSH
39828: LD_INT 36
39830: ST_TO_ADDR
// hardcoreCounter := 16 ;
39831: LD_ADDR_EXP 30
39835: PUSH
39836: LD_INT 16
39838: ST_TO_ADDR
// sRocket := false ;
39839: LD_ADDR_EXP 33
39843: PUSH
39844: LD_INT 0
39846: ST_TO_ADDR
// sSpeed := false ;
39847: LD_ADDR_EXP 32
39851: PUSH
39852: LD_INT 0
39854: ST_TO_ADDR
// sEngine := false ;
39855: LD_ADDR_EXP 34
39859: PUSH
39860: LD_INT 0
39862: ST_TO_ADDR
// sSpec := false ;
39863: LD_ADDR_EXP 31
39867: PUSH
39868: LD_INT 0
39870: ST_TO_ADDR
// sLevel := false ;
39871: LD_ADDR_EXP 35
39875: PUSH
39876: LD_INT 0
39878: ST_TO_ADDR
// sArmoury := false ;
39879: LD_ADDR_EXP 36
39883: PUSH
39884: LD_INT 0
39886: ST_TO_ADDR
// sRadar := false ;
39887: LD_ADDR_EXP 37
39891: PUSH
39892: LD_INT 0
39894: ST_TO_ADDR
// sBunker := false ;
39895: LD_ADDR_EXP 38
39899: PUSH
39900: LD_INT 0
39902: ST_TO_ADDR
// sHack := false ;
39903: LD_ADDR_EXP 39
39907: PUSH
39908: LD_INT 0
39910: ST_TO_ADDR
// sFire := false ;
39911: LD_ADDR_EXP 40
39915: PUSH
39916: LD_INT 0
39918: ST_TO_ADDR
// sRefresh := false ;
39919: LD_ADDR_EXP 41
39923: PUSH
39924: LD_INT 0
39926: ST_TO_ADDR
// sExp := false ;
39927: LD_ADDR_EXP 42
39931: PUSH
39932: LD_INT 0
39934: ST_TO_ADDR
// sDepot := false ;
39935: LD_ADDR_EXP 43
39939: PUSH
39940: LD_INT 0
39942: ST_TO_ADDR
// sFlag := false ;
39943: LD_ADDR_EXP 44
39947: PUSH
39948: LD_INT 0
39950: ST_TO_ADDR
// sKamikadze := false ;
39951: LD_ADDR_EXP 52
39955: PUSH
39956: LD_INT 0
39958: ST_TO_ADDR
// sTroll := false ;
39959: LD_ADDR_EXP 53
39963: PUSH
39964: LD_INT 0
39966: ST_TO_ADDR
// sSlow := false ;
39967: LD_ADDR_EXP 54
39971: PUSH
39972: LD_INT 0
39974: ST_TO_ADDR
// sLack := false ;
39975: LD_ADDR_EXP 55
39979: PUSH
39980: LD_INT 0
39982: ST_TO_ADDR
// sTank := false ;
39983: LD_ADDR_EXP 57
39987: PUSH
39988: LD_INT 0
39990: ST_TO_ADDR
// sRemote := false ;
39991: LD_ADDR_EXP 58
39995: PUSH
39996: LD_INT 0
39998: ST_TO_ADDR
// sPowell := false ;
39999: LD_ADDR_EXP 59
40003: PUSH
40004: LD_INT 0
40006: ST_TO_ADDR
// sTeleport := false ;
40007: LD_ADDR_EXP 62
40011: PUSH
40012: LD_INT 0
40014: ST_TO_ADDR
// sOilTower := false ;
40015: LD_ADDR_EXP 64
40019: PUSH
40020: LD_INT 0
40022: ST_TO_ADDR
// sShovel := false ;
40023: LD_ADDR_EXP 65
40027: PUSH
40028: LD_INT 0
40030: ST_TO_ADDR
// sSheik := false ;
40031: LD_ADDR_EXP 66
40035: PUSH
40036: LD_INT 0
40038: ST_TO_ADDR
// sEarthquake := false ;
40039: LD_ADDR_EXP 68
40043: PUSH
40044: LD_INT 0
40046: ST_TO_ADDR
// sAI := false ;
40047: LD_ADDR_EXP 69
40051: PUSH
40052: LD_INT 0
40054: ST_TO_ADDR
// sCargo := false ;
40055: LD_ADDR_EXP 72
40059: PUSH
40060: LD_INT 0
40062: ST_TO_ADDR
// sDLaser := false ;
40063: LD_ADDR_EXP 73
40067: PUSH
40068: LD_INT 0
40070: ST_TO_ADDR
// sExchange := false ;
40071: LD_ADDR_EXP 74
40075: PUSH
40076: LD_INT 0
40078: ST_TO_ADDR
// sFac := false ;
40079: LD_ADDR_EXP 75
40083: PUSH
40084: LD_INT 0
40086: ST_TO_ADDR
// sPower := false ;
40087: LD_ADDR_EXP 76
40091: PUSH
40092: LD_INT 0
40094: ST_TO_ADDR
// sRandom := false ;
40095: LD_ADDR_EXP 77
40099: PUSH
40100: LD_INT 0
40102: ST_TO_ADDR
// sShield := false ;
40103: LD_ADDR_EXP 78
40107: PUSH
40108: LD_INT 0
40110: ST_TO_ADDR
// sTime := false ;
40111: LD_ADDR_EXP 79
40115: PUSH
40116: LD_INT 0
40118: ST_TO_ADDR
// sTools := false ;
40119: LD_ADDR_EXP 80
40123: PUSH
40124: LD_INT 0
40126: ST_TO_ADDR
// sSold := false ;
40127: LD_ADDR_EXP 45
40131: PUSH
40132: LD_INT 0
40134: ST_TO_ADDR
// sDiff := false ;
40135: LD_ADDR_EXP 46
40139: PUSH
40140: LD_INT 0
40142: ST_TO_ADDR
// sFog := false ;
40143: LD_ADDR_EXP 49
40147: PUSH
40148: LD_INT 0
40150: ST_TO_ADDR
// sReset := false ;
40151: LD_ADDR_EXP 50
40155: PUSH
40156: LD_INT 0
40158: ST_TO_ADDR
// sSun := false ;
40159: LD_ADDR_EXP 51
40163: PUSH
40164: LD_INT 0
40166: ST_TO_ADDR
// sTiger := false ;
40167: LD_ADDR_EXP 47
40171: PUSH
40172: LD_INT 0
40174: ST_TO_ADDR
// sBomb := false ;
40175: LD_ADDR_EXP 48
40179: PUSH
40180: LD_INT 0
40182: ST_TO_ADDR
// sWound := false ;
40183: LD_ADDR_EXP 56
40187: PUSH
40188: LD_INT 0
40190: ST_TO_ADDR
// sBetray := false ;
40191: LD_ADDR_EXP 60
40195: PUSH
40196: LD_INT 0
40198: ST_TO_ADDR
// sContamin := false ;
40199: LD_ADDR_EXP 61
40203: PUSH
40204: LD_INT 0
40206: ST_TO_ADDR
// sOil := false ;
40207: LD_ADDR_EXP 63
40211: PUSH
40212: LD_INT 0
40214: ST_TO_ADDR
// sStu := false ;
40215: LD_ADDR_EXP 67
40219: PUSH
40220: LD_INT 0
40222: ST_TO_ADDR
// sBazooka := false ;
40223: LD_ADDR_EXP 70
40227: PUSH
40228: LD_INT 0
40230: ST_TO_ADDR
// sMortar := false ;
40231: LD_ADDR_EXP 71
40235: PUSH
40236: LD_INT 0
40238: ST_TO_ADDR
// sRanger := false ;
40239: LD_ADDR_EXP 81
40243: PUSH
40244: LD_INT 0
40246: ST_TO_ADDR
// end ;
40247: LD_VAR 0 1
40251: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
40252: LD_INT 0
40254: PPUSH
40255: PPUSH
40256: PPUSH
40257: PPUSH
40258: PPUSH
// result := [ ] ;
40259: LD_ADDR_VAR 0 1
40263: PUSH
40264: EMPTY
40265: ST_TO_ADDR
// if campaign_id = 1 then
40266: LD_OWVAR 69
40270: PUSH
40271: LD_INT 1
40273: EQUAL
40274: IFFALSE 43212
// begin case mission_number of 1 :
40276: LD_OWVAR 70
40280: PUSH
40281: LD_INT 1
40283: DOUBLE
40284: EQUAL
40285: IFTRUE 40289
40287: GO 40353
40289: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
40290: LD_ADDR_VAR 0 1
40294: PUSH
40295: LD_INT 2
40297: PUSH
40298: LD_INT 4
40300: PUSH
40301: LD_INT 11
40303: PUSH
40304: LD_INT 12
40306: PUSH
40307: LD_INT 15
40309: PUSH
40310: LD_INT 16
40312: PUSH
40313: LD_INT 22
40315: PUSH
40316: LD_INT 23
40318: PUSH
40319: LD_INT 26
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 101
40335: PUSH
40336: LD_INT 102
40338: PUSH
40339: LD_INT 106
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: LIST
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: ST_TO_ADDR
40351: GO 43210
40353: LD_INT 2
40355: DOUBLE
40356: EQUAL
40357: IFTRUE 40361
40359: GO 40433
40361: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
40362: LD_ADDR_VAR 0 1
40366: PUSH
40367: LD_INT 2
40369: PUSH
40370: LD_INT 4
40372: PUSH
40373: LD_INT 11
40375: PUSH
40376: LD_INT 12
40378: PUSH
40379: LD_INT 15
40381: PUSH
40382: LD_INT 16
40384: PUSH
40385: LD_INT 22
40387: PUSH
40388: LD_INT 23
40390: PUSH
40391: LD_INT 26
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 101
40407: PUSH
40408: LD_INT 102
40410: PUSH
40411: LD_INT 105
40413: PUSH
40414: LD_INT 106
40416: PUSH
40417: LD_INT 108
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: ST_TO_ADDR
40431: GO 43210
40433: LD_INT 3
40435: DOUBLE
40436: EQUAL
40437: IFTRUE 40441
40439: GO 40517
40441: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
40442: LD_ADDR_VAR 0 1
40446: PUSH
40447: LD_INT 2
40449: PUSH
40450: LD_INT 4
40452: PUSH
40453: LD_INT 5
40455: PUSH
40456: LD_INT 11
40458: PUSH
40459: LD_INT 12
40461: PUSH
40462: LD_INT 15
40464: PUSH
40465: LD_INT 16
40467: PUSH
40468: LD_INT 22
40470: PUSH
40471: LD_INT 26
40473: PUSH
40474: LD_INT 36
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 101
40491: PUSH
40492: LD_INT 102
40494: PUSH
40495: LD_INT 105
40497: PUSH
40498: LD_INT 106
40500: PUSH
40501: LD_INT 108
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: ST_TO_ADDR
40515: GO 43210
40517: LD_INT 4
40519: DOUBLE
40520: EQUAL
40521: IFTRUE 40525
40523: GO 40609
40525: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
40526: LD_ADDR_VAR 0 1
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: LD_INT 4
40536: PUSH
40537: LD_INT 5
40539: PUSH
40540: LD_INT 8
40542: PUSH
40543: LD_INT 11
40545: PUSH
40546: LD_INT 12
40548: PUSH
40549: LD_INT 15
40551: PUSH
40552: LD_INT 16
40554: PUSH
40555: LD_INT 22
40557: PUSH
40558: LD_INT 23
40560: PUSH
40561: LD_INT 26
40563: PUSH
40564: LD_INT 36
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 101
40583: PUSH
40584: LD_INT 102
40586: PUSH
40587: LD_INT 105
40589: PUSH
40590: LD_INT 106
40592: PUSH
40593: LD_INT 108
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: ST_TO_ADDR
40607: GO 43210
40609: LD_INT 5
40611: DOUBLE
40612: EQUAL
40613: IFTRUE 40617
40615: GO 40717
40617: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
40618: LD_ADDR_VAR 0 1
40622: PUSH
40623: LD_INT 2
40625: PUSH
40626: LD_INT 4
40628: PUSH
40629: LD_INT 5
40631: PUSH
40632: LD_INT 6
40634: PUSH
40635: LD_INT 8
40637: PUSH
40638: LD_INT 11
40640: PUSH
40641: LD_INT 12
40643: PUSH
40644: LD_INT 15
40646: PUSH
40647: LD_INT 16
40649: PUSH
40650: LD_INT 22
40652: PUSH
40653: LD_INT 23
40655: PUSH
40656: LD_INT 25
40658: PUSH
40659: LD_INT 26
40661: PUSH
40662: LD_INT 36
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 101
40683: PUSH
40684: LD_INT 102
40686: PUSH
40687: LD_INT 105
40689: PUSH
40690: LD_INT 106
40692: PUSH
40693: LD_INT 108
40695: PUSH
40696: LD_INT 109
40698: PUSH
40699: LD_INT 112
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: ST_TO_ADDR
40715: GO 43210
40717: LD_INT 6
40719: DOUBLE
40720: EQUAL
40721: IFTRUE 40725
40723: GO 40845
40725: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
40726: LD_ADDR_VAR 0 1
40730: PUSH
40731: LD_INT 2
40733: PUSH
40734: LD_INT 4
40736: PUSH
40737: LD_INT 5
40739: PUSH
40740: LD_INT 6
40742: PUSH
40743: LD_INT 8
40745: PUSH
40746: LD_INT 11
40748: PUSH
40749: LD_INT 12
40751: PUSH
40752: LD_INT 15
40754: PUSH
40755: LD_INT 16
40757: PUSH
40758: LD_INT 20
40760: PUSH
40761: LD_INT 21
40763: PUSH
40764: LD_INT 22
40766: PUSH
40767: LD_INT 23
40769: PUSH
40770: LD_INT 25
40772: PUSH
40773: LD_INT 26
40775: PUSH
40776: LD_INT 30
40778: PUSH
40779: LD_INT 31
40781: PUSH
40782: LD_INT 32
40784: PUSH
40785: LD_INT 36
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 101
40811: PUSH
40812: LD_INT 102
40814: PUSH
40815: LD_INT 105
40817: PUSH
40818: LD_INT 106
40820: PUSH
40821: LD_INT 108
40823: PUSH
40824: LD_INT 109
40826: PUSH
40827: LD_INT 112
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: ST_TO_ADDR
40843: GO 43210
40845: LD_INT 7
40847: DOUBLE
40848: EQUAL
40849: IFTRUE 40853
40851: GO 40953
40853: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
40854: LD_ADDR_VAR 0 1
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: LD_INT 4
40864: PUSH
40865: LD_INT 5
40867: PUSH
40868: LD_INT 7
40870: PUSH
40871: LD_INT 11
40873: PUSH
40874: LD_INT 12
40876: PUSH
40877: LD_INT 15
40879: PUSH
40880: LD_INT 16
40882: PUSH
40883: LD_INT 20
40885: PUSH
40886: LD_INT 21
40888: PUSH
40889: LD_INT 22
40891: PUSH
40892: LD_INT 23
40894: PUSH
40895: LD_INT 25
40897: PUSH
40898: LD_INT 26
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 101
40919: PUSH
40920: LD_INT 102
40922: PUSH
40923: LD_INT 103
40925: PUSH
40926: LD_INT 105
40928: PUSH
40929: LD_INT 106
40931: PUSH
40932: LD_INT 108
40934: PUSH
40935: LD_INT 112
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: ST_TO_ADDR
40951: GO 43210
40953: LD_INT 8
40955: DOUBLE
40956: EQUAL
40957: IFTRUE 40961
40959: GO 41089
40961: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
40962: LD_ADDR_VAR 0 1
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: LD_INT 4
40972: PUSH
40973: LD_INT 5
40975: PUSH
40976: LD_INT 6
40978: PUSH
40979: LD_INT 7
40981: PUSH
40982: LD_INT 8
40984: PUSH
40985: LD_INT 11
40987: PUSH
40988: LD_INT 12
40990: PUSH
40991: LD_INT 15
40993: PUSH
40994: LD_INT 16
40996: PUSH
40997: LD_INT 20
40999: PUSH
41000: LD_INT 21
41002: PUSH
41003: LD_INT 22
41005: PUSH
41006: LD_INT 23
41008: PUSH
41009: LD_INT 25
41011: PUSH
41012: LD_INT 26
41014: PUSH
41015: LD_INT 30
41017: PUSH
41018: LD_INT 31
41020: PUSH
41021: LD_INT 32
41023: PUSH
41024: LD_INT 36
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 101
41051: PUSH
41052: LD_INT 102
41054: PUSH
41055: LD_INT 103
41057: PUSH
41058: LD_INT 105
41060: PUSH
41061: LD_INT 106
41063: PUSH
41064: LD_INT 108
41066: PUSH
41067: LD_INT 109
41069: PUSH
41070: LD_INT 112
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: ST_TO_ADDR
41087: GO 43210
41089: LD_INT 9
41091: DOUBLE
41092: EQUAL
41093: IFTRUE 41097
41095: GO 41233
41097: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
41098: LD_ADDR_VAR 0 1
41102: PUSH
41103: LD_INT 2
41105: PUSH
41106: LD_INT 4
41108: PUSH
41109: LD_INT 5
41111: PUSH
41112: LD_INT 6
41114: PUSH
41115: LD_INT 7
41117: PUSH
41118: LD_INT 8
41120: PUSH
41121: LD_INT 11
41123: PUSH
41124: LD_INT 12
41126: PUSH
41127: LD_INT 15
41129: PUSH
41130: LD_INT 16
41132: PUSH
41133: LD_INT 20
41135: PUSH
41136: LD_INT 21
41138: PUSH
41139: LD_INT 22
41141: PUSH
41142: LD_INT 23
41144: PUSH
41145: LD_INT 25
41147: PUSH
41148: LD_INT 26
41150: PUSH
41151: LD_INT 28
41153: PUSH
41154: LD_INT 30
41156: PUSH
41157: LD_INT 31
41159: PUSH
41160: LD_INT 32
41162: PUSH
41163: LD_INT 36
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 101
41191: PUSH
41192: LD_INT 102
41194: PUSH
41195: LD_INT 103
41197: PUSH
41198: LD_INT 105
41200: PUSH
41201: LD_INT 106
41203: PUSH
41204: LD_INT 108
41206: PUSH
41207: LD_INT 109
41209: PUSH
41210: LD_INT 112
41212: PUSH
41213: LD_INT 114
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: ST_TO_ADDR
41231: GO 43210
41233: LD_INT 10
41235: DOUBLE
41236: EQUAL
41237: IFTRUE 41241
41239: GO 41425
41241: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
41242: LD_ADDR_VAR 0 1
41246: PUSH
41247: LD_INT 2
41249: PUSH
41250: LD_INT 4
41252: PUSH
41253: LD_INT 5
41255: PUSH
41256: LD_INT 6
41258: PUSH
41259: LD_INT 7
41261: PUSH
41262: LD_INT 8
41264: PUSH
41265: LD_INT 9
41267: PUSH
41268: LD_INT 10
41270: PUSH
41271: LD_INT 11
41273: PUSH
41274: LD_INT 12
41276: PUSH
41277: LD_INT 13
41279: PUSH
41280: LD_INT 14
41282: PUSH
41283: LD_INT 15
41285: PUSH
41286: LD_INT 16
41288: PUSH
41289: LD_INT 17
41291: PUSH
41292: LD_INT 18
41294: PUSH
41295: LD_INT 19
41297: PUSH
41298: LD_INT 20
41300: PUSH
41301: LD_INT 21
41303: PUSH
41304: LD_INT 22
41306: PUSH
41307: LD_INT 23
41309: PUSH
41310: LD_INT 24
41312: PUSH
41313: LD_INT 25
41315: PUSH
41316: LD_INT 26
41318: PUSH
41319: LD_INT 28
41321: PUSH
41322: LD_INT 30
41324: PUSH
41325: LD_INT 31
41327: PUSH
41328: LD_INT 32
41330: PUSH
41331: LD_INT 36
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 101
41367: PUSH
41368: LD_INT 102
41370: PUSH
41371: LD_INT 103
41373: PUSH
41374: LD_INT 104
41376: PUSH
41377: LD_INT 105
41379: PUSH
41380: LD_INT 106
41382: PUSH
41383: LD_INT 107
41385: PUSH
41386: LD_INT 108
41388: PUSH
41389: LD_INT 109
41391: PUSH
41392: LD_INT 110
41394: PUSH
41395: LD_INT 111
41397: PUSH
41398: LD_INT 112
41400: PUSH
41401: LD_INT 114
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: ST_TO_ADDR
41423: GO 43210
41425: LD_INT 11
41427: DOUBLE
41428: EQUAL
41429: IFTRUE 41433
41431: GO 41625
41433: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
41434: LD_ADDR_VAR 0 1
41438: PUSH
41439: LD_INT 2
41441: PUSH
41442: LD_INT 3
41444: PUSH
41445: LD_INT 4
41447: PUSH
41448: LD_INT 5
41450: PUSH
41451: LD_INT 6
41453: PUSH
41454: LD_INT 7
41456: PUSH
41457: LD_INT 8
41459: PUSH
41460: LD_INT 9
41462: PUSH
41463: LD_INT 10
41465: PUSH
41466: LD_INT 11
41468: PUSH
41469: LD_INT 12
41471: PUSH
41472: LD_INT 13
41474: PUSH
41475: LD_INT 14
41477: PUSH
41478: LD_INT 15
41480: PUSH
41481: LD_INT 16
41483: PUSH
41484: LD_INT 17
41486: PUSH
41487: LD_INT 18
41489: PUSH
41490: LD_INT 19
41492: PUSH
41493: LD_INT 20
41495: PUSH
41496: LD_INT 21
41498: PUSH
41499: LD_INT 22
41501: PUSH
41502: LD_INT 23
41504: PUSH
41505: LD_INT 24
41507: PUSH
41508: LD_INT 25
41510: PUSH
41511: LD_INT 26
41513: PUSH
41514: LD_INT 28
41516: PUSH
41517: LD_INT 30
41519: PUSH
41520: LD_INT 31
41522: PUSH
41523: LD_INT 32
41525: PUSH
41526: LD_INT 34
41528: PUSH
41529: LD_INT 36
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 101
41567: PUSH
41568: LD_INT 102
41570: PUSH
41571: LD_INT 103
41573: PUSH
41574: LD_INT 104
41576: PUSH
41577: LD_INT 105
41579: PUSH
41580: LD_INT 106
41582: PUSH
41583: LD_INT 107
41585: PUSH
41586: LD_INT 108
41588: PUSH
41589: LD_INT 109
41591: PUSH
41592: LD_INT 110
41594: PUSH
41595: LD_INT 111
41597: PUSH
41598: LD_INT 112
41600: PUSH
41601: LD_INT 114
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: ST_TO_ADDR
41623: GO 43210
41625: LD_INT 12
41627: DOUBLE
41628: EQUAL
41629: IFTRUE 41633
41631: GO 41841
41633: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
41634: LD_ADDR_VAR 0 1
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: LD_INT 2
41644: PUSH
41645: LD_INT 3
41647: PUSH
41648: LD_INT 4
41650: PUSH
41651: LD_INT 5
41653: PUSH
41654: LD_INT 6
41656: PUSH
41657: LD_INT 7
41659: PUSH
41660: LD_INT 8
41662: PUSH
41663: LD_INT 9
41665: PUSH
41666: LD_INT 10
41668: PUSH
41669: LD_INT 11
41671: PUSH
41672: LD_INT 12
41674: PUSH
41675: LD_INT 13
41677: PUSH
41678: LD_INT 14
41680: PUSH
41681: LD_INT 15
41683: PUSH
41684: LD_INT 16
41686: PUSH
41687: LD_INT 17
41689: PUSH
41690: LD_INT 18
41692: PUSH
41693: LD_INT 19
41695: PUSH
41696: LD_INT 20
41698: PUSH
41699: LD_INT 21
41701: PUSH
41702: LD_INT 22
41704: PUSH
41705: LD_INT 23
41707: PUSH
41708: LD_INT 24
41710: PUSH
41711: LD_INT 25
41713: PUSH
41714: LD_INT 26
41716: PUSH
41717: LD_INT 27
41719: PUSH
41720: LD_INT 28
41722: PUSH
41723: LD_INT 30
41725: PUSH
41726: LD_INT 31
41728: PUSH
41729: LD_INT 32
41731: PUSH
41732: LD_INT 33
41734: PUSH
41735: LD_INT 34
41737: PUSH
41738: LD_INT 36
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 101
41779: PUSH
41780: LD_INT 102
41782: PUSH
41783: LD_INT 103
41785: PUSH
41786: LD_INT 104
41788: PUSH
41789: LD_INT 105
41791: PUSH
41792: LD_INT 106
41794: PUSH
41795: LD_INT 107
41797: PUSH
41798: LD_INT 108
41800: PUSH
41801: LD_INT 109
41803: PUSH
41804: LD_INT 110
41806: PUSH
41807: LD_INT 111
41809: PUSH
41810: LD_INT 112
41812: PUSH
41813: LD_INT 113
41815: PUSH
41816: LD_INT 114
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: ST_TO_ADDR
41839: GO 43210
41841: LD_INT 13
41843: DOUBLE
41844: EQUAL
41845: IFTRUE 41849
41847: GO 42045
41849: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
41850: LD_ADDR_VAR 0 1
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: LD_INT 2
41860: PUSH
41861: LD_INT 3
41863: PUSH
41864: LD_INT 4
41866: PUSH
41867: LD_INT 5
41869: PUSH
41870: LD_INT 8
41872: PUSH
41873: LD_INT 9
41875: PUSH
41876: LD_INT 10
41878: PUSH
41879: LD_INT 11
41881: PUSH
41882: LD_INT 12
41884: PUSH
41885: LD_INT 14
41887: PUSH
41888: LD_INT 15
41890: PUSH
41891: LD_INT 16
41893: PUSH
41894: LD_INT 17
41896: PUSH
41897: LD_INT 18
41899: PUSH
41900: LD_INT 19
41902: PUSH
41903: LD_INT 20
41905: PUSH
41906: LD_INT 21
41908: PUSH
41909: LD_INT 22
41911: PUSH
41912: LD_INT 23
41914: PUSH
41915: LD_INT 24
41917: PUSH
41918: LD_INT 25
41920: PUSH
41921: LD_INT 26
41923: PUSH
41924: LD_INT 27
41926: PUSH
41927: LD_INT 28
41929: PUSH
41930: LD_INT 30
41932: PUSH
41933: LD_INT 31
41935: PUSH
41936: LD_INT 32
41938: PUSH
41939: LD_INT 33
41941: PUSH
41942: LD_INT 34
41944: PUSH
41945: LD_INT 36
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 101
41983: PUSH
41984: LD_INT 102
41986: PUSH
41987: LD_INT 103
41989: PUSH
41990: LD_INT 104
41992: PUSH
41993: LD_INT 105
41995: PUSH
41996: LD_INT 106
41998: PUSH
41999: LD_INT 107
42001: PUSH
42002: LD_INT 108
42004: PUSH
42005: LD_INT 109
42007: PUSH
42008: LD_INT 110
42010: PUSH
42011: LD_INT 111
42013: PUSH
42014: LD_INT 112
42016: PUSH
42017: LD_INT 113
42019: PUSH
42020: LD_INT 114
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: ST_TO_ADDR
42043: GO 43210
42045: LD_INT 14
42047: DOUBLE
42048: EQUAL
42049: IFTRUE 42053
42051: GO 42265
42053: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
42054: LD_ADDR_VAR 0 1
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: LD_INT 2
42064: PUSH
42065: LD_INT 3
42067: PUSH
42068: LD_INT 4
42070: PUSH
42071: LD_INT 5
42073: PUSH
42074: LD_INT 6
42076: PUSH
42077: LD_INT 7
42079: PUSH
42080: LD_INT 8
42082: PUSH
42083: LD_INT 9
42085: PUSH
42086: LD_INT 10
42088: PUSH
42089: LD_INT 11
42091: PUSH
42092: LD_INT 12
42094: PUSH
42095: LD_INT 13
42097: PUSH
42098: LD_INT 14
42100: PUSH
42101: LD_INT 15
42103: PUSH
42104: LD_INT 16
42106: PUSH
42107: LD_INT 17
42109: PUSH
42110: LD_INT 18
42112: PUSH
42113: LD_INT 19
42115: PUSH
42116: LD_INT 20
42118: PUSH
42119: LD_INT 21
42121: PUSH
42122: LD_INT 22
42124: PUSH
42125: LD_INT 23
42127: PUSH
42128: LD_INT 24
42130: PUSH
42131: LD_INT 25
42133: PUSH
42134: LD_INT 26
42136: PUSH
42137: LD_INT 27
42139: PUSH
42140: LD_INT 28
42142: PUSH
42143: LD_INT 29
42145: PUSH
42146: LD_INT 30
42148: PUSH
42149: LD_INT 31
42151: PUSH
42152: LD_INT 32
42154: PUSH
42155: LD_INT 33
42157: PUSH
42158: LD_INT 34
42160: PUSH
42161: LD_INT 36
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 101
42203: PUSH
42204: LD_INT 102
42206: PUSH
42207: LD_INT 103
42209: PUSH
42210: LD_INT 104
42212: PUSH
42213: LD_INT 105
42215: PUSH
42216: LD_INT 106
42218: PUSH
42219: LD_INT 107
42221: PUSH
42222: LD_INT 108
42224: PUSH
42225: LD_INT 109
42227: PUSH
42228: LD_INT 110
42230: PUSH
42231: LD_INT 111
42233: PUSH
42234: LD_INT 112
42236: PUSH
42237: LD_INT 113
42239: PUSH
42240: LD_INT 114
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: ST_TO_ADDR
42263: GO 43210
42265: LD_INT 15
42267: DOUBLE
42268: EQUAL
42269: IFTRUE 42273
42271: GO 42485
42273: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
42274: LD_ADDR_VAR 0 1
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: LD_INT 2
42284: PUSH
42285: LD_INT 3
42287: PUSH
42288: LD_INT 4
42290: PUSH
42291: LD_INT 5
42293: PUSH
42294: LD_INT 6
42296: PUSH
42297: LD_INT 7
42299: PUSH
42300: LD_INT 8
42302: PUSH
42303: LD_INT 9
42305: PUSH
42306: LD_INT 10
42308: PUSH
42309: LD_INT 11
42311: PUSH
42312: LD_INT 12
42314: PUSH
42315: LD_INT 13
42317: PUSH
42318: LD_INT 14
42320: PUSH
42321: LD_INT 15
42323: PUSH
42324: LD_INT 16
42326: PUSH
42327: LD_INT 17
42329: PUSH
42330: LD_INT 18
42332: PUSH
42333: LD_INT 19
42335: PUSH
42336: LD_INT 20
42338: PUSH
42339: LD_INT 21
42341: PUSH
42342: LD_INT 22
42344: PUSH
42345: LD_INT 23
42347: PUSH
42348: LD_INT 24
42350: PUSH
42351: LD_INT 25
42353: PUSH
42354: LD_INT 26
42356: PUSH
42357: LD_INT 27
42359: PUSH
42360: LD_INT 28
42362: PUSH
42363: LD_INT 29
42365: PUSH
42366: LD_INT 30
42368: PUSH
42369: LD_INT 31
42371: PUSH
42372: LD_INT 32
42374: PUSH
42375: LD_INT 33
42377: PUSH
42378: LD_INT 34
42380: PUSH
42381: LD_INT 36
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 101
42423: PUSH
42424: LD_INT 102
42426: PUSH
42427: LD_INT 103
42429: PUSH
42430: LD_INT 104
42432: PUSH
42433: LD_INT 105
42435: PUSH
42436: LD_INT 106
42438: PUSH
42439: LD_INT 107
42441: PUSH
42442: LD_INT 108
42444: PUSH
42445: LD_INT 109
42447: PUSH
42448: LD_INT 110
42450: PUSH
42451: LD_INT 111
42453: PUSH
42454: LD_INT 112
42456: PUSH
42457: LD_INT 113
42459: PUSH
42460: LD_INT 114
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: ST_TO_ADDR
42483: GO 43210
42485: LD_INT 16
42487: DOUBLE
42488: EQUAL
42489: IFTRUE 42493
42491: GO 42617
42493: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
42494: LD_ADDR_VAR 0 1
42498: PUSH
42499: LD_INT 2
42501: PUSH
42502: LD_INT 4
42504: PUSH
42505: LD_INT 5
42507: PUSH
42508: LD_INT 7
42510: PUSH
42511: LD_INT 11
42513: PUSH
42514: LD_INT 12
42516: PUSH
42517: LD_INT 15
42519: PUSH
42520: LD_INT 16
42522: PUSH
42523: LD_INT 20
42525: PUSH
42526: LD_INT 21
42528: PUSH
42529: LD_INT 22
42531: PUSH
42532: LD_INT 23
42534: PUSH
42535: LD_INT 25
42537: PUSH
42538: LD_INT 26
42540: PUSH
42541: LD_INT 30
42543: PUSH
42544: LD_INT 31
42546: PUSH
42547: LD_INT 32
42549: PUSH
42550: LD_INT 33
42552: PUSH
42553: LD_INT 34
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 101
42579: PUSH
42580: LD_INT 102
42582: PUSH
42583: LD_INT 103
42585: PUSH
42586: LD_INT 106
42588: PUSH
42589: LD_INT 108
42591: PUSH
42592: LD_INT 112
42594: PUSH
42595: LD_INT 113
42597: PUSH
42598: LD_INT 114
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: ST_TO_ADDR
42615: GO 43210
42617: LD_INT 17
42619: DOUBLE
42620: EQUAL
42621: IFTRUE 42625
42623: GO 42837
42625: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
42626: LD_ADDR_VAR 0 1
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: LD_INT 3
42639: PUSH
42640: LD_INT 4
42642: PUSH
42643: LD_INT 5
42645: PUSH
42646: LD_INT 6
42648: PUSH
42649: LD_INT 7
42651: PUSH
42652: LD_INT 8
42654: PUSH
42655: LD_INT 9
42657: PUSH
42658: LD_INT 10
42660: PUSH
42661: LD_INT 11
42663: PUSH
42664: LD_INT 12
42666: PUSH
42667: LD_INT 13
42669: PUSH
42670: LD_INT 14
42672: PUSH
42673: LD_INT 15
42675: PUSH
42676: LD_INT 16
42678: PUSH
42679: LD_INT 17
42681: PUSH
42682: LD_INT 18
42684: PUSH
42685: LD_INT 19
42687: PUSH
42688: LD_INT 20
42690: PUSH
42691: LD_INT 21
42693: PUSH
42694: LD_INT 22
42696: PUSH
42697: LD_INT 23
42699: PUSH
42700: LD_INT 24
42702: PUSH
42703: LD_INT 25
42705: PUSH
42706: LD_INT 26
42708: PUSH
42709: LD_INT 27
42711: PUSH
42712: LD_INT 28
42714: PUSH
42715: LD_INT 29
42717: PUSH
42718: LD_INT 30
42720: PUSH
42721: LD_INT 31
42723: PUSH
42724: LD_INT 32
42726: PUSH
42727: LD_INT 33
42729: PUSH
42730: LD_INT 34
42732: PUSH
42733: LD_INT 36
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 101
42775: PUSH
42776: LD_INT 102
42778: PUSH
42779: LD_INT 103
42781: PUSH
42782: LD_INT 104
42784: PUSH
42785: LD_INT 105
42787: PUSH
42788: LD_INT 106
42790: PUSH
42791: LD_INT 107
42793: PUSH
42794: LD_INT 108
42796: PUSH
42797: LD_INT 109
42799: PUSH
42800: LD_INT 110
42802: PUSH
42803: LD_INT 111
42805: PUSH
42806: LD_INT 112
42808: PUSH
42809: LD_INT 113
42811: PUSH
42812: LD_INT 114
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: ST_TO_ADDR
42835: GO 43210
42837: LD_INT 18
42839: DOUBLE
42840: EQUAL
42841: IFTRUE 42845
42843: GO 42981
42845: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
42846: LD_ADDR_VAR 0 1
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: LD_INT 4
42856: PUSH
42857: LD_INT 5
42859: PUSH
42860: LD_INT 7
42862: PUSH
42863: LD_INT 11
42865: PUSH
42866: LD_INT 12
42868: PUSH
42869: LD_INT 15
42871: PUSH
42872: LD_INT 16
42874: PUSH
42875: LD_INT 20
42877: PUSH
42878: LD_INT 21
42880: PUSH
42881: LD_INT 22
42883: PUSH
42884: LD_INT 23
42886: PUSH
42887: LD_INT 25
42889: PUSH
42890: LD_INT 26
42892: PUSH
42893: LD_INT 30
42895: PUSH
42896: LD_INT 31
42898: PUSH
42899: LD_INT 32
42901: PUSH
42902: LD_INT 33
42904: PUSH
42905: LD_INT 34
42907: PUSH
42908: LD_INT 35
42910: PUSH
42911: LD_INT 36
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 101
42939: PUSH
42940: LD_INT 102
42942: PUSH
42943: LD_INT 103
42945: PUSH
42946: LD_INT 106
42948: PUSH
42949: LD_INT 108
42951: PUSH
42952: LD_INT 112
42954: PUSH
42955: LD_INT 113
42957: PUSH
42958: LD_INT 114
42960: PUSH
42961: LD_INT 115
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: ST_TO_ADDR
42979: GO 43210
42981: LD_INT 19
42983: DOUBLE
42984: EQUAL
42985: IFTRUE 42989
42987: GO 43209
42989: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
42990: LD_ADDR_VAR 0 1
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: LD_INT 3
43003: PUSH
43004: LD_INT 4
43006: PUSH
43007: LD_INT 5
43009: PUSH
43010: LD_INT 6
43012: PUSH
43013: LD_INT 7
43015: PUSH
43016: LD_INT 8
43018: PUSH
43019: LD_INT 9
43021: PUSH
43022: LD_INT 10
43024: PUSH
43025: LD_INT 11
43027: PUSH
43028: LD_INT 12
43030: PUSH
43031: LD_INT 13
43033: PUSH
43034: LD_INT 14
43036: PUSH
43037: LD_INT 15
43039: PUSH
43040: LD_INT 16
43042: PUSH
43043: LD_INT 17
43045: PUSH
43046: LD_INT 18
43048: PUSH
43049: LD_INT 19
43051: PUSH
43052: LD_INT 20
43054: PUSH
43055: LD_INT 21
43057: PUSH
43058: LD_INT 22
43060: PUSH
43061: LD_INT 23
43063: PUSH
43064: LD_INT 24
43066: PUSH
43067: LD_INT 25
43069: PUSH
43070: LD_INT 26
43072: PUSH
43073: LD_INT 27
43075: PUSH
43076: LD_INT 28
43078: PUSH
43079: LD_INT 29
43081: PUSH
43082: LD_INT 30
43084: PUSH
43085: LD_INT 31
43087: PUSH
43088: LD_INT 32
43090: PUSH
43091: LD_INT 33
43093: PUSH
43094: LD_INT 34
43096: PUSH
43097: LD_INT 35
43099: PUSH
43100: LD_INT 36
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 101
43143: PUSH
43144: LD_INT 102
43146: PUSH
43147: LD_INT 103
43149: PUSH
43150: LD_INT 104
43152: PUSH
43153: LD_INT 105
43155: PUSH
43156: LD_INT 106
43158: PUSH
43159: LD_INT 107
43161: PUSH
43162: LD_INT 108
43164: PUSH
43165: LD_INT 109
43167: PUSH
43168: LD_INT 110
43170: PUSH
43171: LD_INT 111
43173: PUSH
43174: LD_INT 112
43176: PUSH
43177: LD_INT 113
43179: PUSH
43180: LD_INT 114
43182: PUSH
43183: LD_INT 115
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: ST_TO_ADDR
43207: GO 43210
43209: POP
// end else
43210: GO 43429
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
43212: LD_ADDR_VAR 0 1
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: LD_INT 3
43225: PUSH
43226: LD_INT 4
43228: PUSH
43229: LD_INT 5
43231: PUSH
43232: LD_INT 6
43234: PUSH
43235: LD_INT 7
43237: PUSH
43238: LD_INT 8
43240: PUSH
43241: LD_INT 9
43243: PUSH
43244: LD_INT 10
43246: PUSH
43247: LD_INT 11
43249: PUSH
43250: LD_INT 12
43252: PUSH
43253: LD_INT 13
43255: PUSH
43256: LD_INT 14
43258: PUSH
43259: LD_INT 15
43261: PUSH
43262: LD_INT 16
43264: PUSH
43265: LD_INT 17
43267: PUSH
43268: LD_INT 18
43270: PUSH
43271: LD_INT 19
43273: PUSH
43274: LD_INT 20
43276: PUSH
43277: LD_INT 21
43279: PUSH
43280: LD_INT 22
43282: PUSH
43283: LD_INT 23
43285: PUSH
43286: LD_INT 24
43288: PUSH
43289: LD_INT 25
43291: PUSH
43292: LD_INT 26
43294: PUSH
43295: LD_INT 27
43297: PUSH
43298: LD_INT 28
43300: PUSH
43301: LD_INT 29
43303: PUSH
43304: LD_INT 30
43306: PUSH
43307: LD_INT 31
43309: PUSH
43310: LD_INT 32
43312: PUSH
43313: LD_INT 33
43315: PUSH
43316: LD_INT 34
43318: PUSH
43319: LD_INT 35
43321: PUSH
43322: LD_INT 36
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 101
43365: PUSH
43366: LD_INT 102
43368: PUSH
43369: LD_INT 103
43371: PUSH
43372: LD_INT 104
43374: PUSH
43375: LD_INT 105
43377: PUSH
43378: LD_INT 106
43380: PUSH
43381: LD_INT 107
43383: PUSH
43384: LD_INT 108
43386: PUSH
43387: LD_INT 109
43389: PUSH
43390: LD_INT 110
43392: PUSH
43393: LD_INT 111
43395: PUSH
43396: LD_INT 112
43398: PUSH
43399: LD_INT 113
43401: PUSH
43402: LD_INT 114
43404: PUSH
43405: LD_INT 115
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: ST_TO_ADDR
// if result then
43429: LD_VAR 0 1
43433: IFFALSE 43722
// begin normal :=  ;
43435: LD_ADDR_VAR 0 3
43439: PUSH
43440: LD_STRING 
43442: ST_TO_ADDR
// hardcore :=  ;
43443: LD_ADDR_VAR 0 4
43447: PUSH
43448: LD_STRING 
43450: ST_TO_ADDR
// for i = 1 to normalCounter do
43451: LD_ADDR_VAR 0 5
43455: PUSH
43456: DOUBLE
43457: LD_INT 1
43459: DEC
43460: ST_TO_ADDR
43461: LD_EXP 29
43465: PUSH
43466: FOR_TO
43467: IFFALSE 43568
// begin tmp := 0 ;
43469: LD_ADDR_VAR 0 2
43473: PUSH
43474: LD_STRING 0
43476: ST_TO_ADDR
// if result [ 1 ] then
43477: LD_VAR 0 1
43481: PUSH
43482: LD_INT 1
43484: ARRAY
43485: IFFALSE 43550
// if result [ 1 ] [ 1 ] = i then
43487: LD_VAR 0 1
43491: PUSH
43492: LD_INT 1
43494: ARRAY
43495: PUSH
43496: LD_INT 1
43498: ARRAY
43499: PUSH
43500: LD_VAR 0 5
43504: EQUAL
43505: IFFALSE 43550
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
43507: LD_ADDR_VAR 0 1
43511: PUSH
43512: LD_VAR 0 1
43516: PPUSH
43517: LD_INT 1
43519: PPUSH
43520: LD_VAR 0 1
43524: PUSH
43525: LD_INT 1
43527: ARRAY
43528: PPUSH
43529: LD_INT 1
43531: PPUSH
43532: CALL_OW 3
43536: PPUSH
43537: CALL_OW 1
43541: ST_TO_ADDR
// tmp := 1 ;
43542: LD_ADDR_VAR 0 2
43546: PUSH
43547: LD_STRING 1
43549: ST_TO_ADDR
// end ; normal := normal & tmp ;
43550: LD_ADDR_VAR 0 3
43554: PUSH
43555: LD_VAR 0 3
43559: PUSH
43560: LD_VAR 0 2
43564: STR
43565: ST_TO_ADDR
// end ;
43566: GO 43466
43568: POP
43569: POP
// for i = 1 to hardcoreCounter do
43570: LD_ADDR_VAR 0 5
43574: PUSH
43575: DOUBLE
43576: LD_INT 1
43578: DEC
43579: ST_TO_ADDR
43580: LD_EXP 30
43584: PUSH
43585: FOR_TO
43586: IFFALSE 43691
// begin tmp := 0 ;
43588: LD_ADDR_VAR 0 2
43592: PUSH
43593: LD_STRING 0
43595: ST_TO_ADDR
// if result [ 2 ] then
43596: LD_VAR 0 1
43600: PUSH
43601: LD_INT 2
43603: ARRAY
43604: IFFALSE 43673
// if result [ 2 ] [ 1 ] = 100 + i then
43606: LD_VAR 0 1
43610: PUSH
43611: LD_INT 2
43613: ARRAY
43614: PUSH
43615: LD_INT 1
43617: ARRAY
43618: PUSH
43619: LD_INT 100
43621: PUSH
43622: LD_VAR 0 5
43626: PLUS
43627: EQUAL
43628: IFFALSE 43673
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
43630: LD_ADDR_VAR 0 1
43634: PUSH
43635: LD_VAR 0 1
43639: PPUSH
43640: LD_INT 2
43642: PPUSH
43643: LD_VAR 0 1
43647: PUSH
43648: LD_INT 2
43650: ARRAY
43651: PPUSH
43652: LD_INT 1
43654: PPUSH
43655: CALL_OW 3
43659: PPUSH
43660: CALL_OW 1
43664: ST_TO_ADDR
// tmp := 1 ;
43665: LD_ADDR_VAR 0 2
43669: PUSH
43670: LD_STRING 1
43672: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
43673: LD_ADDR_VAR 0 4
43677: PUSH
43678: LD_VAR 0 4
43682: PUSH
43683: LD_VAR 0 2
43687: STR
43688: ST_TO_ADDR
// end ;
43689: GO 43585
43691: POP
43692: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
43693: LD_STRING getStreamItemsFromMission("
43695: PUSH
43696: LD_VAR 0 3
43700: STR
43701: PUSH
43702: LD_STRING ","
43704: STR
43705: PUSH
43706: LD_VAR 0 4
43710: STR
43711: PUSH
43712: LD_STRING ")
43714: STR
43715: PPUSH
43716: CALL_OW 559
// end else
43720: GO 43729
// ToLua ( getStreamItemsFromMission("","") ) ;
43722: LD_STRING getStreamItemsFromMission("","")
43724: PPUSH
43725: CALL_OW 559
// end ;
43729: LD_VAR 0 1
43733: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
43734: LD_EXP 28
43738: PUSH
43739: LD_EXP 33
43743: AND
43744: IFFALSE 43868
43746: GO 43748
43748: DISABLE
43749: LD_INT 0
43751: PPUSH
43752: PPUSH
// begin enable ;
43753: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
43754: LD_ADDR_VAR 0 2
43758: PUSH
43759: LD_INT 22
43761: PUSH
43762: LD_OWVAR 2
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 2
43773: PUSH
43774: LD_INT 34
43776: PUSH
43777: LD_INT 7
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 34
43786: PUSH
43787: LD_INT 45
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 34
43796: PUSH
43797: LD_INT 28
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 34
43806: PUSH
43807: LD_INT 47
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PPUSH
43825: CALL_OW 69
43829: ST_TO_ADDR
// if not tmp then
43830: LD_VAR 0 2
43834: NOT
43835: IFFALSE 43839
// exit ;
43837: GO 43868
// for i in tmp do
43839: LD_ADDR_VAR 0 1
43843: PUSH
43844: LD_VAR 0 2
43848: PUSH
43849: FOR_IN
43850: IFFALSE 43866
// begin SetLives ( i , 0 ) ;
43852: LD_VAR 0 1
43856: PPUSH
43857: LD_INT 0
43859: PPUSH
43860: CALL_OW 234
// end ;
43864: GO 43849
43866: POP
43867: POP
// end ;
43868: PPOPN 2
43870: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
43871: LD_EXP 28
43875: PUSH
43876: LD_EXP 34
43880: AND
43881: IFFALSE 43965
43883: GO 43885
43885: DISABLE
43886: LD_INT 0
43888: PPUSH
43889: PPUSH
// begin enable ;
43890: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
43891: LD_ADDR_VAR 0 2
43895: PUSH
43896: LD_INT 22
43898: PUSH
43899: LD_OWVAR 2
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 32
43910: PUSH
43911: LD_INT 3
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PPUSH
43922: CALL_OW 69
43926: ST_TO_ADDR
// if not tmp then
43927: LD_VAR 0 2
43931: NOT
43932: IFFALSE 43936
// exit ;
43934: GO 43965
// for i in tmp do
43936: LD_ADDR_VAR 0 1
43940: PUSH
43941: LD_VAR 0 2
43945: PUSH
43946: FOR_IN
43947: IFFALSE 43963
// begin SetLives ( i , 0 ) ;
43949: LD_VAR 0 1
43953: PPUSH
43954: LD_INT 0
43956: PPUSH
43957: CALL_OW 234
// end ;
43961: GO 43946
43963: POP
43964: POP
// end ;
43965: PPOPN 2
43967: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
43968: LD_EXP 28
43972: PUSH
43973: LD_EXP 31
43977: AND
43978: IFFALSE 44071
43980: GO 43982
43982: DISABLE
43983: LD_INT 0
43985: PPUSH
// begin enable ;
43986: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
43987: LD_ADDR_VAR 0 1
43991: PUSH
43992: LD_INT 22
43994: PUSH
43995: LD_OWVAR 2
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 2
44006: PUSH
44007: LD_INT 25
44009: PUSH
44010: LD_INT 5
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 25
44019: PUSH
44020: LD_INT 9
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 25
44029: PUSH
44030: LD_INT 8
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PPUSH
44047: CALL_OW 69
44051: PUSH
44052: FOR_IN
44053: IFFALSE 44069
// begin SetClass ( i , 1 ) ;
44055: LD_VAR 0 1
44059: PPUSH
44060: LD_INT 1
44062: PPUSH
44063: CALL_OW 336
// end ;
44067: GO 44052
44069: POP
44070: POP
// end ;
44071: PPOPN 1
44073: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
44074: LD_EXP 28
44078: PUSH
44079: LD_EXP 32
44083: AND
44084: PUSH
44085: LD_OWVAR 65
44089: PUSH
44090: LD_INT 7
44092: LESS
44093: AND
44094: IFFALSE 44108
44096: GO 44098
44098: DISABLE
// begin enable ;
44099: ENABLE
// game_speed := 7 ;
44100: LD_ADDR_OWVAR 65
44104: PUSH
44105: LD_INT 7
44107: ST_TO_ADDR
// end ;
44108: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
44109: LD_EXP 28
44113: PUSH
44114: LD_EXP 35
44118: AND
44119: IFFALSE 44321
44121: GO 44123
44123: DISABLE
44124: LD_INT 0
44126: PPUSH
44127: PPUSH
44128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
44129: LD_ADDR_VAR 0 3
44133: PUSH
44134: LD_INT 81
44136: PUSH
44137: LD_OWVAR 2
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 21
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PPUSH
44160: CALL_OW 69
44164: ST_TO_ADDR
// if not tmp then
44165: LD_VAR 0 3
44169: NOT
44170: IFFALSE 44174
// exit ;
44172: GO 44321
// if tmp > 5 then
44174: LD_VAR 0 3
44178: PUSH
44179: LD_INT 5
44181: GREATER
44182: IFFALSE 44194
// k := 5 else
44184: LD_ADDR_VAR 0 2
44188: PUSH
44189: LD_INT 5
44191: ST_TO_ADDR
44192: GO 44204
// k := tmp ;
44194: LD_ADDR_VAR 0 2
44198: PUSH
44199: LD_VAR 0 3
44203: ST_TO_ADDR
// for i := 1 to k do
44204: LD_ADDR_VAR 0 1
44208: PUSH
44209: DOUBLE
44210: LD_INT 1
44212: DEC
44213: ST_TO_ADDR
44214: LD_VAR 0 2
44218: PUSH
44219: FOR_TO
44220: IFFALSE 44319
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
44222: LD_VAR 0 3
44226: PUSH
44227: LD_VAR 0 1
44231: ARRAY
44232: PPUSH
44233: LD_VAR 0 1
44237: PUSH
44238: LD_INT 4
44240: MOD
44241: PUSH
44242: LD_INT 1
44244: PLUS
44245: PPUSH
44246: CALL_OW 259
44250: PUSH
44251: LD_INT 10
44253: LESS
44254: IFFALSE 44317
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
44256: LD_VAR 0 3
44260: PUSH
44261: LD_VAR 0 1
44265: ARRAY
44266: PPUSH
44267: LD_VAR 0 1
44271: PUSH
44272: LD_INT 4
44274: MOD
44275: PUSH
44276: LD_INT 1
44278: PLUS
44279: PPUSH
44280: LD_VAR 0 3
44284: PUSH
44285: LD_VAR 0 1
44289: ARRAY
44290: PPUSH
44291: LD_VAR 0 1
44295: PUSH
44296: LD_INT 4
44298: MOD
44299: PUSH
44300: LD_INT 1
44302: PLUS
44303: PPUSH
44304: CALL_OW 259
44308: PUSH
44309: LD_INT 1
44311: PLUS
44312: PPUSH
44313: CALL_OW 237
44317: GO 44219
44319: POP
44320: POP
// end ;
44321: PPOPN 3
44323: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
44324: LD_EXP 28
44328: PUSH
44329: LD_EXP 36
44333: AND
44334: IFFALSE 44354
44336: GO 44338
44338: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
44339: LD_INT 4
44341: PPUSH
44342: LD_OWVAR 2
44346: PPUSH
44347: LD_INT 0
44349: PPUSH
44350: CALL_OW 324
44354: END
// every 0 0$1 trigger StreamModeActive and sShovel do
44355: LD_EXP 28
44359: PUSH
44360: LD_EXP 65
44364: AND
44365: IFFALSE 44385
44367: GO 44369
44369: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
44370: LD_INT 19
44372: PPUSH
44373: LD_OWVAR 2
44377: PPUSH
44378: LD_INT 0
44380: PPUSH
44381: CALL_OW 324
44385: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
44386: LD_EXP 28
44390: PUSH
44391: LD_EXP 37
44395: AND
44396: IFFALSE 44498
44398: GO 44400
44400: DISABLE
44401: LD_INT 0
44403: PPUSH
44404: PPUSH
// begin enable ;
44405: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
44406: LD_ADDR_VAR 0 2
44410: PUSH
44411: LD_INT 22
44413: PUSH
44414: LD_OWVAR 2
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: LD_INT 34
44428: PUSH
44429: LD_INT 11
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 34
44438: PUSH
44439: LD_INT 30
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: LIST
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PPUSH
44455: CALL_OW 69
44459: ST_TO_ADDR
// if not tmp then
44460: LD_VAR 0 2
44464: NOT
44465: IFFALSE 44469
// exit ;
44467: GO 44498
// for i in tmp do
44469: LD_ADDR_VAR 0 1
44473: PUSH
44474: LD_VAR 0 2
44478: PUSH
44479: FOR_IN
44480: IFFALSE 44496
// begin SetLives ( i , 0 ) ;
44482: LD_VAR 0 1
44486: PPUSH
44487: LD_INT 0
44489: PPUSH
44490: CALL_OW 234
// end ;
44494: GO 44479
44496: POP
44497: POP
// end ;
44498: PPOPN 2
44500: END
// every 0 0$1 trigger StreamModeActive and sBunker do
44501: LD_EXP 28
44505: PUSH
44506: LD_EXP 38
44510: AND
44511: IFFALSE 44531
44513: GO 44515
44515: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
44516: LD_INT 32
44518: PPUSH
44519: LD_OWVAR 2
44523: PPUSH
44524: LD_INT 0
44526: PPUSH
44527: CALL_OW 324
44531: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
44532: LD_EXP 28
44536: PUSH
44537: LD_EXP 39
44541: AND
44542: IFFALSE 44723
44544: GO 44546
44546: DISABLE
44547: LD_INT 0
44549: PPUSH
44550: PPUSH
44551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
44552: LD_ADDR_VAR 0 2
44556: PUSH
44557: LD_INT 22
44559: PUSH
44560: LD_OWVAR 2
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 33
44571: PUSH
44572: LD_INT 3
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PPUSH
44583: CALL_OW 69
44587: ST_TO_ADDR
// if not tmp then
44588: LD_VAR 0 2
44592: NOT
44593: IFFALSE 44597
// exit ;
44595: GO 44723
// side := 0 ;
44597: LD_ADDR_VAR 0 3
44601: PUSH
44602: LD_INT 0
44604: ST_TO_ADDR
// for i := 1 to 8 do
44605: LD_ADDR_VAR 0 1
44609: PUSH
44610: DOUBLE
44611: LD_INT 1
44613: DEC
44614: ST_TO_ADDR
44615: LD_INT 8
44617: PUSH
44618: FOR_TO
44619: IFFALSE 44667
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
44621: LD_OWVAR 2
44625: PUSH
44626: LD_VAR 0 1
44630: NONEQUAL
44631: PUSH
44632: LD_OWVAR 2
44636: PPUSH
44637: LD_VAR 0 1
44641: PPUSH
44642: CALL_OW 81
44646: PUSH
44647: LD_INT 2
44649: EQUAL
44650: AND
44651: IFFALSE 44665
// begin side := i ;
44653: LD_ADDR_VAR 0 3
44657: PUSH
44658: LD_VAR 0 1
44662: ST_TO_ADDR
// break ;
44663: GO 44667
// end ;
44665: GO 44618
44667: POP
44668: POP
// if not side then
44669: LD_VAR 0 3
44673: NOT
44674: IFFALSE 44678
// exit ;
44676: GO 44723
// for i := 1 to tmp do
44678: LD_ADDR_VAR 0 1
44682: PUSH
44683: DOUBLE
44684: LD_INT 1
44686: DEC
44687: ST_TO_ADDR
44688: LD_VAR 0 2
44692: PUSH
44693: FOR_TO
44694: IFFALSE 44721
// if Prob ( 60 ) then
44696: LD_INT 60
44698: PPUSH
44699: CALL_OW 13
44703: IFFALSE 44719
// SetSide ( i , side ) ;
44705: LD_VAR 0 1
44709: PPUSH
44710: LD_VAR 0 3
44714: PPUSH
44715: CALL_OW 235
44719: GO 44693
44721: POP
44722: POP
// end ;
44723: PPOPN 3
44725: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
44726: LD_EXP 28
44730: PUSH
44731: LD_EXP 41
44735: AND
44736: IFFALSE 44855
44738: GO 44740
44740: DISABLE
44741: LD_INT 0
44743: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
44744: LD_ADDR_VAR 0 1
44748: PUSH
44749: LD_INT 22
44751: PUSH
44752: LD_OWVAR 2
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 21
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 3
44773: PUSH
44774: LD_INT 23
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: LIST
44792: PPUSH
44793: CALL_OW 69
44797: PUSH
44798: FOR_IN
44799: IFFALSE 44853
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
44801: LD_VAR 0 1
44805: PPUSH
44806: CALL_OW 257
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: LD_INT 3
44819: PUSH
44820: LD_INT 4
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: IN
44829: IFFALSE 44851
// SetClass ( un , rand ( 1 , 4 ) ) ;
44831: LD_VAR 0 1
44835: PPUSH
44836: LD_INT 1
44838: PPUSH
44839: LD_INT 4
44841: PPUSH
44842: CALL_OW 12
44846: PPUSH
44847: CALL_OW 336
44851: GO 44798
44853: POP
44854: POP
// end ;
44855: PPOPN 1
44857: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
44858: LD_EXP 28
44862: PUSH
44863: LD_EXP 40
44867: AND
44868: IFFALSE 44947
44870: GO 44872
44872: DISABLE
44873: LD_INT 0
44875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
44876: LD_ADDR_VAR 0 1
44880: PUSH
44881: LD_INT 22
44883: PUSH
44884: LD_OWVAR 2
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 21
44895: PUSH
44896: LD_INT 3
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PPUSH
44907: CALL_OW 69
44911: ST_TO_ADDR
// if not tmp then
44912: LD_VAR 0 1
44916: NOT
44917: IFFALSE 44921
// exit ;
44919: GO 44947
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
44921: LD_VAR 0 1
44925: PUSH
44926: LD_INT 1
44928: PPUSH
44929: LD_VAR 0 1
44933: PPUSH
44934: CALL_OW 12
44938: ARRAY
44939: PPUSH
44940: LD_INT 100
44942: PPUSH
44943: CALL_OW 234
// end ;
44947: PPOPN 1
44949: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
44950: LD_EXP 28
44954: PUSH
44955: LD_EXP 42
44959: AND
44960: IFFALSE 45058
44962: GO 44964
44964: DISABLE
44965: LD_INT 0
44967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
44968: LD_ADDR_VAR 0 1
44972: PUSH
44973: LD_INT 22
44975: PUSH
44976: LD_OWVAR 2
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 21
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PPUSH
44999: CALL_OW 69
45003: ST_TO_ADDR
// if not tmp then
45004: LD_VAR 0 1
45008: NOT
45009: IFFALSE 45013
// exit ;
45011: GO 45058
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
45013: LD_VAR 0 1
45017: PUSH
45018: LD_INT 1
45020: PPUSH
45021: LD_VAR 0 1
45025: PPUSH
45026: CALL_OW 12
45030: ARRAY
45031: PPUSH
45032: LD_INT 1
45034: PPUSH
45035: LD_INT 4
45037: PPUSH
45038: CALL_OW 12
45042: PPUSH
45043: LD_INT 3000
45045: PPUSH
45046: LD_INT 9000
45048: PPUSH
45049: CALL_OW 12
45053: PPUSH
45054: CALL_OW 492
// end ;
45058: PPOPN 1
45060: END
// every 0 0$1 trigger StreamModeActive and sDepot do
45061: LD_EXP 28
45065: PUSH
45066: LD_EXP 43
45070: AND
45071: IFFALSE 45091
45073: GO 45075
45075: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
45076: LD_INT 1
45078: PPUSH
45079: LD_OWVAR 2
45083: PPUSH
45084: LD_INT 0
45086: PPUSH
45087: CALL_OW 324
45091: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
45092: LD_EXP 28
45096: PUSH
45097: LD_EXP 44
45101: AND
45102: IFFALSE 45185
45104: GO 45106
45106: DISABLE
45107: LD_INT 0
45109: PPUSH
45110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
45111: LD_ADDR_VAR 0 2
45115: PUSH
45116: LD_INT 22
45118: PUSH
45119: LD_OWVAR 2
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 21
45130: PUSH
45131: LD_INT 3
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PPUSH
45142: CALL_OW 69
45146: ST_TO_ADDR
// if not tmp then
45147: LD_VAR 0 2
45151: NOT
45152: IFFALSE 45156
// exit ;
45154: GO 45185
// for i in tmp do
45156: LD_ADDR_VAR 0 1
45160: PUSH
45161: LD_VAR 0 2
45165: PUSH
45166: FOR_IN
45167: IFFALSE 45183
// SetBLevel ( i , 10 ) ;
45169: LD_VAR 0 1
45173: PPUSH
45174: LD_INT 10
45176: PPUSH
45177: CALL_OW 241
45181: GO 45166
45183: POP
45184: POP
// end ;
45185: PPOPN 2
45187: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
45188: LD_EXP 28
45192: PUSH
45193: LD_EXP 45
45197: AND
45198: IFFALSE 45309
45200: GO 45202
45202: DISABLE
45203: LD_INT 0
45205: PPUSH
45206: PPUSH
45207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45208: LD_ADDR_VAR 0 3
45212: PUSH
45213: LD_INT 22
45215: PUSH
45216: LD_OWVAR 2
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 25
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PPUSH
45239: CALL_OW 69
45243: ST_TO_ADDR
// if not tmp then
45244: LD_VAR 0 3
45248: NOT
45249: IFFALSE 45253
// exit ;
45251: GO 45309
// un := tmp [ rand ( 1 , tmp ) ] ;
45253: LD_ADDR_VAR 0 2
45257: PUSH
45258: LD_VAR 0 3
45262: PUSH
45263: LD_INT 1
45265: PPUSH
45266: LD_VAR 0 3
45270: PPUSH
45271: CALL_OW 12
45275: ARRAY
45276: ST_TO_ADDR
// if Crawls ( un ) then
45277: LD_VAR 0 2
45281: PPUSH
45282: CALL_OW 318
45286: IFFALSE 45297
// ComWalk ( un ) ;
45288: LD_VAR 0 2
45292: PPUSH
45293: CALL_OW 138
// SetClass ( un , class_sniper ) ;
45297: LD_VAR 0 2
45301: PPUSH
45302: LD_INT 5
45304: PPUSH
45305: CALL_OW 336
// end ;
45309: PPOPN 3
45311: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
45312: LD_EXP 28
45316: PUSH
45317: LD_EXP 46
45321: AND
45322: PUSH
45323: LD_OWVAR 67
45327: PUSH
45328: LD_INT 3
45330: LESS
45331: AND
45332: IFFALSE 45351
45334: GO 45336
45336: DISABLE
// Difficulty := Difficulty + 1 ;
45337: LD_ADDR_OWVAR 67
45341: PUSH
45342: LD_OWVAR 67
45346: PUSH
45347: LD_INT 1
45349: PLUS
45350: ST_TO_ADDR
45351: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
45352: LD_EXP 28
45356: PUSH
45357: LD_EXP 47
45361: AND
45362: IFFALSE 45465
45364: GO 45366
45366: DISABLE
45367: LD_INT 0
45369: PPUSH
// begin for i := 1 to 5 do
45370: LD_ADDR_VAR 0 1
45374: PUSH
45375: DOUBLE
45376: LD_INT 1
45378: DEC
45379: ST_TO_ADDR
45380: LD_INT 5
45382: PUSH
45383: FOR_TO
45384: IFFALSE 45463
// begin uc_nation := nation_nature ;
45386: LD_ADDR_OWVAR 21
45390: PUSH
45391: LD_INT 0
45393: ST_TO_ADDR
// uc_side := 0 ;
45394: LD_ADDR_OWVAR 20
45398: PUSH
45399: LD_INT 0
45401: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
45402: LD_ADDR_OWVAR 29
45406: PUSH
45407: LD_INT 12
45409: PUSH
45410: LD_INT 12
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: ST_TO_ADDR
// hc_agressivity := 20 ;
45417: LD_ADDR_OWVAR 35
45421: PUSH
45422: LD_INT 20
45424: ST_TO_ADDR
// hc_class := class_tiger ;
45425: LD_ADDR_OWVAR 28
45429: PUSH
45430: LD_INT 14
45432: ST_TO_ADDR
// hc_gallery :=  ;
45433: LD_ADDR_OWVAR 33
45437: PUSH
45438: LD_STRING 
45440: ST_TO_ADDR
// hc_name :=  ;
45441: LD_ADDR_OWVAR 26
45445: PUSH
45446: LD_STRING 
45448: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
45449: CALL_OW 44
45453: PPUSH
45454: LD_INT 0
45456: PPUSH
45457: CALL_OW 51
// end ;
45461: GO 45383
45463: POP
45464: POP
// end ;
45465: PPOPN 1
45467: END
// every 0 0$1 trigger StreamModeActive and sBomb do
45468: LD_EXP 28
45472: PUSH
45473: LD_EXP 48
45477: AND
45478: IFFALSE 45487
45480: GO 45482
45482: DISABLE
// StreamSibBomb ;
45483: CALL 45488 0 0
45487: END
// export function StreamSibBomb ; var i , x , y ; begin
45488: LD_INT 0
45490: PPUSH
45491: PPUSH
45492: PPUSH
45493: PPUSH
// result := false ;
45494: LD_ADDR_VAR 0 1
45498: PUSH
45499: LD_INT 0
45501: ST_TO_ADDR
// for i := 1 to 16 do
45502: LD_ADDR_VAR 0 2
45506: PUSH
45507: DOUBLE
45508: LD_INT 1
45510: DEC
45511: ST_TO_ADDR
45512: LD_INT 16
45514: PUSH
45515: FOR_TO
45516: IFFALSE 45715
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
45518: LD_ADDR_VAR 0 3
45522: PUSH
45523: LD_INT 10
45525: PUSH
45526: LD_INT 20
45528: PUSH
45529: LD_INT 30
45531: PUSH
45532: LD_INT 40
45534: PUSH
45535: LD_INT 50
45537: PUSH
45538: LD_INT 60
45540: PUSH
45541: LD_INT 70
45543: PUSH
45544: LD_INT 80
45546: PUSH
45547: LD_INT 90
45549: PUSH
45550: LD_INT 100
45552: PUSH
45553: LD_INT 110
45555: PUSH
45556: LD_INT 120
45558: PUSH
45559: LD_INT 130
45561: PUSH
45562: LD_INT 140
45564: PUSH
45565: LD_INT 150
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: PPUSH
45588: LD_INT 15
45590: PPUSH
45591: CALL_OW 12
45595: ARRAY
45596: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
45597: LD_ADDR_VAR 0 4
45601: PUSH
45602: LD_INT 10
45604: PUSH
45605: LD_INT 20
45607: PUSH
45608: LD_INT 30
45610: PUSH
45611: LD_INT 40
45613: PUSH
45614: LD_INT 50
45616: PUSH
45617: LD_INT 60
45619: PUSH
45620: LD_INT 70
45622: PUSH
45623: LD_INT 80
45625: PUSH
45626: LD_INT 90
45628: PUSH
45629: LD_INT 100
45631: PUSH
45632: LD_INT 110
45634: PUSH
45635: LD_INT 120
45637: PUSH
45638: LD_INT 130
45640: PUSH
45641: LD_INT 140
45643: PUSH
45644: LD_INT 150
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: PPUSH
45667: LD_INT 15
45669: PPUSH
45670: CALL_OW 12
45674: ARRAY
45675: ST_TO_ADDR
// if ValidHex ( x , y ) then
45676: LD_VAR 0 3
45680: PPUSH
45681: LD_VAR 0 4
45685: PPUSH
45686: CALL_OW 488
45690: IFFALSE 45713
// begin result := [ x , y ] ;
45692: LD_ADDR_VAR 0 1
45696: PUSH
45697: LD_VAR 0 3
45701: PUSH
45702: LD_VAR 0 4
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: ST_TO_ADDR
// break ;
45711: GO 45715
// end ; end ;
45713: GO 45515
45715: POP
45716: POP
// if result then
45717: LD_VAR 0 1
45721: IFFALSE 45781
// begin ToLua ( playSibBomb() ) ;
45723: LD_STRING playSibBomb()
45725: PPUSH
45726: CALL_OW 559
// wait ( 0 0$14 ) ;
45730: LD_INT 490
45732: PPUSH
45733: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
45737: LD_VAR 0 1
45741: PUSH
45742: LD_INT 1
45744: ARRAY
45745: PPUSH
45746: LD_VAR 0 1
45750: PUSH
45751: LD_INT 2
45753: ARRAY
45754: PPUSH
45755: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
45759: LD_VAR 0 1
45763: PUSH
45764: LD_INT 1
45766: ARRAY
45767: PPUSH
45768: LD_VAR 0 1
45772: PUSH
45773: LD_INT 2
45775: ARRAY
45776: PPUSH
45777: CALL_OW 429
// end ; end ;
45781: LD_VAR 0 1
45785: RET
// every 0 0$1 trigger StreamModeActive and sReset do
45786: LD_EXP 28
45790: PUSH
45791: LD_EXP 50
45795: AND
45796: IFFALSE 45808
45798: GO 45800
45800: DISABLE
// YouLost (  ) ;
45801: LD_STRING 
45803: PPUSH
45804: CALL_OW 104
45808: END
// every 0 0$1 trigger StreamModeActive and sFog do
45809: LD_EXP 28
45813: PUSH
45814: LD_EXP 49
45818: AND
45819: IFFALSE 45833
45821: GO 45823
45823: DISABLE
// FogOff ( your_side ) ;
45824: LD_OWVAR 2
45828: PPUSH
45829: CALL_OW 344
45833: END
// every 0 0$1 trigger StreamModeActive and sSun do
45834: LD_EXP 28
45838: PUSH
45839: LD_EXP 51
45843: AND
45844: IFFALSE 45872
45846: GO 45848
45848: DISABLE
// begin solar_recharge_percent := 0 ;
45849: LD_ADDR_OWVAR 79
45853: PUSH
45854: LD_INT 0
45856: ST_TO_ADDR
// wait ( 5 5$00 ) ;
45857: LD_INT 10500
45859: PPUSH
45860: CALL_OW 67
// solar_recharge_percent := 100 ;
45864: LD_ADDR_OWVAR 79
45868: PUSH
45869: LD_INT 100
45871: ST_TO_ADDR
// end ;
45872: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
45873: LD_EXP 28
45877: PUSH
45878: LD_EXP 52
45882: AND
45883: IFFALSE 46122
45885: GO 45887
45887: DISABLE
45888: LD_INT 0
45890: PPUSH
45891: PPUSH
45892: PPUSH
// begin tmp := [ ] ;
45893: LD_ADDR_VAR 0 3
45897: PUSH
45898: EMPTY
45899: ST_TO_ADDR
// for i := 1 to 6 do
45900: LD_ADDR_VAR 0 1
45904: PUSH
45905: DOUBLE
45906: LD_INT 1
45908: DEC
45909: ST_TO_ADDR
45910: LD_INT 6
45912: PUSH
45913: FOR_TO
45914: IFFALSE 46019
// begin uc_nation := nation_nature ;
45916: LD_ADDR_OWVAR 21
45920: PUSH
45921: LD_INT 0
45923: ST_TO_ADDR
// uc_side := 0 ;
45924: LD_ADDR_OWVAR 20
45928: PUSH
45929: LD_INT 0
45931: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
45932: LD_ADDR_OWVAR 29
45936: PUSH
45937: LD_INT 12
45939: PUSH
45940: LD_INT 12
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: ST_TO_ADDR
// hc_agressivity := 20 ;
45947: LD_ADDR_OWVAR 35
45951: PUSH
45952: LD_INT 20
45954: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
45955: LD_ADDR_OWVAR 28
45959: PUSH
45960: LD_INT 17
45962: ST_TO_ADDR
// hc_gallery :=  ;
45963: LD_ADDR_OWVAR 33
45967: PUSH
45968: LD_STRING 
45970: ST_TO_ADDR
// hc_name :=  ;
45971: LD_ADDR_OWVAR 26
45975: PUSH
45976: LD_STRING 
45978: ST_TO_ADDR
// un := CreateHuman ;
45979: LD_ADDR_VAR 0 2
45983: PUSH
45984: CALL_OW 44
45988: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
45989: LD_VAR 0 2
45993: PPUSH
45994: LD_INT 1
45996: PPUSH
45997: CALL_OW 51
// tmp := tmp ^ un ;
46001: LD_ADDR_VAR 0 3
46005: PUSH
46006: LD_VAR 0 3
46010: PUSH
46011: LD_VAR 0 2
46015: ADD
46016: ST_TO_ADDR
// end ;
46017: GO 45913
46019: POP
46020: POP
// repeat wait ( 0 0$1 ) ;
46021: LD_INT 35
46023: PPUSH
46024: CALL_OW 67
// for un in tmp do
46028: LD_ADDR_VAR 0 2
46032: PUSH
46033: LD_VAR 0 3
46037: PUSH
46038: FOR_IN
46039: IFFALSE 46113
// begin if IsDead ( un ) then
46041: LD_VAR 0 2
46045: PPUSH
46046: CALL_OW 301
46050: IFFALSE 46070
// begin tmp := tmp diff un ;
46052: LD_ADDR_VAR 0 3
46056: PUSH
46057: LD_VAR 0 3
46061: PUSH
46062: LD_VAR 0 2
46066: DIFF
46067: ST_TO_ADDR
// continue ;
46068: GO 46038
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
46070: LD_VAR 0 2
46074: PPUSH
46075: LD_INT 3
46077: PUSH
46078: LD_INT 22
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PPUSH
46092: CALL_OW 69
46096: PPUSH
46097: LD_VAR 0 2
46101: PPUSH
46102: CALL_OW 74
46106: PPUSH
46107: CALL_OW 115
// end ;
46111: GO 46038
46113: POP
46114: POP
// until not tmp ;
46115: LD_VAR 0 3
46119: NOT
46120: IFFALSE 46021
// end ;
46122: PPOPN 3
46124: END
// every 0 0$1 trigger StreamModeActive and sTroll do
46125: LD_EXP 28
46129: PUSH
46130: LD_EXP 53
46134: AND
46135: IFFALSE 46189
46137: GO 46139
46139: DISABLE
// begin ToLua ( displayTroll(); ) ;
46140: LD_STRING displayTroll();
46142: PPUSH
46143: CALL_OW 559
// wait ( 3 3$00 ) ;
46147: LD_INT 6300
46149: PPUSH
46150: CALL_OW 67
// ToLua ( hideTroll(); ) ;
46154: LD_STRING hideTroll();
46156: PPUSH
46157: CALL_OW 559
// wait ( 1 1$00 ) ;
46161: LD_INT 2100
46163: PPUSH
46164: CALL_OW 67
// ToLua ( displayTroll(); ) ;
46168: LD_STRING displayTroll();
46170: PPUSH
46171: CALL_OW 559
// wait ( 1 1$00 ) ;
46175: LD_INT 2100
46177: PPUSH
46178: CALL_OW 67
// ToLua ( hideTroll(); ) ;
46182: LD_STRING hideTroll();
46184: PPUSH
46185: CALL_OW 559
// end ;
46189: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
46190: LD_EXP 28
46194: PUSH
46195: LD_EXP 54
46199: AND
46200: IFFALSE 46263
46202: GO 46204
46204: DISABLE
46205: LD_INT 0
46207: PPUSH
// begin p := 0 ;
46208: LD_ADDR_VAR 0 1
46212: PUSH
46213: LD_INT 0
46215: ST_TO_ADDR
// repeat game_speed := 1 ;
46216: LD_ADDR_OWVAR 65
46220: PUSH
46221: LD_INT 1
46223: ST_TO_ADDR
// wait ( 0 0$1 ) ;
46224: LD_INT 35
46226: PPUSH
46227: CALL_OW 67
// p := p + 1 ;
46231: LD_ADDR_VAR 0 1
46235: PUSH
46236: LD_VAR 0 1
46240: PUSH
46241: LD_INT 1
46243: PLUS
46244: ST_TO_ADDR
// until p >= 60 ;
46245: LD_VAR 0 1
46249: PUSH
46250: LD_INT 60
46252: GREATEREQUAL
46253: IFFALSE 46216
// game_speed := 4 ;
46255: LD_ADDR_OWVAR 65
46259: PUSH
46260: LD_INT 4
46262: ST_TO_ADDR
// end ;
46263: PPOPN 1
46265: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
46266: LD_EXP 28
46270: PUSH
46271: LD_EXP 55
46275: AND
46276: IFFALSE 46422
46278: GO 46280
46280: DISABLE
46281: LD_INT 0
46283: PPUSH
46284: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46285: LD_ADDR_VAR 0 1
46289: PUSH
46290: LD_INT 22
46292: PUSH
46293: LD_OWVAR 2
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: LD_INT 30
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 30
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: LIST
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PPUSH
46334: CALL_OW 69
46338: ST_TO_ADDR
// if not depot then
46339: LD_VAR 0 1
46343: NOT
46344: IFFALSE 46348
// exit ;
46346: GO 46422
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
46348: LD_ADDR_VAR 0 2
46352: PUSH
46353: LD_VAR 0 1
46357: PUSH
46358: LD_INT 1
46360: PPUSH
46361: LD_VAR 0 1
46365: PPUSH
46366: CALL_OW 12
46370: ARRAY
46371: PPUSH
46372: CALL_OW 274
46376: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
46377: LD_VAR 0 2
46381: PPUSH
46382: LD_INT 1
46384: PPUSH
46385: LD_INT 0
46387: PPUSH
46388: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
46392: LD_VAR 0 2
46396: PPUSH
46397: LD_INT 2
46399: PPUSH
46400: LD_INT 0
46402: PPUSH
46403: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
46407: LD_VAR 0 2
46411: PPUSH
46412: LD_INT 3
46414: PPUSH
46415: LD_INT 0
46417: PPUSH
46418: CALL_OW 277
// end ;
46422: PPOPN 2
46424: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
46425: LD_EXP 28
46429: PUSH
46430: LD_EXP 56
46434: AND
46435: IFFALSE 46532
46437: GO 46439
46439: DISABLE
46440: LD_INT 0
46442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
46443: LD_ADDR_VAR 0 1
46447: PUSH
46448: LD_INT 22
46450: PUSH
46451: LD_OWVAR 2
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 21
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 3
46472: PUSH
46473: LD_INT 23
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: LIST
46491: PPUSH
46492: CALL_OW 69
46496: ST_TO_ADDR
// if not tmp then
46497: LD_VAR 0 1
46501: NOT
46502: IFFALSE 46506
// exit ;
46504: GO 46532
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
46506: LD_VAR 0 1
46510: PUSH
46511: LD_INT 1
46513: PPUSH
46514: LD_VAR 0 1
46518: PPUSH
46519: CALL_OW 12
46523: ARRAY
46524: PPUSH
46525: LD_INT 200
46527: PPUSH
46528: CALL_OW 234
// end ;
46532: PPOPN 1
46534: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
46535: LD_EXP 28
46539: PUSH
46540: LD_EXP 57
46544: AND
46545: IFFALSE 46624
46547: GO 46549
46549: DISABLE
46550: LD_INT 0
46552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
46553: LD_ADDR_VAR 0 1
46557: PUSH
46558: LD_INT 22
46560: PUSH
46561: LD_OWVAR 2
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 21
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PPUSH
46584: CALL_OW 69
46588: ST_TO_ADDR
// if not tmp then
46589: LD_VAR 0 1
46593: NOT
46594: IFFALSE 46598
// exit ;
46596: GO 46624
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
46598: LD_VAR 0 1
46602: PUSH
46603: LD_INT 1
46605: PPUSH
46606: LD_VAR 0 1
46610: PPUSH
46611: CALL_OW 12
46615: ARRAY
46616: PPUSH
46617: LD_INT 60
46619: PPUSH
46620: CALL_OW 234
// end ;
46624: PPOPN 1
46626: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
46627: LD_EXP 28
46631: PUSH
46632: LD_EXP 58
46636: AND
46637: IFFALSE 46736
46639: GO 46641
46641: DISABLE
46642: LD_INT 0
46644: PPUSH
46645: PPUSH
// begin enable ;
46646: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
46647: LD_ADDR_VAR 0 1
46651: PUSH
46652: LD_INT 22
46654: PUSH
46655: LD_OWVAR 2
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 61
46666: PUSH
46667: EMPTY
46668: LIST
46669: PUSH
46670: LD_INT 33
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: LIST
46684: PPUSH
46685: CALL_OW 69
46689: ST_TO_ADDR
// if not tmp then
46690: LD_VAR 0 1
46694: NOT
46695: IFFALSE 46699
// exit ;
46697: GO 46736
// for i in tmp do
46699: LD_ADDR_VAR 0 2
46703: PUSH
46704: LD_VAR 0 1
46708: PUSH
46709: FOR_IN
46710: IFFALSE 46734
// if IsControledBy ( i ) then
46712: LD_VAR 0 2
46716: PPUSH
46717: CALL_OW 312
46721: IFFALSE 46732
// ComUnlink ( i ) ;
46723: LD_VAR 0 2
46727: PPUSH
46728: CALL_OW 136
46732: GO 46709
46734: POP
46735: POP
// end ;
46736: PPOPN 2
46738: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
46739: LD_EXP 28
46743: PUSH
46744: LD_EXP 59
46748: AND
46749: IFFALSE 46889
46751: GO 46753
46753: DISABLE
46754: LD_INT 0
46756: PPUSH
46757: PPUSH
// begin ToLua ( displayPowell(); ) ;
46758: LD_STRING displayPowell();
46760: PPUSH
46761: CALL_OW 559
// uc_side := 0 ;
46765: LD_ADDR_OWVAR 20
46769: PUSH
46770: LD_INT 0
46772: ST_TO_ADDR
// uc_nation := 2 ;
46773: LD_ADDR_OWVAR 21
46777: PUSH
46778: LD_INT 2
46780: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
46781: LD_ADDR_OWVAR 37
46785: PUSH
46786: LD_INT 14
46788: ST_TO_ADDR
// vc_engine := engine_siberite ;
46789: LD_ADDR_OWVAR 39
46793: PUSH
46794: LD_INT 3
46796: ST_TO_ADDR
// vc_control := control_apeman ;
46797: LD_ADDR_OWVAR 38
46801: PUSH
46802: LD_INT 5
46804: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
46805: LD_ADDR_OWVAR 40
46809: PUSH
46810: LD_INT 29
46812: ST_TO_ADDR
// un := CreateVehicle ;
46813: LD_ADDR_VAR 0 2
46817: PUSH
46818: CALL_OW 45
46822: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
46823: LD_VAR 0 2
46827: PPUSH
46828: LD_INT 1
46830: PPUSH
46831: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
46835: LD_INT 35
46837: PPUSH
46838: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
46842: LD_VAR 0 2
46846: PPUSH
46847: LD_INT 22
46849: PUSH
46850: LD_OWVAR 2
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PPUSH
46859: CALL_OW 69
46863: PPUSH
46864: LD_VAR 0 2
46868: PPUSH
46869: CALL_OW 74
46873: PPUSH
46874: CALL_OW 115
// until IsDead ( un ) ;
46878: LD_VAR 0 2
46882: PPUSH
46883: CALL_OW 301
46887: IFFALSE 46835
// end ;
46889: PPOPN 2
46891: END
// every 0 0$1 trigger StreamModeActive and sStu do
46892: LD_EXP 28
46896: PUSH
46897: LD_EXP 67
46901: AND
46902: IFFALSE 46918
46904: GO 46906
46906: DISABLE
// begin ToLua ( displayStucuk(); ) ;
46907: LD_STRING displayStucuk();
46909: PPUSH
46910: CALL_OW 559
// ResetFog ;
46914: CALL_OW 335
// end ;
46918: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
46919: LD_EXP 28
46923: PUSH
46924: LD_EXP 60
46928: AND
46929: IFFALSE 47070
46931: GO 46933
46933: DISABLE
46934: LD_INT 0
46936: PPUSH
46937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
46938: LD_ADDR_VAR 0 2
46942: PUSH
46943: LD_INT 22
46945: PUSH
46946: LD_OWVAR 2
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 21
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PPUSH
46969: CALL_OW 69
46973: ST_TO_ADDR
// if not tmp then
46974: LD_VAR 0 2
46978: NOT
46979: IFFALSE 46983
// exit ;
46981: GO 47070
// un := tmp [ rand ( 1 , tmp ) ] ;
46983: LD_ADDR_VAR 0 1
46987: PUSH
46988: LD_VAR 0 2
46992: PUSH
46993: LD_INT 1
46995: PPUSH
46996: LD_VAR 0 2
47000: PPUSH
47001: CALL_OW 12
47005: ARRAY
47006: ST_TO_ADDR
// SetSide ( un , 0 ) ;
47007: LD_VAR 0 1
47011: PPUSH
47012: LD_INT 0
47014: PPUSH
47015: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
47019: LD_VAR 0 1
47023: PPUSH
47024: LD_OWVAR 3
47028: PUSH
47029: LD_VAR 0 1
47033: DIFF
47034: PPUSH
47035: LD_VAR 0 1
47039: PPUSH
47040: CALL_OW 74
47044: PPUSH
47045: CALL_OW 115
// wait ( 0 0$20 ) ;
47049: LD_INT 700
47051: PPUSH
47052: CALL_OW 67
// SetSide ( un , your_side ) ;
47056: LD_VAR 0 1
47060: PPUSH
47061: LD_OWVAR 2
47065: PPUSH
47066: CALL_OW 235
// end ;
47070: PPOPN 2
47072: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
47073: LD_EXP 28
47077: PUSH
47078: LD_EXP 61
47082: AND
47083: IFFALSE 47189
47085: GO 47087
47087: DISABLE
47088: LD_INT 0
47090: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47091: LD_ADDR_VAR 0 1
47095: PUSH
47096: LD_INT 22
47098: PUSH
47099: LD_OWVAR 2
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: LD_INT 30
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 30
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: LIST
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PPUSH
47140: CALL_OW 69
47144: ST_TO_ADDR
// if not depot then
47145: LD_VAR 0 1
47149: NOT
47150: IFFALSE 47154
// exit ;
47152: GO 47189
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
47154: LD_VAR 0 1
47158: PUSH
47159: LD_INT 1
47161: ARRAY
47162: PPUSH
47163: CALL_OW 250
47167: PPUSH
47168: LD_VAR 0 1
47172: PUSH
47173: LD_INT 1
47175: ARRAY
47176: PPUSH
47177: CALL_OW 251
47181: PPUSH
47182: LD_INT 70
47184: PPUSH
47185: CALL_OW 495
// end ;
47189: PPOPN 1
47191: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
47192: LD_EXP 28
47196: PUSH
47197: LD_EXP 62
47201: AND
47202: IFFALSE 47413
47204: GO 47206
47206: DISABLE
47207: LD_INT 0
47209: PPUSH
47210: PPUSH
47211: PPUSH
47212: PPUSH
47213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
47214: LD_ADDR_VAR 0 5
47218: PUSH
47219: LD_INT 22
47221: PUSH
47222: LD_OWVAR 2
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 21
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PPUSH
47245: CALL_OW 69
47249: ST_TO_ADDR
// if not tmp then
47250: LD_VAR 0 5
47254: NOT
47255: IFFALSE 47259
// exit ;
47257: GO 47413
// for i in tmp do
47259: LD_ADDR_VAR 0 1
47263: PUSH
47264: LD_VAR 0 5
47268: PUSH
47269: FOR_IN
47270: IFFALSE 47411
// begin d := rand ( 0 , 5 ) ;
47272: LD_ADDR_VAR 0 4
47276: PUSH
47277: LD_INT 0
47279: PPUSH
47280: LD_INT 5
47282: PPUSH
47283: CALL_OW 12
47287: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
47288: LD_ADDR_VAR 0 2
47292: PUSH
47293: LD_VAR 0 1
47297: PPUSH
47298: CALL_OW 250
47302: PPUSH
47303: LD_VAR 0 4
47307: PPUSH
47308: LD_INT 3
47310: PPUSH
47311: LD_INT 12
47313: PPUSH
47314: CALL_OW 12
47318: PPUSH
47319: CALL_OW 272
47323: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
47324: LD_ADDR_VAR 0 3
47328: PUSH
47329: LD_VAR 0 1
47333: PPUSH
47334: CALL_OW 251
47338: PPUSH
47339: LD_VAR 0 4
47343: PPUSH
47344: LD_INT 3
47346: PPUSH
47347: LD_INT 12
47349: PPUSH
47350: CALL_OW 12
47354: PPUSH
47355: CALL_OW 273
47359: ST_TO_ADDR
// if ValidHex ( x , y ) then
47360: LD_VAR 0 2
47364: PPUSH
47365: LD_VAR 0 3
47369: PPUSH
47370: CALL_OW 488
47374: IFFALSE 47409
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
47376: LD_VAR 0 1
47380: PPUSH
47381: LD_VAR 0 2
47385: PPUSH
47386: LD_VAR 0 3
47390: PPUSH
47391: LD_INT 3
47393: PPUSH
47394: LD_INT 6
47396: PPUSH
47397: CALL_OW 12
47401: PPUSH
47402: LD_INT 1
47404: PPUSH
47405: CALL_OW 483
// end ;
47409: GO 47269
47411: POP
47412: POP
// end ;
47413: PPOPN 5
47415: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
47416: LD_EXP 28
47420: PUSH
47421: LD_EXP 63
47425: AND
47426: IFFALSE 47520
47428: GO 47430
47430: DISABLE
47431: LD_INT 0
47433: PPUSH
47434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
47435: LD_ADDR_VAR 0 2
47439: PUSH
47440: LD_INT 22
47442: PUSH
47443: LD_OWVAR 2
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 32
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 21
47464: PUSH
47465: LD_INT 2
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: LIST
47476: PPUSH
47477: CALL_OW 69
47481: ST_TO_ADDR
// if not tmp then
47482: LD_VAR 0 2
47486: NOT
47487: IFFALSE 47491
// exit ;
47489: GO 47520
// for i in tmp do
47491: LD_ADDR_VAR 0 1
47495: PUSH
47496: LD_VAR 0 2
47500: PUSH
47501: FOR_IN
47502: IFFALSE 47518
// SetFuel ( i , 0 ) ;
47504: LD_VAR 0 1
47508: PPUSH
47509: LD_INT 0
47511: PPUSH
47512: CALL_OW 240
47516: GO 47501
47518: POP
47519: POP
// end ;
47520: PPOPN 2
47522: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
47523: LD_EXP 28
47527: PUSH
47528: LD_EXP 64
47532: AND
47533: IFFALSE 47599
47535: GO 47537
47537: DISABLE
47538: LD_INT 0
47540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
47541: LD_ADDR_VAR 0 1
47545: PUSH
47546: LD_INT 22
47548: PUSH
47549: LD_OWVAR 2
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 30
47560: PUSH
47561: LD_INT 29
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PPUSH
47572: CALL_OW 69
47576: ST_TO_ADDR
// if not tmp then
47577: LD_VAR 0 1
47581: NOT
47582: IFFALSE 47586
// exit ;
47584: GO 47599
// DestroyUnit ( tmp [ 1 ] ) ;
47586: LD_VAR 0 1
47590: PUSH
47591: LD_INT 1
47593: ARRAY
47594: PPUSH
47595: CALL_OW 65
// end ;
47599: PPOPN 1
47601: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
47602: LD_EXP 28
47606: PUSH
47607: LD_EXP 66
47611: AND
47612: IFFALSE 47741
47614: GO 47616
47616: DISABLE
47617: LD_INT 0
47619: PPUSH
// begin uc_side := 0 ;
47620: LD_ADDR_OWVAR 20
47624: PUSH
47625: LD_INT 0
47627: ST_TO_ADDR
// uc_nation := nation_arabian ;
47628: LD_ADDR_OWVAR 21
47632: PUSH
47633: LD_INT 2
47635: ST_TO_ADDR
// hc_gallery :=  ;
47636: LD_ADDR_OWVAR 33
47640: PUSH
47641: LD_STRING 
47643: ST_TO_ADDR
// hc_name :=  ;
47644: LD_ADDR_OWVAR 26
47648: PUSH
47649: LD_STRING 
47651: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
47652: LD_INT 1
47654: PPUSH
47655: LD_INT 11
47657: PPUSH
47658: LD_INT 10
47660: PPUSH
47661: CALL_OW 380
// un := CreateHuman ;
47665: LD_ADDR_VAR 0 1
47669: PUSH
47670: CALL_OW 44
47674: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
47675: LD_VAR 0 1
47679: PPUSH
47680: LD_INT 1
47682: PPUSH
47683: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
47687: LD_INT 35
47689: PPUSH
47690: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
47694: LD_VAR 0 1
47698: PPUSH
47699: LD_INT 22
47701: PUSH
47702: LD_OWVAR 2
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PPUSH
47711: CALL_OW 69
47715: PPUSH
47716: LD_VAR 0 1
47720: PPUSH
47721: CALL_OW 74
47725: PPUSH
47726: CALL_OW 115
// until IsDead ( un ) ;
47730: LD_VAR 0 1
47734: PPUSH
47735: CALL_OW 301
47739: IFFALSE 47687
// end ;
47741: PPOPN 1
47743: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
47744: LD_EXP 28
47748: PUSH
47749: LD_EXP 68
47753: AND
47754: IFFALSE 47766
47756: GO 47758
47758: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
47759: LD_STRING earthquake(getX(game), 0, 32)
47761: PPUSH
47762: CALL_OW 559
47766: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
47767: LD_EXP 28
47771: PUSH
47772: LD_EXP 69
47776: AND
47777: IFFALSE 47868
47779: GO 47781
47781: DISABLE
47782: LD_INT 0
47784: PPUSH
// begin enable ;
47785: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
47786: LD_ADDR_VAR 0 1
47790: PUSH
47791: LD_INT 22
47793: PUSH
47794: LD_OWVAR 2
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 21
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 33
47815: PUSH
47816: LD_INT 3
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: LIST
47827: PPUSH
47828: CALL_OW 69
47832: ST_TO_ADDR
// if not tmp then
47833: LD_VAR 0 1
47837: NOT
47838: IFFALSE 47842
// exit ;
47840: GO 47868
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
47842: LD_VAR 0 1
47846: PUSH
47847: LD_INT 1
47849: PPUSH
47850: LD_VAR 0 1
47854: PPUSH
47855: CALL_OW 12
47859: ARRAY
47860: PPUSH
47861: LD_INT 1
47863: PPUSH
47864: CALL_OW 234
// end ;
47868: PPOPN 1
47870: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
47871: LD_EXP 28
47875: PUSH
47876: LD_EXP 70
47880: AND
47881: IFFALSE 48022
47883: GO 47885
47885: DISABLE
47886: LD_INT 0
47888: PPUSH
47889: PPUSH
47890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
47891: LD_ADDR_VAR 0 3
47895: PUSH
47896: LD_INT 22
47898: PUSH
47899: LD_OWVAR 2
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 25
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PPUSH
47922: CALL_OW 69
47926: ST_TO_ADDR
// if not tmp then
47927: LD_VAR 0 3
47931: NOT
47932: IFFALSE 47936
// exit ;
47934: GO 48022
// un := tmp [ rand ( 1 , tmp ) ] ;
47936: LD_ADDR_VAR 0 2
47940: PUSH
47941: LD_VAR 0 3
47945: PUSH
47946: LD_INT 1
47948: PPUSH
47949: LD_VAR 0 3
47953: PPUSH
47954: CALL_OW 12
47958: ARRAY
47959: ST_TO_ADDR
// if Crawls ( un ) then
47960: LD_VAR 0 2
47964: PPUSH
47965: CALL_OW 318
47969: IFFALSE 47980
// ComWalk ( un ) ;
47971: LD_VAR 0 2
47975: PPUSH
47976: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
47980: LD_VAR 0 2
47984: PPUSH
47985: LD_INT 9
47987: PPUSH
47988: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
47992: LD_INT 28
47994: PPUSH
47995: LD_OWVAR 2
47999: PPUSH
48000: LD_INT 2
48002: PPUSH
48003: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
48007: LD_INT 29
48009: PPUSH
48010: LD_OWVAR 2
48014: PPUSH
48015: LD_INT 2
48017: PPUSH
48018: CALL_OW 322
// end ;
48022: PPOPN 3
48024: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
48025: LD_EXP 28
48029: PUSH
48030: LD_EXP 71
48034: AND
48035: IFFALSE 48146
48037: GO 48039
48039: DISABLE
48040: LD_INT 0
48042: PPUSH
48043: PPUSH
48044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
48045: LD_ADDR_VAR 0 3
48049: PUSH
48050: LD_INT 22
48052: PUSH
48053: LD_OWVAR 2
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 25
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PPUSH
48076: CALL_OW 69
48080: ST_TO_ADDR
// if not tmp then
48081: LD_VAR 0 3
48085: NOT
48086: IFFALSE 48090
// exit ;
48088: GO 48146
// un := tmp [ rand ( 1 , tmp ) ] ;
48090: LD_ADDR_VAR 0 2
48094: PUSH
48095: LD_VAR 0 3
48099: PUSH
48100: LD_INT 1
48102: PPUSH
48103: LD_VAR 0 3
48107: PPUSH
48108: CALL_OW 12
48112: ARRAY
48113: ST_TO_ADDR
// if Crawls ( un ) then
48114: LD_VAR 0 2
48118: PPUSH
48119: CALL_OW 318
48123: IFFALSE 48134
// ComWalk ( un ) ;
48125: LD_VAR 0 2
48129: PPUSH
48130: CALL_OW 138
// SetClass ( un , class_mortar ) ;
48134: LD_VAR 0 2
48138: PPUSH
48139: LD_INT 8
48141: PPUSH
48142: CALL_OW 336
// end ;
48146: PPOPN 3
48148: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
48149: LD_EXP 28
48153: PUSH
48154: LD_EXP 72
48158: AND
48159: IFFALSE 48303
48161: GO 48163
48163: DISABLE
48164: LD_INT 0
48166: PPUSH
48167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
48168: LD_ADDR_VAR 0 2
48172: PUSH
48173: LD_INT 22
48175: PUSH
48176: LD_OWVAR 2
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 21
48187: PUSH
48188: LD_INT 2
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: PUSH
48198: LD_INT 34
48200: PUSH
48201: LD_INT 12
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 34
48210: PUSH
48211: LD_INT 51
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 34
48220: PUSH
48221: LD_INT 32
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: LIST
48238: PPUSH
48239: CALL_OW 69
48243: ST_TO_ADDR
// if not tmp then
48244: LD_VAR 0 2
48248: NOT
48249: IFFALSE 48253
// exit ;
48251: GO 48303
// for i in tmp do
48253: LD_ADDR_VAR 0 1
48257: PUSH
48258: LD_VAR 0 2
48262: PUSH
48263: FOR_IN
48264: IFFALSE 48301
// if GetCargo ( i , mat_artifact ) = 0 then
48266: LD_VAR 0 1
48270: PPUSH
48271: LD_INT 4
48273: PPUSH
48274: CALL_OW 289
48278: PUSH
48279: LD_INT 0
48281: EQUAL
48282: IFFALSE 48299
// SetCargo ( i , mat_siberit , 100 ) ;
48284: LD_VAR 0 1
48288: PPUSH
48289: LD_INT 3
48291: PPUSH
48292: LD_INT 100
48294: PPUSH
48295: CALL_OW 290
48299: GO 48263
48301: POP
48302: POP
// end ;
48303: PPOPN 2
48305: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
48306: LD_EXP 28
48310: PUSH
48311: LD_EXP 73
48315: AND
48316: IFFALSE 48499
48318: GO 48320
48320: DISABLE
48321: LD_INT 0
48323: PPUSH
48324: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
48325: LD_ADDR_VAR 0 2
48329: PUSH
48330: LD_INT 22
48332: PUSH
48333: LD_OWVAR 2
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PPUSH
48342: CALL_OW 69
48346: ST_TO_ADDR
// if not tmp then
48347: LD_VAR 0 2
48351: NOT
48352: IFFALSE 48356
// exit ;
48354: GO 48499
// for i := 1 to 2 do
48356: LD_ADDR_VAR 0 1
48360: PUSH
48361: DOUBLE
48362: LD_INT 1
48364: DEC
48365: ST_TO_ADDR
48366: LD_INT 2
48368: PUSH
48369: FOR_TO
48370: IFFALSE 48497
// begin uc_side := your_side ;
48372: LD_ADDR_OWVAR 20
48376: PUSH
48377: LD_OWVAR 2
48381: ST_TO_ADDR
// uc_nation := nation_american ;
48382: LD_ADDR_OWVAR 21
48386: PUSH
48387: LD_INT 1
48389: ST_TO_ADDR
// vc_chassis := us_morphling ;
48390: LD_ADDR_OWVAR 37
48394: PUSH
48395: LD_INT 5
48397: ST_TO_ADDR
// vc_engine := engine_siberite ;
48398: LD_ADDR_OWVAR 39
48402: PUSH
48403: LD_INT 3
48405: ST_TO_ADDR
// vc_control := control_computer ;
48406: LD_ADDR_OWVAR 38
48410: PUSH
48411: LD_INT 3
48413: ST_TO_ADDR
// vc_weapon := us_double_laser ;
48414: LD_ADDR_OWVAR 40
48418: PUSH
48419: LD_INT 10
48421: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
48422: LD_VAR 0 2
48426: PUSH
48427: LD_INT 1
48429: ARRAY
48430: PPUSH
48431: CALL_OW 310
48435: NOT
48436: IFFALSE 48483
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
48438: CALL_OW 45
48442: PPUSH
48443: LD_VAR 0 2
48447: PUSH
48448: LD_INT 1
48450: ARRAY
48451: PPUSH
48452: CALL_OW 250
48456: PPUSH
48457: LD_VAR 0 2
48461: PUSH
48462: LD_INT 1
48464: ARRAY
48465: PPUSH
48466: CALL_OW 251
48470: PPUSH
48471: LD_INT 12
48473: PPUSH
48474: LD_INT 1
48476: PPUSH
48477: CALL_OW 50
48481: GO 48495
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
48483: CALL_OW 45
48487: PPUSH
48488: LD_INT 1
48490: PPUSH
48491: CALL_OW 51
// end ;
48495: GO 48369
48497: POP
48498: POP
// end ;
48499: PPOPN 2
48501: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
48502: LD_EXP 28
48506: PUSH
48507: LD_EXP 74
48511: AND
48512: IFFALSE 48734
48514: GO 48516
48516: DISABLE
48517: LD_INT 0
48519: PPUSH
48520: PPUSH
48521: PPUSH
48522: PPUSH
48523: PPUSH
48524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
48525: LD_ADDR_VAR 0 6
48529: PUSH
48530: LD_INT 22
48532: PUSH
48533: LD_OWVAR 2
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 21
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 3
48554: PUSH
48555: LD_INT 23
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: LIST
48573: PPUSH
48574: CALL_OW 69
48578: ST_TO_ADDR
// if not tmp then
48579: LD_VAR 0 6
48583: NOT
48584: IFFALSE 48588
// exit ;
48586: GO 48734
// s1 := rand ( 1 , 4 ) ;
48588: LD_ADDR_VAR 0 2
48592: PUSH
48593: LD_INT 1
48595: PPUSH
48596: LD_INT 4
48598: PPUSH
48599: CALL_OW 12
48603: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
48604: LD_ADDR_VAR 0 4
48608: PUSH
48609: LD_VAR 0 6
48613: PUSH
48614: LD_INT 1
48616: ARRAY
48617: PPUSH
48618: LD_VAR 0 2
48622: PPUSH
48623: CALL_OW 259
48627: ST_TO_ADDR
// if s1 = 1 then
48628: LD_VAR 0 2
48632: PUSH
48633: LD_INT 1
48635: EQUAL
48636: IFFALSE 48656
// s2 := rand ( 2 , 4 ) else
48638: LD_ADDR_VAR 0 3
48642: PUSH
48643: LD_INT 2
48645: PPUSH
48646: LD_INT 4
48648: PPUSH
48649: CALL_OW 12
48653: ST_TO_ADDR
48654: GO 48664
// s2 := 1 ;
48656: LD_ADDR_VAR 0 3
48660: PUSH
48661: LD_INT 1
48663: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
48664: LD_ADDR_VAR 0 5
48668: PUSH
48669: LD_VAR 0 6
48673: PUSH
48674: LD_INT 1
48676: ARRAY
48677: PPUSH
48678: LD_VAR 0 3
48682: PPUSH
48683: CALL_OW 259
48687: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
48688: LD_VAR 0 6
48692: PUSH
48693: LD_INT 1
48695: ARRAY
48696: PPUSH
48697: LD_VAR 0 2
48701: PPUSH
48702: LD_VAR 0 5
48706: PPUSH
48707: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
48711: LD_VAR 0 6
48715: PUSH
48716: LD_INT 1
48718: ARRAY
48719: PPUSH
48720: LD_VAR 0 3
48724: PPUSH
48725: LD_VAR 0 4
48729: PPUSH
48730: CALL_OW 237
// end ;
48734: PPOPN 6
48736: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
48737: LD_EXP 28
48741: PUSH
48742: LD_EXP 75
48746: AND
48747: IFFALSE 48826
48749: GO 48751
48751: DISABLE
48752: LD_INT 0
48754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
48755: LD_ADDR_VAR 0 1
48759: PUSH
48760: LD_INT 22
48762: PUSH
48763: LD_OWVAR 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 30
48774: PUSH
48775: LD_INT 3
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PPUSH
48786: CALL_OW 69
48790: ST_TO_ADDR
// if not tmp then
48791: LD_VAR 0 1
48795: NOT
48796: IFFALSE 48800
// exit ;
48798: GO 48826
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
48800: LD_VAR 0 1
48804: PUSH
48805: LD_INT 1
48807: PPUSH
48808: LD_VAR 0 1
48812: PPUSH
48813: CALL_OW 12
48817: ARRAY
48818: PPUSH
48819: LD_INT 1
48821: PPUSH
48822: CALL_OW 234
// end ;
48826: PPOPN 1
48828: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
48829: LD_EXP 28
48833: PUSH
48834: LD_EXP 76
48838: AND
48839: IFFALSE 48951
48841: GO 48843
48843: DISABLE
48844: LD_INT 0
48846: PPUSH
48847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
48848: LD_ADDR_VAR 0 2
48852: PUSH
48853: LD_INT 22
48855: PUSH
48856: LD_OWVAR 2
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 2
48867: PUSH
48868: LD_INT 30
48870: PUSH
48871: LD_INT 27
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 30
48880: PUSH
48881: LD_INT 26
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 30
48890: PUSH
48891: LD_INT 28
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PPUSH
48908: CALL_OW 69
48912: ST_TO_ADDR
// if not tmp then
48913: LD_VAR 0 2
48917: NOT
48918: IFFALSE 48922
// exit ;
48920: GO 48951
// for i in tmp do
48922: LD_ADDR_VAR 0 1
48926: PUSH
48927: LD_VAR 0 2
48931: PUSH
48932: FOR_IN
48933: IFFALSE 48949
// SetLives ( i , 1 ) ;
48935: LD_VAR 0 1
48939: PPUSH
48940: LD_INT 1
48942: PPUSH
48943: CALL_OW 234
48947: GO 48932
48949: POP
48950: POP
// end ;
48951: PPOPN 2
48953: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
48954: LD_EXP 28
48958: PUSH
48959: LD_EXP 77
48963: AND
48964: IFFALSE 49238
48966: GO 48968
48968: DISABLE
48969: LD_INT 0
48971: PPUSH
48972: PPUSH
48973: PPUSH
// begin i := rand ( 1 , 7 ) ;
48974: LD_ADDR_VAR 0 1
48978: PUSH
48979: LD_INT 1
48981: PPUSH
48982: LD_INT 7
48984: PPUSH
48985: CALL_OW 12
48989: ST_TO_ADDR
// case i of 1 :
48990: LD_VAR 0 1
48994: PUSH
48995: LD_INT 1
48997: DOUBLE
48998: EQUAL
48999: IFTRUE 49003
49001: GO 49013
49003: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
49004: LD_STRING earthquake(getX(game), 0, 32)
49006: PPUSH
49007: CALL_OW 559
49011: GO 49238
49013: LD_INT 2
49015: DOUBLE
49016: EQUAL
49017: IFTRUE 49021
49019: GO 49035
49021: POP
// begin ToLua ( displayStucuk(); ) ;
49022: LD_STRING displayStucuk();
49024: PPUSH
49025: CALL_OW 559
// ResetFog ;
49029: CALL_OW 335
// end ; 3 :
49033: GO 49238
49035: LD_INT 3
49037: DOUBLE
49038: EQUAL
49039: IFTRUE 49043
49041: GO 49147
49043: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
49044: LD_ADDR_VAR 0 2
49048: PUSH
49049: LD_INT 22
49051: PUSH
49052: LD_OWVAR 2
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 25
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PPUSH
49075: CALL_OW 69
49079: ST_TO_ADDR
// if not tmp then
49080: LD_VAR 0 2
49084: NOT
49085: IFFALSE 49089
// exit ;
49087: GO 49238
// un := tmp [ rand ( 1 , tmp ) ] ;
49089: LD_ADDR_VAR 0 3
49093: PUSH
49094: LD_VAR 0 2
49098: PUSH
49099: LD_INT 1
49101: PPUSH
49102: LD_VAR 0 2
49106: PPUSH
49107: CALL_OW 12
49111: ARRAY
49112: ST_TO_ADDR
// if Crawls ( un ) then
49113: LD_VAR 0 3
49117: PPUSH
49118: CALL_OW 318
49122: IFFALSE 49133
// ComWalk ( un ) ;
49124: LD_VAR 0 3
49128: PPUSH
49129: CALL_OW 138
// SetClass ( un , class_mortar ) ;
49133: LD_VAR 0 3
49137: PPUSH
49138: LD_INT 8
49140: PPUSH
49141: CALL_OW 336
// end ; 4 :
49145: GO 49238
49147: LD_INT 4
49149: DOUBLE
49150: EQUAL
49151: IFTRUE 49155
49153: GO 49216
49155: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
49156: LD_ADDR_VAR 0 2
49160: PUSH
49161: LD_INT 22
49163: PUSH
49164: LD_OWVAR 2
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 30
49175: PUSH
49176: LD_INT 29
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PPUSH
49187: CALL_OW 69
49191: ST_TO_ADDR
// if not tmp then
49192: LD_VAR 0 2
49196: NOT
49197: IFFALSE 49201
// exit ;
49199: GO 49238
// DestroyUnit ( tmp [ 1 ] ) ;
49201: LD_VAR 0 2
49205: PUSH
49206: LD_INT 1
49208: ARRAY
49209: PPUSH
49210: CALL_OW 65
// end ; 5 .. 7 :
49214: GO 49238
49216: LD_INT 5
49218: DOUBLE
49219: GREATEREQUAL
49220: IFFALSE 49228
49222: LD_INT 7
49224: DOUBLE
49225: LESSEQUAL
49226: IFTRUE 49230
49228: GO 49237
49230: POP
// StreamSibBomb ; end ;
49231: CALL 45488 0 0
49235: GO 49238
49237: POP
// end ;
49238: PPOPN 3
49240: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
49241: LD_EXP 28
49245: PUSH
49246: LD_EXP 78
49250: AND
49251: IFFALSE 49407
49253: GO 49255
49255: DISABLE
49256: LD_INT 0
49258: PPUSH
49259: PPUSH
49260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
49261: LD_ADDR_VAR 0 2
49265: PUSH
49266: LD_INT 81
49268: PUSH
49269: LD_OWVAR 2
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: LD_INT 21
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 21
49293: PUSH
49294: LD_INT 2
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: LIST
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PPUSH
49310: CALL_OW 69
49314: ST_TO_ADDR
// if not tmp then
49315: LD_VAR 0 2
49319: NOT
49320: IFFALSE 49324
// exit ;
49322: GO 49407
// p := 0 ;
49324: LD_ADDR_VAR 0 3
49328: PUSH
49329: LD_INT 0
49331: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49332: LD_INT 35
49334: PPUSH
49335: CALL_OW 67
// p := p + 1 ;
49339: LD_ADDR_VAR 0 3
49343: PUSH
49344: LD_VAR 0 3
49348: PUSH
49349: LD_INT 1
49351: PLUS
49352: ST_TO_ADDR
// for i in tmp do
49353: LD_ADDR_VAR 0 1
49357: PUSH
49358: LD_VAR 0 2
49362: PUSH
49363: FOR_IN
49364: IFFALSE 49395
// if GetLives ( i ) < 1000 then
49366: LD_VAR 0 1
49370: PPUSH
49371: CALL_OW 256
49375: PUSH
49376: LD_INT 1000
49378: LESS
49379: IFFALSE 49393
// SetLives ( i , 1000 ) ;
49381: LD_VAR 0 1
49385: PPUSH
49386: LD_INT 1000
49388: PPUSH
49389: CALL_OW 234
49393: GO 49363
49395: POP
49396: POP
// until p > 20 ;
49397: LD_VAR 0 3
49401: PUSH
49402: LD_INT 20
49404: GREATER
49405: IFFALSE 49332
// end ;
49407: PPOPN 3
49409: END
// every 0 0$1 trigger StreamModeActive and sTime do
49410: LD_EXP 28
49414: PUSH
49415: LD_EXP 79
49419: AND
49420: IFFALSE 49455
49422: GO 49424
49424: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
49425: LD_INT 28
49427: PPUSH
49428: LD_OWVAR 2
49432: PPUSH
49433: LD_INT 2
49435: PPUSH
49436: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
49440: LD_INT 30
49442: PPUSH
49443: LD_OWVAR 2
49447: PPUSH
49448: LD_INT 2
49450: PPUSH
49451: CALL_OW 322
// end ;
49455: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
49456: LD_EXP 28
49460: PUSH
49461: LD_EXP 80
49465: AND
49466: IFFALSE 49587
49468: GO 49470
49470: DISABLE
49471: LD_INT 0
49473: PPUSH
49474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
49475: LD_ADDR_VAR 0 2
49479: PUSH
49480: LD_INT 22
49482: PUSH
49483: LD_OWVAR 2
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 21
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 3
49504: PUSH
49505: LD_INT 23
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: LIST
49523: PPUSH
49524: CALL_OW 69
49528: ST_TO_ADDR
// if not tmp then
49529: LD_VAR 0 2
49533: NOT
49534: IFFALSE 49538
// exit ;
49536: GO 49587
// for i in tmp do
49538: LD_ADDR_VAR 0 1
49542: PUSH
49543: LD_VAR 0 2
49547: PUSH
49548: FOR_IN
49549: IFFALSE 49585
// begin if Crawls ( i ) then
49551: LD_VAR 0 1
49555: PPUSH
49556: CALL_OW 318
49560: IFFALSE 49571
// ComWalk ( i ) ;
49562: LD_VAR 0 1
49566: PPUSH
49567: CALL_OW 138
// SetClass ( i , 2 ) ;
49571: LD_VAR 0 1
49575: PPUSH
49576: LD_INT 2
49578: PPUSH
49579: CALL_OW 336
// end ;
49583: GO 49548
49585: POP
49586: POP
// end ;
49587: PPOPN 2
49589: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
49590: LD_EXP 28
49594: PUSH
49595: LD_EXP 81
49599: AND
49600: IFFALSE 49881
49602: GO 49604
49604: DISABLE
49605: LD_INT 0
49607: PPUSH
49608: PPUSH
49609: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
49610: LD_OWVAR 2
49614: PPUSH
49615: LD_INT 9
49617: PPUSH
49618: LD_INT 1
49620: PPUSH
49621: LD_INT 1
49623: PPUSH
49624: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
49628: LD_INT 9
49630: PPUSH
49631: LD_OWVAR 2
49635: PPUSH
49636: CALL_OW 343
// uc_side := 9 ;
49640: LD_ADDR_OWVAR 20
49644: PUSH
49645: LD_INT 9
49647: ST_TO_ADDR
// uc_nation := 2 ;
49648: LD_ADDR_OWVAR 21
49652: PUSH
49653: LD_INT 2
49655: ST_TO_ADDR
// hc_name := Dark Warrior ;
49656: LD_ADDR_OWVAR 26
49660: PUSH
49661: LD_STRING Dark Warrior
49663: ST_TO_ADDR
// hc_gallery :=  ;
49664: LD_ADDR_OWVAR 33
49668: PUSH
49669: LD_STRING 
49671: ST_TO_ADDR
// hc_noskilllimit := true ;
49672: LD_ADDR_OWVAR 76
49676: PUSH
49677: LD_INT 1
49679: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
49680: LD_ADDR_OWVAR 31
49684: PUSH
49685: LD_INT 30
49687: PUSH
49688: LD_INT 30
49690: PUSH
49691: LD_INT 30
49693: PUSH
49694: LD_INT 30
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: ST_TO_ADDR
// un := CreateHuman ;
49703: LD_ADDR_VAR 0 3
49707: PUSH
49708: CALL_OW 44
49712: ST_TO_ADDR
// hc_noskilllimit := false ;
49713: LD_ADDR_OWVAR 76
49717: PUSH
49718: LD_INT 0
49720: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
49721: LD_VAR 0 3
49725: PPUSH
49726: LD_INT 1
49728: PPUSH
49729: CALL_OW 51
// p := 0 ;
49733: LD_ADDR_VAR 0 2
49737: PUSH
49738: LD_INT 0
49740: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49741: LD_INT 35
49743: PPUSH
49744: CALL_OW 67
// p := p + 1 ;
49748: LD_ADDR_VAR 0 2
49752: PUSH
49753: LD_VAR 0 2
49757: PUSH
49758: LD_INT 1
49760: PLUS
49761: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
49762: LD_VAR 0 3
49766: PPUSH
49767: CALL_OW 256
49771: PUSH
49772: LD_INT 1000
49774: LESS
49775: IFFALSE 49789
// SetLives ( un , 1000 ) ;
49777: LD_VAR 0 3
49781: PPUSH
49782: LD_INT 1000
49784: PPUSH
49785: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
49789: LD_VAR 0 3
49793: PPUSH
49794: LD_INT 81
49796: PUSH
49797: LD_OWVAR 2
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 91
49808: PUSH
49809: LD_VAR 0 3
49813: PUSH
49814: LD_INT 30
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: LIST
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PPUSH
49826: CALL_OW 69
49830: PPUSH
49831: LD_VAR 0 3
49835: PPUSH
49836: CALL_OW 74
49840: PPUSH
49841: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
49845: LD_VAR 0 2
49849: PUSH
49850: LD_INT 60
49852: GREATER
49853: PUSH
49854: LD_VAR 0 3
49858: PPUSH
49859: CALL_OW 301
49863: OR
49864: IFFALSE 49741
// if un then
49866: LD_VAR 0 3
49870: IFFALSE 49881
// RemoveUnit ( un ) ;
49872: LD_VAR 0 3
49876: PPUSH
49877: CALL_OW 64
// end ;
49881: PPOPN 3
49883: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
49884: LD_INT 0
49886: PPUSH
// case cmd of 301 :
49887: LD_VAR 0 1
49891: PUSH
49892: LD_INT 301
49894: DOUBLE
49895: EQUAL
49896: IFTRUE 49900
49898: GO 49932
49900: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
49901: LD_VAR 0 6
49905: PPUSH
49906: LD_VAR 0 7
49910: PPUSH
49911: LD_VAR 0 8
49915: PPUSH
49916: LD_VAR 0 4
49920: PPUSH
49921: LD_VAR 0 5
49925: PPUSH
49926: CALL 51133 0 5
49930: GO 50053
49932: LD_INT 302
49934: DOUBLE
49935: EQUAL
49936: IFTRUE 49940
49938: GO 49977
49940: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
49941: LD_VAR 0 6
49945: PPUSH
49946: LD_VAR 0 7
49950: PPUSH
49951: LD_VAR 0 8
49955: PPUSH
49956: LD_VAR 0 9
49960: PPUSH
49961: LD_VAR 0 4
49965: PPUSH
49966: LD_VAR 0 5
49970: PPUSH
49971: CALL 51224 0 6
49975: GO 50053
49977: LD_INT 303
49979: DOUBLE
49980: EQUAL
49981: IFTRUE 49985
49983: GO 50022
49985: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
49986: LD_VAR 0 6
49990: PPUSH
49991: LD_VAR 0 7
49995: PPUSH
49996: LD_VAR 0 8
50000: PPUSH
50001: LD_VAR 0 9
50005: PPUSH
50006: LD_VAR 0 4
50010: PPUSH
50011: LD_VAR 0 5
50015: PPUSH
50016: CALL 50058 0 6
50020: GO 50053
50022: LD_INT 304
50024: DOUBLE
50025: EQUAL
50026: IFTRUE 50030
50028: GO 50052
50030: POP
// hHackTeleport ( unit , x , y ) ; end ;
50031: LD_VAR 0 2
50035: PPUSH
50036: LD_VAR 0 4
50040: PPUSH
50041: LD_VAR 0 5
50045: PPUSH
50046: CALL 51817 0 3
50050: GO 50053
50052: POP
// end ;
50053: LD_VAR 0 12
50057: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
50058: LD_INT 0
50060: PPUSH
50061: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
50062: LD_VAR 0 1
50066: PUSH
50067: LD_INT 1
50069: LESS
50070: PUSH
50071: LD_VAR 0 1
50075: PUSH
50076: LD_INT 3
50078: GREATER
50079: OR
50080: PUSH
50081: LD_VAR 0 5
50085: PPUSH
50086: LD_VAR 0 6
50090: PPUSH
50091: CALL_OW 428
50095: OR
50096: IFFALSE 50100
// exit ;
50098: GO 50820
// uc_side := your_side ;
50100: LD_ADDR_OWVAR 20
50104: PUSH
50105: LD_OWVAR 2
50109: ST_TO_ADDR
// uc_nation := nation ;
50110: LD_ADDR_OWVAR 21
50114: PUSH
50115: LD_VAR 0 1
50119: ST_TO_ADDR
// bc_level = 1 ;
50120: LD_ADDR_OWVAR 43
50124: PUSH
50125: LD_INT 1
50127: ST_TO_ADDR
// case btype of 1 :
50128: LD_VAR 0 2
50132: PUSH
50133: LD_INT 1
50135: DOUBLE
50136: EQUAL
50137: IFTRUE 50141
50139: GO 50152
50141: POP
// bc_type := b_depot ; 2 :
50142: LD_ADDR_OWVAR 42
50146: PUSH
50147: LD_INT 0
50149: ST_TO_ADDR
50150: GO 50764
50152: LD_INT 2
50154: DOUBLE
50155: EQUAL
50156: IFTRUE 50160
50158: GO 50171
50160: POP
// bc_type := b_warehouse ; 3 :
50161: LD_ADDR_OWVAR 42
50165: PUSH
50166: LD_INT 1
50168: ST_TO_ADDR
50169: GO 50764
50171: LD_INT 3
50173: DOUBLE
50174: EQUAL
50175: IFTRUE 50179
50177: GO 50190
50179: POP
// bc_type := b_lab ; 4 .. 9 :
50180: LD_ADDR_OWVAR 42
50184: PUSH
50185: LD_INT 6
50187: ST_TO_ADDR
50188: GO 50764
50190: LD_INT 4
50192: DOUBLE
50193: GREATEREQUAL
50194: IFFALSE 50202
50196: LD_INT 9
50198: DOUBLE
50199: LESSEQUAL
50200: IFTRUE 50204
50202: GO 50256
50204: POP
// begin bc_type := b_lab_half ;
50205: LD_ADDR_OWVAR 42
50209: PUSH
50210: LD_INT 7
50212: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
50213: LD_ADDR_OWVAR 44
50217: PUSH
50218: LD_INT 10
50220: PUSH
50221: LD_INT 11
50223: PUSH
50224: LD_INT 12
50226: PUSH
50227: LD_INT 15
50229: PUSH
50230: LD_INT 14
50232: PUSH
50233: LD_INT 13
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: PUSH
50244: LD_VAR 0 2
50248: PUSH
50249: LD_INT 3
50251: MINUS
50252: ARRAY
50253: ST_TO_ADDR
// end ; 10 .. 13 :
50254: GO 50764
50256: LD_INT 10
50258: DOUBLE
50259: GREATEREQUAL
50260: IFFALSE 50268
50262: LD_INT 13
50264: DOUBLE
50265: LESSEQUAL
50266: IFTRUE 50270
50268: GO 50347
50270: POP
// begin bc_type := b_lab_full ;
50271: LD_ADDR_OWVAR 42
50275: PUSH
50276: LD_INT 8
50278: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
50279: LD_ADDR_OWVAR 44
50283: PUSH
50284: LD_INT 10
50286: PUSH
50287: LD_INT 12
50289: PUSH
50290: LD_INT 14
50292: PUSH
50293: LD_INT 13
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: PUSH
50302: LD_VAR 0 2
50306: PUSH
50307: LD_INT 9
50309: MINUS
50310: ARRAY
50311: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
50312: LD_ADDR_OWVAR 45
50316: PUSH
50317: LD_INT 11
50319: PUSH
50320: LD_INT 15
50322: PUSH
50323: LD_INT 12
50325: PUSH
50326: LD_INT 15
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: PUSH
50335: LD_VAR 0 2
50339: PUSH
50340: LD_INT 9
50342: MINUS
50343: ARRAY
50344: ST_TO_ADDR
// end ; 14 :
50345: GO 50764
50347: LD_INT 14
50349: DOUBLE
50350: EQUAL
50351: IFTRUE 50355
50353: GO 50366
50355: POP
// bc_type := b_workshop ; 15 :
50356: LD_ADDR_OWVAR 42
50360: PUSH
50361: LD_INT 2
50363: ST_TO_ADDR
50364: GO 50764
50366: LD_INT 15
50368: DOUBLE
50369: EQUAL
50370: IFTRUE 50374
50372: GO 50385
50374: POP
// bc_type := b_factory ; 16 :
50375: LD_ADDR_OWVAR 42
50379: PUSH
50380: LD_INT 3
50382: ST_TO_ADDR
50383: GO 50764
50385: LD_INT 16
50387: DOUBLE
50388: EQUAL
50389: IFTRUE 50393
50391: GO 50404
50393: POP
// bc_type := b_ext_gun ; 17 :
50394: LD_ADDR_OWVAR 42
50398: PUSH
50399: LD_INT 17
50401: ST_TO_ADDR
50402: GO 50764
50404: LD_INT 17
50406: DOUBLE
50407: EQUAL
50408: IFTRUE 50412
50410: GO 50440
50412: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
50413: LD_ADDR_OWVAR 42
50417: PUSH
50418: LD_INT 19
50420: PUSH
50421: LD_INT 23
50423: PUSH
50424: LD_INT 19
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: LIST
50431: PUSH
50432: LD_VAR 0 1
50436: ARRAY
50437: ST_TO_ADDR
50438: GO 50764
50440: LD_INT 18
50442: DOUBLE
50443: EQUAL
50444: IFTRUE 50448
50446: GO 50459
50448: POP
// bc_type := b_ext_radar ; 19 :
50449: LD_ADDR_OWVAR 42
50453: PUSH
50454: LD_INT 20
50456: ST_TO_ADDR
50457: GO 50764
50459: LD_INT 19
50461: DOUBLE
50462: EQUAL
50463: IFTRUE 50467
50465: GO 50478
50467: POP
// bc_type := b_ext_radio ; 20 :
50468: LD_ADDR_OWVAR 42
50472: PUSH
50473: LD_INT 22
50475: ST_TO_ADDR
50476: GO 50764
50478: LD_INT 20
50480: DOUBLE
50481: EQUAL
50482: IFTRUE 50486
50484: GO 50497
50486: POP
// bc_type := b_ext_siberium ; 21 :
50487: LD_ADDR_OWVAR 42
50491: PUSH
50492: LD_INT 21
50494: ST_TO_ADDR
50495: GO 50764
50497: LD_INT 21
50499: DOUBLE
50500: EQUAL
50501: IFTRUE 50505
50503: GO 50516
50505: POP
// bc_type := b_ext_computer ; 22 :
50506: LD_ADDR_OWVAR 42
50510: PUSH
50511: LD_INT 24
50513: ST_TO_ADDR
50514: GO 50764
50516: LD_INT 22
50518: DOUBLE
50519: EQUAL
50520: IFTRUE 50524
50522: GO 50535
50524: POP
// bc_type := b_ext_track ; 23 :
50525: LD_ADDR_OWVAR 42
50529: PUSH
50530: LD_INT 16
50532: ST_TO_ADDR
50533: GO 50764
50535: LD_INT 23
50537: DOUBLE
50538: EQUAL
50539: IFTRUE 50543
50541: GO 50554
50543: POP
// bc_type := b_ext_laser ; 24 :
50544: LD_ADDR_OWVAR 42
50548: PUSH
50549: LD_INT 25
50551: ST_TO_ADDR
50552: GO 50764
50554: LD_INT 24
50556: DOUBLE
50557: EQUAL
50558: IFTRUE 50562
50560: GO 50573
50562: POP
// bc_type := b_control_tower ; 25 :
50563: LD_ADDR_OWVAR 42
50567: PUSH
50568: LD_INT 36
50570: ST_TO_ADDR
50571: GO 50764
50573: LD_INT 25
50575: DOUBLE
50576: EQUAL
50577: IFTRUE 50581
50579: GO 50592
50581: POP
// bc_type := b_breastwork ; 26 :
50582: LD_ADDR_OWVAR 42
50586: PUSH
50587: LD_INT 31
50589: ST_TO_ADDR
50590: GO 50764
50592: LD_INT 26
50594: DOUBLE
50595: EQUAL
50596: IFTRUE 50600
50598: GO 50611
50600: POP
// bc_type := b_bunker ; 27 :
50601: LD_ADDR_OWVAR 42
50605: PUSH
50606: LD_INT 32
50608: ST_TO_ADDR
50609: GO 50764
50611: LD_INT 27
50613: DOUBLE
50614: EQUAL
50615: IFTRUE 50619
50617: GO 50630
50619: POP
// bc_type := b_turret ; 28 :
50620: LD_ADDR_OWVAR 42
50624: PUSH
50625: LD_INT 33
50627: ST_TO_ADDR
50628: GO 50764
50630: LD_INT 28
50632: DOUBLE
50633: EQUAL
50634: IFTRUE 50638
50636: GO 50649
50638: POP
// bc_type := b_armoury ; 29 :
50639: LD_ADDR_OWVAR 42
50643: PUSH
50644: LD_INT 4
50646: ST_TO_ADDR
50647: GO 50764
50649: LD_INT 29
50651: DOUBLE
50652: EQUAL
50653: IFTRUE 50657
50655: GO 50668
50657: POP
// bc_type := b_barracks ; 30 :
50658: LD_ADDR_OWVAR 42
50662: PUSH
50663: LD_INT 5
50665: ST_TO_ADDR
50666: GO 50764
50668: LD_INT 30
50670: DOUBLE
50671: EQUAL
50672: IFTRUE 50676
50674: GO 50687
50676: POP
// bc_type := b_solar_power ; 31 :
50677: LD_ADDR_OWVAR 42
50681: PUSH
50682: LD_INT 27
50684: ST_TO_ADDR
50685: GO 50764
50687: LD_INT 31
50689: DOUBLE
50690: EQUAL
50691: IFTRUE 50695
50693: GO 50706
50695: POP
// bc_type := b_oil_power ; 32 :
50696: LD_ADDR_OWVAR 42
50700: PUSH
50701: LD_INT 26
50703: ST_TO_ADDR
50704: GO 50764
50706: LD_INT 32
50708: DOUBLE
50709: EQUAL
50710: IFTRUE 50714
50712: GO 50725
50714: POP
// bc_type := b_siberite_power ; 33 :
50715: LD_ADDR_OWVAR 42
50719: PUSH
50720: LD_INT 28
50722: ST_TO_ADDR
50723: GO 50764
50725: LD_INT 33
50727: DOUBLE
50728: EQUAL
50729: IFTRUE 50733
50731: GO 50744
50733: POP
// bc_type := b_oil_mine ; 34 :
50734: LD_ADDR_OWVAR 42
50738: PUSH
50739: LD_INT 29
50741: ST_TO_ADDR
50742: GO 50764
50744: LD_INT 34
50746: DOUBLE
50747: EQUAL
50748: IFTRUE 50752
50750: GO 50763
50752: POP
// bc_type := b_siberite_mine ; end ;
50753: LD_ADDR_OWVAR 42
50757: PUSH
50758: LD_INT 30
50760: ST_TO_ADDR
50761: GO 50764
50763: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
50764: LD_ADDR_VAR 0 8
50768: PUSH
50769: LD_VAR 0 5
50773: PPUSH
50774: LD_VAR 0 6
50778: PPUSH
50779: LD_VAR 0 3
50783: PPUSH
50784: CALL_OW 47
50788: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
50789: LD_OWVAR 42
50793: PUSH
50794: LD_INT 32
50796: PUSH
50797: LD_INT 33
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: IN
50804: IFFALSE 50820
// PlaceWeaponTurret ( b , weapon ) ;
50806: LD_VAR 0 8
50810: PPUSH
50811: LD_VAR 0 4
50815: PPUSH
50816: CALL_OW 431
// end ;
50820: LD_VAR 0 7
50824: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
50825: LD_INT 0
50827: PPUSH
50828: PPUSH
50829: PPUSH
50830: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50831: LD_ADDR_VAR 0 4
50835: PUSH
50836: LD_INT 22
50838: PUSH
50839: LD_OWVAR 2
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: LD_INT 30
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 30
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: LIST
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PPUSH
50880: CALL_OW 69
50884: ST_TO_ADDR
// if not tmp then
50885: LD_VAR 0 4
50889: NOT
50890: IFFALSE 50894
// exit ;
50892: GO 50953
// for i in tmp do
50894: LD_ADDR_VAR 0 2
50898: PUSH
50899: LD_VAR 0 4
50903: PUSH
50904: FOR_IN
50905: IFFALSE 50951
// for j = 1 to 3 do
50907: LD_ADDR_VAR 0 3
50911: PUSH
50912: DOUBLE
50913: LD_INT 1
50915: DEC
50916: ST_TO_ADDR
50917: LD_INT 3
50919: PUSH
50920: FOR_TO
50921: IFFALSE 50947
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
50923: LD_VAR 0 2
50927: PPUSH
50928: CALL_OW 274
50932: PPUSH
50933: LD_VAR 0 3
50937: PPUSH
50938: LD_INT 99999
50940: PPUSH
50941: CALL_OW 277
50945: GO 50920
50947: POP
50948: POP
50949: GO 50904
50951: POP
50952: POP
// end ;
50953: LD_VAR 0 1
50957: RET
// export function hHackSetLevel10 ; var i , j ; begin
50958: LD_INT 0
50960: PPUSH
50961: PPUSH
50962: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
50963: LD_ADDR_VAR 0 2
50967: PUSH
50968: LD_INT 21
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PPUSH
50978: CALL_OW 69
50982: PUSH
50983: FOR_IN
50984: IFFALSE 51036
// if IsSelected ( i ) then
50986: LD_VAR 0 2
50990: PPUSH
50991: CALL_OW 306
50995: IFFALSE 51034
// begin for j := 1 to 4 do
50997: LD_ADDR_VAR 0 3
51001: PUSH
51002: DOUBLE
51003: LD_INT 1
51005: DEC
51006: ST_TO_ADDR
51007: LD_INT 4
51009: PUSH
51010: FOR_TO
51011: IFFALSE 51032
// SetSkill ( i , j , 10 ) ;
51013: LD_VAR 0 2
51017: PPUSH
51018: LD_VAR 0 3
51022: PPUSH
51023: LD_INT 10
51025: PPUSH
51026: CALL_OW 237
51030: GO 51010
51032: POP
51033: POP
// end ;
51034: GO 50983
51036: POP
51037: POP
// end ;
51038: LD_VAR 0 1
51042: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
51043: LD_INT 0
51045: PPUSH
51046: PPUSH
51047: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
51048: LD_ADDR_VAR 0 2
51052: PUSH
51053: LD_INT 22
51055: PUSH
51056: LD_OWVAR 2
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 21
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PPUSH
51079: CALL_OW 69
51083: PUSH
51084: FOR_IN
51085: IFFALSE 51126
// begin for j := 1 to 4 do
51087: LD_ADDR_VAR 0 3
51091: PUSH
51092: DOUBLE
51093: LD_INT 1
51095: DEC
51096: ST_TO_ADDR
51097: LD_INT 4
51099: PUSH
51100: FOR_TO
51101: IFFALSE 51122
// SetSkill ( i , j , 10 ) ;
51103: LD_VAR 0 2
51107: PPUSH
51108: LD_VAR 0 3
51112: PPUSH
51113: LD_INT 10
51115: PPUSH
51116: CALL_OW 237
51120: GO 51100
51122: POP
51123: POP
// end ;
51124: GO 51084
51126: POP
51127: POP
// end ;
51128: LD_VAR 0 1
51132: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
51133: LD_INT 0
51135: PPUSH
// uc_side := your_side ;
51136: LD_ADDR_OWVAR 20
51140: PUSH
51141: LD_OWVAR 2
51145: ST_TO_ADDR
// uc_nation := nation ;
51146: LD_ADDR_OWVAR 21
51150: PUSH
51151: LD_VAR 0 1
51155: ST_TO_ADDR
// InitHc ;
51156: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
51160: LD_INT 0
51162: PPUSH
51163: LD_VAR 0 2
51167: PPUSH
51168: LD_VAR 0 3
51172: PPUSH
51173: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
51177: LD_VAR 0 4
51181: PPUSH
51182: LD_VAR 0 5
51186: PPUSH
51187: CALL_OW 428
51191: PUSH
51192: LD_INT 0
51194: EQUAL
51195: IFFALSE 51219
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
51197: CALL_OW 44
51201: PPUSH
51202: LD_VAR 0 4
51206: PPUSH
51207: LD_VAR 0 5
51211: PPUSH
51212: LD_INT 1
51214: PPUSH
51215: CALL_OW 48
// end ;
51219: LD_VAR 0 6
51223: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
51224: LD_INT 0
51226: PPUSH
51227: PPUSH
// uc_side := your_side ;
51228: LD_ADDR_OWVAR 20
51232: PUSH
51233: LD_OWVAR 2
51237: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
51238: LD_VAR 0 1
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: LD_INT 2
51248: PUSH
51249: LD_INT 3
51251: PUSH
51252: LD_INT 4
51254: PUSH
51255: LD_INT 5
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: IN
51265: IFFALSE 51277
// uc_nation := nation_american else
51267: LD_ADDR_OWVAR 21
51271: PUSH
51272: LD_INT 1
51274: ST_TO_ADDR
51275: GO 51320
// if chassis in [ 11 , 12 , 13 , 14 ] then
51277: LD_VAR 0 1
51281: PUSH
51282: LD_INT 11
51284: PUSH
51285: LD_INT 12
51287: PUSH
51288: LD_INT 13
51290: PUSH
51291: LD_INT 14
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: IN
51300: IFFALSE 51312
// uc_nation := nation_arabian else
51302: LD_ADDR_OWVAR 21
51306: PUSH
51307: LD_INT 2
51309: ST_TO_ADDR
51310: GO 51320
// uc_nation := nation_russian ;
51312: LD_ADDR_OWVAR 21
51316: PUSH
51317: LD_INT 3
51319: ST_TO_ADDR
// vc_chassis := chassis ;
51320: LD_ADDR_OWVAR 37
51324: PUSH
51325: LD_VAR 0 1
51329: ST_TO_ADDR
// vc_engine := engine ;
51330: LD_ADDR_OWVAR 39
51334: PUSH
51335: LD_VAR 0 2
51339: ST_TO_ADDR
// vc_control := control ;
51340: LD_ADDR_OWVAR 38
51344: PUSH
51345: LD_VAR 0 3
51349: ST_TO_ADDR
// vc_weapon := weapon ;
51350: LD_ADDR_OWVAR 40
51354: PUSH
51355: LD_VAR 0 4
51359: ST_TO_ADDR
// un := CreateVehicle ;
51360: LD_ADDR_VAR 0 8
51364: PUSH
51365: CALL_OW 45
51369: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
51370: LD_VAR 0 8
51374: PPUSH
51375: LD_INT 0
51377: PPUSH
51378: LD_INT 5
51380: PPUSH
51381: CALL_OW 12
51385: PPUSH
51386: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
51390: LD_VAR 0 8
51394: PPUSH
51395: LD_VAR 0 5
51399: PPUSH
51400: LD_VAR 0 6
51404: PPUSH
51405: LD_INT 1
51407: PPUSH
51408: CALL_OW 48
// end ;
51412: LD_VAR 0 7
51416: RET
// export hInvincible ; every 1 do
51417: GO 51419
51419: DISABLE
// hInvincible := [ ] ;
51420: LD_ADDR_EXP 82
51424: PUSH
51425: EMPTY
51426: ST_TO_ADDR
51427: END
// every 10 do var i ;
51428: GO 51430
51430: DISABLE
51431: LD_INT 0
51433: PPUSH
// begin enable ;
51434: ENABLE
// if not hInvincible then
51435: LD_EXP 82
51439: NOT
51440: IFFALSE 51444
// exit ;
51442: GO 51488
// for i in hInvincible do
51444: LD_ADDR_VAR 0 1
51448: PUSH
51449: LD_EXP 82
51453: PUSH
51454: FOR_IN
51455: IFFALSE 51486
// if GetLives ( i ) < 1000 then
51457: LD_VAR 0 1
51461: PPUSH
51462: CALL_OW 256
51466: PUSH
51467: LD_INT 1000
51469: LESS
51470: IFFALSE 51484
// SetLives ( i , 1000 ) ;
51472: LD_VAR 0 1
51476: PPUSH
51477: LD_INT 1000
51479: PPUSH
51480: CALL_OW 234
51484: GO 51454
51486: POP
51487: POP
// end ;
51488: PPOPN 1
51490: END
// export function hHackInvincible ; var i ; begin
51491: LD_INT 0
51493: PPUSH
51494: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
51495: LD_ADDR_VAR 0 2
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: LD_INT 21
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 21
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: LIST
51527: PPUSH
51528: CALL_OW 69
51532: PUSH
51533: FOR_IN
51534: IFFALSE 51595
// if IsSelected ( i ) then
51536: LD_VAR 0 2
51540: PPUSH
51541: CALL_OW 306
51545: IFFALSE 51593
// begin if i in hInvincible then
51547: LD_VAR 0 2
51551: PUSH
51552: LD_EXP 82
51556: IN
51557: IFFALSE 51577
// hInvincible := hInvincible diff i else
51559: LD_ADDR_EXP 82
51563: PUSH
51564: LD_EXP 82
51568: PUSH
51569: LD_VAR 0 2
51573: DIFF
51574: ST_TO_ADDR
51575: GO 51593
// hInvincible := hInvincible union i ;
51577: LD_ADDR_EXP 82
51581: PUSH
51582: LD_EXP 82
51586: PUSH
51587: LD_VAR 0 2
51591: UNION
51592: ST_TO_ADDR
// end ;
51593: GO 51533
51595: POP
51596: POP
// end ;
51597: LD_VAR 0 1
51601: RET
// export function hHackInvisible ; var i , j ; begin
51602: LD_INT 0
51604: PPUSH
51605: PPUSH
51606: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
51607: LD_ADDR_VAR 0 2
51611: PUSH
51612: LD_INT 21
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PPUSH
51622: CALL_OW 69
51626: PUSH
51627: FOR_IN
51628: IFFALSE 51652
// if IsSelected ( i ) then
51630: LD_VAR 0 2
51634: PPUSH
51635: CALL_OW 306
51639: IFFALSE 51650
// ComForceInvisible ( i ) ;
51641: LD_VAR 0 2
51645: PPUSH
51646: CALL_OW 496
51650: GO 51627
51652: POP
51653: POP
// end ;
51654: LD_VAR 0 1
51658: RET
// export function hHackChangeYourSide ; begin
51659: LD_INT 0
51661: PPUSH
// if your_side = 8 then
51662: LD_OWVAR 2
51666: PUSH
51667: LD_INT 8
51669: EQUAL
51670: IFFALSE 51682
// your_side := 0 else
51672: LD_ADDR_OWVAR 2
51676: PUSH
51677: LD_INT 0
51679: ST_TO_ADDR
51680: GO 51696
// your_side := your_side + 1 ;
51682: LD_ADDR_OWVAR 2
51686: PUSH
51687: LD_OWVAR 2
51691: PUSH
51692: LD_INT 1
51694: PLUS
51695: ST_TO_ADDR
// end ;
51696: LD_VAR 0 1
51700: RET
// export function hHackChangeUnitSide ; var i , j ; begin
51701: LD_INT 0
51703: PPUSH
51704: PPUSH
51705: PPUSH
// for i in all_units do
51706: LD_ADDR_VAR 0 2
51710: PUSH
51711: LD_OWVAR 3
51715: PUSH
51716: FOR_IN
51717: IFFALSE 51795
// if IsSelected ( i ) then
51719: LD_VAR 0 2
51723: PPUSH
51724: CALL_OW 306
51728: IFFALSE 51793
// begin j := GetSide ( i ) ;
51730: LD_ADDR_VAR 0 3
51734: PUSH
51735: LD_VAR 0 2
51739: PPUSH
51740: CALL_OW 255
51744: ST_TO_ADDR
// if j = 8 then
51745: LD_VAR 0 3
51749: PUSH
51750: LD_INT 8
51752: EQUAL
51753: IFFALSE 51765
// j := 0 else
51755: LD_ADDR_VAR 0 3
51759: PUSH
51760: LD_INT 0
51762: ST_TO_ADDR
51763: GO 51779
// j := j + 1 ;
51765: LD_ADDR_VAR 0 3
51769: PUSH
51770: LD_VAR 0 3
51774: PUSH
51775: LD_INT 1
51777: PLUS
51778: ST_TO_ADDR
// SetSide ( i , j ) ;
51779: LD_VAR 0 2
51783: PPUSH
51784: LD_VAR 0 3
51788: PPUSH
51789: CALL_OW 235
// end ;
51793: GO 51716
51795: POP
51796: POP
// end ;
51797: LD_VAR 0 1
51801: RET
// export function hHackFog ; begin
51802: LD_INT 0
51804: PPUSH
// FogOff ( true ) ;
51805: LD_INT 1
51807: PPUSH
51808: CALL_OW 344
// end ;
51812: LD_VAR 0 1
51816: RET
// export function hHackTeleport ( unit , x , y ) ; begin
51817: LD_INT 0
51819: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
51820: LD_VAR 0 1
51824: PPUSH
51825: LD_VAR 0 2
51829: PPUSH
51830: LD_VAR 0 3
51834: PPUSH
51835: LD_INT 1
51837: PPUSH
51838: LD_INT 1
51840: PPUSH
51841: CALL_OW 483
// CenterOnXY ( x , y ) ;
51845: LD_VAR 0 2
51849: PPUSH
51850: LD_VAR 0 3
51854: PPUSH
51855: CALL_OW 84
// end ; end_of_file end_of_file
51859: LD_VAR 0 4
51863: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
51864: LD_INT 0
51866: PPUSH
51867: PPUSH
51868: PPUSH
51869: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
51870: LD_VAR 0 1
51874: PPUSH
51875: CALL_OW 264
51879: PUSH
51880: LD_EXP 7
51884: EQUAL
51885: IFFALSE 51957
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
51887: LD_INT 68
51889: PPUSH
51890: LD_VAR 0 1
51894: PPUSH
51895: CALL_OW 255
51899: PPUSH
51900: CALL_OW 321
51904: PUSH
51905: LD_INT 2
51907: EQUAL
51908: IFFALSE 51920
// eff := 70 else
51910: LD_ADDR_VAR 0 4
51914: PUSH
51915: LD_INT 70
51917: ST_TO_ADDR
51918: GO 51928
// eff := 30 ;
51920: LD_ADDR_VAR 0 4
51924: PUSH
51925: LD_INT 30
51927: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
51928: LD_VAR 0 1
51932: PPUSH
51933: CALL_OW 250
51937: PPUSH
51938: LD_VAR 0 1
51942: PPUSH
51943: CALL_OW 251
51947: PPUSH
51948: LD_VAR 0 4
51952: PPUSH
51953: CALL_OW 495
// end ; end ;
51957: LD_VAR 0 2
51961: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
51962: LD_INT 0
51964: PPUSH
// end ;
51965: LD_VAR 0 4
51969: RET
// export function SOS_Command ( cmd ) ; begin
51970: LD_INT 0
51972: PPUSH
// end ;
51973: LD_VAR 0 2
51977: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
51978: LD_INT 0
51980: PPUSH
// if cmd = 121 then
51981: LD_VAR 0 1
51985: PUSH
51986: LD_INT 121
51988: EQUAL
51989: IFFALSE 51991
// end ;
51991: LD_VAR 0 6
51995: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
51996: LD_INT 0
51998: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
51999: LD_VAR 0 1
52003: PUSH
52004: LD_INT 250
52006: EQUAL
52007: PUSH
52008: LD_VAR 0 2
52012: PPUSH
52013: CALL_OW 264
52017: PUSH
52018: LD_EXP 10
52022: EQUAL
52023: AND
52024: IFFALSE 52045
// MinerPlaceMine ( unit , x , y ) ;
52026: LD_VAR 0 2
52030: PPUSH
52031: LD_VAR 0 4
52035: PPUSH
52036: LD_VAR 0 5
52040: PPUSH
52041: CALL 54394 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
52045: LD_VAR 0 1
52049: PUSH
52050: LD_INT 251
52052: EQUAL
52053: PUSH
52054: LD_VAR 0 2
52058: PPUSH
52059: CALL_OW 264
52063: PUSH
52064: LD_EXP 10
52068: EQUAL
52069: AND
52070: IFFALSE 52091
// MinerDetonateMine ( unit , x , y ) ;
52072: LD_VAR 0 2
52076: PPUSH
52077: LD_VAR 0 4
52081: PPUSH
52082: LD_VAR 0 5
52086: PPUSH
52087: CALL 54671 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
52091: LD_VAR 0 1
52095: PUSH
52096: LD_INT 252
52098: EQUAL
52099: PUSH
52100: LD_VAR 0 2
52104: PPUSH
52105: CALL_OW 264
52109: PUSH
52110: LD_EXP 10
52114: EQUAL
52115: AND
52116: IFFALSE 52137
// MinerCreateMinefield ( unit , x , y ) ;
52118: LD_VAR 0 2
52122: PPUSH
52123: LD_VAR 0 4
52127: PPUSH
52128: LD_VAR 0 5
52132: PPUSH
52133: CALL 55088 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
52137: LD_VAR 0 1
52141: PUSH
52142: LD_INT 253
52144: EQUAL
52145: PUSH
52146: LD_VAR 0 2
52150: PPUSH
52151: CALL_OW 257
52155: PUSH
52156: LD_INT 5
52158: EQUAL
52159: AND
52160: IFFALSE 52181
// ComBinocular ( unit , x , y ) ;
52162: LD_VAR 0 2
52166: PPUSH
52167: LD_VAR 0 4
52171: PPUSH
52172: LD_VAR 0 5
52176: PPUSH
52177: CALL 55459 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
52181: LD_VAR 0 1
52185: PUSH
52186: LD_INT 254
52188: EQUAL
52189: PUSH
52190: LD_VAR 0 2
52194: PPUSH
52195: CALL_OW 264
52199: PUSH
52200: LD_EXP 5
52204: EQUAL
52205: AND
52206: PUSH
52207: LD_VAR 0 3
52211: PPUSH
52212: CALL_OW 263
52216: PUSH
52217: LD_INT 3
52219: EQUAL
52220: AND
52221: IFFALSE 52237
// HackDestroyVehicle ( unit , selectedUnit ) ;
52223: LD_VAR 0 2
52227: PPUSH
52228: LD_VAR 0 3
52232: PPUSH
52233: CALL 53754 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
52237: LD_VAR 0 1
52241: PUSH
52242: LD_INT 255
52244: EQUAL
52245: PUSH
52246: LD_VAR 0 2
52250: PPUSH
52251: CALL_OW 264
52255: PUSH
52256: LD_INT 14
52258: PUSH
52259: LD_INT 53
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: IN
52266: AND
52267: PUSH
52268: LD_VAR 0 4
52272: PPUSH
52273: LD_VAR 0 5
52277: PPUSH
52278: CALL_OW 488
52282: AND
52283: IFFALSE 52307
// CutTreeXYR ( unit , x , y , 12 ) ;
52285: LD_VAR 0 2
52289: PPUSH
52290: LD_VAR 0 4
52294: PPUSH
52295: LD_VAR 0 5
52299: PPUSH
52300: LD_INT 12
52302: PPUSH
52303: CALL 52320 0 4
// end ;
52307: LD_VAR 0 6
52311: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
52312: LD_INT 0
52314: PPUSH
// end ;
52315: LD_VAR 0 4
52319: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
52320: LD_INT 0
52322: PPUSH
52323: PPUSH
52324: PPUSH
52325: PPUSH
52326: PPUSH
52327: PPUSH
52328: PPUSH
52329: PPUSH
52330: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
52331: LD_VAR 0 1
52335: NOT
52336: PUSH
52337: LD_VAR 0 2
52341: PPUSH
52342: LD_VAR 0 3
52346: PPUSH
52347: CALL_OW 488
52351: NOT
52352: OR
52353: PUSH
52354: LD_VAR 0 4
52358: NOT
52359: OR
52360: IFFALSE 52364
// exit ;
52362: GO 52704
// list := [ ] ;
52364: LD_ADDR_VAR 0 13
52368: PUSH
52369: EMPTY
52370: ST_TO_ADDR
// if x - r < 0 then
52371: LD_VAR 0 2
52375: PUSH
52376: LD_VAR 0 4
52380: MINUS
52381: PUSH
52382: LD_INT 0
52384: LESS
52385: IFFALSE 52397
// min_x := 0 else
52387: LD_ADDR_VAR 0 7
52391: PUSH
52392: LD_INT 0
52394: ST_TO_ADDR
52395: GO 52413
// min_x := x - r ;
52397: LD_ADDR_VAR 0 7
52401: PUSH
52402: LD_VAR 0 2
52406: PUSH
52407: LD_VAR 0 4
52411: MINUS
52412: ST_TO_ADDR
// if y - r < 0 then
52413: LD_VAR 0 3
52417: PUSH
52418: LD_VAR 0 4
52422: MINUS
52423: PUSH
52424: LD_INT 0
52426: LESS
52427: IFFALSE 52439
// min_y := 0 else
52429: LD_ADDR_VAR 0 8
52433: PUSH
52434: LD_INT 0
52436: ST_TO_ADDR
52437: GO 52455
// min_y := y - r ;
52439: LD_ADDR_VAR 0 8
52443: PUSH
52444: LD_VAR 0 3
52448: PUSH
52449: LD_VAR 0 4
52453: MINUS
52454: ST_TO_ADDR
// max_x := x + r ;
52455: LD_ADDR_VAR 0 9
52459: PUSH
52460: LD_VAR 0 2
52464: PUSH
52465: LD_VAR 0 4
52469: PLUS
52470: ST_TO_ADDR
// max_y := y + r ;
52471: LD_ADDR_VAR 0 10
52475: PUSH
52476: LD_VAR 0 3
52480: PUSH
52481: LD_VAR 0 4
52485: PLUS
52486: ST_TO_ADDR
// for _x = min_x to max_x do
52487: LD_ADDR_VAR 0 11
52491: PUSH
52492: DOUBLE
52493: LD_VAR 0 7
52497: DEC
52498: ST_TO_ADDR
52499: LD_VAR 0 9
52503: PUSH
52504: FOR_TO
52505: IFFALSE 52622
// for _y = min_y to max_y do
52507: LD_ADDR_VAR 0 12
52511: PUSH
52512: DOUBLE
52513: LD_VAR 0 8
52517: DEC
52518: ST_TO_ADDR
52519: LD_VAR 0 10
52523: PUSH
52524: FOR_TO
52525: IFFALSE 52618
// begin if not ValidHex ( _x , _y ) then
52527: LD_VAR 0 11
52531: PPUSH
52532: LD_VAR 0 12
52536: PPUSH
52537: CALL_OW 488
52541: NOT
52542: IFFALSE 52546
// continue ;
52544: GO 52524
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
52546: LD_VAR 0 11
52550: PPUSH
52551: LD_VAR 0 12
52555: PPUSH
52556: CALL_OW 351
52560: PUSH
52561: LD_VAR 0 11
52565: PPUSH
52566: LD_VAR 0 12
52570: PPUSH
52571: CALL_OW 554
52575: AND
52576: IFFALSE 52616
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
52578: LD_ADDR_VAR 0 13
52582: PUSH
52583: LD_VAR 0 13
52587: PPUSH
52588: LD_VAR 0 13
52592: PUSH
52593: LD_INT 1
52595: PLUS
52596: PPUSH
52597: LD_VAR 0 11
52601: PUSH
52602: LD_VAR 0 12
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PPUSH
52611: CALL_OW 2
52615: ST_TO_ADDR
// end ;
52616: GO 52524
52618: POP
52619: POP
52620: GO 52504
52622: POP
52623: POP
// if not list then
52624: LD_VAR 0 13
52628: NOT
52629: IFFALSE 52633
// exit ;
52631: GO 52704
// for i in list do
52633: LD_ADDR_VAR 0 6
52637: PUSH
52638: LD_VAR 0 13
52642: PUSH
52643: FOR_IN
52644: IFFALSE 52702
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
52646: LD_VAR 0 1
52650: PPUSH
52651: LD_STRING M
52653: PUSH
52654: LD_VAR 0 6
52658: PUSH
52659: LD_INT 1
52661: ARRAY
52662: PUSH
52663: LD_VAR 0 6
52667: PUSH
52668: LD_INT 2
52670: ARRAY
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: PUSH
52693: EMPTY
52694: LIST
52695: PPUSH
52696: CALL_OW 447
52700: GO 52643
52702: POP
52703: POP
// end ;
52704: LD_VAR 0 5
52708: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
52709: LD_EXP 85
52713: NOT
52714: IFFALSE 52764
52716: GO 52718
52718: DISABLE
// begin initHack := true ;
52719: LD_ADDR_EXP 85
52723: PUSH
52724: LD_INT 1
52726: ST_TO_ADDR
// hackTanks := [ ] ;
52727: LD_ADDR_EXP 86
52731: PUSH
52732: EMPTY
52733: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
52734: LD_ADDR_EXP 87
52738: PUSH
52739: EMPTY
52740: ST_TO_ADDR
// hackLimit := 3 ;
52741: LD_ADDR_EXP 88
52745: PUSH
52746: LD_INT 3
52748: ST_TO_ADDR
// hackDist := 12 ;
52749: LD_ADDR_EXP 89
52753: PUSH
52754: LD_INT 12
52756: ST_TO_ADDR
// hackCounter := [ ] ;
52757: LD_ADDR_EXP 90
52761: PUSH
52762: EMPTY
52763: ST_TO_ADDR
// end ;
52764: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
52765: LD_EXP 85
52769: PUSH
52770: LD_INT 34
52772: PUSH
52773: LD_EXP 5
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PPUSH
52782: CALL_OW 69
52786: AND
52787: IFFALSE 53042
52789: GO 52791
52791: DISABLE
52792: LD_INT 0
52794: PPUSH
52795: PPUSH
// begin enable ;
52796: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
52797: LD_ADDR_VAR 0 1
52801: PUSH
52802: LD_INT 34
52804: PUSH
52805: LD_EXP 5
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PPUSH
52814: CALL_OW 69
52818: PUSH
52819: FOR_IN
52820: IFFALSE 53040
// begin if not i in hackTanks then
52822: LD_VAR 0 1
52826: PUSH
52827: LD_EXP 86
52831: IN
52832: NOT
52833: IFFALSE 52916
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
52835: LD_ADDR_EXP 86
52839: PUSH
52840: LD_EXP 86
52844: PPUSH
52845: LD_EXP 86
52849: PUSH
52850: LD_INT 1
52852: PLUS
52853: PPUSH
52854: LD_VAR 0 1
52858: PPUSH
52859: CALL_OW 1
52863: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
52864: LD_ADDR_EXP 87
52868: PUSH
52869: LD_EXP 87
52873: PPUSH
52874: LD_EXP 87
52878: PUSH
52879: LD_INT 1
52881: PLUS
52882: PPUSH
52883: EMPTY
52884: PPUSH
52885: CALL_OW 1
52889: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
52890: LD_ADDR_EXP 90
52894: PUSH
52895: LD_EXP 90
52899: PPUSH
52900: LD_EXP 90
52904: PUSH
52905: LD_INT 1
52907: PLUS
52908: PPUSH
52909: EMPTY
52910: PPUSH
52911: CALL_OW 1
52915: ST_TO_ADDR
// end ; if not IsOk ( i ) then
52916: LD_VAR 0 1
52920: PPUSH
52921: CALL_OW 302
52925: NOT
52926: IFFALSE 52939
// begin HackUnlinkAll ( i ) ;
52928: LD_VAR 0 1
52932: PPUSH
52933: CALL 53045 0 1
// continue ;
52937: GO 52819
// end ; HackCheckCapturedStatus ( i ) ;
52939: LD_VAR 0 1
52943: PPUSH
52944: CALL 53488 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
52948: LD_ADDR_VAR 0 2
52952: PUSH
52953: LD_INT 81
52955: PUSH
52956: LD_VAR 0 1
52960: PPUSH
52961: CALL_OW 255
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 33
52972: PUSH
52973: LD_INT 3
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 91
52982: PUSH
52983: LD_VAR 0 1
52987: PUSH
52988: LD_EXP 89
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 50
53000: PUSH
53001: EMPTY
53002: LIST
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: PPUSH
53010: CALL_OW 69
53014: ST_TO_ADDR
// if not tmp then
53015: LD_VAR 0 2
53019: NOT
53020: IFFALSE 53024
// continue ;
53022: GO 52819
// HackLink ( i , tmp ) ;
53024: LD_VAR 0 1
53028: PPUSH
53029: LD_VAR 0 2
53033: PPUSH
53034: CALL 53181 0 2
// end ;
53038: GO 52819
53040: POP
53041: POP
// end ;
53042: PPOPN 2
53044: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
53045: LD_INT 0
53047: PPUSH
53048: PPUSH
53049: PPUSH
// if not hack in hackTanks then
53050: LD_VAR 0 1
53054: PUSH
53055: LD_EXP 86
53059: IN
53060: NOT
53061: IFFALSE 53065
// exit ;
53063: GO 53176
// index := GetElementIndex ( hackTanks , hack ) ;
53065: LD_ADDR_VAR 0 4
53069: PUSH
53070: LD_EXP 86
53074: PPUSH
53075: LD_VAR 0 1
53079: PPUSH
53080: CALL 5005 0 2
53084: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
53085: LD_EXP 87
53089: PUSH
53090: LD_VAR 0 4
53094: ARRAY
53095: IFFALSE 53176
// begin for i in hackTanksCaptured [ index ] do
53097: LD_ADDR_VAR 0 3
53101: PUSH
53102: LD_EXP 87
53106: PUSH
53107: LD_VAR 0 4
53111: ARRAY
53112: PUSH
53113: FOR_IN
53114: IFFALSE 53140
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
53116: LD_VAR 0 3
53120: PUSH
53121: LD_INT 1
53123: ARRAY
53124: PPUSH
53125: LD_VAR 0 3
53129: PUSH
53130: LD_INT 2
53132: ARRAY
53133: PPUSH
53134: CALL_OW 235
53138: GO 53113
53140: POP
53141: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
53142: LD_ADDR_EXP 87
53146: PUSH
53147: LD_EXP 87
53151: PPUSH
53152: LD_VAR 0 4
53156: PPUSH
53157: EMPTY
53158: PPUSH
53159: CALL_OW 1
53163: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
53164: LD_VAR 0 1
53168: PPUSH
53169: LD_INT 0
53171: PPUSH
53172: CALL_OW 505
// end ; end ;
53176: LD_VAR 0 2
53180: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
53181: LD_INT 0
53183: PPUSH
53184: PPUSH
53185: PPUSH
// if not hack in hackTanks or not vehicles then
53186: LD_VAR 0 1
53190: PUSH
53191: LD_EXP 86
53195: IN
53196: NOT
53197: PUSH
53198: LD_VAR 0 2
53202: NOT
53203: OR
53204: IFFALSE 53208
// exit ;
53206: GO 53483
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
53208: LD_ADDR_VAR 0 2
53212: PUSH
53213: LD_VAR 0 1
53217: PPUSH
53218: LD_VAR 0 2
53222: PPUSH
53223: LD_INT 1
53225: PPUSH
53226: LD_INT 1
53228: PPUSH
53229: CALL 5655 0 4
53233: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
53234: LD_ADDR_VAR 0 5
53238: PUSH
53239: LD_EXP 86
53243: PPUSH
53244: LD_VAR 0 1
53248: PPUSH
53249: CALL 5005 0 2
53253: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
53254: LD_EXP 87
53258: PUSH
53259: LD_VAR 0 5
53263: ARRAY
53264: PUSH
53265: LD_EXP 88
53269: LESS
53270: IFFALSE 53459
// begin for i := 1 to vehicles do
53272: LD_ADDR_VAR 0 4
53276: PUSH
53277: DOUBLE
53278: LD_INT 1
53280: DEC
53281: ST_TO_ADDR
53282: LD_VAR 0 2
53286: PUSH
53287: FOR_TO
53288: IFFALSE 53457
// begin if hackTanksCaptured [ index ] = hackLimit then
53290: LD_EXP 87
53294: PUSH
53295: LD_VAR 0 5
53299: ARRAY
53300: PUSH
53301: LD_EXP 88
53305: EQUAL
53306: IFFALSE 53310
// break ;
53308: GO 53457
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
53310: LD_ADDR_EXP 90
53314: PUSH
53315: LD_EXP 90
53319: PPUSH
53320: LD_VAR 0 5
53324: PPUSH
53325: LD_EXP 90
53329: PUSH
53330: LD_VAR 0 5
53334: ARRAY
53335: PUSH
53336: LD_INT 1
53338: PLUS
53339: PPUSH
53340: CALL_OW 1
53344: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
53345: LD_ADDR_EXP 87
53349: PUSH
53350: LD_EXP 87
53354: PPUSH
53355: LD_VAR 0 5
53359: PUSH
53360: LD_EXP 87
53364: PUSH
53365: LD_VAR 0 5
53369: ARRAY
53370: PUSH
53371: LD_INT 1
53373: PLUS
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PPUSH
53379: LD_VAR 0 2
53383: PUSH
53384: LD_VAR 0 4
53388: ARRAY
53389: PUSH
53390: LD_VAR 0 2
53394: PUSH
53395: LD_VAR 0 4
53399: ARRAY
53400: PPUSH
53401: CALL_OW 255
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PPUSH
53410: CALL 5220 0 3
53414: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
53415: LD_VAR 0 2
53419: PUSH
53420: LD_VAR 0 4
53424: ARRAY
53425: PPUSH
53426: LD_VAR 0 1
53430: PPUSH
53431: CALL_OW 255
53435: PPUSH
53436: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
53440: LD_VAR 0 2
53444: PUSH
53445: LD_VAR 0 4
53449: ARRAY
53450: PPUSH
53451: CALL_OW 141
// end ;
53455: GO 53287
53457: POP
53458: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
53459: LD_VAR 0 1
53463: PPUSH
53464: LD_EXP 87
53468: PUSH
53469: LD_VAR 0 5
53473: ARRAY
53474: PUSH
53475: LD_INT 0
53477: PLUS
53478: PPUSH
53479: CALL_OW 505
// end ;
53483: LD_VAR 0 3
53487: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
53488: LD_INT 0
53490: PPUSH
53491: PPUSH
53492: PPUSH
53493: PPUSH
// if not hack in hackTanks then
53494: LD_VAR 0 1
53498: PUSH
53499: LD_EXP 86
53503: IN
53504: NOT
53505: IFFALSE 53509
// exit ;
53507: GO 53749
// index := GetElementIndex ( hackTanks , hack ) ;
53509: LD_ADDR_VAR 0 4
53513: PUSH
53514: LD_EXP 86
53518: PPUSH
53519: LD_VAR 0 1
53523: PPUSH
53524: CALL 5005 0 2
53528: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
53529: LD_ADDR_VAR 0 3
53533: PUSH
53534: DOUBLE
53535: LD_EXP 87
53539: PUSH
53540: LD_VAR 0 4
53544: ARRAY
53545: INC
53546: ST_TO_ADDR
53547: LD_INT 1
53549: PUSH
53550: FOR_DOWNTO
53551: IFFALSE 53723
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
53553: LD_ADDR_VAR 0 5
53557: PUSH
53558: LD_EXP 87
53562: PUSH
53563: LD_VAR 0 4
53567: ARRAY
53568: PUSH
53569: LD_VAR 0 3
53573: ARRAY
53574: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
53575: LD_VAR 0 5
53579: PUSH
53580: LD_INT 1
53582: ARRAY
53583: PPUSH
53584: CALL_OW 302
53588: NOT
53589: PUSH
53590: LD_VAR 0 5
53594: PUSH
53595: LD_INT 1
53597: ARRAY
53598: PPUSH
53599: CALL_OW 255
53603: PUSH
53604: LD_VAR 0 1
53608: PPUSH
53609: CALL_OW 255
53613: NONEQUAL
53614: OR
53615: IFFALSE 53721
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
53617: LD_VAR 0 5
53621: PUSH
53622: LD_INT 1
53624: ARRAY
53625: PPUSH
53626: CALL_OW 305
53630: PUSH
53631: LD_VAR 0 5
53635: PUSH
53636: LD_INT 1
53638: ARRAY
53639: PPUSH
53640: CALL_OW 255
53644: PUSH
53645: LD_VAR 0 1
53649: PPUSH
53650: CALL_OW 255
53654: EQUAL
53655: AND
53656: IFFALSE 53680
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
53658: LD_VAR 0 5
53662: PUSH
53663: LD_INT 1
53665: ARRAY
53666: PPUSH
53667: LD_VAR 0 5
53671: PUSH
53672: LD_INT 2
53674: ARRAY
53675: PPUSH
53676: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
53680: LD_ADDR_EXP 87
53684: PUSH
53685: LD_EXP 87
53689: PPUSH
53690: LD_VAR 0 4
53694: PPUSH
53695: LD_EXP 87
53699: PUSH
53700: LD_VAR 0 4
53704: ARRAY
53705: PPUSH
53706: LD_VAR 0 3
53710: PPUSH
53711: CALL_OW 3
53715: PPUSH
53716: CALL_OW 1
53720: ST_TO_ADDR
// end ; end ;
53721: GO 53550
53723: POP
53724: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
53725: LD_VAR 0 1
53729: PPUSH
53730: LD_EXP 87
53734: PUSH
53735: LD_VAR 0 4
53739: ARRAY
53740: PUSH
53741: LD_INT 0
53743: PLUS
53744: PPUSH
53745: CALL_OW 505
// end ;
53749: LD_VAR 0 2
53753: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
53754: LD_INT 0
53756: PPUSH
53757: PPUSH
53758: PPUSH
53759: PPUSH
// if not hack in hackTanks then
53760: LD_VAR 0 1
53764: PUSH
53765: LD_EXP 86
53769: IN
53770: NOT
53771: IFFALSE 53775
// exit ;
53773: GO 53860
// index := GetElementIndex ( hackTanks , hack ) ;
53775: LD_ADDR_VAR 0 5
53779: PUSH
53780: LD_EXP 86
53784: PPUSH
53785: LD_VAR 0 1
53789: PPUSH
53790: CALL 5005 0 2
53794: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
53795: LD_ADDR_VAR 0 4
53799: PUSH
53800: DOUBLE
53801: LD_INT 1
53803: DEC
53804: ST_TO_ADDR
53805: LD_EXP 87
53809: PUSH
53810: LD_VAR 0 5
53814: ARRAY
53815: PUSH
53816: FOR_TO
53817: IFFALSE 53858
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
53819: LD_EXP 87
53823: PUSH
53824: LD_VAR 0 5
53828: ARRAY
53829: PUSH
53830: LD_VAR 0 4
53834: ARRAY
53835: PUSH
53836: LD_INT 1
53838: ARRAY
53839: PUSH
53840: LD_VAR 0 2
53844: EQUAL
53845: IFFALSE 53856
// KillUnit ( vehicle ) ;
53847: LD_VAR 0 2
53851: PPUSH
53852: CALL_OW 66
53856: GO 53816
53858: POP
53859: POP
// end ;
53860: LD_VAR 0 3
53864: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
53865: LD_EXP 91
53869: NOT
53870: IFFALSE 53905
53872: GO 53874
53874: DISABLE
// begin initMiner := true ;
53875: LD_ADDR_EXP 91
53879: PUSH
53880: LD_INT 1
53882: ST_TO_ADDR
// minersList := [ ] ;
53883: LD_ADDR_EXP 92
53887: PUSH
53888: EMPTY
53889: ST_TO_ADDR
// minerMinesList := [ ] ;
53890: LD_ADDR_EXP 93
53894: PUSH
53895: EMPTY
53896: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
53897: LD_ADDR_EXP 94
53901: PUSH
53902: LD_INT 5
53904: ST_TO_ADDR
// end ;
53905: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
53906: LD_EXP 91
53910: PUSH
53911: LD_INT 34
53913: PUSH
53914: LD_EXP 10
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PPUSH
53923: CALL_OW 69
53927: AND
53928: IFFALSE 54391
53930: GO 53932
53932: DISABLE
53933: LD_INT 0
53935: PPUSH
53936: PPUSH
53937: PPUSH
53938: PPUSH
// begin enable ;
53939: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
53940: LD_ADDR_VAR 0 1
53944: PUSH
53945: LD_INT 34
53947: PUSH
53948: LD_EXP 10
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PPUSH
53957: CALL_OW 69
53961: PUSH
53962: FOR_IN
53963: IFFALSE 54035
// begin if not i in minersList then
53965: LD_VAR 0 1
53969: PUSH
53970: LD_EXP 92
53974: IN
53975: NOT
53976: IFFALSE 54033
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
53978: LD_ADDR_EXP 92
53982: PUSH
53983: LD_EXP 92
53987: PPUSH
53988: LD_EXP 92
53992: PUSH
53993: LD_INT 1
53995: PLUS
53996: PPUSH
53997: LD_VAR 0 1
54001: PPUSH
54002: CALL_OW 1
54006: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54007: LD_ADDR_EXP 93
54011: PUSH
54012: LD_EXP 93
54016: PPUSH
54017: LD_EXP 93
54021: PUSH
54022: LD_INT 1
54024: PLUS
54025: PPUSH
54026: EMPTY
54027: PPUSH
54028: CALL_OW 1
54032: ST_TO_ADDR
// end end ;
54033: GO 53962
54035: POP
54036: POP
// for i := minerMinesList downto 1 do
54037: LD_ADDR_VAR 0 1
54041: PUSH
54042: DOUBLE
54043: LD_EXP 93
54047: INC
54048: ST_TO_ADDR
54049: LD_INT 1
54051: PUSH
54052: FOR_DOWNTO
54053: IFFALSE 54389
// begin if IsLive ( minersList [ i ] ) then
54055: LD_EXP 92
54059: PUSH
54060: LD_VAR 0 1
54064: ARRAY
54065: PPUSH
54066: CALL_OW 300
54070: IFFALSE 54098
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
54072: LD_EXP 92
54076: PUSH
54077: LD_VAR 0 1
54081: ARRAY
54082: PPUSH
54083: LD_EXP 93
54087: PUSH
54088: LD_VAR 0 1
54092: ARRAY
54093: PPUSH
54094: CALL_OW 505
// if not minerMinesList [ i ] then
54098: LD_EXP 93
54102: PUSH
54103: LD_VAR 0 1
54107: ARRAY
54108: NOT
54109: IFFALSE 54113
// continue ;
54111: GO 54052
// for j := minerMinesList [ i ] downto 1 do
54113: LD_ADDR_VAR 0 2
54117: PUSH
54118: DOUBLE
54119: LD_EXP 93
54123: PUSH
54124: LD_VAR 0 1
54128: ARRAY
54129: INC
54130: ST_TO_ADDR
54131: LD_INT 1
54133: PUSH
54134: FOR_DOWNTO
54135: IFFALSE 54385
// begin side := GetSide ( minersList [ i ] ) ;
54137: LD_ADDR_VAR 0 3
54141: PUSH
54142: LD_EXP 92
54146: PUSH
54147: LD_VAR 0 1
54151: ARRAY
54152: PPUSH
54153: CALL_OW 255
54157: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
54158: LD_ADDR_VAR 0 4
54162: PUSH
54163: LD_EXP 93
54167: PUSH
54168: LD_VAR 0 1
54172: ARRAY
54173: PUSH
54174: LD_VAR 0 2
54178: ARRAY
54179: PUSH
54180: LD_INT 1
54182: ARRAY
54183: PPUSH
54184: LD_EXP 93
54188: PUSH
54189: LD_VAR 0 1
54193: ARRAY
54194: PUSH
54195: LD_VAR 0 2
54199: ARRAY
54200: PUSH
54201: LD_INT 2
54203: ARRAY
54204: PPUSH
54205: CALL_OW 428
54209: ST_TO_ADDR
// if not tmp then
54210: LD_VAR 0 4
54214: NOT
54215: IFFALSE 54219
// continue ;
54217: GO 54134
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
54219: LD_VAR 0 4
54223: PUSH
54224: LD_INT 81
54226: PUSH
54227: LD_VAR 0 3
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PPUSH
54236: CALL_OW 69
54240: IN
54241: PUSH
54242: LD_EXP 93
54246: PUSH
54247: LD_VAR 0 1
54251: ARRAY
54252: PUSH
54253: LD_VAR 0 2
54257: ARRAY
54258: PUSH
54259: LD_INT 1
54261: ARRAY
54262: PPUSH
54263: LD_EXP 93
54267: PUSH
54268: LD_VAR 0 1
54272: ARRAY
54273: PUSH
54274: LD_VAR 0 2
54278: ARRAY
54279: PUSH
54280: LD_INT 2
54282: ARRAY
54283: PPUSH
54284: CALL_OW 458
54288: AND
54289: IFFALSE 54383
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
54291: LD_EXP 93
54295: PUSH
54296: LD_VAR 0 1
54300: ARRAY
54301: PUSH
54302: LD_VAR 0 2
54306: ARRAY
54307: PUSH
54308: LD_INT 1
54310: ARRAY
54311: PPUSH
54312: LD_EXP 93
54316: PUSH
54317: LD_VAR 0 1
54321: ARRAY
54322: PUSH
54323: LD_VAR 0 2
54327: ARRAY
54328: PUSH
54329: LD_INT 2
54331: ARRAY
54332: PPUSH
54333: LD_VAR 0 3
54337: PPUSH
54338: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
54342: LD_ADDR_EXP 93
54346: PUSH
54347: LD_EXP 93
54351: PPUSH
54352: LD_VAR 0 1
54356: PPUSH
54357: LD_EXP 93
54361: PUSH
54362: LD_VAR 0 1
54366: ARRAY
54367: PPUSH
54368: LD_VAR 0 2
54372: PPUSH
54373: CALL_OW 3
54377: PPUSH
54378: CALL_OW 1
54382: ST_TO_ADDR
// end ; end ;
54383: GO 54134
54385: POP
54386: POP
// end ;
54387: GO 54052
54389: POP
54390: POP
// end ;
54391: PPOPN 4
54393: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
54394: LD_INT 0
54396: PPUSH
54397: PPUSH
// result := false ;
54398: LD_ADDR_VAR 0 4
54402: PUSH
54403: LD_INT 0
54405: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
54406: LD_VAR 0 1
54410: PPUSH
54411: CALL_OW 264
54415: PUSH
54416: LD_EXP 10
54420: EQUAL
54421: NOT
54422: IFFALSE 54426
// exit ;
54424: GO 54666
// index := GetElementIndex ( minersList , unit ) ;
54426: LD_ADDR_VAR 0 5
54430: PUSH
54431: LD_EXP 92
54435: PPUSH
54436: LD_VAR 0 1
54440: PPUSH
54441: CALL 5005 0 2
54445: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
54446: LD_EXP 93
54450: PUSH
54451: LD_VAR 0 5
54455: ARRAY
54456: PUSH
54457: LD_EXP 94
54461: GREATEREQUAL
54462: IFFALSE 54466
// exit ;
54464: GO 54666
// ComMoveXY ( unit , x , y ) ;
54466: LD_VAR 0 1
54470: PPUSH
54471: LD_VAR 0 2
54475: PPUSH
54476: LD_VAR 0 3
54480: PPUSH
54481: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
54485: LD_INT 35
54487: PPUSH
54488: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
54492: LD_VAR 0 1
54496: PPUSH
54497: LD_VAR 0 2
54501: PPUSH
54502: LD_VAR 0 3
54506: PPUSH
54507: CALL 35402 0 3
54511: NOT
54512: PUSH
54513: LD_VAR 0 1
54517: PPUSH
54518: CALL_OW 314
54522: AND
54523: IFFALSE 54527
// exit ;
54525: GO 54666
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
54527: LD_VAR 0 2
54531: PPUSH
54532: LD_VAR 0 3
54536: PPUSH
54537: CALL_OW 428
54541: PUSH
54542: LD_VAR 0 1
54546: EQUAL
54547: PUSH
54548: LD_VAR 0 1
54552: PPUSH
54553: CALL_OW 314
54557: NOT
54558: AND
54559: IFFALSE 54485
// PlaySoundXY ( x , y , PlantMine ) ;
54561: LD_VAR 0 2
54565: PPUSH
54566: LD_VAR 0 3
54570: PPUSH
54571: LD_STRING PlantMine
54573: PPUSH
54574: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
54578: LD_VAR 0 2
54582: PPUSH
54583: LD_VAR 0 3
54587: PPUSH
54588: LD_VAR 0 1
54592: PPUSH
54593: CALL_OW 255
54597: PPUSH
54598: LD_INT 0
54600: PPUSH
54601: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
54605: LD_ADDR_EXP 93
54609: PUSH
54610: LD_EXP 93
54614: PPUSH
54615: LD_VAR 0 5
54619: PUSH
54620: LD_EXP 93
54624: PUSH
54625: LD_VAR 0 5
54629: ARRAY
54630: PUSH
54631: LD_INT 1
54633: PLUS
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PPUSH
54639: LD_VAR 0 2
54643: PUSH
54644: LD_VAR 0 3
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PPUSH
54653: CALL 5220 0 3
54657: ST_TO_ADDR
// result := true ;
54658: LD_ADDR_VAR 0 4
54662: PUSH
54663: LD_INT 1
54665: ST_TO_ADDR
// end ;
54666: LD_VAR 0 4
54670: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
54671: LD_INT 0
54673: PPUSH
54674: PPUSH
54675: PPUSH
// if not unit in minersList then
54676: LD_VAR 0 1
54680: PUSH
54681: LD_EXP 92
54685: IN
54686: NOT
54687: IFFALSE 54691
// exit ;
54689: GO 55083
// index := GetElementIndex ( minersList , unit ) ;
54691: LD_ADDR_VAR 0 6
54695: PUSH
54696: LD_EXP 92
54700: PPUSH
54701: LD_VAR 0 1
54705: PPUSH
54706: CALL 5005 0 2
54710: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
54711: LD_ADDR_VAR 0 5
54715: PUSH
54716: DOUBLE
54717: LD_EXP 93
54721: PUSH
54722: LD_VAR 0 6
54726: ARRAY
54727: INC
54728: ST_TO_ADDR
54729: LD_INT 1
54731: PUSH
54732: FOR_DOWNTO
54733: IFFALSE 54894
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
54735: LD_EXP 93
54739: PUSH
54740: LD_VAR 0 6
54744: ARRAY
54745: PUSH
54746: LD_VAR 0 5
54750: ARRAY
54751: PUSH
54752: LD_INT 1
54754: ARRAY
54755: PUSH
54756: LD_VAR 0 2
54760: EQUAL
54761: PUSH
54762: LD_EXP 93
54766: PUSH
54767: LD_VAR 0 6
54771: ARRAY
54772: PUSH
54773: LD_VAR 0 5
54777: ARRAY
54778: PUSH
54779: LD_INT 2
54781: ARRAY
54782: PUSH
54783: LD_VAR 0 3
54787: EQUAL
54788: AND
54789: IFFALSE 54892
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
54791: LD_EXP 93
54795: PUSH
54796: LD_VAR 0 6
54800: ARRAY
54801: PUSH
54802: LD_VAR 0 5
54806: ARRAY
54807: PUSH
54808: LD_INT 1
54810: ARRAY
54811: PPUSH
54812: LD_EXP 93
54816: PUSH
54817: LD_VAR 0 6
54821: ARRAY
54822: PUSH
54823: LD_VAR 0 5
54827: ARRAY
54828: PUSH
54829: LD_INT 2
54831: ARRAY
54832: PPUSH
54833: LD_VAR 0 1
54837: PPUSH
54838: CALL_OW 255
54842: PPUSH
54843: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
54847: LD_ADDR_EXP 93
54851: PUSH
54852: LD_EXP 93
54856: PPUSH
54857: LD_VAR 0 6
54861: PPUSH
54862: LD_EXP 93
54866: PUSH
54867: LD_VAR 0 6
54871: ARRAY
54872: PPUSH
54873: LD_VAR 0 5
54877: PPUSH
54878: CALL_OW 3
54882: PPUSH
54883: CALL_OW 1
54887: ST_TO_ADDR
// exit ;
54888: POP
54889: POP
54890: GO 55083
// end ; end ;
54892: GO 54732
54894: POP
54895: POP
// for i := minerMinesList [ index ] downto 1 do
54896: LD_ADDR_VAR 0 5
54900: PUSH
54901: DOUBLE
54902: LD_EXP 93
54906: PUSH
54907: LD_VAR 0 6
54911: ARRAY
54912: INC
54913: ST_TO_ADDR
54914: LD_INT 1
54916: PUSH
54917: FOR_DOWNTO
54918: IFFALSE 55081
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
54920: LD_EXP 93
54924: PUSH
54925: LD_VAR 0 6
54929: ARRAY
54930: PUSH
54931: LD_VAR 0 5
54935: ARRAY
54936: PUSH
54937: LD_INT 1
54939: ARRAY
54940: PPUSH
54941: LD_EXP 93
54945: PUSH
54946: LD_VAR 0 6
54950: ARRAY
54951: PUSH
54952: LD_VAR 0 5
54956: ARRAY
54957: PUSH
54958: LD_INT 2
54960: ARRAY
54961: PPUSH
54962: LD_VAR 0 2
54966: PPUSH
54967: LD_VAR 0 3
54971: PPUSH
54972: CALL_OW 298
54976: PUSH
54977: LD_INT 6
54979: LESS
54980: IFFALSE 55079
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
54982: LD_EXP 93
54986: PUSH
54987: LD_VAR 0 6
54991: ARRAY
54992: PUSH
54993: LD_VAR 0 5
54997: ARRAY
54998: PUSH
54999: LD_INT 1
55001: ARRAY
55002: PPUSH
55003: LD_EXP 93
55007: PUSH
55008: LD_VAR 0 6
55012: ARRAY
55013: PUSH
55014: LD_VAR 0 5
55018: ARRAY
55019: PUSH
55020: LD_INT 2
55022: ARRAY
55023: PPUSH
55024: LD_VAR 0 1
55028: PPUSH
55029: CALL_OW 255
55033: PPUSH
55034: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
55038: LD_ADDR_EXP 93
55042: PUSH
55043: LD_EXP 93
55047: PPUSH
55048: LD_VAR 0 6
55052: PPUSH
55053: LD_EXP 93
55057: PUSH
55058: LD_VAR 0 6
55062: ARRAY
55063: PPUSH
55064: LD_VAR 0 5
55068: PPUSH
55069: CALL_OW 3
55073: PPUSH
55074: CALL_OW 1
55078: ST_TO_ADDR
// end ; end ;
55079: GO 54917
55081: POP
55082: POP
// end ;
55083: LD_VAR 0 4
55087: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
55088: LD_INT 0
55090: PPUSH
55091: PPUSH
55092: PPUSH
55093: PPUSH
55094: PPUSH
55095: PPUSH
55096: PPUSH
55097: PPUSH
55098: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
55099: LD_VAR 0 1
55103: PPUSH
55104: CALL_OW 264
55108: PUSH
55109: LD_EXP 10
55113: EQUAL
55114: NOT
55115: PUSH
55116: LD_VAR 0 1
55120: PUSH
55121: LD_EXP 92
55125: IN
55126: NOT
55127: OR
55128: IFFALSE 55132
// exit ;
55130: GO 55454
// index := GetElementIndex ( minersList , unit ) ;
55132: LD_ADDR_VAR 0 6
55136: PUSH
55137: LD_EXP 92
55141: PPUSH
55142: LD_VAR 0 1
55146: PPUSH
55147: CALL 5005 0 2
55151: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
55152: LD_ADDR_VAR 0 8
55156: PUSH
55157: LD_EXP 94
55161: PUSH
55162: LD_EXP 93
55166: PUSH
55167: LD_VAR 0 6
55171: ARRAY
55172: MINUS
55173: ST_TO_ADDR
// if not minesFreeAmount then
55174: LD_VAR 0 8
55178: NOT
55179: IFFALSE 55183
// exit ;
55181: GO 55454
// tmp := [ ] ;
55183: LD_ADDR_VAR 0 7
55187: PUSH
55188: EMPTY
55189: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
55190: LD_ADDR_VAR 0 5
55194: PUSH
55195: DOUBLE
55196: LD_INT 1
55198: DEC
55199: ST_TO_ADDR
55200: LD_VAR 0 8
55204: PUSH
55205: FOR_TO
55206: IFFALSE 55401
// begin _d := rand ( 0 , 5 ) ;
55208: LD_ADDR_VAR 0 11
55212: PUSH
55213: LD_INT 0
55215: PPUSH
55216: LD_INT 5
55218: PPUSH
55219: CALL_OW 12
55223: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
55224: LD_ADDR_VAR 0 12
55228: PUSH
55229: LD_INT 2
55231: PPUSH
55232: LD_INT 6
55234: PPUSH
55235: CALL_OW 12
55239: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
55240: LD_ADDR_VAR 0 9
55244: PUSH
55245: LD_VAR 0 2
55249: PPUSH
55250: LD_VAR 0 11
55254: PPUSH
55255: LD_VAR 0 12
55259: PPUSH
55260: CALL_OW 272
55264: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
55265: LD_ADDR_VAR 0 10
55269: PUSH
55270: LD_VAR 0 3
55274: PPUSH
55275: LD_VAR 0 11
55279: PPUSH
55280: LD_VAR 0 12
55284: PPUSH
55285: CALL_OW 273
55289: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
55290: LD_VAR 0 9
55294: PPUSH
55295: LD_VAR 0 10
55299: PPUSH
55300: CALL_OW 488
55304: PUSH
55305: LD_VAR 0 9
55309: PUSH
55310: LD_VAR 0 10
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_VAR 0 7
55323: IN
55324: NOT
55325: AND
55326: PUSH
55327: LD_VAR 0 9
55331: PPUSH
55332: LD_VAR 0 10
55336: PPUSH
55337: CALL_OW 458
55341: NOT
55342: AND
55343: IFFALSE 55385
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
55345: LD_ADDR_VAR 0 7
55349: PUSH
55350: LD_VAR 0 7
55354: PPUSH
55355: LD_VAR 0 7
55359: PUSH
55360: LD_INT 1
55362: PLUS
55363: PPUSH
55364: LD_VAR 0 9
55368: PUSH
55369: LD_VAR 0 10
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PPUSH
55378: CALL_OW 1
55382: ST_TO_ADDR
55383: GO 55399
// i := i - 1 ;
55385: LD_ADDR_VAR 0 5
55389: PUSH
55390: LD_VAR 0 5
55394: PUSH
55395: LD_INT 1
55397: MINUS
55398: ST_TO_ADDR
// end ;
55399: GO 55205
55401: POP
55402: POP
// for i in tmp do
55403: LD_ADDR_VAR 0 5
55407: PUSH
55408: LD_VAR 0 7
55412: PUSH
55413: FOR_IN
55414: IFFALSE 55452
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
55416: LD_VAR 0 1
55420: PPUSH
55421: LD_VAR 0 5
55425: PUSH
55426: LD_INT 1
55428: ARRAY
55429: PPUSH
55430: LD_VAR 0 5
55434: PUSH
55435: LD_INT 2
55437: ARRAY
55438: PPUSH
55439: CALL 54394 0 3
55443: NOT
55444: IFFALSE 55450
// exit ;
55446: POP
55447: POP
55448: GO 55454
55450: GO 55413
55452: POP
55453: POP
// end ;
55454: LD_VAR 0 4
55458: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
55459: LD_INT 0
55461: PPUSH
55462: PPUSH
55463: PPUSH
55464: PPUSH
55465: PPUSH
55466: PPUSH
55467: PPUSH
// if not GetClass ( unit ) = class_sniper then
55468: LD_VAR 0 1
55472: PPUSH
55473: CALL_OW 257
55477: PUSH
55478: LD_INT 5
55480: EQUAL
55481: NOT
55482: IFFALSE 55486
// exit ;
55484: GO 55874
// dist := 8 ;
55486: LD_ADDR_VAR 0 5
55490: PUSH
55491: LD_INT 8
55493: ST_TO_ADDR
// viewRange := 12 ;
55494: LD_ADDR_VAR 0 7
55498: PUSH
55499: LD_INT 12
55501: ST_TO_ADDR
// side := GetSide ( unit ) ;
55502: LD_ADDR_VAR 0 6
55506: PUSH
55507: LD_VAR 0 1
55511: PPUSH
55512: CALL_OW 255
55516: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
55517: LD_INT 61
55519: PPUSH
55520: LD_VAR 0 6
55524: PPUSH
55525: CALL_OW 321
55529: PUSH
55530: LD_INT 2
55532: EQUAL
55533: IFFALSE 55543
// viewRange := 16 ;
55535: LD_ADDR_VAR 0 7
55539: PUSH
55540: LD_INT 16
55542: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
55543: LD_VAR 0 1
55547: PPUSH
55548: LD_VAR 0 2
55552: PPUSH
55553: LD_VAR 0 3
55557: PPUSH
55558: CALL_OW 297
55562: PUSH
55563: LD_VAR 0 5
55567: GREATER
55568: IFFALSE 55647
// begin ComMoveXY ( unit , x , y ) ;
55570: LD_VAR 0 1
55574: PPUSH
55575: LD_VAR 0 2
55579: PPUSH
55580: LD_VAR 0 3
55584: PPUSH
55585: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
55589: LD_INT 35
55591: PPUSH
55592: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
55596: LD_VAR 0 1
55600: PPUSH
55601: LD_VAR 0 2
55605: PPUSH
55606: LD_VAR 0 3
55610: PPUSH
55611: CALL 35402 0 3
55615: NOT
55616: IFFALSE 55620
// exit ;
55618: GO 55874
// until GetDistUnitXY ( unit , x , y ) < dist ;
55620: LD_VAR 0 1
55624: PPUSH
55625: LD_VAR 0 2
55629: PPUSH
55630: LD_VAR 0 3
55634: PPUSH
55635: CALL_OW 297
55639: PUSH
55640: LD_VAR 0 5
55644: LESS
55645: IFFALSE 55589
// end ; ComTurnXY ( unit , x , y ) ;
55647: LD_VAR 0 1
55651: PPUSH
55652: LD_VAR 0 2
55656: PPUSH
55657: LD_VAR 0 3
55661: PPUSH
55662: CALL_OW 118
// wait ( 5 ) ;
55666: LD_INT 5
55668: PPUSH
55669: CALL_OW 67
// _d := GetDir ( unit ) ;
55673: LD_ADDR_VAR 0 10
55677: PUSH
55678: LD_VAR 0 1
55682: PPUSH
55683: CALL_OW 254
55687: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
55688: LD_ADDR_VAR 0 8
55692: PUSH
55693: LD_VAR 0 1
55697: PPUSH
55698: CALL_OW 250
55702: PPUSH
55703: LD_VAR 0 10
55707: PPUSH
55708: LD_VAR 0 5
55712: PPUSH
55713: CALL_OW 272
55717: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
55718: LD_ADDR_VAR 0 9
55722: PUSH
55723: LD_VAR 0 1
55727: PPUSH
55728: CALL_OW 251
55732: PPUSH
55733: LD_VAR 0 10
55737: PPUSH
55738: LD_VAR 0 5
55742: PPUSH
55743: CALL_OW 273
55747: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55748: LD_VAR 0 8
55752: PPUSH
55753: LD_VAR 0 9
55757: PPUSH
55758: CALL_OW 488
55762: NOT
55763: IFFALSE 55767
// exit ;
55765: GO 55874
// ComAnimCustom ( unit , 1 ) ;
55767: LD_VAR 0 1
55771: PPUSH
55772: LD_INT 1
55774: PPUSH
55775: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
55779: LD_VAR 0 8
55783: PPUSH
55784: LD_VAR 0 9
55788: PPUSH
55789: LD_VAR 0 6
55793: PPUSH
55794: LD_VAR 0 7
55798: PPUSH
55799: CALL_OW 330
// repeat wait ( 1 ) ;
55803: LD_INT 1
55805: PPUSH
55806: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
55810: LD_VAR 0 1
55814: PPUSH
55815: CALL_OW 316
55819: PUSH
55820: LD_VAR 0 1
55824: PPUSH
55825: CALL_OW 314
55829: OR
55830: PUSH
55831: LD_VAR 0 1
55835: PPUSH
55836: CALL_OW 302
55840: NOT
55841: OR
55842: PUSH
55843: LD_VAR 0 1
55847: PPUSH
55848: CALL_OW 301
55852: OR
55853: IFFALSE 55803
// RemoveSeeing ( _x , _y , side ) ;
55855: LD_VAR 0 8
55859: PPUSH
55860: LD_VAR 0 9
55864: PPUSH
55865: LD_VAR 0 6
55869: PPUSH
55870: CALL_OW 331
// end ; end_of_file
55874: LD_VAR 0 4
55878: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55879: LD_VAR 0 1
55883: PUSH
55884: LD_INT 200
55886: DOUBLE
55887: GREATEREQUAL
55888: IFFALSE 55896
55890: LD_INT 299
55892: DOUBLE
55893: LESSEQUAL
55894: IFTRUE 55898
55896: GO 55930
55898: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55899: LD_VAR 0 1
55903: PPUSH
55904: LD_VAR 0 2
55908: PPUSH
55909: LD_VAR 0 3
55913: PPUSH
55914: LD_VAR 0 4
55918: PPUSH
55919: LD_VAR 0 5
55923: PPUSH
55924: CALL 51996 0 5
55928: GO 56007
55930: LD_INT 300
55932: DOUBLE
55933: GREATEREQUAL
55934: IFFALSE 55942
55936: LD_INT 399
55938: DOUBLE
55939: LESSEQUAL
55940: IFTRUE 55944
55942: GO 56006
55944: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55945: LD_VAR 0 1
55949: PPUSH
55950: LD_VAR 0 2
55954: PPUSH
55955: LD_VAR 0 3
55959: PPUSH
55960: LD_VAR 0 4
55964: PPUSH
55965: LD_VAR 0 5
55969: PPUSH
55970: LD_VAR 0 6
55974: PPUSH
55975: LD_VAR 0 7
55979: PPUSH
55980: LD_VAR 0 8
55984: PPUSH
55985: LD_VAR 0 9
55989: PPUSH
55990: LD_VAR 0 10
55994: PPUSH
55995: LD_VAR 0 11
55999: PPUSH
56000: CALL 49884 0 11
56004: GO 56007
56006: POP
// end ;
56007: PPOPN 11
56009: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56010: LD_VAR 0 1
56014: PPUSH
56015: LD_VAR 0 2
56019: PPUSH
56020: LD_VAR 0 3
56024: PPUSH
56025: LD_VAR 0 4
56029: PPUSH
56030: LD_VAR 0 5
56034: PPUSH
56035: CALL 51978 0 5
// end ;
56039: PPOPN 5
56041: END
