// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 116 0 0
// PrepareNature ( 4 , 4 , 12 , 4 , 4 , 1 , 4 , natArea , watArea ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 12
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 4
  22: PPUSH
  23: LD_INT 1
  25: PPUSH
  26: LD_INT 4
  28: PPUSH
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: CALL 34679 0 9
// if gameType = 1 then
  39: LD_EXP 2
  43: PUSH
  44: LD_INT 1
  46: EQUAL
  47: IFFALSE 111
// InitEcoMode ( [ 189 , 97 ] , [ [ 215 , 93 ] , [ 204 , 126 ] ] , [ attacksArea1 , attacksArea2 , attacksArea3 , attacksArea4 , attacksArea5 ] ) else
  49: LD_INT 189
  51: PUSH
  52: LD_INT 97
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: PPUSH
  59: LD_INT 215
  61: PUSH
  62: LD_INT 93
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: PUSH
  69: LD_INT 204
  71: PUSH
  72: LD_INT 126
  74: PUSH
  75: EMPTY
  76: LIST
  77: LIST
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PPUSH
  83: LD_INT 2
  85: PUSH
  86: LD_INT 3
  88: PUSH
  89: LD_INT 4
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 6
  97: PUSH
  98: EMPTY
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: PPUSH
 105: CALL 41455 0 3
 109: GO 115
// InitDefendMode ( ) ;
 111: CALL 165 0 0
// end ;
 115: END
// export debug , gameType ; function Init ; begin
 116: LD_INT 0
 118: PPUSH
// debug := 0 ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// if debug then
 127: LD_EXP 1
 131: IFFALSE 143
// gameType := 1 else
 133: LD_ADDR_EXP 2
 137: PUSH
 138: LD_INT 1
 140: ST_TO_ADDR
 141: GO 160
// gameType := GetMultiplayerSetting ( 50 ) + 1 ;
 143: LD_ADDR_EXP 2
 147: PUSH
 148: LD_INT 50
 150: PPUSH
 151: CALL_OW 426
 155: PUSH
 156: LD_INT 1
 158: PLUS
 159: ST_TO_ADDR
// end ; end_of_file
 160: LD_VAR 0 1
 164: RET
// export function InitDefendMode ( ) ; var buildingsList ; begin
 165: LD_INT 0
 167: PPUSH
 168: PPUSH
// buildingsList := [ [ 91 , 182 , 59 , 3 , 0 , 0 , 45 ] , [ 90 , 185 , 60 , 3 , 0 , 0 , 46 ] , [ 90 , 188 , 62 , 3 , 0 , 0 , 43 ] , [ 73 , 178 , 64 , 2 , 0 , 0 , 0 ] , [ 75 , 182 , 65 , 3 , 0 , 0 , 0 ] , [ 76 , 179 , 68 , 1 , 0 , 0 , 0 ] , [ 69 , 182 , 68 , 2 , 0 , 0 , 0 ] , [ 71 , 186 , 68 , 4 , 0 , 0 , 0 ] , [ 72 , 182 , 72 , 0 , 0 , 0 , 0 ] , [ 91 , 169 , 73 , 1 , 0 , 0 , 46 ] , [ 67 , 209 , 79 , 4 , 0 , 0 , 0 ] , [ 88 , 204 , 87 , 3 , 0 , 0 , 0 ] , [ 91 , 169 , 88 , 1 , 0 , 0 , 43 ] , [ 91 , 169 , 91 , 1 , 0 , 0 , 45 ] , [ 86 , 192 , 92 , 4 , 0 , 0 , 0 ] , [ 88 , 207 , 93 , 2 , 0 , 0 , 0 ] , [ 65 , 194 , 96 , 4 , 0 , 0 , 0 ] , [ 90 , 224 , 96 , 4 , 0 , 0 , 45 ] , [ 86 , 196 , 100 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 100 , 4 , 0 , 0 , 46 ] , [ 88 , 211 , 101 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 103 , 4 , 0 , 0 , 45 ] , [ 67 , 172 , 105 , 1 , 0 , 0 , 0 ] , [ 86 , 185 , 105 , 0 , 0 , 0 , 0 ] , [ 86 , 188 , 107 , 5 , 0 , 0 , 0 ] , [ 86 , 186 , 108 , 3 , 0 , 0 , 0 ] , [ 91 , 172 , 109 , 1 , 0 , 0 , 45 ] , [ 90 , 227 , 119 , 5 , 0 , 0 , 46 ] , [ 91 , 225 , 120 , 5 , 0 , 0 , 45 ] , [ 67 , 226 , 135 , 5 , 0 , 0 , 0 ] ] ;
 169: LD_ADDR_VAR 0 2
 173: PUSH
 174: LD_INT 91
 176: PUSH
 177: LD_INT 182
 179: PUSH
 180: LD_INT 59
 182: PUSH
 183: LD_INT 3
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 45
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 90
 206: PUSH
 207: LD_INT 185
 209: PUSH
 210: LD_INT 60
 212: PUSH
 213: LD_INT 3
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 46
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: PUSH
 234: LD_INT 90
 236: PUSH
 237: LD_INT 188
 239: PUSH
 240: LD_INT 62
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 0
 251: PUSH
 252: LD_INT 43
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 73
 266: PUSH
 267: LD_INT 178
 269: PUSH
 270: LD_INT 64
 272: PUSH
 273: LD_INT 2
 275: PUSH
 276: LD_INT 0
 278: PUSH
 279: LD_INT 0
 281: PUSH
 282: LD_INT 0
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 75
 296: PUSH
 297: LD_INT 182
 299: PUSH
 300: LD_INT 65
 302: PUSH
 303: LD_INT 3
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: LD_INT 0
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: PUSH
 324: LD_INT 76
 326: PUSH
 327: LD_INT 179
 329: PUSH
 330: LD_INT 68
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 0
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 69
 356: PUSH
 357: LD_INT 182
 359: PUSH
 360: LD_INT 68
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 71
 386: PUSH
 387: LD_INT 186
 389: PUSH
 390: LD_INT 68
 392: PUSH
 393: LD_INT 4
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: LD_INT 72
 416: PUSH
 417: LD_INT 182
 419: PUSH
 420: LD_INT 72
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: LD_INT 0
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: PUSH
 444: LD_INT 91
 446: PUSH
 447: LD_INT 169
 449: PUSH
 450: LD_INT 73
 452: PUSH
 453: LD_INT 1
 455: PUSH
 456: LD_INT 0
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 46
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 67
 476: PUSH
 477: LD_INT 209
 479: PUSH
 480: LD_INT 79
 482: PUSH
 483: LD_INT 4
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 88
 506: PUSH
 507: LD_INT 204
 509: PUSH
 510: LD_INT 87
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: LD_INT 0
 518: PUSH
 519: LD_INT 0
 521: PUSH
 522: LD_INT 0
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 91
 536: PUSH
 537: LD_INT 169
 539: PUSH
 540: LD_INT 88
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 0
 551: PUSH
 552: LD_INT 43
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 91
 566: PUSH
 567: LD_INT 169
 569: PUSH
 570: LD_INT 91
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 0
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: LD_INT 45
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 86
 596: PUSH
 597: LD_INT 192
 599: PUSH
 600: LD_INT 92
 602: PUSH
 603: LD_INT 4
 605: PUSH
 606: LD_INT 0
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: LD_INT 0
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_INT 88
 626: PUSH
 627: LD_INT 207
 629: PUSH
 630: LD_INT 93
 632: PUSH
 633: LD_INT 2
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 65
 656: PUSH
 657: LD_INT 194
 659: PUSH
 660: LD_INT 96
 662: PUSH
 663: LD_INT 4
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 90
 686: PUSH
 687: LD_INT 224
 689: PUSH
 690: LD_INT 96
 692: PUSH
 693: LD_INT 4
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 45
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: PUSH
 714: LD_INT 86
 716: PUSH
 717: LD_INT 196
 719: PUSH
 720: LD_INT 100
 722: PUSH
 723: LD_INT 4
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 91
 746: PUSH
 747: LD_INT 228
 749: PUSH
 750: LD_INT 100
 752: PUSH
 753: LD_INT 4
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: LD_INT 0
 761: PUSH
 762: LD_INT 46
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 88
 776: PUSH
 777: LD_INT 211
 779: PUSH
 780: LD_INT 101
 782: PUSH
 783: LD_INT 4
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 0
 791: PUSH
 792: LD_INT 0
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 91
 806: PUSH
 807: LD_INT 228
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 4
 815: PUSH
 816: LD_INT 0
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 45
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 67
 836: PUSH
 837: LD_INT 172
 839: PUSH
 840: LD_INT 105
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 0
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 86
 866: PUSH
 867: LD_INT 185
 869: PUSH
 870: LD_INT 105
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: LD_INT 0
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 86
 896: PUSH
 897: LD_INT 188
 899: PUSH
 900: LD_INT 107
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: LD_INT 0
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 86
 926: PUSH
 927: LD_INT 186
 929: PUSH
 930: LD_INT 108
 932: PUSH
 933: LD_INT 3
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 91
 956: PUSH
 957: LD_INT 172
 959: PUSH
 960: LD_INT 109
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 0
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 45
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 227
 989: PUSH
 990: LD_INT 119
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 0
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 46
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 91
1016: PUSH
1017: LD_INT 225
1019: PUSH
1020: LD_INT 120
1022: PUSH
1023: LD_INT 5
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: LD_INT 45
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_INT 67
1046: PUSH
1047: LD_INT 226
1049: PUSH
1050: LD_INT 135
1052: PUSH
1053: LD_INT 5
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: ST_TO_ADDR
// end ; end_of_file
1106: LD_VAR 0 1
1110: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
1111: LD_VAR 0 1
1115: PPUSH
1116: LD_VAR 0 2
1120: PPUSH
1121: CALL 58654 0 2
// end ;
1125: PPOPN 2
1127: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
1128: LD_VAR 0 1
1132: PPUSH
1133: CALL 58532 0 1
// end ; end_of_file
1137: PPOPN 1
1139: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
1140: LD_INT 0
1142: PPUSH
// ar_miner := 81 ;
1143: LD_ADDR_EXP 10
1147: PUSH
1148: LD_INT 81
1150: ST_TO_ADDR
// ar_crane := 88 ;
1151: LD_ADDR_EXP 9
1155: PUSH
1156: LD_INT 88
1158: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
1159: LD_ADDR_EXP 4
1163: PUSH
1164: LD_INT 89
1166: ST_TO_ADDR
// us_hack := 99 ;
1167: LD_ADDR_EXP 5
1171: PUSH
1172: LD_INT 99
1174: ST_TO_ADDR
// us_artillery := 97 ;
1175: LD_ADDR_EXP 6
1179: PUSH
1180: LD_INT 97
1182: ST_TO_ADDR
// ar_bio_bomb := 91 ;
1183: LD_ADDR_EXP 7
1187: PUSH
1188: LD_INT 91
1190: ST_TO_ADDR
// ar_mortar := 92 ;
1191: LD_ADDR_EXP 8
1195: PUSH
1196: LD_INT 92
1198: ST_TO_ADDR
// ru_flamethrower := 93 ;
1199: LD_ADDR_EXP 11
1203: PUSH
1204: LD_INT 93
1206: ST_TO_ADDR
// ru_radar := 98 ;
1207: LD_ADDR_EXP 3
1211: PUSH
1212: LD_INT 98
1214: ST_TO_ADDR
// tech_Artillery := 80 ;
1215: LD_ADDR_EXP 12
1219: PUSH
1220: LD_INT 80
1222: ST_TO_ADDR
// tech_RadMat := 81 ;
1223: LD_ADDR_EXP 13
1227: PUSH
1228: LD_INT 81
1230: ST_TO_ADDR
// tech_BasicTools := 82 ;
1231: LD_ADDR_EXP 14
1235: PUSH
1236: LD_INT 82
1238: ST_TO_ADDR
// tech_Cargo := 83 ;
1239: LD_ADDR_EXP 15
1243: PUSH
1244: LD_INT 83
1246: ST_TO_ADDR
// tech_Track := 84 ;
1247: LD_ADDR_EXP 16
1251: PUSH
1252: LD_INT 84
1254: ST_TO_ADDR
// tech_Crane := 85 ;
1255: LD_ADDR_EXP 17
1259: PUSH
1260: LD_INT 85
1262: ST_TO_ADDR
// tech_Bulldozer := 86 ;
1263: LD_ADDR_EXP 18
1267: PUSH
1268: LD_INT 86
1270: ST_TO_ADDR
// tech_Hovercraft := 87 ;
1271: LD_ADDR_EXP 19
1275: PUSH
1276: LD_INT 87
1278: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
1279: LD_ADDR_EXP 20
1283: PUSH
1284: LD_INT 88
1286: ST_TO_ADDR
// class_mastodont := 31 ;
1287: LD_ADDR_EXP 21
1291: PUSH
1292: LD_INT 31
1294: ST_TO_ADDR
// class_horse := 21 ;
1295: LD_ADDR_EXP 22
1299: PUSH
1300: LD_INT 21
1302: ST_TO_ADDR
// end ;
1303: LD_VAR 0 1
1307: RET
// every 1 do
1308: GO 1310
1310: DISABLE
// InitGlobalVariables ; end_of_file
1311: CALL 1140 0 0
1315: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1316: LD_INT 0
1318: PPUSH
1319: PPUSH
// if exist_mode then
1320: LD_VAR 0 2
1324: IFFALSE 1349
// unit := CreateCharacter ( prefix & ident ) else
1326: LD_ADDR_VAR 0 5
1330: PUSH
1331: LD_VAR 0 3
1335: PUSH
1336: LD_VAR 0 1
1340: STR
1341: PPUSH
1342: CALL_OW 34
1346: ST_TO_ADDR
1347: GO 1364
// unit := NewCharacter ( ident ) ;
1349: LD_ADDR_VAR 0 5
1353: PUSH
1354: LD_VAR 0 1
1358: PPUSH
1359: CALL_OW 25
1363: ST_TO_ADDR
// result := unit ;
1364: LD_ADDR_VAR 0 4
1368: PUSH
1369: LD_VAR 0 5
1373: ST_TO_ADDR
// end ;
1374: LD_VAR 0 4
1378: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1379: LD_INT 0
1381: PPUSH
1382: PPUSH
// if not side or not nation then
1383: LD_VAR 0 1
1387: NOT
1388: PUSH
1389: LD_VAR 0 2
1393: NOT
1394: OR
1395: IFFALSE 1399
// exit ;
1397: GO 2167
// case nation of nation_american :
1399: LD_VAR 0 2
1403: PUSH
1404: LD_INT 1
1406: DOUBLE
1407: EQUAL
1408: IFTRUE 1412
1410: GO 1626
1412: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1413: LD_ADDR_VAR 0 4
1417: PUSH
1418: LD_INT 35
1420: PUSH
1421: LD_INT 45
1423: PUSH
1424: LD_INT 46
1426: PUSH
1427: LD_INT 47
1429: PUSH
1430: LD_INT 82
1432: PUSH
1433: LD_INT 83
1435: PUSH
1436: LD_INT 84
1438: PUSH
1439: LD_INT 85
1441: PUSH
1442: LD_INT 86
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 2
1450: PUSH
1451: LD_INT 6
1453: PUSH
1454: LD_INT 15
1456: PUSH
1457: LD_INT 16
1459: PUSH
1460: LD_INT 7
1462: PUSH
1463: LD_INT 12
1465: PUSH
1466: LD_INT 13
1468: PUSH
1469: LD_INT 10
1471: PUSH
1472: LD_INT 14
1474: PUSH
1475: LD_INT 20
1477: PUSH
1478: LD_INT 21
1480: PUSH
1481: LD_INT 22
1483: PUSH
1484: LD_INT 25
1486: PUSH
1487: LD_INT 32
1489: PUSH
1490: LD_INT 27
1492: PUSH
1493: LD_INT 36
1495: PUSH
1496: LD_INT 69
1498: PUSH
1499: LD_INT 39
1501: PUSH
1502: LD_INT 34
1504: PUSH
1505: LD_INT 40
1507: PUSH
1508: LD_INT 48
1510: PUSH
1511: LD_INT 49
1513: PUSH
1514: LD_INT 50
1516: PUSH
1517: LD_INT 51
1519: PUSH
1520: LD_INT 52
1522: PUSH
1523: LD_INT 53
1525: PUSH
1526: LD_INT 54
1528: PUSH
1529: LD_INT 55
1531: PUSH
1532: LD_INT 56
1534: PUSH
1535: LD_INT 57
1537: PUSH
1538: LD_INT 58
1540: PUSH
1541: LD_INT 59
1543: PUSH
1544: LD_INT 60
1546: PUSH
1547: LD_INT 61
1549: PUSH
1550: LD_INT 62
1552: PUSH
1553: LD_INT 80
1555: PUSH
1556: LD_INT 82
1558: PUSH
1559: LD_INT 83
1561: PUSH
1562: LD_INT 84
1564: PUSH
1565: LD_INT 85
1567: PUSH
1568: LD_INT 86
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: ST_TO_ADDR
1624: GO 2091
1626: LD_INT 2
1628: DOUBLE
1629: EQUAL
1630: IFTRUE 1634
1632: GO 1860
1634: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1635: LD_ADDR_VAR 0 4
1639: PUSH
1640: LD_INT 35
1642: PUSH
1643: LD_INT 45
1645: PUSH
1646: LD_INT 46
1648: PUSH
1649: LD_INT 47
1651: PUSH
1652: LD_INT 82
1654: PUSH
1655: LD_INT 83
1657: PUSH
1658: LD_INT 84
1660: PUSH
1661: LD_INT 85
1663: PUSH
1664: LD_INT 87
1666: PUSH
1667: LD_INT 70
1669: PUSH
1670: LD_INT 1
1672: PUSH
1673: LD_INT 11
1675: PUSH
1676: LD_INT 3
1678: PUSH
1679: LD_INT 4
1681: PUSH
1682: LD_INT 5
1684: PUSH
1685: LD_INT 6
1687: PUSH
1688: LD_INT 15
1690: PUSH
1691: LD_INT 18
1693: PUSH
1694: LD_INT 7
1696: PUSH
1697: LD_INT 17
1699: PUSH
1700: LD_INT 8
1702: PUSH
1703: LD_INT 20
1705: PUSH
1706: LD_INT 21
1708: PUSH
1709: LD_INT 22
1711: PUSH
1712: LD_INT 72
1714: PUSH
1715: LD_INT 26
1717: PUSH
1718: LD_INT 69
1720: PUSH
1721: LD_INT 39
1723: PUSH
1724: LD_INT 40
1726: PUSH
1727: LD_INT 41
1729: PUSH
1730: LD_INT 42
1732: PUSH
1733: LD_INT 43
1735: PUSH
1736: LD_INT 48
1738: PUSH
1739: LD_INT 49
1741: PUSH
1742: LD_INT 50
1744: PUSH
1745: LD_INT 51
1747: PUSH
1748: LD_INT 52
1750: PUSH
1751: LD_INT 53
1753: PUSH
1754: LD_INT 54
1756: PUSH
1757: LD_INT 55
1759: PUSH
1760: LD_INT 56
1762: PUSH
1763: LD_INT 60
1765: PUSH
1766: LD_INT 61
1768: PUSH
1769: LD_INT 62
1771: PUSH
1772: LD_INT 66
1774: PUSH
1775: LD_INT 67
1777: PUSH
1778: LD_INT 68
1780: PUSH
1781: LD_INT 81
1783: PUSH
1784: LD_INT 82
1786: PUSH
1787: LD_INT 83
1789: PUSH
1790: LD_INT 84
1792: PUSH
1793: LD_INT 85
1795: PUSH
1796: LD_INT 87
1798: PUSH
1799: LD_INT 88
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: ST_TO_ADDR
1858: GO 2091
1860: LD_INT 3
1862: DOUBLE
1863: EQUAL
1864: IFTRUE 1868
1866: GO 2090
1868: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1869: LD_ADDR_VAR 0 4
1873: PUSH
1874: LD_INT 46
1876: PUSH
1877: LD_INT 47
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 2
1885: PUSH
1886: LD_INT 82
1888: PUSH
1889: LD_INT 83
1891: PUSH
1892: LD_INT 84
1894: PUSH
1895: LD_INT 85
1897: PUSH
1898: LD_INT 86
1900: PUSH
1901: LD_INT 11
1903: PUSH
1904: LD_INT 9
1906: PUSH
1907: LD_INT 20
1909: PUSH
1910: LD_INT 19
1912: PUSH
1913: LD_INT 21
1915: PUSH
1916: LD_INT 24
1918: PUSH
1919: LD_INT 22
1921: PUSH
1922: LD_INT 25
1924: PUSH
1925: LD_INT 28
1927: PUSH
1928: LD_INT 29
1930: PUSH
1931: LD_INT 30
1933: PUSH
1934: LD_INT 31
1936: PUSH
1937: LD_INT 37
1939: PUSH
1940: LD_INT 38
1942: PUSH
1943: LD_INT 32
1945: PUSH
1946: LD_INT 27
1948: PUSH
1949: LD_INT 33
1951: PUSH
1952: LD_INT 69
1954: PUSH
1955: LD_INT 39
1957: PUSH
1958: LD_INT 34
1960: PUSH
1961: LD_INT 40
1963: PUSH
1964: LD_INT 71
1966: PUSH
1967: LD_INT 23
1969: PUSH
1970: LD_INT 44
1972: PUSH
1973: LD_INT 48
1975: PUSH
1976: LD_INT 49
1978: PUSH
1979: LD_INT 50
1981: PUSH
1982: LD_INT 51
1984: PUSH
1985: LD_INT 52
1987: PUSH
1988: LD_INT 53
1990: PUSH
1991: LD_INT 54
1993: PUSH
1994: LD_INT 55
1996: PUSH
1997: LD_INT 56
1999: PUSH
2000: LD_INT 57
2002: PUSH
2003: LD_INT 58
2005: PUSH
2006: LD_INT 59
2008: PUSH
2009: LD_INT 63
2011: PUSH
2012: LD_INT 64
2014: PUSH
2015: LD_INT 65
2017: PUSH
2018: LD_INT 82
2020: PUSH
2021: LD_INT 83
2023: PUSH
2024: LD_INT 84
2026: PUSH
2027: LD_INT 85
2029: PUSH
2030: LD_INT 86
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: ST_TO_ADDR
2088: GO 2091
2090: POP
// if state > - 1 and state < 3 then
2091: LD_VAR 0 3
2095: PUSH
2096: LD_INT 1
2098: NEG
2099: GREATER
2100: PUSH
2101: LD_VAR 0 3
2105: PUSH
2106: LD_INT 3
2108: LESS
2109: AND
2110: IFFALSE 2167
// for i in result do
2112: LD_ADDR_VAR 0 5
2116: PUSH
2117: LD_VAR 0 4
2121: PUSH
2122: FOR_IN
2123: IFFALSE 2165
// if GetTech ( i , side ) <> state then
2125: LD_VAR 0 5
2129: PPUSH
2130: LD_VAR 0 1
2134: PPUSH
2135: CALL_OW 321
2139: PUSH
2140: LD_VAR 0 3
2144: NONEQUAL
2145: IFFALSE 2163
// result := result diff i ;
2147: LD_ADDR_VAR 0 4
2151: PUSH
2152: LD_VAR 0 4
2156: PUSH
2157: LD_VAR 0 5
2161: DIFF
2162: ST_TO_ADDR
2163: GO 2122
2165: POP
2166: POP
// end ;
2167: LD_VAR 0 4
2171: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2172: LD_INT 0
2174: PPUSH
2175: PPUSH
2176: PPUSH
// result := true ;
2177: LD_ADDR_VAR 0 3
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2185: LD_ADDR_VAR 0 5
2189: PUSH
2190: LD_VAR 0 2
2194: PPUSH
2195: CALL_OW 480
2199: ST_TO_ADDR
// if not tmp then
2200: LD_VAR 0 5
2204: NOT
2205: IFFALSE 2209
// exit ;
2207: GO 2258
// for i in tmp do
2209: LD_ADDR_VAR 0 4
2213: PUSH
2214: LD_VAR 0 5
2218: PUSH
2219: FOR_IN
2220: IFFALSE 2256
// if GetTech ( i , side ) <> state_researched then
2222: LD_VAR 0 4
2226: PPUSH
2227: LD_VAR 0 1
2231: PPUSH
2232: CALL_OW 321
2236: PUSH
2237: LD_INT 2
2239: NONEQUAL
2240: IFFALSE 2254
// begin result := false ;
2242: LD_ADDR_VAR 0 3
2246: PUSH
2247: LD_INT 0
2249: ST_TO_ADDR
// exit ;
2250: POP
2251: POP
2252: GO 2258
// end ;
2254: GO 2219
2256: POP
2257: POP
// end ;
2258: LD_VAR 0 3
2262: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2263: LD_INT 0
2265: PPUSH
2266: PPUSH
2267: PPUSH
2268: PPUSH
2269: PPUSH
2270: PPUSH
2271: PPUSH
2272: PPUSH
2273: PPUSH
2274: PPUSH
2275: PPUSH
2276: PPUSH
2277: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2278: LD_VAR 0 1
2282: NOT
2283: PUSH
2284: LD_VAR 0 1
2288: PPUSH
2289: CALL_OW 257
2293: PUSH
2294: LD_INT 9
2296: NONEQUAL
2297: OR
2298: IFFALSE 2302
// exit ;
2300: GO 2875
// side := GetSide ( unit ) ;
2302: LD_ADDR_VAR 0 9
2306: PUSH
2307: LD_VAR 0 1
2311: PPUSH
2312: CALL_OW 255
2316: ST_TO_ADDR
// tech_space := tech_spacanom ;
2317: LD_ADDR_VAR 0 12
2321: PUSH
2322: LD_INT 29
2324: ST_TO_ADDR
// tech_time := tech_taurad ;
2325: LD_ADDR_VAR 0 13
2329: PUSH
2330: LD_INT 28
2332: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2333: LD_ADDR_VAR 0 11
2337: PUSH
2338: LD_VAR 0 1
2342: PPUSH
2343: CALL_OW 310
2347: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2348: LD_VAR 0 11
2352: PPUSH
2353: CALL_OW 247
2357: PUSH
2358: LD_INT 2
2360: EQUAL
2361: IFFALSE 2365
// exit ;
2363: GO 2875
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2365: LD_ADDR_VAR 0 8
2369: PUSH
2370: LD_INT 81
2372: PUSH
2373: LD_VAR 0 9
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 3
2384: PUSH
2385: LD_INT 21
2387: PUSH
2388: LD_INT 3
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: PPUSH
2403: CALL_OW 69
2407: ST_TO_ADDR
// if not tmp then
2408: LD_VAR 0 8
2412: NOT
2413: IFFALSE 2417
// exit ;
2415: GO 2875
// if in_unit then
2417: LD_VAR 0 11
2421: IFFALSE 2445
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2423: LD_ADDR_VAR 0 10
2427: PUSH
2428: LD_VAR 0 8
2432: PPUSH
2433: LD_VAR 0 11
2437: PPUSH
2438: CALL_OW 74
2442: ST_TO_ADDR
2443: GO 2465
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2445: LD_ADDR_VAR 0 10
2449: PUSH
2450: LD_VAR 0 8
2454: PPUSH
2455: LD_VAR 0 1
2459: PPUSH
2460: CALL_OW 74
2464: ST_TO_ADDR
// if not enemy then
2465: LD_VAR 0 10
2469: NOT
2470: IFFALSE 2474
// exit ;
2472: GO 2875
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2474: LD_VAR 0 11
2478: PUSH
2479: LD_VAR 0 11
2483: PPUSH
2484: LD_VAR 0 10
2488: PPUSH
2489: CALL_OW 296
2493: PUSH
2494: LD_INT 13
2496: GREATER
2497: AND
2498: PUSH
2499: LD_VAR 0 1
2503: PPUSH
2504: LD_VAR 0 10
2508: PPUSH
2509: CALL_OW 296
2513: PUSH
2514: LD_INT 12
2516: GREATER
2517: OR
2518: IFFALSE 2522
// exit ;
2520: GO 2875
// missile := [ 1 ] ;
2522: LD_ADDR_VAR 0 14
2526: PUSH
2527: LD_INT 1
2529: PUSH
2530: EMPTY
2531: LIST
2532: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2533: LD_VAR 0 9
2537: PPUSH
2538: LD_VAR 0 12
2542: PPUSH
2543: CALL_OW 325
2547: IFFALSE 2576
// missile := Replace ( missile , missile + 1 , 2 ) ;
2549: LD_ADDR_VAR 0 14
2553: PUSH
2554: LD_VAR 0 14
2558: PPUSH
2559: LD_VAR 0 14
2563: PUSH
2564: LD_INT 1
2566: PLUS
2567: PPUSH
2568: LD_INT 2
2570: PPUSH
2571: CALL_OW 1
2575: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2576: LD_VAR 0 9
2580: PPUSH
2581: LD_VAR 0 13
2585: PPUSH
2586: CALL_OW 325
2590: PUSH
2591: LD_VAR 0 10
2595: PPUSH
2596: CALL_OW 255
2600: PPUSH
2601: LD_VAR 0 13
2605: PPUSH
2606: CALL_OW 325
2610: NOT
2611: AND
2612: IFFALSE 2641
// missile := Replace ( missile , missile + 1 , 3 ) ;
2614: LD_ADDR_VAR 0 14
2618: PUSH
2619: LD_VAR 0 14
2623: PPUSH
2624: LD_VAR 0 14
2628: PUSH
2629: LD_INT 1
2631: PLUS
2632: PPUSH
2633: LD_INT 3
2635: PPUSH
2636: CALL_OW 1
2640: ST_TO_ADDR
// if missile < 2 then
2641: LD_VAR 0 14
2645: PUSH
2646: LD_INT 2
2648: LESS
2649: IFFALSE 2653
// exit ;
2651: GO 2875
// x := GetX ( enemy ) ;
2653: LD_ADDR_VAR 0 4
2657: PUSH
2658: LD_VAR 0 10
2662: PPUSH
2663: CALL_OW 250
2667: ST_TO_ADDR
// y := GetY ( enemy ) ;
2668: LD_ADDR_VAR 0 5
2672: PUSH
2673: LD_VAR 0 10
2677: PPUSH
2678: CALL_OW 251
2682: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2683: LD_ADDR_VAR 0 6
2687: PUSH
2688: LD_VAR 0 4
2692: PUSH
2693: LD_INT 1
2695: NEG
2696: PPUSH
2697: LD_INT 1
2699: PPUSH
2700: CALL_OW 12
2704: PLUS
2705: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2706: LD_ADDR_VAR 0 7
2710: PUSH
2711: LD_VAR 0 5
2715: PUSH
2716: LD_INT 1
2718: NEG
2719: PPUSH
2720: LD_INT 1
2722: PPUSH
2723: CALL_OW 12
2727: PLUS
2728: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2729: LD_VAR 0 6
2733: PPUSH
2734: LD_VAR 0 7
2738: PPUSH
2739: CALL_OW 488
2743: NOT
2744: IFFALSE 2766
// begin _x := x ;
2746: LD_ADDR_VAR 0 6
2750: PUSH
2751: LD_VAR 0 4
2755: ST_TO_ADDR
// _y := y ;
2756: LD_ADDR_VAR 0 7
2760: PUSH
2761: LD_VAR 0 5
2765: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2766: LD_ADDR_VAR 0 3
2770: PUSH
2771: LD_INT 1
2773: PPUSH
2774: LD_VAR 0 14
2778: PPUSH
2779: CALL_OW 12
2783: ST_TO_ADDR
// case i of 1 :
2784: LD_VAR 0 3
2788: PUSH
2789: LD_INT 1
2791: DOUBLE
2792: EQUAL
2793: IFTRUE 2797
2795: GO 2814
2797: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2798: LD_VAR 0 1
2802: PPUSH
2803: LD_VAR 0 10
2807: PPUSH
2808: CALL_OW 115
2812: GO 2875
2814: LD_INT 2
2816: DOUBLE
2817: EQUAL
2818: IFTRUE 2822
2820: GO 2844
2822: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2823: LD_VAR 0 1
2827: PPUSH
2828: LD_VAR 0 6
2832: PPUSH
2833: LD_VAR 0 7
2837: PPUSH
2838: CALL_OW 153
2842: GO 2875
2844: LD_INT 3
2846: DOUBLE
2847: EQUAL
2848: IFTRUE 2852
2850: GO 2874
2852: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2853: LD_VAR 0 1
2857: PPUSH
2858: LD_VAR 0 6
2862: PPUSH
2863: LD_VAR 0 7
2867: PPUSH
2868: CALL_OW 154
2872: GO 2875
2874: POP
// end ;
2875: LD_VAR 0 2
2879: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2880: LD_INT 0
2882: PPUSH
2883: PPUSH
2884: PPUSH
2885: PPUSH
2886: PPUSH
2887: PPUSH
// if not unit or not building then
2888: LD_VAR 0 1
2892: NOT
2893: PUSH
2894: LD_VAR 0 2
2898: NOT
2899: OR
2900: IFFALSE 2904
// exit ;
2902: GO 3062
// x := GetX ( building ) ;
2904: LD_ADDR_VAR 0 5
2908: PUSH
2909: LD_VAR 0 2
2913: PPUSH
2914: CALL_OW 250
2918: ST_TO_ADDR
// y := GetY ( building ) ;
2919: LD_ADDR_VAR 0 6
2923: PUSH
2924: LD_VAR 0 2
2928: PPUSH
2929: CALL_OW 251
2933: ST_TO_ADDR
// for i = 0 to 5 do
2934: LD_ADDR_VAR 0 4
2938: PUSH
2939: DOUBLE
2940: LD_INT 0
2942: DEC
2943: ST_TO_ADDR
2944: LD_INT 5
2946: PUSH
2947: FOR_TO
2948: IFFALSE 3060
// begin _x := ShiftX ( x , i , 3 ) ;
2950: LD_ADDR_VAR 0 7
2954: PUSH
2955: LD_VAR 0 5
2959: PPUSH
2960: LD_VAR 0 4
2964: PPUSH
2965: LD_INT 3
2967: PPUSH
2968: CALL_OW 272
2972: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2973: LD_ADDR_VAR 0 8
2977: PUSH
2978: LD_VAR 0 6
2982: PPUSH
2983: LD_VAR 0 4
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: CALL_OW 273
2995: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2996: LD_VAR 0 7
3000: PPUSH
3001: LD_VAR 0 8
3005: PPUSH
3006: CALL_OW 488
3010: NOT
3011: IFFALSE 3015
// continue ;
3013: GO 2947
// if HexInfo ( _x , _y ) = 0 then
3015: LD_VAR 0 7
3019: PPUSH
3020: LD_VAR 0 8
3024: PPUSH
3025: CALL_OW 428
3029: PUSH
3030: LD_INT 0
3032: EQUAL
3033: IFFALSE 3058
// begin ComMoveXY ( unit , _x , _y ) ;
3035: LD_VAR 0 1
3039: PPUSH
3040: LD_VAR 0 7
3044: PPUSH
3045: LD_VAR 0 8
3049: PPUSH
3050: CALL_OW 111
// exit ;
3054: POP
3055: POP
3056: GO 3062
// end ; end ;
3058: GO 2947
3060: POP
3061: POP
// end ;
3062: LD_VAR 0 3
3066: RET
// export function ScanBase ( side , base_area ) ; begin
3067: LD_INT 0
3069: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3070: LD_ADDR_VAR 0 3
3074: PUSH
3075: LD_VAR 0 2
3079: PPUSH
3080: LD_INT 81
3082: PUSH
3083: LD_VAR 0 1
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PPUSH
3092: CALL_OW 70
3096: ST_TO_ADDR
// end ;
3097: LD_VAR 0 3
3101: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3102: LD_INT 0
3104: PPUSH
3105: PPUSH
3106: PPUSH
3107: PPUSH
// result := false ;
3108: LD_ADDR_VAR 0 2
3112: PUSH
3113: LD_INT 0
3115: ST_TO_ADDR
// side := GetSide ( unit ) ;
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 1
3125: PPUSH
3126: CALL_OW 255
3130: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3131: LD_ADDR_VAR 0 4
3135: PUSH
3136: LD_VAR 0 1
3140: PPUSH
3141: CALL_OW 248
3145: ST_TO_ADDR
// case nat of 1 :
3146: LD_VAR 0 4
3150: PUSH
3151: LD_INT 1
3153: DOUBLE
3154: EQUAL
3155: IFTRUE 3159
3157: GO 3170
3159: POP
// tech := tech_lassight ; 2 :
3160: LD_ADDR_VAR 0 5
3164: PUSH
3165: LD_INT 12
3167: ST_TO_ADDR
3168: GO 3209
3170: LD_INT 2
3172: DOUBLE
3173: EQUAL
3174: IFTRUE 3178
3176: GO 3189
3178: POP
// tech := tech_mortar ; 3 :
3179: LD_ADDR_VAR 0 5
3183: PUSH
3184: LD_INT 41
3186: ST_TO_ADDR
3187: GO 3209
3189: LD_INT 3
3191: DOUBLE
3192: EQUAL
3193: IFTRUE 3197
3195: GO 3208
3197: POP
// tech := tech_bazooka ; end ;
3198: LD_ADDR_VAR 0 5
3202: PUSH
3203: LD_INT 44
3205: ST_TO_ADDR
3206: GO 3209
3208: POP
// if Researched ( side , tech ) then
3209: LD_VAR 0 3
3213: PPUSH
3214: LD_VAR 0 5
3218: PPUSH
3219: CALL_OW 325
3223: IFFALSE 3250
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3225: LD_ADDR_VAR 0 2
3229: PUSH
3230: LD_INT 5
3232: PUSH
3233: LD_INT 8
3235: PUSH
3236: LD_INT 9
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: LIST
3243: PUSH
3244: LD_VAR 0 4
3248: ARRAY
3249: ST_TO_ADDR
// end ;
3250: LD_VAR 0 2
3254: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3255: LD_INT 0
3257: PPUSH
3258: PPUSH
3259: PPUSH
// if not mines then
3260: LD_VAR 0 2
3264: NOT
3265: IFFALSE 3269
// exit ;
3267: GO 3413
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3269: LD_ADDR_VAR 0 5
3273: PUSH
3274: LD_INT 81
3276: PUSH
3277: LD_VAR 0 1
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PUSH
3286: LD_INT 3
3288: PUSH
3289: LD_INT 21
3291: PUSH
3292: LD_INT 3
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: PUSH
3303: EMPTY
3304: LIST
3305: LIST
3306: PPUSH
3307: CALL_OW 69
3311: ST_TO_ADDR
// for i in mines do
3312: LD_ADDR_VAR 0 4
3316: PUSH
3317: LD_VAR 0 2
3321: PUSH
3322: FOR_IN
3323: IFFALSE 3411
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3325: LD_VAR 0 4
3329: PUSH
3330: LD_INT 1
3332: ARRAY
3333: PPUSH
3334: LD_VAR 0 4
3338: PUSH
3339: LD_INT 2
3341: ARRAY
3342: PPUSH
3343: CALL_OW 458
3347: NOT
3348: IFFALSE 3352
// continue ;
3350: GO 3322
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3352: LD_VAR 0 4
3356: PUSH
3357: LD_INT 1
3359: ARRAY
3360: PPUSH
3361: LD_VAR 0 4
3365: PUSH
3366: LD_INT 2
3368: ARRAY
3369: PPUSH
3370: CALL_OW 428
3374: PUSH
3375: LD_VAR 0 5
3379: IN
3380: IFFALSE 3409
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3382: LD_VAR 0 4
3386: PUSH
3387: LD_INT 1
3389: ARRAY
3390: PPUSH
3391: LD_VAR 0 4
3395: PUSH
3396: LD_INT 2
3398: ARRAY
3399: PPUSH
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 456
// end ;
3409: GO 3322
3411: POP
3412: POP
// end ;
3413: LD_VAR 0 3
3417: RET
// export function Count ( array ) ; var i ; begin
3418: LD_INT 0
3420: PPUSH
3421: PPUSH
// result := 0 ;
3422: LD_ADDR_VAR 0 2
3426: PUSH
3427: LD_INT 0
3429: ST_TO_ADDR
// for i in array do
3430: LD_ADDR_VAR 0 3
3434: PUSH
3435: LD_VAR 0 1
3439: PUSH
3440: FOR_IN
3441: IFFALSE 3465
// if i then
3443: LD_VAR 0 3
3447: IFFALSE 3463
// result := result + 1 ;
3449: LD_ADDR_VAR 0 2
3453: PUSH
3454: LD_VAR 0 2
3458: PUSH
3459: LD_INT 1
3461: PLUS
3462: ST_TO_ADDR
3463: GO 3440
3465: POP
3466: POP
// end ;
3467: LD_VAR 0 2
3471: RET
// export function IsEmpty ( building ) ; begin
3472: LD_INT 0
3474: PPUSH
// if not building then
3475: LD_VAR 0 1
3479: NOT
3480: IFFALSE 3484
// exit ;
3482: GO 3527
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3484: LD_ADDR_VAR 0 2
3488: PUSH
3489: LD_VAR 0 1
3493: PUSH
3494: LD_INT 22
3496: PUSH
3497: LD_VAR 0 1
3501: PPUSH
3502: CALL_OW 255
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PUSH
3511: LD_INT 58
3513: PUSH
3514: EMPTY
3515: LIST
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PPUSH
3521: CALL_OW 69
3525: IN
3526: ST_TO_ADDR
// end ;
3527: LD_VAR 0 2
3531: RET
// export function IsNotFull ( building ) ; begin
3532: LD_INT 0
3534: PPUSH
// if not building then
3535: LD_VAR 0 1
3539: NOT
3540: IFFALSE 3544
// exit ;
3542: GO 3563
// result := UnitsInside ( building ) < 6 ;
3544: LD_ADDR_VAR 0 2
3548: PUSH
3549: LD_VAR 0 1
3553: PPUSH
3554: CALL_OW 313
3558: PUSH
3559: LD_INT 6
3561: LESS
3562: ST_TO_ADDR
// end ;
3563: LD_VAR 0 2
3567: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3568: LD_INT 0
3570: PPUSH
3571: PPUSH
3572: PPUSH
3573: PPUSH
// tmp := [ ] ;
3574: LD_ADDR_VAR 0 3
3578: PUSH
3579: EMPTY
3580: ST_TO_ADDR
// list := [ ] ;
3581: LD_ADDR_VAR 0 5
3585: PUSH
3586: EMPTY
3587: ST_TO_ADDR
// for i = 16 to 25 do
3588: LD_ADDR_VAR 0 4
3592: PUSH
3593: DOUBLE
3594: LD_INT 16
3596: DEC
3597: ST_TO_ADDR
3598: LD_INT 25
3600: PUSH
3601: FOR_TO
3602: IFFALSE 3675
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3604: LD_ADDR_VAR 0 3
3608: PUSH
3609: LD_VAR 0 3
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_VAR 0 1
3621: PPUSH
3622: CALL_OW 255
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: PUSH
3631: LD_INT 91
3633: PUSH
3634: LD_VAR 0 1
3638: PUSH
3639: LD_INT 6
3641: PUSH
3642: EMPTY
3643: LIST
3644: LIST
3645: LIST
3646: PUSH
3647: LD_INT 30
3649: PUSH
3650: LD_VAR 0 4
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: LIST
3663: PUSH
3664: EMPTY
3665: LIST
3666: PPUSH
3667: CALL_OW 69
3671: ADD
3672: ST_TO_ADDR
3673: GO 3601
3675: POP
3676: POP
// for i = 1 to tmp do
3677: LD_ADDR_VAR 0 4
3681: PUSH
3682: DOUBLE
3683: LD_INT 1
3685: DEC
3686: ST_TO_ADDR
3687: LD_VAR 0 3
3691: PUSH
3692: FOR_TO
3693: IFFALSE 3781
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3695: LD_ADDR_VAR 0 5
3699: PUSH
3700: LD_VAR 0 5
3704: PUSH
3705: LD_VAR 0 3
3709: PUSH
3710: LD_VAR 0 4
3714: ARRAY
3715: PPUSH
3716: CALL_OW 266
3720: PUSH
3721: LD_VAR 0 3
3725: PUSH
3726: LD_VAR 0 4
3730: ARRAY
3731: PPUSH
3732: CALL_OW 250
3736: PUSH
3737: LD_VAR 0 3
3741: PUSH
3742: LD_VAR 0 4
3746: ARRAY
3747: PPUSH
3748: CALL_OW 251
3752: PUSH
3753: LD_VAR 0 3
3757: PUSH
3758: LD_VAR 0 4
3762: ARRAY
3763: PPUSH
3764: CALL_OW 254
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: PUSH
3775: EMPTY
3776: LIST
3777: ADD
3778: ST_TO_ADDR
3779: GO 3692
3781: POP
3782: POP
// result := list ;
3783: LD_ADDR_VAR 0 2
3787: PUSH
3788: LD_VAR 0 5
3792: ST_TO_ADDR
// end ;
3793: LD_VAR 0 2
3797: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3798: LD_INT 0
3800: PPUSH
3801: PPUSH
3802: PPUSH
3803: PPUSH
3804: PPUSH
3805: PPUSH
3806: PPUSH
// if not factory then
3807: LD_VAR 0 1
3811: NOT
3812: IFFALSE 3816
// exit ;
3814: GO 4409
// if control = control_apeman then
3816: LD_VAR 0 4
3820: PUSH
3821: LD_INT 5
3823: EQUAL
3824: IFFALSE 3933
// begin tmp := UnitsInside ( factory ) ;
3826: LD_ADDR_VAR 0 8
3830: PUSH
3831: LD_VAR 0 1
3835: PPUSH
3836: CALL_OW 313
3840: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3841: LD_VAR 0 8
3845: PPUSH
3846: LD_INT 25
3848: PUSH
3849: LD_INT 12
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PPUSH
3856: CALL_OW 72
3860: NOT
3861: IFFALSE 3871
// control := control_manual ;
3863: LD_ADDR_VAR 0 4
3867: PUSH
3868: LD_INT 1
3870: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3871: LD_ADDR_VAR 0 8
3875: PUSH
3876: LD_VAR 0 1
3880: PPUSH
3881: CALL 3568 0 1
3885: ST_TO_ADDR
// if tmp then
3886: LD_VAR 0 8
3890: IFFALSE 3933
// begin for i in tmp do
3892: LD_ADDR_VAR 0 7
3896: PUSH
3897: LD_VAR 0 8
3901: PUSH
3902: FOR_IN
3903: IFFALSE 3931
// if i [ 1 ] = b_ext_radio then
3905: LD_VAR 0 7
3909: PUSH
3910: LD_INT 1
3912: ARRAY
3913: PUSH
3914: LD_INT 22
3916: EQUAL
3917: IFFALSE 3929
// begin control := control_remote ;
3919: LD_ADDR_VAR 0 4
3923: PUSH
3924: LD_INT 2
3926: ST_TO_ADDR
// break ;
3927: GO 3931
// end ;
3929: GO 3902
3931: POP
3932: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3933: LD_VAR 0 1
3937: PPUSH
3938: LD_VAR 0 2
3942: PPUSH
3943: LD_VAR 0 3
3947: PPUSH
3948: LD_VAR 0 4
3952: PPUSH
3953: LD_VAR 0 5
3957: PPUSH
3958: CALL_OW 448
3962: IFFALSE 3997
// begin result := [ chassis , engine , control , weapon ] ;
3964: LD_ADDR_VAR 0 6
3968: PUSH
3969: LD_VAR 0 2
3973: PUSH
3974: LD_VAR 0 3
3978: PUSH
3979: LD_VAR 0 4
3983: PUSH
3984: LD_VAR 0 5
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: LIST
3993: LIST
3994: ST_TO_ADDR
// exit ;
3995: GO 4409
// end ; _chassis := AvailableChassisList ( factory ) ;
3997: LD_ADDR_VAR 0 9
4001: PUSH
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL_OW 475
4011: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4012: LD_ADDR_VAR 0 11
4016: PUSH
4017: LD_VAR 0 1
4021: PPUSH
4022: CALL_OW 476
4026: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4027: LD_ADDR_VAR 0 12
4031: PUSH
4032: LD_VAR 0 1
4036: PPUSH
4037: CALL_OW 477
4041: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4042: LD_ADDR_VAR 0 10
4046: PUSH
4047: LD_VAR 0 1
4051: PPUSH
4052: CALL_OW 478
4056: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4057: LD_VAR 0 9
4061: NOT
4062: PUSH
4063: LD_VAR 0 11
4067: NOT
4068: OR
4069: PUSH
4070: LD_VAR 0 12
4074: NOT
4075: OR
4076: PUSH
4077: LD_VAR 0 10
4081: NOT
4082: OR
4083: IFFALSE 4118
// begin result := [ chassis , engine , control , weapon ] ;
4085: LD_ADDR_VAR 0 6
4089: PUSH
4090: LD_VAR 0 2
4094: PUSH
4095: LD_VAR 0 3
4099: PUSH
4100: LD_VAR 0 4
4104: PUSH
4105: LD_VAR 0 5
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: ST_TO_ADDR
// exit ;
4116: GO 4409
// end ; if not chassis in _chassis then
4118: LD_VAR 0 2
4122: PUSH
4123: LD_VAR 0 9
4127: IN
4128: NOT
4129: IFFALSE 4155
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4131: LD_ADDR_VAR 0 2
4135: PUSH
4136: LD_VAR 0 9
4140: PUSH
4141: LD_INT 1
4143: PPUSH
4144: LD_VAR 0 9
4148: PPUSH
4149: CALL_OW 12
4153: ARRAY
4154: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4155: LD_VAR 0 2
4159: PPUSH
4160: LD_VAR 0 3
4164: PPUSH
4165: CALL 4414 0 2
4169: NOT
4170: IFFALSE 4229
// repeat engine := _engine [ 1 ] ;
4172: LD_ADDR_VAR 0 3
4176: PUSH
4177: LD_VAR 0 11
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4186: LD_ADDR_VAR 0 11
4190: PUSH
4191: LD_VAR 0 11
4195: PPUSH
4196: LD_INT 1
4198: PPUSH
4199: CALL_OW 3
4203: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4204: LD_VAR 0 2
4208: PPUSH
4209: LD_VAR 0 3
4213: PPUSH
4214: CALL 4414 0 2
4218: PUSH
4219: LD_VAR 0 11
4223: PUSH
4224: EMPTY
4225: EQUAL
4226: OR
4227: IFFALSE 4172
// if not control in _control then
4229: LD_VAR 0 4
4233: PUSH
4234: LD_VAR 0 12
4238: IN
4239: NOT
4240: IFFALSE 4266
// control := _control [ rand ( 1 , _control ) ] ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_VAR 0 12
4251: PUSH
4252: LD_INT 1
4254: PPUSH
4255: LD_VAR 0 12
4259: PPUSH
4260: CALL_OW 12
4264: ARRAY
4265: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4266: LD_VAR 0 2
4270: PPUSH
4271: LD_VAR 0 5
4275: PPUSH
4276: CALL 4634 0 2
4280: NOT
4281: IFFALSE 4340
// repeat weapon := _weapon [ 1 ] ;
4283: LD_ADDR_VAR 0 5
4287: PUSH
4288: LD_VAR 0 10
4292: PUSH
4293: LD_INT 1
4295: ARRAY
4296: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4297: LD_ADDR_VAR 0 10
4301: PUSH
4302: LD_VAR 0 10
4306: PPUSH
4307: LD_INT 1
4309: PPUSH
4310: CALL_OW 3
4314: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4315: LD_VAR 0 2
4319: PPUSH
4320: LD_VAR 0 5
4324: PPUSH
4325: CALL 4634 0 2
4329: PUSH
4330: LD_VAR 0 10
4334: PUSH
4335: EMPTY
4336: EQUAL
4337: OR
4338: IFFALSE 4283
// result := [ ] ;
4340: LD_ADDR_VAR 0 6
4344: PUSH
4345: EMPTY
4346: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4347: LD_VAR 0 1
4351: PPUSH
4352: LD_VAR 0 2
4356: PPUSH
4357: LD_VAR 0 3
4361: PPUSH
4362: LD_VAR 0 4
4366: PPUSH
4367: LD_VAR 0 5
4371: PPUSH
4372: CALL_OW 448
4376: IFFALSE 4409
// result := [ chassis , engine , control , weapon ] ;
4378: LD_ADDR_VAR 0 6
4382: PUSH
4383: LD_VAR 0 2
4387: PUSH
4388: LD_VAR 0 3
4392: PUSH
4393: LD_VAR 0 4
4397: PUSH
4398: LD_VAR 0 5
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: ST_TO_ADDR
// end ;
4409: LD_VAR 0 6
4413: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4414: LD_INT 0
4416: PPUSH
// if not chassis or not engine then
4417: LD_VAR 0 1
4421: NOT
4422: PUSH
4423: LD_VAR 0 2
4427: NOT
4428: OR
4429: IFFALSE 4433
// exit ;
4431: GO 4629
// case engine of engine_solar :
4433: LD_VAR 0 2
4437: PUSH
4438: LD_INT 2
4440: DOUBLE
4441: EQUAL
4442: IFTRUE 4446
4444: GO 4484
4446: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4447: LD_ADDR_VAR 0 3
4451: PUSH
4452: LD_INT 11
4454: PUSH
4455: LD_INT 12
4457: PUSH
4458: LD_INT 13
4460: PUSH
4461: LD_INT 14
4463: PUSH
4464: LD_INT 1
4466: PUSH
4467: LD_INT 2
4469: PUSH
4470: LD_INT 3
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: ST_TO_ADDR
4482: GO 4613
4484: LD_INT 1
4486: DOUBLE
4487: EQUAL
4488: IFTRUE 4492
4490: GO 4554
4492: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4493: LD_ADDR_VAR 0 3
4497: PUSH
4498: LD_INT 11
4500: PUSH
4501: LD_INT 12
4503: PUSH
4504: LD_INT 13
4506: PUSH
4507: LD_INT 14
4509: PUSH
4510: LD_INT 1
4512: PUSH
4513: LD_INT 2
4515: PUSH
4516: LD_INT 3
4518: PUSH
4519: LD_INT 4
4521: PUSH
4522: LD_INT 5
4524: PUSH
4525: LD_INT 21
4527: PUSH
4528: LD_INT 23
4530: PUSH
4531: LD_INT 22
4533: PUSH
4534: LD_INT 24
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: ST_TO_ADDR
4552: GO 4613
4554: LD_INT 3
4556: DOUBLE
4557: EQUAL
4558: IFTRUE 4562
4560: GO 4612
4562: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4563: LD_ADDR_VAR 0 3
4567: PUSH
4568: LD_INT 13
4570: PUSH
4571: LD_INT 14
4573: PUSH
4574: LD_INT 2
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: LD_INT 4
4582: PUSH
4583: LD_INT 5
4585: PUSH
4586: LD_INT 21
4588: PUSH
4589: LD_INT 22
4591: PUSH
4592: LD_INT 23
4594: PUSH
4595: LD_INT 24
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: ST_TO_ADDR
4610: GO 4613
4612: POP
// result := ( chassis in result ) ;
4613: LD_ADDR_VAR 0 3
4617: PUSH
4618: LD_VAR 0 1
4622: PUSH
4623: LD_VAR 0 3
4627: IN
4628: ST_TO_ADDR
// end ;
4629: LD_VAR 0 3
4633: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4634: LD_INT 0
4636: PPUSH
// if not chassis or not weapon then
4637: LD_VAR 0 1
4641: NOT
4642: PUSH
4643: LD_VAR 0 2
4647: NOT
4648: OR
4649: IFFALSE 4653
// exit ;
4651: GO 5715
// case weapon of us_machine_gun :
4653: LD_VAR 0 2
4657: PUSH
4658: LD_INT 2
4660: DOUBLE
4661: EQUAL
4662: IFTRUE 4666
4664: GO 4696
4666: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4667: LD_ADDR_VAR 0 3
4671: PUSH
4672: LD_INT 1
4674: PUSH
4675: LD_INT 2
4677: PUSH
4678: LD_INT 3
4680: PUSH
4681: LD_INT 4
4683: PUSH
4684: LD_INT 5
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: ST_TO_ADDR
4694: GO 5699
4696: LD_INT 3
4698: DOUBLE
4699: EQUAL
4700: IFTRUE 4704
4702: GO 4734
4704: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4705: LD_ADDR_VAR 0 3
4709: PUSH
4710: LD_INT 1
4712: PUSH
4713: LD_INT 2
4715: PUSH
4716: LD_INT 3
4718: PUSH
4719: LD_INT 4
4721: PUSH
4722: LD_INT 5
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: ST_TO_ADDR
4732: GO 5699
4734: LD_INT 11
4736: DOUBLE
4737: EQUAL
4738: IFTRUE 4742
4740: GO 4772
4742: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4743: LD_ADDR_VAR 0 3
4747: PUSH
4748: LD_INT 1
4750: PUSH
4751: LD_INT 2
4753: PUSH
4754: LD_INT 3
4756: PUSH
4757: LD_INT 4
4759: PUSH
4760: LD_INT 5
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: ST_TO_ADDR
4770: GO 5699
4772: LD_INT 4
4774: DOUBLE
4775: EQUAL
4776: IFTRUE 4780
4778: GO 4806
4780: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4781: LD_ADDR_VAR 0 3
4785: PUSH
4786: LD_INT 2
4788: PUSH
4789: LD_INT 3
4791: PUSH
4792: LD_INT 4
4794: PUSH
4795: LD_INT 5
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: ST_TO_ADDR
4804: GO 5699
4806: LD_INT 5
4808: DOUBLE
4809: EQUAL
4810: IFTRUE 4814
4812: GO 4840
4814: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4815: LD_ADDR_VAR 0 3
4819: PUSH
4820: LD_INT 2
4822: PUSH
4823: LD_INT 3
4825: PUSH
4826: LD_INT 4
4828: PUSH
4829: LD_INT 5
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: ST_TO_ADDR
4838: GO 5699
4840: LD_INT 9
4842: DOUBLE
4843: EQUAL
4844: IFTRUE 4848
4846: GO 4874
4848: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4849: LD_ADDR_VAR 0 3
4853: PUSH
4854: LD_INT 2
4856: PUSH
4857: LD_INT 3
4859: PUSH
4860: LD_INT 4
4862: PUSH
4863: LD_INT 5
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: ST_TO_ADDR
4872: GO 5699
4874: LD_INT 7
4876: DOUBLE
4877: EQUAL
4878: IFTRUE 4882
4880: GO 4908
4882: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4883: LD_ADDR_VAR 0 3
4887: PUSH
4888: LD_INT 2
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: LD_INT 4
4896: PUSH
4897: LD_INT 5
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: ST_TO_ADDR
4906: GO 5699
4908: LD_INT 12
4910: DOUBLE
4911: EQUAL
4912: IFTRUE 4916
4914: GO 4942
4916: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4917: LD_ADDR_VAR 0 3
4921: PUSH
4922: LD_INT 2
4924: PUSH
4925: LD_INT 3
4927: PUSH
4928: LD_INT 4
4930: PUSH
4931: LD_INT 5
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: ST_TO_ADDR
4940: GO 5699
4942: LD_INT 13
4944: DOUBLE
4945: EQUAL
4946: IFTRUE 4950
4948: GO 4976
4950: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4951: LD_ADDR_VAR 0 3
4955: PUSH
4956: LD_INT 2
4958: PUSH
4959: LD_INT 3
4961: PUSH
4962: LD_INT 4
4964: PUSH
4965: LD_INT 5
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: ST_TO_ADDR
4974: GO 5699
4976: LD_INT 14
4978: DOUBLE
4979: EQUAL
4980: IFTRUE 4984
4982: GO 5002
4984: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4985: LD_ADDR_VAR 0 3
4989: PUSH
4990: LD_INT 4
4992: PUSH
4993: LD_INT 5
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: ST_TO_ADDR
5000: GO 5699
5002: LD_INT 6
5004: DOUBLE
5005: EQUAL
5006: IFTRUE 5010
5008: GO 5028
5010: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5011: LD_ADDR_VAR 0 3
5015: PUSH
5016: LD_INT 4
5018: PUSH
5019: LD_INT 5
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: ST_TO_ADDR
5026: GO 5699
5028: LD_INT 10
5030: DOUBLE
5031: EQUAL
5032: IFTRUE 5036
5034: GO 5054
5036: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5037: LD_ADDR_VAR 0 3
5041: PUSH
5042: LD_INT 4
5044: PUSH
5045: LD_INT 5
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: ST_TO_ADDR
5052: GO 5699
5054: LD_INT 22
5056: DOUBLE
5057: EQUAL
5058: IFTRUE 5062
5060: GO 5088
5062: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5063: LD_ADDR_VAR 0 3
5067: PUSH
5068: LD_INT 11
5070: PUSH
5071: LD_INT 12
5073: PUSH
5074: LD_INT 13
5076: PUSH
5077: LD_INT 14
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: ST_TO_ADDR
5086: GO 5699
5088: LD_INT 23
5090: DOUBLE
5091: EQUAL
5092: IFTRUE 5096
5094: GO 5122
5096: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5097: LD_ADDR_VAR 0 3
5101: PUSH
5102: LD_INT 11
5104: PUSH
5105: LD_INT 12
5107: PUSH
5108: LD_INT 13
5110: PUSH
5111: LD_INT 14
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: ST_TO_ADDR
5120: GO 5699
5122: LD_INT 24
5124: DOUBLE
5125: EQUAL
5126: IFTRUE 5130
5128: GO 5156
5130: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5131: LD_ADDR_VAR 0 3
5135: PUSH
5136: LD_INT 11
5138: PUSH
5139: LD_INT 12
5141: PUSH
5142: LD_INT 13
5144: PUSH
5145: LD_INT 14
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: ST_TO_ADDR
5154: GO 5699
5156: LD_INT 30
5158: DOUBLE
5159: EQUAL
5160: IFTRUE 5164
5162: GO 5190
5164: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5165: LD_ADDR_VAR 0 3
5169: PUSH
5170: LD_INT 11
5172: PUSH
5173: LD_INT 12
5175: PUSH
5176: LD_INT 13
5178: PUSH
5179: LD_INT 14
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: ST_TO_ADDR
5188: GO 5699
5190: LD_INT 25
5192: DOUBLE
5193: EQUAL
5194: IFTRUE 5198
5196: GO 5216
5198: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5199: LD_ADDR_VAR 0 3
5203: PUSH
5204: LD_INT 13
5206: PUSH
5207: LD_INT 14
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: ST_TO_ADDR
5214: GO 5699
5216: LD_INT 27
5218: DOUBLE
5219: EQUAL
5220: IFTRUE 5224
5222: GO 5242
5224: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: LD_INT 13
5232: PUSH
5233: LD_INT 14
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: ST_TO_ADDR
5240: GO 5699
5242: LD_EXP 8
5246: DOUBLE
5247: EQUAL
5248: IFTRUE 5252
5250: GO 5278
5252: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5253: LD_ADDR_VAR 0 3
5257: PUSH
5258: LD_INT 11
5260: PUSH
5261: LD_INT 12
5263: PUSH
5264: LD_INT 13
5266: PUSH
5267: LD_INT 14
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: ST_TO_ADDR
5276: GO 5699
5278: LD_INT 28
5280: DOUBLE
5281: EQUAL
5282: IFTRUE 5286
5284: GO 5304
5286: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5287: LD_ADDR_VAR 0 3
5291: PUSH
5292: LD_INT 13
5294: PUSH
5295: LD_INT 14
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: ST_TO_ADDR
5302: GO 5699
5304: LD_INT 29
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5312
5310: GO 5330
5312: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5313: LD_ADDR_VAR 0 3
5317: PUSH
5318: LD_INT 13
5320: PUSH
5321: LD_INT 14
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: ST_TO_ADDR
5328: GO 5699
5330: LD_INT 31
5332: DOUBLE
5333: EQUAL
5334: IFTRUE 5338
5336: GO 5356
5338: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5339: LD_ADDR_VAR 0 3
5343: PUSH
5344: LD_INT 13
5346: PUSH
5347: LD_INT 14
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: ST_TO_ADDR
5354: GO 5699
5356: LD_INT 26
5358: DOUBLE
5359: EQUAL
5360: IFTRUE 5364
5362: GO 5382
5364: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5365: LD_ADDR_VAR 0 3
5369: PUSH
5370: LD_INT 13
5372: PUSH
5373: LD_INT 14
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: ST_TO_ADDR
5380: GO 5699
5382: LD_INT 42
5384: DOUBLE
5385: EQUAL
5386: IFTRUE 5390
5388: GO 5416
5390: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5391: LD_ADDR_VAR 0 3
5395: PUSH
5396: LD_INT 21
5398: PUSH
5399: LD_INT 22
5401: PUSH
5402: LD_INT 23
5404: PUSH
5405: LD_INT 24
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: ST_TO_ADDR
5414: GO 5699
5416: LD_INT 43
5418: DOUBLE
5419: EQUAL
5420: IFTRUE 5424
5422: GO 5450
5424: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5425: LD_ADDR_VAR 0 3
5429: PUSH
5430: LD_INT 21
5432: PUSH
5433: LD_INT 22
5435: PUSH
5436: LD_INT 23
5438: PUSH
5439: LD_INT 24
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: ST_TO_ADDR
5448: GO 5699
5450: LD_INT 44
5452: DOUBLE
5453: EQUAL
5454: IFTRUE 5458
5456: GO 5484
5458: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5459: LD_ADDR_VAR 0 3
5463: PUSH
5464: LD_INT 21
5466: PUSH
5467: LD_INT 22
5469: PUSH
5470: LD_INT 23
5472: PUSH
5473: LD_INT 24
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: ST_TO_ADDR
5482: GO 5699
5484: LD_INT 45
5486: DOUBLE
5487: EQUAL
5488: IFTRUE 5492
5490: GO 5518
5492: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5493: LD_ADDR_VAR 0 3
5497: PUSH
5498: LD_INT 21
5500: PUSH
5501: LD_INT 22
5503: PUSH
5504: LD_INT 23
5506: PUSH
5507: LD_INT 24
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: ST_TO_ADDR
5516: GO 5699
5518: LD_INT 49
5520: DOUBLE
5521: EQUAL
5522: IFTRUE 5526
5524: GO 5552
5526: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5527: LD_ADDR_VAR 0 3
5531: PUSH
5532: LD_INT 21
5534: PUSH
5535: LD_INT 22
5537: PUSH
5538: LD_INT 23
5540: PUSH
5541: LD_INT 24
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: ST_TO_ADDR
5550: GO 5699
5552: LD_INT 51
5554: DOUBLE
5555: EQUAL
5556: IFTRUE 5560
5558: GO 5586
5560: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5561: LD_ADDR_VAR 0 3
5565: PUSH
5566: LD_INT 21
5568: PUSH
5569: LD_INT 22
5571: PUSH
5572: LD_INT 23
5574: PUSH
5575: LD_INT 24
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: ST_TO_ADDR
5584: GO 5699
5586: LD_INT 52
5588: DOUBLE
5589: EQUAL
5590: IFTRUE 5594
5592: GO 5620
5594: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5595: LD_ADDR_VAR 0 3
5599: PUSH
5600: LD_INT 21
5602: PUSH
5603: LD_INT 22
5605: PUSH
5606: LD_INT 23
5608: PUSH
5609: LD_INT 24
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: ST_TO_ADDR
5618: GO 5699
5620: LD_INT 53
5622: DOUBLE
5623: EQUAL
5624: IFTRUE 5628
5626: GO 5646
5628: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5629: LD_ADDR_VAR 0 3
5633: PUSH
5634: LD_INT 23
5636: PUSH
5637: LD_INT 24
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: ST_TO_ADDR
5644: GO 5699
5646: LD_INT 46
5648: DOUBLE
5649: EQUAL
5650: IFTRUE 5654
5652: GO 5672
5654: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5655: LD_ADDR_VAR 0 3
5659: PUSH
5660: LD_INT 23
5662: PUSH
5663: LD_INT 24
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: ST_TO_ADDR
5670: GO 5699
5672: LD_INT 47
5674: DOUBLE
5675: EQUAL
5676: IFTRUE 5680
5678: GO 5698
5680: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5681: LD_ADDR_VAR 0 3
5685: PUSH
5686: LD_INT 23
5688: PUSH
5689: LD_INT 24
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: ST_TO_ADDR
5696: GO 5699
5698: POP
// result := ( chassis in result ) ;
5699: LD_ADDR_VAR 0 3
5703: PUSH
5704: LD_VAR 0 1
5708: PUSH
5709: LD_VAR 0 3
5713: IN
5714: ST_TO_ADDR
// end ;
5715: LD_VAR 0 3
5719: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5720: LD_INT 0
5722: PPUSH
5723: PPUSH
5724: PPUSH
5725: PPUSH
5726: PPUSH
5727: PPUSH
5728: PPUSH
// result := array ;
5729: LD_ADDR_VAR 0 5
5733: PUSH
5734: LD_VAR 0 1
5738: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5739: LD_VAR 0 1
5743: NOT
5744: PUSH
5745: LD_VAR 0 2
5749: NOT
5750: OR
5751: PUSH
5752: LD_VAR 0 3
5756: NOT
5757: OR
5758: PUSH
5759: LD_VAR 0 2
5763: PUSH
5764: LD_VAR 0 1
5768: GREATER
5769: OR
5770: PUSH
5771: LD_VAR 0 3
5775: PUSH
5776: LD_VAR 0 1
5780: GREATER
5781: OR
5782: IFFALSE 5786
// exit ;
5784: GO 6082
// if direction then
5786: LD_VAR 0 4
5790: IFFALSE 5854
// begin d := 1 ;
5792: LD_ADDR_VAR 0 9
5796: PUSH
5797: LD_INT 1
5799: ST_TO_ADDR
// if i_from > i_to then
5800: LD_VAR 0 2
5804: PUSH
5805: LD_VAR 0 3
5809: GREATER
5810: IFFALSE 5836
// length := ( array - i_from ) + i_to else
5812: LD_ADDR_VAR 0 11
5816: PUSH
5817: LD_VAR 0 1
5821: PUSH
5822: LD_VAR 0 2
5826: MINUS
5827: PUSH
5828: LD_VAR 0 3
5832: PLUS
5833: ST_TO_ADDR
5834: GO 5852
// length := i_to - i_from ;
5836: LD_ADDR_VAR 0 11
5840: PUSH
5841: LD_VAR 0 3
5845: PUSH
5846: LD_VAR 0 2
5850: MINUS
5851: ST_TO_ADDR
// end else
5852: GO 5915
// begin d := - 1 ;
5854: LD_ADDR_VAR 0 9
5858: PUSH
5859: LD_INT 1
5861: NEG
5862: ST_TO_ADDR
// if i_from > i_to then
5863: LD_VAR 0 2
5867: PUSH
5868: LD_VAR 0 3
5872: GREATER
5873: IFFALSE 5893
// length := i_from - i_to else
5875: LD_ADDR_VAR 0 11
5879: PUSH
5880: LD_VAR 0 2
5884: PUSH
5885: LD_VAR 0 3
5889: MINUS
5890: ST_TO_ADDR
5891: GO 5915
// length := ( array - i_to ) + i_from ;
5893: LD_ADDR_VAR 0 11
5897: PUSH
5898: LD_VAR 0 1
5902: PUSH
5903: LD_VAR 0 3
5907: MINUS
5908: PUSH
5909: LD_VAR 0 2
5913: PLUS
5914: ST_TO_ADDR
// end ; if not length then
5915: LD_VAR 0 11
5919: NOT
5920: IFFALSE 5924
// exit ;
5922: GO 6082
// tmp := array ;
5924: LD_ADDR_VAR 0 10
5928: PUSH
5929: LD_VAR 0 1
5933: ST_TO_ADDR
// for i = 1 to length do
5934: LD_ADDR_VAR 0 6
5938: PUSH
5939: DOUBLE
5940: LD_INT 1
5942: DEC
5943: ST_TO_ADDR
5944: LD_VAR 0 11
5948: PUSH
5949: FOR_TO
5950: IFFALSE 6070
// begin for j = 1 to array do
5952: LD_ADDR_VAR 0 7
5956: PUSH
5957: DOUBLE
5958: LD_INT 1
5960: DEC
5961: ST_TO_ADDR
5962: LD_VAR 0 1
5966: PUSH
5967: FOR_TO
5968: IFFALSE 6056
// begin k := j + d ;
5970: LD_ADDR_VAR 0 8
5974: PUSH
5975: LD_VAR 0 7
5979: PUSH
5980: LD_VAR 0 9
5984: PLUS
5985: ST_TO_ADDR
// if k > array then
5986: LD_VAR 0 8
5990: PUSH
5991: LD_VAR 0 1
5995: GREATER
5996: IFFALSE 6006
// k := 1 ;
5998: LD_ADDR_VAR 0 8
6002: PUSH
6003: LD_INT 1
6005: ST_TO_ADDR
// if not k then
6006: LD_VAR 0 8
6010: NOT
6011: IFFALSE 6023
// k := array ;
6013: LD_ADDR_VAR 0 8
6017: PUSH
6018: LD_VAR 0 1
6022: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6023: LD_ADDR_VAR 0 10
6027: PUSH
6028: LD_VAR 0 10
6032: PPUSH
6033: LD_VAR 0 8
6037: PPUSH
6038: LD_VAR 0 1
6042: PUSH
6043: LD_VAR 0 7
6047: ARRAY
6048: PPUSH
6049: CALL_OW 1
6053: ST_TO_ADDR
// end ;
6054: GO 5967
6056: POP
6057: POP
// array := tmp ;
6058: LD_ADDR_VAR 0 1
6062: PUSH
6063: LD_VAR 0 10
6067: ST_TO_ADDR
// end ;
6068: GO 5949
6070: POP
6071: POP
// result := array ;
6072: LD_ADDR_VAR 0 5
6076: PUSH
6077: LD_VAR 0 1
6081: ST_TO_ADDR
// end ;
6082: LD_VAR 0 5
6086: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6087: LD_INT 0
6089: PPUSH
6090: PPUSH
// result := 0 ;
6091: LD_ADDR_VAR 0 3
6095: PUSH
6096: LD_INT 0
6098: ST_TO_ADDR
// if not array or not value in array then
6099: LD_VAR 0 1
6103: NOT
6104: PUSH
6105: LD_VAR 0 2
6109: PUSH
6110: LD_VAR 0 1
6114: IN
6115: NOT
6116: OR
6117: IFFALSE 6121
// exit ;
6119: GO 6175
// for i = 1 to array do
6121: LD_ADDR_VAR 0 4
6125: PUSH
6126: DOUBLE
6127: LD_INT 1
6129: DEC
6130: ST_TO_ADDR
6131: LD_VAR 0 1
6135: PUSH
6136: FOR_TO
6137: IFFALSE 6173
// if value = array [ i ] then
6139: LD_VAR 0 2
6143: PUSH
6144: LD_VAR 0 1
6148: PUSH
6149: LD_VAR 0 4
6153: ARRAY
6154: EQUAL
6155: IFFALSE 6171
// begin result := i ;
6157: LD_ADDR_VAR 0 3
6161: PUSH
6162: LD_VAR 0 4
6166: ST_TO_ADDR
// exit ;
6167: POP
6168: POP
6169: GO 6175
// end ;
6171: GO 6136
6173: POP
6174: POP
// end ;
6175: LD_VAR 0 3
6179: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6180: LD_INT 0
6182: PPUSH
// vc_chassis := chassis ;
6183: LD_ADDR_OWVAR 37
6187: PUSH
6188: LD_VAR 0 1
6192: ST_TO_ADDR
// vc_engine := engine ;
6193: LD_ADDR_OWVAR 39
6197: PUSH
6198: LD_VAR 0 2
6202: ST_TO_ADDR
// vc_control := control ;
6203: LD_ADDR_OWVAR 38
6207: PUSH
6208: LD_VAR 0 3
6212: ST_TO_ADDR
// vc_weapon := weapon ;
6213: LD_ADDR_OWVAR 40
6217: PUSH
6218: LD_VAR 0 4
6222: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6223: LD_ADDR_OWVAR 41
6227: PUSH
6228: LD_VAR 0 5
6232: ST_TO_ADDR
// end ;
6233: LD_VAR 0 6
6237: RET
// export function WantPlant ( unit ) ; var task ; begin
6238: LD_INT 0
6240: PPUSH
6241: PPUSH
// result := false ;
6242: LD_ADDR_VAR 0 2
6246: PUSH
6247: LD_INT 0
6249: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6250: LD_ADDR_VAR 0 3
6254: PUSH
6255: LD_VAR 0 1
6259: PPUSH
6260: CALL_OW 437
6264: ST_TO_ADDR
// if task then
6265: LD_VAR 0 3
6269: IFFALSE 6297
// if task [ 1 ] [ 1 ] = p then
6271: LD_VAR 0 3
6275: PUSH
6276: LD_INT 1
6278: ARRAY
6279: PUSH
6280: LD_INT 1
6282: ARRAY
6283: PUSH
6284: LD_STRING p
6286: EQUAL
6287: IFFALSE 6297
// result := true ;
6289: LD_ADDR_VAR 0 2
6293: PUSH
6294: LD_INT 1
6296: ST_TO_ADDR
// end ;
6297: LD_VAR 0 2
6301: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6302: LD_INT 0
6304: PPUSH
6305: PPUSH
6306: PPUSH
6307: PPUSH
// if pos < 1 then
6308: LD_VAR 0 2
6312: PUSH
6313: LD_INT 1
6315: LESS
6316: IFFALSE 6320
// exit ;
6318: GO 6623
// if pos = 1 then
6320: LD_VAR 0 2
6324: PUSH
6325: LD_INT 1
6327: EQUAL
6328: IFFALSE 6361
// result := Replace ( arr , pos [ 1 ] , value ) else
6330: LD_ADDR_VAR 0 4
6334: PUSH
6335: LD_VAR 0 1
6339: PPUSH
6340: LD_VAR 0 2
6344: PUSH
6345: LD_INT 1
6347: ARRAY
6348: PPUSH
6349: LD_VAR 0 3
6353: PPUSH
6354: CALL_OW 1
6358: ST_TO_ADDR
6359: GO 6623
// begin tmp := arr ;
6361: LD_ADDR_VAR 0 6
6365: PUSH
6366: LD_VAR 0 1
6370: ST_TO_ADDR
// s_arr := [ tmp ] ;
6371: LD_ADDR_VAR 0 7
6375: PUSH
6376: LD_VAR 0 6
6380: PUSH
6381: EMPTY
6382: LIST
6383: ST_TO_ADDR
// for i = 1 to pos - 1 do
6384: LD_ADDR_VAR 0 5
6388: PUSH
6389: DOUBLE
6390: LD_INT 1
6392: DEC
6393: ST_TO_ADDR
6394: LD_VAR 0 2
6398: PUSH
6399: LD_INT 1
6401: MINUS
6402: PUSH
6403: FOR_TO
6404: IFFALSE 6449
// begin tmp := tmp [ pos [ i ] ] ;
6406: LD_ADDR_VAR 0 6
6410: PUSH
6411: LD_VAR 0 6
6415: PUSH
6416: LD_VAR 0 2
6420: PUSH
6421: LD_VAR 0 5
6425: ARRAY
6426: ARRAY
6427: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6428: LD_ADDR_VAR 0 7
6432: PUSH
6433: LD_VAR 0 7
6437: PUSH
6438: LD_VAR 0 6
6442: PUSH
6443: EMPTY
6444: LIST
6445: ADD
6446: ST_TO_ADDR
// end ;
6447: GO 6403
6449: POP
6450: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6451: LD_ADDR_VAR 0 6
6455: PUSH
6456: LD_VAR 0 6
6460: PPUSH
6461: LD_VAR 0 2
6465: PUSH
6466: LD_VAR 0 2
6470: ARRAY
6471: PPUSH
6472: LD_VAR 0 3
6476: PPUSH
6477: CALL_OW 1
6481: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6482: LD_ADDR_VAR 0 7
6486: PUSH
6487: LD_VAR 0 7
6491: PPUSH
6492: LD_VAR 0 7
6496: PPUSH
6497: LD_VAR 0 6
6501: PPUSH
6502: CALL_OW 1
6506: ST_TO_ADDR
// for i = s_arr downto 2 do
6507: LD_ADDR_VAR 0 5
6511: PUSH
6512: DOUBLE
6513: LD_VAR 0 7
6517: INC
6518: ST_TO_ADDR
6519: LD_INT 2
6521: PUSH
6522: FOR_DOWNTO
6523: IFFALSE 6607
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6525: LD_ADDR_VAR 0 6
6529: PUSH
6530: LD_VAR 0 7
6534: PUSH
6535: LD_VAR 0 5
6539: PUSH
6540: LD_INT 1
6542: MINUS
6543: ARRAY
6544: PPUSH
6545: LD_VAR 0 2
6549: PUSH
6550: LD_VAR 0 5
6554: PUSH
6555: LD_INT 1
6557: MINUS
6558: ARRAY
6559: PPUSH
6560: LD_VAR 0 7
6564: PUSH
6565: LD_VAR 0 5
6569: ARRAY
6570: PPUSH
6571: CALL_OW 1
6575: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6576: LD_ADDR_VAR 0 7
6580: PUSH
6581: LD_VAR 0 7
6585: PPUSH
6586: LD_VAR 0 5
6590: PUSH
6591: LD_INT 1
6593: MINUS
6594: PPUSH
6595: LD_VAR 0 6
6599: PPUSH
6600: CALL_OW 1
6604: ST_TO_ADDR
// end ;
6605: GO 6522
6607: POP
6608: POP
// result := s_arr [ 1 ] ;
6609: LD_ADDR_VAR 0 4
6613: PUSH
6614: LD_VAR 0 7
6618: PUSH
6619: LD_INT 1
6621: ARRAY
6622: ST_TO_ADDR
// end ; end ;
6623: LD_VAR 0 4
6627: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6628: LD_INT 0
6630: PPUSH
6631: PPUSH
// if not list then
6632: LD_VAR 0 1
6636: NOT
6637: IFFALSE 6641
// exit ;
6639: GO 6732
// i := list [ pos1 ] ;
6641: LD_ADDR_VAR 0 5
6645: PUSH
6646: LD_VAR 0 1
6650: PUSH
6651: LD_VAR 0 2
6655: ARRAY
6656: ST_TO_ADDR
// if not i then
6657: LD_VAR 0 5
6661: NOT
6662: IFFALSE 6666
// exit ;
6664: GO 6732
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6666: LD_ADDR_VAR 0 1
6670: PUSH
6671: LD_VAR 0 1
6675: PPUSH
6676: LD_VAR 0 2
6680: PPUSH
6681: LD_VAR 0 1
6685: PUSH
6686: LD_VAR 0 3
6690: ARRAY
6691: PPUSH
6692: CALL_OW 1
6696: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6697: LD_ADDR_VAR 0 1
6701: PUSH
6702: LD_VAR 0 1
6706: PPUSH
6707: LD_VAR 0 3
6711: PPUSH
6712: LD_VAR 0 5
6716: PPUSH
6717: CALL_OW 1
6721: ST_TO_ADDR
// result := list ;
6722: LD_ADDR_VAR 0 4
6726: PUSH
6727: LD_VAR 0 1
6731: ST_TO_ADDR
// end ;
6732: LD_VAR 0 4
6736: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6737: LD_INT 0
6739: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6740: LD_ADDR_VAR 0 5
6744: PUSH
6745: LD_VAR 0 1
6749: PPUSH
6750: CALL_OW 250
6754: PPUSH
6755: LD_VAR 0 1
6759: PPUSH
6760: CALL_OW 251
6764: PPUSH
6765: LD_VAR 0 2
6769: PPUSH
6770: LD_VAR 0 3
6774: PPUSH
6775: LD_VAR 0 4
6779: PPUSH
6780: CALL 6790 0 5
6784: ST_TO_ADDR
// end ;
6785: LD_VAR 0 5
6789: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6790: LD_INT 0
6792: PPUSH
6793: PPUSH
6794: PPUSH
6795: PPUSH
// if not list then
6796: LD_VAR 0 3
6800: NOT
6801: IFFALSE 6805
// exit ;
6803: GO 7193
// result := [ ] ;
6805: LD_ADDR_VAR 0 6
6809: PUSH
6810: EMPTY
6811: ST_TO_ADDR
// for i in list do
6812: LD_ADDR_VAR 0 7
6816: PUSH
6817: LD_VAR 0 3
6821: PUSH
6822: FOR_IN
6823: IFFALSE 7025
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6825: LD_ADDR_VAR 0 9
6829: PUSH
6830: LD_VAR 0 7
6834: PPUSH
6835: LD_VAR 0 1
6839: PPUSH
6840: LD_VAR 0 2
6844: PPUSH
6845: CALL_OW 297
6849: ST_TO_ADDR
// if not result then
6850: LD_VAR 0 6
6854: NOT
6855: IFFALSE 6881
// result := [ [ i , tmp ] ] else
6857: LD_ADDR_VAR 0 6
6861: PUSH
6862: LD_VAR 0 7
6866: PUSH
6867: LD_VAR 0 9
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: ST_TO_ADDR
6879: GO 7023
// begin if result [ result ] [ 2 ] < tmp then
6881: LD_VAR 0 6
6885: PUSH
6886: LD_VAR 0 6
6890: ARRAY
6891: PUSH
6892: LD_INT 2
6894: ARRAY
6895: PUSH
6896: LD_VAR 0 9
6900: LESS
6901: IFFALSE 6943
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6903: LD_ADDR_VAR 0 6
6907: PUSH
6908: LD_VAR 0 6
6912: PPUSH
6913: LD_VAR 0 6
6917: PUSH
6918: LD_INT 1
6920: PLUS
6921: PPUSH
6922: LD_VAR 0 7
6926: PUSH
6927: LD_VAR 0 9
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PPUSH
6936: CALL_OW 2
6940: ST_TO_ADDR
6941: GO 7023
// for j = 1 to result do
6943: LD_ADDR_VAR 0 8
6947: PUSH
6948: DOUBLE
6949: LD_INT 1
6951: DEC
6952: ST_TO_ADDR
6953: LD_VAR 0 6
6957: PUSH
6958: FOR_TO
6959: IFFALSE 7021
// begin if tmp < result [ j ] [ 2 ] then
6961: LD_VAR 0 9
6965: PUSH
6966: LD_VAR 0 6
6970: PUSH
6971: LD_VAR 0 8
6975: ARRAY
6976: PUSH
6977: LD_INT 2
6979: ARRAY
6980: LESS
6981: IFFALSE 7019
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6983: LD_ADDR_VAR 0 6
6987: PUSH
6988: LD_VAR 0 6
6992: PPUSH
6993: LD_VAR 0 8
6997: PPUSH
6998: LD_VAR 0 7
7002: PUSH
7003: LD_VAR 0 9
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PPUSH
7012: CALL_OW 2
7016: ST_TO_ADDR
// break ;
7017: GO 7021
// end ; end ;
7019: GO 6958
7021: POP
7022: POP
// end ; end ;
7023: GO 6822
7025: POP
7026: POP
// if result and not asc then
7027: LD_VAR 0 6
7031: PUSH
7032: LD_VAR 0 4
7036: NOT
7037: AND
7038: IFFALSE 7113
// begin tmp := result ;
7040: LD_ADDR_VAR 0 9
7044: PUSH
7045: LD_VAR 0 6
7049: ST_TO_ADDR
// for i = tmp downto 1 do
7050: LD_ADDR_VAR 0 7
7054: PUSH
7055: DOUBLE
7056: LD_VAR 0 9
7060: INC
7061: ST_TO_ADDR
7062: LD_INT 1
7064: PUSH
7065: FOR_DOWNTO
7066: IFFALSE 7111
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7068: LD_ADDR_VAR 0 6
7072: PUSH
7073: LD_VAR 0 6
7077: PPUSH
7078: LD_VAR 0 9
7082: PUSH
7083: LD_VAR 0 7
7087: MINUS
7088: PUSH
7089: LD_INT 1
7091: PLUS
7092: PPUSH
7093: LD_VAR 0 9
7097: PUSH
7098: LD_VAR 0 7
7102: ARRAY
7103: PPUSH
7104: CALL_OW 1
7108: ST_TO_ADDR
7109: GO 7065
7111: POP
7112: POP
// end ; tmp := [ ] ;
7113: LD_ADDR_VAR 0 9
7117: PUSH
7118: EMPTY
7119: ST_TO_ADDR
// if mode then
7120: LD_VAR 0 5
7124: IFFALSE 7193
// begin for i = 1 to result do
7126: LD_ADDR_VAR 0 7
7130: PUSH
7131: DOUBLE
7132: LD_INT 1
7134: DEC
7135: ST_TO_ADDR
7136: LD_VAR 0 6
7140: PUSH
7141: FOR_TO
7142: IFFALSE 7181
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7144: LD_ADDR_VAR 0 9
7148: PUSH
7149: LD_VAR 0 9
7153: PPUSH
7154: LD_VAR 0 7
7158: PPUSH
7159: LD_VAR 0 6
7163: PUSH
7164: LD_VAR 0 7
7168: ARRAY
7169: PUSH
7170: LD_INT 1
7172: ARRAY
7173: PPUSH
7174: CALL_OW 1
7178: ST_TO_ADDR
7179: GO 7141
7181: POP
7182: POP
// result := tmp ;
7183: LD_ADDR_VAR 0 6
7187: PUSH
7188: LD_VAR 0 9
7192: ST_TO_ADDR
// end ; end ;
7193: LD_VAR 0 6
7197: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7198: LD_INT 0
7200: PPUSH
7201: PPUSH
7202: PPUSH
7203: PPUSH
7204: PPUSH
7205: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7206: LD_ADDR_VAR 0 5
7210: PUSH
7211: LD_INT 0
7213: PUSH
7214: LD_INT 0
7216: PUSH
7217: LD_INT 0
7219: PUSH
7220: EMPTY
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: ST_TO_ADDR
// if not x or not y then
7228: LD_VAR 0 2
7232: NOT
7233: PUSH
7234: LD_VAR 0 3
7238: NOT
7239: OR
7240: IFFALSE 7244
// exit ;
7242: GO 8896
// if not range then
7244: LD_VAR 0 4
7248: NOT
7249: IFFALSE 7259
// range := 10 ;
7251: LD_ADDR_VAR 0 4
7255: PUSH
7256: LD_INT 10
7258: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7259: LD_ADDR_VAR 0 8
7263: PUSH
7264: LD_INT 81
7266: PUSH
7267: LD_VAR 0 1
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: LD_INT 92
7278: PUSH
7279: LD_VAR 0 2
7283: PUSH
7284: LD_VAR 0 3
7288: PUSH
7289: LD_VAR 0 4
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: PUSH
7300: LD_INT 3
7302: PUSH
7303: LD_INT 21
7305: PUSH
7306: LD_INT 3
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: LIST
7321: PPUSH
7322: CALL_OW 69
7326: ST_TO_ADDR
// if not tmp then
7327: LD_VAR 0 8
7331: NOT
7332: IFFALSE 7336
// exit ;
7334: GO 8896
// for i in tmp do
7336: LD_ADDR_VAR 0 6
7340: PUSH
7341: LD_VAR 0 8
7345: PUSH
7346: FOR_IN
7347: IFFALSE 8871
// begin points := [ 0 , 0 , 0 ] ;
7349: LD_ADDR_VAR 0 9
7353: PUSH
7354: LD_INT 0
7356: PUSH
7357: LD_INT 0
7359: PUSH
7360: LD_INT 0
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: LIST
7367: ST_TO_ADDR
// bpoints := 1 ;
7368: LD_ADDR_VAR 0 10
7372: PUSH
7373: LD_INT 1
7375: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7376: LD_VAR 0 6
7380: PPUSH
7381: CALL_OW 247
7385: PUSH
7386: LD_INT 1
7388: DOUBLE
7389: EQUAL
7390: IFTRUE 7394
7392: GO 7972
7394: POP
// begin if GetClass ( i ) = 1 then
7395: LD_VAR 0 6
7399: PPUSH
7400: CALL_OW 257
7404: PUSH
7405: LD_INT 1
7407: EQUAL
7408: IFFALSE 7429
// points := [ 10 , 5 , 3 ] ;
7410: LD_ADDR_VAR 0 9
7414: PUSH
7415: LD_INT 10
7417: PUSH
7418: LD_INT 5
7420: PUSH
7421: LD_INT 3
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7429: LD_VAR 0 6
7433: PPUSH
7434: CALL_OW 257
7438: PUSH
7439: LD_INT 2
7441: PUSH
7442: LD_INT 3
7444: PUSH
7445: LD_INT 4
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: LIST
7452: IN
7453: IFFALSE 7474
// points := [ 3 , 2 , 1 ] ;
7455: LD_ADDR_VAR 0 9
7459: PUSH
7460: LD_INT 3
7462: PUSH
7463: LD_INT 2
7465: PUSH
7466: LD_INT 1
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: LIST
7473: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7474: LD_VAR 0 6
7478: PPUSH
7479: CALL_OW 257
7483: PUSH
7484: LD_INT 5
7486: EQUAL
7487: IFFALSE 7508
// points := [ 130 , 5 , 2 ] ;
7489: LD_ADDR_VAR 0 9
7493: PUSH
7494: LD_INT 130
7496: PUSH
7497: LD_INT 5
7499: PUSH
7500: LD_INT 2
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7508: LD_VAR 0 6
7512: PPUSH
7513: CALL_OW 257
7517: PUSH
7518: LD_INT 8
7520: EQUAL
7521: IFFALSE 7542
// points := [ 35 , 35 , 30 ] ;
7523: LD_ADDR_VAR 0 9
7527: PUSH
7528: LD_INT 35
7530: PUSH
7531: LD_INT 35
7533: PUSH
7534: LD_INT 30
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: LIST
7541: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7542: LD_VAR 0 6
7546: PPUSH
7547: CALL_OW 257
7551: PUSH
7552: LD_INT 9
7554: EQUAL
7555: IFFALSE 7576
// points := [ 20 , 55 , 40 ] ;
7557: LD_ADDR_VAR 0 9
7561: PUSH
7562: LD_INT 20
7564: PUSH
7565: LD_INT 55
7567: PUSH
7568: LD_INT 40
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7576: LD_VAR 0 6
7580: PPUSH
7581: CALL_OW 257
7585: PUSH
7586: LD_INT 12
7588: PUSH
7589: LD_INT 16
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: IN
7596: IFFALSE 7617
// points := [ 5 , 3 , 2 ] ;
7598: LD_ADDR_VAR 0 9
7602: PUSH
7603: LD_INT 5
7605: PUSH
7606: LD_INT 3
7608: PUSH
7609: LD_INT 2
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: LIST
7616: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7617: LD_VAR 0 6
7621: PPUSH
7622: CALL_OW 257
7626: PUSH
7627: LD_INT 17
7629: EQUAL
7630: IFFALSE 7651
// points := [ 100 , 50 , 75 ] ;
7632: LD_ADDR_VAR 0 9
7636: PUSH
7637: LD_INT 100
7639: PUSH
7640: LD_INT 50
7642: PUSH
7643: LD_INT 75
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7651: LD_VAR 0 6
7655: PPUSH
7656: CALL_OW 257
7660: PUSH
7661: LD_INT 15
7663: EQUAL
7664: IFFALSE 7685
// points := [ 10 , 5 , 3 ] ;
7666: LD_ADDR_VAR 0 9
7670: PUSH
7671: LD_INT 10
7673: PUSH
7674: LD_INT 5
7676: PUSH
7677: LD_INT 3
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7685: LD_VAR 0 6
7689: PPUSH
7690: CALL_OW 257
7694: PUSH
7695: LD_INT 14
7697: EQUAL
7698: IFFALSE 7719
// points := [ 10 , 0 , 0 ] ;
7700: LD_ADDR_VAR 0 9
7704: PUSH
7705: LD_INT 10
7707: PUSH
7708: LD_INT 0
7710: PUSH
7711: LD_INT 0
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: LIST
7718: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7719: LD_VAR 0 6
7723: PPUSH
7724: CALL_OW 257
7728: PUSH
7729: LD_INT 11
7731: EQUAL
7732: IFFALSE 7753
// points := [ 30 , 10 , 5 ] ;
7734: LD_ADDR_VAR 0 9
7738: PUSH
7739: LD_INT 30
7741: PUSH
7742: LD_INT 10
7744: PUSH
7745: LD_INT 5
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: LIST
7752: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7753: LD_VAR 0 1
7757: PPUSH
7758: LD_INT 5
7760: PPUSH
7761: CALL_OW 321
7765: PUSH
7766: LD_INT 2
7768: EQUAL
7769: IFFALSE 7786
// bpoints := bpoints * 1.8 ;
7771: LD_ADDR_VAR 0 10
7775: PUSH
7776: LD_VAR 0 10
7780: PUSH
7781: LD_REAL  1.80000000000000E+0000
7784: MUL
7785: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7786: LD_VAR 0 6
7790: PPUSH
7791: CALL_OW 257
7795: PUSH
7796: LD_INT 1
7798: PUSH
7799: LD_INT 2
7801: PUSH
7802: LD_INT 3
7804: PUSH
7805: LD_INT 4
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: IN
7814: PUSH
7815: LD_VAR 0 1
7819: PPUSH
7820: LD_INT 51
7822: PPUSH
7823: CALL_OW 321
7827: PUSH
7828: LD_INT 2
7830: EQUAL
7831: AND
7832: IFFALSE 7849
// bpoints := bpoints * 1.2 ;
7834: LD_ADDR_VAR 0 10
7838: PUSH
7839: LD_VAR 0 10
7843: PUSH
7844: LD_REAL  1.20000000000000E+0000
7847: MUL
7848: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7849: LD_VAR 0 6
7853: PPUSH
7854: CALL_OW 257
7858: PUSH
7859: LD_INT 5
7861: PUSH
7862: LD_INT 7
7864: PUSH
7865: LD_INT 9
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: IN
7873: PUSH
7874: LD_VAR 0 1
7878: PPUSH
7879: LD_INT 52
7881: PPUSH
7882: CALL_OW 321
7886: PUSH
7887: LD_INT 2
7889: EQUAL
7890: AND
7891: IFFALSE 7908
// bpoints := bpoints * 1.5 ;
7893: LD_ADDR_VAR 0 10
7897: PUSH
7898: LD_VAR 0 10
7902: PUSH
7903: LD_REAL  1.50000000000000E+0000
7906: MUL
7907: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7908: LD_VAR 0 1
7912: PPUSH
7913: LD_INT 66
7915: PPUSH
7916: CALL_OW 321
7920: PUSH
7921: LD_INT 2
7923: EQUAL
7924: IFFALSE 7941
// bpoints := bpoints * 1.1 ;
7926: LD_ADDR_VAR 0 10
7930: PUSH
7931: LD_VAR 0 10
7935: PUSH
7936: LD_REAL  1.10000000000000E+0000
7939: MUL
7940: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7941: LD_ADDR_VAR 0 10
7945: PUSH
7946: LD_VAR 0 10
7950: PUSH
7951: LD_VAR 0 6
7955: PPUSH
7956: LD_INT 1
7958: PPUSH
7959: CALL_OW 259
7963: PUSH
7964: LD_REAL  1.15000000000000E+0000
7967: MUL
7968: MUL
7969: ST_TO_ADDR
// end ; unit_vehicle :
7970: GO 8800
7972: LD_INT 2
7974: DOUBLE
7975: EQUAL
7976: IFTRUE 7980
7978: GO 8788
7980: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7981: LD_VAR 0 6
7985: PPUSH
7986: CALL_OW 264
7990: PUSH
7991: LD_INT 2
7993: PUSH
7994: LD_INT 42
7996: PUSH
7997: LD_INT 24
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: LIST
8004: IN
8005: IFFALSE 8026
// points := [ 25 , 5 , 3 ] ;
8007: LD_ADDR_VAR 0 9
8011: PUSH
8012: LD_INT 25
8014: PUSH
8015: LD_INT 5
8017: PUSH
8018: LD_INT 3
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: LIST
8025: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8026: LD_VAR 0 6
8030: PPUSH
8031: CALL_OW 264
8035: PUSH
8036: LD_INT 4
8038: PUSH
8039: LD_INT 43
8041: PUSH
8042: LD_INT 25
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: IN
8050: IFFALSE 8071
// points := [ 40 , 15 , 5 ] ;
8052: LD_ADDR_VAR 0 9
8056: PUSH
8057: LD_INT 40
8059: PUSH
8060: LD_INT 15
8062: PUSH
8063: LD_INT 5
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8071: LD_VAR 0 6
8075: PPUSH
8076: CALL_OW 264
8080: PUSH
8081: LD_INT 3
8083: PUSH
8084: LD_INT 23
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: IN
8091: IFFALSE 8112
// points := [ 7 , 25 , 8 ] ;
8093: LD_ADDR_VAR 0 9
8097: PUSH
8098: LD_INT 7
8100: PUSH
8101: LD_INT 25
8103: PUSH
8104: LD_INT 8
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: LIST
8111: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8112: LD_VAR 0 6
8116: PPUSH
8117: CALL_OW 264
8121: PUSH
8122: LD_INT 5
8124: PUSH
8125: LD_INT 27
8127: PUSH
8128: LD_INT 44
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: IN
8136: IFFALSE 8157
// points := [ 14 , 50 , 16 ] ;
8138: LD_ADDR_VAR 0 9
8142: PUSH
8143: LD_INT 14
8145: PUSH
8146: LD_INT 50
8148: PUSH
8149: LD_INT 16
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: LIST
8156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8157: LD_VAR 0 6
8161: PPUSH
8162: CALL_OW 264
8166: PUSH
8167: LD_INT 6
8169: PUSH
8170: LD_INT 46
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: IN
8177: IFFALSE 8198
// points := [ 32 , 120 , 70 ] ;
8179: LD_ADDR_VAR 0 9
8183: PUSH
8184: LD_INT 32
8186: PUSH
8187: LD_INT 120
8189: PUSH
8190: LD_INT 70
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: LIST
8197: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8198: LD_VAR 0 6
8202: PPUSH
8203: CALL_OW 264
8207: PUSH
8208: LD_INT 7
8210: PUSH
8211: LD_INT 28
8213: PUSH
8214: LD_INT 45
8216: PUSH
8217: LD_EXP 8
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: IN
8228: IFFALSE 8249
// points := [ 35 , 20 , 45 ] ;
8230: LD_ADDR_VAR 0 9
8234: PUSH
8235: LD_INT 35
8237: PUSH
8238: LD_INT 20
8240: PUSH
8241: LD_INT 45
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: LIST
8248: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8249: LD_VAR 0 6
8253: PPUSH
8254: CALL_OW 264
8258: PUSH
8259: LD_INT 47
8261: PUSH
8262: EMPTY
8263: LIST
8264: IN
8265: IFFALSE 8286
// points := [ 67 , 45 , 75 ] ;
8267: LD_ADDR_VAR 0 9
8271: PUSH
8272: LD_INT 67
8274: PUSH
8275: LD_INT 45
8277: PUSH
8278: LD_INT 75
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8286: LD_VAR 0 6
8290: PPUSH
8291: CALL_OW 264
8295: PUSH
8296: LD_INT 26
8298: PUSH
8299: EMPTY
8300: LIST
8301: IN
8302: IFFALSE 8323
// points := [ 120 , 30 , 80 ] ;
8304: LD_ADDR_VAR 0 9
8308: PUSH
8309: LD_INT 120
8311: PUSH
8312: LD_INT 30
8314: PUSH
8315: LD_INT 80
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: LIST
8322: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8323: LD_VAR 0 6
8327: PPUSH
8328: CALL_OW 264
8332: PUSH
8333: LD_INT 22
8335: PUSH
8336: EMPTY
8337: LIST
8338: IN
8339: IFFALSE 8360
// points := [ 40 , 1 , 1 ] ;
8341: LD_ADDR_VAR 0 9
8345: PUSH
8346: LD_INT 40
8348: PUSH
8349: LD_INT 1
8351: PUSH
8352: LD_INT 1
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: LIST
8359: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8360: LD_VAR 0 6
8364: PPUSH
8365: CALL_OW 264
8369: PUSH
8370: LD_INT 29
8372: PUSH
8373: EMPTY
8374: LIST
8375: IN
8376: IFFALSE 8397
// points := [ 70 , 200 , 400 ] ;
8378: LD_ADDR_VAR 0 9
8382: PUSH
8383: LD_INT 70
8385: PUSH
8386: LD_INT 200
8388: PUSH
8389: LD_INT 400
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: LIST
8396: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8397: LD_VAR 0 6
8401: PPUSH
8402: CALL_OW 264
8406: PUSH
8407: LD_INT 14
8409: PUSH
8410: LD_INT 53
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: IN
8417: IFFALSE 8438
// points := [ 40 , 10 , 20 ] ;
8419: LD_ADDR_VAR 0 9
8423: PUSH
8424: LD_INT 40
8426: PUSH
8427: LD_INT 10
8429: PUSH
8430: LD_INT 20
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8438: LD_VAR 0 6
8442: PPUSH
8443: CALL_OW 264
8447: PUSH
8448: LD_INT 9
8450: PUSH
8451: EMPTY
8452: LIST
8453: IN
8454: IFFALSE 8475
// points := [ 5 , 70 , 20 ] ;
8456: LD_ADDR_VAR 0 9
8460: PUSH
8461: LD_INT 5
8463: PUSH
8464: LD_INT 70
8466: PUSH
8467: LD_INT 20
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8475: LD_VAR 0 6
8479: PPUSH
8480: CALL_OW 264
8484: PUSH
8485: LD_INT 10
8487: PUSH
8488: EMPTY
8489: LIST
8490: IN
8491: IFFALSE 8512
// points := [ 35 , 110 , 70 ] ;
8493: LD_ADDR_VAR 0 9
8497: PUSH
8498: LD_INT 35
8500: PUSH
8501: LD_INT 110
8503: PUSH
8504: LD_INT 70
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: LIST
8511: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8512: LD_VAR 0 6
8516: PPUSH
8517: CALL_OW 265
8521: PUSH
8522: LD_INT 25
8524: EQUAL
8525: IFFALSE 8546
// points := [ 80 , 65 , 100 ] ;
8527: LD_ADDR_VAR 0 9
8531: PUSH
8532: LD_INT 80
8534: PUSH
8535: LD_INT 65
8537: PUSH
8538: LD_INT 100
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: LIST
8545: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8546: LD_VAR 0 6
8550: PPUSH
8551: CALL_OW 263
8555: PUSH
8556: LD_INT 1
8558: EQUAL
8559: IFFALSE 8594
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8561: LD_ADDR_VAR 0 10
8565: PUSH
8566: LD_VAR 0 10
8570: PUSH
8571: LD_VAR 0 6
8575: PPUSH
8576: CALL_OW 311
8580: PPUSH
8581: LD_INT 3
8583: PPUSH
8584: CALL_OW 259
8588: PUSH
8589: LD_INT 4
8591: MUL
8592: MUL
8593: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8594: LD_VAR 0 6
8598: PPUSH
8599: CALL_OW 263
8603: PUSH
8604: LD_INT 2
8606: EQUAL
8607: IFFALSE 8658
// begin j := IsControledBy ( i ) ;
8609: LD_ADDR_VAR 0 7
8613: PUSH
8614: LD_VAR 0 6
8618: PPUSH
8619: CALL_OW 312
8623: ST_TO_ADDR
// if j then
8624: LD_VAR 0 7
8628: IFFALSE 8658
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8630: LD_ADDR_VAR 0 10
8634: PUSH
8635: LD_VAR 0 10
8639: PUSH
8640: LD_VAR 0 7
8644: PPUSH
8645: LD_INT 3
8647: PPUSH
8648: CALL_OW 259
8652: PUSH
8653: LD_INT 3
8655: MUL
8656: MUL
8657: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8658: LD_VAR 0 6
8662: PPUSH
8663: CALL_OW 264
8667: PUSH
8668: LD_INT 5
8670: PUSH
8671: LD_INT 6
8673: PUSH
8674: LD_INT 46
8676: PUSH
8677: LD_INT 44
8679: PUSH
8680: LD_INT 47
8682: PUSH
8683: LD_INT 45
8685: PUSH
8686: LD_INT 28
8688: PUSH
8689: LD_INT 7
8691: PUSH
8692: LD_INT 27
8694: PUSH
8695: LD_INT 29
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: IN
8710: PUSH
8711: LD_VAR 0 1
8715: PPUSH
8716: LD_INT 52
8718: PPUSH
8719: CALL_OW 321
8723: PUSH
8724: LD_INT 2
8726: EQUAL
8727: AND
8728: IFFALSE 8745
// bpoints := bpoints * 1.2 ;
8730: LD_ADDR_VAR 0 10
8734: PUSH
8735: LD_VAR 0 10
8739: PUSH
8740: LD_REAL  1.20000000000000E+0000
8743: MUL
8744: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8745: LD_VAR 0 6
8749: PPUSH
8750: CALL_OW 264
8754: PUSH
8755: LD_INT 6
8757: PUSH
8758: LD_INT 46
8760: PUSH
8761: LD_INT 47
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: LIST
8768: IN
8769: IFFALSE 8786
// bpoints := bpoints * 1.2 ;
8771: LD_ADDR_VAR 0 10
8775: PUSH
8776: LD_VAR 0 10
8780: PUSH
8781: LD_REAL  1.20000000000000E+0000
8784: MUL
8785: ST_TO_ADDR
// end ; unit_building :
8786: GO 8800
8788: LD_INT 3
8790: DOUBLE
8791: EQUAL
8792: IFTRUE 8796
8794: GO 8799
8796: POP
// ; end ;
8797: GO 8800
8799: POP
// for j = 1 to 3 do
8800: LD_ADDR_VAR 0 7
8804: PUSH
8805: DOUBLE
8806: LD_INT 1
8808: DEC
8809: ST_TO_ADDR
8810: LD_INT 3
8812: PUSH
8813: FOR_TO
8814: IFFALSE 8867
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8816: LD_ADDR_VAR 0 5
8820: PUSH
8821: LD_VAR 0 5
8825: PPUSH
8826: LD_VAR 0 7
8830: PPUSH
8831: LD_VAR 0 5
8835: PUSH
8836: LD_VAR 0 7
8840: ARRAY
8841: PUSH
8842: LD_VAR 0 9
8846: PUSH
8847: LD_VAR 0 7
8851: ARRAY
8852: PUSH
8853: LD_VAR 0 10
8857: MUL
8858: PLUS
8859: PPUSH
8860: CALL_OW 1
8864: ST_TO_ADDR
8865: GO 8813
8867: POP
8868: POP
// end ;
8869: GO 7346
8871: POP
8872: POP
// result := Replace ( result , 4 , tmp ) ;
8873: LD_ADDR_VAR 0 5
8877: PUSH
8878: LD_VAR 0 5
8882: PPUSH
8883: LD_INT 4
8885: PPUSH
8886: LD_VAR 0 8
8890: PPUSH
8891: CALL_OW 1
8895: ST_TO_ADDR
// end ;
8896: LD_VAR 0 5
8900: RET
// export function DangerAtRange ( unit , range ) ; begin
8901: LD_INT 0
8903: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8904: LD_ADDR_VAR 0 3
8908: PUSH
8909: LD_VAR 0 1
8913: PPUSH
8914: CALL_OW 255
8918: PPUSH
8919: LD_VAR 0 1
8923: PPUSH
8924: CALL_OW 250
8928: PPUSH
8929: LD_VAR 0 1
8933: PPUSH
8934: CALL_OW 251
8938: PPUSH
8939: LD_VAR 0 2
8943: PPUSH
8944: CALL 7198 0 4
8948: ST_TO_ADDR
// end ;
8949: LD_VAR 0 3
8953: RET
// export function DangerInArea ( side , area ) ; begin
8954: LD_INT 0
8956: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8957: LD_ADDR_VAR 0 3
8961: PUSH
8962: LD_VAR 0 2
8966: PPUSH
8967: LD_INT 81
8969: PUSH
8970: LD_VAR 0 1
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PPUSH
8979: CALL_OW 70
8983: ST_TO_ADDR
// end ;
8984: LD_VAR 0 3
8988: RET
// export function IsExtension ( b ) ; begin
8989: LD_INT 0
8991: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8992: LD_ADDR_VAR 0 2
8996: PUSH
8997: LD_VAR 0 1
9001: PUSH
9002: LD_INT 23
9004: PUSH
9005: LD_INT 20
9007: PUSH
9008: LD_INT 22
9010: PUSH
9011: LD_INT 17
9013: PUSH
9014: LD_INT 24
9016: PUSH
9017: LD_INT 21
9019: PUSH
9020: LD_INT 19
9022: PUSH
9023: LD_INT 16
9025: PUSH
9026: LD_INT 25
9028: PUSH
9029: LD_INT 18
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: IN
9044: ST_TO_ADDR
// end ;
9045: LD_VAR 0 2
9049: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9050: LD_INT 0
9052: PPUSH
9053: PPUSH
9054: PPUSH
// result := [ ] ;
9055: LD_ADDR_VAR 0 4
9059: PUSH
9060: EMPTY
9061: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9062: LD_ADDR_VAR 0 5
9066: PUSH
9067: LD_VAR 0 2
9071: PPUSH
9072: LD_INT 21
9074: PUSH
9075: LD_INT 3
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PPUSH
9082: CALL_OW 70
9086: ST_TO_ADDR
// if not tmp then
9087: LD_VAR 0 5
9091: NOT
9092: IFFALSE 9096
// exit ;
9094: GO 9160
// if checkLink then
9096: LD_VAR 0 3
9100: IFFALSE 9150
// begin for i in tmp do
9102: LD_ADDR_VAR 0 6
9106: PUSH
9107: LD_VAR 0 5
9111: PUSH
9112: FOR_IN
9113: IFFALSE 9148
// if GetBase ( i ) <> base then
9115: LD_VAR 0 6
9119: PPUSH
9120: CALL_OW 274
9124: PUSH
9125: LD_VAR 0 1
9129: NONEQUAL
9130: IFFALSE 9146
// ComLinkToBase ( base , i ) ;
9132: LD_VAR 0 1
9136: PPUSH
9137: LD_VAR 0 6
9141: PPUSH
9142: CALL_OW 169
9146: GO 9112
9148: POP
9149: POP
// end ; result := tmp ;
9150: LD_ADDR_VAR 0 4
9154: PUSH
9155: LD_VAR 0 5
9159: ST_TO_ADDR
// end ;
9160: LD_VAR 0 4
9164: RET
// export function ComComplete ( units , b ) ; var i ; begin
9165: LD_INT 0
9167: PPUSH
9168: PPUSH
// if not units then
9169: LD_VAR 0 1
9173: NOT
9174: IFFALSE 9178
// exit ;
9176: GO 9268
// for i in units do
9178: LD_ADDR_VAR 0 4
9182: PUSH
9183: LD_VAR 0 1
9187: PUSH
9188: FOR_IN
9189: IFFALSE 9266
// if BuildingStatus ( b ) = bs_build then
9191: LD_VAR 0 2
9195: PPUSH
9196: CALL_OW 461
9200: PUSH
9201: LD_INT 1
9203: EQUAL
9204: IFFALSE 9264
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9206: LD_VAR 0 4
9210: PPUSH
9211: LD_STRING h
9213: PUSH
9214: LD_VAR 0 2
9218: PPUSH
9219: CALL_OW 250
9223: PUSH
9224: LD_VAR 0 2
9228: PPUSH
9229: CALL_OW 251
9233: PUSH
9234: LD_VAR 0 2
9238: PUSH
9239: LD_INT 0
9241: PUSH
9242: LD_INT 0
9244: PUSH
9245: LD_INT 0
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: PUSH
9257: EMPTY
9258: LIST
9259: PPUSH
9260: CALL_OW 446
9264: GO 9188
9266: POP
9267: POP
// end ;
9268: LD_VAR 0 3
9272: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9273: LD_INT 0
9275: PPUSH
9276: PPUSH
9277: PPUSH
9278: PPUSH
9279: PPUSH
9280: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9281: LD_VAR 0 1
9285: NOT
9286: PUSH
9287: LD_VAR 0 1
9291: PPUSH
9292: CALL_OW 263
9296: PUSH
9297: LD_INT 2
9299: NONEQUAL
9300: OR
9301: IFFALSE 9305
// exit ;
9303: GO 9621
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9305: LD_ADDR_VAR 0 6
9309: PUSH
9310: LD_INT 22
9312: PUSH
9313: LD_VAR 0 1
9317: PPUSH
9318: CALL_OW 255
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: PUSH
9327: LD_INT 2
9329: PUSH
9330: LD_INT 30
9332: PUSH
9333: LD_INT 36
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 34
9342: PUSH
9343: LD_INT 31
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: LIST
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PPUSH
9359: CALL_OW 69
9363: ST_TO_ADDR
// if not tmp then
9364: LD_VAR 0 6
9368: NOT
9369: IFFALSE 9373
// exit ;
9371: GO 9621
// result := [ ] ;
9373: LD_ADDR_VAR 0 2
9377: PUSH
9378: EMPTY
9379: ST_TO_ADDR
// for i in tmp do
9380: LD_ADDR_VAR 0 3
9384: PUSH
9385: LD_VAR 0 6
9389: PUSH
9390: FOR_IN
9391: IFFALSE 9462
// begin t := UnitsInside ( i ) ;
9393: LD_ADDR_VAR 0 4
9397: PUSH
9398: LD_VAR 0 3
9402: PPUSH
9403: CALL_OW 313
9407: ST_TO_ADDR
// if t then
9408: LD_VAR 0 4
9412: IFFALSE 9460
// for j in t do
9414: LD_ADDR_VAR 0 7
9418: PUSH
9419: LD_VAR 0 4
9423: PUSH
9424: FOR_IN
9425: IFFALSE 9458
// result := Replace ( result , result + 1 , j ) ;
9427: LD_ADDR_VAR 0 2
9431: PUSH
9432: LD_VAR 0 2
9436: PPUSH
9437: LD_VAR 0 2
9441: PUSH
9442: LD_INT 1
9444: PLUS
9445: PPUSH
9446: LD_VAR 0 7
9450: PPUSH
9451: CALL_OW 1
9455: ST_TO_ADDR
9456: GO 9424
9458: POP
9459: POP
// end ;
9460: GO 9390
9462: POP
9463: POP
// if not result then
9464: LD_VAR 0 2
9468: NOT
9469: IFFALSE 9473
// exit ;
9471: GO 9621
// mech := result [ 1 ] ;
9473: LD_ADDR_VAR 0 5
9477: PUSH
9478: LD_VAR 0 2
9482: PUSH
9483: LD_INT 1
9485: ARRAY
9486: ST_TO_ADDR
// if result > 1 then
9487: LD_VAR 0 2
9491: PUSH
9492: LD_INT 1
9494: GREATER
9495: IFFALSE 9607
// begin for i = 2 to result do
9497: LD_ADDR_VAR 0 3
9501: PUSH
9502: DOUBLE
9503: LD_INT 2
9505: DEC
9506: ST_TO_ADDR
9507: LD_VAR 0 2
9511: PUSH
9512: FOR_TO
9513: IFFALSE 9605
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9515: LD_ADDR_VAR 0 4
9519: PUSH
9520: LD_VAR 0 2
9524: PUSH
9525: LD_VAR 0 3
9529: ARRAY
9530: PPUSH
9531: LD_INT 3
9533: PPUSH
9534: CALL_OW 259
9538: PUSH
9539: LD_VAR 0 2
9543: PUSH
9544: LD_VAR 0 3
9548: ARRAY
9549: PPUSH
9550: CALL_OW 432
9554: MINUS
9555: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9556: LD_VAR 0 4
9560: PUSH
9561: LD_VAR 0 5
9565: PPUSH
9566: LD_INT 3
9568: PPUSH
9569: CALL_OW 259
9573: PUSH
9574: LD_VAR 0 5
9578: PPUSH
9579: CALL_OW 432
9583: MINUS
9584: GREATEREQUAL
9585: IFFALSE 9603
// mech := result [ i ] ;
9587: LD_ADDR_VAR 0 5
9591: PUSH
9592: LD_VAR 0 2
9596: PUSH
9597: LD_VAR 0 3
9601: ARRAY
9602: ST_TO_ADDR
// end ;
9603: GO 9512
9605: POP
9606: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9607: LD_VAR 0 1
9611: PPUSH
9612: LD_VAR 0 5
9616: PPUSH
9617: CALL_OW 135
// end ;
9621: LD_VAR 0 2
9625: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9626: LD_INT 0
9628: PPUSH
9629: PPUSH
9630: PPUSH
9631: PPUSH
9632: PPUSH
9633: PPUSH
9634: PPUSH
9635: PPUSH
9636: PPUSH
9637: PPUSH
9638: PPUSH
9639: PPUSH
9640: PPUSH
// result := [ ] ;
9641: LD_ADDR_VAR 0 7
9645: PUSH
9646: EMPTY
9647: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9648: LD_VAR 0 1
9652: PPUSH
9653: CALL_OW 266
9657: PUSH
9658: LD_INT 0
9660: PUSH
9661: LD_INT 1
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: IN
9668: NOT
9669: IFFALSE 9673
// exit ;
9671: GO 11307
// if name then
9673: LD_VAR 0 3
9677: IFFALSE 9693
// SetBName ( base_dep , name ) ;
9679: LD_VAR 0 1
9683: PPUSH
9684: LD_VAR 0 3
9688: PPUSH
9689: CALL_OW 500
// base := GetBase ( base_dep ) ;
9693: LD_ADDR_VAR 0 15
9697: PUSH
9698: LD_VAR 0 1
9702: PPUSH
9703: CALL_OW 274
9707: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9708: LD_ADDR_VAR 0 16
9712: PUSH
9713: LD_VAR 0 1
9717: PPUSH
9718: CALL_OW 255
9722: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9723: LD_ADDR_VAR 0 17
9727: PUSH
9728: LD_VAR 0 1
9732: PPUSH
9733: CALL_OW 248
9737: ST_TO_ADDR
// if sources then
9738: LD_VAR 0 5
9742: IFFALSE 9789
// for i = 1 to 3 do
9744: LD_ADDR_VAR 0 8
9748: PUSH
9749: DOUBLE
9750: LD_INT 1
9752: DEC
9753: ST_TO_ADDR
9754: LD_INT 3
9756: PUSH
9757: FOR_TO
9758: IFFALSE 9787
// AddResourceType ( base , i , sources [ i ] ) ;
9760: LD_VAR 0 15
9764: PPUSH
9765: LD_VAR 0 8
9769: PPUSH
9770: LD_VAR 0 5
9774: PUSH
9775: LD_VAR 0 8
9779: ARRAY
9780: PPUSH
9781: CALL_OW 276
9785: GO 9757
9787: POP
9788: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9789: LD_ADDR_VAR 0 18
9793: PUSH
9794: LD_VAR 0 15
9798: PPUSH
9799: LD_VAR 0 2
9803: PPUSH
9804: LD_INT 1
9806: PPUSH
9807: CALL 9050 0 3
9811: ST_TO_ADDR
// InitHc ;
9812: CALL_OW 19
// InitUc ;
9816: CALL_OW 18
// uc_side := side ;
9820: LD_ADDR_OWVAR 20
9824: PUSH
9825: LD_VAR 0 16
9829: ST_TO_ADDR
// uc_nation := nation ;
9830: LD_ADDR_OWVAR 21
9834: PUSH
9835: LD_VAR 0 17
9839: ST_TO_ADDR
// if buildings then
9840: LD_VAR 0 18
9844: IFFALSE 11166
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9846: LD_ADDR_VAR 0 19
9850: PUSH
9851: LD_VAR 0 18
9855: PPUSH
9856: LD_INT 2
9858: PUSH
9859: LD_INT 30
9861: PUSH
9862: LD_INT 29
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 30
9871: PUSH
9872: LD_INT 30
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: LIST
9883: PPUSH
9884: CALL_OW 72
9888: ST_TO_ADDR
// if tmp then
9889: LD_VAR 0 19
9893: IFFALSE 9941
// for i in tmp do
9895: LD_ADDR_VAR 0 8
9899: PUSH
9900: LD_VAR 0 19
9904: PUSH
9905: FOR_IN
9906: IFFALSE 9939
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9908: LD_VAR 0 8
9912: PPUSH
9913: CALL_OW 250
9917: PPUSH
9918: LD_VAR 0 8
9922: PPUSH
9923: CALL_OW 251
9927: PPUSH
9928: LD_VAR 0 16
9932: PPUSH
9933: CALL_OW 441
9937: GO 9905
9939: POP
9940: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9941: LD_VAR 0 18
9945: PPUSH
9946: LD_INT 2
9948: PUSH
9949: LD_INT 30
9951: PUSH
9952: LD_INT 32
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 30
9961: PUSH
9962: LD_INT 33
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: LIST
9973: PPUSH
9974: CALL_OW 72
9978: IFFALSE 10066
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9980: LD_ADDR_VAR 0 8
9984: PUSH
9985: LD_VAR 0 18
9989: PPUSH
9990: LD_INT 2
9992: PUSH
9993: LD_INT 30
9995: PUSH
9996: LD_INT 32
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: LD_INT 30
10005: PUSH
10006: LD_INT 33
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: LIST
10017: PPUSH
10018: CALL_OW 72
10022: PUSH
10023: FOR_IN
10024: IFFALSE 10064
// begin if not GetBWeapon ( i ) then
10026: LD_VAR 0 8
10030: PPUSH
10031: CALL_OW 269
10035: NOT
10036: IFFALSE 10062
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10038: LD_VAR 0 8
10042: PPUSH
10043: LD_VAR 0 8
10047: PPUSH
10048: LD_VAR 0 2
10052: PPUSH
10053: CALL 11312 0 2
10057: PPUSH
10058: CALL_OW 431
// end ;
10062: GO 10023
10064: POP
10065: POP
// end ; for i = 1 to personel do
10066: LD_ADDR_VAR 0 8
10070: PUSH
10071: DOUBLE
10072: LD_INT 1
10074: DEC
10075: ST_TO_ADDR
10076: LD_VAR 0 6
10080: PUSH
10081: FOR_TO
10082: IFFALSE 11146
// begin if i > 4 then
10084: LD_VAR 0 8
10088: PUSH
10089: LD_INT 4
10091: GREATER
10092: IFFALSE 10096
// break ;
10094: GO 11146
// case i of 1 :
10096: LD_VAR 0 8
10100: PUSH
10101: LD_INT 1
10103: DOUBLE
10104: EQUAL
10105: IFTRUE 10109
10107: GO 10189
10109: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10110: LD_ADDR_VAR 0 12
10114: PUSH
10115: LD_VAR 0 18
10119: PPUSH
10120: LD_INT 22
10122: PUSH
10123: LD_VAR 0 16
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: LD_INT 58
10134: PUSH
10135: EMPTY
10136: LIST
10137: PUSH
10138: LD_INT 2
10140: PUSH
10141: LD_INT 30
10143: PUSH
10144: LD_INT 32
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_INT 30
10153: PUSH
10154: LD_INT 4
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 30
10163: PUSH
10164: LD_INT 5
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: LIST
10181: PPUSH
10182: CALL_OW 72
10186: ST_TO_ADDR
10187: GO 10411
10189: LD_INT 2
10191: DOUBLE
10192: EQUAL
10193: IFTRUE 10197
10195: GO 10259
10197: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10198: LD_ADDR_VAR 0 12
10202: PUSH
10203: LD_VAR 0 18
10207: PPUSH
10208: LD_INT 22
10210: PUSH
10211: LD_VAR 0 16
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 2
10222: PUSH
10223: LD_INT 30
10225: PUSH
10226: LD_INT 0
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PUSH
10233: LD_INT 30
10235: PUSH
10236: LD_INT 1
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: LIST
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: PPUSH
10252: CALL_OW 72
10256: ST_TO_ADDR
10257: GO 10411
10259: LD_INT 3
10261: DOUBLE
10262: EQUAL
10263: IFTRUE 10267
10265: GO 10329
10267: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10268: LD_ADDR_VAR 0 12
10272: PUSH
10273: LD_VAR 0 18
10277: PPUSH
10278: LD_INT 22
10280: PUSH
10281: LD_VAR 0 16
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: LD_INT 2
10292: PUSH
10293: LD_INT 30
10295: PUSH
10296: LD_INT 2
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: LD_INT 30
10305: PUSH
10306: LD_INT 3
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: LIST
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PPUSH
10322: CALL_OW 72
10326: ST_TO_ADDR
10327: GO 10411
10329: LD_INT 4
10331: DOUBLE
10332: EQUAL
10333: IFTRUE 10337
10335: GO 10410
10337: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10338: LD_ADDR_VAR 0 12
10342: PUSH
10343: LD_VAR 0 18
10347: PPUSH
10348: LD_INT 22
10350: PUSH
10351: LD_VAR 0 16
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 2
10362: PUSH
10363: LD_INT 30
10365: PUSH
10366: LD_INT 6
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 30
10375: PUSH
10376: LD_INT 7
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 30
10385: PUSH
10386: LD_INT 8
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PPUSH
10403: CALL_OW 72
10407: ST_TO_ADDR
10408: GO 10411
10410: POP
// if i = 1 then
10411: LD_VAR 0 8
10415: PUSH
10416: LD_INT 1
10418: EQUAL
10419: IFFALSE 10530
// begin tmp := [ ] ;
10421: LD_ADDR_VAR 0 19
10425: PUSH
10426: EMPTY
10427: ST_TO_ADDR
// for j in f do
10428: LD_ADDR_VAR 0 9
10432: PUSH
10433: LD_VAR 0 12
10437: PUSH
10438: FOR_IN
10439: IFFALSE 10512
// if GetBType ( j ) = b_bunker then
10441: LD_VAR 0 9
10445: PPUSH
10446: CALL_OW 266
10450: PUSH
10451: LD_INT 32
10453: EQUAL
10454: IFFALSE 10481
// tmp := Insert ( tmp , 1 , j ) else
10456: LD_ADDR_VAR 0 19
10460: PUSH
10461: LD_VAR 0 19
10465: PPUSH
10466: LD_INT 1
10468: PPUSH
10469: LD_VAR 0 9
10473: PPUSH
10474: CALL_OW 2
10478: ST_TO_ADDR
10479: GO 10510
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10481: LD_ADDR_VAR 0 19
10485: PUSH
10486: LD_VAR 0 19
10490: PPUSH
10491: LD_VAR 0 19
10495: PUSH
10496: LD_INT 1
10498: PLUS
10499: PPUSH
10500: LD_VAR 0 9
10504: PPUSH
10505: CALL_OW 2
10509: ST_TO_ADDR
10510: GO 10438
10512: POP
10513: POP
// if tmp then
10514: LD_VAR 0 19
10518: IFFALSE 10530
// f := tmp ;
10520: LD_ADDR_VAR 0 12
10524: PUSH
10525: LD_VAR 0 19
10529: ST_TO_ADDR
// end ; x := personel [ i ] ;
10530: LD_ADDR_VAR 0 13
10534: PUSH
10535: LD_VAR 0 6
10539: PUSH
10540: LD_VAR 0 8
10544: ARRAY
10545: ST_TO_ADDR
// if x = - 1 then
10546: LD_VAR 0 13
10550: PUSH
10551: LD_INT 1
10553: NEG
10554: EQUAL
10555: IFFALSE 10764
// begin for j in f do
10557: LD_ADDR_VAR 0 9
10561: PUSH
10562: LD_VAR 0 12
10566: PUSH
10567: FOR_IN
10568: IFFALSE 10760
// repeat InitHc ;
10570: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10574: LD_VAR 0 9
10578: PPUSH
10579: CALL_OW 266
10583: PUSH
10584: LD_INT 5
10586: EQUAL
10587: IFFALSE 10657
// begin if UnitsInside ( j ) < 3 then
10589: LD_VAR 0 9
10593: PPUSH
10594: CALL_OW 313
10598: PUSH
10599: LD_INT 3
10601: LESS
10602: IFFALSE 10638
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10604: LD_INT 0
10606: PPUSH
10607: LD_INT 5
10609: PUSH
10610: LD_INT 8
10612: PUSH
10613: LD_INT 9
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: LIST
10620: PUSH
10621: LD_VAR 0 17
10625: ARRAY
10626: PPUSH
10627: LD_VAR 0 4
10631: PPUSH
10632: CALL_OW 380
10636: GO 10655
// PrepareHuman ( false , i , skill ) ;
10638: LD_INT 0
10640: PPUSH
10641: LD_VAR 0 8
10645: PPUSH
10646: LD_VAR 0 4
10650: PPUSH
10651: CALL_OW 380
// end else
10655: GO 10674
// PrepareHuman ( false , i , skill ) ;
10657: LD_INT 0
10659: PPUSH
10660: LD_VAR 0 8
10664: PPUSH
10665: LD_VAR 0 4
10669: PPUSH
10670: CALL_OW 380
// un := CreateHuman ;
10674: LD_ADDR_VAR 0 14
10678: PUSH
10679: CALL_OW 44
10683: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10684: LD_ADDR_VAR 0 7
10688: PUSH
10689: LD_VAR 0 7
10693: PPUSH
10694: LD_INT 1
10696: PPUSH
10697: LD_VAR 0 14
10701: PPUSH
10702: CALL_OW 2
10706: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10707: LD_VAR 0 14
10711: PPUSH
10712: LD_VAR 0 9
10716: PPUSH
10717: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10721: LD_VAR 0 9
10725: PPUSH
10726: CALL_OW 313
10730: PUSH
10731: LD_INT 6
10733: EQUAL
10734: PUSH
10735: LD_VAR 0 9
10739: PPUSH
10740: CALL_OW 266
10744: PUSH
10745: LD_INT 32
10747: PUSH
10748: LD_INT 31
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: IN
10755: OR
10756: IFFALSE 10570
10758: GO 10567
10760: POP
10761: POP
// end else
10762: GO 11144
// for j = 1 to x do
10764: LD_ADDR_VAR 0 9
10768: PUSH
10769: DOUBLE
10770: LD_INT 1
10772: DEC
10773: ST_TO_ADDR
10774: LD_VAR 0 13
10778: PUSH
10779: FOR_TO
10780: IFFALSE 11142
// begin InitHc ;
10782: CALL_OW 19
// if not f then
10786: LD_VAR 0 12
10790: NOT
10791: IFFALSE 10880
// begin PrepareHuman ( false , i , skill ) ;
10793: LD_INT 0
10795: PPUSH
10796: LD_VAR 0 8
10800: PPUSH
10801: LD_VAR 0 4
10805: PPUSH
10806: CALL_OW 380
// un := CreateHuman ;
10810: LD_ADDR_VAR 0 14
10814: PUSH
10815: CALL_OW 44
10819: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10820: LD_ADDR_VAR 0 7
10824: PUSH
10825: LD_VAR 0 7
10829: PPUSH
10830: LD_INT 1
10832: PPUSH
10833: LD_VAR 0 14
10837: PPUSH
10838: CALL_OW 2
10842: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10843: LD_VAR 0 14
10847: PPUSH
10848: LD_VAR 0 1
10852: PPUSH
10853: CALL_OW 250
10857: PPUSH
10858: LD_VAR 0 1
10862: PPUSH
10863: CALL_OW 251
10867: PPUSH
10868: LD_INT 10
10870: PPUSH
10871: LD_INT 0
10873: PPUSH
10874: CALL_OW 50
// continue ;
10878: GO 10779
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10880: LD_VAR 0 12
10884: PUSH
10885: LD_INT 1
10887: ARRAY
10888: PPUSH
10889: CALL_OW 313
10893: PUSH
10894: LD_VAR 0 12
10898: PUSH
10899: LD_INT 1
10901: ARRAY
10902: PPUSH
10903: CALL_OW 266
10907: PUSH
10908: LD_INT 32
10910: PUSH
10911: LD_INT 31
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: IN
10918: AND
10919: PUSH
10920: LD_VAR 0 12
10924: PUSH
10925: LD_INT 1
10927: ARRAY
10928: PPUSH
10929: CALL_OW 313
10933: PUSH
10934: LD_INT 6
10936: EQUAL
10937: OR
10938: IFFALSE 10958
// f := Delete ( f , 1 ) ;
10940: LD_ADDR_VAR 0 12
10944: PUSH
10945: LD_VAR 0 12
10949: PPUSH
10950: LD_INT 1
10952: PPUSH
10953: CALL_OW 3
10957: ST_TO_ADDR
// if not f then
10958: LD_VAR 0 12
10962: NOT
10963: IFFALSE 10981
// begin x := x + 2 ;
10965: LD_ADDR_VAR 0 13
10969: PUSH
10970: LD_VAR 0 13
10974: PUSH
10975: LD_INT 2
10977: PLUS
10978: ST_TO_ADDR
// continue ;
10979: GO 10779
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10981: LD_VAR 0 12
10985: PUSH
10986: LD_INT 1
10988: ARRAY
10989: PPUSH
10990: CALL_OW 266
10994: PUSH
10995: LD_INT 5
10997: EQUAL
10998: IFFALSE 11072
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11000: LD_VAR 0 12
11004: PUSH
11005: LD_INT 1
11007: ARRAY
11008: PPUSH
11009: CALL_OW 313
11013: PUSH
11014: LD_INT 3
11016: LESS
11017: IFFALSE 11053
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11019: LD_INT 0
11021: PPUSH
11022: LD_INT 5
11024: PUSH
11025: LD_INT 8
11027: PUSH
11028: LD_INT 9
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: LIST
11035: PUSH
11036: LD_VAR 0 17
11040: ARRAY
11041: PPUSH
11042: LD_VAR 0 4
11046: PPUSH
11047: CALL_OW 380
11051: GO 11070
// PrepareHuman ( false , i , skill ) ;
11053: LD_INT 0
11055: PPUSH
11056: LD_VAR 0 8
11060: PPUSH
11061: LD_VAR 0 4
11065: PPUSH
11066: CALL_OW 380
// end else
11070: GO 11089
// PrepareHuman ( false , i , skill ) ;
11072: LD_INT 0
11074: PPUSH
11075: LD_VAR 0 8
11079: PPUSH
11080: LD_VAR 0 4
11084: PPUSH
11085: CALL_OW 380
// un := CreateHuman ;
11089: LD_ADDR_VAR 0 14
11093: PUSH
11094: CALL_OW 44
11098: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11099: LD_ADDR_VAR 0 7
11103: PUSH
11104: LD_VAR 0 7
11108: PPUSH
11109: LD_INT 1
11111: PPUSH
11112: LD_VAR 0 14
11116: PPUSH
11117: CALL_OW 2
11121: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11122: LD_VAR 0 14
11126: PPUSH
11127: LD_VAR 0 12
11131: PUSH
11132: LD_INT 1
11134: ARRAY
11135: PPUSH
11136: CALL_OW 52
// end ;
11140: GO 10779
11142: POP
11143: POP
// end ;
11144: GO 10081
11146: POP
11147: POP
// result := result ^ buildings ;
11148: LD_ADDR_VAR 0 7
11152: PUSH
11153: LD_VAR 0 7
11157: PUSH
11158: LD_VAR 0 18
11162: ADD
11163: ST_TO_ADDR
// end else
11164: GO 11307
// begin for i = 1 to personel do
11166: LD_ADDR_VAR 0 8
11170: PUSH
11171: DOUBLE
11172: LD_INT 1
11174: DEC
11175: ST_TO_ADDR
11176: LD_VAR 0 6
11180: PUSH
11181: FOR_TO
11182: IFFALSE 11305
// begin if i > 4 then
11184: LD_VAR 0 8
11188: PUSH
11189: LD_INT 4
11191: GREATER
11192: IFFALSE 11196
// break ;
11194: GO 11305
// x := personel [ i ] ;
11196: LD_ADDR_VAR 0 13
11200: PUSH
11201: LD_VAR 0 6
11205: PUSH
11206: LD_VAR 0 8
11210: ARRAY
11211: ST_TO_ADDR
// if x = - 1 then
11212: LD_VAR 0 13
11216: PUSH
11217: LD_INT 1
11219: NEG
11220: EQUAL
11221: IFFALSE 11225
// continue ;
11223: GO 11181
// PrepareHuman ( false , i , skill ) ;
11225: LD_INT 0
11227: PPUSH
11228: LD_VAR 0 8
11232: PPUSH
11233: LD_VAR 0 4
11237: PPUSH
11238: CALL_OW 380
// un := CreateHuman ;
11242: LD_ADDR_VAR 0 14
11246: PUSH
11247: CALL_OW 44
11251: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11252: LD_VAR 0 14
11256: PPUSH
11257: LD_VAR 0 1
11261: PPUSH
11262: CALL_OW 250
11266: PPUSH
11267: LD_VAR 0 1
11271: PPUSH
11272: CALL_OW 251
11276: PPUSH
11277: LD_INT 10
11279: PPUSH
11280: LD_INT 0
11282: PPUSH
11283: CALL_OW 50
// result := result ^ un ;
11287: LD_ADDR_VAR 0 7
11291: PUSH
11292: LD_VAR 0 7
11296: PUSH
11297: LD_VAR 0 14
11301: ADD
11302: ST_TO_ADDR
// end ;
11303: GO 11181
11305: POP
11306: POP
// end ; end ;
11307: LD_VAR 0 7
11311: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11312: LD_INT 0
11314: PPUSH
11315: PPUSH
11316: PPUSH
11317: PPUSH
11318: PPUSH
11319: PPUSH
11320: PPUSH
11321: PPUSH
11322: PPUSH
11323: PPUSH
11324: PPUSH
11325: PPUSH
11326: PPUSH
11327: PPUSH
11328: PPUSH
11329: PPUSH
// result := false ;
11330: LD_ADDR_VAR 0 3
11334: PUSH
11335: LD_INT 0
11337: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11338: LD_VAR 0 1
11342: NOT
11343: PUSH
11344: LD_VAR 0 1
11348: PPUSH
11349: CALL_OW 266
11353: PUSH
11354: LD_INT 32
11356: PUSH
11357: LD_INT 33
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: IN
11364: NOT
11365: OR
11366: IFFALSE 11370
// exit ;
11368: GO 12479
// nat := GetNation ( tower ) ;
11370: LD_ADDR_VAR 0 12
11374: PUSH
11375: LD_VAR 0 1
11379: PPUSH
11380: CALL_OW 248
11384: ST_TO_ADDR
// side := GetSide ( tower ) ;
11385: LD_ADDR_VAR 0 16
11389: PUSH
11390: LD_VAR 0 1
11394: PPUSH
11395: CALL_OW 255
11399: ST_TO_ADDR
// x := GetX ( tower ) ;
11400: LD_ADDR_VAR 0 10
11404: PUSH
11405: LD_VAR 0 1
11409: PPUSH
11410: CALL_OW 250
11414: ST_TO_ADDR
// y := GetY ( tower ) ;
11415: LD_ADDR_VAR 0 11
11419: PUSH
11420: LD_VAR 0 1
11424: PPUSH
11425: CALL_OW 251
11429: ST_TO_ADDR
// if not x or not y then
11430: LD_VAR 0 10
11434: NOT
11435: PUSH
11436: LD_VAR 0 11
11440: NOT
11441: OR
11442: IFFALSE 11446
// exit ;
11444: GO 12479
// weapon := 0 ;
11446: LD_ADDR_VAR 0 18
11450: PUSH
11451: LD_INT 0
11453: ST_TO_ADDR
// fac_list := [ ] ;
11454: LD_ADDR_VAR 0 17
11458: PUSH
11459: EMPTY
11460: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11461: LD_ADDR_VAR 0 6
11465: PUSH
11466: LD_VAR 0 1
11470: PPUSH
11471: CALL_OW 274
11475: PPUSH
11476: LD_VAR 0 2
11480: PPUSH
11481: LD_INT 0
11483: PPUSH
11484: CALL 9050 0 3
11488: PPUSH
11489: LD_INT 30
11491: PUSH
11492: LD_INT 3
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PPUSH
11499: CALL_OW 72
11503: ST_TO_ADDR
// if not factories then
11504: LD_VAR 0 6
11508: NOT
11509: IFFALSE 11513
// exit ;
11511: GO 12479
// for i in factories do
11513: LD_ADDR_VAR 0 8
11517: PUSH
11518: LD_VAR 0 6
11522: PUSH
11523: FOR_IN
11524: IFFALSE 11549
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11526: LD_ADDR_VAR 0 17
11530: PUSH
11531: LD_VAR 0 17
11535: PUSH
11536: LD_VAR 0 8
11540: PPUSH
11541: CALL_OW 478
11545: UNION
11546: ST_TO_ADDR
11547: GO 11523
11549: POP
11550: POP
// if not fac_list then
11551: LD_VAR 0 17
11555: NOT
11556: IFFALSE 11560
// exit ;
11558: GO 12479
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11560: LD_ADDR_VAR 0 5
11564: PUSH
11565: LD_INT 4
11567: PUSH
11568: LD_INT 5
11570: PUSH
11571: LD_INT 9
11573: PUSH
11574: LD_INT 10
11576: PUSH
11577: LD_INT 6
11579: PUSH
11580: LD_INT 7
11582: PUSH
11583: LD_INT 11
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: PUSH
11595: LD_INT 27
11597: PUSH
11598: LD_INT 28
11600: PUSH
11601: LD_INT 26
11603: PUSH
11604: LD_INT 30
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: PUSH
11613: LD_INT 43
11615: PUSH
11616: LD_INT 44
11618: PUSH
11619: LD_INT 46
11621: PUSH
11622: LD_INT 45
11624: PUSH
11625: LD_INT 47
11627: PUSH
11628: LD_INT 49
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: PUSH
11644: LD_VAR 0 12
11648: ARRAY
11649: ST_TO_ADDR
// list := list isect fac_list ;
11650: LD_ADDR_VAR 0 5
11654: PUSH
11655: LD_VAR 0 5
11659: PUSH
11660: LD_VAR 0 17
11664: ISECT
11665: ST_TO_ADDR
// if not list then
11666: LD_VAR 0 5
11670: NOT
11671: IFFALSE 11675
// exit ;
11673: GO 12479
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11675: LD_VAR 0 12
11679: PUSH
11680: LD_INT 3
11682: EQUAL
11683: PUSH
11684: LD_INT 49
11686: PUSH
11687: LD_VAR 0 5
11691: IN
11692: AND
11693: PUSH
11694: LD_INT 31
11696: PPUSH
11697: LD_VAR 0 16
11701: PPUSH
11702: CALL_OW 321
11706: PUSH
11707: LD_INT 2
11709: EQUAL
11710: AND
11711: IFFALSE 11771
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11713: LD_INT 22
11715: PUSH
11716: LD_VAR 0 16
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PUSH
11725: LD_INT 35
11727: PUSH
11728: LD_INT 49
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: LD_INT 91
11737: PUSH
11738: LD_VAR 0 1
11742: PUSH
11743: LD_INT 10
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: LIST
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: PPUSH
11756: CALL_OW 69
11760: NOT
11761: IFFALSE 11771
// weapon := ru_time_lapser ;
11763: LD_ADDR_VAR 0 18
11767: PUSH
11768: LD_INT 49
11770: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11771: LD_VAR 0 12
11775: PUSH
11776: LD_INT 1
11778: PUSH
11779: LD_INT 2
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: IN
11786: PUSH
11787: LD_INT 11
11789: PUSH
11790: LD_VAR 0 5
11794: IN
11795: PUSH
11796: LD_INT 30
11798: PUSH
11799: LD_VAR 0 5
11803: IN
11804: OR
11805: AND
11806: PUSH
11807: LD_INT 6
11809: PPUSH
11810: LD_VAR 0 16
11814: PPUSH
11815: CALL_OW 321
11819: PUSH
11820: LD_INT 2
11822: EQUAL
11823: AND
11824: IFFALSE 11989
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11826: LD_INT 22
11828: PUSH
11829: LD_VAR 0 16
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 2
11840: PUSH
11841: LD_INT 35
11843: PUSH
11844: LD_INT 11
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 35
11853: PUSH
11854: LD_INT 30
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: LIST
11865: PUSH
11866: LD_INT 91
11868: PUSH
11869: LD_VAR 0 1
11873: PUSH
11874: LD_INT 18
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: LIST
11886: PPUSH
11887: CALL_OW 69
11891: NOT
11892: PUSH
11893: LD_INT 22
11895: PUSH
11896: LD_VAR 0 16
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PUSH
11905: LD_INT 2
11907: PUSH
11908: LD_INT 30
11910: PUSH
11911: LD_INT 32
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 30
11920: PUSH
11921: LD_INT 33
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: LIST
11932: PUSH
11933: LD_INT 91
11935: PUSH
11936: LD_VAR 0 1
11940: PUSH
11941: LD_INT 12
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: LIST
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: PPUSH
11957: CALL_OW 69
11961: PUSH
11962: LD_INT 2
11964: GREATER
11965: AND
11966: IFFALSE 11989
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11968: LD_ADDR_VAR 0 18
11972: PUSH
11973: LD_INT 11
11975: PUSH
11976: LD_INT 30
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: LD_VAR 0 12
11987: ARRAY
11988: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11989: LD_VAR 0 18
11993: NOT
11994: PUSH
11995: LD_INT 40
11997: PPUSH
11998: LD_VAR 0 16
12002: PPUSH
12003: CALL_OW 321
12007: PUSH
12008: LD_INT 2
12010: EQUAL
12011: AND
12012: PUSH
12013: LD_INT 7
12015: PUSH
12016: LD_VAR 0 5
12020: IN
12021: PUSH
12022: LD_INT 28
12024: PUSH
12025: LD_VAR 0 5
12029: IN
12030: OR
12031: PUSH
12032: LD_INT 45
12034: PUSH
12035: LD_VAR 0 5
12039: IN
12040: OR
12041: AND
12042: IFFALSE 12296
// begin hex := GetHexInfo ( x , y ) ;
12044: LD_ADDR_VAR 0 4
12048: PUSH
12049: LD_VAR 0 10
12053: PPUSH
12054: LD_VAR 0 11
12058: PPUSH
12059: CALL_OW 546
12063: ST_TO_ADDR
// if hex [ 1 ] then
12064: LD_VAR 0 4
12068: PUSH
12069: LD_INT 1
12071: ARRAY
12072: IFFALSE 12076
// exit ;
12074: GO 12479
// height := hex [ 2 ] ;
12076: LD_ADDR_VAR 0 15
12080: PUSH
12081: LD_VAR 0 4
12085: PUSH
12086: LD_INT 2
12088: ARRAY
12089: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12090: LD_ADDR_VAR 0 14
12094: PUSH
12095: LD_INT 0
12097: PUSH
12098: LD_INT 2
12100: PUSH
12101: LD_INT 3
12103: PUSH
12104: LD_INT 5
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: ST_TO_ADDR
// for i in tmp do
12113: LD_ADDR_VAR 0 8
12117: PUSH
12118: LD_VAR 0 14
12122: PUSH
12123: FOR_IN
12124: IFFALSE 12294
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12126: LD_ADDR_VAR 0 9
12130: PUSH
12131: LD_VAR 0 10
12135: PPUSH
12136: LD_VAR 0 8
12140: PPUSH
12141: LD_INT 5
12143: PPUSH
12144: CALL_OW 272
12148: PUSH
12149: LD_VAR 0 11
12153: PPUSH
12154: LD_VAR 0 8
12158: PPUSH
12159: LD_INT 5
12161: PPUSH
12162: CALL_OW 273
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12171: LD_VAR 0 9
12175: PUSH
12176: LD_INT 1
12178: ARRAY
12179: PPUSH
12180: LD_VAR 0 9
12184: PUSH
12185: LD_INT 2
12187: ARRAY
12188: PPUSH
12189: CALL_OW 488
12193: IFFALSE 12292
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12195: LD_ADDR_VAR 0 4
12199: PUSH
12200: LD_VAR 0 9
12204: PUSH
12205: LD_INT 1
12207: ARRAY
12208: PPUSH
12209: LD_VAR 0 9
12213: PUSH
12214: LD_INT 2
12216: ARRAY
12217: PPUSH
12218: CALL_OW 546
12222: ST_TO_ADDR
// if hex [ 1 ] then
12223: LD_VAR 0 4
12227: PUSH
12228: LD_INT 1
12230: ARRAY
12231: IFFALSE 12235
// continue ;
12233: GO 12123
// h := hex [ 2 ] ;
12235: LD_ADDR_VAR 0 13
12239: PUSH
12240: LD_VAR 0 4
12244: PUSH
12245: LD_INT 2
12247: ARRAY
12248: ST_TO_ADDR
// if h + 7 < height then
12249: LD_VAR 0 13
12253: PUSH
12254: LD_INT 7
12256: PLUS
12257: PUSH
12258: LD_VAR 0 15
12262: LESS
12263: IFFALSE 12292
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12265: LD_ADDR_VAR 0 18
12269: PUSH
12270: LD_INT 7
12272: PUSH
12273: LD_INT 28
12275: PUSH
12276: LD_INT 45
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: LIST
12283: PUSH
12284: LD_VAR 0 12
12288: ARRAY
12289: ST_TO_ADDR
// break ;
12290: GO 12294
// end ; end ; end ;
12292: GO 12123
12294: POP
12295: POP
// end ; if not weapon then
12296: LD_VAR 0 18
12300: NOT
12301: IFFALSE 12361
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12303: LD_ADDR_VAR 0 5
12307: PUSH
12308: LD_VAR 0 5
12312: PUSH
12313: LD_INT 11
12315: PUSH
12316: LD_INT 30
12318: PUSH
12319: LD_INT 49
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: DIFF
12327: ST_TO_ADDR
// if not list then
12328: LD_VAR 0 5
12332: NOT
12333: IFFALSE 12337
// exit ;
12335: GO 12479
// weapon := list [ rand ( 1 , list ) ] ;
12337: LD_ADDR_VAR 0 18
12341: PUSH
12342: LD_VAR 0 5
12346: PUSH
12347: LD_INT 1
12349: PPUSH
12350: LD_VAR 0 5
12354: PPUSH
12355: CALL_OW 12
12359: ARRAY
12360: ST_TO_ADDR
// end ; if weapon then
12361: LD_VAR 0 18
12365: IFFALSE 12479
// begin tmp := CostOfWeapon ( weapon ) ;
12367: LD_ADDR_VAR 0 14
12371: PUSH
12372: LD_VAR 0 18
12376: PPUSH
12377: CALL_OW 451
12381: ST_TO_ADDR
// j := GetBase ( tower ) ;
12382: LD_ADDR_VAR 0 9
12386: PUSH
12387: LD_VAR 0 1
12391: PPUSH
12392: CALL_OW 274
12396: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12397: LD_VAR 0 9
12401: PPUSH
12402: LD_INT 1
12404: PPUSH
12405: CALL_OW 275
12409: PUSH
12410: LD_VAR 0 14
12414: PUSH
12415: LD_INT 1
12417: ARRAY
12418: GREATEREQUAL
12419: PUSH
12420: LD_VAR 0 9
12424: PPUSH
12425: LD_INT 2
12427: PPUSH
12428: CALL_OW 275
12432: PUSH
12433: LD_VAR 0 14
12437: PUSH
12438: LD_INT 2
12440: ARRAY
12441: GREATEREQUAL
12442: AND
12443: PUSH
12444: LD_VAR 0 9
12448: PPUSH
12449: LD_INT 3
12451: PPUSH
12452: CALL_OW 275
12456: PUSH
12457: LD_VAR 0 14
12461: PUSH
12462: LD_INT 3
12464: ARRAY
12465: GREATEREQUAL
12466: AND
12467: IFFALSE 12479
// result := weapon ;
12469: LD_ADDR_VAR 0 3
12473: PUSH
12474: LD_VAR 0 18
12478: ST_TO_ADDR
// end ; end ;
12479: LD_VAR 0 3
12483: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12484: LD_INT 0
12486: PPUSH
12487: PPUSH
// result := true ;
12488: LD_ADDR_VAR 0 3
12492: PUSH
12493: LD_INT 1
12495: ST_TO_ADDR
// if array1 = array2 then
12496: LD_VAR 0 1
12500: PUSH
12501: LD_VAR 0 2
12505: EQUAL
12506: IFFALSE 12566
// begin for i = 1 to array1 do
12508: LD_ADDR_VAR 0 4
12512: PUSH
12513: DOUBLE
12514: LD_INT 1
12516: DEC
12517: ST_TO_ADDR
12518: LD_VAR 0 1
12522: PUSH
12523: FOR_TO
12524: IFFALSE 12562
// if array1 [ i ] <> array2 [ i ] then
12526: LD_VAR 0 1
12530: PUSH
12531: LD_VAR 0 4
12535: ARRAY
12536: PUSH
12537: LD_VAR 0 2
12541: PUSH
12542: LD_VAR 0 4
12546: ARRAY
12547: NONEQUAL
12548: IFFALSE 12560
// begin result := false ;
12550: LD_ADDR_VAR 0 3
12554: PUSH
12555: LD_INT 0
12557: ST_TO_ADDR
// break ;
12558: GO 12562
// end ;
12560: GO 12523
12562: POP
12563: POP
// end else
12564: GO 12574
// result := false ;
12566: LD_ADDR_VAR 0 3
12570: PUSH
12571: LD_INT 0
12573: ST_TO_ADDR
// end ;
12574: LD_VAR 0 3
12578: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12579: LD_INT 0
12581: PPUSH
12582: PPUSH
// if not array1 or not array2 then
12583: LD_VAR 0 1
12587: NOT
12588: PUSH
12589: LD_VAR 0 2
12593: NOT
12594: OR
12595: IFFALSE 12599
// exit ;
12597: GO 12663
// result := true ;
12599: LD_ADDR_VAR 0 3
12603: PUSH
12604: LD_INT 1
12606: ST_TO_ADDR
// for i = 1 to array1 do
12607: LD_ADDR_VAR 0 4
12611: PUSH
12612: DOUBLE
12613: LD_INT 1
12615: DEC
12616: ST_TO_ADDR
12617: LD_VAR 0 1
12621: PUSH
12622: FOR_TO
12623: IFFALSE 12661
// if array1 [ i ] <> array2 [ i ] then
12625: LD_VAR 0 1
12629: PUSH
12630: LD_VAR 0 4
12634: ARRAY
12635: PUSH
12636: LD_VAR 0 2
12640: PUSH
12641: LD_VAR 0 4
12645: ARRAY
12646: NONEQUAL
12647: IFFALSE 12659
// begin result := false ;
12649: LD_ADDR_VAR 0 3
12653: PUSH
12654: LD_INT 0
12656: ST_TO_ADDR
// break ;
12657: GO 12661
// end ;
12659: GO 12622
12661: POP
12662: POP
// end ;
12663: LD_VAR 0 3
12667: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12668: LD_INT 0
12670: PPUSH
12671: PPUSH
12672: PPUSH
// pom := GetBase ( fac ) ;
12673: LD_ADDR_VAR 0 5
12677: PUSH
12678: LD_VAR 0 1
12682: PPUSH
12683: CALL_OW 274
12687: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12688: LD_ADDR_VAR 0 4
12692: PUSH
12693: LD_VAR 0 2
12697: PUSH
12698: LD_INT 1
12700: ARRAY
12701: PPUSH
12702: LD_VAR 0 2
12706: PUSH
12707: LD_INT 2
12709: ARRAY
12710: PPUSH
12711: LD_VAR 0 2
12715: PUSH
12716: LD_INT 3
12718: ARRAY
12719: PPUSH
12720: LD_VAR 0 2
12724: PUSH
12725: LD_INT 4
12727: ARRAY
12728: PPUSH
12729: CALL_OW 449
12733: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12734: LD_ADDR_VAR 0 3
12738: PUSH
12739: LD_VAR 0 5
12743: PPUSH
12744: LD_INT 1
12746: PPUSH
12747: CALL_OW 275
12751: PUSH
12752: LD_VAR 0 4
12756: PUSH
12757: LD_INT 1
12759: ARRAY
12760: GREATEREQUAL
12761: PUSH
12762: LD_VAR 0 5
12766: PPUSH
12767: LD_INT 2
12769: PPUSH
12770: CALL_OW 275
12774: PUSH
12775: LD_VAR 0 4
12779: PUSH
12780: LD_INT 2
12782: ARRAY
12783: GREATEREQUAL
12784: AND
12785: PUSH
12786: LD_VAR 0 5
12790: PPUSH
12791: LD_INT 3
12793: PPUSH
12794: CALL_OW 275
12798: PUSH
12799: LD_VAR 0 4
12803: PUSH
12804: LD_INT 3
12806: ARRAY
12807: GREATEREQUAL
12808: AND
12809: ST_TO_ADDR
// end ;
12810: LD_VAR 0 3
12814: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12815: LD_INT 0
12817: PPUSH
12818: PPUSH
12819: PPUSH
12820: PPUSH
// pom := GetBase ( building ) ;
12821: LD_ADDR_VAR 0 3
12825: PUSH
12826: LD_VAR 0 1
12830: PPUSH
12831: CALL_OW 274
12835: ST_TO_ADDR
// if not pom then
12836: LD_VAR 0 3
12840: NOT
12841: IFFALSE 12845
// exit ;
12843: GO 13015
// btype := GetBType ( building ) ;
12845: LD_ADDR_VAR 0 5
12849: PUSH
12850: LD_VAR 0 1
12854: PPUSH
12855: CALL_OW 266
12859: ST_TO_ADDR
// if btype = b_armoury then
12860: LD_VAR 0 5
12864: PUSH
12865: LD_INT 4
12867: EQUAL
12868: IFFALSE 12878
// btype := b_barracks ;
12870: LD_ADDR_VAR 0 5
12874: PUSH
12875: LD_INT 5
12877: ST_TO_ADDR
// if btype = b_depot then
12878: LD_VAR 0 5
12882: PUSH
12883: LD_INT 0
12885: EQUAL
12886: IFFALSE 12896
// btype := b_warehouse ;
12888: LD_ADDR_VAR 0 5
12892: PUSH
12893: LD_INT 1
12895: ST_TO_ADDR
// if btype = b_workshop then
12896: LD_VAR 0 5
12900: PUSH
12901: LD_INT 2
12903: EQUAL
12904: IFFALSE 12914
// btype := b_factory ;
12906: LD_ADDR_VAR 0 5
12910: PUSH
12911: LD_INT 3
12913: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12914: LD_ADDR_VAR 0 4
12918: PUSH
12919: LD_VAR 0 5
12923: PPUSH
12924: LD_VAR 0 1
12928: PPUSH
12929: CALL_OW 248
12933: PPUSH
12934: CALL_OW 450
12938: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12939: LD_ADDR_VAR 0 2
12943: PUSH
12944: LD_VAR 0 3
12948: PPUSH
12949: LD_INT 1
12951: PPUSH
12952: CALL_OW 275
12956: PUSH
12957: LD_VAR 0 4
12961: PUSH
12962: LD_INT 1
12964: ARRAY
12965: GREATEREQUAL
12966: PUSH
12967: LD_VAR 0 3
12971: PPUSH
12972: LD_INT 2
12974: PPUSH
12975: CALL_OW 275
12979: PUSH
12980: LD_VAR 0 4
12984: PUSH
12985: LD_INT 2
12987: ARRAY
12988: GREATEREQUAL
12989: AND
12990: PUSH
12991: LD_VAR 0 3
12995: PPUSH
12996: LD_INT 3
12998: PPUSH
12999: CALL_OW 275
13003: PUSH
13004: LD_VAR 0 4
13008: PUSH
13009: LD_INT 3
13011: ARRAY
13012: GREATEREQUAL
13013: AND
13014: ST_TO_ADDR
// end ;
13015: LD_VAR 0 2
13019: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13020: LD_INT 0
13022: PPUSH
13023: PPUSH
13024: PPUSH
// pom := GetBase ( building ) ;
13025: LD_ADDR_VAR 0 4
13029: PUSH
13030: LD_VAR 0 1
13034: PPUSH
13035: CALL_OW 274
13039: ST_TO_ADDR
// if not pom then
13040: LD_VAR 0 4
13044: NOT
13045: IFFALSE 13049
// exit ;
13047: GO 13150
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13049: LD_ADDR_VAR 0 5
13053: PUSH
13054: LD_VAR 0 2
13058: PPUSH
13059: LD_VAR 0 1
13063: PPUSH
13064: CALL_OW 248
13068: PPUSH
13069: CALL_OW 450
13073: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13074: LD_ADDR_VAR 0 3
13078: PUSH
13079: LD_VAR 0 4
13083: PPUSH
13084: LD_INT 1
13086: PPUSH
13087: CALL_OW 275
13091: PUSH
13092: LD_VAR 0 5
13096: PUSH
13097: LD_INT 1
13099: ARRAY
13100: GREATEREQUAL
13101: PUSH
13102: LD_VAR 0 4
13106: PPUSH
13107: LD_INT 2
13109: PPUSH
13110: CALL_OW 275
13114: PUSH
13115: LD_VAR 0 5
13119: PUSH
13120: LD_INT 2
13122: ARRAY
13123: GREATEREQUAL
13124: AND
13125: PUSH
13126: LD_VAR 0 4
13130: PPUSH
13131: LD_INT 3
13133: PPUSH
13134: CALL_OW 275
13138: PUSH
13139: LD_VAR 0 5
13143: PUSH
13144: LD_INT 3
13146: ARRAY
13147: GREATEREQUAL
13148: AND
13149: ST_TO_ADDR
// end ;
13150: LD_VAR 0 3
13154: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13155: LD_INT 0
13157: PPUSH
13158: PPUSH
13159: PPUSH
13160: PPUSH
13161: PPUSH
13162: PPUSH
13163: PPUSH
13164: PPUSH
13165: PPUSH
13166: PPUSH
13167: PPUSH
// result := false ;
13168: LD_ADDR_VAR 0 8
13172: PUSH
13173: LD_INT 0
13175: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13176: LD_VAR 0 5
13180: NOT
13181: PUSH
13182: LD_VAR 0 1
13186: NOT
13187: OR
13188: PUSH
13189: LD_VAR 0 2
13193: NOT
13194: OR
13195: PUSH
13196: LD_VAR 0 3
13200: NOT
13201: OR
13202: IFFALSE 13206
// exit ;
13204: GO 14020
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13206: LD_ADDR_VAR 0 14
13210: PUSH
13211: LD_VAR 0 1
13215: PPUSH
13216: LD_VAR 0 2
13220: PPUSH
13221: LD_VAR 0 3
13225: PPUSH
13226: LD_VAR 0 4
13230: PPUSH
13231: LD_VAR 0 5
13235: PUSH
13236: LD_INT 1
13238: ARRAY
13239: PPUSH
13240: CALL_OW 248
13244: PPUSH
13245: LD_INT 0
13247: PPUSH
13248: CALL 15257 0 6
13252: ST_TO_ADDR
// if not hexes then
13253: LD_VAR 0 14
13257: NOT
13258: IFFALSE 13262
// exit ;
13260: GO 14020
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13262: LD_ADDR_VAR 0 17
13266: PUSH
13267: LD_VAR 0 5
13271: PPUSH
13272: LD_INT 22
13274: PUSH
13275: LD_VAR 0 13
13279: PPUSH
13280: CALL_OW 255
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 2
13291: PUSH
13292: LD_INT 30
13294: PUSH
13295: LD_INT 0
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 30
13304: PUSH
13305: LD_INT 1
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: LIST
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PPUSH
13321: CALL_OW 72
13325: ST_TO_ADDR
// for i = 1 to hexes do
13326: LD_ADDR_VAR 0 9
13330: PUSH
13331: DOUBLE
13332: LD_INT 1
13334: DEC
13335: ST_TO_ADDR
13336: LD_VAR 0 14
13340: PUSH
13341: FOR_TO
13342: IFFALSE 14018
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13344: LD_ADDR_VAR 0 13
13348: PUSH
13349: LD_VAR 0 14
13353: PUSH
13354: LD_VAR 0 9
13358: ARRAY
13359: PUSH
13360: LD_INT 1
13362: ARRAY
13363: PPUSH
13364: LD_VAR 0 14
13368: PUSH
13369: LD_VAR 0 9
13373: ARRAY
13374: PUSH
13375: LD_INT 2
13377: ARRAY
13378: PPUSH
13379: CALL_OW 428
13383: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13384: LD_VAR 0 14
13388: PUSH
13389: LD_VAR 0 9
13393: ARRAY
13394: PUSH
13395: LD_INT 1
13397: ARRAY
13398: PPUSH
13399: LD_VAR 0 14
13403: PUSH
13404: LD_VAR 0 9
13408: ARRAY
13409: PUSH
13410: LD_INT 2
13412: ARRAY
13413: PPUSH
13414: CALL_OW 351
13418: PUSH
13419: LD_VAR 0 14
13423: PUSH
13424: LD_VAR 0 9
13428: ARRAY
13429: PUSH
13430: LD_INT 1
13432: ARRAY
13433: PPUSH
13434: LD_VAR 0 14
13438: PUSH
13439: LD_VAR 0 9
13443: ARRAY
13444: PUSH
13445: LD_INT 2
13447: ARRAY
13448: PPUSH
13449: CALL_OW 488
13453: NOT
13454: OR
13455: PUSH
13456: LD_VAR 0 13
13460: PPUSH
13461: CALL_OW 247
13465: PUSH
13466: LD_INT 3
13468: EQUAL
13469: OR
13470: IFFALSE 13476
// exit ;
13472: POP
13473: POP
13474: GO 14020
// if not tmp then
13476: LD_VAR 0 13
13480: NOT
13481: IFFALSE 13485
// continue ;
13483: GO 13341
// result := true ;
13485: LD_ADDR_VAR 0 8
13489: PUSH
13490: LD_INT 1
13492: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13493: LD_VAR 0 6
13497: PUSH
13498: LD_VAR 0 13
13502: PPUSH
13503: CALL_OW 247
13507: PUSH
13508: LD_INT 2
13510: EQUAL
13511: AND
13512: PUSH
13513: LD_VAR 0 13
13517: PPUSH
13518: CALL_OW 263
13522: PUSH
13523: LD_INT 1
13525: EQUAL
13526: AND
13527: IFFALSE 13691
// begin if IsDrivenBy ( tmp ) then
13529: LD_VAR 0 13
13533: PPUSH
13534: CALL_OW 311
13538: IFFALSE 13542
// continue ;
13540: GO 13341
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13542: LD_VAR 0 6
13546: PPUSH
13547: LD_INT 3
13549: PUSH
13550: LD_INT 60
13552: PUSH
13553: EMPTY
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 3
13562: PUSH
13563: LD_INT 55
13565: PUSH
13566: EMPTY
13567: LIST
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PPUSH
13577: CALL_OW 72
13581: IFFALSE 13689
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13583: LD_ADDR_VAR 0 18
13587: PUSH
13588: LD_VAR 0 6
13592: PPUSH
13593: LD_INT 3
13595: PUSH
13596: LD_INT 60
13598: PUSH
13599: EMPTY
13600: LIST
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 3
13608: PUSH
13609: LD_INT 55
13611: PUSH
13612: EMPTY
13613: LIST
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PPUSH
13623: CALL_OW 72
13627: PUSH
13628: LD_INT 1
13630: ARRAY
13631: ST_TO_ADDR
// if IsInUnit ( driver ) then
13632: LD_VAR 0 18
13636: PPUSH
13637: CALL_OW 310
13641: IFFALSE 13652
// ComExit ( driver ) ;
13643: LD_VAR 0 18
13647: PPUSH
13648: CALL 38385 0 1
// AddComEnterUnit ( driver , tmp ) ;
13652: LD_VAR 0 18
13656: PPUSH
13657: LD_VAR 0 13
13661: PPUSH
13662: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13666: LD_VAR 0 18
13670: PPUSH
13671: LD_VAR 0 7
13675: PPUSH
13676: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13680: LD_VAR 0 18
13684: PPUSH
13685: CALL_OW 181
// end ; continue ;
13689: GO 13341
// end ; if not cleaners or not tmp in cleaners then
13691: LD_VAR 0 6
13695: NOT
13696: PUSH
13697: LD_VAR 0 13
13701: PUSH
13702: LD_VAR 0 6
13706: IN
13707: NOT
13708: OR
13709: IFFALSE 14016
// begin if dep then
13711: LD_VAR 0 17
13715: IFFALSE 13851
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13717: LD_ADDR_VAR 0 16
13721: PUSH
13722: LD_VAR 0 17
13726: PUSH
13727: LD_INT 1
13729: ARRAY
13730: PPUSH
13731: CALL_OW 250
13735: PPUSH
13736: LD_VAR 0 17
13740: PUSH
13741: LD_INT 1
13743: ARRAY
13744: PPUSH
13745: CALL_OW 254
13749: PPUSH
13750: LD_INT 5
13752: PPUSH
13753: CALL_OW 272
13757: PUSH
13758: LD_VAR 0 17
13762: PUSH
13763: LD_INT 1
13765: ARRAY
13766: PPUSH
13767: CALL_OW 251
13771: PPUSH
13772: LD_VAR 0 17
13776: PUSH
13777: LD_INT 1
13779: ARRAY
13780: PPUSH
13781: CALL_OW 254
13785: PPUSH
13786: LD_INT 5
13788: PPUSH
13789: CALL_OW 273
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13798: LD_VAR 0 16
13802: PUSH
13803: LD_INT 1
13805: ARRAY
13806: PPUSH
13807: LD_VAR 0 16
13811: PUSH
13812: LD_INT 2
13814: ARRAY
13815: PPUSH
13816: CALL_OW 488
13820: IFFALSE 13851
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13822: LD_VAR 0 13
13826: PPUSH
13827: LD_VAR 0 16
13831: PUSH
13832: LD_INT 1
13834: ARRAY
13835: PPUSH
13836: LD_VAR 0 16
13840: PUSH
13841: LD_INT 2
13843: ARRAY
13844: PPUSH
13845: CALL_OW 111
// continue ;
13849: GO 13341
// end ; end ; r := GetDir ( tmp ) ;
13851: LD_ADDR_VAR 0 15
13855: PUSH
13856: LD_VAR 0 13
13860: PPUSH
13861: CALL_OW 254
13865: ST_TO_ADDR
// if r = 5 then
13866: LD_VAR 0 15
13870: PUSH
13871: LD_INT 5
13873: EQUAL
13874: IFFALSE 13884
// r := 0 ;
13876: LD_ADDR_VAR 0 15
13880: PUSH
13881: LD_INT 0
13883: ST_TO_ADDR
// for j = r to 5 do
13884: LD_ADDR_VAR 0 10
13888: PUSH
13889: DOUBLE
13890: LD_VAR 0 15
13894: DEC
13895: ST_TO_ADDR
13896: LD_INT 5
13898: PUSH
13899: FOR_TO
13900: IFFALSE 14014
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13902: LD_ADDR_VAR 0 11
13906: PUSH
13907: LD_VAR 0 13
13911: PPUSH
13912: CALL_OW 250
13916: PPUSH
13917: LD_VAR 0 10
13921: PPUSH
13922: LD_INT 2
13924: PPUSH
13925: CALL_OW 272
13929: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13930: LD_ADDR_VAR 0 12
13934: PUSH
13935: LD_VAR 0 13
13939: PPUSH
13940: CALL_OW 251
13944: PPUSH
13945: LD_VAR 0 10
13949: PPUSH
13950: LD_INT 2
13952: PPUSH
13953: CALL_OW 273
13957: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13958: LD_VAR 0 11
13962: PPUSH
13963: LD_VAR 0 12
13967: PPUSH
13968: CALL_OW 488
13972: PUSH
13973: LD_VAR 0 11
13977: PPUSH
13978: LD_VAR 0 12
13982: PPUSH
13983: CALL_OW 428
13987: NOT
13988: AND
13989: IFFALSE 14012
// begin ComMoveXY ( tmp , _x , _y ) ;
13991: LD_VAR 0 13
13995: PPUSH
13996: LD_VAR 0 11
14000: PPUSH
14001: LD_VAR 0 12
14005: PPUSH
14006: CALL_OW 111
// break ;
14010: GO 14014
// end ; end ;
14012: GO 13899
14014: POP
14015: POP
// end ; end ;
14016: GO 13341
14018: POP
14019: POP
// end ;
14020: LD_VAR 0 8
14024: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14025: LD_INT 0
14027: PPUSH
// result := true ;
14028: LD_ADDR_VAR 0 3
14032: PUSH
14033: LD_INT 1
14035: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14036: LD_VAR 0 2
14040: PUSH
14041: LD_INT 24
14043: DOUBLE
14044: EQUAL
14045: IFTRUE 14055
14047: LD_INT 33
14049: DOUBLE
14050: EQUAL
14051: IFTRUE 14055
14053: GO 14080
14055: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14056: LD_ADDR_VAR 0 3
14060: PUSH
14061: LD_INT 32
14063: PPUSH
14064: LD_VAR 0 1
14068: PPUSH
14069: CALL_OW 321
14073: PUSH
14074: LD_INT 2
14076: EQUAL
14077: ST_TO_ADDR
14078: GO 14400
14080: LD_INT 20
14082: DOUBLE
14083: EQUAL
14084: IFTRUE 14088
14086: GO 14113
14088: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14089: LD_ADDR_VAR 0 3
14093: PUSH
14094: LD_INT 6
14096: PPUSH
14097: LD_VAR 0 1
14101: PPUSH
14102: CALL_OW 321
14106: PUSH
14107: LD_INT 2
14109: EQUAL
14110: ST_TO_ADDR
14111: GO 14400
14113: LD_INT 22
14115: DOUBLE
14116: EQUAL
14117: IFTRUE 14127
14119: LD_INT 36
14121: DOUBLE
14122: EQUAL
14123: IFTRUE 14127
14125: GO 14152
14127: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14128: LD_ADDR_VAR 0 3
14132: PUSH
14133: LD_INT 15
14135: PPUSH
14136: LD_VAR 0 1
14140: PPUSH
14141: CALL_OW 321
14145: PUSH
14146: LD_INT 2
14148: EQUAL
14149: ST_TO_ADDR
14150: GO 14400
14152: LD_INT 30
14154: DOUBLE
14155: EQUAL
14156: IFTRUE 14160
14158: GO 14185
14160: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14161: LD_ADDR_VAR 0 3
14165: PUSH
14166: LD_INT 20
14168: PPUSH
14169: LD_VAR 0 1
14173: PPUSH
14174: CALL_OW 321
14178: PUSH
14179: LD_INT 2
14181: EQUAL
14182: ST_TO_ADDR
14183: GO 14400
14185: LD_INT 28
14187: DOUBLE
14188: EQUAL
14189: IFTRUE 14199
14191: LD_INT 21
14193: DOUBLE
14194: EQUAL
14195: IFTRUE 14199
14197: GO 14224
14199: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14200: LD_ADDR_VAR 0 3
14204: PUSH
14205: LD_INT 21
14207: PPUSH
14208: LD_VAR 0 1
14212: PPUSH
14213: CALL_OW 321
14217: PUSH
14218: LD_INT 2
14220: EQUAL
14221: ST_TO_ADDR
14222: GO 14400
14224: LD_INT 16
14226: DOUBLE
14227: EQUAL
14228: IFTRUE 14232
14230: GO 14259
14232: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14233: LD_ADDR_VAR 0 3
14237: PUSH
14238: LD_EXP 16
14242: PPUSH
14243: LD_VAR 0 1
14247: PPUSH
14248: CALL_OW 321
14252: PUSH
14253: LD_INT 2
14255: EQUAL
14256: ST_TO_ADDR
14257: GO 14400
14259: LD_INT 19
14261: DOUBLE
14262: EQUAL
14263: IFTRUE 14273
14265: LD_INT 23
14267: DOUBLE
14268: EQUAL
14269: IFTRUE 14273
14271: GO 14300
14273: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14274: LD_ADDR_VAR 0 3
14278: PUSH
14279: LD_EXP 15
14283: PPUSH
14284: LD_VAR 0 1
14288: PPUSH
14289: CALL_OW 321
14293: PUSH
14294: LD_INT 2
14296: EQUAL
14297: ST_TO_ADDR
14298: GO 14400
14300: LD_INT 17
14302: DOUBLE
14303: EQUAL
14304: IFTRUE 14308
14306: GO 14333
14308: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14309: LD_ADDR_VAR 0 3
14313: PUSH
14314: LD_INT 39
14316: PPUSH
14317: LD_VAR 0 1
14321: PPUSH
14322: CALL_OW 321
14326: PUSH
14327: LD_INT 2
14329: EQUAL
14330: ST_TO_ADDR
14331: GO 14400
14333: LD_INT 18
14335: DOUBLE
14336: EQUAL
14337: IFTRUE 14341
14339: GO 14366
14341: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14342: LD_ADDR_VAR 0 3
14346: PUSH
14347: LD_INT 40
14349: PPUSH
14350: LD_VAR 0 1
14354: PPUSH
14355: CALL_OW 321
14359: PUSH
14360: LD_INT 2
14362: EQUAL
14363: ST_TO_ADDR
14364: GO 14400
14366: LD_INT 27
14368: DOUBLE
14369: EQUAL
14370: IFTRUE 14374
14372: GO 14399
14374: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14375: LD_ADDR_VAR 0 3
14379: PUSH
14380: LD_INT 35
14382: PPUSH
14383: LD_VAR 0 1
14387: PPUSH
14388: CALL_OW 321
14392: PUSH
14393: LD_INT 2
14395: EQUAL
14396: ST_TO_ADDR
14397: GO 14400
14399: POP
// end ;
14400: LD_VAR 0 3
14404: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14405: LD_INT 0
14407: PPUSH
14408: PPUSH
14409: PPUSH
14410: PPUSH
14411: PPUSH
14412: PPUSH
14413: PPUSH
14414: PPUSH
14415: PPUSH
14416: PPUSH
14417: PPUSH
// result := false ;
14418: LD_ADDR_VAR 0 6
14422: PUSH
14423: LD_INT 0
14425: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14426: LD_VAR 0 1
14430: NOT
14431: PUSH
14432: LD_VAR 0 1
14436: PPUSH
14437: CALL_OW 266
14441: PUSH
14442: LD_INT 0
14444: PUSH
14445: LD_INT 1
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: IN
14452: NOT
14453: OR
14454: PUSH
14455: LD_VAR 0 2
14459: NOT
14460: OR
14461: PUSH
14462: LD_VAR 0 5
14466: PUSH
14467: LD_INT 0
14469: PUSH
14470: LD_INT 1
14472: PUSH
14473: LD_INT 2
14475: PUSH
14476: LD_INT 3
14478: PUSH
14479: LD_INT 4
14481: PUSH
14482: LD_INT 5
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: IN
14493: NOT
14494: OR
14495: PUSH
14496: LD_VAR 0 3
14500: PPUSH
14501: LD_VAR 0 4
14505: PPUSH
14506: CALL_OW 488
14510: NOT
14511: OR
14512: IFFALSE 14516
// exit ;
14514: GO 15252
// side := GetSide ( depot ) ;
14516: LD_ADDR_VAR 0 9
14520: PUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 255
14530: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14531: LD_VAR 0 9
14535: PPUSH
14536: LD_VAR 0 2
14540: PPUSH
14541: CALL 14025 0 2
14545: NOT
14546: IFFALSE 14550
// exit ;
14548: GO 15252
// pom := GetBase ( depot ) ;
14550: LD_ADDR_VAR 0 10
14554: PUSH
14555: LD_VAR 0 1
14559: PPUSH
14560: CALL_OW 274
14564: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14565: LD_ADDR_VAR 0 11
14569: PUSH
14570: LD_VAR 0 2
14574: PPUSH
14575: LD_VAR 0 1
14579: PPUSH
14580: CALL_OW 248
14584: PPUSH
14585: CALL_OW 450
14589: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14590: LD_VAR 0 10
14594: PPUSH
14595: LD_INT 1
14597: PPUSH
14598: CALL_OW 275
14602: PUSH
14603: LD_VAR 0 11
14607: PUSH
14608: LD_INT 1
14610: ARRAY
14611: GREATEREQUAL
14612: PUSH
14613: LD_VAR 0 10
14617: PPUSH
14618: LD_INT 2
14620: PPUSH
14621: CALL_OW 275
14625: PUSH
14626: LD_VAR 0 11
14630: PUSH
14631: LD_INT 2
14633: ARRAY
14634: GREATEREQUAL
14635: AND
14636: PUSH
14637: LD_VAR 0 10
14641: PPUSH
14642: LD_INT 3
14644: PPUSH
14645: CALL_OW 275
14649: PUSH
14650: LD_VAR 0 11
14654: PUSH
14655: LD_INT 3
14657: ARRAY
14658: GREATEREQUAL
14659: AND
14660: NOT
14661: IFFALSE 14665
// exit ;
14663: GO 15252
// if GetBType ( depot ) = b_depot then
14665: LD_VAR 0 1
14669: PPUSH
14670: CALL_OW 266
14674: PUSH
14675: LD_INT 0
14677: EQUAL
14678: IFFALSE 14690
// dist := 28 else
14680: LD_ADDR_VAR 0 14
14684: PUSH
14685: LD_INT 28
14687: ST_TO_ADDR
14688: GO 14698
// dist := 36 ;
14690: LD_ADDR_VAR 0 14
14694: PUSH
14695: LD_INT 36
14697: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14698: LD_VAR 0 1
14702: PPUSH
14703: LD_VAR 0 3
14707: PPUSH
14708: LD_VAR 0 4
14712: PPUSH
14713: CALL_OW 297
14717: PUSH
14718: LD_VAR 0 14
14722: GREATER
14723: IFFALSE 14727
// exit ;
14725: GO 15252
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14727: LD_ADDR_VAR 0 12
14731: PUSH
14732: LD_VAR 0 2
14736: PPUSH
14737: LD_VAR 0 3
14741: PPUSH
14742: LD_VAR 0 4
14746: PPUSH
14747: LD_VAR 0 5
14751: PPUSH
14752: LD_VAR 0 1
14756: PPUSH
14757: CALL_OW 248
14761: PPUSH
14762: LD_INT 0
14764: PPUSH
14765: CALL 15257 0 6
14769: ST_TO_ADDR
// if not hexes then
14770: LD_VAR 0 12
14774: NOT
14775: IFFALSE 14779
// exit ;
14777: GO 15252
// hex := GetHexInfo ( x , y ) ;
14779: LD_ADDR_VAR 0 15
14783: PUSH
14784: LD_VAR 0 3
14788: PPUSH
14789: LD_VAR 0 4
14793: PPUSH
14794: CALL_OW 546
14798: ST_TO_ADDR
// if hex [ 1 ] then
14799: LD_VAR 0 15
14803: PUSH
14804: LD_INT 1
14806: ARRAY
14807: IFFALSE 14811
// exit ;
14809: GO 15252
// height := hex [ 2 ] ;
14811: LD_ADDR_VAR 0 13
14815: PUSH
14816: LD_VAR 0 15
14820: PUSH
14821: LD_INT 2
14823: ARRAY
14824: ST_TO_ADDR
// for i = 1 to hexes do
14825: LD_ADDR_VAR 0 7
14829: PUSH
14830: DOUBLE
14831: LD_INT 1
14833: DEC
14834: ST_TO_ADDR
14835: LD_VAR 0 12
14839: PUSH
14840: FOR_TO
14841: IFFALSE 15171
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14843: LD_VAR 0 12
14847: PUSH
14848: LD_VAR 0 7
14852: ARRAY
14853: PUSH
14854: LD_INT 1
14856: ARRAY
14857: PPUSH
14858: LD_VAR 0 12
14862: PUSH
14863: LD_VAR 0 7
14867: ARRAY
14868: PUSH
14869: LD_INT 2
14871: ARRAY
14872: PPUSH
14873: CALL_OW 488
14877: NOT
14878: PUSH
14879: LD_VAR 0 12
14883: PUSH
14884: LD_VAR 0 7
14888: ARRAY
14889: PUSH
14890: LD_INT 1
14892: ARRAY
14893: PPUSH
14894: LD_VAR 0 12
14898: PUSH
14899: LD_VAR 0 7
14903: ARRAY
14904: PUSH
14905: LD_INT 2
14907: ARRAY
14908: PPUSH
14909: CALL_OW 428
14913: PUSH
14914: LD_INT 0
14916: GREATER
14917: OR
14918: PUSH
14919: LD_VAR 0 12
14923: PUSH
14924: LD_VAR 0 7
14928: ARRAY
14929: PUSH
14930: LD_INT 1
14932: ARRAY
14933: PPUSH
14934: LD_VAR 0 12
14938: PUSH
14939: LD_VAR 0 7
14943: ARRAY
14944: PUSH
14945: LD_INT 2
14947: ARRAY
14948: PPUSH
14949: CALL_OW 351
14953: OR
14954: IFFALSE 14960
// exit ;
14956: POP
14957: POP
14958: GO 15252
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14960: LD_ADDR_VAR 0 8
14964: PUSH
14965: LD_VAR 0 12
14969: PUSH
14970: LD_VAR 0 7
14974: ARRAY
14975: PUSH
14976: LD_INT 1
14978: ARRAY
14979: PPUSH
14980: LD_VAR 0 12
14984: PUSH
14985: LD_VAR 0 7
14989: ARRAY
14990: PUSH
14991: LD_INT 2
14993: ARRAY
14994: PPUSH
14995: CALL_OW 546
14999: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15000: LD_VAR 0 8
15004: PUSH
15005: LD_INT 1
15007: ARRAY
15008: PUSH
15009: LD_VAR 0 8
15013: PUSH
15014: LD_INT 2
15016: ARRAY
15017: PUSH
15018: LD_VAR 0 13
15022: PUSH
15023: LD_INT 2
15025: PLUS
15026: GREATER
15027: OR
15028: PUSH
15029: LD_VAR 0 8
15033: PUSH
15034: LD_INT 2
15036: ARRAY
15037: PUSH
15038: LD_VAR 0 13
15042: PUSH
15043: LD_INT 2
15045: MINUS
15046: LESS
15047: OR
15048: PUSH
15049: LD_VAR 0 8
15053: PUSH
15054: LD_INT 3
15056: ARRAY
15057: PUSH
15058: LD_INT 0
15060: PUSH
15061: LD_INT 8
15063: PUSH
15064: LD_INT 9
15066: PUSH
15067: LD_INT 10
15069: PUSH
15070: LD_INT 11
15072: PUSH
15073: LD_INT 12
15075: PUSH
15076: LD_INT 13
15078: PUSH
15079: LD_INT 16
15081: PUSH
15082: LD_INT 17
15084: PUSH
15085: LD_INT 18
15087: PUSH
15088: LD_INT 19
15090: PUSH
15091: LD_INT 20
15093: PUSH
15094: LD_INT 21
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: IN
15112: NOT
15113: OR
15114: PUSH
15115: LD_VAR 0 8
15119: PUSH
15120: LD_INT 5
15122: ARRAY
15123: NOT
15124: OR
15125: PUSH
15126: LD_VAR 0 8
15130: PUSH
15131: LD_INT 6
15133: ARRAY
15134: PUSH
15135: LD_INT 1
15137: PUSH
15138: LD_INT 2
15140: PUSH
15141: LD_INT 7
15143: PUSH
15144: LD_INT 9
15146: PUSH
15147: LD_INT 10
15149: PUSH
15150: LD_INT 11
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: IN
15161: NOT
15162: OR
15163: IFFALSE 15169
// exit ;
15165: POP
15166: POP
15167: GO 15252
// end ;
15169: GO 14840
15171: POP
15172: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15173: LD_VAR 0 9
15177: PPUSH
15178: LD_VAR 0 3
15182: PPUSH
15183: LD_VAR 0 4
15187: PPUSH
15188: LD_INT 20
15190: PPUSH
15191: CALL 7198 0 4
15195: PUSH
15196: LD_INT 4
15198: ARRAY
15199: IFFALSE 15203
// exit ;
15201: GO 15252
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15203: LD_VAR 0 2
15207: PUSH
15208: LD_INT 29
15210: PUSH
15211: LD_INT 30
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: IN
15218: PUSH
15219: LD_VAR 0 3
15223: PPUSH
15224: LD_VAR 0 4
15228: PPUSH
15229: LD_VAR 0 9
15233: PPUSH
15234: CALL_OW 440
15238: NOT
15239: AND
15240: IFFALSE 15244
// exit ;
15242: GO 15252
// result := true ;
15244: LD_ADDR_VAR 0 6
15248: PUSH
15249: LD_INT 1
15251: ST_TO_ADDR
// end ;
15252: LD_VAR 0 6
15256: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15257: LD_INT 0
15259: PPUSH
15260: PPUSH
15261: PPUSH
15262: PPUSH
15263: PPUSH
15264: PPUSH
15265: PPUSH
15266: PPUSH
15267: PPUSH
15268: PPUSH
15269: PPUSH
15270: PPUSH
15271: PPUSH
15272: PPUSH
15273: PPUSH
15274: PPUSH
15275: PPUSH
15276: PPUSH
15277: PPUSH
15278: PPUSH
15279: PPUSH
15280: PPUSH
15281: PPUSH
15282: PPUSH
15283: PPUSH
15284: PPUSH
15285: PPUSH
15286: PPUSH
15287: PPUSH
15288: PPUSH
15289: PPUSH
15290: PPUSH
15291: PPUSH
15292: PPUSH
15293: PPUSH
15294: PPUSH
15295: PPUSH
15296: PPUSH
15297: PPUSH
15298: PPUSH
15299: PPUSH
15300: PPUSH
15301: PPUSH
15302: PPUSH
15303: PPUSH
15304: PPUSH
15305: PPUSH
15306: PPUSH
15307: PPUSH
15308: PPUSH
15309: PPUSH
15310: PPUSH
15311: PPUSH
15312: PPUSH
15313: PPUSH
15314: PPUSH
15315: PPUSH
15316: PPUSH
// result = [ ] ;
15317: LD_ADDR_VAR 0 7
15321: PUSH
15322: EMPTY
15323: ST_TO_ADDR
// temp_list = [ ] ;
15324: LD_ADDR_VAR 0 9
15328: PUSH
15329: EMPTY
15330: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15331: LD_VAR 0 4
15335: PUSH
15336: LD_INT 0
15338: PUSH
15339: LD_INT 1
15341: PUSH
15342: LD_INT 2
15344: PUSH
15345: LD_INT 3
15347: PUSH
15348: LD_INT 4
15350: PUSH
15351: LD_INT 5
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: IN
15362: NOT
15363: PUSH
15364: LD_VAR 0 1
15368: PUSH
15369: LD_INT 0
15371: PUSH
15372: LD_INT 1
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: IN
15379: PUSH
15380: LD_VAR 0 5
15384: PUSH
15385: LD_INT 1
15387: PUSH
15388: LD_INT 2
15390: PUSH
15391: LD_INT 3
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: LIST
15398: IN
15399: NOT
15400: AND
15401: OR
15402: IFFALSE 15406
// exit ;
15404: GO 33797
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15406: LD_VAR 0 1
15410: PUSH
15411: LD_INT 6
15413: PUSH
15414: LD_INT 7
15416: PUSH
15417: LD_INT 8
15419: PUSH
15420: LD_INT 13
15422: PUSH
15423: LD_INT 12
15425: PUSH
15426: LD_INT 15
15428: PUSH
15429: LD_INT 11
15431: PUSH
15432: LD_INT 14
15434: PUSH
15435: LD_INT 10
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: IN
15449: IFFALSE 15459
// btype = b_lab ;
15451: LD_ADDR_VAR 0 1
15455: PUSH
15456: LD_INT 6
15458: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15459: LD_VAR 0 6
15463: PUSH
15464: LD_INT 0
15466: PUSH
15467: LD_INT 1
15469: PUSH
15470: LD_INT 2
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: LIST
15477: IN
15478: NOT
15479: PUSH
15480: LD_VAR 0 1
15484: PUSH
15485: LD_INT 0
15487: PUSH
15488: LD_INT 1
15490: PUSH
15491: LD_INT 2
15493: PUSH
15494: LD_INT 3
15496: PUSH
15497: LD_INT 6
15499: PUSH
15500: LD_INT 36
15502: PUSH
15503: LD_INT 4
15505: PUSH
15506: LD_INT 5
15508: PUSH
15509: LD_INT 31
15511: PUSH
15512: LD_INT 32
15514: PUSH
15515: LD_INT 33
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: IN
15531: NOT
15532: PUSH
15533: LD_VAR 0 6
15537: PUSH
15538: LD_INT 1
15540: EQUAL
15541: AND
15542: OR
15543: PUSH
15544: LD_VAR 0 1
15548: PUSH
15549: LD_INT 2
15551: PUSH
15552: LD_INT 3
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: IN
15559: NOT
15560: PUSH
15561: LD_VAR 0 6
15565: PUSH
15566: LD_INT 2
15568: EQUAL
15569: AND
15570: OR
15571: IFFALSE 15581
// mode = 0 ;
15573: LD_ADDR_VAR 0 6
15577: PUSH
15578: LD_INT 0
15580: ST_TO_ADDR
// case mode of 0 :
15581: LD_VAR 0 6
15585: PUSH
15586: LD_INT 0
15588: DOUBLE
15589: EQUAL
15590: IFTRUE 15594
15592: GO 27047
15594: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15595: LD_ADDR_VAR 0 11
15599: PUSH
15600: LD_INT 0
15602: PUSH
15603: LD_INT 0
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 0
15612: PUSH
15613: LD_INT 1
15615: NEG
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 1
15623: PUSH
15624: LD_INT 0
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 1
15633: PUSH
15634: LD_INT 1
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 0
15643: PUSH
15644: LD_INT 1
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 1
15653: NEG
15654: PUSH
15655: LD_INT 0
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 1
15664: NEG
15665: PUSH
15666: LD_INT 1
15668: NEG
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 1
15676: NEG
15677: PUSH
15678: LD_INT 2
15680: NEG
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: LD_INT 0
15688: PUSH
15689: LD_INT 2
15691: NEG
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: LD_INT 1
15699: PUSH
15700: LD_INT 1
15702: NEG
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 1
15710: PUSH
15711: LD_INT 2
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 0
15720: PUSH
15721: LD_INT 2
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 1
15730: NEG
15731: PUSH
15732: LD_INT 1
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: LD_INT 1
15741: PUSH
15742: LD_INT 3
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 0
15751: PUSH
15752: LD_INT 3
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: LD_INT 1
15761: NEG
15762: PUSH
15763: LD_INT 2
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15788: LD_ADDR_VAR 0 12
15792: PUSH
15793: LD_INT 0
15795: PUSH
15796: LD_INT 0
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 0
15805: PUSH
15806: LD_INT 1
15808: NEG
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 1
15816: PUSH
15817: LD_INT 0
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 1
15826: PUSH
15827: LD_INT 1
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 0
15836: PUSH
15837: LD_INT 1
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 1
15846: NEG
15847: PUSH
15848: LD_INT 0
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PUSH
15855: LD_INT 1
15857: NEG
15858: PUSH
15859: LD_INT 1
15861: NEG
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 1
15869: PUSH
15870: LD_INT 1
15872: NEG
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: LD_INT 2
15880: PUSH
15881: LD_INT 0
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 2
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 1
15900: NEG
15901: PUSH
15902: LD_INT 1
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PUSH
15909: LD_INT 2
15911: NEG
15912: PUSH
15913: LD_INT 0
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 2
15922: NEG
15923: PUSH
15924: LD_INT 1
15926: NEG
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PUSH
15932: LD_INT 2
15934: NEG
15935: PUSH
15936: LD_INT 1
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: PUSH
15943: LD_INT 3
15945: NEG
15946: PUSH
15947: LD_INT 0
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 3
15956: NEG
15957: PUSH
15958: LD_INT 1
15960: NEG
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15984: LD_ADDR_VAR 0 13
15988: PUSH
15989: LD_INT 0
15991: PUSH
15992: LD_INT 0
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 0
16001: PUSH
16002: LD_INT 1
16004: NEG
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: LD_INT 1
16012: PUSH
16013: LD_INT 0
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 1
16022: PUSH
16023: LD_INT 1
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: LD_INT 0
16032: PUSH
16033: LD_INT 1
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PUSH
16040: LD_INT 1
16042: NEG
16043: PUSH
16044: LD_INT 0
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PUSH
16051: LD_INT 1
16053: NEG
16054: PUSH
16055: LD_INT 1
16057: NEG
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PUSH
16063: LD_INT 1
16065: NEG
16066: PUSH
16067: LD_INT 2
16069: NEG
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: LD_INT 2
16077: PUSH
16078: LD_INT 1
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PUSH
16085: LD_INT 2
16087: PUSH
16088: LD_INT 2
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: PUSH
16095: LD_INT 1
16097: PUSH
16098: LD_INT 2
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: PUSH
16105: LD_INT 2
16107: NEG
16108: PUSH
16109: LD_INT 1
16111: NEG
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: LD_INT 2
16119: NEG
16120: PUSH
16121: LD_INT 2
16123: NEG
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: LD_INT 2
16131: NEG
16132: PUSH
16133: LD_INT 3
16135: NEG
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PUSH
16141: LD_INT 3
16143: NEG
16144: PUSH
16145: LD_INT 2
16147: NEG
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 3
16155: NEG
16156: PUSH
16157: LD_INT 3
16159: NEG
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16183: LD_ADDR_VAR 0 14
16187: PUSH
16188: LD_INT 0
16190: PUSH
16191: LD_INT 0
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 0
16200: PUSH
16201: LD_INT 1
16203: NEG
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: LD_INT 1
16211: PUSH
16212: LD_INT 0
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 1
16221: PUSH
16222: LD_INT 1
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 0
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 1
16241: NEG
16242: PUSH
16243: LD_INT 0
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 1
16252: NEG
16253: PUSH
16254: LD_INT 1
16256: NEG
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 1
16264: NEG
16265: PUSH
16266: LD_INT 2
16268: NEG
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: LD_INT 0
16276: PUSH
16277: LD_INT 2
16279: NEG
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 1
16287: PUSH
16288: LD_INT 1
16290: NEG
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 1
16298: PUSH
16299: LD_INT 2
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: LD_INT 0
16308: PUSH
16309: LD_INT 2
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: LD_INT 1
16318: NEG
16319: PUSH
16320: LD_INT 1
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: LD_INT 1
16329: NEG
16330: PUSH
16331: LD_INT 3
16333: NEG
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 0
16341: PUSH
16342: LD_INT 3
16344: NEG
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: PUSH
16350: LD_INT 1
16352: PUSH
16353: LD_INT 2
16355: NEG
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16379: LD_ADDR_VAR 0 15
16383: PUSH
16384: LD_INT 0
16386: PUSH
16387: LD_INT 0
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 0
16396: PUSH
16397: LD_INT 1
16399: NEG
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: LD_INT 1
16407: PUSH
16408: LD_INT 0
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 1
16417: PUSH
16418: LD_INT 1
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 0
16427: PUSH
16428: LD_INT 1
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 1
16437: NEG
16438: PUSH
16439: LD_INT 0
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 1
16448: NEG
16449: PUSH
16450: LD_INT 1
16452: NEG
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 1
16460: PUSH
16461: LD_INT 1
16463: NEG
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 2
16471: PUSH
16472: LD_INT 0
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 2
16481: PUSH
16482: LD_INT 1
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 1
16491: NEG
16492: PUSH
16493: LD_INT 1
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 2
16502: NEG
16503: PUSH
16504: LD_INT 0
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 2
16513: NEG
16514: PUSH
16515: LD_INT 1
16517: NEG
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 2
16525: PUSH
16526: LD_INT 1
16528: NEG
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: LD_INT 3
16536: PUSH
16537: LD_INT 0
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 3
16546: PUSH
16547: LD_INT 1
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16572: LD_ADDR_VAR 0 16
16576: PUSH
16577: LD_INT 0
16579: PUSH
16580: LD_INT 0
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 0
16589: PUSH
16590: LD_INT 1
16592: NEG
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 1
16600: PUSH
16601: LD_INT 0
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 1
16610: PUSH
16611: LD_INT 1
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 0
16620: PUSH
16621: LD_INT 1
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 1
16630: NEG
16631: PUSH
16632: LD_INT 0
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 1
16641: NEG
16642: PUSH
16643: LD_INT 1
16645: NEG
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 1
16653: NEG
16654: PUSH
16655: LD_INT 2
16657: NEG
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: LD_INT 2
16665: PUSH
16666: LD_INT 1
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 2
16675: PUSH
16676: LD_INT 2
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 1
16685: PUSH
16686: LD_INT 2
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 2
16695: NEG
16696: PUSH
16697: LD_INT 1
16699: NEG
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 2
16707: NEG
16708: PUSH
16709: LD_INT 2
16711: NEG
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 3
16719: PUSH
16720: LD_INT 2
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 3
16729: PUSH
16730: LD_INT 3
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 2
16739: PUSH
16740: LD_INT 3
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16765: LD_ADDR_VAR 0 17
16769: PUSH
16770: LD_INT 0
16772: PUSH
16773: LD_INT 0
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 0
16782: PUSH
16783: LD_INT 1
16785: NEG
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 1
16793: PUSH
16794: LD_INT 0
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 1
16803: PUSH
16804: LD_INT 1
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 0
16813: PUSH
16814: LD_INT 1
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 1
16823: NEG
16824: PUSH
16825: LD_INT 0
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: LD_INT 1
16834: NEG
16835: PUSH
16836: LD_INT 1
16838: NEG
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: LD_INT 1
16846: NEG
16847: PUSH
16848: LD_INT 2
16850: NEG
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: LD_INT 0
16858: PUSH
16859: LD_INT 2
16861: NEG
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 1
16869: PUSH
16870: LD_INT 1
16872: NEG
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 2
16880: PUSH
16881: LD_INT 0
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 2
16890: PUSH
16891: LD_INT 1
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 2
16900: PUSH
16901: LD_INT 2
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 1
16910: PUSH
16911: LD_INT 2
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: LD_INT 0
16920: PUSH
16921: LD_INT 2
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 1
16930: NEG
16931: PUSH
16932: LD_INT 1
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 2
16941: NEG
16942: PUSH
16943: LD_INT 0
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 2
16952: NEG
16953: PUSH
16954: LD_INT 1
16956: NEG
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 2
16964: NEG
16965: PUSH
16966: LD_INT 2
16968: NEG
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16995: LD_ADDR_VAR 0 18
16999: PUSH
17000: LD_INT 0
17002: PUSH
17003: LD_INT 0
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 0
17012: PUSH
17013: LD_INT 1
17015: NEG
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 1
17023: PUSH
17024: LD_INT 0
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 1
17033: PUSH
17034: LD_INT 1
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 0
17043: PUSH
17044: LD_INT 1
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 1
17053: NEG
17054: PUSH
17055: LD_INT 0
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 1
17064: NEG
17065: PUSH
17066: LD_INT 1
17068: NEG
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 1
17076: NEG
17077: PUSH
17078: LD_INT 2
17080: NEG
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: LD_INT 0
17088: PUSH
17089: LD_INT 2
17091: NEG
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 1
17099: PUSH
17100: LD_INT 1
17102: NEG
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: LD_INT 2
17110: PUSH
17111: LD_INT 0
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 2
17120: PUSH
17121: LD_INT 1
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 2
17130: PUSH
17131: LD_INT 2
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 1
17140: PUSH
17141: LD_INT 2
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 0
17150: PUSH
17151: LD_INT 2
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 1
17160: NEG
17161: PUSH
17162: LD_INT 1
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: LD_INT 2
17171: NEG
17172: PUSH
17173: LD_INT 0
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 2
17182: NEG
17183: PUSH
17184: LD_INT 1
17186: NEG
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 2
17194: NEG
17195: PUSH
17196: LD_INT 2
17198: NEG
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17225: LD_ADDR_VAR 0 19
17229: PUSH
17230: LD_INT 0
17232: PUSH
17233: LD_INT 0
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 0
17242: PUSH
17243: LD_INT 1
17245: NEG
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: LD_INT 1
17253: PUSH
17254: LD_INT 0
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 1
17263: PUSH
17264: LD_INT 1
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 0
17273: PUSH
17274: LD_INT 1
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 1
17283: NEG
17284: PUSH
17285: LD_INT 0
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 1
17294: NEG
17295: PUSH
17296: LD_INT 1
17298: NEG
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 1
17306: NEG
17307: PUSH
17308: LD_INT 2
17310: NEG
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PUSH
17316: LD_INT 0
17318: PUSH
17319: LD_INT 2
17321: NEG
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 1
17329: PUSH
17330: LD_INT 1
17332: NEG
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 2
17340: PUSH
17341: LD_INT 0
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 2
17350: PUSH
17351: LD_INT 1
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 2
17360: PUSH
17361: LD_INT 2
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 1
17370: PUSH
17371: LD_INT 2
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 0
17380: PUSH
17381: LD_INT 2
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 1
17390: NEG
17391: PUSH
17392: LD_INT 1
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 2
17401: NEG
17402: PUSH
17403: LD_INT 0
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 2
17412: NEG
17413: PUSH
17414: LD_INT 1
17416: NEG
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: LD_INT 2
17424: NEG
17425: PUSH
17426: LD_INT 2
17428: NEG
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17455: LD_ADDR_VAR 0 20
17459: PUSH
17460: LD_INT 0
17462: PUSH
17463: LD_INT 0
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 0
17472: PUSH
17473: LD_INT 1
17475: NEG
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 1
17483: PUSH
17484: LD_INT 0
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 1
17493: PUSH
17494: LD_INT 1
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 0
17503: PUSH
17504: LD_INT 1
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 1
17513: NEG
17514: PUSH
17515: LD_INT 0
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 1
17524: NEG
17525: PUSH
17526: LD_INT 1
17528: NEG
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 1
17536: NEG
17537: PUSH
17538: LD_INT 2
17540: NEG
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 0
17548: PUSH
17549: LD_INT 2
17551: NEG
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 1
17559: PUSH
17560: LD_INT 1
17562: NEG
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 2
17570: PUSH
17571: LD_INT 0
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 2
17580: PUSH
17581: LD_INT 1
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 2
17590: PUSH
17591: LD_INT 2
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: LD_INT 2
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 0
17610: PUSH
17611: LD_INT 2
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 1
17620: NEG
17621: PUSH
17622: LD_INT 1
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 2
17631: NEG
17632: PUSH
17633: LD_INT 0
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 2
17642: NEG
17643: PUSH
17644: LD_INT 1
17646: NEG
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: LD_INT 2
17654: NEG
17655: PUSH
17656: LD_INT 2
17658: NEG
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17685: LD_ADDR_VAR 0 21
17689: PUSH
17690: LD_INT 0
17692: PUSH
17693: LD_INT 0
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 0
17702: PUSH
17703: LD_INT 1
17705: NEG
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 1
17713: PUSH
17714: LD_INT 0
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 1
17723: PUSH
17724: LD_INT 1
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 0
17733: PUSH
17734: LD_INT 1
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 1
17743: NEG
17744: PUSH
17745: LD_INT 0
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 1
17754: NEG
17755: PUSH
17756: LD_INT 1
17758: NEG
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 1
17766: NEG
17767: PUSH
17768: LD_INT 2
17770: NEG
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 0
17778: PUSH
17779: LD_INT 2
17781: NEG
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 1
17789: PUSH
17790: LD_INT 1
17792: NEG
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 2
17800: PUSH
17801: LD_INT 0
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 2
17810: PUSH
17811: LD_INT 1
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 2
17820: PUSH
17821: LD_INT 2
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 1
17830: PUSH
17831: LD_INT 2
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 0
17840: PUSH
17841: LD_INT 2
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 1
17850: NEG
17851: PUSH
17852: LD_INT 1
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 2
17861: NEG
17862: PUSH
17863: LD_INT 0
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: LD_INT 2
17872: NEG
17873: PUSH
17874: LD_INT 1
17876: NEG
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 2
17884: NEG
17885: PUSH
17886: LD_INT 2
17888: NEG
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17915: LD_ADDR_VAR 0 22
17919: PUSH
17920: LD_INT 0
17922: PUSH
17923: LD_INT 0
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 0
17932: PUSH
17933: LD_INT 1
17935: NEG
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 1
17943: PUSH
17944: LD_INT 0
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 1
17953: PUSH
17954: LD_INT 1
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 0
17963: PUSH
17964: LD_INT 1
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 1
17973: NEG
17974: PUSH
17975: LD_INT 0
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PUSH
17982: LD_INT 1
17984: NEG
17985: PUSH
17986: LD_INT 1
17988: NEG
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 1
17996: NEG
17997: PUSH
17998: LD_INT 2
18000: NEG
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 0
18008: PUSH
18009: LD_INT 2
18011: NEG
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 1
18019: PUSH
18020: LD_INT 1
18022: NEG
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 2
18030: PUSH
18031: LD_INT 0
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 2
18040: PUSH
18041: LD_INT 1
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 2
18050: PUSH
18051: LD_INT 2
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PUSH
18058: LD_INT 1
18060: PUSH
18061: LD_INT 2
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 0
18070: PUSH
18071: LD_INT 2
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 1
18080: NEG
18081: PUSH
18082: LD_INT 1
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 2
18091: NEG
18092: PUSH
18093: LD_INT 0
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: LD_INT 2
18102: NEG
18103: PUSH
18104: LD_INT 1
18106: NEG
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 2
18114: NEG
18115: PUSH
18116: LD_INT 2
18118: NEG
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18145: LD_ADDR_VAR 0 23
18149: PUSH
18150: LD_INT 0
18152: PUSH
18153: LD_INT 0
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 0
18162: PUSH
18163: LD_INT 1
18165: NEG
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 1
18173: PUSH
18174: LD_INT 0
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 1
18183: PUSH
18184: LD_INT 1
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 0
18193: PUSH
18194: LD_INT 1
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 1
18203: NEG
18204: PUSH
18205: LD_INT 0
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 1
18214: NEG
18215: PUSH
18216: LD_INT 1
18218: NEG
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 1
18226: NEG
18227: PUSH
18228: LD_INT 2
18230: NEG
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 0
18238: PUSH
18239: LD_INT 2
18241: NEG
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 1
18249: PUSH
18250: LD_INT 1
18252: NEG
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 2
18260: PUSH
18261: LD_INT 0
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 2
18270: PUSH
18271: LD_INT 1
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 2
18280: PUSH
18281: LD_INT 2
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 1
18290: PUSH
18291: LD_INT 2
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 0
18300: PUSH
18301: LD_INT 2
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 1
18310: NEG
18311: PUSH
18312: LD_INT 1
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 2
18321: NEG
18322: PUSH
18323: LD_INT 0
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 2
18332: NEG
18333: PUSH
18334: LD_INT 1
18336: NEG
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 2
18344: NEG
18345: PUSH
18346: LD_INT 2
18348: NEG
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 2
18356: NEG
18357: PUSH
18358: LD_INT 3
18360: NEG
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 1
18368: NEG
18369: PUSH
18370: LD_INT 3
18372: NEG
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 1
18380: PUSH
18381: LD_INT 2
18383: NEG
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 2
18391: PUSH
18392: LD_INT 1
18394: NEG
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18425: LD_ADDR_VAR 0 24
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: LD_INT 0
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 0
18442: PUSH
18443: LD_INT 1
18445: NEG
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 1
18453: PUSH
18454: LD_INT 0
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 1
18463: PUSH
18464: LD_INT 1
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 0
18473: PUSH
18474: LD_INT 1
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 1
18483: NEG
18484: PUSH
18485: LD_INT 0
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 1
18494: NEG
18495: PUSH
18496: LD_INT 1
18498: NEG
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 1
18506: NEG
18507: PUSH
18508: LD_INT 2
18510: NEG
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 0
18518: PUSH
18519: LD_INT 2
18521: NEG
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 1
18529: PUSH
18530: LD_INT 1
18532: NEG
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 2
18540: PUSH
18541: LD_INT 0
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 2
18550: PUSH
18551: LD_INT 1
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 2
18560: PUSH
18561: LD_INT 2
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 1
18570: PUSH
18571: LD_INT 2
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 0
18580: PUSH
18581: LD_INT 2
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 1
18590: NEG
18591: PUSH
18592: LD_INT 1
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 2
18601: NEG
18602: PUSH
18603: LD_INT 0
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 2
18612: NEG
18613: PUSH
18614: LD_INT 1
18616: NEG
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 2
18624: NEG
18625: PUSH
18626: LD_INT 2
18628: NEG
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 1
18636: PUSH
18637: LD_INT 2
18639: NEG
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 2
18647: PUSH
18648: LD_INT 1
18650: NEG
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 3
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 3
18668: PUSH
18669: LD_INT 2
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18701: LD_ADDR_VAR 0 25
18705: PUSH
18706: LD_INT 0
18708: PUSH
18709: LD_INT 0
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 0
18718: PUSH
18719: LD_INT 1
18721: NEG
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 1
18729: PUSH
18730: LD_INT 0
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: LD_INT 1
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 0
18749: PUSH
18750: LD_INT 1
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 1
18759: NEG
18760: PUSH
18761: LD_INT 0
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 1
18770: NEG
18771: PUSH
18772: LD_INT 1
18774: NEG
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 1
18782: NEG
18783: PUSH
18784: LD_INT 2
18786: NEG
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 0
18794: PUSH
18795: LD_INT 2
18797: NEG
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 1
18805: PUSH
18806: LD_INT 1
18808: NEG
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 2
18816: PUSH
18817: LD_INT 0
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 2
18826: PUSH
18827: LD_INT 1
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 2
18836: PUSH
18837: LD_INT 2
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 1
18846: PUSH
18847: LD_INT 2
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 0
18856: PUSH
18857: LD_INT 2
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 1
18866: NEG
18867: PUSH
18868: LD_INT 1
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 2
18877: NEG
18878: PUSH
18879: LD_INT 0
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 2
18888: NEG
18889: PUSH
18890: LD_INT 1
18892: NEG
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 2
18900: NEG
18901: PUSH
18902: LD_INT 2
18904: NEG
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 3
18912: PUSH
18913: LD_INT 1
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 3
18922: PUSH
18923: LD_INT 2
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 2
18932: PUSH
18933: LD_INT 3
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 1
18942: PUSH
18943: LD_INT 3
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18975: LD_ADDR_VAR 0 26
18979: PUSH
18980: LD_INT 0
18982: PUSH
18983: LD_INT 0
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 0
18992: PUSH
18993: LD_INT 1
18995: NEG
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 1
19003: PUSH
19004: LD_INT 0
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 1
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 0
19023: PUSH
19024: LD_INT 1
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 1
19033: NEG
19034: PUSH
19035: LD_INT 0
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 1
19044: NEG
19045: PUSH
19046: LD_INT 1
19048: NEG
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 1
19056: NEG
19057: PUSH
19058: LD_INT 2
19060: NEG
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 0
19068: PUSH
19069: LD_INT 2
19071: NEG
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 1
19079: PUSH
19080: LD_INT 1
19082: NEG
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 2
19090: PUSH
19091: LD_INT 0
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 2
19100: PUSH
19101: LD_INT 1
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 2
19110: PUSH
19111: LD_INT 2
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 1
19120: PUSH
19121: LD_INT 2
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 0
19130: PUSH
19131: LD_INT 2
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 1
19140: NEG
19141: PUSH
19142: LD_INT 1
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 2
19151: NEG
19152: PUSH
19153: LD_INT 0
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 2
19162: NEG
19163: PUSH
19164: LD_INT 1
19166: NEG
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 2
19174: NEG
19175: PUSH
19176: LD_INT 2
19178: NEG
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 2
19186: PUSH
19187: LD_INT 3
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 1
19196: PUSH
19197: LD_INT 3
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 1
19206: NEG
19207: PUSH
19208: LD_INT 2
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 2
19217: NEG
19218: PUSH
19219: LD_INT 1
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19251: LD_ADDR_VAR 0 27
19255: PUSH
19256: LD_INT 0
19258: PUSH
19259: LD_INT 0
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 0
19268: PUSH
19269: LD_INT 1
19271: NEG
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 1
19279: PUSH
19280: LD_INT 0
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 1
19289: PUSH
19290: LD_INT 1
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 0
19299: PUSH
19300: LD_INT 1
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 1
19309: NEG
19310: PUSH
19311: LD_INT 0
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 1
19320: NEG
19321: PUSH
19322: LD_INT 1
19324: NEG
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 1
19332: NEG
19333: PUSH
19334: LD_INT 2
19336: NEG
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 0
19344: PUSH
19345: LD_INT 2
19347: NEG
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 1
19355: PUSH
19356: LD_INT 1
19358: NEG
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 2
19366: PUSH
19367: LD_INT 0
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 2
19376: PUSH
19377: LD_INT 1
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 2
19386: PUSH
19387: LD_INT 2
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 1
19396: PUSH
19397: LD_INT 2
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 0
19406: PUSH
19407: LD_INT 2
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 1
19416: NEG
19417: PUSH
19418: LD_INT 1
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 2
19427: NEG
19428: PUSH
19429: LD_INT 0
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 2
19438: NEG
19439: PUSH
19440: LD_INT 1
19442: NEG
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 2
19450: NEG
19451: PUSH
19452: LD_INT 2
19454: NEG
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 1
19462: NEG
19463: PUSH
19464: LD_INT 2
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 2
19473: NEG
19474: PUSH
19475: LD_INT 1
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 3
19484: NEG
19485: PUSH
19486: LD_INT 1
19488: NEG
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 3
19496: NEG
19497: PUSH
19498: LD_INT 2
19500: NEG
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19531: LD_ADDR_VAR 0 28
19535: PUSH
19536: LD_INT 0
19538: PUSH
19539: LD_INT 0
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 0
19548: PUSH
19549: LD_INT 1
19551: NEG
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 1
19559: PUSH
19560: LD_INT 0
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 1
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 0
19579: PUSH
19580: LD_INT 1
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 1
19589: NEG
19590: PUSH
19591: LD_INT 0
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 1
19600: NEG
19601: PUSH
19602: LD_INT 1
19604: NEG
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 1
19612: NEG
19613: PUSH
19614: LD_INT 2
19616: NEG
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 0
19624: PUSH
19625: LD_INT 2
19627: NEG
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 1
19635: PUSH
19636: LD_INT 1
19638: NEG
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 2
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 2
19656: PUSH
19657: LD_INT 1
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 2
19666: PUSH
19667: LD_INT 2
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 1
19676: PUSH
19677: LD_INT 2
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 0
19686: PUSH
19687: LD_INT 2
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 1
19696: NEG
19697: PUSH
19698: LD_INT 1
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 2
19707: NEG
19708: PUSH
19709: LD_INT 0
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 2
19718: NEG
19719: PUSH
19720: LD_INT 1
19722: NEG
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 2
19730: NEG
19731: PUSH
19732: LD_INT 2
19734: NEG
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 2
19742: NEG
19743: PUSH
19744: LD_INT 3
19746: NEG
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 1
19754: NEG
19755: PUSH
19756: LD_INT 3
19758: NEG
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 3
19766: NEG
19767: PUSH
19768: LD_INT 1
19770: NEG
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 3
19778: NEG
19779: PUSH
19780: LD_INT 2
19782: NEG
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19813: LD_ADDR_VAR 0 29
19817: PUSH
19818: LD_INT 0
19820: PUSH
19821: LD_INT 0
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 0
19830: PUSH
19831: LD_INT 1
19833: NEG
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: LD_INT 0
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 1
19851: PUSH
19852: LD_INT 1
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 0
19861: PUSH
19862: LD_INT 1
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 1
19871: NEG
19872: PUSH
19873: LD_INT 0
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 1
19882: NEG
19883: PUSH
19884: LD_INT 1
19886: NEG
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 1
19894: NEG
19895: PUSH
19896: LD_INT 2
19898: NEG
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 0
19906: PUSH
19907: LD_INT 2
19909: NEG
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 1
19917: PUSH
19918: LD_INT 1
19920: NEG
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 2
19928: PUSH
19929: LD_INT 0
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 2
19938: PUSH
19939: LD_INT 1
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 1
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 0
19958: PUSH
19959: LD_INT 2
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 1
19968: NEG
19969: PUSH
19970: LD_INT 1
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 2
19979: NEG
19980: PUSH
19981: LD_INT 1
19983: NEG
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 2
19991: NEG
19992: PUSH
19993: LD_INT 2
19995: NEG
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 2
20003: NEG
20004: PUSH
20005: LD_INT 3
20007: NEG
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 2
20015: PUSH
20016: LD_INT 1
20018: NEG
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 3
20026: PUSH
20027: LD_INT 1
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 1
20036: PUSH
20037: LD_INT 3
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 1
20046: NEG
20047: PUSH
20048: LD_INT 2
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 3
20057: NEG
20058: PUSH
20059: LD_INT 2
20061: NEG
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20092: LD_ADDR_VAR 0 30
20096: PUSH
20097: LD_INT 0
20099: PUSH
20100: LD_INT 0
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: LD_INT 1
20112: NEG
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 1
20120: PUSH
20121: LD_INT 0
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 1
20130: PUSH
20131: LD_INT 1
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 0
20140: PUSH
20141: LD_INT 1
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 1
20150: NEG
20151: PUSH
20152: LD_INT 0
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 1
20161: NEG
20162: PUSH
20163: LD_INT 1
20165: NEG
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 1
20173: NEG
20174: PUSH
20175: LD_INT 2
20177: NEG
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 0
20185: PUSH
20186: LD_INT 2
20188: NEG
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 1
20196: PUSH
20197: LD_INT 1
20199: NEG
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 2
20207: PUSH
20208: LD_INT 0
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 2
20217: PUSH
20218: LD_INT 1
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 2
20227: PUSH
20228: LD_INT 2
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 1
20237: PUSH
20238: LD_INT 2
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 1
20247: NEG
20248: PUSH
20249: LD_INT 1
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 2
20258: NEG
20259: PUSH
20260: LD_INT 0
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 2
20269: NEG
20270: PUSH
20271: LD_INT 1
20273: NEG
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 1
20281: NEG
20282: PUSH
20283: LD_INT 3
20285: NEG
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 1
20293: PUSH
20294: LD_INT 2
20296: NEG
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 3
20304: PUSH
20305: LD_INT 2
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 2
20314: PUSH
20315: LD_INT 3
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 2
20324: NEG
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 3
20335: NEG
20336: PUSH
20337: LD_INT 1
20339: NEG
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20370: LD_ADDR_VAR 0 31
20374: PUSH
20375: LD_INT 0
20377: PUSH
20378: LD_INT 0
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 0
20387: PUSH
20388: LD_INT 1
20390: NEG
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 1
20398: PUSH
20399: LD_INT 0
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 1
20408: PUSH
20409: LD_INT 1
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 0
20418: PUSH
20419: LD_INT 1
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 1
20428: NEG
20429: PUSH
20430: LD_INT 0
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 1
20439: NEG
20440: PUSH
20441: LD_INT 1
20443: NEG
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 1
20451: NEG
20452: PUSH
20453: LD_INT 2
20455: NEG
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 1
20463: PUSH
20464: LD_INT 1
20466: NEG
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 2
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 2
20484: PUSH
20485: LD_INT 1
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 2
20494: PUSH
20495: LD_INT 2
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 1
20504: PUSH
20505: LD_INT 2
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PUSH
20512: LD_INT 0
20514: PUSH
20515: LD_INT 2
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 1
20524: NEG
20525: PUSH
20526: LD_INT 1
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 2
20535: NEG
20536: PUSH
20537: LD_INT 1
20539: NEG
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 2
20547: NEG
20548: PUSH
20549: LD_INT 2
20551: NEG
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 2
20559: NEG
20560: PUSH
20561: LD_INT 3
20563: NEG
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 2
20571: PUSH
20572: LD_INT 1
20574: NEG
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 3
20582: PUSH
20583: LD_INT 1
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: LD_INT 3
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 1
20602: NEG
20603: PUSH
20604: LD_INT 2
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 3
20613: NEG
20614: PUSH
20615: LD_INT 2
20617: NEG
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20648: LD_ADDR_VAR 0 32
20652: PUSH
20653: LD_INT 0
20655: PUSH
20656: LD_INT 0
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 0
20665: PUSH
20666: LD_INT 1
20668: NEG
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 1
20676: PUSH
20677: LD_INT 0
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 1
20686: PUSH
20687: LD_INT 1
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 0
20696: PUSH
20697: LD_INT 1
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 1
20706: NEG
20707: PUSH
20708: LD_INT 0
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 1
20717: NEG
20718: PUSH
20719: LD_INT 1
20721: NEG
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 1
20729: NEG
20730: PUSH
20731: LD_INT 2
20733: NEG
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 0
20741: PUSH
20742: LD_INT 2
20744: NEG
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 1
20752: PUSH
20753: LD_INT 1
20755: NEG
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 2
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 2
20773: PUSH
20774: LD_INT 2
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 1
20783: PUSH
20784: LD_INT 2
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 0
20793: PUSH
20794: LD_INT 2
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 1
20803: NEG
20804: PUSH
20805: LD_INT 1
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 2
20814: NEG
20815: PUSH
20816: LD_INT 0
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 2
20825: NEG
20826: PUSH
20827: LD_INT 1
20829: NEG
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 1
20837: NEG
20838: PUSH
20839: LD_INT 3
20841: NEG
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 1
20849: PUSH
20850: LD_INT 2
20852: NEG
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 3
20860: PUSH
20861: LD_INT 2
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 2
20870: PUSH
20871: LD_INT 3
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 2
20880: NEG
20881: PUSH
20882: LD_INT 1
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 3
20891: NEG
20892: PUSH
20893: LD_INT 1
20895: NEG
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20926: LD_ADDR_VAR 0 33
20930: PUSH
20931: LD_INT 0
20933: PUSH
20934: LD_INT 0
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 0
20943: PUSH
20944: LD_INT 1
20946: NEG
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 1
20954: PUSH
20955: LD_INT 0
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 1
20964: PUSH
20965: LD_INT 1
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 0
20974: PUSH
20975: LD_INT 1
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 1
20984: NEG
20985: PUSH
20986: LD_INT 0
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 1
20995: NEG
20996: PUSH
20997: LD_INT 1
20999: NEG
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 1
21007: NEG
21008: PUSH
21009: LD_INT 2
21011: NEG
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: PUSH
21020: LD_INT 1
21022: NEG
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 2
21030: PUSH
21031: LD_INT 0
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 2
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 1
21050: PUSH
21051: LD_INT 2
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 0
21060: PUSH
21061: LD_INT 2
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 1
21070: NEG
21071: PUSH
21072: LD_INT 1
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 2
21081: NEG
21082: PUSH
21083: LD_INT 0
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 2
21092: NEG
21093: PUSH
21094: LD_INT 1
21096: NEG
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 2
21104: NEG
21105: PUSH
21106: LD_INT 2
21108: NEG
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 2
21116: NEG
21117: PUSH
21118: LD_INT 3
21120: NEG
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 2
21128: PUSH
21129: LD_INT 1
21131: NEG
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 3
21139: PUSH
21140: LD_INT 1
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 1
21149: PUSH
21150: LD_INT 3
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 1
21159: NEG
21160: PUSH
21161: LD_INT 2
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 3
21170: NEG
21171: PUSH
21172: LD_INT 2
21174: NEG
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21205: LD_ADDR_VAR 0 34
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 0
21222: PUSH
21223: LD_INT 1
21225: NEG
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 1
21233: PUSH
21234: LD_INT 0
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 1
21243: PUSH
21244: LD_INT 1
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 0
21253: PUSH
21254: LD_INT 1
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 1
21263: NEG
21264: PUSH
21265: LD_INT 0
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 1
21274: NEG
21275: PUSH
21276: LD_INT 1
21278: NEG
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 1
21286: NEG
21287: PUSH
21288: LD_INT 2
21290: NEG
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 0
21298: PUSH
21299: LD_INT 2
21301: NEG
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: LD_INT 1
21312: NEG
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 2
21320: PUSH
21321: LD_INT 1
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 2
21330: PUSH
21331: LD_INT 2
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 1
21340: PUSH
21341: LD_INT 2
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 1
21350: NEG
21351: PUSH
21352: LD_INT 1
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 2
21361: NEG
21362: PUSH
21363: LD_INT 0
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 2
21372: NEG
21373: PUSH
21374: LD_INT 1
21376: NEG
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 2
21384: NEG
21385: PUSH
21386: LD_INT 2
21388: NEG
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 1
21396: NEG
21397: PUSH
21398: LD_INT 3
21400: NEG
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 1
21408: PUSH
21409: LD_INT 2
21411: NEG
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 3
21419: PUSH
21420: LD_INT 2
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 2
21429: PUSH
21430: LD_INT 3
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 2
21439: NEG
21440: PUSH
21441: LD_INT 1
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 3
21450: NEG
21451: PUSH
21452: LD_INT 1
21454: NEG
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21485: LD_ADDR_VAR 0 35
21489: PUSH
21490: LD_INT 0
21492: PUSH
21493: LD_INT 0
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 0
21502: PUSH
21503: LD_INT 1
21505: NEG
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 1
21513: PUSH
21514: LD_INT 0
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 1
21523: PUSH
21524: LD_INT 1
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 0
21533: PUSH
21534: LD_INT 1
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 1
21543: NEG
21544: PUSH
21545: LD_INT 0
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: LD_INT 1
21554: NEG
21555: PUSH
21556: LD_INT 1
21558: NEG
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 2
21566: PUSH
21567: LD_INT 1
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 2
21576: NEG
21577: PUSH
21578: LD_INT 1
21580: NEG
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21597: LD_ADDR_VAR 0 36
21601: PUSH
21602: LD_INT 0
21604: PUSH
21605: LD_INT 0
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 0
21614: PUSH
21615: LD_INT 1
21617: NEG
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 1
21625: PUSH
21626: LD_INT 0
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 1
21635: PUSH
21636: LD_INT 1
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 0
21645: PUSH
21646: LD_INT 1
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 1
21655: NEG
21656: PUSH
21657: LD_INT 0
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 1
21666: NEG
21667: PUSH
21668: LD_INT 1
21670: NEG
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 1
21678: NEG
21679: PUSH
21680: LD_INT 2
21682: NEG
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 1
21690: PUSH
21691: LD_INT 2
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21709: LD_ADDR_VAR 0 37
21713: PUSH
21714: LD_INT 0
21716: PUSH
21717: LD_INT 0
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 0
21726: PUSH
21727: LD_INT 1
21729: NEG
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: LD_INT 1
21737: PUSH
21738: LD_INT 0
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 1
21747: PUSH
21748: LD_INT 1
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 0
21757: PUSH
21758: LD_INT 1
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 1
21767: NEG
21768: PUSH
21769: LD_INT 0
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 1
21778: NEG
21779: PUSH
21780: LD_INT 1
21782: NEG
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: PUSH
21788: LD_INT 1
21790: PUSH
21791: LD_INT 1
21793: NEG
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 1
21801: NEG
21802: PUSH
21803: LD_INT 1
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21821: LD_ADDR_VAR 0 38
21825: PUSH
21826: LD_INT 0
21828: PUSH
21829: LD_INT 0
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: LD_INT 1
21841: NEG
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 1
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 1
21859: PUSH
21860: LD_INT 1
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 0
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 1
21879: NEG
21880: PUSH
21881: LD_INT 0
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 1
21890: NEG
21891: PUSH
21892: LD_INT 1
21894: NEG
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 2
21902: PUSH
21903: LD_INT 1
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 2
21912: NEG
21913: PUSH
21914: LD_INT 1
21916: NEG
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21933: LD_ADDR_VAR 0 39
21937: PUSH
21938: LD_INT 0
21940: PUSH
21941: LD_INT 0
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: LD_INT 1
21953: NEG
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 1
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 1
21971: PUSH
21972: LD_INT 1
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 0
21981: PUSH
21982: LD_INT 1
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 1
21991: NEG
21992: PUSH
21993: LD_INT 0
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 1
22002: NEG
22003: PUSH
22004: LD_INT 1
22006: NEG
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 1
22014: NEG
22015: PUSH
22016: LD_INT 2
22018: NEG
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 1
22026: PUSH
22027: LD_INT 2
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22045: LD_ADDR_VAR 0 40
22049: PUSH
22050: LD_INT 0
22052: PUSH
22053: LD_INT 0
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 0
22062: PUSH
22063: LD_INT 1
22065: NEG
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 1
22073: PUSH
22074: LD_INT 0
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 1
22083: PUSH
22084: LD_INT 1
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 0
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 1
22103: NEG
22104: PUSH
22105: LD_INT 0
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: NEG
22115: PUSH
22116: LD_INT 1
22118: NEG
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 1
22126: PUSH
22127: LD_INT 1
22129: NEG
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 1
22137: NEG
22138: PUSH
22139: LD_INT 1
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22157: LD_ADDR_VAR 0 41
22161: PUSH
22162: LD_INT 0
22164: PUSH
22165: LD_INT 0
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 0
22174: PUSH
22175: LD_INT 1
22177: NEG
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 1
22185: PUSH
22186: LD_INT 0
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 1
22195: PUSH
22196: LD_INT 1
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 0
22205: PUSH
22206: LD_INT 1
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 1
22215: NEG
22216: PUSH
22217: LD_INT 0
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 1
22226: NEG
22227: PUSH
22228: LD_INT 1
22230: NEG
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 1
22238: NEG
22239: PUSH
22240: LD_INT 2
22242: NEG
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 1
22250: PUSH
22251: LD_INT 1
22253: NEG
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 2
22261: PUSH
22262: LD_INT 0
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 2
22271: PUSH
22272: LD_INT 1
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 2
22281: PUSH
22282: LD_INT 2
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 1
22291: PUSH
22292: LD_INT 2
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 1
22301: NEG
22302: PUSH
22303: LD_INT 1
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 2
22312: NEG
22313: PUSH
22314: LD_INT 0
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 2
22323: NEG
22324: PUSH
22325: LD_INT 1
22327: NEG
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 2
22335: NEG
22336: PUSH
22337: LD_INT 2
22339: NEG
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 2
22347: NEG
22348: PUSH
22349: LD_INT 3
22351: NEG
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 2
22359: PUSH
22360: LD_INT 1
22362: NEG
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 3
22370: PUSH
22371: LD_INT 0
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 3
22380: PUSH
22381: LD_INT 1
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 3
22390: PUSH
22391: LD_INT 2
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 3
22400: PUSH
22401: LD_INT 3
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 2
22410: PUSH
22411: LD_INT 3
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 2
22420: NEG
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 3
22431: NEG
22432: PUSH
22433: LD_INT 0
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 3
22442: NEG
22443: PUSH
22444: LD_INT 1
22446: NEG
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 3
22454: NEG
22455: PUSH
22456: LD_INT 2
22458: NEG
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 3
22466: NEG
22467: PUSH
22468: LD_INT 3
22470: NEG
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22507: LD_ADDR_VAR 0 42
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: LD_INT 0
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: LD_INT 1
22527: NEG
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 0
22555: PUSH
22556: LD_INT 1
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 1
22565: NEG
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 1
22576: NEG
22577: PUSH
22578: LD_INT 1
22580: NEG
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 1
22588: NEG
22589: PUSH
22590: LD_INT 2
22592: NEG
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 0
22600: PUSH
22601: LD_INT 2
22603: NEG
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 1
22611: PUSH
22612: LD_INT 1
22614: NEG
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 2
22622: PUSH
22623: LD_INT 1
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 2
22632: PUSH
22633: LD_INT 2
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 0
22652: PUSH
22653: LD_INT 2
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 1
22662: NEG
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 2
22673: NEG
22674: PUSH
22675: LD_INT 1
22677: NEG
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 2
22685: NEG
22686: PUSH
22687: LD_INT 2
22689: NEG
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 2
22697: NEG
22698: PUSH
22699: LD_INT 3
22701: NEG
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 1
22709: NEG
22710: PUSH
22711: LD_INT 3
22713: NEG
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 0
22721: PUSH
22722: LD_INT 3
22724: NEG
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 1
22732: PUSH
22733: LD_INT 2
22735: NEG
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 3
22743: PUSH
22744: LD_INT 2
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 3
22753: PUSH
22754: LD_INT 3
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 2
22763: PUSH
22764: LD_INT 3
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 1
22773: PUSH
22774: LD_INT 3
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 0
22783: PUSH
22784: LD_INT 3
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 1
22793: NEG
22794: PUSH
22795: LD_INT 2
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 3
22804: NEG
22805: PUSH
22806: LD_INT 2
22808: NEG
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 3
22816: NEG
22817: PUSH
22818: LD_INT 3
22820: NEG
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22857: LD_ADDR_VAR 0 43
22861: PUSH
22862: LD_INT 0
22864: PUSH
22865: LD_INT 0
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 0
22874: PUSH
22875: LD_INT 1
22877: NEG
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 1
22885: PUSH
22886: LD_INT 0
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 1
22895: PUSH
22896: LD_INT 1
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 0
22905: PUSH
22906: LD_INT 1
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 1
22915: NEG
22916: PUSH
22917: LD_INT 0
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 1
22926: NEG
22927: PUSH
22928: LD_INT 1
22930: NEG
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 1
22938: NEG
22939: PUSH
22940: LD_INT 2
22942: NEG
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 0
22950: PUSH
22951: LD_INT 2
22953: NEG
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 1
22961: PUSH
22962: LD_INT 1
22964: NEG
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 2
22972: PUSH
22973: LD_INT 0
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 2
22982: PUSH
22983: LD_INT 1
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 1
22992: PUSH
22993: LD_INT 2
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 0
23002: PUSH
23003: LD_INT 2
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 1
23012: NEG
23013: PUSH
23014: LD_INT 1
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 2
23023: NEG
23024: PUSH
23025: LD_INT 0
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 2
23034: NEG
23035: PUSH
23036: LD_INT 1
23038: NEG
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 1
23046: NEG
23047: PUSH
23048: LD_INT 3
23050: NEG
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: LD_INT 3
23061: NEG
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 1
23069: PUSH
23070: LD_INT 2
23072: NEG
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 2
23080: PUSH
23081: LD_INT 1
23083: NEG
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 3
23091: PUSH
23092: LD_INT 0
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 3
23101: PUSH
23102: LD_INT 1
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 1
23111: PUSH
23112: LD_INT 3
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 0
23121: PUSH
23122: LD_INT 3
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 1
23131: NEG
23132: PUSH
23133: LD_INT 2
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 2
23142: NEG
23143: PUSH
23144: LD_INT 1
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 3
23153: NEG
23154: PUSH
23155: LD_INT 0
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 3
23164: NEG
23165: PUSH
23166: LD_INT 1
23168: NEG
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23205: LD_ADDR_VAR 0 44
23209: PUSH
23210: LD_INT 0
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 0
23222: PUSH
23223: LD_INT 1
23225: NEG
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 1
23233: PUSH
23234: LD_INT 0
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 1
23243: PUSH
23244: LD_INT 1
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 0
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 1
23263: NEG
23264: PUSH
23265: LD_INT 0
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 1
23274: NEG
23275: PUSH
23276: LD_INT 1
23278: NEG
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: LD_INT 2
23290: NEG
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 1
23298: PUSH
23299: LD_INT 1
23301: NEG
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 2
23309: PUSH
23310: LD_INT 0
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 2
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 2
23329: PUSH
23330: LD_INT 2
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 1
23339: PUSH
23340: LD_INT 2
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 1
23349: NEG
23350: PUSH
23351: LD_INT 1
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 2
23360: NEG
23361: PUSH
23362: LD_INT 0
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 2
23371: NEG
23372: PUSH
23373: LD_INT 1
23375: NEG
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 2
23383: NEG
23384: PUSH
23385: LD_INT 2
23387: NEG
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 2
23395: NEG
23396: PUSH
23397: LD_INT 3
23399: NEG
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 2
23407: PUSH
23408: LD_INT 1
23410: NEG
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 3
23418: PUSH
23419: LD_INT 0
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 3
23428: PUSH
23429: LD_INT 1
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 3
23438: PUSH
23439: LD_INT 2
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 3
23448: PUSH
23449: LD_INT 3
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 2
23458: PUSH
23459: LD_INT 3
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 2
23468: NEG
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 3
23479: NEG
23480: PUSH
23481: LD_INT 0
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 3
23490: NEG
23491: PUSH
23492: LD_INT 1
23494: NEG
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 3
23502: NEG
23503: PUSH
23504: LD_INT 2
23506: NEG
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 3
23514: NEG
23515: PUSH
23516: LD_INT 3
23518: NEG
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23555: LD_ADDR_VAR 0 45
23559: PUSH
23560: LD_INT 0
23562: PUSH
23563: LD_INT 0
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 0
23572: PUSH
23573: LD_INT 1
23575: NEG
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 1
23593: PUSH
23594: LD_INT 1
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 0
23603: PUSH
23604: LD_INT 1
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 1
23613: NEG
23614: PUSH
23615: LD_INT 0
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 1
23624: NEG
23625: PUSH
23626: LD_INT 1
23628: NEG
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 1
23636: NEG
23637: PUSH
23638: LD_INT 2
23640: NEG
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 0
23648: PUSH
23649: LD_INT 2
23651: NEG
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: LD_INT 1
23662: NEG
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 2
23670: PUSH
23671: LD_INT 1
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 2
23680: PUSH
23681: LD_INT 2
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: PUSH
23691: LD_INT 2
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 0
23700: PUSH
23701: LD_INT 2
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 1
23710: NEG
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 2
23721: NEG
23722: PUSH
23723: LD_INT 1
23725: NEG
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 2
23733: NEG
23734: PUSH
23735: LD_INT 2
23737: NEG
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 2
23745: NEG
23746: PUSH
23747: LD_INT 3
23749: NEG
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 1
23757: NEG
23758: PUSH
23759: LD_INT 3
23761: NEG
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 0
23769: PUSH
23770: LD_INT 3
23772: NEG
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 1
23780: PUSH
23781: LD_INT 2
23783: NEG
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 3
23791: PUSH
23792: LD_INT 2
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 3
23801: PUSH
23802: LD_INT 3
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 2
23811: PUSH
23812: LD_INT 3
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: LD_INT 3
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 0
23831: PUSH
23832: LD_INT 3
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 1
23841: NEG
23842: PUSH
23843: LD_INT 2
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 3
23852: NEG
23853: PUSH
23854: LD_INT 2
23856: NEG
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 3
23864: NEG
23865: PUSH
23866: LD_INT 3
23868: NEG
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23905: LD_ADDR_VAR 0 46
23909: PUSH
23910: LD_INT 0
23912: PUSH
23913: LD_INT 0
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: LD_INT 1
23925: NEG
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 1
23933: PUSH
23934: LD_INT 0
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 1
23943: PUSH
23944: LD_INT 1
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 0
23953: PUSH
23954: LD_INT 1
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 1
23963: NEG
23964: PUSH
23965: LD_INT 0
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 1
23974: NEG
23975: PUSH
23976: LD_INT 1
23978: NEG
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 1
23986: NEG
23987: PUSH
23988: LD_INT 2
23990: NEG
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 0
23998: PUSH
23999: LD_INT 2
24001: NEG
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 1
24009: PUSH
24010: LD_INT 1
24012: NEG
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: LD_INT 0
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 2
24030: PUSH
24031: LD_INT 1
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: LD_INT 2
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 0
24050: PUSH
24051: LD_INT 2
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 1
24060: NEG
24061: PUSH
24062: LD_INT 1
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 2
24071: NEG
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 2
24082: NEG
24083: PUSH
24084: LD_INT 1
24086: NEG
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 1
24094: NEG
24095: PUSH
24096: LD_INT 3
24098: NEG
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 0
24106: PUSH
24107: LD_INT 3
24109: NEG
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 1
24117: PUSH
24118: LD_INT 2
24120: NEG
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 2
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 3
24139: PUSH
24140: LD_INT 0
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 3
24149: PUSH
24150: LD_INT 1
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: LD_INT 3
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 0
24169: PUSH
24170: LD_INT 3
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 1
24179: NEG
24180: PUSH
24181: LD_INT 2
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 2
24190: NEG
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 3
24201: NEG
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 3
24212: NEG
24213: PUSH
24214: LD_INT 1
24216: NEG
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24253: LD_ADDR_VAR 0 47
24257: PUSH
24258: LD_INT 0
24260: PUSH
24261: LD_INT 0
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: LD_INT 1
24273: NEG
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 1
24281: PUSH
24282: LD_INT 0
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 1
24291: PUSH
24292: LD_INT 1
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 0
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 1
24311: NEG
24312: PUSH
24313: LD_INT 0
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 1
24322: NEG
24323: PUSH
24324: LD_INT 1
24326: NEG
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 1
24334: NEG
24335: PUSH
24336: LD_INT 2
24338: NEG
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 0
24346: PUSH
24347: LD_INT 2
24349: NEG
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 1
24357: PUSH
24358: LD_INT 1
24360: NEG
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 2
24368: NEG
24369: PUSH
24370: LD_INT 1
24372: NEG
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 2
24380: NEG
24381: PUSH
24382: LD_INT 2
24384: NEG
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24404: LD_ADDR_VAR 0 48
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: LD_INT 0
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: LD_INT 1
24424: NEG
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 1
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 1
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 0
24452: PUSH
24453: LD_INT 1
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 1
24462: NEG
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 1
24473: NEG
24474: PUSH
24475: LD_INT 1
24477: NEG
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 1
24485: NEG
24486: PUSH
24487: LD_INT 2
24489: NEG
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 0
24497: PUSH
24498: LD_INT 2
24500: NEG
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 1
24508: PUSH
24509: LD_INT 1
24511: NEG
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: LD_INT 0
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 2
24529: PUSH
24530: LD_INT 1
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24551: LD_ADDR_VAR 0 49
24555: PUSH
24556: LD_INT 0
24558: PUSH
24559: LD_INT 0
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 0
24568: PUSH
24569: LD_INT 1
24571: NEG
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 1
24579: PUSH
24580: LD_INT 0
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 1
24589: PUSH
24590: LD_INT 1
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 0
24599: PUSH
24600: LD_INT 1
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 1
24609: NEG
24610: PUSH
24611: LD_INT 0
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 1
24620: NEG
24621: PUSH
24622: LD_INT 1
24624: NEG
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 1
24632: PUSH
24633: LD_INT 1
24635: NEG
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 2
24643: PUSH
24644: LD_INT 0
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 2
24653: PUSH
24654: LD_INT 1
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 2
24663: PUSH
24664: LD_INT 2
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 1
24673: PUSH
24674: LD_INT 2
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24695: LD_ADDR_VAR 0 50
24699: PUSH
24700: LD_INT 0
24702: PUSH
24703: LD_INT 0
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 0
24712: PUSH
24713: LD_INT 1
24715: NEG
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 1
24723: PUSH
24724: LD_INT 0
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 1
24733: PUSH
24734: LD_INT 1
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 0
24743: PUSH
24744: LD_INT 1
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 1
24753: NEG
24754: PUSH
24755: LD_INT 0
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 1
24764: NEG
24765: PUSH
24766: LD_INT 1
24768: NEG
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 2
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 2
24786: PUSH
24787: LD_INT 2
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 1
24796: PUSH
24797: LD_INT 2
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: LD_INT 2
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 1
24816: NEG
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24839: LD_ADDR_VAR 0 51
24843: PUSH
24844: LD_INT 0
24846: PUSH
24847: LD_INT 0
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 0
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 1
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 1
24877: PUSH
24878: LD_INT 1
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 0
24887: PUSH
24888: LD_INT 1
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 1
24897: NEG
24898: PUSH
24899: LD_INT 0
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: LD_INT 1
24912: NEG
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 1
24920: PUSH
24921: LD_INT 2
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 0
24930: PUSH
24931: LD_INT 2
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 1
24940: NEG
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 2
24951: NEG
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 2
24962: NEG
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24986: LD_ADDR_VAR 0 52
24990: PUSH
24991: LD_INT 0
24993: PUSH
24994: LD_INT 0
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: LD_INT 1
25006: NEG
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 1
25024: PUSH
25025: LD_INT 1
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 0
25034: PUSH
25035: LD_INT 1
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 1
25044: NEG
25045: PUSH
25046: LD_INT 0
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 1
25055: NEG
25056: PUSH
25057: LD_INT 1
25059: NEG
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 1
25067: NEG
25068: PUSH
25069: LD_INT 2
25071: NEG
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 1
25079: NEG
25080: PUSH
25081: LD_INT 1
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 2
25090: NEG
25091: PUSH
25092: LD_INT 0
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 2
25101: NEG
25102: PUSH
25103: LD_INT 1
25105: NEG
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 2
25113: NEG
25114: PUSH
25115: LD_INT 2
25117: NEG
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25137: LD_ADDR_VAR 0 53
25141: PUSH
25142: LD_INT 0
25144: PUSH
25145: LD_INT 0
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 0
25154: PUSH
25155: LD_INT 1
25157: NEG
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 1
25165: PUSH
25166: LD_INT 0
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 1
25175: PUSH
25176: LD_INT 1
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 1
25195: NEG
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 1
25206: NEG
25207: PUSH
25208: LD_INT 1
25210: NEG
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 1
25218: NEG
25219: PUSH
25220: LD_INT 2
25222: NEG
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: LD_INT 2
25233: NEG
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: LD_INT 1
25244: NEG
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 2
25252: PUSH
25253: LD_INT 0
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 2
25262: PUSH
25263: LD_INT 1
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 2
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: PUSH
25283: LD_INT 2
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 0
25292: PUSH
25293: LD_INT 2
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 1
25302: NEG
25303: PUSH
25304: LD_INT 1
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 2
25313: NEG
25314: PUSH
25315: LD_INT 0
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 2
25324: NEG
25325: PUSH
25326: LD_INT 1
25328: NEG
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 2
25336: NEG
25337: PUSH
25338: LD_INT 2
25340: NEG
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25367: LD_ADDR_VAR 0 54
25371: PUSH
25372: LD_INT 0
25374: PUSH
25375: LD_INT 0
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 0
25384: PUSH
25385: LD_INT 1
25387: NEG
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 1
25395: PUSH
25396: LD_INT 0
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: LD_INT 1
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 0
25415: PUSH
25416: LD_INT 1
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 1
25425: NEG
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 1
25436: NEG
25437: PUSH
25438: LD_INT 1
25440: NEG
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 1
25448: NEG
25449: PUSH
25450: LD_INT 2
25452: NEG
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: LD_INT 2
25463: NEG
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: LD_INT 1
25474: NEG
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 2
25482: PUSH
25483: LD_INT 0
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 2
25492: PUSH
25493: LD_INT 1
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 2
25502: PUSH
25503: LD_INT 2
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 1
25512: PUSH
25513: LD_INT 2
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 0
25522: PUSH
25523: LD_INT 2
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 1
25532: NEG
25533: PUSH
25534: LD_INT 1
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 2
25543: NEG
25544: PUSH
25545: LD_INT 0
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 2
25554: NEG
25555: PUSH
25556: LD_INT 1
25558: NEG
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 2
25566: NEG
25567: PUSH
25568: LD_INT 2
25570: NEG
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25597: LD_ADDR_VAR 0 55
25601: PUSH
25602: LD_INT 0
25604: PUSH
25605: LD_INT 0
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 0
25614: PUSH
25615: LD_INT 1
25617: NEG
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 1
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 1
25635: PUSH
25636: LD_INT 1
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 0
25645: PUSH
25646: LD_INT 1
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 1
25655: NEG
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 1
25666: NEG
25667: PUSH
25668: LD_INT 1
25670: NEG
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 1
25678: NEG
25679: PUSH
25680: LD_INT 2
25682: NEG
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: LD_INT 2
25693: NEG
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: LD_INT 1
25704: NEG
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 2
25712: PUSH
25713: LD_INT 0
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 2
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 2
25732: PUSH
25733: LD_INT 2
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 1
25742: PUSH
25743: LD_INT 2
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 0
25752: PUSH
25753: LD_INT 2
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: NEG
25763: PUSH
25764: LD_INT 1
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 2
25773: NEG
25774: PUSH
25775: LD_INT 0
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 2
25784: NEG
25785: PUSH
25786: LD_INT 1
25788: NEG
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 2
25796: NEG
25797: PUSH
25798: LD_INT 2
25800: NEG
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25827: LD_ADDR_VAR 0 56
25831: PUSH
25832: LD_INT 0
25834: PUSH
25835: LD_INT 0
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 0
25844: PUSH
25845: LD_INT 1
25847: NEG
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 1
25855: PUSH
25856: LD_INT 0
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 1
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 0
25875: PUSH
25876: LD_INT 1
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 1
25885: NEG
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: NEG
25897: PUSH
25898: LD_INT 1
25900: NEG
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 1
25908: NEG
25909: PUSH
25910: LD_INT 2
25912: NEG
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 0
25920: PUSH
25921: LD_INT 2
25923: NEG
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: LD_INT 1
25934: NEG
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 2
25942: PUSH
25943: LD_INT 0
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 2
25952: PUSH
25953: LD_INT 1
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 2
25962: PUSH
25963: LD_INT 2
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 1
25972: PUSH
25973: LD_INT 2
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 0
25982: PUSH
25983: LD_INT 2
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 1
25992: NEG
25993: PUSH
25994: LD_INT 1
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 2
26003: NEG
26004: PUSH
26005: LD_INT 0
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 2
26014: NEG
26015: PUSH
26016: LD_INT 1
26018: NEG
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 2
26026: NEG
26027: PUSH
26028: LD_INT 2
26030: NEG
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26057: LD_ADDR_VAR 0 57
26061: PUSH
26062: LD_INT 0
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: LD_INT 1
26077: NEG
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 1
26085: PUSH
26086: LD_INT 0
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 1
26095: PUSH
26096: LD_INT 1
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: LD_INT 1
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 1
26115: NEG
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 1
26126: NEG
26127: PUSH
26128: LD_INT 1
26130: NEG
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 1
26138: NEG
26139: PUSH
26140: LD_INT 2
26142: NEG
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 0
26150: PUSH
26151: LD_INT 2
26153: NEG
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: LD_INT 1
26164: NEG
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 2
26172: PUSH
26173: LD_INT 0
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 2
26182: PUSH
26183: LD_INT 1
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 2
26192: PUSH
26193: LD_INT 2
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 1
26202: PUSH
26203: LD_INT 2
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 0
26212: PUSH
26213: LD_INT 2
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 1
26222: NEG
26223: PUSH
26224: LD_INT 1
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 2
26233: NEG
26234: PUSH
26235: LD_INT 0
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 2
26244: NEG
26245: PUSH
26246: LD_INT 1
26248: NEG
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 2
26256: NEG
26257: PUSH
26258: LD_INT 2
26260: NEG
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26287: LD_ADDR_VAR 0 58
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: LD_INT 0
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: LD_INT 1
26307: NEG
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 1
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: PUSH
26326: LD_INT 1
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 0
26335: PUSH
26336: LD_INT 1
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 1
26345: NEG
26346: PUSH
26347: LD_INT 0
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 1
26356: NEG
26357: PUSH
26358: LD_INT 1
26360: NEG
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: LD_INT 2
26372: NEG
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: LD_INT 2
26383: NEG
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: LD_INT 1
26394: NEG
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 2
26402: PUSH
26403: LD_INT 0
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 2
26412: PUSH
26413: LD_INT 1
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 2
26422: PUSH
26423: LD_INT 2
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: LD_INT 2
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 0
26442: PUSH
26443: LD_INT 2
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 1
26452: NEG
26453: PUSH
26454: LD_INT 1
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 2
26463: NEG
26464: PUSH
26465: LD_INT 0
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 2
26474: NEG
26475: PUSH
26476: LD_INT 1
26478: NEG
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 2
26486: NEG
26487: PUSH
26488: LD_INT 2
26490: NEG
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26517: LD_ADDR_VAR 0 59
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: LD_INT 0
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: LD_INT 1
26537: NEG
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 1
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 0
26565: PUSH
26566: LD_INT 1
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 1
26575: NEG
26576: PUSH
26577: LD_INT 0
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 1
26586: NEG
26587: PUSH
26588: LD_INT 1
26590: NEG
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26605: LD_ADDR_VAR 0 60
26609: PUSH
26610: LD_INT 0
26612: PUSH
26613: LD_INT 0
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: LD_INT 1
26625: NEG
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 1
26633: PUSH
26634: LD_INT 0
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: PUSH
26644: LD_INT 1
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 1
26663: NEG
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 1
26674: NEG
26675: PUSH
26676: LD_INT 1
26678: NEG
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26693: LD_ADDR_VAR 0 61
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: LD_INT 0
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: LD_INT 1
26713: NEG
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 1
26751: NEG
26752: PUSH
26753: LD_INT 0
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: NEG
26763: PUSH
26764: LD_INT 1
26766: NEG
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26781: LD_ADDR_VAR 0 62
26785: PUSH
26786: LD_INT 0
26788: PUSH
26789: LD_INT 0
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: LD_INT 1
26801: NEG
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 1
26809: PUSH
26810: LD_INT 0
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 1
26819: PUSH
26820: LD_INT 1
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 0
26829: PUSH
26830: LD_INT 1
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 1
26839: NEG
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 1
26850: NEG
26851: PUSH
26852: LD_INT 1
26854: NEG
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26869: LD_ADDR_VAR 0 63
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: LD_INT 0
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: LD_INT 1
26889: NEG
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 1
26897: PUSH
26898: LD_INT 0
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 1
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 0
26917: PUSH
26918: LD_INT 1
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 1
26927: NEG
26928: PUSH
26929: LD_INT 0
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 1
26938: NEG
26939: PUSH
26940: LD_INT 1
26942: NEG
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26957: LD_ADDR_VAR 0 64
26961: PUSH
26962: LD_INT 0
26964: PUSH
26965: LD_INT 0
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: LD_INT 1
26977: NEG
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 1
26985: PUSH
26986: LD_INT 0
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 1
26995: PUSH
26996: LD_INT 1
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 0
27005: PUSH
27006: LD_INT 1
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 1
27015: NEG
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 1
27026: NEG
27027: PUSH
27028: LD_INT 1
27030: NEG
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: ST_TO_ADDR
// end ; 1 :
27045: GO 32942
27047: LD_INT 1
27049: DOUBLE
27050: EQUAL
27051: IFTRUE 27055
27053: GO 29678
27055: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27056: LD_ADDR_VAR 0 11
27060: PUSH
27061: LD_INT 1
27063: NEG
27064: PUSH
27065: LD_INT 3
27067: NEG
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 0
27075: PUSH
27076: LD_INT 3
27078: NEG
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 1
27086: PUSH
27087: LD_INT 2
27089: NEG
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: LIST
27099: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27100: LD_ADDR_VAR 0 12
27104: PUSH
27105: LD_INT 2
27107: PUSH
27108: LD_INT 1
27110: NEG
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 3
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 3
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: LIST
27140: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27141: LD_ADDR_VAR 0 13
27145: PUSH
27146: LD_INT 3
27148: PUSH
27149: LD_INT 2
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 3
27158: PUSH
27159: LD_INT 3
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 2
27168: PUSH
27169: LD_INT 3
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: LIST
27180: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27181: LD_ADDR_VAR 0 14
27185: PUSH
27186: LD_INT 1
27188: PUSH
27189: LD_INT 3
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: LD_INT 3
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 1
27208: NEG
27209: PUSH
27210: LD_INT 2
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: LIST
27221: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27222: LD_ADDR_VAR 0 15
27226: PUSH
27227: LD_INT 2
27229: NEG
27230: PUSH
27231: LD_INT 1
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 3
27240: NEG
27241: PUSH
27242: LD_INT 0
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 3
27251: NEG
27252: PUSH
27253: LD_INT 1
27255: NEG
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: LIST
27265: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27266: LD_ADDR_VAR 0 16
27270: PUSH
27271: LD_INT 2
27273: NEG
27274: PUSH
27275: LD_INT 3
27277: NEG
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 3
27285: NEG
27286: PUSH
27287: LD_INT 2
27289: NEG
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 3
27297: NEG
27298: PUSH
27299: LD_INT 3
27301: NEG
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: LIST
27311: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27312: LD_ADDR_VAR 0 17
27316: PUSH
27317: LD_INT 1
27319: NEG
27320: PUSH
27321: LD_INT 3
27323: NEG
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: LD_INT 3
27334: NEG
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 1
27342: PUSH
27343: LD_INT 2
27345: NEG
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: LIST
27355: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27356: LD_ADDR_VAR 0 18
27360: PUSH
27361: LD_INT 2
27363: PUSH
27364: LD_INT 1
27366: NEG
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 3
27374: PUSH
27375: LD_INT 0
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 3
27384: PUSH
27385: LD_INT 1
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: LIST
27396: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27397: LD_ADDR_VAR 0 19
27401: PUSH
27402: LD_INT 3
27404: PUSH
27405: LD_INT 2
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 3
27414: PUSH
27415: LD_INT 3
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 2
27424: PUSH
27425: LD_INT 3
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: LIST
27436: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27437: LD_ADDR_VAR 0 20
27441: PUSH
27442: LD_INT 1
27444: PUSH
27445: LD_INT 3
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 0
27454: PUSH
27455: LD_INT 3
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 1
27464: NEG
27465: PUSH
27466: LD_INT 2
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: LIST
27477: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27478: LD_ADDR_VAR 0 21
27482: PUSH
27483: LD_INT 2
27485: NEG
27486: PUSH
27487: LD_INT 1
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 3
27496: NEG
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 3
27507: NEG
27508: PUSH
27509: LD_INT 1
27511: NEG
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: LIST
27521: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27522: LD_ADDR_VAR 0 22
27526: PUSH
27527: LD_INT 2
27529: NEG
27530: PUSH
27531: LD_INT 3
27533: NEG
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 3
27541: NEG
27542: PUSH
27543: LD_INT 2
27545: NEG
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 3
27553: NEG
27554: PUSH
27555: LD_INT 3
27557: NEG
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: LIST
27567: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27568: LD_ADDR_VAR 0 23
27572: PUSH
27573: LD_INT 0
27575: PUSH
27576: LD_INT 3
27578: NEG
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 1
27586: NEG
27587: PUSH
27588: LD_INT 4
27590: NEG
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 1
27598: PUSH
27599: LD_INT 3
27601: NEG
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: LIST
27611: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27612: LD_ADDR_VAR 0 24
27616: PUSH
27617: LD_INT 3
27619: PUSH
27620: LD_INT 0
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 3
27629: PUSH
27630: LD_INT 1
27632: NEG
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 4
27640: PUSH
27641: LD_INT 1
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: LIST
27652: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27653: LD_ADDR_VAR 0 25
27657: PUSH
27658: LD_INT 3
27660: PUSH
27661: LD_INT 3
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 4
27670: PUSH
27671: LD_INT 3
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 3
27680: PUSH
27681: LD_INT 4
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: LIST
27692: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27693: LD_ADDR_VAR 0 26
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: LD_INT 3
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: LD_INT 4
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 1
27720: NEG
27721: PUSH
27722: LD_INT 3
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: LIST
27733: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27734: LD_ADDR_VAR 0 27
27738: PUSH
27739: LD_INT 3
27741: NEG
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 3
27752: NEG
27753: PUSH
27754: LD_INT 1
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 4
27763: NEG
27764: PUSH
27765: LD_INT 1
27767: NEG
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: LIST
27777: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27778: LD_ADDR_VAR 0 28
27782: PUSH
27783: LD_INT 3
27785: NEG
27786: PUSH
27787: LD_INT 3
27789: NEG
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 3
27797: NEG
27798: PUSH
27799: LD_INT 4
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 4
27809: NEG
27810: PUSH
27811: LD_INT 3
27813: NEG
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: LIST
27823: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27824: LD_ADDR_VAR 0 29
27828: PUSH
27829: LD_INT 1
27831: NEG
27832: PUSH
27833: LD_INT 3
27835: NEG
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 0
27843: PUSH
27844: LD_INT 3
27846: NEG
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 1
27854: PUSH
27855: LD_INT 2
27857: NEG
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 1
27865: NEG
27866: PUSH
27867: LD_INT 4
27869: NEG
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 0
27877: PUSH
27878: LD_INT 4
27880: NEG
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 1
27888: PUSH
27889: LD_INT 3
27891: NEG
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 1
27899: NEG
27900: PUSH
27901: LD_INT 5
27903: NEG
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 0
27911: PUSH
27912: LD_INT 5
27914: NEG
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 1
27922: PUSH
27923: LD_INT 4
27925: NEG
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: NEG
27934: PUSH
27935: LD_INT 6
27937: NEG
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 0
27945: PUSH
27946: LD_INT 6
27948: NEG
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 1
27956: PUSH
27957: LD_INT 5
27959: NEG
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27979: LD_ADDR_VAR 0 30
27983: PUSH
27984: LD_INT 2
27986: PUSH
27987: LD_INT 1
27989: NEG
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 3
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 3
28007: PUSH
28008: LD_INT 1
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 3
28017: PUSH
28018: LD_INT 1
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 4
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 4
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 4
28048: PUSH
28049: LD_INT 1
28051: NEG
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 5
28059: PUSH
28060: LD_INT 0
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 5
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 5
28079: PUSH
28080: LD_INT 1
28082: NEG
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 6
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 6
28100: PUSH
28101: LD_INT 1
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28122: LD_ADDR_VAR 0 31
28126: PUSH
28127: LD_INT 3
28129: PUSH
28130: LD_INT 2
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 3
28139: PUSH
28140: LD_INT 3
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 2
28149: PUSH
28150: LD_INT 3
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 4
28159: PUSH
28160: LD_INT 3
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 4
28169: PUSH
28170: LD_INT 4
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 3
28179: PUSH
28180: LD_INT 4
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 5
28189: PUSH
28190: LD_INT 4
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 5
28199: PUSH
28200: LD_INT 5
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 4
28209: PUSH
28210: LD_INT 5
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 6
28219: PUSH
28220: LD_INT 5
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 6
28229: PUSH
28230: LD_INT 6
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 5
28239: PUSH
28240: LD_INT 6
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28261: LD_ADDR_VAR 0 32
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: LD_INT 3
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 0
28278: PUSH
28279: LD_INT 3
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 1
28288: NEG
28289: PUSH
28290: LD_INT 2
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 1
28299: PUSH
28300: LD_INT 4
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: LD_INT 4
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 1
28319: NEG
28320: PUSH
28321: LD_INT 3
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: LD_INT 5
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: LD_INT 5
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 1
28350: NEG
28351: PUSH
28352: LD_INT 4
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 1
28361: PUSH
28362: LD_INT 6
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 0
28371: PUSH
28372: LD_INT 6
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 1
28381: NEG
28382: PUSH
28383: LD_INT 5
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28404: LD_ADDR_VAR 0 33
28408: PUSH
28409: LD_INT 2
28411: NEG
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 3
28422: NEG
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 3
28433: NEG
28434: PUSH
28435: LD_INT 1
28437: NEG
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 3
28445: NEG
28446: PUSH
28447: LD_INT 1
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 4
28456: NEG
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 4
28467: NEG
28468: PUSH
28469: LD_INT 1
28471: NEG
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 4
28479: NEG
28480: PUSH
28481: LD_INT 1
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 5
28490: NEG
28491: PUSH
28492: LD_INT 0
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 5
28501: NEG
28502: PUSH
28503: LD_INT 1
28505: NEG
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 5
28513: NEG
28514: PUSH
28515: LD_INT 1
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 6
28524: NEG
28525: PUSH
28526: LD_INT 0
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 6
28535: NEG
28536: PUSH
28537: LD_INT 1
28539: NEG
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28559: LD_ADDR_VAR 0 34
28563: PUSH
28564: LD_INT 2
28566: NEG
28567: PUSH
28568: LD_INT 3
28570: NEG
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 3
28578: NEG
28579: PUSH
28580: LD_INT 2
28582: NEG
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 3
28590: NEG
28591: PUSH
28592: LD_INT 3
28594: NEG
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 3
28602: NEG
28603: PUSH
28604: LD_INT 4
28606: NEG
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 4
28614: NEG
28615: PUSH
28616: LD_INT 3
28618: NEG
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 4
28626: NEG
28627: PUSH
28628: LD_INT 4
28630: NEG
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 4
28638: NEG
28639: PUSH
28640: LD_INT 5
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 5
28650: NEG
28651: PUSH
28652: LD_INT 4
28654: NEG
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 5
28662: NEG
28663: PUSH
28664: LD_INT 5
28666: NEG
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 5
28674: NEG
28675: PUSH
28676: LD_INT 6
28678: NEG
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 6
28686: NEG
28687: PUSH
28688: LD_INT 5
28690: NEG
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 6
28698: NEG
28699: PUSH
28700: LD_INT 6
28702: NEG
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28722: LD_ADDR_VAR 0 41
28726: PUSH
28727: LD_INT 0
28729: PUSH
28730: LD_INT 2
28732: NEG
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 1
28740: NEG
28741: PUSH
28742: LD_INT 3
28744: NEG
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: LD_INT 2
28755: NEG
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: LIST
28765: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28766: LD_ADDR_VAR 0 42
28770: PUSH
28771: LD_INT 2
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 2
28783: PUSH
28784: LD_INT 1
28786: NEG
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 3
28794: PUSH
28795: LD_INT 1
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: LIST
28806: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28807: LD_ADDR_VAR 0 43
28811: PUSH
28812: LD_INT 2
28814: PUSH
28815: LD_INT 2
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 3
28824: PUSH
28825: LD_INT 2
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 2
28834: PUSH
28835: LD_INT 3
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: LIST
28846: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28847: LD_ADDR_VAR 0 44
28851: PUSH
28852: LD_INT 0
28854: PUSH
28855: LD_INT 2
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: LD_INT 3
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: NEG
28875: PUSH
28876: LD_INT 2
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: LIST
28887: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28888: LD_ADDR_VAR 0 45
28892: PUSH
28893: LD_INT 2
28895: NEG
28896: PUSH
28897: LD_INT 0
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 2
28906: NEG
28907: PUSH
28908: LD_INT 1
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 3
28917: NEG
28918: PUSH
28919: LD_INT 1
28921: NEG
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: LIST
28931: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28932: LD_ADDR_VAR 0 46
28936: PUSH
28937: LD_INT 2
28939: NEG
28940: PUSH
28941: LD_INT 2
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 2
28951: NEG
28952: PUSH
28953: LD_INT 3
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 3
28963: NEG
28964: PUSH
28965: LD_INT 2
28967: NEG
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: LIST
28977: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28978: LD_ADDR_VAR 0 47
28982: PUSH
28983: LD_INT 2
28985: NEG
28986: PUSH
28987: LD_INT 3
28989: NEG
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: LD_INT 3
29001: NEG
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29011: LD_ADDR_VAR 0 48
29015: PUSH
29016: LD_INT 1
29018: PUSH
29019: LD_INT 2
29021: NEG
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 2
29029: PUSH
29030: LD_INT 1
29032: NEG
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29042: LD_ADDR_VAR 0 49
29046: PUSH
29047: LD_INT 3
29049: PUSH
29050: LD_INT 1
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 3
29059: PUSH
29060: LD_INT 2
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29071: LD_ADDR_VAR 0 50
29075: PUSH
29076: LD_INT 2
29078: PUSH
29079: LD_INT 3
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: LD_INT 3
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29100: LD_ADDR_VAR 0 51
29104: PUSH
29105: LD_INT 1
29107: NEG
29108: PUSH
29109: LD_INT 2
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 2
29118: NEG
29119: PUSH
29120: LD_INT 1
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29131: LD_ADDR_VAR 0 52
29135: PUSH
29136: LD_INT 3
29138: NEG
29139: PUSH
29140: LD_INT 1
29142: NEG
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 3
29150: NEG
29151: PUSH
29152: LD_INT 2
29154: NEG
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29164: LD_ADDR_VAR 0 53
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: PUSH
29173: LD_INT 3
29175: NEG
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 0
29183: PUSH
29184: LD_INT 3
29186: NEG
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 1
29194: PUSH
29195: LD_INT 2
29197: NEG
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: LIST
29207: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29208: LD_ADDR_VAR 0 54
29212: PUSH
29213: LD_INT 2
29215: PUSH
29216: LD_INT 1
29218: NEG
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 3
29226: PUSH
29227: LD_INT 0
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 3
29236: PUSH
29237: LD_INT 1
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: LIST
29248: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29249: LD_ADDR_VAR 0 55
29253: PUSH
29254: LD_INT 3
29256: PUSH
29257: LD_INT 2
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 3
29266: PUSH
29267: LD_INT 3
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 2
29276: PUSH
29277: LD_INT 3
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: LIST
29288: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29289: LD_ADDR_VAR 0 56
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: LD_INT 3
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 0
29306: PUSH
29307: LD_INT 3
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 1
29316: NEG
29317: PUSH
29318: LD_INT 2
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: LIST
29329: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29330: LD_ADDR_VAR 0 57
29334: PUSH
29335: LD_INT 2
29337: NEG
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 3
29348: NEG
29349: PUSH
29350: LD_INT 0
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 3
29359: NEG
29360: PUSH
29361: LD_INT 1
29363: NEG
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: LIST
29373: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29374: LD_ADDR_VAR 0 58
29378: PUSH
29379: LD_INT 2
29381: NEG
29382: PUSH
29383: LD_INT 3
29385: NEG
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 3
29393: NEG
29394: PUSH
29395: LD_INT 2
29397: NEG
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 3
29405: NEG
29406: PUSH
29407: LD_INT 3
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: LIST
29419: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29420: LD_ADDR_VAR 0 59
29424: PUSH
29425: LD_INT 1
29427: NEG
29428: PUSH
29429: LD_INT 2
29431: NEG
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 0
29439: PUSH
29440: LD_INT 2
29442: NEG
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 1
29450: PUSH
29451: LD_INT 1
29453: NEG
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: LIST
29463: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29464: LD_ADDR_VAR 0 60
29468: PUSH
29469: LD_INT 1
29471: PUSH
29472: LD_INT 1
29474: NEG
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 2
29482: PUSH
29483: LD_INT 0
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: LD_INT 1
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: LIST
29504: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29505: LD_ADDR_VAR 0 61
29509: PUSH
29510: LD_INT 2
29512: PUSH
29513: LD_INT 1
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 2
29522: PUSH
29523: LD_INT 2
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 1
29532: PUSH
29533: LD_INT 2
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: LIST
29544: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29545: LD_ADDR_VAR 0 62
29549: PUSH
29550: LD_INT 1
29552: PUSH
29553: LD_INT 2
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: LD_INT 2
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: NEG
29573: PUSH
29574: LD_INT 1
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: LIST
29585: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29586: LD_ADDR_VAR 0 63
29590: PUSH
29591: LD_INT 1
29593: NEG
29594: PUSH
29595: LD_INT 1
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 2
29604: NEG
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 2
29615: NEG
29616: PUSH
29617: LD_INT 1
29619: NEG
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: LIST
29629: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29630: LD_ADDR_VAR 0 64
29634: PUSH
29635: LD_INT 1
29637: NEG
29638: PUSH
29639: LD_INT 2
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 2
29649: NEG
29650: PUSH
29651: LD_INT 1
29653: NEG
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 2
29661: NEG
29662: PUSH
29663: LD_INT 2
29665: NEG
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: LIST
29675: ST_TO_ADDR
// end ; 2 :
29676: GO 32942
29678: LD_INT 2
29680: DOUBLE
29681: EQUAL
29682: IFTRUE 29686
29684: GO 32941
29686: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29687: LD_ADDR_VAR 0 29
29691: PUSH
29692: LD_INT 4
29694: PUSH
29695: LD_INT 0
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 4
29704: PUSH
29705: LD_INT 1
29707: NEG
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 5
29715: PUSH
29716: LD_INT 0
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 5
29725: PUSH
29726: LD_INT 1
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 4
29735: PUSH
29736: LD_INT 1
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 3
29745: PUSH
29746: LD_INT 0
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 3
29755: PUSH
29756: LD_INT 1
29758: NEG
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 3
29766: PUSH
29767: LD_INT 2
29769: NEG
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 5
29777: PUSH
29778: LD_INT 2
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 3
29787: PUSH
29788: LD_INT 3
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 3
29797: PUSH
29798: LD_INT 2
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 4
29807: PUSH
29808: LD_INT 3
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 4
29817: PUSH
29818: LD_INT 4
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 3
29827: PUSH
29828: LD_INT 4
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 2
29837: PUSH
29838: LD_INT 3
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 2
29847: PUSH
29848: LD_INT 2
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 4
29857: PUSH
29858: LD_INT 2
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 2
29867: PUSH
29868: LD_INT 4
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: LD_INT 4
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 0
29887: PUSH
29888: LD_INT 3
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 1
29897: PUSH
29898: LD_INT 4
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 1
29907: PUSH
29908: LD_INT 5
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 0
29917: PUSH
29918: LD_INT 5
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 1
29927: NEG
29928: PUSH
29929: LD_INT 4
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 1
29938: NEG
29939: PUSH
29940: LD_INT 3
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 2
29949: PUSH
29950: LD_INT 5
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 2
29959: NEG
29960: PUSH
29961: LD_INT 3
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 3
29970: NEG
29971: PUSH
29972: LD_INT 0
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 3
29981: NEG
29982: PUSH
29983: LD_INT 1
29985: NEG
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 2
29993: NEG
29994: PUSH
29995: LD_INT 0
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 2
30004: NEG
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 3
30015: NEG
30016: PUSH
30017: LD_INT 1
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 4
30026: NEG
30027: PUSH
30028: LD_INT 0
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 4
30037: NEG
30038: PUSH
30039: LD_INT 1
30041: NEG
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 4
30049: NEG
30050: PUSH
30051: LD_INT 2
30053: NEG
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 2
30061: NEG
30062: PUSH
30063: LD_INT 2
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 4
30072: NEG
30073: PUSH
30074: LD_INT 4
30076: NEG
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 4
30084: NEG
30085: PUSH
30086: LD_INT 5
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 3
30096: NEG
30097: PUSH
30098: LD_INT 4
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 3
30108: NEG
30109: PUSH
30110: LD_INT 3
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 4
30120: NEG
30121: PUSH
30122: LD_INT 3
30124: NEG
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 5
30132: NEG
30133: PUSH
30134: LD_INT 4
30136: NEG
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 5
30144: NEG
30145: PUSH
30146: LD_INT 5
30148: NEG
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 3
30156: NEG
30157: PUSH
30158: LD_INT 5
30160: NEG
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 5
30168: NEG
30169: PUSH
30170: LD_INT 3
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30225: LD_ADDR_VAR 0 30
30229: PUSH
30230: LD_INT 4
30232: PUSH
30233: LD_INT 4
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 4
30242: PUSH
30243: LD_INT 3
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 5
30252: PUSH
30253: LD_INT 4
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 5
30262: PUSH
30263: LD_INT 5
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 4
30272: PUSH
30273: LD_INT 5
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 3
30282: PUSH
30283: LD_INT 4
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 3
30292: PUSH
30293: LD_INT 3
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 5
30302: PUSH
30303: LD_INT 3
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 3
30312: PUSH
30313: LD_INT 5
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 0
30322: PUSH
30323: LD_INT 3
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: LD_INT 2
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: LD_INT 3
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: LD_INT 4
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: LD_INT 4
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 1
30372: NEG
30373: PUSH
30374: LD_INT 3
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 1
30383: NEG
30384: PUSH
30385: LD_INT 2
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 2
30394: PUSH
30395: LD_INT 4
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 2
30404: NEG
30405: PUSH
30406: LD_INT 2
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 4
30415: NEG
30416: PUSH
30417: LD_INT 0
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 4
30426: NEG
30427: PUSH
30428: LD_INT 1
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 3
30438: NEG
30439: PUSH
30440: LD_INT 0
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 3
30449: NEG
30450: PUSH
30451: LD_INT 1
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 4
30460: NEG
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 5
30471: NEG
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 5
30482: NEG
30483: PUSH
30484: LD_INT 1
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 5
30494: NEG
30495: PUSH
30496: LD_INT 2
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 3
30506: NEG
30507: PUSH
30508: LD_INT 2
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 3
30517: NEG
30518: PUSH
30519: LD_INT 3
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 3
30529: NEG
30530: PUSH
30531: LD_INT 4
30533: NEG
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 2
30541: NEG
30542: PUSH
30543: LD_INT 3
30545: NEG
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 2
30553: NEG
30554: PUSH
30555: LD_INT 2
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 3
30565: NEG
30566: PUSH
30567: LD_INT 2
30569: NEG
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 4
30577: NEG
30578: PUSH
30579: LD_INT 3
30581: NEG
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 4
30589: NEG
30590: PUSH
30591: LD_INT 4
30593: NEG
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 2
30601: NEG
30602: PUSH
30603: LD_INT 4
30605: NEG
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 4
30613: NEG
30614: PUSH
30615: LD_INT 2
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 0
30625: PUSH
30626: LD_INT 4
30628: NEG
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 0
30636: PUSH
30637: LD_INT 5
30639: NEG
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: LD_INT 4
30650: NEG
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 1
30658: PUSH
30659: LD_INT 3
30661: NEG
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 0
30669: PUSH
30670: LD_INT 3
30672: NEG
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 1
30680: NEG
30681: PUSH
30682: LD_INT 4
30684: NEG
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: NEG
30693: PUSH
30694: LD_INT 5
30696: NEG
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 2
30704: PUSH
30705: LD_INT 3
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 2
30715: NEG
30716: PUSH
30717: LD_INT 5
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30772: LD_ADDR_VAR 0 31
30776: PUSH
30777: LD_INT 0
30779: PUSH
30780: LD_INT 4
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 0
30789: PUSH
30790: LD_INT 3
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: PUSH
30800: LD_INT 4
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 1
30809: PUSH
30810: LD_INT 5
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 0
30819: PUSH
30820: LD_INT 5
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 1
30829: NEG
30830: PUSH
30831: LD_INT 4
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 1
30840: NEG
30841: PUSH
30842: LD_INT 3
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 2
30851: PUSH
30852: LD_INT 5
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 2
30861: NEG
30862: PUSH
30863: LD_INT 3
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 3
30872: NEG
30873: PUSH
30874: LD_INT 0
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 3
30883: NEG
30884: PUSH
30885: LD_INT 1
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 2
30895: NEG
30896: PUSH
30897: LD_INT 0
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 2
30906: NEG
30907: PUSH
30908: LD_INT 1
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 3
30917: NEG
30918: PUSH
30919: LD_INT 1
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 4
30928: NEG
30929: PUSH
30930: LD_INT 0
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 4
30939: NEG
30940: PUSH
30941: LD_INT 1
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 4
30951: NEG
30952: PUSH
30953: LD_INT 2
30955: NEG
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 2
30963: NEG
30964: PUSH
30965: LD_INT 2
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 4
30974: NEG
30975: PUSH
30976: LD_INT 4
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 4
30986: NEG
30987: PUSH
30988: LD_INT 5
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 3
30998: NEG
30999: PUSH
31000: LD_INT 4
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 3
31010: NEG
31011: PUSH
31012: LD_INT 3
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 4
31022: NEG
31023: PUSH
31024: LD_INT 3
31026: NEG
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 5
31034: NEG
31035: PUSH
31036: LD_INT 4
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 5
31046: NEG
31047: PUSH
31048: LD_INT 5
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 3
31058: NEG
31059: PUSH
31060: LD_INT 5
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 5
31070: NEG
31071: PUSH
31072: LD_INT 3
31074: NEG
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 0
31082: PUSH
31083: LD_INT 3
31085: NEG
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 0
31093: PUSH
31094: LD_INT 4
31096: NEG
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 1
31104: PUSH
31105: LD_INT 3
31107: NEG
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 1
31115: PUSH
31116: LD_INT 2
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 0
31126: PUSH
31127: LD_INT 2
31129: NEG
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 1
31137: NEG
31138: PUSH
31139: LD_INT 3
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 1
31149: NEG
31150: PUSH
31151: LD_INT 4
31153: NEG
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 2
31161: PUSH
31162: LD_INT 2
31164: NEG
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 2
31172: NEG
31173: PUSH
31174: LD_INT 4
31176: NEG
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 4
31184: PUSH
31185: LD_INT 0
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 4
31194: PUSH
31195: LD_INT 1
31197: NEG
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 5
31205: PUSH
31206: LD_INT 0
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 5
31215: PUSH
31216: LD_INT 1
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 4
31225: PUSH
31226: LD_INT 1
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 3
31235: PUSH
31236: LD_INT 0
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 3
31245: PUSH
31246: LD_INT 1
31248: NEG
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 3
31256: PUSH
31257: LD_INT 2
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 5
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31322: LD_ADDR_VAR 0 32
31326: PUSH
31327: LD_INT 4
31329: NEG
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 4
31340: NEG
31341: PUSH
31342: LD_INT 1
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 3
31352: NEG
31353: PUSH
31354: LD_INT 0
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 3
31363: NEG
31364: PUSH
31365: LD_INT 1
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 4
31374: NEG
31375: PUSH
31376: LD_INT 1
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 5
31385: NEG
31386: PUSH
31387: LD_INT 0
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 5
31396: NEG
31397: PUSH
31398: LD_INT 1
31400: NEG
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 5
31408: NEG
31409: PUSH
31410: LD_INT 2
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 3
31420: NEG
31421: PUSH
31422: LD_INT 2
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 3
31431: NEG
31432: PUSH
31433: LD_INT 3
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 3
31443: NEG
31444: PUSH
31445: LD_INT 4
31447: NEG
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 2
31455: NEG
31456: PUSH
31457: LD_INT 3
31459: NEG
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 2
31467: NEG
31468: PUSH
31469: LD_INT 2
31471: NEG
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 3
31479: NEG
31480: PUSH
31481: LD_INT 2
31483: NEG
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 4
31491: NEG
31492: PUSH
31493: LD_INT 3
31495: NEG
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 4
31503: NEG
31504: PUSH
31505: LD_INT 4
31507: NEG
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 2
31515: NEG
31516: PUSH
31517: LD_INT 4
31519: NEG
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 4
31527: NEG
31528: PUSH
31529: LD_INT 2
31531: NEG
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: LD_INT 4
31542: NEG
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: LD_INT 5
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: LD_INT 4
31564: NEG
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: LD_INT 3
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 0
31583: PUSH
31584: LD_INT 3
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 1
31594: NEG
31595: PUSH
31596: LD_INT 4
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: NEG
31607: PUSH
31608: LD_INT 5
31610: NEG
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 2
31618: PUSH
31619: LD_INT 3
31621: NEG
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 2
31629: NEG
31630: PUSH
31631: LD_INT 5
31633: NEG
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 3
31641: PUSH
31642: LD_INT 0
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 3
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 4
31662: PUSH
31663: LD_INT 0
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 4
31672: PUSH
31673: LD_INT 1
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 3
31682: PUSH
31683: LD_INT 1
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 2
31692: PUSH
31693: LD_INT 0
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 2
31702: PUSH
31703: LD_INT 1
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 2
31713: PUSH
31714: LD_INT 2
31716: NEG
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 4
31724: PUSH
31725: LD_INT 2
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 4
31734: PUSH
31735: LD_INT 4
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 4
31744: PUSH
31745: LD_INT 3
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 5
31754: PUSH
31755: LD_INT 4
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 5
31764: PUSH
31765: LD_INT 5
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 4
31774: PUSH
31775: LD_INT 5
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 3
31784: PUSH
31785: LD_INT 4
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 3
31794: PUSH
31795: LD_INT 3
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 5
31804: PUSH
31805: LD_INT 3
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 3
31814: PUSH
31815: LD_INT 5
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31869: LD_ADDR_VAR 0 33
31873: PUSH
31874: LD_INT 4
31876: NEG
31877: PUSH
31878: LD_INT 4
31880: NEG
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 4
31888: NEG
31889: PUSH
31890: LD_INT 5
31892: NEG
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 3
31900: NEG
31901: PUSH
31902: LD_INT 4
31904: NEG
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 3
31912: NEG
31913: PUSH
31914: LD_INT 3
31916: NEG
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 4
31924: NEG
31925: PUSH
31926: LD_INT 3
31928: NEG
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 5
31936: NEG
31937: PUSH
31938: LD_INT 4
31940: NEG
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 5
31948: NEG
31949: PUSH
31950: LD_INT 5
31952: NEG
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 3
31960: NEG
31961: PUSH
31962: LD_INT 5
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 5
31972: NEG
31973: PUSH
31974: LD_INT 3
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 0
31984: PUSH
31985: LD_INT 3
31987: NEG
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: LD_INT 4
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: LD_INT 3
32009: NEG
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: LD_INT 2
32020: NEG
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: LD_INT 2
32031: NEG
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 1
32039: NEG
32040: PUSH
32041: LD_INT 3
32043: NEG
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 1
32051: NEG
32052: PUSH
32053: LD_INT 4
32055: NEG
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: LD_INT 2
32066: NEG
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 2
32074: NEG
32075: PUSH
32076: LD_INT 4
32078: NEG
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 4
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 4
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 5
32107: PUSH
32108: LD_INT 0
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 5
32117: PUSH
32118: LD_INT 1
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 4
32127: PUSH
32128: LD_INT 1
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 3
32137: PUSH
32138: LD_INT 0
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 3
32147: PUSH
32148: LD_INT 1
32150: NEG
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 3
32158: PUSH
32159: LD_INT 2
32161: NEG
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 5
32169: PUSH
32170: LD_INT 2
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 3
32179: PUSH
32180: LD_INT 3
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 3
32189: PUSH
32190: LD_INT 2
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 4
32199: PUSH
32200: LD_INT 3
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 4
32209: PUSH
32210: LD_INT 4
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 3
32219: PUSH
32220: LD_INT 4
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 2
32229: PUSH
32230: LD_INT 3
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 2
32239: PUSH
32240: LD_INT 2
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 4
32249: PUSH
32250: LD_INT 2
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 2
32259: PUSH
32260: LD_INT 4
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 0
32269: PUSH
32270: LD_INT 4
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: LD_INT 3
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 1
32289: PUSH
32290: LD_INT 4
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: LD_INT 5
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: LD_INT 5
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 1
32319: NEG
32320: PUSH
32321: LD_INT 4
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 1
32330: NEG
32331: PUSH
32332: LD_INT 3
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 2
32341: PUSH
32342: LD_INT 5
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 2
32351: NEG
32352: PUSH
32353: LD_INT 3
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32407: LD_ADDR_VAR 0 34
32411: PUSH
32412: LD_INT 0
32414: PUSH
32415: LD_INT 4
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: LD_INT 5
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: LD_INT 4
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 1
32447: PUSH
32448: LD_INT 3
32450: NEG
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 0
32458: PUSH
32459: LD_INT 3
32461: NEG
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 1
32469: NEG
32470: PUSH
32471: LD_INT 4
32473: NEG
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: LD_INT 5
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 2
32493: PUSH
32494: LD_INT 3
32496: NEG
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 2
32504: NEG
32505: PUSH
32506: LD_INT 5
32508: NEG
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 3
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 3
32526: PUSH
32527: LD_INT 1
32529: NEG
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 4
32537: PUSH
32538: LD_INT 0
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 4
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 3
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 2
32567: PUSH
32568: LD_INT 0
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 2
32577: PUSH
32578: LD_INT 1
32580: NEG
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 2
32588: PUSH
32589: LD_INT 2
32591: NEG
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 4
32599: PUSH
32600: LD_INT 2
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 4
32609: PUSH
32610: LD_INT 4
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 4
32619: PUSH
32620: LD_INT 3
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 5
32629: PUSH
32630: LD_INT 4
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 5
32639: PUSH
32640: LD_INT 5
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 4
32649: PUSH
32650: LD_INT 5
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 3
32659: PUSH
32660: LD_INT 4
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 3
32669: PUSH
32670: LD_INT 3
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 5
32679: PUSH
32680: LD_INT 3
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 3
32689: PUSH
32690: LD_INT 5
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 0
32699: PUSH
32700: LD_INT 3
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: LD_INT 2
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: PUSH
32720: LD_INT 3
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 1
32729: PUSH
32730: LD_INT 4
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 0
32739: PUSH
32740: LD_INT 4
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 1
32749: NEG
32750: PUSH
32751: LD_INT 3
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 1
32760: NEG
32761: PUSH
32762: LD_INT 2
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 2
32771: PUSH
32772: LD_INT 4
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 2
32781: NEG
32782: PUSH
32783: LD_INT 2
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 4
32792: NEG
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 4
32803: NEG
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 3
32815: NEG
32816: PUSH
32817: LD_INT 0
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 3
32826: NEG
32827: PUSH
32828: LD_INT 1
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 4
32837: NEG
32838: PUSH
32839: LD_INT 1
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 5
32848: NEG
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 5
32859: NEG
32860: PUSH
32861: LD_INT 1
32863: NEG
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 5
32871: NEG
32872: PUSH
32873: LD_INT 2
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 3
32883: NEG
32884: PUSH
32885: LD_INT 2
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: ST_TO_ADDR
// end ; end ;
32939: GO 32942
32941: POP
// case btype of b_depot , b_warehouse :
32942: LD_VAR 0 1
32946: PUSH
32947: LD_INT 0
32949: DOUBLE
32950: EQUAL
32951: IFTRUE 32961
32953: LD_INT 1
32955: DOUBLE
32956: EQUAL
32957: IFTRUE 32961
32959: GO 33162
32961: POP
// case nation of nation_american :
32962: LD_VAR 0 5
32966: PUSH
32967: LD_INT 1
32969: DOUBLE
32970: EQUAL
32971: IFTRUE 32975
32973: GO 33031
32975: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32976: LD_ADDR_VAR 0 9
32980: PUSH
32981: LD_VAR 0 11
32985: PUSH
32986: LD_VAR 0 12
32990: PUSH
32991: LD_VAR 0 13
32995: PUSH
32996: LD_VAR 0 14
33000: PUSH
33001: LD_VAR 0 15
33005: PUSH
33006: LD_VAR 0 16
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: PUSH
33019: LD_VAR 0 4
33023: PUSH
33024: LD_INT 1
33026: PLUS
33027: ARRAY
33028: ST_TO_ADDR
33029: GO 33160
33031: LD_INT 2
33033: DOUBLE
33034: EQUAL
33035: IFTRUE 33039
33037: GO 33095
33039: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33040: LD_ADDR_VAR 0 9
33044: PUSH
33045: LD_VAR 0 17
33049: PUSH
33050: LD_VAR 0 18
33054: PUSH
33055: LD_VAR 0 19
33059: PUSH
33060: LD_VAR 0 20
33064: PUSH
33065: LD_VAR 0 21
33069: PUSH
33070: LD_VAR 0 22
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: PUSH
33083: LD_VAR 0 4
33087: PUSH
33088: LD_INT 1
33090: PLUS
33091: ARRAY
33092: ST_TO_ADDR
33093: GO 33160
33095: LD_INT 3
33097: DOUBLE
33098: EQUAL
33099: IFTRUE 33103
33101: GO 33159
33103: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33104: LD_ADDR_VAR 0 9
33108: PUSH
33109: LD_VAR 0 23
33113: PUSH
33114: LD_VAR 0 24
33118: PUSH
33119: LD_VAR 0 25
33123: PUSH
33124: LD_VAR 0 26
33128: PUSH
33129: LD_VAR 0 27
33133: PUSH
33134: LD_VAR 0 28
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: PUSH
33147: LD_VAR 0 4
33151: PUSH
33152: LD_INT 1
33154: PLUS
33155: ARRAY
33156: ST_TO_ADDR
33157: GO 33160
33159: POP
33160: GO 33715
33162: LD_INT 2
33164: DOUBLE
33165: EQUAL
33166: IFTRUE 33176
33168: LD_INT 3
33170: DOUBLE
33171: EQUAL
33172: IFTRUE 33176
33174: GO 33232
33176: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33177: LD_ADDR_VAR 0 9
33181: PUSH
33182: LD_VAR 0 29
33186: PUSH
33187: LD_VAR 0 30
33191: PUSH
33192: LD_VAR 0 31
33196: PUSH
33197: LD_VAR 0 32
33201: PUSH
33202: LD_VAR 0 33
33206: PUSH
33207: LD_VAR 0 34
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: PUSH
33220: LD_VAR 0 4
33224: PUSH
33225: LD_INT 1
33227: PLUS
33228: ARRAY
33229: ST_TO_ADDR
33230: GO 33715
33232: LD_INT 16
33234: DOUBLE
33235: EQUAL
33236: IFTRUE 33294
33238: LD_INT 17
33240: DOUBLE
33241: EQUAL
33242: IFTRUE 33294
33244: LD_INT 18
33246: DOUBLE
33247: EQUAL
33248: IFTRUE 33294
33250: LD_INT 19
33252: DOUBLE
33253: EQUAL
33254: IFTRUE 33294
33256: LD_INT 22
33258: DOUBLE
33259: EQUAL
33260: IFTRUE 33294
33262: LD_INT 20
33264: DOUBLE
33265: EQUAL
33266: IFTRUE 33294
33268: LD_INT 21
33270: DOUBLE
33271: EQUAL
33272: IFTRUE 33294
33274: LD_INT 23
33276: DOUBLE
33277: EQUAL
33278: IFTRUE 33294
33280: LD_INT 24
33282: DOUBLE
33283: EQUAL
33284: IFTRUE 33294
33286: LD_INT 25
33288: DOUBLE
33289: EQUAL
33290: IFTRUE 33294
33292: GO 33350
33294: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33295: LD_ADDR_VAR 0 9
33299: PUSH
33300: LD_VAR 0 35
33304: PUSH
33305: LD_VAR 0 36
33309: PUSH
33310: LD_VAR 0 37
33314: PUSH
33315: LD_VAR 0 38
33319: PUSH
33320: LD_VAR 0 39
33324: PUSH
33325: LD_VAR 0 40
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: PUSH
33338: LD_VAR 0 4
33342: PUSH
33343: LD_INT 1
33345: PLUS
33346: ARRAY
33347: ST_TO_ADDR
33348: GO 33715
33350: LD_INT 6
33352: DOUBLE
33353: EQUAL
33354: IFTRUE 33406
33356: LD_INT 7
33358: DOUBLE
33359: EQUAL
33360: IFTRUE 33406
33362: LD_INT 8
33364: DOUBLE
33365: EQUAL
33366: IFTRUE 33406
33368: LD_INT 13
33370: DOUBLE
33371: EQUAL
33372: IFTRUE 33406
33374: LD_INT 12
33376: DOUBLE
33377: EQUAL
33378: IFTRUE 33406
33380: LD_INT 15
33382: DOUBLE
33383: EQUAL
33384: IFTRUE 33406
33386: LD_INT 11
33388: DOUBLE
33389: EQUAL
33390: IFTRUE 33406
33392: LD_INT 14
33394: DOUBLE
33395: EQUAL
33396: IFTRUE 33406
33398: LD_INT 10
33400: DOUBLE
33401: EQUAL
33402: IFTRUE 33406
33404: GO 33462
33406: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33407: LD_ADDR_VAR 0 9
33411: PUSH
33412: LD_VAR 0 41
33416: PUSH
33417: LD_VAR 0 42
33421: PUSH
33422: LD_VAR 0 43
33426: PUSH
33427: LD_VAR 0 44
33431: PUSH
33432: LD_VAR 0 45
33436: PUSH
33437: LD_VAR 0 46
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: PUSH
33450: LD_VAR 0 4
33454: PUSH
33455: LD_INT 1
33457: PLUS
33458: ARRAY
33459: ST_TO_ADDR
33460: GO 33715
33462: LD_INT 36
33464: DOUBLE
33465: EQUAL
33466: IFTRUE 33470
33468: GO 33526
33470: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33471: LD_ADDR_VAR 0 9
33475: PUSH
33476: LD_VAR 0 47
33480: PUSH
33481: LD_VAR 0 48
33485: PUSH
33486: LD_VAR 0 49
33490: PUSH
33491: LD_VAR 0 50
33495: PUSH
33496: LD_VAR 0 51
33500: PUSH
33501: LD_VAR 0 52
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: PUSH
33514: LD_VAR 0 4
33518: PUSH
33519: LD_INT 1
33521: PLUS
33522: ARRAY
33523: ST_TO_ADDR
33524: GO 33715
33526: LD_INT 4
33528: DOUBLE
33529: EQUAL
33530: IFTRUE 33552
33532: LD_INT 5
33534: DOUBLE
33535: EQUAL
33536: IFTRUE 33552
33538: LD_INT 34
33540: DOUBLE
33541: EQUAL
33542: IFTRUE 33552
33544: LD_INT 37
33546: DOUBLE
33547: EQUAL
33548: IFTRUE 33552
33550: GO 33608
33552: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33553: LD_ADDR_VAR 0 9
33557: PUSH
33558: LD_VAR 0 53
33562: PUSH
33563: LD_VAR 0 54
33567: PUSH
33568: LD_VAR 0 55
33572: PUSH
33573: LD_VAR 0 56
33577: PUSH
33578: LD_VAR 0 57
33582: PUSH
33583: LD_VAR 0 58
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: PUSH
33596: LD_VAR 0 4
33600: PUSH
33601: LD_INT 1
33603: PLUS
33604: ARRAY
33605: ST_TO_ADDR
33606: GO 33715
33608: LD_INT 31
33610: DOUBLE
33611: EQUAL
33612: IFTRUE 33658
33614: LD_INT 32
33616: DOUBLE
33617: EQUAL
33618: IFTRUE 33658
33620: LD_INT 33
33622: DOUBLE
33623: EQUAL
33624: IFTRUE 33658
33626: LD_INT 27
33628: DOUBLE
33629: EQUAL
33630: IFTRUE 33658
33632: LD_INT 26
33634: DOUBLE
33635: EQUAL
33636: IFTRUE 33658
33638: LD_INT 28
33640: DOUBLE
33641: EQUAL
33642: IFTRUE 33658
33644: LD_INT 29
33646: DOUBLE
33647: EQUAL
33648: IFTRUE 33658
33650: LD_INT 30
33652: DOUBLE
33653: EQUAL
33654: IFTRUE 33658
33656: GO 33714
33658: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33659: LD_ADDR_VAR 0 9
33663: PUSH
33664: LD_VAR 0 59
33668: PUSH
33669: LD_VAR 0 60
33673: PUSH
33674: LD_VAR 0 61
33678: PUSH
33679: LD_VAR 0 62
33683: PUSH
33684: LD_VAR 0 63
33688: PUSH
33689: LD_VAR 0 64
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: PUSH
33702: LD_VAR 0 4
33706: PUSH
33707: LD_INT 1
33709: PLUS
33710: ARRAY
33711: ST_TO_ADDR
33712: GO 33715
33714: POP
// temp_list2 = [ ] ;
33715: LD_ADDR_VAR 0 10
33719: PUSH
33720: EMPTY
33721: ST_TO_ADDR
// for i in temp_list do
33722: LD_ADDR_VAR 0 8
33726: PUSH
33727: LD_VAR 0 9
33731: PUSH
33732: FOR_IN
33733: IFFALSE 33785
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33735: LD_ADDR_VAR 0 10
33739: PUSH
33740: LD_VAR 0 10
33744: PUSH
33745: LD_VAR 0 8
33749: PUSH
33750: LD_INT 1
33752: ARRAY
33753: PUSH
33754: LD_VAR 0 2
33758: PLUS
33759: PUSH
33760: LD_VAR 0 8
33764: PUSH
33765: LD_INT 2
33767: ARRAY
33768: PUSH
33769: LD_VAR 0 3
33773: PLUS
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: EMPTY
33780: LIST
33781: ADD
33782: ST_TO_ADDR
33783: GO 33732
33785: POP
33786: POP
// result = temp_list2 ;
33787: LD_ADDR_VAR 0 7
33791: PUSH
33792: LD_VAR 0 10
33796: ST_TO_ADDR
// end ;
33797: LD_VAR 0 7
33801: RET
// export function EnemyInRange ( unit , dist ) ; begin
33802: LD_INT 0
33804: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33805: LD_ADDR_VAR 0 3
33809: PUSH
33810: LD_VAR 0 1
33814: PPUSH
33815: CALL_OW 255
33819: PPUSH
33820: LD_VAR 0 1
33824: PPUSH
33825: CALL_OW 250
33829: PPUSH
33830: LD_VAR 0 1
33834: PPUSH
33835: CALL_OW 251
33839: PPUSH
33840: LD_VAR 0 2
33844: PPUSH
33845: CALL 7198 0 4
33849: PUSH
33850: LD_INT 4
33852: ARRAY
33853: ST_TO_ADDR
// end ;
33854: LD_VAR 0 3
33858: RET
// export function PlayerSeeMe ( unit ) ; begin
33859: LD_INT 0
33861: PPUSH
// result := See ( your_side , unit ) ;
33862: LD_ADDR_VAR 0 2
33866: PUSH
33867: LD_OWVAR 2
33871: PPUSH
33872: LD_VAR 0 1
33876: PPUSH
33877: CALL_OW 292
33881: ST_TO_ADDR
// end ;
33882: LD_VAR 0 2
33886: RET
// export function ReverseDir ( unit ) ; begin
33887: LD_INT 0
33889: PPUSH
// if not unit then
33890: LD_VAR 0 1
33894: NOT
33895: IFFALSE 33899
// exit ;
33897: GO 33922
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33899: LD_ADDR_VAR 0 2
33903: PUSH
33904: LD_VAR 0 1
33908: PPUSH
33909: CALL_OW 254
33913: PUSH
33914: LD_INT 3
33916: PLUS
33917: PUSH
33918: LD_INT 6
33920: MOD
33921: ST_TO_ADDR
// end ;
33922: LD_VAR 0 2
33926: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
33927: LD_INT 0
33929: PPUSH
33930: PPUSH
33931: PPUSH
33932: PPUSH
33933: PPUSH
// if not hexes then
33934: LD_VAR 0 2
33938: NOT
33939: IFFALSE 33943
// exit ;
33941: GO 34091
// dist := 9999 ;
33943: LD_ADDR_VAR 0 5
33947: PUSH
33948: LD_INT 9999
33950: ST_TO_ADDR
// for i = 1 to hexes do
33951: LD_ADDR_VAR 0 4
33955: PUSH
33956: DOUBLE
33957: LD_INT 1
33959: DEC
33960: ST_TO_ADDR
33961: LD_VAR 0 2
33965: PUSH
33966: FOR_TO
33967: IFFALSE 34079
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
33969: LD_VAR 0 1
33973: PPUSH
33974: LD_VAR 0 2
33978: PUSH
33979: LD_VAR 0 4
33983: ARRAY
33984: PUSH
33985: LD_INT 1
33987: ARRAY
33988: PPUSH
33989: LD_VAR 0 2
33993: PUSH
33994: LD_VAR 0 4
33998: ARRAY
33999: PUSH
34000: LD_INT 2
34002: ARRAY
34003: PPUSH
34004: CALL_OW 297
34008: PUSH
34009: LD_VAR 0 5
34013: LESS
34014: IFFALSE 34077
// begin hex := hexes [ i ] ;
34016: LD_ADDR_VAR 0 7
34020: PUSH
34021: LD_VAR 0 2
34025: PUSH
34026: LD_VAR 0 4
34030: ARRAY
34031: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34032: LD_ADDR_VAR 0 5
34036: PUSH
34037: LD_VAR 0 1
34041: PPUSH
34042: LD_VAR 0 2
34046: PUSH
34047: LD_VAR 0 4
34051: ARRAY
34052: PUSH
34053: LD_INT 1
34055: ARRAY
34056: PPUSH
34057: LD_VAR 0 2
34061: PUSH
34062: LD_VAR 0 4
34066: ARRAY
34067: PUSH
34068: LD_INT 2
34070: ARRAY
34071: PPUSH
34072: CALL_OW 297
34076: ST_TO_ADDR
// end ; end ;
34077: GO 33966
34079: POP
34080: POP
// result := hex ;
34081: LD_ADDR_VAR 0 3
34085: PUSH
34086: LD_VAR 0 7
34090: ST_TO_ADDR
// end ;
34091: LD_VAR 0 3
34095: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34096: LD_INT 0
34098: PPUSH
34099: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34100: LD_VAR 0 1
34104: NOT
34105: PUSH
34106: LD_VAR 0 1
34110: PUSH
34111: LD_INT 21
34113: PUSH
34114: LD_INT 2
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 23
34123: PUSH
34124: LD_INT 2
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PPUSH
34135: CALL_OW 69
34139: IN
34140: NOT
34141: OR
34142: IFFALSE 34146
// exit ;
34144: GO 34193
// for i = 1 to 3 do
34146: LD_ADDR_VAR 0 3
34150: PUSH
34151: DOUBLE
34152: LD_INT 1
34154: DEC
34155: ST_TO_ADDR
34156: LD_INT 3
34158: PUSH
34159: FOR_TO
34160: IFFALSE 34191
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34162: LD_VAR 0 1
34166: PPUSH
34167: CALL_OW 250
34171: PPUSH
34172: LD_VAR 0 1
34176: PPUSH
34177: CALL_OW 251
34181: PPUSH
34182: LD_INT 1
34184: PPUSH
34185: CALL_OW 453
34189: GO 34159
34191: POP
34192: POP
// end ;
34193: LD_VAR 0 2
34197: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34198: LD_INT 0
34200: PPUSH
34201: PPUSH
34202: PPUSH
34203: PPUSH
34204: PPUSH
34205: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34206: LD_VAR 0 1
34210: NOT
34211: PUSH
34212: LD_VAR 0 2
34216: NOT
34217: OR
34218: PUSH
34219: LD_VAR 0 1
34223: PPUSH
34224: CALL_OW 314
34228: OR
34229: IFFALSE 34233
// exit ;
34231: GO 34674
// x := GetX ( enemy_unit ) ;
34233: LD_ADDR_VAR 0 7
34237: PUSH
34238: LD_VAR 0 2
34242: PPUSH
34243: CALL_OW 250
34247: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34248: LD_ADDR_VAR 0 8
34252: PUSH
34253: LD_VAR 0 2
34257: PPUSH
34258: CALL_OW 251
34262: ST_TO_ADDR
// if not x or not y then
34263: LD_VAR 0 7
34267: NOT
34268: PUSH
34269: LD_VAR 0 8
34273: NOT
34274: OR
34275: IFFALSE 34279
// exit ;
34277: GO 34674
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34279: LD_ADDR_VAR 0 6
34283: PUSH
34284: LD_VAR 0 7
34288: PPUSH
34289: LD_INT 0
34291: PPUSH
34292: LD_INT 4
34294: PPUSH
34295: CALL_OW 272
34299: PUSH
34300: LD_VAR 0 8
34304: PPUSH
34305: LD_INT 0
34307: PPUSH
34308: LD_INT 4
34310: PPUSH
34311: CALL_OW 273
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_VAR 0 7
34324: PPUSH
34325: LD_INT 1
34327: PPUSH
34328: LD_INT 4
34330: PPUSH
34331: CALL_OW 272
34335: PUSH
34336: LD_VAR 0 8
34340: PPUSH
34341: LD_INT 1
34343: PPUSH
34344: LD_INT 4
34346: PPUSH
34347: CALL_OW 273
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_VAR 0 7
34360: PPUSH
34361: LD_INT 2
34363: PPUSH
34364: LD_INT 4
34366: PPUSH
34367: CALL_OW 272
34371: PUSH
34372: LD_VAR 0 8
34376: PPUSH
34377: LD_INT 2
34379: PPUSH
34380: LD_INT 4
34382: PPUSH
34383: CALL_OW 273
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_VAR 0 7
34396: PPUSH
34397: LD_INT 3
34399: PPUSH
34400: LD_INT 4
34402: PPUSH
34403: CALL_OW 272
34407: PUSH
34408: LD_VAR 0 8
34412: PPUSH
34413: LD_INT 3
34415: PPUSH
34416: LD_INT 4
34418: PPUSH
34419: CALL_OW 273
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_VAR 0 7
34432: PPUSH
34433: LD_INT 4
34435: PPUSH
34436: LD_INT 4
34438: PPUSH
34439: CALL_OW 272
34443: PUSH
34444: LD_VAR 0 8
34448: PPUSH
34449: LD_INT 4
34451: PPUSH
34452: LD_INT 4
34454: PPUSH
34455: CALL_OW 273
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_VAR 0 7
34468: PPUSH
34469: LD_INT 5
34471: PPUSH
34472: LD_INT 4
34474: PPUSH
34475: CALL_OW 272
34479: PUSH
34480: LD_VAR 0 8
34484: PPUSH
34485: LD_INT 5
34487: PPUSH
34488: LD_INT 4
34490: PPUSH
34491: CALL_OW 273
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: ST_TO_ADDR
// for i = tmp downto 1 do
34508: LD_ADDR_VAR 0 4
34512: PUSH
34513: DOUBLE
34514: LD_VAR 0 6
34518: INC
34519: ST_TO_ADDR
34520: LD_INT 1
34522: PUSH
34523: FOR_DOWNTO
34524: IFFALSE 34625
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34526: LD_VAR 0 6
34530: PUSH
34531: LD_VAR 0 4
34535: ARRAY
34536: PUSH
34537: LD_INT 1
34539: ARRAY
34540: PPUSH
34541: LD_VAR 0 6
34545: PUSH
34546: LD_VAR 0 4
34550: ARRAY
34551: PUSH
34552: LD_INT 2
34554: ARRAY
34555: PPUSH
34556: CALL_OW 488
34560: NOT
34561: PUSH
34562: LD_VAR 0 6
34566: PUSH
34567: LD_VAR 0 4
34571: ARRAY
34572: PUSH
34573: LD_INT 1
34575: ARRAY
34576: PPUSH
34577: LD_VAR 0 6
34581: PUSH
34582: LD_VAR 0 4
34586: ARRAY
34587: PUSH
34588: LD_INT 2
34590: ARRAY
34591: PPUSH
34592: CALL_OW 428
34596: PUSH
34597: LD_INT 0
34599: NONEQUAL
34600: OR
34601: IFFALSE 34623
// tmp := Delete ( tmp , i ) ;
34603: LD_ADDR_VAR 0 6
34607: PUSH
34608: LD_VAR 0 6
34612: PPUSH
34613: LD_VAR 0 4
34617: PPUSH
34618: CALL_OW 3
34622: ST_TO_ADDR
34623: GO 34523
34625: POP
34626: POP
// j := GetClosestHex ( unit , tmp ) ;
34627: LD_ADDR_VAR 0 5
34631: PUSH
34632: LD_VAR 0 1
34636: PPUSH
34637: LD_VAR 0 6
34641: PPUSH
34642: CALL 33927 0 2
34646: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34647: LD_VAR 0 1
34651: PPUSH
34652: LD_VAR 0 5
34656: PUSH
34657: LD_INT 1
34659: ARRAY
34660: PPUSH
34661: LD_VAR 0 5
34665: PUSH
34666: LD_INT 2
34668: ARRAY
34669: PPUSH
34670: CALL_OW 111
// end ;
34674: LD_VAR 0 3
34678: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34679: LD_INT 0
34681: PPUSH
34682: PPUSH
34683: PPUSH
// uc_side = 0 ;
34684: LD_ADDR_OWVAR 20
34688: PUSH
34689: LD_INT 0
34691: ST_TO_ADDR
// uc_nation = 0 ;
34692: LD_ADDR_OWVAR 21
34696: PUSH
34697: LD_INT 0
34699: ST_TO_ADDR
// InitHc_All ( ) ;
34700: CALL_OW 584
// InitVc ;
34704: CALL_OW 20
// if mastodonts then
34708: LD_VAR 0 6
34712: IFFALSE 34779
// for i = 1 to mastodonts do
34714: LD_ADDR_VAR 0 11
34718: PUSH
34719: DOUBLE
34720: LD_INT 1
34722: DEC
34723: ST_TO_ADDR
34724: LD_VAR 0 6
34728: PUSH
34729: FOR_TO
34730: IFFALSE 34777
// begin vc_chassis := 31 ;
34732: LD_ADDR_OWVAR 37
34736: PUSH
34737: LD_INT 31
34739: ST_TO_ADDR
// vc_control := control_rider ;
34740: LD_ADDR_OWVAR 38
34744: PUSH
34745: LD_INT 4
34747: ST_TO_ADDR
// animal := CreateVehicle ;
34748: LD_ADDR_VAR 0 12
34752: PUSH
34753: CALL_OW 45
34757: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34758: LD_VAR 0 12
34762: PPUSH
34763: LD_VAR 0 8
34767: PPUSH
34768: LD_INT 0
34770: PPUSH
34771: CALL 36914 0 3
// end ;
34775: GO 34729
34777: POP
34778: POP
// if horses then
34779: LD_VAR 0 5
34783: IFFALSE 34850
// for i = 1 to horses do
34785: LD_ADDR_VAR 0 11
34789: PUSH
34790: DOUBLE
34791: LD_INT 1
34793: DEC
34794: ST_TO_ADDR
34795: LD_VAR 0 5
34799: PUSH
34800: FOR_TO
34801: IFFALSE 34848
// begin hc_class := 21 ;
34803: LD_ADDR_OWVAR 28
34807: PUSH
34808: LD_INT 21
34810: ST_TO_ADDR
// hc_gallery :=  ;
34811: LD_ADDR_OWVAR 33
34815: PUSH
34816: LD_STRING 
34818: ST_TO_ADDR
// animal := CreateHuman ;
34819: LD_ADDR_VAR 0 12
34823: PUSH
34824: CALL_OW 44
34828: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34829: LD_VAR 0 12
34833: PPUSH
34834: LD_VAR 0 8
34838: PPUSH
34839: LD_INT 0
34841: PPUSH
34842: CALL 36914 0 3
// end ;
34846: GO 34800
34848: POP
34849: POP
// if birds then
34850: LD_VAR 0 1
34854: IFFALSE 34921
// for i = 1 to birds do
34856: LD_ADDR_VAR 0 11
34860: PUSH
34861: DOUBLE
34862: LD_INT 1
34864: DEC
34865: ST_TO_ADDR
34866: LD_VAR 0 1
34870: PUSH
34871: FOR_TO
34872: IFFALSE 34919
// begin hc_class = 18 ;
34874: LD_ADDR_OWVAR 28
34878: PUSH
34879: LD_INT 18
34881: ST_TO_ADDR
// hc_gallery =  ;
34882: LD_ADDR_OWVAR 33
34886: PUSH
34887: LD_STRING 
34889: ST_TO_ADDR
// animal := CreateHuman ;
34890: LD_ADDR_VAR 0 12
34894: PUSH
34895: CALL_OW 44
34899: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34900: LD_VAR 0 12
34904: PPUSH
34905: LD_VAR 0 8
34909: PPUSH
34910: LD_INT 0
34912: PPUSH
34913: CALL 36914 0 3
// end ;
34917: GO 34871
34919: POP
34920: POP
// if tigers then
34921: LD_VAR 0 2
34925: IFFALSE 35009
// for i = 1 to tigers do
34927: LD_ADDR_VAR 0 11
34931: PUSH
34932: DOUBLE
34933: LD_INT 1
34935: DEC
34936: ST_TO_ADDR
34937: LD_VAR 0 2
34941: PUSH
34942: FOR_TO
34943: IFFALSE 35007
// begin hc_class = class_tiger ;
34945: LD_ADDR_OWVAR 28
34949: PUSH
34950: LD_INT 14
34952: ST_TO_ADDR
// hc_gallery =  ;
34953: LD_ADDR_OWVAR 33
34957: PUSH
34958: LD_STRING 
34960: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34961: LD_ADDR_OWVAR 35
34965: PUSH
34966: LD_INT 7
34968: NEG
34969: PPUSH
34970: LD_INT 7
34972: PPUSH
34973: CALL_OW 12
34977: ST_TO_ADDR
// animal := CreateHuman ;
34978: LD_ADDR_VAR 0 12
34982: PUSH
34983: CALL_OW 44
34987: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34988: LD_VAR 0 12
34992: PPUSH
34993: LD_VAR 0 8
34997: PPUSH
34998: LD_INT 0
35000: PPUSH
35001: CALL 36914 0 3
// end ;
35005: GO 34942
35007: POP
35008: POP
// if apemans then
35009: LD_VAR 0 3
35013: IFFALSE 35136
// for i = 1 to apemans do
35015: LD_ADDR_VAR 0 11
35019: PUSH
35020: DOUBLE
35021: LD_INT 1
35023: DEC
35024: ST_TO_ADDR
35025: LD_VAR 0 3
35029: PUSH
35030: FOR_TO
35031: IFFALSE 35134
// begin hc_class = class_apeman ;
35033: LD_ADDR_OWVAR 28
35037: PUSH
35038: LD_INT 12
35040: ST_TO_ADDR
// hc_gallery =  ;
35041: LD_ADDR_OWVAR 33
35045: PUSH
35046: LD_STRING 
35048: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35049: LD_ADDR_OWVAR 35
35053: PUSH
35054: LD_INT 2
35056: NEG
35057: PPUSH
35058: LD_INT 2
35060: PPUSH
35061: CALL_OW 12
35065: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35066: LD_ADDR_OWVAR 31
35070: PUSH
35071: LD_INT 1
35073: PPUSH
35074: LD_INT 3
35076: PPUSH
35077: CALL_OW 12
35081: PUSH
35082: LD_INT 1
35084: PPUSH
35085: LD_INT 3
35087: PPUSH
35088: CALL_OW 12
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: ST_TO_ADDR
// animal := CreateHuman ;
35105: LD_ADDR_VAR 0 12
35109: PUSH
35110: CALL_OW 44
35114: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35115: LD_VAR 0 12
35119: PPUSH
35120: LD_VAR 0 8
35124: PPUSH
35125: LD_INT 0
35127: PPUSH
35128: CALL 36914 0 3
// end ;
35132: GO 35030
35134: POP
35135: POP
// if enchidnas then
35136: LD_VAR 0 4
35140: IFFALSE 35207
// for i = 1 to enchidnas do
35142: LD_ADDR_VAR 0 11
35146: PUSH
35147: DOUBLE
35148: LD_INT 1
35150: DEC
35151: ST_TO_ADDR
35152: LD_VAR 0 4
35156: PUSH
35157: FOR_TO
35158: IFFALSE 35205
// begin hc_class = 13 ;
35160: LD_ADDR_OWVAR 28
35164: PUSH
35165: LD_INT 13
35167: ST_TO_ADDR
// hc_gallery =  ;
35168: LD_ADDR_OWVAR 33
35172: PUSH
35173: LD_STRING 
35175: ST_TO_ADDR
// animal := CreateHuman ;
35176: LD_ADDR_VAR 0 12
35180: PUSH
35181: CALL_OW 44
35185: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35186: LD_VAR 0 12
35190: PPUSH
35191: LD_VAR 0 8
35195: PPUSH
35196: LD_INT 0
35198: PPUSH
35199: CALL 36914 0 3
// end ;
35203: GO 35157
35205: POP
35206: POP
// if fishes then
35207: LD_VAR 0 7
35211: IFFALSE 35278
// for i = 1 to fishes do
35213: LD_ADDR_VAR 0 11
35217: PUSH
35218: DOUBLE
35219: LD_INT 1
35221: DEC
35222: ST_TO_ADDR
35223: LD_VAR 0 7
35227: PUSH
35228: FOR_TO
35229: IFFALSE 35276
// begin hc_class = 20 ;
35231: LD_ADDR_OWVAR 28
35235: PUSH
35236: LD_INT 20
35238: ST_TO_ADDR
// hc_gallery =  ;
35239: LD_ADDR_OWVAR 33
35243: PUSH
35244: LD_STRING 
35246: ST_TO_ADDR
// animal := CreateHuman ;
35247: LD_ADDR_VAR 0 12
35251: PUSH
35252: CALL_OW 44
35256: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35257: LD_VAR 0 12
35261: PPUSH
35262: LD_VAR 0 9
35266: PPUSH
35267: LD_INT 0
35269: PPUSH
35270: CALL 36914 0 3
// end ;
35274: GO 35228
35276: POP
35277: POP
// end ;
35278: LD_VAR 0 10
35282: RET
// export function WantHeal ( sci , unit ) ; begin
35283: LD_INT 0
35285: PPUSH
// if GetTaskList ( sci ) > 0 then
35286: LD_VAR 0 1
35290: PPUSH
35291: CALL_OW 437
35295: PUSH
35296: LD_INT 0
35298: GREATER
35299: IFFALSE 35369
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35301: LD_VAR 0 1
35305: PPUSH
35306: CALL_OW 437
35310: PUSH
35311: LD_INT 1
35313: ARRAY
35314: PUSH
35315: LD_INT 1
35317: ARRAY
35318: PUSH
35319: LD_STRING l
35321: EQUAL
35322: PUSH
35323: LD_VAR 0 1
35327: PPUSH
35328: CALL_OW 437
35332: PUSH
35333: LD_INT 1
35335: ARRAY
35336: PUSH
35337: LD_INT 4
35339: ARRAY
35340: PUSH
35341: LD_VAR 0 2
35345: EQUAL
35346: AND
35347: IFFALSE 35359
// result := true else
35349: LD_ADDR_VAR 0 3
35353: PUSH
35354: LD_INT 1
35356: ST_TO_ADDR
35357: GO 35367
// result := false ;
35359: LD_ADDR_VAR 0 3
35363: PUSH
35364: LD_INT 0
35366: ST_TO_ADDR
// end else
35367: GO 35377
// result := false ;
35369: LD_ADDR_VAR 0 3
35373: PUSH
35374: LD_INT 0
35376: ST_TO_ADDR
// end ;
35377: LD_VAR 0 3
35381: RET
// export function HealTarget ( sci ) ; begin
35382: LD_INT 0
35384: PPUSH
// if not sci then
35385: LD_VAR 0 1
35389: NOT
35390: IFFALSE 35394
// exit ;
35392: GO 35459
// result := 0 ;
35394: LD_ADDR_VAR 0 2
35398: PUSH
35399: LD_INT 0
35401: ST_TO_ADDR
// if GetTaskList ( sci ) then
35402: LD_VAR 0 1
35406: PPUSH
35407: CALL_OW 437
35411: IFFALSE 35459
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35413: LD_VAR 0 1
35417: PPUSH
35418: CALL_OW 437
35422: PUSH
35423: LD_INT 1
35425: ARRAY
35426: PUSH
35427: LD_INT 1
35429: ARRAY
35430: PUSH
35431: LD_STRING l
35433: EQUAL
35434: IFFALSE 35459
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35436: LD_ADDR_VAR 0 2
35440: PUSH
35441: LD_VAR 0 1
35445: PPUSH
35446: CALL_OW 437
35450: PUSH
35451: LD_INT 1
35453: ARRAY
35454: PUSH
35455: LD_INT 4
35457: ARRAY
35458: ST_TO_ADDR
// end ;
35459: LD_VAR 0 2
35463: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35464: LD_INT 0
35466: PPUSH
35467: PPUSH
35468: PPUSH
35469: PPUSH
// if not base_units then
35470: LD_VAR 0 1
35474: NOT
35475: IFFALSE 35479
// exit ;
35477: GO 35566
// result := false ;
35479: LD_ADDR_VAR 0 2
35483: PUSH
35484: LD_INT 0
35486: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35487: LD_ADDR_VAR 0 5
35491: PUSH
35492: LD_VAR 0 1
35496: PPUSH
35497: LD_INT 21
35499: PUSH
35500: LD_INT 3
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PPUSH
35507: CALL_OW 72
35511: ST_TO_ADDR
// if not tmp then
35512: LD_VAR 0 5
35516: NOT
35517: IFFALSE 35521
// exit ;
35519: GO 35566
// for i in tmp do
35521: LD_ADDR_VAR 0 3
35525: PUSH
35526: LD_VAR 0 5
35530: PUSH
35531: FOR_IN
35532: IFFALSE 35564
// begin result := EnemyInRange ( i , 22 ) ;
35534: LD_ADDR_VAR 0 2
35538: PUSH
35539: LD_VAR 0 3
35543: PPUSH
35544: LD_INT 22
35546: PPUSH
35547: CALL 33802 0 2
35551: ST_TO_ADDR
// if result then
35552: LD_VAR 0 2
35556: IFFALSE 35562
// exit ;
35558: POP
35559: POP
35560: GO 35566
// end ;
35562: GO 35531
35564: POP
35565: POP
// end ;
35566: LD_VAR 0 2
35570: RET
// export function FilterByTag ( units , tag ) ; begin
35571: LD_INT 0
35573: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35574: LD_ADDR_VAR 0 3
35578: PUSH
35579: LD_VAR 0 1
35583: PPUSH
35584: LD_INT 120
35586: PUSH
35587: LD_VAR 0 2
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PPUSH
35596: CALL_OW 72
35600: ST_TO_ADDR
// end ;
35601: LD_VAR 0 3
35605: RET
// export function IsDriver ( un ) ; begin
35606: LD_INT 0
35608: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35609: LD_ADDR_VAR 0 2
35613: PUSH
35614: LD_VAR 0 1
35618: PUSH
35619: LD_INT 55
35621: PUSH
35622: EMPTY
35623: LIST
35624: PPUSH
35625: CALL_OW 69
35629: IN
35630: ST_TO_ADDR
// end ;
35631: LD_VAR 0 2
35635: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35636: LD_INT 0
35638: PPUSH
35639: PPUSH
// list := [ ] ;
35640: LD_ADDR_VAR 0 5
35644: PUSH
35645: EMPTY
35646: ST_TO_ADDR
// case d of 0 :
35647: LD_VAR 0 3
35651: PUSH
35652: LD_INT 0
35654: DOUBLE
35655: EQUAL
35656: IFTRUE 35660
35658: GO 35793
35660: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35661: LD_ADDR_VAR 0 5
35665: PUSH
35666: LD_VAR 0 1
35670: PUSH
35671: LD_INT 4
35673: MINUS
35674: PUSH
35675: LD_VAR 0 2
35679: PUSH
35680: LD_INT 4
35682: MINUS
35683: PUSH
35684: LD_INT 2
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: PUSH
35692: LD_VAR 0 1
35696: PUSH
35697: LD_INT 3
35699: MINUS
35700: PUSH
35701: LD_VAR 0 2
35705: PUSH
35706: LD_INT 1
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: LIST
35713: PUSH
35714: LD_VAR 0 1
35718: PUSH
35719: LD_INT 4
35721: PLUS
35722: PUSH
35723: LD_VAR 0 2
35727: PUSH
35728: LD_INT 4
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: LIST
35735: PUSH
35736: LD_VAR 0 1
35740: PUSH
35741: LD_INT 3
35743: PLUS
35744: PUSH
35745: LD_VAR 0 2
35749: PUSH
35750: LD_INT 3
35752: PLUS
35753: PUSH
35754: LD_INT 5
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: PUSH
35762: LD_VAR 0 1
35766: PUSH
35767: LD_VAR 0 2
35771: PUSH
35772: LD_INT 4
35774: PLUS
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: ST_TO_ADDR
// end ; 1 :
35791: GO 36491
35793: LD_INT 1
35795: DOUBLE
35796: EQUAL
35797: IFTRUE 35801
35799: GO 35934
35801: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35802: LD_ADDR_VAR 0 5
35806: PUSH
35807: LD_VAR 0 1
35811: PUSH
35812: LD_VAR 0 2
35816: PUSH
35817: LD_INT 4
35819: MINUS
35820: PUSH
35821: LD_INT 3
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: LIST
35828: PUSH
35829: LD_VAR 0 1
35833: PUSH
35834: LD_INT 3
35836: MINUS
35837: PUSH
35838: LD_VAR 0 2
35842: PUSH
35843: LD_INT 3
35845: MINUS
35846: PUSH
35847: LD_INT 2
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: LIST
35854: PUSH
35855: LD_VAR 0 1
35859: PUSH
35860: LD_INT 4
35862: MINUS
35863: PUSH
35864: LD_VAR 0 2
35868: PUSH
35869: LD_INT 1
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: LIST
35876: PUSH
35877: LD_VAR 0 1
35881: PUSH
35882: LD_VAR 0 2
35886: PUSH
35887: LD_INT 3
35889: PLUS
35890: PUSH
35891: LD_INT 0
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: LIST
35898: PUSH
35899: LD_VAR 0 1
35903: PUSH
35904: LD_INT 4
35906: PLUS
35907: PUSH
35908: LD_VAR 0 2
35912: PUSH
35913: LD_INT 4
35915: PLUS
35916: PUSH
35917: LD_INT 5
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: LIST
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: ST_TO_ADDR
// end ; 2 :
35932: GO 36491
35934: LD_INT 2
35936: DOUBLE
35937: EQUAL
35938: IFTRUE 35942
35940: GO 36071
35942: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35943: LD_ADDR_VAR 0 5
35947: PUSH
35948: LD_VAR 0 1
35952: PUSH
35953: LD_VAR 0 2
35957: PUSH
35958: LD_INT 3
35960: MINUS
35961: PUSH
35962: LD_INT 3
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: LIST
35969: PUSH
35970: LD_VAR 0 1
35974: PUSH
35975: LD_INT 4
35977: PLUS
35978: PUSH
35979: LD_VAR 0 2
35983: PUSH
35984: LD_INT 4
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: LIST
35991: PUSH
35992: LD_VAR 0 1
35996: PUSH
35997: LD_VAR 0 2
36001: PUSH
36002: LD_INT 4
36004: PLUS
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: LIST
36013: PUSH
36014: LD_VAR 0 1
36018: PUSH
36019: LD_INT 3
36021: MINUS
36022: PUSH
36023: LD_VAR 0 2
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: LIST
36035: PUSH
36036: LD_VAR 0 1
36040: PUSH
36041: LD_INT 4
36043: MINUS
36044: PUSH
36045: LD_VAR 0 2
36049: PUSH
36050: LD_INT 4
36052: MINUS
36053: PUSH
36054: LD_INT 2
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: LIST
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: ST_TO_ADDR
// end ; 3 :
36069: GO 36491
36071: LD_INT 3
36073: DOUBLE
36074: EQUAL
36075: IFTRUE 36079
36077: GO 36212
36079: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36080: LD_ADDR_VAR 0 5
36084: PUSH
36085: LD_VAR 0 1
36089: PUSH
36090: LD_INT 3
36092: PLUS
36093: PUSH
36094: LD_VAR 0 2
36098: PUSH
36099: LD_INT 4
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: LIST
36106: PUSH
36107: LD_VAR 0 1
36111: PUSH
36112: LD_INT 4
36114: PLUS
36115: PUSH
36116: LD_VAR 0 2
36120: PUSH
36121: LD_INT 4
36123: PLUS
36124: PUSH
36125: LD_INT 5
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: LIST
36132: PUSH
36133: LD_VAR 0 1
36137: PUSH
36138: LD_INT 4
36140: MINUS
36141: PUSH
36142: LD_VAR 0 2
36146: PUSH
36147: LD_INT 1
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: LIST
36154: PUSH
36155: LD_VAR 0 1
36159: PUSH
36160: LD_VAR 0 2
36164: PUSH
36165: LD_INT 4
36167: MINUS
36168: PUSH
36169: LD_INT 3
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: LIST
36176: PUSH
36177: LD_VAR 0 1
36181: PUSH
36182: LD_INT 3
36184: MINUS
36185: PUSH
36186: LD_VAR 0 2
36190: PUSH
36191: LD_INT 3
36193: MINUS
36194: PUSH
36195: LD_INT 2
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: ST_TO_ADDR
// end ; 4 :
36210: GO 36491
36212: LD_INT 4
36214: DOUBLE
36215: EQUAL
36216: IFTRUE 36220
36218: GO 36353
36220: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36221: LD_ADDR_VAR 0 5
36225: PUSH
36226: LD_VAR 0 1
36230: PUSH
36231: LD_VAR 0 2
36235: PUSH
36236: LD_INT 4
36238: PLUS
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: LIST
36247: PUSH
36248: LD_VAR 0 1
36252: PUSH
36253: LD_INT 3
36255: PLUS
36256: PUSH
36257: LD_VAR 0 2
36261: PUSH
36262: LD_INT 3
36264: PLUS
36265: PUSH
36266: LD_INT 5
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: LIST
36273: PUSH
36274: LD_VAR 0 1
36278: PUSH
36279: LD_INT 4
36281: PLUS
36282: PUSH
36283: LD_VAR 0 2
36287: PUSH
36288: LD_INT 4
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: LIST
36295: PUSH
36296: LD_VAR 0 1
36300: PUSH
36301: LD_VAR 0 2
36305: PUSH
36306: LD_INT 3
36308: MINUS
36309: PUSH
36310: LD_INT 3
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: LIST
36317: PUSH
36318: LD_VAR 0 1
36322: PUSH
36323: LD_INT 4
36325: MINUS
36326: PUSH
36327: LD_VAR 0 2
36331: PUSH
36332: LD_INT 4
36334: MINUS
36335: PUSH
36336: LD_INT 2
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: LIST
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: ST_TO_ADDR
// end ; 5 :
36351: GO 36491
36353: LD_INT 5
36355: DOUBLE
36356: EQUAL
36357: IFTRUE 36361
36359: GO 36490
36361: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36362: LD_ADDR_VAR 0 5
36366: PUSH
36367: LD_VAR 0 1
36371: PUSH
36372: LD_INT 4
36374: MINUS
36375: PUSH
36376: LD_VAR 0 2
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: LIST
36388: PUSH
36389: LD_VAR 0 1
36393: PUSH
36394: LD_VAR 0 2
36398: PUSH
36399: LD_INT 4
36401: MINUS
36402: PUSH
36403: LD_INT 3
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: PUSH
36411: LD_VAR 0 1
36415: PUSH
36416: LD_INT 4
36418: PLUS
36419: PUSH
36420: LD_VAR 0 2
36424: PUSH
36425: LD_INT 4
36427: PLUS
36428: PUSH
36429: LD_INT 5
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: LIST
36436: PUSH
36437: LD_VAR 0 1
36441: PUSH
36442: LD_INT 3
36444: PLUS
36445: PUSH
36446: LD_VAR 0 2
36450: PUSH
36451: LD_INT 4
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: LIST
36458: PUSH
36459: LD_VAR 0 1
36463: PUSH
36464: LD_VAR 0 2
36468: PUSH
36469: LD_INT 3
36471: PLUS
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: LIST
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: ST_TO_ADDR
// end ; end ;
36488: GO 36491
36490: POP
// result := list ;
36491: LD_ADDR_VAR 0 4
36495: PUSH
36496: LD_VAR 0 5
36500: ST_TO_ADDR
// end ;
36501: LD_VAR 0 4
36505: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36506: LD_INT 0
36508: PPUSH
36509: PPUSH
36510: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36511: LD_VAR 0 1
36515: NOT
36516: PUSH
36517: LD_VAR 0 2
36521: PUSH
36522: LD_INT 1
36524: PUSH
36525: LD_INT 2
36527: PUSH
36528: LD_INT 3
36530: PUSH
36531: LD_INT 4
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: IN
36540: NOT
36541: OR
36542: IFFALSE 36546
// exit ;
36544: GO 36638
// tmp := [ ] ;
36546: LD_ADDR_VAR 0 5
36550: PUSH
36551: EMPTY
36552: ST_TO_ADDR
// for i in units do
36553: LD_ADDR_VAR 0 4
36557: PUSH
36558: LD_VAR 0 1
36562: PUSH
36563: FOR_IN
36564: IFFALSE 36607
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
36566: LD_ADDR_VAR 0 5
36570: PUSH
36571: LD_VAR 0 5
36575: PPUSH
36576: LD_VAR 0 5
36580: PUSH
36581: LD_INT 1
36583: PLUS
36584: PPUSH
36585: LD_VAR 0 4
36589: PPUSH
36590: LD_VAR 0 2
36594: PPUSH
36595: CALL_OW 259
36599: PPUSH
36600: CALL_OW 2
36604: ST_TO_ADDR
36605: GO 36563
36607: POP
36608: POP
// if not tmp then
36609: LD_VAR 0 5
36613: NOT
36614: IFFALSE 36618
// exit ;
36616: GO 36638
// result := SortListByListDesc ( units , tmp ) ;
36618: LD_ADDR_VAR 0 3
36622: PUSH
36623: LD_VAR 0 1
36627: PPUSH
36628: LD_VAR 0 5
36632: PPUSH
36633: CALL_OW 77
36637: ST_TO_ADDR
// end ;
36638: LD_VAR 0 3
36642: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36643: LD_INT 0
36645: PPUSH
36646: PPUSH
36647: PPUSH
// result := false ;
36648: LD_ADDR_VAR 0 3
36652: PUSH
36653: LD_INT 0
36655: ST_TO_ADDR
// x := GetX ( building ) ;
36656: LD_ADDR_VAR 0 4
36660: PUSH
36661: LD_VAR 0 2
36665: PPUSH
36666: CALL_OW 250
36670: ST_TO_ADDR
// y := GetY ( building ) ;
36671: LD_ADDR_VAR 0 5
36675: PUSH
36676: LD_VAR 0 2
36680: PPUSH
36681: CALL_OW 251
36685: ST_TO_ADDR
// if not building or not x or not y then
36686: LD_VAR 0 2
36690: NOT
36691: PUSH
36692: LD_VAR 0 4
36696: NOT
36697: OR
36698: PUSH
36699: LD_VAR 0 5
36703: NOT
36704: OR
36705: IFFALSE 36709
// exit ;
36707: GO 36801
// if GetTaskList ( unit ) then
36709: LD_VAR 0 1
36713: PPUSH
36714: CALL_OW 437
36718: IFFALSE 36801
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36720: LD_STRING e
36722: PUSH
36723: LD_VAR 0 1
36727: PPUSH
36728: CALL_OW 437
36732: PUSH
36733: LD_INT 1
36735: ARRAY
36736: PUSH
36737: LD_INT 1
36739: ARRAY
36740: EQUAL
36741: PUSH
36742: LD_VAR 0 4
36746: PUSH
36747: LD_VAR 0 1
36751: PPUSH
36752: CALL_OW 437
36756: PUSH
36757: LD_INT 1
36759: ARRAY
36760: PUSH
36761: LD_INT 2
36763: ARRAY
36764: EQUAL
36765: AND
36766: PUSH
36767: LD_VAR 0 5
36771: PUSH
36772: LD_VAR 0 1
36776: PPUSH
36777: CALL_OW 437
36781: PUSH
36782: LD_INT 1
36784: ARRAY
36785: PUSH
36786: LD_INT 3
36788: ARRAY
36789: EQUAL
36790: AND
36791: IFFALSE 36801
// result := true end ;
36793: LD_ADDR_VAR 0 3
36797: PUSH
36798: LD_INT 1
36800: ST_TO_ADDR
// end ;
36801: LD_VAR 0 3
36805: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36806: LD_INT 0
36808: PPUSH
// result := false ;
36809: LD_ADDR_VAR 0 4
36813: PUSH
36814: LD_INT 0
36816: ST_TO_ADDR
// if GetTaskList ( unit ) then
36817: LD_VAR 0 1
36821: PPUSH
36822: CALL_OW 437
36826: IFFALSE 36909
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36828: LD_STRING M
36830: PUSH
36831: LD_VAR 0 1
36835: PPUSH
36836: CALL_OW 437
36840: PUSH
36841: LD_INT 1
36843: ARRAY
36844: PUSH
36845: LD_INT 1
36847: ARRAY
36848: EQUAL
36849: PUSH
36850: LD_VAR 0 2
36854: PUSH
36855: LD_VAR 0 1
36859: PPUSH
36860: CALL_OW 437
36864: PUSH
36865: LD_INT 1
36867: ARRAY
36868: PUSH
36869: LD_INT 2
36871: ARRAY
36872: EQUAL
36873: AND
36874: PUSH
36875: LD_VAR 0 3
36879: PUSH
36880: LD_VAR 0 1
36884: PPUSH
36885: CALL_OW 437
36889: PUSH
36890: LD_INT 1
36892: ARRAY
36893: PUSH
36894: LD_INT 3
36896: ARRAY
36897: EQUAL
36898: AND
36899: IFFALSE 36909
// result := true ;
36901: LD_ADDR_VAR 0 4
36905: PUSH
36906: LD_INT 1
36908: ST_TO_ADDR
// end ; end ;
36909: LD_VAR 0 4
36913: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36914: LD_INT 0
36916: PPUSH
36917: PPUSH
36918: PPUSH
36919: PPUSH
// if not unit or not area then
36920: LD_VAR 0 1
36924: NOT
36925: PUSH
36926: LD_VAR 0 2
36930: NOT
36931: OR
36932: IFFALSE 36936
// exit ;
36934: GO 37100
// tmp := AreaToList ( area , i ) ;
36936: LD_ADDR_VAR 0 6
36940: PUSH
36941: LD_VAR 0 2
36945: PPUSH
36946: LD_VAR 0 5
36950: PPUSH
36951: CALL_OW 517
36955: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36956: LD_ADDR_VAR 0 5
36960: PUSH
36961: DOUBLE
36962: LD_INT 1
36964: DEC
36965: ST_TO_ADDR
36966: LD_VAR 0 6
36970: PUSH
36971: LD_INT 1
36973: ARRAY
36974: PUSH
36975: FOR_TO
36976: IFFALSE 37098
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36978: LD_ADDR_VAR 0 7
36982: PUSH
36983: LD_VAR 0 6
36987: PUSH
36988: LD_INT 1
36990: ARRAY
36991: PUSH
36992: LD_VAR 0 5
36996: ARRAY
36997: PUSH
36998: LD_VAR 0 6
37002: PUSH
37003: LD_INT 2
37005: ARRAY
37006: PUSH
37007: LD_VAR 0 5
37011: ARRAY
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
37017: LD_VAR 0 7
37021: PUSH
37022: LD_INT 1
37024: ARRAY
37025: PPUSH
37026: LD_VAR 0 7
37030: PUSH
37031: LD_INT 2
37033: ARRAY
37034: PPUSH
37035: CALL_OW 428
37039: PUSH
37040: LD_INT 0
37042: EQUAL
37043: IFFALSE 37096
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37045: LD_VAR 0 1
37049: PPUSH
37050: LD_VAR 0 7
37054: PUSH
37055: LD_INT 1
37057: ARRAY
37058: PPUSH
37059: LD_VAR 0 7
37063: PUSH
37064: LD_INT 2
37066: ARRAY
37067: PPUSH
37068: LD_VAR 0 3
37072: PPUSH
37073: CALL_OW 48
// result := IsPlaced ( unit ) ;
37077: LD_ADDR_VAR 0 4
37081: PUSH
37082: LD_VAR 0 1
37086: PPUSH
37087: CALL_OW 305
37091: ST_TO_ADDR
// exit ;
37092: POP
37093: POP
37094: GO 37100
// end ; end ;
37096: GO 36975
37098: POP
37099: POP
// end ;
37100: LD_VAR 0 4
37104: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37105: LD_INT 0
37107: PPUSH
37108: PPUSH
37109: PPUSH
// if not side or side > 8 then
37110: LD_VAR 0 1
37114: NOT
37115: PUSH
37116: LD_VAR 0 1
37120: PUSH
37121: LD_INT 8
37123: GREATER
37124: OR
37125: IFFALSE 37129
// exit ;
37127: GO 37316
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37129: LD_ADDR_VAR 0 4
37133: PUSH
37134: LD_INT 22
37136: PUSH
37137: LD_VAR 0 1
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 21
37148: PUSH
37149: LD_INT 3
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PPUSH
37160: CALL_OW 69
37164: ST_TO_ADDR
// if not tmp then
37165: LD_VAR 0 4
37169: NOT
37170: IFFALSE 37174
// exit ;
37172: GO 37316
// enable_addtolog := true ;
37174: LD_ADDR_OWVAR 81
37178: PUSH
37179: LD_INT 1
37181: ST_TO_ADDR
// AddToLog ( [ ) ;
37182: LD_STRING [
37184: PPUSH
37185: CALL_OW 561
// for i in tmp do
37189: LD_ADDR_VAR 0 3
37193: PUSH
37194: LD_VAR 0 4
37198: PUSH
37199: FOR_IN
37200: IFFALSE 37307
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37202: LD_STRING [
37204: PUSH
37205: LD_VAR 0 3
37209: PPUSH
37210: CALL_OW 266
37214: STR
37215: PUSH
37216: LD_STRING , 
37218: STR
37219: PUSH
37220: LD_VAR 0 3
37224: PPUSH
37225: CALL_OW 250
37229: STR
37230: PUSH
37231: LD_STRING , 
37233: STR
37234: PUSH
37235: LD_VAR 0 3
37239: PPUSH
37240: CALL_OW 251
37244: STR
37245: PUSH
37246: LD_STRING , 
37248: STR
37249: PUSH
37250: LD_VAR 0 3
37254: PPUSH
37255: CALL_OW 254
37259: STR
37260: PUSH
37261: LD_STRING , 
37263: STR
37264: PUSH
37265: LD_VAR 0 3
37269: PPUSH
37270: LD_INT 1
37272: PPUSH
37273: CALL_OW 268
37277: STR
37278: PUSH
37279: LD_STRING , 
37281: STR
37282: PUSH
37283: LD_VAR 0 3
37287: PPUSH
37288: LD_INT 2
37290: PPUSH
37291: CALL_OW 268
37295: STR
37296: PUSH
37297: LD_STRING ],
37299: STR
37300: PPUSH
37301: CALL_OW 561
// end ;
37305: GO 37199
37307: POP
37308: POP
// AddToLog ( ]; ) ;
37309: LD_STRING ];
37311: PPUSH
37312: CALL_OW 561
// end ;
37316: LD_VAR 0 2
37320: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37321: LD_INT 0
37323: PPUSH
37324: PPUSH
37325: PPUSH
37326: PPUSH
37327: PPUSH
// if not area or not rate or not max then
37328: LD_VAR 0 1
37332: NOT
37333: PUSH
37334: LD_VAR 0 2
37338: NOT
37339: OR
37340: PUSH
37341: LD_VAR 0 4
37345: NOT
37346: OR
37347: IFFALSE 37351
// exit ;
37349: GO 37540
// while 1 do
37351: LD_INT 1
37353: IFFALSE 37540
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37355: LD_ADDR_VAR 0 9
37359: PUSH
37360: LD_VAR 0 1
37364: PPUSH
37365: LD_INT 1
37367: PPUSH
37368: CALL_OW 287
37372: PUSH
37373: LD_INT 10
37375: MUL
37376: ST_TO_ADDR
// r := rate / 10 ;
37377: LD_ADDR_VAR 0 7
37381: PUSH
37382: LD_VAR 0 2
37386: PUSH
37387: LD_INT 10
37389: DIVREAL
37390: ST_TO_ADDR
// time := 1 1$00 ;
37391: LD_ADDR_VAR 0 8
37395: PUSH
37396: LD_INT 2100
37398: ST_TO_ADDR
// if amount < min then
37399: LD_VAR 0 9
37403: PUSH
37404: LD_VAR 0 3
37408: LESS
37409: IFFALSE 37427
// r := r * 2 else
37411: LD_ADDR_VAR 0 7
37415: PUSH
37416: LD_VAR 0 7
37420: PUSH
37421: LD_INT 2
37423: MUL
37424: ST_TO_ADDR
37425: GO 37453
// if amount > max then
37427: LD_VAR 0 9
37431: PUSH
37432: LD_VAR 0 4
37436: GREATER
37437: IFFALSE 37453
// r := r / 2 ;
37439: LD_ADDR_VAR 0 7
37443: PUSH
37444: LD_VAR 0 7
37448: PUSH
37449: LD_INT 2
37451: DIVREAL
37452: ST_TO_ADDR
// time := time / r ;
37453: LD_ADDR_VAR 0 8
37457: PUSH
37458: LD_VAR 0 8
37462: PUSH
37463: LD_VAR 0 7
37467: DIVREAL
37468: ST_TO_ADDR
// if time < 0 then
37469: LD_VAR 0 8
37473: PUSH
37474: LD_INT 0
37476: LESS
37477: IFFALSE 37494
// time := time * - 1 ;
37479: LD_ADDR_VAR 0 8
37483: PUSH
37484: LD_VAR 0 8
37488: PUSH
37489: LD_INT 1
37491: NEG
37492: MUL
37493: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37494: LD_VAR 0 8
37498: PUSH
37499: LD_INT 35
37501: PPUSH
37502: LD_INT 875
37504: PPUSH
37505: CALL_OW 12
37509: PLUS
37510: PPUSH
37511: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37515: LD_INT 1
37517: PPUSH
37518: LD_INT 5
37520: PPUSH
37521: CALL_OW 12
37525: PPUSH
37526: LD_VAR 0 1
37530: PPUSH
37531: LD_INT 1
37533: PPUSH
37534: CALL_OW 55
// end ;
37538: GO 37351
// end ;
37540: LD_VAR 0 5
37544: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37545: LD_INT 0
37547: PPUSH
37548: PPUSH
37549: PPUSH
37550: PPUSH
37551: PPUSH
37552: PPUSH
37553: PPUSH
37554: PPUSH
// if not turrets or not factories then
37555: LD_VAR 0 1
37559: NOT
37560: PUSH
37561: LD_VAR 0 2
37565: NOT
37566: OR
37567: IFFALSE 37571
// exit ;
37569: GO 37878
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37571: LD_ADDR_VAR 0 10
37575: PUSH
37576: LD_INT 5
37578: PUSH
37579: LD_INT 6
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 2
37588: PUSH
37589: LD_INT 4
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 3
37598: PUSH
37599: LD_INT 5
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 24
37613: PUSH
37614: LD_INT 25
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 23
37623: PUSH
37624: LD_INT 27
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 42
37637: PUSH
37638: LD_INT 43
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 44
37647: PUSH
37648: LD_INT 46
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 45
37657: PUSH
37658: LD_INT 47
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: LIST
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: LIST
37674: ST_TO_ADDR
// result := [ ] ;
37675: LD_ADDR_VAR 0 3
37679: PUSH
37680: EMPTY
37681: ST_TO_ADDR
// for i in turrets do
37682: LD_ADDR_VAR 0 4
37686: PUSH
37687: LD_VAR 0 1
37691: PUSH
37692: FOR_IN
37693: IFFALSE 37876
// begin nat := GetNation ( i ) ;
37695: LD_ADDR_VAR 0 7
37699: PUSH
37700: LD_VAR 0 4
37704: PPUSH
37705: CALL_OW 248
37709: ST_TO_ADDR
// weapon := 0 ;
37710: LD_ADDR_VAR 0 8
37714: PUSH
37715: LD_INT 0
37717: ST_TO_ADDR
// if not nat then
37718: LD_VAR 0 7
37722: NOT
37723: IFFALSE 37727
// continue ;
37725: GO 37692
// for j in list [ nat ] do
37727: LD_ADDR_VAR 0 5
37731: PUSH
37732: LD_VAR 0 10
37736: PUSH
37737: LD_VAR 0 7
37741: ARRAY
37742: PUSH
37743: FOR_IN
37744: IFFALSE 37785
// if GetBWeapon ( i ) = j [ 1 ] then
37746: LD_VAR 0 4
37750: PPUSH
37751: CALL_OW 269
37755: PUSH
37756: LD_VAR 0 5
37760: PUSH
37761: LD_INT 1
37763: ARRAY
37764: EQUAL
37765: IFFALSE 37783
// begin weapon := j [ 2 ] ;
37767: LD_ADDR_VAR 0 8
37771: PUSH
37772: LD_VAR 0 5
37776: PUSH
37777: LD_INT 2
37779: ARRAY
37780: ST_TO_ADDR
// break ;
37781: GO 37785
// end ;
37783: GO 37743
37785: POP
37786: POP
// if not weapon then
37787: LD_VAR 0 8
37791: NOT
37792: IFFALSE 37796
// continue ;
37794: GO 37692
// for k in factories do
37796: LD_ADDR_VAR 0 6
37800: PUSH
37801: LD_VAR 0 2
37805: PUSH
37806: FOR_IN
37807: IFFALSE 37872
// begin weapons := AvailableWeaponList ( k ) ;
37809: LD_ADDR_VAR 0 9
37813: PUSH
37814: LD_VAR 0 6
37818: PPUSH
37819: CALL_OW 478
37823: ST_TO_ADDR
// if not weapons then
37824: LD_VAR 0 9
37828: NOT
37829: IFFALSE 37833
// continue ;
37831: GO 37806
// if weapon in weapons then
37833: LD_VAR 0 8
37837: PUSH
37838: LD_VAR 0 9
37842: IN
37843: IFFALSE 37870
// begin result := [ i , weapon ] ;
37845: LD_ADDR_VAR 0 3
37849: PUSH
37850: LD_VAR 0 4
37854: PUSH
37855: LD_VAR 0 8
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: ST_TO_ADDR
// exit ;
37864: POP
37865: POP
37866: POP
37867: POP
37868: GO 37878
// end ; end ;
37870: GO 37806
37872: POP
37873: POP
// end ;
37874: GO 37692
37876: POP
37877: POP
// end ;
37878: LD_VAR 0 3
37882: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37883: LD_INT 0
37885: PPUSH
// if not side or side > 8 then
37886: LD_VAR 0 3
37890: NOT
37891: PUSH
37892: LD_VAR 0 3
37896: PUSH
37897: LD_INT 8
37899: GREATER
37900: OR
37901: IFFALSE 37905
// exit ;
37903: GO 37964
// if not range then
37905: LD_VAR 0 4
37909: NOT
37910: IFFALSE 37921
// range := - 12 ;
37912: LD_ADDR_VAR 0 4
37916: PUSH
37917: LD_INT 12
37919: NEG
37920: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37921: LD_VAR 0 1
37925: PPUSH
37926: LD_VAR 0 2
37930: PPUSH
37931: LD_VAR 0 3
37935: PPUSH
37936: LD_VAR 0 4
37940: PPUSH
37941: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37945: LD_VAR 0 1
37949: PPUSH
37950: LD_VAR 0 2
37954: PPUSH
37955: LD_VAR 0 3
37959: PPUSH
37960: CALL_OW 331
// end ;
37964: LD_VAR 0 5
37968: RET
// export function Video ( mode ) ; begin
37969: LD_INT 0
37971: PPUSH
// ingame_video = mode ;
37972: LD_ADDR_OWVAR 52
37976: PUSH
37977: LD_VAR 0 1
37981: ST_TO_ADDR
// interface_hidden = mode ;
37982: LD_ADDR_OWVAR 54
37986: PUSH
37987: LD_VAR 0 1
37991: ST_TO_ADDR
// end ;
37992: LD_VAR 0 2
37996: RET
// export function Join ( array , element ) ; begin
37997: LD_INT 0
37999: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38000: LD_ADDR_VAR 0 3
38004: PUSH
38005: LD_VAR 0 1
38009: PPUSH
38010: LD_VAR 0 1
38014: PUSH
38015: LD_INT 1
38017: PLUS
38018: PPUSH
38019: LD_VAR 0 2
38023: PPUSH
38024: CALL_OW 1
38028: ST_TO_ADDR
// end ;
38029: LD_VAR 0 3
38033: RET
// export function JoinUnion ( array , element ) ; begin
38034: LD_INT 0
38036: PPUSH
// result := array union element ;
38037: LD_ADDR_VAR 0 3
38041: PUSH
38042: LD_VAR 0 1
38046: PUSH
38047: LD_VAR 0 2
38051: UNION
38052: ST_TO_ADDR
// end ;
38053: LD_VAR 0 3
38057: RET
// export function GetBehemoths ( side ) ; begin
38058: LD_INT 0
38060: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
38061: LD_ADDR_VAR 0 2
38065: PUSH
38066: LD_INT 22
38068: PUSH
38069: LD_VAR 0 1
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 31
38080: PUSH
38081: LD_INT 25
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PPUSH
38092: CALL_OW 69
38096: ST_TO_ADDR
// end ;
38097: LD_VAR 0 2
38101: RET
// export function Shuffle ( array ) ; var i , index ; begin
38102: LD_INT 0
38104: PPUSH
38105: PPUSH
38106: PPUSH
// result := [ ] ;
38107: LD_ADDR_VAR 0 2
38111: PUSH
38112: EMPTY
38113: ST_TO_ADDR
// if not array then
38114: LD_VAR 0 1
38118: NOT
38119: IFFALSE 38123
// exit ;
38121: GO 38222
// Randomize ;
38123: CALL_OW 10
// for i = array downto 1 do
38127: LD_ADDR_VAR 0 3
38131: PUSH
38132: DOUBLE
38133: LD_VAR 0 1
38137: INC
38138: ST_TO_ADDR
38139: LD_INT 1
38141: PUSH
38142: FOR_DOWNTO
38143: IFFALSE 38220
// begin index := rand ( 1 , array ) ;
38145: LD_ADDR_VAR 0 4
38149: PUSH
38150: LD_INT 1
38152: PPUSH
38153: LD_VAR 0 1
38157: PPUSH
38158: CALL_OW 12
38162: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38163: LD_ADDR_VAR 0 2
38167: PUSH
38168: LD_VAR 0 2
38172: PPUSH
38173: LD_VAR 0 2
38177: PUSH
38178: LD_INT 1
38180: PLUS
38181: PPUSH
38182: LD_VAR 0 1
38186: PUSH
38187: LD_VAR 0 4
38191: ARRAY
38192: PPUSH
38193: CALL_OW 2
38197: ST_TO_ADDR
// array := Delete ( array , index ) ;
38198: LD_ADDR_VAR 0 1
38202: PUSH
38203: LD_VAR 0 1
38207: PPUSH
38208: LD_VAR 0 4
38212: PPUSH
38213: CALL_OW 3
38217: ST_TO_ADDR
// end ;
38218: GO 38142
38220: POP
38221: POP
// end ;
38222: LD_VAR 0 2
38226: RET
// export function GetBaseMaterials ( base ) ; begin
38227: LD_INT 0
38229: PPUSH
// result := [ 0 , 0 , 0 ] ;
38230: LD_ADDR_VAR 0 2
38234: PUSH
38235: LD_INT 0
38237: PUSH
38238: LD_INT 0
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: LIST
38248: ST_TO_ADDR
// if not base then
38249: LD_VAR 0 1
38253: NOT
38254: IFFALSE 38258
// exit ;
38256: GO 38307
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38258: LD_ADDR_VAR 0 2
38262: PUSH
38263: LD_VAR 0 1
38267: PPUSH
38268: LD_INT 1
38270: PPUSH
38271: CALL_OW 275
38275: PUSH
38276: LD_VAR 0 1
38280: PPUSH
38281: LD_INT 2
38283: PPUSH
38284: CALL_OW 275
38288: PUSH
38289: LD_VAR 0 1
38293: PPUSH
38294: LD_INT 3
38296: PPUSH
38297: CALL_OW 275
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: LIST
38306: ST_TO_ADDR
// end ;
38307: LD_VAR 0 2
38311: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38312: LD_INT 0
38314: PPUSH
38315: PPUSH
// result := array ;
38316: LD_ADDR_VAR 0 3
38320: PUSH
38321: LD_VAR 0 1
38325: ST_TO_ADDR
// if size > 0 then
38326: LD_VAR 0 2
38330: PUSH
38331: LD_INT 0
38333: GREATER
38334: IFFALSE 38380
// for i := array downto size do
38336: LD_ADDR_VAR 0 4
38340: PUSH
38341: DOUBLE
38342: LD_VAR 0 1
38346: INC
38347: ST_TO_ADDR
38348: LD_VAR 0 2
38352: PUSH
38353: FOR_DOWNTO
38354: IFFALSE 38378
// result := Delete ( result , result ) ;
38356: LD_ADDR_VAR 0 3
38360: PUSH
38361: LD_VAR 0 3
38365: PPUSH
38366: LD_VAR 0 3
38370: PPUSH
38371: CALL_OW 3
38375: ST_TO_ADDR
38376: GO 38353
38378: POP
38379: POP
// end ;
38380: LD_VAR 0 3
38384: RET
// export function ComExit ( unit ) ; var tmp ; begin
38385: LD_INT 0
38387: PPUSH
38388: PPUSH
// if not IsInUnit ( unit ) then
38389: LD_VAR 0 1
38393: PPUSH
38394: CALL_OW 310
38398: NOT
38399: IFFALSE 38403
// exit ;
38401: GO 38463
// tmp := IsInUnit ( unit ) ;
38403: LD_ADDR_VAR 0 3
38407: PUSH
38408: LD_VAR 0 1
38412: PPUSH
38413: CALL_OW 310
38417: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38418: LD_VAR 0 3
38422: PPUSH
38423: CALL_OW 247
38427: PUSH
38428: LD_INT 2
38430: EQUAL
38431: IFFALSE 38444
// ComExitVehicle ( unit ) else
38433: LD_VAR 0 1
38437: PPUSH
38438: CALL_OW 121
38442: GO 38453
// ComExitBuilding ( unit ) ;
38444: LD_VAR 0 1
38448: PPUSH
38449: CALL_OW 122
// result := tmp ;
38453: LD_ADDR_VAR 0 2
38457: PUSH
38458: LD_VAR 0 3
38462: ST_TO_ADDR
// end ;
38463: LD_VAR 0 2
38467: RET
// export function ComExitAll ( units ) ; var i ; begin
38468: LD_INT 0
38470: PPUSH
38471: PPUSH
// if not units then
38472: LD_VAR 0 1
38476: NOT
38477: IFFALSE 38481
// exit ;
38479: GO 38507
// for i in units do
38481: LD_ADDR_VAR 0 3
38485: PUSH
38486: LD_VAR 0 1
38490: PUSH
38491: FOR_IN
38492: IFFALSE 38505
// ComExit ( i ) ;
38494: LD_VAR 0 3
38498: PPUSH
38499: CALL 38385 0 1
38503: GO 38491
38505: POP
38506: POP
// end ;
38507: LD_VAR 0 2
38511: RET
// export function ResetHc ; begin
38512: LD_INT 0
38514: PPUSH
// InitHc ;
38515: CALL_OW 19
// hc_importance := 0 ;
38519: LD_ADDR_OWVAR 32
38523: PUSH
38524: LD_INT 0
38526: ST_TO_ADDR
// end ;
38527: LD_VAR 0 1
38531: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38532: LD_INT 0
38534: PPUSH
38535: PPUSH
38536: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38537: LD_ADDR_VAR 0 6
38541: PUSH
38542: LD_VAR 0 1
38546: PUSH
38547: LD_VAR 0 3
38551: PLUS
38552: PUSH
38553: LD_INT 2
38555: DIV
38556: ST_TO_ADDR
// if _x < 0 then
38557: LD_VAR 0 6
38561: PUSH
38562: LD_INT 0
38564: LESS
38565: IFFALSE 38582
// _x := _x * - 1 ;
38567: LD_ADDR_VAR 0 6
38571: PUSH
38572: LD_VAR 0 6
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: MUL
38581: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38582: LD_ADDR_VAR 0 7
38586: PUSH
38587: LD_VAR 0 2
38591: PUSH
38592: LD_VAR 0 4
38596: PLUS
38597: PUSH
38598: LD_INT 2
38600: DIV
38601: ST_TO_ADDR
// if _y < 0 then
38602: LD_VAR 0 7
38606: PUSH
38607: LD_INT 0
38609: LESS
38610: IFFALSE 38627
// _y := _y * - 1 ;
38612: LD_ADDR_VAR 0 7
38616: PUSH
38617: LD_VAR 0 7
38621: PUSH
38622: LD_INT 1
38624: NEG
38625: MUL
38626: ST_TO_ADDR
// result := [ _x , _y ] ;
38627: LD_ADDR_VAR 0 5
38631: PUSH
38632: LD_VAR 0 6
38636: PUSH
38637: LD_VAR 0 7
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: ST_TO_ADDR
// end ;
38646: LD_VAR 0 5
38650: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38651: LD_INT 0
38653: PPUSH
38654: PPUSH
38655: PPUSH
38656: PPUSH
// task := GetTaskList ( unit ) ;
38657: LD_ADDR_VAR 0 7
38661: PUSH
38662: LD_VAR 0 1
38666: PPUSH
38667: CALL_OW 437
38671: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38672: LD_VAR 0 7
38676: NOT
38677: PUSH
38678: LD_VAR 0 1
38682: PPUSH
38683: LD_VAR 0 2
38687: PPUSH
38688: CALL_OW 308
38692: NOT
38693: AND
38694: IFFALSE 38698
// exit ;
38696: GO 38816
// if IsInArea ( unit , area ) then
38698: LD_VAR 0 1
38702: PPUSH
38703: LD_VAR 0 2
38707: PPUSH
38708: CALL_OW 308
38712: IFFALSE 38730
// begin ComMoveToArea ( unit , goAway ) ;
38714: LD_VAR 0 1
38718: PPUSH
38719: LD_VAR 0 3
38723: PPUSH
38724: CALL_OW 113
// exit ;
38728: GO 38816
// end ; if task [ 1 ] [ 1 ] <> M then
38730: LD_VAR 0 7
38734: PUSH
38735: LD_INT 1
38737: ARRAY
38738: PUSH
38739: LD_INT 1
38741: ARRAY
38742: PUSH
38743: LD_STRING M
38745: NONEQUAL
38746: IFFALSE 38750
// exit ;
38748: GO 38816
// x := task [ 1 ] [ 2 ] ;
38750: LD_ADDR_VAR 0 5
38754: PUSH
38755: LD_VAR 0 7
38759: PUSH
38760: LD_INT 1
38762: ARRAY
38763: PUSH
38764: LD_INT 2
38766: ARRAY
38767: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38768: LD_ADDR_VAR 0 6
38772: PUSH
38773: LD_VAR 0 7
38777: PUSH
38778: LD_INT 1
38780: ARRAY
38781: PUSH
38782: LD_INT 3
38784: ARRAY
38785: ST_TO_ADDR
// if InArea ( x , y , area ) then
38786: LD_VAR 0 5
38790: PPUSH
38791: LD_VAR 0 6
38795: PPUSH
38796: LD_VAR 0 2
38800: PPUSH
38801: CALL_OW 309
38805: IFFALSE 38816
// ComStop ( unit ) ;
38807: LD_VAR 0 1
38811: PPUSH
38812: CALL_OW 141
// end ;
38816: LD_VAR 0 4
38820: RET
// export function Abs ( value ) ; begin
38821: LD_INT 0
38823: PPUSH
// result := value ;
38824: LD_ADDR_VAR 0 2
38828: PUSH
38829: LD_VAR 0 1
38833: ST_TO_ADDR
// if value < 0 then
38834: LD_VAR 0 1
38838: PUSH
38839: LD_INT 0
38841: LESS
38842: IFFALSE 38859
// result := value * - 1 ;
38844: LD_ADDR_VAR 0 2
38848: PUSH
38849: LD_VAR 0 1
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: MUL
38858: ST_TO_ADDR
// end ;
38859: LD_VAR 0 2
38863: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38864: LD_INT 0
38866: PPUSH
38867: PPUSH
38868: PPUSH
38869: PPUSH
38870: PPUSH
38871: PPUSH
38872: PPUSH
38873: PPUSH
// if not unit or not building then
38874: LD_VAR 0 1
38878: NOT
38879: PUSH
38880: LD_VAR 0 2
38884: NOT
38885: OR
38886: IFFALSE 38890
// exit ;
38888: GO 39116
// x := GetX ( building ) ;
38890: LD_ADDR_VAR 0 4
38894: PUSH
38895: LD_VAR 0 2
38899: PPUSH
38900: CALL_OW 250
38904: ST_TO_ADDR
// y := GetY ( building ) ;
38905: LD_ADDR_VAR 0 6
38909: PUSH
38910: LD_VAR 0 2
38914: PPUSH
38915: CALL_OW 251
38919: ST_TO_ADDR
// d := GetDir ( building ) ;
38920: LD_ADDR_VAR 0 8
38924: PUSH
38925: LD_VAR 0 2
38929: PPUSH
38930: CALL_OW 254
38934: ST_TO_ADDR
// r := 4 ;
38935: LD_ADDR_VAR 0 9
38939: PUSH
38940: LD_INT 4
38942: ST_TO_ADDR
// for i := 1 to 5 do
38943: LD_ADDR_VAR 0 10
38947: PUSH
38948: DOUBLE
38949: LD_INT 1
38951: DEC
38952: ST_TO_ADDR
38953: LD_INT 5
38955: PUSH
38956: FOR_TO
38957: IFFALSE 39114
// begin _x := ShiftX ( x , d , r + i ) ;
38959: LD_ADDR_VAR 0 5
38963: PUSH
38964: LD_VAR 0 4
38968: PPUSH
38969: LD_VAR 0 8
38973: PPUSH
38974: LD_VAR 0 9
38978: PUSH
38979: LD_VAR 0 10
38983: PLUS
38984: PPUSH
38985: CALL_OW 272
38989: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38990: LD_ADDR_VAR 0 7
38994: PUSH
38995: LD_VAR 0 6
38999: PPUSH
39000: LD_VAR 0 8
39004: PPUSH
39005: LD_VAR 0 9
39009: PUSH
39010: LD_VAR 0 10
39014: PLUS
39015: PPUSH
39016: CALL_OW 273
39020: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39021: LD_VAR 0 5
39025: PPUSH
39026: LD_VAR 0 7
39030: PPUSH
39031: CALL_OW 488
39035: PUSH
39036: LD_VAR 0 5
39040: PPUSH
39041: LD_VAR 0 7
39045: PPUSH
39046: CALL_OW 428
39050: PPUSH
39051: CALL_OW 247
39055: PUSH
39056: LD_INT 3
39058: PUSH
39059: LD_INT 2
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: IN
39066: NOT
39067: AND
39068: IFFALSE 39112
// begin ComMoveXY ( unit , _x , _y ) ;
39070: LD_VAR 0 1
39074: PPUSH
39075: LD_VAR 0 5
39079: PPUSH
39080: LD_VAR 0 7
39084: PPUSH
39085: CALL_OW 111
// result := [ _x , _y ] ;
39089: LD_ADDR_VAR 0 3
39093: PUSH
39094: LD_VAR 0 5
39098: PUSH
39099: LD_VAR 0 7
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: ST_TO_ADDR
// exit ;
39108: POP
39109: POP
39110: GO 39116
// end ; end ;
39112: GO 38956
39114: POP
39115: POP
// end ;
39116: LD_VAR 0 3
39120: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39121: LD_INT 0
39123: PPUSH
39124: PPUSH
39125: PPUSH
// result := 0 ;
39126: LD_ADDR_VAR 0 3
39130: PUSH
39131: LD_INT 0
39133: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39134: LD_VAR 0 1
39138: PUSH
39139: LD_INT 0
39141: LESS
39142: PUSH
39143: LD_VAR 0 1
39147: PUSH
39148: LD_INT 8
39150: GREATER
39151: OR
39152: PUSH
39153: LD_VAR 0 2
39157: PUSH
39158: LD_INT 0
39160: LESS
39161: OR
39162: PUSH
39163: LD_VAR 0 2
39167: PUSH
39168: LD_INT 8
39170: GREATER
39171: OR
39172: IFFALSE 39176
// exit ;
39174: GO 39251
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39176: LD_ADDR_VAR 0 4
39180: PUSH
39181: LD_INT 22
39183: PUSH
39184: LD_VAR 0 2
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PPUSH
39193: CALL_OW 69
39197: PUSH
39198: FOR_IN
39199: IFFALSE 39249
// begin un := UnitShoot ( i ) ;
39201: LD_ADDR_VAR 0 5
39205: PUSH
39206: LD_VAR 0 4
39210: PPUSH
39211: CALL_OW 504
39215: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39216: LD_VAR 0 5
39220: PPUSH
39221: CALL_OW 255
39225: PUSH
39226: LD_VAR 0 1
39230: EQUAL
39231: IFFALSE 39247
// begin result := un ;
39233: LD_ADDR_VAR 0 3
39237: PUSH
39238: LD_VAR 0 5
39242: ST_TO_ADDR
// exit ;
39243: POP
39244: POP
39245: GO 39251
// end ; end ;
39247: GO 39198
39249: POP
39250: POP
// end ;
39251: LD_VAR 0 3
39255: RET
// export function GetCargoBay ( units ) ; begin
39256: LD_INT 0
39258: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39259: LD_ADDR_VAR 0 2
39263: PUSH
39264: LD_VAR 0 1
39268: PPUSH
39269: LD_INT 2
39271: PUSH
39272: LD_INT 34
39274: PUSH
39275: LD_INT 12
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 34
39284: PUSH
39285: LD_INT 51
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 34
39294: PUSH
39295: LD_INT 32
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 34
39304: PUSH
39305: LD_EXP 4
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: PPUSH
39321: CALL_OW 72
39325: ST_TO_ADDR
// end ;
39326: LD_VAR 0 2
39330: RET
// export function Negate ( value ) ; begin
39331: LD_INT 0
39333: PPUSH
// result := not value ;
39334: LD_ADDR_VAR 0 2
39338: PUSH
39339: LD_VAR 0 1
39343: NOT
39344: ST_TO_ADDR
// end ;
39345: LD_VAR 0 2
39349: RET
// export function Inc ( value ) ; begin
39350: LD_INT 0
39352: PPUSH
// result := value + 1 ;
39353: LD_ADDR_VAR 0 2
39357: PUSH
39358: LD_VAR 0 1
39362: PUSH
39363: LD_INT 1
39365: PLUS
39366: ST_TO_ADDR
// end ;
39367: LD_VAR 0 2
39371: RET
// export function Dec ( value ) ; begin
39372: LD_INT 0
39374: PPUSH
// result := value - 1 ;
39375: LD_ADDR_VAR 0 2
39379: PUSH
39380: LD_VAR 0 1
39384: PUSH
39385: LD_INT 1
39387: MINUS
39388: ST_TO_ADDR
// end ;
39389: LD_VAR 0 2
39393: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39394: LD_INT 0
39396: PPUSH
39397: PPUSH
39398: PPUSH
39399: PPUSH
39400: PPUSH
39401: PPUSH
39402: PPUSH
39403: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39404: LD_VAR 0 1
39408: PPUSH
39409: LD_VAR 0 2
39413: PPUSH
39414: CALL_OW 488
39418: NOT
39419: PUSH
39420: LD_VAR 0 3
39424: PPUSH
39425: LD_VAR 0 4
39429: PPUSH
39430: CALL_OW 488
39434: NOT
39435: OR
39436: IFFALSE 39449
// begin result := - 1 ;
39438: LD_ADDR_VAR 0 5
39442: PUSH
39443: LD_INT 1
39445: NEG
39446: ST_TO_ADDR
// exit ;
39447: GO 39684
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39449: LD_ADDR_VAR 0 12
39453: PUSH
39454: LD_VAR 0 1
39458: PPUSH
39459: LD_VAR 0 2
39463: PPUSH
39464: LD_VAR 0 3
39468: PPUSH
39469: LD_VAR 0 4
39473: PPUSH
39474: CALL 38532 0 4
39478: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39479: LD_ADDR_VAR 0 11
39483: PUSH
39484: LD_VAR 0 1
39488: PPUSH
39489: LD_VAR 0 2
39493: PPUSH
39494: LD_VAR 0 12
39498: PUSH
39499: LD_INT 1
39501: ARRAY
39502: PPUSH
39503: LD_VAR 0 12
39507: PUSH
39508: LD_INT 2
39510: ARRAY
39511: PPUSH
39512: CALL_OW 298
39516: ST_TO_ADDR
// distance := 9999 ;
39517: LD_ADDR_VAR 0 10
39521: PUSH
39522: LD_INT 9999
39524: ST_TO_ADDR
// for i := 0 to 5 do
39525: LD_ADDR_VAR 0 6
39529: PUSH
39530: DOUBLE
39531: LD_INT 0
39533: DEC
39534: ST_TO_ADDR
39535: LD_INT 5
39537: PUSH
39538: FOR_TO
39539: IFFALSE 39682
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39541: LD_ADDR_VAR 0 7
39545: PUSH
39546: LD_VAR 0 1
39550: PPUSH
39551: LD_VAR 0 6
39555: PPUSH
39556: LD_VAR 0 11
39560: PPUSH
39561: CALL_OW 272
39565: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39566: LD_ADDR_VAR 0 8
39570: PUSH
39571: LD_VAR 0 2
39575: PPUSH
39576: LD_VAR 0 6
39580: PPUSH
39581: LD_VAR 0 11
39585: PPUSH
39586: CALL_OW 273
39590: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39591: LD_VAR 0 7
39595: PPUSH
39596: LD_VAR 0 8
39600: PPUSH
39601: CALL_OW 488
39605: NOT
39606: IFFALSE 39610
// continue ;
39608: GO 39538
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39610: LD_ADDR_VAR 0 9
39614: PUSH
39615: LD_VAR 0 12
39619: PUSH
39620: LD_INT 1
39622: ARRAY
39623: PPUSH
39624: LD_VAR 0 12
39628: PUSH
39629: LD_INT 2
39631: ARRAY
39632: PPUSH
39633: LD_VAR 0 7
39637: PPUSH
39638: LD_VAR 0 8
39642: PPUSH
39643: CALL_OW 298
39647: ST_TO_ADDR
// if tmp < distance then
39648: LD_VAR 0 9
39652: PUSH
39653: LD_VAR 0 10
39657: LESS
39658: IFFALSE 39680
// begin result := i ;
39660: LD_ADDR_VAR 0 5
39664: PUSH
39665: LD_VAR 0 6
39669: ST_TO_ADDR
// distance := tmp ;
39670: LD_ADDR_VAR 0 10
39674: PUSH
39675: LD_VAR 0 9
39679: ST_TO_ADDR
// end ; end ;
39680: GO 39538
39682: POP
39683: POP
// end ;
39684: LD_VAR 0 5
39688: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39689: LD_INT 0
39691: PPUSH
39692: PPUSH
// if not driver or not IsInUnit ( driver ) then
39693: LD_VAR 0 1
39697: NOT
39698: PUSH
39699: LD_VAR 0 1
39703: PPUSH
39704: CALL_OW 310
39708: NOT
39709: OR
39710: IFFALSE 39714
// exit ;
39712: GO 39804
// vehicle := IsInUnit ( driver ) ;
39714: LD_ADDR_VAR 0 3
39718: PUSH
39719: LD_VAR 0 1
39723: PPUSH
39724: CALL_OW 310
39728: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39729: LD_VAR 0 1
39733: PPUSH
39734: LD_STRING \
39736: PUSH
39737: LD_INT 0
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: LD_INT 0
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: PUSH
39764: LD_STRING E
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: LD_INT 0
39772: PUSH
39773: LD_VAR 0 3
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: LD_INT 0
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PPUSH
39800: CALL_OW 446
// end ;
39804: LD_VAR 0 2
39808: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39809: LD_INT 0
39811: PPUSH
39812: PPUSH
// if not driver or not IsInUnit ( driver ) then
39813: LD_VAR 0 1
39817: NOT
39818: PUSH
39819: LD_VAR 0 1
39823: PPUSH
39824: CALL_OW 310
39828: NOT
39829: OR
39830: IFFALSE 39834
// exit ;
39832: GO 39924
// vehicle := IsInUnit ( driver ) ;
39834: LD_ADDR_VAR 0 3
39838: PUSH
39839: LD_VAR 0 1
39843: PPUSH
39844: CALL_OW 310
39848: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39849: LD_VAR 0 1
39853: PPUSH
39854: LD_STRING \
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: PUSH
39884: LD_STRING E
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: LD_VAR 0 3
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PPUSH
39920: CALL_OW 447
// end ;
39924: LD_VAR 0 2
39928: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39929: LD_INT 0
39931: PPUSH
39932: PPUSH
39933: PPUSH
// tmp := [ ] ;
39934: LD_ADDR_VAR 0 5
39938: PUSH
39939: EMPTY
39940: ST_TO_ADDR
// for i in units do
39941: LD_ADDR_VAR 0 4
39945: PUSH
39946: LD_VAR 0 1
39950: PUSH
39951: FOR_IN
39952: IFFALSE 39990
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39954: LD_ADDR_VAR 0 5
39958: PUSH
39959: LD_VAR 0 5
39963: PPUSH
39964: LD_VAR 0 5
39968: PUSH
39969: LD_INT 1
39971: PLUS
39972: PPUSH
39973: LD_VAR 0 4
39977: PPUSH
39978: CALL_OW 256
39982: PPUSH
39983: CALL_OW 2
39987: ST_TO_ADDR
39988: GO 39951
39990: POP
39991: POP
// if not tmp then
39992: LD_VAR 0 5
39996: NOT
39997: IFFALSE 40001
// exit ;
39999: GO 40049
// if asc then
40001: LD_VAR 0 2
40005: IFFALSE 40029
// result := SortListByListAsc ( units , tmp ) else
40007: LD_ADDR_VAR 0 3
40011: PUSH
40012: LD_VAR 0 1
40016: PPUSH
40017: LD_VAR 0 5
40021: PPUSH
40022: CALL_OW 76
40026: ST_TO_ADDR
40027: GO 40049
// result := SortListByListDesc ( units , tmp ) ;
40029: LD_ADDR_VAR 0 3
40033: PUSH
40034: LD_VAR 0 1
40038: PPUSH
40039: LD_VAR 0 5
40043: PPUSH
40044: CALL_OW 77
40048: ST_TO_ADDR
// end ;
40049: LD_VAR 0 3
40053: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40054: LD_INT 0
40056: PPUSH
40057: PPUSH
// task := GetTaskList ( mech ) ;
40058: LD_ADDR_VAR 0 4
40062: PUSH
40063: LD_VAR 0 1
40067: PPUSH
40068: CALL_OW 437
40072: ST_TO_ADDR
// if not task then
40073: LD_VAR 0 4
40077: NOT
40078: IFFALSE 40082
// exit ;
40080: GO 40124
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40082: LD_ADDR_VAR 0 3
40086: PUSH
40087: LD_VAR 0 4
40091: PUSH
40092: LD_INT 1
40094: ARRAY
40095: PUSH
40096: LD_INT 1
40098: ARRAY
40099: PUSH
40100: LD_STRING r
40102: EQUAL
40103: PUSH
40104: LD_VAR 0 4
40108: PUSH
40109: LD_INT 1
40111: ARRAY
40112: PUSH
40113: LD_INT 4
40115: ARRAY
40116: PUSH
40117: LD_VAR 0 2
40121: EQUAL
40122: AND
40123: ST_TO_ADDR
// end ;
40124: LD_VAR 0 3
40128: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40129: LD_INT 0
40131: PPUSH
// SetDir ( unit , d ) ;
40132: LD_VAR 0 1
40136: PPUSH
40137: LD_VAR 0 4
40141: PPUSH
40142: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40146: LD_VAR 0 1
40150: PPUSH
40151: LD_VAR 0 2
40155: PPUSH
40156: LD_VAR 0 3
40160: PPUSH
40161: LD_VAR 0 5
40165: PPUSH
40166: CALL_OW 48
// end ;
40170: LD_VAR 0 6
40174: RET
// export function ToNaturalNumber ( number ) ; begin
40175: LD_INT 0
40177: PPUSH
// result := number div 1 ;
40178: LD_ADDR_VAR 0 2
40182: PUSH
40183: LD_VAR 0 1
40187: PUSH
40188: LD_INT 1
40190: DIV
40191: ST_TO_ADDR
// if number < 0 then
40192: LD_VAR 0 1
40196: PUSH
40197: LD_INT 0
40199: LESS
40200: IFFALSE 40210
// result := 0 ;
40202: LD_ADDR_VAR 0 2
40206: PUSH
40207: LD_INT 0
40209: ST_TO_ADDR
// end ;
40210: LD_VAR 0 2
40214: RET
// export function SortByClass ( units , class ) ; var un ; begin
40215: LD_INT 0
40217: PPUSH
40218: PPUSH
// if not units or not class then
40219: LD_VAR 0 1
40223: NOT
40224: PUSH
40225: LD_VAR 0 2
40229: NOT
40230: OR
40231: IFFALSE 40235
// exit ;
40233: GO 40330
// result := [ ] ;
40235: LD_ADDR_VAR 0 3
40239: PUSH
40240: EMPTY
40241: ST_TO_ADDR
// for un in units do
40242: LD_ADDR_VAR 0 4
40246: PUSH
40247: LD_VAR 0 1
40251: PUSH
40252: FOR_IN
40253: IFFALSE 40328
// if GetClass ( un ) = class then
40255: LD_VAR 0 4
40259: PPUSH
40260: CALL_OW 257
40264: PUSH
40265: LD_VAR 0 2
40269: EQUAL
40270: IFFALSE 40297
// result := Insert ( result , 1 , un ) else
40272: LD_ADDR_VAR 0 3
40276: PUSH
40277: LD_VAR 0 3
40281: PPUSH
40282: LD_INT 1
40284: PPUSH
40285: LD_VAR 0 4
40289: PPUSH
40290: CALL_OW 2
40294: ST_TO_ADDR
40295: GO 40326
// result := Replace ( result , result + 1 , un ) ;
40297: LD_ADDR_VAR 0 3
40301: PUSH
40302: LD_VAR 0 3
40306: PPUSH
40307: LD_VAR 0 3
40311: PUSH
40312: LD_INT 1
40314: PLUS
40315: PPUSH
40316: LD_VAR 0 4
40320: PPUSH
40321: CALL_OW 1
40325: ST_TO_ADDR
40326: GO 40252
40328: POP
40329: POP
// end ;
40330: LD_VAR 0 3
40334: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40335: LD_INT 0
40337: PPUSH
40338: PPUSH
40339: PPUSH
40340: PPUSH
40341: PPUSH
40342: PPUSH
40343: PPUSH
// result := [ ] ;
40344: LD_ADDR_VAR 0 4
40348: PUSH
40349: EMPTY
40350: ST_TO_ADDR
// if x - r < 0 then
40351: LD_VAR 0 1
40355: PUSH
40356: LD_VAR 0 3
40360: MINUS
40361: PUSH
40362: LD_INT 0
40364: LESS
40365: IFFALSE 40377
// min_x := 0 else
40367: LD_ADDR_VAR 0 8
40371: PUSH
40372: LD_INT 0
40374: ST_TO_ADDR
40375: GO 40393
// min_x := x - r ;
40377: LD_ADDR_VAR 0 8
40381: PUSH
40382: LD_VAR 0 1
40386: PUSH
40387: LD_VAR 0 3
40391: MINUS
40392: ST_TO_ADDR
// if y - r < 0 then
40393: LD_VAR 0 2
40397: PUSH
40398: LD_VAR 0 3
40402: MINUS
40403: PUSH
40404: LD_INT 0
40406: LESS
40407: IFFALSE 40419
// min_y := 0 else
40409: LD_ADDR_VAR 0 7
40413: PUSH
40414: LD_INT 0
40416: ST_TO_ADDR
40417: GO 40435
// min_y := y - r ;
40419: LD_ADDR_VAR 0 7
40423: PUSH
40424: LD_VAR 0 2
40428: PUSH
40429: LD_VAR 0 3
40433: MINUS
40434: ST_TO_ADDR
// max_x := x + r ;
40435: LD_ADDR_VAR 0 9
40439: PUSH
40440: LD_VAR 0 1
40444: PUSH
40445: LD_VAR 0 3
40449: PLUS
40450: ST_TO_ADDR
// max_y := y + r ;
40451: LD_ADDR_VAR 0 10
40455: PUSH
40456: LD_VAR 0 2
40460: PUSH
40461: LD_VAR 0 3
40465: PLUS
40466: ST_TO_ADDR
// for _x = min_x to max_x do
40467: LD_ADDR_VAR 0 5
40471: PUSH
40472: DOUBLE
40473: LD_VAR 0 8
40477: DEC
40478: ST_TO_ADDR
40479: LD_VAR 0 9
40483: PUSH
40484: FOR_TO
40485: IFFALSE 40586
// for _y = min_y to max_y do
40487: LD_ADDR_VAR 0 6
40491: PUSH
40492: DOUBLE
40493: LD_VAR 0 7
40497: DEC
40498: ST_TO_ADDR
40499: LD_VAR 0 10
40503: PUSH
40504: FOR_TO
40505: IFFALSE 40582
// begin if not ValidHex ( _x , _y ) then
40507: LD_VAR 0 5
40511: PPUSH
40512: LD_VAR 0 6
40516: PPUSH
40517: CALL_OW 488
40521: NOT
40522: IFFALSE 40526
// continue ;
40524: GO 40504
// if GetResourceTypeXY ( _x , _y ) then
40526: LD_VAR 0 5
40530: PPUSH
40531: LD_VAR 0 6
40535: PPUSH
40536: CALL_OW 283
40540: IFFALSE 40580
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40542: LD_ADDR_VAR 0 4
40546: PUSH
40547: LD_VAR 0 4
40551: PPUSH
40552: LD_VAR 0 4
40556: PUSH
40557: LD_INT 1
40559: PLUS
40560: PPUSH
40561: LD_VAR 0 5
40565: PUSH
40566: LD_VAR 0 6
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PPUSH
40575: CALL_OW 1
40579: ST_TO_ADDR
// end ;
40580: GO 40504
40582: POP
40583: POP
40584: GO 40484
40586: POP
40587: POP
// end ;
40588: LD_VAR 0 4
40592: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40593: LD_INT 0
40595: PPUSH
40596: PPUSH
40597: PPUSH
40598: PPUSH
40599: PPUSH
40600: PPUSH
40601: PPUSH
40602: PPUSH
// if not units then
40603: LD_VAR 0 1
40607: NOT
40608: IFFALSE 40612
// exit ;
40610: GO 41037
// result := UnitFilter ( units , [ f_ok ] ) ;
40612: LD_ADDR_VAR 0 3
40616: PUSH
40617: LD_VAR 0 1
40621: PPUSH
40622: LD_INT 50
40624: PUSH
40625: EMPTY
40626: LIST
40627: PPUSH
40628: CALL_OW 72
40632: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40633: LD_ADDR_VAR 0 8
40637: PUSH
40638: LD_VAR 0 1
40642: PUSH
40643: LD_INT 1
40645: ARRAY
40646: PPUSH
40647: CALL_OW 255
40651: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
40652: LD_ADDR_VAR 0 10
40656: PUSH
40657: LD_INT 29
40659: PUSH
40660: LD_EXP 7
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: ST_TO_ADDR
// if not result then
40669: LD_VAR 0 3
40673: NOT
40674: IFFALSE 40678
// exit ;
40676: GO 41037
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40678: LD_ADDR_VAR 0 5
40682: PUSH
40683: LD_INT 81
40685: PUSH
40686: LD_VAR 0 8
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PPUSH
40695: CALL_OW 69
40699: ST_TO_ADDR
// for i in result do
40700: LD_ADDR_VAR 0 4
40704: PUSH
40705: LD_VAR 0 3
40709: PUSH
40710: FOR_IN
40711: IFFALSE 41035
// begin tag := GetTag ( i ) + 1 ;
40713: LD_ADDR_VAR 0 9
40717: PUSH
40718: LD_VAR 0 4
40722: PPUSH
40723: CALL_OW 110
40727: PUSH
40728: LD_INT 1
40730: PLUS
40731: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40732: LD_ADDR_VAR 0 7
40736: PUSH
40737: LD_VAR 0 4
40741: PPUSH
40742: CALL_OW 250
40746: PPUSH
40747: LD_VAR 0 4
40751: PPUSH
40752: CALL_OW 251
40756: PPUSH
40757: LD_INT 6
40759: PPUSH
40760: CALL 40335 0 3
40764: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40765: LD_VAR 0 7
40769: PUSH
40770: LD_VAR 0 4
40774: PPUSH
40775: CALL_OW 264
40779: PUSH
40780: LD_VAR 0 10
40784: IN
40785: NOT
40786: AND
40787: IFFALSE 40826
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40789: LD_VAR 0 4
40793: PPUSH
40794: LD_VAR 0 7
40798: PUSH
40799: LD_INT 1
40801: ARRAY
40802: PUSH
40803: LD_INT 1
40805: ARRAY
40806: PPUSH
40807: LD_VAR 0 7
40811: PUSH
40812: LD_INT 1
40814: ARRAY
40815: PUSH
40816: LD_INT 2
40818: ARRAY
40819: PPUSH
40820: CALL_OW 116
40824: GO 41033
// if path > tag then
40826: LD_VAR 0 2
40830: PUSH
40831: LD_VAR 0 9
40835: GREATER
40836: IFFALSE 41003
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
40838: LD_ADDR_VAR 0 6
40842: PUSH
40843: LD_VAR 0 5
40847: PPUSH
40848: LD_INT 91
40850: PUSH
40851: LD_VAR 0 4
40855: PUSH
40856: LD_INT 12
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: LIST
40863: PPUSH
40864: CALL_OW 72
40868: ST_TO_ADDR
// if nearEnemy then
40869: LD_VAR 0 6
40873: IFFALSE 40901
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40875: LD_VAR 0 4
40879: PPUSH
40880: LD_VAR 0 6
40884: PPUSH
40885: LD_VAR 0 4
40889: PPUSH
40890: CALL_OW 74
40894: PPUSH
40895: CALL_OW 115
40899: GO 41001
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40901: LD_VAR 0 4
40905: PPUSH
40906: LD_VAR 0 2
40910: PUSH
40911: LD_VAR 0 9
40915: ARRAY
40916: PUSH
40917: LD_INT 1
40919: ARRAY
40920: PPUSH
40921: LD_VAR 0 2
40925: PUSH
40926: LD_VAR 0 9
40930: ARRAY
40931: PUSH
40932: LD_INT 2
40934: ARRAY
40935: PPUSH
40936: CALL_OW 297
40940: PUSH
40941: LD_INT 6
40943: GREATER
40944: IFFALSE 40987
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
40946: LD_VAR 0 4
40950: PPUSH
40951: LD_VAR 0 2
40955: PUSH
40956: LD_VAR 0 9
40960: ARRAY
40961: PUSH
40962: LD_INT 1
40964: ARRAY
40965: PPUSH
40966: LD_VAR 0 2
40970: PUSH
40971: LD_VAR 0 9
40975: ARRAY
40976: PUSH
40977: LD_INT 2
40979: ARRAY
40980: PPUSH
40981: CALL_OW 114
40985: GO 41001
// SetTag ( i , tag ) ;
40987: LD_VAR 0 4
40991: PPUSH
40992: LD_VAR 0 9
40996: PPUSH
40997: CALL_OW 109
// end else
41001: GO 41033
// if enemy then
41003: LD_VAR 0 5
41007: IFFALSE 41033
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41009: LD_VAR 0 4
41013: PPUSH
41014: LD_VAR 0 5
41018: PPUSH
41019: LD_VAR 0 4
41023: PPUSH
41024: CALL_OW 74
41028: PPUSH
41029: CALL_OW 115
// end ;
41033: GO 40710
41035: POP
41036: POP
// end ;
41037: LD_VAR 0 3
41041: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41042: LD_INT 0
41044: PPUSH
41045: PPUSH
41046: PPUSH
// if not unit or IsInUnit ( unit ) then
41047: LD_VAR 0 1
41051: NOT
41052: PUSH
41053: LD_VAR 0 1
41057: PPUSH
41058: CALL_OW 310
41062: OR
41063: IFFALSE 41067
// exit ;
41065: GO 41158
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41067: LD_ADDR_VAR 0 4
41071: PUSH
41072: LD_VAR 0 1
41076: PPUSH
41077: CALL_OW 250
41081: PPUSH
41082: LD_VAR 0 2
41086: PPUSH
41087: LD_INT 1
41089: PPUSH
41090: CALL_OW 272
41094: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41095: LD_ADDR_VAR 0 5
41099: PUSH
41100: LD_VAR 0 1
41104: PPUSH
41105: CALL_OW 251
41109: PPUSH
41110: LD_VAR 0 2
41114: PPUSH
41115: LD_INT 1
41117: PPUSH
41118: CALL_OW 273
41122: ST_TO_ADDR
// if ValidHex ( x , y ) then
41123: LD_VAR 0 4
41127: PPUSH
41128: LD_VAR 0 5
41132: PPUSH
41133: CALL_OW 488
41137: IFFALSE 41158
// ComTurnXY ( unit , x , y ) ;
41139: LD_VAR 0 1
41143: PPUSH
41144: LD_VAR 0 4
41148: PPUSH
41149: LD_VAR 0 5
41153: PPUSH
41154: CALL_OW 118
// end ;
41158: LD_VAR 0 3
41162: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41163: LD_INT 0
41165: PPUSH
41166: PPUSH
// result := false ;
41167: LD_ADDR_VAR 0 3
41171: PUSH
41172: LD_INT 0
41174: ST_TO_ADDR
// if not units then
41175: LD_VAR 0 2
41179: NOT
41180: IFFALSE 41184
// exit ;
41182: GO 41229
// for i in units do
41184: LD_ADDR_VAR 0 4
41188: PUSH
41189: LD_VAR 0 2
41193: PUSH
41194: FOR_IN
41195: IFFALSE 41227
// if See ( side , i ) then
41197: LD_VAR 0 1
41201: PPUSH
41202: LD_VAR 0 4
41206: PPUSH
41207: CALL_OW 292
41211: IFFALSE 41225
// begin result := true ;
41213: LD_ADDR_VAR 0 3
41217: PUSH
41218: LD_INT 1
41220: ST_TO_ADDR
// exit ;
41221: POP
41222: POP
41223: GO 41229
// end ;
41225: GO 41194
41227: POP
41228: POP
// end ;
41229: LD_VAR 0 3
41233: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41234: LD_INT 0
41236: PPUSH
41237: PPUSH
41238: PPUSH
41239: PPUSH
// if not unit or not points then
41240: LD_VAR 0 1
41244: NOT
41245: PUSH
41246: LD_VAR 0 2
41250: NOT
41251: OR
41252: IFFALSE 41256
// exit ;
41254: GO 41346
// dist := 99999 ;
41256: LD_ADDR_VAR 0 5
41260: PUSH
41261: LD_INT 99999
41263: ST_TO_ADDR
// for i in points do
41264: LD_ADDR_VAR 0 4
41268: PUSH
41269: LD_VAR 0 2
41273: PUSH
41274: FOR_IN
41275: IFFALSE 41344
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41277: LD_ADDR_VAR 0 6
41281: PUSH
41282: LD_VAR 0 1
41286: PPUSH
41287: LD_VAR 0 4
41291: PUSH
41292: LD_INT 1
41294: ARRAY
41295: PPUSH
41296: LD_VAR 0 4
41300: PUSH
41301: LD_INT 2
41303: ARRAY
41304: PPUSH
41305: CALL_OW 297
41309: ST_TO_ADDR
// if tmpDist < dist then
41310: LD_VAR 0 6
41314: PUSH
41315: LD_VAR 0 5
41319: LESS
41320: IFFALSE 41342
// begin result := i ;
41322: LD_ADDR_VAR 0 3
41326: PUSH
41327: LD_VAR 0 4
41331: ST_TO_ADDR
// dist := tmpDist ;
41332: LD_ADDR_VAR 0 5
41336: PUSH
41337: LD_VAR 0 6
41341: ST_TO_ADDR
// end ; end ;
41342: GO 41274
41344: POP
41345: POP
// end ;
41346: LD_VAR 0 3
41350: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41351: LD_INT 0
41353: PPUSH
// uc_side := side ;
41354: LD_ADDR_OWVAR 20
41358: PUSH
41359: LD_VAR 0 1
41363: ST_TO_ADDR
// uc_nation := 3 ;
41364: LD_ADDR_OWVAR 21
41368: PUSH
41369: LD_INT 3
41371: ST_TO_ADDR
// vc_chassis := 25 ;
41372: LD_ADDR_OWVAR 37
41376: PUSH
41377: LD_INT 25
41379: ST_TO_ADDR
// vc_engine := engine_siberite ;
41380: LD_ADDR_OWVAR 39
41384: PUSH
41385: LD_INT 3
41387: ST_TO_ADDR
// vc_control := control_computer ;
41388: LD_ADDR_OWVAR 38
41392: PUSH
41393: LD_INT 3
41395: ST_TO_ADDR
// vc_weapon := 59 ;
41396: LD_ADDR_OWVAR 40
41400: PUSH
41401: LD_INT 59
41403: ST_TO_ADDR
// result := CreateVehicle ;
41404: LD_ADDR_VAR 0 5
41408: PUSH
41409: CALL_OW 45
41413: ST_TO_ADDR
// SetDir ( result , d ) ;
41414: LD_VAR 0 5
41418: PPUSH
41419: LD_VAR 0 4
41423: PPUSH
41424: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41428: LD_VAR 0 5
41432: PPUSH
41433: LD_VAR 0 2
41437: PPUSH
41438: LD_VAR 0 3
41442: PPUSH
41443: LD_INT 0
41445: PPUSH
41446: CALL_OW 48
// end ; end_of_file
41450: LD_VAR 0 5
41454: RET
// export ecoSide , ecoNation , ecoPeopleAmount , ecoStartPoint , ecoCratesDrop , ecoCratesDropXY , ecoCratesDropAllow , ecoAttacksAllow , ecoEventsAllow , ecoAttacksArea , ecoEventsList ; export function InitEcoMode ( startPoint , cratesDropXY , attacksArea ) ; var i , tmp , side , nation , peopleAmount , resourcesAmount ; begin
41455: LD_INT 0
41457: PPUSH
41458: PPUSH
41459: PPUSH
41460: PPUSH
41461: PPUSH
41462: PPUSH
41463: PPUSH
// ecoStartPoint := startPoint ;
41464: LD_ADDR_EXP 26
41468: PUSH
41469: LD_VAR 0 1
41473: ST_TO_ADDR
// CenterNowOnXY ( ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
41474: LD_EXP 26
41478: PUSH
41479: LD_INT 1
41481: ARRAY
41482: PPUSH
41483: LD_EXP 26
41487: PUSH
41488: LD_INT 2
41490: ARRAY
41491: PPUSH
41492: CALL_OW 86
// ecoCratesDropXY := cratesDropXY ;
41496: LD_ADDR_EXP 28
41500: PUSH
41501: LD_VAR 0 2
41505: ST_TO_ADDR
// ecoAttacksArea := attacksArea ;
41506: LD_ADDR_EXP 32
41510: PUSH
41511: LD_VAR 0 3
41515: ST_TO_ADDR
// if debug then
41516: LD_EXP 1
41520: IFFALSE 41564
// begin side := 1 ;
41522: LD_ADDR_VAR 0 7
41526: PUSH
41527: LD_INT 1
41529: ST_TO_ADDR
// nation := 1 ;
41530: LD_ADDR_VAR 0 8
41534: PUSH
41535: LD_INT 1
41537: ST_TO_ADDR
// peopleAmount := 15 ;
41538: LD_ADDR_VAR 0 9
41542: PUSH
41543: LD_INT 15
41545: ST_TO_ADDR
// resourcesAmount := 2 ;
41546: LD_ADDR_VAR 0 10
41550: PUSH
41551: LD_INT 2
41553: ST_TO_ADDR
// ecoCratesDrop := 3 ;
41554: LD_ADDR_EXP 27
41558: PUSH
41559: LD_INT 3
41561: ST_TO_ADDR
// end else
41562: GO 41660
// begin side := GetMultiplayerSetting ( 0 ) ;
41564: LD_ADDR_VAR 0 7
41568: PUSH
41569: LD_INT 0
41571: PPUSH
41572: CALL_OW 426
41576: ST_TO_ADDR
// nation := GetMultiplayerSetting ( 1 ) ;
41577: LD_ADDR_VAR 0 8
41581: PUSH
41582: LD_INT 1
41584: PPUSH
41585: CALL_OW 426
41589: ST_TO_ADDR
// peopleAmount := [ 6 , 9 , 12 , 15 , 18 , 21 , 24 ] [ GetMultiplayerSetting ( 2 ) ] ;
41590: LD_ADDR_VAR 0 9
41594: PUSH
41595: LD_INT 6
41597: PUSH
41598: LD_INT 9
41600: PUSH
41601: LD_INT 12
41603: PUSH
41604: LD_INT 15
41606: PUSH
41607: LD_INT 18
41609: PUSH
41610: LD_INT 21
41612: PUSH
41613: LD_INT 24
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 2
41627: PPUSH
41628: CALL_OW 426
41632: ARRAY
41633: ST_TO_ADDR
// resourcesAmount := GetMultiplayerSetting ( 3 ) ;
41634: LD_ADDR_VAR 0 10
41638: PUSH
41639: LD_INT 3
41641: PPUSH
41642: CALL_OW 426
41646: ST_TO_ADDR
// ecoCratesDrop := GetMultiplayerSetting ( 4 ) ;
41647: LD_ADDR_EXP 27
41651: PUSH
41652: LD_INT 4
41654: PPUSH
41655: CALL_OW 426
41659: ST_TO_ADDR
// end ; ecoCratesDropAllow := true ;
41660: LD_ADDR_EXP 29
41664: PUSH
41665: LD_INT 1
41667: ST_TO_ADDR
// ecoEventsAllow := false ;
41668: LD_ADDR_EXP 31
41672: PUSH
41673: LD_INT 0
41675: ST_TO_ADDR
// ecoAttacksAllow := false ;
41676: LD_ADDR_EXP 30
41680: PUSH
41681: LD_INT 0
41683: ST_TO_ADDR
// ecoSide := side ;
41684: LD_ADDR_EXP 23
41688: PUSH
41689: LD_VAR 0 7
41693: ST_TO_ADDR
// your_side := side ;
41694: LD_ADDR_OWVAR 2
41698: PUSH
41699: LD_VAR 0 7
41703: ST_TO_ADDR
// ChangeSideFog ( 1 , side ) ;
41704: LD_INT 1
41706: PPUSH
41707: LD_VAR 0 7
41711: PPUSH
41712: CALL_OW 343
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
41716: LD_INT 1
41718: PPUSH
41719: LD_INT 1
41721: PPUSH
41722: LD_VAR 0 7
41726: PPUSH
41727: LD_INT 32793
41729: NEG
41730: PPUSH
41731: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
41735: LD_INT 1
41737: PPUSH
41738: LD_INT 1
41740: PPUSH
41741: LD_VAR 0 7
41745: PPUSH
41746: CALL_OW 331
// ecoNation := nation ;
41750: LD_ADDR_EXP 24
41754: PUSH
41755: LD_VAR 0 8
41759: ST_TO_ADDR
// ecoPeopleAmount := peopleAmount ;
41760: LD_ADDR_EXP 25
41764: PUSH
41765: LD_VAR 0 9
41769: ST_TO_ADDR
// for i = 1 to resourcesAmount * 5 do
41770: LD_ADDR_VAR 0 5
41774: PUSH
41775: DOUBLE
41776: LD_INT 1
41778: DEC
41779: ST_TO_ADDR
41780: LD_VAR 0 10
41784: PUSH
41785: LD_INT 5
41787: MUL
41788: PUSH
41789: FOR_TO
41790: IFFALSE 41828
// CreateResourcesXYR ( mat_cans , 5 , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 6 , false ) ;
41792: LD_INT 1
41794: PPUSH
41795: LD_INT 5
41797: PPUSH
41798: LD_EXP 26
41802: PUSH
41803: LD_INT 1
41805: ARRAY
41806: PPUSH
41807: LD_EXP 26
41811: PUSH
41812: LD_INT 2
41814: ARRAY
41815: PPUSH
41816: LD_INT 6
41818: PPUSH
41819: LD_INT 0
41821: PPUSH
41822: CALL_OW 60
41826: GO 41789
41828: POP
41829: POP
// uc_side := side ;
41830: LD_ADDR_OWVAR 20
41834: PUSH
41835: LD_VAR 0 7
41839: ST_TO_ADDR
// uc_nation := nation ;
41840: LD_ADDR_OWVAR 21
41844: PUSH
41845: LD_VAR 0 8
41849: ST_TO_ADDR
// hc_importance := 100 ;
41850: LD_ADDR_OWVAR 32
41854: PUSH
41855: LD_INT 100
41857: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
41858: LD_INT 0
41860: PPUSH
41861: LD_INT 1
41863: PPUSH
41864: LD_INT 4
41866: PPUSH
41867: CALL_OW 380
// if side = 1 and nation = 1 then
41871: LD_VAR 0 7
41875: PUSH
41876: LD_INT 1
41878: EQUAL
41879: PUSH
41880: LD_VAR 0 8
41884: PUSH
41885: LD_INT 1
41887: EQUAL
41888: AND
41889: IFFALSE 41923
// begin hc_name := John Macmilan ;
41891: LD_ADDR_OWVAR 26
41895: PUSH
41896: LD_STRING John Macmilan
41898: ST_TO_ADDR
// hc_gallery := us ;
41899: LD_ADDR_OWVAR 33
41903: PUSH
41904: LD_STRING us
41906: ST_TO_ADDR
// hc_face_number := 5 ;
41907: LD_ADDR_OWVAR 34
41911: PUSH
41912: LD_INT 5
41914: ST_TO_ADDR
// hc_sex := sex_male ;
41915: LD_ADDR_OWVAR 27
41919: PUSH
41920: LD_INT 1
41922: ST_TO_ADDR
// end ; if side = 2 and nation = 2 then
41923: LD_VAR 0 7
41927: PUSH
41928: LD_INT 2
41930: EQUAL
41931: PUSH
41932: LD_VAR 0 8
41936: PUSH
41937: LD_INT 2
41939: EQUAL
41940: AND
41941: IFFALSE 41975
// begin hc_name := Heike Steyer ;
41943: LD_ADDR_OWVAR 26
41947: PUSH
41948: LD_STRING Heike Steyer
41950: ST_TO_ADDR
// hc_gallery := sandar ;
41951: LD_ADDR_OWVAR 33
41955: PUSH
41956: LD_STRING sandar
41958: ST_TO_ADDR
// hc_face_number := 14 ;
41959: LD_ADDR_OWVAR 34
41963: PUSH
41964: LD_INT 14
41966: ST_TO_ADDR
// hc_sex := sex_female ;
41967: LD_ADDR_OWVAR 27
41971: PUSH
41972: LD_INT 2
41974: ST_TO_ADDR
// end ; if side = 6 and nation = 3 then
41975: LD_VAR 0 7
41979: PUSH
41980: LD_INT 6
41982: EQUAL
41983: PUSH
41984: LD_VAR 0 8
41988: PUSH
41989: LD_INT 3
41991: EQUAL
41992: AND
41993: IFFALSE 42040
// begin PrepareHuman ( false , 3 , 4 ) ;
41995: LD_INT 0
41997: PPUSH
41998: LD_INT 3
42000: PPUSH
42001: LD_INT 4
42003: PPUSH
42004: CALL_OW 380
// hc_name := Yuri I. Burlak ;
42008: LD_ADDR_OWVAR 26
42012: PUSH
42013: LD_STRING Yuri I. Burlak
42015: ST_TO_ADDR
// hc_gallery := ru ;
42016: LD_ADDR_OWVAR 33
42020: PUSH
42021: LD_STRING ru
42023: ST_TO_ADDR
// hc_face_number := 1 ;
42024: LD_ADDR_OWVAR 34
42028: PUSH
42029: LD_INT 1
42031: ST_TO_ADDR
// hc_sex := sex_male ;
42032: LD_ADDR_OWVAR 27
42036: PUSH
42037: LD_INT 1
42039: ST_TO_ADDR
// end ; if side = 4 and nation = 1 then
42040: LD_VAR 0 7
42044: PUSH
42045: LD_INT 4
42047: EQUAL
42048: PUSH
42049: LD_VAR 0 8
42053: PUSH
42054: LD_INT 1
42056: EQUAL
42057: AND
42058: IFFALSE 42092
// begin hc_name := Arthur Powell ;
42060: LD_ADDR_OWVAR 26
42064: PUSH
42065: LD_STRING Arthur Powell
42067: ST_TO_ADDR
// hc_gallery := us ;
42068: LD_ADDR_OWVAR 33
42072: PUSH
42073: LD_STRING us
42075: ST_TO_ADDR
// hc_face_number := 7 ;
42076: LD_ADDR_OWVAR 34
42080: PUSH
42081: LD_INT 7
42083: ST_TO_ADDR
// hc_sex := sex_male ;
42084: LD_ADDR_OWVAR 27
42088: PUSH
42089: LD_INT 1
42091: ST_TO_ADDR
// end ; if side = 3 and nation = 3 then
42092: LD_VAR 0 7
42096: PUSH
42097: LD_INT 3
42099: EQUAL
42100: PUSH
42101: LD_VAR 0 8
42105: PUSH
42106: LD_INT 3
42108: EQUAL
42109: AND
42110: IFFALSE 42144
// begin hc_name := Mjr. Platonov ;
42112: LD_ADDR_OWVAR 26
42116: PUSH
42117: LD_STRING Mjr. Platonov
42119: ST_TO_ADDR
// hc_gallery := ru ;
42120: LD_ADDR_OWVAR 33
42124: PUSH
42125: LD_STRING ru
42127: ST_TO_ADDR
// hc_face_number := 60 ;
42128: LD_ADDR_OWVAR 34
42132: PUSH
42133: LD_INT 60
42135: ST_TO_ADDR
// hc_sex := sex_male ;
42136: LD_ADDR_OWVAR 27
42140: PUSH
42141: LD_INT 1
42143: ST_TO_ADDR
// end ; if side = 7 and nation = 1 then
42144: LD_VAR 0 7
42148: PUSH
42149: LD_INT 7
42151: EQUAL
42152: PUSH
42153: LD_VAR 0 8
42157: PUSH
42158: LD_INT 1
42160: EQUAL
42161: AND
42162: IFFALSE 42209
// begin PrepareHuman ( false , 4 , 4 ) ;
42164: LD_INT 0
42166: PPUSH
42167: LD_INT 4
42169: PPUSH
42170: LD_INT 4
42172: PPUSH
42173: CALL_OW 380
// hc_name := Peter Roth ;
42177: LD_ADDR_OWVAR 26
42181: PUSH
42182: LD_STRING Peter Roth
42184: ST_TO_ADDR
// hc_gallery := us ;
42185: LD_ADDR_OWVAR 33
42189: PUSH
42190: LD_STRING us
42192: ST_TO_ADDR
// hc_face_number := 22 ;
42193: LD_ADDR_OWVAR 34
42197: PUSH
42198: LD_INT 22
42200: ST_TO_ADDR
// hc_sex := sex_male ;
42201: LD_ADDR_OWVAR 27
42205: PUSH
42206: LD_INT 1
42208: ST_TO_ADDR
// end ; if side = 7 and nation = 3 then
42209: LD_VAR 0 7
42213: PUSH
42214: LD_INT 7
42216: EQUAL
42217: PUSH
42218: LD_VAR 0 8
42222: PUSH
42223: LD_INT 3
42225: EQUAL
42226: AND
42227: IFFALSE 42274
// begin PrepareHuman ( false , 4 , 4 ) ;
42229: LD_INT 0
42231: PPUSH
42232: LD_INT 4
42234: PPUSH
42235: LD_INT 4
42237: PPUSH
42238: CALL_OW 380
// hc_name := Prof. Gossudarov ;
42242: LD_ADDR_OWVAR 26
42246: PUSH
42247: LD_STRING Prof. Gossudarov
42249: ST_TO_ADDR
// hc_gallery := ru ;
42250: LD_ADDR_OWVAR 33
42254: PUSH
42255: LD_STRING ru
42257: ST_TO_ADDR
// hc_face_number := 61 ;
42258: LD_ADDR_OWVAR 34
42262: PUSH
42263: LD_INT 61
42265: ST_TO_ADDR
// hc_sex := sex_male ;
42266: LD_ADDR_OWVAR 27
42270: PUSH
42271: LD_INT 1
42273: ST_TO_ADDR
// end ; if side = 8 and nation = 1 then
42274: LD_VAR 0 7
42278: PUSH
42279: LD_INT 8
42281: EQUAL
42282: PUSH
42283: LD_VAR 0 8
42287: PUSH
42288: LD_INT 1
42290: EQUAL
42291: AND
42292: IFFALSE 42326
// begin hc_name := Ron Harisson ;
42294: LD_ADDR_OWVAR 26
42298: PUSH
42299: LD_STRING Ron Harisson
42301: ST_TO_ADDR
// hc_gallery := us ;
42302: LD_ADDR_OWVAR 33
42306: PUSH
42307: LD_STRING us
42309: ST_TO_ADDR
// hc_face_number := 6 ;
42310: LD_ADDR_OWVAR 34
42314: PUSH
42315: LD_INT 6
42317: ST_TO_ADDR
// hc_sex := sex_male ;
42318: LD_ADDR_OWVAR 27
42322: PUSH
42323: LD_INT 1
42325: ST_TO_ADDR
// end ; if side = 8 and nation = 2 then
42326: LD_VAR 0 7
42330: PUSH
42331: LD_INT 8
42333: EQUAL
42334: PUSH
42335: LD_VAR 0 8
42339: PUSH
42340: LD_INT 2
42342: EQUAL
42343: AND
42344: IFFALSE 42378
// begin hc_name := Louis Schulz ;
42346: LD_ADDR_OWVAR 26
42350: PUSH
42351: LD_STRING Louis Schulz
42353: ST_TO_ADDR
// hc_gallery := sandar ;
42354: LD_ADDR_OWVAR 33
42358: PUSH
42359: LD_STRING sandar
42361: ST_TO_ADDR
// hc_face_number := 1 ;
42362: LD_ADDR_OWVAR 34
42366: PUSH
42367: LD_INT 1
42369: ST_TO_ADDR
// hc_sex := sex_male ;
42370: LD_ADDR_OWVAR 27
42374: PUSH
42375: LD_INT 1
42377: ST_TO_ADDR
// end ; PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
42378: CALL_OW 44
42382: PPUSH
42383: LD_EXP 26
42387: PUSH
42388: LD_INT 1
42390: ARRAY
42391: PPUSH
42392: LD_EXP 26
42396: PUSH
42397: LD_INT 2
42399: ARRAY
42400: PPUSH
42401: LD_INT 12
42403: PPUSH
42404: LD_INT 0
42406: PPUSH
42407: CALL_OW 50
// InitHc_All ( ) ;
42411: CALL_OW 584
// for i = 1 to peopleAmount - 1 do
42415: LD_ADDR_VAR 0 5
42419: PUSH
42420: DOUBLE
42421: LD_INT 1
42423: DEC
42424: ST_TO_ADDR
42425: LD_VAR 0 9
42429: PUSH
42430: LD_INT 1
42432: MINUS
42433: PUSH
42434: FOR_TO
42435: IFFALSE 42530
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
42437: LD_INT 0
42439: PPUSH
42440: LD_VAR 0 5
42444: PUSH
42445: LD_INT 4
42447: MOD
42448: PUSH
42449: LD_INT 1
42451: PLUS
42452: PPUSH
42453: LD_INT 3
42455: PPUSH
42456: CALL_OW 380
// tmp := Replace ( tmp , tmp + 1 , CreateHuman ) ;
42460: LD_ADDR_VAR 0 6
42464: PUSH
42465: LD_VAR 0 6
42469: PPUSH
42470: LD_VAR 0 6
42474: PUSH
42475: LD_INT 1
42477: PLUS
42478: PPUSH
42479: CALL_OW 44
42483: PPUSH
42484: CALL_OW 1
42488: ST_TO_ADDR
// PlaceUnitXYR ( tmp [ tmp ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
42489: LD_VAR 0 6
42493: PUSH
42494: LD_VAR 0 6
42498: ARRAY
42499: PPUSH
42500: LD_EXP 26
42504: PUSH
42505: LD_INT 1
42507: ARRAY
42508: PPUSH
42509: LD_EXP 26
42513: PUSH
42514: LD_INT 2
42516: ARRAY
42517: PPUSH
42518: LD_INT 12
42520: PPUSH
42521: LD_INT 0
42523: PPUSH
42524: CALL_OW 50
// end ;
42528: GO 42434
42530: POP
42531: POP
// end ;
42532: LD_VAR 0 4
42536: RET
// every 0 0$1 trigger ecoCratesDrop and ecoCratesDropXY do var time , xy ;
42537: LD_EXP 27
42541: PUSH
42542: LD_EXP 28
42546: AND
42547: IFFALSE 42717
42549: GO 42551
42551: DISABLE
42552: LD_INT 0
42554: PPUSH
42555: PPUSH
// begin time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
42556: LD_ADDR_VAR 0 1
42560: PUSH
42561: LD_INT 700
42563: PUSH
42564: LD_INT 350
42566: PUSH
42567: LD_INT 175
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: LIST
42574: PUSH
42575: LD_EXP 27
42579: ARRAY
42580: ST_TO_ADDR
// while true do
42581: LD_INT 1
42583: IFFALSE 42717
// begin wait ( time ) ;
42585: LD_VAR 0 1
42589: PPUSH
42590: CALL_OW 67
// if not ecoCratesDropAllow then
42594: LD_EXP 29
42598: NOT
42599: IFFALSE 42603
// continue ;
42601: GO 42581
// time := time + 0 0$2 ;
42603: LD_ADDR_VAR 0 1
42607: PUSH
42608: LD_VAR 0 1
42612: PUSH
42613: LD_INT 70
42615: PLUS
42616: ST_TO_ADDR
// if time > 0 0$40 then
42617: LD_VAR 0 1
42621: PUSH
42622: LD_INT 1400
42624: GREATER
42625: IFFALSE 42652
// time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
42627: LD_ADDR_VAR 0 1
42631: PUSH
42632: LD_INT 700
42634: PUSH
42635: LD_INT 350
42637: PUSH
42638: LD_INT 175
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: LIST
42645: PUSH
42646: LD_EXP 27
42650: ARRAY
42651: ST_TO_ADDR
// xy := ecoCratesDropXY [ rand ( 1 , ecoCratesDropXY ) ] ;
42652: LD_ADDR_VAR 0 2
42656: PUSH
42657: LD_EXP 28
42661: PUSH
42662: LD_INT 1
42664: PPUSH
42665: LD_EXP 28
42669: PPUSH
42670: CALL_OW 12
42674: ARRAY
42675: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , xy [ 1 ] , xy [ 2 ] , 14 , true ) ;
42676: LD_INT 1
42678: PPUSH
42679: LD_INT 5
42681: PPUSH
42682: CALL_OW 12
42686: PPUSH
42687: LD_VAR 0 2
42691: PUSH
42692: LD_INT 1
42694: ARRAY
42695: PPUSH
42696: LD_VAR 0 2
42700: PUSH
42701: LD_INT 2
42703: ARRAY
42704: PPUSH
42705: LD_INT 14
42707: PPUSH
42708: LD_INT 1
42710: PPUSH
42711: CALL_OW 56
// end ;
42715: GO 42581
// end ;
42717: PPOPN 2
42719: END
// every 0 0$1 trigger ecoAttacksArea and ecoAttacksAllow do var time , area , tmp , i , xy , veh , dir , enemySide , waveBonus ;
42720: LD_EXP 32
42724: PUSH
42725: LD_EXP 30
42729: AND
42730: IFFALSE 43494
42732: GO 42734
42734: DISABLE
42735: LD_INT 0
42737: PPUSH
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
42743: PPUSH
42744: PPUSH
42745: PPUSH
// begin time := 3 3$00 ;
42746: LD_ADDR_VAR 0 1
42750: PUSH
42751: LD_INT 6300
42753: ST_TO_ADDR
// enemySide := [ 3 , 9 ] [ rand ( 1 , 2 ) ] ;
42754: LD_ADDR_VAR 0 8
42758: PUSH
42759: LD_INT 3
42761: PUSH
42762: LD_INT 9
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: PPUSH
42772: LD_INT 2
42774: PPUSH
42775: CALL_OW 12
42779: ARRAY
42780: ST_TO_ADDR
// waveBonus := 0 ;
42781: LD_ADDR_VAR 0 9
42785: PUSH
42786: LD_INT 0
42788: ST_TO_ADDR
// if ecoSide = enemySide then
42789: LD_EXP 23
42793: PUSH
42794: LD_VAR 0 8
42798: EQUAL
42799: IFFALSE 42809
// enemySide := 1 ;
42801: LD_ADDR_VAR 0 8
42805: PUSH
42806: LD_INT 1
42808: ST_TO_ADDR
// while true do
42809: LD_INT 1
42811: IFFALSE 43494
// begin wait ( time ) ;
42813: LD_VAR 0 1
42817: PPUSH
42818: CALL_OW 67
// if not ecoAttacksAllow then
42822: LD_EXP 30
42826: NOT
42827: IFFALSE 42831
// continue ;
42829: GO 42809
// waveBonus := waveBonus + 2 ;
42831: LD_ADDR_VAR 0 9
42835: PUSH
42836: LD_VAR 0 9
42840: PUSH
42841: LD_INT 2
42843: PLUS
42844: ST_TO_ADDR
// if waveBonus > 20 then
42845: LD_VAR 0 9
42849: PUSH
42850: LD_INT 20
42852: GREATER
42853: IFFALSE 42863
// waveBonus := 20 ;
42855: LD_ADDR_VAR 0 9
42859: PUSH
42860: LD_INT 20
42862: ST_TO_ADDR
// area := ecoAttacksArea [ rand ( 1 , ecoAttacksArea ) ] ;
42863: LD_ADDR_VAR 0 2
42867: PUSH
42868: LD_EXP 32
42872: PUSH
42873: LD_INT 1
42875: PPUSH
42876: LD_EXP 32
42880: PPUSH
42881: CALL_OW 12
42885: ARRAY
42886: ST_TO_ADDR
// tmp := AreaToList ( area , 0 ) ;
42887: LD_ADDR_VAR 0 3
42891: PUSH
42892: LD_VAR 0 2
42896: PPUSH
42897: LD_INT 0
42899: PPUSH
42900: CALL_OW 517
42904: ST_TO_ADDR
// dir := GetDirFromHex ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
42905: LD_ADDR_VAR 0 7
42909: PUSH
42910: LD_VAR 0 3
42914: PUSH
42915: LD_INT 1
42917: ARRAY
42918: PUSH
42919: LD_INT 1
42921: ARRAY
42922: PPUSH
42923: LD_VAR 0 3
42927: PUSH
42928: LD_INT 2
42930: ARRAY
42931: PUSH
42932: LD_INT 1
42934: ARRAY
42935: PPUSH
42936: LD_EXP 26
42940: PUSH
42941: LD_INT 1
42943: ARRAY
42944: PPUSH
42945: LD_EXP 26
42949: PUSH
42950: LD_INT 2
42952: ARRAY
42953: PPUSH
42954: CALL 39394 0 4
42958: ST_TO_ADDR
// xy := PointBetweenXY ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
42959: LD_ADDR_VAR 0 5
42963: PUSH
42964: LD_VAR 0 3
42968: PUSH
42969: LD_INT 1
42971: ARRAY
42972: PUSH
42973: LD_INT 1
42975: ARRAY
42976: PPUSH
42977: LD_VAR 0 3
42981: PUSH
42982: LD_INT 2
42984: ARRAY
42985: PUSH
42986: LD_INT 1
42988: ARRAY
42989: PPUSH
42990: LD_EXP 26
42994: PUSH
42995: LD_INT 1
42997: ARRAY
42998: PPUSH
42999: LD_EXP 26
43003: PUSH
43004: LD_INT 2
43006: ARRAY
43007: PPUSH
43008: CALL 38532 0 4
43012: ST_TO_ADDR
// tmp := [ ] ;
43013: LD_ADDR_VAR 0 3
43017: PUSH
43018: EMPTY
43019: ST_TO_ADDR
// for i := 1 to 6 + waveBonus do
43020: LD_ADDR_VAR 0 4
43024: PUSH
43025: DOUBLE
43026: LD_INT 1
43028: DEC
43029: ST_TO_ADDR
43030: LD_INT 6
43032: PUSH
43033: LD_VAR 0 9
43037: PLUS
43038: PUSH
43039: FOR_TO
43040: IFFALSE 43359
// begin uc_side := enemySide ;
43042: LD_ADDR_OWVAR 20
43046: PUSH
43047: LD_VAR 0 8
43051: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
43052: LD_ADDR_OWVAR 21
43056: PUSH
43057: LD_INT 1
43059: PPUSH
43060: LD_INT 3
43062: PPUSH
43063: CALL_OW 12
43067: ST_TO_ADDR
// case uc_nation of 1 :
43068: LD_OWVAR 21
43072: PUSH
43073: LD_INT 1
43075: DOUBLE
43076: EQUAL
43077: IFTRUE 43081
43079: GO 43122
43081: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ; 2 :
43082: LD_INT 5
43084: PPUSH
43085: LD_INT 3
43087: PPUSH
43088: LD_INT 3
43090: PPUSH
43091: LD_INT 6
43093: PUSH
43094: LD_INT 7
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: PPUSH
43104: LD_INT 2
43106: PPUSH
43107: CALL_OW 12
43111: ARRAY
43112: PPUSH
43113: LD_INT 100
43115: PPUSH
43116: CALL 6180 0 5
43120: GO 43225
43122: LD_INT 2
43124: DOUBLE
43125: EQUAL
43126: IFTRUE 43130
43128: GO 43175
43130: POP
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] , 100 ) ; 3 :
43131: LD_INT 14
43133: PPUSH
43134: LD_INT 3
43136: PPUSH
43137: LD_INT 5
43139: PPUSH
43140: LD_INT 27
43142: PUSH
43143: LD_INT 28
43145: PUSH
43146: LD_INT 29
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PPUSH
43157: LD_INT 3
43159: PPUSH
43160: CALL_OW 12
43164: ARRAY
43165: PPUSH
43166: LD_INT 100
43168: PPUSH
43169: CALL 6180 0 5
43173: GO 43225
43175: LD_INT 3
43177: DOUBLE
43178: EQUAL
43179: IFTRUE 43183
43181: GO 43224
43183: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket ] [ rand ( 1 , 2 ) ] , 100 ) ; end ;
43184: LD_INT 24
43186: PPUSH
43187: LD_INT 3
43189: PPUSH
43190: LD_INT 3
43192: PPUSH
43193: LD_INT 46
43195: PUSH
43196: LD_INT 47
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 1
43205: PPUSH
43206: LD_INT 2
43208: PPUSH
43209: CALL_OW 12
43213: ARRAY
43214: PPUSH
43215: LD_INT 100
43217: PPUSH
43218: CALL 6180 0 5
43222: GO 43225
43224: POP
// veh := CreateVehicle ;
43225: LD_ADDR_VAR 0 6
43229: PUSH
43230: CALL_OW 45
43234: ST_TO_ADDR
// SetDir ( veh , dir ) ;
43235: LD_VAR 0 6
43239: PPUSH
43240: LD_VAR 0 7
43244: PPUSH
43245: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
43249: LD_VAR 0 6
43253: PPUSH
43254: LD_VAR 0 2
43258: PPUSH
43259: LD_INT 0
43261: PPUSH
43262: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
43266: LD_ADDR_VAR 0 3
43270: PUSH
43271: LD_VAR 0 3
43275: PPUSH
43276: LD_VAR 0 3
43280: PUSH
43281: LD_INT 1
43283: PLUS
43284: PPUSH
43285: LD_VAR 0 6
43289: PPUSH
43290: CALL_OW 1
43294: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) = 0 then
43295: LD_VAR 0 5
43299: PUSH
43300: LD_INT 1
43302: ARRAY
43303: PPUSH
43304: LD_VAR 0 5
43308: PUSH
43309: LD_INT 2
43311: ARRAY
43312: PPUSH
43313: CALL_OW 428
43317: PUSH
43318: LD_INT 0
43320: EQUAL
43321: IFFALSE 43350
// ComMoveXY ( veh , xy [ 1 ] , xy [ 2 ] ) ;
43323: LD_VAR 0 6
43327: PPUSH
43328: LD_VAR 0 5
43332: PUSH
43333: LD_INT 1
43335: ARRAY
43336: PPUSH
43337: LD_VAR 0 5
43341: PUSH
43342: LD_INT 2
43344: ARRAY
43345: PPUSH
43346: CALL_OW 111
// wait ( 0 0$0.5 ) ;
43350: LD_INT 18
43352: PPUSH
43353: CALL_OW 67
// end ;
43357: GO 43039
43359: POP
43360: POP
// if tmp then
43361: LD_VAR 0 3
43365: IFFALSE 43492
// begin repeat wait ( 0 0$2 ) ;
43367: LD_INT 70
43369: PPUSH
43370: CALL_OW 67
// for i in tmp do
43374: LD_ADDR_VAR 0 4
43378: PUSH
43379: LD_VAR 0 3
43383: PUSH
43384: FOR_IN
43385: IFFALSE 43483
// begin if IsDead ( i ) or not IsPlaced ( i ) or GetSide ( i ) <> enemySide then
43387: LD_VAR 0 4
43391: PPUSH
43392: CALL_OW 301
43396: PUSH
43397: LD_VAR 0 4
43401: PPUSH
43402: CALL_OW 305
43406: NOT
43407: OR
43408: PUSH
43409: LD_VAR 0 4
43413: PPUSH
43414: CALL_OW 255
43418: PUSH
43419: LD_VAR 0 8
43423: NONEQUAL
43424: OR
43425: IFFALSE 43445
// tmp := tmp diff i else
43427: LD_ADDR_VAR 0 3
43431: PUSH
43432: LD_VAR 0 3
43436: PUSH
43437: LD_VAR 0 4
43441: DIFF
43442: ST_TO_ADDR
43443: GO 43481
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , ecoSide ] ) , i ) ) ;
43445: LD_VAR 0 4
43449: PPUSH
43450: LD_INT 22
43452: PUSH
43453: LD_EXP 23
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PPUSH
43462: CALL_OW 69
43466: PPUSH
43467: LD_VAR 0 4
43471: PPUSH
43472: CALL_OW 74
43476: PPUSH
43477: CALL_OW 115
// end ;
43481: GO 43384
43483: POP
43484: POP
// until not tmp ;
43485: LD_VAR 0 3
43489: NOT
43490: IFFALSE 43367
// end ; end ;
43492: GO 42809
// end ;
43494: PPOPN 9
43496: END
// every 0 0$1 trigger ecoEventsAllow do var time , xy ;
43497: LD_EXP 31
43501: IFFALSE 43554
43503: GO 43505
43505: DISABLE
43506: LD_INT 0
43508: PPUSH
43509: PPUSH
// begin time := rand ( 1 1$00 , 10 10$00 ) ;
43510: LD_ADDR_VAR 0 1
43514: PUSH
43515: LD_INT 2100
43517: PPUSH
43518: LD_INT 21000
43520: PPUSH
43521: CALL_OW 12
43525: ST_TO_ADDR
// while true do
43526: LD_INT 1
43528: IFFALSE 43554
// begin wait ( time ) ;
43530: LD_VAR 0 1
43534: PPUSH
43535: CALL_OW 67
// if not ecoEventsAllow then
43539: LD_EXP 31
43543: NOT
43544: IFFALSE 43548
// continue ;
43546: GO 43526
// EcoEvent ( ) ;
43548: CALL 43557 0 0
// end ;
43552: GO 43526
// end ;
43554: PPOPN 2
43556: END
// export function EcoEvent ( ) ; var event , tmp , i ; begin
43557: LD_INT 0
43559: PPUSH
43560: PPUSH
43561: PPUSH
43562: PPUSH
// event := rand ( 1 , 5 ) ;
43563: LD_ADDR_VAR 0 2
43567: PUSH
43568: LD_INT 1
43570: PPUSH
43571: LD_INT 5
43573: PPUSH
43574: CALL_OW 12
43578: ST_TO_ADDR
// case event of 1 :
43579: LD_VAR 0 2
43583: PUSH
43584: LD_INT 1
43586: DOUBLE
43587: EQUAL
43588: IFTRUE 43592
43590: GO 43678
43592: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_building ] ) diff FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
43593: LD_ADDR_VAR 0 3
43597: PUSH
43598: LD_INT 21
43600: PUSH
43601: LD_INT 3
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PPUSH
43608: CALL_OW 69
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: LD_INT 30
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 30
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: LIST
43640: PPUSH
43641: CALL_OW 69
43645: DIFF
43646: ST_TO_ADDR
// if tmp then
43647: LD_VAR 0 3
43651: IFFALSE 43676
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
43653: LD_VAR 0 3
43657: PUSH
43658: LD_INT 1
43660: PPUSH
43661: LD_VAR 0 3
43665: PPUSH
43666: CALL_OW 12
43670: ARRAY
43671: PPUSH
43672: CALL_OW 65
// end ; 2 :
43676: GO 43877
43678: LD_INT 2
43680: DOUBLE
43681: EQUAL
43682: IFTRUE 43686
43684: GO 43742
43686: POP
// begin uc_side := ecoSide ;
43687: LD_ADDR_OWVAR 20
43691: PUSH
43692: LD_EXP 23
43696: ST_TO_ADDR
// uc_nation := ecoNation ;
43697: LD_ADDR_OWVAR 21
43701: PUSH
43702: LD_EXP 24
43706: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 8 ) ;
43707: LD_INT 0
43709: PPUSH
43710: LD_INT 1
43712: PPUSH
43713: LD_INT 4
43715: PPUSH
43716: CALL_OW 12
43720: PPUSH
43721: LD_INT 8
43723: PPUSH
43724: CALL_OW 380
// PlaceUnitAnyWhere ( CreateHuman , true ) ;
43728: CALL_OW 44
43732: PPUSH
43733: LD_INT 1
43735: PPUSH
43736: CALL_OW 51
// end ; 3 :
43740: GO 43877
43742: LD_INT 3
43744: DOUBLE
43745: EQUAL
43746: IFTRUE 43750
43748: GO 43802
43750: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_vehicle ] ) ;
43751: LD_ADDR_VAR 0 3
43755: PUSH
43756: LD_INT 21
43758: PUSH
43759: LD_INT 2
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PPUSH
43766: CALL_OW 69
43770: ST_TO_ADDR
// if tmp then
43771: LD_VAR 0 3
43775: IFFALSE 43800
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
43777: LD_VAR 0 3
43781: PUSH
43782: LD_INT 1
43784: PPUSH
43785: LD_VAR 0 3
43789: PPUSH
43790: CALL_OW 12
43794: ARRAY
43795: PPUSH
43796: CALL_OW 65
// end ; 4 :
43800: GO 43877
43802: LD_INT 4
43804: DOUBLE
43805: EQUAL
43806: IFTRUE 43810
43808: GO 43865
43810: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_human ] ) ;
43811: LD_ADDR_VAR 0 3
43815: PUSH
43816: LD_INT 21
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PPUSH
43826: CALL_OW 69
43830: ST_TO_ADDR
// if tmp then
43831: LD_VAR 0 3
43835: IFFALSE 43863
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 190 ) ;
43837: LD_VAR 0 3
43841: PUSH
43842: LD_INT 1
43844: PPUSH
43845: LD_VAR 0 3
43849: PPUSH
43850: CALL_OW 12
43854: ARRAY
43855: PPUSH
43856: LD_INT 190
43858: PPUSH
43859: CALL_OW 234
// end ; 5 :
43863: GO 43877
43865: LD_INT 5
43867: DOUBLE
43868: EQUAL
43869: IFTRUE 43873
43871: GO 43876
43873: POP
// begin end ; end ;
43874: GO 43877
43876: POP
// end ;
43877: LD_VAR 0 1
43881: RET
// export function EcoEnableAllTechs ( ) ; var i ; begin
43882: LD_INT 0
43884: PPUSH
43885: PPUSH
// for i := 1 to 100 do
43886: LD_ADDR_VAR 0 2
43890: PUSH
43891: DOUBLE
43892: LD_INT 1
43894: DEC
43895: ST_TO_ADDR
43896: LD_INT 100
43898: PUSH
43899: FOR_TO
43900: IFFALSE 43921
// SetTech ( i , ecoSide , state_researched ) ;
43902: LD_VAR 0 2
43906: PPUSH
43907: LD_EXP 23
43911: PPUSH
43912: LD_INT 2
43914: PPUSH
43915: CALL_OW 322
43919: GO 43899
43921: POP
43922: POP
// end ;
43923: LD_VAR 0 1
43927: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
43928: LD_VAR 0 2
43932: PUSH
43933: LD_INT 102
43935: EQUAL
43936: IFFALSE 44128
// begin case p3 of 1 :
43938: LD_VAR 0 3
43942: PUSH
43943: LD_INT 1
43945: DOUBLE
43946: EQUAL
43947: IFTRUE 43951
43949: GO 43969
43951: POP
// ecoEventsAllow := Negate ( ecoEventsAllow ) ; 2 :
43952: LD_ADDR_EXP 31
43956: PUSH
43957: LD_EXP 31
43961: PPUSH
43962: CALL 39331 0 1
43966: ST_TO_ADDR
43967: GO 44126
43969: LD_INT 2
43971: DOUBLE
43972: EQUAL
43973: IFTRUE 43977
43975: GO 43995
43977: POP
// ecoAttacksAllow := Negate ( ecoAttacksAllow ) ; 3 :
43978: LD_ADDR_EXP 30
43982: PUSH
43983: LD_EXP 30
43987: PPUSH
43988: CALL 39331 0 1
43992: ST_TO_ADDR
43993: GO 44126
43995: LD_INT 3
43997: DOUBLE
43998: EQUAL
43999: IFTRUE 44003
44001: GO 44021
44003: POP
// ecoCratesDropAllow := Negate ( ecoCratesDropAllow ) ; 4 :
44004: LD_ADDR_EXP 29
44008: PUSH
44009: LD_EXP 29
44013: PPUSH
44014: CALL 39331 0 1
44018: ST_TO_ADDR
44019: GO 44126
44021: LD_INT 4
44023: DOUBLE
44024: EQUAL
44025: IFTRUE 44029
44027: GO 44036
44029: POP
// EcoEnableAllTechs ( ) ; 5 .. 8 :
44030: CALL 43882 0 0
44034: GO 44126
44036: LD_INT 5
44038: DOUBLE
44039: GREATEREQUAL
44040: IFFALSE 44048
44042: LD_INT 8
44044: DOUBLE
44045: LESSEQUAL
44046: IFTRUE 44050
44048: GO 44125
44050: POP
// begin uc_side := ecoSide ;
44051: LD_ADDR_OWVAR 20
44055: PUSH
44056: LD_EXP 23
44060: ST_TO_ADDR
// uc_nation := ecoNation ;
44061: LD_ADDR_OWVAR 21
44065: PUSH
44066: LD_EXP 24
44070: ST_TO_ADDR
// PrepareHuman ( false , p3 - 4 , 4 ) ;
44071: LD_INT 0
44073: PPUSH
44074: LD_VAR 0 3
44078: PUSH
44079: LD_INT 4
44081: MINUS
44082: PPUSH
44083: LD_INT 4
44085: PPUSH
44086: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , true ) ;
44090: CALL_OW 44
44094: PPUSH
44095: LD_EXP 26
44099: PUSH
44100: LD_INT 1
44102: ARRAY
44103: PPUSH
44104: LD_EXP 26
44108: PUSH
44109: LD_INT 2
44111: ARRAY
44112: PPUSH
44113: LD_INT 12
44115: PPUSH
44116: LD_INT 1
44118: PPUSH
44119: CALL_OW 50
// end ; end ;
44123: GO 44126
44125: POP
// end else
44126: GO 44162
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
44128: LD_VAR 0 1
44132: PPUSH
44133: LD_VAR 0 2
44137: PPUSH
44138: LD_VAR 0 3
44142: PPUSH
44143: LD_VAR 0 4
44147: PPUSH
44148: LD_VAR 0 5
44152: PPUSH
44153: LD_VAR 0 6
44157: PPUSH
44158: CALL 44245 0 6
// end ;
44162: PPOPN 6
44164: END
// on MapStart ( p ) do begin if gameType = 1 then
44165: LD_EXP 2
44169: PUSH
44170: LD_INT 1
44172: EQUAL
44173: IFFALSE 44184
// ToLua ( SKIRMISH_GAME_TYPE = 1 ) else
44175: LD_STRING SKIRMISH_GAME_TYPE = 1
44177: PPUSH
44178: CALL_OW 559
44182: GO 44191
// ToLua ( SKIRMISH_GAME_TYPE = 0 ) ;
44184: LD_STRING SKIRMISH_GAME_TYPE = 0
44186: PPUSH
44187: CALL_OW 559
// SOS_MapStart ( ) ;
44191: CALL 44220 0 0
// end ; end_of_file
44195: PPOPN 1
44197: END
// every 0 0$1 do
44198: GO 44200
44200: DISABLE
// begin enable ;
44201: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
44202: LD_STRING updateTimer(
44204: PUSH
44205: LD_OWVAR 1
44209: STR
44210: PUSH
44211: LD_STRING );
44213: STR
44214: PPUSH
44215: CALL_OW 559
// end ;
44219: END
// export function SOS_MapStart ( ) ; begin
44220: LD_INT 0
44222: PPUSH
// if streamModeActive then
44223: LD_EXP 34
44227: IFFALSE 44236
// DefineStreamItems ( true ) ;
44229: LD_INT 1
44231: PPUSH
44232: CALL 45886 0 1
// UpdateFactoryWaypoints ( ) ;
44236: CALL 59470 0 0
// end ;
44240: LD_VAR 0 1
44244: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
44245: LD_INT 0
44247: PPUSH
// if p2 = 100 then
44248: LD_VAR 0 2
44252: PUSH
44253: LD_INT 100
44255: EQUAL
44256: IFFALSE 45259
// begin if not StreamModeActive then
44258: LD_EXP 34
44262: NOT
44263: IFFALSE 44273
// StreamModeActive := true ;
44265: LD_ADDR_EXP 34
44269: PUSH
44270: LD_INT 1
44272: ST_TO_ADDR
// if p3 = 0 then
44273: LD_VAR 0 3
44277: PUSH
44278: LD_INT 0
44280: EQUAL
44281: IFFALSE 44287
// InitStreamMode ;
44283: CALL 45422 0 0
// if p3 = 1 then
44287: LD_VAR 0 3
44291: PUSH
44292: LD_INT 1
44294: EQUAL
44295: IFFALSE 44305
// sRocket := true ;
44297: LD_ADDR_EXP 39
44301: PUSH
44302: LD_INT 1
44304: ST_TO_ADDR
// if p3 = 2 then
44305: LD_VAR 0 3
44309: PUSH
44310: LD_INT 2
44312: EQUAL
44313: IFFALSE 44323
// sSpeed := true ;
44315: LD_ADDR_EXP 38
44319: PUSH
44320: LD_INT 1
44322: ST_TO_ADDR
// if p3 = 3 then
44323: LD_VAR 0 3
44327: PUSH
44328: LD_INT 3
44330: EQUAL
44331: IFFALSE 44341
// sEngine := true ;
44333: LD_ADDR_EXP 40
44337: PUSH
44338: LD_INT 1
44340: ST_TO_ADDR
// if p3 = 4 then
44341: LD_VAR 0 3
44345: PUSH
44346: LD_INT 4
44348: EQUAL
44349: IFFALSE 44359
// sSpec := true ;
44351: LD_ADDR_EXP 37
44355: PUSH
44356: LD_INT 1
44358: ST_TO_ADDR
// if p3 = 5 then
44359: LD_VAR 0 3
44363: PUSH
44364: LD_INT 5
44366: EQUAL
44367: IFFALSE 44377
// sLevel := true ;
44369: LD_ADDR_EXP 41
44373: PUSH
44374: LD_INT 1
44376: ST_TO_ADDR
// if p3 = 6 then
44377: LD_VAR 0 3
44381: PUSH
44382: LD_INT 6
44384: EQUAL
44385: IFFALSE 44395
// sArmoury := true ;
44387: LD_ADDR_EXP 42
44391: PUSH
44392: LD_INT 1
44394: ST_TO_ADDR
// if p3 = 7 then
44395: LD_VAR 0 3
44399: PUSH
44400: LD_INT 7
44402: EQUAL
44403: IFFALSE 44413
// sRadar := true ;
44405: LD_ADDR_EXP 43
44409: PUSH
44410: LD_INT 1
44412: ST_TO_ADDR
// if p3 = 8 then
44413: LD_VAR 0 3
44417: PUSH
44418: LD_INT 8
44420: EQUAL
44421: IFFALSE 44431
// sBunker := true ;
44423: LD_ADDR_EXP 44
44427: PUSH
44428: LD_INT 1
44430: ST_TO_ADDR
// if p3 = 9 then
44431: LD_VAR 0 3
44435: PUSH
44436: LD_INT 9
44438: EQUAL
44439: IFFALSE 44449
// sHack := true ;
44441: LD_ADDR_EXP 45
44445: PUSH
44446: LD_INT 1
44448: ST_TO_ADDR
// if p3 = 10 then
44449: LD_VAR 0 3
44453: PUSH
44454: LD_INT 10
44456: EQUAL
44457: IFFALSE 44467
// sFire := true ;
44459: LD_ADDR_EXP 46
44463: PUSH
44464: LD_INT 1
44466: ST_TO_ADDR
// if p3 = 11 then
44467: LD_VAR 0 3
44471: PUSH
44472: LD_INT 11
44474: EQUAL
44475: IFFALSE 44485
// sRefresh := true ;
44477: LD_ADDR_EXP 47
44481: PUSH
44482: LD_INT 1
44484: ST_TO_ADDR
// if p3 = 12 then
44485: LD_VAR 0 3
44489: PUSH
44490: LD_INT 12
44492: EQUAL
44493: IFFALSE 44503
// sExp := true ;
44495: LD_ADDR_EXP 48
44499: PUSH
44500: LD_INT 1
44502: ST_TO_ADDR
// if p3 = 13 then
44503: LD_VAR 0 3
44507: PUSH
44508: LD_INT 13
44510: EQUAL
44511: IFFALSE 44521
// sDepot := true ;
44513: LD_ADDR_EXP 49
44517: PUSH
44518: LD_INT 1
44520: ST_TO_ADDR
// if p3 = 14 then
44521: LD_VAR 0 3
44525: PUSH
44526: LD_INT 14
44528: EQUAL
44529: IFFALSE 44539
// sFlag := true ;
44531: LD_ADDR_EXP 50
44535: PUSH
44536: LD_INT 1
44538: ST_TO_ADDR
// if p3 = 15 then
44539: LD_VAR 0 3
44543: PUSH
44544: LD_INT 15
44546: EQUAL
44547: IFFALSE 44557
// sKamikadze := true ;
44549: LD_ADDR_EXP 58
44553: PUSH
44554: LD_INT 1
44556: ST_TO_ADDR
// if p3 = 16 then
44557: LD_VAR 0 3
44561: PUSH
44562: LD_INT 16
44564: EQUAL
44565: IFFALSE 44575
// sTroll := true ;
44567: LD_ADDR_EXP 59
44571: PUSH
44572: LD_INT 1
44574: ST_TO_ADDR
// if p3 = 17 then
44575: LD_VAR 0 3
44579: PUSH
44580: LD_INT 17
44582: EQUAL
44583: IFFALSE 44593
// sSlow := true ;
44585: LD_ADDR_EXP 60
44589: PUSH
44590: LD_INT 1
44592: ST_TO_ADDR
// if p3 = 18 then
44593: LD_VAR 0 3
44597: PUSH
44598: LD_INT 18
44600: EQUAL
44601: IFFALSE 44611
// sLack := true ;
44603: LD_ADDR_EXP 61
44607: PUSH
44608: LD_INT 1
44610: ST_TO_ADDR
// if p3 = 19 then
44611: LD_VAR 0 3
44615: PUSH
44616: LD_INT 19
44618: EQUAL
44619: IFFALSE 44629
// sTank := true ;
44621: LD_ADDR_EXP 63
44625: PUSH
44626: LD_INT 1
44628: ST_TO_ADDR
// if p3 = 20 then
44629: LD_VAR 0 3
44633: PUSH
44634: LD_INT 20
44636: EQUAL
44637: IFFALSE 44647
// sRemote := true ;
44639: LD_ADDR_EXP 64
44643: PUSH
44644: LD_INT 1
44646: ST_TO_ADDR
// if p3 = 21 then
44647: LD_VAR 0 3
44651: PUSH
44652: LD_INT 21
44654: EQUAL
44655: IFFALSE 44665
// sPowell := true ;
44657: LD_ADDR_EXP 65
44661: PUSH
44662: LD_INT 1
44664: ST_TO_ADDR
// if p3 = 22 then
44665: LD_VAR 0 3
44669: PUSH
44670: LD_INT 22
44672: EQUAL
44673: IFFALSE 44683
// sTeleport := true ;
44675: LD_ADDR_EXP 68
44679: PUSH
44680: LD_INT 1
44682: ST_TO_ADDR
// if p3 = 23 then
44683: LD_VAR 0 3
44687: PUSH
44688: LD_INT 23
44690: EQUAL
44691: IFFALSE 44701
// sOilTower := true ;
44693: LD_ADDR_EXP 70
44697: PUSH
44698: LD_INT 1
44700: ST_TO_ADDR
// if p3 = 24 then
44701: LD_VAR 0 3
44705: PUSH
44706: LD_INT 24
44708: EQUAL
44709: IFFALSE 44719
// sShovel := true ;
44711: LD_ADDR_EXP 71
44715: PUSH
44716: LD_INT 1
44718: ST_TO_ADDR
// if p3 = 25 then
44719: LD_VAR 0 3
44723: PUSH
44724: LD_INT 25
44726: EQUAL
44727: IFFALSE 44737
// sSheik := true ;
44729: LD_ADDR_EXP 72
44733: PUSH
44734: LD_INT 1
44736: ST_TO_ADDR
// if p3 = 26 then
44737: LD_VAR 0 3
44741: PUSH
44742: LD_INT 26
44744: EQUAL
44745: IFFALSE 44755
// sEarthquake := true ;
44747: LD_ADDR_EXP 74
44751: PUSH
44752: LD_INT 1
44754: ST_TO_ADDR
// if p3 = 27 then
44755: LD_VAR 0 3
44759: PUSH
44760: LD_INT 27
44762: EQUAL
44763: IFFALSE 44773
// sAI := true ;
44765: LD_ADDR_EXP 75
44769: PUSH
44770: LD_INT 1
44772: ST_TO_ADDR
// if p3 = 28 then
44773: LD_VAR 0 3
44777: PUSH
44778: LD_INT 28
44780: EQUAL
44781: IFFALSE 44791
// sCargo := true ;
44783: LD_ADDR_EXP 78
44787: PUSH
44788: LD_INT 1
44790: ST_TO_ADDR
// if p3 = 29 then
44791: LD_VAR 0 3
44795: PUSH
44796: LD_INT 29
44798: EQUAL
44799: IFFALSE 44809
// sDLaser := true ;
44801: LD_ADDR_EXP 79
44805: PUSH
44806: LD_INT 1
44808: ST_TO_ADDR
// if p3 = 30 then
44809: LD_VAR 0 3
44813: PUSH
44814: LD_INT 30
44816: EQUAL
44817: IFFALSE 44827
// sExchange := true ;
44819: LD_ADDR_EXP 80
44823: PUSH
44824: LD_INT 1
44826: ST_TO_ADDR
// if p3 = 31 then
44827: LD_VAR 0 3
44831: PUSH
44832: LD_INT 31
44834: EQUAL
44835: IFFALSE 44845
// sFac := true ;
44837: LD_ADDR_EXP 81
44841: PUSH
44842: LD_INT 1
44844: ST_TO_ADDR
// if p3 = 32 then
44845: LD_VAR 0 3
44849: PUSH
44850: LD_INT 32
44852: EQUAL
44853: IFFALSE 44863
// sPower := true ;
44855: LD_ADDR_EXP 82
44859: PUSH
44860: LD_INT 1
44862: ST_TO_ADDR
// if p3 = 33 then
44863: LD_VAR 0 3
44867: PUSH
44868: LD_INT 33
44870: EQUAL
44871: IFFALSE 44881
// sRandom := true ;
44873: LD_ADDR_EXP 83
44877: PUSH
44878: LD_INT 1
44880: ST_TO_ADDR
// if p3 = 34 then
44881: LD_VAR 0 3
44885: PUSH
44886: LD_INT 34
44888: EQUAL
44889: IFFALSE 44899
// sShield := true ;
44891: LD_ADDR_EXP 84
44895: PUSH
44896: LD_INT 1
44898: ST_TO_ADDR
// if p3 = 35 then
44899: LD_VAR 0 3
44903: PUSH
44904: LD_INT 35
44906: EQUAL
44907: IFFALSE 44917
// sTime := true ;
44909: LD_ADDR_EXP 85
44913: PUSH
44914: LD_INT 1
44916: ST_TO_ADDR
// if p3 = 36 then
44917: LD_VAR 0 3
44921: PUSH
44922: LD_INT 36
44924: EQUAL
44925: IFFALSE 44935
// sTools := true ;
44927: LD_ADDR_EXP 86
44931: PUSH
44932: LD_INT 1
44934: ST_TO_ADDR
// if p3 = 101 then
44935: LD_VAR 0 3
44939: PUSH
44940: LD_INT 101
44942: EQUAL
44943: IFFALSE 44953
// sSold := true ;
44945: LD_ADDR_EXP 51
44949: PUSH
44950: LD_INT 1
44952: ST_TO_ADDR
// if p3 = 102 then
44953: LD_VAR 0 3
44957: PUSH
44958: LD_INT 102
44960: EQUAL
44961: IFFALSE 44971
// sDiff := true ;
44963: LD_ADDR_EXP 52
44967: PUSH
44968: LD_INT 1
44970: ST_TO_ADDR
// if p3 = 103 then
44971: LD_VAR 0 3
44975: PUSH
44976: LD_INT 103
44978: EQUAL
44979: IFFALSE 44989
// sFog := true ;
44981: LD_ADDR_EXP 55
44985: PUSH
44986: LD_INT 1
44988: ST_TO_ADDR
// if p3 = 104 then
44989: LD_VAR 0 3
44993: PUSH
44994: LD_INT 104
44996: EQUAL
44997: IFFALSE 45007
// sReset := true ;
44999: LD_ADDR_EXP 56
45003: PUSH
45004: LD_INT 1
45006: ST_TO_ADDR
// if p3 = 105 then
45007: LD_VAR 0 3
45011: PUSH
45012: LD_INT 105
45014: EQUAL
45015: IFFALSE 45025
// sSun := true ;
45017: LD_ADDR_EXP 57
45021: PUSH
45022: LD_INT 1
45024: ST_TO_ADDR
// if p3 = 106 then
45025: LD_VAR 0 3
45029: PUSH
45030: LD_INT 106
45032: EQUAL
45033: IFFALSE 45043
// sTiger := true ;
45035: LD_ADDR_EXP 53
45039: PUSH
45040: LD_INT 1
45042: ST_TO_ADDR
// if p3 = 107 then
45043: LD_VAR 0 3
45047: PUSH
45048: LD_INT 107
45050: EQUAL
45051: IFFALSE 45061
// sBomb := true ;
45053: LD_ADDR_EXP 54
45057: PUSH
45058: LD_INT 1
45060: ST_TO_ADDR
// if p3 = 108 then
45061: LD_VAR 0 3
45065: PUSH
45066: LD_INT 108
45068: EQUAL
45069: IFFALSE 45079
// sWound := true ;
45071: LD_ADDR_EXP 62
45075: PUSH
45076: LD_INT 1
45078: ST_TO_ADDR
// if p3 = 109 then
45079: LD_VAR 0 3
45083: PUSH
45084: LD_INT 109
45086: EQUAL
45087: IFFALSE 45097
// sBetray := true ;
45089: LD_ADDR_EXP 66
45093: PUSH
45094: LD_INT 1
45096: ST_TO_ADDR
// if p3 = 110 then
45097: LD_VAR 0 3
45101: PUSH
45102: LD_INT 110
45104: EQUAL
45105: IFFALSE 45115
// sContamin := true ;
45107: LD_ADDR_EXP 67
45111: PUSH
45112: LD_INT 1
45114: ST_TO_ADDR
// if p3 = 111 then
45115: LD_VAR 0 3
45119: PUSH
45120: LD_INT 111
45122: EQUAL
45123: IFFALSE 45133
// sOil := true ;
45125: LD_ADDR_EXP 69
45129: PUSH
45130: LD_INT 1
45132: ST_TO_ADDR
// if p3 = 112 then
45133: LD_VAR 0 3
45137: PUSH
45138: LD_INT 112
45140: EQUAL
45141: IFFALSE 45151
// sStu := true ;
45143: LD_ADDR_EXP 73
45147: PUSH
45148: LD_INT 1
45150: ST_TO_ADDR
// if p3 = 113 then
45151: LD_VAR 0 3
45155: PUSH
45156: LD_INT 113
45158: EQUAL
45159: IFFALSE 45169
// sBazooka := true ;
45161: LD_ADDR_EXP 76
45165: PUSH
45166: LD_INT 1
45168: ST_TO_ADDR
// if p3 = 114 then
45169: LD_VAR 0 3
45173: PUSH
45174: LD_INT 114
45176: EQUAL
45177: IFFALSE 45187
// sMortar := true ;
45179: LD_ADDR_EXP 77
45183: PUSH
45184: LD_INT 1
45186: ST_TO_ADDR
// if p3 = 115 then
45187: LD_VAR 0 3
45191: PUSH
45192: LD_INT 115
45194: EQUAL
45195: IFFALSE 45205
// sRanger := true ;
45197: LD_ADDR_EXP 87
45201: PUSH
45202: LD_INT 1
45204: ST_TO_ADDR
// if p3 = 116 then
45205: LD_VAR 0 3
45209: PUSH
45210: LD_INT 116
45212: EQUAL
45213: IFFALSE 45223
// sComputer := true ;
45215: LD_ADDR_EXP 88
45219: PUSH
45220: LD_INT 1
45222: ST_TO_ADDR
// if p3 = 117 then
45223: LD_VAR 0 3
45227: PUSH
45228: LD_INT 117
45230: EQUAL
45231: IFFALSE 45241
// s30 := true ;
45233: LD_ADDR_EXP 89
45237: PUSH
45238: LD_INT 1
45240: ST_TO_ADDR
// if p3 = 118 then
45241: LD_VAR 0 3
45245: PUSH
45246: LD_INT 118
45248: EQUAL
45249: IFFALSE 45259
// s60 := true ;
45251: LD_ADDR_EXP 90
45255: PUSH
45256: LD_INT 1
45258: ST_TO_ADDR
// end ; if p2 = 101 then
45259: LD_VAR 0 2
45263: PUSH
45264: LD_INT 101
45266: EQUAL
45267: IFFALSE 45395
// begin case p3 of 1 :
45269: LD_VAR 0 3
45273: PUSH
45274: LD_INT 1
45276: DOUBLE
45277: EQUAL
45278: IFTRUE 45282
45280: GO 45289
45282: POP
// hHackUnlimitedResources ; 2 :
45283: CALL 57493 0 0
45287: GO 45395
45289: LD_INT 2
45291: DOUBLE
45292: EQUAL
45293: IFTRUE 45297
45295: GO 45304
45297: POP
// hHackSetLevel10 ; 3 :
45298: CALL 57626 0 0
45302: GO 45395
45304: LD_INT 3
45306: DOUBLE
45307: EQUAL
45308: IFTRUE 45312
45310: GO 45319
45312: POP
// hHackSetLevel10YourUnits ; 4 :
45313: CALL 57711 0 0
45317: GO 45395
45319: LD_INT 4
45321: DOUBLE
45322: EQUAL
45323: IFTRUE 45327
45325: GO 45334
45327: POP
// hHackInvincible ; 5 :
45328: CALL 58159 0 0
45332: GO 45395
45334: LD_INT 5
45336: DOUBLE
45337: EQUAL
45338: IFTRUE 45342
45340: GO 45349
45342: POP
// hHackInvisible ; 6 :
45343: CALL 58270 0 0
45347: GO 45395
45349: LD_INT 6
45351: DOUBLE
45352: EQUAL
45353: IFTRUE 45357
45355: GO 45364
45357: POP
// hHackChangeYourSide ; 7 :
45358: CALL 58327 0 0
45362: GO 45395
45364: LD_INT 7
45366: DOUBLE
45367: EQUAL
45368: IFTRUE 45372
45370: GO 45379
45372: POP
// hHackChangeUnitSide ; 8 :
45373: CALL 58369 0 0
45377: GO 45395
45379: LD_INT 8
45381: DOUBLE
45382: EQUAL
45383: IFTRUE 45387
45385: GO 45394
45387: POP
// hHackFog ; end ;
45388: CALL 58470 0 0
45392: GO 45395
45394: POP
// end ; end ;
45395: LD_VAR 0 7
45399: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
45400: GO 45402
45402: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
45403: LD_STRING initStreamRollete();
45405: PPUSH
45406: CALL_OW 559
// InitStreamMode ;
45410: CALL 45422 0 0
// DefineStreamItems ( false ) ;
45414: LD_INT 0
45416: PPUSH
45417: CALL 45886 0 1
// end ;
45421: END
// function InitStreamMode ; begin
45422: LD_INT 0
45424: PPUSH
// streamModeActive := false ;
45425: LD_ADDR_EXP 34
45429: PUSH
45430: LD_INT 0
45432: ST_TO_ADDR
// normalCounter := 36 ;
45433: LD_ADDR_EXP 35
45437: PUSH
45438: LD_INT 36
45440: ST_TO_ADDR
// hardcoreCounter := 18 ;
45441: LD_ADDR_EXP 36
45445: PUSH
45446: LD_INT 18
45448: ST_TO_ADDR
// sRocket := false ;
45449: LD_ADDR_EXP 39
45453: PUSH
45454: LD_INT 0
45456: ST_TO_ADDR
// sSpeed := false ;
45457: LD_ADDR_EXP 38
45461: PUSH
45462: LD_INT 0
45464: ST_TO_ADDR
// sEngine := false ;
45465: LD_ADDR_EXP 40
45469: PUSH
45470: LD_INT 0
45472: ST_TO_ADDR
// sSpec := false ;
45473: LD_ADDR_EXP 37
45477: PUSH
45478: LD_INT 0
45480: ST_TO_ADDR
// sLevel := false ;
45481: LD_ADDR_EXP 41
45485: PUSH
45486: LD_INT 0
45488: ST_TO_ADDR
// sArmoury := false ;
45489: LD_ADDR_EXP 42
45493: PUSH
45494: LD_INT 0
45496: ST_TO_ADDR
// sRadar := false ;
45497: LD_ADDR_EXP 43
45501: PUSH
45502: LD_INT 0
45504: ST_TO_ADDR
// sBunker := false ;
45505: LD_ADDR_EXP 44
45509: PUSH
45510: LD_INT 0
45512: ST_TO_ADDR
// sHack := false ;
45513: LD_ADDR_EXP 45
45517: PUSH
45518: LD_INT 0
45520: ST_TO_ADDR
// sFire := false ;
45521: LD_ADDR_EXP 46
45525: PUSH
45526: LD_INT 0
45528: ST_TO_ADDR
// sRefresh := false ;
45529: LD_ADDR_EXP 47
45533: PUSH
45534: LD_INT 0
45536: ST_TO_ADDR
// sExp := false ;
45537: LD_ADDR_EXP 48
45541: PUSH
45542: LD_INT 0
45544: ST_TO_ADDR
// sDepot := false ;
45545: LD_ADDR_EXP 49
45549: PUSH
45550: LD_INT 0
45552: ST_TO_ADDR
// sFlag := false ;
45553: LD_ADDR_EXP 50
45557: PUSH
45558: LD_INT 0
45560: ST_TO_ADDR
// sKamikadze := false ;
45561: LD_ADDR_EXP 58
45565: PUSH
45566: LD_INT 0
45568: ST_TO_ADDR
// sTroll := false ;
45569: LD_ADDR_EXP 59
45573: PUSH
45574: LD_INT 0
45576: ST_TO_ADDR
// sSlow := false ;
45577: LD_ADDR_EXP 60
45581: PUSH
45582: LD_INT 0
45584: ST_TO_ADDR
// sLack := false ;
45585: LD_ADDR_EXP 61
45589: PUSH
45590: LD_INT 0
45592: ST_TO_ADDR
// sTank := false ;
45593: LD_ADDR_EXP 63
45597: PUSH
45598: LD_INT 0
45600: ST_TO_ADDR
// sRemote := false ;
45601: LD_ADDR_EXP 64
45605: PUSH
45606: LD_INT 0
45608: ST_TO_ADDR
// sPowell := false ;
45609: LD_ADDR_EXP 65
45613: PUSH
45614: LD_INT 0
45616: ST_TO_ADDR
// sTeleport := false ;
45617: LD_ADDR_EXP 68
45621: PUSH
45622: LD_INT 0
45624: ST_TO_ADDR
// sOilTower := false ;
45625: LD_ADDR_EXP 70
45629: PUSH
45630: LD_INT 0
45632: ST_TO_ADDR
// sShovel := false ;
45633: LD_ADDR_EXP 71
45637: PUSH
45638: LD_INT 0
45640: ST_TO_ADDR
// sSheik := false ;
45641: LD_ADDR_EXP 72
45645: PUSH
45646: LD_INT 0
45648: ST_TO_ADDR
// sEarthquake := false ;
45649: LD_ADDR_EXP 74
45653: PUSH
45654: LD_INT 0
45656: ST_TO_ADDR
// sAI := false ;
45657: LD_ADDR_EXP 75
45661: PUSH
45662: LD_INT 0
45664: ST_TO_ADDR
// sCargo := false ;
45665: LD_ADDR_EXP 78
45669: PUSH
45670: LD_INT 0
45672: ST_TO_ADDR
// sDLaser := false ;
45673: LD_ADDR_EXP 79
45677: PUSH
45678: LD_INT 0
45680: ST_TO_ADDR
// sExchange := false ;
45681: LD_ADDR_EXP 80
45685: PUSH
45686: LD_INT 0
45688: ST_TO_ADDR
// sFac := false ;
45689: LD_ADDR_EXP 81
45693: PUSH
45694: LD_INT 0
45696: ST_TO_ADDR
// sPower := false ;
45697: LD_ADDR_EXP 82
45701: PUSH
45702: LD_INT 0
45704: ST_TO_ADDR
// sRandom := false ;
45705: LD_ADDR_EXP 83
45709: PUSH
45710: LD_INT 0
45712: ST_TO_ADDR
// sShield := false ;
45713: LD_ADDR_EXP 84
45717: PUSH
45718: LD_INT 0
45720: ST_TO_ADDR
// sTime := false ;
45721: LD_ADDR_EXP 85
45725: PUSH
45726: LD_INT 0
45728: ST_TO_ADDR
// sTools := false ;
45729: LD_ADDR_EXP 86
45733: PUSH
45734: LD_INT 0
45736: ST_TO_ADDR
// sSold := false ;
45737: LD_ADDR_EXP 51
45741: PUSH
45742: LD_INT 0
45744: ST_TO_ADDR
// sDiff := false ;
45745: LD_ADDR_EXP 52
45749: PUSH
45750: LD_INT 0
45752: ST_TO_ADDR
// sFog := false ;
45753: LD_ADDR_EXP 55
45757: PUSH
45758: LD_INT 0
45760: ST_TO_ADDR
// sReset := false ;
45761: LD_ADDR_EXP 56
45765: PUSH
45766: LD_INT 0
45768: ST_TO_ADDR
// sSun := false ;
45769: LD_ADDR_EXP 57
45773: PUSH
45774: LD_INT 0
45776: ST_TO_ADDR
// sTiger := false ;
45777: LD_ADDR_EXP 53
45781: PUSH
45782: LD_INT 0
45784: ST_TO_ADDR
// sBomb := false ;
45785: LD_ADDR_EXP 54
45789: PUSH
45790: LD_INT 0
45792: ST_TO_ADDR
// sWound := false ;
45793: LD_ADDR_EXP 62
45797: PUSH
45798: LD_INT 0
45800: ST_TO_ADDR
// sBetray := false ;
45801: LD_ADDR_EXP 66
45805: PUSH
45806: LD_INT 0
45808: ST_TO_ADDR
// sContamin := false ;
45809: LD_ADDR_EXP 67
45813: PUSH
45814: LD_INT 0
45816: ST_TO_ADDR
// sOil := false ;
45817: LD_ADDR_EXP 69
45821: PUSH
45822: LD_INT 0
45824: ST_TO_ADDR
// sStu := false ;
45825: LD_ADDR_EXP 73
45829: PUSH
45830: LD_INT 0
45832: ST_TO_ADDR
// sBazooka := false ;
45833: LD_ADDR_EXP 76
45837: PUSH
45838: LD_INT 0
45840: ST_TO_ADDR
// sMortar := false ;
45841: LD_ADDR_EXP 77
45845: PUSH
45846: LD_INT 0
45848: ST_TO_ADDR
// sRanger := false ;
45849: LD_ADDR_EXP 87
45853: PUSH
45854: LD_INT 0
45856: ST_TO_ADDR
// sComputer := false ;
45857: LD_ADDR_EXP 88
45861: PUSH
45862: LD_INT 0
45864: ST_TO_ADDR
// s30 := false ;
45865: LD_ADDR_EXP 89
45869: PUSH
45870: LD_INT 0
45872: ST_TO_ADDR
// s60 := false ;
45873: LD_ADDR_EXP 90
45877: PUSH
45878: LD_INT 0
45880: ST_TO_ADDR
// end ;
45881: LD_VAR 0 1
45885: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
45886: LD_INT 0
45888: PPUSH
45889: PPUSH
45890: PPUSH
45891: PPUSH
45892: PPUSH
45893: PPUSH
45894: PPUSH
// result := [ ] ;
45895: LD_ADDR_VAR 0 2
45899: PUSH
45900: EMPTY
45901: ST_TO_ADDR
// if campaign_id = 1 then
45902: LD_OWVAR 69
45906: PUSH
45907: LD_INT 1
45909: EQUAL
45910: IFFALSE 49076
// begin case mission_number of 1 :
45912: LD_OWVAR 70
45916: PUSH
45917: LD_INT 1
45919: DOUBLE
45920: EQUAL
45921: IFTRUE 45925
45923: GO 46001
45925: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
45926: LD_ADDR_VAR 0 2
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: LD_INT 4
45936: PUSH
45937: LD_INT 11
45939: PUSH
45940: LD_INT 12
45942: PUSH
45943: LD_INT 15
45945: PUSH
45946: LD_INT 16
45948: PUSH
45949: LD_INT 22
45951: PUSH
45952: LD_INT 23
45954: PUSH
45955: LD_INT 26
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 101
45971: PUSH
45972: LD_INT 102
45974: PUSH
45975: LD_INT 106
45977: PUSH
45978: LD_INT 116
45980: PUSH
45981: LD_INT 117
45983: PUSH
45984: LD_INT 118
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: ST_TO_ADDR
45999: GO 49074
46001: LD_INT 2
46003: DOUBLE
46004: EQUAL
46005: IFTRUE 46009
46007: GO 46093
46009: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
46010: LD_ADDR_VAR 0 2
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: LD_INT 4
46020: PUSH
46021: LD_INT 11
46023: PUSH
46024: LD_INT 12
46026: PUSH
46027: LD_INT 15
46029: PUSH
46030: LD_INT 16
46032: PUSH
46033: LD_INT 22
46035: PUSH
46036: LD_INT 23
46038: PUSH
46039: LD_INT 26
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 101
46055: PUSH
46056: LD_INT 102
46058: PUSH
46059: LD_INT 105
46061: PUSH
46062: LD_INT 106
46064: PUSH
46065: LD_INT 108
46067: PUSH
46068: LD_INT 116
46070: PUSH
46071: LD_INT 117
46073: PUSH
46074: LD_INT 118
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: ST_TO_ADDR
46091: GO 49074
46093: LD_INT 3
46095: DOUBLE
46096: EQUAL
46097: IFTRUE 46101
46099: GO 46189
46101: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
46102: LD_ADDR_VAR 0 2
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: LD_INT 4
46112: PUSH
46113: LD_INT 5
46115: PUSH
46116: LD_INT 11
46118: PUSH
46119: LD_INT 12
46121: PUSH
46122: LD_INT 15
46124: PUSH
46125: LD_INT 16
46127: PUSH
46128: LD_INT 22
46130: PUSH
46131: LD_INT 26
46133: PUSH
46134: LD_INT 36
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 101
46151: PUSH
46152: LD_INT 102
46154: PUSH
46155: LD_INT 105
46157: PUSH
46158: LD_INT 106
46160: PUSH
46161: LD_INT 108
46163: PUSH
46164: LD_INT 116
46166: PUSH
46167: LD_INT 117
46169: PUSH
46170: LD_INT 118
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: ST_TO_ADDR
46187: GO 49074
46189: LD_INT 4
46191: DOUBLE
46192: EQUAL
46193: IFTRUE 46197
46195: GO 46293
46197: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
46198: LD_ADDR_VAR 0 2
46202: PUSH
46203: LD_INT 2
46205: PUSH
46206: LD_INT 4
46208: PUSH
46209: LD_INT 5
46211: PUSH
46212: LD_INT 8
46214: PUSH
46215: LD_INT 11
46217: PUSH
46218: LD_INT 12
46220: PUSH
46221: LD_INT 15
46223: PUSH
46224: LD_INT 16
46226: PUSH
46227: LD_INT 22
46229: PUSH
46230: LD_INT 23
46232: PUSH
46233: LD_INT 26
46235: PUSH
46236: LD_INT 36
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 101
46255: PUSH
46256: LD_INT 102
46258: PUSH
46259: LD_INT 105
46261: PUSH
46262: LD_INT 106
46264: PUSH
46265: LD_INT 108
46267: PUSH
46268: LD_INT 116
46270: PUSH
46271: LD_INT 117
46273: PUSH
46274: LD_INT 118
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: ST_TO_ADDR
46291: GO 49074
46293: LD_INT 5
46295: DOUBLE
46296: EQUAL
46297: IFTRUE 46301
46299: GO 46413
46301: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
46302: LD_ADDR_VAR 0 2
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: LD_INT 4
46312: PUSH
46313: LD_INT 5
46315: PUSH
46316: LD_INT 6
46318: PUSH
46319: LD_INT 8
46321: PUSH
46322: LD_INT 11
46324: PUSH
46325: LD_INT 12
46327: PUSH
46328: LD_INT 15
46330: PUSH
46331: LD_INT 16
46333: PUSH
46334: LD_INT 22
46336: PUSH
46337: LD_INT 23
46339: PUSH
46340: LD_INT 25
46342: PUSH
46343: LD_INT 26
46345: PUSH
46346: LD_INT 36
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 101
46367: PUSH
46368: LD_INT 102
46370: PUSH
46371: LD_INT 105
46373: PUSH
46374: LD_INT 106
46376: PUSH
46377: LD_INT 108
46379: PUSH
46380: LD_INT 109
46382: PUSH
46383: LD_INT 112
46385: PUSH
46386: LD_INT 116
46388: PUSH
46389: LD_INT 117
46391: PUSH
46392: LD_INT 118
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: ST_TO_ADDR
46411: GO 49074
46413: LD_INT 6
46415: DOUBLE
46416: EQUAL
46417: IFTRUE 46421
46419: GO 46553
46421: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
46422: LD_ADDR_VAR 0 2
46426: PUSH
46427: LD_INT 2
46429: PUSH
46430: LD_INT 4
46432: PUSH
46433: LD_INT 5
46435: PUSH
46436: LD_INT 6
46438: PUSH
46439: LD_INT 8
46441: PUSH
46442: LD_INT 11
46444: PUSH
46445: LD_INT 12
46447: PUSH
46448: LD_INT 15
46450: PUSH
46451: LD_INT 16
46453: PUSH
46454: LD_INT 20
46456: PUSH
46457: LD_INT 21
46459: PUSH
46460: LD_INT 22
46462: PUSH
46463: LD_INT 23
46465: PUSH
46466: LD_INT 25
46468: PUSH
46469: LD_INT 26
46471: PUSH
46472: LD_INT 30
46474: PUSH
46475: LD_INT 31
46477: PUSH
46478: LD_INT 32
46480: PUSH
46481: LD_INT 36
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 101
46507: PUSH
46508: LD_INT 102
46510: PUSH
46511: LD_INT 105
46513: PUSH
46514: LD_INT 106
46516: PUSH
46517: LD_INT 108
46519: PUSH
46520: LD_INT 109
46522: PUSH
46523: LD_INT 112
46525: PUSH
46526: LD_INT 116
46528: PUSH
46529: LD_INT 117
46531: PUSH
46532: LD_INT 118
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: ST_TO_ADDR
46551: GO 49074
46553: LD_INT 7
46555: DOUBLE
46556: EQUAL
46557: IFTRUE 46561
46559: GO 46673
46561: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
46562: LD_ADDR_VAR 0 2
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: LD_INT 4
46572: PUSH
46573: LD_INT 5
46575: PUSH
46576: LD_INT 7
46578: PUSH
46579: LD_INT 11
46581: PUSH
46582: LD_INT 12
46584: PUSH
46585: LD_INT 15
46587: PUSH
46588: LD_INT 16
46590: PUSH
46591: LD_INT 20
46593: PUSH
46594: LD_INT 21
46596: PUSH
46597: LD_INT 22
46599: PUSH
46600: LD_INT 23
46602: PUSH
46603: LD_INT 25
46605: PUSH
46606: LD_INT 26
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 101
46627: PUSH
46628: LD_INT 102
46630: PUSH
46631: LD_INT 103
46633: PUSH
46634: LD_INT 105
46636: PUSH
46637: LD_INT 106
46639: PUSH
46640: LD_INT 108
46642: PUSH
46643: LD_INT 112
46645: PUSH
46646: LD_INT 116
46648: PUSH
46649: LD_INT 117
46651: PUSH
46652: LD_INT 118
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: ST_TO_ADDR
46671: GO 49074
46673: LD_INT 8
46675: DOUBLE
46676: EQUAL
46677: IFTRUE 46681
46679: GO 46821
46681: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
46682: LD_ADDR_VAR 0 2
46686: PUSH
46687: LD_INT 2
46689: PUSH
46690: LD_INT 4
46692: PUSH
46693: LD_INT 5
46695: PUSH
46696: LD_INT 6
46698: PUSH
46699: LD_INT 7
46701: PUSH
46702: LD_INT 8
46704: PUSH
46705: LD_INT 11
46707: PUSH
46708: LD_INT 12
46710: PUSH
46711: LD_INT 15
46713: PUSH
46714: LD_INT 16
46716: PUSH
46717: LD_INT 20
46719: PUSH
46720: LD_INT 21
46722: PUSH
46723: LD_INT 22
46725: PUSH
46726: LD_INT 23
46728: PUSH
46729: LD_INT 25
46731: PUSH
46732: LD_INT 26
46734: PUSH
46735: LD_INT 30
46737: PUSH
46738: LD_INT 31
46740: PUSH
46741: LD_INT 32
46743: PUSH
46744: LD_INT 36
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 101
46771: PUSH
46772: LD_INT 102
46774: PUSH
46775: LD_INT 103
46777: PUSH
46778: LD_INT 105
46780: PUSH
46781: LD_INT 106
46783: PUSH
46784: LD_INT 108
46786: PUSH
46787: LD_INT 109
46789: PUSH
46790: LD_INT 112
46792: PUSH
46793: LD_INT 116
46795: PUSH
46796: LD_INT 117
46798: PUSH
46799: LD_INT 118
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: ST_TO_ADDR
46819: GO 49074
46821: LD_INT 9
46823: DOUBLE
46824: EQUAL
46825: IFTRUE 46829
46827: GO 46977
46829: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
46830: LD_ADDR_VAR 0 2
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: LD_INT 4
46840: PUSH
46841: LD_INT 5
46843: PUSH
46844: LD_INT 6
46846: PUSH
46847: LD_INT 7
46849: PUSH
46850: LD_INT 8
46852: PUSH
46853: LD_INT 11
46855: PUSH
46856: LD_INT 12
46858: PUSH
46859: LD_INT 15
46861: PUSH
46862: LD_INT 16
46864: PUSH
46865: LD_INT 20
46867: PUSH
46868: LD_INT 21
46870: PUSH
46871: LD_INT 22
46873: PUSH
46874: LD_INT 23
46876: PUSH
46877: LD_INT 25
46879: PUSH
46880: LD_INT 26
46882: PUSH
46883: LD_INT 28
46885: PUSH
46886: LD_INT 30
46888: PUSH
46889: LD_INT 31
46891: PUSH
46892: LD_INT 32
46894: PUSH
46895: LD_INT 36
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 101
46923: PUSH
46924: LD_INT 102
46926: PUSH
46927: LD_INT 103
46929: PUSH
46930: LD_INT 105
46932: PUSH
46933: LD_INT 106
46935: PUSH
46936: LD_INT 108
46938: PUSH
46939: LD_INT 109
46941: PUSH
46942: LD_INT 112
46944: PUSH
46945: LD_INT 114
46947: PUSH
46948: LD_INT 116
46950: PUSH
46951: LD_INT 117
46953: PUSH
46954: LD_INT 118
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: ST_TO_ADDR
46975: GO 49074
46977: LD_INT 10
46979: DOUBLE
46980: EQUAL
46981: IFTRUE 46985
46983: GO 47181
46985: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
46986: LD_ADDR_VAR 0 2
46990: PUSH
46991: LD_INT 2
46993: PUSH
46994: LD_INT 4
46996: PUSH
46997: LD_INT 5
46999: PUSH
47000: LD_INT 6
47002: PUSH
47003: LD_INT 7
47005: PUSH
47006: LD_INT 8
47008: PUSH
47009: LD_INT 9
47011: PUSH
47012: LD_INT 10
47014: PUSH
47015: LD_INT 11
47017: PUSH
47018: LD_INT 12
47020: PUSH
47021: LD_INT 13
47023: PUSH
47024: LD_INT 14
47026: PUSH
47027: LD_INT 15
47029: PUSH
47030: LD_INT 16
47032: PUSH
47033: LD_INT 17
47035: PUSH
47036: LD_INT 18
47038: PUSH
47039: LD_INT 19
47041: PUSH
47042: LD_INT 20
47044: PUSH
47045: LD_INT 21
47047: PUSH
47048: LD_INT 22
47050: PUSH
47051: LD_INT 23
47053: PUSH
47054: LD_INT 24
47056: PUSH
47057: LD_INT 25
47059: PUSH
47060: LD_INT 26
47062: PUSH
47063: LD_INT 28
47065: PUSH
47066: LD_INT 30
47068: PUSH
47069: LD_INT 31
47071: PUSH
47072: LD_INT 32
47074: PUSH
47075: LD_INT 36
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 101
47111: PUSH
47112: LD_INT 102
47114: PUSH
47115: LD_INT 103
47117: PUSH
47118: LD_INT 104
47120: PUSH
47121: LD_INT 105
47123: PUSH
47124: LD_INT 106
47126: PUSH
47127: LD_INT 107
47129: PUSH
47130: LD_INT 108
47132: PUSH
47133: LD_INT 109
47135: PUSH
47136: LD_INT 110
47138: PUSH
47139: LD_INT 111
47141: PUSH
47142: LD_INT 112
47144: PUSH
47145: LD_INT 114
47147: PUSH
47148: LD_INT 116
47150: PUSH
47151: LD_INT 117
47153: PUSH
47154: LD_INT 118
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: ST_TO_ADDR
47179: GO 49074
47181: LD_INT 11
47183: DOUBLE
47184: EQUAL
47185: IFTRUE 47189
47187: GO 47393
47189: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
47190: LD_ADDR_VAR 0 2
47194: PUSH
47195: LD_INT 2
47197: PUSH
47198: LD_INT 3
47200: PUSH
47201: LD_INT 4
47203: PUSH
47204: LD_INT 5
47206: PUSH
47207: LD_INT 6
47209: PUSH
47210: LD_INT 7
47212: PUSH
47213: LD_INT 8
47215: PUSH
47216: LD_INT 9
47218: PUSH
47219: LD_INT 10
47221: PUSH
47222: LD_INT 11
47224: PUSH
47225: LD_INT 12
47227: PUSH
47228: LD_INT 13
47230: PUSH
47231: LD_INT 14
47233: PUSH
47234: LD_INT 15
47236: PUSH
47237: LD_INT 16
47239: PUSH
47240: LD_INT 17
47242: PUSH
47243: LD_INT 18
47245: PUSH
47246: LD_INT 19
47248: PUSH
47249: LD_INT 20
47251: PUSH
47252: LD_INT 21
47254: PUSH
47255: LD_INT 22
47257: PUSH
47258: LD_INT 23
47260: PUSH
47261: LD_INT 24
47263: PUSH
47264: LD_INT 25
47266: PUSH
47267: LD_INT 26
47269: PUSH
47270: LD_INT 28
47272: PUSH
47273: LD_INT 30
47275: PUSH
47276: LD_INT 31
47278: PUSH
47279: LD_INT 32
47281: PUSH
47282: LD_INT 34
47284: PUSH
47285: LD_INT 36
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 101
47323: PUSH
47324: LD_INT 102
47326: PUSH
47327: LD_INT 103
47329: PUSH
47330: LD_INT 104
47332: PUSH
47333: LD_INT 105
47335: PUSH
47336: LD_INT 106
47338: PUSH
47339: LD_INT 107
47341: PUSH
47342: LD_INT 108
47344: PUSH
47345: LD_INT 109
47347: PUSH
47348: LD_INT 110
47350: PUSH
47351: LD_INT 111
47353: PUSH
47354: LD_INT 112
47356: PUSH
47357: LD_INT 114
47359: PUSH
47360: LD_INT 116
47362: PUSH
47363: LD_INT 117
47365: PUSH
47366: LD_INT 118
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: ST_TO_ADDR
47391: GO 49074
47393: LD_INT 12
47395: DOUBLE
47396: EQUAL
47397: IFTRUE 47401
47399: GO 47621
47401: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
47402: LD_ADDR_VAR 0 2
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: LD_INT 3
47415: PUSH
47416: LD_INT 4
47418: PUSH
47419: LD_INT 5
47421: PUSH
47422: LD_INT 6
47424: PUSH
47425: LD_INT 7
47427: PUSH
47428: LD_INT 8
47430: PUSH
47431: LD_INT 9
47433: PUSH
47434: LD_INT 10
47436: PUSH
47437: LD_INT 11
47439: PUSH
47440: LD_INT 12
47442: PUSH
47443: LD_INT 13
47445: PUSH
47446: LD_INT 14
47448: PUSH
47449: LD_INT 15
47451: PUSH
47452: LD_INT 16
47454: PUSH
47455: LD_INT 17
47457: PUSH
47458: LD_INT 18
47460: PUSH
47461: LD_INT 19
47463: PUSH
47464: LD_INT 20
47466: PUSH
47467: LD_INT 21
47469: PUSH
47470: LD_INT 22
47472: PUSH
47473: LD_INT 23
47475: PUSH
47476: LD_INT 24
47478: PUSH
47479: LD_INT 25
47481: PUSH
47482: LD_INT 26
47484: PUSH
47485: LD_INT 27
47487: PUSH
47488: LD_INT 28
47490: PUSH
47491: LD_INT 30
47493: PUSH
47494: LD_INT 31
47496: PUSH
47497: LD_INT 32
47499: PUSH
47500: LD_INT 33
47502: PUSH
47503: LD_INT 34
47505: PUSH
47506: LD_INT 36
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 101
47547: PUSH
47548: LD_INT 102
47550: PUSH
47551: LD_INT 103
47553: PUSH
47554: LD_INT 104
47556: PUSH
47557: LD_INT 105
47559: PUSH
47560: LD_INT 106
47562: PUSH
47563: LD_INT 107
47565: PUSH
47566: LD_INT 108
47568: PUSH
47569: LD_INT 109
47571: PUSH
47572: LD_INT 110
47574: PUSH
47575: LD_INT 111
47577: PUSH
47578: LD_INT 112
47580: PUSH
47581: LD_INT 113
47583: PUSH
47584: LD_INT 114
47586: PUSH
47587: LD_INT 116
47589: PUSH
47590: LD_INT 117
47592: PUSH
47593: LD_INT 118
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: ST_TO_ADDR
47619: GO 49074
47621: LD_INT 13
47623: DOUBLE
47624: EQUAL
47625: IFTRUE 47629
47627: GO 47837
47629: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
47630: LD_ADDR_VAR 0 2
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: LD_INT 3
47643: PUSH
47644: LD_INT 4
47646: PUSH
47647: LD_INT 5
47649: PUSH
47650: LD_INT 8
47652: PUSH
47653: LD_INT 9
47655: PUSH
47656: LD_INT 10
47658: PUSH
47659: LD_INT 11
47661: PUSH
47662: LD_INT 12
47664: PUSH
47665: LD_INT 14
47667: PUSH
47668: LD_INT 15
47670: PUSH
47671: LD_INT 16
47673: PUSH
47674: LD_INT 17
47676: PUSH
47677: LD_INT 18
47679: PUSH
47680: LD_INT 19
47682: PUSH
47683: LD_INT 20
47685: PUSH
47686: LD_INT 21
47688: PUSH
47689: LD_INT 22
47691: PUSH
47692: LD_INT 23
47694: PUSH
47695: LD_INT 24
47697: PUSH
47698: LD_INT 25
47700: PUSH
47701: LD_INT 26
47703: PUSH
47704: LD_INT 27
47706: PUSH
47707: LD_INT 28
47709: PUSH
47710: LD_INT 30
47712: PUSH
47713: LD_INT 31
47715: PUSH
47716: LD_INT 32
47718: PUSH
47719: LD_INT 33
47721: PUSH
47722: LD_INT 34
47724: PUSH
47725: LD_INT 36
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 101
47763: PUSH
47764: LD_INT 102
47766: PUSH
47767: LD_INT 103
47769: PUSH
47770: LD_INT 104
47772: PUSH
47773: LD_INT 105
47775: PUSH
47776: LD_INT 106
47778: PUSH
47779: LD_INT 107
47781: PUSH
47782: LD_INT 108
47784: PUSH
47785: LD_INT 109
47787: PUSH
47788: LD_INT 110
47790: PUSH
47791: LD_INT 111
47793: PUSH
47794: LD_INT 112
47796: PUSH
47797: LD_INT 113
47799: PUSH
47800: LD_INT 114
47802: PUSH
47803: LD_INT 116
47805: PUSH
47806: LD_INT 117
47808: PUSH
47809: LD_INT 118
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: ST_TO_ADDR
47835: GO 49074
47837: LD_INT 14
47839: DOUBLE
47840: EQUAL
47841: IFTRUE 47845
47843: GO 48069
47845: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
47846: LD_ADDR_VAR 0 2
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: LD_INT 3
47859: PUSH
47860: LD_INT 4
47862: PUSH
47863: LD_INT 5
47865: PUSH
47866: LD_INT 6
47868: PUSH
47869: LD_INT 7
47871: PUSH
47872: LD_INT 8
47874: PUSH
47875: LD_INT 9
47877: PUSH
47878: LD_INT 10
47880: PUSH
47881: LD_INT 11
47883: PUSH
47884: LD_INT 12
47886: PUSH
47887: LD_INT 13
47889: PUSH
47890: LD_INT 14
47892: PUSH
47893: LD_INT 15
47895: PUSH
47896: LD_INT 16
47898: PUSH
47899: LD_INT 17
47901: PUSH
47902: LD_INT 18
47904: PUSH
47905: LD_INT 19
47907: PUSH
47908: LD_INT 20
47910: PUSH
47911: LD_INT 21
47913: PUSH
47914: LD_INT 22
47916: PUSH
47917: LD_INT 23
47919: PUSH
47920: LD_INT 24
47922: PUSH
47923: LD_INT 25
47925: PUSH
47926: LD_INT 26
47928: PUSH
47929: LD_INT 27
47931: PUSH
47932: LD_INT 28
47934: PUSH
47935: LD_INT 29
47937: PUSH
47938: LD_INT 30
47940: PUSH
47941: LD_INT 31
47943: PUSH
47944: LD_INT 32
47946: PUSH
47947: LD_INT 33
47949: PUSH
47950: LD_INT 34
47952: PUSH
47953: LD_INT 36
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 101
47995: PUSH
47996: LD_INT 102
47998: PUSH
47999: LD_INT 103
48001: PUSH
48002: LD_INT 104
48004: PUSH
48005: LD_INT 105
48007: PUSH
48008: LD_INT 106
48010: PUSH
48011: LD_INT 107
48013: PUSH
48014: LD_INT 108
48016: PUSH
48017: LD_INT 109
48019: PUSH
48020: LD_INT 110
48022: PUSH
48023: LD_INT 111
48025: PUSH
48026: LD_INT 112
48028: PUSH
48029: LD_INT 113
48031: PUSH
48032: LD_INT 114
48034: PUSH
48035: LD_INT 116
48037: PUSH
48038: LD_INT 117
48040: PUSH
48041: LD_INT 118
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: ST_TO_ADDR
48067: GO 49074
48069: LD_INT 15
48071: DOUBLE
48072: EQUAL
48073: IFTRUE 48077
48075: GO 48301
48077: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
48078: LD_ADDR_VAR 0 2
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: LD_INT 3
48091: PUSH
48092: LD_INT 4
48094: PUSH
48095: LD_INT 5
48097: PUSH
48098: LD_INT 6
48100: PUSH
48101: LD_INT 7
48103: PUSH
48104: LD_INT 8
48106: PUSH
48107: LD_INT 9
48109: PUSH
48110: LD_INT 10
48112: PUSH
48113: LD_INT 11
48115: PUSH
48116: LD_INT 12
48118: PUSH
48119: LD_INT 13
48121: PUSH
48122: LD_INT 14
48124: PUSH
48125: LD_INT 15
48127: PUSH
48128: LD_INT 16
48130: PUSH
48131: LD_INT 17
48133: PUSH
48134: LD_INT 18
48136: PUSH
48137: LD_INT 19
48139: PUSH
48140: LD_INT 20
48142: PUSH
48143: LD_INT 21
48145: PUSH
48146: LD_INT 22
48148: PUSH
48149: LD_INT 23
48151: PUSH
48152: LD_INT 24
48154: PUSH
48155: LD_INT 25
48157: PUSH
48158: LD_INT 26
48160: PUSH
48161: LD_INT 27
48163: PUSH
48164: LD_INT 28
48166: PUSH
48167: LD_INT 29
48169: PUSH
48170: LD_INT 30
48172: PUSH
48173: LD_INT 31
48175: PUSH
48176: LD_INT 32
48178: PUSH
48179: LD_INT 33
48181: PUSH
48182: LD_INT 34
48184: PUSH
48185: LD_INT 36
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 101
48227: PUSH
48228: LD_INT 102
48230: PUSH
48231: LD_INT 103
48233: PUSH
48234: LD_INT 104
48236: PUSH
48237: LD_INT 105
48239: PUSH
48240: LD_INT 106
48242: PUSH
48243: LD_INT 107
48245: PUSH
48246: LD_INT 108
48248: PUSH
48249: LD_INT 109
48251: PUSH
48252: LD_INT 110
48254: PUSH
48255: LD_INT 111
48257: PUSH
48258: LD_INT 112
48260: PUSH
48261: LD_INT 113
48263: PUSH
48264: LD_INT 114
48266: PUSH
48267: LD_INT 116
48269: PUSH
48270: LD_INT 117
48272: PUSH
48273: LD_INT 118
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: ST_TO_ADDR
48299: GO 49074
48301: LD_INT 16
48303: DOUBLE
48304: EQUAL
48305: IFTRUE 48309
48307: GO 48445
48309: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
48310: LD_ADDR_VAR 0 2
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: LD_INT 4
48320: PUSH
48321: LD_INT 5
48323: PUSH
48324: LD_INT 7
48326: PUSH
48327: LD_INT 11
48329: PUSH
48330: LD_INT 12
48332: PUSH
48333: LD_INT 15
48335: PUSH
48336: LD_INT 16
48338: PUSH
48339: LD_INT 20
48341: PUSH
48342: LD_INT 21
48344: PUSH
48345: LD_INT 22
48347: PUSH
48348: LD_INT 23
48350: PUSH
48351: LD_INT 25
48353: PUSH
48354: LD_INT 26
48356: PUSH
48357: LD_INT 30
48359: PUSH
48360: LD_INT 31
48362: PUSH
48363: LD_INT 32
48365: PUSH
48366: LD_INT 33
48368: PUSH
48369: LD_INT 34
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 101
48395: PUSH
48396: LD_INT 102
48398: PUSH
48399: LD_INT 103
48401: PUSH
48402: LD_INT 106
48404: PUSH
48405: LD_INT 108
48407: PUSH
48408: LD_INT 112
48410: PUSH
48411: LD_INT 113
48413: PUSH
48414: LD_INT 114
48416: PUSH
48417: LD_INT 116
48419: PUSH
48420: LD_INT 117
48422: PUSH
48423: LD_INT 118
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: ST_TO_ADDR
48443: GO 49074
48445: LD_INT 17
48447: DOUBLE
48448: EQUAL
48449: IFTRUE 48453
48451: GO 48677
48453: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
48454: LD_ADDR_VAR 0 2
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: LD_INT 3
48467: PUSH
48468: LD_INT 4
48470: PUSH
48471: LD_INT 5
48473: PUSH
48474: LD_INT 6
48476: PUSH
48477: LD_INT 7
48479: PUSH
48480: LD_INT 8
48482: PUSH
48483: LD_INT 9
48485: PUSH
48486: LD_INT 10
48488: PUSH
48489: LD_INT 11
48491: PUSH
48492: LD_INT 12
48494: PUSH
48495: LD_INT 13
48497: PUSH
48498: LD_INT 14
48500: PUSH
48501: LD_INT 15
48503: PUSH
48504: LD_INT 16
48506: PUSH
48507: LD_INT 17
48509: PUSH
48510: LD_INT 18
48512: PUSH
48513: LD_INT 19
48515: PUSH
48516: LD_INT 20
48518: PUSH
48519: LD_INT 21
48521: PUSH
48522: LD_INT 22
48524: PUSH
48525: LD_INT 23
48527: PUSH
48528: LD_INT 24
48530: PUSH
48531: LD_INT 25
48533: PUSH
48534: LD_INT 26
48536: PUSH
48537: LD_INT 27
48539: PUSH
48540: LD_INT 28
48542: PUSH
48543: LD_INT 29
48545: PUSH
48546: LD_INT 30
48548: PUSH
48549: LD_INT 31
48551: PUSH
48552: LD_INT 32
48554: PUSH
48555: LD_INT 33
48557: PUSH
48558: LD_INT 34
48560: PUSH
48561: LD_INT 36
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 101
48603: PUSH
48604: LD_INT 102
48606: PUSH
48607: LD_INT 103
48609: PUSH
48610: LD_INT 104
48612: PUSH
48613: LD_INT 105
48615: PUSH
48616: LD_INT 106
48618: PUSH
48619: LD_INT 107
48621: PUSH
48622: LD_INT 108
48624: PUSH
48625: LD_INT 109
48627: PUSH
48628: LD_INT 110
48630: PUSH
48631: LD_INT 111
48633: PUSH
48634: LD_INT 112
48636: PUSH
48637: LD_INT 113
48639: PUSH
48640: LD_INT 114
48642: PUSH
48643: LD_INT 116
48645: PUSH
48646: LD_INT 117
48648: PUSH
48649: LD_INT 118
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: ST_TO_ADDR
48675: GO 49074
48677: LD_INT 18
48679: DOUBLE
48680: EQUAL
48681: IFTRUE 48685
48683: GO 48833
48685: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
48686: LD_ADDR_VAR 0 2
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: LD_INT 4
48696: PUSH
48697: LD_INT 5
48699: PUSH
48700: LD_INT 7
48702: PUSH
48703: LD_INT 11
48705: PUSH
48706: LD_INT 12
48708: PUSH
48709: LD_INT 15
48711: PUSH
48712: LD_INT 16
48714: PUSH
48715: LD_INT 20
48717: PUSH
48718: LD_INT 21
48720: PUSH
48721: LD_INT 22
48723: PUSH
48724: LD_INT 23
48726: PUSH
48727: LD_INT 25
48729: PUSH
48730: LD_INT 26
48732: PUSH
48733: LD_INT 30
48735: PUSH
48736: LD_INT 31
48738: PUSH
48739: LD_INT 32
48741: PUSH
48742: LD_INT 33
48744: PUSH
48745: LD_INT 34
48747: PUSH
48748: LD_INT 35
48750: PUSH
48751: LD_INT 36
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 101
48779: PUSH
48780: LD_INT 102
48782: PUSH
48783: LD_INT 103
48785: PUSH
48786: LD_INT 106
48788: PUSH
48789: LD_INT 108
48791: PUSH
48792: LD_INT 112
48794: PUSH
48795: LD_INT 113
48797: PUSH
48798: LD_INT 114
48800: PUSH
48801: LD_INT 115
48803: PUSH
48804: LD_INT 116
48806: PUSH
48807: LD_INT 117
48809: PUSH
48810: LD_INT 118
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: ST_TO_ADDR
48831: GO 49074
48833: LD_INT 19
48835: DOUBLE
48836: EQUAL
48837: IFTRUE 48841
48839: GO 49073
48841: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
48842: LD_ADDR_VAR 0 2
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: LD_INT 3
48855: PUSH
48856: LD_INT 4
48858: PUSH
48859: LD_INT 5
48861: PUSH
48862: LD_INT 6
48864: PUSH
48865: LD_INT 7
48867: PUSH
48868: LD_INT 8
48870: PUSH
48871: LD_INT 9
48873: PUSH
48874: LD_INT 10
48876: PUSH
48877: LD_INT 11
48879: PUSH
48880: LD_INT 12
48882: PUSH
48883: LD_INT 13
48885: PUSH
48886: LD_INT 14
48888: PUSH
48889: LD_INT 15
48891: PUSH
48892: LD_INT 16
48894: PUSH
48895: LD_INT 17
48897: PUSH
48898: LD_INT 18
48900: PUSH
48901: LD_INT 19
48903: PUSH
48904: LD_INT 20
48906: PUSH
48907: LD_INT 21
48909: PUSH
48910: LD_INT 22
48912: PUSH
48913: LD_INT 23
48915: PUSH
48916: LD_INT 24
48918: PUSH
48919: LD_INT 25
48921: PUSH
48922: LD_INT 26
48924: PUSH
48925: LD_INT 27
48927: PUSH
48928: LD_INT 28
48930: PUSH
48931: LD_INT 29
48933: PUSH
48934: LD_INT 30
48936: PUSH
48937: LD_INT 31
48939: PUSH
48940: LD_INT 32
48942: PUSH
48943: LD_INT 33
48945: PUSH
48946: LD_INT 34
48948: PUSH
48949: LD_INT 35
48951: PUSH
48952: LD_INT 36
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 101
48995: PUSH
48996: LD_INT 102
48998: PUSH
48999: LD_INT 103
49001: PUSH
49002: LD_INT 104
49004: PUSH
49005: LD_INT 105
49007: PUSH
49008: LD_INT 106
49010: PUSH
49011: LD_INT 107
49013: PUSH
49014: LD_INT 108
49016: PUSH
49017: LD_INT 109
49019: PUSH
49020: LD_INT 110
49022: PUSH
49023: LD_INT 111
49025: PUSH
49026: LD_INT 112
49028: PUSH
49029: LD_INT 113
49031: PUSH
49032: LD_INT 114
49034: PUSH
49035: LD_INT 115
49037: PUSH
49038: LD_INT 116
49040: PUSH
49041: LD_INT 117
49043: PUSH
49044: LD_INT 118
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: ST_TO_ADDR
49071: GO 49074
49073: POP
// end else
49074: GO 49305
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
49076: LD_ADDR_VAR 0 2
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 2
49086: PUSH
49087: LD_INT 3
49089: PUSH
49090: LD_INT 4
49092: PUSH
49093: LD_INT 5
49095: PUSH
49096: LD_INT 6
49098: PUSH
49099: LD_INT 7
49101: PUSH
49102: LD_INT 8
49104: PUSH
49105: LD_INT 9
49107: PUSH
49108: LD_INT 10
49110: PUSH
49111: LD_INT 11
49113: PUSH
49114: LD_INT 12
49116: PUSH
49117: LD_INT 13
49119: PUSH
49120: LD_INT 14
49122: PUSH
49123: LD_INT 15
49125: PUSH
49126: LD_INT 16
49128: PUSH
49129: LD_INT 17
49131: PUSH
49132: LD_INT 18
49134: PUSH
49135: LD_INT 19
49137: PUSH
49138: LD_INT 20
49140: PUSH
49141: LD_INT 21
49143: PUSH
49144: LD_INT 22
49146: PUSH
49147: LD_INT 23
49149: PUSH
49150: LD_INT 24
49152: PUSH
49153: LD_INT 25
49155: PUSH
49156: LD_INT 26
49158: PUSH
49159: LD_INT 27
49161: PUSH
49162: LD_INT 28
49164: PUSH
49165: LD_INT 29
49167: PUSH
49168: LD_INT 30
49170: PUSH
49171: LD_INT 31
49173: PUSH
49174: LD_INT 32
49176: PUSH
49177: LD_INT 33
49179: PUSH
49180: LD_INT 34
49182: PUSH
49183: LD_INT 35
49185: PUSH
49186: LD_INT 36
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 101
49229: PUSH
49230: LD_INT 102
49232: PUSH
49233: LD_INT 103
49235: PUSH
49236: LD_INT 104
49238: PUSH
49239: LD_INT 105
49241: PUSH
49242: LD_INT 106
49244: PUSH
49245: LD_INT 107
49247: PUSH
49248: LD_INT 108
49250: PUSH
49251: LD_INT 109
49253: PUSH
49254: LD_INT 110
49256: PUSH
49257: LD_INT 111
49259: PUSH
49260: LD_INT 112
49262: PUSH
49263: LD_INT 113
49265: PUSH
49266: LD_INT 114
49268: PUSH
49269: LD_INT 115
49271: PUSH
49272: LD_INT 116
49274: PUSH
49275: LD_INT 117
49277: PUSH
49278: LD_INT 118
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: ST_TO_ADDR
// if result then
49305: LD_VAR 0 2
49309: IFFALSE 50095
// begin normal :=  ;
49311: LD_ADDR_VAR 0 5
49315: PUSH
49316: LD_STRING 
49318: ST_TO_ADDR
// hardcore :=  ;
49319: LD_ADDR_VAR 0 6
49323: PUSH
49324: LD_STRING 
49326: ST_TO_ADDR
// active :=  ;
49327: LD_ADDR_VAR 0 7
49331: PUSH
49332: LD_STRING 
49334: ST_TO_ADDR
// for i = 1 to normalCounter do
49335: LD_ADDR_VAR 0 8
49339: PUSH
49340: DOUBLE
49341: LD_INT 1
49343: DEC
49344: ST_TO_ADDR
49345: LD_EXP 35
49349: PUSH
49350: FOR_TO
49351: IFFALSE 49452
// begin tmp := 0 ;
49353: LD_ADDR_VAR 0 3
49357: PUSH
49358: LD_STRING 0
49360: ST_TO_ADDR
// if result [ 1 ] then
49361: LD_VAR 0 2
49365: PUSH
49366: LD_INT 1
49368: ARRAY
49369: IFFALSE 49434
// if result [ 1 ] [ 1 ] = i then
49371: LD_VAR 0 2
49375: PUSH
49376: LD_INT 1
49378: ARRAY
49379: PUSH
49380: LD_INT 1
49382: ARRAY
49383: PUSH
49384: LD_VAR 0 8
49388: EQUAL
49389: IFFALSE 49434
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
49391: LD_ADDR_VAR 0 2
49395: PUSH
49396: LD_VAR 0 2
49400: PPUSH
49401: LD_INT 1
49403: PPUSH
49404: LD_VAR 0 2
49408: PUSH
49409: LD_INT 1
49411: ARRAY
49412: PPUSH
49413: LD_INT 1
49415: PPUSH
49416: CALL_OW 3
49420: PPUSH
49421: CALL_OW 1
49425: ST_TO_ADDR
// tmp := 1 ;
49426: LD_ADDR_VAR 0 3
49430: PUSH
49431: LD_STRING 1
49433: ST_TO_ADDR
// end ; normal := normal & tmp ;
49434: LD_ADDR_VAR 0 5
49438: PUSH
49439: LD_VAR 0 5
49443: PUSH
49444: LD_VAR 0 3
49448: STR
49449: ST_TO_ADDR
// end ;
49450: GO 49350
49452: POP
49453: POP
// for i = 1 to hardcoreCounter do
49454: LD_ADDR_VAR 0 8
49458: PUSH
49459: DOUBLE
49460: LD_INT 1
49462: DEC
49463: ST_TO_ADDR
49464: LD_EXP 36
49468: PUSH
49469: FOR_TO
49470: IFFALSE 49575
// begin tmp := 0 ;
49472: LD_ADDR_VAR 0 3
49476: PUSH
49477: LD_STRING 0
49479: ST_TO_ADDR
// if result [ 2 ] then
49480: LD_VAR 0 2
49484: PUSH
49485: LD_INT 2
49487: ARRAY
49488: IFFALSE 49557
// if result [ 2 ] [ 1 ] = 100 + i then
49490: LD_VAR 0 2
49494: PUSH
49495: LD_INT 2
49497: ARRAY
49498: PUSH
49499: LD_INT 1
49501: ARRAY
49502: PUSH
49503: LD_INT 100
49505: PUSH
49506: LD_VAR 0 8
49510: PLUS
49511: EQUAL
49512: IFFALSE 49557
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
49514: LD_ADDR_VAR 0 2
49518: PUSH
49519: LD_VAR 0 2
49523: PPUSH
49524: LD_INT 2
49526: PPUSH
49527: LD_VAR 0 2
49531: PUSH
49532: LD_INT 2
49534: ARRAY
49535: PPUSH
49536: LD_INT 1
49538: PPUSH
49539: CALL_OW 3
49543: PPUSH
49544: CALL_OW 1
49548: ST_TO_ADDR
// tmp := 1 ;
49549: LD_ADDR_VAR 0 3
49553: PUSH
49554: LD_STRING 1
49556: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
49557: LD_ADDR_VAR 0 6
49561: PUSH
49562: LD_VAR 0 6
49566: PUSH
49567: LD_VAR 0 3
49571: STR
49572: ST_TO_ADDR
// end ;
49573: GO 49469
49575: POP
49576: POP
// if isGameLoad then
49577: LD_VAR 0 1
49581: IFFALSE 50056
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
49583: LD_ADDR_VAR 0 4
49587: PUSH
49588: LD_EXP 39
49592: PUSH
49593: LD_EXP 38
49597: PUSH
49598: LD_EXP 40
49602: PUSH
49603: LD_EXP 37
49607: PUSH
49608: LD_EXP 41
49612: PUSH
49613: LD_EXP 42
49617: PUSH
49618: LD_EXP 43
49622: PUSH
49623: LD_EXP 44
49627: PUSH
49628: LD_EXP 45
49632: PUSH
49633: LD_EXP 46
49637: PUSH
49638: LD_EXP 47
49642: PUSH
49643: LD_EXP 48
49647: PUSH
49648: LD_EXP 49
49652: PUSH
49653: LD_EXP 50
49657: PUSH
49658: LD_EXP 58
49662: PUSH
49663: LD_EXP 59
49667: PUSH
49668: LD_EXP 60
49672: PUSH
49673: LD_EXP 61
49677: PUSH
49678: LD_EXP 63
49682: PUSH
49683: LD_EXP 64
49687: PUSH
49688: LD_EXP 65
49692: PUSH
49693: LD_EXP 68
49697: PUSH
49698: LD_EXP 70
49702: PUSH
49703: LD_EXP 71
49707: PUSH
49708: LD_EXP 72
49712: PUSH
49713: LD_EXP 74
49717: PUSH
49718: LD_EXP 75
49722: PUSH
49723: LD_EXP 78
49727: PUSH
49728: LD_EXP 79
49732: PUSH
49733: LD_EXP 80
49737: PUSH
49738: LD_EXP 81
49742: PUSH
49743: LD_EXP 82
49747: PUSH
49748: LD_EXP 83
49752: PUSH
49753: LD_EXP 84
49757: PUSH
49758: LD_EXP 85
49762: PUSH
49763: LD_EXP 86
49767: PUSH
49768: LD_EXP 51
49772: PUSH
49773: LD_EXP 52
49777: PUSH
49778: LD_EXP 55
49782: PUSH
49783: LD_EXP 56
49787: PUSH
49788: LD_EXP 57
49792: PUSH
49793: LD_EXP 53
49797: PUSH
49798: LD_EXP 54
49802: PUSH
49803: LD_EXP 62
49807: PUSH
49808: LD_EXP 66
49812: PUSH
49813: LD_EXP 67
49817: PUSH
49818: LD_EXP 69
49822: PUSH
49823: LD_EXP 73
49827: PUSH
49828: LD_EXP 76
49832: PUSH
49833: LD_EXP 77
49837: PUSH
49838: LD_EXP 87
49842: PUSH
49843: LD_EXP 88
49847: PUSH
49848: LD_EXP 89
49852: PUSH
49853: LD_EXP 90
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: ST_TO_ADDR
// tmp :=  ;
49914: LD_ADDR_VAR 0 3
49918: PUSH
49919: LD_STRING 
49921: ST_TO_ADDR
// for i = 1 to normalCounter do
49922: LD_ADDR_VAR 0 8
49926: PUSH
49927: DOUBLE
49928: LD_INT 1
49930: DEC
49931: ST_TO_ADDR
49932: LD_EXP 35
49936: PUSH
49937: FOR_TO
49938: IFFALSE 49974
// begin if flags [ i ] then
49940: LD_VAR 0 4
49944: PUSH
49945: LD_VAR 0 8
49949: ARRAY
49950: IFFALSE 49972
// tmp := tmp & i & ; ;
49952: LD_ADDR_VAR 0 3
49956: PUSH
49957: LD_VAR 0 3
49961: PUSH
49962: LD_VAR 0 8
49966: STR
49967: PUSH
49968: LD_STRING ;
49970: STR
49971: ST_TO_ADDR
// end ;
49972: GO 49937
49974: POP
49975: POP
// for i = 1 to hardcoreCounter do
49976: LD_ADDR_VAR 0 8
49980: PUSH
49981: DOUBLE
49982: LD_INT 1
49984: DEC
49985: ST_TO_ADDR
49986: LD_EXP 36
49990: PUSH
49991: FOR_TO
49992: IFFALSE 50038
// begin if flags [ normalCounter + i ] then
49994: LD_VAR 0 4
49998: PUSH
49999: LD_EXP 35
50003: PUSH
50004: LD_VAR 0 8
50008: PLUS
50009: ARRAY
50010: IFFALSE 50036
// tmp := tmp & ( 100 + i ) & ; ;
50012: LD_ADDR_VAR 0 3
50016: PUSH
50017: LD_VAR 0 3
50021: PUSH
50022: LD_INT 100
50024: PUSH
50025: LD_VAR 0 8
50029: PLUS
50030: STR
50031: PUSH
50032: LD_STRING ;
50034: STR
50035: ST_TO_ADDR
// end ;
50036: GO 49991
50038: POP
50039: POP
// if tmp then
50040: LD_VAR 0 3
50044: IFFALSE 50056
// active := tmp ;
50046: LD_ADDR_VAR 0 7
50050: PUSH
50051: LD_VAR 0 3
50055: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
50056: LD_STRING getStreamItemsFromMission("
50058: PUSH
50059: LD_VAR 0 5
50063: STR
50064: PUSH
50065: LD_STRING ","
50067: STR
50068: PUSH
50069: LD_VAR 0 6
50073: STR
50074: PUSH
50075: LD_STRING ","
50077: STR
50078: PUSH
50079: LD_VAR 0 7
50083: STR
50084: PUSH
50085: LD_STRING ")
50087: STR
50088: PPUSH
50089: CALL_OW 559
// end else
50093: GO 50102
// ToLua ( getStreamItemsFromMission("","","") ) ;
50095: LD_STRING getStreamItemsFromMission("","","")
50097: PPUSH
50098: CALL_OW 559
// end ;
50102: LD_VAR 0 2
50106: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
50107: LD_EXP 34
50111: PUSH
50112: LD_EXP 39
50116: AND
50117: IFFALSE 50241
50119: GO 50121
50121: DISABLE
50122: LD_INT 0
50124: PPUSH
50125: PPUSH
// begin enable ;
50126: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
50127: LD_ADDR_VAR 0 2
50131: PUSH
50132: LD_INT 22
50134: PUSH
50135: LD_OWVAR 2
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 2
50146: PUSH
50147: LD_INT 34
50149: PUSH
50150: LD_INT 7
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 34
50159: PUSH
50160: LD_INT 45
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 34
50169: PUSH
50170: LD_INT 28
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 34
50179: PUSH
50180: LD_INT 47
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PPUSH
50198: CALL_OW 69
50202: ST_TO_ADDR
// if not tmp then
50203: LD_VAR 0 2
50207: NOT
50208: IFFALSE 50212
// exit ;
50210: GO 50241
// for i in tmp do
50212: LD_ADDR_VAR 0 1
50216: PUSH
50217: LD_VAR 0 2
50221: PUSH
50222: FOR_IN
50223: IFFALSE 50239
// begin SetLives ( i , 0 ) ;
50225: LD_VAR 0 1
50229: PPUSH
50230: LD_INT 0
50232: PPUSH
50233: CALL_OW 234
// end ;
50237: GO 50222
50239: POP
50240: POP
// end ;
50241: PPOPN 2
50243: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
50244: LD_EXP 34
50248: PUSH
50249: LD_EXP 40
50253: AND
50254: IFFALSE 50338
50256: GO 50258
50258: DISABLE
50259: LD_INT 0
50261: PPUSH
50262: PPUSH
// begin enable ;
50263: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
50264: LD_ADDR_VAR 0 2
50268: PUSH
50269: LD_INT 22
50271: PUSH
50272: LD_OWVAR 2
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 32
50283: PUSH
50284: LD_INT 3
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PPUSH
50295: CALL_OW 69
50299: ST_TO_ADDR
// if not tmp then
50300: LD_VAR 0 2
50304: NOT
50305: IFFALSE 50309
// exit ;
50307: GO 50338
// for i in tmp do
50309: LD_ADDR_VAR 0 1
50313: PUSH
50314: LD_VAR 0 2
50318: PUSH
50319: FOR_IN
50320: IFFALSE 50336
// begin SetLives ( i , 0 ) ;
50322: LD_VAR 0 1
50326: PPUSH
50327: LD_INT 0
50329: PPUSH
50330: CALL_OW 234
// end ;
50334: GO 50319
50336: POP
50337: POP
// end ;
50338: PPOPN 2
50340: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
50341: LD_EXP 34
50345: PUSH
50346: LD_EXP 37
50350: AND
50351: IFFALSE 50444
50353: GO 50355
50355: DISABLE
50356: LD_INT 0
50358: PPUSH
// begin enable ;
50359: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
50360: LD_ADDR_VAR 0 1
50364: PUSH
50365: LD_INT 22
50367: PUSH
50368: LD_OWVAR 2
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: LD_INT 25
50382: PUSH
50383: LD_INT 5
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 25
50392: PUSH
50393: LD_INT 9
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 25
50402: PUSH
50403: LD_INT 8
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PPUSH
50420: CALL_OW 69
50424: PUSH
50425: FOR_IN
50426: IFFALSE 50442
// begin SetClass ( i , 1 ) ;
50428: LD_VAR 0 1
50432: PPUSH
50433: LD_INT 1
50435: PPUSH
50436: CALL_OW 336
// end ;
50440: GO 50425
50442: POP
50443: POP
// end ;
50444: PPOPN 1
50446: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
50447: LD_EXP 34
50451: PUSH
50452: LD_EXP 38
50456: AND
50457: PUSH
50458: LD_OWVAR 65
50462: PUSH
50463: LD_INT 7
50465: LESS
50466: AND
50467: IFFALSE 50481
50469: GO 50471
50471: DISABLE
// begin enable ;
50472: ENABLE
// game_speed := 7 ;
50473: LD_ADDR_OWVAR 65
50477: PUSH
50478: LD_INT 7
50480: ST_TO_ADDR
// end ;
50481: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
50482: LD_EXP 34
50486: PUSH
50487: LD_EXP 41
50491: AND
50492: IFFALSE 50694
50494: GO 50496
50496: DISABLE
50497: LD_INT 0
50499: PPUSH
50500: PPUSH
50501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
50502: LD_ADDR_VAR 0 3
50506: PUSH
50507: LD_INT 81
50509: PUSH
50510: LD_OWVAR 2
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 21
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PPUSH
50533: CALL_OW 69
50537: ST_TO_ADDR
// if not tmp then
50538: LD_VAR 0 3
50542: NOT
50543: IFFALSE 50547
// exit ;
50545: GO 50694
// if tmp > 5 then
50547: LD_VAR 0 3
50551: PUSH
50552: LD_INT 5
50554: GREATER
50555: IFFALSE 50567
// k := 5 else
50557: LD_ADDR_VAR 0 2
50561: PUSH
50562: LD_INT 5
50564: ST_TO_ADDR
50565: GO 50577
// k := tmp ;
50567: LD_ADDR_VAR 0 2
50571: PUSH
50572: LD_VAR 0 3
50576: ST_TO_ADDR
// for i := 1 to k do
50577: LD_ADDR_VAR 0 1
50581: PUSH
50582: DOUBLE
50583: LD_INT 1
50585: DEC
50586: ST_TO_ADDR
50587: LD_VAR 0 2
50591: PUSH
50592: FOR_TO
50593: IFFALSE 50692
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
50595: LD_VAR 0 3
50599: PUSH
50600: LD_VAR 0 1
50604: ARRAY
50605: PPUSH
50606: LD_VAR 0 1
50610: PUSH
50611: LD_INT 4
50613: MOD
50614: PUSH
50615: LD_INT 1
50617: PLUS
50618: PPUSH
50619: CALL_OW 259
50623: PUSH
50624: LD_INT 10
50626: LESS
50627: IFFALSE 50690
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
50629: LD_VAR 0 3
50633: PUSH
50634: LD_VAR 0 1
50638: ARRAY
50639: PPUSH
50640: LD_VAR 0 1
50644: PUSH
50645: LD_INT 4
50647: MOD
50648: PUSH
50649: LD_INT 1
50651: PLUS
50652: PPUSH
50653: LD_VAR 0 3
50657: PUSH
50658: LD_VAR 0 1
50662: ARRAY
50663: PPUSH
50664: LD_VAR 0 1
50668: PUSH
50669: LD_INT 4
50671: MOD
50672: PUSH
50673: LD_INT 1
50675: PLUS
50676: PPUSH
50677: CALL_OW 259
50681: PUSH
50682: LD_INT 1
50684: PLUS
50685: PPUSH
50686: CALL_OW 237
50690: GO 50592
50692: POP
50693: POP
// end ;
50694: PPOPN 3
50696: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
50697: LD_EXP 34
50701: PUSH
50702: LD_EXP 42
50706: AND
50707: IFFALSE 50727
50709: GO 50711
50711: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
50712: LD_INT 4
50714: PPUSH
50715: LD_OWVAR 2
50719: PPUSH
50720: LD_INT 0
50722: PPUSH
50723: CALL_OW 324
50727: END
// every 0 0$1 trigger StreamModeActive and sShovel do
50728: LD_EXP 34
50732: PUSH
50733: LD_EXP 71
50737: AND
50738: IFFALSE 50758
50740: GO 50742
50742: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
50743: LD_INT 19
50745: PPUSH
50746: LD_OWVAR 2
50750: PPUSH
50751: LD_INT 0
50753: PPUSH
50754: CALL_OW 324
50758: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
50759: LD_EXP 34
50763: PUSH
50764: LD_EXP 43
50768: AND
50769: IFFALSE 50871
50771: GO 50773
50773: DISABLE
50774: LD_INT 0
50776: PPUSH
50777: PPUSH
// begin enable ;
50778: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
50779: LD_ADDR_VAR 0 2
50783: PUSH
50784: LD_INT 22
50786: PUSH
50787: LD_OWVAR 2
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: LD_INT 34
50801: PUSH
50802: LD_INT 11
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 34
50811: PUSH
50812: LD_INT 30
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: LIST
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PPUSH
50828: CALL_OW 69
50832: ST_TO_ADDR
// if not tmp then
50833: LD_VAR 0 2
50837: NOT
50838: IFFALSE 50842
// exit ;
50840: GO 50871
// for i in tmp do
50842: LD_ADDR_VAR 0 1
50846: PUSH
50847: LD_VAR 0 2
50851: PUSH
50852: FOR_IN
50853: IFFALSE 50869
// begin SetLives ( i , 0 ) ;
50855: LD_VAR 0 1
50859: PPUSH
50860: LD_INT 0
50862: PPUSH
50863: CALL_OW 234
// end ;
50867: GO 50852
50869: POP
50870: POP
// end ;
50871: PPOPN 2
50873: END
// every 0 0$1 trigger StreamModeActive and sBunker do
50874: LD_EXP 34
50878: PUSH
50879: LD_EXP 44
50883: AND
50884: IFFALSE 50904
50886: GO 50888
50888: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
50889: LD_INT 32
50891: PPUSH
50892: LD_OWVAR 2
50896: PPUSH
50897: LD_INT 0
50899: PPUSH
50900: CALL_OW 324
50904: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
50905: LD_EXP 34
50909: PUSH
50910: LD_EXP 45
50914: AND
50915: IFFALSE 51096
50917: GO 50919
50919: DISABLE
50920: LD_INT 0
50922: PPUSH
50923: PPUSH
50924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
50925: LD_ADDR_VAR 0 2
50929: PUSH
50930: LD_INT 22
50932: PUSH
50933: LD_OWVAR 2
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 33
50944: PUSH
50945: LD_INT 3
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PPUSH
50956: CALL_OW 69
50960: ST_TO_ADDR
// if not tmp then
50961: LD_VAR 0 2
50965: NOT
50966: IFFALSE 50970
// exit ;
50968: GO 51096
// side := 0 ;
50970: LD_ADDR_VAR 0 3
50974: PUSH
50975: LD_INT 0
50977: ST_TO_ADDR
// for i := 1 to 8 do
50978: LD_ADDR_VAR 0 1
50982: PUSH
50983: DOUBLE
50984: LD_INT 1
50986: DEC
50987: ST_TO_ADDR
50988: LD_INT 8
50990: PUSH
50991: FOR_TO
50992: IFFALSE 51040
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
50994: LD_OWVAR 2
50998: PUSH
50999: LD_VAR 0 1
51003: NONEQUAL
51004: PUSH
51005: LD_OWVAR 2
51009: PPUSH
51010: LD_VAR 0 1
51014: PPUSH
51015: CALL_OW 81
51019: PUSH
51020: LD_INT 2
51022: EQUAL
51023: AND
51024: IFFALSE 51038
// begin side := i ;
51026: LD_ADDR_VAR 0 3
51030: PUSH
51031: LD_VAR 0 1
51035: ST_TO_ADDR
// break ;
51036: GO 51040
// end ;
51038: GO 50991
51040: POP
51041: POP
// if not side then
51042: LD_VAR 0 3
51046: NOT
51047: IFFALSE 51051
// exit ;
51049: GO 51096
// for i := 1 to tmp do
51051: LD_ADDR_VAR 0 1
51055: PUSH
51056: DOUBLE
51057: LD_INT 1
51059: DEC
51060: ST_TO_ADDR
51061: LD_VAR 0 2
51065: PUSH
51066: FOR_TO
51067: IFFALSE 51094
// if Prob ( 60 ) then
51069: LD_INT 60
51071: PPUSH
51072: CALL_OW 13
51076: IFFALSE 51092
// SetSide ( i , side ) ;
51078: LD_VAR 0 1
51082: PPUSH
51083: LD_VAR 0 3
51087: PPUSH
51088: CALL_OW 235
51092: GO 51066
51094: POP
51095: POP
// end ;
51096: PPOPN 3
51098: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
51099: LD_EXP 34
51103: PUSH
51104: LD_EXP 47
51108: AND
51109: IFFALSE 51228
51111: GO 51113
51113: DISABLE
51114: LD_INT 0
51116: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
51117: LD_ADDR_VAR 0 1
51121: PUSH
51122: LD_INT 22
51124: PUSH
51125: LD_OWVAR 2
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 21
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 3
51146: PUSH
51147: LD_INT 23
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: LIST
51165: PPUSH
51166: CALL_OW 69
51170: PUSH
51171: FOR_IN
51172: IFFALSE 51226
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
51174: LD_VAR 0 1
51178: PPUSH
51179: CALL_OW 257
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: LD_INT 2
51189: PUSH
51190: LD_INT 3
51192: PUSH
51193: LD_INT 4
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: IN
51202: IFFALSE 51224
// SetClass ( un , rand ( 1 , 4 ) ) ;
51204: LD_VAR 0 1
51208: PPUSH
51209: LD_INT 1
51211: PPUSH
51212: LD_INT 4
51214: PPUSH
51215: CALL_OW 12
51219: PPUSH
51220: CALL_OW 336
51224: GO 51171
51226: POP
51227: POP
// end ;
51228: PPOPN 1
51230: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
51231: LD_EXP 34
51235: PUSH
51236: LD_EXP 46
51240: AND
51241: IFFALSE 51320
51243: GO 51245
51245: DISABLE
51246: LD_INT 0
51248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
51249: LD_ADDR_VAR 0 1
51253: PUSH
51254: LD_INT 22
51256: PUSH
51257: LD_OWVAR 2
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 21
51268: PUSH
51269: LD_INT 3
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PPUSH
51280: CALL_OW 69
51284: ST_TO_ADDR
// if not tmp then
51285: LD_VAR 0 1
51289: NOT
51290: IFFALSE 51294
// exit ;
51292: GO 51320
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
51294: LD_VAR 0 1
51298: PUSH
51299: LD_INT 1
51301: PPUSH
51302: LD_VAR 0 1
51306: PPUSH
51307: CALL_OW 12
51311: ARRAY
51312: PPUSH
51313: LD_INT 100
51315: PPUSH
51316: CALL_OW 234
// end ;
51320: PPOPN 1
51322: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
51323: LD_EXP 34
51327: PUSH
51328: LD_EXP 48
51332: AND
51333: IFFALSE 51431
51335: GO 51337
51337: DISABLE
51338: LD_INT 0
51340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
51341: LD_ADDR_VAR 0 1
51345: PUSH
51346: LD_INT 22
51348: PUSH
51349: LD_OWVAR 2
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 21
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PPUSH
51372: CALL_OW 69
51376: ST_TO_ADDR
// if not tmp then
51377: LD_VAR 0 1
51381: NOT
51382: IFFALSE 51386
// exit ;
51384: GO 51431
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
51386: LD_VAR 0 1
51390: PUSH
51391: LD_INT 1
51393: PPUSH
51394: LD_VAR 0 1
51398: PPUSH
51399: CALL_OW 12
51403: ARRAY
51404: PPUSH
51405: LD_INT 1
51407: PPUSH
51408: LD_INT 4
51410: PPUSH
51411: CALL_OW 12
51415: PPUSH
51416: LD_INT 3000
51418: PPUSH
51419: LD_INT 9000
51421: PPUSH
51422: CALL_OW 12
51426: PPUSH
51427: CALL_OW 492
// end ;
51431: PPOPN 1
51433: END
// every 0 0$1 trigger StreamModeActive and sDepot do
51434: LD_EXP 34
51438: PUSH
51439: LD_EXP 49
51443: AND
51444: IFFALSE 51464
51446: GO 51448
51448: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
51449: LD_INT 1
51451: PPUSH
51452: LD_OWVAR 2
51456: PPUSH
51457: LD_INT 0
51459: PPUSH
51460: CALL_OW 324
51464: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
51465: LD_EXP 34
51469: PUSH
51470: LD_EXP 50
51474: AND
51475: IFFALSE 51558
51477: GO 51479
51479: DISABLE
51480: LD_INT 0
51482: PPUSH
51483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
51484: LD_ADDR_VAR 0 2
51488: PUSH
51489: LD_INT 22
51491: PUSH
51492: LD_OWVAR 2
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 21
51503: PUSH
51504: LD_INT 3
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PPUSH
51515: CALL_OW 69
51519: ST_TO_ADDR
// if not tmp then
51520: LD_VAR 0 2
51524: NOT
51525: IFFALSE 51529
// exit ;
51527: GO 51558
// for i in tmp do
51529: LD_ADDR_VAR 0 1
51533: PUSH
51534: LD_VAR 0 2
51538: PUSH
51539: FOR_IN
51540: IFFALSE 51556
// SetBLevel ( i , 10 ) ;
51542: LD_VAR 0 1
51546: PPUSH
51547: LD_INT 10
51549: PPUSH
51550: CALL_OW 241
51554: GO 51539
51556: POP
51557: POP
// end ;
51558: PPOPN 2
51560: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
51561: LD_EXP 34
51565: PUSH
51566: LD_EXP 51
51570: AND
51571: IFFALSE 51682
51573: GO 51575
51575: DISABLE
51576: LD_INT 0
51578: PPUSH
51579: PPUSH
51580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51581: LD_ADDR_VAR 0 3
51585: PUSH
51586: LD_INT 22
51588: PUSH
51589: LD_OWVAR 2
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 25
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PPUSH
51612: CALL_OW 69
51616: ST_TO_ADDR
// if not tmp then
51617: LD_VAR 0 3
51621: NOT
51622: IFFALSE 51626
// exit ;
51624: GO 51682
// un := tmp [ rand ( 1 , tmp ) ] ;
51626: LD_ADDR_VAR 0 2
51630: PUSH
51631: LD_VAR 0 3
51635: PUSH
51636: LD_INT 1
51638: PPUSH
51639: LD_VAR 0 3
51643: PPUSH
51644: CALL_OW 12
51648: ARRAY
51649: ST_TO_ADDR
// if Crawls ( un ) then
51650: LD_VAR 0 2
51654: PPUSH
51655: CALL_OW 318
51659: IFFALSE 51670
// ComWalk ( un ) ;
51661: LD_VAR 0 2
51665: PPUSH
51666: CALL_OW 138
// SetClass ( un , class_sniper ) ;
51670: LD_VAR 0 2
51674: PPUSH
51675: LD_INT 5
51677: PPUSH
51678: CALL_OW 336
// end ;
51682: PPOPN 3
51684: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
51685: LD_EXP 34
51689: PUSH
51690: LD_EXP 52
51694: AND
51695: PUSH
51696: LD_OWVAR 67
51700: PUSH
51701: LD_INT 4
51703: LESS
51704: AND
51705: IFFALSE 51724
51707: GO 51709
51709: DISABLE
// begin Difficulty := Difficulty + 1 ;
51710: LD_ADDR_OWVAR 67
51714: PUSH
51715: LD_OWVAR 67
51719: PUSH
51720: LD_INT 1
51722: PLUS
51723: ST_TO_ADDR
// end ;
51724: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
51725: LD_EXP 34
51729: PUSH
51730: LD_EXP 53
51734: AND
51735: IFFALSE 51838
51737: GO 51739
51739: DISABLE
51740: LD_INT 0
51742: PPUSH
// begin for i := 1 to 5 do
51743: LD_ADDR_VAR 0 1
51747: PUSH
51748: DOUBLE
51749: LD_INT 1
51751: DEC
51752: ST_TO_ADDR
51753: LD_INT 5
51755: PUSH
51756: FOR_TO
51757: IFFALSE 51836
// begin uc_nation := nation_nature ;
51759: LD_ADDR_OWVAR 21
51763: PUSH
51764: LD_INT 0
51766: ST_TO_ADDR
// uc_side := 0 ;
51767: LD_ADDR_OWVAR 20
51771: PUSH
51772: LD_INT 0
51774: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51775: LD_ADDR_OWVAR 29
51779: PUSH
51780: LD_INT 12
51782: PUSH
51783: LD_INT 12
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: ST_TO_ADDR
// hc_agressivity := 20 ;
51790: LD_ADDR_OWVAR 35
51794: PUSH
51795: LD_INT 20
51797: ST_TO_ADDR
// hc_class := class_tiger ;
51798: LD_ADDR_OWVAR 28
51802: PUSH
51803: LD_INT 14
51805: ST_TO_ADDR
// hc_gallery :=  ;
51806: LD_ADDR_OWVAR 33
51810: PUSH
51811: LD_STRING 
51813: ST_TO_ADDR
// hc_name :=  ;
51814: LD_ADDR_OWVAR 26
51818: PUSH
51819: LD_STRING 
51821: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
51822: CALL_OW 44
51826: PPUSH
51827: LD_INT 0
51829: PPUSH
51830: CALL_OW 51
// end ;
51834: GO 51756
51836: POP
51837: POP
// end ;
51838: PPOPN 1
51840: END
// every 0 0$1 trigger StreamModeActive and sBomb do
51841: LD_EXP 34
51845: PUSH
51846: LD_EXP 54
51850: AND
51851: IFFALSE 51860
51853: GO 51855
51855: DISABLE
// StreamSibBomb ;
51856: CALL 51861 0 0
51860: END
// export function StreamSibBomb ; var i , x , y ; begin
51861: LD_INT 0
51863: PPUSH
51864: PPUSH
51865: PPUSH
51866: PPUSH
// result := false ;
51867: LD_ADDR_VAR 0 1
51871: PUSH
51872: LD_INT 0
51874: ST_TO_ADDR
// for i := 1 to 16 do
51875: LD_ADDR_VAR 0 2
51879: PUSH
51880: DOUBLE
51881: LD_INT 1
51883: DEC
51884: ST_TO_ADDR
51885: LD_INT 16
51887: PUSH
51888: FOR_TO
51889: IFFALSE 52088
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
51891: LD_ADDR_VAR 0 3
51895: PUSH
51896: LD_INT 10
51898: PUSH
51899: LD_INT 20
51901: PUSH
51902: LD_INT 30
51904: PUSH
51905: LD_INT 40
51907: PUSH
51908: LD_INT 50
51910: PUSH
51911: LD_INT 60
51913: PUSH
51914: LD_INT 70
51916: PUSH
51917: LD_INT 80
51919: PUSH
51920: LD_INT 90
51922: PUSH
51923: LD_INT 100
51925: PUSH
51926: LD_INT 110
51928: PUSH
51929: LD_INT 120
51931: PUSH
51932: LD_INT 130
51934: PUSH
51935: LD_INT 140
51937: PUSH
51938: LD_INT 150
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PPUSH
51961: LD_INT 15
51963: PPUSH
51964: CALL_OW 12
51968: ARRAY
51969: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
51970: LD_ADDR_VAR 0 4
51974: PUSH
51975: LD_INT 10
51977: PUSH
51978: LD_INT 20
51980: PUSH
51981: LD_INT 30
51983: PUSH
51984: LD_INT 40
51986: PUSH
51987: LD_INT 50
51989: PUSH
51990: LD_INT 60
51992: PUSH
51993: LD_INT 70
51995: PUSH
51996: LD_INT 80
51998: PUSH
51999: LD_INT 90
52001: PUSH
52002: LD_INT 100
52004: PUSH
52005: LD_INT 110
52007: PUSH
52008: LD_INT 120
52010: PUSH
52011: LD_INT 130
52013: PUSH
52014: LD_INT 140
52016: PUSH
52017: LD_INT 150
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: PPUSH
52040: LD_INT 15
52042: PPUSH
52043: CALL_OW 12
52047: ARRAY
52048: ST_TO_ADDR
// if ValidHex ( x , y ) then
52049: LD_VAR 0 3
52053: PPUSH
52054: LD_VAR 0 4
52058: PPUSH
52059: CALL_OW 488
52063: IFFALSE 52086
// begin result := [ x , y ] ;
52065: LD_ADDR_VAR 0 1
52069: PUSH
52070: LD_VAR 0 3
52074: PUSH
52075: LD_VAR 0 4
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: ST_TO_ADDR
// break ;
52084: GO 52088
// end ; end ;
52086: GO 51888
52088: POP
52089: POP
// if result then
52090: LD_VAR 0 1
52094: IFFALSE 52154
// begin ToLua ( playSibBomb() ) ;
52096: LD_STRING playSibBomb()
52098: PPUSH
52099: CALL_OW 559
// wait ( 0 0$14 ) ;
52103: LD_INT 490
52105: PPUSH
52106: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
52110: LD_VAR 0 1
52114: PUSH
52115: LD_INT 1
52117: ARRAY
52118: PPUSH
52119: LD_VAR 0 1
52123: PUSH
52124: LD_INT 2
52126: ARRAY
52127: PPUSH
52128: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
52132: LD_VAR 0 1
52136: PUSH
52137: LD_INT 1
52139: ARRAY
52140: PPUSH
52141: LD_VAR 0 1
52145: PUSH
52146: LD_INT 2
52148: ARRAY
52149: PPUSH
52150: CALL_OW 429
// end ; end ;
52154: LD_VAR 0 1
52158: RET
// every 0 0$1 trigger StreamModeActive and sReset do
52159: LD_EXP 34
52163: PUSH
52164: LD_EXP 56
52168: AND
52169: IFFALSE 52181
52171: GO 52173
52173: DISABLE
// YouLost (  ) ;
52174: LD_STRING 
52176: PPUSH
52177: CALL_OW 104
52181: END
// every 0 0$1 trigger StreamModeActive and sFog do
52182: LD_EXP 34
52186: PUSH
52187: LD_EXP 55
52191: AND
52192: IFFALSE 52206
52194: GO 52196
52196: DISABLE
// FogOff ( your_side ) ;
52197: LD_OWVAR 2
52201: PPUSH
52202: CALL_OW 344
52206: END
// every 0 0$1 trigger StreamModeActive and sSun do
52207: LD_EXP 34
52211: PUSH
52212: LD_EXP 57
52216: AND
52217: IFFALSE 52245
52219: GO 52221
52221: DISABLE
// begin solar_recharge_percent := 0 ;
52222: LD_ADDR_OWVAR 79
52226: PUSH
52227: LD_INT 0
52229: ST_TO_ADDR
// wait ( 5 5$00 ) ;
52230: LD_INT 10500
52232: PPUSH
52233: CALL_OW 67
// solar_recharge_percent := 100 ;
52237: LD_ADDR_OWVAR 79
52241: PUSH
52242: LD_INT 100
52244: ST_TO_ADDR
// end ;
52245: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
52246: LD_EXP 34
52250: PUSH
52251: LD_EXP 58
52255: AND
52256: IFFALSE 52495
52258: GO 52260
52260: DISABLE
52261: LD_INT 0
52263: PPUSH
52264: PPUSH
52265: PPUSH
// begin tmp := [ ] ;
52266: LD_ADDR_VAR 0 3
52270: PUSH
52271: EMPTY
52272: ST_TO_ADDR
// for i := 1 to 6 do
52273: LD_ADDR_VAR 0 1
52277: PUSH
52278: DOUBLE
52279: LD_INT 1
52281: DEC
52282: ST_TO_ADDR
52283: LD_INT 6
52285: PUSH
52286: FOR_TO
52287: IFFALSE 52392
// begin uc_nation := nation_nature ;
52289: LD_ADDR_OWVAR 21
52293: PUSH
52294: LD_INT 0
52296: ST_TO_ADDR
// uc_side := 0 ;
52297: LD_ADDR_OWVAR 20
52301: PUSH
52302: LD_INT 0
52304: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
52305: LD_ADDR_OWVAR 29
52309: PUSH
52310: LD_INT 12
52312: PUSH
52313: LD_INT 12
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: ST_TO_ADDR
// hc_agressivity := 20 ;
52320: LD_ADDR_OWVAR 35
52324: PUSH
52325: LD_INT 20
52327: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
52328: LD_ADDR_OWVAR 28
52332: PUSH
52333: LD_INT 17
52335: ST_TO_ADDR
// hc_gallery :=  ;
52336: LD_ADDR_OWVAR 33
52340: PUSH
52341: LD_STRING 
52343: ST_TO_ADDR
// hc_name :=  ;
52344: LD_ADDR_OWVAR 26
52348: PUSH
52349: LD_STRING 
52351: ST_TO_ADDR
// un := CreateHuman ;
52352: LD_ADDR_VAR 0 2
52356: PUSH
52357: CALL_OW 44
52361: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
52362: LD_VAR 0 2
52366: PPUSH
52367: LD_INT 1
52369: PPUSH
52370: CALL_OW 51
// tmp := tmp ^ un ;
52374: LD_ADDR_VAR 0 3
52378: PUSH
52379: LD_VAR 0 3
52383: PUSH
52384: LD_VAR 0 2
52388: ADD
52389: ST_TO_ADDR
// end ;
52390: GO 52286
52392: POP
52393: POP
// repeat wait ( 0 0$1 ) ;
52394: LD_INT 35
52396: PPUSH
52397: CALL_OW 67
// for un in tmp do
52401: LD_ADDR_VAR 0 2
52405: PUSH
52406: LD_VAR 0 3
52410: PUSH
52411: FOR_IN
52412: IFFALSE 52486
// begin if IsDead ( un ) then
52414: LD_VAR 0 2
52418: PPUSH
52419: CALL_OW 301
52423: IFFALSE 52443
// begin tmp := tmp diff un ;
52425: LD_ADDR_VAR 0 3
52429: PUSH
52430: LD_VAR 0 3
52434: PUSH
52435: LD_VAR 0 2
52439: DIFF
52440: ST_TO_ADDR
// continue ;
52441: GO 52411
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
52443: LD_VAR 0 2
52447: PPUSH
52448: LD_INT 3
52450: PUSH
52451: LD_INT 22
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PPUSH
52465: CALL_OW 69
52469: PPUSH
52470: LD_VAR 0 2
52474: PPUSH
52475: CALL_OW 74
52479: PPUSH
52480: CALL_OW 115
// end ;
52484: GO 52411
52486: POP
52487: POP
// until not tmp ;
52488: LD_VAR 0 3
52492: NOT
52493: IFFALSE 52394
// end ;
52495: PPOPN 3
52497: END
// every 0 0$1 trigger StreamModeActive and sTroll do
52498: LD_EXP 34
52502: PUSH
52503: LD_EXP 59
52507: AND
52508: IFFALSE 52562
52510: GO 52512
52512: DISABLE
// begin ToLua ( displayTroll(); ) ;
52513: LD_STRING displayTroll();
52515: PPUSH
52516: CALL_OW 559
// wait ( 3 3$00 ) ;
52520: LD_INT 6300
52522: PPUSH
52523: CALL_OW 67
// ToLua ( hideTroll(); ) ;
52527: LD_STRING hideTroll();
52529: PPUSH
52530: CALL_OW 559
// wait ( 1 1$00 ) ;
52534: LD_INT 2100
52536: PPUSH
52537: CALL_OW 67
// ToLua ( displayTroll(); ) ;
52541: LD_STRING displayTroll();
52543: PPUSH
52544: CALL_OW 559
// wait ( 1 1$00 ) ;
52548: LD_INT 2100
52550: PPUSH
52551: CALL_OW 67
// ToLua ( hideTroll(); ) ;
52555: LD_STRING hideTroll();
52557: PPUSH
52558: CALL_OW 559
// end ;
52562: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
52563: LD_EXP 34
52567: PUSH
52568: LD_EXP 60
52572: AND
52573: IFFALSE 52636
52575: GO 52577
52577: DISABLE
52578: LD_INT 0
52580: PPUSH
// begin p := 0 ;
52581: LD_ADDR_VAR 0 1
52585: PUSH
52586: LD_INT 0
52588: ST_TO_ADDR
// repeat game_speed := 1 ;
52589: LD_ADDR_OWVAR 65
52593: PUSH
52594: LD_INT 1
52596: ST_TO_ADDR
// wait ( 0 0$1 ) ;
52597: LD_INT 35
52599: PPUSH
52600: CALL_OW 67
// p := p + 1 ;
52604: LD_ADDR_VAR 0 1
52608: PUSH
52609: LD_VAR 0 1
52613: PUSH
52614: LD_INT 1
52616: PLUS
52617: ST_TO_ADDR
// until p >= 60 ;
52618: LD_VAR 0 1
52622: PUSH
52623: LD_INT 60
52625: GREATEREQUAL
52626: IFFALSE 52589
// game_speed := 4 ;
52628: LD_ADDR_OWVAR 65
52632: PUSH
52633: LD_INT 4
52635: ST_TO_ADDR
// end ;
52636: PPOPN 1
52638: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
52639: LD_EXP 34
52643: PUSH
52644: LD_EXP 61
52648: AND
52649: IFFALSE 52795
52651: GO 52653
52653: DISABLE
52654: LD_INT 0
52656: PPUSH
52657: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52658: LD_ADDR_VAR 0 1
52662: PUSH
52663: LD_INT 22
52665: PUSH
52666: LD_OWVAR 2
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 2
52677: PUSH
52678: LD_INT 30
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 30
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: LIST
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PPUSH
52707: CALL_OW 69
52711: ST_TO_ADDR
// if not depot then
52712: LD_VAR 0 1
52716: NOT
52717: IFFALSE 52721
// exit ;
52719: GO 52795
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
52721: LD_ADDR_VAR 0 2
52725: PUSH
52726: LD_VAR 0 1
52730: PUSH
52731: LD_INT 1
52733: PPUSH
52734: LD_VAR 0 1
52738: PPUSH
52739: CALL_OW 12
52743: ARRAY
52744: PPUSH
52745: CALL_OW 274
52749: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
52750: LD_VAR 0 2
52754: PPUSH
52755: LD_INT 1
52757: PPUSH
52758: LD_INT 0
52760: PPUSH
52761: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
52765: LD_VAR 0 2
52769: PPUSH
52770: LD_INT 2
52772: PPUSH
52773: LD_INT 0
52775: PPUSH
52776: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
52780: LD_VAR 0 2
52784: PPUSH
52785: LD_INT 3
52787: PPUSH
52788: LD_INT 0
52790: PPUSH
52791: CALL_OW 277
// end ;
52795: PPOPN 2
52797: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
52798: LD_EXP 34
52802: PUSH
52803: LD_EXP 62
52807: AND
52808: IFFALSE 52905
52810: GO 52812
52812: DISABLE
52813: LD_INT 0
52815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
52816: LD_ADDR_VAR 0 1
52820: PUSH
52821: LD_INT 22
52823: PUSH
52824: LD_OWVAR 2
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 21
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 3
52845: PUSH
52846: LD_INT 23
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: LIST
52864: PPUSH
52865: CALL_OW 69
52869: ST_TO_ADDR
// if not tmp then
52870: LD_VAR 0 1
52874: NOT
52875: IFFALSE 52879
// exit ;
52877: GO 52905
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
52879: LD_VAR 0 1
52883: PUSH
52884: LD_INT 1
52886: PPUSH
52887: LD_VAR 0 1
52891: PPUSH
52892: CALL_OW 12
52896: ARRAY
52897: PPUSH
52898: LD_INT 200
52900: PPUSH
52901: CALL_OW 234
// end ;
52905: PPOPN 1
52907: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
52908: LD_EXP 34
52912: PUSH
52913: LD_EXP 63
52917: AND
52918: IFFALSE 52997
52920: GO 52922
52922: DISABLE
52923: LD_INT 0
52925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
52926: LD_ADDR_VAR 0 1
52930: PUSH
52931: LD_INT 22
52933: PUSH
52934: LD_OWVAR 2
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 21
52945: PUSH
52946: LD_INT 2
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PPUSH
52957: CALL_OW 69
52961: ST_TO_ADDR
// if not tmp then
52962: LD_VAR 0 1
52966: NOT
52967: IFFALSE 52971
// exit ;
52969: GO 52997
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
52971: LD_VAR 0 1
52975: PUSH
52976: LD_INT 1
52978: PPUSH
52979: LD_VAR 0 1
52983: PPUSH
52984: CALL_OW 12
52988: ARRAY
52989: PPUSH
52990: LD_INT 60
52992: PPUSH
52993: CALL_OW 234
// end ;
52997: PPOPN 1
52999: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
53000: LD_EXP 34
53004: PUSH
53005: LD_EXP 64
53009: AND
53010: IFFALSE 53109
53012: GO 53014
53014: DISABLE
53015: LD_INT 0
53017: PPUSH
53018: PPUSH
// begin enable ;
53019: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
53020: LD_ADDR_VAR 0 1
53024: PUSH
53025: LD_INT 22
53027: PUSH
53028: LD_OWVAR 2
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 61
53039: PUSH
53040: EMPTY
53041: LIST
53042: PUSH
53043: LD_INT 33
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: LIST
53057: PPUSH
53058: CALL_OW 69
53062: ST_TO_ADDR
// if not tmp then
53063: LD_VAR 0 1
53067: NOT
53068: IFFALSE 53072
// exit ;
53070: GO 53109
// for i in tmp do
53072: LD_ADDR_VAR 0 2
53076: PUSH
53077: LD_VAR 0 1
53081: PUSH
53082: FOR_IN
53083: IFFALSE 53107
// if IsControledBy ( i ) then
53085: LD_VAR 0 2
53089: PPUSH
53090: CALL_OW 312
53094: IFFALSE 53105
// ComUnlink ( i ) ;
53096: LD_VAR 0 2
53100: PPUSH
53101: CALL_OW 136
53105: GO 53082
53107: POP
53108: POP
// end ;
53109: PPOPN 2
53111: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
53112: LD_EXP 34
53116: PUSH
53117: LD_EXP 65
53121: AND
53122: IFFALSE 53262
53124: GO 53126
53126: DISABLE
53127: LD_INT 0
53129: PPUSH
53130: PPUSH
// begin ToLua ( displayPowell(); ) ;
53131: LD_STRING displayPowell();
53133: PPUSH
53134: CALL_OW 559
// uc_side := 0 ;
53138: LD_ADDR_OWVAR 20
53142: PUSH
53143: LD_INT 0
53145: ST_TO_ADDR
// uc_nation := 2 ;
53146: LD_ADDR_OWVAR 21
53150: PUSH
53151: LD_INT 2
53153: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
53154: LD_ADDR_OWVAR 37
53158: PUSH
53159: LD_INT 14
53161: ST_TO_ADDR
// vc_engine := engine_siberite ;
53162: LD_ADDR_OWVAR 39
53166: PUSH
53167: LD_INT 3
53169: ST_TO_ADDR
// vc_control := control_apeman ;
53170: LD_ADDR_OWVAR 38
53174: PUSH
53175: LD_INT 5
53177: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
53178: LD_ADDR_OWVAR 40
53182: PUSH
53183: LD_INT 29
53185: ST_TO_ADDR
// un := CreateVehicle ;
53186: LD_ADDR_VAR 0 2
53190: PUSH
53191: CALL_OW 45
53195: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53196: LD_VAR 0 2
53200: PPUSH
53201: LD_INT 1
53203: PPUSH
53204: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
53208: LD_INT 35
53210: PPUSH
53211: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
53215: LD_VAR 0 2
53219: PPUSH
53220: LD_INT 22
53222: PUSH
53223: LD_OWVAR 2
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PPUSH
53232: CALL_OW 69
53236: PPUSH
53237: LD_VAR 0 2
53241: PPUSH
53242: CALL_OW 74
53246: PPUSH
53247: CALL_OW 115
// until IsDead ( un ) ;
53251: LD_VAR 0 2
53255: PPUSH
53256: CALL_OW 301
53260: IFFALSE 53208
// end ;
53262: PPOPN 2
53264: END
// every 0 0$1 trigger StreamModeActive and sStu do
53265: LD_EXP 34
53269: PUSH
53270: LD_EXP 73
53274: AND
53275: IFFALSE 53291
53277: GO 53279
53279: DISABLE
// begin ToLua ( displayStucuk(); ) ;
53280: LD_STRING displayStucuk();
53282: PPUSH
53283: CALL_OW 559
// ResetFog ;
53287: CALL_OW 335
// end ;
53291: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
53292: LD_EXP 34
53296: PUSH
53297: LD_EXP 66
53301: AND
53302: IFFALSE 53443
53304: GO 53306
53306: DISABLE
53307: LD_INT 0
53309: PPUSH
53310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53311: LD_ADDR_VAR 0 2
53315: PUSH
53316: LD_INT 22
53318: PUSH
53319: LD_OWVAR 2
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 21
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PPUSH
53342: CALL_OW 69
53346: ST_TO_ADDR
// if not tmp then
53347: LD_VAR 0 2
53351: NOT
53352: IFFALSE 53356
// exit ;
53354: GO 53443
// un := tmp [ rand ( 1 , tmp ) ] ;
53356: LD_ADDR_VAR 0 1
53360: PUSH
53361: LD_VAR 0 2
53365: PUSH
53366: LD_INT 1
53368: PPUSH
53369: LD_VAR 0 2
53373: PPUSH
53374: CALL_OW 12
53378: ARRAY
53379: ST_TO_ADDR
// SetSide ( un , 0 ) ;
53380: LD_VAR 0 1
53384: PPUSH
53385: LD_INT 0
53387: PPUSH
53388: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
53392: LD_VAR 0 1
53396: PPUSH
53397: LD_OWVAR 3
53401: PUSH
53402: LD_VAR 0 1
53406: DIFF
53407: PPUSH
53408: LD_VAR 0 1
53412: PPUSH
53413: CALL_OW 74
53417: PPUSH
53418: CALL_OW 115
// wait ( 0 0$20 ) ;
53422: LD_INT 700
53424: PPUSH
53425: CALL_OW 67
// SetSide ( un , your_side ) ;
53429: LD_VAR 0 1
53433: PPUSH
53434: LD_OWVAR 2
53438: PPUSH
53439: CALL_OW 235
// end ;
53443: PPOPN 2
53445: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
53446: LD_EXP 34
53450: PUSH
53451: LD_EXP 67
53455: AND
53456: IFFALSE 53562
53458: GO 53460
53460: DISABLE
53461: LD_INT 0
53463: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53464: LD_ADDR_VAR 0 1
53468: PUSH
53469: LD_INT 22
53471: PUSH
53472: LD_OWVAR 2
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: LD_INT 30
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 30
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: LIST
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PPUSH
53513: CALL_OW 69
53517: ST_TO_ADDR
// if not depot then
53518: LD_VAR 0 1
53522: NOT
53523: IFFALSE 53527
// exit ;
53525: GO 53562
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
53527: LD_VAR 0 1
53531: PUSH
53532: LD_INT 1
53534: ARRAY
53535: PPUSH
53536: CALL_OW 250
53540: PPUSH
53541: LD_VAR 0 1
53545: PUSH
53546: LD_INT 1
53548: ARRAY
53549: PPUSH
53550: CALL_OW 251
53554: PPUSH
53555: LD_INT 70
53557: PPUSH
53558: CALL_OW 495
// end ;
53562: PPOPN 1
53564: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
53565: LD_EXP 34
53569: PUSH
53570: LD_EXP 68
53574: AND
53575: IFFALSE 53786
53577: GO 53579
53579: DISABLE
53580: LD_INT 0
53582: PPUSH
53583: PPUSH
53584: PPUSH
53585: PPUSH
53586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53587: LD_ADDR_VAR 0 5
53591: PUSH
53592: LD_INT 22
53594: PUSH
53595: LD_OWVAR 2
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 21
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PPUSH
53618: CALL_OW 69
53622: ST_TO_ADDR
// if not tmp then
53623: LD_VAR 0 5
53627: NOT
53628: IFFALSE 53632
// exit ;
53630: GO 53786
// for i in tmp do
53632: LD_ADDR_VAR 0 1
53636: PUSH
53637: LD_VAR 0 5
53641: PUSH
53642: FOR_IN
53643: IFFALSE 53784
// begin d := rand ( 0 , 5 ) ;
53645: LD_ADDR_VAR 0 4
53649: PUSH
53650: LD_INT 0
53652: PPUSH
53653: LD_INT 5
53655: PPUSH
53656: CALL_OW 12
53660: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
53661: LD_ADDR_VAR 0 2
53665: PUSH
53666: LD_VAR 0 1
53670: PPUSH
53671: CALL_OW 250
53675: PPUSH
53676: LD_VAR 0 4
53680: PPUSH
53681: LD_INT 3
53683: PPUSH
53684: LD_INT 12
53686: PPUSH
53687: CALL_OW 12
53691: PPUSH
53692: CALL_OW 272
53696: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
53697: LD_ADDR_VAR 0 3
53701: PUSH
53702: LD_VAR 0 1
53706: PPUSH
53707: CALL_OW 251
53711: PPUSH
53712: LD_VAR 0 4
53716: PPUSH
53717: LD_INT 3
53719: PPUSH
53720: LD_INT 12
53722: PPUSH
53723: CALL_OW 12
53727: PPUSH
53728: CALL_OW 273
53732: ST_TO_ADDR
// if ValidHex ( x , y ) then
53733: LD_VAR 0 2
53737: PPUSH
53738: LD_VAR 0 3
53742: PPUSH
53743: CALL_OW 488
53747: IFFALSE 53782
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
53749: LD_VAR 0 1
53753: PPUSH
53754: LD_VAR 0 2
53758: PPUSH
53759: LD_VAR 0 3
53763: PPUSH
53764: LD_INT 3
53766: PPUSH
53767: LD_INT 6
53769: PPUSH
53770: CALL_OW 12
53774: PPUSH
53775: LD_INT 1
53777: PPUSH
53778: CALL_OW 483
// end ;
53782: GO 53642
53784: POP
53785: POP
// end ;
53786: PPOPN 5
53788: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
53789: LD_EXP 34
53793: PUSH
53794: LD_EXP 69
53798: AND
53799: IFFALSE 53893
53801: GO 53803
53803: DISABLE
53804: LD_INT 0
53806: PPUSH
53807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
53808: LD_ADDR_VAR 0 2
53812: PUSH
53813: LD_INT 22
53815: PUSH
53816: LD_OWVAR 2
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 32
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 21
53837: PUSH
53838: LD_INT 2
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: LIST
53849: PPUSH
53850: CALL_OW 69
53854: ST_TO_ADDR
// if not tmp then
53855: LD_VAR 0 2
53859: NOT
53860: IFFALSE 53864
// exit ;
53862: GO 53893
// for i in tmp do
53864: LD_ADDR_VAR 0 1
53868: PUSH
53869: LD_VAR 0 2
53873: PUSH
53874: FOR_IN
53875: IFFALSE 53891
// SetFuel ( i , 0 ) ;
53877: LD_VAR 0 1
53881: PPUSH
53882: LD_INT 0
53884: PPUSH
53885: CALL_OW 240
53889: GO 53874
53891: POP
53892: POP
// end ;
53893: PPOPN 2
53895: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
53896: LD_EXP 34
53900: PUSH
53901: LD_EXP 70
53905: AND
53906: IFFALSE 53972
53908: GO 53910
53910: DISABLE
53911: LD_INT 0
53913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
53914: LD_ADDR_VAR 0 1
53918: PUSH
53919: LD_INT 22
53921: PUSH
53922: LD_OWVAR 2
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 30
53933: PUSH
53934: LD_INT 29
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PPUSH
53945: CALL_OW 69
53949: ST_TO_ADDR
// if not tmp then
53950: LD_VAR 0 1
53954: NOT
53955: IFFALSE 53959
// exit ;
53957: GO 53972
// DestroyUnit ( tmp [ 1 ] ) ;
53959: LD_VAR 0 1
53963: PUSH
53964: LD_INT 1
53966: ARRAY
53967: PPUSH
53968: CALL_OW 65
// end ;
53972: PPOPN 1
53974: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
53975: LD_EXP 34
53979: PUSH
53980: LD_EXP 72
53984: AND
53985: IFFALSE 54114
53987: GO 53989
53989: DISABLE
53990: LD_INT 0
53992: PPUSH
// begin uc_side := 0 ;
53993: LD_ADDR_OWVAR 20
53997: PUSH
53998: LD_INT 0
54000: ST_TO_ADDR
// uc_nation := nation_arabian ;
54001: LD_ADDR_OWVAR 21
54005: PUSH
54006: LD_INT 2
54008: ST_TO_ADDR
// hc_gallery :=  ;
54009: LD_ADDR_OWVAR 33
54013: PUSH
54014: LD_STRING 
54016: ST_TO_ADDR
// hc_name :=  ;
54017: LD_ADDR_OWVAR 26
54021: PUSH
54022: LD_STRING 
54024: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
54025: LD_INT 1
54027: PPUSH
54028: LD_INT 11
54030: PPUSH
54031: LD_INT 10
54033: PPUSH
54034: CALL_OW 380
// un := CreateHuman ;
54038: LD_ADDR_VAR 0 1
54042: PUSH
54043: CALL_OW 44
54047: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54048: LD_VAR 0 1
54052: PPUSH
54053: LD_INT 1
54055: PPUSH
54056: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54060: LD_INT 35
54062: PPUSH
54063: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54067: LD_VAR 0 1
54071: PPUSH
54072: LD_INT 22
54074: PUSH
54075: LD_OWVAR 2
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PPUSH
54084: CALL_OW 69
54088: PPUSH
54089: LD_VAR 0 1
54093: PPUSH
54094: CALL_OW 74
54098: PPUSH
54099: CALL_OW 115
// until IsDead ( un ) ;
54103: LD_VAR 0 1
54107: PPUSH
54108: CALL_OW 301
54112: IFFALSE 54060
// end ;
54114: PPOPN 1
54116: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
54117: LD_EXP 34
54121: PUSH
54122: LD_EXP 74
54126: AND
54127: IFFALSE 54139
54129: GO 54131
54131: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
54132: LD_STRING earthquake(getX(game), 0, 32)
54134: PPUSH
54135: CALL_OW 559
54139: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
54140: LD_EXP 34
54144: PUSH
54145: LD_EXP 75
54149: AND
54150: IFFALSE 54241
54152: GO 54154
54154: DISABLE
54155: LD_INT 0
54157: PPUSH
// begin enable ;
54158: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
54159: LD_ADDR_VAR 0 1
54163: PUSH
54164: LD_INT 22
54166: PUSH
54167: LD_OWVAR 2
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 21
54178: PUSH
54179: LD_INT 2
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 33
54188: PUSH
54189: LD_INT 3
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: LIST
54200: PPUSH
54201: CALL_OW 69
54205: ST_TO_ADDR
// if not tmp then
54206: LD_VAR 0 1
54210: NOT
54211: IFFALSE 54215
// exit ;
54213: GO 54241
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
54215: LD_VAR 0 1
54219: PUSH
54220: LD_INT 1
54222: PPUSH
54223: LD_VAR 0 1
54227: PPUSH
54228: CALL_OW 12
54232: ARRAY
54233: PPUSH
54234: LD_INT 1
54236: PPUSH
54237: CALL_OW 234
// end ;
54241: PPOPN 1
54243: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
54244: LD_EXP 34
54248: PUSH
54249: LD_EXP 76
54253: AND
54254: IFFALSE 54395
54256: GO 54258
54258: DISABLE
54259: LD_INT 0
54261: PPUSH
54262: PPUSH
54263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54264: LD_ADDR_VAR 0 3
54268: PUSH
54269: LD_INT 22
54271: PUSH
54272: LD_OWVAR 2
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 25
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PPUSH
54295: CALL_OW 69
54299: ST_TO_ADDR
// if not tmp then
54300: LD_VAR 0 3
54304: NOT
54305: IFFALSE 54309
// exit ;
54307: GO 54395
// un := tmp [ rand ( 1 , tmp ) ] ;
54309: LD_ADDR_VAR 0 2
54313: PUSH
54314: LD_VAR 0 3
54318: PUSH
54319: LD_INT 1
54321: PPUSH
54322: LD_VAR 0 3
54326: PPUSH
54327: CALL_OW 12
54331: ARRAY
54332: ST_TO_ADDR
// if Crawls ( un ) then
54333: LD_VAR 0 2
54337: PPUSH
54338: CALL_OW 318
54342: IFFALSE 54353
// ComWalk ( un ) ;
54344: LD_VAR 0 2
54348: PPUSH
54349: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
54353: LD_VAR 0 2
54357: PPUSH
54358: LD_INT 9
54360: PPUSH
54361: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
54365: LD_INT 28
54367: PPUSH
54368: LD_OWVAR 2
54372: PPUSH
54373: LD_INT 2
54375: PPUSH
54376: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
54380: LD_INT 29
54382: PPUSH
54383: LD_OWVAR 2
54387: PPUSH
54388: LD_INT 2
54390: PPUSH
54391: CALL_OW 322
// end ;
54395: PPOPN 3
54397: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
54398: LD_EXP 34
54402: PUSH
54403: LD_EXP 77
54407: AND
54408: IFFALSE 54519
54410: GO 54412
54412: DISABLE
54413: LD_INT 0
54415: PPUSH
54416: PPUSH
54417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54418: LD_ADDR_VAR 0 3
54422: PUSH
54423: LD_INT 22
54425: PUSH
54426: LD_OWVAR 2
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 25
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PPUSH
54449: CALL_OW 69
54453: ST_TO_ADDR
// if not tmp then
54454: LD_VAR 0 3
54458: NOT
54459: IFFALSE 54463
// exit ;
54461: GO 54519
// un := tmp [ rand ( 1 , tmp ) ] ;
54463: LD_ADDR_VAR 0 2
54467: PUSH
54468: LD_VAR 0 3
54472: PUSH
54473: LD_INT 1
54475: PPUSH
54476: LD_VAR 0 3
54480: PPUSH
54481: CALL_OW 12
54485: ARRAY
54486: ST_TO_ADDR
// if Crawls ( un ) then
54487: LD_VAR 0 2
54491: PPUSH
54492: CALL_OW 318
54496: IFFALSE 54507
// ComWalk ( un ) ;
54498: LD_VAR 0 2
54502: PPUSH
54503: CALL_OW 138
// SetClass ( un , class_mortar ) ;
54507: LD_VAR 0 2
54511: PPUSH
54512: LD_INT 8
54514: PPUSH
54515: CALL_OW 336
// end ;
54519: PPOPN 3
54521: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
54522: LD_EXP 34
54526: PUSH
54527: LD_EXP 78
54531: AND
54532: IFFALSE 54676
54534: GO 54536
54536: DISABLE
54537: LD_INT 0
54539: PPUSH
54540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
54541: LD_ADDR_VAR 0 2
54545: PUSH
54546: LD_INT 22
54548: PUSH
54549: LD_OWVAR 2
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 21
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 2
54570: PUSH
54571: LD_INT 34
54573: PUSH
54574: LD_INT 12
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 34
54583: PUSH
54584: LD_INT 51
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 34
54593: PUSH
54594: LD_INT 32
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: LIST
54611: PPUSH
54612: CALL_OW 69
54616: ST_TO_ADDR
// if not tmp then
54617: LD_VAR 0 2
54621: NOT
54622: IFFALSE 54626
// exit ;
54624: GO 54676
// for i in tmp do
54626: LD_ADDR_VAR 0 1
54630: PUSH
54631: LD_VAR 0 2
54635: PUSH
54636: FOR_IN
54637: IFFALSE 54674
// if GetCargo ( i , mat_artifact ) = 0 then
54639: LD_VAR 0 1
54643: PPUSH
54644: LD_INT 4
54646: PPUSH
54647: CALL_OW 289
54651: PUSH
54652: LD_INT 0
54654: EQUAL
54655: IFFALSE 54672
// SetCargo ( i , mat_siberit , 100 ) ;
54657: LD_VAR 0 1
54661: PPUSH
54662: LD_INT 3
54664: PPUSH
54665: LD_INT 100
54667: PPUSH
54668: CALL_OW 290
54672: GO 54636
54674: POP
54675: POP
// end ;
54676: PPOPN 2
54678: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
54679: LD_EXP 34
54683: PUSH
54684: LD_EXP 79
54688: AND
54689: IFFALSE 54872
54691: GO 54693
54693: DISABLE
54694: LD_INT 0
54696: PPUSH
54697: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
54698: LD_ADDR_VAR 0 2
54702: PUSH
54703: LD_INT 22
54705: PUSH
54706: LD_OWVAR 2
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PPUSH
54715: CALL_OW 69
54719: ST_TO_ADDR
// if not tmp then
54720: LD_VAR 0 2
54724: NOT
54725: IFFALSE 54729
// exit ;
54727: GO 54872
// for i := 1 to 2 do
54729: LD_ADDR_VAR 0 1
54733: PUSH
54734: DOUBLE
54735: LD_INT 1
54737: DEC
54738: ST_TO_ADDR
54739: LD_INT 2
54741: PUSH
54742: FOR_TO
54743: IFFALSE 54870
// begin uc_side := your_side ;
54745: LD_ADDR_OWVAR 20
54749: PUSH
54750: LD_OWVAR 2
54754: ST_TO_ADDR
// uc_nation := nation_american ;
54755: LD_ADDR_OWVAR 21
54759: PUSH
54760: LD_INT 1
54762: ST_TO_ADDR
// vc_chassis := us_morphling ;
54763: LD_ADDR_OWVAR 37
54767: PUSH
54768: LD_INT 5
54770: ST_TO_ADDR
// vc_engine := engine_siberite ;
54771: LD_ADDR_OWVAR 39
54775: PUSH
54776: LD_INT 3
54778: ST_TO_ADDR
// vc_control := control_computer ;
54779: LD_ADDR_OWVAR 38
54783: PUSH
54784: LD_INT 3
54786: ST_TO_ADDR
// vc_weapon := us_double_laser ;
54787: LD_ADDR_OWVAR 40
54791: PUSH
54792: LD_INT 10
54794: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
54795: LD_VAR 0 2
54799: PUSH
54800: LD_INT 1
54802: ARRAY
54803: PPUSH
54804: CALL_OW 310
54808: NOT
54809: IFFALSE 54856
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
54811: CALL_OW 45
54815: PPUSH
54816: LD_VAR 0 2
54820: PUSH
54821: LD_INT 1
54823: ARRAY
54824: PPUSH
54825: CALL_OW 250
54829: PPUSH
54830: LD_VAR 0 2
54834: PUSH
54835: LD_INT 1
54837: ARRAY
54838: PPUSH
54839: CALL_OW 251
54843: PPUSH
54844: LD_INT 12
54846: PPUSH
54847: LD_INT 1
54849: PPUSH
54850: CALL_OW 50
54854: GO 54868
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
54856: CALL_OW 45
54860: PPUSH
54861: LD_INT 1
54863: PPUSH
54864: CALL_OW 51
// end ;
54868: GO 54742
54870: POP
54871: POP
// end ;
54872: PPOPN 2
54874: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
54875: LD_EXP 34
54879: PUSH
54880: LD_EXP 80
54884: AND
54885: IFFALSE 55107
54887: GO 54889
54889: DISABLE
54890: LD_INT 0
54892: PPUSH
54893: PPUSH
54894: PPUSH
54895: PPUSH
54896: PPUSH
54897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54898: LD_ADDR_VAR 0 6
54902: PUSH
54903: LD_INT 22
54905: PUSH
54906: LD_OWVAR 2
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 21
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 3
54927: PUSH
54928: LD_INT 23
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: LIST
54946: PPUSH
54947: CALL_OW 69
54951: ST_TO_ADDR
// if not tmp then
54952: LD_VAR 0 6
54956: NOT
54957: IFFALSE 54961
// exit ;
54959: GO 55107
// s1 := rand ( 1 , 4 ) ;
54961: LD_ADDR_VAR 0 2
54965: PUSH
54966: LD_INT 1
54968: PPUSH
54969: LD_INT 4
54971: PPUSH
54972: CALL_OW 12
54976: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
54977: LD_ADDR_VAR 0 4
54981: PUSH
54982: LD_VAR 0 6
54986: PUSH
54987: LD_INT 1
54989: ARRAY
54990: PPUSH
54991: LD_VAR 0 2
54995: PPUSH
54996: CALL_OW 259
55000: ST_TO_ADDR
// if s1 = 1 then
55001: LD_VAR 0 2
55005: PUSH
55006: LD_INT 1
55008: EQUAL
55009: IFFALSE 55029
// s2 := rand ( 2 , 4 ) else
55011: LD_ADDR_VAR 0 3
55015: PUSH
55016: LD_INT 2
55018: PPUSH
55019: LD_INT 4
55021: PPUSH
55022: CALL_OW 12
55026: ST_TO_ADDR
55027: GO 55037
// s2 := 1 ;
55029: LD_ADDR_VAR 0 3
55033: PUSH
55034: LD_INT 1
55036: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
55037: LD_ADDR_VAR 0 5
55041: PUSH
55042: LD_VAR 0 6
55046: PUSH
55047: LD_INT 1
55049: ARRAY
55050: PPUSH
55051: LD_VAR 0 3
55055: PPUSH
55056: CALL_OW 259
55060: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
55061: LD_VAR 0 6
55065: PUSH
55066: LD_INT 1
55068: ARRAY
55069: PPUSH
55070: LD_VAR 0 2
55074: PPUSH
55075: LD_VAR 0 5
55079: PPUSH
55080: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
55084: LD_VAR 0 6
55088: PUSH
55089: LD_INT 1
55091: ARRAY
55092: PPUSH
55093: LD_VAR 0 3
55097: PPUSH
55098: LD_VAR 0 4
55102: PPUSH
55103: CALL_OW 237
// end ;
55107: PPOPN 6
55109: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
55110: LD_EXP 34
55114: PUSH
55115: LD_EXP 81
55119: AND
55120: IFFALSE 55199
55122: GO 55124
55124: DISABLE
55125: LD_INT 0
55127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
55128: LD_ADDR_VAR 0 1
55132: PUSH
55133: LD_INT 22
55135: PUSH
55136: LD_OWVAR 2
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 30
55147: PUSH
55148: LD_INT 3
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PPUSH
55159: CALL_OW 69
55163: ST_TO_ADDR
// if not tmp then
55164: LD_VAR 0 1
55168: NOT
55169: IFFALSE 55173
// exit ;
55171: GO 55199
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55173: LD_VAR 0 1
55177: PUSH
55178: LD_INT 1
55180: PPUSH
55181: LD_VAR 0 1
55185: PPUSH
55186: CALL_OW 12
55190: ARRAY
55191: PPUSH
55192: LD_INT 1
55194: PPUSH
55195: CALL_OW 234
// end ;
55199: PPOPN 1
55201: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
55202: LD_EXP 34
55206: PUSH
55207: LD_EXP 82
55211: AND
55212: IFFALSE 55324
55214: GO 55216
55216: DISABLE
55217: LD_INT 0
55219: PPUSH
55220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
55221: LD_ADDR_VAR 0 2
55225: PUSH
55226: LD_INT 22
55228: PUSH
55229: LD_OWVAR 2
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 2
55240: PUSH
55241: LD_INT 30
55243: PUSH
55244: LD_INT 27
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 30
55253: PUSH
55254: LD_INT 26
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 30
55263: PUSH
55264: LD_INT 28
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PPUSH
55281: CALL_OW 69
55285: ST_TO_ADDR
// if not tmp then
55286: LD_VAR 0 2
55290: NOT
55291: IFFALSE 55295
// exit ;
55293: GO 55324
// for i in tmp do
55295: LD_ADDR_VAR 0 1
55299: PUSH
55300: LD_VAR 0 2
55304: PUSH
55305: FOR_IN
55306: IFFALSE 55322
// SetLives ( i , 1 ) ;
55308: LD_VAR 0 1
55312: PPUSH
55313: LD_INT 1
55315: PPUSH
55316: CALL_OW 234
55320: GO 55305
55322: POP
55323: POP
// end ;
55324: PPOPN 2
55326: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
55327: LD_EXP 34
55331: PUSH
55332: LD_EXP 83
55336: AND
55337: IFFALSE 55624
55339: GO 55341
55341: DISABLE
55342: LD_INT 0
55344: PPUSH
55345: PPUSH
55346: PPUSH
// begin i := rand ( 1 , 7 ) ;
55347: LD_ADDR_VAR 0 1
55351: PUSH
55352: LD_INT 1
55354: PPUSH
55355: LD_INT 7
55357: PPUSH
55358: CALL_OW 12
55362: ST_TO_ADDR
// case i of 1 :
55363: LD_VAR 0 1
55367: PUSH
55368: LD_INT 1
55370: DOUBLE
55371: EQUAL
55372: IFTRUE 55376
55374: GO 55386
55376: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
55377: LD_STRING earthquake(getX(game), 0, 32)
55379: PPUSH
55380: CALL_OW 559
55384: GO 55624
55386: LD_INT 2
55388: DOUBLE
55389: EQUAL
55390: IFTRUE 55394
55392: GO 55408
55394: POP
// begin ToLua ( displayStucuk(); ) ;
55395: LD_STRING displayStucuk();
55397: PPUSH
55398: CALL_OW 559
// ResetFog ;
55402: CALL_OW 335
// end ; 3 :
55406: GO 55624
55408: LD_INT 3
55410: DOUBLE
55411: EQUAL
55412: IFTRUE 55416
55414: GO 55520
55416: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55417: LD_ADDR_VAR 0 2
55421: PUSH
55422: LD_INT 22
55424: PUSH
55425: LD_OWVAR 2
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 25
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PPUSH
55448: CALL_OW 69
55452: ST_TO_ADDR
// if not tmp then
55453: LD_VAR 0 2
55457: NOT
55458: IFFALSE 55462
// exit ;
55460: GO 55624
// un := tmp [ rand ( 1 , tmp ) ] ;
55462: LD_ADDR_VAR 0 3
55466: PUSH
55467: LD_VAR 0 2
55471: PUSH
55472: LD_INT 1
55474: PPUSH
55475: LD_VAR 0 2
55479: PPUSH
55480: CALL_OW 12
55484: ARRAY
55485: ST_TO_ADDR
// if Crawls ( un ) then
55486: LD_VAR 0 3
55490: PPUSH
55491: CALL_OW 318
55495: IFFALSE 55506
// ComWalk ( un ) ;
55497: LD_VAR 0 3
55501: PPUSH
55502: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55506: LD_VAR 0 3
55510: PPUSH
55511: LD_INT 8
55513: PPUSH
55514: CALL_OW 336
// end ; 4 :
55518: GO 55624
55520: LD_INT 4
55522: DOUBLE
55523: EQUAL
55524: IFTRUE 55528
55526: GO 55602
55528: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
55529: LD_ADDR_VAR 0 2
55533: PUSH
55534: LD_INT 22
55536: PUSH
55537: LD_OWVAR 2
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 30
55548: PUSH
55549: LD_INT 29
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PPUSH
55560: CALL_OW 69
55564: ST_TO_ADDR
// if not tmp then
55565: LD_VAR 0 2
55569: NOT
55570: IFFALSE 55574
// exit ;
55572: GO 55624
// CenterNowOnUnits ( tmp [ 1 ] ) ;
55574: LD_VAR 0 2
55578: PUSH
55579: LD_INT 1
55581: ARRAY
55582: PPUSH
55583: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
55587: LD_VAR 0 2
55591: PUSH
55592: LD_INT 1
55594: ARRAY
55595: PPUSH
55596: CALL_OW 65
// end ; 5 .. 7 :
55600: GO 55624
55602: LD_INT 5
55604: DOUBLE
55605: GREATEREQUAL
55606: IFFALSE 55614
55608: LD_INT 7
55610: DOUBLE
55611: LESSEQUAL
55612: IFTRUE 55616
55614: GO 55623
55616: POP
// StreamSibBomb ; end ;
55617: CALL 51861 0 0
55621: GO 55624
55623: POP
// end ;
55624: PPOPN 3
55626: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
55627: LD_EXP 34
55631: PUSH
55632: LD_EXP 84
55636: AND
55637: IFFALSE 55793
55639: GO 55641
55641: DISABLE
55642: LD_INT 0
55644: PPUSH
55645: PPUSH
55646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
55647: LD_ADDR_VAR 0 2
55651: PUSH
55652: LD_INT 81
55654: PUSH
55655: LD_OWVAR 2
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: LD_INT 21
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 21
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: LIST
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PPUSH
55696: CALL_OW 69
55700: ST_TO_ADDR
// if not tmp then
55701: LD_VAR 0 2
55705: NOT
55706: IFFALSE 55710
// exit ;
55708: GO 55793
// p := 0 ;
55710: LD_ADDR_VAR 0 3
55714: PUSH
55715: LD_INT 0
55717: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
55718: LD_INT 35
55720: PPUSH
55721: CALL_OW 67
// p := p + 1 ;
55725: LD_ADDR_VAR 0 3
55729: PUSH
55730: LD_VAR 0 3
55734: PUSH
55735: LD_INT 1
55737: PLUS
55738: ST_TO_ADDR
// for i in tmp do
55739: LD_ADDR_VAR 0 1
55743: PUSH
55744: LD_VAR 0 2
55748: PUSH
55749: FOR_IN
55750: IFFALSE 55781
// if GetLives ( i ) < 1000 then
55752: LD_VAR 0 1
55756: PPUSH
55757: CALL_OW 256
55761: PUSH
55762: LD_INT 1000
55764: LESS
55765: IFFALSE 55779
// SetLives ( i , 1000 ) ;
55767: LD_VAR 0 1
55771: PPUSH
55772: LD_INT 1000
55774: PPUSH
55775: CALL_OW 234
55779: GO 55749
55781: POP
55782: POP
// until p > 20 ;
55783: LD_VAR 0 3
55787: PUSH
55788: LD_INT 20
55790: GREATER
55791: IFFALSE 55718
// end ;
55793: PPOPN 3
55795: END
// every 0 0$1 trigger StreamModeActive and sTime do
55796: LD_EXP 34
55800: PUSH
55801: LD_EXP 85
55805: AND
55806: IFFALSE 55841
55808: GO 55810
55810: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
55811: LD_INT 28
55813: PPUSH
55814: LD_OWVAR 2
55818: PPUSH
55819: LD_INT 2
55821: PPUSH
55822: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
55826: LD_INT 30
55828: PPUSH
55829: LD_OWVAR 2
55833: PPUSH
55834: LD_INT 2
55836: PPUSH
55837: CALL_OW 322
// end ;
55841: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
55842: LD_EXP 34
55846: PUSH
55847: LD_EXP 86
55851: AND
55852: IFFALSE 55973
55854: GO 55856
55856: DISABLE
55857: LD_INT 0
55859: PPUSH
55860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55861: LD_ADDR_VAR 0 2
55865: PUSH
55866: LD_INT 22
55868: PUSH
55869: LD_OWVAR 2
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 21
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 3
55890: PUSH
55891: LD_INT 23
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: LIST
55909: PPUSH
55910: CALL_OW 69
55914: ST_TO_ADDR
// if not tmp then
55915: LD_VAR 0 2
55919: NOT
55920: IFFALSE 55924
// exit ;
55922: GO 55973
// for i in tmp do
55924: LD_ADDR_VAR 0 1
55928: PUSH
55929: LD_VAR 0 2
55933: PUSH
55934: FOR_IN
55935: IFFALSE 55971
// begin if Crawls ( i ) then
55937: LD_VAR 0 1
55941: PPUSH
55942: CALL_OW 318
55946: IFFALSE 55957
// ComWalk ( i ) ;
55948: LD_VAR 0 1
55952: PPUSH
55953: CALL_OW 138
// SetClass ( i , 2 ) ;
55957: LD_VAR 0 1
55961: PPUSH
55962: LD_INT 2
55964: PPUSH
55965: CALL_OW 336
// end ;
55969: GO 55934
55971: POP
55972: POP
// end ;
55973: PPOPN 2
55975: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
55976: LD_EXP 34
55980: PUSH
55981: LD_EXP 87
55985: AND
55986: IFFALSE 56274
55988: GO 55990
55990: DISABLE
55991: LD_INT 0
55993: PPUSH
55994: PPUSH
55995: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
55996: LD_OWVAR 2
56000: PPUSH
56001: LD_INT 9
56003: PPUSH
56004: LD_INT 1
56006: PPUSH
56007: LD_INT 1
56009: PPUSH
56010: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
56014: LD_INT 9
56016: PPUSH
56017: LD_OWVAR 2
56021: PPUSH
56022: CALL_OW 343
// uc_side := 9 ;
56026: LD_ADDR_OWVAR 20
56030: PUSH
56031: LD_INT 9
56033: ST_TO_ADDR
// uc_nation := 2 ;
56034: LD_ADDR_OWVAR 21
56038: PUSH
56039: LD_INT 2
56041: ST_TO_ADDR
// hc_name := Dark Warrior ;
56042: LD_ADDR_OWVAR 26
56046: PUSH
56047: LD_STRING Dark Warrior
56049: ST_TO_ADDR
// hc_gallery :=  ;
56050: LD_ADDR_OWVAR 33
56054: PUSH
56055: LD_STRING 
56057: ST_TO_ADDR
// hc_noskilllimit := true ;
56058: LD_ADDR_OWVAR 76
56062: PUSH
56063: LD_INT 1
56065: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
56066: LD_ADDR_OWVAR 31
56070: PUSH
56071: LD_INT 30
56073: PUSH
56074: LD_INT 30
56076: PUSH
56077: LD_INT 30
56079: PUSH
56080: LD_INT 30
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: ST_TO_ADDR
// un := CreateHuman ;
56089: LD_ADDR_VAR 0 3
56093: PUSH
56094: CALL_OW 44
56098: ST_TO_ADDR
// hc_noskilllimit := false ;
56099: LD_ADDR_OWVAR 76
56103: PUSH
56104: LD_INT 0
56106: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56107: LD_VAR 0 3
56111: PPUSH
56112: LD_INT 1
56114: PPUSH
56115: CALL_OW 51
// ToLua ( playRanger() ) ;
56119: LD_STRING playRanger()
56121: PPUSH
56122: CALL_OW 559
// p := 0 ;
56126: LD_ADDR_VAR 0 2
56130: PUSH
56131: LD_INT 0
56133: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56134: LD_INT 35
56136: PPUSH
56137: CALL_OW 67
// p := p + 1 ;
56141: LD_ADDR_VAR 0 2
56145: PUSH
56146: LD_VAR 0 2
56150: PUSH
56151: LD_INT 1
56153: PLUS
56154: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
56155: LD_VAR 0 3
56159: PPUSH
56160: CALL_OW 256
56164: PUSH
56165: LD_INT 1000
56167: LESS
56168: IFFALSE 56182
// SetLives ( un , 1000 ) ;
56170: LD_VAR 0 3
56174: PPUSH
56175: LD_INT 1000
56177: PPUSH
56178: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
56182: LD_VAR 0 3
56186: PPUSH
56187: LD_INT 81
56189: PUSH
56190: LD_OWVAR 2
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 91
56201: PUSH
56202: LD_VAR 0 3
56206: PUSH
56207: LD_INT 30
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: LIST
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PPUSH
56219: CALL_OW 69
56223: PPUSH
56224: LD_VAR 0 3
56228: PPUSH
56229: CALL_OW 74
56233: PPUSH
56234: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
56238: LD_VAR 0 2
56242: PUSH
56243: LD_INT 80
56245: GREATER
56246: PUSH
56247: LD_VAR 0 3
56251: PPUSH
56252: CALL_OW 301
56256: OR
56257: IFFALSE 56134
// if un then
56259: LD_VAR 0 3
56263: IFFALSE 56274
// RemoveUnit ( un ) ;
56265: LD_VAR 0 3
56269: PPUSH
56270: CALL_OW 64
// end ;
56274: PPOPN 3
56276: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
56277: LD_EXP 88
56281: IFFALSE 56397
56283: GO 56285
56285: DISABLE
56286: LD_INT 0
56288: PPUSH
56289: PPUSH
56290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56291: LD_ADDR_VAR 0 2
56295: PUSH
56296: LD_INT 81
56298: PUSH
56299: LD_OWVAR 2
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 21
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PPUSH
56322: CALL_OW 69
56326: ST_TO_ADDR
// ToLua ( playComputer() ) ;
56327: LD_STRING playComputer()
56329: PPUSH
56330: CALL_OW 559
// if not tmp then
56334: LD_VAR 0 2
56338: NOT
56339: IFFALSE 56343
// exit ;
56341: GO 56397
// for i in tmp do
56343: LD_ADDR_VAR 0 1
56347: PUSH
56348: LD_VAR 0 2
56352: PUSH
56353: FOR_IN
56354: IFFALSE 56395
// for j := 1 to 4 do
56356: LD_ADDR_VAR 0 3
56360: PUSH
56361: DOUBLE
56362: LD_INT 1
56364: DEC
56365: ST_TO_ADDR
56366: LD_INT 4
56368: PUSH
56369: FOR_TO
56370: IFFALSE 56391
// SetSkill ( i , j , 10 ) ;
56372: LD_VAR 0 1
56376: PPUSH
56377: LD_VAR 0 3
56381: PPUSH
56382: LD_INT 10
56384: PPUSH
56385: CALL_OW 237
56389: GO 56369
56391: POP
56392: POP
56393: GO 56353
56395: POP
56396: POP
// end ;
56397: PPOPN 3
56399: END
// every 0 0$1 trigger s30 do var i , tmp ;
56400: LD_EXP 89
56404: IFFALSE 56473
56406: GO 56408
56408: DISABLE
56409: LD_INT 0
56411: PPUSH
56412: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56413: LD_ADDR_VAR 0 2
56417: PUSH
56418: LD_INT 22
56420: PUSH
56421: LD_OWVAR 2
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PPUSH
56430: CALL_OW 69
56434: ST_TO_ADDR
// if not tmp then
56435: LD_VAR 0 2
56439: NOT
56440: IFFALSE 56444
// exit ;
56442: GO 56473
// for i in tmp do
56444: LD_ADDR_VAR 0 1
56448: PUSH
56449: LD_VAR 0 2
56453: PUSH
56454: FOR_IN
56455: IFFALSE 56471
// SetLives ( i , 300 ) ;
56457: LD_VAR 0 1
56461: PPUSH
56462: LD_INT 300
56464: PPUSH
56465: CALL_OW 234
56469: GO 56454
56471: POP
56472: POP
// end ;
56473: PPOPN 2
56475: END
// every 0 0$1 trigger s60 do var i , tmp ;
56476: LD_EXP 90
56480: IFFALSE 56549
56482: GO 56484
56484: DISABLE
56485: LD_INT 0
56487: PPUSH
56488: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56489: LD_ADDR_VAR 0 2
56493: PUSH
56494: LD_INT 22
56496: PUSH
56497: LD_OWVAR 2
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PPUSH
56506: CALL_OW 69
56510: ST_TO_ADDR
// if not tmp then
56511: LD_VAR 0 2
56515: NOT
56516: IFFALSE 56520
// exit ;
56518: GO 56549
// for i in tmp do
56520: LD_ADDR_VAR 0 1
56524: PUSH
56525: LD_VAR 0 2
56529: PUSH
56530: FOR_IN
56531: IFFALSE 56547
// SetLives ( i , 600 ) ;
56533: LD_VAR 0 1
56537: PPUSH
56538: LD_INT 600
56540: PPUSH
56541: CALL_OW 234
56545: GO 56530
56547: POP
56548: POP
// end ;
56549: PPOPN 2
56551: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
56552: LD_INT 0
56554: PPUSH
// case cmd of 301 :
56555: LD_VAR 0 1
56559: PUSH
56560: LD_INT 301
56562: DOUBLE
56563: EQUAL
56564: IFTRUE 56568
56566: GO 56600
56568: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
56569: LD_VAR 0 6
56573: PPUSH
56574: LD_VAR 0 7
56578: PPUSH
56579: LD_VAR 0 8
56583: PPUSH
56584: LD_VAR 0 4
56588: PPUSH
56589: LD_VAR 0 5
56593: PPUSH
56594: CALL 57801 0 5
56598: GO 56721
56600: LD_INT 302
56602: DOUBLE
56603: EQUAL
56604: IFTRUE 56608
56606: GO 56645
56608: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
56609: LD_VAR 0 6
56613: PPUSH
56614: LD_VAR 0 7
56618: PPUSH
56619: LD_VAR 0 8
56623: PPUSH
56624: LD_VAR 0 9
56628: PPUSH
56629: LD_VAR 0 4
56633: PPUSH
56634: LD_VAR 0 5
56638: PPUSH
56639: CALL 57892 0 6
56643: GO 56721
56645: LD_INT 303
56647: DOUBLE
56648: EQUAL
56649: IFTRUE 56653
56651: GO 56690
56653: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
56654: LD_VAR 0 6
56658: PPUSH
56659: LD_VAR 0 7
56663: PPUSH
56664: LD_VAR 0 8
56668: PPUSH
56669: LD_VAR 0 9
56673: PPUSH
56674: LD_VAR 0 4
56678: PPUSH
56679: LD_VAR 0 5
56683: PPUSH
56684: CALL 56726 0 6
56688: GO 56721
56690: LD_INT 304
56692: DOUBLE
56693: EQUAL
56694: IFTRUE 56698
56696: GO 56720
56698: POP
// hHackTeleport ( unit , x , y ) ; end ;
56699: LD_VAR 0 2
56703: PPUSH
56704: LD_VAR 0 4
56708: PPUSH
56709: LD_VAR 0 5
56713: PPUSH
56714: CALL 58485 0 3
56718: GO 56721
56720: POP
// end ;
56721: LD_VAR 0 12
56725: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
56726: LD_INT 0
56728: PPUSH
56729: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
56730: LD_VAR 0 1
56734: PUSH
56735: LD_INT 1
56737: LESS
56738: PUSH
56739: LD_VAR 0 1
56743: PUSH
56744: LD_INT 3
56746: GREATER
56747: OR
56748: PUSH
56749: LD_VAR 0 5
56753: PPUSH
56754: LD_VAR 0 6
56758: PPUSH
56759: CALL_OW 428
56763: OR
56764: IFFALSE 56768
// exit ;
56766: GO 57488
// uc_side := your_side ;
56768: LD_ADDR_OWVAR 20
56772: PUSH
56773: LD_OWVAR 2
56777: ST_TO_ADDR
// uc_nation := nation ;
56778: LD_ADDR_OWVAR 21
56782: PUSH
56783: LD_VAR 0 1
56787: ST_TO_ADDR
// bc_level = 1 ;
56788: LD_ADDR_OWVAR 43
56792: PUSH
56793: LD_INT 1
56795: ST_TO_ADDR
// case btype of 1 :
56796: LD_VAR 0 2
56800: PUSH
56801: LD_INT 1
56803: DOUBLE
56804: EQUAL
56805: IFTRUE 56809
56807: GO 56820
56809: POP
// bc_type := b_depot ; 2 :
56810: LD_ADDR_OWVAR 42
56814: PUSH
56815: LD_INT 0
56817: ST_TO_ADDR
56818: GO 57432
56820: LD_INT 2
56822: DOUBLE
56823: EQUAL
56824: IFTRUE 56828
56826: GO 56839
56828: POP
// bc_type := b_warehouse ; 3 :
56829: LD_ADDR_OWVAR 42
56833: PUSH
56834: LD_INT 1
56836: ST_TO_ADDR
56837: GO 57432
56839: LD_INT 3
56841: DOUBLE
56842: EQUAL
56843: IFTRUE 56847
56845: GO 56858
56847: POP
// bc_type := b_lab ; 4 .. 9 :
56848: LD_ADDR_OWVAR 42
56852: PUSH
56853: LD_INT 6
56855: ST_TO_ADDR
56856: GO 57432
56858: LD_INT 4
56860: DOUBLE
56861: GREATEREQUAL
56862: IFFALSE 56870
56864: LD_INT 9
56866: DOUBLE
56867: LESSEQUAL
56868: IFTRUE 56872
56870: GO 56924
56872: POP
// begin bc_type := b_lab_half ;
56873: LD_ADDR_OWVAR 42
56877: PUSH
56878: LD_INT 7
56880: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
56881: LD_ADDR_OWVAR 44
56885: PUSH
56886: LD_INT 10
56888: PUSH
56889: LD_INT 11
56891: PUSH
56892: LD_INT 12
56894: PUSH
56895: LD_INT 15
56897: PUSH
56898: LD_INT 14
56900: PUSH
56901: LD_INT 13
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: PUSH
56912: LD_VAR 0 2
56916: PUSH
56917: LD_INT 3
56919: MINUS
56920: ARRAY
56921: ST_TO_ADDR
// end ; 10 .. 13 :
56922: GO 57432
56924: LD_INT 10
56926: DOUBLE
56927: GREATEREQUAL
56928: IFFALSE 56936
56930: LD_INT 13
56932: DOUBLE
56933: LESSEQUAL
56934: IFTRUE 56938
56936: GO 57015
56938: POP
// begin bc_type := b_lab_full ;
56939: LD_ADDR_OWVAR 42
56943: PUSH
56944: LD_INT 8
56946: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
56947: LD_ADDR_OWVAR 44
56951: PUSH
56952: LD_INT 10
56954: PUSH
56955: LD_INT 12
56957: PUSH
56958: LD_INT 14
56960: PUSH
56961: LD_INT 13
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: PUSH
56970: LD_VAR 0 2
56974: PUSH
56975: LD_INT 9
56977: MINUS
56978: ARRAY
56979: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
56980: LD_ADDR_OWVAR 45
56984: PUSH
56985: LD_INT 11
56987: PUSH
56988: LD_INT 15
56990: PUSH
56991: LD_INT 12
56993: PUSH
56994: LD_INT 15
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: PUSH
57003: LD_VAR 0 2
57007: PUSH
57008: LD_INT 9
57010: MINUS
57011: ARRAY
57012: ST_TO_ADDR
// end ; 14 :
57013: GO 57432
57015: LD_INT 14
57017: DOUBLE
57018: EQUAL
57019: IFTRUE 57023
57021: GO 57034
57023: POP
// bc_type := b_workshop ; 15 :
57024: LD_ADDR_OWVAR 42
57028: PUSH
57029: LD_INT 2
57031: ST_TO_ADDR
57032: GO 57432
57034: LD_INT 15
57036: DOUBLE
57037: EQUAL
57038: IFTRUE 57042
57040: GO 57053
57042: POP
// bc_type := b_factory ; 16 :
57043: LD_ADDR_OWVAR 42
57047: PUSH
57048: LD_INT 3
57050: ST_TO_ADDR
57051: GO 57432
57053: LD_INT 16
57055: DOUBLE
57056: EQUAL
57057: IFTRUE 57061
57059: GO 57072
57061: POP
// bc_type := b_ext_gun ; 17 :
57062: LD_ADDR_OWVAR 42
57066: PUSH
57067: LD_INT 17
57069: ST_TO_ADDR
57070: GO 57432
57072: LD_INT 17
57074: DOUBLE
57075: EQUAL
57076: IFTRUE 57080
57078: GO 57108
57080: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
57081: LD_ADDR_OWVAR 42
57085: PUSH
57086: LD_INT 19
57088: PUSH
57089: LD_INT 23
57091: PUSH
57092: LD_INT 19
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: LIST
57099: PUSH
57100: LD_VAR 0 1
57104: ARRAY
57105: ST_TO_ADDR
57106: GO 57432
57108: LD_INT 18
57110: DOUBLE
57111: EQUAL
57112: IFTRUE 57116
57114: GO 57127
57116: POP
// bc_type := b_ext_radar ; 19 :
57117: LD_ADDR_OWVAR 42
57121: PUSH
57122: LD_INT 20
57124: ST_TO_ADDR
57125: GO 57432
57127: LD_INT 19
57129: DOUBLE
57130: EQUAL
57131: IFTRUE 57135
57133: GO 57146
57135: POP
// bc_type := b_ext_radio ; 20 :
57136: LD_ADDR_OWVAR 42
57140: PUSH
57141: LD_INT 22
57143: ST_TO_ADDR
57144: GO 57432
57146: LD_INT 20
57148: DOUBLE
57149: EQUAL
57150: IFTRUE 57154
57152: GO 57165
57154: POP
// bc_type := b_ext_siberium ; 21 :
57155: LD_ADDR_OWVAR 42
57159: PUSH
57160: LD_INT 21
57162: ST_TO_ADDR
57163: GO 57432
57165: LD_INT 21
57167: DOUBLE
57168: EQUAL
57169: IFTRUE 57173
57171: GO 57184
57173: POP
// bc_type := b_ext_computer ; 22 :
57174: LD_ADDR_OWVAR 42
57178: PUSH
57179: LD_INT 24
57181: ST_TO_ADDR
57182: GO 57432
57184: LD_INT 22
57186: DOUBLE
57187: EQUAL
57188: IFTRUE 57192
57190: GO 57203
57192: POP
// bc_type := b_ext_track ; 23 :
57193: LD_ADDR_OWVAR 42
57197: PUSH
57198: LD_INT 16
57200: ST_TO_ADDR
57201: GO 57432
57203: LD_INT 23
57205: DOUBLE
57206: EQUAL
57207: IFTRUE 57211
57209: GO 57222
57211: POP
// bc_type := b_ext_laser ; 24 :
57212: LD_ADDR_OWVAR 42
57216: PUSH
57217: LD_INT 25
57219: ST_TO_ADDR
57220: GO 57432
57222: LD_INT 24
57224: DOUBLE
57225: EQUAL
57226: IFTRUE 57230
57228: GO 57241
57230: POP
// bc_type := b_control_tower ; 25 :
57231: LD_ADDR_OWVAR 42
57235: PUSH
57236: LD_INT 36
57238: ST_TO_ADDR
57239: GO 57432
57241: LD_INT 25
57243: DOUBLE
57244: EQUAL
57245: IFTRUE 57249
57247: GO 57260
57249: POP
// bc_type := b_breastwork ; 26 :
57250: LD_ADDR_OWVAR 42
57254: PUSH
57255: LD_INT 31
57257: ST_TO_ADDR
57258: GO 57432
57260: LD_INT 26
57262: DOUBLE
57263: EQUAL
57264: IFTRUE 57268
57266: GO 57279
57268: POP
// bc_type := b_bunker ; 27 :
57269: LD_ADDR_OWVAR 42
57273: PUSH
57274: LD_INT 32
57276: ST_TO_ADDR
57277: GO 57432
57279: LD_INT 27
57281: DOUBLE
57282: EQUAL
57283: IFTRUE 57287
57285: GO 57298
57287: POP
// bc_type := b_turret ; 28 :
57288: LD_ADDR_OWVAR 42
57292: PUSH
57293: LD_INT 33
57295: ST_TO_ADDR
57296: GO 57432
57298: LD_INT 28
57300: DOUBLE
57301: EQUAL
57302: IFTRUE 57306
57304: GO 57317
57306: POP
// bc_type := b_armoury ; 29 :
57307: LD_ADDR_OWVAR 42
57311: PUSH
57312: LD_INT 4
57314: ST_TO_ADDR
57315: GO 57432
57317: LD_INT 29
57319: DOUBLE
57320: EQUAL
57321: IFTRUE 57325
57323: GO 57336
57325: POP
// bc_type := b_barracks ; 30 :
57326: LD_ADDR_OWVAR 42
57330: PUSH
57331: LD_INT 5
57333: ST_TO_ADDR
57334: GO 57432
57336: LD_INT 30
57338: DOUBLE
57339: EQUAL
57340: IFTRUE 57344
57342: GO 57355
57344: POP
// bc_type := b_solar_power ; 31 :
57345: LD_ADDR_OWVAR 42
57349: PUSH
57350: LD_INT 27
57352: ST_TO_ADDR
57353: GO 57432
57355: LD_INT 31
57357: DOUBLE
57358: EQUAL
57359: IFTRUE 57363
57361: GO 57374
57363: POP
// bc_type := b_oil_power ; 32 :
57364: LD_ADDR_OWVAR 42
57368: PUSH
57369: LD_INT 26
57371: ST_TO_ADDR
57372: GO 57432
57374: LD_INT 32
57376: DOUBLE
57377: EQUAL
57378: IFTRUE 57382
57380: GO 57393
57382: POP
// bc_type := b_siberite_power ; 33 :
57383: LD_ADDR_OWVAR 42
57387: PUSH
57388: LD_INT 28
57390: ST_TO_ADDR
57391: GO 57432
57393: LD_INT 33
57395: DOUBLE
57396: EQUAL
57397: IFTRUE 57401
57399: GO 57412
57401: POP
// bc_type := b_oil_mine ; 34 :
57402: LD_ADDR_OWVAR 42
57406: PUSH
57407: LD_INT 29
57409: ST_TO_ADDR
57410: GO 57432
57412: LD_INT 34
57414: DOUBLE
57415: EQUAL
57416: IFTRUE 57420
57418: GO 57431
57420: POP
// bc_type := b_siberite_mine ; end ;
57421: LD_ADDR_OWVAR 42
57425: PUSH
57426: LD_INT 30
57428: ST_TO_ADDR
57429: GO 57432
57431: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
57432: LD_ADDR_VAR 0 8
57436: PUSH
57437: LD_VAR 0 5
57441: PPUSH
57442: LD_VAR 0 6
57446: PPUSH
57447: LD_VAR 0 3
57451: PPUSH
57452: CALL_OW 47
57456: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
57457: LD_OWVAR 42
57461: PUSH
57462: LD_INT 32
57464: PUSH
57465: LD_INT 33
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: IN
57472: IFFALSE 57488
// PlaceWeaponTurret ( b , weapon ) ;
57474: LD_VAR 0 8
57478: PPUSH
57479: LD_VAR 0 4
57483: PPUSH
57484: CALL_OW 431
// end ;
57488: LD_VAR 0 7
57492: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
57493: LD_INT 0
57495: PPUSH
57496: PPUSH
57497: PPUSH
57498: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57499: LD_ADDR_VAR 0 4
57503: PUSH
57504: LD_INT 22
57506: PUSH
57507: LD_OWVAR 2
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 2
57518: PUSH
57519: LD_INT 30
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 30
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: LIST
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PPUSH
57548: CALL_OW 69
57552: ST_TO_ADDR
// if not tmp then
57553: LD_VAR 0 4
57557: NOT
57558: IFFALSE 57562
// exit ;
57560: GO 57621
// for i in tmp do
57562: LD_ADDR_VAR 0 2
57566: PUSH
57567: LD_VAR 0 4
57571: PUSH
57572: FOR_IN
57573: IFFALSE 57619
// for j = 1 to 3 do
57575: LD_ADDR_VAR 0 3
57579: PUSH
57580: DOUBLE
57581: LD_INT 1
57583: DEC
57584: ST_TO_ADDR
57585: LD_INT 3
57587: PUSH
57588: FOR_TO
57589: IFFALSE 57615
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
57591: LD_VAR 0 2
57595: PPUSH
57596: CALL_OW 274
57600: PPUSH
57601: LD_VAR 0 3
57605: PPUSH
57606: LD_INT 99999
57608: PPUSH
57609: CALL_OW 277
57613: GO 57588
57615: POP
57616: POP
57617: GO 57572
57619: POP
57620: POP
// end ;
57621: LD_VAR 0 1
57625: RET
// export function hHackSetLevel10 ; var i , j ; begin
57626: LD_INT 0
57628: PPUSH
57629: PPUSH
57630: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
57631: LD_ADDR_VAR 0 2
57635: PUSH
57636: LD_INT 21
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PPUSH
57646: CALL_OW 69
57650: PUSH
57651: FOR_IN
57652: IFFALSE 57704
// if IsSelected ( i ) then
57654: LD_VAR 0 2
57658: PPUSH
57659: CALL_OW 306
57663: IFFALSE 57702
// begin for j := 1 to 4 do
57665: LD_ADDR_VAR 0 3
57669: PUSH
57670: DOUBLE
57671: LD_INT 1
57673: DEC
57674: ST_TO_ADDR
57675: LD_INT 4
57677: PUSH
57678: FOR_TO
57679: IFFALSE 57700
// SetSkill ( i , j , 10 ) ;
57681: LD_VAR 0 2
57685: PPUSH
57686: LD_VAR 0 3
57690: PPUSH
57691: LD_INT 10
57693: PPUSH
57694: CALL_OW 237
57698: GO 57678
57700: POP
57701: POP
// end ;
57702: GO 57651
57704: POP
57705: POP
// end ;
57706: LD_VAR 0 1
57710: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
57711: LD_INT 0
57713: PPUSH
57714: PPUSH
57715: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
57716: LD_ADDR_VAR 0 2
57720: PUSH
57721: LD_INT 22
57723: PUSH
57724: LD_OWVAR 2
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 21
57735: PUSH
57736: LD_INT 1
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PPUSH
57747: CALL_OW 69
57751: PUSH
57752: FOR_IN
57753: IFFALSE 57794
// begin for j := 1 to 4 do
57755: LD_ADDR_VAR 0 3
57759: PUSH
57760: DOUBLE
57761: LD_INT 1
57763: DEC
57764: ST_TO_ADDR
57765: LD_INT 4
57767: PUSH
57768: FOR_TO
57769: IFFALSE 57790
// SetSkill ( i , j , 10 ) ;
57771: LD_VAR 0 2
57775: PPUSH
57776: LD_VAR 0 3
57780: PPUSH
57781: LD_INT 10
57783: PPUSH
57784: CALL_OW 237
57788: GO 57768
57790: POP
57791: POP
// end ;
57792: GO 57752
57794: POP
57795: POP
// end ;
57796: LD_VAR 0 1
57800: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
57801: LD_INT 0
57803: PPUSH
// uc_side := your_side ;
57804: LD_ADDR_OWVAR 20
57808: PUSH
57809: LD_OWVAR 2
57813: ST_TO_ADDR
// uc_nation := nation ;
57814: LD_ADDR_OWVAR 21
57818: PUSH
57819: LD_VAR 0 1
57823: ST_TO_ADDR
// InitHc ;
57824: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
57828: LD_INT 0
57830: PPUSH
57831: LD_VAR 0 2
57835: PPUSH
57836: LD_VAR 0 3
57840: PPUSH
57841: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
57845: LD_VAR 0 4
57849: PPUSH
57850: LD_VAR 0 5
57854: PPUSH
57855: CALL_OW 428
57859: PUSH
57860: LD_INT 0
57862: EQUAL
57863: IFFALSE 57887
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
57865: CALL_OW 44
57869: PPUSH
57870: LD_VAR 0 4
57874: PPUSH
57875: LD_VAR 0 5
57879: PPUSH
57880: LD_INT 1
57882: PPUSH
57883: CALL_OW 48
// end ;
57887: LD_VAR 0 6
57891: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
57892: LD_INT 0
57894: PPUSH
57895: PPUSH
// uc_side := your_side ;
57896: LD_ADDR_OWVAR 20
57900: PUSH
57901: LD_OWVAR 2
57905: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
57906: LD_VAR 0 1
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: LD_INT 2
57916: PUSH
57917: LD_INT 3
57919: PUSH
57920: LD_INT 4
57922: PUSH
57923: LD_INT 5
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: IN
57933: IFFALSE 57945
// uc_nation := nation_american else
57935: LD_ADDR_OWVAR 21
57939: PUSH
57940: LD_INT 1
57942: ST_TO_ADDR
57943: GO 57988
// if chassis in [ 11 , 12 , 13 , 14 ] then
57945: LD_VAR 0 1
57949: PUSH
57950: LD_INT 11
57952: PUSH
57953: LD_INT 12
57955: PUSH
57956: LD_INT 13
57958: PUSH
57959: LD_INT 14
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: IN
57968: IFFALSE 57980
// uc_nation := nation_arabian else
57970: LD_ADDR_OWVAR 21
57974: PUSH
57975: LD_INT 2
57977: ST_TO_ADDR
57978: GO 57988
// uc_nation := nation_russian ;
57980: LD_ADDR_OWVAR 21
57984: PUSH
57985: LD_INT 3
57987: ST_TO_ADDR
// vc_chassis := chassis ;
57988: LD_ADDR_OWVAR 37
57992: PUSH
57993: LD_VAR 0 1
57997: ST_TO_ADDR
// vc_engine := engine ;
57998: LD_ADDR_OWVAR 39
58002: PUSH
58003: LD_VAR 0 2
58007: ST_TO_ADDR
// vc_control := control ;
58008: LD_ADDR_OWVAR 38
58012: PUSH
58013: LD_VAR 0 3
58017: ST_TO_ADDR
// vc_weapon := weapon ;
58018: LD_ADDR_OWVAR 40
58022: PUSH
58023: LD_VAR 0 4
58027: ST_TO_ADDR
// un := CreateVehicle ;
58028: LD_ADDR_VAR 0 8
58032: PUSH
58033: CALL_OW 45
58037: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
58038: LD_VAR 0 8
58042: PPUSH
58043: LD_INT 0
58045: PPUSH
58046: LD_INT 5
58048: PPUSH
58049: CALL_OW 12
58053: PPUSH
58054: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
58058: LD_VAR 0 8
58062: PPUSH
58063: LD_VAR 0 5
58067: PPUSH
58068: LD_VAR 0 6
58072: PPUSH
58073: LD_INT 1
58075: PPUSH
58076: CALL_OW 48
// end ;
58080: LD_VAR 0 7
58084: RET
// export hInvincible ; every 1 do
58085: GO 58087
58087: DISABLE
// hInvincible := [ ] ;
58088: LD_ADDR_EXP 91
58092: PUSH
58093: EMPTY
58094: ST_TO_ADDR
58095: END
// every 10 do var i ;
58096: GO 58098
58098: DISABLE
58099: LD_INT 0
58101: PPUSH
// begin enable ;
58102: ENABLE
// if not hInvincible then
58103: LD_EXP 91
58107: NOT
58108: IFFALSE 58112
// exit ;
58110: GO 58156
// for i in hInvincible do
58112: LD_ADDR_VAR 0 1
58116: PUSH
58117: LD_EXP 91
58121: PUSH
58122: FOR_IN
58123: IFFALSE 58154
// if GetLives ( i ) < 1000 then
58125: LD_VAR 0 1
58129: PPUSH
58130: CALL_OW 256
58134: PUSH
58135: LD_INT 1000
58137: LESS
58138: IFFALSE 58152
// SetLives ( i , 1000 ) ;
58140: LD_VAR 0 1
58144: PPUSH
58145: LD_INT 1000
58147: PPUSH
58148: CALL_OW 234
58152: GO 58122
58154: POP
58155: POP
// end ;
58156: PPOPN 1
58158: END
// export function hHackInvincible ; var i ; begin
58159: LD_INT 0
58161: PPUSH
58162: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
58163: LD_ADDR_VAR 0 2
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: LD_INT 21
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 21
58183: PUSH
58184: LD_INT 2
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: LIST
58195: PPUSH
58196: CALL_OW 69
58200: PUSH
58201: FOR_IN
58202: IFFALSE 58263
// if IsSelected ( i ) then
58204: LD_VAR 0 2
58208: PPUSH
58209: CALL_OW 306
58213: IFFALSE 58261
// begin if i in hInvincible then
58215: LD_VAR 0 2
58219: PUSH
58220: LD_EXP 91
58224: IN
58225: IFFALSE 58245
// hInvincible := hInvincible diff i else
58227: LD_ADDR_EXP 91
58231: PUSH
58232: LD_EXP 91
58236: PUSH
58237: LD_VAR 0 2
58241: DIFF
58242: ST_TO_ADDR
58243: GO 58261
// hInvincible := hInvincible union i ;
58245: LD_ADDR_EXP 91
58249: PUSH
58250: LD_EXP 91
58254: PUSH
58255: LD_VAR 0 2
58259: UNION
58260: ST_TO_ADDR
// end ;
58261: GO 58201
58263: POP
58264: POP
// end ;
58265: LD_VAR 0 1
58269: RET
// export function hHackInvisible ; var i , j ; begin
58270: LD_INT 0
58272: PPUSH
58273: PPUSH
58274: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58275: LD_ADDR_VAR 0 2
58279: PUSH
58280: LD_INT 21
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PPUSH
58290: CALL_OW 69
58294: PUSH
58295: FOR_IN
58296: IFFALSE 58320
// if IsSelected ( i ) then
58298: LD_VAR 0 2
58302: PPUSH
58303: CALL_OW 306
58307: IFFALSE 58318
// ComForceInvisible ( i ) ;
58309: LD_VAR 0 2
58313: PPUSH
58314: CALL_OW 496
58318: GO 58295
58320: POP
58321: POP
// end ;
58322: LD_VAR 0 1
58326: RET
// export function hHackChangeYourSide ; begin
58327: LD_INT 0
58329: PPUSH
// if your_side = 8 then
58330: LD_OWVAR 2
58334: PUSH
58335: LD_INT 8
58337: EQUAL
58338: IFFALSE 58350
// your_side := 0 else
58340: LD_ADDR_OWVAR 2
58344: PUSH
58345: LD_INT 0
58347: ST_TO_ADDR
58348: GO 58364
// your_side := your_side + 1 ;
58350: LD_ADDR_OWVAR 2
58354: PUSH
58355: LD_OWVAR 2
58359: PUSH
58360: LD_INT 1
58362: PLUS
58363: ST_TO_ADDR
// end ;
58364: LD_VAR 0 1
58368: RET
// export function hHackChangeUnitSide ; var i , j ; begin
58369: LD_INT 0
58371: PPUSH
58372: PPUSH
58373: PPUSH
// for i in all_units do
58374: LD_ADDR_VAR 0 2
58378: PUSH
58379: LD_OWVAR 3
58383: PUSH
58384: FOR_IN
58385: IFFALSE 58463
// if IsSelected ( i ) then
58387: LD_VAR 0 2
58391: PPUSH
58392: CALL_OW 306
58396: IFFALSE 58461
// begin j := GetSide ( i ) ;
58398: LD_ADDR_VAR 0 3
58402: PUSH
58403: LD_VAR 0 2
58407: PPUSH
58408: CALL_OW 255
58412: ST_TO_ADDR
// if j = 8 then
58413: LD_VAR 0 3
58417: PUSH
58418: LD_INT 8
58420: EQUAL
58421: IFFALSE 58433
// j := 0 else
58423: LD_ADDR_VAR 0 3
58427: PUSH
58428: LD_INT 0
58430: ST_TO_ADDR
58431: GO 58447
// j := j + 1 ;
58433: LD_ADDR_VAR 0 3
58437: PUSH
58438: LD_VAR 0 3
58442: PUSH
58443: LD_INT 1
58445: PLUS
58446: ST_TO_ADDR
// SetSide ( i , j ) ;
58447: LD_VAR 0 2
58451: PPUSH
58452: LD_VAR 0 3
58456: PPUSH
58457: CALL_OW 235
// end ;
58461: GO 58384
58463: POP
58464: POP
// end ;
58465: LD_VAR 0 1
58469: RET
// export function hHackFog ; begin
58470: LD_INT 0
58472: PPUSH
// FogOff ( true ) ;
58473: LD_INT 1
58475: PPUSH
58476: CALL_OW 344
// end ;
58480: LD_VAR 0 1
58484: RET
// export function hHackTeleport ( unit , x , y ) ; begin
58485: LD_INT 0
58487: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
58488: LD_VAR 0 1
58492: PPUSH
58493: LD_VAR 0 2
58497: PPUSH
58498: LD_VAR 0 3
58502: PPUSH
58503: LD_INT 1
58505: PPUSH
58506: LD_INT 1
58508: PPUSH
58509: CALL_OW 483
// CenterOnXY ( x , y ) ;
58513: LD_VAR 0 2
58517: PPUSH
58518: LD_VAR 0 3
58522: PPUSH
58523: CALL_OW 84
// end ; end_of_file end_of_file
58527: LD_VAR 0 4
58531: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
58532: LD_INT 0
58534: PPUSH
58535: PPUSH
58536: PPUSH
58537: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
58538: LD_VAR 0 1
58542: PPUSH
58543: CALL_OW 264
58547: PUSH
58548: LD_EXP 7
58552: EQUAL
58553: IFFALSE 58625
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58555: LD_INT 68
58557: PPUSH
58558: LD_VAR 0 1
58562: PPUSH
58563: CALL_OW 255
58567: PPUSH
58568: CALL_OW 321
58572: PUSH
58573: LD_INT 2
58575: EQUAL
58576: IFFALSE 58588
// eff := 70 else
58578: LD_ADDR_VAR 0 4
58582: PUSH
58583: LD_INT 70
58585: ST_TO_ADDR
58586: GO 58596
// eff := 30 ;
58588: LD_ADDR_VAR 0 4
58592: PUSH
58593: LD_INT 30
58595: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58596: LD_VAR 0 1
58600: PPUSH
58601: CALL_OW 250
58605: PPUSH
58606: LD_VAR 0 1
58610: PPUSH
58611: CALL_OW 251
58615: PPUSH
58616: LD_VAR 0 4
58620: PPUSH
58621: CALL_OW 495
// end ; end ;
58625: LD_VAR 0 2
58629: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
58630: LD_INT 0
58632: PPUSH
// end ;
58633: LD_VAR 0 4
58637: RET
// export function SOS_Command ( cmd ) ; begin
58638: LD_INT 0
58640: PPUSH
// end ;
58641: LD_VAR 0 2
58645: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
58646: LD_INT 0
58648: PPUSH
// end ;
58649: LD_VAR 0 6
58653: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
58654: LD_INT 0
58656: PPUSH
58657: PPUSH
// if not vehicle or not factory then
58658: LD_VAR 0 1
58662: NOT
58663: PUSH
58664: LD_VAR 0 2
58668: NOT
58669: OR
58670: IFFALSE 58674
// exit ;
58672: GO 58905
// if factoryWaypoints >= factory then
58674: LD_EXP 92
58678: PUSH
58679: LD_VAR 0 2
58683: GREATEREQUAL
58684: IFFALSE 58905
// if factoryWaypoints [ factory ] then
58686: LD_EXP 92
58690: PUSH
58691: LD_VAR 0 2
58695: ARRAY
58696: IFFALSE 58905
// begin if GetControl ( vehicle ) = control_manual then
58698: LD_VAR 0 1
58702: PPUSH
58703: CALL_OW 263
58707: PUSH
58708: LD_INT 1
58710: EQUAL
58711: IFFALSE 58792
// begin driver := IsDrivenBy ( vehicle ) ;
58713: LD_ADDR_VAR 0 4
58717: PUSH
58718: LD_VAR 0 1
58722: PPUSH
58723: CALL_OW 311
58727: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
58728: LD_VAR 0 4
58732: PPUSH
58733: LD_EXP 92
58737: PUSH
58738: LD_VAR 0 2
58742: ARRAY
58743: PUSH
58744: LD_INT 3
58746: ARRAY
58747: PPUSH
58748: LD_EXP 92
58752: PUSH
58753: LD_VAR 0 2
58757: ARRAY
58758: PUSH
58759: LD_INT 4
58761: ARRAY
58762: PPUSH
58763: CALL_OW 171
// AddComExitVehicle ( driver ) ;
58767: LD_VAR 0 4
58771: PPUSH
58772: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
58776: LD_VAR 0 4
58780: PPUSH
58781: LD_VAR 0 2
58785: PPUSH
58786: CALL_OW 180
// end else
58790: GO 58905
// if GetControl ( vehicle ) = control_remote then
58792: LD_VAR 0 1
58796: PPUSH
58797: CALL_OW 263
58801: PUSH
58802: LD_INT 2
58804: EQUAL
58805: IFFALSE 58866
// begin wait ( 0 0$2 ) ;
58807: LD_INT 70
58809: PPUSH
58810: CALL_OW 67
// if Connect ( vehicle ) then
58814: LD_VAR 0 1
58818: PPUSH
58819: CALL 9273 0 1
58823: IFFALSE 58864
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
58825: LD_VAR 0 1
58829: PPUSH
58830: LD_EXP 92
58834: PUSH
58835: LD_VAR 0 2
58839: ARRAY
58840: PUSH
58841: LD_INT 3
58843: ARRAY
58844: PPUSH
58845: LD_EXP 92
58849: PUSH
58850: LD_VAR 0 2
58854: ARRAY
58855: PUSH
58856: LD_INT 4
58858: ARRAY
58859: PPUSH
58860: CALL_OW 171
// end else
58864: GO 58905
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
58866: LD_VAR 0 1
58870: PPUSH
58871: LD_EXP 92
58875: PUSH
58876: LD_VAR 0 2
58880: ARRAY
58881: PUSH
58882: LD_INT 3
58884: ARRAY
58885: PPUSH
58886: LD_EXP 92
58890: PUSH
58891: LD_VAR 0 2
58895: ARRAY
58896: PUSH
58897: LD_INT 4
58899: ARRAY
58900: PPUSH
58901: CALL_OW 171
// end ; end ;
58905: LD_VAR 0 3
58909: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
58910: LD_INT 0
58912: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
58913: LD_VAR 0 1
58917: PUSH
58918: LD_INT 250
58920: EQUAL
58921: PUSH
58922: LD_VAR 0 2
58926: PPUSH
58927: CALL_OW 264
58931: PUSH
58932: LD_EXP 10
58936: EQUAL
58937: AND
58938: IFFALSE 58959
// MinerPlaceMine ( unit , x , y ) ;
58940: LD_VAR 0 2
58944: PPUSH
58945: LD_VAR 0 4
58949: PPUSH
58950: LD_VAR 0 5
58954: PPUSH
58955: CALL 61687 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
58959: LD_VAR 0 1
58963: PUSH
58964: LD_INT 251
58966: EQUAL
58967: PUSH
58968: LD_VAR 0 2
58972: PPUSH
58973: CALL_OW 264
58977: PUSH
58978: LD_EXP 10
58982: EQUAL
58983: AND
58984: IFFALSE 59005
// MinerDetonateMine ( unit , x , y ) ;
58986: LD_VAR 0 2
58990: PPUSH
58991: LD_VAR 0 4
58995: PPUSH
58996: LD_VAR 0 5
59000: PPUSH
59001: CALL 61964 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59005: LD_VAR 0 1
59009: PUSH
59010: LD_INT 252
59012: EQUAL
59013: PUSH
59014: LD_VAR 0 2
59018: PPUSH
59019: CALL_OW 264
59023: PUSH
59024: LD_EXP 10
59028: EQUAL
59029: AND
59030: IFFALSE 59051
// MinerCreateMinefield ( unit , x , y ) ;
59032: LD_VAR 0 2
59036: PPUSH
59037: LD_VAR 0 4
59041: PPUSH
59042: LD_VAR 0 5
59046: PPUSH
59047: CALL 62381 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59051: LD_VAR 0 1
59055: PUSH
59056: LD_INT 253
59058: EQUAL
59059: PUSH
59060: LD_VAR 0 2
59064: PPUSH
59065: CALL_OW 257
59069: PUSH
59070: LD_INT 5
59072: EQUAL
59073: AND
59074: IFFALSE 59095
// ComBinocular ( unit , x , y ) ;
59076: LD_VAR 0 2
59080: PPUSH
59081: LD_VAR 0 4
59085: PPUSH
59086: LD_VAR 0 5
59090: PPUSH
59091: CALL 62752 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
59095: LD_VAR 0 1
59099: PUSH
59100: LD_INT 254
59102: EQUAL
59103: PUSH
59104: LD_VAR 0 2
59108: PPUSH
59109: CALL_OW 264
59113: PUSH
59114: LD_EXP 5
59118: EQUAL
59119: AND
59120: PUSH
59121: LD_VAR 0 3
59125: PPUSH
59126: CALL_OW 263
59130: PUSH
59131: LD_INT 3
59133: EQUAL
59134: AND
59135: IFFALSE 59151
// HackDestroyVehicle ( unit , selectedUnit ) ;
59137: LD_VAR 0 2
59141: PPUSH
59142: LD_VAR 0 3
59146: PPUSH
59147: CALL 61047 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
59151: LD_VAR 0 1
59155: PUSH
59156: LD_INT 255
59158: EQUAL
59159: PUSH
59160: LD_VAR 0 2
59164: PPUSH
59165: CALL_OW 264
59169: PUSH
59170: LD_INT 14
59172: PUSH
59173: LD_INT 53
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: IN
59180: AND
59181: PUSH
59182: LD_VAR 0 4
59186: PPUSH
59187: LD_VAR 0 5
59191: PPUSH
59192: CALL_OW 488
59196: AND
59197: IFFALSE 59221
// CutTreeXYR ( unit , x , y , 12 ) ;
59199: LD_VAR 0 2
59203: PPUSH
59204: LD_VAR 0 4
59208: PPUSH
59209: LD_VAR 0 5
59213: PPUSH
59214: LD_INT 12
59216: PPUSH
59217: CALL 59613 0 4
// if cmd = 256 then
59221: LD_VAR 0 1
59225: PUSH
59226: LD_INT 256
59228: EQUAL
59229: IFFALSE 59250
// SetFactoryWaypoint ( unit , x , y ) ;
59231: LD_VAR 0 2
59235: PPUSH
59236: LD_VAR 0 4
59240: PPUSH
59241: LD_VAR 0 5
59245: PPUSH
59246: CALL 59255 0 3
// end ;
59250: LD_VAR 0 6
59254: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59255: LD_INT 0
59257: PPUSH
59258: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59259: LD_VAR 0 1
59263: NOT
59264: PUSH
59265: LD_VAR 0 2
59269: PPUSH
59270: LD_VAR 0 3
59274: PPUSH
59275: CALL_OW 488
59279: NOT
59280: OR
59281: PUSH
59282: LD_VAR 0 1
59286: PPUSH
59287: CALL_OW 266
59291: PUSH
59292: LD_INT 3
59294: NONEQUAL
59295: PUSH
59296: LD_VAR 0 1
59300: PPUSH
59301: CALL_OW 247
59305: PUSH
59306: LD_INT 1
59308: EQUAL
59309: NOT
59310: AND
59311: OR
59312: IFFALSE 59316
// exit ;
59314: GO 59465
// if GetType ( factory ) = unit_human then
59316: LD_VAR 0 1
59320: PPUSH
59321: CALL_OW 247
59325: PUSH
59326: LD_INT 1
59328: EQUAL
59329: IFFALSE 59346
// factory := IsInUnit ( factory ) ;
59331: LD_ADDR_VAR 0 1
59335: PUSH
59336: LD_VAR 0 1
59340: PPUSH
59341: CALL_OW 310
59345: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59346: LD_VAR 0 1
59350: PPUSH
59351: CALL_OW 266
59355: PUSH
59356: LD_INT 3
59358: NONEQUAL
59359: IFFALSE 59363
// exit ;
59361: GO 59465
// if HexInfo ( x , y ) = factory then
59363: LD_VAR 0 2
59367: PPUSH
59368: LD_VAR 0 3
59372: PPUSH
59373: CALL_OW 428
59377: PUSH
59378: LD_VAR 0 1
59382: EQUAL
59383: IFFALSE 59410
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
59385: LD_ADDR_EXP 92
59389: PUSH
59390: LD_EXP 92
59394: PPUSH
59395: LD_VAR 0 1
59399: PPUSH
59400: LD_INT 0
59402: PPUSH
59403: CALL_OW 1
59407: ST_TO_ADDR
59408: GO 59461
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
59410: LD_ADDR_EXP 92
59414: PUSH
59415: LD_EXP 92
59419: PPUSH
59420: LD_VAR 0 1
59424: PPUSH
59425: LD_VAR 0 1
59429: PPUSH
59430: CALL_OW 255
59434: PUSH
59435: LD_VAR 0 1
59439: PUSH
59440: LD_VAR 0 2
59444: PUSH
59445: LD_VAR 0 3
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: PPUSH
59456: CALL_OW 1
59460: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59461: CALL 59470 0 0
// end ;
59465: LD_VAR 0 4
59469: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
59470: LD_INT 0
59472: PPUSH
59473: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59474: LD_STRING resetFactoryWaypoint();
59476: PPUSH
59477: CALL_OW 559
// if factoryWaypoints then
59481: LD_EXP 92
59485: IFFALSE 59608
// begin for i := 1 to factoryWaypoints do
59487: LD_ADDR_VAR 0 2
59491: PUSH
59492: DOUBLE
59493: LD_INT 1
59495: DEC
59496: ST_TO_ADDR
59497: LD_EXP 92
59501: PUSH
59502: FOR_TO
59503: IFFALSE 59606
// if factoryWaypoints [ i ] then
59505: LD_EXP 92
59509: PUSH
59510: LD_VAR 0 2
59514: ARRAY
59515: IFFALSE 59604
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
59517: LD_STRING setFactoryWaypointXY(
59519: PUSH
59520: LD_EXP 92
59524: PUSH
59525: LD_VAR 0 2
59529: ARRAY
59530: PUSH
59531: LD_INT 1
59533: ARRAY
59534: STR
59535: PUSH
59536: LD_STRING ,
59538: STR
59539: PUSH
59540: LD_EXP 92
59544: PUSH
59545: LD_VAR 0 2
59549: ARRAY
59550: PUSH
59551: LD_INT 2
59553: ARRAY
59554: STR
59555: PUSH
59556: LD_STRING ,
59558: STR
59559: PUSH
59560: LD_EXP 92
59564: PUSH
59565: LD_VAR 0 2
59569: ARRAY
59570: PUSH
59571: LD_INT 3
59573: ARRAY
59574: STR
59575: PUSH
59576: LD_STRING ,
59578: STR
59579: PUSH
59580: LD_EXP 92
59584: PUSH
59585: LD_VAR 0 2
59589: ARRAY
59590: PUSH
59591: LD_INT 4
59593: ARRAY
59594: STR
59595: PUSH
59596: LD_STRING )
59598: STR
59599: PPUSH
59600: CALL_OW 559
59604: GO 59502
59606: POP
59607: POP
// end ; end ;
59608: LD_VAR 0 1
59612: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
59613: LD_INT 0
59615: PPUSH
59616: PPUSH
59617: PPUSH
59618: PPUSH
59619: PPUSH
59620: PPUSH
59621: PPUSH
59622: PPUSH
59623: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
59624: LD_VAR 0 1
59628: NOT
59629: PUSH
59630: LD_VAR 0 2
59634: PPUSH
59635: LD_VAR 0 3
59639: PPUSH
59640: CALL_OW 488
59644: NOT
59645: OR
59646: PUSH
59647: LD_VAR 0 4
59651: NOT
59652: OR
59653: IFFALSE 59657
// exit ;
59655: GO 59997
// list := [ ] ;
59657: LD_ADDR_VAR 0 13
59661: PUSH
59662: EMPTY
59663: ST_TO_ADDR
// if x - r < 0 then
59664: LD_VAR 0 2
59668: PUSH
59669: LD_VAR 0 4
59673: MINUS
59674: PUSH
59675: LD_INT 0
59677: LESS
59678: IFFALSE 59690
// min_x := 0 else
59680: LD_ADDR_VAR 0 7
59684: PUSH
59685: LD_INT 0
59687: ST_TO_ADDR
59688: GO 59706
// min_x := x - r ;
59690: LD_ADDR_VAR 0 7
59694: PUSH
59695: LD_VAR 0 2
59699: PUSH
59700: LD_VAR 0 4
59704: MINUS
59705: ST_TO_ADDR
// if y - r < 0 then
59706: LD_VAR 0 3
59710: PUSH
59711: LD_VAR 0 4
59715: MINUS
59716: PUSH
59717: LD_INT 0
59719: LESS
59720: IFFALSE 59732
// min_y := 0 else
59722: LD_ADDR_VAR 0 8
59726: PUSH
59727: LD_INT 0
59729: ST_TO_ADDR
59730: GO 59748
// min_y := y - r ;
59732: LD_ADDR_VAR 0 8
59736: PUSH
59737: LD_VAR 0 3
59741: PUSH
59742: LD_VAR 0 4
59746: MINUS
59747: ST_TO_ADDR
// max_x := x + r ;
59748: LD_ADDR_VAR 0 9
59752: PUSH
59753: LD_VAR 0 2
59757: PUSH
59758: LD_VAR 0 4
59762: PLUS
59763: ST_TO_ADDR
// max_y := y + r ;
59764: LD_ADDR_VAR 0 10
59768: PUSH
59769: LD_VAR 0 3
59773: PUSH
59774: LD_VAR 0 4
59778: PLUS
59779: ST_TO_ADDR
// for _x = min_x to max_x do
59780: LD_ADDR_VAR 0 11
59784: PUSH
59785: DOUBLE
59786: LD_VAR 0 7
59790: DEC
59791: ST_TO_ADDR
59792: LD_VAR 0 9
59796: PUSH
59797: FOR_TO
59798: IFFALSE 59915
// for _y = min_y to max_y do
59800: LD_ADDR_VAR 0 12
59804: PUSH
59805: DOUBLE
59806: LD_VAR 0 8
59810: DEC
59811: ST_TO_ADDR
59812: LD_VAR 0 10
59816: PUSH
59817: FOR_TO
59818: IFFALSE 59911
// begin if not ValidHex ( _x , _y ) then
59820: LD_VAR 0 11
59824: PPUSH
59825: LD_VAR 0 12
59829: PPUSH
59830: CALL_OW 488
59834: NOT
59835: IFFALSE 59839
// continue ;
59837: GO 59817
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59839: LD_VAR 0 11
59843: PPUSH
59844: LD_VAR 0 12
59848: PPUSH
59849: CALL_OW 351
59853: PUSH
59854: LD_VAR 0 11
59858: PPUSH
59859: LD_VAR 0 12
59863: PPUSH
59864: CALL_OW 554
59868: AND
59869: IFFALSE 59909
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59871: LD_ADDR_VAR 0 13
59875: PUSH
59876: LD_VAR 0 13
59880: PPUSH
59881: LD_VAR 0 13
59885: PUSH
59886: LD_INT 1
59888: PLUS
59889: PPUSH
59890: LD_VAR 0 11
59894: PUSH
59895: LD_VAR 0 12
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PPUSH
59904: CALL_OW 2
59908: ST_TO_ADDR
// end ;
59909: GO 59817
59911: POP
59912: POP
59913: GO 59797
59915: POP
59916: POP
// if not list then
59917: LD_VAR 0 13
59921: NOT
59922: IFFALSE 59926
// exit ;
59924: GO 59997
// for i in list do
59926: LD_ADDR_VAR 0 6
59930: PUSH
59931: LD_VAR 0 13
59935: PUSH
59936: FOR_IN
59937: IFFALSE 59995
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
59939: LD_VAR 0 1
59943: PPUSH
59944: LD_STRING M
59946: PUSH
59947: LD_VAR 0 6
59951: PUSH
59952: LD_INT 1
59954: ARRAY
59955: PUSH
59956: LD_VAR 0 6
59960: PUSH
59961: LD_INT 2
59963: ARRAY
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: LD_INT 0
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: PUSH
59986: EMPTY
59987: LIST
59988: PPUSH
59989: CALL_OW 447
59993: GO 59936
59995: POP
59996: POP
// end ;
59997: LD_VAR 0 5
60001: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
60002: LD_EXP 93
60006: NOT
60007: IFFALSE 60057
60009: GO 60011
60011: DISABLE
// begin initHack := true ;
60012: LD_ADDR_EXP 93
60016: PUSH
60017: LD_INT 1
60019: ST_TO_ADDR
// hackTanks := [ ] ;
60020: LD_ADDR_EXP 94
60024: PUSH
60025: EMPTY
60026: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
60027: LD_ADDR_EXP 95
60031: PUSH
60032: EMPTY
60033: ST_TO_ADDR
// hackLimit := 3 ;
60034: LD_ADDR_EXP 96
60038: PUSH
60039: LD_INT 3
60041: ST_TO_ADDR
// hackDist := 12 ;
60042: LD_ADDR_EXP 97
60046: PUSH
60047: LD_INT 12
60049: ST_TO_ADDR
// hackCounter := [ ] ;
60050: LD_ADDR_EXP 98
60054: PUSH
60055: EMPTY
60056: ST_TO_ADDR
// end ;
60057: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
60058: LD_EXP 93
60062: PUSH
60063: LD_INT 34
60065: PUSH
60066: LD_EXP 5
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PPUSH
60075: CALL_OW 69
60079: AND
60080: IFFALSE 60335
60082: GO 60084
60084: DISABLE
60085: LD_INT 0
60087: PPUSH
60088: PPUSH
// begin enable ;
60089: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
60090: LD_ADDR_VAR 0 1
60094: PUSH
60095: LD_INT 34
60097: PUSH
60098: LD_EXP 5
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PPUSH
60107: CALL_OW 69
60111: PUSH
60112: FOR_IN
60113: IFFALSE 60333
// begin if not i in hackTanks then
60115: LD_VAR 0 1
60119: PUSH
60120: LD_EXP 94
60124: IN
60125: NOT
60126: IFFALSE 60209
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
60128: LD_ADDR_EXP 94
60132: PUSH
60133: LD_EXP 94
60137: PPUSH
60138: LD_EXP 94
60142: PUSH
60143: LD_INT 1
60145: PLUS
60146: PPUSH
60147: LD_VAR 0 1
60151: PPUSH
60152: CALL_OW 1
60156: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
60157: LD_ADDR_EXP 95
60161: PUSH
60162: LD_EXP 95
60166: PPUSH
60167: LD_EXP 95
60171: PUSH
60172: LD_INT 1
60174: PLUS
60175: PPUSH
60176: EMPTY
60177: PPUSH
60178: CALL_OW 1
60182: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
60183: LD_ADDR_EXP 98
60187: PUSH
60188: LD_EXP 98
60192: PPUSH
60193: LD_EXP 98
60197: PUSH
60198: LD_INT 1
60200: PLUS
60201: PPUSH
60202: EMPTY
60203: PPUSH
60204: CALL_OW 1
60208: ST_TO_ADDR
// end ; if not IsOk ( i ) then
60209: LD_VAR 0 1
60213: PPUSH
60214: CALL_OW 302
60218: NOT
60219: IFFALSE 60232
// begin HackUnlinkAll ( i ) ;
60221: LD_VAR 0 1
60225: PPUSH
60226: CALL 60338 0 1
// continue ;
60230: GO 60112
// end ; HackCheckCapturedStatus ( i ) ;
60232: LD_VAR 0 1
60236: PPUSH
60237: CALL 60781 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
60241: LD_ADDR_VAR 0 2
60245: PUSH
60246: LD_INT 81
60248: PUSH
60249: LD_VAR 0 1
60253: PPUSH
60254: CALL_OW 255
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 33
60265: PUSH
60266: LD_INT 3
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 91
60275: PUSH
60276: LD_VAR 0 1
60280: PUSH
60281: LD_EXP 97
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 50
60293: PUSH
60294: EMPTY
60295: LIST
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: PPUSH
60303: CALL_OW 69
60307: ST_TO_ADDR
// if not tmp then
60308: LD_VAR 0 2
60312: NOT
60313: IFFALSE 60317
// continue ;
60315: GO 60112
// HackLink ( i , tmp ) ;
60317: LD_VAR 0 1
60321: PPUSH
60322: LD_VAR 0 2
60326: PPUSH
60327: CALL 60474 0 2
// end ;
60331: GO 60112
60333: POP
60334: POP
// end ;
60335: PPOPN 2
60337: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
60338: LD_INT 0
60340: PPUSH
60341: PPUSH
60342: PPUSH
// if not hack in hackTanks then
60343: LD_VAR 0 1
60347: PUSH
60348: LD_EXP 94
60352: IN
60353: NOT
60354: IFFALSE 60358
// exit ;
60356: GO 60469
// index := GetElementIndex ( hackTanks , hack ) ;
60358: LD_ADDR_VAR 0 4
60362: PUSH
60363: LD_EXP 94
60367: PPUSH
60368: LD_VAR 0 1
60372: PPUSH
60373: CALL 6087 0 2
60377: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
60378: LD_EXP 95
60382: PUSH
60383: LD_VAR 0 4
60387: ARRAY
60388: IFFALSE 60469
// begin for i in hackTanksCaptured [ index ] do
60390: LD_ADDR_VAR 0 3
60394: PUSH
60395: LD_EXP 95
60399: PUSH
60400: LD_VAR 0 4
60404: ARRAY
60405: PUSH
60406: FOR_IN
60407: IFFALSE 60433
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
60409: LD_VAR 0 3
60413: PUSH
60414: LD_INT 1
60416: ARRAY
60417: PPUSH
60418: LD_VAR 0 3
60422: PUSH
60423: LD_INT 2
60425: ARRAY
60426: PPUSH
60427: CALL_OW 235
60431: GO 60406
60433: POP
60434: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
60435: LD_ADDR_EXP 95
60439: PUSH
60440: LD_EXP 95
60444: PPUSH
60445: LD_VAR 0 4
60449: PPUSH
60450: EMPTY
60451: PPUSH
60452: CALL_OW 1
60456: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
60457: LD_VAR 0 1
60461: PPUSH
60462: LD_INT 0
60464: PPUSH
60465: CALL_OW 505
// end ; end ;
60469: LD_VAR 0 2
60473: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
60474: LD_INT 0
60476: PPUSH
60477: PPUSH
60478: PPUSH
// if not hack in hackTanks or not vehicles then
60479: LD_VAR 0 1
60483: PUSH
60484: LD_EXP 94
60488: IN
60489: NOT
60490: PUSH
60491: LD_VAR 0 2
60495: NOT
60496: OR
60497: IFFALSE 60501
// exit ;
60499: GO 60776
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
60501: LD_ADDR_VAR 0 2
60505: PUSH
60506: LD_VAR 0 1
60510: PPUSH
60511: LD_VAR 0 2
60515: PPUSH
60516: LD_INT 1
60518: PPUSH
60519: LD_INT 1
60521: PPUSH
60522: CALL 6737 0 4
60526: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
60527: LD_ADDR_VAR 0 5
60531: PUSH
60532: LD_EXP 94
60536: PPUSH
60537: LD_VAR 0 1
60541: PPUSH
60542: CALL 6087 0 2
60546: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
60547: LD_EXP 95
60551: PUSH
60552: LD_VAR 0 5
60556: ARRAY
60557: PUSH
60558: LD_EXP 96
60562: LESS
60563: IFFALSE 60752
// begin for i := 1 to vehicles do
60565: LD_ADDR_VAR 0 4
60569: PUSH
60570: DOUBLE
60571: LD_INT 1
60573: DEC
60574: ST_TO_ADDR
60575: LD_VAR 0 2
60579: PUSH
60580: FOR_TO
60581: IFFALSE 60750
// begin if hackTanksCaptured [ index ] = hackLimit then
60583: LD_EXP 95
60587: PUSH
60588: LD_VAR 0 5
60592: ARRAY
60593: PUSH
60594: LD_EXP 96
60598: EQUAL
60599: IFFALSE 60603
// break ;
60601: GO 60750
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
60603: LD_ADDR_EXP 98
60607: PUSH
60608: LD_EXP 98
60612: PPUSH
60613: LD_VAR 0 5
60617: PPUSH
60618: LD_EXP 98
60622: PUSH
60623: LD_VAR 0 5
60627: ARRAY
60628: PUSH
60629: LD_INT 1
60631: PLUS
60632: PPUSH
60633: CALL_OW 1
60637: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
60638: LD_ADDR_EXP 95
60642: PUSH
60643: LD_EXP 95
60647: PPUSH
60648: LD_VAR 0 5
60652: PUSH
60653: LD_EXP 95
60657: PUSH
60658: LD_VAR 0 5
60662: ARRAY
60663: PUSH
60664: LD_INT 1
60666: PLUS
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PPUSH
60672: LD_VAR 0 2
60676: PUSH
60677: LD_VAR 0 4
60681: ARRAY
60682: PUSH
60683: LD_VAR 0 2
60687: PUSH
60688: LD_VAR 0 4
60692: ARRAY
60693: PPUSH
60694: CALL_OW 255
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PPUSH
60703: CALL 6302 0 3
60707: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
60708: LD_VAR 0 2
60712: PUSH
60713: LD_VAR 0 4
60717: ARRAY
60718: PPUSH
60719: LD_VAR 0 1
60723: PPUSH
60724: CALL_OW 255
60728: PPUSH
60729: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
60733: LD_VAR 0 2
60737: PUSH
60738: LD_VAR 0 4
60742: ARRAY
60743: PPUSH
60744: CALL_OW 141
// end ;
60748: GO 60580
60750: POP
60751: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60752: LD_VAR 0 1
60756: PPUSH
60757: LD_EXP 95
60761: PUSH
60762: LD_VAR 0 5
60766: ARRAY
60767: PUSH
60768: LD_INT 0
60770: PLUS
60771: PPUSH
60772: CALL_OW 505
// end ;
60776: LD_VAR 0 3
60780: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
60781: LD_INT 0
60783: PPUSH
60784: PPUSH
60785: PPUSH
60786: PPUSH
// if not hack in hackTanks then
60787: LD_VAR 0 1
60791: PUSH
60792: LD_EXP 94
60796: IN
60797: NOT
60798: IFFALSE 60802
// exit ;
60800: GO 61042
// index := GetElementIndex ( hackTanks , hack ) ;
60802: LD_ADDR_VAR 0 4
60806: PUSH
60807: LD_EXP 94
60811: PPUSH
60812: LD_VAR 0 1
60816: PPUSH
60817: CALL 6087 0 2
60821: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
60822: LD_ADDR_VAR 0 3
60826: PUSH
60827: DOUBLE
60828: LD_EXP 95
60832: PUSH
60833: LD_VAR 0 4
60837: ARRAY
60838: INC
60839: ST_TO_ADDR
60840: LD_INT 1
60842: PUSH
60843: FOR_DOWNTO
60844: IFFALSE 61016
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60846: LD_ADDR_VAR 0 5
60850: PUSH
60851: LD_EXP 95
60855: PUSH
60856: LD_VAR 0 4
60860: ARRAY
60861: PUSH
60862: LD_VAR 0 3
60866: ARRAY
60867: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60868: LD_VAR 0 5
60872: PUSH
60873: LD_INT 1
60875: ARRAY
60876: PPUSH
60877: CALL_OW 302
60881: NOT
60882: PUSH
60883: LD_VAR 0 5
60887: PUSH
60888: LD_INT 1
60890: ARRAY
60891: PPUSH
60892: CALL_OW 255
60896: PUSH
60897: LD_VAR 0 1
60901: PPUSH
60902: CALL_OW 255
60906: NONEQUAL
60907: OR
60908: IFFALSE 61014
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60910: LD_VAR 0 5
60914: PUSH
60915: LD_INT 1
60917: ARRAY
60918: PPUSH
60919: CALL_OW 305
60923: PUSH
60924: LD_VAR 0 5
60928: PUSH
60929: LD_INT 1
60931: ARRAY
60932: PPUSH
60933: CALL_OW 255
60937: PUSH
60938: LD_VAR 0 1
60942: PPUSH
60943: CALL_OW 255
60947: EQUAL
60948: AND
60949: IFFALSE 60973
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60951: LD_VAR 0 5
60955: PUSH
60956: LD_INT 1
60958: ARRAY
60959: PPUSH
60960: LD_VAR 0 5
60964: PUSH
60965: LD_INT 2
60967: ARRAY
60968: PPUSH
60969: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60973: LD_ADDR_EXP 95
60977: PUSH
60978: LD_EXP 95
60982: PPUSH
60983: LD_VAR 0 4
60987: PPUSH
60988: LD_EXP 95
60992: PUSH
60993: LD_VAR 0 4
60997: ARRAY
60998: PPUSH
60999: LD_VAR 0 3
61003: PPUSH
61004: CALL_OW 3
61008: PPUSH
61009: CALL_OW 1
61013: ST_TO_ADDR
// end ; end ;
61014: GO 60843
61016: POP
61017: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61018: LD_VAR 0 1
61022: PPUSH
61023: LD_EXP 95
61027: PUSH
61028: LD_VAR 0 4
61032: ARRAY
61033: PUSH
61034: LD_INT 0
61036: PLUS
61037: PPUSH
61038: CALL_OW 505
// end ;
61042: LD_VAR 0 2
61046: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
61047: LD_INT 0
61049: PPUSH
61050: PPUSH
61051: PPUSH
61052: PPUSH
// if not hack in hackTanks then
61053: LD_VAR 0 1
61057: PUSH
61058: LD_EXP 94
61062: IN
61063: NOT
61064: IFFALSE 61068
// exit ;
61066: GO 61153
// index := GetElementIndex ( hackTanks , hack ) ;
61068: LD_ADDR_VAR 0 5
61072: PUSH
61073: LD_EXP 94
61077: PPUSH
61078: LD_VAR 0 1
61082: PPUSH
61083: CALL 6087 0 2
61087: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
61088: LD_ADDR_VAR 0 4
61092: PUSH
61093: DOUBLE
61094: LD_INT 1
61096: DEC
61097: ST_TO_ADDR
61098: LD_EXP 95
61102: PUSH
61103: LD_VAR 0 5
61107: ARRAY
61108: PUSH
61109: FOR_TO
61110: IFFALSE 61151
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
61112: LD_EXP 95
61116: PUSH
61117: LD_VAR 0 5
61121: ARRAY
61122: PUSH
61123: LD_VAR 0 4
61127: ARRAY
61128: PUSH
61129: LD_INT 1
61131: ARRAY
61132: PUSH
61133: LD_VAR 0 2
61137: EQUAL
61138: IFFALSE 61149
// KillUnit ( vehicle ) ;
61140: LD_VAR 0 2
61144: PPUSH
61145: CALL_OW 66
61149: GO 61109
61151: POP
61152: POP
// end ;
61153: LD_VAR 0 3
61157: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
61158: LD_EXP 99
61162: NOT
61163: IFFALSE 61198
61165: GO 61167
61167: DISABLE
// begin initMiner := true ;
61168: LD_ADDR_EXP 99
61172: PUSH
61173: LD_INT 1
61175: ST_TO_ADDR
// minersList := [ ] ;
61176: LD_ADDR_EXP 100
61180: PUSH
61181: EMPTY
61182: ST_TO_ADDR
// minerMinesList := [ ] ;
61183: LD_ADDR_EXP 101
61187: PUSH
61188: EMPTY
61189: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
61190: LD_ADDR_EXP 102
61194: PUSH
61195: LD_INT 5
61197: ST_TO_ADDR
// end ;
61198: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
61199: LD_EXP 99
61203: PUSH
61204: LD_INT 34
61206: PUSH
61207: LD_EXP 10
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PPUSH
61216: CALL_OW 69
61220: AND
61221: IFFALSE 61684
61223: GO 61225
61225: DISABLE
61226: LD_INT 0
61228: PPUSH
61229: PPUSH
61230: PPUSH
61231: PPUSH
// begin enable ;
61232: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
61233: LD_ADDR_VAR 0 1
61237: PUSH
61238: LD_INT 34
61240: PUSH
61241: LD_EXP 10
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PPUSH
61250: CALL_OW 69
61254: PUSH
61255: FOR_IN
61256: IFFALSE 61328
// begin if not i in minersList then
61258: LD_VAR 0 1
61262: PUSH
61263: LD_EXP 100
61267: IN
61268: NOT
61269: IFFALSE 61326
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
61271: LD_ADDR_EXP 100
61275: PUSH
61276: LD_EXP 100
61280: PPUSH
61281: LD_EXP 100
61285: PUSH
61286: LD_INT 1
61288: PLUS
61289: PPUSH
61290: LD_VAR 0 1
61294: PPUSH
61295: CALL_OW 1
61299: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
61300: LD_ADDR_EXP 101
61304: PUSH
61305: LD_EXP 101
61309: PPUSH
61310: LD_EXP 101
61314: PUSH
61315: LD_INT 1
61317: PLUS
61318: PPUSH
61319: EMPTY
61320: PPUSH
61321: CALL_OW 1
61325: ST_TO_ADDR
// end end ;
61326: GO 61255
61328: POP
61329: POP
// for i := minerMinesList downto 1 do
61330: LD_ADDR_VAR 0 1
61334: PUSH
61335: DOUBLE
61336: LD_EXP 101
61340: INC
61341: ST_TO_ADDR
61342: LD_INT 1
61344: PUSH
61345: FOR_DOWNTO
61346: IFFALSE 61682
// begin if IsLive ( minersList [ i ] ) then
61348: LD_EXP 100
61352: PUSH
61353: LD_VAR 0 1
61357: ARRAY
61358: PPUSH
61359: CALL_OW 300
61363: IFFALSE 61391
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
61365: LD_EXP 100
61369: PUSH
61370: LD_VAR 0 1
61374: ARRAY
61375: PPUSH
61376: LD_EXP 101
61380: PUSH
61381: LD_VAR 0 1
61385: ARRAY
61386: PPUSH
61387: CALL_OW 505
// if not minerMinesList [ i ] then
61391: LD_EXP 101
61395: PUSH
61396: LD_VAR 0 1
61400: ARRAY
61401: NOT
61402: IFFALSE 61406
// continue ;
61404: GO 61345
// for j := minerMinesList [ i ] downto 1 do
61406: LD_ADDR_VAR 0 2
61410: PUSH
61411: DOUBLE
61412: LD_EXP 101
61416: PUSH
61417: LD_VAR 0 1
61421: ARRAY
61422: INC
61423: ST_TO_ADDR
61424: LD_INT 1
61426: PUSH
61427: FOR_DOWNTO
61428: IFFALSE 61678
// begin side := GetSide ( minersList [ i ] ) ;
61430: LD_ADDR_VAR 0 3
61434: PUSH
61435: LD_EXP 100
61439: PUSH
61440: LD_VAR 0 1
61444: ARRAY
61445: PPUSH
61446: CALL_OW 255
61450: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61451: LD_ADDR_VAR 0 4
61455: PUSH
61456: LD_EXP 101
61460: PUSH
61461: LD_VAR 0 1
61465: ARRAY
61466: PUSH
61467: LD_VAR 0 2
61471: ARRAY
61472: PUSH
61473: LD_INT 1
61475: ARRAY
61476: PPUSH
61477: LD_EXP 101
61481: PUSH
61482: LD_VAR 0 1
61486: ARRAY
61487: PUSH
61488: LD_VAR 0 2
61492: ARRAY
61493: PUSH
61494: LD_INT 2
61496: ARRAY
61497: PPUSH
61498: CALL_OW 428
61502: ST_TO_ADDR
// if not tmp then
61503: LD_VAR 0 4
61507: NOT
61508: IFFALSE 61512
// continue ;
61510: GO 61427
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
61512: LD_VAR 0 4
61516: PUSH
61517: LD_INT 81
61519: PUSH
61520: LD_VAR 0 3
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PPUSH
61529: CALL_OW 69
61533: IN
61534: PUSH
61535: LD_EXP 101
61539: PUSH
61540: LD_VAR 0 1
61544: ARRAY
61545: PUSH
61546: LD_VAR 0 2
61550: ARRAY
61551: PUSH
61552: LD_INT 1
61554: ARRAY
61555: PPUSH
61556: LD_EXP 101
61560: PUSH
61561: LD_VAR 0 1
61565: ARRAY
61566: PUSH
61567: LD_VAR 0 2
61571: ARRAY
61572: PUSH
61573: LD_INT 2
61575: ARRAY
61576: PPUSH
61577: CALL_OW 458
61581: AND
61582: IFFALSE 61676
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
61584: LD_EXP 101
61588: PUSH
61589: LD_VAR 0 1
61593: ARRAY
61594: PUSH
61595: LD_VAR 0 2
61599: ARRAY
61600: PUSH
61601: LD_INT 1
61603: ARRAY
61604: PPUSH
61605: LD_EXP 101
61609: PUSH
61610: LD_VAR 0 1
61614: ARRAY
61615: PUSH
61616: LD_VAR 0 2
61620: ARRAY
61621: PUSH
61622: LD_INT 2
61624: ARRAY
61625: PPUSH
61626: LD_VAR 0 3
61630: PPUSH
61631: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61635: LD_ADDR_EXP 101
61639: PUSH
61640: LD_EXP 101
61644: PPUSH
61645: LD_VAR 0 1
61649: PPUSH
61650: LD_EXP 101
61654: PUSH
61655: LD_VAR 0 1
61659: ARRAY
61660: PPUSH
61661: LD_VAR 0 2
61665: PPUSH
61666: CALL_OW 3
61670: PPUSH
61671: CALL_OW 1
61675: ST_TO_ADDR
// end ; end ;
61676: GO 61427
61678: POP
61679: POP
// end ;
61680: GO 61345
61682: POP
61683: POP
// end ;
61684: PPOPN 4
61686: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
61687: LD_INT 0
61689: PPUSH
61690: PPUSH
// result := false ;
61691: LD_ADDR_VAR 0 4
61695: PUSH
61696: LD_INT 0
61698: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61699: LD_VAR 0 1
61703: PPUSH
61704: CALL_OW 264
61708: PUSH
61709: LD_EXP 10
61713: EQUAL
61714: NOT
61715: IFFALSE 61719
// exit ;
61717: GO 61959
// index := GetElementIndex ( minersList , unit ) ;
61719: LD_ADDR_VAR 0 5
61723: PUSH
61724: LD_EXP 100
61728: PPUSH
61729: LD_VAR 0 1
61733: PPUSH
61734: CALL 6087 0 2
61738: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61739: LD_EXP 101
61743: PUSH
61744: LD_VAR 0 5
61748: ARRAY
61749: PUSH
61750: LD_EXP 102
61754: GREATEREQUAL
61755: IFFALSE 61759
// exit ;
61757: GO 61959
// ComMoveXY ( unit , x , y ) ;
61759: LD_VAR 0 1
61763: PPUSH
61764: LD_VAR 0 2
61768: PPUSH
61769: LD_VAR 0 3
61773: PPUSH
61774: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61778: LD_INT 35
61780: PPUSH
61781: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61785: LD_VAR 0 1
61789: PPUSH
61790: LD_VAR 0 2
61794: PPUSH
61795: LD_VAR 0 3
61799: PPUSH
61800: CALL 36806 0 3
61804: NOT
61805: PUSH
61806: LD_VAR 0 1
61810: PPUSH
61811: CALL_OW 314
61815: AND
61816: IFFALSE 61820
// exit ;
61818: GO 61959
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61820: LD_VAR 0 2
61824: PPUSH
61825: LD_VAR 0 3
61829: PPUSH
61830: CALL_OW 428
61834: PUSH
61835: LD_VAR 0 1
61839: EQUAL
61840: PUSH
61841: LD_VAR 0 1
61845: PPUSH
61846: CALL_OW 314
61850: NOT
61851: AND
61852: IFFALSE 61778
// PlaySoundXY ( x , y , PlantMine ) ;
61854: LD_VAR 0 2
61858: PPUSH
61859: LD_VAR 0 3
61863: PPUSH
61864: LD_STRING PlantMine
61866: PPUSH
61867: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
61871: LD_VAR 0 2
61875: PPUSH
61876: LD_VAR 0 3
61880: PPUSH
61881: LD_VAR 0 1
61885: PPUSH
61886: CALL_OW 255
61890: PPUSH
61891: LD_INT 0
61893: PPUSH
61894: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61898: LD_ADDR_EXP 101
61902: PUSH
61903: LD_EXP 101
61907: PPUSH
61908: LD_VAR 0 5
61912: PUSH
61913: LD_EXP 101
61917: PUSH
61918: LD_VAR 0 5
61922: ARRAY
61923: PUSH
61924: LD_INT 1
61926: PLUS
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PPUSH
61932: LD_VAR 0 2
61936: PUSH
61937: LD_VAR 0 3
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PPUSH
61946: CALL 6302 0 3
61950: ST_TO_ADDR
// result := true ;
61951: LD_ADDR_VAR 0 4
61955: PUSH
61956: LD_INT 1
61958: ST_TO_ADDR
// end ;
61959: LD_VAR 0 4
61963: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61964: LD_INT 0
61966: PPUSH
61967: PPUSH
61968: PPUSH
// if not unit in minersList then
61969: LD_VAR 0 1
61973: PUSH
61974: LD_EXP 100
61978: IN
61979: NOT
61980: IFFALSE 61984
// exit ;
61982: GO 62376
// index := GetElementIndex ( minersList , unit ) ;
61984: LD_ADDR_VAR 0 6
61988: PUSH
61989: LD_EXP 100
61993: PPUSH
61994: LD_VAR 0 1
61998: PPUSH
61999: CALL 6087 0 2
62003: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
62004: LD_ADDR_VAR 0 5
62008: PUSH
62009: DOUBLE
62010: LD_EXP 101
62014: PUSH
62015: LD_VAR 0 6
62019: ARRAY
62020: INC
62021: ST_TO_ADDR
62022: LD_INT 1
62024: PUSH
62025: FOR_DOWNTO
62026: IFFALSE 62187
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
62028: LD_EXP 101
62032: PUSH
62033: LD_VAR 0 6
62037: ARRAY
62038: PUSH
62039: LD_VAR 0 5
62043: ARRAY
62044: PUSH
62045: LD_INT 1
62047: ARRAY
62048: PUSH
62049: LD_VAR 0 2
62053: EQUAL
62054: PUSH
62055: LD_EXP 101
62059: PUSH
62060: LD_VAR 0 6
62064: ARRAY
62065: PUSH
62066: LD_VAR 0 5
62070: ARRAY
62071: PUSH
62072: LD_INT 2
62074: ARRAY
62075: PUSH
62076: LD_VAR 0 3
62080: EQUAL
62081: AND
62082: IFFALSE 62185
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62084: LD_EXP 101
62088: PUSH
62089: LD_VAR 0 6
62093: ARRAY
62094: PUSH
62095: LD_VAR 0 5
62099: ARRAY
62100: PUSH
62101: LD_INT 1
62103: ARRAY
62104: PPUSH
62105: LD_EXP 101
62109: PUSH
62110: LD_VAR 0 6
62114: ARRAY
62115: PUSH
62116: LD_VAR 0 5
62120: ARRAY
62121: PUSH
62122: LD_INT 2
62124: ARRAY
62125: PPUSH
62126: LD_VAR 0 1
62130: PPUSH
62131: CALL_OW 255
62135: PPUSH
62136: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62140: LD_ADDR_EXP 101
62144: PUSH
62145: LD_EXP 101
62149: PPUSH
62150: LD_VAR 0 6
62154: PPUSH
62155: LD_EXP 101
62159: PUSH
62160: LD_VAR 0 6
62164: ARRAY
62165: PPUSH
62166: LD_VAR 0 5
62170: PPUSH
62171: CALL_OW 3
62175: PPUSH
62176: CALL_OW 1
62180: ST_TO_ADDR
// exit ;
62181: POP
62182: POP
62183: GO 62376
// end ; end ;
62185: GO 62025
62187: POP
62188: POP
// for i := minerMinesList [ index ] downto 1 do
62189: LD_ADDR_VAR 0 5
62193: PUSH
62194: DOUBLE
62195: LD_EXP 101
62199: PUSH
62200: LD_VAR 0 6
62204: ARRAY
62205: INC
62206: ST_TO_ADDR
62207: LD_INT 1
62209: PUSH
62210: FOR_DOWNTO
62211: IFFALSE 62374
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
62213: LD_EXP 101
62217: PUSH
62218: LD_VAR 0 6
62222: ARRAY
62223: PUSH
62224: LD_VAR 0 5
62228: ARRAY
62229: PUSH
62230: LD_INT 1
62232: ARRAY
62233: PPUSH
62234: LD_EXP 101
62238: PUSH
62239: LD_VAR 0 6
62243: ARRAY
62244: PUSH
62245: LD_VAR 0 5
62249: ARRAY
62250: PUSH
62251: LD_INT 2
62253: ARRAY
62254: PPUSH
62255: LD_VAR 0 2
62259: PPUSH
62260: LD_VAR 0 3
62264: PPUSH
62265: CALL_OW 298
62269: PUSH
62270: LD_INT 6
62272: LESS
62273: IFFALSE 62372
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62275: LD_EXP 101
62279: PUSH
62280: LD_VAR 0 6
62284: ARRAY
62285: PUSH
62286: LD_VAR 0 5
62290: ARRAY
62291: PUSH
62292: LD_INT 1
62294: ARRAY
62295: PPUSH
62296: LD_EXP 101
62300: PUSH
62301: LD_VAR 0 6
62305: ARRAY
62306: PUSH
62307: LD_VAR 0 5
62311: ARRAY
62312: PUSH
62313: LD_INT 2
62315: ARRAY
62316: PPUSH
62317: LD_VAR 0 1
62321: PPUSH
62322: CALL_OW 255
62326: PPUSH
62327: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62331: LD_ADDR_EXP 101
62335: PUSH
62336: LD_EXP 101
62340: PPUSH
62341: LD_VAR 0 6
62345: PPUSH
62346: LD_EXP 101
62350: PUSH
62351: LD_VAR 0 6
62355: ARRAY
62356: PPUSH
62357: LD_VAR 0 5
62361: PPUSH
62362: CALL_OW 3
62366: PPUSH
62367: CALL_OW 1
62371: ST_TO_ADDR
// end ; end ;
62372: GO 62210
62374: POP
62375: POP
// end ;
62376: LD_VAR 0 4
62380: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
62381: LD_INT 0
62383: PPUSH
62384: PPUSH
62385: PPUSH
62386: PPUSH
62387: PPUSH
62388: PPUSH
62389: PPUSH
62390: PPUSH
62391: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
62392: LD_VAR 0 1
62396: PPUSH
62397: CALL_OW 264
62401: PUSH
62402: LD_EXP 10
62406: EQUAL
62407: NOT
62408: PUSH
62409: LD_VAR 0 1
62413: PUSH
62414: LD_EXP 100
62418: IN
62419: NOT
62420: OR
62421: IFFALSE 62425
// exit ;
62423: GO 62747
// index := GetElementIndex ( minersList , unit ) ;
62425: LD_ADDR_VAR 0 6
62429: PUSH
62430: LD_EXP 100
62434: PPUSH
62435: LD_VAR 0 1
62439: PPUSH
62440: CALL 6087 0 2
62444: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
62445: LD_ADDR_VAR 0 8
62449: PUSH
62450: LD_EXP 102
62454: PUSH
62455: LD_EXP 101
62459: PUSH
62460: LD_VAR 0 6
62464: ARRAY
62465: MINUS
62466: ST_TO_ADDR
// if not minesFreeAmount then
62467: LD_VAR 0 8
62471: NOT
62472: IFFALSE 62476
// exit ;
62474: GO 62747
// tmp := [ ] ;
62476: LD_ADDR_VAR 0 7
62480: PUSH
62481: EMPTY
62482: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
62483: LD_ADDR_VAR 0 5
62487: PUSH
62488: DOUBLE
62489: LD_INT 1
62491: DEC
62492: ST_TO_ADDR
62493: LD_VAR 0 8
62497: PUSH
62498: FOR_TO
62499: IFFALSE 62694
// begin _d := rand ( 0 , 5 ) ;
62501: LD_ADDR_VAR 0 11
62505: PUSH
62506: LD_INT 0
62508: PPUSH
62509: LD_INT 5
62511: PPUSH
62512: CALL_OW 12
62516: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
62517: LD_ADDR_VAR 0 12
62521: PUSH
62522: LD_INT 2
62524: PPUSH
62525: LD_INT 6
62527: PPUSH
62528: CALL_OW 12
62532: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
62533: LD_ADDR_VAR 0 9
62537: PUSH
62538: LD_VAR 0 2
62542: PPUSH
62543: LD_VAR 0 11
62547: PPUSH
62548: LD_VAR 0 12
62552: PPUSH
62553: CALL_OW 272
62557: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
62558: LD_ADDR_VAR 0 10
62562: PUSH
62563: LD_VAR 0 3
62567: PPUSH
62568: LD_VAR 0 11
62572: PPUSH
62573: LD_VAR 0 12
62577: PPUSH
62578: CALL_OW 273
62582: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
62583: LD_VAR 0 9
62587: PPUSH
62588: LD_VAR 0 10
62592: PPUSH
62593: CALL_OW 488
62597: PUSH
62598: LD_VAR 0 9
62602: PUSH
62603: LD_VAR 0 10
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_VAR 0 7
62616: IN
62617: NOT
62618: AND
62619: PUSH
62620: LD_VAR 0 9
62624: PPUSH
62625: LD_VAR 0 10
62629: PPUSH
62630: CALL_OW 458
62634: NOT
62635: AND
62636: IFFALSE 62678
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
62638: LD_ADDR_VAR 0 7
62642: PUSH
62643: LD_VAR 0 7
62647: PPUSH
62648: LD_VAR 0 7
62652: PUSH
62653: LD_INT 1
62655: PLUS
62656: PPUSH
62657: LD_VAR 0 9
62661: PUSH
62662: LD_VAR 0 10
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PPUSH
62671: CALL_OW 1
62675: ST_TO_ADDR
62676: GO 62692
// i := i - 1 ;
62678: LD_ADDR_VAR 0 5
62682: PUSH
62683: LD_VAR 0 5
62687: PUSH
62688: LD_INT 1
62690: MINUS
62691: ST_TO_ADDR
// end ;
62692: GO 62498
62694: POP
62695: POP
// for i in tmp do
62696: LD_ADDR_VAR 0 5
62700: PUSH
62701: LD_VAR 0 7
62705: PUSH
62706: FOR_IN
62707: IFFALSE 62745
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62709: LD_VAR 0 1
62713: PPUSH
62714: LD_VAR 0 5
62718: PUSH
62719: LD_INT 1
62721: ARRAY
62722: PPUSH
62723: LD_VAR 0 5
62727: PUSH
62728: LD_INT 2
62730: ARRAY
62731: PPUSH
62732: CALL 61687 0 3
62736: NOT
62737: IFFALSE 62743
// exit ;
62739: POP
62740: POP
62741: GO 62747
62743: GO 62706
62745: POP
62746: POP
// end ;
62747: LD_VAR 0 4
62751: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
62752: LD_INT 0
62754: PPUSH
62755: PPUSH
62756: PPUSH
62757: PPUSH
62758: PPUSH
62759: PPUSH
62760: PPUSH
// if not GetClass ( unit ) = class_sniper then
62761: LD_VAR 0 1
62765: PPUSH
62766: CALL_OW 257
62770: PUSH
62771: LD_INT 5
62773: EQUAL
62774: NOT
62775: IFFALSE 62779
// exit ;
62777: GO 63167
// dist := 8 ;
62779: LD_ADDR_VAR 0 5
62783: PUSH
62784: LD_INT 8
62786: ST_TO_ADDR
// viewRange := 12 ;
62787: LD_ADDR_VAR 0 7
62791: PUSH
62792: LD_INT 12
62794: ST_TO_ADDR
// side := GetSide ( unit ) ;
62795: LD_ADDR_VAR 0 6
62799: PUSH
62800: LD_VAR 0 1
62804: PPUSH
62805: CALL_OW 255
62809: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62810: LD_INT 61
62812: PPUSH
62813: LD_VAR 0 6
62817: PPUSH
62818: CALL_OW 321
62822: PUSH
62823: LD_INT 2
62825: EQUAL
62826: IFFALSE 62836
// viewRange := 16 ;
62828: LD_ADDR_VAR 0 7
62832: PUSH
62833: LD_INT 16
62835: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62836: LD_VAR 0 1
62840: PPUSH
62841: LD_VAR 0 2
62845: PPUSH
62846: LD_VAR 0 3
62850: PPUSH
62851: CALL_OW 297
62855: PUSH
62856: LD_VAR 0 5
62860: GREATER
62861: IFFALSE 62940
// begin ComMoveXY ( unit , x , y ) ;
62863: LD_VAR 0 1
62867: PPUSH
62868: LD_VAR 0 2
62872: PPUSH
62873: LD_VAR 0 3
62877: PPUSH
62878: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62882: LD_INT 35
62884: PPUSH
62885: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62889: LD_VAR 0 1
62893: PPUSH
62894: LD_VAR 0 2
62898: PPUSH
62899: LD_VAR 0 3
62903: PPUSH
62904: CALL 36806 0 3
62908: NOT
62909: IFFALSE 62913
// exit ;
62911: GO 63167
// until GetDistUnitXY ( unit , x , y ) < dist ;
62913: LD_VAR 0 1
62917: PPUSH
62918: LD_VAR 0 2
62922: PPUSH
62923: LD_VAR 0 3
62927: PPUSH
62928: CALL_OW 297
62932: PUSH
62933: LD_VAR 0 5
62937: LESS
62938: IFFALSE 62882
// end ; ComTurnXY ( unit , x , y ) ;
62940: LD_VAR 0 1
62944: PPUSH
62945: LD_VAR 0 2
62949: PPUSH
62950: LD_VAR 0 3
62954: PPUSH
62955: CALL_OW 118
// wait ( 5 ) ;
62959: LD_INT 5
62961: PPUSH
62962: CALL_OW 67
// _d := GetDir ( unit ) ;
62966: LD_ADDR_VAR 0 10
62970: PUSH
62971: LD_VAR 0 1
62975: PPUSH
62976: CALL_OW 254
62980: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
62981: LD_ADDR_VAR 0 8
62985: PUSH
62986: LD_VAR 0 1
62990: PPUSH
62991: CALL_OW 250
62995: PPUSH
62996: LD_VAR 0 10
63000: PPUSH
63001: LD_VAR 0 5
63005: PPUSH
63006: CALL_OW 272
63010: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
63011: LD_ADDR_VAR 0 9
63015: PUSH
63016: LD_VAR 0 1
63020: PPUSH
63021: CALL_OW 251
63025: PPUSH
63026: LD_VAR 0 10
63030: PPUSH
63031: LD_VAR 0 5
63035: PPUSH
63036: CALL_OW 273
63040: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63041: LD_VAR 0 8
63045: PPUSH
63046: LD_VAR 0 9
63050: PPUSH
63051: CALL_OW 488
63055: NOT
63056: IFFALSE 63060
// exit ;
63058: GO 63167
// ComAnimCustom ( unit , 1 ) ;
63060: LD_VAR 0 1
63064: PPUSH
63065: LD_INT 1
63067: PPUSH
63068: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
63072: LD_VAR 0 8
63076: PPUSH
63077: LD_VAR 0 9
63081: PPUSH
63082: LD_VAR 0 6
63086: PPUSH
63087: LD_VAR 0 7
63091: PPUSH
63092: CALL_OW 330
// repeat wait ( 1 ) ;
63096: LD_INT 1
63098: PPUSH
63099: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
63103: LD_VAR 0 1
63107: PPUSH
63108: CALL_OW 316
63112: PUSH
63113: LD_VAR 0 1
63117: PPUSH
63118: CALL_OW 314
63122: OR
63123: PUSH
63124: LD_VAR 0 1
63128: PPUSH
63129: CALL_OW 302
63133: NOT
63134: OR
63135: PUSH
63136: LD_VAR 0 1
63140: PPUSH
63141: CALL_OW 301
63145: OR
63146: IFFALSE 63096
// RemoveSeeing ( _x , _y , side ) ;
63148: LD_VAR 0 8
63152: PPUSH
63153: LD_VAR 0 9
63157: PPUSH
63158: LD_VAR 0 6
63162: PPUSH
63163: CALL_OW 331
// end ; end_of_file
63167: LD_VAR 0 4
63171: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63172: LD_VAR 0 1
63176: PUSH
63177: LD_INT 200
63179: DOUBLE
63180: GREATEREQUAL
63181: IFFALSE 63189
63183: LD_INT 299
63185: DOUBLE
63186: LESSEQUAL
63187: IFTRUE 63191
63189: GO 63223
63191: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63192: LD_VAR 0 1
63196: PPUSH
63197: LD_VAR 0 2
63201: PPUSH
63202: LD_VAR 0 3
63206: PPUSH
63207: LD_VAR 0 4
63211: PPUSH
63212: LD_VAR 0 5
63216: PPUSH
63217: CALL 58910 0 5
63221: GO 63300
63223: LD_INT 300
63225: DOUBLE
63226: GREATEREQUAL
63227: IFFALSE 63235
63229: LD_INT 399
63231: DOUBLE
63232: LESSEQUAL
63233: IFTRUE 63237
63235: GO 63299
63237: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63238: LD_VAR 0 1
63242: PPUSH
63243: LD_VAR 0 2
63247: PPUSH
63248: LD_VAR 0 3
63252: PPUSH
63253: LD_VAR 0 4
63257: PPUSH
63258: LD_VAR 0 5
63262: PPUSH
63263: LD_VAR 0 6
63267: PPUSH
63268: LD_VAR 0 7
63272: PPUSH
63273: LD_VAR 0 8
63277: PPUSH
63278: LD_VAR 0 9
63282: PPUSH
63283: LD_VAR 0 10
63287: PPUSH
63288: LD_VAR 0 11
63292: PPUSH
63293: CALL 56552 0 11
63297: GO 63300
63299: POP
// end ;
63300: PPOPN 11
63302: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
63303: LD_VAR 0 1
63307: PPUSH
63308: LD_VAR 0 2
63312: PPUSH
63313: LD_VAR 0 3
63317: PPUSH
63318: LD_VAR 0 4
63322: PPUSH
63323: LD_VAR 0 5
63327: PPUSH
63328: CALL 58646 0 5
// end ;
63332: PPOPN 5
63334: END
