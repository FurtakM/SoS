// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 57 0 0
// if gameType = 1 then
   8: LD_EXP 2
  12: PUSH
  13: LD_INT 1
  15: EQUAL
  16: IFFALSE 56
// InitEcoMode ( [ 189 , 97 ] , [ [ 215 , 93 ] , [ 204 , 126 ] ] ) ;
  18: LD_INT 189
  20: PUSH
  21: LD_INT 97
  23: PUSH
  24: EMPTY
  25: LIST
  26: LIST
  27: PPUSH
  28: LD_INT 215
  30: PUSH
  31: LD_INT 93
  33: PUSH
  34: EMPTY
  35: LIST
  36: LIST
  37: PUSH
  38: LD_INT 204
  40: PUSH
  41: LD_INT 126
  43: PUSH
  44: EMPTY
  45: LIST
  46: LIST
  47: PUSH
  48: EMPTY
  49: LIST
  50: LIST
  51: PPUSH
  52: CALL 37900 0 2
// end ;
  56: END
// export debug , gameType ; function Init ; begin
  57: LD_INT 0
  59: PPUSH
// debug := true ;
  60: LD_ADDR_EXP 1
  64: PUSH
  65: LD_INT 1
  67: ST_TO_ADDR
// if debug then
  68: LD_EXP 1
  72: IFFALSE 84
// gameType := 1 else
  74: LD_ADDR_EXP 2
  78: PUSH
  79: LD_INT 1
  81: ST_TO_ADDR
  82: GO 101
// gameType := GetMultiplayerSetting ( 50 ) + 1 ;
  84: LD_ADDR_EXP 2
  88: PUSH
  89: LD_INT 50
  91: PPUSH
  92: CALL_OW 426
  96: PUSH
  97: LD_INT 1
  99: PLUS
 100: ST_TO_ADDR
// end ; end_of_file
 101: LD_VAR 0 1
 105: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
 106: LD_INT 0
 108: PPUSH
// ar_miner := 81 ;
 109: LD_ADDR_EXP 10
 113: PUSH
 114: LD_INT 81
 116: ST_TO_ADDR
// ar_crane := 88 ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 88
 124: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 89
 132: ST_TO_ADDR
// us_hack := 99 ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 99
 140: ST_TO_ADDR
// us_artillery := 97 ;
 141: LD_ADDR_EXP 6
 145: PUSH
 146: LD_INT 97
 148: ST_TO_ADDR
// ar_bio_bomb := 91 ;
 149: LD_ADDR_EXP 7
 153: PUSH
 154: LD_INT 91
 156: ST_TO_ADDR
// ar_mortar := 92 ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_INT 92
 164: ST_TO_ADDR
// ru_radar := 98 ;
 165: LD_ADDR_EXP 3
 169: PUSH
 170: LD_INT 98
 172: ST_TO_ADDR
// tech_Artillery := 80 ;
 173: LD_ADDR_EXP 11
 177: PUSH
 178: LD_INT 80
 180: ST_TO_ADDR
// tech_RadMat := 81 ;
 181: LD_ADDR_EXP 12
 185: PUSH
 186: LD_INT 81
 188: ST_TO_ADDR
// tech_BasicTools := 82 ;
 189: LD_ADDR_EXP 13
 193: PUSH
 194: LD_INT 82
 196: ST_TO_ADDR
// tech_Cargo := 83 ;
 197: LD_ADDR_EXP 14
 201: PUSH
 202: LD_INT 83
 204: ST_TO_ADDR
// tech_Track := 84 ;
 205: LD_ADDR_EXP 15
 209: PUSH
 210: LD_INT 84
 212: ST_TO_ADDR
// tech_Crane := 85 ;
 213: LD_ADDR_EXP 16
 217: PUSH
 218: LD_INT 85
 220: ST_TO_ADDR
// tech_Bulldozer := 86 ;
 221: LD_ADDR_EXP 17
 225: PUSH
 226: LD_INT 86
 228: ST_TO_ADDR
// tech_Hovercraft := 87 ;
 229: LD_ADDR_EXP 18
 233: PUSH
 234: LD_INT 87
 236: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
 237: LD_ADDR_EXP 19
 241: PUSH
 242: LD_INT 88
 244: ST_TO_ADDR
// class_mastodont := 31 ;
 245: LD_ADDR_EXP 20
 249: PUSH
 250: LD_INT 31
 252: ST_TO_ADDR
// class_horse := 21 ;
 253: LD_ADDR_EXP 21
 257: PUSH
 258: LD_INT 21
 260: ST_TO_ADDR
// end ;
 261: LD_VAR 0 1
 265: RET
// every 1 do
 266: GO 268
 268: DISABLE
// InitGlobalVariables ; end_of_file
 269: CALL 106 0 0
 273: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 274: LD_INT 0
 276: PPUSH
 277: PPUSH
// if exist_mode then
 278: LD_VAR 0 2
 282: IFFALSE 307
// unit := CreateCharacter ( prefix & ident ) else
 284: LD_ADDR_VAR 0 5
 288: PUSH
 289: LD_VAR 0 3
 293: PUSH
 294: LD_VAR 0 1
 298: STR
 299: PPUSH
 300: CALL_OW 34
 304: ST_TO_ADDR
 305: GO 322
// unit := NewCharacter ( ident ) ;
 307: LD_ADDR_VAR 0 5
 311: PUSH
 312: LD_VAR 0 1
 316: PPUSH
 317: CALL_OW 25
 321: ST_TO_ADDR
// result := unit ;
 322: LD_ADDR_VAR 0 4
 326: PUSH
 327: LD_VAR 0 5
 331: ST_TO_ADDR
// end ;
 332: LD_VAR 0 4
 336: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 337: LD_INT 0
 339: PPUSH
 340: PPUSH
// if not side or not nation then
 341: LD_VAR 0 1
 345: NOT
 346: PUSH
 347: LD_VAR 0 2
 351: NOT
 352: OR
 353: IFFALSE 357
// exit ;
 355: GO 1121
// case nation of nation_american :
 357: LD_VAR 0 2
 361: PUSH
 362: LD_INT 1
 364: DOUBLE
 365: EQUAL
 366: IFTRUE 370
 368: GO 584
 370: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 371: LD_ADDR_VAR 0 4
 375: PUSH
 376: LD_INT 35
 378: PUSH
 379: LD_INT 45
 381: PUSH
 382: LD_INT 46
 384: PUSH
 385: LD_INT 47
 387: PUSH
 388: LD_INT 82
 390: PUSH
 391: LD_INT 83
 393: PUSH
 394: LD_INT 84
 396: PUSH
 397: LD_INT 85
 399: PUSH
 400: LD_INT 86
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: LD_INT 2
 408: PUSH
 409: LD_INT 6
 411: PUSH
 412: LD_INT 15
 414: PUSH
 415: LD_INT 16
 417: PUSH
 418: LD_INT 7
 420: PUSH
 421: LD_INT 12
 423: PUSH
 424: LD_INT 13
 426: PUSH
 427: LD_INT 10
 429: PUSH
 430: LD_INT 14
 432: PUSH
 433: LD_INT 20
 435: PUSH
 436: LD_INT 21
 438: PUSH
 439: LD_INT 22
 441: PUSH
 442: LD_INT 25
 444: PUSH
 445: LD_INT 32
 447: PUSH
 448: LD_INT 27
 450: PUSH
 451: LD_INT 36
 453: PUSH
 454: LD_INT 69
 456: PUSH
 457: LD_INT 39
 459: PUSH
 460: LD_INT 34
 462: PUSH
 463: LD_INT 40
 465: PUSH
 466: LD_INT 48
 468: PUSH
 469: LD_INT 49
 471: PUSH
 472: LD_INT 50
 474: PUSH
 475: LD_INT 51
 477: PUSH
 478: LD_INT 52
 480: PUSH
 481: LD_INT 53
 483: PUSH
 484: LD_INT 54
 486: PUSH
 487: LD_INT 55
 489: PUSH
 490: LD_INT 56
 492: PUSH
 493: LD_INT 57
 495: PUSH
 496: LD_INT 58
 498: PUSH
 499: LD_INT 59
 501: PUSH
 502: LD_INT 60
 504: PUSH
 505: LD_INT 61
 507: PUSH
 508: LD_INT 62
 510: PUSH
 511: LD_INT 80
 513: PUSH
 514: LD_INT 82
 516: PUSH
 517: LD_INT 83
 519: PUSH
 520: LD_INT 84
 522: PUSH
 523: LD_INT 85
 525: PUSH
 526: LD_INT 86
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: LIST
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: LIST
 553: LIST
 554: LIST
 555: LIST
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: LIST
 566: LIST
 567: LIST
 568: LIST
 569: LIST
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: LIST
 580: LIST
 581: ST_TO_ADDR
 582: GO 1045
 584: LD_INT 2
 586: DOUBLE
 587: EQUAL
 588: IFTRUE 592
 590: GO 814
 592: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
 593: LD_ADDR_VAR 0 4
 597: PUSH
 598: LD_INT 35
 600: PUSH
 601: LD_INT 45
 603: PUSH
 604: LD_INT 46
 606: PUSH
 607: LD_INT 47
 609: PUSH
 610: LD_INT 82
 612: PUSH
 613: LD_INT 83
 615: PUSH
 616: LD_INT 84
 618: PUSH
 619: LD_INT 85
 621: PUSH
 622: LD_INT 87
 624: PUSH
 625: LD_INT 70
 627: PUSH
 628: LD_INT 1
 630: PUSH
 631: LD_INT 11
 633: PUSH
 634: LD_INT 3
 636: PUSH
 637: LD_INT 4
 639: PUSH
 640: LD_INT 5
 642: PUSH
 643: LD_INT 6
 645: PUSH
 646: LD_INT 15
 648: PUSH
 649: LD_INT 18
 651: PUSH
 652: LD_INT 7
 654: PUSH
 655: LD_INT 17
 657: PUSH
 658: LD_INT 8
 660: PUSH
 661: LD_INT 20
 663: PUSH
 664: LD_INT 21
 666: PUSH
 667: LD_INT 22
 669: PUSH
 670: LD_INT 72
 672: PUSH
 673: LD_INT 26
 675: PUSH
 676: LD_INT 69
 678: PUSH
 679: LD_INT 39
 681: PUSH
 682: LD_INT 40
 684: PUSH
 685: LD_INT 41
 687: PUSH
 688: LD_INT 42
 690: PUSH
 691: LD_INT 43
 693: PUSH
 694: LD_INT 48
 696: PUSH
 697: LD_INT 49
 699: PUSH
 700: LD_INT 50
 702: PUSH
 703: LD_INT 51
 705: PUSH
 706: LD_INT 52
 708: PUSH
 709: LD_INT 53
 711: PUSH
 712: LD_INT 54
 714: PUSH
 715: LD_INT 55
 717: PUSH
 718: LD_INT 56
 720: PUSH
 721: LD_INT 60
 723: PUSH
 724: LD_INT 61
 726: PUSH
 727: LD_INT 62
 729: PUSH
 730: LD_INT 66
 732: PUSH
 733: LD_INT 67
 735: PUSH
 736: LD_INT 68
 738: PUSH
 739: LD_INT 81
 741: PUSH
 742: LD_INT 82
 744: PUSH
 745: LD_INT 83
 747: PUSH
 748: LD_INT 84
 750: PUSH
 751: LD_INT 85
 753: PUSH
 754: LD_INT 87
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: LIST
 763: LIST
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: ST_TO_ADDR
 812: GO 1045
 814: LD_INT 3
 816: DOUBLE
 817: EQUAL
 818: IFTRUE 822
 820: GO 1044
 822: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
 823: LD_ADDR_VAR 0 4
 827: PUSH
 828: LD_INT 46
 830: PUSH
 831: LD_INT 47
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: LD_INT 2
 839: PUSH
 840: LD_INT 82
 842: PUSH
 843: LD_INT 83
 845: PUSH
 846: LD_INT 84
 848: PUSH
 849: LD_INT 85
 851: PUSH
 852: LD_INT 86
 854: PUSH
 855: LD_INT 11
 857: PUSH
 858: LD_INT 9
 860: PUSH
 861: LD_INT 20
 863: PUSH
 864: LD_INT 19
 866: PUSH
 867: LD_INT 21
 869: PUSH
 870: LD_INT 24
 872: PUSH
 873: LD_INT 22
 875: PUSH
 876: LD_INT 25
 878: PUSH
 879: LD_INT 28
 881: PUSH
 882: LD_INT 29
 884: PUSH
 885: LD_INT 30
 887: PUSH
 888: LD_INT 31
 890: PUSH
 891: LD_INT 37
 893: PUSH
 894: LD_INT 38
 896: PUSH
 897: LD_INT 32
 899: PUSH
 900: LD_INT 27
 902: PUSH
 903: LD_INT 33
 905: PUSH
 906: LD_INT 69
 908: PUSH
 909: LD_INT 39
 911: PUSH
 912: LD_INT 34
 914: PUSH
 915: LD_INT 40
 917: PUSH
 918: LD_INT 71
 920: PUSH
 921: LD_INT 23
 923: PUSH
 924: LD_INT 44
 926: PUSH
 927: LD_INT 48
 929: PUSH
 930: LD_INT 49
 932: PUSH
 933: LD_INT 50
 935: PUSH
 936: LD_INT 51
 938: PUSH
 939: LD_INT 52
 941: PUSH
 942: LD_INT 53
 944: PUSH
 945: LD_INT 54
 947: PUSH
 948: LD_INT 55
 950: PUSH
 951: LD_INT 56
 953: PUSH
 954: LD_INT 57
 956: PUSH
 957: LD_INT 58
 959: PUSH
 960: LD_INT 59
 962: PUSH
 963: LD_INT 63
 965: PUSH
 966: LD_INT 64
 968: PUSH
 969: LD_INT 65
 971: PUSH
 972: LD_INT 82
 974: PUSH
 975: LD_INT 83
 977: PUSH
 978: LD_INT 84
 980: PUSH
 981: LD_INT 85
 983: PUSH
 984: LD_INT 86
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: ST_TO_ADDR
1042: GO 1045
1044: POP
// if state > - 1 and state < 3 then
1045: LD_VAR 0 3
1049: PUSH
1050: LD_INT 1
1052: NEG
1053: GREATER
1054: PUSH
1055: LD_VAR 0 3
1059: PUSH
1060: LD_INT 3
1062: LESS
1063: AND
1064: IFFALSE 1121
// for i in result do
1066: LD_ADDR_VAR 0 5
1070: PUSH
1071: LD_VAR 0 4
1075: PUSH
1076: FOR_IN
1077: IFFALSE 1119
// if GetTech ( i , side ) <> state then
1079: LD_VAR 0 5
1083: PPUSH
1084: LD_VAR 0 1
1088: PPUSH
1089: CALL_OW 321
1093: PUSH
1094: LD_VAR 0 3
1098: NONEQUAL
1099: IFFALSE 1117
// result := result diff i ;
1101: LD_ADDR_VAR 0 4
1105: PUSH
1106: LD_VAR 0 4
1110: PUSH
1111: LD_VAR 0 5
1115: DIFF
1116: ST_TO_ADDR
1117: GO 1076
1119: POP
1120: POP
// end ;
1121: LD_VAR 0 4
1125: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1126: LD_INT 0
1128: PPUSH
1129: PPUSH
1130: PPUSH
// result := true ;
1131: LD_ADDR_VAR 0 3
1135: PUSH
1136: LD_INT 1
1138: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1139: LD_ADDR_VAR 0 5
1143: PUSH
1144: LD_VAR 0 2
1148: PPUSH
1149: CALL_OW 480
1153: ST_TO_ADDR
// if not tmp then
1154: LD_VAR 0 5
1158: NOT
1159: IFFALSE 1163
// exit ;
1161: GO 1212
// for i in tmp do
1163: LD_ADDR_VAR 0 4
1167: PUSH
1168: LD_VAR 0 5
1172: PUSH
1173: FOR_IN
1174: IFFALSE 1210
// if GetTech ( i , side ) <> state_researched then
1176: LD_VAR 0 4
1180: PPUSH
1181: LD_VAR 0 1
1185: PPUSH
1186: CALL_OW 321
1190: PUSH
1191: LD_INT 2
1193: NONEQUAL
1194: IFFALSE 1208
// begin result := false ;
1196: LD_ADDR_VAR 0 3
1200: PUSH
1201: LD_INT 0
1203: ST_TO_ADDR
// exit ;
1204: POP
1205: POP
1206: GO 1212
// end ;
1208: GO 1173
1210: POP
1211: POP
// end ;
1212: LD_VAR 0 3
1216: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1217: LD_INT 0
1219: PPUSH
1220: PPUSH
1221: PPUSH
1222: PPUSH
1223: PPUSH
1224: PPUSH
1225: PPUSH
1226: PPUSH
1227: PPUSH
1228: PPUSH
1229: PPUSH
1230: PPUSH
1231: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1232: LD_VAR 0 1
1236: NOT
1237: PUSH
1238: LD_VAR 0 1
1242: PPUSH
1243: CALL_OW 257
1247: PUSH
1248: LD_INT 9
1250: NONEQUAL
1251: OR
1252: IFFALSE 1256
// exit ;
1254: GO 1829
// side := GetSide ( unit ) ;
1256: LD_ADDR_VAR 0 9
1260: PUSH
1261: LD_VAR 0 1
1265: PPUSH
1266: CALL_OW 255
1270: ST_TO_ADDR
// tech_space := tech_spacanom ;
1271: LD_ADDR_VAR 0 12
1275: PUSH
1276: LD_INT 29
1278: ST_TO_ADDR
// tech_time := tech_taurad ;
1279: LD_ADDR_VAR 0 13
1283: PUSH
1284: LD_INT 28
1286: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1287: LD_ADDR_VAR 0 11
1291: PUSH
1292: LD_VAR 0 1
1296: PPUSH
1297: CALL_OW 310
1301: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1302: LD_VAR 0 11
1306: PPUSH
1307: CALL_OW 247
1311: PUSH
1312: LD_INT 2
1314: EQUAL
1315: IFFALSE 1319
// exit ;
1317: GO 1829
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1319: LD_ADDR_VAR 0 8
1323: PUSH
1324: LD_INT 81
1326: PUSH
1327: LD_VAR 0 9
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 21
1341: PUSH
1342: LD_INT 3
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PPUSH
1357: CALL_OW 69
1361: ST_TO_ADDR
// if not tmp then
1362: LD_VAR 0 8
1366: NOT
1367: IFFALSE 1371
// exit ;
1369: GO 1829
// if in_unit then
1371: LD_VAR 0 11
1375: IFFALSE 1399
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1377: LD_ADDR_VAR 0 10
1381: PUSH
1382: LD_VAR 0 8
1386: PPUSH
1387: LD_VAR 0 11
1391: PPUSH
1392: CALL_OW 74
1396: ST_TO_ADDR
1397: GO 1419
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1399: LD_ADDR_VAR 0 10
1403: PUSH
1404: LD_VAR 0 8
1408: PPUSH
1409: LD_VAR 0 1
1413: PPUSH
1414: CALL_OW 74
1418: ST_TO_ADDR
// if not enemy then
1419: LD_VAR 0 10
1423: NOT
1424: IFFALSE 1428
// exit ;
1426: GO 1829
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1428: LD_VAR 0 11
1432: PUSH
1433: LD_VAR 0 11
1437: PPUSH
1438: LD_VAR 0 10
1442: PPUSH
1443: CALL_OW 296
1447: PUSH
1448: LD_INT 13
1450: GREATER
1451: AND
1452: PUSH
1453: LD_VAR 0 1
1457: PPUSH
1458: LD_VAR 0 10
1462: PPUSH
1463: CALL_OW 296
1467: PUSH
1468: LD_INT 12
1470: GREATER
1471: OR
1472: IFFALSE 1476
// exit ;
1474: GO 1829
// missile := [ 1 ] ;
1476: LD_ADDR_VAR 0 14
1480: PUSH
1481: LD_INT 1
1483: PUSH
1484: EMPTY
1485: LIST
1486: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1487: LD_VAR 0 9
1491: PPUSH
1492: LD_VAR 0 12
1496: PPUSH
1497: CALL_OW 325
1501: IFFALSE 1530
// missile := Insert ( missile , missile + 1 , 2 ) ;
1503: LD_ADDR_VAR 0 14
1507: PUSH
1508: LD_VAR 0 14
1512: PPUSH
1513: LD_VAR 0 14
1517: PUSH
1518: LD_INT 1
1520: PLUS
1521: PPUSH
1522: LD_INT 2
1524: PPUSH
1525: CALL_OW 2
1529: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1530: LD_VAR 0 9
1534: PPUSH
1535: LD_VAR 0 13
1539: PPUSH
1540: CALL_OW 325
1544: PUSH
1545: LD_VAR 0 10
1549: PPUSH
1550: CALL_OW 255
1554: PPUSH
1555: LD_VAR 0 13
1559: PPUSH
1560: CALL_OW 325
1564: NOT
1565: AND
1566: IFFALSE 1595
// missile := Insert ( missile , missile + 1 , 3 ) ;
1568: LD_ADDR_VAR 0 14
1572: PUSH
1573: LD_VAR 0 14
1577: PPUSH
1578: LD_VAR 0 14
1582: PUSH
1583: LD_INT 1
1585: PLUS
1586: PPUSH
1587: LD_INT 3
1589: PPUSH
1590: CALL_OW 2
1594: ST_TO_ADDR
// if missile < 2 then
1595: LD_VAR 0 14
1599: PUSH
1600: LD_INT 2
1602: LESS
1603: IFFALSE 1607
// exit ;
1605: GO 1829
// x := GetX ( enemy ) ;
1607: LD_ADDR_VAR 0 4
1611: PUSH
1612: LD_VAR 0 10
1616: PPUSH
1617: CALL_OW 250
1621: ST_TO_ADDR
// y := GetY ( enemy ) ;
1622: LD_ADDR_VAR 0 5
1626: PUSH
1627: LD_VAR 0 10
1631: PPUSH
1632: CALL_OW 251
1636: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1637: LD_ADDR_VAR 0 6
1641: PUSH
1642: LD_VAR 0 4
1646: PUSH
1647: LD_INT 1
1649: NEG
1650: PPUSH
1651: LD_INT 1
1653: PPUSH
1654: CALL_OW 12
1658: PLUS
1659: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1660: LD_ADDR_VAR 0 7
1664: PUSH
1665: LD_VAR 0 5
1669: PUSH
1670: LD_INT 1
1672: NEG
1673: PPUSH
1674: LD_INT 1
1676: PPUSH
1677: CALL_OW 12
1681: PLUS
1682: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1683: LD_VAR 0 6
1687: PPUSH
1688: LD_VAR 0 7
1692: PPUSH
1693: CALL_OW 488
1697: NOT
1698: IFFALSE 1720
// begin _x := x ;
1700: LD_ADDR_VAR 0 6
1704: PUSH
1705: LD_VAR 0 4
1709: ST_TO_ADDR
// _y := y ;
1710: LD_ADDR_VAR 0 7
1714: PUSH
1715: LD_VAR 0 5
1719: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1720: LD_ADDR_VAR 0 3
1724: PUSH
1725: LD_INT 1
1727: PPUSH
1728: LD_VAR 0 14
1732: PPUSH
1733: CALL_OW 12
1737: ST_TO_ADDR
// case i of 1 :
1738: LD_VAR 0 3
1742: PUSH
1743: LD_INT 1
1745: DOUBLE
1746: EQUAL
1747: IFTRUE 1751
1749: GO 1768
1751: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1752: LD_VAR 0 1
1756: PPUSH
1757: LD_VAR 0 10
1761: PPUSH
1762: CALL_OW 115
1766: GO 1829
1768: LD_INT 2
1770: DOUBLE
1771: EQUAL
1772: IFTRUE 1776
1774: GO 1798
1776: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1777: LD_VAR 0 1
1781: PPUSH
1782: LD_VAR 0 6
1786: PPUSH
1787: LD_VAR 0 7
1791: PPUSH
1792: CALL_OW 153
1796: GO 1829
1798: LD_INT 3
1800: DOUBLE
1801: EQUAL
1802: IFTRUE 1806
1804: GO 1828
1806: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1807: LD_VAR 0 1
1811: PPUSH
1812: LD_VAR 0 6
1816: PPUSH
1817: LD_VAR 0 7
1821: PPUSH
1822: CALL_OW 154
1826: GO 1829
1828: POP
// end ;
1829: LD_VAR 0 2
1833: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1834: LD_INT 0
1836: PPUSH
1837: PPUSH
1838: PPUSH
1839: PPUSH
1840: PPUSH
1841: PPUSH
// if not unit or not building then
1842: LD_VAR 0 1
1846: NOT
1847: PUSH
1848: LD_VAR 0 2
1852: NOT
1853: OR
1854: IFFALSE 1858
// exit ;
1856: GO 2016
// x := GetX ( building ) ;
1858: LD_ADDR_VAR 0 5
1862: PUSH
1863: LD_VAR 0 2
1867: PPUSH
1868: CALL_OW 250
1872: ST_TO_ADDR
// y := GetY ( building ) ;
1873: LD_ADDR_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: PPUSH
1883: CALL_OW 251
1887: ST_TO_ADDR
// for i = 0 to 5 do
1888: LD_ADDR_VAR 0 4
1892: PUSH
1893: DOUBLE
1894: LD_INT 0
1896: DEC
1897: ST_TO_ADDR
1898: LD_INT 5
1900: PUSH
1901: FOR_TO
1902: IFFALSE 2014
// begin _x := ShiftX ( x , i , 3 ) ;
1904: LD_ADDR_VAR 0 7
1908: PUSH
1909: LD_VAR 0 5
1913: PPUSH
1914: LD_VAR 0 4
1918: PPUSH
1919: LD_INT 3
1921: PPUSH
1922: CALL_OW 272
1926: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
1927: LD_ADDR_VAR 0 8
1931: PUSH
1932: LD_VAR 0 6
1936: PPUSH
1937: LD_VAR 0 4
1941: PPUSH
1942: LD_INT 3
1944: PPUSH
1945: CALL_OW 273
1949: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1950: LD_VAR 0 7
1954: PPUSH
1955: LD_VAR 0 8
1959: PPUSH
1960: CALL_OW 488
1964: NOT
1965: IFFALSE 1969
// continue ;
1967: GO 1901
// if HexInfo ( _x , _y ) = 0 then
1969: LD_VAR 0 7
1973: PPUSH
1974: LD_VAR 0 8
1978: PPUSH
1979: CALL_OW 428
1983: PUSH
1984: LD_INT 0
1986: EQUAL
1987: IFFALSE 2012
// begin ComMoveXY ( unit , _x , _y ) ;
1989: LD_VAR 0 1
1993: PPUSH
1994: LD_VAR 0 7
1998: PPUSH
1999: LD_VAR 0 8
2003: PPUSH
2004: CALL_OW 111
// exit ;
2008: POP
2009: POP
2010: GO 2016
// end ; end ;
2012: GO 1901
2014: POP
2015: POP
// end ;
2016: LD_VAR 0 3
2020: RET
// export function ScanBase ( side , base_area ) ; begin
2021: LD_INT 0
2023: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2024: LD_ADDR_VAR 0 3
2028: PUSH
2029: LD_VAR 0 2
2033: PPUSH
2034: LD_INT 81
2036: PUSH
2037: LD_VAR 0 1
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PPUSH
2046: CALL_OW 70
2050: ST_TO_ADDR
// end ;
2051: LD_VAR 0 3
2055: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2056: LD_INT 0
2058: PPUSH
2059: PPUSH
2060: PPUSH
2061: PPUSH
// result := false ;
2062: LD_ADDR_VAR 0 2
2066: PUSH
2067: LD_INT 0
2069: ST_TO_ADDR
// side := GetSide ( unit ) ;
2070: LD_ADDR_VAR 0 3
2074: PUSH
2075: LD_VAR 0 1
2079: PPUSH
2080: CALL_OW 255
2084: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2085: LD_ADDR_VAR 0 4
2089: PUSH
2090: LD_VAR 0 1
2094: PPUSH
2095: CALL_OW 248
2099: ST_TO_ADDR
// case nat of 1 :
2100: LD_VAR 0 4
2104: PUSH
2105: LD_INT 1
2107: DOUBLE
2108: EQUAL
2109: IFTRUE 2113
2111: GO 2124
2113: POP
// tech := tech_lassight ; 2 :
2114: LD_ADDR_VAR 0 5
2118: PUSH
2119: LD_INT 12
2121: ST_TO_ADDR
2122: GO 2163
2124: LD_INT 2
2126: DOUBLE
2127: EQUAL
2128: IFTRUE 2132
2130: GO 2143
2132: POP
// tech := tech_mortar ; 3 :
2133: LD_ADDR_VAR 0 5
2137: PUSH
2138: LD_INT 41
2140: ST_TO_ADDR
2141: GO 2163
2143: LD_INT 3
2145: DOUBLE
2146: EQUAL
2147: IFTRUE 2151
2149: GO 2162
2151: POP
// tech := tech_bazooka ; end ;
2152: LD_ADDR_VAR 0 5
2156: PUSH
2157: LD_INT 44
2159: ST_TO_ADDR
2160: GO 2163
2162: POP
// if Researched ( side , tech ) then
2163: LD_VAR 0 3
2167: PPUSH
2168: LD_VAR 0 5
2172: PPUSH
2173: CALL_OW 325
2177: IFFALSE 2204
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2179: LD_ADDR_VAR 0 2
2183: PUSH
2184: LD_INT 5
2186: PUSH
2187: LD_INT 8
2189: PUSH
2190: LD_INT 9
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: LIST
2197: PUSH
2198: LD_VAR 0 4
2202: ARRAY
2203: ST_TO_ADDR
// end ;
2204: LD_VAR 0 2
2208: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2209: LD_INT 0
2211: PPUSH
2212: PPUSH
2213: PPUSH
// if not mines then
2214: LD_VAR 0 2
2218: NOT
2219: IFFALSE 2223
// exit ;
2221: GO 2367
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2223: LD_ADDR_VAR 0 5
2227: PUSH
2228: LD_INT 81
2230: PUSH
2231: LD_VAR 0 1
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: PUSH
2240: LD_INT 3
2242: PUSH
2243: LD_INT 21
2245: PUSH
2246: LD_INT 3
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PPUSH
2261: CALL_OW 69
2265: ST_TO_ADDR
// for i in mines do
2266: LD_ADDR_VAR 0 4
2270: PUSH
2271: LD_VAR 0 2
2275: PUSH
2276: FOR_IN
2277: IFFALSE 2365
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2279: LD_VAR 0 4
2283: PUSH
2284: LD_INT 1
2286: ARRAY
2287: PPUSH
2288: LD_VAR 0 4
2292: PUSH
2293: LD_INT 2
2295: ARRAY
2296: PPUSH
2297: CALL_OW 458
2301: NOT
2302: IFFALSE 2306
// continue ;
2304: GO 2276
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2306: LD_VAR 0 4
2310: PUSH
2311: LD_INT 1
2313: ARRAY
2314: PPUSH
2315: LD_VAR 0 4
2319: PUSH
2320: LD_INT 2
2322: ARRAY
2323: PPUSH
2324: CALL_OW 428
2328: PUSH
2329: LD_VAR 0 5
2333: IN
2334: IFFALSE 2363
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2336: LD_VAR 0 4
2340: PUSH
2341: LD_INT 1
2343: ARRAY
2344: PPUSH
2345: LD_VAR 0 4
2349: PUSH
2350: LD_INT 2
2352: ARRAY
2353: PPUSH
2354: LD_VAR 0 1
2358: PPUSH
2359: CALL_OW 456
// end ;
2363: GO 2276
2365: POP
2366: POP
// end ;
2367: LD_VAR 0 3
2371: RET
// export function Count ( array ) ; var i ; begin
2372: LD_INT 0
2374: PPUSH
2375: PPUSH
// result := 0 ;
2376: LD_ADDR_VAR 0 2
2380: PUSH
2381: LD_INT 0
2383: ST_TO_ADDR
// for i in array do
2384: LD_ADDR_VAR 0 3
2388: PUSH
2389: LD_VAR 0 1
2393: PUSH
2394: FOR_IN
2395: IFFALSE 2419
// if i then
2397: LD_VAR 0 3
2401: IFFALSE 2417
// result := result + 1 ;
2403: LD_ADDR_VAR 0 2
2407: PUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_INT 1
2415: PLUS
2416: ST_TO_ADDR
2417: GO 2394
2419: POP
2420: POP
// end ;
2421: LD_VAR 0 2
2425: RET
// export function IsEmpty ( building ) ; begin
2426: LD_INT 0
2428: PPUSH
// if not building then
2429: LD_VAR 0 1
2433: NOT
2434: IFFALSE 2438
// exit ;
2436: GO 2481
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2438: LD_ADDR_VAR 0 2
2442: PUSH
2443: LD_VAR 0 1
2447: PUSH
2448: LD_INT 22
2450: PUSH
2451: LD_VAR 0 1
2455: PPUSH
2456: CALL_OW 255
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 58
2467: PUSH
2468: EMPTY
2469: LIST
2470: PUSH
2471: EMPTY
2472: LIST
2473: LIST
2474: PPUSH
2475: CALL_OW 69
2479: IN
2480: ST_TO_ADDR
// end ;
2481: LD_VAR 0 2
2485: RET
// export function IsNotFull ( building ) ; begin
2486: LD_INT 0
2488: PPUSH
// if not building then
2489: LD_VAR 0 1
2493: NOT
2494: IFFALSE 2498
// exit ;
2496: GO 2517
// result := UnitsInside ( building ) < 6 ;
2498: LD_ADDR_VAR 0 2
2502: PUSH
2503: LD_VAR 0 1
2507: PPUSH
2508: CALL_OW 313
2512: PUSH
2513: LD_INT 6
2515: LESS
2516: ST_TO_ADDR
// end ;
2517: LD_VAR 0 2
2521: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2522: LD_INT 0
2524: PPUSH
2525: PPUSH
2526: PPUSH
2527: PPUSH
// tmp := [ ] ;
2528: LD_ADDR_VAR 0 3
2532: PUSH
2533: EMPTY
2534: ST_TO_ADDR
// list := [ ] ;
2535: LD_ADDR_VAR 0 5
2539: PUSH
2540: EMPTY
2541: ST_TO_ADDR
// for i = 16 to 25 do
2542: LD_ADDR_VAR 0 4
2546: PUSH
2547: DOUBLE
2548: LD_INT 16
2550: DEC
2551: ST_TO_ADDR
2552: LD_INT 25
2554: PUSH
2555: FOR_TO
2556: IFFALSE 2629
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2558: LD_ADDR_VAR 0 3
2562: PUSH
2563: LD_VAR 0 3
2567: PUSH
2568: LD_INT 22
2570: PUSH
2571: LD_VAR 0 1
2575: PPUSH
2576: CALL_OW 255
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: LD_INT 91
2587: PUSH
2588: LD_VAR 0 1
2592: PUSH
2593: LD_INT 6
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: LIST
2600: PUSH
2601: LD_INT 30
2603: PUSH
2604: LD_VAR 0 4
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: LIST
2617: PUSH
2618: EMPTY
2619: LIST
2620: PPUSH
2621: CALL_OW 69
2625: ADD
2626: ST_TO_ADDR
2627: GO 2555
2629: POP
2630: POP
// for i = 1 to tmp do
2631: LD_ADDR_VAR 0 4
2635: PUSH
2636: DOUBLE
2637: LD_INT 1
2639: DEC
2640: ST_TO_ADDR
2641: LD_VAR 0 3
2645: PUSH
2646: FOR_TO
2647: IFFALSE 2735
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2649: LD_ADDR_VAR 0 5
2653: PUSH
2654: LD_VAR 0 5
2658: PUSH
2659: LD_VAR 0 3
2663: PUSH
2664: LD_VAR 0 4
2668: ARRAY
2669: PPUSH
2670: CALL_OW 266
2674: PUSH
2675: LD_VAR 0 3
2679: PUSH
2680: LD_VAR 0 4
2684: ARRAY
2685: PPUSH
2686: CALL_OW 250
2690: PUSH
2691: LD_VAR 0 3
2695: PUSH
2696: LD_VAR 0 4
2700: ARRAY
2701: PPUSH
2702: CALL_OW 251
2706: PUSH
2707: LD_VAR 0 3
2711: PUSH
2712: LD_VAR 0 4
2716: ARRAY
2717: PPUSH
2718: CALL_OW 254
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: PUSH
2729: EMPTY
2730: LIST
2731: ADD
2732: ST_TO_ADDR
2733: GO 2646
2735: POP
2736: POP
// result := list ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_VAR 0 5
2746: ST_TO_ADDR
// end ;
2747: LD_VAR 0 2
2751: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2752: LD_INT 0
2754: PPUSH
2755: PPUSH
2756: PPUSH
2757: PPUSH
2758: PPUSH
2759: PPUSH
2760: PPUSH
// if not factory then
2761: LD_VAR 0 1
2765: NOT
2766: IFFALSE 2770
// exit ;
2768: GO 3363
// if control = control_apeman then
2770: LD_VAR 0 4
2774: PUSH
2775: LD_INT 5
2777: EQUAL
2778: IFFALSE 2887
// begin tmp := UnitsInside ( factory ) ;
2780: LD_ADDR_VAR 0 8
2784: PUSH
2785: LD_VAR 0 1
2789: PPUSH
2790: CALL_OW 313
2794: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2795: LD_VAR 0 8
2799: PPUSH
2800: LD_INT 25
2802: PUSH
2803: LD_INT 12
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PPUSH
2810: CALL_OW 72
2814: NOT
2815: IFFALSE 2825
// control := control_manual ;
2817: LD_ADDR_VAR 0 4
2821: PUSH
2822: LD_INT 1
2824: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2825: LD_ADDR_VAR 0 8
2829: PUSH
2830: LD_VAR 0 1
2834: PPUSH
2835: CALL 2522 0 1
2839: ST_TO_ADDR
// if tmp then
2840: LD_VAR 0 8
2844: IFFALSE 2887
// begin for i in tmp do
2846: LD_ADDR_VAR 0 7
2850: PUSH
2851: LD_VAR 0 8
2855: PUSH
2856: FOR_IN
2857: IFFALSE 2885
// if i [ 1 ] = b_ext_radio then
2859: LD_VAR 0 7
2863: PUSH
2864: LD_INT 1
2866: ARRAY
2867: PUSH
2868: LD_INT 22
2870: EQUAL
2871: IFFALSE 2883
// begin control := control_remote ;
2873: LD_ADDR_VAR 0 4
2877: PUSH
2878: LD_INT 2
2880: ST_TO_ADDR
// break ;
2881: GO 2885
// end ;
2883: GO 2856
2885: POP
2886: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
2887: LD_VAR 0 1
2891: PPUSH
2892: LD_VAR 0 2
2896: PPUSH
2897: LD_VAR 0 3
2901: PPUSH
2902: LD_VAR 0 4
2906: PPUSH
2907: LD_VAR 0 5
2911: PPUSH
2912: CALL_OW 448
2916: IFFALSE 2951
// begin result := [ chassis , engine , control , weapon ] ;
2918: LD_ADDR_VAR 0 6
2922: PUSH
2923: LD_VAR 0 2
2927: PUSH
2928: LD_VAR 0 3
2932: PUSH
2933: LD_VAR 0 4
2937: PUSH
2938: LD_VAR 0 5
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: ST_TO_ADDR
// exit ;
2949: GO 3363
// end ; _chassis := AvailableChassisList ( factory ) ;
2951: LD_ADDR_VAR 0 9
2955: PUSH
2956: LD_VAR 0 1
2960: PPUSH
2961: CALL_OW 475
2965: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
2966: LD_ADDR_VAR 0 11
2970: PUSH
2971: LD_VAR 0 1
2975: PPUSH
2976: CALL_OW 476
2980: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
2981: LD_ADDR_VAR 0 12
2985: PUSH
2986: LD_VAR 0 1
2990: PPUSH
2991: CALL_OW 477
2995: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
2996: LD_ADDR_VAR 0 10
3000: PUSH
3001: LD_VAR 0 1
3005: PPUSH
3006: CALL_OW 478
3010: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3011: LD_VAR 0 9
3015: NOT
3016: PUSH
3017: LD_VAR 0 11
3021: NOT
3022: OR
3023: PUSH
3024: LD_VAR 0 12
3028: NOT
3029: OR
3030: PUSH
3031: LD_VAR 0 10
3035: NOT
3036: OR
3037: IFFALSE 3072
// begin result := [ chassis , engine , control , weapon ] ;
3039: LD_ADDR_VAR 0 6
3043: PUSH
3044: LD_VAR 0 2
3048: PUSH
3049: LD_VAR 0 3
3053: PUSH
3054: LD_VAR 0 4
3058: PUSH
3059: LD_VAR 0 5
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: ST_TO_ADDR
// exit ;
3070: GO 3363
// end ; if not chassis in _chassis then
3072: LD_VAR 0 2
3076: PUSH
3077: LD_VAR 0 9
3081: IN
3082: NOT
3083: IFFALSE 3109
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3085: LD_ADDR_VAR 0 2
3089: PUSH
3090: LD_VAR 0 9
3094: PUSH
3095: LD_INT 1
3097: PPUSH
3098: LD_VAR 0 9
3102: PPUSH
3103: CALL_OW 12
3107: ARRAY
3108: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3109: LD_VAR 0 2
3113: PPUSH
3114: LD_VAR 0 3
3118: PPUSH
3119: CALL 3368 0 2
3123: NOT
3124: IFFALSE 3183
// repeat engine := _engine [ 1 ] ;
3126: LD_ADDR_VAR 0 3
3130: PUSH
3131: LD_VAR 0 11
3135: PUSH
3136: LD_INT 1
3138: ARRAY
3139: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3140: LD_ADDR_VAR 0 11
3144: PUSH
3145: LD_VAR 0 11
3149: PPUSH
3150: LD_INT 1
3152: PPUSH
3153: CALL_OW 3
3157: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3158: LD_VAR 0 2
3162: PPUSH
3163: LD_VAR 0 3
3167: PPUSH
3168: CALL 3368 0 2
3172: PUSH
3173: LD_VAR 0 11
3177: PUSH
3178: EMPTY
3179: EQUAL
3180: OR
3181: IFFALSE 3126
// if not control in _control then
3183: LD_VAR 0 4
3187: PUSH
3188: LD_VAR 0 12
3192: IN
3193: NOT
3194: IFFALSE 3220
// control := _control [ rand ( 1 , _control ) ] ;
3196: LD_ADDR_VAR 0 4
3200: PUSH
3201: LD_VAR 0 12
3205: PUSH
3206: LD_INT 1
3208: PPUSH
3209: LD_VAR 0 12
3213: PPUSH
3214: CALL_OW 12
3218: ARRAY
3219: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3220: LD_VAR 0 2
3224: PPUSH
3225: LD_VAR 0 5
3229: PPUSH
3230: CALL 3588 0 2
3234: NOT
3235: IFFALSE 3294
// repeat weapon := _weapon [ 1 ] ;
3237: LD_ADDR_VAR 0 5
3241: PUSH
3242: LD_VAR 0 10
3246: PUSH
3247: LD_INT 1
3249: ARRAY
3250: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3251: LD_ADDR_VAR 0 10
3255: PUSH
3256: LD_VAR 0 10
3260: PPUSH
3261: LD_INT 1
3263: PPUSH
3264: CALL_OW 3
3268: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3269: LD_VAR 0 2
3273: PPUSH
3274: LD_VAR 0 5
3278: PPUSH
3279: CALL 3588 0 2
3283: PUSH
3284: LD_VAR 0 10
3288: PUSH
3289: EMPTY
3290: EQUAL
3291: OR
3292: IFFALSE 3237
// result := [ ] ;
3294: LD_ADDR_VAR 0 6
3298: PUSH
3299: EMPTY
3300: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3301: LD_VAR 0 1
3305: PPUSH
3306: LD_VAR 0 2
3310: PPUSH
3311: LD_VAR 0 3
3315: PPUSH
3316: LD_VAR 0 4
3320: PPUSH
3321: LD_VAR 0 5
3325: PPUSH
3326: CALL_OW 448
3330: IFFALSE 3363
// result := [ chassis , engine , control , weapon ] ;
3332: LD_ADDR_VAR 0 6
3336: PUSH
3337: LD_VAR 0 2
3341: PUSH
3342: LD_VAR 0 3
3346: PUSH
3347: LD_VAR 0 4
3351: PUSH
3352: LD_VAR 0 5
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: ST_TO_ADDR
// end ;
3363: LD_VAR 0 6
3367: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3368: LD_INT 0
3370: PPUSH
// if not chassis or not engine then
3371: LD_VAR 0 1
3375: NOT
3376: PUSH
3377: LD_VAR 0 2
3381: NOT
3382: OR
3383: IFFALSE 3387
// exit ;
3385: GO 3583
// case engine of engine_solar :
3387: LD_VAR 0 2
3391: PUSH
3392: LD_INT 2
3394: DOUBLE
3395: EQUAL
3396: IFTRUE 3400
3398: GO 3438
3400: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3401: LD_ADDR_VAR 0 3
3405: PUSH
3406: LD_INT 11
3408: PUSH
3409: LD_INT 12
3411: PUSH
3412: LD_INT 13
3414: PUSH
3415: LD_INT 14
3417: PUSH
3418: LD_INT 1
3420: PUSH
3421: LD_INT 2
3423: PUSH
3424: LD_INT 3
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: ST_TO_ADDR
3436: GO 3567
3438: LD_INT 1
3440: DOUBLE
3441: EQUAL
3442: IFTRUE 3446
3444: GO 3508
3446: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3447: LD_ADDR_VAR 0 3
3451: PUSH
3452: LD_INT 11
3454: PUSH
3455: LD_INT 12
3457: PUSH
3458: LD_INT 13
3460: PUSH
3461: LD_INT 14
3463: PUSH
3464: LD_INT 1
3466: PUSH
3467: LD_INT 2
3469: PUSH
3470: LD_INT 3
3472: PUSH
3473: LD_INT 4
3475: PUSH
3476: LD_INT 5
3478: PUSH
3479: LD_INT 21
3481: PUSH
3482: LD_INT 23
3484: PUSH
3485: LD_INT 22
3487: PUSH
3488: LD_INT 24
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: ST_TO_ADDR
3506: GO 3567
3508: LD_INT 3
3510: DOUBLE
3511: EQUAL
3512: IFTRUE 3516
3514: GO 3566
3516: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3517: LD_ADDR_VAR 0 3
3521: PUSH
3522: LD_INT 13
3524: PUSH
3525: LD_INT 14
3527: PUSH
3528: LD_INT 2
3530: PUSH
3531: LD_INT 3
3533: PUSH
3534: LD_INT 4
3536: PUSH
3537: LD_INT 5
3539: PUSH
3540: LD_INT 21
3542: PUSH
3543: LD_INT 22
3545: PUSH
3546: LD_INT 23
3548: PUSH
3549: LD_INT 24
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: ST_TO_ADDR
3564: GO 3567
3566: POP
// result := ( chassis in result ) ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: LD_VAR 0 1
3576: PUSH
3577: LD_VAR 0 3
3581: IN
3582: ST_TO_ADDR
// end ;
3583: LD_VAR 0 3
3587: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3588: LD_INT 0
3590: PPUSH
// if not chassis or not weapon then
3591: LD_VAR 0 1
3595: NOT
3596: PUSH
3597: LD_VAR 0 2
3601: NOT
3602: OR
3603: IFFALSE 3607
// exit ;
3605: GO 4633
// case weapon of us_machine_gun :
3607: LD_VAR 0 2
3611: PUSH
3612: LD_INT 2
3614: DOUBLE
3615: EQUAL
3616: IFTRUE 3620
3618: GO 3650
3620: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3621: LD_ADDR_VAR 0 3
3625: PUSH
3626: LD_INT 1
3628: PUSH
3629: LD_INT 2
3631: PUSH
3632: LD_INT 3
3634: PUSH
3635: LD_INT 4
3637: PUSH
3638: LD_INT 5
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: ST_TO_ADDR
3648: GO 4617
3650: LD_INT 3
3652: DOUBLE
3653: EQUAL
3654: IFTRUE 3658
3656: GO 3688
3658: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3659: LD_ADDR_VAR 0 3
3663: PUSH
3664: LD_INT 1
3666: PUSH
3667: LD_INT 2
3669: PUSH
3670: LD_INT 3
3672: PUSH
3673: LD_INT 4
3675: PUSH
3676: LD_INT 5
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: ST_TO_ADDR
3686: GO 4617
3688: LD_INT 11
3690: DOUBLE
3691: EQUAL
3692: IFTRUE 3696
3694: GO 3726
3696: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3697: LD_ADDR_VAR 0 3
3701: PUSH
3702: LD_INT 1
3704: PUSH
3705: LD_INT 2
3707: PUSH
3708: LD_INT 3
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: LD_INT 5
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: ST_TO_ADDR
3724: GO 4617
3726: LD_INT 4
3728: DOUBLE
3729: EQUAL
3730: IFTRUE 3734
3732: GO 3760
3734: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3735: LD_ADDR_VAR 0 3
3739: PUSH
3740: LD_INT 2
3742: PUSH
3743: LD_INT 3
3745: PUSH
3746: LD_INT 4
3748: PUSH
3749: LD_INT 5
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: ST_TO_ADDR
3758: GO 4617
3760: LD_INT 5
3762: DOUBLE
3763: EQUAL
3764: IFTRUE 3768
3766: GO 3794
3768: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3769: LD_ADDR_VAR 0 3
3773: PUSH
3774: LD_INT 2
3776: PUSH
3777: LD_INT 3
3779: PUSH
3780: LD_INT 4
3782: PUSH
3783: LD_INT 5
3785: PUSH
3786: EMPTY
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: ST_TO_ADDR
3792: GO 4617
3794: LD_INT 9
3796: DOUBLE
3797: EQUAL
3798: IFTRUE 3802
3800: GO 3828
3802: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3803: LD_ADDR_VAR 0 3
3807: PUSH
3808: LD_INT 2
3810: PUSH
3811: LD_INT 3
3813: PUSH
3814: LD_INT 4
3816: PUSH
3817: LD_INT 5
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: ST_TO_ADDR
3826: GO 4617
3828: LD_INT 7
3830: DOUBLE
3831: EQUAL
3832: IFTRUE 3836
3834: GO 3862
3836: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
3837: LD_ADDR_VAR 0 3
3841: PUSH
3842: LD_INT 2
3844: PUSH
3845: LD_INT 3
3847: PUSH
3848: LD_INT 4
3850: PUSH
3851: LD_INT 5
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: ST_TO_ADDR
3860: GO 4617
3862: LD_INT 12
3864: DOUBLE
3865: EQUAL
3866: IFTRUE 3870
3868: GO 3896
3870: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
3871: LD_ADDR_VAR 0 3
3875: PUSH
3876: LD_INT 2
3878: PUSH
3879: LD_INT 3
3881: PUSH
3882: LD_INT 4
3884: PUSH
3885: LD_INT 5
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: ST_TO_ADDR
3894: GO 4617
3896: LD_INT 13
3898: DOUBLE
3899: EQUAL
3900: IFTRUE 3904
3902: GO 3930
3904: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
3905: LD_ADDR_VAR 0 3
3909: PUSH
3910: LD_INT 2
3912: PUSH
3913: LD_INT 3
3915: PUSH
3916: LD_INT 4
3918: PUSH
3919: LD_INT 5
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: ST_TO_ADDR
3928: GO 4617
3930: LD_INT 14
3932: DOUBLE
3933: EQUAL
3934: IFTRUE 3938
3936: GO 3956
3938: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
3939: LD_ADDR_VAR 0 3
3943: PUSH
3944: LD_INT 4
3946: PUSH
3947: LD_INT 5
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: ST_TO_ADDR
3954: GO 4617
3956: LD_INT 6
3958: DOUBLE
3959: EQUAL
3960: IFTRUE 3964
3962: GO 3982
3964: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
3965: LD_ADDR_VAR 0 3
3969: PUSH
3970: LD_INT 4
3972: PUSH
3973: LD_INT 5
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: ST_TO_ADDR
3980: GO 4617
3982: LD_INT 10
3984: DOUBLE
3985: EQUAL
3986: IFTRUE 3990
3988: GO 4008
3990: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
3991: LD_ADDR_VAR 0 3
3995: PUSH
3996: LD_INT 4
3998: PUSH
3999: LD_INT 5
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: ST_TO_ADDR
4006: GO 4617
4008: LD_INT 22
4010: DOUBLE
4011: EQUAL
4012: IFTRUE 4016
4014: GO 4042
4016: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4017: LD_ADDR_VAR 0 3
4021: PUSH
4022: LD_INT 11
4024: PUSH
4025: LD_INT 12
4027: PUSH
4028: LD_INT 13
4030: PUSH
4031: LD_INT 14
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: ST_TO_ADDR
4040: GO 4617
4042: LD_INT 23
4044: DOUBLE
4045: EQUAL
4046: IFTRUE 4050
4048: GO 4076
4050: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4051: LD_ADDR_VAR 0 3
4055: PUSH
4056: LD_INT 11
4058: PUSH
4059: LD_INT 12
4061: PUSH
4062: LD_INT 13
4064: PUSH
4065: LD_INT 14
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: ST_TO_ADDR
4074: GO 4617
4076: LD_INT 24
4078: DOUBLE
4079: EQUAL
4080: IFTRUE 4084
4082: GO 4110
4084: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4085: LD_ADDR_VAR 0 3
4089: PUSH
4090: LD_INT 11
4092: PUSH
4093: LD_INT 12
4095: PUSH
4096: LD_INT 13
4098: PUSH
4099: LD_INT 14
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: ST_TO_ADDR
4108: GO 4617
4110: LD_INT 30
4112: DOUBLE
4113: EQUAL
4114: IFTRUE 4118
4116: GO 4144
4118: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4119: LD_ADDR_VAR 0 3
4123: PUSH
4124: LD_INT 11
4126: PUSH
4127: LD_INT 12
4129: PUSH
4130: LD_INT 13
4132: PUSH
4133: LD_INT 14
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: ST_TO_ADDR
4142: GO 4617
4144: LD_INT 25
4146: DOUBLE
4147: EQUAL
4148: IFTRUE 4152
4150: GO 4170
4152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4153: LD_ADDR_VAR 0 3
4157: PUSH
4158: LD_INT 13
4160: PUSH
4161: LD_INT 14
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: ST_TO_ADDR
4168: GO 4617
4170: LD_INT 27
4172: DOUBLE
4173: EQUAL
4174: IFTRUE 4178
4176: GO 4196
4178: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4179: LD_ADDR_VAR 0 3
4183: PUSH
4184: LD_INT 13
4186: PUSH
4187: LD_INT 14
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: ST_TO_ADDR
4194: GO 4617
4196: LD_INT 28
4198: DOUBLE
4199: EQUAL
4200: IFTRUE 4204
4202: GO 4222
4204: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4205: LD_ADDR_VAR 0 3
4209: PUSH
4210: LD_INT 13
4212: PUSH
4213: LD_INT 14
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: ST_TO_ADDR
4220: GO 4617
4222: LD_INT 29
4224: DOUBLE
4225: EQUAL
4226: IFTRUE 4230
4228: GO 4248
4230: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4231: LD_ADDR_VAR 0 3
4235: PUSH
4236: LD_INT 13
4238: PUSH
4239: LD_INT 14
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: ST_TO_ADDR
4246: GO 4617
4248: LD_INT 31
4250: DOUBLE
4251: EQUAL
4252: IFTRUE 4256
4254: GO 4274
4256: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4257: LD_ADDR_VAR 0 3
4261: PUSH
4262: LD_INT 13
4264: PUSH
4265: LD_INT 14
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: ST_TO_ADDR
4272: GO 4617
4274: LD_INT 26
4276: DOUBLE
4277: EQUAL
4278: IFTRUE 4282
4280: GO 4300
4282: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4283: LD_ADDR_VAR 0 3
4287: PUSH
4288: LD_INT 13
4290: PUSH
4291: LD_INT 14
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: ST_TO_ADDR
4298: GO 4617
4300: LD_INT 42
4302: DOUBLE
4303: EQUAL
4304: IFTRUE 4308
4306: GO 4334
4308: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4309: LD_ADDR_VAR 0 3
4313: PUSH
4314: LD_INT 21
4316: PUSH
4317: LD_INT 22
4319: PUSH
4320: LD_INT 23
4322: PUSH
4323: LD_INT 24
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: ST_TO_ADDR
4332: GO 4617
4334: LD_INT 43
4336: DOUBLE
4337: EQUAL
4338: IFTRUE 4342
4340: GO 4368
4342: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4343: LD_ADDR_VAR 0 3
4347: PUSH
4348: LD_INT 21
4350: PUSH
4351: LD_INT 22
4353: PUSH
4354: LD_INT 23
4356: PUSH
4357: LD_INT 24
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: ST_TO_ADDR
4366: GO 4617
4368: LD_INT 44
4370: DOUBLE
4371: EQUAL
4372: IFTRUE 4376
4374: GO 4402
4376: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4377: LD_ADDR_VAR 0 3
4381: PUSH
4382: LD_INT 21
4384: PUSH
4385: LD_INT 22
4387: PUSH
4388: LD_INT 23
4390: PUSH
4391: LD_INT 24
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: ST_TO_ADDR
4400: GO 4617
4402: LD_INT 45
4404: DOUBLE
4405: EQUAL
4406: IFTRUE 4410
4408: GO 4436
4410: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4411: LD_ADDR_VAR 0 3
4415: PUSH
4416: LD_INT 21
4418: PUSH
4419: LD_INT 22
4421: PUSH
4422: LD_INT 23
4424: PUSH
4425: LD_INT 24
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: ST_TO_ADDR
4434: GO 4617
4436: LD_INT 49
4438: DOUBLE
4439: EQUAL
4440: IFTRUE 4444
4442: GO 4470
4444: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: LD_INT 21
4452: PUSH
4453: LD_INT 22
4455: PUSH
4456: LD_INT 23
4458: PUSH
4459: LD_INT 24
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: ST_TO_ADDR
4468: GO 4617
4470: LD_INT 51
4472: DOUBLE
4473: EQUAL
4474: IFTRUE 4478
4476: GO 4504
4478: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4479: LD_ADDR_VAR 0 3
4483: PUSH
4484: LD_INT 21
4486: PUSH
4487: LD_INT 22
4489: PUSH
4490: LD_INT 23
4492: PUSH
4493: LD_INT 24
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: ST_TO_ADDR
4502: GO 4617
4504: LD_INT 52
4506: DOUBLE
4507: EQUAL
4508: IFTRUE 4512
4510: GO 4538
4512: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4513: LD_ADDR_VAR 0 3
4517: PUSH
4518: LD_INT 21
4520: PUSH
4521: LD_INT 22
4523: PUSH
4524: LD_INT 23
4526: PUSH
4527: LD_INT 24
4529: PUSH
4530: EMPTY
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: ST_TO_ADDR
4536: GO 4617
4538: LD_INT 53
4540: DOUBLE
4541: EQUAL
4542: IFTRUE 4546
4544: GO 4564
4546: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4547: LD_ADDR_VAR 0 3
4551: PUSH
4552: LD_INT 23
4554: PUSH
4555: LD_INT 24
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: ST_TO_ADDR
4562: GO 4617
4564: LD_INT 46
4566: DOUBLE
4567: EQUAL
4568: IFTRUE 4572
4570: GO 4590
4572: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4573: LD_ADDR_VAR 0 3
4577: PUSH
4578: LD_INT 23
4580: PUSH
4581: LD_INT 24
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: ST_TO_ADDR
4588: GO 4617
4590: LD_INT 47
4592: DOUBLE
4593: EQUAL
4594: IFTRUE 4598
4596: GO 4616
4598: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4599: LD_ADDR_VAR 0 3
4603: PUSH
4604: LD_INT 23
4606: PUSH
4607: LD_INT 24
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: ST_TO_ADDR
4614: GO 4617
4616: POP
// result := ( chassis in result ) ;
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: LD_VAR 0 1
4626: PUSH
4627: LD_VAR 0 3
4631: IN
4632: ST_TO_ADDR
// end ;
4633: LD_VAR 0 3
4637: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4638: LD_INT 0
4640: PPUSH
4641: PPUSH
4642: PPUSH
4643: PPUSH
4644: PPUSH
4645: PPUSH
4646: PPUSH
// result := array ;
4647: LD_ADDR_VAR 0 5
4651: PUSH
4652: LD_VAR 0 1
4656: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4657: LD_VAR 0 1
4661: NOT
4662: PUSH
4663: LD_VAR 0 2
4667: NOT
4668: OR
4669: PUSH
4670: LD_VAR 0 3
4674: NOT
4675: OR
4676: PUSH
4677: LD_VAR 0 2
4681: PUSH
4682: LD_VAR 0 1
4686: GREATER
4687: OR
4688: PUSH
4689: LD_VAR 0 3
4693: PUSH
4694: LD_VAR 0 1
4698: GREATER
4699: OR
4700: IFFALSE 4704
// exit ;
4702: GO 5000
// if direction then
4704: LD_VAR 0 4
4708: IFFALSE 4772
// begin d := 1 ;
4710: LD_ADDR_VAR 0 9
4714: PUSH
4715: LD_INT 1
4717: ST_TO_ADDR
// if i_from > i_to then
4718: LD_VAR 0 2
4722: PUSH
4723: LD_VAR 0 3
4727: GREATER
4728: IFFALSE 4754
// length := ( array - i_from ) + i_to else
4730: LD_ADDR_VAR 0 11
4734: PUSH
4735: LD_VAR 0 1
4739: PUSH
4740: LD_VAR 0 2
4744: MINUS
4745: PUSH
4746: LD_VAR 0 3
4750: PLUS
4751: ST_TO_ADDR
4752: GO 4770
// length := i_to - i_from ;
4754: LD_ADDR_VAR 0 11
4758: PUSH
4759: LD_VAR 0 3
4763: PUSH
4764: LD_VAR 0 2
4768: MINUS
4769: ST_TO_ADDR
// end else
4770: GO 4833
// begin d := - 1 ;
4772: LD_ADDR_VAR 0 9
4776: PUSH
4777: LD_INT 1
4779: NEG
4780: ST_TO_ADDR
// if i_from > i_to then
4781: LD_VAR 0 2
4785: PUSH
4786: LD_VAR 0 3
4790: GREATER
4791: IFFALSE 4811
// length := i_from - i_to else
4793: LD_ADDR_VAR 0 11
4797: PUSH
4798: LD_VAR 0 2
4802: PUSH
4803: LD_VAR 0 3
4807: MINUS
4808: ST_TO_ADDR
4809: GO 4833
// length := ( array - i_to ) + i_from ;
4811: LD_ADDR_VAR 0 11
4815: PUSH
4816: LD_VAR 0 1
4820: PUSH
4821: LD_VAR 0 3
4825: MINUS
4826: PUSH
4827: LD_VAR 0 2
4831: PLUS
4832: ST_TO_ADDR
// end ; if not length then
4833: LD_VAR 0 11
4837: NOT
4838: IFFALSE 4842
// exit ;
4840: GO 5000
// tmp := array ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_VAR 0 1
4851: ST_TO_ADDR
// for i = 1 to length do
4852: LD_ADDR_VAR 0 6
4856: PUSH
4857: DOUBLE
4858: LD_INT 1
4860: DEC
4861: ST_TO_ADDR
4862: LD_VAR 0 11
4866: PUSH
4867: FOR_TO
4868: IFFALSE 4988
// begin for j = 1 to array do
4870: LD_ADDR_VAR 0 7
4874: PUSH
4875: DOUBLE
4876: LD_INT 1
4878: DEC
4879: ST_TO_ADDR
4880: LD_VAR 0 1
4884: PUSH
4885: FOR_TO
4886: IFFALSE 4974
// begin k := j + d ;
4888: LD_ADDR_VAR 0 8
4892: PUSH
4893: LD_VAR 0 7
4897: PUSH
4898: LD_VAR 0 9
4902: PLUS
4903: ST_TO_ADDR
// if k > array then
4904: LD_VAR 0 8
4908: PUSH
4909: LD_VAR 0 1
4913: GREATER
4914: IFFALSE 4924
// k := 1 ;
4916: LD_ADDR_VAR 0 8
4920: PUSH
4921: LD_INT 1
4923: ST_TO_ADDR
// if not k then
4924: LD_VAR 0 8
4928: NOT
4929: IFFALSE 4941
// k := array ;
4931: LD_ADDR_VAR 0 8
4935: PUSH
4936: LD_VAR 0 1
4940: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
4941: LD_ADDR_VAR 0 10
4945: PUSH
4946: LD_VAR 0 10
4950: PPUSH
4951: LD_VAR 0 8
4955: PPUSH
4956: LD_VAR 0 1
4960: PUSH
4961: LD_VAR 0 7
4965: ARRAY
4966: PPUSH
4967: CALL_OW 1
4971: ST_TO_ADDR
// end ;
4972: GO 4885
4974: POP
4975: POP
// array := tmp ;
4976: LD_ADDR_VAR 0 1
4980: PUSH
4981: LD_VAR 0 10
4985: ST_TO_ADDR
// end ;
4986: GO 4867
4988: POP
4989: POP
// result := array ;
4990: LD_ADDR_VAR 0 5
4994: PUSH
4995: LD_VAR 0 1
4999: ST_TO_ADDR
// end ;
5000: LD_VAR 0 5
5004: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5005: LD_INT 0
5007: PPUSH
5008: PPUSH
// result := 0 ;
5009: LD_ADDR_VAR 0 3
5013: PUSH
5014: LD_INT 0
5016: ST_TO_ADDR
// if not array or not value in array then
5017: LD_VAR 0 1
5021: NOT
5022: PUSH
5023: LD_VAR 0 2
5027: PUSH
5028: LD_VAR 0 1
5032: IN
5033: NOT
5034: OR
5035: IFFALSE 5039
// exit ;
5037: GO 5093
// for i = 1 to array do
5039: LD_ADDR_VAR 0 4
5043: PUSH
5044: DOUBLE
5045: LD_INT 1
5047: DEC
5048: ST_TO_ADDR
5049: LD_VAR 0 1
5053: PUSH
5054: FOR_TO
5055: IFFALSE 5091
// if value = array [ i ] then
5057: LD_VAR 0 2
5061: PUSH
5062: LD_VAR 0 1
5066: PUSH
5067: LD_VAR 0 4
5071: ARRAY
5072: EQUAL
5073: IFFALSE 5089
// begin result := i ;
5075: LD_ADDR_VAR 0 3
5079: PUSH
5080: LD_VAR 0 4
5084: ST_TO_ADDR
// exit ;
5085: POP
5086: POP
5087: GO 5093
// end ;
5089: GO 5054
5091: POP
5092: POP
// end ;
5093: LD_VAR 0 3
5097: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5098: LD_INT 0
5100: PPUSH
// vc_chassis := chassis ;
5101: LD_ADDR_OWVAR 37
5105: PUSH
5106: LD_VAR 0 1
5110: ST_TO_ADDR
// vc_engine := engine ;
5111: LD_ADDR_OWVAR 39
5115: PUSH
5116: LD_VAR 0 2
5120: ST_TO_ADDR
// vc_control := control ;
5121: LD_ADDR_OWVAR 38
5125: PUSH
5126: LD_VAR 0 3
5130: ST_TO_ADDR
// vc_weapon := weapon ;
5131: LD_ADDR_OWVAR 40
5135: PUSH
5136: LD_VAR 0 4
5140: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5141: LD_ADDR_OWVAR 41
5145: PUSH
5146: LD_VAR 0 5
5150: ST_TO_ADDR
// end ;
5151: LD_VAR 0 6
5155: RET
// export function WantPlant ( unit ) ; var task ; begin
5156: LD_INT 0
5158: PPUSH
5159: PPUSH
// result := false ;
5160: LD_ADDR_VAR 0 2
5164: PUSH
5165: LD_INT 0
5167: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5168: LD_ADDR_VAR 0 3
5172: PUSH
5173: LD_VAR 0 1
5177: PPUSH
5178: CALL_OW 437
5182: ST_TO_ADDR
// if task then
5183: LD_VAR 0 3
5187: IFFALSE 5215
// if task [ 1 ] [ 1 ] = p then
5189: LD_VAR 0 3
5193: PUSH
5194: LD_INT 1
5196: ARRAY
5197: PUSH
5198: LD_INT 1
5200: ARRAY
5201: PUSH
5202: LD_STRING p
5204: EQUAL
5205: IFFALSE 5215
// result := true ;
5207: LD_ADDR_VAR 0 2
5211: PUSH
5212: LD_INT 1
5214: ST_TO_ADDR
// end ;
5215: LD_VAR 0 2
5219: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5220: LD_INT 0
5222: PPUSH
5223: PPUSH
5224: PPUSH
5225: PPUSH
// if pos < 1 then
5226: LD_VAR 0 2
5230: PUSH
5231: LD_INT 1
5233: LESS
5234: IFFALSE 5238
// exit ;
5236: GO 5541
// if pos = 1 then
5238: LD_VAR 0 2
5242: PUSH
5243: LD_INT 1
5245: EQUAL
5246: IFFALSE 5279
// result := Replace ( arr , pos [ 1 ] , value ) else
5248: LD_ADDR_VAR 0 4
5252: PUSH
5253: LD_VAR 0 1
5257: PPUSH
5258: LD_VAR 0 2
5262: PUSH
5263: LD_INT 1
5265: ARRAY
5266: PPUSH
5267: LD_VAR 0 3
5271: PPUSH
5272: CALL_OW 1
5276: ST_TO_ADDR
5277: GO 5541
// begin tmp := arr ;
5279: LD_ADDR_VAR 0 6
5283: PUSH
5284: LD_VAR 0 1
5288: ST_TO_ADDR
// s_arr := [ tmp ] ;
5289: LD_ADDR_VAR 0 7
5293: PUSH
5294: LD_VAR 0 6
5298: PUSH
5299: EMPTY
5300: LIST
5301: ST_TO_ADDR
// for i = 1 to pos - 1 do
5302: LD_ADDR_VAR 0 5
5306: PUSH
5307: DOUBLE
5308: LD_INT 1
5310: DEC
5311: ST_TO_ADDR
5312: LD_VAR 0 2
5316: PUSH
5317: LD_INT 1
5319: MINUS
5320: PUSH
5321: FOR_TO
5322: IFFALSE 5367
// begin tmp := tmp [ pos [ i ] ] ;
5324: LD_ADDR_VAR 0 6
5328: PUSH
5329: LD_VAR 0 6
5333: PUSH
5334: LD_VAR 0 2
5338: PUSH
5339: LD_VAR 0 5
5343: ARRAY
5344: ARRAY
5345: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5346: LD_ADDR_VAR 0 7
5350: PUSH
5351: LD_VAR 0 7
5355: PUSH
5356: LD_VAR 0 6
5360: PUSH
5361: EMPTY
5362: LIST
5363: ADD
5364: ST_TO_ADDR
// end ;
5365: GO 5321
5367: POP
5368: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5369: LD_ADDR_VAR 0 6
5373: PUSH
5374: LD_VAR 0 6
5378: PPUSH
5379: LD_VAR 0 2
5383: PUSH
5384: LD_VAR 0 2
5388: ARRAY
5389: PPUSH
5390: LD_VAR 0 3
5394: PPUSH
5395: CALL_OW 1
5399: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5400: LD_ADDR_VAR 0 7
5404: PUSH
5405: LD_VAR 0 7
5409: PPUSH
5410: LD_VAR 0 7
5414: PPUSH
5415: LD_VAR 0 6
5419: PPUSH
5420: CALL_OW 1
5424: ST_TO_ADDR
// for i = s_arr downto 2 do
5425: LD_ADDR_VAR 0 5
5429: PUSH
5430: DOUBLE
5431: LD_VAR 0 7
5435: INC
5436: ST_TO_ADDR
5437: LD_INT 2
5439: PUSH
5440: FOR_DOWNTO
5441: IFFALSE 5525
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5443: LD_ADDR_VAR 0 6
5447: PUSH
5448: LD_VAR 0 7
5452: PUSH
5453: LD_VAR 0 5
5457: PUSH
5458: LD_INT 1
5460: MINUS
5461: ARRAY
5462: PPUSH
5463: LD_VAR 0 2
5467: PUSH
5468: LD_VAR 0 5
5472: PUSH
5473: LD_INT 1
5475: MINUS
5476: ARRAY
5477: PPUSH
5478: LD_VAR 0 7
5482: PUSH
5483: LD_VAR 0 5
5487: ARRAY
5488: PPUSH
5489: CALL_OW 1
5493: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5494: LD_ADDR_VAR 0 7
5498: PUSH
5499: LD_VAR 0 7
5503: PPUSH
5504: LD_VAR 0 5
5508: PUSH
5509: LD_INT 1
5511: MINUS
5512: PPUSH
5513: LD_VAR 0 6
5517: PPUSH
5518: CALL_OW 1
5522: ST_TO_ADDR
// end ;
5523: GO 5440
5525: POP
5526: POP
// result := s_arr [ 1 ] ;
5527: LD_ADDR_VAR 0 4
5531: PUSH
5532: LD_VAR 0 7
5536: PUSH
5537: LD_INT 1
5539: ARRAY
5540: ST_TO_ADDR
// end ; end ;
5541: LD_VAR 0 4
5545: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5546: LD_INT 0
5548: PPUSH
5549: PPUSH
// if not list then
5550: LD_VAR 0 1
5554: NOT
5555: IFFALSE 5559
// exit ;
5557: GO 5650
// i := list [ pos1 ] ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_VAR 0 1
5568: PUSH
5569: LD_VAR 0 2
5573: ARRAY
5574: ST_TO_ADDR
// if not i then
5575: LD_VAR 0 5
5579: NOT
5580: IFFALSE 5584
// exit ;
5582: GO 5650
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5584: LD_ADDR_VAR 0 1
5588: PUSH
5589: LD_VAR 0 1
5593: PPUSH
5594: LD_VAR 0 2
5598: PPUSH
5599: LD_VAR 0 1
5603: PUSH
5604: LD_VAR 0 3
5608: ARRAY
5609: PPUSH
5610: CALL_OW 1
5614: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5615: LD_ADDR_VAR 0 1
5619: PUSH
5620: LD_VAR 0 1
5624: PPUSH
5625: LD_VAR 0 3
5629: PPUSH
5630: LD_VAR 0 5
5634: PPUSH
5635: CALL_OW 1
5639: ST_TO_ADDR
// result := list ;
5640: LD_ADDR_VAR 0 4
5644: PUSH
5645: LD_VAR 0 1
5649: ST_TO_ADDR
// end ;
5650: LD_VAR 0 4
5654: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5655: LD_INT 0
5657: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5658: LD_ADDR_VAR 0 5
5662: PUSH
5663: LD_VAR 0 1
5667: PPUSH
5668: CALL_OW 250
5672: PPUSH
5673: LD_VAR 0 1
5677: PPUSH
5678: CALL_OW 251
5682: PPUSH
5683: LD_VAR 0 2
5687: PPUSH
5688: LD_VAR 0 3
5692: PPUSH
5693: LD_VAR 0 4
5697: PPUSH
5698: CALL 5708 0 5
5702: ST_TO_ADDR
// end ;
5703: LD_VAR 0 5
5707: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
5708: LD_INT 0
5710: PPUSH
5711: PPUSH
5712: PPUSH
5713: PPUSH
// if not list then
5714: LD_VAR 0 3
5718: NOT
5719: IFFALSE 5723
// exit ;
5721: GO 6111
// result := [ ] ;
5723: LD_ADDR_VAR 0 6
5727: PUSH
5728: EMPTY
5729: ST_TO_ADDR
// for i in list do
5730: LD_ADDR_VAR 0 7
5734: PUSH
5735: LD_VAR 0 3
5739: PUSH
5740: FOR_IN
5741: IFFALSE 5943
// begin tmp := GetDistUnitXY ( i , x , y ) ;
5743: LD_ADDR_VAR 0 9
5747: PUSH
5748: LD_VAR 0 7
5752: PPUSH
5753: LD_VAR 0 1
5757: PPUSH
5758: LD_VAR 0 2
5762: PPUSH
5763: CALL_OW 297
5767: ST_TO_ADDR
// if not result then
5768: LD_VAR 0 6
5772: NOT
5773: IFFALSE 5799
// result := [ [ i , tmp ] ] else
5775: LD_ADDR_VAR 0 6
5779: PUSH
5780: LD_VAR 0 7
5784: PUSH
5785: LD_VAR 0 9
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PUSH
5794: EMPTY
5795: LIST
5796: ST_TO_ADDR
5797: GO 5941
// begin if result [ result ] [ 2 ] < tmp then
5799: LD_VAR 0 6
5803: PUSH
5804: LD_VAR 0 6
5808: ARRAY
5809: PUSH
5810: LD_INT 2
5812: ARRAY
5813: PUSH
5814: LD_VAR 0 9
5818: LESS
5819: IFFALSE 5861
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
5821: LD_ADDR_VAR 0 6
5825: PUSH
5826: LD_VAR 0 6
5830: PPUSH
5831: LD_VAR 0 6
5835: PUSH
5836: LD_INT 1
5838: PLUS
5839: PPUSH
5840: LD_VAR 0 7
5844: PUSH
5845: LD_VAR 0 9
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PPUSH
5854: CALL_OW 2
5858: ST_TO_ADDR
5859: GO 5941
// for j = 1 to result do
5861: LD_ADDR_VAR 0 8
5865: PUSH
5866: DOUBLE
5867: LD_INT 1
5869: DEC
5870: ST_TO_ADDR
5871: LD_VAR 0 6
5875: PUSH
5876: FOR_TO
5877: IFFALSE 5939
// begin if tmp < result [ j ] [ 2 ] then
5879: LD_VAR 0 9
5883: PUSH
5884: LD_VAR 0 6
5888: PUSH
5889: LD_VAR 0 8
5893: ARRAY
5894: PUSH
5895: LD_INT 2
5897: ARRAY
5898: LESS
5899: IFFALSE 5937
// begin result := Insert ( result , j , [ i , tmp ] ) ;
5901: LD_ADDR_VAR 0 6
5905: PUSH
5906: LD_VAR 0 6
5910: PPUSH
5911: LD_VAR 0 8
5915: PPUSH
5916: LD_VAR 0 7
5920: PUSH
5921: LD_VAR 0 9
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PPUSH
5930: CALL_OW 2
5934: ST_TO_ADDR
// break ;
5935: GO 5939
// end ; end ;
5937: GO 5876
5939: POP
5940: POP
// end ; end ;
5941: GO 5740
5943: POP
5944: POP
// if result and not asc then
5945: LD_VAR 0 6
5949: PUSH
5950: LD_VAR 0 4
5954: NOT
5955: AND
5956: IFFALSE 6031
// begin tmp := result ;
5958: LD_ADDR_VAR 0 9
5962: PUSH
5963: LD_VAR 0 6
5967: ST_TO_ADDR
// for i = tmp downto 1 do
5968: LD_ADDR_VAR 0 7
5972: PUSH
5973: DOUBLE
5974: LD_VAR 0 9
5978: INC
5979: ST_TO_ADDR
5980: LD_INT 1
5982: PUSH
5983: FOR_DOWNTO
5984: IFFALSE 6029
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
5986: LD_ADDR_VAR 0 6
5990: PUSH
5991: LD_VAR 0 6
5995: PPUSH
5996: LD_VAR 0 9
6000: PUSH
6001: LD_VAR 0 7
6005: MINUS
6006: PUSH
6007: LD_INT 1
6009: PLUS
6010: PPUSH
6011: LD_VAR 0 9
6015: PUSH
6016: LD_VAR 0 7
6020: ARRAY
6021: PPUSH
6022: CALL_OW 1
6026: ST_TO_ADDR
6027: GO 5983
6029: POP
6030: POP
// end ; tmp := [ ] ;
6031: LD_ADDR_VAR 0 9
6035: PUSH
6036: EMPTY
6037: ST_TO_ADDR
// if mode then
6038: LD_VAR 0 5
6042: IFFALSE 6111
// begin for i = 1 to result do
6044: LD_ADDR_VAR 0 7
6048: PUSH
6049: DOUBLE
6050: LD_INT 1
6052: DEC
6053: ST_TO_ADDR
6054: LD_VAR 0 6
6058: PUSH
6059: FOR_TO
6060: IFFALSE 6099
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6062: LD_ADDR_VAR 0 9
6066: PUSH
6067: LD_VAR 0 9
6071: PPUSH
6072: LD_VAR 0 7
6076: PPUSH
6077: LD_VAR 0 6
6081: PUSH
6082: LD_VAR 0 7
6086: ARRAY
6087: PUSH
6088: LD_INT 1
6090: ARRAY
6091: PPUSH
6092: CALL_OW 1
6096: ST_TO_ADDR
6097: GO 6059
6099: POP
6100: POP
// result := tmp ;
6101: LD_ADDR_VAR 0 6
6105: PUSH
6106: LD_VAR 0 9
6110: ST_TO_ADDR
// end ; end ;
6111: LD_VAR 0 6
6115: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6116: LD_INT 0
6118: PPUSH
6119: PPUSH
6120: PPUSH
6121: PPUSH
6122: PPUSH
6123: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6124: LD_ADDR_VAR 0 5
6128: PUSH
6129: LD_INT 0
6131: PUSH
6132: LD_INT 0
6134: PUSH
6135: LD_INT 0
6137: PUSH
6138: EMPTY
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: ST_TO_ADDR
// if not x or not y then
6146: LD_VAR 0 2
6150: NOT
6151: PUSH
6152: LD_VAR 0 3
6156: NOT
6157: OR
6158: IFFALSE 6162
// exit ;
6160: GO 7808
// if not range then
6162: LD_VAR 0 4
6166: NOT
6167: IFFALSE 6177
// range := 10 ;
6169: LD_ADDR_VAR 0 4
6173: PUSH
6174: LD_INT 10
6176: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6177: LD_ADDR_VAR 0 8
6181: PUSH
6182: LD_INT 81
6184: PUSH
6185: LD_VAR 0 1
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 92
6196: PUSH
6197: LD_VAR 0 2
6201: PUSH
6202: LD_VAR 0 3
6206: PUSH
6207: LD_VAR 0 4
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 3
6220: PUSH
6221: LD_INT 21
6223: PUSH
6224: LD_INT 3
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: ST_TO_ADDR
// if not tmp then
6245: LD_VAR 0 8
6249: NOT
6250: IFFALSE 6254
// exit ;
6252: GO 7808
// for i in tmp do
6254: LD_ADDR_VAR 0 6
6258: PUSH
6259: LD_VAR 0 8
6263: PUSH
6264: FOR_IN
6265: IFFALSE 7783
// begin points := [ 0 , 0 , 0 ] ;
6267: LD_ADDR_VAR 0 9
6271: PUSH
6272: LD_INT 0
6274: PUSH
6275: LD_INT 0
6277: PUSH
6278: LD_INT 0
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: LIST
6285: ST_TO_ADDR
// bpoints := 1 ;
6286: LD_ADDR_VAR 0 10
6290: PUSH
6291: LD_INT 1
6293: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6294: LD_VAR 0 6
6298: PPUSH
6299: CALL_OW 247
6303: PUSH
6304: LD_INT 1
6306: DOUBLE
6307: EQUAL
6308: IFTRUE 6312
6310: GO 6890
6312: POP
// begin if GetClass ( i ) = 1 then
6313: LD_VAR 0 6
6317: PPUSH
6318: CALL_OW 257
6322: PUSH
6323: LD_INT 1
6325: EQUAL
6326: IFFALSE 6347
// points := [ 10 , 5 , 3 ] ;
6328: LD_ADDR_VAR 0 9
6332: PUSH
6333: LD_INT 10
6335: PUSH
6336: LD_INT 5
6338: PUSH
6339: LD_INT 3
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6347: LD_VAR 0 6
6351: PPUSH
6352: CALL_OW 257
6356: PUSH
6357: LD_INT 2
6359: PUSH
6360: LD_INT 3
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: LIST
6370: IN
6371: IFFALSE 6392
// points := [ 3 , 2 , 1 ] ;
6373: LD_ADDR_VAR 0 9
6377: PUSH
6378: LD_INT 3
6380: PUSH
6381: LD_INT 2
6383: PUSH
6384: LD_INT 1
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: LIST
6391: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6392: LD_VAR 0 6
6396: PPUSH
6397: CALL_OW 257
6401: PUSH
6402: LD_INT 5
6404: EQUAL
6405: IFFALSE 6426
// points := [ 130 , 5 , 2 ] ;
6407: LD_ADDR_VAR 0 9
6411: PUSH
6412: LD_INT 130
6414: PUSH
6415: LD_INT 5
6417: PUSH
6418: LD_INT 2
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: LIST
6425: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6426: LD_VAR 0 6
6430: PPUSH
6431: CALL_OW 257
6435: PUSH
6436: LD_INT 8
6438: EQUAL
6439: IFFALSE 6460
// points := [ 35 , 35 , 30 ] ;
6441: LD_ADDR_VAR 0 9
6445: PUSH
6446: LD_INT 35
6448: PUSH
6449: LD_INT 35
6451: PUSH
6452: LD_INT 30
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6460: LD_VAR 0 6
6464: PPUSH
6465: CALL_OW 257
6469: PUSH
6470: LD_INT 9
6472: EQUAL
6473: IFFALSE 6494
// points := [ 20 , 55 , 40 ] ;
6475: LD_ADDR_VAR 0 9
6479: PUSH
6480: LD_INT 20
6482: PUSH
6483: LD_INT 55
6485: PUSH
6486: LD_INT 40
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: LIST
6493: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6494: LD_VAR 0 6
6498: PPUSH
6499: CALL_OW 257
6503: PUSH
6504: LD_INT 12
6506: PUSH
6507: LD_INT 16
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: IN
6514: IFFALSE 6535
// points := [ 5 , 3 , 2 ] ;
6516: LD_ADDR_VAR 0 9
6520: PUSH
6521: LD_INT 5
6523: PUSH
6524: LD_INT 3
6526: PUSH
6527: LD_INT 2
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: LIST
6534: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6535: LD_VAR 0 6
6539: PPUSH
6540: CALL_OW 257
6544: PUSH
6545: LD_INT 17
6547: EQUAL
6548: IFFALSE 6569
// points := [ 100 , 50 , 75 ] ;
6550: LD_ADDR_VAR 0 9
6554: PUSH
6555: LD_INT 100
6557: PUSH
6558: LD_INT 50
6560: PUSH
6561: LD_INT 75
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: LIST
6568: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6569: LD_VAR 0 6
6573: PPUSH
6574: CALL_OW 257
6578: PUSH
6579: LD_INT 15
6581: EQUAL
6582: IFFALSE 6603
// points := [ 10 , 5 , 3 ] ;
6584: LD_ADDR_VAR 0 9
6588: PUSH
6589: LD_INT 10
6591: PUSH
6592: LD_INT 5
6594: PUSH
6595: LD_INT 3
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: LIST
6602: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6603: LD_VAR 0 6
6607: PPUSH
6608: CALL_OW 257
6612: PUSH
6613: LD_INT 14
6615: EQUAL
6616: IFFALSE 6637
// points := [ 10 , 0 , 0 ] ;
6618: LD_ADDR_VAR 0 9
6622: PUSH
6623: LD_INT 10
6625: PUSH
6626: LD_INT 0
6628: PUSH
6629: LD_INT 0
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6637: LD_VAR 0 6
6641: PPUSH
6642: CALL_OW 257
6646: PUSH
6647: LD_INT 11
6649: EQUAL
6650: IFFALSE 6671
// points := [ 30 , 10 , 5 ] ;
6652: LD_ADDR_VAR 0 9
6656: PUSH
6657: LD_INT 30
6659: PUSH
6660: LD_INT 10
6662: PUSH
6663: LD_INT 5
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6671: LD_VAR 0 1
6675: PPUSH
6676: LD_INT 5
6678: PPUSH
6679: CALL_OW 321
6683: PUSH
6684: LD_INT 2
6686: EQUAL
6687: IFFALSE 6704
// bpoints := bpoints * 1.8 ;
6689: LD_ADDR_VAR 0 10
6693: PUSH
6694: LD_VAR 0 10
6698: PUSH
6699: LD_REAL  1.80000000000000E+0000
6702: MUL
6703: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
6704: LD_VAR 0 6
6708: PPUSH
6709: CALL_OW 257
6713: PUSH
6714: LD_INT 1
6716: PUSH
6717: LD_INT 2
6719: PUSH
6720: LD_INT 3
6722: PUSH
6723: LD_INT 4
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: IN
6732: PUSH
6733: LD_VAR 0 1
6737: PPUSH
6738: LD_INT 51
6740: PPUSH
6741: CALL_OW 321
6745: PUSH
6746: LD_INT 2
6748: EQUAL
6749: AND
6750: IFFALSE 6767
// bpoints := bpoints * 1.2 ;
6752: LD_ADDR_VAR 0 10
6756: PUSH
6757: LD_VAR 0 10
6761: PUSH
6762: LD_REAL  1.20000000000000E+0000
6765: MUL
6766: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
6767: LD_VAR 0 6
6771: PPUSH
6772: CALL_OW 257
6776: PUSH
6777: LD_INT 5
6779: PUSH
6780: LD_INT 7
6782: PUSH
6783: LD_INT 9
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: IN
6791: PUSH
6792: LD_VAR 0 1
6796: PPUSH
6797: LD_INT 52
6799: PPUSH
6800: CALL_OW 321
6804: PUSH
6805: LD_INT 2
6807: EQUAL
6808: AND
6809: IFFALSE 6826
// bpoints := bpoints * 1.5 ;
6811: LD_ADDR_VAR 0 10
6815: PUSH
6816: LD_VAR 0 10
6820: PUSH
6821: LD_REAL  1.50000000000000E+0000
6824: MUL
6825: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
6826: LD_VAR 0 1
6830: PPUSH
6831: LD_INT 66
6833: PPUSH
6834: CALL_OW 321
6838: PUSH
6839: LD_INT 2
6841: EQUAL
6842: IFFALSE 6859
// bpoints := bpoints * 1.1 ;
6844: LD_ADDR_VAR 0 10
6848: PUSH
6849: LD_VAR 0 10
6853: PUSH
6854: LD_REAL  1.10000000000000E+0000
6857: MUL
6858: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
6859: LD_ADDR_VAR 0 10
6863: PUSH
6864: LD_VAR 0 10
6868: PUSH
6869: LD_VAR 0 6
6873: PPUSH
6874: LD_INT 1
6876: PPUSH
6877: CALL_OW 259
6881: PUSH
6882: LD_REAL  1.15000000000000E+0000
6885: MUL
6886: MUL
6887: ST_TO_ADDR
// end ; unit_vehicle :
6888: GO 7712
6890: LD_INT 2
6892: DOUBLE
6893: EQUAL
6894: IFTRUE 6898
6896: GO 7700
6898: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
6899: LD_VAR 0 6
6903: PPUSH
6904: CALL_OW 264
6908: PUSH
6909: LD_INT 2
6911: PUSH
6912: LD_INT 42
6914: PUSH
6915: LD_INT 24
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: LIST
6922: IN
6923: IFFALSE 6944
// points := [ 25 , 5 , 3 ] ;
6925: LD_ADDR_VAR 0 9
6929: PUSH
6930: LD_INT 25
6932: PUSH
6933: LD_INT 5
6935: PUSH
6936: LD_INT 3
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: LIST
6943: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
6944: LD_VAR 0 6
6948: PPUSH
6949: CALL_OW 264
6953: PUSH
6954: LD_INT 4
6956: PUSH
6957: LD_INT 43
6959: PUSH
6960: LD_INT 25
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: LIST
6967: IN
6968: IFFALSE 6989
// points := [ 40 , 15 , 5 ] ;
6970: LD_ADDR_VAR 0 9
6974: PUSH
6975: LD_INT 40
6977: PUSH
6978: LD_INT 15
6980: PUSH
6981: LD_INT 5
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: LIST
6988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
6989: LD_VAR 0 6
6993: PPUSH
6994: CALL_OW 264
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: LD_INT 23
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: IN
7009: IFFALSE 7030
// points := [ 7 , 25 , 8 ] ;
7011: LD_ADDR_VAR 0 9
7015: PUSH
7016: LD_INT 7
7018: PUSH
7019: LD_INT 25
7021: PUSH
7022: LD_INT 8
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7030: LD_VAR 0 6
7034: PPUSH
7035: CALL_OW 264
7039: PUSH
7040: LD_INT 5
7042: PUSH
7043: LD_INT 27
7045: PUSH
7046: LD_INT 44
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: IN
7054: IFFALSE 7075
// points := [ 14 , 50 , 16 ] ;
7056: LD_ADDR_VAR 0 9
7060: PUSH
7061: LD_INT 14
7063: PUSH
7064: LD_INT 50
7066: PUSH
7067: LD_INT 16
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: LIST
7074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7075: LD_VAR 0 6
7079: PPUSH
7080: CALL_OW 264
7084: PUSH
7085: LD_INT 6
7087: PUSH
7088: LD_INT 46
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: IN
7095: IFFALSE 7116
// points := [ 32 , 120 , 70 ] ;
7097: LD_ADDR_VAR 0 9
7101: PUSH
7102: LD_INT 32
7104: PUSH
7105: LD_INT 120
7107: PUSH
7108: LD_INT 70
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: LIST
7115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
7116: LD_VAR 0 6
7120: PPUSH
7121: CALL_OW 264
7125: PUSH
7126: LD_INT 7
7128: PUSH
7129: LD_INT 28
7131: PUSH
7132: LD_INT 45
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: LIST
7139: IN
7140: IFFALSE 7161
// points := [ 35 , 20 , 45 ] ;
7142: LD_ADDR_VAR 0 9
7146: PUSH
7147: LD_INT 35
7149: PUSH
7150: LD_INT 20
7152: PUSH
7153: LD_INT 45
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: LIST
7160: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7161: LD_VAR 0 6
7165: PPUSH
7166: CALL_OW 264
7170: PUSH
7171: LD_INT 47
7173: PUSH
7174: EMPTY
7175: LIST
7176: IN
7177: IFFALSE 7198
// points := [ 67 , 45 , 75 ] ;
7179: LD_ADDR_VAR 0 9
7183: PUSH
7184: LD_INT 67
7186: PUSH
7187: LD_INT 45
7189: PUSH
7190: LD_INT 75
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7198: LD_VAR 0 6
7202: PPUSH
7203: CALL_OW 264
7207: PUSH
7208: LD_INT 26
7210: PUSH
7211: EMPTY
7212: LIST
7213: IN
7214: IFFALSE 7235
// points := [ 120 , 30 , 80 ] ;
7216: LD_ADDR_VAR 0 9
7220: PUSH
7221: LD_INT 120
7223: PUSH
7224: LD_INT 30
7226: PUSH
7227: LD_INT 80
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: LIST
7234: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7235: LD_VAR 0 6
7239: PPUSH
7240: CALL_OW 264
7244: PUSH
7245: LD_INT 22
7247: PUSH
7248: EMPTY
7249: LIST
7250: IN
7251: IFFALSE 7272
// points := [ 40 , 1 , 1 ] ;
7253: LD_ADDR_VAR 0 9
7257: PUSH
7258: LD_INT 40
7260: PUSH
7261: LD_INT 1
7263: PUSH
7264: LD_INT 1
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: LIST
7271: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7272: LD_VAR 0 6
7276: PPUSH
7277: CALL_OW 264
7281: PUSH
7282: LD_INT 29
7284: PUSH
7285: EMPTY
7286: LIST
7287: IN
7288: IFFALSE 7309
// points := [ 70 , 200 , 400 ] ;
7290: LD_ADDR_VAR 0 9
7294: PUSH
7295: LD_INT 70
7297: PUSH
7298: LD_INT 200
7300: PUSH
7301: LD_INT 400
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7309: LD_VAR 0 6
7313: PPUSH
7314: CALL_OW 264
7318: PUSH
7319: LD_INT 14
7321: PUSH
7322: LD_INT 53
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: IN
7329: IFFALSE 7350
// points := [ 40 , 10 , 20 ] ;
7331: LD_ADDR_VAR 0 9
7335: PUSH
7336: LD_INT 40
7338: PUSH
7339: LD_INT 10
7341: PUSH
7342: LD_INT 20
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: LIST
7349: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7350: LD_VAR 0 6
7354: PPUSH
7355: CALL_OW 264
7359: PUSH
7360: LD_INT 9
7362: PUSH
7363: EMPTY
7364: LIST
7365: IN
7366: IFFALSE 7387
// points := [ 5 , 70 , 20 ] ;
7368: LD_ADDR_VAR 0 9
7372: PUSH
7373: LD_INT 5
7375: PUSH
7376: LD_INT 70
7378: PUSH
7379: LD_INT 20
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: LIST
7386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7387: LD_VAR 0 6
7391: PPUSH
7392: CALL_OW 264
7396: PUSH
7397: LD_INT 10
7399: PUSH
7400: EMPTY
7401: LIST
7402: IN
7403: IFFALSE 7424
// points := [ 35 , 110 , 70 ] ;
7405: LD_ADDR_VAR 0 9
7409: PUSH
7410: LD_INT 35
7412: PUSH
7413: LD_INT 110
7415: PUSH
7416: LD_INT 70
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: LIST
7423: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7424: LD_VAR 0 6
7428: PPUSH
7429: CALL_OW 265
7433: PUSH
7434: LD_INT 25
7436: EQUAL
7437: IFFALSE 7458
// points := [ 80 , 65 , 100 ] ;
7439: LD_ADDR_VAR 0 9
7443: PUSH
7444: LD_INT 80
7446: PUSH
7447: LD_INT 65
7449: PUSH
7450: LD_INT 100
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: LIST
7457: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7458: LD_VAR 0 6
7462: PPUSH
7463: CALL_OW 263
7467: PUSH
7468: LD_INT 1
7470: EQUAL
7471: IFFALSE 7506
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7473: LD_ADDR_VAR 0 10
7477: PUSH
7478: LD_VAR 0 10
7482: PUSH
7483: LD_VAR 0 6
7487: PPUSH
7488: CALL_OW 311
7492: PPUSH
7493: LD_INT 3
7495: PPUSH
7496: CALL_OW 259
7500: PUSH
7501: LD_INT 4
7503: MUL
7504: MUL
7505: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7506: LD_VAR 0 6
7510: PPUSH
7511: CALL_OW 263
7515: PUSH
7516: LD_INT 2
7518: EQUAL
7519: IFFALSE 7570
// begin j := IsControledBy ( i ) ;
7521: LD_ADDR_VAR 0 7
7525: PUSH
7526: LD_VAR 0 6
7530: PPUSH
7531: CALL_OW 312
7535: ST_TO_ADDR
// if j then
7536: LD_VAR 0 7
7540: IFFALSE 7570
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7542: LD_ADDR_VAR 0 10
7546: PUSH
7547: LD_VAR 0 10
7551: PUSH
7552: LD_VAR 0 7
7556: PPUSH
7557: LD_INT 3
7559: PPUSH
7560: CALL_OW 259
7564: PUSH
7565: LD_INT 3
7567: MUL
7568: MUL
7569: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7570: LD_VAR 0 6
7574: PPUSH
7575: CALL_OW 264
7579: PUSH
7580: LD_INT 5
7582: PUSH
7583: LD_INT 6
7585: PUSH
7586: LD_INT 46
7588: PUSH
7589: LD_INT 44
7591: PUSH
7592: LD_INT 47
7594: PUSH
7595: LD_INT 45
7597: PUSH
7598: LD_INT 28
7600: PUSH
7601: LD_INT 7
7603: PUSH
7604: LD_INT 27
7606: PUSH
7607: LD_INT 29
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: IN
7622: PUSH
7623: LD_VAR 0 1
7627: PPUSH
7628: LD_INT 52
7630: PPUSH
7631: CALL_OW 321
7635: PUSH
7636: LD_INT 2
7638: EQUAL
7639: AND
7640: IFFALSE 7657
// bpoints := bpoints * 1.2 ;
7642: LD_ADDR_VAR 0 10
7646: PUSH
7647: LD_VAR 0 10
7651: PUSH
7652: LD_REAL  1.20000000000000E+0000
7655: MUL
7656: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7657: LD_VAR 0 6
7661: PPUSH
7662: CALL_OW 264
7666: PUSH
7667: LD_INT 6
7669: PUSH
7670: LD_INT 46
7672: PUSH
7673: LD_INT 47
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: LIST
7680: IN
7681: IFFALSE 7698
// bpoints := bpoints * 1.2 ;
7683: LD_ADDR_VAR 0 10
7687: PUSH
7688: LD_VAR 0 10
7692: PUSH
7693: LD_REAL  1.20000000000000E+0000
7696: MUL
7697: ST_TO_ADDR
// end ; unit_building :
7698: GO 7712
7700: LD_INT 3
7702: DOUBLE
7703: EQUAL
7704: IFTRUE 7708
7706: GO 7711
7708: POP
// ; end ;
7709: GO 7712
7711: POP
// for j = 1 to 3 do
7712: LD_ADDR_VAR 0 7
7716: PUSH
7717: DOUBLE
7718: LD_INT 1
7720: DEC
7721: ST_TO_ADDR
7722: LD_INT 3
7724: PUSH
7725: FOR_TO
7726: IFFALSE 7779
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
7728: LD_ADDR_VAR 0 5
7732: PUSH
7733: LD_VAR 0 5
7737: PPUSH
7738: LD_VAR 0 7
7742: PPUSH
7743: LD_VAR 0 5
7747: PUSH
7748: LD_VAR 0 7
7752: ARRAY
7753: PUSH
7754: LD_VAR 0 9
7758: PUSH
7759: LD_VAR 0 7
7763: ARRAY
7764: PUSH
7765: LD_VAR 0 10
7769: MUL
7770: PLUS
7771: PPUSH
7772: CALL_OW 1
7776: ST_TO_ADDR
7777: GO 7725
7779: POP
7780: POP
// end ;
7781: GO 6264
7783: POP
7784: POP
// result := Replace ( result , 4 , tmp ) ;
7785: LD_ADDR_VAR 0 5
7789: PUSH
7790: LD_VAR 0 5
7794: PPUSH
7795: LD_INT 4
7797: PPUSH
7798: LD_VAR 0 8
7802: PPUSH
7803: CALL_OW 1
7807: ST_TO_ADDR
// end ;
7808: LD_VAR 0 5
7812: RET
// export function DangerAtRange ( unit , range ) ; begin
7813: LD_INT 0
7815: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
7816: LD_ADDR_VAR 0 3
7820: PUSH
7821: LD_VAR 0 1
7825: PPUSH
7826: CALL_OW 255
7830: PPUSH
7831: LD_VAR 0 1
7835: PPUSH
7836: CALL_OW 250
7840: PPUSH
7841: LD_VAR 0 1
7845: PPUSH
7846: CALL_OW 251
7850: PPUSH
7851: LD_VAR 0 2
7855: PPUSH
7856: CALL 6116 0 4
7860: ST_TO_ADDR
// end ;
7861: LD_VAR 0 3
7865: RET
// export function DangerInArea ( side , area ) ; begin
7866: LD_INT 0
7868: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7869: LD_ADDR_VAR 0 3
7873: PUSH
7874: LD_VAR 0 2
7878: PPUSH
7879: LD_INT 81
7881: PUSH
7882: LD_VAR 0 1
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PPUSH
7891: CALL_OW 70
7895: ST_TO_ADDR
// end ;
7896: LD_VAR 0 3
7900: RET
// export function IsExtension ( b ) ; begin
7901: LD_INT 0
7903: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
7904: LD_ADDR_VAR 0 2
7908: PUSH
7909: LD_VAR 0 1
7913: PUSH
7914: LD_INT 23
7916: PUSH
7917: LD_INT 20
7919: PUSH
7920: LD_INT 22
7922: PUSH
7923: LD_INT 17
7925: PUSH
7926: LD_INT 24
7928: PUSH
7929: LD_INT 21
7931: PUSH
7932: LD_INT 19
7934: PUSH
7935: LD_INT 16
7937: PUSH
7938: LD_INT 25
7940: PUSH
7941: LD_INT 18
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: IN
7956: ST_TO_ADDR
// end ;
7957: LD_VAR 0 2
7961: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
7966: PPUSH
// result := [ ] ;
7967: LD_ADDR_VAR 0 4
7971: PUSH
7972: EMPTY
7973: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
7974: LD_ADDR_VAR 0 5
7978: PUSH
7979: LD_VAR 0 2
7983: PPUSH
7984: LD_INT 21
7986: PUSH
7987: LD_INT 3
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PPUSH
7994: CALL_OW 70
7998: ST_TO_ADDR
// if not tmp then
7999: LD_VAR 0 5
8003: NOT
8004: IFFALSE 8008
// exit ;
8006: GO 8072
// if checkLink then
8008: LD_VAR 0 3
8012: IFFALSE 8062
// begin for i in tmp do
8014: LD_ADDR_VAR 0 6
8018: PUSH
8019: LD_VAR 0 5
8023: PUSH
8024: FOR_IN
8025: IFFALSE 8060
// if GetBase ( i ) <> base then
8027: LD_VAR 0 6
8031: PPUSH
8032: CALL_OW 274
8036: PUSH
8037: LD_VAR 0 1
8041: NONEQUAL
8042: IFFALSE 8058
// ComLinkToBase ( base , i ) ;
8044: LD_VAR 0 1
8048: PPUSH
8049: LD_VAR 0 6
8053: PPUSH
8054: CALL_OW 169
8058: GO 8024
8060: POP
8061: POP
// end ; result := tmp ;
8062: LD_ADDR_VAR 0 4
8066: PUSH
8067: LD_VAR 0 5
8071: ST_TO_ADDR
// end ;
8072: LD_VAR 0 4
8076: RET
// export function ComComplete ( units , b ) ; var i ; begin
8077: LD_INT 0
8079: PPUSH
8080: PPUSH
// if not units then
8081: LD_VAR 0 1
8085: NOT
8086: IFFALSE 8090
// exit ;
8088: GO 8180
// for i in units do
8090: LD_ADDR_VAR 0 4
8094: PUSH
8095: LD_VAR 0 1
8099: PUSH
8100: FOR_IN
8101: IFFALSE 8178
// if BuildingStatus ( b ) = bs_build then
8103: LD_VAR 0 2
8107: PPUSH
8108: CALL_OW 461
8112: PUSH
8113: LD_INT 1
8115: EQUAL
8116: IFFALSE 8176
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8118: LD_VAR 0 4
8122: PPUSH
8123: LD_STRING h
8125: PUSH
8126: LD_VAR 0 2
8130: PPUSH
8131: CALL_OW 250
8135: PUSH
8136: LD_VAR 0 2
8140: PPUSH
8141: CALL_OW 251
8145: PUSH
8146: LD_VAR 0 2
8150: PUSH
8151: LD_INT 0
8153: PUSH
8154: LD_INT 0
8156: PUSH
8157: LD_INT 0
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: PUSH
8169: EMPTY
8170: LIST
8171: PPUSH
8172: CALL_OW 446
8176: GO 8100
8178: POP
8179: POP
// end ;
8180: LD_VAR 0 3
8184: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8185: LD_INT 0
8187: PPUSH
8188: PPUSH
8189: PPUSH
8190: PPUSH
8191: PPUSH
8192: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
8193: LD_VAR 0 1
8197: NOT
8198: PUSH
8199: LD_VAR 0 1
8203: PPUSH
8204: CALL_OW 263
8208: PUSH
8209: LD_INT 2
8211: EQUAL
8212: NOT
8213: OR
8214: IFFALSE 8218
// exit ;
8216: GO 8534
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8218: LD_ADDR_VAR 0 6
8222: PUSH
8223: LD_INT 22
8225: PUSH
8226: LD_VAR 0 1
8230: PPUSH
8231: CALL_OW 255
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PUSH
8240: LD_INT 2
8242: PUSH
8243: LD_INT 30
8245: PUSH
8246: LD_INT 36
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: PUSH
8253: LD_INT 34
8255: PUSH
8256: LD_INT 31
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: LIST
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PPUSH
8272: CALL_OW 69
8276: ST_TO_ADDR
// if not tmp then
8277: LD_VAR 0 6
8281: NOT
8282: IFFALSE 8286
// exit ;
8284: GO 8534
// result := [ ] ;
8286: LD_ADDR_VAR 0 2
8290: PUSH
8291: EMPTY
8292: ST_TO_ADDR
// for i in tmp do
8293: LD_ADDR_VAR 0 3
8297: PUSH
8298: LD_VAR 0 6
8302: PUSH
8303: FOR_IN
8304: IFFALSE 8375
// begin t := UnitsInside ( i ) ;
8306: LD_ADDR_VAR 0 4
8310: PUSH
8311: LD_VAR 0 3
8315: PPUSH
8316: CALL_OW 313
8320: ST_TO_ADDR
// if t then
8321: LD_VAR 0 4
8325: IFFALSE 8373
// for j in t do
8327: LD_ADDR_VAR 0 7
8331: PUSH
8332: LD_VAR 0 4
8336: PUSH
8337: FOR_IN
8338: IFFALSE 8371
// result := Insert ( result , result + 1 , j ) ;
8340: LD_ADDR_VAR 0 2
8344: PUSH
8345: LD_VAR 0 2
8349: PPUSH
8350: LD_VAR 0 2
8354: PUSH
8355: LD_INT 1
8357: PLUS
8358: PPUSH
8359: LD_VAR 0 7
8363: PPUSH
8364: CALL_OW 2
8368: ST_TO_ADDR
8369: GO 8337
8371: POP
8372: POP
// end ;
8373: GO 8303
8375: POP
8376: POP
// if not result then
8377: LD_VAR 0 2
8381: NOT
8382: IFFALSE 8386
// exit ;
8384: GO 8534
// mech := result [ 1 ] ;
8386: LD_ADDR_VAR 0 5
8390: PUSH
8391: LD_VAR 0 2
8395: PUSH
8396: LD_INT 1
8398: ARRAY
8399: ST_TO_ADDR
// if result > 1 then
8400: LD_VAR 0 2
8404: PUSH
8405: LD_INT 1
8407: GREATER
8408: IFFALSE 8520
// for i = 2 to result do
8410: LD_ADDR_VAR 0 3
8414: PUSH
8415: DOUBLE
8416: LD_INT 2
8418: DEC
8419: ST_TO_ADDR
8420: LD_VAR 0 2
8424: PUSH
8425: FOR_TO
8426: IFFALSE 8518
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8428: LD_ADDR_VAR 0 4
8432: PUSH
8433: LD_VAR 0 2
8437: PUSH
8438: LD_VAR 0 3
8442: ARRAY
8443: PPUSH
8444: LD_INT 3
8446: PPUSH
8447: CALL_OW 259
8451: PUSH
8452: LD_VAR 0 2
8456: PUSH
8457: LD_VAR 0 3
8461: ARRAY
8462: PPUSH
8463: CALL_OW 432
8467: MINUS
8468: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8469: LD_VAR 0 4
8473: PUSH
8474: LD_VAR 0 5
8478: PPUSH
8479: LD_INT 3
8481: PPUSH
8482: CALL_OW 259
8486: PUSH
8487: LD_VAR 0 5
8491: PPUSH
8492: CALL_OW 432
8496: MINUS
8497: GREATEREQUAL
8498: IFFALSE 8516
// mech := result [ i ] ;
8500: LD_ADDR_VAR 0 5
8504: PUSH
8505: LD_VAR 0 2
8509: PUSH
8510: LD_VAR 0 3
8514: ARRAY
8515: ST_TO_ADDR
// end ;
8516: GO 8425
8518: POP
8519: POP
// ComLinkTo ( vehicle , mech ) ;
8520: LD_VAR 0 1
8524: PPUSH
8525: LD_VAR 0 5
8529: PPUSH
8530: CALL_OW 135
// end ;
8534: LD_VAR 0 2
8538: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8539: LD_INT 0
8541: PPUSH
8542: PPUSH
8543: PPUSH
8544: PPUSH
8545: PPUSH
8546: PPUSH
8547: PPUSH
8548: PPUSH
8549: PPUSH
8550: PPUSH
8551: PPUSH
8552: PPUSH
8553: PPUSH
// result := [ ] ;
8554: LD_ADDR_VAR 0 7
8558: PUSH
8559: EMPTY
8560: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8561: LD_VAR 0 1
8565: PPUSH
8566: CALL_OW 266
8570: PUSH
8571: LD_INT 0
8573: PUSH
8574: LD_INT 1
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: IN
8581: NOT
8582: IFFALSE 8586
// exit ;
8584: GO 10220
// if name then
8586: LD_VAR 0 3
8590: IFFALSE 8606
// SetBName ( base_dep , name ) ;
8592: LD_VAR 0 1
8596: PPUSH
8597: LD_VAR 0 3
8601: PPUSH
8602: CALL_OW 500
// base := GetBase ( base_dep ) ;
8606: LD_ADDR_VAR 0 15
8610: PUSH
8611: LD_VAR 0 1
8615: PPUSH
8616: CALL_OW 274
8620: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8621: LD_ADDR_VAR 0 16
8625: PUSH
8626: LD_VAR 0 1
8630: PPUSH
8631: CALL_OW 255
8635: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8636: LD_ADDR_VAR 0 17
8640: PUSH
8641: LD_VAR 0 1
8645: PPUSH
8646: CALL_OW 248
8650: ST_TO_ADDR
// if sources then
8651: LD_VAR 0 5
8655: IFFALSE 8702
// for i = 1 to 3 do
8657: LD_ADDR_VAR 0 8
8661: PUSH
8662: DOUBLE
8663: LD_INT 1
8665: DEC
8666: ST_TO_ADDR
8667: LD_INT 3
8669: PUSH
8670: FOR_TO
8671: IFFALSE 8700
// AddResourceType ( base , i , sources [ i ] ) ;
8673: LD_VAR 0 15
8677: PPUSH
8678: LD_VAR 0 8
8682: PPUSH
8683: LD_VAR 0 5
8687: PUSH
8688: LD_VAR 0 8
8692: ARRAY
8693: PPUSH
8694: CALL_OW 276
8698: GO 8670
8700: POP
8701: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
8702: LD_ADDR_VAR 0 18
8706: PUSH
8707: LD_VAR 0 15
8711: PPUSH
8712: LD_VAR 0 2
8716: PPUSH
8717: LD_INT 1
8719: PPUSH
8720: CALL 7962 0 3
8724: ST_TO_ADDR
// InitHc ;
8725: CALL_OW 19
// InitUc ;
8729: CALL_OW 18
// uc_side := side ;
8733: LD_ADDR_OWVAR 20
8737: PUSH
8738: LD_VAR 0 16
8742: ST_TO_ADDR
// uc_nation := nation ;
8743: LD_ADDR_OWVAR 21
8747: PUSH
8748: LD_VAR 0 17
8752: ST_TO_ADDR
// if buildings then
8753: LD_VAR 0 18
8757: IFFALSE 10079
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
8759: LD_ADDR_VAR 0 19
8763: PUSH
8764: LD_VAR 0 18
8768: PPUSH
8769: LD_INT 2
8771: PUSH
8772: LD_INT 30
8774: PUSH
8775: LD_INT 29
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 30
8784: PUSH
8785: LD_INT 30
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: LIST
8796: PPUSH
8797: CALL_OW 72
8801: ST_TO_ADDR
// if tmp then
8802: LD_VAR 0 19
8806: IFFALSE 8854
// for i in tmp do
8808: LD_ADDR_VAR 0 8
8812: PUSH
8813: LD_VAR 0 19
8817: PUSH
8818: FOR_IN
8819: IFFALSE 8852
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
8821: LD_VAR 0 8
8825: PPUSH
8826: CALL_OW 250
8830: PPUSH
8831: LD_VAR 0 8
8835: PPUSH
8836: CALL_OW 251
8840: PPUSH
8841: LD_VAR 0 16
8845: PPUSH
8846: CALL_OW 441
8850: GO 8818
8852: POP
8853: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
8854: LD_VAR 0 18
8858: PPUSH
8859: LD_INT 2
8861: PUSH
8862: LD_INT 30
8864: PUSH
8865: LD_INT 32
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 30
8874: PUSH
8875: LD_INT 33
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: LIST
8886: PPUSH
8887: CALL_OW 72
8891: IFFALSE 8979
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
8893: LD_ADDR_VAR 0 8
8897: PUSH
8898: LD_VAR 0 18
8902: PPUSH
8903: LD_INT 2
8905: PUSH
8906: LD_INT 30
8908: PUSH
8909: LD_INT 32
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: LD_INT 30
8918: PUSH
8919: LD_INT 33
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: LIST
8930: PPUSH
8931: CALL_OW 72
8935: PUSH
8936: FOR_IN
8937: IFFALSE 8977
// begin if not GetBWeapon ( i ) then
8939: LD_VAR 0 8
8943: PPUSH
8944: CALL_OW 269
8948: NOT
8949: IFFALSE 8975
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
8951: LD_VAR 0 8
8955: PPUSH
8956: LD_VAR 0 8
8960: PPUSH
8961: LD_VAR 0 2
8965: PPUSH
8966: CALL 10225 0 2
8970: PPUSH
8971: CALL_OW 431
// end ;
8975: GO 8936
8977: POP
8978: POP
// end ; for i = 1 to personel do
8979: LD_ADDR_VAR 0 8
8983: PUSH
8984: DOUBLE
8985: LD_INT 1
8987: DEC
8988: ST_TO_ADDR
8989: LD_VAR 0 6
8993: PUSH
8994: FOR_TO
8995: IFFALSE 10059
// begin if i > 4 then
8997: LD_VAR 0 8
9001: PUSH
9002: LD_INT 4
9004: GREATER
9005: IFFALSE 9009
// break ;
9007: GO 10059
// case i of 1 :
9009: LD_VAR 0 8
9013: PUSH
9014: LD_INT 1
9016: DOUBLE
9017: EQUAL
9018: IFTRUE 9022
9020: GO 9102
9022: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9023: LD_ADDR_VAR 0 12
9027: PUSH
9028: LD_VAR 0 18
9032: PPUSH
9033: LD_INT 22
9035: PUSH
9036: LD_VAR 0 16
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PUSH
9045: LD_INT 58
9047: PUSH
9048: EMPTY
9049: LIST
9050: PUSH
9051: LD_INT 2
9053: PUSH
9054: LD_INT 30
9056: PUSH
9057: LD_INT 32
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PUSH
9064: LD_INT 30
9066: PUSH
9067: LD_INT 4
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PUSH
9074: LD_INT 30
9076: PUSH
9077: LD_INT 5
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: LIST
9094: PPUSH
9095: CALL_OW 72
9099: ST_TO_ADDR
9100: GO 9324
9102: LD_INT 2
9104: DOUBLE
9105: EQUAL
9106: IFTRUE 9110
9108: GO 9172
9110: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9111: LD_ADDR_VAR 0 12
9115: PUSH
9116: LD_VAR 0 18
9120: PPUSH
9121: LD_INT 22
9123: PUSH
9124: LD_VAR 0 16
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 2
9135: PUSH
9136: LD_INT 30
9138: PUSH
9139: LD_INT 0
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PUSH
9146: LD_INT 30
9148: PUSH
9149: LD_INT 1
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 72
9169: ST_TO_ADDR
9170: GO 9324
9172: LD_INT 3
9174: DOUBLE
9175: EQUAL
9176: IFTRUE 9180
9178: GO 9242
9180: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9181: LD_ADDR_VAR 0 12
9185: PUSH
9186: LD_VAR 0 18
9190: PPUSH
9191: LD_INT 22
9193: PUSH
9194: LD_VAR 0 16
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PUSH
9203: LD_INT 2
9205: PUSH
9206: LD_INT 30
9208: PUSH
9209: LD_INT 2
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 30
9218: PUSH
9219: LD_INT 3
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PPUSH
9235: CALL_OW 72
9239: ST_TO_ADDR
9240: GO 9324
9242: LD_INT 4
9244: DOUBLE
9245: EQUAL
9246: IFTRUE 9250
9248: GO 9323
9250: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9251: LD_ADDR_VAR 0 12
9255: PUSH
9256: LD_VAR 0 18
9260: PPUSH
9261: LD_INT 22
9263: PUSH
9264: LD_VAR 0 16
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: PUSH
9273: LD_INT 2
9275: PUSH
9276: LD_INT 30
9278: PUSH
9279: LD_INT 6
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: PUSH
9286: LD_INT 30
9288: PUSH
9289: LD_INT 7
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 30
9298: PUSH
9299: LD_INT 8
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: PPUSH
9316: CALL_OW 72
9320: ST_TO_ADDR
9321: GO 9324
9323: POP
// if i = 1 then
9324: LD_VAR 0 8
9328: PUSH
9329: LD_INT 1
9331: EQUAL
9332: IFFALSE 9443
// begin tmp := [ ] ;
9334: LD_ADDR_VAR 0 19
9338: PUSH
9339: EMPTY
9340: ST_TO_ADDR
// for j in f do
9341: LD_ADDR_VAR 0 9
9345: PUSH
9346: LD_VAR 0 12
9350: PUSH
9351: FOR_IN
9352: IFFALSE 9425
// if GetBType ( j ) = b_bunker then
9354: LD_VAR 0 9
9358: PPUSH
9359: CALL_OW 266
9363: PUSH
9364: LD_INT 32
9366: EQUAL
9367: IFFALSE 9394
// tmp := Insert ( tmp , 1 , j ) else
9369: LD_ADDR_VAR 0 19
9373: PUSH
9374: LD_VAR 0 19
9378: PPUSH
9379: LD_INT 1
9381: PPUSH
9382: LD_VAR 0 9
9386: PPUSH
9387: CALL_OW 2
9391: ST_TO_ADDR
9392: GO 9423
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9394: LD_ADDR_VAR 0 19
9398: PUSH
9399: LD_VAR 0 19
9403: PPUSH
9404: LD_VAR 0 19
9408: PUSH
9409: LD_INT 1
9411: PLUS
9412: PPUSH
9413: LD_VAR 0 9
9417: PPUSH
9418: CALL_OW 2
9422: ST_TO_ADDR
9423: GO 9351
9425: POP
9426: POP
// if tmp then
9427: LD_VAR 0 19
9431: IFFALSE 9443
// f := tmp ;
9433: LD_ADDR_VAR 0 12
9437: PUSH
9438: LD_VAR 0 19
9442: ST_TO_ADDR
// end ; x := personel [ i ] ;
9443: LD_ADDR_VAR 0 13
9447: PUSH
9448: LD_VAR 0 6
9452: PUSH
9453: LD_VAR 0 8
9457: ARRAY
9458: ST_TO_ADDR
// if x = - 1 then
9459: LD_VAR 0 13
9463: PUSH
9464: LD_INT 1
9466: NEG
9467: EQUAL
9468: IFFALSE 9677
// begin for j in f do
9470: LD_ADDR_VAR 0 9
9474: PUSH
9475: LD_VAR 0 12
9479: PUSH
9480: FOR_IN
9481: IFFALSE 9673
// repeat InitHc ;
9483: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9487: LD_VAR 0 9
9491: PPUSH
9492: CALL_OW 266
9496: PUSH
9497: LD_INT 5
9499: EQUAL
9500: IFFALSE 9570
// begin if UnitsInside ( j ) < 3 then
9502: LD_VAR 0 9
9506: PPUSH
9507: CALL_OW 313
9511: PUSH
9512: LD_INT 3
9514: LESS
9515: IFFALSE 9551
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9517: LD_INT 0
9519: PPUSH
9520: LD_INT 5
9522: PUSH
9523: LD_INT 8
9525: PUSH
9526: LD_INT 9
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: LIST
9533: PUSH
9534: LD_VAR 0 17
9538: ARRAY
9539: PPUSH
9540: LD_VAR 0 4
9544: PPUSH
9545: CALL_OW 380
9549: GO 9568
// PrepareHuman ( false , i , skill ) ;
9551: LD_INT 0
9553: PPUSH
9554: LD_VAR 0 8
9558: PPUSH
9559: LD_VAR 0 4
9563: PPUSH
9564: CALL_OW 380
// end else
9568: GO 9587
// PrepareHuman ( false , i , skill ) ;
9570: LD_INT 0
9572: PPUSH
9573: LD_VAR 0 8
9577: PPUSH
9578: LD_VAR 0 4
9582: PPUSH
9583: CALL_OW 380
// un := CreateHuman ;
9587: LD_ADDR_VAR 0 14
9591: PUSH
9592: CALL_OW 44
9596: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9597: LD_ADDR_VAR 0 7
9601: PUSH
9602: LD_VAR 0 7
9606: PPUSH
9607: LD_INT 1
9609: PPUSH
9610: LD_VAR 0 14
9614: PPUSH
9615: CALL_OW 2
9619: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9620: LD_VAR 0 14
9624: PPUSH
9625: LD_VAR 0 9
9629: PPUSH
9630: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9634: LD_VAR 0 9
9638: PPUSH
9639: CALL_OW 313
9643: PUSH
9644: LD_INT 6
9646: EQUAL
9647: PUSH
9648: LD_VAR 0 9
9652: PPUSH
9653: CALL_OW 266
9657: PUSH
9658: LD_INT 32
9660: PUSH
9661: LD_INT 31
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: IN
9668: OR
9669: IFFALSE 9483
9671: GO 9480
9673: POP
9674: POP
// end else
9675: GO 10057
// for j = 1 to x do
9677: LD_ADDR_VAR 0 9
9681: PUSH
9682: DOUBLE
9683: LD_INT 1
9685: DEC
9686: ST_TO_ADDR
9687: LD_VAR 0 13
9691: PUSH
9692: FOR_TO
9693: IFFALSE 10055
// begin InitHc ;
9695: CALL_OW 19
// if not f then
9699: LD_VAR 0 12
9703: NOT
9704: IFFALSE 9793
// begin PrepareHuman ( false , i , skill ) ;
9706: LD_INT 0
9708: PPUSH
9709: LD_VAR 0 8
9713: PPUSH
9714: LD_VAR 0 4
9718: PPUSH
9719: CALL_OW 380
// un := CreateHuman ;
9723: LD_ADDR_VAR 0 14
9727: PUSH
9728: CALL_OW 44
9732: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9733: LD_ADDR_VAR 0 7
9737: PUSH
9738: LD_VAR 0 7
9742: PPUSH
9743: LD_INT 1
9745: PPUSH
9746: LD_VAR 0 14
9750: PPUSH
9751: CALL_OW 2
9755: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
9756: LD_VAR 0 14
9760: PPUSH
9761: LD_VAR 0 1
9765: PPUSH
9766: CALL_OW 250
9770: PPUSH
9771: LD_VAR 0 1
9775: PPUSH
9776: CALL_OW 251
9780: PPUSH
9781: LD_INT 10
9783: PPUSH
9784: LD_INT 0
9786: PPUSH
9787: CALL_OW 50
// continue ;
9791: GO 9692
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
9793: LD_VAR 0 12
9797: PUSH
9798: LD_INT 1
9800: ARRAY
9801: PPUSH
9802: CALL_OW 313
9806: PUSH
9807: LD_VAR 0 12
9811: PUSH
9812: LD_INT 1
9814: ARRAY
9815: PPUSH
9816: CALL_OW 266
9820: PUSH
9821: LD_INT 32
9823: PUSH
9824: LD_INT 31
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: IN
9831: AND
9832: PUSH
9833: LD_VAR 0 12
9837: PUSH
9838: LD_INT 1
9840: ARRAY
9841: PPUSH
9842: CALL_OW 313
9846: PUSH
9847: LD_INT 6
9849: EQUAL
9850: OR
9851: IFFALSE 9871
// f := Delete ( f , 1 ) ;
9853: LD_ADDR_VAR 0 12
9857: PUSH
9858: LD_VAR 0 12
9862: PPUSH
9863: LD_INT 1
9865: PPUSH
9866: CALL_OW 3
9870: ST_TO_ADDR
// if not f then
9871: LD_VAR 0 12
9875: NOT
9876: IFFALSE 9894
// begin x := x + 2 ;
9878: LD_ADDR_VAR 0 13
9882: PUSH
9883: LD_VAR 0 13
9887: PUSH
9888: LD_INT 2
9890: PLUS
9891: ST_TO_ADDR
// continue ;
9892: GO 9692
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
9894: LD_VAR 0 12
9898: PUSH
9899: LD_INT 1
9901: ARRAY
9902: PPUSH
9903: CALL_OW 266
9907: PUSH
9908: LD_INT 5
9910: EQUAL
9911: IFFALSE 9985
// begin if UnitsInside ( f [ 1 ] ) < 3 then
9913: LD_VAR 0 12
9917: PUSH
9918: LD_INT 1
9920: ARRAY
9921: PPUSH
9922: CALL_OW 313
9926: PUSH
9927: LD_INT 3
9929: LESS
9930: IFFALSE 9966
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9932: LD_INT 0
9934: PPUSH
9935: LD_INT 5
9937: PUSH
9938: LD_INT 8
9940: PUSH
9941: LD_INT 9
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: LIST
9948: PUSH
9949: LD_VAR 0 17
9953: ARRAY
9954: PPUSH
9955: LD_VAR 0 4
9959: PPUSH
9960: CALL_OW 380
9964: GO 9983
// PrepareHuman ( false , i , skill ) ;
9966: LD_INT 0
9968: PPUSH
9969: LD_VAR 0 8
9973: PPUSH
9974: LD_VAR 0 4
9978: PPUSH
9979: CALL_OW 380
// end else
9983: GO 10002
// PrepareHuman ( false , i , skill ) ;
9985: LD_INT 0
9987: PPUSH
9988: LD_VAR 0 8
9992: PPUSH
9993: LD_VAR 0 4
9997: PPUSH
9998: CALL_OW 380
// un := CreateHuman ;
10002: LD_ADDR_VAR 0 14
10006: PUSH
10007: CALL_OW 44
10011: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10012: LD_ADDR_VAR 0 7
10016: PUSH
10017: LD_VAR 0 7
10021: PPUSH
10022: LD_INT 1
10024: PPUSH
10025: LD_VAR 0 14
10029: PPUSH
10030: CALL_OW 2
10034: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10035: LD_VAR 0 14
10039: PPUSH
10040: LD_VAR 0 12
10044: PUSH
10045: LD_INT 1
10047: ARRAY
10048: PPUSH
10049: CALL_OW 52
// end ;
10053: GO 9692
10055: POP
10056: POP
// end ;
10057: GO 8994
10059: POP
10060: POP
// result := result ^ buildings ;
10061: LD_ADDR_VAR 0 7
10065: PUSH
10066: LD_VAR 0 7
10070: PUSH
10071: LD_VAR 0 18
10075: ADD
10076: ST_TO_ADDR
// end else
10077: GO 10220
// begin for i = 1 to personel do
10079: LD_ADDR_VAR 0 8
10083: PUSH
10084: DOUBLE
10085: LD_INT 1
10087: DEC
10088: ST_TO_ADDR
10089: LD_VAR 0 6
10093: PUSH
10094: FOR_TO
10095: IFFALSE 10218
// begin if i > 4 then
10097: LD_VAR 0 8
10101: PUSH
10102: LD_INT 4
10104: GREATER
10105: IFFALSE 10109
// break ;
10107: GO 10218
// x := personel [ i ] ;
10109: LD_ADDR_VAR 0 13
10113: PUSH
10114: LD_VAR 0 6
10118: PUSH
10119: LD_VAR 0 8
10123: ARRAY
10124: ST_TO_ADDR
// if x = - 1 then
10125: LD_VAR 0 13
10129: PUSH
10130: LD_INT 1
10132: NEG
10133: EQUAL
10134: IFFALSE 10138
// continue ;
10136: GO 10094
// PrepareHuman ( false , i , skill ) ;
10138: LD_INT 0
10140: PPUSH
10141: LD_VAR 0 8
10145: PPUSH
10146: LD_VAR 0 4
10150: PPUSH
10151: CALL_OW 380
// un := CreateHuman ;
10155: LD_ADDR_VAR 0 14
10159: PUSH
10160: CALL_OW 44
10164: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10165: LD_VAR 0 14
10169: PPUSH
10170: LD_VAR 0 1
10174: PPUSH
10175: CALL_OW 250
10179: PPUSH
10180: LD_VAR 0 1
10184: PPUSH
10185: CALL_OW 251
10189: PPUSH
10190: LD_INT 10
10192: PPUSH
10193: LD_INT 0
10195: PPUSH
10196: CALL_OW 50
// result := result ^ un ;
10200: LD_ADDR_VAR 0 7
10204: PUSH
10205: LD_VAR 0 7
10209: PUSH
10210: LD_VAR 0 14
10214: ADD
10215: ST_TO_ADDR
// end ;
10216: GO 10094
10218: POP
10219: POP
// end ; end ;
10220: LD_VAR 0 7
10224: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10225: LD_INT 0
10227: PPUSH
10228: PPUSH
10229: PPUSH
10230: PPUSH
10231: PPUSH
10232: PPUSH
10233: PPUSH
10234: PPUSH
10235: PPUSH
10236: PPUSH
10237: PPUSH
10238: PPUSH
10239: PPUSH
10240: PPUSH
10241: PPUSH
10242: PPUSH
// result := false ;
10243: LD_ADDR_VAR 0 3
10247: PUSH
10248: LD_INT 0
10250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10251: LD_VAR 0 1
10255: NOT
10256: PUSH
10257: LD_VAR 0 1
10261: PPUSH
10262: CALL_OW 266
10266: PUSH
10267: LD_INT 32
10269: PUSH
10270: LD_INT 33
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: IN
10277: NOT
10278: OR
10279: IFFALSE 10283
// exit ;
10281: GO 11392
// nat := GetNation ( tower ) ;
10283: LD_ADDR_VAR 0 12
10287: PUSH
10288: LD_VAR 0 1
10292: PPUSH
10293: CALL_OW 248
10297: ST_TO_ADDR
// side := GetSide ( tower ) ;
10298: LD_ADDR_VAR 0 16
10302: PUSH
10303: LD_VAR 0 1
10307: PPUSH
10308: CALL_OW 255
10312: ST_TO_ADDR
// x := GetX ( tower ) ;
10313: LD_ADDR_VAR 0 10
10317: PUSH
10318: LD_VAR 0 1
10322: PPUSH
10323: CALL_OW 250
10327: ST_TO_ADDR
// y := GetY ( tower ) ;
10328: LD_ADDR_VAR 0 11
10332: PUSH
10333: LD_VAR 0 1
10337: PPUSH
10338: CALL_OW 251
10342: ST_TO_ADDR
// if not x or not y then
10343: LD_VAR 0 10
10347: NOT
10348: PUSH
10349: LD_VAR 0 11
10353: NOT
10354: OR
10355: IFFALSE 10359
// exit ;
10357: GO 11392
// weapon := 0 ;
10359: LD_ADDR_VAR 0 18
10363: PUSH
10364: LD_INT 0
10366: ST_TO_ADDR
// fac_list := [ ] ;
10367: LD_ADDR_VAR 0 17
10371: PUSH
10372: EMPTY
10373: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10374: LD_ADDR_VAR 0 6
10378: PUSH
10379: LD_VAR 0 1
10383: PPUSH
10384: CALL_OW 274
10388: PPUSH
10389: LD_VAR 0 2
10393: PPUSH
10394: LD_INT 0
10396: PPUSH
10397: CALL 7962 0 3
10401: PPUSH
10402: LD_INT 30
10404: PUSH
10405: LD_INT 3
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PPUSH
10412: CALL_OW 72
10416: ST_TO_ADDR
// if not factories then
10417: LD_VAR 0 6
10421: NOT
10422: IFFALSE 10426
// exit ;
10424: GO 11392
// for i in factories do
10426: LD_ADDR_VAR 0 8
10430: PUSH
10431: LD_VAR 0 6
10435: PUSH
10436: FOR_IN
10437: IFFALSE 10462
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10439: LD_ADDR_VAR 0 17
10443: PUSH
10444: LD_VAR 0 17
10448: PUSH
10449: LD_VAR 0 8
10453: PPUSH
10454: CALL_OW 478
10458: UNION
10459: ST_TO_ADDR
10460: GO 10436
10462: POP
10463: POP
// if not fac_list then
10464: LD_VAR 0 17
10468: NOT
10469: IFFALSE 10473
// exit ;
10471: GO 11392
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10473: LD_ADDR_VAR 0 5
10477: PUSH
10478: LD_INT 4
10480: PUSH
10481: LD_INT 5
10483: PUSH
10484: LD_INT 9
10486: PUSH
10487: LD_INT 10
10489: PUSH
10490: LD_INT 6
10492: PUSH
10493: LD_INT 7
10495: PUSH
10496: LD_INT 11
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: PUSH
10508: LD_INT 27
10510: PUSH
10511: LD_INT 28
10513: PUSH
10514: LD_INT 26
10516: PUSH
10517: LD_INT 30
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: PUSH
10526: LD_INT 43
10528: PUSH
10529: LD_INT 44
10531: PUSH
10532: LD_INT 46
10534: PUSH
10535: LD_INT 45
10537: PUSH
10538: LD_INT 47
10540: PUSH
10541: LD_INT 49
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: LD_VAR 0 12
10561: ARRAY
10562: ST_TO_ADDR
// list := list isect fac_list ;
10563: LD_ADDR_VAR 0 5
10567: PUSH
10568: LD_VAR 0 5
10572: PUSH
10573: LD_VAR 0 17
10577: ISECT
10578: ST_TO_ADDR
// if not list then
10579: LD_VAR 0 5
10583: NOT
10584: IFFALSE 10588
// exit ;
10586: GO 11392
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10588: LD_VAR 0 12
10592: PUSH
10593: LD_INT 3
10595: EQUAL
10596: PUSH
10597: LD_INT 49
10599: PUSH
10600: LD_VAR 0 5
10604: IN
10605: AND
10606: PUSH
10607: LD_INT 31
10609: PPUSH
10610: LD_VAR 0 16
10614: PPUSH
10615: CALL_OW 321
10619: PUSH
10620: LD_INT 2
10622: EQUAL
10623: AND
10624: IFFALSE 10684
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10626: LD_INT 22
10628: PUSH
10629: LD_VAR 0 16
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 35
10640: PUSH
10641: LD_INT 49
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 91
10650: PUSH
10651: LD_VAR 0 1
10655: PUSH
10656: LD_INT 10
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: LIST
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: PPUSH
10669: CALL_OW 69
10673: NOT
10674: IFFALSE 10684
// weapon := ru_time_lapser ;
10676: LD_ADDR_VAR 0 18
10680: PUSH
10681: LD_INT 49
10683: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
10684: LD_VAR 0 12
10688: PUSH
10689: LD_INT 1
10691: PUSH
10692: LD_INT 2
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: IN
10699: PUSH
10700: LD_INT 11
10702: PUSH
10703: LD_VAR 0 5
10707: IN
10708: PUSH
10709: LD_INT 30
10711: PUSH
10712: LD_VAR 0 5
10716: IN
10717: OR
10718: AND
10719: PUSH
10720: LD_INT 6
10722: PPUSH
10723: LD_VAR 0 16
10727: PPUSH
10728: CALL_OW 321
10732: PUSH
10733: LD_INT 2
10735: EQUAL
10736: AND
10737: IFFALSE 10902
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
10739: LD_INT 22
10741: PUSH
10742: LD_VAR 0 16
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 2
10753: PUSH
10754: LD_INT 35
10756: PUSH
10757: LD_INT 11
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: LD_INT 35
10766: PUSH
10767: LD_INT 30
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 91
10781: PUSH
10782: LD_VAR 0 1
10786: PUSH
10787: LD_INT 18
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: LIST
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: LIST
10799: PPUSH
10800: CALL_OW 69
10804: NOT
10805: PUSH
10806: LD_INT 22
10808: PUSH
10809: LD_VAR 0 16
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PUSH
10818: LD_INT 2
10820: PUSH
10821: LD_INT 30
10823: PUSH
10824: LD_INT 32
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: LD_INT 30
10833: PUSH
10834: LD_INT 33
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 91
10848: PUSH
10849: LD_VAR 0 1
10853: PUSH
10854: LD_INT 12
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: LIST
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: PPUSH
10870: CALL_OW 69
10874: PUSH
10875: LD_INT 2
10877: GREATER
10878: AND
10879: IFFALSE 10902
// weapon := [ us_radar , ar_radar ] [ nat ] ;
10881: LD_ADDR_VAR 0 18
10885: PUSH
10886: LD_INT 11
10888: PUSH
10889: LD_INT 30
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PUSH
10896: LD_VAR 0 12
10900: ARRAY
10901: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
10902: LD_VAR 0 18
10906: NOT
10907: PUSH
10908: LD_INT 40
10910: PPUSH
10911: LD_VAR 0 16
10915: PPUSH
10916: CALL_OW 321
10920: PUSH
10921: LD_INT 2
10923: EQUAL
10924: AND
10925: PUSH
10926: LD_INT 7
10928: PUSH
10929: LD_VAR 0 5
10933: IN
10934: PUSH
10935: LD_INT 28
10937: PUSH
10938: LD_VAR 0 5
10942: IN
10943: OR
10944: PUSH
10945: LD_INT 45
10947: PUSH
10948: LD_VAR 0 5
10952: IN
10953: OR
10954: AND
10955: IFFALSE 11209
// begin hex := GetHexInfo ( x , y ) ;
10957: LD_ADDR_VAR 0 4
10961: PUSH
10962: LD_VAR 0 10
10966: PPUSH
10967: LD_VAR 0 11
10971: PPUSH
10972: CALL_OW 546
10976: ST_TO_ADDR
// if hex [ 1 ] then
10977: LD_VAR 0 4
10981: PUSH
10982: LD_INT 1
10984: ARRAY
10985: IFFALSE 10989
// exit ;
10987: GO 11392
// height := hex [ 2 ] ;
10989: LD_ADDR_VAR 0 15
10993: PUSH
10994: LD_VAR 0 4
10998: PUSH
10999: LD_INT 2
11001: ARRAY
11002: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11003: LD_ADDR_VAR 0 14
11007: PUSH
11008: LD_INT 0
11010: PUSH
11011: LD_INT 2
11013: PUSH
11014: LD_INT 3
11016: PUSH
11017: LD_INT 5
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: ST_TO_ADDR
// for i in tmp do
11026: LD_ADDR_VAR 0 8
11030: PUSH
11031: LD_VAR 0 14
11035: PUSH
11036: FOR_IN
11037: IFFALSE 11207
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11039: LD_ADDR_VAR 0 9
11043: PUSH
11044: LD_VAR 0 10
11048: PPUSH
11049: LD_VAR 0 8
11053: PPUSH
11054: LD_INT 5
11056: PPUSH
11057: CALL_OW 272
11061: PUSH
11062: LD_VAR 0 11
11066: PPUSH
11067: LD_VAR 0 8
11071: PPUSH
11072: LD_INT 5
11074: PPUSH
11075: CALL_OW 273
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11084: LD_VAR 0 9
11088: PUSH
11089: LD_INT 1
11091: ARRAY
11092: PPUSH
11093: LD_VAR 0 9
11097: PUSH
11098: LD_INT 2
11100: ARRAY
11101: PPUSH
11102: CALL_OW 488
11106: IFFALSE 11205
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11108: LD_ADDR_VAR 0 4
11112: PUSH
11113: LD_VAR 0 9
11117: PUSH
11118: LD_INT 1
11120: ARRAY
11121: PPUSH
11122: LD_VAR 0 9
11126: PUSH
11127: LD_INT 2
11129: ARRAY
11130: PPUSH
11131: CALL_OW 546
11135: ST_TO_ADDR
// if hex [ 1 ] then
11136: LD_VAR 0 4
11140: PUSH
11141: LD_INT 1
11143: ARRAY
11144: IFFALSE 11148
// continue ;
11146: GO 11036
// h := hex [ 2 ] ;
11148: LD_ADDR_VAR 0 13
11152: PUSH
11153: LD_VAR 0 4
11157: PUSH
11158: LD_INT 2
11160: ARRAY
11161: ST_TO_ADDR
// if h + 7 < height then
11162: LD_VAR 0 13
11166: PUSH
11167: LD_INT 7
11169: PLUS
11170: PUSH
11171: LD_VAR 0 15
11175: LESS
11176: IFFALSE 11205
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11178: LD_ADDR_VAR 0 18
11182: PUSH
11183: LD_INT 7
11185: PUSH
11186: LD_INT 28
11188: PUSH
11189: LD_INT 45
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: LIST
11196: PUSH
11197: LD_VAR 0 12
11201: ARRAY
11202: ST_TO_ADDR
// break ;
11203: GO 11207
// end ; end ; end ;
11205: GO 11036
11207: POP
11208: POP
// end ; if not weapon then
11209: LD_VAR 0 18
11213: NOT
11214: IFFALSE 11274
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11216: LD_ADDR_VAR 0 5
11220: PUSH
11221: LD_VAR 0 5
11225: PUSH
11226: LD_INT 11
11228: PUSH
11229: LD_INT 30
11231: PUSH
11232: LD_INT 49
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: DIFF
11240: ST_TO_ADDR
// if not list then
11241: LD_VAR 0 5
11245: NOT
11246: IFFALSE 11250
// exit ;
11248: GO 11392
// weapon := list [ rand ( 1 , list ) ] ;
11250: LD_ADDR_VAR 0 18
11254: PUSH
11255: LD_VAR 0 5
11259: PUSH
11260: LD_INT 1
11262: PPUSH
11263: LD_VAR 0 5
11267: PPUSH
11268: CALL_OW 12
11272: ARRAY
11273: ST_TO_ADDR
// end ; if weapon then
11274: LD_VAR 0 18
11278: IFFALSE 11392
// begin tmp := CostOfWeapon ( weapon ) ;
11280: LD_ADDR_VAR 0 14
11284: PUSH
11285: LD_VAR 0 18
11289: PPUSH
11290: CALL_OW 451
11294: ST_TO_ADDR
// j := GetBase ( tower ) ;
11295: LD_ADDR_VAR 0 9
11299: PUSH
11300: LD_VAR 0 1
11304: PPUSH
11305: CALL_OW 274
11309: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11310: LD_VAR 0 9
11314: PPUSH
11315: LD_INT 1
11317: PPUSH
11318: CALL_OW 275
11322: PUSH
11323: LD_VAR 0 14
11327: PUSH
11328: LD_INT 1
11330: ARRAY
11331: GREATEREQUAL
11332: PUSH
11333: LD_VAR 0 9
11337: PPUSH
11338: LD_INT 2
11340: PPUSH
11341: CALL_OW 275
11345: PUSH
11346: LD_VAR 0 14
11350: PUSH
11351: LD_INT 2
11353: ARRAY
11354: GREATEREQUAL
11355: AND
11356: PUSH
11357: LD_VAR 0 9
11361: PPUSH
11362: LD_INT 3
11364: PPUSH
11365: CALL_OW 275
11369: PUSH
11370: LD_VAR 0 14
11374: PUSH
11375: LD_INT 3
11377: ARRAY
11378: GREATEREQUAL
11379: AND
11380: IFFALSE 11392
// result := weapon ;
11382: LD_ADDR_VAR 0 3
11386: PUSH
11387: LD_VAR 0 18
11391: ST_TO_ADDR
// end ; end ;
11392: LD_VAR 0 3
11396: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11397: LD_INT 0
11399: PPUSH
11400: PPUSH
// result := true ;
11401: LD_ADDR_VAR 0 3
11405: PUSH
11406: LD_INT 1
11408: ST_TO_ADDR
// if array1 = array2 then
11409: LD_VAR 0 1
11413: PUSH
11414: LD_VAR 0 2
11418: EQUAL
11419: IFFALSE 11479
// begin for i = 1 to array1 do
11421: LD_ADDR_VAR 0 4
11425: PUSH
11426: DOUBLE
11427: LD_INT 1
11429: DEC
11430: ST_TO_ADDR
11431: LD_VAR 0 1
11435: PUSH
11436: FOR_TO
11437: IFFALSE 11475
// if array1 [ i ] <> array2 [ i ] then
11439: LD_VAR 0 1
11443: PUSH
11444: LD_VAR 0 4
11448: ARRAY
11449: PUSH
11450: LD_VAR 0 2
11454: PUSH
11455: LD_VAR 0 4
11459: ARRAY
11460: NONEQUAL
11461: IFFALSE 11473
// begin result := false ;
11463: LD_ADDR_VAR 0 3
11467: PUSH
11468: LD_INT 0
11470: ST_TO_ADDR
// break ;
11471: GO 11475
// end ;
11473: GO 11436
11475: POP
11476: POP
// end else
11477: GO 11487
// result := false ;
11479: LD_ADDR_VAR 0 3
11483: PUSH
11484: LD_INT 0
11486: ST_TO_ADDR
// end ;
11487: LD_VAR 0 3
11491: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11492: LD_INT 0
11494: PPUSH
11495: PPUSH
// if not array1 or not array2 then
11496: LD_VAR 0 1
11500: NOT
11501: PUSH
11502: LD_VAR 0 2
11506: NOT
11507: OR
11508: IFFALSE 11512
// exit ;
11510: GO 11576
// result := true ;
11512: LD_ADDR_VAR 0 3
11516: PUSH
11517: LD_INT 1
11519: ST_TO_ADDR
// for i = 1 to array1 do
11520: LD_ADDR_VAR 0 4
11524: PUSH
11525: DOUBLE
11526: LD_INT 1
11528: DEC
11529: ST_TO_ADDR
11530: LD_VAR 0 1
11534: PUSH
11535: FOR_TO
11536: IFFALSE 11574
// if array1 [ i ] <> array2 [ i ] then
11538: LD_VAR 0 1
11542: PUSH
11543: LD_VAR 0 4
11547: ARRAY
11548: PUSH
11549: LD_VAR 0 2
11553: PUSH
11554: LD_VAR 0 4
11558: ARRAY
11559: NONEQUAL
11560: IFFALSE 11572
// begin result := false ;
11562: LD_ADDR_VAR 0 3
11566: PUSH
11567: LD_INT 0
11569: ST_TO_ADDR
// break ;
11570: GO 11574
// end ;
11572: GO 11535
11574: POP
11575: POP
// end ;
11576: LD_VAR 0 3
11580: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11581: LD_INT 0
11583: PPUSH
11584: PPUSH
11585: PPUSH
// pom := GetBase ( fac ) ;
11586: LD_ADDR_VAR 0 5
11590: PUSH
11591: LD_VAR 0 1
11595: PPUSH
11596: CALL_OW 274
11600: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11601: LD_ADDR_VAR 0 4
11605: PUSH
11606: LD_VAR 0 2
11610: PUSH
11611: LD_INT 1
11613: ARRAY
11614: PPUSH
11615: LD_VAR 0 2
11619: PUSH
11620: LD_INT 2
11622: ARRAY
11623: PPUSH
11624: LD_VAR 0 2
11628: PUSH
11629: LD_INT 3
11631: ARRAY
11632: PPUSH
11633: LD_VAR 0 2
11637: PUSH
11638: LD_INT 4
11640: ARRAY
11641: PPUSH
11642: CALL_OW 449
11646: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11647: LD_ADDR_VAR 0 3
11651: PUSH
11652: LD_VAR 0 5
11656: PPUSH
11657: LD_INT 1
11659: PPUSH
11660: CALL_OW 275
11664: PUSH
11665: LD_VAR 0 4
11669: PUSH
11670: LD_INT 1
11672: ARRAY
11673: GREATEREQUAL
11674: PUSH
11675: LD_VAR 0 5
11679: PPUSH
11680: LD_INT 2
11682: PPUSH
11683: CALL_OW 275
11687: PUSH
11688: LD_VAR 0 4
11692: PUSH
11693: LD_INT 2
11695: ARRAY
11696: GREATEREQUAL
11697: AND
11698: PUSH
11699: LD_VAR 0 5
11703: PPUSH
11704: LD_INT 3
11706: PPUSH
11707: CALL_OW 275
11711: PUSH
11712: LD_VAR 0 4
11716: PUSH
11717: LD_INT 3
11719: ARRAY
11720: GREATEREQUAL
11721: AND
11722: ST_TO_ADDR
// end ;
11723: LD_VAR 0 3
11727: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
11728: LD_INT 0
11730: PPUSH
11731: PPUSH
11732: PPUSH
11733: PPUSH
// pom := GetBase ( building ) ;
11734: LD_ADDR_VAR 0 3
11738: PUSH
11739: LD_VAR 0 1
11743: PPUSH
11744: CALL_OW 274
11748: ST_TO_ADDR
// if not pom then
11749: LD_VAR 0 3
11753: NOT
11754: IFFALSE 11758
// exit ;
11756: GO 11928
// btype := GetBType ( building ) ;
11758: LD_ADDR_VAR 0 5
11762: PUSH
11763: LD_VAR 0 1
11767: PPUSH
11768: CALL_OW 266
11772: ST_TO_ADDR
// if btype = b_armoury then
11773: LD_VAR 0 5
11777: PUSH
11778: LD_INT 4
11780: EQUAL
11781: IFFALSE 11791
// btype := b_barracks ;
11783: LD_ADDR_VAR 0 5
11787: PUSH
11788: LD_INT 5
11790: ST_TO_ADDR
// if btype = b_depot then
11791: LD_VAR 0 5
11795: PUSH
11796: LD_INT 0
11798: EQUAL
11799: IFFALSE 11809
// btype := b_warehouse ;
11801: LD_ADDR_VAR 0 5
11805: PUSH
11806: LD_INT 1
11808: ST_TO_ADDR
// if btype = b_workshop then
11809: LD_VAR 0 5
11813: PUSH
11814: LD_INT 2
11816: EQUAL
11817: IFFALSE 11827
// btype := b_factory ;
11819: LD_ADDR_VAR 0 5
11823: PUSH
11824: LD_INT 3
11826: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11827: LD_ADDR_VAR 0 4
11831: PUSH
11832: LD_VAR 0 5
11836: PPUSH
11837: LD_VAR 0 1
11841: PPUSH
11842: CALL_OW 248
11846: PPUSH
11847: CALL_OW 450
11851: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11852: LD_ADDR_VAR 0 2
11856: PUSH
11857: LD_VAR 0 3
11861: PPUSH
11862: LD_INT 1
11864: PPUSH
11865: CALL_OW 275
11869: PUSH
11870: LD_VAR 0 4
11874: PUSH
11875: LD_INT 1
11877: ARRAY
11878: GREATEREQUAL
11879: PUSH
11880: LD_VAR 0 3
11884: PPUSH
11885: LD_INT 2
11887: PPUSH
11888: CALL_OW 275
11892: PUSH
11893: LD_VAR 0 4
11897: PUSH
11898: LD_INT 2
11900: ARRAY
11901: GREATEREQUAL
11902: AND
11903: PUSH
11904: LD_VAR 0 3
11908: PPUSH
11909: LD_INT 3
11911: PPUSH
11912: CALL_OW 275
11916: PUSH
11917: LD_VAR 0 4
11921: PUSH
11922: LD_INT 3
11924: ARRAY
11925: GREATEREQUAL
11926: AND
11927: ST_TO_ADDR
// end ;
11928: LD_VAR 0 2
11932: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
11933: LD_INT 0
11935: PPUSH
11936: PPUSH
11937: PPUSH
// pom := GetBase ( building ) ;
11938: LD_ADDR_VAR 0 4
11942: PUSH
11943: LD_VAR 0 1
11947: PPUSH
11948: CALL_OW 274
11952: ST_TO_ADDR
// if not pom then
11953: LD_VAR 0 4
11957: NOT
11958: IFFALSE 11962
// exit ;
11960: GO 12063
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11962: LD_ADDR_VAR 0 5
11966: PUSH
11967: LD_VAR 0 2
11971: PPUSH
11972: LD_VAR 0 1
11976: PPUSH
11977: CALL_OW 248
11981: PPUSH
11982: CALL_OW 450
11986: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11987: LD_ADDR_VAR 0 3
11991: PUSH
11992: LD_VAR 0 4
11996: PPUSH
11997: LD_INT 1
11999: PPUSH
12000: CALL_OW 275
12004: PUSH
12005: LD_VAR 0 5
12009: PUSH
12010: LD_INT 1
12012: ARRAY
12013: GREATEREQUAL
12014: PUSH
12015: LD_VAR 0 4
12019: PPUSH
12020: LD_INT 2
12022: PPUSH
12023: CALL_OW 275
12027: PUSH
12028: LD_VAR 0 5
12032: PUSH
12033: LD_INT 2
12035: ARRAY
12036: GREATEREQUAL
12037: AND
12038: PUSH
12039: LD_VAR 0 4
12043: PPUSH
12044: LD_INT 3
12046: PPUSH
12047: CALL_OW 275
12051: PUSH
12052: LD_VAR 0 5
12056: PUSH
12057: LD_INT 3
12059: ARRAY
12060: GREATEREQUAL
12061: AND
12062: ST_TO_ADDR
// end ;
12063: LD_VAR 0 3
12067: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12068: LD_INT 0
12070: PPUSH
12071: PPUSH
12072: PPUSH
12073: PPUSH
12074: PPUSH
12075: PPUSH
12076: PPUSH
12077: PPUSH
12078: PPUSH
12079: PPUSH
12080: PPUSH
// result := false ;
12081: LD_ADDR_VAR 0 8
12085: PUSH
12086: LD_INT 0
12088: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12089: LD_VAR 0 5
12093: NOT
12094: PUSH
12095: LD_VAR 0 1
12099: NOT
12100: OR
12101: PUSH
12102: LD_VAR 0 2
12106: NOT
12107: OR
12108: PUSH
12109: LD_VAR 0 3
12113: NOT
12114: OR
12115: IFFALSE 12119
// exit ;
12117: GO 12933
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12119: LD_ADDR_VAR 0 14
12123: PUSH
12124: LD_VAR 0 1
12128: PPUSH
12129: LD_VAR 0 2
12133: PPUSH
12134: LD_VAR 0 3
12138: PPUSH
12139: LD_VAR 0 4
12143: PPUSH
12144: LD_VAR 0 5
12148: PUSH
12149: LD_INT 1
12151: ARRAY
12152: PPUSH
12153: CALL_OW 248
12157: PPUSH
12158: LD_INT 0
12160: PPUSH
12161: CALL 13770 0 6
12165: ST_TO_ADDR
// if not hexes then
12166: LD_VAR 0 14
12170: NOT
12171: IFFALSE 12175
// exit ;
12173: GO 12933
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12175: LD_ADDR_VAR 0 17
12179: PUSH
12180: LD_VAR 0 5
12184: PPUSH
12185: LD_INT 22
12187: PUSH
12188: LD_VAR 0 13
12192: PPUSH
12193: CALL_OW 255
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 2
12204: PUSH
12205: LD_INT 30
12207: PUSH
12208: LD_INT 0
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 30
12217: PUSH
12218: LD_INT 1
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: LIST
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PPUSH
12234: CALL_OW 72
12238: ST_TO_ADDR
// for i = 1 to hexes do
12239: LD_ADDR_VAR 0 9
12243: PUSH
12244: DOUBLE
12245: LD_INT 1
12247: DEC
12248: ST_TO_ADDR
12249: LD_VAR 0 14
12253: PUSH
12254: FOR_TO
12255: IFFALSE 12931
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12257: LD_ADDR_VAR 0 13
12261: PUSH
12262: LD_VAR 0 14
12266: PUSH
12267: LD_VAR 0 9
12271: ARRAY
12272: PUSH
12273: LD_INT 1
12275: ARRAY
12276: PPUSH
12277: LD_VAR 0 14
12281: PUSH
12282: LD_VAR 0 9
12286: ARRAY
12287: PUSH
12288: LD_INT 2
12290: ARRAY
12291: PPUSH
12292: CALL_OW 428
12296: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12297: LD_VAR 0 14
12301: PUSH
12302: LD_VAR 0 9
12306: ARRAY
12307: PUSH
12308: LD_INT 1
12310: ARRAY
12311: PPUSH
12312: LD_VAR 0 14
12316: PUSH
12317: LD_VAR 0 9
12321: ARRAY
12322: PUSH
12323: LD_INT 2
12325: ARRAY
12326: PPUSH
12327: CALL_OW 351
12331: PUSH
12332: LD_VAR 0 14
12336: PUSH
12337: LD_VAR 0 9
12341: ARRAY
12342: PUSH
12343: LD_INT 1
12345: ARRAY
12346: PPUSH
12347: LD_VAR 0 14
12351: PUSH
12352: LD_VAR 0 9
12356: ARRAY
12357: PUSH
12358: LD_INT 2
12360: ARRAY
12361: PPUSH
12362: CALL_OW 488
12366: NOT
12367: OR
12368: PUSH
12369: LD_VAR 0 13
12373: PPUSH
12374: CALL_OW 247
12378: PUSH
12379: LD_INT 3
12381: EQUAL
12382: OR
12383: IFFALSE 12389
// exit ;
12385: POP
12386: POP
12387: GO 12933
// if not tmp then
12389: LD_VAR 0 13
12393: NOT
12394: IFFALSE 12398
// continue ;
12396: GO 12254
// result := true ;
12398: LD_ADDR_VAR 0 8
12402: PUSH
12403: LD_INT 1
12405: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12406: LD_VAR 0 6
12410: PUSH
12411: LD_VAR 0 13
12415: PPUSH
12416: CALL_OW 247
12420: PUSH
12421: LD_INT 2
12423: EQUAL
12424: AND
12425: PUSH
12426: LD_VAR 0 13
12430: PPUSH
12431: CALL_OW 263
12435: PUSH
12436: LD_INT 1
12438: EQUAL
12439: AND
12440: IFFALSE 12604
// begin if IsDrivenBy ( tmp ) then
12442: LD_VAR 0 13
12446: PPUSH
12447: CALL_OW 311
12451: IFFALSE 12455
// continue ;
12453: GO 12254
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12455: LD_VAR 0 6
12459: PPUSH
12460: LD_INT 3
12462: PUSH
12463: LD_INT 60
12465: PUSH
12466: EMPTY
12467: LIST
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: LD_INT 3
12475: PUSH
12476: LD_INT 55
12478: PUSH
12479: EMPTY
12480: LIST
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PPUSH
12490: CALL_OW 72
12494: IFFALSE 12602
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12496: LD_ADDR_VAR 0 18
12500: PUSH
12501: LD_VAR 0 6
12505: PPUSH
12506: LD_INT 3
12508: PUSH
12509: LD_INT 60
12511: PUSH
12512: EMPTY
12513: LIST
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PUSH
12519: LD_INT 3
12521: PUSH
12522: LD_INT 55
12524: PUSH
12525: EMPTY
12526: LIST
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PPUSH
12536: CALL_OW 72
12540: PUSH
12541: LD_INT 1
12543: ARRAY
12544: ST_TO_ADDR
// if IsInUnit ( driver ) then
12545: LD_VAR 0 18
12549: PPUSH
12550: CALL_OW 310
12554: IFFALSE 12565
// ComExit ( driver ) ;
12556: LD_VAR 0 18
12560: PPUSH
12561: CALL 36954 0 1
// AddComEnterUnit ( driver , tmp ) ;
12565: LD_VAR 0 18
12569: PPUSH
12570: LD_VAR 0 13
12574: PPUSH
12575: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12579: LD_VAR 0 18
12583: PPUSH
12584: LD_VAR 0 7
12588: PPUSH
12589: CALL_OW 173
// AddComExitVehicle ( driver ) ;
12593: LD_VAR 0 18
12597: PPUSH
12598: CALL_OW 181
// end ; continue ;
12602: GO 12254
// end ; if not cleaners or not tmp in cleaners then
12604: LD_VAR 0 6
12608: NOT
12609: PUSH
12610: LD_VAR 0 13
12614: PUSH
12615: LD_VAR 0 6
12619: IN
12620: NOT
12621: OR
12622: IFFALSE 12929
// begin if dep then
12624: LD_VAR 0 17
12628: IFFALSE 12764
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
12630: LD_ADDR_VAR 0 16
12634: PUSH
12635: LD_VAR 0 17
12639: PUSH
12640: LD_INT 1
12642: ARRAY
12643: PPUSH
12644: CALL_OW 250
12648: PPUSH
12649: LD_VAR 0 17
12653: PUSH
12654: LD_INT 1
12656: ARRAY
12657: PPUSH
12658: CALL_OW 254
12662: PPUSH
12663: LD_INT 5
12665: PPUSH
12666: CALL_OW 272
12670: PUSH
12671: LD_VAR 0 17
12675: PUSH
12676: LD_INT 1
12678: ARRAY
12679: PPUSH
12680: CALL_OW 251
12684: PPUSH
12685: LD_VAR 0 17
12689: PUSH
12690: LD_INT 1
12692: ARRAY
12693: PPUSH
12694: CALL_OW 254
12698: PPUSH
12699: LD_INT 5
12701: PPUSH
12702: CALL_OW 273
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
12711: LD_VAR 0 16
12715: PUSH
12716: LD_INT 1
12718: ARRAY
12719: PPUSH
12720: LD_VAR 0 16
12724: PUSH
12725: LD_INT 2
12727: ARRAY
12728: PPUSH
12729: CALL_OW 488
12733: IFFALSE 12764
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
12735: LD_VAR 0 13
12739: PPUSH
12740: LD_VAR 0 16
12744: PUSH
12745: LD_INT 1
12747: ARRAY
12748: PPUSH
12749: LD_VAR 0 16
12753: PUSH
12754: LD_INT 2
12756: ARRAY
12757: PPUSH
12758: CALL_OW 111
// continue ;
12762: GO 12254
// end ; end ; r := GetDir ( tmp ) ;
12764: LD_ADDR_VAR 0 15
12768: PUSH
12769: LD_VAR 0 13
12773: PPUSH
12774: CALL_OW 254
12778: ST_TO_ADDR
// if r = 5 then
12779: LD_VAR 0 15
12783: PUSH
12784: LD_INT 5
12786: EQUAL
12787: IFFALSE 12797
// r := 0 ;
12789: LD_ADDR_VAR 0 15
12793: PUSH
12794: LD_INT 0
12796: ST_TO_ADDR
// for j = r to 5 do
12797: LD_ADDR_VAR 0 10
12801: PUSH
12802: DOUBLE
12803: LD_VAR 0 15
12807: DEC
12808: ST_TO_ADDR
12809: LD_INT 5
12811: PUSH
12812: FOR_TO
12813: IFFALSE 12927
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
12815: LD_ADDR_VAR 0 11
12819: PUSH
12820: LD_VAR 0 13
12824: PPUSH
12825: CALL_OW 250
12829: PPUSH
12830: LD_VAR 0 10
12834: PPUSH
12835: LD_INT 2
12837: PPUSH
12838: CALL_OW 272
12842: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
12843: LD_ADDR_VAR 0 12
12847: PUSH
12848: LD_VAR 0 13
12852: PPUSH
12853: CALL_OW 251
12857: PPUSH
12858: LD_VAR 0 10
12862: PPUSH
12863: LD_INT 2
12865: PPUSH
12866: CALL_OW 273
12870: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
12871: LD_VAR 0 11
12875: PPUSH
12876: LD_VAR 0 12
12880: PPUSH
12881: CALL_OW 488
12885: PUSH
12886: LD_VAR 0 11
12890: PPUSH
12891: LD_VAR 0 12
12895: PPUSH
12896: CALL_OW 428
12900: NOT
12901: AND
12902: IFFALSE 12925
// begin ComMoveXY ( tmp , _x , _y ) ;
12904: LD_VAR 0 13
12908: PPUSH
12909: LD_VAR 0 11
12913: PPUSH
12914: LD_VAR 0 12
12918: PPUSH
12919: CALL_OW 111
// break ;
12923: GO 12927
// end ; end ;
12925: GO 12812
12927: POP
12928: POP
// end ; end ;
12929: GO 12254
12931: POP
12932: POP
// end ;
12933: LD_VAR 0 8
12937: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
12938: LD_INT 0
12940: PPUSH
12941: PPUSH
12942: PPUSH
12943: PPUSH
12944: PPUSH
12945: PPUSH
12946: PPUSH
12947: PPUSH
12948: PPUSH
12949: PPUSH
// result := false ;
12950: LD_ADDR_VAR 0 6
12954: PUSH
12955: LD_INT 0
12957: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
12958: LD_VAR 0 1
12962: NOT
12963: PUSH
12964: LD_VAR 0 1
12968: PPUSH
12969: CALL_OW 266
12973: PUSH
12974: LD_INT 0
12976: PUSH
12977: LD_INT 1
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: IN
12984: NOT
12985: OR
12986: PUSH
12987: LD_VAR 0 2
12991: NOT
12992: OR
12993: PUSH
12994: LD_VAR 0 5
12998: PUSH
12999: LD_INT 0
13001: PUSH
13002: LD_INT 1
13004: PUSH
13005: LD_INT 2
13007: PUSH
13008: LD_INT 3
13010: PUSH
13011: LD_INT 4
13013: PUSH
13014: LD_INT 5
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: IN
13025: NOT
13026: OR
13027: PUSH
13028: LD_VAR 0 3
13032: PPUSH
13033: LD_VAR 0 4
13037: PPUSH
13038: CALL_OW 488
13042: NOT
13043: OR
13044: IFFALSE 13048
// exit ;
13046: GO 13765
// pom := GetBase ( depot ) ;
13048: LD_ADDR_VAR 0 10
13052: PUSH
13053: LD_VAR 0 1
13057: PPUSH
13058: CALL_OW 274
13062: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13063: LD_ADDR_VAR 0 11
13067: PUSH
13068: LD_VAR 0 2
13072: PPUSH
13073: LD_VAR 0 1
13077: PPUSH
13078: CALL_OW 248
13082: PPUSH
13083: CALL_OW 450
13087: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13088: LD_VAR 0 10
13092: PPUSH
13093: LD_INT 1
13095: PPUSH
13096: CALL_OW 275
13100: PUSH
13101: LD_VAR 0 11
13105: PUSH
13106: LD_INT 1
13108: ARRAY
13109: GREATEREQUAL
13110: PUSH
13111: LD_VAR 0 10
13115: PPUSH
13116: LD_INT 2
13118: PPUSH
13119: CALL_OW 275
13123: PUSH
13124: LD_VAR 0 11
13128: PUSH
13129: LD_INT 2
13131: ARRAY
13132: GREATEREQUAL
13133: AND
13134: PUSH
13135: LD_VAR 0 10
13139: PPUSH
13140: LD_INT 3
13142: PPUSH
13143: CALL_OW 275
13147: PUSH
13148: LD_VAR 0 11
13152: PUSH
13153: LD_INT 3
13155: ARRAY
13156: GREATEREQUAL
13157: AND
13158: NOT
13159: IFFALSE 13163
// exit ;
13161: GO 13765
// if GetBType ( depot ) = b_depot then
13163: LD_VAR 0 1
13167: PPUSH
13168: CALL_OW 266
13172: PUSH
13173: LD_INT 0
13175: EQUAL
13176: IFFALSE 13188
// dist := 28 else
13178: LD_ADDR_VAR 0 14
13182: PUSH
13183: LD_INT 28
13185: ST_TO_ADDR
13186: GO 13196
// dist := 36 ;
13188: LD_ADDR_VAR 0 14
13192: PUSH
13193: LD_INT 36
13195: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
13196: LD_VAR 0 1
13200: PPUSH
13201: LD_VAR 0 3
13205: PPUSH
13206: LD_VAR 0 4
13210: PPUSH
13211: CALL_OW 297
13215: PUSH
13216: LD_VAR 0 14
13220: GREATER
13221: IFFALSE 13225
// exit ;
13223: GO 13765
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
13225: LD_ADDR_VAR 0 12
13229: PUSH
13230: LD_VAR 0 2
13234: PPUSH
13235: LD_VAR 0 3
13239: PPUSH
13240: LD_VAR 0 4
13244: PPUSH
13245: LD_VAR 0 5
13249: PPUSH
13250: LD_VAR 0 1
13254: PPUSH
13255: CALL_OW 248
13259: PPUSH
13260: LD_INT 0
13262: PPUSH
13263: CALL 13770 0 6
13267: ST_TO_ADDR
// if not hexes then
13268: LD_VAR 0 12
13272: NOT
13273: IFFALSE 13277
// exit ;
13275: GO 13765
// hex := GetHexInfo ( x , y ) ;
13277: LD_ADDR_VAR 0 15
13281: PUSH
13282: LD_VAR 0 3
13286: PPUSH
13287: LD_VAR 0 4
13291: PPUSH
13292: CALL_OW 546
13296: ST_TO_ADDR
// if hex [ 1 ] then
13297: LD_VAR 0 15
13301: PUSH
13302: LD_INT 1
13304: ARRAY
13305: IFFALSE 13309
// exit ;
13307: GO 13765
// height := hex [ 2 ] ;
13309: LD_ADDR_VAR 0 13
13313: PUSH
13314: LD_VAR 0 15
13318: PUSH
13319: LD_INT 2
13321: ARRAY
13322: ST_TO_ADDR
// for i = 1 to hexes do
13323: LD_ADDR_VAR 0 7
13327: PUSH
13328: DOUBLE
13329: LD_INT 1
13331: DEC
13332: ST_TO_ADDR
13333: LD_VAR 0 12
13337: PUSH
13338: FOR_TO
13339: IFFALSE 13669
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
13341: LD_VAR 0 12
13345: PUSH
13346: LD_VAR 0 7
13350: ARRAY
13351: PUSH
13352: LD_INT 1
13354: ARRAY
13355: PPUSH
13356: LD_VAR 0 12
13360: PUSH
13361: LD_VAR 0 7
13365: ARRAY
13366: PUSH
13367: LD_INT 2
13369: ARRAY
13370: PPUSH
13371: CALL_OW 488
13375: NOT
13376: PUSH
13377: LD_VAR 0 12
13381: PUSH
13382: LD_VAR 0 7
13386: ARRAY
13387: PUSH
13388: LD_INT 1
13390: ARRAY
13391: PPUSH
13392: LD_VAR 0 12
13396: PUSH
13397: LD_VAR 0 7
13401: ARRAY
13402: PUSH
13403: LD_INT 2
13405: ARRAY
13406: PPUSH
13407: CALL_OW 428
13411: PUSH
13412: LD_INT 0
13414: GREATER
13415: OR
13416: PUSH
13417: LD_VAR 0 12
13421: PUSH
13422: LD_VAR 0 7
13426: ARRAY
13427: PUSH
13428: LD_INT 1
13430: ARRAY
13431: PPUSH
13432: LD_VAR 0 12
13436: PUSH
13437: LD_VAR 0 7
13441: ARRAY
13442: PUSH
13443: LD_INT 2
13445: ARRAY
13446: PPUSH
13447: CALL_OW 351
13451: OR
13452: IFFALSE 13458
// exit ;
13454: POP
13455: POP
13456: GO 13765
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13458: LD_ADDR_VAR 0 8
13462: PUSH
13463: LD_VAR 0 12
13467: PUSH
13468: LD_VAR 0 7
13472: ARRAY
13473: PUSH
13474: LD_INT 1
13476: ARRAY
13477: PPUSH
13478: LD_VAR 0 12
13482: PUSH
13483: LD_VAR 0 7
13487: ARRAY
13488: PUSH
13489: LD_INT 2
13491: ARRAY
13492: PPUSH
13493: CALL_OW 546
13497: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
13498: LD_VAR 0 8
13502: PUSH
13503: LD_INT 1
13505: ARRAY
13506: PUSH
13507: LD_VAR 0 8
13511: PUSH
13512: LD_INT 2
13514: ARRAY
13515: PUSH
13516: LD_VAR 0 13
13520: PUSH
13521: LD_INT 2
13523: PLUS
13524: GREATER
13525: OR
13526: PUSH
13527: LD_VAR 0 8
13531: PUSH
13532: LD_INT 2
13534: ARRAY
13535: PUSH
13536: LD_VAR 0 13
13540: PUSH
13541: LD_INT 2
13543: MINUS
13544: LESS
13545: OR
13546: PUSH
13547: LD_VAR 0 8
13551: PUSH
13552: LD_INT 3
13554: ARRAY
13555: PUSH
13556: LD_INT 0
13558: PUSH
13559: LD_INT 8
13561: PUSH
13562: LD_INT 9
13564: PUSH
13565: LD_INT 10
13567: PUSH
13568: LD_INT 11
13570: PUSH
13571: LD_INT 12
13573: PUSH
13574: LD_INT 13
13576: PUSH
13577: LD_INT 16
13579: PUSH
13580: LD_INT 17
13582: PUSH
13583: LD_INT 18
13585: PUSH
13586: LD_INT 19
13588: PUSH
13589: LD_INT 20
13591: PUSH
13592: LD_INT 21
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: IN
13610: NOT
13611: OR
13612: PUSH
13613: LD_VAR 0 8
13617: PUSH
13618: LD_INT 5
13620: ARRAY
13621: NOT
13622: OR
13623: PUSH
13624: LD_VAR 0 8
13628: PUSH
13629: LD_INT 6
13631: ARRAY
13632: PUSH
13633: LD_INT 1
13635: PUSH
13636: LD_INT 2
13638: PUSH
13639: LD_INT 7
13641: PUSH
13642: LD_INT 9
13644: PUSH
13645: LD_INT 10
13647: PUSH
13648: LD_INT 11
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: IN
13659: NOT
13660: OR
13661: IFFALSE 13667
// exit ;
13663: POP
13664: POP
13665: GO 13765
// end ;
13667: GO 13338
13669: POP
13670: POP
// side := GetSide ( depot ) ;
13671: LD_ADDR_VAR 0 9
13675: PUSH
13676: LD_VAR 0 1
13680: PPUSH
13681: CALL_OW 255
13685: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
13686: LD_VAR 0 9
13690: PPUSH
13691: LD_VAR 0 3
13695: PPUSH
13696: LD_VAR 0 4
13700: PPUSH
13701: LD_INT 20
13703: PPUSH
13704: CALL 6116 0 4
13708: PUSH
13709: LD_INT 4
13711: ARRAY
13712: IFFALSE 13716
// exit ;
13714: GO 13765
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
13716: LD_VAR 0 2
13720: PUSH
13721: LD_INT 29
13723: PUSH
13724: LD_INT 30
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: IN
13731: PUSH
13732: LD_VAR 0 3
13736: PPUSH
13737: LD_VAR 0 4
13741: PPUSH
13742: LD_VAR 0 9
13746: PPUSH
13747: CALL_OW 440
13751: NOT
13752: AND
13753: IFFALSE 13757
// exit ;
13755: GO 13765
// result := true ;
13757: LD_ADDR_VAR 0 6
13761: PUSH
13762: LD_INT 1
13764: ST_TO_ADDR
// end ;
13765: LD_VAR 0 6
13769: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
13770: LD_INT 0
13772: PPUSH
13773: PPUSH
13774: PPUSH
13775: PPUSH
13776: PPUSH
13777: PPUSH
13778: PPUSH
13779: PPUSH
13780: PPUSH
13781: PPUSH
13782: PPUSH
13783: PPUSH
13784: PPUSH
13785: PPUSH
13786: PPUSH
13787: PPUSH
13788: PPUSH
13789: PPUSH
13790: PPUSH
13791: PPUSH
13792: PPUSH
13793: PPUSH
13794: PPUSH
13795: PPUSH
13796: PPUSH
13797: PPUSH
13798: PPUSH
13799: PPUSH
13800: PPUSH
13801: PPUSH
13802: PPUSH
13803: PPUSH
13804: PPUSH
13805: PPUSH
13806: PPUSH
13807: PPUSH
13808: PPUSH
13809: PPUSH
13810: PPUSH
13811: PPUSH
13812: PPUSH
13813: PPUSH
13814: PPUSH
13815: PPUSH
13816: PPUSH
13817: PPUSH
13818: PPUSH
13819: PPUSH
13820: PPUSH
13821: PPUSH
13822: PPUSH
13823: PPUSH
13824: PPUSH
13825: PPUSH
13826: PPUSH
13827: PPUSH
13828: PPUSH
13829: PPUSH
// result = [ ] ;
13830: LD_ADDR_VAR 0 7
13834: PUSH
13835: EMPTY
13836: ST_TO_ADDR
// temp_list = [ ] ;
13837: LD_ADDR_VAR 0 9
13841: PUSH
13842: EMPTY
13843: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
13844: LD_VAR 0 4
13848: PUSH
13849: LD_INT 0
13851: PUSH
13852: LD_INT 1
13854: PUSH
13855: LD_INT 2
13857: PUSH
13858: LD_INT 3
13860: PUSH
13861: LD_INT 4
13863: PUSH
13864: LD_INT 5
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: IN
13875: NOT
13876: PUSH
13877: LD_VAR 0 1
13881: PUSH
13882: LD_INT 0
13884: PUSH
13885: LD_INT 1
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: IN
13892: PUSH
13893: LD_VAR 0 5
13897: PUSH
13898: LD_INT 1
13900: PUSH
13901: LD_INT 2
13903: PUSH
13904: LD_INT 3
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: LIST
13911: IN
13912: NOT
13913: AND
13914: OR
13915: IFFALSE 13919
// exit ;
13917: GO 32310
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
13919: LD_VAR 0 1
13923: PUSH
13924: LD_INT 6
13926: PUSH
13927: LD_INT 7
13929: PUSH
13930: LD_INT 8
13932: PUSH
13933: LD_INT 13
13935: PUSH
13936: LD_INT 12
13938: PUSH
13939: LD_INT 15
13941: PUSH
13942: LD_INT 11
13944: PUSH
13945: LD_INT 14
13947: PUSH
13948: LD_INT 10
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: IN
13962: IFFALSE 13972
// btype = b_lab ;
13964: LD_ADDR_VAR 0 1
13968: PUSH
13969: LD_INT 6
13971: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
13972: LD_VAR 0 6
13976: PUSH
13977: LD_INT 0
13979: PUSH
13980: LD_INT 1
13982: PUSH
13983: LD_INT 2
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: IN
13991: NOT
13992: PUSH
13993: LD_VAR 0 1
13997: PUSH
13998: LD_INT 0
14000: PUSH
14001: LD_INT 1
14003: PUSH
14004: LD_INT 2
14006: PUSH
14007: LD_INT 3
14009: PUSH
14010: LD_INT 6
14012: PUSH
14013: LD_INT 36
14015: PUSH
14016: LD_INT 4
14018: PUSH
14019: LD_INT 5
14021: PUSH
14022: LD_INT 31
14024: PUSH
14025: LD_INT 32
14027: PUSH
14028: LD_INT 33
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: IN
14044: NOT
14045: PUSH
14046: LD_VAR 0 6
14050: PUSH
14051: LD_INT 1
14053: EQUAL
14054: AND
14055: OR
14056: PUSH
14057: LD_VAR 0 1
14061: PUSH
14062: LD_INT 2
14064: PUSH
14065: LD_INT 3
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: IN
14072: NOT
14073: PUSH
14074: LD_VAR 0 6
14078: PUSH
14079: LD_INT 2
14081: EQUAL
14082: AND
14083: OR
14084: IFFALSE 14094
// mode = 0 ;
14086: LD_ADDR_VAR 0 6
14090: PUSH
14091: LD_INT 0
14093: ST_TO_ADDR
// case mode of 0 :
14094: LD_VAR 0 6
14098: PUSH
14099: LD_INT 0
14101: DOUBLE
14102: EQUAL
14103: IFTRUE 14107
14105: GO 25560
14107: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14108: LD_ADDR_VAR 0 11
14112: PUSH
14113: LD_INT 0
14115: PUSH
14116: LD_INT 0
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PUSH
14123: LD_INT 0
14125: PUSH
14126: LD_INT 1
14128: NEG
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: LD_INT 1
14136: PUSH
14137: LD_INT 0
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 1
14146: PUSH
14147: LD_INT 1
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 0
14156: PUSH
14157: LD_INT 1
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: LD_INT 1
14166: NEG
14167: PUSH
14168: LD_INT 0
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PUSH
14175: LD_INT 1
14177: NEG
14178: PUSH
14179: LD_INT 1
14181: NEG
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 1
14189: NEG
14190: PUSH
14191: LD_INT 2
14193: NEG
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: LD_INT 0
14201: PUSH
14202: LD_INT 2
14204: NEG
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: LD_INT 1
14212: PUSH
14213: LD_INT 1
14215: NEG
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 1
14223: PUSH
14224: LD_INT 2
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 0
14233: PUSH
14234: LD_INT 2
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: LD_INT 1
14243: NEG
14244: PUSH
14245: LD_INT 1
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: LD_INT 1
14254: PUSH
14255: LD_INT 3
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 0
14264: PUSH
14265: LD_INT 3
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: LD_INT 1
14274: NEG
14275: PUSH
14276: LD_INT 2
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
14301: LD_ADDR_VAR 0 12
14305: PUSH
14306: LD_INT 0
14308: PUSH
14309: LD_INT 0
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 0
14318: PUSH
14319: LD_INT 1
14321: NEG
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 1
14329: PUSH
14330: LD_INT 0
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: LD_INT 1
14339: PUSH
14340: LD_INT 1
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 0
14349: PUSH
14350: LD_INT 1
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 1
14359: NEG
14360: PUSH
14361: LD_INT 0
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: LD_INT 1
14370: NEG
14371: PUSH
14372: LD_INT 1
14374: NEG
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 1
14382: PUSH
14383: LD_INT 1
14385: NEG
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PUSH
14391: LD_INT 2
14393: PUSH
14394: LD_INT 0
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: LD_INT 1
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PUSH
14411: LD_INT 1
14413: NEG
14414: PUSH
14415: LD_INT 1
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: LD_INT 2
14424: NEG
14425: PUSH
14426: LD_INT 0
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 2
14435: NEG
14436: PUSH
14437: LD_INT 1
14439: NEG
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 2
14447: NEG
14448: PUSH
14449: LD_INT 1
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: LD_INT 3
14458: NEG
14459: PUSH
14460: LD_INT 0
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: LD_INT 3
14469: NEG
14470: PUSH
14471: LD_INT 1
14473: NEG
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
14497: LD_ADDR_VAR 0 13
14501: PUSH
14502: LD_INT 0
14504: PUSH
14505: LD_INT 0
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: PUSH
14512: LD_INT 0
14514: PUSH
14515: LD_INT 1
14517: NEG
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: LD_INT 1
14525: PUSH
14526: LD_INT 0
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PUSH
14533: LD_INT 1
14535: PUSH
14536: LD_INT 1
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: PUSH
14543: LD_INT 0
14545: PUSH
14546: LD_INT 1
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: PUSH
14553: LD_INT 1
14555: NEG
14556: PUSH
14557: LD_INT 0
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PUSH
14564: LD_INT 1
14566: NEG
14567: PUSH
14568: LD_INT 1
14570: NEG
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: LD_INT 1
14578: NEG
14579: PUSH
14580: LD_INT 2
14582: NEG
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: LD_INT 2
14590: PUSH
14591: LD_INT 1
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PUSH
14598: LD_INT 2
14600: PUSH
14601: LD_INT 2
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 1
14610: PUSH
14611: LD_INT 2
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: LD_INT 2
14620: NEG
14621: PUSH
14622: LD_INT 1
14624: NEG
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: LD_INT 2
14632: NEG
14633: PUSH
14634: LD_INT 2
14636: NEG
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 2
14644: NEG
14645: PUSH
14646: LD_INT 3
14648: NEG
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 3
14656: NEG
14657: PUSH
14658: LD_INT 2
14660: NEG
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: PUSH
14666: LD_INT 3
14668: NEG
14669: PUSH
14670: LD_INT 3
14672: NEG
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
14696: LD_ADDR_VAR 0 14
14700: PUSH
14701: LD_INT 0
14703: PUSH
14704: LD_INT 0
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 0
14713: PUSH
14714: LD_INT 1
14716: NEG
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: PUSH
14722: LD_INT 1
14724: PUSH
14725: LD_INT 0
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: LD_INT 1
14734: PUSH
14735: LD_INT 1
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: LD_INT 0
14744: PUSH
14745: LD_INT 1
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 1
14754: NEG
14755: PUSH
14756: LD_INT 0
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: LD_INT 1
14765: NEG
14766: PUSH
14767: LD_INT 1
14769: NEG
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: LD_INT 1
14777: NEG
14778: PUSH
14779: LD_INT 2
14781: NEG
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 0
14789: PUSH
14790: LD_INT 2
14792: NEG
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 1
14800: PUSH
14801: LD_INT 1
14803: NEG
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: PUSH
14809: LD_INT 1
14811: PUSH
14812: LD_INT 2
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 0
14821: PUSH
14822: LD_INT 2
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 1
14831: NEG
14832: PUSH
14833: LD_INT 1
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: LD_INT 1
14842: NEG
14843: PUSH
14844: LD_INT 3
14846: NEG
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: LD_INT 0
14854: PUSH
14855: LD_INT 3
14857: NEG
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: LD_INT 1
14865: PUSH
14866: LD_INT 2
14868: NEG
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
14892: LD_ADDR_VAR 0 15
14896: PUSH
14897: LD_INT 0
14899: PUSH
14900: LD_INT 0
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: LD_INT 0
14909: PUSH
14910: LD_INT 1
14912: NEG
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: PUSH
14918: LD_INT 1
14920: PUSH
14921: LD_INT 0
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: LD_INT 1
14930: PUSH
14931: LD_INT 1
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 0
14940: PUSH
14941: LD_INT 1
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: LD_INT 1
14950: NEG
14951: PUSH
14952: LD_INT 0
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PUSH
14959: LD_INT 1
14961: NEG
14962: PUSH
14963: LD_INT 1
14965: NEG
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PUSH
14971: LD_INT 1
14973: PUSH
14974: LD_INT 1
14976: NEG
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 2
14984: PUSH
14985: LD_INT 0
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 2
14994: PUSH
14995: LD_INT 1
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 1
15004: NEG
15005: PUSH
15006: LD_INT 1
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 2
15015: NEG
15016: PUSH
15017: LD_INT 0
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 2
15026: NEG
15027: PUSH
15028: LD_INT 1
15030: NEG
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 2
15038: PUSH
15039: LD_INT 1
15041: NEG
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PUSH
15047: LD_INT 3
15049: PUSH
15050: LD_INT 0
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: LD_INT 3
15059: PUSH
15060: LD_INT 1
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15085: LD_ADDR_VAR 0 16
15089: PUSH
15090: LD_INT 0
15092: PUSH
15093: LD_INT 0
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 0
15102: PUSH
15103: LD_INT 1
15105: NEG
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 1
15113: PUSH
15114: LD_INT 0
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 1
15123: PUSH
15124: LD_INT 1
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 0
15133: PUSH
15134: LD_INT 1
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: LD_INT 1
15143: NEG
15144: PUSH
15145: LD_INT 0
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PUSH
15152: LD_INT 1
15154: NEG
15155: PUSH
15156: LD_INT 1
15158: NEG
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 1
15166: NEG
15167: PUSH
15168: LD_INT 2
15170: NEG
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: LD_INT 2
15178: PUSH
15179: LD_INT 1
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PUSH
15186: LD_INT 2
15188: PUSH
15189: LD_INT 2
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: PUSH
15196: LD_INT 1
15198: PUSH
15199: LD_INT 2
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PUSH
15206: LD_INT 2
15208: NEG
15209: PUSH
15210: LD_INT 1
15212: NEG
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: LD_INT 2
15220: NEG
15221: PUSH
15222: LD_INT 2
15224: NEG
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 3
15232: PUSH
15233: LD_INT 2
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 3
15242: PUSH
15243: LD_INT 3
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: LD_INT 2
15252: PUSH
15253: LD_INT 3
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15278: LD_ADDR_VAR 0 17
15282: PUSH
15283: LD_INT 0
15285: PUSH
15286: LD_INT 0
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: LD_INT 0
15295: PUSH
15296: LD_INT 1
15298: NEG
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: PUSH
15304: LD_INT 1
15306: PUSH
15307: LD_INT 0
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 1
15316: PUSH
15317: LD_INT 1
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: LD_INT 0
15326: PUSH
15327: LD_INT 1
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: LD_INT 1
15336: NEG
15337: PUSH
15338: LD_INT 0
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: PUSH
15345: LD_INT 1
15347: NEG
15348: PUSH
15349: LD_INT 1
15351: NEG
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 1
15359: NEG
15360: PUSH
15361: LD_INT 2
15363: NEG
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PUSH
15369: LD_INT 0
15371: PUSH
15372: LD_INT 2
15374: NEG
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 1
15382: PUSH
15383: LD_INT 1
15385: NEG
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 2
15393: PUSH
15394: LD_INT 0
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 2
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 2
15413: PUSH
15414: LD_INT 2
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 1
15423: PUSH
15424: LD_INT 2
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 0
15433: PUSH
15434: LD_INT 2
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 1
15443: NEG
15444: PUSH
15445: LD_INT 1
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: LD_INT 2
15454: NEG
15455: PUSH
15456: LD_INT 0
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: LD_INT 2
15465: NEG
15466: PUSH
15467: LD_INT 1
15469: NEG
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 2
15477: NEG
15478: PUSH
15479: LD_INT 2
15481: NEG
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15508: LD_ADDR_VAR 0 18
15512: PUSH
15513: LD_INT 0
15515: PUSH
15516: LD_INT 0
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: LD_INT 0
15525: PUSH
15526: LD_INT 1
15528: NEG
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 1
15536: PUSH
15537: LD_INT 0
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 1
15546: PUSH
15547: LD_INT 1
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 0
15556: PUSH
15557: LD_INT 1
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 1
15566: NEG
15567: PUSH
15568: LD_INT 0
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PUSH
15575: LD_INT 1
15577: NEG
15578: PUSH
15579: LD_INT 1
15581: NEG
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 1
15589: NEG
15590: PUSH
15591: LD_INT 2
15593: NEG
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: LD_INT 0
15601: PUSH
15602: LD_INT 2
15604: NEG
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 1
15612: PUSH
15613: LD_INT 1
15615: NEG
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 2
15623: PUSH
15624: LD_INT 0
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 2
15633: PUSH
15634: LD_INT 1
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 2
15643: PUSH
15644: LD_INT 2
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 1
15653: PUSH
15654: LD_INT 2
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 0
15663: PUSH
15664: LD_INT 2
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: LD_INT 1
15673: NEG
15674: PUSH
15675: LD_INT 1
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 2
15684: NEG
15685: PUSH
15686: LD_INT 0
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 2
15695: NEG
15696: PUSH
15697: LD_INT 1
15699: NEG
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: LD_INT 2
15707: NEG
15708: PUSH
15709: LD_INT 2
15711: NEG
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15738: LD_ADDR_VAR 0 19
15742: PUSH
15743: LD_INT 0
15745: PUSH
15746: LD_INT 0
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: LD_INT 0
15755: PUSH
15756: LD_INT 1
15758: NEG
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: PUSH
15764: LD_INT 1
15766: PUSH
15767: LD_INT 0
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: LD_INT 1
15776: PUSH
15777: LD_INT 1
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: LD_INT 0
15786: PUSH
15787: LD_INT 1
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: LD_INT 1
15796: NEG
15797: PUSH
15798: LD_INT 0
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PUSH
15805: LD_INT 1
15807: NEG
15808: PUSH
15809: LD_INT 1
15811: NEG
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: LD_INT 1
15819: NEG
15820: PUSH
15821: LD_INT 2
15823: NEG
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: LD_INT 0
15831: PUSH
15832: LD_INT 2
15834: NEG
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: LD_INT 1
15842: PUSH
15843: LD_INT 1
15845: NEG
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: LD_INT 2
15853: PUSH
15854: LD_INT 0
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: LD_INT 2
15863: PUSH
15864: LD_INT 1
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 2
15873: PUSH
15874: LD_INT 2
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 1
15883: PUSH
15884: LD_INT 2
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 0
15893: PUSH
15894: LD_INT 2
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 1
15903: NEG
15904: PUSH
15905: LD_INT 1
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: LD_INT 2
15914: NEG
15915: PUSH
15916: LD_INT 0
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 2
15925: NEG
15926: PUSH
15927: LD_INT 1
15929: NEG
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: LD_INT 2
15937: NEG
15938: PUSH
15939: LD_INT 2
15941: NEG
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15968: LD_ADDR_VAR 0 20
15972: PUSH
15973: LD_INT 0
15975: PUSH
15976: LD_INT 0
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 0
15985: PUSH
15986: LD_INT 1
15988: NEG
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 1
15996: PUSH
15997: LD_INT 0
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 1
16006: PUSH
16007: LD_INT 1
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 0
16016: PUSH
16017: LD_INT 1
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 1
16026: NEG
16027: PUSH
16028: LD_INT 0
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 1
16037: NEG
16038: PUSH
16039: LD_INT 1
16041: NEG
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 1
16049: NEG
16050: PUSH
16051: LD_INT 2
16053: NEG
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: LD_INT 0
16061: PUSH
16062: LD_INT 2
16064: NEG
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PUSH
16070: LD_INT 1
16072: PUSH
16073: LD_INT 1
16075: NEG
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: PUSH
16081: LD_INT 2
16083: PUSH
16084: LD_INT 0
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: PUSH
16091: LD_INT 2
16093: PUSH
16094: LD_INT 1
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PUSH
16101: LD_INT 2
16103: PUSH
16104: LD_INT 2
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 1
16113: PUSH
16114: LD_INT 2
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: LD_INT 0
16123: PUSH
16124: LD_INT 2
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: PUSH
16131: LD_INT 1
16133: NEG
16134: PUSH
16135: LD_INT 1
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 2
16144: NEG
16145: PUSH
16146: LD_INT 0
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 2
16155: NEG
16156: PUSH
16157: LD_INT 1
16159: NEG
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 2
16167: NEG
16168: PUSH
16169: LD_INT 2
16171: NEG
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16198: LD_ADDR_VAR 0 21
16202: PUSH
16203: LD_INT 0
16205: PUSH
16206: LD_INT 0
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 0
16215: PUSH
16216: LD_INT 1
16218: NEG
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: LD_INT 1
16226: PUSH
16227: LD_INT 0
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: LD_INT 1
16236: PUSH
16237: LD_INT 1
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: LD_INT 0
16246: PUSH
16247: LD_INT 1
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 1
16256: NEG
16257: PUSH
16258: LD_INT 0
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: LD_INT 1
16267: NEG
16268: PUSH
16269: LD_INT 1
16271: NEG
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 1
16279: NEG
16280: PUSH
16281: LD_INT 2
16283: NEG
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 0
16291: PUSH
16292: LD_INT 2
16294: NEG
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 1
16302: PUSH
16303: LD_INT 1
16305: NEG
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 2
16313: PUSH
16314: LD_INT 0
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: LD_INT 2
16323: PUSH
16324: LD_INT 1
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PUSH
16331: LD_INT 2
16333: PUSH
16334: LD_INT 2
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: LD_INT 1
16343: PUSH
16344: LD_INT 2
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 0
16353: PUSH
16354: LD_INT 2
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PUSH
16361: LD_INT 1
16363: NEG
16364: PUSH
16365: LD_INT 1
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: LD_INT 2
16374: NEG
16375: PUSH
16376: LD_INT 0
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: LD_INT 2
16385: NEG
16386: PUSH
16387: LD_INT 1
16389: NEG
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 2
16397: NEG
16398: PUSH
16399: LD_INT 2
16401: NEG
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16428: LD_ADDR_VAR 0 22
16432: PUSH
16433: LD_INT 0
16435: PUSH
16436: LD_INT 0
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 0
16445: PUSH
16446: LD_INT 1
16448: NEG
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 1
16456: PUSH
16457: LD_INT 0
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 1
16466: PUSH
16467: LD_INT 1
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 0
16476: PUSH
16477: LD_INT 1
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 1
16486: NEG
16487: PUSH
16488: LD_INT 0
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 1
16497: NEG
16498: PUSH
16499: LD_INT 1
16501: NEG
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 1
16509: NEG
16510: PUSH
16511: LD_INT 2
16513: NEG
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 0
16521: PUSH
16522: LD_INT 2
16524: NEG
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 1
16532: PUSH
16533: LD_INT 1
16535: NEG
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 2
16543: PUSH
16544: LD_INT 0
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: LD_INT 2
16553: PUSH
16554: LD_INT 1
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 2
16563: PUSH
16564: LD_INT 2
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 1
16573: PUSH
16574: LD_INT 2
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 0
16583: PUSH
16584: LD_INT 2
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 1
16593: NEG
16594: PUSH
16595: LD_INT 1
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 2
16604: NEG
16605: PUSH
16606: LD_INT 0
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 2
16615: NEG
16616: PUSH
16617: LD_INT 1
16619: NEG
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 2
16627: NEG
16628: PUSH
16629: LD_INT 2
16631: NEG
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
16658: LD_ADDR_VAR 0 23
16662: PUSH
16663: LD_INT 0
16665: PUSH
16666: LD_INT 0
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 0
16675: PUSH
16676: LD_INT 1
16678: NEG
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 1
16686: PUSH
16687: LD_INT 0
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 1
16696: PUSH
16697: LD_INT 1
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 0
16706: PUSH
16707: LD_INT 1
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 1
16716: NEG
16717: PUSH
16718: LD_INT 0
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: LD_INT 1
16727: NEG
16728: PUSH
16729: LD_INT 1
16731: NEG
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 1
16739: NEG
16740: PUSH
16741: LD_INT 2
16743: NEG
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: LD_INT 0
16751: PUSH
16752: LD_INT 2
16754: NEG
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 1
16762: PUSH
16763: LD_INT 1
16765: NEG
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: LD_INT 2
16773: PUSH
16774: LD_INT 0
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 2
16783: PUSH
16784: LD_INT 1
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 2
16793: PUSH
16794: LD_INT 2
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 1
16803: PUSH
16804: LD_INT 2
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 0
16813: PUSH
16814: LD_INT 2
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 1
16823: NEG
16824: PUSH
16825: LD_INT 1
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: LD_INT 2
16834: NEG
16835: PUSH
16836: LD_INT 0
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 2
16845: NEG
16846: PUSH
16847: LD_INT 1
16849: NEG
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: LD_INT 2
16857: NEG
16858: PUSH
16859: LD_INT 2
16861: NEG
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 2
16869: NEG
16870: PUSH
16871: LD_INT 3
16873: NEG
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 1
16881: NEG
16882: PUSH
16883: LD_INT 3
16885: NEG
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 1
16893: PUSH
16894: LD_INT 2
16896: NEG
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 2
16904: PUSH
16905: LD_INT 1
16907: NEG
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
16938: LD_ADDR_VAR 0 24
16942: PUSH
16943: LD_INT 0
16945: PUSH
16946: LD_INT 0
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: LD_INT 0
16955: PUSH
16956: LD_INT 1
16958: NEG
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 1
16966: PUSH
16967: LD_INT 0
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 1
16976: PUSH
16977: LD_INT 1
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: LD_INT 0
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 1
16996: NEG
16997: PUSH
16998: LD_INT 0
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PUSH
17005: LD_INT 1
17007: NEG
17008: PUSH
17009: LD_INT 1
17011: NEG
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 1
17019: NEG
17020: PUSH
17021: LD_INT 2
17023: NEG
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PUSH
17029: LD_INT 0
17031: PUSH
17032: LD_INT 2
17034: NEG
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 1
17042: PUSH
17043: LD_INT 1
17045: NEG
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 2
17053: PUSH
17054: LD_INT 0
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: LD_INT 2
17063: PUSH
17064: LD_INT 1
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 2
17073: PUSH
17074: LD_INT 2
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 1
17083: PUSH
17084: LD_INT 2
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: LD_INT 0
17093: PUSH
17094: LD_INT 2
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 1
17103: NEG
17104: PUSH
17105: LD_INT 1
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 2
17114: NEG
17115: PUSH
17116: LD_INT 0
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: LD_INT 2
17125: NEG
17126: PUSH
17127: LD_INT 1
17129: NEG
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 2
17137: NEG
17138: PUSH
17139: LD_INT 2
17141: NEG
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 1
17149: PUSH
17150: LD_INT 2
17152: NEG
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 2
17160: PUSH
17161: LD_INT 1
17163: NEG
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: LD_INT 3
17171: PUSH
17172: LD_INT 1
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: LD_INT 3
17181: PUSH
17182: LD_INT 2
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
17214: LD_ADDR_VAR 0 25
17218: PUSH
17219: LD_INT 0
17221: PUSH
17222: LD_INT 0
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: LD_INT 0
17231: PUSH
17232: LD_INT 1
17234: NEG
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 1
17242: PUSH
17243: LD_INT 0
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 1
17252: PUSH
17253: LD_INT 1
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: LD_INT 0
17262: PUSH
17263: LD_INT 1
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PUSH
17270: LD_INT 1
17272: NEG
17273: PUSH
17274: LD_INT 0
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 1
17283: NEG
17284: PUSH
17285: LD_INT 1
17287: NEG
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 1
17295: NEG
17296: PUSH
17297: LD_INT 2
17299: NEG
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 0
17307: PUSH
17308: LD_INT 2
17310: NEG
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PUSH
17316: LD_INT 1
17318: PUSH
17319: LD_INT 1
17321: NEG
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 2
17329: PUSH
17330: LD_INT 0
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 2
17339: PUSH
17340: LD_INT 1
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 2
17349: PUSH
17350: LD_INT 2
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 1
17359: PUSH
17360: LD_INT 2
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 0
17369: PUSH
17370: LD_INT 2
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 1
17379: NEG
17380: PUSH
17381: LD_INT 1
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 2
17390: NEG
17391: PUSH
17392: LD_INT 0
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 2
17401: NEG
17402: PUSH
17403: LD_INT 1
17405: NEG
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: LD_INT 2
17413: NEG
17414: PUSH
17415: LD_INT 2
17417: NEG
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 3
17425: PUSH
17426: LD_INT 1
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 3
17435: PUSH
17436: LD_INT 2
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 2
17445: PUSH
17446: LD_INT 3
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 1
17455: PUSH
17456: LD_INT 3
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
17488: LD_ADDR_VAR 0 26
17492: PUSH
17493: LD_INT 0
17495: PUSH
17496: LD_INT 0
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 0
17505: PUSH
17506: LD_INT 1
17508: NEG
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 1
17516: PUSH
17517: LD_INT 0
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 1
17526: PUSH
17527: LD_INT 1
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 0
17536: PUSH
17537: LD_INT 1
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 1
17546: NEG
17547: PUSH
17548: LD_INT 0
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 1
17557: NEG
17558: PUSH
17559: LD_INT 1
17561: NEG
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 1
17569: NEG
17570: PUSH
17571: LD_INT 2
17573: NEG
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 0
17581: PUSH
17582: LD_INT 2
17584: NEG
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 1
17592: PUSH
17593: LD_INT 1
17595: NEG
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 2
17603: PUSH
17604: LD_INT 0
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 2
17613: PUSH
17614: LD_INT 1
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 2
17623: PUSH
17624: LD_INT 2
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: LD_INT 1
17633: PUSH
17634: LD_INT 2
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: LD_INT 0
17643: PUSH
17644: LD_INT 2
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 1
17653: NEG
17654: PUSH
17655: LD_INT 1
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 2
17664: NEG
17665: PUSH
17666: LD_INT 0
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PUSH
17673: LD_INT 2
17675: NEG
17676: PUSH
17677: LD_INT 1
17679: NEG
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 2
17687: NEG
17688: PUSH
17689: LD_INT 2
17691: NEG
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 2
17699: PUSH
17700: LD_INT 3
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 1
17709: PUSH
17710: LD_INT 3
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 1
17719: NEG
17720: PUSH
17721: LD_INT 2
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 2
17730: NEG
17731: PUSH
17732: LD_INT 1
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
17764: LD_ADDR_VAR 0 27
17768: PUSH
17769: LD_INT 0
17771: PUSH
17772: LD_INT 0
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 0
17781: PUSH
17782: LD_INT 1
17784: NEG
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 1
17792: PUSH
17793: LD_INT 0
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 1
17802: PUSH
17803: LD_INT 1
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 0
17812: PUSH
17813: LD_INT 1
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 1
17822: NEG
17823: PUSH
17824: LD_INT 0
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: NEG
17834: PUSH
17835: LD_INT 1
17837: NEG
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 1
17845: NEG
17846: PUSH
17847: LD_INT 2
17849: NEG
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 0
17857: PUSH
17858: LD_INT 2
17860: NEG
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 1
17868: PUSH
17869: LD_INT 1
17871: NEG
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 2
17879: PUSH
17880: LD_INT 0
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 2
17889: PUSH
17890: LD_INT 1
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 2
17899: PUSH
17900: LD_INT 2
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 1
17909: PUSH
17910: LD_INT 2
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 0
17919: PUSH
17920: LD_INT 2
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 1
17929: NEG
17930: PUSH
17931: LD_INT 1
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 2
17940: NEG
17941: PUSH
17942: LD_INT 0
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 2
17951: NEG
17952: PUSH
17953: LD_INT 1
17955: NEG
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 2
17963: NEG
17964: PUSH
17965: LD_INT 2
17967: NEG
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 1
17975: NEG
17976: PUSH
17977: LD_INT 2
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 2
17986: NEG
17987: PUSH
17988: LD_INT 1
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 3
17997: NEG
17998: PUSH
17999: LD_INT 1
18001: NEG
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 3
18009: NEG
18010: PUSH
18011: LD_INT 2
18013: NEG
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18044: LD_ADDR_VAR 0 28
18048: PUSH
18049: LD_INT 0
18051: PUSH
18052: LD_INT 0
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 0
18061: PUSH
18062: LD_INT 1
18064: NEG
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 1
18072: PUSH
18073: LD_INT 0
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 1
18082: PUSH
18083: LD_INT 1
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 0
18092: PUSH
18093: LD_INT 1
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: LD_INT 1
18102: NEG
18103: PUSH
18104: LD_INT 0
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 1
18113: NEG
18114: PUSH
18115: LD_INT 1
18117: NEG
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 1
18125: NEG
18126: PUSH
18127: LD_INT 2
18129: NEG
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 0
18137: PUSH
18138: LD_INT 2
18140: NEG
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: LD_INT 1
18151: NEG
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 2
18159: PUSH
18160: LD_INT 0
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 2
18169: PUSH
18170: LD_INT 1
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 2
18179: PUSH
18180: LD_INT 2
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 1
18189: PUSH
18190: LD_INT 2
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 0
18199: PUSH
18200: LD_INT 2
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 1
18209: NEG
18210: PUSH
18211: LD_INT 1
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 2
18220: NEG
18221: PUSH
18222: LD_INT 0
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 2
18231: NEG
18232: PUSH
18233: LD_INT 1
18235: NEG
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 2
18243: NEG
18244: PUSH
18245: LD_INT 2
18247: NEG
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 2
18255: NEG
18256: PUSH
18257: LD_INT 3
18259: NEG
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 1
18267: NEG
18268: PUSH
18269: LD_INT 3
18271: NEG
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 3
18279: NEG
18280: PUSH
18281: LD_INT 1
18283: NEG
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 3
18291: NEG
18292: PUSH
18293: LD_INT 2
18295: NEG
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18326: LD_ADDR_VAR 0 29
18330: PUSH
18331: LD_INT 0
18333: PUSH
18334: LD_INT 0
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 0
18343: PUSH
18344: LD_INT 1
18346: NEG
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: LD_INT 1
18354: PUSH
18355: LD_INT 0
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 1
18364: PUSH
18365: LD_INT 1
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 0
18374: PUSH
18375: LD_INT 1
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 1
18384: NEG
18385: PUSH
18386: LD_INT 0
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 1
18395: NEG
18396: PUSH
18397: LD_INT 1
18399: NEG
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 1
18407: NEG
18408: PUSH
18409: LD_INT 2
18411: NEG
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 0
18419: PUSH
18420: LD_INT 2
18422: NEG
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 1
18430: PUSH
18431: LD_INT 1
18433: NEG
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 2
18441: PUSH
18442: LD_INT 0
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 2
18451: PUSH
18452: LD_INT 1
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 1
18461: PUSH
18462: LD_INT 2
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 0
18471: PUSH
18472: LD_INT 2
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: LD_INT 1
18481: NEG
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 2
18492: NEG
18493: PUSH
18494: LD_INT 1
18496: NEG
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 2
18504: NEG
18505: PUSH
18506: LD_INT 2
18508: NEG
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 2
18516: NEG
18517: PUSH
18518: LD_INT 3
18520: NEG
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 2
18528: PUSH
18529: LD_INT 1
18531: NEG
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 3
18539: PUSH
18540: LD_INT 1
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 1
18549: PUSH
18550: LD_INT 3
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 1
18559: NEG
18560: PUSH
18561: LD_INT 2
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 3
18570: NEG
18571: PUSH
18572: LD_INT 2
18574: NEG
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
18605: LD_ADDR_VAR 0 30
18609: PUSH
18610: LD_INT 0
18612: PUSH
18613: LD_INT 0
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 0
18622: PUSH
18623: LD_INT 1
18625: NEG
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 1
18633: PUSH
18634: LD_INT 0
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 1
18643: PUSH
18644: LD_INT 1
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 0
18653: PUSH
18654: LD_INT 1
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 1
18663: NEG
18664: PUSH
18665: LD_INT 0
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 1
18674: NEG
18675: PUSH
18676: LD_INT 1
18678: NEG
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 1
18686: NEG
18687: PUSH
18688: LD_INT 2
18690: NEG
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 0
18698: PUSH
18699: LD_INT 2
18701: NEG
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 1
18709: PUSH
18710: LD_INT 1
18712: NEG
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 2
18720: PUSH
18721: LD_INT 0
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 2
18730: PUSH
18731: LD_INT 1
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 2
18740: PUSH
18741: LD_INT 2
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 1
18750: PUSH
18751: LD_INT 2
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 1
18760: NEG
18761: PUSH
18762: LD_INT 1
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 2
18771: NEG
18772: PUSH
18773: LD_INT 0
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 2
18782: NEG
18783: PUSH
18784: LD_INT 1
18786: NEG
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 1
18794: NEG
18795: PUSH
18796: LD_INT 3
18798: NEG
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 1
18806: PUSH
18807: LD_INT 2
18809: NEG
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 3
18817: PUSH
18818: LD_INT 2
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 2
18827: PUSH
18828: LD_INT 3
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 2
18837: NEG
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 3
18848: NEG
18849: PUSH
18850: LD_INT 1
18852: NEG
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18883: LD_ADDR_VAR 0 31
18887: PUSH
18888: LD_INT 0
18890: PUSH
18891: LD_INT 0
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 0
18900: PUSH
18901: LD_INT 1
18903: NEG
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: LD_INT 0
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 1
18921: PUSH
18922: LD_INT 1
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 0
18931: PUSH
18932: LD_INT 1
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 1
18941: NEG
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 1
18952: NEG
18953: PUSH
18954: LD_INT 1
18956: NEG
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: NEG
18965: PUSH
18966: LD_INT 2
18968: NEG
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: PUSH
18977: LD_INT 1
18979: NEG
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 2
18987: PUSH
18988: LD_INT 0
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 2
18997: PUSH
18998: LD_INT 1
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 2
19007: PUSH
19008: LD_INT 2
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 1
19017: PUSH
19018: LD_INT 2
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 0
19027: PUSH
19028: LD_INT 2
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 1
19037: NEG
19038: PUSH
19039: LD_INT 1
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 2
19048: NEG
19049: PUSH
19050: LD_INT 1
19052: NEG
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 2
19060: NEG
19061: PUSH
19062: LD_INT 2
19064: NEG
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 2
19072: NEG
19073: PUSH
19074: LD_INT 3
19076: NEG
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 2
19084: PUSH
19085: LD_INT 1
19087: NEG
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 3
19095: PUSH
19096: LD_INT 1
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 1
19105: PUSH
19106: LD_INT 3
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 1
19115: NEG
19116: PUSH
19117: LD_INT 2
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 3
19126: NEG
19127: PUSH
19128: LD_INT 2
19130: NEG
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19161: LD_ADDR_VAR 0 32
19165: PUSH
19166: LD_INT 0
19168: PUSH
19169: LD_INT 0
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 0
19178: PUSH
19179: LD_INT 1
19181: NEG
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 1
19189: PUSH
19190: LD_INT 0
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 1
19199: PUSH
19200: LD_INT 1
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 0
19209: PUSH
19210: LD_INT 1
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 1
19219: NEG
19220: PUSH
19221: LD_INT 0
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 1
19230: NEG
19231: PUSH
19232: LD_INT 1
19234: NEG
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 1
19242: NEG
19243: PUSH
19244: LD_INT 2
19246: NEG
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 0
19254: PUSH
19255: LD_INT 2
19257: NEG
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 1
19265: PUSH
19266: LD_INT 1
19268: NEG
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 2
19276: PUSH
19277: LD_INT 1
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 2
19286: PUSH
19287: LD_INT 2
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 0
19306: PUSH
19307: LD_INT 2
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 1
19316: NEG
19317: PUSH
19318: LD_INT 1
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 2
19327: NEG
19328: PUSH
19329: LD_INT 0
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 2
19338: NEG
19339: PUSH
19340: LD_INT 1
19342: NEG
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 1
19350: NEG
19351: PUSH
19352: LD_INT 3
19354: NEG
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 1
19362: PUSH
19363: LD_INT 2
19365: NEG
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 3
19373: PUSH
19374: LD_INT 2
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 2
19383: PUSH
19384: LD_INT 3
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 2
19393: NEG
19394: PUSH
19395: LD_INT 1
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 3
19404: NEG
19405: PUSH
19406: LD_INT 1
19408: NEG
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19439: LD_ADDR_VAR 0 33
19443: PUSH
19444: LD_INT 0
19446: PUSH
19447: LD_INT 0
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 0
19456: PUSH
19457: LD_INT 1
19459: NEG
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 1
19467: PUSH
19468: LD_INT 0
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 1
19477: PUSH
19478: LD_INT 1
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 0
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 1
19497: NEG
19498: PUSH
19499: LD_INT 0
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 1
19508: NEG
19509: PUSH
19510: LD_INT 1
19512: NEG
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 1
19520: NEG
19521: PUSH
19522: LD_INT 2
19524: NEG
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 1
19532: PUSH
19533: LD_INT 1
19535: NEG
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 2
19543: PUSH
19544: LD_INT 0
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 2
19553: PUSH
19554: LD_INT 1
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 1
19563: PUSH
19564: LD_INT 2
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 0
19573: PUSH
19574: LD_INT 2
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 1
19583: NEG
19584: PUSH
19585: LD_INT 1
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 2
19594: NEG
19595: PUSH
19596: LD_INT 0
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 2
19605: NEG
19606: PUSH
19607: LD_INT 1
19609: NEG
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 2
19617: NEG
19618: PUSH
19619: LD_INT 2
19621: NEG
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: NEG
19630: PUSH
19631: LD_INT 3
19633: NEG
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 2
19641: PUSH
19642: LD_INT 1
19644: NEG
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 3
19652: PUSH
19653: LD_INT 1
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 1
19662: PUSH
19663: LD_INT 3
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 1
19672: NEG
19673: PUSH
19674: LD_INT 2
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 3
19683: NEG
19684: PUSH
19685: LD_INT 2
19687: NEG
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19718: LD_ADDR_VAR 0 34
19722: PUSH
19723: LD_INT 0
19725: PUSH
19726: LD_INT 0
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 0
19735: PUSH
19736: LD_INT 1
19738: NEG
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 1
19746: PUSH
19747: LD_INT 0
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 1
19756: PUSH
19757: LD_INT 1
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 0
19766: PUSH
19767: LD_INT 1
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 1
19776: NEG
19777: PUSH
19778: LD_INT 0
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 1
19787: NEG
19788: PUSH
19789: LD_INT 1
19791: NEG
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 1
19799: NEG
19800: PUSH
19801: LD_INT 2
19803: NEG
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: LD_INT 0
19811: PUSH
19812: LD_INT 2
19814: NEG
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 1
19822: PUSH
19823: LD_INT 1
19825: NEG
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 2
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 2
19843: PUSH
19844: LD_INT 2
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 1
19853: PUSH
19854: LD_INT 2
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 1
19863: NEG
19864: PUSH
19865: LD_INT 1
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 2
19874: NEG
19875: PUSH
19876: LD_INT 0
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 2
19885: NEG
19886: PUSH
19887: LD_INT 1
19889: NEG
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 2
19897: NEG
19898: PUSH
19899: LD_INT 2
19901: NEG
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 1
19909: NEG
19910: PUSH
19911: LD_INT 3
19913: NEG
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 1
19921: PUSH
19922: LD_INT 2
19924: NEG
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 3
19932: PUSH
19933: LD_INT 2
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 2
19942: PUSH
19943: LD_INT 3
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 2
19952: NEG
19953: PUSH
19954: LD_INT 1
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 3
19963: NEG
19964: PUSH
19965: LD_INT 1
19967: NEG
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
19998: LD_ADDR_VAR 0 35
20002: PUSH
20003: LD_INT 0
20005: PUSH
20006: LD_INT 0
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 0
20015: PUSH
20016: LD_INT 1
20018: NEG
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 1
20026: PUSH
20027: LD_INT 0
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 1
20036: PUSH
20037: LD_INT 1
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: LD_INT 1
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 1
20056: NEG
20057: PUSH
20058: LD_INT 0
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 1
20067: NEG
20068: PUSH
20069: LD_INT 1
20071: NEG
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 2
20079: PUSH
20080: LD_INT 1
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 2
20089: NEG
20090: PUSH
20091: LD_INT 1
20093: NEG
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20110: LD_ADDR_VAR 0 36
20114: PUSH
20115: LD_INT 0
20117: PUSH
20118: LD_INT 0
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 0
20127: PUSH
20128: LD_INT 1
20130: NEG
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 1
20138: PUSH
20139: LD_INT 0
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 1
20148: PUSH
20149: LD_INT 1
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 0
20158: PUSH
20159: LD_INT 1
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 1
20168: NEG
20169: PUSH
20170: LD_INT 0
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 1
20179: NEG
20180: PUSH
20181: LD_INT 1
20183: NEG
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 1
20191: NEG
20192: PUSH
20193: LD_INT 2
20195: NEG
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 1
20203: PUSH
20204: LD_INT 2
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20222: LD_ADDR_VAR 0 37
20226: PUSH
20227: LD_INT 0
20229: PUSH
20230: LD_INT 0
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 0
20239: PUSH
20240: LD_INT 1
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 1
20250: PUSH
20251: LD_INT 0
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 1
20260: PUSH
20261: LD_INT 1
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: LD_INT 1
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 1
20280: NEG
20281: PUSH
20282: LD_INT 0
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 1
20291: NEG
20292: PUSH
20293: LD_INT 1
20295: NEG
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 1
20303: PUSH
20304: LD_INT 1
20306: NEG
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 1
20314: NEG
20315: PUSH
20316: LD_INT 1
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20334: LD_ADDR_VAR 0 38
20338: PUSH
20339: LD_INT 0
20341: PUSH
20342: LD_INT 0
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 0
20351: PUSH
20352: LD_INT 1
20354: NEG
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: LD_INT 0
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 1
20372: PUSH
20373: LD_INT 1
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 0
20382: PUSH
20383: LD_INT 1
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 1
20392: NEG
20393: PUSH
20394: LD_INT 0
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 1
20403: NEG
20404: PUSH
20405: LD_INT 1
20407: NEG
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 2
20415: PUSH
20416: LD_INT 1
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 2
20425: NEG
20426: PUSH
20427: LD_INT 1
20429: NEG
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20446: LD_ADDR_VAR 0 39
20450: PUSH
20451: LD_INT 0
20453: PUSH
20454: LD_INT 0
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 0
20463: PUSH
20464: LD_INT 1
20466: NEG
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 1
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 1
20484: PUSH
20485: LD_INT 1
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 0
20494: PUSH
20495: LD_INT 1
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 1
20504: NEG
20505: PUSH
20506: LD_INT 0
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 1
20515: NEG
20516: PUSH
20517: LD_INT 1
20519: NEG
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 1
20527: NEG
20528: PUSH
20529: LD_INT 2
20531: NEG
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 1
20539: PUSH
20540: LD_INT 2
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20558: LD_ADDR_VAR 0 40
20562: PUSH
20563: LD_INT 0
20565: PUSH
20566: LD_INT 0
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 0
20575: PUSH
20576: LD_INT 1
20578: NEG
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 1
20586: PUSH
20587: LD_INT 0
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 1
20596: PUSH
20597: LD_INT 1
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 0
20606: PUSH
20607: LD_INT 1
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 1
20616: NEG
20617: PUSH
20618: LD_INT 0
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 1
20627: NEG
20628: PUSH
20629: LD_INT 1
20631: NEG
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 1
20639: PUSH
20640: LD_INT 1
20642: NEG
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 1
20650: NEG
20651: PUSH
20652: LD_INT 1
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20670: LD_ADDR_VAR 0 41
20674: PUSH
20675: LD_INT 0
20677: PUSH
20678: LD_INT 0
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 0
20687: PUSH
20688: LD_INT 1
20690: NEG
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 1
20698: PUSH
20699: LD_INT 0
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 1
20708: PUSH
20709: LD_INT 1
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 0
20718: PUSH
20719: LD_INT 1
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 1
20728: NEG
20729: PUSH
20730: LD_INT 0
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 1
20739: NEG
20740: PUSH
20741: LD_INT 1
20743: NEG
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 1
20751: NEG
20752: PUSH
20753: LD_INT 2
20755: NEG
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 1
20763: PUSH
20764: LD_INT 1
20766: NEG
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 2
20774: PUSH
20775: LD_INT 0
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 2
20784: PUSH
20785: LD_INT 1
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 2
20794: PUSH
20795: LD_INT 2
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 1
20804: PUSH
20805: LD_INT 2
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 1
20814: NEG
20815: PUSH
20816: LD_INT 1
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 2
20825: NEG
20826: PUSH
20827: LD_INT 0
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 2
20836: NEG
20837: PUSH
20838: LD_INT 1
20840: NEG
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 2
20848: NEG
20849: PUSH
20850: LD_INT 2
20852: NEG
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 2
20860: NEG
20861: PUSH
20862: LD_INT 3
20864: NEG
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 2
20872: PUSH
20873: LD_INT 1
20875: NEG
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 3
20883: PUSH
20884: LD_INT 0
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 3
20893: PUSH
20894: LD_INT 1
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 3
20903: PUSH
20904: LD_INT 2
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 3
20913: PUSH
20914: LD_INT 3
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: LD_INT 3
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 2
20933: NEG
20934: PUSH
20935: LD_INT 1
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 3
20944: NEG
20945: PUSH
20946: LD_INT 0
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 3
20955: NEG
20956: PUSH
20957: LD_INT 1
20959: NEG
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 3
20967: NEG
20968: PUSH
20969: LD_INT 2
20971: NEG
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 3
20979: NEG
20980: PUSH
20981: LD_INT 3
20983: NEG
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21020: LD_ADDR_VAR 0 42
21024: PUSH
21025: LD_INT 0
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 0
21037: PUSH
21038: LD_INT 1
21040: NEG
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 1
21048: PUSH
21049: LD_INT 0
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 1
21058: PUSH
21059: LD_INT 1
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 0
21068: PUSH
21069: LD_INT 1
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 1
21078: NEG
21079: PUSH
21080: LD_INT 0
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 1
21089: NEG
21090: PUSH
21091: LD_INT 1
21093: NEG
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 1
21101: NEG
21102: PUSH
21103: LD_INT 2
21105: NEG
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 0
21113: PUSH
21114: LD_INT 2
21116: NEG
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 1
21124: PUSH
21125: LD_INT 1
21127: NEG
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 2
21135: PUSH
21136: LD_INT 1
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 2
21145: PUSH
21146: LD_INT 2
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 1
21155: PUSH
21156: LD_INT 2
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 0
21165: PUSH
21166: LD_INT 2
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 1
21175: NEG
21176: PUSH
21177: LD_INT 1
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 2
21186: NEG
21187: PUSH
21188: LD_INT 1
21190: NEG
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 2
21198: NEG
21199: PUSH
21200: LD_INT 2
21202: NEG
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 2
21210: NEG
21211: PUSH
21212: LD_INT 3
21214: NEG
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 1
21222: NEG
21223: PUSH
21224: LD_INT 3
21226: NEG
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 0
21234: PUSH
21235: LD_INT 3
21237: NEG
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 1
21245: PUSH
21246: LD_INT 2
21248: NEG
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 3
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 3
21266: PUSH
21267: LD_INT 3
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 2
21276: PUSH
21277: LD_INT 3
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 1
21286: PUSH
21287: LD_INT 3
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 0
21296: PUSH
21297: LD_INT 3
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 1
21306: NEG
21307: PUSH
21308: LD_INT 2
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 3
21317: NEG
21318: PUSH
21319: LD_INT 2
21321: NEG
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 3
21329: NEG
21330: PUSH
21331: LD_INT 3
21333: NEG
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21370: LD_ADDR_VAR 0 43
21374: PUSH
21375: LD_INT 0
21377: PUSH
21378: LD_INT 0
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 0
21387: PUSH
21388: LD_INT 1
21390: NEG
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 1
21398: PUSH
21399: LD_INT 0
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 1
21408: PUSH
21409: LD_INT 1
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 0
21418: PUSH
21419: LD_INT 1
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 1
21428: NEG
21429: PUSH
21430: LD_INT 0
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 1
21439: NEG
21440: PUSH
21441: LD_INT 1
21443: NEG
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 1
21451: NEG
21452: PUSH
21453: LD_INT 2
21455: NEG
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 0
21463: PUSH
21464: LD_INT 2
21466: NEG
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 1
21474: PUSH
21475: LD_INT 1
21477: NEG
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 2
21485: PUSH
21486: LD_INT 0
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 2
21495: PUSH
21496: LD_INT 1
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: LD_INT 2
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 0
21515: PUSH
21516: LD_INT 2
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 1
21525: NEG
21526: PUSH
21527: LD_INT 1
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 2
21536: NEG
21537: PUSH
21538: LD_INT 0
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 2
21547: NEG
21548: PUSH
21549: LD_INT 1
21551: NEG
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 1
21559: NEG
21560: PUSH
21561: LD_INT 3
21563: NEG
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 0
21571: PUSH
21572: LD_INT 3
21574: NEG
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: LD_INT 2
21585: NEG
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 2
21593: PUSH
21594: LD_INT 1
21596: NEG
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 3
21604: PUSH
21605: LD_INT 0
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 3
21614: PUSH
21615: LD_INT 1
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: LD_INT 3
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 0
21634: PUSH
21635: LD_INT 3
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 1
21644: NEG
21645: PUSH
21646: LD_INT 2
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 2
21655: NEG
21656: PUSH
21657: LD_INT 1
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 3
21666: NEG
21667: PUSH
21668: LD_INT 0
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 3
21677: NEG
21678: PUSH
21679: LD_INT 1
21681: NEG
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21718: LD_ADDR_VAR 0 44
21722: PUSH
21723: LD_INT 0
21725: PUSH
21726: LD_INT 0
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 0
21735: PUSH
21736: LD_INT 1
21738: NEG
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 1
21746: PUSH
21747: LD_INT 0
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 1
21756: PUSH
21757: LD_INT 1
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 0
21766: PUSH
21767: LD_INT 1
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 1
21776: NEG
21777: PUSH
21778: LD_INT 0
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 1
21787: NEG
21788: PUSH
21789: LD_INT 1
21791: NEG
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 1
21799: NEG
21800: PUSH
21801: LD_INT 2
21803: NEG
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 1
21811: PUSH
21812: LD_INT 1
21814: NEG
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 2
21822: PUSH
21823: LD_INT 0
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 2
21832: PUSH
21833: LD_INT 1
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 2
21842: PUSH
21843: LD_INT 2
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 1
21852: PUSH
21853: LD_INT 2
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 1
21862: NEG
21863: PUSH
21864: LD_INT 1
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 2
21873: NEG
21874: PUSH
21875: LD_INT 0
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 2
21884: NEG
21885: PUSH
21886: LD_INT 1
21888: NEG
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 2
21896: NEG
21897: PUSH
21898: LD_INT 2
21900: NEG
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: LD_INT 2
21908: NEG
21909: PUSH
21910: LD_INT 3
21912: NEG
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 2
21920: PUSH
21921: LD_INT 1
21923: NEG
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 3
21931: PUSH
21932: LD_INT 0
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 3
21941: PUSH
21942: LD_INT 1
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 3
21951: PUSH
21952: LD_INT 2
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 3
21961: PUSH
21962: LD_INT 3
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 2
21971: PUSH
21972: LD_INT 3
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 2
21981: NEG
21982: PUSH
21983: LD_INT 1
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 3
21992: NEG
21993: PUSH
21994: LD_INT 0
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 3
22003: NEG
22004: PUSH
22005: LD_INT 1
22007: NEG
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 3
22015: NEG
22016: PUSH
22017: LD_INT 2
22019: NEG
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 3
22027: NEG
22028: PUSH
22029: LD_INT 3
22031: NEG
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22068: LD_ADDR_VAR 0 45
22072: PUSH
22073: LD_INT 0
22075: PUSH
22076: LD_INT 0
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 0
22085: PUSH
22086: LD_INT 1
22088: NEG
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: LD_INT 0
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: PUSH
22107: LD_INT 1
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 0
22116: PUSH
22117: LD_INT 1
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 1
22126: NEG
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 1
22137: NEG
22138: PUSH
22139: LD_INT 1
22141: NEG
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 1
22149: NEG
22150: PUSH
22151: LD_INT 2
22153: NEG
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 0
22161: PUSH
22162: LD_INT 2
22164: NEG
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 1
22172: PUSH
22173: LD_INT 1
22175: NEG
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 2
22183: PUSH
22184: LD_INT 1
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 2
22193: PUSH
22194: LD_INT 2
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 1
22203: PUSH
22204: LD_INT 2
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 0
22213: PUSH
22214: LD_INT 2
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 1
22223: NEG
22224: PUSH
22225: LD_INT 1
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 2
22234: NEG
22235: PUSH
22236: LD_INT 1
22238: NEG
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 2
22246: NEG
22247: PUSH
22248: LD_INT 2
22250: NEG
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 2
22258: NEG
22259: PUSH
22260: LD_INT 3
22262: NEG
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 1
22270: NEG
22271: PUSH
22272: LD_INT 3
22274: NEG
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 0
22282: PUSH
22283: LD_INT 3
22285: NEG
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 1
22293: PUSH
22294: LD_INT 2
22296: NEG
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 3
22304: PUSH
22305: LD_INT 2
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 3
22314: PUSH
22315: LD_INT 3
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 2
22324: PUSH
22325: LD_INT 3
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 1
22334: PUSH
22335: LD_INT 3
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 0
22344: PUSH
22345: LD_INT 3
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: LD_INT 2
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 3
22365: NEG
22366: PUSH
22367: LD_INT 2
22369: NEG
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 3
22377: NEG
22378: PUSH
22379: LD_INT 3
22381: NEG
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22418: LD_ADDR_VAR 0 46
22422: PUSH
22423: LD_INT 0
22425: PUSH
22426: LD_INT 0
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 0
22435: PUSH
22436: LD_INT 1
22438: NEG
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 1
22446: PUSH
22447: LD_INT 0
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 1
22456: PUSH
22457: LD_INT 1
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 0
22466: PUSH
22467: LD_INT 1
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 1
22476: NEG
22477: PUSH
22478: LD_INT 0
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 1
22487: NEG
22488: PUSH
22489: LD_INT 1
22491: NEG
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 1
22499: NEG
22500: PUSH
22501: LD_INT 2
22503: NEG
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 0
22511: PUSH
22512: LD_INT 2
22514: NEG
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 1
22522: PUSH
22523: LD_INT 1
22525: NEG
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: LD_INT 2
22533: PUSH
22534: LD_INT 0
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 2
22543: PUSH
22544: LD_INT 1
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 1
22553: PUSH
22554: LD_INT 2
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 0
22563: PUSH
22564: LD_INT 2
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 1
22573: NEG
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 2
22584: NEG
22585: PUSH
22586: LD_INT 0
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 2
22595: NEG
22596: PUSH
22597: LD_INT 1
22599: NEG
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 1
22607: NEG
22608: PUSH
22609: LD_INT 3
22611: NEG
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 0
22619: PUSH
22620: LD_INT 3
22622: NEG
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: LD_INT 2
22633: NEG
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 2
22641: PUSH
22642: LD_INT 1
22644: NEG
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 3
22652: PUSH
22653: LD_INT 0
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 3
22662: PUSH
22663: LD_INT 1
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 1
22672: PUSH
22673: LD_INT 3
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 0
22682: PUSH
22683: LD_INT 3
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 1
22692: NEG
22693: PUSH
22694: LD_INT 2
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 2
22703: NEG
22704: PUSH
22705: LD_INT 1
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 3
22714: NEG
22715: PUSH
22716: LD_INT 0
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 3
22725: NEG
22726: PUSH
22727: LD_INT 1
22729: NEG
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22766: LD_ADDR_VAR 0 47
22770: PUSH
22771: LD_INT 0
22773: PUSH
22774: LD_INT 0
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 0
22783: PUSH
22784: LD_INT 1
22786: NEG
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 1
22794: PUSH
22795: LD_INT 0
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 0
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 1
22824: NEG
22825: PUSH
22826: LD_INT 0
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 1
22835: NEG
22836: PUSH
22837: LD_INT 1
22839: NEG
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 1
22847: NEG
22848: PUSH
22849: LD_INT 2
22851: NEG
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 0
22859: PUSH
22860: LD_INT 2
22862: NEG
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 1
22870: PUSH
22871: LD_INT 1
22873: NEG
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 2
22881: NEG
22882: PUSH
22883: LD_INT 1
22885: NEG
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 2
22893: NEG
22894: PUSH
22895: LD_INT 2
22897: NEG
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
22917: LD_ADDR_VAR 0 48
22921: PUSH
22922: LD_INT 0
22924: PUSH
22925: LD_INT 0
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 0
22934: PUSH
22935: LD_INT 1
22937: NEG
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 1
22945: PUSH
22946: LD_INT 0
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 1
22955: PUSH
22956: LD_INT 1
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 0
22965: PUSH
22966: LD_INT 1
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 1
22975: NEG
22976: PUSH
22977: LD_INT 0
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 1
22986: NEG
22987: PUSH
22988: LD_INT 1
22990: NEG
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 1
22998: NEG
22999: PUSH
23000: LD_INT 2
23002: NEG
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 0
23010: PUSH
23011: LD_INT 2
23013: NEG
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: LD_INT 1
23024: NEG
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 2
23032: PUSH
23033: LD_INT 0
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 2
23042: PUSH
23043: LD_INT 1
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23064: LD_ADDR_VAR 0 49
23068: PUSH
23069: LD_INT 0
23071: PUSH
23072: LD_INT 0
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 0
23081: PUSH
23082: LD_INT 1
23084: NEG
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 1
23092: PUSH
23093: LD_INT 0
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 1
23102: PUSH
23103: LD_INT 1
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 0
23112: PUSH
23113: LD_INT 1
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 1
23122: NEG
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: NEG
23134: PUSH
23135: LD_INT 1
23137: NEG
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: LD_INT 1
23148: NEG
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 2
23156: PUSH
23157: LD_INT 0
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 2
23166: PUSH
23167: LD_INT 1
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 2
23176: PUSH
23177: LD_INT 2
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 1
23186: PUSH
23187: LD_INT 2
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23208: LD_ADDR_VAR 0 50
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 0
23225: PUSH
23226: LD_INT 1
23228: NEG
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 1
23236: PUSH
23237: LD_INT 0
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 1
23246: PUSH
23247: LD_INT 1
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 0
23256: PUSH
23257: LD_INT 1
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 1
23266: NEG
23267: PUSH
23268: LD_INT 0
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 1
23277: NEG
23278: PUSH
23279: LD_INT 1
23281: NEG
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 2
23289: PUSH
23290: LD_INT 1
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 2
23299: PUSH
23300: LD_INT 2
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: LD_INT 2
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 0
23319: PUSH
23320: LD_INT 2
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 1
23329: NEG
23330: PUSH
23331: LD_INT 1
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23352: LD_ADDR_VAR 0 51
23356: PUSH
23357: LD_INT 0
23359: PUSH
23360: LD_INT 0
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 0
23369: PUSH
23370: LD_INT 1
23372: NEG
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 1
23380: PUSH
23381: LD_INT 0
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: LD_INT 1
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 0
23400: PUSH
23401: LD_INT 1
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 1
23410: NEG
23411: PUSH
23412: LD_INT 0
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: NEG
23422: PUSH
23423: LD_INT 1
23425: NEG
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 1
23433: PUSH
23434: LD_INT 2
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 0
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 1
23453: NEG
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 2
23464: NEG
23465: PUSH
23466: LD_INT 0
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 2
23475: NEG
23476: PUSH
23477: LD_INT 1
23479: NEG
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23499: LD_ADDR_VAR 0 52
23503: PUSH
23504: LD_INT 0
23506: PUSH
23507: LD_INT 0
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 0
23516: PUSH
23517: LD_INT 1
23519: NEG
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: LD_INT 0
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: LD_INT 1
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: LD_INT 1
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 1
23557: NEG
23558: PUSH
23559: LD_INT 0
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 1
23568: NEG
23569: PUSH
23570: LD_INT 1
23572: NEG
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 1
23580: NEG
23581: PUSH
23582: LD_INT 2
23584: NEG
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 1
23592: NEG
23593: PUSH
23594: LD_INT 1
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 2
23603: NEG
23604: PUSH
23605: LD_INT 0
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 2
23614: NEG
23615: PUSH
23616: LD_INT 1
23618: NEG
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 2
23626: NEG
23627: PUSH
23628: LD_INT 2
23630: NEG
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23650: LD_ADDR_VAR 0 53
23654: PUSH
23655: LD_INT 0
23657: PUSH
23658: LD_INT 0
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: LD_INT 1
23670: NEG
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 1
23688: PUSH
23689: LD_INT 1
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 0
23698: PUSH
23699: LD_INT 1
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 1
23708: NEG
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 1
23719: NEG
23720: PUSH
23721: LD_INT 1
23723: NEG
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: NEG
23732: PUSH
23733: LD_INT 2
23735: NEG
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 0
23743: PUSH
23744: LD_INT 2
23746: NEG
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: LD_INT 1
23757: NEG
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 2
23765: PUSH
23766: LD_INT 0
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 2
23775: PUSH
23776: LD_INT 1
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 2
23785: PUSH
23786: LD_INT 2
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 1
23795: PUSH
23796: LD_INT 2
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 0
23805: PUSH
23806: LD_INT 2
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 1
23815: NEG
23816: PUSH
23817: LD_INT 1
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 2
23826: NEG
23827: PUSH
23828: LD_INT 0
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 2
23837: NEG
23838: PUSH
23839: LD_INT 1
23841: NEG
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 2
23849: NEG
23850: PUSH
23851: LD_INT 2
23853: NEG
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23880: LD_ADDR_VAR 0 54
23884: PUSH
23885: LD_INT 0
23887: PUSH
23888: LD_INT 0
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: LD_INT 1
23900: NEG
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 1
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 1
23918: PUSH
23919: LD_INT 1
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 0
23928: PUSH
23929: LD_INT 1
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 1
23938: NEG
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 1
23949: NEG
23950: PUSH
23951: LD_INT 1
23953: NEG
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 1
23961: NEG
23962: PUSH
23963: LD_INT 2
23965: NEG
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 0
23973: PUSH
23974: LD_INT 2
23976: NEG
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: PUSH
23985: LD_INT 1
23987: NEG
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 2
23995: PUSH
23996: LD_INT 0
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 2
24005: PUSH
24006: LD_INT 1
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 2
24015: PUSH
24016: LD_INT 2
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: LD_INT 2
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 0
24035: PUSH
24036: LD_INT 2
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 1
24045: NEG
24046: PUSH
24047: LD_INT 1
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 2
24056: NEG
24057: PUSH
24058: LD_INT 0
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 2
24067: NEG
24068: PUSH
24069: LD_INT 1
24071: NEG
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 2
24079: NEG
24080: PUSH
24081: LD_INT 2
24083: NEG
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24110: LD_ADDR_VAR 0 55
24114: PUSH
24115: LD_INT 0
24117: PUSH
24118: LD_INT 0
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 0
24127: PUSH
24128: LD_INT 1
24130: NEG
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 1
24138: PUSH
24139: LD_INT 0
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 1
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 0
24158: PUSH
24159: LD_INT 1
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 1
24168: NEG
24169: PUSH
24170: LD_INT 0
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 1
24179: NEG
24180: PUSH
24181: LD_INT 1
24183: NEG
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 1
24191: NEG
24192: PUSH
24193: LD_INT 2
24195: NEG
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 0
24203: PUSH
24204: LD_INT 2
24206: NEG
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 1
24214: PUSH
24215: LD_INT 1
24217: NEG
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 2
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 2
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 2
24245: PUSH
24246: LD_INT 2
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: LD_INT 2
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: LD_INT 2
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 1
24275: NEG
24276: PUSH
24277: LD_INT 1
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 2
24286: NEG
24287: PUSH
24288: LD_INT 0
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 2
24297: NEG
24298: PUSH
24299: LD_INT 1
24301: NEG
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 2
24309: NEG
24310: PUSH
24311: LD_INT 2
24313: NEG
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24340: LD_ADDR_VAR 0 56
24344: PUSH
24345: LD_INT 0
24347: PUSH
24348: LD_INT 0
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: LD_INT 1
24360: NEG
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 1
24368: PUSH
24369: LD_INT 0
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 1
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 0
24388: PUSH
24389: LD_INT 1
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 1
24398: NEG
24399: PUSH
24400: LD_INT 0
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 1
24409: NEG
24410: PUSH
24411: LD_INT 1
24413: NEG
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 1
24421: NEG
24422: PUSH
24423: LD_INT 2
24425: NEG
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: LD_INT 2
24436: NEG
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: LD_INT 1
24447: NEG
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 2
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 2
24465: PUSH
24466: LD_INT 1
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 2
24475: PUSH
24476: LD_INT 2
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 1
24485: PUSH
24486: LD_INT 2
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 0
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 1
24505: NEG
24506: PUSH
24507: LD_INT 1
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 2
24516: NEG
24517: PUSH
24518: LD_INT 0
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 2
24527: NEG
24528: PUSH
24529: LD_INT 1
24531: NEG
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 2
24539: NEG
24540: PUSH
24541: LD_INT 2
24543: NEG
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24570: LD_ADDR_VAR 0 57
24574: PUSH
24575: LD_INT 0
24577: PUSH
24578: LD_INT 0
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 0
24587: PUSH
24588: LD_INT 1
24590: NEG
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 1
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 1
24608: PUSH
24609: LD_INT 1
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 0
24618: PUSH
24619: LD_INT 1
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 1
24628: NEG
24629: PUSH
24630: LD_INT 0
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 1
24639: NEG
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 1
24651: NEG
24652: PUSH
24653: LD_INT 2
24655: NEG
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 0
24663: PUSH
24664: LD_INT 2
24666: NEG
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 1
24674: PUSH
24675: LD_INT 1
24677: NEG
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 2
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 2
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 2
24705: PUSH
24706: LD_INT 2
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: LD_INT 2
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 0
24725: PUSH
24726: LD_INT 2
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 1
24735: NEG
24736: PUSH
24737: LD_INT 1
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 2
24746: NEG
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 2
24757: NEG
24758: PUSH
24759: LD_INT 1
24761: NEG
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 2
24769: NEG
24770: PUSH
24771: LD_INT 2
24773: NEG
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24800: LD_ADDR_VAR 0 58
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: LD_INT 0
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 0
24817: PUSH
24818: LD_INT 1
24820: NEG
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 1
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 0
24848: PUSH
24849: LD_INT 1
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 1
24858: NEG
24859: PUSH
24860: LD_INT 0
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 1
24869: NEG
24870: PUSH
24871: LD_INT 1
24873: NEG
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 1
24881: NEG
24882: PUSH
24883: LD_INT 2
24885: NEG
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: LD_INT 2
24896: NEG
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 1
24904: PUSH
24905: LD_INT 1
24907: NEG
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 2
24915: PUSH
24916: LD_INT 0
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 2
24925: PUSH
24926: LD_INT 1
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 2
24935: PUSH
24936: LD_INT 2
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 1
24945: PUSH
24946: LD_INT 2
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: LD_INT 2
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 1
24965: NEG
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 2
24976: NEG
24977: PUSH
24978: LD_INT 0
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 2
24987: NEG
24988: PUSH
24989: LD_INT 1
24991: NEG
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 2
24999: NEG
25000: PUSH
25001: LD_INT 2
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25030: LD_ADDR_VAR 0 59
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: LD_INT 0
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 0
25047: PUSH
25048: LD_INT 1
25050: NEG
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: PUSH
25059: LD_INT 0
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 0
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 1
25088: NEG
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: NEG
25100: PUSH
25101: LD_INT 1
25103: NEG
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25118: LD_ADDR_VAR 0 60
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: LD_INT 0
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 0
25135: PUSH
25136: LD_INT 1
25138: NEG
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: LD_INT 0
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 1
25156: PUSH
25157: LD_INT 1
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 0
25166: PUSH
25167: LD_INT 1
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: NEG
25177: PUSH
25178: LD_INT 0
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: NEG
25188: PUSH
25189: LD_INT 1
25191: NEG
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25206: LD_ADDR_VAR 0 61
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: LD_INT 1
25226: NEG
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 1
25234: PUSH
25235: LD_INT 0
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 1
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 1
25264: NEG
25265: PUSH
25266: LD_INT 0
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: LD_INT 1
25279: NEG
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25294: LD_ADDR_VAR 0 62
25298: PUSH
25299: LD_INT 0
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 0
25311: PUSH
25312: LD_INT 1
25314: NEG
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 1
25322: PUSH
25323: LD_INT 0
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 1
25352: NEG
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 1
25363: NEG
25364: PUSH
25365: LD_INT 1
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25382: LD_ADDR_VAR 0 63
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: LD_INT 0
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 0
25399: PUSH
25400: LD_INT 1
25402: NEG
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 1
25410: PUSH
25411: LD_INT 0
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 1
25420: PUSH
25421: LD_INT 1
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 0
25430: PUSH
25431: LD_INT 1
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 1
25440: NEG
25441: PUSH
25442: LD_INT 0
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 1
25451: NEG
25452: PUSH
25453: LD_INT 1
25455: NEG
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25470: LD_ADDR_VAR 0 64
25474: PUSH
25475: LD_INT 0
25477: PUSH
25478: LD_INT 0
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 0
25487: PUSH
25488: LD_INT 1
25490: NEG
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 1
25498: PUSH
25499: LD_INT 0
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 1
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 0
25518: PUSH
25519: LD_INT 1
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 1
25528: NEG
25529: PUSH
25530: LD_INT 0
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 1
25539: NEG
25540: PUSH
25541: LD_INT 1
25543: NEG
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: ST_TO_ADDR
// end ; 1 :
25558: GO 31455
25560: LD_INT 1
25562: DOUBLE
25563: EQUAL
25564: IFTRUE 25568
25566: GO 28191
25568: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25569: LD_ADDR_VAR 0 11
25573: PUSH
25574: LD_INT 1
25576: NEG
25577: PUSH
25578: LD_INT 3
25580: NEG
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 0
25588: PUSH
25589: LD_INT 3
25591: NEG
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: LD_INT 2
25602: NEG
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: LIST
25612: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25613: LD_ADDR_VAR 0 12
25617: PUSH
25618: LD_INT 2
25620: PUSH
25621: LD_INT 1
25623: NEG
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 3
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 3
25641: PUSH
25642: LD_INT 1
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: LIST
25653: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25654: LD_ADDR_VAR 0 13
25658: PUSH
25659: LD_INT 3
25661: PUSH
25662: LD_INT 2
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 3
25671: PUSH
25672: LD_INT 3
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 2
25681: PUSH
25682: LD_INT 3
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: LIST
25693: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25694: LD_ADDR_VAR 0 14
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: LD_INT 3
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: LD_INT 3
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 1
25721: NEG
25722: PUSH
25723: LD_INT 2
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: LIST
25734: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25735: LD_ADDR_VAR 0 15
25739: PUSH
25740: LD_INT 2
25742: NEG
25743: PUSH
25744: LD_INT 1
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 3
25753: NEG
25754: PUSH
25755: LD_INT 0
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 3
25764: NEG
25765: PUSH
25766: LD_INT 1
25768: NEG
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: LIST
25778: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25779: LD_ADDR_VAR 0 16
25783: PUSH
25784: LD_INT 2
25786: NEG
25787: PUSH
25788: LD_INT 3
25790: NEG
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 3
25798: NEG
25799: PUSH
25800: LD_INT 2
25802: NEG
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 3
25810: NEG
25811: PUSH
25812: LD_INT 3
25814: NEG
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: LIST
25824: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25825: LD_ADDR_VAR 0 17
25829: PUSH
25830: LD_INT 1
25832: NEG
25833: PUSH
25834: LD_INT 3
25836: NEG
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 0
25844: PUSH
25845: LD_INT 3
25847: NEG
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 1
25855: PUSH
25856: LD_INT 2
25858: NEG
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: LIST
25868: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25869: LD_ADDR_VAR 0 18
25873: PUSH
25874: LD_INT 2
25876: PUSH
25877: LD_INT 1
25879: NEG
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 3
25887: PUSH
25888: LD_INT 0
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 3
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: LIST
25909: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25910: LD_ADDR_VAR 0 19
25914: PUSH
25915: LD_INT 3
25917: PUSH
25918: LD_INT 2
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 3
25927: PUSH
25928: LD_INT 3
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 2
25937: PUSH
25938: LD_INT 3
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: LIST
25949: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25950: LD_ADDR_VAR 0 20
25954: PUSH
25955: LD_INT 1
25957: PUSH
25958: LD_INT 3
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 0
25967: PUSH
25968: LD_INT 3
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 1
25977: NEG
25978: PUSH
25979: LD_INT 2
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: LIST
25990: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25991: LD_ADDR_VAR 0 21
25995: PUSH
25996: LD_INT 2
25998: NEG
25999: PUSH
26000: LD_INT 1
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 3
26009: NEG
26010: PUSH
26011: LD_INT 0
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 3
26020: NEG
26021: PUSH
26022: LD_INT 1
26024: NEG
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: LIST
26034: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26035: LD_ADDR_VAR 0 22
26039: PUSH
26040: LD_INT 2
26042: NEG
26043: PUSH
26044: LD_INT 3
26046: NEG
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 3
26054: NEG
26055: PUSH
26056: LD_INT 2
26058: NEG
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 3
26066: NEG
26067: PUSH
26068: LD_INT 3
26070: NEG
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: LIST
26080: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26081: LD_ADDR_VAR 0 23
26085: PUSH
26086: LD_INT 0
26088: PUSH
26089: LD_INT 3
26091: NEG
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: PUSH
26101: LD_INT 4
26103: NEG
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 1
26111: PUSH
26112: LD_INT 3
26114: NEG
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: LIST
26124: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26125: LD_ADDR_VAR 0 24
26129: PUSH
26130: LD_INT 3
26132: PUSH
26133: LD_INT 0
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 3
26142: PUSH
26143: LD_INT 1
26145: NEG
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 4
26153: PUSH
26154: LD_INT 1
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: LIST
26165: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26166: LD_ADDR_VAR 0 25
26170: PUSH
26171: LD_INT 3
26173: PUSH
26174: LD_INT 3
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 4
26183: PUSH
26184: LD_INT 3
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 3
26193: PUSH
26194: LD_INT 4
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: LIST
26205: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
26206: LD_ADDR_VAR 0 26
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: LD_INT 3
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 1
26223: PUSH
26224: LD_INT 4
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 1
26233: NEG
26234: PUSH
26235: LD_INT 3
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: LIST
26246: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
26247: LD_ADDR_VAR 0 27
26251: PUSH
26252: LD_INT 3
26254: NEG
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 3
26265: NEG
26266: PUSH
26267: LD_INT 1
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 4
26276: NEG
26277: PUSH
26278: LD_INT 1
26280: NEG
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: LIST
26290: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
26291: LD_ADDR_VAR 0 28
26295: PUSH
26296: LD_INT 3
26298: NEG
26299: PUSH
26300: LD_INT 3
26302: NEG
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 3
26310: NEG
26311: PUSH
26312: LD_INT 4
26314: NEG
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 4
26322: NEG
26323: PUSH
26324: LD_INT 3
26326: NEG
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: LIST
26336: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
26337: LD_ADDR_VAR 0 29
26341: PUSH
26342: LD_INT 1
26344: NEG
26345: PUSH
26346: LD_INT 3
26348: NEG
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 0
26356: PUSH
26357: LD_INT 3
26359: NEG
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 1
26367: PUSH
26368: LD_INT 2
26370: NEG
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 1
26378: NEG
26379: PUSH
26380: LD_INT 4
26382: NEG
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 0
26390: PUSH
26391: LD_INT 4
26393: NEG
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: LD_INT 3
26404: NEG
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 1
26412: NEG
26413: PUSH
26414: LD_INT 5
26416: NEG
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 0
26424: PUSH
26425: LD_INT 5
26427: NEG
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: LD_INT 4
26438: NEG
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 1
26446: NEG
26447: PUSH
26448: LD_INT 6
26450: NEG
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: LD_INT 6
26461: NEG
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 1
26469: PUSH
26470: LD_INT 5
26472: NEG
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
26492: LD_ADDR_VAR 0 30
26496: PUSH
26497: LD_INT 2
26499: PUSH
26500: LD_INT 1
26502: NEG
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 3
26510: PUSH
26511: LD_INT 0
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 3
26520: PUSH
26521: LD_INT 1
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 3
26530: PUSH
26531: LD_INT 1
26533: NEG
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 4
26541: PUSH
26542: LD_INT 0
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 4
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 4
26561: PUSH
26562: LD_INT 1
26564: NEG
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 5
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 5
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 5
26592: PUSH
26593: LD_INT 1
26595: NEG
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 6
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 6
26613: PUSH
26614: LD_INT 1
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
26635: LD_ADDR_VAR 0 31
26639: PUSH
26640: LD_INT 3
26642: PUSH
26643: LD_INT 2
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 3
26652: PUSH
26653: LD_INT 3
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 2
26662: PUSH
26663: LD_INT 3
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 4
26672: PUSH
26673: LD_INT 3
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 4
26682: PUSH
26683: LD_INT 4
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 3
26692: PUSH
26693: LD_INT 4
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 5
26702: PUSH
26703: LD_INT 4
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 5
26712: PUSH
26713: LD_INT 5
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 4
26722: PUSH
26723: LD_INT 5
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 6
26732: PUSH
26733: LD_INT 5
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 6
26742: PUSH
26743: LD_INT 6
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 5
26752: PUSH
26753: LD_INT 6
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
26774: LD_ADDR_VAR 0 32
26778: PUSH
26779: LD_INT 1
26781: PUSH
26782: LD_INT 3
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 0
26791: PUSH
26792: LD_INT 3
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 1
26801: NEG
26802: PUSH
26803: LD_INT 2
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 1
26812: PUSH
26813: LD_INT 4
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 0
26822: PUSH
26823: LD_INT 4
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: LD_INT 3
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 1
26843: PUSH
26844: LD_INT 5
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 0
26853: PUSH
26854: LD_INT 5
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: LD_INT 4
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: LD_INT 6
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 0
26884: PUSH
26885: LD_INT 6
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 1
26894: NEG
26895: PUSH
26896: LD_INT 5
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
26917: LD_ADDR_VAR 0 33
26921: PUSH
26922: LD_INT 2
26924: NEG
26925: PUSH
26926: LD_INT 1
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 3
26935: NEG
26936: PUSH
26937: LD_INT 0
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 3
26946: NEG
26947: PUSH
26948: LD_INT 1
26950: NEG
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 3
26958: NEG
26959: PUSH
26960: LD_INT 1
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 4
26969: NEG
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 4
26980: NEG
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 4
26992: NEG
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 5
27003: NEG
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 5
27014: NEG
27015: PUSH
27016: LD_INT 1
27018: NEG
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 5
27026: NEG
27027: PUSH
27028: LD_INT 1
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 6
27037: NEG
27038: PUSH
27039: LD_INT 0
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 6
27048: NEG
27049: PUSH
27050: LD_INT 1
27052: NEG
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27072: LD_ADDR_VAR 0 34
27076: PUSH
27077: LD_INT 2
27079: NEG
27080: PUSH
27081: LD_INT 3
27083: NEG
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 3
27091: NEG
27092: PUSH
27093: LD_INT 2
27095: NEG
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 3
27103: NEG
27104: PUSH
27105: LD_INT 3
27107: NEG
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 3
27115: NEG
27116: PUSH
27117: LD_INT 4
27119: NEG
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 4
27127: NEG
27128: PUSH
27129: LD_INT 3
27131: NEG
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 4
27139: NEG
27140: PUSH
27141: LD_INT 4
27143: NEG
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 4
27151: NEG
27152: PUSH
27153: LD_INT 5
27155: NEG
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 5
27163: NEG
27164: PUSH
27165: LD_INT 4
27167: NEG
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 5
27175: NEG
27176: PUSH
27177: LD_INT 5
27179: NEG
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 5
27187: NEG
27188: PUSH
27189: LD_INT 6
27191: NEG
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 6
27199: NEG
27200: PUSH
27201: LD_INT 5
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 6
27211: NEG
27212: PUSH
27213: LD_INT 6
27215: NEG
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
27235: LD_ADDR_VAR 0 41
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: LD_INT 2
27245: NEG
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: PUSH
27255: LD_INT 3
27257: NEG
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: LD_INT 2
27268: NEG
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: LIST
27278: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
27279: LD_ADDR_VAR 0 42
27283: PUSH
27284: LD_INT 2
27286: PUSH
27287: LD_INT 0
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 2
27296: PUSH
27297: LD_INT 1
27299: NEG
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 3
27307: PUSH
27308: LD_INT 1
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: LIST
27319: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
27320: LD_ADDR_VAR 0 43
27324: PUSH
27325: LD_INT 2
27327: PUSH
27328: LD_INT 2
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 3
27337: PUSH
27338: LD_INT 2
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 2
27347: PUSH
27348: LD_INT 3
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: LIST
27359: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
27360: LD_ADDR_VAR 0 44
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: LD_INT 2
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 1
27377: PUSH
27378: LD_INT 3
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 1
27387: NEG
27388: PUSH
27389: LD_INT 2
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: LIST
27400: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27401: LD_ADDR_VAR 0 45
27405: PUSH
27406: LD_INT 2
27408: NEG
27409: PUSH
27410: LD_INT 0
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 2
27419: NEG
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 3
27430: NEG
27431: PUSH
27432: LD_INT 1
27434: NEG
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: LIST
27444: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
27445: LD_ADDR_VAR 0 46
27449: PUSH
27450: LD_INT 2
27452: NEG
27453: PUSH
27454: LD_INT 2
27456: NEG
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 2
27464: NEG
27465: PUSH
27466: LD_INT 3
27468: NEG
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 3
27476: NEG
27477: PUSH
27478: LD_INT 2
27480: NEG
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: LIST
27490: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
27491: LD_ADDR_VAR 0 47
27495: PUSH
27496: LD_INT 2
27498: NEG
27499: PUSH
27500: LD_INT 3
27502: NEG
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 1
27510: NEG
27511: PUSH
27512: LD_INT 3
27514: NEG
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27524: LD_ADDR_VAR 0 48
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: LD_INT 2
27534: NEG
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 2
27542: PUSH
27543: LD_INT 1
27545: NEG
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
27555: LD_ADDR_VAR 0 49
27559: PUSH
27560: LD_INT 3
27562: PUSH
27563: LD_INT 1
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 3
27572: PUSH
27573: LD_INT 2
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
27584: LD_ADDR_VAR 0 50
27588: PUSH
27589: LD_INT 2
27591: PUSH
27592: LD_INT 3
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 1
27601: PUSH
27602: LD_INT 3
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27613: LD_ADDR_VAR 0 51
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 2
27631: NEG
27632: PUSH
27633: LD_INT 1
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27644: LD_ADDR_VAR 0 52
27648: PUSH
27649: LD_INT 3
27651: NEG
27652: PUSH
27653: LD_INT 1
27655: NEG
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 3
27663: NEG
27664: PUSH
27665: LD_INT 2
27667: NEG
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27677: LD_ADDR_VAR 0 53
27681: PUSH
27682: LD_INT 1
27684: NEG
27685: PUSH
27686: LD_INT 3
27688: NEG
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: LD_INT 3
27699: NEG
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 1
27707: PUSH
27708: LD_INT 2
27710: NEG
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: LIST
27720: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27721: LD_ADDR_VAR 0 54
27725: PUSH
27726: LD_INT 2
27728: PUSH
27729: LD_INT 1
27731: NEG
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 3
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 3
27749: PUSH
27750: LD_INT 1
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: LIST
27761: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27762: LD_ADDR_VAR 0 55
27766: PUSH
27767: LD_INT 3
27769: PUSH
27770: LD_INT 2
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 3
27779: PUSH
27780: LD_INT 3
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 2
27789: PUSH
27790: LD_INT 3
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: LIST
27801: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27802: LD_ADDR_VAR 0 56
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: LD_INT 3
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: LD_INT 3
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: LD_INT 2
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: LIST
27842: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27843: LD_ADDR_VAR 0 57
27847: PUSH
27848: LD_INT 2
27850: NEG
27851: PUSH
27852: LD_INT 1
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 3
27861: NEG
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 3
27872: NEG
27873: PUSH
27874: LD_INT 1
27876: NEG
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: LIST
27886: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27887: LD_ADDR_VAR 0 58
27891: PUSH
27892: LD_INT 2
27894: NEG
27895: PUSH
27896: LD_INT 3
27898: NEG
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 3
27906: NEG
27907: PUSH
27908: LD_INT 2
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 3
27918: NEG
27919: PUSH
27920: LD_INT 3
27922: NEG
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: LIST
27932: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
27933: LD_ADDR_VAR 0 59
27937: PUSH
27938: LD_INT 1
27940: NEG
27941: PUSH
27942: LD_INT 2
27944: NEG
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: LD_INT 2
27955: NEG
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: LD_INT 1
27966: NEG
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: LIST
27976: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27977: LD_ADDR_VAR 0 60
27981: PUSH
27982: LD_INT 1
27984: PUSH
27985: LD_INT 1
27987: NEG
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 2
27995: PUSH
27996: LD_INT 0
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 2
28005: PUSH
28006: LD_INT 1
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: LIST
28017: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28018: LD_ADDR_VAR 0 61
28022: PUSH
28023: LD_INT 2
28025: PUSH
28026: LD_INT 1
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 2
28035: PUSH
28036: LD_INT 2
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 1
28045: PUSH
28046: LD_INT 2
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: LIST
28057: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28058: LD_ADDR_VAR 0 62
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: LD_INT 2
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: LD_INT 2
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 1
28085: NEG
28086: PUSH
28087: LD_INT 1
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: LIST
28098: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28099: LD_ADDR_VAR 0 63
28103: PUSH
28104: LD_INT 1
28106: NEG
28107: PUSH
28108: LD_INT 1
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 2
28117: NEG
28118: PUSH
28119: LD_INT 0
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 2
28128: NEG
28129: PUSH
28130: LD_INT 1
28132: NEG
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: LIST
28142: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28143: LD_ADDR_VAR 0 64
28147: PUSH
28148: LD_INT 1
28150: NEG
28151: PUSH
28152: LD_INT 2
28154: NEG
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 2
28162: NEG
28163: PUSH
28164: LD_INT 1
28166: NEG
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 2
28174: NEG
28175: PUSH
28176: LD_INT 2
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: LIST
28188: ST_TO_ADDR
// end ; 2 :
28189: GO 31455
28191: LD_INT 2
28193: DOUBLE
28194: EQUAL
28195: IFTRUE 28199
28197: GO 31454
28199: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
28200: LD_ADDR_VAR 0 29
28204: PUSH
28205: LD_INT 4
28207: PUSH
28208: LD_INT 0
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 4
28217: PUSH
28218: LD_INT 1
28220: NEG
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 5
28228: PUSH
28229: LD_INT 0
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 5
28238: PUSH
28239: LD_INT 1
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 4
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 3
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 3
28268: PUSH
28269: LD_INT 1
28271: NEG
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 3
28279: PUSH
28280: LD_INT 2
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 5
28290: PUSH
28291: LD_INT 2
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 3
28300: PUSH
28301: LD_INT 3
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 3
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 4
28320: PUSH
28321: LD_INT 3
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 4
28330: PUSH
28331: LD_INT 4
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 3
28340: PUSH
28341: LD_INT 4
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 2
28350: PUSH
28351: LD_INT 3
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 2
28360: PUSH
28361: LD_INT 2
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 4
28370: PUSH
28371: LD_INT 2
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 2
28380: PUSH
28381: LD_INT 4
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 0
28390: PUSH
28391: LD_INT 4
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: LD_INT 3
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: LD_INT 4
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 1
28420: PUSH
28421: LD_INT 5
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: LD_INT 5
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: LD_INT 4
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 1
28451: NEG
28452: PUSH
28453: LD_INT 3
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 2
28462: PUSH
28463: LD_INT 5
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 2
28472: NEG
28473: PUSH
28474: LD_INT 3
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 3
28483: NEG
28484: PUSH
28485: LD_INT 0
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 3
28494: NEG
28495: PUSH
28496: LD_INT 1
28498: NEG
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 2
28506: NEG
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 2
28517: NEG
28518: PUSH
28519: LD_INT 1
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 3
28528: NEG
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 4
28539: NEG
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 4
28550: NEG
28551: PUSH
28552: LD_INT 1
28554: NEG
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 4
28562: NEG
28563: PUSH
28564: LD_INT 2
28566: NEG
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 2
28574: NEG
28575: PUSH
28576: LD_INT 2
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 4
28585: NEG
28586: PUSH
28587: LD_INT 4
28589: NEG
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 4
28597: NEG
28598: PUSH
28599: LD_INT 5
28601: NEG
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 3
28609: NEG
28610: PUSH
28611: LD_INT 4
28613: NEG
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 3
28621: NEG
28622: PUSH
28623: LD_INT 3
28625: NEG
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 4
28633: NEG
28634: PUSH
28635: LD_INT 3
28637: NEG
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 5
28645: NEG
28646: PUSH
28647: LD_INT 4
28649: NEG
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 5
28657: NEG
28658: PUSH
28659: LD_INT 5
28661: NEG
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 3
28669: NEG
28670: PUSH
28671: LD_INT 5
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 5
28681: NEG
28682: PUSH
28683: LD_INT 3
28685: NEG
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
28738: LD_ADDR_VAR 0 30
28742: PUSH
28743: LD_INT 4
28745: PUSH
28746: LD_INT 4
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 4
28755: PUSH
28756: LD_INT 3
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 5
28765: PUSH
28766: LD_INT 4
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 5
28775: PUSH
28776: LD_INT 5
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 4
28785: PUSH
28786: LD_INT 5
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 3
28795: PUSH
28796: LD_INT 4
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 3
28805: PUSH
28806: LD_INT 3
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 5
28815: PUSH
28816: LD_INT 3
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 3
28825: PUSH
28826: LD_INT 5
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 0
28835: PUSH
28836: LD_INT 3
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 0
28845: PUSH
28846: LD_INT 2
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 1
28855: PUSH
28856: LD_INT 3
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 1
28865: PUSH
28866: LD_INT 4
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: LD_INT 4
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 1
28885: NEG
28886: PUSH
28887: LD_INT 3
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 1
28896: NEG
28897: PUSH
28898: LD_INT 2
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 2
28907: PUSH
28908: LD_INT 4
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 2
28917: NEG
28918: PUSH
28919: LD_INT 2
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 4
28928: NEG
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 4
28939: NEG
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 3
28951: NEG
28952: PUSH
28953: LD_INT 0
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 3
28962: NEG
28963: PUSH
28964: LD_INT 1
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 4
28973: NEG
28974: PUSH
28975: LD_INT 1
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 5
28984: NEG
28985: PUSH
28986: LD_INT 0
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 5
28995: NEG
28996: PUSH
28997: LD_INT 1
28999: NEG
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 5
29007: NEG
29008: PUSH
29009: LD_INT 2
29011: NEG
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 3
29019: NEG
29020: PUSH
29021: LD_INT 2
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 3
29030: NEG
29031: PUSH
29032: LD_INT 3
29034: NEG
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 3
29042: NEG
29043: PUSH
29044: LD_INT 4
29046: NEG
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 2
29054: NEG
29055: PUSH
29056: LD_INT 3
29058: NEG
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 2
29066: NEG
29067: PUSH
29068: LD_INT 2
29070: NEG
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 3
29078: NEG
29079: PUSH
29080: LD_INT 2
29082: NEG
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 4
29090: NEG
29091: PUSH
29092: LD_INT 3
29094: NEG
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 4
29102: NEG
29103: PUSH
29104: LD_INT 4
29106: NEG
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 2
29114: NEG
29115: PUSH
29116: LD_INT 4
29118: NEG
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 4
29126: NEG
29127: PUSH
29128: LD_INT 2
29130: NEG
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 0
29138: PUSH
29139: LD_INT 4
29141: NEG
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 0
29149: PUSH
29150: LD_INT 5
29152: NEG
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 1
29160: PUSH
29161: LD_INT 4
29163: NEG
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 1
29171: PUSH
29172: LD_INT 3
29174: NEG
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 0
29182: PUSH
29183: LD_INT 3
29185: NEG
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 1
29193: NEG
29194: PUSH
29195: LD_INT 4
29197: NEG
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: LD_INT 5
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 2
29217: PUSH
29218: LD_INT 3
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 2
29228: NEG
29229: PUSH
29230: LD_INT 5
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
29285: LD_ADDR_VAR 0 31
29289: PUSH
29290: LD_INT 0
29292: PUSH
29293: LD_INT 4
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 0
29302: PUSH
29303: LD_INT 3
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 1
29312: PUSH
29313: LD_INT 4
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 1
29322: PUSH
29323: LD_INT 5
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: LD_INT 5
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 1
29342: NEG
29343: PUSH
29344: LD_INT 4
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 1
29353: NEG
29354: PUSH
29355: LD_INT 3
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 2
29364: PUSH
29365: LD_INT 5
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 2
29374: NEG
29375: PUSH
29376: LD_INT 3
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 3
29385: NEG
29386: PUSH
29387: LD_INT 0
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 3
29396: NEG
29397: PUSH
29398: LD_INT 1
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 2
29408: NEG
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 2
29419: NEG
29420: PUSH
29421: LD_INT 1
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 3
29430: NEG
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 4
29441: NEG
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 4
29452: NEG
29453: PUSH
29454: LD_INT 1
29456: NEG
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 4
29464: NEG
29465: PUSH
29466: LD_INT 2
29468: NEG
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 2
29476: NEG
29477: PUSH
29478: LD_INT 2
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 4
29487: NEG
29488: PUSH
29489: LD_INT 4
29491: NEG
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 4
29499: NEG
29500: PUSH
29501: LD_INT 5
29503: NEG
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 3
29511: NEG
29512: PUSH
29513: LD_INT 4
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 3
29523: NEG
29524: PUSH
29525: LD_INT 3
29527: NEG
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 4
29535: NEG
29536: PUSH
29537: LD_INT 3
29539: NEG
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 5
29547: NEG
29548: PUSH
29549: LD_INT 4
29551: NEG
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 5
29559: NEG
29560: PUSH
29561: LD_INT 5
29563: NEG
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 3
29571: NEG
29572: PUSH
29573: LD_INT 5
29575: NEG
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 5
29583: NEG
29584: PUSH
29585: LD_INT 3
29587: NEG
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 0
29595: PUSH
29596: LD_INT 3
29598: NEG
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 0
29606: PUSH
29607: LD_INT 4
29609: NEG
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 1
29617: PUSH
29618: LD_INT 3
29620: NEG
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 1
29628: PUSH
29629: LD_INT 2
29631: NEG
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 0
29639: PUSH
29640: LD_INT 2
29642: NEG
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 1
29650: NEG
29651: PUSH
29652: LD_INT 3
29654: NEG
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 1
29662: NEG
29663: PUSH
29664: LD_INT 4
29666: NEG
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 2
29674: PUSH
29675: LD_INT 2
29677: NEG
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 2
29685: NEG
29686: PUSH
29687: LD_INT 4
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 4
29697: PUSH
29698: LD_INT 0
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 4
29707: PUSH
29708: LD_INT 1
29710: NEG
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 5
29718: PUSH
29719: LD_INT 0
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 5
29728: PUSH
29729: LD_INT 1
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 4
29738: PUSH
29739: LD_INT 1
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 3
29748: PUSH
29749: LD_INT 0
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 3
29758: PUSH
29759: LD_INT 1
29761: NEG
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 3
29769: PUSH
29770: LD_INT 2
29772: NEG
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 5
29780: PUSH
29781: LD_INT 2
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
29835: LD_ADDR_VAR 0 32
29839: PUSH
29840: LD_INT 4
29842: NEG
29843: PUSH
29844: LD_INT 0
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 4
29853: NEG
29854: PUSH
29855: LD_INT 1
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 3
29865: NEG
29866: PUSH
29867: LD_INT 0
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 3
29876: NEG
29877: PUSH
29878: LD_INT 1
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 4
29887: NEG
29888: PUSH
29889: LD_INT 1
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 5
29898: NEG
29899: PUSH
29900: LD_INT 0
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 5
29909: NEG
29910: PUSH
29911: LD_INT 1
29913: NEG
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 5
29921: NEG
29922: PUSH
29923: LD_INT 2
29925: NEG
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 3
29933: NEG
29934: PUSH
29935: LD_INT 2
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 3
29944: NEG
29945: PUSH
29946: LD_INT 3
29948: NEG
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 3
29956: NEG
29957: PUSH
29958: LD_INT 4
29960: NEG
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 2
29968: NEG
29969: PUSH
29970: LD_INT 3
29972: NEG
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 2
29980: NEG
29981: PUSH
29982: LD_INT 2
29984: NEG
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 3
29992: NEG
29993: PUSH
29994: LD_INT 2
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 4
30004: NEG
30005: PUSH
30006: LD_INT 3
30008: NEG
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 4
30016: NEG
30017: PUSH
30018: LD_INT 4
30020: NEG
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 2
30028: NEG
30029: PUSH
30030: LD_INT 4
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 4
30040: NEG
30041: PUSH
30042: LD_INT 2
30044: NEG
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 0
30052: PUSH
30053: LD_INT 4
30055: NEG
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: LD_INT 5
30066: NEG
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 1
30074: PUSH
30075: LD_INT 4
30077: NEG
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: LD_INT 3
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 0
30096: PUSH
30097: LD_INT 3
30099: NEG
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 1
30107: NEG
30108: PUSH
30109: LD_INT 4
30111: NEG
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 1
30119: NEG
30120: PUSH
30121: LD_INT 5
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 2
30131: PUSH
30132: LD_INT 3
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 2
30142: NEG
30143: PUSH
30144: LD_INT 5
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 3
30154: PUSH
30155: LD_INT 0
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 3
30164: PUSH
30165: LD_INT 1
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 4
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 4
30185: PUSH
30186: LD_INT 1
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 3
30195: PUSH
30196: LD_INT 1
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 2
30205: PUSH
30206: LD_INT 0
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 2
30215: PUSH
30216: LD_INT 1
30218: NEG
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 2
30226: PUSH
30227: LD_INT 2
30229: NEG
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 4
30237: PUSH
30238: LD_INT 2
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 4
30247: PUSH
30248: LD_INT 4
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 4
30257: PUSH
30258: LD_INT 3
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 5
30267: PUSH
30268: LD_INT 4
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 5
30277: PUSH
30278: LD_INT 5
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 4
30287: PUSH
30288: LD_INT 5
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 3
30297: PUSH
30298: LD_INT 4
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 3
30307: PUSH
30308: LD_INT 3
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 5
30317: PUSH
30318: LD_INT 3
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 3
30327: PUSH
30328: LD_INT 5
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
30382: LD_ADDR_VAR 0 33
30386: PUSH
30387: LD_INT 4
30389: NEG
30390: PUSH
30391: LD_INT 4
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 4
30401: NEG
30402: PUSH
30403: LD_INT 5
30405: NEG
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 3
30413: NEG
30414: PUSH
30415: LD_INT 4
30417: NEG
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 3
30425: NEG
30426: PUSH
30427: LD_INT 3
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 4
30437: NEG
30438: PUSH
30439: LD_INT 3
30441: NEG
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 5
30449: NEG
30450: PUSH
30451: LD_INT 4
30453: NEG
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 5
30461: NEG
30462: PUSH
30463: LD_INT 5
30465: NEG
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 3
30473: NEG
30474: PUSH
30475: LD_INT 5
30477: NEG
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 5
30485: NEG
30486: PUSH
30487: LD_INT 3
30489: NEG
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 0
30497: PUSH
30498: LD_INT 3
30500: NEG
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 0
30508: PUSH
30509: LD_INT 4
30511: NEG
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 1
30519: PUSH
30520: LD_INT 3
30522: NEG
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 1
30530: PUSH
30531: LD_INT 2
30533: NEG
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 0
30541: PUSH
30542: LD_INT 2
30544: NEG
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 1
30552: NEG
30553: PUSH
30554: LD_INT 3
30556: NEG
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: PUSH
30566: LD_INT 4
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 2
30576: PUSH
30577: LD_INT 2
30579: NEG
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 2
30587: NEG
30588: PUSH
30589: LD_INT 4
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 4
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 4
30609: PUSH
30610: LD_INT 1
30612: NEG
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 5
30620: PUSH
30621: LD_INT 0
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 5
30630: PUSH
30631: LD_INT 1
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 4
30640: PUSH
30641: LD_INT 1
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 3
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 3
30660: PUSH
30661: LD_INT 1
30663: NEG
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 3
30671: PUSH
30672: LD_INT 2
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 5
30682: PUSH
30683: LD_INT 2
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 3
30692: PUSH
30693: LD_INT 3
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 3
30702: PUSH
30703: LD_INT 2
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 4
30712: PUSH
30713: LD_INT 3
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 4
30722: PUSH
30723: LD_INT 4
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 3
30732: PUSH
30733: LD_INT 4
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 2
30742: PUSH
30743: LD_INT 3
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 2
30752: PUSH
30753: LD_INT 2
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 4
30762: PUSH
30763: LD_INT 2
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 2
30772: PUSH
30773: LD_INT 4
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 0
30782: PUSH
30783: LD_INT 4
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 0
30792: PUSH
30793: LD_INT 3
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 1
30802: PUSH
30803: LD_INT 4
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 1
30812: PUSH
30813: LD_INT 5
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: LD_INT 5
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: LD_INT 4
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 1
30843: NEG
30844: PUSH
30845: LD_INT 3
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 2
30854: PUSH
30855: LD_INT 5
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 2
30864: NEG
30865: PUSH
30866: LD_INT 3
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
30920: LD_ADDR_VAR 0 34
30924: PUSH
30925: LD_INT 0
30927: PUSH
30928: LD_INT 4
30930: NEG
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 0
30938: PUSH
30939: LD_INT 5
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 1
30949: PUSH
30950: LD_INT 4
30952: NEG
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 1
30960: PUSH
30961: LD_INT 3
30963: NEG
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 0
30971: PUSH
30972: LD_INT 3
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 1
30982: NEG
30983: PUSH
30984: LD_INT 4
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 1
30994: NEG
30995: PUSH
30996: LD_INT 5
30998: NEG
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 2
31006: PUSH
31007: LD_INT 3
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 2
31017: NEG
31018: PUSH
31019: LD_INT 5
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 3
31029: PUSH
31030: LD_INT 0
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 3
31039: PUSH
31040: LD_INT 1
31042: NEG
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 4
31050: PUSH
31051: LD_INT 0
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 4
31060: PUSH
31061: LD_INT 1
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 3
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 2
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 2
31090: PUSH
31091: LD_INT 1
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 2
31101: PUSH
31102: LD_INT 2
31104: NEG
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 4
31112: PUSH
31113: LD_INT 2
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 4
31122: PUSH
31123: LD_INT 4
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 4
31132: PUSH
31133: LD_INT 3
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 5
31142: PUSH
31143: LD_INT 4
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 5
31152: PUSH
31153: LD_INT 5
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 4
31162: PUSH
31163: LD_INT 5
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 3
31172: PUSH
31173: LD_INT 4
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 3
31182: PUSH
31183: LD_INT 3
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 5
31192: PUSH
31193: LD_INT 3
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 3
31202: PUSH
31203: LD_INT 5
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: LD_INT 3
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 0
31222: PUSH
31223: LD_INT 2
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 1
31232: PUSH
31233: LD_INT 3
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 1
31242: PUSH
31243: LD_INT 4
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: LD_INT 4
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 1
31262: NEG
31263: PUSH
31264: LD_INT 3
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: LD_INT 2
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 2
31284: PUSH
31285: LD_INT 4
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 2
31294: NEG
31295: PUSH
31296: LD_INT 2
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 4
31305: NEG
31306: PUSH
31307: LD_INT 0
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 4
31316: NEG
31317: PUSH
31318: LD_INT 1
31320: NEG
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 3
31328: NEG
31329: PUSH
31330: LD_INT 0
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 3
31339: NEG
31340: PUSH
31341: LD_INT 1
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 4
31350: NEG
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 5
31361: NEG
31362: PUSH
31363: LD_INT 0
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 5
31372: NEG
31373: PUSH
31374: LD_INT 1
31376: NEG
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 5
31384: NEG
31385: PUSH
31386: LD_INT 2
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 3
31396: NEG
31397: PUSH
31398: LD_INT 2
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: ST_TO_ADDR
// end ; end ;
31452: GO 31455
31454: POP
// case btype of b_depot , b_warehouse :
31455: LD_VAR 0 1
31459: PUSH
31460: LD_INT 0
31462: DOUBLE
31463: EQUAL
31464: IFTRUE 31474
31466: LD_INT 1
31468: DOUBLE
31469: EQUAL
31470: IFTRUE 31474
31472: GO 31675
31474: POP
// case nation of nation_american :
31475: LD_VAR 0 5
31479: PUSH
31480: LD_INT 1
31482: DOUBLE
31483: EQUAL
31484: IFTRUE 31488
31486: GO 31544
31488: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
31489: LD_ADDR_VAR 0 9
31493: PUSH
31494: LD_VAR 0 11
31498: PUSH
31499: LD_VAR 0 12
31503: PUSH
31504: LD_VAR 0 13
31508: PUSH
31509: LD_VAR 0 14
31513: PUSH
31514: LD_VAR 0 15
31518: PUSH
31519: LD_VAR 0 16
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: PUSH
31532: LD_VAR 0 4
31536: PUSH
31537: LD_INT 1
31539: PLUS
31540: ARRAY
31541: ST_TO_ADDR
31542: GO 31673
31544: LD_INT 2
31546: DOUBLE
31547: EQUAL
31548: IFTRUE 31552
31550: GO 31608
31552: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
31553: LD_ADDR_VAR 0 9
31557: PUSH
31558: LD_VAR 0 17
31562: PUSH
31563: LD_VAR 0 18
31567: PUSH
31568: LD_VAR 0 19
31572: PUSH
31573: LD_VAR 0 20
31577: PUSH
31578: LD_VAR 0 21
31582: PUSH
31583: LD_VAR 0 22
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: PUSH
31596: LD_VAR 0 4
31600: PUSH
31601: LD_INT 1
31603: PLUS
31604: ARRAY
31605: ST_TO_ADDR
31606: GO 31673
31608: LD_INT 3
31610: DOUBLE
31611: EQUAL
31612: IFTRUE 31616
31614: GO 31672
31616: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
31617: LD_ADDR_VAR 0 9
31621: PUSH
31622: LD_VAR 0 23
31626: PUSH
31627: LD_VAR 0 24
31631: PUSH
31632: LD_VAR 0 25
31636: PUSH
31637: LD_VAR 0 26
31641: PUSH
31642: LD_VAR 0 27
31646: PUSH
31647: LD_VAR 0 28
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: PUSH
31660: LD_VAR 0 4
31664: PUSH
31665: LD_INT 1
31667: PLUS
31668: ARRAY
31669: ST_TO_ADDR
31670: GO 31673
31672: POP
31673: GO 32228
31675: LD_INT 2
31677: DOUBLE
31678: EQUAL
31679: IFTRUE 31689
31681: LD_INT 3
31683: DOUBLE
31684: EQUAL
31685: IFTRUE 31689
31687: GO 31745
31689: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
31690: LD_ADDR_VAR 0 9
31694: PUSH
31695: LD_VAR 0 29
31699: PUSH
31700: LD_VAR 0 30
31704: PUSH
31705: LD_VAR 0 31
31709: PUSH
31710: LD_VAR 0 32
31714: PUSH
31715: LD_VAR 0 33
31719: PUSH
31720: LD_VAR 0 34
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: PUSH
31733: LD_VAR 0 4
31737: PUSH
31738: LD_INT 1
31740: PLUS
31741: ARRAY
31742: ST_TO_ADDR
31743: GO 32228
31745: LD_INT 16
31747: DOUBLE
31748: EQUAL
31749: IFTRUE 31807
31751: LD_INT 17
31753: DOUBLE
31754: EQUAL
31755: IFTRUE 31807
31757: LD_INT 18
31759: DOUBLE
31760: EQUAL
31761: IFTRUE 31807
31763: LD_INT 19
31765: DOUBLE
31766: EQUAL
31767: IFTRUE 31807
31769: LD_INT 22
31771: DOUBLE
31772: EQUAL
31773: IFTRUE 31807
31775: LD_INT 20
31777: DOUBLE
31778: EQUAL
31779: IFTRUE 31807
31781: LD_INT 21
31783: DOUBLE
31784: EQUAL
31785: IFTRUE 31807
31787: LD_INT 23
31789: DOUBLE
31790: EQUAL
31791: IFTRUE 31807
31793: LD_INT 24
31795: DOUBLE
31796: EQUAL
31797: IFTRUE 31807
31799: LD_INT 25
31801: DOUBLE
31802: EQUAL
31803: IFTRUE 31807
31805: GO 31863
31807: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
31808: LD_ADDR_VAR 0 9
31812: PUSH
31813: LD_VAR 0 35
31817: PUSH
31818: LD_VAR 0 36
31822: PUSH
31823: LD_VAR 0 37
31827: PUSH
31828: LD_VAR 0 38
31832: PUSH
31833: LD_VAR 0 39
31837: PUSH
31838: LD_VAR 0 40
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: PUSH
31851: LD_VAR 0 4
31855: PUSH
31856: LD_INT 1
31858: PLUS
31859: ARRAY
31860: ST_TO_ADDR
31861: GO 32228
31863: LD_INT 6
31865: DOUBLE
31866: EQUAL
31867: IFTRUE 31919
31869: LD_INT 7
31871: DOUBLE
31872: EQUAL
31873: IFTRUE 31919
31875: LD_INT 8
31877: DOUBLE
31878: EQUAL
31879: IFTRUE 31919
31881: LD_INT 13
31883: DOUBLE
31884: EQUAL
31885: IFTRUE 31919
31887: LD_INT 12
31889: DOUBLE
31890: EQUAL
31891: IFTRUE 31919
31893: LD_INT 15
31895: DOUBLE
31896: EQUAL
31897: IFTRUE 31919
31899: LD_INT 11
31901: DOUBLE
31902: EQUAL
31903: IFTRUE 31919
31905: LD_INT 14
31907: DOUBLE
31908: EQUAL
31909: IFTRUE 31919
31911: LD_INT 10
31913: DOUBLE
31914: EQUAL
31915: IFTRUE 31919
31917: GO 31975
31919: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
31920: LD_ADDR_VAR 0 9
31924: PUSH
31925: LD_VAR 0 41
31929: PUSH
31930: LD_VAR 0 42
31934: PUSH
31935: LD_VAR 0 43
31939: PUSH
31940: LD_VAR 0 44
31944: PUSH
31945: LD_VAR 0 45
31949: PUSH
31950: LD_VAR 0 46
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: PUSH
31963: LD_VAR 0 4
31967: PUSH
31968: LD_INT 1
31970: PLUS
31971: ARRAY
31972: ST_TO_ADDR
31973: GO 32228
31975: LD_INT 36
31977: DOUBLE
31978: EQUAL
31979: IFTRUE 31983
31981: GO 32039
31983: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
31984: LD_ADDR_VAR 0 9
31988: PUSH
31989: LD_VAR 0 47
31993: PUSH
31994: LD_VAR 0 48
31998: PUSH
31999: LD_VAR 0 49
32003: PUSH
32004: LD_VAR 0 50
32008: PUSH
32009: LD_VAR 0 51
32013: PUSH
32014: LD_VAR 0 52
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: PUSH
32027: LD_VAR 0 4
32031: PUSH
32032: LD_INT 1
32034: PLUS
32035: ARRAY
32036: ST_TO_ADDR
32037: GO 32228
32039: LD_INT 4
32041: DOUBLE
32042: EQUAL
32043: IFTRUE 32065
32045: LD_INT 5
32047: DOUBLE
32048: EQUAL
32049: IFTRUE 32065
32051: LD_INT 34
32053: DOUBLE
32054: EQUAL
32055: IFTRUE 32065
32057: LD_INT 37
32059: DOUBLE
32060: EQUAL
32061: IFTRUE 32065
32063: GO 32121
32065: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32066: LD_ADDR_VAR 0 9
32070: PUSH
32071: LD_VAR 0 53
32075: PUSH
32076: LD_VAR 0 54
32080: PUSH
32081: LD_VAR 0 55
32085: PUSH
32086: LD_VAR 0 56
32090: PUSH
32091: LD_VAR 0 57
32095: PUSH
32096: LD_VAR 0 58
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: PUSH
32109: LD_VAR 0 4
32113: PUSH
32114: LD_INT 1
32116: PLUS
32117: ARRAY
32118: ST_TO_ADDR
32119: GO 32228
32121: LD_INT 31
32123: DOUBLE
32124: EQUAL
32125: IFTRUE 32171
32127: LD_INT 32
32129: DOUBLE
32130: EQUAL
32131: IFTRUE 32171
32133: LD_INT 33
32135: DOUBLE
32136: EQUAL
32137: IFTRUE 32171
32139: LD_INT 27
32141: DOUBLE
32142: EQUAL
32143: IFTRUE 32171
32145: LD_INT 26
32147: DOUBLE
32148: EQUAL
32149: IFTRUE 32171
32151: LD_INT 28
32153: DOUBLE
32154: EQUAL
32155: IFTRUE 32171
32157: LD_INT 29
32159: DOUBLE
32160: EQUAL
32161: IFTRUE 32171
32163: LD_INT 30
32165: DOUBLE
32166: EQUAL
32167: IFTRUE 32171
32169: GO 32227
32171: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
32172: LD_ADDR_VAR 0 9
32176: PUSH
32177: LD_VAR 0 59
32181: PUSH
32182: LD_VAR 0 60
32186: PUSH
32187: LD_VAR 0 61
32191: PUSH
32192: LD_VAR 0 62
32196: PUSH
32197: LD_VAR 0 63
32201: PUSH
32202: LD_VAR 0 64
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: PUSH
32215: LD_VAR 0 4
32219: PUSH
32220: LD_INT 1
32222: PLUS
32223: ARRAY
32224: ST_TO_ADDR
32225: GO 32228
32227: POP
// temp_list2 = [ ] ;
32228: LD_ADDR_VAR 0 10
32232: PUSH
32233: EMPTY
32234: ST_TO_ADDR
// for i in temp_list do
32235: LD_ADDR_VAR 0 8
32239: PUSH
32240: LD_VAR 0 9
32244: PUSH
32245: FOR_IN
32246: IFFALSE 32298
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
32248: LD_ADDR_VAR 0 10
32252: PUSH
32253: LD_VAR 0 10
32257: PUSH
32258: LD_VAR 0 8
32262: PUSH
32263: LD_INT 1
32265: ARRAY
32266: PUSH
32267: LD_VAR 0 2
32271: PLUS
32272: PUSH
32273: LD_VAR 0 8
32277: PUSH
32278: LD_INT 2
32280: ARRAY
32281: PUSH
32282: LD_VAR 0 3
32286: PLUS
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: EMPTY
32293: LIST
32294: ADD
32295: ST_TO_ADDR
32296: GO 32245
32298: POP
32299: POP
// result = temp_list2 ;
32300: LD_ADDR_VAR 0 7
32304: PUSH
32305: LD_VAR 0 10
32309: ST_TO_ADDR
// end ;
32310: LD_VAR 0 7
32314: RET
// export function EnemyInRange ( unit , dist ) ; begin
32315: LD_INT 0
32317: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
32318: LD_ADDR_VAR 0 3
32322: PUSH
32323: LD_VAR 0 1
32327: PPUSH
32328: CALL_OW 255
32332: PPUSH
32333: LD_VAR 0 1
32337: PPUSH
32338: CALL_OW 250
32342: PPUSH
32343: LD_VAR 0 1
32347: PPUSH
32348: CALL_OW 251
32352: PPUSH
32353: LD_VAR 0 2
32357: PPUSH
32358: CALL 6116 0 4
32362: PUSH
32363: LD_INT 4
32365: ARRAY
32366: ST_TO_ADDR
// end ;
32367: LD_VAR 0 3
32371: RET
// export function PlayerSeeMe ( unit ) ; begin
32372: LD_INT 0
32374: PPUSH
// result := See ( your_side , unit ) ;
32375: LD_ADDR_VAR 0 2
32379: PUSH
32380: LD_OWVAR 2
32384: PPUSH
32385: LD_VAR 0 1
32389: PPUSH
32390: CALL_OW 292
32394: ST_TO_ADDR
// end ;
32395: LD_VAR 0 2
32399: RET
// export function ReverseDir ( unit ) ; begin
32400: LD_INT 0
32402: PPUSH
// if not unit then
32403: LD_VAR 0 1
32407: NOT
32408: IFFALSE 32412
// exit ;
32410: GO 32435
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
32412: LD_ADDR_VAR 0 2
32416: PUSH
32417: LD_VAR 0 1
32421: PPUSH
32422: CALL_OW 254
32426: PUSH
32427: LD_INT 3
32429: PLUS
32430: PUSH
32431: LD_INT 6
32433: MOD
32434: ST_TO_ADDR
// end ;
32435: LD_VAR 0 2
32439: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
32440: LD_INT 0
32442: PPUSH
32443: PPUSH
32444: PPUSH
32445: PPUSH
32446: PPUSH
// if not hexes then
32447: LD_VAR 0 2
32451: NOT
32452: IFFALSE 32456
// exit ;
32454: GO 32604
// dist := 9999 ;
32456: LD_ADDR_VAR 0 5
32460: PUSH
32461: LD_INT 9999
32463: ST_TO_ADDR
// for i = 1 to hexes do
32464: LD_ADDR_VAR 0 4
32468: PUSH
32469: DOUBLE
32470: LD_INT 1
32472: DEC
32473: ST_TO_ADDR
32474: LD_VAR 0 2
32478: PUSH
32479: FOR_TO
32480: IFFALSE 32592
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
32482: LD_VAR 0 1
32486: PPUSH
32487: LD_VAR 0 2
32491: PUSH
32492: LD_VAR 0 4
32496: ARRAY
32497: PUSH
32498: LD_INT 1
32500: ARRAY
32501: PPUSH
32502: LD_VAR 0 2
32506: PUSH
32507: LD_VAR 0 4
32511: ARRAY
32512: PUSH
32513: LD_INT 2
32515: ARRAY
32516: PPUSH
32517: CALL_OW 297
32521: PUSH
32522: LD_VAR 0 5
32526: LESS
32527: IFFALSE 32590
// begin hex := hexes [ i ] ;
32529: LD_ADDR_VAR 0 7
32533: PUSH
32534: LD_VAR 0 2
32538: PUSH
32539: LD_VAR 0 4
32543: ARRAY
32544: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32545: LD_ADDR_VAR 0 5
32549: PUSH
32550: LD_VAR 0 1
32554: PPUSH
32555: LD_VAR 0 2
32559: PUSH
32560: LD_VAR 0 4
32564: ARRAY
32565: PUSH
32566: LD_INT 1
32568: ARRAY
32569: PPUSH
32570: LD_VAR 0 2
32574: PUSH
32575: LD_VAR 0 4
32579: ARRAY
32580: PUSH
32581: LD_INT 2
32583: ARRAY
32584: PPUSH
32585: CALL_OW 297
32589: ST_TO_ADDR
// end ; end ;
32590: GO 32479
32592: POP
32593: POP
// result := hex ;
32594: LD_ADDR_VAR 0 3
32598: PUSH
32599: LD_VAR 0 7
32603: ST_TO_ADDR
// end ;
32604: LD_VAR 0 3
32608: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
32609: LD_INT 0
32611: PPUSH
32612: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
32613: LD_VAR 0 1
32617: NOT
32618: PUSH
32619: LD_VAR 0 1
32623: PUSH
32624: LD_INT 21
32626: PUSH
32627: LD_INT 2
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 23
32636: PUSH
32637: LD_INT 2
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PPUSH
32648: CALL_OW 69
32652: IN
32653: NOT
32654: OR
32655: IFFALSE 32659
// exit ;
32657: GO 32706
// for i = 1 to 3 do
32659: LD_ADDR_VAR 0 3
32663: PUSH
32664: DOUBLE
32665: LD_INT 1
32667: DEC
32668: ST_TO_ADDR
32669: LD_INT 3
32671: PUSH
32672: FOR_TO
32673: IFFALSE 32704
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
32675: LD_VAR 0 1
32679: PPUSH
32680: CALL_OW 250
32684: PPUSH
32685: LD_VAR 0 1
32689: PPUSH
32690: CALL_OW 251
32694: PPUSH
32695: LD_INT 1
32697: PPUSH
32698: CALL_OW 453
32702: GO 32672
32704: POP
32705: POP
// end ;
32706: LD_VAR 0 2
32710: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
32711: LD_INT 0
32713: PPUSH
32714: PPUSH
32715: PPUSH
32716: PPUSH
32717: PPUSH
32718: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
32719: LD_VAR 0 1
32723: NOT
32724: PUSH
32725: LD_VAR 0 2
32729: NOT
32730: OR
32731: PUSH
32732: LD_VAR 0 1
32736: PPUSH
32737: CALL_OW 314
32741: OR
32742: IFFALSE 32746
// exit ;
32744: GO 33187
// x := GetX ( enemy_unit ) ;
32746: LD_ADDR_VAR 0 7
32750: PUSH
32751: LD_VAR 0 2
32755: PPUSH
32756: CALL_OW 250
32760: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
32761: LD_ADDR_VAR 0 8
32765: PUSH
32766: LD_VAR 0 2
32770: PPUSH
32771: CALL_OW 251
32775: ST_TO_ADDR
// if not x or not y then
32776: LD_VAR 0 7
32780: NOT
32781: PUSH
32782: LD_VAR 0 8
32786: NOT
32787: OR
32788: IFFALSE 32792
// exit ;
32790: GO 33187
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
32792: LD_ADDR_VAR 0 6
32796: PUSH
32797: LD_VAR 0 7
32801: PPUSH
32802: LD_INT 0
32804: PPUSH
32805: LD_INT 4
32807: PPUSH
32808: CALL_OW 272
32812: PUSH
32813: LD_VAR 0 8
32817: PPUSH
32818: LD_INT 0
32820: PPUSH
32821: LD_INT 4
32823: PPUSH
32824: CALL_OW 273
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_VAR 0 7
32837: PPUSH
32838: LD_INT 1
32840: PPUSH
32841: LD_INT 4
32843: PPUSH
32844: CALL_OW 272
32848: PUSH
32849: LD_VAR 0 8
32853: PPUSH
32854: LD_INT 1
32856: PPUSH
32857: LD_INT 4
32859: PPUSH
32860: CALL_OW 273
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_VAR 0 7
32873: PPUSH
32874: LD_INT 2
32876: PPUSH
32877: LD_INT 4
32879: PPUSH
32880: CALL_OW 272
32884: PUSH
32885: LD_VAR 0 8
32889: PPUSH
32890: LD_INT 2
32892: PPUSH
32893: LD_INT 4
32895: PPUSH
32896: CALL_OW 273
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_VAR 0 7
32909: PPUSH
32910: LD_INT 3
32912: PPUSH
32913: LD_INT 4
32915: PPUSH
32916: CALL_OW 272
32920: PUSH
32921: LD_VAR 0 8
32925: PPUSH
32926: LD_INT 3
32928: PPUSH
32929: LD_INT 4
32931: PPUSH
32932: CALL_OW 273
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_VAR 0 7
32945: PPUSH
32946: LD_INT 4
32948: PPUSH
32949: LD_INT 4
32951: PPUSH
32952: CALL_OW 272
32956: PUSH
32957: LD_VAR 0 8
32961: PPUSH
32962: LD_INT 4
32964: PPUSH
32965: LD_INT 4
32967: PPUSH
32968: CALL_OW 273
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_VAR 0 7
32981: PPUSH
32982: LD_INT 5
32984: PPUSH
32985: LD_INT 4
32987: PPUSH
32988: CALL_OW 272
32992: PUSH
32993: LD_VAR 0 8
32997: PPUSH
32998: LD_INT 5
33000: PPUSH
33001: LD_INT 4
33003: PPUSH
33004: CALL_OW 273
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: ST_TO_ADDR
// for i = tmp downto 1 do
33021: LD_ADDR_VAR 0 4
33025: PUSH
33026: DOUBLE
33027: LD_VAR 0 6
33031: INC
33032: ST_TO_ADDR
33033: LD_INT 1
33035: PUSH
33036: FOR_DOWNTO
33037: IFFALSE 33138
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33039: LD_VAR 0 6
33043: PUSH
33044: LD_VAR 0 4
33048: ARRAY
33049: PUSH
33050: LD_INT 1
33052: ARRAY
33053: PPUSH
33054: LD_VAR 0 6
33058: PUSH
33059: LD_VAR 0 4
33063: ARRAY
33064: PUSH
33065: LD_INT 2
33067: ARRAY
33068: PPUSH
33069: CALL_OW 488
33073: NOT
33074: PUSH
33075: LD_VAR 0 6
33079: PUSH
33080: LD_VAR 0 4
33084: ARRAY
33085: PUSH
33086: LD_INT 1
33088: ARRAY
33089: PPUSH
33090: LD_VAR 0 6
33094: PUSH
33095: LD_VAR 0 4
33099: ARRAY
33100: PUSH
33101: LD_INT 2
33103: ARRAY
33104: PPUSH
33105: CALL_OW 428
33109: PUSH
33110: LD_INT 0
33112: NONEQUAL
33113: OR
33114: IFFALSE 33136
// tmp := Delete ( tmp , i ) ;
33116: LD_ADDR_VAR 0 6
33120: PUSH
33121: LD_VAR 0 6
33125: PPUSH
33126: LD_VAR 0 4
33130: PPUSH
33131: CALL_OW 3
33135: ST_TO_ADDR
33136: GO 33036
33138: POP
33139: POP
// j := GetClosestHex ( unit , tmp ) ;
33140: LD_ADDR_VAR 0 5
33144: PUSH
33145: LD_VAR 0 1
33149: PPUSH
33150: LD_VAR 0 6
33154: PPUSH
33155: CALL 32440 0 2
33159: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
33160: LD_VAR 0 1
33164: PPUSH
33165: LD_VAR 0 5
33169: PUSH
33170: LD_INT 1
33172: ARRAY
33173: PPUSH
33174: LD_VAR 0 5
33178: PUSH
33179: LD_INT 2
33181: ARRAY
33182: PPUSH
33183: CALL_OW 111
// end ;
33187: LD_VAR 0 3
33191: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
33192: LD_INT 0
33194: PPUSH
33195: PPUSH
33196: PPUSH
// uc_side = 0 ;
33197: LD_ADDR_OWVAR 20
33201: PUSH
33202: LD_INT 0
33204: ST_TO_ADDR
// uc_nation = 0 ;
33205: LD_ADDR_OWVAR 21
33209: PUSH
33210: LD_INT 0
33212: ST_TO_ADDR
// InitHc_All ( ) ;
33213: CALL_OW 584
// InitVc ;
33217: CALL_OW 20
// if mastodonts then
33221: LD_VAR 0 6
33225: IFFALSE 33292
// for i = 1 to mastodonts do
33227: LD_ADDR_VAR 0 11
33231: PUSH
33232: DOUBLE
33233: LD_INT 1
33235: DEC
33236: ST_TO_ADDR
33237: LD_VAR 0 6
33241: PUSH
33242: FOR_TO
33243: IFFALSE 33290
// begin vc_chassis := 31 ;
33245: LD_ADDR_OWVAR 37
33249: PUSH
33250: LD_INT 31
33252: ST_TO_ADDR
// vc_control := control_rider ;
33253: LD_ADDR_OWVAR 38
33257: PUSH
33258: LD_INT 4
33260: ST_TO_ADDR
// animal := CreateVehicle ;
33261: LD_ADDR_VAR 0 12
33265: PUSH
33266: CALL_OW 45
33270: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33271: LD_VAR 0 12
33275: PPUSH
33276: LD_VAR 0 8
33280: PPUSH
33281: LD_INT 0
33283: PPUSH
33284: CALL 35480 0 3
// end ;
33288: GO 33242
33290: POP
33291: POP
// if horses then
33292: LD_VAR 0 5
33296: IFFALSE 33363
// for i = 1 to horses do
33298: LD_ADDR_VAR 0 11
33302: PUSH
33303: DOUBLE
33304: LD_INT 1
33306: DEC
33307: ST_TO_ADDR
33308: LD_VAR 0 5
33312: PUSH
33313: FOR_TO
33314: IFFALSE 33361
// begin hc_class := 21 ;
33316: LD_ADDR_OWVAR 28
33320: PUSH
33321: LD_INT 21
33323: ST_TO_ADDR
// hc_gallery :=  ;
33324: LD_ADDR_OWVAR 33
33328: PUSH
33329: LD_STRING 
33331: ST_TO_ADDR
// animal := CreateHuman ;
33332: LD_ADDR_VAR 0 12
33336: PUSH
33337: CALL_OW 44
33341: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33342: LD_VAR 0 12
33346: PPUSH
33347: LD_VAR 0 8
33351: PPUSH
33352: LD_INT 0
33354: PPUSH
33355: CALL 35480 0 3
// end ;
33359: GO 33313
33361: POP
33362: POP
// if birds then
33363: LD_VAR 0 1
33367: IFFALSE 33434
// for i = 1 to birds do
33369: LD_ADDR_VAR 0 11
33373: PUSH
33374: DOUBLE
33375: LD_INT 1
33377: DEC
33378: ST_TO_ADDR
33379: LD_VAR 0 1
33383: PUSH
33384: FOR_TO
33385: IFFALSE 33432
// begin hc_class = 18 ;
33387: LD_ADDR_OWVAR 28
33391: PUSH
33392: LD_INT 18
33394: ST_TO_ADDR
// hc_gallery =  ;
33395: LD_ADDR_OWVAR 33
33399: PUSH
33400: LD_STRING 
33402: ST_TO_ADDR
// animal := CreateHuman ;
33403: LD_ADDR_VAR 0 12
33407: PUSH
33408: CALL_OW 44
33412: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33413: LD_VAR 0 12
33417: PPUSH
33418: LD_VAR 0 8
33422: PPUSH
33423: LD_INT 0
33425: PPUSH
33426: CALL 35480 0 3
// end ;
33430: GO 33384
33432: POP
33433: POP
// if tigers then
33434: LD_VAR 0 2
33438: IFFALSE 33522
// for i = 1 to tigers do
33440: LD_ADDR_VAR 0 11
33444: PUSH
33445: DOUBLE
33446: LD_INT 1
33448: DEC
33449: ST_TO_ADDR
33450: LD_VAR 0 2
33454: PUSH
33455: FOR_TO
33456: IFFALSE 33520
// begin hc_class = class_tiger ;
33458: LD_ADDR_OWVAR 28
33462: PUSH
33463: LD_INT 14
33465: ST_TO_ADDR
// hc_gallery =  ;
33466: LD_ADDR_OWVAR 33
33470: PUSH
33471: LD_STRING 
33473: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
33474: LD_ADDR_OWVAR 35
33478: PUSH
33479: LD_INT 7
33481: NEG
33482: PPUSH
33483: LD_INT 7
33485: PPUSH
33486: CALL_OW 12
33490: ST_TO_ADDR
// animal := CreateHuman ;
33491: LD_ADDR_VAR 0 12
33495: PUSH
33496: CALL_OW 44
33500: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33501: LD_VAR 0 12
33505: PPUSH
33506: LD_VAR 0 8
33510: PPUSH
33511: LD_INT 0
33513: PPUSH
33514: CALL 35480 0 3
// end ;
33518: GO 33455
33520: POP
33521: POP
// if apemans then
33522: LD_VAR 0 3
33526: IFFALSE 33649
// for i = 1 to apemans do
33528: LD_ADDR_VAR 0 11
33532: PUSH
33533: DOUBLE
33534: LD_INT 1
33536: DEC
33537: ST_TO_ADDR
33538: LD_VAR 0 3
33542: PUSH
33543: FOR_TO
33544: IFFALSE 33647
// begin hc_class = class_apeman ;
33546: LD_ADDR_OWVAR 28
33550: PUSH
33551: LD_INT 12
33553: ST_TO_ADDR
// hc_gallery =  ;
33554: LD_ADDR_OWVAR 33
33558: PUSH
33559: LD_STRING 
33561: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
33562: LD_ADDR_OWVAR 35
33566: PUSH
33567: LD_INT 5
33569: NEG
33570: PPUSH
33571: LD_INT 5
33573: PPUSH
33574: CALL_OW 12
33578: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
33579: LD_ADDR_OWVAR 31
33583: PUSH
33584: LD_INT 1
33586: PPUSH
33587: LD_INT 3
33589: PPUSH
33590: CALL_OW 12
33594: PUSH
33595: LD_INT 1
33597: PPUSH
33598: LD_INT 3
33600: PPUSH
33601: CALL_OW 12
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: ST_TO_ADDR
// animal := CreateHuman ;
33618: LD_ADDR_VAR 0 12
33622: PUSH
33623: CALL_OW 44
33627: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33628: LD_VAR 0 12
33632: PPUSH
33633: LD_VAR 0 8
33637: PPUSH
33638: LD_INT 0
33640: PPUSH
33641: CALL 35480 0 3
// end ;
33645: GO 33543
33647: POP
33648: POP
// if enchidnas then
33649: LD_VAR 0 4
33653: IFFALSE 33720
// for i = 1 to enchidnas do
33655: LD_ADDR_VAR 0 11
33659: PUSH
33660: DOUBLE
33661: LD_INT 1
33663: DEC
33664: ST_TO_ADDR
33665: LD_VAR 0 4
33669: PUSH
33670: FOR_TO
33671: IFFALSE 33718
// begin hc_class = 13 ;
33673: LD_ADDR_OWVAR 28
33677: PUSH
33678: LD_INT 13
33680: ST_TO_ADDR
// hc_gallery =  ;
33681: LD_ADDR_OWVAR 33
33685: PUSH
33686: LD_STRING 
33688: ST_TO_ADDR
// animal := CreateHuman ;
33689: LD_ADDR_VAR 0 12
33693: PUSH
33694: CALL_OW 44
33698: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33699: LD_VAR 0 12
33703: PPUSH
33704: LD_VAR 0 8
33708: PPUSH
33709: LD_INT 0
33711: PPUSH
33712: CALL 35480 0 3
// end ;
33716: GO 33670
33718: POP
33719: POP
// if fishes then
33720: LD_VAR 0 7
33724: IFFALSE 33791
// for i = 1 to fishes do
33726: LD_ADDR_VAR 0 11
33730: PUSH
33731: DOUBLE
33732: LD_INT 1
33734: DEC
33735: ST_TO_ADDR
33736: LD_VAR 0 7
33740: PUSH
33741: FOR_TO
33742: IFFALSE 33789
// begin hc_class = 20 ;
33744: LD_ADDR_OWVAR 28
33748: PUSH
33749: LD_INT 20
33751: ST_TO_ADDR
// hc_gallery =  ;
33752: LD_ADDR_OWVAR 33
33756: PUSH
33757: LD_STRING 
33759: ST_TO_ADDR
// animal := CreateHuman ;
33760: LD_ADDR_VAR 0 12
33764: PUSH
33765: CALL_OW 44
33769: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
33770: LD_VAR 0 12
33774: PPUSH
33775: LD_VAR 0 9
33779: PPUSH
33780: LD_INT 0
33782: PPUSH
33783: CALL 35480 0 3
// end ;
33787: GO 33741
33789: POP
33790: POP
// end ;
33791: LD_VAR 0 10
33795: RET
// export function WantHeal ( sci , unit ) ; begin
33796: LD_INT 0
33798: PPUSH
// if GetTaskList ( sci ) > 0 then
33799: LD_VAR 0 1
33803: PPUSH
33804: CALL_OW 437
33808: PUSH
33809: LD_INT 0
33811: GREATER
33812: IFFALSE 33882
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
33814: LD_VAR 0 1
33818: PPUSH
33819: CALL_OW 437
33823: PUSH
33824: LD_INT 1
33826: ARRAY
33827: PUSH
33828: LD_INT 1
33830: ARRAY
33831: PUSH
33832: LD_STRING l
33834: EQUAL
33835: PUSH
33836: LD_VAR 0 1
33840: PPUSH
33841: CALL_OW 437
33845: PUSH
33846: LD_INT 1
33848: ARRAY
33849: PUSH
33850: LD_INT 4
33852: ARRAY
33853: PUSH
33854: LD_VAR 0 2
33858: EQUAL
33859: AND
33860: IFFALSE 33872
// result := true else
33862: LD_ADDR_VAR 0 3
33866: PUSH
33867: LD_INT 1
33869: ST_TO_ADDR
33870: GO 33880
// result := false ;
33872: LD_ADDR_VAR 0 3
33876: PUSH
33877: LD_INT 0
33879: ST_TO_ADDR
// end else
33880: GO 33890
// result := false ;
33882: LD_ADDR_VAR 0 3
33886: PUSH
33887: LD_INT 0
33889: ST_TO_ADDR
// end ;
33890: LD_VAR 0 3
33894: RET
// export function HealTarget ( sci ) ; begin
33895: LD_INT 0
33897: PPUSH
// if not sci then
33898: LD_VAR 0 1
33902: NOT
33903: IFFALSE 33907
// exit ;
33905: GO 33972
// result := 0 ;
33907: LD_ADDR_VAR 0 2
33911: PUSH
33912: LD_INT 0
33914: ST_TO_ADDR
// if GetTaskList ( sci ) then
33915: LD_VAR 0 1
33919: PPUSH
33920: CALL_OW 437
33924: IFFALSE 33972
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
33926: LD_VAR 0 1
33930: PPUSH
33931: CALL_OW 437
33935: PUSH
33936: LD_INT 1
33938: ARRAY
33939: PUSH
33940: LD_INT 1
33942: ARRAY
33943: PUSH
33944: LD_STRING l
33946: EQUAL
33947: IFFALSE 33972
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
33949: LD_ADDR_VAR 0 2
33953: PUSH
33954: LD_VAR 0 1
33958: PPUSH
33959: CALL_OW 437
33963: PUSH
33964: LD_INT 1
33966: ARRAY
33967: PUSH
33968: LD_INT 4
33970: ARRAY
33971: ST_TO_ADDR
// end ;
33972: LD_VAR 0 2
33976: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
33977: LD_INT 0
33979: PPUSH
33980: PPUSH
33981: PPUSH
33982: PPUSH
// if not base_units then
33983: LD_VAR 0 1
33987: NOT
33988: IFFALSE 33992
// exit ;
33990: GO 34079
// result := false ;
33992: LD_ADDR_VAR 0 2
33996: PUSH
33997: LD_INT 0
33999: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
34000: LD_ADDR_VAR 0 5
34004: PUSH
34005: LD_VAR 0 1
34009: PPUSH
34010: LD_INT 21
34012: PUSH
34013: LD_INT 3
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PPUSH
34020: CALL_OW 72
34024: ST_TO_ADDR
// if not tmp then
34025: LD_VAR 0 5
34029: NOT
34030: IFFALSE 34034
// exit ;
34032: GO 34079
// for i in tmp do
34034: LD_ADDR_VAR 0 3
34038: PUSH
34039: LD_VAR 0 5
34043: PUSH
34044: FOR_IN
34045: IFFALSE 34077
// begin result := EnemyInRange ( i , 22 ) ;
34047: LD_ADDR_VAR 0 2
34051: PUSH
34052: LD_VAR 0 3
34056: PPUSH
34057: LD_INT 22
34059: PPUSH
34060: CALL 32315 0 2
34064: ST_TO_ADDR
// if result then
34065: LD_VAR 0 2
34069: IFFALSE 34075
// exit ;
34071: POP
34072: POP
34073: GO 34079
// end ;
34075: GO 34044
34077: POP
34078: POP
// end ;
34079: LD_VAR 0 2
34083: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
34084: LD_INT 0
34086: PPUSH
34087: PPUSH
// if not units then
34088: LD_VAR 0 1
34092: NOT
34093: IFFALSE 34097
// exit ;
34095: GO 34167
// result := [ ] ;
34097: LD_ADDR_VAR 0 3
34101: PUSH
34102: EMPTY
34103: ST_TO_ADDR
// for i in units do
34104: LD_ADDR_VAR 0 4
34108: PUSH
34109: LD_VAR 0 1
34113: PUSH
34114: FOR_IN
34115: IFFALSE 34165
// if GetTag ( i ) = tag then
34117: LD_VAR 0 4
34121: PPUSH
34122: CALL_OW 110
34126: PUSH
34127: LD_VAR 0 2
34131: EQUAL
34132: IFFALSE 34163
// result := Insert ( result , result + 1 , i ) ;
34134: LD_ADDR_VAR 0 3
34138: PUSH
34139: LD_VAR 0 3
34143: PPUSH
34144: LD_VAR 0 3
34148: PUSH
34149: LD_INT 1
34151: PLUS
34152: PPUSH
34153: LD_VAR 0 4
34157: PPUSH
34158: CALL_OW 2
34162: ST_TO_ADDR
34163: GO 34114
34165: POP
34166: POP
// end ;
34167: LD_VAR 0 3
34171: RET
// export function IsDriver ( un ) ; begin
34172: LD_INT 0
34174: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
34175: LD_ADDR_VAR 0 2
34179: PUSH
34180: LD_VAR 0 1
34184: PUSH
34185: LD_INT 55
34187: PUSH
34188: EMPTY
34189: LIST
34190: PPUSH
34191: CALL_OW 69
34195: IN
34196: ST_TO_ADDR
// end ;
34197: LD_VAR 0 2
34201: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
34202: LD_INT 0
34204: PPUSH
34205: PPUSH
// list := [ ] ;
34206: LD_ADDR_VAR 0 5
34210: PUSH
34211: EMPTY
34212: ST_TO_ADDR
// case d of 0 :
34213: LD_VAR 0 3
34217: PUSH
34218: LD_INT 0
34220: DOUBLE
34221: EQUAL
34222: IFTRUE 34226
34224: GO 34359
34226: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
34227: LD_ADDR_VAR 0 5
34231: PUSH
34232: LD_VAR 0 1
34236: PUSH
34237: LD_INT 4
34239: MINUS
34240: PUSH
34241: LD_VAR 0 2
34245: PUSH
34246: LD_INT 4
34248: MINUS
34249: PUSH
34250: LD_INT 2
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: LIST
34257: PUSH
34258: LD_VAR 0 1
34262: PUSH
34263: LD_INT 3
34265: MINUS
34266: PUSH
34267: LD_VAR 0 2
34271: PUSH
34272: LD_INT 1
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: LIST
34279: PUSH
34280: LD_VAR 0 1
34284: PUSH
34285: LD_INT 4
34287: PLUS
34288: PUSH
34289: LD_VAR 0 2
34293: PUSH
34294: LD_INT 4
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: LIST
34301: PUSH
34302: LD_VAR 0 1
34306: PUSH
34307: LD_INT 3
34309: PLUS
34310: PUSH
34311: LD_VAR 0 2
34315: PUSH
34316: LD_INT 3
34318: PLUS
34319: PUSH
34320: LD_INT 5
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: LIST
34327: PUSH
34328: LD_VAR 0 1
34332: PUSH
34333: LD_VAR 0 2
34337: PUSH
34338: LD_INT 4
34340: PLUS
34341: PUSH
34342: LD_INT 0
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: LIST
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: ST_TO_ADDR
// end ; 1 :
34357: GO 35057
34359: LD_INT 1
34361: DOUBLE
34362: EQUAL
34363: IFTRUE 34367
34365: GO 34500
34367: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
34368: LD_ADDR_VAR 0 5
34372: PUSH
34373: LD_VAR 0 1
34377: PUSH
34378: LD_VAR 0 2
34382: PUSH
34383: LD_INT 4
34385: MINUS
34386: PUSH
34387: LD_INT 3
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: LIST
34394: PUSH
34395: LD_VAR 0 1
34399: PUSH
34400: LD_INT 3
34402: MINUS
34403: PUSH
34404: LD_VAR 0 2
34408: PUSH
34409: LD_INT 3
34411: MINUS
34412: PUSH
34413: LD_INT 2
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: LIST
34420: PUSH
34421: LD_VAR 0 1
34425: PUSH
34426: LD_INT 4
34428: MINUS
34429: PUSH
34430: LD_VAR 0 2
34434: PUSH
34435: LD_INT 1
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: LIST
34442: PUSH
34443: LD_VAR 0 1
34447: PUSH
34448: LD_VAR 0 2
34452: PUSH
34453: LD_INT 3
34455: PLUS
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: LIST
34464: PUSH
34465: LD_VAR 0 1
34469: PUSH
34470: LD_INT 4
34472: PLUS
34473: PUSH
34474: LD_VAR 0 2
34478: PUSH
34479: LD_INT 4
34481: PLUS
34482: PUSH
34483: LD_INT 5
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: LIST
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: ST_TO_ADDR
// end ; 2 :
34498: GO 35057
34500: LD_INT 2
34502: DOUBLE
34503: EQUAL
34504: IFTRUE 34508
34506: GO 34637
34508: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
34509: LD_ADDR_VAR 0 5
34513: PUSH
34514: LD_VAR 0 1
34518: PUSH
34519: LD_VAR 0 2
34523: PUSH
34524: LD_INT 3
34526: MINUS
34527: PUSH
34528: LD_INT 3
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: LIST
34535: PUSH
34536: LD_VAR 0 1
34540: PUSH
34541: LD_INT 4
34543: PLUS
34544: PUSH
34545: LD_VAR 0 2
34549: PUSH
34550: LD_INT 4
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: LIST
34557: PUSH
34558: LD_VAR 0 1
34562: PUSH
34563: LD_VAR 0 2
34567: PUSH
34568: LD_INT 4
34570: PLUS
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: LIST
34579: PUSH
34580: LD_VAR 0 1
34584: PUSH
34585: LD_INT 3
34587: MINUS
34588: PUSH
34589: LD_VAR 0 2
34593: PUSH
34594: LD_INT 1
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: LIST
34601: PUSH
34602: LD_VAR 0 1
34606: PUSH
34607: LD_INT 4
34609: MINUS
34610: PUSH
34611: LD_VAR 0 2
34615: PUSH
34616: LD_INT 4
34618: MINUS
34619: PUSH
34620: LD_INT 2
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: LIST
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: ST_TO_ADDR
// end ; 3 :
34635: GO 35057
34637: LD_INT 3
34639: DOUBLE
34640: EQUAL
34641: IFTRUE 34645
34643: GO 34778
34645: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
34646: LD_ADDR_VAR 0 5
34650: PUSH
34651: LD_VAR 0 1
34655: PUSH
34656: LD_INT 3
34658: PLUS
34659: PUSH
34660: LD_VAR 0 2
34664: PUSH
34665: LD_INT 4
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: LIST
34672: PUSH
34673: LD_VAR 0 1
34677: PUSH
34678: LD_INT 4
34680: PLUS
34681: PUSH
34682: LD_VAR 0 2
34686: PUSH
34687: LD_INT 4
34689: PLUS
34690: PUSH
34691: LD_INT 5
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: LIST
34698: PUSH
34699: LD_VAR 0 1
34703: PUSH
34704: LD_INT 4
34706: MINUS
34707: PUSH
34708: LD_VAR 0 2
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: LIST
34720: PUSH
34721: LD_VAR 0 1
34725: PUSH
34726: LD_VAR 0 2
34730: PUSH
34731: LD_INT 4
34733: MINUS
34734: PUSH
34735: LD_INT 3
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: LIST
34742: PUSH
34743: LD_VAR 0 1
34747: PUSH
34748: LD_INT 3
34750: MINUS
34751: PUSH
34752: LD_VAR 0 2
34756: PUSH
34757: LD_INT 3
34759: MINUS
34760: PUSH
34761: LD_INT 2
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: LIST
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: ST_TO_ADDR
// end ; 4 :
34776: GO 35057
34778: LD_INT 4
34780: DOUBLE
34781: EQUAL
34782: IFTRUE 34786
34784: GO 34919
34786: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
34787: LD_ADDR_VAR 0 5
34791: PUSH
34792: LD_VAR 0 1
34796: PUSH
34797: LD_VAR 0 2
34801: PUSH
34802: LD_INT 4
34804: PLUS
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: LIST
34813: PUSH
34814: LD_VAR 0 1
34818: PUSH
34819: LD_INT 3
34821: PLUS
34822: PUSH
34823: LD_VAR 0 2
34827: PUSH
34828: LD_INT 3
34830: PLUS
34831: PUSH
34832: LD_INT 5
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: LIST
34839: PUSH
34840: LD_VAR 0 1
34844: PUSH
34845: LD_INT 4
34847: PLUS
34848: PUSH
34849: LD_VAR 0 2
34853: PUSH
34854: LD_INT 4
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: LIST
34861: PUSH
34862: LD_VAR 0 1
34866: PUSH
34867: LD_VAR 0 2
34871: PUSH
34872: LD_INT 3
34874: MINUS
34875: PUSH
34876: LD_INT 3
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: LIST
34883: PUSH
34884: LD_VAR 0 1
34888: PUSH
34889: LD_INT 4
34891: MINUS
34892: PUSH
34893: LD_VAR 0 2
34897: PUSH
34898: LD_INT 4
34900: MINUS
34901: PUSH
34902: LD_INT 2
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: LIST
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: ST_TO_ADDR
// end ; 5 :
34917: GO 35057
34919: LD_INT 5
34921: DOUBLE
34922: EQUAL
34923: IFTRUE 34927
34925: GO 35056
34927: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
34928: LD_ADDR_VAR 0 5
34932: PUSH
34933: LD_VAR 0 1
34937: PUSH
34938: LD_INT 4
34940: MINUS
34941: PUSH
34942: LD_VAR 0 2
34946: PUSH
34947: LD_INT 1
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: LIST
34954: PUSH
34955: LD_VAR 0 1
34959: PUSH
34960: LD_VAR 0 2
34964: PUSH
34965: LD_INT 4
34967: MINUS
34968: PUSH
34969: LD_INT 3
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: LIST
34976: PUSH
34977: LD_VAR 0 1
34981: PUSH
34982: LD_INT 4
34984: PLUS
34985: PUSH
34986: LD_VAR 0 2
34990: PUSH
34991: LD_INT 4
34993: PLUS
34994: PUSH
34995: LD_INT 5
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: LIST
35002: PUSH
35003: LD_VAR 0 1
35007: PUSH
35008: LD_INT 3
35010: PLUS
35011: PUSH
35012: LD_VAR 0 2
35016: PUSH
35017: LD_INT 4
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: LIST
35024: PUSH
35025: LD_VAR 0 1
35029: PUSH
35030: LD_VAR 0 2
35034: PUSH
35035: LD_INT 3
35037: PLUS
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: LIST
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: ST_TO_ADDR
// end ; end ;
35054: GO 35057
35056: POP
// result := list ;
35057: LD_ADDR_VAR 0 4
35061: PUSH
35062: LD_VAR 0 5
35066: ST_TO_ADDR
// end ;
35067: LD_VAR 0 4
35071: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
35072: LD_INT 0
35074: PPUSH
35075: PPUSH
35076: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
35077: LD_VAR 0 1
35081: NOT
35082: PUSH
35083: LD_VAR 0 2
35087: PUSH
35088: LD_INT 1
35090: PUSH
35091: LD_INT 2
35093: PUSH
35094: LD_INT 3
35096: PUSH
35097: LD_INT 4
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: IN
35106: NOT
35107: OR
35108: IFFALSE 35112
// exit ;
35110: GO 35204
// tmp := [ ] ;
35112: LD_ADDR_VAR 0 5
35116: PUSH
35117: EMPTY
35118: ST_TO_ADDR
// for i in units do
35119: LD_ADDR_VAR 0 4
35123: PUSH
35124: LD_VAR 0 1
35128: PUSH
35129: FOR_IN
35130: IFFALSE 35173
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
35132: LD_ADDR_VAR 0 5
35136: PUSH
35137: LD_VAR 0 5
35141: PPUSH
35142: LD_VAR 0 5
35146: PUSH
35147: LD_INT 1
35149: PLUS
35150: PPUSH
35151: LD_VAR 0 4
35155: PPUSH
35156: LD_VAR 0 2
35160: PPUSH
35161: CALL_OW 259
35165: PPUSH
35166: CALL_OW 2
35170: ST_TO_ADDR
35171: GO 35129
35173: POP
35174: POP
// if not tmp then
35175: LD_VAR 0 5
35179: NOT
35180: IFFALSE 35184
// exit ;
35182: GO 35204
// result := SortListByListDesc ( units , tmp ) ;
35184: LD_ADDR_VAR 0 3
35188: PUSH
35189: LD_VAR 0 1
35193: PPUSH
35194: LD_VAR 0 5
35198: PPUSH
35199: CALL_OW 77
35203: ST_TO_ADDR
// end ;
35204: LD_VAR 0 3
35208: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
35209: LD_INT 0
35211: PPUSH
35212: PPUSH
35213: PPUSH
// result := false ;
35214: LD_ADDR_VAR 0 3
35218: PUSH
35219: LD_INT 0
35221: ST_TO_ADDR
// x := GetX ( building ) ;
35222: LD_ADDR_VAR 0 4
35226: PUSH
35227: LD_VAR 0 2
35231: PPUSH
35232: CALL_OW 250
35236: ST_TO_ADDR
// y := GetY ( building ) ;
35237: LD_ADDR_VAR 0 5
35241: PUSH
35242: LD_VAR 0 2
35246: PPUSH
35247: CALL_OW 251
35251: ST_TO_ADDR
// if not building or not x or not y then
35252: LD_VAR 0 2
35256: NOT
35257: PUSH
35258: LD_VAR 0 4
35262: NOT
35263: OR
35264: PUSH
35265: LD_VAR 0 5
35269: NOT
35270: OR
35271: IFFALSE 35275
// exit ;
35273: GO 35367
// if GetTaskList ( unit ) then
35275: LD_VAR 0 1
35279: PPUSH
35280: CALL_OW 437
35284: IFFALSE 35367
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
35286: LD_STRING e
35288: PUSH
35289: LD_VAR 0 1
35293: PPUSH
35294: CALL_OW 437
35298: PUSH
35299: LD_INT 1
35301: ARRAY
35302: PUSH
35303: LD_INT 1
35305: ARRAY
35306: EQUAL
35307: PUSH
35308: LD_VAR 0 4
35312: PUSH
35313: LD_VAR 0 1
35317: PPUSH
35318: CALL_OW 437
35322: PUSH
35323: LD_INT 1
35325: ARRAY
35326: PUSH
35327: LD_INT 2
35329: ARRAY
35330: EQUAL
35331: AND
35332: PUSH
35333: LD_VAR 0 5
35337: PUSH
35338: LD_VAR 0 1
35342: PPUSH
35343: CALL_OW 437
35347: PUSH
35348: LD_INT 1
35350: ARRAY
35351: PUSH
35352: LD_INT 3
35354: ARRAY
35355: EQUAL
35356: AND
35357: IFFALSE 35367
// result := true end ;
35359: LD_ADDR_VAR 0 3
35363: PUSH
35364: LD_INT 1
35366: ST_TO_ADDR
// end ;
35367: LD_VAR 0 3
35371: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
35372: LD_INT 0
35374: PPUSH
// result := false ;
35375: LD_ADDR_VAR 0 4
35379: PUSH
35380: LD_INT 0
35382: ST_TO_ADDR
// if GetTaskList ( unit ) then
35383: LD_VAR 0 1
35387: PPUSH
35388: CALL_OW 437
35392: IFFALSE 35475
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
35394: LD_STRING M
35396: PUSH
35397: LD_VAR 0 1
35401: PPUSH
35402: CALL_OW 437
35406: PUSH
35407: LD_INT 1
35409: ARRAY
35410: PUSH
35411: LD_INT 1
35413: ARRAY
35414: EQUAL
35415: PUSH
35416: LD_VAR 0 2
35420: PUSH
35421: LD_VAR 0 1
35425: PPUSH
35426: CALL_OW 437
35430: PUSH
35431: LD_INT 1
35433: ARRAY
35434: PUSH
35435: LD_INT 2
35437: ARRAY
35438: EQUAL
35439: AND
35440: PUSH
35441: LD_VAR 0 3
35445: PUSH
35446: LD_VAR 0 1
35450: PPUSH
35451: CALL_OW 437
35455: PUSH
35456: LD_INT 1
35458: ARRAY
35459: PUSH
35460: LD_INT 3
35462: ARRAY
35463: EQUAL
35464: AND
35465: IFFALSE 35475
// result := true ;
35467: LD_ADDR_VAR 0 4
35471: PUSH
35472: LD_INT 1
35474: ST_TO_ADDR
// end ; end ;
35475: LD_VAR 0 4
35479: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
35480: LD_INT 0
35482: PPUSH
35483: PPUSH
35484: PPUSH
35485: PPUSH
// if not unit or not area then
35486: LD_VAR 0 1
35490: NOT
35491: PUSH
35492: LD_VAR 0 2
35496: NOT
35497: OR
35498: IFFALSE 35502
// exit ;
35500: GO 35666
// tmp := AreaToList ( area , i ) ;
35502: LD_ADDR_VAR 0 6
35506: PUSH
35507: LD_VAR 0 2
35511: PPUSH
35512: LD_VAR 0 5
35516: PPUSH
35517: CALL_OW 517
35521: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
35522: LD_ADDR_VAR 0 5
35526: PUSH
35527: DOUBLE
35528: LD_INT 1
35530: DEC
35531: ST_TO_ADDR
35532: LD_VAR 0 6
35536: PUSH
35537: LD_INT 1
35539: ARRAY
35540: PUSH
35541: FOR_TO
35542: IFFALSE 35664
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
35544: LD_ADDR_VAR 0 7
35548: PUSH
35549: LD_VAR 0 6
35553: PUSH
35554: LD_INT 1
35556: ARRAY
35557: PUSH
35558: LD_VAR 0 5
35562: ARRAY
35563: PUSH
35564: LD_VAR 0 6
35568: PUSH
35569: LD_INT 2
35571: ARRAY
35572: PUSH
35573: LD_VAR 0 5
35577: ARRAY
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
35583: LD_VAR 0 7
35587: PUSH
35588: LD_INT 1
35590: ARRAY
35591: PPUSH
35592: LD_VAR 0 7
35596: PUSH
35597: LD_INT 2
35599: ARRAY
35600: PPUSH
35601: CALL_OW 428
35605: PUSH
35606: LD_INT 0
35608: EQUAL
35609: IFFALSE 35662
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
35611: LD_VAR 0 1
35615: PPUSH
35616: LD_VAR 0 7
35620: PUSH
35621: LD_INT 1
35623: ARRAY
35624: PPUSH
35625: LD_VAR 0 7
35629: PUSH
35630: LD_INT 2
35632: ARRAY
35633: PPUSH
35634: LD_VAR 0 3
35638: PPUSH
35639: CALL_OW 48
// result := IsPlaced ( unit ) ;
35643: LD_ADDR_VAR 0 4
35647: PUSH
35648: LD_VAR 0 1
35652: PPUSH
35653: CALL_OW 305
35657: ST_TO_ADDR
// exit ;
35658: POP
35659: POP
35660: GO 35666
// end ; end ;
35662: GO 35541
35664: POP
35665: POP
// end ;
35666: LD_VAR 0 4
35670: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
35671: LD_INT 0
35673: PPUSH
35674: PPUSH
35675: PPUSH
// if not side or side > 8 then
35676: LD_VAR 0 1
35680: NOT
35681: PUSH
35682: LD_VAR 0 1
35686: PUSH
35687: LD_INT 8
35689: GREATER
35690: OR
35691: IFFALSE 35695
// exit ;
35693: GO 35882
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
35695: LD_ADDR_VAR 0 4
35699: PUSH
35700: LD_INT 22
35702: PUSH
35703: LD_VAR 0 1
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 21
35714: PUSH
35715: LD_INT 3
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PPUSH
35726: CALL_OW 69
35730: ST_TO_ADDR
// if not tmp then
35731: LD_VAR 0 4
35735: NOT
35736: IFFALSE 35740
// exit ;
35738: GO 35882
// enable_addtolog := true ;
35740: LD_ADDR_OWVAR 81
35744: PUSH
35745: LD_INT 1
35747: ST_TO_ADDR
// AddToLog ( [ ) ;
35748: LD_STRING [
35750: PPUSH
35751: CALL_OW 561
// for i in tmp do
35755: LD_ADDR_VAR 0 3
35759: PUSH
35760: LD_VAR 0 4
35764: PUSH
35765: FOR_IN
35766: IFFALSE 35873
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
35768: LD_STRING [
35770: PUSH
35771: LD_VAR 0 3
35775: PPUSH
35776: CALL_OW 266
35780: STR
35781: PUSH
35782: LD_STRING , 
35784: STR
35785: PUSH
35786: LD_VAR 0 3
35790: PPUSH
35791: CALL_OW 250
35795: STR
35796: PUSH
35797: LD_STRING , 
35799: STR
35800: PUSH
35801: LD_VAR 0 3
35805: PPUSH
35806: CALL_OW 251
35810: STR
35811: PUSH
35812: LD_STRING , 
35814: STR
35815: PUSH
35816: LD_VAR 0 3
35820: PPUSH
35821: CALL_OW 254
35825: STR
35826: PUSH
35827: LD_STRING , 
35829: STR
35830: PUSH
35831: LD_VAR 0 3
35835: PPUSH
35836: LD_INT 1
35838: PPUSH
35839: CALL_OW 268
35843: STR
35844: PUSH
35845: LD_STRING , 
35847: STR
35848: PUSH
35849: LD_VAR 0 3
35853: PPUSH
35854: LD_INT 2
35856: PPUSH
35857: CALL_OW 268
35861: STR
35862: PUSH
35863: LD_STRING ],
35865: STR
35866: PPUSH
35867: CALL_OW 561
// end ;
35871: GO 35765
35873: POP
35874: POP
// AddToLog ( ]; ) ;
35875: LD_STRING ];
35877: PPUSH
35878: CALL_OW 561
// end ;
35882: LD_VAR 0 2
35886: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
35887: LD_INT 0
35889: PPUSH
35890: PPUSH
35891: PPUSH
35892: PPUSH
35893: PPUSH
// if not area or not rate or not max then
35894: LD_VAR 0 1
35898: NOT
35899: PUSH
35900: LD_VAR 0 2
35904: NOT
35905: OR
35906: PUSH
35907: LD_VAR 0 4
35911: NOT
35912: OR
35913: IFFALSE 35917
// exit ;
35915: GO 36109
// while 1 do
35917: LD_INT 1
35919: IFFALSE 36109
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
35921: LD_ADDR_VAR 0 9
35925: PUSH
35926: LD_VAR 0 1
35930: PPUSH
35931: LD_INT 1
35933: PPUSH
35934: CALL_OW 287
35938: PUSH
35939: LD_INT 10
35941: MUL
35942: ST_TO_ADDR
// r := rate / 10 ;
35943: LD_ADDR_VAR 0 7
35947: PUSH
35948: LD_VAR 0 2
35952: PUSH
35953: LD_INT 10
35955: DIVREAL
35956: ST_TO_ADDR
// time := 1 1$00 ;
35957: LD_ADDR_VAR 0 8
35961: PUSH
35962: LD_INT 2100
35964: ST_TO_ADDR
// if amount < min then
35965: LD_VAR 0 9
35969: PUSH
35970: LD_VAR 0 3
35974: LESS
35975: IFFALSE 35993
// r := r * 2 else
35977: LD_ADDR_VAR 0 7
35981: PUSH
35982: LD_VAR 0 7
35986: PUSH
35987: LD_INT 2
35989: MUL
35990: ST_TO_ADDR
35991: GO 36019
// if amount > max then
35993: LD_VAR 0 9
35997: PUSH
35998: LD_VAR 0 4
36002: GREATER
36003: IFFALSE 36019
// r := r / 2 ;
36005: LD_ADDR_VAR 0 7
36009: PUSH
36010: LD_VAR 0 7
36014: PUSH
36015: LD_INT 2
36017: DIVREAL
36018: ST_TO_ADDR
// time := time / r ;
36019: LD_ADDR_VAR 0 8
36023: PUSH
36024: LD_VAR 0 8
36028: PUSH
36029: LD_VAR 0 7
36033: DIVREAL
36034: ST_TO_ADDR
// if time < 0 then
36035: LD_VAR 0 8
36039: PUSH
36040: LD_INT 0
36042: LESS
36043: IFFALSE 36060
// time := time * - 1 ;
36045: LD_ADDR_VAR 0 8
36049: PUSH
36050: LD_VAR 0 8
36054: PUSH
36055: LD_INT 1
36057: NEG
36058: MUL
36059: ST_TO_ADDR
// wait ( time ) ;
36060: LD_VAR 0 8
36064: PPUSH
36065: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
36069: LD_INT 35
36071: PPUSH
36072: LD_INT 875
36074: PPUSH
36075: CALL_OW 12
36079: PPUSH
36080: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
36084: LD_INT 1
36086: PPUSH
36087: LD_INT 5
36089: PPUSH
36090: CALL_OW 12
36094: PPUSH
36095: LD_VAR 0 1
36099: PPUSH
36100: LD_INT 1
36102: PPUSH
36103: CALL_OW 55
// end ;
36107: GO 35917
// end ;
36109: LD_VAR 0 5
36113: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
36114: LD_INT 0
36116: PPUSH
36117: PPUSH
36118: PPUSH
36119: PPUSH
36120: PPUSH
36121: PPUSH
36122: PPUSH
36123: PPUSH
// if not turrets or not factories then
36124: LD_VAR 0 1
36128: NOT
36129: PUSH
36130: LD_VAR 0 2
36134: NOT
36135: OR
36136: IFFALSE 36140
// exit ;
36138: GO 36447
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
36140: LD_ADDR_VAR 0 10
36144: PUSH
36145: LD_INT 5
36147: PUSH
36148: LD_INT 6
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 2
36157: PUSH
36158: LD_INT 4
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 3
36167: PUSH
36168: LD_INT 5
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 24
36182: PUSH
36183: LD_INT 25
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 23
36192: PUSH
36193: LD_INT 27
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 42
36206: PUSH
36207: LD_INT 43
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 44
36216: PUSH
36217: LD_INT 46
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 45
36226: PUSH
36227: LD_INT 47
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: LIST
36243: ST_TO_ADDR
// result := [ ] ;
36244: LD_ADDR_VAR 0 3
36248: PUSH
36249: EMPTY
36250: ST_TO_ADDR
// for i in turrets do
36251: LD_ADDR_VAR 0 4
36255: PUSH
36256: LD_VAR 0 1
36260: PUSH
36261: FOR_IN
36262: IFFALSE 36445
// begin nat := GetNation ( i ) ;
36264: LD_ADDR_VAR 0 7
36268: PUSH
36269: LD_VAR 0 4
36273: PPUSH
36274: CALL_OW 248
36278: ST_TO_ADDR
// weapon := 0 ;
36279: LD_ADDR_VAR 0 8
36283: PUSH
36284: LD_INT 0
36286: ST_TO_ADDR
// if not nat then
36287: LD_VAR 0 7
36291: NOT
36292: IFFALSE 36296
// continue ;
36294: GO 36261
// for j in list [ nat ] do
36296: LD_ADDR_VAR 0 5
36300: PUSH
36301: LD_VAR 0 10
36305: PUSH
36306: LD_VAR 0 7
36310: ARRAY
36311: PUSH
36312: FOR_IN
36313: IFFALSE 36354
// if GetBWeapon ( i ) = j [ 1 ] then
36315: LD_VAR 0 4
36319: PPUSH
36320: CALL_OW 269
36324: PUSH
36325: LD_VAR 0 5
36329: PUSH
36330: LD_INT 1
36332: ARRAY
36333: EQUAL
36334: IFFALSE 36352
// begin weapon := j [ 2 ] ;
36336: LD_ADDR_VAR 0 8
36340: PUSH
36341: LD_VAR 0 5
36345: PUSH
36346: LD_INT 2
36348: ARRAY
36349: ST_TO_ADDR
// break ;
36350: GO 36354
// end ;
36352: GO 36312
36354: POP
36355: POP
// if not weapon then
36356: LD_VAR 0 8
36360: NOT
36361: IFFALSE 36365
// continue ;
36363: GO 36261
// for k in factories do
36365: LD_ADDR_VAR 0 6
36369: PUSH
36370: LD_VAR 0 2
36374: PUSH
36375: FOR_IN
36376: IFFALSE 36441
// begin weapons := AvailableWeaponList ( k ) ;
36378: LD_ADDR_VAR 0 9
36382: PUSH
36383: LD_VAR 0 6
36387: PPUSH
36388: CALL_OW 478
36392: ST_TO_ADDR
// if not weapons then
36393: LD_VAR 0 9
36397: NOT
36398: IFFALSE 36402
// continue ;
36400: GO 36375
// if weapon in weapons then
36402: LD_VAR 0 8
36406: PUSH
36407: LD_VAR 0 9
36411: IN
36412: IFFALSE 36439
// begin result := [ i , weapon ] ;
36414: LD_ADDR_VAR 0 3
36418: PUSH
36419: LD_VAR 0 4
36423: PUSH
36424: LD_VAR 0 8
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: ST_TO_ADDR
// exit ;
36433: POP
36434: POP
36435: POP
36436: POP
36437: GO 36447
// end ; end ;
36439: GO 36375
36441: POP
36442: POP
// end ;
36443: GO 36261
36445: POP
36446: POP
// end ;
36447: LD_VAR 0 3
36451: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
36452: LD_INT 0
36454: PPUSH
// if not side or side > 8 then
36455: LD_VAR 0 3
36459: NOT
36460: PUSH
36461: LD_VAR 0 3
36465: PUSH
36466: LD_INT 8
36468: GREATER
36469: OR
36470: IFFALSE 36474
// exit ;
36472: GO 36533
// if not range then
36474: LD_VAR 0 4
36478: NOT
36479: IFFALSE 36490
// range := - 12 ;
36481: LD_ADDR_VAR 0 4
36485: PUSH
36486: LD_INT 12
36488: NEG
36489: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
36490: LD_VAR 0 1
36494: PPUSH
36495: LD_VAR 0 2
36499: PPUSH
36500: LD_VAR 0 3
36504: PPUSH
36505: LD_VAR 0 4
36509: PPUSH
36510: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
36514: LD_VAR 0 1
36518: PPUSH
36519: LD_VAR 0 2
36523: PPUSH
36524: LD_VAR 0 3
36528: PPUSH
36529: CALL_OW 331
// end ;
36533: LD_VAR 0 5
36537: RET
// export function Video ( mode ) ; begin
36538: LD_INT 0
36540: PPUSH
// ingame_video = mode ;
36541: LD_ADDR_OWVAR 52
36545: PUSH
36546: LD_VAR 0 1
36550: ST_TO_ADDR
// interface_hidden = mode ;
36551: LD_ADDR_OWVAR 54
36555: PUSH
36556: LD_VAR 0 1
36560: ST_TO_ADDR
// end ;
36561: LD_VAR 0 2
36565: RET
// export function Join ( array , element ) ; begin
36566: LD_INT 0
36568: PPUSH
// result := Replace ( array , array + 1 , element ) ;
36569: LD_ADDR_VAR 0 3
36573: PUSH
36574: LD_VAR 0 1
36578: PPUSH
36579: LD_VAR 0 1
36583: PUSH
36584: LD_INT 1
36586: PLUS
36587: PPUSH
36588: LD_VAR 0 2
36592: PPUSH
36593: CALL_OW 1
36597: ST_TO_ADDR
// end ;
36598: LD_VAR 0 3
36602: RET
// export function JoinUnion ( array , element ) ; begin
36603: LD_INT 0
36605: PPUSH
// result := array union element ;
36606: LD_ADDR_VAR 0 3
36610: PUSH
36611: LD_VAR 0 1
36615: PUSH
36616: LD_VAR 0 2
36620: UNION
36621: ST_TO_ADDR
// end ;
36622: LD_VAR 0 3
36626: RET
// export function GetBehemoths ( side ) ; begin
36627: LD_INT 0
36629: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
36630: LD_ADDR_VAR 0 2
36634: PUSH
36635: LD_INT 22
36637: PUSH
36638: LD_VAR 0 1
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 31
36649: PUSH
36650: LD_INT 25
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PPUSH
36661: CALL_OW 69
36665: ST_TO_ADDR
// end ;
36666: LD_VAR 0 2
36670: RET
// export function Shuffle ( array ) ; var i , index ; begin
36671: LD_INT 0
36673: PPUSH
36674: PPUSH
36675: PPUSH
// result := [ ] ;
36676: LD_ADDR_VAR 0 2
36680: PUSH
36681: EMPTY
36682: ST_TO_ADDR
// if not array then
36683: LD_VAR 0 1
36687: NOT
36688: IFFALSE 36692
// exit ;
36690: GO 36791
// Randomize ;
36692: CALL_OW 10
// for i = array downto 1 do
36696: LD_ADDR_VAR 0 3
36700: PUSH
36701: DOUBLE
36702: LD_VAR 0 1
36706: INC
36707: ST_TO_ADDR
36708: LD_INT 1
36710: PUSH
36711: FOR_DOWNTO
36712: IFFALSE 36789
// begin index := rand ( 1 , array ) ;
36714: LD_ADDR_VAR 0 4
36718: PUSH
36719: LD_INT 1
36721: PPUSH
36722: LD_VAR 0 1
36726: PPUSH
36727: CALL_OW 12
36731: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
36732: LD_ADDR_VAR 0 2
36736: PUSH
36737: LD_VAR 0 2
36741: PPUSH
36742: LD_VAR 0 2
36746: PUSH
36747: LD_INT 1
36749: PLUS
36750: PPUSH
36751: LD_VAR 0 1
36755: PUSH
36756: LD_VAR 0 4
36760: ARRAY
36761: PPUSH
36762: CALL_OW 2
36766: ST_TO_ADDR
// array := Delete ( array , index ) ;
36767: LD_ADDR_VAR 0 1
36771: PUSH
36772: LD_VAR 0 1
36776: PPUSH
36777: LD_VAR 0 4
36781: PPUSH
36782: CALL_OW 3
36786: ST_TO_ADDR
// end ;
36787: GO 36711
36789: POP
36790: POP
// end ;
36791: LD_VAR 0 2
36795: RET
// export function GetBaseMaterials ( base ) ; begin
36796: LD_INT 0
36798: PPUSH
// result := [ 0 , 0 , 0 ] ;
36799: LD_ADDR_VAR 0 2
36803: PUSH
36804: LD_INT 0
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: LIST
36817: ST_TO_ADDR
// if not base then
36818: LD_VAR 0 1
36822: NOT
36823: IFFALSE 36827
// exit ;
36825: GO 36876
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
36827: LD_ADDR_VAR 0 2
36831: PUSH
36832: LD_VAR 0 1
36836: PPUSH
36837: LD_INT 1
36839: PPUSH
36840: CALL_OW 275
36844: PUSH
36845: LD_VAR 0 1
36849: PPUSH
36850: LD_INT 2
36852: PPUSH
36853: CALL_OW 275
36857: PUSH
36858: LD_VAR 0 1
36862: PPUSH
36863: LD_INT 3
36865: PPUSH
36866: CALL_OW 275
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: LIST
36875: ST_TO_ADDR
// end ;
36876: LD_VAR 0 2
36880: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
36881: LD_INT 0
36883: PPUSH
36884: PPUSH
// result := array ;
36885: LD_ADDR_VAR 0 3
36889: PUSH
36890: LD_VAR 0 1
36894: ST_TO_ADDR
// if size > 0 then
36895: LD_VAR 0 2
36899: PUSH
36900: LD_INT 0
36902: GREATER
36903: IFFALSE 36949
// for i := array downto size do
36905: LD_ADDR_VAR 0 4
36909: PUSH
36910: DOUBLE
36911: LD_VAR 0 1
36915: INC
36916: ST_TO_ADDR
36917: LD_VAR 0 2
36921: PUSH
36922: FOR_DOWNTO
36923: IFFALSE 36947
// result := Delete ( result , result ) ;
36925: LD_ADDR_VAR 0 3
36929: PUSH
36930: LD_VAR 0 3
36934: PPUSH
36935: LD_VAR 0 3
36939: PPUSH
36940: CALL_OW 3
36944: ST_TO_ADDR
36945: GO 36922
36947: POP
36948: POP
// end ;
36949: LD_VAR 0 3
36953: RET
// export function ComExit ( unit ) ; var tmp ; begin
36954: LD_INT 0
36956: PPUSH
36957: PPUSH
// if not IsInUnit ( unit ) then
36958: LD_VAR 0 1
36962: PPUSH
36963: CALL_OW 310
36967: NOT
36968: IFFALSE 36972
// exit ;
36970: GO 37032
// tmp := IsInUnit ( unit ) ;
36972: LD_ADDR_VAR 0 3
36976: PUSH
36977: LD_VAR 0 1
36981: PPUSH
36982: CALL_OW 310
36986: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
36987: LD_VAR 0 3
36991: PPUSH
36992: CALL_OW 247
36996: PUSH
36997: LD_INT 2
36999: EQUAL
37000: IFFALSE 37013
// ComExitVehicle ( unit ) else
37002: LD_VAR 0 1
37006: PPUSH
37007: CALL_OW 121
37011: GO 37022
// ComExitBuilding ( unit ) ;
37013: LD_VAR 0 1
37017: PPUSH
37018: CALL_OW 122
// result := tmp ;
37022: LD_ADDR_VAR 0 2
37026: PUSH
37027: LD_VAR 0 3
37031: ST_TO_ADDR
// end ;
37032: LD_VAR 0 2
37036: RET
// export function ComExitAll ( units ) ; var i ; begin
37037: LD_INT 0
37039: PPUSH
37040: PPUSH
// if not units then
37041: LD_VAR 0 1
37045: NOT
37046: IFFALSE 37050
// exit ;
37048: GO 37076
// for i in units do
37050: LD_ADDR_VAR 0 3
37054: PUSH
37055: LD_VAR 0 1
37059: PUSH
37060: FOR_IN
37061: IFFALSE 37074
// ComExit ( i ) ;
37063: LD_VAR 0 3
37067: PPUSH
37068: CALL 36954 0 1
37072: GO 37060
37074: POP
37075: POP
// end ;
37076: LD_VAR 0 2
37080: RET
// export function ResetHc ; begin
37081: LD_INT 0
37083: PPUSH
// InitHc ;
37084: CALL_OW 19
// hc_importance := 0 ;
37088: LD_ADDR_OWVAR 32
37092: PUSH
37093: LD_INT 0
37095: ST_TO_ADDR
// end ;
37096: LD_VAR 0 1
37100: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
37101: LD_INT 0
37103: PPUSH
37104: PPUSH
37105: PPUSH
// _x := ( x1 + x2 ) div 2 ;
37106: LD_ADDR_VAR 0 6
37110: PUSH
37111: LD_VAR 0 1
37115: PUSH
37116: LD_VAR 0 3
37120: PLUS
37121: PUSH
37122: LD_INT 2
37124: DIV
37125: ST_TO_ADDR
// if _x < 0 then
37126: LD_VAR 0 6
37130: PUSH
37131: LD_INT 0
37133: LESS
37134: IFFALSE 37151
// _x := _x * - 1 ;
37136: LD_ADDR_VAR 0 6
37140: PUSH
37141: LD_VAR 0 6
37145: PUSH
37146: LD_INT 1
37148: NEG
37149: MUL
37150: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
37151: LD_ADDR_VAR 0 7
37155: PUSH
37156: LD_VAR 0 2
37160: PUSH
37161: LD_VAR 0 4
37165: PLUS
37166: PUSH
37167: LD_INT 2
37169: DIV
37170: ST_TO_ADDR
// if _y < 0 then
37171: LD_VAR 0 7
37175: PUSH
37176: LD_INT 0
37178: LESS
37179: IFFALSE 37196
// _y := _y * - 1 ;
37181: LD_ADDR_VAR 0 7
37185: PUSH
37186: LD_VAR 0 7
37190: PUSH
37191: LD_INT 1
37193: NEG
37194: MUL
37195: ST_TO_ADDR
// result := [ _x , _y ] ;
37196: LD_ADDR_VAR 0 5
37200: PUSH
37201: LD_VAR 0 6
37205: PUSH
37206: LD_VAR 0 7
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: ST_TO_ADDR
// end ;
37215: LD_VAR 0 5
37219: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
37220: LD_INT 0
37222: PPUSH
37223: PPUSH
37224: PPUSH
37225: PPUSH
// task := GetTaskList ( unit ) ;
37226: LD_ADDR_VAR 0 7
37230: PUSH
37231: LD_VAR 0 1
37235: PPUSH
37236: CALL_OW 437
37240: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
37241: LD_VAR 0 7
37245: NOT
37246: PUSH
37247: LD_VAR 0 1
37251: PPUSH
37252: LD_VAR 0 2
37256: PPUSH
37257: CALL_OW 308
37261: NOT
37262: AND
37263: IFFALSE 37267
// exit ;
37265: GO 37385
// if IsInArea ( unit , area ) then
37267: LD_VAR 0 1
37271: PPUSH
37272: LD_VAR 0 2
37276: PPUSH
37277: CALL_OW 308
37281: IFFALSE 37299
// begin ComMoveToArea ( unit , goAway ) ;
37283: LD_VAR 0 1
37287: PPUSH
37288: LD_VAR 0 3
37292: PPUSH
37293: CALL_OW 113
// exit ;
37297: GO 37385
// end ; if task [ 1 ] [ 1 ] <> M then
37299: LD_VAR 0 7
37303: PUSH
37304: LD_INT 1
37306: ARRAY
37307: PUSH
37308: LD_INT 1
37310: ARRAY
37311: PUSH
37312: LD_STRING M
37314: NONEQUAL
37315: IFFALSE 37319
// exit ;
37317: GO 37385
// x := task [ 1 ] [ 2 ] ;
37319: LD_ADDR_VAR 0 5
37323: PUSH
37324: LD_VAR 0 7
37328: PUSH
37329: LD_INT 1
37331: ARRAY
37332: PUSH
37333: LD_INT 2
37335: ARRAY
37336: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
37337: LD_ADDR_VAR 0 6
37341: PUSH
37342: LD_VAR 0 7
37346: PUSH
37347: LD_INT 1
37349: ARRAY
37350: PUSH
37351: LD_INT 3
37353: ARRAY
37354: ST_TO_ADDR
// if InArea ( x , y , area ) then
37355: LD_VAR 0 5
37359: PPUSH
37360: LD_VAR 0 6
37364: PPUSH
37365: LD_VAR 0 2
37369: PPUSH
37370: CALL_OW 309
37374: IFFALSE 37385
// ComStop ( unit ) ;
37376: LD_VAR 0 1
37380: PPUSH
37381: CALL_OW 141
// end ;
37385: LD_VAR 0 4
37389: RET
// export function Abs ( value ) ; begin
37390: LD_INT 0
37392: PPUSH
// result := value ;
37393: LD_ADDR_VAR 0 2
37397: PUSH
37398: LD_VAR 0 1
37402: ST_TO_ADDR
// if value < 0 then
37403: LD_VAR 0 1
37407: PUSH
37408: LD_INT 0
37410: LESS
37411: IFFALSE 37428
// result := value * - 1 ;
37413: LD_ADDR_VAR 0 2
37417: PUSH
37418: LD_VAR 0 1
37422: PUSH
37423: LD_INT 1
37425: NEG
37426: MUL
37427: ST_TO_ADDR
// end ;
37428: LD_VAR 0 2
37432: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
37433: LD_INT 0
37435: PPUSH
37436: PPUSH
37437: PPUSH
37438: PPUSH
37439: PPUSH
37440: PPUSH
37441: PPUSH
37442: PPUSH
// if not unit or not building then
37443: LD_VAR 0 1
37447: NOT
37448: PUSH
37449: LD_VAR 0 2
37453: NOT
37454: OR
37455: IFFALSE 37459
// exit ;
37457: GO 37685
// x := GetX ( building ) ;
37459: LD_ADDR_VAR 0 4
37463: PUSH
37464: LD_VAR 0 2
37468: PPUSH
37469: CALL_OW 250
37473: ST_TO_ADDR
// y := GetY ( building ) ;
37474: LD_ADDR_VAR 0 6
37478: PUSH
37479: LD_VAR 0 2
37483: PPUSH
37484: CALL_OW 251
37488: ST_TO_ADDR
// d := GetDir ( building ) ;
37489: LD_ADDR_VAR 0 8
37493: PUSH
37494: LD_VAR 0 2
37498: PPUSH
37499: CALL_OW 254
37503: ST_TO_ADDR
// r := 4 ;
37504: LD_ADDR_VAR 0 9
37508: PUSH
37509: LD_INT 4
37511: ST_TO_ADDR
// for i := 1 to 5 do
37512: LD_ADDR_VAR 0 10
37516: PUSH
37517: DOUBLE
37518: LD_INT 1
37520: DEC
37521: ST_TO_ADDR
37522: LD_INT 5
37524: PUSH
37525: FOR_TO
37526: IFFALSE 37683
// begin _x := ShiftX ( x , d , r + i ) ;
37528: LD_ADDR_VAR 0 5
37532: PUSH
37533: LD_VAR 0 4
37537: PPUSH
37538: LD_VAR 0 8
37542: PPUSH
37543: LD_VAR 0 9
37547: PUSH
37548: LD_VAR 0 10
37552: PLUS
37553: PPUSH
37554: CALL_OW 272
37558: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
37559: LD_ADDR_VAR 0 7
37563: PUSH
37564: LD_VAR 0 6
37568: PPUSH
37569: LD_VAR 0 8
37573: PPUSH
37574: LD_VAR 0 9
37578: PUSH
37579: LD_VAR 0 10
37583: PLUS
37584: PPUSH
37585: CALL_OW 273
37589: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
37590: LD_VAR 0 5
37594: PPUSH
37595: LD_VAR 0 7
37599: PPUSH
37600: CALL_OW 488
37604: PUSH
37605: LD_VAR 0 5
37609: PPUSH
37610: LD_VAR 0 7
37614: PPUSH
37615: CALL_OW 428
37619: PPUSH
37620: CALL_OW 247
37624: PUSH
37625: LD_INT 3
37627: PUSH
37628: LD_INT 2
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: IN
37635: NOT
37636: AND
37637: IFFALSE 37681
// begin ComMoveXY ( unit , _x , _y ) ;
37639: LD_VAR 0 1
37643: PPUSH
37644: LD_VAR 0 5
37648: PPUSH
37649: LD_VAR 0 7
37653: PPUSH
37654: CALL_OW 111
// result := [ _x , _y ] ;
37658: LD_ADDR_VAR 0 3
37662: PUSH
37663: LD_VAR 0 5
37667: PUSH
37668: LD_VAR 0 7
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: ST_TO_ADDR
// exit ;
37677: POP
37678: POP
37679: GO 37685
// end ; end ;
37681: GO 37525
37683: POP
37684: POP
// end ;
37685: LD_VAR 0 3
37689: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
37690: LD_INT 0
37692: PPUSH
37693: PPUSH
37694: PPUSH
// result := 0 ;
37695: LD_ADDR_VAR 0 3
37699: PUSH
37700: LD_INT 0
37702: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
37703: LD_VAR 0 1
37707: PUSH
37708: LD_INT 0
37710: LESS
37711: PUSH
37712: LD_VAR 0 1
37716: PUSH
37717: LD_INT 8
37719: GREATER
37720: OR
37721: PUSH
37722: LD_VAR 0 2
37726: PUSH
37727: LD_INT 0
37729: LESS
37730: OR
37731: PUSH
37732: LD_VAR 0 2
37736: PUSH
37737: LD_INT 8
37739: GREATER
37740: OR
37741: IFFALSE 37745
// exit ;
37743: GO 37820
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
37745: LD_ADDR_VAR 0 4
37749: PUSH
37750: LD_INT 22
37752: PUSH
37753: LD_VAR 0 2
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PPUSH
37762: CALL_OW 69
37766: PUSH
37767: FOR_IN
37768: IFFALSE 37818
// begin un := UnitShoot ( i ) ;
37770: LD_ADDR_VAR 0 5
37774: PUSH
37775: LD_VAR 0 4
37779: PPUSH
37780: CALL_OW 504
37784: ST_TO_ADDR
// if GetSide ( un ) = side1 then
37785: LD_VAR 0 5
37789: PPUSH
37790: CALL_OW 255
37794: PUSH
37795: LD_VAR 0 1
37799: EQUAL
37800: IFFALSE 37816
// begin result := un ;
37802: LD_ADDR_VAR 0 3
37806: PUSH
37807: LD_VAR 0 5
37811: ST_TO_ADDR
// exit ;
37812: POP
37813: POP
37814: GO 37820
// end ; end ;
37816: GO 37767
37818: POP
37819: POP
// end ;
37820: LD_VAR 0 3
37824: RET
// export function GetCargoBay ( units ) ; begin
37825: LD_INT 0
37827: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
37828: LD_ADDR_VAR 0 2
37832: PUSH
37833: LD_VAR 0 1
37837: PPUSH
37838: LD_INT 2
37840: PUSH
37841: LD_INT 34
37843: PUSH
37844: LD_INT 12
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 34
37853: PUSH
37854: LD_INT 51
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 34
37863: PUSH
37864: LD_INT 32
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 34
37873: PUSH
37874: LD_EXP 4
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: PPUSH
37890: CALL_OW 72
37894: ST_TO_ADDR
// end ; end_of_file
37895: LD_VAR 0 2
37899: RET
// export ecoSide , ecoNation , ecoPeopleAmount , ecoStartPoint , ecoCratesDrop , ecoCratesDropXY ; export function InitEcoMode ( startPoint , cratesDropXY ) ; var i , tmp , side , nation , peopleAmount , resourcesAmount ; begin
37900: LD_INT 0
37902: PPUSH
37903: PPUSH
37904: PPUSH
37905: PPUSH
37906: PPUSH
37907: PPUSH
37908: PPUSH
// ecoStartPoint := startPoint ;
37909: LD_ADDR_EXP 25
37913: PUSH
37914: LD_VAR 0 1
37918: ST_TO_ADDR
// CenterNowOnXY ( ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
37919: LD_EXP 25
37923: PUSH
37924: LD_INT 1
37926: ARRAY
37927: PPUSH
37928: LD_EXP 25
37932: PUSH
37933: LD_INT 2
37935: ARRAY
37936: PPUSH
37937: CALL_OW 86
// ToLua ( initEcoPanel(); ) ;
37941: LD_STRING initEcoPanel();
37943: PPUSH
37944: CALL_OW 559
// ecoCratesDropXY := cratesDropXY ;
37948: LD_ADDR_EXP 27
37952: PUSH
37953: LD_VAR 0 2
37957: ST_TO_ADDR
// if debug then
37958: LD_EXP 1
37962: IFFALSE 38006
// begin side := 1 ;
37964: LD_ADDR_VAR 0 6
37968: PUSH
37969: LD_INT 1
37971: ST_TO_ADDR
// nation := 1 ;
37972: LD_ADDR_VAR 0 7
37976: PUSH
37977: LD_INT 1
37979: ST_TO_ADDR
// peopleAmount := 15 ;
37980: LD_ADDR_VAR 0 8
37984: PUSH
37985: LD_INT 15
37987: ST_TO_ADDR
// resourcesAmount := 2 ;
37988: LD_ADDR_VAR 0 9
37992: PUSH
37993: LD_INT 2
37995: ST_TO_ADDR
// ecoCratesDrop := 3 ;
37996: LD_ADDR_EXP 26
38000: PUSH
38001: LD_INT 3
38003: ST_TO_ADDR
// end else
38004: GO 38122
// begin side := GetMultiplayerSetting ( 1 ) + 1 ;
38006: LD_ADDR_VAR 0 6
38010: PUSH
38011: LD_INT 1
38013: PPUSH
38014: CALL_OW 426
38018: PUSH
38019: LD_INT 1
38021: PLUS
38022: ST_TO_ADDR
// nation := GetMultiplayerSetting ( 2 ) + 1 ;
38023: LD_ADDR_VAR 0 7
38027: PUSH
38028: LD_INT 2
38030: PPUSH
38031: CALL_OW 426
38035: PUSH
38036: LD_INT 1
38038: PLUS
38039: ST_TO_ADDR
// peopleAmount := [ 6 , 9 , 12 , 15 , 18 , 21 , 24 ] [ GetMultiplayerSetting ( 3 ) + 1 ] ;
38040: LD_ADDR_VAR 0 8
38044: PUSH
38045: LD_INT 6
38047: PUSH
38048: LD_INT 9
38050: PUSH
38051: LD_INT 12
38053: PUSH
38054: LD_INT 15
38056: PUSH
38057: LD_INT 18
38059: PUSH
38060: LD_INT 21
38062: PUSH
38063: LD_INT 24
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 3
38077: PPUSH
38078: CALL_OW 426
38082: PUSH
38083: LD_INT 1
38085: PLUS
38086: ARRAY
38087: ST_TO_ADDR
// resourcesAmount := GetMultiplayerSetting ( 4 ) + 1 ;
38088: LD_ADDR_VAR 0 9
38092: PUSH
38093: LD_INT 4
38095: PPUSH
38096: CALL_OW 426
38100: PUSH
38101: LD_INT 1
38103: PLUS
38104: ST_TO_ADDR
// ecoCratesDrop := GetMultiplayerSetting ( 5 ) + 1 ;
38105: LD_ADDR_EXP 26
38109: PUSH
38110: LD_INT 5
38112: PPUSH
38113: CALL_OW 426
38117: PUSH
38118: LD_INT 1
38120: PLUS
38121: ST_TO_ADDR
// end ; ecoSide := side ;
38122: LD_ADDR_EXP 22
38126: PUSH
38127: LD_VAR 0 6
38131: ST_TO_ADDR
// your_side := side ;
38132: LD_ADDR_OWVAR 2
38136: PUSH
38137: LD_VAR 0 6
38141: ST_TO_ADDR
// ChangeSideFog ( 1 , side ) ;
38142: LD_INT 1
38144: PPUSH
38145: LD_VAR 0 6
38149: PPUSH
38150: CALL_OW 343
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
38154: LD_INT 1
38156: PPUSH
38157: LD_INT 1
38159: PPUSH
38160: LD_VAR 0 6
38164: PPUSH
38165: LD_INT 32793
38167: NEG
38168: PPUSH
38169: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
38173: LD_INT 1
38175: PPUSH
38176: LD_INT 1
38178: PPUSH
38179: LD_VAR 0 6
38183: PPUSH
38184: CALL_OW 331
// ecoNation := nation ;
38188: LD_ADDR_EXP 23
38192: PUSH
38193: LD_VAR 0 7
38197: ST_TO_ADDR
// ecoPeopleAmount := peopleAmount ;
38198: LD_ADDR_EXP 24
38202: PUSH
38203: LD_VAR 0 8
38207: ST_TO_ADDR
// for i = 1 to resourcesAmount * 5 do
38208: LD_ADDR_VAR 0 4
38212: PUSH
38213: DOUBLE
38214: LD_INT 1
38216: DEC
38217: ST_TO_ADDR
38218: LD_VAR 0 9
38222: PUSH
38223: LD_INT 5
38225: MUL
38226: PUSH
38227: FOR_TO
38228: IFFALSE 38266
// CreateResourcesXYR ( mat_cans , 5 , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 6 , false ) ;
38230: LD_INT 1
38232: PPUSH
38233: LD_INT 5
38235: PPUSH
38236: LD_EXP 25
38240: PUSH
38241: LD_INT 1
38243: ARRAY
38244: PPUSH
38245: LD_EXP 25
38249: PUSH
38250: LD_INT 2
38252: ARRAY
38253: PPUSH
38254: LD_INT 6
38256: PPUSH
38257: LD_INT 0
38259: PPUSH
38260: CALL_OW 60
38264: GO 38227
38266: POP
38267: POP
// uc_side := side ;
38268: LD_ADDR_OWVAR 20
38272: PUSH
38273: LD_VAR 0 6
38277: ST_TO_ADDR
// uc_nation := nation ;
38278: LD_ADDR_OWVAR 21
38282: PUSH
38283: LD_VAR 0 7
38287: ST_TO_ADDR
// hc_importance := 100 ;
38288: LD_ADDR_OWVAR 32
38292: PUSH
38293: LD_INT 100
38295: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
38296: LD_INT 0
38298: PPUSH
38299: LD_INT 1
38301: PPUSH
38302: LD_INT 4
38304: PPUSH
38305: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
38309: CALL_OW 44
38313: PPUSH
38314: LD_EXP 25
38318: PUSH
38319: LD_INT 1
38321: ARRAY
38322: PPUSH
38323: LD_EXP 25
38327: PUSH
38328: LD_INT 2
38330: ARRAY
38331: PPUSH
38332: LD_INT 12
38334: PPUSH
38335: LD_INT 0
38337: PPUSH
38338: CALL_OW 50
// InitHc_All ( ) ;
38342: CALL_OW 584
// for i = 1 to peopleAmount - 1 do
38346: LD_ADDR_VAR 0 4
38350: PUSH
38351: DOUBLE
38352: LD_INT 1
38354: DEC
38355: ST_TO_ADDR
38356: LD_VAR 0 8
38360: PUSH
38361: LD_INT 1
38363: MINUS
38364: PUSH
38365: FOR_TO
38366: IFFALSE 38461
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
38368: LD_INT 0
38370: PPUSH
38371: LD_VAR 0 4
38375: PUSH
38376: LD_INT 4
38378: MOD
38379: PUSH
38380: LD_INT 1
38382: PLUS
38383: PPUSH
38384: LD_INT 3
38386: PPUSH
38387: CALL_OW 380
// tmp := Replace ( tmp , tmp + 1 , CreateHuman ) ;
38391: LD_ADDR_VAR 0 5
38395: PUSH
38396: LD_VAR 0 5
38400: PPUSH
38401: LD_VAR 0 5
38405: PUSH
38406: LD_INT 1
38408: PLUS
38409: PPUSH
38410: CALL_OW 44
38414: PPUSH
38415: CALL_OW 1
38419: ST_TO_ADDR
// PlaceUnitXYR ( tmp [ tmp ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
38420: LD_VAR 0 5
38424: PUSH
38425: LD_VAR 0 5
38429: ARRAY
38430: PPUSH
38431: LD_EXP 25
38435: PUSH
38436: LD_INT 1
38438: ARRAY
38439: PPUSH
38440: LD_EXP 25
38444: PUSH
38445: LD_INT 2
38447: ARRAY
38448: PPUSH
38449: LD_INT 12
38451: PPUSH
38452: LD_INT 0
38454: PPUSH
38455: CALL_OW 50
// end ;
38459: GO 38365
38461: POP
38462: POP
// end ;
38463: LD_VAR 0 3
38467: RET
// every 0 0$1 trigger ecoCratesDrop and ecoCratesDropXY do var time , xy ;
38468: LD_EXP 26
38472: PUSH
38473: LD_EXP 27
38477: AND
38478: IFFALSE 38622
38480: GO 38482
38482: DISABLE
38483: LD_INT 0
38485: PPUSH
38486: PPUSH
// begin time := [ 0 0$30 , 0 0$20 , 0 0$10 ] [ ecoCratesDrop ] ;
38487: LD_ADDR_VAR 0 1
38491: PUSH
38492: LD_INT 1050
38494: PUSH
38495: LD_INT 700
38497: PUSH
38498: LD_INT 350
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: LIST
38505: PUSH
38506: LD_EXP 26
38510: ARRAY
38511: ST_TO_ADDR
// while true do
38512: LD_INT 1
38514: IFFALSE 38622
// begin wait ( time ) ;
38516: LD_VAR 0 1
38520: PPUSH
38521: CALL_OW 67
// time := time + 0 0$3 ;
38525: LD_ADDR_VAR 0 1
38529: PUSH
38530: LD_VAR 0 1
38534: PUSH
38535: LD_INT 105
38537: PLUS
38538: ST_TO_ADDR
// if time > 1 1$00 then
38539: LD_VAR 0 1
38543: PUSH
38544: LD_INT 2100
38546: GREATER
38547: IFFALSE 38557
// time := 0 0$30 ;
38549: LD_ADDR_VAR 0 1
38553: PUSH
38554: LD_INT 1050
38556: ST_TO_ADDR
// xy := ecoCratesDropXY [ rand ( 1 , ecoCratesDropXY ) ] ;
38557: LD_ADDR_VAR 0 2
38561: PUSH
38562: LD_EXP 27
38566: PUSH
38567: LD_INT 1
38569: PPUSH
38570: LD_EXP 27
38574: PPUSH
38575: CALL_OW 12
38579: ARRAY
38580: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , xy [ 1 ] , xy [ 2 ] , 6 , true ) ;
38581: LD_INT 1
38583: PPUSH
38584: LD_INT 5
38586: PPUSH
38587: CALL_OW 12
38591: PPUSH
38592: LD_VAR 0 2
38596: PUSH
38597: LD_INT 1
38599: ARRAY
38600: PPUSH
38601: LD_VAR 0 2
38605: PUSH
38606: LD_INT 2
38608: ARRAY
38609: PPUSH
38610: LD_INT 6
38612: PPUSH
38613: LD_INT 1
38615: PPUSH
38616: CALL_OW 56
// end ;
38620: GO 38512
// end ;
38622: PPOPN 2
38624: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
38625: LD_VAR 0 1
38629: PPUSH
38630: LD_VAR 0 2
38634: PPUSH
38635: LD_VAR 0 3
38639: PPUSH
38640: LD_VAR 0 4
38644: PPUSH
38645: LD_VAR 0 5
38649: PPUSH
38650: LD_VAR 0 6
38654: PPUSH
38655: CALL 38662 0 6
// end ; end_of_file
38659: PPOPN 6
38661: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
38662: LD_INT 0
38664: PPUSH
// if p2 = 100 then
38665: LD_VAR 0 2
38669: PUSH
38670: LD_INT 100
38672: EQUAL
38673: IFFALSE 39622
// begin if not StreamModeActive then
38675: LD_EXP 28
38679: NOT
38680: IFFALSE 38690
// StreamModeActive := true ;
38682: LD_ADDR_EXP 28
38686: PUSH
38687: LD_INT 1
38689: ST_TO_ADDR
// if p3 = 0 then
38690: LD_VAR 0 3
38694: PUSH
38695: LD_INT 0
38697: EQUAL
38698: IFFALSE 38704
// InitStreamMode ;
38700: CALL 39782 0 0
// if p3 = 1 then
38704: LD_VAR 0 3
38708: PUSH
38709: LD_INT 1
38711: EQUAL
38712: IFFALSE 38722
// sRocket := true ;
38714: LD_ADDR_EXP 33
38718: PUSH
38719: LD_INT 1
38721: ST_TO_ADDR
// if p3 = 2 then
38722: LD_VAR 0 3
38726: PUSH
38727: LD_INT 2
38729: EQUAL
38730: IFFALSE 38740
// sSpeed := true ;
38732: LD_ADDR_EXP 32
38736: PUSH
38737: LD_INT 1
38739: ST_TO_ADDR
// if p3 = 3 then
38740: LD_VAR 0 3
38744: PUSH
38745: LD_INT 3
38747: EQUAL
38748: IFFALSE 38758
// sEngine := true ;
38750: LD_ADDR_EXP 34
38754: PUSH
38755: LD_INT 1
38757: ST_TO_ADDR
// if p3 = 4 then
38758: LD_VAR 0 3
38762: PUSH
38763: LD_INT 4
38765: EQUAL
38766: IFFALSE 38776
// sSpec := true ;
38768: LD_ADDR_EXP 31
38772: PUSH
38773: LD_INT 1
38775: ST_TO_ADDR
// if p3 = 5 then
38776: LD_VAR 0 3
38780: PUSH
38781: LD_INT 5
38783: EQUAL
38784: IFFALSE 38794
// sLevel := true ;
38786: LD_ADDR_EXP 35
38790: PUSH
38791: LD_INT 1
38793: ST_TO_ADDR
// if p3 = 6 then
38794: LD_VAR 0 3
38798: PUSH
38799: LD_INT 6
38801: EQUAL
38802: IFFALSE 38812
// sArmoury := true ;
38804: LD_ADDR_EXP 36
38808: PUSH
38809: LD_INT 1
38811: ST_TO_ADDR
// if p3 = 7 then
38812: LD_VAR 0 3
38816: PUSH
38817: LD_INT 7
38819: EQUAL
38820: IFFALSE 38830
// sRadar := true ;
38822: LD_ADDR_EXP 37
38826: PUSH
38827: LD_INT 1
38829: ST_TO_ADDR
// if p3 = 8 then
38830: LD_VAR 0 3
38834: PUSH
38835: LD_INT 8
38837: EQUAL
38838: IFFALSE 38848
// sBunker := true ;
38840: LD_ADDR_EXP 38
38844: PUSH
38845: LD_INT 1
38847: ST_TO_ADDR
// if p3 = 9 then
38848: LD_VAR 0 3
38852: PUSH
38853: LD_INT 9
38855: EQUAL
38856: IFFALSE 38866
// sHack := true ;
38858: LD_ADDR_EXP 39
38862: PUSH
38863: LD_INT 1
38865: ST_TO_ADDR
// if p3 = 10 then
38866: LD_VAR 0 3
38870: PUSH
38871: LD_INT 10
38873: EQUAL
38874: IFFALSE 38884
// sFire := true ;
38876: LD_ADDR_EXP 40
38880: PUSH
38881: LD_INT 1
38883: ST_TO_ADDR
// if p3 = 11 then
38884: LD_VAR 0 3
38888: PUSH
38889: LD_INT 11
38891: EQUAL
38892: IFFALSE 38902
// sRefresh := true ;
38894: LD_ADDR_EXP 41
38898: PUSH
38899: LD_INT 1
38901: ST_TO_ADDR
// if p3 = 12 then
38902: LD_VAR 0 3
38906: PUSH
38907: LD_INT 12
38909: EQUAL
38910: IFFALSE 38920
// sExp := true ;
38912: LD_ADDR_EXP 42
38916: PUSH
38917: LD_INT 1
38919: ST_TO_ADDR
// if p3 = 13 then
38920: LD_VAR 0 3
38924: PUSH
38925: LD_INT 13
38927: EQUAL
38928: IFFALSE 38938
// sDepot := true ;
38930: LD_ADDR_EXP 43
38934: PUSH
38935: LD_INT 1
38937: ST_TO_ADDR
// if p3 = 14 then
38938: LD_VAR 0 3
38942: PUSH
38943: LD_INT 14
38945: EQUAL
38946: IFFALSE 38956
// sFlag := true ;
38948: LD_ADDR_EXP 44
38952: PUSH
38953: LD_INT 1
38955: ST_TO_ADDR
// if p3 = 15 then
38956: LD_VAR 0 3
38960: PUSH
38961: LD_INT 15
38963: EQUAL
38964: IFFALSE 38974
// sKamikadze := true ;
38966: LD_ADDR_EXP 52
38970: PUSH
38971: LD_INT 1
38973: ST_TO_ADDR
// if p3 = 16 then
38974: LD_VAR 0 3
38978: PUSH
38979: LD_INT 16
38981: EQUAL
38982: IFFALSE 38992
// sTroll := true ;
38984: LD_ADDR_EXP 53
38988: PUSH
38989: LD_INT 1
38991: ST_TO_ADDR
// if p3 = 17 then
38992: LD_VAR 0 3
38996: PUSH
38997: LD_INT 17
38999: EQUAL
39000: IFFALSE 39010
// sSlow := true ;
39002: LD_ADDR_EXP 54
39006: PUSH
39007: LD_INT 1
39009: ST_TO_ADDR
// if p3 = 18 then
39010: LD_VAR 0 3
39014: PUSH
39015: LD_INT 18
39017: EQUAL
39018: IFFALSE 39028
// sLack := true ;
39020: LD_ADDR_EXP 55
39024: PUSH
39025: LD_INT 1
39027: ST_TO_ADDR
// if p3 = 19 then
39028: LD_VAR 0 3
39032: PUSH
39033: LD_INT 19
39035: EQUAL
39036: IFFALSE 39046
// sTank := true ;
39038: LD_ADDR_EXP 57
39042: PUSH
39043: LD_INT 1
39045: ST_TO_ADDR
// if p3 = 20 then
39046: LD_VAR 0 3
39050: PUSH
39051: LD_INT 20
39053: EQUAL
39054: IFFALSE 39064
// sRemote := true ;
39056: LD_ADDR_EXP 58
39060: PUSH
39061: LD_INT 1
39063: ST_TO_ADDR
// if p3 = 21 then
39064: LD_VAR 0 3
39068: PUSH
39069: LD_INT 21
39071: EQUAL
39072: IFFALSE 39082
// sPowell := true ;
39074: LD_ADDR_EXP 59
39078: PUSH
39079: LD_INT 1
39081: ST_TO_ADDR
// if p3 = 22 then
39082: LD_VAR 0 3
39086: PUSH
39087: LD_INT 22
39089: EQUAL
39090: IFFALSE 39100
// sTeleport := true ;
39092: LD_ADDR_EXP 62
39096: PUSH
39097: LD_INT 1
39099: ST_TO_ADDR
// if p3 = 23 then
39100: LD_VAR 0 3
39104: PUSH
39105: LD_INT 23
39107: EQUAL
39108: IFFALSE 39118
// sOilTower := true ;
39110: LD_ADDR_EXP 64
39114: PUSH
39115: LD_INT 1
39117: ST_TO_ADDR
// if p3 = 24 then
39118: LD_VAR 0 3
39122: PUSH
39123: LD_INT 24
39125: EQUAL
39126: IFFALSE 39136
// sShovel := true ;
39128: LD_ADDR_EXP 65
39132: PUSH
39133: LD_INT 1
39135: ST_TO_ADDR
// if p3 = 25 then
39136: LD_VAR 0 3
39140: PUSH
39141: LD_INT 25
39143: EQUAL
39144: IFFALSE 39154
// sSheik := true ;
39146: LD_ADDR_EXP 66
39150: PUSH
39151: LD_INT 1
39153: ST_TO_ADDR
// if p3 = 26 then
39154: LD_VAR 0 3
39158: PUSH
39159: LD_INT 26
39161: EQUAL
39162: IFFALSE 39172
// sEarthquake := true ;
39164: LD_ADDR_EXP 68
39168: PUSH
39169: LD_INT 1
39171: ST_TO_ADDR
// if p3 = 27 then
39172: LD_VAR 0 3
39176: PUSH
39177: LD_INT 27
39179: EQUAL
39180: IFFALSE 39190
// sAI := true ;
39182: LD_ADDR_EXP 69
39186: PUSH
39187: LD_INT 1
39189: ST_TO_ADDR
// if p3 = 28 then
39190: LD_VAR 0 3
39194: PUSH
39195: LD_INT 28
39197: EQUAL
39198: IFFALSE 39208
// sCargo := true ;
39200: LD_ADDR_EXP 72
39204: PUSH
39205: LD_INT 1
39207: ST_TO_ADDR
// if p3 = 29 then
39208: LD_VAR 0 3
39212: PUSH
39213: LD_INT 29
39215: EQUAL
39216: IFFALSE 39226
// sDLaser := true ;
39218: LD_ADDR_EXP 73
39222: PUSH
39223: LD_INT 1
39225: ST_TO_ADDR
// if p3 = 30 then
39226: LD_VAR 0 3
39230: PUSH
39231: LD_INT 30
39233: EQUAL
39234: IFFALSE 39244
// sExchange := true ;
39236: LD_ADDR_EXP 74
39240: PUSH
39241: LD_INT 1
39243: ST_TO_ADDR
// if p3 = 31 then
39244: LD_VAR 0 3
39248: PUSH
39249: LD_INT 31
39251: EQUAL
39252: IFFALSE 39262
// sFac := true ;
39254: LD_ADDR_EXP 75
39258: PUSH
39259: LD_INT 1
39261: ST_TO_ADDR
// if p3 = 32 then
39262: LD_VAR 0 3
39266: PUSH
39267: LD_INT 32
39269: EQUAL
39270: IFFALSE 39280
// sPower := true ;
39272: LD_ADDR_EXP 76
39276: PUSH
39277: LD_INT 1
39279: ST_TO_ADDR
// if p3 = 33 then
39280: LD_VAR 0 3
39284: PUSH
39285: LD_INT 33
39287: EQUAL
39288: IFFALSE 39298
// sRandom := true ;
39290: LD_ADDR_EXP 77
39294: PUSH
39295: LD_INT 1
39297: ST_TO_ADDR
// if p3 = 34 then
39298: LD_VAR 0 3
39302: PUSH
39303: LD_INT 34
39305: EQUAL
39306: IFFALSE 39316
// sShield := true ;
39308: LD_ADDR_EXP 78
39312: PUSH
39313: LD_INT 1
39315: ST_TO_ADDR
// if p3 = 35 then
39316: LD_VAR 0 3
39320: PUSH
39321: LD_INT 35
39323: EQUAL
39324: IFFALSE 39334
// sTime := true ;
39326: LD_ADDR_EXP 79
39330: PUSH
39331: LD_INT 1
39333: ST_TO_ADDR
// if p3 = 36 then
39334: LD_VAR 0 3
39338: PUSH
39339: LD_INT 36
39341: EQUAL
39342: IFFALSE 39352
// sTools := true ;
39344: LD_ADDR_EXP 80
39348: PUSH
39349: LD_INT 1
39351: ST_TO_ADDR
// if p3 = 101 then
39352: LD_VAR 0 3
39356: PUSH
39357: LD_INT 101
39359: EQUAL
39360: IFFALSE 39370
// sSold := true ;
39362: LD_ADDR_EXP 45
39366: PUSH
39367: LD_INT 1
39369: ST_TO_ADDR
// if p3 = 102 then
39370: LD_VAR 0 3
39374: PUSH
39375: LD_INT 102
39377: EQUAL
39378: IFFALSE 39388
// sDiff := true ;
39380: LD_ADDR_EXP 46
39384: PUSH
39385: LD_INT 1
39387: ST_TO_ADDR
// if p3 = 103 then
39388: LD_VAR 0 3
39392: PUSH
39393: LD_INT 103
39395: EQUAL
39396: IFFALSE 39406
// sFog := true ;
39398: LD_ADDR_EXP 49
39402: PUSH
39403: LD_INT 1
39405: ST_TO_ADDR
// if p3 = 104 then
39406: LD_VAR 0 3
39410: PUSH
39411: LD_INT 104
39413: EQUAL
39414: IFFALSE 39424
// sReset := true ;
39416: LD_ADDR_EXP 50
39420: PUSH
39421: LD_INT 1
39423: ST_TO_ADDR
// if p3 = 105 then
39424: LD_VAR 0 3
39428: PUSH
39429: LD_INT 105
39431: EQUAL
39432: IFFALSE 39442
// sSun := true ;
39434: LD_ADDR_EXP 51
39438: PUSH
39439: LD_INT 1
39441: ST_TO_ADDR
// if p3 = 106 then
39442: LD_VAR 0 3
39446: PUSH
39447: LD_INT 106
39449: EQUAL
39450: IFFALSE 39460
// sTiger := true ;
39452: LD_ADDR_EXP 47
39456: PUSH
39457: LD_INT 1
39459: ST_TO_ADDR
// if p3 = 107 then
39460: LD_VAR 0 3
39464: PUSH
39465: LD_INT 107
39467: EQUAL
39468: IFFALSE 39478
// sBomb := true ;
39470: LD_ADDR_EXP 48
39474: PUSH
39475: LD_INT 1
39477: ST_TO_ADDR
// if p3 = 108 then
39478: LD_VAR 0 3
39482: PUSH
39483: LD_INT 108
39485: EQUAL
39486: IFFALSE 39496
// sWound := true ;
39488: LD_ADDR_EXP 56
39492: PUSH
39493: LD_INT 1
39495: ST_TO_ADDR
// if p3 = 109 then
39496: LD_VAR 0 3
39500: PUSH
39501: LD_INT 109
39503: EQUAL
39504: IFFALSE 39514
// sBetray := true ;
39506: LD_ADDR_EXP 60
39510: PUSH
39511: LD_INT 1
39513: ST_TO_ADDR
// if p3 = 110 then
39514: LD_VAR 0 3
39518: PUSH
39519: LD_INT 110
39521: EQUAL
39522: IFFALSE 39532
// sContamin := true ;
39524: LD_ADDR_EXP 61
39528: PUSH
39529: LD_INT 1
39531: ST_TO_ADDR
// if p3 = 111 then
39532: LD_VAR 0 3
39536: PUSH
39537: LD_INT 111
39539: EQUAL
39540: IFFALSE 39550
// sOil := true ;
39542: LD_ADDR_EXP 63
39546: PUSH
39547: LD_INT 1
39549: ST_TO_ADDR
// if p3 = 112 then
39550: LD_VAR 0 3
39554: PUSH
39555: LD_INT 112
39557: EQUAL
39558: IFFALSE 39568
// sStu := true ;
39560: LD_ADDR_EXP 67
39564: PUSH
39565: LD_INT 1
39567: ST_TO_ADDR
// if p3 = 113 then
39568: LD_VAR 0 3
39572: PUSH
39573: LD_INT 113
39575: EQUAL
39576: IFFALSE 39586
// sBazooka := true ;
39578: LD_ADDR_EXP 70
39582: PUSH
39583: LD_INT 1
39585: ST_TO_ADDR
// if p3 = 114 then
39586: LD_VAR 0 3
39590: PUSH
39591: LD_INT 114
39593: EQUAL
39594: IFFALSE 39604
// sMortar := true ;
39596: LD_ADDR_EXP 71
39600: PUSH
39601: LD_INT 1
39603: ST_TO_ADDR
// if p3 = 115 then
39604: LD_VAR 0 3
39608: PUSH
39609: LD_INT 115
39611: EQUAL
39612: IFFALSE 39622
// sRanger := true ;
39614: LD_ADDR_EXP 81
39618: PUSH
39619: LD_INT 1
39621: ST_TO_ADDR
// end ; if p2 = 101 then
39622: LD_VAR 0 2
39626: PUSH
39627: LD_INT 101
39629: EQUAL
39630: IFFALSE 39758
// begin case p3 of 1 :
39632: LD_VAR 0 3
39636: PUSH
39637: LD_INT 1
39639: DOUBLE
39640: EQUAL
39641: IFTRUE 39645
39643: GO 39652
39645: POP
// hHackUnlimitedResources ; 2 :
39646: CALL 50795 0 0
39650: GO 39758
39652: LD_INT 2
39654: DOUBLE
39655: EQUAL
39656: IFTRUE 39660
39658: GO 39667
39660: POP
// hHackSetLevel10 ; 3 :
39661: CALL 50928 0 0
39665: GO 39758
39667: LD_INT 3
39669: DOUBLE
39670: EQUAL
39671: IFTRUE 39675
39673: GO 39682
39675: POP
// hHackSetLevel10YourUnits ; 4 :
39676: CALL 51013 0 0
39680: GO 39758
39682: LD_INT 4
39684: DOUBLE
39685: EQUAL
39686: IFTRUE 39690
39688: GO 39697
39690: POP
// hHackInvincible ; 5 :
39691: CALL 51461 0 0
39695: GO 39758
39697: LD_INT 5
39699: DOUBLE
39700: EQUAL
39701: IFTRUE 39705
39703: GO 39712
39705: POP
// hHackInvisible ; 6 :
39706: CALL 51572 0 0
39710: GO 39758
39712: LD_INT 6
39714: DOUBLE
39715: EQUAL
39716: IFTRUE 39720
39718: GO 39727
39720: POP
// hHackChangeYourSide ; 7 :
39721: CALL 51629 0 0
39725: GO 39758
39727: LD_INT 7
39729: DOUBLE
39730: EQUAL
39731: IFTRUE 39735
39733: GO 39742
39735: POP
// hHackChangeUnitSide ; 8 :
39736: CALL 51671 0 0
39740: GO 39758
39742: LD_INT 8
39744: DOUBLE
39745: EQUAL
39746: IFTRUE 39750
39748: GO 39757
39750: POP
// hHackFog ; end ;
39751: CALL 51772 0 0
39755: GO 39758
39757: POP
// end ; end ;
39758: LD_VAR 0 7
39762: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
39763: GO 39765
39765: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
39766: LD_STRING initStreamRollete();
39768: PPUSH
39769: CALL_OW 559
// InitStreamMode ;
39773: CALL 39782 0 0
// DefineStreamItems ( ) ;
39777: CALL 40222 0 0
// end ;
39781: END
// function InitStreamMode ; begin
39782: LD_INT 0
39784: PPUSH
// streamModeActive := false ;
39785: LD_ADDR_EXP 28
39789: PUSH
39790: LD_INT 0
39792: ST_TO_ADDR
// normalCounter := 36 ;
39793: LD_ADDR_EXP 29
39797: PUSH
39798: LD_INT 36
39800: ST_TO_ADDR
// hardcoreCounter := 16 ;
39801: LD_ADDR_EXP 30
39805: PUSH
39806: LD_INT 16
39808: ST_TO_ADDR
// sRocket := false ;
39809: LD_ADDR_EXP 33
39813: PUSH
39814: LD_INT 0
39816: ST_TO_ADDR
// sSpeed := false ;
39817: LD_ADDR_EXP 32
39821: PUSH
39822: LD_INT 0
39824: ST_TO_ADDR
// sEngine := false ;
39825: LD_ADDR_EXP 34
39829: PUSH
39830: LD_INT 0
39832: ST_TO_ADDR
// sSpec := false ;
39833: LD_ADDR_EXP 31
39837: PUSH
39838: LD_INT 0
39840: ST_TO_ADDR
// sLevel := false ;
39841: LD_ADDR_EXP 35
39845: PUSH
39846: LD_INT 0
39848: ST_TO_ADDR
// sArmoury := false ;
39849: LD_ADDR_EXP 36
39853: PUSH
39854: LD_INT 0
39856: ST_TO_ADDR
// sRadar := false ;
39857: LD_ADDR_EXP 37
39861: PUSH
39862: LD_INT 0
39864: ST_TO_ADDR
// sBunker := false ;
39865: LD_ADDR_EXP 38
39869: PUSH
39870: LD_INT 0
39872: ST_TO_ADDR
// sHack := false ;
39873: LD_ADDR_EXP 39
39877: PUSH
39878: LD_INT 0
39880: ST_TO_ADDR
// sFire := false ;
39881: LD_ADDR_EXP 40
39885: PUSH
39886: LD_INT 0
39888: ST_TO_ADDR
// sRefresh := false ;
39889: LD_ADDR_EXP 41
39893: PUSH
39894: LD_INT 0
39896: ST_TO_ADDR
// sExp := false ;
39897: LD_ADDR_EXP 42
39901: PUSH
39902: LD_INT 0
39904: ST_TO_ADDR
// sDepot := false ;
39905: LD_ADDR_EXP 43
39909: PUSH
39910: LD_INT 0
39912: ST_TO_ADDR
// sFlag := false ;
39913: LD_ADDR_EXP 44
39917: PUSH
39918: LD_INT 0
39920: ST_TO_ADDR
// sKamikadze := false ;
39921: LD_ADDR_EXP 52
39925: PUSH
39926: LD_INT 0
39928: ST_TO_ADDR
// sTroll := false ;
39929: LD_ADDR_EXP 53
39933: PUSH
39934: LD_INT 0
39936: ST_TO_ADDR
// sSlow := false ;
39937: LD_ADDR_EXP 54
39941: PUSH
39942: LD_INT 0
39944: ST_TO_ADDR
// sLack := false ;
39945: LD_ADDR_EXP 55
39949: PUSH
39950: LD_INT 0
39952: ST_TO_ADDR
// sTank := false ;
39953: LD_ADDR_EXP 57
39957: PUSH
39958: LD_INT 0
39960: ST_TO_ADDR
// sRemote := false ;
39961: LD_ADDR_EXP 58
39965: PUSH
39966: LD_INT 0
39968: ST_TO_ADDR
// sPowell := false ;
39969: LD_ADDR_EXP 59
39973: PUSH
39974: LD_INT 0
39976: ST_TO_ADDR
// sTeleport := false ;
39977: LD_ADDR_EXP 62
39981: PUSH
39982: LD_INT 0
39984: ST_TO_ADDR
// sOilTower := false ;
39985: LD_ADDR_EXP 64
39989: PUSH
39990: LD_INT 0
39992: ST_TO_ADDR
// sShovel := false ;
39993: LD_ADDR_EXP 65
39997: PUSH
39998: LD_INT 0
40000: ST_TO_ADDR
// sSheik := false ;
40001: LD_ADDR_EXP 66
40005: PUSH
40006: LD_INT 0
40008: ST_TO_ADDR
// sEarthquake := false ;
40009: LD_ADDR_EXP 68
40013: PUSH
40014: LD_INT 0
40016: ST_TO_ADDR
// sAI := false ;
40017: LD_ADDR_EXP 69
40021: PUSH
40022: LD_INT 0
40024: ST_TO_ADDR
// sCargo := false ;
40025: LD_ADDR_EXP 72
40029: PUSH
40030: LD_INT 0
40032: ST_TO_ADDR
// sDLaser := false ;
40033: LD_ADDR_EXP 73
40037: PUSH
40038: LD_INT 0
40040: ST_TO_ADDR
// sExchange := false ;
40041: LD_ADDR_EXP 74
40045: PUSH
40046: LD_INT 0
40048: ST_TO_ADDR
// sFac := false ;
40049: LD_ADDR_EXP 75
40053: PUSH
40054: LD_INT 0
40056: ST_TO_ADDR
// sPower := false ;
40057: LD_ADDR_EXP 76
40061: PUSH
40062: LD_INT 0
40064: ST_TO_ADDR
// sRandom := false ;
40065: LD_ADDR_EXP 77
40069: PUSH
40070: LD_INT 0
40072: ST_TO_ADDR
// sShield := false ;
40073: LD_ADDR_EXP 78
40077: PUSH
40078: LD_INT 0
40080: ST_TO_ADDR
// sTime := false ;
40081: LD_ADDR_EXP 79
40085: PUSH
40086: LD_INT 0
40088: ST_TO_ADDR
// sTools := false ;
40089: LD_ADDR_EXP 80
40093: PUSH
40094: LD_INT 0
40096: ST_TO_ADDR
// sSold := false ;
40097: LD_ADDR_EXP 45
40101: PUSH
40102: LD_INT 0
40104: ST_TO_ADDR
// sDiff := false ;
40105: LD_ADDR_EXP 46
40109: PUSH
40110: LD_INT 0
40112: ST_TO_ADDR
// sFog := false ;
40113: LD_ADDR_EXP 49
40117: PUSH
40118: LD_INT 0
40120: ST_TO_ADDR
// sReset := false ;
40121: LD_ADDR_EXP 50
40125: PUSH
40126: LD_INT 0
40128: ST_TO_ADDR
// sSun := false ;
40129: LD_ADDR_EXP 51
40133: PUSH
40134: LD_INT 0
40136: ST_TO_ADDR
// sTiger := false ;
40137: LD_ADDR_EXP 47
40141: PUSH
40142: LD_INT 0
40144: ST_TO_ADDR
// sBomb := false ;
40145: LD_ADDR_EXP 48
40149: PUSH
40150: LD_INT 0
40152: ST_TO_ADDR
// sWound := false ;
40153: LD_ADDR_EXP 56
40157: PUSH
40158: LD_INT 0
40160: ST_TO_ADDR
// sBetray := false ;
40161: LD_ADDR_EXP 60
40165: PUSH
40166: LD_INT 0
40168: ST_TO_ADDR
// sContamin := false ;
40169: LD_ADDR_EXP 61
40173: PUSH
40174: LD_INT 0
40176: ST_TO_ADDR
// sOil := false ;
40177: LD_ADDR_EXP 63
40181: PUSH
40182: LD_INT 0
40184: ST_TO_ADDR
// sStu := false ;
40185: LD_ADDR_EXP 67
40189: PUSH
40190: LD_INT 0
40192: ST_TO_ADDR
// sBazooka := false ;
40193: LD_ADDR_EXP 70
40197: PUSH
40198: LD_INT 0
40200: ST_TO_ADDR
// sMortar := false ;
40201: LD_ADDR_EXP 71
40205: PUSH
40206: LD_INT 0
40208: ST_TO_ADDR
// sRanger := false ;
40209: LD_ADDR_EXP 81
40213: PUSH
40214: LD_INT 0
40216: ST_TO_ADDR
// end ;
40217: LD_VAR 0 1
40221: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
40222: LD_INT 0
40224: PPUSH
40225: PPUSH
40226: PPUSH
40227: PPUSH
40228: PPUSH
// result := [ ] ;
40229: LD_ADDR_VAR 0 1
40233: PUSH
40234: EMPTY
40235: ST_TO_ADDR
// if campaign_id = 1 then
40236: LD_OWVAR 69
40240: PUSH
40241: LD_INT 1
40243: EQUAL
40244: IFFALSE 43182
// begin case mission_number of 1 :
40246: LD_OWVAR 70
40250: PUSH
40251: LD_INT 1
40253: DOUBLE
40254: EQUAL
40255: IFTRUE 40259
40257: GO 40323
40259: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
40260: LD_ADDR_VAR 0 1
40264: PUSH
40265: LD_INT 2
40267: PUSH
40268: LD_INT 4
40270: PUSH
40271: LD_INT 11
40273: PUSH
40274: LD_INT 12
40276: PUSH
40277: LD_INT 15
40279: PUSH
40280: LD_INT 16
40282: PUSH
40283: LD_INT 22
40285: PUSH
40286: LD_INT 23
40288: PUSH
40289: LD_INT 26
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 101
40305: PUSH
40306: LD_INT 102
40308: PUSH
40309: LD_INT 106
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: LIST
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: ST_TO_ADDR
40321: GO 43180
40323: LD_INT 2
40325: DOUBLE
40326: EQUAL
40327: IFTRUE 40331
40329: GO 40403
40331: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
40332: LD_ADDR_VAR 0 1
40336: PUSH
40337: LD_INT 2
40339: PUSH
40340: LD_INT 4
40342: PUSH
40343: LD_INT 11
40345: PUSH
40346: LD_INT 12
40348: PUSH
40349: LD_INT 15
40351: PUSH
40352: LD_INT 16
40354: PUSH
40355: LD_INT 22
40357: PUSH
40358: LD_INT 23
40360: PUSH
40361: LD_INT 26
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 101
40377: PUSH
40378: LD_INT 102
40380: PUSH
40381: LD_INT 105
40383: PUSH
40384: LD_INT 106
40386: PUSH
40387: LD_INT 108
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: ST_TO_ADDR
40401: GO 43180
40403: LD_INT 3
40405: DOUBLE
40406: EQUAL
40407: IFTRUE 40411
40409: GO 40487
40411: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
40412: LD_ADDR_VAR 0 1
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: LD_INT 4
40422: PUSH
40423: LD_INT 5
40425: PUSH
40426: LD_INT 11
40428: PUSH
40429: LD_INT 12
40431: PUSH
40432: LD_INT 15
40434: PUSH
40435: LD_INT 16
40437: PUSH
40438: LD_INT 22
40440: PUSH
40441: LD_INT 26
40443: PUSH
40444: LD_INT 36
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 101
40461: PUSH
40462: LD_INT 102
40464: PUSH
40465: LD_INT 105
40467: PUSH
40468: LD_INT 106
40470: PUSH
40471: LD_INT 108
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: ST_TO_ADDR
40485: GO 43180
40487: LD_INT 4
40489: DOUBLE
40490: EQUAL
40491: IFTRUE 40495
40493: GO 40579
40495: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
40496: LD_ADDR_VAR 0 1
40500: PUSH
40501: LD_INT 2
40503: PUSH
40504: LD_INT 4
40506: PUSH
40507: LD_INT 5
40509: PUSH
40510: LD_INT 8
40512: PUSH
40513: LD_INT 11
40515: PUSH
40516: LD_INT 12
40518: PUSH
40519: LD_INT 15
40521: PUSH
40522: LD_INT 16
40524: PUSH
40525: LD_INT 22
40527: PUSH
40528: LD_INT 23
40530: PUSH
40531: LD_INT 26
40533: PUSH
40534: LD_INT 36
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 101
40553: PUSH
40554: LD_INT 102
40556: PUSH
40557: LD_INT 105
40559: PUSH
40560: LD_INT 106
40562: PUSH
40563: LD_INT 108
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: ST_TO_ADDR
40577: GO 43180
40579: LD_INT 5
40581: DOUBLE
40582: EQUAL
40583: IFTRUE 40587
40585: GO 40687
40587: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
40588: LD_ADDR_VAR 0 1
40592: PUSH
40593: LD_INT 2
40595: PUSH
40596: LD_INT 4
40598: PUSH
40599: LD_INT 5
40601: PUSH
40602: LD_INT 6
40604: PUSH
40605: LD_INT 8
40607: PUSH
40608: LD_INT 11
40610: PUSH
40611: LD_INT 12
40613: PUSH
40614: LD_INT 15
40616: PUSH
40617: LD_INT 16
40619: PUSH
40620: LD_INT 22
40622: PUSH
40623: LD_INT 23
40625: PUSH
40626: LD_INT 25
40628: PUSH
40629: LD_INT 26
40631: PUSH
40632: LD_INT 36
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 101
40653: PUSH
40654: LD_INT 102
40656: PUSH
40657: LD_INT 105
40659: PUSH
40660: LD_INT 106
40662: PUSH
40663: LD_INT 108
40665: PUSH
40666: LD_INT 109
40668: PUSH
40669: LD_INT 112
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: ST_TO_ADDR
40685: GO 43180
40687: LD_INT 6
40689: DOUBLE
40690: EQUAL
40691: IFTRUE 40695
40693: GO 40815
40695: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
40696: LD_ADDR_VAR 0 1
40700: PUSH
40701: LD_INT 2
40703: PUSH
40704: LD_INT 4
40706: PUSH
40707: LD_INT 5
40709: PUSH
40710: LD_INT 6
40712: PUSH
40713: LD_INT 8
40715: PUSH
40716: LD_INT 11
40718: PUSH
40719: LD_INT 12
40721: PUSH
40722: LD_INT 15
40724: PUSH
40725: LD_INT 16
40727: PUSH
40728: LD_INT 20
40730: PUSH
40731: LD_INT 21
40733: PUSH
40734: LD_INT 22
40736: PUSH
40737: LD_INT 23
40739: PUSH
40740: LD_INT 25
40742: PUSH
40743: LD_INT 26
40745: PUSH
40746: LD_INT 30
40748: PUSH
40749: LD_INT 31
40751: PUSH
40752: LD_INT 32
40754: PUSH
40755: LD_INT 36
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 101
40781: PUSH
40782: LD_INT 102
40784: PUSH
40785: LD_INT 105
40787: PUSH
40788: LD_INT 106
40790: PUSH
40791: LD_INT 108
40793: PUSH
40794: LD_INT 109
40796: PUSH
40797: LD_INT 112
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: ST_TO_ADDR
40813: GO 43180
40815: LD_INT 7
40817: DOUBLE
40818: EQUAL
40819: IFTRUE 40823
40821: GO 40923
40823: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
40824: LD_ADDR_VAR 0 1
40828: PUSH
40829: LD_INT 2
40831: PUSH
40832: LD_INT 4
40834: PUSH
40835: LD_INT 5
40837: PUSH
40838: LD_INT 7
40840: PUSH
40841: LD_INT 11
40843: PUSH
40844: LD_INT 12
40846: PUSH
40847: LD_INT 15
40849: PUSH
40850: LD_INT 16
40852: PUSH
40853: LD_INT 20
40855: PUSH
40856: LD_INT 21
40858: PUSH
40859: LD_INT 22
40861: PUSH
40862: LD_INT 23
40864: PUSH
40865: LD_INT 25
40867: PUSH
40868: LD_INT 26
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 101
40889: PUSH
40890: LD_INT 102
40892: PUSH
40893: LD_INT 103
40895: PUSH
40896: LD_INT 105
40898: PUSH
40899: LD_INT 106
40901: PUSH
40902: LD_INT 108
40904: PUSH
40905: LD_INT 112
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: ST_TO_ADDR
40921: GO 43180
40923: LD_INT 8
40925: DOUBLE
40926: EQUAL
40927: IFTRUE 40931
40929: GO 41059
40931: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
40932: LD_ADDR_VAR 0 1
40936: PUSH
40937: LD_INT 2
40939: PUSH
40940: LD_INT 4
40942: PUSH
40943: LD_INT 5
40945: PUSH
40946: LD_INT 6
40948: PUSH
40949: LD_INT 7
40951: PUSH
40952: LD_INT 8
40954: PUSH
40955: LD_INT 11
40957: PUSH
40958: LD_INT 12
40960: PUSH
40961: LD_INT 15
40963: PUSH
40964: LD_INT 16
40966: PUSH
40967: LD_INT 20
40969: PUSH
40970: LD_INT 21
40972: PUSH
40973: LD_INT 22
40975: PUSH
40976: LD_INT 23
40978: PUSH
40979: LD_INT 25
40981: PUSH
40982: LD_INT 26
40984: PUSH
40985: LD_INT 30
40987: PUSH
40988: LD_INT 31
40990: PUSH
40991: LD_INT 32
40993: PUSH
40994: LD_INT 36
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 101
41021: PUSH
41022: LD_INT 102
41024: PUSH
41025: LD_INT 103
41027: PUSH
41028: LD_INT 105
41030: PUSH
41031: LD_INT 106
41033: PUSH
41034: LD_INT 108
41036: PUSH
41037: LD_INT 109
41039: PUSH
41040: LD_INT 112
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: ST_TO_ADDR
41057: GO 43180
41059: LD_INT 9
41061: DOUBLE
41062: EQUAL
41063: IFTRUE 41067
41065: GO 41203
41067: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
41068: LD_ADDR_VAR 0 1
41072: PUSH
41073: LD_INT 2
41075: PUSH
41076: LD_INT 4
41078: PUSH
41079: LD_INT 5
41081: PUSH
41082: LD_INT 6
41084: PUSH
41085: LD_INT 7
41087: PUSH
41088: LD_INT 8
41090: PUSH
41091: LD_INT 11
41093: PUSH
41094: LD_INT 12
41096: PUSH
41097: LD_INT 15
41099: PUSH
41100: LD_INT 16
41102: PUSH
41103: LD_INT 20
41105: PUSH
41106: LD_INT 21
41108: PUSH
41109: LD_INT 22
41111: PUSH
41112: LD_INT 23
41114: PUSH
41115: LD_INT 25
41117: PUSH
41118: LD_INT 26
41120: PUSH
41121: LD_INT 28
41123: PUSH
41124: LD_INT 30
41126: PUSH
41127: LD_INT 31
41129: PUSH
41130: LD_INT 32
41132: PUSH
41133: LD_INT 36
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 101
41161: PUSH
41162: LD_INT 102
41164: PUSH
41165: LD_INT 103
41167: PUSH
41168: LD_INT 105
41170: PUSH
41171: LD_INT 106
41173: PUSH
41174: LD_INT 108
41176: PUSH
41177: LD_INT 109
41179: PUSH
41180: LD_INT 112
41182: PUSH
41183: LD_INT 114
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: ST_TO_ADDR
41201: GO 43180
41203: LD_INT 10
41205: DOUBLE
41206: EQUAL
41207: IFTRUE 41211
41209: GO 41395
41211: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
41212: LD_ADDR_VAR 0 1
41216: PUSH
41217: LD_INT 2
41219: PUSH
41220: LD_INT 4
41222: PUSH
41223: LD_INT 5
41225: PUSH
41226: LD_INT 6
41228: PUSH
41229: LD_INT 7
41231: PUSH
41232: LD_INT 8
41234: PUSH
41235: LD_INT 9
41237: PUSH
41238: LD_INT 10
41240: PUSH
41241: LD_INT 11
41243: PUSH
41244: LD_INT 12
41246: PUSH
41247: LD_INT 13
41249: PUSH
41250: LD_INT 14
41252: PUSH
41253: LD_INT 15
41255: PUSH
41256: LD_INT 16
41258: PUSH
41259: LD_INT 17
41261: PUSH
41262: LD_INT 18
41264: PUSH
41265: LD_INT 19
41267: PUSH
41268: LD_INT 20
41270: PUSH
41271: LD_INT 21
41273: PUSH
41274: LD_INT 22
41276: PUSH
41277: LD_INT 23
41279: PUSH
41280: LD_INT 24
41282: PUSH
41283: LD_INT 25
41285: PUSH
41286: LD_INT 26
41288: PUSH
41289: LD_INT 28
41291: PUSH
41292: LD_INT 30
41294: PUSH
41295: LD_INT 31
41297: PUSH
41298: LD_INT 32
41300: PUSH
41301: LD_INT 36
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 101
41337: PUSH
41338: LD_INT 102
41340: PUSH
41341: LD_INT 103
41343: PUSH
41344: LD_INT 104
41346: PUSH
41347: LD_INT 105
41349: PUSH
41350: LD_INT 106
41352: PUSH
41353: LD_INT 107
41355: PUSH
41356: LD_INT 108
41358: PUSH
41359: LD_INT 109
41361: PUSH
41362: LD_INT 110
41364: PUSH
41365: LD_INT 111
41367: PUSH
41368: LD_INT 112
41370: PUSH
41371: LD_INT 114
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: ST_TO_ADDR
41393: GO 43180
41395: LD_INT 11
41397: DOUBLE
41398: EQUAL
41399: IFTRUE 41403
41401: GO 41595
41403: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
41404: LD_ADDR_VAR 0 1
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: LD_INT 3
41414: PUSH
41415: LD_INT 4
41417: PUSH
41418: LD_INT 5
41420: PUSH
41421: LD_INT 6
41423: PUSH
41424: LD_INT 7
41426: PUSH
41427: LD_INT 8
41429: PUSH
41430: LD_INT 9
41432: PUSH
41433: LD_INT 10
41435: PUSH
41436: LD_INT 11
41438: PUSH
41439: LD_INT 12
41441: PUSH
41442: LD_INT 13
41444: PUSH
41445: LD_INT 14
41447: PUSH
41448: LD_INT 15
41450: PUSH
41451: LD_INT 16
41453: PUSH
41454: LD_INT 17
41456: PUSH
41457: LD_INT 18
41459: PUSH
41460: LD_INT 19
41462: PUSH
41463: LD_INT 20
41465: PUSH
41466: LD_INT 21
41468: PUSH
41469: LD_INT 22
41471: PUSH
41472: LD_INT 23
41474: PUSH
41475: LD_INT 24
41477: PUSH
41478: LD_INT 25
41480: PUSH
41481: LD_INT 26
41483: PUSH
41484: LD_INT 28
41486: PUSH
41487: LD_INT 30
41489: PUSH
41490: LD_INT 31
41492: PUSH
41493: LD_INT 32
41495: PUSH
41496: LD_INT 34
41498: PUSH
41499: LD_INT 36
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 101
41537: PUSH
41538: LD_INT 102
41540: PUSH
41541: LD_INT 103
41543: PUSH
41544: LD_INT 104
41546: PUSH
41547: LD_INT 105
41549: PUSH
41550: LD_INT 106
41552: PUSH
41553: LD_INT 107
41555: PUSH
41556: LD_INT 108
41558: PUSH
41559: LD_INT 109
41561: PUSH
41562: LD_INT 110
41564: PUSH
41565: LD_INT 111
41567: PUSH
41568: LD_INT 112
41570: PUSH
41571: LD_INT 114
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: ST_TO_ADDR
41593: GO 43180
41595: LD_INT 12
41597: DOUBLE
41598: EQUAL
41599: IFTRUE 41603
41601: GO 41811
41603: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
41604: LD_ADDR_VAR 0 1
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: LD_INT 2
41614: PUSH
41615: LD_INT 3
41617: PUSH
41618: LD_INT 4
41620: PUSH
41621: LD_INT 5
41623: PUSH
41624: LD_INT 6
41626: PUSH
41627: LD_INT 7
41629: PUSH
41630: LD_INT 8
41632: PUSH
41633: LD_INT 9
41635: PUSH
41636: LD_INT 10
41638: PUSH
41639: LD_INT 11
41641: PUSH
41642: LD_INT 12
41644: PUSH
41645: LD_INT 13
41647: PUSH
41648: LD_INT 14
41650: PUSH
41651: LD_INT 15
41653: PUSH
41654: LD_INT 16
41656: PUSH
41657: LD_INT 17
41659: PUSH
41660: LD_INT 18
41662: PUSH
41663: LD_INT 19
41665: PUSH
41666: LD_INT 20
41668: PUSH
41669: LD_INT 21
41671: PUSH
41672: LD_INT 22
41674: PUSH
41675: LD_INT 23
41677: PUSH
41678: LD_INT 24
41680: PUSH
41681: LD_INT 25
41683: PUSH
41684: LD_INT 26
41686: PUSH
41687: LD_INT 27
41689: PUSH
41690: LD_INT 28
41692: PUSH
41693: LD_INT 30
41695: PUSH
41696: LD_INT 31
41698: PUSH
41699: LD_INT 32
41701: PUSH
41702: LD_INT 33
41704: PUSH
41705: LD_INT 34
41707: PUSH
41708: LD_INT 36
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 101
41749: PUSH
41750: LD_INT 102
41752: PUSH
41753: LD_INT 103
41755: PUSH
41756: LD_INT 104
41758: PUSH
41759: LD_INT 105
41761: PUSH
41762: LD_INT 106
41764: PUSH
41765: LD_INT 107
41767: PUSH
41768: LD_INT 108
41770: PUSH
41771: LD_INT 109
41773: PUSH
41774: LD_INT 110
41776: PUSH
41777: LD_INT 111
41779: PUSH
41780: LD_INT 112
41782: PUSH
41783: LD_INT 113
41785: PUSH
41786: LD_INT 114
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: ST_TO_ADDR
41809: GO 43180
41811: LD_INT 13
41813: DOUBLE
41814: EQUAL
41815: IFTRUE 41819
41817: GO 42015
41819: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
41820: LD_ADDR_VAR 0 1
41824: PUSH
41825: LD_INT 1
41827: PUSH
41828: LD_INT 2
41830: PUSH
41831: LD_INT 3
41833: PUSH
41834: LD_INT 4
41836: PUSH
41837: LD_INT 5
41839: PUSH
41840: LD_INT 8
41842: PUSH
41843: LD_INT 9
41845: PUSH
41846: LD_INT 10
41848: PUSH
41849: LD_INT 11
41851: PUSH
41852: LD_INT 12
41854: PUSH
41855: LD_INT 14
41857: PUSH
41858: LD_INT 15
41860: PUSH
41861: LD_INT 16
41863: PUSH
41864: LD_INT 17
41866: PUSH
41867: LD_INT 18
41869: PUSH
41870: LD_INT 19
41872: PUSH
41873: LD_INT 20
41875: PUSH
41876: LD_INT 21
41878: PUSH
41879: LD_INT 22
41881: PUSH
41882: LD_INT 23
41884: PUSH
41885: LD_INT 24
41887: PUSH
41888: LD_INT 25
41890: PUSH
41891: LD_INT 26
41893: PUSH
41894: LD_INT 27
41896: PUSH
41897: LD_INT 28
41899: PUSH
41900: LD_INT 30
41902: PUSH
41903: LD_INT 31
41905: PUSH
41906: LD_INT 32
41908: PUSH
41909: LD_INT 33
41911: PUSH
41912: LD_INT 34
41914: PUSH
41915: LD_INT 36
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 101
41953: PUSH
41954: LD_INT 102
41956: PUSH
41957: LD_INT 103
41959: PUSH
41960: LD_INT 104
41962: PUSH
41963: LD_INT 105
41965: PUSH
41966: LD_INT 106
41968: PUSH
41969: LD_INT 107
41971: PUSH
41972: LD_INT 108
41974: PUSH
41975: LD_INT 109
41977: PUSH
41978: LD_INT 110
41980: PUSH
41981: LD_INT 111
41983: PUSH
41984: LD_INT 112
41986: PUSH
41987: LD_INT 113
41989: PUSH
41990: LD_INT 114
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: ST_TO_ADDR
42013: GO 43180
42015: LD_INT 14
42017: DOUBLE
42018: EQUAL
42019: IFTRUE 42023
42021: GO 42235
42023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
42024: LD_ADDR_VAR 0 1
42028: PUSH
42029: LD_INT 1
42031: PUSH
42032: LD_INT 2
42034: PUSH
42035: LD_INT 3
42037: PUSH
42038: LD_INT 4
42040: PUSH
42041: LD_INT 5
42043: PUSH
42044: LD_INT 6
42046: PUSH
42047: LD_INT 7
42049: PUSH
42050: LD_INT 8
42052: PUSH
42053: LD_INT 9
42055: PUSH
42056: LD_INT 10
42058: PUSH
42059: LD_INT 11
42061: PUSH
42062: LD_INT 12
42064: PUSH
42065: LD_INT 13
42067: PUSH
42068: LD_INT 14
42070: PUSH
42071: LD_INT 15
42073: PUSH
42074: LD_INT 16
42076: PUSH
42077: LD_INT 17
42079: PUSH
42080: LD_INT 18
42082: PUSH
42083: LD_INT 19
42085: PUSH
42086: LD_INT 20
42088: PUSH
42089: LD_INT 21
42091: PUSH
42092: LD_INT 22
42094: PUSH
42095: LD_INT 23
42097: PUSH
42098: LD_INT 24
42100: PUSH
42101: LD_INT 25
42103: PUSH
42104: LD_INT 26
42106: PUSH
42107: LD_INT 27
42109: PUSH
42110: LD_INT 28
42112: PUSH
42113: LD_INT 29
42115: PUSH
42116: LD_INT 30
42118: PUSH
42119: LD_INT 31
42121: PUSH
42122: LD_INT 32
42124: PUSH
42125: LD_INT 33
42127: PUSH
42128: LD_INT 34
42130: PUSH
42131: LD_INT 36
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 101
42173: PUSH
42174: LD_INT 102
42176: PUSH
42177: LD_INT 103
42179: PUSH
42180: LD_INT 104
42182: PUSH
42183: LD_INT 105
42185: PUSH
42186: LD_INT 106
42188: PUSH
42189: LD_INT 107
42191: PUSH
42192: LD_INT 108
42194: PUSH
42195: LD_INT 109
42197: PUSH
42198: LD_INT 110
42200: PUSH
42201: LD_INT 111
42203: PUSH
42204: LD_INT 112
42206: PUSH
42207: LD_INT 113
42209: PUSH
42210: LD_INT 114
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: ST_TO_ADDR
42233: GO 43180
42235: LD_INT 15
42237: DOUBLE
42238: EQUAL
42239: IFTRUE 42243
42241: GO 42455
42243: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
42244: LD_ADDR_VAR 0 1
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: LD_INT 2
42254: PUSH
42255: LD_INT 3
42257: PUSH
42258: LD_INT 4
42260: PUSH
42261: LD_INT 5
42263: PUSH
42264: LD_INT 6
42266: PUSH
42267: LD_INT 7
42269: PUSH
42270: LD_INT 8
42272: PUSH
42273: LD_INT 9
42275: PUSH
42276: LD_INT 10
42278: PUSH
42279: LD_INT 11
42281: PUSH
42282: LD_INT 12
42284: PUSH
42285: LD_INT 13
42287: PUSH
42288: LD_INT 14
42290: PUSH
42291: LD_INT 15
42293: PUSH
42294: LD_INT 16
42296: PUSH
42297: LD_INT 17
42299: PUSH
42300: LD_INT 18
42302: PUSH
42303: LD_INT 19
42305: PUSH
42306: LD_INT 20
42308: PUSH
42309: LD_INT 21
42311: PUSH
42312: LD_INT 22
42314: PUSH
42315: LD_INT 23
42317: PUSH
42318: LD_INT 24
42320: PUSH
42321: LD_INT 25
42323: PUSH
42324: LD_INT 26
42326: PUSH
42327: LD_INT 27
42329: PUSH
42330: LD_INT 28
42332: PUSH
42333: LD_INT 29
42335: PUSH
42336: LD_INT 30
42338: PUSH
42339: LD_INT 31
42341: PUSH
42342: LD_INT 32
42344: PUSH
42345: LD_INT 33
42347: PUSH
42348: LD_INT 34
42350: PUSH
42351: LD_INT 36
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 101
42393: PUSH
42394: LD_INT 102
42396: PUSH
42397: LD_INT 103
42399: PUSH
42400: LD_INT 104
42402: PUSH
42403: LD_INT 105
42405: PUSH
42406: LD_INT 106
42408: PUSH
42409: LD_INT 107
42411: PUSH
42412: LD_INT 108
42414: PUSH
42415: LD_INT 109
42417: PUSH
42418: LD_INT 110
42420: PUSH
42421: LD_INT 111
42423: PUSH
42424: LD_INT 112
42426: PUSH
42427: LD_INT 113
42429: PUSH
42430: LD_INT 114
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: ST_TO_ADDR
42453: GO 43180
42455: LD_INT 16
42457: DOUBLE
42458: EQUAL
42459: IFTRUE 42463
42461: GO 42587
42463: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
42464: LD_ADDR_VAR 0 1
42468: PUSH
42469: LD_INT 2
42471: PUSH
42472: LD_INT 4
42474: PUSH
42475: LD_INT 5
42477: PUSH
42478: LD_INT 7
42480: PUSH
42481: LD_INT 11
42483: PUSH
42484: LD_INT 12
42486: PUSH
42487: LD_INT 15
42489: PUSH
42490: LD_INT 16
42492: PUSH
42493: LD_INT 20
42495: PUSH
42496: LD_INT 21
42498: PUSH
42499: LD_INT 22
42501: PUSH
42502: LD_INT 23
42504: PUSH
42505: LD_INT 25
42507: PUSH
42508: LD_INT 26
42510: PUSH
42511: LD_INT 30
42513: PUSH
42514: LD_INT 31
42516: PUSH
42517: LD_INT 32
42519: PUSH
42520: LD_INT 33
42522: PUSH
42523: LD_INT 34
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 101
42549: PUSH
42550: LD_INT 102
42552: PUSH
42553: LD_INT 103
42555: PUSH
42556: LD_INT 106
42558: PUSH
42559: LD_INT 108
42561: PUSH
42562: LD_INT 112
42564: PUSH
42565: LD_INT 113
42567: PUSH
42568: LD_INT 114
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: ST_TO_ADDR
42585: GO 43180
42587: LD_INT 17
42589: DOUBLE
42590: EQUAL
42591: IFTRUE 42595
42593: GO 42807
42595: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
42596: LD_ADDR_VAR 0 1
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: LD_INT 2
42606: PUSH
42607: LD_INT 3
42609: PUSH
42610: LD_INT 4
42612: PUSH
42613: LD_INT 5
42615: PUSH
42616: LD_INT 6
42618: PUSH
42619: LD_INT 7
42621: PUSH
42622: LD_INT 8
42624: PUSH
42625: LD_INT 9
42627: PUSH
42628: LD_INT 10
42630: PUSH
42631: LD_INT 11
42633: PUSH
42634: LD_INT 12
42636: PUSH
42637: LD_INT 13
42639: PUSH
42640: LD_INT 14
42642: PUSH
42643: LD_INT 15
42645: PUSH
42646: LD_INT 16
42648: PUSH
42649: LD_INT 17
42651: PUSH
42652: LD_INT 18
42654: PUSH
42655: LD_INT 19
42657: PUSH
42658: LD_INT 20
42660: PUSH
42661: LD_INT 21
42663: PUSH
42664: LD_INT 22
42666: PUSH
42667: LD_INT 23
42669: PUSH
42670: LD_INT 24
42672: PUSH
42673: LD_INT 25
42675: PUSH
42676: LD_INT 26
42678: PUSH
42679: LD_INT 27
42681: PUSH
42682: LD_INT 28
42684: PUSH
42685: LD_INT 29
42687: PUSH
42688: LD_INT 30
42690: PUSH
42691: LD_INT 31
42693: PUSH
42694: LD_INT 32
42696: PUSH
42697: LD_INT 33
42699: PUSH
42700: LD_INT 34
42702: PUSH
42703: LD_INT 36
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 101
42745: PUSH
42746: LD_INT 102
42748: PUSH
42749: LD_INT 103
42751: PUSH
42752: LD_INT 104
42754: PUSH
42755: LD_INT 105
42757: PUSH
42758: LD_INT 106
42760: PUSH
42761: LD_INT 107
42763: PUSH
42764: LD_INT 108
42766: PUSH
42767: LD_INT 109
42769: PUSH
42770: LD_INT 110
42772: PUSH
42773: LD_INT 111
42775: PUSH
42776: LD_INT 112
42778: PUSH
42779: LD_INT 113
42781: PUSH
42782: LD_INT 114
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: ST_TO_ADDR
42805: GO 43180
42807: LD_INT 18
42809: DOUBLE
42810: EQUAL
42811: IFTRUE 42815
42813: GO 42951
42815: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
42816: LD_ADDR_VAR 0 1
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: LD_INT 4
42826: PUSH
42827: LD_INT 5
42829: PUSH
42830: LD_INT 7
42832: PUSH
42833: LD_INT 11
42835: PUSH
42836: LD_INT 12
42838: PUSH
42839: LD_INT 15
42841: PUSH
42842: LD_INT 16
42844: PUSH
42845: LD_INT 20
42847: PUSH
42848: LD_INT 21
42850: PUSH
42851: LD_INT 22
42853: PUSH
42854: LD_INT 23
42856: PUSH
42857: LD_INT 25
42859: PUSH
42860: LD_INT 26
42862: PUSH
42863: LD_INT 30
42865: PUSH
42866: LD_INT 31
42868: PUSH
42869: LD_INT 32
42871: PUSH
42872: LD_INT 33
42874: PUSH
42875: LD_INT 34
42877: PUSH
42878: LD_INT 35
42880: PUSH
42881: LD_INT 36
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 101
42909: PUSH
42910: LD_INT 102
42912: PUSH
42913: LD_INT 103
42915: PUSH
42916: LD_INT 106
42918: PUSH
42919: LD_INT 108
42921: PUSH
42922: LD_INT 112
42924: PUSH
42925: LD_INT 113
42927: PUSH
42928: LD_INT 114
42930: PUSH
42931: LD_INT 115
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: ST_TO_ADDR
42949: GO 43180
42951: LD_INT 19
42953: DOUBLE
42954: EQUAL
42955: IFTRUE 42959
42957: GO 43179
42959: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
42960: LD_ADDR_VAR 0 1
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: LD_INT 3
42973: PUSH
42974: LD_INT 4
42976: PUSH
42977: LD_INT 5
42979: PUSH
42980: LD_INT 6
42982: PUSH
42983: LD_INT 7
42985: PUSH
42986: LD_INT 8
42988: PUSH
42989: LD_INT 9
42991: PUSH
42992: LD_INT 10
42994: PUSH
42995: LD_INT 11
42997: PUSH
42998: LD_INT 12
43000: PUSH
43001: LD_INT 13
43003: PUSH
43004: LD_INT 14
43006: PUSH
43007: LD_INT 15
43009: PUSH
43010: LD_INT 16
43012: PUSH
43013: LD_INT 17
43015: PUSH
43016: LD_INT 18
43018: PUSH
43019: LD_INT 19
43021: PUSH
43022: LD_INT 20
43024: PUSH
43025: LD_INT 21
43027: PUSH
43028: LD_INT 22
43030: PUSH
43031: LD_INT 23
43033: PUSH
43034: LD_INT 24
43036: PUSH
43037: LD_INT 25
43039: PUSH
43040: LD_INT 26
43042: PUSH
43043: LD_INT 27
43045: PUSH
43046: LD_INT 28
43048: PUSH
43049: LD_INT 29
43051: PUSH
43052: LD_INT 30
43054: PUSH
43055: LD_INT 31
43057: PUSH
43058: LD_INT 32
43060: PUSH
43061: LD_INT 33
43063: PUSH
43064: LD_INT 34
43066: PUSH
43067: LD_INT 35
43069: PUSH
43070: LD_INT 36
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 101
43113: PUSH
43114: LD_INT 102
43116: PUSH
43117: LD_INT 103
43119: PUSH
43120: LD_INT 104
43122: PUSH
43123: LD_INT 105
43125: PUSH
43126: LD_INT 106
43128: PUSH
43129: LD_INT 107
43131: PUSH
43132: LD_INT 108
43134: PUSH
43135: LD_INT 109
43137: PUSH
43138: LD_INT 110
43140: PUSH
43141: LD_INT 111
43143: PUSH
43144: LD_INT 112
43146: PUSH
43147: LD_INT 113
43149: PUSH
43150: LD_INT 114
43152: PUSH
43153: LD_INT 115
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: ST_TO_ADDR
43177: GO 43180
43179: POP
// end else
43180: GO 43399
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
43182: LD_ADDR_VAR 0 1
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: LD_INT 2
43192: PUSH
43193: LD_INT 3
43195: PUSH
43196: LD_INT 4
43198: PUSH
43199: LD_INT 5
43201: PUSH
43202: LD_INT 6
43204: PUSH
43205: LD_INT 7
43207: PUSH
43208: LD_INT 8
43210: PUSH
43211: LD_INT 9
43213: PUSH
43214: LD_INT 10
43216: PUSH
43217: LD_INT 11
43219: PUSH
43220: LD_INT 12
43222: PUSH
43223: LD_INT 13
43225: PUSH
43226: LD_INT 14
43228: PUSH
43229: LD_INT 15
43231: PUSH
43232: LD_INT 16
43234: PUSH
43235: LD_INT 17
43237: PUSH
43238: LD_INT 18
43240: PUSH
43241: LD_INT 19
43243: PUSH
43244: LD_INT 20
43246: PUSH
43247: LD_INT 21
43249: PUSH
43250: LD_INT 22
43252: PUSH
43253: LD_INT 23
43255: PUSH
43256: LD_INT 24
43258: PUSH
43259: LD_INT 25
43261: PUSH
43262: LD_INT 26
43264: PUSH
43265: LD_INT 27
43267: PUSH
43268: LD_INT 28
43270: PUSH
43271: LD_INT 29
43273: PUSH
43274: LD_INT 30
43276: PUSH
43277: LD_INT 31
43279: PUSH
43280: LD_INT 32
43282: PUSH
43283: LD_INT 33
43285: PUSH
43286: LD_INT 34
43288: PUSH
43289: LD_INT 35
43291: PUSH
43292: LD_INT 36
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 101
43335: PUSH
43336: LD_INT 102
43338: PUSH
43339: LD_INT 103
43341: PUSH
43342: LD_INT 104
43344: PUSH
43345: LD_INT 105
43347: PUSH
43348: LD_INT 106
43350: PUSH
43351: LD_INT 107
43353: PUSH
43354: LD_INT 108
43356: PUSH
43357: LD_INT 109
43359: PUSH
43360: LD_INT 110
43362: PUSH
43363: LD_INT 111
43365: PUSH
43366: LD_INT 112
43368: PUSH
43369: LD_INT 113
43371: PUSH
43372: LD_INT 114
43374: PUSH
43375: LD_INT 115
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: ST_TO_ADDR
// if result then
43399: LD_VAR 0 1
43403: IFFALSE 43692
// begin normal :=  ;
43405: LD_ADDR_VAR 0 3
43409: PUSH
43410: LD_STRING 
43412: ST_TO_ADDR
// hardcore :=  ;
43413: LD_ADDR_VAR 0 4
43417: PUSH
43418: LD_STRING 
43420: ST_TO_ADDR
// for i = 1 to normalCounter do
43421: LD_ADDR_VAR 0 5
43425: PUSH
43426: DOUBLE
43427: LD_INT 1
43429: DEC
43430: ST_TO_ADDR
43431: LD_EXP 29
43435: PUSH
43436: FOR_TO
43437: IFFALSE 43538
// begin tmp := 0 ;
43439: LD_ADDR_VAR 0 2
43443: PUSH
43444: LD_STRING 0
43446: ST_TO_ADDR
// if result [ 1 ] then
43447: LD_VAR 0 1
43451: PUSH
43452: LD_INT 1
43454: ARRAY
43455: IFFALSE 43520
// if result [ 1 ] [ 1 ] = i then
43457: LD_VAR 0 1
43461: PUSH
43462: LD_INT 1
43464: ARRAY
43465: PUSH
43466: LD_INT 1
43468: ARRAY
43469: PUSH
43470: LD_VAR 0 5
43474: EQUAL
43475: IFFALSE 43520
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
43477: LD_ADDR_VAR 0 1
43481: PUSH
43482: LD_VAR 0 1
43486: PPUSH
43487: LD_INT 1
43489: PPUSH
43490: LD_VAR 0 1
43494: PUSH
43495: LD_INT 1
43497: ARRAY
43498: PPUSH
43499: LD_INT 1
43501: PPUSH
43502: CALL_OW 3
43506: PPUSH
43507: CALL_OW 1
43511: ST_TO_ADDR
// tmp := 1 ;
43512: LD_ADDR_VAR 0 2
43516: PUSH
43517: LD_STRING 1
43519: ST_TO_ADDR
// end ; normal := normal & tmp ;
43520: LD_ADDR_VAR 0 3
43524: PUSH
43525: LD_VAR 0 3
43529: PUSH
43530: LD_VAR 0 2
43534: STR
43535: ST_TO_ADDR
// end ;
43536: GO 43436
43538: POP
43539: POP
// for i = 1 to hardcoreCounter do
43540: LD_ADDR_VAR 0 5
43544: PUSH
43545: DOUBLE
43546: LD_INT 1
43548: DEC
43549: ST_TO_ADDR
43550: LD_EXP 30
43554: PUSH
43555: FOR_TO
43556: IFFALSE 43661
// begin tmp := 0 ;
43558: LD_ADDR_VAR 0 2
43562: PUSH
43563: LD_STRING 0
43565: ST_TO_ADDR
// if result [ 2 ] then
43566: LD_VAR 0 1
43570: PUSH
43571: LD_INT 2
43573: ARRAY
43574: IFFALSE 43643
// if result [ 2 ] [ 1 ] = 100 + i then
43576: LD_VAR 0 1
43580: PUSH
43581: LD_INT 2
43583: ARRAY
43584: PUSH
43585: LD_INT 1
43587: ARRAY
43588: PUSH
43589: LD_INT 100
43591: PUSH
43592: LD_VAR 0 5
43596: PLUS
43597: EQUAL
43598: IFFALSE 43643
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
43600: LD_ADDR_VAR 0 1
43604: PUSH
43605: LD_VAR 0 1
43609: PPUSH
43610: LD_INT 2
43612: PPUSH
43613: LD_VAR 0 1
43617: PUSH
43618: LD_INT 2
43620: ARRAY
43621: PPUSH
43622: LD_INT 1
43624: PPUSH
43625: CALL_OW 3
43629: PPUSH
43630: CALL_OW 1
43634: ST_TO_ADDR
// tmp := 1 ;
43635: LD_ADDR_VAR 0 2
43639: PUSH
43640: LD_STRING 1
43642: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
43643: LD_ADDR_VAR 0 4
43647: PUSH
43648: LD_VAR 0 4
43652: PUSH
43653: LD_VAR 0 2
43657: STR
43658: ST_TO_ADDR
// end ;
43659: GO 43555
43661: POP
43662: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
43663: LD_STRING getStreamItemsFromMission("
43665: PUSH
43666: LD_VAR 0 3
43670: STR
43671: PUSH
43672: LD_STRING ","
43674: STR
43675: PUSH
43676: LD_VAR 0 4
43680: STR
43681: PUSH
43682: LD_STRING ")
43684: STR
43685: PPUSH
43686: CALL_OW 559
// end else
43690: GO 43699
// ToLua ( getStreamItemsFromMission("","") ) ;
43692: LD_STRING getStreamItemsFromMission("","")
43694: PPUSH
43695: CALL_OW 559
// end ;
43699: LD_VAR 0 1
43703: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
43704: LD_EXP 28
43708: PUSH
43709: LD_EXP 33
43713: AND
43714: IFFALSE 43838
43716: GO 43718
43718: DISABLE
43719: LD_INT 0
43721: PPUSH
43722: PPUSH
// begin enable ;
43723: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
43724: LD_ADDR_VAR 0 2
43728: PUSH
43729: LD_INT 22
43731: PUSH
43732: LD_OWVAR 2
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: LD_INT 34
43746: PUSH
43747: LD_INT 7
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 34
43756: PUSH
43757: LD_INT 45
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 34
43766: PUSH
43767: LD_INT 28
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 34
43776: PUSH
43777: LD_INT 47
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PPUSH
43795: CALL_OW 69
43799: ST_TO_ADDR
// if not tmp then
43800: LD_VAR 0 2
43804: NOT
43805: IFFALSE 43809
// exit ;
43807: GO 43838
// for i in tmp do
43809: LD_ADDR_VAR 0 1
43813: PUSH
43814: LD_VAR 0 2
43818: PUSH
43819: FOR_IN
43820: IFFALSE 43836
// begin SetLives ( i , 0 ) ;
43822: LD_VAR 0 1
43826: PPUSH
43827: LD_INT 0
43829: PPUSH
43830: CALL_OW 234
// end ;
43834: GO 43819
43836: POP
43837: POP
// end ;
43838: PPOPN 2
43840: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
43841: LD_EXP 28
43845: PUSH
43846: LD_EXP 34
43850: AND
43851: IFFALSE 43935
43853: GO 43855
43855: DISABLE
43856: LD_INT 0
43858: PPUSH
43859: PPUSH
// begin enable ;
43860: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
43861: LD_ADDR_VAR 0 2
43865: PUSH
43866: LD_INT 22
43868: PUSH
43869: LD_OWVAR 2
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 32
43880: PUSH
43881: LD_INT 3
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PPUSH
43892: CALL_OW 69
43896: ST_TO_ADDR
// if not tmp then
43897: LD_VAR 0 2
43901: NOT
43902: IFFALSE 43906
// exit ;
43904: GO 43935
// for i in tmp do
43906: LD_ADDR_VAR 0 1
43910: PUSH
43911: LD_VAR 0 2
43915: PUSH
43916: FOR_IN
43917: IFFALSE 43933
// begin SetLives ( i , 0 ) ;
43919: LD_VAR 0 1
43923: PPUSH
43924: LD_INT 0
43926: PPUSH
43927: CALL_OW 234
// end ;
43931: GO 43916
43933: POP
43934: POP
// end ;
43935: PPOPN 2
43937: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
43938: LD_EXP 28
43942: PUSH
43943: LD_EXP 31
43947: AND
43948: IFFALSE 44041
43950: GO 43952
43952: DISABLE
43953: LD_INT 0
43955: PPUSH
// begin enable ;
43956: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
43957: LD_ADDR_VAR 0 1
43961: PUSH
43962: LD_INT 22
43964: PUSH
43965: LD_OWVAR 2
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 2
43976: PUSH
43977: LD_INT 25
43979: PUSH
43980: LD_INT 5
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 25
43989: PUSH
43990: LD_INT 9
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 25
43999: PUSH
44000: LD_INT 8
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PPUSH
44017: CALL_OW 69
44021: PUSH
44022: FOR_IN
44023: IFFALSE 44039
// begin SetClass ( i , 1 ) ;
44025: LD_VAR 0 1
44029: PPUSH
44030: LD_INT 1
44032: PPUSH
44033: CALL_OW 336
// end ;
44037: GO 44022
44039: POP
44040: POP
// end ;
44041: PPOPN 1
44043: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
44044: LD_EXP 28
44048: PUSH
44049: LD_EXP 32
44053: AND
44054: PUSH
44055: LD_OWVAR 65
44059: PUSH
44060: LD_INT 7
44062: LESS
44063: AND
44064: IFFALSE 44078
44066: GO 44068
44068: DISABLE
// begin enable ;
44069: ENABLE
// game_speed := 7 ;
44070: LD_ADDR_OWVAR 65
44074: PUSH
44075: LD_INT 7
44077: ST_TO_ADDR
// end ;
44078: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
44079: LD_EXP 28
44083: PUSH
44084: LD_EXP 35
44088: AND
44089: IFFALSE 44291
44091: GO 44093
44093: DISABLE
44094: LD_INT 0
44096: PPUSH
44097: PPUSH
44098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
44099: LD_ADDR_VAR 0 3
44103: PUSH
44104: LD_INT 81
44106: PUSH
44107: LD_OWVAR 2
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 21
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PPUSH
44130: CALL_OW 69
44134: ST_TO_ADDR
// if not tmp then
44135: LD_VAR 0 3
44139: NOT
44140: IFFALSE 44144
// exit ;
44142: GO 44291
// if tmp > 5 then
44144: LD_VAR 0 3
44148: PUSH
44149: LD_INT 5
44151: GREATER
44152: IFFALSE 44164
// k := 5 else
44154: LD_ADDR_VAR 0 2
44158: PUSH
44159: LD_INT 5
44161: ST_TO_ADDR
44162: GO 44174
// k := tmp ;
44164: LD_ADDR_VAR 0 2
44168: PUSH
44169: LD_VAR 0 3
44173: ST_TO_ADDR
// for i := 1 to k do
44174: LD_ADDR_VAR 0 1
44178: PUSH
44179: DOUBLE
44180: LD_INT 1
44182: DEC
44183: ST_TO_ADDR
44184: LD_VAR 0 2
44188: PUSH
44189: FOR_TO
44190: IFFALSE 44289
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
44192: LD_VAR 0 3
44196: PUSH
44197: LD_VAR 0 1
44201: ARRAY
44202: PPUSH
44203: LD_VAR 0 1
44207: PUSH
44208: LD_INT 4
44210: MOD
44211: PUSH
44212: LD_INT 1
44214: PLUS
44215: PPUSH
44216: CALL_OW 259
44220: PUSH
44221: LD_INT 10
44223: LESS
44224: IFFALSE 44287
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
44226: LD_VAR 0 3
44230: PUSH
44231: LD_VAR 0 1
44235: ARRAY
44236: PPUSH
44237: LD_VAR 0 1
44241: PUSH
44242: LD_INT 4
44244: MOD
44245: PUSH
44246: LD_INT 1
44248: PLUS
44249: PPUSH
44250: LD_VAR 0 3
44254: PUSH
44255: LD_VAR 0 1
44259: ARRAY
44260: PPUSH
44261: LD_VAR 0 1
44265: PUSH
44266: LD_INT 4
44268: MOD
44269: PUSH
44270: LD_INT 1
44272: PLUS
44273: PPUSH
44274: CALL_OW 259
44278: PUSH
44279: LD_INT 1
44281: PLUS
44282: PPUSH
44283: CALL_OW 237
44287: GO 44189
44289: POP
44290: POP
// end ;
44291: PPOPN 3
44293: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
44294: LD_EXP 28
44298: PUSH
44299: LD_EXP 36
44303: AND
44304: IFFALSE 44324
44306: GO 44308
44308: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
44309: LD_INT 4
44311: PPUSH
44312: LD_OWVAR 2
44316: PPUSH
44317: LD_INT 0
44319: PPUSH
44320: CALL_OW 324
44324: END
// every 0 0$1 trigger StreamModeActive and sShovel do
44325: LD_EXP 28
44329: PUSH
44330: LD_EXP 65
44334: AND
44335: IFFALSE 44355
44337: GO 44339
44339: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
44340: LD_INT 19
44342: PPUSH
44343: LD_OWVAR 2
44347: PPUSH
44348: LD_INT 0
44350: PPUSH
44351: CALL_OW 324
44355: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
44356: LD_EXP 28
44360: PUSH
44361: LD_EXP 37
44365: AND
44366: IFFALSE 44468
44368: GO 44370
44370: DISABLE
44371: LD_INT 0
44373: PPUSH
44374: PPUSH
// begin enable ;
44375: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
44376: LD_ADDR_VAR 0 2
44380: PUSH
44381: LD_INT 22
44383: PUSH
44384: LD_OWVAR 2
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 2
44395: PUSH
44396: LD_INT 34
44398: PUSH
44399: LD_INT 11
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 34
44408: PUSH
44409: LD_INT 30
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: LIST
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PPUSH
44425: CALL_OW 69
44429: ST_TO_ADDR
// if not tmp then
44430: LD_VAR 0 2
44434: NOT
44435: IFFALSE 44439
// exit ;
44437: GO 44468
// for i in tmp do
44439: LD_ADDR_VAR 0 1
44443: PUSH
44444: LD_VAR 0 2
44448: PUSH
44449: FOR_IN
44450: IFFALSE 44466
// begin SetLives ( i , 0 ) ;
44452: LD_VAR 0 1
44456: PPUSH
44457: LD_INT 0
44459: PPUSH
44460: CALL_OW 234
// end ;
44464: GO 44449
44466: POP
44467: POP
// end ;
44468: PPOPN 2
44470: END
// every 0 0$1 trigger StreamModeActive and sBunker do
44471: LD_EXP 28
44475: PUSH
44476: LD_EXP 38
44480: AND
44481: IFFALSE 44501
44483: GO 44485
44485: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
44486: LD_INT 32
44488: PPUSH
44489: LD_OWVAR 2
44493: PPUSH
44494: LD_INT 0
44496: PPUSH
44497: CALL_OW 324
44501: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
44502: LD_EXP 28
44506: PUSH
44507: LD_EXP 39
44511: AND
44512: IFFALSE 44693
44514: GO 44516
44516: DISABLE
44517: LD_INT 0
44519: PPUSH
44520: PPUSH
44521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
44522: LD_ADDR_VAR 0 2
44526: PUSH
44527: LD_INT 22
44529: PUSH
44530: LD_OWVAR 2
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 33
44541: PUSH
44542: LD_INT 3
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PPUSH
44553: CALL_OW 69
44557: ST_TO_ADDR
// if not tmp then
44558: LD_VAR 0 2
44562: NOT
44563: IFFALSE 44567
// exit ;
44565: GO 44693
// side := 0 ;
44567: LD_ADDR_VAR 0 3
44571: PUSH
44572: LD_INT 0
44574: ST_TO_ADDR
// for i := 1 to 8 do
44575: LD_ADDR_VAR 0 1
44579: PUSH
44580: DOUBLE
44581: LD_INT 1
44583: DEC
44584: ST_TO_ADDR
44585: LD_INT 8
44587: PUSH
44588: FOR_TO
44589: IFFALSE 44637
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
44591: LD_OWVAR 2
44595: PUSH
44596: LD_VAR 0 1
44600: NONEQUAL
44601: PUSH
44602: LD_OWVAR 2
44606: PPUSH
44607: LD_VAR 0 1
44611: PPUSH
44612: CALL_OW 81
44616: PUSH
44617: LD_INT 2
44619: EQUAL
44620: AND
44621: IFFALSE 44635
// begin side := i ;
44623: LD_ADDR_VAR 0 3
44627: PUSH
44628: LD_VAR 0 1
44632: ST_TO_ADDR
// break ;
44633: GO 44637
// end ;
44635: GO 44588
44637: POP
44638: POP
// if not side then
44639: LD_VAR 0 3
44643: NOT
44644: IFFALSE 44648
// exit ;
44646: GO 44693
// for i := 1 to tmp do
44648: LD_ADDR_VAR 0 1
44652: PUSH
44653: DOUBLE
44654: LD_INT 1
44656: DEC
44657: ST_TO_ADDR
44658: LD_VAR 0 2
44662: PUSH
44663: FOR_TO
44664: IFFALSE 44691
// if Prob ( 60 ) then
44666: LD_INT 60
44668: PPUSH
44669: CALL_OW 13
44673: IFFALSE 44689
// SetSide ( i , side ) ;
44675: LD_VAR 0 1
44679: PPUSH
44680: LD_VAR 0 3
44684: PPUSH
44685: CALL_OW 235
44689: GO 44663
44691: POP
44692: POP
// end ;
44693: PPOPN 3
44695: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
44696: LD_EXP 28
44700: PUSH
44701: LD_EXP 41
44705: AND
44706: IFFALSE 44825
44708: GO 44710
44710: DISABLE
44711: LD_INT 0
44713: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
44714: LD_ADDR_VAR 0 1
44718: PUSH
44719: LD_INT 22
44721: PUSH
44722: LD_OWVAR 2
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 21
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 3
44743: PUSH
44744: LD_INT 23
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: LIST
44762: PPUSH
44763: CALL_OW 69
44767: PUSH
44768: FOR_IN
44769: IFFALSE 44823
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
44771: LD_VAR 0 1
44775: PPUSH
44776: CALL_OW 257
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: LD_INT 3
44789: PUSH
44790: LD_INT 4
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: IN
44799: IFFALSE 44821
// SetClass ( un , rand ( 1 , 4 ) ) ;
44801: LD_VAR 0 1
44805: PPUSH
44806: LD_INT 1
44808: PPUSH
44809: LD_INT 4
44811: PPUSH
44812: CALL_OW 12
44816: PPUSH
44817: CALL_OW 336
44821: GO 44768
44823: POP
44824: POP
// end ;
44825: PPOPN 1
44827: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
44828: LD_EXP 28
44832: PUSH
44833: LD_EXP 40
44837: AND
44838: IFFALSE 44917
44840: GO 44842
44842: DISABLE
44843: LD_INT 0
44845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
44846: LD_ADDR_VAR 0 1
44850: PUSH
44851: LD_INT 22
44853: PUSH
44854: LD_OWVAR 2
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 21
44865: PUSH
44866: LD_INT 3
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PPUSH
44877: CALL_OW 69
44881: ST_TO_ADDR
// if not tmp then
44882: LD_VAR 0 1
44886: NOT
44887: IFFALSE 44891
// exit ;
44889: GO 44917
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
44891: LD_VAR 0 1
44895: PUSH
44896: LD_INT 1
44898: PPUSH
44899: LD_VAR 0 1
44903: PPUSH
44904: CALL_OW 12
44908: ARRAY
44909: PPUSH
44910: LD_INT 100
44912: PPUSH
44913: CALL_OW 234
// end ;
44917: PPOPN 1
44919: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
44920: LD_EXP 28
44924: PUSH
44925: LD_EXP 42
44929: AND
44930: IFFALSE 45028
44932: GO 44934
44934: DISABLE
44935: LD_INT 0
44937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
44938: LD_ADDR_VAR 0 1
44942: PUSH
44943: LD_INT 22
44945: PUSH
44946: LD_OWVAR 2
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 21
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PPUSH
44969: CALL_OW 69
44973: ST_TO_ADDR
// if not tmp then
44974: LD_VAR 0 1
44978: NOT
44979: IFFALSE 44983
// exit ;
44981: GO 45028
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
44983: LD_VAR 0 1
44987: PUSH
44988: LD_INT 1
44990: PPUSH
44991: LD_VAR 0 1
44995: PPUSH
44996: CALL_OW 12
45000: ARRAY
45001: PPUSH
45002: LD_INT 1
45004: PPUSH
45005: LD_INT 4
45007: PPUSH
45008: CALL_OW 12
45012: PPUSH
45013: LD_INT 3000
45015: PPUSH
45016: LD_INT 9000
45018: PPUSH
45019: CALL_OW 12
45023: PPUSH
45024: CALL_OW 492
// end ;
45028: PPOPN 1
45030: END
// every 0 0$1 trigger StreamModeActive and sDepot do
45031: LD_EXP 28
45035: PUSH
45036: LD_EXP 43
45040: AND
45041: IFFALSE 45061
45043: GO 45045
45045: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
45046: LD_INT 1
45048: PPUSH
45049: LD_OWVAR 2
45053: PPUSH
45054: LD_INT 0
45056: PPUSH
45057: CALL_OW 324
45061: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
45062: LD_EXP 28
45066: PUSH
45067: LD_EXP 44
45071: AND
45072: IFFALSE 45155
45074: GO 45076
45076: DISABLE
45077: LD_INT 0
45079: PPUSH
45080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
45081: LD_ADDR_VAR 0 2
45085: PUSH
45086: LD_INT 22
45088: PUSH
45089: LD_OWVAR 2
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 21
45100: PUSH
45101: LD_INT 3
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PPUSH
45112: CALL_OW 69
45116: ST_TO_ADDR
// if not tmp then
45117: LD_VAR 0 2
45121: NOT
45122: IFFALSE 45126
// exit ;
45124: GO 45155
// for i in tmp do
45126: LD_ADDR_VAR 0 1
45130: PUSH
45131: LD_VAR 0 2
45135: PUSH
45136: FOR_IN
45137: IFFALSE 45153
// SetBLevel ( i , 10 ) ;
45139: LD_VAR 0 1
45143: PPUSH
45144: LD_INT 10
45146: PPUSH
45147: CALL_OW 241
45151: GO 45136
45153: POP
45154: POP
// end ;
45155: PPOPN 2
45157: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
45158: LD_EXP 28
45162: PUSH
45163: LD_EXP 45
45167: AND
45168: IFFALSE 45279
45170: GO 45172
45172: DISABLE
45173: LD_INT 0
45175: PPUSH
45176: PPUSH
45177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45178: LD_ADDR_VAR 0 3
45182: PUSH
45183: LD_INT 22
45185: PUSH
45186: LD_OWVAR 2
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 25
45197: PUSH
45198: LD_INT 1
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PPUSH
45209: CALL_OW 69
45213: ST_TO_ADDR
// if not tmp then
45214: LD_VAR 0 3
45218: NOT
45219: IFFALSE 45223
// exit ;
45221: GO 45279
// un := tmp [ rand ( 1 , tmp ) ] ;
45223: LD_ADDR_VAR 0 2
45227: PUSH
45228: LD_VAR 0 3
45232: PUSH
45233: LD_INT 1
45235: PPUSH
45236: LD_VAR 0 3
45240: PPUSH
45241: CALL_OW 12
45245: ARRAY
45246: ST_TO_ADDR
// if Crawls ( un ) then
45247: LD_VAR 0 2
45251: PPUSH
45252: CALL_OW 318
45256: IFFALSE 45267
// ComWalk ( un ) ;
45258: LD_VAR 0 2
45262: PPUSH
45263: CALL_OW 138
// SetClass ( un , class_sniper ) ;
45267: LD_VAR 0 2
45271: PPUSH
45272: LD_INT 5
45274: PPUSH
45275: CALL_OW 336
// end ;
45279: PPOPN 3
45281: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
45282: LD_EXP 28
45286: PUSH
45287: LD_EXP 46
45291: AND
45292: PUSH
45293: LD_OWVAR 67
45297: PUSH
45298: LD_INT 3
45300: LESS
45301: AND
45302: IFFALSE 45321
45304: GO 45306
45306: DISABLE
// Difficulty := Difficulty + 1 ;
45307: LD_ADDR_OWVAR 67
45311: PUSH
45312: LD_OWVAR 67
45316: PUSH
45317: LD_INT 1
45319: PLUS
45320: ST_TO_ADDR
45321: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
45322: LD_EXP 28
45326: PUSH
45327: LD_EXP 47
45331: AND
45332: IFFALSE 45435
45334: GO 45336
45336: DISABLE
45337: LD_INT 0
45339: PPUSH
// begin for i := 1 to 5 do
45340: LD_ADDR_VAR 0 1
45344: PUSH
45345: DOUBLE
45346: LD_INT 1
45348: DEC
45349: ST_TO_ADDR
45350: LD_INT 5
45352: PUSH
45353: FOR_TO
45354: IFFALSE 45433
// begin uc_nation := nation_nature ;
45356: LD_ADDR_OWVAR 21
45360: PUSH
45361: LD_INT 0
45363: ST_TO_ADDR
// uc_side := 0 ;
45364: LD_ADDR_OWVAR 20
45368: PUSH
45369: LD_INT 0
45371: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
45372: LD_ADDR_OWVAR 29
45376: PUSH
45377: LD_INT 12
45379: PUSH
45380: LD_INT 12
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: ST_TO_ADDR
// hc_agressivity := 20 ;
45387: LD_ADDR_OWVAR 35
45391: PUSH
45392: LD_INT 20
45394: ST_TO_ADDR
// hc_class := class_tiger ;
45395: LD_ADDR_OWVAR 28
45399: PUSH
45400: LD_INT 14
45402: ST_TO_ADDR
// hc_gallery :=  ;
45403: LD_ADDR_OWVAR 33
45407: PUSH
45408: LD_STRING 
45410: ST_TO_ADDR
// hc_name :=  ;
45411: LD_ADDR_OWVAR 26
45415: PUSH
45416: LD_STRING 
45418: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
45419: CALL_OW 44
45423: PPUSH
45424: LD_INT 0
45426: PPUSH
45427: CALL_OW 51
// end ;
45431: GO 45353
45433: POP
45434: POP
// end ;
45435: PPOPN 1
45437: END
// every 0 0$1 trigger StreamModeActive and sBomb do
45438: LD_EXP 28
45442: PUSH
45443: LD_EXP 48
45447: AND
45448: IFFALSE 45457
45450: GO 45452
45452: DISABLE
// StreamSibBomb ;
45453: CALL 45458 0 0
45457: END
// export function StreamSibBomb ; var i , x , y ; begin
45458: LD_INT 0
45460: PPUSH
45461: PPUSH
45462: PPUSH
45463: PPUSH
// result := false ;
45464: LD_ADDR_VAR 0 1
45468: PUSH
45469: LD_INT 0
45471: ST_TO_ADDR
// for i := 1 to 16 do
45472: LD_ADDR_VAR 0 2
45476: PUSH
45477: DOUBLE
45478: LD_INT 1
45480: DEC
45481: ST_TO_ADDR
45482: LD_INT 16
45484: PUSH
45485: FOR_TO
45486: IFFALSE 45685
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
45488: LD_ADDR_VAR 0 3
45492: PUSH
45493: LD_INT 10
45495: PUSH
45496: LD_INT 20
45498: PUSH
45499: LD_INT 30
45501: PUSH
45502: LD_INT 40
45504: PUSH
45505: LD_INT 50
45507: PUSH
45508: LD_INT 60
45510: PUSH
45511: LD_INT 70
45513: PUSH
45514: LD_INT 80
45516: PUSH
45517: LD_INT 90
45519: PUSH
45520: LD_INT 100
45522: PUSH
45523: LD_INT 110
45525: PUSH
45526: LD_INT 120
45528: PUSH
45529: LD_INT 130
45531: PUSH
45532: LD_INT 140
45534: PUSH
45535: LD_INT 150
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: PPUSH
45558: LD_INT 15
45560: PPUSH
45561: CALL_OW 12
45565: ARRAY
45566: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
45567: LD_ADDR_VAR 0 4
45571: PUSH
45572: LD_INT 10
45574: PUSH
45575: LD_INT 20
45577: PUSH
45578: LD_INT 30
45580: PUSH
45581: LD_INT 40
45583: PUSH
45584: LD_INT 50
45586: PUSH
45587: LD_INT 60
45589: PUSH
45590: LD_INT 70
45592: PUSH
45593: LD_INT 80
45595: PUSH
45596: LD_INT 90
45598: PUSH
45599: LD_INT 100
45601: PUSH
45602: LD_INT 110
45604: PUSH
45605: LD_INT 120
45607: PUSH
45608: LD_INT 130
45610: PUSH
45611: LD_INT 140
45613: PUSH
45614: LD_INT 150
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: PPUSH
45637: LD_INT 15
45639: PPUSH
45640: CALL_OW 12
45644: ARRAY
45645: ST_TO_ADDR
// if ValidHex ( x , y ) then
45646: LD_VAR 0 3
45650: PPUSH
45651: LD_VAR 0 4
45655: PPUSH
45656: CALL_OW 488
45660: IFFALSE 45683
// begin result := [ x , y ] ;
45662: LD_ADDR_VAR 0 1
45666: PUSH
45667: LD_VAR 0 3
45671: PUSH
45672: LD_VAR 0 4
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: ST_TO_ADDR
// break ;
45681: GO 45685
// end ; end ;
45683: GO 45485
45685: POP
45686: POP
// if result then
45687: LD_VAR 0 1
45691: IFFALSE 45751
// begin ToLua ( playSibBomb() ) ;
45693: LD_STRING playSibBomb()
45695: PPUSH
45696: CALL_OW 559
// wait ( 0 0$14 ) ;
45700: LD_INT 490
45702: PPUSH
45703: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
45707: LD_VAR 0 1
45711: PUSH
45712: LD_INT 1
45714: ARRAY
45715: PPUSH
45716: LD_VAR 0 1
45720: PUSH
45721: LD_INT 2
45723: ARRAY
45724: PPUSH
45725: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
45729: LD_VAR 0 1
45733: PUSH
45734: LD_INT 1
45736: ARRAY
45737: PPUSH
45738: LD_VAR 0 1
45742: PUSH
45743: LD_INT 2
45745: ARRAY
45746: PPUSH
45747: CALL_OW 429
// end ; end ;
45751: LD_VAR 0 1
45755: RET
// every 0 0$1 trigger StreamModeActive and sReset do
45756: LD_EXP 28
45760: PUSH
45761: LD_EXP 50
45765: AND
45766: IFFALSE 45778
45768: GO 45770
45770: DISABLE
// YouLost (  ) ;
45771: LD_STRING 
45773: PPUSH
45774: CALL_OW 104
45778: END
// every 0 0$1 trigger StreamModeActive and sFog do
45779: LD_EXP 28
45783: PUSH
45784: LD_EXP 49
45788: AND
45789: IFFALSE 45803
45791: GO 45793
45793: DISABLE
// FogOff ( your_side ) ;
45794: LD_OWVAR 2
45798: PPUSH
45799: CALL_OW 344
45803: END
// every 0 0$1 trigger StreamModeActive and sSun do
45804: LD_EXP 28
45808: PUSH
45809: LD_EXP 51
45813: AND
45814: IFFALSE 45842
45816: GO 45818
45818: DISABLE
// begin solar_recharge_percent := 0 ;
45819: LD_ADDR_OWVAR 79
45823: PUSH
45824: LD_INT 0
45826: ST_TO_ADDR
// wait ( 5 5$00 ) ;
45827: LD_INT 10500
45829: PPUSH
45830: CALL_OW 67
// solar_recharge_percent := 100 ;
45834: LD_ADDR_OWVAR 79
45838: PUSH
45839: LD_INT 100
45841: ST_TO_ADDR
// end ;
45842: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
45843: LD_EXP 28
45847: PUSH
45848: LD_EXP 52
45852: AND
45853: IFFALSE 46092
45855: GO 45857
45857: DISABLE
45858: LD_INT 0
45860: PPUSH
45861: PPUSH
45862: PPUSH
// begin tmp := [ ] ;
45863: LD_ADDR_VAR 0 3
45867: PUSH
45868: EMPTY
45869: ST_TO_ADDR
// for i := 1 to 6 do
45870: LD_ADDR_VAR 0 1
45874: PUSH
45875: DOUBLE
45876: LD_INT 1
45878: DEC
45879: ST_TO_ADDR
45880: LD_INT 6
45882: PUSH
45883: FOR_TO
45884: IFFALSE 45989
// begin uc_nation := nation_nature ;
45886: LD_ADDR_OWVAR 21
45890: PUSH
45891: LD_INT 0
45893: ST_TO_ADDR
// uc_side := 0 ;
45894: LD_ADDR_OWVAR 20
45898: PUSH
45899: LD_INT 0
45901: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
45902: LD_ADDR_OWVAR 29
45906: PUSH
45907: LD_INT 12
45909: PUSH
45910: LD_INT 12
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: ST_TO_ADDR
// hc_agressivity := 20 ;
45917: LD_ADDR_OWVAR 35
45921: PUSH
45922: LD_INT 20
45924: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
45925: LD_ADDR_OWVAR 28
45929: PUSH
45930: LD_INT 17
45932: ST_TO_ADDR
// hc_gallery :=  ;
45933: LD_ADDR_OWVAR 33
45937: PUSH
45938: LD_STRING 
45940: ST_TO_ADDR
// hc_name :=  ;
45941: LD_ADDR_OWVAR 26
45945: PUSH
45946: LD_STRING 
45948: ST_TO_ADDR
// un := CreateHuman ;
45949: LD_ADDR_VAR 0 2
45953: PUSH
45954: CALL_OW 44
45958: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
45959: LD_VAR 0 2
45963: PPUSH
45964: LD_INT 1
45966: PPUSH
45967: CALL_OW 51
// tmp := tmp ^ un ;
45971: LD_ADDR_VAR 0 3
45975: PUSH
45976: LD_VAR 0 3
45980: PUSH
45981: LD_VAR 0 2
45985: ADD
45986: ST_TO_ADDR
// end ;
45987: GO 45883
45989: POP
45990: POP
// repeat wait ( 0 0$1 ) ;
45991: LD_INT 35
45993: PPUSH
45994: CALL_OW 67
// for un in tmp do
45998: LD_ADDR_VAR 0 2
46002: PUSH
46003: LD_VAR 0 3
46007: PUSH
46008: FOR_IN
46009: IFFALSE 46083
// begin if IsDead ( un ) then
46011: LD_VAR 0 2
46015: PPUSH
46016: CALL_OW 301
46020: IFFALSE 46040
// begin tmp := tmp diff un ;
46022: LD_ADDR_VAR 0 3
46026: PUSH
46027: LD_VAR 0 3
46031: PUSH
46032: LD_VAR 0 2
46036: DIFF
46037: ST_TO_ADDR
// continue ;
46038: GO 46008
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
46040: LD_VAR 0 2
46044: PPUSH
46045: LD_INT 3
46047: PUSH
46048: LD_INT 22
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PPUSH
46062: CALL_OW 69
46066: PPUSH
46067: LD_VAR 0 2
46071: PPUSH
46072: CALL_OW 74
46076: PPUSH
46077: CALL_OW 115
// end ;
46081: GO 46008
46083: POP
46084: POP
// until not tmp ;
46085: LD_VAR 0 3
46089: NOT
46090: IFFALSE 45991
// end ;
46092: PPOPN 3
46094: END
// every 0 0$1 trigger StreamModeActive and sTroll do
46095: LD_EXP 28
46099: PUSH
46100: LD_EXP 53
46104: AND
46105: IFFALSE 46159
46107: GO 46109
46109: DISABLE
// begin ToLua ( displayTroll(); ) ;
46110: LD_STRING displayTroll();
46112: PPUSH
46113: CALL_OW 559
// wait ( 3 3$00 ) ;
46117: LD_INT 6300
46119: PPUSH
46120: CALL_OW 67
// ToLua ( hideTroll(); ) ;
46124: LD_STRING hideTroll();
46126: PPUSH
46127: CALL_OW 559
// wait ( 1 1$00 ) ;
46131: LD_INT 2100
46133: PPUSH
46134: CALL_OW 67
// ToLua ( displayTroll(); ) ;
46138: LD_STRING displayTroll();
46140: PPUSH
46141: CALL_OW 559
// wait ( 1 1$00 ) ;
46145: LD_INT 2100
46147: PPUSH
46148: CALL_OW 67
// ToLua ( hideTroll(); ) ;
46152: LD_STRING hideTroll();
46154: PPUSH
46155: CALL_OW 559
// end ;
46159: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
46160: LD_EXP 28
46164: PUSH
46165: LD_EXP 54
46169: AND
46170: IFFALSE 46233
46172: GO 46174
46174: DISABLE
46175: LD_INT 0
46177: PPUSH
// begin p := 0 ;
46178: LD_ADDR_VAR 0 1
46182: PUSH
46183: LD_INT 0
46185: ST_TO_ADDR
// repeat game_speed := 1 ;
46186: LD_ADDR_OWVAR 65
46190: PUSH
46191: LD_INT 1
46193: ST_TO_ADDR
// wait ( 0 0$1 ) ;
46194: LD_INT 35
46196: PPUSH
46197: CALL_OW 67
// p := p + 1 ;
46201: LD_ADDR_VAR 0 1
46205: PUSH
46206: LD_VAR 0 1
46210: PUSH
46211: LD_INT 1
46213: PLUS
46214: ST_TO_ADDR
// until p >= 60 ;
46215: LD_VAR 0 1
46219: PUSH
46220: LD_INT 60
46222: GREATEREQUAL
46223: IFFALSE 46186
// game_speed := 4 ;
46225: LD_ADDR_OWVAR 65
46229: PUSH
46230: LD_INT 4
46232: ST_TO_ADDR
// end ;
46233: PPOPN 1
46235: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
46236: LD_EXP 28
46240: PUSH
46241: LD_EXP 55
46245: AND
46246: IFFALSE 46392
46248: GO 46250
46250: DISABLE
46251: LD_INT 0
46253: PPUSH
46254: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46255: LD_ADDR_VAR 0 1
46259: PUSH
46260: LD_INT 22
46262: PUSH
46263: LD_OWVAR 2
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 2
46274: PUSH
46275: LD_INT 30
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 30
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: LIST
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PPUSH
46304: CALL_OW 69
46308: ST_TO_ADDR
// if not depot then
46309: LD_VAR 0 1
46313: NOT
46314: IFFALSE 46318
// exit ;
46316: GO 46392
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
46318: LD_ADDR_VAR 0 2
46322: PUSH
46323: LD_VAR 0 1
46327: PUSH
46328: LD_INT 1
46330: PPUSH
46331: LD_VAR 0 1
46335: PPUSH
46336: CALL_OW 12
46340: ARRAY
46341: PPUSH
46342: CALL_OW 274
46346: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
46347: LD_VAR 0 2
46351: PPUSH
46352: LD_INT 1
46354: PPUSH
46355: LD_INT 0
46357: PPUSH
46358: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
46362: LD_VAR 0 2
46366: PPUSH
46367: LD_INT 2
46369: PPUSH
46370: LD_INT 0
46372: PPUSH
46373: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
46377: LD_VAR 0 2
46381: PPUSH
46382: LD_INT 3
46384: PPUSH
46385: LD_INT 0
46387: PPUSH
46388: CALL_OW 277
// end ;
46392: PPOPN 2
46394: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
46395: LD_EXP 28
46399: PUSH
46400: LD_EXP 56
46404: AND
46405: IFFALSE 46502
46407: GO 46409
46409: DISABLE
46410: LD_INT 0
46412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
46413: LD_ADDR_VAR 0 1
46417: PUSH
46418: LD_INT 22
46420: PUSH
46421: LD_OWVAR 2
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 21
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 3
46442: PUSH
46443: LD_INT 23
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: LIST
46461: PPUSH
46462: CALL_OW 69
46466: ST_TO_ADDR
// if not tmp then
46467: LD_VAR 0 1
46471: NOT
46472: IFFALSE 46476
// exit ;
46474: GO 46502
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
46476: LD_VAR 0 1
46480: PUSH
46481: LD_INT 1
46483: PPUSH
46484: LD_VAR 0 1
46488: PPUSH
46489: CALL_OW 12
46493: ARRAY
46494: PPUSH
46495: LD_INT 200
46497: PPUSH
46498: CALL_OW 234
// end ;
46502: PPOPN 1
46504: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
46505: LD_EXP 28
46509: PUSH
46510: LD_EXP 57
46514: AND
46515: IFFALSE 46594
46517: GO 46519
46519: DISABLE
46520: LD_INT 0
46522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
46523: LD_ADDR_VAR 0 1
46527: PUSH
46528: LD_INT 22
46530: PUSH
46531: LD_OWVAR 2
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 21
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PPUSH
46554: CALL_OW 69
46558: ST_TO_ADDR
// if not tmp then
46559: LD_VAR 0 1
46563: NOT
46564: IFFALSE 46568
// exit ;
46566: GO 46594
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
46568: LD_VAR 0 1
46572: PUSH
46573: LD_INT 1
46575: PPUSH
46576: LD_VAR 0 1
46580: PPUSH
46581: CALL_OW 12
46585: ARRAY
46586: PPUSH
46587: LD_INT 60
46589: PPUSH
46590: CALL_OW 234
// end ;
46594: PPOPN 1
46596: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
46597: LD_EXP 28
46601: PUSH
46602: LD_EXP 58
46606: AND
46607: IFFALSE 46706
46609: GO 46611
46611: DISABLE
46612: LD_INT 0
46614: PPUSH
46615: PPUSH
// begin enable ;
46616: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
46617: LD_ADDR_VAR 0 1
46621: PUSH
46622: LD_INT 22
46624: PUSH
46625: LD_OWVAR 2
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 61
46636: PUSH
46637: EMPTY
46638: LIST
46639: PUSH
46640: LD_INT 33
46642: PUSH
46643: LD_INT 2
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: LIST
46654: PPUSH
46655: CALL_OW 69
46659: ST_TO_ADDR
// if not tmp then
46660: LD_VAR 0 1
46664: NOT
46665: IFFALSE 46669
// exit ;
46667: GO 46706
// for i in tmp do
46669: LD_ADDR_VAR 0 2
46673: PUSH
46674: LD_VAR 0 1
46678: PUSH
46679: FOR_IN
46680: IFFALSE 46704
// if IsControledBy ( i ) then
46682: LD_VAR 0 2
46686: PPUSH
46687: CALL_OW 312
46691: IFFALSE 46702
// ComUnlink ( i ) ;
46693: LD_VAR 0 2
46697: PPUSH
46698: CALL_OW 136
46702: GO 46679
46704: POP
46705: POP
// end ;
46706: PPOPN 2
46708: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
46709: LD_EXP 28
46713: PUSH
46714: LD_EXP 59
46718: AND
46719: IFFALSE 46859
46721: GO 46723
46723: DISABLE
46724: LD_INT 0
46726: PPUSH
46727: PPUSH
// begin ToLua ( displayPowell(); ) ;
46728: LD_STRING displayPowell();
46730: PPUSH
46731: CALL_OW 559
// uc_side := 0 ;
46735: LD_ADDR_OWVAR 20
46739: PUSH
46740: LD_INT 0
46742: ST_TO_ADDR
// uc_nation := 2 ;
46743: LD_ADDR_OWVAR 21
46747: PUSH
46748: LD_INT 2
46750: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
46751: LD_ADDR_OWVAR 37
46755: PUSH
46756: LD_INT 14
46758: ST_TO_ADDR
// vc_engine := engine_siberite ;
46759: LD_ADDR_OWVAR 39
46763: PUSH
46764: LD_INT 3
46766: ST_TO_ADDR
// vc_control := control_apeman ;
46767: LD_ADDR_OWVAR 38
46771: PUSH
46772: LD_INT 5
46774: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
46775: LD_ADDR_OWVAR 40
46779: PUSH
46780: LD_INT 29
46782: ST_TO_ADDR
// un := CreateVehicle ;
46783: LD_ADDR_VAR 0 2
46787: PUSH
46788: CALL_OW 45
46792: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
46793: LD_VAR 0 2
46797: PPUSH
46798: LD_INT 1
46800: PPUSH
46801: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
46805: LD_INT 35
46807: PPUSH
46808: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
46812: LD_VAR 0 2
46816: PPUSH
46817: LD_INT 22
46819: PUSH
46820: LD_OWVAR 2
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PPUSH
46829: CALL_OW 69
46833: PPUSH
46834: LD_VAR 0 2
46838: PPUSH
46839: CALL_OW 74
46843: PPUSH
46844: CALL_OW 115
// until IsDead ( un ) ;
46848: LD_VAR 0 2
46852: PPUSH
46853: CALL_OW 301
46857: IFFALSE 46805
// end ;
46859: PPOPN 2
46861: END
// every 0 0$1 trigger StreamModeActive and sStu do
46862: LD_EXP 28
46866: PUSH
46867: LD_EXP 67
46871: AND
46872: IFFALSE 46888
46874: GO 46876
46876: DISABLE
// begin ToLua ( displayStucuk(); ) ;
46877: LD_STRING displayStucuk();
46879: PPUSH
46880: CALL_OW 559
// ResetFog ;
46884: CALL_OW 335
// end ;
46888: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
46889: LD_EXP 28
46893: PUSH
46894: LD_EXP 60
46898: AND
46899: IFFALSE 47040
46901: GO 46903
46903: DISABLE
46904: LD_INT 0
46906: PPUSH
46907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
46908: LD_ADDR_VAR 0 2
46912: PUSH
46913: LD_INT 22
46915: PUSH
46916: LD_OWVAR 2
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 21
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PPUSH
46939: CALL_OW 69
46943: ST_TO_ADDR
// if not tmp then
46944: LD_VAR 0 2
46948: NOT
46949: IFFALSE 46953
// exit ;
46951: GO 47040
// un := tmp [ rand ( 1 , tmp ) ] ;
46953: LD_ADDR_VAR 0 1
46957: PUSH
46958: LD_VAR 0 2
46962: PUSH
46963: LD_INT 1
46965: PPUSH
46966: LD_VAR 0 2
46970: PPUSH
46971: CALL_OW 12
46975: ARRAY
46976: ST_TO_ADDR
// SetSide ( un , 0 ) ;
46977: LD_VAR 0 1
46981: PPUSH
46982: LD_INT 0
46984: PPUSH
46985: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
46989: LD_VAR 0 1
46993: PPUSH
46994: LD_OWVAR 3
46998: PUSH
46999: LD_VAR 0 1
47003: DIFF
47004: PPUSH
47005: LD_VAR 0 1
47009: PPUSH
47010: CALL_OW 74
47014: PPUSH
47015: CALL_OW 115
// wait ( 0 0$20 ) ;
47019: LD_INT 700
47021: PPUSH
47022: CALL_OW 67
// SetSide ( un , your_side ) ;
47026: LD_VAR 0 1
47030: PPUSH
47031: LD_OWVAR 2
47035: PPUSH
47036: CALL_OW 235
// end ;
47040: PPOPN 2
47042: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
47043: LD_EXP 28
47047: PUSH
47048: LD_EXP 61
47052: AND
47053: IFFALSE 47159
47055: GO 47057
47057: DISABLE
47058: LD_INT 0
47060: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47061: LD_ADDR_VAR 0 1
47065: PUSH
47066: LD_INT 22
47068: PUSH
47069: LD_OWVAR 2
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: LD_INT 30
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 30
47093: PUSH
47094: LD_INT 1
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: LIST
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PPUSH
47110: CALL_OW 69
47114: ST_TO_ADDR
// if not depot then
47115: LD_VAR 0 1
47119: NOT
47120: IFFALSE 47124
// exit ;
47122: GO 47159
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
47124: LD_VAR 0 1
47128: PUSH
47129: LD_INT 1
47131: ARRAY
47132: PPUSH
47133: CALL_OW 250
47137: PPUSH
47138: LD_VAR 0 1
47142: PUSH
47143: LD_INT 1
47145: ARRAY
47146: PPUSH
47147: CALL_OW 251
47151: PPUSH
47152: LD_INT 70
47154: PPUSH
47155: CALL_OW 495
// end ;
47159: PPOPN 1
47161: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
47162: LD_EXP 28
47166: PUSH
47167: LD_EXP 62
47171: AND
47172: IFFALSE 47383
47174: GO 47176
47176: DISABLE
47177: LD_INT 0
47179: PPUSH
47180: PPUSH
47181: PPUSH
47182: PPUSH
47183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
47184: LD_ADDR_VAR 0 5
47188: PUSH
47189: LD_INT 22
47191: PUSH
47192: LD_OWVAR 2
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 21
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PPUSH
47215: CALL_OW 69
47219: ST_TO_ADDR
// if not tmp then
47220: LD_VAR 0 5
47224: NOT
47225: IFFALSE 47229
// exit ;
47227: GO 47383
// for i in tmp do
47229: LD_ADDR_VAR 0 1
47233: PUSH
47234: LD_VAR 0 5
47238: PUSH
47239: FOR_IN
47240: IFFALSE 47381
// begin d := rand ( 0 , 5 ) ;
47242: LD_ADDR_VAR 0 4
47246: PUSH
47247: LD_INT 0
47249: PPUSH
47250: LD_INT 5
47252: PPUSH
47253: CALL_OW 12
47257: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
47258: LD_ADDR_VAR 0 2
47262: PUSH
47263: LD_VAR 0 1
47267: PPUSH
47268: CALL_OW 250
47272: PPUSH
47273: LD_VAR 0 4
47277: PPUSH
47278: LD_INT 3
47280: PPUSH
47281: LD_INT 12
47283: PPUSH
47284: CALL_OW 12
47288: PPUSH
47289: CALL_OW 272
47293: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
47294: LD_ADDR_VAR 0 3
47298: PUSH
47299: LD_VAR 0 1
47303: PPUSH
47304: CALL_OW 251
47308: PPUSH
47309: LD_VAR 0 4
47313: PPUSH
47314: LD_INT 3
47316: PPUSH
47317: LD_INT 12
47319: PPUSH
47320: CALL_OW 12
47324: PPUSH
47325: CALL_OW 273
47329: ST_TO_ADDR
// if ValidHex ( x , y ) then
47330: LD_VAR 0 2
47334: PPUSH
47335: LD_VAR 0 3
47339: PPUSH
47340: CALL_OW 488
47344: IFFALSE 47379
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
47346: LD_VAR 0 1
47350: PPUSH
47351: LD_VAR 0 2
47355: PPUSH
47356: LD_VAR 0 3
47360: PPUSH
47361: LD_INT 3
47363: PPUSH
47364: LD_INT 6
47366: PPUSH
47367: CALL_OW 12
47371: PPUSH
47372: LD_INT 1
47374: PPUSH
47375: CALL_OW 483
// end ;
47379: GO 47239
47381: POP
47382: POP
// end ;
47383: PPOPN 5
47385: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
47386: LD_EXP 28
47390: PUSH
47391: LD_EXP 63
47395: AND
47396: IFFALSE 47490
47398: GO 47400
47400: DISABLE
47401: LD_INT 0
47403: PPUSH
47404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
47405: LD_ADDR_VAR 0 2
47409: PUSH
47410: LD_INT 22
47412: PUSH
47413: LD_OWVAR 2
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 32
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 21
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: LIST
47446: PPUSH
47447: CALL_OW 69
47451: ST_TO_ADDR
// if not tmp then
47452: LD_VAR 0 2
47456: NOT
47457: IFFALSE 47461
// exit ;
47459: GO 47490
// for i in tmp do
47461: LD_ADDR_VAR 0 1
47465: PUSH
47466: LD_VAR 0 2
47470: PUSH
47471: FOR_IN
47472: IFFALSE 47488
// SetFuel ( i , 0 ) ;
47474: LD_VAR 0 1
47478: PPUSH
47479: LD_INT 0
47481: PPUSH
47482: CALL_OW 240
47486: GO 47471
47488: POP
47489: POP
// end ;
47490: PPOPN 2
47492: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
47493: LD_EXP 28
47497: PUSH
47498: LD_EXP 64
47502: AND
47503: IFFALSE 47569
47505: GO 47507
47507: DISABLE
47508: LD_INT 0
47510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
47511: LD_ADDR_VAR 0 1
47515: PUSH
47516: LD_INT 22
47518: PUSH
47519: LD_OWVAR 2
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 30
47530: PUSH
47531: LD_INT 29
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PPUSH
47542: CALL_OW 69
47546: ST_TO_ADDR
// if not tmp then
47547: LD_VAR 0 1
47551: NOT
47552: IFFALSE 47556
// exit ;
47554: GO 47569
// DestroyUnit ( tmp [ 1 ] ) ;
47556: LD_VAR 0 1
47560: PUSH
47561: LD_INT 1
47563: ARRAY
47564: PPUSH
47565: CALL_OW 65
// end ;
47569: PPOPN 1
47571: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
47572: LD_EXP 28
47576: PUSH
47577: LD_EXP 66
47581: AND
47582: IFFALSE 47711
47584: GO 47586
47586: DISABLE
47587: LD_INT 0
47589: PPUSH
// begin uc_side := 0 ;
47590: LD_ADDR_OWVAR 20
47594: PUSH
47595: LD_INT 0
47597: ST_TO_ADDR
// uc_nation := nation_arabian ;
47598: LD_ADDR_OWVAR 21
47602: PUSH
47603: LD_INT 2
47605: ST_TO_ADDR
// hc_gallery :=  ;
47606: LD_ADDR_OWVAR 33
47610: PUSH
47611: LD_STRING 
47613: ST_TO_ADDR
// hc_name :=  ;
47614: LD_ADDR_OWVAR 26
47618: PUSH
47619: LD_STRING 
47621: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
47622: LD_INT 1
47624: PPUSH
47625: LD_INT 11
47627: PPUSH
47628: LD_INT 10
47630: PPUSH
47631: CALL_OW 380
// un := CreateHuman ;
47635: LD_ADDR_VAR 0 1
47639: PUSH
47640: CALL_OW 44
47644: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
47645: LD_VAR 0 1
47649: PPUSH
47650: LD_INT 1
47652: PPUSH
47653: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
47657: LD_INT 35
47659: PPUSH
47660: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
47664: LD_VAR 0 1
47668: PPUSH
47669: LD_INT 22
47671: PUSH
47672: LD_OWVAR 2
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PPUSH
47681: CALL_OW 69
47685: PPUSH
47686: LD_VAR 0 1
47690: PPUSH
47691: CALL_OW 74
47695: PPUSH
47696: CALL_OW 115
// until IsDead ( un ) ;
47700: LD_VAR 0 1
47704: PPUSH
47705: CALL_OW 301
47709: IFFALSE 47657
// end ;
47711: PPOPN 1
47713: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
47714: LD_EXP 28
47718: PUSH
47719: LD_EXP 68
47723: AND
47724: IFFALSE 47736
47726: GO 47728
47728: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
47729: LD_STRING earthquake(getX(game), 0, 32)
47731: PPUSH
47732: CALL_OW 559
47736: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
47737: LD_EXP 28
47741: PUSH
47742: LD_EXP 69
47746: AND
47747: IFFALSE 47838
47749: GO 47751
47751: DISABLE
47752: LD_INT 0
47754: PPUSH
// begin enable ;
47755: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
47756: LD_ADDR_VAR 0 1
47760: PUSH
47761: LD_INT 22
47763: PUSH
47764: LD_OWVAR 2
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 21
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 33
47785: PUSH
47786: LD_INT 3
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: LIST
47797: PPUSH
47798: CALL_OW 69
47802: ST_TO_ADDR
// if not tmp then
47803: LD_VAR 0 1
47807: NOT
47808: IFFALSE 47812
// exit ;
47810: GO 47838
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
47812: LD_VAR 0 1
47816: PUSH
47817: LD_INT 1
47819: PPUSH
47820: LD_VAR 0 1
47824: PPUSH
47825: CALL_OW 12
47829: ARRAY
47830: PPUSH
47831: LD_INT 1
47833: PPUSH
47834: CALL_OW 234
// end ;
47838: PPOPN 1
47840: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
47841: LD_EXP 28
47845: PUSH
47846: LD_EXP 70
47850: AND
47851: IFFALSE 47992
47853: GO 47855
47855: DISABLE
47856: LD_INT 0
47858: PPUSH
47859: PPUSH
47860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
47861: LD_ADDR_VAR 0 3
47865: PUSH
47866: LD_INT 22
47868: PUSH
47869: LD_OWVAR 2
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 25
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PPUSH
47892: CALL_OW 69
47896: ST_TO_ADDR
// if not tmp then
47897: LD_VAR 0 3
47901: NOT
47902: IFFALSE 47906
// exit ;
47904: GO 47992
// un := tmp [ rand ( 1 , tmp ) ] ;
47906: LD_ADDR_VAR 0 2
47910: PUSH
47911: LD_VAR 0 3
47915: PUSH
47916: LD_INT 1
47918: PPUSH
47919: LD_VAR 0 3
47923: PPUSH
47924: CALL_OW 12
47928: ARRAY
47929: ST_TO_ADDR
// if Crawls ( un ) then
47930: LD_VAR 0 2
47934: PPUSH
47935: CALL_OW 318
47939: IFFALSE 47950
// ComWalk ( un ) ;
47941: LD_VAR 0 2
47945: PPUSH
47946: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
47950: LD_VAR 0 2
47954: PPUSH
47955: LD_INT 9
47957: PPUSH
47958: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
47962: LD_INT 28
47964: PPUSH
47965: LD_OWVAR 2
47969: PPUSH
47970: LD_INT 2
47972: PPUSH
47973: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
47977: LD_INT 29
47979: PPUSH
47980: LD_OWVAR 2
47984: PPUSH
47985: LD_INT 2
47987: PPUSH
47988: CALL_OW 322
// end ;
47992: PPOPN 3
47994: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
47995: LD_EXP 28
47999: PUSH
48000: LD_EXP 71
48004: AND
48005: IFFALSE 48116
48007: GO 48009
48009: DISABLE
48010: LD_INT 0
48012: PPUSH
48013: PPUSH
48014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
48015: LD_ADDR_VAR 0 3
48019: PUSH
48020: LD_INT 22
48022: PUSH
48023: LD_OWVAR 2
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 25
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PPUSH
48046: CALL_OW 69
48050: ST_TO_ADDR
// if not tmp then
48051: LD_VAR 0 3
48055: NOT
48056: IFFALSE 48060
// exit ;
48058: GO 48116
// un := tmp [ rand ( 1 , tmp ) ] ;
48060: LD_ADDR_VAR 0 2
48064: PUSH
48065: LD_VAR 0 3
48069: PUSH
48070: LD_INT 1
48072: PPUSH
48073: LD_VAR 0 3
48077: PPUSH
48078: CALL_OW 12
48082: ARRAY
48083: ST_TO_ADDR
// if Crawls ( un ) then
48084: LD_VAR 0 2
48088: PPUSH
48089: CALL_OW 318
48093: IFFALSE 48104
// ComWalk ( un ) ;
48095: LD_VAR 0 2
48099: PPUSH
48100: CALL_OW 138
// SetClass ( un , class_mortar ) ;
48104: LD_VAR 0 2
48108: PPUSH
48109: LD_INT 8
48111: PPUSH
48112: CALL_OW 336
// end ;
48116: PPOPN 3
48118: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
48119: LD_EXP 28
48123: PUSH
48124: LD_EXP 72
48128: AND
48129: IFFALSE 48273
48131: GO 48133
48133: DISABLE
48134: LD_INT 0
48136: PPUSH
48137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
48138: LD_ADDR_VAR 0 2
48142: PUSH
48143: LD_INT 22
48145: PUSH
48146: LD_OWVAR 2
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 21
48157: PUSH
48158: LD_INT 2
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: LD_INT 34
48170: PUSH
48171: LD_INT 12
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 34
48180: PUSH
48181: LD_INT 51
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 34
48190: PUSH
48191: LD_INT 32
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: LIST
48208: PPUSH
48209: CALL_OW 69
48213: ST_TO_ADDR
// if not tmp then
48214: LD_VAR 0 2
48218: NOT
48219: IFFALSE 48223
// exit ;
48221: GO 48273
// for i in tmp do
48223: LD_ADDR_VAR 0 1
48227: PUSH
48228: LD_VAR 0 2
48232: PUSH
48233: FOR_IN
48234: IFFALSE 48271
// if GetCargo ( i , mat_artifact ) = 0 then
48236: LD_VAR 0 1
48240: PPUSH
48241: LD_INT 4
48243: PPUSH
48244: CALL_OW 289
48248: PUSH
48249: LD_INT 0
48251: EQUAL
48252: IFFALSE 48269
// SetCargo ( i , mat_siberit , 100 ) ;
48254: LD_VAR 0 1
48258: PPUSH
48259: LD_INT 3
48261: PPUSH
48262: LD_INT 100
48264: PPUSH
48265: CALL_OW 290
48269: GO 48233
48271: POP
48272: POP
// end ;
48273: PPOPN 2
48275: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
48276: LD_EXP 28
48280: PUSH
48281: LD_EXP 73
48285: AND
48286: IFFALSE 48469
48288: GO 48290
48290: DISABLE
48291: LD_INT 0
48293: PPUSH
48294: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
48295: LD_ADDR_VAR 0 2
48299: PUSH
48300: LD_INT 22
48302: PUSH
48303: LD_OWVAR 2
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PPUSH
48312: CALL_OW 69
48316: ST_TO_ADDR
// if not tmp then
48317: LD_VAR 0 2
48321: NOT
48322: IFFALSE 48326
// exit ;
48324: GO 48469
// for i := 1 to 2 do
48326: LD_ADDR_VAR 0 1
48330: PUSH
48331: DOUBLE
48332: LD_INT 1
48334: DEC
48335: ST_TO_ADDR
48336: LD_INT 2
48338: PUSH
48339: FOR_TO
48340: IFFALSE 48467
// begin uc_side := your_side ;
48342: LD_ADDR_OWVAR 20
48346: PUSH
48347: LD_OWVAR 2
48351: ST_TO_ADDR
// uc_nation := nation_american ;
48352: LD_ADDR_OWVAR 21
48356: PUSH
48357: LD_INT 1
48359: ST_TO_ADDR
// vc_chassis := us_morphling ;
48360: LD_ADDR_OWVAR 37
48364: PUSH
48365: LD_INT 5
48367: ST_TO_ADDR
// vc_engine := engine_siberite ;
48368: LD_ADDR_OWVAR 39
48372: PUSH
48373: LD_INT 3
48375: ST_TO_ADDR
// vc_control := control_computer ;
48376: LD_ADDR_OWVAR 38
48380: PUSH
48381: LD_INT 3
48383: ST_TO_ADDR
// vc_weapon := us_double_laser ;
48384: LD_ADDR_OWVAR 40
48388: PUSH
48389: LD_INT 10
48391: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
48392: LD_VAR 0 2
48396: PUSH
48397: LD_INT 1
48399: ARRAY
48400: PPUSH
48401: CALL_OW 310
48405: NOT
48406: IFFALSE 48453
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
48408: CALL_OW 45
48412: PPUSH
48413: LD_VAR 0 2
48417: PUSH
48418: LD_INT 1
48420: ARRAY
48421: PPUSH
48422: CALL_OW 250
48426: PPUSH
48427: LD_VAR 0 2
48431: PUSH
48432: LD_INT 1
48434: ARRAY
48435: PPUSH
48436: CALL_OW 251
48440: PPUSH
48441: LD_INT 12
48443: PPUSH
48444: LD_INT 1
48446: PPUSH
48447: CALL_OW 50
48451: GO 48465
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
48453: CALL_OW 45
48457: PPUSH
48458: LD_INT 1
48460: PPUSH
48461: CALL_OW 51
// end ;
48465: GO 48339
48467: POP
48468: POP
// end ;
48469: PPOPN 2
48471: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
48472: LD_EXP 28
48476: PUSH
48477: LD_EXP 74
48481: AND
48482: IFFALSE 48704
48484: GO 48486
48486: DISABLE
48487: LD_INT 0
48489: PPUSH
48490: PPUSH
48491: PPUSH
48492: PPUSH
48493: PPUSH
48494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
48495: LD_ADDR_VAR 0 6
48499: PUSH
48500: LD_INT 22
48502: PUSH
48503: LD_OWVAR 2
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 21
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 3
48524: PUSH
48525: LD_INT 23
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: LIST
48543: PPUSH
48544: CALL_OW 69
48548: ST_TO_ADDR
// if not tmp then
48549: LD_VAR 0 6
48553: NOT
48554: IFFALSE 48558
// exit ;
48556: GO 48704
// s1 := rand ( 1 , 4 ) ;
48558: LD_ADDR_VAR 0 2
48562: PUSH
48563: LD_INT 1
48565: PPUSH
48566: LD_INT 4
48568: PPUSH
48569: CALL_OW 12
48573: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
48574: LD_ADDR_VAR 0 4
48578: PUSH
48579: LD_VAR 0 6
48583: PUSH
48584: LD_INT 1
48586: ARRAY
48587: PPUSH
48588: LD_VAR 0 2
48592: PPUSH
48593: CALL_OW 259
48597: ST_TO_ADDR
// if s1 = 1 then
48598: LD_VAR 0 2
48602: PUSH
48603: LD_INT 1
48605: EQUAL
48606: IFFALSE 48626
// s2 := rand ( 2 , 4 ) else
48608: LD_ADDR_VAR 0 3
48612: PUSH
48613: LD_INT 2
48615: PPUSH
48616: LD_INT 4
48618: PPUSH
48619: CALL_OW 12
48623: ST_TO_ADDR
48624: GO 48634
// s2 := 1 ;
48626: LD_ADDR_VAR 0 3
48630: PUSH
48631: LD_INT 1
48633: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
48634: LD_ADDR_VAR 0 5
48638: PUSH
48639: LD_VAR 0 6
48643: PUSH
48644: LD_INT 1
48646: ARRAY
48647: PPUSH
48648: LD_VAR 0 3
48652: PPUSH
48653: CALL_OW 259
48657: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
48658: LD_VAR 0 6
48662: PUSH
48663: LD_INT 1
48665: ARRAY
48666: PPUSH
48667: LD_VAR 0 2
48671: PPUSH
48672: LD_VAR 0 5
48676: PPUSH
48677: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
48681: LD_VAR 0 6
48685: PUSH
48686: LD_INT 1
48688: ARRAY
48689: PPUSH
48690: LD_VAR 0 3
48694: PPUSH
48695: LD_VAR 0 4
48699: PPUSH
48700: CALL_OW 237
// end ;
48704: PPOPN 6
48706: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
48707: LD_EXP 28
48711: PUSH
48712: LD_EXP 75
48716: AND
48717: IFFALSE 48796
48719: GO 48721
48721: DISABLE
48722: LD_INT 0
48724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
48725: LD_ADDR_VAR 0 1
48729: PUSH
48730: LD_INT 22
48732: PUSH
48733: LD_OWVAR 2
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 30
48744: PUSH
48745: LD_INT 3
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PPUSH
48756: CALL_OW 69
48760: ST_TO_ADDR
// if not tmp then
48761: LD_VAR 0 1
48765: NOT
48766: IFFALSE 48770
// exit ;
48768: GO 48796
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
48770: LD_VAR 0 1
48774: PUSH
48775: LD_INT 1
48777: PPUSH
48778: LD_VAR 0 1
48782: PPUSH
48783: CALL_OW 12
48787: ARRAY
48788: PPUSH
48789: LD_INT 1
48791: PPUSH
48792: CALL_OW 234
// end ;
48796: PPOPN 1
48798: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
48799: LD_EXP 28
48803: PUSH
48804: LD_EXP 76
48808: AND
48809: IFFALSE 48921
48811: GO 48813
48813: DISABLE
48814: LD_INT 0
48816: PPUSH
48817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
48818: LD_ADDR_VAR 0 2
48822: PUSH
48823: LD_INT 22
48825: PUSH
48826: LD_OWVAR 2
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: LD_INT 30
48840: PUSH
48841: LD_INT 27
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 30
48850: PUSH
48851: LD_INT 26
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 30
48860: PUSH
48861: LD_INT 28
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PPUSH
48878: CALL_OW 69
48882: ST_TO_ADDR
// if not tmp then
48883: LD_VAR 0 2
48887: NOT
48888: IFFALSE 48892
// exit ;
48890: GO 48921
// for i in tmp do
48892: LD_ADDR_VAR 0 1
48896: PUSH
48897: LD_VAR 0 2
48901: PUSH
48902: FOR_IN
48903: IFFALSE 48919
// SetLives ( i , 1 ) ;
48905: LD_VAR 0 1
48909: PPUSH
48910: LD_INT 1
48912: PPUSH
48913: CALL_OW 234
48917: GO 48902
48919: POP
48920: POP
// end ;
48921: PPOPN 2
48923: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
48924: LD_EXP 28
48928: PUSH
48929: LD_EXP 77
48933: AND
48934: IFFALSE 49208
48936: GO 48938
48938: DISABLE
48939: LD_INT 0
48941: PPUSH
48942: PPUSH
48943: PPUSH
// begin i := rand ( 1 , 7 ) ;
48944: LD_ADDR_VAR 0 1
48948: PUSH
48949: LD_INT 1
48951: PPUSH
48952: LD_INT 7
48954: PPUSH
48955: CALL_OW 12
48959: ST_TO_ADDR
// case i of 1 :
48960: LD_VAR 0 1
48964: PUSH
48965: LD_INT 1
48967: DOUBLE
48968: EQUAL
48969: IFTRUE 48973
48971: GO 48983
48973: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
48974: LD_STRING earthquake(getX(game), 0, 32)
48976: PPUSH
48977: CALL_OW 559
48981: GO 49208
48983: LD_INT 2
48985: DOUBLE
48986: EQUAL
48987: IFTRUE 48991
48989: GO 49005
48991: POP
// begin ToLua ( displayStucuk(); ) ;
48992: LD_STRING displayStucuk();
48994: PPUSH
48995: CALL_OW 559
// ResetFog ;
48999: CALL_OW 335
// end ; 3 :
49003: GO 49208
49005: LD_INT 3
49007: DOUBLE
49008: EQUAL
49009: IFTRUE 49013
49011: GO 49117
49013: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
49014: LD_ADDR_VAR 0 2
49018: PUSH
49019: LD_INT 22
49021: PUSH
49022: LD_OWVAR 2
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 25
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PPUSH
49045: CALL_OW 69
49049: ST_TO_ADDR
// if not tmp then
49050: LD_VAR 0 2
49054: NOT
49055: IFFALSE 49059
// exit ;
49057: GO 49208
// un := tmp [ rand ( 1 , tmp ) ] ;
49059: LD_ADDR_VAR 0 3
49063: PUSH
49064: LD_VAR 0 2
49068: PUSH
49069: LD_INT 1
49071: PPUSH
49072: LD_VAR 0 2
49076: PPUSH
49077: CALL_OW 12
49081: ARRAY
49082: ST_TO_ADDR
// if Crawls ( un ) then
49083: LD_VAR 0 3
49087: PPUSH
49088: CALL_OW 318
49092: IFFALSE 49103
// ComWalk ( un ) ;
49094: LD_VAR 0 3
49098: PPUSH
49099: CALL_OW 138
// SetClass ( un , class_mortar ) ;
49103: LD_VAR 0 3
49107: PPUSH
49108: LD_INT 8
49110: PPUSH
49111: CALL_OW 336
// end ; 4 :
49115: GO 49208
49117: LD_INT 4
49119: DOUBLE
49120: EQUAL
49121: IFTRUE 49125
49123: GO 49186
49125: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
49126: LD_ADDR_VAR 0 2
49130: PUSH
49131: LD_INT 22
49133: PUSH
49134: LD_OWVAR 2
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 30
49145: PUSH
49146: LD_INT 29
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PPUSH
49157: CALL_OW 69
49161: ST_TO_ADDR
// if not tmp then
49162: LD_VAR 0 2
49166: NOT
49167: IFFALSE 49171
// exit ;
49169: GO 49208
// DestroyUnit ( tmp [ 1 ] ) ;
49171: LD_VAR 0 2
49175: PUSH
49176: LD_INT 1
49178: ARRAY
49179: PPUSH
49180: CALL_OW 65
// end ; 5 .. 7 :
49184: GO 49208
49186: LD_INT 5
49188: DOUBLE
49189: GREATEREQUAL
49190: IFFALSE 49198
49192: LD_INT 7
49194: DOUBLE
49195: LESSEQUAL
49196: IFTRUE 49200
49198: GO 49207
49200: POP
// StreamSibBomb ; end ;
49201: CALL 45458 0 0
49205: GO 49208
49207: POP
// end ;
49208: PPOPN 3
49210: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
49211: LD_EXP 28
49215: PUSH
49216: LD_EXP 78
49220: AND
49221: IFFALSE 49377
49223: GO 49225
49225: DISABLE
49226: LD_INT 0
49228: PPUSH
49229: PPUSH
49230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
49231: LD_ADDR_VAR 0 2
49235: PUSH
49236: LD_INT 81
49238: PUSH
49239: LD_OWVAR 2
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: LD_INT 21
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 21
49263: PUSH
49264: LD_INT 2
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: LIST
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PPUSH
49280: CALL_OW 69
49284: ST_TO_ADDR
// if not tmp then
49285: LD_VAR 0 2
49289: NOT
49290: IFFALSE 49294
// exit ;
49292: GO 49377
// p := 0 ;
49294: LD_ADDR_VAR 0 3
49298: PUSH
49299: LD_INT 0
49301: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49302: LD_INT 35
49304: PPUSH
49305: CALL_OW 67
// p := p + 1 ;
49309: LD_ADDR_VAR 0 3
49313: PUSH
49314: LD_VAR 0 3
49318: PUSH
49319: LD_INT 1
49321: PLUS
49322: ST_TO_ADDR
// for i in tmp do
49323: LD_ADDR_VAR 0 1
49327: PUSH
49328: LD_VAR 0 2
49332: PUSH
49333: FOR_IN
49334: IFFALSE 49365
// if GetLives ( i ) < 1000 then
49336: LD_VAR 0 1
49340: PPUSH
49341: CALL_OW 256
49345: PUSH
49346: LD_INT 1000
49348: LESS
49349: IFFALSE 49363
// SetLives ( i , 1000 ) ;
49351: LD_VAR 0 1
49355: PPUSH
49356: LD_INT 1000
49358: PPUSH
49359: CALL_OW 234
49363: GO 49333
49365: POP
49366: POP
// until p > 20 ;
49367: LD_VAR 0 3
49371: PUSH
49372: LD_INT 20
49374: GREATER
49375: IFFALSE 49302
// end ;
49377: PPOPN 3
49379: END
// every 0 0$1 trigger StreamModeActive and sTime do
49380: LD_EXP 28
49384: PUSH
49385: LD_EXP 79
49389: AND
49390: IFFALSE 49425
49392: GO 49394
49394: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
49395: LD_INT 28
49397: PPUSH
49398: LD_OWVAR 2
49402: PPUSH
49403: LD_INT 2
49405: PPUSH
49406: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
49410: LD_INT 30
49412: PPUSH
49413: LD_OWVAR 2
49417: PPUSH
49418: LD_INT 2
49420: PPUSH
49421: CALL_OW 322
// end ;
49425: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
49426: LD_EXP 28
49430: PUSH
49431: LD_EXP 80
49435: AND
49436: IFFALSE 49557
49438: GO 49440
49440: DISABLE
49441: LD_INT 0
49443: PPUSH
49444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
49445: LD_ADDR_VAR 0 2
49449: PUSH
49450: LD_INT 22
49452: PUSH
49453: LD_OWVAR 2
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 21
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 3
49474: PUSH
49475: LD_INT 23
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: LIST
49493: PPUSH
49494: CALL_OW 69
49498: ST_TO_ADDR
// if not tmp then
49499: LD_VAR 0 2
49503: NOT
49504: IFFALSE 49508
// exit ;
49506: GO 49557
// for i in tmp do
49508: LD_ADDR_VAR 0 1
49512: PUSH
49513: LD_VAR 0 2
49517: PUSH
49518: FOR_IN
49519: IFFALSE 49555
// begin if Crawls ( i ) then
49521: LD_VAR 0 1
49525: PPUSH
49526: CALL_OW 318
49530: IFFALSE 49541
// ComWalk ( i ) ;
49532: LD_VAR 0 1
49536: PPUSH
49537: CALL_OW 138
// SetClass ( i , 2 ) ;
49541: LD_VAR 0 1
49545: PPUSH
49546: LD_INT 2
49548: PPUSH
49549: CALL_OW 336
// end ;
49553: GO 49518
49555: POP
49556: POP
// end ;
49557: PPOPN 2
49559: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
49560: LD_EXP 28
49564: PUSH
49565: LD_EXP 81
49569: AND
49570: IFFALSE 49851
49572: GO 49574
49574: DISABLE
49575: LD_INT 0
49577: PPUSH
49578: PPUSH
49579: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
49580: LD_OWVAR 2
49584: PPUSH
49585: LD_INT 9
49587: PPUSH
49588: LD_INT 1
49590: PPUSH
49591: LD_INT 1
49593: PPUSH
49594: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
49598: LD_INT 9
49600: PPUSH
49601: LD_OWVAR 2
49605: PPUSH
49606: CALL_OW 343
// uc_side := 9 ;
49610: LD_ADDR_OWVAR 20
49614: PUSH
49615: LD_INT 9
49617: ST_TO_ADDR
// uc_nation := 2 ;
49618: LD_ADDR_OWVAR 21
49622: PUSH
49623: LD_INT 2
49625: ST_TO_ADDR
// hc_name := Dark Warrior ;
49626: LD_ADDR_OWVAR 26
49630: PUSH
49631: LD_STRING Dark Warrior
49633: ST_TO_ADDR
// hc_gallery :=  ;
49634: LD_ADDR_OWVAR 33
49638: PUSH
49639: LD_STRING 
49641: ST_TO_ADDR
// hc_noskilllimit := true ;
49642: LD_ADDR_OWVAR 76
49646: PUSH
49647: LD_INT 1
49649: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
49650: LD_ADDR_OWVAR 31
49654: PUSH
49655: LD_INT 30
49657: PUSH
49658: LD_INT 30
49660: PUSH
49661: LD_INT 30
49663: PUSH
49664: LD_INT 30
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: ST_TO_ADDR
// un := CreateHuman ;
49673: LD_ADDR_VAR 0 3
49677: PUSH
49678: CALL_OW 44
49682: ST_TO_ADDR
// hc_noskilllimit := false ;
49683: LD_ADDR_OWVAR 76
49687: PUSH
49688: LD_INT 0
49690: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
49691: LD_VAR 0 3
49695: PPUSH
49696: LD_INT 1
49698: PPUSH
49699: CALL_OW 51
// p := 0 ;
49703: LD_ADDR_VAR 0 2
49707: PUSH
49708: LD_INT 0
49710: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49711: LD_INT 35
49713: PPUSH
49714: CALL_OW 67
// p := p + 1 ;
49718: LD_ADDR_VAR 0 2
49722: PUSH
49723: LD_VAR 0 2
49727: PUSH
49728: LD_INT 1
49730: PLUS
49731: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
49732: LD_VAR 0 3
49736: PPUSH
49737: CALL_OW 256
49741: PUSH
49742: LD_INT 1000
49744: LESS
49745: IFFALSE 49759
// SetLives ( un , 1000 ) ;
49747: LD_VAR 0 3
49751: PPUSH
49752: LD_INT 1000
49754: PPUSH
49755: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
49759: LD_VAR 0 3
49763: PPUSH
49764: LD_INT 81
49766: PUSH
49767: LD_OWVAR 2
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 91
49778: PUSH
49779: LD_VAR 0 3
49783: PUSH
49784: LD_INT 30
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: LIST
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PPUSH
49796: CALL_OW 69
49800: PPUSH
49801: LD_VAR 0 3
49805: PPUSH
49806: CALL_OW 74
49810: PPUSH
49811: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
49815: LD_VAR 0 2
49819: PUSH
49820: LD_INT 60
49822: GREATER
49823: PUSH
49824: LD_VAR 0 3
49828: PPUSH
49829: CALL_OW 301
49833: OR
49834: IFFALSE 49711
// if un then
49836: LD_VAR 0 3
49840: IFFALSE 49851
// RemoveUnit ( un ) ;
49842: LD_VAR 0 3
49846: PPUSH
49847: CALL_OW 64
// end ;
49851: PPOPN 3
49853: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
49854: LD_INT 0
49856: PPUSH
// case cmd of 301 :
49857: LD_VAR 0 1
49861: PUSH
49862: LD_INT 301
49864: DOUBLE
49865: EQUAL
49866: IFTRUE 49870
49868: GO 49902
49870: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
49871: LD_VAR 0 6
49875: PPUSH
49876: LD_VAR 0 7
49880: PPUSH
49881: LD_VAR 0 8
49885: PPUSH
49886: LD_VAR 0 4
49890: PPUSH
49891: LD_VAR 0 5
49895: PPUSH
49896: CALL 51103 0 5
49900: GO 50023
49902: LD_INT 302
49904: DOUBLE
49905: EQUAL
49906: IFTRUE 49910
49908: GO 49947
49910: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
49911: LD_VAR 0 6
49915: PPUSH
49916: LD_VAR 0 7
49920: PPUSH
49921: LD_VAR 0 8
49925: PPUSH
49926: LD_VAR 0 9
49930: PPUSH
49931: LD_VAR 0 4
49935: PPUSH
49936: LD_VAR 0 5
49940: PPUSH
49941: CALL 51194 0 6
49945: GO 50023
49947: LD_INT 303
49949: DOUBLE
49950: EQUAL
49951: IFTRUE 49955
49953: GO 49992
49955: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
49956: LD_VAR 0 6
49960: PPUSH
49961: LD_VAR 0 7
49965: PPUSH
49966: LD_VAR 0 8
49970: PPUSH
49971: LD_VAR 0 9
49975: PPUSH
49976: LD_VAR 0 4
49980: PPUSH
49981: LD_VAR 0 5
49985: PPUSH
49986: CALL 50028 0 6
49990: GO 50023
49992: LD_INT 304
49994: DOUBLE
49995: EQUAL
49996: IFTRUE 50000
49998: GO 50022
50000: POP
// hHackTeleport ( unit , x , y ) ; end ;
50001: LD_VAR 0 2
50005: PPUSH
50006: LD_VAR 0 4
50010: PPUSH
50011: LD_VAR 0 5
50015: PPUSH
50016: CALL 51787 0 3
50020: GO 50023
50022: POP
// end ;
50023: LD_VAR 0 12
50027: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
50028: LD_INT 0
50030: PPUSH
50031: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
50032: LD_VAR 0 1
50036: PUSH
50037: LD_INT 1
50039: LESS
50040: PUSH
50041: LD_VAR 0 1
50045: PUSH
50046: LD_INT 3
50048: GREATER
50049: OR
50050: PUSH
50051: LD_VAR 0 5
50055: PPUSH
50056: LD_VAR 0 6
50060: PPUSH
50061: CALL_OW 428
50065: OR
50066: IFFALSE 50070
// exit ;
50068: GO 50790
// uc_side := your_side ;
50070: LD_ADDR_OWVAR 20
50074: PUSH
50075: LD_OWVAR 2
50079: ST_TO_ADDR
// uc_nation := nation ;
50080: LD_ADDR_OWVAR 21
50084: PUSH
50085: LD_VAR 0 1
50089: ST_TO_ADDR
// bc_level = 1 ;
50090: LD_ADDR_OWVAR 43
50094: PUSH
50095: LD_INT 1
50097: ST_TO_ADDR
// case btype of 1 :
50098: LD_VAR 0 2
50102: PUSH
50103: LD_INT 1
50105: DOUBLE
50106: EQUAL
50107: IFTRUE 50111
50109: GO 50122
50111: POP
// bc_type := b_depot ; 2 :
50112: LD_ADDR_OWVAR 42
50116: PUSH
50117: LD_INT 0
50119: ST_TO_ADDR
50120: GO 50734
50122: LD_INT 2
50124: DOUBLE
50125: EQUAL
50126: IFTRUE 50130
50128: GO 50141
50130: POP
// bc_type := b_warehouse ; 3 :
50131: LD_ADDR_OWVAR 42
50135: PUSH
50136: LD_INT 1
50138: ST_TO_ADDR
50139: GO 50734
50141: LD_INT 3
50143: DOUBLE
50144: EQUAL
50145: IFTRUE 50149
50147: GO 50160
50149: POP
// bc_type := b_lab ; 4 .. 9 :
50150: LD_ADDR_OWVAR 42
50154: PUSH
50155: LD_INT 6
50157: ST_TO_ADDR
50158: GO 50734
50160: LD_INT 4
50162: DOUBLE
50163: GREATEREQUAL
50164: IFFALSE 50172
50166: LD_INT 9
50168: DOUBLE
50169: LESSEQUAL
50170: IFTRUE 50174
50172: GO 50226
50174: POP
// begin bc_type := b_lab_half ;
50175: LD_ADDR_OWVAR 42
50179: PUSH
50180: LD_INT 7
50182: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
50183: LD_ADDR_OWVAR 44
50187: PUSH
50188: LD_INT 10
50190: PUSH
50191: LD_INT 11
50193: PUSH
50194: LD_INT 12
50196: PUSH
50197: LD_INT 15
50199: PUSH
50200: LD_INT 14
50202: PUSH
50203: LD_INT 13
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: PUSH
50214: LD_VAR 0 2
50218: PUSH
50219: LD_INT 3
50221: MINUS
50222: ARRAY
50223: ST_TO_ADDR
// end ; 10 .. 13 :
50224: GO 50734
50226: LD_INT 10
50228: DOUBLE
50229: GREATEREQUAL
50230: IFFALSE 50238
50232: LD_INT 13
50234: DOUBLE
50235: LESSEQUAL
50236: IFTRUE 50240
50238: GO 50317
50240: POP
// begin bc_type := b_lab_full ;
50241: LD_ADDR_OWVAR 42
50245: PUSH
50246: LD_INT 8
50248: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
50249: LD_ADDR_OWVAR 44
50253: PUSH
50254: LD_INT 10
50256: PUSH
50257: LD_INT 12
50259: PUSH
50260: LD_INT 14
50262: PUSH
50263: LD_INT 13
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: PUSH
50272: LD_VAR 0 2
50276: PUSH
50277: LD_INT 9
50279: MINUS
50280: ARRAY
50281: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
50282: LD_ADDR_OWVAR 45
50286: PUSH
50287: LD_INT 11
50289: PUSH
50290: LD_INT 15
50292: PUSH
50293: LD_INT 12
50295: PUSH
50296: LD_INT 15
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: PUSH
50305: LD_VAR 0 2
50309: PUSH
50310: LD_INT 9
50312: MINUS
50313: ARRAY
50314: ST_TO_ADDR
// end ; 14 :
50315: GO 50734
50317: LD_INT 14
50319: DOUBLE
50320: EQUAL
50321: IFTRUE 50325
50323: GO 50336
50325: POP
// bc_type := b_workshop ; 15 :
50326: LD_ADDR_OWVAR 42
50330: PUSH
50331: LD_INT 2
50333: ST_TO_ADDR
50334: GO 50734
50336: LD_INT 15
50338: DOUBLE
50339: EQUAL
50340: IFTRUE 50344
50342: GO 50355
50344: POP
// bc_type := b_factory ; 16 :
50345: LD_ADDR_OWVAR 42
50349: PUSH
50350: LD_INT 3
50352: ST_TO_ADDR
50353: GO 50734
50355: LD_INT 16
50357: DOUBLE
50358: EQUAL
50359: IFTRUE 50363
50361: GO 50374
50363: POP
// bc_type := b_ext_gun ; 17 :
50364: LD_ADDR_OWVAR 42
50368: PUSH
50369: LD_INT 17
50371: ST_TO_ADDR
50372: GO 50734
50374: LD_INT 17
50376: DOUBLE
50377: EQUAL
50378: IFTRUE 50382
50380: GO 50410
50382: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
50383: LD_ADDR_OWVAR 42
50387: PUSH
50388: LD_INT 19
50390: PUSH
50391: LD_INT 23
50393: PUSH
50394: LD_INT 19
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: LIST
50401: PUSH
50402: LD_VAR 0 1
50406: ARRAY
50407: ST_TO_ADDR
50408: GO 50734
50410: LD_INT 18
50412: DOUBLE
50413: EQUAL
50414: IFTRUE 50418
50416: GO 50429
50418: POP
// bc_type := b_ext_radar ; 19 :
50419: LD_ADDR_OWVAR 42
50423: PUSH
50424: LD_INT 20
50426: ST_TO_ADDR
50427: GO 50734
50429: LD_INT 19
50431: DOUBLE
50432: EQUAL
50433: IFTRUE 50437
50435: GO 50448
50437: POP
// bc_type := b_ext_radio ; 20 :
50438: LD_ADDR_OWVAR 42
50442: PUSH
50443: LD_INT 22
50445: ST_TO_ADDR
50446: GO 50734
50448: LD_INT 20
50450: DOUBLE
50451: EQUAL
50452: IFTRUE 50456
50454: GO 50467
50456: POP
// bc_type := b_ext_siberium ; 21 :
50457: LD_ADDR_OWVAR 42
50461: PUSH
50462: LD_INT 21
50464: ST_TO_ADDR
50465: GO 50734
50467: LD_INT 21
50469: DOUBLE
50470: EQUAL
50471: IFTRUE 50475
50473: GO 50486
50475: POP
// bc_type := b_ext_computer ; 22 :
50476: LD_ADDR_OWVAR 42
50480: PUSH
50481: LD_INT 24
50483: ST_TO_ADDR
50484: GO 50734
50486: LD_INT 22
50488: DOUBLE
50489: EQUAL
50490: IFTRUE 50494
50492: GO 50505
50494: POP
// bc_type := b_ext_track ; 23 :
50495: LD_ADDR_OWVAR 42
50499: PUSH
50500: LD_INT 16
50502: ST_TO_ADDR
50503: GO 50734
50505: LD_INT 23
50507: DOUBLE
50508: EQUAL
50509: IFTRUE 50513
50511: GO 50524
50513: POP
// bc_type := b_ext_laser ; 24 :
50514: LD_ADDR_OWVAR 42
50518: PUSH
50519: LD_INT 25
50521: ST_TO_ADDR
50522: GO 50734
50524: LD_INT 24
50526: DOUBLE
50527: EQUAL
50528: IFTRUE 50532
50530: GO 50543
50532: POP
// bc_type := b_control_tower ; 25 :
50533: LD_ADDR_OWVAR 42
50537: PUSH
50538: LD_INT 36
50540: ST_TO_ADDR
50541: GO 50734
50543: LD_INT 25
50545: DOUBLE
50546: EQUAL
50547: IFTRUE 50551
50549: GO 50562
50551: POP
// bc_type := b_breastwork ; 26 :
50552: LD_ADDR_OWVAR 42
50556: PUSH
50557: LD_INT 31
50559: ST_TO_ADDR
50560: GO 50734
50562: LD_INT 26
50564: DOUBLE
50565: EQUAL
50566: IFTRUE 50570
50568: GO 50581
50570: POP
// bc_type := b_bunker ; 27 :
50571: LD_ADDR_OWVAR 42
50575: PUSH
50576: LD_INT 32
50578: ST_TO_ADDR
50579: GO 50734
50581: LD_INT 27
50583: DOUBLE
50584: EQUAL
50585: IFTRUE 50589
50587: GO 50600
50589: POP
// bc_type := b_turret ; 28 :
50590: LD_ADDR_OWVAR 42
50594: PUSH
50595: LD_INT 33
50597: ST_TO_ADDR
50598: GO 50734
50600: LD_INT 28
50602: DOUBLE
50603: EQUAL
50604: IFTRUE 50608
50606: GO 50619
50608: POP
// bc_type := b_armoury ; 29 :
50609: LD_ADDR_OWVAR 42
50613: PUSH
50614: LD_INT 4
50616: ST_TO_ADDR
50617: GO 50734
50619: LD_INT 29
50621: DOUBLE
50622: EQUAL
50623: IFTRUE 50627
50625: GO 50638
50627: POP
// bc_type := b_barracks ; 30 :
50628: LD_ADDR_OWVAR 42
50632: PUSH
50633: LD_INT 5
50635: ST_TO_ADDR
50636: GO 50734
50638: LD_INT 30
50640: DOUBLE
50641: EQUAL
50642: IFTRUE 50646
50644: GO 50657
50646: POP
// bc_type := b_solar_power ; 31 :
50647: LD_ADDR_OWVAR 42
50651: PUSH
50652: LD_INT 27
50654: ST_TO_ADDR
50655: GO 50734
50657: LD_INT 31
50659: DOUBLE
50660: EQUAL
50661: IFTRUE 50665
50663: GO 50676
50665: POP
// bc_type := b_oil_power ; 32 :
50666: LD_ADDR_OWVAR 42
50670: PUSH
50671: LD_INT 26
50673: ST_TO_ADDR
50674: GO 50734
50676: LD_INT 32
50678: DOUBLE
50679: EQUAL
50680: IFTRUE 50684
50682: GO 50695
50684: POP
// bc_type := b_siberite_power ; 33 :
50685: LD_ADDR_OWVAR 42
50689: PUSH
50690: LD_INT 28
50692: ST_TO_ADDR
50693: GO 50734
50695: LD_INT 33
50697: DOUBLE
50698: EQUAL
50699: IFTRUE 50703
50701: GO 50714
50703: POP
// bc_type := b_oil_mine ; 34 :
50704: LD_ADDR_OWVAR 42
50708: PUSH
50709: LD_INT 29
50711: ST_TO_ADDR
50712: GO 50734
50714: LD_INT 34
50716: DOUBLE
50717: EQUAL
50718: IFTRUE 50722
50720: GO 50733
50722: POP
// bc_type := b_siberite_mine ; end ;
50723: LD_ADDR_OWVAR 42
50727: PUSH
50728: LD_INT 30
50730: ST_TO_ADDR
50731: GO 50734
50733: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
50734: LD_ADDR_VAR 0 8
50738: PUSH
50739: LD_VAR 0 5
50743: PPUSH
50744: LD_VAR 0 6
50748: PPUSH
50749: LD_VAR 0 3
50753: PPUSH
50754: CALL_OW 47
50758: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
50759: LD_OWVAR 42
50763: PUSH
50764: LD_INT 32
50766: PUSH
50767: LD_INT 33
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: IN
50774: IFFALSE 50790
// PlaceWeaponTurret ( b , weapon ) ;
50776: LD_VAR 0 8
50780: PPUSH
50781: LD_VAR 0 4
50785: PPUSH
50786: CALL_OW 431
// end ;
50790: LD_VAR 0 7
50794: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
50795: LD_INT 0
50797: PPUSH
50798: PPUSH
50799: PPUSH
50800: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50801: LD_ADDR_VAR 0 4
50805: PUSH
50806: LD_INT 22
50808: PUSH
50809: LD_OWVAR 2
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: LD_INT 30
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 30
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: LIST
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PPUSH
50850: CALL_OW 69
50854: ST_TO_ADDR
// if not tmp then
50855: LD_VAR 0 4
50859: NOT
50860: IFFALSE 50864
// exit ;
50862: GO 50923
// for i in tmp do
50864: LD_ADDR_VAR 0 2
50868: PUSH
50869: LD_VAR 0 4
50873: PUSH
50874: FOR_IN
50875: IFFALSE 50921
// for j = 1 to 3 do
50877: LD_ADDR_VAR 0 3
50881: PUSH
50882: DOUBLE
50883: LD_INT 1
50885: DEC
50886: ST_TO_ADDR
50887: LD_INT 3
50889: PUSH
50890: FOR_TO
50891: IFFALSE 50917
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
50893: LD_VAR 0 2
50897: PPUSH
50898: CALL_OW 274
50902: PPUSH
50903: LD_VAR 0 3
50907: PPUSH
50908: LD_INT 99999
50910: PPUSH
50911: CALL_OW 277
50915: GO 50890
50917: POP
50918: POP
50919: GO 50874
50921: POP
50922: POP
// end ;
50923: LD_VAR 0 1
50927: RET
// export function hHackSetLevel10 ; var i , j ; begin
50928: LD_INT 0
50930: PPUSH
50931: PPUSH
50932: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
50933: LD_ADDR_VAR 0 2
50937: PUSH
50938: LD_INT 21
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PPUSH
50948: CALL_OW 69
50952: PUSH
50953: FOR_IN
50954: IFFALSE 51006
// if IsSelected ( i ) then
50956: LD_VAR 0 2
50960: PPUSH
50961: CALL_OW 306
50965: IFFALSE 51004
// begin for j := 1 to 4 do
50967: LD_ADDR_VAR 0 3
50971: PUSH
50972: DOUBLE
50973: LD_INT 1
50975: DEC
50976: ST_TO_ADDR
50977: LD_INT 4
50979: PUSH
50980: FOR_TO
50981: IFFALSE 51002
// SetSkill ( i , j , 10 ) ;
50983: LD_VAR 0 2
50987: PPUSH
50988: LD_VAR 0 3
50992: PPUSH
50993: LD_INT 10
50995: PPUSH
50996: CALL_OW 237
51000: GO 50980
51002: POP
51003: POP
// end ;
51004: GO 50953
51006: POP
51007: POP
// end ;
51008: LD_VAR 0 1
51012: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
51013: LD_INT 0
51015: PPUSH
51016: PPUSH
51017: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
51018: LD_ADDR_VAR 0 2
51022: PUSH
51023: LD_INT 22
51025: PUSH
51026: LD_OWVAR 2
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 21
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PPUSH
51049: CALL_OW 69
51053: PUSH
51054: FOR_IN
51055: IFFALSE 51096
// begin for j := 1 to 4 do
51057: LD_ADDR_VAR 0 3
51061: PUSH
51062: DOUBLE
51063: LD_INT 1
51065: DEC
51066: ST_TO_ADDR
51067: LD_INT 4
51069: PUSH
51070: FOR_TO
51071: IFFALSE 51092
// SetSkill ( i , j , 10 ) ;
51073: LD_VAR 0 2
51077: PPUSH
51078: LD_VAR 0 3
51082: PPUSH
51083: LD_INT 10
51085: PPUSH
51086: CALL_OW 237
51090: GO 51070
51092: POP
51093: POP
// end ;
51094: GO 51054
51096: POP
51097: POP
// end ;
51098: LD_VAR 0 1
51102: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
51103: LD_INT 0
51105: PPUSH
// uc_side := your_side ;
51106: LD_ADDR_OWVAR 20
51110: PUSH
51111: LD_OWVAR 2
51115: ST_TO_ADDR
// uc_nation := nation ;
51116: LD_ADDR_OWVAR 21
51120: PUSH
51121: LD_VAR 0 1
51125: ST_TO_ADDR
// InitHc ;
51126: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
51130: LD_INT 0
51132: PPUSH
51133: LD_VAR 0 2
51137: PPUSH
51138: LD_VAR 0 3
51142: PPUSH
51143: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
51147: LD_VAR 0 4
51151: PPUSH
51152: LD_VAR 0 5
51156: PPUSH
51157: CALL_OW 428
51161: PUSH
51162: LD_INT 0
51164: EQUAL
51165: IFFALSE 51189
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
51167: CALL_OW 44
51171: PPUSH
51172: LD_VAR 0 4
51176: PPUSH
51177: LD_VAR 0 5
51181: PPUSH
51182: LD_INT 1
51184: PPUSH
51185: CALL_OW 48
// end ;
51189: LD_VAR 0 6
51193: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
51194: LD_INT 0
51196: PPUSH
51197: PPUSH
// uc_side := your_side ;
51198: LD_ADDR_OWVAR 20
51202: PUSH
51203: LD_OWVAR 2
51207: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
51208: LD_VAR 0 1
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 3
51221: PUSH
51222: LD_INT 4
51224: PUSH
51225: LD_INT 5
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: IN
51235: IFFALSE 51247
// uc_nation := nation_american else
51237: LD_ADDR_OWVAR 21
51241: PUSH
51242: LD_INT 1
51244: ST_TO_ADDR
51245: GO 51290
// if chassis in [ 11 , 12 , 13 , 14 ] then
51247: LD_VAR 0 1
51251: PUSH
51252: LD_INT 11
51254: PUSH
51255: LD_INT 12
51257: PUSH
51258: LD_INT 13
51260: PUSH
51261: LD_INT 14
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: IN
51270: IFFALSE 51282
// uc_nation := nation_arabian else
51272: LD_ADDR_OWVAR 21
51276: PUSH
51277: LD_INT 2
51279: ST_TO_ADDR
51280: GO 51290
// uc_nation := nation_russian ;
51282: LD_ADDR_OWVAR 21
51286: PUSH
51287: LD_INT 3
51289: ST_TO_ADDR
// vc_chassis := chassis ;
51290: LD_ADDR_OWVAR 37
51294: PUSH
51295: LD_VAR 0 1
51299: ST_TO_ADDR
// vc_engine := engine ;
51300: LD_ADDR_OWVAR 39
51304: PUSH
51305: LD_VAR 0 2
51309: ST_TO_ADDR
// vc_control := control ;
51310: LD_ADDR_OWVAR 38
51314: PUSH
51315: LD_VAR 0 3
51319: ST_TO_ADDR
// vc_weapon := weapon ;
51320: LD_ADDR_OWVAR 40
51324: PUSH
51325: LD_VAR 0 4
51329: ST_TO_ADDR
// un := CreateVehicle ;
51330: LD_ADDR_VAR 0 8
51334: PUSH
51335: CALL_OW 45
51339: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
51340: LD_VAR 0 8
51344: PPUSH
51345: LD_INT 0
51347: PPUSH
51348: LD_INT 5
51350: PPUSH
51351: CALL_OW 12
51355: PPUSH
51356: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
51360: LD_VAR 0 8
51364: PPUSH
51365: LD_VAR 0 5
51369: PPUSH
51370: LD_VAR 0 6
51374: PPUSH
51375: LD_INT 1
51377: PPUSH
51378: CALL_OW 48
// end ;
51382: LD_VAR 0 7
51386: RET
// export hInvincible ; every 1 do
51387: GO 51389
51389: DISABLE
// hInvincible := [ ] ;
51390: LD_ADDR_EXP 82
51394: PUSH
51395: EMPTY
51396: ST_TO_ADDR
51397: END
// every 10 do var i ;
51398: GO 51400
51400: DISABLE
51401: LD_INT 0
51403: PPUSH
// begin enable ;
51404: ENABLE
// if not hInvincible then
51405: LD_EXP 82
51409: NOT
51410: IFFALSE 51414
// exit ;
51412: GO 51458
// for i in hInvincible do
51414: LD_ADDR_VAR 0 1
51418: PUSH
51419: LD_EXP 82
51423: PUSH
51424: FOR_IN
51425: IFFALSE 51456
// if GetLives ( i ) < 1000 then
51427: LD_VAR 0 1
51431: PPUSH
51432: CALL_OW 256
51436: PUSH
51437: LD_INT 1000
51439: LESS
51440: IFFALSE 51454
// SetLives ( i , 1000 ) ;
51442: LD_VAR 0 1
51446: PPUSH
51447: LD_INT 1000
51449: PPUSH
51450: CALL_OW 234
51454: GO 51424
51456: POP
51457: POP
// end ;
51458: PPOPN 1
51460: END
// export function hHackInvincible ; var i ; begin
51461: LD_INT 0
51463: PPUSH
51464: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
51465: LD_ADDR_VAR 0 2
51469: PUSH
51470: LD_INT 2
51472: PUSH
51473: LD_INT 21
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 21
51485: PUSH
51486: LD_INT 2
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: LIST
51497: PPUSH
51498: CALL_OW 69
51502: PUSH
51503: FOR_IN
51504: IFFALSE 51565
// if IsSelected ( i ) then
51506: LD_VAR 0 2
51510: PPUSH
51511: CALL_OW 306
51515: IFFALSE 51563
// begin if i in hInvincible then
51517: LD_VAR 0 2
51521: PUSH
51522: LD_EXP 82
51526: IN
51527: IFFALSE 51547
// hInvincible := hInvincible diff i else
51529: LD_ADDR_EXP 82
51533: PUSH
51534: LD_EXP 82
51538: PUSH
51539: LD_VAR 0 2
51543: DIFF
51544: ST_TO_ADDR
51545: GO 51563
// hInvincible := hInvincible union i ;
51547: LD_ADDR_EXP 82
51551: PUSH
51552: LD_EXP 82
51556: PUSH
51557: LD_VAR 0 2
51561: UNION
51562: ST_TO_ADDR
// end ;
51563: GO 51503
51565: POP
51566: POP
// end ;
51567: LD_VAR 0 1
51571: RET
// export function hHackInvisible ; var i , j ; begin
51572: LD_INT 0
51574: PPUSH
51575: PPUSH
51576: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
51577: LD_ADDR_VAR 0 2
51581: PUSH
51582: LD_INT 21
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PPUSH
51592: CALL_OW 69
51596: PUSH
51597: FOR_IN
51598: IFFALSE 51622
// if IsSelected ( i ) then
51600: LD_VAR 0 2
51604: PPUSH
51605: CALL_OW 306
51609: IFFALSE 51620
// ComForceInvisible ( i ) ;
51611: LD_VAR 0 2
51615: PPUSH
51616: CALL_OW 496
51620: GO 51597
51622: POP
51623: POP
// end ;
51624: LD_VAR 0 1
51628: RET
// export function hHackChangeYourSide ; begin
51629: LD_INT 0
51631: PPUSH
// if your_side = 8 then
51632: LD_OWVAR 2
51636: PUSH
51637: LD_INT 8
51639: EQUAL
51640: IFFALSE 51652
// your_side := 0 else
51642: LD_ADDR_OWVAR 2
51646: PUSH
51647: LD_INT 0
51649: ST_TO_ADDR
51650: GO 51666
// your_side := your_side + 1 ;
51652: LD_ADDR_OWVAR 2
51656: PUSH
51657: LD_OWVAR 2
51661: PUSH
51662: LD_INT 1
51664: PLUS
51665: ST_TO_ADDR
// end ;
51666: LD_VAR 0 1
51670: RET
// export function hHackChangeUnitSide ; var i , j ; begin
51671: LD_INT 0
51673: PPUSH
51674: PPUSH
51675: PPUSH
// for i in all_units do
51676: LD_ADDR_VAR 0 2
51680: PUSH
51681: LD_OWVAR 3
51685: PUSH
51686: FOR_IN
51687: IFFALSE 51765
// if IsSelected ( i ) then
51689: LD_VAR 0 2
51693: PPUSH
51694: CALL_OW 306
51698: IFFALSE 51763
// begin j := GetSide ( i ) ;
51700: LD_ADDR_VAR 0 3
51704: PUSH
51705: LD_VAR 0 2
51709: PPUSH
51710: CALL_OW 255
51714: ST_TO_ADDR
// if j = 8 then
51715: LD_VAR 0 3
51719: PUSH
51720: LD_INT 8
51722: EQUAL
51723: IFFALSE 51735
// j := 0 else
51725: LD_ADDR_VAR 0 3
51729: PUSH
51730: LD_INT 0
51732: ST_TO_ADDR
51733: GO 51749
// j := j + 1 ;
51735: LD_ADDR_VAR 0 3
51739: PUSH
51740: LD_VAR 0 3
51744: PUSH
51745: LD_INT 1
51747: PLUS
51748: ST_TO_ADDR
// SetSide ( i , j ) ;
51749: LD_VAR 0 2
51753: PPUSH
51754: LD_VAR 0 3
51758: PPUSH
51759: CALL_OW 235
// end ;
51763: GO 51686
51765: POP
51766: POP
// end ;
51767: LD_VAR 0 1
51771: RET
// export function hHackFog ; begin
51772: LD_INT 0
51774: PPUSH
// FogOff ( true ) ;
51775: LD_INT 1
51777: PPUSH
51778: CALL_OW 344
// end ;
51782: LD_VAR 0 1
51786: RET
// export function hHackTeleport ( unit , x , y ) ; begin
51787: LD_INT 0
51789: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
51790: LD_VAR 0 1
51794: PPUSH
51795: LD_VAR 0 2
51799: PPUSH
51800: LD_VAR 0 3
51804: PPUSH
51805: LD_INT 1
51807: PPUSH
51808: LD_INT 1
51810: PPUSH
51811: CALL_OW 483
// CenterOnXY ( x , y ) ;
51815: LD_VAR 0 2
51819: PPUSH
51820: LD_VAR 0 3
51824: PPUSH
51825: CALL_OW 84
// end ; end_of_file end_of_file
51829: LD_VAR 0 4
51833: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
51834: LD_INT 0
51836: PPUSH
51837: PPUSH
51838: PPUSH
51839: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
51840: LD_VAR 0 1
51844: PPUSH
51845: CALL_OW 264
51849: PUSH
51850: LD_EXP 7
51854: EQUAL
51855: IFFALSE 51927
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
51857: LD_INT 68
51859: PPUSH
51860: LD_VAR 0 1
51864: PPUSH
51865: CALL_OW 255
51869: PPUSH
51870: CALL_OW 321
51874: PUSH
51875: LD_INT 2
51877: EQUAL
51878: IFFALSE 51890
// eff := 70 else
51880: LD_ADDR_VAR 0 4
51884: PUSH
51885: LD_INT 70
51887: ST_TO_ADDR
51888: GO 51898
// eff := 30 ;
51890: LD_ADDR_VAR 0 4
51894: PUSH
51895: LD_INT 30
51897: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
51898: LD_VAR 0 1
51902: PPUSH
51903: CALL_OW 250
51907: PPUSH
51908: LD_VAR 0 1
51912: PPUSH
51913: CALL_OW 251
51917: PPUSH
51918: LD_VAR 0 4
51922: PPUSH
51923: CALL_OW 495
// end ; end ;
51927: LD_VAR 0 2
51931: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
51932: LD_INT 0
51934: PPUSH
// end ;
51935: LD_VAR 0 4
51939: RET
// export function SOS_Command ( cmd ) ; begin
51940: LD_INT 0
51942: PPUSH
// end ;
51943: LD_VAR 0 2
51947: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
51948: LD_INT 0
51950: PPUSH
// if cmd = 121 then
51951: LD_VAR 0 1
51955: PUSH
51956: LD_INT 121
51958: EQUAL
51959: IFFALSE 51961
// end ;
51961: LD_VAR 0 6
51965: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
51966: LD_INT 0
51968: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
51969: LD_VAR 0 1
51973: PUSH
51974: LD_INT 250
51976: EQUAL
51977: PUSH
51978: LD_VAR 0 2
51982: PPUSH
51983: CALL_OW 264
51987: PUSH
51988: LD_EXP 10
51992: EQUAL
51993: AND
51994: IFFALSE 52015
// MinerPlaceMine ( unit , x , y ) ;
51996: LD_VAR 0 2
52000: PPUSH
52001: LD_VAR 0 4
52005: PPUSH
52006: LD_VAR 0 5
52010: PPUSH
52011: CALL 54364 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
52015: LD_VAR 0 1
52019: PUSH
52020: LD_INT 251
52022: EQUAL
52023: PUSH
52024: LD_VAR 0 2
52028: PPUSH
52029: CALL_OW 264
52033: PUSH
52034: LD_EXP 10
52038: EQUAL
52039: AND
52040: IFFALSE 52061
// MinerDetonateMine ( unit , x , y ) ;
52042: LD_VAR 0 2
52046: PPUSH
52047: LD_VAR 0 4
52051: PPUSH
52052: LD_VAR 0 5
52056: PPUSH
52057: CALL 54641 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
52061: LD_VAR 0 1
52065: PUSH
52066: LD_INT 252
52068: EQUAL
52069: PUSH
52070: LD_VAR 0 2
52074: PPUSH
52075: CALL_OW 264
52079: PUSH
52080: LD_EXP 10
52084: EQUAL
52085: AND
52086: IFFALSE 52107
// MinerCreateMinefield ( unit , x , y ) ;
52088: LD_VAR 0 2
52092: PPUSH
52093: LD_VAR 0 4
52097: PPUSH
52098: LD_VAR 0 5
52102: PPUSH
52103: CALL 55058 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
52107: LD_VAR 0 1
52111: PUSH
52112: LD_INT 253
52114: EQUAL
52115: PUSH
52116: LD_VAR 0 2
52120: PPUSH
52121: CALL_OW 257
52125: PUSH
52126: LD_INT 5
52128: EQUAL
52129: AND
52130: IFFALSE 52151
// ComBinocular ( unit , x , y ) ;
52132: LD_VAR 0 2
52136: PPUSH
52137: LD_VAR 0 4
52141: PPUSH
52142: LD_VAR 0 5
52146: PPUSH
52147: CALL 55429 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
52151: LD_VAR 0 1
52155: PUSH
52156: LD_INT 254
52158: EQUAL
52159: PUSH
52160: LD_VAR 0 2
52164: PPUSH
52165: CALL_OW 264
52169: PUSH
52170: LD_EXP 5
52174: EQUAL
52175: AND
52176: PUSH
52177: LD_VAR 0 3
52181: PPUSH
52182: CALL_OW 263
52186: PUSH
52187: LD_INT 3
52189: EQUAL
52190: AND
52191: IFFALSE 52207
// HackDestroyVehicle ( unit , selectedUnit ) ;
52193: LD_VAR 0 2
52197: PPUSH
52198: LD_VAR 0 3
52202: PPUSH
52203: CALL 53724 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
52207: LD_VAR 0 1
52211: PUSH
52212: LD_INT 255
52214: EQUAL
52215: PUSH
52216: LD_VAR 0 2
52220: PPUSH
52221: CALL_OW 264
52225: PUSH
52226: LD_INT 14
52228: PUSH
52229: LD_INT 53
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: IN
52236: AND
52237: PUSH
52238: LD_VAR 0 4
52242: PPUSH
52243: LD_VAR 0 5
52247: PPUSH
52248: CALL_OW 488
52252: AND
52253: IFFALSE 52277
// CutTreeXYR ( unit , x , y , 12 ) ;
52255: LD_VAR 0 2
52259: PPUSH
52260: LD_VAR 0 4
52264: PPUSH
52265: LD_VAR 0 5
52269: PPUSH
52270: LD_INT 12
52272: PPUSH
52273: CALL 52290 0 4
// end ;
52277: LD_VAR 0 6
52281: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
52282: LD_INT 0
52284: PPUSH
// end ;
52285: LD_VAR 0 4
52289: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
52290: LD_INT 0
52292: PPUSH
52293: PPUSH
52294: PPUSH
52295: PPUSH
52296: PPUSH
52297: PPUSH
52298: PPUSH
52299: PPUSH
52300: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
52301: LD_VAR 0 1
52305: NOT
52306: PUSH
52307: LD_VAR 0 2
52311: PPUSH
52312: LD_VAR 0 3
52316: PPUSH
52317: CALL_OW 488
52321: NOT
52322: OR
52323: PUSH
52324: LD_VAR 0 4
52328: NOT
52329: OR
52330: IFFALSE 52334
// exit ;
52332: GO 52674
// list := [ ] ;
52334: LD_ADDR_VAR 0 13
52338: PUSH
52339: EMPTY
52340: ST_TO_ADDR
// if x - r < 0 then
52341: LD_VAR 0 2
52345: PUSH
52346: LD_VAR 0 4
52350: MINUS
52351: PUSH
52352: LD_INT 0
52354: LESS
52355: IFFALSE 52367
// min_x := 0 else
52357: LD_ADDR_VAR 0 7
52361: PUSH
52362: LD_INT 0
52364: ST_TO_ADDR
52365: GO 52383
// min_x := x - r ;
52367: LD_ADDR_VAR 0 7
52371: PUSH
52372: LD_VAR 0 2
52376: PUSH
52377: LD_VAR 0 4
52381: MINUS
52382: ST_TO_ADDR
// if y - r < 0 then
52383: LD_VAR 0 3
52387: PUSH
52388: LD_VAR 0 4
52392: MINUS
52393: PUSH
52394: LD_INT 0
52396: LESS
52397: IFFALSE 52409
// min_y := 0 else
52399: LD_ADDR_VAR 0 8
52403: PUSH
52404: LD_INT 0
52406: ST_TO_ADDR
52407: GO 52425
// min_y := y - r ;
52409: LD_ADDR_VAR 0 8
52413: PUSH
52414: LD_VAR 0 3
52418: PUSH
52419: LD_VAR 0 4
52423: MINUS
52424: ST_TO_ADDR
// max_x := x + r ;
52425: LD_ADDR_VAR 0 9
52429: PUSH
52430: LD_VAR 0 2
52434: PUSH
52435: LD_VAR 0 4
52439: PLUS
52440: ST_TO_ADDR
// max_y := y + r ;
52441: LD_ADDR_VAR 0 10
52445: PUSH
52446: LD_VAR 0 3
52450: PUSH
52451: LD_VAR 0 4
52455: PLUS
52456: ST_TO_ADDR
// for _x = min_x to max_x do
52457: LD_ADDR_VAR 0 11
52461: PUSH
52462: DOUBLE
52463: LD_VAR 0 7
52467: DEC
52468: ST_TO_ADDR
52469: LD_VAR 0 9
52473: PUSH
52474: FOR_TO
52475: IFFALSE 52592
// for _y = min_y to max_y do
52477: LD_ADDR_VAR 0 12
52481: PUSH
52482: DOUBLE
52483: LD_VAR 0 8
52487: DEC
52488: ST_TO_ADDR
52489: LD_VAR 0 10
52493: PUSH
52494: FOR_TO
52495: IFFALSE 52588
// begin if not ValidHex ( _x , _y ) then
52497: LD_VAR 0 11
52501: PPUSH
52502: LD_VAR 0 12
52506: PPUSH
52507: CALL_OW 488
52511: NOT
52512: IFFALSE 52516
// continue ;
52514: GO 52494
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
52516: LD_VAR 0 11
52520: PPUSH
52521: LD_VAR 0 12
52525: PPUSH
52526: CALL_OW 351
52530: PUSH
52531: LD_VAR 0 11
52535: PPUSH
52536: LD_VAR 0 12
52540: PPUSH
52541: CALL_OW 554
52545: AND
52546: IFFALSE 52586
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
52548: LD_ADDR_VAR 0 13
52552: PUSH
52553: LD_VAR 0 13
52557: PPUSH
52558: LD_VAR 0 13
52562: PUSH
52563: LD_INT 1
52565: PLUS
52566: PPUSH
52567: LD_VAR 0 11
52571: PUSH
52572: LD_VAR 0 12
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PPUSH
52581: CALL_OW 2
52585: ST_TO_ADDR
// end ;
52586: GO 52494
52588: POP
52589: POP
52590: GO 52474
52592: POP
52593: POP
// if not list then
52594: LD_VAR 0 13
52598: NOT
52599: IFFALSE 52603
// exit ;
52601: GO 52674
// for i in list do
52603: LD_ADDR_VAR 0 6
52607: PUSH
52608: LD_VAR 0 13
52612: PUSH
52613: FOR_IN
52614: IFFALSE 52672
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
52616: LD_VAR 0 1
52620: PPUSH
52621: LD_STRING M
52623: PUSH
52624: LD_VAR 0 6
52628: PUSH
52629: LD_INT 1
52631: ARRAY
52632: PUSH
52633: LD_VAR 0 6
52637: PUSH
52638: LD_INT 2
52640: ARRAY
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: PUSH
52663: EMPTY
52664: LIST
52665: PPUSH
52666: CALL_OW 447
52670: GO 52613
52672: POP
52673: POP
// end ;
52674: LD_VAR 0 5
52678: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
52679: LD_EXP 85
52683: NOT
52684: IFFALSE 52734
52686: GO 52688
52688: DISABLE
// begin initHack := true ;
52689: LD_ADDR_EXP 85
52693: PUSH
52694: LD_INT 1
52696: ST_TO_ADDR
// hackTanks := [ ] ;
52697: LD_ADDR_EXP 86
52701: PUSH
52702: EMPTY
52703: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
52704: LD_ADDR_EXP 87
52708: PUSH
52709: EMPTY
52710: ST_TO_ADDR
// hackLimit := 3 ;
52711: LD_ADDR_EXP 88
52715: PUSH
52716: LD_INT 3
52718: ST_TO_ADDR
// hackDist := 12 ;
52719: LD_ADDR_EXP 89
52723: PUSH
52724: LD_INT 12
52726: ST_TO_ADDR
// hackCounter := [ ] ;
52727: LD_ADDR_EXP 90
52731: PUSH
52732: EMPTY
52733: ST_TO_ADDR
// end ;
52734: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
52735: LD_EXP 85
52739: PUSH
52740: LD_INT 34
52742: PUSH
52743: LD_EXP 5
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PPUSH
52752: CALL_OW 69
52756: AND
52757: IFFALSE 53012
52759: GO 52761
52761: DISABLE
52762: LD_INT 0
52764: PPUSH
52765: PPUSH
// begin enable ;
52766: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
52767: LD_ADDR_VAR 0 1
52771: PUSH
52772: LD_INT 34
52774: PUSH
52775: LD_EXP 5
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PPUSH
52784: CALL_OW 69
52788: PUSH
52789: FOR_IN
52790: IFFALSE 53010
// begin if not i in hackTanks then
52792: LD_VAR 0 1
52796: PUSH
52797: LD_EXP 86
52801: IN
52802: NOT
52803: IFFALSE 52886
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
52805: LD_ADDR_EXP 86
52809: PUSH
52810: LD_EXP 86
52814: PPUSH
52815: LD_EXP 86
52819: PUSH
52820: LD_INT 1
52822: PLUS
52823: PPUSH
52824: LD_VAR 0 1
52828: PPUSH
52829: CALL_OW 1
52833: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
52834: LD_ADDR_EXP 87
52838: PUSH
52839: LD_EXP 87
52843: PPUSH
52844: LD_EXP 87
52848: PUSH
52849: LD_INT 1
52851: PLUS
52852: PPUSH
52853: EMPTY
52854: PPUSH
52855: CALL_OW 1
52859: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
52860: LD_ADDR_EXP 90
52864: PUSH
52865: LD_EXP 90
52869: PPUSH
52870: LD_EXP 90
52874: PUSH
52875: LD_INT 1
52877: PLUS
52878: PPUSH
52879: EMPTY
52880: PPUSH
52881: CALL_OW 1
52885: ST_TO_ADDR
// end ; if not IsOk ( i ) then
52886: LD_VAR 0 1
52890: PPUSH
52891: CALL_OW 302
52895: NOT
52896: IFFALSE 52909
// begin HackUnlinkAll ( i ) ;
52898: LD_VAR 0 1
52902: PPUSH
52903: CALL 53015 0 1
// continue ;
52907: GO 52789
// end ; HackCheckCapturedStatus ( i ) ;
52909: LD_VAR 0 1
52913: PPUSH
52914: CALL 53458 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
52918: LD_ADDR_VAR 0 2
52922: PUSH
52923: LD_INT 81
52925: PUSH
52926: LD_VAR 0 1
52930: PPUSH
52931: CALL_OW 255
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 33
52942: PUSH
52943: LD_INT 3
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 91
52952: PUSH
52953: LD_VAR 0 1
52957: PUSH
52958: LD_EXP 89
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 50
52970: PUSH
52971: EMPTY
52972: LIST
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: PPUSH
52980: CALL_OW 69
52984: ST_TO_ADDR
// if not tmp then
52985: LD_VAR 0 2
52989: NOT
52990: IFFALSE 52994
// continue ;
52992: GO 52789
// HackLink ( i , tmp ) ;
52994: LD_VAR 0 1
52998: PPUSH
52999: LD_VAR 0 2
53003: PPUSH
53004: CALL 53151 0 2
// end ;
53008: GO 52789
53010: POP
53011: POP
// end ;
53012: PPOPN 2
53014: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
53015: LD_INT 0
53017: PPUSH
53018: PPUSH
53019: PPUSH
// if not hack in hackTanks then
53020: LD_VAR 0 1
53024: PUSH
53025: LD_EXP 86
53029: IN
53030: NOT
53031: IFFALSE 53035
// exit ;
53033: GO 53146
// index := GetElementIndex ( hackTanks , hack ) ;
53035: LD_ADDR_VAR 0 4
53039: PUSH
53040: LD_EXP 86
53044: PPUSH
53045: LD_VAR 0 1
53049: PPUSH
53050: CALL 5005 0 2
53054: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
53055: LD_EXP 87
53059: PUSH
53060: LD_VAR 0 4
53064: ARRAY
53065: IFFALSE 53146
// begin for i in hackTanksCaptured [ index ] do
53067: LD_ADDR_VAR 0 3
53071: PUSH
53072: LD_EXP 87
53076: PUSH
53077: LD_VAR 0 4
53081: ARRAY
53082: PUSH
53083: FOR_IN
53084: IFFALSE 53110
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
53086: LD_VAR 0 3
53090: PUSH
53091: LD_INT 1
53093: ARRAY
53094: PPUSH
53095: LD_VAR 0 3
53099: PUSH
53100: LD_INT 2
53102: ARRAY
53103: PPUSH
53104: CALL_OW 235
53108: GO 53083
53110: POP
53111: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
53112: LD_ADDR_EXP 87
53116: PUSH
53117: LD_EXP 87
53121: PPUSH
53122: LD_VAR 0 4
53126: PPUSH
53127: EMPTY
53128: PPUSH
53129: CALL_OW 1
53133: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
53134: LD_VAR 0 1
53138: PPUSH
53139: LD_INT 0
53141: PPUSH
53142: CALL_OW 505
// end ; end ;
53146: LD_VAR 0 2
53150: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
53151: LD_INT 0
53153: PPUSH
53154: PPUSH
53155: PPUSH
// if not hack in hackTanks or not vehicles then
53156: LD_VAR 0 1
53160: PUSH
53161: LD_EXP 86
53165: IN
53166: NOT
53167: PUSH
53168: LD_VAR 0 2
53172: NOT
53173: OR
53174: IFFALSE 53178
// exit ;
53176: GO 53453
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
53178: LD_ADDR_VAR 0 2
53182: PUSH
53183: LD_VAR 0 1
53187: PPUSH
53188: LD_VAR 0 2
53192: PPUSH
53193: LD_INT 1
53195: PPUSH
53196: LD_INT 1
53198: PPUSH
53199: CALL 5655 0 4
53203: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
53204: LD_ADDR_VAR 0 5
53208: PUSH
53209: LD_EXP 86
53213: PPUSH
53214: LD_VAR 0 1
53218: PPUSH
53219: CALL 5005 0 2
53223: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
53224: LD_EXP 87
53228: PUSH
53229: LD_VAR 0 5
53233: ARRAY
53234: PUSH
53235: LD_EXP 88
53239: LESS
53240: IFFALSE 53429
// begin for i := 1 to vehicles do
53242: LD_ADDR_VAR 0 4
53246: PUSH
53247: DOUBLE
53248: LD_INT 1
53250: DEC
53251: ST_TO_ADDR
53252: LD_VAR 0 2
53256: PUSH
53257: FOR_TO
53258: IFFALSE 53427
// begin if hackTanksCaptured [ index ] = hackLimit then
53260: LD_EXP 87
53264: PUSH
53265: LD_VAR 0 5
53269: ARRAY
53270: PUSH
53271: LD_EXP 88
53275: EQUAL
53276: IFFALSE 53280
// break ;
53278: GO 53427
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
53280: LD_ADDR_EXP 90
53284: PUSH
53285: LD_EXP 90
53289: PPUSH
53290: LD_VAR 0 5
53294: PPUSH
53295: LD_EXP 90
53299: PUSH
53300: LD_VAR 0 5
53304: ARRAY
53305: PUSH
53306: LD_INT 1
53308: PLUS
53309: PPUSH
53310: CALL_OW 1
53314: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
53315: LD_ADDR_EXP 87
53319: PUSH
53320: LD_EXP 87
53324: PPUSH
53325: LD_VAR 0 5
53329: PUSH
53330: LD_EXP 87
53334: PUSH
53335: LD_VAR 0 5
53339: ARRAY
53340: PUSH
53341: LD_INT 1
53343: PLUS
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PPUSH
53349: LD_VAR 0 2
53353: PUSH
53354: LD_VAR 0 4
53358: ARRAY
53359: PUSH
53360: LD_VAR 0 2
53364: PUSH
53365: LD_VAR 0 4
53369: ARRAY
53370: PPUSH
53371: CALL_OW 255
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PPUSH
53380: CALL 5220 0 3
53384: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
53385: LD_VAR 0 2
53389: PUSH
53390: LD_VAR 0 4
53394: ARRAY
53395: PPUSH
53396: LD_VAR 0 1
53400: PPUSH
53401: CALL_OW 255
53405: PPUSH
53406: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
53410: LD_VAR 0 2
53414: PUSH
53415: LD_VAR 0 4
53419: ARRAY
53420: PPUSH
53421: CALL_OW 141
// end ;
53425: GO 53257
53427: POP
53428: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
53429: LD_VAR 0 1
53433: PPUSH
53434: LD_EXP 87
53438: PUSH
53439: LD_VAR 0 5
53443: ARRAY
53444: PUSH
53445: LD_INT 0
53447: PLUS
53448: PPUSH
53449: CALL_OW 505
// end ;
53453: LD_VAR 0 3
53457: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
53458: LD_INT 0
53460: PPUSH
53461: PPUSH
53462: PPUSH
53463: PPUSH
// if not hack in hackTanks then
53464: LD_VAR 0 1
53468: PUSH
53469: LD_EXP 86
53473: IN
53474: NOT
53475: IFFALSE 53479
// exit ;
53477: GO 53719
// index := GetElementIndex ( hackTanks , hack ) ;
53479: LD_ADDR_VAR 0 4
53483: PUSH
53484: LD_EXP 86
53488: PPUSH
53489: LD_VAR 0 1
53493: PPUSH
53494: CALL 5005 0 2
53498: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
53499: LD_ADDR_VAR 0 3
53503: PUSH
53504: DOUBLE
53505: LD_EXP 87
53509: PUSH
53510: LD_VAR 0 4
53514: ARRAY
53515: INC
53516: ST_TO_ADDR
53517: LD_INT 1
53519: PUSH
53520: FOR_DOWNTO
53521: IFFALSE 53693
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
53523: LD_ADDR_VAR 0 5
53527: PUSH
53528: LD_EXP 87
53532: PUSH
53533: LD_VAR 0 4
53537: ARRAY
53538: PUSH
53539: LD_VAR 0 3
53543: ARRAY
53544: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
53545: LD_VAR 0 5
53549: PUSH
53550: LD_INT 1
53552: ARRAY
53553: PPUSH
53554: CALL_OW 302
53558: NOT
53559: PUSH
53560: LD_VAR 0 5
53564: PUSH
53565: LD_INT 1
53567: ARRAY
53568: PPUSH
53569: CALL_OW 255
53573: PUSH
53574: LD_VAR 0 1
53578: PPUSH
53579: CALL_OW 255
53583: NONEQUAL
53584: OR
53585: IFFALSE 53691
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
53587: LD_VAR 0 5
53591: PUSH
53592: LD_INT 1
53594: ARRAY
53595: PPUSH
53596: CALL_OW 305
53600: PUSH
53601: LD_VAR 0 5
53605: PUSH
53606: LD_INT 1
53608: ARRAY
53609: PPUSH
53610: CALL_OW 255
53614: PUSH
53615: LD_VAR 0 1
53619: PPUSH
53620: CALL_OW 255
53624: EQUAL
53625: AND
53626: IFFALSE 53650
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
53628: LD_VAR 0 5
53632: PUSH
53633: LD_INT 1
53635: ARRAY
53636: PPUSH
53637: LD_VAR 0 5
53641: PUSH
53642: LD_INT 2
53644: ARRAY
53645: PPUSH
53646: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
53650: LD_ADDR_EXP 87
53654: PUSH
53655: LD_EXP 87
53659: PPUSH
53660: LD_VAR 0 4
53664: PPUSH
53665: LD_EXP 87
53669: PUSH
53670: LD_VAR 0 4
53674: ARRAY
53675: PPUSH
53676: LD_VAR 0 3
53680: PPUSH
53681: CALL_OW 3
53685: PPUSH
53686: CALL_OW 1
53690: ST_TO_ADDR
// end ; end ;
53691: GO 53520
53693: POP
53694: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
53695: LD_VAR 0 1
53699: PPUSH
53700: LD_EXP 87
53704: PUSH
53705: LD_VAR 0 4
53709: ARRAY
53710: PUSH
53711: LD_INT 0
53713: PLUS
53714: PPUSH
53715: CALL_OW 505
// end ;
53719: LD_VAR 0 2
53723: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
53724: LD_INT 0
53726: PPUSH
53727: PPUSH
53728: PPUSH
53729: PPUSH
// if not hack in hackTanks then
53730: LD_VAR 0 1
53734: PUSH
53735: LD_EXP 86
53739: IN
53740: NOT
53741: IFFALSE 53745
// exit ;
53743: GO 53830
// index := GetElementIndex ( hackTanks , hack ) ;
53745: LD_ADDR_VAR 0 5
53749: PUSH
53750: LD_EXP 86
53754: PPUSH
53755: LD_VAR 0 1
53759: PPUSH
53760: CALL 5005 0 2
53764: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
53765: LD_ADDR_VAR 0 4
53769: PUSH
53770: DOUBLE
53771: LD_INT 1
53773: DEC
53774: ST_TO_ADDR
53775: LD_EXP 87
53779: PUSH
53780: LD_VAR 0 5
53784: ARRAY
53785: PUSH
53786: FOR_TO
53787: IFFALSE 53828
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
53789: LD_EXP 87
53793: PUSH
53794: LD_VAR 0 5
53798: ARRAY
53799: PUSH
53800: LD_VAR 0 4
53804: ARRAY
53805: PUSH
53806: LD_INT 1
53808: ARRAY
53809: PUSH
53810: LD_VAR 0 2
53814: EQUAL
53815: IFFALSE 53826
// KillUnit ( vehicle ) ;
53817: LD_VAR 0 2
53821: PPUSH
53822: CALL_OW 66
53826: GO 53786
53828: POP
53829: POP
// end ;
53830: LD_VAR 0 3
53834: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
53835: LD_EXP 91
53839: NOT
53840: IFFALSE 53875
53842: GO 53844
53844: DISABLE
// begin initMiner := true ;
53845: LD_ADDR_EXP 91
53849: PUSH
53850: LD_INT 1
53852: ST_TO_ADDR
// minersList := [ ] ;
53853: LD_ADDR_EXP 92
53857: PUSH
53858: EMPTY
53859: ST_TO_ADDR
// minerMinesList := [ ] ;
53860: LD_ADDR_EXP 93
53864: PUSH
53865: EMPTY
53866: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
53867: LD_ADDR_EXP 94
53871: PUSH
53872: LD_INT 5
53874: ST_TO_ADDR
// end ;
53875: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
53876: LD_EXP 91
53880: PUSH
53881: LD_INT 34
53883: PUSH
53884: LD_EXP 10
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PPUSH
53893: CALL_OW 69
53897: AND
53898: IFFALSE 54361
53900: GO 53902
53902: DISABLE
53903: LD_INT 0
53905: PPUSH
53906: PPUSH
53907: PPUSH
53908: PPUSH
// begin enable ;
53909: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
53910: LD_ADDR_VAR 0 1
53914: PUSH
53915: LD_INT 34
53917: PUSH
53918: LD_EXP 10
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PPUSH
53927: CALL_OW 69
53931: PUSH
53932: FOR_IN
53933: IFFALSE 54005
// begin if not i in minersList then
53935: LD_VAR 0 1
53939: PUSH
53940: LD_EXP 92
53944: IN
53945: NOT
53946: IFFALSE 54003
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
53948: LD_ADDR_EXP 92
53952: PUSH
53953: LD_EXP 92
53957: PPUSH
53958: LD_EXP 92
53962: PUSH
53963: LD_INT 1
53965: PLUS
53966: PPUSH
53967: LD_VAR 0 1
53971: PPUSH
53972: CALL_OW 1
53976: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
53977: LD_ADDR_EXP 93
53981: PUSH
53982: LD_EXP 93
53986: PPUSH
53987: LD_EXP 93
53991: PUSH
53992: LD_INT 1
53994: PLUS
53995: PPUSH
53996: EMPTY
53997: PPUSH
53998: CALL_OW 1
54002: ST_TO_ADDR
// end end ;
54003: GO 53932
54005: POP
54006: POP
// for i := minerMinesList downto 1 do
54007: LD_ADDR_VAR 0 1
54011: PUSH
54012: DOUBLE
54013: LD_EXP 93
54017: INC
54018: ST_TO_ADDR
54019: LD_INT 1
54021: PUSH
54022: FOR_DOWNTO
54023: IFFALSE 54359
// begin if IsLive ( minersList [ i ] ) then
54025: LD_EXP 92
54029: PUSH
54030: LD_VAR 0 1
54034: ARRAY
54035: PPUSH
54036: CALL_OW 300
54040: IFFALSE 54068
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
54042: LD_EXP 92
54046: PUSH
54047: LD_VAR 0 1
54051: ARRAY
54052: PPUSH
54053: LD_EXP 93
54057: PUSH
54058: LD_VAR 0 1
54062: ARRAY
54063: PPUSH
54064: CALL_OW 505
// if not minerMinesList [ i ] then
54068: LD_EXP 93
54072: PUSH
54073: LD_VAR 0 1
54077: ARRAY
54078: NOT
54079: IFFALSE 54083
// continue ;
54081: GO 54022
// for j := minerMinesList [ i ] downto 1 do
54083: LD_ADDR_VAR 0 2
54087: PUSH
54088: DOUBLE
54089: LD_EXP 93
54093: PUSH
54094: LD_VAR 0 1
54098: ARRAY
54099: INC
54100: ST_TO_ADDR
54101: LD_INT 1
54103: PUSH
54104: FOR_DOWNTO
54105: IFFALSE 54355
// begin side := GetSide ( minersList [ i ] ) ;
54107: LD_ADDR_VAR 0 3
54111: PUSH
54112: LD_EXP 92
54116: PUSH
54117: LD_VAR 0 1
54121: ARRAY
54122: PPUSH
54123: CALL_OW 255
54127: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
54128: LD_ADDR_VAR 0 4
54132: PUSH
54133: LD_EXP 93
54137: PUSH
54138: LD_VAR 0 1
54142: ARRAY
54143: PUSH
54144: LD_VAR 0 2
54148: ARRAY
54149: PUSH
54150: LD_INT 1
54152: ARRAY
54153: PPUSH
54154: LD_EXP 93
54158: PUSH
54159: LD_VAR 0 1
54163: ARRAY
54164: PUSH
54165: LD_VAR 0 2
54169: ARRAY
54170: PUSH
54171: LD_INT 2
54173: ARRAY
54174: PPUSH
54175: CALL_OW 428
54179: ST_TO_ADDR
// if not tmp then
54180: LD_VAR 0 4
54184: NOT
54185: IFFALSE 54189
// continue ;
54187: GO 54104
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
54189: LD_VAR 0 4
54193: PUSH
54194: LD_INT 81
54196: PUSH
54197: LD_VAR 0 3
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PPUSH
54206: CALL_OW 69
54210: IN
54211: PUSH
54212: LD_EXP 93
54216: PUSH
54217: LD_VAR 0 1
54221: ARRAY
54222: PUSH
54223: LD_VAR 0 2
54227: ARRAY
54228: PUSH
54229: LD_INT 1
54231: ARRAY
54232: PPUSH
54233: LD_EXP 93
54237: PUSH
54238: LD_VAR 0 1
54242: ARRAY
54243: PUSH
54244: LD_VAR 0 2
54248: ARRAY
54249: PUSH
54250: LD_INT 2
54252: ARRAY
54253: PPUSH
54254: CALL_OW 458
54258: AND
54259: IFFALSE 54353
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
54261: LD_EXP 93
54265: PUSH
54266: LD_VAR 0 1
54270: ARRAY
54271: PUSH
54272: LD_VAR 0 2
54276: ARRAY
54277: PUSH
54278: LD_INT 1
54280: ARRAY
54281: PPUSH
54282: LD_EXP 93
54286: PUSH
54287: LD_VAR 0 1
54291: ARRAY
54292: PUSH
54293: LD_VAR 0 2
54297: ARRAY
54298: PUSH
54299: LD_INT 2
54301: ARRAY
54302: PPUSH
54303: LD_VAR 0 3
54307: PPUSH
54308: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
54312: LD_ADDR_EXP 93
54316: PUSH
54317: LD_EXP 93
54321: PPUSH
54322: LD_VAR 0 1
54326: PPUSH
54327: LD_EXP 93
54331: PUSH
54332: LD_VAR 0 1
54336: ARRAY
54337: PPUSH
54338: LD_VAR 0 2
54342: PPUSH
54343: CALL_OW 3
54347: PPUSH
54348: CALL_OW 1
54352: ST_TO_ADDR
// end ; end ;
54353: GO 54104
54355: POP
54356: POP
// end ;
54357: GO 54022
54359: POP
54360: POP
// end ;
54361: PPOPN 4
54363: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
54364: LD_INT 0
54366: PPUSH
54367: PPUSH
// result := false ;
54368: LD_ADDR_VAR 0 4
54372: PUSH
54373: LD_INT 0
54375: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
54376: LD_VAR 0 1
54380: PPUSH
54381: CALL_OW 264
54385: PUSH
54386: LD_EXP 10
54390: EQUAL
54391: NOT
54392: IFFALSE 54396
// exit ;
54394: GO 54636
// index := GetElementIndex ( minersList , unit ) ;
54396: LD_ADDR_VAR 0 5
54400: PUSH
54401: LD_EXP 92
54405: PPUSH
54406: LD_VAR 0 1
54410: PPUSH
54411: CALL 5005 0 2
54415: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
54416: LD_EXP 93
54420: PUSH
54421: LD_VAR 0 5
54425: ARRAY
54426: PUSH
54427: LD_EXP 94
54431: GREATEREQUAL
54432: IFFALSE 54436
// exit ;
54434: GO 54636
// ComMoveXY ( unit , x , y ) ;
54436: LD_VAR 0 1
54440: PPUSH
54441: LD_VAR 0 2
54445: PPUSH
54446: LD_VAR 0 3
54450: PPUSH
54451: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
54455: LD_INT 35
54457: PPUSH
54458: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
54462: LD_VAR 0 1
54466: PPUSH
54467: LD_VAR 0 2
54471: PPUSH
54472: LD_VAR 0 3
54476: PPUSH
54477: CALL 35372 0 3
54481: NOT
54482: PUSH
54483: LD_VAR 0 1
54487: PPUSH
54488: CALL_OW 314
54492: AND
54493: IFFALSE 54497
// exit ;
54495: GO 54636
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
54497: LD_VAR 0 2
54501: PPUSH
54502: LD_VAR 0 3
54506: PPUSH
54507: CALL_OW 428
54511: PUSH
54512: LD_VAR 0 1
54516: EQUAL
54517: PUSH
54518: LD_VAR 0 1
54522: PPUSH
54523: CALL_OW 314
54527: NOT
54528: AND
54529: IFFALSE 54455
// PlaySoundXY ( x , y , PlantMine ) ;
54531: LD_VAR 0 2
54535: PPUSH
54536: LD_VAR 0 3
54540: PPUSH
54541: LD_STRING PlantMine
54543: PPUSH
54544: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
54548: LD_VAR 0 2
54552: PPUSH
54553: LD_VAR 0 3
54557: PPUSH
54558: LD_VAR 0 1
54562: PPUSH
54563: CALL_OW 255
54567: PPUSH
54568: LD_INT 0
54570: PPUSH
54571: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
54575: LD_ADDR_EXP 93
54579: PUSH
54580: LD_EXP 93
54584: PPUSH
54585: LD_VAR 0 5
54589: PUSH
54590: LD_EXP 93
54594: PUSH
54595: LD_VAR 0 5
54599: ARRAY
54600: PUSH
54601: LD_INT 1
54603: PLUS
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PPUSH
54609: LD_VAR 0 2
54613: PUSH
54614: LD_VAR 0 3
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PPUSH
54623: CALL 5220 0 3
54627: ST_TO_ADDR
// result := true ;
54628: LD_ADDR_VAR 0 4
54632: PUSH
54633: LD_INT 1
54635: ST_TO_ADDR
// end ;
54636: LD_VAR 0 4
54640: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
54641: LD_INT 0
54643: PPUSH
54644: PPUSH
54645: PPUSH
// if not unit in minersList then
54646: LD_VAR 0 1
54650: PUSH
54651: LD_EXP 92
54655: IN
54656: NOT
54657: IFFALSE 54661
// exit ;
54659: GO 55053
// index := GetElementIndex ( minersList , unit ) ;
54661: LD_ADDR_VAR 0 6
54665: PUSH
54666: LD_EXP 92
54670: PPUSH
54671: LD_VAR 0 1
54675: PPUSH
54676: CALL 5005 0 2
54680: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
54681: LD_ADDR_VAR 0 5
54685: PUSH
54686: DOUBLE
54687: LD_EXP 93
54691: PUSH
54692: LD_VAR 0 6
54696: ARRAY
54697: INC
54698: ST_TO_ADDR
54699: LD_INT 1
54701: PUSH
54702: FOR_DOWNTO
54703: IFFALSE 54864
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
54705: LD_EXP 93
54709: PUSH
54710: LD_VAR 0 6
54714: ARRAY
54715: PUSH
54716: LD_VAR 0 5
54720: ARRAY
54721: PUSH
54722: LD_INT 1
54724: ARRAY
54725: PUSH
54726: LD_VAR 0 2
54730: EQUAL
54731: PUSH
54732: LD_EXP 93
54736: PUSH
54737: LD_VAR 0 6
54741: ARRAY
54742: PUSH
54743: LD_VAR 0 5
54747: ARRAY
54748: PUSH
54749: LD_INT 2
54751: ARRAY
54752: PUSH
54753: LD_VAR 0 3
54757: EQUAL
54758: AND
54759: IFFALSE 54862
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
54761: LD_EXP 93
54765: PUSH
54766: LD_VAR 0 6
54770: ARRAY
54771: PUSH
54772: LD_VAR 0 5
54776: ARRAY
54777: PUSH
54778: LD_INT 1
54780: ARRAY
54781: PPUSH
54782: LD_EXP 93
54786: PUSH
54787: LD_VAR 0 6
54791: ARRAY
54792: PUSH
54793: LD_VAR 0 5
54797: ARRAY
54798: PUSH
54799: LD_INT 2
54801: ARRAY
54802: PPUSH
54803: LD_VAR 0 1
54807: PPUSH
54808: CALL_OW 255
54812: PPUSH
54813: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
54817: LD_ADDR_EXP 93
54821: PUSH
54822: LD_EXP 93
54826: PPUSH
54827: LD_VAR 0 6
54831: PPUSH
54832: LD_EXP 93
54836: PUSH
54837: LD_VAR 0 6
54841: ARRAY
54842: PPUSH
54843: LD_VAR 0 5
54847: PPUSH
54848: CALL_OW 3
54852: PPUSH
54853: CALL_OW 1
54857: ST_TO_ADDR
// exit ;
54858: POP
54859: POP
54860: GO 55053
// end ; end ;
54862: GO 54702
54864: POP
54865: POP
// for i := minerMinesList [ index ] downto 1 do
54866: LD_ADDR_VAR 0 5
54870: PUSH
54871: DOUBLE
54872: LD_EXP 93
54876: PUSH
54877: LD_VAR 0 6
54881: ARRAY
54882: INC
54883: ST_TO_ADDR
54884: LD_INT 1
54886: PUSH
54887: FOR_DOWNTO
54888: IFFALSE 55051
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
54890: LD_EXP 93
54894: PUSH
54895: LD_VAR 0 6
54899: ARRAY
54900: PUSH
54901: LD_VAR 0 5
54905: ARRAY
54906: PUSH
54907: LD_INT 1
54909: ARRAY
54910: PPUSH
54911: LD_EXP 93
54915: PUSH
54916: LD_VAR 0 6
54920: ARRAY
54921: PUSH
54922: LD_VAR 0 5
54926: ARRAY
54927: PUSH
54928: LD_INT 2
54930: ARRAY
54931: PPUSH
54932: LD_VAR 0 2
54936: PPUSH
54937: LD_VAR 0 3
54941: PPUSH
54942: CALL_OW 298
54946: PUSH
54947: LD_INT 6
54949: LESS
54950: IFFALSE 55049
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
54952: LD_EXP 93
54956: PUSH
54957: LD_VAR 0 6
54961: ARRAY
54962: PUSH
54963: LD_VAR 0 5
54967: ARRAY
54968: PUSH
54969: LD_INT 1
54971: ARRAY
54972: PPUSH
54973: LD_EXP 93
54977: PUSH
54978: LD_VAR 0 6
54982: ARRAY
54983: PUSH
54984: LD_VAR 0 5
54988: ARRAY
54989: PUSH
54990: LD_INT 2
54992: ARRAY
54993: PPUSH
54994: LD_VAR 0 1
54998: PPUSH
54999: CALL_OW 255
55003: PPUSH
55004: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
55008: LD_ADDR_EXP 93
55012: PUSH
55013: LD_EXP 93
55017: PPUSH
55018: LD_VAR 0 6
55022: PPUSH
55023: LD_EXP 93
55027: PUSH
55028: LD_VAR 0 6
55032: ARRAY
55033: PPUSH
55034: LD_VAR 0 5
55038: PPUSH
55039: CALL_OW 3
55043: PPUSH
55044: CALL_OW 1
55048: ST_TO_ADDR
// end ; end ;
55049: GO 54887
55051: POP
55052: POP
// end ;
55053: LD_VAR 0 4
55057: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
55058: LD_INT 0
55060: PPUSH
55061: PPUSH
55062: PPUSH
55063: PPUSH
55064: PPUSH
55065: PPUSH
55066: PPUSH
55067: PPUSH
55068: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
55069: LD_VAR 0 1
55073: PPUSH
55074: CALL_OW 264
55078: PUSH
55079: LD_EXP 10
55083: EQUAL
55084: NOT
55085: PUSH
55086: LD_VAR 0 1
55090: PUSH
55091: LD_EXP 92
55095: IN
55096: NOT
55097: OR
55098: IFFALSE 55102
// exit ;
55100: GO 55424
// index := GetElementIndex ( minersList , unit ) ;
55102: LD_ADDR_VAR 0 6
55106: PUSH
55107: LD_EXP 92
55111: PPUSH
55112: LD_VAR 0 1
55116: PPUSH
55117: CALL 5005 0 2
55121: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
55122: LD_ADDR_VAR 0 8
55126: PUSH
55127: LD_EXP 94
55131: PUSH
55132: LD_EXP 93
55136: PUSH
55137: LD_VAR 0 6
55141: ARRAY
55142: MINUS
55143: ST_TO_ADDR
// if not minesFreeAmount then
55144: LD_VAR 0 8
55148: NOT
55149: IFFALSE 55153
// exit ;
55151: GO 55424
// tmp := [ ] ;
55153: LD_ADDR_VAR 0 7
55157: PUSH
55158: EMPTY
55159: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
55160: LD_ADDR_VAR 0 5
55164: PUSH
55165: DOUBLE
55166: LD_INT 1
55168: DEC
55169: ST_TO_ADDR
55170: LD_VAR 0 8
55174: PUSH
55175: FOR_TO
55176: IFFALSE 55371
// begin _d := rand ( 0 , 5 ) ;
55178: LD_ADDR_VAR 0 11
55182: PUSH
55183: LD_INT 0
55185: PPUSH
55186: LD_INT 5
55188: PPUSH
55189: CALL_OW 12
55193: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
55194: LD_ADDR_VAR 0 12
55198: PUSH
55199: LD_INT 2
55201: PPUSH
55202: LD_INT 6
55204: PPUSH
55205: CALL_OW 12
55209: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
55210: LD_ADDR_VAR 0 9
55214: PUSH
55215: LD_VAR 0 2
55219: PPUSH
55220: LD_VAR 0 11
55224: PPUSH
55225: LD_VAR 0 12
55229: PPUSH
55230: CALL_OW 272
55234: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
55235: LD_ADDR_VAR 0 10
55239: PUSH
55240: LD_VAR 0 3
55244: PPUSH
55245: LD_VAR 0 11
55249: PPUSH
55250: LD_VAR 0 12
55254: PPUSH
55255: CALL_OW 273
55259: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
55260: LD_VAR 0 9
55264: PPUSH
55265: LD_VAR 0 10
55269: PPUSH
55270: CALL_OW 488
55274: PUSH
55275: LD_VAR 0 9
55279: PUSH
55280: LD_VAR 0 10
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_VAR 0 7
55293: IN
55294: NOT
55295: AND
55296: PUSH
55297: LD_VAR 0 9
55301: PPUSH
55302: LD_VAR 0 10
55306: PPUSH
55307: CALL_OW 458
55311: NOT
55312: AND
55313: IFFALSE 55355
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
55315: LD_ADDR_VAR 0 7
55319: PUSH
55320: LD_VAR 0 7
55324: PPUSH
55325: LD_VAR 0 7
55329: PUSH
55330: LD_INT 1
55332: PLUS
55333: PPUSH
55334: LD_VAR 0 9
55338: PUSH
55339: LD_VAR 0 10
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PPUSH
55348: CALL_OW 1
55352: ST_TO_ADDR
55353: GO 55369
// i := i - 1 ;
55355: LD_ADDR_VAR 0 5
55359: PUSH
55360: LD_VAR 0 5
55364: PUSH
55365: LD_INT 1
55367: MINUS
55368: ST_TO_ADDR
// end ;
55369: GO 55175
55371: POP
55372: POP
// for i in tmp do
55373: LD_ADDR_VAR 0 5
55377: PUSH
55378: LD_VAR 0 7
55382: PUSH
55383: FOR_IN
55384: IFFALSE 55422
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
55386: LD_VAR 0 1
55390: PPUSH
55391: LD_VAR 0 5
55395: PUSH
55396: LD_INT 1
55398: ARRAY
55399: PPUSH
55400: LD_VAR 0 5
55404: PUSH
55405: LD_INT 2
55407: ARRAY
55408: PPUSH
55409: CALL 54364 0 3
55413: NOT
55414: IFFALSE 55420
// exit ;
55416: POP
55417: POP
55418: GO 55424
55420: GO 55383
55422: POP
55423: POP
// end ;
55424: LD_VAR 0 4
55428: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
55429: LD_INT 0
55431: PPUSH
55432: PPUSH
55433: PPUSH
55434: PPUSH
55435: PPUSH
55436: PPUSH
55437: PPUSH
// if not GetClass ( unit ) = class_sniper then
55438: LD_VAR 0 1
55442: PPUSH
55443: CALL_OW 257
55447: PUSH
55448: LD_INT 5
55450: EQUAL
55451: NOT
55452: IFFALSE 55456
// exit ;
55454: GO 55844
// dist := 8 ;
55456: LD_ADDR_VAR 0 5
55460: PUSH
55461: LD_INT 8
55463: ST_TO_ADDR
// viewRange := 12 ;
55464: LD_ADDR_VAR 0 7
55468: PUSH
55469: LD_INT 12
55471: ST_TO_ADDR
// side := GetSide ( unit ) ;
55472: LD_ADDR_VAR 0 6
55476: PUSH
55477: LD_VAR 0 1
55481: PPUSH
55482: CALL_OW 255
55486: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
55487: LD_INT 61
55489: PPUSH
55490: LD_VAR 0 6
55494: PPUSH
55495: CALL_OW 321
55499: PUSH
55500: LD_INT 2
55502: EQUAL
55503: IFFALSE 55513
// viewRange := 16 ;
55505: LD_ADDR_VAR 0 7
55509: PUSH
55510: LD_INT 16
55512: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
55513: LD_VAR 0 1
55517: PPUSH
55518: LD_VAR 0 2
55522: PPUSH
55523: LD_VAR 0 3
55527: PPUSH
55528: CALL_OW 297
55532: PUSH
55533: LD_VAR 0 5
55537: GREATER
55538: IFFALSE 55617
// begin ComMoveXY ( unit , x , y ) ;
55540: LD_VAR 0 1
55544: PPUSH
55545: LD_VAR 0 2
55549: PPUSH
55550: LD_VAR 0 3
55554: PPUSH
55555: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
55559: LD_INT 35
55561: PPUSH
55562: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
55566: LD_VAR 0 1
55570: PPUSH
55571: LD_VAR 0 2
55575: PPUSH
55576: LD_VAR 0 3
55580: PPUSH
55581: CALL 35372 0 3
55585: NOT
55586: IFFALSE 55590
// exit ;
55588: GO 55844
// until GetDistUnitXY ( unit , x , y ) < dist ;
55590: LD_VAR 0 1
55594: PPUSH
55595: LD_VAR 0 2
55599: PPUSH
55600: LD_VAR 0 3
55604: PPUSH
55605: CALL_OW 297
55609: PUSH
55610: LD_VAR 0 5
55614: LESS
55615: IFFALSE 55559
// end ; ComTurnXY ( unit , x , y ) ;
55617: LD_VAR 0 1
55621: PPUSH
55622: LD_VAR 0 2
55626: PPUSH
55627: LD_VAR 0 3
55631: PPUSH
55632: CALL_OW 118
// wait ( 5 ) ;
55636: LD_INT 5
55638: PPUSH
55639: CALL_OW 67
// _d := GetDir ( unit ) ;
55643: LD_ADDR_VAR 0 10
55647: PUSH
55648: LD_VAR 0 1
55652: PPUSH
55653: CALL_OW 254
55657: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
55658: LD_ADDR_VAR 0 8
55662: PUSH
55663: LD_VAR 0 1
55667: PPUSH
55668: CALL_OW 250
55672: PPUSH
55673: LD_VAR 0 10
55677: PPUSH
55678: LD_VAR 0 5
55682: PPUSH
55683: CALL_OW 272
55687: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
55688: LD_ADDR_VAR 0 9
55692: PUSH
55693: LD_VAR 0 1
55697: PPUSH
55698: CALL_OW 251
55702: PPUSH
55703: LD_VAR 0 10
55707: PPUSH
55708: LD_VAR 0 5
55712: PPUSH
55713: CALL_OW 273
55717: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55718: LD_VAR 0 8
55722: PPUSH
55723: LD_VAR 0 9
55727: PPUSH
55728: CALL_OW 488
55732: NOT
55733: IFFALSE 55737
// exit ;
55735: GO 55844
// ComAnimCustom ( unit , 1 ) ;
55737: LD_VAR 0 1
55741: PPUSH
55742: LD_INT 1
55744: PPUSH
55745: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
55749: LD_VAR 0 8
55753: PPUSH
55754: LD_VAR 0 9
55758: PPUSH
55759: LD_VAR 0 6
55763: PPUSH
55764: LD_VAR 0 7
55768: PPUSH
55769: CALL_OW 330
// repeat wait ( 1 ) ;
55773: LD_INT 1
55775: PPUSH
55776: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
55780: LD_VAR 0 1
55784: PPUSH
55785: CALL_OW 316
55789: PUSH
55790: LD_VAR 0 1
55794: PPUSH
55795: CALL_OW 314
55799: OR
55800: PUSH
55801: LD_VAR 0 1
55805: PPUSH
55806: CALL_OW 302
55810: NOT
55811: OR
55812: PUSH
55813: LD_VAR 0 1
55817: PPUSH
55818: CALL_OW 301
55822: OR
55823: IFFALSE 55773
// RemoveSeeing ( _x , _y , side ) ;
55825: LD_VAR 0 8
55829: PPUSH
55830: LD_VAR 0 9
55834: PPUSH
55835: LD_VAR 0 6
55839: PPUSH
55840: CALL_OW 331
// end ; end_of_file
55844: LD_VAR 0 4
55848: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55849: LD_VAR 0 1
55853: PUSH
55854: LD_INT 200
55856: DOUBLE
55857: GREATEREQUAL
55858: IFFALSE 55866
55860: LD_INT 299
55862: DOUBLE
55863: LESSEQUAL
55864: IFTRUE 55868
55866: GO 55900
55868: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55869: LD_VAR 0 1
55873: PPUSH
55874: LD_VAR 0 2
55878: PPUSH
55879: LD_VAR 0 3
55883: PPUSH
55884: LD_VAR 0 4
55888: PPUSH
55889: LD_VAR 0 5
55893: PPUSH
55894: CALL 51966 0 5
55898: GO 55977
55900: LD_INT 300
55902: DOUBLE
55903: GREATEREQUAL
55904: IFFALSE 55912
55906: LD_INT 399
55908: DOUBLE
55909: LESSEQUAL
55910: IFTRUE 55914
55912: GO 55976
55914: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55915: LD_VAR 0 1
55919: PPUSH
55920: LD_VAR 0 2
55924: PPUSH
55925: LD_VAR 0 3
55929: PPUSH
55930: LD_VAR 0 4
55934: PPUSH
55935: LD_VAR 0 5
55939: PPUSH
55940: LD_VAR 0 6
55944: PPUSH
55945: LD_VAR 0 7
55949: PPUSH
55950: LD_VAR 0 8
55954: PPUSH
55955: LD_VAR 0 9
55959: PPUSH
55960: LD_VAR 0 10
55964: PPUSH
55965: LD_VAR 0 11
55969: PPUSH
55970: CALL 49854 0 11
55974: GO 55977
55976: POP
// end ;
55977: PPOPN 11
55979: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55980: LD_VAR 0 1
55984: PPUSH
55985: LD_VAR 0 2
55989: PPUSH
55990: LD_VAR 0 3
55994: PPUSH
55995: LD_VAR 0 4
55999: PPUSH
56000: LD_VAR 0 5
56004: PPUSH
56005: CALL 51948 0 5
// end ;
56009: PPOPN 5
56011: END
