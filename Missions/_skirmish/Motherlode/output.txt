// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 116 0 0
// PrepareNature ( 4 , 4 , 12 , 4 , 4 , 1 , 4 , natArea , watArea ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 12
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 4
  22: PPUSH
  23: LD_INT 1
  25: PPUSH
  26: LD_INT 4
  28: PPUSH
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: CALL 35271 0 9
// if gameType = 1 then
  39: LD_EXP 2
  43: PUSH
  44: LD_INT 1
  46: EQUAL
  47: IFFALSE 111
// InitEcoMode ( [ 189 , 97 ] , [ [ 215 , 93 ] , [ 204 , 126 ] ] , [ attacksArea1 , attacksArea2 , attacksArea3 , attacksArea4 , attacksArea5 ] ) else
  49: LD_INT 189
  51: PUSH
  52: LD_INT 97
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: PPUSH
  59: LD_INT 215
  61: PUSH
  62: LD_INT 93
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: PUSH
  69: LD_INT 204
  71: PUSH
  72: LD_INT 126
  74: PUSH
  75: EMPTY
  76: LIST
  77: LIST
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PPUSH
  83: LD_INT 2
  85: PUSH
  86: LD_INT 3
  88: PUSH
  89: LD_INT 4
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 6
  97: PUSH
  98: EMPTY
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: PPUSH
 105: CALL 42533 0 3
 109: GO 115
// InitDefendMode ( ) ;
 111: CALL 165 0 0
// end ;
 115: END
// export debug , gameType ; function Init ; begin
 116: LD_INT 0
 118: PPUSH
// debug := 0 ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// if debug then
 127: LD_EXP 1
 131: IFFALSE 143
// gameType := 1 else
 133: LD_ADDR_EXP 2
 137: PUSH
 138: LD_INT 1
 140: ST_TO_ADDR
 141: GO 160
// gameType := GetMultiplayerSetting ( 50 ) + 1 ;
 143: LD_ADDR_EXP 2
 147: PUSH
 148: LD_INT 50
 150: PPUSH
 151: CALL_OW 426
 155: PUSH
 156: LD_INT 1
 158: PLUS
 159: ST_TO_ADDR
// end ; end_of_file
 160: LD_VAR 0 1
 164: RET
// export function InitDefendMode ( ) ; var buildingsList ; begin
 165: LD_INT 0
 167: PPUSH
 168: PPUSH
// buildingsList := [ [ 91 , 182 , 59 , 3 , 0 , 0 , 45 ] , [ 90 , 185 , 60 , 3 , 0 , 0 , 46 ] , [ 90 , 188 , 62 , 3 , 0 , 0 , 43 ] , [ 73 , 178 , 64 , 2 , 0 , 0 , 0 ] , [ 75 , 182 , 65 , 3 , 0 , 0 , 0 ] , [ 76 , 179 , 68 , 1 , 0 , 0 , 0 ] , [ 69 , 182 , 68 , 2 , 0 , 0 , 0 ] , [ 71 , 186 , 68 , 4 , 0 , 0 , 0 ] , [ 72 , 182 , 72 , 0 , 0 , 0 , 0 ] , [ 91 , 169 , 73 , 1 , 0 , 0 , 46 ] , [ 67 , 209 , 79 , 4 , 0 , 0 , 0 ] , [ 88 , 204 , 87 , 3 , 0 , 0 , 0 ] , [ 91 , 169 , 88 , 1 , 0 , 0 , 43 ] , [ 91 , 169 , 91 , 1 , 0 , 0 , 45 ] , [ 86 , 192 , 92 , 4 , 0 , 0 , 0 ] , [ 88 , 207 , 93 , 2 , 0 , 0 , 0 ] , [ 65 , 194 , 96 , 4 , 0 , 0 , 0 ] , [ 90 , 224 , 96 , 4 , 0 , 0 , 45 ] , [ 86 , 196 , 100 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 100 , 4 , 0 , 0 , 46 ] , [ 88 , 211 , 101 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 103 , 4 , 0 , 0 , 45 ] , [ 67 , 172 , 105 , 1 , 0 , 0 , 0 ] , [ 86 , 185 , 105 , 0 , 0 , 0 , 0 ] , [ 86 , 188 , 107 , 5 , 0 , 0 , 0 ] , [ 86 , 186 , 108 , 3 , 0 , 0 , 0 ] , [ 91 , 172 , 109 , 1 , 0 , 0 , 45 ] , [ 90 , 227 , 119 , 5 , 0 , 0 , 46 ] , [ 91 , 225 , 120 , 5 , 0 , 0 , 45 ] , [ 67 , 226 , 135 , 5 , 0 , 0 , 0 ] ] ;
 169: LD_ADDR_VAR 0 2
 173: PUSH
 174: LD_INT 91
 176: PUSH
 177: LD_INT 182
 179: PUSH
 180: LD_INT 59
 182: PUSH
 183: LD_INT 3
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 45
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 90
 206: PUSH
 207: LD_INT 185
 209: PUSH
 210: LD_INT 60
 212: PUSH
 213: LD_INT 3
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 46
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: PUSH
 234: LD_INT 90
 236: PUSH
 237: LD_INT 188
 239: PUSH
 240: LD_INT 62
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 0
 251: PUSH
 252: LD_INT 43
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 73
 266: PUSH
 267: LD_INT 178
 269: PUSH
 270: LD_INT 64
 272: PUSH
 273: LD_INT 2
 275: PUSH
 276: LD_INT 0
 278: PUSH
 279: LD_INT 0
 281: PUSH
 282: LD_INT 0
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 75
 296: PUSH
 297: LD_INT 182
 299: PUSH
 300: LD_INT 65
 302: PUSH
 303: LD_INT 3
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: LD_INT 0
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: PUSH
 324: LD_INT 76
 326: PUSH
 327: LD_INT 179
 329: PUSH
 330: LD_INT 68
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 0
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 69
 356: PUSH
 357: LD_INT 182
 359: PUSH
 360: LD_INT 68
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 71
 386: PUSH
 387: LD_INT 186
 389: PUSH
 390: LD_INT 68
 392: PUSH
 393: LD_INT 4
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: LD_INT 72
 416: PUSH
 417: LD_INT 182
 419: PUSH
 420: LD_INT 72
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: LD_INT 0
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: PUSH
 444: LD_INT 91
 446: PUSH
 447: LD_INT 169
 449: PUSH
 450: LD_INT 73
 452: PUSH
 453: LD_INT 1
 455: PUSH
 456: LD_INT 0
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 46
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 67
 476: PUSH
 477: LD_INT 209
 479: PUSH
 480: LD_INT 79
 482: PUSH
 483: LD_INT 4
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 88
 506: PUSH
 507: LD_INT 204
 509: PUSH
 510: LD_INT 87
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: LD_INT 0
 518: PUSH
 519: LD_INT 0
 521: PUSH
 522: LD_INT 0
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 91
 536: PUSH
 537: LD_INT 169
 539: PUSH
 540: LD_INT 88
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 0
 551: PUSH
 552: LD_INT 43
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 91
 566: PUSH
 567: LD_INT 169
 569: PUSH
 570: LD_INT 91
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 0
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: LD_INT 45
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 86
 596: PUSH
 597: LD_INT 192
 599: PUSH
 600: LD_INT 92
 602: PUSH
 603: LD_INT 4
 605: PUSH
 606: LD_INT 0
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: LD_INT 0
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_INT 88
 626: PUSH
 627: LD_INT 207
 629: PUSH
 630: LD_INT 93
 632: PUSH
 633: LD_INT 2
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 65
 656: PUSH
 657: LD_INT 194
 659: PUSH
 660: LD_INT 96
 662: PUSH
 663: LD_INT 4
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 90
 686: PUSH
 687: LD_INT 224
 689: PUSH
 690: LD_INT 96
 692: PUSH
 693: LD_INT 4
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 45
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: PUSH
 714: LD_INT 86
 716: PUSH
 717: LD_INT 196
 719: PUSH
 720: LD_INT 100
 722: PUSH
 723: LD_INT 4
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 91
 746: PUSH
 747: LD_INT 228
 749: PUSH
 750: LD_INT 100
 752: PUSH
 753: LD_INT 4
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: LD_INT 0
 761: PUSH
 762: LD_INT 46
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 88
 776: PUSH
 777: LD_INT 211
 779: PUSH
 780: LD_INT 101
 782: PUSH
 783: LD_INT 4
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 0
 791: PUSH
 792: LD_INT 0
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 91
 806: PUSH
 807: LD_INT 228
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 4
 815: PUSH
 816: LD_INT 0
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 45
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 67
 836: PUSH
 837: LD_INT 172
 839: PUSH
 840: LD_INT 105
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 0
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 86
 866: PUSH
 867: LD_INT 185
 869: PUSH
 870: LD_INT 105
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: LD_INT 0
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 86
 896: PUSH
 897: LD_INT 188
 899: PUSH
 900: LD_INT 107
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: LD_INT 0
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 86
 926: PUSH
 927: LD_INT 186
 929: PUSH
 930: LD_INT 108
 932: PUSH
 933: LD_INT 3
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 91
 956: PUSH
 957: LD_INT 172
 959: PUSH
 960: LD_INT 109
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 0
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 45
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 227
 989: PUSH
 990: LD_INT 119
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 0
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 46
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 91
1016: PUSH
1017: LD_INT 225
1019: PUSH
1020: LD_INT 120
1022: PUSH
1023: LD_INT 5
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: LD_INT 45
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_INT 67
1046: PUSH
1047: LD_INT 226
1049: PUSH
1050: LD_INT 135
1052: PUSH
1053: LD_INT 5
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: ST_TO_ADDR
// end ; end_of_file
1106: LD_VAR 0 1
1110: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
1111: LD_VAR 0 1
1115: PPUSH
1116: LD_VAR 0 2
1120: PPUSH
1121: CALL 61105 0 2
// end ;
1125: PPOPN 2
1127: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
1128: LD_VAR 0 1
1132: PPUSH
1133: CALL 60985 0 1
// end ; end_of_file
1137: PPOPN 1
1139: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1140: LD_INT 0
1142: PPUSH
1143: PPUSH
// if exist_mode then
1144: LD_VAR 0 2
1148: IFFALSE 1173
// unit := CreateCharacter ( prefix & ident ) else
1150: LD_ADDR_VAR 0 5
1154: PUSH
1155: LD_VAR 0 3
1159: PUSH
1160: LD_VAR 0 1
1164: STR
1165: PPUSH
1166: CALL_OW 34
1170: ST_TO_ADDR
1171: GO 1188
// unit := NewCharacter ( ident ) ;
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_VAR 0 1
1182: PPUSH
1183: CALL_OW 25
1187: ST_TO_ADDR
// result := unit ;
1188: LD_ADDR_VAR 0 4
1192: PUSH
1193: LD_VAR 0 5
1197: ST_TO_ADDR
// end ;
1198: LD_VAR 0 4
1202: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1203: LD_INT 0
1205: PPUSH
1206: PPUSH
// if not side or not nation then
1207: LD_VAR 0 1
1211: NOT
1212: PUSH
1213: LD_VAR 0 2
1217: NOT
1218: OR
1219: IFFALSE 1223
// exit ;
1221: GO 1991
// case nation of nation_american :
1223: LD_VAR 0 2
1227: PUSH
1228: LD_INT 1
1230: DOUBLE
1231: EQUAL
1232: IFTRUE 1236
1234: GO 1450
1236: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1237: LD_ADDR_VAR 0 4
1241: PUSH
1242: LD_INT 35
1244: PUSH
1245: LD_INT 45
1247: PUSH
1248: LD_INT 46
1250: PUSH
1251: LD_INT 47
1253: PUSH
1254: LD_INT 82
1256: PUSH
1257: LD_INT 83
1259: PUSH
1260: LD_INT 84
1262: PUSH
1263: LD_INT 85
1265: PUSH
1266: LD_INT 86
1268: PUSH
1269: LD_INT 1
1271: PUSH
1272: LD_INT 2
1274: PUSH
1275: LD_INT 6
1277: PUSH
1278: LD_INT 15
1280: PUSH
1281: LD_INT 16
1283: PUSH
1284: LD_INT 7
1286: PUSH
1287: LD_INT 12
1289: PUSH
1290: LD_INT 13
1292: PUSH
1293: LD_INT 10
1295: PUSH
1296: LD_INT 14
1298: PUSH
1299: LD_INT 20
1301: PUSH
1302: LD_INT 21
1304: PUSH
1305: LD_INT 22
1307: PUSH
1308: LD_INT 25
1310: PUSH
1311: LD_INT 32
1313: PUSH
1314: LD_INT 27
1316: PUSH
1317: LD_INT 36
1319: PUSH
1320: LD_INT 69
1322: PUSH
1323: LD_INT 39
1325: PUSH
1326: LD_INT 34
1328: PUSH
1329: LD_INT 40
1331: PUSH
1332: LD_INT 48
1334: PUSH
1335: LD_INT 49
1337: PUSH
1338: LD_INT 50
1340: PUSH
1341: LD_INT 51
1343: PUSH
1344: LD_INT 52
1346: PUSH
1347: LD_INT 53
1349: PUSH
1350: LD_INT 54
1352: PUSH
1353: LD_INT 55
1355: PUSH
1356: LD_INT 56
1358: PUSH
1359: LD_INT 57
1361: PUSH
1362: LD_INT 58
1364: PUSH
1365: LD_INT 59
1367: PUSH
1368: LD_INT 60
1370: PUSH
1371: LD_INT 61
1373: PUSH
1374: LD_INT 62
1376: PUSH
1377: LD_INT 80
1379: PUSH
1380: LD_INT 82
1382: PUSH
1383: LD_INT 83
1385: PUSH
1386: LD_INT 84
1388: PUSH
1389: LD_INT 85
1391: PUSH
1392: LD_INT 86
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
1448: GO 1915
1450: LD_INT 2
1452: DOUBLE
1453: EQUAL
1454: IFTRUE 1458
1456: GO 1684
1458: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: LD_INT 35
1466: PUSH
1467: LD_INT 45
1469: PUSH
1470: LD_INT 46
1472: PUSH
1473: LD_INT 47
1475: PUSH
1476: LD_INT 82
1478: PUSH
1479: LD_INT 83
1481: PUSH
1482: LD_INT 84
1484: PUSH
1485: LD_INT 85
1487: PUSH
1488: LD_INT 87
1490: PUSH
1491: LD_INT 70
1493: PUSH
1494: LD_INT 1
1496: PUSH
1497: LD_INT 11
1499: PUSH
1500: LD_INT 3
1502: PUSH
1503: LD_INT 4
1505: PUSH
1506: LD_INT 5
1508: PUSH
1509: LD_INT 6
1511: PUSH
1512: LD_INT 15
1514: PUSH
1515: LD_INT 18
1517: PUSH
1518: LD_INT 7
1520: PUSH
1521: LD_INT 17
1523: PUSH
1524: LD_INT 8
1526: PUSH
1527: LD_INT 20
1529: PUSH
1530: LD_INT 21
1532: PUSH
1533: LD_INT 22
1535: PUSH
1536: LD_INT 72
1538: PUSH
1539: LD_INT 26
1541: PUSH
1542: LD_INT 69
1544: PUSH
1545: LD_INT 39
1547: PUSH
1548: LD_INT 40
1550: PUSH
1551: LD_INT 41
1553: PUSH
1554: LD_INT 42
1556: PUSH
1557: LD_INT 43
1559: PUSH
1560: LD_INT 48
1562: PUSH
1563: LD_INT 49
1565: PUSH
1566: LD_INT 50
1568: PUSH
1569: LD_INT 51
1571: PUSH
1572: LD_INT 52
1574: PUSH
1575: LD_INT 53
1577: PUSH
1578: LD_INT 54
1580: PUSH
1581: LD_INT 55
1583: PUSH
1584: LD_INT 56
1586: PUSH
1587: LD_INT 60
1589: PUSH
1590: LD_INT 61
1592: PUSH
1593: LD_INT 62
1595: PUSH
1596: LD_INT 66
1598: PUSH
1599: LD_INT 67
1601: PUSH
1602: LD_INT 68
1604: PUSH
1605: LD_INT 81
1607: PUSH
1608: LD_INT 82
1610: PUSH
1611: LD_INT 83
1613: PUSH
1614: LD_INT 84
1616: PUSH
1617: LD_INT 85
1619: PUSH
1620: LD_INT 87
1622: PUSH
1623: LD_INT 88
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: ST_TO_ADDR
1682: GO 1915
1684: LD_INT 3
1686: DOUBLE
1687: EQUAL
1688: IFTRUE 1692
1690: GO 1914
1692: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1693: LD_ADDR_VAR 0 4
1697: PUSH
1698: LD_INT 46
1700: PUSH
1701: LD_INT 47
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 2
1709: PUSH
1710: LD_INT 82
1712: PUSH
1713: LD_INT 83
1715: PUSH
1716: LD_INT 84
1718: PUSH
1719: LD_INT 85
1721: PUSH
1722: LD_INT 86
1724: PUSH
1725: LD_INT 11
1727: PUSH
1728: LD_INT 9
1730: PUSH
1731: LD_INT 20
1733: PUSH
1734: LD_INT 19
1736: PUSH
1737: LD_INT 21
1739: PUSH
1740: LD_INT 24
1742: PUSH
1743: LD_INT 22
1745: PUSH
1746: LD_INT 25
1748: PUSH
1749: LD_INT 28
1751: PUSH
1752: LD_INT 29
1754: PUSH
1755: LD_INT 30
1757: PUSH
1758: LD_INT 31
1760: PUSH
1761: LD_INT 37
1763: PUSH
1764: LD_INT 38
1766: PUSH
1767: LD_INT 32
1769: PUSH
1770: LD_INT 27
1772: PUSH
1773: LD_INT 33
1775: PUSH
1776: LD_INT 69
1778: PUSH
1779: LD_INT 39
1781: PUSH
1782: LD_INT 34
1784: PUSH
1785: LD_INT 40
1787: PUSH
1788: LD_INT 71
1790: PUSH
1791: LD_INT 23
1793: PUSH
1794: LD_INT 44
1796: PUSH
1797: LD_INT 48
1799: PUSH
1800: LD_INT 49
1802: PUSH
1803: LD_INT 50
1805: PUSH
1806: LD_INT 51
1808: PUSH
1809: LD_INT 52
1811: PUSH
1812: LD_INT 53
1814: PUSH
1815: LD_INT 54
1817: PUSH
1818: LD_INT 55
1820: PUSH
1821: LD_INT 56
1823: PUSH
1824: LD_INT 57
1826: PUSH
1827: LD_INT 58
1829: PUSH
1830: LD_INT 59
1832: PUSH
1833: LD_INT 63
1835: PUSH
1836: LD_INT 64
1838: PUSH
1839: LD_INT 65
1841: PUSH
1842: LD_INT 82
1844: PUSH
1845: LD_INT 83
1847: PUSH
1848: LD_INT 84
1850: PUSH
1851: LD_INT 85
1853: PUSH
1854: LD_INT 86
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
1912: GO 1915
1914: POP
// if state > - 1 and state < 3 then
1915: LD_VAR 0 3
1919: PUSH
1920: LD_INT 1
1922: NEG
1923: GREATER
1924: PUSH
1925: LD_VAR 0 3
1929: PUSH
1930: LD_INT 3
1932: LESS
1933: AND
1934: IFFALSE 1991
// for i in result do
1936: LD_ADDR_VAR 0 5
1940: PUSH
1941: LD_VAR 0 4
1945: PUSH
1946: FOR_IN
1947: IFFALSE 1989
// if GetTech ( i , side ) <> state then
1949: LD_VAR 0 5
1953: PPUSH
1954: LD_VAR 0 1
1958: PPUSH
1959: CALL_OW 321
1963: PUSH
1964: LD_VAR 0 3
1968: NONEQUAL
1969: IFFALSE 1987
// result := result diff i ;
1971: LD_ADDR_VAR 0 4
1975: PUSH
1976: LD_VAR 0 4
1980: PUSH
1981: LD_VAR 0 5
1985: DIFF
1986: ST_TO_ADDR
1987: GO 1946
1989: POP
1990: POP
// end ;
1991: LD_VAR 0 4
1995: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1996: LD_INT 0
1998: PPUSH
1999: PPUSH
2000: PPUSH
// result := true ;
2001: LD_ADDR_VAR 0 3
2005: PUSH
2006: LD_INT 1
2008: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2009: LD_ADDR_VAR 0 5
2013: PUSH
2014: LD_VAR 0 2
2018: PPUSH
2019: CALL_OW 480
2023: ST_TO_ADDR
// if not tmp then
2024: LD_VAR 0 5
2028: NOT
2029: IFFALSE 2033
// exit ;
2031: GO 2082
// for i in tmp do
2033: LD_ADDR_VAR 0 4
2037: PUSH
2038: LD_VAR 0 5
2042: PUSH
2043: FOR_IN
2044: IFFALSE 2080
// if GetTech ( i , side ) <> state_researched then
2046: LD_VAR 0 4
2050: PPUSH
2051: LD_VAR 0 1
2055: PPUSH
2056: CALL_OW 321
2060: PUSH
2061: LD_INT 2
2063: NONEQUAL
2064: IFFALSE 2078
// begin result := false ;
2066: LD_ADDR_VAR 0 3
2070: PUSH
2071: LD_INT 0
2073: ST_TO_ADDR
// exit ;
2074: POP
2075: POP
2076: GO 2082
// end ;
2078: GO 2043
2080: POP
2081: POP
// end ;
2082: LD_VAR 0 3
2086: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2087: LD_INT 0
2089: PPUSH
2090: PPUSH
2091: PPUSH
2092: PPUSH
2093: PPUSH
2094: PPUSH
2095: PPUSH
2096: PPUSH
2097: PPUSH
2098: PPUSH
2099: PPUSH
2100: PPUSH
2101: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2102: LD_VAR 0 1
2106: NOT
2107: PUSH
2108: LD_VAR 0 1
2112: PPUSH
2113: CALL_OW 257
2117: PUSH
2118: LD_INT 9
2120: NONEQUAL
2121: OR
2122: IFFALSE 2126
// exit ;
2124: GO 2699
// side := GetSide ( unit ) ;
2126: LD_ADDR_VAR 0 9
2130: PUSH
2131: LD_VAR 0 1
2135: PPUSH
2136: CALL_OW 255
2140: ST_TO_ADDR
// tech_space := tech_spacanom ;
2141: LD_ADDR_VAR 0 12
2145: PUSH
2146: LD_INT 29
2148: ST_TO_ADDR
// tech_time := tech_taurad ;
2149: LD_ADDR_VAR 0 13
2153: PUSH
2154: LD_INT 28
2156: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2157: LD_ADDR_VAR 0 11
2161: PUSH
2162: LD_VAR 0 1
2166: PPUSH
2167: CALL_OW 310
2171: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2172: LD_VAR 0 11
2176: PPUSH
2177: CALL_OW 247
2181: PUSH
2182: LD_INT 2
2184: EQUAL
2185: IFFALSE 2189
// exit ;
2187: GO 2699
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2189: LD_ADDR_VAR 0 8
2193: PUSH
2194: LD_INT 81
2196: PUSH
2197: LD_VAR 0 9
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 3
2208: PUSH
2209: LD_INT 21
2211: PUSH
2212: LD_INT 3
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PPUSH
2227: CALL_OW 69
2231: ST_TO_ADDR
// if not tmp then
2232: LD_VAR 0 8
2236: NOT
2237: IFFALSE 2241
// exit ;
2239: GO 2699
// if in_unit then
2241: LD_VAR 0 11
2245: IFFALSE 2269
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2247: LD_ADDR_VAR 0 10
2251: PUSH
2252: LD_VAR 0 8
2256: PPUSH
2257: LD_VAR 0 11
2261: PPUSH
2262: CALL_OW 74
2266: ST_TO_ADDR
2267: GO 2289
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2269: LD_ADDR_VAR 0 10
2273: PUSH
2274: LD_VAR 0 8
2278: PPUSH
2279: LD_VAR 0 1
2283: PPUSH
2284: CALL_OW 74
2288: ST_TO_ADDR
// if not enemy then
2289: LD_VAR 0 10
2293: NOT
2294: IFFALSE 2298
// exit ;
2296: GO 2699
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2298: LD_VAR 0 11
2302: PUSH
2303: LD_VAR 0 11
2307: PPUSH
2308: LD_VAR 0 10
2312: PPUSH
2313: CALL_OW 296
2317: PUSH
2318: LD_INT 13
2320: GREATER
2321: AND
2322: PUSH
2323: LD_VAR 0 1
2327: PPUSH
2328: LD_VAR 0 10
2332: PPUSH
2333: CALL_OW 296
2337: PUSH
2338: LD_INT 12
2340: GREATER
2341: OR
2342: IFFALSE 2346
// exit ;
2344: GO 2699
// missile := [ 1 ] ;
2346: LD_ADDR_VAR 0 14
2350: PUSH
2351: LD_INT 1
2353: PUSH
2354: EMPTY
2355: LIST
2356: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2357: LD_VAR 0 9
2361: PPUSH
2362: LD_VAR 0 12
2366: PPUSH
2367: CALL_OW 325
2371: IFFALSE 2400
// missile := Replace ( missile , missile + 1 , 2 ) ;
2373: LD_ADDR_VAR 0 14
2377: PUSH
2378: LD_VAR 0 14
2382: PPUSH
2383: LD_VAR 0 14
2387: PUSH
2388: LD_INT 1
2390: PLUS
2391: PPUSH
2392: LD_INT 2
2394: PPUSH
2395: CALL_OW 1
2399: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2400: LD_VAR 0 9
2404: PPUSH
2405: LD_VAR 0 13
2409: PPUSH
2410: CALL_OW 325
2414: PUSH
2415: LD_VAR 0 10
2419: PPUSH
2420: CALL_OW 255
2424: PPUSH
2425: LD_VAR 0 13
2429: PPUSH
2430: CALL_OW 325
2434: NOT
2435: AND
2436: IFFALSE 2465
// missile := Replace ( missile , missile + 1 , 3 ) ;
2438: LD_ADDR_VAR 0 14
2442: PUSH
2443: LD_VAR 0 14
2447: PPUSH
2448: LD_VAR 0 14
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: LD_INT 3
2459: PPUSH
2460: CALL_OW 1
2464: ST_TO_ADDR
// if missile < 2 then
2465: LD_VAR 0 14
2469: PUSH
2470: LD_INT 2
2472: LESS
2473: IFFALSE 2477
// exit ;
2475: GO 2699
// x := GetX ( enemy ) ;
2477: LD_ADDR_VAR 0 4
2481: PUSH
2482: LD_VAR 0 10
2486: PPUSH
2487: CALL_OW 250
2491: ST_TO_ADDR
// y := GetY ( enemy ) ;
2492: LD_ADDR_VAR 0 5
2496: PUSH
2497: LD_VAR 0 10
2501: PPUSH
2502: CALL_OW 251
2506: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2507: LD_ADDR_VAR 0 6
2511: PUSH
2512: LD_VAR 0 4
2516: PUSH
2517: LD_INT 1
2519: NEG
2520: PPUSH
2521: LD_INT 1
2523: PPUSH
2524: CALL_OW 12
2528: PLUS
2529: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2530: LD_ADDR_VAR 0 7
2534: PUSH
2535: LD_VAR 0 5
2539: PUSH
2540: LD_INT 1
2542: NEG
2543: PPUSH
2544: LD_INT 1
2546: PPUSH
2547: CALL_OW 12
2551: PLUS
2552: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2553: LD_VAR 0 6
2557: PPUSH
2558: LD_VAR 0 7
2562: PPUSH
2563: CALL_OW 488
2567: NOT
2568: IFFALSE 2590
// begin _x := x ;
2570: LD_ADDR_VAR 0 6
2574: PUSH
2575: LD_VAR 0 4
2579: ST_TO_ADDR
// _y := y ;
2580: LD_ADDR_VAR 0 7
2584: PUSH
2585: LD_VAR 0 5
2589: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2590: LD_ADDR_VAR 0 3
2594: PUSH
2595: LD_INT 1
2597: PPUSH
2598: LD_VAR 0 14
2602: PPUSH
2603: CALL_OW 12
2607: ST_TO_ADDR
// case i of 1 :
2608: LD_VAR 0 3
2612: PUSH
2613: LD_INT 1
2615: DOUBLE
2616: EQUAL
2617: IFTRUE 2621
2619: GO 2638
2621: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2622: LD_VAR 0 1
2626: PPUSH
2627: LD_VAR 0 10
2631: PPUSH
2632: CALL_OW 115
2636: GO 2699
2638: LD_INT 2
2640: DOUBLE
2641: EQUAL
2642: IFTRUE 2646
2644: GO 2668
2646: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2647: LD_VAR 0 1
2651: PPUSH
2652: LD_VAR 0 6
2656: PPUSH
2657: LD_VAR 0 7
2661: PPUSH
2662: CALL_OW 153
2666: GO 2699
2668: LD_INT 3
2670: DOUBLE
2671: EQUAL
2672: IFTRUE 2676
2674: GO 2698
2676: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2677: LD_VAR 0 1
2681: PPUSH
2682: LD_VAR 0 6
2686: PPUSH
2687: LD_VAR 0 7
2691: PPUSH
2692: CALL_OW 154
2696: GO 2699
2698: POP
// end ;
2699: LD_VAR 0 2
2703: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2704: LD_INT 0
2706: PPUSH
2707: PPUSH
2708: PPUSH
2709: PPUSH
2710: PPUSH
2711: PPUSH
// if not unit or not building then
2712: LD_VAR 0 1
2716: NOT
2717: PUSH
2718: LD_VAR 0 2
2722: NOT
2723: OR
2724: IFFALSE 2728
// exit ;
2726: GO 2886
// x := GetX ( building ) ;
2728: LD_ADDR_VAR 0 5
2732: PUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: CALL_OW 250
2742: ST_TO_ADDR
// y := GetY ( building ) ;
2743: LD_ADDR_VAR 0 6
2747: PUSH
2748: LD_VAR 0 2
2752: PPUSH
2753: CALL_OW 251
2757: ST_TO_ADDR
// for i = 0 to 5 do
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: DOUBLE
2764: LD_INT 0
2766: DEC
2767: ST_TO_ADDR
2768: LD_INT 5
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2884
// begin _x := ShiftX ( x , i , 3 ) ;
2774: LD_ADDR_VAR 0 7
2778: PUSH
2779: LD_VAR 0 5
2783: PPUSH
2784: LD_VAR 0 4
2788: PPUSH
2789: LD_INT 3
2791: PPUSH
2792: CALL_OW 272
2796: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2797: LD_ADDR_VAR 0 8
2801: PUSH
2802: LD_VAR 0 6
2806: PPUSH
2807: LD_VAR 0 4
2811: PPUSH
2812: LD_INT 3
2814: PPUSH
2815: CALL_OW 273
2819: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2820: LD_VAR 0 7
2824: PPUSH
2825: LD_VAR 0 8
2829: PPUSH
2830: CALL_OW 488
2834: NOT
2835: IFFALSE 2839
// continue ;
2837: GO 2771
// if HexInfo ( _x , _y ) = 0 then
2839: LD_VAR 0 7
2843: PPUSH
2844: LD_VAR 0 8
2848: PPUSH
2849: CALL_OW 428
2853: PUSH
2854: LD_INT 0
2856: EQUAL
2857: IFFALSE 2882
// begin ComMoveXY ( unit , _x , _y ) ;
2859: LD_VAR 0 1
2863: PPUSH
2864: LD_VAR 0 7
2868: PPUSH
2869: LD_VAR 0 8
2873: PPUSH
2874: CALL_OW 111
// exit ;
2878: POP
2879: POP
2880: GO 2886
// end ; end ;
2882: GO 2771
2884: POP
2885: POP
// end ;
2886: LD_VAR 0 3
2890: RET
// export function ScanBase ( side , base_area ) ; begin
2891: LD_INT 0
2893: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_VAR 0 2
2903: PPUSH
2904: LD_INT 81
2906: PUSH
2907: LD_VAR 0 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PPUSH
2916: CALL_OW 70
2920: ST_TO_ADDR
// end ;
2921: LD_VAR 0 3
2925: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2926: LD_INT 0
2928: PPUSH
2929: PPUSH
2930: PPUSH
2931: PPUSH
// result := false ;
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: LD_INT 0
2939: ST_TO_ADDR
// side := GetSide ( unit ) ;
2940: LD_ADDR_VAR 0 3
2944: PUSH
2945: LD_VAR 0 1
2949: PPUSH
2950: CALL_OW 255
2954: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2955: LD_ADDR_VAR 0 4
2959: PUSH
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 248
2969: ST_TO_ADDR
// case nat of 1 :
2970: LD_VAR 0 4
2974: PUSH
2975: LD_INT 1
2977: DOUBLE
2978: EQUAL
2979: IFTRUE 2983
2981: GO 2994
2983: POP
// tech := tech_lassight ; 2 :
2984: LD_ADDR_VAR 0 5
2988: PUSH
2989: LD_INT 12
2991: ST_TO_ADDR
2992: GO 3033
2994: LD_INT 2
2996: DOUBLE
2997: EQUAL
2998: IFTRUE 3002
3000: GO 3013
3002: POP
// tech := tech_mortar ; 3 :
3003: LD_ADDR_VAR 0 5
3007: PUSH
3008: LD_INT 41
3010: ST_TO_ADDR
3011: GO 3033
3013: LD_INT 3
3015: DOUBLE
3016: EQUAL
3017: IFTRUE 3021
3019: GO 3032
3021: POP
// tech := tech_bazooka ; end ;
3022: LD_ADDR_VAR 0 5
3026: PUSH
3027: LD_INT 44
3029: ST_TO_ADDR
3030: GO 3033
3032: POP
// if Researched ( side , tech ) then
3033: LD_VAR 0 3
3037: PPUSH
3038: LD_VAR 0 5
3042: PPUSH
3043: CALL_OW 325
3047: IFFALSE 3074
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3049: LD_ADDR_VAR 0 2
3053: PUSH
3054: LD_INT 5
3056: PUSH
3057: LD_INT 8
3059: PUSH
3060: LD_INT 9
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: LIST
3067: PUSH
3068: LD_VAR 0 4
3072: ARRAY
3073: ST_TO_ADDR
// end ;
3074: LD_VAR 0 2
3078: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// if not mines then
3084: LD_VAR 0 2
3088: NOT
3089: IFFALSE 3093
// exit ;
3091: GO 3237
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3093: LD_ADDR_VAR 0 5
3097: PUSH
3098: LD_INT 81
3100: PUSH
3101: LD_VAR 0 1
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: PUSH
3110: LD_INT 3
3112: PUSH
3113: LD_INT 21
3115: PUSH
3116: LD_INT 3
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: ST_TO_ADDR
// for i in mines do
3136: LD_ADDR_VAR 0 4
3140: PUSH
3141: LD_VAR 0 2
3145: PUSH
3146: FOR_IN
3147: IFFALSE 3235
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3149: LD_VAR 0 4
3153: PUSH
3154: LD_INT 1
3156: ARRAY
3157: PPUSH
3158: LD_VAR 0 4
3162: PUSH
3163: LD_INT 2
3165: ARRAY
3166: PPUSH
3167: CALL_OW 458
3171: NOT
3172: IFFALSE 3176
// continue ;
3174: GO 3146
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3176: LD_VAR 0 4
3180: PUSH
3181: LD_INT 1
3183: ARRAY
3184: PPUSH
3185: LD_VAR 0 4
3189: PUSH
3190: LD_INT 2
3192: ARRAY
3193: PPUSH
3194: CALL_OW 428
3198: PUSH
3199: LD_VAR 0 5
3203: IN
3204: IFFALSE 3233
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3206: LD_VAR 0 4
3210: PUSH
3211: LD_INT 1
3213: ARRAY
3214: PPUSH
3215: LD_VAR 0 4
3219: PUSH
3220: LD_INT 2
3222: ARRAY
3223: PPUSH
3224: LD_VAR 0 1
3228: PPUSH
3229: CALL_OW 456
// end ;
3233: GO 3146
3235: POP
3236: POP
// end ;
3237: LD_VAR 0 3
3241: RET
// export function Count ( array ) ; var i ; begin
3242: LD_INT 0
3244: PPUSH
3245: PPUSH
// result := 0 ;
3246: LD_ADDR_VAR 0 2
3250: PUSH
3251: LD_INT 0
3253: ST_TO_ADDR
// for i in array do
3254: LD_ADDR_VAR 0 3
3258: PUSH
3259: LD_VAR 0 1
3263: PUSH
3264: FOR_IN
3265: IFFALSE 3289
// if i then
3267: LD_VAR 0 3
3271: IFFALSE 3287
// result := result + 1 ;
3273: LD_ADDR_VAR 0 2
3277: PUSH
3278: LD_VAR 0 2
3282: PUSH
3283: LD_INT 1
3285: PLUS
3286: ST_TO_ADDR
3287: GO 3264
3289: POP
3290: POP
// end ;
3291: LD_VAR 0 2
3295: RET
// export function IsEmpty ( building ) ; begin
3296: LD_INT 0
3298: PPUSH
// if not building then
3299: LD_VAR 0 1
3303: NOT
3304: IFFALSE 3308
// exit ;
3306: GO 3351
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3308: LD_ADDR_VAR 0 2
3312: PUSH
3313: LD_VAR 0 1
3317: PUSH
3318: LD_INT 22
3320: PUSH
3321: LD_VAR 0 1
3325: PPUSH
3326: CALL_OW 255
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PUSH
3335: LD_INT 58
3337: PUSH
3338: EMPTY
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 69
3349: IN
3350: ST_TO_ADDR
// end ;
3351: LD_VAR 0 2
3355: RET
// export function IsNotFull ( building ) ; var places ; begin
3356: LD_INT 0
3358: PPUSH
3359: PPUSH
// if not building then
3360: LD_VAR 0 1
3364: NOT
3365: IFFALSE 3369
// exit ;
3367: GO 3540
// result := false ;
3369: LD_ADDR_VAR 0 2
3373: PUSH
3374: LD_INT 0
3376: ST_TO_ADDR
// places := 0 ;
3377: LD_ADDR_VAR 0 3
3381: PUSH
3382: LD_INT 0
3384: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
3385: LD_VAR 0 1
3389: PPUSH
3390: CALL_OW 266
3394: PUSH
3395: LD_INT 0
3397: DOUBLE
3398: EQUAL
3399: IFTRUE 3457
3401: LD_INT 1
3403: DOUBLE
3404: EQUAL
3405: IFTRUE 3457
3407: LD_INT 6
3409: DOUBLE
3410: EQUAL
3411: IFTRUE 3457
3413: LD_INT 7
3415: DOUBLE
3416: EQUAL
3417: IFTRUE 3457
3419: LD_INT 8
3421: DOUBLE
3422: EQUAL
3423: IFTRUE 3457
3425: LD_INT 4
3427: DOUBLE
3428: EQUAL
3429: IFTRUE 3457
3431: LD_INT 5
3433: DOUBLE
3434: EQUAL
3435: IFTRUE 3457
3437: LD_INT 2
3439: DOUBLE
3440: EQUAL
3441: IFTRUE 3457
3443: LD_INT 3
3445: DOUBLE
3446: EQUAL
3447: IFTRUE 3457
3449: LD_INT 35
3451: DOUBLE
3452: EQUAL
3453: IFTRUE 3457
3455: GO 3468
3457: POP
// places := 6 ; b_bunker , b_breastwork :
3458: LD_ADDR_VAR 0 3
3462: PUSH
3463: LD_INT 6
3465: ST_TO_ADDR
3466: GO 3513
3468: LD_INT 32
3470: DOUBLE
3471: EQUAL
3472: IFTRUE 3482
3474: LD_INT 31
3476: DOUBLE
3477: EQUAL
3478: IFTRUE 3482
3480: GO 3493
3482: POP
// places := 1 ; b_control_tower :
3483: LD_ADDR_VAR 0 3
3487: PUSH
3488: LD_INT 1
3490: ST_TO_ADDR
3491: GO 3513
3493: LD_INT 36
3495: DOUBLE
3496: EQUAL
3497: IFTRUE 3501
3499: GO 3512
3501: POP
// places := 3 ; end ;
3502: LD_ADDR_VAR 0 3
3506: PUSH
3507: LD_INT 3
3509: ST_TO_ADDR
3510: GO 3513
3512: POP
// if places then
3513: LD_VAR 0 3
3517: IFFALSE 3540
// result := UnitsInside ( building ) < places ;
3519: LD_ADDR_VAR 0 2
3523: PUSH
3524: LD_VAR 0 1
3528: PPUSH
3529: CALL_OW 313
3533: PUSH
3534: LD_VAR 0 3
3538: LESS
3539: ST_TO_ADDR
// end ;
3540: LD_VAR 0 2
3544: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3545: LD_INT 0
3547: PPUSH
3548: PPUSH
3549: PPUSH
3550: PPUSH
// tmp := [ ] ;
3551: LD_ADDR_VAR 0 3
3555: PUSH
3556: EMPTY
3557: ST_TO_ADDR
// list := [ ] ;
3558: LD_ADDR_VAR 0 5
3562: PUSH
3563: EMPTY
3564: ST_TO_ADDR
// for i = 16 to 25 do
3565: LD_ADDR_VAR 0 4
3569: PUSH
3570: DOUBLE
3571: LD_INT 16
3573: DEC
3574: ST_TO_ADDR
3575: LD_INT 25
3577: PUSH
3578: FOR_TO
3579: IFFALSE 3652
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3581: LD_ADDR_VAR 0 3
3585: PUSH
3586: LD_VAR 0 3
3590: PUSH
3591: LD_INT 22
3593: PUSH
3594: LD_VAR 0 1
3598: PPUSH
3599: CALL_OW 255
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PUSH
3608: LD_INT 91
3610: PUSH
3611: LD_VAR 0 1
3615: PUSH
3616: LD_INT 6
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_VAR 0 4
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: LIST
3640: PUSH
3641: EMPTY
3642: LIST
3643: PPUSH
3644: CALL_OW 69
3648: ADD
3649: ST_TO_ADDR
3650: GO 3578
3652: POP
3653: POP
// for i = 1 to tmp do
3654: LD_ADDR_VAR 0 4
3658: PUSH
3659: DOUBLE
3660: LD_INT 1
3662: DEC
3663: ST_TO_ADDR
3664: LD_VAR 0 3
3668: PUSH
3669: FOR_TO
3670: IFFALSE 3758
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3672: LD_ADDR_VAR 0 5
3676: PUSH
3677: LD_VAR 0 5
3681: PUSH
3682: LD_VAR 0 3
3686: PUSH
3687: LD_VAR 0 4
3691: ARRAY
3692: PPUSH
3693: CALL_OW 266
3697: PUSH
3698: LD_VAR 0 3
3702: PUSH
3703: LD_VAR 0 4
3707: ARRAY
3708: PPUSH
3709: CALL_OW 250
3713: PUSH
3714: LD_VAR 0 3
3718: PUSH
3719: LD_VAR 0 4
3723: ARRAY
3724: PPUSH
3725: CALL_OW 251
3729: PUSH
3730: LD_VAR 0 3
3734: PUSH
3735: LD_VAR 0 4
3739: ARRAY
3740: PPUSH
3741: CALL_OW 254
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: PUSH
3752: EMPTY
3753: LIST
3754: ADD
3755: ST_TO_ADDR
3756: GO 3669
3758: POP
3759: POP
// result := list ;
3760: LD_ADDR_VAR 0 2
3764: PUSH
3765: LD_VAR 0 5
3769: ST_TO_ADDR
// end ;
3770: LD_VAR 0 2
3774: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3775: LD_INT 0
3777: PPUSH
3778: PPUSH
3779: PPUSH
3780: PPUSH
3781: PPUSH
3782: PPUSH
3783: PPUSH
// if not factory then
3784: LD_VAR 0 1
3788: NOT
3789: IFFALSE 3793
// exit ;
3791: GO 4386
// if control = control_apeman then
3793: LD_VAR 0 4
3797: PUSH
3798: LD_INT 5
3800: EQUAL
3801: IFFALSE 3910
// begin tmp := UnitsInside ( factory ) ;
3803: LD_ADDR_VAR 0 8
3807: PUSH
3808: LD_VAR 0 1
3812: PPUSH
3813: CALL_OW 313
3817: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3818: LD_VAR 0 8
3822: PPUSH
3823: LD_INT 25
3825: PUSH
3826: LD_INT 12
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PPUSH
3833: CALL_OW 72
3837: NOT
3838: IFFALSE 3848
// control := control_manual ;
3840: LD_ADDR_VAR 0 4
3844: PUSH
3845: LD_INT 1
3847: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3848: LD_ADDR_VAR 0 8
3852: PUSH
3853: LD_VAR 0 1
3857: PPUSH
3858: CALL 3545 0 1
3862: ST_TO_ADDR
// if tmp then
3863: LD_VAR 0 8
3867: IFFALSE 3910
// begin for i in tmp do
3869: LD_ADDR_VAR 0 7
3873: PUSH
3874: LD_VAR 0 8
3878: PUSH
3879: FOR_IN
3880: IFFALSE 3908
// if i [ 1 ] = b_ext_radio then
3882: LD_VAR 0 7
3886: PUSH
3887: LD_INT 1
3889: ARRAY
3890: PUSH
3891: LD_INT 22
3893: EQUAL
3894: IFFALSE 3906
// begin control := control_remote ;
3896: LD_ADDR_VAR 0 4
3900: PUSH
3901: LD_INT 2
3903: ST_TO_ADDR
// break ;
3904: GO 3908
// end ;
3906: GO 3879
3908: POP
3909: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3910: LD_VAR 0 1
3914: PPUSH
3915: LD_VAR 0 2
3919: PPUSH
3920: LD_VAR 0 3
3924: PPUSH
3925: LD_VAR 0 4
3929: PPUSH
3930: LD_VAR 0 5
3934: PPUSH
3935: CALL_OW 448
3939: IFFALSE 3974
// begin result := [ chassis , engine , control , weapon ] ;
3941: LD_ADDR_VAR 0 6
3945: PUSH
3946: LD_VAR 0 2
3950: PUSH
3951: LD_VAR 0 3
3955: PUSH
3956: LD_VAR 0 4
3960: PUSH
3961: LD_VAR 0 5
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: ST_TO_ADDR
// exit ;
3972: GO 4386
// end ; _chassis := AvailableChassisList ( factory ) ;
3974: LD_ADDR_VAR 0 9
3978: PUSH
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 475
3988: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3989: LD_ADDR_VAR 0 11
3993: PUSH
3994: LD_VAR 0 1
3998: PPUSH
3999: CALL_OW 476
4003: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4004: LD_ADDR_VAR 0 12
4008: PUSH
4009: LD_VAR 0 1
4013: PPUSH
4014: CALL_OW 477
4018: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4019: LD_ADDR_VAR 0 10
4023: PUSH
4024: LD_VAR 0 1
4028: PPUSH
4029: CALL_OW 478
4033: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4034: LD_VAR 0 9
4038: NOT
4039: PUSH
4040: LD_VAR 0 11
4044: NOT
4045: OR
4046: PUSH
4047: LD_VAR 0 12
4051: NOT
4052: OR
4053: PUSH
4054: LD_VAR 0 10
4058: NOT
4059: OR
4060: IFFALSE 4095
// begin result := [ chassis , engine , control , weapon ] ;
4062: LD_ADDR_VAR 0 6
4066: PUSH
4067: LD_VAR 0 2
4071: PUSH
4072: LD_VAR 0 3
4076: PUSH
4077: LD_VAR 0 4
4081: PUSH
4082: LD_VAR 0 5
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: ST_TO_ADDR
// exit ;
4093: GO 4386
// end ; if not chassis in _chassis then
4095: LD_VAR 0 2
4099: PUSH
4100: LD_VAR 0 9
4104: IN
4105: NOT
4106: IFFALSE 4132
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: LD_VAR 0 9
4117: PUSH
4118: LD_INT 1
4120: PPUSH
4121: LD_VAR 0 9
4125: PPUSH
4126: CALL_OW 12
4130: ARRAY
4131: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4132: LD_VAR 0 2
4136: PPUSH
4137: LD_VAR 0 3
4141: PPUSH
4142: CALL 4391 0 2
4146: NOT
4147: IFFALSE 4206
// repeat engine := _engine [ 1 ] ;
4149: LD_ADDR_VAR 0 3
4153: PUSH
4154: LD_VAR 0 11
4158: PUSH
4159: LD_INT 1
4161: ARRAY
4162: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4163: LD_ADDR_VAR 0 11
4167: PUSH
4168: LD_VAR 0 11
4172: PPUSH
4173: LD_INT 1
4175: PPUSH
4176: CALL_OW 3
4180: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4181: LD_VAR 0 2
4185: PPUSH
4186: LD_VAR 0 3
4190: PPUSH
4191: CALL 4391 0 2
4195: PUSH
4196: LD_VAR 0 11
4200: PUSH
4201: EMPTY
4202: EQUAL
4203: OR
4204: IFFALSE 4149
// if not control in _control then
4206: LD_VAR 0 4
4210: PUSH
4211: LD_VAR 0 12
4215: IN
4216: NOT
4217: IFFALSE 4243
// control := _control [ rand ( 1 , _control ) ] ;
4219: LD_ADDR_VAR 0 4
4223: PUSH
4224: LD_VAR 0 12
4228: PUSH
4229: LD_INT 1
4231: PPUSH
4232: LD_VAR 0 12
4236: PPUSH
4237: CALL_OW 12
4241: ARRAY
4242: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4243: LD_VAR 0 2
4247: PPUSH
4248: LD_VAR 0 5
4252: PPUSH
4253: CALL 4611 0 2
4257: NOT
4258: IFFALSE 4317
// repeat weapon := _weapon [ 1 ] ;
4260: LD_ADDR_VAR 0 5
4264: PUSH
4265: LD_VAR 0 10
4269: PUSH
4270: LD_INT 1
4272: ARRAY
4273: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4274: LD_ADDR_VAR 0 10
4278: PUSH
4279: LD_VAR 0 10
4283: PPUSH
4284: LD_INT 1
4286: PPUSH
4287: CALL_OW 3
4291: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4292: LD_VAR 0 2
4296: PPUSH
4297: LD_VAR 0 5
4301: PPUSH
4302: CALL 4611 0 2
4306: PUSH
4307: LD_VAR 0 10
4311: PUSH
4312: EMPTY
4313: EQUAL
4314: OR
4315: IFFALSE 4260
// result := [ ] ;
4317: LD_ADDR_VAR 0 6
4321: PUSH
4322: EMPTY
4323: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4324: LD_VAR 0 1
4328: PPUSH
4329: LD_VAR 0 2
4333: PPUSH
4334: LD_VAR 0 3
4338: PPUSH
4339: LD_VAR 0 4
4343: PPUSH
4344: LD_VAR 0 5
4348: PPUSH
4349: CALL_OW 448
4353: IFFALSE 4386
// result := [ chassis , engine , control , weapon ] ;
4355: LD_ADDR_VAR 0 6
4359: PUSH
4360: LD_VAR 0 2
4364: PUSH
4365: LD_VAR 0 3
4369: PUSH
4370: LD_VAR 0 4
4374: PUSH
4375: LD_VAR 0 5
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: ST_TO_ADDR
// end ;
4386: LD_VAR 0 6
4390: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4391: LD_INT 0
4393: PPUSH
// if not chassis or not engine then
4394: LD_VAR 0 1
4398: NOT
4399: PUSH
4400: LD_VAR 0 2
4404: NOT
4405: OR
4406: IFFALSE 4410
// exit ;
4408: GO 4606
// case engine of engine_solar :
4410: LD_VAR 0 2
4414: PUSH
4415: LD_INT 2
4417: DOUBLE
4418: EQUAL
4419: IFTRUE 4423
4421: GO 4461
4423: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4424: LD_ADDR_VAR 0 3
4428: PUSH
4429: LD_INT 11
4431: PUSH
4432: LD_INT 12
4434: PUSH
4435: LD_INT 13
4437: PUSH
4438: LD_INT 14
4440: PUSH
4441: LD_INT 1
4443: PUSH
4444: LD_INT 2
4446: PUSH
4447: LD_INT 3
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: ST_TO_ADDR
4459: GO 4590
4461: LD_INT 1
4463: DOUBLE
4464: EQUAL
4465: IFTRUE 4469
4467: GO 4531
4469: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4470: LD_ADDR_VAR 0 3
4474: PUSH
4475: LD_INT 11
4477: PUSH
4478: LD_INT 12
4480: PUSH
4481: LD_INT 13
4483: PUSH
4484: LD_INT 14
4486: PUSH
4487: LD_INT 1
4489: PUSH
4490: LD_INT 2
4492: PUSH
4493: LD_INT 3
4495: PUSH
4496: LD_INT 4
4498: PUSH
4499: LD_INT 5
4501: PUSH
4502: LD_INT 21
4504: PUSH
4505: LD_INT 23
4507: PUSH
4508: LD_INT 22
4510: PUSH
4511: LD_INT 24
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: ST_TO_ADDR
4529: GO 4590
4531: LD_INT 3
4533: DOUBLE
4534: EQUAL
4535: IFTRUE 4539
4537: GO 4589
4539: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4540: LD_ADDR_VAR 0 3
4544: PUSH
4545: LD_INT 13
4547: PUSH
4548: LD_INT 14
4550: PUSH
4551: LD_INT 2
4553: PUSH
4554: LD_INT 3
4556: PUSH
4557: LD_INT 4
4559: PUSH
4560: LD_INT 5
4562: PUSH
4563: LD_INT 21
4565: PUSH
4566: LD_INT 22
4568: PUSH
4569: LD_INT 23
4571: PUSH
4572: LD_INT 24
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: ST_TO_ADDR
4587: GO 4590
4589: POP
// result := ( chassis in result ) ;
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: LD_VAR 0 1
4599: PUSH
4600: LD_VAR 0 3
4604: IN
4605: ST_TO_ADDR
// end ;
4606: LD_VAR 0 3
4610: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4611: LD_INT 0
4613: PPUSH
// if not chassis or not weapon then
4614: LD_VAR 0 1
4618: NOT
4619: PUSH
4620: LD_VAR 0 2
4624: NOT
4625: OR
4626: IFFALSE 4630
// exit ;
4628: GO 5690
// case weapon of us_machine_gun :
4630: LD_VAR 0 2
4634: PUSH
4635: LD_INT 2
4637: DOUBLE
4638: EQUAL
4639: IFTRUE 4643
4641: GO 4673
4643: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4644: LD_ADDR_VAR 0 3
4648: PUSH
4649: LD_INT 1
4651: PUSH
4652: LD_INT 2
4654: PUSH
4655: LD_INT 3
4657: PUSH
4658: LD_INT 4
4660: PUSH
4661: LD_INT 5
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: ST_TO_ADDR
4671: GO 5674
4673: LD_INT 3
4675: DOUBLE
4676: EQUAL
4677: IFTRUE 4681
4679: GO 4711
4681: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_INT 1
4689: PUSH
4690: LD_INT 2
4692: PUSH
4693: LD_INT 3
4695: PUSH
4696: LD_INT 4
4698: PUSH
4699: LD_INT 5
4701: PUSH
4702: EMPTY
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: ST_TO_ADDR
4709: GO 5674
4711: LD_INT 11
4713: DOUBLE
4714: EQUAL
4715: IFTRUE 4719
4717: GO 4749
4719: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4720: LD_ADDR_VAR 0 3
4724: PUSH
4725: LD_INT 1
4727: PUSH
4728: LD_INT 2
4730: PUSH
4731: LD_INT 3
4733: PUSH
4734: LD_INT 4
4736: PUSH
4737: LD_INT 5
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: ST_TO_ADDR
4747: GO 5674
4749: LD_INT 4
4751: DOUBLE
4752: EQUAL
4753: IFTRUE 4757
4755: GO 4783
4757: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4758: LD_ADDR_VAR 0 3
4762: PUSH
4763: LD_INT 2
4765: PUSH
4766: LD_INT 3
4768: PUSH
4769: LD_INT 4
4771: PUSH
4772: LD_INT 5
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 5674
4783: LD_INT 5
4785: DOUBLE
4786: EQUAL
4787: IFTRUE 4791
4789: GO 4817
4791: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4792: LD_ADDR_VAR 0 3
4796: PUSH
4797: LD_INT 2
4799: PUSH
4800: LD_INT 3
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: LD_INT 5
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: ST_TO_ADDR
4815: GO 5674
4817: LD_INT 9
4819: DOUBLE
4820: EQUAL
4821: IFTRUE 4825
4823: GO 4851
4825: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4826: LD_ADDR_VAR 0 3
4830: PUSH
4831: LD_INT 2
4833: PUSH
4834: LD_INT 3
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: LD_INT 5
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: ST_TO_ADDR
4849: GO 5674
4851: LD_INT 7
4853: DOUBLE
4854: EQUAL
4855: IFTRUE 4859
4857: GO 4885
4859: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4860: LD_ADDR_VAR 0 3
4864: PUSH
4865: LD_INT 2
4867: PUSH
4868: LD_INT 3
4870: PUSH
4871: LD_INT 4
4873: PUSH
4874: LD_INT 5
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: ST_TO_ADDR
4883: GO 5674
4885: LD_INT 12
4887: DOUBLE
4888: EQUAL
4889: IFTRUE 4893
4891: GO 4919
4893: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4894: LD_ADDR_VAR 0 3
4898: PUSH
4899: LD_INT 2
4901: PUSH
4902: LD_INT 3
4904: PUSH
4905: LD_INT 4
4907: PUSH
4908: LD_INT 5
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: ST_TO_ADDR
4917: GO 5674
4919: LD_INT 13
4921: DOUBLE
4922: EQUAL
4923: IFTRUE 4927
4925: GO 4953
4927: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4928: LD_ADDR_VAR 0 3
4932: PUSH
4933: LD_INT 2
4935: PUSH
4936: LD_INT 3
4938: PUSH
4939: LD_INT 4
4941: PUSH
4942: LD_INT 5
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: ST_TO_ADDR
4951: GO 5674
4953: LD_INT 14
4955: DOUBLE
4956: EQUAL
4957: IFTRUE 4961
4959: GO 4979
4961: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_INT 4
4969: PUSH
4970: LD_INT 5
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: ST_TO_ADDR
4977: GO 5674
4979: LD_INT 6
4981: DOUBLE
4982: EQUAL
4983: IFTRUE 4987
4985: GO 5005
4987: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4988: LD_ADDR_VAR 0 3
4992: PUSH
4993: LD_INT 4
4995: PUSH
4996: LD_INT 5
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: ST_TO_ADDR
5003: GO 5674
5005: LD_INT 10
5007: DOUBLE
5008: EQUAL
5009: IFTRUE 5013
5011: GO 5031
5013: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5014: LD_ADDR_VAR 0 3
5018: PUSH
5019: LD_INT 4
5021: PUSH
5022: LD_INT 5
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: ST_TO_ADDR
5029: GO 5674
5031: LD_INT 22
5033: DOUBLE
5034: EQUAL
5035: IFTRUE 5039
5037: GO 5065
5039: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5040: LD_ADDR_VAR 0 3
5044: PUSH
5045: LD_INT 11
5047: PUSH
5048: LD_INT 12
5050: PUSH
5051: LD_INT 13
5053: PUSH
5054: LD_INT 14
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: ST_TO_ADDR
5063: GO 5674
5065: LD_INT 23
5067: DOUBLE
5068: EQUAL
5069: IFTRUE 5073
5071: GO 5099
5073: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5074: LD_ADDR_VAR 0 3
5078: PUSH
5079: LD_INT 11
5081: PUSH
5082: LD_INT 12
5084: PUSH
5085: LD_INT 13
5087: PUSH
5088: LD_INT 14
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: ST_TO_ADDR
5097: GO 5674
5099: LD_INT 24
5101: DOUBLE
5102: EQUAL
5103: IFTRUE 5107
5105: GO 5133
5107: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5108: LD_ADDR_VAR 0 3
5112: PUSH
5113: LD_INT 11
5115: PUSH
5116: LD_INT 12
5118: PUSH
5119: LD_INT 13
5121: PUSH
5122: LD_INT 14
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: ST_TO_ADDR
5131: GO 5674
5133: LD_INT 30
5135: DOUBLE
5136: EQUAL
5137: IFTRUE 5141
5139: GO 5167
5141: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5142: LD_ADDR_VAR 0 3
5146: PUSH
5147: LD_INT 11
5149: PUSH
5150: LD_INT 12
5152: PUSH
5153: LD_INT 13
5155: PUSH
5156: LD_INT 14
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: ST_TO_ADDR
5165: GO 5674
5167: LD_INT 25
5169: DOUBLE
5170: EQUAL
5171: IFTRUE 5175
5173: GO 5193
5175: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5176: LD_ADDR_VAR 0 3
5180: PUSH
5181: LD_INT 13
5183: PUSH
5184: LD_INT 14
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: ST_TO_ADDR
5191: GO 5674
5193: LD_INT 27
5195: DOUBLE
5196: EQUAL
5197: IFTRUE 5201
5199: GO 5219
5201: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5202: LD_ADDR_VAR 0 3
5206: PUSH
5207: LD_INT 13
5209: PUSH
5210: LD_INT 14
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: ST_TO_ADDR
5217: GO 5674
5219: LD_INT 92
5221: DOUBLE
5222: EQUAL
5223: IFTRUE 5227
5225: GO 5253
5227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5228: LD_ADDR_VAR 0 3
5232: PUSH
5233: LD_INT 11
5235: PUSH
5236: LD_INT 12
5238: PUSH
5239: LD_INT 13
5241: PUSH
5242: LD_INT 14
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: ST_TO_ADDR
5251: GO 5674
5253: LD_INT 28
5255: DOUBLE
5256: EQUAL
5257: IFTRUE 5261
5259: GO 5279
5261: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5262: LD_ADDR_VAR 0 3
5266: PUSH
5267: LD_INT 13
5269: PUSH
5270: LD_INT 14
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: ST_TO_ADDR
5277: GO 5674
5279: LD_INT 29
5281: DOUBLE
5282: EQUAL
5283: IFTRUE 5287
5285: GO 5305
5287: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5288: LD_ADDR_VAR 0 3
5292: PUSH
5293: LD_INT 13
5295: PUSH
5296: LD_INT 14
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: ST_TO_ADDR
5303: GO 5674
5305: LD_INT 31
5307: DOUBLE
5308: EQUAL
5309: IFTRUE 5313
5311: GO 5331
5313: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5314: LD_ADDR_VAR 0 3
5318: PUSH
5319: LD_INT 13
5321: PUSH
5322: LD_INT 14
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: ST_TO_ADDR
5329: GO 5674
5331: LD_INT 26
5333: DOUBLE
5334: EQUAL
5335: IFTRUE 5339
5337: GO 5357
5339: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5340: LD_ADDR_VAR 0 3
5344: PUSH
5345: LD_INT 13
5347: PUSH
5348: LD_INT 14
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: ST_TO_ADDR
5355: GO 5674
5357: LD_INT 42
5359: DOUBLE
5360: EQUAL
5361: IFTRUE 5365
5363: GO 5391
5365: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5366: LD_ADDR_VAR 0 3
5370: PUSH
5371: LD_INT 21
5373: PUSH
5374: LD_INT 22
5376: PUSH
5377: LD_INT 23
5379: PUSH
5380: LD_INT 24
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: ST_TO_ADDR
5389: GO 5674
5391: LD_INT 43
5393: DOUBLE
5394: EQUAL
5395: IFTRUE 5399
5397: GO 5425
5399: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5400: LD_ADDR_VAR 0 3
5404: PUSH
5405: LD_INT 21
5407: PUSH
5408: LD_INT 22
5410: PUSH
5411: LD_INT 23
5413: PUSH
5414: LD_INT 24
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: ST_TO_ADDR
5423: GO 5674
5425: LD_INT 44
5427: DOUBLE
5428: EQUAL
5429: IFTRUE 5433
5431: GO 5459
5433: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5434: LD_ADDR_VAR 0 3
5438: PUSH
5439: LD_INT 21
5441: PUSH
5442: LD_INT 22
5444: PUSH
5445: LD_INT 23
5447: PUSH
5448: LD_INT 24
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: ST_TO_ADDR
5457: GO 5674
5459: LD_INT 45
5461: DOUBLE
5462: EQUAL
5463: IFTRUE 5467
5465: GO 5493
5467: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5468: LD_ADDR_VAR 0 3
5472: PUSH
5473: LD_INT 21
5475: PUSH
5476: LD_INT 22
5478: PUSH
5479: LD_INT 23
5481: PUSH
5482: LD_INT 24
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: ST_TO_ADDR
5491: GO 5674
5493: LD_INT 49
5495: DOUBLE
5496: EQUAL
5497: IFTRUE 5501
5499: GO 5527
5501: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5502: LD_ADDR_VAR 0 3
5506: PUSH
5507: LD_INT 21
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 23
5515: PUSH
5516: LD_INT 24
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: ST_TO_ADDR
5525: GO 5674
5527: LD_INT 51
5529: DOUBLE
5530: EQUAL
5531: IFTRUE 5535
5533: GO 5561
5535: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5536: LD_ADDR_VAR 0 3
5540: PUSH
5541: LD_INT 21
5543: PUSH
5544: LD_INT 22
5546: PUSH
5547: LD_INT 23
5549: PUSH
5550: LD_INT 24
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: ST_TO_ADDR
5559: GO 5674
5561: LD_INT 52
5563: DOUBLE
5564: EQUAL
5565: IFTRUE 5569
5567: GO 5595
5569: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5570: LD_ADDR_VAR 0 3
5574: PUSH
5575: LD_INT 21
5577: PUSH
5578: LD_INT 22
5580: PUSH
5581: LD_INT 23
5583: PUSH
5584: LD_INT 24
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: ST_TO_ADDR
5593: GO 5674
5595: LD_INT 53
5597: DOUBLE
5598: EQUAL
5599: IFTRUE 5603
5601: GO 5621
5603: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5604: LD_ADDR_VAR 0 3
5608: PUSH
5609: LD_INT 23
5611: PUSH
5612: LD_INT 24
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: ST_TO_ADDR
5619: GO 5674
5621: LD_INT 46
5623: DOUBLE
5624: EQUAL
5625: IFTRUE 5629
5627: GO 5647
5629: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5630: LD_ADDR_VAR 0 3
5634: PUSH
5635: LD_INT 23
5637: PUSH
5638: LD_INT 24
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: ST_TO_ADDR
5645: GO 5674
5647: LD_INT 47
5649: DOUBLE
5650: EQUAL
5651: IFTRUE 5655
5653: GO 5673
5655: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5656: LD_ADDR_VAR 0 3
5660: PUSH
5661: LD_INT 23
5663: PUSH
5664: LD_INT 24
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: ST_TO_ADDR
5671: GO 5674
5673: POP
// result := ( chassis in result ) ;
5674: LD_ADDR_VAR 0 3
5678: PUSH
5679: LD_VAR 0 1
5683: PUSH
5684: LD_VAR 0 3
5688: IN
5689: ST_TO_ADDR
// end ;
5690: LD_VAR 0 3
5694: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5695: LD_INT 0
5697: PPUSH
5698: PPUSH
5699: PPUSH
5700: PPUSH
5701: PPUSH
5702: PPUSH
5703: PPUSH
// result := array ;
5704: LD_ADDR_VAR 0 5
5708: PUSH
5709: LD_VAR 0 1
5713: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5714: LD_VAR 0 1
5718: NOT
5719: PUSH
5720: LD_VAR 0 2
5724: NOT
5725: OR
5726: PUSH
5727: LD_VAR 0 3
5731: NOT
5732: OR
5733: PUSH
5734: LD_VAR 0 2
5738: PUSH
5739: LD_VAR 0 1
5743: GREATER
5744: OR
5745: PUSH
5746: LD_VAR 0 3
5750: PUSH
5751: LD_VAR 0 1
5755: GREATER
5756: OR
5757: IFFALSE 5761
// exit ;
5759: GO 6057
// if direction then
5761: LD_VAR 0 4
5765: IFFALSE 5829
// begin d := 1 ;
5767: LD_ADDR_VAR 0 9
5771: PUSH
5772: LD_INT 1
5774: ST_TO_ADDR
// if i_from > i_to then
5775: LD_VAR 0 2
5779: PUSH
5780: LD_VAR 0 3
5784: GREATER
5785: IFFALSE 5811
// length := ( array - i_from ) + i_to else
5787: LD_ADDR_VAR 0 11
5791: PUSH
5792: LD_VAR 0 1
5796: PUSH
5797: LD_VAR 0 2
5801: MINUS
5802: PUSH
5803: LD_VAR 0 3
5807: PLUS
5808: ST_TO_ADDR
5809: GO 5827
// length := i_to - i_from ;
5811: LD_ADDR_VAR 0 11
5815: PUSH
5816: LD_VAR 0 3
5820: PUSH
5821: LD_VAR 0 2
5825: MINUS
5826: ST_TO_ADDR
// end else
5827: GO 5890
// begin d := - 1 ;
5829: LD_ADDR_VAR 0 9
5833: PUSH
5834: LD_INT 1
5836: NEG
5837: ST_TO_ADDR
// if i_from > i_to then
5838: LD_VAR 0 2
5842: PUSH
5843: LD_VAR 0 3
5847: GREATER
5848: IFFALSE 5868
// length := i_from - i_to else
5850: LD_ADDR_VAR 0 11
5854: PUSH
5855: LD_VAR 0 2
5859: PUSH
5860: LD_VAR 0 3
5864: MINUS
5865: ST_TO_ADDR
5866: GO 5890
// length := ( array - i_to ) + i_from ;
5868: LD_ADDR_VAR 0 11
5872: PUSH
5873: LD_VAR 0 1
5877: PUSH
5878: LD_VAR 0 3
5882: MINUS
5883: PUSH
5884: LD_VAR 0 2
5888: PLUS
5889: ST_TO_ADDR
// end ; if not length then
5890: LD_VAR 0 11
5894: NOT
5895: IFFALSE 5899
// exit ;
5897: GO 6057
// tmp := array ;
5899: LD_ADDR_VAR 0 10
5903: PUSH
5904: LD_VAR 0 1
5908: ST_TO_ADDR
// for i = 1 to length do
5909: LD_ADDR_VAR 0 6
5913: PUSH
5914: DOUBLE
5915: LD_INT 1
5917: DEC
5918: ST_TO_ADDR
5919: LD_VAR 0 11
5923: PUSH
5924: FOR_TO
5925: IFFALSE 6045
// begin for j = 1 to array do
5927: LD_ADDR_VAR 0 7
5931: PUSH
5932: DOUBLE
5933: LD_INT 1
5935: DEC
5936: ST_TO_ADDR
5937: LD_VAR 0 1
5941: PUSH
5942: FOR_TO
5943: IFFALSE 6031
// begin k := j + d ;
5945: LD_ADDR_VAR 0 8
5949: PUSH
5950: LD_VAR 0 7
5954: PUSH
5955: LD_VAR 0 9
5959: PLUS
5960: ST_TO_ADDR
// if k > array then
5961: LD_VAR 0 8
5965: PUSH
5966: LD_VAR 0 1
5970: GREATER
5971: IFFALSE 5981
// k := 1 ;
5973: LD_ADDR_VAR 0 8
5977: PUSH
5978: LD_INT 1
5980: ST_TO_ADDR
// if not k then
5981: LD_VAR 0 8
5985: NOT
5986: IFFALSE 5998
// k := array ;
5988: LD_ADDR_VAR 0 8
5992: PUSH
5993: LD_VAR 0 1
5997: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5998: LD_ADDR_VAR 0 10
6002: PUSH
6003: LD_VAR 0 10
6007: PPUSH
6008: LD_VAR 0 8
6012: PPUSH
6013: LD_VAR 0 1
6017: PUSH
6018: LD_VAR 0 7
6022: ARRAY
6023: PPUSH
6024: CALL_OW 1
6028: ST_TO_ADDR
// end ;
6029: GO 5942
6031: POP
6032: POP
// array := tmp ;
6033: LD_ADDR_VAR 0 1
6037: PUSH
6038: LD_VAR 0 10
6042: ST_TO_ADDR
// end ;
6043: GO 5924
6045: POP
6046: POP
// result := array ;
6047: LD_ADDR_VAR 0 5
6051: PUSH
6052: LD_VAR 0 1
6056: ST_TO_ADDR
// end ;
6057: LD_VAR 0 5
6061: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6062: LD_INT 0
6064: PPUSH
6065: PPUSH
// result := 0 ;
6066: LD_ADDR_VAR 0 3
6070: PUSH
6071: LD_INT 0
6073: ST_TO_ADDR
// if not array or not value in array then
6074: LD_VAR 0 1
6078: NOT
6079: PUSH
6080: LD_VAR 0 2
6084: PUSH
6085: LD_VAR 0 1
6089: IN
6090: NOT
6091: OR
6092: IFFALSE 6096
// exit ;
6094: GO 6150
// for i = 1 to array do
6096: LD_ADDR_VAR 0 4
6100: PUSH
6101: DOUBLE
6102: LD_INT 1
6104: DEC
6105: ST_TO_ADDR
6106: LD_VAR 0 1
6110: PUSH
6111: FOR_TO
6112: IFFALSE 6148
// if value = array [ i ] then
6114: LD_VAR 0 2
6118: PUSH
6119: LD_VAR 0 1
6123: PUSH
6124: LD_VAR 0 4
6128: ARRAY
6129: EQUAL
6130: IFFALSE 6146
// begin result := i ;
6132: LD_ADDR_VAR 0 3
6136: PUSH
6137: LD_VAR 0 4
6141: ST_TO_ADDR
// exit ;
6142: POP
6143: POP
6144: GO 6150
// end ;
6146: GO 6111
6148: POP
6149: POP
// end ;
6150: LD_VAR 0 3
6154: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6155: LD_INT 0
6157: PPUSH
// vc_chassis := chassis ;
6158: LD_ADDR_OWVAR 37
6162: PUSH
6163: LD_VAR 0 1
6167: ST_TO_ADDR
// vc_engine := engine ;
6168: LD_ADDR_OWVAR 39
6172: PUSH
6173: LD_VAR 0 2
6177: ST_TO_ADDR
// vc_control := control ;
6178: LD_ADDR_OWVAR 38
6182: PUSH
6183: LD_VAR 0 3
6187: ST_TO_ADDR
// vc_weapon := weapon ;
6188: LD_ADDR_OWVAR 40
6192: PUSH
6193: LD_VAR 0 4
6197: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6198: LD_ADDR_OWVAR 41
6202: PUSH
6203: LD_VAR 0 5
6207: ST_TO_ADDR
// end ;
6208: LD_VAR 0 6
6212: RET
// export function WantPlant ( unit ) ; var task ; begin
6213: LD_INT 0
6215: PPUSH
6216: PPUSH
// result := false ;
6217: LD_ADDR_VAR 0 2
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6225: LD_ADDR_VAR 0 3
6229: PUSH
6230: LD_VAR 0 1
6234: PPUSH
6235: CALL_OW 437
6239: ST_TO_ADDR
// if task then
6240: LD_VAR 0 3
6244: IFFALSE 6272
// if task [ 1 ] [ 1 ] = p then
6246: LD_VAR 0 3
6250: PUSH
6251: LD_INT 1
6253: ARRAY
6254: PUSH
6255: LD_INT 1
6257: ARRAY
6258: PUSH
6259: LD_STRING p
6261: EQUAL
6262: IFFALSE 6272
// result := true ;
6264: LD_ADDR_VAR 0 2
6268: PUSH
6269: LD_INT 1
6271: ST_TO_ADDR
// end ;
6272: LD_VAR 0 2
6276: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6277: LD_INT 0
6279: PPUSH
6280: PPUSH
6281: PPUSH
6282: PPUSH
// if pos < 1 then
6283: LD_VAR 0 2
6287: PUSH
6288: LD_INT 1
6290: LESS
6291: IFFALSE 6295
// exit ;
6293: GO 6598
// if pos = 1 then
6295: LD_VAR 0 2
6299: PUSH
6300: LD_INT 1
6302: EQUAL
6303: IFFALSE 6336
// result := Replace ( arr , pos [ 1 ] , value ) else
6305: LD_ADDR_VAR 0 4
6309: PUSH
6310: LD_VAR 0 1
6314: PPUSH
6315: LD_VAR 0 2
6319: PUSH
6320: LD_INT 1
6322: ARRAY
6323: PPUSH
6324: LD_VAR 0 3
6328: PPUSH
6329: CALL_OW 1
6333: ST_TO_ADDR
6334: GO 6598
// begin tmp := arr ;
6336: LD_ADDR_VAR 0 6
6340: PUSH
6341: LD_VAR 0 1
6345: ST_TO_ADDR
// s_arr := [ tmp ] ;
6346: LD_ADDR_VAR 0 7
6350: PUSH
6351: LD_VAR 0 6
6355: PUSH
6356: EMPTY
6357: LIST
6358: ST_TO_ADDR
// for i = 1 to pos - 1 do
6359: LD_ADDR_VAR 0 5
6363: PUSH
6364: DOUBLE
6365: LD_INT 1
6367: DEC
6368: ST_TO_ADDR
6369: LD_VAR 0 2
6373: PUSH
6374: LD_INT 1
6376: MINUS
6377: PUSH
6378: FOR_TO
6379: IFFALSE 6424
// begin tmp := tmp [ pos [ i ] ] ;
6381: LD_ADDR_VAR 0 6
6385: PUSH
6386: LD_VAR 0 6
6390: PUSH
6391: LD_VAR 0 2
6395: PUSH
6396: LD_VAR 0 5
6400: ARRAY
6401: ARRAY
6402: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6403: LD_ADDR_VAR 0 7
6407: PUSH
6408: LD_VAR 0 7
6412: PUSH
6413: LD_VAR 0 6
6417: PUSH
6418: EMPTY
6419: LIST
6420: ADD
6421: ST_TO_ADDR
// end ;
6422: GO 6378
6424: POP
6425: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6426: LD_ADDR_VAR 0 6
6430: PUSH
6431: LD_VAR 0 6
6435: PPUSH
6436: LD_VAR 0 2
6440: PUSH
6441: LD_VAR 0 2
6445: ARRAY
6446: PPUSH
6447: LD_VAR 0 3
6451: PPUSH
6452: CALL_OW 1
6456: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6457: LD_ADDR_VAR 0 7
6461: PUSH
6462: LD_VAR 0 7
6466: PPUSH
6467: LD_VAR 0 7
6471: PPUSH
6472: LD_VAR 0 6
6476: PPUSH
6477: CALL_OW 1
6481: ST_TO_ADDR
// for i = s_arr downto 2 do
6482: LD_ADDR_VAR 0 5
6486: PUSH
6487: DOUBLE
6488: LD_VAR 0 7
6492: INC
6493: ST_TO_ADDR
6494: LD_INT 2
6496: PUSH
6497: FOR_DOWNTO
6498: IFFALSE 6582
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6500: LD_ADDR_VAR 0 6
6504: PUSH
6505: LD_VAR 0 7
6509: PUSH
6510: LD_VAR 0 5
6514: PUSH
6515: LD_INT 1
6517: MINUS
6518: ARRAY
6519: PPUSH
6520: LD_VAR 0 2
6524: PUSH
6525: LD_VAR 0 5
6529: PUSH
6530: LD_INT 1
6532: MINUS
6533: ARRAY
6534: PPUSH
6535: LD_VAR 0 7
6539: PUSH
6540: LD_VAR 0 5
6544: ARRAY
6545: PPUSH
6546: CALL_OW 1
6550: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6551: LD_ADDR_VAR 0 7
6555: PUSH
6556: LD_VAR 0 7
6560: PPUSH
6561: LD_VAR 0 5
6565: PUSH
6566: LD_INT 1
6568: MINUS
6569: PPUSH
6570: LD_VAR 0 6
6574: PPUSH
6575: CALL_OW 1
6579: ST_TO_ADDR
// end ;
6580: GO 6497
6582: POP
6583: POP
// result := s_arr [ 1 ] ;
6584: LD_ADDR_VAR 0 4
6588: PUSH
6589: LD_VAR 0 7
6593: PUSH
6594: LD_INT 1
6596: ARRAY
6597: ST_TO_ADDR
// end ; end ;
6598: LD_VAR 0 4
6602: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6603: LD_INT 0
6605: PPUSH
6606: PPUSH
// if not list then
6607: LD_VAR 0 1
6611: NOT
6612: IFFALSE 6616
// exit ;
6614: GO 6707
// i := list [ pos1 ] ;
6616: LD_ADDR_VAR 0 5
6620: PUSH
6621: LD_VAR 0 1
6625: PUSH
6626: LD_VAR 0 2
6630: ARRAY
6631: ST_TO_ADDR
// if not i then
6632: LD_VAR 0 5
6636: NOT
6637: IFFALSE 6641
// exit ;
6639: GO 6707
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6641: LD_ADDR_VAR 0 1
6645: PUSH
6646: LD_VAR 0 1
6650: PPUSH
6651: LD_VAR 0 2
6655: PPUSH
6656: LD_VAR 0 1
6660: PUSH
6661: LD_VAR 0 3
6665: ARRAY
6666: PPUSH
6667: CALL_OW 1
6671: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6672: LD_ADDR_VAR 0 1
6676: PUSH
6677: LD_VAR 0 1
6681: PPUSH
6682: LD_VAR 0 3
6686: PPUSH
6687: LD_VAR 0 5
6691: PPUSH
6692: CALL_OW 1
6696: ST_TO_ADDR
// result := list ;
6697: LD_ADDR_VAR 0 4
6701: PUSH
6702: LD_VAR 0 1
6706: ST_TO_ADDR
// end ;
6707: LD_VAR 0 4
6711: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6712: LD_INT 0
6714: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6715: LD_ADDR_VAR 0 5
6719: PUSH
6720: LD_VAR 0 1
6724: PPUSH
6725: CALL_OW 250
6729: PPUSH
6730: LD_VAR 0 1
6734: PPUSH
6735: CALL_OW 251
6739: PPUSH
6740: LD_VAR 0 2
6744: PPUSH
6745: LD_VAR 0 3
6749: PPUSH
6750: LD_VAR 0 4
6754: PPUSH
6755: CALL 6765 0 5
6759: ST_TO_ADDR
// end ;
6760: LD_VAR 0 5
6764: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6765: LD_INT 0
6767: PPUSH
6768: PPUSH
6769: PPUSH
6770: PPUSH
// if not list then
6771: LD_VAR 0 3
6775: NOT
6776: IFFALSE 6780
// exit ;
6778: GO 7168
// result := [ ] ;
6780: LD_ADDR_VAR 0 6
6784: PUSH
6785: EMPTY
6786: ST_TO_ADDR
// for i in list do
6787: LD_ADDR_VAR 0 7
6791: PUSH
6792: LD_VAR 0 3
6796: PUSH
6797: FOR_IN
6798: IFFALSE 7000
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6800: LD_ADDR_VAR 0 9
6804: PUSH
6805: LD_VAR 0 7
6809: PPUSH
6810: LD_VAR 0 1
6814: PPUSH
6815: LD_VAR 0 2
6819: PPUSH
6820: CALL_OW 297
6824: ST_TO_ADDR
// if not result then
6825: LD_VAR 0 6
6829: NOT
6830: IFFALSE 6856
// result := [ [ i , tmp ] ] else
6832: LD_ADDR_VAR 0 6
6836: PUSH
6837: LD_VAR 0 7
6841: PUSH
6842: LD_VAR 0 9
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PUSH
6851: EMPTY
6852: LIST
6853: ST_TO_ADDR
6854: GO 6998
// begin if result [ result ] [ 2 ] < tmp then
6856: LD_VAR 0 6
6860: PUSH
6861: LD_VAR 0 6
6865: ARRAY
6866: PUSH
6867: LD_INT 2
6869: ARRAY
6870: PUSH
6871: LD_VAR 0 9
6875: LESS
6876: IFFALSE 6918
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6878: LD_ADDR_VAR 0 6
6882: PUSH
6883: LD_VAR 0 6
6887: PPUSH
6888: LD_VAR 0 6
6892: PUSH
6893: LD_INT 1
6895: PLUS
6896: PPUSH
6897: LD_VAR 0 7
6901: PUSH
6902: LD_VAR 0 9
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PPUSH
6911: CALL_OW 2
6915: ST_TO_ADDR
6916: GO 6998
// for j = 1 to result do
6918: LD_ADDR_VAR 0 8
6922: PUSH
6923: DOUBLE
6924: LD_INT 1
6926: DEC
6927: ST_TO_ADDR
6928: LD_VAR 0 6
6932: PUSH
6933: FOR_TO
6934: IFFALSE 6996
// begin if tmp < result [ j ] [ 2 ] then
6936: LD_VAR 0 9
6940: PUSH
6941: LD_VAR 0 6
6945: PUSH
6946: LD_VAR 0 8
6950: ARRAY
6951: PUSH
6952: LD_INT 2
6954: ARRAY
6955: LESS
6956: IFFALSE 6994
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6958: LD_ADDR_VAR 0 6
6962: PUSH
6963: LD_VAR 0 6
6967: PPUSH
6968: LD_VAR 0 8
6972: PPUSH
6973: LD_VAR 0 7
6977: PUSH
6978: LD_VAR 0 9
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PPUSH
6987: CALL_OW 2
6991: ST_TO_ADDR
// break ;
6992: GO 6996
// end ; end ;
6994: GO 6933
6996: POP
6997: POP
// end ; end ;
6998: GO 6797
7000: POP
7001: POP
// if result and not asc then
7002: LD_VAR 0 6
7006: PUSH
7007: LD_VAR 0 4
7011: NOT
7012: AND
7013: IFFALSE 7088
// begin tmp := result ;
7015: LD_ADDR_VAR 0 9
7019: PUSH
7020: LD_VAR 0 6
7024: ST_TO_ADDR
// for i = tmp downto 1 do
7025: LD_ADDR_VAR 0 7
7029: PUSH
7030: DOUBLE
7031: LD_VAR 0 9
7035: INC
7036: ST_TO_ADDR
7037: LD_INT 1
7039: PUSH
7040: FOR_DOWNTO
7041: IFFALSE 7086
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7043: LD_ADDR_VAR 0 6
7047: PUSH
7048: LD_VAR 0 6
7052: PPUSH
7053: LD_VAR 0 9
7057: PUSH
7058: LD_VAR 0 7
7062: MINUS
7063: PUSH
7064: LD_INT 1
7066: PLUS
7067: PPUSH
7068: LD_VAR 0 9
7072: PUSH
7073: LD_VAR 0 7
7077: ARRAY
7078: PPUSH
7079: CALL_OW 1
7083: ST_TO_ADDR
7084: GO 7040
7086: POP
7087: POP
// end ; tmp := [ ] ;
7088: LD_ADDR_VAR 0 9
7092: PUSH
7093: EMPTY
7094: ST_TO_ADDR
// if mode then
7095: LD_VAR 0 5
7099: IFFALSE 7168
// begin for i = 1 to result do
7101: LD_ADDR_VAR 0 7
7105: PUSH
7106: DOUBLE
7107: LD_INT 1
7109: DEC
7110: ST_TO_ADDR
7111: LD_VAR 0 6
7115: PUSH
7116: FOR_TO
7117: IFFALSE 7156
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7119: LD_ADDR_VAR 0 9
7123: PUSH
7124: LD_VAR 0 9
7128: PPUSH
7129: LD_VAR 0 7
7133: PPUSH
7134: LD_VAR 0 6
7138: PUSH
7139: LD_VAR 0 7
7143: ARRAY
7144: PUSH
7145: LD_INT 1
7147: ARRAY
7148: PPUSH
7149: CALL_OW 1
7153: ST_TO_ADDR
7154: GO 7116
7156: POP
7157: POP
// result := tmp ;
7158: LD_ADDR_VAR 0 6
7162: PUSH
7163: LD_VAR 0 9
7167: ST_TO_ADDR
// end ; end ;
7168: LD_VAR 0 6
7172: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7173: LD_INT 0
7175: PPUSH
7176: PPUSH
7177: PPUSH
7178: PPUSH
7179: PPUSH
7180: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7181: LD_ADDR_VAR 0 5
7185: PUSH
7186: LD_INT 0
7188: PUSH
7189: LD_INT 0
7191: PUSH
7192: LD_INT 0
7194: PUSH
7195: EMPTY
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: ST_TO_ADDR
// if not x or not y then
7203: LD_VAR 0 2
7207: NOT
7208: PUSH
7209: LD_VAR 0 3
7213: NOT
7214: OR
7215: IFFALSE 7219
// exit ;
7217: GO 8869
// if not range then
7219: LD_VAR 0 4
7223: NOT
7224: IFFALSE 7234
// range := 10 ;
7226: LD_ADDR_VAR 0 4
7230: PUSH
7231: LD_INT 10
7233: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7234: LD_ADDR_VAR 0 8
7238: PUSH
7239: LD_INT 81
7241: PUSH
7242: LD_VAR 0 1
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 92
7253: PUSH
7254: LD_VAR 0 2
7258: PUSH
7259: LD_VAR 0 3
7263: PUSH
7264: LD_VAR 0 4
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 3
7277: PUSH
7278: LD_INT 21
7280: PUSH
7281: LD_INT 3
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: LIST
7296: PPUSH
7297: CALL_OW 69
7301: ST_TO_ADDR
// if not tmp then
7302: LD_VAR 0 8
7306: NOT
7307: IFFALSE 7311
// exit ;
7309: GO 8869
// for i in tmp do
7311: LD_ADDR_VAR 0 6
7315: PUSH
7316: LD_VAR 0 8
7320: PUSH
7321: FOR_IN
7322: IFFALSE 8844
// begin points := [ 0 , 0 , 0 ] ;
7324: LD_ADDR_VAR 0 9
7328: PUSH
7329: LD_INT 0
7331: PUSH
7332: LD_INT 0
7334: PUSH
7335: LD_INT 0
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: LIST
7342: ST_TO_ADDR
// bpoints := 1 ;
7343: LD_ADDR_VAR 0 10
7347: PUSH
7348: LD_INT 1
7350: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7351: LD_VAR 0 6
7355: PPUSH
7356: CALL_OW 247
7360: PUSH
7361: LD_INT 1
7363: DOUBLE
7364: EQUAL
7365: IFTRUE 7369
7367: GO 7947
7369: POP
// begin if GetClass ( i ) = 1 then
7370: LD_VAR 0 6
7374: PPUSH
7375: CALL_OW 257
7379: PUSH
7380: LD_INT 1
7382: EQUAL
7383: IFFALSE 7404
// points := [ 10 , 5 , 3 ] ;
7385: LD_ADDR_VAR 0 9
7389: PUSH
7390: LD_INT 10
7392: PUSH
7393: LD_INT 5
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: LIST
7403: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7404: LD_VAR 0 6
7408: PPUSH
7409: CALL_OW 257
7413: PUSH
7414: LD_INT 2
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: LD_INT 4
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: IN
7428: IFFALSE 7449
// points := [ 3 , 2 , 1 ] ;
7430: LD_ADDR_VAR 0 9
7434: PUSH
7435: LD_INT 3
7437: PUSH
7438: LD_INT 2
7440: PUSH
7441: LD_INT 1
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: LIST
7448: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7449: LD_VAR 0 6
7453: PPUSH
7454: CALL_OW 257
7458: PUSH
7459: LD_INT 5
7461: EQUAL
7462: IFFALSE 7483
// points := [ 130 , 5 , 2 ] ;
7464: LD_ADDR_VAR 0 9
7468: PUSH
7469: LD_INT 130
7471: PUSH
7472: LD_INT 5
7474: PUSH
7475: LD_INT 2
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7483: LD_VAR 0 6
7487: PPUSH
7488: CALL_OW 257
7492: PUSH
7493: LD_INT 8
7495: EQUAL
7496: IFFALSE 7517
// points := [ 35 , 35 , 30 ] ;
7498: LD_ADDR_VAR 0 9
7502: PUSH
7503: LD_INT 35
7505: PUSH
7506: LD_INT 35
7508: PUSH
7509: LD_INT 30
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7517: LD_VAR 0 6
7521: PPUSH
7522: CALL_OW 257
7526: PUSH
7527: LD_INT 9
7529: EQUAL
7530: IFFALSE 7551
// points := [ 20 , 55 , 40 ] ;
7532: LD_ADDR_VAR 0 9
7536: PUSH
7537: LD_INT 20
7539: PUSH
7540: LD_INT 55
7542: PUSH
7543: LD_INT 40
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7551: LD_VAR 0 6
7555: PPUSH
7556: CALL_OW 257
7560: PUSH
7561: LD_INT 12
7563: PUSH
7564: LD_INT 16
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: IN
7571: IFFALSE 7592
// points := [ 5 , 3 , 2 ] ;
7573: LD_ADDR_VAR 0 9
7577: PUSH
7578: LD_INT 5
7580: PUSH
7581: LD_INT 3
7583: PUSH
7584: LD_INT 2
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: LIST
7591: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7592: LD_VAR 0 6
7596: PPUSH
7597: CALL_OW 257
7601: PUSH
7602: LD_INT 17
7604: EQUAL
7605: IFFALSE 7626
// points := [ 100 , 50 , 75 ] ;
7607: LD_ADDR_VAR 0 9
7611: PUSH
7612: LD_INT 100
7614: PUSH
7615: LD_INT 50
7617: PUSH
7618: LD_INT 75
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: LIST
7625: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7626: LD_VAR 0 6
7630: PPUSH
7631: CALL_OW 257
7635: PUSH
7636: LD_INT 15
7638: EQUAL
7639: IFFALSE 7660
// points := [ 10 , 5 , 3 ] ;
7641: LD_ADDR_VAR 0 9
7645: PUSH
7646: LD_INT 10
7648: PUSH
7649: LD_INT 5
7651: PUSH
7652: LD_INT 3
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7660: LD_VAR 0 6
7664: PPUSH
7665: CALL_OW 257
7669: PUSH
7670: LD_INT 14
7672: EQUAL
7673: IFFALSE 7694
// points := [ 10 , 0 , 0 ] ;
7675: LD_ADDR_VAR 0 9
7679: PUSH
7680: LD_INT 10
7682: PUSH
7683: LD_INT 0
7685: PUSH
7686: LD_INT 0
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: LIST
7693: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7694: LD_VAR 0 6
7698: PPUSH
7699: CALL_OW 257
7703: PUSH
7704: LD_INT 11
7706: EQUAL
7707: IFFALSE 7728
// points := [ 30 , 10 , 5 ] ;
7709: LD_ADDR_VAR 0 9
7713: PUSH
7714: LD_INT 30
7716: PUSH
7717: LD_INT 10
7719: PUSH
7720: LD_INT 5
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: LIST
7727: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7728: LD_VAR 0 1
7732: PPUSH
7733: LD_INT 5
7735: PPUSH
7736: CALL_OW 321
7740: PUSH
7741: LD_INT 2
7743: EQUAL
7744: IFFALSE 7761
// bpoints := bpoints * 1.8 ;
7746: LD_ADDR_VAR 0 10
7750: PUSH
7751: LD_VAR 0 10
7755: PUSH
7756: LD_REAL  1.80000000000000E+0000
7759: MUL
7760: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7761: LD_VAR 0 6
7765: PPUSH
7766: CALL_OW 257
7770: PUSH
7771: LD_INT 1
7773: PUSH
7774: LD_INT 2
7776: PUSH
7777: LD_INT 3
7779: PUSH
7780: LD_INT 4
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: IN
7789: PUSH
7790: LD_VAR 0 1
7794: PPUSH
7795: LD_INT 51
7797: PPUSH
7798: CALL_OW 321
7802: PUSH
7803: LD_INT 2
7805: EQUAL
7806: AND
7807: IFFALSE 7824
// bpoints := bpoints * 1.2 ;
7809: LD_ADDR_VAR 0 10
7813: PUSH
7814: LD_VAR 0 10
7818: PUSH
7819: LD_REAL  1.20000000000000E+0000
7822: MUL
7823: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7824: LD_VAR 0 6
7828: PPUSH
7829: CALL_OW 257
7833: PUSH
7834: LD_INT 5
7836: PUSH
7837: LD_INT 7
7839: PUSH
7840: LD_INT 9
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: LIST
7847: IN
7848: PUSH
7849: LD_VAR 0 1
7853: PPUSH
7854: LD_INT 52
7856: PPUSH
7857: CALL_OW 321
7861: PUSH
7862: LD_INT 2
7864: EQUAL
7865: AND
7866: IFFALSE 7883
// bpoints := bpoints * 1.5 ;
7868: LD_ADDR_VAR 0 10
7872: PUSH
7873: LD_VAR 0 10
7877: PUSH
7878: LD_REAL  1.50000000000000E+0000
7881: MUL
7882: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7883: LD_VAR 0 1
7887: PPUSH
7888: LD_INT 66
7890: PPUSH
7891: CALL_OW 321
7895: PUSH
7896: LD_INT 2
7898: EQUAL
7899: IFFALSE 7916
// bpoints := bpoints * 1.1 ;
7901: LD_ADDR_VAR 0 10
7905: PUSH
7906: LD_VAR 0 10
7910: PUSH
7911: LD_REAL  1.10000000000000E+0000
7914: MUL
7915: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7916: LD_ADDR_VAR 0 10
7920: PUSH
7921: LD_VAR 0 10
7925: PUSH
7926: LD_VAR 0 6
7930: PPUSH
7931: LD_INT 1
7933: PPUSH
7934: CALL_OW 259
7938: PUSH
7939: LD_REAL  1.15000000000000E+0000
7942: MUL
7943: MUL
7944: ST_TO_ADDR
// end ; unit_vehicle :
7945: GO 8773
7947: LD_INT 2
7949: DOUBLE
7950: EQUAL
7951: IFTRUE 7955
7953: GO 8761
7955: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7956: LD_VAR 0 6
7960: PPUSH
7961: CALL_OW 264
7965: PUSH
7966: LD_INT 2
7968: PUSH
7969: LD_INT 42
7971: PUSH
7972: LD_INT 24
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: IN
7980: IFFALSE 8001
// points := [ 25 , 5 , 3 ] ;
7982: LD_ADDR_VAR 0 9
7986: PUSH
7987: LD_INT 25
7989: PUSH
7990: LD_INT 5
7992: PUSH
7993: LD_INT 3
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8001: LD_VAR 0 6
8005: PPUSH
8006: CALL_OW 264
8010: PUSH
8011: LD_INT 4
8013: PUSH
8014: LD_INT 43
8016: PUSH
8017: LD_INT 25
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: LIST
8024: IN
8025: IFFALSE 8046
// points := [ 40 , 15 , 5 ] ;
8027: LD_ADDR_VAR 0 9
8031: PUSH
8032: LD_INT 40
8034: PUSH
8035: LD_INT 15
8037: PUSH
8038: LD_INT 5
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8046: LD_VAR 0 6
8050: PPUSH
8051: CALL_OW 264
8055: PUSH
8056: LD_INT 3
8058: PUSH
8059: LD_INT 23
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: IN
8066: IFFALSE 8087
// points := [ 7 , 25 , 8 ] ;
8068: LD_ADDR_VAR 0 9
8072: PUSH
8073: LD_INT 7
8075: PUSH
8076: LD_INT 25
8078: PUSH
8079: LD_INT 8
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8087: LD_VAR 0 6
8091: PPUSH
8092: CALL_OW 264
8096: PUSH
8097: LD_INT 5
8099: PUSH
8100: LD_INT 27
8102: PUSH
8103: LD_INT 44
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: LIST
8110: IN
8111: IFFALSE 8132
// points := [ 14 , 50 , 16 ] ;
8113: LD_ADDR_VAR 0 9
8117: PUSH
8118: LD_INT 14
8120: PUSH
8121: LD_INT 50
8123: PUSH
8124: LD_INT 16
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: LIST
8131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8132: LD_VAR 0 6
8136: PPUSH
8137: CALL_OW 264
8141: PUSH
8142: LD_INT 6
8144: PUSH
8145: LD_INT 46
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: IN
8152: IFFALSE 8173
// points := [ 32 , 120 , 70 ] ;
8154: LD_ADDR_VAR 0 9
8158: PUSH
8159: LD_INT 32
8161: PUSH
8162: LD_INT 120
8164: PUSH
8165: LD_INT 70
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8173: LD_VAR 0 6
8177: PPUSH
8178: CALL_OW 264
8182: PUSH
8183: LD_INT 7
8185: PUSH
8186: LD_INT 28
8188: PUSH
8189: LD_INT 45
8191: PUSH
8192: LD_INT 92
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: IN
8201: IFFALSE 8222
// points := [ 35 , 20 , 45 ] ;
8203: LD_ADDR_VAR 0 9
8207: PUSH
8208: LD_INT 35
8210: PUSH
8211: LD_INT 20
8213: PUSH
8214: LD_INT 45
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8222: LD_VAR 0 6
8226: PPUSH
8227: CALL_OW 264
8231: PUSH
8232: LD_INT 47
8234: PUSH
8235: EMPTY
8236: LIST
8237: IN
8238: IFFALSE 8259
// points := [ 67 , 45 , 75 ] ;
8240: LD_ADDR_VAR 0 9
8244: PUSH
8245: LD_INT 67
8247: PUSH
8248: LD_INT 45
8250: PUSH
8251: LD_INT 75
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: LIST
8258: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8259: LD_VAR 0 6
8263: PPUSH
8264: CALL_OW 264
8268: PUSH
8269: LD_INT 26
8271: PUSH
8272: EMPTY
8273: LIST
8274: IN
8275: IFFALSE 8296
// points := [ 120 , 30 , 80 ] ;
8277: LD_ADDR_VAR 0 9
8281: PUSH
8282: LD_INT 120
8284: PUSH
8285: LD_INT 30
8287: PUSH
8288: LD_INT 80
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: LIST
8295: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8296: LD_VAR 0 6
8300: PPUSH
8301: CALL_OW 264
8305: PUSH
8306: LD_INT 22
8308: PUSH
8309: EMPTY
8310: LIST
8311: IN
8312: IFFALSE 8333
// points := [ 40 , 1 , 1 ] ;
8314: LD_ADDR_VAR 0 9
8318: PUSH
8319: LD_INT 40
8321: PUSH
8322: LD_INT 1
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: LIST
8332: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8333: LD_VAR 0 6
8337: PPUSH
8338: CALL_OW 264
8342: PUSH
8343: LD_INT 29
8345: PUSH
8346: EMPTY
8347: LIST
8348: IN
8349: IFFALSE 8370
// points := [ 70 , 200 , 400 ] ;
8351: LD_ADDR_VAR 0 9
8355: PUSH
8356: LD_INT 70
8358: PUSH
8359: LD_INT 200
8361: PUSH
8362: LD_INT 400
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8370: LD_VAR 0 6
8374: PPUSH
8375: CALL_OW 264
8379: PUSH
8380: LD_INT 14
8382: PUSH
8383: LD_INT 53
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: IN
8390: IFFALSE 8411
// points := [ 40 , 10 , 20 ] ;
8392: LD_ADDR_VAR 0 9
8396: PUSH
8397: LD_INT 40
8399: PUSH
8400: LD_INT 10
8402: PUSH
8403: LD_INT 20
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: LIST
8410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8411: LD_VAR 0 6
8415: PPUSH
8416: CALL_OW 264
8420: PUSH
8421: LD_INT 9
8423: PUSH
8424: EMPTY
8425: LIST
8426: IN
8427: IFFALSE 8448
// points := [ 5 , 70 , 20 ] ;
8429: LD_ADDR_VAR 0 9
8433: PUSH
8434: LD_INT 5
8436: PUSH
8437: LD_INT 70
8439: PUSH
8440: LD_INT 20
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: LIST
8447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8448: LD_VAR 0 6
8452: PPUSH
8453: CALL_OW 264
8457: PUSH
8458: LD_INT 10
8460: PUSH
8461: EMPTY
8462: LIST
8463: IN
8464: IFFALSE 8485
// points := [ 35 , 110 , 70 ] ;
8466: LD_ADDR_VAR 0 9
8470: PUSH
8471: LD_INT 35
8473: PUSH
8474: LD_INT 110
8476: PUSH
8477: LD_INT 70
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8485: LD_VAR 0 6
8489: PPUSH
8490: CALL_OW 265
8494: PUSH
8495: LD_INT 25
8497: EQUAL
8498: IFFALSE 8519
// points := [ 80 , 65 , 100 ] ;
8500: LD_ADDR_VAR 0 9
8504: PUSH
8505: LD_INT 80
8507: PUSH
8508: LD_INT 65
8510: PUSH
8511: LD_INT 100
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8519: LD_VAR 0 6
8523: PPUSH
8524: CALL_OW 263
8528: PUSH
8529: LD_INT 1
8531: EQUAL
8532: IFFALSE 8567
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8534: LD_ADDR_VAR 0 10
8538: PUSH
8539: LD_VAR 0 10
8543: PUSH
8544: LD_VAR 0 6
8548: PPUSH
8549: CALL_OW 311
8553: PPUSH
8554: LD_INT 3
8556: PPUSH
8557: CALL_OW 259
8561: PUSH
8562: LD_INT 4
8564: MUL
8565: MUL
8566: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8567: LD_VAR 0 6
8571: PPUSH
8572: CALL_OW 263
8576: PUSH
8577: LD_INT 2
8579: EQUAL
8580: IFFALSE 8631
// begin j := IsControledBy ( i ) ;
8582: LD_ADDR_VAR 0 7
8586: PUSH
8587: LD_VAR 0 6
8591: PPUSH
8592: CALL_OW 312
8596: ST_TO_ADDR
// if j then
8597: LD_VAR 0 7
8601: IFFALSE 8631
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8603: LD_ADDR_VAR 0 10
8607: PUSH
8608: LD_VAR 0 10
8612: PUSH
8613: LD_VAR 0 7
8617: PPUSH
8618: LD_INT 3
8620: PPUSH
8621: CALL_OW 259
8625: PUSH
8626: LD_INT 3
8628: MUL
8629: MUL
8630: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8631: LD_VAR 0 6
8635: PPUSH
8636: CALL_OW 264
8640: PUSH
8641: LD_INT 5
8643: PUSH
8644: LD_INT 6
8646: PUSH
8647: LD_INT 46
8649: PUSH
8650: LD_INT 44
8652: PUSH
8653: LD_INT 47
8655: PUSH
8656: LD_INT 45
8658: PUSH
8659: LD_INT 28
8661: PUSH
8662: LD_INT 7
8664: PUSH
8665: LD_INT 27
8667: PUSH
8668: LD_INT 29
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: IN
8683: PUSH
8684: LD_VAR 0 1
8688: PPUSH
8689: LD_INT 52
8691: PPUSH
8692: CALL_OW 321
8696: PUSH
8697: LD_INT 2
8699: EQUAL
8700: AND
8701: IFFALSE 8718
// bpoints := bpoints * 1.2 ;
8703: LD_ADDR_VAR 0 10
8707: PUSH
8708: LD_VAR 0 10
8712: PUSH
8713: LD_REAL  1.20000000000000E+0000
8716: MUL
8717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8718: LD_VAR 0 6
8722: PPUSH
8723: CALL_OW 264
8727: PUSH
8728: LD_INT 6
8730: PUSH
8731: LD_INT 46
8733: PUSH
8734: LD_INT 47
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: LIST
8741: IN
8742: IFFALSE 8759
// bpoints := bpoints * 1.2 ;
8744: LD_ADDR_VAR 0 10
8748: PUSH
8749: LD_VAR 0 10
8753: PUSH
8754: LD_REAL  1.20000000000000E+0000
8757: MUL
8758: ST_TO_ADDR
// end ; unit_building :
8759: GO 8773
8761: LD_INT 3
8763: DOUBLE
8764: EQUAL
8765: IFTRUE 8769
8767: GO 8772
8769: POP
// ; end ;
8770: GO 8773
8772: POP
// for j = 1 to 3 do
8773: LD_ADDR_VAR 0 7
8777: PUSH
8778: DOUBLE
8779: LD_INT 1
8781: DEC
8782: ST_TO_ADDR
8783: LD_INT 3
8785: PUSH
8786: FOR_TO
8787: IFFALSE 8840
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8789: LD_ADDR_VAR 0 5
8793: PUSH
8794: LD_VAR 0 5
8798: PPUSH
8799: LD_VAR 0 7
8803: PPUSH
8804: LD_VAR 0 5
8808: PUSH
8809: LD_VAR 0 7
8813: ARRAY
8814: PUSH
8815: LD_VAR 0 9
8819: PUSH
8820: LD_VAR 0 7
8824: ARRAY
8825: PUSH
8826: LD_VAR 0 10
8830: MUL
8831: PLUS
8832: PPUSH
8833: CALL_OW 1
8837: ST_TO_ADDR
8838: GO 8786
8840: POP
8841: POP
// end ;
8842: GO 7321
8844: POP
8845: POP
// result := Replace ( result , 4 , tmp ) ;
8846: LD_ADDR_VAR 0 5
8850: PUSH
8851: LD_VAR 0 5
8855: PPUSH
8856: LD_INT 4
8858: PPUSH
8859: LD_VAR 0 8
8863: PPUSH
8864: CALL_OW 1
8868: ST_TO_ADDR
// end ;
8869: LD_VAR 0 5
8873: RET
// export function DangerAtRange ( unit , range ) ; begin
8874: LD_INT 0
8876: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8877: LD_ADDR_VAR 0 3
8881: PUSH
8882: LD_VAR 0 1
8886: PPUSH
8887: CALL_OW 255
8891: PPUSH
8892: LD_VAR 0 1
8896: PPUSH
8897: CALL_OW 250
8901: PPUSH
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 251
8911: PPUSH
8912: LD_VAR 0 2
8916: PPUSH
8917: CALL 7173 0 4
8921: ST_TO_ADDR
// end ;
8922: LD_VAR 0 3
8926: RET
// export function DangerInArea ( side , area ) ; begin
8927: LD_INT 0
8929: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8930: LD_ADDR_VAR 0 3
8934: PUSH
8935: LD_VAR 0 2
8939: PPUSH
8940: LD_INT 81
8942: PUSH
8943: LD_VAR 0 1
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 70
8956: ST_TO_ADDR
// end ;
8957: LD_VAR 0 3
8961: RET
// export function IsExtension ( b ) ; begin
8962: LD_INT 0
8964: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: LD_VAR 0 1
8974: PUSH
8975: LD_INT 23
8977: PUSH
8978: LD_INT 20
8980: PUSH
8981: LD_INT 22
8983: PUSH
8984: LD_INT 17
8986: PUSH
8987: LD_INT 24
8989: PUSH
8990: LD_INT 21
8992: PUSH
8993: LD_INT 19
8995: PUSH
8996: LD_INT 16
8998: PUSH
8999: LD_INT 25
9001: PUSH
9002: LD_INT 18
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: IN
9017: ST_TO_ADDR
// end ;
9018: LD_VAR 0 2
9022: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9023: LD_INT 0
9025: PPUSH
9026: PPUSH
9027: PPUSH
// result := [ ] ;
9028: LD_ADDR_VAR 0 4
9032: PUSH
9033: EMPTY
9034: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9035: LD_ADDR_VAR 0 5
9039: PUSH
9040: LD_VAR 0 2
9044: PPUSH
9045: LD_INT 21
9047: PUSH
9048: LD_INT 3
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PPUSH
9055: CALL_OW 70
9059: ST_TO_ADDR
// if not tmp then
9060: LD_VAR 0 5
9064: NOT
9065: IFFALSE 9069
// exit ;
9067: GO 9133
// if checkLink then
9069: LD_VAR 0 3
9073: IFFALSE 9123
// begin for i in tmp do
9075: LD_ADDR_VAR 0 6
9079: PUSH
9080: LD_VAR 0 5
9084: PUSH
9085: FOR_IN
9086: IFFALSE 9121
// if GetBase ( i ) <> base then
9088: LD_VAR 0 6
9092: PPUSH
9093: CALL_OW 274
9097: PUSH
9098: LD_VAR 0 1
9102: NONEQUAL
9103: IFFALSE 9119
// ComLinkToBase ( base , i ) ;
9105: LD_VAR 0 1
9109: PPUSH
9110: LD_VAR 0 6
9114: PPUSH
9115: CALL_OW 169
9119: GO 9085
9121: POP
9122: POP
// end ; result := tmp ;
9123: LD_ADDR_VAR 0 4
9127: PUSH
9128: LD_VAR 0 5
9132: ST_TO_ADDR
// end ;
9133: LD_VAR 0 4
9137: RET
// export function ComComplete ( units , b ) ; var i ; begin
9138: LD_INT 0
9140: PPUSH
9141: PPUSH
// if not units then
9142: LD_VAR 0 1
9146: NOT
9147: IFFALSE 9151
// exit ;
9149: GO 9241
// for i in units do
9151: LD_ADDR_VAR 0 4
9155: PUSH
9156: LD_VAR 0 1
9160: PUSH
9161: FOR_IN
9162: IFFALSE 9239
// if BuildingStatus ( b ) = bs_build then
9164: LD_VAR 0 2
9168: PPUSH
9169: CALL_OW 461
9173: PUSH
9174: LD_INT 1
9176: EQUAL
9177: IFFALSE 9237
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9179: LD_VAR 0 4
9183: PPUSH
9184: LD_STRING h
9186: PUSH
9187: LD_VAR 0 2
9191: PPUSH
9192: CALL_OW 250
9196: PUSH
9197: LD_VAR 0 2
9201: PPUSH
9202: CALL_OW 251
9206: PUSH
9207: LD_VAR 0 2
9211: PUSH
9212: LD_INT 0
9214: PUSH
9215: LD_INT 0
9217: PUSH
9218: LD_INT 0
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: PPUSH
9233: CALL_OW 446
9237: GO 9161
9239: POP
9240: POP
// end ;
9241: LD_VAR 0 3
9245: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9246: LD_INT 0
9248: PPUSH
9249: PPUSH
9250: PPUSH
9251: PPUSH
9252: PPUSH
9253: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9254: LD_VAR 0 1
9258: NOT
9259: PUSH
9260: LD_VAR 0 1
9264: PPUSH
9265: CALL_OW 263
9269: PUSH
9270: LD_INT 2
9272: NONEQUAL
9273: OR
9274: IFFALSE 9278
// exit ;
9276: GO 9594
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9278: LD_ADDR_VAR 0 6
9282: PUSH
9283: LD_INT 22
9285: PUSH
9286: LD_VAR 0 1
9290: PPUSH
9291: CALL_OW 255
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 2
9302: PUSH
9303: LD_INT 30
9305: PUSH
9306: LD_INT 36
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: LD_INT 34
9315: PUSH
9316: LD_INT 31
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: LIST
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PPUSH
9332: CALL_OW 69
9336: ST_TO_ADDR
// if not tmp then
9337: LD_VAR 0 6
9341: NOT
9342: IFFALSE 9346
// exit ;
9344: GO 9594
// result := [ ] ;
9346: LD_ADDR_VAR 0 2
9350: PUSH
9351: EMPTY
9352: ST_TO_ADDR
// for i in tmp do
9353: LD_ADDR_VAR 0 3
9357: PUSH
9358: LD_VAR 0 6
9362: PUSH
9363: FOR_IN
9364: IFFALSE 9435
// begin t := UnitsInside ( i ) ;
9366: LD_ADDR_VAR 0 4
9370: PUSH
9371: LD_VAR 0 3
9375: PPUSH
9376: CALL_OW 313
9380: ST_TO_ADDR
// if t then
9381: LD_VAR 0 4
9385: IFFALSE 9433
// for j in t do
9387: LD_ADDR_VAR 0 7
9391: PUSH
9392: LD_VAR 0 4
9396: PUSH
9397: FOR_IN
9398: IFFALSE 9431
// result := Replace ( result , result + 1 , j ) ;
9400: LD_ADDR_VAR 0 2
9404: PUSH
9405: LD_VAR 0 2
9409: PPUSH
9410: LD_VAR 0 2
9414: PUSH
9415: LD_INT 1
9417: PLUS
9418: PPUSH
9419: LD_VAR 0 7
9423: PPUSH
9424: CALL_OW 1
9428: ST_TO_ADDR
9429: GO 9397
9431: POP
9432: POP
// end ;
9433: GO 9363
9435: POP
9436: POP
// if not result then
9437: LD_VAR 0 2
9441: NOT
9442: IFFALSE 9446
// exit ;
9444: GO 9594
// mech := result [ 1 ] ;
9446: LD_ADDR_VAR 0 5
9450: PUSH
9451: LD_VAR 0 2
9455: PUSH
9456: LD_INT 1
9458: ARRAY
9459: ST_TO_ADDR
// if result > 1 then
9460: LD_VAR 0 2
9464: PUSH
9465: LD_INT 1
9467: GREATER
9468: IFFALSE 9580
// begin for i = 2 to result do
9470: LD_ADDR_VAR 0 3
9474: PUSH
9475: DOUBLE
9476: LD_INT 2
9478: DEC
9479: ST_TO_ADDR
9480: LD_VAR 0 2
9484: PUSH
9485: FOR_TO
9486: IFFALSE 9578
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9488: LD_ADDR_VAR 0 4
9492: PUSH
9493: LD_VAR 0 2
9497: PUSH
9498: LD_VAR 0 3
9502: ARRAY
9503: PPUSH
9504: LD_INT 3
9506: PPUSH
9507: CALL_OW 259
9511: PUSH
9512: LD_VAR 0 2
9516: PUSH
9517: LD_VAR 0 3
9521: ARRAY
9522: PPUSH
9523: CALL_OW 432
9527: MINUS
9528: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9529: LD_VAR 0 4
9533: PUSH
9534: LD_VAR 0 5
9538: PPUSH
9539: LD_INT 3
9541: PPUSH
9542: CALL_OW 259
9546: PUSH
9547: LD_VAR 0 5
9551: PPUSH
9552: CALL_OW 432
9556: MINUS
9557: GREATEREQUAL
9558: IFFALSE 9576
// mech := result [ i ] ;
9560: LD_ADDR_VAR 0 5
9564: PUSH
9565: LD_VAR 0 2
9569: PUSH
9570: LD_VAR 0 3
9574: ARRAY
9575: ST_TO_ADDR
// end ;
9576: GO 9485
9578: POP
9579: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9580: LD_VAR 0 1
9584: PPUSH
9585: LD_VAR 0 5
9589: PPUSH
9590: CALL_OW 135
// end ;
9594: LD_VAR 0 2
9598: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9599: LD_INT 0
9601: PPUSH
9602: PPUSH
9603: PPUSH
9604: PPUSH
9605: PPUSH
9606: PPUSH
9607: PPUSH
9608: PPUSH
9609: PPUSH
9610: PPUSH
9611: PPUSH
9612: PPUSH
9613: PPUSH
// result := [ ] ;
9614: LD_ADDR_VAR 0 7
9618: PUSH
9619: EMPTY
9620: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9621: LD_VAR 0 1
9625: PPUSH
9626: CALL_OW 266
9630: PUSH
9631: LD_INT 0
9633: PUSH
9634: LD_INT 1
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: IN
9641: NOT
9642: IFFALSE 9646
// exit ;
9644: GO 11280
// if name then
9646: LD_VAR 0 3
9650: IFFALSE 9666
// SetBName ( base_dep , name ) ;
9652: LD_VAR 0 1
9656: PPUSH
9657: LD_VAR 0 3
9661: PPUSH
9662: CALL_OW 500
// base := GetBase ( base_dep ) ;
9666: LD_ADDR_VAR 0 15
9670: PUSH
9671: LD_VAR 0 1
9675: PPUSH
9676: CALL_OW 274
9680: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9681: LD_ADDR_VAR 0 16
9685: PUSH
9686: LD_VAR 0 1
9690: PPUSH
9691: CALL_OW 255
9695: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9696: LD_ADDR_VAR 0 17
9700: PUSH
9701: LD_VAR 0 1
9705: PPUSH
9706: CALL_OW 248
9710: ST_TO_ADDR
// if sources then
9711: LD_VAR 0 5
9715: IFFALSE 9762
// for i = 1 to 3 do
9717: LD_ADDR_VAR 0 8
9721: PUSH
9722: DOUBLE
9723: LD_INT 1
9725: DEC
9726: ST_TO_ADDR
9727: LD_INT 3
9729: PUSH
9730: FOR_TO
9731: IFFALSE 9760
// AddResourceType ( base , i , sources [ i ] ) ;
9733: LD_VAR 0 15
9737: PPUSH
9738: LD_VAR 0 8
9742: PPUSH
9743: LD_VAR 0 5
9747: PUSH
9748: LD_VAR 0 8
9752: ARRAY
9753: PPUSH
9754: CALL_OW 276
9758: GO 9730
9760: POP
9761: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9762: LD_ADDR_VAR 0 18
9766: PUSH
9767: LD_VAR 0 15
9771: PPUSH
9772: LD_VAR 0 2
9776: PPUSH
9777: LD_INT 1
9779: PPUSH
9780: CALL 9023 0 3
9784: ST_TO_ADDR
// InitHc ;
9785: CALL_OW 19
// InitUc ;
9789: CALL_OW 18
// uc_side := side ;
9793: LD_ADDR_OWVAR 20
9797: PUSH
9798: LD_VAR 0 16
9802: ST_TO_ADDR
// uc_nation := nation ;
9803: LD_ADDR_OWVAR 21
9807: PUSH
9808: LD_VAR 0 17
9812: ST_TO_ADDR
// if buildings then
9813: LD_VAR 0 18
9817: IFFALSE 11139
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9819: LD_ADDR_VAR 0 19
9823: PUSH
9824: LD_VAR 0 18
9828: PPUSH
9829: LD_INT 2
9831: PUSH
9832: LD_INT 30
9834: PUSH
9835: LD_INT 29
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: LD_INT 30
9844: PUSH
9845: LD_INT 30
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: PPUSH
9857: CALL_OW 72
9861: ST_TO_ADDR
// if tmp then
9862: LD_VAR 0 19
9866: IFFALSE 9914
// for i in tmp do
9868: LD_ADDR_VAR 0 8
9872: PUSH
9873: LD_VAR 0 19
9877: PUSH
9878: FOR_IN
9879: IFFALSE 9912
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9881: LD_VAR 0 8
9885: PPUSH
9886: CALL_OW 250
9890: PPUSH
9891: LD_VAR 0 8
9895: PPUSH
9896: CALL_OW 251
9900: PPUSH
9901: LD_VAR 0 16
9905: PPUSH
9906: CALL_OW 441
9910: GO 9878
9912: POP
9913: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9914: LD_VAR 0 18
9918: PPUSH
9919: LD_INT 2
9921: PUSH
9922: LD_INT 30
9924: PUSH
9925: LD_INT 32
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 30
9934: PUSH
9935: LD_INT 33
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 72
9951: IFFALSE 10039
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9953: LD_ADDR_VAR 0 8
9957: PUSH
9958: LD_VAR 0 18
9962: PPUSH
9963: LD_INT 2
9965: PUSH
9966: LD_INT 30
9968: PUSH
9969: LD_INT 32
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 30
9978: PUSH
9979: LD_INT 33
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: PPUSH
9991: CALL_OW 72
9995: PUSH
9996: FOR_IN
9997: IFFALSE 10037
// begin if not GetBWeapon ( i ) then
9999: LD_VAR 0 8
10003: PPUSH
10004: CALL_OW 269
10008: NOT
10009: IFFALSE 10035
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10011: LD_VAR 0 8
10015: PPUSH
10016: LD_VAR 0 8
10020: PPUSH
10021: LD_VAR 0 2
10025: PPUSH
10026: CALL 11285 0 2
10030: PPUSH
10031: CALL_OW 431
// end ;
10035: GO 9996
10037: POP
10038: POP
// end ; for i = 1 to personel do
10039: LD_ADDR_VAR 0 8
10043: PUSH
10044: DOUBLE
10045: LD_INT 1
10047: DEC
10048: ST_TO_ADDR
10049: LD_VAR 0 6
10053: PUSH
10054: FOR_TO
10055: IFFALSE 11119
// begin if i > 4 then
10057: LD_VAR 0 8
10061: PUSH
10062: LD_INT 4
10064: GREATER
10065: IFFALSE 10069
// break ;
10067: GO 11119
// case i of 1 :
10069: LD_VAR 0 8
10073: PUSH
10074: LD_INT 1
10076: DOUBLE
10077: EQUAL
10078: IFTRUE 10082
10080: GO 10162
10082: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10083: LD_ADDR_VAR 0 12
10087: PUSH
10088: LD_VAR 0 18
10092: PPUSH
10093: LD_INT 22
10095: PUSH
10096: LD_VAR 0 16
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 58
10107: PUSH
10108: EMPTY
10109: LIST
10110: PUSH
10111: LD_INT 2
10113: PUSH
10114: LD_INT 30
10116: PUSH
10117: LD_INT 32
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 30
10126: PUSH
10127: LD_INT 4
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: LD_INT 30
10136: PUSH
10137: LD_INT 5
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: LIST
10154: PPUSH
10155: CALL_OW 72
10159: ST_TO_ADDR
10160: GO 10384
10162: LD_INT 2
10164: DOUBLE
10165: EQUAL
10166: IFTRUE 10170
10168: GO 10232
10170: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10171: LD_ADDR_VAR 0 12
10175: PUSH
10176: LD_VAR 0 18
10180: PPUSH
10181: LD_INT 22
10183: PUSH
10184: LD_VAR 0 16
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: LD_INT 2
10195: PUSH
10196: LD_INT 30
10198: PUSH
10199: LD_INT 0
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 30
10208: PUSH
10209: LD_INT 1
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PPUSH
10225: CALL_OW 72
10229: ST_TO_ADDR
10230: GO 10384
10232: LD_INT 3
10234: DOUBLE
10235: EQUAL
10236: IFTRUE 10240
10238: GO 10302
10240: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10241: LD_ADDR_VAR 0 12
10245: PUSH
10246: LD_VAR 0 18
10250: PPUSH
10251: LD_INT 22
10253: PUSH
10254: LD_VAR 0 16
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 2
10265: PUSH
10266: LD_INT 30
10268: PUSH
10269: LD_INT 2
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 30
10278: PUSH
10279: LD_INT 3
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PPUSH
10295: CALL_OW 72
10299: ST_TO_ADDR
10300: GO 10384
10302: LD_INT 4
10304: DOUBLE
10305: EQUAL
10306: IFTRUE 10310
10308: GO 10383
10310: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10311: LD_ADDR_VAR 0 12
10315: PUSH
10316: LD_VAR 0 18
10320: PPUSH
10321: LD_INT 22
10323: PUSH
10324: LD_VAR 0 16
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: PUSH
10333: LD_INT 2
10335: PUSH
10336: LD_INT 30
10338: PUSH
10339: LD_INT 6
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 30
10348: PUSH
10349: LD_INT 7
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 30
10358: PUSH
10359: LD_INT 8
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PPUSH
10376: CALL_OW 72
10380: ST_TO_ADDR
10381: GO 10384
10383: POP
// if i = 1 then
10384: LD_VAR 0 8
10388: PUSH
10389: LD_INT 1
10391: EQUAL
10392: IFFALSE 10503
// begin tmp := [ ] ;
10394: LD_ADDR_VAR 0 19
10398: PUSH
10399: EMPTY
10400: ST_TO_ADDR
// for j in f do
10401: LD_ADDR_VAR 0 9
10405: PUSH
10406: LD_VAR 0 12
10410: PUSH
10411: FOR_IN
10412: IFFALSE 10485
// if GetBType ( j ) = b_bunker then
10414: LD_VAR 0 9
10418: PPUSH
10419: CALL_OW 266
10423: PUSH
10424: LD_INT 32
10426: EQUAL
10427: IFFALSE 10454
// tmp := Insert ( tmp , 1 , j ) else
10429: LD_ADDR_VAR 0 19
10433: PUSH
10434: LD_VAR 0 19
10438: PPUSH
10439: LD_INT 1
10441: PPUSH
10442: LD_VAR 0 9
10446: PPUSH
10447: CALL_OW 2
10451: ST_TO_ADDR
10452: GO 10483
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10454: LD_ADDR_VAR 0 19
10458: PUSH
10459: LD_VAR 0 19
10463: PPUSH
10464: LD_VAR 0 19
10468: PUSH
10469: LD_INT 1
10471: PLUS
10472: PPUSH
10473: LD_VAR 0 9
10477: PPUSH
10478: CALL_OW 2
10482: ST_TO_ADDR
10483: GO 10411
10485: POP
10486: POP
// if tmp then
10487: LD_VAR 0 19
10491: IFFALSE 10503
// f := tmp ;
10493: LD_ADDR_VAR 0 12
10497: PUSH
10498: LD_VAR 0 19
10502: ST_TO_ADDR
// end ; x := personel [ i ] ;
10503: LD_ADDR_VAR 0 13
10507: PUSH
10508: LD_VAR 0 6
10512: PUSH
10513: LD_VAR 0 8
10517: ARRAY
10518: ST_TO_ADDR
// if x = - 1 then
10519: LD_VAR 0 13
10523: PUSH
10524: LD_INT 1
10526: NEG
10527: EQUAL
10528: IFFALSE 10737
// begin for j in f do
10530: LD_ADDR_VAR 0 9
10534: PUSH
10535: LD_VAR 0 12
10539: PUSH
10540: FOR_IN
10541: IFFALSE 10733
// repeat InitHc ;
10543: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10547: LD_VAR 0 9
10551: PPUSH
10552: CALL_OW 266
10556: PUSH
10557: LD_INT 5
10559: EQUAL
10560: IFFALSE 10630
// begin if UnitsInside ( j ) < 3 then
10562: LD_VAR 0 9
10566: PPUSH
10567: CALL_OW 313
10571: PUSH
10572: LD_INT 3
10574: LESS
10575: IFFALSE 10611
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10577: LD_INT 0
10579: PPUSH
10580: LD_INT 5
10582: PUSH
10583: LD_INT 8
10585: PUSH
10586: LD_INT 9
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: LIST
10593: PUSH
10594: LD_VAR 0 17
10598: ARRAY
10599: PPUSH
10600: LD_VAR 0 4
10604: PPUSH
10605: CALL_OW 380
10609: GO 10628
// PrepareHuman ( false , i , skill ) ;
10611: LD_INT 0
10613: PPUSH
10614: LD_VAR 0 8
10618: PPUSH
10619: LD_VAR 0 4
10623: PPUSH
10624: CALL_OW 380
// end else
10628: GO 10647
// PrepareHuman ( false , i , skill ) ;
10630: LD_INT 0
10632: PPUSH
10633: LD_VAR 0 8
10637: PPUSH
10638: LD_VAR 0 4
10642: PPUSH
10643: CALL_OW 380
// un := CreateHuman ;
10647: LD_ADDR_VAR 0 14
10651: PUSH
10652: CALL_OW 44
10656: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10657: LD_ADDR_VAR 0 7
10661: PUSH
10662: LD_VAR 0 7
10666: PPUSH
10667: LD_INT 1
10669: PPUSH
10670: LD_VAR 0 14
10674: PPUSH
10675: CALL_OW 2
10679: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10680: LD_VAR 0 14
10684: PPUSH
10685: LD_VAR 0 9
10689: PPUSH
10690: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10694: LD_VAR 0 9
10698: PPUSH
10699: CALL_OW 313
10703: PUSH
10704: LD_INT 6
10706: EQUAL
10707: PUSH
10708: LD_VAR 0 9
10712: PPUSH
10713: CALL_OW 266
10717: PUSH
10718: LD_INT 32
10720: PUSH
10721: LD_INT 31
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: IN
10728: OR
10729: IFFALSE 10543
10731: GO 10540
10733: POP
10734: POP
// end else
10735: GO 11117
// for j = 1 to x do
10737: LD_ADDR_VAR 0 9
10741: PUSH
10742: DOUBLE
10743: LD_INT 1
10745: DEC
10746: ST_TO_ADDR
10747: LD_VAR 0 13
10751: PUSH
10752: FOR_TO
10753: IFFALSE 11115
// begin InitHc ;
10755: CALL_OW 19
// if not f then
10759: LD_VAR 0 12
10763: NOT
10764: IFFALSE 10853
// begin PrepareHuman ( false , i , skill ) ;
10766: LD_INT 0
10768: PPUSH
10769: LD_VAR 0 8
10773: PPUSH
10774: LD_VAR 0 4
10778: PPUSH
10779: CALL_OW 380
// un := CreateHuman ;
10783: LD_ADDR_VAR 0 14
10787: PUSH
10788: CALL_OW 44
10792: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10793: LD_ADDR_VAR 0 7
10797: PUSH
10798: LD_VAR 0 7
10802: PPUSH
10803: LD_INT 1
10805: PPUSH
10806: LD_VAR 0 14
10810: PPUSH
10811: CALL_OW 2
10815: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10816: LD_VAR 0 14
10820: PPUSH
10821: LD_VAR 0 1
10825: PPUSH
10826: CALL_OW 250
10830: PPUSH
10831: LD_VAR 0 1
10835: PPUSH
10836: CALL_OW 251
10840: PPUSH
10841: LD_INT 10
10843: PPUSH
10844: LD_INT 0
10846: PPUSH
10847: CALL_OW 50
// continue ;
10851: GO 10752
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10853: LD_VAR 0 12
10857: PUSH
10858: LD_INT 1
10860: ARRAY
10861: PPUSH
10862: CALL_OW 313
10866: PUSH
10867: LD_VAR 0 12
10871: PUSH
10872: LD_INT 1
10874: ARRAY
10875: PPUSH
10876: CALL_OW 266
10880: PUSH
10881: LD_INT 32
10883: PUSH
10884: LD_INT 31
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: IN
10891: AND
10892: PUSH
10893: LD_VAR 0 12
10897: PUSH
10898: LD_INT 1
10900: ARRAY
10901: PPUSH
10902: CALL_OW 313
10906: PUSH
10907: LD_INT 6
10909: EQUAL
10910: OR
10911: IFFALSE 10931
// f := Delete ( f , 1 ) ;
10913: LD_ADDR_VAR 0 12
10917: PUSH
10918: LD_VAR 0 12
10922: PPUSH
10923: LD_INT 1
10925: PPUSH
10926: CALL_OW 3
10930: ST_TO_ADDR
// if not f then
10931: LD_VAR 0 12
10935: NOT
10936: IFFALSE 10954
// begin x := x + 2 ;
10938: LD_ADDR_VAR 0 13
10942: PUSH
10943: LD_VAR 0 13
10947: PUSH
10948: LD_INT 2
10950: PLUS
10951: ST_TO_ADDR
// continue ;
10952: GO 10752
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10954: LD_VAR 0 12
10958: PUSH
10959: LD_INT 1
10961: ARRAY
10962: PPUSH
10963: CALL_OW 266
10967: PUSH
10968: LD_INT 5
10970: EQUAL
10971: IFFALSE 11045
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10973: LD_VAR 0 12
10977: PUSH
10978: LD_INT 1
10980: ARRAY
10981: PPUSH
10982: CALL_OW 313
10986: PUSH
10987: LD_INT 3
10989: LESS
10990: IFFALSE 11026
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10992: LD_INT 0
10994: PPUSH
10995: LD_INT 5
10997: PUSH
10998: LD_INT 8
11000: PUSH
11001: LD_INT 9
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: PUSH
11009: LD_VAR 0 17
11013: ARRAY
11014: PPUSH
11015: LD_VAR 0 4
11019: PPUSH
11020: CALL_OW 380
11024: GO 11043
// PrepareHuman ( false , i , skill ) ;
11026: LD_INT 0
11028: PPUSH
11029: LD_VAR 0 8
11033: PPUSH
11034: LD_VAR 0 4
11038: PPUSH
11039: CALL_OW 380
// end else
11043: GO 11062
// PrepareHuman ( false , i , skill ) ;
11045: LD_INT 0
11047: PPUSH
11048: LD_VAR 0 8
11052: PPUSH
11053: LD_VAR 0 4
11057: PPUSH
11058: CALL_OW 380
// un := CreateHuman ;
11062: LD_ADDR_VAR 0 14
11066: PUSH
11067: CALL_OW 44
11071: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11072: LD_ADDR_VAR 0 7
11076: PUSH
11077: LD_VAR 0 7
11081: PPUSH
11082: LD_INT 1
11084: PPUSH
11085: LD_VAR 0 14
11089: PPUSH
11090: CALL_OW 2
11094: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11095: LD_VAR 0 14
11099: PPUSH
11100: LD_VAR 0 12
11104: PUSH
11105: LD_INT 1
11107: ARRAY
11108: PPUSH
11109: CALL_OW 52
// end ;
11113: GO 10752
11115: POP
11116: POP
// end ;
11117: GO 10054
11119: POP
11120: POP
// result := result ^ buildings ;
11121: LD_ADDR_VAR 0 7
11125: PUSH
11126: LD_VAR 0 7
11130: PUSH
11131: LD_VAR 0 18
11135: ADD
11136: ST_TO_ADDR
// end else
11137: GO 11280
// begin for i = 1 to personel do
11139: LD_ADDR_VAR 0 8
11143: PUSH
11144: DOUBLE
11145: LD_INT 1
11147: DEC
11148: ST_TO_ADDR
11149: LD_VAR 0 6
11153: PUSH
11154: FOR_TO
11155: IFFALSE 11278
// begin if i > 4 then
11157: LD_VAR 0 8
11161: PUSH
11162: LD_INT 4
11164: GREATER
11165: IFFALSE 11169
// break ;
11167: GO 11278
// x := personel [ i ] ;
11169: LD_ADDR_VAR 0 13
11173: PUSH
11174: LD_VAR 0 6
11178: PUSH
11179: LD_VAR 0 8
11183: ARRAY
11184: ST_TO_ADDR
// if x = - 1 then
11185: LD_VAR 0 13
11189: PUSH
11190: LD_INT 1
11192: NEG
11193: EQUAL
11194: IFFALSE 11198
// continue ;
11196: GO 11154
// PrepareHuman ( false , i , skill ) ;
11198: LD_INT 0
11200: PPUSH
11201: LD_VAR 0 8
11205: PPUSH
11206: LD_VAR 0 4
11210: PPUSH
11211: CALL_OW 380
// un := CreateHuman ;
11215: LD_ADDR_VAR 0 14
11219: PUSH
11220: CALL_OW 44
11224: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11225: LD_VAR 0 14
11229: PPUSH
11230: LD_VAR 0 1
11234: PPUSH
11235: CALL_OW 250
11239: PPUSH
11240: LD_VAR 0 1
11244: PPUSH
11245: CALL_OW 251
11249: PPUSH
11250: LD_INT 10
11252: PPUSH
11253: LD_INT 0
11255: PPUSH
11256: CALL_OW 50
// result := result ^ un ;
11260: LD_ADDR_VAR 0 7
11264: PUSH
11265: LD_VAR 0 7
11269: PUSH
11270: LD_VAR 0 14
11274: ADD
11275: ST_TO_ADDR
// end ;
11276: GO 11154
11278: POP
11279: POP
// end ; end ;
11280: LD_VAR 0 7
11284: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11285: LD_INT 0
11287: PPUSH
11288: PPUSH
11289: PPUSH
11290: PPUSH
11291: PPUSH
11292: PPUSH
11293: PPUSH
11294: PPUSH
11295: PPUSH
11296: PPUSH
11297: PPUSH
11298: PPUSH
11299: PPUSH
11300: PPUSH
11301: PPUSH
11302: PPUSH
// result := false ;
11303: LD_ADDR_VAR 0 3
11307: PUSH
11308: LD_INT 0
11310: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11311: LD_VAR 0 1
11315: NOT
11316: PUSH
11317: LD_VAR 0 1
11321: PPUSH
11322: CALL_OW 266
11326: PUSH
11327: LD_INT 32
11329: PUSH
11330: LD_INT 33
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: IN
11337: NOT
11338: OR
11339: IFFALSE 11343
// exit ;
11341: GO 12452
// nat := GetNation ( tower ) ;
11343: LD_ADDR_VAR 0 12
11347: PUSH
11348: LD_VAR 0 1
11352: PPUSH
11353: CALL_OW 248
11357: ST_TO_ADDR
// side := GetSide ( tower ) ;
11358: LD_ADDR_VAR 0 16
11362: PUSH
11363: LD_VAR 0 1
11367: PPUSH
11368: CALL_OW 255
11372: ST_TO_ADDR
// x := GetX ( tower ) ;
11373: LD_ADDR_VAR 0 10
11377: PUSH
11378: LD_VAR 0 1
11382: PPUSH
11383: CALL_OW 250
11387: ST_TO_ADDR
// y := GetY ( tower ) ;
11388: LD_ADDR_VAR 0 11
11392: PUSH
11393: LD_VAR 0 1
11397: PPUSH
11398: CALL_OW 251
11402: ST_TO_ADDR
// if not x or not y then
11403: LD_VAR 0 10
11407: NOT
11408: PUSH
11409: LD_VAR 0 11
11413: NOT
11414: OR
11415: IFFALSE 11419
// exit ;
11417: GO 12452
// weapon := 0 ;
11419: LD_ADDR_VAR 0 18
11423: PUSH
11424: LD_INT 0
11426: ST_TO_ADDR
// fac_list := [ ] ;
11427: LD_ADDR_VAR 0 17
11431: PUSH
11432: EMPTY
11433: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11434: LD_ADDR_VAR 0 6
11438: PUSH
11439: LD_VAR 0 1
11443: PPUSH
11444: CALL_OW 274
11448: PPUSH
11449: LD_VAR 0 2
11453: PPUSH
11454: LD_INT 0
11456: PPUSH
11457: CALL 9023 0 3
11461: PPUSH
11462: LD_INT 30
11464: PUSH
11465: LD_INT 3
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PPUSH
11472: CALL_OW 72
11476: ST_TO_ADDR
// if not factories then
11477: LD_VAR 0 6
11481: NOT
11482: IFFALSE 11486
// exit ;
11484: GO 12452
// for i in factories do
11486: LD_ADDR_VAR 0 8
11490: PUSH
11491: LD_VAR 0 6
11495: PUSH
11496: FOR_IN
11497: IFFALSE 11522
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11499: LD_ADDR_VAR 0 17
11503: PUSH
11504: LD_VAR 0 17
11508: PUSH
11509: LD_VAR 0 8
11513: PPUSH
11514: CALL_OW 478
11518: UNION
11519: ST_TO_ADDR
11520: GO 11496
11522: POP
11523: POP
// if not fac_list then
11524: LD_VAR 0 17
11528: NOT
11529: IFFALSE 11533
// exit ;
11531: GO 12452
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11533: LD_ADDR_VAR 0 5
11537: PUSH
11538: LD_INT 4
11540: PUSH
11541: LD_INT 5
11543: PUSH
11544: LD_INT 9
11546: PUSH
11547: LD_INT 10
11549: PUSH
11550: LD_INT 6
11552: PUSH
11553: LD_INT 7
11555: PUSH
11556: LD_INT 11
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 27
11570: PUSH
11571: LD_INT 28
11573: PUSH
11574: LD_INT 26
11576: PUSH
11577: LD_INT 30
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 43
11588: PUSH
11589: LD_INT 44
11591: PUSH
11592: LD_INT 46
11594: PUSH
11595: LD_INT 45
11597: PUSH
11598: LD_INT 47
11600: PUSH
11601: LD_INT 49
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: PUSH
11617: LD_VAR 0 12
11621: ARRAY
11622: ST_TO_ADDR
// list := list isect fac_list ;
11623: LD_ADDR_VAR 0 5
11627: PUSH
11628: LD_VAR 0 5
11632: PUSH
11633: LD_VAR 0 17
11637: ISECT
11638: ST_TO_ADDR
// if not list then
11639: LD_VAR 0 5
11643: NOT
11644: IFFALSE 11648
// exit ;
11646: GO 12452
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11648: LD_VAR 0 12
11652: PUSH
11653: LD_INT 3
11655: EQUAL
11656: PUSH
11657: LD_INT 49
11659: PUSH
11660: LD_VAR 0 5
11664: IN
11665: AND
11666: PUSH
11667: LD_INT 31
11669: PPUSH
11670: LD_VAR 0 16
11674: PPUSH
11675: CALL_OW 321
11679: PUSH
11680: LD_INT 2
11682: EQUAL
11683: AND
11684: IFFALSE 11744
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11686: LD_INT 22
11688: PUSH
11689: LD_VAR 0 16
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PUSH
11698: LD_INT 35
11700: PUSH
11701: LD_INT 49
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PUSH
11708: LD_INT 91
11710: PUSH
11711: LD_VAR 0 1
11715: PUSH
11716: LD_INT 10
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: LIST
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: LIST
11728: PPUSH
11729: CALL_OW 69
11733: NOT
11734: IFFALSE 11744
// weapon := ru_time_lapser ;
11736: LD_ADDR_VAR 0 18
11740: PUSH
11741: LD_INT 49
11743: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11744: LD_VAR 0 12
11748: PUSH
11749: LD_INT 1
11751: PUSH
11752: LD_INT 2
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: IN
11759: PUSH
11760: LD_INT 11
11762: PUSH
11763: LD_VAR 0 5
11767: IN
11768: PUSH
11769: LD_INT 30
11771: PUSH
11772: LD_VAR 0 5
11776: IN
11777: OR
11778: AND
11779: PUSH
11780: LD_INT 6
11782: PPUSH
11783: LD_VAR 0 16
11787: PPUSH
11788: CALL_OW 321
11792: PUSH
11793: LD_INT 2
11795: EQUAL
11796: AND
11797: IFFALSE 11962
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11799: LD_INT 22
11801: PUSH
11802: LD_VAR 0 16
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 2
11813: PUSH
11814: LD_INT 35
11816: PUSH
11817: LD_INT 11
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: LD_INT 35
11826: PUSH
11827: LD_INT 30
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 91
11841: PUSH
11842: LD_VAR 0 1
11846: PUSH
11847: LD_INT 18
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: LIST
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: LIST
11859: PPUSH
11860: CALL_OW 69
11864: NOT
11865: PUSH
11866: LD_INT 22
11868: PUSH
11869: LD_VAR 0 16
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PUSH
11878: LD_INT 2
11880: PUSH
11881: LD_INT 30
11883: PUSH
11884: LD_INT 32
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: LD_INT 30
11893: PUSH
11894: LD_INT 33
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 91
11908: PUSH
11909: LD_VAR 0 1
11913: PUSH
11914: LD_INT 12
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: LIST
11926: PUSH
11927: EMPTY
11928: LIST
11929: PPUSH
11930: CALL_OW 69
11934: PUSH
11935: LD_INT 2
11937: GREATER
11938: AND
11939: IFFALSE 11962
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11941: LD_ADDR_VAR 0 18
11945: PUSH
11946: LD_INT 11
11948: PUSH
11949: LD_INT 30
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: LD_VAR 0 12
11960: ARRAY
11961: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11962: LD_VAR 0 18
11966: NOT
11967: PUSH
11968: LD_INT 40
11970: PPUSH
11971: LD_VAR 0 16
11975: PPUSH
11976: CALL_OW 321
11980: PUSH
11981: LD_INT 2
11983: EQUAL
11984: AND
11985: PUSH
11986: LD_INT 7
11988: PUSH
11989: LD_VAR 0 5
11993: IN
11994: PUSH
11995: LD_INT 28
11997: PUSH
11998: LD_VAR 0 5
12002: IN
12003: OR
12004: PUSH
12005: LD_INT 45
12007: PUSH
12008: LD_VAR 0 5
12012: IN
12013: OR
12014: AND
12015: IFFALSE 12269
// begin hex := GetHexInfo ( x , y ) ;
12017: LD_ADDR_VAR 0 4
12021: PUSH
12022: LD_VAR 0 10
12026: PPUSH
12027: LD_VAR 0 11
12031: PPUSH
12032: CALL_OW 546
12036: ST_TO_ADDR
// if hex [ 1 ] then
12037: LD_VAR 0 4
12041: PUSH
12042: LD_INT 1
12044: ARRAY
12045: IFFALSE 12049
// exit ;
12047: GO 12452
// height := hex [ 2 ] ;
12049: LD_ADDR_VAR 0 15
12053: PUSH
12054: LD_VAR 0 4
12058: PUSH
12059: LD_INT 2
12061: ARRAY
12062: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12063: LD_ADDR_VAR 0 14
12067: PUSH
12068: LD_INT 0
12070: PUSH
12071: LD_INT 2
12073: PUSH
12074: LD_INT 3
12076: PUSH
12077: LD_INT 5
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: ST_TO_ADDR
// for i in tmp do
12086: LD_ADDR_VAR 0 8
12090: PUSH
12091: LD_VAR 0 14
12095: PUSH
12096: FOR_IN
12097: IFFALSE 12267
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12099: LD_ADDR_VAR 0 9
12103: PUSH
12104: LD_VAR 0 10
12108: PPUSH
12109: LD_VAR 0 8
12113: PPUSH
12114: LD_INT 5
12116: PPUSH
12117: CALL_OW 272
12121: PUSH
12122: LD_VAR 0 11
12126: PPUSH
12127: LD_VAR 0 8
12131: PPUSH
12132: LD_INT 5
12134: PPUSH
12135: CALL_OW 273
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12144: LD_VAR 0 9
12148: PUSH
12149: LD_INT 1
12151: ARRAY
12152: PPUSH
12153: LD_VAR 0 9
12157: PUSH
12158: LD_INT 2
12160: ARRAY
12161: PPUSH
12162: CALL_OW 488
12166: IFFALSE 12265
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12168: LD_ADDR_VAR 0 4
12172: PUSH
12173: LD_VAR 0 9
12177: PUSH
12178: LD_INT 1
12180: ARRAY
12181: PPUSH
12182: LD_VAR 0 9
12186: PUSH
12187: LD_INT 2
12189: ARRAY
12190: PPUSH
12191: CALL_OW 546
12195: ST_TO_ADDR
// if hex [ 1 ] then
12196: LD_VAR 0 4
12200: PUSH
12201: LD_INT 1
12203: ARRAY
12204: IFFALSE 12208
// continue ;
12206: GO 12096
// h := hex [ 2 ] ;
12208: LD_ADDR_VAR 0 13
12212: PUSH
12213: LD_VAR 0 4
12217: PUSH
12218: LD_INT 2
12220: ARRAY
12221: ST_TO_ADDR
// if h + 7 < height then
12222: LD_VAR 0 13
12226: PUSH
12227: LD_INT 7
12229: PLUS
12230: PUSH
12231: LD_VAR 0 15
12235: LESS
12236: IFFALSE 12265
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12238: LD_ADDR_VAR 0 18
12242: PUSH
12243: LD_INT 7
12245: PUSH
12246: LD_INT 28
12248: PUSH
12249: LD_INT 45
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: PUSH
12257: LD_VAR 0 12
12261: ARRAY
12262: ST_TO_ADDR
// break ;
12263: GO 12267
// end ; end ; end ;
12265: GO 12096
12267: POP
12268: POP
// end ; if not weapon then
12269: LD_VAR 0 18
12273: NOT
12274: IFFALSE 12334
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12276: LD_ADDR_VAR 0 5
12280: PUSH
12281: LD_VAR 0 5
12285: PUSH
12286: LD_INT 11
12288: PUSH
12289: LD_INT 30
12291: PUSH
12292: LD_INT 49
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: DIFF
12300: ST_TO_ADDR
// if not list then
12301: LD_VAR 0 5
12305: NOT
12306: IFFALSE 12310
// exit ;
12308: GO 12452
// weapon := list [ rand ( 1 , list ) ] ;
12310: LD_ADDR_VAR 0 18
12314: PUSH
12315: LD_VAR 0 5
12319: PUSH
12320: LD_INT 1
12322: PPUSH
12323: LD_VAR 0 5
12327: PPUSH
12328: CALL_OW 12
12332: ARRAY
12333: ST_TO_ADDR
// end ; if weapon then
12334: LD_VAR 0 18
12338: IFFALSE 12452
// begin tmp := CostOfWeapon ( weapon ) ;
12340: LD_ADDR_VAR 0 14
12344: PUSH
12345: LD_VAR 0 18
12349: PPUSH
12350: CALL_OW 451
12354: ST_TO_ADDR
// j := GetBase ( tower ) ;
12355: LD_ADDR_VAR 0 9
12359: PUSH
12360: LD_VAR 0 1
12364: PPUSH
12365: CALL_OW 274
12369: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12370: LD_VAR 0 9
12374: PPUSH
12375: LD_INT 1
12377: PPUSH
12378: CALL_OW 275
12382: PUSH
12383: LD_VAR 0 14
12387: PUSH
12388: LD_INT 1
12390: ARRAY
12391: GREATEREQUAL
12392: PUSH
12393: LD_VAR 0 9
12397: PPUSH
12398: LD_INT 2
12400: PPUSH
12401: CALL_OW 275
12405: PUSH
12406: LD_VAR 0 14
12410: PUSH
12411: LD_INT 2
12413: ARRAY
12414: GREATEREQUAL
12415: AND
12416: PUSH
12417: LD_VAR 0 9
12421: PPUSH
12422: LD_INT 3
12424: PPUSH
12425: CALL_OW 275
12429: PUSH
12430: LD_VAR 0 14
12434: PUSH
12435: LD_INT 3
12437: ARRAY
12438: GREATEREQUAL
12439: AND
12440: IFFALSE 12452
// result := weapon ;
12442: LD_ADDR_VAR 0 3
12446: PUSH
12447: LD_VAR 0 18
12451: ST_TO_ADDR
// end ; end ;
12452: LD_VAR 0 3
12456: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12457: LD_INT 0
12459: PPUSH
12460: PPUSH
// result := true ;
12461: LD_ADDR_VAR 0 3
12465: PUSH
12466: LD_INT 1
12468: ST_TO_ADDR
// if array1 = array2 then
12469: LD_VAR 0 1
12473: PUSH
12474: LD_VAR 0 2
12478: EQUAL
12479: IFFALSE 12539
// begin for i = 1 to array1 do
12481: LD_ADDR_VAR 0 4
12485: PUSH
12486: DOUBLE
12487: LD_INT 1
12489: DEC
12490: ST_TO_ADDR
12491: LD_VAR 0 1
12495: PUSH
12496: FOR_TO
12497: IFFALSE 12535
// if array1 [ i ] <> array2 [ i ] then
12499: LD_VAR 0 1
12503: PUSH
12504: LD_VAR 0 4
12508: ARRAY
12509: PUSH
12510: LD_VAR 0 2
12514: PUSH
12515: LD_VAR 0 4
12519: ARRAY
12520: NONEQUAL
12521: IFFALSE 12533
// begin result := false ;
12523: LD_ADDR_VAR 0 3
12527: PUSH
12528: LD_INT 0
12530: ST_TO_ADDR
// break ;
12531: GO 12535
// end ;
12533: GO 12496
12535: POP
12536: POP
// end else
12537: GO 12547
// result := false ;
12539: LD_ADDR_VAR 0 3
12543: PUSH
12544: LD_INT 0
12546: ST_TO_ADDR
// end ;
12547: LD_VAR 0 3
12551: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12552: LD_INT 0
12554: PPUSH
12555: PPUSH
// if not array1 or not array2 then
12556: LD_VAR 0 1
12560: NOT
12561: PUSH
12562: LD_VAR 0 2
12566: NOT
12567: OR
12568: IFFALSE 12572
// exit ;
12570: GO 12636
// result := true ;
12572: LD_ADDR_VAR 0 3
12576: PUSH
12577: LD_INT 1
12579: ST_TO_ADDR
// for i = 1 to array1 do
12580: LD_ADDR_VAR 0 4
12584: PUSH
12585: DOUBLE
12586: LD_INT 1
12588: DEC
12589: ST_TO_ADDR
12590: LD_VAR 0 1
12594: PUSH
12595: FOR_TO
12596: IFFALSE 12634
// if array1 [ i ] <> array2 [ i ] then
12598: LD_VAR 0 1
12602: PUSH
12603: LD_VAR 0 4
12607: ARRAY
12608: PUSH
12609: LD_VAR 0 2
12613: PUSH
12614: LD_VAR 0 4
12618: ARRAY
12619: NONEQUAL
12620: IFFALSE 12632
// begin result := false ;
12622: LD_ADDR_VAR 0 3
12626: PUSH
12627: LD_INT 0
12629: ST_TO_ADDR
// break ;
12630: GO 12634
// end ;
12632: GO 12595
12634: POP
12635: POP
// end ;
12636: LD_VAR 0 3
12640: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12641: LD_INT 0
12643: PPUSH
12644: PPUSH
12645: PPUSH
// pom := GetBase ( fac ) ;
12646: LD_ADDR_VAR 0 5
12650: PUSH
12651: LD_VAR 0 1
12655: PPUSH
12656: CALL_OW 274
12660: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12661: LD_ADDR_VAR 0 4
12665: PUSH
12666: LD_VAR 0 2
12670: PUSH
12671: LD_INT 1
12673: ARRAY
12674: PPUSH
12675: LD_VAR 0 2
12679: PUSH
12680: LD_INT 2
12682: ARRAY
12683: PPUSH
12684: LD_VAR 0 2
12688: PUSH
12689: LD_INT 3
12691: ARRAY
12692: PPUSH
12693: LD_VAR 0 2
12697: PUSH
12698: LD_INT 4
12700: ARRAY
12701: PPUSH
12702: CALL_OW 449
12706: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12707: LD_ADDR_VAR 0 3
12711: PUSH
12712: LD_VAR 0 5
12716: PPUSH
12717: LD_INT 1
12719: PPUSH
12720: CALL_OW 275
12724: PUSH
12725: LD_VAR 0 4
12729: PUSH
12730: LD_INT 1
12732: ARRAY
12733: GREATEREQUAL
12734: PUSH
12735: LD_VAR 0 5
12739: PPUSH
12740: LD_INT 2
12742: PPUSH
12743: CALL_OW 275
12747: PUSH
12748: LD_VAR 0 4
12752: PUSH
12753: LD_INT 2
12755: ARRAY
12756: GREATEREQUAL
12757: AND
12758: PUSH
12759: LD_VAR 0 5
12763: PPUSH
12764: LD_INT 3
12766: PPUSH
12767: CALL_OW 275
12771: PUSH
12772: LD_VAR 0 4
12776: PUSH
12777: LD_INT 3
12779: ARRAY
12780: GREATEREQUAL
12781: AND
12782: ST_TO_ADDR
// end ;
12783: LD_VAR 0 3
12787: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12788: LD_INT 0
12790: PPUSH
12791: PPUSH
12792: PPUSH
12793: PPUSH
// pom := GetBase ( building ) ;
12794: LD_ADDR_VAR 0 3
12798: PUSH
12799: LD_VAR 0 1
12803: PPUSH
12804: CALL_OW 274
12808: ST_TO_ADDR
// if not pom then
12809: LD_VAR 0 3
12813: NOT
12814: IFFALSE 12818
// exit ;
12816: GO 12988
// btype := GetBType ( building ) ;
12818: LD_ADDR_VAR 0 5
12822: PUSH
12823: LD_VAR 0 1
12827: PPUSH
12828: CALL_OW 266
12832: ST_TO_ADDR
// if btype = b_armoury then
12833: LD_VAR 0 5
12837: PUSH
12838: LD_INT 4
12840: EQUAL
12841: IFFALSE 12851
// btype := b_barracks ;
12843: LD_ADDR_VAR 0 5
12847: PUSH
12848: LD_INT 5
12850: ST_TO_ADDR
// if btype = b_depot then
12851: LD_VAR 0 5
12855: PUSH
12856: LD_INT 0
12858: EQUAL
12859: IFFALSE 12869
// btype := b_warehouse ;
12861: LD_ADDR_VAR 0 5
12865: PUSH
12866: LD_INT 1
12868: ST_TO_ADDR
// if btype = b_workshop then
12869: LD_VAR 0 5
12873: PUSH
12874: LD_INT 2
12876: EQUAL
12877: IFFALSE 12887
// btype := b_factory ;
12879: LD_ADDR_VAR 0 5
12883: PUSH
12884: LD_INT 3
12886: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12887: LD_ADDR_VAR 0 4
12891: PUSH
12892: LD_VAR 0 5
12896: PPUSH
12897: LD_VAR 0 1
12901: PPUSH
12902: CALL_OW 248
12906: PPUSH
12907: CALL_OW 450
12911: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12912: LD_ADDR_VAR 0 2
12916: PUSH
12917: LD_VAR 0 3
12921: PPUSH
12922: LD_INT 1
12924: PPUSH
12925: CALL_OW 275
12929: PUSH
12930: LD_VAR 0 4
12934: PUSH
12935: LD_INT 1
12937: ARRAY
12938: GREATEREQUAL
12939: PUSH
12940: LD_VAR 0 3
12944: PPUSH
12945: LD_INT 2
12947: PPUSH
12948: CALL_OW 275
12952: PUSH
12953: LD_VAR 0 4
12957: PUSH
12958: LD_INT 2
12960: ARRAY
12961: GREATEREQUAL
12962: AND
12963: PUSH
12964: LD_VAR 0 3
12968: PPUSH
12969: LD_INT 3
12971: PPUSH
12972: CALL_OW 275
12976: PUSH
12977: LD_VAR 0 4
12981: PUSH
12982: LD_INT 3
12984: ARRAY
12985: GREATEREQUAL
12986: AND
12987: ST_TO_ADDR
// end ;
12988: LD_VAR 0 2
12992: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12993: LD_INT 0
12995: PPUSH
12996: PPUSH
12997: PPUSH
// pom := GetBase ( building ) ;
12998: LD_ADDR_VAR 0 4
13002: PUSH
13003: LD_VAR 0 1
13007: PPUSH
13008: CALL_OW 274
13012: ST_TO_ADDR
// if not pom then
13013: LD_VAR 0 4
13017: NOT
13018: IFFALSE 13022
// exit ;
13020: GO 13123
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13022: LD_ADDR_VAR 0 5
13026: PUSH
13027: LD_VAR 0 2
13031: PPUSH
13032: LD_VAR 0 1
13036: PPUSH
13037: CALL_OW 248
13041: PPUSH
13042: CALL_OW 450
13046: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13047: LD_ADDR_VAR 0 3
13051: PUSH
13052: LD_VAR 0 4
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 275
13064: PUSH
13065: LD_VAR 0 5
13069: PUSH
13070: LD_INT 1
13072: ARRAY
13073: GREATEREQUAL
13074: PUSH
13075: LD_VAR 0 4
13079: PPUSH
13080: LD_INT 2
13082: PPUSH
13083: CALL_OW 275
13087: PUSH
13088: LD_VAR 0 5
13092: PUSH
13093: LD_INT 2
13095: ARRAY
13096: GREATEREQUAL
13097: AND
13098: PUSH
13099: LD_VAR 0 4
13103: PPUSH
13104: LD_INT 3
13106: PPUSH
13107: CALL_OW 275
13111: PUSH
13112: LD_VAR 0 5
13116: PUSH
13117: LD_INT 3
13119: ARRAY
13120: GREATEREQUAL
13121: AND
13122: ST_TO_ADDR
// end ;
13123: LD_VAR 0 3
13127: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13128: LD_INT 0
13130: PPUSH
13131: PPUSH
13132: PPUSH
13133: PPUSH
13134: PPUSH
13135: PPUSH
13136: PPUSH
13137: PPUSH
13138: PPUSH
13139: PPUSH
13140: PPUSH
// result := false ;
13141: LD_ADDR_VAR 0 8
13145: PUSH
13146: LD_INT 0
13148: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13149: LD_VAR 0 5
13153: NOT
13154: PUSH
13155: LD_VAR 0 1
13159: NOT
13160: OR
13161: PUSH
13162: LD_VAR 0 2
13166: NOT
13167: OR
13168: PUSH
13169: LD_VAR 0 3
13173: NOT
13174: OR
13175: IFFALSE 13179
// exit ;
13177: GO 13993
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13179: LD_ADDR_VAR 0 14
13183: PUSH
13184: LD_VAR 0 1
13188: PPUSH
13189: LD_VAR 0 2
13193: PPUSH
13194: LD_VAR 0 3
13198: PPUSH
13199: LD_VAR 0 4
13203: PPUSH
13204: LD_VAR 0 5
13208: PUSH
13209: LD_INT 1
13211: ARRAY
13212: PPUSH
13213: CALL_OW 248
13217: PPUSH
13218: LD_INT 0
13220: PPUSH
13221: CALL 15226 0 6
13225: ST_TO_ADDR
// if not hexes then
13226: LD_VAR 0 14
13230: NOT
13231: IFFALSE 13235
// exit ;
13233: GO 13993
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13235: LD_ADDR_VAR 0 17
13239: PUSH
13240: LD_VAR 0 5
13244: PPUSH
13245: LD_INT 22
13247: PUSH
13248: LD_VAR 0 13
13252: PPUSH
13253: CALL_OW 255
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 2
13264: PUSH
13265: LD_INT 30
13267: PUSH
13268: LD_INT 0
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: LD_INT 30
13277: PUSH
13278: LD_INT 1
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: LIST
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PPUSH
13294: CALL_OW 72
13298: ST_TO_ADDR
// for i = 1 to hexes do
13299: LD_ADDR_VAR 0 9
13303: PUSH
13304: DOUBLE
13305: LD_INT 1
13307: DEC
13308: ST_TO_ADDR
13309: LD_VAR 0 14
13313: PUSH
13314: FOR_TO
13315: IFFALSE 13991
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13317: LD_ADDR_VAR 0 13
13321: PUSH
13322: LD_VAR 0 14
13326: PUSH
13327: LD_VAR 0 9
13331: ARRAY
13332: PUSH
13333: LD_INT 1
13335: ARRAY
13336: PPUSH
13337: LD_VAR 0 14
13341: PUSH
13342: LD_VAR 0 9
13346: ARRAY
13347: PUSH
13348: LD_INT 2
13350: ARRAY
13351: PPUSH
13352: CALL_OW 428
13356: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13357: LD_VAR 0 14
13361: PUSH
13362: LD_VAR 0 9
13366: ARRAY
13367: PUSH
13368: LD_INT 1
13370: ARRAY
13371: PPUSH
13372: LD_VAR 0 14
13376: PUSH
13377: LD_VAR 0 9
13381: ARRAY
13382: PUSH
13383: LD_INT 2
13385: ARRAY
13386: PPUSH
13387: CALL_OW 351
13391: PUSH
13392: LD_VAR 0 14
13396: PUSH
13397: LD_VAR 0 9
13401: ARRAY
13402: PUSH
13403: LD_INT 1
13405: ARRAY
13406: PPUSH
13407: LD_VAR 0 14
13411: PUSH
13412: LD_VAR 0 9
13416: ARRAY
13417: PUSH
13418: LD_INT 2
13420: ARRAY
13421: PPUSH
13422: CALL_OW 488
13426: NOT
13427: OR
13428: PUSH
13429: LD_VAR 0 13
13433: PPUSH
13434: CALL_OW 247
13438: PUSH
13439: LD_INT 3
13441: EQUAL
13442: OR
13443: IFFALSE 13449
// exit ;
13445: POP
13446: POP
13447: GO 13993
// if not tmp then
13449: LD_VAR 0 13
13453: NOT
13454: IFFALSE 13458
// continue ;
13456: GO 13314
// result := true ;
13458: LD_ADDR_VAR 0 8
13462: PUSH
13463: LD_INT 1
13465: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13466: LD_VAR 0 6
13470: PUSH
13471: LD_VAR 0 13
13475: PPUSH
13476: CALL_OW 247
13480: PUSH
13481: LD_INT 2
13483: EQUAL
13484: AND
13485: PUSH
13486: LD_VAR 0 13
13490: PPUSH
13491: CALL_OW 263
13495: PUSH
13496: LD_INT 1
13498: EQUAL
13499: AND
13500: IFFALSE 13664
// begin if IsDrivenBy ( tmp ) then
13502: LD_VAR 0 13
13506: PPUSH
13507: CALL_OW 311
13511: IFFALSE 13515
// continue ;
13513: GO 13314
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13515: LD_VAR 0 6
13519: PPUSH
13520: LD_INT 3
13522: PUSH
13523: LD_INT 60
13525: PUSH
13526: EMPTY
13527: LIST
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PUSH
13533: LD_INT 3
13535: PUSH
13536: LD_INT 55
13538: PUSH
13539: EMPTY
13540: LIST
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PPUSH
13550: CALL_OW 72
13554: IFFALSE 13662
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13556: LD_ADDR_VAR 0 18
13560: PUSH
13561: LD_VAR 0 6
13565: PPUSH
13566: LD_INT 3
13568: PUSH
13569: LD_INT 60
13571: PUSH
13572: EMPTY
13573: LIST
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: LD_INT 3
13581: PUSH
13582: LD_INT 55
13584: PUSH
13585: EMPTY
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PPUSH
13596: CALL_OW 72
13600: PUSH
13601: LD_INT 1
13603: ARRAY
13604: ST_TO_ADDR
// if IsInUnit ( driver ) then
13605: LD_VAR 0 18
13609: PPUSH
13610: CALL_OW 310
13614: IFFALSE 13625
// ComExit ( driver ) ;
13616: LD_VAR 0 18
13620: PPUSH
13621: CALL 38978 0 1
// AddComEnterUnit ( driver , tmp ) ;
13625: LD_VAR 0 18
13629: PPUSH
13630: LD_VAR 0 13
13634: PPUSH
13635: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13639: LD_VAR 0 18
13643: PPUSH
13644: LD_VAR 0 7
13648: PPUSH
13649: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13653: LD_VAR 0 18
13657: PPUSH
13658: CALL_OW 181
// end ; continue ;
13662: GO 13314
// end ; if not cleaners or not tmp in cleaners then
13664: LD_VAR 0 6
13668: NOT
13669: PUSH
13670: LD_VAR 0 13
13674: PUSH
13675: LD_VAR 0 6
13679: IN
13680: NOT
13681: OR
13682: IFFALSE 13989
// begin if dep then
13684: LD_VAR 0 17
13688: IFFALSE 13824
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13690: LD_ADDR_VAR 0 16
13694: PUSH
13695: LD_VAR 0 17
13699: PUSH
13700: LD_INT 1
13702: ARRAY
13703: PPUSH
13704: CALL_OW 250
13708: PPUSH
13709: LD_VAR 0 17
13713: PUSH
13714: LD_INT 1
13716: ARRAY
13717: PPUSH
13718: CALL_OW 254
13722: PPUSH
13723: LD_INT 5
13725: PPUSH
13726: CALL_OW 272
13730: PUSH
13731: LD_VAR 0 17
13735: PUSH
13736: LD_INT 1
13738: ARRAY
13739: PPUSH
13740: CALL_OW 251
13744: PPUSH
13745: LD_VAR 0 17
13749: PUSH
13750: LD_INT 1
13752: ARRAY
13753: PPUSH
13754: CALL_OW 254
13758: PPUSH
13759: LD_INT 5
13761: PPUSH
13762: CALL_OW 273
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13771: LD_VAR 0 16
13775: PUSH
13776: LD_INT 1
13778: ARRAY
13779: PPUSH
13780: LD_VAR 0 16
13784: PUSH
13785: LD_INT 2
13787: ARRAY
13788: PPUSH
13789: CALL_OW 488
13793: IFFALSE 13824
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13795: LD_VAR 0 13
13799: PPUSH
13800: LD_VAR 0 16
13804: PUSH
13805: LD_INT 1
13807: ARRAY
13808: PPUSH
13809: LD_VAR 0 16
13813: PUSH
13814: LD_INT 2
13816: ARRAY
13817: PPUSH
13818: CALL_OW 111
// continue ;
13822: GO 13314
// end ; end ; r := GetDir ( tmp ) ;
13824: LD_ADDR_VAR 0 15
13828: PUSH
13829: LD_VAR 0 13
13833: PPUSH
13834: CALL_OW 254
13838: ST_TO_ADDR
// if r = 5 then
13839: LD_VAR 0 15
13843: PUSH
13844: LD_INT 5
13846: EQUAL
13847: IFFALSE 13857
// r := 0 ;
13849: LD_ADDR_VAR 0 15
13853: PUSH
13854: LD_INT 0
13856: ST_TO_ADDR
// for j = r to 5 do
13857: LD_ADDR_VAR 0 10
13861: PUSH
13862: DOUBLE
13863: LD_VAR 0 15
13867: DEC
13868: ST_TO_ADDR
13869: LD_INT 5
13871: PUSH
13872: FOR_TO
13873: IFFALSE 13987
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13875: LD_ADDR_VAR 0 11
13879: PUSH
13880: LD_VAR 0 13
13884: PPUSH
13885: CALL_OW 250
13889: PPUSH
13890: LD_VAR 0 10
13894: PPUSH
13895: LD_INT 2
13897: PPUSH
13898: CALL_OW 272
13902: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13903: LD_ADDR_VAR 0 12
13907: PUSH
13908: LD_VAR 0 13
13912: PPUSH
13913: CALL_OW 251
13917: PPUSH
13918: LD_VAR 0 10
13922: PPUSH
13923: LD_INT 2
13925: PPUSH
13926: CALL_OW 273
13930: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13931: LD_VAR 0 11
13935: PPUSH
13936: LD_VAR 0 12
13940: PPUSH
13941: CALL_OW 488
13945: PUSH
13946: LD_VAR 0 11
13950: PPUSH
13951: LD_VAR 0 12
13955: PPUSH
13956: CALL_OW 428
13960: NOT
13961: AND
13962: IFFALSE 13985
// begin ComMoveXY ( tmp , _x , _y ) ;
13964: LD_VAR 0 13
13968: PPUSH
13969: LD_VAR 0 11
13973: PPUSH
13974: LD_VAR 0 12
13978: PPUSH
13979: CALL_OW 111
// break ;
13983: GO 13987
// end ; end ;
13985: GO 13872
13987: POP
13988: POP
// end ; end ;
13989: GO 13314
13991: POP
13992: POP
// end ;
13993: LD_VAR 0 8
13997: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13998: LD_INT 0
14000: PPUSH
// result := true ;
14001: LD_ADDR_VAR 0 3
14005: PUSH
14006: LD_INT 1
14008: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14009: LD_VAR 0 2
14013: PUSH
14014: LD_INT 24
14016: DOUBLE
14017: EQUAL
14018: IFTRUE 14028
14020: LD_INT 33
14022: DOUBLE
14023: EQUAL
14024: IFTRUE 14028
14026: GO 14053
14028: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14029: LD_ADDR_VAR 0 3
14033: PUSH
14034: LD_INT 32
14036: PPUSH
14037: LD_VAR 0 1
14041: PPUSH
14042: CALL_OW 321
14046: PUSH
14047: LD_INT 2
14049: EQUAL
14050: ST_TO_ADDR
14051: GO 14369
14053: LD_INT 20
14055: DOUBLE
14056: EQUAL
14057: IFTRUE 14061
14059: GO 14086
14061: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14062: LD_ADDR_VAR 0 3
14066: PUSH
14067: LD_INT 6
14069: PPUSH
14070: LD_VAR 0 1
14074: PPUSH
14075: CALL_OW 321
14079: PUSH
14080: LD_INT 2
14082: EQUAL
14083: ST_TO_ADDR
14084: GO 14369
14086: LD_INT 22
14088: DOUBLE
14089: EQUAL
14090: IFTRUE 14100
14092: LD_INT 36
14094: DOUBLE
14095: EQUAL
14096: IFTRUE 14100
14098: GO 14125
14100: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14101: LD_ADDR_VAR 0 3
14105: PUSH
14106: LD_INT 15
14108: PPUSH
14109: LD_VAR 0 1
14113: PPUSH
14114: CALL_OW 321
14118: PUSH
14119: LD_INT 2
14121: EQUAL
14122: ST_TO_ADDR
14123: GO 14369
14125: LD_INT 30
14127: DOUBLE
14128: EQUAL
14129: IFTRUE 14133
14131: GO 14158
14133: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14134: LD_ADDR_VAR 0 3
14138: PUSH
14139: LD_INT 20
14141: PPUSH
14142: LD_VAR 0 1
14146: PPUSH
14147: CALL_OW 321
14151: PUSH
14152: LD_INT 2
14154: EQUAL
14155: ST_TO_ADDR
14156: GO 14369
14158: LD_INT 28
14160: DOUBLE
14161: EQUAL
14162: IFTRUE 14172
14164: LD_INT 21
14166: DOUBLE
14167: EQUAL
14168: IFTRUE 14172
14170: GO 14197
14172: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14173: LD_ADDR_VAR 0 3
14177: PUSH
14178: LD_INT 21
14180: PPUSH
14181: LD_VAR 0 1
14185: PPUSH
14186: CALL_OW 321
14190: PUSH
14191: LD_INT 2
14193: EQUAL
14194: ST_TO_ADDR
14195: GO 14369
14197: LD_INT 16
14199: DOUBLE
14200: EQUAL
14201: IFTRUE 14205
14203: GO 14230
14205: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14206: LD_ADDR_VAR 0 3
14210: PUSH
14211: LD_INT 84
14213: PPUSH
14214: LD_VAR 0 1
14218: PPUSH
14219: CALL_OW 321
14223: PUSH
14224: LD_INT 2
14226: EQUAL
14227: ST_TO_ADDR
14228: GO 14369
14230: LD_INT 19
14232: DOUBLE
14233: EQUAL
14234: IFTRUE 14244
14236: LD_INT 23
14238: DOUBLE
14239: EQUAL
14240: IFTRUE 14244
14242: GO 14269
14244: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14245: LD_ADDR_VAR 0 3
14249: PUSH
14250: LD_INT 83
14252: PPUSH
14253: LD_VAR 0 1
14257: PPUSH
14258: CALL_OW 321
14262: PUSH
14263: LD_INT 2
14265: EQUAL
14266: ST_TO_ADDR
14267: GO 14369
14269: LD_INT 17
14271: DOUBLE
14272: EQUAL
14273: IFTRUE 14277
14275: GO 14302
14277: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14278: LD_ADDR_VAR 0 3
14282: PUSH
14283: LD_INT 39
14285: PPUSH
14286: LD_VAR 0 1
14290: PPUSH
14291: CALL_OW 321
14295: PUSH
14296: LD_INT 2
14298: EQUAL
14299: ST_TO_ADDR
14300: GO 14369
14302: LD_INT 18
14304: DOUBLE
14305: EQUAL
14306: IFTRUE 14310
14308: GO 14335
14310: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14311: LD_ADDR_VAR 0 3
14315: PUSH
14316: LD_INT 40
14318: PPUSH
14319: LD_VAR 0 1
14323: PPUSH
14324: CALL_OW 321
14328: PUSH
14329: LD_INT 2
14331: EQUAL
14332: ST_TO_ADDR
14333: GO 14369
14335: LD_INT 27
14337: DOUBLE
14338: EQUAL
14339: IFTRUE 14343
14341: GO 14368
14343: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14344: LD_ADDR_VAR 0 3
14348: PUSH
14349: LD_INT 35
14351: PPUSH
14352: LD_VAR 0 1
14356: PPUSH
14357: CALL_OW 321
14361: PUSH
14362: LD_INT 2
14364: EQUAL
14365: ST_TO_ADDR
14366: GO 14369
14368: POP
// end ;
14369: LD_VAR 0 3
14373: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14374: LD_INT 0
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
14381: PPUSH
14382: PPUSH
14383: PPUSH
14384: PPUSH
14385: PPUSH
14386: PPUSH
// result := false ;
14387: LD_ADDR_VAR 0 6
14391: PUSH
14392: LD_INT 0
14394: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14395: LD_VAR 0 1
14399: NOT
14400: PUSH
14401: LD_VAR 0 1
14405: PPUSH
14406: CALL_OW 266
14410: PUSH
14411: LD_INT 0
14413: PUSH
14414: LD_INT 1
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: IN
14421: NOT
14422: OR
14423: PUSH
14424: LD_VAR 0 2
14428: NOT
14429: OR
14430: PUSH
14431: LD_VAR 0 5
14435: PUSH
14436: LD_INT 0
14438: PUSH
14439: LD_INT 1
14441: PUSH
14442: LD_INT 2
14444: PUSH
14445: LD_INT 3
14447: PUSH
14448: LD_INT 4
14450: PUSH
14451: LD_INT 5
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: IN
14462: NOT
14463: OR
14464: PUSH
14465: LD_VAR 0 3
14469: PPUSH
14470: LD_VAR 0 4
14474: PPUSH
14475: CALL_OW 488
14479: NOT
14480: OR
14481: IFFALSE 14485
// exit ;
14483: GO 15221
// side := GetSide ( depot ) ;
14485: LD_ADDR_VAR 0 9
14489: PUSH
14490: LD_VAR 0 1
14494: PPUSH
14495: CALL_OW 255
14499: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14500: LD_VAR 0 9
14504: PPUSH
14505: LD_VAR 0 2
14509: PPUSH
14510: CALL 13998 0 2
14514: NOT
14515: IFFALSE 14519
// exit ;
14517: GO 15221
// pom := GetBase ( depot ) ;
14519: LD_ADDR_VAR 0 10
14523: PUSH
14524: LD_VAR 0 1
14528: PPUSH
14529: CALL_OW 274
14533: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14534: LD_ADDR_VAR 0 11
14538: PUSH
14539: LD_VAR 0 2
14543: PPUSH
14544: LD_VAR 0 1
14548: PPUSH
14549: CALL_OW 248
14553: PPUSH
14554: CALL_OW 450
14558: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14559: LD_VAR 0 10
14563: PPUSH
14564: LD_INT 1
14566: PPUSH
14567: CALL_OW 275
14571: PUSH
14572: LD_VAR 0 11
14576: PUSH
14577: LD_INT 1
14579: ARRAY
14580: GREATEREQUAL
14581: PUSH
14582: LD_VAR 0 10
14586: PPUSH
14587: LD_INT 2
14589: PPUSH
14590: CALL_OW 275
14594: PUSH
14595: LD_VAR 0 11
14599: PUSH
14600: LD_INT 2
14602: ARRAY
14603: GREATEREQUAL
14604: AND
14605: PUSH
14606: LD_VAR 0 10
14610: PPUSH
14611: LD_INT 3
14613: PPUSH
14614: CALL_OW 275
14618: PUSH
14619: LD_VAR 0 11
14623: PUSH
14624: LD_INT 3
14626: ARRAY
14627: GREATEREQUAL
14628: AND
14629: NOT
14630: IFFALSE 14634
// exit ;
14632: GO 15221
// if GetBType ( depot ) = b_depot then
14634: LD_VAR 0 1
14638: PPUSH
14639: CALL_OW 266
14643: PUSH
14644: LD_INT 0
14646: EQUAL
14647: IFFALSE 14659
// dist := 28 else
14649: LD_ADDR_VAR 0 14
14653: PUSH
14654: LD_INT 28
14656: ST_TO_ADDR
14657: GO 14667
// dist := 36 ;
14659: LD_ADDR_VAR 0 14
14663: PUSH
14664: LD_INT 36
14666: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14667: LD_VAR 0 1
14671: PPUSH
14672: LD_VAR 0 3
14676: PPUSH
14677: LD_VAR 0 4
14681: PPUSH
14682: CALL_OW 297
14686: PUSH
14687: LD_VAR 0 14
14691: GREATER
14692: IFFALSE 14696
// exit ;
14694: GO 15221
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14696: LD_ADDR_VAR 0 12
14700: PUSH
14701: LD_VAR 0 2
14705: PPUSH
14706: LD_VAR 0 3
14710: PPUSH
14711: LD_VAR 0 4
14715: PPUSH
14716: LD_VAR 0 5
14720: PPUSH
14721: LD_VAR 0 1
14725: PPUSH
14726: CALL_OW 248
14730: PPUSH
14731: LD_INT 0
14733: PPUSH
14734: CALL 15226 0 6
14738: ST_TO_ADDR
// if not hexes then
14739: LD_VAR 0 12
14743: NOT
14744: IFFALSE 14748
// exit ;
14746: GO 15221
// hex := GetHexInfo ( x , y ) ;
14748: LD_ADDR_VAR 0 15
14752: PUSH
14753: LD_VAR 0 3
14757: PPUSH
14758: LD_VAR 0 4
14762: PPUSH
14763: CALL_OW 546
14767: ST_TO_ADDR
// if hex [ 1 ] then
14768: LD_VAR 0 15
14772: PUSH
14773: LD_INT 1
14775: ARRAY
14776: IFFALSE 14780
// exit ;
14778: GO 15221
// height := hex [ 2 ] ;
14780: LD_ADDR_VAR 0 13
14784: PUSH
14785: LD_VAR 0 15
14789: PUSH
14790: LD_INT 2
14792: ARRAY
14793: ST_TO_ADDR
// for i = 1 to hexes do
14794: LD_ADDR_VAR 0 7
14798: PUSH
14799: DOUBLE
14800: LD_INT 1
14802: DEC
14803: ST_TO_ADDR
14804: LD_VAR 0 12
14808: PUSH
14809: FOR_TO
14810: IFFALSE 15140
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14812: LD_VAR 0 12
14816: PUSH
14817: LD_VAR 0 7
14821: ARRAY
14822: PUSH
14823: LD_INT 1
14825: ARRAY
14826: PPUSH
14827: LD_VAR 0 12
14831: PUSH
14832: LD_VAR 0 7
14836: ARRAY
14837: PUSH
14838: LD_INT 2
14840: ARRAY
14841: PPUSH
14842: CALL_OW 488
14846: NOT
14847: PUSH
14848: LD_VAR 0 12
14852: PUSH
14853: LD_VAR 0 7
14857: ARRAY
14858: PUSH
14859: LD_INT 1
14861: ARRAY
14862: PPUSH
14863: LD_VAR 0 12
14867: PUSH
14868: LD_VAR 0 7
14872: ARRAY
14873: PUSH
14874: LD_INT 2
14876: ARRAY
14877: PPUSH
14878: CALL_OW 428
14882: PUSH
14883: LD_INT 0
14885: GREATER
14886: OR
14887: PUSH
14888: LD_VAR 0 12
14892: PUSH
14893: LD_VAR 0 7
14897: ARRAY
14898: PUSH
14899: LD_INT 1
14901: ARRAY
14902: PPUSH
14903: LD_VAR 0 12
14907: PUSH
14908: LD_VAR 0 7
14912: ARRAY
14913: PUSH
14914: LD_INT 2
14916: ARRAY
14917: PPUSH
14918: CALL_OW 351
14922: OR
14923: IFFALSE 14929
// exit ;
14925: POP
14926: POP
14927: GO 15221
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14929: LD_ADDR_VAR 0 8
14933: PUSH
14934: LD_VAR 0 12
14938: PUSH
14939: LD_VAR 0 7
14943: ARRAY
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_VAR 0 12
14953: PUSH
14954: LD_VAR 0 7
14958: ARRAY
14959: PUSH
14960: LD_INT 2
14962: ARRAY
14963: PPUSH
14964: CALL_OW 546
14968: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14969: LD_VAR 0 8
14973: PUSH
14974: LD_INT 1
14976: ARRAY
14977: PUSH
14978: LD_VAR 0 8
14982: PUSH
14983: LD_INT 2
14985: ARRAY
14986: PUSH
14987: LD_VAR 0 13
14991: PUSH
14992: LD_INT 2
14994: PLUS
14995: GREATER
14996: OR
14997: PUSH
14998: LD_VAR 0 8
15002: PUSH
15003: LD_INT 2
15005: ARRAY
15006: PUSH
15007: LD_VAR 0 13
15011: PUSH
15012: LD_INT 2
15014: MINUS
15015: LESS
15016: OR
15017: PUSH
15018: LD_VAR 0 8
15022: PUSH
15023: LD_INT 3
15025: ARRAY
15026: PUSH
15027: LD_INT 0
15029: PUSH
15030: LD_INT 8
15032: PUSH
15033: LD_INT 9
15035: PUSH
15036: LD_INT 10
15038: PUSH
15039: LD_INT 11
15041: PUSH
15042: LD_INT 12
15044: PUSH
15045: LD_INT 13
15047: PUSH
15048: LD_INT 16
15050: PUSH
15051: LD_INT 17
15053: PUSH
15054: LD_INT 18
15056: PUSH
15057: LD_INT 19
15059: PUSH
15060: LD_INT 20
15062: PUSH
15063: LD_INT 21
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: IN
15081: NOT
15082: OR
15083: PUSH
15084: LD_VAR 0 8
15088: PUSH
15089: LD_INT 5
15091: ARRAY
15092: NOT
15093: OR
15094: PUSH
15095: LD_VAR 0 8
15099: PUSH
15100: LD_INT 6
15102: ARRAY
15103: PUSH
15104: LD_INT 1
15106: PUSH
15107: LD_INT 2
15109: PUSH
15110: LD_INT 7
15112: PUSH
15113: LD_INT 9
15115: PUSH
15116: LD_INT 10
15118: PUSH
15119: LD_INT 11
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: IN
15130: NOT
15131: OR
15132: IFFALSE 15138
// exit ;
15134: POP
15135: POP
15136: GO 15221
// end ;
15138: GO 14809
15140: POP
15141: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15142: LD_VAR 0 9
15146: PPUSH
15147: LD_VAR 0 3
15151: PPUSH
15152: LD_VAR 0 4
15156: PPUSH
15157: LD_INT 20
15159: PPUSH
15160: CALL 7173 0 4
15164: PUSH
15165: LD_INT 4
15167: ARRAY
15168: IFFALSE 15172
// exit ;
15170: GO 15221
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15172: LD_VAR 0 2
15176: PUSH
15177: LD_INT 29
15179: PUSH
15180: LD_INT 30
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: IN
15187: PUSH
15188: LD_VAR 0 3
15192: PPUSH
15193: LD_VAR 0 4
15197: PPUSH
15198: LD_VAR 0 9
15202: PPUSH
15203: CALL_OW 440
15207: NOT
15208: AND
15209: IFFALSE 15213
// exit ;
15211: GO 15221
// result := true ;
15213: LD_ADDR_VAR 0 6
15217: PUSH
15218: LD_INT 1
15220: ST_TO_ADDR
// end ;
15221: LD_VAR 0 6
15225: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15226: LD_INT 0
15228: PPUSH
15229: PPUSH
15230: PPUSH
15231: PPUSH
15232: PPUSH
15233: PPUSH
15234: PPUSH
15235: PPUSH
15236: PPUSH
15237: PPUSH
15238: PPUSH
15239: PPUSH
15240: PPUSH
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
15245: PPUSH
15246: PPUSH
15247: PPUSH
15248: PPUSH
15249: PPUSH
15250: PPUSH
15251: PPUSH
15252: PPUSH
15253: PPUSH
15254: PPUSH
15255: PPUSH
15256: PPUSH
15257: PPUSH
15258: PPUSH
15259: PPUSH
15260: PPUSH
15261: PPUSH
15262: PPUSH
15263: PPUSH
15264: PPUSH
15265: PPUSH
15266: PPUSH
15267: PPUSH
15268: PPUSH
15269: PPUSH
15270: PPUSH
15271: PPUSH
15272: PPUSH
15273: PPUSH
15274: PPUSH
15275: PPUSH
15276: PPUSH
15277: PPUSH
15278: PPUSH
15279: PPUSH
15280: PPUSH
15281: PPUSH
15282: PPUSH
15283: PPUSH
15284: PPUSH
15285: PPUSH
// result = [ ] ;
15286: LD_ADDR_VAR 0 7
15290: PUSH
15291: EMPTY
15292: ST_TO_ADDR
// temp_list = [ ] ;
15293: LD_ADDR_VAR 0 9
15297: PUSH
15298: EMPTY
15299: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15300: LD_VAR 0 4
15304: PUSH
15305: LD_INT 0
15307: PUSH
15308: LD_INT 1
15310: PUSH
15311: LD_INT 2
15313: PUSH
15314: LD_INT 3
15316: PUSH
15317: LD_INT 4
15319: PUSH
15320: LD_INT 5
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: IN
15331: NOT
15332: PUSH
15333: LD_VAR 0 1
15337: PUSH
15338: LD_INT 0
15340: PUSH
15341: LD_INT 1
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: IN
15348: PUSH
15349: LD_VAR 0 5
15353: PUSH
15354: LD_INT 1
15356: PUSH
15357: LD_INT 2
15359: PUSH
15360: LD_INT 3
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: LIST
15367: IN
15368: NOT
15369: AND
15370: OR
15371: IFFALSE 15375
// exit ;
15373: GO 33766
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15375: LD_VAR 0 1
15379: PUSH
15380: LD_INT 6
15382: PUSH
15383: LD_INT 7
15385: PUSH
15386: LD_INT 8
15388: PUSH
15389: LD_INT 13
15391: PUSH
15392: LD_INT 12
15394: PUSH
15395: LD_INT 15
15397: PUSH
15398: LD_INT 11
15400: PUSH
15401: LD_INT 14
15403: PUSH
15404: LD_INT 10
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: IN
15418: IFFALSE 15428
// btype = b_lab ;
15420: LD_ADDR_VAR 0 1
15424: PUSH
15425: LD_INT 6
15427: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15428: LD_VAR 0 6
15432: PUSH
15433: LD_INT 0
15435: PUSH
15436: LD_INT 1
15438: PUSH
15439: LD_INT 2
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: LIST
15446: IN
15447: NOT
15448: PUSH
15449: LD_VAR 0 1
15453: PUSH
15454: LD_INT 0
15456: PUSH
15457: LD_INT 1
15459: PUSH
15460: LD_INT 2
15462: PUSH
15463: LD_INT 3
15465: PUSH
15466: LD_INT 6
15468: PUSH
15469: LD_INT 36
15471: PUSH
15472: LD_INT 4
15474: PUSH
15475: LD_INT 5
15477: PUSH
15478: LD_INT 31
15480: PUSH
15481: LD_INT 32
15483: PUSH
15484: LD_INT 33
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: IN
15500: NOT
15501: PUSH
15502: LD_VAR 0 6
15506: PUSH
15507: LD_INT 1
15509: EQUAL
15510: AND
15511: OR
15512: PUSH
15513: LD_VAR 0 1
15517: PUSH
15518: LD_INT 2
15520: PUSH
15521: LD_INT 3
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: IN
15528: NOT
15529: PUSH
15530: LD_VAR 0 6
15534: PUSH
15535: LD_INT 2
15537: EQUAL
15538: AND
15539: OR
15540: IFFALSE 15550
// mode = 0 ;
15542: LD_ADDR_VAR 0 6
15546: PUSH
15547: LD_INT 0
15549: ST_TO_ADDR
// case mode of 0 :
15550: LD_VAR 0 6
15554: PUSH
15555: LD_INT 0
15557: DOUBLE
15558: EQUAL
15559: IFTRUE 15563
15561: GO 27016
15563: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15564: LD_ADDR_VAR 0 11
15568: PUSH
15569: LD_INT 0
15571: PUSH
15572: LD_INT 0
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 0
15581: PUSH
15582: LD_INT 1
15584: NEG
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 1
15592: PUSH
15593: LD_INT 0
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: LD_INT 1
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 0
15612: PUSH
15613: LD_INT 1
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: LD_INT 1
15622: NEG
15623: PUSH
15624: LD_INT 0
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 1
15633: NEG
15634: PUSH
15635: LD_INT 1
15637: NEG
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 1
15645: NEG
15646: PUSH
15647: LD_INT 2
15649: NEG
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PUSH
15655: LD_INT 0
15657: PUSH
15658: LD_INT 2
15660: NEG
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 1
15668: PUSH
15669: LD_INT 1
15671: NEG
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 1
15679: PUSH
15680: LD_INT 2
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 0
15689: PUSH
15690: LD_INT 2
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: LD_INT 1
15699: NEG
15700: PUSH
15701: LD_INT 1
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 1
15710: PUSH
15711: LD_INT 3
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 0
15720: PUSH
15721: LD_INT 3
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 1
15730: NEG
15731: PUSH
15732: LD_INT 2
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15757: LD_ADDR_VAR 0 12
15761: PUSH
15762: LD_INT 0
15764: PUSH
15765: LD_INT 0
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PUSH
15772: LD_INT 0
15774: PUSH
15775: LD_INT 1
15777: NEG
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 1
15785: PUSH
15786: LD_INT 0
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 1
15795: PUSH
15796: LD_INT 1
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 0
15805: PUSH
15806: LD_INT 1
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 1
15815: NEG
15816: PUSH
15817: LD_INT 0
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 1
15826: NEG
15827: PUSH
15828: LD_INT 1
15830: NEG
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 1
15838: PUSH
15839: LD_INT 1
15841: NEG
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 2
15849: PUSH
15850: LD_INT 0
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: LD_INT 2
15859: PUSH
15860: LD_INT 1
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 1
15869: NEG
15870: PUSH
15871: LD_INT 1
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: LD_INT 2
15880: NEG
15881: PUSH
15882: LD_INT 0
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: LD_INT 2
15891: NEG
15892: PUSH
15893: LD_INT 1
15895: NEG
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 2
15903: NEG
15904: PUSH
15905: LD_INT 1
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: LD_INT 3
15914: NEG
15915: PUSH
15916: LD_INT 0
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 3
15925: NEG
15926: PUSH
15927: LD_INT 1
15929: NEG
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15953: LD_ADDR_VAR 0 13
15957: PUSH
15958: LD_INT 0
15960: PUSH
15961: LD_INT 0
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: LD_INT 0
15970: PUSH
15971: LD_INT 1
15973: NEG
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 1
15981: PUSH
15982: LD_INT 0
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 1
15991: PUSH
15992: LD_INT 1
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 0
16001: PUSH
16002: LD_INT 1
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 1
16011: NEG
16012: PUSH
16013: LD_INT 0
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 1
16022: NEG
16023: PUSH
16024: LD_INT 1
16026: NEG
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 1
16034: NEG
16035: PUSH
16036: LD_INT 2
16038: NEG
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 2
16046: PUSH
16047: LD_INT 1
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: LD_INT 2
16056: PUSH
16057: LD_INT 2
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: LD_INT 1
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: LD_INT 2
16076: NEG
16077: PUSH
16078: LD_INT 1
16080: NEG
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: LD_INT 2
16088: NEG
16089: PUSH
16090: LD_INT 2
16092: NEG
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 2
16100: NEG
16101: PUSH
16102: LD_INT 3
16104: NEG
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 3
16112: NEG
16113: PUSH
16114: LD_INT 2
16116: NEG
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 3
16124: NEG
16125: PUSH
16126: LD_INT 3
16128: NEG
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16152: LD_ADDR_VAR 0 14
16156: PUSH
16157: LD_INT 0
16159: PUSH
16160: LD_INT 0
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 0
16169: PUSH
16170: LD_INT 1
16172: NEG
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 1
16180: PUSH
16181: LD_INT 0
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: LD_INT 1
16190: PUSH
16191: LD_INT 1
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 0
16200: PUSH
16201: LD_INT 1
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 1
16210: NEG
16211: PUSH
16212: LD_INT 0
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 1
16221: NEG
16222: PUSH
16223: LD_INT 1
16225: NEG
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 1
16233: NEG
16234: PUSH
16235: LD_INT 2
16237: NEG
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 0
16245: PUSH
16246: LD_INT 2
16248: NEG
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 1
16256: PUSH
16257: LD_INT 1
16259: NEG
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: LD_INT 1
16267: PUSH
16268: LD_INT 2
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PUSH
16275: LD_INT 0
16277: PUSH
16278: LD_INT 2
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 1
16287: NEG
16288: PUSH
16289: LD_INT 1
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 1
16298: NEG
16299: PUSH
16300: LD_INT 3
16302: NEG
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: LD_INT 0
16310: PUSH
16311: LD_INT 3
16313: NEG
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 1
16321: PUSH
16322: LD_INT 2
16324: NEG
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16348: LD_ADDR_VAR 0 15
16352: PUSH
16353: LD_INT 0
16355: PUSH
16356: LD_INT 0
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 0
16365: PUSH
16366: LD_INT 1
16368: NEG
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: LD_INT 1
16376: PUSH
16377: LD_INT 0
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 1
16386: PUSH
16387: LD_INT 1
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 0
16396: PUSH
16397: LD_INT 1
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 1
16406: NEG
16407: PUSH
16408: LD_INT 0
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 1
16417: NEG
16418: PUSH
16419: LD_INT 1
16421: NEG
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: LD_INT 1
16432: NEG
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: LD_INT 2
16440: PUSH
16441: LD_INT 0
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 1
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 1
16460: NEG
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 2
16471: NEG
16472: PUSH
16473: LD_INT 0
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 2
16482: NEG
16483: PUSH
16484: LD_INT 1
16486: NEG
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 2
16494: PUSH
16495: LD_INT 1
16497: NEG
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 3
16505: PUSH
16506: LD_INT 0
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 3
16515: PUSH
16516: LD_INT 1
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16541: LD_ADDR_VAR 0 16
16545: PUSH
16546: LD_INT 0
16548: PUSH
16549: LD_INT 0
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: LD_INT 0
16558: PUSH
16559: LD_INT 1
16561: NEG
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 1
16569: PUSH
16570: LD_INT 0
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 1
16579: PUSH
16580: LD_INT 1
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 0
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 1
16599: NEG
16600: PUSH
16601: LD_INT 0
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 1
16610: NEG
16611: PUSH
16612: LD_INT 1
16614: NEG
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 1
16622: NEG
16623: PUSH
16624: LD_INT 2
16626: NEG
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 2
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 2
16644: PUSH
16645: LD_INT 2
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 1
16654: PUSH
16655: LD_INT 2
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 2
16664: NEG
16665: PUSH
16666: LD_INT 1
16668: NEG
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 2
16676: NEG
16677: PUSH
16678: LD_INT 2
16680: NEG
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 3
16688: PUSH
16689: LD_INT 2
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 3
16698: PUSH
16699: LD_INT 3
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 2
16708: PUSH
16709: LD_INT 3
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16734: LD_ADDR_VAR 0 17
16738: PUSH
16739: LD_INT 0
16741: PUSH
16742: LD_INT 0
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: LD_INT 0
16751: PUSH
16752: LD_INT 1
16754: NEG
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 1
16762: PUSH
16763: LD_INT 0
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 1
16772: PUSH
16773: LD_INT 1
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 0
16782: PUSH
16783: LD_INT 1
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 1
16792: NEG
16793: PUSH
16794: LD_INT 0
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 1
16803: NEG
16804: PUSH
16805: LD_INT 1
16807: NEG
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 1
16815: NEG
16816: PUSH
16817: LD_INT 2
16819: NEG
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: LD_INT 0
16827: PUSH
16828: LD_INT 2
16830: NEG
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 1
16838: PUSH
16839: LD_INT 1
16841: NEG
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 2
16849: PUSH
16850: LD_INT 0
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 2
16859: PUSH
16860: LD_INT 1
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 2
16869: PUSH
16870: LD_INT 2
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 1
16879: PUSH
16880: LD_INT 2
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 0
16889: PUSH
16890: LD_INT 2
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 1
16899: NEG
16900: PUSH
16901: LD_INT 1
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 2
16910: NEG
16911: PUSH
16912: LD_INT 0
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: LD_INT 2
16921: NEG
16922: PUSH
16923: LD_INT 1
16925: NEG
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 2
16933: NEG
16934: PUSH
16935: LD_INT 2
16937: NEG
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16964: LD_ADDR_VAR 0 18
16968: PUSH
16969: LD_INT 0
16971: PUSH
16972: LD_INT 0
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 0
16981: PUSH
16982: LD_INT 1
16984: NEG
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 1
16992: PUSH
16993: LD_INT 0
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 1
17002: PUSH
17003: LD_INT 1
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 0
17012: PUSH
17013: LD_INT 1
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 1
17022: NEG
17023: PUSH
17024: LD_INT 0
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 1
17033: NEG
17034: PUSH
17035: LD_INT 1
17037: NEG
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 1
17045: NEG
17046: PUSH
17047: LD_INT 2
17049: NEG
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 0
17057: PUSH
17058: LD_INT 2
17060: NEG
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 1
17068: PUSH
17069: LD_INT 1
17071: NEG
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 2
17079: PUSH
17080: LD_INT 0
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 2
17089: PUSH
17090: LD_INT 1
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 2
17099: PUSH
17100: LD_INT 2
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 1
17109: PUSH
17110: LD_INT 2
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 0
17119: PUSH
17120: LD_INT 2
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 1
17129: NEG
17130: PUSH
17131: LD_INT 1
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 2
17140: NEG
17141: PUSH
17142: LD_INT 0
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 2
17151: NEG
17152: PUSH
17153: LD_INT 1
17155: NEG
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 2
17163: NEG
17164: PUSH
17165: LD_INT 2
17167: NEG
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17194: LD_ADDR_VAR 0 19
17198: PUSH
17199: LD_INT 0
17201: PUSH
17202: LD_INT 0
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 0
17211: PUSH
17212: LD_INT 1
17214: NEG
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: LD_INT 0
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 1
17232: PUSH
17233: LD_INT 1
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 0
17242: PUSH
17243: LD_INT 1
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 1
17252: NEG
17253: PUSH
17254: LD_INT 0
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 1
17263: NEG
17264: PUSH
17265: LD_INT 1
17267: NEG
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 1
17275: NEG
17276: PUSH
17277: LD_INT 2
17279: NEG
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 0
17287: PUSH
17288: LD_INT 2
17290: NEG
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 1
17298: PUSH
17299: LD_INT 1
17301: NEG
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 2
17309: PUSH
17310: LD_INT 0
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 2
17319: PUSH
17320: LD_INT 1
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 2
17329: PUSH
17330: LD_INT 2
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 1
17339: PUSH
17340: LD_INT 2
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 0
17349: PUSH
17350: LD_INT 2
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 1
17359: NEG
17360: PUSH
17361: LD_INT 1
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 2
17370: NEG
17371: PUSH
17372: LD_INT 0
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: LD_INT 2
17381: NEG
17382: PUSH
17383: LD_INT 1
17385: NEG
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 2
17393: NEG
17394: PUSH
17395: LD_INT 2
17397: NEG
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17424: LD_ADDR_VAR 0 20
17428: PUSH
17429: LD_INT 0
17431: PUSH
17432: LD_INT 0
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 0
17441: PUSH
17442: LD_INT 1
17444: NEG
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: LD_INT 1
17452: PUSH
17453: LD_INT 0
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 1
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 0
17472: PUSH
17473: LD_INT 1
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 1
17482: NEG
17483: PUSH
17484: LD_INT 0
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 1
17493: NEG
17494: PUSH
17495: LD_INT 1
17497: NEG
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 1
17505: NEG
17506: PUSH
17507: LD_INT 2
17509: NEG
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 0
17517: PUSH
17518: LD_INT 2
17520: NEG
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 1
17528: PUSH
17529: LD_INT 1
17531: NEG
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 2
17539: PUSH
17540: LD_INT 0
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 2
17549: PUSH
17550: LD_INT 1
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 2
17559: PUSH
17560: LD_INT 2
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: LD_INT 2
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 0
17579: PUSH
17580: LD_INT 2
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 1
17589: NEG
17590: PUSH
17591: LD_INT 1
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 2
17600: NEG
17601: PUSH
17602: LD_INT 0
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 2
17611: NEG
17612: PUSH
17613: LD_INT 1
17615: NEG
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 2
17623: NEG
17624: PUSH
17625: LD_INT 2
17627: NEG
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17654: LD_ADDR_VAR 0 21
17658: PUSH
17659: LD_INT 0
17661: PUSH
17662: LD_INT 0
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 0
17671: PUSH
17672: LD_INT 1
17674: NEG
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 1
17682: PUSH
17683: LD_INT 0
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 1
17692: PUSH
17693: LD_INT 1
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 0
17702: PUSH
17703: LD_INT 1
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 1
17712: NEG
17713: PUSH
17714: LD_INT 0
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 1
17723: NEG
17724: PUSH
17725: LD_INT 1
17727: NEG
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 1
17735: NEG
17736: PUSH
17737: LD_INT 2
17739: NEG
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: LD_INT 0
17747: PUSH
17748: LD_INT 2
17750: NEG
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 1
17758: PUSH
17759: LD_INT 1
17761: NEG
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 2
17769: PUSH
17770: LD_INT 0
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 2
17779: PUSH
17780: LD_INT 1
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 2
17789: PUSH
17790: LD_INT 2
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 1
17799: PUSH
17800: LD_INT 2
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 0
17809: PUSH
17810: LD_INT 2
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: LD_INT 1
17819: NEG
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 2
17830: NEG
17831: PUSH
17832: LD_INT 0
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PUSH
17839: LD_INT 2
17841: NEG
17842: PUSH
17843: LD_INT 1
17845: NEG
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 2
17853: NEG
17854: PUSH
17855: LD_INT 2
17857: NEG
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17884: LD_ADDR_VAR 0 22
17888: PUSH
17889: LD_INT 0
17891: PUSH
17892: LD_INT 0
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 0
17901: PUSH
17902: LD_INT 1
17904: NEG
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 1
17912: PUSH
17913: LD_INT 0
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: LD_INT 1
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 0
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 1
17942: NEG
17943: PUSH
17944: LD_INT 0
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 1
17953: NEG
17954: PUSH
17955: LD_INT 1
17957: NEG
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 1
17965: NEG
17966: PUSH
17967: LD_INT 2
17969: NEG
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 0
17977: PUSH
17978: LD_INT 2
17980: NEG
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: LD_INT 1
17991: NEG
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 2
17999: PUSH
18000: LD_INT 0
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 2
18009: PUSH
18010: LD_INT 1
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 2
18019: PUSH
18020: LD_INT 2
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 1
18029: PUSH
18030: LD_INT 2
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 0
18039: PUSH
18040: LD_INT 2
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 1
18049: NEG
18050: PUSH
18051: LD_INT 1
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PUSH
18058: LD_INT 2
18060: NEG
18061: PUSH
18062: LD_INT 0
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 2
18071: NEG
18072: PUSH
18073: LD_INT 1
18075: NEG
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 2
18083: NEG
18084: PUSH
18085: LD_INT 2
18087: NEG
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18114: LD_ADDR_VAR 0 23
18118: PUSH
18119: LD_INT 0
18121: PUSH
18122: LD_INT 0
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 0
18131: PUSH
18132: LD_INT 1
18134: NEG
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 1
18142: PUSH
18143: LD_INT 0
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 1
18152: PUSH
18153: LD_INT 1
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 0
18162: PUSH
18163: LD_INT 1
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 1
18172: NEG
18173: PUSH
18174: LD_INT 0
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 1
18183: NEG
18184: PUSH
18185: LD_INT 1
18187: NEG
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 1
18195: NEG
18196: PUSH
18197: LD_INT 2
18199: NEG
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 0
18207: PUSH
18208: LD_INT 2
18210: NEG
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: LD_INT 1
18221: NEG
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 2
18229: PUSH
18230: LD_INT 0
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 2
18239: PUSH
18240: LD_INT 1
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 2
18249: PUSH
18250: LD_INT 2
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 1
18259: PUSH
18260: LD_INT 2
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: LD_INT 2
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 1
18279: NEG
18280: PUSH
18281: LD_INT 1
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 2
18290: NEG
18291: PUSH
18292: LD_INT 0
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 2
18301: NEG
18302: PUSH
18303: LD_INT 1
18305: NEG
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 2
18313: NEG
18314: PUSH
18315: LD_INT 2
18317: NEG
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 2
18325: NEG
18326: PUSH
18327: LD_INT 3
18329: NEG
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 1
18337: NEG
18338: PUSH
18339: LD_INT 3
18341: NEG
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 1
18349: PUSH
18350: LD_INT 2
18352: NEG
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 2
18360: PUSH
18361: LD_INT 1
18363: NEG
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18394: LD_ADDR_VAR 0 24
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: LD_INT 0
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 0
18411: PUSH
18412: LD_INT 1
18414: NEG
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 1
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 0
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 1
18452: NEG
18453: PUSH
18454: LD_INT 0
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 1
18463: NEG
18464: PUSH
18465: LD_INT 1
18467: NEG
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 1
18475: NEG
18476: PUSH
18477: LD_INT 2
18479: NEG
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 0
18487: PUSH
18488: LD_INT 2
18490: NEG
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: LD_INT 1
18501: NEG
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 2
18509: PUSH
18510: LD_INT 0
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 2
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 2
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 1
18539: PUSH
18540: LD_INT 2
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 0
18549: PUSH
18550: LD_INT 2
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 1
18559: NEG
18560: PUSH
18561: LD_INT 1
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 2
18570: NEG
18571: PUSH
18572: LD_INT 0
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 2
18581: NEG
18582: PUSH
18583: LD_INT 1
18585: NEG
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 2
18593: NEG
18594: PUSH
18595: LD_INT 2
18597: NEG
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: LD_INT 2
18608: NEG
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 2
18616: PUSH
18617: LD_INT 1
18619: NEG
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 3
18627: PUSH
18628: LD_INT 1
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 3
18637: PUSH
18638: LD_INT 2
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18670: LD_ADDR_VAR 0 25
18674: PUSH
18675: LD_INT 0
18677: PUSH
18678: LD_INT 0
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 0
18687: PUSH
18688: LD_INT 1
18690: NEG
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: LD_INT 0
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 0
18718: PUSH
18719: LD_INT 1
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 1
18728: NEG
18729: PUSH
18730: LD_INT 0
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 1
18739: NEG
18740: PUSH
18741: LD_INT 1
18743: NEG
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 1
18751: NEG
18752: PUSH
18753: LD_INT 2
18755: NEG
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 0
18763: PUSH
18764: LD_INT 2
18766: NEG
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 1
18774: PUSH
18775: LD_INT 1
18777: NEG
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 2
18785: PUSH
18786: LD_INT 0
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 1
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 2
18805: PUSH
18806: LD_INT 2
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 1
18815: PUSH
18816: LD_INT 2
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 0
18825: PUSH
18826: LD_INT 2
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 1
18835: NEG
18836: PUSH
18837: LD_INT 1
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 2
18846: NEG
18847: PUSH
18848: LD_INT 0
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 2
18857: NEG
18858: PUSH
18859: LD_INT 1
18861: NEG
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 2
18869: NEG
18870: PUSH
18871: LD_INT 2
18873: NEG
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 3
18881: PUSH
18882: LD_INT 1
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 3
18891: PUSH
18892: LD_INT 2
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 2
18901: PUSH
18902: LD_INT 3
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: LD_INT 3
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18944: LD_ADDR_VAR 0 26
18948: PUSH
18949: LD_INT 0
18951: PUSH
18952: LD_INT 0
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 0
18961: PUSH
18962: LD_INT 1
18964: NEG
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 1
18972: PUSH
18973: LD_INT 0
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 1
18982: PUSH
18983: LD_INT 1
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 0
18992: PUSH
18993: LD_INT 1
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 1
19002: NEG
19003: PUSH
19004: LD_INT 0
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 1
19013: NEG
19014: PUSH
19015: LD_INT 1
19017: NEG
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 1
19025: NEG
19026: PUSH
19027: LD_INT 2
19029: NEG
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 0
19037: PUSH
19038: LD_INT 2
19040: NEG
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 1
19048: PUSH
19049: LD_INT 1
19051: NEG
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 2
19059: PUSH
19060: LD_INT 0
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 2
19069: PUSH
19070: LD_INT 1
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 2
19079: PUSH
19080: LD_INT 2
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 1
19089: PUSH
19090: LD_INT 2
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 0
19099: PUSH
19100: LD_INT 2
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 1
19109: NEG
19110: PUSH
19111: LD_INT 1
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 2
19120: NEG
19121: PUSH
19122: LD_INT 0
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 2
19131: NEG
19132: PUSH
19133: LD_INT 1
19135: NEG
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 2
19143: NEG
19144: PUSH
19145: LD_INT 2
19147: NEG
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 2
19155: PUSH
19156: LD_INT 3
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 1
19165: PUSH
19166: LD_INT 3
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 1
19175: NEG
19176: PUSH
19177: LD_INT 2
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 2
19186: NEG
19187: PUSH
19188: LD_INT 1
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19220: LD_ADDR_VAR 0 27
19224: PUSH
19225: LD_INT 0
19227: PUSH
19228: LD_INT 0
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 0
19237: PUSH
19238: LD_INT 1
19240: NEG
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 1
19248: PUSH
19249: LD_INT 0
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 1
19258: PUSH
19259: LD_INT 1
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 0
19268: PUSH
19269: LD_INT 1
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 1
19278: NEG
19279: PUSH
19280: LD_INT 0
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 1
19289: NEG
19290: PUSH
19291: LD_INT 1
19293: NEG
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 1
19301: NEG
19302: PUSH
19303: LD_INT 2
19305: NEG
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 0
19313: PUSH
19314: LD_INT 2
19316: NEG
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 1
19324: PUSH
19325: LD_INT 1
19327: NEG
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 2
19335: PUSH
19336: LD_INT 0
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: LD_INT 1
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 2
19355: PUSH
19356: LD_INT 2
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 1
19365: PUSH
19366: LD_INT 2
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 0
19375: PUSH
19376: LD_INT 2
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 1
19385: NEG
19386: PUSH
19387: LD_INT 1
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 2
19396: NEG
19397: PUSH
19398: LD_INT 0
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 2
19407: NEG
19408: PUSH
19409: LD_INT 1
19411: NEG
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 2
19419: NEG
19420: PUSH
19421: LD_INT 2
19423: NEG
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 1
19431: NEG
19432: PUSH
19433: LD_INT 2
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 2
19442: NEG
19443: PUSH
19444: LD_INT 1
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 3
19453: NEG
19454: PUSH
19455: LD_INT 1
19457: NEG
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 3
19465: NEG
19466: PUSH
19467: LD_INT 2
19469: NEG
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19500: LD_ADDR_VAR 0 28
19504: PUSH
19505: LD_INT 0
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: LD_INT 1
19520: NEG
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 1
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 1
19538: PUSH
19539: LD_INT 1
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 0
19548: PUSH
19549: LD_INT 1
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 1
19558: NEG
19559: PUSH
19560: LD_INT 0
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 1
19569: NEG
19570: PUSH
19571: LD_INT 1
19573: NEG
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 1
19581: NEG
19582: PUSH
19583: LD_INT 2
19585: NEG
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 0
19593: PUSH
19594: LD_INT 2
19596: NEG
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 1
19604: PUSH
19605: LD_INT 1
19607: NEG
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 2
19615: PUSH
19616: LD_INT 0
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 2
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 2
19635: PUSH
19636: LD_INT 2
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 1
19645: PUSH
19646: LD_INT 2
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 0
19655: PUSH
19656: LD_INT 2
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 1
19665: NEG
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 2
19676: NEG
19677: PUSH
19678: LD_INT 0
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 2
19687: NEG
19688: PUSH
19689: LD_INT 1
19691: NEG
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 2
19699: NEG
19700: PUSH
19701: LD_INT 2
19703: NEG
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 2
19711: NEG
19712: PUSH
19713: LD_INT 3
19715: NEG
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: PUSH
19725: LD_INT 3
19727: NEG
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 3
19735: NEG
19736: PUSH
19737: LD_INT 1
19739: NEG
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 3
19747: NEG
19748: PUSH
19749: LD_INT 2
19751: NEG
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19782: LD_ADDR_VAR 0 29
19786: PUSH
19787: LD_INT 0
19789: PUSH
19790: LD_INT 0
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 0
19799: PUSH
19800: LD_INT 1
19802: NEG
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 1
19810: PUSH
19811: LD_INT 0
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 0
19830: PUSH
19831: LD_INT 1
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 1
19840: NEG
19841: PUSH
19842: LD_INT 0
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 1
19851: NEG
19852: PUSH
19853: LD_INT 1
19855: NEG
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 1
19863: NEG
19864: PUSH
19865: LD_INT 2
19867: NEG
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 0
19875: PUSH
19876: LD_INT 2
19878: NEG
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 1
19886: PUSH
19887: LD_INT 1
19889: NEG
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 2
19897: PUSH
19898: LD_INT 0
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 2
19907: PUSH
19908: LD_INT 1
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 1
19917: PUSH
19918: LD_INT 2
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 0
19927: PUSH
19928: LD_INT 2
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 1
19937: NEG
19938: PUSH
19939: LD_INT 1
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 2
19948: NEG
19949: PUSH
19950: LD_INT 1
19952: NEG
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 2
19960: NEG
19961: PUSH
19962: LD_INT 2
19964: NEG
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 2
19972: NEG
19973: PUSH
19974: LD_INT 3
19976: NEG
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 2
19984: PUSH
19985: LD_INT 1
19987: NEG
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 3
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 1
20005: PUSH
20006: LD_INT 3
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 1
20015: NEG
20016: PUSH
20017: LD_INT 2
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 3
20026: NEG
20027: PUSH
20028: LD_INT 2
20030: NEG
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20061: LD_ADDR_VAR 0 30
20065: PUSH
20066: LD_INT 0
20068: PUSH
20069: LD_INT 0
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: LD_INT 1
20081: NEG
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: LD_INT 0
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 1
20099: PUSH
20100: LD_INT 1
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: LD_INT 1
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 1
20119: NEG
20120: PUSH
20121: LD_INT 0
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 1
20130: NEG
20131: PUSH
20132: LD_INT 1
20134: NEG
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 1
20142: NEG
20143: PUSH
20144: LD_INT 2
20146: NEG
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 0
20154: PUSH
20155: LD_INT 2
20157: NEG
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 1
20165: PUSH
20166: LD_INT 1
20168: NEG
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: LD_INT 1
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 2
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 1
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 1
20216: NEG
20217: PUSH
20218: LD_INT 1
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 2
20227: NEG
20228: PUSH
20229: LD_INT 0
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 2
20238: NEG
20239: PUSH
20240: LD_INT 1
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 1
20250: NEG
20251: PUSH
20252: LD_INT 3
20254: NEG
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 1
20262: PUSH
20263: LD_INT 2
20265: NEG
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 3
20273: PUSH
20274: LD_INT 2
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 2
20283: PUSH
20284: LD_INT 3
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 2
20293: NEG
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 3
20304: NEG
20305: PUSH
20306: LD_INT 1
20308: NEG
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20339: LD_ADDR_VAR 0 31
20343: PUSH
20344: LD_INT 0
20346: PUSH
20347: LD_INT 0
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 0
20356: PUSH
20357: LD_INT 1
20359: NEG
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 1
20367: PUSH
20368: LD_INT 0
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 1
20377: PUSH
20378: LD_INT 1
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 0
20387: PUSH
20388: LD_INT 1
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 1
20397: NEG
20398: PUSH
20399: LD_INT 0
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 1
20408: NEG
20409: PUSH
20410: LD_INT 1
20412: NEG
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 1
20420: NEG
20421: PUSH
20422: LD_INT 2
20424: NEG
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 1
20432: PUSH
20433: LD_INT 1
20435: NEG
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 2
20443: PUSH
20444: LD_INT 0
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 2
20453: PUSH
20454: LD_INT 1
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 2
20463: PUSH
20464: LD_INT 2
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 1
20473: PUSH
20474: LD_INT 2
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 0
20483: PUSH
20484: LD_INT 2
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 1
20493: NEG
20494: PUSH
20495: LD_INT 1
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 2
20504: NEG
20505: PUSH
20506: LD_INT 1
20508: NEG
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 2
20516: NEG
20517: PUSH
20518: LD_INT 2
20520: NEG
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 2
20528: NEG
20529: PUSH
20530: LD_INT 3
20532: NEG
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 2
20540: PUSH
20541: LD_INT 1
20543: NEG
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 3
20551: PUSH
20552: LD_INT 1
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: LD_INT 3
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 1
20571: NEG
20572: PUSH
20573: LD_INT 2
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 3
20582: NEG
20583: PUSH
20584: LD_INT 2
20586: NEG
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20617: LD_ADDR_VAR 0 32
20621: PUSH
20622: LD_INT 0
20624: PUSH
20625: LD_INT 0
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 0
20634: PUSH
20635: LD_INT 1
20637: NEG
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 1
20645: PUSH
20646: LD_INT 0
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: LD_INT 1
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 0
20665: PUSH
20666: LD_INT 1
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 1
20675: NEG
20676: PUSH
20677: LD_INT 0
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 1
20686: NEG
20687: PUSH
20688: LD_INT 1
20690: NEG
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: LD_INT 2
20702: NEG
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 0
20710: PUSH
20711: LD_INT 2
20713: NEG
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 1
20721: PUSH
20722: LD_INT 1
20724: NEG
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 2
20732: PUSH
20733: LD_INT 1
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 2
20742: PUSH
20743: LD_INT 2
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 1
20752: PUSH
20753: LD_INT 2
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 0
20762: PUSH
20763: LD_INT 2
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 1
20772: NEG
20773: PUSH
20774: LD_INT 1
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 2
20783: NEG
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 2
20794: NEG
20795: PUSH
20796: LD_INT 1
20798: NEG
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 1
20806: NEG
20807: PUSH
20808: LD_INT 3
20810: NEG
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: PUSH
20819: LD_INT 2
20821: NEG
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 3
20829: PUSH
20830: LD_INT 2
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 2
20839: PUSH
20840: LD_INT 3
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 2
20849: NEG
20850: PUSH
20851: LD_INT 1
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 3
20860: NEG
20861: PUSH
20862: LD_INT 1
20864: NEG
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20895: LD_ADDR_VAR 0 33
20899: PUSH
20900: LD_INT 0
20902: PUSH
20903: LD_INT 0
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 0
20912: PUSH
20913: LD_INT 1
20915: NEG
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 1
20923: PUSH
20924: LD_INT 0
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 1
20933: PUSH
20934: LD_INT 1
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 0
20943: PUSH
20944: LD_INT 1
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 1
20953: NEG
20954: PUSH
20955: LD_INT 0
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 1
20964: NEG
20965: PUSH
20966: LD_INT 1
20968: NEG
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 1
20976: NEG
20977: PUSH
20978: LD_INT 2
20980: NEG
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 1
20988: PUSH
20989: LD_INT 1
20991: NEG
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 2
20999: PUSH
21000: LD_INT 0
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 2
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: PUSH
21020: LD_INT 2
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 0
21029: PUSH
21030: LD_INT 2
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 1
21039: NEG
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 2
21050: NEG
21051: PUSH
21052: LD_INT 0
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 2
21061: NEG
21062: PUSH
21063: LD_INT 1
21065: NEG
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 2
21073: NEG
21074: PUSH
21075: LD_INT 2
21077: NEG
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 2
21085: NEG
21086: PUSH
21087: LD_INT 3
21089: NEG
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 2
21097: PUSH
21098: LD_INT 1
21100: NEG
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 3
21108: PUSH
21109: LD_INT 1
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: LD_INT 3
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 1
21128: NEG
21129: PUSH
21130: LD_INT 2
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 3
21139: NEG
21140: PUSH
21141: LD_INT 2
21143: NEG
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21174: LD_ADDR_VAR 0 34
21178: PUSH
21179: LD_INT 0
21181: PUSH
21182: LD_INT 0
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 0
21191: PUSH
21192: LD_INT 1
21194: NEG
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: LD_INT 0
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 1
21212: PUSH
21213: LD_INT 1
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 0
21222: PUSH
21223: LD_INT 1
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 1
21232: NEG
21233: PUSH
21234: LD_INT 0
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 1
21243: NEG
21244: PUSH
21245: LD_INT 1
21247: NEG
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 1
21255: NEG
21256: PUSH
21257: LD_INT 2
21259: NEG
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 0
21267: PUSH
21268: LD_INT 2
21270: NEG
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 1
21278: PUSH
21279: LD_INT 1
21281: NEG
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 2
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 2
21299: PUSH
21300: LD_INT 2
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: LD_INT 2
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 1
21319: NEG
21320: PUSH
21321: LD_INT 1
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 2
21330: NEG
21331: PUSH
21332: LD_INT 0
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 2
21341: NEG
21342: PUSH
21343: LD_INT 1
21345: NEG
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 2
21353: NEG
21354: PUSH
21355: LD_INT 2
21357: NEG
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 1
21365: NEG
21366: PUSH
21367: LD_INT 3
21369: NEG
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 1
21377: PUSH
21378: LD_INT 2
21380: NEG
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 3
21388: PUSH
21389: LD_INT 2
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 2
21398: PUSH
21399: LD_INT 3
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 2
21408: NEG
21409: PUSH
21410: LD_INT 1
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 3
21419: NEG
21420: PUSH
21421: LD_INT 1
21423: NEG
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21454: LD_ADDR_VAR 0 35
21458: PUSH
21459: LD_INT 0
21461: PUSH
21462: LD_INT 0
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: LD_INT 1
21474: NEG
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: LD_INT 0
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 1
21492: PUSH
21493: LD_INT 1
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 0
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 1
21512: NEG
21513: PUSH
21514: LD_INT 0
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 1
21523: NEG
21524: PUSH
21525: LD_INT 1
21527: NEG
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 2
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 2
21545: NEG
21546: PUSH
21547: LD_INT 1
21549: NEG
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21566: LD_ADDR_VAR 0 36
21570: PUSH
21571: LD_INT 0
21573: PUSH
21574: LD_INT 0
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 0
21583: PUSH
21584: LD_INT 1
21586: NEG
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 1
21594: PUSH
21595: LD_INT 0
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 1
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 0
21614: PUSH
21615: LD_INT 1
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: NEG
21625: PUSH
21626: LD_INT 0
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 1
21635: NEG
21636: PUSH
21637: LD_INT 1
21639: NEG
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 1
21647: NEG
21648: PUSH
21649: LD_INT 2
21651: NEG
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 1
21659: PUSH
21660: LD_INT 2
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21678: LD_ADDR_VAR 0 37
21682: PUSH
21683: LD_INT 0
21685: PUSH
21686: LD_INT 0
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 0
21695: PUSH
21696: LD_INT 1
21698: NEG
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 1
21706: PUSH
21707: LD_INT 0
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 1
21716: PUSH
21717: LD_INT 1
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 0
21726: PUSH
21727: LD_INT 1
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 1
21736: NEG
21737: PUSH
21738: LD_INT 0
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 1
21747: NEG
21748: PUSH
21749: LD_INT 1
21751: NEG
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 1
21759: PUSH
21760: LD_INT 1
21762: NEG
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 1
21770: NEG
21771: PUSH
21772: LD_INT 1
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21790: LD_ADDR_VAR 0 38
21794: PUSH
21795: LD_INT 0
21797: PUSH
21798: LD_INT 0
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: LD_INT 1
21810: NEG
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 1
21818: PUSH
21819: LD_INT 0
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 1
21859: NEG
21860: PUSH
21861: LD_INT 1
21863: NEG
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 2
21871: PUSH
21872: LD_INT 1
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 2
21881: NEG
21882: PUSH
21883: LD_INT 1
21885: NEG
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21902: LD_ADDR_VAR 0 39
21906: PUSH
21907: LD_INT 0
21909: PUSH
21910: LD_INT 0
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 0
21919: PUSH
21920: LD_INT 1
21922: NEG
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 1
21930: PUSH
21931: LD_INT 0
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 1
21940: PUSH
21941: LD_INT 1
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 1
21960: NEG
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: LD_INT 1
21975: NEG
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 1
21983: NEG
21984: PUSH
21985: LD_INT 2
21987: NEG
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 1
21995: PUSH
21996: LD_INT 2
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22014: LD_ADDR_VAR 0 40
22018: PUSH
22019: LD_INT 0
22021: PUSH
22022: LD_INT 0
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 0
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 1
22042: PUSH
22043: LD_INT 0
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 1
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 0
22062: PUSH
22063: LD_INT 1
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 1
22072: NEG
22073: PUSH
22074: LD_INT 0
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 1
22083: NEG
22084: PUSH
22085: LD_INT 1
22087: NEG
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 1
22095: PUSH
22096: LD_INT 1
22098: NEG
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: NEG
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22126: LD_ADDR_VAR 0 41
22130: PUSH
22131: LD_INT 0
22133: PUSH
22134: LD_INT 0
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 0
22143: PUSH
22144: LD_INT 1
22146: NEG
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 1
22154: PUSH
22155: LD_INT 0
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: LD_INT 1
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 0
22174: PUSH
22175: LD_INT 1
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 1
22184: NEG
22185: PUSH
22186: LD_INT 0
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 1
22195: NEG
22196: PUSH
22197: LD_INT 1
22199: NEG
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 1
22207: NEG
22208: PUSH
22209: LD_INT 2
22211: NEG
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 1
22219: PUSH
22220: LD_INT 1
22222: NEG
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 2
22230: PUSH
22231: LD_INT 0
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 2
22240: PUSH
22241: LD_INT 1
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 2
22250: PUSH
22251: LD_INT 2
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: LD_INT 2
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 1
22270: NEG
22271: PUSH
22272: LD_INT 1
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 2
22281: NEG
22282: PUSH
22283: LD_INT 0
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 2
22292: NEG
22293: PUSH
22294: LD_INT 1
22296: NEG
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 2
22304: NEG
22305: PUSH
22306: LD_INT 2
22308: NEG
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 2
22316: NEG
22317: PUSH
22318: LD_INT 3
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 2
22328: PUSH
22329: LD_INT 1
22331: NEG
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 3
22339: PUSH
22340: LD_INT 0
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 3
22349: PUSH
22350: LD_INT 1
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 3
22359: PUSH
22360: LD_INT 2
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 3
22369: PUSH
22370: LD_INT 3
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 2
22379: PUSH
22380: LD_INT 3
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 2
22389: NEG
22390: PUSH
22391: LD_INT 1
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 3
22400: NEG
22401: PUSH
22402: LD_INT 0
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 3
22411: NEG
22412: PUSH
22413: LD_INT 1
22415: NEG
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 3
22423: NEG
22424: PUSH
22425: LD_INT 2
22427: NEG
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 3
22435: NEG
22436: PUSH
22437: LD_INT 3
22439: NEG
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22476: LD_ADDR_VAR 0 42
22480: PUSH
22481: LD_INT 0
22483: PUSH
22484: LD_INT 0
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 0
22493: PUSH
22494: LD_INT 1
22496: NEG
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 1
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 1
22514: PUSH
22515: LD_INT 1
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: LD_INT 1
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 1
22534: NEG
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 1
22545: NEG
22546: PUSH
22547: LD_INT 1
22549: NEG
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 1
22557: NEG
22558: PUSH
22559: LD_INT 2
22561: NEG
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: LD_INT 2
22572: NEG
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: LD_INT 1
22583: NEG
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 2
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 2
22601: PUSH
22602: LD_INT 2
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 1
22611: PUSH
22612: LD_INT 2
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 0
22621: PUSH
22622: LD_INT 2
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 1
22631: NEG
22632: PUSH
22633: LD_INT 1
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 2
22642: NEG
22643: PUSH
22644: LD_INT 1
22646: NEG
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 2
22654: NEG
22655: PUSH
22656: LD_INT 2
22658: NEG
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 2
22666: NEG
22667: PUSH
22668: LD_INT 3
22670: NEG
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 1
22678: NEG
22679: PUSH
22680: LD_INT 3
22682: NEG
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 0
22690: PUSH
22691: LD_INT 3
22693: NEG
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 1
22701: PUSH
22702: LD_INT 2
22704: NEG
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 3
22712: PUSH
22713: LD_INT 2
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 3
22722: PUSH
22723: LD_INT 3
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 2
22732: PUSH
22733: LD_INT 3
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 1
22742: PUSH
22743: LD_INT 3
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 0
22752: PUSH
22753: LD_INT 3
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 1
22762: NEG
22763: PUSH
22764: LD_INT 2
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 3
22773: NEG
22774: PUSH
22775: LD_INT 2
22777: NEG
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 3
22785: NEG
22786: PUSH
22787: LD_INT 3
22789: NEG
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22826: LD_ADDR_VAR 0 43
22830: PUSH
22831: LD_INT 0
22833: PUSH
22834: LD_INT 0
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 0
22843: PUSH
22844: LD_INT 1
22846: NEG
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 1
22854: PUSH
22855: LD_INT 0
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 1
22864: PUSH
22865: LD_INT 1
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 0
22874: PUSH
22875: LD_INT 1
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 1
22884: NEG
22885: PUSH
22886: LD_INT 0
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 1
22895: NEG
22896: PUSH
22897: LD_INT 1
22899: NEG
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 1
22907: NEG
22908: PUSH
22909: LD_INT 2
22911: NEG
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 0
22919: PUSH
22920: LD_INT 2
22922: NEG
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 1
22930: PUSH
22931: LD_INT 1
22933: NEG
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 2
22941: PUSH
22942: LD_INT 0
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 2
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 1
22961: PUSH
22962: LD_INT 2
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 0
22971: PUSH
22972: LD_INT 2
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 1
22981: NEG
22982: PUSH
22983: LD_INT 1
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 2
22992: NEG
22993: PUSH
22994: LD_INT 0
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 2
23003: NEG
23004: PUSH
23005: LD_INT 1
23007: NEG
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 1
23015: NEG
23016: PUSH
23017: LD_INT 3
23019: NEG
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 0
23027: PUSH
23028: LD_INT 3
23030: NEG
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: LD_INT 2
23041: NEG
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 2
23049: PUSH
23050: LD_INT 1
23052: NEG
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 3
23060: PUSH
23061: LD_INT 0
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 3
23070: PUSH
23071: LD_INT 1
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 1
23080: PUSH
23081: LD_INT 3
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 0
23090: PUSH
23091: LD_INT 3
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 1
23100: NEG
23101: PUSH
23102: LD_INT 2
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 2
23111: NEG
23112: PUSH
23113: LD_INT 1
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 3
23122: NEG
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 3
23133: NEG
23134: PUSH
23135: LD_INT 1
23137: NEG
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23174: LD_ADDR_VAR 0 44
23178: PUSH
23179: LD_INT 0
23181: PUSH
23182: LD_INT 0
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 0
23191: PUSH
23192: LD_INT 1
23194: NEG
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 1
23202: PUSH
23203: LD_INT 0
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 0
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 1
23232: NEG
23233: PUSH
23234: LD_INT 0
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 1
23243: NEG
23244: PUSH
23245: LD_INT 1
23247: NEG
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 1
23255: NEG
23256: PUSH
23257: LD_INT 2
23259: NEG
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 1
23267: PUSH
23268: LD_INT 1
23270: NEG
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 2
23278: PUSH
23279: LD_INT 0
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 2
23288: PUSH
23289: LD_INT 1
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 2
23298: PUSH
23299: LD_INT 2
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 1
23308: PUSH
23309: LD_INT 2
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 1
23318: NEG
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 2
23329: NEG
23330: PUSH
23331: LD_INT 0
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 2
23340: NEG
23341: PUSH
23342: LD_INT 1
23344: NEG
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 2
23352: NEG
23353: PUSH
23354: LD_INT 2
23356: NEG
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 2
23364: NEG
23365: PUSH
23366: LD_INT 3
23368: NEG
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 2
23376: PUSH
23377: LD_INT 1
23379: NEG
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 3
23387: PUSH
23388: LD_INT 0
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 3
23397: PUSH
23398: LD_INT 1
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 3
23407: PUSH
23408: LD_INT 2
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 3
23417: PUSH
23418: LD_INT 3
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 2
23427: PUSH
23428: LD_INT 3
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 2
23437: NEG
23438: PUSH
23439: LD_INT 1
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 3
23448: NEG
23449: PUSH
23450: LD_INT 0
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 3
23459: NEG
23460: PUSH
23461: LD_INT 1
23463: NEG
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 3
23471: NEG
23472: PUSH
23473: LD_INT 2
23475: NEG
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 3
23483: NEG
23484: PUSH
23485: LD_INT 3
23487: NEG
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23524: LD_ADDR_VAR 0 45
23528: PUSH
23529: LD_INT 0
23531: PUSH
23532: LD_INT 0
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 0
23541: PUSH
23542: LD_INT 1
23544: NEG
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 1
23552: PUSH
23553: LD_INT 0
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 1
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 0
23572: PUSH
23573: LD_INT 1
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 1
23582: NEG
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 1
23593: NEG
23594: PUSH
23595: LD_INT 1
23597: NEG
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 1
23605: NEG
23606: PUSH
23607: LD_INT 2
23609: NEG
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 0
23617: PUSH
23618: LD_INT 2
23620: NEG
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: LD_INT 1
23631: NEG
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 2
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 2
23649: PUSH
23650: LD_INT 2
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: LD_INT 2
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: LD_INT 2
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 1
23679: NEG
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 2
23690: NEG
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 2
23702: NEG
23703: PUSH
23704: LD_INT 2
23706: NEG
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 2
23714: NEG
23715: PUSH
23716: LD_INT 3
23718: NEG
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 1
23726: NEG
23727: PUSH
23728: LD_INT 3
23730: NEG
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 0
23738: PUSH
23739: LD_INT 3
23741: NEG
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: LD_INT 2
23752: NEG
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 3
23760: PUSH
23761: LD_INT 2
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 3
23770: PUSH
23771: LD_INT 3
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: LD_INT 3
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 1
23790: PUSH
23791: LD_INT 3
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 0
23800: PUSH
23801: LD_INT 3
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 1
23810: NEG
23811: PUSH
23812: LD_INT 2
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 3
23821: NEG
23822: PUSH
23823: LD_INT 2
23825: NEG
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 3
23833: NEG
23834: PUSH
23835: LD_INT 3
23837: NEG
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23874: LD_ADDR_VAR 0 46
23878: PUSH
23879: LD_INT 0
23881: PUSH
23882: LD_INT 0
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 0
23891: PUSH
23892: LD_INT 1
23894: NEG
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 1
23912: PUSH
23913: LD_INT 1
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: LD_INT 1
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 1
23932: NEG
23933: PUSH
23934: LD_INT 0
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 1
23943: NEG
23944: PUSH
23945: LD_INT 1
23947: NEG
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 1
23955: NEG
23956: PUSH
23957: LD_INT 2
23959: NEG
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 0
23967: PUSH
23968: LD_INT 2
23970: NEG
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: LD_INT 1
23981: NEG
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 2
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 2
23999: PUSH
24000: LD_INT 1
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 1
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 0
24019: PUSH
24020: LD_INT 2
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 1
24029: NEG
24030: PUSH
24031: LD_INT 1
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 2
24040: NEG
24041: PUSH
24042: LD_INT 0
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 2
24051: NEG
24052: PUSH
24053: LD_INT 1
24055: NEG
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 1
24063: NEG
24064: PUSH
24065: LD_INT 3
24067: NEG
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: LD_INT 3
24078: NEG
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: LD_INT 2
24089: NEG
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 2
24097: PUSH
24098: LD_INT 1
24100: NEG
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 3
24108: PUSH
24109: LD_INT 0
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 3
24118: PUSH
24119: LD_INT 1
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 0
24138: PUSH
24139: LD_INT 3
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: LD_INT 2
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 2
24159: NEG
24160: PUSH
24161: LD_INT 1
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 3
24170: NEG
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 3
24181: NEG
24182: PUSH
24183: LD_INT 1
24185: NEG
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24222: LD_ADDR_VAR 0 47
24226: PUSH
24227: LD_INT 0
24229: PUSH
24230: LD_INT 0
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 0
24239: PUSH
24240: LD_INT 1
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: LD_INT 0
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 1
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: LD_INT 0
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 1
24291: NEG
24292: PUSH
24293: LD_INT 1
24295: NEG
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 1
24303: NEG
24304: PUSH
24305: LD_INT 2
24307: NEG
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 0
24315: PUSH
24316: LD_INT 2
24318: NEG
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 1
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 2
24337: NEG
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 2
24349: NEG
24350: PUSH
24351: LD_INT 2
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24373: LD_ADDR_VAR 0 48
24377: PUSH
24378: LD_INT 0
24380: PUSH
24381: LD_INT 0
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: LD_INT 1
24393: NEG
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 1
24401: PUSH
24402: LD_INT 0
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 1
24411: PUSH
24412: LD_INT 1
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 1
24431: NEG
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 1
24442: NEG
24443: PUSH
24444: LD_INT 1
24446: NEG
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 1
24454: NEG
24455: PUSH
24456: LD_INT 2
24458: NEG
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: LD_INT 2
24469: NEG
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 1
24477: PUSH
24478: LD_INT 1
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 2
24488: PUSH
24489: LD_INT 0
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: LD_INT 1
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24520: LD_ADDR_VAR 0 49
24524: PUSH
24525: LD_INT 0
24527: PUSH
24528: LD_INT 0
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 0
24537: PUSH
24538: LD_INT 1
24540: NEG
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 1
24548: PUSH
24549: LD_INT 0
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 1
24558: PUSH
24559: LD_INT 1
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 0
24568: PUSH
24569: LD_INT 1
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 1
24578: NEG
24579: PUSH
24580: LD_INT 0
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 1
24589: NEG
24590: PUSH
24591: LD_INT 1
24593: NEG
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 1
24601: PUSH
24602: LD_INT 1
24604: NEG
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 2
24612: PUSH
24613: LD_INT 0
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: LD_INT 1
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 2
24632: PUSH
24633: LD_INT 2
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 1
24642: PUSH
24643: LD_INT 2
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24664: LD_ADDR_VAR 0 50
24668: PUSH
24669: LD_INT 0
24671: PUSH
24672: LD_INT 0
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 0
24681: PUSH
24682: LD_INT 1
24684: NEG
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 1
24692: PUSH
24693: LD_INT 0
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 1
24702: PUSH
24703: LD_INT 1
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 0
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 1
24722: NEG
24723: PUSH
24724: LD_INT 0
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 1
24733: NEG
24734: PUSH
24735: LD_INT 1
24737: NEG
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 2
24745: PUSH
24746: LD_INT 1
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 2
24755: PUSH
24756: LD_INT 2
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: LD_INT 2
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: LD_INT 2
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24808: LD_ADDR_VAR 0 51
24812: PUSH
24813: LD_INT 0
24815: PUSH
24816: LD_INT 0
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 0
24825: PUSH
24826: LD_INT 1
24828: NEG
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 1
24836: PUSH
24837: LD_INT 0
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 1
24846: PUSH
24847: LD_INT 1
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 0
24856: PUSH
24857: LD_INT 1
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 1
24866: NEG
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 1
24877: NEG
24878: PUSH
24879: LD_INT 1
24881: NEG
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 0
24899: PUSH
24900: LD_INT 2
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 1
24909: NEG
24910: PUSH
24911: LD_INT 1
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 2
24920: NEG
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 2
24931: NEG
24932: PUSH
24933: LD_INT 1
24935: NEG
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24955: LD_ADDR_VAR 0 52
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: LD_INT 1
24975: NEG
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: LD_INT 1
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: NEG
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 1
25024: NEG
25025: PUSH
25026: LD_INT 1
25028: NEG
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 1
25036: NEG
25037: PUSH
25038: LD_INT 2
25040: NEG
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: LD_INT 1
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: NEG
25060: PUSH
25061: LD_INT 0
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 2
25070: NEG
25071: PUSH
25072: LD_INT 1
25074: NEG
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 2
25082: NEG
25083: PUSH
25084: LD_INT 2
25086: NEG
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25106: LD_ADDR_VAR 0 53
25110: PUSH
25111: LD_INT 0
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 0
25123: PUSH
25124: LD_INT 1
25126: NEG
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 1
25134: PUSH
25135: LD_INT 0
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 1
25144: PUSH
25145: LD_INT 1
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 0
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 1
25164: NEG
25165: PUSH
25166: LD_INT 0
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: LD_INT 1
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: NEG
25188: PUSH
25189: LD_INT 2
25191: NEG
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: LD_INT 2
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: LD_INT 1
25213: NEG
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 2
25221: PUSH
25222: LD_INT 0
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 2
25231: PUSH
25232: LD_INT 1
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 2
25241: PUSH
25242: LD_INT 2
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: LD_INT 2
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 0
25261: PUSH
25262: LD_INT 2
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 1
25271: NEG
25272: PUSH
25273: LD_INT 1
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 2
25282: NEG
25283: PUSH
25284: LD_INT 0
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 2
25293: NEG
25294: PUSH
25295: LD_INT 1
25297: NEG
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 2
25305: NEG
25306: PUSH
25307: LD_INT 2
25309: NEG
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25336: LD_ADDR_VAR 0 54
25340: PUSH
25341: LD_INT 0
25343: PUSH
25344: LD_INT 0
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 0
25353: PUSH
25354: LD_INT 1
25356: NEG
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: LD_INT 0
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 0
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 1
25394: NEG
25395: PUSH
25396: LD_INT 0
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: NEG
25406: PUSH
25407: LD_INT 1
25409: NEG
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 1
25417: NEG
25418: PUSH
25419: LD_INT 2
25421: NEG
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: LD_INT 2
25432: NEG
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 1
25440: PUSH
25441: LD_INT 1
25443: NEG
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 2
25451: PUSH
25452: LD_INT 0
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 2
25461: PUSH
25462: LD_INT 1
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 2
25471: PUSH
25472: LD_INT 2
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: LD_INT 2
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 0
25491: PUSH
25492: LD_INT 2
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 2
25512: NEG
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 2
25523: NEG
25524: PUSH
25525: LD_INT 1
25527: NEG
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 2
25535: NEG
25536: PUSH
25537: LD_INT 2
25539: NEG
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25566: LD_ADDR_VAR 0 55
25570: PUSH
25571: LD_INT 0
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 0
25583: PUSH
25584: LD_INT 1
25586: NEG
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 1
25594: PUSH
25595: LD_INT 0
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 1
25604: PUSH
25605: LD_INT 1
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 0
25614: PUSH
25615: LD_INT 1
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 1
25624: NEG
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 1
25635: NEG
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 1
25647: NEG
25648: PUSH
25649: LD_INT 2
25651: NEG
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: LD_INT 2
25662: NEG
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 1
25670: PUSH
25671: LD_INT 1
25673: NEG
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 2
25681: PUSH
25682: LD_INT 0
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 2
25691: PUSH
25692: LD_INT 1
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 2
25701: PUSH
25702: LD_INT 2
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: LD_INT 2
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 0
25721: PUSH
25722: LD_INT 2
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 2
25742: NEG
25743: PUSH
25744: LD_INT 0
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 2
25753: NEG
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 2
25765: NEG
25766: PUSH
25767: LD_INT 2
25769: NEG
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25796: LD_ADDR_VAR 0 56
25800: PUSH
25801: LD_INT 0
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 0
25813: PUSH
25814: LD_INT 1
25816: NEG
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 1
25824: PUSH
25825: LD_INT 0
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: LD_INT 1
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 0
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 1
25854: NEG
25855: PUSH
25856: LD_INT 0
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 1
25865: NEG
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 1
25877: NEG
25878: PUSH
25879: LD_INT 2
25881: NEG
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: LD_INT 2
25892: NEG
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: LD_INT 1
25903: NEG
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 2
25911: PUSH
25912: LD_INT 0
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 2
25921: PUSH
25922: LD_INT 1
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 2
25931: PUSH
25932: LD_INT 2
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 1
25941: PUSH
25942: LD_INT 2
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: LD_INT 2
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 1
25961: NEG
25962: PUSH
25963: LD_INT 1
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 2
25972: NEG
25973: PUSH
25974: LD_INT 0
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 2
25983: NEG
25984: PUSH
25985: LD_INT 1
25987: NEG
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 2
25995: NEG
25996: PUSH
25997: LD_INT 2
25999: NEG
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26026: LD_ADDR_VAR 0 57
26030: PUSH
26031: LD_INT 0
26033: PUSH
26034: LD_INT 0
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: LD_INT 1
26046: NEG
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: LD_INT 0
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: LD_INT 1
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 1
26084: NEG
26085: PUSH
26086: LD_INT 0
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 1
26095: NEG
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 1
26107: NEG
26108: PUSH
26109: LD_INT 2
26111: NEG
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: LD_INT 2
26122: NEG
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 1
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 2
26141: PUSH
26142: LD_INT 0
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 2
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 2
26161: PUSH
26162: LD_INT 2
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: LD_INT 2
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: LD_INT 2
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: LD_INT 1
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 2
26202: NEG
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 2
26213: NEG
26214: PUSH
26215: LD_INT 1
26217: NEG
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 2
26225: NEG
26226: PUSH
26227: LD_INT 2
26229: NEG
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26256: LD_ADDR_VAR 0 58
26260: PUSH
26261: LD_INT 0
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 0
26273: PUSH
26274: LD_INT 1
26276: NEG
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: LD_INT 0
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 1
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 1
26314: NEG
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 1
26337: NEG
26338: PUSH
26339: LD_INT 2
26341: NEG
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 0
26349: PUSH
26350: LD_INT 2
26352: NEG
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 2
26371: PUSH
26372: LD_INT 0
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 2
26381: PUSH
26382: LD_INT 1
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 2
26391: PUSH
26392: LD_INT 2
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: LD_INT 2
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 0
26411: PUSH
26412: LD_INT 2
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 2
26432: NEG
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 2
26443: NEG
26444: PUSH
26445: LD_INT 1
26447: NEG
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 2
26455: NEG
26456: PUSH
26457: LD_INT 2
26459: NEG
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26486: LD_ADDR_VAR 0 59
26490: PUSH
26491: LD_INT 0
26493: PUSH
26494: LD_INT 0
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 0
26503: PUSH
26504: LD_INT 1
26506: NEG
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: LD_INT 0
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 1
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: LD_INT 1
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 1
26544: NEG
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 1
26555: NEG
26556: PUSH
26557: LD_INT 1
26559: NEG
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26574: LD_ADDR_VAR 0 60
26578: PUSH
26579: LD_INT 0
26581: PUSH
26582: LD_INT 0
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: LD_INT 1
26594: NEG
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 1
26612: PUSH
26613: LD_INT 1
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 1
26632: NEG
26633: PUSH
26634: LD_INT 0
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: NEG
26644: PUSH
26645: LD_INT 1
26647: NEG
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26662: LD_ADDR_VAR 0 61
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: LD_INT 0
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 0
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: LD_INT 0
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: LD_INT 1
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 1
26720: NEG
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: LD_INT 1
26735: NEG
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26750: LD_ADDR_VAR 0 62
26754: PUSH
26755: LD_INT 0
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 0
26767: PUSH
26768: LD_INT 1
26770: NEG
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 1
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 1
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 1
26808: NEG
26809: PUSH
26810: LD_INT 0
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 1
26819: NEG
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26838: LD_ADDR_VAR 0 63
26842: PUSH
26843: LD_INT 0
26845: PUSH
26846: LD_INT 0
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: LD_INT 1
26858: NEG
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 1
26866: PUSH
26867: LD_INT 0
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: LD_INT 1
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: LD_INT 1
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 1
26896: NEG
26897: PUSH
26898: LD_INT 0
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 1
26907: NEG
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26926: LD_ADDR_VAR 0 64
26930: PUSH
26931: LD_INT 0
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 0
26943: PUSH
26944: LD_INT 1
26946: NEG
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: LD_INT 0
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: LD_INT 0
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: LD_INT 1
26999: NEG
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: ST_TO_ADDR
// end ; 1 :
27014: GO 32911
27016: LD_INT 1
27018: DOUBLE
27019: EQUAL
27020: IFTRUE 27024
27022: GO 29647
27024: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27025: LD_ADDR_VAR 0 11
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: LD_INT 3
27036: NEG
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: LD_INT 3
27047: NEG
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: PUSH
27056: LD_INT 2
27058: NEG
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: LIST
27068: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27069: LD_ADDR_VAR 0 12
27073: PUSH
27074: LD_INT 2
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 3
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 3
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: LIST
27109: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27110: LD_ADDR_VAR 0 13
27114: PUSH
27115: LD_INT 3
27117: PUSH
27118: LD_INT 2
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 3
27127: PUSH
27128: LD_INT 3
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 2
27137: PUSH
27138: LD_INT 3
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: LIST
27149: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27150: LD_ADDR_VAR 0 14
27154: PUSH
27155: LD_INT 1
27157: PUSH
27158: LD_INT 3
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: LD_INT 3
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: LD_INT 2
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: LIST
27190: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27191: LD_ADDR_VAR 0 15
27195: PUSH
27196: LD_INT 2
27198: NEG
27199: PUSH
27200: LD_INT 1
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 3
27209: NEG
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 3
27220: NEG
27221: PUSH
27222: LD_INT 1
27224: NEG
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: LIST
27234: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27235: LD_ADDR_VAR 0 16
27239: PUSH
27240: LD_INT 2
27242: NEG
27243: PUSH
27244: LD_INT 3
27246: NEG
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 3
27254: NEG
27255: PUSH
27256: LD_INT 2
27258: NEG
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 3
27266: NEG
27267: PUSH
27268: LD_INT 3
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: LIST
27280: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27281: LD_ADDR_VAR 0 17
27285: PUSH
27286: LD_INT 1
27288: NEG
27289: PUSH
27290: LD_INT 3
27292: NEG
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: LD_INT 3
27303: NEG
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: LD_INT 2
27314: NEG
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: LIST
27324: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27325: LD_ADDR_VAR 0 18
27329: PUSH
27330: LD_INT 2
27332: PUSH
27333: LD_INT 1
27335: NEG
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 3
27343: PUSH
27344: LD_INT 0
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 3
27353: PUSH
27354: LD_INT 1
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: LIST
27365: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27366: LD_ADDR_VAR 0 19
27370: PUSH
27371: LD_INT 3
27373: PUSH
27374: LD_INT 2
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 3
27383: PUSH
27384: LD_INT 3
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 2
27393: PUSH
27394: LD_INT 3
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: LIST
27405: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27406: LD_ADDR_VAR 0 20
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: LD_INT 3
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 0
27423: PUSH
27424: LD_INT 3
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: LD_INT 2
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: LIST
27446: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27447: LD_ADDR_VAR 0 21
27451: PUSH
27452: LD_INT 2
27454: NEG
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 3
27465: NEG
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 3
27476: NEG
27477: PUSH
27478: LD_INT 1
27480: NEG
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: LIST
27490: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27491: LD_ADDR_VAR 0 22
27495: PUSH
27496: LD_INT 2
27498: NEG
27499: PUSH
27500: LD_INT 3
27502: NEG
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 3
27510: NEG
27511: PUSH
27512: LD_INT 2
27514: NEG
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 3
27522: NEG
27523: PUSH
27524: LD_INT 3
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: LIST
27536: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27537: LD_ADDR_VAR 0 23
27541: PUSH
27542: LD_INT 0
27544: PUSH
27545: LD_INT 3
27547: NEG
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 1
27555: NEG
27556: PUSH
27557: LD_INT 4
27559: NEG
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: LD_INT 3
27570: NEG
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: LIST
27580: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27581: LD_ADDR_VAR 0 24
27585: PUSH
27586: LD_INT 3
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 3
27598: PUSH
27599: LD_INT 1
27601: NEG
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 4
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: LIST
27621: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27622: LD_ADDR_VAR 0 25
27626: PUSH
27627: LD_INT 3
27629: PUSH
27630: LD_INT 3
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 4
27639: PUSH
27640: LD_INT 3
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 3
27649: PUSH
27650: LD_INT 4
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: LIST
27661: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27662: LD_ADDR_VAR 0 26
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: LD_INT 3
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: LD_INT 4
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 1
27689: NEG
27690: PUSH
27691: LD_INT 3
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: LIST
27702: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27703: LD_ADDR_VAR 0 27
27707: PUSH
27708: LD_INT 3
27710: NEG
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 3
27721: NEG
27722: PUSH
27723: LD_INT 1
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 4
27732: NEG
27733: PUSH
27734: LD_INT 1
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: LIST
27746: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27747: LD_ADDR_VAR 0 28
27751: PUSH
27752: LD_INT 3
27754: NEG
27755: PUSH
27756: LD_INT 3
27758: NEG
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 3
27766: NEG
27767: PUSH
27768: LD_INT 4
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 4
27778: NEG
27779: PUSH
27780: LD_INT 3
27782: NEG
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: LIST
27792: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27793: LD_ADDR_VAR 0 29
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PUSH
27802: LD_INT 3
27804: NEG
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: LD_INT 3
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: LD_INT 2
27826: NEG
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 1
27834: NEG
27835: PUSH
27836: LD_INT 4
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 0
27846: PUSH
27847: LD_INT 4
27849: NEG
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: LD_INT 3
27860: NEG
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 1
27868: NEG
27869: PUSH
27870: LD_INT 5
27872: NEG
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 0
27880: PUSH
27881: LD_INT 5
27883: NEG
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 1
27891: PUSH
27892: LD_INT 4
27894: NEG
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 1
27902: NEG
27903: PUSH
27904: LD_INT 6
27906: NEG
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 0
27914: PUSH
27915: LD_INT 6
27917: NEG
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 1
27925: PUSH
27926: LD_INT 5
27928: NEG
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27948: LD_ADDR_VAR 0 30
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 3
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 3
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 3
27986: PUSH
27987: LD_INT 1
27989: NEG
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 4
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 4
28007: PUSH
28008: LD_INT 1
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 4
28017: PUSH
28018: LD_INT 1
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 5
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 5
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 5
28048: PUSH
28049: LD_INT 1
28051: NEG
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 6
28059: PUSH
28060: LD_INT 0
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 6
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28091: LD_ADDR_VAR 0 31
28095: PUSH
28096: LD_INT 3
28098: PUSH
28099: LD_INT 2
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 3
28108: PUSH
28109: LD_INT 3
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 2
28118: PUSH
28119: LD_INT 3
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 4
28128: PUSH
28129: LD_INT 3
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 4
28138: PUSH
28139: LD_INT 4
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 3
28148: PUSH
28149: LD_INT 4
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 5
28158: PUSH
28159: LD_INT 4
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 5
28168: PUSH
28169: LD_INT 5
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 4
28178: PUSH
28179: LD_INT 5
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 6
28188: PUSH
28189: LD_INT 5
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 6
28198: PUSH
28199: LD_INT 6
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 5
28208: PUSH
28209: LD_INT 6
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28230: LD_ADDR_VAR 0 32
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: LD_INT 3
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: LD_INT 3
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 1
28257: NEG
28258: PUSH
28259: LD_INT 2
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: LD_INT 4
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 0
28278: PUSH
28279: LD_INT 4
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 1
28288: NEG
28289: PUSH
28290: LD_INT 3
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 1
28299: PUSH
28300: LD_INT 5
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: LD_INT 5
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 1
28319: NEG
28320: PUSH
28321: LD_INT 4
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: LD_INT 6
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: LD_INT 6
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 1
28350: NEG
28351: PUSH
28352: LD_INT 5
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28373: LD_ADDR_VAR 0 33
28377: PUSH
28378: LD_INT 2
28380: NEG
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 3
28391: NEG
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 3
28402: NEG
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 3
28414: NEG
28415: PUSH
28416: LD_INT 1
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 4
28425: NEG
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 4
28436: NEG
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 4
28448: NEG
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 5
28459: NEG
28460: PUSH
28461: LD_INT 0
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 5
28470: NEG
28471: PUSH
28472: LD_INT 1
28474: NEG
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 5
28482: NEG
28483: PUSH
28484: LD_INT 1
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 6
28493: NEG
28494: PUSH
28495: LD_INT 0
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 6
28504: NEG
28505: PUSH
28506: LD_INT 1
28508: NEG
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28528: LD_ADDR_VAR 0 34
28532: PUSH
28533: LD_INT 2
28535: NEG
28536: PUSH
28537: LD_INT 3
28539: NEG
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 3
28547: NEG
28548: PUSH
28549: LD_INT 2
28551: NEG
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 3
28559: NEG
28560: PUSH
28561: LD_INT 3
28563: NEG
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 3
28571: NEG
28572: PUSH
28573: LD_INT 4
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 4
28583: NEG
28584: PUSH
28585: LD_INT 3
28587: NEG
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 4
28595: NEG
28596: PUSH
28597: LD_INT 4
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 4
28607: NEG
28608: PUSH
28609: LD_INT 5
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 5
28619: NEG
28620: PUSH
28621: LD_INT 4
28623: NEG
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 5
28631: NEG
28632: PUSH
28633: LD_INT 5
28635: NEG
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 5
28643: NEG
28644: PUSH
28645: LD_INT 6
28647: NEG
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 6
28655: NEG
28656: PUSH
28657: LD_INT 5
28659: NEG
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 6
28667: NEG
28668: PUSH
28669: LD_INT 6
28671: NEG
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28691: LD_ADDR_VAR 0 41
28695: PUSH
28696: LD_INT 0
28698: PUSH
28699: LD_INT 2
28701: NEG
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: LD_INT 3
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 1
28721: PUSH
28722: LD_INT 2
28724: NEG
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: LIST
28734: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28735: LD_ADDR_VAR 0 42
28739: PUSH
28740: LD_INT 2
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 2
28752: PUSH
28753: LD_INT 1
28755: NEG
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 3
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: LIST
28775: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28776: LD_ADDR_VAR 0 43
28780: PUSH
28781: LD_INT 2
28783: PUSH
28784: LD_INT 2
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 3
28793: PUSH
28794: LD_INT 2
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 2
28803: PUSH
28804: LD_INT 3
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: LIST
28815: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28816: LD_ADDR_VAR 0 44
28820: PUSH
28821: LD_INT 0
28823: PUSH
28824: LD_INT 2
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: LD_INT 3
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 1
28843: NEG
28844: PUSH
28845: LD_INT 2
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: LIST
28856: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28857: LD_ADDR_VAR 0 45
28861: PUSH
28862: LD_INT 2
28864: NEG
28865: PUSH
28866: LD_INT 0
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 2
28875: NEG
28876: PUSH
28877: LD_INT 1
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 3
28886: NEG
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: LIST
28900: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28901: LD_ADDR_VAR 0 46
28905: PUSH
28906: LD_INT 2
28908: NEG
28909: PUSH
28910: LD_INT 2
28912: NEG
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 2
28920: NEG
28921: PUSH
28922: LD_INT 3
28924: NEG
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 3
28932: NEG
28933: PUSH
28934: LD_INT 2
28936: NEG
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: LIST
28946: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28947: LD_ADDR_VAR 0 47
28951: PUSH
28952: LD_INT 2
28954: NEG
28955: PUSH
28956: LD_INT 3
28958: NEG
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 1
28966: NEG
28967: PUSH
28968: LD_INT 3
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28980: LD_ADDR_VAR 0 48
28984: PUSH
28985: LD_INT 1
28987: PUSH
28988: LD_INT 2
28990: NEG
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 2
28998: PUSH
28999: LD_INT 1
29001: NEG
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29011: LD_ADDR_VAR 0 49
29015: PUSH
29016: LD_INT 3
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: LD_INT 2
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29040: LD_ADDR_VAR 0 50
29044: PUSH
29045: LD_INT 2
29047: PUSH
29048: LD_INT 3
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 1
29057: PUSH
29058: LD_INT 3
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29069: LD_ADDR_VAR 0 51
29073: PUSH
29074: LD_INT 1
29076: NEG
29077: PUSH
29078: LD_INT 2
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 2
29087: NEG
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29100: LD_ADDR_VAR 0 52
29104: PUSH
29105: LD_INT 3
29107: NEG
29108: PUSH
29109: LD_INT 1
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 3
29119: NEG
29120: PUSH
29121: LD_INT 2
29123: NEG
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29133: LD_ADDR_VAR 0 53
29137: PUSH
29138: LD_INT 1
29140: NEG
29141: PUSH
29142: LD_INT 3
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 0
29152: PUSH
29153: LD_INT 3
29155: NEG
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: LD_INT 2
29166: NEG
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: LIST
29176: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29177: LD_ADDR_VAR 0 54
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 3
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 3
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: LIST
29217: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29218: LD_ADDR_VAR 0 55
29222: PUSH
29223: LD_INT 3
29225: PUSH
29226: LD_INT 2
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 3
29235: PUSH
29236: LD_INT 3
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 2
29245: PUSH
29246: LD_INT 3
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: LIST
29257: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29258: LD_ADDR_VAR 0 56
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: LD_INT 3
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 0
29275: PUSH
29276: LD_INT 3
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 1
29285: NEG
29286: PUSH
29287: LD_INT 2
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: LIST
29298: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29299: LD_ADDR_VAR 0 57
29303: PUSH
29304: LD_INT 2
29306: NEG
29307: PUSH
29308: LD_INT 1
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 3
29317: NEG
29318: PUSH
29319: LD_INT 0
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 3
29328: NEG
29329: PUSH
29330: LD_INT 1
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: LIST
29342: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29343: LD_ADDR_VAR 0 58
29347: PUSH
29348: LD_INT 2
29350: NEG
29351: PUSH
29352: LD_INT 3
29354: NEG
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 3
29362: NEG
29363: PUSH
29364: LD_INT 2
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 3
29374: NEG
29375: PUSH
29376: LD_INT 3
29378: NEG
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: LIST
29388: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29389: LD_ADDR_VAR 0 59
29393: PUSH
29394: LD_INT 1
29396: NEG
29397: PUSH
29398: LD_INT 2
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: LD_INT 2
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: LD_INT 1
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: LIST
29432: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29433: LD_ADDR_VAR 0 60
29437: PUSH
29438: LD_INT 1
29440: PUSH
29441: LD_INT 1
29443: NEG
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 2
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 2
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: LIST
29473: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29474: LD_ADDR_VAR 0 61
29478: PUSH
29479: LD_INT 2
29481: PUSH
29482: LD_INT 1
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 2
29491: PUSH
29492: LD_INT 2
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: LD_INT 2
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: LIST
29513: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29514: LD_ADDR_VAR 0 62
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: LD_INT 2
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: LD_INT 2
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 1
29541: NEG
29542: PUSH
29543: LD_INT 1
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: LIST
29554: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29555: LD_ADDR_VAR 0 63
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: LD_INT 1
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 2
29573: NEG
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 2
29584: NEG
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29599: LD_ADDR_VAR 0 64
29603: PUSH
29604: LD_INT 1
29606: NEG
29607: PUSH
29608: LD_INT 2
29610: NEG
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 2
29618: NEG
29619: PUSH
29620: LD_INT 1
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 2
29630: NEG
29631: PUSH
29632: LD_INT 2
29634: NEG
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: LIST
29644: ST_TO_ADDR
// end ; 2 :
29645: GO 32911
29647: LD_INT 2
29649: DOUBLE
29650: EQUAL
29651: IFTRUE 29655
29653: GO 32910
29655: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29656: LD_ADDR_VAR 0 29
29660: PUSH
29661: LD_INT 4
29663: PUSH
29664: LD_INT 0
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 4
29673: PUSH
29674: LD_INT 1
29676: NEG
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 5
29684: PUSH
29685: LD_INT 0
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 5
29694: PUSH
29695: LD_INT 1
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 4
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 3
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 3
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 3
29735: PUSH
29736: LD_INT 2
29738: NEG
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 5
29746: PUSH
29747: LD_INT 2
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 3
29756: PUSH
29757: LD_INT 3
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 3
29766: PUSH
29767: LD_INT 2
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 4
29776: PUSH
29777: LD_INT 3
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 4
29786: PUSH
29787: LD_INT 4
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 3
29796: PUSH
29797: LD_INT 4
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 2
29806: PUSH
29807: LD_INT 3
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 4
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 2
29836: PUSH
29837: LD_INT 4
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 0
29846: PUSH
29847: LD_INT 4
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 0
29856: PUSH
29857: LD_INT 3
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 1
29866: PUSH
29867: LD_INT 4
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: LD_INT 5
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: LD_INT 5
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: NEG
29897: PUSH
29898: LD_INT 4
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 1
29907: NEG
29908: PUSH
29909: LD_INT 3
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 2
29918: PUSH
29919: LD_INT 5
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 2
29928: NEG
29929: PUSH
29930: LD_INT 3
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 3
29939: NEG
29940: PUSH
29941: LD_INT 0
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 3
29950: NEG
29951: PUSH
29952: LD_INT 1
29954: NEG
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 2
29962: NEG
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 2
29973: NEG
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 3
29984: NEG
29985: PUSH
29986: LD_INT 1
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 4
29995: NEG
29996: PUSH
29997: LD_INT 0
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 4
30006: NEG
30007: PUSH
30008: LD_INT 1
30010: NEG
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 4
30018: NEG
30019: PUSH
30020: LD_INT 2
30022: NEG
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 2
30030: NEG
30031: PUSH
30032: LD_INT 2
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 4
30041: NEG
30042: PUSH
30043: LD_INT 4
30045: NEG
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 4
30053: NEG
30054: PUSH
30055: LD_INT 5
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 3
30065: NEG
30066: PUSH
30067: LD_INT 4
30069: NEG
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 3
30077: NEG
30078: PUSH
30079: LD_INT 3
30081: NEG
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 4
30089: NEG
30090: PUSH
30091: LD_INT 3
30093: NEG
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 5
30101: NEG
30102: PUSH
30103: LD_INT 4
30105: NEG
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 5
30113: NEG
30114: PUSH
30115: LD_INT 5
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 3
30125: NEG
30126: PUSH
30127: LD_INT 5
30129: NEG
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 5
30137: NEG
30138: PUSH
30139: LD_INT 3
30141: NEG
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30194: LD_ADDR_VAR 0 30
30198: PUSH
30199: LD_INT 4
30201: PUSH
30202: LD_INT 4
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 4
30211: PUSH
30212: LD_INT 3
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 5
30221: PUSH
30222: LD_INT 4
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 5
30231: PUSH
30232: LD_INT 5
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 4
30241: PUSH
30242: LD_INT 5
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 3
30251: PUSH
30252: LD_INT 4
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 3
30261: PUSH
30262: LD_INT 3
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 5
30271: PUSH
30272: LD_INT 3
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 3
30281: PUSH
30282: LD_INT 5
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 0
30291: PUSH
30292: LD_INT 3
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 0
30301: PUSH
30302: LD_INT 2
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: PUSH
30312: LD_INT 3
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 1
30321: PUSH
30322: LD_INT 4
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: LD_INT 4
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 1
30341: NEG
30342: PUSH
30343: LD_INT 3
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 1
30352: NEG
30353: PUSH
30354: LD_INT 2
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 2
30363: PUSH
30364: LD_INT 4
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 2
30373: NEG
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 4
30384: NEG
30385: PUSH
30386: LD_INT 0
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 4
30395: NEG
30396: PUSH
30397: LD_INT 1
30399: NEG
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 3
30407: NEG
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 3
30418: NEG
30419: PUSH
30420: LD_INT 1
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 4
30429: NEG
30430: PUSH
30431: LD_INT 1
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 5
30440: NEG
30441: PUSH
30442: LD_INT 0
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 5
30451: NEG
30452: PUSH
30453: LD_INT 1
30455: NEG
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 5
30463: NEG
30464: PUSH
30465: LD_INT 2
30467: NEG
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 3
30475: NEG
30476: PUSH
30477: LD_INT 2
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 3
30486: NEG
30487: PUSH
30488: LD_INT 3
30490: NEG
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 3
30498: NEG
30499: PUSH
30500: LD_INT 4
30502: NEG
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 2
30510: NEG
30511: PUSH
30512: LD_INT 3
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 2
30522: NEG
30523: PUSH
30524: LD_INT 2
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 3
30534: NEG
30535: PUSH
30536: LD_INT 2
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 4
30546: NEG
30547: PUSH
30548: LD_INT 3
30550: NEG
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 4
30558: NEG
30559: PUSH
30560: LD_INT 4
30562: NEG
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 2
30570: NEG
30571: PUSH
30572: LD_INT 4
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 4
30582: NEG
30583: PUSH
30584: LD_INT 2
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: LD_INT 4
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 0
30605: PUSH
30606: LD_INT 5
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 1
30616: PUSH
30617: LD_INT 4
30619: NEG
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 1
30627: PUSH
30628: LD_INT 3
30630: NEG
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 0
30638: PUSH
30639: LD_INT 3
30641: NEG
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 1
30649: NEG
30650: PUSH
30651: LD_INT 4
30653: NEG
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: NEG
30662: PUSH
30663: LD_INT 5
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 2
30673: PUSH
30674: LD_INT 3
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 2
30684: NEG
30685: PUSH
30686: LD_INT 5
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30741: LD_ADDR_VAR 0 31
30745: PUSH
30746: LD_INT 0
30748: PUSH
30749: LD_INT 4
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 0
30758: PUSH
30759: LD_INT 3
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 1
30768: PUSH
30769: LD_INT 4
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 1
30778: PUSH
30779: LD_INT 5
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: LD_INT 5
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 1
30798: NEG
30799: PUSH
30800: LD_INT 4
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 1
30809: NEG
30810: PUSH
30811: LD_INT 3
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 2
30820: PUSH
30821: LD_INT 5
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 2
30830: NEG
30831: PUSH
30832: LD_INT 3
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 3
30841: NEG
30842: PUSH
30843: LD_INT 0
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 3
30852: NEG
30853: PUSH
30854: LD_INT 1
30856: NEG
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 2
30864: NEG
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 2
30875: NEG
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 3
30886: NEG
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 4
30897: NEG
30898: PUSH
30899: LD_INT 0
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 4
30908: NEG
30909: PUSH
30910: LD_INT 1
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 4
30920: NEG
30921: PUSH
30922: LD_INT 2
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 2
30932: NEG
30933: PUSH
30934: LD_INT 2
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 4
30943: NEG
30944: PUSH
30945: LD_INT 4
30947: NEG
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 4
30955: NEG
30956: PUSH
30957: LD_INT 5
30959: NEG
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 3
30967: NEG
30968: PUSH
30969: LD_INT 4
30971: NEG
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 3
30979: NEG
30980: PUSH
30981: LD_INT 3
30983: NEG
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 4
30991: NEG
30992: PUSH
30993: LD_INT 3
30995: NEG
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 5
31003: NEG
31004: PUSH
31005: LD_INT 4
31007: NEG
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 5
31015: NEG
31016: PUSH
31017: LD_INT 5
31019: NEG
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 3
31027: NEG
31028: PUSH
31029: LD_INT 5
31031: NEG
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 5
31039: NEG
31040: PUSH
31041: LD_INT 3
31043: NEG
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: LD_INT 3
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: LD_INT 4
31065: NEG
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: LD_INT 3
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 1
31084: PUSH
31085: LD_INT 2
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 0
31095: PUSH
31096: LD_INT 2
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 1
31106: NEG
31107: PUSH
31108: LD_INT 3
31110: NEG
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: LD_INT 4
31122: NEG
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 2
31130: PUSH
31131: LD_INT 2
31133: NEG
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 2
31141: NEG
31142: PUSH
31143: LD_INT 4
31145: NEG
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 4
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 4
31163: PUSH
31164: LD_INT 1
31166: NEG
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 5
31174: PUSH
31175: LD_INT 0
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 5
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 4
31194: PUSH
31195: LD_INT 1
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 3
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 3
31214: PUSH
31215: LD_INT 1
31217: NEG
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 3
31225: PUSH
31226: LD_INT 2
31228: NEG
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 5
31236: PUSH
31237: LD_INT 2
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31291: LD_ADDR_VAR 0 32
31295: PUSH
31296: LD_INT 4
31298: NEG
31299: PUSH
31300: LD_INT 0
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 4
31309: NEG
31310: PUSH
31311: LD_INT 1
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 3
31321: NEG
31322: PUSH
31323: LD_INT 0
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 3
31332: NEG
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 4
31343: NEG
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 5
31354: NEG
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 5
31365: NEG
31366: PUSH
31367: LD_INT 1
31369: NEG
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 5
31377: NEG
31378: PUSH
31379: LD_INT 2
31381: NEG
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 3
31389: NEG
31390: PUSH
31391: LD_INT 2
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 3
31400: NEG
31401: PUSH
31402: LD_INT 3
31404: NEG
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 3
31412: NEG
31413: PUSH
31414: LD_INT 4
31416: NEG
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 2
31424: NEG
31425: PUSH
31426: LD_INT 3
31428: NEG
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 2
31436: NEG
31437: PUSH
31438: LD_INT 2
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 3
31448: NEG
31449: PUSH
31450: LD_INT 2
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 4
31460: NEG
31461: PUSH
31462: LD_INT 3
31464: NEG
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 4
31472: NEG
31473: PUSH
31474: LD_INT 4
31476: NEG
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 2
31484: NEG
31485: PUSH
31486: LD_INT 4
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 4
31496: NEG
31497: PUSH
31498: LD_INT 2
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 0
31508: PUSH
31509: LD_INT 4
31511: NEG
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: LD_INT 5
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: PUSH
31531: LD_INT 4
31533: NEG
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 1
31541: PUSH
31542: LD_INT 3
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 0
31552: PUSH
31553: LD_INT 3
31555: NEG
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: LD_INT 4
31567: NEG
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: LD_INT 5
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: LD_INT 3
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 2
31598: NEG
31599: PUSH
31600: LD_INT 5
31602: NEG
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 3
31610: PUSH
31611: LD_INT 0
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 3
31620: PUSH
31621: LD_INT 1
31623: NEG
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 4
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 4
31641: PUSH
31642: LD_INT 1
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 3
31651: PUSH
31652: LD_INT 1
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 2
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 2
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 2
31682: PUSH
31683: LD_INT 2
31685: NEG
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 4
31693: PUSH
31694: LD_INT 2
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 4
31703: PUSH
31704: LD_INT 4
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 4
31713: PUSH
31714: LD_INT 3
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 5
31723: PUSH
31724: LD_INT 4
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 5
31733: PUSH
31734: LD_INT 5
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 4
31743: PUSH
31744: LD_INT 5
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 3
31753: PUSH
31754: LD_INT 4
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 3
31763: PUSH
31764: LD_INT 3
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 5
31773: PUSH
31774: LD_INT 3
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 3
31783: PUSH
31784: LD_INT 5
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31838: LD_ADDR_VAR 0 33
31842: PUSH
31843: LD_INT 4
31845: NEG
31846: PUSH
31847: LD_INT 4
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 4
31857: NEG
31858: PUSH
31859: LD_INT 5
31861: NEG
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 3
31869: NEG
31870: PUSH
31871: LD_INT 4
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 3
31881: NEG
31882: PUSH
31883: LD_INT 3
31885: NEG
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 4
31893: NEG
31894: PUSH
31895: LD_INT 3
31897: NEG
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 5
31905: NEG
31906: PUSH
31907: LD_INT 4
31909: NEG
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 5
31917: NEG
31918: PUSH
31919: LD_INT 5
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 3
31929: NEG
31930: PUSH
31931: LD_INT 5
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 5
31941: NEG
31942: PUSH
31943: LD_INT 3
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 0
31953: PUSH
31954: LD_INT 3
31956: NEG
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 0
31964: PUSH
31965: LD_INT 4
31967: NEG
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: LD_INT 3
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 1
31986: PUSH
31987: LD_INT 2
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: LD_INT 2
32000: NEG
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: LD_INT 3
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 1
32020: NEG
32021: PUSH
32022: LD_INT 4
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 2
32032: PUSH
32033: LD_INT 2
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 2
32043: NEG
32044: PUSH
32045: LD_INT 4
32047: NEG
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 4
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 4
32065: PUSH
32066: LD_INT 1
32068: NEG
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 5
32076: PUSH
32077: LD_INT 0
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 5
32086: PUSH
32087: LD_INT 1
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 4
32096: PUSH
32097: LD_INT 1
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 3
32106: PUSH
32107: LD_INT 0
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 3
32116: PUSH
32117: LD_INT 1
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 3
32127: PUSH
32128: LD_INT 2
32130: NEG
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 5
32138: PUSH
32139: LD_INT 2
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 3
32148: PUSH
32149: LD_INT 3
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 3
32158: PUSH
32159: LD_INT 2
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 4
32168: PUSH
32169: LD_INT 3
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 4
32178: PUSH
32179: LD_INT 4
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 3
32188: PUSH
32189: LD_INT 4
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 2
32198: PUSH
32199: LD_INT 3
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 2
32208: PUSH
32209: LD_INT 2
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 4
32218: PUSH
32219: LD_INT 2
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 2
32228: PUSH
32229: LD_INT 4
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: LD_INT 4
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: LD_INT 3
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 1
32258: PUSH
32259: LD_INT 4
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: LD_INT 5
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 0
32278: PUSH
32279: LD_INT 5
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 1
32288: NEG
32289: PUSH
32290: LD_INT 4
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: LD_INT 3
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 2
32310: PUSH
32311: LD_INT 5
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 2
32320: NEG
32321: PUSH
32322: LD_INT 3
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32376: LD_ADDR_VAR 0 34
32380: PUSH
32381: LD_INT 0
32383: PUSH
32384: LD_INT 4
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: LD_INT 5
32397: NEG
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: PUSH
32406: LD_INT 4
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: LD_INT 3
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 0
32427: PUSH
32428: LD_INT 3
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 1
32438: NEG
32439: PUSH
32440: LD_INT 4
32442: NEG
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PUSH
32452: LD_INT 5
32454: NEG
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 2
32462: PUSH
32463: LD_INT 3
32465: NEG
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 2
32473: NEG
32474: PUSH
32475: LD_INT 5
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 3
32485: PUSH
32486: LD_INT 0
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 3
32495: PUSH
32496: LD_INT 1
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 4
32506: PUSH
32507: LD_INT 0
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 4
32516: PUSH
32517: LD_INT 1
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 3
32526: PUSH
32527: LD_INT 1
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 2
32546: PUSH
32547: LD_INT 1
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 2
32557: PUSH
32558: LD_INT 2
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 4
32568: PUSH
32569: LD_INT 2
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 4
32578: PUSH
32579: LD_INT 4
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 4
32588: PUSH
32589: LD_INT 3
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 5
32598: PUSH
32599: LD_INT 4
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 5
32608: PUSH
32609: LD_INT 5
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 4
32618: PUSH
32619: LD_INT 5
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 3
32628: PUSH
32629: LD_INT 4
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 3
32638: PUSH
32639: LD_INT 3
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 5
32648: PUSH
32649: LD_INT 3
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 3
32658: PUSH
32659: LD_INT 5
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 0
32668: PUSH
32669: LD_INT 3
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 0
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: PUSH
32689: LD_INT 3
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: LD_INT 4
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: LD_INT 4
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 1
32718: NEG
32719: PUSH
32720: LD_INT 3
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 1
32729: NEG
32730: PUSH
32731: LD_INT 2
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 2
32740: PUSH
32741: LD_INT 4
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 2
32750: NEG
32751: PUSH
32752: LD_INT 2
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 4
32761: NEG
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 4
32772: NEG
32773: PUSH
32774: LD_INT 1
32776: NEG
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 3
32784: NEG
32785: PUSH
32786: LD_INT 0
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 3
32795: NEG
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 4
32806: NEG
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 5
32817: NEG
32818: PUSH
32819: LD_INT 0
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 5
32828: NEG
32829: PUSH
32830: LD_INT 1
32832: NEG
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 5
32840: NEG
32841: PUSH
32842: LD_INT 2
32844: NEG
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 3
32852: NEG
32853: PUSH
32854: LD_INT 2
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: ST_TO_ADDR
// end ; end ;
32908: GO 32911
32910: POP
// case btype of b_depot , b_warehouse :
32911: LD_VAR 0 1
32915: PUSH
32916: LD_INT 0
32918: DOUBLE
32919: EQUAL
32920: IFTRUE 32930
32922: LD_INT 1
32924: DOUBLE
32925: EQUAL
32926: IFTRUE 32930
32928: GO 33131
32930: POP
// case nation of nation_american :
32931: LD_VAR 0 5
32935: PUSH
32936: LD_INT 1
32938: DOUBLE
32939: EQUAL
32940: IFTRUE 32944
32942: GO 33000
32944: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32945: LD_ADDR_VAR 0 9
32949: PUSH
32950: LD_VAR 0 11
32954: PUSH
32955: LD_VAR 0 12
32959: PUSH
32960: LD_VAR 0 13
32964: PUSH
32965: LD_VAR 0 14
32969: PUSH
32970: LD_VAR 0 15
32974: PUSH
32975: LD_VAR 0 16
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: PUSH
32988: LD_VAR 0 4
32992: PUSH
32993: LD_INT 1
32995: PLUS
32996: ARRAY
32997: ST_TO_ADDR
32998: GO 33129
33000: LD_INT 2
33002: DOUBLE
33003: EQUAL
33004: IFTRUE 33008
33006: GO 33064
33008: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33009: LD_ADDR_VAR 0 9
33013: PUSH
33014: LD_VAR 0 17
33018: PUSH
33019: LD_VAR 0 18
33023: PUSH
33024: LD_VAR 0 19
33028: PUSH
33029: LD_VAR 0 20
33033: PUSH
33034: LD_VAR 0 21
33038: PUSH
33039: LD_VAR 0 22
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: PUSH
33052: LD_VAR 0 4
33056: PUSH
33057: LD_INT 1
33059: PLUS
33060: ARRAY
33061: ST_TO_ADDR
33062: GO 33129
33064: LD_INT 3
33066: DOUBLE
33067: EQUAL
33068: IFTRUE 33072
33070: GO 33128
33072: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33073: LD_ADDR_VAR 0 9
33077: PUSH
33078: LD_VAR 0 23
33082: PUSH
33083: LD_VAR 0 24
33087: PUSH
33088: LD_VAR 0 25
33092: PUSH
33093: LD_VAR 0 26
33097: PUSH
33098: LD_VAR 0 27
33102: PUSH
33103: LD_VAR 0 28
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: PUSH
33116: LD_VAR 0 4
33120: PUSH
33121: LD_INT 1
33123: PLUS
33124: ARRAY
33125: ST_TO_ADDR
33126: GO 33129
33128: POP
33129: GO 33684
33131: LD_INT 2
33133: DOUBLE
33134: EQUAL
33135: IFTRUE 33145
33137: LD_INT 3
33139: DOUBLE
33140: EQUAL
33141: IFTRUE 33145
33143: GO 33201
33145: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33146: LD_ADDR_VAR 0 9
33150: PUSH
33151: LD_VAR 0 29
33155: PUSH
33156: LD_VAR 0 30
33160: PUSH
33161: LD_VAR 0 31
33165: PUSH
33166: LD_VAR 0 32
33170: PUSH
33171: LD_VAR 0 33
33175: PUSH
33176: LD_VAR 0 34
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: PUSH
33189: LD_VAR 0 4
33193: PUSH
33194: LD_INT 1
33196: PLUS
33197: ARRAY
33198: ST_TO_ADDR
33199: GO 33684
33201: LD_INT 16
33203: DOUBLE
33204: EQUAL
33205: IFTRUE 33263
33207: LD_INT 17
33209: DOUBLE
33210: EQUAL
33211: IFTRUE 33263
33213: LD_INT 18
33215: DOUBLE
33216: EQUAL
33217: IFTRUE 33263
33219: LD_INT 19
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33263
33225: LD_INT 22
33227: DOUBLE
33228: EQUAL
33229: IFTRUE 33263
33231: LD_INT 20
33233: DOUBLE
33234: EQUAL
33235: IFTRUE 33263
33237: LD_INT 21
33239: DOUBLE
33240: EQUAL
33241: IFTRUE 33263
33243: LD_INT 23
33245: DOUBLE
33246: EQUAL
33247: IFTRUE 33263
33249: LD_INT 24
33251: DOUBLE
33252: EQUAL
33253: IFTRUE 33263
33255: LD_INT 25
33257: DOUBLE
33258: EQUAL
33259: IFTRUE 33263
33261: GO 33319
33263: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33264: LD_ADDR_VAR 0 9
33268: PUSH
33269: LD_VAR 0 35
33273: PUSH
33274: LD_VAR 0 36
33278: PUSH
33279: LD_VAR 0 37
33283: PUSH
33284: LD_VAR 0 38
33288: PUSH
33289: LD_VAR 0 39
33293: PUSH
33294: LD_VAR 0 40
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: PUSH
33307: LD_VAR 0 4
33311: PUSH
33312: LD_INT 1
33314: PLUS
33315: ARRAY
33316: ST_TO_ADDR
33317: GO 33684
33319: LD_INT 6
33321: DOUBLE
33322: EQUAL
33323: IFTRUE 33375
33325: LD_INT 7
33327: DOUBLE
33328: EQUAL
33329: IFTRUE 33375
33331: LD_INT 8
33333: DOUBLE
33334: EQUAL
33335: IFTRUE 33375
33337: LD_INT 13
33339: DOUBLE
33340: EQUAL
33341: IFTRUE 33375
33343: LD_INT 12
33345: DOUBLE
33346: EQUAL
33347: IFTRUE 33375
33349: LD_INT 15
33351: DOUBLE
33352: EQUAL
33353: IFTRUE 33375
33355: LD_INT 11
33357: DOUBLE
33358: EQUAL
33359: IFTRUE 33375
33361: LD_INT 14
33363: DOUBLE
33364: EQUAL
33365: IFTRUE 33375
33367: LD_INT 10
33369: DOUBLE
33370: EQUAL
33371: IFTRUE 33375
33373: GO 33431
33375: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33376: LD_ADDR_VAR 0 9
33380: PUSH
33381: LD_VAR 0 41
33385: PUSH
33386: LD_VAR 0 42
33390: PUSH
33391: LD_VAR 0 43
33395: PUSH
33396: LD_VAR 0 44
33400: PUSH
33401: LD_VAR 0 45
33405: PUSH
33406: LD_VAR 0 46
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: PUSH
33419: LD_VAR 0 4
33423: PUSH
33424: LD_INT 1
33426: PLUS
33427: ARRAY
33428: ST_TO_ADDR
33429: GO 33684
33431: LD_INT 36
33433: DOUBLE
33434: EQUAL
33435: IFTRUE 33439
33437: GO 33495
33439: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33440: LD_ADDR_VAR 0 9
33444: PUSH
33445: LD_VAR 0 47
33449: PUSH
33450: LD_VAR 0 48
33454: PUSH
33455: LD_VAR 0 49
33459: PUSH
33460: LD_VAR 0 50
33464: PUSH
33465: LD_VAR 0 51
33469: PUSH
33470: LD_VAR 0 52
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: PUSH
33483: LD_VAR 0 4
33487: PUSH
33488: LD_INT 1
33490: PLUS
33491: ARRAY
33492: ST_TO_ADDR
33493: GO 33684
33495: LD_INT 4
33497: DOUBLE
33498: EQUAL
33499: IFTRUE 33521
33501: LD_INT 5
33503: DOUBLE
33504: EQUAL
33505: IFTRUE 33521
33507: LD_INT 34
33509: DOUBLE
33510: EQUAL
33511: IFTRUE 33521
33513: LD_INT 37
33515: DOUBLE
33516: EQUAL
33517: IFTRUE 33521
33519: GO 33577
33521: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33522: LD_ADDR_VAR 0 9
33526: PUSH
33527: LD_VAR 0 53
33531: PUSH
33532: LD_VAR 0 54
33536: PUSH
33537: LD_VAR 0 55
33541: PUSH
33542: LD_VAR 0 56
33546: PUSH
33547: LD_VAR 0 57
33551: PUSH
33552: LD_VAR 0 58
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: PUSH
33565: LD_VAR 0 4
33569: PUSH
33570: LD_INT 1
33572: PLUS
33573: ARRAY
33574: ST_TO_ADDR
33575: GO 33684
33577: LD_INT 31
33579: DOUBLE
33580: EQUAL
33581: IFTRUE 33627
33583: LD_INT 32
33585: DOUBLE
33586: EQUAL
33587: IFTRUE 33627
33589: LD_INT 33
33591: DOUBLE
33592: EQUAL
33593: IFTRUE 33627
33595: LD_INT 27
33597: DOUBLE
33598: EQUAL
33599: IFTRUE 33627
33601: LD_INT 26
33603: DOUBLE
33604: EQUAL
33605: IFTRUE 33627
33607: LD_INT 28
33609: DOUBLE
33610: EQUAL
33611: IFTRUE 33627
33613: LD_INT 29
33615: DOUBLE
33616: EQUAL
33617: IFTRUE 33627
33619: LD_INT 30
33621: DOUBLE
33622: EQUAL
33623: IFTRUE 33627
33625: GO 33683
33627: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33628: LD_ADDR_VAR 0 9
33632: PUSH
33633: LD_VAR 0 59
33637: PUSH
33638: LD_VAR 0 60
33642: PUSH
33643: LD_VAR 0 61
33647: PUSH
33648: LD_VAR 0 62
33652: PUSH
33653: LD_VAR 0 63
33657: PUSH
33658: LD_VAR 0 64
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: PUSH
33671: LD_VAR 0 4
33675: PUSH
33676: LD_INT 1
33678: PLUS
33679: ARRAY
33680: ST_TO_ADDR
33681: GO 33684
33683: POP
// temp_list2 = [ ] ;
33684: LD_ADDR_VAR 0 10
33688: PUSH
33689: EMPTY
33690: ST_TO_ADDR
// for i in temp_list do
33691: LD_ADDR_VAR 0 8
33695: PUSH
33696: LD_VAR 0 9
33700: PUSH
33701: FOR_IN
33702: IFFALSE 33754
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33704: LD_ADDR_VAR 0 10
33708: PUSH
33709: LD_VAR 0 10
33713: PUSH
33714: LD_VAR 0 8
33718: PUSH
33719: LD_INT 1
33721: ARRAY
33722: PUSH
33723: LD_VAR 0 2
33727: PLUS
33728: PUSH
33729: LD_VAR 0 8
33733: PUSH
33734: LD_INT 2
33736: ARRAY
33737: PUSH
33738: LD_VAR 0 3
33742: PLUS
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: EMPTY
33749: LIST
33750: ADD
33751: ST_TO_ADDR
33752: GO 33701
33754: POP
33755: POP
// result = temp_list2 ;
33756: LD_ADDR_VAR 0 7
33760: PUSH
33761: LD_VAR 0 10
33765: ST_TO_ADDR
// end ;
33766: LD_VAR 0 7
33770: RET
// export function EnemyInRange ( unit , dist ) ; begin
33771: LD_INT 0
33773: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33774: LD_ADDR_VAR 0 3
33778: PUSH
33779: LD_VAR 0 1
33783: PPUSH
33784: CALL_OW 255
33788: PPUSH
33789: LD_VAR 0 1
33793: PPUSH
33794: CALL_OW 250
33798: PPUSH
33799: LD_VAR 0 1
33803: PPUSH
33804: CALL_OW 251
33808: PPUSH
33809: LD_VAR 0 2
33813: PPUSH
33814: CALL 7173 0 4
33818: PUSH
33819: LD_INT 4
33821: ARRAY
33822: ST_TO_ADDR
// end ;
33823: LD_VAR 0 3
33827: RET
// export function PlayerSeeMe ( unit ) ; begin
33828: LD_INT 0
33830: PPUSH
// result := See ( your_side , unit ) ;
33831: LD_ADDR_VAR 0 2
33835: PUSH
33836: LD_OWVAR 2
33840: PPUSH
33841: LD_VAR 0 1
33845: PPUSH
33846: CALL_OW 292
33850: ST_TO_ADDR
// end ;
33851: LD_VAR 0 2
33855: RET
// export function ReverseDir ( unit ) ; begin
33856: LD_INT 0
33858: PPUSH
// if not unit then
33859: LD_VAR 0 1
33863: NOT
33864: IFFALSE 33868
// exit ;
33866: GO 33891
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33868: LD_ADDR_VAR 0 2
33872: PUSH
33873: LD_VAR 0 1
33877: PPUSH
33878: CALL_OW 254
33882: PUSH
33883: LD_INT 3
33885: PLUS
33886: PUSH
33887: LD_INT 6
33889: MOD
33890: ST_TO_ADDR
// end ;
33891: LD_VAR 0 2
33895: RET
// export function ReverseArray ( array ) ; var i ; begin
33896: LD_INT 0
33898: PPUSH
33899: PPUSH
// if not array then
33900: LD_VAR 0 1
33904: NOT
33905: IFFALSE 33909
// exit ;
33907: GO 33964
// result := [ ] ;
33909: LD_ADDR_VAR 0 2
33913: PUSH
33914: EMPTY
33915: ST_TO_ADDR
// for i := array downto 1 do
33916: LD_ADDR_VAR 0 3
33920: PUSH
33921: DOUBLE
33922: LD_VAR 0 1
33926: INC
33927: ST_TO_ADDR
33928: LD_INT 1
33930: PUSH
33931: FOR_DOWNTO
33932: IFFALSE 33962
// result := Join ( result , array [ i ] ) ;
33934: LD_ADDR_VAR 0 2
33938: PUSH
33939: LD_VAR 0 2
33943: PPUSH
33944: LD_VAR 0 1
33948: PUSH
33949: LD_VAR 0 3
33953: ARRAY
33954: PPUSH
33955: CALL 38580 0 2
33959: ST_TO_ADDR
33960: GO 33931
33962: POP
33963: POP
// end ;
33964: LD_VAR 0 2
33968: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33969: LD_INT 0
33971: PPUSH
33972: PPUSH
33973: PPUSH
33974: PPUSH
33975: PPUSH
33976: PPUSH
// if not unit or not hexes then
33977: LD_VAR 0 1
33981: NOT
33982: PUSH
33983: LD_VAR 0 2
33987: NOT
33988: OR
33989: IFFALSE 33993
// exit ;
33991: GO 34116
// dist := 9999 ;
33993: LD_ADDR_VAR 0 5
33997: PUSH
33998: LD_INT 9999
34000: ST_TO_ADDR
// for i = 1 to hexes do
34001: LD_ADDR_VAR 0 4
34005: PUSH
34006: DOUBLE
34007: LD_INT 1
34009: DEC
34010: ST_TO_ADDR
34011: LD_VAR 0 2
34015: PUSH
34016: FOR_TO
34017: IFFALSE 34104
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34019: LD_ADDR_VAR 0 6
34023: PUSH
34024: LD_VAR 0 1
34028: PPUSH
34029: LD_VAR 0 2
34033: PUSH
34034: LD_VAR 0 4
34038: ARRAY
34039: PUSH
34040: LD_INT 1
34042: ARRAY
34043: PPUSH
34044: LD_VAR 0 2
34048: PUSH
34049: LD_VAR 0 4
34053: ARRAY
34054: PUSH
34055: LD_INT 2
34057: ARRAY
34058: PPUSH
34059: CALL_OW 297
34063: ST_TO_ADDR
// if tdist < dist then
34064: LD_VAR 0 6
34068: PUSH
34069: LD_VAR 0 5
34073: LESS
34074: IFFALSE 34102
// begin hex := hexes [ i ] ;
34076: LD_ADDR_VAR 0 8
34080: PUSH
34081: LD_VAR 0 2
34085: PUSH
34086: LD_VAR 0 4
34090: ARRAY
34091: ST_TO_ADDR
// dist := tdist ;
34092: LD_ADDR_VAR 0 5
34096: PUSH
34097: LD_VAR 0 6
34101: ST_TO_ADDR
// end ; end ;
34102: GO 34016
34104: POP
34105: POP
// result := hex ;
34106: LD_ADDR_VAR 0 3
34110: PUSH
34111: LD_VAR 0 8
34115: ST_TO_ADDR
// end ;
34116: LD_VAR 0 3
34120: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34121: LD_INT 0
34123: PPUSH
34124: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34125: LD_VAR 0 1
34129: NOT
34130: PUSH
34131: LD_VAR 0 1
34135: PUSH
34136: LD_INT 21
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 23
34148: PUSH
34149: LD_INT 2
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PPUSH
34160: CALL_OW 69
34164: IN
34165: NOT
34166: OR
34167: IFFALSE 34171
// exit ;
34169: GO 34218
// for i = 1 to 3 do
34171: LD_ADDR_VAR 0 3
34175: PUSH
34176: DOUBLE
34177: LD_INT 1
34179: DEC
34180: ST_TO_ADDR
34181: LD_INT 3
34183: PUSH
34184: FOR_TO
34185: IFFALSE 34216
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34187: LD_VAR 0 1
34191: PPUSH
34192: CALL_OW 250
34196: PPUSH
34197: LD_VAR 0 1
34201: PPUSH
34202: CALL_OW 251
34206: PPUSH
34207: LD_INT 1
34209: PPUSH
34210: CALL_OW 453
34214: GO 34184
34216: POP
34217: POP
// end ;
34218: LD_VAR 0 2
34222: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34223: LD_INT 0
34225: PPUSH
34226: PPUSH
34227: PPUSH
34228: PPUSH
34229: PPUSH
34230: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34231: LD_VAR 0 1
34235: NOT
34236: PUSH
34237: LD_VAR 0 2
34241: NOT
34242: OR
34243: PUSH
34244: LD_VAR 0 1
34248: PPUSH
34249: CALL_OW 314
34253: OR
34254: IFFALSE 34258
// exit ;
34256: GO 34699
// x := GetX ( enemy_unit ) ;
34258: LD_ADDR_VAR 0 7
34262: PUSH
34263: LD_VAR 0 2
34267: PPUSH
34268: CALL_OW 250
34272: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34273: LD_ADDR_VAR 0 8
34277: PUSH
34278: LD_VAR 0 2
34282: PPUSH
34283: CALL_OW 251
34287: ST_TO_ADDR
// if not x or not y then
34288: LD_VAR 0 7
34292: NOT
34293: PUSH
34294: LD_VAR 0 8
34298: NOT
34299: OR
34300: IFFALSE 34304
// exit ;
34302: GO 34699
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34304: LD_ADDR_VAR 0 6
34308: PUSH
34309: LD_VAR 0 7
34313: PPUSH
34314: LD_INT 0
34316: PPUSH
34317: LD_INT 4
34319: PPUSH
34320: CALL_OW 272
34324: PUSH
34325: LD_VAR 0 8
34329: PPUSH
34330: LD_INT 0
34332: PPUSH
34333: LD_INT 4
34335: PPUSH
34336: CALL_OW 273
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_VAR 0 7
34349: PPUSH
34350: LD_INT 1
34352: PPUSH
34353: LD_INT 4
34355: PPUSH
34356: CALL_OW 272
34360: PUSH
34361: LD_VAR 0 8
34365: PPUSH
34366: LD_INT 1
34368: PPUSH
34369: LD_INT 4
34371: PPUSH
34372: CALL_OW 273
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_VAR 0 7
34385: PPUSH
34386: LD_INT 2
34388: PPUSH
34389: LD_INT 4
34391: PPUSH
34392: CALL_OW 272
34396: PUSH
34397: LD_VAR 0 8
34401: PPUSH
34402: LD_INT 2
34404: PPUSH
34405: LD_INT 4
34407: PPUSH
34408: CALL_OW 273
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_VAR 0 7
34421: PPUSH
34422: LD_INT 3
34424: PPUSH
34425: LD_INT 4
34427: PPUSH
34428: CALL_OW 272
34432: PUSH
34433: LD_VAR 0 8
34437: PPUSH
34438: LD_INT 3
34440: PPUSH
34441: LD_INT 4
34443: PPUSH
34444: CALL_OW 273
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_VAR 0 7
34457: PPUSH
34458: LD_INT 4
34460: PPUSH
34461: LD_INT 4
34463: PPUSH
34464: CALL_OW 272
34468: PUSH
34469: LD_VAR 0 8
34473: PPUSH
34474: LD_INT 4
34476: PPUSH
34477: LD_INT 4
34479: PPUSH
34480: CALL_OW 273
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_VAR 0 7
34493: PPUSH
34494: LD_INT 5
34496: PPUSH
34497: LD_INT 4
34499: PPUSH
34500: CALL_OW 272
34504: PUSH
34505: LD_VAR 0 8
34509: PPUSH
34510: LD_INT 5
34512: PPUSH
34513: LD_INT 4
34515: PPUSH
34516: CALL_OW 273
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: ST_TO_ADDR
// for i = tmp downto 1 do
34533: LD_ADDR_VAR 0 4
34537: PUSH
34538: DOUBLE
34539: LD_VAR 0 6
34543: INC
34544: ST_TO_ADDR
34545: LD_INT 1
34547: PUSH
34548: FOR_DOWNTO
34549: IFFALSE 34650
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34551: LD_VAR 0 6
34555: PUSH
34556: LD_VAR 0 4
34560: ARRAY
34561: PUSH
34562: LD_INT 1
34564: ARRAY
34565: PPUSH
34566: LD_VAR 0 6
34570: PUSH
34571: LD_VAR 0 4
34575: ARRAY
34576: PUSH
34577: LD_INT 2
34579: ARRAY
34580: PPUSH
34581: CALL_OW 488
34585: NOT
34586: PUSH
34587: LD_VAR 0 6
34591: PUSH
34592: LD_VAR 0 4
34596: ARRAY
34597: PUSH
34598: LD_INT 1
34600: ARRAY
34601: PPUSH
34602: LD_VAR 0 6
34606: PUSH
34607: LD_VAR 0 4
34611: ARRAY
34612: PUSH
34613: LD_INT 2
34615: ARRAY
34616: PPUSH
34617: CALL_OW 428
34621: PUSH
34622: LD_INT 0
34624: NONEQUAL
34625: OR
34626: IFFALSE 34648
// tmp := Delete ( tmp , i ) ;
34628: LD_ADDR_VAR 0 6
34632: PUSH
34633: LD_VAR 0 6
34637: PPUSH
34638: LD_VAR 0 4
34642: PPUSH
34643: CALL_OW 3
34647: ST_TO_ADDR
34648: GO 34548
34650: POP
34651: POP
// j := GetClosestHex ( unit , tmp ) ;
34652: LD_ADDR_VAR 0 5
34656: PUSH
34657: LD_VAR 0 1
34661: PPUSH
34662: LD_VAR 0 6
34666: PPUSH
34667: CALL 33969 0 2
34671: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34672: LD_VAR 0 1
34676: PPUSH
34677: LD_VAR 0 5
34681: PUSH
34682: LD_INT 1
34684: ARRAY
34685: PPUSH
34686: LD_VAR 0 5
34690: PUSH
34691: LD_INT 2
34693: ARRAY
34694: PPUSH
34695: CALL_OW 111
// end ;
34699: LD_VAR 0 3
34703: RET
// export function PrepareApemanSoldier ( ) ; begin
34704: LD_INT 0
34706: PPUSH
// uc_nation := 0 ;
34707: LD_ADDR_OWVAR 21
34711: PUSH
34712: LD_INT 0
34714: ST_TO_ADDR
// hc_sex := sex_male ;
34715: LD_ADDR_OWVAR 27
34719: PUSH
34720: LD_INT 1
34722: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34723: LD_ADDR_OWVAR 28
34727: PUSH
34728: LD_INT 15
34730: ST_TO_ADDR
// hc_gallery :=  ;
34731: LD_ADDR_OWVAR 33
34735: PUSH
34736: LD_STRING 
34738: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34739: LD_ADDR_OWVAR 31
34743: PUSH
34744: LD_INT 0
34746: PPUSH
34747: LD_INT 3
34749: PPUSH
34750: CALL_OW 12
34754: PUSH
34755: LD_INT 0
34757: PPUSH
34758: LD_INT 3
34760: PPUSH
34761: CALL_OW 12
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: LD_INT 0
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: ST_TO_ADDR
// end ;
34778: LD_VAR 0 1
34782: RET
// export function PrepareApemanEngineer ( ) ; begin
34783: LD_INT 0
34785: PPUSH
// uc_nation := 0 ;
34786: LD_ADDR_OWVAR 21
34790: PUSH
34791: LD_INT 0
34793: ST_TO_ADDR
// hc_sex := sex_male ;
34794: LD_ADDR_OWVAR 27
34798: PUSH
34799: LD_INT 1
34801: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34802: LD_ADDR_OWVAR 28
34806: PUSH
34807: LD_INT 16
34809: ST_TO_ADDR
// hc_gallery :=  ;
34810: LD_ADDR_OWVAR 33
34814: PUSH
34815: LD_STRING 
34817: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34818: LD_ADDR_OWVAR 31
34822: PUSH
34823: LD_INT 0
34825: PPUSH
34826: LD_INT 3
34828: PPUSH
34829: CALL_OW 12
34833: PUSH
34834: LD_INT 0
34836: PPUSH
34837: LD_INT 3
34839: PPUSH
34840: CALL_OW 12
34844: PUSH
34845: LD_INT 0
34847: PUSH
34848: LD_INT 0
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: ST_TO_ADDR
// end ;
34857: LD_VAR 0 1
34861: RET
// export function PrepareApeman ( agressivity ) ; begin
34862: LD_INT 0
34864: PPUSH
// uc_side := 0 ;
34865: LD_ADDR_OWVAR 20
34869: PUSH
34870: LD_INT 0
34872: ST_TO_ADDR
// uc_nation := 0 ;
34873: LD_ADDR_OWVAR 21
34877: PUSH
34878: LD_INT 0
34880: ST_TO_ADDR
// hc_sex := sex_male ;
34881: LD_ADDR_OWVAR 27
34885: PUSH
34886: LD_INT 1
34888: ST_TO_ADDR
// hc_class := class_apeman ;
34889: LD_ADDR_OWVAR 28
34893: PUSH
34894: LD_INT 12
34896: ST_TO_ADDR
// hc_gallery :=  ;
34897: LD_ADDR_OWVAR 33
34901: PUSH
34902: LD_STRING 
34904: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34905: LD_ADDR_OWVAR 35
34909: PUSH
34910: LD_VAR 0 1
34914: NEG
34915: PPUSH
34916: LD_VAR 0 1
34920: PPUSH
34921: CALL_OW 12
34925: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34926: LD_ADDR_OWVAR 31
34930: PUSH
34931: LD_INT 0
34933: PPUSH
34934: LD_INT 3
34936: PPUSH
34937: CALL_OW 12
34941: PUSH
34942: LD_INT 0
34944: PPUSH
34945: LD_INT 3
34947: PPUSH
34948: CALL_OW 12
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: LD_INT 0
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: ST_TO_ADDR
// end ;
34965: LD_VAR 0 2
34969: RET
// export function PrepareTiger ( agressivity ) ; begin
34970: LD_INT 0
34972: PPUSH
// uc_side := 0 ;
34973: LD_ADDR_OWVAR 20
34977: PUSH
34978: LD_INT 0
34980: ST_TO_ADDR
// uc_nation := 0 ;
34981: LD_ADDR_OWVAR 21
34985: PUSH
34986: LD_INT 0
34988: ST_TO_ADDR
// hc_class := class_tiger ;
34989: LD_ADDR_OWVAR 28
34993: PUSH
34994: LD_INT 14
34996: ST_TO_ADDR
// hc_gallery :=  ;
34997: LD_ADDR_OWVAR 33
35001: PUSH
35002: LD_STRING 
35004: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35005: LD_ADDR_OWVAR 35
35009: PUSH
35010: LD_VAR 0 1
35014: NEG
35015: PPUSH
35016: LD_VAR 0 1
35020: PPUSH
35021: CALL_OW 12
35025: ST_TO_ADDR
// end ;
35026: LD_VAR 0 2
35030: RET
// export function PrepareEnchidna ( ) ; begin
35031: LD_INT 0
35033: PPUSH
// uc_side := 0 ;
35034: LD_ADDR_OWVAR 20
35038: PUSH
35039: LD_INT 0
35041: ST_TO_ADDR
// uc_nation := 0 ;
35042: LD_ADDR_OWVAR 21
35046: PUSH
35047: LD_INT 0
35049: ST_TO_ADDR
// hc_class := class_baggie ;
35050: LD_ADDR_OWVAR 28
35054: PUSH
35055: LD_INT 13
35057: ST_TO_ADDR
// hc_gallery :=  ;
35058: LD_ADDR_OWVAR 33
35062: PUSH
35063: LD_STRING 
35065: ST_TO_ADDR
// end ;
35066: LD_VAR 0 1
35070: RET
// export function PrepareFrog ( ) ; begin
35071: LD_INT 0
35073: PPUSH
// uc_side := 0 ;
35074: LD_ADDR_OWVAR 20
35078: PUSH
35079: LD_INT 0
35081: ST_TO_ADDR
// uc_nation := 0 ;
35082: LD_ADDR_OWVAR 21
35086: PUSH
35087: LD_INT 0
35089: ST_TO_ADDR
// hc_class := class_frog ;
35090: LD_ADDR_OWVAR 28
35094: PUSH
35095: LD_INT 19
35097: ST_TO_ADDR
// hc_gallery :=  ;
35098: LD_ADDR_OWVAR 33
35102: PUSH
35103: LD_STRING 
35105: ST_TO_ADDR
// end ;
35106: LD_VAR 0 1
35110: RET
// export function PrepareFish ( ) ; begin
35111: LD_INT 0
35113: PPUSH
// uc_side := 0 ;
35114: LD_ADDR_OWVAR 20
35118: PUSH
35119: LD_INT 0
35121: ST_TO_ADDR
// uc_nation := 0 ;
35122: LD_ADDR_OWVAR 21
35126: PUSH
35127: LD_INT 0
35129: ST_TO_ADDR
// hc_class := class_fish ;
35130: LD_ADDR_OWVAR 28
35134: PUSH
35135: LD_INT 20
35137: ST_TO_ADDR
// hc_gallery :=  ;
35138: LD_ADDR_OWVAR 33
35142: PUSH
35143: LD_STRING 
35145: ST_TO_ADDR
// end ;
35146: LD_VAR 0 1
35150: RET
// export function PrepareBird ( ) ; begin
35151: LD_INT 0
35153: PPUSH
// uc_side := 0 ;
35154: LD_ADDR_OWVAR 20
35158: PUSH
35159: LD_INT 0
35161: ST_TO_ADDR
// uc_nation := 0 ;
35162: LD_ADDR_OWVAR 21
35166: PUSH
35167: LD_INT 0
35169: ST_TO_ADDR
// hc_class := class_phororhacos ;
35170: LD_ADDR_OWVAR 28
35174: PUSH
35175: LD_INT 18
35177: ST_TO_ADDR
// hc_gallery :=  ;
35178: LD_ADDR_OWVAR 33
35182: PUSH
35183: LD_STRING 
35185: ST_TO_ADDR
// end ;
35186: LD_VAR 0 1
35190: RET
// export function PrepareHorse ( ) ; begin
35191: LD_INT 0
35193: PPUSH
// uc_side := 0 ;
35194: LD_ADDR_OWVAR 20
35198: PUSH
35199: LD_INT 0
35201: ST_TO_ADDR
// uc_nation := 0 ;
35202: LD_ADDR_OWVAR 21
35206: PUSH
35207: LD_INT 0
35209: ST_TO_ADDR
// hc_class := class_horse ;
35210: LD_ADDR_OWVAR 28
35214: PUSH
35215: LD_INT 21
35217: ST_TO_ADDR
// hc_gallery :=  ;
35218: LD_ADDR_OWVAR 33
35222: PUSH
35223: LD_STRING 
35225: ST_TO_ADDR
// end ;
35226: LD_VAR 0 1
35230: RET
// export function PrepareMastodont ( ) ; begin
35231: LD_INT 0
35233: PPUSH
// uc_side := 0 ;
35234: LD_ADDR_OWVAR 20
35238: PUSH
35239: LD_INT 0
35241: ST_TO_ADDR
// uc_nation := 0 ;
35242: LD_ADDR_OWVAR 21
35246: PUSH
35247: LD_INT 0
35249: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35250: LD_ADDR_OWVAR 37
35254: PUSH
35255: LD_INT 31
35257: ST_TO_ADDR
// vc_control := control_rider ;
35258: LD_ADDR_OWVAR 38
35262: PUSH
35263: LD_INT 4
35265: ST_TO_ADDR
// end ;
35266: LD_VAR 0 1
35270: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35271: LD_INT 0
35273: PPUSH
35274: PPUSH
35275: PPUSH
// uc_side = 0 ;
35276: LD_ADDR_OWVAR 20
35280: PUSH
35281: LD_INT 0
35283: ST_TO_ADDR
// uc_nation = 0 ;
35284: LD_ADDR_OWVAR 21
35288: PUSH
35289: LD_INT 0
35291: ST_TO_ADDR
// InitHc_All ( ) ;
35292: CALL_OW 584
// InitVc ;
35296: CALL_OW 20
// if mastodonts then
35300: LD_VAR 0 6
35304: IFFALSE 35371
// for i = 1 to mastodonts do
35306: LD_ADDR_VAR 0 11
35310: PUSH
35311: DOUBLE
35312: LD_INT 1
35314: DEC
35315: ST_TO_ADDR
35316: LD_VAR 0 6
35320: PUSH
35321: FOR_TO
35322: IFFALSE 35369
// begin vc_chassis := 31 ;
35324: LD_ADDR_OWVAR 37
35328: PUSH
35329: LD_INT 31
35331: ST_TO_ADDR
// vc_control := control_rider ;
35332: LD_ADDR_OWVAR 38
35336: PUSH
35337: LD_INT 4
35339: ST_TO_ADDR
// animal := CreateVehicle ;
35340: LD_ADDR_VAR 0 12
35344: PUSH
35345: CALL_OW 45
35349: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35350: LD_VAR 0 12
35354: PPUSH
35355: LD_VAR 0 8
35359: PPUSH
35360: LD_INT 0
35362: PPUSH
35363: CALL 37497 0 3
// end ;
35367: GO 35321
35369: POP
35370: POP
// if horses then
35371: LD_VAR 0 5
35375: IFFALSE 35442
// for i = 1 to horses do
35377: LD_ADDR_VAR 0 11
35381: PUSH
35382: DOUBLE
35383: LD_INT 1
35385: DEC
35386: ST_TO_ADDR
35387: LD_VAR 0 5
35391: PUSH
35392: FOR_TO
35393: IFFALSE 35440
// begin hc_class := 21 ;
35395: LD_ADDR_OWVAR 28
35399: PUSH
35400: LD_INT 21
35402: ST_TO_ADDR
// hc_gallery :=  ;
35403: LD_ADDR_OWVAR 33
35407: PUSH
35408: LD_STRING 
35410: ST_TO_ADDR
// animal := CreateHuman ;
35411: LD_ADDR_VAR 0 12
35415: PUSH
35416: CALL_OW 44
35420: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35421: LD_VAR 0 12
35425: PPUSH
35426: LD_VAR 0 8
35430: PPUSH
35431: LD_INT 0
35433: PPUSH
35434: CALL 37497 0 3
// end ;
35438: GO 35392
35440: POP
35441: POP
// if birds then
35442: LD_VAR 0 1
35446: IFFALSE 35513
// for i = 1 to birds do
35448: LD_ADDR_VAR 0 11
35452: PUSH
35453: DOUBLE
35454: LD_INT 1
35456: DEC
35457: ST_TO_ADDR
35458: LD_VAR 0 1
35462: PUSH
35463: FOR_TO
35464: IFFALSE 35511
// begin hc_class = 18 ;
35466: LD_ADDR_OWVAR 28
35470: PUSH
35471: LD_INT 18
35473: ST_TO_ADDR
// hc_gallery =  ;
35474: LD_ADDR_OWVAR 33
35478: PUSH
35479: LD_STRING 
35481: ST_TO_ADDR
// animal := CreateHuman ;
35482: LD_ADDR_VAR 0 12
35486: PUSH
35487: CALL_OW 44
35491: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35492: LD_VAR 0 12
35496: PPUSH
35497: LD_VAR 0 8
35501: PPUSH
35502: LD_INT 0
35504: PPUSH
35505: CALL 37497 0 3
// end ;
35509: GO 35463
35511: POP
35512: POP
// if tigers then
35513: LD_VAR 0 2
35517: IFFALSE 35601
// for i = 1 to tigers do
35519: LD_ADDR_VAR 0 11
35523: PUSH
35524: DOUBLE
35525: LD_INT 1
35527: DEC
35528: ST_TO_ADDR
35529: LD_VAR 0 2
35533: PUSH
35534: FOR_TO
35535: IFFALSE 35599
// begin hc_class = class_tiger ;
35537: LD_ADDR_OWVAR 28
35541: PUSH
35542: LD_INT 14
35544: ST_TO_ADDR
// hc_gallery =  ;
35545: LD_ADDR_OWVAR 33
35549: PUSH
35550: LD_STRING 
35552: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35553: LD_ADDR_OWVAR 35
35557: PUSH
35558: LD_INT 7
35560: NEG
35561: PPUSH
35562: LD_INT 7
35564: PPUSH
35565: CALL_OW 12
35569: ST_TO_ADDR
// animal := CreateHuman ;
35570: LD_ADDR_VAR 0 12
35574: PUSH
35575: CALL_OW 44
35579: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35580: LD_VAR 0 12
35584: PPUSH
35585: LD_VAR 0 8
35589: PPUSH
35590: LD_INT 0
35592: PPUSH
35593: CALL 37497 0 3
// end ;
35597: GO 35534
35599: POP
35600: POP
// if apemans then
35601: LD_VAR 0 3
35605: IFFALSE 35728
// for i = 1 to apemans do
35607: LD_ADDR_VAR 0 11
35611: PUSH
35612: DOUBLE
35613: LD_INT 1
35615: DEC
35616: ST_TO_ADDR
35617: LD_VAR 0 3
35621: PUSH
35622: FOR_TO
35623: IFFALSE 35726
// begin hc_class = class_apeman ;
35625: LD_ADDR_OWVAR 28
35629: PUSH
35630: LD_INT 12
35632: ST_TO_ADDR
// hc_gallery =  ;
35633: LD_ADDR_OWVAR 33
35637: PUSH
35638: LD_STRING 
35640: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35641: LD_ADDR_OWVAR 35
35645: PUSH
35646: LD_INT 2
35648: NEG
35649: PPUSH
35650: LD_INT 2
35652: PPUSH
35653: CALL_OW 12
35657: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35658: LD_ADDR_OWVAR 31
35662: PUSH
35663: LD_INT 1
35665: PPUSH
35666: LD_INT 3
35668: PPUSH
35669: CALL_OW 12
35673: PUSH
35674: LD_INT 1
35676: PPUSH
35677: LD_INT 3
35679: PPUSH
35680: CALL_OW 12
35684: PUSH
35685: LD_INT 0
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: ST_TO_ADDR
// animal := CreateHuman ;
35697: LD_ADDR_VAR 0 12
35701: PUSH
35702: CALL_OW 44
35706: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35707: LD_VAR 0 12
35711: PPUSH
35712: LD_VAR 0 8
35716: PPUSH
35717: LD_INT 0
35719: PPUSH
35720: CALL 37497 0 3
// end ;
35724: GO 35622
35726: POP
35727: POP
// if enchidnas then
35728: LD_VAR 0 4
35732: IFFALSE 35799
// for i = 1 to enchidnas do
35734: LD_ADDR_VAR 0 11
35738: PUSH
35739: DOUBLE
35740: LD_INT 1
35742: DEC
35743: ST_TO_ADDR
35744: LD_VAR 0 4
35748: PUSH
35749: FOR_TO
35750: IFFALSE 35797
// begin hc_class = 13 ;
35752: LD_ADDR_OWVAR 28
35756: PUSH
35757: LD_INT 13
35759: ST_TO_ADDR
// hc_gallery =  ;
35760: LD_ADDR_OWVAR 33
35764: PUSH
35765: LD_STRING 
35767: ST_TO_ADDR
// animal := CreateHuman ;
35768: LD_ADDR_VAR 0 12
35772: PUSH
35773: CALL_OW 44
35777: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35778: LD_VAR 0 12
35782: PPUSH
35783: LD_VAR 0 8
35787: PPUSH
35788: LD_INT 0
35790: PPUSH
35791: CALL 37497 0 3
// end ;
35795: GO 35749
35797: POP
35798: POP
// if fishes then
35799: LD_VAR 0 7
35803: IFFALSE 35870
// for i = 1 to fishes do
35805: LD_ADDR_VAR 0 11
35809: PUSH
35810: DOUBLE
35811: LD_INT 1
35813: DEC
35814: ST_TO_ADDR
35815: LD_VAR 0 7
35819: PUSH
35820: FOR_TO
35821: IFFALSE 35868
// begin hc_class = 20 ;
35823: LD_ADDR_OWVAR 28
35827: PUSH
35828: LD_INT 20
35830: ST_TO_ADDR
// hc_gallery =  ;
35831: LD_ADDR_OWVAR 33
35835: PUSH
35836: LD_STRING 
35838: ST_TO_ADDR
// animal := CreateHuman ;
35839: LD_ADDR_VAR 0 12
35843: PUSH
35844: CALL_OW 44
35848: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35849: LD_VAR 0 12
35853: PPUSH
35854: LD_VAR 0 9
35858: PPUSH
35859: LD_INT 0
35861: PPUSH
35862: CALL 37497 0 3
// end ;
35866: GO 35820
35868: POP
35869: POP
// end ;
35870: LD_VAR 0 10
35874: RET
// export function WantHeal ( sci , unit ) ; begin
35875: LD_INT 0
35877: PPUSH
// if GetTaskList ( sci ) > 0 then
35878: LD_VAR 0 1
35882: PPUSH
35883: CALL_OW 437
35887: PUSH
35888: LD_INT 0
35890: GREATER
35891: IFFALSE 35961
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35893: LD_VAR 0 1
35897: PPUSH
35898: CALL_OW 437
35902: PUSH
35903: LD_INT 1
35905: ARRAY
35906: PUSH
35907: LD_INT 1
35909: ARRAY
35910: PUSH
35911: LD_STRING l
35913: EQUAL
35914: PUSH
35915: LD_VAR 0 1
35919: PPUSH
35920: CALL_OW 437
35924: PUSH
35925: LD_INT 1
35927: ARRAY
35928: PUSH
35929: LD_INT 4
35931: ARRAY
35932: PUSH
35933: LD_VAR 0 2
35937: EQUAL
35938: AND
35939: IFFALSE 35951
// result := true else
35941: LD_ADDR_VAR 0 3
35945: PUSH
35946: LD_INT 1
35948: ST_TO_ADDR
35949: GO 35959
// result := false ;
35951: LD_ADDR_VAR 0 3
35955: PUSH
35956: LD_INT 0
35958: ST_TO_ADDR
// end else
35959: GO 35969
// result := false ;
35961: LD_ADDR_VAR 0 3
35965: PUSH
35966: LD_INT 0
35968: ST_TO_ADDR
// end ;
35969: LD_VAR 0 3
35973: RET
// export function HealTarget ( sci ) ; begin
35974: LD_INT 0
35976: PPUSH
// if not sci then
35977: LD_VAR 0 1
35981: NOT
35982: IFFALSE 35986
// exit ;
35984: GO 36051
// result := 0 ;
35986: LD_ADDR_VAR 0 2
35990: PUSH
35991: LD_INT 0
35993: ST_TO_ADDR
// if GetTaskList ( sci ) then
35994: LD_VAR 0 1
35998: PPUSH
35999: CALL_OW 437
36003: IFFALSE 36051
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36005: LD_VAR 0 1
36009: PPUSH
36010: CALL_OW 437
36014: PUSH
36015: LD_INT 1
36017: ARRAY
36018: PUSH
36019: LD_INT 1
36021: ARRAY
36022: PUSH
36023: LD_STRING l
36025: EQUAL
36026: IFFALSE 36051
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36028: LD_ADDR_VAR 0 2
36032: PUSH
36033: LD_VAR 0 1
36037: PPUSH
36038: CALL_OW 437
36042: PUSH
36043: LD_INT 1
36045: ARRAY
36046: PUSH
36047: LD_INT 4
36049: ARRAY
36050: ST_TO_ADDR
// end ;
36051: LD_VAR 0 2
36055: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36056: LD_INT 0
36058: PPUSH
36059: PPUSH
36060: PPUSH
36061: PPUSH
// if not base_units then
36062: LD_VAR 0 1
36066: NOT
36067: IFFALSE 36071
// exit ;
36069: GO 36158
// result := false ;
36071: LD_ADDR_VAR 0 2
36075: PUSH
36076: LD_INT 0
36078: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36079: LD_ADDR_VAR 0 5
36083: PUSH
36084: LD_VAR 0 1
36088: PPUSH
36089: LD_INT 21
36091: PUSH
36092: LD_INT 3
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PPUSH
36099: CALL_OW 72
36103: ST_TO_ADDR
// if not tmp then
36104: LD_VAR 0 5
36108: NOT
36109: IFFALSE 36113
// exit ;
36111: GO 36158
// for i in tmp do
36113: LD_ADDR_VAR 0 3
36117: PUSH
36118: LD_VAR 0 5
36122: PUSH
36123: FOR_IN
36124: IFFALSE 36156
// begin result := EnemyInRange ( i , 22 ) ;
36126: LD_ADDR_VAR 0 2
36130: PUSH
36131: LD_VAR 0 3
36135: PPUSH
36136: LD_INT 22
36138: PPUSH
36139: CALL 33771 0 2
36143: ST_TO_ADDR
// if result then
36144: LD_VAR 0 2
36148: IFFALSE 36154
// exit ;
36150: POP
36151: POP
36152: GO 36158
// end ;
36154: GO 36123
36156: POP
36157: POP
// end ;
36158: LD_VAR 0 2
36162: RET
// export function FilterByTag ( units , tag ) ; begin
36163: LD_INT 0
36165: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36166: LD_ADDR_VAR 0 3
36170: PUSH
36171: LD_VAR 0 1
36175: PPUSH
36176: LD_INT 120
36178: PUSH
36179: LD_VAR 0 2
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PPUSH
36188: CALL_OW 72
36192: ST_TO_ADDR
// end ;
36193: LD_VAR 0 3
36197: RET
// export function IsDriver ( un ) ; begin
36198: LD_INT 0
36200: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36201: LD_ADDR_VAR 0 2
36205: PUSH
36206: LD_VAR 0 1
36210: PUSH
36211: LD_INT 55
36213: PUSH
36214: EMPTY
36215: LIST
36216: PPUSH
36217: CALL_OW 69
36221: IN
36222: ST_TO_ADDR
// end ;
36223: LD_VAR 0 2
36227: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36228: LD_INT 0
36230: PPUSH
36231: PPUSH
// list := [ ] ;
36232: LD_ADDR_VAR 0 5
36236: PUSH
36237: EMPTY
36238: ST_TO_ADDR
// case d of 0 :
36239: LD_VAR 0 3
36243: PUSH
36244: LD_INT 0
36246: DOUBLE
36247: EQUAL
36248: IFTRUE 36252
36250: GO 36385
36252: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36253: LD_ADDR_VAR 0 5
36257: PUSH
36258: LD_VAR 0 1
36262: PUSH
36263: LD_INT 4
36265: MINUS
36266: PUSH
36267: LD_VAR 0 2
36271: PUSH
36272: LD_INT 4
36274: MINUS
36275: PUSH
36276: LD_INT 2
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: LIST
36283: PUSH
36284: LD_VAR 0 1
36288: PUSH
36289: LD_INT 3
36291: MINUS
36292: PUSH
36293: LD_VAR 0 2
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: LIST
36305: PUSH
36306: LD_VAR 0 1
36310: PUSH
36311: LD_INT 4
36313: PLUS
36314: PUSH
36315: LD_VAR 0 2
36319: PUSH
36320: LD_INT 4
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: LIST
36327: PUSH
36328: LD_VAR 0 1
36332: PUSH
36333: LD_INT 3
36335: PLUS
36336: PUSH
36337: LD_VAR 0 2
36341: PUSH
36342: LD_INT 3
36344: PLUS
36345: PUSH
36346: LD_INT 5
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: LIST
36353: PUSH
36354: LD_VAR 0 1
36358: PUSH
36359: LD_VAR 0 2
36363: PUSH
36364: LD_INT 4
36366: PLUS
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: ST_TO_ADDR
// end ; 1 :
36383: GO 37083
36385: LD_INT 1
36387: DOUBLE
36388: EQUAL
36389: IFTRUE 36393
36391: GO 36526
36393: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36394: LD_ADDR_VAR 0 5
36398: PUSH
36399: LD_VAR 0 1
36403: PUSH
36404: LD_VAR 0 2
36408: PUSH
36409: LD_INT 4
36411: MINUS
36412: PUSH
36413: LD_INT 3
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: LIST
36420: PUSH
36421: LD_VAR 0 1
36425: PUSH
36426: LD_INT 3
36428: MINUS
36429: PUSH
36430: LD_VAR 0 2
36434: PUSH
36435: LD_INT 3
36437: MINUS
36438: PUSH
36439: LD_INT 2
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: LIST
36446: PUSH
36447: LD_VAR 0 1
36451: PUSH
36452: LD_INT 4
36454: MINUS
36455: PUSH
36456: LD_VAR 0 2
36460: PUSH
36461: LD_INT 1
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: LIST
36468: PUSH
36469: LD_VAR 0 1
36473: PUSH
36474: LD_VAR 0 2
36478: PUSH
36479: LD_INT 3
36481: PLUS
36482: PUSH
36483: LD_INT 0
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: LIST
36490: PUSH
36491: LD_VAR 0 1
36495: PUSH
36496: LD_INT 4
36498: PLUS
36499: PUSH
36500: LD_VAR 0 2
36504: PUSH
36505: LD_INT 4
36507: PLUS
36508: PUSH
36509: LD_INT 5
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: ST_TO_ADDR
// end ; 2 :
36524: GO 37083
36526: LD_INT 2
36528: DOUBLE
36529: EQUAL
36530: IFTRUE 36534
36532: GO 36663
36534: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36535: LD_ADDR_VAR 0 5
36539: PUSH
36540: LD_VAR 0 1
36544: PUSH
36545: LD_VAR 0 2
36549: PUSH
36550: LD_INT 3
36552: MINUS
36553: PUSH
36554: LD_INT 3
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: LIST
36561: PUSH
36562: LD_VAR 0 1
36566: PUSH
36567: LD_INT 4
36569: PLUS
36570: PUSH
36571: LD_VAR 0 2
36575: PUSH
36576: LD_INT 4
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: LIST
36583: PUSH
36584: LD_VAR 0 1
36588: PUSH
36589: LD_VAR 0 2
36593: PUSH
36594: LD_INT 4
36596: PLUS
36597: PUSH
36598: LD_INT 0
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: LIST
36605: PUSH
36606: LD_VAR 0 1
36610: PUSH
36611: LD_INT 3
36613: MINUS
36614: PUSH
36615: LD_VAR 0 2
36619: PUSH
36620: LD_INT 1
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: LIST
36627: PUSH
36628: LD_VAR 0 1
36632: PUSH
36633: LD_INT 4
36635: MINUS
36636: PUSH
36637: LD_VAR 0 2
36641: PUSH
36642: LD_INT 4
36644: MINUS
36645: PUSH
36646: LD_INT 2
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: LIST
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: ST_TO_ADDR
// end ; 3 :
36661: GO 37083
36663: LD_INT 3
36665: DOUBLE
36666: EQUAL
36667: IFTRUE 36671
36669: GO 36804
36671: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36672: LD_ADDR_VAR 0 5
36676: PUSH
36677: LD_VAR 0 1
36681: PUSH
36682: LD_INT 3
36684: PLUS
36685: PUSH
36686: LD_VAR 0 2
36690: PUSH
36691: LD_INT 4
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: LIST
36698: PUSH
36699: LD_VAR 0 1
36703: PUSH
36704: LD_INT 4
36706: PLUS
36707: PUSH
36708: LD_VAR 0 2
36712: PUSH
36713: LD_INT 4
36715: PLUS
36716: PUSH
36717: LD_INT 5
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: LIST
36724: PUSH
36725: LD_VAR 0 1
36729: PUSH
36730: LD_INT 4
36732: MINUS
36733: PUSH
36734: LD_VAR 0 2
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: LIST
36746: PUSH
36747: LD_VAR 0 1
36751: PUSH
36752: LD_VAR 0 2
36756: PUSH
36757: LD_INT 4
36759: MINUS
36760: PUSH
36761: LD_INT 3
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: LIST
36768: PUSH
36769: LD_VAR 0 1
36773: PUSH
36774: LD_INT 3
36776: MINUS
36777: PUSH
36778: LD_VAR 0 2
36782: PUSH
36783: LD_INT 3
36785: MINUS
36786: PUSH
36787: LD_INT 2
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: LIST
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: ST_TO_ADDR
// end ; 4 :
36802: GO 37083
36804: LD_INT 4
36806: DOUBLE
36807: EQUAL
36808: IFTRUE 36812
36810: GO 36945
36812: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36813: LD_ADDR_VAR 0 5
36817: PUSH
36818: LD_VAR 0 1
36822: PUSH
36823: LD_VAR 0 2
36827: PUSH
36828: LD_INT 4
36830: PLUS
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: LIST
36839: PUSH
36840: LD_VAR 0 1
36844: PUSH
36845: LD_INT 3
36847: PLUS
36848: PUSH
36849: LD_VAR 0 2
36853: PUSH
36854: LD_INT 3
36856: PLUS
36857: PUSH
36858: LD_INT 5
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: LIST
36865: PUSH
36866: LD_VAR 0 1
36870: PUSH
36871: LD_INT 4
36873: PLUS
36874: PUSH
36875: LD_VAR 0 2
36879: PUSH
36880: LD_INT 4
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: LIST
36887: PUSH
36888: LD_VAR 0 1
36892: PUSH
36893: LD_VAR 0 2
36897: PUSH
36898: LD_INT 3
36900: MINUS
36901: PUSH
36902: LD_INT 3
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: LIST
36909: PUSH
36910: LD_VAR 0 1
36914: PUSH
36915: LD_INT 4
36917: MINUS
36918: PUSH
36919: LD_VAR 0 2
36923: PUSH
36924: LD_INT 4
36926: MINUS
36927: PUSH
36928: LD_INT 2
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: LIST
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: ST_TO_ADDR
// end ; 5 :
36943: GO 37083
36945: LD_INT 5
36947: DOUBLE
36948: EQUAL
36949: IFTRUE 36953
36951: GO 37082
36953: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36954: LD_ADDR_VAR 0 5
36958: PUSH
36959: LD_VAR 0 1
36963: PUSH
36964: LD_INT 4
36966: MINUS
36967: PUSH
36968: LD_VAR 0 2
36972: PUSH
36973: LD_INT 1
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: LIST
36980: PUSH
36981: LD_VAR 0 1
36985: PUSH
36986: LD_VAR 0 2
36990: PUSH
36991: LD_INT 4
36993: MINUS
36994: PUSH
36995: LD_INT 3
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: LIST
37002: PUSH
37003: LD_VAR 0 1
37007: PUSH
37008: LD_INT 4
37010: PLUS
37011: PUSH
37012: LD_VAR 0 2
37016: PUSH
37017: LD_INT 4
37019: PLUS
37020: PUSH
37021: LD_INT 5
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: LIST
37028: PUSH
37029: LD_VAR 0 1
37033: PUSH
37034: LD_INT 3
37036: PLUS
37037: PUSH
37038: LD_VAR 0 2
37042: PUSH
37043: LD_INT 4
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: LIST
37050: PUSH
37051: LD_VAR 0 1
37055: PUSH
37056: LD_VAR 0 2
37060: PUSH
37061: LD_INT 3
37063: PLUS
37064: PUSH
37065: LD_INT 0
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: LIST
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: ST_TO_ADDR
// end ; end ;
37080: GO 37083
37082: POP
// result := list ;
37083: LD_ADDR_VAR 0 4
37087: PUSH
37088: LD_VAR 0 5
37092: ST_TO_ADDR
// end ;
37093: LD_VAR 0 4
37097: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37098: LD_INT 0
37100: PPUSH
37101: PPUSH
37102: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37103: LD_VAR 0 1
37107: NOT
37108: PUSH
37109: LD_VAR 0 2
37113: PUSH
37114: LD_INT 1
37116: PUSH
37117: LD_INT 2
37119: PUSH
37120: LD_INT 3
37122: PUSH
37123: LD_INT 4
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: IN
37132: NOT
37133: OR
37134: IFFALSE 37138
// exit ;
37136: GO 37221
// tmp := [ ] ;
37138: LD_ADDR_VAR 0 5
37142: PUSH
37143: EMPTY
37144: ST_TO_ADDR
// for i in units do
37145: LD_ADDR_VAR 0 4
37149: PUSH
37150: LD_VAR 0 1
37154: PUSH
37155: FOR_IN
37156: IFFALSE 37190
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37158: LD_ADDR_VAR 0 5
37162: PUSH
37163: LD_VAR 0 5
37167: PPUSH
37168: LD_VAR 0 4
37172: PPUSH
37173: LD_VAR 0 2
37177: PPUSH
37178: CALL_OW 259
37182: PPUSH
37183: CALL 38580 0 2
37187: ST_TO_ADDR
37188: GO 37155
37190: POP
37191: POP
// if not tmp then
37192: LD_VAR 0 5
37196: NOT
37197: IFFALSE 37201
// exit ;
37199: GO 37221
// result := SortListByListDesc ( units , tmp ) ;
37201: LD_ADDR_VAR 0 3
37205: PUSH
37206: LD_VAR 0 1
37210: PPUSH
37211: LD_VAR 0 5
37215: PPUSH
37216: CALL_OW 77
37220: ST_TO_ADDR
// end ;
37221: LD_VAR 0 3
37225: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37226: LD_INT 0
37228: PPUSH
37229: PPUSH
37230: PPUSH
// result := false ;
37231: LD_ADDR_VAR 0 3
37235: PUSH
37236: LD_INT 0
37238: ST_TO_ADDR
// x := GetX ( building ) ;
37239: LD_ADDR_VAR 0 4
37243: PUSH
37244: LD_VAR 0 2
37248: PPUSH
37249: CALL_OW 250
37253: ST_TO_ADDR
// y := GetY ( building ) ;
37254: LD_ADDR_VAR 0 5
37258: PUSH
37259: LD_VAR 0 2
37263: PPUSH
37264: CALL_OW 251
37268: ST_TO_ADDR
// if not building or not x or not y then
37269: LD_VAR 0 2
37273: NOT
37274: PUSH
37275: LD_VAR 0 4
37279: NOT
37280: OR
37281: PUSH
37282: LD_VAR 0 5
37286: NOT
37287: OR
37288: IFFALSE 37292
// exit ;
37290: GO 37384
// if GetTaskList ( unit ) then
37292: LD_VAR 0 1
37296: PPUSH
37297: CALL_OW 437
37301: IFFALSE 37384
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37303: LD_STRING e
37305: PUSH
37306: LD_VAR 0 1
37310: PPUSH
37311: CALL_OW 437
37315: PUSH
37316: LD_INT 1
37318: ARRAY
37319: PUSH
37320: LD_INT 1
37322: ARRAY
37323: EQUAL
37324: PUSH
37325: LD_VAR 0 4
37329: PUSH
37330: LD_VAR 0 1
37334: PPUSH
37335: CALL_OW 437
37339: PUSH
37340: LD_INT 1
37342: ARRAY
37343: PUSH
37344: LD_INT 2
37346: ARRAY
37347: EQUAL
37348: AND
37349: PUSH
37350: LD_VAR 0 5
37354: PUSH
37355: LD_VAR 0 1
37359: PPUSH
37360: CALL_OW 437
37364: PUSH
37365: LD_INT 1
37367: ARRAY
37368: PUSH
37369: LD_INT 3
37371: ARRAY
37372: EQUAL
37373: AND
37374: IFFALSE 37384
// result := true end ;
37376: LD_ADDR_VAR 0 3
37380: PUSH
37381: LD_INT 1
37383: ST_TO_ADDR
// end ;
37384: LD_VAR 0 3
37388: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37389: LD_INT 0
37391: PPUSH
// result := false ;
37392: LD_ADDR_VAR 0 4
37396: PUSH
37397: LD_INT 0
37399: ST_TO_ADDR
// if GetTaskList ( unit ) then
37400: LD_VAR 0 1
37404: PPUSH
37405: CALL_OW 437
37409: IFFALSE 37492
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37411: LD_STRING M
37413: PUSH
37414: LD_VAR 0 1
37418: PPUSH
37419: CALL_OW 437
37423: PUSH
37424: LD_INT 1
37426: ARRAY
37427: PUSH
37428: LD_INT 1
37430: ARRAY
37431: EQUAL
37432: PUSH
37433: LD_VAR 0 2
37437: PUSH
37438: LD_VAR 0 1
37442: PPUSH
37443: CALL_OW 437
37447: PUSH
37448: LD_INT 1
37450: ARRAY
37451: PUSH
37452: LD_INT 2
37454: ARRAY
37455: EQUAL
37456: AND
37457: PUSH
37458: LD_VAR 0 3
37462: PUSH
37463: LD_VAR 0 1
37467: PPUSH
37468: CALL_OW 437
37472: PUSH
37473: LD_INT 1
37475: ARRAY
37476: PUSH
37477: LD_INT 3
37479: ARRAY
37480: EQUAL
37481: AND
37482: IFFALSE 37492
// result := true ;
37484: LD_ADDR_VAR 0 4
37488: PUSH
37489: LD_INT 1
37491: ST_TO_ADDR
// end ; end ;
37492: LD_VAR 0 4
37496: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37497: LD_INT 0
37499: PPUSH
37500: PPUSH
37501: PPUSH
37502: PPUSH
// if not unit or not area then
37503: LD_VAR 0 1
37507: NOT
37508: PUSH
37509: LD_VAR 0 2
37513: NOT
37514: OR
37515: IFFALSE 37519
// exit ;
37517: GO 37683
// tmp := AreaToList ( area , i ) ;
37519: LD_ADDR_VAR 0 6
37523: PUSH
37524: LD_VAR 0 2
37528: PPUSH
37529: LD_VAR 0 5
37533: PPUSH
37534: CALL_OW 517
37538: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37539: LD_ADDR_VAR 0 5
37543: PUSH
37544: DOUBLE
37545: LD_INT 1
37547: DEC
37548: ST_TO_ADDR
37549: LD_VAR 0 6
37553: PUSH
37554: LD_INT 1
37556: ARRAY
37557: PUSH
37558: FOR_TO
37559: IFFALSE 37681
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37561: LD_ADDR_VAR 0 7
37565: PUSH
37566: LD_VAR 0 6
37570: PUSH
37571: LD_INT 1
37573: ARRAY
37574: PUSH
37575: LD_VAR 0 5
37579: ARRAY
37580: PUSH
37581: LD_VAR 0 6
37585: PUSH
37586: LD_INT 2
37588: ARRAY
37589: PUSH
37590: LD_VAR 0 5
37594: ARRAY
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
37600: LD_VAR 0 7
37604: PUSH
37605: LD_INT 1
37607: ARRAY
37608: PPUSH
37609: LD_VAR 0 7
37613: PUSH
37614: LD_INT 2
37616: ARRAY
37617: PPUSH
37618: CALL_OW 428
37622: PUSH
37623: LD_INT 0
37625: EQUAL
37626: IFFALSE 37679
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37628: LD_VAR 0 1
37632: PPUSH
37633: LD_VAR 0 7
37637: PUSH
37638: LD_INT 1
37640: ARRAY
37641: PPUSH
37642: LD_VAR 0 7
37646: PUSH
37647: LD_INT 2
37649: ARRAY
37650: PPUSH
37651: LD_VAR 0 3
37655: PPUSH
37656: CALL_OW 48
// result := IsPlaced ( unit ) ;
37660: LD_ADDR_VAR 0 4
37664: PUSH
37665: LD_VAR 0 1
37669: PPUSH
37670: CALL_OW 305
37674: ST_TO_ADDR
// exit ;
37675: POP
37676: POP
37677: GO 37683
// end ; end ;
37679: GO 37558
37681: POP
37682: POP
// end ;
37683: LD_VAR 0 4
37687: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37688: LD_INT 0
37690: PPUSH
37691: PPUSH
37692: PPUSH
// if not side or side > 8 then
37693: LD_VAR 0 1
37697: NOT
37698: PUSH
37699: LD_VAR 0 1
37703: PUSH
37704: LD_INT 8
37706: GREATER
37707: OR
37708: IFFALSE 37712
// exit ;
37710: GO 37899
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37712: LD_ADDR_VAR 0 4
37716: PUSH
37717: LD_INT 22
37719: PUSH
37720: LD_VAR 0 1
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 21
37731: PUSH
37732: LD_INT 3
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PPUSH
37743: CALL_OW 69
37747: ST_TO_ADDR
// if not tmp then
37748: LD_VAR 0 4
37752: NOT
37753: IFFALSE 37757
// exit ;
37755: GO 37899
// enable_addtolog := true ;
37757: LD_ADDR_OWVAR 81
37761: PUSH
37762: LD_INT 1
37764: ST_TO_ADDR
// AddToLog ( [ ) ;
37765: LD_STRING [
37767: PPUSH
37768: CALL_OW 561
// for i in tmp do
37772: LD_ADDR_VAR 0 3
37776: PUSH
37777: LD_VAR 0 4
37781: PUSH
37782: FOR_IN
37783: IFFALSE 37890
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37785: LD_STRING [
37787: PUSH
37788: LD_VAR 0 3
37792: PPUSH
37793: CALL_OW 266
37797: STR
37798: PUSH
37799: LD_STRING , 
37801: STR
37802: PUSH
37803: LD_VAR 0 3
37807: PPUSH
37808: CALL_OW 250
37812: STR
37813: PUSH
37814: LD_STRING , 
37816: STR
37817: PUSH
37818: LD_VAR 0 3
37822: PPUSH
37823: CALL_OW 251
37827: STR
37828: PUSH
37829: LD_STRING , 
37831: STR
37832: PUSH
37833: LD_VAR 0 3
37837: PPUSH
37838: CALL_OW 254
37842: STR
37843: PUSH
37844: LD_STRING , 
37846: STR
37847: PUSH
37848: LD_VAR 0 3
37852: PPUSH
37853: LD_INT 1
37855: PPUSH
37856: CALL_OW 268
37860: STR
37861: PUSH
37862: LD_STRING , 
37864: STR
37865: PUSH
37866: LD_VAR 0 3
37870: PPUSH
37871: LD_INT 2
37873: PPUSH
37874: CALL_OW 268
37878: STR
37879: PUSH
37880: LD_STRING ],
37882: STR
37883: PPUSH
37884: CALL_OW 561
// end ;
37888: GO 37782
37890: POP
37891: POP
// AddToLog ( ]; ) ;
37892: LD_STRING ];
37894: PPUSH
37895: CALL_OW 561
// end ;
37899: LD_VAR 0 2
37903: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37904: LD_INT 0
37906: PPUSH
37907: PPUSH
37908: PPUSH
37909: PPUSH
37910: PPUSH
// if not area or not rate or not max then
37911: LD_VAR 0 1
37915: NOT
37916: PUSH
37917: LD_VAR 0 2
37921: NOT
37922: OR
37923: PUSH
37924: LD_VAR 0 4
37928: NOT
37929: OR
37930: IFFALSE 37934
// exit ;
37932: GO 38123
// while 1 do
37934: LD_INT 1
37936: IFFALSE 38123
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37938: LD_ADDR_VAR 0 9
37942: PUSH
37943: LD_VAR 0 1
37947: PPUSH
37948: LD_INT 1
37950: PPUSH
37951: CALL_OW 287
37955: PUSH
37956: LD_INT 10
37958: MUL
37959: ST_TO_ADDR
// r := rate / 10 ;
37960: LD_ADDR_VAR 0 7
37964: PUSH
37965: LD_VAR 0 2
37969: PUSH
37970: LD_INT 10
37972: DIVREAL
37973: ST_TO_ADDR
// time := 1 1$00 ;
37974: LD_ADDR_VAR 0 8
37978: PUSH
37979: LD_INT 2100
37981: ST_TO_ADDR
// if amount < min then
37982: LD_VAR 0 9
37986: PUSH
37987: LD_VAR 0 3
37991: LESS
37992: IFFALSE 38010
// r := r * 2 else
37994: LD_ADDR_VAR 0 7
37998: PUSH
37999: LD_VAR 0 7
38003: PUSH
38004: LD_INT 2
38006: MUL
38007: ST_TO_ADDR
38008: GO 38036
// if amount > max then
38010: LD_VAR 0 9
38014: PUSH
38015: LD_VAR 0 4
38019: GREATER
38020: IFFALSE 38036
// r := r / 2 ;
38022: LD_ADDR_VAR 0 7
38026: PUSH
38027: LD_VAR 0 7
38031: PUSH
38032: LD_INT 2
38034: DIVREAL
38035: ST_TO_ADDR
// time := time / r ;
38036: LD_ADDR_VAR 0 8
38040: PUSH
38041: LD_VAR 0 8
38045: PUSH
38046: LD_VAR 0 7
38050: DIVREAL
38051: ST_TO_ADDR
// if time < 0 then
38052: LD_VAR 0 8
38056: PUSH
38057: LD_INT 0
38059: LESS
38060: IFFALSE 38077
// time := time * - 1 ;
38062: LD_ADDR_VAR 0 8
38066: PUSH
38067: LD_VAR 0 8
38071: PUSH
38072: LD_INT 1
38074: NEG
38075: MUL
38076: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38077: LD_VAR 0 8
38081: PUSH
38082: LD_INT 35
38084: PPUSH
38085: LD_INT 875
38087: PPUSH
38088: CALL_OW 12
38092: PLUS
38093: PPUSH
38094: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38098: LD_INT 1
38100: PPUSH
38101: LD_INT 5
38103: PPUSH
38104: CALL_OW 12
38108: PPUSH
38109: LD_VAR 0 1
38113: PPUSH
38114: LD_INT 1
38116: PPUSH
38117: CALL_OW 55
// end ;
38121: GO 37934
// end ;
38123: LD_VAR 0 5
38127: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38128: LD_INT 0
38130: PPUSH
38131: PPUSH
38132: PPUSH
38133: PPUSH
38134: PPUSH
38135: PPUSH
38136: PPUSH
38137: PPUSH
// if not turrets or not factories then
38138: LD_VAR 0 1
38142: NOT
38143: PUSH
38144: LD_VAR 0 2
38148: NOT
38149: OR
38150: IFFALSE 38154
// exit ;
38152: GO 38461
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38154: LD_ADDR_VAR 0 10
38158: PUSH
38159: LD_INT 5
38161: PUSH
38162: LD_INT 6
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 2
38171: PUSH
38172: LD_INT 4
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 3
38181: PUSH
38182: LD_INT 5
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 24
38196: PUSH
38197: LD_INT 25
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 23
38206: PUSH
38207: LD_INT 27
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 42
38220: PUSH
38221: LD_INT 43
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 44
38230: PUSH
38231: LD_INT 46
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 45
38240: PUSH
38241: LD_INT 47
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: LIST
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: LIST
38257: ST_TO_ADDR
// result := [ ] ;
38258: LD_ADDR_VAR 0 3
38262: PUSH
38263: EMPTY
38264: ST_TO_ADDR
// for i in turrets do
38265: LD_ADDR_VAR 0 4
38269: PUSH
38270: LD_VAR 0 1
38274: PUSH
38275: FOR_IN
38276: IFFALSE 38459
// begin nat := GetNation ( i ) ;
38278: LD_ADDR_VAR 0 7
38282: PUSH
38283: LD_VAR 0 4
38287: PPUSH
38288: CALL_OW 248
38292: ST_TO_ADDR
// weapon := 0 ;
38293: LD_ADDR_VAR 0 8
38297: PUSH
38298: LD_INT 0
38300: ST_TO_ADDR
// if not nat then
38301: LD_VAR 0 7
38305: NOT
38306: IFFALSE 38310
// continue ;
38308: GO 38275
// for j in list [ nat ] do
38310: LD_ADDR_VAR 0 5
38314: PUSH
38315: LD_VAR 0 10
38319: PUSH
38320: LD_VAR 0 7
38324: ARRAY
38325: PUSH
38326: FOR_IN
38327: IFFALSE 38368
// if GetBWeapon ( i ) = j [ 1 ] then
38329: LD_VAR 0 4
38333: PPUSH
38334: CALL_OW 269
38338: PUSH
38339: LD_VAR 0 5
38343: PUSH
38344: LD_INT 1
38346: ARRAY
38347: EQUAL
38348: IFFALSE 38366
// begin weapon := j [ 2 ] ;
38350: LD_ADDR_VAR 0 8
38354: PUSH
38355: LD_VAR 0 5
38359: PUSH
38360: LD_INT 2
38362: ARRAY
38363: ST_TO_ADDR
// break ;
38364: GO 38368
// end ;
38366: GO 38326
38368: POP
38369: POP
// if not weapon then
38370: LD_VAR 0 8
38374: NOT
38375: IFFALSE 38379
// continue ;
38377: GO 38275
// for k in factories do
38379: LD_ADDR_VAR 0 6
38383: PUSH
38384: LD_VAR 0 2
38388: PUSH
38389: FOR_IN
38390: IFFALSE 38455
// begin weapons := AvailableWeaponList ( k ) ;
38392: LD_ADDR_VAR 0 9
38396: PUSH
38397: LD_VAR 0 6
38401: PPUSH
38402: CALL_OW 478
38406: ST_TO_ADDR
// if not weapons then
38407: LD_VAR 0 9
38411: NOT
38412: IFFALSE 38416
// continue ;
38414: GO 38389
// if weapon in weapons then
38416: LD_VAR 0 8
38420: PUSH
38421: LD_VAR 0 9
38425: IN
38426: IFFALSE 38453
// begin result := [ i , weapon ] ;
38428: LD_ADDR_VAR 0 3
38432: PUSH
38433: LD_VAR 0 4
38437: PUSH
38438: LD_VAR 0 8
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: ST_TO_ADDR
// exit ;
38447: POP
38448: POP
38449: POP
38450: POP
38451: GO 38461
// end ; end ;
38453: GO 38389
38455: POP
38456: POP
// end ;
38457: GO 38275
38459: POP
38460: POP
// end ;
38461: LD_VAR 0 3
38465: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38466: LD_INT 0
38468: PPUSH
// if not side or side > 8 then
38469: LD_VAR 0 3
38473: NOT
38474: PUSH
38475: LD_VAR 0 3
38479: PUSH
38480: LD_INT 8
38482: GREATER
38483: OR
38484: IFFALSE 38488
// exit ;
38486: GO 38547
// if not range then
38488: LD_VAR 0 4
38492: NOT
38493: IFFALSE 38504
// range := - 12 ;
38495: LD_ADDR_VAR 0 4
38499: PUSH
38500: LD_INT 12
38502: NEG
38503: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38504: LD_VAR 0 1
38508: PPUSH
38509: LD_VAR 0 2
38513: PPUSH
38514: LD_VAR 0 3
38518: PPUSH
38519: LD_VAR 0 4
38523: PPUSH
38524: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38528: LD_VAR 0 1
38532: PPUSH
38533: LD_VAR 0 2
38537: PPUSH
38538: LD_VAR 0 3
38542: PPUSH
38543: CALL_OW 331
// end ;
38547: LD_VAR 0 5
38551: RET
// export function Video ( mode ) ; begin
38552: LD_INT 0
38554: PPUSH
// ingame_video = mode ;
38555: LD_ADDR_OWVAR 52
38559: PUSH
38560: LD_VAR 0 1
38564: ST_TO_ADDR
// interface_hidden = mode ;
38565: LD_ADDR_OWVAR 54
38569: PUSH
38570: LD_VAR 0 1
38574: ST_TO_ADDR
// end ;
38575: LD_VAR 0 2
38579: RET
// export function Join ( array , element ) ; begin
38580: LD_INT 0
38582: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38583: LD_ADDR_VAR 0 3
38587: PUSH
38588: LD_VAR 0 1
38592: PPUSH
38593: LD_VAR 0 1
38597: PUSH
38598: LD_INT 1
38600: PLUS
38601: PPUSH
38602: LD_VAR 0 2
38606: PPUSH
38607: CALL_OW 1
38611: ST_TO_ADDR
// end ;
38612: LD_VAR 0 3
38616: RET
// export function JoinUnion ( array , element ) ; begin
38617: LD_INT 0
38619: PPUSH
// result := array union element ;
38620: LD_ADDR_VAR 0 3
38624: PUSH
38625: LD_VAR 0 1
38629: PUSH
38630: LD_VAR 0 2
38634: UNION
38635: ST_TO_ADDR
// end ;
38636: LD_VAR 0 3
38640: RET
// export function GetBehemoths ( side ) ; begin
38641: LD_INT 0
38643: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38644: LD_ADDR_VAR 0 2
38648: PUSH
38649: LD_INT 22
38651: PUSH
38652: LD_VAR 0 1
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 31
38663: PUSH
38664: LD_INT 25
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PPUSH
38675: CALL_OW 69
38679: ST_TO_ADDR
// end ;
38680: LD_VAR 0 2
38684: RET
// export function Shuffle ( array ) ; var i , index ; begin
38685: LD_INT 0
38687: PPUSH
38688: PPUSH
38689: PPUSH
// result := [ ] ;
38690: LD_ADDR_VAR 0 2
38694: PUSH
38695: EMPTY
38696: ST_TO_ADDR
// if not array then
38697: LD_VAR 0 1
38701: NOT
38702: IFFALSE 38706
// exit ;
38704: GO 38805
// Randomize ;
38706: CALL_OW 10
// for i = array downto 1 do
38710: LD_ADDR_VAR 0 3
38714: PUSH
38715: DOUBLE
38716: LD_VAR 0 1
38720: INC
38721: ST_TO_ADDR
38722: LD_INT 1
38724: PUSH
38725: FOR_DOWNTO
38726: IFFALSE 38803
// begin index := rand ( 1 , array ) ;
38728: LD_ADDR_VAR 0 4
38732: PUSH
38733: LD_INT 1
38735: PPUSH
38736: LD_VAR 0 1
38740: PPUSH
38741: CALL_OW 12
38745: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38746: LD_ADDR_VAR 0 2
38750: PUSH
38751: LD_VAR 0 2
38755: PPUSH
38756: LD_VAR 0 2
38760: PUSH
38761: LD_INT 1
38763: PLUS
38764: PPUSH
38765: LD_VAR 0 1
38769: PUSH
38770: LD_VAR 0 4
38774: ARRAY
38775: PPUSH
38776: CALL_OW 2
38780: ST_TO_ADDR
// array := Delete ( array , index ) ;
38781: LD_ADDR_VAR 0 1
38785: PUSH
38786: LD_VAR 0 1
38790: PPUSH
38791: LD_VAR 0 4
38795: PPUSH
38796: CALL_OW 3
38800: ST_TO_ADDR
// end ;
38801: GO 38725
38803: POP
38804: POP
// end ;
38805: LD_VAR 0 2
38809: RET
// export function GetBaseMaterials ( base ) ; begin
38810: LD_INT 0
38812: PPUSH
// result := [ 0 , 0 , 0 ] ;
38813: LD_ADDR_VAR 0 2
38817: PUSH
38818: LD_INT 0
38820: PUSH
38821: LD_INT 0
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: LIST
38831: ST_TO_ADDR
// if not base then
38832: LD_VAR 0 1
38836: NOT
38837: IFFALSE 38841
// exit ;
38839: GO 38890
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38841: LD_ADDR_VAR 0 2
38845: PUSH
38846: LD_VAR 0 1
38850: PPUSH
38851: LD_INT 1
38853: PPUSH
38854: CALL_OW 275
38858: PUSH
38859: LD_VAR 0 1
38863: PPUSH
38864: LD_INT 2
38866: PPUSH
38867: CALL_OW 275
38871: PUSH
38872: LD_VAR 0 1
38876: PPUSH
38877: LD_INT 3
38879: PPUSH
38880: CALL_OW 275
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: LIST
38889: ST_TO_ADDR
// end ;
38890: LD_VAR 0 2
38894: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38895: LD_INT 0
38897: PPUSH
38898: PPUSH
// result := array ;
38899: LD_ADDR_VAR 0 3
38903: PUSH
38904: LD_VAR 0 1
38908: ST_TO_ADDR
// if size >= result then
38909: LD_VAR 0 2
38913: PUSH
38914: LD_VAR 0 3
38918: GREATEREQUAL
38919: IFFALSE 38923
// exit ;
38921: GO 38973
// if size then
38923: LD_VAR 0 2
38927: IFFALSE 38973
// for i := array downto size do
38929: LD_ADDR_VAR 0 4
38933: PUSH
38934: DOUBLE
38935: LD_VAR 0 1
38939: INC
38940: ST_TO_ADDR
38941: LD_VAR 0 2
38945: PUSH
38946: FOR_DOWNTO
38947: IFFALSE 38971
// result := Delete ( result , result ) ;
38949: LD_ADDR_VAR 0 3
38953: PUSH
38954: LD_VAR 0 3
38958: PPUSH
38959: LD_VAR 0 3
38963: PPUSH
38964: CALL_OW 3
38968: ST_TO_ADDR
38969: GO 38946
38971: POP
38972: POP
// end ;
38973: LD_VAR 0 3
38977: RET
// export function ComExit ( unit ) ; var tmp ; begin
38978: LD_INT 0
38980: PPUSH
38981: PPUSH
// if not IsInUnit ( unit ) then
38982: LD_VAR 0 1
38986: PPUSH
38987: CALL_OW 310
38991: NOT
38992: IFFALSE 38996
// exit ;
38994: GO 39056
// tmp := IsInUnit ( unit ) ;
38996: LD_ADDR_VAR 0 3
39000: PUSH
39001: LD_VAR 0 1
39005: PPUSH
39006: CALL_OW 310
39010: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39011: LD_VAR 0 3
39015: PPUSH
39016: CALL_OW 247
39020: PUSH
39021: LD_INT 2
39023: EQUAL
39024: IFFALSE 39037
// ComExitVehicle ( unit ) else
39026: LD_VAR 0 1
39030: PPUSH
39031: CALL_OW 121
39035: GO 39046
// ComExitBuilding ( unit ) ;
39037: LD_VAR 0 1
39041: PPUSH
39042: CALL_OW 122
// result := tmp ;
39046: LD_ADDR_VAR 0 2
39050: PUSH
39051: LD_VAR 0 3
39055: ST_TO_ADDR
// end ;
39056: LD_VAR 0 2
39060: RET
// export function ComExitAll ( units ) ; var i ; begin
39061: LD_INT 0
39063: PPUSH
39064: PPUSH
// if not units then
39065: LD_VAR 0 1
39069: NOT
39070: IFFALSE 39074
// exit ;
39072: GO 39100
// for i in units do
39074: LD_ADDR_VAR 0 3
39078: PUSH
39079: LD_VAR 0 1
39083: PUSH
39084: FOR_IN
39085: IFFALSE 39098
// ComExit ( i ) ;
39087: LD_VAR 0 3
39091: PPUSH
39092: CALL 38978 0 1
39096: GO 39084
39098: POP
39099: POP
// end ;
39100: LD_VAR 0 2
39104: RET
// export function ResetHc ; begin
39105: LD_INT 0
39107: PPUSH
// InitHc ;
39108: CALL_OW 19
// hc_importance := 0 ;
39112: LD_ADDR_OWVAR 32
39116: PUSH
39117: LD_INT 0
39119: ST_TO_ADDR
// end ;
39120: LD_VAR 0 1
39124: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39125: LD_INT 0
39127: PPUSH
39128: PPUSH
39129: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39130: LD_ADDR_VAR 0 6
39134: PUSH
39135: LD_VAR 0 1
39139: PUSH
39140: LD_VAR 0 3
39144: PLUS
39145: PUSH
39146: LD_INT 2
39148: DIV
39149: ST_TO_ADDR
// if _x < 0 then
39150: LD_VAR 0 6
39154: PUSH
39155: LD_INT 0
39157: LESS
39158: IFFALSE 39175
// _x := _x * - 1 ;
39160: LD_ADDR_VAR 0 6
39164: PUSH
39165: LD_VAR 0 6
39169: PUSH
39170: LD_INT 1
39172: NEG
39173: MUL
39174: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39175: LD_ADDR_VAR 0 7
39179: PUSH
39180: LD_VAR 0 2
39184: PUSH
39185: LD_VAR 0 4
39189: PLUS
39190: PUSH
39191: LD_INT 2
39193: DIV
39194: ST_TO_ADDR
// if _y < 0 then
39195: LD_VAR 0 7
39199: PUSH
39200: LD_INT 0
39202: LESS
39203: IFFALSE 39220
// _y := _y * - 1 ;
39205: LD_ADDR_VAR 0 7
39209: PUSH
39210: LD_VAR 0 7
39214: PUSH
39215: LD_INT 1
39217: NEG
39218: MUL
39219: ST_TO_ADDR
// result := [ _x , _y ] ;
39220: LD_ADDR_VAR 0 5
39224: PUSH
39225: LD_VAR 0 6
39229: PUSH
39230: LD_VAR 0 7
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: ST_TO_ADDR
// end ;
39239: LD_VAR 0 5
39243: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39244: LD_INT 0
39246: PPUSH
39247: PPUSH
39248: PPUSH
39249: PPUSH
// task := GetTaskList ( unit ) ;
39250: LD_ADDR_VAR 0 7
39254: PUSH
39255: LD_VAR 0 1
39259: PPUSH
39260: CALL_OW 437
39264: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39265: LD_VAR 0 7
39269: NOT
39270: PUSH
39271: LD_VAR 0 1
39275: PPUSH
39276: LD_VAR 0 2
39280: PPUSH
39281: CALL_OW 308
39285: NOT
39286: AND
39287: IFFALSE 39291
// exit ;
39289: GO 39409
// if IsInArea ( unit , area ) then
39291: LD_VAR 0 1
39295: PPUSH
39296: LD_VAR 0 2
39300: PPUSH
39301: CALL_OW 308
39305: IFFALSE 39323
// begin ComMoveToArea ( unit , goAway ) ;
39307: LD_VAR 0 1
39311: PPUSH
39312: LD_VAR 0 3
39316: PPUSH
39317: CALL_OW 113
// exit ;
39321: GO 39409
// end ; if task [ 1 ] [ 1 ] <> M then
39323: LD_VAR 0 7
39327: PUSH
39328: LD_INT 1
39330: ARRAY
39331: PUSH
39332: LD_INT 1
39334: ARRAY
39335: PUSH
39336: LD_STRING M
39338: NONEQUAL
39339: IFFALSE 39343
// exit ;
39341: GO 39409
// x := task [ 1 ] [ 2 ] ;
39343: LD_ADDR_VAR 0 5
39347: PUSH
39348: LD_VAR 0 7
39352: PUSH
39353: LD_INT 1
39355: ARRAY
39356: PUSH
39357: LD_INT 2
39359: ARRAY
39360: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39361: LD_ADDR_VAR 0 6
39365: PUSH
39366: LD_VAR 0 7
39370: PUSH
39371: LD_INT 1
39373: ARRAY
39374: PUSH
39375: LD_INT 3
39377: ARRAY
39378: ST_TO_ADDR
// if InArea ( x , y , area ) then
39379: LD_VAR 0 5
39383: PPUSH
39384: LD_VAR 0 6
39388: PPUSH
39389: LD_VAR 0 2
39393: PPUSH
39394: CALL_OW 309
39398: IFFALSE 39409
// ComStop ( unit ) ;
39400: LD_VAR 0 1
39404: PPUSH
39405: CALL_OW 141
// end ;
39409: LD_VAR 0 4
39413: RET
// export function Abs ( value ) ; begin
39414: LD_INT 0
39416: PPUSH
// result := value ;
39417: LD_ADDR_VAR 0 2
39421: PUSH
39422: LD_VAR 0 1
39426: ST_TO_ADDR
// if value < 0 then
39427: LD_VAR 0 1
39431: PUSH
39432: LD_INT 0
39434: LESS
39435: IFFALSE 39452
// result := value * - 1 ;
39437: LD_ADDR_VAR 0 2
39441: PUSH
39442: LD_VAR 0 1
39446: PUSH
39447: LD_INT 1
39449: NEG
39450: MUL
39451: ST_TO_ADDR
// end ;
39452: LD_VAR 0 2
39456: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39457: LD_INT 0
39459: PPUSH
39460: PPUSH
39461: PPUSH
39462: PPUSH
39463: PPUSH
39464: PPUSH
39465: PPUSH
39466: PPUSH
// if not unit or not building then
39467: LD_VAR 0 1
39471: NOT
39472: PUSH
39473: LD_VAR 0 2
39477: NOT
39478: OR
39479: IFFALSE 39483
// exit ;
39481: GO 39709
// x := GetX ( building ) ;
39483: LD_ADDR_VAR 0 4
39487: PUSH
39488: LD_VAR 0 2
39492: PPUSH
39493: CALL_OW 250
39497: ST_TO_ADDR
// y := GetY ( building ) ;
39498: LD_ADDR_VAR 0 6
39502: PUSH
39503: LD_VAR 0 2
39507: PPUSH
39508: CALL_OW 251
39512: ST_TO_ADDR
// d := GetDir ( building ) ;
39513: LD_ADDR_VAR 0 8
39517: PUSH
39518: LD_VAR 0 2
39522: PPUSH
39523: CALL_OW 254
39527: ST_TO_ADDR
// r := 4 ;
39528: LD_ADDR_VAR 0 9
39532: PUSH
39533: LD_INT 4
39535: ST_TO_ADDR
// for i := 1 to 5 do
39536: LD_ADDR_VAR 0 10
39540: PUSH
39541: DOUBLE
39542: LD_INT 1
39544: DEC
39545: ST_TO_ADDR
39546: LD_INT 5
39548: PUSH
39549: FOR_TO
39550: IFFALSE 39707
// begin _x := ShiftX ( x , d , r + i ) ;
39552: LD_ADDR_VAR 0 5
39556: PUSH
39557: LD_VAR 0 4
39561: PPUSH
39562: LD_VAR 0 8
39566: PPUSH
39567: LD_VAR 0 9
39571: PUSH
39572: LD_VAR 0 10
39576: PLUS
39577: PPUSH
39578: CALL_OW 272
39582: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39583: LD_ADDR_VAR 0 7
39587: PUSH
39588: LD_VAR 0 6
39592: PPUSH
39593: LD_VAR 0 8
39597: PPUSH
39598: LD_VAR 0 9
39602: PUSH
39603: LD_VAR 0 10
39607: PLUS
39608: PPUSH
39609: CALL_OW 273
39613: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39614: LD_VAR 0 5
39618: PPUSH
39619: LD_VAR 0 7
39623: PPUSH
39624: CALL_OW 488
39628: PUSH
39629: LD_VAR 0 5
39633: PPUSH
39634: LD_VAR 0 7
39638: PPUSH
39639: CALL_OW 428
39643: PPUSH
39644: CALL_OW 247
39648: PUSH
39649: LD_INT 3
39651: PUSH
39652: LD_INT 2
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: IN
39659: NOT
39660: AND
39661: IFFALSE 39705
// begin ComMoveXY ( unit , _x , _y ) ;
39663: LD_VAR 0 1
39667: PPUSH
39668: LD_VAR 0 5
39672: PPUSH
39673: LD_VAR 0 7
39677: PPUSH
39678: CALL_OW 111
// result := [ _x , _y ] ;
39682: LD_ADDR_VAR 0 3
39686: PUSH
39687: LD_VAR 0 5
39691: PUSH
39692: LD_VAR 0 7
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: ST_TO_ADDR
// exit ;
39701: POP
39702: POP
39703: GO 39709
// end ; end ;
39705: GO 39549
39707: POP
39708: POP
// end ;
39709: LD_VAR 0 3
39713: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39714: LD_INT 0
39716: PPUSH
39717: PPUSH
39718: PPUSH
// result := 0 ;
39719: LD_ADDR_VAR 0 3
39723: PUSH
39724: LD_INT 0
39726: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39727: LD_VAR 0 1
39731: PUSH
39732: LD_INT 0
39734: LESS
39735: PUSH
39736: LD_VAR 0 1
39740: PUSH
39741: LD_INT 8
39743: GREATER
39744: OR
39745: PUSH
39746: LD_VAR 0 2
39750: PUSH
39751: LD_INT 0
39753: LESS
39754: OR
39755: PUSH
39756: LD_VAR 0 2
39760: PUSH
39761: LD_INT 8
39763: GREATER
39764: OR
39765: IFFALSE 39769
// exit ;
39767: GO 39844
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39769: LD_ADDR_VAR 0 4
39773: PUSH
39774: LD_INT 22
39776: PUSH
39777: LD_VAR 0 2
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PPUSH
39786: CALL_OW 69
39790: PUSH
39791: FOR_IN
39792: IFFALSE 39842
// begin un := UnitShoot ( i ) ;
39794: LD_ADDR_VAR 0 5
39798: PUSH
39799: LD_VAR 0 4
39803: PPUSH
39804: CALL_OW 504
39808: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39809: LD_VAR 0 5
39813: PPUSH
39814: CALL_OW 255
39818: PUSH
39819: LD_VAR 0 1
39823: EQUAL
39824: IFFALSE 39840
// begin result := un ;
39826: LD_ADDR_VAR 0 3
39830: PUSH
39831: LD_VAR 0 5
39835: ST_TO_ADDR
// exit ;
39836: POP
39837: POP
39838: GO 39844
// end ; end ;
39840: GO 39791
39842: POP
39843: POP
// end ;
39844: LD_VAR 0 3
39848: RET
// export function GetCargoBay ( units ) ; begin
39849: LD_INT 0
39851: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39852: LD_ADDR_VAR 0 2
39856: PUSH
39857: LD_VAR 0 1
39861: PPUSH
39862: LD_INT 2
39864: PUSH
39865: LD_INT 34
39867: PUSH
39868: LD_INT 12
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 34
39877: PUSH
39878: LD_INT 51
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 34
39887: PUSH
39888: LD_INT 32
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 34
39897: PUSH
39898: LD_INT 89
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: PPUSH
39912: CALL_OW 72
39916: ST_TO_ADDR
// end ;
39917: LD_VAR 0 2
39921: RET
// export function Negate ( value ) ; begin
39922: LD_INT 0
39924: PPUSH
// result := not value ;
39925: LD_ADDR_VAR 0 2
39929: PUSH
39930: LD_VAR 0 1
39934: NOT
39935: ST_TO_ADDR
// end ;
39936: LD_VAR 0 2
39940: RET
// export function Inc ( value ) ; begin
39941: LD_INT 0
39943: PPUSH
// result := value + 1 ;
39944: LD_ADDR_VAR 0 2
39948: PUSH
39949: LD_VAR 0 1
39953: PUSH
39954: LD_INT 1
39956: PLUS
39957: ST_TO_ADDR
// end ;
39958: LD_VAR 0 2
39962: RET
// export function Dec ( value ) ; begin
39963: LD_INT 0
39965: PPUSH
// result := value - 1 ;
39966: LD_ADDR_VAR 0 2
39970: PUSH
39971: LD_VAR 0 1
39975: PUSH
39976: LD_INT 1
39978: MINUS
39979: ST_TO_ADDR
// end ;
39980: LD_VAR 0 2
39984: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39985: LD_INT 0
39987: PPUSH
39988: PPUSH
39989: PPUSH
39990: PPUSH
39991: PPUSH
39992: PPUSH
39993: PPUSH
39994: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39995: LD_VAR 0 1
39999: PPUSH
40000: LD_VAR 0 2
40004: PPUSH
40005: CALL_OW 488
40009: NOT
40010: PUSH
40011: LD_VAR 0 3
40015: PPUSH
40016: LD_VAR 0 4
40020: PPUSH
40021: CALL_OW 488
40025: NOT
40026: OR
40027: IFFALSE 40040
// begin result := - 1 ;
40029: LD_ADDR_VAR 0 5
40033: PUSH
40034: LD_INT 1
40036: NEG
40037: ST_TO_ADDR
// exit ;
40038: GO 40275
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40040: LD_ADDR_VAR 0 12
40044: PUSH
40045: LD_VAR 0 1
40049: PPUSH
40050: LD_VAR 0 2
40054: PPUSH
40055: LD_VAR 0 3
40059: PPUSH
40060: LD_VAR 0 4
40064: PPUSH
40065: CALL 39125 0 4
40069: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40070: LD_ADDR_VAR 0 11
40074: PUSH
40075: LD_VAR 0 1
40079: PPUSH
40080: LD_VAR 0 2
40084: PPUSH
40085: LD_VAR 0 12
40089: PUSH
40090: LD_INT 1
40092: ARRAY
40093: PPUSH
40094: LD_VAR 0 12
40098: PUSH
40099: LD_INT 2
40101: ARRAY
40102: PPUSH
40103: CALL_OW 298
40107: ST_TO_ADDR
// distance := 9999 ;
40108: LD_ADDR_VAR 0 10
40112: PUSH
40113: LD_INT 9999
40115: ST_TO_ADDR
// for i := 0 to 5 do
40116: LD_ADDR_VAR 0 6
40120: PUSH
40121: DOUBLE
40122: LD_INT 0
40124: DEC
40125: ST_TO_ADDR
40126: LD_INT 5
40128: PUSH
40129: FOR_TO
40130: IFFALSE 40273
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40132: LD_ADDR_VAR 0 7
40136: PUSH
40137: LD_VAR 0 1
40141: PPUSH
40142: LD_VAR 0 6
40146: PPUSH
40147: LD_VAR 0 11
40151: PPUSH
40152: CALL_OW 272
40156: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40157: LD_ADDR_VAR 0 8
40161: PUSH
40162: LD_VAR 0 2
40166: PPUSH
40167: LD_VAR 0 6
40171: PPUSH
40172: LD_VAR 0 11
40176: PPUSH
40177: CALL_OW 273
40181: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40182: LD_VAR 0 7
40186: PPUSH
40187: LD_VAR 0 8
40191: PPUSH
40192: CALL_OW 488
40196: NOT
40197: IFFALSE 40201
// continue ;
40199: GO 40129
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40201: LD_ADDR_VAR 0 9
40205: PUSH
40206: LD_VAR 0 12
40210: PUSH
40211: LD_INT 1
40213: ARRAY
40214: PPUSH
40215: LD_VAR 0 12
40219: PUSH
40220: LD_INT 2
40222: ARRAY
40223: PPUSH
40224: LD_VAR 0 7
40228: PPUSH
40229: LD_VAR 0 8
40233: PPUSH
40234: CALL_OW 298
40238: ST_TO_ADDR
// if tmp < distance then
40239: LD_VAR 0 9
40243: PUSH
40244: LD_VAR 0 10
40248: LESS
40249: IFFALSE 40271
// begin result := i ;
40251: LD_ADDR_VAR 0 5
40255: PUSH
40256: LD_VAR 0 6
40260: ST_TO_ADDR
// distance := tmp ;
40261: LD_ADDR_VAR 0 10
40265: PUSH
40266: LD_VAR 0 9
40270: ST_TO_ADDR
// end ; end ;
40271: GO 40129
40273: POP
40274: POP
// end ;
40275: LD_VAR 0 5
40279: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40280: LD_INT 0
40282: PPUSH
40283: PPUSH
// if not driver or not IsInUnit ( driver ) then
40284: LD_VAR 0 1
40288: NOT
40289: PUSH
40290: LD_VAR 0 1
40294: PPUSH
40295: CALL_OW 310
40299: NOT
40300: OR
40301: IFFALSE 40305
// exit ;
40303: GO 40395
// vehicle := IsInUnit ( driver ) ;
40305: LD_ADDR_VAR 0 3
40309: PUSH
40310: LD_VAR 0 1
40314: PPUSH
40315: CALL_OW 310
40319: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40320: LD_VAR 0 1
40324: PPUSH
40325: LD_STRING \
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: LD_INT 0
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: LD_INT 0
40339: PUSH
40340: LD_INT 0
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: PUSH
40355: LD_STRING E
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: LD_VAR 0 3
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PPUSH
40391: CALL_OW 446
// end ;
40395: LD_VAR 0 2
40399: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40400: LD_INT 0
40402: PPUSH
40403: PPUSH
// if not driver or not IsInUnit ( driver ) then
40404: LD_VAR 0 1
40408: NOT
40409: PUSH
40410: LD_VAR 0 1
40414: PPUSH
40415: CALL_OW 310
40419: NOT
40420: OR
40421: IFFALSE 40425
// exit ;
40423: GO 40515
// vehicle := IsInUnit ( driver ) ;
40425: LD_ADDR_VAR 0 3
40429: PUSH
40430: LD_VAR 0 1
40434: PPUSH
40435: CALL_OW 310
40439: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40440: LD_VAR 0 1
40444: PPUSH
40445: LD_STRING \
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: PUSH
40475: LD_STRING E
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: LD_INT 0
40483: PUSH
40484: LD_VAR 0 3
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PPUSH
40511: CALL_OW 447
// end ;
40515: LD_VAR 0 2
40519: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40520: LD_INT 0
40522: PPUSH
40523: PPUSH
40524: PPUSH
// tmp := [ ] ;
40525: LD_ADDR_VAR 0 5
40529: PUSH
40530: EMPTY
40531: ST_TO_ADDR
// for i in units do
40532: LD_ADDR_VAR 0 4
40536: PUSH
40537: LD_VAR 0 1
40541: PUSH
40542: FOR_IN
40543: IFFALSE 40581
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40545: LD_ADDR_VAR 0 5
40549: PUSH
40550: LD_VAR 0 5
40554: PPUSH
40555: LD_VAR 0 5
40559: PUSH
40560: LD_INT 1
40562: PLUS
40563: PPUSH
40564: LD_VAR 0 4
40568: PPUSH
40569: CALL_OW 256
40573: PPUSH
40574: CALL_OW 2
40578: ST_TO_ADDR
40579: GO 40542
40581: POP
40582: POP
// if not tmp then
40583: LD_VAR 0 5
40587: NOT
40588: IFFALSE 40592
// exit ;
40590: GO 40640
// if asc then
40592: LD_VAR 0 2
40596: IFFALSE 40620
// result := SortListByListAsc ( units , tmp ) else
40598: LD_ADDR_VAR 0 3
40602: PUSH
40603: LD_VAR 0 1
40607: PPUSH
40608: LD_VAR 0 5
40612: PPUSH
40613: CALL_OW 76
40617: ST_TO_ADDR
40618: GO 40640
// result := SortListByListDesc ( units , tmp ) ;
40620: LD_ADDR_VAR 0 3
40624: PUSH
40625: LD_VAR 0 1
40629: PPUSH
40630: LD_VAR 0 5
40634: PPUSH
40635: CALL_OW 77
40639: ST_TO_ADDR
// end ;
40640: LD_VAR 0 3
40644: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40645: LD_INT 0
40647: PPUSH
40648: PPUSH
// task := GetTaskList ( mech ) ;
40649: LD_ADDR_VAR 0 4
40653: PUSH
40654: LD_VAR 0 1
40658: PPUSH
40659: CALL_OW 437
40663: ST_TO_ADDR
// if not task then
40664: LD_VAR 0 4
40668: NOT
40669: IFFALSE 40673
// exit ;
40671: GO 40715
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40673: LD_ADDR_VAR 0 3
40677: PUSH
40678: LD_VAR 0 4
40682: PUSH
40683: LD_INT 1
40685: ARRAY
40686: PUSH
40687: LD_INT 1
40689: ARRAY
40690: PUSH
40691: LD_STRING r
40693: EQUAL
40694: PUSH
40695: LD_VAR 0 4
40699: PUSH
40700: LD_INT 1
40702: ARRAY
40703: PUSH
40704: LD_INT 4
40706: ARRAY
40707: PUSH
40708: LD_VAR 0 2
40712: EQUAL
40713: AND
40714: ST_TO_ADDR
// end ;
40715: LD_VAR 0 3
40719: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40720: LD_INT 0
40722: PPUSH
// SetDir ( unit , d ) ;
40723: LD_VAR 0 1
40727: PPUSH
40728: LD_VAR 0 4
40732: PPUSH
40733: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40737: LD_VAR 0 1
40741: PPUSH
40742: LD_VAR 0 2
40746: PPUSH
40747: LD_VAR 0 3
40751: PPUSH
40752: LD_VAR 0 5
40756: PPUSH
40757: CALL_OW 48
// end ;
40761: LD_VAR 0 6
40765: RET
// export function ToNaturalNumber ( number ) ; begin
40766: LD_INT 0
40768: PPUSH
// result := number div 1 ;
40769: LD_ADDR_VAR 0 2
40773: PUSH
40774: LD_VAR 0 1
40778: PUSH
40779: LD_INT 1
40781: DIV
40782: ST_TO_ADDR
// if number < 0 then
40783: LD_VAR 0 1
40787: PUSH
40788: LD_INT 0
40790: LESS
40791: IFFALSE 40801
// result := 0 ;
40793: LD_ADDR_VAR 0 2
40797: PUSH
40798: LD_INT 0
40800: ST_TO_ADDR
// end ;
40801: LD_VAR 0 2
40805: RET
// export function SortByClass ( units , class ) ; var un ; begin
40806: LD_INT 0
40808: PPUSH
40809: PPUSH
// if not units or not class then
40810: LD_VAR 0 1
40814: NOT
40815: PUSH
40816: LD_VAR 0 2
40820: NOT
40821: OR
40822: IFFALSE 40826
// exit ;
40824: GO 40921
// result := [ ] ;
40826: LD_ADDR_VAR 0 3
40830: PUSH
40831: EMPTY
40832: ST_TO_ADDR
// for un in units do
40833: LD_ADDR_VAR 0 4
40837: PUSH
40838: LD_VAR 0 1
40842: PUSH
40843: FOR_IN
40844: IFFALSE 40919
// if GetClass ( un ) = class then
40846: LD_VAR 0 4
40850: PPUSH
40851: CALL_OW 257
40855: PUSH
40856: LD_VAR 0 2
40860: EQUAL
40861: IFFALSE 40888
// result := Insert ( result , 1 , un ) else
40863: LD_ADDR_VAR 0 3
40867: PUSH
40868: LD_VAR 0 3
40872: PPUSH
40873: LD_INT 1
40875: PPUSH
40876: LD_VAR 0 4
40880: PPUSH
40881: CALL_OW 2
40885: ST_TO_ADDR
40886: GO 40917
// result := Replace ( result , result + 1 , un ) ;
40888: LD_ADDR_VAR 0 3
40892: PUSH
40893: LD_VAR 0 3
40897: PPUSH
40898: LD_VAR 0 3
40902: PUSH
40903: LD_INT 1
40905: PLUS
40906: PPUSH
40907: LD_VAR 0 4
40911: PPUSH
40912: CALL_OW 1
40916: ST_TO_ADDR
40917: GO 40843
40919: POP
40920: POP
// end ;
40921: LD_VAR 0 3
40925: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40926: LD_INT 0
40928: PPUSH
40929: PPUSH
40930: PPUSH
40931: PPUSH
40932: PPUSH
40933: PPUSH
40934: PPUSH
// result := [ ] ;
40935: LD_ADDR_VAR 0 4
40939: PUSH
40940: EMPTY
40941: ST_TO_ADDR
// if x - r < 0 then
40942: LD_VAR 0 1
40946: PUSH
40947: LD_VAR 0 3
40951: MINUS
40952: PUSH
40953: LD_INT 0
40955: LESS
40956: IFFALSE 40968
// min_x := 0 else
40958: LD_ADDR_VAR 0 8
40962: PUSH
40963: LD_INT 0
40965: ST_TO_ADDR
40966: GO 40984
// min_x := x - r ;
40968: LD_ADDR_VAR 0 8
40972: PUSH
40973: LD_VAR 0 1
40977: PUSH
40978: LD_VAR 0 3
40982: MINUS
40983: ST_TO_ADDR
// if y - r < 0 then
40984: LD_VAR 0 2
40988: PUSH
40989: LD_VAR 0 3
40993: MINUS
40994: PUSH
40995: LD_INT 0
40997: LESS
40998: IFFALSE 41010
// min_y := 0 else
41000: LD_ADDR_VAR 0 7
41004: PUSH
41005: LD_INT 0
41007: ST_TO_ADDR
41008: GO 41026
// min_y := y - r ;
41010: LD_ADDR_VAR 0 7
41014: PUSH
41015: LD_VAR 0 2
41019: PUSH
41020: LD_VAR 0 3
41024: MINUS
41025: ST_TO_ADDR
// max_x := x + r ;
41026: LD_ADDR_VAR 0 9
41030: PUSH
41031: LD_VAR 0 1
41035: PUSH
41036: LD_VAR 0 3
41040: PLUS
41041: ST_TO_ADDR
// max_y := y + r ;
41042: LD_ADDR_VAR 0 10
41046: PUSH
41047: LD_VAR 0 2
41051: PUSH
41052: LD_VAR 0 3
41056: PLUS
41057: ST_TO_ADDR
// for _x = min_x to max_x do
41058: LD_ADDR_VAR 0 5
41062: PUSH
41063: DOUBLE
41064: LD_VAR 0 8
41068: DEC
41069: ST_TO_ADDR
41070: LD_VAR 0 9
41074: PUSH
41075: FOR_TO
41076: IFFALSE 41177
// for _y = min_y to max_y do
41078: LD_ADDR_VAR 0 6
41082: PUSH
41083: DOUBLE
41084: LD_VAR 0 7
41088: DEC
41089: ST_TO_ADDR
41090: LD_VAR 0 10
41094: PUSH
41095: FOR_TO
41096: IFFALSE 41173
// begin if not ValidHex ( _x , _y ) then
41098: LD_VAR 0 5
41102: PPUSH
41103: LD_VAR 0 6
41107: PPUSH
41108: CALL_OW 488
41112: NOT
41113: IFFALSE 41117
// continue ;
41115: GO 41095
// if GetResourceTypeXY ( _x , _y ) then
41117: LD_VAR 0 5
41121: PPUSH
41122: LD_VAR 0 6
41126: PPUSH
41127: CALL_OW 283
41131: IFFALSE 41171
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41133: LD_ADDR_VAR 0 4
41137: PUSH
41138: LD_VAR 0 4
41142: PPUSH
41143: LD_VAR 0 4
41147: PUSH
41148: LD_INT 1
41150: PLUS
41151: PPUSH
41152: LD_VAR 0 5
41156: PUSH
41157: LD_VAR 0 6
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PPUSH
41166: CALL_OW 1
41170: ST_TO_ADDR
// end ;
41171: GO 41095
41173: POP
41174: POP
41175: GO 41075
41177: POP
41178: POP
// end ;
41179: LD_VAR 0 4
41183: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41184: LD_INT 0
41186: PPUSH
41187: PPUSH
41188: PPUSH
41189: PPUSH
41190: PPUSH
41191: PPUSH
41192: PPUSH
41193: PPUSH
// if not units then
41194: LD_VAR 0 1
41198: NOT
41199: IFFALSE 41203
// exit ;
41201: GO 41727
// result := UnitFilter ( units , [ f_ok ] ) ;
41203: LD_ADDR_VAR 0 3
41207: PUSH
41208: LD_VAR 0 1
41212: PPUSH
41213: LD_INT 50
41215: PUSH
41216: EMPTY
41217: LIST
41218: PPUSH
41219: CALL_OW 72
41223: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41224: LD_ADDR_VAR 0 8
41228: PUSH
41229: LD_VAR 0 1
41233: PUSH
41234: LD_INT 1
41236: ARRAY
41237: PPUSH
41238: CALL_OW 255
41242: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41243: LD_ADDR_VAR 0 10
41247: PUSH
41248: LD_INT 29
41250: PUSH
41251: LD_INT 91
41253: PUSH
41254: LD_INT 49
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: LIST
41261: ST_TO_ADDR
// if not result then
41262: LD_VAR 0 3
41266: NOT
41267: IFFALSE 41271
// exit ;
41269: GO 41727
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41271: LD_ADDR_VAR 0 5
41275: PUSH
41276: LD_INT 81
41278: PUSH
41279: LD_VAR 0 8
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PPUSH
41288: CALL_OW 69
41292: ST_TO_ADDR
// for i in result do
41293: LD_ADDR_VAR 0 4
41297: PUSH
41298: LD_VAR 0 3
41302: PUSH
41303: FOR_IN
41304: IFFALSE 41725
// begin tag := GetTag ( i ) + 1 ;
41306: LD_ADDR_VAR 0 9
41310: PUSH
41311: LD_VAR 0 4
41315: PPUSH
41316: CALL_OW 110
41320: PUSH
41321: LD_INT 1
41323: PLUS
41324: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41325: LD_ADDR_VAR 0 7
41329: PUSH
41330: LD_VAR 0 4
41334: PPUSH
41335: CALL_OW 250
41339: PPUSH
41340: LD_VAR 0 4
41344: PPUSH
41345: CALL_OW 251
41349: PPUSH
41350: LD_INT 6
41352: PPUSH
41353: CALL 40926 0 3
41357: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41358: LD_VAR 0 4
41362: PPUSH
41363: CALL_OW 247
41367: PUSH
41368: LD_INT 2
41370: EQUAL
41371: PUSH
41372: LD_VAR 0 7
41376: AND
41377: PUSH
41378: LD_VAR 0 4
41382: PPUSH
41383: CALL_OW 264
41387: PUSH
41388: LD_VAR 0 10
41392: IN
41393: NOT
41394: AND
41395: IFFALSE 41434
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41397: LD_VAR 0 4
41401: PPUSH
41402: LD_VAR 0 7
41406: PUSH
41407: LD_INT 1
41409: ARRAY
41410: PUSH
41411: LD_INT 1
41413: ARRAY
41414: PPUSH
41415: LD_VAR 0 7
41419: PUSH
41420: LD_INT 1
41422: ARRAY
41423: PUSH
41424: LD_INT 2
41426: ARRAY
41427: PPUSH
41428: CALL_OW 116
41432: GO 41723
// if path > tag then
41434: LD_VAR 0 2
41438: PUSH
41439: LD_VAR 0 9
41443: GREATER
41444: IFFALSE 41652
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41446: LD_ADDR_VAR 0 6
41450: PUSH
41451: LD_VAR 0 5
41455: PPUSH
41456: LD_INT 91
41458: PUSH
41459: LD_VAR 0 4
41463: PUSH
41464: LD_INT 8
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: LIST
41471: PPUSH
41472: CALL_OW 72
41476: ST_TO_ADDR
// if nearEnemy then
41477: LD_VAR 0 6
41481: IFFALSE 41550
// begin if GetWeapon ( i ) = ru_time_lapser then
41483: LD_VAR 0 4
41487: PPUSH
41488: CALL_OW 264
41492: PUSH
41493: LD_INT 49
41495: EQUAL
41496: IFFALSE 41524
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41498: LD_VAR 0 4
41502: PPUSH
41503: LD_VAR 0 6
41507: PPUSH
41508: LD_VAR 0 4
41512: PPUSH
41513: CALL_OW 74
41517: PPUSH
41518: CALL_OW 112
41522: GO 41548
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41524: LD_VAR 0 4
41528: PPUSH
41529: LD_VAR 0 6
41533: PPUSH
41534: LD_VAR 0 4
41538: PPUSH
41539: CALL_OW 74
41543: PPUSH
41544: CALL_OW 115
// end else
41548: GO 41650
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41550: LD_VAR 0 4
41554: PPUSH
41555: LD_VAR 0 2
41559: PUSH
41560: LD_VAR 0 9
41564: ARRAY
41565: PUSH
41566: LD_INT 1
41568: ARRAY
41569: PPUSH
41570: LD_VAR 0 2
41574: PUSH
41575: LD_VAR 0 9
41579: ARRAY
41580: PUSH
41581: LD_INT 2
41583: ARRAY
41584: PPUSH
41585: CALL_OW 297
41589: PUSH
41590: LD_INT 6
41592: GREATER
41593: IFFALSE 41636
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41595: LD_VAR 0 4
41599: PPUSH
41600: LD_VAR 0 2
41604: PUSH
41605: LD_VAR 0 9
41609: ARRAY
41610: PUSH
41611: LD_INT 1
41613: ARRAY
41614: PPUSH
41615: LD_VAR 0 2
41619: PUSH
41620: LD_VAR 0 9
41624: ARRAY
41625: PUSH
41626: LD_INT 2
41628: ARRAY
41629: PPUSH
41630: CALL_OW 114
41634: GO 41650
// SetTag ( i , tag ) ;
41636: LD_VAR 0 4
41640: PPUSH
41641: LD_VAR 0 9
41645: PPUSH
41646: CALL_OW 109
// end else
41650: GO 41723
// if enemy then
41652: LD_VAR 0 5
41656: IFFALSE 41723
// begin if GetWeapon ( i ) = ru_time_lapser then
41658: LD_VAR 0 4
41662: PPUSH
41663: CALL_OW 264
41667: PUSH
41668: LD_INT 49
41670: EQUAL
41671: IFFALSE 41699
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41673: LD_VAR 0 4
41677: PPUSH
41678: LD_VAR 0 5
41682: PPUSH
41683: LD_VAR 0 4
41687: PPUSH
41688: CALL_OW 74
41692: PPUSH
41693: CALL_OW 112
41697: GO 41723
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41699: LD_VAR 0 4
41703: PPUSH
41704: LD_VAR 0 5
41708: PPUSH
41709: LD_VAR 0 4
41713: PPUSH
41714: CALL_OW 74
41718: PPUSH
41719: CALL_OW 115
// end ; end ;
41723: GO 41303
41725: POP
41726: POP
// end ;
41727: LD_VAR 0 3
41731: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41732: LD_INT 0
41734: PPUSH
41735: PPUSH
41736: PPUSH
// if not unit or IsInUnit ( unit ) then
41737: LD_VAR 0 1
41741: NOT
41742: PUSH
41743: LD_VAR 0 1
41747: PPUSH
41748: CALL_OW 310
41752: OR
41753: IFFALSE 41757
// exit ;
41755: GO 41848
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41757: LD_ADDR_VAR 0 4
41761: PUSH
41762: LD_VAR 0 1
41766: PPUSH
41767: CALL_OW 250
41771: PPUSH
41772: LD_VAR 0 2
41776: PPUSH
41777: LD_INT 1
41779: PPUSH
41780: CALL_OW 272
41784: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41785: LD_ADDR_VAR 0 5
41789: PUSH
41790: LD_VAR 0 1
41794: PPUSH
41795: CALL_OW 251
41799: PPUSH
41800: LD_VAR 0 2
41804: PPUSH
41805: LD_INT 1
41807: PPUSH
41808: CALL_OW 273
41812: ST_TO_ADDR
// if ValidHex ( x , y ) then
41813: LD_VAR 0 4
41817: PPUSH
41818: LD_VAR 0 5
41822: PPUSH
41823: CALL_OW 488
41827: IFFALSE 41848
// ComTurnXY ( unit , x , y ) ;
41829: LD_VAR 0 1
41833: PPUSH
41834: LD_VAR 0 4
41838: PPUSH
41839: LD_VAR 0 5
41843: PPUSH
41844: CALL_OW 118
// end ;
41848: LD_VAR 0 3
41852: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41853: LD_INT 0
41855: PPUSH
41856: PPUSH
// result := false ;
41857: LD_ADDR_VAR 0 3
41861: PUSH
41862: LD_INT 0
41864: ST_TO_ADDR
// if not units then
41865: LD_VAR 0 2
41869: NOT
41870: IFFALSE 41874
// exit ;
41872: GO 41919
// for i in units do
41874: LD_ADDR_VAR 0 4
41878: PUSH
41879: LD_VAR 0 2
41883: PUSH
41884: FOR_IN
41885: IFFALSE 41917
// if See ( side , i ) then
41887: LD_VAR 0 1
41891: PPUSH
41892: LD_VAR 0 4
41896: PPUSH
41897: CALL_OW 292
41901: IFFALSE 41915
// begin result := true ;
41903: LD_ADDR_VAR 0 3
41907: PUSH
41908: LD_INT 1
41910: ST_TO_ADDR
// exit ;
41911: POP
41912: POP
41913: GO 41919
// end ;
41915: GO 41884
41917: POP
41918: POP
// end ;
41919: LD_VAR 0 3
41923: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41924: LD_INT 0
41926: PPUSH
41927: PPUSH
41928: PPUSH
41929: PPUSH
// if not unit or not points then
41930: LD_VAR 0 1
41934: NOT
41935: PUSH
41936: LD_VAR 0 2
41940: NOT
41941: OR
41942: IFFALSE 41946
// exit ;
41944: GO 42036
// dist := 99999 ;
41946: LD_ADDR_VAR 0 5
41950: PUSH
41951: LD_INT 99999
41953: ST_TO_ADDR
// for i in points do
41954: LD_ADDR_VAR 0 4
41958: PUSH
41959: LD_VAR 0 2
41963: PUSH
41964: FOR_IN
41965: IFFALSE 42034
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41967: LD_ADDR_VAR 0 6
41971: PUSH
41972: LD_VAR 0 1
41976: PPUSH
41977: LD_VAR 0 4
41981: PUSH
41982: LD_INT 1
41984: ARRAY
41985: PPUSH
41986: LD_VAR 0 4
41990: PUSH
41991: LD_INT 2
41993: ARRAY
41994: PPUSH
41995: CALL_OW 297
41999: ST_TO_ADDR
// if tmpDist < dist then
42000: LD_VAR 0 6
42004: PUSH
42005: LD_VAR 0 5
42009: LESS
42010: IFFALSE 42032
// begin result := i ;
42012: LD_ADDR_VAR 0 3
42016: PUSH
42017: LD_VAR 0 4
42021: ST_TO_ADDR
// dist := tmpDist ;
42022: LD_ADDR_VAR 0 5
42026: PUSH
42027: LD_VAR 0 6
42031: ST_TO_ADDR
// end ; end ;
42032: GO 41964
42034: POP
42035: POP
// end ;
42036: LD_VAR 0 3
42040: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42041: LD_INT 0
42043: PPUSH
// uc_side := side ;
42044: LD_ADDR_OWVAR 20
42048: PUSH
42049: LD_VAR 0 1
42053: ST_TO_ADDR
// uc_nation := 3 ;
42054: LD_ADDR_OWVAR 21
42058: PUSH
42059: LD_INT 3
42061: ST_TO_ADDR
// vc_chassis := 25 ;
42062: LD_ADDR_OWVAR 37
42066: PUSH
42067: LD_INT 25
42069: ST_TO_ADDR
// vc_engine := engine_siberite ;
42070: LD_ADDR_OWVAR 39
42074: PUSH
42075: LD_INT 3
42077: ST_TO_ADDR
// vc_control := control_computer ;
42078: LD_ADDR_OWVAR 38
42082: PUSH
42083: LD_INT 3
42085: ST_TO_ADDR
// vc_weapon := 59 ;
42086: LD_ADDR_OWVAR 40
42090: PUSH
42091: LD_INT 59
42093: ST_TO_ADDR
// result := CreateVehicle ;
42094: LD_ADDR_VAR 0 5
42098: PUSH
42099: CALL_OW 45
42103: ST_TO_ADDR
// SetDir ( result , d ) ;
42104: LD_VAR 0 5
42108: PPUSH
42109: LD_VAR 0 4
42113: PPUSH
42114: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42118: LD_VAR 0 5
42122: PPUSH
42123: LD_VAR 0 2
42127: PPUSH
42128: LD_VAR 0 3
42132: PPUSH
42133: LD_INT 0
42135: PPUSH
42136: CALL_OW 48
// end ;
42140: LD_VAR 0 5
42144: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42145: LD_INT 0
42147: PPUSH
42148: PPUSH
42149: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42150: LD_ADDR_VAR 0 2
42154: PUSH
42155: LD_INT 0
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42173: LD_VAR 0 1
42177: NOT
42178: PUSH
42179: LD_VAR 0 1
42183: PPUSH
42184: CALL_OW 264
42188: PUSH
42189: LD_INT 12
42191: PUSH
42192: LD_INT 51
42194: PUSH
42195: LD_INT 32
42197: PUSH
42198: LD_INT 89
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: IN
42207: NOT
42208: OR
42209: IFFALSE 42213
// exit ;
42211: GO 42311
// for i := 1 to 3 do
42213: LD_ADDR_VAR 0 3
42217: PUSH
42218: DOUBLE
42219: LD_INT 1
42221: DEC
42222: ST_TO_ADDR
42223: LD_INT 3
42225: PUSH
42226: FOR_TO
42227: IFFALSE 42309
// begin tmp := GetCargo ( cargo , i ) ;
42229: LD_ADDR_VAR 0 4
42233: PUSH
42234: LD_VAR 0 1
42238: PPUSH
42239: LD_VAR 0 3
42243: PPUSH
42244: CALL_OW 289
42248: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42249: LD_ADDR_VAR 0 2
42253: PUSH
42254: LD_VAR 0 2
42258: PPUSH
42259: LD_VAR 0 3
42263: PPUSH
42264: LD_VAR 0 4
42268: PPUSH
42269: CALL_OW 1
42273: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42274: LD_ADDR_VAR 0 2
42278: PUSH
42279: LD_VAR 0 2
42283: PPUSH
42284: LD_INT 4
42286: PPUSH
42287: LD_VAR 0 2
42291: PUSH
42292: LD_INT 4
42294: ARRAY
42295: PUSH
42296: LD_VAR 0 4
42300: PLUS
42301: PPUSH
42302: CALL_OW 1
42306: ST_TO_ADDR
// end ;
42307: GO 42226
42309: POP
42310: POP
// end ;
42311: LD_VAR 0 2
42315: RET
// export function Length ( array ) ; begin
42316: LD_INT 0
42318: PPUSH
// result := array + 0 ;
42319: LD_ADDR_VAR 0 2
42323: PUSH
42324: LD_VAR 0 1
42328: PUSH
42329: LD_INT 0
42331: PLUS
42332: ST_TO_ADDR
// end ;
42333: LD_VAR 0 2
42337: RET
// export function PrepareArray ( array ) ; begin
42338: LD_INT 0
42340: PPUSH
// result := array diff 0 ;
42341: LD_ADDR_VAR 0 2
42345: PUSH
42346: LD_VAR 0 1
42350: PUSH
42351: LD_INT 0
42353: DIFF
42354: ST_TO_ADDR
// if not result [ 1 ] then
42355: LD_VAR 0 2
42359: PUSH
42360: LD_INT 1
42362: ARRAY
42363: NOT
42364: IFFALSE 42384
// result := Delete ( result , 1 ) ;
42366: LD_ADDR_VAR 0 2
42370: PUSH
42371: LD_VAR 0 2
42375: PPUSH
42376: LD_INT 1
42378: PPUSH
42379: CALL_OW 3
42383: ST_TO_ADDR
// end ;
42384: LD_VAR 0 2
42388: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42389: LD_INT 0
42391: PPUSH
42392: PPUSH
42393: PPUSH
42394: PPUSH
// sibRocketRange := 25 ;
42395: LD_ADDR_VAR 0 6
42399: PUSH
42400: LD_INT 25
42402: ST_TO_ADDR
// result := false ;
42403: LD_ADDR_VAR 0 4
42407: PUSH
42408: LD_INT 0
42410: ST_TO_ADDR
// for i := 0 to 5 do
42411: LD_ADDR_VAR 0 5
42415: PUSH
42416: DOUBLE
42417: LD_INT 0
42419: DEC
42420: ST_TO_ADDR
42421: LD_INT 5
42423: PUSH
42424: FOR_TO
42425: IFFALSE 42492
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42427: LD_VAR 0 1
42431: PPUSH
42432: LD_VAR 0 5
42436: PPUSH
42437: LD_VAR 0 6
42441: PPUSH
42442: CALL_OW 272
42446: PPUSH
42447: LD_VAR 0 2
42451: PPUSH
42452: LD_VAR 0 5
42456: PPUSH
42457: LD_VAR 0 6
42461: PPUSH
42462: CALL_OW 273
42466: PPUSH
42467: LD_VAR 0 3
42471: PPUSH
42472: CALL_OW 309
42476: IFFALSE 42490
// begin result := true ;
42478: LD_ADDR_VAR 0 4
42482: PUSH
42483: LD_INT 1
42485: ST_TO_ADDR
// exit ;
42486: POP
42487: POP
42488: GO 42494
// end ;
42490: GO 42424
42492: POP
42493: POP
// end ;
42494: LD_VAR 0 4
42498: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42499: LD_INT 0
42501: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42502: LD_VAR 0 1
42506: PPUSH
42507: LD_VAR 0 2
42511: PPUSH
42512: LD_INT 0
42514: PPUSH
42515: LD_INT 0
42517: PPUSH
42518: LD_INT 1
42520: PPUSH
42521: LD_INT 0
42523: PPUSH
42524: CALL_OW 587
// end ; end_of_file
42528: LD_VAR 0 3
42532: RET
// export ecoSide , ecoNation , ecoPeopleAmount , ecoStartPoint , ecoCratesDrop , ecoCratesDropXY , ecoCratesDropAllow , ecoAttacksAllow , ecoEventsAllow , ecoAttacksArea , ecoEventsList ; export function InitEcoMode ( startPoint , cratesDropXY , attacksArea ) ; var i , tmp , side , nation , peopleAmount , resourcesAmount ; begin
42533: LD_INT 0
42535: PPUSH
42536: PPUSH
42537: PPUSH
42538: PPUSH
42539: PPUSH
42540: PPUSH
42541: PPUSH
// ecoStartPoint := startPoint ;
42542: LD_ADDR_EXP 6
42546: PUSH
42547: LD_VAR 0 1
42551: ST_TO_ADDR
// CenterNowOnXY ( ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
42552: LD_EXP 6
42556: PUSH
42557: LD_INT 1
42559: ARRAY
42560: PPUSH
42561: LD_EXP 6
42565: PUSH
42566: LD_INT 2
42568: ARRAY
42569: PPUSH
42570: CALL_OW 86
// ecoCratesDropXY := cratesDropXY ;
42574: LD_ADDR_EXP 8
42578: PUSH
42579: LD_VAR 0 2
42583: ST_TO_ADDR
// ecoAttacksArea := attacksArea ;
42584: LD_ADDR_EXP 12
42588: PUSH
42589: LD_VAR 0 3
42593: ST_TO_ADDR
// if debug then
42594: LD_EXP 1
42598: IFFALSE 42642
// begin side := 1 ;
42600: LD_ADDR_VAR 0 7
42604: PUSH
42605: LD_INT 1
42607: ST_TO_ADDR
// nation := 1 ;
42608: LD_ADDR_VAR 0 8
42612: PUSH
42613: LD_INT 1
42615: ST_TO_ADDR
// peopleAmount := 15 ;
42616: LD_ADDR_VAR 0 9
42620: PUSH
42621: LD_INT 15
42623: ST_TO_ADDR
// resourcesAmount := 2 ;
42624: LD_ADDR_VAR 0 10
42628: PUSH
42629: LD_INT 2
42631: ST_TO_ADDR
// ecoCratesDrop := 3 ;
42632: LD_ADDR_EXP 7
42636: PUSH
42637: LD_INT 3
42639: ST_TO_ADDR
// end else
42640: GO 42738
// begin side := GetMultiplayerSetting ( 0 ) ;
42642: LD_ADDR_VAR 0 7
42646: PUSH
42647: LD_INT 0
42649: PPUSH
42650: CALL_OW 426
42654: ST_TO_ADDR
// nation := GetMultiplayerSetting ( 1 ) ;
42655: LD_ADDR_VAR 0 8
42659: PUSH
42660: LD_INT 1
42662: PPUSH
42663: CALL_OW 426
42667: ST_TO_ADDR
// peopleAmount := [ 6 , 9 , 12 , 15 , 18 , 21 , 24 ] [ GetMultiplayerSetting ( 2 ) ] ;
42668: LD_ADDR_VAR 0 9
42672: PUSH
42673: LD_INT 6
42675: PUSH
42676: LD_INT 9
42678: PUSH
42679: LD_INT 12
42681: PUSH
42682: LD_INT 15
42684: PUSH
42685: LD_INT 18
42687: PUSH
42688: LD_INT 21
42690: PUSH
42691: LD_INT 24
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 2
42705: PPUSH
42706: CALL_OW 426
42710: ARRAY
42711: ST_TO_ADDR
// resourcesAmount := GetMultiplayerSetting ( 3 ) ;
42712: LD_ADDR_VAR 0 10
42716: PUSH
42717: LD_INT 3
42719: PPUSH
42720: CALL_OW 426
42724: ST_TO_ADDR
// ecoCratesDrop := GetMultiplayerSetting ( 4 ) ;
42725: LD_ADDR_EXP 7
42729: PUSH
42730: LD_INT 4
42732: PPUSH
42733: CALL_OW 426
42737: ST_TO_ADDR
// end ; ecoCratesDropAllow := true ;
42738: LD_ADDR_EXP 9
42742: PUSH
42743: LD_INT 1
42745: ST_TO_ADDR
// ecoEventsAllow := false ;
42746: LD_ADDR_EXP 11
42750: PUSH
42751: LD_INT 0
42753: ST_TO_ADDR
// ecoAttacksAllow := false ;
42754: LD_ADDR_EXP 10
42758: PUSH
42759: LD_INT 0
42761: ST_TO_ADDR
// ecoSide := side ;
42762: LD_ADDR_EXP 3
42766: PUSH
42767: LD_VAR 0 7
42771: ST_TO_ADDR
// your_side := side ;
42772: LD_ADDR_OWVAR 2
42776: PUSH
42777: LD_VAR 0 7
42781: ST_TO_ADDR
// ChangeSideFog ( 1 , side ) ;
42782: LD_INT 1
42784: PPUSH
42785: LD_VAR 0 7
42789: PPUSH
42790: CALL_OW 343
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
42794: LD_INT 1
42796: PPUSH
42797: LD_INT 1
42799: PPUSH
42800: LD_VAR 0 7
42804: PPUSH
42805: LD_INT 32793
42807: NEG
42808: PPUSH
42809: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
42813: LD_INT 1
42815: PPUSH
42816: LD_INT 1
42818: PPUSH
42819: LD_VAR 0 7
42823: PPUSH
42824: CALL_OW 331
// ecoNation := nation ;
42828: LD_ADDR_EXP 4
42832: PUSH
42833: LD_VAR 0 8
42837: ST_TO_ADDR
// ecoPeopleAmount := peopleAmount ;
42838: LD_ADDR_EXP 5
42842: PUSH
42843: LD_VAR 0 9
42847: ST_TO_ADDR
// for i = 1 to resourcesAmount * 5 do
42848: LD_ADDR_VAR 0 5
42852: PUSH
42853: DOUBLE
42854: LD_INT 1
42856: DEC
42857: ST_TO_ADDR
42858: LD_VAR 0 10
42862: PUSH
42863: LD_INT 5
42865: MUL
42866: PUSH
42867: FOR_TO
42868: IFFALSE 42906
// CreateResourcesXYR ( mat_cans , 5 , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 6 , false ) ;
42870: LD_INT 1
42872: PPUSH
42873: LD_INT 5
42875: PPUSH
42876: LD_EXP 6
42880: PUSH
42881: LD_INT 1
42883: ARRAY
42884: PPUSH
42885: LD_EXP 6
42889: PUSH
42890: LD_INT 2
42892: ARRAY
42893: PPUSH
42894: LD_INT 6
42896: PPUSH
42897: LD_INT 0
42899: PPUSH
42900: CALL_OW 60
42904: GO 42867
42906: POP
42907: POP
// uc_side := side ;
42908: LD_ADDR_OWVAR 20
42912: PUSH
42913: LD_VAR 0 7
42917: ST_TO_ADDR
// uc_nation := nation ;
42918: LD_ADDR_OWVAR 21
42922: PUSH
42923: LD_VAR 0 8
42927: ST_TO_ADDR
// hc_importance := 100 ;
42928: LD_ADDR_OWVAR 32
42932: PUSH
42933: LD_INT 100
42935: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
42936: LD_INT 0
42938: PPUSH
42939: LD_INT 1
42941: PPUSH
42942: LD_INT 4
42944: PPUSH
42945: CALL_OW 380
// if side = 1 and nation = 1 then
42949: LD_VAR 0 7
42953: PUSH
42954: LD_INT 1
42956: EQUAL
42957: PUSH
42958: LD_VAR 0 8
42962: PUSH
42963: LD_INT 1
42965: EQUAL
42966: AND
42967: IFFALSE 43001
// begin hc_name := John Macmilan ;
42969: LD_ADDR_OWVAR 26
42973: PUSH
42974: LD_STRING John Macmilan
42976: ST_TO_ADDR
// hc_gallery := us ;
42977: LD_ADDR_OWVAR 33
42981: PUSH
42982: LD_STRING us
42984: ST_TO_ADDR
// hc_face_number := 5 ;
42985: LD_ADDR_OWVAR 34
42989: PUSH
42990: LD_INT 5
42992: ST_TO_ADDR
// hc_sex := sex_male ;
42993: LD_ADDR_OWVAR 27
42997: PUSH
42998: LD_INT 1
43000: ST_TO_ADDR
// end ; if side = 2 and nation = 2 then
43001: LD_VAR 0 7
43005: PUSH
43006: LD_INT 2
43008: EQUAL
43009: PUSH
43010: LD_VAR 0 8
43014: PUSH
43015: LD_INT 2
43017: EQUAL
43018: AND
43019: IFFALSE 43053
// begin hc_name := Heike Steyer ;
43021: LD_ADDR_OWVAR 26
43025: PUSH
43026: LD_STRING Heike Steyer
43028: ST_TO_ADDR
// hc_gallery := sandar ;
43029: LD_ADDR_OWVAR 33
43033: PUSH
43034: LD_STRING sandar
43036: ST_TO_ADDR
// hc_face_number := 14 ;
43037: LD_ADDR_OWVAR 34
43041: PUSH
43042: LD_INT 14
43044: ST_TO_ADDR
// hc_sex := sex_female ;
43045: LD_ADDR_OWVAR 27
43049: PUSH
43050: LD_INT 2
43052: ST_TO_ADDR
// end ; if side = 5 and nation = 2 then
43053: LD_VAR 0 7
43057: PUSH
43058: LD_INT 5
43060: EQUAL
43061: PUSH
43062: LD_VAR 0 8
43066: PUSH
43067: LD_INT 2
43069: EQUAL
43070: AND
43071: IFFALSE 43113
// begin hc_name := Omar Ali ;
43073: LD_ADDR_OWVAR 26
43077: PUSH
43078: LD_STRING Omar Ali
43080: ST_TO_ADDR
// hc_gallery := sandar ;
43081: LD_ADDR_OWVAR 33
43085: PUSH
43086: LD_STRING sandar
43088: ST_TO_ADDR
// hc_face_number := 6 ;
43089: LD_ADDR_OWVAR 34
43093: PUSH
43094: LD_INT 6
43096: ST_TO_ADDR
// hc_sex := sex_male ;
43097: LD_ADDR_OWVAR 27
43101: PUSH
43102: LD_INT 1
43104: ST_TO_ADDR
// hc_class := class_desert_warior ;
43105: LD_ADDR_OWVAR 28
43109: PUSH
43110: LD_INT 11
43112: ST_TO_ADDR
// end ; if side = 6 and nation = 3 then
43113: LD_VAR 0 7
43117: PUSH
43118: LD_INT 6
43120: EQUAL
43121: PUSH
43122: LD_VAR 0 8
43126: PUSH
43127: LD_INT 3
43129: EQUAL
43130: AND
43131: IFFALSE 43178
// begin PrepareHuman ( false , 3 , 4 ) ;
43133: LD_INT 0
43135: PPUSH
43136: LD_INT 3
43138: PPUSH
43139: LD_INT 4
43141: PPUSH
43142: CALL_OW 380
// hc_name := Yuri I. Burlak ;
43146: LD_ADDR_OWVAR 26
43150: PUSH
43151: LD_STRING Yuri I. Burlak
43153: ST_TO_ADDR
// hc_gallery := ru ;
43154: LD_ADDR_OWVAR 33
43158: PUSH
43159: LD_STRING ru
43161: ST_TO_ADDR
// hc_face_number := 1 ;
43162: LD_ADDR_OWVAR 34
43166: PUSH
43167: LD_INT 1
43169: ST_TO_ADDR
// hc_sex := sex_male ;
43170: LD_ADDR_OWVAR 27
43174: PUSH
43175: LD_INT 1
43177: ST_TO_ADDR
// end ; if side = 4 and nation = 1 then
43178: LD_VAR 0 7
43182: PUSH
43183: LD_INT 4
43185: EQUAL
43186: PUSH
43187: LD_VAR 0 8
43191: PUSH
43192: LD_INT 1
43194: EQUAL
43195: AND
43196: IFFALSE 43230
// begin hc_name := Arthur Powell ;
43198: LD_ADDR_OWVAR 26
43202: PUSH
43203: LD_STRING Arthur Powell
43205: ST_TO_ADDR
// hc_gallery := us ;
43206: LD_ADDR_OWVAR 33
43210: PUSH
43211: LD_STRING us
43213: ST_TO_ADDR
// hc_face_number := 7 ;
43214: LD_ADDR_OWVAR 34
43218: PUSH
43219: LD_INT 7
43221: ST_TO_ADDR
// hc_sex := sex_male ;
43222: LD_ADDR_OWVAR 27
43226: PUSH
43227: LD_INT 1
43229: ST_TO_ADDR
// end ; if side = 3 and nation = 3 then
43230: LD_VAR 0 7
43234: PUSH
43235: LD_INT 3
43237: EQUAL
43238: PUSH
43239: LD_VAR 0 8
43243: PUSH
43244: LD_INT 3
43246: EQUAL
43247: AND
43248: IFFALSE 43282
// begin hc_name := Mjr. Platonov ;
43250: LD_ADDR_OWVAR 26
43254: PUSH
43255: LD_STRING Mjr. Platonov
43257: ST_TO_ADDR
// hc_gallery := ru ;
43258: LD_ADDR_OWVAR 33
43262: PUSH
43263: LD_STRING ru
43265: ST_TO_ADDR
// hc_face_number := 60 ;
43266: LD_ADDR_OWVAR 34
43270: PUSH
43271: LD_INT 60
43273: ST_TO_ADDR
// hc_sex := sex_male ;
43274: LD_ADDR_OWVAR 27
43278: PUSH
43279: LD_INT 1
43281: ST_TO_ADDR
// end ; if side = 7 and nation = 1 then
43282: LD_VAR 0 7
43286: PUSH
43287: LD_INT 7
43289: EQUAL
43290: PUSH
43291: LD_VAR 0 8
43295: PUSH
43296: LD_INT 1
43298: EQUAL
43299: AND
43300: IFFALSE 43347
// begin PrepareHuman ( false , 4 , 4 ) ;
43302: LD_INT 0
43304: PPUSH
43305: LD_INT 4
43307: PPUSH
43308: LD_INT 4
43310: PPUSH
43311: CALL_OW 380
// hc_name := Peter Roth ;
43315: LD_ADDR_OWVAR 26
43319: PUSH
43320: LD_STRING Peter Roth
43322: ST_TO_ADDR
// hc_gallery := us ;
43323: LD_ADDR_OWVAR 33
43327: PUSH
43328: LD_STRING us
43330: ST_TO_ADDR
// hc_face_number := 22 ;
43331: LD_ADDR_OWVAR 34
43335: PUSH
43336: LD_INT 22
43338: ST_TO_ADDR
// hc_sex := sex_male ;
43339: LD_ADDR_OWVAR 27
43343: PUSH
43344: LD_INT 1
43346: ST_TO_ADDR
// end ; if side = 7 and nation = 3 then
43347: LD_VAR 0 7
43351: PUSH
43352: LD_INT 7
43354: EQUAL
43355: PUSH
43356: LD_VAR 0 8
43360: PUSH
43361: LD_INT 3
43363: EQUAL
43364: AND
43365: IFFALSE 43412
// begin PrepareHuman ( false , 4 , 4 ) ;
43367: LD_INT 0
43369: PPUSH
43370: LD_INT 4
43372: PPUSH
43373: LD_INT 4
43375: PPUSH
43376: CALL_OW 380
// hc_name := Prof. Gossudarov ;
43380: LD_ADDR_OWVAR 26
43384: PUSH
43385: LD_STRING Prof. Gossudarov
43387: ST_TO_ADDR
// hc_gallery := ru ;
43388: LD_ADDR_OWVAR 33
43392: PUSH
43393: LD_STRING ru
43395: ST_TO_ADDR
// hc_face_number := 61 ;
43396: LD_ADDR_OWVAR 34
43400: PUSH
43401: LD_INT 61
43403: ST_TO_ADDR
// hc_sex := sex_male ;
43404: LD_ADDR_OWVAR 27
43408: PUSH
43409: LD_INT 1
43411: ST_TO_ADDR
// end ; if side = 8 and nation = 1 then
43412: LD_VAR 0 7
43416: PUSH
43417: LD_INT 8
43419: EQUAL
43420: PUSH
43421: LD_VAR 0 8
43425: PUSH
43426: LD_INT 1
43428: EQUAL
43429: AND
43430: IFFALSE 43464
// begin hc_name := Ron Harisson ;
43432: LD_ADDR_OWVAR 26
43436: PUSH
43437: LD_STRING Ron Harisson
43439: ST_TO_ADDR
// hc_gallery := us ;
43440: LD_ADDR_OWVAR 33
43444: PUSH
43445: LD_STRING us
43447: ST_TO_ADDR
// hc_face_number := 6 ;
43448: LD_ADDR_OWVAR 34
43452: PUSH
43453: LD_INT 6
43455: ST_TO_ADDR
// hc_sex := sex_male ;
43456: LD_ADDR_OWVAR 27
43460: PUSH
43461: LD_INT 1
43463: ST_TO_ADDR
// end ; if side = 8 and nation = 2 then
43464: LD_VAR 0 7
43468: PUSH
43469: LD_INT 8
43471: EQUAL
43472: PUSH
43473: LD_VAR 0 8
43477: PUSH
43478: LD_INT 2
43480: EQUAL
43481: AND
43482: IFFALSE 43516
// begin hc_name := Louis Schulz ;
43484: LD_ADDR_OWVAR 26
43488: PUSH
43489: LD_STRING Louis Schulz
43491: ST_TO_ADDR
// hc_gallery := sandar ;
43492: LD_ADDR_OWVAR 33
43496: PUSH
43497: LD_STRING sandar
43499: ST_TO_ADDR
// hc_face_number := 1 ;
43500: LD_ADDR_OWVAR 34
43504: PUSH
43505: LD_INT 1
43507: ST_TO_ADDR
// hc_sex := sex_male ;
43508: LD_ADDR_OWVAR 27
43512: PUSH
43513: LD_INT 1
43515: ST_TO_ADDR
// end ; PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
43516: CALL_OW 44
43520: PPUSH
43521: LD_EXP 6
43525: PUSH
43526: LD_INT 1
43528: ARRAY
43529: PPUSH
43530: LD_EXP 6
43534: PUSH
43535: LD_INT 2
43537: ARRAY
43538: PPUSH
43539: LD_INT 12
43541: PPUSH
43542: LD_INT 0
43544: PPUSH
43545: CALL_OW 50
// InitHc_All ( ) ;
43549: CALL_OW 584
// for i = 1 to peopleAmount - 1 do
43553: LD_ADDR_VAR 0 5
43557: PUSH
43558: DOUBLE
43559: LD_INT 1
43561: DEC
43562: ST_TO_ADDR
43563: LD_VAR 0 9
43567: PUSH
43568: LD_INT 1
43570: MINUS
43571: PUSH
43572: FOR_TO
43573: IFFALSE 43668
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
43575: LD_INT 0
43577: PPUSH
43578: LD_VAR 0 5
43582: PUSH
43583: LD_INT 4
43585: MOD
43586: PUSH
43587: LD_INT 1
43589: PLUS
43590: PPUSH
43591: LD_INT 3
43593: PPUSH
43594: CALL_OW 380
// tmp := Replace ( tmp , tmp + 1 , CreateHuman ) ;
43598: LD_ADDR_VAR 0 6
43602: PUSH
43603: LD_VAR 0 6
43607: PPUSH
43608: LD_VAR 0 6
43612: PUSH
43613: LD_INT 1
43615: PLUS
43616: PPUSH
43617: CALL_OW 44
43621: PPUSH
43622: CALL_OW 1
43626: ST_TO_ADDR
// PlaceUnitXYR ( tmp [ tmp ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
43627: LD_VAR 0 6
43631: PUSH
43632: LD_VAR 0 6
43636: ARRAY
43637: PPUSH
43638: LD_EXP 6
43642: PUSH
43643: LD_INT 1
43645: ARRAY
43646: PPUSH
43647: LD_EXP 6
43651: PUSH
43652: LD_INT 2
43654: ARRAY
43655: PPUSH
43656: LD_INT 12
43658: PPUSH
43659: LD_INT 0
43661: PPUSH
43662: CALL_OW 50
// end ;
43666: GO 43572
43668: POP
43669: POP
// end ;
43670: LD_VAR 0 4
43674: RET
// every 0 0$1 trigger ecoCratesDrop and ecoCratesDropXY do var time , xy ;
43675: LD_EXP 7
43679: PUSH
43680: LD_EXP 8
43684: AND
43685: IFFALSE 43855
43687: GO 43689
43689: DISABLE
43690: LD_INT 0
43692: PPUSH
43693: PPUSH
// begin time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
43694: LD_ADDR_VAR 0 1
43698: PUSH
43699: LD_INT 700
43701: PUSH
43702: LD_INT 350
43704: PUSH
43705: LD_INT 175
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: LIST
43712: PUSH
43713: LD_EXP 7
43717: ARRAY
43718: ST_TO_ADDR
// while true do
43719: LD_INT 1
43721: IFFALSE 43855
// begin wait ( time ) ;
43723: LD_VAR 0 1
43727: PPUSH
43728: CALL_OW 67
// if not ecoCratesDropAllow then
43732: LD_EXP 9
43736: NOT
43737: IFFALSE 43741
// continue ;
43739: GO 43719
// time := time + 0 0$2 ;
43741: LD_ADDR_VAR 0 1
43745: PUSH
43746: LD_VAR 0 1
43750: PUSH
43751: LD_INT 70
43753: PLUS
43754: ST_TO_ADDR
// if time > 0 0$40 then
43755: LD_VAR 0 1
43759: PUSH
43760: LD_INT 1400
43762: GREATER
43763: IFFALSE 43790
// time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
43765: LD_ADDR_VAR 0 1
43769: PUSH
43770: LD_INT 700
43772: PUSH
43773: LD_INT 350
43775: PUSH
43776: LD_INT 175
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: LIST
43783: PUSH
43784: LD_EXP 7
43788: ARRAY
43789: ST_TO_ADDR
// xy := ecoCratesDropXY [ rand ( 1 , ecoCratesDropXY ) ] ;
43790: LD_ADDR_VAR 0 2
43794: PUSH
43795: LD_EXP 8
43799: PUSH
43800: LD_INT 1
43802: PPUSH
43803: LD_EXP 8
43807: PPUSH
43808: CALL_OW 12
43812: ARRAY
43813: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , xy [ 1 ] , xy [ 2 ] , 14 , true ) ;
43814: LD_INT 1
43816: PPUSH
43817: LD_INT 5
43819: PPUSH
43820: CALL_OW 12
43824: PPUSH
43825: LD_VAR 0 2
43829: PUSH
43830: LD_INT 1
43832: ARRAY
43833: PPUSH
43834: LD_VAR 0 2
43838: PUSH
43839: LD_INT 2
43841: ARRAY
43842: PPUSH
43843: LD_INT 14
43845: PPUSH
43846: LD_INT 1
43848: PPUSH
43849: CALL_OW 56
// end ;
43853: GO 43719
// end ;
43855: PPOPN 2
43857: END
// every 0 0$1 trigger ecoAttacksArea and ecoAttacksAllow do var time , area , tmp , i , xy , veh , dir , enemySide , waveBonus ;
43858: LD_EXP 12
43862: PUSH
43863: LD_EXP 10
43867: AND
43868: IFFALSE 44632
43870: GO 43872
43872: DISABLE
43873: LD_INT 0
43875: PPUSH
43876: PPUSH
43877: PPUSH
43878: PPUSH
43879: PPUSH
43880: PPUSH
43881: PPUSH
43882: PPUSH
43883: PPUSH
// begin time := 3 3$00 ;
43884: LD_ADDR_VAR 0 1
43888: PUSH
43889: LD_INT 6300
43891: ST_TO_ADDR
// enemySide := [ 3 , 9 ] [ rand ( 1 , 2 ) ] ;
43892: LD_ADDR_VAR 0 8
43896: PUSH
43897: LD_INT 3
43899: PUSH
43900: LD_INT 9
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: PPUSH
43910: LD_INT 2
43912: PPUSH
43913: CALL_OW 12
43917: ARRAY
43918: ST_TO_ADDR
// waveBonus := 0 ;
43919: LD_ADDR_VAR 0 9
43923: PUSH
43924: LD_INT 0
43926: ST_TO_ADDR
// if ecoSide = enemySide then
43927: LD_EXP 3
43931: PUSH
43932: LD_VAR 0 8
43936: EQUAL
43937: IFFALSE 43947
// enemySide := 1 ;
43939: LD_ADDR_VAR 0 8
43943: PUSH
43944: LD_INT 1
43946: ST_TO_ADDR
// while true do
43947: LD_INT 1
43949: IFFALSE 44632
// begin wait ( time ) ;
43951: LD_VAR 0 1
43955: PPUSH
43956: CALL_OW 67
// if not ecoAttacksAllow then
43960: LD_EXP 10
43964: NOT
43965: IFFALSE 43969
// continue ;
43967: GO 43947
// waveBonus := waveBonus + 2 ;
43969: LD_ADDR_VAR 0 9
43973: PUSH
43974: LD_VAR 0 9
43978: PUSH
43979: LD_INT 2
43981: PLUS
43982: ST_TO_ADDR
// if waveBonus > 20 then
43983: LD_VAR 0 9
43987: PUSH
43988: LD_INT 20
43990: GREATER
43991: IFFALSE 44001
// waveBonus := 20 ;
43993: LD_ADDR_VAR 0 9
43997: PUSH
43998: LD_INT 20
44000: ST_TO_ADDR
// area := ecoAttacksArea [ rand ( 1 , ecoAttacksArea ) ] ;
44001: LD_ADDR_VAR 0 2
44005: PUSH
44006: LD_EXP 12
44010: PUSH
44011: LD_INT 1
44013: PPUSH
44014: LD_EXP 12
44018: PPUSH
44019: CALL_OW 12
44023: ARRAY
44024: ST_TO_ADDR
// tmp := AreaToList ( area , 0 ) ;
44025: LD_ADDR_VAR 0 3
44029: PUSH
44030: LD_VAR 0 2
44034: PPUSH
44035: LD_INT 0
44037: PPUSH
44038: CALL_OW 517
44042: ST_TO_ADDR
// dir := GetDirFromHex ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
44043: LD_ADDR_VAR 0 7
44047: PUSH
44048: LD_VAR 0 3
44052: PUSH
44053: LD_INT 1
44055: ARRAY
44056: PUSH
44057: LD_INT 1
44059: ARRAY
44060: PPUSH
44061: LD_VAR 0 3
44065: PUSH
44066: LD_INT 2
44068: ARRAY
44069: PUSH
44070: LD_INT 1
44072: ARRAY
44073: PPUSH
44074: LD_EXP 6
44078: PUSH
44079: LD_INT 1
44081: ARRAY
44082: PPUSH
44083: LD_EXP 6
44087: PUSH
44088: LD_INT 2
44090: ARRAY
44091: PPUSH
44092: CALL 39985 0 4
44096: ST_TO_ADDR
// xy := PointBetweenXY ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
44097: LD_ADDR_VAR 0 5
44101: PUSH
44102: LD_VAR 0 3
44106: PUSH
44107: LD_INT 1
44109: ARRAY
44110: PUSH
44111: LD_INT 1
44113: ARRAY
44114: PPUSH
44115: LD_VAR 0 3
44119: PUSH
44120: LD_INT 2
44122: ARRAY
44123: PUSH
44124: LD_INT 1
44126: ARRAY
44127: PPUSH
44128: LD_EXP 6
44132: PUSH
44133: LD_INT 1
44135: ARRAY
44136: PPUSH
44137: LD_EXP 6
44141: PUSH
44142: LD_INT 2
44144: ARRAY
44145: PPUSH
44146: CALL 39125 0 4
44150: ST_TO_ADDR
// tmp := [ ] ;
44151: LD_ADDR_VAR 0 3
44155: PUSH
44156: EMPTY
44157: ST_TO_ADDR
// for i := 1 to 6 + waveBonus do
44158: LD_ADDR_VAR 0 4
44162: PUSH
44163: DOUBLE
44164: LD_INT 1
44166: DEC
44167: ST_TO_ADDR
44168: LD_INT 6
44170: PUSH
44171: LD_VAR 0 9
44175: PLUS
44176: PUSH
44177: FOR_TO
44178: IFFALSE 44497
// begin uc_side := enemySide ;
44180: LD_ADDR_OWVAR 20
44184: PUSH
44185: LD_VAR 0 8
44189: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
44190: LD_ADDR_OWVAR 21
44194: PUSH
44195: LD_INT 1
44197: PPUSH
44198: LD_INT 3
44200: PPUSH
44201: CALL_OW 12
44205: ST_TO_ADDR
// case uc_nation of 1 :
44206: LD_OWVAR 21
44210: PUSH
44211: LD_INT 1
44213: DOUBLE
44214: EQUAL
44215: IFTRUE 44219
44217: GO 44260
44219: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ; 2 :
44220: LD_INT 5
44222: PPUSH
44223: LD_INT 3
44225: PPUSH
44226: LD_INT 3
44228: PPUSH
44229: LD_INT 6
44231: PUSH
44232: LD_INT 7
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 1
44241: PPUSH
44242: LD_INT 2
44244: PPUSH
44245: CALL_OW 12
44249: ARRAY
44250: PPUSH
44251: LD_INT 100
44253: PPUSH
44254: CALL 6155 0 5
44258: GO 44363
44260: LD_INT 2
44262: DOUBLE
44263: EQUAL
44264: IFTRUE 44268
44266: GO 44313
44268: POP
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] , 100 ) ; 3 :
44269: LD_INT 14
44271: PPUSH
44272: LD_INT 3
44274: PPUSH
44275: LD_INT 5
44277: PPUSH
44278: LD_INT 27
44280: PUSH
44281: LD_INT 28
44283: PUSH
44284: LD_INT 29
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: PPUSH
44295: LD_INT 3
44297: PPUSH
44298: CALL_OW 12
44302: ARRAY
44303: PPUSH
44304: LD_INT 100
44306: PPUSH
44307: CALL 6155 0 5
44311: GO 44363
44313: LD_INT 3
44315: DOUBLE
44316: EQUAL
44317: IFTRUE 44321
44319: GO 44362
44321: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket ] [ rand ( 1 , 2 ) ] , 100 ) ; end ;
44322: LD_INT 24
44324: PPUSH
44325: LD_INT 3
44327: PPUSH
44328: LD_INT 3
44330: PPUSH
44331: LD_INT 46
44333: PUSH
44334: LD_INT 47
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: PPUSH
44344: LD_INT 2
44346: PPUSH
44347: CALL_OW 12
44351: ARRAY
44352: PPUSH
44353: LD_INT 100
44355: PPUSH
44356: CALL 6155 0 5
44360: GO 44363
44362: POP
// veh := CreateVehicle ;
44363: LD_ADDR_VAR 0 6
44367: PUSH
44368: CALL_OW 45
44372: ST_TO_ADDR
// SetDir ( veh , dir ) ;
44373: LD_VAR 0 6
44377: PPUSH
44378: LD_VAR 0 7
44382: PPUSH
44383: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
44387: LD_VAR 0 6
44391: PPUSH
44392: LD_VAR 0 2
44396: PPUSH
44397: LD_INT 0
44399: PPUSH
44400: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
44404: LD_ADDR_VAR 0 3
44408: PUSH
44409: LD_VAR 0 3
44413: PPUSH
44414: LD_VAR 0 3
44418: PUSH
44419: LD_INT 1
44421: PLUS
44422: PPUSH
44423: LD_VAR 0 6
44427: PPUSH
44428: CALL_OW 1
44432: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) = 0 then
44433: LD_VAR 0 5
44437: PUSH
44438: LD_INT 1
44440: ARRAY
44441: PPUSH
44442: LD_VAR 0 5
44446: PUSH
44447: LD_INT 2
44449: ARRAY
44450: PPUSH
44451: CALL_OW 428
44455: PUSH
44456: LD_INT 0
44458: EQUAL
44459: IFFALSE 44488
// ComMoveXY ( veh , xy [ 1 ] , xy [ 2 ] ) ;
44461: LD_VAR 0 6
44465: PPUSH
44466: LD_VAR 0 5
44470: PUSH
44471: LD_INT 1
44473: ARRAY
44474: PPUSH
44475: LD_VAR 0 5
44479: PUSH
44480: LD_INT 2
44482: ARRAY
44483: PPUSH
44484: CALL_OW 111
// wait ( 0 0$0.5 ) ;
44488: LD_INT 18
44490: PPUSH
44491: CALL_OW 67
// end ;
44495: GO 44177
44497: POP
44498: POP
// if tmp then
44499: LD_VAR 0 3
44503: IFFALSE 44630
// begin repeat wait ( 0 0$2 ) ;
44505: LD_INT 70
44507: PPUSH
44508: CALL_OW 67
// for i in tmp do
44512: LD_ADDR_VAR 0 4
44516: PUSH
44517: LD_VAR 0 3
44521: PUSH
44522: FOR_IN
44523: IFFALSE 44621
// begin if IsDead ( i ) or not IsPlaced ( i ) or GetSide ( i ) <> enemySide then
44525: LD_VAR 0 4
44529: PPUSH
44530: CALL_OW 301
44534: PUSH
44535: LD_VAR 0 4
44539: PPUSH
44540: CALL_OW 305
44544: NOT
44545: OR
44546: PUSH
44547: LD_VAR 0 4
44551: PPUSH
44552: CALL_OW 255
44556: PUSH
44557: LD_VAR 0 8
44561: NONEQUAL
44562: OR
44563: IFFALSE 44583
// tmp := tmp diff i else
44565: LD_ADDR_VAR 0 3
44569: PUSH
44570: LD_VAR 0 3
44574: PUSH
44575: LD_VAR 0 4
44579: DIFF
44580: ST_TO_ADDR
44581: GO 44619
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , ecoSide ] ) , i ) ) ;
44583: LD_VAR 0 4
44587: PPUSH
44588: LD_INT 22
44590: PUSH
44591: LD_EXP 3
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PPUSH
44600: CALL_OW 69
44604: PPUSH
44605: LD_VAR 0 4
44609: PPUSH
44610: CALL_OW 74
44614: PPUSH
44615: CALL_OW 115
// end ;
44619: GO 44522
44621: POP
44622: POP
// until not tmp ;
44623: LD_VAR 0 3
44627: NOT
44628: IFFALSE 44505
// end ; end ;
44630: GO 43947
// end ;
44632: PPOPN 9
44634: END
// every 0 0$1 trigger ecoEventsAllow do var time , xy ;
44635: LD_EXP 11
44639: IFFALSE 44692
44641: GO 44643
44643: DISABLE
44644: LD_INT 0
44646: PPUSH
44647: PPUSH
// begin time := rand ( 1 1$00 , 10 10$00 ) ;
44648: LD_ADDR_VAR 0 1
44652: PUSH
44653: LD_INT 2100
44655: PPUSH
44656: LD_INT 21000
44658: PPUSH
44659: CALL_OW 12
44663: ST_TO_ADDR
// while true do
44664: LD_INT 1
44666: IFFALSE 44692
// begin wait ( time ) ;
44668: LD_VAR 0 1
44672: PPUSH
44673: CALL_OW 67
// if not ecoEventsAllow then
44677: LD_EXP 11
44681: NOT
44682: IFFALSE 44686
// continue ;
44684: GO 44664
// EcoEvent ( ) ;
44686: CALL 44695 0 0
// end ;
44690: GO 44664
// end ;
44692: PPOPN 2
44694: END
// export function EcoEvent ( ) ; var event , tmp , i ; begin
44695: LD_INT 0
44697: PPUSH
44698: PPUSH
44699: PPUSH
44700: PPUSH
// event := rand ( 1 , 5 ) ;
44701: LD_ADDR_VAR 0 2
44705: PUSH
44706: LD_INT 1
44708: PPUSH
44709: LD_INT 5
44711: PPUSH
44712: CALL_OW 12
44716: ST_TO_ADDR
// case event of 1 :
44717: LD_VAR 0 2
44721: PUSH
44722: LD_INT 1
44724: DOUBLE
44725: EQUAL
44726: IFTRUE 44730
44728: GO 44816
44730: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_building ] ) diff FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
44731: LD_ADDR_VAR 0 3
44735: PUSH
44736: LD_INT 21
44738: PUSH
44739: LD_INT 3
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PPUSH
44746: CALL_OW 69
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: LD_INT 30
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 30
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: LIST
44778: PPUSH
44779: CALL_OW 69
44783: DIFF
44784: ST_TO_ADDR
// if tmp then
44785: LD_VAR 0 3
44789: IFFALSE 44814
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
44791: LD_VAR 0 3
44795: PUSH
44796: LD_INT 1
44798: PPUSH
44799: LD_VAR 0 3
44803: PPUSH
44804: CALL_OW 12
44808: ARRAY
44809: PPUSH
44810: CALL_OW 65
// end ; 2 :
44814: GO 45015
44816: LD_INT 2
44818: DOUBLE
44819: EQUAL
44820: IFTRUE 44824
44822: GO 44880
44824: POP
// begin uc_side := ecoSide ;
44825: LD_ADDR_OWVAR 20
44829: PUSH
44830: LD_EXP 3
44834: ST_TO_ADDR
// uc_nation := ecoNation ;
44835: LD_ADDR_OWVAR 21
44839: PUSH
44840: LD_EXP 4
44844: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 8 ) ;
44845: LD_INT 0
44847: PPUSH
44848: LD_INT 1
44850: PPUSH
44851: LD_INT 4
44853: PPUSH
44854: CALL_OW 12
44858: PPUSH
44859: LD_INT 8
44861: PPUSH
44862: CALL_OW 380
// PlaceUnitAnyWhere ( CreateHuman , true ) ;
44866: CALL_OW 44
44870: PPUSH
44871: LD_INT 1
44873: PPUSH
44874: CALL_OW 51
// end ; 3 :
44878: GO 45015
44880: LD_INT 3
44882: DOUBLE
44883: EQUAL
44884: IFTRUE 44888
44886: GO 44940
44888: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_vehicle ] ) ;
44889: LD_ADDR_VAR 0 3
44893: PUSH
44894: LD_INT 21
44896: PUSH
44897: LD_INT 2
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PPUSH
44904: CALL_OW 69
44908: ST_TO_ADDR
// if tmp then
44909: LD_VAR 0 3
44913: IFFALSE 44938
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
44915: LD_VAR 0 3
44919: PUSH
44920: LD_INT 1
44922: PPUSH
44923: LD_VAR 0 3
44927: PPUSH
44928: CALL_OW 12
44932: ARRAY
44933: PPUSH
44934: CALL_OW 65
// end ; 4 :
44938: GO 45015
44940: LD_INT 4
44942: DOUBLE
44943: EQUAL
44944: IFTRUE 44948
44946: GO 45003
44948: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_human ] ) ;
44949: LD_ADDR_VAR 0 3
44953: PUSH
44954: LD_INT 21
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PPUSH
44964: CALL_OW 69
44968: ST_TO_ADDR
// if tmp then
44969: LD_VAR 0 3
44973: IFFALSE 45001
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 190 ) ;
44975: LD_VAR 0 3
44979: PUSH
44980: LD_INT 1
44982: PPUSH
44983: LD_VAR 0 3
44987: PPUSH
44988: CALL_OW 12
44992: ARRAY
44993: PPUSH
44994: LD_INT 190
44996: PPUSH
44997: CALL_OW 234
// end ; 5 :
45001: GO 45015
45003: LD_INT 5
45005: DOUBLE
45006: EQUAL
45007: IFTRUE 45011
45009: GO 45014
45011: POP
// begin end ; end ;
45012: GO 45015
45014: POP
// end ;
45015: LD_VAR 0 1
45019: RET
// export function EcoEnableAllTechs ( ) ; var i ; begin
45020: LD_INT 0
45022: PPUSH
45023: PPUSH
// for i := 1 to 100 do
45024: LD_ADDR_VAR 0 2
45028: PUSH
45029: DOUBLE
45030: LD_INT 1
45032: DEC
45033: ST_TO_ADDR
45034: LD_INT 100
45036: PUSH
45037: FOR_TO
45038: IFFALSE 45059
// SetTech ( i , ecoSide , state_researched ) ;
45040: LD_VAR 0 2
45044: PPUSH
45045: LD_EXP 3
45049: PPUSH
45050: LD_INT 2
45052: PPUSH
45053: CALL_OW 322
45057: GO 45037
45059: POP
45060: POP
// end ;
45061: LD_VAR 0 1
45065: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
45066: LD_VAR 0 2
45070: PUSH
45071: LD_INT 102
45073: EQUAL
45074: IFFALSE 45266
// begin case p3 of 1 :
45076: LD_VAR 0 3
45080: PUSH
45081: LD_INT 1
45083: DOUBLE
45084: EQUAL
45085: IFTRUE 45089
45087: GO 45107
45089: POP
// ecoEventsAllow := Negate ( ecoEventsAllow ) ; 2 :
45090: LD_ADDR_EXP 11
45094: PUSH
45095: LD_EXP 11
45099: PPUSH
45100: CALL 39922 0 1
45104: ST_TO_ADDR
45105: GO 45264
45107: LD_INT 2
45109: DOUBLE
45110: EQUAL
45111: IFTRUE 45115
45113: GO 45133
45115: POP
// ecoAttacksAllow := Negate ( ecoAttacksAllow ) ; 3 :
45116: LD_ADDR_EXP 10
45120: PUSH
45121: LD_EXP 10
45125: PPUSH
45126: CALL 39922 0 1
45130: ST_TO_ADDR
45131: GO 45264
45133: LD_INT 3
45135: DOUBLE
45136: EQUAL
45137: IFTRUE 45141
45139: GO 45159
45141: POP
// ecoCratesDropAllow := Negate ( ecoCratesDropAllow ) ; 4 :
45142: LD_ADDR_EXP 9
45146: PUSH
45147: LD_EXP 9
45151: PPUSH
45152: CALL 39922 0 1
45156: ST_TO_ADDR
45157: GO 45264
45159: LD_INT 4
45161: DOUBLE
45162: EQUAL
45163: IFTRUE 45167
45165: GO 45174
45167: POP
// EcoEnableAllTechs ( ) ; 5 .. 8 :
45168: CALL 45020 0 0
45172: GO 45264
45174: LD_INT 5
45176: DOUBLE
45177: GREATEREQUAL
45178: IFFALSE 45186
45180: LD_INT 8
45182: DOUBLE
45183: LESSEQUAL
45184: IFTRUE 45188
45186: GO 45263
45188: POP
// begin uc_side := ecoSide ;
45189: LD_ADDR_OWVAR 20
45193: PUSH
45194: LD_EXP 3
45198: ST_TO_ADDR
// uc_nation := ecoNation ;
45199: LD_ADDR_OWVAR 21
45203: PUSH
45204: LD_EXP 4
45208: ST_TO_ADDR
// PrepareHuman ( false , p3 - 4 , 4 ) ;
45209: LD_INT 0
45211: PPUSH
45212: LD_VAR 0 3
45216: PUSH
45217: LD_INT 4
45219: MINUS
45220: PPUSH
45221: LD_INT 4
45223: PPUSH
45224: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , true ) ;
45228: CALL_OW 44
45232: PPUSH
45233: LD_EXP 6
45237: PUSH
45238: LD_INT 1
45240: ARRAY
45241: PPUSH
45242: LD_EXP 6
45246: PUSH
45247: LD_INT 2
45249: ARRAY
45250: PPUSH
45251: LD_INT 12
45253: PPUSH
45254: LD_INT 1
45256: PPUSH
45257: CALL_OW 50
// end ; end ;
45261: GO 45264
45263: POP
// end else
45264: GO 45300
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
45266: LD_VAR 0 1
45270: PPUSH
45271: LD_VAR 0 2
45275: PPUSH
45276: LD_VAR 0 3
45280: PPUSH
45281: LD_VAR 0 4
45285: PPUSH
45286: LD_VAR 0 5
45290: PPUSH
45291: LD_VAR 0 6
45295: PPUSH
45296: CALL 45387 0 6
// end ;
45300: PPOPN 6
45302: END
// on MapStart ( p ) do begin if gameType = 1 then
45303: LD_EXP 2
45307: PUSH
45308: LD_INT 1
45310: EQUAL
45311: IFFALSE 45322
// ToLua ( SKIRMISH_GAME_TYPE = 1 ) else
45313: LD_STRING SKIRMISH_GAME_TYPE = 1
45315: PPUSH
45316: CALL_OW 559
45320: GO 45329
// ToLua ( SKIRMISH_GAME_TYPE = 0 ) ;
45322: LD_STRING SKIRMISH_GAME_TYPE = 0
45324: PPUSH
45325: CALL_OW 559
// SOS_MapStart ( ) ;
45329: CALL 45358 0 0
// end ; end_of_file
45333: PPOPN 1
45335: END
// every 0 0$1 do
45336: GO 45338
45338: DISABLE
// begin enable ;
45339: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
45340: LD_STRING updateTimer(
45342: PUSH
45343: LD_OWVAR 1
45347: STR
45348: PUSH
45349: LD_STRING );
45351: STR
45352: PPUSH
45353: CALL_OW 559
// end ;
45357: END
// export function SOS_MapStart ( ) ; begin
45358: LD_INT 0
45360: PPUSH
// if streamModeActive then
45361: LD_EXP 14
45365: IFFALSE 45374
// DefineStreamItems ( true ) ;
45367: LD_INT 1
45369: PPUSH
45370: CALL 47028 0 1
// UpdateFactoryWaypoints ( ) ;
45374: CALL 59889 0 0
// UpdateWarehouseGatheringPoints ( ) ;
45378: CALL 60146 0 0
// end ;
45382: LD_VAR 0 1
45386: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
45387: LD_INT 0
45389: PPUSH
// if p2 = hack_mode then
45390: LD_VAR 0 2
45394: PUSH
45395: LD_INT 100
45397: EQUAL
45398: IFFALSE 46401
// begin if not StreamModeActive then
45400: LD_EXP 14
45404: NOT
45405: IFFALSE 45415
// StreamModeActive := true ;
45407: LD_ADDR_EXP 14
45411: PUSH
45412: LD_INT 1
45414: ST_TO_ADDR
// if p3 = 0 then
45415: LD_VAR 0 3
45419: PUSH
45420: LD_INT 0
45422: EQUAL
45423: IFFALSE 45429
// InitStreamMode ;
45425: CALL 46564 0 0
// if p3 = 1 then
45429: LD_VAR 0 3
45433: PUSH
45434: LD_INT 1
45436: EQUAL
45437: IFFALSE 45447
// sRocket := true ;
45439: LD_ADDR_EXP 19
45443: PUSH
45444: LD_INT 1
45446: ST_TO_ADDR
// if p3 = 2 then
45447: LD_VAR 0 3
45451: PUSH
45452: LD_INT 2
45454: EQUAL
45455: IFFALSE 45465
// sSpeed := true ;
45457: LD_ADDR_EXP 18
45461: PUSH
45462: LD_INT 1
45464: ST_TO_ADDR
// if p3 = 3 then
45465: LD_VAR 0 3
45469: PUSH
45470: LD_INT 3
45472: EQUAL
45473: IFFALSE 45483
// sEngine := true ;
45475: LD_ADDR_EXP 20
45479: PUSH
45480: LD_INT 1
45482: ST_TO_ADDR
// if p3 = 4 then
45483: LD_VAR 0 3
45487: PUSH
45488: LD_INT 4
45490: EQUAL
45491: IFFALSE 45501
// sSpec := true ;
45493: LD_ADDR_EXP 17
45497: PUSH
45498: LD_INT 1
45500: ST_TO_ADDR
// if p3 = 5 then
45501: LD_VAR 0 3
45505: PUSH
45506: LD_INT 5
45508: EQUAL
45509: IFFALSE 45519
// sLevel := true ;
45511: LD_ADDR_EXP 21
45515: PUSH
45516: LD_INT 1
45518: ST_TO_ADDR
// if p3 = 6 then
45519: LD_VAR 0 3
45523: PUSH
45524: LD_INT 6
45526: EQUAL
45527: IFFALSE 45537
// sArmoury := true ;
45529: LD_ADDR_EXP 22
45533: PUSH
45534: LD_INT 1
45536: ST_TO_ADDR
// if p3 = 7 then
45537: LD_VAR 0 3
45541: PUSH
45542: LD_INT 7
45544: EQUAL
45545: IFFALSE 45555
// sRadar := true ;
45547: LD_ADDR_EXP 23
45551: PUSH
45552: LD_INT 1
45554: ST_TO_ADDR
// if p3 = 8 then
45555: LD_VAR 0 3
45559: PUSH
45560: LD_INT 8
45562: EQUAL
45563: IFFALSE 45573
// sBunker := true ;
45565: LD_ADDR_EXP 24
45569: PUSH
45570: LD_INT 1
45572: ST_TO_ADDR
// if p3 = 9 then
45573: LD_VAR 0 3
45577: PUSH
45578: LD_INT 9
45580: EQUAL
45581: IFFALSE 45591
// sHack := true ;
45583: LD_ADDR_EXP 25
45587: PUSH
45588: LD_INT 1
45590: ST_TO_ADDR
// if p3 = 10 then
45591: LD_VAR 0 3
45595: PUSH
45596: LD_INT 10
45598: EQUAL
45599: IFFALSE 45609
// sFire := true ;
45601: LD_ADDR_EXP 26
45605: PUSH
45606: LD_INT 1
45608: ST_TO_ADDR
// if p3 = 11 then
45609: LD_VAR 0 3
45613: PUSH
45614: LD_INT 11
45616: EQUAL
45617: IFFALSE 45627
// sRefresh := true ;
45619: LD_ADDR_EXP 27
45623: PUSH
45624: LD_INT 1
45626: ST_TO_ADDR
// if p3 = 12 then
45627: LD_VAR 0 3
45631: PUSH
45632: LD_INT 12
45634: EQUAL
45635: IFFALSE 45645
// sExp := true ;
45637: LD_ADDR_EXP 28
45641: PUSH
45642: LD_INT 1
45644: ST_TO_ADDR
// if p3 = 13 then
45645: LD_VAR 0 3
45649: PUSH
45650: LD_INT 13
45652: EQUAL
45653: IFFALSE 45663
// sDepot := true ;
45655: LD_ADDR_EXP 29
45659: PUSH
45660: LD_INT 1
45662: ST_TO_ADDR
// if p3 = 14 then
45663: LD_VAR 0 3
45667: PUSH
45668: LD_INT 14
45670: EQUAL
45671: IFFALSE 45681
// sFlag := true ;
45673: LD_ADDR_EXP 30
45677: PUSH
45678: LD_INT 1
45680: ST_TO_ADDR
// if p3 = 15 then
45681: LD_VAR 0 3
45685: PUSH
45686: LD_INT 15
45688: EQUAL
45689: IFFALSE 45699
// sKamikadze := true ;
45691: LD_ADDR_EXP 38
45695: PUSH
45696: LD_INT 1
45698: ST_TO_ADDR
// if p3 = 16 then
45699: LD_VAR 0 3
45703: PUSH
45704: LD_INT 16
45706: EQUAL
45707: IFFALSE 45717
// sTroll := true ;
45709: LD_ADDR_EXP 39
45713: PUSH
45714: LD_INT 1
45716: ST_TO_ADDR
// if p3 = 17 then
45717: LD_VAR 0 3
45721: PUSH
45722: LD_INT 17
45724: EQUAL
45725: IFFALSE 45735
// sSlow := true ;
45727: LD_ADDR_EXP 40
45731: PUSH
45732: LD_INT 1
45734: ST_TO_ADDR
// if p3 = 18 then
45735: LD_VAR 0 3
45739: PUSH
45740: LD_INT 18
45742: EQUAL
45743: IFFALSE 45753
// sLack := true ;
45745: LD_ADDR_EXP 41
45749: PUSH
45750: LD_INT 1
45752: ST_TO_ADDR
// if p3 = 19 then
45753: LD_VAR 0 3
45757: PUSH
45758: LD_INT 19
45760: EQUAL
45761: IFFALSE 45771
// sTank := true ;
45763: LD_ADDR_EXP 43
45767: PUSH
45768: LD_INT 1
45770: ST_TO_ADDR
// if p3 = 20 then
45771: LD_VAR 0 3
45775: PUSH
45776: LD_INT 20
45778: EQUAL
45779: IFFALSE 45789
// sRemote := true ;
45781: LD_ADDR_EXP 44
45785: PUSH
45786: LD_INT 1
45788: ST_TO_ADDR
// if p3 = 21 then
45789: LD_VAR 0 3
45793: PUSH
45794: LD_INT 21
45796: EQUAL
45797: IFFALSE 45807
// sPowell := true ;
45799: LD_ADDR_EXP 45
45803: PUSH
45804: LD_INT 1
45806: ST_TO_ADDR
// if p3 = 22 then
45807: LD_VAR 0 3
45811: PUSH
45812: LD_INT 22
45814: EQUAL
45815: IFFALSE 45825
// sTeleport := true ;
45817: LD_ADDR_EXP 48
45821: PUSH
45822: LD_INT 1
45824: ST_TO_ADDR
// if p3 = 23 then
45825: LD_VAR 0 3
45829: PUSH
45830: LD_INT 23
45832: EQUAL
45833: IFFALSE 45843
// sOilTower := true ;
45835: LD_ADDR_EXP 50
45839: PUSH
45840: LD_INT 1
45842: ST_TO_ADDR
// if p3 = 24 then
45843: LD_VAR 0 3
45847: PUSH
45848: LD_INT 24
45850: EQUAL
45851: IFFALSE 45861
// sShovel := true ;
45853: LD_ADDR_EXP 51
45857: PUSH
45858: LD_INT 1
45860: ST_TO_ADDR
// if p3 = 25 then
45861: LD_VAR 0 3
45865: PUSH
45866: LD_INT 25
45868: EQUAL
45869: IFFALSE 45879
// sSheik := true ;
45871: LD_ADDR_EXP 52
45875: PUSH
45876: LD_INT 1
45878: ST_TO_ADDR
// if p3 = 26 then
45879: LD_VAR 0 3
45883: PUSH
45884: LD_INT 26
45886: EQUAL
45887: IFFALSE 45897
// sEarthquake := true ;
45889: LD_ADDR_EXP 54
45893: PUSH
45894: LD_INT 1
45896: ST_TO_ADDR
// if p3 = 27 then
45897: LD_VAR 0 3
45901: PUSH
45902: LD_INT 27
45904: EQUAL
45905: IFFALSE 45915
// sAI := true ;
45907: LD_ADDR_EXP 55
45911: PUSH
45912: LD_INT 1
45914: ST_TO_ADDR
// if p3 = 28 then
45915: LD_VAR 0 3
45919: PUSH
45920: LD_INT 28
45922: EQUAL
45923: IFFALSE 45933
// sCargo := true ;
45925: LD_ADDR_EXP 58
45929: PUSH
45930: LD_INT 1
45932: ST_TO_ADDR
// if p3 = 29 then
45933: LD_VAR 0 3
45937: PUSH
45938: LD_INT 29
45940: EQUAL
45941: IFFALSE 45951
// sDLaser := true ;
45943: LD_ADDR_EXP 59
45947: PUSH
45948: LD_INT 1
45950: ST_TO_ADDR
// if p3 = 30 then
45951: LD_VAR 0 3
45955: PUSH
45956: LD_INT 30
45958: EQUAL
45959: IFFALSE 45969
// sExchange := true ;
45961: LD_ADDR_EXP 60
45965: PUSH
45966: LD_INT 1
45968: ST_TO_ADDR
// if p3 = 31 then
45969: LD_VAR 0 3
45973: PUSH
45974: LD_INT 31
45976: EQUAL
45977: IFFALSE 45987
// sFac := true ;
45979: LD_ADDR_EXP 61
45983: PUSH
45984: LD_INT 1
45986: ST_TO_ADDR
// if p3 = 32 then
45987: LD_VAR 0 3
45991: PUSH
45992: LD_INT 32
45994: EQUAL
45995: IFFALSE 46005
// sPower := true ;
45997: LD_ADDR_EXP 62
46001: PUSH
46002: LD_INT 1
46004: ST_TO_ADDR
// if p3 = 33 then
46005: LD_VAR 0 3
46009: PUSH
46010: LD_INT 33
46012: EQUAL
46013: IFFALSE 46023
// sRandom := true ;
46015: LD_ADDR_EXP 63
46019: PUSH
46020: LD_INT 1
46022: ST_TO_ADDR
// if p3 = 34 then
46023: LD_VAR 0 3
46027: PUSH
46028: LD_INT 34
46030: EQUAL
46031: IFFALSE 46041
// sShield := true ;
46033: LD_ADDR_EXP 64
46037: PUSH
46038: LD_INT 1
46040: ST_TO_ADDR
// if p3 = 35 then
46041: LD_VAR 0 3
46045: PUSH
46046: LD_INT 35
46048: EQUAL
46049: IFFALSE 46059
// sTime := true ;
46051: LD_ADDR_EXP 65
46055: PUSH
46056: LD_INT 1
46058: ST_TO_ADDR
// if p3 = 36 then
46059: LD_VAR 0 3
46063: PUSH
46064: LD_INT 36
46066: EQUAL
46067: IFFALSE 46077
// sTools := true ;
46069: LD_ADDR_EXP 66
46073: PUSH
46074: LD_INT 1
46076: ST_TO_ADDR
// if p3 = 101 then
46077: LD_VAR 0 3
46081: PUSH
46082: LD_INT 101
46084: EQUAL
46085: IFFALSE 46095
// sSold := true ;
46087: LD_ADDR_EXP 31
46091: PUSH
46092: LD_INT 1
46094: ST_TO_ADDR
// if p3 = 102 then
46095: LD_VAR 0 3
46099: PUSH
46100: LD_INT 102
46102: EQUAL
46103: IFFALSE 46113
// sDiff := true ;
46105: LD_ADDR_EXP 32
46109: PUSH
46110: LD_INT 1
46112: ST_TO_ADDR
// if p3 = 103 then
46113: LD_VAR 0 3
46117: PUSH
46118: LD_INT 103
46120: EQUAL
46121: IFFALSE 46131
// sFog := true ;
46123: LD_ADDR_EXP 35
46127: PUSH
46128: LD_INT 1
46130: ST_TO_ADDR
// if p3 = 104 then
46131: LD_VAR 0 3
46135: PUSH
46136: LD_INT 104
46138: EQUAL
46139: IFFALSE 46149
// sReset := true ;
46141: LD_ADDR_EXP 36
46145: PUSH
46146: LD_INT 1
46148: ST_TO_ADDR
// if p3 = 105 then
46149: LD_VAR 0 3
46153: PUSH
46154: LD_INT 105
46156: EQUAL
46157: IFFALSE 46167
// sSun := true ;
46159: LD_ADDR_EXP 37
46163: PUSH
46164: LD_INT 1
46166: ST_TO_ADDR
// if p3 = 106 then
46167: LD_VAR 0 3
46171: PUSH
46172: LD_INT 106
46174: EQUAL
46175: IFFALSE 46185
// sTiger := true ;
46177: LD_ADDR_EXP 33
46181: PUSH
46182: LD_INT 1
46184: ST_TO_ADDR
// if p3 = 107 then
46185: LD_VAR 0 3
46189: PUSH
46190: LD_INT 107
46192: EQUAL
46193: IFFALSE 46203
// sBomb := true ;
46195: LD_ADDR_EXP 34
46199: PUSH
46200: LD_INT 1
46202: ST_TO_ADDR
// if p3 = 108 then
46203: LD_VAR 0 3
46207: PUSH
46208: LD_INT 108
46210: EQUAL
46211: IFFALSE 46221
// sWound := true ;
46213: LD_ADDR_EXP 42
46217: PUSH
46218: LD_INT 1
46220: ST_TO_ADDR
// if p3 = 109 then
46221: LD_VAR 0 3
46225: PUSH
46226: LD_INT 109
46228: EQUAL
46229: IFFALSE 46239
// sBetray := true ;
46231: LD_ADDR_EXP 46
46235: PUSH
46236: LD_INT 1
46238: ST_TO_ADDR
// if p3 = 110 then
46239: LD_VAR 0 3
46243: PUSH
46244: LD_INT 110
46246: EQUAL
46247: IFFALSE 46257
// sContamin := true ;
46249: LD_ADDR_EXP 47
46253: PUSH
46254: LD_INT 1
46256: ST_TO_ADDR
// if p3 = 111 then
46257: LD_VAR 0 3
46261: PUSH
46262: LD_INT 111
46264: EQUAL
46265: IFFALSE 46275
// sOil := true ;
46267: LD_ADDR_EXP 49
46271: PUSH
46272: LD_INT 1
46274: ST_TO_ADDR
// if p3 = 112 then
46275: LD_VAR 0 3
46279: PUSH
46280: LD_INT 112
46282: EQUAL
46283: IFFALSE 46293
// sStu := true ;
46285: LD_ADDR_EXP 53
46289: PUSH
46290: LD_INT 1
46292: ST_TO_ADDR
// if p3 = 113 then
46293: LD_VAR 0 3
46297: PUSH
46298: LD_INT 113
46300: EQUAL
46301: IFFALSE 46311
// sBazooka := true ;
46303: LD_ADDR_EXP 56
46307: PUSH
46308: LD_INT 1
46310: ST_TO_ADDR
// if p3 = 114 then
46311: LD_VAR 0 3
46315: PUSH
46316: LD_INT 114
46318: EQUAL
46319: IFFALSE 46329
// sMortar := true ;
46321: LD_ADDR_EXP 57
46325: PUSH
46326: LD_INT 1
46328: ST_TO_ADDR
// if p3 = 115 then
46329: LD_VAR 0 3
46333: PUSH
46334: LD_INT 115
46336: EQUAL
46337: IFFALSE 46347
// sRanger := true ;
46339: LD_ADDR_EXP 67
46343: PUSH
46344: LD_INT 1
46346: ST_TO_ADDR
// if p3 = 116 then
46347: LD_VAR 0 3
46351: PUSH
46352: LD_INT 116
46354: EQUAL
46355: IFFALSE 46365
// sComputer := true ;
46357: LD_ADDR_EXP 68
46361: PUSH
46362: LD_INT 1
46364: ST_TO_ADDR
// if p3 = 117 then
46365: LD_VAR 0 3
46369: PUSH
46370: LD_INT 117
46372: EQUAL
46373: IFFALSE 46383
// s30 := true ;
46375: LD_ADDR_EXP 69
46379: PUSH
46380: LD_INT 1
46382: ST_TO_ADDR
// if p3 = 118 then
46383: LD_VAR 0 3
46387: PUSH
46388: LD_INT 118
46390: EQUAL
46391: IFFALSE 46401
// s60 := true ;
46393: LD_ADDR_EXP 70
46397: PUSH
46398: LD_INT 1
46400: ST_TO_ADDR
// end ; if p2 = stream_mode then
46401: LD_VAR 0 2
46405: PUSH
46406: LD_INT 101
46408: EQUAL
46409: IFFALSE 46537
// begin case p3 of 1 :
46411: LD_VAR 0 3
46415: PUSH
46416: LD_INT 1
46418: DOUBLE
46419: EQUAL
46420: IFTRUE 46424
46422: GO 46431
46424: POP
// hHackUnlimitedResources ; 2 :
46425: CALL 58635 0 0
46429: GO 46537
46431: LD_INT 2
46433: DOUBLE
46434: EQUAL
46435: IFTRUE 46439
46437: GO 46446
46439: POP
// hHackSetLevel10 ; 3 :
46440: CALL 58768 0 0
46444: GO 46537
46446: LD_INT 3
46448: DOUBLE
46449: EQUAL
46450: IFTRUE 46454
46452: GO 46461
46454: POP
// hHackSetLevel10YourUnits ; 4 :
46455: CALL 58853 0 0
46459: GO 46537
46461: LD_INT 4
46463: DOUBLE
46464: EQUAL
46465: IFTRUE 46469
46467: GO 46476
46469: POP
// hHackInvincible ; 5 :
46470: CALL 59301 0 0
46474: GO 46537
46476: LD_INT 5
46478: DOUBLE
46479: EQUAL
46480: IFTRUE 46484
46482: GO 46491
46484: POP
// hHackInvisible ; 6 :
46485: CALL 59412 0 0
46489: GO 46537
46491: LD_INT 6
46493: DOUBLE
46494: EQUAL
46495: IFTRUE 46499
46497: GO 46506
46499: POP
// hHackChangeYourSide ; 7 :
46500: CALL 59469 0 0
46504: GO 46537
46506: LD_INT 7
46508: DOUBLE
46509: EQUAL
46510: IFTRUE 46514
46512: GO 46521
46514: POP
// hHackChangeUnitSide ; 8 :
46515: CALL 59511 0 0
46519: GO 46537
46521: LD_INT 8
46523: DOUBLE
46524: EQUAL
46525: IFTRUE 46529
46527: GO 46536
46529: POP
// hHackFog ; end ;
46530: CALL 59612 0 0
46534: GO 46537
46536: POP
// end ; end ;
46537: LD_VAR 0 7
46541: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
46542: GO 46544
46544: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
46545: LD_STRING initStreamRollete();
46547: PPUSH
46548: CALL_OW 559
// InitStreamMode ;
46552: CALL 46564 0 0
// DefineStreamItems ( false ) ;
46556: LD_INT 0
46558: PPUSH
46559: CALL 47028 0 1
// end ;
46563: END
// function InitStreamMode ; begin
46564: LD_INT 0
46566: PPUSH
// streamModeActive := false ;
46567: LD_ADDR_EXP 14
46571: PUSH
46572: LD_INT 0
46574: ST_TO_ADDR
// normalCounter := 36 ;
46575: LD_ADDR_EXP 15
46579: PUSH
46580: LD_INT 36
46582: ST_TO_ADDR
// hardcoreCounter := 18 ;
46583: LD_ADDR_EXP 16
46587: PUSH
46588: LD_INT 18
46590: ST_TO_ADDR
// sRocket := false ;
46591: LD_ADDR_EXP 19
46595: PUSH
46596: LD_INT 0
46598: ST_TO_ADDR
// sSpeed := false ;
46599: LD_ADDR_EXP 18
46603: PUSH
46604: LD_INT 0
46606: ST_TO_ADDR
// sEngine := false ;
46607: LD_ADDR_EXP 20
46611: PUSH
46612: LD_INT 0
46614: ST_TO_ADDR
// sSpec := false ;
46615: LD_ADDR_EXP 17
46619: PUSH
46620: LD_INT 0
46622: ST_TO_ADDR
// sLevel := false ;
46623: LD_ADDR_EXP 21
46627: PUSH
46628: LD_INT 0
46630: ST_TO_ADDR
// sArmoury := false ;
46631: LD_ADDR_EXP 22
46635: PUSH
46636: LD_INT 0
46638: ST_TO_ADDR
// sRadar := false ;
46639: LD_ADDR_EXP 23
46643: PUSH
46644: LD_INT 0
46646: ST_TO_ADDR
// sBunker := false ;
46647: LD_ADDR_EXP 24
46651: PUSH
46652: LD_INT 0
46654: ST_TO_ADDR
// sHack := false ;
46655: LD_ADDR_EXP 25
46659: PUSH
46660: LD_INT 0
46662: ST_TO_ADDR
// sFire := false ;
46663: LD_ADDR_EXP 26
46667: PUSH
46668: LD_INT 0
46670: ST_TO_ADDR
// sRefresh := false ;
46671: LD_ADDR_EXP 27
46675: PUSH
46676: LD_INT 0
46678: ST_TO_ADDR
// sExp := false ;
46679: LD_ADDR_EXP 28
46683: PUSH
46684: LD_INT 0
46686: ST_TO_ADDR
// sDepot := false ;
46687: LD_ADDR_EXP 29
46691: PUSH
46692: LD_INT 0
46694: ST_TO_ADDR
// sFlag := false ;
46695: LD_ADDR_EXP 30
46699: PUSH
46700: LD_INT 0
46702: ST_TO_ADDR
// sKamikadze := false ;
46703: LD_ADDR_EXP 38
46707: PUSH
46708: LD_INT 0
46710: ST_TO_ADDR
// sTroll := false ;
46711: LD_ADDR_EXP 39
46715: PUSH
46716: LD_INT 0
46718: ST_TO_ADDR
// sSlow := false ;
46719: LD_ADDR_EXP 40
46723: PUSH
46724: LD_INT 0
46726: ST_TO_ADDR
// sLack := false ;
46727: LD_ADDR_EXP 41
46731: PUSH
46732: LD_INT 0
46734: ST_TO_ADDR
// sTank := false ;
46735: LD_ADDR_EXP 43
46739: PUSH
46740: LD_INT 0
46742: ST_TO_ADDR
// sRemote := false ;
46743: LD_ADDR_EXP 44
46747: PUSH
46748: LD_INT 0
46750: ST_TO_ADDR
// sPowell := false ;
46751: LD_ADDR_EXP 45
46755: PUSH
46756: LD_INT 0
46758: ST_TO_ADDR
// sTeleport := false ;
46759: LD_ADDR_EXP 48
46763: PUSH
46764: LD_INT 0
46766: ST_TO_ADDR
// sOilTower := false ;
46767: LD_ADDR_EXP 50
46771: PUSH
46772: LD_INT 0
46774: ST_TO_ADDR
// sShovel := false ;
46775: LD_ADDR_EXP 51
46779: PUSH
46780: LD_INT 0
46782: ST_TO_ADDR
// sSheik := false ;
46783: LD_ADDR_EXP 52
46787: PUSH
46788: LD_INT 0
46790: ST_TO_ADDR
// sEarthquake := false ;
46791: LD_ADDR_EXP 54
46795: PUSH
46796: LD_INT 0
46798: ST_TO_ADDR
// sAI := false ;
46799: LD_ADDR_EXP 55
46803: PUSH
46804: LD_INT 0
46806: ST_TO_ADDR
// sCargo := false ;
46807: LD_ADDR_EXP 58
46811: PUSH
46812: LD_INT 0
46814: ST_TO_ADDR
// sDLaser := false ;
46815: LD_ADDR_EXP 59
46819: PUSH
46820: LD_INT 0
46822: ST_TO_ADDR
// sExchange := false ;
46823: LD_ADDR_EXP 60
46827: PUSH
46828: LD_INT 0
46830: ST_TO_ADDR
// sFac := false ;
46831: LD_ADDR_EXP 61
46835: PUSH
46836: LD_INT 0
46838: ST_TO_ADDR
// sPower := false ;
46839: LD_ADDR_EXP 62
46843: PUSH
46844: LD_INT 0
46846: ST_TO_ADDR
// sRandom := false ;
46847: LD_ADDR_EXP 63
46851: PUSH
46852: LD_INT 0
46854: ST_TO_ADDR
// sShield := false ;
46855: LD_ADDR_EXP 64
46859: PUSH
46860: LD_INT 0
46862: ST_TO_ADDR
// sTime := false ;
46863: LD_ADDR_EXP 65
46867: PUSH
46868: LD_INT 0
46870: ST_TO_ADDR
// sTools := false ;
46871: LD_ADDR_EXP 66
46875: PUSH
46876: LD_INT 0
46878: ST_TO_ADDR
// sSold := false ;
46879: LD_ADDR_EXP 31
46883: PUSH
46884: LD_INT 0
46886: ST_TO_ADDR
// sDiff := false ;
46887: LD_ADDR_EXP 32
46891: PUSH
46892: LD_INT 0
46894: ST_TO_ADDR
// sFog := false ;
46895: LD_ADDR_EXP 35
46899: PUSH
46900: LD_INT 0
46902: ST_TO_ADDR
// sReset := false ;
46903: LD_ADDR_EXP 36
46907: PUSH
46908: LD_INT 0
46910: ST_TO_ADDR
// sSun := false ;
46911: LD_ADDR_EXP 37
46915: PUSH
46916: LD_INT 0
46918: ST_TO_ADDR
// sTiger := false ;
46919: LD_ADDR_EXP 33
46923: PUSH
46924: LD_INT 0
46926: ST_TO_ADDR
// sBomb := false ;
46927: LD_ADDR_EXP 34
46931: PUSH
46932: LD_INT 0
46934: ST_TO_ADDR
// sWound := false ;
46935: LD_ADDR_EXP 42
46939: PUSH
46940: LD_INT 0
46942: ST_TO_ADDR
// sBetray := false ;
46943: LD_ADDR_EXP 46
46947: PUSH
46948: LD_INT 0
46950: ST_TO_ADDR
// sContamin := false ;
46951: LD_ADDR_EXP 47
46955: PUSH
46956: LD_INT 0
46958: ST_TO_ADDR
// sOil := false ;
46959: LD_ADDR_EXP 49
46963: PUSH
46964: LD_INT 0
46966: ST_TO_ADDR
// sStu := false ;
46967: LD_ADDR_EXP 53
46971: PUSH
46972: LD_INT 0
46974: ST_TO_ADDR
// sBazooka := false ;
46975: LD_ADDR_EXP 56
46979: PUSH
46980: LD_INT 0
46982: ST_TO_ADDR
// sMortar := false ;
46983: LD_ADDR_EXP 57
46987: PUSH
46988: LD_INT 0
46990: ST_TO_ADDR
// sRanger := false ;
46991: LD_ADDR_EXP 67
46995: PUSH
46996: LD_INT 0
46998: ST_TO_ADDR
// sComputer := false ;
46999: LD_ADDR_EXP 68
47003: PUSH
47004: LD_INT 0
47006: ST_TO_ADDR
// s30 := false ;
47007: LD_ADDR_EXP 69
47011: PUSH
47012: LD_INT 0
47014: ST_TO_ADDR
// s60 := false ;
47015: LD_ADDR_EXP 70
47019: PUSH
47020: LD_INT 0
47022: ST_TO_ADDR
// end ;
47023: LD_VAR 0 1
47027: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
47028: LD_INT 0
47030: PPUSH
47031: PPUSH
47032: PPUSH
47033: PPUSH
47034: PPUSH
47035: PPUSH
47036: PPUSH
// result := [ ] ;
47037: LD_ADDR_VAR 0 2
47041: PUSH
47042: EMPTY
47043: ST_TO_ADDR
// if campaign_id = 1 then
47044: LD_OWVAR 69
47048: PUSH
47049: LD_INT 1
47051: EQUAL
47052: IFFALSE 50218
// begin case mission_number of 1 :
47054: LD_OWVAR 70
47058: PUSH
47059: LD_INT 1
47061: DOUBLE
47062: EQUAL
47063: IFTRUE 47067
47065: GO 47143
47067: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
47068: LD_ADDR_VAR 0 2
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: LD_INT 4
47078: PUSH
47079: LD_INT 11
47081: PUSH
47082: LD_INT 12
47084: PUSH
47085: LD_INT 15
47087: PUSH
47088: LD_INT 16
47090: PUSH
47091: LD_INT 22
47093: PUSH
47094: LD_INT 23
47096: PUSH
47097: LD_INT 26
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 101
47113: PUSH
47114: LD_INT 102
47116: PUSH
47117: LD_INT 106
47119: PUSH
47120: LD_INT 116
47122: PUSH
47123: LD_INT 117
47125: PUSH
47126: LD_INT 118
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: ST_TO_ADDR
47141: GO 50216
47143: LD_INT 2
47145: DOUBLE
47146: EQUAL
47147: IFTRUE 47151
47149: GO 47235
47151: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
47152: LD_ADDR_VAR 0 2
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: LD_INT 4
47162: PUSH
47163: LD_INT 11
47165: PUSH
47166: LD_INT 12
47168: PUSH
47169: LD_INT 15
47171: PUSH
47172: LD_INT 16
47174: PUSH
47175: LD_INT 22
47177: PUSH
47178: LD_INT 23
47180: PUSH
47181: LD_INT 26
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 101
47197: PUSH
47198: LD_INT 102
47200: PUSH
47201: LD_INT 105
47203: PUSH
47204: LD_INT 106
47206: PUSH
47207: LD_INT 108
47209: PUSH
47210: LD_INT 116
47212: PUSH
47213: LD_INT 117
47215: PUSH
47216: LD_INT 118
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: ST_TO_ADDR
47233: GO 50216
47235: LD_INT 3
47237: DOUBLE
47238: EQUAL
47239: IFTRUE 47243
47241: GO 47331
47243: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
47244: LD_ADDR_VAR 0 2
47248: PUSH
47249: LD_INT 2
47251: PUSH
47252: LD_INT 4
47254: PUSH
47255: LD_INT 5
47257: PUSH
47258: LD_INT 11
47260: PUSH
47261: LD_INT 12
47263: PUSH
47264: LD_INT 15
47266: PUSH
47267: LD_INT 16
47269: PUSH
47270: LD_INT 22
47272: PUSH
47273: LD_INT 26
47275: PUSH
47276: LD_INT 36
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 101
47293: PUSH
47294: LD_INT 102
47296: PUSH
47297: LD_INT 105
47299: PUSH
47300: LD_INT 106
47302: PUSH
47303: LD_INT 108
47305: PUSH
47306: LD_INT 116
47308: PUSH
47309: LD_INT 117
47311: PUSH
47312: LD_INT 118
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: ST_TO_ADDR
47329: GO 50216
47331: LD_INT 4
47333: DOUBLE
47334: EQUAL
47335: IFTRUE 47339
47337: GO 47435
47339: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
47340: LD_ADDR_VAR 0 2
47344: PUSH
47345: LD_INT 2
47347: PUSH
47348: LD_INT 4
47350: PUSH
47351: LD_INT 5
47353: PUSH
47354: LD_INT 8
47356: PUSH
47357: LD_INT 11
47359: PUSH
47360: LD_INT 12
47362: PUSH
47363: LD_INT 15
47365: PUSH
47366: LD_INT 16
47368: PUSH
47369: LD_INT 22
47371: PUSH
47372: LD_INT 23
47374: PUSH
47375: LD_INT 26
47377: PUSH
47378: LD_INT 36
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 101
47397: PUSH
47398: LD_INT 102
47400: PUSH
47401: LD_INT 105
47403: PUSH
47404: LD_INT 106
47406: PUSH
47407: LD_INT 108
47409: PUSH
47410: LD_INT 116
47412: PUSH
47413: LD_INT 117
47415: PUSH
47416: LD_INT 118
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: ST_TO_ADDR
47433: GO 50216
47435: LD_INT 5
47437: DOUBLE
47438: EQUAL
47439: IFTRUE 47443
47441: GO 47555
47443: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
47444: LD_ADDR_VAR 0 2
47448: PUSH
47449: LD_INT 2
47451: PUSH
47452: LD_INT 4
47454: PUSH
47455: LD_INT 5
47457: PUSH
47458: LD_INT 6
47460: PUSH
47461: LD_INT 8
47463: PUSH
47464: LD_INT 11
47466: PUSH
47467: LD_INT 12
47469: PUSH
47470: LD_INT 15
47472: PUSH
47473: LD_INT 16
47475: PUSH
47476: LD_INT 22
47478: PUSH
47479: LD_INT 23
47481: PUSH
47482: LD_INT 25
47484: PUSH
47485: LD_INT 26
47487: PUSH
47488: LD_INT 36
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 101
47509: PUSH
47510: LD_INT 102
47512: PUSH
47513: LD_INT 105
47515: PUSH
47516: LD_INT 106
47518: PUSH
47519: LD_INT 108
47521: PUSH
47522: LD_INT 109
47524: PUSH
47525: LD_INT 112
47527: PUSH
47528: LD_INT 116
47530: PUSH
47531: LD_INT 117
47533: PUSH
47534: LD_INT 118
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: ST_TO_ADDR
47553: GO 50216
47555: LD_INT 6
47557: DOUBLE
47558: EQUAL
47559: IFTRUE 47563
47561: GO 47695
47563: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
47564: LD_ADDR_VAR 0 2
47568: PUSH
47569: LD_INT 2
47571: PUSH
47572: LD_INT 4
47574: PUSH
47575: LD_INT 5
47577: PUSH
47578: LD_INT 6
47580: PUSH
47581: LD_INT 8
47583: PUSH
47584: LD_INT 11
47586: PUSH
47587: LD_INT 12
47589: PUSH
47590: LD_INT 15
47592: PUSH
47593: LD_INT 16
47595: PUSH
47596: LD_INT 20
47598: PUSH
47599: LD_INT 21
47601: PUSH
47602: LD_INT 22
47604: PUSH
47605: LD_INT 23
47607: PUSH
47608: LD_INT 25
47610: PUSH
47611: LD_INT 26
47613: PUSH
47614: LD_INT 30
47616: PUSH
47617: LD_INT 31
47619: PUSH
47620: LD_INT 32
47622: PUSH
47623: LD_INT 36
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 101
47649: PUSH
47650: LD_INT 102
47652: PUSH
47653: LD_INT 105
47655: PUSH
47656: LD_INT 106
47658: PUSH
47659: LD_INT 108
47661: PUSH
47662: LD_INT 109
47664: PUSH
47665: LD_INT 112
47667: PUSH
47668: LD_INT 116
47670: PUSH
47671: LD_INT 117
47673: PUSH
47674: LD_INT 118
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: ST_TO_ADDR
47693: GO 50216
47695: LD_INT 7
47697: DOUBLE
47698: EQUAL
47699: IFTRUE 47703
47701: GO 47815
47703: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
47704: LD_ADDR_VAR 0 2
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: LD_INT 4
47714: PUSH
47715: LD_INT 5
47717: PUSH
47718: LD_INT 7
47720: PUSH
47721: LD_INT 11
47723: PUSH
47724: LD_INT 12
47726: PUSH
47727: LD_INT 15
47729: PUSH
47730: LD_INT 16
47732: PUSH
47733: LD_INT 20
47735: PUSH
47736: LD_INT 21
47738: PUSH
47739: LD_INT 22
47741: PUSH
47742: LD_INT 23
47744: PUSH
47745: LD_INT 25
47747: PUSH
47748: LD_INT 26
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 101
47769: PUSH
47770: LD_INT 102
47772: PUSH
47773: LD_INT 103
47775: PUSH
47776: LD_INT 105
47778: PUSH
47779: LD_INT 106
47781: PUSH
47782: LD_INT 108
47784: PUSH
47785: LD_INT 112
47787: PUSH
47788: LD_INT 116
47790: PUSH
47791: LD_INT 117
47793: PUSH
47794: LD_INT 118
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: ST_TO_ADDR
47813: GO 50216
47815: LD_INT 8
47817: DOUBLE
47818: EQUAL
47819: IFTRUE 47823
47821: GO 47963
47823: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
47824: LD_ADDR_VAR 0 2
47828: PUSH
47829: LD_INT 2
47831: PUSH
47832: LD_INT 4
47834: PUSH
47835: LD_INT 5
47837: PUSH
47838: LD_INT 6
47840: PUSH
47841: LD_INT 7
47843: PUSH
47844: LD_INT 8
47846: PUSH
47847: LD_INT 11
47849: PUSH
47850: LD_INT 12
47852: PUSH
47853: LD_INT 15
47855: PUSH
47856: LD_INT 16
47858: PUSH
47859: LD_INT 20
47861: PUSH
47862: LD_INT 21
47864: PUSH
47865: LD_INT 22
47867: PUSH
47868: LD_INT 23
47870: PUSH
47871: LD_INT 25
47873: PUSH
47874: LD_INT 26
47876: PUSH
47877: LD_INT 30
47879: PUSH
47880: LD_INT 31
47882: PUSH
47883: LD_INT 32
47885: PUSH
47886: LD_INT 36
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 101
47913: PUSH
47914: LD_INT 102
47916: PUSH
47917: LD_INT 103
47919: PUSH
47920: LD_INT 105
47922: PUSH
47923: LD_INT 106
47925: PUSH
47926: LD_INT 108
47928: PUSH
47929: LD_INT 109
47931: PUSH
47932: LD_INT 112
47934: PUSH
47935: LD_INT 116
47937: PUSH
47938: LD_INT 117
47940: PUSH
47941: LD_INT 118
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: ST_TO_ADDR
47961: GO 50216
47963: LD_INT 9
47965: DOUBLE
47966: EQUAL
47967: IFTRUE 47971
47969: GO 48119
47971: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
47972: LD_ADDR_VAR 0 2
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: LD_INT 4
47982: PUSH
47983: LD_INT 5
47985: PUSH
47986: LD_INT 6
47988: PUSH
47989: LD_INT 7
47991: PUSH
47992: LD_INT 8
47994: PUSH
47995: LD_INT 11
47997: PUSH
47998: LD_INT 12
48000: PUSH
48001: LD_INT 15
48003: PUSH
48004: LD_INT 16
48006: PUSH
48007: LD_INT 20
48009: PUSH
48010: LD_INT 21
48012: PUSH
48013: LD_INT 22
48015: PUSH
48016: LD_INT 23
48018: PUSH
48019: LD_INT 25
48021: PUSH
48022: LD_INT 26
48024: PUSH
48025: LD_INT 28
48027: PUSH
48028: LD_INT 30
48030: PUSH
48031: LD_INT 31
48033: PUSH
48034: LD_INT 32
48036: PUSH
48037: LD_INT 36
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 101
48065: PUSH
48066: LD_INT 102
48068: PUSH
48069: LD_INT 103
48071: PUSH
48072: LD_INT 105
48074: PUSH
48075: LD_INT 106
48077: PUSH
48078: LD_INT 108
48080: PUSH
48081: LD_INT 109
48083: PUSH
48084: LD_INT 112
48086: PUSH
48087: LD_INT 114
48089: PUSH
48090: LD_INT 116
48092: PUSH
48093: LD_INT 117
48095: PUSH
48096: LD_INT 118
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: ST_TO_ADDR
48117: GO 50216
48119: LD_INT 10
48121: DOUBLE
48122: EQUAL
48123: IFTRUE 48127
48125: GO 48323
48127: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
48128: LD_ADDR_VAR 0 2
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: LD_INT 4
48138: PUSH
48139: LD_INT 5
48141: PUSH
48142: LD_INT 6
48144: PUSH
48145: LD_INT 7
48147: PUSH
48148: LD_INT 8
48150: PUSH
48151: LD_INT 9
48153: PUSH
48154: LD_INT 10
48156: PUSH
48157: LD_INT 11
48159: PUSH
48160: LD_INT 12
48162: PUSH
48163: LD_INT 13
48165: PUSH
48166: LD_INT 14
48168: PUSH
48169: LD_INT 15
48171: PUSH
48172: LD_INT 16
48174: PUSH
48175: LD_INT 17
48177: PUSH
48178: LD_INT 18
48180: PUSH
48181: LD_INT 19
48183: PUSH
48184: LD_INT 20
48186: PUSH
48187: LD_INT 21
48189: PUSH
48190: LD_INT 22
48192: PUSH
48193: LD_INT 23
48195: PUSH
48196: LD_INT 24
48198: PUSH
48199: LD_INT 25
48201: PUSH
48202: LD_INT 26
48204: PUSH
48205: LD_INT 28
48207: PUSH
48208: LD_INT 30
48210: PUSH
48211: LD_INT 31
48213: PUSH
48214: LD_INT 32
48216: PUSH
48217: LD_INT 36
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 101
48253: PUSH
48254: LD_INT 102
48256: PUSH
48257: LD_INT 103
48259: PUSH
48260: LD_INT 104
48262: PUSH
48263: LD_INT 105
48265: PUSH
48266: LD_INT 106
48268: PUSH
48269: LD_INT 107
48271: PUSH
48272: LD_INT 108
48274: PUSH
48275: LD_INT 109
48277: PUSH
48278: LD_INT 110
48280: PUSH
48281: LD_INT 111
48283: PUSH
48284: LD_INT 112
48286: PUSH
48287: LD_INT 114
48289: PUSH
48290: LD_INT 116
48292: PUSH
48293: LD_INT 117
48295: PUSH
48296: LD_INT 118
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: ST_TO_ADDR
48321: GO 50216
48323: LD_INT 11
48325: DOUBLE
48326: EQUAL
48327: IFTRUE 48331
48329: GO 48535
48331: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
48332: LD_ADDR_VAR 0 2
48336: PUSH
48337: LD_INT 2
48339: PUSH
48340: LD_INT 3
48342: PUSH
48343: LD_INT 4
48345: PUSH
48346: LD_INT 5
48348: PUSH
48349: LD_INT 6
48351: PUSH
48352: LD_INT 7
48354: PUSH
48355: LD_INT 8
48357: PUSH
48358: LD_INT 9
48360: PUSH
48361: LD_INT 10
48363: PUSH
48364: LD_INT 11
48366: PUSH
48367: LD_INT 12
48369: PUSH
48370: LD_INT 13
48372: PUSH
48373: LD_INT 14
48375: PUSH
48376: LD_INT 15
48378: PUSH
48379: LD_INT 16
48381: PUSH
48382: LD_INT 17
48384: PUSH
48385: LD_INT 18
48387: PUSH
48388: LD_INT 19
48390: PUSH
48391: LD_INT 20
48393: PUSH
48394: LD_INT 21
48396: PUSH
48397: LD_INT 22
48399: PUSH
48400: LD_INT 23
48402: PUSH
48403: LD_INT 24
48405: PUSH
48406: LD_INT 25
48408: PUSH
48409: LD_INT 26
48411: PUSH
48412: LD_INT 28
48414: PUSH
48415: LD_INT 30
48417: PUSH
48418: LD_INT 31
48420: PUSH
48421: LD_INT 32
48423: PUSH
48424: LD_INT 34
48426: PUSH
48427: LD_INT 36
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 101
48465: PUSH
48466: LD_INT 102
48468: PUSH
48469: LD_INT 103
48471: PUSH
48472: LD_INT 104
48474: PUSH
48475: LD_INT 105
48477: PUSH
48478: LD_INT 106
48480: PUSH
48481: LD_INT 107
48483: PUSH
48484: LD_INT 108
48486: PUSH
48487: LD_INT 109
48489: PUSH
48490: LD_INT 110
48492: PUSH
48493: LD_INT 111
48495: PUSH
48496: LD_INT 112
48498: PUSH
48499: LD_INT 114
48501: PUSH
48502: LD_INT 116
48504: PUSH
48505: LD_INT 117
48507: PUSH
48508: LD_INT 118
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: ST_TO_ADDR
48533: GO 50216
48535: LD_INT 12
48537: DOUBLE
48538: EQUAL
48539: IFTRUE 48543
48541: GO 48763
48543: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
48544: LD_ADDR_VAR 0 2
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: LD_INT 3
48557: PUSH
48558: LD_INT 4
48560: PUSH
48561: LD_INT 5
48563: PUSH
48564: LD_INT 6
48566: PUSH
48567: LD_INT 7
48569: PUSH
48570: LD_INT 8
48572: PUSH
48573: LD_INT 9
48575: PUSH
48576: LD_INT 10
48578: PUSH
48579: LD_INT 11
48581: PUSH
48582: LD_INT 12
48584: PUSH
48585: LD_INT 13
48587: PUSH
48588: LD_INT 14
48590: PUSH
48591: LD_INT 15
48593: PUSH
48594: LD_INT 16
48596: PUSH
48597: LD_INT 17
48599: PUSH
48600: LD_INT 18
48602: PUSH
48603: LD_INT 19
48605: PUSH
48606: LD_INT 20
48608: PUSH
48609: LD_INT 21
48611: PUSH
48612: LD_INT 22
48614: PUSH
48615: LD_INT 23
48617: PUSH
48618: LD_INT 24
48620: PUSH
48621: LD_INT 25
48623: PUSH
48624: LD_INT 26
48626: PUSH
48627: LD_INT 27
48629: PUSH
48630: LD_INT 28
48632: PUSH
48633: LD_INT 30
48635: PUSH
48636: LD_INT 31
48638: PUSH
48639: LD_INT 32
48641: PUSH
48642: LD_INT 33
48644: PUSH
48645: LD_INT 34
48647: PUSH
48648: LD_INT 36
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 101
48689: PUSH
48690: LD_INT 102
48692: PUSH
48693: LD_INT 103
48695: PUSH
48696: LD_INT 104
48698: PUSH
48699: LD_INT 105
48701: PUSH
48702: LD_INT 106
48704: PUSH
48705: LD_INT 107
48707: PUSH
48708: LD_INT 108
48710: PUSH
48711: LD_INT 109
48713: PUSH
48714: LD_INT 110
48716: PUSH
48717: LD_INT 111
48719: PUSH
48720: LD_INT 112
48722: PUSH
48723: LD_INT 113
48725: PUSH
48726: LD_INT 114
48728: PUSH
48729: LD_INT 116
48731: PUSH
48732: LD_INT 117
48734: PUSH
48735: LD_INT 118
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: ST_TO_ADDR
48761: GO 50216
48763: LD_INT 13
48765: DOUBLE
48766: EQUAL
48767: IFTRUE 48771
48769: GO 48979
48771: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
48772: LD_ADDR_VAR 0 2
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: LD_INT 3
48785: PUSH
48786: LD_INT 4
48788: PUSH
48789: LD_INT 5
48791: PUSH
48792: LD_INT 8
48794: PUSH
48795: LD_INT 9
48797: PUSH
48798: LD_INT 10
48800: PUSH
48801: LD_INT 11
48803: PUSH
48804: LD_INT 12
48806: PUSH
48807: LD_INT 14
48809: PUSH
48810: LD_INT 15
48812: PUSH
48813: LD_INT 16
48815: PUSH
48816: LD_INT 17
48818: PUSH
48819: LD_INT 18
48821: PUSH
48822: LD_INT 19
48824: PUSH
48825: LD_INT 20
48827: PUSH
48828: LD_INT 21
48830: PUSH
48831: LD_INT 22
48833: PUSH
48834: LD_INT 23
48836: PUSH
48837: LD_INT 24
48839: PUSH
48840: LD_INT 25
48842: PUSH
48843: LD_INT 26
48845: PUSH
48846: LD_INT 27
48848: PUSH
48849: LD_INT 28
48851: PUSH
48852: LD_INT 30
48854: PUSH
48855: LD_INT 31
48857: PUSH
48858: LD_INT 32
48860: PUSH
48861: LD_INT 33
48863: PUSH
48864: LD_INT 34
48866: PUSH
48867: LD_INT 36
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 101
48905: PUSH
48906: LD_INT 102
48908: PUSH
48909: LD_INT 103
48911: PUSH
48912: LD_INT 104
48914: PUSH
48915: LD_INT 105
48917: PUSH
48918: LD_INT 106
48920: PUSH
48921: LD_INT 107
48923: PUSH
48924: LD_INT 108
48926: PUSH
48927: LD_INT 109
48929: PUSH
48930: LD_INT 110
48932: PUSH
48933: LD_INT 111
48935: PUSH
48936: LD_INT 112
48938: PUSH
48939: LD_INT 113
48941: PUSH
48942: LD_INT 114
48944: PUSH
48945: LD_INT 116
48947: PUSH
48948: LD_INT 117
48950: PUSH
48951: LD_INT 118
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: ST_TO_ADDR
48977: GO 50216
48979: LD_INT 14
48981: DOUBLE
48982: EQUAL
48983: IFTRUE 48987
48985: GO 49211
48987: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
48988: LD_ADDR_VAR 0 2
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: LD_INT 3
49001: PUSH
49002: LD_INT 4
49004: PUSH
49005: LD_INT 5
49007: PUSH
49008: LD_INT 6
49010: PUSH
49011: LD_INT 7
49013: PUSH
49014: LD_INT 8
49016: PUSH
49017: LD_INT 9
49019: PUSH
49020: LD_INT 10
49022: PUSH
49023: LD_INT 11
49025: PUSH
49026: LD_INT 12
49028: PUSH
49029: LD_INT 13
49031: PUSH
49032: LD_INT 14
49034: PUSH
49035: LD_INT 15
49037: PUSH
49038: LD_INT 16
49040: PUSH
49041: LD_INT 17
49043: PUSH
49044: LD_INT 18
49046: PUSH
49047: LD_INT 19
49049: PUSH
49050: LD_INT 20
49052: PUSH
49053: LD_INT 21
49055: PUSH
49056: LD_INT 22
49058: PUSH
49059: LD_INT 23
49061: PUSH
49062: LD_INT 24
49064: PUSH
49065: LD_INT 25
49067: PUSH
49068: LD_INT 26
49070: PUSH
49071: LD_INT 27
49073: PUSH
49074: LD_INT 28
49076: PUSH
49077: LD_INT 29
49079: PUSH
49080: LD_INT 30
49082: PUSH
49083: LD_INT 31
49085: PUSH
49086: LD_INT 32
49088: PUSH
49089: LD_INT 33
49091: PUSH
49092: LD_INT 34
49094: PUSH
49095: LD_INT 36
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 101
49137: PUSH
49138: LD_INT 102
49140: PUSH
49141: LD_INT 103
49143: PUSH
49144: LD_INT 104
49146: PUSH
49147: LD_INT 105
49149: PUSH
49150: LD_INT 106
49152: PUSH
49153: LD_INT 107
49155: PUSH
49156: LD_INT 108
49158: PUSH
49159: LD_INT 109
49161: PUSH
49162: LD_INT 110
49164: PUSH
49165: LD_INT 111
49167: PUSH
49168: LD_INT 112
49170: PUSH
49171: LD_INT 113
49173: PUSH
49174: LD_INT 114
49176: PUSH
49177: LD_INT 116
49179: PUSH
49180: LD_INT 117
49182: PUSH
49183: LD_INT 118
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: ST_TO_ADDR
49209: GO 50216
49211: LD_INT 15
49213: DOUBLE
49214: EQUAL
49215: IFTRUE 49219
49217: GO 49443
49219: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
49220: LD_ADDR_VAR 0 2
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: LD_INT 3
49233: PUSH
49234: LD_INT 4
49236: PUSH
49237: LD_INT 5
49239: PUSH
49240: LD_INT 6
49242: PUSH
49243: LD_INT 7
49245: PUSH
49246: LD_INT 8
49248: PUSH
49249: LD_INT 9
49251: PUSH
49252: LD_INT 10
49254: PUSH
49255: LD_INT 11
49257: PUSH
49258: LD_INT 12
49260: PUSH
49261: LD_INT 13
49263: PUSH
49264: LD_INT 14
49266: PUSH
49267: LD_INT 15
49269: PUSH
49270: LD_INT 16
49272: PUSH
49273: LD_INT 17
49275: PUSH
49276: LD_INT 18
49278: PUSH
49279: LD_INT 19
49281: PUSH
49282: LD_INT 20
49284: PUSH
49285: LD_INT 21
49287: PUSH
49288: LD_INT 22
49290: PUSH
49291: LD_INT 23
49293: PUSH
49294: LD_INT 24
49296: PUSH
49297: LD_INT 25
49299: PUSH
49300: LD_INT 26
49302: PUSH
49303: LD_INT 27
49305: PUSH
49306: LD_INT 28
49308: PUSH
49309: LD_INT 29
49311: PUSH
49312: LD_INT 30
49314: PUSH
49315: LD_INT 31
49317: PUSH
49318: LD_INT 32
49320: PUSH
49321: LD_INT 33
49323: PUSH
49324: LD_INT 34
49326: PUSH
49327: LD_INT 36
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 101
49369: PUSH
49370: LD_INT 102
49372: PUSH
49373: LD_INT 103
49375: PUSH
49376: LD_INT 104
49378: PUSH
49379: LD_INT 105
49381: PUSH
49382: LD_INT 106
49384: PUSH
49385: LD_INT 107
49387: PUSH
49388: LD_INT 108
49390: PUSH
49391: LD_INT 109
49393: PUSH
49394: LD_INT 110
49396: PUSH
49397: LD_INT 111
49399: PUSH
49400: LD_INT 112
49402: PUSH
49403: LD_INT 113
49405: PUSH
49406: LD_INT 114
49408: PUSH
49409: LD_INT 116
49411: PUSH
49412: LD_INT 117
49414: PUSH
49415: LD_INT 118
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: ST_TO_ADDR
49441: GO 50216
49443: LD_INT 16
49445: DOUBLE
49446: EQUAL
49447: IFTRUE 49451
49449: GO 49587
49451: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
49452: LD_ADDR_VAR 0 2
49456: PUSH
49457: LD_INT 2
49459: PUSH
49460: LD_INT 4
49462: PUSH
49463: LD_INT 5
49465: PUSH
49466: LD_INT 7
49468: PUSH
49469: LD_INT 11
49471: PUSH
49472: LD_INT 12
49474: PUSH
49475: LD_INT 15
49477: PUSH
49478: LD_INT 16
49480: PUSH
49481: LD_INT 20
49483: PUSH
49484: LD_INT 21
49486: PUSH
49487: LD_INT 22
49489: PUSH
49490: LD_INT 23
49492: PUSH
49493: LD_INT 25
49495: PUSH
49496: LD_INT 26
49498: PUSH
49499: LD_INT 30
49501: PUSH
49502: LD_INT 31
49504: PUSH
49505: LD_INT 32
49507: PUSH
49508: LD_INT 33
49510: PUSH
49511: LD_INT 34
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 101
49537: PUSH
49538: LD_INT 102
49540: PUSH
49541: LD_INT 103
49543: PUSH
49544: LD_INT 106
49546: PUSH
49547: LD_INT 108
49549: PUSH
49550: LD_INT 112
49552: PUSH
49553: LD_INT 113
49555: PUSH
49556: LD_INT 114
49558: PUSH
49559: LD_INT 116
49561: PUSH
49562: LD_INT 117
49564: PUSH
49565: LD_INT 118
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: ST_TO_ADDR
49585: GO 50216
49587: LD_INT 17
49589: DOUBLE
49590: EQUAL
49591: IFTRUE 49595
49593: GO 49819
49595: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
49596: LD_ADDR_VAR 0 2
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: LD_INT 2
49606: PUSH
49607: LD_INT 3
49609: PUSH
49610: LD_INT 4
49612: PUSH
49613: LD_INT 5
49615: PUSH
49616: LD_INT 6
49618: PUSH
49619: LD_INT 7
49621: PUSH
49622: LD_INT 8
49624: PUSH
49625: LD_INT 9
49627: PUSH
49628: LD_INT 10
49630: PUSH
49631: LD_INT 11
49633: PUSH
49634: LD_INT 12
49636: PUSH
49637: LD_INT 13
49639: PUSH
49640: LD_INT 14
49642: PUSH
49643: LD_INT 15
49645: PUSH
49646: LD_INT 16
49648: PUSH
49649: LD_INT 17
49651: PUSH
49652: LD_INT 18
49654: PUSH
49655: LD_INT 19
49657: PUSH
49658: LD_INT 20
49660: PUSH
49661: LD_INT 21
49663: PUSH
49664: LD_INT 22
49666: PUSH
49667: LD_INT 23
49669: PUSH
49670: LD_INT 24
49672: PUSH
49673: LD_INT 25
49675: PUSH
49676: LD_INT 26
49678: PUSH
49679: LD_INT 27
49681: PUSH
49682: LD_INT 28
49684: PUSH
49685: LD_INT 29
49687: PUSH
49688: LD_INT 30
49690: PUSH
49691: LD_INT 31
49693: PUSH
49694: LD_INT 32
49696: PUSH
49697: LD_INT 33
49699: PUSH
49700: LD_INT 34
49702: PUSH
49703: LD_INT 36
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 101
49745: PUSH
49746: LD_INT 102
49748: PUSH
49749: LD_INT 103
49751: PUSH
49752: LD_INT 104
49754: PUSH
49755: LD_INT 105
49757: PUSH
49758: LD_INT 106
49760: PUSH
49761: LD_INT 107
49763: PUSH
49764: LD_INT 108
49766: PUSH
49767: LD_INT 109
49769: PUSH
49770: LD_INT 110
49772: PUSH
49773: LD_INT 111
49775: PUSH
49776: LD_INT 112
49778: PUSH
49779: LD_INT 113
49781: PUSH
49782: LD_INT 114
49784: PUSH
49785: LD_INT 116
49787: PUSH
49788: LD_INT 117
49790: PUSH
49791: LD_INT 118
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: ST_TO_ADDR
49817: GO 50216
49819: LD_INT 18
49821: DOUBLE
49822: EQUAL
49823: IFTRUE 49827
49825: GO 49975
49827: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
49828: LD_ADDR_VAR 0 2
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: LD_INT 4
49838: PUSH
49839: LD_INT 5
49841: PUSH
49842: LD_INT 7
49844: PUSH
49845: LD_INT 11
49847: PUSH
49848: LD_INT 12
49850: PUSH
49851: LD_INT 15
49853: PUSH
49854: LD_INT 16
49856: PUSH
49857: LD_INT 20
49859: PUSH
49860: LD_INT 21
49862: PUSH
49863: LD_INT 22
49865: PUSH
49866: LD_INT 23
49868: PUSH
49869: LD_INT 25
49871: PUSH
49872: LD_INT 26
49874: PUSH
49875: LD_INT 30
49877: PUSH
49878: LD_INT 31
49880: PUSH
49881: LD_INT 32
49883: PUSH
49884: LD_INT 33
49886: PUSH
49887: LD_INT 34
49889: PUSH
49890: LD_INT 35
49892: PUSH
49893: LD_INT 36
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 101
49921: PUSH
49922: LD_INT 102
49924: PUSH
49925: LD_INT 103
49927: PUSH
49928: LD_INT 106
49930: PUSH
49931: LD_INT 108
49933: PUSH
49934: LD_INT 112
49936: PUSH
49937: LD_INT 113
49939: PUSH
49940: LD_INT 114
49942: PUSH
49943: LD_INT 115
49945: PUSH
49946: LD_INT 116
49948: PUSH
49949: LD_INT 117
49951: PUSH
49952: LD_INT 118
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: ST_TO_ADDR
49973: GO 50216
49975: LD_INT 19
49977: DOUBLE
49978: EQUAL
49979: IFTRUE 49983
49981: GO 50215
49983: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
49984: LD_ADDR_VAR 0 2
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: LD_INT 2
49994: PUSH
49995: LD_INT 3
49997: PUSH
49998: LD_INT 4
50000: PUSH
50001: LD_INT 5
50003: PUSH
50004: LD_INT 6
50006: PUSH
50007: LD_INT 7
50009: PUSH
50010: LD_INT 8
50012: PUSH
50013: LD_INT 9
50015: PUSH
50016: LD_INT 10
50018: PUSH
50019: LD_INT 11
50021: PUSH
50022: LD_INT 12
50024: PUSH
50025: LD_INT 13
50027: PUSH
50028: LD_INT 14
50030: PUSH
50031: LD_INT 15
50033: PUSH
50034: LD_INT 16
50036: PUSH
50037: LD_INT 17
50039: PUSH
50040: LD_INT 18
50042: PUSH
50043: LD_INT 19
50045: PUSH
50046: LD_INT 20
50048: PUSH
50049: LD_INT 21
50051: PUSH
50052: LD_INT 22
50054: PUSH
50055: LD_INT 23
50057: PUSH
50058: LD_INT 24
50060: PUSH
50061: LD_INT 25
50063: PUSH
50064: LD_INT 26
50066: PUSH
50067: LD_INT 27
50069: PUSH
50070: LD_INT 28
50072: PUSH
50073: LD_INT 29
50075: PUSH
50076: LD_INT 30
50078: PUSH
50079: LD_INT 31
50081: PUSH
50082: LD_INT 32
50084: PUSH
50085: LD_INT 33
50087: PUSH
50088: LD_INT 34
50090: PUSH
50091: LD_INT 35
50093: PUSH
50094: LD_INT 36
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 101
50137: PUSH
50138: LD_INT 102
50140: PUSH
50141: LD_INT 103
50143: PUSH
50144: LD_INT 104
50146: PUSH
50147: LD_INT 105
50149: PUSH
50150: LD_INT 106
50152: PUSH
50153: LD_INT 107
50155: PUSH
50156: LD_INT 108
50158: PUSH
50159: LD_INT 109
50161: PUSH
50162: LD_INT 110
50164: PUSH
50165: LD_INT 111
50167: PUSH
50168: LD_INT 112
50170: PUSH
50171: LD_INT 113
50173: PUSH
50174: LD_INT 114
50176: PUSH
50177: LD_INT 115
50179: PUSH
50180: LD_INT 116
50182: PUSH
50183: LD_INT 117
50185: PUSH
50186: LD_INT 118
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: ST_TO_ADDR
50213: GO 50216
50215: POP
// end else
50216: GO 50447
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
50218: LD_ADDR_VAR 0 2
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: LD_INT 3
50231: PUSH
50232: LD_INT 4
50234: PUSH
50235: LD_INT 5
50237: PUSH
50238: LD_INT 6
50240: PUSH
50241: LD_INT 7
50243: PUSH
50244: LD_INT 8
50246: PUSH
50247: LD_INT 9
50249: PUSH
50250: LD_INT 10
50252: PUSH
50253: LD_INT 11
50255: PUSH
50256: LD_INT 12
50258: PUSH
50259: LD_INT 13
50261: PUSH
50262: LD_INT 14
50264: PUSH
50265: LD_INT 15
50267: PUSH
50268: LD_INT 16
50270: PUSH
50271: LD_INT 17
50273: PUSH
50274: LD_INT 18
50276: PUSH
50277: LD_INT 19
50279: PUSH
50280: LD_INT 20
50282: PUSH
50283: LD_INT 21
50285: PUSH
50286: LD_INT 22
50288: PUSH
50289: LD_INT 23
50291: PUSH
50292: LD_INT 24
50294: PUSH
50295: LD_INT 25
50297: PUSH
50298: LD_INT 26
50300: PUSH
50301: LD_INT 27
50303: PUSH
50304: LD_INT 28
50306: PUSH
50307: LD_INT 29
50309: PUSH
50310: LD_INT 30
50312: PUSH
50313: LD_INT 31
50315: PUSH
50316: LD_INT 32
50318: PUSH
50319: LD_INT 33
50321: PUSH
50322: LD_INT 34
50324: PUSH
50325: LD_INT 35
50327: PUSH
50328: LD_INT 36
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 101
50371: PUSH
50372: LD_INT 102
50374: PUSH
50375: LD_INT 103
50377: PUSH
50378: LD_INT 104
50380: PUSH
50381: LD_INT 105
50383: PUSH
50384: LD_INT 106
50386: PUSH
50387: LD_INT 107
50389: PUSH
50390: LD_INT 108
50392: PUSH
50393: LD_INT 109
50395: PUSH
50396: LD_INT 110
50398: PUSH
50399: LD_INT 111
50401: PUSH
50402: LD_INT 112
50404: PUSH
50405: LD_INT 113
50407: PUSH
50408: LD_INT 114
50410: PUSH
50411: LD_INT 115
50413: PUSH
50414: LD_INT 116
50416: PUSH
50417: LD_INT 117
50419: PUSH
50420: LD_INT 118
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: ST_TO_ADDR
// if result then
50447: LD_VAR 0 2
50451: IFFALSE 51237
// begin normal :=  ;
50453: LD_ADDR_VAR 0 5
50457: PUSH
50458: LD_STRING 
50460: ST_TO_ADDR
// hardcore :=  ;
50461: LD_ADDR_VAR 0 6
50465: PUSH
50466: LD_STRING 
50468: ST_TO_ADDR
// active :=  ;
50469: LD_ADDR_VAR 0 7
50473: PUSH
50474: LD_STRING 
50476: ST_TO_ADDR
// for i = 1 to normalCounter do
50477: LD_ADDR_VAR 0 8
50481: PUSH
50482: DOUBLE
50483: LD_INT 1
50485: DEC
50486: ST_TO_ADDR
50487: LD_EXP 15
50491: PUSH
50492: FOR_TO
50493: IFFALSE 50594
// begin tmp := 0 ;
50495: LD_ADDR_VAR 0 3
50499: PUSH
50500: LD_STRING 0
50502: ST_TO_ADDR
// if result [ 1 ] then
50503: LD_VAR 0 2
50507: PUSH
50508: LD_INT 1
50510: ARRAY
50511: IFFALSE 50576
// if result [ 1 ] [ 1 ] = i then
50513: LD_VAR 0 2
50517: PUSH
50518: LD_INT 1
50520: ARRAY
50521: PUSH
50522: LD_INT 1
50524: ARRAY
50525: PUSH
50526: LD_VAR 0 8
50530: EQUAL
50531: IFFALSE 50576
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
50533: LD_ADDR_VAR 0 2
50537: PUSH
50538: LD_VAR 0 2
50542: PPUSH
50543: LD_INT 1
50545: PPUSH
50546: LD_VAR 0 2
50550: PUSH
50551: LD_INT 1
50553: ARRAY
50554: PPUSH
50555: LD_INT 1
50557: PPUSH
50558: CALL_OW 3
50562: PPUSH
50563: CALL_OW 1
50567: ST_TO_ADDR
// tmp := 1 ;
50568: LD_ADDR_VAR 0 3
50572: PUSH
50573: LD_STRING 1
50575: ST_TO_ADDR
// end ; normal := normal & tmp ;
50576: LD_ADDR_VAR 0 5
50580: PUSH
50581: LD_VAR 0 5
50585: PUSH
50586: LD_VAR 0 3
50590: STR
50591: ST_TO_ADDR
// end ;
50592: GO 50492
50594: POP
50595: POP
// for i = 1 to hardcoreCounter do
50596: LD_ADDR_VAR 0 8
50600: PUSH
50601: DOUBLE
50602: LD_INT 1
50604: DEC
50605: ST_TO_ADDR
50606: LD_EXP 16
50610: PUSH
50611: FOR_TO
50612: IFFALSE 50717
// begin tmp := 0 ;
50614: LD_ADDR_VAR 0 3
50618: PUSH
50619: LD_STRING 0
50621: ST_TO_ADDR
// if result [ 2 ] then
50622: LD_VAR 0 2
50626: PUSH
50627: LD_INT 2
50629: ARRAY
50630: IFFALSE 50699
// if result [ 2 ] [ 1 ] = 100 + i then
50632: LD_VAR 0 2
50636: PUSH
50637: LD_INT 2
50639: ARRAY
50640: PUSH
50641: LD_INT 1
50643: ARRAY
50644: PUSH
50645: LD_INT 100
50647: PUSH
50648: LD_VAR 0 8
50652: PLUS
50653: EQUAL
50654: IFFALSE 50699
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
50656: LD_ADDR_VAR 0 2
50660: PUSH
50661: LD_VAR 0 2
50665: PPUSH
50666: LD_INT 2
50668: PPUSH
50669: LD_VAR 0 2
50673: PUSH
50674: LD_INT 2
50676: ARRAY
50677: PPUSH
50678: LD_INT 1
50680: PPUSH
50681: CALL_OW 3
50685: PPUSH
50686: CALL_OW 1
50690: ST_TO_ADDR
// tmp := 1 ;
50691: LD_ADDR_VAR 0 3
50695: PUSH
50696: LD_STRING 1
50698: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
50699: LD_ADDR_VAR 0 6
50703: PUSH
50704: LD_VAR 0 6
50708: PUSH
50709: LD_VAR 0 3
50713: STR
50714: ST_TO_ADDR
// end ;
50715: GO 50611
50717: POP
50718: POP
// if isGameLoad then
50719: LD_VAR 0 1
50723: IFFALSE 51198
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
50725: LD_ADDR_VAR 0 4
50729: PUSH
50730: LD_EXP 19
50734: PUSH
50735: LD_EXP 18
50739: PUSH
50740: LD_EXP 20
50744: PUSH
50745: LD_EXP 17
50749: PUSH
50750: LD_EXP 21
50754: PUSH
50755: LD_EXP 22
50759: PUSH
50760: LD_EXP 23
50764: PUSH
50765: LD_EXP 24
50769: PUSH
50770: LD_EXP 25
50774: PUSH
50775: LD_EXP 26
50779: PUSH
50780: LD_EXP 27
50784: PUSH
50785: LD_EXP 28
50789: PUSH
50790: LD_EXP 29
50794: PUSH
50795: LD_EXP 30
50799: PUSH
50800: LD_EXP 38
50804: PUSH
50805: LD_EXP 39
50809: PUSH
50810: LD_EXP 40
50814: PUSH
50815: LD_EXP 41
50819: PUSH
50820: LD_EXP 43
50824: PUSH
50825: LD_EXP 44
50829: PUSH
50830: LD_EXP 45
50834: PUSH
50835: LD_EXP 48
50839: PUSH
50840: LD_EXP 50
50844: PUSH
50845: LD_EXP 51
50849: PUSH
50850: LD_EXP 52
50854: PUSH
50855: LD_EXP 54
50859: PUSH
50860: LD_EXP 55
50864: PUSH
50865: LD_EXP 58
50869: PUSH
50870: LD_EXP 59
50874: PUSH
50875: LD_EXP 60
50879: PUSH
50880: LD_EXP 61
50884: PUSH
50885: LD_EXP 62
50889: PUSH
50890: LD_EXP 63
50894: PUSH
50895: LD_EXP 64
50899: PUSH
50900: LD_EXP 65
50904: PUSH
50905: LD_EXP 66
50909: PUSH
50910: LD_EXP 31
50914: PUSH
50915: LD_EXP 32
50919: PUSH
50920: LD_EXP 35
50924: PUSH
50925: LD_EXP 36
50929: PUSH
50930: LD_EXP 37
50934: PUSH
50935: LD_EXP 33
50939: PUSH
50940: LD_EXP 34
50944: PUSH
50945: LD_EXP 42
50949: PUSH
50950: LD_EXP 46
50954: PUSH
50955: LD_EXP 47
50959: PUSH
50960: LD_EXP 49
50964: PUSH
50965: LD_EXP 53
50969: PUSH
50970: LD_EXP 56
50974: PUSH
50975: LD_EXP 57
50979: PUSH
50980: LD_EXP 67
50984: PUSH
50985: LD_EXP 68
50989: PUSH
50990: LD_EXP 69
50994: PUSH
50995: LD_EXP 70
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: ST_TO_ADDR
// tmp :=  ;
51056: LD_ADDR_VAR 0 3
51060: PUSH
51061: LD_STRING 
51063: ST_TO_ADDR
// for i = 1 to normalCounter do
51064: LD_ADDR_VAR 0 8
51068: PUSH
51069: DOUBLE
51070: LD_INT 1
51072: DEC
51073: ST_TO_ADDR
51074: LD_EXP 15
51078: PUSH
51079: FOR_TO
51080: IFFALSE 51116
// begin if flags [ i ] then
51082: LD_VAR 0 4
51086: PUSH
51087: LD_VAR 0 8
51091: ARRAY
51092: IFFALSE 51114
// tmp := tmp & i & ; ;
51094: LD_ADDR_VAR 0 3
51098: PUSH
51099: LD_VAR 0 3
51103: PUSH
51104: LD_VAR 0 8
51108: STR
51109: PUSH
51110: LD_STRING ;
51112: STR
51113: ST_TO_ADDR
// end ;
51114: GO 51079
51116: POP
51117: POP
// for i = 1 to hardcoreCounter do
51118: LD_ADDR_VAR 0 8
51122: PUSH
51123: DOUBLE
51124: LD_INT 1
51126: DEC
51127: ST_TO_ADDR
51128: LD_EXP 16
51132: PUSH
51133: FOR_TO
51134: IFFALSE 51180
// begin if flags [ normalCounter + i ] then
51136: LD_VAR 0 4
51140: PUSH
51141: LD_EXP 15
51145: PUSH
51146: LD_VAR 0 8
51150: PLUS
51151: ARRAY
51152: IFFALSE 51178
// tmp := tmp & ( 100 + i ) & ; ;
51154: LD_ADDR_VAR 0 3
51158: PUSH
51159: LD_VAR 0 3
51163: PUSH
51164: LD_INT 100
51166: PUSH
51167: LD_VAR 0 8
51171: PLUS
51172: STR
51173: PUSH
51174: LD_STRING ;
51176: STR
51177: ST_TO_ADDR
// end ;
51178: GO 51133
51180: POP
51181: POP
// if tmp then
51182: LD_VAR 0 3
51186: IFFALSE 51198
// active := tmp ;
51188: LD_ADDR_VAR 0 7
51192: PUSH
51193: LD_VAR 0 3
51197: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
51198: LD_STRING getStreamItemsFromMission("
51200: PUSH
51201: LD_VAR 0 5
51205: STR
51206: PUSH
51207: LD_STRING ","
51209: STR
51210: PUSH
51211: LD_VAR 0 6
51215: STR
51216: PUSH
51217: LD_STRING ","
51219: STR
51220: PUSH
51221: LD_VAR 0 7
51225: STR
51226: PUSH
51227: LD_STRING ")
51229: STR
51230: PPUSH
51231: CALL_OW 559
// end else
51235: GO 51244
// ToLua ( getStreamItemsFromMission("","","") ) ;
51237: LD_STRING getStreamItemsFromMission("","","")
51239: PPUSH
51240: CALL_OW 559
// end ;
51244: LD_VAR 0 2
51248: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
51249: LD_EXP 14
51253: PUSH
51254: LD_EXP 19
51258: AND
51259: IFFALSE 51383
51261: GO 51263
51263: DISABLE
51264: LD_INT 0
51266: PPUSH
51267: PPUSH
// begin enable ;
51268: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
51269: LD_ADDR_VAR 0 2
51273: PUSH
51274: LD_INT 22
51276: PUSH
51277: LD_OWVAR 2
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 2
51288: PUSH
51289: LD_INT 34
51291: PUSH
51292: LD_INT 7
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 34
51301: PUSH
51302: LD_INT 45
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 34
51311: PUSH
51312: LD_INT 28
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 34
51321: PUSH
51322: LD_INT 47
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PPUSH
51340: CALL_OW 69
51344: ST_TO_ADDR
// if not tmp then
51345: LD_VAR 0 2
51349: NOT
51350: IFFALSE 51354
// exit ;
51352: GO 51383
// for i in tmp do
51354: LD_ADDR_VAR 0 1
51358: PUSH
51359: LD_VAR 0 2
51363: PUSH
51364: FOR_IN
51365: IFFALSE 51381
// begin SetLives ( i , 0 ) ;
51367: LD_VAR 0 1
51371: PPUSH
51372: LD_INT 0
51374: PPUSH
51375: CALL_OW 234
// end ;
51379: GO 51364
51381: POP
51382: POP
// end ;
51383: PPOPN 2
51385: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
51386: LD_EXP 14
51390: PUSH
51391: LD_EXP 20
51395: AND
51396: IFFALSE 51480
51398: GO 51400
51400: DISABLE
51401: LD_INT 0
51403: PPUSH
51404: PPUSH
// begin enable ;
51405: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
51406: LD_ADDR_VAR 0 2
51410: PUSH
51411: LD_INT 22
51413: PUSH
51414: LD_OWVAR 2
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 32
51425: PUSH
51426: LD_INT 3
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PPUSH
51437: CALL_OW 69
51441: ST_TO_ADDR
// if not tmp then
51442: LD_VAR 0 2
51446: NOT
51447: IFFALSE 51451
// exit ;
51449: GO 51480
// for i in tmp do
51451: LD_ADDR_VAR 0 1
51455: PUSH
51456: LD_VAR 0 2
51460: PUSH
51461: FOR_IN
51462: IFFALSE 51478
// begin SetLives ( i , 0 ) ;
51464: LD_VAR 0 1
51468: PPUSH
51469: LD_INT 0
51471: PPUSH
51472: CALL_OW 234
// end ;
51476: GO 51461
51478: POP
51479: POP
// end ;
51480: PPOPN 2
51482: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
51483: LD_EXP 14
51487: PUSH
51488: LD_EXP 17
51492: AND
51493: IFFALSE 51586
51495: GO 51497
51497: DISABLE
51498: LD_INT 0
51500: PPUSH
// begin enable ;
51501: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
51502: LD_ADDR_VAR 0 1
51506: PUSH
51507: LD_INT 22
51509: PUSH
51510: LD_OWVAR 2
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 2
51521: PUSH
51522: LD_INT 25
51524: PUSH
51525: LD_INT 5
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 25
51534: PUSH
51535: LD_INT 9
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 25
51544: PUSH
51545: LD_INT 8
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PPUSH
51562: CALL_OW 69
51566: PUSH
51567: FOR_IN
51568: IFFALSE 51584
// begin SetClass ( i , 1 ) ;
51570: LD_VAR 0 1
51574: PPUSH
51575: LD_INT 1
51577: PPUSH
51578: CALL_OW 336
// end ;
51582: GO 51567
51584: POP
51585: POP
// end ;
51586: PPOPN 1
51588: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
51589: LD_EXP 14
51593: PUSH
51594: LD_EXP 18
51598: AND
51599: PUSH
51600: LD_OWVAR 65
51604: PUSH
51605: LD_INT 7
51607: LESS
51608: AND
51609: IFFALSE 51623
51611: GO 51613
51613: DISABLE
// begin enable ;
51614: ENABLE
// game_speed := 7 ;
51615: LD_ADDR_OWVAR 65
51619: PUSH
51620: LD_INT 7
51622: ST_TO_ADDR
// end ;
51623: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
51624: LD_EXP 14
51628: PUSH
51629: LD_EXP 21
51633: AND
51634: IFFALSE 51836
51636: GO 51638
51638: DISABLE
51639: LD_INT 0
51641: PPUSH
51642: PPUSH
51643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
51644: LD_ADDR_VAR 0 3
51648: PUSH
51649: LD_INT 81
51651: PUSH
51652: LD_OWVAR 2
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 21
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PPUSH
51675: CALL_OW 69
51679: ST_TO_ADDR
// if not tmp then
51680: LD_VAR 0 3
51684: NOT
51685: IFFALSE 51689
// exit ;
51687: GO 51836
// if tmp > 5 then
51689: LD_VAR 0 3
51693: PUSH
51694: LD_INT 5
51696: GREATER
51697: IFFALSE 51709
// k := 5 else
51699: LD_ADDR_VAR 0 2
51703: PUSH
51704: LD_INT 5
51706: ST_TO_ADDR
51707: GO 51719
// k := tmp ;
51709: LD_ADDR_VAR 0 2
51713: PUSH
51714: LD_VAR 0 3
51718: ST_TO_ADDR
// for i := 1 to k do
51719: LD_ADDR_VAR 0 1
51723: PUSH
51724: DOUBLE
51725: LD_INT 1
51727: DEC
51728: ST_TO_ADDR
51729: LD_VAR 0 2
51733: PUSH
51734: FOR_TO
51735: IFFALSE 51834
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
51737: LD_VAR 0 3
51741: PUSH
51742: LD_VAR 0 1
51746: ARRAY
51747: PPUSH
51748: LD_VAR 0 1
51752: PUSH
51753: LD_INT 4
51755: MOD
51756: PUSH
51757: LD_INT 1
51759: PLUS
51760: PPUSH
51761: CALL_OW 259
51765: PUSH
51766: LD_INT 10
51768: LESS
51769: IFFALSE 51832
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
51771: LD_VAR 0 3
51775: PUSH
51776: LD_VAR 0 1
51780: ARRAY
51781: PPUSH
51782: LD_VAR 0 1
51786: PUSH
51787: LD_INT 4
51789: MOD
51790: PUSH
51791: LD_INT 1
51793: PLUS
51794: PPUSH
51795: LD_VAR 0 3
51799: PUSH
51800: LD_VAR 0 1
51804: ARRAY
51805: PPUSH
51806: LD_VAR 0 1
51810: PUSH
51811: LD_INT 4
51813: MOD
51814: PUSH
51815: LD_INT 1
51817: PLUS
51818: PPUSH
51819: CALL_OW 259
51823: PUSH
51824: LD_INT 1
51826: PLUS
51827: PPUSH
51828: CALL_OW 237
51832: GO 51734
51834: POP
51835: POP
// end ;
51836: PPOPN 3
51838: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
51839: LD_EXP 14
51843: PUSH
51844: LD_EXP 22
51848: AND
51849: IFFALSE 51869
51851: GO 51853
51853: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
51854: LD_INT 4
51856: PPUSH
51857: LD_OWVAR 2
51861: PPUSH
51862: LD_INT 0
51864: PPUSH
51865: CALL_OW 324
51869: END
// every 0 0$1 trigger StreamModeActive and sShovel do
51870: LD_EXP 14
51874: PUSH
51875: LD_EXP 51
51879: AND
51880: IFFALSE 51900
51882: GO 51884
51884: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
51885: LD_INT 19
51887: PPUSH
51888: LD_OWVAR 2
51892: PPUSH
51893: LD_INT 0
51895: PPUSH
51896: CALL_OW 324
51900: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
51901: LD_EXP 14
51905: PUSH
51906: LD_EXP 23
51910: AND
51911: IFFALSE 52013
51913: GO 51915
51915: DISABLE
51916: LD_INT 0
51918: PPUSH
51919: PPUSH
// begin enable ;
51920: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
51921: LD_ADDR_VAR 0 2
51925: PUSH
51926: LD_INT 22
51928: PUSH
51929: LD_OWVAR 2
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: PUSH
51941: LD_INT 34
51943: PUSH
51944: LD_INT 11
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 34
51953: PUSH
51954: LD_INT 30
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: LIST
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PPUSH
51970: CALL_OW 69
51974: ST_TO_ADDR
// if not tmp then
51975: LD_VAR 0 2
51979: NOT
51980: IFFALSE 51984
// exit ;
51982: GO 52013
// for i in tmp do
51984: LD_ADDR_VAR 0 1
51988: PUSH
51989: LD_VAR 0 2
51993: PUSH
51994: FOR_IN
51995: IFFALSE 52011
// begin SetLives ( i , 0 ) ;
51997: LD_VAR 0 1
52001: PPUSH
52002: LD_INT 0
52004: PPUSH
52005: CALL_OW 234
// end ;
52009: GO 51994
52011: POP
52012: POP
// end ;
52013: PPOPN 2
52015: END
// every 0 0$1 trigger StreamModeActive and sBunker do
52016: LD_EXP 14
52020: PUSH
52021: LD_EXP 24
52025: AND
52026: IFFALSE 52046
52028: GO 52030
52030: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
52031: LD_INT 32
52033: PPUSH
52034: LD_OWVAR 2
52038: PPUSH
52039: LD_INT 0
52041: PPUSH
52042: CALL_OW 324
52046: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
52047: LD_EXP 14
52051: PUSH
52052: LD_EXP 25
52056: AND
52057: IFFALSE 52238
52059: GO 52061
52061: DISABLE
52062: LD_INT 0
52064: PPUSH
52065: PPUSH
52066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
52067: LD_ADDR_VAR 0 2
52071: PUSH
52072: LD_INT 22
52074: PUSH
52075: LD_OWVAR 2
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 33
52086: PUSH
52087: LD_INT 3
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PPUSH
52098: CALL_OW 69
52102: ST_TO_ADDR
// if not tmp then
52103: LD_VAR 0 2
52107: NOT
52108: IFFALSE 52112
// exit ;
52110: GO 52238
// side := 0 ;
52112: LD_ADDR_VAR 0 3
52116: PUSH
52117: LD_INT 0
52119: ST_TO_ADDR
// for i := 1 to 8 do
52120: LD_ADDR_VAR 0 1
52124: PUSH
52125: DOUBLE
52126: LD_INT 1
52128: DEC
52129: ST_TO_ADDR
52130: LD_INT 8
52132: PUSH
52133: FOR_TO
52134: IFFALSE 52182
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
52136: LD_OWVAR 2
52140: PUSH
52141: LD_VAR 0 1
52145: NONEQUAL
52146: PUSH
52147: LD_OWVAR 2
52151: PPUSH
52152: LD_VAR 0 1
52156: PPUSH
52157: CALL_OW 81
52161: PUSH
52162: LD_INT 2
52164: EQUAL
52165: AND
52166: IFFALSE 52180
// begin side := i ;
52168: LD_ADDR_VAR 0 3
52172: PUSH
52173: LD_VAR 0 1
52177: ST_TO_ADDR
// break ;
52178: GO 52182
// end ;
52180: GO 52133
52182: POP
52183: POP
// if not side then
52184: LD_VAR 0 3
52188: NOT
52189: IFFALSE 52193
// exit ;
52191: GO 52238
// for i := 1 to tmp do
52193: LD_ADDR_VAR 0 1
52197: PUSH
52198: DOUBLE
52199: LD_INT 1
52201: DEC
52202: ST_TO_ADDR
52203: LD_VAR 0 2
52207: PUSH
52208: FOR_TO
52209: IFFALSE 52236
// if Prob ( 60 ) then
52211: LD_INT 60
52213: PPUSH
52214: CALL_OW 13
52218: IFFALSE 52234
// SetSide ( i , side ) ;
52220: LD_VAR 0 1
52224: PPUSH
52225: LD_VAR 0 3
52229: PPUSH
52230: CALL_OW 235
52234: GO 52208
52236: POP
52237: POP
// end ;
52238: PPOPN 3
52240: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
52241: LD_EXP 14
52245: PUSH
52246: LD_EXP 27
52250: AND
52251: IFFALSE 52370
52253: GO 52255
52255: DISABLE
52256: LD_INT 0
52258: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
52259: LD_ADDR_VAR 0 1
52263: PUSH
52264: LD_INT 22
52266: PUSH
52267: LD_OWVAR 2
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 21
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 3
52288: PUSH
52289: LD_INT 23
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: LIST
52307: PPUSH
52308: CALL_OW 69
52312: PUSH
52313: FOR_IN
52314: IFFALSE 52368
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
52316: LD_VAR 0 1
52320: PPUSH
52321: CALL_OW 257
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: LD_INT 2
52331: PUSH
52332: LD_INT 3
52334: PUSH
52335: LD_INT 4
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: IN
52344: IFFALSE 52366
// SetClass ( un , rand ( 1 , 4 ) ) ;
52346: LD_VAR 0 1
52350: PPUSH
52351: LD_INT 1
52353: PPUSH
52354: LD_INT 4
52356: PPUSH
52357: CALL_OW 12
52361: PPUSH
52362: CALL_OW 336
52366: GO 52313
52368: POP
52369: POP
// end ;
52370: PPOPN 1
52372: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
52373: LD_EXP 14
52377: PUSH
52378: LD_EXP 26
52382: AND
52383: IFFALSE 52462
52385: GO 52387
52387: DISABLE
52388: LD_INT 0
52390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52391: LD_ADDR_VAR 0 1
52395: PUSH
52396: LD_INT 22
52398: PUSH
52399: LD_OWVAR 2
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 21
52410: PUSH
52411: LD_INT 3
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PPUSH
52422: CALL_OW 69
52426: ST_TO_ADDR
// if not tmp then
52427: LD_VAR 0 1
52431: NOT
52432: IFFALSE 52436
// exit ;
52434: GO 52462
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
52436: LD_VAR 0 1
52440: PUSH
52441: LD_INT 1
52443: PPUSH
52444: LD_VAR 0 1
52448: PPUSH
52449: CALL_OW 12
52453: ARRAY
52454: PPUSH
52455: LD_INT 100
52457: PPUSH
52458: CALL_OW 234
// end ;
52462: PPOPN 1
52464: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
52465: LD_EXP 14
52469: PUSH
52470: LD_EXP 28
52474: AND
52475: IFFALSE 52573
52477: GO 52479
52479: DISABLE
52480: LD_INT 0
52482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52483: LD_ADDR_VAR 0 1
52487: PUSH
52488: LD_INT 22
52490: PUSH
52491: LD_OWVAR 2
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 21
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PPUSH
52514: CALL_OW 69
52518: ST_TO_ADDR
// if not tmp then
52519: LD_VAR 0 1
52523: NOT
52524: IFFALSE 52528
// exit ;
52526: GO 52573
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
52528: LD_VAR 0 1
52532: PUSH
52533: LD_INT 1
52535: PPUSH
52536: LD_VAR 0 1
52540: PPUSH
52541: CALL_OW 12
52545: ARRAY
52546: PPUSH
52547: LD_INT 1
52549: PPUSH
52550: LD_INT 4
52552: PPUSH
52553: CALL_OW 12
52557: PPUSH
52558: LD_INT 3000
52560: PPUSH
52561: LD_INT 9000
52563: PPUSH
52564: CALL_OW 12
52568: PPUSH
52569: CALL_OW 492
// end ;
52573: PPOPN 1
52575: END
// every 0 0$1 trigger StreamModeActive and sDepot do
52576: LD_EXP 14
52580: PUSH
52581: LD_EXP 29
52585: AND
52586: IFFALSE 52606
52588: GO 52590
52590: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
52591: LD_INT 1
52593: PPUSH
52594: LD_OWVAR 2
52598: PPUSH
52599: LD_INT 0
52601: PPUSH
52602: CALL_OW 324
52606: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
52607: LD_EXP 14
52611: PUSH
52612: LD_EXP 30
52616: AND
52617: IFFALSE 52700
52619: GO 52621
52621: DISABLE
52622: LD_INT 0
52624: PPUSH
52625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52626: LD_ADDR_VAR 0 2
52630: PUSH
52631: LD_INT 22
52633: PUSH
52634: LD_OWVAR 2
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 21
52645: PUSH
52646: LD_INT 3
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PPUSH
52657: CALL_OW 69
52661: ST_TO_ADDR
// if not tmp then
52662: LD_VAR 0 2
52666: NOT
52667: IFFALSE 52671
// exit ;
52669: GO 52700
// for i in tmp do
52671: LD_ADDR_VAR 0 1
52675: PUSH
52676: LD_VAR 0 2
52680: PUSH
52681: FOR_IN
52682: IFFALSE 52698
// SetBLevel ( i , 10 ) ;
52684: LD_VAR 0 1
52688: PPUSH
52689: LD_INT 10
52691: PPUSH
52692: CALL_OW 241
52696: GO 52681
52698: POP
52699: POP
// end ;
52700: PPOPN 2
52702: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
52703: LD_EXP 14
52707: PUSH
52708: LD_EXP 31
52712: AND
52713: IFFALSE 52824
52715: GO 52717
52717: DISABLE
52718: LD_INT 0
52720: PPUSH
52721: PPUSH
52722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52723: LD_ADDR_VAR 0 3
52727: PUSH
52728: LD_INT 22
52730: PUSH
52731: LD_OWVAR 2
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 25
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PPUSH
52754: CALL_OW 69
52758: ST_TO_ADDR
// if not tmp then
52759: LD_VAR 0 3
52763: NOT
52764: IFFALSE 52768
// exit ;
52766: GO 52824
// un := tmp [ rand ( 1 , tmp ) ] ;
52768: LD_ADDR_VAR 0 2
52772: PUSH
52773: LD_VAR 0 3
52777: PUSH
52778: LD_INT 1
52780: PPUSH
52781: LD_VAR 0 3
52785: PPUSH
52786: CALL_OW 12
52790: ARRAY
52791: ST_TO_ADDR
// if Crawls ( un ) then
52792: LD_VAR 0 2
52796: PPUSH
52797: CALL_OW 318
52801: IFFALSE 52812
// ComWalk ( un ) ;
52803: LD_VAR 0 2
52807: PPUSH
52808: CALL_OW 138
// SetClass ( un , class_sniper ) ;
52812: LD_VAR 0 2
52816: PPUSH
52817: LD_INT 5
52819: PPUSH
52820: CALL_OW 336
// end ;
52824: PPOPN 3
52826: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
52827: LD_EXP 14
52831: PUSH
52832: LD_EXP 32
52836: AND
52837: PUSH
52838: LD_OWVAR 67
52842: PUSH
52843: LD_INT 4
52845: LESS
52846: AND
52847: IFFALSE 52866
52849: GO 52851
52851: DISABLE
// begin Difficulty := Difficulty + 1 ;
52852: LD_ADDR_OWVAR 67
52856: PUSH
52857: LD_OWVAR 67
52861: PUSH
52862: LD_INT 1
52864: PLUS
52865: ST_TO_ADDR
// end ;
52866: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
52867: LD_EXP 14
52871: PUSH
52872: LD_EXP 33
52876: AND
52877: IFFALSE 52980
52879: GO 52881
52881: DISABLE
52882: LD_INT 0
52884: PPUSH
// begin for i := 1 to 5 do
52885: LD_ADDR_VAR 0 1
52889: PUSH
52890: DOUBLE
52891: LD_INT 1
52893: DEC
52894: ST_TO_ADDR
52895: LD_INT 5
52897: PUSH
52898: FOR_TO
52899: IFFALSE 52978
// begin uc_nation := nation_nature ;
52901: LD_ADDR_OWVAR 21
52905: PUSH
52906: LD_INT 0
52908: ST_TO_ADDR
// uc_side := 0 ;
52909: LD_ADDR_OWVAR 20
52913: PUSH
52914: LD_INT 0
52916: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
52917: LD_ADDR_OWVAR 29
52921: PUSH
52922: LD_INT 12
52924: PUSH
52925: LD_INT 12
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: ST_TO_ADDR
// hc_agressivity := 20 ;
52932: LD_ADDR_OWVAR 35
52936: PUSH
52937: LD_INT 20
52939: ST_TO_ADDR
// hc_class := class_tiger ;
52940: LD_ADDR_OWVAR 28
52944: PUSH
52945: LD_INT 14
52947: ST_TO_ADDR
// hc_gallery :=  ;
52948: LD_ADDR_OWVAR 33
52952: PUSH
52953: LD_STRING 
52955: ST_TO_ADDR
// hc_name :=  ;
52956: LD_ADDR_OWVAR 26
52960: PUSH
52961: LD_STRING 
52963: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
52964: CALL_OW 44
52968: PPUSH
52969: LD_INT 0
52971: PPUSH
52972: CALL_OW 51
// end ;
52976: GO 52898
52978: POP
52979: POP
// end ;
52980: PPOPN 1
52982: END
// every 0 0$1 trigger StreamModeActive and sBomb do
52983: LD_EXP 14
52987: PUSH
52988: LD_EXP 34
52992: AND
52993: IFFALSE 53002
52995: GO 52997
52997: DISABLE
// StreamSibBomb ;
52998: CALL 53003 0 0
53002: END
// export function StreamSibBomb ; var i , x , y ; begin
53003: LD_INT 0
53005: PPUSH
53006: PPUSH
53007: PPUSH
53008: PPUSH
// result := false ;
53009: LD_ADDR_VAR 0 1
53013: PUSH
53014: LD_INT 0
53016: ST_TO_ADDR
// for i := 1 to 16 do
53017: LD_ADDR_VAR 0 2
53021: PUSH
53022: DOUBLE
53023: LD_INT 1
53025: DEC
53026: ST_TO_ADDR
53027: LD_INT 16
53029: PUSH
53030: FOR_TO
53031: IFFALSE 53230
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53033: LD_ADDR_VAR 0 3
53037: PUSH
53038: LD_INT 10
53040: PUSH
53041: LD_INT 20
53043: PUSH
53044: LD_INT 30
53046: PUSH
53047: LD_INT 40
53049: PUSH
53050: LD_INT 50
53052: PUSH
53053: LD_INT 60
53055: PUSH
53056: LD_INT 70
53058: PUSH
53059: LD_INT 80
53061: PUSH
53062: LD_INT 90
53064: PUSH
53065: LD_INT 100
53067: PUSH
53068: LD_INT 110
53070: PUSH
53071: LD_INT 120
53073: PUSH
53074: LD_INT 130
53076: PUSH
53077: LD_INT 140
53079: PUSH
53080: LD_INT 150
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: PPUSH
53103: LD_INT 15
53105: PPUSH
53106: CALL_OW 12
53110: ARRAY
53111: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53112: LD_ADDR_VAR 0 4
53116: PUSH
53117: LD_INT 10
53119: PUSH
53120: LD_INT 20
53122: PUSH
53123: LD_INT 30
53125: PUSH
53126: LD_INT 40
53128: PUSH
53129: LD_INT 50
53131: PUSH
53132: LD_INT 60
53134: PUSH
53135: LD_INT 70
53137: PUSH
53138: LD_INT 80
53140: PUSH
53141: LD_INT 90
53143: PUSH
53144: LD_INT 100
53146: PUSH
53147: LD_INT 110
53149: PUSH
53150: LD_INT 120
53152: PUSH
53153: LD_INT 130
53155: PUSH
53156: LD_INT 140
53158: PUSH
53159: LD_INT 150
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PPUSH
53182: LD_INT 15
53184: PPUSH
53185: CALL_OW 12
53189: ARRAY
53190: ST_TO_ADDR
// if ValidHex ( x , y ) then
53191: LD_VAR 0 3
53195: PPUSH
53196: LD_VAR 0 4
53200: PPUSH
53201: CALL_OW 488
53205: IFFALSE 53228
// begin result := [ x , y ] ;
53207: LD_ADDR_VAR 0 1
53211: PUSH
53212: LD_VAR 0 3
53216: PUSH
53217: LD_VAR 0 4
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: ST_TO_ADDR
// break ;
53226: GO 53230
// end ; end ;
53228: GO 53030
53230: POP
53231: POP
// if result then
53232: LD_VAR 0 1
53236: IFFALSE 53296
// begin ToLua ( playSibBomb() ) ;
53238: LD_STRING playSibBomb()
53240: PPUSH
53241: CALL_OW 559
// wait ( 0 0$14 ) ;
53245: LD_INT 490
53247: PPUSH
53248: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
53252: LD_VAR 0 1
53256: PUSH
53257: LD_INT 1
53259: ARRAY
53260: PPUSH
53261: LD_VAR 0 1
53265: PUSH
53266: LD_INT 2
53268: ARRAY
53269: PPUSH
53270: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
53274: LD_VAR 0 1
53278: PUSH
53279: LD_INT 1
53281: ARRAY
53282: PPUSH
53283: LD_VAR 0 1
53287: PUSH
53288: LD_INT 2
53290: ARRAY
53291: PPUSH
53292: CALL_OW 429
// end ; end ;
53296: LD_VAR 0 1
53300: RET
// every 0 0$1 trigger StreamModeActive and sReset do
53301: LD_EXP 14
53305: PUSH
53306: LD_EXP 36
53310: AND
53311: IFFALSE 53323
53313: GO 53315
53315: DISABLE
// YouLost (  ) ;
53316: LD_STRING 
53318: PPUSH
53319: CALL_OW 104
53323: END
// every 0 0$1 trigger StreamModeActive and sFog do
53324: LD_EXP 14
53328: PUSH
53329: LD_EXP 35
53333: AND
53334: IFFALSE 53348
53336: GO 53338
53338: DISABLE
// FogOff ( your_side ) ;
53339: LD_OWVAR 2
53343: PPUSH
53344: CALL_OW 344
53348: END
// every 0 0$1 trigger StreamModeActive and sSun do
53349: LD_EXP 14
53353: PUSH
53354: LD_EXP 37
53358: AND
53359: IFFALSE 53387
53361: GO 53363
53363: DISABLE
// begin solar_recharge_percent := 0 ;
53364: LD_ADDR_OWVAR 79
53368: PUSH
53369: LD_INT 0
53371: ST_TO_ADDR
// wait ( 5 5$00 ) ;
53372: LD_INT 10500
53374: PPUSH
53375: CALL_OW 67
// solar_recharge_percent := 100 ;
53379: LD_ADDR_OWVAR 79
53383: PUSH
53384: LD_INT 100
53386: ST_TO_ADDR
// end ;
53387: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
53388: LD_EXP 14
53392: PUSH
53393: LD_EXP 38
53397: AND
53398: IFFALSE 53637
53400: GO 53402
53402: DISABLE
53403: LD_INT 0
53405: PPUSH
53406: PPUSH
53407: PPUSH
// begin tmp := [ ] ;
53408: LD_ADDR_VAR 0 3
53412: PUSH
53413: EMPTY
53414: ST_TO_ADDR
// for i := 1 to 6 do
53415: LD_ADDR_VAR 0 1
53419: PUSH
53420: DOUBLE
53421: LD_INT 1
53423: DEC
53424: ST_TO_ADDR
53425: LD_INT 6
53427: PUSH
53428: FOR_TO
53429: IFFALSE 53534
// begin uc_nation := nation_nature ;
53431: LD_ADDR_OWVAR 21
53435: PUSH
53436: LD_INT 0
53438: ST_TO_ADDR
// uc_side := 0 ;
53439: LD_ADDR_OWVAR 20
53443: PUSH
53444: LD_INT 0
53446: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53447: LD_ADDR_OWVAR 29
53451: PUSH
53452: LD_INT 12
53454: PUSH
53455: LD_INT 12
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: ST_TO_ADDR
// hc_agressivity := 20 ;
53462: LD_ADDR_OWVAR 35
53466: PUSH
53467: LD_INT 20
53469: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
53470: LD_ADDR_OWVAR 28
53474: PUSH
53475: LD_INT 17
53477: ST_TO_ADDR
// hc_gallery :=  ;
53478: LD_ADDR_OWVAR 33
53482: PUSH
53483: LD_STRING 
53485: ST_TO_ADDR
// hc_name :=  ;
53486: LD_ADDR_OWVAR 26
53490: PUSH
53491: LD_STRING 
53493: ST_TO_ADDR
// un := CreateHuman ;
53494: LD_ADDR_VAR 0 2
53498: PUSH
53499: CALL_OW 44
53503: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
53504: LD_VAR 0 2
53508: PPUSH
53509: LD_INT 1
53511: PPUSH
53512: CALL_OW 51
// tmp := tmp ^ un ;
53516: LD_ADDR_VAR 0 3
53520: PUSH
53521: LD_VAR 0 3
53525: PUSH
53526: LD_VAR 0 2
53530: ADD
53531: ST_TO_ADDR
// end ;
53532: GO 53428
53534: POP
53535: POP
// repeat wait ( 0 0$1 ) ;
53536: LD_INT 35
53538: PPUSH
53539: CALL_OW 67
// for un in tmp do
53543: LD_ADDR_VAR 0 2
53547: PUSH
53548: LD_VAR 0 3
53552: PUSH
53553: FOR_IN
53554: IFFALSE 53628
// begin if IsDead ( un ) then
53556: LD_VAR 0 2
53560: PPUSH
53561: CALL_OW 301
53565: IFFALSE 53585
// begin tmp := tmp diff un ;
53567: LD_ADDR_VAR 0 3
53571: PUSH
53572: LD_VAR 0 3
53576: PUSH
53577: LD_VAR 0 2
53581: DIFF
53582: ST_TO_ADDR
// continue ;
53583: GO 53553
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
53585: LD_VAR 0 2
53589: PPUSH
53590: LD_INT 3
53592: PUSH
53593: LD_INT 22
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PPUSH
53607: CALL_OW 69
53611: PPUSH
53612: LD_VAR 0 2
53616: PPUSH
53617: CALL_OW 74
53621: PPUSH
53622: CALL_OW 115
// end ;
53626: GO 53553
53628: POP
53629: POP
// until not tmp ;
53630: LD_VAR 0 3
53634: NOT
53635: IFFALSE 53536
// end ;
53637: PPOPN 3
53639: END
// every 0 0$1 trigger StreamModeActive and sTroll do
53640: LD_EXP 14
53644: PUSH
53645: LD_EXP 39
53649: AND
53650: IFFALSE 53704
53652: GO 53654
53654: DISABLE
// begin ToLua ( displayTroll(); ) ;
53655: LD_STRING displayTroll();
53657: PPUSH
53658: CALL_OW 559
// wait ( 3 3$00 ) ;
53662: LD_INT 6300
53664: PPUSH
53665: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53669: LD_STRING hideTroll();
53671: PPUSH
53672: CALL_OW 559
// wait ( 1 1$00 ) ;
53676: LD_INT 2100
53678: PPUSH
53679: CALL_OW 67
// ToLua ( displayTroll(); ) ;
53683: LD_STRING displayTroll();
53685: PPUSH
53686: CALL_OW 559
// wait ( 1 1$00 ) ;
53690: LD_INT 2100
53692: PPUSH
53693: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53697: LD_STRING hideTroll();
53699: PPUSH
53700: CALL_OW 559
// end ;
53704: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
53705: LD_EXP 14
53709: PUSH
53710: LD_EXP 40
53714: AND
53715: IFFALSE 53778
53717: GO 53719
53719: DISABLE
53720: LD_INT 0
53722: PPUSH
// begin p := 0 ;
53723: LD_ADDR_VAR 0 1
53727: PUSH
53728: LD_INT 0
53730: ST_TO_ADDR
// repeat game_speed := 1 ;
53731: LD_ADDR_OWVAR 65
53735: PUSH
53736: LD_INT 1
53738: ST_TO_ADDR
// wait ( 0 0$1 ) ;
53739: LD_INT 35
53741: PPUSH
53742: CALL_OW 67
// p := p + 1 ;
53746: LD_ADDR_VAR 0 1
53750: PUSH
53751: LD_VAR 0 1
53755: PUSH
53756: LD_INT 1
53758: PLUS
53759: ST_TO_ADDR
// until p >= 60 ;
53760: LD_VAR 0 1
53764: PUSH
53765: LD_INT 60
53767: GREATEREQUAL
53768: IFFALSE 53731
// game_speed := 4 ;
53770: LD_ADDR_OWVAR 65
53774: PUSH
53775: LD_INT 4
53777: ST_TO_ADDR
// end ;
53778: PPOPN 1
53780: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
53781: LD_EXP 14
53785: PUSH
53786: LD_EXP 41
53790: AND
53791: IFFALSE 53937
53793: GO 53795
53795: DISABLE
53796: LD_INT 0
53798: PPUSH
53799: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53800: LD_ADDR_VAR 0 1
53804: PUSH
53805: LD_INT 22
53807: PUSH
53808: LD_OWVAR 2
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: LD_INT 30
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 30
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: LIST
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PPUSH
53849: CALL_OW 69
53853: ST_TO_ADDR
// if not depot then
53854: LD_VAR 0 1
53858: NOT
53859: IFFALSE 53863
// exit ;
53861: GO 53937
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
53863: LD_ADDR_VAR 0 2
53867: PUSH
53868: LD_VAR 0 1
53872: PUSH
53873: LD_INT 1
53875: PPUSH
53876: LD_VAR 0 1
53880: PPUSH
53881: CALL_OW 12
53885: ARRAY
53886: PPUSH
53887: CALL_OW 274
53891: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
53892: LD_VAR 0 2
53896: PPUSH
53897: LD_INT 1
53899: PPUSH
53900: LD_INT 0
53902: PPUSH
53903: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
53907: LD_VAR 0 2
53911: PPUSH
53912: LD_INT 2
53914: PPUSH
53915: LD_INT 0
53917: PPUSH
53918: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
53922: LD_VAR 0 2
53926: PPUSH
53927: LD_INT 3
53929: PPUSH
53930: LD_INT 0
53932: PPUSH
53933: CALL_OW 277
// end ;
53937: PPOPN 2
53939: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
53940: LD_EXP 14
53944: PUSH
53945: LD_EXP 42
53949: AND
53950: IFFALSE 54047
53952: GO 53954
53954: DISABLE
53955: LD_INT 0
53957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53958: LD_ADDR_VAR 0 1
53962: PUSH
53963: LD_INT 22
53965: PUSH
53966: LD_OWVAR 2
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 21
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 3
53987: PUSH
53988: LD_INT 23
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: LIST
54006: PPUSH
54007: CALL_OW 69
54011: ST_TO_ADDR
// if not tmp then
54012: LD_VAR 0 1
54016: NOT
54017: IFFALSE 54021
// exit ;
54019: GO 54047
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
54021: LD_VAR 0 1
54025: PUSH
54026: LD_INT 1
54028: PPUSH
54029: LD_VAR 0 1
54033: PPUSH
54034: CALL_OW 12
54038: ARRAY
54039: PPUSH
54040: LD_INT 200
54042: PPUSH
54043: CALL_OW 234
// end ;
54047: PPOPN 1
54049: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
54050: LD_EXP 14
54054: PUSH
54055: LD_EXP 43
54059: AND
54060: IFFALSE 54139
54062: GO 54064
54064: DISABLE
54065: LD_INT 0
54067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
54068: LD_ADDR_VAR 0 1
54072: PUSH
54073: LD_INT 22
54075: PUSH
54076: LD_OWVAR 2
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 21
54087: PUSH
54088: LD_INT 2
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PPUSH
54099: CALL_OW 69
54103: ST_TO_ADDR
// if not tmp then
54104: LD_VAR 0 1
54108: NOT
54109: IFFALSE 54113
// exit ;
54111: GO 54139
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
54113: LD_VAR 0 1
54117: PUSH
54118: LD_INT 1
54120: PPUSH
54121: LD_VAR 0 1
54125: PPUSH
54126: CALL_OW 12
54130: ARRAY
54131: PPUSH
54132: LD_INT 60
54134: PPUSH
54135: CALL_OW 234
// end ;
54139: PPOPN 1
54141: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
54142: LD_EXP 14
54146: PUSH
54147: LD_EXP 44
54151: AND
54152: IFFALSE 54251
54154: GO 54156
54156: DISABLE
54157: LD_INT 0
54159: PPUSH
54160: PPUSH
// begin enable ;
54161: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
54162: LD_ADDR_VAR 0 1
54166: PUSH
54167: LD_INT 22
54169: PUSH
54170: LD_OWVAR 2
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 61
54181: PUSH
54182: EMPTY
54183: LIST
54184: PUSH
54185: LD_INT 33
54187: PUSH
54188: LD_INT 2
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: LIST
54199: PPUSH
54200: CALL_OW 69
54204: ST_TO_ADDR
// if not tmp then
54205: LD_VAR 0 1
54209: NOT
54210: IFFALSE 54214
// exit ;
54212: GO 54251
// for i in tmp do
54214: LD_ADDR_VAR 0 2
54218: PUSH
54219: LD_VAR 0 1
54223: PUSH
54224: FOR_IN
54225: IFFALSE 54249
// if IsControledBy ( i ) then
54227: LD_VAR 0 2
54231: PPUSH
54232: CALL_OW 312
54236: IFFALSE 54247
// ComUnlink ( i ) ;
54238: LD_VAR 0 2
54242: PPUSH
54243: CALL_OW 136
54247: GO 54224
54249: POP
54250: POP
// end ;
54251: PPOPN 2
54253: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
54254: LD_EXP 14
54258: PUSH
54259: LD_EXP 45
54263: AND
54264: IFFALSE 54404
54266: GO 54268
54268: DISABLE
54269: LD_INT 0
54271: PPUSH
54272: PPUSH
// begin ToLua ( displayPowell(); ) ;
54273: LD_STRING displayPowell();
54275: PPUSH
54276: CALL_OW 559
// uc_side := 0 ;
54280: LD_ADDR_OWVAR 20
54284: PUSH
54285: LD_INT 0
54287: ST_TO_ADDR
// uc_nation := 2 ;
54288: LD_ADDR_OWVAR 21
54292: PUSH
54293: LD_INT 2
54295: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
54296: LD_ADDR_OWVAR 37
54300: PUSH
54301: LD_INT 14
54303: ST_TO_ADDR
// vc_engine := engine_siberite ;
54304: LD_ADDR_OWVAR 39
54308: PUSH
54309: LD_INT 3
54311: ST_TO_ADDR
// vc_control := control_apeman ;
54312: LD_ADDR_OWVAR 38
54316: PUSH
54317: LD_INT 5
54319: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
54320: LD_ADDR_OWVAR 40
54324: PUSH
54325: LD_INT 29
54327: ST_TO_ADDR
// un := CreateVehicle ;
54328: LD_ADDR_VAR 0 2
54332: PUSH
54333: CALL_OW 45
54337: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54338: LD_VAR 0 2
54342: PPUSH
54343: LD_INT 1
54345: PPUSH
54346: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54350: LD_INT 35
54352: PPUSH
54353: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54357: LD_VAR 0 2
54361: PPUSH
54362: LD_INT 22
54364: PUSH
54365: LD_OWVAR 2
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PPUSH
54374: CALL_OW 69
54378: PPUSH
54379: LD_VAR 0 2
54383: PPUSH
54384: CALL_OW 74
54388: PPUSH
54389: CALL_OW 115
// until IsDead ( un ) ;
54393: LD_VAR 0 2
54397: PPUSH
54398: CALL_OW 301
54402: IFFALSE 54350
// end ;
54404: PPOPN 2
54406: END
// every 0 0$1 trigger StreamModeActive and sStu do
54407: LD_EXP 14
54411: PUSH
54412: LD_EXP 53
54416: AND
54417: IFFALSE 54433
54419: GO 54421
54421: DISABLE
// begin ToLua ( displayStucuk(); ) ;
54422: LD_STRING displayStucuk();
54424: PPUSH
54425: CALL_OW 559
// ResetFog ;
54429: CALL_OW 335
// end ;
54433: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
54434: LD_EXP 14
54438: PUSH
54439: LD_EXP 46
54443: AND
54444: IFFALSE 54585
54446: GO 54448
54448: DISABLE
54449: LD_INT 0
54451: PPUSH
54452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54453: LD_ADDR_VAR 0 2
54457: PUSH
54458: LD_INT 22
54460: PUSH
54461: LD_OWVAR 2
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 21
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PPUSH
54484: CALL_OW 69
54488: ST_TO_ADDR
// if not tmp then
54489: LD_VAR 0 2
54493: NOT
54494: IFFALSE 54498
// exit ;
54496: GO 54585
// un := tmp [ rand ( 1 , tmp ) ] ;
54498: LD_ADDR_VAR 0 1
54502: PUSH
54503: LD_VAR 0 2
54507: PUSH
54508: LD_INT 1
54510: PPUSH
54511: LD_VAR 0 2
54515: PPUSH
54516: CALL_OW 12
54520: ARRAY
54521: ST_TO_ADDR
// SetSide ( un , 0 ) ;
54522: LD_VAR 0 1
54526: PPUSH
54527: LD_INT 0
54529: PPUSH
54530: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
54534: LD_VAR 0 1
54538: PPUSH
54539: LD_OWVAR 3
54543: PUSH
54544: LD_VAR 0 1
54548: DIFF
54549: PPUSH
54550: LD_VAR 0 1
54554: PPUSH
54555: CALL_OW 74
54559: PPUSH
54560: CALL_OW 115
// wait ( 0 0$20 ) ;
54564: LD_INT 700
54566: PPUSH
54567: CALL_OW 67
// SetSide ( un , your_side ) ;
54571: LD_VAR 0 1
54575: PPUSH
54576: LD_OWVAR 2
54580: PPUSH
54581: CALL_OW 235
// end ;
54585: PPOPN 2
54587: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
54588: LD_EXP 14
54592: PUSH
54593: LD_EXP 47
54597: AND
54598: IFFALSE 54704
54600: GO 54602
54602: DISABLE
54603: LD_INT 0
54605: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54606: LD_ADDR_VAR 0 1
54610: PUSH
54611: LD_INT 22
54613: PUSH
54614: LD_OWVAR 2
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: LD_INT 30
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 30
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: LIST
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PPUSH
54655: CALL_OW 69
54659: ST_TO_ADDR
// if not depot then
54660: LD_VAR 0 1
54664: NOT
54665: IFFALSE 54669
// exit ;
54667: GO 54704
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
54669: LD_VAR 0 1
54673: PUSH
54674: LD_INT 1
54676: ARRAY
54677: PPUSH
54678: CALL_OW 250
54682: PPUSH
54683: LD_VAR 0 1
54687: PUSH
54688: LD_INT 1
54690: ARRAY
54691: PPUSH
54692: CALL_OW 251
54696: PPUSH
54697: LD_INT 70
54699: PPUSH
54700: CALL_OW 495
// end ;
54704: PPOPN 1
54706: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
54707: LD_EXP 14
54711: PUSH
54712: LD_EXP 48
54716: AND
54717: IFFALSE 54928
54719: GO 54721
54721: DISABLE
54722: LD_INT 0
54724: PPUSH
54725: PPUSH
54726: PPUSH
54727: PPUSH
54728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54729: LD_ADDR_VAR 0 5
54733: PUSH
54734: LD_INT 22
54736: PUSH
54737: LD_OWVAR 2
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 21
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PPUSH
54760: CALL_OW 69
54764: ST_TO_ADDR
// if not tmp then
54765: LD_VAR 0 5
54769: NOT
54770: IFFALSE 54774
// exit ;
54772: GO 54928
// for i in tmp do
54774: LD_ADDR_VAR 0 1
54778: PUSH
54779: LD_VAR 0 5
54783: PUSH
54784: FOR_IN
54785: IFFALSE 54926
// begin d := rand ( 0 , 5 ) ;
54787: LD_ADDR_VAR 0 4
54791: PUSH
54792: LD_INT 0
54794: PPUSH
54795: LD_INT 5
54797: PPUSH
54798: CALL_OW 12
54802: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
54803: LD_ADDR_VAR 0 2
54807: PUSH
54808: LD_VAR 0 1
54812: PPUSH
54813: CALL_OW 250
54817: PPUSH
54818: LD_VAR 0 4
54822: PPUSH
54823: LD_INT 3
54825: PPUSH
54826: LD_INT 12
54828: PPUSH
54829: CALL_OW 12
54833: PPUSH
54834: CALL_OW 272
54838: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
54839: LD_ADDR_VAR 0 3
54843: PUSH
54844: LD_VAR 0 1
54848: PPUSH
54849: CALL_OW 251
54853: PPUSH
54854: LD_VAR 0 4
54858: PPUSH
54859: LD_INT 3
54861: PPUSH
54862: LD_INT 12
54864: PPUSH
54865: CALL_OW 12
54869: PPUSH
54870: CALL_OW 273
54874: ST_TO_ADDR
// if ValidHex ( x , y ) then
54875: LD_VAR 0 2
54879: PPUSH
54880: LD_VAR 0 3
54884: PPUSH
54885: CALL_OW 488
54889: IFFALSE 54924
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
54891: LD_VAR 0 1
54895: PPUSH
54896: LD_VAR 0 2
54900: PPUSH
54901: LD_VAR 0 3
54905: PPUSH
54906: LD_INT 3
54908: PPUSH
54909: LD_INT 6
54911: PPUSH
54912: CALL_OW 12
54916: PPUSH
54917: LD_INT 1
54919: PPUSH
54920: CALL_OW 483
// end ;
54924: GO 54784
54926: POP
54927: POP
// end ;
54928: PPOPN 5
54930: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
54931: LD_EXP 14
54935: PUSH
54936: LD_EXP 49
54940: AND
54941: IFFALSE 55035
54943: GO 54945
54945: DISABLE
54946: LD_INT 0
54948: PPUSH
54949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
54950: LD_ADDR_VAR 0 2
54954: PUSH
54955: LD_INT 22
54957: PUSH
54958: LD_OWVAR 2
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 32
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 21
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: LIST
54991: PPUSH
54992: CALL_OW 69
54996: ST_TO_ADDR
// if not tmp then
54997: LD_VAR 0 2
55001: NOT
55002: IFFALSE 55006
// exit ;
55004: GO 55035
// for i in tmp do
55006: LD_ADDR_VAR 0 1
55010: PUSH
55011: LD_VAR 0 2
55015: PUSH
55016: FOR_IN
55017: IFFALSE 55033
// SetFuel ( i , 0 ) ;
55019: LD_VAR 0 1
55023: PPUSH
55024: LD_INT 0
55026: PPUSH
55027: CALL_OW 240
55031: GO 55016
55033: POP
55034: POP
// end ;
55035: PPOPN 2
55037: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
55038: LD_EXP 14
55042: PUSH
55043: LD_EXP 50
55047: AND
55048: IFFALSE 55114
55050: GO 55052
55052: DISABLE
55053: LD_INT 0
55055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
55056: LD_ADDR_VAR 0 1
55060: PUSH
55061: LD_INT 22
55063: PUSH
55064: LD_OWVAR 2
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 30
55075: PUSH
55076: LD_INT 29
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PPUSH
55087: CALL_OW 69
55091: ST_TO_ADDR
// if not tmp then
55092: LD_VAR 0 1
55096: NOT
55097: IFFALSE 55101
// exit ;
55099: GO 55114
// DestroyUnit ( tmp [ 1 ] ) ;
55101: LD_VAR 0 1
55105: PUSH
55106: LD_INT 1
55108: ARRAY
55109: PPUSH
55110: CALL_OW 65
// end ;
55114: PPOPN 1
55116: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
55117: LD_EXP 14
55121: PUSH
55122: LD_EXP 52
55126: AND
55127: IFFALSE 55256
55129: GO 55131
55131: DISABLE
55132: LD_INT 0
55134: PPUSH
// begin uc_side := 0 ;
55135: LD_ADDR_OWVAR 20
55139: PUSH
55140: LD_INT 0
55142: ST_TO_ADDR
// uc_nation := nation_arabian ;
55143: LD_ADDR_OWVAR 21
55147: PUSH
55148: LD_INT 2
55150: ST_TO_ADDR
// hc_gallery :=  ;
55151: LD_ADDR_OWVAR 33
55155: PUSH
55156: LD_STRING 
55158: ST_TO_ADDR
// hc_name :=  ;
55159: LD_ADDR_OWVAR 26
55163: PUSH
55164: LD_STRING 
55166: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
55167: LD_INT 1
55169: PPUSH
55170: LD_INT 11
55172: PPUSH
55173: LD_INT 10
55175: PPUSH
55176: CALL_OW 380
// un := CreateHuman ;
55180: LD_ADDR_VAR 0 1
55184: PUSH
55185: CALL_OW 44
55189: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55190: LD_VAR 0 1
55194: PPUSH
55195: LD_INT 1
55197: PPUSH
55198: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55202: LD_INT 35
55204: PPUSH
55205: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55209: LD_VAR 0 1
55213: PPUSH
55214: LD_INT 22
55216: PUSH
55217: LD_OWVAR 2
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PPUSH
55226: CALL_OW 69
55230: PPUSH
55231: LD_VAR 0 1
55235: PPUSH
55236: CALL_OW 74
55240: PPUSH
55241: CALL_OW 115
// until IsDead ( un ) ;
55245: LD_VAR 0 1
55249: PPUSH
55250: CALL_OW 301
55254: IFFALSE 55202
// end ;
55256: PPOPN 1
55258: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
55259: LD_EXP 14
55263: PUSH
55264: LD_EXP 54
55268: AND
55269: IFFALSE 55281
55271: GO 55273
55273: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
55274: LD_STRING earthquake(getX(game), 0, 32)
55276: PPUSH
55277: CALL_OW 559
55281: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
55282: LD_EXP 14
55286: PUSH
55287: LD_EXP 55
55291: AND
55292: IFFALSE 55383
55294: GO 55296
55296: DISABLE
55297: LD_INT 0
55299: PPUSH
// begin enable ;
55300: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
55301: LD_ADDR_VAR 0 1
55305: PUSH
55306: LD_INT 22
55308: PUSH
55309: LD_OWVAR 2
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 21
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 33
55330: PUSH
55331: LD_INT 3
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: LIST
55342: PPUSH
55343: CALL_OW 69
55347: ST_TO_ADDR
// if not tmp then
55348: LD_VAR 0 1
55352: NOT
55353: IFFALSE 55357
// exit ;
55355: GO 55383
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55357: LD_VAR 0 1
55361: PUSH
55362: LD_INT 1
55364: PPUSH
55365: LD_VAR 0 1
55369: PPUSH
55370: CALL_OW 12
55374: ARRAY
55375: PPUSH
55376: LD_INT 1
55378: PPUSH
55379: CALL_OW 234
// end ;
55383: PPOPN 1
55385: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
55386: LD_EXP 14
55390: PUSH
55391: LD_EXP 56
55395: AND
55396: IFFALSE 55537
55398: GO 55400
55400: DISABLE
55401: LD_INT 0
55403: PPUSH
55404: PPUSH
55405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55406: LD_ADDR_VAR 0 3
55410: PUSH
55411: LD_INT 22
55413: PUSH
55414: LD_OWVAR 2
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 25
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PPUSH
55437: CALL_OW 69
55441: ST_TO_ADDR
// if not tmp then
55442: LD_VAR 0 3
55446: NOT
55447: IFFALSE 55451
// exit ;
55449: GO 55537
// un := tmp [ rand ( 1 , tmp ) ] ;
55451: LD_ADDR_VAR 0 2
55455: PUSH
55456: LD_VAR 0 3
55460: PUSH
55461: LD_INT 1
55463: PPUSH
55464: LD_VAR 0 3
55468: PPUSH
55469: CALL_OW 12
55473: ARRAY
55474: ST_TO_ADDR
// if Crawls ( un ) then
55475: LD_VAR 0 2
55479: PPUSH
55480: CALL_OW 318
55484: IFFALSE 55495
// ComWalk ( un ) ;
55486: LD_VAR 0 2
55490: PPUSH
55491: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
55495: LD_VAR 0 2
55499: PPUSH
55500: LD_INT 9
55502: PPUSH
55503: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
55507: LD_INT 28
55509: PPUSH
55510: LD_OWVAR 2
55514: PPUSH
55515: LD_INT 2
55517: PPUSH
55518: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
55522: LD_INT 29
55524: PPUSH
55525: LD_OWVAR 2
55529: PPUSH
55530: LD_INT 2
55532: PPUSH
55533: CALL_OW 322
// end ;
55537: PPOPN 3
55539: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
55540: LD_EXP 14
55544: PUSH
55545: LD_EXP 57
55549: AND
55550: IFFALSE 55661
55552: GO 55554
55554: DISABLE
55555: LD_INT 0
55557: PPUSH
55558: PPUSH
55559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55560: LD_ADDR_VAR 0 3
55564: PUSH
55565: LD_INT 22
55567: PUSH
55568: LD_OWVAR 2
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 25
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PPUSH
55591: CALL_OW 69
55595: ST_TO_ADDR
// if not tmp then
55596: LD_VAR 0 3
55600: NOT
55601: IFFALSE 55605
// exit ;
55603: GO 55661
// un := tmp [ rand ( 1 , tmp ) ] ;
55605: LD_ADDR_VAR 0 2
55609: PUSH
55610: LD_VAR 0 3
55614: PUSH
55615: LD_INT 1
55617: PPUSH
55618: LD_VAR 0 3
55622: PPUSH
55623: CALL_OW 12
55627: ARRAY
55628: ST_TO_ADDR
// if Crawls ( un ) then
55629: LD_VAR 0 2
55633: PPUSH
55634: CALL_OW 318
55638: IFFALSE 55649
// ComWalk ( un ) ;
55640: LD_VAR 0 2
55644: PPUSH
55645: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55649: LD_VAR 0 2
55653: PPUSH
55654: LD_INT 8
55656: PPUSH
55657: CALL_OW 336
// end ;
55661: PPOPN 3
55663: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
55664: LD_EXP 14
55668: PUSH
55669: LD_EXP 58
55673: AND
55674: IFFALSE 55818
55676: GO 55678
55678: DISABLE
55679: LD_INT 0
55681: PPUSH
55682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
55683: LD_ADDR_VAR 0 2
55687: PUSH
55688: LD_INT 22
55690: PUSH
55691: LD_OWVAR 2
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 21
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 2
55712: PUSH
55713: LD_INT 34
55715: PUSH
55716: LD_INT 12
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 34
55725: PUSH
55726: LD_INT 51
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 34
55735: PUSH
55736: LD_INT 32
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: LIST
55753: PPUSH
55754: CALL_OW 69
55758: ST_TO_ADDR
// if not tmp then
55759: LD_VAR 0 2
55763: NOT
55764: IFFALSE 55768
// exit ;
55766: GO 55818
// for i in tmp do
55768: LD_ADDR_VAR 0 1
55772: PUSH
55773: LD_VAR 0 2
55777: PUSH
55778: FOR_IN
55779: IFFALSE 55816
// if GetCargo ( i , mat_artifact ) = 0 then
55781: LD_VAR 0 1
55785: PPUSH
55786: LD_INT 4
55788: PPUSH
55789: CALL_OW 289
55793: PUSH
55794: LD_INT 0
55796: EQUAL
55797: IFFALSE 55814
// SetCargo ( i , mat_siberit , 100 ) ;
55799: LD_VAR 0 1
55803: PPUSH
55804: LD_INT 3
55806: PPUSH
55807: LD_INT 100
55809: PPUSH
55810: CALL_OW 290
55814: GO 55778
55816: POP
55817: POP
// end ;
55818: PPOPN 2
55820: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
55821: LD_EXP 14
55825: PUSH
55826: LD_EXP 59
55830: AND
55831: IFFALSE 56014
55833: GO 55835
55835: DISABLE
55836: LD_INT 0
55838: PPUSH
55839: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
55840: LD_ADDR_VAR 0 2
55844: PUSH
55845: LD_INT 22
55847: PUSH
55848: LD_OWVAR 2
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PPUSH
55857: CALL_OW 69
55861: ST_TO_ADDR
// if not tmp then
55862: LD_VAR 0 2
55866: NOT
55867: IFFALSE 55871
// exit ;
55869: GO 56014
// for i := 1 to 2 do
55871: LD_ADDR_VAR 0 1
55875: PUSH
55876: DOUBLE
55877: LD_INT 1
55879: DEC
55880: ST_TO_ADDR
55881: LD_INT 2
55883: PUSH
55884: FOR_TO
55885: IFFALSE 56012
// begin uc_side := your_side ;
55887: LD_ADDR_OWVAR 20
55891: PUSH
55892: LD_OWVAR 2
55896: ST_TO_ADDR
// uc_nation := nation_american ;
55897: LD_ADDR_OWVAR 21
55901: PUSH
55902: LD_INT 1
55904: ST_TO_ADDR
// vc_chassis := us_morphling ;
55905: LD_ADDR_OWVAR 37
55909: PUSH
55910: LD_INT 5
55912: ST_TO_ADDR
// vc_engine := engine_siberite ;
55913: LD_ADDR_OWVAR 39
55917: PUSH
55918: LD_INT 3
55920: ST_TO_ADDR
// vc_control := control_computer ;
55921: LD_ADDR_OWVAR 38
55925: PUSH
55926: LD_INT 3
55928: ST_TO_ADDR
// vc_weapon := us_double_laser ;
55929: LD_ADDR_OWVAR 40
55933: PUSH
55934: LD_INT 10
55936: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
55937: LD_VAR 0 2
55941: PUSH
55942: LD_INT 1
55944: ARRAY
55945: PPUSH
55946: CALL_OW 310
55950: NOT
55951: IFFALSE 55998
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
55953: CALL_OW 45
55957: PPUSH
55958: LD_VAR 0 2
55962: PUSH
55963: LD_INT 1
55965: ARRAY
55966: PPUSH
55967: CALL_OW 250
55971: PPUSH
55972: LD_VAR 0 2
55976: PUSH
55977: LD_INT 1
55979: ARRAY
55980: PPUSH
55981: CALL_OW 251
55985: PPUSH
55986: LD_INT 12
55988: PPUSH
55989: LD_INT 1
55991: PPUSH
55992: CALL_OW 50
55996: GO 56010
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
55998: CALL_OW 45
56002: PPUSH
56003: LD_INT 1
56005: PPUSH
56006: CALL_OW 51
// end ;
56010: GO 55884
56012: POP
56013: POP
// end ;
56014: PPOPN 2
56016: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
56017: LD_EXP 14
56021: PUSH
56022: LD_EXP 60
56026: AND
56027: IFFALSE 56249
56029: GO 56031
56031: DISABLE
56032: LD_INT 0
56034: PPUSH
56035: PPUSH
56036: PPUSH
56037: PPUSH
56038: PPUSH
56039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56040: LD_ADDR_VAR 0 6
56044: PUSH
56045: LD_INT 22
56047: PUSH
56048: LD_OWVAR 2
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 21
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 3
56069: PUSH
56070: LD_INT 23
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: LIST
56088: PPUSH
56089: CALL_OW 69
56093: ST_TO_ADDR
// if not tmp then
56094: LD_VAR 0 6
56098: NOT
56099: IFFALSE 56103
// exit ;
56101: GO 56249
// s1 := rand ( 1 , 4 ) ;
56103: LD_ADDR_VAR 0 2
56107: PUSH
56108: LD_INT 1
56110: PPUSH
56111: LD_INT 4
56113: PPUSH
56114: CALL_OW 12
56118: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
56119: LD_ADDR_VAR 0 4
56123: PUSH
56124: LD_VAR 0 6
56128: PUSH
56129: LD_INT 1
56131: ARRAY
56132: PPUSH
56133: LD_VAR 0 2
56137: PPUSH
56138: CALL_OW 259
56142: ST_TO_ADDR
// if s1 = 1 then
56143: LD_VAR 0 2
56147: PUSH
56148: LD_INT 1
56150: EQUAL
56151: IFFALSE 56171
// s2 := rand ( 2 , 4 ) else
56153: LD_ADDR_VAR 0 3
56157: PUSH
56158: LD_INT 2
56160: PPUSH
56161: LD_INT 4
56163: PPUSH
56164: CALL_OW 12
56168: ST_TO_ADDR
56169: GO 56179
// s2 := 1 ;
56171: LD_ADDR_VAR 0 3
56175: PUSH
56176: LD_INT 1
56178: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
56179: LD_ADDR_VAR 0 5
56183: PUSH
56184: LD_VAR 0 6
56188: PUSH
56189: LD_INT 1
56191: ARRAY
56192: PPUSH
56193: LD_VAR 0 3
56197: PPUSH
56198: CALL_OW 259
56202: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
56203: LD_VAR 0 6
56207: PUSH
56208: LD_INT 1
56210: ARRAY
56211: PPUSH
56212: LD_VAR 0 2
56216: PPUSH
56217: LD_VAR 0 5
56221: PPUSH
56222: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
56226: LD_VAR 0 6
56230: PUSH
56231: LD_INT 1
56233: ARRAY
56234: PPUSH
56235: LD_VAR 0 3
56239: PPUSH
56240: LD_VAR 0 4
56244: PPUSH
56245: CALL_OW 237
// end ;
56249: PPOPN 6
56251: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
56252: LD_EXP 14
56256: PUSH
56257: LD_EXP 61
56261: AND
56262: IFFALSE 56341
56264: GO 56266
56266: DISABLE
56267: LD_INT 0
56269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
56270: LD_ADDR_VAR 0 1
56274: PUSH
56275: LD_INT 22
56277: PUSH
56278: LD_OWVAR 2
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 30
56289: PUSH
56290: LD_INT 3
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PPUSH
56301: CALL_OW 69
56305: ST_TO_ADDR
// if not tmp then
56306: LD_VAR 0 1
56310: NOT
56311: IFFALSE 56315
// exit ;
56313: GO 56341
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56315: LD_VAR 0 1
56319: PUSH
56320: LD_INT 1
56322: PPUSH
56323: LD_VAR 0 1
56327: PPUSH
56328: CALL_OW 12
56332: ARRAY
56333: PPUSH
56334: LD_INT 1
56336: PPUSH
56337: CALL_OW 234
// end ;
56341: PPOPN 1
56343: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
56344: LD_EXP 14
56348: PUSH
56349: LD_EXP 62
56353: AND
56354: IFFALSE 56466
56356: GO 56358
56358: DISABLE
56359: LD_INT 0
56361: PPUSH
56362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
56363: LD_ADDR_VAR 0 2
56367: PUSH
56368: LD_INT 22
56370: PUSH
56371: LD_OWVAR 2
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: LD_INT 30
56385: PUSH
56386: LD_INT 27
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 30
56395: PUSH
56396: LD_INT 26
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 30
56405: PUSH
56406: LD_INT 28
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PPUSH
56423: CALL_OW 69
56427: ST_TO_ADDR
// if not tmp then
56428: LD_VAR 0 2
56432: NOT
56433: IFFALSE 56437
// exit ;
56435: GO 56466
// for i in tmp do
56437: LD_ADDR_VAR 0 1
56441: PUSH
56442: LD_VAR 0 2
56446: PUSH
56447: FOR_IN
56448: IFFALSE 56464
// SetLives ( i , 1 ) ;
56450: LD_VAR 0 1
56454: PPUSH
56455: LD_INT 1
56457: PPUSH
56458: CALL_OW 234
56462: GO 56447
56464: POP
56465: POP
// end ;
56466: PPOPN 2
56468: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
56469: LD_EXP 14
56473: PUSH
56474: LD_EXP 63
56478: AND
56479: IFFALSE 56766
56481: GO 56483
56483: DISABLE
56484: LD_INT 0
56486: PPUSH
56487: PPUSH
56488: PPUSH
// begin i := rand ( 1 , 7 ) ;
56489: LD_ADDR_VAR 0 1
56493: PUSH
56494: LD_INT 1
56496: PPUSH
56497: LD_INT 7
56499: PPUSH
56500: CALL_OW 12
56504: ST_TO_ADDR
// case i of 1 :
56505: LD_VAR 0 1
56509: PUSH
56510: LD_INT 1
56512: DOUBLE
56513: EQUAL
56514: IFTRUE 56518
56516: GO 56528
56518: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
56519: LD_STRING earthquake(getX(game), 0, 32)
56521: PPUSH
56522: CALL_OW 559
56526: GO 56766
56528: LD_INT 2
56530: DOUBLE
56531: EQUAL
56532: IFTRUE 56536
56534: GO 56550
56536: POP
// begin ToLua ( displayStucuk(); ) ;
56537: LD_STRING displayStucuk();
56539: PPUSH
56540: CALL_OW 559
// ResetFog ;
56544: CALL_OW 335
// end ; 3 :
56548: GO 56766
56550: LD_INT 3
56552: DOUBLE
56553: EQUAL
56554: IFTRUE 56558
56556: GO 56662
56558: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56559: LD_ADDR_VAR 0 2
56563: PUSH
56564: LD_INT 22
56566: PUSH
56567: LD_OWVAR 2
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 25
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PPUSH
56590: CALL_OW 69
56594: ST_TO_ADDR
// if not tmp then
56595: LD_VAR 0 2
56599: NOT
56600: IFFALSE 56604
// exit ;
56602: GO 56766
// un := tmp [ rand ( 1 , tmp ) ] ;
56604: LD_ADDR_VAR 0 3
56608: PUSH
56609: LD_VAR 0 2
56613: PUSH
56614: LD_INT 1
56616: PPUSH
56617: LD_VAR 0 2
56621: PPUSH
56622: CALL_OW 12
56626: ARRAY
56627: ST_TO_ADDR
// if Crawls ( un ) then
56628: LD_VAR 0 3
56632: PPUSH
56633: CALL_OW 318
56637: IFFALSE 56648
// ComWalk ( un ) ;
56639: LD_VAR 0 3
56643: PPUSH
56644: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56648: LD_VAR 0 3
56652: PPUSH
56653: LD_INT 8
56655: PPUSH
56656: CALL_OW 336
// end ; 4 :
56660: GO 56766
56662: LD_INT 4
56664: DOUBLE
56665: EQUAL
56666: IFTRUE 56670
56668: GO 56744
56670: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56671: LD_ADDR_VAR 0 2
56675: PUSH
56676: LD_INT 22
56678: PUSH
56679: LD_OWVAR 2
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 30
56690: PUSH
56691: LD_INT 29
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PPUSH
56702: CALL_OW 69
56706: ST_TO_ADDR
// if not tmp then
56707: LD_VAR 0 2
56711: NOT
56712: IFFALSE 56716
// exit ;
56714: GO 56766
// CenterNowOnUnits ( tmp [ 1 ] ) ;
56716: LD_VAR 0 2
56720: PUSH
56721: LD_INT 1
56723: ARRAY
56724: PPUSH
56725: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
56729: LD_VAR 0 2
56733: PUSH
56734: LD_INT 1
56736: ARRAY
56737: PPUSH
56738: CALL_OW 65
// end ; 5 .. 7 :
56742: GO 56766
56744: LD_INT 5
56746: DOUBLE
56747: GREATEREQUAL
56748: IFFALSE 56756
56750: LD_INT 7
56752: DOUBLE
56753: LESSEQUAL
56754: IFTRUE 56758
56756: GO 56765
56758: POP
// StreamSibBomb ; end ;
56759: CALL 53003 0 0
56763: GO 56766
56765: POP
// end ;
56766: PPOPN 3
56768: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
56769: LD_EXP 14
56773: PUSH
56774: LD_EXP 64
56778: AND
56779: IFFALSE 56935
56781: GO 56783
56783: DISABLE
56784: LD_INT 0
56786: PPUSH
56787: PPUSH
56788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
56789: LD_ADDR_VAR 0 2
56793: PUSH
56794: LD_INT 81
56796: PUSH
56797: LD_OWVAR 2
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 2
56808: PUSH
56809: LD_INT 21
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 21
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: LIST
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PPUSH
56838: CALL_OW 69
56842: ST_TO_ADDR
// if not tmp then
56843: LD_VAR 0 2
56847: NOT
56848: IFFALSE 56852
// exit ;
56850: GO 56935
// p := 0 ;
56852: LD_ADDR_VAR 0 3
56856: PUSH
56857: LD_INT 0
56859: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56860: LD_INT 35
56862: PPUSH
56863: CALL_OW 67
// p := p + 1 ;
56867: LD_ADDR_VAR 0 3
56871: PUSH
56872: LD_VAR 0 3
56876: PUSH
56877: LD_INT 1
56879: PLUS
56880: ST_TO_ADDR
// for i in tmp do
56881: LD_ADDR_VAR 0 1
56885: PUSH
56886: LD_VAR 0 2
56890: PUSH
56891: FOR_IN
56892: IFFALSE 56923
// if GetLives ( i ) < 1000 then
56894: LD_VAR 0 1
56898: PPUSH
56899: CALL_OW 256
56903: PUSH
56904: LD_INT 1000
56906: LESS
56907: IFFALSE 56921
// SetLives ( i , 1000 ) ;
56909: LD_VAR 0 1
56913: PPUSH
56914: LD_INT 1000
56916: PPUSH
56917: CALL_OW 234
56921: GO 56891
56923: POP
56924: POP
// until p > 20 ;
56925: LD_VAR 0 3
56929: PUSH
56930: LD_INT 20
56932: GREATER
56933: IFFALSE 56860
// end ;
56935: PPOPN 3
56937: END
// every 0 0$1 trigger StreamModeActive and sTime do
56938: LD_EXP 14
56942: PUSH
56943: LD_EXP 65
56947: AND
56948: IFFALSE 56983
56950: GO 56952
56952: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
56953: LD_INT 28
56955: PPUSH
56956: LD_OWVAR 2
56960: PPUSH
56961: LD_INT 2
56963: PPUSH
56964: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
56968: LD_INT 30
56970: PPUSH
56971: LD_OWVAR 2
56975: PPUSH
56976: LD_INT 2
56978: PPUSH
56979: CALL_OW 322
// end ;
56983: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
56984: LD_EXP 14
56988: PUSH
56989: LD_EXP 66
56993: AND
56994: IFFALSE 57115
56996: GO 56998
56998: DISABLE
56999: LD_INT 0
57001: PPUSH
57002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57003: LD_ADDR_VAR 0 2
57007: PUSH
57008: LD_INT 22
57010: PUSH
57011: LD_OWVAR 2
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 21
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 3
57032: PUSH
57033: LD_INT 23
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: LIST
57051: PPUSH
57052: CALL_OW 69
57056: ST_TO_ADDR
// if not tmp then
57057: LD_VAR 0 2
57061: NOT
57062: IFFALSE 57066
// exit ;
57064: GO 57115
// for i in tmp do
57066: LD_ADDR_VAR 0 1
57070: PUSH
57071: LD_VAR 0 2
57075: PUSH
57076: FOR_IN
57077: IFFALSE 57113
// begin if Crawls ( i ) then
57079: LD_VAR 0 1
57083: PPUSH
57084: CALL_OW 318
57088: IFFALSE 57099
// ComWalk ( i ) ;
57090: LD_VAR 0 1
57094: PPUSH
57095: CALL_OW 138
// SetClass ( i , 2 ) ;
57099: LD_VAR 0 1
57103: PPUSH
57104: LD_INT 2
57106: PPUSH
57107: CALL_OW 336
// end ;
57111: GO 57076
57113: POP
57114: POP
// end ;
57115: PPOPN 2
57117: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
57118: LD_EXP 14
57122: PUSH
57123: LD_EXP 67
57127: AND
57128: IFFALSE 57416
57130: GO 57132
57132: DISABLE
57133: LD_INT 0
57135: PPUSH
57136: PPUSH
57137: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
57138: LD_OWVAR 2
57142: PPUSH
57143: LD_INT 9
57145: PPUSH
57146: LD_INT 1
57148: PPUSH
57149: LD_INT 1
57151: PPUSH
57152: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
57156: LD_INT 9
57158: PPUSH
57159: LD_OWVAR 2
57163: PPUSH
57164: CALL_OW 343
// uc_side := 9 ;
57168: LD_ADDR_OWVAR 20
57172: PUSH
57173: LD_INT 9
57175: ST_TO_ADDR
// uc_nation := 2 ;
57176: LD_ADDR_OWVAR 21
57180: PUSH
57181: LD_INT 2
57183: ST_TO_ADDR
// hc_name := Dark Warrior ;
57184: LD_ADDR_OWVAR 26
57188: PUSH
57189: LD_STRING Dark Warrior
57191: ST_TO_ADDR
// hc_gallery :=  ;
57192: LD_ADDR_OWVAR 33
57196: PUSH
57197: LD_STRING 
57199: ST_TO_ADDR
// hc_noskilllimit := true ;
57200: LD_ADDR_OWVAR 76
57204: PUSH
57205: LD_INT 1
57207: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
57208: LD_ADDR_OWVAR 31
57212: PUSH
57213: LD_INT 30
57215: PUSH
57216: LD_INT 30
57218: PUSH
57219: LD_INT 30
57221: PUSH
57222: LD_INT 30
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: ST_TO_ADDR
// un := CreateHuman ;
57231: LD_ADDR_VAR 0 3
57235: PUSH
57236: CALL_OW 44
57240: ST_TO_ADDR
// hc_noskilllimit := false ;
57241: LD_ADDR_OWVAR 76
57245: PUSH
57246: LD_INT 0
57248: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57249: LD_VAR 0 3
57253: PPUSH
57254: LD_INT 1
57256: PPUSH
57257: CALL_OW 51
// ToLua ( playRanger() ) ;
57261: LD_STRING playRanger()
57263: PPUSH
57264: CALL_OW 559
// p := 0 ;
57268: LD_ADDR_VAR 0 2
57272: PUSH
57273: LD_INT 0
57275: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57276: LD_INT 35
57278: PPUSH
57279: CALL_OW 67
// p := p + 1 ;
57283: LD_ADDR_VAR 0 2
57287: PUSH
57288: LD_VAR 0 2
57292: PUSH
57293: LD_INT 1
57295: PLUS
57296: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
57297: LD_VAR 0 3
57301: PPUSH
57302: CALL_OW 256
57306: PUSH
57307: LD_INT 1000
57309: LESS
57310: IFFALSE 57324
// SetLives ( un , 1000 ) ;
57312: LD_VAR 0 3
57316: PPUSH
57317: LD_INT 1000
57319: PPUSH
57320: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
57324: LD_VAR 0 3
57328: PPUSH
57329: LD_INT 81
57331: PUSH
57332: LD_OWVAR 2
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 91
57343: PUSH
57344: LD_VAR 0 3
57348: PUSH
57349: LD_INT 30
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: LIST
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PPUSH
57361: CALL_OW 69
57365: PPUSH
57366: LD_VAR 0 3
57370: PPUSH
57371: CALL_OW 74
57375: PPUSH
57376: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
57380: LD_VAR 0 2
57384: PUSH
57385: LD_INT 80
57387: GREATER
57388: PUSH
57389: LD_VAR 0 3
57393: PPUSH
57394: CALL_OW 301
57398: OR
57399: IFFALSE 57276
// if un then
57401: LD_VAR 0 3
57405: IFFALSE 57416
// RemoveUnit ( un ) ;
57407: LD_VAR 0 3
57411: PPUSH
57412: CALL_OW 64
// end ;
57416: PPOPN 3
57418: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
57419: LD_EXP 68
57423: IFFALSE 57539
57425: GO 57427
57427: DISABLE
57428: LD_INT 0
57430: PPUSH
57431: PPUSH
57432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57433: LD_ADDR_VAR 0 2
57437: PUSH
57438: LD_INT 81
57440: PUSH
57441: LD_OWVAR 2
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 21
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PPUSH
57464: CALL_OW 69
57468: ST_TO_ADDR
// ToLua ( playComputer() ) ;
57469: LD_STRING playComputer()
57471: PPUSH
57472: CALL_OW 559
// if not tmp then
57476: LD_VAR 0 2
57480: NOT
57481: IFFALSE 57485
// exit ;
57483: GO 57539
// for i in tmp do
57485: LD_ADDR_VAR 0 1
57489: PUSH
57490: LD_VAR 0 2
57494: PUSH
57495: FOR_IN
57496: IFFALSE 57537
// for j := 1 to 4 do
57498: LD_ADDR_VAR 0 3
57502: PUSH
57503: DOUBLE
57504: LD_INT 1
57506: DEC
57507: ST_TO_ADDR
57508: LD_INT 4
57510: PUSH
57511: FOR_TO
57512: IFFALSE 57533
// SetSkill ( i , j , 10 ) ;
57514: LD_VAR 0 1
57518: PPUSH
57519: LD_VAR 0 3
57523: PPUSH
57524: LD_INT 10
57526: PPUSH
57527: CALL_OW 237
57531: GO 57511
57533: POP
57534: POP
57535: GO 57495
57537: POP
57538: POP
// end ;
57539: PPOPN 3
57541: END
// every 0 0$1 trigger s30 do var i , tmp ;
57542: LD_EXP 69
57546: IFFALSE 57615
57548: GO 57550
57550: DISABLE
57551: LD_INT 0
57553: PPUSH
57554: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57555: LD_ADDR_VAR 0 2
57559: PUSH
57560: LD_INT 22
57562: PUSH
57563: LD_OWVAR 2
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PPUSH
57572: CALL_OW 69
57576: ST_TO_ADDR
// if not tmp then
57577: LD_VAR 0 2
57581: NOT
57582: IFFALSE 57586
// exit ;
57584: GO 57615
// for i in tmp do
57586: LD_ADDR_VAR 0 1
57590: PUSH
57591: LD_VAR 0 2
57595: PUSH
57596: FOR_IN
57597: IFFALSE 57613
// SetLives ( i , 300 ) ;
57599: LD_VAR 0 1
57603: PPUSH
57604: LD_INT 300
57606: PPUSH
57607: CALL_OW 234
57611: GO 57596
57613: POP
57614: POP
// end ;
57615: PPOPN 2
57617: END
// every 0 0$1 trigger s60 do var i , tmp ;
57618: LD_EXP 70
57622: IFFALSE 57691
57624: GO 57626
57626: DISABLE
57627: LD_INT 0
57629: PPUSH
57630: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57631: LD_ADDR_VAR 0 2
57635: PUSH
57636: LD_INT 22
57638: PUSH
57639: LD_OWVAR 2
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PPUSH
57648: CALL_OW 69
57652: ST_TO_ADDR
// if not tmp then
57653: LD_VAR 0 2
57657: NOT
57658: IFFALSE 57662
// exit ;
57660: GO 57691
// for i in tmp do
57662: LD_ADDR_VAR 0 1
57666: PUSH
57667: LD_VAR 0 2
57671: PUSH
57672: FOR_IN
57673: IFFALSE 57689
// SetLives ( i , 600 ) ;
57675: LD_VAR 0 1
57679: PPUSH
57680: LD_INT 600
57682: PPUSH
57683: CALL_OW 234
57687: GO 57672
57689: POP
57690: POP
// end ;
57691: PPOPN 2
57693: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57694: LD_INT 0
57696: PPUSH
// case cmd of 301 :
57697: LD_VAR 0 1
57701: PUSH
57702: LD_INT 301
57704: DOUBLE
57705: EQUAL
57706: IFTRUE 57710
57708: GO 57742
57710: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
57711: LD_VAR 0 6
57715: PPUSH
57716: LD_VAR 0 7
57720: PPUSH
57721: LD_VAR 0 8
57725: PPUSH
57726: LD_VAR 0 4
57730: PPUSH
57731: LD_VAR 0 5
57735: PPUSH
57736: CALL 58943 0 5
57740: GO 57863
57742: LD_INT 302
57744: DOUBLE
57745: EQUAL
57746: IFTRUE 57750
57748: GO 57787
57750: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
57751: LD_VAR 0 6
57755: PPUSH
57756: LD_VAR 0 7
57760: PPUSH
57761: LD_VAR 0 8
57765: PPUSH
57766: LD_VAR 0 9
57770: PPUSH
57771: LD_VAR 0 4
57775: PPUSH
57776: LD_VAR 0 5
57780: PPUSH
57781: CALL 59034 0 6
57785: GO 57863
57787: LD_INT 303
57789: DOUBLE
57790: EQUAL
57791: IFTRUE 57795
57793: GO 57832
57795: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
57796: LD_VAR 0 6
57800: PPUSH
57801: LD_VAR 0 7
57805: PPUSH
57806: LD_VAR 0 8
57810: PPUSH
57811: LD_VAR 0 9
57815: PPUSH
57816: LD_VAR 0 4
57820: PPUSH
57821: LD_VAR 0 5
57825: PPUSH
57826: CALL 57868 0 6
57830: GO 57863
57832: LD_INT 304
57834: DOUBLE
57835: EQUAL
57836: IFTRUE 57840
57838: GO 57862
57840: POP
// hHackTeleport ( unit , x , y ) ; end ;
57841: LD_VAR 0 2
57845: PPUSH
57846: LD_VAR 0 4
57850: PPUSH
57851: LD_VAR 0 5
57855: PPUSH
57856: CALL 59627 0 3
57860: GO 57863
57862: POP
// end ;
57863: LD_VAR 0 12
57867: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
57868: LD_INT 0
57870: PPUSH
57871: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
57872: LD_VAR 0 1
57876: PUSH
57877: LD_INT 1
57879: LESS
57880: PUSH
57881: LD_VAR 0 1
57885: PUSH
57886: LD_INT 3
57888: GREATER
57889: OR
57890: PUSH
57891: LD_VAR 0 5
57895: PPUSH
57896: LD_VAR 0 6
57900: PPUSH
57901: CALL_OW 428
57905: OR
57906: IFFALSE 57910
// exit ;
57908: GO 58630
// uc_side := your_side ;
57910: LD_ADDR_OWVAR 20
57914: PUSH
57915: LD_OWVAR 2
57919: ST_TO_ADDR
// uc_nation := nation ;
57920: LD_ADDR_OWVAR 21
57924: PUSH
57925: LD_VAR 0 1
57929: ST_TO_ADDR
// bc_level = 1 ;
57930: LD_ADDR_OWVAR 43
57934: PUSH
57935: LD_INT 1
57937: ST_TO_ADDR
// case btype of 1 :
57938: LD_VAR 0 2
57942: PUSH
57943: LD_INT 1
57945: DOUBLE
57946: EQUAL
57947: IFTRUE 57951
57949: GO 57962
57951: POP
// bc_type := b_depot ; 2 :
57952: LD_ADDR_OWVAR 42
57956: PUSH
57957: LD_INT 0
57959: ST_TO_ADDR
57960: GO 58574
57962: LD_INT 2
57964: DOUBLE
57965: EQUAL
57966: IFTRUE 57970
57968: GO 57981
57970: POP
// bc_type := b_warehouse ; 3 :
57971: LD_ADDR_OWVAR 42
57975: PUSH
57976: LD_INT 1
57978: ST_TO_ADDR
57979: GO 58574
57981: LD_INT 3
57983: DOUBLE
57984: EQUAL
57985: IFTRUE 57989
57987: GO 58000
57989: POP
// bc_type := b_lab ; 4 .. 9 :
57990: LD_ADDR_OWVAR 42
57994: PUSH
57995: LD_INT 6
57997: ST_TO_ADDR
57998: GO 58574
58000: LD_INT 4
58002: DOUBLE
58003: GREATEREQUAL
58004: IFFALSE 58012
58006: LD_INT 9
58008: DOUBLE
58009: LESSEQUAL
58010: IFTRUE 58014
58012: GO 58066
58014: POP
// begin bc_type := b_lab_half ;
58015: LD_ADDR_OWVAR 42
58019: PUSH
58020: LD_INT 7
58022: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
58023: LD_ADDR_OWVAR 44
58027: PUSH
58028: LD_INT 10
58030: PUSH
58031: LD_INT 11
58033: PUSH
58034: LD_INT 12
58036: PUSH
58037: LD_INT 15
58039: PUSH
58040: LD_INT 14
58042: PUSH
58043: LD_INT 13
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: PUSH
58054: LD_VAR 0 2
58058: PUSH
58059: LD_INT 3
58061: MINUS
58062: ARRAY
58063: ST_TO_ADDR
// end ; 10 .. 13 :
58064: GO 58574
58066: LD_INT 10
58068: DOUBLE
58069: GREATEREQUAL
58070: IFFALSE 58078
58072: LD_INT 13
58074: DOUBLE
58075: LESSEQUAL
58076: IFTRUE 58080
58078: GO 58157
58080: POP
// begin bc_type := b_lab_full ;
58081: LD_ADDR_OWVAR 42
58085: PUSH
58086: LD_INT 8
58088: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
58089: LD_ADDR_OWVAR 44
58093: PUSH
58094: LD_INT 10
58096: PUSH
58097: LD_INT 12
58099: PUSH
58100: LD_INT 14
58102: PUSH
58103: LD_INT 13
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: PUSH
58112: LD_VAR 0 2
58116: PUSH
58117: LD_INT 9
58119: MINUS
58120: ARRAY
58121: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
58122: LD_ADDR_OWVAR 45
58126: PUSH
58127: LD_INT 11
58129: PUSH
58130: LD_INT 15
58132: PUSH
58133: LD_INT 12
58135: PUSH
58136: LD_INT 15
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: PUSH
58145: LD_VAR 0 2
58149: PUSH
58150: LD_INT 9
58152: MINUS
58153: ARRAY
58154: ST_TO_ADDR
// end ; 14 :
58155: GO 58574
58157: LD_INT 14
58159: DOUBLE
58160: EQUAL
58161: IFTRUE 58165
58163: GO 58176
58165: POP
// bc_type := b_workshop ; 15 :
58166: LD_ADDR_OWVAR 42
58170: PUSH
58171: LD_INT 2
58173: ST_TO_ADDR
58174: GO 58574
58176: LD_INT 15
58178: DOUBLE
58179: EQUAL
58180: IFTRUE 58184
58182: GO 58195
58184: POP
// bc_type := b_factory ; 16 :
58185: LD_ADDR_OWVAR 42
58189: PUSH
58190: LD_INT 3
58192: ST_TO_ADDR
58193: GO 58574
58195: LD_INT 16
58197: DOUBLE
58198: EQUAL
58199: IFTRUE 58203
58201: GO 58214
58203: POP
// bc_type := b_ext_gun ; 17 :
58204: LD_ADDR_OWVAR 42
58208: PUSH
58209: LD_INT 17
58211: ST_TO_ADDR
58212: GO 58574
58214: LD_INT 17
58216: DOUBLE
58217: EQUAL
58218: IFTRUE 58222
58220: GO 58250
58222: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
58223: LD_ADDR_OWVAR 42
58227: PUSH
58228: LD_INT 19
58230: PUSH
58231: LD_INT 23
58233: PUSH
58234: LD_INT 19
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: LIST
58241: PUSH
58242: LD_VAR 0 1
58246: ARRAY
58247: ST_TO_ADDR
58248: GO 58574
58250: LD_INT 18
58252: DOUBLE
58253: EQUAL
58254: IFTRUE 58258
58256: GO 58269
58258: POP
// bc_type := b_ext_radar ; 19 :
58259: LD_ADDR_OWVAR 42
58263: PUSH
58264: LD_INT 20
58266: ST_TO_ADDR
58267: GO 58574
58269: LD_INT 19
58271: DOUBLE
58272: EQUAL
58273: IFTRUE 58277
58275: GO 58288
58277: POP
// bc_type := b_ext_radio ; 20 :
58278: LD_ADDR_OWVAR 42
58282: PUSH
58283: LD_INT 22
58285: ST_TO_ADDR
58286: GO 58574
58288: LD_INT 20
58290: DOUBLE
58291: EQUAL
58292: IFTRUE 58296
58294: GO 58307
58296: POP
// bc_type := b_ext_siberium ; 21 :
58297: LD_ADDR_OWVAR 42
58301: PUSH
58302: LD_INT 21
58304: ST_TO_ADDR
58305: GO 58574
58307: LD_INT 21
58309: DOUBLE
58310: EQUAL
58311: IFTRUE 58315
58313: GO 58326
58315: POP
// bc_type := b_ext_computer ; 22 :
58316: LD_ADDR_OWVAR 42
58320: PUSH
58321: LD_INT 24
58323: ST_TO_ADDR
58324: GO 58574
58326: LD_INT 22
58328: DOUBLE
58329: EQUAL
58330: IFTRUE 58334
58332: GO 58345
58334: POP
// bc_type := b_ext_track ; 23 :
58335: LD_ADDR_OWVAR 42
58339: PUSH
58340: LD_INT 16
58342: ST_TO_ADDR
58343: GO 58574
58345: LD_INT 23
58347: DOUBLE
58348: EQUAL
58349: IFTRUE 58353
58351: GO 58364
58353: POP
// bc_type := b_ext_laser ; 24 :
58354: LD_ADDR_OWVAR 42
58358: PUSH
58359: LD_INT 25
58361: ST_TO_ADDR
58362: GO 58574
58364: LD_INT 24
58366: DOUBLE
58367: EQUAL
58368: IFTRUE 58372
58370: GO 58383
58372: POP
// bc_type := b_control_tower ; 25 :
58373: LD_ADDR_OWVAR 42
58377: PUSH
58378: LD_INT 36
58380: ST_TO_ADDR
58381: GO 58574
58383: LD_INT 25
58385: DOUBLE
58386: EQUAL
58387: IFTRUE 58391
58389: GO 58402
58391: POP
// bc_type := b_breastwork ; 26 :
58392: LD_ADDR_OWVAR 42
58396: PUSH
58397: LD_INT 31
58399: ST_TO_ADDR
58400: GO 58574
58402: LD_INT 26
58404: DOUBLE
58405: EQUAL
58406: IFTRUE 58410
58408: GO 58421
58410: POP
// bc_type := b_bunker ; 27 :
58411: LD_ADDR_OWVAR 42
58415: PUSH
58416: LD_INT 32
58418: ST_TO_ADDR
58419: GO 58574
58421: LD_INT 27
58423: DOUBLE
58424: EQUAL
58425: IFTRUE 58429
58427: GO 58440
58429: POP
// bc_type := b_turret ; 28 :
58430: LD_ADDR_OWVAR 42
58434: PUSH
58435: LD_INT 33
58437: ST_TO_ADDR
58438: GO 58574
58440: LD_INT 28
58442: DOUBLE
58443: EQUAL
58444: IFTRUE 58448
58446: GO 58459
58448: POP
// bc_type := b_armoury ; 29 :
58449: LD_ADDR_OWVAR 42
58453: PUSH
58454: LD_INT 4
58456: ST_TO_ADDR
58457: GO 58574
58459: LD_INT 29
58461: DOUBLE
58462: EQUAL
58463: IFTRUE 58467
58465: GO 58478
58467: POP
// bc_type := b_barracks ; 30 :
58468: LD_ADDR_OWVAR 42
58472: PUSH
58473: LD_INT 5
58475: ST_TO_ADDR
58476: GO 58574
58478: LD_INT 30
58480: DOUBLE
58481: EQUAL
58482: IFTRUE 58486
58484: GO 58497
58486: POP
// bc_type := b_solar_power ; 31 :
58487: LD_ADDR_OWVAR 42
58491: PUSH
58492: LD_INT 27
58494: ST_TO_ADDR
58495: GO 58574
58497: LD_INT 31
58499: DOUBLE
58500: EQUAL
58501: IFTRUE 58505
58503: GO 58516
58505: POP
// bc_type := b_oil_power ; 32 :
58506: LD_ADDR_OWVAR 42
58510: PUSH
58511: LD_INT 26
58513: ST_TO_ADDR
58514: GO 58574
58516: LD_INT 32
58518: DOUBLE
58519: EQUAL
58520: IFTRUE 58524
58522: GO 58535
58524: POP
// bc_type := b_siberite_power ; 33 :
58525: LD_ADDR_OWVAR 42
58529: PUSH
58530: LD_INT 28
58532: ST_TO_ADDR
58533: GO 58574
58535: LD_INT 33
58537: DOUBLE
58538: EQUAL
58539: IFTRUE 58543
58541: GO 58554
58543: POP
// bc_type := b_oil_mine ; 34 :
58544: LD_ADDR_OWVAR 42
58548: PUSH
58549: LD_INT 29
58551: ST_TO_ADDR
58552: GO 58574
58554: LD_INT 34
58556: DOUBLE
58557: EQUAL
58558: IFTRUE 58562
58560: GO 58573
58562: POP
// bc_type := b_siberite_mine ; end ;
58563: LD_ADDR_OWVAR 42
58567: PUSH
58568: LD_INT 30
58570: ST_TO_ADDR
58571: GO 58574
58573: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
58574: LD_ADDR_VAR 0 8
58578: PUSH
58579: LD_VAR 0 5
58583: PPUSH
58584: LD_VAR 0 6
58588: PPUSH
58589: LD_VAR 0 3
58593: PPUSH
58594: CALL_OW 47
58598: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
58599: LD_OWVAR 42
58603: PUSH
58604: LD_INT 32
58606: PUSH
58607: LD_INT 33
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: IN
58614: IFFALSE 58630
// PlaceWeaponTurret ( b , weapon ) ;
58616: LD_VAR 0 8
58620: PPUSH
58621: LD_VAR 0 4
58625: PPUSH
58626: CALL_OW 431
// end ;
58630: LD_VAR 0 7
58634: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
58635: LD_INT 0
58637: PPUSH
58638: PPUSH
58639: PPUSH
58640: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58641: LD_ADDR_VAR 0 4
58645: PUSH
58646: LD_INT 22
58648: PUSH
58649: LD_OWVAR 2
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: LD_INT 30
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 30
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: LIST
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PPUSH
58690: CALL_OW 69
58694: ST_TO_ADDR
// if not tmp then
58695: LD_VAR 0 4
58699: NOT
58700: IFFALSE 58704
// exit ;
58702: GO 58763
// for i in tmp do
58704: LD_ADDR_VAR 0 2
58708: PUSH
58709: LD_VAR 0 4
58713: PUSH
58714: FOR_IN
58715: IFFALSE 58761
// for j = 1 to 3 do
58717: LD_ADDR_VAR 0 3
58721: PUSH
58722: DOUBLE
58723: LD_INT 1
58725: DEC
58726: ST_TO_ADDR
58727: LD_INT 3
58729: PUSH
58730: FOR_TO
58731: IFFALSE 58757
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
58733: LD_VAR 0 2
58737: PPUSH
58738: CALL_OW 274
58742: PPUSH
58743: LD_VAR 0 3
58747: PPUSH
58748: LD_INT 99999
58750: PPUSH
58751: CALL_OW 277
58755: GO 58730
58757: POP
58758: POP
58759: GO 58714
58761: POP
58762: POP
// end ;
58763: LD_VAR 0 1
58767: RET
// export function hHackSetLevel10 ; var i , j ; begin
58768: LD_INT 0
58770: PPUSH
58771: PPUSH
58772: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58773: LD_ADDR_VAR 0 2
58777: PUSH
58778: LD_INT 21
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PPUSH
58788: CALL_OW 69
58792: PUSH
58793: FOR_IN
58794: IFFALSE 58846
// if IsSelected ( i ) then
58796: LD_VAR 0 2
58800: PPUSH
58801: CALL_OW 306
58805: IFFALSE 58844
// begin for j := 1 to 4 do
58807: LD_ADDR_VAR 0 3
58811: PUSH
58812: DOUBLE
58813: LD_INT 1
58815: DEC
58816: ST_TO_ADDR
58817: LD_INT 4
58819: PUSH
58820: FOR_TO
58821: IFFALSE 58842
// SetSkill ( i , j , 10 ) ;
58823: LD_VAR 0 2
58827: PPUSH
58828: LD_VAR 0 3
58832: PPUSH
58833: LD_INT 10
58835: PPUSH
58836: CALL_OW 237
58840: GO 58820
58842: POP
58843: POP
// end ;
58844: GO 58793
58846: POP
58847: POP
// end ;
58848: LD_VAR 0 1
58852: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
58853: LD_INT 0
58855: PPUSH
58856: PPUSH
58857: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
58858: LD_ADDR_VAR 0 2
58862: PUSH
58863: LD_INT 22
58865: PUSH
58866: LD_OWVAR 2
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 21
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PPUSH
58889: CALL_OW 69
58893: PUSH
58894: FOR_IN
58895: IFFALSE 58936
// begin for j := 1 to 4 do
58897: LD_ADDR_VAR 0 3
58901: PUSH
58902: DOUBLE
58903: LD_INT 1
58905: DEC
58906: ST_TO_ADDR
58907: LD_INT 4
58909: PUSH
58910: FOR_TO
58911: IFFALSE 58932
// SetSkill ( i , j , 10 ) ;
58913: LD_VAR 0 2
58917: PPUSH
58918: LD_VAR 0 3
58922: PPUSH
58923: LD_INT 10
58925: PPUSH
58926: CALL_OW 237
58930: GO 58910
58932: POP
58933: POP
// end ;
58934: GO 58894
58936: POP
58937: POP
// end ;
58938: LD_VAR 0 1
58942: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
58943: LD_INT 0
58945: PPUSH
// uc_side := your_side ;
58946: LD_ADDR_OWVAR 20
58950: PUSH
58951: LD_OWVAR 2
58955: ST_TO_ADDR
// uc_nation := nation ;
58956: LD_ADDR_OWVAR 21
58960: PUSH
58961: LD_VAR 0 1
58965: ST_TO_ADDR
// InitHc ;
58966: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
58970: LD_INT 0
58972: PPUSH
58973: LD_VAR 0 2
58977: PPUSH
58978: LD_VAR 0 3
58982: PPUSH
58983: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
58987: LD_VAR 0 4
58991: PPUSH
58992: LD_VAR 0 5
58996: PPUSH
58997: CALL_OW 428
59001: PUSH
59002: LD_INT 0
59004: EQUAL
59005: IFFALSE 59029
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
59007: CALL_OW 44
59011: PPUSH
59012: LD_VAR 0 4
59016: PPUSH
59017: LD_VAR 0 5
59021: PPUSH
59022: LD_INT 1
59024: PPUSH
59025: CALL_OW 48
// end ;
59029: LD_VAR 0 6
59033: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
59034: LD_INT 0
59036: PPUSH
59037: PPUSH
// uc_side := your_side ;
59038: LD_ADDR_OWVAR 20
59042: PUSH
59043: LD_OWVAR 2
59047: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
59048: LD_VAR 0 1
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: LD_INT 3
59061: PUSH
59062: LD_INT 4
59064: PUSH
59065: LD_INT 5
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: IN
59075: IFFALSE 59087
// uc_nation := nation_american else
59077: LD_ADDR_OWVAR 21
59081: PUSH
59082: LD_INT 1
59084: ST_TO_ADDR
59085: GO 59130
// if chassis in [ 11 , 12 , 13 , 14 ] then
59087: LD_VAR 0 1
59091: PUSH
59092: LD_INT 11
59094: PUSH
59095: LD_INT 12
59097: PUSH
59098: LD_INT 13
59100: PUSH
59101: LD_INT 14
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: IN
59110: IFFALSE 59122
// uc_nation := nation_arabian else
59112: LD_ADDR_OWVAR 21
59116: PUSH
59117: LD_INT 2
59119: ST_TO_ADDR
59120: GO 59130
// uc_nation := nation_russian ;
59122: LD_ADDR_OWVAR 21
59126: PUSH
59127: LD_INT 3
59129: ST_TO_ADDR
// vc_chassis := chassis ;
59130: LD_ADDR_OWVAR 37
59134: PUSH
59135: LD_VAR 0 1
59139: ST_TO_ADDR
// vc_engine := engine ;
59140: LD_ADDR_OWVAR 39
59144: PUSH
59145: LD_VAR 0 2
59149: ST_TO_ADDR
// vc_control := control ;
59150: LD_ADDR_OWVAR 38
59154: PUSH
59155: LD_VAR 0 3
59159: ST_TO_ADDR
// vc_weapon := weapon ;
59160: LD_ADDR_OWVAR 40
59164: PUSH
59165: LD_VAR 0 4
59169: ST_TO_ADDR
// un := CreateVehicle ;
59170: LD_ADDR_VAR 0 8
59174: PUSH
59175: CALL_OW 45
59179: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
59180: LD_VAR 0 8
59184: PPUSH
59185: LD_INT 0
59187: PPUSH
59188: LD_INT 5
59190: PPUSH
59191: CALL_OW 12
59195: PPUSH
59196: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
59200: LD_VAR 0 8
59204: PPUSH
59205: LD_VAR 0 5
59209: PPUSH
59210: LD_VAR 0 6
59214: PPUSH
59215: LD_INT 1
59217: PPUSH
59218: CALL_OW 48
// end ;
59222: LD_VAR 0 7
59226: RET
// export hInvincible ; every 1 do
59227: GO 59229
59229: DISABLE
// hInvincible := [ ] ;
59230: LD_ADDR_EXP 71
59234: PUSH
59235: EMPTY
59236: ST_TO_ADDR
59237: END
// every 10 do var i ;
59238: GO 59240
59240: DISABLE
59241: LD_INT 0
59243: PPUSH
// begin enable ;
59244: ENABLE
// if not hInvincible then
59245: LD_EXP 71
59249: NOT
59250: IFFALSE 59254
// exit ;
59252: GO 59298
// for i in hInvincible do
59254: LD_ADDR_VAR 0 1
59258: PUSH
59259: LD_EXP 71
59263: PUSH
59264: FOR_IN
59265: IFFALSE 59296
// if GetLives ( i ) < 1000 then
59267: LD_VAR 0 1
59271: PPUSH
59272: CALL_OW 256
59276: PUSH
59277: LD_INT 1000
59279: LESS
59280: IFFALSE 59294
// SetLives ( i , 1000 ) ;
59282: LD_VAR 0 1
59286: PPUSH
59287: LD_INT 1000
59289: PPUSH
59290: CALL_OW 234
59294: GO 59264
59296: POP
59297: POP
// end ;
59298: PPOPN 1
59300: END
// export function hHackInvincible ; var i ; begin
59301: LD_INT 0
59303: PPUSH
59304: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
59305: LD_ADDR_VAR 0 2
59309: PUSH
59310: LD_INT 2
59312: PUSH
59313: LD_INT 21
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 21
59325: PUSH
59326: LD_INT 2
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: LIST
59337: PPUSH
59338: CALL_OW 69
59342: PUSH
59343: FOR_IN
59344: IFFALSE 59405
// if IsSelected ( i ) then
59346: LD_VAR 0 2
59350: PPUSH
59351: CALL_OW 306
59355: IFFALSE 59403
// begin if i in hInvincible then
59357: LD_VAR 0 2
59361: PUSH
59362: LD_EXP 71
59366: IN
59367: IFFALSE 59387
// hInvincible := hInvincible diff i else
59369: LD_ADDR_EXP 71
59373: PUSH
59374: LD_EXP 71
59378: PUSH
59379: LD_VAR 0 2
59383: DIFF
59384: ST_TO_ADDR
59385: GO 59403
// hInvincible := hInvincible union i ;
59387: LD_ADDR_EXP 71
59391: PUSH
59392: LD_EXP 71
59396: PUSH
59397: LD_VAR 0 2
59401: UNION
59402: ST_TO_ADDR
// end ;
59403: GO 59343
59405: POP
59406: POP
// end ;
59407: LD_VAR 0 1
59411: RET
// export function hHackInvisible ; var i , j ; begin
59412: LD_INT 0
59414: PPUSH
59415: PPUSH
59416: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59417: LD_ADDR_VAR 0 2
59421: PUSH
59422: LD_INT 21
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PPUSH
59432: CALL_OW 69
59436: PUSH
59437: FOR_IN
59438: IFFALSE 59462
// if IsSelected ( i ) then
59440: LD_VAR 0 2
59444: PPUSH
59445: CALL_OW 306
59449: IFFALSE 59460
// ComForceInvisible ( i ) ;
59451: LD_VAR 0 2
59455: PPUSH
59456: CALL_OW 496
59460: GO 59437
59462: POP
59463: POP
// end ;
59464: LD_VAR 0 1
59468: RET
// export function hHackChangeYourSide ; begin
59469: LD_INT 0
59471: PPUSH
// if your_side = 8 then
59472: LD_OWVAR 2
59476: PUSH
59477: LD_INT 8
59479: EQUAL
59480: IFFALSE 59492
// your_side := 0 else
59482: LD_ADDR_OWVAR 2
59486: PUSH
59487: LD_INT 0
59489: ST_TO_ADDR
59490: GO 59506
// your_side := your_side + 1 ;
59492: LD_ADDR_OWVAR 2
59496: PUSH
59497: LD_OWVAR 2
59501: PUSH
59502: LD_INT 1
59504: PLUS
59505: ST_TO_ADDR
// end ;
59506: LD_VAR 0 1
59510: RET
// export function hHackChangeUnitSide ; var i , j ; begin
59511: LD_INT 0
59513: PPUSH
59514: PPUSH
59515: PPUSH
// for i in all_units do
59516: LD_ADDR_VAR 0 2
59520: PUSH
59521: LD_OWVAR 3
59525: PUSH
59526: FOR_IN
59527: IFFALSE 59605
// if IsSelected ( i ) then
59529: LD_VAR 0 2
59533: PPUSH
59534: CALL_OW 306
59538: IFFALSE 59603
// begin j := GetSide ( i ) ;
59540: LD_ADDR_VAR 0 3
59544: PUSH
59545: LD_VAR 0 2
59549: PPUSH
59550: CALL_OW 255
59554: ST_TO_ADDR
// if j = 8 then
59555: LD_VAR 0 3
59559: PUSH
59560: LD_INT 8
59562: EQUAL
59563: IFFALSE 59575
// j := 0 else
59565: LD_ADDR_VAR 0 3
59569: PUSH
59570: LD_INT 0
59572: ST_TO_ADDR
59573: GO 59589
// j := j + 1 ;
59575: LD_ADDR_VAR 0 3
59579: PUSH
59580: LD_VAR 0 3
59584: PUSH
59585: LD_INT 1
59587: PLUS
59588: ST_TO_ADDR
// SetSide ( i , j ) ;
59589: LD_VAR 0 2
59593: PPUSH
59594: LD_VAR 0 3
59598: PPUSH
59599: CALL_OW 235
// end ;
59603: GO 59526
59605: POP
59606: POP
// end ;
59607: LD_VAR 0 1
59611: RET
// export function hHackFog ; begin
59612: LD_INT 0
59614: PPUSH
// FogOff ( true ) ;
59615: LD_INT 1
59617: PPUSH
59618: CALL_OW 344
// end ;
59622: LD_VAR 0 1
59626: RET
// export function hHackTeleport ( unit , x , y ) ; begin
59627: LD_INT 0
59629: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
59630: LD_VAR 0 1
59634: PPUSH
59635: LD_VAR 0 2
59639: PPUSH
59640: LD_VAR 0 3
59644: PPUSH
59645: LD_INT 1
59647: PPUSH
59648: LD_INT 1
59650: PPUSH
59651: CALL_OW 483
// CenterOnXY ( x , y ) ;
59655: LD_VAR 0 2
59659: PPUSH
59660: LD_VAR 0 3
59664: PPUSH
59665: CALL_OW 84
// end ;
59669: LD_VAR 0 4
59673: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59674: LD_INT 0
59676: PPUSH
59677: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59678: LD_VAR 0 1
59682: NOT
59683: PUSH
59684: LD_VAR 0 2
59688: PPUSH
59689: LD_VAR 0 3
59693: PPUSH
59694: CALL_OW 488
59698: NOT
59699: OR
59700: PUSH
59701: LD_VAR 0 1
59705: PPUSH
59706: CALL_OW 266
59710: PUSH
59711: LD_INT 3
59713: NONEQUAL
59714: PUSH
59715: LD_VAR 0 1
59719: PPUSH
59720: CALL_OW 247
59724: PUSH
59725: LD_INT 1
59727: EQUAL
59728: NOT
59729: AND
59730: OR
59731: IFFALSE 59735
// exit ;
59733: GO 59884
// if GetType ( factory ) = unit_human then
59735: LD_VAR 0 1
59739: PPUSH
59740: CALL_OW 247
59744: PUSH
59745: LD_INT 1
59747: EQUAL
59748: IFFALSE 59765
// factory := IsInUnit ( factory ) ;
59750: LD_ADDR_VAR 0 1
59754: PUSH
59755: LD_VAR 0 1
59759: PPUSH
59760: CALL_OW 310
59764: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59765: LD_VAR 0 1
59769: PPUSH
59770: CALL_OW 266
59774: PUSH
59775: LD_INT 3
59777: NONEQUAL
59778: IFFALSE 59782
// exit ;
59780: GO 59884
// if HexInfo ( x , y ) = factory then
59782: LD_VAR 0 2
59786: PPUSH
59787: LD_VAR 0 3
59791: PPUSH
59792: CALL_OW 428
59796: PUSH
59797: LD_VAR 0 1
59801: EQUAL
59802: IFFALSE 59829
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
59804: LD_ADDR_EXP 72
59808: PUSH
59809: LD_EXP 72
59813: PPUSH
59814: LD_VAR 0 1
59818: PPUSH
59819: LD_INT 0
59821: PPUSH
59822: CALL_OW 1
59826: ST_TO_ADDR
59827: GO 59880
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
59829: LD_ADDR_EXP 72
59833: PUSH
59834: LD_EXP 72
59838: PPUSH
59839: LD_VAR 0 1
59843: PPUSH
59844: LD_VAR 0 1
59848: PPUSH
59849: CALL_OW 255
59853: PUSH
59854: LD_VAR 0 1
59858: PUSH
59859: LD_VAR 0 2
59863: PUSH
59864: LD_VAR 0 3
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: PPUSH
59875: CALL_OW 1
59879: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59880: CALL 59889 0 0
// end ;
59884: LD_VAR 0 4
59888: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59889: LD_INT 0
59891: PPUSH
59892: PPUSH
59893: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59894: LD_STRING resetFactoryWaypoint();
59896: PPUSH
59897: CALL_OW 559
// if factoryWaypoints then
59901: LD_EXP 72
59905: IFFALSE 60031
// begin list := PrepareArray ( factoryWaypoints ) ;
59907: LD_ADDR_VAR 0 3
59911: PUSH
59912: LD_EXP 72
59916: PPUSH
59917: CALL 42338 0 1
59921: ST_TO_ADDR
// for i := 1 to list do
59922: LD_ADDR_VAR 0 2
59926: PUSH
59927: DOUBLE
59928: LD_INT 1
59930: DEC
59931: ST_TO_ADDR
59932: LD_VAR 0 3
59936: PUSH
59937: FOR_TO
59938: IFFALSE 60029
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59940: LD_STRING setFactoryWaypointXY(
59942: PUSH
59943: LD_VAR 0 3
59947: PUSH
59948: LD_VAR 0 2
59952: ARRAY
59953: PUSH
59954: LD_INT 1
59956: ARRAY
59957: STR
59958: PUSH
59959: LD_STRING ,
59961: STR
59962: PUSH
59963: LD_VAR 0 3
59967: PUSH
59968: LD_VAR 0 2
59972: ARRAY
59973: PUSH
59974: LD_INT 2
59976: ARRAY
59977: STR
59978: PUSH
59979: LD_STRING ,
59981: STR
59982: PUSH
59983: LD_VAR 0 3
59987: PUSH
59988: LD_VAR 0 2
59992: ARRAY
59993: PUSH
59994: LD_INT 3
59996: ARRAY
59997: STR
59998: PUSH
59999: LD_STRING ,
60001: STR
60002: PUSH
60003: LD_VAR 0 3
60007: PUSH
60008: LD_VAR 0 2
60012: ARRAY
60013: PUSH
60014: LD_INT 4
60016: ARRAY
60017: STR
60018: PUSH
60019: LD_STRING )
60021: STR
60022: PPUSH
60023: CALL_OW 559
60027: GO 59937
60029: POP
60030: POP
// end ; end ;
60031: LD_VAR 0 1
60035: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
60036: LD_INT 0
60038: PPUSH
// if HexInfo ( x , y ) = warehouse then
60039: LD_VAR 0 2
60043: PPUSH
60044: LD_VAR 0 3
60048: PPUSH
60049: CALL_OW 428
60053: PUSH
60054: LD_VAR 0 1
60058: EQUAL
60059: IFFALSE 60086
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60061: LD_ADDR_EXP 73
60065: PUSH
60066: LD_EXP 73
60070: PPUSH
60071: LD_VAR 0 1
60075: PPUSH
60076: LD_INT 0
60078: PPUSH
60079: CALL_OW 1
60083: ST_TO_ADDR
60084: GO 60137
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60086: LD_ADDR_EXP 73
60090: PUSH
60091: LD_EXP 73
60095: PPUSH
60096: LD_VAR 0 1
60100: PPUSH
60101: LD_VAR 0 1
60105: PPUSH
60106: CALL_OW 255
60110: PUSH
60111: LD_VAR 0 1
60115: PUSH
60116: LD_VAR 0 2
60120: PUSH
60121: LD_VAR 0 3
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: PPUSH
60132: CALL_OW 1
60136: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60137: CALL 60146 0 0
// end ;
60141: LD_VAR 0 4
60145: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60146: LD_INT 0
60148: PPUSH
60149: PPUSH
60150: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60151: LD_STRING resetWarehouseGatheringPoints();
60153: PPUSH
60154: CALL_OW 559
// if warehouseGatheringPoints then
60158: LD_EXP 73
60162: IFFALSE 60288
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60164: LD_ADDR_VAR 0 3
60168: PUSH
60169: LD_EXP 73
60173: PPUSH
60174: CALL 42338 0 1
60178: ST_TO_ADDR
// for i := 1 to list do
60179: LD_ADDR_VAR 0 2
60183: PUSH
60184: DOUBLE
60185: LD_INT 1
60187: DEC
60188: ST_TO_ADDR
60189: LD_VAR 0 3
60193: PUSH
60194: FOR_TO
60195: IFFALSE 60286
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60197: LD_STRING setWarehouseGatheringPointXY(
60199: PUSH
60200: LD_VAR 0 3
60204: PUSH
60205: LD_VAR 0 2
60209: ARRAY
60210: PUSH
60211: LD_INT 1
60213: ARRAY
60214: STR
60215: PUSH
60216: LD_STRING ,
60218: STR
60219: PUSH
60220: LD_VAR 0 3
60224: PUSH
60225: LD_VAR 0 2
60229: ARRAY
60230: PUSH
60231: LD_INT 2
60233: ARRAY
60234: STR
60235: PUSH
60236: LD_STRING ,
60238: STR
60239: PUSH
60240: LD_VAR 0 3
60244: PUSH
60245: LD_VAR 0 2
60249: ARRAY
60250: PUSH
60251: LD_INT 3
60253: ARRAY
60254: STR
60255: PUSH
60256: LD_STRING ,
60258: STR
60259: PUSH
60260: LD_VAR 0 3
60264: PUSH
60265: LD_VAR 0 2
60269: ARRAY
60270: PUSH
60271: LD_INT 4
60273: ARRAY
60274: STR
60275: PUSH
60276: LD_STRING )
60278: STR
60279: PPUSH
60280: CALL_OW 559
60284: GO 60194
60286: POP
60287: POP
// end ; end ;
60288: LD_VAR 0 1
60292: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
60293: LD_EXP 73
60297: IFFALSE 60982
60299: GO 60301
60301: DISABLE
60302: LD_INT 0
60304: PPUSH
60305: PPUSH
60306: PPUSH
60307: PPUSH
60308: PPUSH
60309: PPUSH
60310: PPUSH
60311: PPUSH
60312: PPUSH
// begin enable ;
60313: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
60314: LD_ADDR_VAR 0 3
60318: PUSH
60319: LD_EXP 73
60323: PPUSH
60324: CALL 42338 0 1
60328: ST_TO_ADDR
// if not list then
60329: LD_VAR 0 3
60333: NOT
60334: IFFALSE 60338
// exit ;
60336: GO 60982
// for i := 1 to list do
60338: LD_ADDR_VAR 0 1
60342: PUSH
60343: DOUBLE
60344: LD_INT 1
60346: DEC
60347: ST_TO_ADDR
60348: LD_VAR 0 3
60352: PUSH
60353: FOR_TO
60354: IFFALSE 60980
// begin depot := list [ i ] [ 2 ] ;
60356: LD_ADDR_VAR 0 8
60360: PUSH
60361: LD_VAR 0 3
60365: PUSH
60366: LD_VAR 0 1
60370: ARRAY
60371: PUSH
60372: LD_INT 2
60374: ARRAY
60375: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
60376: LD_ADDR_VAR 0 5
60380: PUSH
60381: LD_VAR 0 3
60385: PUSH
60386: LD_VAR 0 1
60390: ARRAY
60391: PUSH
60392: LD_INT 1
60394: ARRAY
60395: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
60396: LD_VAR 0 8
60400: PPUSH
60401: CALL_OW 301
60405: PUSH
60406: LD_VAR 0 5
60410: PUSH
60411: LD_VAR 0 8
60415: PPUSH
60416: CALL_OW 255
60420: NONEQUAL
60421: OR
60422: IFFALSE 60451
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
60424: LD_ADDR_EXP 73
60428: PUSH
60429: LD_EXP 73
60433: PPUSH
60434: LD_VAR 0 8
60438: PPUSH
60439: LD_INT 0
60441: PPUSH
60442: CALL_OW 1
60446: ST_TO_ADDR
// exit ;
60447: POP
60448: POP
60449: GO 60982
// end ; x := list [ i ] [ 3 ] ;
60451: LD_ADDR_VAR 0 6
60455: PUSH
60456: LD_VAR 0 3
60460: PUSH
60461: LD_VAR 0 1
60465: ARRAY
60466: PUSH
60467: LD_INT 3
60469: ARRAY
60470: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
60471: LD_ADDR_VAR 0 7
60475: PUSH
60476: LD_VAR 0 3
60480: PUSH
60481: LD_VAR 0 1
60485: ARRAY
60486: PUSH
60487: LD_INT 4
60489: ARRAY
60490: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
60491: LD_ADDR_VAR 0 9
60495: PUSH
60496: LD_VAR 0 6
60500: PPUSH
60501: LD_VAR 0 7
60505: PPUSH
60506: LD_INT 16
60508: PPUSH
60509: CALL 40926 0 3
60513: ST_TO_ADDR
// if not cratesNearbyPoint then
60514: LD_VAR 0 9
60518: NOT
60519: IFFALSE 60525
// exit ;
60521: POP
60522: POP
60523: GO 60982
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
60525: LD_ADDR_VAR 0 4
60529: PUSH
60530: LD_INT 22
60532: PUSH
60533: LD_VAR 0 5
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 3
60544: PUSH
60545: LD_INT 60
60547: PUSH
60548: EMPTY
60549: LIST
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 91
60557: PUSH
60558: LD_VAR 0 8
60562: PUSH
60563: LD_INT 6
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: PUSH
60574: LD_INT 25
60576: PUSH
60577: LD_INT 2
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 25
60586: PUSH
60587: LD_INT 16
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: LIST
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: PPUSH
60605: CALL_OW 69
60609: PUSH
60610: LD_VAR 0 8
60614: PPUSH
60615: CALL_OW 313
60619: PPUSH
60620: LD_INT 3
60622: PUSH
60623: LD_INT 60
60625: PUSH
60626: EMPTY
60627: LIST
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 2
60635: PUSH
60636: LD_INT 25
60638: PUSH
60639: LD_INT 2
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 25
60648: PUSH
60649: LD_INT 16
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: LIST
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PPUSH
60665: CALL_OW 72
60669: UNION
60670: ST_TO_ADDR
// if tmp then
60671: LD_VAR 0 4
60675: IFFALSE 60755
// begin tmp := ShrinkArray ( tmp , 3 ) ;
60677: LD_ADDR_VAR 0 4
60681: PUSH
60682: LD_VAR 0 4
60686: PPUSH
60687: LD_INT 3
60689: PPUSH
60690: CALL 38895 0 2
60694: ST_TO_ADDR
// for j in tmp do
60695: LD_ADDR_VAR 0 2
60699: PUSH
60700: LD_VAR 0 4
60704: PUSH
60705: FOR_IN
60706: IFFALSE 60749
// begin if IsInUnit ( j ) then
60708: LD_VAR 0 2
60712: PPUSH
60713: CALL_OW 310
60717: IFFALSE 60728
// ComExit ( j ) ;
60719: LD_VAR 0 2
60723: PPUSH
60724: CALL 38978 0 1
// AddComCollect ( j , x , y ) ;
60728: LD_VAR 0 2
60732: PPUSH
60733: LD_VAR 0 6
60737: PPUSH
60738: LD_VAR 0 7
60742: PPUSH
60743: CALL_OW 177
// end ;
60747: GO 60705
60749: POP
60750: POP
// exit ;
60751: POP
60752: POP
60753: GO 60982
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
60755: LD_ADDR_VAR 0 4
60759: PUSH
60760: LD_INT 22
60762: PUSH
60763: LD_VAR 0 5
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 91
60774: PUSH
60775: LD_VAR 0 8
60779: PUSH
60780: LD_INT 8
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 2
60790: PUSH
60791: LD_INT 34
60793: PUSH
60794: LD_INT 12
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 34
60803: PUSH
60804: LD_INT 51
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 34
60813: PUSH
60814: LD_INT 32
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 34
60823: PUSH
60824: LD_INT 89
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: LIST
60842: PPUSH
60843: CALL_OW 69
60847: ST_TO_ADDR
// if tmp then
60848: LD_VAR 0 4
60852: IFFALSE 60978
// begin for j in tmp do
60854: LD_ADDR_VAR 0 2
60858: PUSH
60859: LD_VAR 0 4
60863: PUSH
60864: FOR_IN
60865: IFFALSE 60976
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
60867: LD_VAR 0 2
60871: PPUSH
60872: CALL_OW 262
60876: PUSH
60877: LD_INT 3
60879: EQUAL
60880: PUSH
60881: LD_VAR 0 2
60885: PPUSH
60886: CALL_OW 261
60890: PUSH
60891: LD_INT 20
60893: GREATER
60894: OR
60895: PUSH
60896: LD_VAR 0 2
60900: PPUSH
60901: CALL_OW 314
60905: NOT
60906: AND
60907: PUSH
60908: LD_VAR 0 2
60912: PPUSH
60913: CALL_OW 263
60917: PUSH
60918: LD_INT 1
60920: NONEQUAL
60921: PUSH
60922: LD_VAR 0 2
60926: PPUSH
60927: CALL_OW 311
60931: OR
60932: AND
60933: IFFALSE 60974
// begin ComCollect ( j , x , y ) ;
60935: LD_VAR 0 2
60939: PPUSH
60940: LD_VAR 0 6
60944: PPUSH
60945: LD_VAR 0 7
60949: PPUSH
60950: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
60954: LD_VAR 0 2
60958: PPUSH
60959: LD_VAR 0 8
60963: PPUSH
60964: CALL_OW 172
// exit ;
60968: POP
60969: POP
60970: POP
60971: POP
60972: GO 60982
// end ;
60974: GO 60864
60976: POP
60977: POP
// end ; end ;
60978: GO 60353
60980: POP
60981: POP
// end ; end_of_file end_of_file
60982: PPOPN 9
60984: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
60985: LD_INT 0
60987: PPUSH
60988: PPUSH
60989: PPUSH
60990: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
60991: LD_VAR 0 1
60995: PPUSH
60996: CALL_OW 264
61000: PUSH
61001: LD_INT 91
61003: EQUAL
61004: IFFALSE 61076
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
61006: LD_INT 68
61008: PPUSH
61009: LD_VAR 0 1
61013: PPUSH
61014: CALL_OW 255
61018: PPUSH
61019: CALL_OW 321
61023: PUSH
61024: LD_INT 2
61026: EQUAL
61027: IFFALSE 61039
// eff := 70 else
61029: LD_ADDR_VAR 0 4
61033: PUSH
61034: LD_INT 70
61036: ST_TO_ADDR
61037: GO 61047
// eff := 30 ;
61039: LD_ADDR_VAR 0 4
61043: PUSH
61044: LD_INT 30
61046: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
61047: LD_VAR 0 1
61051: PPUSH
61052: CALL_OW 250
61056: PPUSH
61057: LD_VAR 0 1
61061: PPUSH
61062: CALL_OW 251
61066: PPUSH
61067: LD_VAR 0 4
61071: PPUSH
61072: CALL_OW 495
// end ; end ;
61076: LD_VAR 0 2
61080: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
61081: LD_INT 0
61083: PPUSH
// end ;
61084: LD_VAR 0 4
61088: RET
// export function SOS_Command ( cmd ) ; begin
61089: LD_INT 0
61091: PPUSH
// end ;
61092: LD_VAR 0 2
61096: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
61097: LD_INT 0
61099: PPUSH
// end ;
61100: LD_VAR 0 6
61104: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
61105: LD_INT 0
61107: PPUSH
61108: PPUSH
// if not vehicle or not factory then
61109: LD_VAR 0 1
61113: NOT
61114: PUSH
61115: LD_VAR 0 2
61119: NOT
61120: OR
61121: IFFALSE 61125
// exit ;
61123: GO 61356
// if factoryWaypoints >= factory then
61125: LD_EXP 72
61129: PUSH
61130: LD_VAR 0 2
61134: GREATEREQUAL
61135: IFFALSE 61356
// if factoryWaypoints [ factory ] then
61137: LD_EXP 72
61141: PUSH
61142: LD_VAR 0 2
61146: ARRAY
61147: IFFALSE 61356
// begin if GetControl ( vehicle ) = control_manual then
61149: LD_VAR 0 1
61153: PPUSH
61154: CALL_OW 263
61158: PUSH
61159: LD_INT 1
61161: EQUAL
61162: IFFALSE 61243
// begin driver := IsDrivenBy ( vehicle ) ;
61164: LD_ADDR_VAR 0 4
61168: PUSH
61169: LD_VAR 0 1
61173: PPUSH
61174: CALL_OW 311
61178: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61179: LD_VAR 0 4
61183: PPUSH
61184: LD_EXP 72
61188: PUSH
61189: LD_VAR 0 2
61193: ARRAY
61194: PUSH
61195: LD_INT 3
61197: ARRAY
61198: PPUSH
61199: LD_EXP 72
61203: PUSH
61204: LD_VAR 0 2
61208: ARRAY
61209: PUSH
61210: LD_INT 4
61212: ARRAY
61213: PPUSH
61214: CALL_OW 171
// AddComExitVehicle ( driver ) ;
61218: LD_VAR 0 4
61222: PPUSH
61223: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
61227: LD_VAR 0 4
61231: PPUSH
61232: LD_VAR 0 2
61236: PPUSH
61237: CALL_OW 180
// end else
61241: GO 61356
// if GetControl ( vehicle ) = control_remote then
61243: LD_VAR 0 1
61247: PPUSH
61248: CALL_OW 263
61252: PUSH
61253: LD_INT 2
61255: EQUAL
61256: IFFALSE 61317
// begin wait ( 0 0$2 ) ;
61258: LD_INT 70
61260: PPUSH
61261: CALL_OW 67
// if Connect ( vehicle ) then
61265: LD_VAR 0 1
61269: PPUSH
61270: CALL 9246 0 1
61274: IFFALSE 61315
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61276: LD_VAR 0 1
61280: PPUSH
61281: LD_EXP 72
61285: PUSH
61286: LD_VAR 0 2
61290: ARRAY
61291: PUSH
61292: LD_INT 3
61294: ARRAY
61295: PPUSH
61296: LD_EXP 72
61300: PUSH
61301: LD_VAR 0 2
61305: ARRAY
61306: PUSH
61307: LD_INT 4
61309: ARRAY
61310: PPUSH
61311: CALL_OW 171
// end else
61315: GO 61356
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61317: LD_VAR 0 1
61321: PPUSH
61322: LD_EXP 72
61326: PUSH
61327: LD_VAR 0 2
61331: ARRAY
61332: PUSH
61333: LD_INT 3
61335: ARRAY
61336: PPUSH
61337: LD_EXP 72
61341: PUSH
61342: LD_VAR 0 2
61346: ARRAY
61347: PUSH
61348: LD_INT 4
61350: ARRAY
61351: PPUSH
61352: CALL_OW 171
// end ; end ;
61356: LD_VAR 0 3
61360: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
61361: LD_INT 0
61363: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
61364: LD_VAR 0 1
61368: PUSH
61369: LD_INT 250
61371: EQUAL
61372: PUSH
61373: LD_VAR 0 2
61377: PPUSH
61378: CALL_OW 264
61382: PUSH
61383: LD_INT 81
61385: EQUAL
61386: AND
61387: IFFALSE 61408
// MinerPlaceMine ( unit , x , y ) ;
61389: LD_VAR 0 2
61393: PPUSH
61394: LD_VAR 0 4
61398: PPUSH
61399: LD_VAR 0 5
61403: PPUSH
61404: CALL 63793 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
61408: LD_VAR 0 1
61412: PUSH
61413: LD_INT 251
61415: EQUAL
61416: PUSH
61417: LD_VAR 0 2
61421: PPUSH
61422: CALL_OW 264
61426: PUSH
61427: LD_INT 81
61429: EQUAL
61430: AND
61431: IFFALSE 61452
// MinerDetonateMine ( unit , x , y ) ;
61433: LD_VAR 0 2
61437: PPUSH
61438: LD_VAR 0 4
61442: PPUSH
61443: LD_VAR 0 5
61447: PPUSH
61448: CALL 64068 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
61452: LD_VAR 0 1
61456: PUSH
61457: LD_INT 252
61459: EQUAL
61460: PUSH
61461: LD_VAR 0 2
61465: PPUSH
61466: CALL_OW 264
61470: PUSH
61471: LD_INT 81
61473: EQUAL
61474: AND
61475: IFFALSE 61496
// MinerCreateMinefield ( unit , x , y ) ;
61477: LD_VAR 0 2
61481: PPUSH
61482: LD_VAR 0 4
61486: PPUSH
61487: LD_VAR 0 5
61491: PPUSH
61492: CALL 64485 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
61496: LD_VAR 0 1
61500: PUSH
61501: LD_INT 253
61503: EQUAL
61504: PUSH
61505: LD_VAR 0 2
61509: PPUSH
61510: CALL_OW 257
61514: PUSH
61515: LD_INT 5
61517: EQUAL
61518: AND
61519: IFFALSE 61540
// ComBinocular ( unit , x , y ) ;
61521: LD_VAR 0 2
61525: PPUSH
61526: LD_VAR 0 4
61530: PPUSH
61531: LD_VAR 0 5
61535: PPUSH
61536: CALL 64854 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
61540: LD_VAR 0 1
61544: PUSH
61545: LD_INT 254
61547: EQUAL
61548: PUSH
61549: LD_VAR 0 2
61553: PPUSH
61554: CALL_OW 264
61558: PUSH
61559: LD_INT 99
61561: EQUAL
61562: AND
61563: PUSH
61564: LD_VAR 0 3
61568: PPUSH
61569: CALL_OW 263
61573: PUSH
61574: LD_INT 3
61576: EQUAL
61577: AND
61578: IFFALSE 61594
// HackDestroyVehicle ( unit , selectedUnit ) ;
61580: LD_VAR 0 2
61584: PPUSH
61585: LD_VAR 0 3
61589: PPUSH
61590: CALL 63157 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61594: LD_VAR 0 1
61598: PUSH
61599: LD_INT 255
61601: EQUAL
61602: PUSH
61603: LD_VAR 0 2
61607: PPUSH
61608: CALL_OW 264
61612: PUSH
61613: LD_INT 14
61615: PUSH
61616: LD_INT 53
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: IN
61623: AND
61624: PUSH
61625: LD_VAR 0 4
61629: PPUSH
61630: LD_VAR 0 5
61634: PPUSH
61635: CALL_OW 488
61639: AND
61640: IFFALSE 61664
// CutTreeXYR ( unit , x , y , 12 ) ;
61642: LD_VAR 0 2
61646: PPUSH
61647: LD_VAR 0 4
61651: PPUSH
61652: LD_VAR 0 5
61656: PPUSH
61657: LD_INT 12
61659: PPUSH
61660: CALL 61727 0 4
// if cmd = 256 then
61664: LD_VAR 0 1
61668: PUSH
61669: LD_INT 256
61671: EQUAL
61672: IFFALSE 61693
// SetFactoryWaypoint ( unit , x , y ) ;
61674: LD_VAR 0 2
61678: PPUSH
61679: LD_VAR 0 4
61683: PPUSH
61684: LD_VAR 0 5
61688: PPUSH
61689: CALL 59674 0 3
// if cmd = 257 then
61693: LD_VAR 0 1
61697: PUSH
61698: LD_INT 257
61700: EQUAL
61701: IFFALSE 61722
// SetWarehouseGatheringPoint ( unit , x , y ) ;
61703: LD_VAR 0 2
61707: PPUSH
61708: LD_VAR 0 4
61712: PPUSH
61713: LD_VAR 0 5
61717: PPUSH
61718: CALL 60036 0 3
// end ;
61722: LD_VAR 0 6
61726: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61727: LD_INT 0
61729: PPUSH
61730: PPUSH
61731: PPUSH
61732: PPUSH
61733: PPUSH
61734: PPUSH
61735: PPUSH
61736: PPUSH
61737: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
61738: LD_VAR 0 1
61742: NOT
61743: PUSH
61744: LD_VAR 0 2
61748: PPUSH
61749: LD_VAR 0 3
61753: PPUSH
61754: CALL_OW 488
61758: NOT
61759: OR
61760: PUSH
61761: LD_VAR 0 4
61765: NOT
61766: OR
61767: IFFALSE 61771
// exit ;
61769: GO 62111
// list := [ ] ;
61771: LD_ADDR_VAR 0 13
61775: PUSH
61776: EMPTY
61777: ST_TO_ADDR
// if x - r < 0 then
61778: LD_VAR 0 2
61782: PUSH
61783: LD_VAR 0 4
61787: MINUS
61788: PUSH
61789: LD_INT 0
61791: LESS
61792: IFFALSE 61804
// min_x := 0 else
61794: LD_ADDR_VAR 0 7
61798: PUSH
61799: LD_INT 0
61801: ST_TO_ADDR
61802: GO 61820
// min_x := x - r ;
61804: LD_ADDR_VAR 0 7
61808: PUSH
61809: LD_VAR 0 2
61813: PUSH
61814: LD_VAR 0 4
61818: MINUS
61819: ST_TO_ADDR
// if y - r < 0 then
61820: LD_VAR 0 3
61824: PUSH
61825: LD_VAR 0 4
61829: MINUS
61830: PUSH
61831: LD_INT 0
61833: LESS
61834: IFFALSE 61846
// min_y := 0 else
61836: LD_ADDR_VAR 0 8
61840: PUSH
61841: LD_INT 0
61843: ST_TO_ADDR
61844: GO 61862
// min_y := y - r ;
61846: LD_ADDR_VAR 0 8
61850: PUSH
61851: LD_VAR 0 3
61855: PUSH
61856: LD_VAR 0 4
61860: MINUS
61861: ST_TO_ADDR
// max_x := x + r ;
61862: LD_ADDR_VAR 0 9
61866: PUSH
61867: LD_VAR 0 2
61871: PUSH
61872: LD_VAR 0 4
61876: PLUS
61877: ST_TO_ADDR
// max_y := y + r ;
61878: LD_ADDR_VAR 0 10
61882: PUSH
61883: LD_VAR 0 3
61887: PUSH
61888: LD_VAR 0 4
61892: PLUS
61893: ST_TO_ADDR
// for _x = min_x to max_x do
61894: LD_ADDR_VAR 0 11
61898: PUSH
61899: DOUBLE
61900: LD_VAR 0 7
61904: DEC
61905: ST_TO_ADDR
61906: LD_VAR 0 9
61910: PUSH
61911: FOR_TO
61912: IFFALSE 62029
// for _y = min_y to max_y do
61914: LD_ADDR_VAR 0 12
61918: PUSH
61919: DOUBLE
61920: LD_VAR 0 8
61924: DEC
61925: ST_TO_ADDR
61926: LD_VAR 0 10
61930: PUSH
61931: FOR_TO
61932: IFFALSE 62025
// begin if not ValidHex ( _x , _y ) then
61934: LD_VAR 0 11
61938: PPUSH
61939: LD_VAR 0 12
61943: PPUSH
61944: CALL_OW 488
61948: NOT
61949: IFFALSE 61953
// continue ;
61951: GO 61931
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61953: LD_VAR 0 11
61957: PPUSH
61958: LD_VAR 0 12
61962: PPUSH
61963: CALL_OW 351
61967: PUSH
61968: LD_VAR 0 11
61972: PPUSH
61973: LD_VAR 0 12
61977: PPUSH
61978: CALL_OW 554
61982: AND
61983: IFFALSE 62023
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61985: LD_ADDR_VAR 0 13
61989: PUSH
61990: LD_VAR 0 13
61994: PPUSH
61995: LD_VAR 0 13
61999: PUSH
62000: LD_INT 1
62002: PLUS
62003: PPUSH
62004: LD_VAR 0 11
62008: PUSH
62009: LD_VAR 0 12
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PPUSH
62018: CALL_OW 2
62022: ST_TO_ADDR
// end ;
62023: GO 61931
62025: POP
62026: POP
62027: GO 61911
62029: POP
62030: POP
// if not list then
62031: LD_VAR 0 13
62035: NOT
62036: IFFALSE 62040
// exit ;
62038: GO 62111
// for i in list do
62040: LD_ADDR_VAR 0 6
62044: PUSH
62045: LD_VAR 0 13
62049: PUSH
62050: FOR_IN
62051: IFFALSE 62109
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
62053: LD_VAR 0 1
62057: PPUSH
62058: LD_STRING M
62060: PUSH
62061: LD_VAR 0 6
62065: PUSH
62066: LD_INT 1
62068: ARRAY
62069: PUSH
62070: LD_VAR 0 6
62074: PUSH
62075: LD_INT 2
62077: ARRAY
62078: PUSH
62079: LD_INT 0
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: LD_INT 0
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: PUSH
62100: EMPTY
62101: LIST
62102: PPUSH
62103: CALL_OW 447
62107: GO 62050
62109: POP
62110: POP
// end ;
62111: LD_VAR 0 5
62115: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
62116: LD_EXP 75
62120: NOT
62121: IFFALSE 62171
62123: GO 62125
62125: DISABLE
// begin initHack := true ;
62126: LD_ADDR_EXP 75
62130: PUSH
62131: LD_INT 1
62133: ST_TO_ADDR
// hackTanks := [ ] ;
62134: LD_ADDR_EXP 76
62138: PUSH
62139: EMPTY
62140: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
62141: LD_ADDR_EXP 77
62145: PUSH
62146: EMPTY
62147: ST_TO_ADDR
// hackLimit := 3 ;
62148: LD_ADDR_EXP 78
62152: PUSH
62153: LD_INT 3
62155: ST_TO_ADDR
// hackDist := 12 ;
62156: LD_ADDR_EXP 79
62160: PUSH
62161: LD_INT 12
62163: ST_TO_ADDR
// hackCounter := [ ] ;
62164: LD_ADDR_EXP 80
62168: PUSH
62169: EMPTY
62170: ST_TO_ADDR
// end ;
62171: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
62172: LD_EXP 75
62176: PUSH
62177: LD_INT 34
62179: PUSH
62180: LD_INT 99
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PPUSH
62187: CALL_OW 69
62191: AND
62192: IFFALSE 62445
62194: GO 62196
62196: DISABLE
62197: LD_INT 0
62199: PPUSH
62200: PPUSH
// begin enable ;
62201: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
62202: LD_ADDR_VAR 0 1
62206: PUSH
62207: LD_INT 34
62209: PUSH
62210: LD_INT 99
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PPUSH
62217: CALL_OW 69
62221: PUSH
62222: FOR_IN
62223: IFFALSE 62443
// begin if not i in hackTanks then
62225: LD_VAR 0 1
62229: PUSH
62230: LD_EXP 76
62234: IN
62235: NOT
62236: IFFALSE 62319
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62238: LD_ADDR_EXP 76
62242: PUSH
62243: LD_EXP 76
62247: PPUSH
62248: LD_EXP 76
62252: PUSH
62253: LD_INT 1
62255: PLUS
62256: PPUSH
62257: LD_VAR 0 1
62261: PPUSH
62262: CALL_OW 1
62266: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62267: LD_ADDR_EXP 77
62271: PUSH
62272: LD_EXP 77
62276: PPUSH
62277: LD_EXP 77
62281: PUSH
62282: LD_INT 1
62284: PLUS
62285: PPUSH
62286: EMPTY
62287: PPUSH
62288: CALL_OW 1
62292: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62293: LD_ADDR_EXP 80
62297: PUSH
62298: LD_EXP 80
62302: PPUSH
62303: LD_EXP 80
62307: PUSH
62308: LD_INT 1
62310: PLUS
62311: PPUSH
62312: EMPTY
62313: PPUSH
62314: CALL_OW 1
62318: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62319: LD_VAR 0 1
62323: PPUSH
62324: CALL_OW 302
62328: NOT
62329: IFFALSE 62342
// begin HackUnlinkAll ( i ) ;
62331: LD_VAR 0 1
62335: PPUSH
62336: CALL 62448 0 1
// continue ;
62340: GO 62222
// end ; HackCheckCapturedStatus ( i ) ;
62342: LD_VAR 0 1
62346: PPUSH
62347: CALL 62891 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62351: LD_ADDR_VAR 0 2
62355: PUSH
62356: LD_INT 81
62358: PUSH
62359: LD_VAR 0 1
62363: PPUSH
62364: CALL_OW 255
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 33
62375: PUSH
62376: LD_INT 3
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 91
62385: PUSH
62386: LD_VAR 0 1
62390: PUSH
62391: LD_EXP 79
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 50
62403: PUSH
62404: EMPTY
62405: LIST
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: PPUSH
62413: CALL_OW 69
62417: ST_TO_ADDR
// if not tmp then
62418: LD_VAR 0 2
62422: NOT
62423: IFFALSE 62427
// continue ;
62425: GO 62222
// HackLink ( i , tmp ) ;
62427: LD_VAR 0 1
62431: PPUSH
62432: LD_VAR 0 2
62436: PPUSH
62437: CALL 62584 0 2
// end ;
62441: GO 62222
62443: POP
62444: POP
// end ;
62445: PPOPN 2
62447: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62448: LD_INT 0
62450: PPUSH
62451: PPUSH
62452: PPUSH
// if not hack in hackTanks then
62453: LD_VAR 0 1
62457: PUSH
62458: LD_EXP 76
62462: IN
62463: NOT
62464: IFFALSE 62468
// exit ;
62466: GO 62579
// index := GetElementIndex ( hackTanks , hack ) ;
62468: LD_ADDR_VAR 0 4
62472: PUSH
62473: LD_EXP 76
62477: PPUSH
62478: LD_VAR 0 1
62482: PPUSH
62483: CALL 6062 0 2
62487: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62488: LD_EXP 77
62492: PUSH
62493: LD_VAR 0 4
62497: ARRAY
62498: IFFALSE 62579
// begin for i in hackTanksCaptured [ index ] do
62500: LD_ADDR_VAR 0 3
62504: PUSH
62505: LD_EXP 77
62509: PUSH
62510: LD_VAR 0 4
62514: ARRAY
62515: PUSH
62516: FOR_IN
62517: IFFALSE 62543
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62519: LD_VAR 0 3
62523: PUSH
62524: LD_INT 1
62526: ARRAY
62527: PPUSH
62528: LD_VAR 0 3
62532: PUSH
62533: LD_INT 2
62535: ARRAY
62536: PPUSH
62537: CALL_OW 235
62541: GO 62516
62543: POP
62544: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62545: LD_ADDR_EXP 77
62549: PUSH
62550: LD_EXP 77
62554: PPUSH
62555: LD_VAR 0 4
62559: PPUSH
62560: EMPTY
62561: PPUSH
62562: CALL_OW 1
62566: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62567: LD_VAR 0 1
62571: PPUSH
62572: LD_INT 0
62574: PPUSH
62575: CALL_OW 505
// end ; end ;
62579: LD_VAR 0 2
62583: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62584: LD_INT 0
62586: PPUSH
62587: PPUSH
62588: PPUSH
// if not hack in hackTanks or not vehicles then
62589: LD_VAR 0 1
62593: PUSH
62594: LD_EXP 76
62598: IN
62599: NOT
62600: PUSH
62601: LD_VAR 0 2
62605: NOT
62606: OR
62607: IFFALSE 62611
// exit ;
62609: GO 62886
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62611: LD_ADDR_VAR 0 2
62615: PUSH
62616: LD_VAR 0 1
62620: PPUSH
62621: LD_VAR 0 2
62625: PPUSH
62626: LD_INT 1
62628: PPUSH
62629: LD_INT 1
62631: PPUSH
62632: CALL 6712 0 4
62636: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62637: LD_ADDR_VAR 0 5
62641: PUSH
62642: LD_EXP 76
62646: PPUSH
62647: LD_VAR 0 1
62651: PPUSH
62652: CALL 6062 0 2
62656: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62657: LD_EXP 77
62661: PUSH
62662: LD_VAR 0 5
62666: ARRAY
62667: PUSH
62668: LD_EXP 78
62672: LESS
62673: IFFALSE 62862
// begin for i := 1 to vehicles do
62675: LD_ADDR_VAR 0 4
62679: PUSH
62680: DOUBLE
62681: LD_INT 1
62683: DEC
62684: ST_TO_ADDR
62685: LD_VAR 0 2
62689: PUSH
62690: FOR_TO
62691: IFFALSE 62860
// begin if hackTanksCaptured [ index ] = hackLimit then
62693: LD_EXP 77
62697: PUSH
62698: LD_VAR 0 5
62702: ARRAY
62703: PUSH
62704: LD_EXP 78
62708: EQUAL
62709: IFFALSE 62713
// break ;
62711: GO 62860
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62713: LD_ADDR_EXP 80
62717: PUSH
62718: LD_EXP 80
62722: PPUSH
62723: LD_VAR 0 5
62727: PPUSH
62728: LD_EXP 80
62732: PUSH
62733: LD_VAR 0 5
62737: ARRAY
62738: PUSH
62739: LD_INT 1
62741: PLUS
62742: PPUSH
62743: CALL_OW 1
62747: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62748: LD_ADDR_EXP 77
62752: PUSH
62753: LD_EXP 77
62757: PPUSH
62758: LD_VAR 0 5
62762: PUSH
62763: LD_EXP 77
62767: PUSH
62768: LD_VAR 0 5
62772: ARRAY
62773: PUSH
62774: LD_INT 1
62776: PLUS
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PPUSH
62782: LD_VAR 0 2
62786: PUSH
62787: LD_VAR 0 4
62791: ARRAY
62792: PUSH
62793: LD_VAR 0 2
62797: PUSH
62798: LD_VAR 0 4
62802: ARRAY
62803: PPUSH
62804: CALL_OW 255
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PPUSH
62813: CALL 6277 0 3
62817: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62818: LD_VAR 0 2
62822: PUSH
62823: LD_VAR 0 4
62827: ARRAY
62828: PPUSH
62829: LD_VAR 0 1
62833: PPUSH
62834: CALL_OW 255
62838: PPUSH
62839: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62843: LD_VAR 0 2
62847: PUSH
62848: LD_VAR 0 4
62852: ARRAY
62853: PPUSH
62854: CALL_OW 141
// end ;
62858: GO 62690
62860: POP
62861: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62862: LD_VAR 0 1
62866: PPUSH
62867: LD_EXP 77
62871: PUSH
62872: LD_VAR 0 5
62876: ARRAY
62877: PUSH
62878: LD_INT 0
62880: PLUS
62881: PPUSH
62882: CALL_OW 505
// end ;
62886: LD_VAR 0 3
62890: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62891: LD_INT 0
62893: PPUSH
62894: PPUSH
62895: PPUSH
62896: PPUSH
// if not hack in hackTanks then
62897: LD_VAR 0 1
62901: PUSH
62902: LD_EXP 76
62906: IN
62907: NOT
62908: IFFALSE 62912
// exit ;
62910: GO 63152
// index := GetElementIndex ( hackTanks , hack ) ;
62912: LD_ADDR_VAR 0 4
62916: PUSH
62917: LD_EXP 76
62921: PPUSH
62922: LD_VAR 0 1
62926: PPUSH
62927: CALL 6062 0 2
62931: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62932: LD_ADDR_VAR 0 3
62936: PUSH
62937: DOUBLE
62938: LD_EXP 77
62942: PUSH
62943: LD_VAR 0 4
62947: ARRAY
62948: INC
62949: ST_TO_ADDR
62950: LD_INT 1
62952: PUSH
62953: FOR_DOWNTO
62954: IFFALSE 63126
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62956: LD_ADDR_VAR 0 5
62960: PUSH
62961: LD_EXP 77
62965: PUSH
62966: LD_VAR 0 4
62970: ARRAY
62971: PUSH
62972: LD_VAR 0 3
62976: ARRAY
62977: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62978: LD_VAR 0 5
62982: PUSH
62983: LD_INT 1
62985: ARRAY
62986: PPUSH
62987: CALL_OW 302
62991: NOT
62992: PUSH
62993: LD_VAR 0 5
62997: PUSH
62998: LD_INT 1
63000: ARRAY
63001: PPUSH
63002: CALL_OW 255
63006: PUSH
63007: LD_VAR 0 1
63011: PPUSH
63012: CALL_OW 255
63016: NONEQUAL
63017: OR
63018: IFFALSE 63124
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
63020: LD_VAR 0 5
63024: PUSH
63025: LD_INT 1
63027: ARRAY
63028: PPUSH
63029: CALL_OW 305
63033: PUSH
63034: LD_VAR 0 5
63038: PUSH
63039: LD_INT 1
63041: ARRAY
63042: PPUSH
63043: CALL_OW 255
63047: PUSH
63048: LD_VAR 0 1
63052: PPUSH
63053: CALL_OW 255
63057: EQUAL
63058: AND
63059: IFFALSE 63083
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
63061: LD_VAR 0 5
63065: PUSH
63066: LD_INT 1
63068: ARRAY
63069: PPUSH
63070: LD_VAR 0 5
63074: PUSH
63075: LD_INT 2
63077: ARRAY
63078: PPUSH
63079: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
63083: LD_ADDR_EXP 77
63087: PUSH
63088: LD_EXP 77
63092: PPUSH
63093: LD_VAR 0 4
63097: PPUSH
63098: LD_EXP 77
63102: PUSH
63103: LD_VAR 0 4
63107: ARRAY
63108: PPUSH
63109: LD_VAR 0 3
63113: PPUSH
63114: CALL_OW 3
63118: PPUSH
63119: CALL_OW 1
63123: ST_TO_ADDR
// end ; end ;
63124: GO 62953
63126: POP
63127: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63128: LD_VAR 0 1
63132: PPUSH
63133: LD_EXP 77
63137: PUSH
63138: LD_VAR 0 4
63142: ARRAY
63143: PUSH
63144: LD_INT 0
63146: PLUS
63147: PPUSH
63148: CALL_OW 505
// end ;
63152: LD_VAR 0 2
63156: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
63157: LD_INT 0
63159: PPUSH
63160: PPUSH
63161: PPUSH
63162: PPUSH
// if not hack in hackTanks then
63163: LD_VAR 0 1
63167: PUSH
63168: LD_EXP 76
63172: IN
63173: NOT
63174: IFFALSE 63178
// exit ;
63176: GO 63263
// index := GetElementIndex ( hackTanks , hack ) ;
63178: LD_ADDR_VAR 0 5
63182: PUSH
63183: LD_EXP 76
63187: PPUSH
63188: LD_VAR 0 1
63192: PPUSH
63193: CALL 6062 0 2
63197: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
63198: LD_ADDR_VAR 0 4
63202: PUSH
63203: DOUBLE
63204: LD_INT 1
63206: DEC
63207: ST_TO_ADDR
63208: LD_EXP 77
63212: PUSH
63213: LD_VAR 0 5
63217: ARRAY
63218: PUSH
63219: FOR_TO
63220: IFFALSE 63261
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
63222: LD_EXP 77
63226: PUSH
63227: LD_VAR 0 5
63231: ARRAY
63232: PUSH
63233: LD_VAR 0 4
63237: ARRAY
63238: PUSH
63239: LD_INT 1
63241: ARRAY
63242: PUSH
63243: LD_VAR 0 2
63247: EQUAL
63248: IFFALSE 63259
// KillUnit ( vehicle ) ;
63250: LD_VAR 0 2
63254: PPUSH
63255: CALL_OW 66
63259: GO 63219
63261: POP
63262: POP
// end ;
63263: LD_VAR 0 3
63267: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
63268: LD_EXP 81
63272: NOT
63273: IFFALSE 63308
63275: GO 63277
63277: DISABLE
// begin initMiner := true ;
63278: LD_ADDR_EXP 81
63282: PUSH
63283: LD_INT 1
63285: ST_TO_ADDR
// minersList := [ ] ;
63286: LD_ADDR_EXP 82
63290: PUSH
63291: EMPTY
63292: ST_TO_ADDR
// minerMinesList := [ ] ;
63293: LD_ADDR_EXP 83
63297: PUSH
63298: EMPTY
63299: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
63300: LD_ADDR_EXP 84
63304: PUSH
63305: LD_INT 5
63307: ST_TO_ADDR
// end ;
63308: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
63309: LD_EXP 81
63313: PUSH
63314: LD_INT 34
63316: PUSH
63317: LD_INT 81
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PPUSH
63324: CALL_OW 69
63328: AND
63329: IFFALSE 63790
63331: GO 63333
63333: DISABLE
63334: LD_INT 0
63336: PPUSH
63337: PPUSH
63338: PPUSH
63339: PPUSH
// begin enable ;
63340: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63341: LD_ADDR_VAR 0 1
63345: PUSH
63346: LD_INT 34
63348: PUSH
63349: LD_INT 81
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PPUSH
63356: CALL_OW 69
63360: PUSH
63361: FOR_IN
63362: IFFALSE 63434
// begin if not i in minersList then
63364: LD_VAR 0 1
63368: PUSH
63369: LD_EXP 82
63373: IN
63374: NOT
63375: IFFALSE 63432
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63377: LD_ADDR_EXP 82
63381: PUSH
63382: LD_EXP 82
63386: PPUSH
63387: LD_EXP 82
63391: PUSH
63392: LD_INT 1
63394: PLUS
63395: PPUSH
63396: LD_VAR 0 1
63400: PPUSH
63401: CALL_OW 1
63405: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63406: LD_ADDR_EXP 83
63410: PUSH
63411: LD_EXP 83
63415: PPUSH
63416: LD_EXP 83
63420: PUSH
63421: LD_INT 1
63423: PLUS
63424: PPUSH
63425: EMPTY
63426: PPUSH
63427: CALL_OW 1
63431: ST_TO_ADDR
// end end ;
63432: GO 63361
63434: POP
63435: POP
// for i := minerMinesList downto 1 do
63436: LD_ADDR_VAR 0 1
63440: PUSH
63441: DOUBLE
63442: LD_EXP 83
63446: INC
63447: ST_TO_ADDR
63448: LD_INT 1
63450: PUSH
63451: FOR_DOWNTO
63452: IFFALSE 63788
// begin if IsLive ( minersList [ i ] ) then
63454: LD_EXP 82
63458: PUSH
63459: LD_VAR 0 1
63463: ARRAY
63464: PPUSH
63465: CALL_OW 300
63469: IFFALSE 63497
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
63471: LD_EXP 82
63475: PUSH
63476: LD_VAR 0 1
63480: ARRAY
63481: PPUSH
63482: LD_EXP 83
63486: PUSH
63487: LD_VAR 0 1
63491: ARRAY
63492: PPUSH
63493: CALL_OW 505
// if not minerMinesList [ i ] then
63497: LD_EXP 83
63501: PUSH
63502: LD_VAR 0 1
63506: ARRAY
63507: NOT
63508: IFFALSE 63512
// continue ;
63510: GO 63451
// for j := minerMinesList [ i ] downto 1 do
63512: LD_ADDR_VAR 0 2
63516: PUSH
63517: DOUBLE
63518: LD_EXP 83
63522: PUSH
63523: LD_VAR 0 1
63527: ARRAY
63528: INC
63529: ST_TO_ADDR
63530: LD_INT 1
63532: PUSH
63533: FOR_DOWNTO
63534: IFFALSE 63784
// begin side := GetSide ( minersList [ i ] ) ;
63536: LD_ADDR_VAR 0 3
63540: PUSH
63541: LD_EXP 82
63545: PUSH
63546: LD_VAR 0 1
63550: ARRAY
63551: PPUSH
63552: CALL_OW 255
63556: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63557: LD_ADDR_VAR 0 4
63561: PUSH
63562: LD_EXP 83
63566: PUSH
63567: LD_VAR 0 1
63571: ARRAY
63572: PUSH
63573: LD_VAR 0 2
63577: ARRAY
63578: PUSH
63579: LD_INT 1
63581: ARRAY
63582: PPUSH
63583: LD_EXP 83
63587: PUSH
63588: LD_VAR 0 1
63592: ARRAY
63593: PUSH
63594: LD_VAR 0 2
63598: ARRAY
63599: PUSH
63600: LD_INT 2
63602: ARRAY
63603: PPUSH
63604: CALL_OW 428
63608: ST_TO_ADDR
// if not tmp then
63609: LD_VAR 0 4
63613: NOT
63614: IFFALSE 63618
// continue ;
63616: GO 63533
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63618: LD_VAR 0 4
63622: PUSH
63623: LD_INT 81
63625: PUSH
63626: LD_VAR 0 3
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PPUSH
63635: CALL_OW 69
63639: IN
63640: PUSH
63641: LD_EXP 83
63645: PUSH
63646: LD_VAR 0 1
63650: ARRAY
63651: PUSH
63652: LD_VAR 0 2
63656: ARRAY
63657: PUSH
63658: LD_INT 1
63660: ARRAY
63661: PPUSH
63662: LD_EXP 83
63666: PUSH
63667: LD_VAR 0 1
63671: ARRAY
63672: PUSH
63673: LD_VAR 0 2
63677: ARRAY
63678: PUSH
63679: LD_INT 2
63681: ARRAY
63682: PPUSH
63683: CALL_OW 458
63687: AND
63688: IFFALSE 63782
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63690: LD_EXP 83
63694: PUSH
63695: LD_VAR 0 1
63699: ARRAY
63700: PUSH
63701: LD_VAR 0 2
63705: ARRAY
63706: PUSH
63707: LD_INT 1
63709: ARRAY
63710: PPUSH
63711: LD_EXP 83
63715: PUSH
63716: LD_VAR 0 1
63720: ARRAY
63721: PUSH
63722: LD_VAR 0 2
63726: ARRAY
63727: PUSH
63728: LD_INT 2
63730: ARRAY
63731: PPUSH
63732: LD_VAR 0 3
63736: PPUSH
63737: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63741: LD_ADDR_EXP 83
63745: PUSH
63746: LD_EXP 83
63750: PPUSH
63751: LD_VAR 0 1
63755: PPUSH
63756: LD_EXP 83
63760: PUSH
63761: LD_VAR 0 1
63765: ARRAY
63766: PPUSH
63767: LD_VAR 0 2
63771: PPUSH
63772: CALL_OW 3
63776: PPUSH
63777: CALL_OW 1
63781: ST_TO_ADDR
// end ; end ;
63782: GO 63533
63784: POP
63785: POP
// end ;
63786: GO 63451
63788: POP
63789: POP
// end ;
63790: PPOPN 4
63792: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
63793: LD_INT 0
63795: PPUSH
63796: PPUSH
// result := false ;
63797: LD_ADDR_VAR 0 4
63801: PUSH
63802: LD_INT 0
63804: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63805: LD_VAR 0 1
63809: PPUSH
63810: CALL_OW 264
63814: PUSH
63815: LD_INT 81
63817: EQUAL
63818: NOT
63819: IFFALSE 63823
// exit ;
63821: GO 64063
// index := GetElementIndex ( minersList , unit ) ;
63823: LD_ADDR_VAR 0 5
63827: PUSH
63828: LD_EXP 82
63832: PPUSH
63833: LD_VAR 0 1
63837: PPUSH
63838: CALL 6062 0 2
63842: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63843: LD_EXP 83
63847: PUSH
63848: LD_VAR 0 5
63852: ARRAY
63853: PUSH
63854: LD_EXP 84
63858: GREATEREQUAL
63859: IFFALSE 63863
// exit ;
63861: GO 64063
// ComMoveXY ( unit , x , y ) ;
63863: LD_VAR 0 1
63867: PPUSH
63868: LD_VAR 0 2
63872: PPUSH
63873: LD_VAR 0 3
63877: PPUSH
63878: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63882: LD_INT 35
63884: PPUSH
63885: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63889: LD_VAR 0 1
63893: PPUSH
63894: LD_VAR 0 2
63898: PPUSH
63899: LD_VAR 0 3
63903: PPUSH
63904: CALL 37389 0 3
63908: NOT
63909: PUSH
63910: LD_VAR 0 1
63914: PPUSH
63915: CALL_OW 314
63919: AND
63920: IFFALSE 63924
// exit ;
63922: GO 64063
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63924: LD_VAR 0 2
63928: PPUSH
63929: LD_VAR 0 3
63933: PPUSH
63934: CALL_OW 428
63938: PUSH
63939: LD_VAR 0 1
63943: EQUAL
63944: PUSH
63945: LD_VAR 0 1
63949: PPUSH
63950: CALL_OW 314
63954: NOT
63955: AND
63956: IFFALSE 63882
// PlaySoundXY ( x , y , PlantMine ) ;
63958: LD_VAR 0 2
63962: PPUSH
63963: LD_VAR 0 3
63967: PPUSH
63968: LD_STRING PlantMine
63970: PPUSH
63971: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
63975: LD_VAR 0 2
63979: PPUSH
63980: LD_VAR 0 3
63984: PPUSH
63985: LD_VAR 0 1
63989: PPUSH
63990: CALL_OW 255
63994: PPUSH
63995: LD_INT 0
63997: PPUSH
63998: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
64002: LD_ADDR_EXP 83
64006: PUSH
64007: LD_EXP 83
64011: PPUSH
64012: LD_VAR 0 5
64016: PUSH
64017: LD_EXP 83
64021: PUSH
64022: LD_VAR 0 5
64026: ARRAY
64027: PUSH
64028: LD_INT 1
64030: PLUS
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PPUSH
64036: LD_VAR 0 2
64040: PUSH
64041: LD_VAR 0 3
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PPUSH
64050: CALL 6277 0 3
64054: ST_TO_ADDR
// result := true ;
64055: LD_ADDR_VAR 0 4
64059: PUSH
64060: LD_INT 1
64062: ST_TO_ADDR
// end ;
64063: LD_VAR 0 4
64067: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
64068: LD_INT 0
64070: PPUSH
64071: PPUSH
64072: PPUSH
// if not unit in minersList then
64073: LD_VAR 0 1
64077: PUSH
64078: LD_EXP 82
64082: IN
64083: NOT
64084: IFFALSE 64088
// exit ;
64086: GO 64480
// index := GetElementIndex ( minersList , unit ) ;
64088: LD_ADDR_VAR 0 6
64092: PUSH
64093: LD_EXP 82
64097: PPUSH
64098: LD_VAR 0 1
64102: PPUSH
64103: CALL 6062 0 2
64107: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
64108: LD_ADDR_VAR 0 5
64112: PUSH
64113: DOUBLE
64114: LD_EXP 83
64118: PUSH
64119: LD_VAR 0 6
64123: ARRAY
64124: INC
64125: ST_TO_ADDR
64126: LD_INT 1
64128: PUSH
64129: FOR_DOWNTO
64130: IFFALSE 64291
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
64132: LD_EXP 83
64136: PUSH
64137: LD_VAR 0 6
64141: ARRAY
64142: PUSH
64143: LD_VAR 0 5
64147: ARRAY
64148: PUSH
64149: LD_INT 1
64151: ARRAY
64152: PUSH
64153: LD_VAR 0 2
64157: EQUAL
64158: PUSH
64159: LD_EXP 83
64163: PUSH
64164: LD_VAR 0 6
64168: ARRAY
64169: PUSH
64170: LD_VAR 0 5
64174: ARRAY
64175: PUSH
64176: LD_INT 2
64178: ARRAY
64179: PUSH
64180: LD_VAR 0 3
64184: EQUAL
64185: AND
64186: IFFALSE 64289
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64188: LD_EXP 83
64192: PUSH
64193: LD_VAR 0 6
64197: ARRAY
64198: PUSH
64199: LD_VAR 0 5
64203: ARRAY
64204: PUSH
64205: LD_INT 1
64207: ARRAY
64208: PPUSH
64209: LD_EXP 83
64213: PUSH
64214: LD_VAR 0 6
64218: ARRAY
64219: PUSH
64220: LD_VAR 0 5
64224: ARRAY
64225: PUSH
64226: LD_INT 2
64228: ARRAY
64229: PPUSH
64230: LD_VAR 0 1
64234: PPUSH
64235: CALL_OW 255
64239: PPUSH
64240: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64244: LD_ADDR_EXP 83
64248: PUSH
64249: LD_EXP 83
64253: PPUSH
64254: LD_VAR 0 6
64258: PPUSH
64259: LD_EXP 83
64263: PUSH
64264: LD_VAR 0 6
64268: ARRAY
64269: PPUSH
64270: LD_VAR 0 5
64274: PPUSH
64275: CALL_OW 3
64279: PPUSH
64280: CALL_OW 1
64284: ST_TO_ADDR
// exit ;
64285: POP
64286: POP
64287: GO 64480
// end ; end ;
64289: GO 64129
64291: POP
64292: POP
// for i := minerMinesList [ index ] downto 1 do
64293: LD_ADDR_VAR 0 5
64297: PUSH
64298: DOUBLE
64299: LD_EXP 83
64303: PUSH
64304: LD_VAR 0 6
64308: ARRAY
64309: INC
64310: ST_TO_ADDR
64311: LD_INT 1
64313: PUSH
64314: FOR_DOWNTO
64315: IFFALSE 64478
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64317: LD_EXP 83
64321: PUSH
64322: LD_VAR 0 6
64326: ARRAY
64327: PUSH
64328: LD_VAR 0 5
64332: ARRAY
64333: PUSH
64334: LD_INT 1
64336: ARRAY
64337: PPUSH
64338: LD_EXP 83
64342: PUSH
64343: LD_VAR 0 6
64347: ARRAY
64348: PUSH
64349: LD_VAR 0 5
64353: ARRAY
64354: PUSH
64355: LD_INT 2
64357: ARRAY
64358: PPUSH
64359: LD_VAR 0 2
64363: PPUSH
64364: LD_VAR 0 3
64368: PPUSH
64369: CALL_OW 298
64373: PUSH
64374: LD_INT 6
64376: LESS
64377: IFFALSE 64476
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64379: LD_EXP 83
64383: PUSH
64384: LD_VAR 0 6
64388: ARRAY
64389: PUSH
64390: LD_VAR 0 5
64394: ARRAY
64395: PUSH
64396: LD_INT 1
64398: ARRAY
64399: PPUSH
64400: LD_EXP 83
64404: PUSH
64405: LD_VAR 0 6
64409: ARRAY
64410: PUSH
64411: LD_VAR 0 5
64415: ARRAY
64416: PUSH
64417: LD_INT 2
64419: ARRAY
64420: PPUSH
64421: LD_VAR 0 1
64425: PPUSH
64426: CALL_OW 255
64430: PPUSH
64431: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64435: LD_ADDR_EXP 83
64439: PUSH
64440: LD_EXP 83
64444: PPUSH
64445: LD_VAR 0 6
64449: PPUSH
64450: LD_EXP 83
64454: PUSH
64455: LD_VAR 0 6
64459: ARRAY
64460: PPUSH
64461: LD_VAR 0 5
64465: PPUSH
64466: CALL_OW 3
64470: PPUSH
64471: CALL_OW 1
64475: ST_TO_ADDR
// end ; end ;
64476: GO 64314
64478: POP
64479: POP
// end ;
64480: LD_VAR 0 4
64484: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64485: LD_INT 0
64487: PPUSH
64488: PPUSH
64489: PPUSH
64490: PPUSH
64491: PPUSH
64492: PPUSH
64493: PPUSH
64494: PPUSH
64495: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64496: LD_VAR 0 1
64500: PPUSH
64501: CALL_OW 264
64505: PUSH
64506: LD_INT 81
64508: EQUAL
64509: NOT
64510: PUSH
64511: LD_VAR 0 1
64515: PUSH
64516: LD_EXP 82
64520: IN
64521: NOT
64522: OR
64523: IFFALSE 64527
// exit ;
64525: GO 64849
// index := GetElementIndex ( minersList , unit ) ;
64527: LD_ADDR_VAR 0 6
64531: PUSH
64532: LD_EXP 82
64536: PPUSH
64537: LD_VAR 0 1
64541: PPUSH
64542: CALL 6062 0 2
64546: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64547: LD_ADDR_VAR 0 8
64551: PUSH
64552: LD_EXP 84
64556: PUSH
64557: LD_EXP 83
64561: PUSH
64562: LD_VAR 0 6
64566: ARRAY
64567: MINUS
64568: ST_TO_ADDR
// if not minesFreeAmount then
64569: LD_VAR 0 8
64573: NOT
64574: IFFALSE 64578
// exit ;
64576: GO 64849
// tmp := [ ] ;
64578: LD_ADDR_VAR 0 7
64582: PUSH
64583: EMPTY
64584: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64585: LD_ADDR_VAR 0 5
64589: PUSH
64590: DOUBLE
64591: LD_INT 1
64593: DEC
64594: ST_TO_ADDR
64595: LD_VAR 0 8
64599: PUSH
64600: FOR_TO
64601: IFFALSE 64796
// begin _d := rand ( 0 , 5 ) ;
64603: LD_ADDR_VAR 0 11
64607: PUSH
64608: LD_INT 0
64610: PPUSH
64611: LD_INT 5
64613: PPUSH
64614: CALL_OW 12
64618: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64619: LD_ADDR_VAR 0 12
64623: PUSH
64624: LD_INT 2
64626: PPUSH
64627: LD_INT 6
64629: PPUSH
64630: CALL_OW 12
64634: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64635: LD_ADDR_VAR 0 9
64639: PUSH
64640: LD_VAR 0 2
64644: PPUSH
64645: LD_VAR 0 11
64649: PPUSH
64650: LD_VAR 0 12
64654: PPUSH
64655: CALL_OW 272
64659: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64660: LD_ADDR_VAR 0 10
64664: PUSH
64665: LD_VAR 0 3
64669: PPUSH
64670: LD_VAR 0 11
64674: PPUSH
64675: LD_VAR 0 12
64679: PPUSH
64680: CALL_OW 273
64684: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64685: LD_VAR 0 9
64689: PPUSH
64690: LD_VAR 0 10
64694: PPUSH
64695: CALL_OW 488
64699: PUSH
64700: LD_VAR 0 9
64704: PUSH
64705: LD_VAR 0 10
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_VAR 0 7
64718: IN
64719: NOT
64720: AND
64721: PUSH
64722: LD_VAR 0 9
64726: PPUSH
64727: LD_VAR 0 10
64731: PPUSH
64732: CALL_OW 458
64736: NOT
64737: AND
64738: IFFALSE 64780
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64740: LD_ADDR_VAR 0 7
64744: PUSH
64745: LD_VAR 0 7
64749: PPUSH
64750: LD_VAR 0 7
64754: PUSH
64755: LD_INT 1
64757: PLUS
64758: PPUSH
64759: LD_VAR 0 9
64763: PUSH
64764: LD_VAR 0 10
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PPUSH
64773: CALL_OW 1
64777: ST_TO_ADDR
64778: GO 64794
// i := i - 1 ;
64780: LD_ADDR_VAR 0 5
64784: PUSH
64785: LD_VAR 0 5
64789: PUSH
64790: LD_INT 1
64792: MINUS
64793: ST_TO_ADDR
// end ;
64794: GO 64600
64796: POP
64797: POP
// for i in tmp do
64798: LD_ADDR_VAR 0 5
64802: PUSH
64803: LD_VAR 0 7
64807: PUSH
64808: FOR_IN
64809: IFFALSE 64847
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64811: LD_VAR 0 1
64815: PPUSH
64816: LD_VAR 0 5
64820: PUSH
64821: LD_INT 1
64823: ARRAY
64824: PPUSH
64825: LD_VAR 0 5
64829: PUSH
64830: LD_INT 2
64832: ARRAY
64833: PPUSH
64834: CALL 63793 0 3
64838: NOT
64839: IFFALSE 64845
// exit ;
64841: POP
64842: POP
64843: GO 64849
64845: GO 64808
64847: POP
64848: POP
// end ;
64849: LD_VAR 0 4
64853: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
64854: LD_INT 0
64856: PPUSH
64857: PPUSH
64858: PPUSH
64859: PPUSH
64860: PPUSH
64861: PPUSH
64862: PPUSH
// if not GetClass ( unit ) = class_sniper then
64863: LD_VAR 0 1
64867: PPUSH
64868: CALL_OW 257
64872: PUSH
64873: LD_INT 5
64875: EQUAL
64876: NOT
64877: IFFALSE 64881
// exit ;
64879: GO 65269
// dist := 8 ;
64881: LD_ADDR_VAR 0 5
64885: PUSH
64886: LD_INT 8
64888: ST_TO_ADDR
// viewRange := 12 ;
64889: LD_ADDR_VAR 0 7
64893: PUSH
64894: LD_INT 12
64896: ST_TO_ADDR
// side := GetSide ( unit ) ;
64897: LD_ADDR_VAR 0 6
64901: PUSH
64902: LD_VAR 0 1
64906: PPUSH
64907: CALL_OW 255
64911: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64912: LD_INT 61
64914: PPUSH
64915: LD_VAR 0 6
64919: PPUSH
64920: CALL_OW 321
64924: PUSH
64925: LD_INT 2
64927: EQUAL
64928: IFFALSE 64938
// viewRange := 16 ;
64930: LD_ADDR_VAR 0 7
64934: PUSH
64935: LD_INT 16
64937: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64938: LD_VAR 0 1
64942: PPUSH
64943: LD_VAR 0 2
64947: PPUSH
64948: LD_VAR 0 3
64952: PPUSH
64953: CALL_OW 297
64957: PUSH
64958: LD_VAR 0 5
64962: GREATER
64963: IFFALSE 65042
// begin ComMoveXY ( unit , x , y ) ;
64965: LD_VAR 0 1
64969: PPUSH
64970: LD_VAR 0 2
64974: PPUSH
64975: LD_VAR 0 3
64979: PPUSH
64980: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64984: LD_INT 35
64986: PPUSH
64987: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64991: LD_VAR 0 1
64995: PPUSH
64996: LD_VAR 0 2
65000: PPUSH
65001: LD_VAR 0 3
65005: PPUSH
65006: CALL 37389 0 3
65010: NOT
65011: IFFALSE 65015
// exit ;
65013: GO 65269
// until GetDistUnitXY ( unit , x , y ) < dist ;
65015: LD_VAR 0 1
65019: PPUSH
65020: LD_VAR 0 2
65024: PPUSH
65025: LD_VAR 0 3
65029: PPUSH
65030: CALL_OW 297
65034: PUSH
65035: LD_VAR 0 5
65039: LESS
65040: IFFALSE 64984
// end ; ComTurnXY ( unit , x , y ) ;
65042: LD_VAR 0 1
65046: PPUSH
65047: LD_VAR 0 2
65051: PPUSH
65052: LD_VAR 0 3
65056: PPUSH
65057: CALL_OW 118
// wait ( 5 ) ;
65061: LD_INT 5
65063: PPUSH
65064: CALL_OW 67
// _d := GetDir ( unit ) ;
65068: LD_ADDR_VAR 0 10
65072: PUSH
65073: LD_VAR 0 1
65077: PPUSH
65078: CALL_OW 254
65082: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
65083: LD_ADDR_VAR 0 8
65087: PUSH
65088: LD_VAR 0 1
65092: PPUSH
65093: CALL_OW 250
65097: PPUSH
65098: LD_VAR 0 10
65102: PPUSH
65103: LD_VAR 0 5
65107: PPUSH
65108: CALL_OW 272
65112: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
65113: LD_ADDR_VAR 0 9
65117: PUSH
65118: LD_VAR 0 1
65122: PPUSH
65123: CALL_OW 251
65127: PPUSH
65128: LD_VAR 0 10
65132: PPUSH
65133: LD_VAR 0 5
65137: PPUSH
65138: CALL_OW 273
65142: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65143: LD_VAR 0 8
65147: PPUSH
65148: LD_VAR 0 9
65152: PPUSH
65153: CALL_OW 488
65157: NOT
65158: IFFALSE 65162
// exit ;
65160: GO 65269
// ComAnimCustom ( unit , 1 ) ;
65162: LD_VAR 0 1
65166: PPUSH
65167: LD_INT 1
65169: PPUSH
65170: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
65174: LD_VAR 0 8
65178: PPUSH
65179: LD_VAR 0 9
65183: PPUSH
65184: LD_VAR 0 6
65188: PPUSH
65189: LD_VAR 0 7
65193: PPUSH
65194: CALL_OW 330
// repeat wait ( 1 ) ;
65198: LD_INT 1
65200: PPUSH
65201: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
65205: LD_VAR 0 1
65209: PPUSH
65210: CALL_OW 316
65214: PUSH
65215: LD_VAR 0 1
65219: PPUSH
65220: CALL_OW 314
65224: OR
65225: PUSH
65226: LD_VAR 0 1
65230: PPUSH
65231: CALL_OW 302
65235: NOT
65236: OR
65237: PUSH
65238: LD_VAR 0 1
65242: PPUSH
65243: CALL_OW 301
65247: OR
65248: IFFALSE 65198
// RemoveSeeing ( _x , _y , side ) ;
65250: LD_VAR 0 8
65254: PPUSH
65255: LD_VAR 0 9
65259: PPUSH
65260: LD_VAR 0 6
65264: PPUSH
65265: CALL_OW 331
// end ; end_of_file
65269: LD_VAR 0 4
65273: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65274: LD_VAR 0 1
65278: PUSH
65279: LD_INT 200
65281: DOUBLE
65282: GREATEREQUAL
65283: IFFALSE 65291
65285: LD_INT 299
65287: DOUBLE
65288: LESSEQUAL
65289: IFTRUE 65293
65291: GO 65325
65293: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65294: LD_VAR 0 1
65298: PPUSH
65299: LD_VAR 0 2
65303: PPUSH
65304: LD_VAR 0 3
65308: PPUSH
65309: LD_VAR 0 4
65313: PPUSH
65314: LD_VAR 0 5
65318: PPUSH
65319: CALL 61361 0 5
65323: GO 65402
65325: LD_INT 300
65327: DOUBLE
65328: GREATEREQUAL
65329: IFFALSE 65337
65331: LD_INT 399
65333: DOUBLE
65334: LESSEQUAL
65335: IFTRUE 65339
65337: GO 65401
65339: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65340: LD_VAR 0 1
65344: PPUSH
65345: LD_VAR 0 2
65349: PPUSH
65350: LD_VAR 0 3
65354: PPUSH
65355: LD_VAR 0 4
65359: PPUSH
65360: LD_VAR 0 5
65364: PPUSH
65365: LD_VAR 0 6
65369: PPUSH
65370: LD_VAR 0 7
65374: PPUSH
65375: LD_VAR 0 8
65379: PPUSH
65380: LD_VAR 0 9
65384: PPUSH
65385: LD_VAR 0 10
65389: PPUSH
65390: LD_VAR 0 11
65394: PPUSH
65395: CALL 57694 0 11
65399: GO 65402
65401: POP
// end ;
65402: PPOPN 11
65404: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65405: LD_VAR 0 1
65409: PPUSH
65410: LD_VAR 0 2
65414: PPUSH
65415: LD_VAR 0 3
65419: PPUSH
65420: LD_VAR 0 4
65424: PPUSH
65425: LD_VAR 0 5
65429: PPUSH
65430: CALL 61097 0 5
// end ;
65434: PPOPN 5
65436: END
