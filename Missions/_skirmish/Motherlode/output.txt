// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 116 0 0
// PrepareNature ( 4 , 4 , 12 , 4 , 4 , 1 , 4 , natArea , watArea ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 12
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 4
  22: PPUSH
  23: LD_INT 1
  25: PPUSH
  26: LD_INT 4
  28: PPUSH
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: CALL 34642 0 9
// if gameType = 1 then
  39: LD_EXP 2
  43: PUSH
  44: LD_INT 1
  46: EQUAL
  47: IFFALSE 111
// InitEcoMode ( [ 189 , 97 ] , [ [ 215 , 93 ] , [ 204 , 126 ] ] , [ attacksArea1 , attacksArea2 , attacksArea3 , attacksArea4 , attacksArea5 ] ) else
  49: LD_INT 189
  51: PUSH
  52: LD_INT 97
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: PPUSH
  59: LD_INT 215
  61: PUSH
  62: LD_INT 93
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: PUSH
  69: LD_INT 204
  71: PUSH
  72: LD_INT 126
  74: PUSH
  75: EMPTY
  76: LIST
  77: LIST
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PPUSH
  83: LD_INT 2
  85: PUSH
  86: LD_INT 3
  88: PUSH
  89: LD_INT 4
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 6
  97: PUSH
  98: EMPTY
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: PPUSH
 105: CALL 40153 0 3
 109: GO 115
// InitDefendMode ( ) ;
 111: CALL 165 0 0
// end ;
 115: END
// export debug , gameType ; function Init ; begin
 116: LD_INT 0
 118: PPUSH
// debug := false ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// if debug then
 127: LD_EXP 1
 131: IFFALSE 143
// gameType := 1 else
 133: LD_ADDR_EXP 2
 137: PUSH
 138: LD_INT 1
 140: ST_TO_ADDR
 141: GO 160
// gameType := GetMultiplayerSetting ( 50 ) + 1 ;
 143: LD_ADDR_EXP 2
 147: PUSH
 148: LD_INT 50
 150: PPUSH
 151: CALL_OW 426
 155: PUSH
 156: LD_INT 1
 158: PLUS
 159: ST_TO_ADDR
// end ; end_of_file
 160: LD_VAR 0 1
 164: RET
// export function InitDefendMode ( ) ; var buildingsList ; begin
 165: LD_INT 0
 167: PPUSH
 168: PPUSH
// buildingsList := [ [ 91 , 182 , 59 , 3 , 0 , 0 , 45 ] , [ 90 , 185 , 60 , 3 , 0 , 0 , 46 ] , [ 90 , 188 , 62 , 3 , 0 , 0 , 43 ] , [ 73 , 178 , 64 , 2 , 0 , 0 , 0 ] , [ 75 , 182 , 65 , 3 , 0 , 0 , 0 ] , [ 76 , 179 , 68 , 1 , 0 , 0 , 0 ] , [ 69 , 182 , 68 , 2 , 0 , 0 , 0 ] , [ 71 , 186 , 68 , 4 , 0 , 0 , 0 ] , [ 72 , 182 , 72 , 0 , 0 , 0 , 0 ] , [ 91 , 169 , 73 , 1 , 0 , 0 , 46 ] , [ 67 , 209 , 79 , 4 , 0 , 0 , 0 ] , [ 88 , 204 , 87 , 3 , 0 , 0 , 0 ] , [ 91 , 169 , 88 , 1 , 0 , 0 , 43 ] , [ 91 , 169 , 91 , 1 , 0 , 0 , 45 ] , [ 86 , 192 , 92 , 4 , 0 , 0 , 0 ] , [ 88 , 207 , 93 , 2 , 0 , 0 , 0 ] , [ 65 , 194 , 96 , 4 , 0 , 0 , 0 ] , [ 90 , 224 , 96 , 4 , 0 , 0 , 45 ] , [ 86 , 196 , 100 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 100 , 4 , 0 , 0 , 46 ] , [ 88 , 211 , 101 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 103 , 4 , 0 , 0 , 45 ] , [ 67 , 172 , 105 , 1 , 0 , 0 , 0 ] , [ 86 , 185 , 105 , 0 , 0 , 0 , 0 ] , [ 86 , 188 , 107 , 5 , 0 , 0 , 0 ] , [ 86 , 186 , 108 , 3 , 0 , 0 , 0 ] , [ 91 , 172 , 109 , 1 , 0 , 0 , 45 ] , [ 90 , 227 , 119 , 5 , 0 , 0 , 46 ] , [ 91 , 225 , 120 , 5 , 0 , 0 , 45 ] , [ 67 , 226 , 135 , 5 , 0 , 0 , 0 ] ] ;
 169: LD_ADDR_VAR 0 2
 173: PUSH
 174: LD_INT 91
 176: PUSH
 177: LD_INT 182
 179: PUSH
 180: LD_INT 59
 182: PUSH
 183: LD_INT 3
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 45
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 90
 206: PUSH
 207: LD_INT 185
 209: PUSH
 210: LD_INT 60
 212: PUSH
 213: LD_INT 3
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 46
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: PUSH
 234: LD_INT 90
 236: PUSH
 237: LD_INT 188
 239: PUSH
 240: LD_INT 62
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 0
 251: PUSH
 252: LD_INT 43
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 73
 266: PUSH
 267: LD_INT 178
 269: PUSH
 270: LD_INT 64
 272: PUSH
 273: LD_INT 2
 275: PUSH
 276: LD_INT 0
 278: PUSH
 279: LD_INT 0
 281: PUSH
 282: LD_INT 0
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 75
 296: PUSH
 297: LD_INT 182
 299: PUSH
 300: LD_INT 65
 302: PUSH
 303: LD_INT 3
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: LD_INT 0
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: PUSH
 324: LD_INT 76
 326: PUSH
 327: LD_INT 179
 329: PUSH
 330: LD_INT 68
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 0
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 69
 356: PUSH
 357: LD_INT 182
 359: PUSH
 360: LD_INT 68
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 71
 386: PUSH
 387: LD_INT 186
 389: PUSH
 390: LD_INT 68
 392: PUSH
 393: LD_INT 4
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: LD_INT 72
 416: PUSH
 417: LD_INT 182
 419: PUSH
 420: LD_INT 72
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: LD_INT 0
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: PUSH
 444: LD_INT 91
 446: PUSH
 447: LD_INT 169
 449: PUSH
 450: LD_INT 73
 452: PUSH
 453: LD_INT 1
 455: PUSH
 456: LD_INT 0
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 46
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 67
 476: PUSH
 477: LD_INT 209
 479: PUSH
 480: LD_INT 79
 482: PUSH
 483: LD_INT 4
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 88
 506: PUSH
 507: LD_INT 204
 509: PUSH
 510: LD_INT 87
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: LD_INT 0
 518: PUSH
 519: LD_INT 0
 521: PUSH
 522: LD_INT 0
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 91
 536: PUSH
 537: LD_INT 169
 539: PUSH
 540: LD_INT 88
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 0
 551: PUSH
 552: LD_INT 43
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 91
 566: PUSH
 567: LD_INT 169
 569: PUSH
 570: LD_INT 91
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 0
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: LD_INT 45
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 86
 596: PUSH
 597: LD_INT 192
 599: PUSH
 600: LD_INT 92
 602: PUSH
 603: LD_INT 4
 605: PUSH
 606: LD_INT 0
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: LD_INT 0
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_INT 88
 626: PUSH
 627: LD_INT 207
 629: PUSH
 630: LD_INT 93
 632: PUSH
 633: LD_INT 2
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 65
 656: PUSH
 657: LD_INT 194
 659: PUSH
 660: LD_INT 96
 662: PUSH
 663: LD_INT 4
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 90
 686: PUSH
 687: LD_INT 224
 689: PUSH
 690: LD_INT 96
 692: PUSH
 693: LD_INT 4
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 45
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: PUSH
 714: LD_INT 86
 716: PUSH
 717: LD_INT 196
 719: PUSH
 720: LD_INT 100
 722: PUSH
 723: LD_INT 4
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 91
 746: PUSH
 747: LD_INT 228
 749: PUSH
 750: LD_INT 100
 752: PUSH
 753: LD_INT 4
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: LD_INT 0
 761: PUSH
 762: LD_INT 46
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 88
 776: PUSH
 777: LD_INT 211
 779: PUSH
 780: LD_INT 101
 782: PUSH
 783: LD_INT 4
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 0
 791: PUSH
 792: LD_INT 0
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 91
 806: PUSH
 807: LD_INT 228
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 4
 815: PUSH
 816: LD_INT 0
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 45
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 67
 836: PUSH
 837: LD_INT 172
 839: PUSH
 840: LD_INT 105
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 0
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 86
 866: PUSH
 867: LD_INT 185
 869: PUSH
 870: LD_INT 105
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: LD_INT 0
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 86
 896: PUSH
 897: LD_INT 188
 899: PUSH
 900: LD_INT 107
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: LD_INT 0
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 86
 926: PUSH
 927: LD_INT 186
 929: PUSH
 930: LD_INT 108
 932: PUSH
 933: LD_INT 3
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 91
 956: PUSH
 957: LD_INT 172
 959: PUSH
 960: LD_INT 109
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 0
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 45
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 227
 989: PUSH
 990: LD_INT 119
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 0
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 46
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 91
1016: PUSH
1017: LD_INT 225
1019: PUSH
1020: LD_INT 120
1022: PUSH
1023: LD_INT 5
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: LD_INT 45
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_INT 67
1046: PUSH
1047: LD_INT 226
1049: PUSH
1050: LD_INT 135
1052: PUSH
1053: LD_INT 5
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: ST_TO_ADDR
// end ; end_of_file
1106: LD_VAR 0 1
1110: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
1111: LD_INT 0
1113: PPUSH
// ar_miner := 81 ;
1114: LD_ADDR_EXP 10
1118: PUSH
1119: LD_INT 81
1121: ST_TO_ADDR
// ar_crane := 88 ;
1122: LD_ADDR_EXP 9
1126: PUSH
1127: LD_INT 88
1129: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
1130: LD_ADDR_EXP 4
1134: PUSH
1135: LD_INT 89
1137: ST_TO_ADDR
// us_hack := 99 ;
1138: LD_ADDR_EXP 5
1142: PUSH
1143: LD_INT 99
1145: ST_TO_ADDR
// us_artillery := 97 ;
1146: LD_ADDR_EXP 6
1150: PUSH
1151: LD_INT 97
1153: ST_TO_ADDR
// ar_bio_bomb := 91 ;
1154: LD_ADDR_EXP 7
1158: PUSH
1159: LD_INT 91
1161: ST_TO_ADDR
// ar_mortar := 92 ;
1162: LD_ADDR_EXP 8
1166: PUSH
1167: LD_INT 92
1169: ST_TO_ADDR
// ru_radar := 98 ;
1170: LD_ADDR_EXP 3
1174: PUSH
1175: LD_INT 98
1177: ST_TO_ADDR
// tech_Artillery := 80 ;
1178: LD_ADDR_EXP 11
1182: PUSH
1183: LD_INT 80
1185: ST_TO_ADDR
// tech_RadMat := 81 ;
1186: LD_ADDR_EXP 12
1190: PUSH
1191: LD_INT 81
1193: ST_TO_ADDR
// tech_BasicTools := 82 ;
1194: LD_ADDR_EXP 13
1198: PUSH
1199: LD_INT 82
1201: ST_TO_ADDR
// tech_Cargo := 83 ;
1202: LD_ADDR_EXP 14
1206: PUSH
1207: LD_INT 83
1209: ST_TO_ADDR
// tech_Track := 84 ;
1210: LD_ADDR_EXP 15
1214: PUSH
1215: LD_INT 84
1217: ST_TO_ADDR
// tech_Crane := 85 ;
1218: LD_ADDR_EXP 16
1222: PUSH
1223: LD_INT 85
1225: ST_TO_ADDR
// tech_Bulldozer := 86 ;
1226: LD_ADDR_EXP 17
1230: PUSH
1231: LD_INT 86
1233: ST_TO_ADDR
// tech_Hovercraft := 87 ;
1234: LD_ADDR_EXP 18
1238: PUSH
1239: LD_INT 87
1241: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
1242: LD_ADDR_EXP 19
1246: PUSH
1247: LD_INT 88
1249: ST_TO_ADDR
// class_mastodont := 31 ;
1250: LD_ADDR_EXP 20
1254: PUSH
1255: LD_INT 31
1257: ST_TO_ADDR
// class_horse := 21 ;
1258: LD_ADDR_EXP 21
1262: PUSH
1263: LD_INT 21
1265: ST_TO_ADDR
// end ;
1266: LD_VAR 0 1
1270: RET
// every 1 do
1271: GO 1273
1273: DISABLE
// InitGlobalVariables ; end_of_file
1274: CALL 1111 0 0
1278: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1279: LD_INT 0
1281: PPUSH
1282: PPUSH
// if exist_mode then
1283: LD_VAR 0 2
1287: IFFALSE 1312
// unit := CreateCharacter ( prefix & ident ) else
1289: LD_ADDR_VAR 0 5
1293: PUSH
1294: LD_VAR 0 3
1298: PUSH
1299: LD_VAR 0 1
1303: STR
1304: PPUSH
1305: CALL_OW 34
1309: ST_TO_ADDR
1310: GO 1327
// unit := NewCharacter ( ident ) ;
1312: LD_ADDR_VAR 0 5
1316: PUSH
1317: LD_VAR 0 1
1321: PPUSH
1322: CALL_OW 25
1326: ST_TO_ADDR
// result := unit ;
1327: LD_ADDR_VAR 0 4
1331: PUSH
1332: LD_VAR 0 5
1336: ST_TO_ADDR
// end ;
1337: LD_VAR 0 4
1341: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1342: LD_INT 0
1344: PPUSH
1345: PPUSH
// if not side or not nation then
1346: LD_VAR 0 1
1350: NOT
1351: PUSH
1352: LD_VAR 0 2
1356: NOT
1357: OR
1358: IFFALSE 1362
// exit ;
1360: GO 2130
// case nation of nation_american :
1362: LD_VAR 0 2
1366: PUSH
1367: LD_INT 1
1369: DOUBLE
1370: EQUAL
1371: IFTRUE 1375
1373: GO 1589
1375: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1376: LD_ADDR_VAR 0 4
1380: PUSH
1381: LD_INT 35
1383: PUSH
1384: LD_INT 45
1386: PUSH
1387: LD_INT 46
1389: PUSH
1390: LD_INT 47
1392: PUSH
1393: LD_INT 82
1395: PUSH
1396: LD_INT 83
1398: PUSH
1399: LD_INT 84
1401: PUSH
1402: LD_INT 85
1404: PUSH
1405: LD_INT 86
1407: PUSH
1408: LD_INT 1
1410: PUSH
1411: LD_INT 2
1413: PUSH
1414: LD_INT 6
1416: PUSH
1417: LD_INT 15
1419: PUSH
1420: LD_INT 16
1422: PUSH
1423: LD_INT 7
1425: PUSH
1426: LD_INT 12
1428: PUSH
1429: LD_INT 13
1431: PUSH
1432: LD_INT 10
1434: PUSH
1435: LD_INT 14
1437: PUSH
1438: LD_INT 20
1440: PUSH
1441: LD_INT 21
1443: PUSH
1444: LD_INT 22
1446: PUSH
1447: LD_INT 25
1449: PUSH
1450: LD_INT 32
1452: PUSH
1453: LD_INT 27
1455: PUSH
1456: LD_INT 36
1458: PUSH
1459: LD_INT 69
1461: PUSH
1462: LD_INT 39
1464: PUSH
1465: LD_INT 34
1467: PUSH
1468: LD_INT 40
1470: PUSH
1471: LD_INT 48
1473: PUSH
1474: LD_INT 49
1476: PUSH
1477: LD_INT 50
1479: PUSH
1480: LD_INT 51
1482: PUSH
1483: LD_INT 52
1485: PUSH
1486: LD_INT 53
1488: PUSH
1489: LD_INT 54
1491: PUSH
1492: LD_INT 55
1494: PUSH
1495: LD_INT 56
1497: PUSH
1498: LD_INT 57
1500: PUSH
1501: LD_INT 58
1503: PUSH
1504: LD_INT 59
1506: PUSH
1507: LD_INT 60
1509: PUSH
1510: LD_INT 61
1512: PUSH
1513: LD_INT 62
1515: PUSH
1516: LD_INT 80
1518: PUSH
1519: LD_INT 82
1521: PUSH
1522: LD_INT 83
1524: PUSH
1525: LD_INT 84
1527: PUSH
1528: LD_INT 85
1530: PUSH
1531: LD_INT 86
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: ST_TO_ADDR
1587: GO 2054
1589: LD_INT 2
1591: DOUBLE
1592: EQUAL
1593: IFTRUE 1597
1595: GO 1823
1597: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1598: LD_ADDR_VAR 0 4
1602: PUSH
1603: LD_INT 35
1605: PUSH
1606: LD_INT 45
1608: PUSH
1609: LD_INT 46
1611: PUSH
1612: LD_INT 47
1614: PUSH
1615: LD_INT 82
1617: PUSH
1618: LD_INT 83
1620: PUSH
1621: LD_INT 84
1623: PUSH
1624: LD_INT 85
1626: PUSH
1627: LD_INT 87
1629: PUSH
1630: LD_INT 70
1632: PUSH
1633: LD_INT 1
1635: PUSH
1636: LD_INT 11
1638: PUSH
1639: LD_INT 3
1641: PUSH
1642: LD_INT 4
1644: PUSH
1645: LD_INT 5
1647: PUSH
1648: LD_INT 6
1650: PUSH
1651: LD_INT 15
1653: PUSH
1654: LD_INT 18
1656: PUSH
1657: LD_INT 7
1659: PUSH
1660: LD_INT 17
1662: PUSH
1663: LD_INT 8
1665: PUSH
1666: LD_INT 20
1668: PUSH
1669: LD_INT 21
1671: PUSH
1672: LD_INT 22
1674: PUSH
1675: LD_INT 72
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 69
1683: PUSH
1684: LD_INT 39
1686: PUSH
1687: LD_INT 40
1689: PUSH
1690: LD_INT 41
1692: PUSH
1693: LD_INT 42
1695: PUSH
1696: LD_INT 43
1698: PUSH
1699: LD_INT 48
1701: PUSH
1702: LD_INT 49
1704: PUSH
1705: LD_INT 50
1707: PUSH
1708: LD_INT 51
1710: PUSH
1711: LD_INT 52
1713: PUSH
1714: LD_INT 53
1716: PUSH
1717: LD_INT 54
1719: PUSH
1720: LD_INT 55
1722: PUSH
1723: LD_INT 56
1725: PUSH
1726: LD_INT 60
1728: PUSH
1729: LD_INT 61
1731: PUSH
1732: LD_INT 62
1734: PUSH
1735: LD_INT 66
1737: PUSH
1738: LD_INT 67
1740: PUSH
1741: LD_INT 68
1743: PUSH
1744: LD_INT 81
1746: PUSH
1747: LD_INT 82
1749: PUSH
1750: LD_INT 83
1752: PUSH
1753: LD_INT 84
1755: PUSH
1756: LD_INT 85
1758: PUSH
1759: LD_INT 87
1761: PUSH
1762: LD_INT 88
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: ST_TO_ADDR
1821: GO 2054
1823: LD_INT 3
1825: DOUBLE
1826: EQUAL
1827: IFTRUE 1831
1829: GO 2053
1831: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1832: LD_ADDR_VAR 0 4
1836: PUSH
1837: LD_INT 46
1839: PUSH
1840: LD_INT 47
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: LD_INT 2
1848: PUSH
1849: LD_INT 82
1851: PUSH
1852: LD_INT 83
1854: PUSH
1855: LD_INT 84
1857: PUSH
1858: LD_INT 85
1860: PUSH
1861: LD_INT 86
1863: PUSH
1864: LD_INT 11
1866: PUSH
1867: LD_INT 9
1869: PUSH
1870: LD_INT 20
1872: PUSH
1873: LD_INT 19
1875: PUSH
1876: LD_INT 21
1878: PUSH
1879: LD_INT 24
1881: PUSH
1882: LD_INT 22
1884: PUSH
1885: LD_INT 25
1887: PUSH
1888: LD_INT 28
1890: PUSH
1891: LD_INT 29
1893: PUSH
1894: LD_INT 30
1896: PUSH
1897: LD_INT 31
1899: PUSH
1900: LD_INT 37
1902: PUSH
1903: LD_INT 38
1905: PUSH
1906: LD_INT 32
1908: PUSH
1909: LD_INT 27
1911: PUSH
1912: LD_INT 33
1914: PUSH
1915: LD_INT 69
1917: PUSH
1918: LD_INT 39
1920: PUSH
1921: LD_INT 34
1923: PUSH
1924: LD_INT 40
1926: PUSH
1927: LD_INT 71
1929: PUSH
1930: LD_INT 23
1932: PUSH
1933: LD_INT 44
1935: PUSH
1936: LD_INT 48
1938: PUSH
1939: LD_INT 49
1941: PUSH
1942: LD_INT 50
1944: PUSH
1945: LD_INT 51
1947: PUSH
1948: LD_INT 52
1950: PUSH
1951: LD_INT 53
1953: PUSH
1954: LD_INT 54
1956: PUSH
1957: LD_INT 55
1959: PUSH
1960: LD_INT 56
1962: PUSH
1963: LD_INT 57
1965: PUSH
1966: LD_INT 58
1968: PUSH
1969: LD_INT 59
1971: PUSH
1972: LD_INT 63
1974: PUSH
1975: LD_INT 64
1977: PUSH
1978: LD_INT 65
1980: PUSH
1981: LD_INT 82
1983: PUSH
1984: LD_INT 83
1986: PUSH
1987: LD_INT 84
1989: PUSH
1990: LD_INT 85
1992: PUSH
1993: LD_INT 86
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: ST_TO_ADDR
2051: GO 2054
2053: POP
// if state > - 1 and state < 3 then
2054: LD_VAR 0 3
2058: PUSH
2059: LD_INT 1
2061: NEG
2062: GREATER
2063: PUSH
2064: LD_VAR 0 3
2068: PUSH
2069: LD_INT 3
2071: LESS
2072: AND
2073: IFFALSE 2130
// for i in result do
2075: LD_ADDR_VAR 0 5
2079: PUSH
2080: LD_VAR 0 4
2084: PUSH
2085: FOR_IN
2086: IFFALSE 2128
// if GetTech ( i , side ) <> state then
2088: LD_VAR 0 5
2092: PPUSH
2093: LD_VAR 0 1
2097: PPUSH
2098: CALL_OW 321
2102: PUSH
2103: LD_VAR 0 3
2107: NONEQUAL
2108: IFFALSE 2126
// result := result diff i ;
2110: LD_ADDR_VAR 0 4
2114: PUSH
2115: LD_VAR 0 4
2119: PUSH
2120: LD_VAR 0 5
2124: DIFF
2125: ST_TO_ADDR
2126: GO 2085
2128: POP
2129: POP
// end ;
2130: LD_VAR 0 4
2134: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2135: LD_INT 0
2137: PPUSH
2138: PPUSH
2139: PPUSH
// result := true ;
2140: LD_ADDR_VAR 0 3
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2148: LD_ADDR_VAR 0 5
2152: PUSH
2153: LD_VAR 0 2
2157: PPUSH
2158: CALL_OW 480
2162: ST_TO_ADDR
// if not tmp then
2163: LD_VAR 0 5
2167: NOT
2168: IFFALSE 2172
// exit ;
2170: GO 2221
// for i in tmp do
2172: LD_ADDR_VAR 0 4
2176: PUSH
2177: LD_VAR 0 5
2181: PUSH
2182: FOR_IN
2183: IFFALSE 2219
// if GetTech ( i , side ) <> state_researched then
2185: LD_VAR 0 4
2189: PPUSH
2190: LD_VAR 0 1
2194: PPUSH
2195: CALL_OW 321
2199: PUSH
2200: LD_INT 2
2202: NONEQUAL
2203: IFFALSE 2217
// begin result := false ;
2205: LD_ADDR_VAR 0 3
2209: PUSH
2210: LD_INT 0
2212: ST_TO_ADDR
// exit ;
2213: POP
2214: POP
2215: GO 2221
// end ;
2217: GO 2182
2219: POP
2220: POP
// end ;
2221: LD_VAR 0 3
2225: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2226: LD_INT 0
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2241: LD_VAR 0 1
2245: NOT
2246: PUSH
2247: LD_VAR 0 1
2251: PPUSH
2252: CALL_OW 257
2256: PUSH
2257: LD_INT 9
2259: NONEQUAL
2260: OR
2261: IFFALSE 2265
// exit ;
2263: GO 2838
// side := GetSide ( unit ) ;
2265: LD_ADDR_VAR 0 9
2269: PUSH
2270: LD_VAR 0 1
2274: PPUSH
2275: CALL_OW 255
2279: ST_TO_ADDR
// tech_space := tech_spacanom ;
2280: LD_ADDR_VAR 0 12
2284: PUSH
2285: LD_INT 29
2287: ST_TO_ADDR
// tech_time := tech_taurad ;
2288: LD_ADDR_VAR 0 13
2292: PUSH
2293: LD_INT 28
2295: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2296: LD_ADDR_VAR 0 11
2300: PUSH
2301: LD_VAR 0 1
2305: PPUSH
2306: CALL_OW 310
2310: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2311: LD_VAR 0 11
2315: PPUSH
2316: CALL_OW 247
2320: PUSH
2321: LD_INT 2
2323: EQUAL
2324: IFFALSE 2328
// exit ;
2326: GO 2838
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2328: LD_ADDR_VAR 0 8
2332: PUSH
2333: LD_INT 81
2335: PUSH
2336: LD_VAR 0 9
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: PUSH
2345: LD_INT 3
2347: PUSH
2348: LD_INT 21
2350: PUSH
2351: LD_INT 3
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PPUSH
2366: CALL_OW 69
2370: ST_TO_ADDR
// if not tmp then
2371: LD_VAR 0 8
2375: NOT
2376: IFFALSE 2380
// exit ;
2378: GO 2838
// if in_unit then
2380: LD_VAR 0 11
2384: IFFALSE 2408
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2386: LD_ADDR_VAR 0 10
2390: PUSH
2391: LD_VAR 0 8
2395: PPUSH
2396: LD_VAR 0 11
2400: PPUSH
2401: CALL_OW 74
2405: ST_TO_ADDR
2406: GO 2428
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2408: LD_ADDR_VAR 0 10
2412: PUSH
2413: LD_VAR 0 8
2417: PPUSH
2418: LD_VAR 0 1
2422: PPUSH
2423: CALL_OW 74
2427: ST_TO_ADDR
// if not enemy then
2428: LD_VAR 0 10
2432: NOT
2433: IFFALSE 2437
// exit ;
2435: GO 2838
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2437: LD_VAR 0 11
2441: PUSH
2442: LD_VAR 0 11
2446: PPUSH
2447: LD_VAR 0 10
2451: PPUSH
2452: CALL_OW 296
2456: PUSH
2457: LD_INT 13
2459: GREATER
2460: AND
2461: PUSH
2462: LD_VAR 0 1
2466: PPUSH
2467: LD_VAR 0 10
2471: PPUSH
2472: CALL_OW 296
2476: PUSH
2477: LD_INT 12
2479: GREATER
2480: OR
2481: IFFALSE 2485
// exit ;
2483: GO 2838
// missile := [ 1 ] ;
2485: LD_ADDR_VAR 0 14
2489: PUSH
2490: LD_INT 1
2492: PUSH
2493: EMPTY
2494: LIST
2495: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2496: LD_VAR 0 9
2500: PPUSH
2501: LD_VAR 0 12
2505: PPUSH
2506: CALL_OW 325
2510: IFFALSE 2539
// missile := Insert ( missile , missile + 1 , 2 ) ;
2512: LD_ADDR_VAR 0 14
2516: PUSH
2517: LD_VAR 0 14
2521: PPUSH
2522: LD_VAR 0 14
2526: PUSH
2527: LD_INT 1
2529: PLUS
2530: PPUSH
2531: LD_INT 2
2533: PPUSH
2534: CALL_OW 2
2538: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2539: LD_VAR 0 9
2543: PPUSH
2544: LD_VAR 0 13
2548: PPUSH
2549: CALL_OW 325
2553: PUSH
2554: LD_VAR 0 10
2558: PPUSH
2559: CALL_OW 255
2563: PPUSH
2564: LD_VAR 0 13
2568: PPUSH
2569: CALL_OW 325
2573: NOT
2574: AND
2575: IFFALSE 2604
// missile := Insert ( missile , missile + 1 , 3 ) ;
2577: LD_ADDR_VAR 0 14
2581: PUSH
2582: LD_VAR 0 14
2586: PPUSH
2587: LD_VAR 0 14
2591: PUSH
2592: LD_INT 1
2594: PLUS
2595: PPUSH
2596: LD_INT 3
2598: PPUSH
2599: CALL_OW 2
2603: ST_TO_ADDR
// if missile < 2 then
2604: LD_VAR 0 14
2608: PUSH
2609: LD_INT 2
2611: LESS
2612: IFFALSE 2616
// exit ;
2614: GO 2838
// x := GetX ( enemy ) ;
2616: LD_ADDR_VAR 0 4
2620: PUSH
2621: LD_VAR 0 10
2625: PPUSH
2626: CALL_OW 250
2630: ST_TO_ADDR
// y := GetY ( enemy ) ;
2631: LD_ADDR_VAR 0 5
2635: PUSH
2636: LD_VAR 0 10
2640: PPUSH
2641: CALL_OW 251
2645: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2646: LD_ADDR_VAR 0 6
2650: PUSH
2651: LD_VAR 0 4
2655: PUSH
2656: LD_INT 1
2658: NEG
2659: PPUSH
2660: LD_INT 1
2662: PPUSH
2663: CALL_OW 12
2667: PLUS
2668: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2669: LD_ADDR_VAR 0 7
2673: PUSH
2674: LD_VAR 0 5
2678: PUSH
2679: LD_INT 1
2681: NEG
2682: PPUSH
2683: LD_INT 1
2685: PPUSH
2686: CALL_OW 12
2690: PLUS
2691: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2692: LD_VAR 0 6
2696: PPUSH
2697: LD_VAR 0 7
2701: PPUSH
2702: CALL_OW 488
2706: NOT
2707: IFFALSE 2729
// begin _x := x ;
2709: LD_ADDR_VAR 0 6
2713: PUSH
2714: LD_VAR 0 4
2718: ST_TO_ADDR
// _y := y ;
2719: LD_ADDR_VAR 0 7
2723: PUSH
2724: LD_VAR 0 5
2728: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2729: LD_ADDR_VAR 0 3
2733: PUSH
2734: LD_INT 1
2736: PPUSH
2737: LD_VAR 0 14
2741: PPUSH
2742: CALL_OW 12
2746: ST_TO_ADDR
// case i of 1 :
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 1
2754: DOUBLE
2755: EQUAL
2756: IFTRUE 2760
2758: GO 2777
2760: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2761: LD_VAR 0 1
2765: PPUSH
2766: LD_VAR 0 10
2770: PPUSH
2771: CALL_OW 115
2775: GO 2838
2777: LD_INT 2
2779: DOUBLE
2780: EQUAL
2781: IFTRUE 2785
2783: GO 2807
2785: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2786: LD_VAR 0 1
2790: PPUSH
2791: LD_VAR 0 6
2795: PPUSH
2796: LD_VAR 0 7
2800: PPUSH
2801: CALL_OW 153
2805: GO 2838
2807: LD_INT 3
2809: DOUBLE
2810: EQUAL
2811: IFTRUE 2815
2813: GO 2837
2815: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2816: LD_VAR 0 1
2820: PPUSH
2821: LD_VAR 0 6
2825: PPUSH
2826: LD_VAR 0 7
2830: PPUSH
2831: CALL_OW 154
2835: GO 2838
2837: POP
// end ;
2838: LD_VAR 0 2
2842: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2843: LD_INT 0
2845: PPUSH
2846: PPUSH
2847: PPUSH
2848: PPUSH
2849: PPUSH
2850: PPUSH
// if not unit or not building then
2851: LD_VAR 0 1
2855: NOT
2856: PUSH
2857: LD_VAR 0 2
2861: NOT
2862: OR
2863: IFFALSE 2867
// exit ;
2865: GO 3025
// x := GetX ( building ) ;
2867: LD_ADDR_VAR 0 5
2871: PUSH
2872: LD_VAR 0 2
2876: PPUSH
2877: CALL_OW 250
2881: ST_TO_ADDR
// y := GetY ( building ) ;
2882: LD_ADDR_VAR 0 6
2886: PUSH
2887: LD_VAR 0 2
2891: PPUSH
2892: CALL_OW 251
2896: ST_TO_ADDR
// for i = 0 to 5 do
2897: LD_ADDR_VAR 0 4
2901: PUSH
2902: DOUBLE
2903: LD_INT 0
2905: DEC
2906: ST_TO_ADDR
2907: LD_INT 5
2909: PUSH
2910: FOR_TO
2911: IFFALSE 3023
// begin _x := ShiftX ( x , i , 3 ) ;
2913: LD_ADDR_VAR 0 7
2917: PUSH
2918: LD_VAR 0 5
2922: PPUSH
2923: LD_VAR 0 4
2927: PPUSH
2928: LD_INT 3
2930: PPUSH
2931: CALL_OW 272
2935: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2936: LD_ADDR_VAR 0 8
2940: PUSH
2941: LD_VAR 0 6
2945: PPUSH
2946: LD_VAR 0 4
2950: PPUSH
2951: LD_INT 3
2953: PPUSH
2954: CALL_OW 273
2958: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2959: LD_VAR 0 7
2963: PPUSH
2964: LD_VAR 0 8
2968: PPUSH
2969: CALL_OW 488
2973: NOT
2974: IFFALSE 2978
// continue ;
2976: GO 2910
// if HexInfo ( _x , _y ) = 0 then
2978: LD_VAR 0 7
2982: PPUSH
2983: LD_VAR 0 8
2987: PPUSH
2988: CALL_OW 428
2992: PUSH
2993: LD_INT 0
2995: EQUAL
2996: IFFALSE 3021
// begin ComMoveXY ( unit , _x , _y ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_VAR 0 7
3007: PPUSH
3008: LD_VAR 0 8
3012: PPUSH
3013: CALL_OW 111
// exit ;
3017: POP
3018: POP
3019: GO 3025
// end ; end ;
3021: GO 2910
3023: POP
3024: POP
// end ;
3025: LD_VAR 0 3
3029: RET
// export function ScanBase ( side , base_area ) ; begin
3030: LD_INT 0
3032: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3033: LD_ADDR_VAR 0 3
3037: PUSH
3038: LD_VAR 0 2
3042: PPUSH
3043: LD_INT 81
3045: PUSH
3046: LD_VAR 0 1
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PPUSH
3055: CALL_OW 70
3059: ST_TO_ADDR
// end ;
3060: LD_VAR 0 3
3064: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3065: LD_INT 0
3067: PPUSH
3068: PPUSH
3069: PPUSH
3070: PPUSH
// result := false ;
3071: LD_ADDR_VAR 0 2
3075: PUSH
3076: LD_INT 0
3078: ST_TO_ADDR
// side := GetSide ( unit ) ;
3079: LD_ADDR_VAR 0 3
3083: PUSH
3084: LD_VAR 0 1
3088: PPUSH
3089: CALL_OW 255
3093: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3094: LD_ADDR_VAR 0 4
3098: PUSH
3099: LD_VAR 0 1
3103: PPUSH
3104: CALL_OW 248
3108: ST_TO_ADDR
// case nat of 1 :
3109: LD_VAR 0 4
3113: PUSH
3114: LD_INT 1
3116: DOUBLE
3117: EQUAL
3118: IFTRUE 3122
3120: GO 3133
3122: POP
// tech := tech_lassight ; 2 :
3123: LD_ADDR_VAR 0 5
3127: PUSH
3128: LD_INT 12
3130: ST_TO_ADDR
3131: GO 3172
3133: LD_INT 2
3135: DOUBLE
3136: EQUAL
3137: IFTRUE 3141
3139: GO 3152
3141: POP
// tech := tech_mortar ; 3 :
3142: LD_ADDR_VAR 0 5
3146: PUSH
3147: LD_INT 41
3149: ST_TO_ADDR
3150: GO 3172
3152: LD_INT 3
3154: DOUBLE
3155: EQUAL
3156: IFTRUE 3160
3158: GO 3171
3160: POP
// tech := tech_bazooka ; end ;
3161: LD_ADDR_VAR 0 5
3165: PUSH
3166: LD_INT 44
3168: ST_TO_ADDR
3169: GO 3172
3171: POP
// if Researched ( side , tech ) then
3172: LD_VAR 0 3
3176: PPUSH
3177: LD_VAR 0 5
3181: PPUSH
3182: CALL_OW 325
3186: IFFALSE 3213
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3188: LD_ADDR_VAR 0 2
3192: PUSH
3193: LD_INT 5
3195: PUSH
3196: LD_INT 8
3198: PUSH
3199: LD_INT 9
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: LIST
3206: PUSH
3207: LD_VAR 0 4
3211: ARRAY
3212: ST_TO_ADDR
// end ;
3213: LD_VAR 0 2
3217: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3218: LD_INT 0
3220: PPUSH
3221: PPUSH
3222: PPUSH
// if not mines then
3223: LD_VAR 0 2
3227: NOT
3228: IFFALSE 3232
// exit ;
3230: GO 3376
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3232: LD_ADDR_VAR 0 5
3236: PUSH
3237: LD_INT 81
3239: PUSH
3240: LD_VAR 0 1
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PUSH
3249: LD_INT 3
3251: PUSH
3252: LD_INT 21
3254: PUSH
3255: LD_INT 3
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PPUSH
3270: CALL_OW 69
3274: ST_TO_ADDR
// for i in mines do
3275: LD_ADDR_VAR 0 4
3279: PUSH
3280: LD_VAR 0 2
3284: PUSH
3285: FOR_IN
3286: IFFALSE 3374
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3288: LD_VAR 0 4
3292: PUSH
3293: LD_INT 1
3295: ARRAY
3296: PPUSH
3297: LD_VAR 0 4
3301: PUSH
3302: LD_INT 2
3304: ARRAY
3305: PPUSH
3306: CALL_OW 458
3310: NOT
3311: IFFALSE 3315
// continue ;
3313: GO 3285
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3315: LD_VAR 0 4
3319: PUSH
3320: LD_INT 1
3322: ARRAY
3323: PPUSH
3324: LD_VAR 0 4
3328: PUSH
3329: LD_INT 2
3331: ARRAY
3332: PPUSH
3333: CALL_OW 428
3337: PUSH
3338: LD_VAR 0 5
3342: IN
3343: IFFALSE 3372
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3345: LD_VAR 0 4
3349: PUSH
3350: LD_INT 1
3352: ARRAY
3353: PPUSH
3354: LD_VAR 0 4
3358: PUSH
3359: LD_INT 2
3361: ARRAY
3362: PPUSH
3363: LD_VAR 0 1
3367: PPUSH
3368: CALL_OW 456
// end ;
3372: GO 3285
3374: POP
3375: POP
// end ;
3376: LD_VAR 0 3
3380: RET
// export function Count ( array ) ; var i ; begin
3381: LD_INT 0
3383: PPUSH
3384: PPUSH
// result := 0 ;
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: LD_INT 0
3392: ST_TO_ADDR
// for i in array do
3393: LD_ADDR_VAR 0 3
3397: PUSH
3398: LD_VAR 0 1
3402: PUSH
3403: FOR_IN
3404: IFFALSE 3428
// if i then
3406: LD_VAR 0 3
3410: IFFALSE 3426
// result := result + 1 ;
3412: LD_ADDR_VAR 0 2
3416: PUSH
3417: LD_VAR 0 2
3421: PUSH
3422: LD_INT 1
3424: PLUS
3425: ST_TO_ADDR
3426: GO 3403
3428: POP
3429: POP
// end ;
3430: LD_VAR 0 2
3434: RET
// export function IsEmpty ( building ) ; begin
3435: LD_INT 0
3437: PPUSH
// if not building then
3438: LD_VAR 0 1
3442: NOT
3443: IFFALSE 3447
// exit ;
3445: GO 3490
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3447: LD_ADDR_VAR 0 2
3451: PUSH
3452: LD_VAR 0 1
3456: PUSH
3457: LD_INT 22
3459: PUSH
3460: LD_VAR 0 1
3464: PPUSH
3465: CALL_OW 255
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: PUSH
3474: LD_INT 58
3476: PUSH
3477: EMPTY
3478: LIST
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PPUSH
3484: CALL_OW 69
3488: IN
3489: ST_TO_ADDR
// end ;
3490: LD_VAR 0 2
3494: RET
// export function IsNotFull ( building ) ; begin
3495: LD_INT 0
3497: PPUSH
// if not building then
3498: LD_VAR 0 1
3502: NOT
3503: IFFALSE 3507
// exit ;
3505: GO 3526
// result := UnitsInside ( building ) < 6 ;
3507: LD_ADDR_VAR 0 2
3511: PUSH
3512: LD_VAR 0 1
3516: PPUSH
3517: CALL_OW 313
3521: PUSH
3522: LD_INT 6
3524: LESS
3525: ST_TO_ADDR
// end ;
3526: LD_VAR 0 2
3530: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
3535: PPUSH
3536: PPUSH
// tmp := [ ] ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: EMPTY
3543: ST_TO_ADDR
// list := [ ] ;
3544: LD_ADDR_VAR 0 5
3548: PUSH
3549: EMPTY
3550: ST_TO_ADDR
// for i = 16 to 25 do
3551: LD_ADDR_VAR 0 4
3555: PUSH
3556: DOUBLE
3557: LD_INT 16
3559: DEC
3560: ST_TO_ADDR
3561: LD_INT 25
3563: PUSH
3564: FOR_TO
3565: IFFALSE 3638
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: LD_VAR 0 3
3576: PUSH
3577: LD_INT 22
3579: PUSH
3580: LD_VAR 0 1
3584: PPUSH
3585: CALL_OW 255
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 91
3596: PUSH
3597: LD_VAR 0 1
3601: PUSH
3602: LD_INT 6
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: PUSH
3610: LD_INT 30
3612: PUSH
3613: LD_VAR 0 4
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: LIST
3626: PUSH
3627: EMPTY
3628: LIST
3629: PPUSH
3630: CALL_OW 69
3634: ADD
3635: ST_TO_ADDR
3636: GO 3564
3638: POP
3639: POP
// for i = 1 to tmp do
3640: LD_ADDR_VAR 0 4
3644: PUSH
3645: DOUBLE
3646: LD_INT 1
3648: DEC
3649: ST_TO_ADDR
3650: LD_VAR 0 3
3654: PUSH
3655: FOR_TO
3656: IFFALSE 3744
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3658: LD_ADDR_VAR 0 5
3662: PUSH
3663: LD_VAR 0 5
3667: PUSH
3668: LD_VAR 0 3
3672: PUSH
3673: LD_VAR 0 4
3677: ARRAY
3678: PPUSH
3679: CALL_OW 266
3683: PUSH
3684: LD_VAR 0 3
3688: PUSH
3689: LD_VAR 0 4
3693: ARRAY
3694: PPUSH
3695: CALL_OW 250
3699: PUSH
3700: LD_VAR 0 3
3704: PUSH
3705: LD_VAR 0 4
3709: ARRAY
3710: PPUSH
3711: CALL_OW 251
3715: PUSH
3716: LD_VAR 0 3
3720: PUSH
3721: LD_VAR 0 4
3725: ARRAY
3726: PPUSH
3727: CALL_OW 254
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: PUSH
3738: EMPTY
3739: LIST
3740: ADD
3741: ST_TO_ADDR
3742: GO 3655
3744: POP
3745: POP
// result := list ;
3746: LD_ADDR_VAR 0 2
3750: PUSH
3751: LD_VAR 0 5
3755: ST_TO_ADDR
// end ;
3756: LD_VAR 0 2
3760: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3761: LD_INT 0
3763: PPUSH
3764: PPUSH
3765: PPUSH
3766: PPUSH
3767: PPUSH
3768: PPUSH
3769: PPUSH
// if not factory then
3770: LD_VAR 0 1
3774: NOT
3775: IFFALSE 3779
// exit ;
3777: GO 4372
// if control = control_apeman then
3779: LD_VAR 0 4
3783: PUSH
3784: LD_INT 5
3786: EQUAL
3787: IFFALSE 3896
// begin tmp := UnitsInside ( factory ) ;
3789: LD_ADDR_VAR 0 8
3793: PUSH
3794: LD_VAR 0 1
3798: PPUSH
3799: CALL_OW 313
3803: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3804: LD_VAR 0 8
3808: PPUSH
3809: LD_INT 25
3811: PUSH
3812: LD_INT 12
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: PPUSH
3819: CALL_OW 72
3823: NOT
3824: IFFALSE 3834
// control := control_manual ;
3826: LD_ADDR_VAR 0 4
3830: PUSH
3831: LD_INT 1
3833: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3834: LD_ADDR_VAR 0 8
3838: PUSH
3839: LD_VAR 0 1
3843: PPUSH
3844: CALL 3531 0 1
3848: ST_TO_ADDR
// if tmp then
3849: LD_VAR 0 8
3853: IFFALSE 3896
// begin for i in tmp do
3855: LD_ADDR_VAR 0 7
3859: PUSH
3860: LD_VAR 0 8
3864: PUSH
3865: FOR_IN
3866: IFFALSE 3894
// if i [ 1 ] = b_ext_radio then
3868: LD_VAR 0 7
3872: PUSH
3873: LD_INT 1
3875: ARRAY
3876: PUSH
3877: LD_INT 22
3879: EQUAL
3880: IFFALSE 3892
// begin control := control_remote ;
3882: LD_ADDR_VAR 0 4
3886: PUSH
3887: LD_INT 2
3889: ST_TO_ADDR
// break ;
3890: GO 3894
// end ;
3892: GO 3865
3894: POP
3895: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3896: LD_VAR 0 1
3900: PPUSH
3901: LD_VAR 0 2
3905: PPUSH
3906: LD_VAR 0 3
3910: PPUSH
3911: LD_VAR 0 4
3915: PPUSH
3916: LD_VAR 0 5
3920: PPUSH
3921: CALL_OW 448
3925: IFFALSE 3960
// begin result := [ chassis , engine , control , weapon ] ;
3927: LD_ADDR_VAR 0 6
3931: PUSH
3932: LD_VAR 0 2
3936: PUSH
3937: LD_VAR 0 3
3941: PUSH
3942: LD_VAR 0 4
3946: PUSH
3947: LD_VAR 0 5
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: ST_TO_ADDR
// exit ;
3958: GO 4372
// end ; _chassis := AvailableChassisList ( factory ) ;
3960: LD_ADDR_VAR 0 9
3964: PUSH
3965: LD_VAR 0 1
3969: PPUSH
3970: CALL_OW 475
3974: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3975: LD_ADDR_VAR 0 11
3979: PUSH
3980: LD_VAR 0 1
3984: PPUSH
3985: CALL_OW 476
3989: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3990: LD_ADDR_VAR 0 12
3994: PUSH
3995: LD_VAR 0 1
3999: PPUSH
4000: CALL_OW 477
4004: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4005: LD_ADDR_VAR 0 10
4009: PUSH
4010: LD_VAR 0 1
4014: PPUSH
4015: CALL_OW 478
4019: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4020: LD_VAR 0 9
4024: NOT
4025: PUSH
4026: LD_VAR 0 11
4030: NOT
4031: OR
4032: PUSH
4033: LD_VAR 0 12
4037: NOT
4038: OR
4039: PUSH
4040: LD_VAR 0 10
4044: NOT
4045: OR
4046: IFFALSE 4081
// begin result := [ chassis , engine , control , weapon ] ;
4048: LD_ADDR_VAR 0 6
4052: PUSH
4053: LD_VAR 0 2
4057: PUSH
4058: LD_VAR 0 3
4062: PUSH
4063: LD_VAR 0 4
4067: PUSH
4068: LD_VAR 0 5
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: ST_TO_ADDR
// exit ;
4079: GO 4372
// end ; if not chassis in _chassis then
4081: LD_VAR 0 2
4085: PUSH
4086: LD_VAR 0 9
4090: IN
4091: NOT
4092: IFFALSE 4118
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4094: LD_ADDR_VAR 0 2
4098: PUSH
4099: LD_VAR 0 9
4103: PUSH
4104: LD_INT 1
4106: PPUSH
4107: LD_VAR 0 9
4111: PPUSH
4112: CALL_OW 12
4116: ARRAY
4117: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4118: LD_VAR 0 2
4122: PPUSH
4123: LD_VAR 0 3
4127: PPUSH
4128: CALL 4377 0 2
4132: NOT
4133: IFFALSE 4192
// repeat engine := _engine [ 1 ] ;
4135: LD_ADDR_VAR 0 3
4139: PUSH
4140: LD_VAR 0 11
4144: PUSH
4145: LD_INT 1
4147: ARRAY
4148: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4149: LD_ADDR_VAR 0 11
4153: PUSH
4154: LD_VAR 0 11
4158: PPUSH
4159: LD_INT 1
4161: PPUSH
4162: CALL_OW 3
4166: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4167: LD_VAR 0 2
4171: PPUSH
4172: LD_VAR 0 3
4176: PPUSH
4177: CALL 4377 0 2
4181: PUSH
4182: LD_VAR 0 11
4186: PUSH
4187: EMPTY
4188: EQUAL
4189: OR
4190: IFFALSE 4135
// if not control in _control then
4192: LD_VAR 0 4
4196: PUSH
4197: LD_VAR 0 12
4201: IN
4202: NOT
4203: IFFALSE 4229
// control := _control [ rand ( 1 , _control ) ] ;
4205: LD_ADDR_VAR 0 4
4209: PUSH
4210: LD_VAR 0 12
4214: PUSH
4215: LD_INT 1
4217: PPUSH
4218: LD_VAR 0 12
4222: PPUSH
4223: CALL_OW 12
4227: ARRAY
4228: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4229: LD_VAR 0 2
4233: PPUSH
4234: LD_VAR 0 5
4238: PPUSH
4239: CALL 4597 0 2
4243: NOT
4244: IFFALSE 4303
// repeat weapon := _weapon [ 1 ] ;
4246: LD_ADDR_VAR 0 5
4250: PUSH
4251: LD_VAR 0 10
4255: PUSH
4256: LD_INT 1
4258: ARRAY
4259: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4260: LD_ADDR_VAR 0 10
4264: PUSH
4265: LD_VAR 0 10
4269: PPUSH
4270: LD_INT 1
4272: PPUSH
4273: CALL_OW 3
4277: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4278: LD_VAR 0 2
4282: PPUSH
4283: LD_VAR 0 5
4287: PPUSH
4288: CALL 4597 0 2
4292: PUSH
4293: LD_VAR 0 10
4297: PUSH
4298: EMPTY
4299: EQUAL
4300: OR
4301: IFFALSE 4246
// result := [ ] ;
4303: LD_ADDR_VAR 0 6
4307: PUSH
4308: EMPTY
4309: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4310: LD_VAR 0 1
4314: PPUSH
4315: LD_VAR 0 2
4319: PPUSH
4320: LD_VAR 0 3
4324: PPUSH
4325: LD_VAR 0 4
4329: PPUSH
4330: LD_VAR 0 5
4334: PPUSH
4335: CALL_OW 448
4339: IFFALSE 4372
// result := [ chassis , engine , control , weapon ] ;
4341: LD_ADDR_VAR 0 6
4345: PUSH
4346: LD_VAR 0 2
4350: PUSH
4351: LD_VAR 0 3
4355: PUSH
4356: LD_VAR 0 4
4360: PUSH
4361: LD_VAR 0 5
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: ST_TO_ADDR
// end ;
4372: LD_VAR 0 6
4376: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4377: LD_INT 0
4379: PPUSH
// if not chassis or not engine then
4380: LD_VAR 0 1
4384: NOT
4385: PUSH
4386: LD_VAR 0 2
4390: NOT
4391: OR
4392: IFFALSE 4396
// exit ;
4394: GO 4592
// case engine of engine_solar :
4396: LD_VAR 0 2
4400: PUSH
4401: LD_INT 2
4403: DOUBLE
4404: EQUAL
4405: IFTRUE 4409
4407: GO 4447
4409: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4410: LD_ADDR_VAR 0 3
4414: PUSH
4415: LD_INT 11
4417: PUSH
4418: LD_INT 12
4420: PUSH
4421: LD_INT 13
4423: PUSH
4424: LD_INT 14
4426: PUSH
4427: LD_INT 1
4429: PUSH
4430: LD_INT 2
4432: PUSH
4433: LD_INT 3
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: ST_TO_ADDR
4445: GO 4576
4447: LD_INT 1
4449: DOUBLE
4450: EQUAL
4451: IFTRUE 4455
4453: GO 4517
4455: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4456: LD_ADDR_VAR 0 3
4460: PUSH
4461: LD_INT 11
4463: PUSH
4464: LD_INT 12
4466: PUSH
4467: LD_INT 13
4469: PUSH
4470: LD_INT 14
4472: PUSH
4473: LD_INT 1
4475: PUSH
4476: LD_INT 2
4478: PUSH
4479: LD_INT 3
4481: PUSH
4482: LD_INT 4
4484: PUSH
4485: LD_INT 5
4487: PUSH
4488: LD_INT 21
4490: PUSH
4491: LD_INT 23
4493: PUSH
4494: LD_INT 22
4496: PUSH
4497: LD_INT 24
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: ST_TO_ADDR
4515: GO 4576
4517: LD_INT 3
4519: DOUBLE
4520: EQUAL
4521: IFTRUE 4525
4523: GO 4575
4525: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4526: LD_ADDR_VAR 0 3
4530: PUSH
4531: LD_INT 13
4533: PUSH
4534: LD_INT 14
4536: PUSH
4537: LD_INT 2
4539: PUSH
4540: LD_INT 3
4542: PUSH
4543: LD_INT 4
4545: PUSH
4546: LD_INT 5
4548: PUSH
4549: LD_INT 21
4551: PUSH
4552: LD_INT 22
4554: PUSH
4555: LD_INT 23
4557: PUSH
4558: LD_INT 24
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: ST_TO_ADDR
4573: GO 4576
4575: POP
// result := ( chassis in result ) ;
4576: LD_ADDR_VAR 0 3
4580: PUSH
4581: LD_VAR 0 1
4585: PUSH
4586: LD_VAR 0 3
4590: IN
4591: ST_TO_ADDR
// end ;
4592: LD_VAR 0 3
4596: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4597: LD_INT 0
4599: PPUSH
// if not chassis or not weapon then
4600: LD_VAR 0 1
4604: NOT
4605: PUSH
4606: LD_VAR 0 2
4610: NOT
4611: OR
4612: IFFALSE 4616
// exit ;
4614: GO 5678
// case weapon of us_machine_gun :
4616: LD_VAR 0 2
4620: PUSH
4621: LD_INT 2
4623: DOUBLE
4624: EQUAL
4625: IFTRUE 4629
4627: GO 4659
4629: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4630: LD_ADDR_VAR 0 3
4634: PUSH
4635: LD_INT 1
4637: PUSH
4638: LD_INT 2
4640: PUSH
4641: LD_INT 3
4643: PUSH
4644: LD_INT 4
4646: PUSH
4647: LD_INT 5
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: ST_TO_ADDR
4657: GO 5662
4659: LD_INT 3
4661: DOUBLE
4662: EQUAL
4663: IFTRUE 4667
4665: GO 4697
4667: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: LD_INT 1
4675: PUSH
4676: LD_INT 2
4678: PUSH
4679: LD_INT 3
4681: PUSH
4682: LD_INT 4
4684: PUSH
4685: LD_INT 5
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: ST_TO_ADDR
4695: GO 5662
4697: LD_INT 11
4699: DOUBLE
4700: EQUAL
4701: IFTRUE 4705
4703: GO 4735
4705: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4706: LD_ADDR_VAR 0 3
4710: PUSH
4711: LD_INT 1
4713: PUSH
4714: LD_INT 2
4716: PUSH
4717: LD_INT 3
4719: PUSH
4720: LD_INT 4
4722: PUSH
4723: LD_INT 5
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: ST_TO_ADDR
4733: GO 5662
4735: LD_INT 4
4737: DOUBLE
4738: EQUAL
4739: IFTRUE 4743
4741: GO 4769
4743: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4744: LD_ADDR_VAR 0 3
4748: PUSH
4749: LD_INT 2
4751: PUSH
4752: LD_INT 3
4754: PUSH
4755: LD_INT 4
4757: PUSH
4758: LD_INT 5
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: ST_TO_ADDR
4767: GO 5662
4769: LD_INT 5
4771: DOUBLE
4772: EQUAL
4773: IFTRUE 4777
4775: GO 4803
4777: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4778: LD_ADDR_VAR 0 3
4782: PUSH
4783: LD_INT 2
4785: PUSH
4786: LD_INT 3
4788: PUSH
4789: LD_INT 4
4791: PUSH
4792: LD_INT 5
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: ST_TO_ADDR
4801: GO 5662
4803: LD_INT 9
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4811
4809: GO 4837
4811: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4812: LD_ADDR_VAR 0 3
4816: PUSH
4817: LD_INT 2
4819: PUSH
4820: LD_INT 3
4822: PUSH
4823: LD_INT 4
4825: PUSH
4826: LD_INT 5
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: ST_TO_ADDR
4835: GO 5662
4837: LD_INT 7
4839: DOUBLE
4840: EQUAL
4841: IFTRUE 4845
4843: GO 4871
4845: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4846: LD_ADDR_VAR 0 3
4850: PUSH
4851: LD_INT 2
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: LD_INT 4
4859: PUSH
4860: LD_INT 5
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: ST_TO_ADDR
4869: GO 5662
4871: LD_INT 12
4873: DOUBLE
4874: EQUAL
4875: IFTRUE 4879
4877: GO 4905
4879: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4880: LD_ADDR_VAR 0 3
4884: PUSH
4885: LD_INT 2
4887: PUSH
4888: LD_INT 3
4890: PUSH
4891: LD_INT 4
4893: PUSH
4894: LD_INT 5
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: ST_TO_ADDR
4903: GO 5662
4905: LD_INT 13
4907: DOUBLE
4908: EQUAL
4909: IFTRUE 4913
4911: GO 4939
4913: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4914: LD_ADDR_VAR 0 3
4918: PUSH
4919: LD_INT 2
4921: PUSH
4922: LD_INT 3
4924: PUSH
4925: LD_INT 4
4927: PUSH
4928: LD_INT 5
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: ST_TO_ADDR
4937: GO 5662
4939: LD_INT 14
4941: DOUBLE
4942: EQUAL
4943: IFTRUE 4947
4945: GO 4965
4947: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4948: LD_ADDR_VAR 0 3
4952: PUSH
4953: LD_INT 4
4955: PUSH
4956: LD_INT 5
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: ST_TO_ADDR
4963: GO 5662
4965: LD_INT 6
4967: DOUBLE
4968: EQUAL
4969: IFTRUE 4973
4971: GO 4991
4973: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4974: LD_ADDR_VAR 0 3
4978: PUSH
4979: LD_INT 4
4981: PUSH
4982: LD_INT 5
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: ST_TO_ADDR
4989: GO 5662
4991: LD_INT 10
4993: DOUBLE
4994: EQUAL
4995: IFTRUE 4999
4997: GO 5017
4999: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5000: LD_ADDR_VAR 0 3
5004: PUSH
5005: LD_INT 4
5007: PUSH
5008: LD_INT 5
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: ST_TO_ADDR
5015: GO 5662
5017: LD_INT 22
5019: DOUBLE
5020: EQUAL
5021: IFTRUE 5025
5023: GO 5051
5025: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5026: LD_ADDR_VAR 0 3
5030: PUSH
5031: LD_INT 11
5033: PUSH
5034: LD_INT 12
5036: PUSH
5037: LD_INT 13
5039: PUSH
5040: LD_INT 14
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: ST_TO_ADDR
5049: GO 5662
5051: LD_INT 23
5053: DOUBLE
5054: EQUAL
5055: IFTRUE 5059
5057: GO 5085
5059: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5060: LD_ADDR_VAR 0 3
5064: PUSH
5065: LD_INT 11
5067: PUSH
5068: LD_INT 12
5070: PUSH
5071: LD_INT 13
5073: PUSH
5074: LD_INT 14
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: ST_TO_ADDR
5083: GO 5662
5085: LD_INT 24
5087: DOUBLE
5088: EQUAL
5089: IFTRUE 5093
5091: GO 5119
5093: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5094: LD_ADDR_VAR 0 3
5098: PUSH
5099: LD_INT 11
5101: PUSH
5102: LD_INT 12
5104: PUSH
5105: LD_INT 13
5107: PUSH
5108: LD_INT 14
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: ST_TO_ADDR
5117: GO 5662
5119: LD_INT 30
5121: DOUBLE
5122: EQUAL
5123: IFTRUE 5127
5125: GO 5153
5127: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5128: LD_ADDR_VAR 0 3
5132: PUSH
5133: LD_INT 11
5135: PUSH
5136: LD_INT 12
5138: PUSH
5139: LD_INT 13
5141: PUSH
5142: LD_INT 14
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: ST_TO_ADDR
5151: GO 5662
5153: LD_INT 25
5155: DOUBLE
5156: EQUAL
5157: IFTRUE 5161
5159: GO 5179
5161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5162: LD_ADDR_VAR 0 3
5166: PUSH
5167: LD_INT 13
5169: PUSH
5170: LD_INT 14
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: ST_TO_ADDR
5177: GO 5662
5179: LD_INT 27
5181: DOUBLE
5182: EQUAL
5183: IFTRUE 5187
5185: GO 5205
5187: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5188: LD_ADDR_VAR 0 3
5192: PUSH
5193: LD_INT 13
5195: PUSH
5196: LD_INT 14
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: ST_TO_ADDR
5203: GO 5662
5205: LD_EXP 8
5209: DOUBLE
5210: EQUAL
5211: IFTRUE 5215
5213: GO 5241
5215: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5216: LD_ADDR_VAR 0 3
5220: PUSH
5221: LD_INT 11
5223: PUSH
5224: LD_INT 12
5226: PUSH
5227: LD_INT 13
5229: PUSH
5230: LD_INT 14
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: ST_TO_ADDR
5239: GO 5662
5241: LD_INT 28
5243: DOUBLE
5244: EQUAL
5245: IFTRUE 5249
5247: GO 5267
5249: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5250: LD_ADDR_VAR 0 3
5254: PUSH
5255: LD_INT 13
5257: PUSH
5258: LD_INT 14
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: ST_TO_ADDR
5265: GO 5662
5267: LD_INT 29
5269: DOUBLE
5270: EQUAL
5271: IFTRUE 5275
5273: GO 5293
5275: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5276: LD_ADDR_VAR 0 3
5280: PUSH
5281: LD_INT 13
5283: PUSH
5284: LD_INT 14
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: ST_TO_ADDR
5291: GO 5662
5293: LD_INT 31
5295: DOUBLE
5296: EQUAL
5297: IFTRUE 5301
5299: GO 5319
5301: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5302: LD_ADDR_VAR 0 3
5306: PUSH
5307: LD_INT 13
5309: PUSH
5310: LD_INT 14
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: ST_TO_ADDR
5317: GO 5662
5319: LD_INT 26
5321: DOUBLE
5322: EQUAL
5323: IFTRUE 5327
5325: GO 5345
5327: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5328: LD_ADDR_VAR 0 3
5332: PUSH
5333: LD_INT 13
5335: PUSH
5336: LD_INT 14
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: ST_TO_ADDR
5343: GO 5662
5345: LD_INT 42
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5379
5353: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5354: LD_ADDR_VAR 0 3
5358: PUSH
5359: LD_INT 21
5361: PUSH
5362: LD_INT 22
5364: PUSH
5365: LD_INT 23
5367: PUSH
5368: LD_INT 24
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: ST_TO_ADDR
5377: GO 5662
5379: LD_INT 43
5381: DOUBLE
5382: EQUAL
5383: IFTRUE 5387
5385: GO 5413
5387: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5388: LD_ADDR_VAR 0 3
5392: PUSH
5393: LD_INT 21
5395: PUSH
5396: LD_INT 22
5398: PUSH
5399: LD_INT 23
5401: PUSH
5402: LD_INT 24
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: ST_TO_ADDR
5411: GO 5662
5413: LD_INT 44
5415: DOUBLE
5416: EQUAL
5417: IFTRUE 5421
5419: GO 5447
5421: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5422: LD_ADDR_VAR 0 3
5426: PUSH
5427: LD_INT 21
5429: PUSH
5430: LD_INT 22
5432: PUSH
5433: LD_INT 23
5435: PUSH
5436: LD_INT 24
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: ST_TO_ADDR
5445: GO 5662
5447: LD_INT 45
5449: DOUBLE
5450: EQUAL
5451: IFTRUE 5455
5453: GO 5481
5455: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5456: LD_ADDR_VAR 0 3
5460: PUSH
5461: LD_INT 21
5463: PUSH
5464: LD_INT 22
5466: PUSH
5467: LD_INT 23
5469: PUSH
5470: LD_INT 24
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: ST_TO_ADDR
5479: GO 5662
5481: LD_INT 49
5483: DOUBLE
5484: EQUAL
5485: IFTRUE 5489
5487: GO 5515
5489: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5490: LD_ADDR_VAR 0 3
5494: PUSH
5495: LD_INT 21
5497: PUSH
5498: LD_INT 22
5500: PUSH
5501: LD_INT 23
5503: PUSH
5504: LD_INT 24
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: ST_TO_ADDR
5513: GO 5662
5515: LD_INT 51
5517: DOUBLE
5518: EQUAL
5519: IFTRUE 5523
5521: GO 5549
5523: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5524: LD_ADDR_VAR 0 3
5528: PUSH
5529: LD_INT 21
5531: PUSH
5532: LD_INT 22
5534: PUSH
5535: LD_INT 23
5537: PUSH
5538: LD_INT 24
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: ST_TO_ADDR
5547: GO 5662
5549: LD_INT 52
5551: DOUBLE
5552: EQUAL
5553: IFTRUE 5557
5555: GO 5583
5557: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5558: LD_ADDR_VAR 0 3
5562: PUSH
5563: LD_INT 21
5565: PUSH
5566: LD_INT 22
5568: PUSH
5569: LD_INT 23
5571: PUSH
5572: LD_INT 24
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: ST_TO_ADDR
5581: GO 5662
5583: LD_INT 53
5585: DOUBLE
5586: EQUAL
5587: IFTRUE 5591
5589: GO 5609
5591: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5592: LD_ADDR_VAR 0 3
5596: PUSH
5597: LD_INT 23
5599: PUSH
5600: LD_INT 24
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: ST_TO_ADDR
5607: GO 5662
5609: LD_INT 46
5611: DOUBLE
5612: EQUAL
5613: IFTRUE 5617
5615: GO 5635
5617: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5618: LD_ADDR_VAR 0 3
5622: PUSH
5623: LD_INT 23
5625: PUSH
5626: LD_INT 24
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: ST_TO_ADDR
5633: GO 5662
5635: LD_INT 47
5637: DOUBLE
5638: EQUAL
5639: IFTRUE 5643
5641: GO 5661
5643: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5644: LD_ADDR_VAR 0 3
5648: PUSH
5649: LD_INT 23
5651: PUSH
5652: LD_INT 24
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: ST_TO_ADDR
5659: GO 5662
5661: POP
// result := ( chassis in result ) ;
5662: LD_ADDR_VAR 0 3
5666: PUSH
5667: LD_VAR 0 1
5671: PUSH
5672: LD_VAR 0 3
5676: IN
5677: ST_TO_ADDR
// end ;
5678: LD_VAR 0 3
5682: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5683: LD_INT 0
5685: PPUSH
5686: PPUSH
5687: PPUSH
5688: PPUSH
5689: PPUSH
5690: PPUSH
5691: PPUSH
// result := array ;
5692: LD_ADDR_VAR 0 5
5696: PUSH
5697: LD_VAR 0 1
5701: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5702: LD_VAR 0 1
5706: NOT
5707: PUSH
5708: LD_VAR 0 2
5712: NOT
5713: OR
5714: PUSH
5715: LD_VAR 0 3
5719: NOT
5720: OR
5721: PUSH
5722: LD_VAR 0 2
5726: PUSH
5727: LD_VAR 0 1
5731: GREATER
5732: OR
5733: PUSH
5734: LD_VAR 0 3
5738: PUSH
5739: LD_VAR 0 1
5743: GREATER
5744: OR
5745: IFFALSE 5749
// exit ;
5747: GO 6045
// if direction then
5749: LD_VAR 0 4
5753: IFFALSE 5817
// begin d := 1 ;
5755: LD_ADDR_VAR 0 9
5759: PUSH
5760: LD_INT 1
5762: ST_TO_ADDR
// if i_from > i_to then
5763: LD_VAR 0 2
5767: PUSH
5768: LD_VAR 0 3
5772: GREATER
5773: IFFALSE 5799
// length := ( array - i_from ) + i_to else
5775: LD_ADDR_VAR 0 11
5779: PUSH
5780: LD_VAR 0 1
5784: PUSH
5785: LD_VAR 0 2
5789: MINUS
5790: PUSH
5791: LD_VAR 0 3
5795: PLUS
5796: ST_TO_ADDR
5797: GO 5815
// length := i_to - i_from ;
5799: LD_ADDR_VAR 0 11
5803: PUSH
5804: LD_VAR 0 3
5808: PUSH
5809: LD_VAR 0 2
5813: MINUS
5814: ST_TO_ADDR
// end else
5815: GO 5878
// begin d := - 1 ;
5817: LD_ADDR_VAR 0 9
5821: PUSH
5822: LD_INT 1
5824: NEG
5825: ST_TO_ADDR
// if i_from > i_to then
5826: LD_VAR 0 2
5830: PUSH
5831: LD_VAR 0 3
5835: GREATER
5836: IFFALSE 5856
// length := i_from - i_to else
5838: LD_ADDR_VAR 0 11
5842: PUSH
5843: LD_VAR 0 2
5847: PUSH
5848: LD_VAR 0 3
5852: MINUS
5853: ST_TO_ADDR
5854: GO 5878
// length := ( array - i_to ) + i_from ;
5856: LD_ADDR_VAR 0 11
5860: PUSH
5861: LD_VAR 0 1
5865: PUSH
5866: LD_VAR 0 3
5870: MINUS
5871: PUSH
5872: LD_VAR 0 2
5876: PLUS
5877: ST_TO_ADDR
// end ; if not length then
5878: LD_VAR 0 11
5882: NOT
5883: IFFALSE 5887
// exit ;
5885: GO 6045
// tmp := array ;
5887: LD_ADDR_VAR 0 10
5891: PUSH
5892: LD_VAR 0 1
5896: ST_TO_ADDR
// for i = 1 to length do
5897: LD_ADDR_VAR 0 6
5901: PUSH
5902: DOUBLE
5903: LD_INT 1
5905: DEC
5906: ST_TO_ADDR
5907: LD_VAR 0 11
5911: PUSH
5912: FOR_TO
5913: IFFALSE 6033
// begin for j = 1 to array do
5915: LD_ADDR_VAR 0 7
5919: PUSH
5920: DOUBLE
5921: LD_INT 1
5923: DEC
5924: ST_TO_ADDR
5925: LD_VAR 0 1
5929: PUSH
5930: FOR_TO
5931: IFFALSE 6019
// begin k := j + d ;
5933: LD_ADDR_VAR 0 8
5937: PUSH
5938: LD_VAR 0 7
5942: PUSH
5943: LD_VAR 0 9
5947: PLUS
5948: ST_TO_ADDR
// if k > array then
5949: LD_VAR 0 8
5953: PUSH
5954: LD_VAR 0 1
5958: GREATER
5959: IFFALSE 5969
// k := 1 ;
5961: LD_ADDR_VAR 0 8
5965: PUSH
5966: LD_INT 1
5968: ST_TO_ADDR
// if not k then
5969: LD_VAR 0 8
5973: NOT
5974: IFFALSE 5986
// k := array ;
5976: LD_ADDR_VAR 0 8
5980: PUSH
5981: LD_VAR 0 1
5985: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5986: LD_ADDR_VAR 0 10
5990: PUSH
5991: LD_VAR 0 10
5995: PPUSH
5996: LD_VAR 0 8
6000: PPUSH
6001: LD_VAR 0 1
6005: PUSH
6006: LD_VAR 0 7
6010: ARRAY
6011: PPUSH
6012: CALL_OW 1
6016: ST_TO_ADDR
// end ;
6017: GO 5930
6019: POP
6020: POP
// array := tmp ;
6021: LD_ADDR_VAR 0 1
6025: PUSH
6026: LD_VAR 0 10
6030: ST_TO_ADDR
// end ;
6031: GO 5912
6033: POP
6034: POP
// result := array ;
6035: LD_ADDR_VAR 0 5
6039: PUSH
6040: LD_VAR 0 1
6044: ST_TO_ADDR
// end ;
6045: LD_VAR 0 5
6049: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6050: LD_INT 0
6052: PPUSH
6053: PPUSH
// result := 0 ;
6054: LD_ADDR_VAR 0 3
6058: PUSH
6059: LD_INT 0
6061: ST_TO_ADDR
// if not array or not value in array then
6062: LD_VAR 0 1
6066: NOT
6067: PUSH
6068: LD_VAR 0 2
6072: PUSH
6073: LD_VAR 0 1
6077: IN
6078: NOT
6079: OR
6080: IFFALSE 6084
// exit ;
6082: GO 6138
// for i = 1 to array do
6084: LD_ADDR_VAR 0 4
6088: PUSH
6089: DOUBLE
6090: LD_INT 1
6092: DEC
6093: ST_TO_ADDR
6094: LD_VAR 0 1
6098: PUSH
6099: FOR_TO
6100: IFFALSE 6136
// if value = array [ i ] then
6102: LD_VAR 0 2
6106: PUSH
6107: LD_VAR 0 1
6111: PUSH
6112: LD_VAR 0 4
6116: ARRAY
6117: EQUAL
6118: IFFALSE 6134
// begin result := i ;
6120: LD_ADDR_VAR 0 3
6124: PUSH
6125: LD_VAR 0 4
6129: ST_TO_ADDR
// exit ;
6130: POP
6131: POP
6132: GO 6138
// end ;
6134: GO 6099
6136: POP
6137: POP
// end ;
6138: LD_VAR 0 3
6142: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6143: LD_INT 0
6145: PPUSH
// vc_chassis := chassis ;
6146: LD_ADDR_OWVAR 37
6150: PUSH
6151: LD_VAR 0 1
6155: ST_TO_ADDR
// vc_engine := engine ;
6156: LD_ADDR_OWVAR 39
6160: PUSH
6161: LD_VAR 0 2
6165: ST_TO_ADDR
// vc_control := control ;
6166: LD_ADDR_OWVAR 38
6170: PUSH
6171: LD_VAR 0 3
6175: ST_TO_ADDR
// vc_weapon := weapon ;
6176: LD_ADDR_OWVAR 40
6180: PUSH
6181: LD_VAR 0 4
6185: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6186: LD_ADDR_OWVAR 41
6190: PUSH
6191: LD_VAR 0 5
6195: ST_TO_ADDR
// end ;
6196: LD_VAR 0 6
6200: RET
// export function WantPlant ( unit ) ; var task ; begin
6201: LD_INT 0
6203: PPUSH
6204: PPUSH
// result := false ;
6205: LD_ADDR_VAR 0 2
6209: PUSH
6210: LD_INT 0
6212: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6213: LD_ADDR_VAR 0 3
6217: PUSH
6218: LD_VAR 0 1
6222: PPUSH
6223: CALL_OW 437
6227: ST_TO_ADDR
// if task then
6228: LD_VAR 0 3
6232: IFFALSE 6260
// if task [ 1 ] [ 1 ] = p then
6234: LD_VAR 0 3
6238: PUSH
6239: LD_INT 1
6241: ARRAY
6242: PUSH
6243: LD_INT 1
6245: ARRAY
6246: PUSH
6247: LD_STRING p
6249: EQUAL
6250: IFFALSE 6260
// result := true ;
6252: LD_ADDR_VAR 0 2
6256: PUSH
6257: LD_INT 1
6259: ST_TO_ADDR
// end ;
6260: LD_VAR 0 2
6264: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6265: LD_INT 0
6267: PPUSH
6268: PPUSH
6269: PPUSH
6270: PPUSH
// if pos < 1 then
6271: LD_VAR 0 2
6275: PUSH
6276: LD_INT 1
6278: LESS
6279: IFFALSE 6283
// exit ;
6281: GO 6586
// if pos = 1 then
6283: LD_VAR 0 2
6287: PUSH
6288: LD_INT 1
6290: EQUAL
6291: IFFALSE 6324
// result := Replace ( arr , pos [ 1 ] , value ) else
6293: LD_ADDR_VAR 0 4
6297: PUSH
6298: LD_VAR 0 1
6302: PPUSH
6303: LD_VAR 0 2
6307: PUSH
6308: LD_INT 1
6310: ARRAY
6311: PPUSH
6312: LD_VAR 0 3
6316: PPUSH
6317: CALL_OW 1
6321: ST_TO_ADDR
6322: GO 6586
// begin tmp := arr ;
6324: LD_ADDR_VAR 0 6
6328: PUSH
6329: LD_VAR 0 1
6333: ST_TO_ADDR
// s_arr := [ tmp ] ;
6334: LD_ADDR_VAR 0 7
6338: PUSH
6339: LD_VAR 0 6
6343: PUSH
6344: EMPTY
6345: LIST
6346: ST_TO_ADDR
// for i = 1 to pos - 1 do
6347: LD_ADDR_VAR 0 5
6351: PUSH
6352: DOUBLE
6353: LD_INT 1
6355: DEC
6356: ST_TO_ADDR
6357: LD_VAR 0 2
6361: PUSH
6362: LD_INT 1
6364: MINUS
6365: PUSH
6366: FOR_TO
6367: IFFALSE 6412
// begin tmp := tmp [ pos [ i ] ] ;
6369: LD_ADDR_VAR 0 6
6373: PUSH
6374: LD_VAR 0 6
6378: PUSH
6379: LD_VAR 0 2
6383: PUSH
6384: LD_VAR 0 5
6388: ARRAY
6389: ARRAY
6390: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6391: LD_ADDR_VAR 0 7
6395: PUSH
6396: LD_VAR 0 7
6400: PUSH
6401: LD_VAR 0 6
6405: PUSH
6406: EMPTY
6407: LIST
6408: ADD
6409: ST_TO_ADDR
// end ;
6410: GO 6366
6412: POP
6413: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6414: LD_ADDR_VAR 0 6
6418: PUSH
6419: LD_VAR 0 6
6423: PPUSH
6424: LD_VAR 0 2
6428: PUSH
6429: LD_VAR 0 2
6433: ARRAY
6434: PPUSH
6435: LD_VAR 0 3
6439: PPUSH
6440: CALL_OW 1
6444: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6445: LD_ADDR_VAR 0 7
6449: PUSH
6450: LD_VAR 0 7
6454: PPUSH
6455: LD_VAR 0 7
6459: PPUSH
6460: LD_VAR 0 6
6464: PPUSH
6465: CALL_OW 1
6469: ST_TO_ADDR
// for i = s_arr downto 2 do
6470: LD_ADDR_VAR 0 5
6474: PUSH
6475: DOUBLE
6476: LD_VAR 0 7
6480: INC
6481: ST_TO_ADDR
6482: LD_INT 2
6484: PUSH
6485: FOR_DOWNTO
6486: IFFALSE 6570
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6488: LD_ADDR_VAR 0 6
6492: PUSH
6493: LD_VAR 0 7
6497: PUSH
6498: LD_VAR 0 5
6502: PUSH
6503: LD_INT 1
6505: MINUS
6506: ARRAY
6507: PPUSH
6508: LD_VAR 0 2
6512: PUSH
6513: LD_VAR 0 5
6517: PUSH
6518: LD_INT 1
6520: MINUS
6521: ARRAY
6522: PPUSH
6523: LD_VAR 0 7
6527: PUSH
6528: LD_VAR 0 5
6532: ARRAY
6533: PPUSH
6534: CALL_OW 1
6538: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6539: LD_ADDR_VAR 0 7
6543: PUSH
6544: LD_VAR 0 7
6548: PPUSH
6549: LD_VAR 0 5
6553: PUSH
6554: LD_INT 1
6556: MINUS
6557: PPUSH
6558: LD_VAR 0 6
6562: PPUSH
6563: CALL_OW 1
6567: ST_TO_ADDR
// end ;
6568: GO 6485
6570: POP
6571: POP
// result := s_arr [ 1 ] ;
6572: LD_ADDR_VAR 0 4
6576: PUSH
6577: LD_VAR 0 7
6581: PUSH
6582: LD_INT 1
6584: ARRAY
6585: ST_TO_ADDR
// end ; end ;
6586: LD_VAR 0 4
6590: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6591: LD_INT 0
6593: PPUSH
6594: PPUSH
// if not list then
6595: LD_VAR 0 1
6599: NOT
6600: IFFALSE 6604
// exit ;
6602: GO 6695
// i := list [ pos1 ] ;
6604: LD_ADDR_VAR 0 5
6608: PUSH
6609: LD_VAR 0 1
6613: PUSH
6614: LD_VAR 0 2
6618: ARRAY
6619: ST_TO_ADDR
// if not i then
6620: LD_VAR 0 5
6624: NOT
6625: IFFALSE 6629
// exit ;
6627: GO 6695
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6629: LD_ADDR_VAR 0 1
6633: PUSH
6634: LD_VAR 0 1
6638: PPUSH
6639: LD_VAR 0 2
6643: PPUSH
6644: LD_VAR 0 1
6648: PUSH
6649: LD_VAR 0 3
6653: ARRAY
6654: PPUSH
6655: CALL_OW 1
6659: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6660: LD_ADDR_VAR 0 1
6664: PUSH
6665: LD_VAR 0 1
6669: PPUSH
6670: LD_VAR 0 3
6674: PPUSH
6675: LD_VAR 0 5
6679: PPUSH
6680: CALL_OW 1
6684: ST_TO_ADDR
// result := list ;
6685: LD_ADDR_VAR 0 4
6689: PUSH
6690: LD_VAR 0 1
6694: ST_TO_ADDR
// end ;
6695: LD_VAR 0 4
6699: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6700: LD_INT 0
6702: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6703: LD_ADDR_VAR 0 5
6707: PUSH
6708: LD_VAR 0 1
6712: PPUSH
6713: CALL_OW 250
6717: PPUSH
6718: LD_VAR 0 1
6722: PPUSH
6723: CALL_OW 251
6727: PPUSH
6728: LD_VAR 0 2
6732: PPUSH
6733: LD_VAR 0 3
6737: PPUSH
6738: LD_VAR 0 4
6742: PPUSH
6743: CALL 6753 0 5
6747: ST_TO_ADDR
// end ;
6748: LD_VAR 0 5
6752: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6753: LD_INT 0
6755: PPUSH
6756: PPUSH
6757: PPUSH
6758: PPUSH
// if not list then
6759: LD_VAR 0 3
6763: NOT
6764: IFFALSE 6768
// exit ;
6766: GO 7156
// result := [ ] ;
6768: LD_ADDR_VAR 0 6
6772: PUSH
6773: EMPTY
6774: ST_TO_ADDR
// for i in list do
6775: LD_ADDR_VAR 0 7
6779: PUSH
6780: LD_VAR 0 3
6784: PUSH
6785: FOR_IN
6786: IFFALSE 6988
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6788: LD_ADDR_VAR 0 9
6792: PUSH
6793: LD_VAR 0 7
6797: PPUSH
6798: LD_VAR 0 1
6802: PPUSH
6803: LD_VAR 0 2
6807: PPUSH
6808: CALL_OW 297
6812: ST_TO_ADDR
// if not result then
6813: LD_VAR 0 6
6817: NOT
6818: IFFALSE 6844
// result := [ [ i , tmp ] ] else
6820: LD_ADDR_VAR 0 6
6824: PUSH
6825: LD_VAR 0 7
6829: PUSH
6830: LD_VAR 0 9
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: ST_TO_ADDR
6842: GO 6986
// begin if result [ result ] [ 2 ] < tmp then
6844: LD_VAR 0 6
6848: PUSH
6849: LD_VAR 0 6
6853: ARRAY
6854: PUSH
6855: LD_INT 2
6857: ARRAY
6858: PUSH
6859: LD_VAR 0 9
6863: LESS
6864: IFFALSE 6906
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6866: LD_ADDR_VAR 0 6
6870: PUSH
6871: LD_VAR 0 6
6875: PPUSH
6876: LD_VAR 0 6
6880: PUSH
6881: LD_INT 1
6883: PLUS
6884: PPUSH
6885: LD_VAR 0 7
6889: PUSH
6890: LD_VAR 0 9
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PPUSH
6899: CALL_OW 2
6903: ST_TO_ADDR
6904: GO 6986
// for j = 1 to result do
6906: LD_ADDR_VAR 0 8
6910: PUSH
6911: DOUBLE
6912: LD_INT 1
6914: DEC
6915: ST_TO_ADDR
6916: LD_VAR 0 6
6920: PUSH
6921: FOR_TO
6922: IFFALSE 6984
// begin if tmp < result [ j ] [ 2 ] then
6924: LD_VAR 0 9
6928: PUSH
6929: LD_VAR 0 6
6933: PUSH
6934: LD_VAR 0 8
6938: ARRAY
6939: PUSH
6940: LD_INT 2
6942: ARRAY
6943: LESS
6944: IFFALSE 6982
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6946: LD_ADDR_VAR 0 6
6950: PUSH
6951: LD_VAR 0 6
6955: PPUSH
6956: LD_VAR 0 8
6960: PPUSH
6961: LD_VAR 0 7
6965: PUSH
6966: LD_VAR 0 9
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PPUSH
6975: CALL_OW 2
6979: ST_TO_ADDR
// break ;
6980: GO 6984
// end ; end ;
6982: GO 6921
6984: POP
6985: POP
// end ; end ;
6986: GO 6785
6988: POP
6989: POP
// if result and not asc then
6990: LD_VAR 0 6
6994: PUSH
6995: LD_VAR 0 4
6999: NOT
7000: AND
7001: IFFALSE 7076
// begin tmp := result ;
7003: LD_ADDR_VAR 0 9
7007: PUSH
7008: LD_VAR 0 6
7012: ST_TO_ADDR
// for i = tmp downto 1 do
7013: LD_ADDR_VAR 0 7
7017: PUSH
7018: DOUBLE
7019: LD_VAR 0 9
7023: INC
7024: ST_TO_ADDR
7025: LD_INT 1
7027: PUSH
7028: FOR_DOWNTO
7029: IFFALSE 7074
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7031: LD_ADDR_VAR 0 6
7035: PUSH
7036: LD_VAR 0 6
7040: PPUSH
7041: LD_VAR 0 9
7045: PUSH
7046: LD_VAR 0 7
7050: MINUS
7051: PUSH
7052: LD_INT 1
7054: PLUS
7055: PPUSH
7056: LD_VAR 0 9
7060: PUSH
7061: LD_VAR 0 7
7065: ARRAY
7066: PPUSH
7067: CALL_OW 1
7071: ST_TO_ADDR
7072: GO 7028
7074: POP
7075: POP
// end ; tmp := [ ] ;
7076: LD_ADDR_VAR 0 9
7080: PUSH
7081: EMPTY
7082: ST_TO_ADDR
// if mode then
7083: LD_VAR 0 5
7087: IFFALSE 7156
// begin for i = 1 to result do
7089: LD_ADDR_VAR 0 7
7093: PUSH
7094: DOUBLE
7095: LD_INT 1
7097: DEC
7098: ST_TO_ADDR
7099: LD_VAR 0 6
7103: PUSH
7104: FOR_TO
7105: IFFALSE 7144
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7107: LD_ADDR_VAR 0 9
7111: PUSH
7112: LD_VAR 0 9
7116: PPUSH
7117: LD_VAR 0 7
7121: PPUSH
7122: LD_VAR 0 6
7126: PUSH
7127: LD_VAR 0 7
7131: ARRAY
7132: PUSH
7133: LD_INT 1
7135: ARRAY
7136: PPUSH
7137: CALL_OW 1
7141: ST_TO_ADDR
7142: GO 7104
7144: POP
7145: POP
// result := tmp ;
7146: LD_ADDR_VAR 0 6
7150: PUSH
7151: LD_VAR 0 9
7155: ST_TO_ADDR
// end ; end ;
7156: LD_VAR 0 6
7160: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7161: LD_INT 0
7163: PPUSH
7164: PPUSH
7165: PPUSH
7166: PPUSH
7167: PPUSH
7168: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7169: LD_ADDR_VAR 0 5
7173: PUSH
7174: LD_INT 0
7176: PUSH
7177: LD_INT 0
7179: PUSH
7180: LD_INT 0
7182: PUSH
7183: EMPTY
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: ST_TO_ADDR
// if not x or not y then
7191: LD_VAR 0 2
7195: NOT
7196: PUSH
7197: LD_VAR 0 3
7201: NOT
7202: OR
7203: IFFALSE 7207
// exit ;
7205: GO 8859
// if not range then
7207: LD_VAR 0 4
7211: NOT
7212: IFFALSE 7222
// range := 10 ;
7214: LD_ADDR_VAR 0 4
7218: PUSH
7219: LD_INT 10
7221: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7222: LD_ADDR_VAR 0 8
7226: PUSH
7227: LD_INT 81
7229: PUSH
7230: LD_VAR 0 1
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: LD_INT 92
7241: PUSH
7242: LD_VAR 0 2
7246: PUSH
7247: LD_VAR 0 3
7251: PUSH
7252: LD_VAR 0 4
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 3
7265: PUSH
7266: LD_INT 21
7268: PUSH
7269: LD_INT 3
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: LIST
7284: PPUSH
7285: CALL_OW 69
7289: ST_TO_ADDR
// if not tmp then
7290: LD_VAR 0 8
7294: NOT
7295: IFFALSE 7299
// exit ;
7297: GO 8859
// for i in tmp do
7299: LD_ADDR_VAR 0 6
7303: PUSH
7304: LD_VAR 0 8
7308: PUSH
7309: FOR_IN
7310: IFFALSE 8834
// begin points := [ 0 , 0 , 0 ] ;
7312: LD_ADDR_VAR 0 9
7316: PUSH
7317: LD_INT 0
7319: PUSH
7320: LD_INT 0
7322: PUSH
7323: LD_INT 0
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: LIST
7330: ST_TO_ADDR
// bpoints := 1 ;
7331: LD_ADDR_VAR 0 10
7335: PUSH
7336: LD_INT 1
7338: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7339: LD_VAR 0 6
7343: PPUSH
7344: CALL_OW 247
7348: PUSH
7349: LD_INT 1
7351: DOUBLE
7352: EQUAL
7353: IFTRUE 7357
7355: GO 7935
7357: POP
// begin if GetClass ( i ) = 1 then
7358: LD_VAR 0 6
7362: PPUSH
7363: CALL_OW 257
7367: PUSH
7368: LD_INT 1
7370: EQUAL
7371: IFFALSE 7392
// points := [ 10 , 5 , 3 ] ;
7373: LD_ADDR_VAR 0 9
7377: PUSH
7378: LD_INT 10
7380: PUSH
7381: LD_INT 5
7383: PUSH
7384: LD_INT 3
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: LIST
7391: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7392: LD_VAR 0 6
7396: PPUSH
7397: CALL_OW 257
7401: PUSH
7402: LD_INT 2
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: LD_INT 4
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: LIST
7415: IN
7416: IFFALSE 7437
// points := [ 3 , 2 , 1 ] ;
7418: LD_ADDR_VAR 0 9
7422: PUSH
7423: LD_INT 3
7425: PUSH
7426: LD_INT 2
7428: PUSH
7429: LD_INT 1
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: LIST
7436: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7437: LD_VAR 0 6
7441: PPUSH
7442: CALL_OW 257
7446: PUSH
7447: LD_INT 5
7449: EQUAL
7450: IFFALSE 7471
// points := [ 130 , 5 , 2 ] ;
7452: LD_ADDR_VAR 0 9
7456: PUSH
7457: LD_INT 130
7459: PUSH
7460: LD_INT 5
7462: PUSH
7463: LD_INT 2
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: LIST
7470: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7471: LD_VAR 0 6
7475: PPUSH
7476: CALL_OW 257
7480: PUSH
7481: LD_INT 8
7483: EQUAL
7484: IFFALSE 7505
// points := [ 35 , 35 , 30 ] ;
7486: LD_ADDR_VAR 0 9
7490: PUSH
7491: LD_INT 35
7493: PUSH
7494: LD_INT 35
7496: PUSH
7497: LD_INT 30
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: LIST
7504: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7505: LD_VAR 0 6
7509: PPUSH
7510: CALL_OW 257
7514: PUSH
7515: LD_INT 9
7517: EQUAL
7518: IFFALSE 7539
// points := [ 20 , 55 , 40 ] ;
7520: LD_ADDR_VAR 0 9
7524: PUSH
7525: LD_INT 20
7527: PUSH
7528: LD_INT 55
7530: PUSH
7531: LD_INT 40
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: LIST
7538: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7539: LD_VAR 0 6
7543: PPUSH
7544: CALL_OW 257
7548: PUSH
7549: LD_INT 12
7551: PUSH
7552: LD_INT 16
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: IN
7559: IFFALSE 7580
// points := [ 5 , 3 , 2 ] ;
7561: LD_ADDR_VAR 0 9
7565: PUSH
7566: LD_INT 5
7568: PUSH
7569: LD_INT 3
7571: PUSH
7572: LD_INT 2
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: LIST
7579: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7580: LD_VAR 0 6
7584: PPUSH
7585: CALL_OW 257
7589: PUSH
7590: LD_INT 17
7592: EQUAL
7593: IFFALSE 7614
// points := [ 100 , 50 , 75 ] ;
7595: LD_ADDR_VAR 0 9
7599: PUSH
7600: LD_INT 100
7602: PUSH
7603: LD_INT 50
7605: PUSH
7606: LD_INT 75
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: LIST
7613: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7614: LD_VAR 0 6
7618: PPUSH
7619: CALL_OW 257
7623: PUSH
7624: LD_INT 15
7626: EQUAL
7627: IFFALSE 7648
// points := [ 10 , 5 , 3 ] ;
7629: LD_ADDR_VAR 0 9
7633: PUSH
7634: LD_INT 10
7636: PUSH
7637: LD_INT 5
7639: PUSH
7640: LD_INT 3
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: LIST
7647: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7648: LD_VAR 0 6
7652: PPUSH
7653: CALL_OW 257
7657: PUSH
7658: LD_INT 14
7660: EQUAL
7661: IFFALSE 7682
// points := [ 10 , 0 , 0 ] ;
7663: LD_ADDR_VAR 0 9
7667: PUSH
7668: LD_INT 10
7670: PUSH
7671: LD_INT 0
7673: PUSH
7674: LD_INT 0
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: LIST
7681: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7682: LD_VAR 0 6
7686: PPUSH
7687: CALL_OW 257
7691: PUSH
7692: LD_INT 11
7694: EQUAL
7695: IFFALSE 7716
// points := [ 30 , 10 , 5 ] ;
7697: LD_ADDR_VAR 0 9
7701: PUSH
7702: LD_INT 30
7704: PUSH
7705: LD_INT 10
7707: PUSH
7708: LD_INT 5
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: LIST
7715: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7716: LD_VAR 0 1
7720: PPUSH
7721: LD_INT 5
7723: PPUSH
7724: CALL_OW 321
7728: PUSH
7729: LD_INT 2
7731: EQUAL
7732: IFFALSE 7749
// bpoints := bpoints * 1.8 ;
7734: LD_ADDR_VAR 0 10
7738: PUSH
7739: LD_VAR 0 10
7743: PUSH
7744: LD_REAL  1.80000000000000E+0000
7747: MUL
7748: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7749: LD_VAR 0 6
7753: PPUSH
7754: CALL_OW 257
7758: PUSH
7759: LD_INT 1
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: LD_INT 3
7767: PUSH
7768: LD_INT 4
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: IN
7777: PUSH
7778: LD_VAR 0 1
7782: PPUSH
7783: LD_INT 51
7785: PPUSH
7786: CALL_OW 321
7790: PUSH
7791: LD_INT 2
7793: EQUAL
7794: AND
7795: IFFALSE 7812
// bpoints := bpoints * 1.2 ;
7797: LD_ADDR_VAR 0 10
7801: PUSH
7802: LD_VAR 0 10
7806: PUSH
7807: LD_REAL  1.20000000000000E+0000
7810: MUL
7811: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7812: LD_VAR 0 6
7816: PPUSH
7817: CALL_OW 257
7821: PUSH
7822: LD_INT 5
7824: PUSH
7825: LD_INT 7
7827: PUSH
7828: LD_INT 9
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: LIST
7835: IN
7836: PUSH
7837: LD_VAR 0 1
7841: PPUSH
7842: LD_INT 52
7844: PPUSH
7845: CALL_OW 321
7849: PUSH
7850: LD_INT 2
7852: EQUAL
7853: AND
7854: IFFALSE 7871
// bpoints := bpoints * 1.5 ;
7856: LD_ADDR_VAR 0 10
7860: PUSH
7861: LD_VAR 0 10
7865: PUSH
7866: LD_REAL  1.50000000000000E+0000
7869: MUL
7870: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7871: LD_VAR 0 1
7875: PPUSH
7876: LD_INT 66
7878: PPUSH
7879: CALL_OW 321
7883: PUSH
7884: LD_INT 2
7886: EQUAL
7887: IFFALSE 7904
// bpoints := bpoints * 1.1 ;
7889: LD_ADDR_VAR 0 10
7893: PUSH
7894: LD_VAR 0 10
7898: PUSH
7899: LD_REAL  1.10000000000000E+0000
7902: MUL
7903: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7904: LD_ADDR_VAR 0 10
7908: PUSH
7909: LD_VAR 0 10
7913: PUSH
7914: LD_VAR 0 6
7918: PPUSH
7919: LD_INT 1
7921: PPUSH
7922: CALL_OW 259
7926: PUSH
7927: LD_REAL  1.15000000000000E+0000
7930: MUL
7931: MUL
7932: ST_TO_ADDR
// end ; unit_vehicle :
7933: GO 8763
7935: LD_INT 2
7937: DOUBLE
7938: EQUAL
7939: IFTRUE 7943
7941: GO 8751
7943: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7944: LD_VAR 0 6
7948: PPUSH
7949: CALL_OW 264
7953: PUSH
7954: LD_INT 2
7956: PUSH
7957: LD_INT 42
7959: PUSH
7960: LD_INT 24
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: LIST
7967: IN
7968: IFFALSE 7989
// points := [ 25 , 5 , 3 ] ;
7970: LD_ADDR_VAR 0 9
7974: PUSH
7975: LD_INT 25
7977: PUSH
7978: LD_INT 5
7980: PUSH
7981: LD_INT 3
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: LIST
7988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7989: LD_VAR 0 6
7993: PPUSH
7994: CALL_OW 264
7998: PUSH
7999: LD_INT 4
8001: PUSH
8002: LD_INT 43
8004: PUSH
8005: LD_INT 25
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: LIST
8012: IN
8013: IFFALSE 8034
// points := [ 40 , 15 , 5 ] ;
8015: LD_ADDR_VAR 0 9
8019: PUSH
8020: LD_INT 40
8022: PUSH
8023: LD_INT 15
8025: PUSH
8026: LD_INT 5
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8034: LD_VAR 0 6
8038: PPUSH
8039: CALL_OW 264
8043: PUSH
8044: LD_INT 3
8046: PUSH
8047: LD_INT 23
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: IN
8054: IFFALSE 8075
// points := [ 7 , 25 , 8 ] ;
8056: LD_ADDR_VAR 0 9
8060: PUSH
8061: LD_INT 7
8063: PUSH
8064: LD_INT 25
8066: PUSH
8067: LD_INT 8
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: LIST
8074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8075: LD_VAR 0 6
8079: PPUSH
8080: CALL_OW 264
8084: PUSH
8085: LD_INT 5
8087: PUSH
8088: LD_INT 27
8090: PUSH
8091: LD_INT 44
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: LIST
8098: IN
8099: IFFALSE 8120
// points := [ 14 , 50 , 16 ] ;
8101: LD_ADDR_VAR 0 9
8105: PUSH
8106: LD_INT 14
8108: PUSH
8109: LD_INT 50
8111: PUSH
8112: LD_INT 16
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: LIST
8119: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8120: LD_VAR 0 6
8124: PPUSH
8125: CALL_OW 264
8129: PUSH
8130: LD_INT 6
8132: PUSH
8133: LD_INT 46
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: IN
8140: IFFALSE 8161
// points := [ 32 , 120 , 70 ] ;
8142: LD_ADDR_VAR 0 9
8146: PUSH
8147: LD_INT 32
8149: PUSH
8150: LD_INT 120
8152: PUSH
8153: LD_INT 70
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: LIST
8160: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8161: LD_VAR 0 6
8165: PPUSH
8166: CALL_OW 264
8170: PUSH
8171: LD_INT 7
8173: PUSH
8174: LD_INT 28
8176: PUSH
8177: LD_INT 45
8179: PUSH
8180: LD_EXP 8
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: IN
8191: IFFALSE 8212
// points := [ 35 , 20 , 45 ] ;
8193: LD_ADDR_VAR 0 9
8197: PUSH
8198: LD_INT 35
8200: PUSH
8201: LD_INT 20
8203: PUSH
8204: LD_INT 45
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8212: LD_VAR 0 6
8216: PPUSH
8217: CALL_OW 264
8221: PUSH
8222: LD_INT 47
8224: PUSH
8225: EMPTY
8226: LIST
8227: IN
8228: IFFALSE 8249
// points := [ 67 , 45 , 75 ] ;
8230: LD_ADDR_VAR 0 9
8234: PUSH
8235: LD_INT 67
8237: PUSH
8238: LD_INT 45
8240: PUSH
8241: LD_INT 75
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: LIST
8248: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8249: LD_VAR 0 6
8253: PPUSH
8254: CALL_OW 264
8258: PUSH
8259: LD_INT 26
8261: PUSH
8262: EMPTY
8263: LIST
8264: IN
8265: IFFALSE 8286
// points := [ 120 , 30 , 80 ] ;
8267: LD_ADDR_VAR 0 9
8271: PUSH
8272: LD_INT 120
8274: PUSH
8275: LD_INT 30
8277: PUSH
8278: LD_INT 80
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8286: LD_VAR 0 6
8290: PPUSH
8291: CALL_OW 264
8295: PUSH
8296: LD_INT 22
8298: PUSH
8299: EMPTY
8300: LIST
8301: IN
8302: IFFALSE 8323
// points := [ 40 , 1 , 1 ] ;
8304: LD_ADDR_VAR 0 9
8308: PUSH
8309: LD_INT 40
8311: PUSH
8312: LD_INT 1
8314: PUSH
8315: LD_INT 1
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: LIST
8322: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8323: LD_VAR 0 6
8327: PPUSH
8328: CALL_OW 264
8332: PUSH
8333: LD_INT 29
8335: PUSH
8336: EMPTY
8337: LIST
8338: IN
8339: IFFALSE 8360
// points := [ 70 , 200 , 400 ] ;
8341: LD_ADDR_VAR 0 9
8345: PUSH
8346: LD_INT 70
8348: PUSH
8349: LD_INT 200
8351: PUSH
8352: LD_INT 400
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: LIST
8359: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8360: LD_VAR 0 6
8364: PPUSH
8365: CALL_OW 264
8369: PUSH
8370: LD_INT 14
8372: PUSH
8373: LD_INT 53
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: IN
8380: IFFALSE 8401
// points := [ 40 , 10 , 20 ] ;
8382: LD_ADDR_VAR 0 9
8386: PUSH
8387: LD_INT 40
8389: PUSH
8390: LD_INT 10
8392: PUSH
8393: LD_INT 20
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: LIST
8400: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8401: LD_VAR 0 6
8405: PPUSH
8406: CALL_OW 264
8410: PUSH
8411: LD_INT 9
8413: PUSH
8414: EMPTY
8415: LIST
8416: IN
8417: IFFALSE 8438
// points := [ 5 , 70 , 20 ] ;
8419: LD_ADDR_VAR 0 9
8423: PUSH
8424: LD_INT 5
8426: PUSH
8427: LD_INT 70
8429: PUSH
8430: LD_INT 20
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8438: LD_VAR 0 6
8442: PPUSH
8443: CALL_OW 264
8447: PUSH
8448: LD_INT 10
8450: PUSH
8451: EMPTY
8452: LIST
8453: IN
8454: IFFALSE 8475
// points := [ 35 , 110 , 70 ] ;
8456: LD_ADDR_VAR 0 9
8460: PUSH
8461: LD_INT 35
8463: PUSH
8464: LD_INT 110
8466: PUSH
8467: LD_INT 70
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8475: LD_VAR 0 6
8479: PPUSH
8480: CALL_OW 265
8484: PUSH
8485: LD_INT 25
8487: EQUAL
8488: IFFALSE 8509
// points := [ 80 , 65 , 100 ] ;
8490: LD_ADDR_VAR 0 9
8494: PUSH
8495: LD_INT 80
8497: PUSH
8498: LD_INT 65
8500: PUSH
8501: LD_INT 100
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8509: LD_VAR 0 6
8513: PPUSH
8514: CALL_OW 263
8518: PUSH
8519: LD_INT 1
8521: EQUAL
8522: IFFALSE 8557
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8524: LD_ADDR_VAR 0 10
8528: PUSH
8529: LD_VAR 0 10
8533: PUSH
8534: LD_VAR 0 6
8538: PPUSH
8539: CALL_OW 311
8543: PPUSH
8544: LD_INT 3
8546: PPUSH
8547: CALL_OW 259
8551: PUSH
8552: LD_INT 4
8554: MUL
8555: MUL
8556: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8557: LD_VAR 0 6
8561: PPUSH
8562: CALL_OW 263
8566: PUSH
8567: LD_INT 2
8569: EQUAL
8570: IFFALSE 8621
// begin j := IsControledBy ( i ) ;
8572: LD_ADDR_VAR 0 7
8576: PUSH
8577: LD_VAR 0 6
8581: PPUSH
8582: CALL_OW 312
8586: ST_TO_ADDR
// if j then
8587: LD_VAR 0 7
8591: IFFALSE 8621
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8593: LD_ADDR_VAR 0 10
8597: PUSH
8598: LD_VAR 0 10
8602: PUSH
8603: LD_VAR 0 7
8607: PPUSH
8608: LD_INT 3
8610: PPUSH
8611: CALL_OW 259
8615: PUSH
8616: LD_INT 3
8618: MUL
8619: MUL
8620: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8621: LD_VAR 0 6
8625: PPUSH
8626: CALL_OW 264
8630: PUSH
8631: LD_INT 5
8633: PUSH
8634: LD_INT 6
8636: PUSH
8637: LD_INT 46
8639: PUSH
8640: LD_INT 44
8642: PUSH
8643: LD_INT 47
8645: PUSH
8646: LD_INT 45
8648: PUSH
8649: LD_INT 28
8651: PUSH
8652: LD_INT 7
8654: PUSH
8655: LD_INT 27
8657: PUSH
8658: LD_INT 29
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: IN
8673: PUSH
8674: LD_VAR 0 1
8678: PPUSH
8679: LD_INT 52
8681: PPUSH
8682: CALL_OW 321
8686: PUSH
8687: LD_INT 2
8689: EQUAL
8690: AND
8691: IFFALSE 8708
// bpoints := bpoints * 1.2 ;
8693: LD_ADDR_VAR 0 10
8697: PUSH
8698: LD_VAR 0 10
8702: PUSH
8703: LD_REAL  1.20000000000000E+0000
8706: MUL
8707: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8708: LD_VAR 0 6
8712: PPUSH
8713: CALL_OW 264
8717: PUSH
8718: LD_INT 6
8720: PUSH
8721: LD_INT 46
8723: PUSH
8724: LD_INT 47
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: IN
8732: IFFALSE 8749
// bpoints := bpoints * 1.2 ;
8734: LD_ADDR_VAR 0 10
8738: PUSH
8739: LD_VAR 0 10
8743: PUSH
8744: LD_REAL  1.20000000000000E+0000
8747: MUL
8748: ST_TO_ADDR
// end ; unit_building :
8749: GO 8763
8751: LD_INT 3
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 8762
8759: POP
// ; end ;
8760: GO 8763
8762: POP
// for j = 1 to 3 do
8763: LD_ADDR_VAR 0 7
8767: PUSH
8768: DOUBLE
8769: LD_INT 1
8771: DEC
8772: ST_TO_ADDR
8773: LD_INT 3
8775: PUSH
8776: FOR_TO
8777: IFFALSE 8830
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8779: LD_ADDR_VAR 0 5
8783: PUSH
8784: LD_VAR 0 5
8788: PPUSH
8789: LD_VAR 0 7
8793: PPUSH
8794: LD_VAR 0 5
8798: PUSH
8799: LD_VAR 0 7
8803: ARRAY
8804: PUSH
8805: LD_VAR 0 9
8809: PUSH
8810: LD_VAR 0 7
8814: ARRAY
8815: PUSH
8816: LD_VAR 0 10
8820: MUL
8821: PLUS
8822: PPUSH
8823: CALL_OW 1
8827: ST_TO_ADDR
8828: GO 8776
8830: POP
8831: POP
// end ;
8832: GO 7309
8834: POP
8835: POP
// result := Replace ( result , 4 , tmp ) ;
8836: LD_ADDR_VAR 0 5
8840: PUSH
8841: LD_VAR 0 5
8845: PPUSH
8846: LD_INT 4
8848: PPUSH
8849: LD_VAR 0 8
8853: PPUSH
8854: CALL_OW 1
8858: ST_TO_ADDR
// end ;
8859: LD_VAR 0 5
8863: RET
// export function DangerAtRange ( unit , range ) ; begin
8864: LD_INT 0
8866: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8867: LD_ADDR_VAR 0 3
8871: PUSH
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 255
8881: PPUSH
8882: LD_VAR 0 1
8886: PPUSH
8887: CALL_OW 250
8891: PPUSH
8892: LD_VAR 0 1
8896: PPUSH
8897: CALL_OW 251
8901: PPUSH
8902: LD_VAR 0 2
8906: PPUSH
8907: CALL 7161 0 4
8911: ST_TO_ADDR
// end ;
8912: LD_VAR 0 3
8916: RET
// export function DangerInArea ( side , area ) ; begin
8917: LD_INT 0
8919: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8920: LD_ADDR_VAR 0 3
8924: PUSH
8925: LD_VAR 0 2
8929: PPUSH
8930: LD_INT 81
8932: PUSH
8933: LD_VAR 0 1
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PPUSH
8942: CALL_OW 70
8946: ST_TO_ADDR
// end ;
8947: LD_VAR 0 3
8951: RET
// export function IsExtension ( b ) ; begin
8952: LD_INT 0
8954: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8955: LD_ADDR_VAR 0 2
8959: PUSH
8960: LD_VAR 0 1
8964: PUSH
8965: LD_INT 23
8967: PUSH
8968: LD_INT 20
8970: PUSH
8971: LD_INT 22
8973: PUSH
8974: LD_INT 17
8976: PUSH
8977: LD_INT 24
8979: PUSH
8980: LD_INT 21
8982: PUSH
8983: LD_INT 19
8985: PUSH
8986: LD_INT 16
8988: PUSH
8989: LD_INT 25
8991: PUSH
8992: LD_INT 18
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: IN
9007: ST_TO_ADDR
// end ;
9008: LD_VAR 0 2
9012: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9013: LD_INT 0
9015: PPUSH
9016: PPUSH
9017: PPUSH
// result := [ ] ;
9018: LD_ADDR_VAR 0 4
9022: PUSH
9023: EMPTY
9024: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9025: LD_ADDR_VAR 0 5
9029: PUSH
9030: LD_VAR 0 2
9034: PPUSH
9035: LD_INT 21
9037: PUSH
9038: LD_INT 3
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PPUSH
9045: CALL_OW 70
9049: ST_TO_ADDR
// if not tmp then
9050: LD_VAR 0 5
9054: NOT
9055: IFFALSE 9059
// exit ;
9057: GO 9123
// if checkLink then
9059: LD_VAR 0 3
9063: IFFALSE 9113
// begin for i in tmp do
9065: LD_ADDR_VAR 0 6
9069: PUSH
9070: LD_VAR 0 5
9074: PUSH
9075: FOR_IN
9076: IFFALSE 9111
// if GetBase ( i ) <> base then
9078: LD_VAR 0 6
9082: PPUSH
9083: CALL_OW 274
9087: PUSH
9088: LD_VAR 0 1
9092: NONEQUAL
9093: IFFALSE 9109
// ComLinkToBase ( base , i ) ;
9095: LD_VAR 0 1
9099: PPUSH
9100: LD_VAR 0 6
9104: PPUSH
9105: CALL_OW 169
9109: GO 9075
9111: POP
9112: POP
// end ; result := tmp ;
9113: LD_ADDR_VAR 0 4
9117: PUSH
9118: LD_VAR 0 5
9122: ST_TO_ADDR
// end ;
9123: LD_VAR 0 4
9127: RET
// export function ComComplete ( units , b ) ; var i ; begin
9128: LD_INT 0
9130: PPUSH
9131: PPUSH
// if not units then
9132: LD_VAR 0 1
9136: NOT
9137: IFFALSE 9141
// exit ;
9139: GO 9231
// for i in units do
9141: LD_ADDR_VAR 0 4
9145: PUSH
9146: LD_VAR 0 1
9150: PUSH
9151: FOR_IN
9152: IFFALSE 9229
// if BuildingStatus ( b ) = bs_build then
9154: LD_VAR 0 2
9158: PPUSH
9159: CALL_OW 461
9163: PUSH
9164: LD_INT 1
9166: EQUAL
9167: IFFALSE 9227
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9169: LD_VAR 0 4
9173: PPUSH
9174: LD_STRING h
9176: PUSH
9177: LD_VAR 0 2
9181: PPUSH
9182: CALL_OW 250
9186: PUSH
9187: LD_VAR 0 2
9191: PPUSH
9192: CALL_OW 251
9196: PUSH
9197: LD_VAR 0 2
9201: PUSH
9202: LD_INT 0
9204: PUSH
9205: LD_INT 0
9207: PUSH
9208: LD_INT 0
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: PUSH
9220: EMPTY
9221: LIST
9222: PPUSH
9223: CALL_OW 446
9227: GO 9151
9229: POP
9230: POP
// end ;
9231: LD_VAR 0 3
9235: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9236: LD_INT 0
9238: PPUSH
9239: PPUSH
9240: PPUSH
9241: PPUSH
9242: PPUSH
9243: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9244: LD_VAR 0 1
9248: NOT
9249: PUSH
9250: LD_VAR 0 1
9254: PPUSH
9255: CALL_OW 263
9259: PUSH
9260: LD_INT 2
9262: NONEQUAL
9263: OR
9264: IFFALSE 9268
// exit ;
9266: GO 9584
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9268: LD_ADDR_VAR 0 6
9272: PUSH
9273: LD_INT 22
9275: PUSH
9276: LD_VAR 0 1
9280: PPUSH
9281: CALL_OW 255
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PUSH
9290: LD_INT 2
9292: PUSH
9293: LD_INT 30
9295: PUSH
9296: LD_INT 36
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 34
9305: PUSH
9306: LD_INT 31
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: LIST
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: PPUSH
9322: CALL_OW 69
9326: ST_TO_ADDR
// if not tmp then
9327: LD_VAR 0 6
9331: NOT
9332: IFFALSE 9336
// exit ;
9334: GO 9584
// result := [ ] ;
9336: LD_ADDR_VAR 0 2
9340: PUSH
9341: EMPTY
9342: ST_TO_ADDR
// for i in tmp do
9343: LD_ADDR_VAR 0 3
9347: PUSH
9348: LD_VAR 0 6
9352: PUSH
9353: FOR_IN
9354: IFFALSE 9425
// begin t := UnitsInside ( i ) ;
9356: LD_ADDR_VAR 0 4
9360: PUSH
9361: LD_VAR 0 3
9365: PPUSH
9366: CALL_OW 313
9370: ST_TO_ADDR
// if t then
9371: LD_VAR 0 4
9375: IFFALSE 9423
// for j in t do
9377: LD_ADDR_VAR 0 7
9381: PUSH
9382: LD_VAR 0 4
9386: PUSH
9387: FOR_IN
9388: IFFALSE 9421
// result := Replace ( result , result + 1 , j ) ;
9390: LD_ADDR_VAR 0 2
9394: PUSH
9395: LD_VAR 0 2
9399: PPUSH
9400: LD_VAR 0 2
9404: PUSH
9405: LD_INT 1
9407: PLUS
9408: PPUSH
9409: LD_VAR 0 7
9413: PPUSH
9414: CALL_OW 1
9418: ST_TO_ADDR
9419: GO 9387
9421: POP
9422: POP
// end ;
9423: GO 9353
9425: POP
9426: POP
// if not result then
9427: LD_VAR 0 2
9431: NOT
9432: IFFALSE 9436
// exit ;
9434: GO 9584
// mech := result [ 1 ] ;
9436: LD_ADDR_VAR 0 5
9440: PUSH
9441: LD_VAR 0 2
9445: PUSH
9446: LD_INT 1
9448: ARRAY
9449: ST_TO_ADDR
// if result > 1 then
9450: LD_VAR 0 2
9454: PUSH
9455: LD_INT 1
9457: GREATER
9458: IFFALSE 9570
// begin for i = 2 to result do
9460: LD_ADDR_VAR 0 3
9464: PUSH
9465: DOUBLE
9466: LD_INT 2
9468: DEC
9469: ST_TO_ADDR
9470: LD_VAR 0 2
9474: PUSH
9475: FOR_TO
9476: IFFALSE 9568
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9478: LD_ADDR_VAR 0 4
9482: PUSH
9483: LD_VAR 0 2
9487: PUSH
9488: LD_VAR 0 3
9492: ARRAY
9493: PPUSH
9494: LD_INT 3
9496: PPUSH
9497: CALL_OW 259
9501: PUSH
9502: LD_VAR 0 2
9506: PUSH
9507: LD_VAR 0 3
9511: ARRAY
9512: PPUSH
9513: CALL_OW 432
9517: MINUS
9518: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9519: LD_VAR 0 4
9523: PUSH
9524: LD_VAR 0 5
9528: PPUSH
9529: LD_INT 3
9531: PPUSH
9532: CALL_OW 259
9536: PUSH
9537: LD_VAR 0 5
9541: PPUSH
9542: CALL_OW 432
9546: MINUS
9547: GREATEREQUAL
9548: IFFALSE 9566
// mech := result [ i ] ;
9550: LD_ADDR_VAR 0 5
9554: PUSH
9555: LD_VAR 0 2
9559: PUSH
9560: LD_VAR 0 3
9564: ARRAY
9565: ST_TO_ADDR
// end ;
9566: GO 9475
9568: POP
9569: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9570: LD_VAR 0 1
9574: PPUSH
9575: LD_VAR 0 5
9579: PPUSH
9580: CALL_OW 135
// end ;
9584: LD_VAR 0 2
9588: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9589: LD_INT 0
9591: PPUSH
9592: PPUSH
9593: PPUSH
9594: PPUSH
9595: PPUSH
9596: PPUSH
9597: PPUSH
9598: PPUSH
9599: PPUSH
9600: PPUSH
9601: PPUSH
9602: PPUSH
9603: PPUSH
// result := [ ] ;
9604: LD_ADDR_VAR 0 7
9608: PUSH
9609: EMPTY
9610: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9611: LD_VAR 0 1
9615: PPUSH
9616: CALL_OW 266
9620: PUSH
9621: LD_INT 0
9623: PUSH
9624: LD_INT 1
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: IN
9631: NOT
9632: IFFALSE 9636
// exit ;
9634: GO 11270
// if name then
9636: LD_VAR 0 3
9640: IFFALSE 9656
// SetBName ( base_dep , name ) ;
9642: LD_VAR 0 1
9646: PPUSH
9647: LD_VAR 0 3
9651: PPUSH
9652: CALL_OW 500
// base := GetBase ( base_dep ) ;
9656: LD_ADDR_VAR 0 15
9660: PUSH
9661: LD_VAR 0 1
9665: PPUSH
9666: CALL_OW 274
9670: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9671: LD_ADDR_VAR 0 16
9675: PUSH
9676: LD_VAR 0 1
9680: PPUSH
9681: CALL_OW 255
9685: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9686: LD_ADDR_VAR 0 17
9690: PUSH
9691: LD_VAR 0 1
9695: PPUSH
9696: CALL_OW 248
9700: ST_TO_ADDR
// if sources then
9701: LD_VAR 0 5
9705: IFFALSE 9752
// for i = 1 to 3 do
9707: LD_ADDR_VAR 0 8
9711: PUSH
9712: DOUBLE
9713: LD_INT 1
9715: DEC
9716: ST_TO_ADDR
9717: LD_INT 3
9719: PUSH
9720: FOR_TO
9721: IFFALSE 9750
// AddResourceType ( base , i , sources [ i ] ) ;
9723: LD_VAR 0 15
9727: PPUSH
9728: LD_VAR 0 8
9732: PPUSH
9733: LD_VAR 0 5
9737: PUSH
9738: LD_VAR 0 8
9742: ARRAY
9743: PPUSH
9744: CALL_OW 276
9748: GO 9720
9750: POP
9751: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9752: LD_ADDR_VAR 0 18
9756: PUSH
9757: LD_VAR 0 15
9761: PPUSH
9762: LD_VAR 0 2
9766: PPUSH
9767: LD_INT 1
9769: PPUSH
9770: CALL 9013 0 3
9774: ST_TO_ADDR
// InitHc ;
9775: CALL_OW 19
// InitUc ;
9779: CALL_OW 18
// uc_side := side ;
9783: LD_ADDR_OWVAR 20
9787: PUSH
9788: LD_VAR 0 16
9792: ST_TO_ADDR
// uc_nation := nation ;
9793: LD_ADDR_OWVAR 21
9797: PUSH
9798: LD_VAR 0 17
9802: ST_TO_ADDR
// if buildings then
9803: LD_VAR 0 18
9807: IFFALSE 11129
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9809: LD_ADDR_VAR 0 19
9813: PUSH
9814: LD_VAR 0 18
9818: PPUSH
9819: LD_INT 2
9821: PUSH
9822: LD_INT 30
9824: PUSH
9825: LD_INT 29
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: LD_INT 30
9834: PUSH
9835: LD_INT 30
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: PPUSH
9847: CALL_OW 72
9851: ST_TO_ADDR
// if tmp then
9852: LD_VAR 0 19
9856: IFFALSE 9904
// for i in tmp do
9858: LD_ADDR_VAR 0 8
9862: PUSH
9863: LD_VAR 0 19
9867: PUSH
9868: FOR_IN
9869: IFFALSE 9902
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9871: LD_VAR 0 8
9875: PPUSH
9876: CALL_OW 250
9880: PPUSH
9881: LD_VAR 0 8
9885: PPUSH
9886: CALL_OW 251
9890: PPUSH
9891: LD_VAR 0 16
9895: PPUSH
9896: CALL_OW 441
9900: GO 9868
9902: POP
9903: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9904: LD_VAR 0 18
9908: PPUSH
9909: LD_INT 2
9911: PUSH
9912: LD_INT 30
9914: PUSH
9915: LD_INT 32
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PUSH
9922: LD_INT 30
9924: PUSH
9925: LD_INT 33
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 72
9941: IFFALSE 10029
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9943: LD_ADDR_VAR 0 8
9947: PUSH
9948: LD_VAR 0 18
9952: PPUSH
9953: LD_INT 2
9955: PUSH
9956: LD_INT 30
9958: PUSH
9959: LD_INT 32
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 30
9968: PUSH
9969: LD_INT 33
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: LIST
9980: PPUSH
9981: CALL_OW 72
9985: PUSH
9986: FOR_IN
9987: IFFALSE 10027
// begin if not GetBWeapon ( i ) then
9989: LD_VAR 0 8
9993: PPUSH
9994: CALL_OW 269
9998: NOT
9999: IFFALSE 10025
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10001: LD_VAR 0 8
10005: PPUSH
10006: LD_VAR 0 8
10010: PPUSH
10011: LD_VAR 0 2
10015: PPUSH
10016: CALL 11275 0 2
10020: PPUSH
10021: CALL_OW 431
// end ;
10025: GO 9986
10027: POP
10028: POP
// end ; for i = 1 to personel do
10029: LD_ADDR_VAR 0 8
10033: PUSH
10034: DOUBLE
10035: LD_INT 1
10037: DEC
10038: ST_TO_ADDR
10039: LD_VAR 0 6
10043: PUSH
10044: FOR_TO
10045: IFFALSE 11109
// begin if i > 4 then
10047: LD_VAR 0 8
10051: PUSH
10052: LD_INT 4
10054: GREATER
10055: IFFALSE 10059
// break ;
10057: GO 11109
// case i of 1 :
10059: LD_VAR 0 8
10063: PUSH
10064: LD_INT 1
10066: DOUBLE
10067: EQUAL
10068: IFTRUE 10072
10070: GO 10152
10072: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10073: LD_ADDR_VAR 0 12
10077: PUSH
10078: LD_VAR 0 18
10082: PPUSH
10083: LD_INT 22
10085: PUSH
10086: LD_VAR 0 16
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 58
10097: PUSH
10098: EMPTY
10099: LIST
10100: PUSH
10101: LD_INT 2
10103: PUSH
10104: LD_INT 30
10106: PUSH
10107: LD_INT 32
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 30
10116: PUSH
10117: LD_INT 4
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 30
10126: PUSH
10127: LD_INT 5
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL_OW 72
10149: ST_TO_ADDR
10150: GO 10374
10152: LD_INT 2
10154: DOUBLE
10155: EQUAL
10156: IFTRUE 10160
10158: GO 10222
10160: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10161: LD_ADDR_VAR 0 12
10165: PUSH
10166: LD_VAR 0 18
10170: PPUSH
10171: LD_INT 22
10173: PUSH
10174: LD_VAR 0 16
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: LD_INT 2
10185: PUSH
10186: LD_INT 30
10188: PUSH
10189: LD_INT 0
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PUSH
10196: LD_INT 30
10198: PUSH
10199: LD_INT 1
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PPUSH
10215: CALL_OW 72
10219: ST_TO_ADDR
10220: GO 10374
10222: LD_INT 3
10224: DOUBLE
10225: EQUAL
10226: IFTRUE 10230
10228: GO 10292
10230: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10231: LD_ADDR_VAR 0 12
10235: PUSH
10236: LD_VAR 0 18
10240: PPUSH
10241: LD_INT 22
10243: PUSH
10244: LD_VAR 0 16
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 2
10255: PUSH
10256: LD_INT 30
10258: PUSH
10259: LD_INT 2
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: LD_INT 30
10268: PUSH
10269: LD_INT 3
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: LIST
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 72
10289: ST_TO_ADDR
10290: GO 10374
10292: LD_INT 4
10294: DOUBLE
10295: EQUAL
10296: IFTRUE 10300
10298: GO 10373
10300: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10301: LD_ADDR_VAR 0 12
10305: PUSH
10306: LD_VAR 0 18
10310: PPUSH
10311: LD_INT 22
10313: PUSH
10314: LD_VAR 0 16
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PUSH
10323: LD_INT 2
10325: PUSH
10326: LD_INT 30
10328: PUSH
10329: LD_INT 6
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: LD_INT 30
10338: PUSH
10339: LD_INT 7
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 30
10348: PUSH
10349: LD_INT 8
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PPUSH
10366: CALL_OW 72
10370: ST_TO_ADDR
10371: GO 10374
10373: POP
// if i = 1 then
10374: LD_VAR 0 8
10378: PUSH
10379: LD_INT 1
10381: EQUAL
10382: IFFALSE 10493
// begin tmp := [ ] ;
10384: LD_ADDR_VAR 0 19
10388: PUSH
10389: EMPTY
10390: ST_TO_ADDR
// for j in f do
10391: LD_ADDR_VAR 0 9
10395: PUSH
10396: LD_VAR 0 12
10400: PUSH
10401: FOR_IN
10402: IFFALSE 10475
// if GetBType ( j ) = b_bunker then
10404: LD_VAR 0 9
10408: PPUSH
10409: CALL_OW 266
10413: PUSH
10414: LD_INT 32
10416: EQUAL
10417: IFFALSE 10444
// tmp := Insert ( tmp , 1 , j ) else
10419: LD_ADDR_VAR 0 19
10423: PUSH
10424: LD_VAR 0 19
10428: PPUSH
10429: LD_INT 1
10431: PPUSH
10432: LD_VAR 0 9
10436: PPUSH
10437: CALL_OW 2
10441: ST_TO_ADDR
10442: GO 10473
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10444: LD_ADDR_VAR 0 19
10448: PUSH
10449: LD_VAR 0 19
10453: PPUSH
10454: LD_VAR 0 19
10458: PUSH
10459: LD_INT 1
10461: PLUS
10462: PPUSH
10463: LD_VAR 0 9
10467: PPUSH
10468: CALL_OW 2
10472: ST_TO_ADDR
10473: GO 10401
10475: POP
10476: POP
// if tmp then
10477: LD_VAR 0 19
10481: IFFALSE 10493
// f := tmp ;
10483: LD_ADDR_VAR 0 12
10487: PUSH
10488: LD_VAR 0 19
10492: ST_TO_ADDR
// end ; x := personel [ i ] ;
10493: LD_ADDR_VAR 0 13
10497: PUSH
10498: LD_VAR 0 6
10502: PUSH
10503: LD_VAR 0 8
10507: ARRAY
10508: ST_TO_ADDR
// if x = - 1 then
10509: LD_VAR 0 13
10513: PUSH
10514: LD_INT 1
10516: NEG
10517: EQUAL
10518: IFFALSE 10727
// begin for j in f do
10520: LD_ADDR_VAR 0 9
10524: PUSH
10525: LD_VAR 0 12
10529: PUSH
10530: FOR_IN
10531: IFFALSE 10723
// repeat InitHc ;
10533: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10537: LD_VAR 0 9
10541: PPUSH
10542: CALL_OW 266
10546: PUSH
10547: LD_INT 5
10549: EQUAL
10550: IFFALSE 10620
// begin if UnitsInside ( j ) < 3 then
10552: LD_VAR 0 9
10556: PPUSH
10557: CALL_OW 313
10561: PUSH
10562: LD_INT 3
10564: LESS
10565: IFFALSE 10601
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10567: LD_INT 0
10569: PPUSH
10570: LD_INT 5
10572: PUSH
10573: LD_INT 8
10575: PUSH
10576: LD_INT 9
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: LIST
10583: PUSH
10584: LD_VAR 0 17
10588: ARRAY
10589: PPUSH
10590: LD_VAR 0 4
10594: PPUSH
10595: CALL_OW 380
10599: GO 10618
// PrepareHuman ( false , i , skill ) ;
10601: LD_INT 0
10603: PPUSH
10604: LD_VAR 0 8
10608: PPUSH
10609: LD_VAR 0 4
10613: PPUSH
10614: CALL_OW 380
// end else
10618: GO 10637
// PrepareHuman ( false , i , skill ) ;
10620: LD_INT 0
10622: PPUSH
10623: LD_VAR 0 8
10627: PPUSH
10628: LD_VAR 0 4
10632: PPUSH
10633: CALL_OW 380
// un := CreateHuman ;
10637: LD_ADDR_VAR 0 14
10641: PUSH
10642: CALL_OW 44
10646: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10647: LD_ADDR_VAR 0 7
10651: PUSH
10652: LD_VAR 0 7
10656: PPUSH
10657: LD_INT 1
10659: PPUSH
10660: LD_VAR 0 14
10664: PPUSH
10665: CALL_OW 2
10669: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10670: LD_VAR 0 14
10674: PPUSH
10675: LD_VAR 0 9
10679: PPUSH
10680: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10684: LD_VAR 0 9
10688: PPUSH
10689: CALL_OW 313
10693: PUSH
10694: LD_INT 6
10696: EQUAL
10697: PUSH
10698: LD_VAR 0 9
10702: PPUSH
10703: CALL_OW 266
10707: PUSH
10708: LD_INT 32
10710: PUSH
10711: LD_INT 31
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: IN
10718: OR
10719: IFFALSE 10533
10721: GO 10530
10723: POP
10724: POP
// end else
10725: GO 11107
// for j = 1 to x do
10727: LD_ADDR_VAR 0 9
10731: PUSH
10732: DOUBLE
10733: LD_INT 1
10735: DEC
10736: ST_TO_ADDR
10737: LD_VAR 0 13
10741: PUSH
10742: FOR_TO
10743: IFFALSE 11105
// begin InitHc ;
10745: CALL_OW 19
// if not f then
10749: LD_VAR 0 12
10753: NOT
10754: IFFALSE 10843
// begin PrepareHuman ( false , i , skill ) ;
10756: LD_INT 0
10758: PPUSH
10759: LD_VAR 0 8
10763: PPUSH
10764: LD_VAR 0 4
10768: PPUSH
10769: CALL_OW 380
// un := CreateHuman ;
10773: LD_ADDR_VAR 0 14
10777: PUSH
10778: CALL_OW 44
10782: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10783: LD_ADDR_VAR 0 7
10787: PUSH
10788: LD_VAR 0 7
10792: PPUSH
10793: LD_INT 1
10795: PPUSH
10796: LD_VAR 0 14
10800: PPUSH
10801: CALL_OW 2
10805: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10806: LD_VAR 0 14
10810: PPUSH
10811: LD_VAR 0 1
10815: PPUSH
10816: CALL_OW 250
10820: PPUSH
10821: LD_VAR 0 1
10825: PPUSH
10826: CALL_OW 251
10830: PPUSH
10831: LD_INT 10
10833: PPUSH
10834: LD_INT 0
10836: PPUSH
10837: CALL_OW 50
// continue ;
10841: GO 10742
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10843: LD_VAR 0 12
10847: PUSH
10848: LD_INT 1
10850: ARRAY
10851: PPUSH
10852: CALL_OW 313
10856: PUSH
10857: LD_VAR 0 12
10861: PUSH
10862: LD_INT 1
10864: ARRAY
10865: PPUSH
10866: CALL_OW 266
10870: PUSH
10871: LD_INT 32
10873: PUSH
10874: LD_INT 31
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: IN
10881: AND
10882: PUSH
10883: LD_VAR 0 12
10887: PUSH
10888: LD_INT 1
10890: ARRAY
10891: PPUSH
10892: CALL_OW 313
10896: PUSH
10897: LD_INT 6
10899: EQUAL
10900: OR
10901: IFFALSE 10921
// f := Delete ( f , 1 ) ;
10903: LD_ADDR_VAR 0 12
10907: PUSH
10908: LD_VAR 0 12
10912: PPUSH
10913: LD_INT 1
10915: PPUSH
10916: CALL_OW 3
10920: ST_TO_ADDR
// if not f then
10921: LD_VAR 0 12
10925: NOT
10926: IFFALSE 10944
// begin x := x + 2 ;
10928: LD_ADDR_VAR 0 13
10932: PUSH
10933: LD_VAR 0 13
10937: PUSH
10938: LD_INT 2
10940: PLUS
10941: ST_TO_ADDR
// continue ;
10942: GO 10742
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10944: LD_VAR 0 12
10948: PUSH
10949: LD_INT 1
10951: ARRAY
10952: PPUSH
10953: CALL_OW 266
10957: PUSH
10958: LD_INT 5
10960: EQUAL
10961: IFFALSE 11035
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10963: LD_VAR 0 12
10967: PUSH
10968: LD_INT 1
10970: ARRAY
10971: PPUSH
10972: CALL_OW 313
10976: PUSH
10977: LD_INT 3
10979: LESS
10980: IFFALSE 11016
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10982: LD_INT 0
10984: PPUSH
10985: LD_INT 5
10987: PUSH
10988: LD_INT 8
10990: PUSH
10991: LD_INT 9
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: LIST
10998: PUSH
10999: LD_VAR 0 17
11003: ARRAY
11004: PPUSH
11005: LD_VAR 0 4
11009: PPUSH
11010: CALL_OW 380
11014: GO 11033
// PrepareHuman ( false , i , skill ) ;
11016: LD_INT 0
11018: PPUSH
11019: LD_VAR 0 8
11023: PPUSH
11024: LD_VAR 0 4
11028: PPUSH
11029: CALL_OW 380
// end else
11033: GO 11052
// PrepareHuman ( false , i , skill ) ;
11035: LD_INT 0
11037: PPUSH
11038: LD_VAR 0 8
11042: PPUSH
11043: LD_VAR 0 4
11047: PPUSH
11048: CALL_OW 380
// un := CreateHuman ;
11052: LD_ADDR_VAR 0 14
11056: PUSH
11057: CALL_OW 44
11061: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11062: LD_ADDR_VAR 0 7
11066: PUSH
11067: LD_VAR 0 7
11071: PPUSH
11072: LD_INT 1
11074: PPUSH
11075: LD_VAR 0 14
11079: PPUSH
11080: CALL_OW 2
11084: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11085: LD_VAR 0 14
11089: PPUSH
11090: LD_VAR 0 12
11094: PUSH
11095: LD_INT 1
11097: ARRAY
11098: PPUSH
11099: CALL_OW 52
// end ;
11103: GO 10742
11105: POP
11106: POP
// end ;
11107: GO 10044
11109: POP
11110: POP
// result := result ^ buildings ;
11111: LD_ADDR_VAR 0 7
11115: PUSH
11116: LD_VAR 0 7
11120: PUSH
11121: LD_VAR 0 18
11125: ADD
11126: ST_TO_ADDR
// end else
11127: GO 11270
// begin for i = 1 to personel do
11129: LD_ADDR_VAR 0 8
11133: PUSH
11134: DOUBLE
11135: LD_INT 1
11137: DEC
11138: ST_TO_ADDR
11139: LD_VAR 0 6
11143: PUSH
11144: FOR_TO
11145: IFFALSE 11268
// begin if i > 4 then
11147: LD_VAR 0 8
11151: PUSH
11152: LD_INT 4
11154: GREATER
11155: IFFALSE 11159
// break ;
11157: GO 11268
// x := personel [ i ] ;
11159: LD_ADDR_VAR 0 13
11163: PUSH
11164: LD_VAR 0 6
11168: PUSH
11169: LD_VAR 0 8
11173: ARRAY
11174: ST_TO_ADDR
// if x = - 1 then
11175: LD_VAR 0 13
11179: PUSH
11180: LD_INT 1
11182: NEG
11183: EQUAL
11184: IFFALSE 11188
// continue ;
11186: GO 11144
// PrepareHuman ( false , i , skill ) ;
11188: LD_INT 0
11190: PPUSH
11191: LD_VAR 0 8
11195: PPUSH
11196: LD_VAR 0 4
11200: PPUSH
11201: CALL_OW 380
// un := CreateHuman ;
11205: LD_ADDR_VAR 0 14
11209: PUSH
11210: CALL_OW 44
11214: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11215: LD_VAR 0 14
11219: PPUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 250
11229: PPUSH
11230: LD_VAR 0 1
11234: PPUSH
11235: CALL_OW 251
11239: PPUSH
11240: LD_INT 10
11242: PPUSH
11243: LD_INT 0
11245: PPUSH
11246: CALL_OW 50
// result := result ^ un ;
11250: LD_ADDR_VAR 0 7
11254: PUSH
11255: LD_VAR 0 7
11259: PUSH
11260: LD_VAR 0 14
11264: ADD
11265: ST_TO_ADDR
// end ;
11266: GO 11144
11268: POP
11269: POP
// end ; end ;
11270: LD_VAR 0 7
11274: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11275: LD_INT 0
11277: PPUSH
11278: PPUSH
11279: PPUSH
11280: PPUSH
11281: PPUSH
11282: PPUSH
11283: PPUSH
11284: PPUSH
11285: PPUSH
11286: PPUSH
11287: PPUSH
11288: PPUSH
11289: PPUSH
11290: PPUSH
11291: PPUSH
11292: PPUSH
// result := false ;
11293: LD_ADDR_VAR 0 3
11297: PUSH
11298: LD_INT 0
11300: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11301: LD_VAR 0 1
11305: NOT
11306: PUSH
11307: LD_VAR 0 1
11311: PPUSH
11312: CALL_OW 266
11316: PUSH
11317: LD_INT 32
11319: PUSH
11320: LD_INT 33
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: IN
11327: NOT
11328: OR
11329: IFFALSE 11333
// exit ;
11331: GO 12442
// nat := GetNation ( tower ) ;
11333: LD_ADDR_VAR 0 12
11337: PUSH
11338: LD_VAR 0 1
11342: PPUSH
11343: CALL_OW 248
11347: ST_TO_ADDR
// side := GetSide ( tower ) ;
11348: LD_ADDR_VAR 0 16
11352: PUSH
11353: LD_VAR 0 1
11357: PPUSH
11358: CALL_OW 255
11362: ST_TO_ADDR
// x := GetX ( tower ) ;
11363: LD_ADDR_VAR 0 10
11367: PUSH
11368: LD_VAR 0 1
11372: PPUSH
11373: CALL_OW 250
11377: ST_TO_ADDR
// y := GetY ( tower ) ;
11378: LD_ADDR_VAR 0 11
11382: PUSH
11383: LD_VAR 0 1
11387: PPUSH
11388: CALL_OW 251
11392: ST_TO_ADDR
// if not x or not y then
11393: LD_VAR 0 10
11397: NOT
11398: PUSH
11399: LD_VAR 0 11
11403: NOT
11404: OR
11405: IFFALSE 11409
// exit ;
11407: GO 12442
// weapon := 0 ;
11409: LD_ADDR_VAR 0 18
11413: PUSH
11414: LD_INT 0
11416: ST_TO_ADDR
// fac_list := [ ] ;
11417: LD_ADDR_VAR 0 17
11421: PUSH
11422: EMPTY
11423: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11424: LD_ADDR_VAR 0 6
11428: PUSH
11429: LD_VAR 0 1
11433: PPUSH
11434: CALL_OW 274
11438: PPUSH
11439: LD_VAR 0 2
11443: PPUSH
11444: LD_INT 0
11446: PPUSH
11447: CALL 9013 0 3
11451: PPUSH
11452: LD_INT 30
11454: PUSH
11455: LD_INT 3
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PPUSH
11462: CALL_OW 72
11466: ST_TO_ADDR
// if not factories then
11467: LD_VAR 0 6
11471: NOT
11472: IFFALSE 11476
// exit ;
11474: GO 12442
// for i in factories do
11476: LD_ADDR_VAR 0 8
11480: PUSH
11481: LD_VAR 0 6
11485: PUSH
11486: FOR_IN
11487: IFFALSE 11512
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11489: LD_ADDR_VAR 0 17
11493: PUSH
11494: LD_VAR 0 17
11498: PUSH
11499: LD_VAR 0 8
11503: PPUSH
11504: CALL_OW 478
11508: UNION
11509: ST_TO_ADDR
11510: GO 11486
11512: POP
11513: POP
// if not fac_list then
11514: LD_VAR 0 17
11518: NOT
11519: IFFALSE 11523
// exit ;
11521: GO 12442
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11523: LD_ADDR_VAR 0 5
11527: PUSH
11528: LD_INT 4
11530: PUSH
11531: LD_INT 5
11533: PUSH
11534: LD_INT 9
11536: PUSH
11537: LD_INT 10
11539: PUSH
11540: LD_INT 6
11542: PUSH
11543: LD_INT 7
11545: PUSH
11546: LD_INT 11
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: PUSH
11558: LD_INT 27
11560: PUSH
11561: LD_INT 28
11563: PUSH
11564: LD_INT 26
11566: PUSH
11567: LD_INT 30
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 43
11578: PUSH
11579: LD_INT 44
11581: PUSH
11582: LD_INT 46
11584: PUSH
11585: LD_INT 45
11587: PUSH
11588: LD_INT 47
11590: PUSH
11591: LD_INT 49
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: LIST
11606: PUSH
11607: LD_VAR 0 12
11611: ARRAY
11612: ST_TO_ADDR
// list := list isect fac_list ;
11613: LD_ADDR_VAR 0 5
11617: PUSH
11618: LD_VAR 0 5
11622: PUSH
11623: LD_VAR 0 17
11627: ISECT
11628: ST_TO_ADDR
// if not list then
11629: LD_VAR 0 5
11633: NOT
11634: IFFALSE 11638
// exit ;
11636: GO 12442
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11638: LD_VAR 0 12
11642: PUSH
11643: LD_INT 3
11645: EQUAL
11646: PUSH
11647: LD_INT 49
11649: PUSH
11650: LD_VAR 0 5
11654: IN
11655: AND
11656: PUSH
11657: LD_INT 31
11659: PPUSH
11660: LD_VAR 0 16
11664: PPUSH
11665: CALL_OW 321
11669: PUSH
11670: LD_INT 2
11672: EQUAL
11673: AND
11674: IFFALSE 11734
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11676: LD_INT 22
11678: PUSH
11679: LD_VAR 0 16
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: LD_INT 35
11690: PUSH
11691: LD_INT 49
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PUSH
11698: LD_INT 91
11700: PUSH
11701: LD_VAR 0 1
11705: PUSH
11706: LD_INT 10
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: LIST
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: LIST
11718: PPUSH
11719: CALL_OW 69
11723: NOT
11724: IFFALSE 11734
// weapon := ru_time_lapser ;
11726: LD_ADDR_VAR 0 18
11730: PUSH
11731: LD_INT 49
11733: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11734: LD_VAR 0 12
11738: PUSH
11739: LD_INT 1
11741: PUSH
11742: LD_INT 2
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: IN
11749: PUSH
11750: LD_INT 11
11752: PUSH
11753: LD_VAR 0 5
11757: IN
11758: PUSH
11759: LD_INT 30
11761: PUSH
11762: LD_VAR 0 5
11766: IN
11767: OR
11768: AND
11769: PUSH
11770: LD_INT 6
11772: PPUSH
11773: LD_VAR 0 16
11777: PPUSH
11778: CALL_OW 321
11782: PUSH
11783: LD_INT 2
11785: EQUAL
11786: AND
11787: IFFALSE 11952
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11789: LD_INT 22
11791: PUSH
11792: LD_VAR 0 16
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 2
11803: PUSH
11804: LD_INT 35
11806: PUSH
11807: LD_INT 11
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: LD_INT 35
11816: PUSH
11817: LD_INT 30
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: LIST
11828: PUSH
11829: LD_INT 91
11831: PUSH
11832: LD_VAR 0 1
11836: PUSH
11837: LD_INT 18
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: LIST
11849: PPUSH
11850: CALL_OW 69
11854: NOT
11855: PUSH
11856: LD_INT 22
11858: PUSH
11859: LD_VAR 0 16
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PUSH
11868: LD_INT 2
11870: PUSH
11871: LD_INT 30
11873: PUSH
11874: LD_INT 32
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: LD_INT 30
11883: PUSH
11884: LD_INT 33
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: LIST
11895: PUSH
11896: LD_INT 91
11898: PUSH
11899: LD_VAR 0 1
11903: PUSH
11904: LD_INT 12
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: LIST
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: LIST
11916: PUSH
11917: EMPTY
11918: LIST
11919: PPUSH
11920: CALL_OW 69
11924: PUSH
11925: LD_INT 2
11927: GREATER
11928: AND
11929: IFFALSE 11952
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11931: LD_ADDR_VAR 0 18
11935: PUSH
11936: LD_INT 11
11938: PUSH
11939: LD_INT 30
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: LD_VAR 0 12
11950: ARRAY
11951: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11952: LD_VAR 0 18
11956: NOT
11957: PUSH
11958: LD_INT 40
11960: PPUSH
11961: LD_VAR 0 16
11965: PPUSH
11966: CALL_OW 321
11970: PUSH
11971: LD_INT 2
11973: EQUAL
11974: AND
11975: PUSH
11976: LD_INT 7
11978: PUSH
11979: LD_VAR 0 5
11983: IN
11984: PUSH
11985: LD_INT 28
11987: PUSH
11988: LD_VAR 0 5
11992: IN
11993: OR
11994: PUSH
11995: LD_INT 45
11997: PUSH
11998: LD_VAR 0 5
12002: IN
12003: OR
12004: AND
12005: IFFALSE 12259
// begin hex := GetHexInfo ( x , y ) ;
12007: LD_ADDR_VAR 0 4
12011: PUSH
12012: LD_VAR 0 10
12016: PPUSH
12017: LD_VAR 0 11
12021: PPUSH
12022: CALL_OW 546
12026: ST_TO_ADDR
// if hex [ 1 ] then
12027: LD_VAR 0 4
12031: PUSH
12032: LD_INT 1
12034: ARRAY
12035: IFFALSE 12039
// exit ;
12037: GO 12442
// height := hex [ 2 ] ;
12039: LD_ADDR_VAR 0 15
12043: PUSH
12044: LD_VAR 0 4
12048: PUSH
12049: LD_INT 2
12051: ARRAY
12052: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12053: LD_ADDR_VAR 0 14
12057: PUSH
12058: LD_INT 0
12060: PUSH
12061: LD_INT 2
12063: PUSH
12064: LD_INT 3
12066: PUSH
12067: LD_INT 5
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: ST_TO_ADDR
// for i in tmp do
12076: LD_ADDR_VAR 0 8
12080: PUSH
12081: LD_VAR 0 14
12085: PUSH
12086: FOR_IN
12087: IFFALSE 12257
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12089: LD_ADDR_VAR 0 9
12093: PUSH
12094: LD_VAR 0 10
12098: PPUSH
12099: LD_VAR 0 8
12103: PPUSH
12104: LD_INT 5
12106: PPUSH
12107: CALL_OW 272
12111: PUSH
12112: LD_VAR 0 11
12116: PPUSH
12117: LD_VAR 0 8
12121: PPUSH
12122: LD_INT 5
12124: PPUSH
12125: CALL_OW 273
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12134: LD_VAR 0 9
12138: PUSH
12139: LD_INT 1
12141: ARRAY
12142: PPUSH
12143: LD_VAR 0 9
12147: PUSH
12148: LD_INT 2
12150: ARRAY
12151: PPUSH
12152: CALL_OW 488
12156: IFFALSE 12255
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12158: LD_ADDR_VAR 0 4
12162: PUSH
12163: LD_VAR 0 9
12167: PUSH
12168: LD_INT 1
12170: ARRAY
12171: PPUSH
12172: LD_VAR 0 9
12176: PUSH
12177: LD_INT 2
12179: ARRAY
12180: PPUSH
12181: CALL_OW 546
12185: ST_TO_ADDR
// if hex [ 1 ] then
12186: LD_VAR 0 4
12190: PUSH
12191: LD_INT 1
12193: ARRAY
12194: IFFALSE 12198
// continue ;
12196: GO 12086
// h := hex [ 2 ] ;
12198: LD_ADDR_VAR 0 13
12202: PUSH
12203: LD_VAR 0 4
12207: PUSH
12208: LD_INT 2
12210: ARRAY
12211: ST_TO_ADDR
// if h + 7 < height then
12212: LD_VAR 0 13
12216: PUSH
12217: LD_INT 7
12219: PLUS
12220: PUSH
12221: LD_VAR 0 15
12225: LESS
12226: IFFALSE 12255
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12228: LD_ADDR_VAR 0 18
12232: PUSH
12233: LD_INT 7
12235: PUSH
12236: LD_INT 28
12238: PUSH
12239: LD_INT 45
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: LIST
12246: PUSH
12247: LD_VAR 0 12
12251: ARRAY
12252: ST_TO_ADDR
// break ;
12253: GO 12257
// end ; end ; end ;
12255: GO 12086
12257: POP
12258: POP
// end ; if not weapon then
12259: LD_VAR 0 18
12263: NOT
12264: IFFALSE 12324
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12266: LD_ADDR_VAR 0 5
12270: PUSH
12271: LD_VAR 0 5
12275: PUSH
12276: LD_INT 11
12278: PUSH
12279: LD_INT 30
12281: PUSH
12282: LD_INT 49
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: LIST
12289: DIFF
12290: ST_TO_ADDR
// if not list then
12291: LD_VAR 0 5
12295: NOT
12296: IFFALSE 12300
// exit ;
12298: GO 12442
// weapon := list [ rand ( 1 , list ) ] ;
12300: LD_ADDR_VAR 0 18
12304: PUSH
12305: LD_VAR 0 5
12309: PUSH
12310: LD_INT 1
12312: PPUSH
12313: LD_VAR 0 5
12317: PPUSH
12318: CALL_OW 12
12322: ARRAY
12323: ST_TO_ADDR
// end ; if weapon then
12324: LD_VAR 0 18
12328: IFFALSE 12442
// begin tmp := CostOfWeapon ( weapon ) ;
12330: LD_ADDR_VAR 0 14
12334: PUSH
12335: LD_VAR 0 18
12339: PPUSH
12340: CALL_OW 451
12344: ST_TO_ADDR
// j := GetBase ( tower ) ;
12345: LD_ADDR_VAR 0 9
12349: PUSH
12350: LD_VAR 0 1
12354: PPUSH
12355: CALL_OW 274
12359: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12360: LD_VAR 0 9
12364: PPUSH
12365: LD_INT 1
12367: PPUSH
12368: CALL_OW 275
12372: PUSH
12373: LD_VAR 0 14
12377: PUSH
12378: LD_INT 1
12380: ARRAY
12381: GREATEREQUAL
12382: PUSH
12383: LD_VAR 0 9
12387: PPUSH
12388: LD_INT 2
12390: PPUSH
12391: CALL_OW 275
12395: PUSH
12396: LD_VAR 0 14
12400: PUSH
12401: LD_INT 2
12403: ARRAY
12404: GREATEREQUAL
12405: AND
12406: PUSH
12407: LD_VAR 0 9
12411: PPUSH
12412: LD_INT 3
12414: PPUSH
12415: CALL_OW 275
12419: PUSH
12420: LD_VAR 0 14
12424: PUSH
12425: LD_INT 3
12427: ARRAY
12428: GREATEREQUAL
12429: AND
12430: IFFALSE 12442
// result := weapon ;
12432: LD_ADDR_VAR 0 3
12436: PUSH
12437: LD_VAR 0 18
12441: ST_TO_ADDR
// end ; end ;
12442: LD_VAR 0 3
12446: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12447: LD_INT 0
12449: PPUSH
12450: PPUSH
// result := true ;
12451: LD_ADDR_VAR 0 3
12455: PUSH
12456: LD_INT 1
12458: ST_TO_ADDR
// if array1 = array2 then
12459: LD_VAR 0 1
12463: PUSH
12464: LD_VAR 0 2
12468: EQUAL
12469: IFFALSE 12529
// begin for i = 1 to array1 do
12471: LD_ADDR_VAR 0 4
12475: PUSH
12476: DOUBLE
12477: LD_INT 1
12479: DEC
12480: ST_TO_ADDR
12481: LD_VAR 0 1
12485: PUSH
12486: FOR_TO
12487: IFFALSE 12525
// if array1 [ i ] <> array2 [ i ] then
12489: LD_VAR 0 1
12493: PUSH
12494: LD_VAR 0 4
12498: ARRAY
12499: PUSH
12500: LD_VAR 0 2
12504: PUSH
12505: LD_VAR 0 4
12509: ARRAY
12510: NONEQUAL
12511: IFFALSE 12523
// begin result := false ;
12513: LD_ADDR_VAR 0 3
12517: PUSH
12518: LD_INT 0
12520: ST_TO_ADDR
// break ;
12521: GO 12525
// end ;
12523: GO 12486
12525: POP
12526: POP
// end else
12527: GO 12537
// result := false ;
12529: LD_ADDR_VAR 0 3
12533: PUSH
12534: LD_INT 0
12536: ST_TO_ADDR
// end ;
12537: LD_VAR 0 3
12541: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12542: LD_INT 0
12544: PPUSH
12545: PPUSH
// if not array1 or not array2 then
12546: LD_VAR 0 1
12550: NOT
12551: PUSH
12552: LD_VAR 0 2
12556: NOT
12557: OR
12558: IFFALSE 12562
// exit ;
12560: GO 12626
// result := true ;
12562: LD_ADDR_VAR 0 3
12566: PUSH
12567: LD_INT 1
12569: ST_TO_ADDR
// for i = 1 to array1 do
12570: LD_ADDR_VAR 0 4
12574: PUSH
12575: DOUBLE
12576: LD_INT 1
12578: DEC
12579: ST_TO_ADDR
12580: LD_VAR 0 1
12584: PUSH
12585: FOR_TO
12586: IFFALSE 12624
// if array1 [ i ] <> array2 [ i ] then
12588: LD_VAR 0 1
12592: PUSH
12593: LD_VAR 0 4
12597: ARRAY
12598: PUSH
12599: LD_VAR 0 2
12603: PUSH
12604: LD_VAR 0 4
12608: ARRAY
12609: NONEQUAL
12610: IFFALSE 12622
// begin result := false ;
12612: LD_ADDR_VAR 0 3
12616: PUSH
12617: LD_INT 0
12619: ST_TO_ADDR
// break ;
12620: GO 12624
// end ;
12622: GO 12585
12624: POP
12625: POP
// end ;
12626: LD_VAR 0 3
12630: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12631: LD_INT 0
12633: PPUSH
12634: PPUSH
12635: PPUSH
// pom := GetBase ( fac ) ;
12636: LD_ADDR_VAR 0 5
12640: PUSH
12641: LD_VAR 0 1
12645: PPUSH
12646: CALL_OW 274
12650: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12651: LD_ADDR_VAR 0 4
12655: PUSH
12656: LD_VAR 0 2
12660: PUSH
12661: LD_INT 1
12663: ARRAY
12664: PPUSH
12665: LD_VAR 0 2
12669: PUSH
12670: LD_INT 2
12672: ARRAY
12673: PPUSH
12674: LD_VAR 0 2
12678: PUSH
12679: LD_INT 3
12681: ARRAY
12682: PPUSH
12683: LD_VAR 0 2
12687: PUSH
12688: LD_INT 4
12690: ARRAY
12691: PPUSH
12692: CALL_OW 449
12696: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12697: LD_ADDR_VAR 0 3
12701: PUSH
12702: LD_VAR 0 5
12706: PPUSH
12707: LD_INT 1
12709: PPUSH
12710: CALL_OW 275
12714: PUSH
12715: LD_VAR 0 4
12719: PUSH
12720: LD_INT 1
12722: ARRAY
12723: GREATEREQUAL
12724: PUSH
12725: LD_VAR 0 5
12729: PPUSH
12730: LD_INT 2
12732: PPUSH
12733: CALL_OW 275
12737: PUSH
12738: LD_VAR 0 4
12742: PUSH
12743: LD_INT 2
12745: ARRAY
12746: GREATEREQUAL
12747: AND
12748: PUSH
12749: LD_VAR 0 5
12753: PPUSH
12754: LD_INT 3
12756: PPUSH
12757: CALL_OW 275
12761: PUSH
12762: LD_VAR 0 4
12766: PUSH
12767: LD_INT 3
12769: ARRAY
12770: GREATEREQUAL
12771: AND
12772: ST_TO_ADDR
// end ;
12773: LD_VAR 0 3
12777: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12778: LD_INT 0
12780: PPUSH
12781: PPUSH
12782: PPUSH
12783: PPUSH
// pom := GetBase ( building ) ;
12784: LD_ADDR_VAR 0 3
12788: PUSH
12789: LD_VAR 0 1
12793: PPUSH
12794: CALL_OW 274
12798: ST_TO_ADDR
// if not pom then
12799: LD_VAR 0 3
12803: NOT
12804: IFFALSE 12808
// exit ;
12806: GO 12978
// btype := GetBType ( building ) ;
12808: LD_ADDR_VAR 0 5
12812: PUSH
12813: LD_VAR 0 1
12817: PPUSH
12818: CALL_OW 266
12822: ST_TO_ADDR
// if btype = b_armoury then
12823: LD_VAR 0 5
12827: PUSH
12828: LD_INT 4
12830: EQUAL
12831: IFFALSE 12841
// btype := b_barracks ;
12833: LD_ADDR_VAR 0 5
12837: PUSH
12838: LD_INT 5
12840: ST_TO_ADDR
// if btype = b_depot then
12841: LD_VAR 0 5
12845: PUSH
12846: LD_INT 0
12848: EQUAL
12849: IFFALSE 12859
// btype := b_warehouse ;
12851: LD_ADDR_VAR 0 5
12855: PUSH
12856: LD_INT 1
12858: ST_TO_ADDR
// if btype = b_workshop then
12859: LD_VAR 0 5
12863: PUSH
12864: LD_INT 2
12866: EQUAL
12867: IFFALSE 12877
// btype := b_factory ;
12869: LD_ADDR_VAR 0 5
12873: PUSH
12874: LD_INT 3
12876: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12877: LD_ADDR_VAR 0 4
12881: PUSH
12882: LD_VAR 0 5
12886: PPUSH
12887: LD_VAR 0 1
12891: PPUSH
12892: CALL_OW 248
12896: PPUSH
12897: CALL_OW 450
12901: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12902: LD_ADDR_VAR 0 2
12906: PUSH
12907: LD_VAR 0 3
12911: PPUSH
12912: LD_INT 1
12914: PPUSH
12915: CALL_OW 275
12919: PUSH
12920: LD_VAR 0 4
12924: PUSH
12925: LD_INT 1
12927: ARRAY
12928: GREATEREQUAL
12929: PUSH
12930: LD_VAR 0 3
12934: PPUSH
12935: LD_INT 2
12937: PPUSH
12938: CALL_OW 275
12942: PUSH
12943: LD_VAR 0 4
12947: PUSH
12948: LD_INT 2
12950: ARRAY
12951: GREATEREQUAL
12952: AND
12953: PUSH
12954: LD_VAR 0 3
12958: PPUSH
12959: LD_INT 3
12961: PPUSH
12962: CALL_OW 275
12966: PUSH
12967: LD_VAR 0 4
12971: PUSH
12972: LD_INT 3
12974: ARRAY
12975: GREATEREQUAL
12976: AND
12977: ST_TO_ADDR
// end ;
12978: LD_VAR 0 2
12982: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12983: LD_INT 0
12985: PPUSH
12986: PPUSH
12987: PPUSH
// pom := GetBase ( building ) ;
12988: LD_ADDR_VAR 0 4
12992: PUSH
12993: LD_VAR 0 1
12997: PPUSH
12998: CALL_OW 274
13002: ST_TO_ADDR
// if not pom then
13003: LD_VAR 0 4
13007: NOT
13008: IFFALSE 13012
// exit ;
13010: GO 13113
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13012: LD_ADDR_VAR 0 5
13016: PUSH
13017: LD_VAR 0 2
13021: PPUSH
13022: LD_VAR 0 1
13026: PPUSH
13027: CALL_OW 248
13031: PPUSH
13032: CALL_OW 450
13036: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13037: LD_ADDR_VAR 0 3
13041: PUSH
13042: LD_VAR 0 4
13046: PPUSH
13047: LD_INT 1
13049: PPUSH
13050: CALL_OW 275
13054: PUSH
13055: LD_VAR 0 5
13059: PUSH
13060: LD_INT 1
13062: ARRAY
13063: GREATEREQUAL
13064: PUSH
13065: LD_VAR 0 4
13069: PPUSH
13070: LD_INT 2
13072: PPUSH
13073: CALL_OW 275
13077: PUSH
13078: LD_VAR 0 5
13082: PUSH
13083: LD_INT 2
13085: ARRAY
13086: GREATEREQUAL
13087: AND
13088: PUSH
13089: LD_VAR 0 4
13093: PPUSH
13094: LD_INT 3
13096: PPUSH
13097: CALL_OW 275
13101: PUSH
13102: LD_VAR 0 5
13106: PUSH
13107: LD_INT 3
13109: ARRAY
13110: GREATEREQUAL
13111: AND
13112: ST_TO_ADDR
// end ;
13113: LD_VAR 0 3
13117: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13118: LD_INT 0
13120: PPUSH
13121: PPUSH
13122: PPUSH
13123: PPUSH
13124: PPUSH
13125: PPUSH
13126: PPUSH
13127: PPUSH
13128: PPUSH
13129: PPUSH
13130: PPUSH
// result := false ;
13131: LD_ADDR_VAR 0 8
13135: PUSH
13136: LD_INT 0
13138: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13139: LD_VAR 0 5
13143: NOT
13144: PUSH
13145: LD_VAR 0 1
13149: NOT
13150: OR
13151: PUSH
13152: LD_VAR 0 2
13156: NOT
13157: OR
13158: PUSH
13159: LD_VAR 0 3
13163: NOT
13164: OR
13165: IFFALSE 13169
// exit ;
13167: GO 13983
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13169: LD_ADDR_VAR 0 14
13173: PUSH
13174: LD_VAR 0 1
13178: PPUSH
13179: LD_VAR 0 2
13183: PPUSH
13184: LD_VAR 0 3
13188: PPUSH
13189: LD_VAR 0 4
13193: PPUSH
13194: LD_VAR 0 5
13198: PUSH
13199: LD_INT 1
13201: ARRAY
13202: PPUSH
13203: CALL_OW 248
13207: PPUSH
13208: LD_INT 0
13210: PPUSH
13211: CALL 15220 0 6
13215: ST_TO_ADDR
// if not hexes then
13216: LD_VAR 0 14
13220: NOT
13221: IFFALSE 13225
// exit ;
13223: GO 13983
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13225: LD_ADDR_VAR 0 17
13229: PUSH
13230: LD_VAR 0 5
13234: PPUSH
13235: LD_INT 22
13237: PUSH
13238: LD_VAR 0 13
13242: PPUSH
13243: CALL_OW 255
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: LD_INT 2
13254: PUSH
13255: LD_INT 30
13257: PUSH
13258: LD_INT 0
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: LD_INT 30
13267: PUSH
13268: LD_INT 1
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: LIST
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PPUSH
13284: CALL_OW 72
13288: ST_TO_ADDR
// for i = 1 to hexes do
13289: LD_ADDR_VAR 0 9
13293: PUSH
13294: DOUBLE
13295: LD_INT 1
13297: DEC
13298: ST_TO_ADDR
13299: LD_VAR 0 14
13303: PUSH
13304: FOR_TO
13305: IFFALSE 13981
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13307: LD_ADDR_VAR 0 13
13311: PUSH
13312: LD_VAR 0 14
13316: PUSH
13317: LD_VAR 0 9
13321: ARRAY
13322: PUSH
13323: LD_INT 1
13325: ARRAY
13326: PPUSH
13327: LD_VAR 0 14
13331: PUSH
13332: LD_VAR 0 9
13336: ARRAY
13337: PUSH
13338: LD_INT 2
13340: ARRAY
13341: PPUSH
13342: CALL_OW 428
13346: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13347: LD_VAR 0 14
13351: PUSH
13352: LD_VAR 0 9
13356: ARRAY
13357: PUSH
13358: LD_INT 1
13360: ARRAY
13361: PPUSH
13362: LD_VAR 0 14
13366: PUSH
13367: LD_VAR 0 9
13371: ARRAY
13372: PUSH
13373: LD_INT 2
13375: ARRAY
13376: PPUSH
13377: CALL_OW 351
13381: PUSH
13382: LD_VAR 0 14
13386: PUSH
13387: LD_VAR 0 9
13391: ARRAY
13392: PUSH
13393: LD_INT 1
13395: ARRAY
13396: PPUSH
13397: LD_VAR 0 14
13401: PUSH
13402: LD_VAR 0 9
13406: ARRAY
13407: PUSH
13408: LD_INT 2
13410: ARRAY
13411: PPUSH
13412: CALL_OW 488
13416: NOT
13417: OR
13418: PUSH
13419: LD_VAR 0 13
13423: PPUSH
13424: CALL_OW 247
13428: PUSH
13429: LD_INT 3
13431: EQUAL
13432: OR
13433: IFFALSE 13439
// exit ;
13435: POP
13436: POP
13437: GO 13983
// if not tmp then
13439: LD_VAR 0 13
13443: NOT
13444: IFFALSE 13448
// continue ;
13446: GO 13304
// result := true ;
13448: LD_ADDR_VAR 0 8
13452: PUSH
13453: LD_INT 1
13455: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13456: LD_VAR 0 6
13460: PUSH
13461: LD_VAR 0 13
13465: PPUSH
13466: CALL_OW 247
13470: PUSH
13471: LD_INT 2
13473: EQUAL
13474: AND
13475: PUSH
13476: LD_VAR 0 13
13480: PPUSH
13481: CALL_OW 263
13485: PUSH
13486: LD_INT 1
13488: EQUAL
13489: AND
13490: IFFALSE 13654
// begin if IsDrivenBy ( tmp ) then
13492: LD_VAR 0 13
13496: PPUSH
13497: CALL_OW 311
13501: IFFALSE 13505
// continue ;
13503: GO 13304
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13505: LD_VAR 0 6
13509: PPUSH
13510: LD_INT 3
13512: PUSH
13513: LD_INT 60
13515: PUSH
13516: EMPTY
13517: LIST
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: PUSH
13523: LD_INT 3
13525: PUSH
13526: LD_INT 55
13528: PUSH
13529: EMPTY
13530: LIST
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PPUSH
13540: CALL_OW 72
13544: IFFALSE 13652
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13546: LD_ADDR_VAR 0 18
13550: PUSH
13551: LD_VAR 0 6
13555: PPUSH
13556: LD_INT 3
13558: PUSH
13559: LD_INT 60
13561: PUSH
13562: EMPTY
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: LD_INT 3
13571: PUSH
13572: LD_INT 55
13574: PUSH
13575: EMPTY
13576: LIST
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PPUSH
13586: CALL_OW 72
13590: PUSH
13591: LD_INT 1
13593: ARRAY
13594: ST_TO_ADDR
// if IsInUnit ( driver ) then
13595: LD_VAR 0 18
13599: PPUSH
13600: CALL_OW 310
13604: IFFALSE 13615
// ComExit ( driver ) ;
13606: LD_VAR 0 18
13610: PPUSH
13611: CALL 38404 0 1
// AddComEnterUnit ( driver , tmp ) ;
13615: LD_VAR 0 18
13619: PPUSH
13620: LD_VAR 0 13
13624: PPUSH
13625: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13629: LD_VAR 0 18
13633: PPUSH
13634: LD_VAR 0 7
13638: PPUSH
13639: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13643: LD_VAR 0 18
13647: PPUSH
13648: CALL_OW 181
// end ; continue ;
13652: GO 13304
// end ; if not cleaners or not tmp in cleaners then
13654: LD_VAR 0 6
13658: NOT
13659: PUSH
13660: LD_VAR 0 13
13664: PUSH
13665: LD_VAR 0 6
13669: IN
13670: NOT
13671: OR
13672: IFFALSE 13979
// begin if dep then
13674: LD_VAR 0 17
13678: IFFALSE 13814
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13680: LD_ADDR_VAR 0 16
13684: PUSH
13685: LD_VAR 0 17
13689: PUSH
13690: LD_INT 1
13692: ARRAY
13693: PPUSH
13694: CALL_OW 250
13698: PPUSH
13699: LD_VAR 0 17
13703: PUSH
13704: LD_INT 1
13706: ARRAY
13707: PPUSH
13708: CALL_OW 254
13712: PPUSH
13713: LD_INT 5
13715: PPUSH
13716: CALL_OW 272
13720: PUSH
13721: LD_VAR 0 17
13725: PUSH
13726: LD_INT 1
13728: ARRAY
13729: PPUSH
13730: CALL_OW 251
13734: PPUSH
13735: LD_VAR 0 17
13739: PUSH
13740: LD_INT 1
13742: ARRAY
13743: PPUSH
13744: CALL_OW 254
13748: PPUSH
13749: LD_INT 5
13751: PPUSH
13752: CALL_OW 273
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13761: LD_VAR 0 16
13765: PUSH
13766: LD_INT 1
13768: ARRAY
13769: PPUSH
13770: LD_VAR 0 16
13774: PUSH
13775: LD_INT 2
13777: ARRAY
13778: PPUSH
13779: CALL_OW 488
13783: IFFALSE 13814
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13785: LD_VAR 0 13
13789: PPUSH
13790: LD_VAR 0 16
13794: PUSH
13795: LD_INT 1
13797: ARRAY
13798: PPUSH
13799: LD_VAR 0 16
13803: PUSH
13804: LD_INT 2
13806: ARRAY
13807: PPUSH
13808: CALL_OW 111
// continue ;
13812: GO 13304
// end ; end ; r := GetDir ( tmp ) ;
13814: LD_ADDR_VAR 0 15
13818: PUSH
13819: LD_VAR 0 13
13823: PPUSH
13824: CALL_OW 254
13828: ST_TO_ADDR
// if r = 5 then
13829: LD_VAR 0 15
13833: PUSH
13834: LD_INT 5
13836: EQUAL
13837: IFFALSE 13847
// r := 0 ;
13839: LD_ADDR_VAR 0 15
13843: PUSH
13844: LD_INT 0
13846: ST_TO_ADDR
// for j = r to 5 do
13847: LD_ADDR_VAR 0 10
13851: PUSH
13852: DOUBLE
13853: LD_VAR 0 15
13857: DEC
13858: ST_TO_ADDR
13859: LD_INT 5
13861: PUSH
13862: FOR_TO
13863: IFFALSE 13977
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13865: LD_ADDR_VAR 0 11
13869: PUSH
13870: LD_VAR 0 13
13874: PPUSH
13875: CALL_OW 250
13879: PPUSH
13880: LD_VAR 0 10
13884: PPUSH
13885: LD_INT 2
13887: PPUSH
13888: CALL_OW 272
13892: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13893: LD_ADDR_VAR 0 12
13897: PUSH
13898: LD_VAR 0 13
13902: PPUSH
13903: CALL_OW 251
13907: PPUSH
13908: LD_VAR 0 10
13912: PPUSH
13913: LD_INT 2
13915: PPUSH
13916: CALL_OW 273
13920: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13921: LD_VAR 0 11
13925: PPUSH
13926: LD_VAR 0 12
13930: PPUSH
13931: CALL_OW 488
13935: PUSH
13936: LD_VAR 0 11
13940: PPUSH
13941: LD_VAR 0 12
13945: PPUSH
13946: CALL_OW 428
13950: NOT
13951: AND
13952: IFFALSE 13975
// begin ComMoveXY ( tmp , _x , _y ) ;
13954: LD_VAR 0 13
13958: PPUSH
13959: LD_VAR 0 11
13963: PPUSH
13964: LD_VAR 0 12
13968: PPUSH
13969: CALL_OW 111
// break ;
13973: GO 13977
// end ; end ;
13975: GO 13862
13977: POP
13978: POP
// end ; end ;
13979: GO 13304
13981: POP
13982: POP
// end ;
13983: LD_VAR 0 8
13987: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13988: LD_INT 0
13990: PPUSH
// result := true ;
13991: LD_ADDR_VAR 0 3
13995: PUSH
13996: LD_INT 1
13998: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13999: LD_VAR 0 2
14003: PUSH
14004: LD_INT 24
14006: DOUBLE
14007: EQUAL
14008: IFTRUE 14018
14010: LD_INT 33
14012: DOUBLE
14013: EQUAL
14014: IFTRUE 14018
14016: GO 14043
14018: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14019: LD_ADDR_VAR 0 3
14023: PUSH
14024: LD_INT 32
14026: PPUSH
14027: LD_VAR 0 1
14031: PPUSH
14032: CALL_OW 321
14036: PUSH
14037: LD_INT 2
14039: EQUAL
14040: ST_TO_ADDR
14041: GO 14363
14043: LD_INT 20
14045: DOUBLE
14046: EQUAL
14047: IFTRUE 14051
14049: GO 14076
14051: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14052: LD_ADDR_VAR 0 3
14056: PUSH
14057: LD_INT 6
14059: PPUSH
14060: LD_VAR 0 1
14064: PPUSH
14065: CALL_OW 321
14069: PUSH
14070: LD_INT 2
14072: EQUAL
14073: ST_TO_ADDR
14074: GO 14363
14076: LD_INT 22
14078: DOUBLE
14079: EQUAL
14080: IFTRUE 14090
14082: LD_INT 36
14084: DOUBLE
14085: EQUAL
14086: IFTRUE 14090
14088: GO 14115
14090: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14091: LD_ADDR_VAR 0 3
14095: PUSH
14096: LD_INT 15
14098: PPUSH
14099: LD_VAR 0 1
14103: PPUSH
14104: CALL_OW 321
14108: PUSH
14109: LD_INT 2
14111: EQUAL
14112: ST_TO_ADDR
14113: GO 14363
14115: LD_INT 30
14117: DOUBLE
14118: EQUAL
14119: IFTRUE 14123
14121: GO 14148
14123: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14124: LD_ADDR_VAR 0 3
14128: PUSH
14129: LD_INT 20
14131: PPUSH
14132: LD_VAR 0 1
14136: PPUSH
14137: CALL_OW 321
14141: PUSH
14142: LD_INT 2
14144: EQUAL
14145: ST_TO_ADDR
14146: GO 14363
14148: LD_INT 28
14150: DOUBLE
14151: EQUAL
14152: IFTRUE 14162
14154: LD_INT 21
14156: DOUBLE
14157: EQUAL
14158: IFTRUE 14162
14160: GO 14187
14162: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14163: LD_ADDR_VAR 0 3
14167: PUSH
14168: LD_INT 21
14170: PPUSH
14171: LD_VAR 0 1
14175: PPUSH
14176: CALL_OW 321
14180: PUSH
14181: LD_INT 2
14183: EQUAL
14184: ST_TO_ADDR
14185: GO 14363
14187: LD_INT 16
14189: DOUBLE
14190: EQUAL
14191: IFTRUE 14195
14193: GO 14222
14195: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14196: LD_ADDR_VAR 0 3
14200: PUSH
14201: LD_EXP 15
14205: PPUSH
14206: LD_VAR 0 1
14210: PPUSH
14211: CALL_OW 321
14215: PUSH
14216: LD_INT 2
14218: EQUAL
14219: ST_TO_ADDR
14220: GO 14363
14222: LD_INT 19
14224: DOUBLE
14225: EQUAL
14226: IFTRUE 14236
14228: LD_INT 23
14230: DOUBLE
14231: EQUAL
14232: IFTRUE 14236
14234: GO 14263
14236: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14237: LD_ADDR_VAR 0 3
14241: PUSH
14242: LD_EXP 14
14246: PPUSH
14247: LD_VAR 0 1
14251: PPUSH
14252: CALL_OW 321
14256: PUSH
14257: LD_INT 2
14259: EQUAL
14260: ST_TO_ADDR
14261: GO 14363
14263: LD_INT 17
14265: DOUBLE
14266: EQUAL
14267: IFTRUE 14271
14269: GO 14296
14271: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14272: LD_ADDR_VAR 0 3
14276: PUSH
14277: LD_INT 39
14279: PPUSH
14280: LD_VAR 0 1
14284: PPUSH
14285: CALL_OW 321
14289: PUSH
14290: LD_INT 2
14292: EQUAL
14293: ST_TO_ADDR
14294: GO 14363
14296: LD_INT 18
14298: DOUBLE
14299: EQUAL
14300: IFTRUE 14304
14302: GO 14329
14304: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14305: LD_ADDR_VAR 0 3
14309: PUSH
14310: LD_INT 40
14312: PPUSH
14313: LD_VAR 0 1
14317: PPUSH
14318: CALL_OW 321
14322: PUSH
14323: LD_INT 2
14325: EQUAL
14326: ST_TO_ADDR
14327: GO 14363
14329: LD_INT 27
14331: DOUBLE
14332: EQUAL
14333: IFTRUE 14337
14335: GO 14362
14337: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14338: LD_ADDR_VAR 0 3
14342: PUSH
14343: LD_INT 35
14345: PPUSH
14346: LD_VAR 0 1
14350: PPUSH
14351: CALL_OW 321
14355: PUSH
14356: LD_INT 2
14358: EQUAL
14359: ST_TO_ADDR
14360: GO 14363
14362: POP
// end ;
14363: LD_VAR 0 3
14367: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14368: LD_INT 0
14370: PPUSH
14371: PPUSH
14372: PPUSH
14373: PPUSH
14374: PPUSH
14375: PPUSH
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
// result := false ;
14381: LD_ADDR_VAR 0 6
14385: PUSH
14386: LD_INT 0
14388: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14389: LD_VAR 0 1
14393: NOT
14394: PUSH
14395: LD_VAR 0 1
14399: PPUSH
14400: CALL_OW 266
14404: PUSH
14405: LD_INT 0
14407: PUSH
14408: LD_INT 1
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: IN
14415: NOT
14416: OR
14417: PUSH
14418: LD_VAR 0 2
14422: NOT
14423: OR
14424: PUSH
14425: LD_VAR 0 5
14429: PUSH
14430: LD_INT 0
14432: PUSH
14433: LD_INT 1
14435: PUSH
14436: LD_INT 2
14438: PUSH
14439: LD_INT 3
14441: PUSH
14442: LD_INT 4
14444: PUSH
14445: LD_INT 5
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: IN
14456: NOT
14457: OR
14458: PUSH
14459: LD_VAR 0 3
14463: PPUSH
14464: LD_VAR 0 4
14468: PPUSH
14469: CALL_OW 488
14473: NOT
14474: OR
14475: IFFALSE 14479
// exit ;
14477: GO 15215
// side := GetSide ( depot ) ;
14479: LD_ADDR_VAR 0 9
14483: PUSH
14484: LD_VAR 0 1
14488: PPUSH
14489: CALL_OW 255
14493: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14494: LD_VAR 0 9
14498: PPUSH
14499: LD_VAR 0 2
14503: PPUSH
14504: CALL 13988 0 2
14508: NOT
14509: IFFALSE 14513
// exit ;
14511: GO 15215
// pom := GetBase ( depot ) ;
14513: LD_ADDR_VAR 0 10
14517: PUSH
14518: LD_VAR 0 1
14522: PPUSH
14523: CALL_OW 274
14527: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14528: LD_ADDR_VAR 0 11
14532: PUSH
14533: LD_VAR 0 2
14537: PPUSH
14538: LD_VAR 0 1
14542: PPUSH
14543: CALL_OW 248
14547: PPUSH
14548: CALL_OW 450
14552: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14553: LD_VAR 0 10
14557: PPUSH
14558: LD_INT 1
14560: PPUSH
14561: CALL_OW 275
14565: PUSH
14566: LD_VAR 0 11
14570: PUSH
14571: LD_INT 1
14573: ARRAY
14574: GREATEREQUAL
14575: PUSH
14576: LD_VAR 0 10
14580: PPUSH
14581: LD_INT 2
14583: PPUSH
14584: CALL_OW 275
14588: PUSH
14589: LD_VAR 0 11
14593: PUSH
14594: LD_INT 2
14596: ARRAY
14597: GREATEREQUAL
14598: AND
14599: PUSH
14600: LD_VAR 0 10
14604: PPUSH
14605: LD_INT 3
14607: PPUSH
14608: CALL_OW 275
14612: PUSH
14613: LD_VAR 0 11
14617: PUSH
14618: LD_INT 3
14620: ARRAY
14621: GREATEREQUAL
14622: AND
14623: NOT
14624: IFFALSE 14628
// exit ;
14626: GO 15215
// if GetBType ( depot ) = b_depot then
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 266
14637: PUSH
14638: LD_INT 0
14640: EQUAL
14641: IFFALSE 14653
// dist := 28 else
14643: LD_ADDR_VAR 0 14
14647: PUSH
14648: LD_INT 28
14650: ST_TO_ADDR
14651: GO 14661
// dist := 36 ;
14653: LD_ADDR_VAR 0 14
14657: PUSH
14658: LD_INT 36
14660: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14661: LD_VAR 0 1
14665: PPUSH
14666: LD_VAR 0 3
14670: PPUSH
14671: LD_VAR 0 4
14675: PPUSH
14676: CALL_OW 297
14680: PUSH
14681: LD_VAR 0 14
14685: GREATER
14686: IFFALSE 14690
// exit ;
14688: GO 15215
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14690: LD_ADDR_VAR 0 12
14694: PUSH
14695: LD_VAR 0 2
14699: PPUSH
14700: LD_VAR 0 3
14704: PPUSH
14705: LD_VAR 0 4
14709: PPUSH
14710: LD_VAR 0 5
14714: PPUSH
14715: LD_VAR 0 1
14719: PPUSH
14720: CALL_OW 248
14724: PPUSH
14725: LD_INT 0
14727: PPUSH
14728: CALL 15220 0 6
14732: ST_TO_ADDR
// if not hexes then
14733: LD_VAR 0 12
14737: NOT
14738: IFFALSE 14742
// exit ;
14740: GO 15215
// hex := GetHexInfo ( x , y ) ;
14742: LD_ADDR_VAR 0 15
14746: PUSH
14747: LD_VAR 0 3
14751: PPUSH
14752: LD_VAR 0 4
14756: PPUSH
14757: CALL_OW 546
14761: ST_TO_ADDR
// if hex [ 1 ] then
14762: LD_VAR 0 15
14766: PUSH
14767: LD_INT 1
14769: ARRAY
14770: IFFALSE 14774
// exit ;
14772: GO 15215
// height := hex [ 2 ] ;
14774: LD_ADDR_VAR 0 13
14778: PUSH
14779: LD_VAR 0 15
14783: PUSH
14784: LD_INT 2
14786: ARRAY
14787: ST_TO_ADDR
// for i = 1 to hexes do
14788: LD_ADDR_VAR 0 7
14792: PUSH
14793: DOUBLE
14794: LD_INT 1
14796: DEC
14797: ST_TO_ADDR
14798: LD_VAR 0 12
14802: PUSH
14803: FOR_TO
14804: IFFALSE 15134
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14806: LD_VAR 0 12
14810: PUSH
14811: LD_VAR 0 7
14815: ARRAY
14816: PUSH
14817: LD_INT 1
14819: ARRAY
14820: PPUSH
14821: LD_VAR 0 12
14825: PUSH
14826: LD_VAR 0 7
14830: ARRAY
14831: PUSH
14832: LD_INT 2
14834: ARRAY
14835: PPUSH
14836: CALL_OW 488
14840: NOT
14841: PUSH
14842: LD_VAR 0 12
14846: PUSH
14847: LD_VAR 0 7
14851: ARRAY
14852: PUSH
14853: LD_INT 1
14855: ARRAY
14856: PPUSH
14857: LD_VAR 0 12
14861: PUSH
14862: LD_VAR 0 7
14866: ARRAY
14867: PUSH
14868: LD_INT 2
14870: ARRAY
14871: PPUSH
14872: CALL_OW 428
14876: PUSH
14877: LD_INT 0
14879: GREATER
14880: OR
14881: PUSH
14882: LD_VAR 0 12
14886: PUSH
14887: LD_VAR 0 7
14891: ARRAY
14892: PUSH
14893: LD_INT 1
14895: ARRAY
14896: PPUSH
14897: LD_VAR 0 12
14901: PUSH
14902: LD_VAR 0 7
14906: ARRAY
14907: PUSH
14908: LD_INT 2
14910: ARRAY
14911: PPUSH
14912: CALL_OW 351
14916: OR
14917: IFFALSE 14923
// exit ;
14919: POP
14920: POP
14921: GO 15215
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14923: LD_ADDR_VAR 0 8
14927: PUSH
14928: LD_VAR 0 12
14932: PUSH
14933: LD_VAR 0 7
14937: ARRAY
14938: PUSH
14939: LD_INT 1
14941: ARRAY
14942: PPUSH
14943: LD_VAR 0 12
14947: PUSH
14948: LD_VAR 0 7
14952: ARRAY
14953: PUSH
14954: LD_INT 2
14956: ARRAY
14957: PPUSH
14958: CALL_OW 546
14962: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14963: LD_VAR 0 8
14967: PUSH
14968: LD_INT 1
14970: ARRAY
14971: PUSH
14972: LD_VAR 0 8
14976: PUSH
14977: LD_INT 2
14979: ARRAY
14980: PUSH
14981: LD_VAR 0 13
14985: PUSH
14986: LD_INT 2
14988: PLUS
14989: GREATER
14990: OR
14991: PUSH
14992: LD_VAR 0 8
14996: PUSH
14997: LD_INT 2
14999: ARRAY
15000: PUSH
15001: LD_VAR 0 13
15005: PUSH
15006: LD_INT 2
15008: MINUS
15009: LESS
15010: OR
15011: PUSH
15012: LD_VAR 0 8
15016: PUSH
15017: LD_INT 3
15019: ARRAY
15020: PUSH
15021: LD_INT 0
15023: PUSH
15024: LD_INT 8
15026: PUSH
15027: LD_INT 9
15029: PUSH
15030: LD_INT 10
15032: PUSH
15033: LD_INT 11
15035: PUSH
15036: LD_INT 12
15038: PUSH
15039: LD_INT 13
15041: PUSH
15042: LD_INT 16
15044: PUSH
15045: LD_INT 17
15047: PUSH
15048: LD_INT 18
15050: PUSH
15051: LD_INT 19
15053: PUSH
15054: LD_INT 20
15056: PUSH
15057: LD_INT 21
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: IN
15075: NOT
15076: OR
15077: PUSH
15078: LD_VAR 0 8
15082: PUSH
15083: LD_INT 5
15085: ARRAY
15086: NOT
15087: OR
15088: PUSH
15089: LD_VAR 0 8
15093: PUSH
15094: LD_INT 6
15096: ARRAY
15097: PUSH
15098: LD_INT 1
15100: PUSH
15101: LD_INT 2
15103: PUSH
15104: LD_INT 7
15106: PUSH
15107: LD_INT 9
15109: PUSH
15110: LD_INT 10
15112: PUSH
15113: LD_INT 11
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: IN
15124: NOT
15125: OR
15126: IFFALSE 15132
// exit ;
15128: POP
15129: POP
15130: GO 15215
// end ;
15132: GO 14803
15134: POP
15135: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15136: LD_VAR 0 9
15140: PPUSH
15141: LD_VAR 0 3
15145: PPUSH
15146: LD_VAR 0 4
15150: PPUSH
15151: LD_INT 20
15153: PPUSH
15154: CALL 7161 0 4
15158: PUSH
15159: LD_INT 4
15161: ARRAY
15162: IFFALSE 15166
// exit ;
15164: GO 15215
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15166: LD_VAR 0 2
15170: PUSH
15171: LD_INT 29
15173: PUSH
15174: LD_INT 30
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: IN
15181: PUSH
15182: LD_VAR 0 3
15186: PPUSH
15187: LD_VAR 0 4
15191: PPUSH
15192: LD_VAR 0 9
15196: PPUSH
15197: CALL_OW 440
15201: NOT
15202: AND
15203: IFFALSE 15207
// exit ;
15205: GO 15215
// result := true ;
15207: LD_ADDR_VAR 0 6
15211: PUSH
15212: LD_INT 1
15214: ST_TO_ADDR
// end ;
15215: LD_VAR 0 6
15219: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15220: LD_INT 0
15222: PPUSH
15223: PPUSH
15224: PPUSH
15225: PPUSH
15226: PPUSH
15227: PPUSH
15228: PPUSH
15229: PPUSH
15230: PPUSH
15231: PPUSH
15232: PPUSH
15233: PPUSH
15234: PPUSH
15235: PPUSH
15236: PPUSH
15237: PPUSH
15238: PPUSH
15239: PPUSH
15240: PPUSH
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
15245: PPUSH
15246: PPUSH
15247: PPUSH
15248: PPUSH
15249: PPUSH
15250: PPUSH
15251: PPUSH
15252: PPUSH
15253: PPUSH
15254: PPUSH
15255: PPUSH
15256: PPUSH
15257: PPUSH
15258: PPUSH
15259: PPUSH
15260: PPUSH
15261: PPUSH
15262: PPUSH
15263: PPUSH
15264: PPUSH
15265: PPUSH
15266: PPUSH
15267: PPUSH
15268: PPUSH
15269: PPUSH
15270: PPUSH
15271: PPUSH
15272: PPUSH
15273: PPUSH
15274: PPUSH
15275: PPUSH
15276: PPUSH
15277: PPUSH
15278: PPUSH
15279: PPUSH
// result = [ ] ;
15280: LD_ADDR_VAR 0 7
15284: PUSH
15285: EMPTY
15286: ST_TO_ADDR
// temp_list = [ ] ;
15287: LD_ADDR_VAR 0 9
15291: PUSH
15292: EMPTY
15293: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15294: LD_VAR 0 4
15298: PUSH
15299: LD_INT 0
15301: PUSH
15302: LD_INT 1
15304: PUSH
15305: LD_INT 2
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: LD_INT 4
15313: PUSH
15314: LD_INT 5
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: IN
15325: NOT
15326: PUSH
15327: LD_VAR 0 1
15331: PUSH
15332: LD_INT 0
15334: PUSH
15335: LD_INT 1
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: IN
15342: PUSH
15343: LD_VAR 0 5
15347: PUSH
15348: LD_INT 1
15350: PUSH
15351: LD_INT 2
15353: PUSH
15354: LD_INT 3
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: LIST
15361: IN
15362: NOT
15363: AND
15364: OR
15365: IFFALSE 15369
// exit ;
15367: GO 33760
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15369: LD_VAR 0 1
15373: PUSH
15374: LD_INT 6
15376: PUSH
15377: LD_INT 7
15379: PUSH
15380: LD_INT 8
15382: PUSH
15383: LD_INT 13
15385: PUSH
15386: LD_INT 12
15388: PUSH
15389: LD_INT 15
15391: PUSH
15392: LD_INT 11
15394: PUSH
15395: LD_INT 14
15397: PUSH
15398: LD_INT 10
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: IN
15412: IFFALSE 15422
// btype = b_lab ;
15414: LD_ADDR_VAR 0 1
15418: PUSH
15419: LD_INT 6
15421: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15422: LD_VAR 0 6
15426: PUSH
15427: LD_INT 0
15429: PUSH
15430: LD_INT 1
15432: PUSH
15433: LD_INT 2
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: LIST
15440: IN
15441: NOT
15442: PUSH
15443: LD_VAR 0 1
15447: PUSH
15448: LD_INT 0
15450: PUSH
15451: LD_INT 1
15453: PUSH
15454: LD_INT 2
15456: PUSH
15457: LD_INT 3
15459: PUSH
15460: LD_INT 6
15462: PUSH
15463: LD_INT 36
15465: PUSH
15466: LD_INT 4
15468: PUSH
15469: LD_INT 5
15471: PUSH
15472: LD_INT 31
15474: PUSH
15475: LD_INT 32
15477: PUSH
15478: LD_INT 33
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: IN
15494: NOT
15495: PUSH
15496: LD_VAR 0 6
15500: PUSH
15501: LD_INT 1
15503: EQUAL
15504: AND
15505: OR
15506: PUSH
15507: LD_VAR 0 1
15511: PUSH
15512: LD_INT 2
15514: PUSH
15515: LD_INT 3
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: IN
15522: NOT
15523: PUSH
15524: LD_VAR 0 6
15528: PUSH
15529: LD_INT 2
15531: EQUAL
15532: AND
15533: OR
15534: IFFALSE 15544
// mode = 0 ;
15536: LD_ADDR_VAR 0 6
15540: PUSH
15541: LD_INT 0
15543: ST_TO_ADDR
// case mode of 0 :
15544: LD_VAR 0 6
15548: PUSH
15549: LD_INT 0
15551: DOUBLE
15552: EQUAL
15553: IFTRUE 15557
15555: GO 27010
15557: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15558: LD_ADDR_VAR 0 11
15562: PUSH
15563: LD_INT 0
15565: PUSH
15566: LD_INT 0
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PUSH
15573: LD_INT 0
15575: PUSH
15576: LD_INT 1
15578: NEG
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: LD_INT 1
15586: PUSH
15587: LD_INT 0
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 1
15596: PUSH
15597: LD_INT 1
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 0
15606: PUSH
15607: LD_INT 1
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 1
15616: NEG
15617: PUSH
15618: LD_INT 0
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: PUSH
15625: LD_INT 1
15627: NEG
15628: PUSH
15629: LD_INT 1
15631: NEG
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 1
15639: NEG
15640: PUSH
15641: LD_INT 2
15643: NEG
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 0
15651: PUSH
15652: LD_INT 2
15654: NEG
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: LD_INT 1
15662: PUSH
15663: LD_INT 1
15665: NEG
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: LD_INT 1
15673: PUSH
15674: LD_INT 2
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 0
15683: PUSH
15684: LD_INT 2
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 1
15693: NEG
15694: PUSH
15695: LD_INT 1
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: LD_INT 1
15704: PUSH
15705: LD_INT 3
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PUSH
15712: LD_INT 0
15714: PUSH
15715: LD_INT 3
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 1
15724: NEG
15725: PUSH
15726: LD_INT 2
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15751: LD_ADDR_VAR 0 12
15755: PUSH
15756: LD_INT 0
15758: PUSH
15759: LD_INT 0
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: PUSH
15766: LD_INT 0
15768: PUSH
15769: LD_INT 1
15771: NEG
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PUSH
15777: LD_INT 1
15779: PUSH
15780: LD_INT 0
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: LD_INT 1
15789: PUSH
15790: LD_INT 1
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 0
15799: PUSH
15800: LD_INT 1
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PUSH
15807: LD_INT 1
15809: NEG
15810: PUSH
15811: LD_INT 0
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 1
15820: NEG
15821: PUSH
15822: LD_INT 1
15824: NEG
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 1
15832: PUSH
15833: LD_INT 1
15835: NEG
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 2
15843: PUSH
15844: LD_INT 0
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: LD_INT 2
15853: PUSH
15854: LD_INT 1
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: LD_INT 1
15863: NEG
15864: PUSH
15865: LD_INT 1
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: LD_INT 2
15874: NEG
15875: PUSH
15876: LD_INT 0
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: LD_INT 2
15885: NEG
15886: PUSH
15887: LD_INT 1
15889: NEG
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: LD_INT 2
15897: NEG
15898: PUSH
15899: LD_INT 1
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 3
15908: NEG
15909: PUSH
15910: LD_INT 0
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 3
15919: NEG
15920: PUSH
15921: LD_INT 1
15923: NEG
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15947: LD_ADDR_VAR 0 13
15951: PUSH
15952: LD_INT 0
15954: PUSH
15955: LD_INT 0
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 0
15964: PUSH
15965: LD_INT 1
15967: NEG
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 1
15975: PUSH
15976: LD_INT 0
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 1
15985: PUSH
15986: LD_INT 1
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: LD_INT 0
15995: PUSH
15996: LD_INT 1
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 1
16005: NEG
16006: PUSH
16007: LD_INT 0
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 1
16016: NEG
16017: PUSH
16018: LD_INT 1
16020: NEG
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 1
16028: NEG
16029: PUSH
16030: LD_INT 2
16032: NEG
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: LD_INT 2
16040: PUSH
16041: LD_INT 1
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: LD_INT 2
16050: PUSH
16051: LD_INT 2
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: LD_INT 1
16060: PUSH
16061: LD_INT 2
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PUSH
16068: LD_INT 2
16070: NEG
16071: PUSH
16072: LD_INT 1
16074: NEG
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 2
16082: NEG
16083: PUSH
16084: LD_INT 2
16086: NEG
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 2
16094: NEG
16095: PUSH
16096: LD_INT 3
16098: NEG
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 3
16106: NEG
16107: PUSH
16108: LD_INT 2
16110: NEG
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PUSH
16116: LD_INT 3
16118: NEG
16119: PUSH
16120: LD_INT 3
16122: NEG
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16146: LD_ADDR_VAR 0 14
16150: PUSH
16151: LD_INT 0
16153: PUSH
16154: LD_INT 0
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: LD_INT 0
16163: PUSH
16164: LD_INT 1
16166: NEG
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: LD_INT 1
16174: PUSH
16175: LD_INT 0
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 1
16184: PUSH
16185: LD_INT 1
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: LD_INT 0
16194: PUSH
16195: LD_INT 1
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 1
16204: NEG
16205: PUSH
16206: LD_INT 0
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 1
16215: NEG
16216: PUSH
16217: LD_INT 1
16219: NEG
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PUSH
16225: LD_INT 1
16227: NEG
16228: PUSH
16229: LD_INT 2
16231: NEG
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PUSH
16237: LD_INT 0
16239: PUSH
16240: LD_INT 2
16242: NEG
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 1
16250: PUSH
16251: LD_INT 1
16253: NEG
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 1
16261: PUSH
16262: LD_INT 2
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 0
16271: PUSH
16272: LD_INT 2
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 1
16281: NEG
16282: PUSH
16283: LD_INT 1
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 1
16292: NEG
16293: PUSH
16294: LD_INT 3
16296: NEG
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 0
16304: PUSH
16305: LD_INT 3
16307: NEG
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: LD_INT 2
16318: NEG
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16342: LD_ADDR_VAR 0 15
16346: PUSH
16347: LD_INT 0
16349: PUSH
16350: LD_INT 0
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 0
16359: PUSH
16360: LD_INT 1
16362: NEG
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 1
16370: PUSH
16371: LD_INT 0
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: LD_INT 1
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 0
16390: PUSH
16391: LD_INT 1
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PUSH
16398: LD_INT 1
16400: NEG
16401: PUSH
16402: LD_INT 0
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 1
16411: NEG
16412: PUSH
16413: LD_INT 1
16415: NEG
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 1
16423: PUSH
16424: LD_INT 1
16426: NEG
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: LD_INT 2
16434: PUSH
16435: LD_INT 0
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 2
16444: PUSH
16445: LD_INT 1
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 1
16454: NEG
16455: PUSH
16456: LD_INT 1
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: LD_INT 2
16465: NEG
16466: PUSH
16467: LD_INT 0
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 2
16476: NEG
16477: PUSH
16478: LD_INT 1
16480: NEG
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 2
16488: PUSH
16489: LD_INT 1
16491: NEG
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: LD_INT 3
16499: PUSH
16500: LD_INT 0
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 3
16509: PUSH
16510: LD_INT 1
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16535: LD_ADDR_VAR 0 16
16539: PUSH
16540: LD_INT 0
16542: PUSH
16543: LD_INT 0
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 0
16552: PUSH
16553: LD_INT 1
16555: NEG
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 1
16563: PUSH
16564: LD_INT 0
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 1
16573: PUSH
16574: LD_INT 1
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 0
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 1
16593: NEG
16594: PUSH
16595: LD_INT 0
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 1
16604: NEG
16605: PUSH
16606: LD_INT 1
16608: NEG
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 1
16616: NEG
16617: PUSH
16618: LD_INT 2
16620: NEG
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: LD_INT 1
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 2
16638: PUSH
16639: LD_INT 2
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 1
16648: PUSH
16649: LD_INT 2
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 2
16658: NEG
16659: PUSH
16660: LD_INT 1
16662: NEG
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: LD_INT 2
16670: NEG
16671: PUSH
16672: LD_INT 2
16674: NEG
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 3
16682: PUSH
16683: LD_INT 2
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 3
16692: PUSH
16693: LD_INT 3
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 2
16702: PUSH
16703: LD_INT 3
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16728: LD_ADDR_VAR 0 17
16732: PUSH
16733: LD_INT 0
16735: PUSH
16736: LD_INT 0
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PUSH
16743: LD_INT 0
16745: PUSH
16746: LD_INT 1
16748: NEG
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 1
16756: PUSH
16757: LD_INT 0
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: LD_INT 1
16766: PUSH
16767: LD_INT 1
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: PUSH
16774: LD_INT 0
16776: PUSH
16777: LD_INT 1
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: PUSH
16784: LD_INT 1
16786: NEG
16787: PUSH
16788: LD_INT 0
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: LD_INT 1
16797: NEG
16798: PUSH
16799: LD_INT 1
16801: NEG
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: LD_INT 1
16809: NEG
16810: PUSH
16811: LD_INT 2
16813: NEG
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: LD_INT 0
16821: PUSH
16822: LD_INT 2
16824: NEG
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 1
16832: PUSH
16833: LD_INT 1
16835: NEG
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 2
16843: PUSH
16844: LD_INT 0
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: LD_INT 2
16853: PUSH
16854: LD_INT 1
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 2
16863: PUSH
16864: LD_INT 2
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 1
16873: PUSH
16874: LD_INT 2
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 0
16883: PUSH
16884: LD_INT 2
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 1
16893: NEG
16894: PUSH
16895: LD_INT 1
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 2
16904: NEG
16905: PUSH
16906: LD_INT 0
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 2
16915: NEG
16916: PUSH
16917: LD_INT 1
16919: NEG
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 2
16927: NEG
16928: PUSH
16929: LD_INT 2
16931: NEG
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16958: LD_ADDR_VAR 0 18
16962: PUSH
16963: LD_INT 0
16965: PUSH
16966: LD_INT 0
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: PUSH
16973: LD_INT 0
16975: PUSH
16976: LD_INT 1
16978: NEG
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: LD_INT 1
16986: PUSH
16987: LD_INT 0
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 1
16996: PUSH
16997: LD_INT 1
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 0
17006: PUSH
17007: LD_INT 1
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 1
17016: NEG
17017: PUSH
17018: LD_INT 0
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: LD_INT 1
17027: NEG
17028: PUSH
17029: LD_INT 1
17031: NEG
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 1
17039: NEG
17040: PUSH
17041: LD_INT 2
17043: NEG
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PUSH
17049: LD_INT 0
17051: PUSH
17052: LD_INT 2
17054: NEG
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 1
17062: PUSH
17063: LD_INT 1
17065: NEG
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 2
17073: PUSH
17074: LD_INT 0
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 2
17083: PUSH
17084: LD_INT 1
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: LD_INT 2
17093: PUSH
17094: LD_INT 2
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 1
17103: PUSH
17104: LD_INT 2
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 0
17113: PUSH
17114: LD_INT 2
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 1
17123: NEG
17124: PUSH
17125: LD_INT 1
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 2
17134: NEG
17135: PUSH
17136: LD_INT 0
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: LD_INT 2
17145: NEG
17146: PUSH
17147: LD_INT 1
17149: NEG
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 2
17157: NEG
17158: PUSH
17159: LD_INT 2
17161: NEG
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17188: LD_ADDR_VAR 0 19
17192: PUSH
17193: LD_INT 0
17195: PUSH
17196: LD_INT 0
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: LD_INT 0
17205: PUSH
17206: LD_INT 1
17208: NEG
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 1
17216: PUSH
17217: LD_INT 0
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: LD_INT 1
17226: PUSH
17227: LD_INT 1
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 0
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: LD_INT 1
17246: NEG
17247: PUSH
17248: LD_INT 0
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 1
17257: NEG
17258: PUSH
17259: LD_INT 1
17261: NEG
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 1
17269: NEG
17270: PUSH
17271: LD_INT 2
17273: NEG
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: LD_INT 0
17281: PUSH
17282: LD_INT 2
17284: NEG
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 1
17292: PUSH
17293: LD_INT 1
17295: NEG
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 2
17303: PUSH
17304: LD_INT 0
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 2
17313: PUSH
17314: LD_INT 1
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 2
17323: PUSH
17324: LD_INT 2
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 1
17333: PUSH
17334: LD_INT 2
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: LD_INT 0
17343: PUSH
17344: LD_INT 2
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: LD_INT 1
17353: NEG
17354: PUSH
17355: LD_INT 1
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 2
17364: NEG
17365: PUSH
17366: LD_INT 0
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 2
17375: NEG
17376: PUSH
17377: LD_INT 1
17379: NEG
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 2
17387: NEG
17388: PUSH
17389: LD_INT 2
17391: NEG
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17418: LD_ADDR_VAR 0 20
17422: PUSH
17423: LD_INT 0
17425: PUSH
17426: LD_INT 0
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 0
17435: PUSH
17436: LD_INT 1
17438: NEG
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: LD_INT 1
17446: PUSH
17447: LD_INT 0
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 1
17456: PUSH
17457: LD_INT 1
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 0
17466: PUSH
17467: LD_INT 1
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 1
17476: NEG
17477: PUSH
17478: LD_INT 0
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 1
17487: NEG
17488: PUSH
17489: LD_INT 1
17491: NEG
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 1
17499: NEG
17500: PUSH
17501: LD_INT 2
17503: NEG
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 0
17511: PUSH
17512: LD_INT 2
17514: NEG
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 1
17522: PUSH
17523: LD_INT 1
17525: NEG
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 2
17533: PUSH
17534: LD_INT 0
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 2
17543: PUSH
17544: LD_INT 1
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 2
17553: PUSH
17554: LD_INT 2
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 1
17563: PUSH
17564: LD_INT 2
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 0
17573: PUSH
17574: LD_INT 2
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 1
17583: NEG
17584: PUSH
17585: LD_INT 1
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 2
17594: NEG
17595: PUSH
17596: LD_INT 0
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 2
17605: NEG
17606: PUSH
17607: LD_INT 1
17609: NEG
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 2
17617: NEG
17618: PUSH
17619: LD_INT 2
17621: NEG
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17648: LD_ADDR_VAR 0 21
17652: PUSH
17653: LD_INT 0
17655: PUSH
17656: LD_INT 0
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 0
17665: PUSH
17666: LD_INT 1
17668: NEG
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 1
17676: PUSH
17677: LD_INT 0
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: LD_INT 1
17686: PUSH
17687: LD_INT 1
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 0
17696: PUSH
17697: LD_INT 1
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 1
17706: NEG
17707: PUSH
17708: LD_INT 0
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 1
17717: NEG
17718: PUSH
17719: LD_INT 1
17721: NEG
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 1
17729: NEG
17730: PUSH
17731: LD_INT 2
17733: NEG
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 0
17741: PUSH
17742: LD_INT 2
17744: NEG
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: LD_INT 1
17755: NEG
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 2
17763: PUSH
17764: LD_INT 0
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 2
17773: PUSH
17774: LD_INT 1
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 2
17783: PUSH
17784: LD_INT 2
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: LD_INT 2
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 0
17803: PUSH
17804: LD_INT 2
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 1
17813: NEG
17814: PUSH
17815: LD_INT 1
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 2
17824: NEG
17825: PUSH
17826: LD_INT 0
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 2
17835: NEG
17836: PUSH
17837: LD_INT 1
17839: NEG
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 2
17847: NEG
17848: PUSH
17849: LD_INT 2
17851: NEG
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17878: LD_ADDR_VAR 0 22
17882: PUSH
17883: LD_INT 0
17885: PUSH
17886: LD_INT 0
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PUSH
17893: LD_INT 0
17895: PUSH
17896: LD_INT 1
17898: NEG
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 1
17906: PUSH
17907: LD_INT 0
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 1
17916: PUSH
17917: LD_INT 1
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 0
17926: PUSH
17927: LD_INT 1
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 1
17936: NEG
17937: PUSH
17938: LD_INT 0
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 1
17947: NEG
17948: PUSH
17949: LD_INT 1
17951: NEG
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 1
17959: NEG
17960: PUSH
17961: LD_INT 2
17963: NEG
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 0
17971: PUSH
17972: LD_INT 2
17974: NEG
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 1
17982: PUSH
17983: LD_INT 1
17985: NEG
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 2
17993: PUSH
17994: LD_INT 0
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 2
18003: PUSH
18004: LD_INT 1
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 2
18013: PUSH
18014: LD_INT 2
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: LD_INT 2
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 0
18033: PUSH
18034: LD_INT 2
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 1
18043: NEG
18044: PUSH
18045: LD_INT 1
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 2
18054: NEG
18055: PUSH
18056: LD_INT 0
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 2
18065: NEG
18066: PUSH
18067: LD_INT 1
18069: NEG
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 2
18077: NEG
18078: PUSH
18079: LD_INT 2
18081: NEG
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18108: LD_ADDR_VAR 0 23
18112: PUSH
18113: LD_INT 0
18115: PUSH
18116: LD_INT 0
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 0
18125: PUSH
18126: LD_INT 1
18128: NEG
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 1
18136: PUSH
18137: LD_INT 0
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 1
18146: PUSH
18147: LD_INT 1
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 0
18156: PUSH
18157: LD_INT 1
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 1
18166: NEG
18167: PUSH
18168: LD_INT 0
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 1
18177: NEG
18178: PUSH
18179: LD_INT 1
18181: NEG
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 1
18189: NEG
18190: PUSH
18191: LD_INT 2
18193: NEG
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 0
18201: PUSH
18202: LD_INT 2
18204: NEG
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: LD_INT 1
18215: NEG
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 2
18223: PUSH
18224: LD_INT 0
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 2
18233: PUSH
18234: LD_INT 1
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 2
18243: PUSH
18244: LD_INT 2
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 1
18253: PUSH
18254: LD_INT 2
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 0
18263: PUSH
18264: LD_INT 2
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 1
18273: NEG
18274: PUSH
18275: LD_INT 1
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 2
18284: NEG
18285: PUSH
18286: LD_INT 0
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 2
18295: NEG
18296: PUSH
18297: LD_INT 1
18299: NEG
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 2
18307: NEG
18308: PUSH
18309: LD_INT 2
18311: NEG
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 2
18319: NEG
18320: PUSH
18321: LD_INT 3
18323: NEG
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 1
18331: NEG
18332: PUSH
18333: LD_INT 3
18335: NEG
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 1
18343: PUSH
18344: LD_INT 2
18346: NEG
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: LD_INT 2
18354: PUSH
18355: LD_INT 1
18357: NEG
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18388: LD_ADDR_VAR 0 24
18392: PUSH
18393: LD_INT 0
18395: PUSH
18396: LD_INT 0
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: LD_INT 1
18408: NEG
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 1
18416: PUSH
18417: LD_INT 0
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 1
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 0
18436: PUSH
18437: LD_INT 1
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 1
18446: NEG
18447: PUSH
18448: LD_INT 0
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 1
18457: NEG
18458: PUSH
18459: LD_INT 1
18461: NEG
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 1
18469: NEG
18470: PUSH
18471: LD_INT 2
18473: NEG
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: LD_INT 0
18481: PUSH
18482: LD_INT 2
18484: NEG
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 1
18492: PUSH
18493: LD_INT 1
18495: NEG
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 2
18503: PUSH
18504: LD_INT 0
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 2
18513: PUSH
18514: LD_INT 1
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 2
18523: PUSH
18524: LD_INT 2
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 1
18533: PUSH
18534: LD_INT 2
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 0
18543: PUSH
18544: LD_INT 2
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 1
18553: NEG
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 2
18564: NEG
18565: PUSH
18566: LD_INT 0
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 2
18575: NEG
18576: PUSH
18577: LD_INT 1
18579: NEG
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 2
18587: NEG
18588: PUSH
18589: LD_INT 2
18591: NEG
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 1
18599: PUSH
18600: LD_INT 2
18602: NEG
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 2
18610: PUSH
18611: LD_INT 1
18613: NEG
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 3
18621: PUSH
18622: LD_INT 1
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 3
18631: PUSH
18632: LD_INT 2
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18664: LD_ADDR_VAR 0 25
18668: PUSH
18669: LD_INT 0
18671: PUSH
18672: LD_INT 0
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 0
18681: PUSH
18682: LD_INT 1
18684: NEG
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 1
18692: PUSH
18693: LD_INT 0
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 1
18702: PUSH
18703: LD_INT 1
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 0
18712: PUSH
18713: LD_INT 1
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 1
18722: NEG
18723: PUSH
18724: LD_INT 0
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 1
18733: NEG
18734: PUSH
18735: LD_INT 1
18737: NEG
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 1
18745: NEG
18746: PUSH
18747: LD_INT 2
18749: NEG
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 0
18757: PUSH
18758: LD_INT 2
18760: NEG
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: LD_INT 1
18771: NEG
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 2
18779: PUSH
18780: LD_INT 0
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 2
18789: PUSH
18790: LD_INT 1
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 2
18799: PUSH
18800: LD_INT 2
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: LD_INT 2
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 0
18819: PUSH
18820: LD_INT 2
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 1
18829: NEG
18830: PUSH
18831: LD_INT 1
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 2
18840: NEG
18841: PUSH
18842: LD_INT 0
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 2
18851: NEG
18852: PUSH
18853: LD_INT 1
18855: NEG
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 2
18863: NEG
18864: PUSH
18865: LD_INT 2
18867: NEG
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 3
18875: PUSH
18876: LD_INT 1
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 3
18885: PUSH
18886: LD_INT 2
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 2
18895: PUSH
18896: LD_INT 3
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 1
18905: PUSH
18906: LD_INT 3
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18938: LD_ADDR_VAR 0 26
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: LD_INT 0
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 0
18955: PUSH
18956: LD_INT 1
18958: NEG
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 1
18966: PUSH
18967: LD_INT 0
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 0
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: NEG
18997: PUSH
18998: LD_INT 0
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 1
19007: NEG
19008: PUSH
19009: LD_INT 1
19011: NEG
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 1
19019: NEG
19020: PUSH
19021: LD_INT 2
19023: NEG
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 0
19031: PUSH
19032: LD_INT 2
19034: NEG
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 1
19042: PUSH
19043: LD_INT 1
19045: NEG
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 2
19053: PUSH
19054: LD_INT 0
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 2
19063: PUSH
19064: LD_INT 1
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 2
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 1
19083: PUSH
19084: LD_INT 2
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 0
19093: PUSH
19094: LD_INT 2
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 1
19103: NEG
19104: PUSH
19105: LD_INT 1
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 2
19114: NEG
19115: PUSH
19116: LD_INT 0
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 2
19125: NEG
19126: PUSH
19127: LD_INT 1
19129: NEG
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 2
19137: NEG
19138: PUSH
19139: LD_INT 2
19141: NEG
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 2
19149: PUSH
19150: LD_INT 3
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 1
19159: PUSH
19160: LD_INT 3
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 1
19169: NEG
19170: PUSH
19171: LD_INT 2
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 2
19180: NEG
19181: PUSH
19182: LD_INT 1
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19214: LD_ADDR_VAR 0 27
19218: PUSH
19219: LD_INT 0
19221: PUSH
19222: LD_INT 0
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 0
19231: PUSH
19232: LD_INT 1
19234: NEG
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 1
19242: PUSH
19243: LD_INT 0
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 1
19252: PUSH
19253: LD_INT 1
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 0
19262: PUSH
19263: LD_INT 1
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 1
19272: NEG
19273: PUSH
19274: LD_INT 0
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 1
19283: NEG
19284: PUSH
19285: LD_INT 1
19287: NEG
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 1
19295: NEG
19296: PUSH
19297: LD_INT 2
19299: NEG
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 0
19307: PUSH
19308: LD_INT 2
19310: NEG
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 1
19318: PUSH
19319: LD_INT 1
19321: NEG
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 2
19329: PUSH
19330: LD_INT 0
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 2
19339: PUSH
19340: LD_INT 1
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 2
19349: PUSH
19350: LD_INT 2
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 1
19359: PUSH
19360: LD_INT 2
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: LD_INT 0
19369: PUSH
19370: LD_INT 2
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 1
19379: NEG
19380: PUSH
19381: LD_INT 1
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 2
19390: NEG
19391: PUSH
19392: LD_INT 0
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 2
19401: NEG
19402: PUSH
19403: LD_INT 1
19405: NEG
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 2
19413: NEG
19414: PUSH
19415: LD_INT 2
19417: NEG
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 1
19425: NEG
19426: PUSH
19427: LD_INT 2
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 2
19436: NEG
19437: PUSH
19438: LD_INT 1
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 3
19447: NEG
19448: PUSH
19449: LD_INT 1
19451: NEG
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 3
19459: NEG
19460: PUSH
19461: LD_INT 2
19463: NEG
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19494: LD_ADDR_VAR 0 28
19498: PUSH
19499: LD_INT 0
19501: PUSH
19502: LD_INT 0
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 0
19511: PUSH
19512: LD_INT 1
19514: NEG
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 1
19522: PUSH
19523: LD_INT 0
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 1
19532: PUSH
19533: LD_INT 1
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 0
19542: PUSH
19543: LD_INT 1
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 1
19552: NEG
19553: PUSH
19554: LD_INT 0
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 1
19563: NEG
19564: PUSH
19565: LD_INT 1
19567: NEG
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 1
19575: NEG
19576: PUSH
19577: LD_INT 2
19579: NEG
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 0
19587: PUSH
19588: LD_INT 2
19590: NEG
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 1
19598: PUSH
19599: LD_INT 1
19601: NEG
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 2
19609: PUSH
19610: LD_INT 0
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 2
19619: PUSH
19620: LD_INT 1
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: PUSH
19630: LD_INT 2
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: LD_INT 2
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: LD_INT 2
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 1
19659: NEG
19660: PUSH
19661: LD_INT 1
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 2
19670: NEG
19671: PUSH
19672: LD_INT 0
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 2
19681: NEG
19682: PUSH
19683: LD_INT 1
19685: NEG
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 2
19693: NEG
19694: PUSH
19695: LD_INT 2
19697: NEG
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 2
19705: NEG
19706: PUSH
19707: LD_INT 3
19709: NEG
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 1
19717: NEG
19718: PUSH
19719: LD_INT 3
19721: NEG
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 3
19729: NEG
19730: PUSH
19731: LD_INT 1
19733: NEG
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 3
19741: NEG
19742: PUSH
19743: LD_INT 2
19745: NEG
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19776: LD_ADDR_VAR 0 29
19780: PUSH
19781: LD_INT 0
19783: PUSH
19784: LD_INT 0
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 0
19793: PUSH
19794: LD_INT 1
19796: NEG
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 1
19804: PUSH
19805: LD_INT 0
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 1
19814: PUSH
19815: LD_INT 1
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 0
19824: PUSH
19825: LD_INT 1
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 1
19834: NEG
19835: PUSH
19836: LD_INT 0
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 1
19845: NEG
19846: PUSH
19847: LD_INT 1
19849: NEG
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 1
19857: NEG
19858: PUSH
19859: LD_INT 2
19861: NEG
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 0
19869: PUSH
19870: LD_INT 2
19872: NEG
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 1
19880: PUSH
19881: LD_INT 1
19883: NEG
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 2
19891: PUSH
19892: LD_INT 0
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 2
19901: PUSH
19902: LD_INT 1
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 1
19911: PUSH
19912: LD_INT 2
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 0
19921: PUSH
19922: LD_INT 2
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 1
19931: NEG
19932: PUSH
19933: LD_INT 1
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 2
19942: NEG
19943: PUSH
19944: LD_INT 1
19946: NEG
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 2
19954: NEG
19955: PUSH
19956: LD_INT 2
19958: NEG
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 2
19966: NEG
19967: PUSH
19968: LD_INT 3
19970: NEG
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 2
19978: PUSH
19979: LD_INT 1
19981: NEG
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 3
19989: PUSH
19990: LD_INT 1
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 1
19999: PUSH
20000: LD_INT 3
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 1
20009: NEG
20010: PUSH
20011: LD_INT 2
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 3
20020: NEG
20021: PUSH
20022: LD_INT 2
20024: NEG
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20055: LD_ADDR_VAR 0 30
20059: PUSH
20060: LD_INT 0
20062: PUSH
20063: LD_INT 0
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 0
20072: PUSH
20073: LD_INT 1
20075: NEG
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 1
20083: PUSH
20084: LD_INT 0
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 1
20093: PUSH
20094: LD_INT 1
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 0
20103: PUSH
20104: LD_INT 1
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 1
20113: NEG
20114: PUSH
20115: LD_INT 0
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 1
20124: NEG
20125: PUSH
20126: LD_INT 1
20128: NEG
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 1
20136: NEG
20137: PUSH
20138: LD_INT 2
20140: NEG
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 0
20148: PUSH
20149: LD_INT 2
20151: NEG
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: PUSH
20160: LD_INT 1
20162: NEG
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 2
20170: PUSH
20171: LD_INT 0
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 2
20180: PUSH
20181: LD_INT 1
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 2
20190: PUSH
20191: LD_INT 2
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 1
20200: PUSH
20201: LD_INT 2
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 1
20210: NEG
20211: PUSH
20212: LD_INT 1
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 2
20221: NEG
20222: PUSH
20223: LD_INT 0
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 2
20232: NEG
20233: PUSH
20234: LD_INT 1
20236: NEG
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 1
20244: NEG
20245: PUSH
20246: LD_INT 3
20248: NEG
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 1
20256: PUSH
20257: LD_INT 2
20259: NEG
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 3
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 2
20277: PUSH
20278: LD_INT 3
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 2
20287: NEG
20288: PUSH
20289: LD_INT 1
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 3
20298: NEG
20299: PUSH
20300: LD_INT 1
20302: NEG
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20333: LD_ADDR_VAR 0 31
20337: PUSH
20338: LD_INT 0
20340: PUSH
20341: LD_INT 0
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 0
20350: PUSH
20351: LD_INT 1
20353: NEG
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: LD_INT 0
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 1
20371: PUSH
20372: LD_INT 1
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 0
20381: PUSH
20382: LD_INT 1
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 1
20391: NEG
20392: PUSH
20393: LD_INT 0
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 1
20402: NEG
20403: PUSH
20404: LD_INT 1
20406: NEG
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 1
20414: NEG
20415: PUSH
20416: LD_INT 2
20418: NEG
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 1
20426: PUSH
20427: LD_INT 1
20429: NEG
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 2
20437: PUSH
20438: LD_INT 0
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 2
20447: PUSH
20448: LD_INT 1
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 2
20457: PUSH
20458: LD_INT 2
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 1
20467: PUSH
20468: LD_INT 2
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: LD_INT 2
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 1
20487: NEG
20488: PUSH
20489: LD_INT 1
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 2
20498: NEG
20499: PUSH
20500: LD_INT 1
20502: NEG
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 2
20510: NEG
20511: PUSH
20512: LD_INT 2
20514: NEG
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 2
20522: NEG
20523: PUSH
20524: LD_INT 3
20526: NEG
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 2
20534: PUSH
20535: LD_INT 1
20537: NEG
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 3
20545: PUSH
20546: LD_INT 1
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 1
20555: PUSH
20556: LD_INT 3
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 1
20565: NEG
20566: PUSH
20567: LD_INT 2
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 3
20576: NEG
20577: PUSH
20578: LD_INT 2
20580: NEG
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20611: LD_ADDR_VAR 0 32
20615: PUSH
20616: LD_INT 0
20618: PUSH
20619: LD_INT 0
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 0
20628: PUSH
20629: LD_INT 1
20631: NEG
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 1
20639: PUSH
20640: LD_INT 0
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 1
20649: PUSH
20650: LD_INT 1
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 0
20659: PUSH
20660: LD_INT 1
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 1
20669: NEG
20670: PUSH
20671: LD_INT 0
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PUSH
20678: LD_INT 1
20680: NEG
20681: PUSH
20682: LD_INT 1
20684: NEG
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 1
20692: NEG
20693: PUSH
20694: LD_INT 2
20696: NEG
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 0
20704: PUSH
20705: LD_INT 2
20707: NEG
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: PUSH
20716: LD_INT 1
20718: NEG
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 2
20726: PUSH
20727: LD_INT 1
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 2
20736: PUSH
20737: LD_INT 2
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 1
20746: PUSH
20747: LD_INT 2
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 0
20756: PUSH
20757: LD_INT 2
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 1
20766: NEG
20767: PUSH
20768: LD_INT 1
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 2
20777: NEG
20778: PUSH
20779: LD_INT 0
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 2
20788: NEG
20789: PUSH
20790: LD_INT 1
20792: NEG
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 1
20800: NEG
20801: PUSH
20802: LD_INT 3
20804: NEG
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 1
20812: PUSH
20813: LD_INT 2
20815: NEG
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 3
20823: PUSH
20824: LD_INT 2
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 2
20833: PUSH
20834: LD_INT 3
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 2
20843: NEG
20844: PUSH
20845: LD_INT 1
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 3
20854: NEG
20855: PUSH
20856: LD_INT 1
20858: NEG
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20889: LD_ADDR_VAR 0 33
20893: PUSH
20894: LD_INT 0
20896: PUSH
20897: LD_INT 0
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 0
20906: PUSH
20907: LD_INT 1
20909: NEG
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 1
20917: PUSH
20918: LD_INT 0
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 1
20927: PUSH
20928: LD_INT 1
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 0
20937: PUSH
20938: LD_INT 1
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 1
20947: NEG
20948: PUSH
20949: LD_INT 0
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 1
20958: NEG
20959: PUSH
20960: LD_INT 1
20962: NEG
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 1
20970: NEG
20971: PUSH
20972: LD_INT 2
20974: NEG
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 1
20982: PUSH
20983: LD_INT 1
20985: NEG
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 2
20993: PUSH
20994: LD_INT 0
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 2
21003: PUSH
21004: LD_INT 1
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 1
21013: PUSH
21014: LD_INT 2
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 0
21023: PUSH
21024: LD_INT 2
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 1
21033: NEG
21034: PUSH
21035: LD_INT 1
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 2
21044: NEG
21045: PUSH
21046: LD_INT 0
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: LD_INT 2
21055: NEG
21056: PUSH
21057: LD_INT 1
21059: NEG
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 2
21067: NEG
21068: PUSH
21069: LD_INT 2
21071: NEG
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 2
21079: NEG
21080: PUSH
21081: LD_INT 3
21083: NEG
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 2
21091: PUSH
21092: LD_INT 1
21094: NEG
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 3
21102: PUSH
21103: LD_INT 1
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 1
21112: PUSH
21113: LD_INT 3
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 1
21122: NEG
21123: PUSH
21124: LD_INT 2
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 3
21133: NEG
21134: PUSH
21135: LD_INT 2
21137: NEG
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21168: LD_ADDR_VAR 0 34
21172: PUSH
21173: LD_INT 0
21175: PUSH
21176: LD_INT 0
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 0
21185: PUSH
21186: LD_INT 1
21188: NEG
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 1
21196: PUSH
21197: LD_INT 0
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 1
21206: PUSH
21207: LD_INT 1
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 0
21216: PUSH
21217: LD_INT 1
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 1
21226: NEG
21227: PUSH
21228: LD_INT 0
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 1
21237: NEG
21238: PUSH
21239: LD_INT 1
21241: NEG
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 1
21249: NEG
21250: PUSH
21251: LD_INT 2
21253: NEG
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 0
21261: PUSH
21262: LD_INT 2
21264: NEG
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 1
21272: PUSH
21273: LD_INT 1
21275: NEG
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 2
21283: PUSH
21284: LD_INT 1
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 2
21293: PUSH
21294: LD_INT 2
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: LD_INT 2
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 1
21313: NEG
21314: PUSH
21315: LD_INT 1
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 2
21324: NEG
21325: PUSH
21326: LD_INT 0
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 2
21335: NEG
21336: PUSH
21337: LD_INT 1
21339: NEG
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 2
21347: NEG
21348: PUSH
21349: LD_INT 2
21351: NEG
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 1
21359: NEG
21360: PUSH
21361: LD_INT 3
21363: NEG
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 1
21371: PUSH
21372: LD_INT 2
21374: NEG
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 3
21382: PUSH
21383: LD_INT 2
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 2
21392: PUSH
21393: LD_INT 3
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 2
21402: NEG
21403: PUSH
21404: LD_INT 1
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 3
21413: NEG
21414: PUSH
21415: LD_INT 1
21417: NEG
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21448: LD_ADDR_VAR 0 35
21452: PUSH
21453: LD_INT 0
21455: PUSH
21456: LD_INT 0
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 0
21465: PUSH
21466: LD_INT 1
21468: NEG
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 1
21476: PUSH
21477: LD_INT 0
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 1
21486: PUSH
21487: LD_INT 1
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 0
21496: PUSH
21497: LD_INT 1
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 1
21506: NEG
21507: PUSH
21508: LD_INT 0
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 1
21517: NEG
21518: PUSH
21519: LD_INT 1
21521: NEG
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 2
21529: PUSH
21530: LD_INT 1
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 2
21539: NEG
21540: PUSH
21541: LD_INT 1
21543: NEG
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21560: LD_ADDR_VAR 0 36
21564: PUSH
21565: LD_INT 0
21567: PUSH
21568: LD_INT 0
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 0
21577: PUSH
21578: LD_INT 1
21580: NEG
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 1
21588: PUSH
21589: LD_INT 0
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 1
21598: PUSH
21599: LD_INT 1
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 0
21608: PUSH
21609: LD_INT 1
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 1
21618: NEG
21619: PUSH
21620: LD_INT 0
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 1
21629: NEG
21630: PUSH
21631: LD_INT 1
21633: NEG
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 1
21641: NEG
21642: PUSH
21643: LD_INT 2
21645: NEG
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 1
21653: PUSH
21654: LD_INT 2
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21672: LD_ADDR_VAR 0 37
21676: PUSH
21677: LD_INT 0
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 0
21689: PUSH
21690: LD_INT 1
21692: NEG
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 1
21700: PUSH
21701: LD_INT 0
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 1
21710: PUSH
21711: LD_INT 1
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 0
21720: PUSH
21721: LD_INT 1
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 1
21730: NEG
21731: PUSH
21732: LD_INT 0
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: NEG
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 1
21753: PUSH
21754: LD_INT 1
21756: NEG
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 1
21764: NEG
21765: PUSH
21766: LD_INT 1
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21784: LD_ADDR_VAR 0 38
21788: PUSH
21789: LD_INT 0
21791: PUSH
21792: LD_INT 0
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 0
21801: PUSH
21802: LD_INT 1
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: LD_INT 0
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 1
21822: PUSH
21823: LD_INT 1
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 0
21832: PUSH
21833: LD_INT 1
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 1
21842: NEG
21843: PUSH
21844: LD_INT 0
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 1
21853: NEG
21854: PUSH
21855: LD_INT 1
21857: NEG
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 2
21865: PUSH
21866: LD_INT 1
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 2
21875: NEG
21876: PUSH
21877: LD_INT 1
21879: NEG
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21896: LD_ADDR_VAR 0 39
21900: PUSH
21901: LD_INT 0
21903: PUSH
21904: LD_INT 0
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 0
21913: PUSH
21914: LD_INT 1
21916: NEG
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 1
21924: PUSH
21925: LD_INT 0
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 1
21934: PUSH
21935: LD_INT 1
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 0
21944: PUSH
21945: LD_INT 1
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 1
21954: NEG
21955: PUSH
21956: LD_INT 0
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 1
21965: NEG
21966: PUSH
21967: LD_INT 1
21969: NEG
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 1
21977: NEG
21978: PUSH
21979: LD_INT 2
21981: NEG
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 1
21989: PUSH
21990: LD_INT 2
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22008: LD_ADDR_VAR 0 40
22012: PUSH
22013: LD_INT 0
22015: PUSH
22016: LD_INT 0
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 0
22025: PUSH
22026: LD_INT 1
22028: NEG
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 1
22036: PUSH
22037: LD_INT 0
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 1
22046: PUSH
22047: LD_INT 1
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 0
22056: PUSH
22057: LD_INT 1
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 1
22066: NEG
22067: PUSH
22068: LD_INT 0
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 1
22077: NEG
22078: PUSH
22079: LD_INT 1
22081: NEG
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 1
22089: PUSH
22090: LD_INT 1
22092: NEG
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 1
22100: NEG
22101: PUSH
22102: LD_INT 1
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22120: LD_ADDR_VAR 0 41
22124: PUSH
22125: LD_INT 0
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 0
22137: PUSH
22138: LD_INT 1
22140: NEG
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 1
22148: PUSH
22149: LD_INT 0
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 1
22158: PUSH
22159: LD_INT 1
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 0
22168: PUSH
22169: LD_INT 1
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 1
22178: NEG
22179: PUSH
22180: LD_INT 0
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 1
22189: NEG
22190: PUSH
22191: LD_INT 1
22193: NEG
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 1
22201: NEG
22202: PUSH
22203: LD_INT 2
22205: NEG
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 1
22213: PUSH
22214: LD_INT 1
22216: NEG
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 2
22224: PUSH
22225: LD_INT 0
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 2
22234: PUSH
22235: LD_INT 1
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 2
22244: PUSH
22245: LD_INT 2
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 1
22254: PUSH
22255: LD_INT 2
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 1
22264: NEG
22265: PUSH
22266: LD_INT 1
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 2
22275: NEG
22276: PUSH
22277: LD_INT 0
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 2
22286: NEG
22287: PUSH
22288: LD_INT 1
22290: NEG
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 2
22298: NEG
22299: PUSH
22300: LD_INT 2
22302: NEG
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 2
22310: NEG
22311: PUSH
22312: LD_INT 3
22314: NEG
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 2
22322: PUSH
22323: LD_INT 1
22325: NEG
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 3
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 3
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 3
22353: PUSH
22354: LD_INT 2
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 3
22363: PUSH
22364: LD_INT 3
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: LD_INT 2
22373: PUSH
22374: LD_INT 3
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 2
22383: NEG
22384: PUSH
22385: LD_INT 1
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 3
22394: NEG
22395: PUSH
22396: LD_INT 0
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 3
22405: NEG
22406: PUSH
22407: LD_INT 1
22409: NEG
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 3
22417: NEG
22418: PUSH
22419: LD_INT 2
22421: NEG
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 3
22429: NEG
22430: PUSH
22431: LD_INT 3
22433: NEG
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22470: LD_ADDR_VAR 0 42
22474: PUSH
22475: LD_INT 0
22477: PUSH
22478: LD_INT 0
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 0
22487: PUSH
22488: LD_INT 1
22490: NEG
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 1
22498: PUSH
22499: LD_INT 0
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 1
22508: PUSH
22509: LD_INT 1
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 0
22518: PUSH
22519: LD_INT 1
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 1
22528: NEG
22529: PUSH
22530: LD_INT 0
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 1
22539: NEG
22540: PUSH
22541: LD_INT 1
22543: NEG
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 1
22551: NEG
22552: PUSH
22553: LD_INT 2
22555: NEG
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 0
22563: PUSH
22564: LD_INT 2
22566: NEG
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: LD_INT 1
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 2
22585: PUSH
22586: LD_INT 1
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 2
22595: PUSH
22596: LD_INT 2
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 1
22605: PUSH
22606: LD_INT 2
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 0
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 1
22625: NEG
22626: PUSH
22627: LD_INT 1
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 2
22636: NEG
22637: PUSH
22638: LD_INT 1
22640: NEG
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 2
22648: NEG
22649: PUSH
22650: LD_INT 2
22652: NEG
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 2
22660: NEG
22661: PUSH
22662: LD_INT 3
22664: NEG
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 1
22672: NEG
22673: PUSH
22674: LD_INT 3
22676: NEG
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 0
22684: PUSH
22685: LD_INT 3
22687: NEG
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: LD_INT 2
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 3
22706: PUSH
22707: LD_INT 2
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 3
22716: PUSH
22717: LD_INT 3
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 2
22726: PUSH
22727: LD_INT 3
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 1
22736: PUSH
22737: LD_INT 3
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 0
22746: PUSH
22747: LD_INT 3
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 1
22756: NEG
22757: PUSH
22758: LD_INT 2
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 3
22767: NEG
22768: PUSH
22769: LD_INT 2
22771: NEG
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 3
22779: NEG
22780: PUSH
22781: LD_INT 3
22783: NEG
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22820: LD_ADDR_VAR 0 43
22824: PUSH
22825: LD_INT 0
22827: PUSH
22828: LD_INT 0
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 0
22837: PUSH
22838: LD_INT 1
22840: NEG
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 1
22848: PUSH
22849: LD_INT 0
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 1
22858: PUSH
22859: LD_INT 1
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 0
22868: PUSH
22869: LD_INT 1
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 1
22878: NEG
22879: PUSH
22880: LD_INT 0
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 1
22889: NEG
22890: PUSH
22891: LD_INT 1
22893: NEG
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: LD_INT 1
22901: NEG
22902: PUSH
22903: LD_INT 2
22905: NEG
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: LD_INT 2
22916: NEG
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 1
22924: PUSH
22925: LD_INT 1
22927: NEG
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 2
22935: PUSH
22936: LD_INT 0
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 2
22945: PUSH
22946: LD_INT 1
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 1
22955: PUSH
22956: LD_INT 2
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 0
22965: PUSH
22966: LD_INT 2
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 1
22975: NEG
22976: PUSH
22977: LD_INT 1
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 2
22986: NEG
22987: PUSH
22988: LD_INT 0
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 2
22997: NEG
22998: PUSH
22999: LD_INT 1
23001: NEG
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 1
23009: NEG
23010: PUSH
23011: LD_INT 3
23013: NEG
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 0
23021: PUSH
23022: LD_INT 3
23024: NEG
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 1
23032: PUSH
23033: LD_INT 2
23035: NEG
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 2
23043: PUSH
23044: LD_INT 1
23046: NEG
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 3
23054: PUSH
23055: LD_INT 0
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 3
23064: PUSH
23065: LD_INT 1
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: LD_INT 3
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 0
23084: PUSH
23085: LD_INT 3
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: LD_INT 1
23094: NEG
23095: PUSH
23096: LD_INT 2
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 2
23105: NEG
23106: PUSH
23107: LD_INT 1
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: LD_INT 3
23116: NEG
23117: PUSH
23118: LD_INT 0
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 3
23127: NEG
23128: PUSH
23129: LD_INT 1
23131: NEG
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23168: LD_ADDR_VAR 0 44
23172: PUSH
23173: LD_INT 0
23175: PUSH
23176: LD_INT 0
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 0
23185: PUSH
23186: LD_INT 1
23188: NEG
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 1
23196: PUSH
23197: LD_INT 0
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 1
23206: PUSH
23207: LD_INT 1
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 0
23216: PUSH
23217: LD_INT 1
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 1
23226: NEG
23227: PUSH
23228: LD_INT 0
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 1
23237: NEG
23238: PUSH
23239: LD_INT 1
23241: NEG
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 1
23249: NEG
23250: PUSH
23251: LD_INT 2
23253: NEG
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 1
23261: PUSH
23262: LD_INT 1
23264: NEG
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 2
23272: PUSH
23273: LD_INT 0
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 2
23282: PUSH
23283: LD_INT 1
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 2
23292: PUSH
23293: LD_INT 2
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 1
23302: PUSH
23303: LD_INT 2
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 1
23312: NEG
23313: PUSH
23314: LD_INT 1
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 2
23323: NEG
23324: PUSH
23325: LD_INT 0
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 2
23334: NEG
23335: PUSH
23336: LD_INT 1
23338: NEG
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 2
23346: NEG
23347: PUSH
23348: LD_INT 2
23350: NEG
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 2
23358: NEG
23359: PUSH
23360: LD_INT 3
23362: NEG
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 2
23370: PUSH
23371: LD_INT 1
23373: NEG
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 3
23381: PUSH
23382: LD_INT 0
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 3
23391: PUSH
23392: LD_INT 1
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 3
23401: PUSH
23402: LD_INT 2
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 3
23411: PUSH
23412: LD_INT 3
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 2
23421: PUSH
23422: LD_INT 3
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 2
23431: NEG
23432: PUSH
23433: LD_INT 1
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 3
23442: NEG
23443: PUSH
23444: LD_INT 0
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 3
23453: NEG
23454: PUSH
23455: LD_INT 1
23457: NEG
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 3
23465: NEG
23466: PUSH
23467: LD_INT 2
23469: NEG
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 3
23477: NEG
23478: PUSH
23479: LD_INT 3
23481: NEG
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23518: LD_ADDR_VAR 0 45
23522: PUSH
23523: LD_INT 0
23525: PUSH
23526: LD_INT 0
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 0
23535: PUSH
23536: LD_INT 1
23538: NEG
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 1
23546: PUSH
23547: LD_INT 0
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 1
23556: PUSH
23557: LD_INT 1
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 0
23566: PUSH
23567: LD_INT 1
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 1
23576: NEG
23577: PUSH
23578: LD_INT 0
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 1
23587: NEG
23588: PUSH
23589: LD_INT 1
23591: NEG
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 1
23599: NEG
23600: PUSH
23601: LD_INT 2
23603: NEG
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: LD_INT 2
23614: NEG
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 1
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 2
23633: PUSH
23634: LD_INT 1
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 2
23643: PUSH
23644: LD_INT 2
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 1
23653: PUSH
23654: LD_INT 2
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 0
23663: PUSH
23664: LD_INT 2
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 1
23673: NEG
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 2
23684: NEG
23685: PUSH
23686: LD_INT 1
23688: NEG
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 2
23696: NEG
23697: PUSH
23698: LD_INT 2
23700: NEG
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 2
23708: NEG
23709: PUSH
23710: LD_INT 3
23712: NEG
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 1
23720: NEG
23721: PUSH
23722: LD_INT 3
23724: NEG
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: LD_INT 3
23735: NEG
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 1
23743: PUSH
23744: LD_INT 2
23746: NEG
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 3
23754: PUSH
23755: LD_INT 2
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 3
23764: PUSH
23765: LD_INT 3
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 2
23774: PUSH
23775: LD_INT 3
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: PUSH
23785: LD_INT 3
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 0
23794: PUSH
23795: LD_INT 3
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 1
23804: NEG
23805: PUSH
23806: LD_INT 2
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 3
23815: NEG
23816: PUSH
23817: LD_INT 2
23819: NEG
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 3
23827: NEG
23828: PUSH
23829: LD_INT 3
23831: NEG
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23868: LD_ADDR_VAR 0 46
23872: PUSH
23873: LD_INT 0
23875: PUSH
23876: LD_INT 0
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 0
23885: PUSH
23886: LD_INT 1
23888: NEG
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: LD_INT 0
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 1
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 0
23916: PUSH
23917: LD_INT 1
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 1
23926: NEG
23927: PUSH
23928: LD_INT 0
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 1
23937: NEG
23938: PUSH
23939: LD_INT 1
23941: NEG
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 1
23949: NEG
23950: PUSH
23951: LD_INT 2
23953: NEG
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 0
23961: PUSH
23962: LD_INT 2
23964: NEG
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 1
23972: PUSH
23973: LD_INT 1
23975: NEG
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 2
23983: PUSH
23984: LD_INT 0
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 2
23993: PUSH
23994: LD_INT 1
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 1
24003: PUSH
24004: LD_INT 2
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 0
24013: PUSH
24014: LD_INT 2
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 1
24023: NEG
24024: PUSH
24025: LD_INT 1
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 2
24034: NEG
24035: PUSH
24036: LD_INT 0
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 2
24045: NEG
24046: PUSH
24047: LD_INT 1
24049: NEG
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 1
24057: NEG
24058: PUSH
24059: LD_INT 3
24061: NEG
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: LD_INT 3
24072: NEG
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: LD_INT 2
24083: NEG
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 2
24091: PUSH
24092: LD_INT 1
24094: NEG
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 3
24102: PUSH
24103: LD_INT 0
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 3
24112: PUSH
24113: LD_INT 1
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 1
24122: PUSH
24123: LD_INT 3
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 0
24132: PUSH
24133: LD_INT 3
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 1
24142: NEG
24143: PUSH
24144: LD_INT 2
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 2
24153: NEG
24154: PUSH
24155: LD_INT 1
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 3
24164: NEG
24165: PUSH
24166: LD_INT 0
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 3
24175: NEG
24176: PUSH
24177: LD_INT 1
24179: NEG
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24216: LD_ADDR_VAR 0 47
24220: PUSH
24221: LD_INT 0
24223: PUSH
24224: LD_INT 0
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 0
24233: PUSH
24234: LD_INT 1
24236: NEG
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: LD_INT 0
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 1
24254: PUSH
24255: LD_INT 1
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 0
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 1
24274: NEG
24275: PUSH
24276: LD_INT 0
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 1
24285: NEG
24286: PUSH
24287: LD_INT 1
24289: NEG
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 1
24297: NEG
24298: PUSH
24299: LD_INT 2
24301: NEG
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 0
24309: PUSH
24310: LD_INT 2
24312: NEG
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 1
24320: PUSH
24321: LD_INT 1
24323: NEG
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 2
24331: NEG
24332: PUSH
24333: LD_INT 1
24335: NEG
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 2
24343: NEG
24344: PUSH
24345: LD_INT 2
24347: NEG
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24367: LD_ADDR_VAR 0 48
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 0
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 1
24395: PUSH
24396: LD_INT 0
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 0
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 1
24425: NEG
24426: PUSH
24427: LD_INT 0
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 1
24436: NEG
24437: PUSH
24438: LD_INT 1
24440: NEG
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 1
24448: NEG
24449: PUSH
24450: LD_INT 2
24452: NEG
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: LD_INT 2
24463: NEG
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 1
24471: PUSH
24472: LD_INT 1
24474: NEG
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 2
24482: PUSH
24483: LD_INT 0
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 2
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24514: LD_ADDR_VAR 0 49
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: LD_INT 0
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 0
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: PUSH
24543: LD_INT 0
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 1
24552: PUSH
24553: LD_INT 1
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 0
24562: PUSH
24563: LD_INT 1
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 1
24572: NEG
24573: PUSH
24574: LD_INT 0
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 1
24583: NEG
24584: PUSH
24585: LD_INT 1
24587: NEG
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: PUSH
24596: LD_INT 1
24598: NEG
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 2
24606: PUSH
24607: LD_INT 0
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 2
24616: PUSH
24617: LD_INT 1
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 2
24626: PUSH
24627: LD_INT 2
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: LD_INT 2
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24658: LD_ADDR_VAR 0 50
24662: PUSH
24663: LD_INT 0
24665: PUSH
24666: LD_INT 0
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 0
24675: PUSH
24676: LD_INT 1
24678: NEG
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 1
24686: PUSH
24687: LD_INT 0
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 1
24696: PUSH
24697: LD_INT 1
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: LD_INT 1
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 1
24716: NEG
24717: PUSH
24718: LD_INT 0
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 1
24727: NEG
24728: PUSH
24729: LD_INT 1
24731: NEG
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 2
24739: PUSH
24740: LD_INT 1
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 2
24749: PUSH
24750: LD_INT 2
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 1
24759: PUSH
24760: LD_INT 2
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 0
24769: PUSH
24770: LD_INT 2
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 1
24779: NEG
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24802: LD_ADDR_VAR 0 51
24806: PUSH
24807: LD_INT 0
24809: PUSH
24810: LD_INT 0
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: LD_INT 1
24822: NEG
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 1
24830: PUSH
24831: LD_INT 0
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 1
24840: PUSH
24841: LD_INT 1
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 0
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 1
24860: NEG
24861: PUSH
24862: LD_INT 0
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 1
24871: NEG
24872: PUSH
24873: LD_INT 1
24875: NEG
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: LD_INT 2
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: LD_INT 2
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 1
24903: NEG
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 2
24914: NEG
24915: PUSH
24916: LD_INT 0
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 2
24925: NEG
24926: PUSH
24927: LD_INT 1
24929: NEG
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24949: LD_ADDR_VAR 0 52
24953: PUSH
24954: LD_INT 0
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 0
24966: PUSH
24967: LD_INT 1
24969: NEG
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 1
24977: PUSH
24978: LD_INT 0
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: LD_INT 1
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 0
24997: PUSH
24998: LD_INT 1
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 1
25007: NEG
25008: PUSH
25009: LD_INT 0
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 1
25018: NEG
25019: PUSH
25020: LD_INT 1
25022: NEG
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 1
25030: NEG
25031: PUSH
25032: LD_INT 2
25034: NEG
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 1
25042: NEG
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 2
25053: NEG
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 2
25064: NEG
25065: PUSH
25066: LD_INT 1
25068: NEG
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 2
25076: NEG
25077: PUSH
25078: LD_INT 2
25080: NEG
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25100: LD_ADDR_VAR 0 53
25104: PUSH
25105: LD_INT 0
25107: PUSH
25108: LD_INT 0
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: LD_INT 1
25120: NEG
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: LD_INT 0
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 1
25138: PUSH
25139: LD_INT 1
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 0
25148: PUSH
25149: LD_INT 1
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 1
25158: NEG
25159: PUSH
25160: LD_INT 0
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 1
25169: NEG
25170: PUSH
25171: LD_INT 1
25173: NEG
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 1
25181: NEG
25182: PUSH
25183: LD_INT 2
25185: NEG
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 0
25193: PUSH
25194: LD_INT 2
25196: NEG
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 1
25204: PUSH
25205: LD_INT 1
25207: NEG
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 2
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 2
25225: PUSH
25226: LD_INT 1
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 2
25235: PUSH
25236: LD_INT 2
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: LD_INT 2
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 0
25255: PUSH
25256: LD_INT 2
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 1
25265: NEG
25266: PUSH
25267: LD_INT 1
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 2
25276: NEG
25277: PUSH
25278: LD_INT 0
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 2
25287: NEG
25288: PUSH
25289: LD_INT 1
25291: NEG
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 2
25299: NEG
25300: PUSH
25301: LD_INT 2
25303: NEG
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25330: LD_ADDR_VAR 0 54
25334: PUSH
25335: LD_INT 0
25337: PUSH
25338: LD_INT 0
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 0
25347: PUSH
25348: LD_INT 1
25350: NEG
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: LD_INT 0
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 1
25368: PUSH
25369: LD_INT 1
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 0
25378: PUSH
25379: LD_INT 1
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 1
25388: NEG
25389: PUSH
25390: LD_INT 0
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 1
25399: NEG
25400: PUSH
25401: LD_INT 1
25403: NEG
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 1
25411: NEG
25412: PUSH
25413: LD_INT 2
25415: NEG
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 0
25423: PUSH
25424: LD_INT 2
25426: NEG
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 1
25434: PUSH
25435: LD_INT 1
25437: NEG
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 2
25445: PUSH
25446: LD_INT 0
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 2
25455: PUSH
25456: LD_INT 1
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 2
25465: PUSH
25466: LD_INT 2
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 1
25475: PUSH
25476: LD_INT 2
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 0
25485: PUSH
25486: LD_INT 2
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 1
25495: NEG
25496: PUSH
25497: LD_INT 1
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 2
25506: NEG
25507: PUSH
25508: LD_INT 0
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 2
25517: NEG
25518: PUSH
25519: LD_INT 1
25521: NEG
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 2
25529: NEG
25530: PUSH
25531: LD_INT 2
25533: NEG
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25560: LD_ADDR_VAR 0 55
25564: PUSH
25565: LD_INT 0
25567: PUSH
25568: LD_INT 0
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 0
25577: PUSH
25578: LD_INT 1
25580: NEG
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 1
25588: PUSH
25589: LD_INT 0
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 1
25598: PUSH
25599: LD_INT 1
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 1
25618: NEG
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 1
25629: NEG
25630: PUSH
25631: LD_INT 1
25633: NEG
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 1
25641: NEG
25642: PUSH
25643: LD_INT 2
25645: NEG
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 0
25653: PUSH
25654: LD_INT 2
25656: NEG
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: LD_INT 1
25667: NEG
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 2
25675: PUSH
25676: LD_INT 0
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 2
25685: PUSH
25686: LD_INT 1
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 2
25695: PUSH
25696: LD_INT 2
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 1
25705: PUSH
25706: LD_INT 2
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 0
25715: PUSH
25716: LD_INT 2
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 1
25725: NEG
25726: PUSH
25727: LD_INT 1
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 2
25736: NEG
25737: PUSH
25738: LD_INT 0
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 2
25747: NEG
25748: PUSH
25749: LD_INT 1
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 2
25759: NEG
25760: PUSH
25761: LD_INT 2
25763: NEG
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25790: LD_ADDR_VAR 0 56
25794: PUSH
25795: LD_INT 0
25797: PUSH
25798: LD_INT 0
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: LD_INT 1
25810: NEG
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 1
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 1
25828: PUSH
25829: LD_INT 1
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 0
25838: PUSH
25839: LD_INT 1
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 1
25848: NEG
25849: PUSH
25850: LD_INT 0
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 1
25859: NEG
25860: PUSH
25861: LD_INT 1
25863: NEG
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 1
25871: NEG
25872: PUSH
25873: LD_INT 2
25875: NEG
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 0
25883: PUSH
25884: LD_INT 2
25886: NEG
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: LD_INT 1
25897: NEG
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 2
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 2
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 2
25925: PUSH
25926: LD_INT 2
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: LD_INT 2
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 0
25945: PUSH
25946: LD_INT 2
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 1
25955: NEG
25956: PUSH
25957: LD_INT 1
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 2
25966: NEG
25967: PUSH
25968: LD_INT 0
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 2
25977: NEG
25978: PUSH
25979: LD_INT 1
25981: NEG
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 2
25989: NEG
25990: PUSH
25991: LD_INT 2
25993: NEG
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26020: LD_ADDR_VAR 0 57
26024: PUSH
26025: LD_INT 0
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 0
26037: PUSH
26038: LD_INT 1
26040: NEG
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: PUSH
26049: LD_INT 0
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 1
26058: PUSH
26059: LD_INT 1
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: LD_INT 1
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 1
26078: NEG
26079: PUSH
26080: LD_INT 0
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 1
26089: NEG
26090: PUSH
26091: LD_INT 1
26093: NEG
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 1
26101: NEG
26102: PUSH
26103: LD_INT 2
26105: NEG
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 0
26113: PUSH
26114: LD_INT 2
26116: NEG
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 1
26124: PUSH
26125: LD_INT 1
26127: NEG
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 2
26135: PUSH
26136: LD_INT 0
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 2
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 2
26155: PUSH
26156: LD_INT 2
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 1
26165: PUSH
26166: LD_INT 2
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 0
26175: PUSH
26176: LD_INT 2
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 1
26185: NEG
26186: PUSH
26187: LD_INT 1
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 2
26196: NEG
26197: PUSH
26198: LD_INT 0
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 2
26207: NEG
26208: PUSH
26209: LD_INT 1
26211: NEG
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 2
26219: NEG
26220: PUSH
26221: LD_INT 2
26223: NEG
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26250: LD_ADDR_VAR 0 58
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 0
26267: PUSH
26268: LD_INT 1
26270: NEG
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: LD_INT 0
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: LD_INT 1
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 1
26308: NEG
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 1
26319: NEG
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 1
26331: NEG
26332: PUSH
26333: LD_INT 2
26335: NEG
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 0
26343: PUSH
26344: LD_INT 2
26346: NEG
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: LD_INT 1
26357: NEG
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 2
26365: PUSH
26366: LD_INT 0
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 2
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 2
26385: PUSH
26386: LD_INT 2
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: LD_INT 2
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 0
26405: PUSH
26406: LD_INT 2
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 1
26415: NEG
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 2
26426: NEG
26427: PUSH
26428: LD_INT 0
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 2
26437: NEG
26438: PUSH
26439: LD_INT 1
26441: NEG
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 2
26449: NEG
26450: PUSH
26451: LD_INT 2
26453: NEG
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26480: LD_ADDR_VAR 0 59
26484: PUSH
26485: LD_INT 0
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 0
26497: PUSH
26498: LD_INT 1
26500: NEG
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 1
26508: PUSH
26509: LD_INT 0
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 1
26518: PUSH
26519: LD_INT 1
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 0
26528: PUSH
26529: LD_INT 1
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 1
26538: NEG
26539: PUSH
26540: LD_INT 0
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 1
26549: NEG
26550: PUSH
26551: LD_INT 1
26553: NEG
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26568: LD_ADDR_VAR 0 60
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: LD_INT 0
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 1
26596: PUSH
26597: LD_INT 0
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 1
26606: PUSH
26607: LD_INT 1
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: LD_INT 1
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: NEG
26627: PUSH
26628: LD_INT 0
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26656: LD_ADDR_VAR 0 61
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: LD_INT 0
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 0
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 1
26684: PUSH
26685: LD_INT 0
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 1
26694: PUSH
26695: LD_INT 1
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 0
26704: PUSH
26705: LD_INT 1
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 1
26714: NEG
26715: PUSH
26716: LD_INT 0
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 1
26725: NEG
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26744: LD_ADDR_VAR 0 62
26748: PUSH
26749: LD_INT 0
26751: PUSH
26752: LD_INT 0
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 0
26761: PUSH
26762: LD_INT 1
26764: NEG
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 1
26772: PUSH
26773: LD_INT 0
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 1
26782: PUSH
26783: LD_INT 1
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 0
26792: PUSH
26793: LD_INT 1
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 1
26802: NEG
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 1
26813: NEG
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26832: LD_ADDR_VAR 0 63
26836: PUSH
26837: LD_INT 0
26839: PUSH
26840: LD_INT 0
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: LD_INT 1
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: LD_INT 0
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: LD_INT 1
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 0
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 1
26890: NEG
26891: PUSH
26892: LD_INT 0
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 1
26901: NEG
26902: PUSH
26903: LD_INT 1
26905: NEG
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26920: LD_ADDR_VAR 0 64
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: LD_INT 0
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: LD_INT 1
26940: NEG
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 1
26948: PUSH
26949: LD_INT 0
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 1
26978: NEG
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: LD_INT 1
26993: NEG
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: ST_TO_ADDR
// end ; 1 :
27008: GO 32905
27010: LD_INT 1
27012: DOUBLE
27013: EQUAL
27014: IFTRUE 27018
27016: GO 29641
27018: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27019: LD_ADDR_VAR 0 11
27023: PUSH
27024: LD_INT 1
27026: NEG
27027: PUSH
27028: LD_INT 3
27030: NEG
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 0
27038: PUSH
27039: LD_INT 3
27041: NEG
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: LD_INT 2
27052: NEG
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: LIST
27062: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27063: LD_ADDR_VAR 0 12
27067: PUSH
27068: LD_INT 2
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 3
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 3
27091: PUSH
27092: LD_INT 1
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: LIST
27103: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27104: LD_ADDR_VAR 0 13
27108: PUSH
27109: LD_INT 3
27111: PUSH
27112: LD_INT 2
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 3
27121: PUSH
27122: LD_INT 3
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 2
27131: PUSH
27132: LD_INT 3
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: LIST
27143: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27144: LD_ADDR_VAR 0 14
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: LD_INT 3
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: LD_INT 3
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 1
27171: NEG
27172: PUSH
27173: LD_INT 2
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: LIST
27184: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27185: LD_ADDR_VAR 0 15
27189: PUSH
27190: LD_INT 2
27192: NEG
27193: PUSH
27194: LD_INT 1
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 3
27203: NEG
27204: PUSH
27205: LD_INT 0
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 3
27214: NEG
27215: PUSH
27216: LD_INT 1
27218: NEG
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: LIST
27228: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27229: LD_ADDR_VAR 0 16
27233: PUSH
27234: LD_INT 2
27236: NEG
27237: PUSH
27238: LD_INT 3
27240: NEG
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 3
27248: NEG
27249: PUSH
27250: LD_INT 2
27252: NEG
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 3
27260: NEG
27261: PUSH
27262: LD_INT 3
27264: NEG
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: LIST
27274: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27275: LD_ADDR_VAR 0 17
27279: PUSH
27280: LD_INT 1
27282: NEG
27283: PUSH
27284: LD_INT 3
27286: NEG
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: LD_INT 3
27297: NEG
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 1
27305: PUSH
27306: LD_INT 2
27308: NEG
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: LIST
27318: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27319: LD_ADDR_VAR 0 18
27323: PUSH
27324: LD_INT 2
27326: PUSH
27327: LD_INT 1
27329: NEG
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 3
27337: PUSH
27338: LD_INT 0
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 3
27347: PUSH
27348: LD_INT 1
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: LIST
27359: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27360: LD_ADDR_VAR 0 19
27364: PUSH
27365: LD_INT 3
27367: PUSH
27368: LD_INT 2
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 3
27377: PUSH
27378: LD_INT 3
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 2
27387: PUSH
27388: LD_INT 3
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: LIST
27399: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27400: LD_ADDR_VAR 0 20
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: LD_INT 3
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: LD_INT 3
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 1
27427: NEG
27428: PUSH
27429: LD_INT 2
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: LIST
27440: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27441: LD_ADDR_VAR 0 21
27445: PUSH
27446: LD_INT 2
27448: NEG
27449: PUSH
27450: LD_INT 1
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 3
27459: NEG
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 3
27470: NEG
27471: PUSH
27472: LD_INT 1
27474: NEG
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: LIST
27484: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27485: LD_ADDR_VAR 0 22
27489: PUSH
27490: LD_INT 2
27492: NEG
27493: PUSH
27494: LD_INT 3
27496: NEG
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 3
27504: NEG
27505: PUSH
27506: LD_INT 2
27508: NEG
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 3
27516: NEG
27517: PUSH
27518: LD_INT 3
27520: NEG
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: LIST
27530: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27531: LD_ADDR_VAR 0 23
27535: PUSH
27536: LD_INT 0
27538: PUSH
27539: LD_INT 3
27541: NEG
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 1
27549: NEG
27550: PUSH
27551: LD_INT 4
27553: NEG
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 1
27561: PUSH
27562: LD_INT 3
27564: NEG
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: LIST
27574: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27575: LD_ADDR_VAR 0 24
27579: PUSH
27580: LD_INT 3
27582: PUSH
27583: LD_INT 0
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 3
27592: PUSH
27593: LD_INT 1
27595: NEG
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 4
27603: PUSH
27604: LD_INT 1
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: LIST
27615: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27616: LD_ADDR_VAR 0 25
27620: PUSH
27621: LD_INT 3
27623: PUSH
27624: LD_INT 3
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 4
27633: PUSH
27634: LD_INT 3
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 3
27643: PUSH
27644: LD_INT 4
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: LIST
27655: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27656: LD_ADDR_VAR 0 26
27660: PUSH
27661: LD_INT 0
27663: PUSH
27664: LD_INT 3
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 1
27673: PUSH
27674: LD_INT 4
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: LD_INT 3
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: LIST
27696: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27697: LD_ADDR_VAR 0 27
27701: PUSH
27702: LD_INT 3
27704: NEG
27705: PUSH
27706: LD_INT 0
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 3
27715: NEG
27716: PUSH
27717: LD_INT 1
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 4
27726: NEG
27727: PUSH
27728: LD_INT 1
27730: NEG
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: LIST
27740: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27741: LD_ADDR_VAR 0 28
27745: PUSH
27746: LD_INT 3
27748: NEG
27749: PUSH
27750: LD_INT 3
27752: NEG
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 3
27760: NEG
27761: PUSH
27762: LD_INT 4
27764: NEG
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 4
27772: NEG
27773: PUSH
27774: LD_INT 3
27776: NEG
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: LIST
27786: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27787: LD_ADDR_VAR 0 29
27791: PUSH
27792: LD_INT 1
27794: NEG
27795: PUSH
27796: LD_INT 3
27798: NEG
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 0
27806: PUSH
27807: LD_INT 3
27809: NEG
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 1
27817: PUSH
27818: LD_INT 2
27820: NEG
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 1
27828: NEG
27829: PUSH
27830: LD_INT 4
27832: NEG
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 0
27840: PUSH
27841: LD_INT 4
27843: NEG
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 1
27851: PUSH
27852: LD_INT 3
27854: NEG
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 1
27862: NEG
27863: PUSH
27864: LD_INT 5
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 0
27874: PUSH
27875: LD_INT 5
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: PUSH
27886: LD_INT 4
27888: NEG
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 1
27896: NEG
27897: PUSH
27898: LD_INT 6
27900: NEG
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: LD_INT 6
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 1
27919: PUSH
27920: LD_INT 5
27922: NEG
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27942: LD_ADDR_VAR 0 30
27946: PUSH
27947: LD_INT 2
27949: PUSH
27950: LD_INT 1
27952: NEG
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 3
27960: PUSH
27961: LD_INT 0
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 3
27970: PUSH
27971: LD_INT 1
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 3
27980: PUSH
27981: LD_INT 1
27983: NEG
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 4
27991: PUSH
27992: LD_INT 0
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 4
28001: PUSH
28002: LD_INT 1
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 4
28011: PUSH
28012: LD_INT 1
28014: NEG
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 5
28022: PUSH
28023: LD_INT 0
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 5
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 5
28042: PUSH
28043: LD_INT 1
28045: NEG
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 6
28053: PUSH
28054: LD_INT 0
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 6
28063: PUSH
28064: LD_INT 1
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28085: LD_ADDR_VAR 0 31
28089: PUSH
28090: LD_INT 3
28092: PUSH
28093: LD_INT 2
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 3
28102: PUSH
28103: LD_INT 3
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 2
28112: PUSH
28113: LD_INT 3
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 4
28122: PUSH
28123: LD_INT 3
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 4
28132: PUSH
28133: LD_INT 4
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 3
28142: PUSH
28143: LD_INT 4
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 5
28152: PUSH
28153: LD_INT 4
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 5
28162: PUSH
28163: LD_INT 5
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 4
28172: PUSH
28173: LD_INT 5
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 6
28182: PUSH
28183: LD_INT 5
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 6
28192: PUSH
28193: LD_INT 6
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 5
28202: PUSH
28203: LD_INT 6
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28224: LD_ADDR_VAR 0 32
28228: PUSH
28229: LD_INT 1
28231: PUSH
28232: LD_INT 3
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 0
28241: PUSH
28242: LD_INT 3
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 1
28251: NEG
28252: PUSH
28253: LD_INT 2
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: LD_INT 4
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: LD_INT 4
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 1
28282: NEG
28283: PUSH
28284: LD_INT 3
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: LD_INT 5
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 0
28303: PUSH
28304: LD_INT 5
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 1
28313: NEG
28314: PUSH
28315: LD_INT 4
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 1
28324: PUSH
28325: LD_INT 6
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 0
28334: PUSH
28335: LD_INT 6
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 1
28344: NEG
28345: PUSH
28346: LD_INT 5
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28367: LD_ADDR_VAR 0 33
28371: PUSH
28372: LD_INT 2
28374: NEG
28375: PUSH
28376: LD_INT 1
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 3
28385: NEG
28386: PUSH
28387: LD_INT 0
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 3
28396: NEG
28397: PUSH
28398: LD_INT 1
28400: NEG
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 3
28408: NEG
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 4
28419: NEG
28420: PUSH
28421: LD_INT 0
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 4
28430: NEG
28431: PUSH
28432: LD_INT 1
28434: NEG
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 4
28442: NEG
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 5
28453: NEG
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 5
28464: NEG
28465: PUSH
28466: LD_INT 1
28468: NEG
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 5
28476: NEG
28477: PUSH
28478: LD_INT 1
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 6
28487: NEG
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 6
28498: NEG
28499: PUSH
28500: LD_INT 1
28502: NEG
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28522: LD_ADDR_VAR 0 34
28526: PUSH
28527: LD_INT 2
28529: NEG
28530: PUSH
28531: LD_INT 3
28533: NEG
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 3
28541: NEG
28542: PUSH
28543: LD_INT 2
28545: NEG
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 3
28553: NEG
28554: PUSH
28555: LD_INT 3
28557: NEG
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 3
28565: NEG
28566: PUSH
28567: LD_INT 4
28569: NEG
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 4
28577: NEG
28578: PUSH
28579: LD_INT 3
28581: NEG
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 4
28589: NEG
28590: PUSH
28591: LD_INT 4
28593: NEG
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 4
28601: NEG
28602: PUSH
28603: LD_INT 5
28605: NEG
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 5
28613: NEG
28614: PUSH
28615: LD_INT 4
28617: NEG
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 5
28625: NEG
28626: PUSH
28627: LD_INT 5
28629: NEG
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 5
28637: NEG
28638: PUSH
28639: LD_INT 6
28641: NEG
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 6
28649: NEG
28650: PUSH
28651: LD_INT 5
28653: NEG
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 6
28661: NEG
28662: PUSH
28663: LD_INT 6
28665: NEG
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28685: LD_ADDR_VAR 0 41
28689: PUSH
28690: LD_INT 0
28692: PUSH
28693: LD_INT 2
28695: NEG
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 1
28703: NEG
28704: PUSH
28705: LD_INT 3
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: LD_INT 2
28718: NEG
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: LIST
28728: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28729: LD_ADDR_VAR 0 42
28733: PUSH
28734: LD_INT 2
28736: PUSH
28737: LD_INT 0
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 2
28746: PUSH
28747: LD_INT 1
28749: NEG
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 3
28757: PUSH
28758: LD_INT 1
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: LIST
28769: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28770: LD_ADDR_VAR 0 43
28774: PUSH
28775: LD_INT 2
28777: PUSH
28778: LD_INT 2
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 3
28787: PUSH
28788: LD_INT 2
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 2
28797: PUSH
28798: LD_INT 3
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: LIST
28809: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28810: LD_ADDR_VAR 0 44
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: LD_INT 2
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: LD_INT 3
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 1
28837: NEG
28838: PUSH
28839: LD_INT 2
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: LIST
28850: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28851: LD_ADDR_VAR 0 45
28855: PUSH
28856: LD_INT 2
28858: NEG
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 2
28869: NEG
28870: PUSH
28871: LD_INT 1
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 3
28880: NEG
28881: PUSH
28882: LD_INT 1
28884: NEG
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: LIST
28894: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28895: LD_ADDR_VAR 0 46
28899: PUSH
28900: LD_INT 2
28902: NEG
28903: PUSH
28904: LD_INT 2
28906: NEG
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 2
28914: NEG
28915: PUSH
28916: LD_INT 3
28918: NEG
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 3
28926: NEG
28927: PUSH
28928: LD_INT 2
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: LIST
28940: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28941: LD_ADDR_VAR 0 47
28945: PUSH
28946: LD_INT 2
28948: NEG
28949: PUSH
28950: LD_INT 3
28952: NEG
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 1
28960: NEG
28961: PUSH
28962: LD_INT 3
28964: NEG
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28974: LD_ADDR_VAR 0 48
28978: PUSH
28979: LD_INT 1
28981: PUSH
28982: LD_INT 2
28984: NEG
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 2
28992: PUSH
28993: LD_INT 1
28995: NEG
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29005: LD_ADDR_VAR 0 49
29009: PUSH
29010: LD_INT 3
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 3
29022: PUSH
29023: LD_INT 2
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29034: LD_ADDR_VAR 0 50
29038: PUSH
29039: LD_INT 2
29041: PUSH
29042: LD_INT 3
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 1
29051: PUSH
29052: LD_INT 3
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29063: LD_ADDR_VAR 0 51
29067: PUSH
29068: LD_INT 1
29070: NEG
29071: PUSH
29072: LD_INT 2
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 2
29081: NEG
29082: PUSH
29083: LD_INT 1
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29094: LD_ADDR_VAR 0 52
29098: PUSH
29099: LD_INT 3
29101: NEG
29102: PUSH
29103: LD_INT 1
29105: NEG
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 3
29113: NEG
29114: PUSH
29115: LD_INT 2
29117: NEG
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29127: LD_ADDR_VAR 0 53
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: LD_INT 3
29138: NEG
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 0
29146: PUSH
29147: LD_INT 3
29149: NEG
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: LD_INT 2
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: LIST
29170: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29171: LD_ADDR_VAR 0 54
29175: PUSH
29176: LD_INT 2
29178: PUSH
29179: LD_INT 1
29181: NEG
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 3
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 3
29199: PUSH
29200: LD_INT 1
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: LIST
29211: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29212: LD_ADDR_VAR 0 55
29216: PUSH
29217: LD_INT 3
29219: PUSH
29220: LD_INT 2
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 3
29229: PUSH
29230: LD_INT 3
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 2
29239: PUSH
29240: LD_INT 3
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: LIST
29251: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29252: LD_ADDR_VAR 0 56
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: LD_INT 3
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 0
29269: PUSH
29270: LD_INT 3
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 1
29279: NEG
29280: PUSH
29281: LD_INT 2
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: LIST
29292: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29293: LD_ADDR_VAR 0 57
29297: PUSH
29298: LD_INT 2
29300: NEG
29301: PUSH
29302: LD_INT 1
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 3
29311: NEG
29312: PUSH
29313: LD_INT 0
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 3
29322: NEG
29323: PUSH
29324: LD_INT 1
29326: NEG
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: LIST
29336: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29337: LD_ADDR_VAR 0 58
29341: PUSH
29342: LD_INT 2
29344: NEG
29345: PUSH
29346: LD_INT 3
29348: NEG
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 3
29356: NEG
29357: PUSH
29358: LD_INT 2
29360: NEG
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 3
29368: NEG
29369: PUSH
29370: LD_INT 3
29372: NEG
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: LIST
29382: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29383: LD_ADDR_VAR 0 59
29387: PUSH
29388: LD_INT 1
29390: NEG
29391: PUSH
29392: LD_INT 2
29394: NEG
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 0
29402: PUSH
29403: LD_INT 2
29405: NEG
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 1
29413: PUSH
29414: LD_INT 1
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: LIST
29426: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29427: LD_ADDR_VAR 0 60
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: LD_INT 1
29437: NEG
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: LD_INT 0
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 2
29455: PUSH
29456: LD_INT 1
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: LIST
29467: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29468: LD_ADDR_VAR 0 61
29472: PUSH
29473: LD_INT 2
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 2
29485: PUSH
29486: LD_INT 2
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 1
29495: PUSH
29496: LD_INT 2
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: LIST
29507: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29508: LD_ADDR_VAR 0 62
29512: PUSH
29513: LD_INT 1
29515: PUSH
29516: LD_INT 2
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 0
29525: PUSH
29526: LD_INT 2
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 1
29535: NEG
29536: PUSH
29537: LD_INT 1
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: LIST
29548: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29549: LD_ADDR_VAR 0 63
29553: PUSH
29554: LD_INT 1
29556: NEG
29557: PUSH
29558: LD_INT 1
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 2
29567: NEG
29568: PUSH
29569: LD_INT 0
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 2
29578: NEG
29579: PUSH
29580: LD_INT 1
29582: NEG
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29593: LD_ADDR_VAR 0 64
29597: PUSH
29598: LD_INT 1
29600: NEG
29601: PUSH
29602: LD_INT 2
29604: NEG
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 2
29612: NEG
29613: PUSH
29614: LD_INT 1
29616: NEG
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 2
29624: NEG
29625: PUSH
29626: LD_INT 2
29628: NEG
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: LIST
29638: ST_TO_ADDR
// end ; 2 :
29639: GO 32905
29641: LD_INT 2
29643: DOUBLE
29644: EQUAL
29645: IFTRUE 29649
29647: GO 32904
29649: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29650: LD_ADDR_VAR 0 29
29654: PUSH
29655: LD_INT 4
29657: PUSH
29658: LD_INT 0
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 4
29667: PUSH
29668: LD_INT 1
29670: NEG
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 5
29678: PUSH
29679: LD_INT 0
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 5
29688: PUSH
29689: LD_INT 1
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 4
29698: PUSH
29699: LD_INT 1
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 3
29708: PUSH
29709: LD_INT 0
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 3
29718: PUSH
29719: LD_INT 1
29721: NEG
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 3
29729: PUSH
29730: LD_INT 2
29732: NEG
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 5
29740: PUSH
29741: LD_INT 2
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 3
29750: PUSH
29751: LD_INT 3
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 3
29760: PUSH
29761: LD_INT 2
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 4
29770: PUSH
29771: LD_INT 3
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 4
29780: PUSH
29781: LD_INT 4
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 3
29790: PUSH
29791: LD_INT 4
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 2
29800: PUSH
29801: LD_INT 3
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 2
29810: PUSH
29811: LD_INT 2
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 4
29820: PUSH
29821: LD_INT 2
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 2
29830: PUSH
29831: LD_INT 4
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 0
29840: PUSH
29841: LD_INT 4
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 0
29850: PUSH
29851: LD_INT 3
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: LD_INT 4
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 1
29870: PUSH
29871: LD_INT 5
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 0
29880: PUSH
29881: LD_INT 5
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 1
29890: NEG
29891: PUSH
29892: LD_INT 4
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 1
29901: NEG
29902: PUSH
29903: LD_INT 3
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 2
29912: PUSH
29913: LD_INT 5
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 2
29922: NEG
29923: PUSH
29924: LD_INT 3
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 3
29933: NEG
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 3
29944: NEG
29945: PUSH
29946: LD_INT 1
29948: NEG
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 2
29956: NEG
29957: PUSH
29958: LD_INT 0
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 2
29967: NEG
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 3
29978: NEG
29979: PUSH
29980: LD_INT 1
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 4
29989: NEG
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 4
30000: NEG
30001: PUSH
30002: LD_INT 1
30004: NEG
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 4
30012: NEG
30013: PUSH
30014: LD_INT 2
30016: NEG
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 2
30024: NEG
30025: PUSH
30026: LD_INT 2
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 4
30035: NEG
30036: PUSH
30037: LD_INT 4
30039: NEG
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 4
30047: NEG
30048: PUSH
30049: LD_INT 5
30051: NEG
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 3
30059: NEG
30060: PUSH
30061: LD_INT 4
30063: NEG
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 3
30071: NEG
30072: PUSH
30073: LD_INT 3
30075: NEG
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 4
30083: NEG
30084: PUSH
30085: LD_INT 3
30087: NEG
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 5
30095: NEG
30096: PUSH
30097: LD_INT 4
30099: NEG
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 5
30107: NEG
30108: PUSH
30109: LD_INT 5
30111: NEG
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 3
30119: NEG
30120: PUSH
30121: LD_INT 5
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 5
30131: NEG
30132: PUSH
30133: LD_INT 3
30135: NEG
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30188: LD_ADDR_VAR 0 30
30192: PUSH
30193: LD_INT 4
30195: PUSH
30196: LD_INT 4
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 4
30205: PUSH
30206: LD_INT 3
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 5
30215: PUSH
30216: LD_INT 4
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 5
30225: PUSH
30226: LD_INT 5
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 4
30235: PUSH
30236: LD_INT 5
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 3
30245: PUSH
30246: LD_INT 4
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 3
30255: PUSH
30256: LD_INT 3
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 5
30265: PUSH
30266: LD_INT 3
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 3
30275: PUSH
30276: LD_INT 5
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 0
30285: PUSH
30286: LD_INT 3
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 0
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: LD_INT 3
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 1
30315: PUSH
30316: LD_INT 4
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 0
30325: PUSH
30326: LD_INT 4
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 1
30335: NEG
30336: PUSH
30337: LD_INT 3
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 1
30346: NEG
30347: PUSH
30348: LD_INT 2
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: LD_INT 4
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 2
30367: NEG
30368: PUSH
30369: LD_INT 2
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 4
30378: NEG
30379: PUSH
30380: LD_INT 0
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 4
30389: NEG
30390: PUSH
30391: LD_INT 1
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 3
30401: NEG
30402: PUSH
30403: LD_INT 0
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 3
30412: NEG
30413: PUSH
30414: LD_INT 1
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 4
30423: NEG
30424: PUSH
30425: LD_INT 1
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 5
30434: NEG
30435: PUSH
30436: LD_INT 0
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 5
30445: NEG
30446: PUSH
30447: LD_INT 1
30449: NEG
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 5
30457: NEG
30458: PUSH
30459: LD_INT 2
30461: NEG
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 3
30469: NEG
30470: PUSH
30471: LD_INT 2
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 3
30480: NEG
30481: PUSH
30482: LD_INT 3
30484: NEG
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 3
30492: NEG
30493: PUSH
30494: LD_INT 4
30496: NEG
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 2
30504: NEG
30505: PUSH
30506: LD_INT 3
30508: NEG
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 2
30516: NEG
30517: PUSH
30518: LD_INT 2
30520: NEG
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 3
30528: NEG
30529: PUSH
30530: LD_INT 2
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 4
30540: NEG
30541: PUSH
30542: LD_INT 3
30544: NEG
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 4
30552: NEG
30553: PUSH
30554: LD_INT 4
30556: NEG
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 2
30564: NEG
30565: PUSH
30566: LD_INT 4
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 4
30576: NEG
30577: PUSH
30578: LD_INT 2
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 0
30588: PUSH
30589: LD_INT 4
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: LD_INT 5
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 1
30610: PUSH
30611: LD_INT 4
30613: NEG
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 1
30621: PUSH
30622: LD_INT 3
30624: NEG
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: LD_INT 3
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 1
30643: NEG
30644: PUSH
30645: LD_INT 4
30647: NEG
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 1
30655: NEG
30656: PUSH
30657: LD_INT 5
30659: NEG
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 2
30667: PUSH
30668: LD_INT 3
30670: NEG
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 2
30678: NEG
30679: PUSH
30680: LD_INT 5
30682: NEG
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30735: LD_ADDR_VAR 0 31
30739: PUSH
30740: LD_INT 0
30742: PUSH
30743: LD_INT 4
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 0
30752: PUSH
30753: LD_INT 3
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 1
30762: PUSH
30763: LD_INT 4
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 1
30772: PUSH
30773: LD_INT 5
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 0
30782: PUSH
30783: LD_INT 5
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 1
30792: NEG
30793: PUSH
30794: LD_INT 4
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 1
30803: NEG
30804: PUSH
30805: LD_INT 3
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 2
30814: PUSH
30815: LD_INT 5
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 2
30824: NEG
30825: PUSH
30826: LD_INT 3
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 3
30835: NEG
30836: PUSH
30837: LD_INT 0
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 3
30846: NEG
30847: PUSH
30848: LD_INT 1
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 2
30858: NEG
30859: PUSH
30860: LD_INT 0
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 2
30869: NEG
30870: PUSH
30871: LD_INT 1
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 3
30880: NEG
30881: PUSH
30882: LD_INT 1
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 4
30891: NEG
30892: PUSH
30893: LD_INT 0
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 4
30902: NEG
30903: PUSH
30904: LD_INT 1
30906: NEG
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 4
30914: NEG
30915: PUSH
30916: LD_INT 2
30918: NEG
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 2
30926: NEG
30927: PUSH
30928: LD_INT 2
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 4
30937: NEG
30938: PUSH
30939: LD_INT 4
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 4
30949: NEG
30950: PUSH
30951: LD_INT 5
30953: NEG
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 3
30961: NEG
30962: PUSH
30963: LD_INT 4
30965: NEG
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 3
30973: NEG
30974: PUSH
30975: LD_INT 3
30977: NEG
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 4
30985: NEG
30986: PUSH
30987: LD_INT 3
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 5
30997: NEG
30998: PUSH
30999: LD_INT 4
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 5
31009: NEG
31010: PUSH
31011: LD_INT 5
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 3
31021: NEG
31022: PUSH
31023: LD_INT 5
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 5
31033: NEG
31034: PUSH
31035: LD_INT 3
31037: NEG
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: LD_INT 3
31048: NEG
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 0
31056: PUSH
31057: LD_INT 4
31059: NEG
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 1
31067: PUSH
31068: LD_INT 3
31070: NEG
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: LD_INT 2
31081: NEG
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 0
31089: PUSH
31090: LD_INT 2
31092: NEG
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: PUSH
31102: LD_INT 3
31104: NEG
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 1
31112: NEG
31113: PUSH
31114: LD_INT 4
31116: NEG
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 2
31124: PUSH
31125: LD_INT 2
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 2
31135: NEG
31136: PUSH
31137: LD_INT 4
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 4
31147: PUSH
31148: LD_INT 0
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 4
31157: PUSH
31158: LD_INT 1
31160: NEG
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 5
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 5
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 4
31188: PUSH
31189: LD_INT 1
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 3
31198: PUSH
31199: LD_INT 0
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 3
31208: PUSH
31209: LD_INT 1
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 3
31219: PUSH
31220: LD_INT 2
31222: NEG
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 5
31230: PUSH
31231: LD_INT 2
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31285: LD_ADDR_VAR 0 32
31289: PUSH
31290: LD_INT 4
31292: NEG
31293: PUSH
31294: LD_INT 0
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 4
31303: NEG
31304: PUSH
31305: LD_INT 1
31307: NEG
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 3
31315: NEG
31316: PUSH
31317: LD_INT 0
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 3
31326: NEG
31327: PUSH
31328: LD_INT 1
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 4
31337: NEG
31338: PUSH
31339: LD_INT 1
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 5
31348: NEG
31349: PUSH
31350: LD_INT 0
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 5
31359: NEG
31360: PUSH
31361: LD_INT 1
31363: NEG
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 5
31371: NEG
31372: PUSH
31373: LD_INT 2
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 3
31383: NEG
31384: PUSH
31385: LD_INT 2
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 3
31394: NEG
31395: PUSH
31396: LD_INT 3
31398: NEG
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 3
31406: NEG
31407: PUSH
31408: LD_INT 4
31410: NEG
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 2
31418: NEG
31419: PUSH
31420: LD_INT 3
31422: NEG
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 2
31430: NEG
31431: PUSH
31432: LD_INT 2
31434: NEG
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 3
31442: NEG
31443: PUSH
31444: LD_INT 2
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 4
31454: NEG
31455: PUSH
31456: LD_INT 3
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 4
31466: NEG
31467: PUSH
31468: LD_INT 4
31470: NEG
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 2
31478: NEG
31479: PUSH
31480: LD_INT 4
31482: NEG
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 4
31490: NEG
31491: PUSH
31492: LD_INT 2
31494: NEG
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 0
31502: PUSH
31503: LD_INT 4
31505: NEG
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 0
31513: PUSH
31514: LD_INT 5
31516: NEG
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 1
31524: PUSH
31525: LD_INT 4
31527: NEG
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 1
31535: PUSH
31536: LD_INT 3
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 0
31546: PUSH
31547: LD_INT 3
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 1
31557: NEG
31558: PUSH
31559: LD_INT 4
31561: NEG
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 1
31569: NEG
31570: PUSH
31571: LD_INT 5
31573: NEG
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 2
31581: PUSH
31582: LD_INT 3
31584: NEG
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: LD_INT 5
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 3
31604: PUSH
31605: LD_INT 0
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 3
31614: PUSH
31615: LD_INT 1
31617: NEG
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 4
31625: PUSH
31626: LD_INT 0
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 4
31635: PUSH
31636: LD_INT 1
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 3
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 2
31655: PUSH
31656: LD_INT 0
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 2
31665: PUSH
31666: LD_INT 1
31668: NEG
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 2
31676: PUSH
31677: LD_INT 2
31679: NEG
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 4
31687: PUSH
31688: LD_INT 2
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 4
31697: PUSH
31698: LD_INT 4
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 4
31707: PUSH
31708: LD_INT 3
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 5
31717: PUSH
31718: LD_INT 4
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 5
31727: PUSH
31728: LD_INT 5
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 4
31737: PUSH
31738: LD_INT 5
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 3
31747: PUSH
31748: LD_INT 4
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 3
31757: PUSH
31758: LD_INT 3
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 5
31767: PUSH
31768: LD_INT 3
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 3
31777: PUSH
31778: LD_INT 5
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31832: LD_ADDR_VAR 0 33
31836: PUSH
31837: LD_INT 4
31839: NEG
31840: PUSH
31841: LD_INT 4
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 4
31851: NEG
31852: PUSH
31853: LD_INT 5
31855: NEG
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 3
31863: NEG
31864: PUSH
31865: LD_INT 4
31867: NEG
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 3
31875: NEG
31876: PUSH
31877: LD_INT 3
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 4
31887: NEG
31888: PUSH
31889: LD_INT 3
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 5
31899: NEG
31900: PUSH
31901: LD_INT 4
31903: NEG
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 5
31911: NEG
31912: PUSH
31913: LD_INT 5
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 3
31923: NEG
31924: PUSH
31925: LD_INT 5
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 5
31935: NEG
31936: PUSH
31937: LD_INT 3
31939: NEG
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 0
31947: PUSH
31948: LD_INT 3
31950: NEG
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: LD_INT 4
31961: NEG
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 1
31969: PUSH
31970: LD_INT 3
31972: NEG
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 1
31980: PUSH
31981: LD_INT 2
31983: NEG
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: LD_INT 2
31994: NEG
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: LD_INT 3
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 1
32014: NEG
32015: PUSH
32016: LD_INT 4
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 2
32026: PUSH
32027: LD_INT 2
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 2
32037: NEG
32038: PUSH
32039: LD_INT 4
32041: NEG
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 4
32049: PUSH
32050: LD_INT 0
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 4
32059: PUSH
32060: LD_INT 1
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 5
32070: PUSH
32071: LD_INT 0
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 5
32080: PUSH
32081: LD_INT 1
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 4
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 3
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 3
32110: PUSH
32111: LD_INT 1
32113: NEG
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 3
32121: PUSH
32122: LD_INT 2
32124: NEG
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 5
32132: PUSH
32133: LD_INT 2
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 3
32142: PUSH
32143: LD_INT 3
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 3
32152: PUSH
32153: LD_INT 2
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 4
32162: PUSH
32163: LD_INT 3
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 4
32172: PUSH
32173: LD_INT 4
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 3
32182: PUSH
32183: LD_INT 4
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 2
32192: PUSH
32193: LD_INT 3
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 2
32202: PUSH
32203: LD_INT 2
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 4
32212: PUSH
32213: LD_INT 2
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 2
32222: PUSH
32223: LD_INT 4
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 0
32232: PUSH
32233: LD_INT 4
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: LD_INT 3
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: LD_INT 4
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: LD_INT 5
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 0
32272: PUSH
32273: LD_INT 5
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 1
32282: NEG
32283: PUSH
32284: LD_INT 4
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 1
32293: NEG
32294: PUSH
32295: LD_INT 3
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: LD_INT 5
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 2
32314: NEG
32315: PUSH
32316: LD_INT 3
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32370: LD_ADDR_VAR 0 34
32374: PUSH
32375: LD_INT 0
32377: PUSH
32378: LD_INT 4
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: LD_INT 5
32391: NEG
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 1
32399: PUSH
32400: LD_INT 4
32402: NEG
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 1
32410: PUSH
32411: LD_INT 3
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: LD_INT 3
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: LD_INT 4
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 1
32444: NEG
32445: PUSH
32446: LD_INT 5
32448: NEG
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 2
32456: PUSH
32457: LD_INT 3
32459: NEG
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 2
32467: NEG
32468: PUSH
32469: LD_INT 5
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 3
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 3
32489: PUSH
32490: LD_INT 1
32492: NEG
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 4
32500: PUSH
32501: LD_INT 0
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 4
32510: PUSH
32511: LD_INT 1
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 3
32520: PUSH
32521: LD_INT 1
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 2
32530: PUSH
32531: LD_INT 0
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 2
32540: PUSH
32541: LD_INT 1
32543: NEG
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 2
32551: PUSH
32552: LD_INT 2
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 4
32562: PUSH
32563: LD_INT 2
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 4
32572: PUSH
32573: LD_INT 4
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 4
32582: PUSH
32583: LD_INT 3
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 5
32592: PUSH
32593: LD_INT 4
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 5
32602: PUSH
32603: LD_INT 5
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 4
32612: PUSH
32613: LD_INT 5
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 3
32622: PUSH
32623: LD_INT 4
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 3
32632: PUSH
32633: LD_INT 3
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 5
32642: PUSH
32643: LD_INT 3
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 3
32652: PUSH
32653: LD_INT 5
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: LD_INT 3
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 0
32672: PUSH
32673: LD_INT 2
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 1
32682: PUSH
32683: LD_INT 3
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 1
32692: PUSH
32693: LD_INT 4
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 0
32702: PUSH
32703: LD_INT 4
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: NEG
32713: PUSH
32714: LD_INT 3
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: LD_INT 2
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 2
32734: PUSH
32735: LD_INT 4
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 2
32744: NEG
32745: PUSH
32746: LD_INT 2
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 4
32755: NEG
32756: PUSH
32757: LD_INT 0
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 4
32766: NEG
32767: PUSH
32768: LD_INT 1
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 3
32778: NEG
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 3
32789: NEG
32790: PUSH
32791: LD_INT 1
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 4
32800: NEG
32801: PUSH
32802: LD_INT 1
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 5
32811: NEG
32812: PUSH
32813: LD_INT 0
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 5
32822: NEG
32823: PUSH
32824: LD_INT 1
32826: NEG
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 5
32834: NEG
32835: PUSH
32836: LD_INT 2
32838: NEG
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 3
32846: NEG
32847: PUSH
32848: LD_INT 2
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: ST_TO_ADDR
// end ; end ;
32902: GO 32905
32904: POP
// case btype of b_depot , b_warehouse :
32905: LD_VAR 0 1
32909: PUSH
32910: LD_INT 0
32912: DOUBLE
32913: EQUAL
32914: IFTRUE 32924
32916: LD_INT 1
32918: DOUBLE
32919: EQUAL
32920: IFTRUE 32924
32922: GO 33125
32924: POP
// case nation of nation_american :
32925: LD_VAR 0 5
32929: PUSH
32930: LD_INT 1
32932: DOUBLE
32933: EQUAL
32934: IFTRUE 32938
32936: GO 32994
32938: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32939: LD_ADDR_VAR 0 9
32943: PUSH
32944: LD_VAR 0 11
32948: PUSH
32949: LD_VAR 0 12
32953: PUSH
32954: LD_VAR 0 13
32958: PUSH
32959: LD_VAR 0 14
32963: PUSH
32964: LD_VAR 0 15
32968: PUSH
32969: LD_VAR 0 16
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: PUSH
32982: LD_VAR 0 4
32986: PUSH
32987: LD_INT 1
32989: PLUS
32990: ARRAY
32991: ST_TO_ADDR
32992: GO 33123
32994: LD_INT 2
32996: DOUBLE
32997: EQUAL
32998: IFTRUE 33002
33000: GO 33058
33002: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33003: LD_ADDR_VAR 0 9
33007: PUSH
33008: LD_VAR 0 17
33012: PUSH
33013: LD_VAR 0 18
33017: PUSH
33018: LD_VAR 0 19
33022: PUSH
33023: LD_VAR 0 20
33027: PUSH
33028: LD_VAR 0 21
33032: PUSH
33033: LD_VAR 0 22
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: PUSH
33046: LD_VAR 0 4
33050: PUSH
33051: LD_INT 1
33053: PLUS
33054: ARRAY
33055: ST_TO_ADDR
33056: GO 33123
33058: LD_INT 3
33060: DOUBLE
33061: EQUAL
33062: IFTRUE 33066
33064: GO 33122
33066: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33067: LD_ADDR_VAR 0 9
33071: PUSH
33072: LD_VAR 0 23
33076: PUSH
33077: LD_VAR 0 24
33081: PUSH
33082: LD_VAR 0 25
33086: PUSH
33087: LD_VAR 0 26
33091: PUSH
33092: LD_VAR 0 27
33096: PUSH
33097: LD_VAR 0 28
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: PUSH
33110: LD_VAR 0 4
33114: PUSH
33115: LD_INT 1
33117: PLUS
33118: ARRAY
33119: ST_TO_ADDR
33120: GO 33123
33122: POP
33123: GO 33678
33125: LD_INT 2
33127: DOUBLE
33128: EQUAL
33129: IFTRUE 33139
33131: LD_INT 3
33133: DOUBLE
33134: EQUAL
33135: IFTRUE 33139
33137: GO 33195
33139: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33140: LD_ADDR_VAR 0 9
33144: PUSH
33145: LD_VAR 0 29
33149: PUSH
33150: LD_VAR 0 30
33154: PUSH
33155: LD_VAR 0 31
33159: PUSH
33160: LD_VAR 0 32
33164: PUSH
33165: LD_VAR 0 33
33169: PUSH
33170: LD_VAR 0 34
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: PUSH
33183: LD_VAR 0 4
33187: PUSH
33188: LD_INT 1
33190: PLUS
33191: ARRAY
33192: ST_TO_ADDR
33193: GO 33678
33195: LD_INT 16
33197: DOUBLE
33198: EQUAL
33199: IFTRUE 33257
33201: LD_INT 17
33203: DOUBLE
33204: EQUAL
33205: IFTRUE 33257
33207: LD_INT 18
33209: DOUBLE
33210: EQUAL
33211: IFTRUE 33257
33213: LD_INT 19
33215: DOUBLE
33216: EQUAL
33217: IFTRUE 33257
33219: LD_INT 22
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33257
33225: LD_INT 20
33227: DOUBLE
33228: EQUAL
33229: IFTRUE 33257
33231: LD_INT 21
33233: DOUBLE
33234: EQUAL
33235: IFTRUE 33257
33237: LD_INT 23
33239: DOUBLE
33240: EQUAL
33241: IFTRUE 33257
33243: LD_INT 24
33245: DOUBLE
33246: EQUAL
33247: IFTRUE 33257
33249: LD_INT 25
33251: DOUBLE
33252: EQUAL
33253: IFTRUE 33257
33255: GO 33313
33257: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33258: LD_ADDR_VAR 0 9
33262: PUSH
33263: LD_VAR 0 35
33267: PUSH
33268: LD_VAR 0 36
33272: PUSH
33273: LD_VAR 0 37
33277: PUSH
33278: LD_VAR 0 38
33282: PUSH
33283: LD_VAR 0 39
33287: PUSH
33288: LD_VAR 0 40
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: PUSH
33301: LD_VAR 0 4
33305: PUSH
33306: LD_INT 1
33308: PLUS
33309: ARRAY
33310: ST_TO_ADDR
33311: GO 33678
33313: LD_INT 6
33315: DOUBLE
33316: EQUAL
33317: IFTRUE 33369
33319: LD_INT 7
33321: DOUBLE
33322: EQUAL
33323: IFTRUE 33369
33325: LD_INT 8
33327: DOUBLE
33328: EQUAL
33329: IFTRUE 33369
33331: LD_INT 13
33333: DOUBLE
33334: EQUAL
33335: IFTRUE 33369
33337: LD_INT 12
33339: DOUBLE
33340: EQUAL
33341: IFTRUE 33369
33343: LD_INT 15
33345: DOUBLE
33346: EQUAL
33347: IFTRUE 33369
33349: LD_INT 11
33351: DOUBLE
33352: EQUAL
33353: IFTRUE 33369
33355: LD_INT 14
33357: DOUBLE
33358: EQUAL
33359: IFTRUE 33369
33361: LD_INT 10
33363: DOUBLE
33364: EQUAL
33365: IFTRUE 33369
33367: GO 33425
33369: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33370: LD_ADDR_VAR 0 9
33374: PUSH
33375: LD_VAR 0 41
33379: PUSH
33380: LD_VAR 0 42
33384: PUSH
33385: LD_VAR 0 43
33389: PUSH
33390: LD_VAR 0 44
33394: PUSH
33395: LD_VAR 0 45
33399: PUSH
33400: LD_VAR 0 46
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: PUSH
33413: LD_VAR 0 4
33417: PUSH
33418: LD_INT 1
33420: PLUS
33421: ARRAY
33422: ST_TO_ADDR
33423: GO 33678
33425: LD_INT 36
33427: DOUBLE
33428: EQUAL
33429: IFTRUE 33433
33431: GO 33489
33433: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33434: LD_ADDR_VAR 0 9
33438: PUSH
33439: LD_VAR 0 47
33443: PUSH
33444: LD_VAR 0 48
33448: PUSH
33449: LD_VAR 0 49
33453: PUSH
33454: LD_VAR 0 50
33458: PUSH
33459: LD_VAR 0 51
33463: PUSH
33464: LD_VAR 0 52
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: PUSH
33477: LD_VAR 0 4
33481: PUSH
33482: LD_INT 1
33484: PLUS
33485: ARRAY
33486: ST_TO_ADDR
33487: GO 33678
33489: LD_INT 4
33491: DOUBLE
33492: EQUAL
33493: IFTRUE 33515
33495: LD_INT 5
33497: DOUBLE
33498: EQUAL
33499: IFTRUE 33515
33501: LD_INT 34
33503: DOUBLE
33504: EQUAL
33505: IFTRUE 33515
33507: LD_INT 37
33509: DOUBLE
33510: EQUAL
33511: IFTRUE 33515
33513: GO 33571
33515: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33516: LD_ADDR_VAR 0 9
33520: PUSH
33521: LD_VAR 0 53
33525: PUSH
33526: LD_VAR 0 54
33530: PUSH
33531: LD_VAR 0 55
33535: PUSH
33536: LD_VAR 0 56
33540: PUSH
33541: LD_VAR 0 57
33545: PUSH
33546: LD_VAR 0 58
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: PUSH
33559: LD_VAR 0 4
33563: PUSH
33564: LD_INT 1
33566: PLUS
33567: ARRAY
33568: ST_TO_ADDR
33569: GO 33678
33571: LD_INT 31
33573: DOUBLE
33574: EQUAL
33575: IFTRUE 33621
33577: LD_INT 32
33579: DOUBLE
33580: EQUAL
33581: IFTRUE 33621
33583: LD_INT 33
33585: DOUBLE
33586: EQUAL
33587: IFTRUE 33621
33589: LD_INT 27
33591: DOUBLE
33592: EQUAL
33593: IFTRUE 33621
33595: LD_INT 26
33597: DOUBLE
33598: EQUAL
33599: IFTRUE 33621
33601: LD_INT 28
33603: DOUBLE
33604: EQUAL
33605: IFTRUE 33621
33607: LD_INT 29
33609: DOUBLE
33610: EQUAL
33611: IFTRUE 33621
33613: LD_INT 30
33615: DOUBLE
33616: EQUAL
33617: IFTRUE 33621
33619: GO 33677
33621: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33622: LD_ADDR_VAR 0 9
33626: PUSH
33627: LD_VAR 0 59
33631: PUSH
33632: LD_VAR 0 60
33636: PUSH
33637: LD_VAR 0 61
33641: PUSH
33642: LD_VAR 0 62
33646: PUSH
33647: LD_VAR 0 63
33651: PUSH
33652: LD_VAR 0 64
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: PUSH
33665: LD_VAR 0 4
33669: PUSH
33670: LD_INT 1
33672: PLUS
33673: ARRAY
33674: ST_TO_ADDR
33675: GO 33678
33677: POP
// temp_list2 = [ ] ;
33678: LD_ADDR_VAR 0 10
33682: PUSH
33683: EMPTY
33684: ST_TO_ADDR
// for i in temp_list do
33685: LD_ADDR_VAR 0 8
33689: PUSH
33690: LD_VAR 0 9
33694: PUSH
33695: FOR_IN
33696: IFFALSE 33748
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33698: LD_ADDR_VAR 0 10
33702: PUSH
33703: LD_VAR 0 10
33707: PUSH
33708: LD_VAR 0 8
33712: PUSH
33713: LD_INT 1
33715: ARRAY
33716: PUSH
33717: LD_VAR 0 2
33721: PLUS
33722: PUSH
33723: LD_VAR 0 8
33727: PUSH
33728: LD_INT 2
33730: ARRAY
33731: PUSH
33732: LD_VAR 0 3
33736: PLUS
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: EMPTY
33743: LIST
33744: ADD
33745: ST_TO_ADDR
33746: GO 33695
33748: POP
33749: POP
// result = temp_list2 ;
33750: LD_ADDR_VAR 0 7
33754: PUSH
33755: LD_VAR 0 10
33759: ST_TO_ADDR
// end ;
33760: LD_VAR 0 7
33764: RET
// export function EnemyInRange ( unit , dist ) ; begin
33765: LD_INT 0
33767: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33768: LD_ADDR_VAR 0 3
33772: PUSH
33773: LD_VAR 0 1
33777: PPUSH
33778: CALL_OW 255
33782: PPUSH
33783: LD_VAR 0 1
33787: PPUSH
33788: CALL_OW 250
33792: PPUSH
33793: LD_VAR 0 1
33797: PPUSH
33798: CALL_OW 251
33802: PPUSH
33803: LD_VAR 0 2
33807: PPUSH
33808: CALL 7161 0 4
33812: PUSH
33813: LD_INT 4
33815: ARRAY
33816: ST_TO_ADDR
// end ;
33817: LD_VAR 0 3
33821: RET
// export function PlayerSeeMe ( unit ) ; begin
33822: LD_INT 0
33824: PPUSH
// result := See ( your_side , unit ) ;
33825: LD_ADDR_VAR 0 2
33829: PUSH
33830: LD_OWVAR 2
33834: PPUSH
33835: LD_VAR 0 1
33839: PPUSH
33840: CALL_OW 292
33844: ST_TO_ADDR
// end ;
33845: LD_VAR 0 2
33849: RET
// export function ReverseDir ( unit ) ; begin
33850: LD_INT 0
33852: PPUSH
// if not unit then
33853: LD_VAR 0 1
33857: NOT
33858: IFFALSE 33862
// exit ;
33860: GO 33885
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33862: LD_ADDR_VAR 0 2
33866: PUSH
33867: LD_VAR 0 1
33871: PPUSH
33872: CALL_OW 254
33876: PUSH
33877: LD_INT 3
33879: PLUS
33880: PUSH
33881: LD_INT 6
33883: MOD
33884: ST_TO_ADDR
// end ;
33885: LD_VAR 0 2
33889: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
33890: LD_INT 0
33892: PPUSH
33893: PPUSH
33894: PPUSH
33895: PPUSH
33896: PPUSH
// if not hexes then
33897: LD_VAR 0 2
33901: NOT
33902: IFFALSE 33906
// exit ;
33904: GO 34054
// dist := 9999 ;
33906: LD_ADDR_VAR 0 5
33910: PUSH
33911: LD_INT 9999
33913: ST_TO_ADDR
// for i = 1 to hexes do
33914: LD_ADDR_VAR 0 4
33918: PUSH
33919: DOUBLE
33920: LD_INT 1
33922: DEC
33923: ST_TO_ADDR
33924: LD_VAR 0 2
33928: PUSH
33929: FOR_TO
33930: IFFALSE 34042
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
33932: LD_VAR 0 1
33936: PPUSH
33937: LD_VAR 0 2
33941: PUSH
33942: LD_VAR 0 4
33946: ARRAY
33947: PUSH
33948: LD_INT 1
33950: ARRAY
33951: PPUSH
33952: LD_VAR 0 2
33956: PUSH
33957: LD_VAR 0 4
33961: ARRAY
33962: PUSH
33963: LD_INT 2
33965: ARRAY
33966: PPUSH
33967: CALL_OW 297
33971: PUSH
33972: LD_VAR 0 5
33976: LESS
33977: IFFALSE 34040
// begin hex := hexes [ i ] ;
33979: LD_ADDR_VAR 0 7
33983: PUSH
33984: LD_VAR 0 2
33988: PUSH
33989: LD_VAR 0 4
33993: ARRAY
33994: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33995: LD_ADDR_VAR 0 5
33999: PUSH
34000: LD_VAR 0 1
34004: PPUSH
34005: LD_VAR 0 2
34009: PUSH
34010: LD_VAR 0 4
34014: ARRAY
34015: PUSH
34016: LD_INT 1
34018: ARRAY
34019: PPUSH
34020: LD_VAR 0 2
34024: PUSH
34025: LD_VAR 0 4
34029: ARRAY
34030: PUSH
34031: LD_INT 2
34033: ARRAY
34034: PPUSH
34035: CALL_OW 297
34039: ST_TO_ADDR
// end ; end ;
34040: GO 33929
34042: POP
34043: POP
// result := hex ;
34044: LD_ADDR_VAR 0 3
34048: PUSH
34049: LD_VAR 0 7
34053: ST_TO_ADDR
// end ;
34054: LD_VAR 0 3
34058: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34059: LD_INT 0
34061: PPUSH
34062: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34063: LD_VAR 0 1
34067: NOT
34068: PUSH
34069: LD_VAR 0 1
34073: PUSH
34074: LD_INT 21
34076: PUSH
34077: LD_INT 2
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 23
34086: PUSH
34087: LD_INT 2
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PPUSH
34098: CALL_OW 69
34102: IN
34103: NOT
34104: OR
34105: IFFALSE 34109
// exit ;
34107: GO 34156
// for i = 1 to 3 do
34109: LD_ADDR_VAR 0 3
34113: PUSH
34114: DOUBLE
34115: LD_INT 1
34117: DEC
34118: ST_TO_ADDR
34119: LD_INT 3
34121: PUSH
34122: FOR_TO
34123: IFFALSE 34154
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34125: LD_VAR 0 1
34129: PPUSH
34130: CALL_OW 250
34134: PPUSH
34135: LD_VAR 0 1
34139: PPUSH
34140: CALL_OW 251
34144: PPUSH
34145: LD_INT 1
34147: PPUSH
34148: CALL_OW 453
34152: GO 34122
34154: POP
34155: POP
// end ;
34156: LD_VAR 0 2
34160: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34161: LD_INT 0
34163: PPUSH
34164: PPUSH
34165: PPUSH
34166: PPUSH
34167: PPUSH
34168: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34169: LD_VAR 0 1
34173: NOT
34174: PUSH
34175: LD_VAR 0 2
34179: NOT
34180: OR
34181: PUSH
34182: LD_VAR 0 1
34186: PPUSH
34187: CALL_OW 314
34191: OR
34192: IFFALSE 34196
// exit ;
34194: GO 34637
// x := GetX ( enemy_unit ) ;
34196: LD_ADDR_VAR 0 7
34200: PUSH
34201: LD_VAR 0 2
34205: PPUSH
34206: CALL_OW 250
34210: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34211: LD_ADDR_VAR 0 8
34215: PUSH
34216: LD_VAR 0 2
34220: PPUSH
34221: CALL_OW 251
34225: ST_TO_ADDR
// if not x or not y then
34226: LD_VAR 0 7
34230: NOT
34231: PUSH
34232: LD_VAR 0 8
34236: NOT
34237: OR
34238: IFFALSE 34242
// exit ;
34240: GO 34637
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34242: LD_ADDR_VAR 0 6
34246: PUSH
34247: LD_VAR 0 7
34251: PPUSH
34252: LD_INT 0
34254: PPUSH
34255: LD_INT 4
34257: PPUSH
34258: CALL_OW 272
34262: PUSH
34263: LD_VAR 0 8
34267: PPUSH
34268: LD_INT 0
34270: PPUSH
34271: LD_INT 4
34273: PPUSH
34274: CALL_OW 273
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_VAR 0 7
34287: PPUSH
34288: LD_INT 1
34290: PPUSH
34291: LD_INT 4
34293: PPUSH
34294: CALL_OW 272
34298: PUSH
34299: LD_VAR 0 8
34303: PPUSH
34304: LD_INT 1
34306: PPUSH
34307: LD_INT 4
34309: PPUSH
34310: CALL_OW 273
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_VAR 0 7
34323: PPUSH
34324: LD_INT 2
34326: PPUSH
34327: LD_INT 4
34329: PPUSH
34330: CALL_OW 272
34334: PUSH
34335: LD_VAR 0 8
34339: PPUSH
34340: LD_INT 2
34342: PPUSH
34343: LD_INT 4
34345: PPUSH
34346: CALL_OW 273
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_VAR 0 7
34359: PPUSH
34360: LD_INT 3
34362: PPUSH
34363: LD_INT 4
34365: PPUSH
34366: CALL_OW 272
34370: PUSH
34371: LD_VAR 0 8
34375: PPUSH
34376: LD_INT 3
34378: PPUSH
34379: LD_INT 4
34381: PPUSH
34382: CALL_OW 273
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_VAR 0 7
34395: PPUSH
34396: LD_INT 4
34398: PPUSH
34399: LD_INT 4
34401: PPUSH
34402: CALL_OW 272
34406: PUSH
34407: LD_VAR 0 8
34411: PPUSH
34412: LD_INT 4
34414: PPUSH
34415: LD_INT 4
34417: PPUSH
34418: CALL_OW 273
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_VAR 0 7
34431: PPUSH
34432: LD_INT 5
34434: PPUSH
34435: LD_INT 4
34437: PPUSH
34438: CALL_OW 272
34442: PUSH
34443: LD_VAR 0 8
34447: PPUSH
34448: LD_INT 5
34450: PPUSH
34451: LD_INT 4
34453: PPUSH
34454: CALL_OW 273
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: ST_TO_ADDR
// for i = tmp downto 1 do
34471: LD_ADDR_VAR 0 4
34475: PUSH
34476: DOUBLE
34477: LD_VAR 0 6
34481: INC
34482: ST_TO_ADDR
34483: LD_INT 1
34485: PUSH
34486: FOR_DOWNTO
34487: IFFALSE 34588
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34489: LD_VAR 0 6
34493: PUSH
34494: LD_VAR 0 4
34498: ARRAY
34499: PUSH
34500: LD_INT 1
34502: ARRAY
34503: PPUSH
34504: LD_VAR 0 6
34508: PUSH
34509: LD_VAR 0 4
34513: ARRAY
34514: PUSH
34515: LD_INT 2
34517: ARRAY
34518: PPUSH
34519: CALL_OW 488
34523: NOT
34524: PUSH
34525: LD_VAR 0 6
34529: PUSH
34530: LD_VAR 0 4
34534: ARRAY
34535: PUSH
34536: LD_INT 1
34538: ARRAY
34539: PPUSH
34540: LD_VAR 0 6
34544: PUSH
34545: LD_VAR 0 4
34549: ARRAY
34550: PUSH
34551: LD_INT 2
34553: ARRAY
34554: PPUSH
34555: CALL_OW 428
34559: PUSH
34560: LD_INT 0
34562: NONEQUAL
34563: OR
34564: IFFALSE 34586
// tmp := Delete ( tmp , i ) ;
34566: LD_ADDR_VAR 0 6
34570: PUSH
34571: LD_VAR 0 6
34575: PPUSH
34576: LD_VAR 0 4
34580: PPUSH
34581: CALL_OW 3
34585: ST_TO_ADDR
34586: GO 34486
34588: POP
34589: POP
// j := GetClosestHex ( unit , tmp ) ;
34590: LD_ADDR_VAR 0 5
34594: PUSH
34595: LD_VAR 0 1
34599: PPUSH
34600: LD_VAR 0 6
34604: PPUSH
34605: CALL 33890 0 2
34609: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34610: LD_VAR 0 1
34614: PPUSH
34615: LD_VAR 0 5
34619: PUSH
34620: LD_INT 1
34622: ARRAY
34623: PPUSH
34624: LD_VAR 0 5
34628: PUSH
34629: LD_INT 2
34631: ARRAY
34632: PPUSH
34633: CALL_OW 111
// end ;
34637: LD_VAR 0 3
34641: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34642: LD_INT 0
34644: PPUSH
34645: PPUSH
34646: PPUSH
// uc_side = 0 ;
34647: LD_ADDR_OWVAR 20
34651: PUSH
34652: LD_INT 0
34654: ST_TO_ADDR
// uc_nation = 0 ;
34655: LD_ADDR_OWVAR 21
34659: PUSH
34660: LD_INT 0
34662: ST_TO_ADDR
// InitHc_All ( ) ;
34663: CALL_OW 584
// InitVc ;
34667: CALL_OW 20
// if mastodonts then
34671: LD_VAR 0 6
34675: IFFALSE 34742
// for i = 1 to mastodonts do
34677: LD_ADDR_VAR 0 11
34681: PUSH
34682: DOUBLE
34683: LD_INT 1
34685: DEC
34686: ST_TO_ADDR
34687: LD_VAR 0 6
34691: PUSH
34692: FOR_TO
34693: IFFALSE 34740
// begin vc_chassis := 31 ;
34695: LD_ADDR_OWVAR 37
34699: PUSH
34700: LD_INT 31
34702: ST_TO_ADDR
// vc_control := control_rider ;
34703: LD_ADDR_OWVAR 38
34707: PUSH
34708: LD_INT 4
34710: ST_TO_ADDR
// animal := CreateVehicle ;
34711: LD_ADDR_VAR 0 12
34715: PUSH
34716: CALL_OW 45
34720: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34721: LD_VAR 0 12
34725: PPUSH
34726: LD_VAR 0 8
34730: PPUSH
34731: LD_INT 0
34733: PPUSH
34734: CALL 36930 0 3
// end ;
34738: GO 34692
34740: POP
34741: POP
// if horses then
34742: LD_VAR 0 5
34746: IFFALSE 34813
// for i = 1 to horses do
34748: LD_ADDR_VAR 0 11
34752: PUSH
34753: DOUBLE
34754: LD_INT 1
34756: DEC
34757: ST_TO_ADDR
34758: LD_VAR 0 5
34762: PUSH
34763: FOR_TO
34764: IFFALSE 34811
// begin hc_class := 21 ;
34766: LD_ADDR_OWVAR 28
34770: PUSH
34771: LD_INT 21
34773: ST_TO_ADDR
// hc_gallery :=  ;
34774: LD_ADDR_OWVAR 33
34778: PUSH
34779: LD_STRING 
34781: ST_TO_ADDR
// animal := CreateHuman ;
34782: LD_ADDR_VAR 0 12
34786: PUSH
34787: CALL_OW 44
34791: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34792: LD_VAR 0 12
34796: PPUSH
34797: LD_VAR 0 8
34801: PPUSH
34802: LD_INT 0
34804: PPUSH
34805: CALL 36930 0 3
// end ;
34809: GO 34763
34811: POP
34812: POP
// if birds then
34813: LD_VAR 0 1
34817: IFFALSE 34884
// for i = 1 to birds do
34819: LD_ADDR_VAR 0 11
34823: PUSH
34824: DOUBLE
34825: LD_INT 1
34827: DEC
34828: ST_TO_ADDR
34829: LD_VAR 0 1
34833: PUSH
34834: FOR_TO
34835: IFFALSE 34882
// begin hc_class = 18 ;
34837: LD_ADDR_OWVAR 28
34841: PUSH
34842: LD_INT 18
34844: ST_TO_ADDR
// hc_gallery =  ;
34845: LD_ADDR_OWVAR 33
34849: PUSH
34850: LD_STRING 
34852: ST_TO_ADDR
// animal := CreateHuman ;
34853: LD_ADDR_VAR 0 12
34857: PUSH
34858: CALL_OW 44
34862: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34863: LD_VAR 0 12
34867: PPUSH
34868: LD_VAR 0 8
34872: PPUSH
34873: LD_INT 0
34875: PPUSH
34876: CALL 36930 0 3
// end ;
34880: GO 34834
34882: POP
34883: POP
// if tigers then
34884: LD_VAR 0 2
34888: IFFALSE 34972
// for i = 1 to tigers do
34890: LD_ADDR_VAR 0 11
34894: PUSH
34895: DOUBLE
34896: LD_INT 1
34898: DEC
34899: ST_TO_ADDR
34900: LD_VAR 0 2
34904: PUSH
34905: FOR_TO
34906: IFFALSE 34970
// begin hc_class = class_tiger ;
34908: LD_ADDR_OWVAR 28
34912: PUSH
34913: LD_INT 14
34915: ST_TO_ADDR
// hc_gallery =  ;
34916: LD_ADDR_OWVAR 33
34920: PUSH
34921: LD_STRING 
34923: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34924: LD_ADDR_OWVAR 35
34928: PUSH
34929: LD_INT 7
34931: NEG
34932: PPUSH
34933: LD_INT 7
34935: PPUSH
34936: CALL_OW 12
34940: ST_TO_ADDR
// animal := CreateHuman ;
34941: LD_ADDR_VAR 0 12
34945: PUSH
34946: CALL_OW 44
34950: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34951: LD_VAR 0 12
34955: PPUSH
34956: LD_VAR 0 8
34960: PPUSH
34961: LD_INT 0
34963: PPUSH
34964: CALL 36930 0 3
// end ;
34968: GO 34905
34970: POP
34971: POP
// if apemans then
34972: LD_VAR 0 3
34976: IFFALSE 35099
// for i = 1 to apemans do
34978: LD_ADDR_VAR 0 11
34982: PUSH
34983: DOUBLE
34984: LD_INT 1
34986: DEC
34987: ST_TO_ADDR
34988: LD_VAR 0 3
34992: PUSH
34993: FOR_TO
34994: IFFALSE 35097
// begin hc_class = class_apeman ;
34996: LD_ADDR_OWVAR 28
35000: PUSH
35001: LD_INT 12
35003: ST_TO_ADDR
// hc_gallery =  ;
35004: LD_ADDR_OWVAR 33
35008: PUSH
35009: LD_STRING 
35011: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35012: LD_ADDR_OWVAR 35
35016: PUSH
35017: LD_INT 2
35019: NEG
35020: PPUSH
35021: LD_INT 2
35023: PPUSH
35024: CALL_OW 12
35028: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35029: LD_ADDR_OWVAR 31
35033: PUSH
35034: LD_INT 1
35036: PPUSH
35037: LD_INT 3
35039: PPUSH
35040: CALL_OW 12
35044: PUSH
35045: LD_INT 1
35047: PPUSH
35048: LD_INT 3
35050: PPUSH
35051: CALL_OW 12
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: ST_TO_ADDR
// animal := CreateHuman ;
35068: LD_ADDR_VAR 0 12
35072: PUSH
35073: CALL_OW 44
35077: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35078: LD_VAR 0 12
35082: PPUSH
35083: LD_VAR 0 8
35087: PPUSH
35088: LD_INT 0
35090: PPUSH
35091: CALL 36930 0 3
// end ;
35095: GO 34993
35097: POP
35098: POP
// if enchidnas then
35099: LD_VAR 0 4
35103: IFFALSE 35170
// for i = 1 to enchidnas do
35105: LD_ADDR_VAR 0 11
35109: PUSH
35110: DOUBLE
35111: LD_INT 1
35113: DEC
35114: ST_TO_ADDR
35115: LD_VAR 0 4
35119: PUSH
35120: FOR_TO
35121: IFFALSE 35168
// begin hc_class = 13 ;
35123: LD_ADDR_OWVAR 28
35127: PUSH
35128: LD_INT 13
35130: ST_TO_ADDR
// hc_gallery =  ;
35131: LD_ADDR_OWVAR 33
35135: PUSH
35136: LD_STRING 
35138: ST_TO_ADDR
// animal := CreateHuman ;
35139: LD_ADDR_VAR 0 12
35143: PUSH
35144: CALL_OW 44
35148: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35149: LD_VAR 0 12
35153: PPUSH
35154: LD_VAR 0 8
35158: PPUSH
35159: LD_INT 0
35161: PPUSH
35162: CALL 36930 0 3
// end ;
35166: GO 35120
35168: POP
35169: POP
// if fishes then
35170: LD_VAR 0 7
35174: IFFALSE 35241
// for i = 1 to fishes do
35176: LD_ADDR_VAR 0 11
35180: PUSH
35181: DOUBLE
35182: LD_INT 1
35184: DEC
35185: ST_TO_ADDR
35186: LD_VAR 0 7
35190: PUSH
35191: FOR_TO
35192: IFFALSE 35239
// begin hc_class = 20 ;
35194: LD_ADDR_OWVAR 28
35198: PUSH
35199: LD_INT 20
35201: ST_TO_ADDR
// hc_gallery =  ;
35202: LD_ADDR_OWVAR 33
35206: PUSH
35207: LD_STRING 
35209: ST_TO_ADDR
// animal := CreateHuman ;
35210: LD_ADDR_VAR 0 12
35214: PUSH
35215: CALL_OW 44
35219: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35220: LD_VAR 0 12
35224: PPUSH
35225: LD_VAR 0 9
35229: PPUSH
35230: LD_INT 0
35232: PPUSH
35233: CALL 36930 0 3
// end ;
35237: GO 35191
35239: POP
35240: POP
// end ;
35241: LD_VAR 0 10
35245: RET
// export function WantHeal ( sci , unit ) ; begin
35246: LD_INT 0
35248: PPUSH
// if GetTaskList ( sci ) > 0 then
35249: LD_VAR 0 1
35253: PPUSH
35254: CALL_OW 437
35258: PUSH
35259: LD_INT 0
35261: GREATER
35262: IFFALSE 35332
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35264: LD_VAR 0 1
35268: PPUSH
35269: CALL_OW 437
35273: PUSH
35274: LD_INT 1
35276: ARRAY
35277: PUSH
35278: LD_INT 1
35280: ARRAY
35281: PUSH
35282: LD_STRING l
35284: EQUAL
35285: PUSH
35286: LD_VAR 0 1
35290: PPUSH
35291: CALL_OW 437
35295: PUSH
35296: LD_INT 1
35298: ARRAY
35299: PUSH
35300: LD_INT 4
35302: ARRAY
35303: PUSH
35304: LD_VAR 0 2
35308: EQUAL
35309: AND
35310: IFFALSE 35322
// result := true else
35312: LD_ADDR_VAR 0 3
35316: PUSH
35317: LD_INT 1
35319: ST_TO_ADDR
35320: GO 35330
// result := false ;
35322: LD_ADDR_VAR 0 3
35326: PUSH
35327: LD_INT 0
35329: ST_TO_ADDR
// end else
35330: GO 35340
// result := false ;
35332: LD_ADDR_VAR 0 3
35336: PUSH
35337: LD_INT 0
35339: ST_TO_ADDR
// end ;
35340: LD_VAR 0 3
35344: RET
// export function HealTarget ( sci ) ; begin
35345: LD_INT 0
35347: PPUSH
// if not sci then
35348: LD_VAR 0 1
35352: NOT
35353: IFFALSE 35357
// exit ;
35355: GO 35422
// result := 0 ;
35357: LD_ADDR_VAR 0 2
35361: PUSH
35362: LD_INT 0
35364: ST_TO_ADDR
// if GetTaskList ( sci ) then
35365: LD_VAR 0 1
35369: PPUSH
35370: CALL_OW 437
35374: IFFALSE 35422
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35376: LD_VAR 0 1
35380: PPUSH
35381: CALL_OW 437
35385: PUSH
35386: LD_INT 1
35388: ARRAY
35389: PUSH
35390: LD_INT 1
35392: ARRAY
35393: PUSH
35394: LD_STRING l
35396: EQUAL
35397: IFFALSE 35422
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35399: LD_ADDR_VAR 0 2
35403: PUSH
35404: LD_VAR 0 1
35408: PPUSH
35409: CALL_OW 437
35413: PUSH
35414: LD_INT 1
35416: ARRAY
35417: PUSH
35418: LD_INT 4
35420: ARRAY
35421: ST_TO_ADDR
// end ;
35422: LD_VAR 0 2
35426: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35427: LD_INT 0
35429: PPUSH
35430: PPUSH
35431: PPUSH
35432: PPUSH
// if not base_units then
35433: LD_VAR 0 1
35437: NOT
35438: IFFALSE 35442
// exit ;
35440: GO 35529
// result := false ;
35442: LD_ADDR_VAR 0 2
35446: PUSH
35447: LD_INT 0
35449: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35450: LD_ADDR_VAR 0 5
35454: PUSH
35455: LD_VAR 0 1
35459: PPUSH
35460: LD_INT 21
35462: PUSH
35463: LD_INT 3
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PPUSH
35470: CALL_OW 72
35474: ST_TO_ADDR
// if not tmp then
35475: LD_VAR 0 5
35479: NOT
35480: IFFALSE 35484
// exit ;
35482: GO 35529
// for i in tmp do
35484: LD_ADDR_VAR 0 3
35488: PUSH
35489: LD_VAR 0 5
35493: PUSH
35494: FOR_IN
35495: IFFALSE 35527
// begin result := EnemyInRange ( i , 22 ) ;
35497: LD_ADDR_VAR 0 2
35501: PUSH
35502: LD_VAR 0 3
35506: PPUSH
35507: LD_INT 22
35509: PPUSH
35510: CALL 33765 0 2
35514: ST_TO_ADDR
// if result then
35515: LD_VAR 0 2
35519: IFFALSE 35525
// exit ;
35521: POP
35522: POP
35523: GO 35529
// end ;
35525: GO 35494
35527: POP
35528: POP
// end ;
35529: LD_VAR 0 2
35533: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
35534: LD_INT 0
35536: PPUSH
35537: PPUSH
// if not units then
35538: LD_VAR 0 1
35542: NOT
35543: IFFALSE 35547
// exit ;
35545: GO 35617
// result := [ ] ;
35547: LD_ADDR_VAR 0 3
35551: PUSH
35552: EMPTY
35553: ST_TO_ADDR
// for i in units do
35554: LD_ADDR_VAR 0 4
35558: PUSH
35559: LD_VAR 0 1
35563: PUSH
35564: FOR_IN
35565: IFFALSE 35615
// if GetTag ( i ) = tag then
35567: LD_VAR 0 4
35571: PPUSH
35572: CALL_OW 110
35576: PUSH
35577: LD_VAR 0 2
35581: EQUAL
35582: IFFALSE 35613
// result := Replace ( result , result + 1 , i ) ;
35584: LD_ADDR_VAR 0 3
35588: PUSH
35589: LD_VAR 0 3
35593: PPUSH
35594: LD_VAR 0 3
35598: PUSH
35599: LD_INT 1
35601: PLUS
35602: PPUSH
35603: LD_VAR 0 4
35607: PPUSH
35608: CALL_OW 1
35612: ST_TO_ADDR
35613: GO 35564
35615: POP
35616: POP
// end ;
35617: LD_VAR 0 3
35621: RET
// export function IsDriver ( un ) ; begin
35622: LD_INT 0
35624: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35625: LD_ADDR_VAR 0 2
35629: PUSH
35630: LD_VAR 0 1
35634: PUSH
35635: LD_INT 55
35637: PUSH
35638: EMPTY
35639: LIST
35640: PPUSH
35641: CALL_OW 69
35645: IN
35646: ST_TO_ADDR
// end ;
35647: LD_VAR 0 2
35651: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35652: LD_INT 0
35654: PPUSH
35655: PPUSH
// list := [ ] ;
35656: LD_ADDR_VAR 0 5
35660: PUSH
35661: EMPTY
35662: ST_TO_ADDR
// case d of 0 :
35663: LD_VAR 0 3
35667: PUSH
35668: LD_INT 0
35670: DOUBLE
35671: EQUAL
35672: IFTRUE 35676
35674: GO 35809
35676: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35677: LD_ADDR_VAR 0 5
35681: PUSH
35682: LD_VAR 0 1
35686: PUSH
35687: LD_INT 4
35689: MINUS
35690: PUSH
35691: LD_VAR 0 2
35695: PUSH
35696: LD_INT 4
35698: MINUS
35699: PUSH
35700: LD_INT 2
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: LIST
35707: PUSH
35708: LD_VAR 0 1
35712: PUSH
35713: LD_INT 3
35715: MINUS
35716: PUSH
35717: LD_VAR 0 2
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: LIST
35729: PUSH
35730: LD_VAR 0 1
35734: PUSH
35735: LD_INT 4
35737: PLUS
35738: PUSH
35739: LD_VAR 0 2
35743: PUSH
35744: LD_INT 4
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: LIST
35751: PUSH
35752: LD_VAR 0 1
35756: PUSH
35757: LD_INT 3
35759: PLUS
35760: PUSH
35761: LD_VAR 0 2
35765: PUSH
35766: LD_INT 3
35768: PLUS
35769: PUSH
35770: LD_INT 5
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: LIST
35777: PUSH
35778: LD_VAR 0 1
35782: PUSH
35783: LD_VAR 0 2
35787: PUSH
35788: LD_INT 4
35790: PLUS
35791: PUSH
35792: LD_INT 0
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: LIST
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: ST_TO_ADDR
// end ; 1 :
35807: GO 36507
35809: LD_INT 1
35811: DOUBLE
35812: EQUAL
35813: IFTRUE 35817
35815: GO 35950
35817: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35818: LD_ADDR_VAR 0 5
35822: PUSH
35823: LD_VAR 0 1
35827: PUSH
35828: LD_VAR 0 2
35832: PUSH
35833: LD_INT 4
35835: MINUS
35836: PUSH
35837: LD_INT 3
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: LIST
35844: PUSH
35845: LD_VAR 0 1
35849: PUSH
35850: LD_INT 3
35852: MINUS
35853: PUSH
35854: LD_VAR 0 2
35858: PUSH
35859: LD_INT 3
35861: MINUS
35862: PUSH
35863: LD_INT 2
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: LIST
35870: PUSH
35871: LD_VAR 0 1
35875: PUSH
35876: LD_INT 4
35878: MINUS
35879: PUSH
35880: LD_VAR 0 2
35884: PUSH
35885: LD_INT 1
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: LIST
35892: PUSH
35893: LD_VAR 0 1
35897: PUSH
35898: LD_VAR 0 2
35902: PUSH
35903: LD_INT 3
35905: PLUS
35906: PUSH
35907: LD_INT 0
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: LIST
35914: PUSH
35915: LD_VAR 0 1
35919: PUSH
35920: LD_INT 4
35922: PLUS
35923: PUSH
35924: LD_VAR 0 2
35928: PUSH
35929: LD_INT 4
35931: PLUS
35932: PUSH
35933: LD_INT 5
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: LIST
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: ST_TO_ADDR
// end ; 2 :
35948: GO 36507
35950: LD_INT 2
35952: DOUBLE
35953: EQUAL
35954: IFTRUE 35958
35956: GO 36087
35958: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35959: LD_ADDR_VAR 0 5
35963: PUSH
35964: LD_VAR 0 1
35968: PUSH
35969: LD_VAR 0 2
35973: PUSH
35974: LD_INT 3
35976: MINUS
35977: PUSH
35978: LD_INT 3
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: LIST
35985: PUSH
35986: LD_VAR 0 1
35990: PUSH
35991: LD_INT 4
35993: PLUS
35994: PUSH
35995: LD_VAR 0 2
35999: PUSH
36000: LD_INT 4
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: LIST
36007: PUSH
36008: LD_VAR 0 1
36012: PUSH
36013: LD_VAR 0 2
36017: PUSH
36018: LD_INT 4
36020: PLUS
36021: PUSH
36022: LD_INT 0
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: PUSH
36030: LD_VAR 0 1
36034: PUSH
36035: LD_INT 3
36037: MINUS
36038: PUSH
36039: LD_VAR 0 2
36043: PUSH
36044: LD_INT 1
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: LIST
36051: PUSH
36052: LD_VAR 0 1
36056: PUSH
36057: LD_INT 4
36059: MINUS
36060: PUSH
36061: LD_VAR 0 2
36065: PUSH
36066: LD_INT 4
36068: MINUS
36069: PUSH
36070: LD_INT 2
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: LIST
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: ST_TO_ADDR
// end ; 3 :
36085: GO 36507
36087: LD_INT 3
36089: DOUBLE
36090: EQUAL
36091: IFTRUE 36095
36093: GO 36228
36095: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36096: LD_ADDR_VAR 0 5
36100: PUSH
36101: LD_VAR 0 1
36105: PUSH
36106: LD_INT 3
36108: PLUS
36109: PUSH
36110: LD_VAR 0 2
36114: PUSH
36115: LD_INT 4
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: LIST
36122: PUSH
36123: LD_VAR 0 1
36127: PUSH
36128: LD_INT 4
36130: PLUS
36131: PUSH
36132: LD_VAR 0 2
36136: PUSH
36137: LD_INT 4
36139: PLUS
36140: PUSH
36141: LD_INT 5
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: LIST
36148: PUSH
36149: LD_VAR 0 1
36153: PUSH
36154: LD_INT 4
36156: MINUS
36157: PUSH
36158: LD_VAR 0 2
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: LIST
36170: PUSH
36171: LD_VAR 0 1
36175: PUSH
36176: LD_VAR 0 2
36180: PUSH
36181: LD_INT 4
36183: MINUS
36184: PUSH
36185: LD_INT 3
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: LIST
36192: PUSH
36193: LD_VAR 0 1
36197: PUSH
36198: LD_INT 3
36200: MINUS
36201: PUSH
36202: LD_VAR 0 2
36206: PUSH
36207: LD_INT 3
36209: MINUS
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: LIST
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: ST_TO_ADDR
// end ; 4 :
36226: GO 36507
36228: LD_INT 4
36230: DOUBLE
36231: EQUAL
36232: IFTRUE 36236
36234: GO 36369
36236: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36237: LD_ADDR_VAR 0 5
36241: PUSH
36242: LD_VAR 0 1
36246: PUSH
36247: LD_VAR 0 2
36251: PUSH
36252: LD_INT 4
36254: PLUS
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: LIST
36263: PUSH
36264: LD_VAR 0 1
36268: PUSH
36269: LD_INT 3
36271: PLUS
36272: PUSH
36273: LD_VAR 0 2
36277: PUSH
36278: LD_INT 3
36280: PLUS
36281: PUSH
36282: LD_INT 5
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: LIST
36289: PUSH
36290: LD_VAR 0 1
36294: PUSH
36295: LD_INT 4
36297: PLUS
36298: PUSH
36299: LD_VAR 0 2
36303: PUSH
36304: LD_INT 4
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: LIST
36311: PUSH
36312: LD_VAR 0 1
36316: PUSH
36317: LD_VAR 0 2
36321: PUSH
36322: LD_INT 3
36324: MINUS
36325: PUSH
36326: LD_INT 3
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: LIST
36333: PUSH
36334: LD_VAR 0 1
36338: PUSH
36339: LD_INT 4
36341: MINUS
36342: PUSH
36343: LD_VAR 0 2
36347: PUSH
36348: LD_INT 4
36350: MINUS
36351: PUSH
36352: LD_INT 2
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: LIST
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: ST_TO_ADDR
// end ; 5 :
36367: GO 36507
36369: LD_INT 5
36371: DOUBLE
36372: EQUAL
36373: IFTRUE 36377
36375: GO 36506
36377: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36378: LD_ADDR_VAR 0 5
36382: PUSH
36383: LD_VAR 0 1
36387: PUSH
36388: LD_INT 4
36390: MINUS
36391: PUSH
36392: LD_VAR 0 2
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: LIST
36404: PUSH
36405: LD_VAR 0 1
36409: PUSH
36410: LD_VAR 0 2
36414: PUSH
36415: LD_INT 4
36417: MINUS
36418: PUSH
36419: LD_INT 3
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: LIST
36426: PUSH
36427: LD_VAR 0 1
36431: PUSH
36432: LD_INT 4
36434: PLUS
36435: PUSH
36436: LD_VAR 0 2
36440: PUSH
36441: LD_INT 4
36443: PLUS
36444: PUSH
36445: LD_INT 5
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: LIST
36452: PUSH
36453: LD_VAR 0 1
36457: PUSH
36458: LD_INT 3
36460: PLUS
36461: PUSH
36462: LD_VAR 0 2
36466: PUSH
36467: LD_INT 4
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: LIST
36474: PUSH
36475: LD_VAR 0 1
36479: PUSH
36480: LD_VAR 0 2
36484: PUSH
36485: LD_INT 3
36487: PLUS
36488: PUSH
36489: LD_INT 0
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: ST_TO_ADDR
// end ; end ;
36504: GO 36507
36506: POP
// result := list ;
36507: LD_ADDR_VAR 0 4
36511: PUSH
36512: LD_VAR 0 5
36516: ST_TO_ADDR
// end ;
36517: LD_VAR 0 4
36521: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36522: LD_INT 0
36524: PPUSH
36525: PPUSH
36526: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36527: LD_VAR 0 1
36531: NOT
36532: PUSH
36533: LD_VAR 0 2
36537: PUSH
36538: LD_INT 1
36540: PUSH
36541: LD_INT 2
36543: PUSH
36544: LD_INT 3
36546: PUSH
36547: LD_INT 4
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: IN
36556: NOT
36557: OR
36558: IFFALSE 36562
// exit ;
36560: GO 36654
// tmp := [ ] ;
36562: LD_ADDR_VAR 0 5
36566: PUSH
36567: EMPTY
36568: ST_TO_ADDR
// for i in units do
36569: LD_ADDR_VAR 0 4
36573: PUSH
36574: LD_VAR 0 1
36578: PUSH
36579: FOR_IN
36580: IFFALSE 36623
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
36582: LD_ADDR_VAR 0 5
36586: PUSH
36587: LD_VAR 0 5
36591: PPUSH
36592: LD_VAR 0 5
36596: PUSH
36597: LD_INT 1
36599: PLUS
36600: PPUSH
36601: LD_VAR 0 4
36605: PPUSH
36606: LD_VAR 0 2
36610: PPUSH
36611: CALL_OW 259
36615: PPUSH
36616: CALL_OW 2
36620: ST_TO_ADDR
36621: GO 36579
36623: POP
36624: POP
// if not tmp then
36625: LD_VAR 0 5
36629: NOT
36630: IFFALSE 36634
// exit ;
36632: GO 36654
// result := SortListByListDesc ( units , tmp ) ;
36634: LD_ADDR_VAR 0 3
36638: PUSH
36639: LD_VAR 0 1
36643: PPUSH
36644: LD_VAR 0 5
36648: PPUSH
36649: CALL_OW 77
36653: ST_TO_ADDR
// end ;
36654: LD_VAR 0 3
36658: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36659: LD_INT 0
36661: PPUSH
36662: PPUSH
36663: PPUSH
// result := false ;
36664: LD_ADDR_VAR 0 3
36668: PUSH
36669: LD_INT 0
36671: ST_TO_ADDR
// x := GetX ( building ) ;
36672: LD_ADDR_VAR 0 4
36676: PUSH
36677: LD_VAR 0 2
36681: PPUSH
36682: CALL_OW 250
36686: ST_TO_ADDR
// y := GetY ( building ) ;
36687: LD_ADDR_VAR 0 5
36691: PUSH
36692: LD_VAR 0 2
36696: PPUSH
36697: CALL_OW 251
36701: ST_TO_ADDR
// if not building or not x or not y then
36702: LD_VAR 0 2
36706: NOT
36707: PUSH
36708: LD_VAR 0 4
36712: NOT
36713: OR
36714: PUSH
36715: LD_VAR 0 5
36719: NOT
36720: OR
36721: IFFALSE 36725
// exit ;
36723: GO 36817
// if GetTaskList ( unit ) then
36725: LD_VAR 0 1
36729: PPUSH
36730: CALL_OW 437
36734: IFFALSE 36817
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36736: LD_STRING e
36738: PUSH
36739: LD_VAR 0 1
36743: PPUSH
36744: CALL_OW 437
36748: PUSH
36749: LD_INT 1
36751: ARRAY
36752: PUSH
36753: LD_INT 1
36755: ARRAY
36756: EQUAL
36757: PUSH
36758: LD_VAR 0 4
36762: PUSH
36763: LD_VAR 0 1
36767: PPUSH
36768: CALL_OW 437
36772: PUSH
36773: LD_INT 1
36775: ARRAY
36776: PUSH
36777: LD_INT 2
36779: ARRAY
36780: EQUAL
36781: AND
36782: PUSH
36783: LD_VAR 0 5
36787: PUSH
36788: LD_VAR 0 1
36792: PPUSH
36793: CALL_OW 437
36797: PUSH
36798: LD_INT 1
36800: ARRAY
36801: PUSH
36802: LD_INT 3
36804: ARRAY
36805: EQUAL
36806: AND
36807: IFFALSE 36817
// result := true end ;
36809: LD_ADDR_VAR 0 3
36813: PUSH
36814: LD_INT 1
36816: ST_TO_ADDR
// end ;
36817: LD_VAR 0 3
36821: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36822: LD_INT 0
36824: PPUSH
// result := false ;
36825: LD_ADDR_VAR 0 4
36829: PUSH
36830: LD_INT 0
36832: ST_TO_ADDR
// if GetTaskList ( unit ) then
36833: LD_VAR 0 1
36837: PPUSH
36838: CALL_OW 437
36842: IFFALSE 36925
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36844: LD_STRING M
36846: PUSH
36847: LD_VAR 0 1
36851: PPUSH
36852: CALL_OW 437
36856: PUSH
36857: LD_INT 1
36859: ARRAY
36860: PUSH
36861: LD_INT 1
36863: ARRAY
36864: EQUAL
36865: PUSH
36866: LD_VAR 0 2
36870: PUSH
36871: LD_VAR 0 1
36875: PPUSH
36876: CALL_OW 437
36880: PUSH
36881: LD_INT 1
36883: ARRAY
36884: PUSH
36885: LD_INT 2
36887: ARRAY
36888: EQUAL
36889: AND
36890: PUSH
36891: LD_VAR 0 3
36895: PUSH
36896: LD_VAR 0 1
36900: PPUSH
36901: CALL_OW 437
36905: PUSH
36906: LD_INT 1
36908: ARRAY
36909: PUSH
36910: LD_INT 3
36912: ARRAY
36913: EQUAL
36914: AND
36915: IFFALSE 36925
// result := true ;
36917: LD_ADDR_VAR 0 4
36921: PUSH
36922: LD_INT 1
36924: ST_TO_ADDR
// end ; end ;
36925: LD_VAR 0 4
36929: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36930: LD_INT 0
36932: PPUSH
36933: PPUSH
36934: PPUSH
36935: PPUSH
// if not unit or not area then
36936: LD_VAR 0 1
36940: NOT
36941: PUSH
36942: LD_VAR 0 2
36946: NOT
36947: OR
36948: IFFALSE 36952
// exit ;
36950: GO 37116
// tmp := AreaToList ( area , i ) ;
36952: LD_ADDR_VAR 0 6
36956: PUSH
36957: LD_VAR 0 2
36961: PPUSH
36962: LD_VAR 0 5
36966: PPUSH
36967: CALL_OW 517
36971: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36972: LD_ADDR_VAR 0 5
36976: PUSH
36977: DOUBLE
36978: LD_INT 1
36980: DEC
36981: ST_TO_ADDR
36982: LD_VAR 0 6
36986: PUSH
36987: LD_INT 1
36989: ARRAY
36990: PUSH
36991: FOR_TO
36992: IFFALSE 37114
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36994: LD_ADDR_VAR 0 7
36998: PUSH
36999: LD_VAR 0 6
37003: PUSH
37004: LD_INT 1
37006: ARRAY
37007: PUSH
37008: LD_VAR 0 5
37012: ARRAY
37013: PUSH
37014: LD_VAR 0 6
37018: PUSH
37019: LD_INT 2
37021: ARRAY
37022: PUSH
37023: LD_VAR 0 5
37027: ARRAY
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
37033: LD_VAR 0 7
37037: PUSH
37038: LD_INT 1
37040: ARRAY
37041: PPUSH
37042: LD_VAR 0 7
37046: PUSH
37047: LD_INT 2
37049: ARRAY
37050: PPUSH
37051: CALL_OW 428
37055: PUSH
37056: LD_INT 0
37058: EQUAL
37059: IFFALSE 37112
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37061: LD_VAR 0 1
37065: PPUSH
37066: LD_VAR 0 7
37070: PUSH
37071: LD_INT 1
37073: ARRAY
37074: PPUSH
37075: LD_VAR 0 7
37079: PUSH
37080: LD_INT 2
37082: ARRAY
37083: PPUSH
37084: LD_VAR 0 3
37088: PPUSH
37089: CALL_OW 48
// result := IsPlaced ( unit ) ;
37093: LD_ADDR_VAR 0 4
37097: PUSH
37098: LD_VAR 0 1
37102: PPUSH
37103: CALL_OW 305
37107: ST_TO_ADDR
// exit ;
37108: POP
37109: POP
37110: GO 37116
// end ; end ;
37112: GO 36991
37114: POP
37115: POP
// end ;
37116: LD_VAR 0 4
37120: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37121: LD_INT 0
37123: PPUSH
37124: PPUSH
37125: PPUSH
// if not side or side > 8 then
37126: LD_VAR 0 1
37130: NOT
37131: PUSH
37132: LD_VAR 0 1
37136: PUSH
37137: LD_INT 8
37139: GREATER
37140: OR
37141: IFFALSE 37145
// exit ;
37143: GO 37332
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37145: LD_ADDR_VAR 0 4
37149: PUSH
37150: LD_INT 22
37152: PUSH
37153: LD_VAR 0 1
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 21
37164: PUSH
37165: LD_INT 3
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PPUSH
37176: CALL_OW 69
37180: ST_TO_ADDR
// if not tmp then
37181: LD_VAR 0 4
37185: NOT
37186: IFFALSE 37190
// exit ;
37188: GO 37332
// enable_addtolog := true ;
37190: LD_ADDR_OWVAR 81
37194: PUSH
37195: LD_INT 1
37197: ST_TO_ADDR
// AddToLog ( [ ) ;
37198: LD_STRING [
37200: PPUSH
37201: CALL_OW 561
// for i in tmp do
37205: LD_ADDR_VAR 0 3
37209: PUSH
37210: LD_VAR 0 4
37214: PUSH
37215: FOR_IN
37216: IFFALSE 37323
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37218: LD_STRING [
37220: PUSH
37221: LD_VAR 0 3
37225: PPUSH
37226: CALL_OW 266
37230: STR
37231: PUSH
37232: LD_STRING , 
37234: STR
37235: PUSH
37236: LD_VAR 0 3
37240: PPUSH
37241: CALL_OW 250
37245: STR
37246: PUSH
37247: LD_STRING , 
37249: STR
37250: PUSH
37251: LD_VAR 0 3
37255: PPUSH
37256: CALL_OW 251
37260: STR
37261: PUSH
37262: LD_STRING , 
37264: STR
37265: PUSH
37266: LD_VAR 0 3
37270: PPUSH
37271: CALL_OW 254
37275: STR
37276: PUSH
37277: LD_STRING , 
37279: STR
37280: PUSH
37281: LD_VAR 0 3
37285: PPUSH
37286: LD_INT 1
37288: PPUSH
37289: CALL_OW 268
37293: STR
37294: PUSH
37295: LD_STRING , 
37297: STR
37298: PUSH
37299: LD_VAR 0 3
37303: PPUSH
37304: LD_INT 2
37306: PPUSH
37307: CALL_OW 268
37311: STR
37312: PUSH
37313: LD_STRING ],
37315: STR
37316: PPUSH
37317: CALL_OW 561
// end ;
37321: GO 37215
37323: POP
37324: POP
// AddToLog ( ]; ) ;
37325: LD_STRING ];
37327: PPUSH
37328: CALL_OW 561
// end ;
37332: LD_VAR 0 2
37336: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37337: LD_INT 0
37339: PPUSH
37340: PPUSH
37341: PPUSH
37342: PPUSH
37343: PPUSH
// if not area or not rate or not max then
37344: LD_VAR 0 1
37348: NOT
37349: PUSH
37350: LD_VAR 0 2
37354: NOT
37355: OR
37356: PUSH
37357: LD_VAR 0 4
37361: NOT
37362: OR
37363: IFFALSE 37367
// exit ;
37365: GO 37559
// while 1 do
37367: LD_INT 1
37369: IFFALSE 37559
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37371: LD_ADDR_VAR 0 9
37375: PUSH
37376: LD_VAR 0 1
37380: PPUSH
37381: LD_INT 1
37383: PPUSH
37384: CALL_OW 287
37388: PUSH
37389: LD_INT 10
37391: MUL
37392: ST_TO_ADDR
// r := rate / 10 ;
37393: LD_ADDR_VAR 0 7
37397: PUSH
37398: LD_VAR 0 2
37402: PUSH
37403: LD_INT 10
37405: DIVREAL
37406: ST_TO_ADDR
// time := 1 1$00 ;
37407: LD_ADDR_VAR 0 8
37411: PUSH
37412: LD_INT 2100
37414: ST_TO_ADDR
// if amount < min then
37415: LD_VAR 0 9
37419: PUSH
37420: LD_VAR 0 3
37424: LESS
37425: IFFALSE 37443
// r := r * 2 else
37427: LD_ADDR_VAR 0 7
37431: PUSH
37432: LD_VAR 0 7
37436: PUSH
37437: LD_INT 2
37439: MUL
37440: ST_TO_ADDR
37441: GO 37469
// if amount > max then
37443: LD_VAR 0 9
37447: PUSH
37448: LD_VAR 0 4
37452: GREATER
37453: IFFALSE 37469
// r := r / 2 ;
37455: LD_ADDR_VAR 0 7
37459: PUSH
37460: LD_VAR 0 7
37464: PUSH
37465: LD_INT 2
37467: DIVREAL
37468: ST_TO_ADDR
// time := time / r ;
37469: LD_ADDR_VAR 0 8
37473: PUSH
37474: LD_VAR 0 8
37478: PUSH
37479: LD_VAR 0 7
37483: DIVREAL
37484: ST_TO_ADDR
// if time < 0 then
37485: LD_VAR 0 8
37489: PUSH
37490: LD_INT 0
37492: LESS
37493: IFFALSE 37510
// time := time * - 1 ;
37495: LD_ADDR_VAR 0 8
37499: PUSH
37500: LD_VAR 0 8
37504: PUSH
37505: LD_INT 1
37507: NEG
37508: MUL
37509: ST_TO_ADDR
// wait ( time ) ;
37510: LD_VAR 0 8
37514: PPUSH
37515: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
37519: LD_INT 35
37521: PPUSH
37522: LD_INT 875
37524: PPUSH
37525: CALL_OW 12
37529: PPUSH
37530: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37534: LD_INT 1
37536: PPUSH
37537: LD_INT 5
37539: PPUSH
37540: CALL_OW 12
37544: PPUSH
37545: LD_VAR 0 1
37549: PPUSH
37550: LD_INT 1
37552: PPUSH
37553: CALL_OW 55
// end ;
37557: GO 37367
// end ;
37559: LD_VAR 0 5
37563: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37564: LD_INT 0
37566: PPUSH
37567: PPUSH
37568: PPUSH
37569: PPUSH
37570: PPUSH
37571: PPUSH
37572: PPUSH
37573: PPUSH
// if not turrets or not factories then
37574: LD_VAR 0 1
37578: NOT
37579: PUSH
37580: LD_VAR 0 2
37584: NOT
37585: OR
37586: IFFALSE 37590
// exit ;
37588: GO 37897
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37590: LD_ADDR_VAR 0 10
37594: PUSH
37595: LD_INT 5
37597: PUSH
37598: LD_INT 6
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: LD_INT 4
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 3
37617: PUSH
37618: LD_INT 5
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 24
37632: PUSH
37633: LD_INT 25
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 23
37642: PUSH
37643: LD_INT 27
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 42
37656: PUSH
37657: LD_INT 43
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 44
37666: PUSH
37667: LD_INT 46
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 45
37676: PUSH
37677: LD_INT 47
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: LIST
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: LIST
37693: ST_TO_ADDR
// result := [ ] ;
37694: LD_ADDR_VAR 0 3
37698: PUSH
37699: EMPTY
37700: ST_TO_ADDR
// for i in turrets do
37701: LD_ADDR_VAR 0 4
37705: PUSH
37706: LD_VAR 0 1
37710: PUSH
37711: FOR_IN
37712: IFFALSE 37895
// begin nat := GetNation ( i ) ;
37714: LD_ADDR_VAR 0 7
37718: PUSH
37719: LD_VAR 0 4
37723: PPUSH
37724: CALL_OW 248
37728: ST_TO_ADDR
// weapon := 0 ;
37729: LD_ADDR_VAR 0 8
37733: PUSH
37734: LD_INT 0
37736: ST_TO_ADDR
// if not nat then
37737: LD_VAR 0 7
37741: NOT
37742: IFFALSE 37746
// continue ;
37744: GO 37711
// for j in list [ nat ] do
37746: LD_ADDR_VAR 0 5
37750: PUSH
37751: LD_VAR 0 10
37755: PUSH
37756: LD_VAR 0 7
37760: ARRAY
37761: PUSH
37762: FOR_IN
37763: IFFALSE 37804
// if GetBWeapon ( i ) = j [ 1 ] then
37765: LD_VAR 0 4
37769: PPUSH
37770: CALL_OW 269
37774: PUSH
37775: LD_VAR 0 5
37779: PUSH
37780: LD_INT 1
37782: ARRAY
37783: EQUAL
37784: IFFALSE 37802
// begin weapon := j [ 2 ] ;
37786: LD_ADDR_VAR 0 8
37790: PUSH
37791: LD_VAR 0 5
37795: PUSH
37796: LD_INT 2
37798: ARRAY
37799: ST_TO_ADDR
// break ;
37800: GO 37804
// end ;
37802: GO 37762
37804: POP
37805: POP
// if not weapon then
37806: LD_VAR 0 8
37810: NOT
37811: IFFALSE 37815
// continue ;
37813: GO 37711
// for k in factories do
37815: LD_ADDR_VAR 0 6
37819: PUSH
37820: LD_VAR 0 2
37824: PUSH
37825: FOR_IN
37826: IFFALSE 37891
// begin weapons := AvailableWeaponList ( k ) ;
37828: LD_ADDR_VAR 0 9
37832: PUSH
37833: LD_VAR 0 6
37837: PPUSH
37838: CALL_OW 478
37842: ST_TO_ADDR
// if not weapons then
37843: LD_VAR 0 9
37847: NOT
37848: IFFALSE 37852
// continue ;
37850: GO 37825
// if weapon in weapons then
37852: LD_VAR 0 8
37856: PUSH
37857: LD_VAR 0 9
37861: IN
37862: IFFALSE 37889
// begin result := [ i , weapon ] ;
37864: LD_ADDR_VAR 0 3
37868: PUSH
37869: LD_VAR 0 4
37873: PUSH
37874: LD_VAR 0 8
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: ST_TO_ADDR
// exit ;
37883: POP
37884: POP
37885: POP
37886: POP
37887: GO 37897
// end ; end ;
37889: GO 37825
37891: POP
37892: POP
// end ;
37893: GO 37711
37895: POP
37896: POP
// end ;
37897: LD_VAR 0 3
37901: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37902: LD_INT 0
37904: PPUSH
// if not side or side > 8 then
37905: LD_VAR 0 3
37909: NOT
37910: PUSH
37911: LD_VAR 0 3
37915: PUSH
37916: LD_INT 8
37918: GREATER
37919: OR
37920: IFFALSE 37924
// exit ;
37922: GO 37983
// if not range then
37924: LD_VAR 0 4
37928: NOT
37929: IFFALSE 37940
// range := - 12 ;
37931: LD_ADDR_VAR 0 4
37935: PUSH
37936: LD_INT 12
37938: NEG
37939: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37940: LD_VAR 0 1
37944: PPUSH
37945: LD_VAR 0 2
37949: PPUSH
37950: LD_VAR 0 3
37954: PPUSH
37955: LD_VAR 0 4
37959: PPUSH
37960: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37964: LD_VAR 0 1
37968: PPUSH
37969: LD_VAR 0 2
37973: PPUSH
37974: LD_VAR 0 3
37978: PPUSH
37979: CALL_OW 331
// end ;
37983: LD_VAR 0 5
37987: RET
// export function Video ( mode ) ; begin
37988: LD_INT 0
37990: PPUSH
// ingame_video = mode ;
37991: LD_ADDR_OWVAR 52
37995: PUSH
37996: LD_VAR 0 1
38000: ST_TO_ADDR
// interface_hidden = mode ;
38001: LD_ADDR_OWVAR 54
38005: PUSH
38006: LD_VAR 0 1
38010: ST_TO_ADDR
// end ;
38011: LD_VAR 0 2
38015: RET
// export function Join ( array , element ) ; begin
38016: LD_INT 0
38018: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38019: LD_ADDR_VAR 0 3
38023: PUSH
38024: LD_VAR 0 1
38028: PPUSH
38029: LD_VAR 0 1
38033: PUSH
38034: LD_INT 1
38036: PLUS
38037: PPUSH
38038: LD_VAR 0 2
38042: PPUSH
38043: CALL_OW 1
38047: ST_TO_ADDR
// end ;
38048: LD_VAR 0 3
38052: RET
// export function JoinUnion ( array , element ) ; begin
38053: LD_INT 0
38055: PPUSH
// result := array union element ;
38056: LD_ADDR_VAR 0 3
38060: PUSH
38061: LD_VAR 0 1
38065: PUSH
38066: LD_VAR 0 2
38070: UNION
38071: ST_TO_ADDR
// end ;
38072: LD_VAR 0 3
38076: RET
// export function GetBehemoths ( side ) ; begin
38077: LD_INT 0
38079: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
38080: LD_ADDR_VAR 0 2
38084: PUSH
38085: LD_INT 22
38087: PUSH
38088: LD_VAR 0 1
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 31
38099: PUSH
38100: LD_INT 25
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PPUSH
38111: CALL_OW 69
38115: ST_TO_ADDR
// end ;
38116: LD_VAR 0 2
38120: RET
// export function Shuffle ( array ) ; var i , index ; begin
38121: LD_INT 0
38123: PPUSH
38124: PPUSH
38125: PPUSH
// result := [ ] ;
38126: LD_ADDR_VAR 0 2
38130: PUSH
38131: EMPTY
38132: ST_TO_ADDR
// if not array then
38133: LD_VAR 0 1
38137: NOT
38138: IFFALSE 38142
// exit ;
38140: GO 38241
// Randomize ;
38142: CALL_OW 10
// for i = array downto 1 do
38146: LD_ADDR_VAR 0 3
38150: PUSH
38151: DOUBLE
38152: LD_VAR 0 1
38156: INC
38157: ST_TO_ADDR
38158: LD_INT 1
38160: PUSH
38161: FOR_DOWNTO
38162: IFFALSE 38239
// begin index := rand ( 1 , array ) ;
38164: LD_ADDR_VAR 0 4
38168: PUSH
38169: LD_INT 1
38171: PPUSH
38172: LD_VAR 0 1
38176: PPUSH
38177: CALL_OW 12
38181: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38182: LD_ADDR_VAR 0 2
38186: PUSH
38187: LD_VAR 0 2
38191: PPUSH
38192: LD_VAR 0 2
38196: PUSH
38197: LD_INT 1
38199: PLUS
38200: PPUSH
38201: LD_VAR 0 1
38205: PUSH
38206: LD_VAR 0 4
38210: ARRAY
38211: PPUSH
38212: CALL_OW 2
38216: ST_TO_ADDR
// array := Delete ( array , index ) ;
38217: LD_ADDR_VAR 0 1
38221: PUSH
38222: LD_VAR 0 1
38226: PPUSH
38227: LD_VAR 0 4
38231: PPUSH
38232: CALL_OW 3
38236: ST_TO_ADDR
// end ;
38237: GO 38161
38239: POP
38240: POP
// end ;
38241: LD_VAR 0 2
38245: RET
// export function GetBaseMaterials ( base ) ; begin
38246: LD_INT 0
38248: PPUSH
// result := [ 0 , 0 , 0 ] ;
38249: LD_ADDR_VAR 0 2
38253: PUSH
38254: LD_INT 0
38256: PUSH
38257: LD_INT 0
38259: PUSH
38260: LD_INT 0
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: LIST
38267: ST_TO_ADDR
// if not base then
38268: LD_VAR 0 1
38272: NOT
38273: IFFALSE 38277
// exit ;
38275: GO 38326
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38277: LD_ADDR_VAR 0 2
38281: PUSH
38282: LD_VAR 0 1
38286: PPUSH
38287: LD_INT 1
38289: PPUSH
38290: CALL_OW 275
38294: PUSH
38295: LD_VAR 0 1
38299: PPUSH
38300: LD_INT 2
38302: PPUSH
38303: CALL_OW 275
38307: PUSH
38308: LD_VAR 0 1
38312: PPUSH
38313: LD_INT 3
38315: PPUSH
38316: CALL_OW 275
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: ST_TO_ADDR
// end ;
38326: LD_VAR 0 2
38330: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38331: LD_INT 0
38333: PPUSH
38334: PPUSH
// result := array ;
38335: LD_ADDR_VAR 0 3
38339: PUSH
38340: LD_VAR 0 1
38344: ST_TO_ADDR
// if size > 0 then
38345: LD_VAR 0 2
38349: PUSH
38350: LD_INT 0
38352: GREATER
38353: IFFALSE 38399
// for i := array downto size do
38355: LD_ADDR_VAR 0 4
38359: PUSH
38360: DOUBLE
38361: LD_VAR 0 1
38365: INC
38366: ST_TO_ADDR
38367: LD_VAR 0 2
38371: PUSH
38372: FOR_DOWNTO
38373: IFFALSE 38397
// result := Delete ( result , result ) ;
38375: LD_ADDR_VAR 0 3
38379: PUSH
38380: LD_VAR 0 3
38384: PPUSH
38385: LD_VAR 0 3
38389: PPUSH
38390: CALL_OW 3
38394: ST_TO_ADDR
38395: GO 38372
38397: POP
38398: POP
// end ;
38399: LD_VAR 0 3
38403: RET
// export function ComExit ( unit ) ; var tmp ; begin
38404: LD_INT 0
38406: PPUSH
38407: PPUSH
// if not IsInUnit ( unit ) then
38408: LD_VAR 0 1
38412: PPUSH
38413: CALL_OW 310
38417: NOT
38418: IFFALSE 38422
// exit ;
38420: GO 38482
// tmp := IsInUnit ( unit ) ;
38422: LD_ADDR_VAR 0 3
38426: PUSH
38427: LD_VAR 0 1
38431: PPUSH
38432: CALL_OW 310
38436: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38437: LD_VAR 0 3
38441: PPUSH
38442: CALL_OW 247
38446: PUSH
38447: LD_INT 2
38449: EQUAL
38450: IFFALSE 38463
// ComExitVehicle ( unit ) else
38452: LD_VAR 0 1
38456: PPUSH
38457: CALL_OW 121
38461: GO 38472
// ComExitBuilding ( unit ) ;
38463: LD_VAR 0 1
38467: PPUSH
38468: CALL_OW 122
// result := tmp ;
38472: LD_ADDR_VAR 0 2
38476: PUSH
38477: LD_VAR 0 3
38481: ST_TO_ADDR
// end ;
38482: LD_VAR 0 2
38486: RET
// export function ComExitAll ( units ) ; var i ; begin
38487: LD_INT 0
38489: PPUSH
38490: PPUSH
// if not units then
38491: LD_VAR 0 1
38495: NOT
38496: IFFALSE 38500
// exit ;
38498: GO 38526
// for i in units do
38500: LD_ADDR_VAR 0 3
38504: PUSH
38505: LD_VAR 0 1
38509: PUSH
38510: FOR_IN
38511: IFFALSE 38524
// ComExit ( i ) ;
38513: LD_VAR 0 3
38517: PPUSH
38518: CALL 38404 0 1
38522: GO 38510
38524: POP
38525: POP
// end ;
38526: LD_VAR 0 2
38530: RET
// export function ResetHc ; begin
38531: LD_INT 0
38533: PPUSH
// InitHc ;
38534: CALL_OW 19
// hc_importance := 0 ;
38538: LD_ADDR_OWVAR 32
38542: PUSH
38543: LD_INT 0
38545: ST_TO_ADDR
// end ;
38546: LD_VAR 0 1
38550: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38551: LD_INT 0
38553: PPUSH
38554: PPUSH
38555: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38556: LD_ADDR_VAR 0 6
38560: PUSH
38561: LD_VAR 0 1
38565: PUSH
38566: LD_VAR 0 3
38570: PLUS
38571: PUSH
38572: LD_INT 2
38574: DIV
38575: ST_TO_ADDR
// if _x < 0 then
38576: LD_VAR 0 6
38580: PUSH
38581: LD_INT 0
38583: LESS
38584: IFFALSE 38601
// _x := _x * - 1 ;
38586: LD_ADDR_VAR 0 6
38590: PUSH
38591: LD_VAR 0 6
38595: PUSH
38596: LD_INT 1
38598: NEG
38599: MUL
38600: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38601: LD_ADDR_VAR 0 7
38605: PUSH
38606: LD_VAR 0 2
38610: PUSH
38611: LD_VAR 0 4
38615: PLUS
38616: PUSH
38617: LD_INT 2
38619: DIV
38620: ST_TO_ADDR
// if _y < 0 then
38621: LD_VAR 0 7
38625: PUSH
38626: LD_INT 0
38628: LESS
38629: IFFALSE 38646
// _y := _y * - 1 ;
38631: LD_ADDR_VAR 0 7
38635: PUSH
38636: LD_VAR 0 7
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: MUL
38645: ST_TO_ADDR
// result := [ _x , _y ] ;
38646: LD_ADDR_VAR 0 5
38650: PUSH
38651: LD_VAR 0 6
38655: PUSH
38656: LD_VAR 0 7
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: ST_TO_ADDR
// end ;
38665: LD_VAR 0 5
38669: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38670: LD_INT 0
38672: PPUSH
38673: PPUSH
38674: PPUSH
38675: PPUSH
// task := GetTaskList ( unit ) ;
38676: LD_ADDR_VAR 0 7
38680: PUSH
38681: LD_VAR 0 1
38685: PPUSH
38686: CALL_OW 437
38690: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38691: LD_VAR 0 7
38695: NOT
38696: PUSH
38697: LD_VAR 0 1
38701: PPUSH
38702: LD_VAR 0 2
38706: PPUSH
38707: CALL_OW 308
38711: NOT
38712: AND
38713: IFFALSE 38717
// exit ;
38715: GO 38835
// if IsInArea ( unit , area ) then
38717: LD_VAR 0 1
38721: PPUSH
38722: LD_VAR 0 2
38726: PPUSH
38727: CALL_OW 308
38731: IFFALSE 38749
// begin ComMoveToArea ( unit , goAway ) ;
38733: LD_VAR 0 1
38737: PPUSH
38738: LD_VAR 0 3
38742: PPUSH
38743: CALL_OW 113
// exit ;
38747: GO 38835
// end ; if task [ 1 ] [ 1 ] <> M then
38749: LD_VAR 0 7
38753: PUSH
38754: LD_INT 1
38756: ARRAY
38757: PUSH
38758: LD_INT 1
38760: ARRAY
38761: PUSH
38762: LD_STRING M
38764: NONEQUAL
38765: IFFALSE 38769
// exit ;
38767: GO 38835
// x := task [ 1 ] [ 2 ] ;
38769: LD_ADDR_VAR 0 5
38773: PUSH
38774: LD_VAR 0 7
38778: PUSH
38779: LD_INT 1
38781: ARRAY
38782: PUSH
38783: LD_INT 2
38785: ARRAY
38786: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38787: LD_ADDR_VAR 0 6
38791: PUSH
38792: LD_VAR 0 7
38796: PUSH
38797: LD_INT 1
38799: ARRAY
38800: PUSH
38801: LD_INT 3
38803: ARRAY
38804: ST_TO_ADDR
// if InArea ( x , y , area ) then
38805: LD_VAR 0 5
38809: PPUSH
38810: LD_VAR 0 6
38814: PPUSH
38815: LD_VAR 0 2
38819: PPUSH
38820: CALL_OW 309
38824: IFFALSE 38835
// ComStop ( unit ) ;
38826: LD_VAR 0 1
38830: PPUSH
38831: CALL_OW 141
// end ;
38835: LD_VAR 0 4
38839: RET
// export function Abs ( value ) ; begin
38840: LD_INT 0
38842: PPUSH
// result := value ;
38843: LD_ADDR_VAR 0 2
38847: PUSH
38848: LD_VAR 0 1
38852: ST_TO_ADDR
// if value < 0 then
38853: LD_VAR 0 1
38857: PUSH
38858: LD_INT 0
38860: LESS
38861: IFFALSE 38878
// result := value * - 1 ;
38863: LD_ADDR_VAR 0 2
38867: PUSH
38868: LD_VAR 0 1
38872: PUSH
38873: LD_INT 1
38875: NEG
38876: MUL
38877: ST_TO_ADDR
// end ;
38878: LD_VAR 0 2
38882: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38883: LD_INT 0
38885: PPUSH
38886: PPUSH
38887: PPUSH
38888: PPUSH
38889: PPUSH
38890: PPUSH
38891: PPUSH
38892: PPUSH
// if not unit or not building then
38893: LD_VAR 0 1
38897: NOT
38898: PUSH
38899: LD_VAR 0 2
38903: NOT
38904: OR
38905: IFFALSE 38909
// exit ;
38907: GO 39135
// x := GetX ( building ) ;
38909: LD_ADDR_VAR 0 4
38913: PUSH
38914: LD_VAR 0 2
38918: PPUSH
38919: CALL_OW 250
38923: ST_TO_ADDR
// y := GetY ( building ) ;
38924: LD_ADDR_VAR 0 6
38928: PUSH
38929: LD_VAR 0 2
38933: PPUSH
38934: CALL_OW 251
38938: ST_TO_ADDR
// d := GetDir ( building ) ;
38939: LD_ADDR_VAR 0 8
38943: PUSH
38944: LD_VAR 0 2
38948: PPUSH
38949: CALL_OW 254
38953: ST_TO_ADDR
// r := 4 ;
38954: LD_ADDR_VAR 0 9
38958: PUSH
38959: LD_INT 4
38961: ST_TO_ADDR
// for i := 1 to 5 do
38962: LD_ADDR_VAR 0 10
38966: PUSH
38967: DOUBLE
38968: LD_INT 1
38970: DEC
38971: ST_TO_ADDR
38972: LD_INT 5
38974: PUSH
38975: FOR_TO
38976: IFFALSE 39133
// begin _x := ShiftX ( x , d , r + i ) ;
38978: LD_ADDR_VAR 0 5
38982: PUSH
38983: LD_VAR 0 4
38987: PPUSH
38988: LD_VAR 0 8
38992: PPUSH
38993: LD_VAR 0 9
38997: PUSH
38998: LD_VAR 0 10
39002: PLUS
39003: PPUSH
39004: CALL_OW 272
39008: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39009: LD_ADDR_VAR 0 7
39013: PUSH
39014: LD_VAR 0 6
39018: PPUSH
39019: LD_VAR 0 8
39023: PPUSH
39024: LD_VAR 0 9
39028: PUSH
39029: LD_VAR 0 10
39033: PLUS
39034: PPUSH
39035: CALL_OW 273
39039: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39040: LD_VAR 0 5
39044: PPUSH
39045: LD_VAR 0 7
39049: PPUSH
39050: CALL_OW 488
39054: PUSH
39055: LD_VAR 0 5
39059: PPUSH
39060: LD_VAR 0 7
39064: PPUSH
39065: CALL_OW 428
39069: PPUSH
39070: CALL_OW 247
39074: PUSH
39075: LD_INT 3
39077: PUSH
39078: LD_INT 2
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: IN
39085: NOT
39086: AND
39087: IFFALSE 39131
// begin ComMoveXY ( unit , _x , _y ) ;
39089: LD_VAR 0 1
39093: PPUSH
39094: LD_VAR 0 5
39098: PPUSH
39099: LD_VAR 0 7
39103: PPUSH
39104: CALL_OW 111
// result := [ _x , _y ] ;
39108: LD_ADDR_VAR 0 3
39112: PUSH
39113: LD_VAR 0 5
39117: PUSH
39118: LD_VAR 0 7
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: ST_TO_ADDR
// exit ;
39127: POP
39128: POP
39129: GO 39135
// end ; end ;
39131: GO 38975
39133: POP
39134: POP
// end ;
39135: LD_VAR 0 3
39139: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39140: LD_INT 0
39142: PPUSH
39143: PPUSH
39144: PPUSH
// result := 0 ;
39145: LD_ADDR_VAR 0 3
39149: PUSH
39150: LD_INT 0
39152: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39153: LD_VAR 0 1
39157: PUSH
39158: LD_INT 0
39160: LESS
39161: PUSH
39162: LD_VAR 0 1
39166: PUSH
39167: LD_INT 8
39169: GREATER
39170: OR
39171: PUSH
39172: LD_VAR 0 2
39176: PUSH
39177: LD_INT 0
39179: LESS
39180: OR
39181: PUSH
39182: LD_VAR 0 2
39186: PUSH
39187: LD_INT 8
39189: GREATER
39190: OR
39191: IFFALSE 39195
// exit ;
39193: GO 39270
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39195: LD_ADDR_VAR 0 4
39199: PUSH
39200: LD_INT 22
39202: PUSH
39203: LD_VAR 0 2
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PPUSH
39212: CALL_OW 69
39216: PUSH
39217: FOR_IN
39218: IFFALSE 39268
// begin un := UnitShoot ( i ) ;
39220: LD_ADDR_VAR 0 5
39224: PUSH
39225: LD_VAR 0 4
39229: PPUSH
39230: CALL_OW 504
39234: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39235: LD_VAR 0 5
39239: PPUSH
39240: CALL_OW 255
39244: PUSH
39245: LD_VAR 0 1
39249: EQUAL
39250: IFFALSE 39266
// begin result := un ;
39252: LD_ADDR_VAR 0 3
39256: PUSH
39257: LD_VAR 0 5
39261: ST_TO_ADDR
// exit ;
39262: POP
39263: POP
39264: GO 39270
// end ; end ;
39266: GO 39217
39268: POP
39269: POP
// end ;
39270: LD_VAR 0 3
39274: RET
// export function GetCargoBay ( units ) ; begin
39275: LD_INT 0
39277: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39278: LD_ADDR_VAR 0 2
39282: PUSH
39283: LD_VAR 0 1
39287: PPUSH
39288: LD_INT 2
39290: PUSH
39291: LD_INT 34
39293: PUSH
39294: LD_INT 12
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 34
39303: PUSH
39304: LD_INT 51
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 34
39313: PUSH
39314: LD_INT 32
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 34
39323: PUSH
39324: LD_EXP 4
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: PPUSH
39340: CALL_OW 72
39344: ST_TO_ADDR
// end ;
39345: LD_VAR 0 2
39349: RET
// export function Negate ( value ) ; begin
39350: LD_INT 0
39352: PPUSH
// result := not value ;
39353: LD_ADDR_VAR 0 2
39357: PUSH
39358: LD_VAR 0 1
39362: NOT
39363: ST_TO_ADDR
// end ;
39364: LD_VAR 0 2
39368: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
39369: LD_INT 0
39371: PPUSH
// if x1 = x2 then
39372: LD_VAR 0 1
39376: PUSH
39377: LD_VAR 0 3
39381: EQUAL
39382: IFFALSE 39416
// begin if y1 > y2 then
39384: LD_VAR 0 2
39388: PUSH
39389: LD_VAR 0 4
39393: GREATER
39394: IFFALSE 39406
// result := 0 else
39396: LD_ADDR_VAR 0 5
39400: PUSH
39401: LD_INT 0
39403: ST_TO_ADDR
39404: GO 39414
// result := 3 ;
39406: LD_ADDR_VAR 0 5
39410: PUSH
39411: LD_INT 3
39413: ST_TO_ADDR
// exit ;
39414: GO 39502
// end ; if y1 = y2 then
39416: LD_VAR 0 2
39420: PUSH
39421: LD_VAR 0 4
39425: EQUAL
39426: IFFALSE 39460
// begin if x1 > x2 then
39428: LD_VAR 0 1
39432: PUSH
39433: LD_VAR 0 3
39437: GREATER
39438: IFFALSE 39450
// result := 1 else
39440: LD_ADDR_VAR 0 5
39444: PUSH
39445: LD_INT 1
39447: ST_TO_ADDR
39448: GO 39458
// result := 4 ;
39450: LD_ADDR_VAR 0 5
39454: PUSH
39455: LD_INT 4
39457: ST_TO_ADDR
// exit ;
39458: GO 39502
// end ; if x1 > x2 and y1 > y2 then
39460: LD_VAR 0 1
39464: PUSH
39465: LD_VAR 0 3
39469: GREATER
39470: PUSH
39471: LD_VAR 0 2
39475: PUSH
39476: LD_VAR 0 4
39480: GREATER
39481: AND
39482: IFFALSE 39494
// result := 2 else
39484: LD_ADDR_VAR 0 5
39488: PUSH
39489: LD_INT 2
39491: ST_TO_ADDR
39492: GO 39502
// result := 5 ;
39494: LD_ADDR_VAR 0 5
39498: PUSH
39499: LD_INT 5
39501: ST_TO_ADDR
// end ;
39502: LD_VAR 0 5
39506: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39507: LD_INT 0
39509: PPUSH
39510: PPUSH
// if not driver or not IsInUnit ( driver ) then
39511: LD_VAR 0 1
39515: NOT
39516: PUSH
39517: LD_VAR 0 1
39521: PPUSH
39522: CALL_OW 310
39526: NOT
39527: OR
39528: IFFALSE 39532
// exit ;
39530: GO 39622
// vehicle := IsInUnit ( driver ) ;
39532: LD_ADDR_VAR 0 3
39536: PUSH
39537: LD_VAR 0 1
39541: PPUSH
39542: CALL_OW 310
39546: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39547: LD_VAR 0 1
39551: PPUSH
39552: LD_STRING \
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: LD_INT 0
39563: PUSH
39564: LD_INT 0
39566: PUSH
39567: LD_INT 0
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: PUSH
39582: LD_STRING E
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: LD_INT 0
39590: PUSH
39591: LD_VAR 0 3
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: LD_INT 0
39601: PUSH
39602: LD_INT 0
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PPUSH
39618: CALL_OW 446
// end ;
39622: LD_VAR 0 2
39626: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39627: LD_INT 0
39629: PPUSH
39630: PPUSH
// if not driver or not IsInUnit ( driver ) then
39631: LD_VAR 0 1
39635: NOT
39636: PUSH
39637: LD_VAR 0 1
39641: PPUSH
39642: CALL_OW 310
39646: NOT
39647: OR
39648: IFFALSE 39652
// exit ;
39650: GO 39742
// vehicle := IsInUnit ( driver ) ;
39652: LD_ADDR_VAR 0 3
39656: PUSH
39657: LD_VAR 0 1
39661: PPUSH
39662: CALL_OW 310
39666: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39667: LD_VAR 0 1
39671: PPUSH
39672: LD_STRING \
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: PUSH
39702: LD_STRING E
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: LD_VAR 0 3
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: LD_INT 0
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PPUSH
39738: CALL_OW 447
// end ;
39742: LD_VAR 0 2
39746: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39747: LD_INT 0
39749: PPUSH
39750: PPUSH
39751: PPUSH
// tmp := [ ] ;
39752: LD_ADDR_VAR 0 5
39756: PUSH
39757: EMPTY
39758: ST_TO_ADDR
// for i in units do
39759: LD_ADDR_VAR 0 4
39763: PUSH
39764: LD_VAR 0 1
39768: PUSH
39769: FOR_IN
39770: IFFALSE 39808
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39772: LD_ADDR_VAR 0 5
39776: PUSH
39777: LD_VAR 0 5
39781: PPUSH
39782: LD_VAR 0 5
39786: PUSH
39787: LD_INT 1
39789: PLUS
39790: PPUSH
39791: LD_VAR 0 4
39795: PPUSH
39796: CALL_OW 256
39800: PPUSH
39801: CALL_OW 2
39805: ST_TO_ADDR
39806: GO 39769
39808: POP
39809: POP
// if not tmp then
39810: LD_VAR 0 5
39814: NOT
39815: IFFALSE 39819
// exit ;
39817: GO 39867
// if asc then
39819: LD_VAR 0 2
39823: IFFALSE 39847
// result := SortListByListAsc ( units , tmp ) else
39825: LD_ADDR_VAR 0 3
39829: PUSH
39830: LD_VAR 0 1
39834: PPUSH
39835: LD_VAR 0 5
39839: PPUSH
39840: CALL_OW 76
39844: ST_TO_ADDR
39845: GO 39867
// result := SortListByListDesc ( units , tmp ) ;
39847: LD_ADDR_VAR 0 3
39851: PUSH
39852: LD_VAR 0 1
39856: PPUSH
39857: LD_VAR 0 5
39861: PPUSH
39862: CALL_OW 77
39866: ST_TO_ADDR
// end ;
39867: LD_VAR 0 3
39871: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
39872: LD_INT 0
39874: PPUSH
39875: PPUSH
// task := GetTaskList ( mech ) ;
39876: LD_ADDR_VAR 0 4
39880: PUSH
39881: LD_VAR 0 1
39885: PPUSH
39886: CALL_OW 437
39890: ST_TO_ADDR
// if not task then
39891: LD_VAR 0 4
39895: NOT
39896: IFFALSE 39900
// exit ;
39898: GO 39942
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
39900: LD_ADDR_VAR 0 3
39904: PUSH
39905: LD_VAR 0 4
39909: PUSH
39910: LD_INT 1
39912: ARRAY
39913: PUSH
39914: LD_INT 1
39916: ARRAY
39917: PUSH
39918: LD_STRING r
39920: EQUAL
39921: PUSH
39922: LD_VAR 0 4
39926: PUSH
39927: LD_INT 1
39929: ARRAY
39930: PUSH
39931: LD_INT 4
39933: ARRAY
39934: PUSH
39935: LD_VAR 0 2
39939: EQUAL
39940: AND
39941: ST_TO_ADDR
// end ;
39942: LD_VAR 0 3
39946: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
39947: LD_INT 0
39949: PPUSH
// SetDir ( unit , d ) ;
39950: LD_VAR 0 1
39954: PPUSH
39955: LD_VAR 0 4
39959: PPUSH
39960: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
39964: LD_VAR 0 1
39968: PPUSH
39969: LD_VAR 0 2
39973: PPUSH
39974: LD_VAR 0 3
39978: PPUSH
39979: LD_VAR 0 5
39983: PPUSH
39984: CALL_OW 48
// end ;
39988: LD_VAR 0 6
39992: RET
// export function ToNaturalNumber ( number ) ; begin
39993: LD_INT 0
39995: PPUSH
// result := number div 1 ;
39996: LD_ADDR_VAR 0 2
40000: PUSH
40001: LD_VAR 0 1
40005: PUSH
40006: LD_INT 1
40008: DIV
40009: ST_TO_ADDR
// if number < 0 then
40010: LD_VAR 0 1
40014: PUSH
40015: LD_INT 0
40017: LESS
40018: IFFALSE 40028
// result := 0 ;
40020: LD_ADDR_VAR 0 2
40024: PUSH
40025: LD_INT 0
40027: ST_TO_ADDR
// end ;
40028: LD_VAR 0 2
40032: RET
// export function SortByClass ( units , class ) ; var un ; begin
40033: LD_INT 0
40035: PPUSH
40036: PPUSH
// if not units or not class then
40037: LD_VAR 0 1
40041: NOT
40042: PUSH
40043: LD_VAR 0 2
40047: NOT
40048: OR
40049: IFFALSE 40053
// exit ;
40051: GO 40148
// result := [ ] ;
40053: LD_ADDR_VAR 0 3
40057: PUSH
40058: EMPTY
40059: ST_TO_ADDR
// for un in units do
40060: LD_ADDR_VAR 0 4
40064: PUSH
40065: LD_VAR 0 1
40069: PUSH
40070: FOR_IN
40071: IFFALSE 40146
// if GetClass ( un ) = class then
40073: LD_VAR 0 4
40077: PPUSH
40078: CALL_OW 257
40082: PUSH
40083: LD_VAR 0 2
40087: EQUAL
40088: IFFALSE 40115
// result := Insert ( result , 1 , un ) else
40090: LD_ADDR_VAR 0 3
40094: PUSH
40095: LD_VAR 0 3
40099: PPUSH
40100: LD_INT 1
40102: PPUSH
40103: LD_VAR 0 4
40107: PPUSH
40108: CALL_OW 2
40112: ST_TO_ADDR
40113: GO 40144
// result := Replace ( result , result + 1 , un ) ;
40115: LD_ADDR_VAR 0 3
40119: PUSH
40120: LD_VAR 0 3
40124: PPUSH
40125: LD_VAR 0 3
40129: PUSH
40130: LD_INT 1
40132: PLUS
40133: PPUSH
40134: LD_VAR 0 4
40138: PPUSH
40139: CALL_OW 1
40143: ST_TO_ADDR
40144: GO 40070
40146: POP
40147: POP
// end ; end_of_file
40148: LD_VAR 0 3
40152: RET
// export ecoSide , ecoNation , ecoPeopleAmount , ecoStartPoint , ecoCratesDrop , ecoCratesDropXY , ecoCratesDropAllow , ecoAttacksAllow , ecoEventsAllow , ecoAttacksArea , ecoEventsList ; export function InitEcoMode ( startPoint , cratesDropXY , attacksArea ) ; var i , tmp , side , nation , peopleAmount , resourcesAmount ; begin
40153: LD_INT 0
40155: PPUSH
40156: PPUSH
40157: PPUSH
40158: PPUSH
40159: PPUSH
40160: PPUSH
40161: PPUSH
// ecoStartPoint := startPoint ;
40162: LD_ADDR_EXP 25
40166: PUSH
40167: LD_VAR 0 1
40171: ST_TO_ADDR
// CenterNowOnXY ( ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
40172: LD_EXP 25
40176: PUSH
40177: LD_INT 1
40179: ARRAY
40180: PPUSH
40181: LD_EXP 25
40185: PUSH
40186: LD_INT 2
40188: ARRAY
40189: PPUSH
40190: CALL_OW 86
// ecoCratesDropXY := cratesDropXY ;
40194: LD_ADDR_EXP 27
40198: PUSH
40199: LD_VAR 0 2
40203: ST_TO_ADDR
// ecoAttacksArea := attacksArea ;
40204: LD_ADDR_EXP 31
40208: PUSH
40209: LD_VAR 0 3
40213: ST_TO_ADDR
// if debug then
40214: LD_EXP 1
40218: IFFALSE 40262
// begin side := 1 ;
40220: LD_ADDR_VAR 0 7
40224: PUSH
40225: LD_INT 1
40227: ST_TO_ADDR
// nation := 1 ;
40228: LD_ADDR_VAR 0 8
40232: PUSH
40233: LD_INT 1
40235: ST_TO_ADDR
// peopleAmount := 15 ;
40236: LD_ADDR_VAR 0 9
40240: PUSH
40241: LD_INT 15
40243: ST_TO_ADDR
// resourcesAmount := 2 ;
40244: LD_ADDR_VAR 0 10
40248: PUSH
40249: LD_INT 2
40251: ST_TO_ADDR
// ecoCratesDrop := 3 ;
40252: LD_ADDR_EXP 26
40256: PUSH
40257: LD_INT 3
40259: ST_TO_ADDR
// end else
40260: GO 40358
// begin side := GetMultiplayerSetting ( 0 ) ;
40262: LD_ADDR_VAR 0 7
40266: PUSH
40267: LD_INT 0
40269: PPUSH
40270: CALL_OW 426
40274: ST_TO_ADDR
// nation := GetMultiplayerSetting ( 1 ) ;
40275: LD_ADDR_VAR 0 8
40279: PUSH
40280: LD_INT 1
40282: PPUSH
40283: CALL_OW 426
40287: ST_TO_ADDR
// peopleAmount := [ 6 , 9 , 12 , 15 , 18 , 21 , 24 ] [ GetMultiplayerSetting ( 2 ) ] ;
40288: LD_ADDR_VAR 0 9
40292: PUSH
40293: LD_INT 6
40295: PUSH
40296: LD_INT 9
40298: PUSH
40299: LD_INT 12
40301: PUSH
40302: LD_INT 15
40304: PUSH
40305: LD_INT 18
40307: PUSH
40308: LD_INT 21
40310: PUSH
40311: LD_INT 24
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 2
40325: PPUSH
40326: CALL_OW 426
40330: ARRAY
40331: ST_TO_ADDR
// resourcesAmount := GetMultiplayerSetting ( 3 ) ;
40332: LD_ADDR_VAR 0 10
40336: PUSH
40337: LD_INT 3
40339: PPUSH
40340: CALL_OW 426
40344: ST_TO_ADDR
// ecoCratesDrop := GetMultiplayerSetting ( 4 ) ;
40345: LD_ADDR_EXP 26
40349: PUSH
40350: LD_INT 4
40352: PPUSH
40353: CALL_OW 426
40357: ST_TO_ADDR
// end ; ecoCratesDropAllow := true ;
40358: LD_ADDR_EXP 28
40362: PUSH
40363: LD_INT 1
40365: ST_TO_ADDR
// ecoEventsAllow := false ;
40366: LD_ADDR_EXP 30
40370: PUSH
40371: LD_INT 0
40373: ST_TO_ADDR
// ecoAttacksAllow := false ;
40374: LD_ADDR_EXP 29
40378: PUSH
40379: LD_INT 0
40381: ST_TO_ADDR
// ecoSide := side ;
40382: LD_ADDR_EXP 22
40386: PUSH
40387: LD_VAR 0 7
40391: ST_TO_ADDR
// your_side := side ;
40392: LD_ADDR_OWVAR 2
40396: PUSH
40397: LD_VAR 0 7
40401: ST_TO_ADDR
// ChangeSideFog ( 1 , side ) ;
40402: LD_INT 1
40404: PPUSH
40405: LD_VAR 0 7
40409: PPUSH
40410: CALL_OW 343
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
40414: LD_INT 1
40416: PPUSH
40417: LD_INT 1
40419: PPUSH
40420: LD_VAR 0 7
40424: PPUSH
40425: LD_INT 32793
40427: NEG
40428: PPUSH
40429: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
40433: LD_INT 1
40435: PPUSH
40436: LD_INT 1
40438: PPUSH
40439: LD_VAR 0 7
40443: PPUSH
40444: CALL_OW 331
// ecoNation := nation ;
40448: LD_ADDR_EXP 23
40452: PUSH
40453: LD_VAR 0 8
40457: ST_TO_ADDR
// ecoPeopleAmount := peopleAmount ;
40458: LD_ADDR_EXP 24
40462: PUSH
40463: LD_VAR 0 9
40467: ST_TO_ADDR
// for i = 1 to resourcesAmount * 5 do
40468: LD_ADDR_VAR 0 5
40472: PUSH
40473: DOUBLE
40474: LD_INT 1
40476: DEC
40477: ST_TO_ADDR
40478: LD_VAR 0 10
40482: PUSH
40483: LD_INT 5
40485: MUL
40486: PUSH
40487: FOR_TO
40488: IFFALSE 40526
// CreateResourcesXYR ( mat_cans , 5 , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 6 , false ) ;
40490: LD_INT 1
40492: PPUSH
40493: LD_INT 5
40495: PPUSH
40496: LD_EXP 25
40500: PUSH
40501: LD_INT 1
40503: ARRAY
40504: PPUSH
40505: LD_EXP 25
40509: PUSH
40510: LD_INT 2
40512: ARRAY
40513: PPUSH
40514: LD_INT 6
40516: PPUSH
40517: LD_INT 0
40519: PPUSH
40520: CALL_OW 60
40524: GO 40487
40526: POP
40527: POP
// uc_side := side ;
40528: LD_ADDR_OWVAR 20
40532: PUSH
40533: LD_VAR 0 7
40537: ST_TO_ADDR
// uc_nation := nation ;
40538: LD_ADDR_OWVAR 21
40542: PUSH
40543: LD_VAR 0 8
40547: ST_TO_ADDR
// hc_importance := 100 ;
40548: LD_ADDR_OWVAR 32
40552: PUSH
40553: LD_INT 100
40555: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
40556: LD_INT 0
40558: PPUSH
40559: LD_INT 1
40561: PPUSH
40562: LD_INT 4
40564: PPUSH
40565: CALL_OW 380
// if side = 1 and nation = 1 then
40569: LD_VAR 0 7
40573: PUSH
40574: LD_INT 1
40576: EQUAL
40577: PUSH
40578: LD_VAR 0 8
40582: PUSH
40583: LD_INT 1
40585: EQUAL
40586: AND
40587: IFFALSE 40621
// begin hc_name := John Macmilan ;
40589: LD_ADDR_OWVAR 26
40593: PUSH
40594: LD_STRING John Macmilan
40596: ST_TO_ADDR
// hc_gallery := us ;
40597: LD_ADDR_OWVAR 33
40601: PUSH
40602: LD_STRING us
40604: ST_TO_ADDR
// hc_face_number := 5 ;
40605: LD_ADDR_OWVAR 34
40609: PUSH
40610: LD_INT 5
40612: ST_TO_ADDR
// hc_sex := sex_male ;
40613: LD_ADDR_OWVAR 27
40617: PUSH
40618: LD_INT 1
40620: ST_TO_ADDR
// end ; if side = 2 and nation = 2 then
40621: LD_VAR 0 7
40625: PUSH
40626: LD_INT 2
40628: EQUAL
40629: PUSH
40630: LD_VAR 0 8
40634: PUSH
40635: LD_INT 2
40637: EQUAL
40638: AND
40639: IFFALSE 40673
// begin hc_name := Heike Steyer ;
40641: LD_ADDR_OWVAR 26
40645: PUSH
40646: LD_STRING Heike Steyer
40648: ST_TO_ADDR
// hc_gallery := sandar ;
40649: LD_ADDR_OWVAR 33
40653: PUSH
40654: LD_STRING sandar
40656: ST_TO_ADDR
// hc_face_number := 14 ;
40657: LD_ADDR_OWVAR 34
40661: PUSH
40662: LD_INT 14
40664: ST_TO_ADDR
// hc_sex := sex_female ;
40665: LD_ADDR_OWVAR 27
40669: PUSH
40670: LD_INT 2
40672: ST_TO_ADDR
// end ; if side = 3 and nation = 3 then
40673: LD_VAR 0 7
40677: PUSH
40678: LD_INT 3
40680: EQUAL
40681: PUSH
40682: LD_VAR 0 8
40686: PUSH
40687: LD_INT 3
40689: EQUAL
40690: AND
40691: IFFALSE 40738
// begin PrepareHuman ( false , 3 , 4 ) ;
40693: LD_INT 0
40695: PPUSH
40696: LD_INT 3
40698: PPUSH
40699: LD_INT 4
40701: PPUSH
40702: CALL_OW 380
// hc_name := Yuri I. Burlak ;
40706: LD_ADDR_OWVAR 26
40710: PUSH
40711: LD_STRING Yuri I. Burlak
40713: ST_TO_ADDR
// hc_gallery := ru ;
40714: LD_ADDR_OWVAR 33
40718: PUSH
40719: LD_STRING ru
40721: ST_TO_ADDR
// hc_face_number := 1 ;
40722: LD_ADDR_OWVAR 34
40726: PUSH
40727: LD_INT 1
40729: ST_TO_ADDR
// hc_sex := sex_male ;
40730: LD_ADDR_OWVAR 27
40734: PUSH
40735: LD_INT 1
40737: ST_TO_ADDR
// end ; if side = 4 and nation = 1 then
40738: LD_VAR 0 7
40742: PUSH
40743: LD_INT 4
40745: EQUAL
40746: PUSH
40747: LD_VAR 0 8
40751: PUSH
40752: LD_INT 1
40754: EQUAL
40755: AND
40756: IFFALSE 40790
// begin hc_name := Arthur Powell ;
40758: LD_ADDR_OWVAR 26
40762: PUSH
40763: LD_STRING Arthur Powell
40765: ST_TO_ADDR
// hc_gallery := us ;
40766: LD_ADDR_OWVAR 33
40770: PUSH
40771: LD_STRING us
40773: ST_TO_ADDR
// hc_face_number := 7 ;
40774: LD_ADDR_OWVAR 34
40778: PUSH
40779: LD_INT 7
40781: ST_TO_ADDR
// hc_sex := sex_male ;
40782: LD_ADDR_OWVAR 27
40786: PUSH
40787: LD_INT 1
40789: ST_TO_ADDR
// end ; if side = 6 and nation = 3 then
40790: LD_VAR 0 7
40794: PUSH
40795: LD_INT 6
40797: EQUAL
40798: PUSH
40799: LD_VAR 0 8
40803: PUSH
40804: LD_INT 3
40806: EQUAL
40807: AND
40808: IFFALSE 40842
// begin hc_name := Mjr. Platonov ;
40810: LD_ADDR_OWVAR 26
40814: PUSH
40815: LD_STRING Mjr. Platonov
40817: ST_TO_ADDR
// hc_gallery := ru ;
40818: LD_ADDR_OWVAR 33
40822: PUSH
40823: LD_STRING ru
40825: ST_TO_ADDR
// hc_face_number := 60 ;
40826: LD_ADDR_OWVAR 34
40830: PUSH
40831: LD_INT 60
40833: ST_TO_ADDR
// hc_sex := sex_male ;
40834: LD_ADDR_OWVAR 27
40838: PUSH
40839: LD_INT 1
40841: ST_TO_ADDR
// end ; if side = 7 and nation = 1 then
40842: LD_VAR 0 7
40846: PUSH
40847: LD_INT 7
40849: EQUAL
40850: PUSH
40851: LD_VAR 0 8
40855: PUSH
40856: LD_INT 1
40858: EQUAL
40859: AND
40860: IFFALSE 40907
// begin PrepareHuman ( false , 4 , 4 ) ;
40862: LD_INT 0
40864: PPUSH
40865: LD_INT 4
40867: PPUSH
40868: LD_INT 4
40870: PPUSH
40871: CALL_OW 380
// hc_name := Peter Roth ;
40875: LD_ADDR_OWVAR 26
40879: PUSH
40880: LD_STRING Peter Roth
40882: ST_TO_ADDR
// hc_gallery := us ;
40883: LD_ADDR_OWVAR 33
40887: PUSH
40888: LD_STRING us
40890: ST_TO_ADDR
// hc_face_number := 22 ;
40891: LD_ADDR_OWVAR 34
40895: PUSH
40896: LD_INT 22
40898: ST_TO_ADDR
// hc_sex := sex_male ;
40899: LD_ADDR_OWVAR 27
40903: PUSH
40904: LD_INT 1
40906: ST_TO_ADDR
// end ; if side = 7 and nation = 3 then
40907: LD_VAR 0 7
40911: PUSH
40912: LD_INT 7
40914: EQUAL
40915: PUSH
40916: LD_VAR 0 8
40920: PUSH
40921: LD_INT 3
40923: EQUAL
40924: AND
40925: IFFALSE 40972
// begin PrepareHuman ( false , 4 , 4 ) ;
40927: LD_INT 0
40929: PPUSH
40930: LD_INT 4
40932: PPUSH
40933: LD_INT 4
40935: PPUSH
40936: CALL_OW 380
// hc_name := Prof. Gossudarov ;
40940: LD_ADDR_OWVAR 26
40944: PUSH
40945: LD_STRING Prof. Gossudarov
40947: ST_TO_ADDR
// hc_gallery := ru ;
40948: LD_ADDR_OWVAR 33
40952: PUSH
40953: LD_STRING ru
40955: ST_TO_ADDR
// hc_face_number := 61 ;
40956: LD_ADDR_OWVAR 34
40960: PUSH
40961: LD_INT 61
40963: ST_TO_ADDR
// hc_sex := sex_male ;
40964: LD_ADDR_OWVAR 27
40968: PUSH
40969: LD_INT 1
40971: ST_TO_ADDR
// end ; if side = 8 and nation = 1 then
40972: LD_VAR 0 7
40976: PUSH
40977: LD_INT 8
40979: EQUAL
40980: PUSH
40981: LD_VAR 0 8
40985: PUSH
40986: LD_INT 1
40988: EQUAL
40989: AND
40990: IFFALSE 41024
// begin hc_name := Ron Harisson ;
40992: LD_ADDR_OWVAR 26
40996: PUSH
40997: LD_STRING Ron Harisson
40999: ST_TO_ADDR
// hc_gallery := us ;
41000: LD_ADDR_OWVAR 33
41004: PUSH
41005: LD_STRING us
41007: ST_TO_ADDR
// hc_face_number := 6 ;
41008: LD_ADDR_OWVAR 34
41012: PUSH
41013: LD_INT 6
41015: ST_TO_ADDR
// hc_sex := sex_male ;
41016: LD_ADDR_OWVAR 27
41020: PUSH
41021: LD_INT 1
41023: ST_TO_ADDR
// end ; if side = 8 and nation = 2 then
41024: LD_VAR 0 7
41028: PUSH
41029: LD_INT 8
41031: EQUAL
41032: PUSH
41033: LD_VAR 0 8
41037: PUSH
41038: LD_INT 2
41040: EQUAL
41041: AND
41042: IFFALSE 41076
// begin hc_name := Louis Schulz ;
41044: LD_ADDR_OWVAR 26
41048: PUSH
41049: LD_STRING Louis Schulz
41051: ST_TO_ADDR
// hc_gallery := sandar ;
41052: LD_ADDR_OWVAR 33
41056: PUSH
41057: LD_STRING sandar
41059: ST_TO_ADDR
// hc_face_number := 1 ;
41060: LD_ADDR_OWVAR 34
41064: PUSH
41065: LD_INT 1
41067: ST_TO_ADDR
// hc_sex := sex_male ;
41068: LD_ADDR_OWVAR 27
41072: PUSH
41073: LD_INT 1
41075: ST_TO_ADDR
// end ; PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
41076: CALL_OW 44
41080: PPUSH
41081: LD_EXP 25
41085: PUSH
41086: LD_INT 1
41088: ARRAY
41089: PPUSH
41090: LD_EXP 25
41094: PUSH
41095: LD_INT 2
41097: ARRAY
41098: PPUSH
41099: LD_INT 12
41101: PPUSH
41102: LD_INT 0
41104: PPUSH
41105: CALL_OW 50
// InitHc_All ( ) ;
41109: CALL_OW 584
// for i = 1 to peopleAmount - 1 do
41113: LD_ADDR_VAR 0 5
41117: PUSH
41118: DOUBLE
41119: LD_INT 1
41121: DEC
41122: ST_TO_ADDR
41123: LD_VAR 0 9
41127: PUSH
41128: LD_INT 1
41130: MINUS
41131: PUSH
41132: FOR_TO
41133: IFFALSE 41228
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
41135: LD_INT 0
41137: PPUSH
41138: LD_VAR 0 5
41142: PUSH
41143: LD_INT 4
41145: MOD
41146: PUSH
41147: LD_INT 1
41149: PLUS
41150: PPUSH
41151: LD_INT 3
41153: PPUSH
41154: CALL_OW 380
// tmp := Replace ( tmp , tmp + 1 , CreateHuman ) ;
41158: LD_ADDR_VAR 0 6
41162: PUSH
41163: LD_VAR 0 6
41167: PPUSH
41168: LD_VAR 0 6
41172: PUSH
41173: LD_INT 1
41175: PLUS
41176: PPUSH
41177: CALL_OW 44
41181: PPUSH
41182: CALL_OW 1
41186: ST_TO_ADDR
// PlaceUnitXYR ( tmp [ tmp ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
41187: LD_VAR 0 6
41191: PUSH
41192: LD_VAR 0 6
41196: ARRAY
41197: PPUSH
41198: LD_EXP 25
41202: PUSH
41203: LD_INT 1
41205: ARRAY
41206: PPUSH
41207: LD_EXP 25
41211: PUSH
41212: LD_INT 2
41214: ARRAY
41215: PPUSH
41216: LD_INT 12
41218: PPUSH
41219: LD_INT 0
41221: PPUSH
41222: CALL_OW 50
// end ;
41226: GO 41132
41228: POP
41229: POP
// end ;
41230: LD_VAR 0 4
41234: RET
// every 0 0$1 trigger ecoCratesDrop and ecoCratesDropXY do var time , xy ;
41235: LD_EXP 26
41239: PUSH
41240: LD_EXP 27
41244: AND
41245: IFFALSE 41415
41247: GO 41249
41249: DISABLE
41250: LD_INT 0
41252: PPUSH
41253: PPUSH
// begin time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
41254: LD_ADDR_VAR 0 1
41258: PUSH
41259: LD_INT 700
41261: PUSH
41262: LD_INT 350
41264: PUSH
41265: LD_INT 175
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: PUSH
41273: LD_EXP 26
41277: ARRAY
41278: ST_TO_ADDR
// while true do
41279: LD_INT 1
41281: IFFALSE 41415
// begin wait ( time ) ;
41283: LD_VAR 0 1
41287: PPUSH
41288: CALL_OW 67
// if not ecoCratesDropAllow then
41292: LD_EXP 28
41296: NOT
41297: IFFALSE 41301
// continue ;
41299: GO 41279
// time := time + 0 0$2 ;
41301: LD_ADDR_VAR 0 1
41305: PUSH
41306: LD_VAR 0 1
41310: PUSH
41311: LD_INT 70
41313: PLUS
41314: ST_TO_ADDR
// if time > 0 0$40 then
41315: LD_VAR 0 1
41319: PUSH
41320: LD_INT 1400
41322: GREATER
41323: IFFALSE 41350
// time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
41325: LD_ADDR_VAR 0 1
41329: PUSH
41330: LD_INT 700
41332: PUSH
41333: LD_INT 350
41335: PUSH
41336: LD_INT 175
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: LIST
41343: PUSH
41344: LD_EXP 26
41348: ARRAY
41349: ST_TO_ADDR
// xy := ecoCratesDropXY [ rand ( 1 , ecoCratesDropXY ) ] ;
41350: LD_ADDR_VAR 0 2
41354: PUSH
41355: LD_EXP 27
41359: PUSH
41360: LD_INT 1
41362: PPUSH
41363: LD_EXP 27
41367: PPUSH
41368: CALL_OW 12
41372: ARRAY
41373: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , xy [ 1 ] , xy [ 2 ] , 14 , true ) ;
41374: LD_INT 1
41376: PPUSH
41377: LD_INT 5
41379: PPUSH
41380: CALL_OW 12
41384: PPUSH
41385: LD_VAR 0 2
41389: PUSH
41390: LD_INT 1
41392: ARRAY
41393: PPUSH
41394: LD_VAR 0 2
41398: PUSH
41399: LD_INT 2
41401: ARRAY
41402: PPUSH
41403: LD_INT 14
41405: PPUSH
41406: LD_INT 1
41408: PPUSH
41409: CALL_OW 56
// end ;
41413: GO 41279
// end ;
41415: PPOPN 2
41417: END
// every 0 0$1 trigger ecoAttacksArea and ecoAttacksAllow do var time , area , tmp , i , xy , veh , dir , enemySide , waveBonus ;
41418: LD_EXP 31
41422: PUSH
41423: LD_EXP 29
41427: AND
41428: IFFALSE 42192
41430: GO 41432
41432: DISABLE
41433: LD_INT 0
41435: PPUSH
41436: PPUSH
41437: PPUSH
41438: PPUSH
41439: PPUSH
41440: PPUSH
41441: PPUSH
41442: PPUSH
41443: PPUSH
// begin time := 3 3$00 ;
41444: LD_ADDR_VAR 0 1
41448: PUSH
41449: LD_INT 6300
41451: ST_TO_ADDR
// enemySide := [ 3 , 9 ] [ rand ( 1 , 2 ) ] ;
41452: LD_ADDR_VAR 0 8
41456: PUSH
41457: LD_INT 3
41459: PUSH
41460: LD_INT 9
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: PPUSH
41470: LD_INT 2
41472: PPUSH
41473: CALL_OW 12
41477: ARRAY
41478: ST_TO_ADDR
// waveBonus := 0 ;
41479: LD_ADDR_VAR 0 9
41483: PUSH
41484: LD_INT 0
41486: ST_TO_ADDR
// if ecoSide = enemySide then
41487: LD_EXP 22
41491: PUSH
41492: LD_VAR 0 8
41496: EQUAL
41497: IFFALSE 41507
// enemySide := 1 ;
41499: LD_ADDR_VAR 0 8
41503: PUSH
41504: LD_INT 1
41506: ST_TO_ADDR
// while true do
41507: LD_INT 1
41509: IFFALSE 42192
// begin wait ( time ) ;
41511: LD_VAR 0 1
41515: PPUSH
41516: CALL_OW 67
// if not ecoAttacksAllow then
41520: LD_EXP 29
41524: NOT
41525: IFFALSE 41529
// continue ;
41527: GO 41507
// waveBonus := waveBonus + 2 ;
41529: LD_ADDR_VAR 0 9
41533: PUSH
41534: LD_VAR 0 9
41538: PUSH
41539: LD_INT 2
41541: PLUS
41542: ST_TO_ADDR
// if waveBonus > 20 then
41543: LD_VAR 0 9
41547: PUSH
41548: LD_INT 20
41550: GREATER
41551: IFFALSE 41561
// waveBonus := 20 ;
41553: LD_ADDR_VAR 0 9
41557: PUSH
41558: LD_INT 20
41560: ST_TO_ADDR
// area := ecoAttacksArea [ rand ( 1 , ecoAttacksArea ) ] ;
41561: LD_ADDR_VAR 0 2
41565: PUSH
41566: LD_EXP 31
41570: PUSH
41571: LD_INT 1
41573: PPUSH
41574: LD_EXP 31
41578: PPUSH
41579: CALL_OW 12
41583: ARRAY
41584: ST_TO_ADDR
// tmp := AreaToList ( area , 0 ) ;
41585: LD_ADDR_VAR 0 3
41589: PUSH
41590: LD_VAR 0 2
41594: PPUSH
41595: LD_INT 0
41597: PPUSH
41598: CALL_OW 517
41602: ST_TO_ADDR
// dir := GetDirFromHex ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
41603: LD_ADDR_VAR 0 7
41607: PUSH
41608: LD_VAR 0 3
41612: PUSH
41613: LD_INT 1
41615: ARRAY
41616: PUSH
41617: LD_INT 1
41619: ARRAY
41620: PPUSH
41621: LD_VAR 0 3
41625: PUSH
41626: LD_INT 2
41628: ARRAY
41629: PUSH
41630: LD_INT 1
41632: ARRAY
41633: PPUSH
41634: LD_EXP 25
41638: PUSH
41639: LD_INT 1
41641: ARRAY
41642: PPUSH
41643: LD_EXP 25
41647: PUSH
41648: LD_INT 2
41650: ARRAY
41651: PPUSH
41652: CALL 39369 0 4
41656: ST_TO_ADDR
// xy := PointBetweenXY ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
41657: LD_ADDR_VAR 0 5
41661: PUSH
41662: LD_VAR 0 3
41666: PUSH
41667: LD_INT 1
41669: ARRAY
41670: PUSH
41671: LD_INT 1
41673: ARRAY
41674: PPUSH
41675: LD_VAR 0 3
41679: PUSH
41680: LD_INT 2
41682: ARRAY
41683: PUSH
41684: LD_INT 1
41686: ARRAY
41687: PPUSH
41688: LD_EXP 25
41692: PUSH
41693: LD_INT 1
41695: ARRAY
41696: PPUSH
41697: LD_EXP 25
41701: PUSH
41702: LD_INT 2
41704: ARRAY
41705: PPUSH
41706: CALL 38551 0 4
41710: ST_TO_ADDR
// tmp := [ ] ;
41711: LD_ADDR_VAR 0 3
41715: PUSH
41716: EMPTY
41717: ST_TO_ADDR
// for i := 1 to 6 + waveBonus do
41718: LD_ADDR_VAR 0 4
41722: PUSH
41723: DOUBLE
41724: LD_INT 1
41726: DEC
41727: ST_TO_ADDR
41728: LD_INT 6
41730: PUSH
41731: LD_VAR 0 9
41735: PLUS
41736: PUSH
41737: FOR_TO
41738: IFFALSE 42057
// begin uc_side := enemySide ;
41740: LD_ADDR_OWVAR 20
41744: PUSH
41745: LD_VAR 0 8
41749: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
41750: LD_ADDR_OWVAR 21
41754: PUSH
41755: LD_INT 1
41757: PPUSH
41758: LD_INT 3
41760: PPUSH
41761: CALL_OW 12
41765: ST_TO_ADDR
// case uc_nation of 1 :
41766: LD_OWVAR 21
41770: PUSH
41771: LD_INT 1
41773: DOUBLE
41774: EQUAL
41775: IFTRUE 41779
41777: GO 41820
41779: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ; 2 :
41780: LD_INT 5
41782: PPUSH
41783: LD_INT 3
41785: PPUSH
41786: LD_INT 3
41788: PPUSH
41789: LD_INT 6
41791: PUSH
41792: LD_INT 7
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 1
41801: PPUSH
41802: LD_INT 2
41804: PPUSH
41805: CALL_OW 12
41809: ARRAY
41810: PPUSH
41811: LD_INT 100
41813: PPUSH
41814: CALL 6143 0 5
41818: GO 41923
41820: LD_INT 2
41822: DOUBLE
41823: EQUAL
41824: IFTRUE 41828
41826: GO 41873
41828: POP
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] , 100 ) ; 3 :
41829: LD_INT 14
41831: PPUSH
41832: LD_INT 3
41834: PPUSH
41835: LD_INT 5
41837: PPUSH
41838: LD_INT 27
41840: PUSH
41841: LD_INT 28
41843: PUSH
41844: LD_INT 29
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: PPUSH
41855: LD_INT 3
41857: PPUSH
41858: CALL_OW 12
41862: ARRAY
41863: PPUSH
41864: LD_INT 100
41866: PPUSH
41867: CALL 6143 0 5
41871: GO 41923
41873: LD_INT 3
41875: DOUBLE
41876: EQUAL
41877: IFTRUE 41881
41879: GO 41922
41881: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket ] [ rand ( 1 , 2 ) ] , 100 ) ; end ;
41882: LD_INT 24
41884: PPUSH
41885: LD_INT 3
41887: PPUSH
41888: LD_INT 3
41890: PPUSH
41891: LD_INT 46
41893: PUSH
41894: LD_INT 47
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: PPUSH
41904: LD_INT 2
41906: PPUSH
41907: CALL_OW 12
41911: ARRAY
41912: PPUSH
41913: LD_INT 100
41915: PPUSH
41916: CALL 6143 0 5
41920: GO 41923
41922: POP
// veh := CreateVehicle ;
41923: LD_ADDR_VAR 0 6
41927: PUSH
41928: CALL_OW 45
41932: ST_TO_ADDR
// SetDir ( veh , dir ) ;
41933: LD_VAR 0 6
41937: PPUSH
41938: LD_VAR 0 7
41942: PPUSH
41943: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
41947: LD_VAR 0 6
41951: PPUSH
41952: LD_VAR 0 2
41956: PPUSH
41957: LD_INT 0
41959: PPUSH
41960: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
41964: LD_ADDR_VAR 0 3
41968: PUSH
41969: LD_VAR 0 3
41973: PPUSH
41974: LD_VAR 0 3
41978: PUSH
41979: LD_INT 1
41981: PLUS
41982: PPUSH
41983: LD_VAR 0 6
41987: PPUSH
41988: CALL_OW 1
41992: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) = 0 then
41993: LD_VAR 0 5
41997: PUSH
41998: LD_INT 1
42000: ARRAY
42001: PPUSH
42002: LD_VAR 0 5
42006: PUSH
42007: LD_INT 2
42009: ARRAY
42010: PPUSH
42011: CALL_OW 428
42015: PUSH
42016: LD_INT 0
42018: EQUAL
42019: IFFALSE 42048
// ComMoveXY ( veh , xy [ 1 ] , xy [ 2 ] ) ;
42021: LD_VAR 0 6
42025: PPUSH
42026: LD_VAR 0 5
42030: PUSH
42031: LD_INT 1
42033: ARRAY
42034: PPUSH
42035: LD_VAR 0 5
42039: PUSH
42040: LD_INT 2
42042: ARRAY
42043: PPUSH
42044: CALL_OW 111
// wait ( 0 0$0.5 ) ;
42048: LD_INT 18
42050: PPUSH
42051: CALL_OW 67
// end ;
42055: GO 41737
42057: POP
42058: POP
// if tmp then
42059: LD_VAR 0 3
42063: IFFALSE 42190
// begin repeat wait ( 0 0$2 ) ;
42065: LD_INT 70
42067: PPUSH
42068: CALL_OW 67
// for i in tmp do
42072: LD_ADDR_VAR 0 4
42076: PUSH
42077: LD_VAR 0 3
42081: PUSH
42082: FOR_IN
42083: IFFALSE 42181
// begin if IsDead ( i ) or not IsPlaced ( i ) or GetSide ( i ) <> enemySide then
42085: LD_VAR 0 4
42089: PPUSH
42090: CALL_OW 301
42094: PUSH
42095: LD_VAR 0 4
42099: PPUSH
42100: CALL_OW 305
42104: NOT
42105: OR
42106: PUSH
42107: LD_VAR 0 4
42111: PPUSH
42112: CALL_OW 255
42116: PUSH
42117: LD_VAR 0 8
42121: NONEQUAL
42122: OR
42123: IFFALSE 42143
// tmp := tmp diff i else
42125: LD_ADDR_VAR 0 3
42129: PUSH
42130: LD_VAR 0 3
42134: PUSH
42135: LD_VAR 0 4
42139: DIFF
42140: ST_TO_ADDR
42141: GO 42179
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , ecoSide ] ) , i ) ) ;
42143: LD_VAR 0 4
42147: PPUSH
42148: LD_INT 22
42150: PUSH
42151: LD_EXP 22
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PPUSH
42160: CALL_OW 69
42164: PPUSH
42165: LD_VAR 0 4
42169: PPUSH
42170: CALL_OW 74
42174: PPUSH
42175: CALL_OW 115
// end ;
42179: GO 42082
42181: POP
42182: POP
// until not tmp ;
42183: LD_VAR 0 3
42187: NOT
42188: IFFALSE 42065
// end ; end ;
42190: GO 41507
// end ;
42192: PPOPN 9
42194: END
// every 0 0$1 trigger ecoEventsAllow do var time , xy ;
42195: LD_EXP 30
42199: IFFALSE 42252
42201: GO 42203
42203: DISABLE
42204: LD_INT 0
42206: PPUSH
42207: PPUSH
// begin time := rand ( 1 1$00 , 10 10$00 ) ;
42208: LD_ADDR_VAR 0 1
42212: PUSH
42213: LD_INT 2100
42215: PPUSH
42216: LD_INT 21000
42218: PPUSH
42219: CALL_OW 12
42223: ST_TO_ADDR
// while true do
42224: LD_INT 1
42226: IFFALSE 42252
// begin wait ( time ) ;
42228: LD_VAR 0 1
42232: PPUSH
42233: CALL_OW 67
// if not ecoEventsAllow then
42237: LD_EXP 30
42241: NOT
42242: IFFALSE 42246
// continue ;
42244: GO 42224
// EcoEvent ( ) ;
42246: CALL 42255 0 0
// end ;
42250: GO 42224
// end ;
42252: PPOPN 2
42254: END
// export function EcoEvent ( ) ; var event , tmp , i ; begin
42255: LD_INT 0
42257: PPUSH
42258: PPUSH
42259: PPUSH
42260: PPUSH
// event := rand ( 1 , 5 ) ;
42261: LD_ADDR_VAR 0 2
42265: PUSH
42266: LD_INT 1
42268: PPUSH
42269: LD_INT 5
42271: PPUSH
42272: CALL_OW 12
42276: ST_TO_ADDR
// case event of 1 :
42277: LD_VAR 0 2
42281: PUSH
42282: LD_INT 1
42284: DOUBLE
42285: EQUAL
42286: IFTRUE 42290
42288: GO 42376
42290: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_building ] ) diff FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
42291: LD_ADDR_VAR 0 3
42295: PUSH
42296: LD_INT 21
42298: PUSH
42299: LD_INT 3
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PPUSH
42306: CALL_OW 69
42310: PUSH
42311: LD_INT 2
42313: PUSH
42314: LD_INT 30
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 30
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: LIST
42338: PPUSH
42339: CALL_OW 69
42343: DIFF
42344: ST_TO_ADDR
// if tmp then
42345: LD_VAR 0 3
42349: IFFALSE 42374
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
42351: LD_VAR 0 3
42355: PUSH
42356: LD_INT 1
42358: PPUSH
42359: LD_VAR 0 3
42363: PPUSH
42364: CALL_OW 12
42368: ARRAY
42369: PPUSH
42370: CALL_OW 65
// end ; 2 :
42374: GO 42575
42376: LD_INT 2
42378: DOUBLE
42379: EQUAL
42380: IFTRUE 42384
42382: GO 42440
42384: POP
// begin uc_side := ecoSide ;
42385: LD_ADDR_OWVAR 20
42389: PUSH
42390: LD_EXP 22
42394: ST_TO_ADDR
// uc_nation := ecoNation ;
42395: LD_ADDR_OWVAR 21
42399: PUSH
42400: LD_EXP 23
42404: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 8 ) ;
42405: LD_INT 0
42407: PPUSH
42408: LD_INT 1
42410: PPUSH
42411: LD_INT 4
42413: PPUSH
42414: CALL_OW 12
42418: PPUSH
42419: LD_INT 8
42421: PPUSH
42422: CALL_OW 380
// PlaceUnitAnyWhere ( CreateHuman , true ) ;
42426: CALL_OW 44
42430: PPUSH
42431: LD_INT 1
42433: PPUSH
42434: CALL_OW 51
// end ; 3 :
42438: GO 42575
42440: LD_INT 3
42442: DOUBLE
42443: EQUAL
42444: IFTRUE 42448
42446: GO 42500
42448: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_vehicle ] ) ;
42449: LD_ADDR_VAR 0 3
42453: PUSH
42454: LD_INT 21
42456: PUSH
42457: LD_INT 2
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PPUSH
42464: CALL_OW 69
42468: ST_TO_ADDR
// if tmp then
42469: LD_VAR 0 3
42473: IFFALSE 42498
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
42475: LD_VAR 0 3
42479: PUSH
42480: LD_INT 1
42482: PPUSH
42483: LD_VAR 0 3
42487: PPUSH
42488: CALL_OW 12
42492: ARRAY
42493: PPUSH
42494: CALL_OW 65
// end ; 4 :
42498: GO 42575
42500: LD_INT 4
42502: DOUBLE
42503: EQUAL
42504: IFTRUE 42508
42506: GO 42563
42508: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_human ] ) ;
42509: LD_ADDR_VAR 0 3
42513: PUSH
42514: LD_INT 21
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PPUSH
42524: CALL_OW 69
42528: ST_TO_ADDR
// if tmp then
42529: LD_VAR 0 3
42533: IFFALSE 42561
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 190 ) ;
42535: LD_VAR 0 3
42539: PUSH
42540: LD_INT 1
42542: PPUSH
42543: LD_VAR 0 3
42547: PPUSH
42548: CALL_OW 12
42552: ARRAY
42553: PPUSH
42554: LD_INT 190
42556: PPUSH
42557: CALL_OW 234
// end ; 5 :
42561: GO 42575
42563: LD_INT 5
42565: DOUBLE
42566: EQUAL
42567: IFTRUE 42571
42569: GO 42574
42571: POP
// begin end ; end ;
42572: GO 42575
42574: POP
// end ;
42575: LD_VAR 0 1
42579: RET
// export function EcoEnableAllTechs ( ) ; var i ; begin
42580: LD_INT 0
42582: PPUSH
42583: PPUSH
// for i := 1 to 100 do
42584: LD_ADDR_VAR 0 2
42588: PUSH
42589: DOUBLE
42590: LD_INT 1
42592: DEC
42593: ST_TO_ADDR
42594: LD_INT 100
42596: PUSH
42597: FOR_TO
42598: IFFALSE 42619
// SetTech ( i , ecoSide , state_researched ) ;
42600: LD_VAR 0 2
42604: PPUSH
42605: LD_EXP 22
42609: PPUSH
42610: LD_INT 2
42612: PPUSH
42613: CALL_OW 322
42617: GO 42597
42619: POP
42620: POP
// end ;
42621: LD_VAR 0 1
42625: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
42626: LD_VAR 0 2
42630: PUSH
42631: LD_INT 102
42633: EQUAL
42634: IFFALSE 42826
// begin case p3 of 1 :
42636: LD_VAR 0 3
42640: PUSH
42641: LD_INT 1
42643: DOUBLE
42644: EQUAL
42645: IFTRUE 42649
42647: GO 42667
42649: POP
// ecoEventsAllow := Negate ( ecoEventsAllow ) ; 2 :
42650: LD_ADDR_EXP 30
42654: PUSH
42655: LD_EXP 30
42659: PPUSH
42660: CALL 39350 0 1
42664: ST_TO_ADDR
42665: GO 42824
42667: LD_INT 2
42669: DOUBLE
42670: EQUAL
42671: IFTRUE 42675
42673: GO 42693
42675: POP
// ecoAttacksAllow := Negate ( ecoAttacksAllow ) ; 3 :
42676: LD_ADDR_EXP 29
42680: PUSH
42681: LD_EXP 29
42685: PPUSH
42686: CALL 39350 0 1
42690: ST_TO_ADDR
42691: GO 42824
42693: LD_INT 3
42695: DOUBLE
42696: EQUAL
42697: IFTRUE 42701
42699: GO 42719
42701: POP
// ecoCratesDropAllow := Negate ( ecoCratesDropAllow ) ; 4 :
42702: LD_ADDR_EXP 28
42706: PUSH
42707: LD_EXP 28
42711: PPUSH
42712: CALL 39350 0 1
42716: ST_TO_ADDR
42717: GO 42824
42719: LD_INT 4
42721: DOUBLE
42722: EQUAL
42723: IFTRUE 42727
42725: GO 42734
42727: POP
// EcoEnableAllTechs ( ) ; 5 .. 8 :
42728: CALL 42580 0 0
42732: GO 42824
42734: LD_INT 5
42736: DOUBLE
42737: GREATEREQUAL
42738: IFFALSE 42746
42740: LD_INT 8
42742: DOUBLE
42743: LESSEQUAL
42744: IFTRUE 42748
42746: GO 42823
42748: POP
// begin uc_side := ecoSide ;
42749: LD_ADDR_OWVAR 20
42753: PUSH
42754: LD_EXP 22
42758: ST_TO_ADDR
// uc_nation := ecoNation ;
42759: LD_ADDR_OWVAR 21
42763: PUSH
42764: LD_EXP 23
42768: ST_TO_ADDR
// PrepareHuman ( false , p3 - 4 , 4 ) ;
42769: LD_INT 0
42771: PPUSH
42772: LD_VAR 0 3
42776: PUSH
42777: LD_INT 4
42779: MINUS
42780: PPUSH
42781: LD_INT 4
42783: PPUSH
42784: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , true ) ;
42788: CALL_OW 44
42792: PPUSH
42793: LD_EXP 25
42797: PUSH
42798: LD_INT 1
42800: ARRAY
42801: PPUSH
42802: LD_EXP 25
42806: PUSH
42807: LD_INT 2
42809: ARRAY
42810: PPUSH
42811: LD_INT 12
42813: PPUSH
42814: LD_INT 1
42816: PPUSH
42817: CALL_OW 50
// end ; end ;
42821: GO 42824
42823: POP
// end else
42824: GO 42860
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
42826: LD_VAR 0 1
42830: PPUSH
42831: LD_VAR 0 2
42835: PPUSH
42836: LD_VAR 0 3
42840: PPUSH
42841: LD_VAR 0 4
42845: PPUSH
42846: LD_VAR 0 5
42850: PPUSH
42851: LD_VAR 0 6
42855: PPUSH
42856: CALL 42863 0 6
// end ; end_of_file
42860: PPOPN 6
42862: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42863: LD_INT 0
42865: PPUSH
// if p2 = 100 then
42866: LD_VAR 0 2
42870: PUSH
42871: LD_INT 100
42873: EQUAL
42874: IFFALSE 43823
// begin if not StreamModeActive then
42876: LD_EXP 33
42880: NOT
42881: IFFALSE 42891
// StreamModeActive := true ;
42883: LD_ADDR_EXP 33
42887: PUSH
42888: LD_INT 1
42890: ST_TO_ADDR
// if p3 = 0 then
42891: LD_VAR 0 3
42895: PUSH
42896: LD_INT 0
42898: EQUAL
42899: IFFALSE 42905
// InitStreamMode ;
42901: CALL 43983 0 0
// if p3 = 1 then
42905: LD_VAR 0 3
42909: PUSH
42910: LD_INT 1
42912: EQUAL
42913: IFFALSE 42923
// sRocket := true ;
42915: LD_ADDR_EXP 38
42919: PUSH
42920: LD_INT 1
42922: ST_TO_ADDR
// if p3 = 2 then
42923: LD_VAR 0 3
42927: PUSH
42928: LD_INT 2
42930: EQUAL
42931: IFFALSE 42941
// sSpeed := true ;
42933: LD_ADDR_EXP 37
42937: PUSH
42938: LD_INT 1
42940: ST_TO_ADDR
// if p3 = 3 then
42941: LD_VAR 0 3
42945: PUSH
42946: LD_INT 3
42948: EQUAL
42949: IFFALSE 42959
// sEngine := true ;
42951: LD_ADDR_EXP 39
42955: PUSH
42956: LD_INT 1
42958: ST_TO_ADDR
// if p3 = 4 then
42959: LD_VAR 0 3
42963: PUSH
42964: LD_INT 4
42966: EQUAL
42967: IFFALSE 42977
// sSpec := true ;
42969: LD_ADDR_EXP 36
42973: PUSH
42974: LD_INT 1
42976: ST_TO_ADDR
// if p3 = 5 then
42977: LD_VAR 0 3
42981: PUSH
42982: LD_INT 5
42984: EQUAL
42985: IFFALSE 42995
// sLevel := true ;
42987: LD_ADDR_EXP 40
42991: PUSH
42992: LD_INT 1
42994: ST_TO_ADDR
// if p3 = 6 then
42995: LD_VAR 0 3
42999: PUSH
43000: LD_INT 6
43002: EQUAL
43003: IFFALSE 43013
// sArmoury := true ;
43005: LD_ADDR_EXP 41
43009: PUSH
43010: LD_INT 1
43012: ST_TO_ADDR
// if p3 = 7 then
43013: LD_VAR 0 3
43017: PUSH
43018: LD_INT 7
43020: EQUAL
43021: IFFALSE 43031
// sRadar := true ;
43023: LD_ADDR_EXP 42
43027: PUSH
43028: LD_INT 1
43030: ST_TO_ADDR
// if p3 = 8 then
43031: LD_VAR 0 3
43035: PUSH
43036: LD_INT 8
43038: EQUAL
43039: IFFALSE 43049
// sBunker := true ;
43041: LD_ADDR_EXP 43
43045: PUSH
43046: LD_INT 1
43048: ST_TO_ADDR
// if p3 = 9 then
43049: LD_VAR 0 3
43053: PUSH
43054: LD_INT 9
43056: EQUAL
43057: IFFALSE 43067
// sHack := true ;
43059: LD_ADDR_EXP 44
43063: PUSH
43064: LD_INT 1
43066: ST_TO_ADDR
// if p3 = 10 then
43067: LD_VAR 0 3
43071: PUSH
43072: LD_INT 10
43074: EQUAL
43075: IFFALSE 43085
// sFire := true ;
43077: LD_ADDR_EXP 45
43081: PUSH
43082: LD_INT 1
43084: ST_TO_ADDR
// if p3 = 11 then
43085: LD_VAR 0 3
43089: PUSH
43090: LD_INT 11
43092: EQUAL
43093: IFFALSE 43103
// sRefresh := true ;
43095: LD_ADDR_EXP 46
43099: PUSH
43100: LD_INT 1
43102: ST_TO_ADDR
// if p3 = 12 then
43103: LD_VAR 0 3
43107: PUSH
43108: LD_INT 12
43110: EQUAL
43111: IFFALSE 43121
// sExp := true ;
43113: LD_ADDR_EXP 47
43117: PUSH
43118: LD_INT 1
43120: ST_TO_ADDR
// if p3 = 13 then
43121: LD_VAR 0 3
43125: PUSH
43126: LD_INT 13
43128: EQUAL
43129: IFFALSE 43139
// sDepot := true ;
43131: LD_ADDR_EXP 48
43135: PUSH
43136: LD_INT 1
43138: ST_TO_ADDR
// if p3 = 14 then
43139: LD_VAR 0 3
43143: PUSH
43144: LD_INT 14
43146: EQUAL
43147: IFFALSE 43157
// sFlag := true ;
43149: LD_ADDR_EXP 49
43153: PUSH
43154: LD_INT 1
43156: ST_TO_ADDR
// if p3 = 15 then
43157: LD_VAR 0 3
43161: PUSH
43162: LD_INT 15
43164: EQUAL
43165: IFFALSE 43175
// sKamikadze := true ;
43167: LD_ADDR_EXP 57
43171: PUSH
43172: LD_INT 1
43174: ST_TO_ADDR
// if p3 = 16 then
43175: LD_VAR 0 3
43179: PUSH
43180: LD_INT 16
43182: EQUAL
43183: IFFALSE 43193
// sTroll := true ;
43185: LD_ADDR_EXP 58
43189: PUSH
43190: LD_INT 1
43192: ST_TO_ADDR
// if p3 = 17 then
43193: LD_VAR 0 3
43197: PUSH
43198: LD_INT 17
43200: EQUAL
43201: IFFALSE 43211
// sSlow := true ;
43203: LD_ADDR_EXP 59
43207: PUSH
43208: LD_INT 1
43210: ST_TO_ADDR
// if p3 = 18 then
43211: LD_VAR 0 3
43215: PUSH
43216: LD_INT 18
43218: EQUAL
43219: IFFALSE 43229
// sLack := true ;
43221: LD_ADDR_EXP 60
43225: PUSH
43226: LD_INT 1
43228: ST_TO_ADDR
// if p3 = 19 then
43229: LD_VAR 0 3
43233: PUSH
43234: LD_INT 19
43236: EQUAL
43237: IFFALSE 43247
// sTank := true ;
43239: LD_ADDR_EXP 62
43243: PUSH
43244: LD_INT 1
43246: ST_TO_ADDR
// if p3 = 20 then
43247: LD_VAR 0 3
43251: PUSH
43252: LD_INT 20
43254: EQUAL
43255: IFFALSE 43265
// sRemote := true ;
43257: LD_ADDR_EXP 63
43261: PUSH
43262: LD_INT 1
43264: ST_TO_ADDR
// if p3 = 21 then
43265: LD_VAR 0 3
43269: PUSH
43270: LD_INT 21
43272: EQUAL
43273: IFFALSE 43283
// sPowell := true ;
43275: LD_ADDR_EXP 64
43279: PUSH
43280: LD_INT 1
43282: ST_TO_ADDR
// if p3 = 22 then
43283: LD_VAR 0 3
43287: PUSH
43288: LD_INT 22
43290: EQUAL
43291: IFFALSE 43301
// sTeleport := true ;
43293: LD_ADDR_EXP 67
43297: PUSH
43298: LD_INT 1
43300: ST_TO_ADDR
// if p3 = 23 then
43301: LD_VAR 0 3
43305: PUSH
43306: LD_INT 23
43308: EQUAL
43309: IFFALSE 43319
// sOilTower := true ;
43311: LD_ADDR_EXP 69
43315: PUSH
43316: LD_INT 1
43318: ST_TO_ADDR
// if p3 = 24 then
43319: LD_VAR 0 3
43323: PUSH
43324: LD_INT 24
43326: EQUAL
43327: IFFALSE 43337
// sShovel := true ;
43329: LD_ADDR_EXP 70
43333: PUSH
43334: LD_INT 1
43336: ST_TO_ADDR
// if p3 = 25 then
43337: LD_VAR 0 3
43341: PUSH
43342: LD_INT 25
43344: EQUAL
43345: IFFALSE 43355
// sSheik := true ;
43347: LD_ADDR_EXP 71
43351: PUSH
43352: LD_INT 1
43354: ST_TO_ADDR
// if p3 = 26 then
43355: LD_VAR 0 3
43359: PUSH
43360: LD_INT 26
43362: EQUAL
43363: IFFALSE 43373
// sEarthquake := true ;
43365: LD_ADDR_EXP 73
43369: PUSH
43370: LD_INT 1
43372: ST_TO_ADDR
// if p3 = 27 then
43373: LD_VAR 0 3
43377: PUSH
43378: LD_INT 27
43380: EQUAL
43381: IFFALSE 43391
// sAI := true ;
43383: LD_ADDR_EXP 74
43387: PUSH
43388: LD_INT 1
43390: ST_TO_ADDR
// if p3 = 28 then
43391: LD_VAR 0 3
43395: PUSH
43396: LD_INT 28
43398: EQUAL
43399: IFFALSE 43409
// sCargo := true ;
43401: LD_ADDR_EXP 77
43405: PUSH
43406: LD_INT 1
43408: ST_TO_ADDR
// if p3 = 29 then
43409: LD_VAR 0 3
43413: PUSH
43414: LD_INT 29
43416: EQUAL
43417: IFFALSE 43427
// sDLaser := true ;
43419: LD_ADDR_EXP 78
43423: PUSH
43424: LD_INT 1
43426: ST_TO_ADDR
// if p3 = 30 then
43427: LD_VAR 0 3
43431: PUSH
43432: LD_INT 30
43434: EQUAL
43435: IFFALSE 43445
// sExchange := true ;
43437: LD_ADDR_EXP 79
43441: PUSH
43442: LD_INT 1
43444: ST_TO_ADDR
// if p3 = 31 then
43445: LD_VAR 0 3
43449: PUSH
43450: LD_INT 31
43452: EQUAL
43453: IFFALSE 43463
// sFac := true ;
43455: LD_ADDR_EXP 80
43459: PUSH
43460: LD_INT 1
43462: ST_TO_ADDR
// if p3 = 32 then
43463: LD_VAR 0 3
43467: PUSH
43468: LD_INT 32
43470: EQUAL
43471: IFFALSE 43481
// sPower := true ;
43473: LD_ADDR_EXP 81
43477: PUSH
43478: LD_INT 1
43480: ST_TO_ADDR
// if p3 = 33 then
43481: LD_VAR 0 3
43485: PUSH
43486: LD_INT 33
43488: EQUAL
43489: IFFALSE 43499
// sRandom := true ;
43491: LD_ADDR_EXP 82
43495: PUSH
43496: LD_INT 1
43498: ST_TO_ADDR
// if p3 = 34 then
43499: LD_VAR 0 3
43503: PUSH
43504: LD_INT 34
43506: EQUAL
43507: IFFALSE 43517
// sShield := true ;
43509: LD_ADDR_EXP 83
43513: PUSH
43514: LD_INT 1
43516: ST_TO_ADDR
// if p3 = 35 then
43517: LD_VAR 0 3
43521: PUSH
43522: LD_INT 35
43524: EQUAL
43525: IFFALSE 43535
// sTime := true ;
43527: LD_ADDR_EXP 84
43531: PUSH
43532: LD_INT 1
43534: ST_TO_ADDR
// if p3 = 36 then
43535: LD_VAR 0 3
43539: PUSH
43540: LD_INT 36
43542: EQUAL
43543: IFFALSE 43553
// sTools := true ;
43545: LD_ADDR_EXP 85
43549: PUSH
43550: LD_INT 1
43552: ST_TO_ADDR
// if p3 = 101 then
43553: LD_VAR 0 3
43557: PUSH
43558: LD_INT 101
43560: EQUAL
43561: IFFALSE 43571
// sSold := true ;
43563: LD_ADDR_EXP 50
43567: PUSH
43568: LD_INT 1
43570: ST_TO_ADDR
// if p3 = 102 then
43571: LD_VAR 0 3
43575: PUSH
43576: LD_INT 102
43578: EQUAL
43579: IFFALSE 43589
// sDiff := true ;
43581: LD_ADDR_EXP 51
43585: PUSH
43586: LD_INT 1
43588: ST_TO_ADDR
// if p3 = 103 then
43589: LD_VAR 0 3
43593: PUSH
43594: LD_INT 103
43596: EQUAL
43597: IFFALSE 43607
// sFog := true ;
43599: LD_ADDR_EXP 54
43603: PUSH
43604: LD_INT 1
43606: ST_TO_ADDR
// if p3 = 104 then
43607: LD_VAR 0 3
43611: PUSH
43612: LD_INT 104
43614: EQUAL
43615: IFFALSE 43625
// sReset := true ;
43617: LD_ADDR_EXP 55
43621: PUSH
43622: LD_INT 1
43624: ST_TO_ADDR
// if p3 = 105 then
43625: LD_VAR 0 3
43629: PUSH
43630: LD_INT 105
43632: EQUAL
43633: IFFALSE 43643
// sSun := true ;
43635: LD_ADDR_EXP 56
43639: PUSH
43640: LD_INT 1
43642: ST_TO_ADDR
// if p3 = 106 then
43643: LD_VAR 0 3
43647: PUSH
43648: LD_INT 106
43650: EQUAL
43651: IFFALSE 43661
// sTiger := true ;
43653: LD_ADDR_EXP 52
43657: PUSH
43658: LD_INT 1
43660: ST_TO_ADDR
// if p3 = 107 then
43661: LD_VAR 0 3
43665: PUSH
43666: LD_INT 107
43668: EQUAL
43669: IFFALSE 43679
// sBomb := true ;
43671: LD_ADDR_EXP 53
43675: PUSH
43676: LD_INT 1
43678: ST_TO_ADDR
// if p3 = 108 then
43679: LD_VAR 0 3
43683: PUSH
43684: LD_INT 108
43686: EQUAL
43687: IFFALSE 43697
// sWound := true ;
43689: LD_ADDR_EXP 61
43693: PUSH
43694: LD_INT 1
43696: ST_TO_ADDR
// if p3 = 109 then
43697: LD_VAR 0 3
43701: PUSH
43702: LD_INT 109
43704: EQUAL
43705: IFFALSE 43715
// sBetray := true ;
43707: LD_ADDR_EXP 65
43711: PUSH
43712: LD_INT 1
43714: ST_TO_ADDR
// if p3 = 110 then
43715: LD_VAR 0 3
43719: PUSH
43720: LD_INT 110
43722: EQUAL
43723: IFFALSE 43733
// sContamin := true ;
43725: LD_ADDR_EXP 66
43729: PUSH
43730: LD_INT 1
43732: ST_TO_ADDR
// if p3 = 111 then
43733: LD_VAR 0 3
43737: PUSH
43738: LD_INT 111
43740: EQUAL
43741: IFFALSE 43751
// sOil := true ;
43743: LD_ADDR_EXP 68
43747: PUSH
43748: LD_INT 1
43750: ST_TO_ADDR
// if p3 = 112 then
43751: LD_VAR 0 3
43755: PUSH
43756: LD_INT 112
43758: EQUAL
43759: IFFALSE 43769
// sStu := true ;
43761: LD_ADDR_EXP 72
43765: PUSH
43766: LD_INT 1
43768: ST_TO_ADDR
// if p3 = 113 then
43769: LD_VAR 0 3
43773: PUSH
43774: LD_INT 113
43776: EQUAL
43777: IFFALSE 43787
// sBazooka := true ;
43779: LD_ADDR_EXP 75
43783: PUSH
43784: LD_INT 1
43786: ST_TO_ADDR
// if p3 = 114 then
43787: LD_VAR 0 3
43791: PUSH
43792: LD_INT 114
43794: EQUAL
43795: IFFALSE 43805
// sMortar := true ;
43797: LD_ADDR_EXP 76
43801: PUSH
43802: LD_INT 1
43804: ST_TO_ADDR
// if p3 = 115 then
43805: LD_VAR 0 3
43809: PUSH
43810: LD_INT 115
43812: EQUAL
43813: IFFALSE 43823
// sRanger := true ;
43815: LD_ADDR_EXP 86
43819: PUSH
43820: LD_INT 1
43822: ST_TO_ADDR
// end ; if p2 = 101 then
43823: LD_VAR 0 2
43827: PUSH
43828: LD_INT 101
43830: EQUAL
43831: IFFALSE 43959
// begin case p3 of 1 :
43833: LD_VAR 0 3
43837: PUSH
43838: LD_INT 1
43840: DOUBLE
43841: EQUAL
43842: IFTRUE 43846
43844: GO 43853
43846: POP
// hHackUnlimitedResources ; 2 :
43847: CALL 54996 0 0
43851: GO 43959
43853: LD_INT 2
43855: DOUBLE
43856: EQUAL
43857: IFTRUE 43861
43859: GO 43868
43861: POP
// hHackSetLevel10 ; 3 :
43862: CALL 55129 0 0
43866: GO 43959
43868: LD_INT 3
43870: DOUBLE
43871: EQUAL
43872: IFTRUE 43876
43874: GO 43883
43876: POP
// hHackSetLevel10YourUnits ; 4 :
43877: CALL 55214 0 0
43881: GO 43959
43883: LD_INT 4
43885: DOUBLE
43886: EQUAL
43887: IFTRUE 43891
43889: GO 43898
43891: POP
// hHackInvincible ; 5 :
43892: CALL 55662 0 0
43896: GO 43959
43898: LD_INT 5
43900: DOUBLE
43901: EQUAL
43902: IFTRUE 43906
43904: GO 43913
43906: POP
// hHackInvisible ; 6 :
43907: CALL 55773 0 0
43911: GO 43959
43913: LD_INT 6
43915: DOUBLE
43916: EQUAL
43917: IFTRUE 43921
43919: GO 43928
43921: POP
// hHackChangeYourSide ; 7 :
43922: CALL 55830 0 0
43926: GO 43959
43928: LD_INT 7
43930: DOUBLE
43931: EQUAL
43932: IFTRUE 43936
43934: GO 43943
43936: POP
// hHackChangeUnitSide ; 8 :
43937: CALL 55872 0 0
43941: GO 43959
43943: LD_INT 8
43945: DOUBLE
43946: EQUAL
43947: IFTRUE 43951
43949: GO 43958
43951: POP
// hHackFog ; end ;
43952: CALL 55973 0 0
43956: GO 43959
43958: POP
// end ; end ;
43959: LD_VAR 0 7
43963: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
43964: GO 43966
43966: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
43967: LD_STRING initStreamRollete();
43969: PPUSH
43970: CALL_OW 559
// InitStreamMode ;
43974: CALL 43983 0 0
// DefineStreamItems ( ) ;
43978: CALL 44423 0 0
// end ;
43982: END
// function InitStreamMode ; begin
43983: LD_INT 0
43985: PPUSH
// streamModeActive := false ;
43986: LD_ADDR_EXP 33
43990: PUSH
43991: LD_INT 0
43993: ST_TO_ADDR
// normalCounter := 36 ;
43994: LD_ADDR_EXP 34
43998: PUSH
43999: LD_INT 36
44001: ST_TO_ADDR
// hardcoreCounter := 16 ;
44002: LD_ADDR_EXP 35
44006: PUSH
44007: LD_INT 16
44009: ST_TO_ADDR
// sRocket := false ;
44010: LD_ADDR_EXP 38
44014: PUSH
44015: LD_INT 0
44017: ST_TO_ADDR
// sSpeed := false ;
44018: LD_ADDR_EXP 37
44022: PUSH
44023: LD_INT 0
44025: ST_TO_ADDR
// sEngine := false ;
44026: LD_ADDR_EXP 39
44030: PUSH
44031: LD_INT 0
44033: ST_TO_ADDR
// sSpec := false ;
44034: LD_ADDR_EXP 36
44038: PUSH
44039: LD_INT 0
44041: ST_TO_ADDR
// sLevel := false ;
44042: LD_ADDR_EXP 40
44046: PUSH
44047: LD_INT 0
44049: ST_TO_ADDR
// sArmoury := false ;
44050: LD_ADDR_EXP 41
44054: PUSH
44055: LD_INT 0
44057: ST_TO_ADDR
// sRadar := false ;
44058: LD_ADDR_EXP 42
44062: PUSH
44063: LD_INT 0
44065: ST_TO_ADDR
// sBunker := false ;
44066: LD_ADDR_EXP 43
44070: PUSH
44071: LD_INT 0
44073: ST_TO_ADDR
// sHack := false ;
44074: LD_ADDR_EXP 44
44078: PUSH
44079: LD_INT 0
44081: ST_TO_ADDR
// sFire := false ;
44082: LD_ADDR_EXP 45
44086: PUSH
44087: LD_INT 0
44089: ST_TO_ADDR
// sRefresh := false ;
44090: LD_ADDR_EXP 46
44094: PUSH
44095: LD_INT 0
44097: ST_TO_ADDR
// sExp := false ;
44098: LD_ADDR_EXP 47
44102: PUSH
44103: LD_INT 0
44105: ST_TO_ADDR
// sDepot := false ;
44106: LD_ADDR_EXP 48
44110: PUSH
44111: LD_INT 0
44113: ST_TO_ADDR
// sFlag := false ;
44114: LD_ADDR_EXP 49
44118: PUSH
44119: LD_INT 0
44121: ST_TO_ADDR
// sKamikadze := false ;
44122: LD_ADDR_EXP 57
44126: PUSH
44127: LD_INT 0
44129: ST_TO_ADDR
// sTroll := false ;
44130: LD_ADDR_EXP 58
44134: PUSH
44135: LD_INT 0
44137: ST_TO_ADDR
// sSlow := false ;
44138: LD_ADDR_EXP 59
44142: PUSH
44143: LD_INT 0
44145: ST_TO_ADDR
// sLack := false ;
44146: LD_ADDR_EXP 60
44150: PUSH
44151: LD_INT 0
44153: ST_TO_ADDR
// sTank := false ;
44154: LD_ADDR_EXP 62
44158: PUSH
44159: LD_INT 0
44161: ST_TO_ADDR
// sRemote := false ;
44162: LD_ADDR_EXP 63
44166: PUSH
44167: LD_INT 0
44169: ST_TO_ADDR
// sPowell := false ;
44170: LD_ADDR_EXP 64
44174: PUSH
44175: LD_INT 0
44177: ST_TO_ADDR
// sTeleport := false ;
44178: LD_ADDR_EXP 67
44182: PUSH
44183: LD_INT 0
44185: ST_TO_ADDR
// sOilTower := false ;
44186: LD_ADDR_EXP 69
44190: PUSH
44191: LD_INT 0
44193: ST_TO_ADDR
// sShovel := false ;
44194: LD_ADDR_EXP 70
44198: PUSH
44199: LD_INT 0
44201: ST_TO_ADDR
// sSheik := false ;
44202: LD_ADDR_EXP 71
44206: PUSH
44207: LD_INT 0
44209: ST_TO_ADDR
// sEarthquake := false ;
44210: LD_ADDR_EXP 73
44214: PUSH
44215: LD_INT 0
44217: ST_TO_ADDR
// sAI := false ;
44218: LD_ADDR_EXP 74
44222: PUSH
44223: LD_INT 0
44225: ST_TO_ADDR
// sCargo := false ;
44226: LD_ADDR_EXP 77
44230: PUSH
44231: LD_INT 0
44233: ST_TO_ADDR
// sDLaser := false ;
44234: LD_ADDR_EXP 78
44238: PUSH
44239: LD_INT 0
44241: ST_TO_ADDR
// sExchange := false ;
44242: LD_ADDR_EXP 79
44246: PUSH
44247: LD_INT 0
44249: ST_TO_ADDR
// sFac := false ;
44250: LD_ADDR_EXP 80
44254: PUSH
44255: LD_INT 0
44257: ST_TO_ADDR
// sPower := false ;
44258: LD_ADDR_EXP 81
44262: PUSH
44263: LD_INT 0
44265: ST_TO_ADDR
// sRandom := false ;
44266: LD_ADDR_EXP 82
44270: PUSH
44271: LD_INT 0
44273: ST_TO_ADDR
// sShield := false ;
44274: LD_ADDR_EXP 83
44278: PUSH
44279: LD_INT 0
44281: ST_TO_ADDR
// sTime := false ;
44282: LD_ADDR_EXP 84
44286: PUSH
44287: LD_INT 0
44289: ST_TO_ADDR
// sTools := false ;
44290: LD_ADDR_EXP 85
44294: PUSH
44295: LD_INT 0
44297: ST_TO_ADDR
// sSold := false ;
44298: LD_ADDR_EXP 50
44302: PUSH
44303: LD_INT 0
44305: ST_TO_ADDR
// sDiff := false ;
44306: LD_ADDR_EXP 51
44310: PUSH
44311: LD_INT 0
44313: ST_TO_ADDR
// sFog := false ;
44314: LD_ADDR_EXP 54
44318: PUSH
44319: LD_INT 0
44321: ST_TO_ADDR
// sReset := false ;
44322: LD_ADDR_EXP 55
44326: PUSH
44327: LD_INT 0
44329: ST_TO_ADDR
// sSun := false ;
44330: LD_ADDR_EXP 56
44334: PUSH
44335: LD_INT 0
44337: ST_TO_ADDR
// sTiger := false ;
44338: LD_ADDR_EXP 52
44342: PUSH
44343: LD_INT 0
44345: ST_TO_ADDR
// sBomb := false ;
44346: LD_ADDR_EXP 53
44350: PUSH
44351: LD_INT 0
44353: ST_TO_ADDR
// sWound := false ;
44354: LD_ADDR_EXP 61
44358: PUSH
44359: LD_INT 0
44361: ST_TO_ADDR
// sBetray := false ;
44362: LD_ADDR_EXP 65
44366: PUSH
44367: LD_INT 0
44369: ST_TO_ADDR
// sContamin := false ;
44370: LD_ADDR_EXP 66
44374: PUSH
44375: LD_INT 0
44377: ST_TO_ADDR
// sOil := false ;
44378: LD_ADDR_EXP 68
44382: PUSH
44383: LD_INT 0
44385: ST_TO_ADDR
// sStu := false ;
44386: LD_ADDR_EXP 72
44390: PUSH
44391: LD_INT 0
44393: ST_TO_ADDR
// sBazooka := false ;
44394: LD_ADDR_EXP 75
44398: PUSH
44399: LD_INT 0
44401: ST_TO_ADDR
// sMortar := false ;
44402: LD_ADDR_EXP 76
44406: PUSH
44407: LD_INT 0
44409: ST_TO_ADDR
// sRanger := false ;
44410: LD_ADDR_EXP 86
44414: PUSH
44415: LD_INT 0
44417: ST_TO_ADDR
// end ;
44418: LD_VAR 0 1
44422: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
44423: LD_INT 0
44425: PPUSH
44426: PPUSH
44427: PPUSH
44428: PPUSH
44429: PPUSH
// result := [ ] ;
44430: LD_ADDR_VAR 0 1
44434: PUSH
44435: EMPTY
44436: ST_TO_ADDR
// if campaign_id = 1 then
44437: LD_OWVAR 69
44441: PUSH
44442: LD_INT 1
44444: EQUAL
44445: IFFALSE 47383
// begin case mission_number of 1 :
44447: LD_OWVAR 70
44451: PUSH
44452: LD_INT 1
44454: DOUBLE
44455: EQUAL
44456: IFTRUE 44460
44458: GO 44524
44460: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
44461: LD_ADDR_VAR 0 1
44465: PUSH
44466: LD_INT 2
44468: PUSH
44469: LD_INT 4
44471: PUSH
44472: LD_INT 11
44474: PUSH
44475: LD_INT 12
44477: PUSH
44478: LD_INT 15
44480: PUSH
44481: LD_INT 16
44483: PUSH
44484: LD_INT 22
44486: PUSH
44487: LD_INT 23
44489: PUSH
44490: LD_INT 26
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 101
44506: PUSH
44507: LD_INT 102
44509: PUSH
44510: LD_INT 106
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: LIST
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: ST_TO_ADDR
44522: GO 47381
44524: LD_INT 2
44526: DOUBLE
44527: EQUAL
44528: IFTRUE 44532
44530: GO 44604
44532: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
44533: LD_ADDR_VAR 0 1
44537: PUSH
44538: LD_INT 2
44540: PUSH
44541: LD_INT 4
44543: PUSH
44544: LD_INT 11
44546: PUSH
44547: LD_INT 12
44549: PUSH
44550: LD_INT 15
44552: PUSH
44553: LD_INT 16
44555: PUSH
44556: LD_INT 22
44558: PUSH
44559: LD_INT 23
44561: PUSH
44562: LD_INT 26
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 101
44578: PUSH
44579: LD_INT 102
44581: PUSH
44582: LD_INT 105
44584: PUSH
44585: LD_INT 106
44587: PUSH
44588: LD_INT 108
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: ST_TO_ADDR
44602: GO 47381
44604: LD_INT 3
44606: DOUBLE
44607: EQUAL
44608: IFTRUE 44612
44610: GO 44688
44612: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
44613: LD_ADDR_VAR 0 1
44617: PUSH
44618: LD_INT 2
44620: PUSH
44621: LD_INT 4
44623: PUSH
44624: LD_INT 5
44626: PUSH
44627: LD_INT 11
44629: PUSH
44630: LD_INT 12
44632: PUSH
44633: LD_INT 15
44635: PUSH
44636: LD_INT 16
44638: PUSH
44639: LD_INT 22
44641: PUSH
44642: LD_INT 26
44644: PUSH
44645: LD_INT 36
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 101
44662: PUSH
44663: LD_INT 102
44665: PUSH
44666: LD_INT 105
44668: PUSH
44669: LD_INT 106
44671: PUSH
44672: LD_INT 108
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: ST_TO_ADDR
44686: GO 47381
44688: LD_INT 4
44690: DOUBLE
44691: EQUAL
44692: IFTRUE 44696
44694: GO 44780
44696: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
44697: LD_ADDR_VAR 0 1
44701: PUSH
44702: LD_INT 2
44704: PUSH
44705: LD_INT 4
44707: PUSH
44708: LD_INT 5
44710: PUSH
44711: LD_INT 8
44713: PUSH
44714: LD_INT 11
44716: PUSH
44717: LD_INT 12
44719: PUSH
44720: LD_INT 15
44722: PUSH
44723: LD_INT 16
44725: PUSH
44726: LD_INT 22
44728: PUSH
44729: LD_INT 23
44731: PUSH
44732: LD_INT 26
44734: PUSH
44735: LD_INT 36
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 101
44754: PUSH
44755: LD_INT 102
44757: PUSH
44758: LD_INT 105
44760: PUSH
44761: LD_INT 106
44763: PUSH
44764: LD_INT 108
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: ST_TO_ADDR
44778: GO 47381
44780: LD_INT 5
44782: DOUBLE
44783: EQUAL
44784: IFTRUE 44788
44786: GO 44888
44788: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
44789: LD_ADDR_VAR 0 1
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: LD_INT 4
44799: PUSH
44800: LD_INT 5
44802: PUSH
44803: LD_INT 6
44805: PUSH
44806: LD_INT 8
44808: PUSH
44809: LD_INT 11
44811: PUSH
44812: LD_INT 12
44814: PUSH
44815: LD_INT 15
44817: PUSH
44818: LD_INT 16
44820: PUSH
44821: LD_INT 22
44823: PUSH
44824: LD_INT 23
44826: PUSH
44827: LD_INT 25
44829: PUSH
44830: LD_INT 26
44832: PUSH
44833: LD_INT 36
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 101
44854: PUSH
44855: LD_INT 102
44857: PUSH
44858: LD_INT 105
44860: PUSH
44861: LD_INT 106
44863: PUSH
44864: LD_INT 108
44866: PUSH
44867: LD_INT 109
44869: PUSH
44870: LD_INT 112
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: ST_TO_ADDR
44886: GO 47381
44888: LD_INT 6
44890: DOUBLE
44891: EQUAL
44892: IFTRUE 44896
44894: GO 45016
44896: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
44897: LD_ADDR_VAR 0 1
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 4
44907: PUSH
44908: LD_INT 5
44910: PUSH
44911: LD_INT 6
44913: PUSH
44914: LD_INT 8
44916: PUSH
44917: LD_INT 11
44919: PUSH
44920: LD_INT 12
44922: PUSH
44923: LD_INT 15
44925: PUSH
44926: LD_INT 16
44928: PUSH
44929: LD_INT 20
44931: PUSH
44932: LD_INT 21
44934: PUSH
44935: LD_INT 22
44937: PUSH
44938: LD_INT 23
44940: PUSH
44941: LD_INT 25
44943: PUSH
44944: LD_INT 26
44946: PUSH
44947: LD_INT 30
44949: PUSH
44950: LD_INT 31
44952: PUSH
44953: LD_INT 32
44955: PUSH
44956: LD_INT 36
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 101
44982: PUSH
44983: LD_INT 102
44985: PUSH
44986: LD_INT 105
44988: PUSH
44989: LD_INT 106
44991: PUSH
44992: LD_INT 108
44994: PUSH
44995: LD_INT 109
44997: PUSH
44998: LD_INT 112
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: ST_TO_ADDR
45014: GO 47381
45016: LD_INT 7
45018: DOUBLE
45019: EQUAL
45020: IFTRUE 45024
45022: GO 45124
45024: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
45025: LD_ADDR_VAR 0 1
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: LD_INT 4
45035: PUSH
45036: LD_INT 5
45038: PUSH
45039: LD_INT 7
45041: PUSH
45042: LD_INT 11
45044: PUSH
45045: LD_INT 12
45047: PUSH
45048: LD_INT 15
45050: PUSH
45051: LD_INT 16
45053: PUSH
45054: LD_INT 20
45056: PUSH
45057: LD_INT 21
45059: PUSH
45060: LD_INT 22
45062: PUSH
45063: LD_INT 23
45065: PUSH
45066: LD_INT 25
45068: PUSH
45069: LD_INT 26
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 101
45090: PUSH
45091: LD_INT 102
45093: PUSH
45094: LD_INT 103
45096: PUSH
45097: LD_INT 105
45099: PUSH
45100: LD_INT 106
45102: PUSH
45103: LD_INT 108
45105: PUSH
45106: LD_INT 112
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: ST_TO_ADDR
45122: GO 47381
45124: LD_INT 8
45126: DOUBLE
45127: EQUAL
45128: IFTRUE 45132
45130: GO 45260
45132: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
45133: LD_ADDR_VAR 0 1
45137: PUSH
45138: LD_INT 2
45140: PUSH
45141: LD_INT 4
45143: PUSH
45144: LD_INT 5
45146: PUSH
45147: LD_INT 6
45149: PUSH
45150: LD_INT 7
45152: PUSH
45153: LD_INT 8
45155: PUSH
45156: LD_INT 11
45158: PUSH
45159: LD_INT 12
45161: PUSH
45162: LD_INT 15
45164: PUSH
45165: LD_INT 16
45167: PUSH
45168: LD_INT 20
45170: PUSH
45171: LD_INT 21
45173: PUSH
45174: LD_INT 22
45176: PUSH
45177: LD_INT 23
45179: PUSH
45180: LD_INT 25
45182: PUSH
45183: LD_INT 26
45185: PUSH
45186: LD_INT 30
45188: PUSH
45189: LD_INT 31
45191: PUSH
45192: LD_INT 32
45194: PUSH
45195: LD_INT 36
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 101
45222: PUSH
45223: LD_INT 102
45225: PUSH
45226: LD_INT 103
45228: PUSH
45229: LD_INT 105
45231: PUSH
45232: LD_INT 106
45234: PUSH
45235: LD_INT 108
45237: PUSH
45238: LD_INT 109
45240: PUSH
45241: LD_INT 112
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: ST_TO_ADDR
45258: GO 47381
45260: LD_INT 9
45262: DOUBLE
45263: EQUAL
45264: IFTRUE 45268
45266: GO 45404
45268: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
45269: LD_ADDR_VAR 0 1
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: LD_INT 4
45279: PUSH
45280: LD_INT 5
45282: PUSH
45283: LD_INT 6
45285: PUSH
45286: LD_INT 7
45288: PUSH
45289: LD_INT 8
45291: PUSH
45292: LD_INT 11
45294: PUSH
45295: LD_INT 12
45297: PUSH
45298: LD_INT 15
45300: PUSH
45301: LD_INT 16
45303: PUSH
45304: LD_INT 20
45306: PUSH
45307: LD_INT 21
45309: PUSH
45310: LD_INT 22
45312: PUSH
45313: LD_INT 23
45315: PUSH
45316: LD_INT 25
45318: PUSH
45319: LD_INT 26
45321: PUSH
45322: LD_INT 28
45324: PUSH
45325: LD_INT 30
45327: PUSH
45328: LD_INT 31
45330: PUSH
45331: LD_INT 32
45333: PUSH
45334: LD_INT 36
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 101
45362: PUSH
45363: LD_INT 102
45365: PUSH
45366: LD_INT 103
45368: PUSH
45369: LD_INT 105
45371: PUSH
45372: LD_INT 106
45374: PUSH
45375: LD_INT 108
45377: PUSH
45378: LD_INT 109
45380: PUSH
45381: LD_INT 112
45383: PUSH
45384: LD_INT 114
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: ST_TO_ADDR
45402: GO 47381
45404: LD_INT 10
45406: DOUBLE
45407: EQUAL
45408: IFTRUE 45412
45410: GO 45596
45412: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
45413: LD_ADDR_VAR 0 1
45417: PUSH
45418: LD_INT 2
45420: PUSH
45421: LD_INT 4
45423: PUSH
45424: LD_INT 5
45426: PUSH
45427: LD_INT 6
45429: PUSH
45430: LD_INT 7
45432: PUSH
45433: LD_INT 8
45435: PUSH
45436: LD_INT 9
45438: PUSH
45439: LD_INT 10
45441: PUSH
45442: LD_INT 11
45444: PUSH
45445: LD_INT 12
45447: PUSH
45448: LD_INT 13
45450: PUSH
45451: LD_INT 14
45453: PUSH
45454: LD_INT 15
45456: PUSH
45457: LD_INT 16
45459: PUSH
45460: LD_INT 17
45462: PUSH
45463: LD_INT 18
45465: PUSH
45466: LD_INT 19
45468: PUSH
45469: LD_INT 20
45471: PUSH
45472: LD_INT 21
45474: PUSH
45475: LD_INT 22
45477: PUSH
45478: LD_INT 23
45480: PUSH
45481: LD_INT 24
45483: PUSH
45484: LD_INT 25
45486: PUSH
45487: LD_INT 26
45489: PUSH
45490: LD_INT 28
45492: PUSH
45493: LD_INT 30
45495: PUSH
45496: LD_INT 31
45498: PUSH
45499: LD_INT 32
45501: PUSH
45502: LD_INT 36
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 101
45538: PUSH
45539: LD_INT 102
45541: PUSH
45542: LD_INT 103
45544: PUSH
45545: LD_INT 104
45547: PUSH
45548: LD_INT 105
45550: PUSH
45551: LD_INT 106
45553: PUSH
45554: LD_INT 107
45556: PUSH
45557: LD_INT 108
45559: PUSH
45560: LD_INT 109
45562: PUSH
45563: LD_INT 110
45565: PUSH
45566: LD_INT 111
45568: PUSH
45569: LD_INT 112
45571: PUSH
45572: LD_INT 114
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: ST_TO_ADDR
45594: GO 47381
45596: LD_INT 11
45598: DOUBLE
45599: EQUAL
45600: IFTRUE 45604
45602: GO 45796
45604: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
45605: LD_ADDR_VAR 0 1
45609: PUSH
45610: LD_INT 2
45612: PUSH
45613: LD_INT 3
45615: PUSH
45616: LD_INT 4
45618: PUSH
45619: LD_INT 5
45621: PUSH
45622: LD_INT 6
45624: PUSH
45625: LD_INT 7
45627: PUSH
45628: LD_INT 8
45630: PUSH
45631: LD_INT 9
45633: PUSH
45634: LD_INT 10
45636: PUSH
45637: LD_INT 11
45639: PUSH
45640: LD_INT 12
45642: PUSH
45643: LD_INT 13
45645: PUSH
45646: LD_INT 14
45648: PUSH
45649: LD_INT 15
45651: PUSH
45652: LD_INT 16
45654: PUSH
45655: LD_INT 17
45657: PUSH
45658: LD_INT 18
45660: PUSH
45661: LD_INT 19
45663: PUSH
45664: LD_INT 20
45666: PUSH
45667: LD_INT 21
45669: PUSH
45670: LD_INT 22
45672: PUSH
45673: LD_INT 23
45675: PUSH
45676: LD_INT 24
45678: PUSH
45679: LD_INT 25
45681: PUSH
45682: LD_INT 26
45684: PUSH
45685: LD_INT 28
45687: PUSH
45688: LD_INT 30
45690: PUSH
45691: LD_INT 31
45693: PUSH
45694: LD_INT 32
45696: PUSH
45697: LD_INT 34
45699: PUSH
45700: LD_INT 36
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 101
45738: PUSH
45739: LD_INT 102
45741: PUSH
45742: LD_INT 103
45744: PUSH
45745: LD_INT 104
45747: PUSH
45748: LD_INT 105
45750: PUSH
45751: LD_INT 106
45753: PUSH
45754: LD_INT 107
45756: PUSH
45757: LD_INT 108
45759: PUSH
45760: LD_INT 109
45762: PUSH
45763: LD_INT 110
45765: PUSH
45766: LD_INT 111
45768: PUSH
45769: LD_INT 112
45771: PUSH
45772: LD_INT 114
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: ST_TO_ADDR
45794: GO 47381
45796: LD_INT 12
45798: DOUBLE
45799: EQUAL
45800: IFTRUE 45804
45802: GO 46012
45804: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
45805: LD_ADDR_VAR 0 1
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: LD_INT 2
45815: PUSH
45816: LD_INT 3
45818: PUSH
45819: LD_INT 4
45821: PUSH
45822: LD_INT 5
45824: PUSH
45825: LD_INT 6
45827: PUSH
45828: LD_INT 7
45830: PUSH
45831: LD_INT 8
45833: PUSH
45834: LD_INT 9
45836: PUSH
45837: LD_INT 10
45839: PUSH
45840: LD_INT 11
45842: PUSH
45843: LD_INT 12
45845: PUSH
45846: LD_INT 13
45848: PUSH
45849: LD_INT 14
45851: PUSH
45852: LD_INT 15
45854: PUSH
45855: LD_INT 16
45857: PUSH
45858: LD_INT 17
45860: PUSH
45861: LD_INT 18
45863: PUSH
45864: LD_INT 19
45866: PUSH
45867: LD_INT 20
45869: PUSH
45870: LD_INT 21
45872: PUSH
45873: LD_INT 22
45875: PUSH
45876: LD_INT 23
45878: PUSH
45879: LD_INT 24
45881: PUSH
45882: LD_INT 25
45884: PUSH
45885: LD_INT 26
45887: PUSH
45888: LD_INT 27
45890: PUSH
45891: LD_INT 28
45893: PUSH
45894: LD_INT 30
45896: PUSH
45897: LD_INT 31
45899: PUSH
45900: LD_INT 32
45902: PUSH
45903: LD_INT 33
45905: PUSH
45906: LD_INT 34
45908: PUSH
45909: LD_INT 36
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 101
45950: PUSH
45951: LD_INT 102
45953: PUSH
45954: LD_INT 103
45956: PUSH
45957: LD_INT 104
45959: PUSH
45960: LD_INT 105
45962: PUSH
45963: LD_INT 106
45965: PUSH
45966: LD_INT 107
45968: PUSH
45969: LD_INT 108
45971: PUSH
45972: LD_INT 109
45974: PUSH
45975: LD_INT 110
45977: PUSH
45978: LD_INT 111
45980: PUSH
45981: LD_INT 112
45983: PUSH
45984: LD_INT 113
45986: PUSH
45987: LD_INT 114
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: ST_TO_ADDR
46010: GO 47381
46012: LD_INT 13
46014: DOUBLE
46015: EQUAL
46016: IFTRUE 46020
46018: GO 46216
46020: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
46021: LD_ADDR_VAR 0 1
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: LD_INT 3
46034: PUSH
46035: LD_INT 4
46037: PUSH
46038: LD_INT 5
46040: PUSH
46041: LD_INT 8
46043: PUSH
46044: LD_INT 9
46046: PUSH
46047: LD_INT 10
46049: PUSH
46050: LD_INT 11
46052: PUSH
46053: LD_INT 12
46055: PUSH
46056: LD_INT 14
46058: PUSH
46059: LD_INT 15
46061: PUSH
46062: LD_INT 16
46064: PUSH
46065: LD_INT 17
46067: PUSH
46068: LD_INT 18
46070: PUSH
46071: LD_INT 19
46073: PUSH
46074: LD_INT 20
46076: PUSH
46077: LD_INT 21
46079: PUSH
46080: LD_INT 22
46082: PUSH
46083: LD_INT 23
46085: PUSH
46086: LD_INT 24
46088: PUSH
46089: LD_INT 25
46091: PUSH
46092: LD_INT 26
46094: PUSH
46095: LD_INT 27
46097: PUSH
46098: LD_INT 28
46100: PUSH
46101: LD_INT 30
46103: PUSH
46104: LD_INT 31
46106: PUSH
46107: LD_INT 32
46109: PUSH
46110: LD_INT 33
46112: PUSH
46113: LD_INT 34
46115: PUSH
46116: LD_INT 36
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 101
46154: PUSH
46155: LD_INT 102
46157: PUSH
46158: LD_INT 103
46160: PUSH
46161: LD_INT 104
46163: PUSH
46164: LD_INT 105
46166: PUSH
46167: LD_INT 106
46169: PUSH
46170: LD_INT 107
46172: PUSH
46173: LD_INT 108
46175: PUSH
46176: LD_INT 109
46178: PUSH
46179: LD_INT 110
46181: PUSH
46182: LD_INT 111
46184: PUSH
46185: LD_INT 112
46187: PUSH
46188: LD_INT 113
46190: PUSH
46191: LD_INT 114
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: ST_TO_ADDR
46214: GO 47381
46216: LD_INT 14
46218: DOUBLE
46219: EQUAL
46220: IFTRUE 46224
46222: GO 46436
46224: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
46225: LD_ADDR_VAR 0 1
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: LD_INT 2
46235: PUSH
46236: LD_INT 3
46238: PUSH
46239: LD_INT 4
46241: PUSH
46242: LD_INT 5
46244: PUSH
46245: LD_INT 6
46247: PUSH
46248: LD_INT 7
46250: PUSH
46251: LD_INT 8
46253: PUSH
46254: LD_INT 9
46256: PUSH
46257: LD_INT 10
46259: PUSH
46260: LD_INT 11
46262: PUSH
46263: LD_INT 12
46265: PUSH
46266: LD_INT 13
46268: PUSH
46269: LD_INT 14
46271: PUSH
46272: LD_INT 15
46274: PUSH
46275: LD_INT 16
46277: PUSH
46278: LD_INT 17
46280: PUSH
46281: LD_INT 18
46283: PUSH
46284: LD_INT 19
46286: PUSH
46287: LD_INT 20
46289: PUSH
46290: LD_INT 21
46292: PUSH
46293: LD_INT 22
46295: PUSH
46296: LD_INT 23
46298: PUSH
46299: LD_INT 24
46301: PUSH
46302: LD_INT 25
46304: PUSH
46305: LD_INT 26
46307: PUSH
46308: LD_INT 27
46310: PUSH
46311: LD_INT 28
46313: PUSH
46314: LD_INT 29
46316: PUSH
46317: LD_INT 30
46319: PUSH
46320: LD_INT 31
46322: PUSH
46323: LD_INT 32
46325: PUSH
46326: LD_INT 33
46328: PUSH
46329: LD_INT 34
46331: PUSH
46332: LD_INT 36
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 101
46374: PUSH
46375: LD_INT 102
46377: PUSH
46378: LD_INT 103
46380: PUSH
46381: LD_INT 104
46383: PUSH
46384: LD_INT 105
46386: PUSH
46387: LD_INT 106
46389: PUSH
46390: LD_INT 107
46392: PUSH
46393: LD_INT 108
46395: PUSH
46396: LD_INT 109
46398: PUSH
46399: LD_INT 110
46401: PUSH
46402: LD_INT 111
46404: PUSH
46405: LD_INT 112
46407: PUSH
46408: LD_INT 113
46410: PUSH
46411: LD_INT 114
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: ST_TO_ADDR
46434: GO 47381
46436: LD_INT 15
46438: DOUBLE
46439: EQUAL
46440: IFTRUE 46444
46442: GO 46656
46444: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
46445: LD_ADDR_VAR 0 1
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 2
46455: PUSH
46456: LD_INT 3
46458: PUSH
46459: LD_INT 4
46461: PUSH
46462: LD_INT 5
46464: PUSH
46465: LD_INT 6
46467: PUSH
46468: LD_INT 7
46470: PUSH
46471: LD_INT 8
46473: PUSH
46474: LD_INT 9
46476: PUSH
46477: LD_INT 10
46479: PUSH
46480: LD_INT 11
46482: PUSH
46483: LD_INT 12
46485: PUSH
46486: LD_INT 13
46488: PUSH
46489: LD_INT 14
46491: PUSH
46492: LD_INT 15
46494: PUSH
46495: LD_INT 16
46497: PUSH
46498: LD_INT 17
46500: PUSH
46501: LD_INT 18
46503: PUSH
46504: LD_INT 19
46506: PUSH
46507: LD_INT 20
46509: PUSH
46510: LD_INT 21
46512: PUSH
46513: LD_INT 22
46515: PUSH
46516: LD_INT 23
46518: PUSH
46519: LD_INT 24
46521: PUSH
46522: LD_INT 25
46524: PUSH
46525: LD_INT 26
46527: PUSH
46528: LD_INT 27
46530: PUSH
46531: LD_INT 28
46533: PUSH
46534: LD_INT 29
46536: PUSH
46537: LD_INT 30
46539: PUSH
46540: LD_INT 31
46542: PUSH
46543: LD_INT 32
46545: PUSH
46546: LD_INT 33
46548: PUSH
46549: LD_INT 34
46551: PUSH
46552: LD_INT 36
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 101
46594: PUSH
46595: LD_INT 102
46597: PUSH
46598: LD_INT 103
46600: PUSH
46601: LD_INT 104
46603: PUSH
46604: LD_INT 105
46606: PUSH
46607: LD_INT 106
46609: PUSH
46610: LD_INT 107
46612: PUSH
46613: LD_INT 108
46615: PUSH
46616: LD_INT 109
46618: PUSH
46619: LD_INT 110
46621: PUSH
46622: LD_INT 111
46624: PUSH
46625: LD_INT 112
46627: PUSH
46628: LD_INT 113
46630: PUSH
46631: LD_INT 114
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: ST_TO_ADDR
46654: GO 47381
46656: LD_INT 16
46658: DOUBLE
46659: EQUAL
46660: IFTRUE 46664
46662: GO 46788
46664: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
46665: LD_ADDR_VAR 0 1
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: LD_INT 4
46675: PUSH
46676: LD_INT 5
46678: PUSH
46679: LD_INT 7
46681: PUSH
46682: LD_INT 11
46684: PUSH
46685: LD_INT 12
46687: PUSH
46688: LD_INT 15
46690: PUSH
46691: LD_INT 16
46693: PUSH
46694: LD_INT 20
46696: PUSH
46697: LD_INT 21
46699: PUSH
46700: LD_INT 22
46702: PUSH
46703: LD_INT 23
46705: PUSH
46706: LD_INT 25
46708: PUSH
46709: LD_INT 26
46711: PUSH
46712: LD_INT 30
46714: PUSH
46715: LD_INT 31
46717: PUSH
46718: LD_INT 32
46720: PUSH
46721: LD_INT 33
46723: PUSH
46724: LD_INT 34
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 101
46750: PUSH
46751: LD_INT 102
46753: PUSH
46754: LD_INT 103
46756: PUSH
46757: LD_INT 106
46759: PUSH
46760: LD_INT 108
46762: PUSH
46763: LD_INT 112
46765: PUSH
46766: LD_INT 113
46768: PUSH
46769: LD_INT 114
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: ST_TO_ADDR
46786: GO 47381
46788: LD_INT 17
46790: DOUBLE
46791: EQUAL
46792: IFTRUE 46796
46794: GO 47008
46796: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
46797: LD_ADDR_VAR 0 1
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: LD_INT 3
46810: PUSH
46811: LD_INT 4
46813: PUSH
46814: LD_INT 5
46816: PUSH
46817: LD_INT 6
46819: PUSH
46820: LD_INT 7
46822: PUSH
46823: LD_INT 8
46825: PUSH
46826: LD_INT 9
46828: PUSH
46829: LD_INT 10
46831: PUSH
46832: LD_INT 11
46834: PUSH
46835: LD_INT 12
46837: PUSH
46838: LD_INT 13
46840: PUSH
46841: LD_INT 14
46843: PUSH
46844: LD_INT 15
46846: PUSH
46847: LD_INT 16
46849: PUSH
46850: LD_INT 17
46852: PUSH
46853: LD_INT 18
46855: PUSH
46856: LD_INT 19
46858: PUSH
46859: LD_INT 20
46861: PUSH
46862: LD_INT 21
46864: PUSH
46865: LD_INT 22
46867: PUSH
46868: LD_INT 23
46870: PUSH
46871: LD_INT 24
46873: PUSH
46874: LD_INT 25
46876: PUSH
46877: LD_INT 26
46879: PUSH
46880: LD_INT 27
46882: PUSH
46883: LD_INT 28
46885: PUSH
46886: LD_INT 29
46888: PUSH
46889: LD_INT 30
46891: PUSH
46892: LD_INT 31
46894: PUSH
46895: LD_INT 32
46897: PUSH
46898: LD_INT 33
46900: PUSH
46901: LD_INT 34
46903: PUSH
46904: LD_INT 36
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 101
46946: PUSH
46947: LD_INT 102
46949: PUSH
46950: LD_INT 103
46952: PUSH
46953: LD_INT 104
46955: PUSH
46956: LD_INT 105
46958: PUSH
46959: LD_INT 106
46961: PUSH
46962: LD_INT 107
46964: PUSH
46965: LD_INT 108
46967: PUSH
46968: LD_INT 109
46970: PUSH
46971: LD_INT 110
46973: PUSH
46974: LD_INT 111
46976: PUSH
46977: LD_INT 112
46979: PUSH
46980: LD_INT 113
46982: PUSH
46983: LD_INT 114
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: ST_TO_ADDR
47006: GO 47381
47008: LD_INT 18
47010: DOUBLE
47011: EQUAL
47012: IFTRUE 47016
47014: GO 47152
47016: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
47017: LD_ADDR_VAR 0 1
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: LD_INT 4
47027: PUSH
47028: LD_INT 5
47030: PUSH
47031: LD_INT 7
47033: PUSH
47034: LD_INT 11
47036: PUSH
47037: LD_INT 12
47039: PUSH
47040: LD_INT 15
47042: PUSH
47043: LD_INT 16
47045: PUSH
47046: LD_INT 20
47048: PUSH
47049: LD_INT 21
47051: PUSH
47052: LD_INT 22
47054: PUSH
47055: LD_INT 23
47057: PUSH
47058: LD_INT 25
47060: PUSH
47061: LD_INT 26
47063: PUSH
47064: LD_INT 30
47066: PUSH
47067: LD_INT 31
47069: PUSH
47070: LD_INT 32
47072: PUSH
47073: LD_INT 33
47075: PUSH
47076: LD_INT 34
47078: PUSH
47079: LD_INT 35
47081: PUSH
47082: LD_INT 36
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 101
47110: PUSH
47111: LD_INT 102
47113: PUSH
47114: LD_INT 103
47116: PUSH
47117: LD_INT 106
47119: PUSH
47120: LD_INT 108
47122: PUSH
47123: LD_INT 112
47125: PUSH
47126: LD_INT 113
47128: PUSH
47129: LD_INT 114
47131: PUSH
47132: LD_INT 115
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: ST_TO_ADDR
47150: GO 47381
47152: LD_INT 19
47154: DOUBLE
47155: EQUAL
47156: IFTRUE 47160
47158: GO 47380
47160: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
47161: LD_ADDR_VAR 0 1
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: LD_INT 3
47174: PUSH
47175: LD_INT 4
47177: PUSH
47178: LD_INT 5
47180: PUSH
47181: LD_INT 6
47183: PUSH
47184: LD_INT 7
47186: PUSH
47187: LD_INT 8
47189: PUSH
47190: LD_INT 9
47192: PUSH
47193: LD_INT 10
47195: PUSH
47196: LD_INT 11
47198: PUSH
47199: LD_INT 12
47201: PUSH
47202: LD_INT 13
47204: PUSH
47205: LD_INT 14
47207: PUSH
47208: LD_INT 15
47210: PUSH
47211: LD_INT 16
47213: PUSH
47214: LD_INT 17
47216: PUSH
47217: LD_INT 18
47219: PUSH
47220: LD_INT 19
47222: PUSH
47223: LD_INT 20
47225: PUSH
47226: LD_INT 21
47228: PUSH
47229: LD_INT 22
47231: PUSH
47232: LD_INT 23
47234: PUSH
47235: LD_INT 24
47237: PUSH
47238: LD_INT 25
47240: PUSH
47241: LD_INT 26
47243: PUSH
47244: LD_INT 27
47246: PUSH
47247: LD_INT 28
47249: PUSH
47250: LD_INT 29
47252: PUSH
47253: LD_INT 30
47255: PUSH
47256: LD_INT 31
47258: PUSH
47259: LD_INT 32
47261: PUSH
47262: LD_INT 33
47264: PUSH
47265: LD_INT 34
47267: PUSH
47268: LD_INT 35
47270: PUSH
47271: LD_INT 36
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 101
47314: PUSH
47315: LD_INT 102
47317: PUSH
47318: LD_INT 103
47320: PUSH
47321: LD_INT 104
47323: PUSH
47324: LD_INT 105
47326: PUSH
47327: LD_INT 106
47329: PUSH
47330: LD_INT 107
47332: PUSH
47333: LD_INT 108
47335: PUSH
47336: LD_INT 109
47338: PUSH
47339: LD_INT 110
47341: PUSH
47342: LD_INT 111
47344: PUSH
47345: LD_INT 112
47347: PUSH
47348: LD_INT 113
47350: PUSH
47351: LD_INT 114
47353: PUSH
47354: LD_INT 115
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: ST_TO_ADDR
47378: GO 47381
47380: POP
// end else
47381: GO 47600
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
47383: LD_ADDR_VAR 0 1
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: LD_INT 3
47396: PUSH
47397: LD_INT 4
47399: PUSH
47400: LD_INT 5
47402: PUSH
47403: LD_INT 6
47405: PUSH
47406: LD_INT 7
47408: PUSH
47409: LD_INT 8
47411: PUSH
47412: LD_INT 9
47414: PUSH
47415: LD_INT 10
47417: PUSH
47418: LD_INT 11
47420: PUSH
47421: LD_INT 12
47423: PUSH
47424: LD_INT 13
47426: PUSH
47427: LD_INT 14
47429: PUSH
47430: LD_INT 15
47432: PUSH
47433: LD_INT 16
47435: PUSH
47436: LD_INT 17
47438: PUSH
47439: LD_INT 18
47441: PUSH
47442: LD_INT 19
47444: PUSH
47445: LD_INT 20
47447: PUSH
47448: LD_INT 21
47450: PUSH
47451: LD_INT 22
47453: PUSH
47454: LD_INT 23
47456: PUSH
47457: LD_INT 24
47459: PUSH
47460: LD_INT 25
47462: PUSH
47463: LD_INT 26
47465: PUSH
47466: LD_INT 27
47468: PUSH
47469: LD_INT 28
47471: PUSH
47472: LD_INT 29
47474: PUSH
47475: LD_INT 30
47477: PUSH
47478: LD_INT 31
47480: PUSH
47481: LD_INT 32
47483: PUSH
47484: LD_INT 33
47486: PUSH
47487: LD_INT 34
47489: PUSH
47490: LD_INT 35
47492: PUSH
47493: LD_INT 36
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 101
47536: PUSH
47537: LD_INT 102
47539: PUSH
47540: LD_INT 103
47542: PUSH
47543: LD_INT 104
47545: PUSH
47546: LD_INT 105
47548: PUSH
47549: LD_INT 106
47551: PUSH
47552: LD_INT 107
47554: PUSH
47555: LD_INT 108
47557: PUSH
47558: LD_INT 109
47560: PUSH
47561: LD_INT 110
47563: PUSH
47564: LD_INT 111
47566: PUSH
47567: LD_INT 112
47569: PUSH
47570: LD_INT 113
47572: PUSH
47573: LD_INT 114
47575: PUSH
47576: LD_INT 115
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: ST_TO_ADDR
// if result then
47600: LD_VAR 0 1
47604: IFFALSE 47893
// begin normal :=  ;
47606: LD_ADDR_VAR 0 3
47610: PUSH
47611: LD_STRING 
47613: ST_TO_ADDR
// hardcore :=  ;
47614: LD_ADDR_VAR 0 4
47618: PUSH
47619: LD_STRING 
47621: ST_TO_ADDR
// for i = 1 to normalCounter do
47622: LD_ADDR_VAR 0 5
47626: PUSH
47627: DOUBLE
47628: LD_INT 1
47630: DEC
47631: ST_TO_ADDR
47632: LD_EXP 34
47636: PUSH
47637: FOR_TO
47638: IFFALSE 47739
// begin tmp := 0 ;
47640: LD_ADDR_VAR 0 2
47644: PUSH
47645: LD_STRING 0
47647: ST_TO_ADDR
// if result [ 1 ] then
47648: LD_VAR 0 1
47652: PUSH
47653: LD_INT 1
47655: ARRAY
47656: IFFALSE 47721
// if result [ 1 ] [ 1 ] = i then
47658: LD_VAR 0 1
47662: PUSH
47663: LD_INT 1
47665: ARRAY
47666: PUSH
47667: LD_INT 1
47669: ARRAY
47670: PUSH
47671: LD_VAR 0 5
47675: EQUAL
47676: IFFALSE 47721
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
47678: LD_ADDR_VAR 0 1
47682: PUSH
47683: LD_VAR 0 1
47687: PPUSH
47688: LD_INT 1
47690: PPUSH
47691: LD_VAR 0 1
47695: PUSH
47696: LD_INT 1
47698: ARRAY
47699: PPUSH
47700: LD_INT 1
47702: PPUSH
47703: CALL_OW 3
47707: PPUSH
47708: CALL_OW 1
47712: ST_TO_ADDR
// tmp := 1 ;
47713: LD_ADDR_VAR 0 2
47717: PUSH
47718: LD_STRING 1
47720: ST_TO_ADDR
// end ; normal := normal & tmp ;
47721: LD_ADDR_VAR 0 3
47725: PUSH
47726: LD_VAR 0 3
47730: PUSH
47731: LD_VAR 0 2
47735: STR
47736: ST_TO_ADDR
// end ;
47737: GO 47637
47739: POP
47740: POP
// for i = 1 to hardcoreCounter do
47741: LD_ADDR_VAR 0 5
47745: PUSH
47746: DOUBLE
47747: LD_INT 1
47749: DEC
47750: ST_TO_ADDR
47751: LD_EXP 35
47755: PUSH
47756: FOR_TO
47757: IFFALSE 47862
// begin tmp := 0 ;
47759: LD_ADDR_VAR 0 2
47763: PUSH
47764: LD_STRING 0
47766: ST_TO_ADDR
// if result [ 2 ] then
47767: LD_VAR 0 1
47771: PUSH
47772: LD_INT 2
47774: ARRAY
47775: IFFALSE 47844
// if result [ 2 ] [ 1 ] = 100 + i then
47777: LD_VAR 0 1
47781: PUSH
47782: LD_INT 2
47784: ARRAY
47785: PUSH
47786: LD_INT 1
47788: ARRAY
47789: PUSH
47790: LD_INT 100
47792: PUSH
47793: LD_VAR 0 5
47797: PLUS
47798: EQUAL
47799: IFFALSE 47844
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
47801: LD_ADDR_VAR 0 1
47805: PUSH
47806: LD_VAR 0 1
47810: PPUSH
47811: LD_INT 2
47813: PPUSH
47814: LD_VAR 0 1
47818: PUSH
47819: LD_INT 2
47821: ARRAY
47822: PPUSH
47823: LD_INT 1
47825: PPUSH
47826: CALL_OW 3
47830: PPUSH
47831: CALL_OW 1
47835: ST_TO_ADDR
// tmp := 1 ;
47836: LD_ADDR_VAR 0 2
47840: PUSH
47841: LD_STRING 1
47843: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
47844: LD_ADDR_VAR 0 4
47848: PUSH
47849: LD_VAR 0 4
47853: PUSH
47854: LD_VAR 0 2
47858: STR
47859: ST_TO_ADDR
// end ;
47860: GO 47756
47862: POP
47863: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
47864: LD_STRING getStreamItemsFromMission("
47866: PUSH
47867: LD_VAR 0 3
47871: STR
47872: PUSH
47873: LD_STRING ","
47875: STR
47876: PUSH
47877: LD_VAR 0 4
47881: STR
47882: PUSH
47883: LD_STRING ")
47885: STR
47886: PPUSH
47887: CALL_OW 559
// end else
47891: GO 47900
// ToLua ( getStreamItemsFromMission("","") ) ;
47893: LD_STRING getStreamItemsFromMission("","")
47895: PPUSH
47896: CALL_OW 559
// end ;
47900: LD_VAR 0 1
47904: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
47905: LD_EXP 33
47909: PUSH
47910: LD_EXP 38
47914: AND
47915: IFFALSE 48039
47917: GO 47919
47919: DISABLE
47920: LD_INT 0
47922: PPUSH
47923: PPUSH
// begin enable ;
47924: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
47925: LD_ADDR_VAR 0 2
47929: PUSH
47930: LD_INT 22
47932: PUSH
47933: LD_OWVAR 2
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 2
47944: PUSH
47945: LD_INT 34
47947: PUSH
47948: LD_INT 7
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 34
47957: PUSH
47958: LD_INT 45
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 34
47967: PUSH
47968: LD_INT 28
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 34
47977: PUSH
47978: LD_INT 47
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PPUSH
47996: CALL_OW 69
48000: ST_TO_ADDR
// if not tmp then
48001: LD_VAR 0 2
48005: NOT
48006: IFFALSE 48010
// exit ;
48008: GO 48039
// for i in tmp do
48010: LD_ADDR_VAR 0 1
48014: PUSH
48015: LD_VAR 0 2
48019: PUSH
48020: FOR_IN
48021: IFFALSE 48037
// begin SetLives ( i , 0 ) ;
48023: LD_VAR 0 1
48027: PPUSH
48028: LD_INT 0
48030: PPUSH
48031: CALL_OW 234
// end ;
48035: GO 48020
48037: POP
48038: POP
// end ;
48039: PPOPN 2
48041: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
48042: LD_EXP 33
48046: PUSH
48047: LD_EXP 39
48051: AND
48052: IFFALSE 48136
48054: GO 48056
48056: DISABLE
48057: LD_INT 0
48059: PPUSH
48060: PPUSH
// begin enable ;
48061: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
48062: LD_ADDR_VAR 0 2
48066: PUSH
48067: LD_INT 22
48069: PUSH
48070: LD_OWVAR 2
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 32
48081: PUSH
48082: LD_INT 3
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PPUSH
48093: CALL_OW 69
48097: ST_TO_ADDR
// if not tmp then
48098: LD_VAR 0 2
48102: NOT
48103: IFFALSE 48107
// exit ;
48105: GO 48136
// for i in tmp do
48107: LD_ADDR_VAR 0 1
48111: PUSH
48112: LD_VAR 0 2
48116: PUSH
48117: FOR_IN
48118: IFFALSE 48134
// begin SetLives ( i , 0 ) ;
48120: LD_VAR 0 1
48124: PPUSH
48125: LD_INT 0
48127: PPUSH
48128: CALL_OW 234
// end ;
48132: GO 48117
48134: POP
48135: POP
// end ;
48136: PPOPN 2
48138: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
48139: LD_EXP 33
48143: PUSH
48144: LD_EXP 36
48148: AND
48149: IFFALSE 48242
48151: GO 48153
48153: DISABLE
48154: LD_INT 0
48156: PPUSH
// begin enable ;
48157: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
48158: LD_ADDR_VAR 0 1
48162: PUSH
48163: LD_INT 22
48165: PUSH
48166: LD_OWVAR 2
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 2
48177: PUSH
48178: LD_INT 25
48180: PUSH
48181: LD_INT 5
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 25
48190: PUSH
48191: LD_INT 9
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 25
48200: PUSH
48201: LD_INT 8
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PPUSH
48218: CALL_OW 69
48222: PUSH
48223: FOR_IN
48224: IFFALSE 48240
// begin SetClass ( i , 1 ) ;
48226: LD_VAR 0 1
48230: PPUSH
48231: LD_INT 1
48233: PPUSH
48234: CALL_OW 336
// end ;
48238: GO 48223
48240: POP
48241: POP
// end ;
48242: PPOPN 1
48244: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
48245: LD_EXP 33
48249: PUSH
48250: LD_EXP 37
48254: AND
48255: PUSH
48256: LD_OWVAR 65
48260: PUSH
48261: LD_INT 7
48263: LESS
48264: AND
48265: IFFALSE 48279
48267: GO 48269
48269: DISABLE
// begin enable ;
48270: ENABLE
// game_speed := 7 ;
48271: LD_ADDR_OWVAR 65
48275: PUSH
48276: LD_INT 7
48278: ST_TO_ADDR
// end ;
48279: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
48280: LD_EXP 33
48284: PUSH
48285: LD_EXP 40
48289: AND
48290: IFFALSE 48492
48292: GO 48294
48294: DISABLE
48295: LD_INT 0
48297: PPUSH
48298: PPUSH
48299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
48300: LD_ADDR_VAR 0 3
48304: PUSH
48305: LD_INT 81
48307: PUSH
48308: LD_OWVAR 2
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 21
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PPUSH
48331: CALL_OW 69
48335: ST_TO_ADDR
// if not tmp then
48336: LD_VAR 0 3
48340: NOT
48341: IFFALSE 48345
// exit ;
48343: GO 48492
// if tmp > 5 then
48345: LD_VAR 0 3
48349: PUSH
48350: LD_INT 5
48352: GREATER
48353: IFFALSE 48365
// k := 5 else
48355: LD_ADDR_VAR 0 2
48359: PUSH
48360: LD_INT 5
48362: ST_TO_ADDR
48363: GO 48375
// k := tmp ;
48365: LD_ADDR_VAR 0 2
48369: PUSH
48370: LD_VAR 0 3
48374: ST_TO_ADDR
// for i := 1 to k do
48375: LD_ADDR_VAR 0 1
48379: PUSH
48380: DOUBLE
48381: LD_INT 1
48383: DEC
48384: ST_TO_ADDR
48385: LD_VAR 0 2
48389: PUSH
48390: FOR_TO
48391: IFFALSE 48490
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
48393: LD_VAR 0 3
48397: PUSH
48398: LD_VAR 0 1
48402: ARRAY
48403: PPUSH
48404: LD_VAR 0 1
48408: PUSH
48409: LD_INT 4
48411: MOD
48412: PUSH
48413: LD_INT 1
48415: PLUS
48416: PPUSH
48417: CALL_OW 259
48421: PUSH
48422: LD_INT 10
48424: LESS
48425: IFFALSE 48488
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
48427: LD_VAR 0 3
48431: PUSH
48432: LD_VAR 0 1
48436: ARRAY
48437: PPUSH
48438: LD_VAR 0 1
48442: PUSH
48443: LD_INT 4
48445: MOD
48446: PUSH
48447: LD_INT 1
48449: PLUS
48450: PPUSH
48451: LD_VAR 0 3
48455: PUSH
48456: LD_VAR 0 1
48460: ARRAY
48461: PPUSH
48462: LD_VAR 0 1
48466: PUSH
48467: LD_INT 4
48469: MOD
48470: PUSH
48471: LD_INT 1
48473: PLUS
48474: PPUSH
48475: CALL_OW 259
48479: PUSH
48480: LD_INT 1
48482: PLUS
48483: PPUSH
48484: CALL_OW 237
48488: GO 48390
48490: POP
48491: POP
// end ;
48492: PPOPN 3
48494: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
48495: LD_EXP 33
48499: PUSH
48500: LD_EXP 41
48504: AND
48505: IFFALSE 48525
48507: GO 48509
48509: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
48510: LD_INT 4
48512: PPUSH
48513: LD_OWVAR 2
48517: PPUSH
48518: LD_INT 0
48520: PPUSH
48521: CALL_OW 324
48525: END
// every 0 0$1 trigger StreamModeActive and sShovel do
48526: LD_EXP 33
48530: PUSH
48531: LD_EXP 70
48535: AND
48536: IFFALSE 48556
48538: GO 48540
48540: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
48541: LD_INT 19
48543: PPUSH
48544: LD_OWVAR 2
48548: PPUSH
48549: LD_INT 0
48551: PPUSH
48552: CALL_OW 324
48556: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
48557: LD_EXP 33
48561: PUSH
48562: LD_EXP 42
48566: AND
48567: IFFALSE 48669
48569: GO 48571
48571: DISABLE
48572: LD_INT 0
48574: PPUSH
48575: PPUSH
// begin enable ;
48576: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
48577: LD_ADDR_VAR 0 2
48581: PUSH
48582: LD_INT 22
48584: PUSH
48585: LD_OWVAR 2
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: LD_INT 34
48599: PUSH
48600: LD_INT 11
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 34
48609: PUSH
48610: LD_INT 30
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: LIST
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PPUSH
48626: CALL_OW 69
48630: ST_TO_ADDR
// if not tmp then
48631: LD_VAR 0 2
48635: NOT
48636: IFFALSE 48640
// exit ;
48638: GO 48669
// for i in tmp do
48640: LD_ADDR_VAR 0 1
48644: PUSH
48645: LD_VAR 0 2
48649: PUSH
48650: FOR_IN
48651: IFFALSE 48667
// begin SetLives ( i , 0 ) ;
48653: LD_VAR 0 1
48657: PPUSH
48658: LD_INT 0
48660: PPUSH
48661: CALL_OW 234
// end ;
48665: GO 48650
48667: POP
48668: POP
// end ;
48669: PPOPN 2
48671: END
// every 0 0$1 trigger StreamModeActive and sBunker do
48672: LD_EXP 33
48676: PUSH
48677: LD_EXP 43
48681: AND
48682: IFFALSE 48702
48684: GO 48686
48686: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
48687: LD_INT 32
48689: PPUSH
48690: LD_OWVAR 2
48694: PPUSH
48695: LD_INT 0
48697: PPUSH
48698: CALL_OW 324
48702: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
48703: LD_EXP 33
48707: PUSH
48708: LD_EXP 44
48712: AND
48713: IFFALSE 48894
48715: GO 48717
48717: DISABLE
48718: LD_INT 0
48720: PPUSH
48721: PPUSH
48722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
48723: LD_ADDR_VAR 0 2
48727: PUSH
48728: LD_INT 22
48730: PUSH
48731: LD_OWVAR 2
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 33
48742: PUSH
48743: LD_INT 3
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PPUSH
48754: CALL_OW 69
48758: ST_TO_ADDR
// if not tmp then
48759: LD_VAR 0 2
48763: NOT
48764: IFFALSE 48768
// exit ;
48766: GO 48894
// side := 0 ;
48768: LD_ADDR_VAR 0 3
48772: PUSH
48773: LD_INT 0
48775: ST_TO_ADDR
// for i := 1 to 8 do
48776: LD_ADDR_VAR 0 1
48780: PUSH
48781: DOUBLE
48782: LD_INT 1
48784: DEC
48785: ST_TO_ADDR
48786: LD_INT 8
48788: PUSH
48789: FOR_TO
48790: IFFALSE 48838
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
48792: LD_OWVAR 2
48796: PUSH
48797: LD_VAR 0 1
48801: NONEQUAL
48802: PUSH
48803: LD_OWVAR 2
48807: PPUSH
48808: LD_VAR 0 1
48812: PPUSH
48813: CALL_OW 81
48817: PUSH
48818: LD_INT 2
48820: EQUAL
48821: AND
48822: IFFALSE 48836
// begin side := i ;
48824: LD_ADDR_VAR 0 3
48828: PUSH
48829: LD_VAR 0 1
48833: ST_TO_ADDR
// break ;
48834: GO 48838
// end ;
48836: GO 48789
48838: POP
48839: POP
// if not side then
48840: LD_VAR 0 3
48844: NOT
48845: IFFALSE 48849
// exit ;
48847: GO 48894
// for i := 1 to tmp do
48849: LD_ADDR_VAR 0 1
48853: PUSH
48854: DOUBLE
48855: LD_INT 1
48857: DEC
48858: ST_TO_ADDR
48859: LD_VAR 0 2
48863: PUSH
48864: FOR_TO
48865: IFFALSE 48892
// if Prob ( 60 ) then
48867: LD_INT 60
48869: PPUSH
48870: CALL_OW 13
48874: IFFALSE 48890
// SetSide ( i , side ) ;
48876: LD_VAR 0 1
48880: PPUSH
48881: LD_VAR 0 3
48885: PPUSH
48886: CALL_OW 235
48890: GO 48864
48892: POP
48893: POP
// end ;
48894: PPOPN 3
48896: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
48897: LD_EXP 33
48901: PUSH
48902: LD_EXP 46
48906: AND
48907: IFFALSE 49026
48909: GO 48911
48911: DISABLE
48912: LD_INT 0
48914: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
48915: LD_ADDR_VAR 0 1
48919: PUSH
48920: LD_INT 22
48922: PUSH
48923: LD_OWVAR 2
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 21
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 3
48944: PUSH
48945: LD_INT 23
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: LIST
48963: PPUSH
48964: CALL_OW 69
48968: PUSH
48969: FOR_IN
48970: IFFALSE 49024
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
48972: LD_VAR 0 1
48976: PPUSH
48977: CALL_OW 257
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: LD_INT 3
48990: PUSH
48991: LD_INT 4
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: IN
49000: IFFALSE 49022
// SetClass ( un , rand ( 1 , 4 ) ) ;
49002: LD_VAR 0 1
49006: PPUSH
49007: LD_INT 1
49009: PPUSH
49010: LD_INT 4
49012: PPUSH
49013: CALL_OW 12
49017: PPUSH
49018: CALL_OW 336
49022: GO 48969
49024: POP
49025: POP
// end ;
49026: PPOPN 1
49028: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
49029: LD_EXP 33
49033: PUSH
49034: LD_EXP 45
49038: AND
49039: IFFALSE 49118
49041: GO 49043
49043: DISABLE
49044: LD_INT 0
49046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
49047: LD_ADDR_VAR 0 1
49051: PUSH
49052: LD_INT 22
49054: PUSH
49055: LD_OWVAR 2
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 21
49066: PUSH
49067: LD_INT 3
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PPUSH
49078: CALL_OW 69
49082: ST_TO_ADDR
// if not tmp then
49083: LD_VAR 0 1
49087: NOT
49088: IFFALSE 49092
// exit ;
49090: GO 49118
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
49092: LD_VAR 0 1
49096: PUSH
49097: LD_INT 1
49099: PPUSH
49100: LD_VAR 0 1
49104: PPUSH
49105: CALL_OW 12
49109: ARRAY
49110: PPUSH
49111: LD_INT 100
49113: PPUSH
49114: CALL_OW 234
// end ;
49118: PPOPN 1
49120: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
49121: LD_EXP 33
49125: PUSH
49126: LD_EXP 47
49130: AND
49131: IFFALSE 49229
49133: GO 49135
49135: DISABLE
49136: LD_INT 0
49138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
49139: LD_ADDR_VAR 0 1
49143: PUSH
49144: LD_INT 22
49146: PUSH
49147: LD_OWVAR 2
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 21
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PPUSH
49170: CALL_OW 69
49174: ST_TO_ADDR
// if not tmp then
49175: LD_VAR 0 1
49179: NOT
49180: IFFALSE 49184
// exit ;
49182: GO 49229
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
49184: LD_VAR 0 1
49188: PUSH
49189: LD_INT 1
49191: PPUSH
49192: LD_VAR 0 1
49196: PPUSH
49197: CALL_OW 12
49201: ARRAY
49202: PPUSH
49203: LD_INT 1
49205: PPUSH
49206: LD_INT 4
49208: PPUSH
49209: CALL_OW 12
49213: PPUSH
49214: LD_INT 3000
49216: PPUSH
49217: LD_INT 9000
49219: PPUSH
49220: CALL_OW 12
49224: PPUSH
49225: CALL_OW 492
// end ;
49229: PPOPN 1
49231: END
// every 0 0$1 trigger StreamModeActive and sDepot do
49232: LD_EXP 33
49236: PUSH
49237: LD_EXP 48
49241: AND
49242: IFFALSE 49262
49244: GO 49246
49246: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
49247: LD_INT 1
49249: PPUSH
49250: LD_OWVAR 2
49254: PPUSH
49255: LD_INT 0
49257: PPUSH
49258: CALL_OW 324
49262: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
49263: LD_EXP 33
49267: PUSH
49268: LD_EXP 49
49272: AND
49273: IFFALSE 49356
49275: GO 49277
49277: DISABLE
49278: LD_INT 0
49280: PPUSH
49281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
49282: LD_ADDR_VAR 0 2
49286: PUSH
49287: LD_INT 22
49289: PUSH
49290: LD_OWVAR 2
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 21
49301: PUSH
49302: LD_INT 3
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PPUSH
49313: CALL_OW 69
49317: ST_TO_ADDR
// if not tmp then
49318: LD_VAR 0 2
49322: NOT
49323: IFFALSE 49327
// exit ;
49325: GO 49356
// for i in tmp do
49327: LD_ADDR_VAR 0 1
49331: PUSH
49332: LD_VAR 0 2
49336: PUSH
49337: FOR_IN
49338: IFFALSE 49354
// SetBLevel ( i , 10 ) ;
49340: LD_VAR 0 1
49344: PPUSH
49345: LD_INT 10
49347: PPUSH
49348: CALL_OW 241
49352: GO 49337
49354: POP
49355: POP
// end ;
49356: PPOPN 2
49358: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
49359: LD_EXP 33
49363: PUSH
49364: LD_EXP 50
49368: AND
49369: IFFALSE 49480
49371: GO 49373
49373: DISABLE
49374: LD_INT 0
49376: PPUSH
49377: PPUSH
49378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
49379: LD_ADDR_VAR 0 3
49383: PUSH
49384: LD_INT 22
49386: PUSH
49387: LD_OWVAR 2
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 25
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PPUSH
49410: CALL_OW 69
49414: ST_TO_ADDR
// if not tmp then
49415: LD_VAR 0 3
49419: NOT
49420: IFFALSE 49424
// exit ;
49422: GO 49480
// un := tmp [ rand ( 1 , tmp ) ] ;
49424: LD_ADDR_VAR 0 2
49428: PUSH
49429: LD_VAR 0 3
49433: PUSH
49434: LD_INT 1
49436: PPUSH
49437: LD_VAR 0 3
49441: PPUSH
49442: CALL_OW 12
49446: ARRAY
49447: ST_TO_ADDR
// if Crawls ( un ) then
49448: LD_VAR 0 2
49452: PPUSH
49453: CALL_OW 318
49457: IFFALSE 49468
// ComWalk ( un ) ;
49459: LD_VAR 0 2
49463: PPUSH
49464: CALL_OW 138
// SetClass ( un , class_sniper ) ;
49468: LD_VAR 0 2
49472: PPUSH
49473: LD_INT 5
49475: PPUSH
49476: CALL_OW 336
// end ;
49480: PPOPN 3
49482: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
49483: LD_EXP 33
49487: PUSH
49488: LD_EXP 51
49492: AND
49493: PUSH
49494: LD_OWVAR 67
49498: PUSH
49499: LD_INT 3
49501: LESS
49502: AND
49503: IFFALSE 49522
49505: GO 49507
49507: DISABLE
// Difficulty := Difficulty + 1 ;
49508: LD_ADDR_OWVAR 67
49512: PUSH
49513: LD_OWVAR 67
49517: PUSH
49518: LD_INT 1
49520: PLUS
49521: ST_TO_ADDR
49522: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
49523: LD_EXP 33
49527: PUSH
49528: LD_EXP 52
49532: AND
49533: IFFALSE 49636
49535: GO 49537
49537: DISABLE
49538: LD_INT 0
49540: PPUSH
// begin for i := 1 to 5 do
49541: LD_ADDR_VAR 0 1
49545: PUSH
49546: DOUBLE
49547: LD_INT 1
49549: DEC
49550: ST_TO_ADDR
49551: LD_INT 5
49553: PUSH
49554: FOR_TO
49555: IFFALSE 49634
// begin uc_nation := nation_nature ;
49557: LD_ADDR_OWVAR 21
49561: PUSH
49562: LD_INT 0
49564: ST_TO_ADDR
// uc_side := 0 ;
49565: LD_ADDR_OWVAR 20
49569: PUSH
49570: LD_INT 0
49572: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49573: LD_ADDR_OWVAR 29
49577: PUSH
49578: LD_INT 12
49580: PUSH
49581: LD_INT 12
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: ST_TO_ADDR
// hc_agressivity := 20 ;
49588: LD_ADDR_OWVAR 35
49592: PUSH
49593: LD_INT 20
49595: ST_TO_ADDR
// hc_class := class_tiger ;
49596: LD_ADDR_OWVAR 28
49600: PUSH
49601: LD_INT 14
49603: ST_TO_ADDR
// hc_gallery :=  ;
49604: LD_ADDR_OWVAR 33
49608: PUSH
49609: LD_STRING 
49611: ST_TO_ADDR
// hc_name :=  ;
49612: LD_ADDR_OWVAR 26
49616: PUSH
49617: LD_STRING 
49619: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
49620: CALL_OW 44
49624: PPUSH
49625: LD_INT 0
49627: PPUSH
49628: CALL_OW 51
// end ;
49632: GO 49554
49634: POP
49635: POP
// end ;
49636: PPOPN 1
49638: END
// every 0 0$1 trigger StreamModeActive and sBomb do
49639: LD_EXP 33
49643: PUSH
49644: LD_EXP 53
49648: AND
49649: IFFALSE 49658
49651: GO 49653
49653: DISABLE
// StreamSibBomb ;
49654: CALL 49659 0 0
49658: END
// export function StreamSibBomb ; var i , x , y ; begin
49659: LD_INT 0
49661: PPUSH
49662: PPUSH
49663: PPUSH
49664: PPUSH
// result := false ;
49665: LD_ADDR_VAR 0 1
49669: PUSH
49670: LD_INT 0
49672: ST_TO_ADDR
// for i := 1 to 16 do
49673: LD_ADDR_VAR 0 2
49677: PUSH
49678: DOUBLE
49679: LD_INT 1
49681: DEC
49682: ST_TO_ADDR
49683: LD_INT 16
49685: PUSH
49686: FOR_TO
49687: IFFALSE 49886
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
49689: LD_ADDR_VAR 0 3
49693: PUSH
49694: LD_INT 10
49696: PUSH
49697: LD_INT 20
49699: PUSH
49700: LD_INT 30
49702: PUSH
49703: LD_INT 40
49705: PUSH
49706: LD_INT 50
49708: PUSH
49709: LD_INT 60
49711: PUSH
49712: LD_INT 70
49714: PUSH
49715: LD_INT 80
49717: PUSH
49718: LD_INT 90
49720: PUSH
49721: LD_INT 100
49723: PUSH
49724: LD_INT 110
49726: PUSH
49727: LD_INT 120
49729: PUSH
49730: LD_INT 130
49732: PUSH
49733: LD_INT 140
49735: PUSH
49736: LD_INT 150
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: PPUSH
49759: LD_INT 15
49761: PPUSH
49762: CALL_OW 12
49766: ARRAY
49767: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
49768: LD_ADDR_VAR 0 4
49772: PUSH
49773: LD_INT 10
49775: PUSH
49776: LD_INT 20
49778: PUSH
49779: LD_INT 30
49781: PUSH
49782: LD_INT 40
49784: PUSH
49785: LD_INT 50
49787: PUSH
49788: LD_INT 60
49790: PUSH
49791: LD_INT 70
49793: PUSH
49794: LD_INT 80
49796: PUSH
49797: LD_INT 90
49799: PUSH
49800: LD_INT 100
49802: PUSH
49803: LD_INT 110
49805: PUSH
49806: LD_INT 120
49808: PUSH
49809: LD_INT 130
49811: PUSH
49812: LD_INT 140
49814: PUSH
49815: LD_INT 150
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: PPUSH
49838: LD_INT 15
49840: PPUSH
49841: CALL_OW 12
49845: ARRAY
49846: ST_TO_ADDR
// if ValidHex ( x , y ) then
49847: LD_VAR 0 3
49851: PPUSH
49852: LD_VAR 0 4
49856: PPUSH
49857: CALL_OW 488
49861: IFFALSE 49884
// begin result := [ x , y ] ;
49863: LD_ADDR_VAR 0 1
49867: PUSH
49868: LD_VAR 0 3
49872: PUSH
49873: LD_VAR 0 4
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: ST_TO_ADDR
// break ;
49882: GO 49886
// end ; end ;
49884: GO 49686
49886: POP
49887: POP
// if result then
49888: LD_VAR 0 1
49892: IFFALSE 49952
// begin ToLua ( playSibBomb() ) ;
49894: LD_STRING playSibBomb()
49896: PPUSH
49897: CALL_OW 559
// wait ( 0 0$14 ) ;
49901: LD_INT 490
49903: PPUSH
49904: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
49908: LD_VAR 0 1
49912: PUSH
49913: LD_INT 1
49915: ARRAY
49916: PPUSH
49917: LD_VAR 0 1
49921: PUSH
49922: LD_INT 2
49924: ARRAY
49925: PPUSH
49926: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
49930: LD_VAR 0 1
49934: PUSH
49935: LD_INT 1
49937: ARRAY
49938: PPUSH
49939: LD_VAR 0 1
49943: PUSH
49944: LD_INT 2
49946: ARRAY
49947: PPUSH
49948: CALL_OW 429
// end ; end ;
49952: LD_VAR 0 1
49956: RET
// every 0 0$1 trigger StreamModeActive and sReset do
49957: LD_EXP 33
49961: PUSH
49962: LD_EXP 55
49966: AND
49967: IFFALSE 49979
49969: GO 49971
49971: DISABLE
// YouLost (  ) ;
49972: LD_STRING 
49974: PPUSH
49975: CALL_OW 104
49979: END
// every 0 0$1 trigger StreamModeActive and sFog do
49980: LD_EXP 33
49984: PUSH
49985: LD_EXP 54
49989: AND
49990: IFFALSE 50004
49992: GO 49994
49994: DISABLE
// FogOff ( your_side ) ;
49995: LD_OWVAR 2
49999: PPUSH
50000: CALL_OW 344
50004: END
// every 0 0$1 trigger StreamModeActive and sSun do
50005: LD_EXP 33
50009: PUSH
50010: LD_EXP 56
50014: AND
50015: IFFALSE 50043
50017: GO 50019
50019: DISABLE
// begin solar_recharge_percent := 0 ;
50020: LD_ADDR_OWVAR 79
50024: PUSH
50025: LD_INT 0
50027: ST_TO_ADDR
// wait ( 5 5$00 ) ;
50028: LD_INT 10500
50030: PPUSH
50031: CALL_OW 67
// solar_recharge_percent := 100 ;
50035: LD_ADDR_OWVAR 79
50039: PUSH
50040: LD_INT 100
50042: ST_TO_ADDR
// end ;
50043: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
50044: LD_EXP 33
50048: PUSH
50049: LD_EXP 57
50053: AND
50054: IFFALSE 50293
50056: GO 50058
50058: DISABLE
50059: LD_INT 0
50061: PPUSH
50062: PPUSH
50063: PPUSH
// begin tmp := [ ] ;
50064: LD_ADDR_VAR 0 3
50068: PUSH
50069: EMPTY
50070: ST_TO_ADDR
// for i := 1 to 6 do
50071: LD_ADDR_VAR 0 1
50075: PUSH
50076: DOUBLE
50077: LD_INT 1
50079: DEC
50080: ST_TO_ADDR
50081: LD_INT 6
50083: PUSH
50084: FOR_TO
50085: IFFALSE 50190
// begin uc_nation := nation_nature ;
50087: LD_ADDR_OWVAR 21
50091: PUSH
50092: LD_INT 0
50094: ST_TO_ADDR
// uc_side := 0 ;
50095: LD_ADDR_OWVAR 20
50099: PUSH
50100: LD_INT 0
50102: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50103: LD_ADDR_OWVAR 29
50107: PUSH
50108: LD_INT 12
50110: PUSH
50111: LD_INT 12
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: ST_TO_ADDR
// hc_agressivity := 20 ;
50118: LD_ADDR_OWVAR 35
50122: PUSH
50123: LD_INT 20
50125: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
50126: LD_ADDR_OWVAR 28
50130: PUSH
50131: LD_INT 17
50133: ST_TO_ADDR
// hc_gallery :=  ;
50134: LD_ADDR_OWVAR 33
50138: PUSH
50139: LD_STRING 
50141: ST_TO_ADDR
// hc_name :=  ;
50142: LD_ADDR_OWVAR 26
50146: PUSH
50147: LD_STRING 
50149: ST_TO_ADDR
// un := CreateHuman ;
50150: LD_ADDR_VAR 0 2
50154: PUSH
50155: CALL_OW 44
50159: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
50160: LD_VAR 0 2
50164: PPUSH
50165: LD_INT 1
50167: PPUSH
50168: CALL_OW 51
// tmp := tmp ^ un ;
50172: LD_ADDR_VAR 0 3
50176: PUSH
50177: LD_VAR 0 3
50181: PUSH
50182: LD_VAR 0 2
50186: ADD
50187: ST_TO_ADDR
// end ;
50188: GO 50084
50190: POP
50191: POP
// repeat wait ( 0 0$1 ) ;
50192: LD_INT 35
50194: PPUSH
50195: CALL_OW 67
// for un in tmp do
50199: LD_ADDR_VAR 0 2
50203: PUSH
50204: LD_VAR 0 3
50208: PUSH
50209: FOR_IN
50210: IFFALSE 50284
// begin if IsDead ( un ) then
50212: LD_VAR 0 2
50216: PPUSH
50217: CALL_OW 301
50221: IFFALSE 50241
// begin tmp := tmp diff un ;
50223: LD_ADDR_VAR 0 3
50227: PUSH
50228: LD_VAR 0 3
50232: PUSH
50233: LD_VAR 0 2
50237: DIFF
50238: ST_TO_ADDR
// continue ;
50239: GO 50209
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
50241: LD_VAR 0 2
50245: PPUSH
50246: LD_INT 3
50248: PUSH
50249: LD_INT 22
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PPUSH
50263: CALL_OW 69
50267: PPUSH
50268: LD_VAR 0 2
50272: PPUSH
50273: CALL_OW 74
50277: PPUSH
50278: CALL_OW 115
// end ;
50282: GO 50209
50284: POP
50285: POP
// until not tmp ;
50286: LD_VAR 0 3
50290: NOT
50291: IFFALSE 50192
// end ;
50293: PPOPN 3
50295: END
// every 0 0$1 trigger StreamModeActive and sTroll do
50296: LD_EXP 33
50300: PUSH
50301: LD_EXP 58
50305: AND
50306: IFFALSE 50360
50308: GO 50310
50310: DISABLE
// begin ToLua ( displayTroll(); ) ;
50311: LD_STRING displayTroll();
50313: PPUSH
50314: CALL_OW 559
// wait ( 3 3$00 ) ;
50318: LD_INT 6300
50320: PPUSH
50321: CALL_OW 67
// ToLua ( hideTroll(); ) ;
50325: LD_STRING hideTroll();
50327: PPUSH
50328: CALL_OW 559
// wait ( 1 1$00 ) ;
50332: LD_INT 2100
50334: PPUSH
50335: CALL_OW 67
// ToLua ( displayTroll(); ) ;
50339: LD_STRING displayTroll();
50341: PPUSH
50342: CALL_OW 559
// wait ( 1 1$00 ) ;
50346: LD_INT 2100
50348: PPUSH
50349: CALL_OW 67
// ToLua ( hideTroll(); ) ;
50353: LD_STRING hideTroll();
50355: PPUSH
50356: CALL_OW 559
// end ;
50360: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
50361: LD_EXP 33
50365: PUSH
50366: LD_EXP 59
50370: AND
50371: IFFALSE 50434
50373: GO 50375
50375: DISABLE
50376: LD_INT 0
50378: PPUSH
// begin p := 0 ;
50379: LD_ADDR_VAR 0 1
50383: PUSH
50384: LD_INT 0
50386: ST_TO_ADDR
// repeat game_speed := 1 ;
50387: LD_ADDR_OWVAR 65
50391: PUSH
50392: LD_INT 1
50394: ST_TO_ADDR
// wait ( 0 0$1 ) ;
50395: LD_INT 35
50397: PPUSH
50398: CALL_OW 67
// p := p + 1 ;
50402: LD_ADDR_VAR 0 1
50406: PUSH
50407: LD_VAR 0 1
50411: PUSH
50412: LD_INT 1
50414: PLUS
50415: ST_TO_ADDR
// until p >= 60 ;
50416: LD_VAR 0 1
50420: PUSH
50421: LD_INT 60
50423: GREATEREQUAL
50424: IFFALSE 50387
// game_speed := 4 ;
50426: LD_ADDR_OWVAR 65
50430: PUSH
50431: LD_INT 4
50433: ST_TO_ADDR
// end ;
50434: PPOPN 1
50436: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
50437: LD_EXP 33
50441: PUSH
50442: LD_EXP 60
50446: AND
50447: IFFALSE 50593
50449: GO 50451
50451: DISABLE
50452: LD_INT 0
50454: PPUSH
50455: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50456: LD_ADDR_VAR 0 1
50460: PUSH
50461: LD_INT 22
50463: PUSH
50464: LD_OWVAR 2
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: LD_INT 30
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 30
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PPUSH
50505: CALL_OW 69
50509: ST_TO_ADDR
// if not depot then
50510: LD_VAR 0 1
50514: NOT
50515: IFFALSE 50519
// exit ;
50517: GO 50593
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
50519: LD_ADDR_VAR 0 2
50523: PUSH
50524: LD_VAR 0 1
50528: PUSH
50529: LD_INT 1
50531: PPUSH
50532: LD_VAR 0 1
50536: PPUSH
50537: CALL_OW 12
50541: ARRAY
50542: PPUSH
50543: CALL_OW 274
50547: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
50548: LD_VAR 0 2
50552: PPUSH
50553: LD_INT 1
50555: PPUSH
50556: LD_INT 0
50558: PPUSH
50559: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
50563: LD_VAR 0 2
50567: PPUSH
50568: LD_INT 2
50570: PPUSH
50571: LD_INT 0
50573: PPUSH
50574: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
50578: LD_VAR 0 2
50582: PPUSH
50583: LD_INT 3
50585: PPUSH
50586: LD_INT 0
50588: PPUSH
50589: CALL_OW 277
// end ;
50593: PPOPN 2
50595: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
50596: LD_EXP 33
50600: PUSH
50601: LD_EXP 61
50605: AND
50606: IFFALSE 50703
50608: GO 50610
50610: DISABLE
50611: LD_INT 0
50613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
50614: LD_ADDR_VAR 0 1
50618: PUSH
50619: LD_INT 22
50621: PUSH
50622: LD_OWVAR 2
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 21
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 3
50643: PUSH
50644: LD_INT 23
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: LIST
50662: PPUSH
50663: CALL_OW 69
50667: ST_TO_ADDR
// if not tmp then
50668: LD_VAR 0 1
50672: NOT
50673: IFFALSE 50677
// exit ;
50675: GO 50703
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
50677: LD_VAR 0 1
50681: PUSH
50682: LD_INT 1
50684: PPUSH
50685: LD_VAR 0 1
50689: PPUSH
50690: CALL_OW 12
50694: ARRAY
50695: PPUSH
50696: LD_INT 200
50698: PPUSH
50699: CALL_OW 234
// end ;
50703: PPOPN 1
50705: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
50706: LD_EXP 33
50710: PUSH
50711: LD_EXP 62
50715: AND
50716: IFFALSE 50795
50718: GO 50720
50720: DISABLE
50721: LD_INT 0
50723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
50724: LD_ADDR_VAR 0 1
50728: PUSH
50729: LD_INT 22
50731: PUSH
50732: LD_OWVAR 2
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 21
50743: PUSH
50744: LD_INT 2
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PPUSH
50755: CALL_OW 69
50759: ST_TO_ADDR
// if not tmp then
50760: LD_VAR 0 1
50764: NOT
50765: IFFALSE 50769
// exit ;
50767: GO 50795
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
50769: LD_VAR 0 1
50773: PUSH
50774: LD_INT 1
50776: PPUSH
50777: LD_VAR 0 1
50781: PPUSH
50782: CALL_OW 12
50786: ARRAY
50787: PPUSH
50788: LD_INT 60
50790: PPUSH
50791: CALL_OW 234
// end ;
50795: PPOPN 1
50797: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
50798: LD_EXP 33
50802: PUSH
50803: LD_EXP 63
50807: AND
50808: IFFALSE 50907
50810: GO 50812
50812: DISABLE
50813: LD_INT 0
50815: PPUSH
50816: PPUSH
// begin enable ;
50817: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
50818: LD_ADDR_VAR 0 1
50822: PUSH
50823: LD_INT 22
50825: PUSH
50826: LD_OWVAR 2
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 61
50837: PUSH
50838: EMPTY
50839: LIST
50840: PUSH
50841: LD_INT 33
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: LIST
50855: PPUSH
50856: CALL_OW 69
50860: ST_TO_ADDR
// if not tmp then
50861: LD_VAR 0 1
50865: NOT
50866: IFFALSE 50870
// exit ;
50868: GO 50907
// for i in tmp do
50870: LD_ADDR_VAR 0 2
50874: PUSH
50875: LD_VAR 0 1
50879: PUSH
50880: FOR_IN
50881: IFFALSE 50905
// if IsControledBy ( i ) then
50883: LD_VAR 0 2
50887: PPUSH
50888: CALL_OW 312
50892: IFFALSE 50903
// ComUnlink ( i ) ;
50894: LD_VAR 0 2
50898: PPUSH
50899: CALL_OW 136
50903: GO 50880
50905: POP
50906: POP
// end ;
50907: PPOPN 2
50909: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
50910: LD_EXP 33
50914: PUSH
50915: LD_EXP 64
50919: AND
50920: IFFALSE 51060
50922: GO 50924
50924: DISABLE
50925: LD_INT 0
50927: PPUSH
50928: PPUSH
// begin ToLua ( displayPowell(); ) ;
50929: LD_STRING displayPowell();
50931: PPUSH
50932: CALL_OW 559
// uc_side := 0 ;
50936: LD_ADDR_OWVAR 20
50940: PUSH
50941: LD_INT 0
50943: ST_TO_ADDR
// uc_nation := 2 ;
50944: LD_ADDR_OWVAR 21
50948: PUSH
50949: LD_INT 2
50951: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
50952: LD_ADDR_OWVAR 37
50956: PUSH
50957: LD_INT 14
50959: ST_TO_ADDR
// vc_engine := engine_siberite ;
50960: LD_ADDR_OWVAR 39
50964: PUSH
50965: LD_INT 3
50967: ST_TO_ADDR
// vc_control := control_apeman ;
50968: LD_ADDR_OWVAR 38
50972: PUSH
50973: LD_INT 5
50975: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
50976: LD_ADDR_OWVAR 40
50980: PUSH
50981: LD_INT 29
50983: ST_TO_ADDR
// un := CreateVehicle ;
50984: LD_ADDR_VAR 0 2
50988: PUSH
50989: CALL_OW 45
50993: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
50994: LD_VAR 0 2
50998: PPUSH
50999: LD_INT 1
51001: PPUSH
51002: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
51006: LD_INT 35
51008: PPUSH
51009: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
51013: LD_VAR 0 2
51017: PPUSH
51018: LD_INT 22
51020: PUSH
51021: LD_OWVAR 2
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PPUSH
51030: CALL_OW 69
51034: PPUSH
51035: LD_VAR 0 2
51039: PPUSH
51040: CALL_OW 74
51044: PPUSH
51045: CALL_OW 115
// until IsDead ( un ) ;
51049: LD_VAR 0 2
51053: PPUSH
51054: CALL_OW 301
51058: IFFALSE 51006
// end ;
51060: PPOPN 2
51062: END
// every 0 0$1 trigger StreamModeActive and sStu do
51063: LD_EXP 33
51067: PUSH
51068: LD_EXP 72
51072: AND
51073: IFFALSE 51089
51075: GO 51077
51077: DISABLE
// begin ToLua ( displayStucuk(); ) ;
51078: LD_STRING displayStucuk();
51080: PPUSH
51081: CALL_OW 559
// ResetFog ;
51085: CALL_OW 335
// end ;
51089: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
51090: LD_EXP 33
51094: PUSH
51095: LD_EXP 65
51099: AND
51100: IFFALSE 51241
51102: GO 51104
51104: DISABLE
51105: LD_INT 0
51107: PPUSH
51108: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
51109: LD_ADDR_VAR 0 2
51113: PUSH
51114: LD_INT 22
51116: PUSH
51117: LD_OWVAR 2
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 21
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PPUSH
51140: CALL_OW 69
51144: ST_TO_ADDR
// if not tmp then
51145: LD_VAR 0 2
51149: NOT
51150: IFFALSE 51154
// exit ;
51152: GO 51241
// un := tmp [ rand ( 1 , tmp ) ] ;
51154: LD_ADDR_VAR 0 1
51158: PUSH
51159: LD_VAR 0 2
51163: PUSH
51164: LD_INT 1
51166: PPUSH
51167: LD_VAR 0 2
51171: PPUSH
51172: CALL_OW 12
51176: ARRAY
51177: ST_TO_ADDR
// SetSide ( un , 0 ) ;
51178: LD_VAR 0 1
51182: PPUSH
51183: LD_INT 0
51185: PPUSH
51186: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
51190: LD_VAR 0 1
51194: PPUSH
51195: LD_OWVAR 3
51199: PUSH
51200: LD_VAR 0 1
51204: DIFF
51205: PPUSH
51206: LD_VAR 0 1
51210: PPUSH
51211: CALL_OW 74
51215: PPUSH
51216: CALL_OW 115
// wait ( 0 0$20 ) ;
51220: LD_INT 700
51222: PPUSH
51223: CALL_OW 67
// SetSide ( un , your_side ) ;
51227: LD_VAR 0 1
51231: PPUSH
51232: LD_OWVAR 2
51236: PPUSH
51237: CALL_OW 235
// end ;
51241: PPOPN 2
51243: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
51244: LD_EXP 33
51248: PUSH
51249: LD_EXP 66
51253: AND
51254: IFFALSE 51360
51256: GO 51258
51258: DISABLE
51259: LD_INT 0
51261: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51262: LD_ADDR_VAR 0 1
51266: PUSH
51267: LD_INT 22
51269: PUSH
51270: LD_OWVAR 2
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 2
51281: PUSH
51282: LD_INT 30
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 30
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: LIST
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PPUSH
51311: CALL_OW 69
51315: ST_TO_ADDR
// if not depot then
51316: LD_VAR 0 1
51320: NOT
51321: IFFALSE 51325
// exit ;
51323: GO 51360
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
51325: LD_VAR 0 1
51329: PUSH
51330: LD_INT 1
51332: ARRAY
51333: PPUSH
51334: CALL_OW 250
51338: PPUSH
51339: LD_VAR 0 1
51343: PUSH
51344: LD_INT 1
51346: ARRAY
51347: PPUSH
51348: CALL_OW 251
51352: PPUSH
51353: LD_INT 70
51355: PPUSH
51356: CALL_OW 495
// end ;
51360: PPOPN 1
51362: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
51363: LD_EXP 33
51367: PUSH
51368: LD_EXP 67
51372: AND
51373: IFFALSE 51584
51375: GO 51377
51377: DISABLE
51378: LD_INT 0
51380: PPUSH
51381: PPUSH
51382: PPUSH
51383: PPUSH
51384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
51385: LD_ADDR_VAR 0 5
51389: PUSH
51390: LD_INT 22
51392: PUSH
51393: LD_OWVAR 2
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 21
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PPUSH
51416: CALL_OW 69
51420: ST_TO_ADDR
// if not tmp then
51421: LD_VAR 0 5
51425: NOT
51426: IFFALSE 51430
// exit ;
51428: GO 51584
// for i in tmp do
51430: LD_ADDR_VAR 0 1
51434: PUSH
51435: LD_VAR 0 5
51439: PUSH
51440: FOR_IN
51441: IFFALSE 51582
// begin d := rand ( 0 , 5 ) ;
51443: LD_ADDR_VAR 0 4
51447: PUSH
51448: LD_INT 0
51450: PPUSH
51451: LD_INT 5
51453: PPUSH
51454: CALL_OW 12
51458: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
51459: LD_ADDR_VAR 0 2
51463: PUSH
51464: LD_VAR 0 1
51468: PPUSH
51469: CALL_OW 250
51473: PPUSH
51474: LD_VAR 0 4
51478: PPUSH
51479: LD_INT 3
51481: PPUSH
51482: LD_INT 12
51484: PPUSH
51485: CALL_OW 12
51489: PPUSH
51490: CALL_OW 272
51494: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
51495: LD_ADDR_VAR 0 3
51499: PUSH
51500: LD_VAR 0 1
51504: PPUSH
51505: CALL_OW 251
51509: PPUSH
51510: LD_VAR 0 4
51514: PPUSH
51515: LD_INT 3
51517: PPUSH
51518: LD_INT 12
51520: PPUSH
51521: CALL_OW 12
51525: PPUSH
51526: CALL_OW 273
51530: ST_TO_ADDR
// if ValidHex ( x , y ) then
51531: LD_VAR 0 2
51535: PPUSH
51536: LD_VAR 0 3
51540: PPUSH
51541: CALL_OW 488
51545: IFFALSE 51580
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
51547: LD_VAR 0 1
51551: PPUSH
51552: LD_VAR 0 2
51556: PPUSH
51557: LD_VAR 0 3
51561: PPUSH
51562: LD_INT 3
51564: PPUSH
51565: LD_INT 6
51567: PPUSH
51568: CALL_OW 12
51572: PPUSH
51573: LD_INT 1
51575: PPUSH
51576: CALL_OW 483
// end ;
51580: GO 51440
51582: POP
51583: POP
// end ;
51584: PPOPN 5
51586: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
51587: LD_EXP 33
51591: PUSH
51592: LD_EXP 68
51596: AND
51597: IFFALSE 51691
51599: GO 51601
51601: DISABLE
51602: LD_INT 0
51604: PPUSH
51605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
51606: LD_ADDR_VAR 0 2
51610: PUSH
51611: LD_INT 22
51613: PUSH
51614: LD_OWVAR 2
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 32
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 21
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: LIST
51647: PPUSH
51648: CALL_OW 69
51652: ST_TO_ADDR
// if not tmp then
51653: LD_VAR 0 2
51657: NOT
51658: IFFALSE 51662
// exit ;
51660: GO 51691
// for i in tmp do
51662: LD_ADDR_VAR 0 1
51666: PUSH
51667: LD_VAR 0 2
51671: PUSH
51672: FOR_IN
51673: IFFALSE 51689
// SetFuel ( i , 0 ) ;
51675: LD_VAR 0 1
51679: PPUSH
51680: LD_INT 0
51682: PPUSH
51683: CALL_OW 240
51687: GO 51672
51689: POP
51690: POP
// end ;
51691: PPOPN 2
51693: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
51694: LD_EXP 33
51698: PUSH
51699: LD_EXP 69
51703: AND
51704: IFFALSE 51770
51706: GO 51708
51708: DISABLE
51709: LD_INT 0
51711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
51712: LD_ADDR_VAR 0 1
51716: PUSH
51717: LD_INT 22
51719: PUSH
51720: LD_OWVAR 2
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 30
51731: PUSH
51732: LD_INT 29
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PPUSH
51743: CALL_OW 69
51747: ST_TO_ADDR
// if not tmp then
51748: LD_VAR 0 1
51752: NOT
51753: IFFALSE 51757
// exit ;
51755: GO 51770
// DestroyUnit ( tmp [ 1 ] ) ;
51757: LD_VAR 0 1
51761: PUSH
51762: LD_INT 1
51764: ARRAY
51765: PPUSH
51766: CALL_OW 65
// end ;
51770: PPOPN 1
51772: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
51773: LD_EXP 33
51777: PUSH
51778: LD_EXP 71
51782: AND
51783: IFFALSE 51912
51785: GO 51787
51787: DISABLE
51788: LD_INT 0
51790: PPUSH
// begin uc_side := 0 ;
51791: LD_ADDR_OWVAR 20
51795: PUSH
51796: LD_INT 0
51798: ST_TO_ADDR
// uc_nation := nation_arabian ;
51799: LD_ADDR_OWVAR 21
51803: PUSH
51804: LD_INT 2
51806: ST_TO_ADDR
// hc_gallery :=  ;
51807: LD_ADDR_OWVAR 33
51811: PUSH
51812: LD_STRING 
51814: ST_TO_ADDR
// hc_name :=  ;
51815: LD_ADDR_OWVAR 26
51819: PUSH
51820: LD_STRING 
51822: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
51823: LD_INT 1
51825: PPUSH
51826: LD_INT 11
51828: PPUSH
51829: LD_INT 10
51831: PPUSH
51832: CALL_OW 380
// un := CreateHuman ;
51836: LD_ADDR_VAR 0 1
51840: PUSH
51841: CALL_OW 44
51845: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
51846: LD_VAR 0 1
51850: PPUSH
51851: LD_INT 1
51853: PPUSH
51854: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
51858: LD_INT 35
51860: PPUSH
51861: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
51865: LD_VAR 0 1
51869: PPUSH
51870: LD_INT 22
51872: PUSH
51873: LD_OWVAR 2
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PPUSH
51882: CALL_OW 69
51886: PPUSH
51887: LD_VAR 0 1
51891: PPUSH
51892: CALL_OW 74
51896: PPUSH
51897: CALL_OW 115
// until IsDead ( un ) ;
51901: LD_VAR 0 1
51905: PPUSH
51906: CALL_OW 301
51910: IFFALSE 51858
// end ;
51912: PPOPN 1
51914: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
51915: LD_EXP 33
51919: PUSH
51920: LD_EXP 73
51924: AND
51925: IFFALSE 51937
51927: GO 51929
51929: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
51930: LD_STRING earthquake(getX(game), 0, 32)
51932: PPUSH
51933: CALL_OW 559
51937: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
51938: LD_EXP 33
51942: PUSH
51943: LD_EXP 74
51947: AND
51948: IFFALSE 52039
51950: GO 51952
51952: DISABLE
51953: LD_INT 0
51955: PPUSH
// begin enable ;
51956: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
51957: LD_ADDR_VAR 0 1
51961: PUSH
51962: LD_INT 22
51964: PUSH
51965: LD_OWVAR 2
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 21
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 33
51986: PUSH
51987: LD_INT 3
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: LIST
51998: PPUSH
51999: CALL_OW 69
52003: ST_TO_ADDR
// if not tmp then
52004: LD_VAR 0 1
52008: NOT
52009: IFFALSE 52013
// exit ;
52011: GO 52039
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
52013: LD_VAR 0 1
52017: PUSH
52018: LD_INT 1
52020: PPUSH
52021: LD_VAR 0 1
52025: PPUSH
52026: CALL_OW 12
52030: ARRAY
52031: PPUSH
52032: LD_INT 1
52034: PPUSH
52035: CALL_OW 234
// end ;
52039: PPOPN 1
52041: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
52042: LD_EXP 33
52046: PUSH
52047: LD_EXP 75
52051: AND
52052: IFFALSE 52193
52054: GO 52056
52056: DISABLE
52057: LD_INT 0
52059: PPUSH
52060: PPUSH
52061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52062: LD_ADDR_VAR 0 3
52066: PUSH
52067: LD_INT 22
52069: PUSH
52070: LD_OWVAR 2
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 25
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PPUSH
52093: CALL_OW 69
52097: ST_TO_ADDR
// if not tmp then
52098: LD_VAR 0 3
52102: NOT
52103: IFFALSE 52107
// exit ;
52105: GO 52193
// un := tmp [ rand ( 1 , tmp ) ] ;
52107: LD_ADDR_VAR 0 2
52111: PUSH
52112: LD_VAR 0 3
52116: PUSH
52117: LD_INT 1
52119: PPUSH
52120: LD_VAR 0 3
52124: PPUSH
52125: CALL_OW 12
52129: ARRAY
52130: ST_TO_ADDR
// if Crawls ( un ) then
52131: LD_VAR 0 2
52135: PPUSH
52136: CALL_OW 318
52140: IFFALSE 52151
// ComWalk ( un ) ;
52142: LD_VAR 0 2
52146: PPUSH
52147: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
52151: LD_VAR 0 2
52155: PPUSH
52156: LD_INT 9
52158: PPUSH
52159: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
52163: LD_INT 28
52165: PPUSH
52166: LD_OWVAR 2
52170: PPUSH
52171: LD_INT 2
52173: PPUSH
52174: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
52178: LD_INT 29
52180: PPUSH
52181: LD_OWVAR 2
52185: PPUSH
52186: LD_INT 2
52188: PPUSH
52189: CALL_OW 322
// end ;
52193: PPOPN 3
52195: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
52196: LD_EXP 33
52200: PUSH
52201: LD_EXP 76
52205: AND
52206: IFFALSE 52317
52208: GO 52210
52210: DISABLE
52211: LD_INT 0
52213: PPUSH
52214: PPUSH
52215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52216: LD_ADDR_VAR 0 3
52220: PUSH
52221: LD_INT 22
52223: PUSH
52224: LD_OWVAR 2
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 25
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PPUSH
52247: CALL_OW 69
52251: ST_TO_ADDR
// if not tmp then
52252: LD_VAR 0 3
52256: NOT
52257: IFFALSE 52261
// exit ;
52259: GO 52317
// un := tmp [ rand ( 1 , tmp ) ] ;
52261: LD_ADDR_VAR 0 2
52265: PUSH
52266: LD_VAR 0 3
52270: PUSH
52271: LD_INT 1
52273: PPUSH
52274: LD_VAR 0 3
52278: PPUSH
52279: CALL_OW 12
52283: ARRAY
52284: ST_TO_ADDR
// if Crawls ( un ) then
52285: LD_VAR 0 2
52289: PPUSH
52290: CALL_OW 318
52294: IFFALSE 52305
// ComWalk ( un ) ;
52296: LD_VAR 0 2
52300: PPUSH
52301: CALL_OW 138
// SetClass ( un , class_mortar ) ;
52305: LD_VAR 0 2
52309: PPUSH
52310: LD_INT 8
52312: PPUSH
52313: CALL_OW 336
// end ;
52317: PPOPN 3
52319: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
52320: LD_EXP 33
52324: PUSH
52325: LD_EXP 77
52329: AND
52330: IFFALSE 52474
52332: GO 52334
52334: DISABLE
52335: LD_INT 0
52337: PPUSH
52338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
52339: LD_ADDR_VAR 0 2
52343: PUSH
52344: LD_INT 22
52346: PUSH
52347: LD_OWVAR 2
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 21
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 2
52368: PUSH
52369: LD_INT 34
52371: PUSH
52372: LD_INT 12
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 34
52381: PUSH
52382: LD_INT 51
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 34
52391: PUSH
52392: LD_INT 32
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: LIST
52409: PPUSH
52410: CALL_OW 69
52414: ST_TO_ADDR
// if not tmp then
52415: LD_VAR 0 2
52419: NOT
52420: IFFALSE 52424
// exit ;
52422: GO 52474
// for i in tmp do
52424: LD_ADDR_VAR 0 1
52428: PUSH
52429: LD_VAR 0 2
52433: PUSH
52434: FOR_IN
52435: IFFALSE 52472
// if GetCargo ( i , mat_artifact ) = 0 then
52437: LD_VAR 0 1
52441: PPUSH
52442: LD_INT 4
52444: PPUSH
52445: CALL_OW 289
52449: PUSH
52450: LD_INT 0
52452: EQUAL
52453: IFFALSE 52470
// SetCargo ( i , mat_siberit , 100 ) ;
52455: LD_VAR 0 1
52459: PPUSH
52460: LD_INT 3
52462: PPUSH
52463: LD_INT 100
52465: PPUSH
52466: CALL_OW 290
52470: GO 52434
52472: POP
52473: POP
// end ;
52474: PPOPN 2
52476: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
52477: LD_EXP 33
52481: PUSH
52482: LD_EXP 78
52486: AND
52487: IFFALSE 52670
52489: GO 52491
52491: DISABLE
52492: LD_INT 0
52494: PPUSH
52495: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
52496: LD_ADDR_VAR 0 2
52500: PUSH
52501: LD_INT 22
52503: PUSH
52504: LD_OWVAR 2
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PPUSH
52513: CALL_OW 69
52517: ST_TO_ADDR
// if not tmp then
52518: LD_VAR 0 2
52522: NOT
52523: IFFALSE 52527
// exit ;
52525: GO 52670
// for i := 1 to 2 do
52527: LD_ADDR_VAR 0 1
52531: PUSH
52532: DOUBLE
52533: LD_INT 1
52535: DEC
52536: ST_TO_ADDR
52537: LD_INT 2
52539: PUSH
52540: FOR_TO
52541: IFFALSE 52668
// begin uc_side := your_side ;
52543: LD_ADDR_OWVAR 20
52547: PUSH
52548: LD_OWVAR 2
52552: ST_TO_ADDR
// uc_nation := nation_american ;
52553: LD_ADDR_OWVAR 21
52557: PUSH
52558: LD_INT 1
52560: ST_TO_ADDR
// vc_chassis := us_morphling ;
52561: LD_ADDR_OWVAR 37
52565: PUSH
52566: LD_INT 5
52568: ST_TO_ADDR
// vc_engine := engine_siberite ;
52569: LD_ADDR_OWVAR 39
52573: PUSH
52574: LD_INT 3
52576: ST_TO_ADDR
// vc_control := control_computer ;
52577: LD_ADDR_OWVAR 38
52581: PUSH
52582: LD_INT 3
52584: ST_TO_ADDR
// vc_weapon := us_double_laser ;
52585: LD_ADDR_OWVAR 40
52589: PUSH
52590: LD_INT 10
52592: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
52593: LD_VAR 0 2
52597: PUSH
52598: LD_INT 1
52600: ARRAY
52601: PPUSH
52602: CALL_OW 310
52606: NOT
52607: IFFALSE 52654
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
52609: CALL_OW 45
52613: PPUSH
52614: LD_VAR 0 2
52618: PUSH
52619: LD_INT 1
52621: ARRAY
52622: PPUSH
52623: CALL_OW 250
52627: PPUSH
52628: LD_VAR 0 2
52632: PUSH
52633: LD_INT 1
52635: ARRAY
52636: PPUSH
52637: CALL_OW 251
52641: PPUSH
52642: LD_INT 12
52644: PPUSH
52645: LD_INT 1
52647: PPUSH
52648: CALL_OW 50
52652: GO 52666
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
52654: CALL_OW 45
52658: PPUSH
52659: LD_INT 1
52661: PPUSH
52662: CALL_OW 51
// end ;
52666: GO 52540
52668: POP
52669: POP
// end ;
52670: PPOPN 2
52672: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
52673: LD_EXP 33
52677: PUSH
52678: LD_EXP 79
52682: AND
52683: IFFALSE 52905
52685: GO 52687
52687: DISABLE
52688: LD_INT 0
52690: PPUSH
52691: PPUSH
52692: PPUSH
52693: PPUSH
52694: PPUSH
52695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
52696: LD_ADDR_VAR 0 6
52700: PUSH
52701: LD_INT 22
52703: PUSH
52704: LD_OWVAR 2
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 21
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 3
52725: PUSH
52726: LD_INT 23
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: LIST
52744: PPUSH
52745: CALL_OW 69
52749: ST_TO_ADDR
// if not tmp then
52750: LD_VAR 0 6
52754: NOT
52755: IFFALSE 52759
// exit ;
52757: GO 52905
// s1 := rand ( 1 , 4 ) ;
52759: LD_ADDR_VAR 0 2
52763: PUSH
52764: LD_INT 1
52766: PPUSH
52767: LD_INT 4
52769: PPUSH
52770: CALL_OW 12
52774: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
52775: LD_ADDR_VAR 0 4
52779: PUSH
52780: LD_VAR 0 6
52784: PUSH
52785: LD_INT 1
52787: ARRAY
52788: PPUSH
52789: LD_VAR 0 2
52793: PPUSH
52794: CALL_OW 259
52798: ST_TO_ADDR
// if s1 = 1 then
52799: LD_VAR 0 2
52803: PUSH
52804: LD_INT 1
52806: EQUAL
52807: IFFALSE 52827
// s2 := rand ( 2 , 4 ) else
52809: LD_ADDR_VAR 0 3
52813: PUSH
52814: LD_INT 2
52816: PPUSH
52817: LD_INT 4
52819: PPUSH
52820: CALL_OW 12
52824: ST_TO_ADDR
52825: GO 52835
// s2 := 1 ;
52827: LD_ADDR_VAR 0 3
52831: PUSH
52832: LD_INT 1
52834: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
52835: LD_ADDR_VAR 0 5
52839: PUSH
52840: LD_VAR 0 6
52844: PUSH
52845: LD_INT 1
52847: ARRAY
52848: PPUSH
52849: LD_VAR 0 3
52853: PPUSH
52854: CALL_OW 259
52858: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
52859: LD_VAR 0 6
52863: PUSH
52864: LD_INT 1
52866: ARRAY
52867: PPUSH
52868: LD_VAR 0 2
52872: PPUSH
52873: LD_VAR 0 5
52877: PPUSH
52878: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
52882: LD_VAR 0 6
52886: PUSH
52887: LD_INT 1
52889: ARRAY
52890: PPUSH
52891: LD_VAR 0 3
52895: PPUSH
52896: LD_VAR 0 4
52900: PPUSH
52901: CALL_OW 237
// end ;
52905: PPOPN 6
52907: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
52908: LD_EXP 33
52912: PUSH
52913: LD_EXP 80
52917: AND
52918: IFFALSE 52997
52920: GO 52922
52922: DISABLE
52923: LD_INT 0
52925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
52926: LD_ADDR_VAR 0 1
52930: PUSH
52931: LD_INT 22
52933: PUSH
52934: LD_OWVAR 2
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 30
52945: PUSH
52946: LD_INT 3
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PPUSH
52957: CALL_OW 69
52961: ST_TO_ADDR
// if not tmp then
52962: LD_VAR 0 1
52966: NOT
52967: IFFALSE 52971
// exit ;
52969: GO 52997
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
52971: LD_VAR 0 1
52975: PUSH
52976: LD_INT 1
52978: PPUSH
52979: LD_VAR 0 1
52983: PPUSH
52984: CALL_OW 12
52988: ARRAY
52989: PPUSH
52990: LD_INT 1
52992: PPUSH
52993: CALL_OW 234
// end ;
52997: PPOPN 1
52999: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
53000: LD_EXP 33
53004: PUSH
53005: LD_EXP 81
53009: AND
53010: IFFALSE 53122
53012: GO 53014
53014: DISABLE
53015: LD_INT 0
53017: PPUSH
53018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
53019: LD_ADDR_VAR 0 2
53023: PUSH
53024: LD_INT 22
53026: PUSH
53027: LD_OWVAR 2
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: LD_INT 30
53041: PUSH
53042: LD_INT 27
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 30
53051: PUSH
53052: LD_INT 26
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 30
53061: PUSH
53062: LD_INT 28
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PPUSH
53079: CALL_OW 69
53083: ST_TO_ADDR
// if not tmp then
53084: LD_VAR 0 2
53088: NOT
53089: IFFALSE 53093
// exit ;
53091: GO 53122
// for i in tmp do
53093: LD_ADDR_VAR 0 1
53097: PUSH
53098: LD_VAR 0 2
53102: PUSH
53103: FOR_IN
53104: IFFALSE 53120
// SetLives ( i , 1 ) ;
53106: LD_VAR 0 1
53110: PPUSH
53111: LD_INT 1
53113: PPUSH
53114: CALL_OW 234
53118: GO 53103
53120: POP
53121: POP
// end ;
53122: PPOPN 2
53124: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
53125: LD_EXP 33
53129: PUSH
53130: LD_EXP 82
53134: AND
53135: IFFALSE 53409
53137: GO 53139
53139: DISABLE
53140: LD_INT 0
53142: PPUSH
53143: PPUSH
53144: PPUSH
// begin i := rand ( 1 , 7 ) ;
53145: LD_ADDR_VAR 0 1
53149: PUSH
53150: LD_INT 1
53152: PPUSH
53153: LD_INT 7
53155: PPUSH
53156: CALL_OW 12
53160: ST_TO_ADDR
// case i of 1 :
53161: LD_VAR 0 1
53165: PUSH
53166: LD_INT 1
53168: DOUBLE
53169: EQUAL
53170: IFTRUE 53174
53172: GO 53184
53174: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
53175: LD_STRING earthquake(getX(game), 0, 32)
53177: PPUSH
53178: CALL_OW 559
53182: GO 53409
53184: LD_INT 2
53186: DOUBLE
53187: EQUAL
53188: IFTRUE 53192
53190: GO 53206
53192: POP
// begin ToLua ( displayStucuk(); ) ;
53193: LD_STRING displayStucuk();
53195: PPUSH
53196: CALL_OW 559
// ResetFog ;
53200: CALL_OW 335
// end ; 3 :
53204: GO 53409
53206: LD_INT 3
53208: DOUBLE
53209: EQUAL
53210: IFTRUE 53214
53212: GO 53318
53214: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53215: LD_ADDR_VAR 0 2
53219: PUSH
53220: LD_INT 22
53222: PUSH
53223: LD_OWVAR 2
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 25
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PPUSH
53246: CALL_OW 69
53250: ST_TO_ADDR
// if not tmp then
53251: LD_VAR 0 2
53255: NOT
53256: IFFALSE 53260
// exit ;
53258: GO 53409
// un := tmp [ rand ( 1 , tmp ) ] ;
53260: LD_ADDR_VAR 0 3
53264: PUSH
53265: LD_VAR 0 2
53269: PUSH
53270: LD_INT 1
53272: PPUSH
53273: LD_VAR 0 2
53277: PPUSH
53278: CALL_OW 12
53282: ARRAY
53283: ST_TO_ADDR
// if Crawls ( un ) then
53284: LD_VAR 0 3
53288: PPUSH
53289: CALL_OW 318
53293: IFFALSE 53304
// ComWalk ( un ) ;
53295: LD_VAR 0 3
53299: PPUSH
53300: CALL_OW 138
// SetClass ( un , class_mortar ) ;
53304: LD_VAR 0 3
53308: PPUSH
53309: LD_INT 8
53311: PPUSH
53312: CALL_OW 336
// end ; 4 :
53316: GO 53409
53318: LD_INT 4
53320: DOUBLE
53321: EQUAL
53322: IFTRUE 53326
53324: GO 53387
53326: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
53327: LD_ADDR_VAR 0 2
53331: PUSH
53332: LD_INT 22
53334: PUSH
53335: LD_OWVAR 2
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 30
53346: PUSH
53347: LD_INT 29
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PPUSH
53358: CALL_OW 69
53362: ST_TO_ADDR
// if not tmp then
53363: LD_VAR 0 2
53367: NOT
53368: IFFALSE 53372
// exit ;
53370: GO 53409
// DestroyUnit ( tmp [ 1 ] ) ;
53372: LD_VAR 0 2
53376: PUSH
53377: LD_INT 1
53379: ARRAY
53380: PPUSH
53381: CALL_OW 65
// end ; 5 .. 7 :
53385: GO 53409
53387: LD_INT 5
53389: DOUBLE
53390: GREATEREQUAL
53391: IFFALSE 53399
53393: LD_INT 7
53395: DOUBLE
53396: LESSEQUAL
53397: IFTRUE 53401
53399: GO 53408
53401: POP
// StreamSibBomb ; end ;
53402: CALL 49659 0 0
53406: GO 53409
53408: POP
// end ;
53409: PPOPN 3
53411: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
53412: LD_EXP 33
53416: PUSH
53417: LD_EXP 83
53421: AND
53422: IFFALSE 53578
53424: GO 53426
53426: DISABLE
53427: LD_INT 0
53429: PPUSH
53430: PPUSH
53431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
53432: LD_ADDR_VAR 0 2
53436: PUSH
53437: LD_INT 81
53439: PUSH
53440: LD_OWVAR 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 2
53451: PUSH
53452: LD_INT 21
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 21
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: LIST
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PPUSH
53481: CALL_OW 69
53485: ST_TO_ADDR
// if not tmp then
53486: LD_VAR 0 2
53490: NOT
53491: IFFALSE 53495
// exit ;
53493: GO 53578
// p := 0 ;
53495: LD_ADDR_VAR 0 3
53499: PUSH
53500: LD_INT 0
53502: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
53503: LD_INT 35
53505: PPUSH
53506: CALL_OW 67
// p := p + 1 ;
53510: LD_ADDR_VAR 0 3
53514: PUSH
53515: LD_VAR 0 3
53519: PUSH
53520: LD_INT 1
53522: PLUS
53523: ST_TO_ADDR
// for i in tmp do
53524: LD_ADDR_VAR 0 1
53528: PUSH
53529: LD_VAR 0 2
53533: PUSH
53534: FOR_IN
53535: IFFALSE 53566
// if GetLives ( i ) < 1000 then
53537: LD_VAR 0 1
53541: PPUSH
53542: CALL_OW 256
53546: PUSH
53547: LD_INT 1000
53549: LESS
53550: IFFALSE 53564
// SetLives ( i , 1000 ) ;
53552: LD_VAR 0 1
53556: PPUSH
53557: LD_INT 1000
53559: PPUSH
53560: CALL_OW 234
53564: GO 53534
53566: POP
53567: POP
// until p > 20 ;
53568: LD_VAR 0 3
53572: PUSH
53573: LD_INT 20
53575: GREATER
53576: IFFALSE 53503
// end ;
53578: PPOPN 3
53580: END
// every 0 0$1 trigger StreamModeActive and sTime do
53581: LD_EXP 33
53585: PUSH
53586: LD_EXP 84
53590: AND
53591: IFFALSE 53626
53593: GO 53595
53595: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
53596: LD_INT 28
53598: PPUSH
53599: LD_OWVAR 2
53603: PPUSH
53604: LD_INT 2
53606: PPUSH
53607: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
53611: LD_INT 30
53613: PPUSH
53614: LD_OWVAR 2
53618: PPUSH
53619: LD_INT 2
53621: PPUSH
53622: CALL_OW 322
// end ;
53626: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
53627: LD_EXP 33
53631: PUSH
53632: LD_EXP 85
53636: AND
53637: IFFALSE 53758
53639: GO 53641
53641: DISABLE
53642: LD_INT 0
53644: PPUSH
53645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53646: LD_ADDR_VAR 0 2
53650: PUSH
53651: LD_INT 22
53653: PUSH
53654: LD_OWVAR 2
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 21
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 3
53675: PUSH
53676: LD_INT 23
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: LIST
53694: PPUSH
53695: CALL_OW 69
53699: ST_TO_ADDR
// if not tmp then
53700: LD_VAR 0 2
53704: NOT
53705: IFFALSE 53709
// exit ;
53707: GO 53758
// for i in tmp do
53709: LD_ADDR_VAR 0 1
53713: PUSH
53714: LD_VAR 0 2
53718: PUSH
53719: FOR_IN
53720: IFFALSE 53756
// begin if Crawls ( i ) then
53722: LD_VAR 0 1
53726: PPUSH
53727: CALL_OW 318
53731: IFFALSE 53742
// ComWalk ( i ) ;
53733: LD_VAR 0 1
53737: PPUSH
53738: CALL_OW 138
// SetClass ( i , 2 ) ;
53742: LD_VAR 0 1
53746: PPUSH
53747: LD_INT 2
53749: PPUSH
53750: CALL_OW 336
// end ;
53754: GO 53719
53756: POP
53757: POP
// end ;
53758: PPOPN 2
53760: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
53761: LD_EXP 33
53765: PUSH
53766: LD_EXP 86
53770: AND
53771: IFFALSE 54052
53773: GO 53775
53775: DISABLE
53776: LD_INT 0
53778: PPUSH
53779: PPUSH
53780: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
53781: LD_OWVAR 2
53785: PPUSH
53786: LD_INT 9
53788: PPUSH
53789: LD_INT 1
53791: PPUSH
53792: LD_INT 1
53794: PPUSH
53795: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
53799: LD_INT 9
53801: PPUSH
53802: LD_OWVAR 2
53806: PPUSH
53807: CALL_OW 343
// uc_side := 9 ;
53811: LD_ADDR_OWVAR 20
53815: PUSH
53816: LD_INT 9
53818: ST_TO_ADDR
// uc_nation := 2 ;
53819: LD_ADDR_OWVAR 21
53823: PUSH
53824: LD_INT 2
53826: ST_TO_ADDR
// hc_name := Dark Warrior ;
53827: LD_ADDR_OWVAR 26
53831: PUSH
53832: LD_STRING Dark Warrior
53834: ST_TO_ADDR
// hc_gallery :=  ;
53835: LD_ADDR_OWVAR 33
53839: PUSH
53840: LD_STRING 
53842: ST_TO_ADDR
// hc_noskilllimit := true ;
53843: LD_ADDR_OWVAR 76
53847: PUSH
53848: LD_INT 1
53850: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
53851: LD_ADDR_OWVAR 31
53855: PUSH
53856: LD_INT 30
53858: PUSH
53859: LD_INT 30
53861: PUSH
53862: LD_INT 30
53864: PUSH
53865: LD_INT 30
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: ST_TO_ADDR
// un := CreateHuman ;
53874: LD_ADDR_VAR 0 3
53878: PUSH
53879: CALL_OW 44
53883: ST_TO_ADDR
// hc_noskilllimit := false ;
53884: LD_ADDR_OWVAR 76
53888: PUSH
53889: LD_INT 0
53891: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53892: LD_VAR 0 3
53896: PPUSH
53897: LD_INT 1
53899: PPUSH
53900: CALL_OW 51
// p := 0 ;
53904: LD_ADDR_VAR 0 2
53908: PUSH
53909: LD_INT 0
53911: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
53912: LD_INT 35
53914: PPUSH
53915: CALL_OW 67
// p := p + 1 ;
53919: LD_ADDR_VAR 0 2
53923: PUSH
53924: LD_VAR 0 2
53928: PUSH
53929: LD_INT 1
53931: PLUS
53932: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
53933: LD_VAR 0 3
53937: PPUSH
53938: CALL_OW 256
53942: PUSH
53943: LD_INT 1000
53945: LESS
53946: IFFALSE 53960
// SetLives ( un , 1000 ) ;
53948: LD_VAR 0 3
53952: PPUSH
53953: LD_INT 1000
53955: PPUSH
53956: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
53960: LD_VAR 0 3
53964: PPUSH
53965: LD_INT 81
53967: PUSH
53968: LD_OWVAR 2
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 91
53979: PUSH
53980: LD_VAR 0 3
53984: PUSH
53985: LD_INT 30
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: LIST
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PPUSH
53997: CALL_OW 69
54001: PPUSH
54002: LD_VAR 0 3
54006: PPUSH
54007: CALL_OW 74
54011: PPUSH
54012: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
54016: LD_VAR 0 2
54020: PUSH
54021: LD_INT 60
54023: GREATER
54024: PUSH
54025: LD_VAR 0 3
54029: PPUSH
54030: CALL_OW 301
54034: OR
54035: IFFALSE 53912
// if un then
54037: LD_VAR 0 3
54041: IFFALSE 54052
// RemoveUnit ( un ) ;
54043: LD_VAR 0 3
54047: PPUSH
54048: CALL_OW 64
// end ;
54052: PPOPN 3
54054: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
54055: LD_INT 0
54057: PPUSH
// case cmd of 301 :
54058: LD_VAR 0 1
54062: PUSH
54063: LD_INT 301
54065: DOUBLE
54066: EQUAL
54067: IFTRUE 54071
54069: GO 54103
54071: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
54072: LD_VAR 0 6
54076: PPUSH
54077: LD_VAR 0 7
54081: PPUSH
54082: LD_VAR 0 8
54086: PPUSH
54087: LD_VAR 0 4
54091: PPUSH
54092: LD_VAR 0 5
54096: PPUSH
54097: CALL 55304 0 5
54101: GO 54224
54103: LD_INT 302
54105: DOUBLE
54106: EQUAL
54107: IFTRUE 54111
54109: GO 54148
54111: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
54112: LD_VAR 0 6
54116: PPUSH
54117: LD_VAR 0 7
54121: PPUSH
54122: LD_VAR 0 8
54126: PPUSH
54127: LD_VAR 0 9
54131: PPUSH
54132: LD_VAR 0 4
54136: PPUSH
54137: LD_VAR 0 5
54141: PPUSH
54142: CALL 55395 0 6
54146: GO 54224
54148: LD_INT 303
54150: DOUBLE
54151: EQUAL
54152: IFTRUE 54156
54154: GO 54193
54156: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
54157: LD_VAR 0 6
54161: PPUSH
54162: LD_VAR 0 7
54166: PPUSH
54167: LD_VAR 0 8
54171: PPUSH
54172: LD_VAR 0 9
54176: PPUSH
54177: LD_VAR 0 4
54181: PPUSH
54182: LD_VAR 0 5
54186: PPUSH
54187: CALL 54229 0 6
54191: GO 54224
54193: LD_INT 304
54195: DOUBLE
54196: EQUAL
54197: IFTRUE 54201
54199: GO 54223
54201: POP
// hHackTeleport ( unit , x , y ) ; end ;
54202: LD_VAR 0 2
54206: PPUSH
54207: LD_VAR 0 4
54211: PPUSH
54212: LD_VAR 0 5
54216: PPUSH
54217: CALL 55988 0 3
54221: GO 54224
54223: POP
// end ;
54224: LD_VAR 0 12
54228: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
54229: LD_INT 0
54231: PPUSH
54232: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
54233: LD_VAR 0 1
54237: PUSH
54238: LD_INT 1
54240: LESS
54241: PUSH
54242: LD_VAR 0 1
54246: PUSH
54247: LD_INT 3
54249: GREATER
54250: OR
54251: PUSH
54252: LD_VAR 0 5
54256: PPUSH
54257: LD_VAR 0 6
54261: PPUSH
54262: CALL_OW 428
54266: OR
54267: IFFALSE 54271
// exit ;
54269: GO 54991
// uc_side := your_side ;
54271: LD_ADDR_OWVAR 20
54275: PUSH
54276: LD_OWVAR 2
54280: ST_TO_ADDR
// uc_nation := nation ;
54281: LD_ADDR_OWVAR 21
54285: PUSH
54286: LD_VAR 0 1
54290: ST_TO_ADDR
// bc_level = 1 ;
54291: LD_ADDR_OWVAR 43
54295: PUSH
54296: LD_INT 1
54298: ST_TO_ADDR
// case btype of 1 :
54299: LD_VAR 0 2
54303: PUSH
54304: LD_INT 1
54306: DOUBLE
54307: EQUAL
54308: IFTRUE 54312
54310: GO 54323
54312: POP
// bc_type := b_depot ; 2 :
54313: LD_ADDR_OWVAR 42
54317: PUSH
54318: LD_INT 0
54320: ST_TO_ADDR
54321: GO 54935
54323: LD_INT 2
54325: DOUBLE
54326: EQUAL
54327: IFTRUE 54331
54329: GO 54342
54331: POP
// bc_type := b_warehouse ; 3 :
54332: LD_ADDR_OWVAR 42
54336: PUSH
54337: LD_INT 1
54339: ST_TO_ADDR
54340: GO 54935
54342: LD_INT 3
54344: DOUBLE
54345: EQUAL
54346: IFTRUE 54350
54348: GO 54361
54350: POP
// bc_type := b_lab ; 4 .. 9 :
54351: LD_ADDR_OWVAR 42
54355: PUSH
54356: LD_INT 6
54358: ST_TO_ADDR
54359: GO 54935
54361: LD_INT 4
54363: DOUBLE
54364: GREATEREQUAL
54365: IFFALSE 54373
54367: LD_INT 9
54369: DOUBLE
54370: LESSEQUAL
54371: IFTRUE 54375
54373: GO 54427
54375: POP
// begin bc_type := b_lab_half ;
54376: LD_ADDR_OWVAR 42
54380: PUSH
54381: LD_INT 7
54383: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
54384: LD_ADDR_OWVAR 44
54388: PUSH
54389: LD_INT 10
54391: PUSH
54392: LD_INT 11
54394: PUSH
54395: LD_INT 12
54397: PUSH
54398: LD_INT 15
54400: PUSH
54401: LD_INT 14
54403: PUSH
54404: LD_INT 13
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: PUSH
54415: LD_VAR 0 2
54419: PUSH
54420: LD_INT 3
54422: MINUS
54423: ARRAY
54424: ST_TO_ADDR
// end ; 10 .. 13 :
54425: GO 54935
54427: LD_INT 10
54429: DOUBLE
54430: GREATEREQUAL
54431: IFFALSE 54439
54433: LD_INT 13
54435: DOUBLE
54436: LESSEQUAL
54437: IFTRUE 54441
54439: GO 54518
54441: POP
// begin bc_type := b_lab_full ;
54442: LD_ADDR_OWVAR 42
54446: PUSH
54447: LD_INT 8
54449: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
54450: LD_ADDR_OWVAR 44
54454: PUSH
54455: LD_INT 10
54457: PUSH
54458: LD_INT 12
54460: PUSH
54461: LD_INT 14
54463: PUSH
54464: LD_INT 13
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: PUSH
54473: LD_VAR 0 2
54477: PUSH
54478: LD_INT 9
54480: MINUS
54481: ARRAY
54482: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
54483: LD_ADDR_OWVAR 45
54487: PUSH
54488: LD_INT 11
54490: PUSH
54491: LD_INT 15
54493: PUSH
54494: LD_INT 12
54496: PUSH
54497: LD_INT 15
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: PUSH
54506: LD_VAR 0 2
54510: PUSH
54511: LD_INT 9
54513: MINUS
54514: ARRAY
54515: ST_TO_ADDR
// end ; 14 :
54516: GO 54935
54518: LD_INT 14
54520: DOUBLE
54521: EQUAL
54522: IFTRUE 54526
54524: GO 54537
54526: POP
// bc_type := b_workshop ; 15 :
54527: LD_ADDR_OWVAR 42
54531: PUSH
54532: LD_INT 2
54534: ST_TO_ADDR
54535: GO 54935
54537: LD_INT 15
54539: DOUBLE
54540: EQUAL
54541: IFTRUE 54545
54543: GO 54556
54545: POP
// bc_type := b_factory ; 16 :
54546: LD_ADDR_OWVAR 42
54550: PUSH
54551: LD_INT 3
54553: ST_TO_ADDR
54554: GO 54935
54556: LD_INT 16
54558: DOUBLE
54559: EQUAL
54560: IFTRUE 54564
54562: GO 54575
54564: POP
// bc_type := b_ext_gun ; 17 :
54565: LD_ADDR_OWVAR 42
54569: PUSH
54570: LD_INT 17
54572: ST_TO_ADDR
54573: GO 54935
54575: LD_INT 17
54577: DOUBLE
54578: EQUAL
54579: IFTRUE 54583
54581: GO 54611
54583: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
54584: LD_ADDR_OWVAR 42
54588: PUSH
54589: LD_INT 19
54591: PUSH
54592: LD_INT 23
54594: PUSH
54595: LD_INT 19
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: LIST
54602: PUSH
54603: LD_VAR 0 1
54607: ARRAY
54608: ST_TO_ADDR
54609: GO 54935
54611: LD_INT 18
54613: DOUBLE
54614: EQUAL
54615: IFTRUE 54619
54617: GO 54630
54619: POP
// bc_type := b_ext_radar ; 19 :
54620: LD_ADDR_OWVAR 42
54624: PUSH
54625: LD_INT 20
54627: ST_TO_ADDR
54628: GO 54935
54630: LD_INT 19
54632: DOUBLE
54633: EQUAL
54634: IFTRUE 54638
54636: GO 54649
54638: POP
// bc_type := b_ext_radio ; 20 :
54639: LD_ADDR_OWVAR 42
54643: PUSH
54644: LD_INT 22
54646: ST_TO_ADDR
54647: GO 54935
54649: LD_INT 20
54651: DOUBLE
54652: EQUAL
54653: IFTRUE 54657
54655: GO 54668
54657: POP
// bc_type := b_ext_siberium ; 21 :
54658: LD_ADDR_OWVAR 42
54662: PUSH
54663: LD_INT 21
54665: ST_TO_ADDR
54666: GO 54935
54668: LD_INT 21
54670: DOUBLE
54671: EQUAL
54672: IFTRUE 54676
54674: GO 54687
54676: POP
// bc_type := b_ext_computer ; 22 :
54677: LD_ADDR_OWVAR 42
54681: PUSH
54682: LD_INT 24
54684: ST_TO_ADDR
54685: GO 54935
54687: LD_INT 22
54689: DOUBLE
54690: EQUAL
54691: IFTRUE 54695
54693: GO 54706
54695: POP
// bc_type := b_ext_track ; 23 :
54696: LD_ADDR_OWVAR 42
54700: PUSH
54701: LD_INT 16
54703: ST_TO_ADDR
54704: GO 54935
54706: LD_INT 23
54708: DOUBLE
54709: EQUAL
54710: IFTRUE 54714
54712: GO 54725
54714: POP
// bc_type := b_ext_laser ; 24 :
54715: LD_ADDR_OWVAR 42
54719: PUSH
54720: LD_INT 25
54722: ST_TO_ADDR
54723: GO 54935
54725: LD_INT 24
54727: DOUBLE
54728: EQUAL
54729: IFTRUE 54733
54731: GO 54744
54733: POP
// bc_type := b_control_tower ; 25 :
54734: LD_ADDR_OWVAR 42
54738: PUSH
54739: LD_INT 36
54741: ST_TO_ADDR
54742: GO 54935
54744: LD_INT 25
54746: DOUBLE
54747: EQUAL
54748: IFTRUE 54752
54750: GO 54763
54752: POP
// bc_type := b_breastwork ; 26 :
54753: LD_ADDR_OWVAR 42
54757: PUSH
54758: LD_INT 31
54760: ST_TO_ADDR
54761: GO 54935
54763: LD_INT 26
54765: DOUBLE
54766: EQUAL
54767: IFTRUE 54771
54769: GO 54782
54771: POP
// bc_type := b_bunker ; 27 :
54772: LD_ADDR_OWVAR 42
54776: PUSH
54777: LD_INT 32
54779: ST_TO_ADDR
54780: GO 54935
54782: LD_INT 27
54784: DOUBLE
54785: EQUAL
54786: IFTRUE 54790
54788: GO 54801
54790: POP
// bc_type := b_turret ; 28 :
54791: LD_ADDR_OWVAR 42
54795: PUSH
54796: LD_INT 33
54798: ST_TO_ADDR
54799: GO 54935
54801: LD_INT 28
54803: DOUBLE
54804: EQUAL
54805: IFTRUE 54809
54807: GO 54820
54809: POP
// bc_type := b_armoury ; 29 :
54810: LD_ADDR_OWVAR 42
54814: PUSH
54815: LD_INT 4
54817: ST_TO_ADDR
54818: GO 54935
54820: LD_INT 29
54822: DOUBLE
54823: EQUAL
54824: IFTRUE 54828
54826: GO 54839
54828: POP
// bc_type := b_barracks ; 30 :
54829: LD_ADDR_OWVAR 42
54833: PUSH
54834: LD_INT 5
54836: ST_TO_ADDR
54837: GO 54935
54839: LD_INT 30
54841: DOUBLE
54842: EQUAL
54843: IFTRUE 54847
54845: GO 54858
54847: POP
// bc_type := b_solar_power ; 31 :
54848: LD_ADDR_OWVAR 42
54852: PUSH
54853: LD_INT 27
54855: ST_TO_ADDR
54856: GO 54935
54858: LD_INT 31
54860: DOUBLE
54861: EQUAL
54862: IFTRUE 54866
54864: GO 54877
54866: POP
// bc_type := b_oil_power ; 32 :
54867: LD_ADDR_OWVAR 42
54871: PUSH
54872: LD_INT 26
54874: ST_TO_ADDR
54875: GO 54935
54877: LD_INT 32
54879: DOUBLE
54880: EQUAL
54881: IFTRUE 54885
54883: GO 54896
54885: POP
// bc_type := b_siberite_power ; 33 :
54886: LD_ADDR_OWVAR 42
54890: PUSH
54891: LD_INT 28
54893: ST_TO_ADDR
54894: GO 54935
54896: LD_INT 33
54898: DOUBLE
54899: EQUAL
54900: IFTRUE 54904
54902: GO 54915
54904: POP
// bc_type := b_oil_mine ; 34 :
54905: LD_ADDR_OWVAR 42
54909: PUSH
54910: LD_INT 29
54912: ST_TO_ADDR
54913: GO 54935
54915: LD_INT 34
54917: DOUBLE
54918: EQUAL
54919: IFTRUE 54923
54921: GO 54934
54923: POP
// bc_type := b_siberite_mine ; end ;
54924: LD_ADDR_OWVAR 42
54928: PUSH
54929: LD_INT 30
54931: ST_TO_ADDR
54932: GO 54935
54934: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
54935: LD_ADDR_VAR 0 8
54939: PUSH
54940: LD_VAR 0 5
54944: PPUSH
54945: LD_VAR 0 6
54949: PPUSH
54950: LD_VAR 0 3
54954: PPUSH
54955: CALL_OW 47
54959: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
54960: LD_OWVAR 42
54964: PUSH
54965: LD_INT 32
54967: PUSH
54968: LD_INT 33
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: IN
54975: IFFALSE 54991
// PlaceWeaponTurret ( b , weapon ) ;
54977: LD_VAR 0 8
54981: PPUSH
54982: LD_VAR 0 4
54986: PPUSH
54987: CALL_OW 431
// end ;
54991: LD_VAR 0 7
54995: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
54996: LD_INT 0
54998: PPUSH
54999: PPUSH
55000: PPUSH
55001: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55002: LD_ADDR_VAR 0 4
55006: PUSH
55007: LD_INT 22
55009: PUSH
55010: LD_OWVAR 2
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: LD_INT 30
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 30
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: LIST
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PPUSH
55051: CALL_OW 69
55055: ST_TO_ADDR
// if not tmp then
55056: LD_VAR 0 4
55060: NOT
55061: IFFALSE 55065
// exit ;
55063: GO 55124
// for i in tmp do
55065: LD_ADDR_VAR 0 2
55069: PUSH
55070: LD_VAR 0 4
55074: PUSH
55075: FOR_IN
55076: IFFALSE 55122
// for j = 1 to 3 do
55078: LD_ADDR_VAR 0 3
55082: PUSH
55083: DOUBLE
55084: LD_INT 1
55086: DEC
55087: ST_TO_ADDR
55088: LD_INT 3
55090: PUSH
55091: FOR_TO
55092: IFFALSE 55118
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
55094: LD_VAR 0 2
55098: PPUSH
55099: CALL_OW 274
55103: PPUSH
55104: LD_VAR 0 3
55108: PPUSH
55109: LD_INT 99999
55111: PPUSH
55112: CALL_OW 277
55116: GO 55091
55118: POP
55119: POP
55120: GO 55075
55122: POP
55123: POP
// end ;
55124: LD_VAR 0 1
55128: RET
// export function hHackSetLevel10 ; var i , j ; begin
55129: LD_INT 0
55131: PPUSH
55132: PPUSH
55133: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
55134: LD_ADDR_VAR 0 2
55138: PUSH
55139: LD_INT 21
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PPUSH
55149: CALL_OW 69
55153: PUSH
55154: FOR_IN
55155: IFFALSE 55207
// if IsSelected ( i ) then
55157: LD_VAR 0 2
55161: PPUSH
55162: CALL_OW 306
55166: IFFALSE 55205
// begin for j := 1 to 4 do
55168: LD_ADDR_VAR 0 3
55172: PUSH
55173: DOUBLE
55174: LD_INT 1
55176: DEC
55177: ST_TO_ADDR
55178: LD_INT 4
55180: PUSH
55181: FOR_TO
55182: IFFALSE 55203
// SetSkill ( i , j , 10 ) ;
55184: LD_VAR 0 2
55188: PPUSH
55189: LD_VAR 0 3
55193: PPUSH
55194: LD_INT 10
55196: PPUSH
55197: CALL_OW 237
55201: GO 55181
55203: POP
55204: POP
// end ;
55205: GO 55154
55207: POP
55208: POP
// end ;
55209: LD_VAR 0 1
55213: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
55214: LD_INT 0
55216: PPUSH
55217: PPUSH
55218: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
55219: LD_ADDR_VAR 0 2
55223: PUSH
55224: LD_INT 22
55226: PUSH
55227: LD_OWVAR 2
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 21
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PPUSH
55250: CALL_OW 69
55254: PUSH
55255: FOR_IN
55256: IFFALSE 55297
// begin for j := 1 to 4 do
55258: LD_ADDR_VAR 0 3
55262: PUSH
55263: DOUBLE
55264: LD_INT 1
55266: DEC
55267: ST_TO_ADDR
55268: LD_INT 4
55270: PUSH
55271: FOR_TO
55272: IFFALSE 55293
// SetSkill ( i , j , 10 ) ;
55274: LD_VAR 0 2
55278: PPUSH
55279: LD_VAR 0 3
55283: PPUSH
55284: LD_INT 10
55286: PPUSH
55287: CALL_OW 237
55291: GO 55271
55293: POP
55294: POP
// end ;
55295: GO 55255
55297: POP
55298: POP
// end ;
55299: LD_VAR 0 1
55303: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
55304: LD_INT 0
55306: PPUSH
// uc_side := your_side ;
55307: LD_ADDR_OWVAR 20
55311: PUSH
55312: LD_OWVAR 2
55316: ST_TO_ADDR
// uc_nation := nation ;
55317: LD_ADDR_OWVAR 21
55321: PUSH
55322: LD_VAR 0 1
55326: ST_TO_ADDR
// InitHc ;
55327: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
55331: LD_INT 0
55333: PPUSH
55334: LD_VAR 0 2
55338: PPUSH
55339: LD_VAR 0 3
55343: PPUSH
55344: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
55348: LD_VAR 0 4
55352: PPUSH
55353: LD_VAR 0 5
55357: PPUSH
55358: CALL_OW 428
55362: PUSH
55363: LD_INT 0
55365: EQUAL
55366: IFFALSE 55390
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
55368: CALL_OW 44
55372: PPUSH
55373: LD_VAR 0 4
55377: PPUSH
55378: LD_VAR 0 5
55382: PPUSH
55383: LD_INT 1
55385: PPUSH
55386: CALL_OW 48
// end ;
55390: LD_VAR 0 6
55394: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
55395: LD_INT 0
55397: PPUSH
55398: PPUSH
// uc_side := your_side ;
55399: LD_ADDR_OWVAR 20
55403: PUSH
55404: LD_OWVAR 2
55408: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
55409: LD_VAR 0 1
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: LD_INT 3
55422: PUSH
55423: LD_INT 4
55425: PUSH
55426: LD_INT 5
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: IN
55436: IFFALSE 55448
// uc_nation := nation_american else
55438: LD_ADDR_OWVAR 21
55442: PUSH
55443: LD_INT 1
55445: ST_TO_ADDR
55446: GO 55491
// if chassis in [ 11 , 12 , 13 , 14 ] then
55448: LD_VAR 0 1
55452: PUSH
55453: LD_INT 11
55455: PUSH
55456: LD_INT 12
55458: PUSH
55459: LD_INT 13
55461: PUSH
55462: LD_INT 14
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: IN
55471: IFFALSE 55483
// uc_nation := nation_arabian else
55473: LD_ADDR_OWVAR 21
55477: PUSH
55478: LD_INT 2
55480: ST_TO_ADDR
55481: GO 55491
// uc_nation := nation_russian ;
55483: LD_ADDR_OWVAR 21
55487: PUSH
55488: LD_INT 3
55490: ST_TO_ADDR
// vc_chassis := chassis ;
55491: LD_ADDR_OWVAR 37
55495: PUSH
55496: LD_VAR 0 1
55500: ST_TO_ADDR
// vc_engine := engine ;
55501: LD_ADDR_OWVAR 39
55505: PUSH
55506: LD_VAR 0 2
55510: ST_TO_ADDR
// vc_control := control ;
55511: LD_ADDR_OWVAR 38
55515: PUSH
55516: LD_VAR 0 3
55520: ST_TO_ADDR
// vc_weapon := weapon ;
55521: LD_ADDR_OWVAR 40
55525: PUSH
55526: LD_VAR 0 4
55530: ST_TO_ADDR
// un := CreateVehicle ;
55531: LD_ADDR_VAR 0 8
55535: PUSH
55536: CALL_OW 45
55540: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
55541: LD_VAR 0 8
55545: PPUSH
55546: LD_INT 0
55548: PPUSH
55549: LD_INT 5
55551: PPUSH
55552: CALL_OW 12
55556: PPUSH
55557: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
55561: LD_VAR 0 8
55565: PPUSH
55566: LD_VAR 0 5
55570: PPUSH
55571: LD_VAR 0 6
55575: PPUSH
55576: LD_INT 1
55578: PPUSH
55579: CALL_OW 48
// end ;
55583: LD_VAR 0 7
55587: RET
// export hInvincible ; every 1 do
55588: GO 55590
55590: DISABLE
// hInvincible := [ ] ;
55591: LD_ADDR_EXP 87
55595: PUSH
55596: EMPTY
55597: ST_TO_ADDR
55598: END
// every 10 do var i ;
55599: GO 55601
55601: DISABLE
55602: LD_INT 0
55604: PPUSH
// begin enable ;
55605: ENABLE
// if not hInvincible then
55606: LD_EXP 87
55610: NOT
55611: IFFALSE 55615
// exit ;
55613: GO 55659
// for i in hInvincible do
55615: LD_ADDR_VAR 0 1
55619: PUSH
55620: LD_EXP 87
55624: PUSH
55625: FOR_IN
55626: IFFALSE 55657
// if GetLives ( i ) < 1000 then
55628: LD_VAR 0 1
55632: PPUSH
55633: CALL_OW 256
55637: PUSH
55638: LD_INT 1000
55640: LESS
55641: IFFALSE 55655
// SetLives ( i , 1000 ) ;
55643: LD_VAR 0 1
55647: PPUSH
55648: LD_INT 1000
55650: PPUSH
55651: CALL_OW 234
55655: GO 55625
55657: POP
55658: POP
// end ;
55659: PPOPN 1
55661: END
// export function hHackInvincible ; var i ; begin
55662: LD_INT 0
55664: PPUSH
55665: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
55666: LD_ADDR_VAR 0 2
55670: PUSH
55671: LD_INT 2
55673: PUSH
55674: LD_INT 21
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 21
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: PPUSH
55699: CALL_OW 69
55703: PUSH
55704: FOR_IN
55705: IFFALSE 55766
// if IsSelected ( i ) then
55707: LD_VAR 0 2
55711: PPUSH
55712: CALL_OW 306
55716: IFFALSE 55764
// begin if i in hInvincible then
55718: LD_VAR 0 2
55722: PUSH
55723: LD_EXP 87
55727: IN
55728: IFFALSE 55748
// hInvincible := hInvincible diff i else
55730: LD_ADDR_EXP 87
55734: PUSH
55735: LD_EXP 87
55739: PUSH
55740: LD_VAR 0 2
55744: DIFF
55745: ST_TO_ADDR
55746: GO 55764
// hInvincible := hInvincible union i ;
55748: LD_ADDR_EXP 87
55752: PUSH
55753: LD_EXP 87
55757: PUSH
55758: LD_VAR 0 2
55762: UNION
55763: ST_TO_ADDR
// end ;
55764: GO 55704
55766: POP
55767: POP
// end ;
55768: LD_VAR 0 1
55772: RET
// export function hHackInvisible ; var i , j ; begin
55773: LD_INT 0
55775: PPUSH
55776: PPUSH
55777: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
55778: LD_ADDR_VAR 0 2
55782: PUSH
55783: LD_INT 21
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PPUSH
55793: CALL_OW 69
55797: PUSH
55798: FOR_IN
55799: IFFALSE 55823
// if IsSelected ( i ) then
55801: LD_VAR 0 2
55805: PPUSH
55806: CALL_OW 306
55810: IFFALSE 55821
// ComForceInvisible ( i ) ;
55812: LD_VAR 0 2
55816: PPUSH
55817: CALL_OW 496
55821: GO 55798
55823: POP
55824: POP
// end ;
55825: LD_VAR 0 1
55829: RET
// export function hHackChangeYourSide ; begin
55830: LD_INT 0
55832: PPUSH
// if your_side = 8 then
55833: LD_OWVAR 2
55837: PUSH
55838: LD_INT 8
55840: EQUAL
55841: IFFALSE 55853
// your_side := 0 else
55843: LD_ADDR_OWVAR 2
55847: PUSH
55848: LD_INT 0
55850: ST_TO_ADDR
55851: GO 55867
// your_side := your_side + 1 ;
55853: LD_ADDR_OWVAR 2
55857: PUSH
55858: LD_OWVAR 2
55862: PUSH
55863: LD_INT 1
55865: PLUS
55866: ST_TO_ADDR
// end ;
55867: LD_VAR 0 1
55871: RET
// export function hHackChangeUnitSide ; var i , j ; begin
55872: LD_INT 0
55874: PPUSH
55875: PPUSH
55876: PPUSH
// for i in all_units do
55877: LD_ADDR_VAR 0 2
55881: PUSH
55882: LD_OWVAR 3
55886: PUSH
55887: FOR_IN
55888: IFFALSE 55966
// if IsSelected ( i ) then
55890: LD_VAR 0 2
55894: PPUSH
55895: CALL_OW 306
55899: IFFALSE 55964
// begin j := GetSide ( i ) ;
55901: LD_ADDR_VAR 0 3
55905: PUSH
55906: LD_VAR 0 2
55910: PPUSH
55911: CALL_OW 255
55915: ST_TO_ADDR
// if j = 8 then
55916: LD_VAR 0 3
55920: PUSH
55921: LD_INT 8
55923: EQUAL
55924: IFFALSE 55936
// j := 0 else
55926: LD_ADDR_VAR 0 3
55930: PUSH
55931: LD_INT 0
55933: ST_TO_ADDR
55934: GO 55950
// j := j + 1 ;
55936: LD_ADDR_VAR 0 3
55940: PUSH
55941: LD_VAR 0 3
55945: PUSH
55946: LD_INT 1
55948: PLUS
55949: ST_TO_ADDR
// SetSide ( i , j ) ;
55950: LD_VAR 0 2
55954: PPUSH
55955: LD_VAR 0 3
55959: PPUSH
55960: CALL_OW 235
// end ;
55964: GO 55887
55966: POP
55967: POP
// end ;
55968: LD_VAR 0 1
55972: RET
// export function hHackFog ; begin
55973: LD_INT 0
55975: PPUSH
// FogOff ( true ) ;
55976: LD_INT 1
55978: PPUSH
55979: CALL_OW 344
// end ;
55983: LD_VAR 0 1
55987: RET
// export function hHackTeleport ( unit , x , y ) ; begin
55988: LD_INT 0
55990: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
55991: LD_VAR 0 1
55995: PPUSH
55996: LD_VAR 0 2
56000: PPUSH
56001: LD_VAR 0 3
56005: PPUSH
56006: LD_INT 1
56008: PPUSH
56009: LD_INT 1
56011: PPUSH
56012: CALL_OW 483
// CenterOnXY ( x , y ) ;
56016: LD_VAR 0 2
56020: PPUSH
56021: LD_VAR 0 3
56025: PPUSH
56026: CALL_OW 84
// end ; end_of_file end_of_file
56030: LD_VAR 0 4
56034: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
56035: LD_INT 0
56037: PPUSH
56038: PPUSH
56039: PPUSH
56040: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
56041: LD_VAR 0 1
56045: PPUSH
56046: CALL_OW 264
56050: PUSH
56051: LD_EXP 7
56055: EQUAL
56056: IFFALSE 56128
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56058: LD_INT 68
56060: PPUSH
56061: LD_VAR 0 1
56065: PPUSH
56066: CALL_OW 255
56070: PPUSH
56071: CALL_OW 321
56075: PUSH
56076: LD_INT 2
56078: EQUAL
56079: IFFALSE 56091
// eff := 70 else
56081: LD_ADDR_VAR 0 4
56085: PUSH
56086: LD_INT 70
56088: ST_TO_ADDR
56089: GO 56099
// eff := 30 ;
56091: LD_ADDR_VAR 0 4
56095: PUSH
56096: LD_INT 30
56098: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56099: LD_VAR 0 1
56103: PPUSH
56104: CALL_OW 250
56108: PPUSH
56109: LD_VAR 0 1
56113: PPUSH
56114: CALL_OW 251
56118: PPUSH
56119: LD_VAR 0 4
56123: PPUSH
56124: CALL_OW 495
// end ; end ;
56128: LD_VAR 0 2
56132: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56133: LD_INT 0
56135: PPUSH
// end ;
56136: LD_VAR 0 4
56140: RET
// export function SOS_Command ( cmd ) ; begin
56141: LD_INT 0
56143: PPUSH
// end ;
56144: LD_VAR 0 2
56148: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56149: LD_INT 0
56151: PPUSH
// if cmd = 121 then
56152: LD_VAR 0 1
56156: PUSH
56157: LD_INT 121
56159: EQUAL
56160: IFFALSE 56162
// end ;
56162: LD_VAR 0 6
56166: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56167: LD_INT 0
56169: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56170: LD_VAR 0 1
56174: PUSH
56175: LD_INT 250
56177: EQUAL
56178: PUSH
56179: LD_VAR 0 2
56183: PPUSH
56184: CALL_OW 264
56188: PUSH
56189: LD_EXP 10
56193: EQUAL
56194: AND
56195: IFFALSE 56216
// MinerPlaceMine ( unit , x , y ) ;
56197: LD_VAR 0 2
56201: PPUSH
56202: LD_VAR 0 4
56206: PPUSH
56207: LD_VAR 0 5
56211: PPUSH
56212: CALL 58565 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56216: LD_VAR 0 1
56220: PUSH
56221: LD_INT 251
56223: EQUAL
56224: PUSH
56225: LD_VAR 0 2
56229: PPUSH
56230: CALL_OW 264
56234: PUSH
56235: LD_EXP 10
56239: EQUAL
56240: AND
56241: IFFALSE 56262
// MinerDetonateMine ( unit , x , y ) ;
56243: LD_VAR 0 2
56247: PPUSH
56248: LD_VAR 0 4
56252: PPUSH
56253: LD_VAR 0 5
56257: PPUSH
56258: CALL 58842 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56262: LD_VAR 0 1
56266: PUSH
56267: LD_INT 252
56269: EQUAL
56270: PUSH
56271: LD_VAR 0 2
56275: PPUSH
56276: CALL_OW 264
56280: PUSH
56281: LD_EXP 10
56285: EQUAL
56286: AND
56287: IFFALSE 56308
// MinerCreateMinefield ( unit , x , y ) ;
56289: LD_VAR 0 2
56293: PPUSH
56294: LD_VAR 0 4
56298: PPUSH
56299: LD_VAR 0 5
56303: PPUSH
56304: CALL 59259 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56308: LD_VAR 0 1
56312: PUSH
56313: LD_INT 253
56315: EQUAL
56316: PUSH
56317: LD_VAR 0 2
56321: PPUSH
56322: CALL_OW 257
56326: PUSH
56327: LD_INT 5
56329: EQUAL
56330: AND
56331: IFFALSE 56352
// ComBinocular ( unit , x , y ) ;
56333: LD_VAR 0 2
56337: PPUSH
56338: LD_VAR 0 4
56342: PPUSH
56343: LD_VAR 0 5
56347: PPUSH
56348: CALL 59630 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56352: LD_VAR 0 1
56356: PUSH
56357: LD_INT 254
56359: EQUAL
56360: PUSH
56361: LD_VAR 0 2
56365: PPUSH
56366: CALL_OW 264
56370: PUSH
56371: LD_EXP 5
56375: EQUAL
56376: AND
56377: PUSH
56378: LD_VAR 0 3
56382: PPUSH
56383: CALL_OW 263
56387: PUSH
56388: LD_INT 3
56390: EQUAL
56391: AND
56392: IFFALSE 56408
// HackDestroyVehicle ( unit , selectedUnit ) ;
56394: LD_VAR 0 2
56398: PPUSH
56399: LD_VAR 0 3
56403: PPUSH
56404: CALL 57925 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56408: LD_VAR 0 1
56412: PUSH
56413: LD_INT 255
56415: EQUAL
56416: PUSH
56417: LD_VAR 0 2
56421: PPUSH
56422: CALL_OW 264
56426: PUSH
56427: LD_INT 14
56429: PUSH
56430: LD_INT 53
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: IN
56437: AND
56438: PUSH
56439: LD_VAR 0 4
56443: PPUSH
56444: LD_VAR 0 5
56448: PPUSH
56449: CALL_OW 488
56453: AND
56454: IFFALSE 56478
// CutTreeXYR ( unit , x , y , 12 ) ;
56456: LD_VAR 0 2
56460: PPUSH
56461: LD_VAR 0 4
56465: PPUSH
56466: LD_VAR 0 5
56470: PPUSH
56471: LD_INT 12
56473: PPUSH
56474: CALL 56491 0 4
// end ;
56478: LD_VAR 0 6
56482: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
56483: LD_INT 0
56485: PPUSH
// end ;
56486: LD_VAR 0 4
56490: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56491: LD_INT 0
56493: PPUSH
56494: PPUSH
56495: PPUSH
56496: PPUSH
56497: PPUSH
56498: PPUSH
56499: PPUSH
56500: PPUSH
56501: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
56502: LD_VAR 0 1
56506: NOT
56507: PUSH
56508: LD_VAR 0 2
56512: PPUSH
56513: LD_VAR 0 3
56517: PPUSH
56518: CALL_OW 488
56522: NOT
56523: OR
56524: PUSH
56525: LD_VAR 0 4
56529: NOT
56530: OR
56531: IFFALSE 56535
// exit ;
56533: GO 56875
// list := [ ] ;
56535: LD_ADDR_VAR 0 13
56539: PUSH
56540: EMPTY
56541: ST_TO_ADDR
// if x - r < 0 then
56542: LD_VAR 0 2
56546: PUSH
56547: LD_VAR 0 4
56551: MINUS
56552: PUSH
56553: LD_INT 0
56555: LESS
56556: IFFALSE 56568
// min_x := 0 else
56558: LD_ADDR_VAR 0 7
56562: PUSH
56563: LD_INT 0
56565: ST_TO_ADDR
56566: GO 56584
// min_x := x - r ;
56568: LD_ADDR_VAR 0 7
56572: PUSH
56573: LD_VAR 0 2
56577: PUSH
56578: LD_VAR 0 4
56582: MINUS
56583: ST_TO_ADDR
// if y - r < 0 then
56584: LD_VAR 0 3
56588: PUSH
56589: LD_VAR 0 4
56593: MINUS
56594: PUSH
56595: LD_INT 0
56597: LESS
56598: IFFALSE 56610
// min_y := 0 else
56600: LD_ADDR_VAR 0 8
56604: PUSH
56605: LD_INT 0
56607: ST_TO_ADDR
56608: GO 56626
// min_y := y - r ;
56610: LD_ADDR_VAR 0 8
56614: PUSH
56615: LD_VAR 0 3
56619: PUSH
56620: LD_VAR 0 4
56624: MINUS
56625: ST_TO_ADDR
// max_x := x + r ;
56626: LD_ADDR_VAR 0 9
56630: PUSH
56631: LD_VAR 0 2
56635: PUSH
56636: LD_VAR 0 4
56640: PLUS
56641: ST_TO_ADDR
// max_y := y + r ;
56642: LD_ADDR_VAR 0 10
56646: PUSH
56647: LD_VAR 0 3
56651: PUSH
56652: LD_VAR 0 4
56656: PLUS
56657: ST_TO_ADDR
// for _x = min_x to max_x do
56658: LD_ADDR_VAR 0 11
56662: PUSH
56663: DOUBLE
56664: LD_VAR 0 7
56668: DEC
56669: ST_TO_ADDR
56670: LD_VAR 0 9
56674: PUSH
56675: FOR_TO
56676: IFFALSE 56793
// for _y = min_y to max_y do
56678: LD_ADDR_VAR 0 12
56682: PUSH
56683: DOUBLE
56684: LD_VAR 0 8
56688: DEC
56689: ST_TO_ADDR
56690: LD_VAR 0 10
56694: PUSH
56695: FOR_TO
56696: IFFALSE 56789
// begin if not ValidHex ( _x , _y ) then
56698: LD_VAR 0 11
56702: PPUSH
56703: LD_VAR 0 12
56707: PPUSH
56708: CALL_OW 488
56712: NOT
56713: IFFALSE 56717
// continue ;
56715: GO 56695
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56717: LD_VAR 0 11
56721: PPUSH
56722: LD_VAR 0 12
56726: PPUSH
56727: CALL_OW 351
56731: PUSH
56732: LD_VAR 0 11
56736: PPUSH
56737: LD_VAR 0 12
56741: PPUSH
56742: CALL_OW 554
56746: AND
56747: IFFALSE 56787
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56749: LD_ADDR_VAR 0 13
56753: PUSH
56754: LD_VAR 0 13
56758: PPUSH
56759: LD_VAR 0 13
56763: PUSH
56764: LD_INT 1
56766: PLUS
56767: PPUSH
56768: LD_VAR 0 11
56772: PUSH
56773: LD_VAR 0 12
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PPUSH
56782: CALL_OW 2
56786: ST_TO_ADDR
// end ;
56787: GO 56695
56789: POP
56790: POP
56791: GO 56675
56793: POP
56794: POP
// if not list then
56795: LD_VAR 0 13
56799: NOT
56800: IFFALSE 56804
// exit ;
56802: GO 56875
// for i in list do
56804: LD_ADDR_VAR 0 6
56808: PUSH
56809: LD_VAR 0 13
56813: PUSH
56814: FOR_IN
56815: IFFALSE 56873
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56817: LD_VAR 0 1
56821: PPUSH
56822: LD_STRING M
56824: PUSH
56825: LD_VAR 0 6
56829: PUSH
56830: LD_INT 1
56832: ARRAY
56833: PUSH
56834: LD_VAR 0 6
56838: PUSH
56839: LD_INT 2
56841: ARRAY
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: PUSH
56864: EMPTY
56865: LIST
56866: PPUSH
56867: CALL_OW 447
56871: GO 56814
56873: POP
56874: POP
// end ;
56875: LD_VAR 0 5
56879: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
56880: LD_EXP 90
56884: NOT
56885: IFFALSE 56935
56887: GO 56889
56889: DISABLE
// begin initHack := true ;
56890: LD_ADDR_EXP 90
56894: PUSH
56895: LD_INT 1
56897: ST_TO_ADDR
// hackTanks := [ ] ;
56898: LD_ADDR_EXP 91
56902: PUSH
56903: EMPTY
56904: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
56905: LD_ADDR_EXP 92
56909: PUSH
56910: EMPTY
56911: ST_TO_ADDR
// hackLimit := 3 ;
56912: LD_ADDR_EXP 93
56916: PUSH
56917: LD_INT 3
56919: ST_TO_ADDR
// hackDist := 12 ;
56920: LD_ADDR_EXP 94
56924: PUSH
56925: LD_INT 12
56927: ST_TO_ADDR
// hackCounter := [ ] ;
56928: LD_ADDR_EXP 95
56932: PUSH
56933: EMPTY
56934: ST_TO_ADDR
// end ;
56935: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56936: LD_EXP 90
56940: PUSH
56941: LD_INT 34
56943: PUSH
56944: LD_EXP 5
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PPUSH
56953: CALL_OW 69
56957: AND
56958: IFFALSE 57213
56960: GO 56962
56962: DISABLE
56963: LD_INT 0
56965: PPUSH
56966: PPUSH
// begin enable ;
56967: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56968: LD_ADDR_VAR 0 1
56972: PUSH
56973: LD_INT 34
56975: PUSH
56976: LD_EXP 5
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PPUSH
56985: CALL_OW 69
56989: PUSH
56990: FOR_IN
56991: IFFALSE 57211
// begin if not i in hackTanks then
56993: LD_VAR 0 1
56997: PUSH
56998: LD_EXP 91
57002: IN
57003: NOT
57004: IFFALSE 57087
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57006: LD_ADDR_EXP 91
57010: PUSH
57011: LD_EXP 91
57015: PPUSH
57016: LD_EXP 91
57020: PUSH
57021: LD_INT 1
57023: PLUS
57024: PPUSH
57025: LD_VAR 0 1
57029: PPUSH
57030: CALL_OW 1
57034: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57035: LD_ADDR_EXP 92
57039: PUSH
57040: LD_EXP 92
57044: PPUSH
57045: LD_EXP 92
57049: PUSH
57050: LD_INT 1
57052: PLUS
57053: PPUSH
57054: EMPTY
57055: PPUSH
57056: CALL_OW 1
57060: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57061: LD_ADDR_EXP 95
57065: PUSH
57066: LD_EXP 95
57070: PPUSH
57071: LD_EXP 95
57075: PUSH
57076: LD_INT 1
57078: PLUS
57079: PPUSH
57080: EMPTY
57081: PPUSH
57082: CALL_OW 1
57086: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57087: LD_VAR 0 1
57091: PPUSH
57092: CALL_OW 302
57096: NOT
57097: IFFALSE 57110
// begin HackUnlinkAll ( i ) ;
57099: LD_VAR 0 1
57103: PPUSH
57104: CALL 57216 0 1
// continue ;
57108: GO 56990
// end ; HackCheckCapturedStatus ( i ) ;
57110: LD_VAR 0 1
57114: PPUSH
57115: CALL 57659 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57119: LD_ADDR_VAR 0 2
57123: PUSH
57124: LD_INT 81
57126: PUSH
57127: LD_VAR 0 1
57131: PPUSH
57132: CALL_OW 255
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 33
57143: PUSH
57144: LD_INT 3
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 91
57153: PUSH
57154: LD_VAR 0 1
57158: PUSH
57159: LD_EXP 94
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 50
57171: PUSH
57172: EMPTY
57173: LIST
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: PPUSH
57181: CALL_OW 69
57185: ST_TO_ADDR
// if not tmp then
57186: LD_VAR 0 2
57190: NOT
57191: IFFALSE 57195
// continue ;
57193: GO 56990
// HackLink ( i , tmp ) ;
57195: LD_VAR 0 1
57199: PPUSH
57200: LD_VAR 0 2
57204: PPUSH
57205: CALL 57352 0 2
// end ;
57209: GO 56990
57211: POP
57212: POP
// end ;
57213: PPOPN 2
57215: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57216: LD_INT 0
57218: PPUSH
57219: PPUSH
57220: PPUSH
// if not hack in hackTanks then
57221: LD_VAR 0 1
57225: PUSH
57226: LD_EXP 91
57230: IN
57231: NOT
57232: IFFALSE 57236
// exit ;
57234: GO 57347
// index := GetElementIndex ( hackTanks , hack ) ;
57236: LD_ADDR_VAR 0 4
57240: PUSH
57241: LD_EXP 91
57245: PPUSH
57246: LD_VAR 0 1
57250: PPUSH
57251: CALL 6050 0 2
57255: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57256: LD_EXP 92
57260: PUSH
57261: LD_VAR 0 4
57265: ARRAY
57266: IFFALSE 57347
// begin for i in hackTanksCaptured [ index ] do
57268: LD_ADDR_VAR 0 3
57272: PUSH
57273: LD_EXP 92
57277: PUSH
57278: LD_VAR 0 4
57282: ARRAY
57283: PUSH
57284: FOR_IN
57285: IFFALSE 57311
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57287: LD_VAR 0 3
57291: PUSH
57292: LD_INT 1
57294: ARRAY
57295: PPUSH
57296: LD_VAR 0 3
57300: PUSH
57301: LD_INT 2
57303: ARRAY
57304: PPUSH
57305: CALL_OW 235
57309: GO 57284
57311: POP
57312: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57313: LD_ADDR_EXP 92
57317: PUSH
57318: LD_EXP 92
57322: PPUSH
57323: LD_VAR 0 4
57327: PPUSH
57328: EMPTY
57329: PPUSH
57330: CALL_OW 1
57334: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57335: LD_VAR 0 1
57339: PPUSH
57340: LD_INT 0
57342: PPUSH
57343: CALL_OW 505
// end ; end ;
57347: LD_VAR 0 2
57351: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57352: LD_INT 0
57354: PPUSH
57355: PPUSH
57356: PPUSH
// if not hack in hackTanks or not vehicles then
57357: LD_VAR 0 1
57361: PUSH
57362: LD_EXP 91
57366: IN
57367: NOT
57368: PUSH
57369: LD_VAR 0 2
57373: NOT
57374: OR
57375: IFFALSE 57379
// exit ;
57377: GO 57654
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57379: LD_ADDR_VAR 0 2
57383: PUSH
57384: LD_VAR 0 1
57388: PPUSH
57389: LD_VAR 0 2
57393: PPUSH
57394: LD_INT 1
57396: PPUSH
57397: LD_INT 1
57399: PPUSH
57400: CALL 6700 0 4
57404: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57405: LD_ADDR_VAR 0 5
57409: PUSH
57410: LD_EXP 91
57414: PPUSH
57415: LD_VAR 0 1
57419: PPUSH
57420: CALL 6050 0 2
57424: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57425: LD_EXP 92
57429: PUSH
57430: LD_VAR 0 5
57434: ARRAY
57435: PUSH
57436: LD_EXP 93
57440: LESS
57441: IFFALSE 57630
// begin for i := 1 to vehicles do
57443: LD_ADDR_VAR 0 4
57447: PUSH
57448: DOUBLE
57449: LD_INT 1
57451: DEC
57452: ST_TO_ADDR
57453: LD_VAR 0 2
57457: PUSH
57458: FOR_TO
57459: IFFALSE 57628
// begin if hackTanksCaptured [ index ] = hackLimit then
57461: LD_EXP 92
57465: PUSH
57466: LD_VAR 0 5
57470: ARRAY
57471: PUSH
57472: LD_EXP 93
57476: EQUAL
57477: IFFALSE 57481
// break ;
57479: GO 57628
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57481: LD_ADDR_EXP 95
57485: PUSH
57486: LD_EXP 95
57490: PPUSH
57491: LD_VAR 0 5
57495: PPUSH
57496: LD_EXP 95
57500: PUSH
57501: LD_VAR 0 5
57505: ARRAY
57506: PUSH
57507: LD_INT 1
57509: PLUS
57510: PPUSH
57511: CALL_OW 1
57515: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57516: LD_ADDR_EXP 92
57520: PUSH
57521: LD_EXP 92
57525: PPUSH
57526: LD_VAR 0 5
57530: PUSH
57531: LD_EXP 92
57535: PUSH
57536: LD_VAR 0 5
57540: ARRAY
57541: PUSH
57542: LD_INT 1
57544: PLUS
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PPUSH
57550: LD_VAR 0 2
57554: PUSH
57555: LD_VAR 0 4
57559: ARRAY
57560: PUSH
57561: LD_VAR 0 2
57565: PUSH
57566: LD_VAR 0 4
57570: ARRAY
57571: PPUSH
57572: CALL_OW 255
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PPUSH
57581: CALL 6265 0 3
57585: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
57586: LD_VAR 0 2
57590: PUSH
57591: LD_VAR 0 4
57595: ARRAY
57596: PPUSH
57597: LD_VAR 0 1
57601: PPUSH
57602: CALL_OW 255
57606: PPUSH
57607: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
57611: LD_VAR 0 2
57615: PUSH
57616: LD_VAR 0 4
57620: ARRAY
57621: PPUSH
57622: CALL_OW 141
// end ;
57626: GO 57458
57628: POP
57629: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57630: LD_VAR 0 1
57634: PPUSH
57635: LD_EXP 92
57639: PUSH
57640: LD_VAR 0 5
57644: ARRAY
57645: PUSH
57646: LD_INT 0
57648: PLUS
57649: PPUSH
57650: CALL_OW 505
// end ;
57654: LD_VAR 0 3
57658: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
57659: LD_INT 0
57661: PPUSH
57662: PPUSH
57663: PPUSH
57664: PPUSH
// if not hack in hackTanks then
57665: LD_VAR 0 1
57669: PUSH
57670: LD_EXP 91
57674: IN
57675: NOT
57676: IFFALSE 57680
// exit ;
57678: GO 57920
// index := GetElementIndex ( hackTanks , hack ) ;
57680: LD_ADDR_VAR 0 4
57684: PUSH
57685: LD_EXP 91
57689: PPUSH
57690: LD_VAR 0 1
57694: PPUSH
57695: CALL 6050 0 2
57699: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57700: LD_ADDR_VAR 0 3
57704: PUSH
57705: DOUBLE
57706: LD_EXP 92
57710: PUSH
57711: LD_VAR 0 4
57715: ARRAY
57716: INC
57717: ST_TO_ADDR
57718: LD_INT 1
57720: PUSH
57721: FOR_DOWNTO
57722: IFFALSE 57894
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
57724: LD_ADDR_VAR 0 5
57728: PUSH
57729: LD_EXP 92
57733: PUSH
57734: LD_VAR 0 4
57738: ARRAY
57739: PUSH
57740: LD_VAR 0 3
57744: ARRAY
57745: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
57746: LD_VAR 0 5
57750: PUSH
57751: LD_INT 1
57753: ARRAY
57754: PPUSH
57755: CALL_OW 302
57759: NOT
57760: PUSH
57761: LD_VAR 0 5
57765: PUSH
57766: LD_INT 1
57768: ARRAY
57769: PPUSH
57770: CALL_OW 255
57774: PUSH
57775: LD_VAR 0 1
57779: PPUSH
57780: CALL_OW 255
57784: NONEQUAL
57785: OR
57786: IFFALSE 57892
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
57788: LD_VAR 0 5
57792: PUSH
57793: LD_INT 1
57795: ARRAY
57796: PPUSH
57797: CALL_OW 305
57801: PUSH
57802: LD_VAR 0 5
57806: PUSH
57807: LD_INT 1
57809: ARRAY
57810: PPUSH
57811: CALL_OW 255
57815: PUSH
57816: LD_VAR 0 1
57820: PPUSH
57821: CALL_OW 255
57825: EQUAL
57826: AND
57827: IFFALSE 57851
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
57829: LD_VAR 0 5
57833: PUSH
57834: LD_INT 1
57836: ARRAY
57837: PPUSH
57838: LD_VAR 0 5
57842: PUSH
57843: LD_INT 2
57845: ARRAY
57846: PPUSH
57847: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
57851: LD_ADDR_EXP 92
57855: PUSH
57856: LD_EXP 92
57860: PPUSH
57861: LD_VAR 0 4
57865: PPUSH
57866: LD_EXP 92
57870: PUSH
57871: LD_VAR 0 4
57875: ARRAY
57876: PPUSH
57877: LD_VAR 0 3
57881: PPUSH
57882: CALL_OW 3
57886: PPUSH
57887: CALL_OW 1
57891: ST_TO_ADDR
// end ; end ;
57892: GO 57721
57894: POP
57895: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57896: LD_VAR 0 1
57900: PPUSH
57901: LD_EXP 92
57905: PUSH
57906: LD_VAR 0 4
57910: ARRAY
57911: PUSH
57912: LD_INT 0
57914: PLUS
57915: PPUSH
57916: CALL_OW 505
// end ;
57920: LD_VAR 0 2
57924: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57925: LD_INT 0
57927: PPUSH
57928: PPUSH
57929: PPUSH
57930: PPUSH
// if not hack in hackTanks then
57931: LD_VAR 0 1
57935: PUSH
57936: LD_EXP 91
57940: IN
57941: NOT
57942: IFFALSE 57946
// exit ;
57944: GO 58031
// index := GetElementIndex ( hackTanks , hack ) ;
57946: LD_ADDR_VAR 0 5
57950: PUSH
57951: LD_EXP 91
57955: PPUSH
57956: LD_VAR 0 1
57960: PPUSH
57961: CALL 6050 0 2
57965: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57966: LD_ADDR_VAR 0 4
57970: PUSH
57971: DOUBLE
57972: LD_INT 1
57974: DEC
57975: ST_TO_ADDR
57976: LD_EXP 92
57980: PUSH
57981: LD_VAR 0 5
57985: ARRAY
57986: PUSH
57987: FOR_TO
57988: IFFALSE 58029
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57990: LD_EXP 92
57994: PUSH
57995: LD_VAR 0 5
57999: ARRAY
58000: PUSH
58001: LD_VAR 0 4
58005: ARRAY
58006: PUSH
58007: LD_INT 1
58009: ARRAY
58010: PUSH
58011: LD_VAR 0 2
58015: EQUAL
58016: IFFALSE 58027
// KillUnit ( vehicle ) ;
58018: LD_VAR 0 2
58022: PPUSH
58023: CALL_OW 66
58027: GO 57987
58029: POP
58030: POP
// end ;
58031: LD_VAR 0 3
58035: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
58036: LD_EXP 96
58040: NOT
58041: IFFALSE 58076
58043: GO 58045
58045: DISABLE
// begin initMiner := true ;
58046: LD_ADDR_EXP 96
58050: PUSH
58051: LD_INT 1
58053: ST_TO_ADDR
// minersList := [ ] ;
58054: LD_ADDR_EXP 97
58058: PUSH
58059: EMPTY
58060: ST_TO_ADDR
// minerMinesList := [ ] ;
58061: LD_ADDR_EXP 98
58065: PUSH
58066: EMPTY
58067: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
58068: LD_ADDR_EXP 99
58072: PUSH
58073: LD_INT 5
58075: ST_TO_ADDR
// end ;
58076: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
58077: LD_EXP 96
58081: PUSH
58082: LD_INT 34
58084: PUSH
58085: LD_EXP 10
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PPUSH
58094: CALL_OW 69
58098: AND
58099: IFFALSE 58562
58101: GO 58103
58103: DISABLE
58104: LD_INT 0
58106: PPUSH
58107: PPUSH
58108: PPUSH
58109: PPUSH
// begin enable ;
58110: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58111: LD_ADDR_VAR 0 1
58115: PUSH
58116: LD_INT 34
58118: PUSH
58119: LD_EXP 10
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PPUSH
58128: CALL_OW 69
58132: PUSH
58133: FOR_IN
58134: IFFALSE 58206
// begin if not i in minersList then
58136: LD_VAR 0 1
58140: PUSH
58141: LD_EXP 97
58145: IN
58146: NOT
58147: IFFALSE 58204
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58149: LD_ADDR_EXP 97
58153: PUSH
58154: LD_EXP 97
58158: PPUSH
58159: LD_EXP 97
58163: PUSH
58164: LD_INT 1
58166: PLUS
58167: PPUSH
58168: LD_VAR 0 1
58172: PPUSH
58173: CALL_OW 1
58177: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58178: LD_ADDR_EXP 98
58182: PUSH
58183: LD_EXP 98
58187: PPUSH
58188: LD_EXP 98
58192: PUSH
58193: LD_INT 1
58195: PLUS
58196: PPUSH
58197: EMPTY
58198: PPUSH
58199: CALL_OW 1
58203: ST_TO_ADDR
// end end ;
58204: GO 58133
58206: POP
58207: POP
// for i := minerMinesList downto 1 do
58208: LD_ADDR_VAR 0 1
58212: PUSH
58213: DOUBLE
58214: LD_EXP 98
58218: INC
58219: ST_TO_ADDR
58220: LD_INT 1
58222: PUSH
58223: FOR_DOWNTO
58224: IFFALSE 58560
// begin if IsLive ( minersList [ i ] ) then
58226: LD_EXP 97
58230: PUSH
58231: LD_VAR 0 1
58235: ARRAY
58236: PPUSH
58237: CALL_OW 300
58241: IFFALSE 58269
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
58243: LD_EXP 97
58247: PUSH
58248: LD_VAR 0 1
58252: ARRAY
58253: PPUSH
58254: LD_EXP 98
58258: PUSH
58259: LD_VAR 0 1
58263: ARRAY
58264: PPUSH
58265: CALL_OW 505
// if not minerMinesList [ i ] then
58269: LD_EXP 98
58273: PUSH
58274: LD_VAR 0 1
58278: ARRAY
58279: NOT
58280: IFFALSE 58284
// continue ;
58282: GO 58223
// for j := minerMinesList [ i ] downto 1 do
58284: LD_ADDR_VAR 0 2
58288: PUSH
58289: DOUBLE
58290: LD_EXP 98
58294: PUSH
58295: LD_VAR 0 1
58299: ARRAY
58300: INC
58301: ST_TO_ADDR
58302: LD_INT 1
58304: PUSH
58305: FOR_DOWNTO
58306: IFFALSE 58556
// begin side := GetSide ( minersList [ i ] ) ;
58308: LD_ADDR_VAR 0 3
58312: PUSH
58313: LD_EXP 97
58317: PUSH
58318: LD_VAR 0 1
58322: ARRAY
58323: PPUSH
58324: CALL_OW 255
58328: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58329: LD_ADDR_VAR 0 4
58333: PUSH
58334: LD_EXP 98
58338: PUSH
58339: LD_VAR 0 1
58343: ARRAY
58344: PUSH
58345: LD_VAR 0 2
58349: ARRAY
58350: PUSH
58351: LD_INT 1
58353: ARRAY
58354: PPUSH
58355: LD_EXP 98
58359: PUSH
58360: LD_VAR 0 1
58364: ARRAY
58365: PUSH
58366: LD_VAR 0 2
58370: ARRAY
58371: PUSH
58372: LD_INT 2
58374: ARRAY
58375: PPUSH
58376: CALL_OW 428
58380: ST_TO_ADDR
// if not tmp then
58381: LD_VAR 0 4
58385: NOT
58386: IFFALSE 58390
// continue ;
58388: GO 58305
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
58390: LD_VAR 0 4
58394: PUSH
58395: LD_INT 81
58397: PUSH
58398: LD_VAR 0 3
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PPUSH
58407: CALL_OW 69
58411: IN
58412: PUSH
58413: LD_EXP 98
58417: PUSH
58418: LD_VAR 0 1
58422: ARRAY
58423: PUSH
58424: LD_VAR 0 2
58428: ARRAY
58429: PUSH
58430: LD_INT 1
58432: ARRAY
58433: PPUSH
58434: LD_EXP 98
58438: PUSH
58439: LD_VAR 0 1
58443: ARRAY
58444: PUSH
58445: LD_VAR 0 2
58449: ARRAY
58450: PUSH
58451: LD_INT 2
58453: ARRAY
58454: PPUSH
58455: CALL_OW 458
58459: AND
58460: IFFALSE 58554
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
58462: LD_EXP 98
58466: PUSH
58467: LD_VAR 0 1
58471: ARRAY
58472: PUSH
58473: LD_VAR 0 2
58477: ARRAY
58478: PUSH
58479: LD_INT 1
58481: ARRAY
58482: PPUSH
58483: LD_EXP 98
58487: PUSH
58488: LD_VAR 0 1
58492: ARRAY
58493: PUSH
58494: LD_VAR 0 2
58498: ARRAY
58499: PUSH
58500: LD_INT 2
58502: ARRAY
58503: PPUSH
58504: LD_VAR 0 3
58508: PPUSH
58509: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58513: LD_ADDR_EXP 98
58517: PUSH
58518: LD_EXP 98
58522: PPUSH
58523: LD_VAR 0 1
58527: PPUSH
58528: LD_EXP 98
58532: PUSH
58533: LD_VAR 0 1
58537: ARRAY
58538: PPUSH
58539: LD_VAR 0 2
58543: PPUSH
58544: CALL_OW 3
58548: PPUSH
58549: CALL_OW 1
58553: ST_TO_ADDR
// end ; end ;
58554: GO 58305
58556: POP
58557: POP
// end ;
58558: GO 58223
58560: POP
58561: POP
// end ;
58562: PPOPN 4
58564: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
58565: LD_INT 0
58567: PPUSH
58568: PPUSH
// result := false ;
58569: LD_ADDR_VAR 0 4
58573: PUSH
58574: LD_INT 0
58576: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
58577: LD_VAR 0 1
58581: PPUSH
58582: CALL_OW 264
58586: PUSH
58587: LD_EXP 10
58591: EQUAL
58592: NOT
58593: IFFALSE 58597
// exit ;
58595: GO 58837
// index := GetElementIndex ( minersList , unit ) ;
58597: LD_ADDR_VAR 0 5
58601: PUSH
58602: LD_EXP 97
58606: PPUSH
58607: LD_VAR 0 1
58611: PPUSH
58612: CALL 6050 0 2
58616: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
58617: LD_EXP 98
58621: PUSH
58622: LD_VAR 0 5
58626: ARRAY
58627: PUSH
58628: LD_EXP 99
58632: GREATEREQUAL
58633: IFFALSE 58637
// exit ;
58635: GO 58837
// ComMoveXY ( unit , x , y ) ;
58637: LD_VAR 0 1
58641: PPUSH
58642: LD_VAR 0 2
58646: PPUSH
58647: LD_VAR 0 3
58651: PPUSH
58652: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58656: LD_INT 35
58658: PPUSH
58659: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
58663: LD_VAR 0 1
58667: PPUSH
58668: LD_VAR 0 2
58672: PPUSH
58673: LD_VAR 0 3
58677: PPUSH
58678: CALL 36822 0 3
58682: NOT
58683: PUSH
58684: LD_VAR 0 1
58688: PPUSH
58689: CALL_OW 314
58693: AND
58694: IFFALSE 58698
// exit ;
58696: GO 58837
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
58698: LD_VAR 0 2
58702: PPUSH
58703: LD_VAR 0 3
58707: PPUSH
58708: CALL_OW 428
58712: PUSH
58713: LD_VAR 0 1
58717: EQUAL
58718: PUSH
58719: LD_VAR 0 1
58723: PPUSH
58724: CALL_OW 314
58728: NOT
58729: AND
58730: IFFALSE 58656
// PlaySoundXY ( x , y , PlantMine ) ;
58732: LD_VAR 0 2
58736: PPUSH
58737: LD_VAR 0 3
58741: PPUSH
58742: LD_STRING PlantMine
58744: PPUSH
58745: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
58749: LD_VAR 0 2
58753: PPUSH
58754: LD_VAR 0 3
58758: PPUSH
58759: LD_VAR 0 1
58763: PPUSH
58764: CALL_OW 255
58768: PPUSH
58769: LD_INT 0
58771: PPUSH
58772: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
58776: LD_ADDR_EXP 98
58780: PUSH
58781: LD_EXP 98
58785: PPUSH
58786: LD_VAR 0 5
58790: PUSH
58791: LD_EXP 98
58795: PUSH
58796: LD_VAR 0 5
58800: ARRAY
58801: PUSH
58802: LD_INT 1
58804: PLUS
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PPUSH
58810: LD_VAR 0 2
58814: PUSH
58815: LD_VAR 0 3
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PPUSH
58824: CALL 6265 0 3
58828: ST_TO_ADDR
// result := true ;
58829: LD_ADDR_VAR 0 4
58833: PUSH
58834: LD_INT 1
58836: ST_TO_ADDR
// end ;
58837: LD_VAR 0 4
58841: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
58842: LD_INT 0
58844: PPUSH
58845: PPUSH
58846: PPUSH
// if not unit in minersList then
58847: LD_VAR 0 1
58851: PUSH
58852: LD_EXP 97
58856: IN
58857: NOT
58858: IFFALSE 58862
// exit ;
58860: GO 59254
// index := GetElementIndex ( minersList , unit ) ;
58862: LD_ADDR_VAR 0 6
58866: PUSH
58867: LD_EXP 97
58871: PPUSH
58872: LD_VAR 0 1
58876: PPUSH
58877: CALL 6050 0 2
58881: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
58882: LD_ADDR_VAR 0 5
58886: PUSH
58887: DOUBLE
58888: LD_EXP 98
58892: PUSH
58893: LD_VAR 0 6
58897: ARRAY
58898: INC
58899: ST_TO_ADDR
58900: LD_INT 1
58902: PUSH
58903: FOR_DOWNTO
58904: IFFALSE 59065
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
58906: LD_EXP 98
58910: PUSH
58911: LD_VAR 0 6
58915: ARRAY
58916: PUSH
58917: LD_VAR 0 5
58921: ARRAY
58922: PUSH
58923: LD_INT 1
58925: ARRAY
58926: PUSH
58927: LD_VAR 0 2
58931: EQUAL
58932: PUSH
58933: LD_EXP 98
58937: PUSH
58938: LD_VAR 0 6
58942: ARRAY
58943: PUSH
58944: LD_VAR 0 5
58948: ARRAY
58949: PUSH
58950: LD_INT 2
58952: ARRAY
58953: PUSH
58954: LD_VAR 0 3
58958: EQUAL
58959: AND
58960: IFFALSE 59063
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58962: LD_EXP 98
58966: PUSH
58967: LD_VAR 0 6
58971: ARRAY
58972: PUSH
58973: LD_VAR 0 5
58977: ARRAY
58978: PUSH
58979: LD_INT 1
58981: ARRAY
58982: PPUSH
58983: LD_EXP 98
58987: PUSH
58988: LD_VAR 0 6
58992: ARRAY
58993: PUSH
58994: LD_VAR 0 5
58998: ARRAY
58999: PUSH
59000: LD_INT 2
59002: ARRAY
59003: PPUSH
59004: LD_VAR 0 1
59008: PPUSH
59009: CALL_OW 255
59013: PPUSH
59014: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59018: LD_ADDR_EXP 98
59022: PUSH
59023: LD_EXP 98
59027: PPUSH
59028: LD_VAR 0 6
59032: PPUSH
59033: LD_EXP 98
59037: PUSH
59038: LD_VAR 0 6
59042: ARRAY
59043: PPUSH
59044: LD_VAR 0 5
59048: PPUSH
59049: CALL_OW 3
59053: PPUSH
59054: CALL_OW 1
59058: ST_TO_ADDR
// exit ;
59059: POP
59060: POP
59061: GO 59254
// end ; end ;
59063: GO 58903
59065: POP
59066: POP
// for i := minerMinesList [ index ] downto 1 do
59067: LD_ADDR_VAR 0 5
59071: PUSH
59072: DOUBLE
59073: LD_EXP 98
59077: PUSH
59078: LD_VAR 0 6
59082: ARRAY
59083: INC
59084: ST_TO_ADDR
59085: LD_INT 1
59087: PUSH
59088: FOR_DOWNTO
59089: IFFALSE 59252
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59091: LD_EXP 98
59095: PUSH
59096: LD_VAR 0 6
59100: ARRAY
59101: PUSH
59102: LD_VAR 0 5
59106: ARRAY
59107: PUSH
59108: LD_INT 1
59110: ARRAY
59111: PPUSH
59112: LD_EXP 98
59116: PUSH
59117: LD_VAR 0 6
59121: ARRAY
59122: PUSH
59123: LD_VAR 0 5
59127: ARRAY
59128: PUSH
59129: LD_INT 2
59131: ARRAY
59132: PPUSH
59133: LD_VAR 0 2
59137: PPUSH
59138: LD_VAR 0 3
59142: PPUSH
59143: CALL_OW 298
59147: PUSH
59148: LD_INT 6
59150: LESS
59151: IFFALSE 59250
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59153: LD_EXP 98
59157: PUSH
59158: LD_VAR 0 6
59162: ARRAY
59163: PUSH
59164: LD_VAR 0 5
59168: ARRAY
59169: PUSH
59170: LD_INT 1
59172: ARRAY
59173: PPUSH
59174: LD_EXP 98
59178: PUSH
59179: LD_VAR 0 6
59183: ARRAY
59184: PUSH
59185: LD_VAR 0 5
59189: ARRAY
59190: PUSH
59191: LD_INT 2
59193: ARRAY
59194: PPUSH
59195: LD_VAR 0 1
59199: PPUSH
59200: CALL_OW 255
59204: PPUSH
59205: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59209: LD_ADDR_EXP 98
59213: PUSH
59214: LD_EXP 98
59218: PPUSH
59219: LD_VAR 0 6
59223: PPUSH
59224: LD_EXP 98
59228: PUSH
59229: LD_VAR 0 6
59233: ARRAY
59234: PPUSH
59235: LD_VAR 0 5
59239: PPUSH
59240: CALL_OW 3
59244: PPUSH
59245: CALL_OW 1
59249: ST_TO_ADDR
// end ; end ;
59250: GO 59088
59252: POP
59253: POP
// end ;
59254: LD_VAR 0 4
59258: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59259: LD_INT 0
59261: PPUSH
59262: PPUSH
59263: PPUSH
59264: PPUSH
59265: PPUSH
59266: PPUSH
59267: PPUSH
59268: PPUSH
59269: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59270: LD_VAR 0 1
59274: PPUSH
59275: CALL_OW 264
59279: PUSH
59280: LD_EXP 10
59284: EQUAL
59285: NOT
59286: PUSH
59287: LD_VAR 0 1
59291: PUSH
59292: LD_EXP 97
59296: IN
59297: NOT
59298: OR
59299: IFFALSE 59303
// exit ;
59301: GO 59625
// index := GetElementIndex ( minersList , unit ) ;
59303: LD_ADDR_VAR 0 6
59307: PUSH
59308: LD_EXP 97
59312: PPUSH
59313: LD_VAR 0 1
59317: PPUSH
59318: CALL 6050 0 2
59322: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59323: LD_ADDR_VAR 0 8
59327: PUSH
59328: LD_EXP 99
59332: PUSH
59333: LD_EXP 98
59337: PUSH
59338: LD_VAR 0 6
59342: ARRAY
59343: MINUS
59344: ST_TO_ADDR
// if not minesFreeAmount then
59345: LD_VAR 0 8
59349: NOT
59350: IFFALSE 59354
// exit ;
59352: GO 59625
// tmp := [ ] ;
59354: LD_ADDR_VAR 0 7
59358: PUSH
59359: EMPTY
59360: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59361: LD_ADDR_VAR 0 5
59365: PUSH
59366: DOUBLE
59367: LD_INT 1
59369: DEC
59370: ST_TO_ADDR
59371: LD_VAR 0 8
59375: PUSH
59376: FOR_TO
59377: IFFALSE 59572
// begin _d := rand ( 0 , 5 ) ;
59379: LD_ADDR_VAR 0 11
59383: PUSH
59384: LD_INT 0
59386: PPUSH
59387: LD_INT 5
59389: PPUSH
59390: CALL_OW 12
59394: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59395: LD_ADDR_VAR 0 12
59399: PUSH
59400: LD_INT 2
59402: PPUSH
59403: LD_INT 6
59405: PPUSH
59406: CALL_OW 12
59410: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59411: LD_ADDR_VAR 0 9
59415: PUSH
59416: LD_VAR 0 2
59420: PPUSH
59421: LD_VAR 0 11
59425: PPUSH
59426: LD_VAR 0 12
59430: PPUSH
59431: CALL_OW 272
59435: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
59436: LD_ADDR_VAR 0 10
59440: PUSH
59441: LD_VAR 0 3
59445: PPUSH
59446: LD_VAR 0 11
59450: PPUSH
59451: LD_VAR 0 12
59455: PPUSH
59456: CALL_OW 273
59460: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
59461: LD_VAR 0 9
59465: PPUSH
59466: LD_VAR 0 10
59470: PPUSH
59471: CALL_OW 488
59475: PUSH
59476: LD_VAR 0 9
59480: PUSH
59481: LD_VAR 0 10
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_VAR 0 7
59494: IN
59495: NOT
59496: AND
59497: PUSH
59498: LD_VAR 0 9
59502: PPUSH
59503: LD_VAR 0 10
59507: PPUSH
59508: CALL_OW 458
59512: NOT
59513: AND
59514: IFFALSE 59556
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
59516: LD_ADDR_VAR 0 7
59520: PUSH
59521: LD_VAR 0 7
59525: PPUSH
59526: LD_VAR 0 7
59530: PUSH
59531: LD_INT 1
59533: PLUS
59534: PPUSH
59535: LD_VAR 0 9
59539: PUSH
59540: LD_VAR 0 10
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PPUSH
59549: CALL_OW 1
59553: ST_TO_ADDR
59554: GO 59570
// i := i - 1 ;
59556: LD_ADDR_VAR 0 5
59560: PUSH
59561: LD_VAR 0 5
59565: PUSH
59566: LD_INT 1
59568: MINUS
59569: ST_TO_ADDR
// end ;
59570: GO 59376
59572: POP
59573: POP
// for i in tmp do
59574: LD_ADDR_VAR 0 5
59578: PUSH
59579: LD_VAR 0 7
59583: PUSH
59584: FOR_IN
59585: IFFALSE 59623
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
59587: LD_VAR 0 1
59591: PPUSH
59592: LD_VAR 0 5
59596: PUSH
59597: LD_INT 1
59599: ARRAY
59600: PPUSH
59601: LD_VAR 0 5
59605: PUSH
59606: LD_INT 2
59608: ARRAY
59609: PPUSH
59610: CALL 58565 0 3
59614: NOT
59615: IFFALSE 59621
// exit ;
59617: POP
59618: POP
59619: GO 59625
59621: GO 59584
59623: POP
59624: POP
// end ;
59625: LD_VAR 0 4
59629: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
59630: LD_INT 0
59632: PPUSH
59633: PPUSH
59634: PPUSH
59635: PPUSH
59636: PPUSH
59637: PPUSH
59638: PPUSH
// if not GetClass ( unit ) = class_sniper then
59639: LD_VAR 0 1
59643: PPUSH
59644: CALL_OW 257
59648: PUSH
59649: LD_INT 5
59651: EQUAL
59652: NOT
59653: IFFALSE 59657
// exit ;
59655: GO 60045
// dist := 8 ;
59657: LD_ADDR_VAR 0 5
59661: PUSH
59662: LD_INT 8
59664: ST_TO_ADDR
// viewRange := 12 ;
59665: LD_ADDR_VAR 0 7
59669: PUSH
59670: LD_INT 12
59672: ST_TO_ADDR
// side := GetSide ( unit ) ;
59673: LD_ADDR_VAR 0 6
59677: PUSH
59678: LD_VAR 0 1
59682: PPUSH
59683: CALL_OW 255
59687: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
59688: LD_INT 61
59690: PPUSH
59691: LD_VAR 0 6
59695: PPUSH
59696: CALL_OW 321
59700: PUSH
59701: LD_INT 2
59703: EQUAL
59704: IFFALSE 59714
// viewRange := 16 ;
59706: LD_ADDR_VAR 0 7
59710: PUSH
59711: LD_INT 16
59713: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
59714: LD_VAR 0 1
59718: PPUSH
59719: LD_VAR 0 2
59723: PPUSH
59724: LD_VAR 0 3
59728: PPUSH
59729: CALL_OW 297
59733: PUSH
59734: LD_VAR 0 5
59738: GREATER
59739: IFFALSE 59818
// begin ComMoveXY ( unit , x , y ) ;
59741: LD_VAR 0 1
59745: PPUSH
59746: LD_VAR 0 2
59750: PPUSH
59751: LD_VAR 0 3
59755: PPUSH
59756: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59760: LD_INT 35
59762: PPUSH
59763: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
59767: LD_VAR 0 1
59771: PPUSH
59772: LD_VAR 0 2
59776: PPUSH
59777: LD_VAR 0 3
59781: PPUSH
59782: CALL 36822 0 3
59786: NOT
59787: IFFALSE 59791
// exit ;
59789: GO 60045
// until GetDistUnitXY ( unit , x , y ) < dist ;
59791: LD_VAR 0 1
59795: PPUSH
59796: LD_VAR 0 2
59800: PPUSH
59801: LD_VAR 0 3
59805: PPUSH
59806: CALL_OW 297
59810: PUSH
59811: LD_VAR 0 5
59815: LESS
59816: IFFALSE 59760
// end ; ComTurnXY ( unit , x , y ) ;
59818: LD_VAR 0 1
59822: PPUSH
59823: LD_VAR 0 2
59827: PPUSH
59828: LD_VAR 0 3
59832: PPUSH
59833: CALL_OW 118
// wait ( 5 ) ;
59837: LD_INT 5
59839: PPUSH
59840: CALL_OW 67
// _d := GetDir ( unit ) ;
59844: LD_ADDR_VAR 0 10
59848: PUSH
59849: LD_VAR 0 1
59853: PPUSH
59854: CALL_OW 254
59858: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
59859: LD_ADDR_VAR 0 8
59863: PUSH
59864: LD_VAR 0 1
59868: PPUSH
59869: CALL_OW 250
59873: PPUSH
59874: LD_VAR 0 10
59878: PPUSH
59879: LD_VAR 0 5
59883: PPUSH
59884: CALL_OW 272
59888: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
59889: LD_ADDR_VAR 0 9
59893: PUSH
59894: LD_VAR 0 1
59898: PPUSH
59899: CALL_OW 251
59903: PPUSH
59904: LD_VAR 0 10
59908: PPUSH
59909: LD_VAR 0 5
59913: PPUSH
59914: CALL_OW 273
59918: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59919: LD_VAR 0 8
59923: PPUSH
59924: LD_VAR 0 9
59928: PPUSH
59929: CALL_OW 488
59933: NOT
59934: IFFALSE 59938
// exit ;
59936: GO 60045
// ComAnimCustom ( unit , 1 ) ;
59938: LD_VAR 0 1
59942: PPUSH
59943: LD_INT 1
59945: PPUSH
59946: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59950: LD_VAR 0 8
59954: PPUSH
59955: LD_VAR 0 9
59959: PPUSH
59960: LD_VAR 0 6
59964: PPUSH
59965: LD_VAR 0 7
59969: PPUSH
59970: CALL_OW 330
// repeat wait ( 1 ) ;
59974: LD_INT 1
59976: PPUSH
59977: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
59981: LD_VAR 0 1
59985: PPUSH
59986: CALL_OW 316
59990: PUSH
59991: LD_VAR 0 1
59995: PPUSH
59996: CALL_OW 314
60000: OR
60001: PUSH
60002: LD_VAR 0 1
60006: PPUSH
60007: CALL_OW 302
60011: NOT
60012: OR
60013: PUSH
60014: LD_VAR 0 1
60018: PPUSH
60019: CALL_OW 301
60023: OR
60024: IFFALSE 59974
// RemoveSeeing ( _x , _y , side ) ;
60026: LD_VAR 0 8
60030: PPUSH
60031: LD_VAR 0 9
60035: PPUSH
60036: LD_VAR 0 6
60040: PPUSH
60041: CALL_OW 331
// end ; end_of_file
60045: LD_VAR 0 4
60049: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
60050: LD_VAR 0 1
60054: PUSH
60055: LD_INT 200
60057: DOUBLE
60058: GREATEREQUAL
60059: IFFALSE 60067
60061: LD_INT 299
60063: DOUBLE
60064: LESSEQUAL
60065: IFTRUE 60069
60067: GO 60101
60069: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
60070: LD_VAR 0 1
60074: PPUSH
60075: LD_VAR 0 2
60079: PPUSH
60080: LD_VAR 0 3
60084: PPUSH
60085: LD_VAR 0 4
60089: PPUSH
60090: LD_VAR 0 5
60094: PPUSH
60095: CALL 56167 0 5
60099: GO 60178
60101: LD_INT 300
60103: DOUBLE
60104: GREATEREQUAL
60105: IFFALSE 60113
60107: LD_INT 399
60109: DOUBLE
60110: LESSEQUAL
60111: IFTRUE 60115
60113: GO 60177
60115: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
60116: LD_VAR 0 1
60120: PPUSH
60121: LD_VAR 0 2
60125: PPUSH
60126: LD_VAR 0 3
60130: PPUSH
60131: LD_VAR 0 4
60135: PPUSH
60136: LD_VAR 0 5
60140: PPUSH
60141: LD_VAR 0 6
60145: PPUSH
60146: LD_VAR 0 7
60150: PPUSH
60151: LD_VAR 0 8
60155: PPUSH
60156: LD_VAR 0 9
60160: PPUSH
60161: LD_VAR 0 10
60165: PPUSH
60166: LD_VAR 0 11
60170: PPUSH
60171: CALL 54055 0 11
60175: GO 60178
60177: POP
// end ;
60178: PPOPN 11
60180: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
60181: LD_VAR 0 1
60185: PPUSH
60186: LD_VAR 0 2
60190: PPUSH
60191: LD_VAR 0 3
60195: PPUSH
60196: LD_VAR 0 4
60200: PPUSH
60201: LD_VAR 0 5
60205: PPUSH
60206: CALL 56149 0 5
// end ;
60210: PPOPN 5
60212: END
