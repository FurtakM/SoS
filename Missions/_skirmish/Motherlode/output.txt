// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 116 0 0
// PrepareNature ( 4 , 4 , 12 , 4 , 4 , 1 , 4 , natArea , watArea ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 12
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 4
  22: PPUSH
  23: LD_INT 1
  25: PPUSH
  26: LD_INT 4
  28: PPUSH
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: CALL 34671 0 9
// if gameType = 1 then
  39: LD_EXP 2
  43: PUSH
  44: LD_INT 1
  46: EQUAL
  47: IFFALSE 111
// InitEcoMode ( [ 189 , 97 ] , [ [ 215 , 93 ] , [ 204 , 126 ] ] , [ attacksArea1 , attacksArea2 , attacksArea3 , attacksArea4 , attacksArea5 ] ) else
  49: LD_INT 189
  51: PUSH
  52: LD_INT 97
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: PPUSH
  59: LD_INT 215
  61: PUSH
  62: LD_INT 93
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: PUSH
  69: LD_INT 204
  71: PUSH
  72: LD_INT 126
  74: PUSH
  75: EMPTY
  76: LIST
  77: LIST
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PPUSH
  83: LD_INT 2
  85: PUSH
  86: LD_INT 3
  88: PUSH
  89: LD_INT 4
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 6
  97: PUSH
  98: EMPTY
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: PPUSH
 105: CALL 41399 0 3
 109: GO 115
// InitDefendMode ( ) ;
 111: CALL 165 0 0
// end ;
 115: END
// export debug , gameType ; function Init ; begin
 116: LD_INT 0
 118: PPUSH
// debug := false ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// if debug then
 127: LD_EXP 1
 131: IFFALSE 143
// gameType := 1 else
 133: LD_ADDR_EXP 2
 137: PUSH
 138: LD_INT 1
 140: ST_TO_ADDR
 141: GO 160
// gameType := GetMultiplayerSetting ( 50 ) + 1 ;
 143: LD_ADDR_EXP 2
 147: PUSH
 148: LD_INT 50
 150: PPUSH
 151: CALL_OW 426
 155: PUSH
 156: LD_INT 1
 158: PLUS
 159: ST_TO_ADDR
// end ; end_of_file
 160: LD_VAR 0 1
 164: RET
// export function InitDefendMode ( ) ; var buildingsList ; begin
 165: LD_INT 0
 167: PPUSH
 168: PPUSH
// buildingsList := [ [ 91 , 182 , 59 , 3 , 0 , 0 , 45 ] , [ 90 , 185 , 60 , 3 , 0 , 0 , 46 ] , [ 90 , 188 , 62 , 3 , 0 , 0 , 43 ] , [ 73 , 178 , 64 , 2 , 0 , 0 , 0 ] , [ 75 , 182 , 65 , 3 , 0 , 0 , 0 ] , [ 76 , 179 , 68 , 1 , 0 , 0 , 0 ] , [ 69 , 182 , 68 , 2 , 0 , 0 , 0 ] , [ 71 , 186 , 68 , 4 , 0 , 0 , 0 ] , [ 72 , 182 , 72 , 0 , 0 , 0 , 0 ] , [ 91 , 169 , 73 , 1 , 0 , 0 , 46 ] , [ 67 , 209 , 79 , 4 , 0 , 0 , 0 ] , [ 88 , 204 , 87 , 3 , 0 , 0 , 0 ] , [ 91 , 169 , 88 , 1 , 0 , 0 , 43 ] , [ 91 , 169 , 91 , 1 , 0 , 0 , 45 ] , [ 86 , 192 , 92 , 4 , 0 , 0 , 0 ] , [ 88 , 207 , 93 , 2 , 0 , 0 , 0 ] , [ 65 , 194 , 96 , 4 , 0 , 0 , 0 ] , [ 90 , 224 , 96 , 4 , 0 , 0 , 45 ] , [ 86 , 196 , 100 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 100 , 4 , 0 , 0 , 46 ] , [ 88 , 211 , 101 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 103 , 4 , 0 , 0 , 45 ] , [ 67 , 172 , 105 , 1 , 0 , 0 , 0 ] , [ 86 , 185 , 105 , 0 , 0 , 0 , 0 ] , [ 86 , 188 , 107 , 5 , 0 , 0 , 0 ] , [ 86 , 186 , 108 , 3 , 0 , 0 , 0 ] , [ 91 , 172 , 109 , 1 , 0 , 0 , 45 ] , [ 90 , 227 , 119 , 5 , 0 , 0 , 46 ] , [ 91 , 225 , 120 , 5 , 0 , 0 , 45 ] , [ 67 , 226 , 135 , 5 , 0 , 0 , 0 ] ] ;
 169: LD_ADDR_VAR 0 2
 173: PUSH
 174: LD_INT 91
 176: PUSH
 177: LD_INT 182
 179: PUSH
 180: LD_INT 59
 182: PUSH
 183: LD_INT 3
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 45
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 90
 206: PUSH
 207: LD_INT 185
 209: PUSH
 210: LD_INT 60
 212: PUSH
 213: LD_INT 3
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 46
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: PUSH
 234: LD_INT 90
 236: PUSH
 237: LD_INT 188
 239: PUSH
 240: LD_INT 62
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 0
 251: PUSH
 252: LD_INT 43
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 73
 266: PUSH
 267: LD_INT 178
 269: PUSH
 270: LD_INT 64
 272: PUSH
 273: LD_INT 2
 275: PUSH
 276: LD_INT 0
 278: PUSH
 279: LD_INT 0
 281: PUSH
 282: LD_INT 0
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 75
 296: PUSH
 297: LD_INT 182
 299: PUSH
 300: LD_INT 65
 302: PUSH
 303: LD_INT 3
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: LD_INT 0
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: PUSH
 324: LD_INT 76
 326: PUSH
 327: LD_INT 179
 329: PUSH
 330: LD_INT 68
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 0
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 69
 356: PUSH
 357: LD_INT 182
 359: PUSH
 360: LD_INT 68
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 71
 386: PUSH
 387: LD_INT 186
 389: PUSH
 390: LD_INT 68
 392: PUSH
 393: LD_INT 4
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: LD_INT 72
 416: PUSH
 417: LD_INT 182
 419: PUSH
 420: LD_INT 72
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: LD_INT 0
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: PUSH
 444: LD_INT 91
 446: PUSH
 447: LD_INT 169
 449: PUSH
 450: LD_INT 73
 452: PUSH
 453: LD_INT 1
 455: PUSH
 456: LD_INT 0
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 46
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 67
 476: PUSH
 477: LD_INT 209
 479: PUSH
 480: LD_INT 79
 482: PUSH
 483: LD_INT 4
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 88
 506: PUSH
 507: LD_INT 204
 509: PUSH
 510: LD_INT 87
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: LD_INT 0
 518: PUSH
 519: LD_INT 0
 521: PUSH
 522: LD_INT 0
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 91
 536: PUSH
 537: LD_INT 169
 539: PUSH
 540: LD_INT 88
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 0
 551: PUSH
 552: LD_INT 43
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 91
 566: PUSH
 567: LD_INT 169
 569: PUSH
 570: LD_INT 91
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 0
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: LD_INT 45
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 86
 596: PUSH
 597: LD_INT 192
 599: PUSH
 600: LD_INT 92
 602: PUSH
 603: LD_INT 4
 605: PUSH
 606: LD_INT 0
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: LD_INT 0
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_INT 88
 626: PUSH
 627: LD_INT 207
 629: PUSH
 630: LD_INT 93
 632: PUSH
 633: LD_INT 2
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 65
 656: PUSH
 657: LD_INT 194
 659: PUSH
 660: LD_INT 96
 662: PUSH
 663: LD_INT 4
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 90
 686: PUSH
 687: LD_INT 224
 689: PUSH
 690: LD_INT 96
 692: PUSH
 693: LD_INT 4
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 45
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: PUSH
 714: LD_INT 86
 716: PUSH
 717: LD_INT 196
 719: PUSH
 720: LD_INT 100
 722: PUSH
 723: LD_INT 4
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 91
 746: PUSH
 747: LD_INT 228
 749: PUSH
 750: LD_INT 100
 752: PUSH
 753: LD_INT 4
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: LD_INT 0
 761: PUSH
 762: LD_INT 46
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 88
 776: PUSH
 777: LD_INT 211
 779: PUSH
 780: LD_INT 101
 782: PUSH
 783: LD_INT 4
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 0
 791: PUSH
 792: LD_INT 0
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 91
 806: PUSH
 807: LD_INT 228
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 4
 815: PUSH
 816: LD_INT 0
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 45
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 67
 836: PUSH
 837: LD_INT 172
 839: PUSH
 840: LD_INT 105
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 0
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 86
 866: PUSH
 867: LD_INT 185
 869: PUSH
 870: LD_INT 105
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: LD_INT 0
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 86
 896: PUSH
 897: LD_INT 188
 899: PUSH
 900: LD_INT 107
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: LD_INT 0
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 86
 926: PUSH
 927: LD_INT 186
 929: PUSH
 930: LD_INT 108
 932: PUSH
 933: LD_INT 3
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 91
 956: PUSH
 957: LD_INT 172
 959: PUSH
 960: LD_INT 109
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 0
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 45
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 227
 989: PUSH
 990: LD_INT 119
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 0
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 46
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 91
1016: PUSH
1017: LD_INT 225
1019: PUSH
1020: LD_INT 120
1022: PUSH
1023: LD_INT 5
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: LD_INT 45
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_INT 67
1046: PUSH
1047: LD_INT 226
1049: PUSH
1050: LD_INT 135
1052: PUSH
1053: LD_INT 5
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: ST_TO_ADDR
// end ; end_of_file
1106: LD_VAR 0 1
1110: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
1111: LD_VAR 0 1
1115: PPUSH
1116: LD_VAR 0 2
1120: PPUSH
1121: CALL 58589 0 2
// end ;
1125: PPOPN 2
1127: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
1128: LD_VAR 0 1
1132: PPUSH
1133: CALL 58467 0 1
// end ; end_of_file
1137: PPOPN 1
1139: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
1140: LD_INT 0
1142: PPUSH
// ar_miner := 81 ;
1143: LD_ADDR_EXP 10
1147: PUSH
1148: LD_INT 81
1150: ST_TO_ADDR
// ar_crane := 88 ;
1151: LD_ADDR_EXP 9
1155: PUSH
1156: LD_INT 88
1158: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
1159: LD_ADDR_EXP 4
1163: PUSH
1164: LD_INT 89
1166: ST_TO_ADDR
// us_hack := 99 ;
1167: LD_ADDR_EXP 5
1171: PUSH
1172: LD_INT 99
1174: ST_TO_ADDR
// us_artillery := 97 ;
1175: LD_ADDR_EXP 6
1179: PUSH
1180: LD_INT 97
1182: ST_TO_ADDR
// ar_bio_bomb := 91 ;
1183: LD_ADDR_EXP 7
1187: PUSH
1188: LD_INT 91
1190: ST_TO_ADDR
// ar_mortar := 92 ;
1191: LD_ADDR_EXP 8
1195: PUSH
1196: LD_INT 92
1198: ST_TO_ADDR
// ru_radar := 98 ;
1199: LD_ADDR_EXP 3
1203: PUSH
1204: LD_INT 98
1206: ST_TO_ADDR
// tech_Artillery := 80 ;
1207: LD_ADDR_EXP 11
1211: PUSH
1212: LD_INT 80
1214: ST_TO_ADDR
// tech_RadMat := 81 ;
1215: LD_ADDR_EXP 12
1219: PUSH
1220: LD_INT 81
1222: ST_TO_ADDR
// tech_BasicTools := 82 ;
1223: LD_ADDR_EXP 13
1227: PUSH
1228: LD_INT 82
1230: ST_TO_ADDR
// tech_Cargo := 83 ;
1231: LD_ADDR_EXP 14
1235: PUSH
1236: LD_INT 83
1238: ST_TO_ADDR
// tech_Track := 84 ;
1239: LD_ADDR_EXP 15
1243: PUSH
1244: LD_INT 84
1246: ST_TO_ADDR
// tech_Crane := 85 ;
1247: LD_ADDR_EXP 16
1251: PUSH
1252: LD_INT 85
1254: ST_TO_ADDR
// tech_Bulldozer := 86 ;
1255: LD_ADDR_EXP 17
1259: PUSH
1260: LD_INT 86
1262: ST_TO_ADDR
// tech_Hovercraft := 87 ;
1263: LD_ADDR_EXP 18
1267: PUSH
1268: LD_INT 87
1270: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
1271: LD_ADDR_EXP 19
1275: PUSH
1276: LD_INT 88
1278: ST_TO_ADDR
// class_mastodont := 31 ;
1279: LD_ADDR_EXP 20
1283: PUSH
1284: LD_INT 31
1286: ST_TO_ADDR
// class_horse := 21 ;
1287: LD_ADDR_EXP 21
1291: PUSH
1292: LD_INT 21
1294: ST_TO_ADDR
// end ;
1295: LD_VAR 0 1
1299: RET
// every 1 do
1300: GO 1302
1302: DISABLE
// InitGlobalVariables ; end_of_file
1303: CALL 1140 0 0
1307: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1308: LD_INT 0
1310: PPUSH
1311: PPUSH
// if exist_mode then
1312: LD_VAR 0 2
1316: IFFALSE 1341
// unit := CreateCharacter ( prefix & ident ) else
1318: LD_ADDR_VAR 0 5
1322: PUSH
1323: LD_VAR 0 3
1327: PUSH
1328: LD_VAR 0 1
1332: STR
1333: PPUSH
1334: CALL_OW 34
1338: ST_TO_ADDR
1339: GO 1356
// unit := NewCharacter ( ident ) ;
1341: LD_ADDR_VAR 0 5
1345: PUSH
1346: LD_VAR 0 1
1350: PPUSH
1351: CALL_OW 25
1355: ST_TO_ADDR
// result := unit ;
1356: LD_ADDR_VAR 0 4
1360: PUSH
1361: LD_VAR 0 5
1365: ST_TO_ADDR
// end ;
1366: LD_VAR 0 4
1370: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1371: LD_INT 0
1373: PPUSH
1374: PPUSH
// if not side or not nation then
1375: LD_VAR 0 1
1379: NOT
1380: PUSH
1381: LD_VAR 0 2
1385: NOT
1386: OR
1387: IFFALSE 1391
// exit ;
1389: GO 2159
// case nation of nation_american :
1391: LD_VAR 0 2
1395: PUSH
1396: LD_INT 1
1398: DOUBLE
1399: EQUAL
1400: IFTRUE 1404
1402: GO 1618
1404: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1405: LD_ADDR_VAR 0 4
1409: PUSH
1410: LD_INT 35
1412: PUSH
1413: LD_INT 45
1415: PUSH
1416: LD_INT 46
1418: PUSH
1419: LD_INT 47
1421: PUSH
1422: LD_INT 82
1424: PUSH
1425: LD_INT 83
1427: PUSH
1428: LD_INT 84
1430: PUSH
1431: LD_INT 85
1433: PUSH
1434: LD_INT 86
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 2
1442: PUSH
1443: LD_INT 6
1445: PUSH
1446: LD_INT 15
1448: PUSH
1449: LD_INT 16
1451: PUSH
1452: LD_INT 7
1454: PUSH
1455: LD_INT 12
1457: PUSH
1458: LD_INT 13
1460: PUSH
1461: LD_INT 10
1463: PUSH
1464: LD_INT 14
1466: PUSH
1467: LD_INT 20
1469: PUSH
1470: LD_INT 21
1472: PUSH
1473: LD_INT 22
1475: PUSH
1476: LD_INT 25
1478: PUSH
1479: LD_INT 32
1481: PUSH
1482: LD_INT 27
1484: PUSH
1485: LD_INT 36
1487: PUSH
1488: LD_INT 69
1490: PUSH
1491: LD_INT 39
1493: PUSH
1494: LD_INT 34
1496: PUSH
1497: LD_INT 40
1499: PUSH
1500: LD_INT 48
1502: PUSH
1503: LD_INT 49
1505: PUSH
1506: LD_INT 50
1508: PUSH
1509: LD_INT 51
1511: PUSH
1512: LD_INT 52
1514: PUSH
1515: LD_INT 53
1517: PUSH
1518: LD_INT 54
1520: PUSH
1521: LD_INT 55
1523: PUSH
1524: LD_INT 56
1526: PUSH
1527: LD_INT 57
1529: PUSH
1530: LD_INT 58
1532: PUSH
1533: LD_INT 59
1535: PUSH
1536: LD_INT 60
1538: PUSH
1539: LD_INT 61
1541: PUSH
1542: LD_INT 62
1544: PUSH
1545: LD_INT 80
1547: PUSH
1548: LD_INT 82
1550: PUSH
1551: LD_INT 83
1553: PUSH
1554: LD_INT 84
1556: PUSH
1557: LD_INT 85
1559: PUSH
1560: LD_INT 86
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: ST_TO_ADDR
1616: GO 2083
1618: LD_INT 2
1620: DOUBLE
1621: EQUAL
1622: IFTRUE 1626
1624: GO 1852
1626: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1627: LD_ADDR_VAR 0 4
1631: PUSH
1632: LD_INT 35
1634: PUSH
1635: LD_INT 45
1637: PUSH
1638: LD_INT 46
1640: PUSH
1641: LD_INT 47
1643: PUSH
1644: LD_INT 82
1646: PUSH
1647: LD_INT 83
1649: PUSH
1650: LD_INT 84
1652: PUSH
1653: LD_INT 85
1655: PUSH
1656: LD_INT 87
1658: PUSH
1659: LD_INT 70
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: LD_INT 11
1667: PUSH
1668: LD_INT 3
1670: PUSH
1671: LD_INT 4
1673: PUSH
1674: LD_INT 5
1676: PUSH
1677: LD_INT 6
1679: PUSH
1680: LD_INT 15
1682: PUSH
1683: LD_INT 18
1685: PUSH
1686: LD_INT 7
1688: PUSH
1689: LD_INT 17
1691: PUSH
1692: LD_INT 8
1694: PUSH
1695: LD_INT 20
1697: PUSH
1698: LD_INT 21
1700: PUSH
1701: LD_INT 22
1703: PUSH
1704: LD_INT 72
1706: PUSH
1707: LD_INT 26
1709: PUSH
1710: LD_INT 69
1712: PUSH
1713: LD_INT 39
1715: PUSH
1716: LD_INT 40
1718: PUSH
1719: LD_INT 41
1721: PUSH
1722: LD_INT 42
1724: PUSH
1725: LD_INT 43
1727: PUSH
1728: LD_INT 48
1730: PUSH
1731: LD_INT 49
1733: PUSH
1734: LD_INT 50
1736: PUSH
1737: LD_INT 51
1739: PUSH
1740: LD_INT 52
1742: PUSH
1743: LD_INT 53
1745: PUSH
1746: LD_INT 54
1748: PUSH
1749: LD_INT 55
1751: PUSH
1752: LD_INT 56
1754: PUSH
1755: LD_INT 60
1757: PUSH
1758: LD_INT 61
1760: PUSH
1761: LD_INT 62
1763: PUSH
1764: LD_INT 66
1766: PUSH
1767: LD_INT 67
1769: PUSH
1770: LD_INT 68
1772: PUSH
1773: LD_INT 81
1775: PUSH
1776: LD_INT 82
1778: PUSH
1779: LD_INT 83
1781: PUSH
1782: LD_INT 84
1784: PUSH
1785: LD_INT 85
1787: PUSH
1788: LD_INT 87
1790: PUSH
1791: LD_INT 88
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: ST_TO_ADDR
1850: GO 2083
1852: LD_INT 3
1854: DOUBLE
1855: EQUAL
1856: IFTRUE 1860
1858: GO 2082
1860: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1861: LD_ADDR_VAR 0 4
1865: PUSH
1866: LD_INT 46
1868: PUSH
1869: LD_INT 47
1871: PUSH
1872: LD_INT 1
1874: PUSH
1875: LD_INT 2
1877: PUSH
1878: LD_INT 82
1880: PUSH
1881: LD_INT 83
1883: PUSH
1884: LD_INT 84
1886: PUSH
1887: LD_INT 85
1889: PUSH
1890: LD_INT 86
1892: PUSH
1893: LD_INT 11
1895: PUSH
1896: LD_INT 9
1898: PUSH
1899: LD_INT 20
1901: PUSH
1902: LD_INT 19
1904: PUSH
1905: LD_INT 21
1907: PUSH
1908: LD_INT 24
1910: PUSH
1911: LD_INT 22
1913: PUSH
1914: LD_INT 25
1916: PUSH
1917: LD_INT 28
1919: PUSH
1920: LD_INT 29
1922: PUSH
1923: LD_INT 30
1925: PUSH
1926: LD_INT 31
1928: PUSH
1929: LD_INT 37
1931: PUSH
1932: LD_INT 38
1934: PUSH
1935: LD_INT 32
1937: PUSH
1938: LD_INT 27
1940: PUSH
1941: LD_INT 33
1943: PUSH
1944: LD_INT 69
1946: PUSH
1947: LD_INT 39
1949: PUSH
1950: LD_INT 34
1952: PUSH
1953: LD_INT 40
1955: PUSH
1956: LD_INT 71
1958: PUSH
1959: LD_INT 23
1961: PUSH
1962: LD_INT 44
1964: PUSH
1965: LD_INT 48
1967: PUSH
1968: LD_INT 49
1970: PUSH
1971: LD_INT 50
1973: PUSH
1974: LD_INT 51
1976: PUSH
1977: LD_INT 52
1979: PUSH
1980: LD_INT 53
1982: PUSH
1983: LD_INT 54
1985: PUSH
1986: LD_INT 55
1988: PUSH
1989: LD_INT 56
1991: PUSH
1992: LD_INT 57
1994: PUSH
1995: LD_INT 58
1997: PUSH
1998: LD_INT 59
2000: PUSH
2001: LD_INT 63
2003: PUSH
2004: LD_INT 64
2006: PUSH
2007: LD_INT 65
2009: PUSH
2010: LD_INT 82
2012: PUSH
2013: LD_INT 83
2015: PUSH
2016: LD_INT 84
2018: PUSH
2019: LD_INT 85
2021: PUSH
2022: LD_INT 86
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: ST_TO_ADDR
2080: GO 2083
2082: POP
// if state > - 1 and state < 3 then
2083: LD_VAR 0 3
2087: PUSH
2088: LD_INT 1
2090: NEG
2091: GREATER
2092: PUSH
2093: LD_VAR 0 3
2097: PUSH
2098: LD_INT 3
2100: LESS
2101: AND
2102: IFFALSE 2159
// for i in result do
2104: LD_ADDR_VAR 0 5
2108: PUSH
2109: LD_VAR 0 4
2113: PUSH
2114: FOR_IN
2115: IFFALSE 2157
// if GetTech ( i , side ) <> state then
2117: LD_VAR 0 5
2121: PPUSH
2122: LD_VAR 0 1
2126: PPUSH
2127: CALL_OW 321
2131: PUSH
2132: LD_VAR 0 3
2136: NONEQUAL
2137: IFFALSE 2155
// result := result diff i ;
2139: LD_ADDR_VAR 0 4
2143: PUSH
2144: LD_VAR 0 4
2148: PUSH
2149: LD_VAR 0 5
2153: DIFF
2154: ST_TO_ADDR
2155: GO 2114
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 4
2163: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// result := true ;
2169: LD_ADDR_VAR 0 3
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2177: LD_ADDR_VAR 0 5
2181: PUSH
2182: LD_VAR 0 2
2186: PPUSH
2187: CALL_OW 480
2191: ST_TO_ADDR
// if not tmp then
2192: LD_VAR 0 5
2196: NOT
2197: IFFALSE 2201
// exit ;
2199: GO 2250
// for i in tmp do
2201: LD_ADDR_VAR 0 4
2205: PUSH
2206: LD_VAR 0 5
2210: PUSH
2211: FOR_IN
2212: IFFALSE 2248
// if GetTech ( i , side ) <> state_researched then
2214: LD_VAR 0 4
2218: PPUSH
2219: LD_VAR 0 1
2223: PPUSH
2224: CALL_OW 321
2228: PUSH
2229: LD_INT 2
2231: NONEQUAL
2232: IFFALSE 2246
// begin result := false ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: LD_INT 0
2241: ST_TO_ADDR
// exit ;
2242: POP
2243: POP
2244: GO 2250
// end ;
2246: GO 2211
2248: POP
2249: POP
// end ;
2250: LD_VAR 0 3
2254: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2255: LD_INT 0
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
2261: PPUSH
2262: PPUSH
2263: PPUSH
2264: PPUSH
2265: PPUSH
2266: PPUSH
2267: PPUSH
2268: PPUSH
2269: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2270: LD_VAR 0 1
2274: NOT
2275: PUSH
2276: LD_VAR 0 1
2280: PPUSH
2281: CALL_OW 257
2285: PUSH
2286: LD_INT 9
2288: NONEQUAL
2289: OR
2290: IFFALSE 2294
// exit ;
2292: GO 2867
// side := GetSide ( unit ) ;
2294: LD_ADDR_VAR 0 9
2298: PUSH
2299: LD_VAR 0 1
2303: PPUSH
2304: CALL_OW 255
2308: ST_TO_ADDR
// tech_space := tech_spacanom ;
2309: LD_ADDR_VAR 0 12
2313: PUSH
2314: LD_INT 29
2316: ST_TO_ADDR
// tech_time := tech_taurad ;
2317: LD_ADDR_VAR 0 13
2321: PUSH
2322: LD_INT 28
2324: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2325: LD_ADDR_VAR 0 11
2329: PUSH
2330: LD_VAR 0 1
2334: PPUSH
2335: CALL_OW 310
2339: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2340: LD_VAR 0 11
2344: PPUSH
2345: CALL_OW 247
2349: PUSH
2350: LD_INT 2
2352: EQUAL
2353: IFFALSE 2357
// exit ;
2355: GO 2867
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2357: LD_ADDR_VAR 0 8
2361: PUSH
2362: LD_INT 81
2364: PUSH
2365: LD_VAR 0 9
2369: PUSH
2370: EMPTY
2371: LIST
2372: LIST
2373: PUSH
2374: LD_INT 3
2376: PUSH
2377: LD_INT 21
2379: PUSH
2380: LD_INT 3
2382: PUSH
2383: EMPTY
2384: LIST
2385: LIST
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PPUSH
2395: CALL_OW 69
2399: ST_TO_ADDR
// if not tmp then
2400: LD_VAR 0 8
2404: NOT
2405: IFFALSE 2409
// exit ;
2407: GO 2867
// if in_unit then
2409: LD_VAR 0 11
2413: IFFALSE 2437
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2415: LD_ADDR_VAR 0 10
2419: PUSH
2420: LD_VAR 0 8
2424: PPUSH
2425: LD_VAR 0 11
2429: PPUSH
2430: CALL_OW 74
2434: ST_TO_ADDR
2435: GO 2457
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2437: LD_ADDR_VAR 0 10
2441: PUSH
2442: LD_VAR 0 8
2446: PPUSH
2447: LD_VAR 0 1
2451: PPUSH
2452: CALL_OW 74
2456: ST_TO_ADDR
// if not enemy then
2457: LD_VAR 0 10
2461: NOT
2462: IFFALSE 2466
// exit ;
2464: GO 2867
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2466: LD_VAR 0 11
2470: PUSH
2471: LD_VAR 0 11
2475: PPUSH
2476: LD_VAR 0 10
2480: PPUSH
2481: CALL_OW 296
2485: PUSH
2486: LD_INT 13
2488: GREATER
2489: AND
2490: PUSH
2491: LD_VAR 0 1
2495: PPUSH
2496: LD_VAR 0 10
2500: PPUSH
2501: CALL_OW 296
2505: PUSH
2506: LD_INT 12
2508: GREATER
2509: OR
2510: IFFALSE 2514
// exit ;
2512: GO 2867
// missile := [ 1 ] ;
2514: LD_ADDR_VAR 0 14
2518: PUSH
2519: LD_INT 1
2521: PUSH
2522: EMPTY
2523: LIST
2524: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2525: LD_VAR 0 9
2529: PPUSH
2530: LD_VAR 0 12
2534: PPUSH
2535: CALL_OW 325
2539: IFFALSE 2568
// missile := Insert ( missile , missile + 1 , 2 ) ;
2541: LD_ADDR_VAR 0 14
2545: PUSH
2546: LD_VAR 0 14
2550: PPUSH
2551: LD_VAR 0 14
2555: PUSH
2556: LD_INT 1
2558: PLUS
2559: PPUSH
2560: LD_INT 2
2562: PPUSH
2563: CALL_OW 2
2567: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2568: LD_VAR 0 9
2572: PPUSH
2573: LD_VAR 0 13
2577: PPUSH
2578: CALL_OW 325
2582: PUSH
2583: LD_VAR 0 10
2587: PPUSH
2588: CALL_OW 255
2592: PPUSH
2593: LD_VAR 0 13
2597: PPUSH
2598: CALL_OW 325
2602: NOT
2603: AND
2604: IFFALSE 2633
// missile := Insert ( missile , missile + 1 , 3 ) ;
2606: LD_ADDR_VAR 0 14
2610: PUSH
2611: LD_VAR 0 14
2615: PPUSH
2616: LD_VAR 0 14
2620: PUSH
2621: LD_INT 1
2623: PLUS
2624: PPUSH
2625: LD_INT 3
2627: PPUSH
2628: CALL_OW 2
2632: ST_TO_ADDR
// if missile < 2 then
2633: LD_VAR 0 14
2637: PUSH
2638: LD_INT 2
2640: LESS
2641: IFFALSE 2645
// exit ;
2643: GO 2867
// x := GetX ( enemy ) ;
2645: LD_ADDR_VAR 0 4
2649: PUSH
2650: LD_VAR 0 10
2654: PPUSH
2655: CALL_OW 250
2659: ST_TO_ADDR
// y := GetY ( enemy ) ;
2660: LD_ADDR_VAR 0 5
2664: PUSH
2665: LD_VAR 0 10
2669: PPUSH
2670: CALL_OW 251
2674: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2675: LD_ADDR_VAR 0 6
2679: PUSH
2680: LD_VAR 0 4
2684: PUSH
2685: LD_INT 1
2687: NEG
2688: PPUSH
2689: LD_INT 1
2691: PPUSH
2692: CALL_OW 12
2696: PLUS
2697: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2698: LD_ADDR_VAR 0 7
2702: PUSH
2703: LD_VAR 0 5
2707: PUSH
2708: LD_INT 1
2710: NEG
2711: PPUSH
2712: LD_INT 1
2714: PPUSH
2715: CALL_OW 12
2719: PLUS
2720: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2721: LD_VAR 0 6
2725: PPUSH
2726: LD_VAR 0 7
2730: PPUSH
2731: CALL_OW 488
2735: NOT
2736: IFFALSE 2758
// begin _x := x ;
2738: LD_ADDR_VAR 0 6
2742: PUSH
2743: LD_VAR 0 4
2747: ST_TO_ADDR
// _y := y ;
2748: LD_ADDR_VAR 0 7
2752: PUSH
2753: LD_VAR 0 5
2757: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2758: LD_ADDR_VAR 0 3
2762: PUSH
2763: LD_INT 1
2765: PPUSH
2766: LD_VAR 0 14
2770: PPUSH
2771: CALL_OW 12
2775: ST_TO_ADDR
// case i of 1 :
2776: LD_VAR 0 3
2780: PUSH
2781: LD_INT 1
2783: DOUBLE
2784: EQUAL
2785: IFTRUE 2789
2787: GO 2806
2789: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2790: LD_VAR 0 1
2794: PPUSH
2795: LD_VAR 0 10
2799: PPUSH
2800: CALL_OW 115
2804: GO 2867
2806: LD_INT 2
2808: DOUBLE
2809: EQUAL
2810: IFTRUE 2814
2812: GO 2836
2814: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2815: LD_VAR 0 1
2819: PPUSH
2820: LD_VAR 0 6
2824: PPUSH
2825: LD_VAR 0 7
2829: PPUSH
2830: CALL_OW 153
2834: GO 2867
2836: LD_INT 3
2838: DOUBLE
2839: EQUAL
2840: IFTRUE 2844
2842: GO 2866
2844: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2845: LD_VAR 0 1
2849: PPUSH
2850: LD_VAR 0 6
2854: PPUSH
2855: LD_VAR 0 7
2859: PPUSH
2860: CALL_OW 154
2864: GO 2867
2866: POP
// end ;
2867: LD_VAR 0 2
2871: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2872: LD_INT 0
2874: PPUSH
2875: PPUSH
2876: PPUSH
2877: PPUSH
2878: PPUSH
2879: PPUSH
// if not unit or not building then
2880: LD_VAR 0 1
2884: NOT
2885: PUSH
2886: LD_VAR 0 2
2890: NOT
2891: OR
2892: IFFALSE 2896
// exit ;
2894: GO 3054
// x := GetX ( building ) ;
2896: LD_ADDR_VAR 0 5
2900: PUSH
2901: LD_VAR 0 2
2905: PPUSH
2906: CALL_OW 250
2910: ST_TO_ADDR
// y := GetY ( building ) ;
2911: LD_ADDR_VAR 0 6
2915: PUSH
2916: LD_VAR 0 2
2920: PPUSH
2921: CALL_OW 251
2925: ST_TO_ADDR
// for i = 0 to 5 do
2926: LD_ADDR_VAR 0 4
2930: PUSH
2931: DOUBLE
2932: LD_INT 0
2934: DEC
2935: ST_TO_ADDR
2936: LD_INT 5
2938: PUSH
2939: FOR_TO
2940: IFFALSE 3052
// begin _x := ShiftX ( x , i , 3 ) ;
2942: LD_ADDR_VAR 0 7
2946: PUSH
2947: LD_VAR 0 5
2951: PPUSH
2952: LD_VAR 0 4
2956: PPUSH
2957: LD_INT 3
2959: PPUSH
2960: CALL_OW 272
2964: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2965: LD_ADDR_VAR 0 8
2969: PUSH
2970: LD_VAR 0 6
2974: PPUSH
2975: LD_VAR 0 4
2979: PPUSH
2980: LD_INT 3
2982: PPUSH
2983: CALL_OW 273
2987: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2988: LD_VAR 0 7
2992: PPUSH
2993: LD_VAR 0 8
2997: PPUSH
2998: CALL_OW 488
3002: NOT
3003: IFFALSE 3007
// continue ;
3005: GO 2939
// if HexInfo ( _x , _y ) = 0 then
3007: LD_VAR 0 7
3011: PPUSH
3012: LD_VAR 0 8
3016: PPUSH
3017: CALL_OW 428
3021: PUSH
3022: LD_INT 0
3024: EQUAL
3025: IFFALSE 3050
// begin ComMoveXY ( unit , _x , _y ) ;
3027: LD_VAR 0 1
3031: PPUSH
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_VAR 0 8
3041: PPUSH
3042: CALL_OW 111
// exit ;
3046: POP
3047: POP
3048: GO 3054
// end ; end ;
3050: GO 2939
3052: POP
3053: POP
// end ;
3054: LD_VAR 0 3
3058: RET
// export function ScanBase ( side , base_area ) ; begin
3059: LD_INT 0
3061: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3062: LD_ADDR_VAR 0 3
3066: PUSH
3067: LD_VAR 0 2
3071: PPUSH
3072: LD_INT 81
3074: PUSH
3075: LD_VAR 0 1
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PPUSH
3084: CALL_OW 70
3088: ST_TO_ADDR
// end ;
3089: LD_VAR 0 3
3093: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3094: LD_INT 0
3096: PPUSH
3097: PPUSH
3098: PPUSH
3099: PPUSH
// result := false ;
3100: LD_ADDR_VAR 0 2
3104: PUSH
3105: LD_INT 0
3107: ST_TO_ADDR
// side := GetSide ( unit ) ;
3108: LD_ADDR_VAR 0 3
3112: PUSH
3113: LD_VAR 0 1
3117: PPUSH
3118: CALL_OW 255
3122: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3123: LD_ADDR_VAR 0 4
3127: PUSH
3128: LD_VAR 0 1
3132: PPUSH
3133: CALL_OW 248
3137: ST_TO_ADDR
// case nat of 1 :
3138: LD_VAR 0 4
3142: PUSH
3143: LD_INT 1
3145: DOUBLE
3146: EQUAL
3147: IFTRUE 3151
3149: GO 3162
3151: POP
// tech := tech_lassight ; 2 :
3152: LD_ADDR_VAR 0 5
3156: PUSH
3157: LD_INT 12
3159: ST_TO_ADDR
3160: GO 3201
3162: LD_INT 2
3164: DOUBLE
3165: EQUAL
3166: IFTRUE 3170
3168: GO 3181
3170: POP
// tech := tech_mortar ; 3 :
3171: LD_ADDR_VAR 0 5
3175: PUSH
3176: LD_INT 41
3178: ST_TO_ADDR
3179: GO 3201
3181: LD_INT 3
3183: DOUBLE
3184: EQUAL
3185: IFTRUE 3189
3187: GO 3200
3189: POP
// tech := tech_bazooka ; end ;
3190: LD_ADDR_VAR 0 5
3194: PUSH
3195: LD_INT 44
3197: ST_TO_ADDR
3198: GO 3201
3200: POP
// if Researched ( side , tech ) then
3201: LD_VAR 0 3
3205: PPUSH
3206: LD_VAR 0 5
3210: PPUSH
3211: CALL_OW 325
3215: IFFALSE 3242
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3217: LD_ADDR_VAR 0 2
3221: PUSH
3222: LD_INT 5
3224: PUSH
3225: LD_INT 8
3227: PUSH
3228: LD_INT 9
3230: PUSH
3231: EMPTY
3232: LIST
3233: LIST
3234: LIST
3235: PUSH
3236: LD_VAR 0 4
3240: ARRAY
3241: ST_TO_ADDR
// end ;
3242: LD_VAR 0 2
3246: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3247: LD_INT 0
3249: PPUSH
3250: PPUSH
3251: PPUSH
// if not mines then
3252: LD_VAR 0 2
3256: NOT
3257: IFFALSE 3261
// exit ;
3259: GO 3405
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3261: LD_ADDR_VAR 0 5
3265: PUSH
3266: LD_INT 81
3268: PUSH
3269: LD_VAR 0 1
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 3
3280: PUSH
3281: LD_INT 21
3283: PUSH
3284: LD_INT 3
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PPUSH
3299: CALL_OW 69
3303: ST_TO_ADDR
// for i in mines do
3304: LD_ADDR_VAR 0 4
3308: PUSH
3309: LD_VAR 0 2
3313: PUSH
3314: FOR_IN
3315: IFFALSE 3403
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3317: LD_VAR 0 4
3321: PUSH
3322: LD_INT 1
3324: ARRAY
3325: PPUSH
3326: LD_VAR 0 4
3330: PUSH
3331: LD_INT 2
3333: ARRAY
3334: PPUSH
3335: CALL_OW 458
3339: NOT
3340: IFFALSE 3344
// continue ;
3342: GO 3314
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3344: LD_VAR 0 4
3348: PUSH
3349: LD_INT 1
3351: ARRAY
3352: PPUSH
3353: LD_VAR 0 4
3357: PUSH
3358: LD_INT 2
3360: ARRAY
3361: PPUSH
3362: CALL_OW 428
3366: PUSH
3367: LD_VAR 0 5
3371: IN
3372: IFFALSE 3401
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3374: LD_VAR 0 4
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: PPUSH
3383: LD_VAR 0 4
3387: PUSH
3388: LD_INT 2
3390: ARRAY
3391: PPUSH
3392: LD_VAR 0 1
3396: PPUSH
3397: CALL_OW 456
// end ;
3401: GO 3314
3403: POP
3404: POP
// end ;
3405: LD_VAR 0 3
3409: RET
// export function Count ( array ) ; var i ; begin
3410: LD_INT 0
3412: PPUSH
3413: PPUSH
// result := 0 ;
3414: LD_ADDR_VAR 0 2
3418: PUSH
3419: LD_INT 0
3421: ST_TO_ADDR
// for i in array do
3422: LD_ADDR_VAR 0 3
3426: PUSH
3427: LD_VAR 0 1
3431: PUSH
3432: FOR_IN
3433: IFFALSE 3457
// if i then
3435: LD_VAR 0 3
3439: IFFALSE 3455
// result := result + 1 ;
3441: LD_ADDR_VAR 0 2
3445: PUSH
3446: LD_VAR 0 2
3450: PUSH
3451: LD_INT 1
3453: PLUS
3454: ST_TO_ADDR
3455: GO 3432
3457: POP
3458: POP
// end ;
3459: LD_VAR 0 2
3463: RET
// export function IsEmpty ( building ) ; begin
3464: LD_INT 0
3466: PPUSH
// if not building then
3467: LD_VAR 0 1
3471: NOT
3472: IFFALSE 3476
// exit ;
3474: GO 3519
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3476: LD_ADDR_VAR 0 2
3480: PUSH
3481: LD_VAR 0 1
3485: PUSH
3486: LD_INT 22
3488: PUSH
3489: LD_VAR 0 1
3493: PPUSH
3494: CALL_OW 255
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: LD_INT 58
3505: PUSH
3506: EMPTY
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: IN
3518: ST_TO_ADDR
// end ;
3519: LD_VAR 0 2
3523: RET
// export function IsNotFull ( building ) ; begin
3524: LD_INT 0
3526: PPUSH
// if not building then
3527: LD_VAR 0 1
3531: NOT
3532: IFFALSE 3536
// exit ;
3534: GO 3555
// result := UnitsInside ( building ) < 6 ;
3536: LD_ADDR_VAR 0 2
3540: PUSH
3541: LD_VAR 0 1
3545: PPUSH
3546: CALL_OW 313
3550: PUSH
3551: LD_INT 6
3553: LESS
3554: ST_TO_ADDR
// end ;
3555: LD_VAR 0 2
3559: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
3564: PPUSH
3565: PPUSH
// tmp := [ ] ;
3566: LD_ADDR_VAR 0 3
3570: PUSH
3571: EMPTY
3572: ST_TO_ADDR
// list := [ ] ;
3573: LD_ADDR_VAR 0 5
3577: PUSH
3578: EMPTY
3579: ST_TO_ADDR
// for i = 16 to 25 do
3580: LD_ADDR_VAR 0 4
3584: PUSH
3585: DOUBLE
3586: LD_INT 16
3588: DEC
3589: ST_TO_ADDR
3590: LD_INT 25
3592: PUSH
3593: FOR_TO
3594: IFFALSE 3667
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3596: LD_ADDR_VAR 0 3
3600: PUSH
3601: LD_VAR 0 3
3605: PUSH
3606: LD_INT 22
3608: PUSH
3609: LD_VAR 0 1
3613: PPUSH
3614: CALL_OW 255
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: LD_INT 91
3625: PUSH
3626: LD_VAR 0 1
3630: PUSH
3631: LD_INT 6
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 30
3641: PUSH
3642: LD_VAR 0 4
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: LIST
3655: PUSH
3656: EMPTY
3657: LIST
3658: PPUSH
3659: CALL_OW 69
3663: ADD
3664: ST_TO_ADDR
3665: GO 3593
3667: POP
3668: POP
// for i = 1 to tmp do
3669: LD_ADDR_VAR 0 4
3673: PUSH
3674: DOUBLE
3675: LD_INT 1
3677: DEC
3678: ST_TO_ADDR
3679: LD_VAR 0 3
3683: PUSH
3684: FOR_TO
3685: IFFALSE 3773
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3687: LD_ADDR_VAR 0 5
3691: PUSH
3692: LD_VAR 0 5
3696: PUSH
3697: LD_VAR 0 3
3701: PUSH
3702: LD_VAR 0 4
3706: ARRAY
3707: PPUSH
3708: CALL_OW 266
3712: PUSH
3713: LD_VAR 0 3
3717: PUSH
3718: LD_VAR 0 4
3722: ARRAY
3723: PPUSH
3724: CALL_OW 250
3728: PUSH
3729: LD_VAR 0 3
3733: PUSH
3734: LD_VAR 0 4
3738: ARRAY
3739: PPUSH
3740: CALL_OW 251
3744: PUSH
3745: LD_VAR 0 3
3749: PUSH
3750: LD_VAR 0 4
3754: ARRAY
3755: PPUSH
3756: CALL_OW 254
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: PUSH
3767: EMPTY
3768: LIST
3769: ADD
3770: ST_TO_ADDR
3771: GO 3684
3773: POP
3774: POP
// result := list ;
3775: LD_ADDR_VAR 0 2
3779: PUSH
3780: LD_VAR 0 5
3784: ST_TO_ADDR
// end ;
3785: LD_VAR 0 2
3789: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3790: LD_INT 0
3792: PPUSH
3793: PPUSH
3794: PPUSH
3795: PPUSH
3796: PPUSH
3797: PPUSH
3798: PPUSH
// if not factory then
3799: LD_VAR 0 1
3803: NOT
3804: IFFALSE 3808
// exit ;
3806: GO 4401
// if control = control_apeman then
3808: LD_VAR 0 4
3812: PUSH
3813: LD_INT 5
3815: EQUAL
3816: IFFALSE 3925
// begin tmp := UnitsInside ( factory ) ;
3818: LD_ADDR_VAR 0 8
3822: PUSH
3823: LD_VAR 0 1
3827: PPUSH
3828: CALL_OW 313
3832: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3833: LD_VAR 0 8
3837: PPUSH
3838: LD_INT 25
3840: PUSH
3841: LD_INT 12
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: PPUSH
3848: CALL_OW 72
3852: NOT
3853: IFFALSE 3863
// control := control_manual ;
3855: LD_ADDR_VAR 0 4
3859: PUSH
3860: LD_INT 1
3862: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3863: LD_ADDR_VAR 0 8
3867: PUSH
3868: LD_VAR 0 1
3872: PPUSH
3873: CALL 3560 0 1
3877: ST_TO_ADDR
// if tmp then
3878: LD_VAR 0 8
3882: IFFALSE 3925
// begin for i in tmp do
3884: LD_ADDR_VAR 0 7
3888: PUSH
3889: LD_VAR 0 8
3893: PUSH
3894: FOR_IN
3895: IFFALSE 3923
// if i [ 1 ] = b_ext_radio then
3897: LD_VAR 0 7
3901: PUSH
3902: LD_INT 1
3904: ARRAY
3905: PUSH
3906: LD_INT 22
3908: EQUAL
3909: IFFALSE 3921
// begin control := control_remote ;
3911: LD_ADDR_VAR 0 4
3915: PUSH
3916: LD_INT 2
3918: ST_TO_ADDR
// break ;
3919: GO 3923
// end ;
3921: GO 3894
3923: POP
3924: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3925: LD_VAR 0 1
3929: PPUSH
3930: LD_VAR 0 2
3934: PPUSH
3935: LD_VAR 0 3
3939: PPUSH
3940: LD_VAR 0 4
3944: PPUSH
3945: LD_VAR 0 5
3949: PPUSH
3950: CALL_OW 448
3954: IFFALSE 3989
// begin result := [ chassis , engine , control , weapon ] ;
3956: LD_ADDR_VAR 0 6
3960: PUSH
3961: LD_VAR 0 2
3965: PUSH
3966: LD_VAR 0 3
3970: PUSH
3971: LD_VAR 0 4
3975: PUSH
3976: LD_VAR 0 5
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: ST_TO_ADDR
// exit ;
3987: GO 4401
// end ; _chassis := AvailableChassisList ( factory ) ;
3989: LD_ADDR_VAR 0 9
3993: PUSH
3994: LD_VAR 0 1
3998: PPUSH
3999: CALL_OW 475
4003: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4004: LD_ADDR_VAR 0 11
4008: PUSH
4009: LD_VAR 0 1
4013: PPUSH
4014: CALL_OW 476
4018: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4019: LD_ADDR_VAR 0 12
4023: PUSH
4024: LD_VAR 0 1
4028: PPUSH
4029: CALL_OW 477
4033: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4034: LD_ADDR_VAR 0 10
4038: PUSH
4039: LD_VAR 0 1
4043: PPUSH
4044: CALL_OW 478
4048: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4049: LD_VAR 0 9
4053: NOT
4054: PUSH
4055: LD_VAR 0 11
4059: NOT
4060: OR
4061: PUSH
4062: LD_VAR 0 12
4066: NOT
4067: OR
4068: PUSH
4069: LD_VAR 0 10
4073: NOT
4074: OR
4075: IFFALSE 4110
// begin result := [ chassis , engine , control , weapon ] ;
4077: LD_ADDR_VAR 0 6
4081: PUSH
4082: LD_VAR 0 2
4086: PUSH
4087: LD_VAR 0 3
4091: PUSH
4092: LD_VAR 0 4
4096: PUSH
4097: LD_VAR 0 5
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: ST_TO_ADDR
// exit ;
4108: GO 4401
// end ; if not chassis in _chassis then
4110: LD_VAR 0 2
4114: PUSH
4115: LD_VAR 0 9
4119: IN
4120: NOT
4121: IFFALSE 4147
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4123: LD_ADDR_VAR 0 2
4127: PUSH
4128: LD_VAR 0 9
4132: PUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_VAR 0 9
4140: PPUSH
4141: CALL_OW 12
4145: ARRAY
4146: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4147: LD_VAR 0 2
4151: PPUSH
4152: LD_VAR 0 3
4156: PPUSH
4157: CALL 4406 0 2
4161: NOT
4162: IFFALSE 4221
// repeat engine := _engine [ 1 ] ;
4164: LD_ADDR_VAR 0 3
4168: PUSH
4169: LD_VAR 0 11
4173: PUSH
4174: LD_INT 1
4176: ARRAY
4177: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4178: LD_ADDR_VAR 0 11
4182: PUSH
4183: LD_VAR 0 11
4187: PPUSH
4188: LD_INT 1
4190: PPUSH
4191: CALL_OW 3
4195: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4196: LD_VAR 0 2
4200: PPUSH
4201: LD_VAR 0 3
4205: PPUSH
4206: CALL 4406 0 2
4210: PUSH
4211: LD_VAR 0 11
4215: PUSH
4216: EMPTY
4217: EQUAL
4218: OR
4219: IFFALSE 4164
// if not control in _control then
4221: LD_VAR 0 4
4225: PUSH
4226: LD_VAR 0 12
4230: IN
4231: NOT
4232: IFFALSE 4258
// control := _control [ rand ( 1 , _control ) ] ;
4234: LD_ADDR_VAR 0 4
4238: PUSH
4239: LD_VAR 0 12
4243: PUSH
4244: LD_INT 1
4246: PPUSH
4247: LD_VAR 0 12
4251: PPUSH
4252: CALL_OW 12
4256: ARRAY
4257: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4258: LD_VAR 0 2
4262: PPUSH
4263: LD_VAR 0 5
4267: PPUSH
4268: CALL 4626 0 2
4272: NOT
4273: IFFALSE 4332
// repeat weapon := _weapon [ 1 ] ;
4275: LD_ADDR_VAR 0 5
4279: PUSH
4280: LD_VAR 0 10
4284: PUSH
4285: LD_INT 1
4287: ARRAY
4288: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4289: LD_ADDR_VAR 0 10
4293: PUSH
4294: LD_VAR 0 10
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: CALL_OW 3
4306: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4307: LD_VAR 0 2
4311: PPUSH
4312: LD_VAR 0 5
4316: PPUSH
4317: CALL 4626 0 2
4321: PUSH
4322: LD_VAR 0 10
4326: PUSH
4327: EMPTY
4328: EQUAL
4329: OR
4330: IFFALSE 4275
// result := [ ] ;
4332: LD_ADDR_VAR 0 6
4336: PUSH
4337: EMPTY
4338: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4339: LD_VAR 0 1
4343: PPUSH
4344: LD_VAR 0 2
4348: PPUSH
4349: LD_VAR 0 3
4353: PPUSH
4354: LD_VAR 0 4
4358: PPUSH
4359: LD_VAR 0 5
4363: PPUSH
4364: CALL_OW 448
4368: IFFALSE 4401
// result := [ chassis , engine , control , weapon ] ;
4370: LD_ADDR_VAR 0 6
4374: PUSH
4375: LD_VAR 0 2
4379: PUSH
4380: LD_VAR 0 3
4384: PUSH
4385: LD_VAR 0 4
4389: PUSH
4390: LD_VAR 0 5
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: ST_TO_ADDR
// end ;
4401: LD_VAR 0 6
4405: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4406: LD_INT 0
4408: PPUSH
// if not chassis or not engine then
4409: LD_VAR 0 1
4413: NOT
4414: PUSH
4415: LD_VAR 0 2
4419: NOT
4420: OR
4421: IFFALSE 4425
// exit ;
4423: GO 4621
// case engine of engine_solar :
4425: LD_VAR 0 2
4429: PUSH
4430: LD_INT 2
4432: DOUBLE
4433: EQUAL
4434: IFTRUE 4438
4436: GO 4476
4438: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4439: LD_ADDR_VAR 0 3
4443: PUSH
4444: LD_INT 11
4446: PUSH
4447: LD_INT 12
4449: PUSH
4450: LD_INT 13
4452: PUSH
4453: LD_INT 14
4455: PUSH
4456: LD_INT 1
4458: PUSH
4459: LD_INT 2
4461: PUSH
4462: LD_INT 3
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: ST_TO_ADDR
4474: GO 4605
4476: LD_INT 1
4478: DOUBLE
4479: EQUAL
4480: IFTRUE 4484
4482: GO 4546
4484: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4485: LD_ADDR_VAR 0 3
4489: PUSH
4490: LD_INT 11
4492: PUSH
4493: LD_INT 12
4495: PUSH
4496: LD_INT 13
4498: PUSH
4499: LD_INT 14
4501: PUSH
4502: LD_INT 1
4504: PUSH
4505: LD_INT 2
4507: PUSH
4508: LD_INT 3
4510: PUSH
4511: LD_INT 4
4513: PUSH
4514: LD_INT 5
4516: PUSH
4517: LD_INT 21
4519: PUSH
4520: LD_INT 23
4522: PUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 24
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: ST_TO_ADDR
4544: GO 4605
4546: LD_INT 3
4548: DOUBLE
4549: EQUAL
4550: IFTRUE 4554
4552: GO 4604
4554: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4555: LD_ADDR_VAR 0 3
4559: PUSH
4560: LD_INT 13
4562: PUSH
4563: LD_INT 14
4565: PUSH
4566: LD_INT 2
4568: PUSH
4569: LD_INT 3
4571: PUSH
4572: LD_INT 4
4574: PUSH
4575: LD_INT 5
4577: PUSH
4578: LD_INT 21
4580: PUSH
4581: LD_INT 22
4583: PUSH
4584: LD_INT 23
4586: PUSH
4587: LD_INT 24
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: ST_TO_ADDR
4602: GO 4605
4604: POP
// result := ( chassis in result ) ;
4605: LD_ADDR_VAR 0 3
4609: PUSH
4610: LD_VAR 0 1
4614: PUSH
4615: LD_VAR 0 3
4619: IN
4620: ST_TO_ADDR
// end ;
4621: LD_VAR 0 3
4625: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4626: LD_INT 0
4628: PPUSH
// if not chassis or not weapon then
4629: LD_VAR 0 1
4633: NOT
4634: PUSH
4635: LD_VAR 0 2
4639: NOT
4640: OR
4641: IFFALSE 4645
// exit ;
4643: GO 5707
// case weapon of us_machine_gun :
4645: LD_VAR 0 2
4649: PUSH
4650: LD_INT 2
4652: DOUBLE
4653: EQUAL
4654: IFTRUE 4658
4656: GO 4688
4658: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4659: LD_ADDR_VAR 0 3
4663: PUSH
4664: LD_INT 1
4666: PUSH
4667: LD_INT 2
4669: PUSH
4670: LD_INT 3
4672: PUSH
4673: LD_INT 4
4675: PUSH
4676: LD_INT 5
4678: PUSH
4679: EMPTY
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: ST_TO_ADDR
4686: GO 5691
4688: LD_INT 3
4690: DOUBLE
4691: EQUAL
4692: IFTRUE 4696
4694: GO 4726
4696: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4697: LD_ADDR_VAR 0 3
4701: PUSH
4702: LD_INT 1
4704: PUSH
4705: LD_INT 2
4707: PUSH
4708: LD_INT 3
4710: PUSH
4711: LD_INT 4
4713: PUSH
4714: LD_INT 5
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: ST_TO_ADDR
4724: GO 5691
4726: LD_INT 11
4728: DOUBLE
4729: EQUAL
4730: IFTRUE 4734
4732: GO 4764
4734: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4735: LD_ADDR_VAR 0 3
4739: PUSH
4740: LD_INT 1
4742: PUSH
4743: LD_INT 2
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: LD_INT 4
4751: PUSH
4752: LD_INT 5
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: ST_TO_ADDR
4762: GO 5691
4764: LD_INT 4
4766: DOUBLE
4767: EQUAL
4768: IFTRUE 4772
4770: GO 4798
4772: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4773: LD_ADDR_VAR 0 3
4777: PUSH
4778: LD_INT 2
4780: PUSH
4781: LD_INT 3
4783: PUSH
4784: LD_INT 4
4786: PUSH
4787: LD_INT 5
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: ST_TO_ADDR
4796: GO 5691
4798: LD_INT 5
4800: DOUBLE
4801: EQUAL
4802: IFTRUE 4806
4804: GO 4832
4806: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4807: LD_ADDR_VAR 0 3
4811: PUSH
4812: LD_INT 2
4814: PUSH
4815: LD_INT 3
4817: PUSH
4818: LD_INT 4
4820: PUSH
4821: LD_INT 5
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: ST_TO_ADDR
4830: GO 5691
4832: LD_INT 9
4834: DOUBLE
4835: EQUAL
4836: IFTRUE 4840
4838: GO 4866
4840: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4841: LD_ADDR_VAR 0 3
4845: PUSH
4846: LD_INT 2
4848: PUSH
4849: LD_INT 3
4851: PUSH
4852: LD_INT 4
4854: PUSH
4855: LD_INT 5
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: ST_TO_ADDR
4864: GO 5691
4866: LD_INT 7
4868: DOUBLE
4869: EQUAL
4870: IFTRUE 4874
4872: GO 4900
4874: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4875: LD_ADDR_VAR 0 3
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: LD_INT 3
4885: PUSH
4886: LD_INT 4
4888: PUSH
4889: LD_INT 5
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: ST_TO_ADDR
4898: GO 5691
4900: LD_INT 12
4902: DOUBLE
4903: EQUAL
4904: IFTRUE 4908
4906: GO 4934
4908: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4909: LD_ADDR_VAR 0 3
4913: PUSH
4914: LD_INT 2
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: LD_INT 4
4922: PUSH
4923: LD_INT 5
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: ST_TO_ADDR
4932: GO 5691
4934: LD_INT 13
4936: DOUBLE
4937: EQUAL
4938: IFTRUE 4942
4940: GO 4968
4942: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4943: LD_ADDR_VAR 0 3
4947: PUSH
4948: LD_INT 2
4950: PUSH
4951: LD_INT 3
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: LD_INT 5
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: ST_TO_ADDR
4966: GO 5691
4968: LD_INT 14
4970: DOUBLE
4971: EQUAL
4972: IFTRUE 4976
4974: GO 4994
4976: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4977: LD_ADDR_VAR 0 3
4981: PUSH
4982: LD_INT 4
4984: PUSH
4985: LD_INT 5
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: ST_TO_ADDR
4992: GO 5691
4994: LD_INT 6
4996: DOUBLE
4997: EQUAL
4998: IFTRUE 5002
5000: GO 5020
5002: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5003: LD_ADDR_VAR 0 3
5007: PUSH
5008: LD_INT 4
5010: PUSH
5011: LD_INT 5
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: ST_TO_ADDR
5018: GO 5691
5020: LD_INT 10
5022: DOUBLE
5023: EQUAL
5024: IFTRUE 5028
5026: GO 5046
5028: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5029: LD_ADDR_VAR 0 3
5033: PUSH
5034: LD_INT 4
5036: PUSH
5037: LD_INT 5
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: ST_TO_ADDR
5044: GO 5691
5046: LD_INT 22
5048: DOUBLE
5049: EQUAL
5050: IFTRUE 5054
5052: GO 5080
5054: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5055: LD_ADDR_VAR 0 3
5059: PUSH
5060: LD_INT 11
5062: PUSH
5063: LD_INT 12
5065: PUSH
5066: LD_INT 13
5068: PUSH
5069: LD_INT 14
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: ST_TO_ADDR
5078: GO 5691
5080: LD_INT 23
5082: DOUBLE
5083: EQUAL
5084: IFTRUE 5088
5086: GO 5114
5088: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5089: LD_ADDR_VAR 0 3
5093: PUSH
5094: LD_INT 11
5096: PUSH
5097: LD_INT 12
5099: PUSH
5100: LD_INT 13
5102: PUSH
5103: LD_INT 14
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: ST_TO_ADDR
5112: GO 5691
5114: LD_INT 24
5116: DOUBLE
5117: EQUAL
5118: IFTRUE 5122
5120: GO 5148
5122: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5123: LD_ADDR_VAR 0 3
5127: PUSH
5128: LD_INT 11
5130: PUSH
5131: LD_INT 12
5133: PUSH
5134: LD_INT 13
5136: PUSH
5137: LD_INT 14
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: ST_TO_ADDR
5146: GO 5691
5148: LD_INT 30
5150: DOUBLE
5151: EQUAL
5152: IFTRUE 5156
5154: GO 5182
5156: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5157: LD_ADDR_VAR 0 3
5161: PUSH
5162: LD_INT 11
5164: PUSH
5165: LD_INT 12
5167: PUSH
5168: LD_INT 13
5170: PUSH
5171: LD_INT 14
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: ST_TO_ADDR
5180: GO 5691
5182: LD_INT 25
5184: DOUBLE
5185: EQUAL
5186: IFTRUE 5190
5188: GO 5208
5190: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5191: LD_ADDR_VAR 0 3
5195: PUSH
5196: LD_INT 13
5198: PUSH
5199: LD_INT 14
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: ST_TO_ADDR
5206: GO 5691
5208: LD_INT 27
5210: DOUBLE
5211: EQUAL
5212: IFTRUE 5216
5214: GO 5234
5216: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5217: LD_ADDR_VAR 0 3
5221: PUSH
5222: LD_INT 13
5224: PUSH
5225: LD_INT 14
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: ST_TO_ADDR
5232: GO 5691
5234: LD_EXP 8
5238: DOUBLE
5239: EQUAL
5240: IFTRUE 5244
5242: GO 5270
5244: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5245: LD_ADDR_VAR 0 3
5249: PUSH
5250: LD_INT 11
5252: PUSH
5253: LD_INT 12
5255: PUSH
5256: LD_INT 13
5258: PUSH
5259: LD_INT 14
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: ST_TO_ADDR
5268: GO 5691
5270: LD_INT 28
5272: DOUBLE
5273: EQUAL
5274: IFTRUE 5278
5276: GO 5296
5278: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5279: LD_ADDR_VAR 0 3
5283: PUSH
5284: LD_INT 13
5286: PUSH
5287: LD_INT 14
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: ST_TO_ADDR
5294: GO 5691
5296: LD_INT 29
5298: DOUBLE
5299: EQUAL
5300: IFTRUE 5304
5302: GO 5322
5304: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5305: LD_ADDR_VAR 0 3
5309: PUSH
5310: LD_INT 13
5312: PUSH
5313: LD_INT 14
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: ST_TO_ADDR
5320: GO 5691
5322: LD_INT 31
5324: DOUBLE
5325: EQUAL
5326: IFTRUE 5330
5328: GO 5348
5330: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5331: LD_ADDR_VAR 0 3
5335: PUSH
5336: LD_INT 13
5338: PUSH
5339: LD_INT 14
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: ST_TO_ADDR
5346: GO 5691
5348: LD_INT 26
5350: DOUBLE
5351: EQUAL
5352: IFTRUE 5356
5354: GO 5374
5356: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5357: LD_ADDR_VAR 0 3
5361: PUSH
5362: LD_INT 13
5364: PUSH
5365: LD_INT 14
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: ST_TO_ADDR
5372: GO 5691
5374: LD_INT 42
5376: DOUBLE
5377: EQUAL
5378: IFTRUE 5382
5380: GO 5408
5382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5383: LD_ADDR_VAR 0 3
5387: PUSH
5388: LD_INT 21
5390: PUSH
5391: LD_INT 22
5393: PUSH
5394: LD_INT 23
5396: PUSH
5397: LD_INT 24
5399: PUSH
5400: EMPTY
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: ST_TO_ADDR
5406: GO 5691
5408: LD_INT 43
5410: DOUBLE
5411: EQUAL
5412: IFTRUE 5416
5414: GO 5442
5416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5417: LD_ADDR_VAR 0 3
5421: PUSH
5422: LD_INT 21
5424: PUSH
5425: LD_INT 22
5427: PUSH
5428: LD_INT 23
5430: PUSH
5431: LD_INT 24
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: ST_TO_ADDR
5440: GO 5691
5442: LD_INT 44
5444: DOUBLE
5445: EQUAL
5446: IFTRUE 5450
5448: GO 5476
5450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5451: LD_ADDR_VAR 0 3
5455: PUSH
5456: LD_INT 21
5458: PUSH
5459: LD_INT 22
5461: PUSH
5462: LD_INT 23
5464: PUSH
5465: LD_INT 24
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: ST_TO_ADDR
5474: GO 5691
5476: LD_INT 45
5478: DOUBLE
5479: EQUAL
5480: IFTRUE 5484
5482: GO 5510
5484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5485: LD_ADDR_VAR 0 3
5489: PUSH
5490: LD_INT 21
5492: PUSH
5493: LD_INT 22
5495: PUSH
5496: LD_INT 23
5498: PUSH
5499: LD_INT 24
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: ST_TO_ADDR
5508: GO 5691
5510: LD_INT 49
5512: DOUBLE
5513: EQUAL
5514: IFTRUE 5518
5516: GO 5544
5518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5519: LD_ADDR_VAR 0 3
5523: PUSH
5524: LD_INT 21
5526: PUSH
5527: LD_INT 22
5529: PUSH
5530: LD_INT 23
5532: PUSH
5533: LD_INT 24
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: ST_TO_ADDR
5542: GO 5691
5544: LD_INT 51
5546: DOUBLE
5547: EQUAL
5548: IFTRUE 5552
5550: GO 5578
5552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5553: LD_ADDR_VAR 0 3
5557: PUSH
5558: LD_INT 21
5560: PUSH
5561: LD_INT 22
5563: PUSH
5564: LD_INT 23
5566: PUSH
5567: LD_INT 24
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: ST_TO_ADDR
5576: GO 5691
5578: LD_INT 52
5580: DOUBLE
5581: EQUAL
5582: IFTRUE 5586
5584: GO 5612
5586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5587: LD_ADDR_VAR 0 3
5591: PUSH
5592: LD_INT 21
5594: PUSH
5595: LD_INT 22
5597: PUSH
5598: LD_INT 23
5600: PUSH
5601: LD_INT 24
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: ST_TO_ADDR
5610: GO 5691
5612: LD_INT 53
5614: DOUBLE
5615: EQUAL
5616: IFTRUE 5620
5618: GO 5638
5620: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5621: LD_ADDR_VAR 0 3
5625: PUSH
5626: LD_INT 23
5628: PUSH
5629: LD_INT 24
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: ST_TO_ADDR
5636: GO 5691
5638: LD_INT 46
5640: DOUBLE
5641: EQUAL
5642: IFTRUE 5646
5644: GO 5664
5646: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5647: LD_ADDR_VAR 0 3
5651: PUSH
5652: LD_INT 23
5654: PUSH
5655: LD_INT 24
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: ST_TO_ADDR
5662: GO 5691
5664: LD_INT 47
5666: DOUBLE
5667: EQUAL
5668: IFTRUE 5672
5670: GO 5690
5672: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5673: LD_ADDR_VAR 0 3
5677: PUSH
5678: LD_INT 23
5680: PUSH
5681: LD_INT 24
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: ST_TO_ADDR
5688: GO 5691
5690: POP
// result := ( chassis in result ) ;
5691: LD_ADDR_VAR 0 3
5695: PUSH
5696: LD_VAR 0 1
5700: PUSH
5701: LD_VAR 0 3
5705: IN
5706: ST_TO_ADDR
// end ;
5707: LD_VAR 0 3
5711: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5712: LD_INT 0
5714: PPUSH
5715: PPUSH
5716: PPUSH
5717: PPUSH
5718: PPUSH
5719: PPUSH
5720: PPUSH
// result := array ;
5721: LD_ADDR_VAR 0 5
5725: PUSH
5726: LD_VAR 0 1
5730: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5731: LD_VAR 0 1
5735: NOT
5736: PUSH
5737: LD_VAR 0 2
5741: NOT
5742: OR
5743: PUSH
5744: LD_VAR 0 3
5748: NOT
5749: OR
5750: PUSH
5751: LD_VAR 0 2
5755: PUSH
5756: LD_VAR 0 1
5760: GREATER
5761: OR
5762: PUSH
5763: LD_VAR 0 3
5767: PUSH
5768: LD_VAR 0 1
5772: GREATER
5773: OR
5774: IFFALSE 5778
// exit ;
5776: GO 6074
// if direction then
5778: LD_VAR 0 4
5782: IFFALSE 5846
// begin d := 1 ;
5784: LD_ADDR_VAR 0 9
5788: PUSH
5789: LD_INT 1
5791: ST_TO_ADDR
// if i_from > i_to then
5792: LD_VAR 0 2
5796: PUSH
5797: LD_VAR 0 3
5801: GREATER
5802: IFFALSE 5828
// length := ( array - i_from ) + i_to else
5804: LD_ADDR_VAR 0 11
5808: PUSH
5809: LD_VAR 0 1
5813: PUSH
5814: LD_VAR 0 2
5818: MINUS
5819: PUSH
5820: LD_VAR 0 3
5824: PLUS
5825: ST_TO_ADDR
5826: GO 5844
// length := i_to - i_from ;
5828: LD_ADDR_VAR 0 11
5832: PUSH
5833: LD_VAR 0 3
5837: PUSH
5838: LD_VAR 0 2
5842: MINUS
5843: ST_TO_ADDR
// end else
5844: GO 5907
// begin d := - 1 ;
5846: LD_ADDR_VAR 0 9
5850: PUSH
5851: LD_INT 1
5853: NEG
5854: ST_TO_ADDR
// if i_from > i_to then
5855: LD_VAR 0 2
5859: PUSH
5860: LD_VAR 0 3
5864: GREATER
5865: IFFALSE 5885
// length := i_from - i_to else
5867: LD_ADDR_VAR 0 11
5871: PUSH
5872: LD_VAR 0 2
5876: PUSH
5877: LD_VAR 0 3
5881: MINUS
5882: ST_TO_ADDR
5883: GO 5907
// length := ( array - i_to ) + i_from ;
5885: LD_ADDR_VAR 0 11
5889: PUSH
5890: LD_VAR 0 1
5894: PUSH
5895: LD_VAR 0 3
5899: MINUS
5900: PUSH
5901: LD_VAR 0 2
5905: PLUS
5906: ST_TO_ADDR
// end ; if not length then
5907: LD_VAR 0 11
5911: NOT
5912: IFFALSE 5916
// exit ;
5914: GO 6074
// tmp := array ;
5916: LD_ADDR_VAR 0 10
5920: PUSH
5921: LD_VAR 0 1
5925: ST_TO_ADDR
// for i = 1 to length do
5926: LD_ADDR_VAR 0 6
5930: PUSH
5931: DOUBLE
5932: LD_INT 1
5934: DEC
5935: ST_TO_ADDR
5936: LD_VAR 0 11
5940: PUSH
5941: FOR_TO
5942: IFFALSE 6062
// begin for j = 1 to array do
5944: LD_ADDR_VAR 0 7
5948: PUSH
5949: DOUBLE
5950: LD_INT 1
5952: DEC
5953: ST_TO_ADDR
5954: LD_VAR 0 1
5958: PUSH
5959: FOR_TO
5960: IFFALSE 6048
// begin k := j + d ;
5962: LD_ADDR_VAR 0 8
5966: PUSH
5967: LD_VAR 0 7
5971: PUSH
5972: LD_VAR 0 9
5976: PLUS
5977: ST_TO_ADDR
// if k > array then
5978: LD_VAR 0 8
5982: PUSH
5983: LD_VAR 0 1
5987: GREATER
5988: IFFALSE 5998
// k := 1 ;
5990: LD_ADDR_VAR 0 8
5994: PUSH
5995: LD_INT 1
5997: ST_TO_ADDR
// if not k then
5998: LD_VAR 0 8
6002: NOT
6003: IFFALSE 6015
// k := array ;
6005: LD_ADDR_VAR 0 8
6009: PUSH
6010: LD_VAR 0 1
6014: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6015: LD_ADDR_VAR 0 10
6019: PUSH
6020: LD_VAR 0 10
6024: PPUSH
6025: LD_VAR 0 8
6029: PPUSH
6030: LD_VAR 0 1
6034: PUSH
6035: LD_VAR 0 7
6039: ARRAY
6040: PPUSH
6041: CALL_OW 1
6045: ST_TO_ADDR
// end ;
6046: GO 5959
6048: POP
6049: POP
// array := tmp ;
6050: LD_ADDR_VAR 0 1
6054: PUSH
6055: LD_VAR 0 10
6059: ST_TO_ADDR
// end ;
6060: GO 5941
6062: POP
6063: POP
// result := array ;
6064: LD_ADDR_VAR 0 5
6068: PUSH
6069: LD_VAR 0 1
6073: ST_TO_ADDR
// end ;
6074: LD_VAR 0 5
6078: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6079: LD_INT 0
6081: PPUSH
6082: PPUSH
// result := 0 ;
6083: LD_ADDR_VAR 0 3
6087: PUSH
6088: LD_INT 0
6090: ST_TO_ADDR
// if not array or not value in array then
6091: LD_VAR 0 1
6095: NOT
6096: PUSH
6097: LD_VAR 0 2
6101: PUSH
6102: LD_VAR 0 1
6106: IN
6107: NOT
6108: OR
6109: IFFALSE 6113
// exit ;
6111: GO 6167
// for i = 1 to array do
6113: LD_ADDR_VAR 0 4
6117: PUSH
6118: DOUBLE
6119: LD_INT 1
6121: DEC
6122: ST_TO_ADDR
6123: LD_VAR 0 1
6127: PUSH
6128: FOR_TO
6129: IFFALSE 6165
// if value = array [ i ] then
6131: LD_VAR 0 2
6135: PUSH
6136: LD_VAR 0 1
6140: PUSH
6141: LD_VAR 0 4
6145: ARRAY
6146: EQUAL
6147: IFFALSE 6163
// begin result := i ;
6149: LD_ADDR_VAR 0 3
6153: PUSH
6154: LD_VAR 0 4
6158: ST_TO_ADDR
// exit ;
6159: POP
6160: POP
6161: GO 6167
// end ;
6163: GO 6128
6165: POP
6166: POP
// end ;
6167: LD_VAR 0 3
6171: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6172: LD_INT 0
6174: PPUSH
// vc_chassis := chassis ;
6175: LD_ADDR_OWVAR 37
6179: PUSH
6180: LD_VAR 0 1
6184: ST_TO_ADDR
// vc_engine := engine ;
6185: LD_ADDR_OWVAR 39
6189: PUSH
6190: LD_VAR 0 2
6194: ST_TO_ADDR
// vc_control := control ;
6195: LD_ADDR_OWVAR 38
6199: PUSH
6200: LD_VAR 0 3
6204: ST_TO_ADDR
// vc_weapon := weapon ;
6205: LD_ADDR_OWVAR 40
6209: PUSH
6210: LD_VAR 0 4
6214: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6215: LD_ADDR_OWVAR 41
6219: PUSH
6220: LD_VAR 0 5
6224: ST_TO_ADDR
// end ;
6225: LD_VAR 0 6
6229: RET
// export function WantPlant ( unit ) ; var task ; begin
6230: LD_INT 0
6232: PPUSH
6233: PPUSH
// result := false ;
6234: LD_ADDR_VAR 0 2
6238: PUSH
6239: LD_INT 0
6241: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6242: LD_ADDR_VAR 0 3
6246: PUSH
6247: LD_VAR 0 1
6251: PPUSH
6252: CALL_OW 437
6256: ST_TO_ADDR
// if task then
6257: LD_VAR 0 3
6261: IFFALSE 6289
// if task [ 1 ] [ 1 ] = p then
6263: LD_VAR 0 3
6267: PUSH
6268: LD_INT 1
6270: ARRAY
6271: PUSH
6272: LD_INT 1
6274: ARRAY
6275: PUSH
6276: LD_STRING p
6278: EQUAL
6279: IFFALSE 6289
// result := true ;
6281: LD_ADDR_VAR 0 2
6285: PUSH
6286: LD_INT 1
6288: ST_TO_ADDR
// end ;
6289: LD_VAR 0 2
6293: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6294: LD_INT 0
6296: PPUSH
6297: PPUSH
6298: PPUSH
6299: PPUSH
// if pos < 1 then
6300: LD_VAR 0 2
6304: PUSH
6305: LD_INT 1
6307: LESS
6308: IFFALSE 6312
// exit ;
6310: GO 6615
// if pos = 1 then
6312: LD_VAR 0 2
6316: PUSH
6317: LD_INT 1
6319: EQUAL
6320: IFFALSE 6353
// result := Replace ( arr , pos [ 1 ] , value ) else
6322: LD_ADDR_VAR 0 4
6326: PUSH
6327: LD_VAR 0 1
6331: PPUSH
6332: LD_VAR 0 2
6336: PUSH
6337: LD_INT 1
6339: ARRAY
6340: PPUSH
6341: LD_VAR 0 3
6345: PPUSH
6346: CALL_OW 1
6350: ST_TO_ADDR
6351: GO 6615
// begin tmp := arr ;
6353: LD_ADDR_VAR 0 6
6357: PUSH
6358: LD_VAR 0 1
6362: ST_TO_ADDR
// s_arr := [ tmp ] ;
6363: LD_ADDR_VAR 0 7
6367: PUSH
6368: LD_VAR 0 6
6372: PUSH
6373: EMPTY
6374: LIST
6375: ST_TO_ADDR
// for i = 1 to pos - 1 do
6376: LD_ADDR_VAR 0 5
6380: PUSH
6381: DOUBLE
6382: LD_INT 1
6384: DEC
6385: ST_TO_ADDR
6386: LD_VAR 0 2
6390: PUSH
6391: LD_INT 1
6393: MINUS
6394: PUSH
6395: FOR_TO
6396: IFFALSE 6441
// begin tmp := tmp [ pos [ i ] ] ;
6398: LD_ADDR_VAR 0 6
6402: PUSH
6403: LD_VAR 0 6
6407: PUSH
6408: LD_VAR 0 2
6412: PUSH
6413: LD_VAR 0 5
6417: ARRAY
6418: ARRAY
6419: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6420: LD_ADDR_VAR 0 7
6424: PUSH
6425: LD_VAR 0 7
6429: PUSH
6430: LD_VAR 0 6
6434: PUSH
6435: EMPTY
6436: LIST
6437: ADD
6438: ST_TO_ADDR
// end ;
6439: GO 6395
6441: POP
6442: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6443: LD_ADDR_VAR 0 6
6447: PUSH
6448: LD_VAR 0 6
6452: PPUSH
6453: LD_VAR 0 2
6457: PUSH
6458: LD_VAR 0 2
6462: ARRAY
6463: PPUSH
6464: LD_VAR 0 3
6468: PPUSH
6469: CALL_OW 1
6473: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6474: LD_ADDR_VAR 0 7
6478: PUSH
6479: LD_VAR 0 7
6483: PPUSH
6484: LD_VAR 0 7
6488: PPUSH
6489: LD_VAR 0 6
6493: PPUSH
6494: CALL_OW 1
6498: ST_TO_ADDR
// for i = s_arr downto 2 do
6499: LD_ADDR_VAR 0 5
6503: PUSH
6504: DOUBLE
6505: LD_VAR 0 7
6509: INC
6510: ST_TO_ADDR
6511: LD_INT 2
6513: PUSH
6514: FOR_DOWNTO
6515: IFFALSE 6599
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6517: LD_ADDR_VAR 0 6
6521: PUSH
6522: LD_VAR 0 7
6526: PUSH
6527: LD_VAR 0 5
6531: PUSH
6532: LD_INT 1
6534: MINUS
6535: ARRAY
6536: PPUSH
6537: LD_VAR 0 2
6541: PUSH
6542: LD_VAR 0 5
6546: PUSH
6547: LD_INT 1
6549: MINUS
6550: ARRAY
6551: PPUSH
6552: LD_VAR 0 7
6556: PUSH
6557: LD_VAR 0 5
6561: ARRAY
6562: PPUSH
6563: CALL_OW 1
6567: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6568: LD_ADDR_VAR 0 7
6572: PUSH
6573: LD_VAR 0 7
6577: PPUSH
6578: LD_VAR 0 5
6582: PUSH
6583: LD_INT 1
6585: MINUS
6586: PPUSH
6587: LD_VAR 0 6
6591: PPUSH
6592: CALL_OW 1
6596: ST_TO_ADDR
// end ;
6597: GO 6514
6599: POP
6600: POP
// result := s_arr [ 1 ] ;
6601: LD_ADDR_VAR 0 4
6605: PUSH
6606: LD_VAR 0 7
6610: PUSH
6611: LD_INT 1
6613: ARRAY
6614: ST_TO_ADDR
// end ; end ;
6615: LD_VAR 0 4
6619: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6620: LD_INT 0
6622: PPUSH
6623: PPUSH
// if not list then
6624: LD_VAR 0 1
6628: NOT
6629: IFFALSE 6633
// exit ;
6631: GO 6724
// i := list [ pos1 ] ;
6633: LD_ADDR_VAR 0 5
6637: PUSH
6638: LD_VAR 0 1
6642: PUSH
6643: LD_VAR 0 2
6647: ARRAY
6648: ST_TO_ADDR
// if not i then
6649: LD_VAR 0 5
6653: NOT
6654: IFFALSE 6658
// exit ;
6656: GO 6724
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6658: LD_ADDR_VAR 0 1
6662: PUSH
6663: LD_VAR 0 1
6667: PPUSH
6668: LD_VAR 0 2
6672: PPUSH
6673: LD_VAR 0 1
6677: PUSH
6678: LD_VAR 0 3
6682: ARRAY
6683: PPUSH
6684: CALL_OW 1
6688: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6689: LD_ADDR_VAR 0 1
6693: PUSH
6694: LD_VAR 0 1
6698: PPUSH
6699: LD_VAR 0 3
6703: PPUSH
6704: LD_VAR 0 5
6708: PPUSH
6709: CALL_OW 1
6713: ST_TO_ADDR
// result := list ;
6714: LD_ADDR_VAR 0 4
6718: PUSH
6719: LD_VAR 0 1
6723: ST_TO_ADDR
// end ;
6724: LD_VAR 0 4
6728: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6729: LD_INT 0
6731: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6732: LD_ADDR_VAR 0 5
6736: PUSH
6737: LD_VAR 0 1
6741: PPUSH
6742: CALL_OW 250
6746: PPUSH
6747: LD_VAR 0 1
6751: PPUSH
6752: CALL_OW 251
6756: PPUSH
6757: LD_VAR 0 2
6761: PPUSH
6762: LD_VAR 0 3
6766: PPUSH
6767: LD_VAR 0 4
6771: PPUSH
6772: CALL 6782 0 5
6776: ST_TO_ADDR
// end ;
6777: LD_VAR 0 5
6781: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6782: LD_INT 0
6784: PPUSH
6785: PPUSH
6786: PPUSH
6787: PPUSH
// if not list then
6788: LD_VAR 0 3
6792: NOT
6793: IFFALSE 6797
// exit ;
6795: GO 7185
// result := [ ] ;
6797: LD_ADDR_VAR 0 6
6801: PUSH
6802: EMPTY
6803: ST_TO_ADDR
// for i in list do
6804: LD_ADDR_VAR 0 7
6808: PUSH
6809: LD_VAR 0 3
6813: PUSH
6814: FOR_IN
6815: IFFALSE 7017
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6817: LD_ADDR_VAR 0 9
6821: PUSH
6822: LD_VAR 0 7
6826: PPUSH
6827: LD_VAR 0 1
6831: PPUSH
6832: LD_VAR 0 2
6836: PPUSH
6837: CALL_OW 297
6841: ST_TO_ADDR
// if not result then
6842: LD_VAR 0 6
6846: NOT
6847: IFFALSE 6873
// result := [ [ i , tmp ] ] else
6849: LD_ADDR_VAR 0 6
6853: PUSH
6854: LD_VAR 0 7
6858: PUSH
6859: LD_VAR 0 9
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PUSH
6868: EMPTY
6869: LIST
6870: ST_TO_ADDR
6871: GO 7015
// begin if result [ result ] [ 2 ] < tmp then
6873: LD_VAR 0 6
6877: PUSH
6878: LD_VAR 0 6
6882: ARRAY
6883: PUSH
6884: LD_INT 2
6886: ARRAY
6887: PUSH
6888: LD_VAR 0 9
6892: LESS
6893: IFFALSE 6935
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6895: LD_ADDR_VAR 0 6
6899: PUSH
6900: LD_VAR 0 6
6904: PPUSH
6905: LD_VAR 0 6
6909: PUSH
6910: LD_INT 1
6912: PLUS
6913: PPUSH
6914: LD_VAR 0 7
6918: PUSH
6919: LD_VAR 0 9
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PPUSH
6928: CALL_OW 2
6932: ST_TO_ADDR
6933: GO 7015
// for j = 1 to result do
6935: LD_ADDR_VAR 0 8
6939: PUSH
6940: DOUBLE
6941: LD_INT 1
6943: DEC
6944: ST_TO_ADDR
6945: LD_VAR 0 6
6949: PUSH
6950: FOR_TO
6951: IFFALSE 7013
// begin if tmp < result [ j ] [ 2 ] then
6953: LD_VAR 0 9
6957: PUSH
6958: LD_VAR 0 6
6962: PUSH
6963: LD_VAR 0 8
6967: ARRAY
6968: PUSH
6969: LD_INT 2
6971: ARRAY
6972: LESS
6973: IFFALSE 7011
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6975: LD_ADDR_VAR 0 6
6979: PUSH
6980: LD_VAR 0 6
6984: PPUSH
6985: LD_VAR 0 8
6989: PPUSH
6990: LD_VAR 0 7
6994: PUSH
6995: LD_VAR 0 9
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PPUSH
7004: CALL_OW 2
7008: ST_TO_ADDR
// break ;
7009: GO 7013
// end ; end ;
7011: GO 6950
7013: POP
7014: POP
// end ; end ;
7015: GO 6814
7017: POP
7018: POP
// if result and not asc then
7019: LD_VAR 0 6
7023: PUSH
7024: LD_VAR 0 4
7028: NOT
7029: AND
7030: IFFALSE 7105
// begin tmp := result ;
7032: LD_ADDR_VAR 0 9
7036: PUSH
7037: LD_VAR 0 6
7041: ST_TO_ADDR
// for i = tmp downto 1 do
7042: LD_ADDR_VAR 0 7
7046: PUSH
7047: DOUBLE
7048: LD_VAR 0 9
7052: INC
7053: ST_TO_ADDR
7054: LD_INT 1
7056: PUSH
7057: FOR_DOWNTO
7058: IFFALSE 7103
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7060: LD_ADDR_VAR 0 6
7064: PUSH
7065: LD_VAR 0 6
7069: PPUSH
7070: LD_VAR 0 9
7074: PUSH
7075: LD_VAR 0 7
7079: MINUS
7080: PUSH
7081: LD_INT 1
7083: PLUS
7084: PPUSH
7085: LD_VAR 0 9
7089: PUSH
7090: LD_VAR 0 7
7094: ARRAY
7095: PPUSH
7096: CALL_OW 1
7100: ST_TO_ADDR
7101: GO 7057
7103: POP
7104: POP
// end ; tmp := [ ] ;
7105: LD_ADDR_VAR 0 9
7109: PUSH
7110: EMPTY
7111: ST_TO_ADDR
// if mode then
7112: LD_VAR 0 5
7116: IFFALSE 7185
// begin for i = 1 to result do
7118: LD_ADDR_VAR 0 7
7122: PUSH
7123: DOUBLE
7124: LD_INT 1
7126: DEC
7127: ST_TO_ADDR
7128: LD_VAR 0 6
7132: PUSH
7133: FOR_TO
7134: IFFALSE 7173
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7136: LD_ADDR_VAR 0 9
7140: PUSH
7141: LD_VAR 0 9
7145: PPUSH
7146: LD_VAR 0 7
7150: PPUSH
7151: LD_VAR 0 6
7155: PUSH
7156: LD_VAR 0 7
7160: ARRAY
7161: PUSH
7162: LD_INT 1
7164: ARRAY
7165: PPUSH
7166: CALL_OW 1
7170: ST_TO_ADDR
7171: GO 7133
7173: POP
7174: POP
// result := tmp ;
7175: LD_ADDR_VAR 0 6
7179: PUSH
7180: LD_VAR 0 9
7184: ST_TO_ADDR
// end ; end ;
7185: LD_VAR 0 6
7189: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
7195: PPUSH
7196: PPUSH
7197: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7198: LD_ADDR_VAR 0 5
7202: PUSH
7203: LD_INT 0
7205: PUSH
7206: LD_INT 0
7208: PUSH
7209: LD_INT 0
7211: PUSH
7212: EMPTY
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: ST_TO_ADDR
// if not x or not y then
7220: LD_VAR 0 2
7224: NOT
7225: PUSH
7226: LD_VAR 0 3
7230: NOT
7231: OR
7232: IFFALSE 7236
// exit ;
7234: GO 8888
// if not range then
7236: LD_VAR 0 4
7240: NOT
7241: IFFALSE 7251
// range := 10 ;
7243: LD_ADDR_VAR 0 4
7247: PUSH
7248: LD_INT 10
7250: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7251: LD_ADDR_VAR 0 8
7255: PUSH
7256: LD_INT 81
7258: PUSH
7259: LD_VAR 0 1
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 92
7270: PUSH
7271: LD_VAR 0 2
7275: PUSH
7276: LD_VAR 0 3
7280: PUSH
7281: LD_VAR 0 4
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: PUSH
7292: LD_INT 3
7294: PUSH
7295: LD_INT 21
7297: PUSH
7298: LD_INT 3
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: LIST
7313: PPUSH
7314: CALL_OW 69
7318: ST_TO_ADDR
// if not tmp then
7319: LD_VAR 0 8
7323: NOT
7324: IFFALSE 7328
// exit ;
7326: GO 8888
// for i in tmp do
7328: LD_ADDR_VAR 0 6
7332: PUSH
7333: LD_VAR 0 8
7337: PUSH
7338: FOR_IN
7339: IFFALSE 8863
// begin points := [ 0 , 0 , 0 ] ;
7341: LD_ADDR_VAR 0 9
7345: PUSH
7346: LD_INT 0
7348: PUSH
7349: LD_INT 0
7351: PUSH
7352: LD_INT 0
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: ST_TO_ADDR
// bpoints := 1 ;
7360: LD_ADDR_VAR 0 10
7364: PUSH
7365: LD_INT 1
7367: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7368: LD_VAR 0 6
7372: PPUSH
7373: CALL_OW 247
7377: PUSH
7378: LD_INT 1
7380: DOUBLE
7381: EQUAL
7382: IFTRUE 7386
7384: GO 7964
7386: POP
// begin if GetClass ( i ) = 1 then
7387: LD_VAR 0 6
7391: PPUSH
7392: CALL_OW 257
7396: PUSH
7397: LD_INT 1
7399: EQUAL
7400: IFFALSE 7421
// points := [ 10 , 5 , 3 ] ;
7402: LD_ADDR_VAR 0 9
7406: PUSH
7407: LD_INT 10
7409: PUSH
7410: LD_INT 5
7412: PUSH
7413: LD_INT 3
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: LIST
7420: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7421: LD_VAR 0 6
7425: PPUSH
7426: CALL_OW 257
7430: PUSH
7431: LD_INT 2
7433: PUSH
7434: LD_INT 3
7436: PUSH
7437: LD_INT 4
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: LIST
7444: IN
7445: IFFALSE 7466
// points := [ 3 , 2 , 1 ] ;
7447: LD_ADDR_VAR 0 9
7451: PUSH
7452: LD_INT 3
7454: PUSH
7455: LD_INT 2
7457: PUSH
7458: LD_INT 1
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: LIST
7465: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7466: LD_VAR 0 6
7470: PPUSH
7471: CALL_OW 257
7475: PUSH
7476: LD_INT 5
7478: EQUAL
7479: IFFALSE 7500
// points := [ 130 , 5 , 2 ] ;
7481: LD_ADDR_VAR 0 9
7485: PUSH
7486: LD_INT 130
7488: PUSH
7489: LD_INT 5
7491: PUSH
7492: LD_INT 2
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: LIST
7499: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7500: LD_VAR 0 6
7504: PPUSH
7505: CALL_OW 257
7509: PUSH
7510: LD_INT 8
7512: EQUAL
7513: IFFALSE 7534
// points := [ 35 , 35 , 30 ] ;
7515: LD_ADDR_VAR 0 9
7519: PUSH
7520: LD_INT 35
7522: PUSH
7523: LD_INT 35
7525: PUSH
7526: LD_INT 30
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7534: LD_VAR 0 6
7538: PPUSH
7539: CALL_OW 257
7543: PUSH
7544: LD_INT 9
7546: EQUAL
7547: IFFALSE 7568
// points := [ 20 , 55 , 40 ] ;
7549: LD_ADDR_VAR 0 9
7553: PUSH
7554: LD_INT 20
7556: PUSH
7557: LD_INT 55
7559: PUSH
7560: LD_INT 40
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: LIST
7567: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7568: LD_VAR 0 6
7572: PPUSH
7573: CALL_OW 257
7577: PUSH
7578: LD_INT 12
7580: PUSH
7581: LD_INT 16
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: IN
7588: IFFALSE 7609
// points := [ 5 , 3 , 2 ] ;
7590: LD_ADDR_VAR 0 9
7594: PUSH
7595: LD_INT 5
7597: PUSH
7598: LD_INT 3
7600: PUSH
7601: LD_INT 2
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: LIST
7608: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7609: LD_VAR 0 6
7613: PPUSH
7614: CALL_OW 257
7618: PUSH
7619: LD_INT 17
7621: EQUAL
7622: IFFALSE 7643
// points := [ 100 , 50 , 75 ] ;
7624: LD_ADDR_VAR 0 9
7628: PUSH
7629: LD_INT 100
7631: PUSH
7632: LD_INT 50
7634: PUSH
7635: LD_INT 75
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: LIST
7642: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7643: LD_VAR 0 6
7647: PPUSH
7648: CALL_OW 257
7652: PUSH
7653: LD_INT 15
7655: EQUAL
7656: IFFALSE 7677
// points := [ 10 , 5 , 3 ] ;
7658: LD_ADDR_VAR 0 9
7662: PUSH
7663: LD_INT 10
7665: PUSH
7666: LD_INT 5
7668: PUSH
7669: LD_INT 3
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: LIST
7676: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7677: LD_VAR 0 6
7681: PPUSH
7682: CALL_OW 257
7686: PUSH
7687: LD_INT 14
7689: EQUAL
7690: IFFALSE 7711
// points := [ 10 , 0 , 0 ] ;
7692: LD_ADDR_VAR 0 9
7696: PUSH
7697: LD_INT 10
7699: PUSH
7700: LD_INT 0
7702: PUSH
7703: LD_INT 0
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: LIST
7710: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7711: LD_VAR 0 6
7715: PPUSH
7716: CALL_OW 257
7720: PUSH
7721: LD_INT 11
7723: EQUAL
7724: IFFALSE 7745
// points := [ 30 , 10 , 5 ] ;
7726: LD_ADDR_VAR 0 9
7730: PUSH
7731: LD_INT 30
7733: PUSH
7734: LD_INT 10
7736: PUSH
7737: LD_INT 5
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: LIST
7744: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7745: LD_VAR 0 1
7749: PPUSH
7750: LD_INT 5
7752: PPUSH
7753: CALL_OW 321
7757: PUSH
7758: LD_INT 2
7760: EQUAL
7761: IFFALSE 7778
// bpoints := bpoints * 1.8 ;
7763: LD_ADDR_VAR 0 10
7767: PUSH
7768: LD_VAR 0 10
7772: PUSH
7773: LD_REAL  1.80000000000000E+0000
7776: MUL
7777: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7778: LD_VAR 0 6
7782: PPUSH
7783: CALL_OW 257
7787: PUSH
7788: LD_INT 1
7790: PUSH
7791: LD_INT 2
7793: PUSH
7794: LD_INT 3
7796: PUSH
7797: LD_INT 4
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: IN
7806: PUSH
7807: LD_VAR 0 1
7811: PPUSH
7812: LD_INT 51
7814: PPUSH
7815: CALL_OW 321
7819: PUSH
7820: LD_INT 2
7822: EQUAL
7823: AND
7824: IFFALSE 7841
// bpoints := bpoints * 1.2 ;
7826: LD_ADDR_VAR 0 10
7830: PUSH
7831: LD_VAR 0 10
7835: PUSH
7836: LD_REAL  1.20000000000000E+0000
7839: MUL
7840: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7841: LD_VAR 0 6
7845: PPUSH
7846: CALL_OW 257
7850: PUSH
7851: LD_INT 5
7853: PUSH
7854: LD_INT 7
7856: PUSH
7857: LD_INT 9
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: LIST
7864: IN
7865: PUSH
7866: LD_VAR 0 1
7870: PPUSH
7871: LD_INT 52
7873: PPUSH
7874: CALL_OW 321
7878: PUSH
7879: LD_INT 2
7881: EQUAL
7882: AND
7883: IFFALSE 7900
// bpoints := bpoints * 1.5 ;
7885: LD_ADDR_VAR 0 10
7889: PUSH
7890: LD_VAR 0 10
7894: PUSH
7895: LD_REAL  1.50000000000000E+0000
7898: MUL
7899: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7900: LD_VAR 0 1
7904: PPUSH
7905: LD_INT 66
7907: PPUSH
7908: CALL_OW 321
7912: PUSH
7913: LD_INT 2
7915: EQUAL
7916: IFFALSE 7933
// bpoints := bpoints * 1.1 ;
7918: LD_ADDR_VAR 0 10
7922: PUSH
7923: LD_VAR 0 10
7927: PUSH
7928: LD_REAL  1.10000000000000E+0000
7931: MUL
7932: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7933: LD_ADDR_VAR 0 10
7937: PUSH
7938: LD_VAR 0 10
7942: PUSH
7943: LD_VAR 0 6
7947: PPUSH
7948: LD_INT 1
7950: PPUSH
7951: CALL_OW 259
7955: PUSH
7956: LD_REAL  1.15000000000000E+0000
7959: MUL
7960: MUL
7961: ST_TO_ADDR
// end ; unit_vehicle :
7962: GO 8792
7964: LD_INT 2
7966: DOUBLE
7967: EQUAL
7968: IFTRUE 7972
7970: GO 8780
7972: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7973: LD_VAR 0 6
7977: PPUSH
7978: CALL_OW 264
7982: PUSH
7983: LD_INT 2
7985: PUSH
7986: LD_INT 42
7988: PUSH
7989: LD_INT 24
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: IN
7997: IFFALSE 8018
// points := [ 25 , 5 , 3 ] ;
7999: LD_ADDR_VAR 0 9
8003: PUSH
8004: LD_INT 25
8006: PUSH
8007: LD_INT 5
8009: PUSH
8010: LD_INT 3
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: LIST
8017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8018: LD_VAR 0 6
8022: PPUSH
8023: CALL_OW 264
8027: PUSH
8028: LD_INT 4
8030: PUSH
8031: LD_INT 43
8033: PUSH
8034: LD_INT 25
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: LIST
8041: IN
8042: IFFALSE 8063
// points := [ 40 , 15 , 5 ] ;
8044: LD_ADDR_VAR 0 9
8048: PUSH
8049: LD_INT 40
8051: PUSH
8052: LD_INT 15
8054: PUSH
8055: LD_INT 5
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: LIST
8062: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8063: LD_VAR 0 6
8067: PPUSH
8068: CALL_OW 264
8072: PUSH
8073: LD_INT 3
8075: PUSH
8076: LD_INT 23
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: IN
8083: IFFALSE 8104
// points := [ 7 , 25 , 8 ] ;
8085: LD_ADDR_VAR 0 9
8089: PUSH
8090: LD_INT 7
8092: PUSH
8093: LD_INT 25
8095: PUSH
8096: LD_INT 8
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: LIST
8103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8104: LD_VAR 0 6
8108: PPUSH
8109: CALL_OW 264
8113: PUSH
8114: LD_INT 5
8116: PUSH
8117: LD_INT 27
8119: PUSH
8120: LD_INT 44
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: LIST
8127: IN
8128: IFFALSE 8149
// points := [ 14 , 50 , 16 ] ;
8130: LD_ADDR_VAR 0 9
8134: PUSH
8135: LD_INT 14
8137: PUSH
8138: LD_INT 50
8140: PUSH
8141: LD_INT 16
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: LIST
8148: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8149: LD_VAR 0 6
8153: PPUSH
8154: CALL_OW 264
8158: PUSH
8159: LD_INT 6
8161: PUSH
8162: LD_INT 46
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: IN
8169: IFFALSE 8190
// points := [ 32 , 120 , 70 ] ;
8171: LD_ADDR_VAR 0 9
8175: PUSH
8176: LD_INT 32
8178: PUSH
8179: LD_INT 120
8181: PUSH
8182: LD_INT 70
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8190: LD_VAR 0 6
8194: PPUSH
8195: CALL_OW 264
8199: PUSH
8200: LD_INT 7
8202: PUSH
8203: LD_INT 28
8205: PUSH
8206: LD_INT 45
8208: PUSH
8209: LD_EXP 8
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: IN
8220: IFFALSE 8241
// points := [ 35 , 20 , 45 ] ;
8222: LD_ADDR_VAR 0 9
8226: PUSH
8227: LD_INT 35
8229: PUSH
8230: LD_INT 20
8232: PUSH
8233: LD_INT 45
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: LIST
8240: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8241: LD_VAR 0 6
8245: PPUSH
8246: CALL_OW 264
8250: PUSH
8251: LD_INT 47
8253: PUSH
8254: EMPTY
8255: LIST
8256: IN
8257: IFFALSE 8278
// points := [ 67 , 45 , 75 ] ;
8259: LD_ADDR_VAR 0 9
8263: PUSH
8264: LD_INT 67
8266: PUSH
8267: LD_INT 45
8269: PUSH
8270: LD_INT 75
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: LIST
8277: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8278: LD_VAR 0 6
8282: PPUSH
8283: CALL_OW 264
8287: PUSH
8288: LD_INT 26
8290: PUSH
8291: EMPTY
8292: LIST
8293: IN
8294: IFFALSE 8315
// points := [ 120 , 30 , 80 ] ;
8296: LD_ADDR_VAR 0 9
8300: PUSH
8301: LD_INT 120
8303: PUSH
8304: LD_INT 30
8306: PUSH
8307: LD_INT 80
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: LIST
8314: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8315: LD_VAR 0 6
8319: PPUSH
8320: CALL_OW 264
8324: PUSH
8325: LD_INT 22
8327: PUSH
8328: EMPTY
8329: LIST
8330: IN
8331: IFFALSE 8352
// points := [ 40 , 1 , 1 ] ;
8333: LD_ADDR_VAR 0 9
8337: PUSH
8338: LD_INT 40
8340: PUSH
8341: LD_INT 1
8343: PUSH
8344: LD_INT 1
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8352: LD_VAR 0 6
8356: PPUSH
8357: CALL_OW 264
8361: PUSH
8362: LD_INT 29
8364: PUSH
8365: EMPTY
8366: LIST
8367: IN
8368: IFFALSE 8389
// points := [ 70 , 200 , 400 ] ;
8370: LD_ADDR_VAR 0 9
8374: PUSH
8375: LD_INT 70
8377: PUSH
8378: LD_INT 200
8380: PUSH
8381: LD_INT 400
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: LIST
8388: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8389: LD_VAR 0 6
8393: PPUSH
8394: CALL_OW 264
8398: PUSH
8399: LD_INT 14
8401: PUSH
8402: LD_INT 53
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: IN
8409: IFFALSE 8430
// points := [ 40 , 10 , 20 ] ;
8411: LD_ADDR_VAR 0 9
8415: PUSH
8416: LD_INT 40
8418: PUSH
8419: LD_INT 10
8421: PUSH
8422: LD_INT 20
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: LIST
8429: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8430: LD_VAR 0 6
8434: PPUSH
8435: CALL_OW 264
8439: PUSH
8440: LD_INT 9
8442: PUSH
8443: EMPTY
8444: LIST
8445: IN
8446: IFFALSE 8467
// points := [ 5 , 70 , 20 ] ;
8448: LD_ADDR_VAR 0 9
8452: PUSH
8453: LD_INT 5
8455: PUSH
8456: LD_INT 70
8458: PUSH
8459: LD_INT 20
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: LIST
8466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8467: LD_VAR 0 6
8471: PPUSH
8472: CALL_OW 264
8476: PUSH
8477: LD_INT 10
8479: PUSH
8480: EMPTY
8481: LIST
8482: IN
8483: IFFALSE 8504
// points := [ 35 , 110 , 70 ] ;
8485: LD_ADDR_VAR 0 9
8489: PUSH
8490: LD_INT 35
8492: PUSH
8493: LD_INT 110
8495: PUSH
8496: LD_INT 70
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: LIST
8503: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8504: LD_VAR 0 6
8508: PPUSH
8509: CALL_OW 265
8513: PUSH
8514: LD_INT 25
8516: EQUAL
8517: IFFALSE 8538
// points := [ 80 , 65 , 100 ] ;
8519: LD_ADDR_VAR 0 9
8523: PUSH
8524: LD_INT 80
8526: PUSH
8527: LD_INT 65
8529: PUSH
8530: LD_INT 100
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: LIST
8537: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8538: LD_VAR 0 6
8542: PPUSH
8543: CALL_OW 263
8547: PUSH
8548: LD_INT 1
8550: EQUAL
8551: IFFALSE 8586
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8553: LD_ADDR_VAR 0 10
8557: PUSH
8558: LD_VAR 0 10
8562: PUSH
8563: LD_VAR 0 6
8567: PPUSH
8568: CALL_OW 311
8572: PPUSH
8573: LD_INT 3
8575: PPUSH
8576: CALL_OW 259
8580: PUSH
8581: LD_INT 4
8583: MUL
8584: MUL
8585: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8586: LD_VAR 0 6
8590: PPUSH
8591: CALL_OW 263
8595: PUSH
8596: LD_INT 2
8598: EQUAL
8599: IFFALSE 8650
// begin j := IsControledBy ( i ) ;
8601: LD_ADDR_VAR 0 7
8605: PUSH
8606: LD_VAR 0 6
8610: PPUSH
8611: CALL_OW 312
8615: ST_TO_ADDR
// if j then
8616: LD_VAR 0 7
8620: IFFALSE 8650
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8622: LD_ADDR_VAR 0 10
8626: PUSH
8627: LD_VAR 0 10
8631: PUSH
8632: LD_VAR 0 7
8636: PPUSH
8637: LD_INT 3
8639: PPUSH
8640: CALL_OW 259
8644: PUSH
8645: LD_INT 3
8647: MUL
8648: MUL
8649: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8650: LD_VAR 0 6
8654: PPUSH
8655: CALL_OW 264
8659: PUSH
8660: LD_INT 5
8662: PUSH
8663: LD_INT 6
8665: PUSH
8666: LD_INT 46
8668: PUSH
8669: LD_INT 44
8671: PUSH
8672: LD_INT 47
8674: PUSH
8675: LD_INT 45
8677: PUSH
8678: LD_INT 28
8680: PUSH
8681: LD_INT 7
8683: PUSH
8684: LD_INT 27
8686: PUSH
8687: LD_INT 29
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: IN
8702: PUSH
8703: LD_VAR 0 1
8707: PPUSH
8708: LD_INT 52
8710: PPUSH
8711: CALL_OW 321
8715: PUSH
8716: LD_INT 2
8718: EQUAL
8719: AND
8720: IFFALSE 8737
// bpoints := bpoints * 1.2 ;
8722: LD_ADDR_VAR 0 10
8726: PUSH
8727: LD_VAR 0 10
8731: PUSH
8732: LD_REAL  1.20000000000000E+0000
8735: MUL
8736: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8737: LD_VAR 0 6
8741: PPUSH
8742: CALL_OW 264
8746: PUSH
8747: LD_INT 6
8749: PUSH
8750: LD_INT 46
8752: PUSH
8753: LD_INT 47
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: LIST
8760: IN
8761: IFFALSE 8778
// bpoints := bpoints * 1.2 ;
8763: LD_ADDR_VAR 0 10
8767: PUSH
8768: LD_VAR 0 10
8772: PUSH
8773: LD_REAL  1.20000000000000E+0000
8776: MUL
8777: ST_TO_ADDR
// end ; unit_building :
8778: GO 8792
8780: LD_INT 3
8782: DOUBLE
8783: EQUAL
8784: IFTRUE 8788
8786: GO 8791
8788: POP
// ; end ;
8789: GO 8792
8791: POP
// for j = 1 to 3 do
8792: LD_ADDR_VAR 0 7
8796: PUSH
8797: DOUBLE
8798: LD_INT 1
8800: DEC
8801: ST_TO_ADDR
8802: LD_INT 3
8804: PUSH
8805: FOR_TO
8806: IFFALSE 8859
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8808: LD_ADDR_VAR 0 5
8812: PUSH
8813: LD_VAR 0 5
8817: PPUSH
8818: LD_VAR 0 7
8822: PPUSH
8823: LD_VAR 0 5
8827: PUSH
8828: LD_VAR 0 7
8832: ARRAY
8833: PUSH
8834: LD_VAR 0 9
8838: PUSH
8839: LD_VAR 0 7
8843: ARRAY
8844: PUSH
8845: LD_VAR 0 10
8849: MUL
8850: PLUS
8851: PPUSH
8852: CALL_OW 1
8856: ST_TO_ADDR
8857: GO 8805
8859: POP
8860: POP
// end ;
8861: GO 7338
8863: POP
8864: POP
// result := Replace ( result , 4 , tmp ) ;
8865: LD_ADDR_VAR 0 5
8869: PUSH
8870: LD_VAR 0 5
8874: PPUSH
8875: LD_INT 4
8877: PPUSH
8878: LD_VAR 0 8
8882: PPUSH
8883: CALL_OW 1
8887: ST_TO_ADDR
// end ;
8888: LD_VAR 0 5
8892: RET
// export function DangerAtRange ( unit , range ) ; begin
8893: LD_INT 0
8895: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8896: LD_ADDR_VAR 0 3
8900: PUSH
8901: LD_VAR 0 1
8905: PPUSH
8906: CALL_OW 255
8910: PPUSH
8911: LD_VAR 0 1
8915: PPUSH
8916: CALL_OW 250
8920: PPUSH
8921: LD_VAR 0 1
8925: PPUSH
8926: CALL_OW 251
8930: PPUSH
8931: LD_VAR 0 2
8935: PPUSH
8936: CALL 7190 0 4
8940: ST_TO_ADDR
// end ;
8941: LD_VAR 0 3
8945: RET
// export function DangerInArea ( side , area ) ; begin
8946: LD_INT 0
8948: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8949: LD_ADDR_VAR 0 3
8953: PUSH
8954: LD_VAR 0 2
8958: PPUSH
8959: LD_INT 81
8961: PUSH
8962: LD_VAR 0 1
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PPUSH
8971: CALL_OW 70
8975: ST_TO_ADDR
// end ;
8976: LD_VAR 0 3
8980: RET
// export function IsExtension ( b ) ; begin
8981: LD_INT 0
8983: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8984: LD_ADDR_VAR 0 2
8988: PUSH
8989: LD_VAR 0 1
8993: PUSH
8994: LD_INT 23
8996: PUSH
8997: LD_INT 20
8999: PUSH
9000: LD_INT 22
9002: PUSH
9003: LD_INT 17
9005: PUSH
9006: LD_INT 24
9008: PUSH
9009: LD_INT 21
9011: PUSH
9012: LD_INT 19
9014: PUSH
9015: LD_INT 16
9017: PUSH
9018: LD_INT 25
9020: PUSH
9021: LD_INT 18
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: IN
9036: ST_TO_ADDR
// end ;
9037: LD_VAR 0 2
9041: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9042: LD_INT 0
9044: PPUSH
9045: PPUSH
9046: PPUSH
// result := [ ] ;
9047: LD_ADDR_VAR 0 4
9051: PUSH
9052: EMPTY
9053: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9054: LD_ADDR_VAR 0 5
9058: PUSH
9059: LD_VAR 0 2
9063: PPUSH
9064: LD_INT 21
9066: PUSH
9067: LD_INT 3
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PPUSH
9074: CALL_OW 70
9078: ST_TO_ADDR
// if not tmp then
9079: LD_VAR 0 5
9083: NOT
9084: IFFALSE 9088
// exit ;
9086: GO 9152
// if checkLink then
9088: LD_VAR 0 3
9092: IFFALSE 9142
// begin for i in tmp do
9094: LD_ADDR_VAR 0 6
9098: PUSH
9099: LD_VAR 0 5
9103: PUSH
9104: FOR_IN
9105: IFFALSE 9140
// if GetBase ( i ) <> base then
9107: LD_VAR 0 6
9111: PPUSH
9112: CALL_OW 274
9116: PUSH
9117: LD_VAR 0 1
9121: NONEQUAL
9122: IFFALSE 9138
// ComLinkToBase ( base , i ) ;
9124: LD_VAR 0 1
9128: PPUSH
9129: LD_VAR 0 6
9133: PPUSH
9134: CALL_OW 169
9138: GO 9104
9140: POP
9141: POP
// end ; result := tmp ;
9142: LD_ADDR_VAR 0 4
9146: PUSH
9147: LD_VAR 0 5
9151: ST_TO_ADDR
// end ;
9152: LD_VAR 0 4
9156: RET
// export function ComComplete ( units , b ) ; var i ; begin
9157: LD_INT 0
9159: PPUSH
9160: PPUSH
// if not units then
9161: LD_VAR 0 1
9165: NOT
9166: IFFALSE 9170
// exit ;
9168: GO 9260
// for i in units do
9170: LD_ADDR_VAR 0 4
9174: PUSH
9175: LD_VAR 0 1
9179: PUSH
9180: FOR_IN
9181: IFFALSE 9258
// if BuildingStatus ( b ) = bs_build then
9183: LD_VAR 0 2
9187: PPUSH
9188: CALL_OW 461
9192: PUSH
9193: LD_INT 1
9195: EQUAL
9196: IFFALSE 9256
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9198: LD_VAR 0 4
9202: PPUSH
9203: LD_STRING h
9205: PUSH
9206: LD_VAR 0 2
9210: PPUSH
9211: CALL_OW 250
9215: PUSH
9216: LD_VAR 0 2
9220: PPUSH
9221: CALL_OW 251
9225: PUSH
9226: LD_VAR 0 2
9230: PUSH
9231: LD_INT 0
9233: PUSH
9234: LD_INT 0
9236: PUSH
9237: LD_INT 0
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: PUSH
9249: EMPTY
9250: LIST
9251: PPUSH
9252: CALL_OW 446
9256: GO 9180
9258: POP
9259: POP
// end ;
9260: LD_VAR 0 3
9264: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
9272: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9273: LD_VAR 0 1
9277: NOT
9278: PUSH
9279: LD_VAR 0 1
9283: PPUSH
9284: CALL_OW 263
9288: PUSH
9289: LD_INT 2
9291: NONEQUAL
9292: OR
9293: IFFALSE 9297
// exit ;
9295: GO 9613
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9297: LD_ADDR_VAR 0 6
9301: PUSH
9302: LD_INT 22
9304: PUSH
9305: LD_VAR 0 1
9309: PPUSH
9310: CALL_OW 255
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_INT 2
9321: PUSH
9322: LD_INT 30
9324: PUSH
9325: LD_INT 36
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PUSH
9332: LD_INT 34
9334: PUSH
9335: LD_INT 31
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: LIST
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: PPUSH
9351: CALL_OW 69
9355: ST_TO_ADDR
// if not tmp then
9356: LD_VAR 0 6
9360: NOT
9361: IFFALSE 9365
// exit ;
9363: GO 9613
// result := [ ] ;
9365: LD_ADDR_VAR 0 2
9369: PUSH
9370: EMPTY
9371: ST_TO_ADDR
// for i in tmp do
9372: LD_ADDR_VAR 0 3
9376: PUSH
9377: LD_VAR 0 6
9381: PUSH
9382: FOR_IN
9383: IFFALSE 9454
// begin t := UnitsInside ( i ) ;
9385: LD_ADDR_VAR 0 4
9389: PUSH
9390: LD_VAR 0 3
9394: PPUSH
9395: CALL_OW 313
9399: ST_TO_ADDR
// if t then
9400: LD_VAR 0 4
9404: IFFALSE 9452
// for j in t do
9406: LD_ADDR_VAR 0 7
9410: PUSH
9411: LD_VAR 0 4
9415: PUSH
9416: FOR_IN
9417: IFFALSE 9450
// result := Replace ( result , result + 1 , j ) ;
9419: LD_ADDR_VAR 0 2
9423: PUSH
9424: LD_VAR 0 2
9428: PPUSH
9429: LD_VAR 0 2
9433: PUSH
9434: LD_INT 1
9436: PLUS
9437: PPUSH
9438: LD_VAR 0 7
9442: PPUSH
9443: CALL_OW 1
9447: ST_TO_ADDR
9448: GO 9416
9450: POP
9451: POP
// end ;
9452: GO 9382
9454: POP
9455: POP
// if not result then
9456: LD_VAR 0 2
9460: NOT
9461: IFFALSE 9465
// exit ;
9463: GO 9613
// mech := result [ 1 ] ;
9465: LD_ADDR_VAR 0 5
9469: PUSH
9470: LD_VAR 0 2
9474: PUSH
9475: LD_INT 1
9477: ARRAY
9478: ST_TO_ADDR
// if result > 1 then
9479: LD_VAR 0 2
9483: PUSH
9484: LD_INT 1
9486: GREATER
9487: IFFALSE 9599
// begin for i = 2 to result do
9489: LD_ADDR_VAR 0 3
9493: PUSH
9494: DOUBLE
9495: LD_INT 2
9497: DEC
9498: ST_TO_ADDR
9499: LD_VAR 0 2
9503: PUSH
9504: FOR_TO
9505: IFFALSE 9597
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9507: LD_ADDR_VAR 0 4
9511: PUSH
9512: LD_VAR 0 2
9516: PUSH
9517: LD_VAR 0 3
9521: ARRAY
9522: PPUSH
9523: LD_INT 3
9525: PPUSH
9526: CALL_OW 259
9530: PUSH
9531: LD_VAR 0 2
9535: PUSH
9536: LD_VAR 0 3
9540: ARRAY
9541: PPUSH
9542: CALL_OW 432
9546: MINUS
9547: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9548: LD_VAR 0 4
9552: PUSH
9553: LD_VAR 0 5
9557: PPUSH
9558: LD_INT 3
9560: PPUSH
9561: CALL_OW 259
9565: PUSH
9566: LD_VAR 0 5
9570: PPUSH
9571: CALL_OW 432
9575: MINUS
9576: GREATEREQUAL
9577: IFFALSE 9595
// mech := result [ i ] ;
9579: LD_ADDR_VAR 0 5
9583: PUSH
9584: LD_VAR 0 2
9588: PUSH
9589: LD_VAR 0 3
9593: ARRAY
9594: ST_TO_ADDR
// end ;
9595: GO 9504
9597: POP
9598: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9599: LD_VAR 0 1
9603: PPUSH
9604: LD_VAR 0 5
9608: PPUSH
9609: CALL_OW 135
// end ;
9613: LD_VAR 0 2
9617: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9618: LD_INT 0
9620: PPUSH
9621: PPUSH
9622: PPUSH
9623: PPUSH
9624: PPUSH
9625: PPUSH
9626: PPUSH
9627: PPUSH
9628: PPUSH
9629: PPUSH
9630: PPUSH
9631: PPUSH
9632: PPUSH
// result := [ ] ;
9633: LD_ADDR_VAR 0 7
9637: PUSH
9638: EMPTY
9639: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9640: LD_VAR 0 1
9644: PPUSH
9645: CALL_OW 266
9649: PUSH
9650: LD_INT 0
9652: PUSH
9653: LD_INT 1
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: IN
9660: NOT
9661: IFFALSE 9665
// exit ;
9663: GO 11299
// if name then
9665: LD_VAR 0 3
9669: IFFALSE 9685
// SetBName ( base_dep , name ) ;
9671: LD_VAR 0 1
9675: PPUSH
9676: LD_VAR 0 3
9680: PPUSH
9681: CALL_OW 500
// base := GetBase ( base_dep ) ;
9685: LD_ADDR_VAR 0 15
9689: PUSH
9690: LD_VAR 0 1
9694: PPUSH
9695: CALL_OW 274
9699: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9700: LD_ADDR_VAR 0 16
9704: PUSH
9705: LD_VAR 0 1
9709: PPUSH
9710: CALL_OW 255
9714: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9715: LD_ADDR_VAR 0 17
9719: PUSH
9720: LD_VAR 0 1
9724: PPUSH
9725: CALL_OW 248
9729: ST_TO_ADDR
// if sources then
9730: LD_VAR 0 5
9734: IFFALSE 9781
// for i = 1 to 3 do
9736: LD_ADDR_VAR 0 8
9740: PUSH
9741: DOUBLE
9742: LD_INT 1
9744: DEC
9745: ST_TO_ADDR
9746: LD_INT 3
9748: PUSH
9749: FOR_TO
9750: IFFALSE 9779
// AddResourceType ( base , i , sources [ i ] ) ;
9752: LD_VAR 0 15
9756: PPUSH
9757: LD_VAR 0 8
9761: PPUSH
9762: LD_VAR 0 5
9766: PUSH
9767: LD_VAR 0 8
9771: ARRAY
9772: PPUSH
9773: CALL_OW 276
9777: GO 9749
9779: POP
9780: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9781: LD_ADDR_VAR 0 18
9785: PUSH
9786: LD_VAR 0 15
9790: PPUSH
9791: LD_VAR 0 2
9795: PPUSH
9796: LD_INT 1
9798: PPUSH
9799: CALL 9042 0 3
9803: ST_TO_ADDR
// InitHc ;
9804: CALL_OW 19
// InitUc ;
9808: CALL_OW 18
// uc_side := side ;
9812: LD_ADDR_OWVAR 20
9816: PUSH
9817: LD_VAR 0 16
9821: ST_TO_ADDR
// uc_nation := nation ;
9822: LD_ADDR_OWVAR 21
9826: PUSH
9827: LD_VAR 0 17
9831: ST_TO_ADDR
// if buildings then
9832: LD_VAR 0 18
9836: IFFALSE 11158
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9838: LD_ADDR_VAR 0 19
9842: PUSH
9843: LD_VAR 0 18
9847: PPUSH
9848: LD_INT 2
9850: PUSH
9851: LD_INT 30
9853: PUSH
9854: LD_INT 29
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 30
9863: PUSH
9864: LD_INT 30
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: LIST
9875: PPUSH
9876: CALL_OW 72
9880: ST_TO_ADDR
// if tmp then
9881: LD_VAR 0 19
9885: IFFALSE 9933
// for i in tmp do
9887: LD_ADDR_VAR 0 8
9891: PUSH
9892: LD_VAR 0 19
9896: PUSH
9897: FOR_IN
9898: IFFALSE 9931
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9900: LD_VAR 0 8
9904: PPUSH
9905: CALL_OW 250
9909: PPUSH
9910: LD_VAR 0 8
9914: PPUSH
9915: CALL_OW 251
9919: PPUSH
9920: LD_VAR 0 16
9924: PPUSH
9925: CALL_OW 441
9929: GO 9897
9931: POP
9932: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9933: LD_VAR 0 18
9937: PPUSH
9938: LD_INT 2
9940: PUSH
9941: LD_INT 30
9943: PUSH
9944: LD_INT 32
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: LD_INT 30
9953: PUSH
9954: LD_INT 33
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: PPUSH
9966: CALL_OW 72
9970: IFFALSE 10058
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9972: LD_ADDR_VAR 0 8
9976: PUSH
9977: LD_VAR 0 18
9981: PPUSH
9982: LD_INT 2
9984: PUSH
9985: LD_INT 30
9987: PUSH
9988: LD_INT 32
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: LD_INT 30
9997: PUSH
9998: LD_INT 33
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: LIST
10009: PPUSH
10010: CALL_OW 72
10014: PUSH
10015: FOR_IN
10016: IFFALSE 10056
// begin if not GetBWeapon ( i ) then
10018: LD_VAR 0 8
10022: PPUSH
10023: CALL_OW 269
10027: NOT
10028: IFFALSE 10054
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10030: LD_VAR 0 8
10034: PPUSH
10035: LD_VAR 0 8
10039: PPUSH
10040: LD_VAR 0 2
10044: PPUSH
10045: CALL 11304 0 2
10049: PPUSH
10050: CALL_OW 431
// end ;
10054: GO 10015
10056: POP
10057: POP
// end ; for i = 1 to personel do
10058: LD_ADDR_VAR 0 8
10062: PUSH
10063: DOUBLE
10064: LD_INT 1
10066: DEC
10067: ST_TO_ADDR
10068: LD_VAR 0 6
10072: PUSH
10073: FOR_TO
10074: IFFALSE 11138
// begin if i > 4 then
10076: LD_VAR 0 8
10080: PUSH
10081: LD_INT 4
10083: GREATER
10084: IFFALSE 10088
// break ;
10086: GO 11138
// case i of 1 :
10088: LD_VAR 0 8
10092: PUSH
10093: LD_INT 1
10095: DOUBLE
10096: EQUAL
10097: IFTRUE 10101
10099: GO 10181
10101: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10102: LD_ADDR_VAR 0 12
10106: PUSH
10107: LD_VAR 0 18
10111: PPUSH
10112: LD_INT 22
10114: PUSH
10115: LD_VAR 0 16
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 58
10126: PUSH
10127: EMPTY
10128: LIST
10129: PUSH
10130: LD_INT 2
10132: PUSH
10133: LD_INT 30
10135: PUSH
10136: LD_INT 32
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: LD_INT 30
10145: PUSH
10146: LD_INT 4
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: LD_INT 30
10155: PUSH
10156: LD_INT 5
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: LIST
10173: PPUSH
10174: CALL_OW 72
10178: ST_TO_ADDR
10179: GO 10403
10181: LD_INT 2
10183: DOUBLE
10184: EQUAL
10185: IFTRUE 10189
10187: GO 10251
10189: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10190: LD_ADDR_VAR 0 12
10194: PUSH
10195: LD_VAR 0 18
10199: PPUSH
10200: LD_INT 22
10202: PUSH
10203: LD_VAR 0 16
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: LD_INT 2
10214: PUSH
10215: LD_INT 30
10217: PUSH
10218: LD_INT 0
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PUSH
10225: LD_INT 30
10227: PUSH
10228: LD_INT 1
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: LIST
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PPUSH
10244: CALL_OW 72
10248: ST_TO_ADDR
10249: GO 10403
10251: LD_INT 3
10253: DOUBLE
10254: EQUAL
10255: IFTRUE 10259
10257: GO 10321
10259: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10260: LD_ADDR_VAR 0 12
10264: PUSH
10265: LD_VAR 0 18
10269: PPUSH
10270: LD_INT 22
10272: PUSH
10273: LD_VAR 0 16
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PUSH
10282: LD_INT 2
10284: PUSH
10285: LD_INT 30
10287: PUSH
10288: LD_INT 2
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: LD_INT 30
10297: PUSH
10298: LD_INT 3
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PPUSH
10314: CALL_OW 72
10318: ST_TO_ADDR
10319: GO 10403
10321: LD_INT 4
10323: DOUBLE
10324: EQUAL
10325: IFTRUE 10329
10327: GO 10402
10329: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10330: LD_ADDR_VAR 0 12
10334: PUSH
10335: LD_VAR 0 18
10339: PPUSH
10340: LD_INT 22
10342: PUSH
10343: LD_VAR 0 16
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: LD_INT 2
10354: PUSH
10355: LD_INT 30
10357: PUSH
10358: LD_INT 6
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 30
10367: PUSH
10368: LD_INT 7
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 30
10377: PUSH
10378: LD_INT 8
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PPUSH
10395: CALL_OW 72
10399: ST_TO_ADDR
10400: GO 10403
10402: POP
// if i = 1 then
10403: LD_VAR 0 8
10407: PUSH
10408: LD_INT 1
10410: EQUAL
10411: IFFALSE 10522
// begin tmp := [ ] ;
10413: LD_ADDR_VAR 0 19
10417: PUSH
10418: EMPTY
10419: ST_TO_ADDR
// for j in f do
10420: LD_ADDR_VAR 0 9
10424: PUSH
10425: LD_VAR 0 12
10429: PUSH
10430: FOR_IN
10431: IFFALSE 10504
// if GetBType ( j ) = b_bunker then
10433: LD_VAR 0 9
10437: PPUSH
10438: CALL_OW 266
10442: PUSH
10443: LD_INT 32
10445: EQUAL
10446: IFFALSE 10473
// tmp := Insert ( tmp , 1 , j ) else
10448: LD_ADDR_VAR 0 19
10452: PUSH
10453: LD_VAR 0 19
10457: PPUSH
10458: LD_INT 1
10460: PPUSH
10461: LD_VAR 0 9
10465: PPUSH
10466: CALL_OW 2
10470: ST_TO_ADDR
10471: GO 10502
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10473: LD_ADDR_VAR 0 19
10477: PUSH
10478: LD_VAR 0 19
10482: PPUSH
10483: LD_VAR 0 19
10487: PUSH
10488: LD_INT 1
10490: PLUS
10491: PPUSH
10492: LD_VAR 0 9
10496: PPUSH
10497: CALL_OW 2
10501: ST_TO_ADDR
10502: GO 10430
10504: POP
10505: POP
// if tmp then
10506: LD_VAR 0 19
10510: IFFALSE 10522
// f := tmp ;
10512: LD_ADDR_VAR 0 12
10516: PUSH
10517: LD_VAR 0 19
10521: ST_TO_ADDR
// end ; x := personel [ i ] ;
10522: LD_ADDR_VAR 0 13
10526: PUSH
10527: LD_VAR 0 6
10531: PUSH
10532: LD_VAR 0 8
10536: ARRAY
10537: ST_TO_ADDR
// if x = - 1 then
10538: LD_VAR 0 13
10542: PUSH
10543: LD_INT 1
10545: NEG
10546: EQUAL
10547: IFFALSE 10756
// begin for j in f do
10549: LD_ADDR_VAR 0 9
10553: PUSH
10554: LD_VAR 0 12
10558: PUSH
10559: FOR_IN
10560: IFFALSE 10752
// repeat InitHc ;
10562: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10566: LD_VAR 0 9
10570: PPUSH
10571: CALL_OW 266
10575: PUSH
10576: LD_INT 5
10578: EQUAL
10579: IFFALSE 10649
// begin if UnitsInside ( j ) < 3 then
10581: LD_VAR 0 9
10585: PPUSH
10586: CALL_OW 313
10590: PUSH
10591: LD_INT 3
10593: LESS
10594: IFFALSE 10630
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10596: LD_INT 0
10598: PPUSH
10599: LD_INT 5
10601: PUSH
10602: LD_INT 8
10604: PUSH
10605: LD_INT 9
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: LIST
10612: PUSH
10613: LD_VAR 0 17
10617: ARRAY
10618: PPUSH
10619: LD_VAR 0 4
10623: PPUSH
10624: CALL_OW 380
10628: GO 10647
// PrepareHuman ( false , i , skill ) ;
10630: LD_INT 0
10632: PPUSH
10633: LD_VAR 0 8
10637: PPUSH
10638: LD_VAR 0 4
10642: PPUSH
10643: CALL_OW 380
// end else
10647: GO 10666
// PrepareHuman ( false , i , skill ) ;
10649: LD_INT 0
10651: PPUSH
10652: LD_VAR 0 8
10656: PPUSH
10657: LD_VAR 0 4
10661: PPUSH
10662: CALL_OW 380
// un := CreateHuman ;
10666: LD_ADDR_VAR 0 14
10670: PUSH
10671: CALL_OW 44
10675: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10676: LD_ADDR_VAR 0 7
10680: PUSH
10681: LD_VAR 0 7
10685: PPUSH
10686: LD_INT 1
10688: PPUSH
10689: LD_VAR 0 14
10693: PPUSH
10694: CALL_OW 2
10698: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10699: LD_VAR 0 14
10703: PPUSH
10704: LD_VAR 0 9
10708: PPUSH
10709: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10713: LD_VAR 0 9
10717: PPUSH
10718: CALL_OW 313
10722: PUSH
10723: LD_INT 6
10725: EQUAL
10726: PUSH
10727: LD_VAR 0 9
10731: PPUSH
10732: CALL_OW 266
10736: PUSH
10737: LD_INT 32
10739: PUSH
10740: LD_INT 31
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: IN
10747: OR
10748: IFFALSE 10562
10750: GO 10559
10752: POP
10753: POP
// end else
10754: GO 11136
// for j = 1 to x do
10756: LD_ADDR_VAR 0 9
10760: PUSH
10761: DOUBLE
10762: LD_INT 1
10764: DEC
10765: ST_TO_ADDR
10766: LD_VAR 0 13
10770: PUSH
10771: FOR_TO
10772: IFFALSE 11134
// begin InitHc ;
10774: CALL_OW 19
// if not f then
10778: LD_VAR 0 12
10782: NOT
10783: IFFALSE 10872
// begin PrepareHuman ( false , i , skill ) ;
10785: LD_INT 0
10787: PPUSH
10788: LD_VAR 0 8
10792: PPUSH
10793: LD_VAR 0 4
10797: PPUSH
10798: CALL_OW 380
// un := CreateHuman ;
10802: LD_ADDR_VAR 0 14
10806: PUSH
10807: CALL_OW 44
10811: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10812: LD_ADDR_VAR 0 7
10816: PUSH
10817: LD_VAR 0 7
10821: PPUSH
10822: LD_INT 1
10824: PPUSH
10825: LD_VAR 0 14
10829: PPUSH
10830: CALL_OW 2
10834: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10835: LD_VAR 0 14
10839: PPUSH
10840: LD_VAR 0 1
10844: PPUSH
10845: CALL_OW 250
10849: PPUSH
10850: LD_VAR 0 1
10854: PPUSH
10855: CALL_OW 251
10859: PPUSH
10860: LD_INT 10
10862: PPUSH
10863: LD_INT 0
10865: PPUSH
10866: CALL_OW 50
// continue ;
10870: GO 10771
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10872: LD_VAR 0 12
10876: PUSH
10877: LD_INT 1
10879: ARRAY
10880: PPUSH
10881: CALL_OW 313
10885: PUSH
10886: LD_VAR 0 12
10890: PUSH
10891: LD_INT 1
10893: ARRAY
10894: PPUSH
10895: CALL_OW 266
10899: PUSH
10900: LD_INT 32
10902: PUSH
10903: LD_INT 31
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: IN
10910: AND
10911: PUSH
10912: LD_VAR 0 12
10916: PUSH
10917: LD_INT 1
10919: ARRAY
10920: PPUSH
10921: CALL_OW 313
10925: PUSH
10926: LD_INT 6
10928: EQUAL
10929: OR
10930: IFFALSE 10950
// f := Delete ( f , 1 ) ;
10932: LD_ADDR_VAR 0 12
10936: PUSH
10937: LD_VAR 0 12
10941: PPUSH
10942: LD_INT 1
10944: PPUSH
10945: CALL_OW 3
10949: ST_TO_ADDR
// if not f then
10950: LD_VAR 0 12
10954: NOT
10955: IFFALSE 10973
// begin x := x + 2 ;
10957: LD_ADDR_VAR 0 13
10961: PUSH
10962: LD_VAR 0 13
10966: PUSH
10967: LD_INT 2
10969: PLUS
10970: ST_TO_ADDR
// continue ;
10971: GO 10771
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10973: LD_VAR 0 12
10977: PUSH
10978: LD_INT 1
10980: ARRAY
10981: PPUSH
10982: CALL_OW 266
10986: PUSH
10987: LD_INT 5
10989: EQUAL
10990: IFFALSE 11064
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10992: LD_VAR 0 12
10996: PUSH
10997: LD_INT 1
10999: ARRAY
11000: PPUSH
11001: CALL_OW 313
11005: PUSH
11006: LD_INT 3
11008: LESS
11009: IFFALSE 11045
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11011: LD_INT 0
11013: PPUSH
11014: LD_INT 5
11016: PUSH
11017: LD_INT 8
11019: PUSH
11020: LD_INT 9
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: LIST
11027: PUSH
11028: LD_VAR 0 17
11032: ARRAY
11033: PPUSH
11034: LD_VAR 0 4
11038: PPUSH
11039: CALL_OW 380
11043: GO 11062
// PrepareHuman ( false , i , skill ) ;
11045: LD_INT 0
11047: PPUSH
11048: LD_VAR 0 8
11052: PPUSH
11053: LD_VAR 0 4
11057: PPUSH
11058: CALL_OW 380
// end else
11062: GO 11081
// PrepareHuman ( false , i , skill ) ;
11064: LD_INT 0
11066: PPUSH
11067: LD_VAR 0 8
11071: PPUSH
11072: LD_VAR 0 4
11076: PPUSH
11077: CALL_OW 380
// un := CreateHuman ;
11081: LD_ADDR_VAR 0 14
11085: PUSH
11086: CALL_OW 44
11090: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11091: LD_ADDR_VAR 0 7
11095: PUSH
11096: LD_VAR 0 7
11100: PPUSH
11101: LD_INT 1
11103: PPUSH
11104: LD_VAR 0 14
11108: PPUSH
11109: CALL_OW 2
11113: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11114: LD_VAR 0 14
11118: PPUSH
11119: LD_VAR 0 12
11123: PUSH
11124: LD_INT 1
11126: ARRAY
11127: PPUSH
11128: CALL_OW 52
// end ;
11132: GO 10771
11134: POP
11135: POP
// end ;
11136: GO 10073
11138: POP
11139: POP
// result := result ^ buildings ;
11140: LD_ADDR_VAR 0 7
11144: PUSH
11145: LD_VAR 0 7
11149: PUSH
11150: LD_VAR 0 18
11154: ADD
11155: ST_TO_ADDR
// end else
11156: GO 11299
// begin for i = 1 to personel do
11158: LD_ADDR_VAR 0 8
11162: PUSH
11163: DOUBLE
11164: LD_INT 1
11166: DEC
11167: ST_TO_ADDR
11168: LD_VAR 0 6
11172: PUSH
11173: FOR_TO
11174: IFFALSE 11297
// begin if i > 4 then
11176: LD_VAR 0 8
11180: PUSH
11181: LD_INT 4
11183: GREATER
11184: IFFALSE 11188
// break ;
11186: GO 11297
// x := personel [ i ] ;
11188: LD_ADDR_VAR 0 13
11192: PUSH
11193: LD_VAR 0 6
11197: PUSH
11198: LD_VAR 0 8
11202: ARRAY
11203: ST_TO_ADDR
// if x = - 1 then
11204: LD_VAR 0 13
11208: PUSH
11209: LD_INT 1
11211: NEG
11212: EQUAL
11213: IFFALSE 11217
// continue ;
11215: GO 11173
// PrepareHuman ( false , i , skill ) ;
11217: LD_INT 0
11219: PPUSH
11220: LD_VAR 0 8
11224: PPUSH
11225: LD_VAR 0 4
11229: PPUSH
11230: CALL_OW 380
// un := CreateHuman ;
11234: LD_ADDR_VAR 0 14
11238: PUSH
11239: CALL_OW 44
11243: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11244: LD_VAR 0 14
11248: PPUSH
11249: LD_VAR 0 1
11253: PPUSH
11254: CALL_OW 250
11258: PPUSH
11259: LD_VAR 0 1
11263: PPUSH
11264: CALL_OW 251
11268: PPUSH
11269: LD_INT 10
11271: PPUSH
11272: LD_INT 0
11274: PPUSH
11275: CALL_OW 50
// result := result ^ un ;
11279: LD_ADDR_VAR 0 7
11283: PUSH
11284: LD_VAR 0 7
11288: PUSH
11289: LD_VAR 0 14
11293: ADD
11294: ST_TO_ADDR
// end ;
11295: GO 11173
11297: POP
11298: POP
// end ; end ;
11299: LD_VAR 0 7
11303: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11304: LD_INT 0
11306: PPUSH
11307: PPUSH
11308: PPUSH
11309: PPUSH
11310: PPUSH
11311: PPUSH
11312: PPUSH
11313: PPUSH
11314: PPUSH
11315: PPUSH
11316: PPUSH
11317: PPUSH
11318: PPUSH
11319: PPUSH
11320: PPUSH
11321: PPUSH
// result := false ;
11322: LD_ADDR_VAR 0 3
11326: PUSH
11327: LD_INT 0
11329: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11330: LD_VAR 0 1
11334: NOT
11335: PUSH
11336: LD_VAR 0 1
11340: PPUSH
11341: CALL_OW 266
11345: PUSH
11346: LD_INT 32
11348: PUSH
11349: LD_INT 33
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: IN
11356: NOT
11357: OR
11358: IFFALSE 11362
// exit ;
11360: GO 12471
// nat := GetNation ( tower ) ;
11362: LD_ADDR_VAR 0 12
11366: PUSH
11367: LD_VAR 0 1
11371: PPUSH
11372: CALL_OW 248
11376: ST_TO_ADDR
// side := GetSide ( tower ) ;
11377: LD_ADDR_VAR 0 16
11381: PUSH
11382: LD_VAR 0 1
11386: PPUSH
11387: CALL_OW 255
11391: ST_TO_ADDR
// x := GetX ( tower ) ;
11392: LD_ADDR_VAR 0 10
11396: PUSH
11397: LD_VAR 0 1
11401: PPUSH
11402: CALL_OW 250
11406: ST_TO_ADDR
// y := GetY ( tower ) ;
11407: LD_ADDR_VAR 0 11
11411: PUSH
11412: LD_VAR 0 1
11416: PPUSH
11417: CALL_OW 251
11421: ST_TO_ADDR
// if not x or not y then
11422: LD_VAR 0 10
11426: NOT
11427: PUSH
11428: LD_VAR 0 11
11432: NOT
11433: OR
11434: IFFALSE 11438
// exit ;
11436: GO 12471
// weapon := 0 ;
11438: LD_ADDR_VAR 0 18
11442: PUSH
11443: LD_INT 0
11445: ST_TO_ADDR
// fac_list := [ ] ;
11446: LD_ADDR_VAR 0 17
11450: PUSH
11451: EMPTY
11452: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11453: LD_ADDR_VAR 0 6
11457: PUSH
11458: LD_VAR 0 1
11462: PPUSH
11463: CALL_OW 274
11467: PPUSH
11468: LD_VAR 0 2
11472: PPUSH
11473: LD_INT 0
11475: PPUSH
11476: CALL 9042 0 3
11480: PPUSH
11481: LD_INT 30
11483: PUSH
11484: LD_INT 3
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PPUSH
11491: CALL_OW 72
11495: ST_TO_ADDR
// if not factories then
11496: LD_VAR 0 6
11500: NOT
11501: IFFALSE 11505
// exit ;
11503: GO 12471
// for i in factories do
11505: LD_ADDR_VAR 0 8
11509: PUSH
11510: LD_VAR 0 6
11514: PUSH
11515: FOR_IN
11516: IFFALSE 11541
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11518: LD_ADDR_VAR 0 17
11522: PUSH
11523: LD_VAR 0 17
11527: PUSH
11528: LD_VAR 0 8
11532: PPUSH
11533: CALL_OW 478
11537: UNION
11538: ST_TO_ADDR
11539: GO 11515
11541: POP
11542: POP
// if not fac_list then
11543: LD_VAR 0 17
11547: NOT
11548: IFFALSE 11552
// exit ;
11550: GO 12471
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11552: LD_ADDR_VAR 0 5
11556: PUSH
11557: LD_INT 4
11559: PUSH
11560: LD_INT 5
11562: PUSH
11563: LD_INT 9
11565: PUSH
11566: LD_INT 10
11568: PUSH
11569: LD_INT 6
11571: PUSH
11572: LD_INT 7
11574: PUSH
11575: LD_INT 11
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 27
11589: PUSH
11590: LD_INT 28
11592: PUSH
11593: LD_INT 26
11595: PUSH
11596: LD_INT 30
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: PUSH
11605: LD_INT 43
11607: PUSH
11608: LD_INT 44
11610: PUSH
11611: LD_INT 46
11613: PUSH
11614: LD_INT 45
11616: PUSH
11617: LD_INT 47
11619: PUSH
11620: LD_INT 49
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: LIST
11635: PUSH
11636: LD_VAR 0 12
11640: ARRAY
11641: ST_TO_ADDR
// list := list isect fac_list ;
11642: LD_ADDR_VAR 0 5
11646: PUSH
11647: LD_VAR 0 5
11651: PUSH
11652: LD_VAR 0 17
11656: ISECT
11657: ST_TO_ADDR
// if not list then
11658: LD_VAR 0 5
11662: NOT
11663: IFFALSE 11667
// exit ;
11665: GO 12471
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11667: LD_VAR 0 12
11671: PUSH
11672: LD_INT 3
11674: EQUAL
11675: PUSH
11676: LD_INT 49
11678: PUSH
11679: LD_VAR 0 5
11683: IN
11684: AND
11685: PUSH
11686: LD_INT 31
11688: PPUSH
11689: LD_VAR 0 16
11693: PPUSH
11694: CALL_OW 321
11698: PUSH
11699: LD_INT 2
11701: EQUAL
11702: AND
11703: IFFALSE 11763
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11705: LD_INT 22
11707: PUSH
11708: LD_VAR 0 16
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 35
11719: PUSH
11720: LD_INT 49
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 91
11729: PUSH
11730: LD_VAR 0 1
11734: PUSH
11735: LD_INT 10
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: LIST
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: LIST
11747: PPUSH
11748: CALL_OW 69
11752: NOT
11753: IFFALSE 11763
// weapon := ru_time_lapser ;
11755: LD_ADDR_VAR 0 18
11759: PUSH
11760: LD_INT 49
11762: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11763: LD_VAR 0 12
11767: PUSH
11768: LD_INT 1
11770: PUSH
11771: LD_INT 2
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: IN
11778: PUSH
11779: LD_INT 11
11781: PUSH
11782: LD_VAR 0 5
11786: IN
11787: PUSH
11788: LD_INT 30
11790: PUSH
11791: LD_VAR 0 5
11795: IN
11796: OR
11797: AND
11798: PUSH
11799: LD_INT 6
11801: PPUSH
11802: LD_VAR 0 16
11806: PPUSH
11807: CALL_OW 321
11811: PUSH
11812: LD_INT 2
11814: EQUAL
11815: AND
11816: IFFALSE 11981
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11818: LD_INT 22
11820: PUSH
11821: LD_VAR 0 16
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 2
11832: PUSH
11833: LD_INT 35
11835: PUSH
11836: LD_INT 11
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PUSH
11843: LD_INT 35
11845: PUSH
11846: LD_INT 30
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: LIST
11857: PUSH
11858: LD_INT 91
11860: PUSH
11861: LD_VAR 0 1
11865: PUSH
11866: LD_INT 18
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: LIST
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: LIST
11878: PPUSH
11879: CALL_OW 69
11883: NOT
11884: PUSH
11885: LD_INT 22
11887: PUSH
11888: LD_VAR 0 16
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PUSH
11897: LD_INT 2
11899: PUSH
11900: LD_INT 30
11902: PUSH
11903: LD_INT 32
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: LD_INT 30
11912: PUSH
11913: LD_INT 33
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 91
11927: PUSH
11928: LD_VAR 0 1
11932: PUSH
11933: LD_INT 12
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: LIST
11945: PUSH
11946: EMPTY
11947: LIST
11948: PPUSH
11949: CALL_OW 69
11953: PUSH
11954: LD_INT 2
11956: GREATER
11957: AND
11958: IFFALSE 11981
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11960: LD_ADDR_VAR 0 18
11964: PUSH
11965: LD_INT 11
11967: PUSH
11968: LD_INT 30
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_VAR 0 12
11979: ARRAY
11980: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11981: LD_VAR 0 18
11985: NOT
11986: PUSH
11987: LD_INT 40
11989: PPUSH
11990: LD_VAR 0 16
11994: PPUSH
11995: CALL_OW 321
11999: PUSH
12000: LD_INT 2
12002: EQUAL
12003: AND
12004: PUSH
12005: LD_INT 7
12007: PUSH
12008: LD_VAR 0 5
12012: IN
12013: PUSH
12014: LD_INT 28
12016: PUSH
12017: LD_VAR 0 5
12021: IN
12022: OR
12023: PUSH
12024: LD_INT 45
12026: PUSH
12027: LD_VAR 0 5
12031: IN
12032: OR
12033: AND
12034: IFFALSE 12288
// begin hex := GetHexInfo ( x , y ) ;
12036: LD_ADDR_VAR 0 4
12040: PUSH
12041: LD_VAR 0 10
12045: PPUSH
12046: LD_VAR 0 11
12050: PPUSH
12051: CALL_OW 546
12055: ST_TO_ADDR
// if hex [ 1 ] then
12056: LD_VAR 0 4
12060: PUSH
12061: LD_INT 1
12063: ARRAY
12064: IFFALSE 12068
// exit ;
12066: GO 12471
// height := hex [ 2 ] ;
12068: LD_ADDR_VAR 0 15
12072: PUSH
12073: LD_VAR 0 4
12077: PUSH
12078: LD_INT 2
12080: ARRAY
12081: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12082: LD_ADDR_VAR 0 14
12086: PUSH
12087: LD_INT 0
12089: PUSH
12090: LD_INT 2
12092: PUSH
12093: LD_INT 3
12095: PUSH
12096: LD_INT 5
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: ST_TO_ADDR
// for i in tmp do
12105: LD_ADDR_VAR 0 8
12109: PUSH
12110: LD_VAR 0 14
12114: PUSH
12115: FOR_IN
12116: IFFALSE 12286
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12118: LD_ADDR_VAR 0 9
12122: PUSH
12123: LD_VAR 0 10
12127: PPUSH
12128: LD_VAR 0 8
12132: PPUSH
12133: LD_INT 5
12135: PPUSH
12136: CALL_OW 272
12140: PUSH
12141: LD_VAR 0 11
12145: PPUSH
12146: LD_VAR 0 8
12150: PPUSH
12151: LD_INT 5
12153: PPUSH
12154: CALL_OW 273
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12163: LD_VAR 0 9
12167: PUSH
12168: LD_INT 1
12170: ARRAY
12171: PPUSH
12172: LD_VAR 0 9
12176: PUSH
12177: LD_INT 2
12179: ARRAY
12180: PPUSH
12181: CALL_OW 488
12185: IFFALSE 12284
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12187: LD_ADDR_VAR 0 4
12191: PUSH
12192: LD_VAR 0 9
12196: PUSH
12197: LD_INT 1
12199: ARRAY
12200: PPUSH
12201: LD_VAR 0 9
12205: PUSH
12206: LD_INT 2
12208: ARRAY
12209: PPUSH
12210: CALL_OW 546
12214: ST_TO_ADDR
// if hex [ 1 ] then
12215: LD_VAR 0 4
12219: PUSH
12220: LD_INT 1
12222: ARRAY
12223: IFFALSE 12227
// continue ;
12225: GO 12115
// h := hex [ 2 ] ;
12227: LD_ADDR_VAR 0 13
12231: PUSH
12232: LD_VAR 0 4
12236: PUSH
12237: LD_INT 2
12239: ARRAY
12240: ST_TO_ADDR
// if h + 7 < height then
12241: LD_VAR 0 13
12245: PUSH
12246: LD_INT 7
12248: PLUS
12249: PUSH
12250: LD_VAR 0 15
12254: LESS
12255: IFFALSE 12284
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12257: LD_ADDR_VAR 0 18
12261: PUSH
12262: LD_INT 7
12264: PUSH
12265: LD_INT 28
12267: PUSH
12268: LD_INT 45
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: LIST
12275: PUSH
12276: LD_VAR 0 12
12280: ARRAY
12281: ST_TO_ADDR
// break ;
12282: GO 12286
// end ; end ; end ;
12284: GO 12115
12286: POP
12287: POP
// end ; if not weapon then
12288: LD_VAR 0 18
12292: NOT
12293: IFFALSE 12353
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12295: LD_ADDR_VAR 0 5
12299: PUSH
12300: LD_VAR 0 5
12304: PUSH
12305: LD_INT 11
12307: PUSH
12308: LD_INT 30
12310: PUSH
12311: LD_INT 49
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: LIST
12318: DIFF
12319: ST_TO_ADDR
// if not list then
12320: LD_VAR 0 5
12324: NOT
12325: IFFALSE 12329
// exit ;
12327: GO 12471
// weapon := list [ rand ( 1 , list ) ] ;
12329: LD_ADDR_VAR 0 18
12333: PUSH
12334: LD_VAR 0 5
12338: PUSH
12339: LD_INT 1
12341: PPUSH
12342: LD_VAR 0 5
12346: PPUSH
12347: CALL_OW 12
12351: ARRAY
12352: ST_TO_ADDR
// end ; if weapon then
12353: LD_VAR 0 18
12357: IFFALSE 12471
// begin tmp := CostOfWeapon ( weapon ) ;
12359: LD_ADDR_VAR 0 14
12363: PUSH
12364: LD_VAR 0 18
12368: PPUSH
12369: CALL_OW 451
12373: ST_TO_ADDR
// j := GetBase ( tower ) ;
12374: LD_ADDR_VAR 0 9
12378: PUSH
12379: LD_VAR 0 1
12383: PPUSH
12384: CALL_OW 274
12388: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12389: LD_VAR 0 9
12393: PPUSH
12394: LD_INT 1
12396: PPUSH
12397: CALL_OW 275
12401: PUSH
12402: LD_VAR 0 14
12406: PUSH
12407: LD_INT 1
12409: ARRAY
12410: GREATEREQUAL
12411: PUSH
12412: LD_VAR 0 9
12416: PPUSH
12417: LD_INT 2
12419: PPUSH
12420: CALL_OW 275
12424: PUSH
12425: LD_VAR 0 14
12429: PUSH
12430: LD_INT 2
12432: ARRAY
12433: GREATEREQUAL
12434: AND
12435: PUSH
12436: LD_VAR 0 9
12440: PPUSH
12441: LD_INT 3
12443: PPUSH
12444: CALL_OW 275
12448: PUSH
12449: LD_VAR 0 14
12453: PUSH
12454: LD_INT 3
12456: ARRAY
12457: GREATEREQUAL
12458: AND
12459: IFFALSE 12471
// result := weapon ;
12461: LD_ADDR_VAR 0 3
12465: PUSH
12466: LD_VAR 0 18
12470: ST_TO_ADDR
// end ; end ;
12471: LD_VAR 0 3
12475: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12476: LD_INT 0
12478: PPUSH
12479: PPUSH
// result := true ;
12480: LD_ADDR_VAR 0 3
12484: PUSH
12485: LD_INT 1
12487: ST_TO_ADDR
// if array1 = array2 then
12488: LD_VAR 0 1
12492: PUSH
12493: LD_VAR 0 2
12497: EQUAL
12498: IFFALSE 12558
// begin for i = 1 to array1 do
12500: LD_ADDR_VAR 0 4
12504: PUSH
12505: DOUBLE
12506: LD_INT 1
12508: DEC
12509: ST_TO_ADDR
12510: LD_VAR 0 1
12514: PUSH
12515: FOR_TO
12516: IFFALSE 12554
// if array1 [ i ] <> array2 [ i ] then
12518: LD_VAR 0 1
12522: PUSH
12523: LD_VAR 0 4
12527: ARRAY
12528: PUSH
12529: LD_VAR 0 2
12533: PUSH
12534: LD_VAR 0 4
12538: ARRAY
12539: NONEQUAL
12540: IFFALSE 12552
// begin result := false ;
12542: LD_ADDR_VAR 0 3
12546: PUSH
12547: LD_INT 0
12549: ST_TO_ADDR
// break ;
12550: GO 12554
// end ;
12552: GO 12515
12554: POP
12555: POP
// end else
12556: GO 12566
// result := false ;
12558: LD_ADDR_VAR 0 3
12562: PUSH
12563: LD_INT 0
12565: ST_TO_ADDR
// end ;
12566: LD_VAR 0 3
12570: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12571: LD_INT 0
12573: PPUSH
12574: PPUSH
// if not array1 or not array2 then
12575: LD_VAR 0 1
12579: NOT
12580: PUSH
12581: LD_VAR 0 2
12585: NOT
12586: OR
12587: IFFALSE 12591
// exit ;
12589: GO 12655
// result := true ;
12591: LD_ADDR_VAR 0 3
12595: PUSH
12596: LD_INT 1
12598: ST_TO_ADDR
// for i = 1 to array1 do
12599: LD_ADDR_VAR 0 4
12603: PUSH
12604: DOUBLE
12605: LD_INT 1
12607: DEC
12608: ST_TO_ADDR
12609: LD_VAR 0 1
12613: PUSH
12614: FOR_TO
12615: IFFALSE 12653
// if array1 [ i ] <> array2 [ i ] then
12617: LD_VAR 0 1
12621: PUSH
12622: LD_VAR 0 4
12626: ARRAY
12627: PUSH
12628: LD_VAR 0 2
12632: PUSH
12633: LD_VAR 0 4
12637: ARRAY
12638: NONEQUAL
12639: IFFALSE 12651
// begin result := false ;
12641: LD_ADDR_VAR 0 3
12645: PUSH
12646: LD_INT 0
12648: ST_TO_ADDR
// break ;
12649: GO 12653
// end ;
12651: GO 12614
12653: POP
12654: POP
// end ;
12655: LD_VAR 0 3
12659: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12660: LD_INT 0
12662: PPUSH
12663: PPUSH
12664: PPUSH
// pom := GetBase ( fac ) ;
12665: LD_ADDR_VAR 0 5
12669: PUSH
12670: LD_VAR 0 1
12674: PPUSH
12675: CALL_OW 274
12679: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12680: LD_ADDR_VAR 0 4
12684: PUSH
12685: LD_VAR 0 2
12689: PUSH
12690: LD_INT 1
12692: ARRAY
12693: PPUSH
12694: LD_VAR 0 2
12698: PUSH
12699: LD_INT 2
12701: ARRAY
12702: PPUSH
12703: LD_VAR 0 2
12707: PUSH
12708: LD_INT 3
12710: ARRAY
12711: PPUSH
12712: LD_VAR 0 2
12716: PUSH
12717: LD_INT 4
12719: ARRAY
12720: PPUSH
12721: CALL_OW 449
12725: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12726: LD_ADDR_VAR 0 3
12730: PUSH
12731: LD_VAR 0 5
12735: PPUSH
12736: LD_INT 1
12738: PPUSH
12739: CALL_OW 275
12743: PUSH
12744: LD_VAR 0 4
12748: PUSH
12749: LD_INT 1
12751: ARRAY
12752: GREATEREQUAL
12753: PUSH
12754: LD_VAR 0 5
12758: PPUSH
12759: LD_INT 2
12761: PPUSH
12762: CALL_OW 275
12766: PUSH
12767: LD_VAR 0 4
12771: PUSH
12772: LD_INT 2
12774: ARRAY
12775: GREATEREQUAL
12776: AND
12777: PUSH
12778: LD_VAR 0 5
12782: PPUSH
12783: LD_INT 3
12785: PPUSH
12786: CALL_OW 275
12790: PUSH
12791: LD_VAR 0 4
12795: PUSH
12796: LD_INT 3
12798: ARRAY
12799: GREATEREQUAL
12800: AND
12801: ST_TO_ADDR
// end ;
12802: LD_VAR 0 3
12806: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12807: LD_INT 0
12809: PPUSH
12810: PPUSH
12811: PPUSH
12812: PPUSH
// pom := GetBase ( building ) ;
12813: LD_ADDR_VAR 0 3
12817: PUSH
12818: LD_VAR 0 1
12822: PPUSH
12823: CALL_OW 274
12827: ST_TO_ADDR
// if not pom then
12828: LD_VAR 0 3
12832: NOT
12833: IFFALSE 12837
// exit ;
12835: GO 13007
// btype := GetBType ( building ) ;
12837: LD_ADDR_VAR 0 5
12841: PUSH
12842: LD_VAR 0 1
12846: PPUSH
12847: CALL_OW 266
12851: ST_TO_ADDR
// if btype = b_armoury then
12852: LD_VAR 0 5
12856: PUSH
12857: LD_INT 4
12859: EQUAL
12860: IFFALSE 12870
// btype := b_barracks ;
12862: LD_ADDR_VAR 0 5
12866: PUSH
12867: LD_INT 5
12869: ST_TO_ADDR
// if btype = b_depot then
12870: LD_VAR 0 5
12874: PUSH
12875: LD_INT 0
12877: EQUAL
12878: IFFALSE 12888
// btype := b_warehouse ;
12880: LD_ADDR_VAR 0 5
12884: PUSH
12885: LD_INT 1
12887: ST_TO_ADDR
// if btype = b_workshop then
12888: LD_VAR 0 5
12892: PUSH
12893: LD_INT 2
12895: EQUAL
12896: IFFALSE 12906
// btype := b_factory ;
12898: LD_ADDR_VAR 0 5
12902: PUSH
12903: LD_INT 3
12905: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12906: LD_ADDR_VAR 0 4
12910: PUSH
12911: LD_VAR 0 5
12915: PPUSH
12916: LD_VAR 0 1
12920: PPUSH
12921: CALL_OW 248
12925: PPUSH
12926: CALL_OW 450
12930: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12931: LD_ADDR_VAR 0 2
12935: PUSH
12936: LD_VAR 0 3
12940: PPUSH
12941: LD_INT 1
12943: PPUSH
12944: CALL_OW 275
12948: PUSH
12949: LD_VAR 0 4
12953: PUSH
12954: LD_INT 1
12956: ARRAY
12957: GREATEREQUAL
12958: PUSH
12959: LD_VAR 0 3
12963: PPUSH
12964: LD_INT 2
12966: PPUSH
12967: CALL_OW 275
12971: PUSH
12972: LD_VAR 0 4
12976: PUSH
12977: LD_INT 2
12979: ARRAY
12980: GREATEREQUAL
12981: AND
12982: PUSH
12983: LD_VAR 0 3
12987: PPUSH
12988: LD_INT 3
12990: PPUSH
12991: CALL_OW 275
12995: PUSH
12996: LD_VAR 0 4
13000: PUSH
13001: LD_INT 3
13003: ARRAY
13004: GREATEREQUAL
13005: AND
13006: ST_TO_ADDR
// end ;
13007: LD_VAR 0 2
13011: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13012: LD_INT 0
13014: PPUSH
13015: PPUSH
13016: PPUSH
// pom := GetBase ( building ) ;
13017: LD_ADDR_VAR 0 4
13021: PUSH
13022: LD_VAR 0 1
13026: PPUSH
13027: CALL_OW 274
13031: ST_TO_ADDR
// if not pom then
13032: LD_VAR 0 4
13036: NOT
13037: IFFALSE 13041
// exit ;
13039: GO 13142
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13041: LD_ADDR_VAR 0 5
13045: PUSH
13046: LD_VAR 0 2
13050: PPUSH
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 248
13060: PPUSH
13061: CALL_OW 450
13065: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13066: LD_ADDR_VAR 0 3
13070: PUSH
13071: LD_VAR 0 4
13075: PPUSH
13076: LD_INT 1
13078: PPUSH
13079: CALL_OW 275
13083: PUSH
13084: LD_VAR 0 5
13088: PUSH
13089: LD_INT 1
13091: ARRAY
13092: GREATEREQUAL
13093: PUSH
13094: LD_VAR 0 4
13098: PPUSH
13099: LD_INT 2
13101: PPUSH
13102: CALL_OW 275
13106: PUSH
13107: LD_VAR 0 5
13111: PUSH
13112: LD_INT 2
13114: ARRAY
13115: GREATEREQUAL
13116: AND
13117: PUSH
13118: LD_VAR 0 4
13122: PPUSH
13123: LD_INT 3
13125: PPUSH
13126: CALL_OW 275
13130: PUSH
13131: LD_VAR 0 5
13135: PUSH
13136: LD_INT 3
13138: ARRAY
13139: GREATEREQUAL
13140: AND
13141: ST_TO_ADDR
// end ;
13142: LD_VAR 0 3
13146: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13147: LD_INT 0
13149: PPUSH
13150: PPUSH
13151: PPUSH
13152: PPUSH
13153: PPUSH
13154: PPUSH
13155: PPUSH
13156: PPUSH
13157: PPUSH
13158: PPUSH
13159: PPUSH
// result := false ;
13160: LD_ADDR_VAR 0 8
13164: PUSH
13165: LD_INT 0
13167: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13168: LD_VAR 0 5
13172: NOT
13173: PUSH
13174: LD_VAR 0 1
13178: NOT
13179: OR
13180: PUSH
13181: LD_VAR 0 2
13185: NOT
13186: OR
13187: PUSH
13188: LD_VAR 0 3
13192: NOT
13193: OR
13194: IFFALSE 13198
// exit ;
13196: GO 14012
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13198: LD_ADDR_VAR 0 14
13202: PUSH
13203: LD_VAR 0 1
13207: PPUSH
13208: LD_VAR 0 2
13212: PPUSH
13213: LD_VAR 0 3
13217: PPUSH
13218: LD_VAR 0 4
13222: PPUSH
13223: LD_VAR 0 5
13227: PUSH
13228: LD_INT 1
13230: ARRAY
13231: PPUSH
13232: CALL_OW 248
13236: PPUSH
13237: LD_INT 0
13239: PPUSH
13240: CALL 15249 0 6
13244: ST_TO_ADDR
// if not hexes then
13245: LD_VAR 0 14
13249: NOT
13250: IFFALSE 13254
// exit ;
13252: GO 14012
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13254: LD_ADDR_VAR 0 17
13258: PUSH
13259: LD_VAR 0 5
13263: PPUSH
13264: LD_INT 22
13266: PUSH
13267: LD_VAR 0 13
13271: PPUSH
13272: CALL_OW 255
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PUSH
13281: LD_INT 2
13283: PUSH
13284: LD_INT 30
13286: PUSH
13287: LD_INT 0
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PUSH
13294: LD_INT 30
13296: PUSH
13297: LD_INT 1
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: LIST
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: PPUSH
13313: CALL_OW 72
13317: ST_TO_ADDR
// for i = 1 to hexes do
13318: LD_ADDR_VAR 0 9
13322: PUSH
13323: DOUBLE
13324: LD_INT 1
13326: DEC
13327: ST_TO_ADDR
13328: LD_VAR 0 14
13332: PUSH
13333: FOR_TO
13334: IFFALSE 14010
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13336: LD_ADDR_VAR 0 13
13340: PUSH
13341: LD_VAR 0 14
13345: PUSH
13346: LD_VAR 0 9
13350: ARRAY
13351: PUSH
13352: LD_INT 1
13354: ARRAY
13355: PPUSH
13356: LD_VAR 0 14
13360: PUSH
13361: LD_VAR 0 9
13365: ARRAY
13366: PUSH
13367: LD_INT 2
13369: ARRAY
13370: PPUSH
13371: CALL_OW 428
13375: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13376: LD_VAR 0 14
13380: PUSH
13381: LD_VAR 0 9
13385: ARRAY
13386: PUSH
13387: LD_INT 1
13389: ARRAY
13390: PPUSH
13391: LD_VAR 0 14
13395: PUSH
13396: LD_VAR 0 9
13400: ARRAY
13401: PUSH
13402: LD_INT 2
13404: ARRAY
13405: PPUSH
13406: CALL_OW 351
13410: PUSH
13411: LD_VAR 0 14
13415: PUSH
13416: LD_VAR 0 9
13420: ARRAY
13421: PUSH
13422: LD_INT 1
13424: ARRAY
13425: PPUSH
13426: LD_VAR 0 14
13430: PUSH
13431: LD_VAR 0 9
13435: ARRAY
13436: PUSH
13437: LD_INT 2
13439: ARRAY
13440: PPUSH
13441: CALL_OW 488
13445: NOT
13446: OR
13447: PUSH
13448: LD_VAR 0 13
13452: PPUSH
13453: CALL_OW 247
13457: PUSH
13458: LD_INT 3
13460: EQUAL
13461: OR
13462: IFFALSE 13468
// exit ;
13464: POP
13465: POP
13466: GO 14012
// if not tmp then
13468: LD_VAR 0 13
13472: NOT
13473: IFFALSE 13477
// continue ;
13475: GO 13333
// result := true ;
13477: LD_ADDR_VAR 0 8
13481: PUSH
13482: LD_INT 1
13484: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13485: LD_VAR 0 6
13489: PUSH
13490: LD_VAR 0 13
13494: PPUSH
13495: CALL_OW 247
13499: PUSH
13500: LD_INT 2
13502: EQUAL
13503: AND
13504: PUSH
13505: LD_VAR 0 13
13509: PPUSH
13510: CALL_OW 263
13514: PUSH
13515: LD_INT 1
13517: EQUAL
13518: AND
13519: IFFALSE 13683
// begin if IsDrivenBy ( tmp ) then
13521: LD_VAR 0 13
13525: PPUSH
13526: CALL_OW 311
13530: IFFALSE 13534
// continue ;
13532: GO 13333
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13534: LD_VAR 0 6
13538: PPUSH
13539: LD_INT 3
13541: PUSH
13542: LD_INT 60
13544: PUSH
13545: EMPTY
13546: LIST
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: LD_INT 3
13554: PUSH
13555: LD_INT 55
13557: PUSH
13558: EMPTY
13559: LIST
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PPUSH
13569: CALL_OW 72
13573: IFFALSE 13681
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13575: LD_ADDR_VAR 0 18
13579: PUSH
13580: LD_VAR 0 6
13584: PPUSH
13585: LD_INT 3
13587: PUSH
13588: LD_INT 60
13590: PUSH
13591: EMPTY
13592: LIST
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 3
13600: PUSH
13601: LD_INT 55
13603: PUSH
13604: EMPTY
13605: LIST
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PPUSH
13615: CALL_OW 72
13619: PUSH
13620: LD_INT 1
13622: ARRAY
13623: ST_TO_ADDR
// if IsInUnit ( driver ) then
13624: LD_VAR 0 18
13628: PPUSH
13629: CALL_OW 310
13633: IFFALSE 13644
// ComExit ( driver ) ;
13635: LD_VAR 0 18
13639: PPUSH
13640: CALL 38433 0 1
// AddComEnterUnit ( driver , tmp ) ;
13644: LD_VAR 0 18
13648: PPUSH
13649: LD_VAR 0 13
13653: PPUSH
13654: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13658: LD_VAR 0 18
13662: PPUSH
13663: LD_VAR 0 7
13667: PPUSH
13668: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13672: LD_VAR 0 18
13676: PPUSH
13677: CALL_OW 181
// end ; continue ;
13681: GO 13333
// end ; if not cleaners or not tmp in cleaners then
13683: LD_VAR 0 6
13687: NOT
13688: PUSH
13689: LD_VAR 0 13
13693: PUSH
13694: LD_VAR 0 6
13698: IN
13699: NOT
13700: OR
13701: IFFALSE 14008
// begin if dep then
13703: LD_VAR 0 17
13707: IFFALSE 13843
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13709: LD_ADDR_VAR 0 16
13713: PUSH
13714: LD_VAR 0 17
13718: PUSH
13719: LD_INT 1
13721: ARRAY
13722: PPUSH
13723: CALL_OW 250
13727: PPUSH
13728: LD_VAR 0 17
13732: PUSH
13733: LD_INT 1
13735: ARRAY
13736: PPUSH
13737: CALL_OW 254
13741: PPUSH
13742: LD_INT 5
13744: PPUSH
13745: CALL_OW 272
13749: PUSH
13750: LD_VAR 0 17
13754: PUSH
13755: LD_INT 1
13757: ARRAY
13758: PPUSH
13759: CALL_OW 251
13763: PPUSH
13764: LD_VAR 0 17
13768: PUSH
13769: LD_INT 1
13771: ARRAY
13772: PPUSH
13773: CALL_OW 254
13777: PPUSH
13778: LD_INT 5
13780: PPUSH
13781: CALL_OW 273
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13790: LD_VAR 0 16
13794: PUSH
13795: LD_INT 1
13797: ARRAY
13798: PPUSH
13799: LD_VAR 0 16
13803: PUSH
13804: LD_INT 2
13806: ARRAY
13807: PPUSH
13808: CALL_OW 488
13812: IFFALSE 13843
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13814: LD_VAR 0 13
13818: PPUSH
13819: LD_VAR 0 16
13823: PUSH
13824: LD_INT 1
13826: ARRAY
13827: PPUSH
13828: LD_VAR 0 16
13832: PUSH
13833: LD_INT 2
13835: ARRAY
13836: PPUSH
13837: CALL_OW 111
// continue ;
13841: GO 13333
// end ; end ; r := GetDir ( tmp ) ;
13843: LD_ADDR_VAR 0 15
13847: PUSH
13848: LD_VAR 0 13
13852: PPUSH
13853: CALL_OW 254
13857: ST_TO_ADDR
// if r = 5 then
13858: LD_VAR 0 15
13862: PUSH
13863: LD_INT 5
13865: EQUAL
13866: IFFALSE 13876
// r := 0 ;
13868: LD_ADDR_VAR 0 15
13872: PUSH
13873: LD_INT 0
13875: ST_TO_ADDR
// for j = r to 5 do
13876: LD_ADDR_VAR 0 10
13880: PUSH
13881: DOUBLE
13882: LD_VAR 0 15
13886: DEC
13887: ST_TO_ADDR
13888: LD_INT 5
13890: PUSH
13891: FOR_TO
13892: IFFALSE 14006
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13894: LD_ADDR_VAR 0 11
13898: PUSH
13899: LD_VAR 0 13
13903: PPUSH
13904: CALL_OW 250
13908: PPUSH
13909: LD_VAR 0 10
13913: PPUSH
13914: LD_INT 2
13916: PPUSH
13917: CALL_OW 272
13921: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13922: LD_ADDR_VAR 0 12
13926: PUSH
13927: LD_VAR 0 13
13931: PPUSH
13932: CALL_OW 251
13936: PPUSH
13937: LD_VAR 0 10
13941: PPUSH
13942: LD_INT 2
13944: PPUSH
13945: CALL_OW 273
13949: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13950: LD_VAR 0 11
13954: PPUSH
13955: LD_VAR 0 12
13959: PPUSH
13960: CALL_OW 488
13964: PUSH
13965: LD_VAR 0 11
13969: PPUSH
13970: LD_VAR 0 12
13974: PPUSH
13975: CALL_OW 428
13979: NOT
13980: AND
13981: IFFALSE 14004
// begin ComMoveXY ( tmp , _x , _y ) ;
13983: LD_VAR 0 13
13987: PPUSH
13988: LD_VAR 0 11
13992: PPUSH
13993: LD_VAR 0 12
13997: PPUSH
13998: CALL_OW 111
// break ;
14002: GO 14006
// end ; end ;
14004: GO 13891
14006: POP
14007: POP
// end ; end ;
14008: GO 13333
14010: POP
14011: POP
// end ;
14012: LD_VAR 0 8
14016: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14017: LD_INT 0
14019: PPUSH
// result := true ;
14020: LD_ADDR_VAR 0 3
14024: PUSH
14025: LD_INT 1
14027: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14028: LD_VAR 0 2
14032: PUSH
14033: LD_INT 24
14035: DOUBLE
14036: EQUAL
14037: IFTRUE 14047
14039: LD_INT 33
14041: DOUBLE
14042: EQUAL
14043: IFTRUE 14047
14045: GO 14072
14047: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14048: LD_ADDR_VAR 0 3
14052: PUSH
14053: LD_INT 32
14055: PPUSH
14056: LD_VAR 0 1
14060: PPUSH
14061: CALL_OW 321
14065: PUSH
14066: LD_INT 2
14068: EQUAL
14069: ST_TO_ADDR
14070: GO 14392
14072: LD_INT 20
14074: DOUBLE
14075: EQUAL
14076: IFTRUE 14080
14078: GO 14105
14080: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14081: LD_ADDR_VAR 0 3
14085: PUSH
14086: LD_INT 6
14088: PPUSH
14089: LD_VAR 0 1
14093: PPUSH
14094: CALL_OW 321
14098: PUSH
14099: LD_INT 2
14101: EQUAL
14102: ST_TO_ADDR
14103: GO 14392
14105: LD_INT 22
14107: DOUBLE
14108: EQUAL
14109: IFTRUE 14119
14111: LD_INT 36
14113: DOUBLE
14114: EQUAL
14115: IFTRUE 14119
14117: GO 14144
14119: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14120: LD_ADDR_VAR 0 3
14124: PUSH
14125: LD_INT 15
14127: PPUSH
14128: LD_VAR 0 1
14132: PPUSH
14133: CALL_OW 321
14137: PUSH
14138: LD_INT 2
14140: EQUAL
14141: ST_TO_ADDR
14142: GO 14392
14144: LD_INT 30
14146: DOUBLE
14147: EQUAL
14148: IFTRUE 14152
14150: GO 14177
14152: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14153: LD_ADDR_VAR 0 3
14157: PUSH
14158: LD_INT 20
14160: PPUSH
14161: LD_VAR 0 1
14165: PPUSH
14166: CALL_OW 321
14170: PUSH
14171: LD_INT 2
14173: EQUAL
14174: ST_TO_ADDR
14175: GO 14392
14177: LD_INT 28
14179: DOUBLE
14180: EQUAL
14181: IFTRUE 14191
14183: LD_INT 21
14185: DOUBLE
14186: EQUAL
14187: IFTRUE 14191
14189: GO 14216
14191: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14192: LD_ADDR_VAR 0 3
14196: PUSH
14197: LD_INT 21
14199: PPUSH
14200: LD_VAR 0 1
14204: PPUSH
14205: CALL_OW 321
14209: PUSH
14210: LD_INT 2
14212: EQUAL
14213: ST_TO_ADDR
14214: GO 14392
14216: LD_INT 16
14218: DOUBLE
14219: EQUAL
14220: IFTRUE 14224
14222: GO 14251
14224: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14225: LD_ADDR_VAR 0 3
14229: PUSH
14230: LD_EXP 15
14234: PPUSH
14235: LD_VAR 0 1
14239: PPUSH
14240: CALL_OW 321
14244: PUSH
14245: LD_INT 2
14247: EQUAL
14248: ST_TO_ADDR
14249: GO 14392
14251: LD_INT 19
14253: DOUBLE
14254: EQUAL
14255: IFTRUE 14265
14257: LD_INT 23
14259: DOUBLE
14260: EQUAL
14261: IFTRUE 14265
14263: GO 14292
14265: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14266: LD_ADDR_VAR 0 3
14270: PUSH
14271: LD_EXP 14
14275: PPUSH
14276: LD_VAR 0 1
14280: PPUSH
14281: CALL_OW 321
14285: PUSH
14286: LD_INT 2
14288: EQUAL
14289: ST_TO_ADDR
14290: GO 14392
14292: LD_INT 17
14294: DOUBLE
14295: EQUAL
14296: IFTRUE 14300
14298: GO 14325
14300: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14301: LD_ADDR_VAR 0 3
14305: PUSH
14306: LD_INT 39
14308: PPUSH
14309: LD_VAR 0 1
14313: PPUSH
14314: CALL_OW 321
14318: PUSH
14319: LD_INT 2
14321: EQUAL
14322: ST_TO_ADDR
14323: GO 14392
14325: LD_INT 18
14327: DOUBLE
14328: EQUAL
14329: IFTRUE 14333
14331: GO 14358
14333: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14334: LD_ADDR_VAR 0 3
14338: PUSH
14339: LD_INT 40
14341: PPUSH
14342: LD_VAR 0 1
14346: PPUSH
14347: CALL_OW 321
14351: PUSH
14352: LD_INT 2
14354: EQUAL
14355: ST_TO_ADDR
14356: GO 14392
14358: LD_INT 27
14360: DOUBLE
14361: EQUAL
14362: IFTRUE 14366
14364: GO 14391
14366: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14367: LD_ADDR_VAR 0 3
14371: PUSH
14372: LD_INT 35
14374: PPUSH
14375: LD_VAR 0 1
14379: PPUSH
14380: CALL_OW 321
14384: PUSH
14385: LD_INT 2
14387: EQUAL
14388: ST_TO_ADDR
14389: GO 14392
14391: POP
// end ;
14392: LD_VAR 0 3
14396: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14397: LD_INT 0
14399: PPUSH
14400: PPUSH
14401: PPUSH
14402: PPUSH
14403: PPUSH
14404: PPUSH
14405: PPUSH
14406: PPUSH
14407: PPUSH
14408: PPUSH
14409: PPUSH
// result := false ;
14410: LD_ADDR_VAR 0 6
14414: PUSH
14415: LD_INT 0
14417: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14418: LD_VAR 0 1
14422: NOT
14423: PUSH
14424: LD_VAR 0 1
14428: PPUSH
14429: CALL_OW 266
14433: PUSH
14434: LD_INT 0
14436: PUSH
14437: LD_INT 1
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: IN
14444: NOT
14445: OR
14446: PUSH
14447: LD_VAR 0 2
14451: NOT
14452: OR
14453: PUSH
14454: LD_VAR 0 5
14458: PUSH
14459: LD_INT 0
14461: PUSH
14462: LD_INT 1
14464: PUSH
14465: LD_INT 2
14467: PUSH
14468: LD_INT 3
14470: PUSH
14471: LD_INT 4
14473: PUSH
14474: LD_INT 5
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: IN
14485: NOT
14486: OR
14487: PUSH
14488: LD_VAR 0 3
14492: PPUSH
14493: LD_VAR 0 4
14497: PPUSH
14498: CALL_OW 488
14502: NOT
14503: OR
14504: IFFALSE 14508
// exit ;
14506: GO 15244
// side := GetSide ( depot ) ;
14508: LD_ADDR_VAR 0 9
14512: PUSH
14513: LD_VAR 0 1
14517: PPUSH
14518: CALL_OW 255
14522: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14523: LD_VAR 0 9
14527: PPUSH
14528: LD_VAR 0 2
14532: PPUSH
14533: CALL 14017 0 2
14537: NOT
14538: IFFALSE 14542
// exit ;
14540: GO 15244
// pom := GetBase ( depot ) ;
14542: LD_ADDR_VAR 0 10
14546: PUSH
14547: LD_VAR 0 1
14551: PPUSH
14552: CALL_OW 274
14556: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14557: LD_ADDR_VAR 0 11
14561: PUSH
14562: LD_VAR 0 2
14566: PPUSH
14567: LD_VAR 0 1
14571: PPUSH
14572: CALL_OW 248
14576: PPUSH
14577: CALL_OW 450
14581: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14582: LD_VAR 0 10
14586: PPUSH
14587: LD_INT 1
14589: PPUSH
14590: CALL_OW 275
14594: PUSH
14595: LD_VAR 0 11
14599: PUSH
14600: LD_INT 1
14602: ARRAY
14603: GREATEREQUAL
14604: PUSH
14605: LD_VAR 0 10
14609: PPUSH
14610: LD_INT 2
14612: PPUSH
14613: CALL_OW 275
14617: PUSH
14618: LD_VAR 0 11
14622: PUSH
14623: LD_INT 2
14625: ARRAY
14626: GREATEREQUAL
14627: AND
14628: PUSH
14629: LD_VAR 0 10
14633: PPUSH
14634: LD_INT 3
14636: PPUSH
14637: CALL_OW 275
14641: PUSH
14642: LD_VAR 0 11
14646: PUSH
14647: LD_INT 3
14649: ARRAY
14650: GREATEREQUAL
14651: AND
14652: NOT
14653: IFFALSE 14657
// exit ;
14655: GO 15244
// if GetBType ( depot ) = b_depot then
14657: LD_VAR 0 1
14661: PPUSH
14662: CALL_OW 266
14666: PUSH
14667: LD_INT 0
14669: EQUAL
14670: IFFALSE 14682
// dist := 28 else
14672: LD_ADDR_VAR 0 14
14676: PUSH
14677: LD_INT 28
14679: ST_TO_ADDR
14680: GO 14690
// dist := 36 ;
14682: LD_ADDR_VAR 0 14
14686: PUSH
14687: LD_INT 36
14689: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14690: LD_VAR 0 1
14694: PPUSH
14695: LD_VAR 0 3
14699: PPUSH
14700: LD_VAR 0 4
14704: PPUSH
14705: CALL_OW 297
14709: PUSH
14710: LD_VAR 0 14
14714: GREATER
14715: IFFALSE 14719
// exit ;
14717: GO 15244
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14719: LD_ADDR_VAR 0 12
14723: PUSH
14724: LD_VAR 0 2
14728: PPUSH
14729: LD_VAR 0 3
14733: PPUSH
14734: LD_VAR 0 4
14738: PPUSH
14739: LD_VAR 0 5
14743: PPUSH
14744: LD_VAR 0 1
14748: PPUSH
14749: CALL_OW 248
14753: PPUSH
14754: LD_INT 0
14756: PPUSH
14757: CALL 15249 0 6
14761: ST_TO_ADDR
// if not hexes then
14762: LD_VAR 0 12
14766: NOT
14767: IFFALSE 14771
// exit ;
14769: GO 15244
// hex := GetHexInfo ( x , y ) ;
14771: LD_ADDR_VAR 0 15
14775: PUSH
14776: LD_VAR 0 3
14780: PPUSH
14781: LD_VAR 0 4
14785: PPUSH
14786: CALL_OW 546
14790: ST_TO_ADDR
// if hex [ 1 ] then
14791: LD_VAR 0 15
14795: PUSH
14796: LD_INT 1
14798: ARRAY
14799: IFFALSE 14803
// exit ;
14801: GO 15244
// height := hex [ 2 ] ;
14803: LD_ADDR_VAR 0 13
14807: PUSH
14808: LD_VAR 0 15
14812: PUSH
14813: LD_INT 2
14815: ARRAY
14816: ST_TO_ADDR
// for i = 1 to hexes do
14817: LD_ADDR_VAR 0 7
14821: PUSH
14822: DOUBLE
14823: LD_INT 1
14825: DEC
14826: ST_TO_ADDR
14827: LD_VAR 0 12
14831: PUSH
14832: FOR_TO
14833: IFFALSE 15163
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14835: LD_VAR 0 12
14839: PUSH
14840: LD_VAR 0 7
14844: ARRAY
14845: PUSH
14846: LD_INT 1
14848: ARRAY
14849: PPUSH
14850: LD_VAR 0 12
14854: PUSH
14855: LD_VAR 0 7
14859: ARRAY
14860: PUSH
14861: LD_INT 2
14863: ARRAY
14864: PPUSH
14865: CALL_OW 488
14869: NOT
14870: PUSH
14871: LD_VAR 0 12
14875: PUSH
14876: LD_VAR 0 7
14880: ARRAY
14881: PUSH
14882: LD_INT 1
14884: ARRAY
14885: PPUSH
14886: LD_VAR 0 12
14890: PUSH
14891: LD_VAR 0 7
14895: ARRAY
14896: PUSH
14897: LD_INT 2
14899: ARRAY
14900: PPUSH
14901: CALL_OW 428
14905: PUSH
14906: LD_INT 0
14908: GREATER
14909: OR
14910: PUSH
14911: LD_VAR 0 12
14915: PUSH
14916: LD_VAR 0 7
14920: ARRAY
14921: PUSH
14922: LD_INT 1
14924: ARRAY
14925: PPUSH
14926: LD_VAR 0 12
14930: PUSH
14931: LD_VAR 0 7
14935: ARRAY
14936: PUSH
14937: LD_INT 2
14939: ARRAY
14940: PPUSH
14941: CALL_OW 351
14945: OR
14946: IFFALSE 14952
// exit ;
14948: POP
14949: POP
14950: GO 15244
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14952: LD_ADDR_VAR 0 8
14956: PUSH
14957: LD_VAR 0 12
14961: PUSH
14962: LD_VAR 0 7
14966: ARRAY
14967: PUSH
14968: LD_INT 1
14970: ARRAY
14971: PPUSH
14972: LD_VAR 0 12
14976: PUSH
14977: LD_VAR 0 7
14981: ARRAY
14982: PUSH
14983: LD_INT 2
14985: ARRAY
14986: PPUSH
14987: CALL_OW 546
14991: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14992: LD_VAR 0 8
14996: PUSH
14997: LD_INT 1
14999: ARRAY
15000: PUSH
15001: LD_VAR 0 8
15005: PUSH
15006: LD_INT 2
15008: ARRAY
15009: PUSH
15010: LD_VAR 0 13
15014: PUSH
15015: LD_INT 2
15017: PLUS
15018: GREATER
15019: OR
15020: PUSH
15021: LD_VAR 0 8
15025: PUSH
15026: LD_INT 2
15028: ARRAY
15029: PUSH
15030: LD_VAR 0 13
15034: PUSH
15035: LD_INT 2
15037: MINUS
15038: LESS
15039: OR
15040: PUSH
15041: LD_VAR 0 8
15045: PUSH
15046: LD_INT 3
15048: ARRAY
15049: PUSH
15050: LD_INT 0
15052: PUSH
15053: LD_INT 8
15055: PUSH
15056: LD_INT 9
15058: PUSH
15059: LD_INT 10
15061: PUSH
15062: LD_INT 11
15064: PUSH
15065: LD_INT 12
15067: PUSH
15068: LD_INT 13
15070: PUSH
15071: LD_INT 16
15073: PUSH
15074: LD_INT 17
15076: PUSH
15077: LD_INT 18
15079: PUSH
15080: LD_INT 19
15082: PUSH
15083: LD_INT 20
15085: PUSH
15086: LD_INT 21
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: IN
15104: NOT
15105: OR
15106: PUSH
15107: LD_VAR 0 8
15111: PUSH
15112: LD_INT 5
15114: ARRAY
15115: NOT
15116: OR
15117: PUSH
15118: LD_VAR 0 8
15122: PUSH
15123: LD_INT 6
15125: ARRAY
15126: PUSH
15127: LD_INT 1
15129: PUSH
15130: LD_INT 2
15132: PUSH
15133: LD_INT 7
15135: PUSH
15136: LD_INT 9
15138: PUSH
15139: LD_INT 10
15141: PUSH
15142: LD_INT 11
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: IN
15153: NOT
15154: OR
15155: IFFALSE 15161
// exit ;
15157: POP
15158: POP
15159: GO 15244
// end ;
15161: GO 14832
15163: POP
15164: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15165: LD_VAR 0 9
15169: PPUSH
15170: LD_VAR 0 3
15174: PPUSH
15175: LD_VAR 0 4
15179: PPUSH
15180: LD_INT 20
15182: PPUSH
15183: CALL 7190 0 4
15187: PUSH
15188: LD_INT 4
15190: ARRAY
15191: IFFALSE 15195
// exit ;
15193: GO 15244
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15195: LD_VAR 0 2
15199: PUSH
15200: LD_INT 29
15202: PUSH
15203: LD_INT 30
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: IN
15210: PUSH
15211: LD_VAR 0 3
15215: PPUSH
15216: LD_VAR 0 4
15220: PPUSH
15221: LD_VAR 0 9
15225: PPUSH
15226: CALL_OW 440
15230: NOT
15231: AND
15232: IFFALSE 15236
// exit ;
15234: GO 15244
// result := true ;
15236: LD_ADDR_VAR 0 6
15240: PUSH
15241: LD_INT 1
15243: ST_TO_ADDR
// end ;
15244: LD_VAR 0 6
15248: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15249: LD_INT 0
15251: PPUSH
15252: PPUSH
15253: PPUSH
15254: PPUSH
15255: PPUSH
15256: PPUSH
15257: PPUSH
15258: PPUSH
15259: PPUSH
15260: PPUSH
15261: PPUSH
15262: PPUSH
15263: PPUSH
15264: PPUSH
15265: PPUSH
15266: PPUSH
15267: PPUSH
15268: PPUSH
15269: PPUSH
15270: PPUSH
15271: PPUSH
15272: PPUSH
15273: PPUSH
15274: PPUSH
15275: PPUSH
15276: PPUSH
15277: PPUSH
15278: PPUSH
15279: PPUSH
15280: PPUSH
15281: PPUSH
15282: PPUSH
15283: PPUSH
15284: PPUSH
15285: PPUSH
15286: PPUSH
15287: PPUSH
15288: PPUSH
15289: PPUSH
15290: PPUSH
15291: PPUSH
15292: PPUSH
15293: PPUSH
15294: PPUSH
15295: PPUSH
15296: PPUSH
15297: PPUSH
15298: PPUSH
15299: PPUSH
15300: PPUSH
15301: PPUSH
15302: PPUSH
15303: PPUSH
15304: PPUSH
15305: PPUSH
15306: PPUSH
15307: PPUSH
15308: PPUSH
// result = [ ] ;
15309: LD_ADDR_VAR 0 7
15313: PUSH
15314: EMPTY
15315: ST_TO_ADDR
// temp_list = [ ] ;
15316: LD_ADDR_VAR 0 9
15320: PUSH
15321: EMPTY
15322: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15323: LD_VAR 0 4
15327: PUSH
15328: LD_INT 0
15330: PUSH
15331: LD_INT 1
15333: PUSH
15334: LD_INT 2
15336: PUSH
15337: LD_INT 3
15339: PUSH
15340: LD_INT 4
15342: PUSH
15343: LD_INT 5
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: IN
15354: NOT
15355: PUSH
15356: LD_VAR 0 1
15360: PUSH
15361: LD_INT 0
15363: PUSH
15364: LD_INT 1
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: IN
15371: PUSH
15372: LD_VAR 0 5
15376: PUSH
15377: LD_INT 1
15379: PUSH
15380: LD_INT 2
15382: PUSH
15383: LD_INT 3
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: LIST
15390: IN
15391: NOT
15392: AND
15393: OR
15394: IFFALSE 15398
// exit ;
15396: GO 33789
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15398: LD_VAR 0 1
15402: PUSH
15403: LD_INT 6
15405: PUSH
15406: LD_INT 7
15408: PUSH
15409: LD_INT 8
15411: PUSH
15412: LD_INT 13
15414: PUSH
15415: LD_INT 12
15417: PUSH
15418: LD_INT 15
15420: PUSH
15421: LD_INT 11
15423: PUSH
15424: LD_INT 14
15426: PUSH
15427: LD_INT 10
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: IN
15441: IFFALSE 15451
// btype = b_lab ;
15443: LD_ADDR_VAR 0 1
15447: PUSH
15448: LD_INT 6
15450: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15451: LD_VAR 0 6
15455: PUSH
15456: LD_INT 0
15458: PUSH
15459: LD_INT 1
15461: PUSH
15462: LD_INT 2
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: LIST
15469: IN
15470: NOT
15471: PUSH
15472: LD_VAR 0 1
15476: PUSH
15477: LD_INT 0
15479: PUSH
15480: LD_INT 1
15482: PUSH
15483: LD_INT 2
15485: PUSH
15486: LD_INT 3
15488: PUSH
15489: LD_INT 6
15491: PUSH
15492: LD_INT 36
15494: PUSH
15495: LD_INT 4
15497: PUSH
15498: LD_INT 5
15500: PUSH
15501: LD_INT 31
15503: PUSH
15504: LD_INT 32
15506: PUSH
15507: LD_INT 33
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: IN
15523: NOT
15524: PUSH
15525: LD_VAR 0 6
15529: PUSH
15530: LD_INT 1
15532: EQUAL
15533: AND
15534: OR
15535: PUSH
15536: LD_VAR 0 1
15540: PUSH
15541: LD_INT 2
15543: PUSH
15544: LD_INT 3
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: IN
15551: NOT
15552: PUSH
15553: LD_VAR 0 6
15557: PUSH
15558: LD_INT 2
15560: EQUAL
15561: AND
15562: OR
15563: IFFALSE 15573
// mode = 0 ;
15565: LD_ADDR_VAR 0 6
15569: PUSH
15570: LD_INT 0
15572: ST_TO_ADDR
// case mode of 0 :
15573: LD_VAR 0 6
15577: PUSH
15578: LD_INT 0
15580: DOUBLE
15581: EQUAL
15582: IFTRUE 15586
15584: GO 27039
15586: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15587: LD_ADDR_VAR 0 11
15591: PUSH
15592: LD_INT 0
15594: PUSH
15595: LD_INT 0
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 0
15604: PUSH
15605: LD_INT 1
15607: NEG
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 1
15615: PUSH
15616: LD_INT 0
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: LD_INT 1
15625: PUSH
15626: LD_INT 1
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 0
15635: PUSH
15636: LD_INT 1
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 1
15645: NEG
15646: PUSH
15647: LD_INT 0
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 1
15656: NEG
15657: PUSH
15658: LD_INT 1
15660: NEG
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 1
15668: NEG
15669: PUSH
15670: LD_INT 2
15672: NEG
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: LD_INT 0
15680: PUSH
15681: LD_INT 2
15683: NEG
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: LD_INT 1
15691: PUSH
15692: LD_INT 1
15694: NEG
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: PUSH
15700: LD_INT 1
15702: PUSH
15703: LD_INT 2
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PUSH
15710: LD_INT 0
15712: PUSH
15713: LD_INT 2
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PUSH
15720: LD_INT 1
15722: NEG
15723: PUSH
15724: LD_INT 1
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 1
15733: PUSH
15734: LD_INT 3
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: LD_INT 0
15743: PUSH
15744: LD_INT 3
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: LD_INT 1
15753: NEG
15754: PUSH
15755: LD_INT 2
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15780: LD_ADDR_VAR 0 12
15784: PUSH
15785: LD_INT 0
15787: PUSH
15788: LD_INT 0
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: PUSH
15795: LD_INT 0
15797: PUSH
15798: LD_INT 1
15800: NEG
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 1
15808: PUSH
15809: LD_INT 0
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 1
15818: PUSH
15819: LD_INT 1
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 0
15828: PUSH
15829: LD_INT 1
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 1
15838: NEG
15839: PUSH
15840: LD_INT 0
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 1
15849: NEG
15850: PUSH
15851: LD_INT 1
15853: NEG
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 1
15861: PUSH
15862: LD_INT 1
15864: NEG
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 2
15872: PUSH
15873: LD_INT 0
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: LD_INT 2
15882: PUSH
15883: LD_INT 1
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: PUSH
15890: LD_INT 1
15892: NEG
15893: PUSH
15894: LD_INT 1
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 2
15903: NEG
15904: PUSH
15905: LD_INT 0
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: LD_INT 2
15914: NEG
15915: PUSH
15916: LD_INT 1
15918: NEG
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 2
15926: NEG
15927: PUSH
15928: LD_INT 1
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: LD_INT 3
15937: NEG
15938: PUSH
15939: LD_INT 0
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: LD_INT 3
15948: NEG
15949: PUSH
15950: LD_INT 1
15952: NEG
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15976: LD_ADDR_VAR 0 13
15980: PUSH
15981: LD_INT 0
15983: PUSH
15984: LD_INT 0
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: LD_INT 0
15993: PUSH
15994: LD_INT 1
15996: NEG
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 1
16004: PUSH
16005: LD_INT 0
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 1
16014: PUSH
16015: LD_INT 1
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PUSH
16022: LD_INT 0
16024: PUSH
16025: LD_INT 1
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 1
16034: NEG
16035: PUSH
16036: LD_INT 0
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: LD_INT 1
16045: NEG
16046: PUSH
16047: LD_INT 1
16049: NEG
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: LD_INT 1
16057: NEG
16058: PUSH
16059: LD_INT 2
16061: NEG
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: LD_INT 1
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 2
16079: PUSH
16080: LD_INT 2
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 1
16089: PUSH
16090: LD_INT 2
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: LD_INT 2
16099: NEG
16100: PUSH
16101: LD_INT 1
16103: NEG
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: PUSH
16109: LD_INT 2
16111: NEG
16112: PUSH
16113: LD_INT 2
16115: NEG
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: LD_INT 2
16123: NEG
16124: PUSH
16125: LD_INT 3
16127: NEG
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PUSH
16133: LD_INT 3
16135: NEG
16136: PUSH
16137: LD_INT 2
16139: NEG
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: LD_INT 3
16147: NEG
16148: PUSH
16149: LD_INT 3
16151: NEG
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16175: LD_ADDR_VAR 0 14
16179: PUSH
16180: LD_INT 0
16182: PUSH
16183: LD_INT 0
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 0
16192: PUSH
16193: LD_INT 1
16195: NEG
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 1
16203: PUSH
16204: LD_INT 0
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 1
16213: PUSH
16214: LD_INT 1
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 0
16223: PUSH
16224: LD_INT 1
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 1
16233: NEG
16234: PUSH
16235: LD_INT 0
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 1
16244: NEG
16245: PUSH
16246: LD_INT 1
16248: NEG
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 1
16256: NEG
16257: PUSH
16258: LD_INT 2
16260: NEG
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 0
16268: PUSH
16269: LD_INT 2
16271: NEG
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 1
16279: PUSH
16280: LD_INT 1
16282: NEG
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: PUSH
16288: LD_INT 1
16290: PUSH
16291: LD_INT 2
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: LD_INT 0
16300: PUSH
16301: LD_INT 2
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: LD_INT 1
16310: NEG
16311: PUSH
16312: LD_INT 1
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 1
16321: NEG
16322: PUSH
16323: LD_INT 3
16325: NEG
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PUSH
16331: LD_INT 0
16333: PUSH
16334: LD_INT 3
16336: NEG
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: LD_INT 1
16344: PUSH
16345: LD_INT 2
16347: NEG
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16371: LD_ADDR_VAR 0 15
16375: PUSH
16376: LD_INT 0
16378: PUSH
16379: LD_INT 0
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 0
16388: PUSH
16389: LD_INT 1
16391: NEG
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 1
16399: PUSH
16400: LD_INT 0
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: LD_INT 1
16409: PUSH
16410: LD_INT 1
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 0
16419: PUSH
16420: LD_INT 1
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 1
16429: NEG
16430: PUSH
16431: LD_INT 0
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: LD_INT 1
16440: NEG
16441: PUSH
16442: LD_INT 1
16444: NEG
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PUSH
16450: LD_INT 1
16452: PUSH
16453: LD_INT 1
16455: NEG
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 2
16463: PUSH
16464: LD_INT 0
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 2
16473: PUSH
16474: LD_INT 1
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 1
16483: NEG
16484: PUSH
16485: LD_INT 1
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 2
16494: NEG
16495: PUSH
16496: LD_INT 0
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 2
16505: NEG
16506: PUSH
16507: LD_INT 1
16509: NEG
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 2
16517: PUSH
16518: LD_INT 1
16520: NEG
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 3
16528: PUSH
16529: LD_INT 0
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PUSH
16536: LD_INT 3
16538: PUSH
16539: LD_INT 1
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16564: LD_ADDR_VAR 0 16
16568: PUSH
16569: LD_INT 0
16571: PUSH
16572: LD_INT 0
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: PUSH
16579: LD_INT 0
16581: PUSH
16582: LD_INT 1
16584: NEG
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: LD_INT 0
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: LD_INT 1
16602: PUSH
16603: LD_INT 1
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 0
16612: PUSH
16613: LD_INT 1
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 1
16622: NEG
16623: PUSH
16624: LD_INT 0
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: LD_INT 1
16633: NEG
16634: PUSH
16635: LD_INT 1
16637: NEG
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 1
16645: NEG
16646: PUSH
16647: LD_INT 2
16649: NEG
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 2
16657: PUSH
16658: LD_INT 1
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 2
16667: PUSH
16668: LD_INT 2
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 1
16677: PUSH
16678: LD_INT 2
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: LD_INT 2
16687: NEG
16688: PUSH
16689: LD_INT 1
16691: NEG
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: LD_INT 2
16699: NEG
16700: PUSH
16701: LD_INT 2
16703: NEG
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PUSH
16709: LD_INT 3
16711: PUSH
16712: LD_INT 2
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 3
16721: PUSH
16722: LD_INT 3
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: PUSH
16729: LD_INT 2
16731: PUSH
16732: LD_INT 3
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16757: LD_ADDR_VAR 0 17
16761: PUSH
16762: LD_INT 0
16764: PUSH
16765: LD_INT 0
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 0
16774: PUSH
16775: LD_INT 1
16777: NEG
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 1
16785: PUSH
16786: LD_INT 0
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 1
16795: PUSH
16796: LD_INT 1
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 0
16805: PUSH
16806: LD_INT 1
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 1
16815: NEG
16816: PUSH
16817: LD_INT 0
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: LD_INT 1
16826: NEG
16827: PUSH
16828: LD_INT 1
16830: NEG
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 1
16838: NEG
16839: PUSH
16840: LD_INT 2
16842: NEG
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 0
16850: PUSH
16851: LD_INT 2
16853: NEG
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 1
16861: PUSH
16862: LD_INT 1
16864: NEG
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 2
16872: PUSH
16873: LD_INT 0
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 2
16882: PUSH
16883: LD_INT 1
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: LD_INT 2
16892: PUSH
16893: LD_INT 2
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 1
16902: PUSH
16903: LD_INT 2
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 0
16912: PUSH
16913: LD_INT 2
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 1
16922: NEG
16923: PUSH
16924: LD_INT 1
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 2
16933: NEG
16934: PUSH
16935: LD_INT 0
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 2
16944: NEG
16945: PUSH
16946: LD_INT 1
16948: NEG
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 2
16956: NEG
16957: PUSH
16958: LD_INT 2
16960: NEG
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16987: LD_ADDR_VAR 0 18
16991: PUSH
16992: LD_INT 0
16994: PUSH
16995: LD_INT 0
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 0
17004: PUSH
17005: LD_INT 1
17007: NEG
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PUSH
17013: LD_INT 1
17015: PUSH
17016: LD_INT 0
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 1
17025: PUSH
17026: LD_INT 1
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 0
17035: PUSH
17036: LD_INT 1
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 1
17045: NEG
17046: PUSH
17047: LD_INT 0
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 1
17056: NEG
17057: PUSH
17058: LD_INT 1
17060: NEG
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 1
17068: NEG
17069: PUSH
17070: LD_INT 2
17072: NEG
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 0
17080: PUSH
17081: LD_INT 2
17083: NEG
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 1
17091: PUSH
17092: LD_INT 1
17094: NEG
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 2
17102: PUSH
17103: LD_INT 0
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 2
17112: PUSH
17113: LD_INT 1
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: LD_INT 2
17122: PUSH
17123: LD_INT 2
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 1
17132: PUSH
17133: LD_INT 2
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 0
17142: PUSH
17143: LD_INT 2
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 1
17152: NEG
17153: PUSH
17154: LD_INT 1
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 2
17163: NEG
17164: PUSH
17165: LD_INT 0
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 2
17174: NEG
17175: PUSH
17176: LD_INT 1
17178: NEG
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: LD_INT 2
17186: NEG
17187: PUSH
17188: LD_INT 2
17190: NEG
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17217: LD_ADDR_VAR 0 19
17221: PUSH
17222: LD_INT 0
17224: PUSH
17225: LD_INT 0
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 0
17234: PUSH
17235: LD_INT 1
17237: NEG
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 1
17245: PUSH
17246: LD_INT 0
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 1
17255: PUSH
17256: LD_INT 1
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: LD_INT 0
17265: PUSH
17266: LD_INT 1
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 1
17275: NEG
17276: PUSH
17277: LD_INT 0
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 1
17286: NEG
17287: PUSH
17288: LD_INT 1
17290: NEG
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 1
17298: NEG
17299: PUSH
17300: LD_INT 2
17302: NEG
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 0
17310: PUSH
17311: LD_INT 2
17313: NEG
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 1
17321: PUSH
17322: LD_INT 1
17324: NEG
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: LD_INT 2
17332: PUSH
17333: LD_INT 0
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 2
17342: PUSH
17343: LD_INT 1
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: LD_INT 2
17352: PUSH
17353: LD_INT 2
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 1
17362: PUSH
17363: LD_INT 2
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 0
17372: PUSH
17373: LD_INT 2
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 1
17382: NEG
17383: PUSH
17384: LD_INT 1
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 2
17393: NEG
17394: PUSH
17395: LD_INT 0
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 2
17404: NEG
17405: PUSH
17406: LD_INT 1
17408: NEG
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PUSH
17414: LD_INT 2
17416: NEG
17417: PUSH
17418: LD_INT 2
17420: NEG
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17447: LD_ADDR_VAR 0 20
17451: PUSH
17452: LD_INT 0
17454: PUSH
17455: LD_INT 0
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 0
17464: PUSH
17465: LD_INT 1
17467: NEG
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 1
17475: PUSH
17476: LD_INT 0
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 1
17485: PUSH
17486: LD_INT 1
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 0
17495: PUSH
17496: LD_INT 1
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 1
17505: NEG
17506: PUSH
17507: LD_INT 0
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 1
17516: NEG
17517: PUSH
17518: LD_INT 1
17520: NEG
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 1
17528: NEG
17529: PUSH
17530: LD_INT 2
17532: NEG
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 0
17540: PUSH
17541: LD_INT 2
17543: NEG
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 1
17551: PUSH
17552: LD_INT 1
17554: NEG
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 2
17562: PUSH
17563: LD_INT 0
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 2
17572: PUSH
17573: LD_INT 1
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 2
17582: PUSH
17583: LD_INT 2
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 1
17592: PUSH
17593: LD_INT 2
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 0
17602: PUSH
17603: LD_INT 2
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 1
17612: NEG
17613: PUSH
17614: LD_INT 1
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 2
17623: NEG
17624: PUSH
17625: LD_INT 0
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 2
17634: NEG
17635: PUSH
17636: LD_INT 1
17638: NEG
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 2
17646: NEG
17647: PUSH
17648: LD_INT 2
17650: NEG
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17677: LD_ADDR_VAR 0 21
17681: PUSH
17682: LD_INT 0
17684: PUSH
17685: LD_INT 0
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 0
17694: PUSH
17695: LD_INT 1
17697: NEG
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 1
17705: PUSH
17706: LD_INT 0
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 1
17715: PUSH
17716: LD_INT 1
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 0
17725: PUSH
17726: LD_INT 1
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 1
17735: NEG
17736: PUSH
17737: LD_INT 0
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 1
17746: NEG
17747: PUSH
17748: LD_INT 1
17750: NEG
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 1
17758: NEG
17759: PUSH
17760: LD_INT 2
17762: NEG
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 0
17770: PUSH
17771: LD_INT 2
17773: NEG
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 1
17781: PUSH
17782: LD_INT 1
17784: NEG
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 2
17792: PUSH
17793: LD_INT 0
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 2
17802: PUSH
17803: LD_INT 1
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 2
17812: PUSH
17813: LD_INT 2
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 1
17822: PUSH
17823: LD_INT 2
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 0
17832: PUSH
17833: LD_INT 2
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 1
17842: NEG
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 2
17853: NEG
17854: PUSH
17855: LD_INT 0
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 2
17864: NEG
17865: PUSH
17866: LD_INT 1
17868: NEG
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 2
17876: NEG
17877: PUSH
17878: LD_INT 2
17880: NEG
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17907: LD_ADDR_VAR 0 22
17911: PUSH
17912: LD_INT 0
17914: PUSH
17915: LD_INT 0
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 0
17924: PUSH
17925: LD_INT 1
17927: NEG
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: LD_INT 0
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 1
17945: PUSH
17946: LD_INT 1
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 0
17955: PUSH
17956: LD_INT 1
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 1
17965: NEG
17966: PUSH
17967: LD_INT 0
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 1
17976: NEG
17977: PUSH
17978: LD_INT 1
17980: NEG
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 1
17988: NEG
17989: PUSH
17990: LD_INT 2
17992: NEG
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 0
18000: PUSH
18001: LD_INT 2
18003: NEG
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 1
18011: PUSH
18012: LD_INT 1
18014: NEG
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 2
18022: PUSH
18023: LD_INT 0
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 2
18032: PUSH
18033: LD_INT 1
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 2
18042: PUSH
18043: LD_INT 2
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 1
18052: PUSH
18053: LD_INT 2
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 0
18062: PUSH
18063: LD_INT 2
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 1
18072: NEG
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 2
18083: NEG
18084: PUSH
18085: LD_INT 0
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 2
18094: NEG
18095: PUSH
18096: LD_INT 1
18098: NEG
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 2
18106: NEG
18107: PUSH
18108: LD_INT 2
18110: NEG
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18137: LD_ADDR_VAR 0 23
18141: PUSH
18142: LD_INT 0
18144: PUSH
18145: LD_INT 0
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 0
18154: PUSH
18155: LD_INT 1
18157: NEG
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 1
18165: PUSH
18166: LD_INT 0
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 1
18175: PUSH
18176: LD_INT 1
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 0
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 1
18195: NEG
18196: PUSH
18197: LD_INT 0
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 1
18206: NEG
18207: PUSH
18208: LD_INT 1
18210: NEG
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 1
18218: NEG
18219: PUSH
18220: LD_INT 2
18222: NEG
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 0
18230: PUSH
18231: LD_INT 2
18233: NEG
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: LD_INT 1
18244: NEG
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 2
18252: PUSH
18253: LD_INT 0
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 2
18262: PUSH
18263: LD_INT 1
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 2
18272: PUSH
18273: LD_INT 2
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 1
18282: PUSH
18283: LD_INT 2
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 0
18292: PUSH
18293: LD_INT 2
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 1
18302: NEG
18303: PUSH
18304: LD_INT 1
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 2
18313: NEG
18314: PUSH
18315: LD_INT 0
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 2
18324: NEG
18325: PUSH
18326: LD_INT 1
18328: NEG
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 2
18336: NEG
18337: PUSH
18338: LD_INT 2
18340: NEG
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 2
18348: NEG
18349: PUSH
18350: LD_INT 3
18352: NEG
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 1
18360: NEG
18361: PUSH
18362: LD_INT 3
18364: NEG
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 1
18372: PUSH
18373: LD_INT 2
18375: NEG
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 2
18383: PUSH
18384: LD_INT 1
18386: NEG
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18417: LD_ADDR_VAR 0 24
18421: PUSH
18422: LD_INT 0
18424: PUSH
18425: LD_INT 0
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 0
18434: PUSH
18435: LD_INT 1
18437: NEG
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: LD_INT 0
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 1
18455: PUSH
18456: LD_INT 1
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 0
18465: PUSH
18466: LD_INT 1
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 1
18475: NEG
18476: PUSH
18477: LD_INT 0
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 1
18486: NEG
18487: PUSH
18488: LD_INT 1
18490: NEG
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 1
18498: NEG
18499: PUSH
18500: LD_INT 2
18502: NEG
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 0
18510: PUSH
18511: LD_INT 2
18513: NEG
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 1
18521: PUSH
18522: LD_INT 1
18524: NEG
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: LD_INT 0
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: LD_INT 2
18542: PUSH
18543: LD_INT 1
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 2
18552: PUSH
18553: LD_INT 2
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 1
18562: PUSH
18563: LD_INT 2
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 0
18572: PUSH
18573: LD_INT 2
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 1
18582: NEG
18583: PUSH
18584: LD_INT 1
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 2
18593: NEG
18594: PUSH
18595: LD_INT 0
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 2
18604: NEG
18605: PUSH
18606: LD_INT 1
18608: NEG
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 2
18616: NEG
18617: PUSH
18618: LD_INT 2
18620: NEG
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 1
18628: PUSH
18629: LD_INT 2
18631: NEG
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 2
18639: PUSH
18640: LD_INT 1
18642: NEG
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 3
18650: PUSH
18651: LD_INT 1
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 3
18660: PUSH
18661: LD_INT 2
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18693: LD_ADDR_VAR 0 25
18697: PUSH
18698: LD_INT 0
18700: PUSH
18701: LD_INT 0
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 0
18710: PUSH
18711: LD_INT 1
18713: NEG
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 1
18721: PUSH
18722: LD_INT 0
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 1
18731: PUSH
18732: LD_INT 1
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 0
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 1
18751: NEG
18752: PUSH
18753: LD_INT 0
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 1
18762: NEG
18763: PUSH
18764: LD_INT 1
18766: NEG
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 1
18774: NEG
18775: PUSH
18776: LD_INT 2
18778: NEG
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 0
18786: PUSH
18787: LD_INT 2
18789: NEG
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 1
18797: PUSH
18798: LD_INT 1
18800: NEG
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 2
18808: PUSH
18809: LD_INT 0
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 2
18818: PUSH
18819: LD_INT 1
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 2
18828: PUSH
18829: LD_INT 2
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 1
18838: PUSH
18839: LD_INT 2
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 0
18848: PUSH
18849: LD_INT 2
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 1
18858: NEG
18859: PUSH
18860: LD_INT 1
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 2
18869: NEG
18870: PUSH
18871: LD_INT 0
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 2
18880: NEG
18881: PUSH
18882: LD_INT 1
18884: NEG
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 2
18892: NEG
18893: PUSH
18894: LD_INT 2
18896: NEG
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 3
18904: PUSH
18905: LD_INT 1
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 3
18914: PUSH
18915: LD_INT 2
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 2
18924: PUSH
18925: LD_INT 3
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 1
18934: PUSH
18935: LD_INT 3
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18967: LD_ADDR_VAR 0 26
18971: PUSH
18972: LD_INT 0
18974: PUSH
18975: LD_INT 0
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 0
18984: PUSH
18985: LD_INT 1
18987: NEG
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 1
18995: PUSH
18996: LD_INT 0
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 1
19005: PUSH
19006: LD_INT 1
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 0
19015: PUSH
19016: LD_INT 1
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 1
19025: NEG
19026: PUSH
19027: LD_INT 0
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 1
19036: NEG
19037: PUSH
19038: LD_INT 1
19040: NEG
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 1
19048: NEG
19049: PUSH
19050: LD_INT 2
19052: NEG
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 0
19060: PUSH
19061: LD_INT 2
19063: NEG
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 1
19071: PUSH
19072: LD_INT 1
19074: NEG
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 2
19082: PUSH
19083: LD_INT 0
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 2
19092: PUSH
19093: LD_INT 1
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 2
19102: PUSH
19103: LD_INT 2
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 1
19112: PUSH
19113: LD_INT 2
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 0
19122: PUSH
19123: LD_INT 2
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 1
19132: NEG
19133: PUSH
19134: LD_INT 1
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 2
19143: NEG
19144: PUSH
19145: LD_INT 0
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 2
19154: NEG
19155: PUSH
19156: LD_INT 1
19158: NEG
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 2
19166: NEG
19167: PUSH
19168: LD_INT 2
19170: NEG
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 2
19178: PUSH
19179: LD_INT 3
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 1
19188: PUSH
19189: LD_INT 3
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 1
19198: NEG
19199: PUSH
19200: LD_INT 2
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 2
19209: NEG
19210: PUSH
19211: LD_INT 1
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19243: LD_ADDR_VAR 0 27
19247: PUSH
19248: LD_INT 0
19250: PUSH
19251: LD_INT 0
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 0
19260: PUSH
19261: LD_INT 1
19263: NEG
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 1
19271: PUSH
19272: LD_INT 0
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 1
19281: PUSH
19282: LD_INT 1
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 0
19291: PUSH
19292: LD_INT 1
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 1
19301: NEG
19302: PUSH
19303: LD_INT 0
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 1
19312: NEG
19313: PUSH
19314: LD_INT 1
19316: NEG
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 1
19324: NEG
19325: PUSH
19326: LD_INT 2
19328: NEG
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 0
19336: PUSH
19337: LD_INT 2
19339: NEG
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 1
19347: PUSH
19348: LD_INT 1
19350: NEG
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 2
19358: PUSH
19359: LD_INT 0
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 2
19368: PUSH
19369: LD_INT 1
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 2
19378: PUSH
19379: LD_INT 2
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 1
19388: PUSH
19389: LD_INT 2
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 0
19398: PUSH
19399: LD_INT 2
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 1
19408: NEG
19409: PUSH
19410: LD_INT 1
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 2
19419: NEG
19420: PUSH
19421: LD_INT 0
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 2
19430: NEG
19431: PUSH
19432: LD_INT 1
19434: NEG
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 2
19442: NEG
19443: PUSH
19444: LD_INT 2
19446: NEG
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 1
19454: NEG
19455: PUSH
19456: LD_INT 2
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 2
19465: NEG
19466: PUSH
19467: LD_INT 1
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 3
19476: NEG
19477: PUSH
19478: LD_INT 1
19480: NEG
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 3
19488: NEG
19489: PUSH
19490: LD_INT 2
19492: NEG
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19523: LD_ADDR_VAR 0 28
19527: PUSH
19528: LD_INT 0
19530: PUSH
19531: LD_INT 0
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 0
19540: PUSH
19541: LD_INT 1
19543: NEG
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 1
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 0
19571: PUSH
19572: LD_INT 1
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 1
19581: NEG
19582: PUSH
19583: LD_INT 0
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 1
19592: NEG
19593: PUSH
19594: LD_INT 1
19596: NEG
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 1
19604: NEG
19605: PUSH
19606: LD_INT 2
19608: NEG
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 0
19616: PUSH
19617: LD_INT 2
19619: NEG
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 1
19627: PUSH
19628: LD_INT 1
19630: NEG
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 2
19638: PUSH
19639: LD_INT 0
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 2
19648: PUSH
19649: LD_INT 1
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 2
19658: PUSH
19659: LD_INT 2
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 1
19668: PUSH
19669: LD_INT 2
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 0
19678: PUSH
19679: LD_INT 2
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 1
19688: NEG
19689: PUSH
19690: LD_INT 1
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 2
19699: NEG
19700: PUSH
19701: LD_INT 0
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 2
19710: NEG
19711: PUSH
19712: LD_INT 1
19714: NEG
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 2
19722: NEG
19723: PUSH
19724: LD_INT 2
19726: NEG
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 2
19734: NEG
19735: PUSH
19736: LD_INT 3
19738: NEG
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 1
19746: NEG
19747: PUSH
19748: LD_INT 3
19750: NEG
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 3
19758: NEG
19759: PUSH
19760: LD_INT 1
19762: NEG
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 3
19770: NEG
19771: PUSH
19772: LD_INT 2
19774: NEG
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19805: LD_ADDR_VAR 0 29
19809: PUSH
19810: LD_INT 0
19812: PUSH
19813: LD_INT 0
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 0
19822: PUSH
19823: LD_INT 1
19825: NEG
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 1
19833: PUSH
19834: LD_INT 0
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 1
19843: PUSH
19844: LD_INT 1
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 0
19853: PUSH
19854: LD_INT 1
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 1
19863: NEG
19864: PUSH
19865: LD_INT 0
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 1
19874: NEG
19875: PUSH
19876: LD_INT 1
19878: NEG
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 1
19886: NEG
19887: PUSH
19888: LD_INT 2
19890: NEG
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 0
19898: PUSH
19899: LD_INT 2
19901: NEG
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 1
19909: PUSH
19910: LD_INT 1
19912: NEG
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 2
19920: PUSH
19921: LD_INT 0
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 2
19930: PUSH
19931: LD_INT 1
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 1
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 0
19950: PUSH
19951: LD_INT 2
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 1
19960: NEG
19961: PUSH
19962: LD_INT 1
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 2
19971: NEG
19972: PUSH
19973: LD_INT 1
19975: NEG
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 2
19983: NEG
19984: PUSH
19985: LD_INT 2
19987: NEG
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 2
19995: NEG
19996: PUSH
19997: LD_INT 3
19999: NEG
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 2
20007: PUSH
20008: LD_INT 1
20010: NEG
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 3
20018: PUSH
20019: LD_INT 1
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 1
20028: PUSH
20029: LD_INT 3
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 1
20038: NEG
20039: PUSH
20040: LD_INT 2
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PUSH
20047: LD_INT 3
20049: NEG
20050: PUSH
20051: LD_INT 2
20053: NEG
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20084: LD_ADDR_VAR 0 30
20088: PUSH
20089: LD_INT 0
20091: PUSH
20092: LD_INT 0
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 0
20101: PUSH
20102: LD_INT 1
20104: NEG
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 1
20112: PUSH
20113: LD_INT 0
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 1
20122: PUSH
20123: LD_INT 1
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: LD_INT 1
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 1
20142: NEG
20143: PUSH
20144: LD_INT 0
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 1
20153: NEG
20154: PUSH
20155: LD_INT 1
20157: NEG
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 1
20165: NEG
20166: PUSH
20167: LD_INT 2
20169: NEG
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 0
20177: PUSH
20178: LD_INT 2
20180: NEG
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: PUSH
20189: LD_INT 1
20191: NEG
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: LD_INT 0
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: LD_INT 1
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 2
20219: PUSH
20220: LD_INT 2
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 1
20229: PUSH
20230: LD_INT 2
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 1
20239: NEG
20240: PUSH
20241: LD_INT 1
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 2
20250: NEG
20251: PUSH
20252: LD_INT 0
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 2
20261: NEG
20262: PUSH
20263: LD_INT 1
20265: NEG
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 1
20273: NEG
20274: PUSH
20275: LD_INT 3
20277: NEG
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: LD_INT 2
20288: NEG
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 3
20296: PUSH
20297: LD_INT 2
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 2
20306: PUSH
20307: LD_INT 3
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 2
20316: NEG
20317: PUSH
20318: LD_INT 1
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 3
20327: NEG
20328: PUSH
20329: LD_INT 1
20331: NEG
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20362: LD_ADDR_VAR 0 31
20366: PUSH
20367: LD_INT 0
20369: PUSH
20370: LD_INT 0
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 0
20379: PUSH
20380: LD_INT 1
20382: NEG
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 1
20390: PUSH
20391: LD_INT 0
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 1
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: LD_INT 1
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 1
20420: NEG
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 1
20431: NEG
20432: PUSH
20433: LD_INT 1
20435: NEG
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 1
20443: NEG
20444: PUSH
20445: LD_INT 2
20447: NEG
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 1
20455: PUSH
20456: LD_INT 1
20458: NEG
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 2
20466: PUSH
20467: LD_INT 0
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 2
20476: PUSH
20477: LD_INT 1
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 2
20486: PUSH
20487: LD_INT 2
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 1
20496: PUSH
20497: LD_INT 2
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 0
20506: PUSH
20507: LD_INT 2
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 1
20516: NEG
20517: PUSH
20518: LD_INT 1
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 2
20527: NEG
20528: PUSH
20529: LD_INT 1
20531: NEG
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 2
20539: NEG
20540: PUSH
20541: LD_INT 2
20543: NEG
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 2
20551: NEG
20552: PUSH
20553: LD_INT 3
20555: NEG
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 2
20563: PUSH
20564: LD_INT 1
20566: NEG
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 3
20574: PUSH
20575: LD_INT 1
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 1
20584: PUSH
20585: LD_INT 3
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 1
20594: NEG
20595: PUSH
20596: LD_INT 2
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 3
20605: NEG
20606: PUSH
20607: LD_INT 2
20609: NEG
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20640: LD_ADDR_VAR 0 32
20644: PUSH
20645: LD_INT 0
20647: PUSH
20648: LD_INT 0
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 0
20657: PUSH
20658: LD_INT 1
20660: NEG
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 1
20668: PUSH
20669: LD_INT 0
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 1
20678: PUSH
20679: LD_INT 1
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 0
20688: PUSH
20689: LD_INT 1
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: LD_INT 0
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 1
20709: NEG
20710: PUSH
20711: LD_INT 1
20713: NEG
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 1
20721: NEG
20722: PUSH
20723: LD_INT 2
20725: NEG
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 0
20733: PUSH
20734: LD_INT 2
20736: NEG
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 1
20744: PUSH
20745: LD_INT 1
20747: NEG
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 2
20755: PUSH
20756: LD_INT 1
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 2
20765: PUSH
20766: LD_INT 2
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 1
20775: PUSH
20776: LD_INT 2
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 0
20785: PUSH
20786: LD_INT 2
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 1
20795: NEG
20796: PUSH
20797: LD_INT 1
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 2
20806: NEG
20807: PUSH
20808: LD_INT 0
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 2
20817: NEG
20818: PUSH
20819: LD_INT 1
20821: NEG
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 1
20829: NEG
20830: PUSH
20831: LD_INT 3
20833: NEG
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 1
20841: PUSH
20842: LD_INT 2
20844: NEG
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 3
20852: PUSH
20853: LD_INT 2
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 2
20862: PUSH
20863: LD_INT 3
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 2
20872: NEG
20873: PUSH
20874: LD_INT 1
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 3
20883: NEG
20884: PUSH
20885: LD_INT 1
20887: NEG
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20918: LD_ADDR_VAR 0 33
20922: PUSH
20923: LD_INT 0
20925: PUSH
20926: LD_INT 0
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 0
20935: PUSH
20936: LD_INT 1
20938: NEG
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 1
20946: PUSH
20947: LD_INT 0
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 1
20956: PUSH
20957: LD_INT 1
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 0
20966: PUSH
20967: LD_INT 1
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 1
20976: NEG
20977: PUSH
20978: LD_INT 0
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 1
20987: NEG
20988: PUSH
20989: LD_INT 1
20991: NEG
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 1
20999: NEG
21000: PUSH
21001: LD_INT 2
21003: NEG
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 1
21011: PUSH
21012: LD_INT 1
21014: NEG
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 2
21022: PUSH
21023: LD_INT 0
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 2
21032: PUSH
21033: LD_INT 1
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 1
21042: PUSH
21043: LD_INT 2
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 0
21052: PUSH
21053: LD_INT 2
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 1
21062: NEG
21063: PUSH
21064: LD_INT 1
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 2
21073: NEG
21074: PUSH
21075: LD_INT 0
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 2
21084: NEG
21085: PUSH
21086: LD_INT 1
21088: NEG
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_INT 2
21096: NEG
21097: PUSH
21098: LD_INT 2
21100: NEG
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 2
21108: NEG
21109: PUSH
21110: LD_INT 3
21112: NEG
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 2
21120: PUSH
21121: LD_INT 1
21123: NEG
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 3
21131: PUSH
21132: LD_INT 1
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 1
21141: PUSH
21142: LD_INT 3
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 1
21151: NEG
21152: PUSH
21153: LD_INT 2
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 3
21162: NEG
21163: PUSH
21164: LD_INT 2
21166: NEG
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21197: LD_ADDR_VAR 0 34
21201: PUSH
21202: LD_INT 0
21204: PUSH
21205: LD_INT 0
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 0
21214: PUSH
21215: LD_INT 1
21217: NEG
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 1
21225: PUSH
21226: LD_INT 0
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 1
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 0
21245: PUSH
21246: LD_INT 1
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 1
21255: NEG
21256: PUSH
21257: LD_INT 0
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 1
21266: NEG
21267: PUSH
21268: LD_INT 1
21270: NEG
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 1
21278: NEG
21279: PUSH
21280: LD_INT 2
21282: NEG
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 0
21290: PUSH
21291: LD_INT 2
21293: NEG
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 1
21301: PUSH
21302: LD_INT 1
21304: NEG
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 2
21312: PUSH
21313: LD_INT 1
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 2
21322: PUSH
21323: LD_INT 2
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 1
21332: PUSH
21333: LD_INT 2
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 1
21342: NEG
21343: PUSH
21344: LD_INT 1
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 2
21353: NEG
21354: PUSH
21355: LD_INT 0
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 2
21364: NEG
21365: PUSH
21366: LD_INT 1
21368: NEG
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 2
21376: NEG
21377: PUSH
21378: LD_INT 2
21380: NEG
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 1
21388: NEG
21389: PUSH
21390: LD_INT 3
21392: NEG
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 1
21400: PUSH
21401: LD_INT 2
21403: NEG
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 3
21411: PUSH
21412: LD_INT 2
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 2
21421: PUSH
21422: LD_INT 3
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 2
21431: NEG
21432: PUSH
21433: LD_INT 1
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 3
21442: NEG
21443: PUSH
21444: LD_INT 1
21446: NEG
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21477: LD_ADDR_VAR 0 35
21481: PUSH
21482: LD_INT 0
21484: PUSH
21485: LD_INT 0
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 0
21494: PUSH
21495: LD_INT 1
21497: NEG
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: LD_INT 0
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 1
21515: PUSH
21516: LD_INT 1
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 0
21525: PUSH
21526: LD_INT 1
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 1
21535: NEG
21536: PUSH
21537: LD_INT 0
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 1
21546: NEG
21547: PUSH
21548: LD_INT 1
21550: NEG
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 2
21558: PUSH
21559: LD_INT 1
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 2
21568: NEG
21569: PUSH
21570: LD_INT 1
21572: NEG
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21589: LD_ADDR_VAR 0 36
21593: PUSH
21594: LD_INT 0
21596: PUSH
21597: LD_INT 0
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: LD_INT 1
21609: NEG
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 1
21617: PUSH
21618: LD_INT 0
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 1
21627: PUSH
21628: LD_INT 1
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 0
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 1
21647: NEG
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 1
21658: NEG
21659: PUSH
21660: LD_INT 1
21662: NEG
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 1
21670: NEG
21671: PUSH
21672: LD_INT 2
21674: NEG
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 1
21682: PUSH
21683: LD_INT 2
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21701: LD_ADDR_VAR 0 37
21705: PUSH
21706: LD_INT 0
21708: PUSH
21709: LD_INT 0
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 0
21718: PUSH
21719: LD_INT 1
21721: NEG
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 1
21729: PUSH
21730: LD_INT 0
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 1
21739: PUSH
21740: LD_INT 1
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 0
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 1
21759: NEG
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 1
21770: NEG
21771: PUSH
21772: LD_INT 1
21774: NEG
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 1
21782: PUSH
21783: LD_INT 1
21785: NEG
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: LD_INT 1
21793: NEG
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21813: LD_ADDR_VAR 0 38
21817: PUSH
21818: LD_INT 0
21820: PUSH
21821: LD_INT 0
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 0
21830: PUSH
21831: LD_INT 1
21833: NEG
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: LD_INT 0
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 1
21851: PUSH
21852: LD_INT 1
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 0
21861: PUSH
21862: LD_INT 1
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 1
21871: NEG
21872: PUSH
21873: LD_INT 0
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 1
21882: NEG
21883: PUSH
21884: LD_INT 1
21886: NEG
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 2
21894: PUSH
21895: LD_INT 1
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 2
21904: NEG
21905: PUSH
21906: LD_INT 1
21908: NEG
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21925: LD_ADDR_VAR 0 39
21929: PUSH
21930: LD_INT 0
21932: PUSH
21933: LD_INT 0
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 0
21942: PUSH
21943: LD_INT 1
21945: NEG
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: LD_INT 0
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 1
21963: PUSH
21964: LD_INT 1
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 0
21973: PUSH
21974: LD_INT 1
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 1
21983: NEG
21984: PUSH
21985: LD_INT 0
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 1
21994: NEG
21995: PUSH
21996: LD_INT 1
21998: NEG
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 1
22006: NEG
22007: PUSH
22008: LD_INT 2
22010: NEG
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 1
22018: PUSH
22019: LD_INT 2
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22037: LD_ADDR_VAR 0 40
22041: PUSH
22042: LD_INT 0
22044: PUSH
22045: LD_INT 0
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 0
22054: PUSH
22055: LD_INT 1
22057: NEG
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 1
22065: PUSH
22066: LD_INT 0
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 1
22075: PUSH
22076: LD_INT 1
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 0
22085: PUSH
22086: LD_INT 1
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 1
22095: NEG
22096: PUSH
22097: LD_INT 0
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: NEG
22107: PUSH
22108: LD_INT 1
22110: NEG
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 1
22118: PUSH
22119: LD_INT 1
22121: NEG
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 1
22129: NEG
22130: PUSH
22131: LD_INT 1
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22149: LD_ADDR_VAR 0 41
22153: PUSH
22154: LD_INT 0
22156: PUSH
22157: LD_INT 0
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 0
22166: PUSH
22167: LD_INT 1
22169: NEG
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 1
22177: PUSH
22178: LD_INT 0
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 1
22187: PUSH
22188: LD_INT 1
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 0
22197: PUSH
22198: LD_INT 1
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 1
22207: NEG
22208: PUSH
22209: LD_INT 0
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 1
22218: NEG
22219: PUSH
22220: LD_INT 1
22222: NEG
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 1
22230: NEG
22231: PUSH
22232: LD_INT 2
22234: NEG
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 1
22242: PUSH
22243: LD_INT 1
22245: NEG
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 2
22253: PUSH
22254: LD_INT 0
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 2
22263: PUSH
22264: LD_INT 1
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 2
22273: PUSH
22274: LD_INT 2
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 1
22283: PUSH
22284: LD_INT 2
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 1
22293: NEG
22294: PUSH
22295: LD_INT 1
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 2
22304: NEG
22305: PUSH
22306: LD_INT 0
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 2
22315: NEG
22316: PUSH
22317: LD_INT 1
22319: NEG
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 2
22327: NEG
22328: PUSH
22329: LD_INT 2
22331: NEG
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 2
22339: NEG
22340: PUSH
22341: LD_INT 3
22343: NEG
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 2
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 3
22362: PUSH
22363: LD_INT 0
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 3
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 3
22382: PUSH
22383: LD_INT 2
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 3
22392: PUSH
22393: LD_INT 3
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 2
22402: PUSH
22403: LD_INT 3
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 2
22412: NEG
22413: PUSH
22414: LD_INT 1
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 3
22423: NEG
22424: PUSH
22425: LD_INT 0
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 3
22434: NEG
22435: PUSH
22436: LD_INT 1
22438: NEG
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 3
22446: NEG
22447: PUSH
22448: LD_INT 2
22450: NEG
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 3
22458: NEG
22459: PUSH
22460: LD_INT 3
22462: NEG
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22499: LD_ADDR_VAR 0 42
22503: PUSH
22504: LD_INT 0
22506: PUSH
22507: LD_INT 0
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 0
22516: PUSH
22517: LD_INT 1
22519: NEG
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 1
22527: PUSH
22528: LD_INT 0
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 1
22537: PUSH
22538: LD_INT 1
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 0
22547: PUSH
22548: LD_INT 1
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 1
22557: NEG
22558: PUSH
22559: LD_INT 0
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 1
22568: NEG
22569: PUSH
22570: LD_INT 1
22572: NEG
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 1
22580: NEG
22581: PUSH
22582: LD_INT 2
22584: NEG
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 0
22592: PUSH
22593: LD_INT 2
22595: NEG
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 1
22603: PUSH
22604: LD_INT 1
22606: NEG
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 2
22614: PUSH
22615: LD_INT 1
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 2
22624: PUSH
22625: LD_INT 2
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: LD_INT 1
22634: PUSH
22635: LD_INT 2
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 0
22644: PUSH
22645: LD_INT 2
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 1
22654: NEG
22655: PUSH
22656: LD_INT 1
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 2
22665: NEG
22666: PUSH
22667: LD_INT 1
22669: NEG
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 2
22677: NEG
22678: PUSH
22679: LD_INT 2
22681: NEG
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 2
22689: NEG
22690: PUSH
22691: LD_INT 3
22693: NEG
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 1
22701: NEG
22702: PUSH
22703: LD_INT 3
22705: NEG
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 0
22713: PUSH
22714: LD_INT 3
22716: NEG
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 1
22724: PUSH
22725: LD_INT 2
22727: NEG
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: LD_INT 3
22735: PUSH
22736: LD_INT 2
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 3
22745: PUSH
22746: LD_INT 3
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 2
22755: PUSH
22756: LD_INT 3
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 1
22765: PUSH
22766: LD_INT 3
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 0
22775: PUSH
22776: LD_INT 3
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 1
22785: NEG
22786: PUSH
22787: LD_INT 2
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 3
22796: NEG
22797: PUSH
22798: LD_INT 2
22800: NEG
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 3
22808: NEG
22809: PUSH
22810: LD_INT 3
22812: NEG
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22849: LD_ADDR_VAR 0 43
22853: PUSH
22854: LD_INT 0
22856: PUSH
22857: LD_INT 0
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 0
22866: PUSH
22867: LD_INT 1
22869: NEG
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 1
22877: PUSH
22878: LD_INT 0
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 1
22887: PUSH
22888: LD_INT 1
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 0
22897: PUSH
22898: LD_INT 1
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 1
22907: NEG
22908: PUSH
22909: LD_INT 0
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 1
22918: NEG
22919: PUSH
22920: LD_INT 1
22922: NEG
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 1
22930: NEG
22931: PUSH
22932: LD_INT 2
22934: NEG
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 0
22942: PUSH
22943: LD_INT 2
22945: NEG
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 1
22953: PUSH
22954: LD_INT 1
22956: NEG
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 2
22964: PUSH
22965: LD_INT 0
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 2
22974: PUSH
22975: LD_INT 1
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 1
22984: PUSH
22985: LD_INT 2
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 0
22994: PUSH
22995: LD_INT 2
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 1
23004: NEG
23005: PUSH
23006: LD_INT 1
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 2
23015: NEG
23016: PUSH
23017: LD_INT 0
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 2
23026: NEG
23027: PUSH
23028: LD_INT 1
23030: NEG
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 1
23038: NEG
23039: PUSH
23040: LD_INT 3
23042: NEG
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 0
23050: PUSH
23051: LD_INT 3
23053: NEG
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: LD_INT 2
23064: NEG
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 2
23072: PUSH
23073: LD_INT 1
23075: NEG
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 3
23083: PUSH
23084: LD_INT 0
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 3
23093: PUSH
23094: LD_INT 1
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: LD_INT 3
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 0
23113: PUSH
23114: LD_INT 3
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 1
23123: NEG
23124: PUSH
23125: LD_INT 2
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 2
23134: NEG
23135: PUSH
23136: LD_INT 1
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 3
23145: NEG
23146: PUSH
23147: LD_INT 0
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 3
23156: NEG
23157: PUSH
23158: LD_INT 1
23160: NEG
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23197: LD_ADDR_VAR 0 44
23201: PUSH
23202: LD_INT 0
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 0
23214: PUSH
23215: LD_INT 1
23217: NEG
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 1
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 0
23245: PUSH
23246: LD_INT 1
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 1
23255: NEG
23256: PUSH
23257: LD_INT 0
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 1
23266: NEG
23267: PUSH
23268: LD_INT 1
23270: NEG
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 1
23278: NEG
23279: PUSH
23280: LD_INT 2
23282: NEG
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 1
23290: PUSH
23291: LD_INT 1
23293: NEG
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 2
23301: PUSH
23302: LD_INT 0
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 2
23311: PUSH
23312: LD_INT 1
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 2
23321: PUSH
23322: LD_INT 2
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 1
23331: PUSH
23332: LD_INT 2
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 1
23341: NEG
23342: PUSH
23343: LD_INT 1
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 2
23352: NEG
23353: PUSH
23354: LD_INT 0
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: LD_INT 2
23363: NEG
23364: PUSH
23365: LD_INT 1
23367: NEG
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: LD_INT 2
23375: NEG
23376: PUSH
23377: LD_INT 2
23379: NEG
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 2
23387: NEG
23388: PUSH
23389: LD_INT 3
23391: NEG
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 2
23399: PUSH
23400: LD_INT 1
23402: NEG
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 3
23410: PUSH
23411: LD_INT 0
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 3
23420: PUSH
23421: LD_INT 1
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 3
23430: PUSH
23431: LD_INT 2
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 3
23440: PUSH
23441: LD_INT 3
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 2
23450: PUSH
23451: LD_INT 3
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 2
23460: NEG
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 3
23471: NEG
23472: PUSH
23473: LD_INT 0
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 3
23482: NEG
23483: PUSH
23484: LD_INT 1
23486: NEG
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 3
23494: NEG
23495: PUSH
23496: LD_INT 2
23498: NEG
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 3
23506: NEG
23507: PUSH
23508: LD_INT 3
23510: NEG
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23547: LD_ADDR_VAR 0 45
23551: PUSH
23552: LD_INT 0
23554: PUSH
23555: LD_INT 0
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 0
23564: PUSH
23565: LD_INT 1
23567: NEG
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 1
23575: PUSH
23576: LD_INT 0
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 1
23585: PUSH
23586: LD_INT 1
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 0
23595: PUSH
23596: LD_INT 1
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 1
23605: NEG
23606: PUSH
23607: LD_INT 0
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 1
23616: NEG
23617: PUSH
23618: LD_INT 1
23620: NEG
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 1
23628: NEG
23629: PUSH
23630: LD_INT 2
23632: NEG
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 0
23640: PUSH
23641: LD_INT 2
23643: NEG
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 1
23651: PUSH
23652: LD_INT 1
23654: NEG
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 2
23662: PUSH
23663: LD_INT 1
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 2
23672: PUSH
23673: LD_INT 2
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 1
23682: PUSH
23683: LD_INT 2
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 0
23692: PUSH
23693: LD_INT 2
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: NEG
23703: PUSH
23704: LD_INT 1
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 2
23713: NEG
23714: PUSH
23715: LD_INT 1
23717: NEG
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 2
23725: NEG
23726: PUSH
23727: LD_INT 2
23729: NEG
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 2
23737: NEG
23738: PUSH
23739: LD_INT 3
23741: NEG
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: NEG
23750: PUSH
23751: LD_INT 3
23753: NEG
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: LD_INT 3
23764: NEG
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 1
23772: PUSH
23773: LD_INT 2
23775: NEG
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 3
23783: PUSH
23784: LD_INT 2
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 3
23793: PUSH
23794: LD_INT 3
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 2
23803: PUSH
23804: LD_INT 3
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 1
23813: PUSH
23814: LD_INT 3
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: LD_INT 3
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 1
23833: NEG
23834: PUSH
23835: LD_INT 2
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 3
23844: NEG
23845: PUSH
23846: LD_INT 2
23848: NEG
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 3
23856: NEG
23857: PUSH
23858: LD_INT 3
23860: NEG
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23897: LD_ADDR_VAR 0 46
23901: PUSH
23902: LD_INT 0
23904: PUSH
23905: LD_INT 0
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: LD_INT 1
23917: NEG
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 1
23925: PUSH
23926: LD_INT 0
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 1
23935: PUSH
23936: LD_INT 1
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 0
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 1
23955: NEG
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 1
23966: NEG
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 1
23978: NEG
23979: PUSH
23980: LD_INT 2
23982: NEG
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 0
23990: PUSH
23991: LD_INT 2
23993: NEG
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: LD_INT 1
24001: PUSH
24002: LD_INT 1
24004: NEG
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: LD_INT 0
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 2
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 1
24032: PUSH
24033: LD_INT 2
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 0
24042: PUSH
24043: LD_INT 2
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 1
24052: NEG
24053: PUSH
24054: LD_INT 1
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 2
24063: NEG
24064: PUSH
24065: LD_INT 0
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 2
24074: NEG
24075: PUSH
24076: LD_INT 1
24078: NEG
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 1
24086: NEG
24087: PUSH
24088: LD_INT 3
24090: NEG
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 0
24098: PUSH
24099: LD_INT 3
24101: NEG
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 1
24109: PUSH
24110: LD_INT 2
24112: NEG
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 2
24120: PUSH
24121: LD_INT 1
24123: NEG
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: LD_INT 0
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 3
24141: PUSH
24142: LD_INT 1
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: LD_INT 3
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 0
24161: PUSH
24162: LD_INT 3
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 1
24171: NEG
24172: PUSH
24173: LD_INT 2
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 2
24182: NEG
24183: PUSH
24184: LD_INT 1
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 3
24193: NEG
24194: PUSH
24195: LD_INT 0
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 3
24204: NEG
24205: PUSH
24206: LD_INT 1
24208: NEG
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24245: LD_ADDR_VAR 0 47
24249: PUSH
24250: LD_INT 0
24252: PUSH
24253: LD_INT 0
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 0
24262: PUSH
24263: LD_INT 1
24265: NEG
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: LD_INT 0
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 1
24283: PUSH
24284: LD_INT 1
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 0
24293: PUSH
24294: LD_INT 1
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 1
24303: NEG
24304: PUSH
24305: LD_INT 0
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 1
24314: NEG
24315: PUSH
24316: LD_INT 1
24318: NEG
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 1
24326: NEG
24327: PUSH
24328: LD_INT 2
24330: NEG
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 0
24338: PUSH
24339: LD_INT 2
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 1
24349: PUSH
24350: LD_INT 1
24352: NEG
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 2
24360: NEG
24361: PUSH
24362: LD_INT 1
24364: NEG
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 2
24372: NEG
24373: PUSH
24374: LD_INT 2
24376: NEG
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24396: LD_ADDR_VAR 0 48
24400: PUSH
24401: LD_INT 0
24403: PUSH
24404: LD_INT 0
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 0
24413: PUSH
24414: LD_INT 1
24416: NEG
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: LD_INT 0
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 1
24434: PUSH
24435: LD_INT 1
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 0
24444: PUSH
24445: LD_INT 1
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 1
24454: NEG
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: LD_INT 1
24469: NEG
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 1
24477: NEG
24478: PUSH
24479: LD_INT 2
24481: NEG
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 0
24489: PUSH
24490: LD_INT 2
24492: NEG
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 1
24500: PUSH
24501: LD_INT 1
24503: NEG
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 2
24511: PUSH
24512: LD_INT 0
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 2
24521: PUSH
24522: LD_INT 1
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24543: LD_ADDR_VAR 0 49
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: LD_INT 1
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 0
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 1
24601: NEG
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 1
24612: NEG
24613: PUSH
24614: LD_INT 1
24616: NEG
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 1
24624: PUSH
24625: LD_INT 1
24627: NEG
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 2
24635: PUSH
24636: LD_INT 0
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 2
24645: PUSH
24646: LD_INT 1
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 2
24655: PUSH
24656: LD_INT 2
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 1
24665: PUSH
24666: LD_INT 2
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24687: LD_ADDR_VAR 0 50
24691: PUSH
24692: LD_INT 0
24694: PUSH
24695: LD_INT 0
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 0
24704: PUSH
24705: LD_INT 1
24707: NEG
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: LD_INT 0
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 1
24725: PUSH
24726: LD_INT 1
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: LD_INT 1
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 1
24745: NEG
24746: PUSH
24747: LD_INT 0
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 1
24756: NEG
24757: PUSH
24758: LD_INT 1
24760: NEG
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 2
24768: PUSH
24769: LD_INT 1
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 2
24778: PUSH
24779: LD_INT 2
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 1
24788: PUSH
24789: LD_INT 2
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 0
24798: PUSH
24799: LD_INT 2
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 1
24808: NEG
24809: PUSH
24810: LD_INT 1
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24831: LD_ADDR_VAR 0 51
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: LD_INT 0
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 0
24848: PUSH
24849: LD_INT 1
24851: NEG
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 1
24859: PUSH
24860: LD_INT 0
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 1
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: LD_INT 1
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 1
24889: NEG
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 1
24900: NEG
24901: PUSH
24902: LD_INT 1
24904: NEG
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 1
24912: PUSH
24913: LD_INT 2
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: LD_INT 2
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 1
24932: NEG
24933: PUSH
24934: LD_INT 1
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 2
24943: NEG
24944: PUSH
24945: LD_INT 0
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 2
24954: NEG
24955: PUSH
24956: LD_INT 1
24958: NEG
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24978: LD_ADDR_VAR 0 52
24982: PUSH
24983: LD_INT 0
24985: PUSH
24986: LD_INT 0
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: LD_INT 1
24998: NEG
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: LD_INT 0
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: LD_INT 1
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 0
25026: PUSH
25027: LD_INT 1
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 1
25036: NEG
25037: PUSH
25038: LD_INT 0
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 1
25047: NEG
25048: PUSH
25049: LD_INT 1
25051: NEG
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 1
25059: NEG
25060: PUSH
25061: LD_INT 2
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 1
25071: NEG
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 2
25082: NEG
25083: PUSH
25084: LD_INT 0
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 2
25093: NEG
25094: PUSH
25095: LD_INT 1
25097: NEG
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 2
25105: NEG
25106: PUSH
25107: LD_INT 2
25109: NEG
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25129: LD_ADDR_VAR 0 53
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: LD_INT 0
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 0
25146: PUSH
25147: LD_INT 1
25149: NEG
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: LD_INT 0
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 1
25167: PUSH
25168: LD_INT 1
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 0
25177: PUSH
25178: LD_INT 1
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: NEG
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: NEG
25199: PUSH
25200: LD_INT 1
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: NEG
25211: PUSH
25212: LD_INT 2
25214: NEG
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: LD_INT 2
25225: NEG
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: LD_INT 1
25236: NEG
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 2
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 2
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 2
25264: PUSH
25265: LD_INT 2
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 1
25274: PUSH
25275: LD_INT 2
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 0
25284: PUSH
25285: LD_INT 2
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 1
25294: NEG
25295: PUSH
25296: LD_INT 1
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 2
25305: NEG
25306: PUSH
25307: LD_INT 0
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 2
25316: NEG
25317: PUSH
25318: LD_INT 1
25320: NEG
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 2
25328: NEG
25329: PUSH
25330: LD_INT 2
25332: NEG
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25359: LD_ADDR_VAR 0 54
25363: PUSH
25364: LD_INT 0
25366: PUSH
25367: LD_INT 0
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 0
25376: PUSH
25377: LD_INT 1
25379: NEG
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 1
25397: PUSH
25398: LD_INT 1
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: LD_INT 1
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 1
25417: NEG
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 1
25428: NEG
25429: PUSH
25430: LD_INT 1
25432: NEG
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 1
25440: NEG
25441: PUSH
25442: LD_INT 2
25444: NEG
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 0
25452: PUSH
25453: LD_INT 2
25455: NEG
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: LD_INT 1
25466: NEG
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 2
25474: PUSH
25475: LD_INT 0
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 2
25484: PUSH
25485: LD_INT 1
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 2
25494: PUSH
25495: LD_INT 2
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 1
25504: PUSH
25505: LD_INT 2
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: LD_INT 2
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 1
25524: NEG
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 2
25535: NEG
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 2
25546: NEG
25547: PUSH
25548: LD_INT 1
25550: NEG
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 2
25558: NEG
25559: PUSH
25560: LD_INT 2
25562: NEG
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25589: LD_ADDR_VAR 0 55
25593: PUSH
25594: LD_INT 0
25596: PUSH
25597: LD_INT 0
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 0
25606: PUSH
25607: LD_INT 1
25609: NEG
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 1
25617: PUSH
25618: LD_INT 0
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 1
25627: PUSH
25628: LD_INT 1
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 0
25637: PUSH
25638: LD_INT 1
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 1
25647: NEG
25648: PUSH
25649: LD_INT 0
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 1
25658: NEG
25659: PUSH
25660: LD_INT 1
25662: NEG
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 1
25670: NEG
25671: PUSH
25672: LD_INT 2
25674: NEG
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 0
25682: PUSH
25683: LD_INT 2
25685: NEG
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: LD_INT 1
25696: NEG
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 2
25704: PUSH
25705: LD_INT 0
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 2
25714: PUSH
25715: LD_INT 1
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 2
25724: PUSH
25725: LD_INT 2
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 1
25734: PUSH
25735: LD_INT 2
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 0
25744: PUSH
25745: LD_INT 2
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: NEG
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 2
25765: NEG
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 2
25776: NEG
25777: PUSH
25778: LD_INT 1
25780: NEG
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 2
25788: NEG
25789: PUSH
25790: LD_INT 2
25792: NEG
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25819: LD_ADDR_VAR 0 56
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: LD_INT 0
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 0
25836: PUSH
25837: LD_INT 1
25839: NEG
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: LD_INT 0
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 1
25857: PUSH
25858: LD_INT 1
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: LD_INT 1
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 1
25877: NEG
25878: PUSH
25879: LD_INT 0
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 1
25888: NEG
25889: PUSH
25890: LD_INT 1
25892: NEG
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 1
25900: NEG
25901: PUSH
25902: LD_INT 2
25904: NEG
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 0
25912: PUSH
25913: LD_INT 2
25915: NEG
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 1
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 2
25934: PUSH
25935: LD_INT 0
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 2
25944: PUSH
25945: LD_INT 1
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 2
25954: PUSH
25955: LD_INT 2
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 1
25964: PUSH
25965: LD_INT 2
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 0
25974: PUSH
25975: LD_INT 2
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 1
25984: NEG
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 2
25995: NEG
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 2
26006: NEG
26007: PUSH
26008: LD_INT 1
26010: NEG
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 2
26018: NEG
26019: PUSH
26020: LD_INT 2
26022: NEG
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26049: LD_ADDR_VAR 0 57
26053: PUSH
26054: LD_INT 0
26056: PUSH
26057: LD_INT 0
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 0
26066: PUSH
26067: LD_INT 1
26069: NEG
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: LD_INT 0
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 1
26087: PUSH
26088: LD_INT 1
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 0
26097: PUSH
26098: LD_INT 1
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 1
26107: NEG
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 1
26118: NEG
26119: PUSH
26120: LD_INT 1
26122: NEG
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 1
26130: NEG
26131: PUSH
26132: LD_INT 2
26134: NEG
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 0
26142: PUSH
26143: LD_INT 2
26145: NEG
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 1
26153: PUSH
26154: LD_INT 1
26156: NEG
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 2
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 2
26174: PUSH
26175: LD_INT 1
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 2
26184: PUSH
26185: LD_INT 2
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 1
26194: PUSH
26195: LD_INT 2
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 0
26204: PUSH
26205: LD_INT 2
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 1
26214: NEG
26215: PUSH
26216: LD_INT 1
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 2
26225: NEG
26226: PUSH
26227: LD_INT 0
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 2
26236: NEG
26237: PUSH
26238: LD_INT 1
26240: NEG
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 2
26248: NEG
26249: PUSH
26250: LD_INT 2
26252: NEG
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26279: LD_ADDR_VAR 0 58
26283: PUSH
26284: LD_INT 0
26286: PUSH
26287: LD_INT 0
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 0
26296: PUSH
26297: LD_INT 1
26299: NEG
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: LD_INT 0
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 1
26317: PUSH
26318: LD_INT 1
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 0
26327: PUSH
26328: LD_INT 1
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 1
26337: NEG
26338: PUSH
26339: LD_INT 0
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 1
26348: NEG
26349: PUSH
26350: LD_INT 1
26352: NEG
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: NEG
26361: PUSH
26362: LD_INT 2
26364: NEG
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 0
26372: PUSH
26373: LD_INT 2
26375: NEG
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 1
26383: PUSH
26384: LD_INT 1
26386: NEG
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 2
26394: PUSH
26395: LD_INT 0
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 2
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 2
26414: PUSH
26415: LD_INT 2
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 1
26424: PUSH
26425: LD_INT 2
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 0
26434: PUSH
26435: LD_INT 2
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 1
26444: NEG
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 2
26455: NEG
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 2
26466: NEG
26467: PUSH
26468: LD_INT 1
26470: NEG
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 2
26478: NEG
26479: PUSH
26480: LD_INT 2
26482: NEG
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26509: LD_ADDR_VAR 0 59
26513: PUSH
26514: LD_INT 0
26516: PUSH
26517: LD_INT 0
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: LD_INT 1
26529: NEG
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 1
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 1
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: LD_INT 1
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 1
26567: NEG
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 1
26578: NEG
26579: PUSH
26580: LD_INT 1
26582: NEG
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26597: LD_ADDR_VAR 0 60
26601: PUSH
26602: LD_INT 0
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: LD_INT 1
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: LD_INT 1
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 1
26655: NEG
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: NEG
26667: PUSH
26668: LD_INT 1
26670: NEG
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26685: LD_ADDR_VAR 0 61
26689: PUSH
26690: LD_INT 0
26692: PUSH
26693: LD_INT 0
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: LD_INT 1
26705: NEG
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: LD_INT 0
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 1
26723: PUSH
26724: LD_INT 1
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 0
26733: PUSH
26734: LD_INT 1
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 1
26743: NEG
26744: PUSH
26745: LD_INT 0
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 1
26754: NEG
26755: PUSH
26756: LD_INT 1
26758: NEG
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26773: LD_ADDR_VAR 0 62
26777: PUSH
26778: LD_INT 0
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: LD_INT 1
26793: NEG
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: LD_INT 1
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 1
26831: NEG
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 1
26842: NEG
26843: PUSH
26844: LD_INT 1
26846: NEG
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26861: LD_ADDR_VAR 0 63
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 0
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 1
26889: PUSH
26890: LD_INT 0
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: LD_INT 1
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 0
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 1
26919: NEG
26920: PUSH
26921: LD_INT 0
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: LD_INT 1
26934: NEG
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26949: LD_ADDR_VAR 0 64
26953: PUSH
26954: LD_INT 0
26956: PUSH
26957: LD_INT 0
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 0
26966: PUSH
26967: LD_INT 1
26969: NEG
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 1
26987: PUSH
26988: LD_INT 1
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 0
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 1
27007: NEG
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 1
27018: NEG
27019: PUSH
27020: LD_INT 1
27022: NEG
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: ST_TO_ADDR
// end ; 1 :
27037: GO 32934
27039: LD_INT 1
27041: DOUBLE
27042: EQUAL
27043: IFTRUE 27047
27045: GO 29670
27047: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27048: LD_ADDR_VAR 0 11
27052: PUSH
27053: LD_INT 1
27055: NEG
27056: PUSH
27057: LD_INT 3
27059: NEG
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: LD_INT 3
27070: NEG
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: LD_INT 2
27081: NEG
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: LIST
27091: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27092: LD_ADDR_VAR 0 12
27096: PUSH
27097: LD_INT 2
27099: PUSH
27100: LD_INT 1
27102: NEG
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 3
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 3
27120: PUSH
27121: LD_INT 1
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: LIST
27132: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27133: LD_ADDR_VAR 0 13
27137: PUSH
27138: LD_INT 3
27140: PUSH
27141: LD_INT 2
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 3
27150: PUSH
27151: LD_INT 3
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 2
27160: PUSH
27161: LD_INT 3
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: LIST
27172: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27173: LD_ADDR_VAR 0 14
27177: PUSH
27178: LD_INT 1
27180: PUSH
27181: LD_INT 3
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 0
27190: PUSH
27191: LD_INT 3
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 1
27200: NEG
27201: PUSH
27202: LD_INT 2
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: LIST
27213: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27214: LD_ADDR_VAR 0 15
27218: PUSH
27219: LD_INT 2
27221: NEG
27222: PUSH
27223: LD_INT 1
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 3
27232: NEG
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 3
27243: NEG
27244: PUSH
27245: LD_INT 1
27247: NEG
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: LIST
27257: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27258: LD_ADDR_VAR 0 16
27262: PUSH
27263: LD_INT 2
27265: NEG
27266: PUSH
27267: LD_INT 3
27269: NEG
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 3
27277: NEG
27278: PUSH
27279: LD_INT 2
27281: NEG
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 3
27289: NEG
27290: PUSH
27291: LD_INT 3
27293: NEG
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: LIST
27303: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27304: LD_ADDR_VAR 0 17
27308: PUSH
27309: LD_INT 1
27311: NEG
27312: PUSH
27313: LD_INT 3
27315: NEG
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 0
27323: PUSH
27324: LD_INT 3
27326: NEG
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 1
27334: PUSH
27335: LD_INT 2
27337: NEG
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: LIST
27347: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27348: LD_ADDR_VAR 0 18
27352: PUSH
27353: LD_INT 2
27355: PUSH
27356: LD_INT 1
27358: NEG
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 3
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 3
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: LIST
27388: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27389: LD_ADDR_VAR 0 19
27393: PUSH
27394: LD_INT 3
27396: PUSH
27397: LD_INT 2
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 3
27406: PUSH
27407: LD_INT 3
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 2
27416: PUSH
27417: LD_INT 3
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: LIST
27428: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27429: LD_ADDR_VAR 0 20
27433: PUSH
27434: LD_INT 1
27436: PUSH
27437: LD_INT 3
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: LD_INT 3
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: NEG
27457: PUSH
27458: LD_INT 2
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: LIST
27469: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27470: LD_ADDR_VAR 0 21
27474: PUSH
27475: LD_INT 2
27477: NEG
27478: PUSH
27479: LD_INT 1
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 3
27488: NEG
27489: PUSH
27490: LD_INT 0
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 3
27499: NEG
27500: PUSH
27501: LD_INT 1
27503: NEG
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: LIST
27513: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27514: LD_ADDR_VAR 0 22
27518: PUSH
27519: LD_INT 2
27521: NEG
27522: PUSH
27523: LD_INT 3
27525: NEG
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 3
27533: NEG
27534: PUSH
27535: LD_INT 2
27537: NEG
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 3
27545: NEG
27546: PUSH
27547: LD_INT 3
27549: NEG
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: LIST
27559: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27560: LD_ADDR_VAR 0 23
27564: PUSH
27565: LD_INT 0
27567: PUSH
27568: LD_INT 3
27570: NEG
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 1
27578: NEG
27579: PUSH
27580: LD_INT 4
27582: NEG
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 1
27590: PUSH
27591: LD_INT 3
27593: NEG
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: LIST
27603: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27604: LD_ADDR_VAR 0 24
27608: PUSH
27609: LD_INT 3
27611: PUSH
27612: LD_INT 0
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 3
27621: PUSH
27622: LD_INT 1
27624: NEG
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 4
27632: PUSH
27633: LD_INT 1
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: LIST
27644: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27645: LD_ADDR_VAR 0 25
27649: PUSH
27650: LD_INT 3
27652: PUSH
27653: LD_INT 3
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 4
27662: PUSH
27663: LD_INT 3
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 3
27672: PUSH
27673: LD_INT 4
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: LIST
27684: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27685: LD_ADDR_VAR 0 26
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: LD_INT 3
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: LD_INT 4
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 1
27712: NEG
27713: PUSH
27714: LD_INT 3
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: LIST
27725: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27726: LD_ADDR_VAR 0 27
27730: PUSH
27731: LD_INT 3
27733: NEG
27734: PUSH
27735: LD_INT 0
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 3
27744: NEG
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 4
27755: NEG
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: LIST
27769: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27770: LD_ADDR_VAR 0 28
27774: PUSH
27775: LD_INT 3
27777: NEG
27778: PUSH
27779: LD_INT 3
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 3
27789: NEG
27790: PUSH
27791: LD_INT 4
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 4
27801: NEG
27802: PUSH
27803: LD_INT 3
27805: NEG
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: LIST
27815: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27816: LD_ADDR_VAR 0 29
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PUSH
27825: LD_INT 3
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: LD_INT 3
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: LD_INT 2
27849: NEG
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: LD_INT 4
27861: NEG
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 0
27869: PUSH
27870: LD_INT 4
27872: NEG
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: LD_INT 3
27883: NEG
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 1
27891: NEG
27892: PUSH
27893: LD_INT 5
27895: NEG
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 0
27903: PUSH
27904: LD_INT 5
27906: NEG
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 1
27914: PUSH
27915: LD_INT 4
27917: NEG
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 1
27925: NEG
27926: PUSH
27927: LD_INT 6
27929: NEG
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 0
27937: PUSH
27938: LD_INT 6
27940: NEG
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 1
27948: PUSH
27949: LD_INT 5
27951: NEG
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27971: LD_ADDR_VAR 0 30
27975: PUSH
27976: LD_INT 2
27978: PUSH
27979: LD_INT 1
27981: NEG
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 3
27989: PUSH
27990: LD_INT 0
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 3
27999: PUSH
28000: LD_INT 1
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 3
28009: PUSH
28010: LD_INT 1
28012: NEG
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 4
28020: PUSH
28021: LD_INT 0
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 4
28030: PUSH
28031: LD_INT 1
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 4
28040: PUSH
28041: LD_INT 1
28043: NEG
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 5
28051: PUSH
28052: LD_INT 0
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 5
28061: PUSH
28062: LD_INT 1
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 5
28071: PUSH
28072: LD_INT 1
28074: NEG
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 6
28082: PUSH
28083: LD_INT 0
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 6
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28114: LD_ADDR_VAR 0 31
28118: PUSH
28119: LD_INT 3
28121: PUSH
28122: LD_INT 2
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 3
28131: PUSH
28132: LD_INT 3
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 2
28141: PUSH
28142: LD_INT 3
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 4
28151: PUSH
28152: LD_INT 3
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 4
28161: PUSH
28162: LD_INT 4
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 3
28171: PUSH
28172: LD_INT 4
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 5
28181: PUSH
28182: LD_INT 4
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 5
28191: PUSH
28192: LD_INT 5
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 4
28201: PUSH
28202: LD_INT 5
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 6
28211: PUSH
28212: LD_INT 5
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 6
28221: PUSH
28222: LD_INT 6
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 5
28231: PUSH
28232: LD_INT 6
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28253: LD_ADDR_VAR 0 32
28257: PUSH
28258: LD_INT 1
28260: PUSH
28261: LD_INT 3
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 0
28270: PUSH
28271: LD_INT 3
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 1
28280: NEG
28281: PUSH
28282: LD_INT 2
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 1
28291: PUSH
28292: LD_INT 4
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: LD_INT 4
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: LD_INT 3
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: LD_INT 5
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: LD_INT 5
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 1
28342: NEG
28343: PUSH
28344: LD_INT 4
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 1
28353: PUSH
28354: LD_INT 6
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 0
28363: PUSH
28364: LD_INT 6
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 1
28373: NEG
28374: PUSH
28375: LD_INT 5
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28396: LD_ADDR_VAR 0 33
28400: PUSH
28401: LD_INT 2
28403: NEG
28404: PUSH
28405: LD_INT 1
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 3
28414: NEG
28415: PUSH
28416: LD_INT 0
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 3
28425: NEG
28426: PUSH
28427: LD_INT 1
28429: NEG
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 3
28437: NEG
28438: PUSH
28439: LD_INT 1
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 4
28448: NEG
28449: PUSH
28450: LD_INT 0
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 4
28459: NEG
28460: PUSH
28461: LD_INT 1
28463: NEG
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 4
28471: NEG
28472: PUSH
28473: LD_INT 1
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 5
28482: NEG
28483: PUSH
28484: LD_INT 0
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 5
28493: NEG
28494: PUSH
28495: LD_INT 1
28497: NEG
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 5
28505: NEG
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 6
28516: NEG
28517: PUSH
28518: LD_INT 0
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 6
28527: NEG
28528: PUSH
28529: LD_INT 1
28531: NEG
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28551: LD_ADDR_VAR 0 34
28555: PUSH
28556: LD_INT 2
28558: NEG
28559: PUSH
28560: LD_INT 3
28562: NEG
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 3
28570: NEG
28571: PUSH
28572: LD_INT 2
28574: NEG
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 3
28582: NEG
28583: PUSH
28584: LD_INT 3
28586: NEG
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 3
28594: NEG
28595: PUSH
28596: LD_INT 4
28598: NEG
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 4
28606: NEG
28607: PUSH
28608: LD_INT 3
28610: NEG
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 4
28618: NEG
28619: PUSH
28620: LD_INT 4
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 4
28630: NEG
28631: PUSH
28632: LD_INT 5
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 5
28642: NEG
28643: PUSH
28644: LD_INT 4
28646: NEG
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 5
28654: NEG
28655: PUSH
28656: LD_INT 5
28658: NEG
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 5
28666: NEG
28667: PUSH
28668: LD_INT 6
28670: NEG
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 6
28678: NEG
28679: PUSH
28680: LD_INT 5
28682: NEG
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 6
28690: NEG
28691: PUSH
28692: LD_INT 6
28694: NEG
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28714: LD_ADDR_VAR 0 41
28718: PUSH
28719: LD_INT 0
28721: PUSH
28722: LD_INT 2
28724: NEG
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 1
28732: NEG
28733: PUSH
28734: LD_INT 3
28736: NEG
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 1
28744: PUSH
28745: LD_INT 2
28747: NEG
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: LIST
28757: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28758: LD_ADDR_VAR 0 42
28762: PUSH
28763: LD_INT 2
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 2
28775: PUSH
28776: LD_INT 1
28778: NEG
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 3
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: LIST
28798: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28799: LD_ADDR_VAR 0 43
28803: PUSH
28804: LD_INT 2
28806: PUSH
28807: LD_INT 2
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 3
28816: PUSH
28817: LD_INT 2
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 2
28826: PUSH
28827: LD_INT 3
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: LIST
28838: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28839: LD_ADDR_VAR 0 44
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: LD_INT 2
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 1
28856: PUSH
28857: LD_INT 3
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 1
28866: NEG
28867: PUSH
28868: LD_INT 2
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: LIST
28879: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28880: LD_ADDR_VAR 0 45
28884: PUSH
28885: LD_INT 2
28887: NEG
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 2
28898: NEG
28899: PUSH
28900: LD_INT 1
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 3
28909: NEG
28910: PUSH
28911: LD_INT 1
28913: NEG
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: LIST
28923: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28924: LD_ADDR_VAR 0 46
28928: PUSH
28929: LD_INT 2
28931: NEG
28932: PUSH
28933: LD_INT 2
28935: NEG
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 2
28943: NEG
28944: PUSH
28945: LD_INT 3
28947: NEG
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 3
28955: NEG
28956: PUSH
28957: LD_INT 2
28959: NEG
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: LIST
28969: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28970: LD_ADDR_VAR 0 47
28974: PUSH
28975: LD_INT 2
28977: NEG
28978: PUSH
28979: LD_INT 3
28981: NEG
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 1
28989: NEG
28990: PUSH
28991: LD_INT 3
28993: NEG
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29003: LD_ADDR_VAR 0 48
29007: PUSH
29008: LD_INT 1
29010: PUSH
29011: LD_INT 2
29013: NEG
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 2
29021: PUSH
29022: LD_INT 1
29024: NEG
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29034: LD_ADDR_VAR 0 49
29038: PUSH
29039: LD_INT 3
29041: PUSH
29042: LD_INT 1
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 3
29051: PUSH
29052: LD_INT 2
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29063: LD_ADDR_VAR 0 50
29067: PUSH
29068: LD_INT 2
29070: PUSH
29071: LD_INT 3
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: LD_INT 3
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29092: LD_ADDR_VAR 0 51
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: LD_INT 2
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 2
29110: NEG
29111: PUSH
29112: LD_INT 1
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29123: LD_ADDR_VAR 0 52
29127: PUSH
29128: LD_INT 3
29130: NEG
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 3
29142: NEG
29143: PUSH
29144: LD_INT 2
29146: NEG
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29156: LD_ADDR_VAR 0 53
29160: PUSH
29161: LD_INT 1
29163: NEG
29164: PUSH
29165: LD_INT 3
29167: NEG
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: LD_INT 3
29178: NEG
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 1
29186: PUSH
29187: LD_INT 2
29189: NEG
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: LIST
29199: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29200: LD_ADDR_VAR 0 54
29204: PUSH
29205: LD_INT 2
29207: PUSH
29208: LD_INT 1
29210: NEG
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 3
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 3
29228: PUSH
29229: LD_INT 1
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: LIST
29240: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29241: LD_ADDR_VAR 0 55
29245: PUSH
29246: LD_INT 3
29248: PUSH
29249: LD_INT 2
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 3
29258: PUSH
29259: LD_INT 3
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 2
29268: PUSH
29269: LD_INT 3
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: LIST
29280: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29281: LD_ADDR_VAR 0 56
29285: PUSH
29286: LD_INT 1
29288: PUSH
29289: LD_INT 3
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 0
29298: PUSH
29299: LD_INT 3
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 1
29308: NEG
29309: PUSH
29310: LD_INT 2
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: LIST
29321: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29322: LD_ADDR_VAR 0 57
29326: PUSH
29327: LD_INT 2
29329: NEG
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 3
29340: NEG
29341: PUSH
29342: LD_INT 0
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 3
29351: NEG
29352: PUSH
29353: LD_INT 1
29355: NEG
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: LIST
29365: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29366: LD_ADDR_VAR 0 58
29370: PUSH
29371: LD_INT 2
29373: NEG
29374: PUSH
29375: LD_INT 3
29377: NEG
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 3
29385: NEG
29386: PUSH
29387: LD_INT 2
29389: NEG
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 3
29397: NEG
29398: PUSH
29399: LD_INT 3
29401: NEG
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: LIST
29411: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29412: LD_ADDR_VAR 0 59
29416: PUSH
29417: LD_INT 1
29419: NEG
29420: PUSH
29421: LD_INT 2
29423: NEG
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 0
29431: PUSH
29432: LD_INT 2
29434: NEG
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: LD_INT 1
29445: NEG
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: LIST
29455: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29456: LD_ADDR_VAR 0 60
29460: PUSH
29461: LD_INT 1
29463: PUSH
29464: LD_INT 1
29466: NEG
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 2
29474: PUSH
29475: LD_INT 0
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 2
29484: PUSH
29485: LD_INT 1
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: LIST
29496: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29497: LD_ADDR_VAR 0 61
29501: PUSH
29502: LD_INT 2
29504: PUSH
29505: LD_INT 1
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 2
29514: PUSH
29515: LD_INT 2
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 1
29524: PUSH
29525: LD_INT 2
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: LIST
29536: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29537: LD_ADDR_VAR 0 62
29541: PUSH
29542: LD_INT 1
29544: PUSH
29545: LD_INT 2
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 0
29554: PUSH
29555: LD_INT 2
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 1
29564: NEG
29565: PUSH
29566: LD_INT 1
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: LIST
29577: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29578: LD_ADDR_VAR 0 63
29582: PUSH
29583: LD_INT 1
29585: NEG
29586: PUSH
29587: LD_INT 1
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 2
29596: NEG
29597: PUSH
29598: LD_INT 0
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 2
29607: NEG
29608: PUSH
29609: LD_INT 1
29611: NEG
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: LIST
29621: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29622: LD_ADDR_VAR 0 64
29626: PUSH
29627: LD_INT 1
29629: NEG
29630: PUSH
29631: LD_INT 2
29633: NEG
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 2
29641: NEG
29642: PUSH
29643: LD_INT 1
29645: NEG
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 2
29653: NEG
29654: PUSH
29655: LD_INT 2
29657: NEG
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: LIST
29667: ST_TO_ADDR
// end ; 2 :
29668: GO 32934
29670: LD_INT 2
29672: DOUBLE
29673: EQUAL
29674: IFTRUE 29678
29676: GO 32933
29678: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29679: LD_ADDR_VAR 0 29
29683: PUSH
29684: LD_INT 4
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 4
29696: PUSH
29697: LD_INT 1
29699: NEG
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 5
29707: PUSH
29708: LD_INT 0
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 5
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 4
29727: PUSH
29728: LD_INT 1
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 3
29737: PUSH
29738: LD_INT 0
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 3
29747: PUSH
29748: LD_INT 1
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 3
29758: PUSH
29759: LD_INT 2
29761: NEG
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 5
29769: PUSH
29770: LD_INT 2
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 3
29779: PUSH
29780: LD_INT 3
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 3
29789: PUSH
29790: LD_INT 2
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 4
29799: PUSH
29800: LD_INT 3
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 4
29809: PUSH
29810: LD_INT 4
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 3
29819: PUSH
29820: LD_INT 4
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: LD_INT 3
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: LD_INT 2
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 4
29849: PUSH
29850: LD_INT 2
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 2
29859: PUSH
29860: LD_INT 4
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 0
29869: PUSH
29870: LD_INT 4
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: LD_INT 4
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: LD_INT 5
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 0
29909: PUSH
29910: LD_INT 5
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 1
29919: NEG
29920: PUSH
29921: LD_INT 4
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 1
29930: NEG
29931: PUSH
29932: LD_INT 3
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 2
29941: PUSH
29942: LD_INT 5
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 2
29951: NEG
29952: PUSH
29953: LD_INT 3
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 3
29962: NEG
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 3
29973: NEG
29974: PUSH
29975: LD_INT 1
29977: NEG
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 2
29985: NEG
29986: PUSH
29987: LD_INT 0
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 2
29996: NEG
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 3
30007: NEG
30008: PUSH
30009: LD_INT 1
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 4
30018: NEG
30019: PUSH
30020: LD_INT 0
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 4
30029: NEG
30030: PUSH
30031: LD_INT 1
30033: NEG
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 4
30041: NEG
30042: PUSH
30043: LD_INT 2
30045: NEG
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 2
30053: NEG
30054: PUSH
30055: LD_INT 2
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 4
30064: NEG
30065: PUSH
30066: LD_INT 4
30068: NEG
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 4
30076: NEG
30077: PUSH
30078: LD_INT 5
30080: NEG
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 3
30088: NEG
30089: PUSH
30090: LD_INT 4
30092: NEG
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 3
30100: NEG
30101: PUSH
30102: LD_INT 3
30104: NEG
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 4
30112: NEG
30113: PUSH
30114: LD_INT 3
30116: NEG
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 5
30124: NEG
30125: PUSH
30126: LD_INT 4
30128: NEG
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 5
30136: NEG
30137: PUSH
30138: LD_INT 5
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 3
30148: NEG
30149: PUSH
30150: LD_INT 5
30152: NEG
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 5
30160: NEG
30161: PUSH
30162: LD_INT 3
30164: NEG
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30217: LD_ADDR_VAR 0 30
30221: PUSH
30222: LD_INT 4
30224: PUSH
30225: LD_INT 4
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 4
30234: PUSH
30235: LD_INT 3
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 5
30244: PUSH
30245: LD_INT 4
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 5
30254: PUSH
30255: LD_INT 5
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 4
30264: PUSH
30265: LD_INT 5
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 3
30274: PUSH
30275: LD_INT 4
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 3
30284: PUSH
30285: LD_INT 3
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 5
30294: PUSH
30295: LD_INT 3
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 3
30304: PUSH
30305: LD_INT 5
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: LD_INT 3
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: LD_INT 2
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 1
30334: PUSH
30335: LD_INT 3
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 1
30344: PUSH
30345: LD_INT 4
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 0
30354: PUSH
30355: LD_INT 4
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: LD_INT 3
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 1
30375: NEG
30376: PUSH
30377: LD_INT 2
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 2
30386: PUSH
30387: LD_INT 4
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 2
30396: NEG
30397: PUSH
30398: LD_INT 2
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 4
30407: NEG
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 4
30418: NEG
30419: PUSH
30420: LD_INT 1
30422: NEG
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 3
30430: NEG
30431: PUSH
30432: LD_INT 0
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 3
30441: NEG
30442: PUSH
30443: LD_INT 1
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 4
30452: NEG
30453: PUSH
30454: LD_INT 1
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 5
30463: NEG
30464: PUSH
30465: LD_INT 0
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 5
30474: NEG
30475: PUSH
30476: LD_INT 1
30478: NEG
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 5
30486: NEG
30487: PUSH
30488: LD_INT 2
30490: NEG
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 3
30498: NEG
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 3
30509: NEG
30510: PUSH
30511: LD_INT 3
30513: NEG
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 3
30521: NEG
30522: PUSH
30523: LD_INT 4
30525: NEG
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 2
30533: NEG
30534: PUSH
30535: LD_INT 3
30537: NEG
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 2
30545: NEG
30546: PUSH
30547: LD_INT 2
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 3
30557: NEG
30558: PUSH
30559: LD_INT 2
30561: NEG
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 4
30569: NEG
30570: PUSH
30571: LD_INT 3
30573: NEG
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 4
30581: NEG
30582: PUSH
30583: LD_INT 4
30585: NEG
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 2
30593: NEG
30594: PUSH
30595: LD_INT 4
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 4
30605: NEG
30606: PUSH
30607: LD_INT 2
30609: NEG
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 0
30617: PUSH
30618: LD_INT 4
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: LD_INT 5
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: LD_INT 4
30642: NEG
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 1
30650: PUSH
30651: LD_INT 3
30653: NEG
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 0
30661: PUSH
30662: LD_INT 3
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 1
30672: NEG
30673: PUSH
30674: LD_INT 4
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 1
30684: NEG
30685: PUSH
30686: LD_INT 5
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 2
30696: PUSH
30697: LD_INT 3
30699: NEG
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 2
30707: NEG
30708: PUSH
30709: LD_INT 5
30711: NEG
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30764: LD_ADDR_VAR 0 31
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: LD_INT 4
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 0
30781: PUSH
30782: LD_INT 3
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 1
30791: PUSH
30792: LD_INT 4
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 1
30801: PUSH
30802: LD_INT 5
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: LD_INT 5
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 1
30821: NEG
30822: PUSH
30823: LD_INT 4
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: LD_INT 3
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 2
30843: PUSH
30844: LD_INT 5
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 2
30853: NEG
30854: PUSH
30855: LD_INT 3
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 3
30864: NEG
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 3
30875: NEG
30876: PUSH
30877: LD_INT 1
30879: NEG
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 2
30887: NEG
30888: PUSH
30889: LD_INT 0
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 2
30898: NEG
30899: PUSH
30900: LD_INT 1
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 3
30909: NEG
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 4
30920: NEG
30921: PUSH
30922: LD_INT 0
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 4
30931: NEG
30932: PUSH
30933: LD_INT 1
30935: NEG
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 4
30943: NEG
30944: PUSH
30945: LD_INT 2
30947: NEG
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 2
30955: NEG
30956: PUSH
30957: LD_INT 2
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 4
30966: NEG
30967: PUSH
30968: LD_INT 4
30970: NEG
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 4
30978: NEG
30979: PUSH
30980: LD_INT 5
30982: NEG
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 3
30990: NEG
30991: PUSH
30992: LD_INT 4
30994: NEG
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 3
31002: NEG
31003: PUSH
31004: LD_INT 3
31006: NEG
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 4
31014: NEG
31015: PUSH
31016: LD_INT 3
31018: NEG
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 5
31026: NEG
31027: PUSH
31028: LD_INT 4
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 5
31038: NEG
31039: PUSH
31040: LD_INT 5
31042: NEG
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 3
31050: NEG
31051: PUSH
31052: LD_INT 5
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 5
31062: NEG
31063: PUSH
31064: LD_INT 3
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 0
31074: PUSH
31075: LD_INT 3
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 0
31085: PUSH
31086: LD_INT 4
31088: NEG
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 1
31096: PUSH
31097: LD_INT 3
31099: NEG
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 1
31107: PUSH
31108: LD_INT 2
31110: NEG
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 0
31118: PUSH
31119: LD_INT 2
31121: NEG
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 1
31129: NEG
31130: PUSH
31131: LD_INT 3
31133: NEG
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 1
31141: NEG
31142: PUSH
31143: LD_INT 4
31145: NEG
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 2
31153: PUSH
31154: LD_INT 2
31156: NEG
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 2
31164: NEG
31165: PUSH
31166: LD_INT 4
31168: NEG
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 4
31176: PUSH
31177: LD_INT 0
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 4
31186: PUSH
31187: LD_INT 1
31189: NEG
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 5
31197: PUSH
31198: LD_INT 0
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 5
31207: PUSH
31208: LD_INT 1
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 4
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 3
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 3
31237: PUSH
31238: LD_INT 1
31240: NEG
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 3
31248: PUSH
31249: LD_INT 2
31251: NEG
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 5
31259: PUSH
31260: LD_INT 2
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31314: LD_ADDR_VAR 0 32
31318: PUSH
31319: LD_INT 4
31321: NEG
31322: PUSH
31323: LD_INT 0
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 4
31332: NEG
31333: PUSH
31334: LD_INT 1
31336: NEG
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 3
31344: NEG
31345: PUSH
31346: LD_INT 0
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 3
31355: NEG
31356: PUSH
31357: LD_INT 1
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 4
31366: NEG
31367: PUSH
31368: LD_INT 1
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 5
31377: NEG
31378: PUSH
31379: LD_INT 0
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 5
31388: NEG
31389: PUSH
31390: LD_INT 1
31392: NEG
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 5
31400: NEG
31401: PUSH
31402: LD_INT 2
31404: NEG
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 3
31412: NEG
31413: PUSH
31414: LD_INT 2
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 3
31423: NEG
31424: PUSH
31425: LD_INT 3
31427: NEG
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 3
31435: NEG
31436: PUSH
31437: LD_INT 4
31439: NEG
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 2
31447: NEG
31448: PUSH
31449: LD_INT 3
31451: NEG
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 2
31459: NEG
31460: PUSH
31461: LD_INT 2
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 3
31471: NEG
31472: PUSH
31473: LD_INT 2
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 4
31483: NEG
31484: PUSH
31485: LD_INT 3
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 4
31495: NEG
31496: PUSH
31497: LD_INT 4
31499: NEG
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 2
31507: NEG
31508: PUSH
31509: LD_INT 4
31511: NEG
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 4
31519: NEG
31520: PUSH
31521: LD_INT 2
31523: NEG
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 0
31531: PUSH
31532: LD_INT 4
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: LD_INT 5
31545: NEG
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: LD_INT 4
31556: NEG
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 1
31564: PUSH
31565: LD_INT 3
31567: NEG
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 0
31575: PUSH
31576: LD_INT 3
31578: NEG
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 1
31586: NEG
31587: PUSH
31588: LD_INT 4
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 1
31598: NEG
31599: PUSH
31600: LD_INT 5
31602: NEG
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 2
31610: PUSH
31611: LD_INT 3
31613: NEG
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 2
31621: NEG
31622: PUSH
31623: LD_INT 5
31625: NEG
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 3
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 3
31643: PUSH
31644: LD_INT 1
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 4
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 4
31664: PUSH
31665: LD_INT 1
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 3
31674: PUSH
31675: LD_INT 1
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 2
31684: PUSH
31685: LD_INT 0
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 2
31694: PUSH
31695: LD_INT 1
31697: NEG
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 2
31705: PUSH
31706: LD_INT 2
31708: NEG
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 4
31716: PUSH
31717: LD_INT 2
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 4
31726: PUSH
31727: LD_INT 4
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 4
31736: PUSH
31737: LD_INT 3
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 5
31746: PUSH
31747: LD_INT 4
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 5
31756: PUSH
31757: LD_INT 5
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 4
31766: PUSH
31767: LD_INT 5
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 3
31776: PUSH
31777: LD_INT 4
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 3
31786: PUSH
31787: LD_INT 3
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 5
31796: PUSH
31797: LD_INT 3
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 3
31806: PUSH
31807: LD_INT 5
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31861: LD_ADDR_VAR 0 33
31865: PUSH
31866: LD_INT 4
31868: NEG
31869: PUSH
31870: LD_INT 4
31872: NEG
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 4
31880: NEG
31881: PUSH
31882: LD_INT 5
31884: NEG
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 3
31892: NEG
31893: PUSH
31894: LD_INT 4
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 3
31904: NEG
31905: PUSH
31906: LD_INT 3
31908: NEG
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 4
31916: NEG
31917: PUSH
31918: LD_INT 3
31920: NEG
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 5
31928: NEG
31929: PUSH
31930: LD_INT 4
31932: NEG
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 5
31940: NEG
31941: PUSH
31942: LD_INT 5
31944: NEG
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 3
31952: NEG
31953: PUSH
31954: LD_INT 5
31956: NEG
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 5
31964: NEG
31965: PUSH
31966: LD_INT 3
31968: NEG
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: LD_INT 3
31979: NEG
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 0
31987: PUSH
31988: LD_INT 4
31990: NEG
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 1
31998: PUSH
31999: LD_INT 3
32001: NEG
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 1
32009: PUSH
32010: LD_INT 2
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 0
32020: PUSH
32021: LD_INT 2
32023: NEG
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 1
32031: NEG
32032: PUSH
32033: LD_INT 3
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: NEG
32044: PUSH
32045: LD_INT 4
32047: NEG
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 2
32055: PUSH
32056: LD_INT 2
32058: NEG
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 2
32066: NEG
32067: PUSH
32068: LD_INT 4
32070: NEG
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 4
32078: PUSH
32079: LD_INT 0
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 4
32088: PUSH
32089: LD_INT 1
32091: NEG
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 5
32099: PUSH
32100: LD_INT 0
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 5
32109: PUSH
32110: LD_INT 1
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 4
32119: PUSH
32120: LD_INT 1
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 3
32129: PUSH
32130: LD_INT 0
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 3
32139: PUSH
32140: LD_INT 1
32142: NEG
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 3
32150: PUSH
32151: LD_INT 2
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 5
32161: PUSH
32162: LD_INT 2
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 3
32171: PUSH
32172: LD_INT 3
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 3
32181: PUSH
32182: LD_INT 2
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 4
32191: PUSH
32192: LD_INT 3
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 4
32201: PUSH
32202: LD_INT 4
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 3
32211: PUSH
32212: LD_INT 4
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 2
32221: PUSH
32222: LD_INT 3
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 2
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 4
32241: PUSH
32242: LD_INT 2
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 2
32251: PUSH
32252: LD_INT 4
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 0
32261: PUSH
32262: LD_INT 4
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 0
32271: PUSH
32272: LD_INT 3
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 1
32281: PUSH
32282: LD_INT 4
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 1
32291: PUSH
32292: LD_INT 5
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: LD_INT 5
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 1
32311: NEG
32312: PUSH
32313: LD_INT 4
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 1
32322: NEG
32323: PUSH
32324: LD_INT 3
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 2
32333: PUSH
32334: LD_INT 5
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 2
32343: NEG
32344: PUSH
32345: LD_INT 3
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32399: LD_ADDR_VAR 0 34
32403: PUSH
32404: LD_INT 0
32406: PUSH
32407: LD_INT 4
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 0
32417: PUSH
32418: LD_INT 5
32420: NEG
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 1
32428: PUSH
32429: LD_INT 4
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 1
32439: PUSH
32440: LD_INT 3
32442: NEG
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 0
32450: PUSH
32451: LD_INT 3
32453: NEG
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 1
32461: NEG
32462: PUSH
32463: LD_INT 4
32465: NEG
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 1
32473: NEG
32474: PUSH
32475: LD_INT 5
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 2
32485: PUSH
32486: LD_INT 3
32488: NEG
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 2
32496: NEG
32497: PUSH
32498: LD_INT 5
32500: NEG
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 3
32508: PUSH
32509: LD_INT 0
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 3
32518: PUSH
32519: LD_INT 1
32521: NEG
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 4
32529: PUSH
32530: LD_INT 0
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 4
32539: PUSH
32540: LD_INT 1
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 3
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 2
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 2
32580: PUSH
32581: LD_INT 2
32583: NEG
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 4
32591: PUSH
32592: LD_INT 2
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 4
32601: PUSH
32602: LD_INT 4
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 4
32611: PUSH
32612: LD_INT 3
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 5
32621: PUSH
32622: LD_INT 4
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 5
32631: PUSH
32632: LD_INT 5
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 4
32641: PUSH
32642: LD_INT 5
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 3
32651: PUSH
32652: LD_INT 4
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 3
32661: PUSH
32662: LD_INT 3
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 5
32671: PUSH
32672: LD_INT 3
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 3
32681: PUSH
32682: LD_INT 5
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: LD_INT 3
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 0
32701: PUSH
32702: LD_INT 2
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 1
32711: PUSH
32712: LD_INT 3
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 1
32721: PUSH
32722: LD_INT 4
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: LD_INT 4
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 1
32741: NEG
32742: PUSH
32743: LD_INT 3
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 1
32752: NEG
32753: PUSH
32754: LD_INT 2
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 2
32763: PUSH
32764: LD_INT 4
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 2
32773: NEG
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 4
32784: NEG
32785: PUSH
32786: LD_INT 0
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 4
32795: NEG
32796: PUSH
32797: LD_INT 1
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 3
32807: NEG
32808: PUSH
32809: LD_INT 0
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 3
32818: NEG
32819: PUSH
32820: LD_INT 1
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 4
32829: NEG
32830: PUSH
32831: LD_INT 1
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 5
32840: NEG
32841: PUSH
32842: LD_INT 0
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 5
32851: NEG
32852: PUSH
32853: LD_INT 1
32855: NEG
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 5
32863: NEG
32864: PUSH
32865: LD_INT 2
32867: NEG
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 3
32875: NEG
32876: PUSH
32877: LD_INT 2
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: ST_TO_ADDR
// end ; end ;
32931: GO 32934
32933: POP
// case btype of b_depot , b_warehouse :
32934: LD_VAR 0 1
32938: PUSH
32939: LD_INT 0
32941: DOUBLE
32942: EQUAL
32943: IFTRUE 32953
32945: LD_INT 1
32947: DOUBLE
32948: EQUAL
32949: IFTRUE 32953
32951: GO 33154
32953: POP
// case nation of nation_american :
32954: LD_VAR 0 5
32958: PUSH
32959: LD_INT 1
32961: DOUBLE
32962: EQUAL
32963: IFTRUE 32967
32965: GO 33023
32967: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32968: LD_ADDR_VAR 0 9
32972: PUSH
32973: LD_VAR 0 11
32977: PUSH
32978: LD_VAR 0 12
32982: PUSH
32983: LD_VAR 0 13
32987: PUSH
32988: LD_VAR 0 14
32992: PUSH
32993: LD_VAR 0 15
32997: PUSH
32998: LD_VAR 0 16
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: PUSH
33011: LD_VAR 0 4
33015: PUSH
33016: LD_INT 1
33018: PLUS
33019: ARRAY
33020: ST_TO_ADDR
33021: GO 33152
33023: LD_INT 2
33025: DOUBLE
33026: EQUAL
33027: IFTRUE 33031
33029: GO 33087
33031: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33032: LD_ADDR_VAR 0 9
33036: PUSH
33037: LD_VAR 0 17
33041: PUSH
33042: LD_VAR 0 18
33046: PUSH
33047: LD_VAR 0 19
33051: PUSH
33052: LD_VAR 0 20
33056: PUSH
33057: LD_VAR 0 21
33061: PUSH
33062: LD_VAR 0 22
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: PUSH
33075: LD_VAR 0 4
33079: PUSH
33080: LD_INT 1
33082: PLUS
33083: ARRAY
33084: ST_TO_ADDR
33085: GO 33152
33087: LD_INT 3
33089: DOUBLE
33090: EQUAL
33091: IFTRUE 33095
33093: GO 33151
33095: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33096: LD_ADDR_VAR 0 9
33100: PUSH
33101: LD_VAR 0 23
33105: PUSH
33106: LD_VAR 0 24
33110: PUSH
33111: LD_VAR 0 25
33115: PUSH
33116: LD_VAR 0 26
33120: PUSH
33121: LD_VAR 0 27
33125: PUSH
33126: LD_VAR 0 28
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: PUSH
33139: LD_VAR 0 4
33143: PUSH
33144: LD_INT 1
33146: PLUS
33147: ARRAY
33148: ST_TO_ADDR
33149: GO 33152
33151: POP
33152: GO 33707
33154: LD_INT 2
33156: DOUBLE
33157: EQUAL
33158: IFTRUE 33168
33160: LD_INT 3
33162: DOUBLE
33163: EQUAL
33164: IFTRUE 33168
33166: GO 33224
33168: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33169: LD_ADDR_VAR 0 9
33173: PUSH
33174: LD_VAR 0 29
33178: PUSH
33179: LD_VAR 0 30
33183: PUSH
33184: LD_VAR 0 31
33188: PUSH
33189: LD_VAR 0 32
33193: PUSH
33194: LD_VAR 0 33
33198: PUSH
33199: LD_VAR 0 34
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: PUSH
33212: LD_VAR 0 4
33216: PUSH
33217: LD_INT 1
33219: PLUS
33220: ARRAY
33221: ST_TO_ADDR
33222: GO 33707
33224: LD_INT 16
33226: DOUBLE
33227: EQUAL
33228: IFTRUE 33286
33230: LD_INT 17
33232: DOUBLE
33233: EQUAL
33234: IFTRUE 33286
33236: LD_INT 18
33238: DOUBLE
33239: EQUAL
33240: IFTRUE 33286
33242: LD_INT 19
33244: DOUBLE
33245: EQUAL
33246: IFTRUE 33286
33248: LD_INT 22
33250: DOUBLE
33251: EQUAL
33252: IFTRUE 33286
33254: LD_INT 20
33256: DOUBLE
33257: EQUAL
33258: IFTRUE 33286
33260: LD_INT 21
33262: DOUBLE
33263: EQUAL
33264: IFTRUE 33286
33266: LD_INT 23
33268: DOUBLE
33269: EQUAL
33270: IFTRUE 33286
33272: LD_INT 24
33274: DOUBLE
33275: EQUAL
33276: IFTRUE 33286
33278: LD_INT 25
33280: DOUBLE
33281: EQUAL
33282: IFTRUE 33286
33284: GO 33342
33286: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33287: LD_ADDR_VAR 0 9
33291: PUSH
33292: LD_VAR 0 35
33296: PUSH
33297: LD_VAR 0 36
33301: PUSH
33302: LD_VAR 0 37
33306: PUSH
33307: LD_VAR 0 38
33311: PUSH
33312: LD_VAR 0 39
33316: PUSH
33317: LD_VAR 0 40
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: PUSH
33330: LD_VAR 0 4
33334: PUSH
33335: LD_INT 1
33337: PLUS
33338: ARRAY
33339: ST_TO_ADDR
33340: GO 33707
33342: LD_INT 6
33344: DOUBLE
33345: EQUAL
33346: IFTRUE 33398
33348: LD_INT 7
33350: DOUBLE
33351: EQUAL
33352: IFTRUE 33398
33354: LD_INT 8
33356: DOUBLE
33357: EQUAL
33358: IFTRUE 33398
33360: LD_INT 13
33362: DOUBLE
33363: EQUAL
33364: IFTRUE 33398
33366: LD_INT 12
33368: DOUBLE
33369: EQUAL
33370: IFTRUE 33398
33372: LD_INT 15
33374: DOUBLE
33375: EQUAL
33376: IFTRUE 33398
33378: LD_INT 11
33380: DOUBLE
33381: EQUAL
33382: IFTRUE 33398
33384: LD_INT 14
33386: DOUBLE
33387: EQUAL
33388: IFTRUE 33398
33390: LD_INT 10
33392: DOUBLE
33393: EQUAL
33394: IFTRUE 33398
33396: GO 33454
33398: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33399: LD_ADDR_VAR 0 9
33403: PUSH
33404: LD_VAR 0 41
33408: PUSH
33409: LD_VAR 0 42
33413: PUSH
33414: LD_VAR 0 43
33418: PUSH
33419: LD_VAR 0 44
33423: PUSH
33424: LD_VAR 0 45
33428: PUSH
33429: LD_VAR 0 46
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: PUSH
33442: LD_VAR 0 4
33446: PUSH
33447: LD_INT 1
33449: PLUS
33450: ARRAY
33451: ST_TO_ADDR
33452: GO 33707
33454: LD_INT 36
33456: DOUBLE
33457: EQUAL
33458: IFTRUE 33462
33460: GO 33518
33462: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33463: LD_ADDR_VAR 0 9
33467: PUSH
33468: LD_VAR 0 47
33472: PUSH
33473: LD_VAR 0 48
33477: PUSH
33478: LD_VAR 0 49
33482: PUSH
33483: LD_VAR 0 50
33487: PUSH
33488: LD_VAR 0 51
33492: PUSH
33493: LD_VAR 0 52
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: PUSH
33506: LD_VAR 0 4
33510: PUSH
33511: LD_INT 1
33513: PLUS
33514: ARRAY
33515: ST_TO_ADDR
33516: GO 33707
33518: LD_INT 4
33520: DOUBLE
33521: EQUAL
33522: IFTRUE 33544
33524: LD_INT 5
33526: DOUBLE
33527: EQUAL
33528: IFTRUE 33544
33530: LD_INT 34
33532: DOUBLE
33533: EQUAL
33534: IFTRUE 33544
33536: LD_INT 37
33538: DOUBLE
33539: EQUAL
33540: IFTRUE 33544
33542: GO 33600
33544: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33545: LD_ADDR_VAR 0 9
33549: PUSH
33550: LD_VAR 0 53
33554: PUSH
33555: LD_VAR 0 54
33559: PUSH
33560: LD_VAR 0 55
33564: PUSH
33565: LD_VAR 0 56
33569: PUSH
33570: LD_VAR 0 57
33574: PUSH
33575: LD_VAR 0 58
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: PUSH
33588: LD_VAR 0 4
33592: PUSH
33593: LD_INT 1
33595: PLUS
33596: ARRAY
33597: ST_TO_ADDR
33598: GO 33707
33600: LD_INT 31
33602: DOUBLE
33603: EQUAL
33604: IFTRUE 33650
33606: LD_INT 32
33608: DOUBLE
33609: EQUAL
33610: IFTRUE 33650
33612: LD_INT 33
33614: DOUBLE
33615: EQUAL
33616: IFTRUE 33650
33618: LD_INT 27
33620: DOUBLE
33621: EQUAL
33622: IFTRUE 33650
33624: LD_INT 26
33626: DOUBLE
33627: EQUAL
33628: IFTRUE 33650
33630: LD_INT 28
33632: DOUBLE
33633: EQUAL
33634: IFTRUE 33650
33636: LD_INT 29
33638: DOUBLE
33639: EQUAL
33640: IFTRUE 33650
33642: LD_INT 30
33644: DOUBLE
33645: EQUAL
33646: IFTRUE 33650
33648: GO 33706
33650: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33651: LD_ADDR_VAR 0 9
33655: PUSH
33656: LD_VAR 0 59
33660: PUSH
33661: LD_VAR 0 60
33665: PUSH
33666: LD_VAR 0 61
33670: PUSH
33671: LD_VAR 0 62
33675: PUSH
33676: LD_VAR 0 63
33680: PUSH
33681: LD_VAR 0 64
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: PUSH
33694: LD_VAR 0 4
33698: PUSH
33699: LD_INT 1
33701: PLUS
33702: ARRAY
33703: ST_TO_ADDR
33704: GO 33707
33706: POP
// temp_list2 = [ ] ;
33707: LD_ADDR_VAR 0 10
33711: PUSH
33712: EMPTY
33713: ST_TO_ADDR
// for i in temp_list do
33714: LD_ADDR_VAR 0 8
33718: PUSH
33719: LD_VAR 0 9
33723: PUSH
33724: FOR_IN
33725: IFFALSE 33777
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33727: LD_ADDR_VAR 0 10
33731: PUSH
33732: LD_VAR 0 10
33736: PUSH
33737: LD_VAR 0 8
33741: PUSH
33742: LD_INT 1
33744: ARRAY
33745: PUSH
33746: LD_VAR 0 2
33750: PLUS
33751: PUSH
33752: LD_VAR 0 8
33756: PUSH
33757: LD_INT 2
33759: ARRAY
33760: PUSH
33761: LD_VAR 0 3
33765: PLUS
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: EMPTY
33772: LIST
33773: ADD
33774: ST_TO_ADDR
33775: GO 33724
33777: POP
33778: POP
// result = temp_list2 ;
33779: LD_ADDR_VAR 0 7
33783: PUSH
33784: LD_VAR 0 10
33788: ST_TO_ADDR
// end ;
33789: LD_VAR 0 7
33793: RET
// export function EnemyInRange ( unit , dist ) ; begin
33794: LD_INT 0
33796: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33797: LD_ADDR_VAR 0 3
33801: PUSH
33802: LD_VAR 0 1
33806: PPUSH
33807: CALL_OW 255
33811: PPUSH
33812: LD_VAR 0 1
33816: PPUSH
33817: CALL_OW 250
33821: PPUSH
33822: LD_VAR 0 1
33826: PPUSH
33827: CALL_OW 251
33831: PPUSH
33832: LD_VAR 0 2
33836: PPUSH
33837: CALL 7190 0 4
33841: PUSH
33842: LD_INT 4
33844: ARRAY
33845: ST_TO_ADDR
// end ;
33846: LD_VAR 0 3
33850: RET
// export function PlayerSeeMe ( unit ) ; begin
33851: LD_INT 0
33853: PPUSH
// result := See ( your_side , unit ) ;
33854: LD_ADDR_VAR 0 2
33858: PUSH
33859: LD_OWVAR 2
33863: PPUSH
33864: LD_VAR 0 1
33868: PPUSH
33869: CALL_OW 292
33873: ST_TO_ADDR
// end ;
33874: LD_VAR 0 2
33878: RET
// export function ReverseDir ( unit ) ; begin
33879: LD_INT 0
33881: PPUSH
// if not unit then
33882: LD_VAR 0 1
33886: NOT
33887: IFFALSE 33891
// exit ;
33889: GO 33914
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33891: LD_ADDR_VAR 0 2
33895: PUSH
33896: LD_VAR 0 1
33900: PPUSH
33901: CALL_OW 254
33905: PUSH
33906: LD_INT 3
33908: PLUS
33909: PUSH
33910: LD_INT 6
33912: MOD
33913: ST_TO_ADDR
// end ;
33914: LD_VAR 0 2
33918: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
33919: LD_INT 0
33921: PPUSH
33922: PPUSH
33923: PPUSH
33924: PPUSH
33925: PPUSH
// if not hexes then
33926: LD_VAR 0 2
33930: NOT
33931: IFFALSE 33935
// exit ;
33933: GO 34083
// dist := 9999 ;
33935: LD_ADDR_VAR 0 5
33939: PUSH
33940: LD_INT 9999
33942: ST_TO_ADDR
// for i = 1 to hexes do
33943: LD_ADDR_VAR 0 4
33947: PUSH
33948: DOUBLE
33949: LD_INT 1
33951: DEC
33952: ST_TO_ADDR
33953: LD_VAR 0 2
33957: PUSH
33958: FOR_TO
33959: IFFALSE 34071
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
33961: LD_VAR 0 1
33965: PPUSH
33966: LD_VAR 0 2
33970: PUSH
33971: LD_VAR 0 4
33975: ARRAY
33976: PUSH
33977: LD_INT 1
33979: ARRAY
33980: PPUSH
33981: LD_VAR 0 2
33985: PUSH
33986: LD_VAR 0 4
33990: ARRAY
33991: PUSH
33992: LD_INT 2
33994: ARRAY
33995: PPUSH
33996: CALL_OW 297
34000: PUSH
34001: LD_VAR 0 5
34005: LESS
34006: IFFALSE 34069
// begin hex := hexes [ i ] ;
34008: LD_ADDR_VAR 0 7
34012: PUSH
34013: LD_VAR 0 2
34017: PUSH
34018: LD_VAR 0 4
34022: ARRAY
34023: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34024: LD_ADDR_VAR 0 5
34028: PUSH
34029: LD_VAR 0 1
34033: PPUSH
34034: LD_VAR 0 2
34038: PUSH
34039: LD_VAR 0 4
34043: ARRAY
34044: PUSH
34045: LD_INT 1
34047: ARRAY
34048: PPUSH
34049: LD_VAR 0 2
34053: PUSH
34054: LD_VAR 0 4
34058: ARRAY
34059: PUSH
34060: LD_INT 2
34062: ARRAY
34063: PPUSH
34064: CALL_OW 297
34068: ST_TO_ADDR
// end ; end ;
34069: GO 33958
34071: POP
34072: POP
// result := hex ;
34073: LD_ADDR_VAR 0 3
34077: PUSH
34078: LD_VAR 0 7
34082: ST_TO_ADDR
// end ;
34083: LD_VAR 0 3
34087: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34088: LD_INT 0
34090: PPUSH
34091: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34092: LD_VAR 0 1
34096: NOT
34097: PUSH
34098: LD_VAR 0 1
34102: PUSH
34103: LD_INT 21
34105: PUSH
34106: LD_INT 2
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 23
34115: PUSH
34116: LD_INT 2
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PPUSH
34127: CALL_OW 69
34131: IN
34132: NOT
34133: OR
34134: IFFALSE 34138
// exit ;
34136: GO 34185
// for i = 1 to 3 do
34138: LD_ADDR_VAR 0 3
34142: PUSH
34143: DOUBLE
34144: LD_INT 1
34146: DEC
34147: ST_TO_ADDR
34148: LD_INT 3
34150: PUSH
34151: FOR_TO
34152: IFFALSE 34183
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34154: LD_VAR 0 1
34158: PPUSH
34159: CALL_OW 250
34163: PPUSH
34164: LD_VAR 0 1
34168: PPUSH
34169: CALL_OW 251
34173: PPUSH
34174: LD_INT 1
34176: PPUSH
34177: CALL_OW 453
34181: GO 34151
34183: POP
34184: POP
// end ;
34185: LD_VAR 0 2
34189: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34190: LD_INT 0
34192: PPUSH
34193: PPUSH
34194: PPUSH
34195: PPUSH
34196: PPUSH
34197: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34198: LD_VAR 0 1
34202: NOT
34203: PUSH
34204: LD_VAR 0 2
34208: NOT
34209: OR
34210: PUSH
34211: LD_VAR 0 1
34215: PPUSH
34216: CALL_OW 314
34220: OR
34221: IFFALSE 34225
// exit ;
34223: GO 34666
// x := GetX ( enemy_unit ) ;
34225: LD_ADDR_VAR 0 7
34229: PUSH
34230: LD_VAR 0 2
34234: PPUSH
34235: CALL_OW 250
34239: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34240: LD_ADDR_VAR 0 8
34244: PUSH
34245: LD_VAR 0 2
34249: PPUSH
34250: CALL_OW 251
34254: ST_TO_ADDR
// if not x or not y then
34255: LD_VAR 0 7
34259: NOT
34260: PUSH
34261: LD_VAR 0 8
34265: NOT
34266: OR
34267: IFFALSE 34271
// exit ;
34269: GO 34666
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34271: LD_ADDR_VAR 0 6
34275: PUSH
34276: LD_VAR 0 7
34280: PPUSH
34281: LD_INT 0
34283: PPUSH
34284: LD_INT 4
34286: PPUSH
34287: CALL_OW 272
34291: PUSH
34292: LD_VAR 0 8
34296: PPUSH
34297: LD_INT 0
34299: PPUSH
34300: LD_INT 4
34302: PPUSH
34303: CALL_OW 273
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_VAR 0 7
34316: PPUSH
34317: LD_INT 1
34319: PPUSH
34320: LD_INT 4
34322: PPUSH
34323: CALL_OW 272
34327: PUSH
34328: LD_VAR 0 8
34332: PPUSH
34333: LD_INT 1
34335: PPUSH
34336: LD_INT 4
34338: PPUSH
34339: CALL_OW 273
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_VAR 0 7
34352: PPUSH
34353: LD_INT 2
34355: PPUSH
34356: LD_INT 4
34358: PPUSH
34359: CALL_OW 272
34363: PUSH
34364: LD_VAR 0 8
34368: PPUSH
34369: LD_INT 2
34371: PPUSH
34372: LD_INT 4
34374: PPUSH
34375: CALL_OW 273
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_VAR 0 7
34388: PPUSH
34389: LD_INT 3
34391: PPUSH
34392: LD_INT 4
34394: PPUSH
34395: CALL_OW 272
34399: PUSH
34400: LD_VAR 0 8
34404: PPUSH
34405: LD_INT 3
34407: PPUSH
34408: LD_INT 4
34410: PPUSH
34411: CALL_OW 273
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_VAR 0 7
34424: PPUSH
34425: LD_INT 4
34427: PPUSH
34428: LD_INT 4
34430: PPUSH
34431: CALL_OW 272
34435: PUSH
34436: LD_VAR 0 8
34440: PPUSH
34441: LD_INT 4
34443: PPUSH
34444: LD_INT 4
34446: PPUSH
34447: CALL_OW 273
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_VAR 0 7
34460: PPUSH
34461: LD_INT 5
34463: PPUSH
34464: LD_INT 4
34466: PPUSH
34467: CALL_OW 272
34471: PUSH
34472: LD_VAR 0 8
34476: PPUSH
34477: LD_INT 5
34479: PPUSH
34480: LD_INT 4
34482: PPUSH
34483: CALL_OW 273
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: ST_TO_ADDR
// for i = tmp downto 1 do
34500: LD_ADDR_VAR 0 4
34504: PUSH
34505: DOUBLE
34506: LD_VAR 0 6
34510: INC
34511: ST_TO_ADDR
34512: LD_INT 1
34514: PUSH
34515: FOR_DOWNTO
34516: IFFALSE 34617
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34518: LD_VAR 0 6
34522: PUSH
34523: LD_VAR 0 4
34527: ARRAY
34528: PUSH
34529: LD_INT 1
34531: ARRAY
34532: PPUSH
34533: LD_VAR 0 6
34537: PUSH
34538: LD_VAR 0 4
34542: ARRAY
34543: PUSH
34544: LD_INT 2
34546: ARRAY
34547: PPUSH
34548: CALL_OW 488
34552: NOT
34553: PUSH
34554: LD_VAR 0 6
34558: PUSH
34559: LD_VAR 0 4
34563: ARRAY
34564: PUSH
34565: LD_INT 1
34567: ARRAY
34568: PPUSH
34569: LD_VAR 0 6
34573: PUSH
34574: LD_VAR 0 4
34578: ARRAY
34579: PUSH
34580: LD_INT 2
34582: ARRAY
34583: PPUSH
34584: CALL_OW 428
34588: PUSH
34589: LD_INT 0
34591: NONEQUAL
34592: OR
34593: IFFALSE 34615
// tmp := Delete ( tmp , i ) ;
34595: LD_ADDR_VAR 0 6
34599: PUSH
34600: LD_VAR 0 6
34604: PPUSH
34605: LD_VAR 0 4
34609: PPUSH
34610: CALL_OW 3
34614: ST_TO_ADDR
34615: GO 34515
34617: POP
34618: POP
// j := GetClosestHex ( unit , tmp ) ;
34619: LD_ADDR_VAR 0 5
34623: PUSH
34624: LD_VAR 0 1
34628: PPUSH
34629: LD_VAR 0 6
34633: PPUSH
34634: CALL 33919 0 2
34638: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34639: LD_VAR 0 1
34643: PPUSH
34644: LD_VAR 0 5
34648: PUSH
34649: LD_INT 1
34651: ARRAY
34652: PPUSH
34653: LD_VAR 0 5
34657: PUSH
34658: LD_INT 2
34660: ARRAY
34661: PPUSH
34662: CALL_OW 111
// end ;
34666: LD_VAR 0 3
34670: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34671: LD_INT 0
34673: PPUSH
34674: PPUSH
34675: PPUSH
// uc_side = 0 ;
34676: LD_ADDR_OWVAR 20
34680: PUSH
34681: LD_INT 0
34683: ST_TO_ADDR
// uc_nation = 0 ;
34684: LD_ADDR_OWVAR 21
34688: PUSH
34689: LD_INT 0
34691: ST_TO_ADDR
// InitHc_All ( ) ;
34692: CALL_OW 584
// InitVc ;
34696: CALL_OW 20
// if mastodonts then
34700: LD_VAR 0 6
34704: IFFALSE 34771
// for i = 1 to mastodonts do
34706: LD_ADDR_VAR 0 11
34710: PUSH
34711: DOUBLE
34712: LD_INT 1
34714: DEC
34715: ST_TO_ADDR
34716: LD_VAR 0 6
34720: PUSH
34721: FOR_TO
34722: IFFALSE 34769
// begin vc_chassis := 31 ;
34724: LD_ADDR_OWVAR 37
34728: PUSH
34729: LD_INT 31
34731: ST_TO_ADDR
// vc_control := control_rider ;
34732: LD_ADDR_OWVAR 38
34736: PUSH
34737: LD_INT 4
34739: ST_TO_ADDR
// animal := CreateVehicle ;
34740: LD_ADDR_VAR 0 12
34744: PUSH
34745: CALL_OW 45
34749: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34750: LD_VAR 0 12
34754: PPUSH
34755: LD_VAR 0 8
34759: PPUSH
34760: LD_INT 0
34762: PPUSH
34763: CALL 36959 0 3
// end ;
34767: GO 34721
34769: POP
34770: POP
// if horses then
34771: LD_VAR 0 5
34775: IFFALSE 34842
// for i = 1 to horses do
34777: LD_ADDR_VAR 0 11
34781: PUSH
34782: DOUBLE
34783: LD_INT 1
34785: DEC
34786: ST_TO_ADDR
34787: LD_VAR 0 5
34791: PUSH
34792: FOR_TO
34793: IFFALSE 34840
// begin hc_class := 21 ;
34795: LD_ADDR_OWVAR 28
34799: PUSH
34800: LD_INT 21
34802: ST_TO_ADDR
// hc_gallery :=  ;
34803: LD_ADDR_OWVAR 33
34807: PUSH
34808: LD_STRING 
34810: ST_TO_ADDR
// animal := CreateHuman ;
34811: LD_ADDR_VAR 0 12
34815: PUSH
34816: CALL_OW 44
34820: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34821: LD_VAR 0 12
34825: PPUSH
34826: LD_VAR 0 8
34830: PPUSH
34831: LD_INT 0
34833: PPUSH
34834: CALL 36959 0 3
// end ;
34838: GO 34792
34840: POP
34841: POP
// if birds then
34842: LD_VAR 0 1
34846: IFFALSE 34913
// for i = 1 to birds do
34848: LD_ADDR_VAR 0 11
34852: PUSH
34853: DOUBLE
34854: LD_INT 1
34856: DEC
34857: ST_TO_ADDR
34858: LD_VAR 0 1
34862: PUSH
34863: FOR_TO
34864: IFFALSE 34911
// begin hc_class = 18 ;
34866: LD_ADDR_OWVAR 28
34870: PUSH
34871: LD_INT 18
34873: ST_TO_ADDR
// hc_gallery =  ;
34874: LD_ADDR_OWVAR 33
34878: PUSH
34879: LD_STRING 
34881: ST_TO_ADDR
// animal := CreateHuman ;
34882: LD_ADDR_VAR 0 12
34886: PUSH
34887: CALL_OW 44
34891: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34892: LD_VAR 0 12
34896: PPUSH
34897: LD_VAR 0 8
34901: PPUSH
34902: LD_INT 0
34904: PPUSH
34905: CALL 36959 0 3
// end ;
34909: GO 34863
34911: POP
34912: POP
// if tigers then
34913: LD_VAR 0 2
34917: IFFALSE 35001
// for i = 1 to tigers do
34919: LD_ADDR_VAR 0 11
34923: PUSH
34924: DOUBLE
34925: LD_INT 1
34927: DEC
34928: ST_TO_ADDR
34929: LD_VAR 0 2
34933: PUSH
34934: FOR_TO
34935: IFFALSE 34999
// begin hc_class = class_tiger ;
34937: LD_ADDR_OWVAR 28
34941: PUSH
34942: LD_INT 14
34944: ST_TO_ADDR
// hc_gallery =  ;
34945: LD_ADDR_OWVAR 33
34949: PUSH
34950: LD_STRING 
34952: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34953: LD_ADDR_OWVAR 35
34957: PUSH
34958: LD_INT 7
34960: NEG
34961: PPUSH
34962: LD_INT 7
34964: PPUSH
34965: CALL_OW 12
34969: ST_TO_ADDR
// animal := CreateHuman ;
34970: LD_ADDR_VAR 0 12
34974: PUSH
34975: CALL_OW 44
34979: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34980: LD_VAR 0 12
34984: PPUSH
34985: LD_VAR 0 8
34989: PPUSH
34990: LD_INT 0
34992: PPUSH
34993: CALL 36959 0 3
// end ;
34997: GO 34934
34999: POP
35000: POP
// if apemans then
35001: LD_VAR 0 3
35005: IFFALSE 35128
// for i = 1 to apemans do
35007: LD_ADDR_VAR 0 11
35011: PUSH
35012: DOUBLE
35013: LD_INT 1
35015: DEC
35016: ST_TO_ADDR
35017: LD_VAR 0 3
35021: PUSH
35022: FOR_TO
35023: IFFALSE 35126
// begin hc_class = class_apeman ;
35025: LD_ADDR_OWVAR 28
35029: PUSH
35030: LD_INT 12
35032: ST_TO_ADDR
// hc_gallery =  ;
35033: LD_ADDR_OWVAR 33
35037: PUSH
35038: LD_STRING 
35040: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35041: LD_ADDR_OWVAR 35
35045: PUSH
35046: LD_INT 2
35048: NEG
35049: PPUSH
35050: LD_INT 2
35052: PPUSH
35053: CALL_OW 12
35057: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35058: LD_ADDR_OWVAR 31
35062: PUSH
35063: LD_INT 1
35065: PPUSH
35066: LD_INT 3
35068: PPUSH
35069: CALL_OW 12
35073: PUSH
35074: LD_INT 1
35076: PPUSH
35077: LD_INT 3
35079: PPUSH
35080: CALL_OW 12
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: LD_INT 0
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: ST_TO_ADDR
// animal := CreateHuman ;
35097: LD_ADDR_VAR 0 12
35101: PUSH
35102: CALL_OW 44
35106: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35107: LD_VAR 0 12
35111: PPUSH
35112: LD_VAR 0 8
35116: PPUSH
35117: LD_INT 0
35119: PPUSH
35120: CALL 36959 0 3
// end ;
35124: GO 35022
35126: POP
35127: POP
// if enchidnas then
35128: LD_VAR 0 4
35132: IFFALSE 35199
// for i = 1 to enchidnas do
35134: LD_ADDR_VAR 0 11
35138: PUSH
35139: DOUBLE
35140: LD_INT 1
35142: DEC
35143: ST_TO_ADDR
35144: LD_VAR 0 4
35148: PUSH
35149: FOR_TO
35150: IFFALSE 35197
// begin hc_class = 13 ;
35152: LD_ADDR_OWVAR 28
35156: PUSH
35157: LD_INT 13
35159: ST_TO_ADDR
// hc_gallery =  ;
35160: LD_ADDR_OWVAR 33
35164: PUSH
35165: LD_STRING 
35167: ST_TO_ADDR
// animal := CreateHuman ;
35168: LD_ADDR_VAR 0 12
35172: PUSH
35173: CALL_OW 44
35177: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35178: LD_VAR 0 12
35182: PPUSH
35183: LD_VAR 0 8
35187: PPUSH
35188: LD_INT 0
35190: PPUSH
35191: CALL 36959 0 3
// end ;
35195: GO 35149
35197: POP
35198: POP
// if fishes then
35199: LD_VAR 0 7
35203: IFFALSE 35270
// for i = 1 to fishes do
35205: LD_ADDR_VAR 0 11
35209: PUSH
35210: DOUBLE
35211: LD_INT 1
35213: DEC
35214: ST_TO_ADDR
35215: LD_VAR 0 7
35219: PUSH
35220: FOR_TO
35221: IFFALSE 35268
// begin hc_class = 20 ;
35223: LD_ADDR_OWVAR 28
35227: PUSH
35228: LD_INT 20
35230: ST_TO_ADDR
// hc_gallery =  ;
35231: LD_ADDR_OWVAR 33
35235: PUSH
35236: LD_STRING 
35238: ST_TO_ADDR
// animal := CreateHuman ;
35239: LD_ADDR_VAR 0 12
35243: PUSH
35244: CALL_OW 44
35248: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35249: LD_VAR 0 12
35253: PPUSH
35254: LD_VAR 0 9
35258: PPUSH
35259: LD_INT 0
35261: PPUSH
35262: CALL 36959 0 3
// end ;
35266: GO 35220
35268: POP
35269: POP
// end ;
35270: LD_VAR 0 10
35274: RET
// export function WantHeal ( sci , unit ) ; begin
35275: LD_INT 0
35277: PPUSH
// if GetTaskList ( sci ) > 0 then
35278: LD_VAR 0 1
35282: PPUSH
35283: CALL_OW 437
35287: PUSH
35288: LD_INT 0
35290: GREATER
35291: IFFALSE 35361
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35293: LD_VAR 0 1
35297: PPUSH
35298: CALL_OW 437
35302: PUSH
35303: LD_INT 1
35305: ARRAY
35306: PUSH
35307: LD_INT 1
35309: ARRAY
35310: PUSH
35311: LD_STRING l
35313: EQUAL
35314: PUSH
35315: LD_VAR 0 1
35319: PPUSH
35320: CALL_OW 437
35324: PUSH
35325: LD_INT 1
35327: ARRAY
35328: PUSH
35329: LD_INT 4
35331: ARRAY
35332: PUSH
35333: LD_VAR 0 2
35337: EQUAL
35338: AND
35339: IFFALSE 35351
// result := true else
35341: LD_ADDR_VAR 0 3
35345: PUSH
35346: LD_INT 1
35348: ST_TO_ADDR
35349: GO 35359
// result := false ;
35351: LD_ADDR_VAR 0 3
35355: PUSH
35356: LD_INT 0
35358: ST_TO_ADDR
// end else
35359: GO 35369
// result := false ;
35361: LD_ADDR_VAR 0 3
35365: PUSH
35366: LD_INT 0
35368: ST_TO_ADDR
// end ;
35369: LD_VAR 0 3
35373: RET
// export function HealTarget ( sci ) ; begin
35374: LD_INT 0
35376: PPUSH
// if not sci then
35377: LD_VAR 0 1
35381: NOT
35382: IFFALSE 35386
// exit ;
35384: GO 35451
// result := 0 ;
35386: LD_ADDR_VAR 0 2
35390: PUSH
35391: LD_INT 0
35393: ST_TO_ADDR
// if GetTaskList ( sci ) then
35394: LD_VAR 0 1
35398: PPUSH
35399: CALL_OW 437
35403: IFFALSE 35451
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35405: LD_VAR 0 1
35409: PPUSH
35410: CALL_OW 437
35414: PUSH
35415: LD_INT 1
35417: ARRAY
35418: PUSH
35419: LD_INT 1
35421: ARRAY
35422: PUSH
35423: LD_STRING l
35425: EQUAL
35426: IFFALSE 35451
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35428: LD_ADDR_VAR 0 2
35432: PUSH
35433: LD_VAR 0 1
35437: PPUSH
35438: CALL_OW 437
35442: PUSH
35443: LD_INT 1
35445: ARRAY
35446: PUSH
35447: LD_INT 4
35449: ARRAY
35450: ST_TO_ADDR
// end ;
35451: LD_VAR 0 2
35455: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35456: LD_INT 0
35458: PPUSH
35459: PPUSH
35460: PPUSH
35461: PPUSH
// if not base_units then
35462: LD_VAR 0 1
35466: NOT
35467: IFFALSE 35471
// exit ;
35469: GO 35558
// result := false ;
35471: LD_ADDR_VAR 0 2
35475: PUSH
35476: LD_INT 0
35478: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35479: LD_ADDR_VAR 0 5
35483: PUSH
35484: LD_VAR 0 1
35488: PPUSH
35489: LD_INT 21
35491: PUSH
35492: LD_INT 3
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PPUSH
35499: CALL_OW 72
35503: ST_TO_ADDR
// if not tmp then
35504: LD_VAR 0 5
35508: NOT
35509: IFFALSE 35513
// exit ;
35511: GO 35558
// for i in tmp do
35513: LD_ADDR_VAR 0 3
35517: PUSH
35518: LD_VAR 0 5
35522: PUSH
35523: FOR_IN
35524: IFFALSE 35556
// begin result := EnemyInRange ( i , 22 ) ;
35526: LD_ADDR_VAR 0 2
35530: PUSH
35531: LD_VAR 0 3
35535: PPUSH
35536: LD_INT 22
35538: PPUSH
35539: CALL 33794 0 2
35543: ST_TO_ADDR
// if result then
35544: LD_VAR 0 2
35548: IFFALSE 35554
// exit ;
35550: POP
35551: POP
35552: GO 35558
// end ;
35554: GO 35523
35556: POP
35557: POP
// end ;
35558: LD_VAR 0 2
35562: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
35563: LD_INT 0
35565: PPUSH
35566: PPUSH
// if not units then
35567: LD_VAR 0 1
35571: NOT
35572: IFFALSE 35576
// exit ;
35574: GO 35646
// result := [ ] ;
35576: LD_ADDR_VAR 0 3
35580: PUSH
35581: EMPTY
35582: ST_TO_ADDR
// for i in units do
35583: LD_ADDR_VAR 0 4
35587: PUSH
35588: LD_VAR 0 1
35592: PUSH
35593: FOR_IN
35594: IFFALSE 35644
// if GetTag ( i ) = tag then
35596: LD_VAR 0 4
35600: PPUSH
35601: CALL_OW 110
35605: PUSH
35606: LD_VAR 0 2
35610: EQUAL
35611: IFFALSE 35642
// result := Replace ( result , result + 1 , i ) ;
35613: LD_ADDR_VAR 0 3
35617: PUSH
35618: LD_VAR 0 3
35622: PPUSH
35623: LD_VAR 0 3
35627: PUSH
35628: LD_INT 1
35630: PLUS
35631: PPUSH
35632: LD_VAR 0 4
35636: PPUSH
35637: CALL_OW 1
35641: ST_TO_ADDR
35642: GO 35593
35644: POP
35645: POP
// end ;
35646: LD_VAR 0 3
35650: RET
// export function IsDriver ( un ) ; begin
35651: LD_INT 0
35653: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35654: LD_ADDR_VAR 0 2
35658: PUSH
35659: LD_VAR 0 1
35663: PUSH
35664: LD_INT 55
35666: PUSH
35667: EMPTY
35668: LIST
35669: PPUSH
35670: CALL_OW 69
35674: IN
35675: ST_TO_ADDR
// end ;
35676: LD_VAR 0 2
35680: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35681: LD_INT 0
35683: PPUSH
35684: PPUSH
// list := [ ] ;
35685: LD_ADDR_VAR 0 5
35689: PUSH
35690: EMPTY
35691: ST_TO_ADDR
// case d of 0 :
35692: LD_VAR 0 3
35696: PUSH
35697: LD_INT 0
35699: DOUBLE
35700: EQUAL
35701: IFTRUE 35705
35703: GO 35838
35705: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35706: LD_ADDR_VAR 0 5
35710: PUSH
35711: LD_VAR 0 1
35715: PUSH
35716: LD_INT 4
35718: MINUS
35719: PUSH
35720: LD_VAR 0 2
35724: PUSH
35725: LD_INT 4
35727: MINUS
35728: PUSH
35729: LD_INT 2
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: LIST
35736: PUSH
35737: LD_VAR 0 1
35741: PUSH
35742: LD_INT 3
35744: MINUS
35745: PUSH
35746: LD_VAR 0 2
35750: PUSH
35751: LD_INT 1
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: LIST
35758: PUSH
35759: LD_VAR 0 1
35763: PUSH
35764: LD_INT 4
35766: PLUS
35767: PUSH
35768: LD_VAR 0 2
35772: PUSH
35773: LD_INT 4
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: LIST
35780: PUSH
35781: LD_VAR 0 1
35785: PUSH
35786: LD_INT 3
35788: PLUS
35789: PUSH
35790: LD_VAR 0 2
35794: PUSH
35795: LD_INT 3
35797: PLUS
35798: PUSH
35799: LD_INT 5
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: LIST
35806: PUSH
35807: LD_VAR 0 1
35811: PUSH
35812: LD_VAR 0 2
35816: PUSH
35817: LD_INT 4
35819: PLUS
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: LIST
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: ST_TO_ADDR
// end ; 1 :
35836: GO 36536
35838: LD_INT 1
35840: DOUBLE
35841: EQUAL
35842: IFTRUE 35846
35844: GO 35979
35846: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35847: LD_ADDR_VAR 0 5
35851: PUSH
35852: LD_VAR 0 1
35856: PUSH
35857: LD_VAR 0 2
35861: PUSH
35862: LD_INT 4
35864: MINUS
35865: PUSH
35866: LD_INT 3
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: LIST
35873: PUSH
35874: LD_VAR 0 1
35878: PUSH
35879: LD_INT 3
35881: MINUS
35882: PUSH
35883: LD_VAR 0 2
35887: PUSH
35888: LD_INT 3
35890: MINUS
35891: PUSH
35892: LD_INT 2
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: LIST
35899: PUSH
35900: LD_VAR 0 1
35904: PUSH
35905: LD_INT 4
35907: MINUS
35908: PUSH
35909: LD_VAR 0 2
35913: PUSH
35914: LD_INT 1
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: LIST
35921: PUSH
35922: LD_VAR 0 1
35926: PUSH
35927: LD_VAR 0 2
35931: PUSH
35932: LD_INT 3
35934: PLUS
35935: PUSH
35936: LD_INT 0
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: LIST
35943: PUSH
35944: LD_VAR 0 1
35948: PUSH
35949: LD_INT 4
35951: PLUS
35952: PUSH
35953: LD_VAR 0 2
35957: PUSH
35958: LD_INT 4
35960: PLUS
35961: PUSH
35962: LD_INT 5
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: LIST
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: ST_TO_ADDR
// end ; 2 :
35977: GO 36536
35979: LD_INT 2
35981: DOUBLE
35982: EQUAL
35983: IFTRUE 35987
35985: GO 36116
35987: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35988: LD_ADDR_VAR 0 5
35992: PUSH
35993: LD_VAR 0 1
35997: PUSH
35998: LD_VAR 0 2
36002: PUSH
36003: LD_INT 3
36005: MINUS
36006: PUSH
36007: LD_INT 3
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: LIST
36014: PUSH
36015: LD_VAR 0 1
36019: PUSH
36020: LD_INT 4
36022: PLUS
36023: PUSH
36024: LD_VAR 0 2
36028: PUSH
36029: LD_INT 4
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: LIST
36036: PUSH
36037: LD_VAR 0 1
36041: PUSH
36042: LD_VAR 0 2
36046: PUSH
36047: LD_INT 4
36049: PLUS
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: LIST
36058: PUSH
36059: LD_VAR 0 1
36063: PUSH
36064: LD_INT 3
36066: MINUS
36067: PUSH
36068: LD_VAR 0 2
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: LIST
36080: PUSH
36081: LD_VAR 0 1
36085: PUSH
36086: LD_INT 4
36088: MINUS
36089: PUSH
36090: LD_VAR 0 2
36094: PUSH
36095: LD_INT 4
36097: MINUS
36098: PUSH
36099: LD_INT 2
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: LIST
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: ST_TO_ADDR
// end ; 3 :
36114: GO 36536
36116: LD_INT 3
36118: DOUBLE
36119: EQUAL
36120: IFTRUE 36124
36122: GO 36257
36124: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36125: LD_ADDR_VAR 0 5
36129: PUSH
36130: LD_VAR 0 1
36134: PUSH
36135: LD_INT 3
36137: PLUS
36138: PUSH
36139: LD_VAR 0 2
36143: PUSH
36144: LD_INT 4
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: LIST
36151: PUSH
36152: LD_VAR 0 1
36156: PUSH
36157: LD_INT 4
36159: PLUS
36160: PUSH
36161: LD_VAR 0 2
36165: PUSH
36166: LD_INT 4
36168: PLUS
36169: PUSH
36170: LD_INT 5
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: LIST
36177: PUSH
36178: LD_VAR 0 1
36182: PUSH
36183: LD_INT 4
36185: MINUS
36186: PUSH
36187: LD_VAR 0 2
36191: PUSH
36192: LD_INT 1
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: PUSH
36200: LD_VAR 0 1
36204: PUSH
36205: LD_VAR 0 2
36209: PUSH
36210: LD_INT 4
36212: MINUS
36213: PUSH
36214: LD_INT 3
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: LIST
36221: PUSH
36222: LD_VAR 0 1
36226: PUSH
36227: LD_INT 3
36229: MINUS
36230: PUSH
36231: LD_VAR 0 2
36235: PUSH
36236: LD_INT 3
36238: MINUS
36239: PUSH
36240: LD_INT 2
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: LIST
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: ST_TO_ADDR
// end ; 4 :
36255: GO 36536
36257: LD_INT 4
36259: DOUBLE
36260: EQUAL
36261: IFTRUE 36265
36263: GO 36398
36265: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36266: LD_ADDR_VAR 0 5
36270: PUSH
36271: LD_VAR 0 1
36275: PUSH
36276: LD_VAR 0 2
36280: PUSH
36281: LD_INT 4
36283: PLUS
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: LIST
36292: PUSH
36293: LD_VAR 0 1
36297: PUSH
36298: LD_INT 3
36300: PLUS
36301: PUSH
36302: LD_VAR 0 2
36306: PUSH
36307: LD_INT 3
36309: PLUS
36310: PUSH
36311: LD_INT 5
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: LIST
36318: PUSH
36319: LD_VAR 0 1
36323: PUSH
36324: LD_INT 4
36326: PLUS
36327: PUSH
36328: LD_VAR 0 2
36332: PUSH
36333: LD_INT 4
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: LIST
36340: PUSH
36341: LD_VAR 0 1
36345: PUSH
36346: LD_VAR 0 2
36350: PUSH
36351: LD_INT 3
36353: MINUS
36354: PUSH
36355: LD_INT 3
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: LIST
36362: PUSH
36363: LD_VAR 0 1
36367: PUSH
36368: LD_INT 4
36370: MINUS
36371: PUSH
36372: LD_VAR 0 2
36376: PUSH
36377: LD_INT 4
36379: MINUS
36380: PUSH
36381: LD_INT 2
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: LIST
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: ST_TO_ADDR
// end ; 5 :
36396: GO 36536
36398: LD_INT 5
36400: DOUBLE
36401: EQUAL
36402: IFTRUE 36406
36404: GO 36535
36406: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36407: LD_ADDR_VAR 0 5
36411: PUSH
36412: LD_VAR 0 1
36416: PUSH
36417: LD_INT 4
36419: MINUS
36420: PUSH
36421: LD_VAR 0 2
36425: PUSH
36426: LD_INT 1
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: LIST
36433: PUSH
36434: LD_VAR 0 1
36438: PUSH
36439: LD_VAR 0 2
36443: PUSH
36444: LD_INT 4
36446: MINUS
36447: PUSH
36448: LD_INT 3
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: LIST
36455: PUSH
36456: LD_VAR 0 1
36460: PUSH
36461: LD_INT 4
36463: PLUS
36464: PUSH
36465: LD_VAR 0 2
36469: PUSH
36470: LD_INT 4
36472: PLUS
36473: PUSH
36474: LD_INT 5
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: LIST
36481: PUSH
36482: LD_VAR 0 1
36486: PUSH
36487: LD_INT 3
36489: PLUS
36490: PUSH
36491: LD_VAR 0 2
36495: PUSH
36496: LD_INT 4
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: PUSH
36504: LD_VAR 0 1
36508: PUSH
36509: LD_VAR 0 2
36513: PUSH
36514: LD_INT 3
36516: PLUS
36517: PUSH
36518: LD_INT 0
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: LIST
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: ST_TO_ADDR
// end ; end ;
36533: GO 36536
36535: POP
// result := list ;
36536: LD_ADDR_VAR 0 4
36540: PUSH
36541: LD_VAR 0 5
36545: ST_TO_ADDR
// end ;
36546: LD_VAR 0 4
36550: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36551: LD_INT 0
36553: PPUSH
36554: PPUSH
36555: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36556: LD_VAR 0 1
36560: NOT
36561: PUSH
36562: LD_VAR 0 2
36566: PUSH
36567: LD_INT 1
36569: PUSH
36570: LD_INT 2
36572: PUSH
36573: LD_INT 3
36575: PUSH
36576: LD_INT 4
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: IN
36585: NOT
36586: OR
36587: IFFALSE 36591
// exit ;
36589: GO 36683
// tmp := [ ] ;
36591: LD_ADDR_VAR 0 5
36595: PUSH
36596: EMPTY
36597: ST_TO_ADDR
// for i in units do
36598: LD_ADDR_VAR 0 4
36602: PUSH
36603: LD_VAR 0 1
36607: PUSH
36608: FOR_IN
36609: IFFALSE 36652
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
36611: LD_ADDR_VAR 0 5
36615: PUSH
36616: LD_VAR 0 5
36620: PPUSH
36621: LD_VAR 0 5
36625: PUSH
36626: LD_INT 1
36628: PLUS
36629: PPUSH
36630: LD_VAR 0 4
36634: PPUSH
36635: LD_VAR 0 2
36639: PPUSH
36640: CALL_OW 259
36644: PPUSH
36645: CALL_OW 2
36649: ST_TO_ADDR
36650: GO 36608
36652: POP
36653: POP
// if not tmp then
36654: LD_VAR 0 5
36658: NOT
36659: IFFALSE 36663
// exit ;
36661: GO 36683
// result := SortListByListDesc ( units , tmp ) ;
36663: LD_ADDR_VAR 0 3
36667: PUSH
36668: LD_VAR 0 1
36672: PPUSH
36673: LD_VAR 0 5
36677: PPUSH
36678: CALL_OW 77
36682: ST_TO_ADDR
// end ;
36683: LD_VAR 0 3
36687: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36688: LD_INT 0
36690: PPUSH
36691: PPUSH
36692: PPUSH
// result := false ;
36693: LD_ADDR_VAR 0 3
36697: PUSH
36698: LD_INT 0
36700: ST_TO_ADDR
// x := GetX ( building ) ;
36701: LD_ADDR_VAR 0 4
36705: PUSH
36706: LD_VAR 0 2
36710: PPUSH
36711: CALL_OW 250
36715: ST_TO_ADDR
// y := GetY ( building ) ;
36716: LD_ADDR_VAR 0 5
36720: PUSH
36721: LD_VAR 0 2
36725: PPUSH
36726: CALL_OW 251
36730: ST_TO_ADDR
// if not building or not x or not y then
36731: LD_VAR 0 2
36735: NOT
36736: PUSH
36737: LD_VAR 0 4
36741: NOT
36742: OR
36743: PUSH
36744: LD_VAR 0 5
36748: NOT
36749: OR
36750: IFFALSE 36754
// exit ;
36752: GO 36846
// if GetTaskList ( unit ) then
36754: LD_VAR 0 1
36758: PPUSH
36759: CALL_OW 437
36763: IFFALSE 36846
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36765: LD_STRING e
36767: PUSH
36768: LD_VAR 0 1
36772: PPUSH
36773: CALL_OW 437
36777: PUSH
36778: LD_INT 1
36780: ARRAY
36781: PUSH
36782: LD_INT 1
36784: ARRAY
36785: EQUAL
36786: PUSH
36787: LD_VAR 0 4
36791: PUSH
36792: LD_VAR 0 1
36796: PPUSH
36797: CALL_OW 437
36801: PUSH
36802: LD_INT 1
36804: ARRAY
36805: PUSH
36806: LD_INT 2
36808: ARRAY
36809: EQUAL
36810: AND
36811: PUSH
36812: LD_VAR 0 5
36816: PUSH
36817: LD_VAR 0 1
36821: PPUSH
36822: CALL_OW 437
36826: PUSH
36827: LD_INT 1
36829: ARRAY
36830: PUSH
36831: LD_INT 3
36833: ARRAY
36834: EQUAL
36835: AND
36836: IFFALSE 36846
// result := true end ;
36838: LD_ADDR_VAR 0 3
36842: PUSH
36843: LD_INT 1
36845: ST_TO_ADDR
// end ;
36846: LD_VAR 0 3
36850: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36851: LD_INT 0
36853: PPUSH
// result := false ;
36854: LD_ADDR_VAR 0 4
36858: PUSH
36859: LD_INT 0
36861: ST_TO_ADDR
// if GetTaskList ( unit ) then
36862: LD_VAR 0 1
36866: PPUSH
36867: CALL_OW 437
36871: IFFALSE 36954
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36873: LD_STRING M
36875: PUSH
36876: LD_VAR 0 1
36880: PPUSH
36881: CALL_OW 437
36885: PUSH
36886: LD_INT 1
36888: ARRAY
36889: PUSH
36890: LD_INT 1
36892: ARRAY
36893: EQUAL
36894: PUSH
36895: LD_VAR 0 2
36899: PUSH
36900: LD_VAR 0 1
36904: PPUSH
36905: CALL_OW 437
36909: PUSH
36910: LD_INT 1
36912: ARRAY
36913: PUSH
36914: LD_INT 2
36916: ARRAY
36917: EQUAL
36918: AND
36919: PUSH
36920: LD_VAR 0 3
36924: PUSH
36925: LD_VAR 0 1
36929: PPUSH
36930: CALL_OW 437
36934: PUSH
36935: LD_INT 1
36937: ARRAY
36938: PUSH
36939: LD_INT 3
36941: ARRAY
36942: EQUAL
36943: AND
36944: IFFALSE 36954
// result := true ;
36946: LD_ADDR_VAR 0 4
36950: PUSH
36951: LD_INT 1
36953: ST_TO_ADDR
// end ; end ;
36954: LD_VAR 0 4
36958: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36959: LD_INT 0
36961: PPUSH
36962: PPUSH
36963: PPUSH
36964: PPUSH
// if not unit or not area then
36965: LD_VAR 0 1
36969: NOT
36970: PUSH
36971: LD_VAR 0 2
36975: NOT
36976: OR
36977: IFFALSE 36981
// exit ;
36979: GO 37145
// tmp := AreaToList ( area , i ) ;
36981: LD_ADDR_VAR 0 6
36985: PUSH
36986: LD_VAR 0 2
36990: PPUSH
36991: LD_VAR 0 5
36995: PPUSH
36996: CALL_OW 517
37000: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37001: LD_ADDR_VAR 0 5
37005: PUSH
37006: DOUBLE
37007: LD_INT 1
37009: DEC
37010: ST_TO_ADDR
37011: LD_VAR 0 6
37015: PUSH
37016: LD_INT 1
37018: ARRAY
37019: PUSH
37020: FOR_TO
37021: IFFALSE 37143
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37023: LD_ADDR_VAR 0 7
37027: PUSH
37028: LD_VAR 0 6
37032: PUSH
37033: LD_INT 1
37035: ARRAY
37036: PUSH
37037: LD_VAR 0 5
37041: ARRAY
37042: PUSH
37043: LD_VAR 0 6
37047: PUSH
37048: LD_INT 2
37050: ARRAY
37051: PUSH
37052: LD_VAR 0 5
37056: ARRAY
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
37062: LD_VAR 0 7
37066: PUSH
37067: LD_INT 1
37069: ARRAY
37070: PPUSH
37071: LD_VAR 0 7
37075: PUSH
37076: LD_INT 2
37078: ARRAY
37079: PPUSH
37080: CALL_OW 428
37084: PUSH
37085: LD_INT 0
37087: EQUAL
37088: IFFALSE 37141
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37090: LD_VAR 0 1
37094: PPUSH
37095: LD_VAR 0 7
37099: PUSH
37100: LD_INT 1
37102: ARRAY
37103: PPUSH
37104: LD_VAR 0 7
37108: PUSH
37109: LD_INT 2
37111: ARRAY
37112: PPUSH
37113: LD_VAR 0 3
37117: PPUSH
37118: CALL_OW 48
// result := IsPlaced ( unit ) ;
37122: LD_ADDR_VAR 0 4
37126: PUSH
37127: LD_VAR 0 1
37131: PPUSH
37132: CALL_OW 305
37136: ST_TO_ADDR
// exit ;
37137: POP
37138: POP
37139: GO 37145
// end ; end ;
37141: GO 37020
37143: POP
37144: POP
// end ;
37145: LD_VAR 0 4
37149: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37150: LD_INT 0
37152: PPUSH
37153: PPUSH
37154: PPUSH
// if not side or side > 8 then
37155: LD_VAR 0 1
37159: NOT
37160: PUSH
37161: LD_VAR 0 1
37165: PUSH
37166: LD_INT 8
37168: GREATER
37169: OR
37170: IFFALSE 37174
// exit ;
37172: GO 37361
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37174: LD_ADDR_VAR 0 4
37178: PUSH
37179: LD_INT 22
37181: PUSH
37182: LD_VAR 0 1
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 21
37193: PUSH
37194: LD_INT 3
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PPUSH
37205: CALL_OW 69
37209: ST_TO_ADDR
// if not tmp then
37210: LD_VAR 0 4
37214: NOT
37215: IFFALSE 37219
// exit ;
37217: GO 37361
// enable_addtolog := true ;
37219: LD_ADDR_OWVAR 81
37223: PUSH
37224: LD_INT 1
37226: ST_TO_ADDR
// AddToLog ( [ ) ;
37227: LD_STRING [
37229: PPUSH
37230: CALL_OW 561
// for i in tmp do
37234: LD_ADDR_VAR 0 3
37238: PUSH
37239: LD_VAR 0 4
37243: PUSH
37244: FOR_IN
37245: IFFALSE 37352
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37247: LD_STRING [
37249: PUSH
37250: LD_VAR 0 3
37254: PPUSH
37255: CALL_OW 266
37259: STR
37260: PUSH
37261: LD_STRING , 
37263: STR
37264: PUSH
37265: LD_VAR 0 3
37269: PPUSH
37270: CALL_OW 250
37274: STR
37275: PUSH
37276: LD_STRING , 
37278: STR
37279: PUSH
37280: LD_VAR 0 3
37284: PPUSH
37285: CALL_OW 251
37289: STR
37290: PUSH
37291: LD_STRING , 
37293: STR
37294: PUSH
37295: LD_VAR 0 3
37299: PPUSH
37300: CALL_OW 254
37304: STR
37305: PUSH
37306: LD_STRING , 
37308: STR
37309: PUSH
37310: LD_VAR 0 3
37314: PPUSH
37315: LD_INT 1
37317: PPUSH
37318: CALL_OW 268
37322: STR
37323: PUSH
37324: LD_STRING , 
37326: STR
37327: PUSH
37328: LD_VAR 0 3
37332: PPUSH
37333: LD_INT 2
37335: PPUSH
37336: CALL_OW 268
37340: STR
37341: PUSH
37342: LD_STRING ],
37344: STR
37345: PPUSH
37346: CALL_OW 561
// end ;
37350: GO 37244
37352: POP
37353: POP
// AddToLog ( ]; ) ;
37354: LD_STRING ];
37356: PPUSH
37357: CALL_OW 561
// end ;
37361: LD_VAR 0 2
37365: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37366: LD_INT 0
37368: PPUSH
37369: PPUSH
37370: PPUSH
37371: PPUSH
37372: PPUSH
// if not area or not rate or not max then
37373: LD_VAR 0 1
37377: NOT
37378: PUSH
37379: LD_VAR 0 2
37383: NOT
37384: OR
37385: PUSH
37386: LD_VAR 0 4
37390: NOT
37391: OR
37392: IFFALSE 37396
// exit ;
37394: GO 37588
// while 1 do
37396: LD_INT 1
37398: IFFALSE 37588
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37400: LD_ADDR_VAR 0 9
37404: PUSH
37405: LD_VAR 0 1
37409: PPUSH
37410: LD_INT 1
37412: PPUSH
37413: CALL_OW 287
37417: PUSH
37418: LD_INT 10
37420: MUL
37421: ST_TO_ADDR
// r := rate / 10 ;
37422: LD_ADDR_VAR 0 7
37426: PUSH
37427: LD_VAR 0 2
37431: PUSH
37432: LD_INT 10
37434: DIVREAL
37435: ST_TO_ADDR
// time := 1 1$00 ;
37436: LD_ADDR_VAR 0 8
37440: PUSH
37441: LD_INT 2100
37443: ST_TO_ADDR
// if amount < min then
37444: LD_VAR 0 9
37448: PUSH
37449: LD_VAR 0 3
37453: LESS
37454: IFFALSE 37472
// r := r * 2 else
37456: LD_ADDR_VAR 0 7
37460: PUSH
37461: LD_VAR 0 7
37465: PUSH
37466: LD_INT 2
37468: MUL
37469: ST_TO_ADDR
37470: GO 37498
// if amount > max then
37472: LD_VAR 0 9
37476: PUSH
37477: LD_VAR 0 4
37481: GREATER
37482: IFFALSE 37498
// r := r / 2 ;
37484: LD_ADDR_VAR 0 7
37488: PUSH
37489: LD_VAR 0 7
37493: PUSH
37494: LD_INT 2
37496: DIVREAL
37497: ST_TO_ADDR
// time := time / r ;
37498: LD_ADDR_VAR 0 8
37502: PUSH
37503: LD_VAR 0 8
37507: PUSH
37508: LD_VAR 0 7
37512: DIVREAL
37513: ST_TO_ADDR
// if time < 0 then
37514: LD_VAR 0 8
37518: PUSH
37519: LD_INT 0
37521: LESS
37522: IFFALSE 37539
// time := time * - 1 ;
37524: LD_ADDR_VAR 0 8
37528: PUSH
37529: LD_VAR 0 8
37533: PUSH
37534: LD_INT 1
37536: NEG
37537: MUL
37538: ST_TO_ADDR
// wait ( time ) ;
37539: LD_VAR 0 8
37543: PPUSH
37544: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
37548: LD_INT 35
37550: PPUSH
37551: LD_INT 875
37553: PPUSH
37554: CALL_OW 12
37558: PPUSH
37559: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37563: LD_INT 1
37565: PPUSH
37566: LD_INT 5
37568: PPUSH
37569: CALL_OW 12
37573: PPUSH
37574: LD_VAR 0 1
37578: PPUSH
37579: LD_INT 1
37581: PPUSH
37582: CALL_OW 55
// end ;
37586: GO 37396
// end ;
37588: LD_VAR 0 5
37592: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37593: LD_INT 0
37595: PPUSH
37596: PPUSH
37597: PPUSH
37598: PPUSH
37599: PPUSH
37600: PPUSH
37601: PPUSH
37602: PPUSH
// if not turrets or not factories then
37603: LD_VAR 0 1
37607: NOT
37608: PUSH
37609: LD_VAR 0 2
37613: NOT
37614: OR
37615: IFFALSE 37619
// exit ;
37617: GO 37926
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37619: LD_ADDR_VAR 0 10
37623: PUSH
37624: LD_INT 5
37626: PUSH
37627: LD_INT 6
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 2
37636: PUSH
37637: LD_INT 4
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 3
37646: PUSH
37647: LD_INT 5
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 24
37661: PUSH
37662: LD_INT 25
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 23
37671: PUSH
37672: LD_INT 27
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 42
37685: PUSH
37686: LD_INT 43
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 44
37695: PUSH
37696: LD_INT 46
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 45
37705: PUSH
37706: LD_INT 47
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: LIST
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: LIST
37722: ST_TO_ADDR
// result := [ ] ;
37723: LD_ADDR_VAR 0 3
37727: PUSH
37728: EMPTY
37729: ST_TO_ADDR
// for i in turrets do
37730: LD_ADDR_VAR 0 4
37734: PUSH
37735: LD_VAR 0 1
37739: PUSH
37740: FOR_IN
37741: IFFALSE 37924
// begin nat := GetNation ( i ) ;
37743: LD_ADDR_VAR 0 7
37747: PUSH
37748: LD_VAR 0 4
37752: PPUSH
37753: CALL_OW 248
37757: ST_TO_ADDR
// weapon := 0 ;
37758: LD_ADDR_VAR 0 8
37762: PUSH
37763: LD_INT 0
37765: ST_TO_ADDR
// if not nat then
37766: LD_VAR 0 7
37770: NOT
37771: IFFALSE 37775
// continue ;
37773: GO 37740
// for j in list [ nat ] do
37775: LD_ADDR_VAR 0 5
37779: PUSH
37780: LD_VAR 0 10
37784: PUSH
37785: LD_VAR 0 7
37789: ARRAY
37790: PUSH
37791: FOR_IN
37792: IFFALSE 37833
// if GetBWeapon ( i ) = j [ 1 ] then
37794: LD_VAR 0 4
37798: PPUSH
37799: CALL_OW 269
37803: PUSH
37804: LD_VAR 0 5
37808: PUSH
37809: LD_INT 1
37811: ARRAY
37812: EQUAL
37813: IFFALSE 37831
// begin weapon := j [ 2 ] ;
37815: LD_ADDR_VAR 0 8
37819: PUSH
37820: LD_VAR 0 5
37824: PUSH
37825: LD_INT 2
37827: ARRAY
37828: ST_TO_ADDR
// break ;
37829: GO 37833
// end ;
37831: GO 37791
37833: POP
37834: POP
// if not weapon then
37835: LD_VAR 0 8
37839: NOT
37840: IFFALSE 37844
// continue ;
37842: GO 37740
// for k in factories do
37844: LD_ADDR_VAR 0 6
37848: PUSH
37849: LD_VAR 0 2
37853: PUSH
37854: FOR_IN
37855: IFFALSE 37920
// begin weapons := AvailableWeaponList ( k ) ;
37857: LD_ADDR_VAR 0 9
37861: PUSH
37862: LD_VAR 0 6
37866: PPUSH
37867: CALL_OW 478
37871: ST_TO_ADDR
// if not weapons then
37872: LD_VAR 0 9
37876: NOT
37877: IFFALSE 37881
// continue ;
37879: GO 37854
// if weapon in weapons then
37881: LD_VAR 0 8
37885: PUSH
37886: LD_VAR 0 9
37890: IN
37891: IFFALSE 37918
// begin result := [ i , weapon ] ;
37893: LD_ADDR_VAR 0 3
37897: PUSH
37898: LD_VAR 0 4
37902: PUSH
37903: LD_VAR 0 8
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: ST_TO_ADDR
// exit ;
37912: POP
37913: POP
37914: POP
37915: POP
37916: GO 37926
// end ; end ;
37918: GO 37854
37920: POP
37921: POP
// end ;
37922: GO 37740
37924: POP
37925: POP
// end ;
37926: LD_VAR 0 3
37930: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37931: LD_INT 0
37933: PPUSH
// if not side or side > 8 then
37934: LD_VAR 0 3
37938: NOT
37939: PUSH
37940: LD_VAR 0 3
37944: PUSH
37945: LD_INT 8
37947: GREATER
37948: OR
37949: IFFALSE 37953
// exit ;
37951: GO 38012
// if not range then
37953: LD_VAR 0 4
37957: NOT
37958: IFFALSE 37969
// range := - 12 ;
37960: LD_ADDR_VAR 0 4
37964: PUSH
37965: LD_INT 12
37967: NEG
37968: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37969: LD_VAR 0 1
37973: PPUSH
37974: LD_VAR 0 2
37978: PPUSH
37979: LD_VAR 0 3
37983: PPUSH
37984: LD_VAR 0 4
37988: PPUSH
37989: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37993: LD_VAR 0 1
37997: PPUSH
37998: LD_VAR 0 2
38002: PPUSH
38003: LD_VAR 0 3
38007: PPUSH
38008: CALL_OW 331
// end ;
38012: LD_VAR 0 5
38016: RET
// export function Video ( mode ) ; begin
38017: LD_INT 0
38019: PPUSH
// ingame_video = mode ;
38020: LD_ADDR_OWVAR 52
38024: PUSH
38025: LD_VAR 0 1
38029: ST_TO_ADDR
// interface_hidden = mode ;
38030: LD_ADDR_OWVAR 54
38034: PUSH
38035: LD_VAR 0 1
38039: ST_TO_ADDR
// end ;
38040: LD_VAR 0 2
38044: RET
// export function Join ( array , element ) ; begin
38045: LD_INT 0
38047: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38048: LD_ADDR_VAR 0 3
38052: PUSH
38053: LD_VAR 0 1
38057: PPUSH
38058: LD_VAR 0 1
38062: PUSH
38063: LD_INT 1
38065: PLUS
38066: PPUSH
38067: LD_VAR 0 2
38071: PPUSH
38072: CALL_OW 1
38076: ST_TO_ADDR
// end ;
38077: LD_VAR 0 3
38081: RET
// export function JoinUnion ( array , element ) ; begin
38082: LD_INT 0
38084: PPUSH
// result := array union element ;
38085: LD_ADDR_VAR 0 3
38089: PUSH
38090: LD_VAR 0 1
38094: PUSH
38095: LD_VAR 0 2
38099: UNION
38100: ST_TO_ADDR
// end ;
38101: LD_VAR 0 3
38105: RET
// export function GetBehemoths ( side ) ; begin
38106: LD_INT 0
38108: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
38109: LD_ADDR_VAR 0 2
38113: PUSH
38114: LD_INT 22
38116: PUSH
38117: LD_VAR 0 1
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 31
38128: PUSH
38129: LD_INT 25
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PPUSH
38140: CALL_OW 69
38144: ST_TO_ADDR
// end ;
38145: LD_VAR 0 2
38149: RET
// export function Shuffle ( array ) ; var i , index ; begin
38150: LD_INT 0
38152: PPUSH
38153: PPUSH
38154: PPUSH
// result := [ ] ;
38155: LD_ADDR_VAR 0 2
38159: PUSH
38160: EMPTY
38161: ST_TO_ADDR
// if not array then
38162: LD_VAR 0 1
38166: NOT
38167: IFFALSE 38171
// exit ;
38169: GO 38270
// Randomize ;
38171: CALL_OW 10
// for i = array downto 1 do
38175: LD_ADDR_VAR 0 3
38179: PUSH
38180: DOUBLE
38181: LD_VAR 0 1
38185: INC
38186: ST_TO_ADDR
38187: LD_INT 1
38189: PUSH
38190: FOR_DOWNTO
38191: IFFALSE 38268
// begin index := rand ( 1 , array ) ;
38193: LD_ADDR_VAR 0 4
38197: PUSH
38198: LD_INT 1
38200: PPUSH
38201: LD_VAR 0 1
38205: PPUSH
38206: CALL_OW 12
38210: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38211: LD_ADDR_VAR 0 2
38215: PUSH
38216: LD_VAR 0 2
38220: PPUSH
38221: LD_VAR 0 2
38225: PUSH
38226: LD_INT 1
38228: PLUS
38229: PPUSH
38230: LD_VAR 0 1
38234: PUSH
38235: LD_VAR 0 4
38239: ARRAY
38240: PPUSH
38241: CALL_OW 2
38245: ST_TO_ADDR
// array := Delete ( array , index ) ;
38246: LD_ADDR_VAR 0 1
38250: PUSH
38251: LD_VAR 0 1
38255: PPUSH
38256: LD_VAR 0 4
38260: PPUSH
38261: CALL_OW 3
38265: ST_TO_ADDR
// end ;
38266: GO 38190
38268: POP
38269: POP
// end ;
38270: LD_VAR 0 2
38274: RET
// export function GetBaseMaterials ( base ) ; begin
38275: LD_INT 0
38277: PPUSH
// result := [ 0 , 0 , 0 ] ;
38278: LD_ADDR_VAR 0 2
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: LIST
38296: ST_TO_ADDR
// if not base then
38297: LD_VAR 0 1
38301: NOT
38302: IFFALSE 38306
// exit ;
38304: GO 38355
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38306: LD_ADDR_VAR 0 2
38310: PUSH
38311: LD_VAR 0 1
38315: PPUSH
38316: LD_INT 1
38318: PPUSH
38319: CALL_OW 275
38323: PUSH
38324: LD_VAR 0 1
38328: PPUSH
38329: LD_INT 2
38331: PPUSH
38332: CALL_OW 275
38336: PUSH
38337: LD_VAR 0 1
38341: PPUSH
38342: LD_INT 3
38344: PPUSH
38345: CALL_OW 275
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: LIST
38354: ST_TO_ADDR
// end ;
38355: LD_VAR 0 2
38359: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38360: LD_INT 0
38362: PPUSH
38363: PPUSH
// result := array ;
38364: LD_ADDR_VAR 0 3
38368: PUSH
38369: LD_VAR 0 1
38373: ST_TO_ADDR
// if size > 0 then
38374: LD_VAR 0 2
38378: PUSH
38379: LD_INT 0
38381: GREATER
38382: IFFALSE 38428
// for i := array downto size do
38384: LD_ADDR_VAR 0 4
38388: PUSH
38389: DOUBLE
38390: LD_VAR 0 1
38394: INC
38395: ST_TO_ADDR
38396: LD_VAR 0 2
38400: PUSH
38401: FOR_DOWNTO
38402: IFFALSE 38426
// result := Delete ( result , result ) ;
38404: LD_ADDR_VAR 0 3
38408: PUSH
38409: LD_VAR 0 3
38413: PPUSH
38414: LD_VAR 0 3
38418: PPUSH
38419: CALL_OW 3
38423: ST_TO_ADDR
38424: GO 38401
38426: POP
38427: POP
// end ;
38428: LD_VAR 0 3
38432: RET
// export function ComExit ( unit ) ; var tmp ; begin
38433: LD_INT 0
38435: PPUSH
38436: PPUSH
// if not IsInUnit ( unit ) then
38437: LD_VAR 0 1
38441: PPUSH
38442: CALL_OW 310
38446: NOT
38447: IFFALSE 38451
// exit ;
38449: GO 38511
// tmp := IsInUnit ( unit ) ;
38451: LD_ADDR_VAR 0 3
38455: PUSH
38456: LD_VAR 0 1
38460: PPUSH
38461: CALL_OW 310
38465: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38466: LD_VAR 0 3
38470: PPUSH
38471: CALL_OW 247
38475: PUSH
38476: LD_INT 2
38478: EQUAL
38479: IFFALSE 38492
// ComExitVehicle ( unit ) else
38481: LD_VAR 0 1
38485: PPUSH
38486: CALL_OW 121
38490: GO 38501
// ComExitBuilding ( unit ) ;
38492: LD_VAR 0 1
38496: PPUSH
38497: CALL_OW 122
// result := tmp ;
38501: LD_ADDR_VAR 0 2
38505: PUSH
38506: LD_VAR 0 3
38510: ST_TO_ADDR
// end ;
38511: LD_VAR 0 2
38515: RET
// export function ComExitAll ( units ) ; var i ; begin
38516: LD_INT 0
38518: PPUSH
38519: PPUSH
// if not units then
38520: LD_VAR 0 1
38524: NOT
38525: IFFALSE 38529
// exit ;
38527: GO 38555
// for i in units do
38529: LD_ADDR_VAR 0 3
38533: PUSH
38534: LD_VAR 0 1
38538: PUSH
38539: FOR_IN
38540: IFFALSE 38553
// ComExit ( i ) ;
38542: LD_VAR 0 3
38546: PPUSH
38547: CALL 38433 0 1
38551: GO 38539
38553: POP
38554: POP
// end ;
38555: LD_VAR 0 2
38559: RET
// export function ResetHc ; begin
38560: LD_INT 0
38562: PPUSH
// InitHc ;
38563: CALL_OW 19
// hc_importance := 0 ;
38567: LD_ADDR_OWVAR 32
38571: PUSH
38572: LD_INT 0
38574: ST_TO_ADDR
// end ;
38575: LD_VAR 0 1
38579: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38580: LD_INT 0
38582: PPUSH
38583: PPUSH
38584: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38585: LD_ADDR_VAR 0 6
38589: PUSH
38590: LD_VAR 0 1
38594: PUSH
38595: LD_VAR 0 3
38599: PLUS
38600: PUSH
38601: LD_INT 2
38603: DIV
38604: ST_TO_ADDR
// if _x < 0 then
38605: LD_VAR 0 6
38609: PUSH
38610: LD_INT 0
38612: LESS
38613: IFFALSE 38630
// _x := _x * - 1 ;
38615: LD_ADDR_VAR 0 6
38619: PUSH
38620: LD_VAR 0 6
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: MUL
38629: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38630: LD_ADDR_VAR 0 7
38634: PUSH
38635: LD_VAR 0 2
38639: PUSH
38640: LD_VAR 0 4
38644: PLUS
38645: PUSH
38646: LD_INT 2
38648: DIV
38649: ST_TO_ADDR
// if _y < 0 then
38650: LD_VAR 0 7
38654: PUSH
38655: LD_INT 0
38657: LESS
38658: IFFALSE 38675
// _y := _y * - 1 ;
38660: LD_ADDR_VAR 0 7
38664: PUSH
38665: LD_VAR 0 7
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: MUL
38674: ST_TO_ADDR
// result := [ _x , _y ] ;
38675: LD_ADDR_VAR 0 5
38679: PUSH
38680: LD_VAR 0 6
38684: PUSH
38685: LD_VAR 0 7
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: ST_TO_ADDR
// end ;
38694: LD_VAR 0 5
38698: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38699: LD_INT 0
38701: PPUSH
38702: PPUSH
38703: PPUSH
38704: PPUSH
// task := GetTaskList ( unit ) ;
38705: LD_ADDR_VAR 0 7
38709: PUSH
38710: LD_VAR 0 1
38714: PPUSH
38715: CALL_OW 437
38719: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38720: LD_VAR 0 7
38724: NOT
38725: PUSH
38726: LD_VAR 0 1
38730: PPUSH
38731: LD_VAR 0 2
38735: PPUSH
38736: CALL_OW 308
38740: NOT
38741: AND
38742: IFFALSE 38746
// exit ;
38744: GO 38864
// if IsInArea ( unit , area ) then
38746: LD_VAR 0 1
38750: PPUSH
38751: LD_VAR 0 2
38755: PPUSH
38756: CALL_OW 308
38760: IFFALSE 38778
// begin ComMoveToArea ( unit , goAway ) ;
38762: LD_VAR 0 1
38766: PPUSH
38767: LD_VAR 0 3
38771: PPUSH
38772: CALL_OW 113
// exit ;
38776: GO 38864
// end ; if task [ 1 ] [ 1 ] <> M then
38778: LD_VAR 0 7
38782: PUSH
38783: LD_INT 1
38785: ARRAY
38786: PUSH
38787: LD_INT 1
38789: ARRAY
38790: PUSH
38791: LD_STRING M
38793: NONEQUAL
38794: IFFALSE 38798
// exit ;
38796: GO 38864
// x := task [ 1 ] [ 2 ] ;
38798: LD_ADDR_VAR 0 5
38802: PUSH
38803: LD_VAR 0 7
38807: PUSH
38808: LD_INT 1
38810: ARRAY
38811: PUSH
38812: LD_INT 2
38814: ARRAY
38815: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38816: LD_ADDR_VAR 0 6
38820: PUSH
38821: LD_VAR 0 7
38825: PUSH
38826: LD_INT 1
38828: ARRAY
38829: PUSH
38830: LD_INT 3
38832: ARRAY
38833: ST_TO_ADDR
// if InArea ( x , y , area ) then
38834: LD_VAR 0 5
38838: PPUSH
38839: LD_VAR 0 6
38843: PPUSH
38844: LD_VAR 0 2
38848: PPUSH
38849: CALL_OW 309
38853: IFFALSE 38864
// ComStop ( unit ) ;
38855: LD_VAR 0 1
38859: PPUSH
38860: CALL_OW 141
// end ;
38864: LD_VAR 0 4
38868: RET
// export function Abs ( value ) ; begin
38869: LD_INT 0
38871: PPUSH
// result := value ;
38872: LD_ADDR_VAR 0 2
38876: PUSH
38877: LD_VAR 0 1
38881: ST_TO_ADDR
// if value < 0 then
38882: LD_VAR 0 1
38886: PUSH
38887: LD_INT 0
38889: LESS
38890: IFFALSE 38907
// result := value * - 1 ;
38892: LD_ADDR_VAR 0 2
38896: PUSH
38897: LD_VAR 0 1
38901: PUSH
38902: LD_INT 1
38904: NEG
38905: MUL
38906: ST_TO_ADDR
// end ;
38907: LD_VAR 0 2
38911: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38912: LD_INT 0
38914: PPUSH
38915: PPUSH
38916: PPUSH
38917: PPUSH
38918: PPUSH
38919: PPUSH
38920: PPUSH
38921: PPUSH
// if not unit or not building then
38922: LD_VAR 0 1
38926: NOT
38927: PUSH
38928: LD_VAR 0 2
38932: NOT
38933: OR
38934: IFFALSE 38938
// exit ;
38936: GO 39164
// x := GetX ( building ) ;
38938: LD_ADDR_VAR 0 4
38942: PUSH
38943: LD_VAR 0 2
38947: PPUSH
38948: CALL_OW 250
38952: ST_TO_ADDR
// y := GetY ( building ) ;
38953: LD_ADDR_VAR 0 6
38957: PUSH
38958: LD_VAR 0 2
38962: PPUSH
38963: CALL_OW 251
38967: ST_TO_ADDR
// d := GetDir ( building ) ;
38968: LD_ADDR_VAR 0 8
38972: PUSH
38973: LD_VAR 0 2
38977: PPUSH
38978: CALL_OW 254
38982: ST_TO_ADDR
// r := 4 ;
38983: LD_ADDR_VAR 0 9
38987: PUSH
38988: LD_INT 4
38990: ST_TO_ADDR
// for i := 1 to 5 do
38991: LD_ADDR_VAR 0 10
38995: PUSH
38996: DOUBLE
38997: LD_INT 1
38999: DEC
39000: ST_TO_ADDR
39001: LD_INT 5
39003: PUSH
39004: FOR_TO
39005: IFFALSE 39162
// begin _x := ShiftX ( x , d , r + i ) ;
39007: LD_ADDR_VAR 0 5
39011: PUSH
39012: LD_VAR 0 4
39016: PPUSH
39017: LD_VAR 0 8
39021: PPUSH
39022: LD_VAR 0 9
39026: PUSH
39027: LD_VAR 0 10
39031: PLUS
39032: PPUSH
39033: CALL_OW 272
39037: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39038: LD_ADDR_VAR 0 7
39042: PUSH
39043: LD_VAR 0 6
39047: PPUSH
39048: LD_VAR 0 8
39052: PPUSH
39053: LD_VAR 0 9
39057: PUSH
39058: LD_VAR 0 10
39062: PLUS
39063: PPUSH
39064: CALL_OW 273
39068: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39069: LD_VAR 0 5
39073: PPUSH
39074: LD_VAR 0 7
39078: PPUSH
39079: CALL_OW 488
39083: PUSH
39084: LD_VAR 0 5
39088: PPUSH
39089: LD_VAR 0 7
39093: PPUSH
39094: CALL_OW 428
39098: PPUSH
39099: CALL_OW 247
39103: PUSH
39104: LD_INT 3
39106: PUSH
39107: LD_INT 2
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: IN
39114: NOT
39115: AND
39116: IFFALSE 39160
// begin ComMoveXY ( unit , _x , _y ) ;
39118: LD_VAR 0 1
39122: PPUSH
39123: LD_VAR 0 5
39127: PPUSH
39128: LD_VAR 0 7
39132: PPUSH
39133: CALL_OW 111
// result := [ _x , _y ] ;
39137: LD_ADDR_VAR 0 3
39141: PUSH
39142: LD_VAR 0 5
39146: PUSH
39147: LD_VAR 0 7
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: ST_TO_ADDR
// exit ;
39156: POP
39157: POP
39158: GO 39164
// end ; end ;
39160: GO 39004
39162: POP
39163: POP
// end ;
39164: LD_VAR 0 3
39168: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39169: LD_INT 0
39171: PPUSH
39172: PPUSH
39173: PPUSH
// result := 0 ;
39174: LD_ADDR_VAR 0 3
39178: PUSH
39179: LD_INT 0
39181: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39182: LD_VAR 0 1
39186: PUSH
39187: LD_INT 0
39189: LESS
39190: PUSH
39191: LD_VAR 0 1
39195: PUSH
39196: LD_INT 8
39198: GREATER
39199: OR
39200: PUSH
39201: LD_VAR 0 2
39205: PUSH
39206: LD_INT 0
39208: LESS
39209: OR
39210: PUSH
39211: LD_VAR 0 2
39215: PUSH
39216: LD_INT 8
39218: GREATER
39219: OR
39220: IFFALSE 39224
// exit ;
39222: GO 39299
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39224: LD_ADDR_VAR 0 4
39228: PUSH
39229: LD_INT 22
39231: PUSH
39232: LD_VAR 0 2
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PPUSH
39241: CALL_OW 69
39245: PUSH
39246: FOR_IN
39247: IFFALSE 39297
// begin un := UnitShoot ( i ) ;
39249: LD_ADDR_VAR 0 5
39253: PUSH
39254: LD_VAR 0 4
39258: PPUSH
39259: CALL_OW 504
39263: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39264: LD_VAR 0 5
39268: PPUSH
39269: CALL_OW 255
39273: PUSH
39274: LD_VAR 0 1
39278: EQUAL
39279: IFFALSE 39295
// begin result := un ;
39281: LD_ADDR_VAR 0 3
39285: PUSH
39286: LD_VAR 0 5
39290: ST_TO_ADDR
// exit ;
39291: POP
39292: POP
39293: GO 39299
// end ; end ;
39295: GO 39246
39297: POP
39298: POP
// end ;
39299: LD_VAR 0 3
39303: RET
// export function GetCargoBay ( units ) ; begin
39304: LD_INT 0
39306: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39307: LD_ADDR_VAR 0 2
39311: PUSH
39312: LD_VAR 0 1
39316: PPUSH
39317: LD_INT 2
39319: PUSH
39320: LD_INT 34
39322: PUSH
39323: LD_INT 12
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 34
39332: PUSH
39333: LD_INT 51
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 34
39342: PUSH
39343: LD_INT 32
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 34
39352: PUSH
39353: LD_EXP 4
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: PPUSH
39369: CALL_OW 72
39373: ST_TO_ADDR
// end ;
39374: LD_VAR 0 2
39378: RET
// export function Negate ( value ) ; begin
39379: LD_INT 0
39381: PPUSH
// result := not value ;
39382: LD_ADDR_VAR 0 2
39386: PUSH
39387: LD_VAR 0 1
39391: NOT
39392: ST_TO_ADDR
// end ;
39393: LD_VAR 0 2
39397: RET
// export function Inc ( value ) ; begin
39398: LD_INT 0
39400: PPUSH
// result := value + 1 ;
39401: LD_ADDR_VAR 0 2
39405: PUSH
39406: LD_VAR 0 1
39410: PUSH
39411: LD_INT 1
39413: PLUS
39414: ST_TO_ADDR
// end ;
39415: LD_VAR 0 2
39419: RET
// export function Dec ( value ) ; begin
39420: LD_INT 0
39422: PPUSH
// result := value - 1 ;
39423: LD_ADDR_VAR 0 2
39427: PUSH
39428: LD_VAR 0 1
39432: PUSH
39433: LD_INT 1
39435: MINUS
39436: ST_TO_ADDR
// end ;
39437: LD_VAR 0 2
39441: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39442: LD_INT 0
39444: PPUSH
39445: PPUSH
39446: PPUSH
39447: PPUSH
39448: PPUSH
39449: PPUSH
39450: PPUSH
39451: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39452: LD_VAR 0 1
39456: PPUSH
39457: LD_VAR 0 2
39461: PPUSH
39462: CALL_OW 488
39466: NOT
39467: PUSH
39468: LD_VAR 0 3
39472: PPUSH
39473: LD_VAR 0 4
39477: PPUSH
39478: CALL_OW 488
39482: NOT
39483: OR
39484: IFFALSE 39497
// begin result := - 1 ;
39486: LD_ADDR_VAR 0 5
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: ST_TO_ADDR
// exit ;
39495: GO 39732
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39497: LD_ADDR_VAR 0 12
39501: PUSH
39502: LD_VAR 0 1
39506: PPUSH
39507: LD_VAR 0 2
39511: PPUSH
39512: LD_VAR 0 3
39516: PPUSH
39517: LD_VAR 0 4
39521: PPUSH
39522: CALL 38580 0 4
39526: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39527: LD_ADDR_VAR 0 11
39531: PUSH
39532: LD_VAR 0 1
39536: PPUSH
39537: LD_VAR 0 2
39541: PPUSH
39542: LD_VAR 0 12
39546: PUSH
39547: LD_INT 1
39549: ARRAY
39550: PPUSH
39551: LD_VAR 0 12
39555: PUSH
39556: LD_INT 2
39558: ARRAY
39559: PPUSH
39560: CALL_OW 298
39564: ST_TO_ADDR
// distance := 9999 ;
39565: LD_ADDR_VAR 0 10
39569: PUSH
39570: LD_INT 9999
39572: ST_TO_ADDR
// for i := 0 to 5 do
39573: LD_ADDR_VAR 0 6
39577: PUSH
39578: DOUBLE
39579: LD_INT 0
39581: DEC
39582: ST_TO_ADDR
39583: LD_INT 5
39585: PUSH
39586: FOR_TO
39587: IFFALSE 39730
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39589: LD_ADDR_VAR 0 7
39593: PUSH
39594: LD_VAR 0 1
39598: PPUSH
39599: LD_VAR 0 6
39603: PPUSH
39604: LD_VAR 0 11
39608: PPUSH
39609: CALL_OW 272
39613: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39614: LD_ADDR_VAR 0 8
39618: PUSH
39619: LD_VAR 0 2
39623: PPUSH
39624: LD_VAR 0 6
39628: PPUSH
39629: LD_VAR 0 11
39633: PPUSH
39634: CALL_OW 273
39638: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39639: LD_VAR 0 7
39643: PPUSH
39644: LD_VAR 0 8
39648: PPUSH
39649: CALL_OW 488
39653: NOT
39654: IFFALSE 39658
// continue ;
39656: GO 39586
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39658: LD_ADDR_VAR 0 9
39662: PUSH
39663: LD_VAR 0 12
39667: PUSH
39668: LD_INT 1
39670: ARRAY
39671: PPUSH
39672: LD_VAR 0 12
39676: PUSH
39677: LD_INT 2
39679: ARRAY
39680: PPUSH
39681: LD_VAR 0 7
39685: PPUSH
39686: LD_VAR 0 8
39690: PPUSH
39691: CALL_OW 298
39695: ST_TO_ADDR
// if tmp < distance then
39696: LD_VAR 0 9
39700: PUSH
39701: LD_VAR 0 10
39705: LESS
39706: IFFALSE 39728
// begin result := i ;
39708: LD_ADDR_VAR 0 5
39712: PUSH
39713: LD_VAR 0 6
39717: ST_TO_ADDR
// distance := tmp ;
39718: LD_ADDR_VAR 0 10
39722: PUSH
39723: LD_VAR 0 9
39727: ST_TO_ADDR
// end ; end ;
39728: GO 39586
39730: POP
39731: POP
// end ;
39732: LD_VAR 0 5
39736: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39737: LD_INT 0
39739: PPUSH
39740: PPUSH
// if not driver or not IsInUnit ( driver ) then
39741: LD_VAR 0 1
39745: NOT
39746: PUSH
39747: LD_VAR 0 1
39751: PPUSH
39752: CALL_OW 310
39756: NOT
39757: OR
39758: IFFALSE 39762
// exit ;
39760: GO 39852
// vehicle := IsInUnit ( driver ) ;
39762: LD_ADDR_VAR 0 3
39766: PUSH
39767: LD_VAR 0 1
39771: PPUSH
39772: CALL_OW 310
39776: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39777: LD_VAR 0 1
39781: PPUSH
39782: LD_STRING \
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: LD_INT 0
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: LD_INT 0
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: PUSH
39812: LD_STRING E
39814: PUSH
39815: LD_INT 0
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: LD_VAR 0 3
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: LD_INT 0
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PPUSH
39848: CALL_OW 446
// end ;
39852: LD_VAR 0 2
39856: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39857: LD_INT 0
39859: PPUSH
39860: PPUSH
// if not driver or not IsInUnit ( driver ) then
39861: LD_VAR 0 1
39865: NOT
39866: PUSH
39867: LD_VAR 0 1
39871: PPUSH
39872: CALL_OW 310
39876: NOT
39877: OR
39878: IFFALSE 39882
// exit ;
39880: GO 39972
// vehicle := IsInUnit ( driver ) ;
39882: LD_ADDR_VAR 0 3
39886: PUSH
39887: LD_VAR 0 1
39891: PPUSH
39892: CALL_OW 310
39896: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39897: LD_VAR 0 1
39901: PPUSH
39902: LD_STRING \
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: PUSH
39932: LD_STRING E
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: LD_VAR 0 3
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PPUSH
39968: CALL_OW 447
// end ;
39972: LD_VAR 0 2
39976: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39977: LD_INT 0
39979: PPUSH
39980: PPUSH
39981: PPUSH
// tmp := [ ] ;
39982: LD_ADDR_VAR 0 5
39986: PUSH
39987: EMPTY
39988: ST_TO_ADDR
// for i in units do
39989: LD_ADDR_VAR 0 4
39993: PUSH
39994: LD_VAR 0 1
39998: PUSH
39999: FOR_IN
40000: IFFALSE 40038
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40002: LD_ADDR_VAR 0 5
40006: PUSH
40007: LD_VAR 0 5
40011: PPUSH
40012: LD_VAR 0 5
40016: PUSH
40017: LD_INT 1
40019: PLUS
40020: PPUSH
40021: LD_VAR 0 4
40025: PPUSH
40026: CALL_OW 256
40030: PPUSH
40031: CALL_OW 2
40035: ST_TO_ADDR
40036: GO 39999
40038: POP
40039: POP
// if not tmp then
40040: LD_VAR 0 5
40044: NOT
40045: IFFALSE 40049
// exit ;
40047: GO 40097
// if asc then
40049: LD_VAR 0 2
40053: IFFALSE 40077
// result := SortListByListAsc ( units , tmp ) else
40055: LD_ADDR_VAR 0 3
40059: PUSH
40060: LD_VAR 0 1
40064: PPUSH
40065: LD_VAR 0 5
40069: PPUSH
40070: CALL_OW 76
40074: ST_TO_ADDR
40075: GO 40097
// result := SortListByListDesc ( units , tmp ) ;
40077: LD_ADDR_VAR 0 3
40081: PUSH
40082: LD_VAR 0 1
40086: PPUSH
40087: LD_VAR 0 5
40091: PPUSH
40092: CALL_OW 77
40096: ST_TO_ADDR
// end ;
40097: LD_VAR 0 3
40101: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40102: LD_INT 0
40104: PPUSH
40105: PPUSH
// task := GetTaskList ( mech ) ;
40106: LD_ADDR_VAR 0 4
40110: PUSH
40111: LD_VAR 0 1
40115: PPUSH
40116: CALL_OW 437
40120: ST_TO_ADDR
// if not task then
40121: LD_VAR 0 4
40125: NOT
40126: IFFALSE 40130
// exit ;
40128: GO 40172
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40130: LD_ADDR_VAR 0 3
40134: PUSH
40135: LD_VAR 0 4
40139: PUSH
40140: LD_INT 1
40142: ARRAY
40143: PUSH
40144: LD_INT 1
40146: ARRAY
40147: PUSH
40148: LD_STRING r
40150: EQUAL
40151: PUSH
40152: LD_VAR 0 4
40156: PUSH
40157: LD_INT 1
40159: ARRAY
40160: PUSH
40161: LD_INT 4
40163: ARRAY
40164: PUSH
40165: LD_VAR 0 2
40169: EQUAL
40170: AND
40171: ST_TO_ADDR
// end ;
40172: LD_VAR 0 3
40176: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40177: LD_INT 0
40179: PPUSH
// SetDir ( unit , d ) ;
40180: LD_VAR 0 1
40184: PPUSH
40185: LD_VAR 0 4
40189: PPUSH
40190: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40194: LD_VAR 0 1
40198: PPUSH
40199: LD_VAR 0 2
40203: PPUSH
40204: LD_VAR 0 3
40208: PPUSH
40209: LD_VAR 0 5
40213: PPUSH
40214: CALL_OW 48
// end ;
40218: LD_VAR 0 6
40222: RET
// export function ToNaturalNumber ( number ) ; begin
40223: LD_INT 0
40225: PPUSH
// result := number div 1 ;
40226: LD_ADDR_VAR 0 2
40230: PUSH
40231: LD_VAR 0 1
40235: PUSH
40236: LD_INT 1
40238: DIV
40239: ST_TO_ADDR
// if number < 0 then
40240: LD_VAR 0 1
40244: PUSH
40245: LD_INT 0
40247: LESS
40248: IFFALSE 40258
// result := 0 ;
40250: LD_ADDR_VAR 0 2
40254: PUSH
40255: LD_INT 0
40257: ST_TO_ADDR
// end ;
40258: LD_VAR 0 2
40262: RET
// export function SortByClass ( units , class ) ; var un ; begin
40263: LD_INT 0
40265: PPUSH
40266: PPUSH
// if not units or not class then
40267: LD_VAR 0 1
40271: NOT
40272: PUSH
40273: LD_VAR 0 2
40277: NOT
40278: OR
40279: IFFALSE 40283
// exit ;
40281: GO 40378
// result := [ ] ;
40283: LD_ADDR_VAR 0 3
40287: PUSH
40288: EMPTY
40289: ST_TO_ADDR
// for un in units do
40290: LD_ADDR_VAR 0 4
40294: PUSH
40295: LD_VAR 0 1
40299: PUSH
40300: FOR_IN
40301: IFFALSE 40376
// if GetClass ( un ) = class then
40303: LD_VAR 0 4
40307: PPUSH
40308: CALL_OW 257
40312: PUSH
40313: LD_VAR 0 2
40317: EQUAL
40318: IFFALSE 40345
// result := Insert ( result , 1 , un ) else
40320: LD_ADDR_VAR 0 3
40324: PUSH
40325: LD_VAR 0 3
40329: PPUSH
40330: LD_INT 1
40332: PPUSH
40333: LD_VAR 0 4
40337: PPUSH
40338: CALL_OW 2
40342: ST_TO_ADDR
40343: GO 40374
// result := Replace ( result , result + 1 , un ) ;
40345: LD_ADDR_VAR 0 3
40349: PUSH
40350: LD_VAR 0 3
40354: PPUSH
40355: LD_VAR 0 3
40359: PUSH
40360: LD_INT 1
40362: PLUS
40363: PPUSH
40364: LD_VAR 0 4
40368: PPUSH
40369: CALL_OW 1
40373: ST_TO_ADDR
40374: GO 40300
40376: POP
40377: POP
// end ;
40378: LD_VAR 0 3
40382: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40383: LD_INT 0
40385: PPUSH
40386: PPUSH
40387: PPUSH
40388: PPUSH
40389: PPUSH
40390: PPUSH
40391: PPUSH
// result := [ ] ;
40392: LD_ADDR_VAR 0 4
40396: PUSH
40397: EMPTY
40398: ST_TO_ADDR
// if x - r < 0 then
40399: LD_VAR 0 1
40403: PUSH
40404: LD_VAR 0 3
40408: MINUS
40409: PUSH
40410: LD_INT 0
40412: LESS
40413: IFFALSE 40425
// min_x := 0 else
40415: LD_ADDR_VAR 0 8
40419: PUSH
40420: LD_INT 0
40422: ST_TO_ADDR
40423: GO 40441
// min_x := x - r ;
40425: LD_ADDR_VAR 0 8
40429: PUSH
40430: LD_VAR 0 1
40434: PUSH
40435: LD_VAR 0 3
40439: MINUS
40440: ST_TO_ADDR
// if y - r < 0 then
40441: LD_VAR 0 2
40445: PUSH
40446: LD_VAR 0 3
40450: MINUS
40451: PUSH
40452: LD_INT 0
40454: LESS
40455: IFFALSE 40467
// min_y := 0 else
40457: LD_ADDR_VAR 0 7
40461: PUSH
40462: LD_INT 0
40464: ST_TO_ADDR
40465: GO 40483
// min_y := y - r ;
40467: LD_ADDR_VAR 0 7
40471: PUSH
40472: LD_VAR 0 2
40476: PUSH
40477: LD_VAR 0 3
40481: MINUS
40482: ST_TO_ADDR
// max_x := x + r ;
40483: LD_ADDR_VAR 0 9
40487: PUSH
40488: LD_VAR 0 1
40492: PUSH
40493: LD_VAR 0 3
40497: PLUS
40498: ST_TO_ADDR
// max_y := y + r ;
40499: LD_ADDR_VAR 0 10
40503: PUSH
40504: LD_VAR 0 2
40508: PUSH
40509: LD_VAR 0 3
40513: PLUS
40514: ST_TO_ADDR
// for _x = min_x to max_x do
40515: LD_ADDR_VAR 0 5
40519: PUSH
40520: DOUBLE
40521: LD_VAR 0 8
40525: DEC
40526: ST_TO_ADDR
40527: LD_VAR 0 9
40531: PUSH
40532: FOR_TO
40533: IFFALSE 40634
// for _y = min_y to max_y do
40535: LD_ADDR_VAR 0 6
40539: PUSH
40540: DOUBLE
40541: LD_VAR 0 7
40545: DEC
40546: ST_TO_ADDR
40547: LD_VAR 0 10
40551: PUSH
40552: FOR_TO
40553: IFFALSE 40630
// begin if not ValidHex ( _x , _y ) then
40555: LD_VAR 0 5
40559: PPUSH
40560: LD_VAR 0 6
40564: PPUSH
40565: CALL_OW 488
40569: NOT
40570: IFFALSE 40574
// continue ;
40572: GO 40552
// if GetResourceTypeXY ( _x , _y ) then
40574: LD_VAR 0 5
40578: PPUSH
40579: LD_VAR 0 6
40583: PPUSH
40584: CALL_OW 283
40588: IFFALSE 40628
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40590: LD_ADDR_VAR 0 4
40594: PUSH
40595: LD_VAR 0 4
40599: PPUSH
40600: LD_VAR 0 4
40604: PUSH
40605: LD_INT 1
40607: PLUS
40608: PPUSH
40609: LD_VAR 0 5
40613: PUSH
40614: LD_VAR 0 6
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PPUSH
40623: CALL_OW 1
40627: ST_TO_ADDR
// end ;
40628: GO 40552
40630: POP
40631: POP
40632: GO 40532
40634: POP
40635: POP
// end ;
40636: LD_VAR 0 4
40640: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40641: LD_INT 0
40643: PPUSH
40644: PPUSH
40645: PPUSH
40646: PPUSH
40647: PPUSH
40648: PPUSH
40649: PPUSH
40650: PPUSH
// if not units then
40651: LD_VAR 0 1
40655: NOT
40656: IFFALSE 40660
// exit ;
40658: GO 41085
// result := UnitFilter ( units , [ f_ok ] ) ;
40660: LD_ADDR_VAR 0 3
40664: PUSH
40665: LD_VAR 0 1
40669: PPUSH
40670: LD_INT 50
40672: PUSH
40673: EMPTY
40674: LIST
40675: PPUSH
40676: CALL_OW 72
40680: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40681: LD_ADDR_VAR 0 8
40685: PUSH
40686: LD_VAR 0 1
40690: PUSH
40691: LD_INT 1
40693: ARRAY
40694: PPUSH
40695: CALL_OW 255
40699: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
40700: LD_ADDR_VAR 0 10
40704: PUSH
40705: LD_INT 29
40707: PUSH
40708: LD_EXP 7
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: ST_TO_ADDR
// if not result then
40717: LD_VAR 0 3
40721: NOT
40722: IFFALSE 40726
// exit ;
40724: GO 41085
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40726: LD_ADDR_VAR 0 5
40730: PUSH
40731: LD_INT 81
40733: PUSH
40734: LD_VAR 0 8
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PPUSH
40743: CALL_OW 69
40747: ST_TO_ADDR
// for i in result do
40748: LD_ADDR_VAR 0 4
40752: PUSH
40753: LD_VAR 0 3
40757: PUSH
40758: FOR_IN
40759: IFFALSE 41083
// begin tag := GetTag ( i ) + 1 ;
40761: LD_ADDR_VAR 0 9
40765: PUSH
40766: LD_VAR 0 4
40770: PPUSH
40771: CALL_OW 110
40775: PUSH
40776: LD_INT 1
40778: PLUS
40779: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40780: LD_ADDR_VAR 0 7
40784: PUSH
40785: LD_VAR 0 4
40789: PPUSH
40790: CALL_OW 250
40794: PPUSH
40795: LD_VAR 0 4
40799: PPUSH
40800: CALL_OW 251
40804: PPUSH
40805: LD_INT 6
40807: PPUSH
40808: CALL 40383 0 3
40812: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40813: LD_VAR 0 7
40817: PUSH
40818: LD_VAR 0 4
40822: PPUSH
40823: CALL_OW 264
40827: PUSH
40828: LD_VAR 0 10
40832: IN
40833: NOT
40834: AND
40835: IFFALSE 40874
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40837: LD_VAR 0 4
40841: PPUSH
40842: LD_VAR 0 7
40846: PUSH
40847: LD_INT 1
40849: ARRAY
40850: PUSH
40851: LD_INT 1
40853: ARRAY
40854: PPUSH
40855: LD_VAR 0 7
40859: PUSH
40860: LD_INT 1
40862: ARRAY
40863: PUSH
40864: LD_INT 2
40866: ARRAY
40867: PPUSH
40868: CALL_OW 116
40872: GO 41081
// if path > tag then
40874: LD_VAR 0 2
40878: PUSH
40879: LD_VAR 0 9
40883: GREATER
40884: IFFALSE 41051
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
40886: LD_ADDR_VAR 0 6
40890: PUSH
40891: LD_VAR 0 5
40895: PPUSH
40896: LD_INT 91
40898: PUSH
40899: LD_VAR 0 4
40903: PUSH
40904: LD_INT 12
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: LIST
40911: PPUSH
40912: CALL_OW 72
40916: ST_TO_ADDR
// if nearEnemy then
40917: LD_VAR 0 6
40921: IFFALSE 40949
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40923: LD_VAR 0 4
40927: PPUSH
40928: LD_VAR 0 6
40932: PPUSH
40933: LD_VAR 0 4
40937: PPUSH
40938: CALL_OW 74
40942: PPUSH
40943: CALL_OW 115
40947: GO 41049
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40949: LD_VAR 0 4
40953: PPUSH
40954: LD_VAR 0 2
40958: PUSH
40959: LD_VAR 0 9
40963: ARRAY
40964: PUSH
40965: LD_INT 1
40967: ARRAY
40968: PPUSH
40969: LD_VAR 0 2
40973: PUSH
40974: LD_VAR 0 9
40978: ARRAY
40979: PUSH
40980: LD_INT 2
40982: ARRAY
40983: PPUSH
40984: CALL_OW 297
40988: PUSH
40989: LD_INT 6
40991: GREATER
40992: IFFALSE 41035
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
40994: LD_VAR 0 4
40998: PPUSH
40999: LD_VAR 0 2
41003: PUSH
41004: LD_VAR 0 9
41008: ARRAY
41009: PUSH
41010: LD_INT 1
41012: ARRAY
41013: PPUSH
41014: LD_VAR 0 2
41018: PUSH
41019: LD_VAR 0 9
41023: ARRAY
41024: PUSH
41025: LD_INT 2
41027: ARRAY
41028: PPUSH
41029: CALL_OW 114
41033: GO 41049
// SetTag ( i , tag ) ;
41035: LD_VAR 0 4
41039: PPUSH
41040: LD_VAR 0 9
41044: PPUSH
41045: CALL_OW 109
// end else
41049: GO 41081
// if enemy then
41051: LD_VAR 0 5
41055: IFFALSE 41081
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41057: LD_VAR 0 4
41061: PPUSH
41062: LD_VAR 0 5
41066: PPUSH
41067: LD_VAR 0 4
41071: PPUSH
41072: CALL_OW 74
41076: PPUSH
41077: CALL_OW 115
// end ;
41081: GO 40758
41083: POP
41084: POP
// end ;
41085: LD_VAR 0 3
41089: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41090: LD_INT 0
41092: PPUSH
41093: PPUSH
41094: PPUSH
// if not unit or IsInUnit ( unit ) then
41095: LD_VAR 0 1
41099: NOT
41100: PUSH
41101: LD_VAR 0 1
41105: PPUSH
41106: CALL_OW 310
41110: OR
41111: IFFALSE 41115
// exit ;
41113: GO 41206
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41115: LD_ADDR_VAR 0 4
41119: PUSH
41120: LD_VAR 0 1
41124: PPUSH
41125: CALL_OW 250
41129: PPUSH
41130: LD_VAR 0 2
41134: PPUSH
41135: LD_INT 1
41137: PPUSH
41138: CALL_OW 272
41142: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41143: LD_ADDR_VAR 0 5
41147: PUSH
41148: LD_VAR 0 1
41152: PPUSH
41153: CALL_OW 251
41157: PPUSH
41158: LD_VAR 0 2
41162: PPUSH
41163: LD_INT 1
41165: PPUSH
41166: CALL_OW 273
41170: ST_TO_ADDR
// if ValidHex ( x , y ) then
41171: LD_VAR 0 4
41175: PPUSH
41176: LD_VAR 0 5
41180: PPUSH
41181: CALL_OW 488
41185: IFFALSE 41206
// ComTurnXY ( unit , x , y ) ;
41187: LD_VAR 0 1
41191: PPUSH
41192: LD_VAR 0 4
41196: PPUSH
41197: LD_VAR 0 5
41201: PPUSH
41202: CALL_OW 118
// end ;
41206: LD_VAR 0 3
41210: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41211: LD_INT 0
41213: PPUSH
41214: PPUSH
// result := false ;
41215: LD_ADDR_VAR 0 3
41219: PUSH
41220: LD_INT 0
41222: ST_TO_ADDR
// if not units then
41223: LD_VAR 0 2
41227: NOT
41228: IFFALSE 41232
// exit ;
41230: GO 41277
// for i in units do
41232: LD_ADDR_VAR 0 4
41236: PUSH
41237: LD_VAR 0 2
41241: PUSH
41242: FOR_IN
41243: IFFALSE 41275
// if See ( side , i ) then
41245: LD_VAR 0 1
41249: PPUSH
41250: LD_VAR 0 4
41254: PPUSH
41255: CALL_OW 292
41259: IFFALSE 41273
// begin result := true ;
41261: LD_ADDR_VAR 0 3
41265: PUSH
41266: LD_INT 1
41268: ST_TO_ADDR
// exit ;
41269: POP
41270: POP
41271: GO 41277
// end ;
41273: GO 41242
41275: POP
41276: POP
// end ;
41277: LD_VAR 0 3
41281: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41282: LD_INT 0
41284: PPUSH
41285: PPUSH
41286: PPUSH
41287: PPUSH
// if not unit or not points then
41288: LD_VAR 0 1
41292: NOT
41293: PUSH
41294: LD_VAR 0 2
41298: NOT
41299: OR
41300: IFFALSE 41304
// exit ;
41302: GO 41394
// dist := 99999 ;
41304: LD_ADDR_VAR 0 5
41308: PUSH
41309: LD_INT 99999
41311: ST_TO_ADDR
// for i in points do
41312: LD_ADDR_VAR 0 4
41316: PUSH
41317: LD_VAR 0 2
41321: PUSH
41322: FOR_IN
41323: IFFALSE 41392
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41325: LD_ADDR_VAR 0 6
41329: PUSH
41330: LD_VAR 0 1
41334: PPUSH
41335: LD_VAR 0 4
41339: PUSH
41340: LD_INT 1
41342: ARRAY
41343: PPUSH
41344: LD_VAR 0 4
41348: PUSH
41349: LD_INT 2
41351: ARRAY
41352: PPUSH
41353: CALL_OW 297
41357: ST_TO_ADDR
// if tmpDist < dist then
41358: LD_VAR 0 6
41362: PUSH
41363: LD_VAR 0 5
41367: LESS
41368: IFFALSE 41390
// begin result := i ;
41370: LD_ADDR_VAR 0 3
41374: PUSH
41375: LD_VAR 0 4
41379: ST_TO_ADDR
// dist := tmpDist ;
41380: LD_ADDR_VAR 0 5
41384: PUSH
41385: LD_VAR 0 6
41389: ST_TO_ADDR
// end ; end ;
41390: GO 41322
41392: POP
41393: POP
// end ; end_of_file
41394: LD_VAR 0 3
41398: RET
// export ecoSide , ecoNation , ecoPeopleAmount , ecoStartPoint , ecoCratesDrop , ecoCratesDropXY , ecoCratesDropAllow , ecoAttacksAllow , ecoEventsAllow , ecoAttacksArea , ecoEventsList ; export function InitEcoMode ( startPoint , cratesDropXY , attacksArea ) ; var i , tmp , side , nation , peopleAmount , resourcesAmount ; begin
41399: LD_INT 0
41401: PPUSH
41402: PPUSH
41403: PPUSH
41404: PPUSH
41405: PPUSH
41406: PPUSH
41407: PPUSH
// ecoStartPoint := startPoint ;
41408: LD_ADDR_EXP 25
41412: PUSH
41413: LD_VAR 0 1
41417: ST_TO_ADDR
// CenterNowOnXY ( ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
41418: LD_EXP 25
41422: PUSH
41423: LD_INT 1
41425: ARRAY
41426: PPUSH
41427: LD_EXP 25
41431: PUSH
41432: LD_INT 2
41434: ARRAY
41435: PPUSH
41436: CALL_OW 86
// ecoCratesDropXY := cratesDropXY ;
41440: LD_ADDR_EXP 27
41444: PUSH
41445: LD_VAR 0 2
41449: ST_TO_ADDR
// ecoAttacksArea := attacksArea ;
41450: LD_ADDR_EXP 31
41454: PUSH
41455: LD_VAR 0 3
41459: ST_TO_ADDR
// if debug then
41460: LD_EXP 1
41464: IFFALSE 41508
// begin side := 1 ;
41466: LD_ADDR_VAR 0 7
41470: PUSH
41471: LD_INT 1
41473: ST_TO_ADDR
// nation := 1 ;
41474: LD_ADDR_VAR 0 8
41478: PUSH
41479: LD_INT 1
41481: ST_TO_ADDR
// peopleAmount := 15 ;
41482: LD_ADDR_VAR 0 9
41486: PUSH
41487: LD_INT 15
41489: ST_TO_ADDR
// resourcesAmount := 2 ;
41490: LD_ADDR_VAR 0 10
41494: PUSH
41495: LD_INT 2
41497: ST_TO_ADDR
// ecoCratesDrop := 3 ;
41498: LD_ADDR_EXP 26
41502: PUSH
41503: LD_INT 3
41505: ST_TO_ADDR
// end else
41506: GO 41604
// begin side := GetMultiplayerSetting ( 0 ) ;
41508: LD_ADDR_VAR 0 7
41512: PUSH
41513: LD_INT 0
41515: PPUSH
41516: CALL_OW 426
41520: ST_TO_ADDR
// nation := GetMultiplayerSetting ( 1 ) ;
41521: LD_ADDR_VAR 0 8
41525: PUSH
41526: LD_INT 1
41528: PPUSH
41529: CALL_OW 426
41533: ST_TO_ADDR
// peopleAmount := [ 6 , 9 , 12 , 15 , 18 , 21 , 24 ] [ GetMultiplayerSetting ( 2 ) ] ;
41534: LD_ADDR_VAR 0 9
41538: PUSH
41539: LD_INT 6
41541: PUSH
41542: LD_INT 9
41544: PUSH
41545: LD_INT 12
41547: PUSH
41548: LD_INT 15
41550: PUSH
41551: LD_INT 18
41553: PUSH
41554: LD_INT 21
41556: PUSH
41557: LD_INT 24
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 2
41571: PPUSH
41572: CALL_OW 426
41576: ARRAY
41577: ST_TO_ADDR
// resourcesAmount := GetMultiplayerSetting ( 3 ) ;
41578: LD_ADDR_VAR 0 10
41582: PUSH
41583: LD_INT 3
41585: PPUSH
41586: CALL_OW 426
41590: ST_TO_ADDR
// ecoCratesDrop := GetMultiplayerSetting ( 4 ) ;
41591: LD_ADDR_EXP 26
41595: PUSH
41596: LD_INT 4
41598: PPUSH
41599: CALL_OW 426
41603: ST_TO_ADDR
// end ; ecoCratesDropAllow := true ;
41604: LD_ADDR_EXP 28
41608: PUSH
41609: LD_INT 1
41611: ST_TO_ADDR
// ecoEventsAllow := false ;
41612: LD_ADDR_EXP 30
41616: PUSH
41617: LD_INT 0
41619: ST_TO_ADDR
// ecoAttacksAllow := false ;
41620: LD_ADDR_EXP 29
41624: PUSH
41625: LD_INT 0
41627: ST_TO_ADDR
// ecoSide := side ;
41628: LD_ADDR_EXP 22
41632: PUSH
41633: LD_VAR 0 7
41637: ST_TO_ADDR
// your_side := side ;
41638: LD_ADDR_OWVAR 2
41642: PUSH
41643: LD_VAR 0 7
41647: ST_TO_ADDR
// ChangeSideFog ( 1 , side ) ;
41648: LD_INT 1
41650: PPUSH
41651: LD_VAR 0 7
41655: PPUSH
41656: CALL_OW 343
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
41660: LD_INT 1
41662: PPUSH
41663: LD_INT 1
41665: PPUSH
41666: LD_VAR 0 7
41670: PPUSH
41671: LD_INT 32793
41673: NEG
41674: PPUSH
41675: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
41679: LD_INT 1
41681: PPUSH
41682: LD_INT 1
41684: PPUSH
41685: LD_VAR 0 7
41689: PPUSH
41690: CALL_OW 331
// ecoNation := nation ;
41694: LD_ADDR_EXP 23
41698: PUSH
41699: LD_VAR 0 8
41703: ST_TO_ADDR
// ecoPeopleAmount := peopleAmount ;
41704: LD_ADDR_EXP 24
41708: PUSH
41709: LD_VAR 0 9
41713: ST_TO_ADDR
// for i = 1 to resourcesAmount * 5 do
41714: LD_ADDR_VAR 0 5
41718: PUSH
41719: DOUBLE
41720: LD_INT 1
41722: DEC
41723: ST_TO_ADDR
41724: LD_VAR 0 10
41728: PUSH
41729: LD_INT 5
41731: MUL
41732: PUSH
41733: FOR_TO
41734: IFFALSE 41772
// CreateResourcesXYR ( mat_cans , 5 , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 6 , false ) ;
41736: LD_INT 1
41738: PPUSH
41739: LD_INT 5
41741: PPUSH
41742: LD_EXP 25
41746: PUSH
41747: LD_INT 1
41749: ARRAY
41750: PPUSH
41751: LD_EXP 25
41755: PUSH
41756: LD_INT 2
41758: ARRAY
41759: PPUSH
41760: LD_INT 6
41762: PPUSH
41763: LD_INT 0
41765: PPUSH
41766: CALL_OW 60
41770: GO 41733
41772: POP
41773: POP
// uc_side := side ;
41774: LD_ADDR_OWVAR 20
41778: PUSH
41779: LD_VAR 0 7
41783: ST_TO_ADDR
// uc_nation := nation ;
41784: LD_ADDR_OWVAR 21
41788: PUSH
41789: LD_VAR 0 8
41793: ST_TO_ADDR
// hc_importance := 100 ;
41794: LD_ADDR_OWVAR 32
41798: PUSH
41799: LD_INT 100
41801: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
41802: LD_INT 0
41804: PPUSH
41805: LD_INT 1
41807: PPUSH
41808: LD_INT 4
41810: PPUSH
41811: CALL_OW 380
// if side = 1 and nation = 1 then
41815: LD_VAR 0 7
41819: PUSH
41820: LD_INT 1
41822: EQUAL
41823: PUSH
41824: LD_VAR 0 8
41828: PUSH
41829: LD_INT 1
41831: EQUAL
41832: AND
41833: IFFALSE 41867
// begin hc_name := John Macmilan ;
41835: LD_ADDR_OWVAR 26
41839: PUSH
41840: LD_STRING John Macmilan
41842: ST_TO_ADDR
// hc_gallery := us ;
41843: LD_ADDR_OWVAR 33
41847: PUSH
41848: LD_STRING us
41850: ST_TO_ADDR
// hc_face_number := 5 ;
41851: LD_ADDR_OWVAR 34
41855: PUSH
41856: LD_INT 5
41858: ST_TO_ADDR
// hc_sex := sex_male ;
41859: LD_ADDR_OWVAR 27
41863: PUSH
41864: LD_INT 1
41866: ST_TO_ADDR
// end ; if side = 2 and nation = 2 then
41867: LD_VAR 0 7
41871: PUSH
41872: LD_INT 2
41874: EQUAL
41875: PUSH
41876: LD_VAR 0 8
41880: PUSH
41881: LD_INT 2
41883: EQUAL
41884: AND
41885: IFFALSE 41919
// begin hc_name := Heike Steyer ;
41887: LD_ADDR_OWVAR 26
41891: PUSH
41892: LD_STRING Heike Steyer
41894: ST_TO_ADDR
// hc_gallery := sandar ;
41895: LD_ADDR_OWVAR 33
41899: PUSH
41900: LD_STRING sandar
41902: ST_TO_ADDR
// hc_face_number := 14 ;
41903: LD_ADDR_OWVAR 34
41907: PUSH
41908: LD_INT 14
41910: ST_TO_ADDR
// hc_sex := sex_female ;
41911: LD_ADDR_OWVAR 27
41915: PUSH
41916: LD_INT 2
41918: ST_TO_ADDR
// end ; if side = 6 and nation = 3 then
41919: LD_VAR 0 7
41923: PUSH
41924: LD_INT 6
41926: EQUAL
41927: PUSH
41928: LD_VAR 0 8
41932: PUSH
41933: LD_INT 3
41935: EQUAL
41936: AND
41937: IFFALSE 41984
// begin PrepareHuman ( false , 3 , 4 ) ;
41939: LD_INT 0
41941: PPUSH
41942: LD_INT 3
41944: PPUSH
41945: LD_INT 4
41947: PPUSH
41948: CALL_OW 380
// hc_name := Yuri I. Burlak ;
41952: LD_ADDR_OWVAR 26
41956: PUSH
41957: LD_STRING Yuri I. Burlak
41959: ST_TO_ADDR
// hc_gallery := ru ;
41960: LD_ADDR_OWVAR 33
41964: PUSH
41965: LD_STRING ru
41967: ST_TO_ADDR
// hc_face_number := 1 ;
41968: LD_ADDR_OWVAR 34
41972: PUSH
41973: LD_INT 1
41975: ST_TO_ADDR
// hc_sex := sex_male ;
41976: LD_ADDR_OWVAR 27
41980: PUSH
41981: LD_INT 1
41983: ST_TO_ADDR
// end ; if side = 4 and nation = 1 then
41984: LD_VAR 0 7
41988: PUSH
41989: LD_INT 4
41991: EQUAL
41992: PUSH
41993: LD_VAR 0 8
41997: PUSH
41998: LD_INT 1
42000: EQUAL
42001: AND
42002: IFFALSE 42036
// begin hc_name := Arthur Powell ;
42004: LD_ADDR_OWVAR 26
42008: PUSH
42009: LD_STRING Arthur Powell
42011: ST_TO_ADDR
// hc_gallery := us ;
42012: LD_ADDR_OWVAR 33
42016: PUSH
42017: LD_STRING us
42019: ST_TO_ADDR
// hc_face_number := 7 ;
42020: LD_ADDR_OWVAR 34
42024: PUSH
42025: LD_INT 7
42027: ST_TO_ADDR
// hc_sex := sex_male ;
42028: LD_ADDR_OWVAR 27
42032: PUSH
42033: LD_INT 1
42035: ST_TO_ADDR
// end ; if side = 3 and nation = 3 then
42036: LD_VAR 0 7
42040: PUSH
42041: LD_INT 3
42043: EQUAL
42044: PUSH
42045: LD_VAR 0 8
42049: PUSH
42050: LD_INT 3
42052: EQUAL
42053: AND
42054: IFFALSE 42088
// begin hc_name := Mjr. Platonov ;
42056: LD_ADDR_OWVAR 26
42060: PUSH
42061: LD_STRING Mjr. Platonov
42063: ST_TO_ADDR
// hc_gallery := ru ;
42064: LD_ADDR_OWVAR 33
42068: PUSH
42069: LD_STRING ru
42071: ST_TO_ADDR
// hc_face_number := 60 ;
42072: LD_ADDR_OWVAR 34
42076: PUSH
42077: LD_INT 60
42079: ST_TO_ADDR
// hc_sex := sex_male ;
42080: LD_ADDR_OWVAR 27
42084: PUSH
42085: LD_INT 1
42087: ST_TO_ADDR
// end ; if side = 7 and nation = 1 then
42088: LD_VAR 0 7
42092: PUSH
42093: LD_INT 7
42095: EQUAL
42096: PUSH
42097: LD_VAR 0 8
42101: PUSH
42102: LD_INT 1
42104: EQUAL
42105: AND
42106: IFFALSE 42153
// begin PrepareHuman ( false , 4 , 4 ) ;
42108: LD_INT 0
42110: PPUSH
42111: LD_INT 4
42113: PPUSH
42114: LD_INT 4
42116: PPUSH
42117: CALL_OW 380
// hc_name := Peter Roth ;
42121: LD_ADDR_OWVAR 26
42125: PUSH
42126: LD_STRING Peter Roth
42128: ST_TO_ADDR
// hc_gallery := us ;
42129: LD_ADDR_OWVAR 33
42133: PUSH
42134: LD_STRING us
42136: ST_TO_ADDR
// hc_face_number := 22 ;
42137: LD_ADDR_OWVAR 34
42141: PUSH
42142: LD_INT 22
42144: ST_TO_ADDR
// hc_sex := sex_male ;
42145: LD_ADDR_OWVAR 27
42149: PUSH
42150: LD_INT 1
42152: ST_TO_ADDR
// end ; if side = 7 and nation = 3 then
42153: LD_VAR 0 7
42157: PUSH
42158: LD_INT 7
42160: EQUAL
42161: PUSH
42162: LD_VAR 0 8
42166: PUSH
42167: LD_INT 3
42169: EQUAL
42170: AND
42171: IFFALSE 42218
// begin PrepareHuman ( false , 4 , 4 ) ;
42173: LD_INT 0
42175: PPUSH
42176: LD_INT 4
42178: PPUSH
42179: LD_INT 4
42181: PPUSH
42182: CALL_OW 380
// hc_name := Prof. Gossudarov ;
42186: LD_ADDR_OWVAR 26
42190: PUSH
42191: LD_STRING Prof. Gossudarov
42193: ST_TO_ADDR
// hc_gallery := ru ;
42194: LD_ADDR_OWVAR 33
42198: PUSH
42199: LD_STRING ru
42201: ST_TO_ADDR
// hc_face_number := 61 ;
42202: LD_ADDR_OWVAR 34
42206: PUSH
42207: LD_INT 61
42209: ST_TO_ADDR
// hc_sex := sex_male ;
42210: LD_ADDR_OWVAR 27
42214: PUSH
42215: LD_INT 1
42217: ST_TO_ADDR
// end ; if side = 8 and nation = 1 then
42218: LD_VAR 0 7
42222: PUSH
42223: LD_INT 8
42225: EQUAL
42226: PUSH
42227: LD_VAR 0 8
42231: PUSH
42232: LD_INT 1
42234: EQUAL
42235: AND
42236: IFFALSE 42270
// begin hc_name := Ron Harisson ;
42238: LD_ADDR_OWVAR 26
42242: PUSH
42243: LD_STRING Ron Harisson
42245: ST_TO_ADDR
// hc_gallery := us ;
42246: LD_ADDR_OWVAR 33
42250: PUSH
42251: LD_STRING us
42253: ST_TO_ADDR
// hc_face_number := 6 ;
42254: LD_ADDR_OWVAR 34
42258: PUSH
42259: LD_INT 6
42261: ST_TO_ADDR
// hc_sex := sex_male ;
42262: LD_ADDR_OWVAR 27
42266: PUSH
42267: LD_INT 1
42269: ST_TO_ADDR
// end ; if side = 8 and nation = 2 then
42270: LD_VAR 0 7
42274: PUSH
42275: LD_INT 8
42277: EQUAL
42278: PUSH
42279: LD_VAR 0 8
42283: PUSH
42284: LD_INT 2
42286: EQUAL
42287: AND
42288: IFFALSE 42322
// begin hc_name := Louis Schulz ;
42290: LD_ADDR_OWVAR 26
42294: PUSH
42295: LD_STRING Louis Schulz
42297: ST_TO_ADDR
// hc_gallery := sandar ;
42298: LD_ADDR_OWVAR 33
42302: PUSH
42303: LD_STRING sandar
42305: ST_TO_ADDR
// hc_face_number := 1 ;
42306: LD_ADDR_OWVAR 34
42310: PUSH
42311: LD_INT 1
42313: ST_TO_ADDR
// hc_sex := sex_male ;
42314: LD_ADDR_OWVAR 27
42318: PUSH
42319: LD_INT 1
42321: ST_TO_ADDR
// end ; PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
42322: CALL_OW 44
42326: PPUSH
42327: LD_EXP 25
42331: PUSH
42332: LD_INT 1
42334: ARRAY
42335: PPUSH
42336: LD_EXP 25
42340: PUSH
42341: LD_INT 2
42343: ARRAY
42344: PPUSH
42345: LD_INT 12
42347: PPUSH
42348: LD_INT 0
42350: PPUSH
42351: CALL_OW 50
// InitHc_All ( ) ;
42355: CALL_OW 584
// for i = 1 to peopleAmount - 1 do
42359: LD_ADDR_VAR 0 5
42363: PUSH
42364: DOUBLE
42365: LD_INT 1
42367: DEC
42368: ST_TO_ADDR
42369: LD_VAR 0 9
42373: PUSH
42374: LD_INT 1
42376: MINUS
42377: PUSH
42378: FOR_TO
42379: IFFALSE 42474
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
42381: LD_INT 0
42383: PPUSH
42384: LD_VAR 0 5
42388: PUSH
42389: LD_INT 4
42391: MOD
42392: PUSH
42393: LD_INT 1
42395: PLUS
42396: PPUSH
42397: LD_INT 3
42399: PPUSH
42400: CALL_OW 380
// tmp := Replace ( tmp , tmp + 1 , CreateHuman ) ;
42404: LD_ADDR_VAR 0 6
42408: PUSH
42409: LD_VAR 0 6
42413: PPUSH
42414: LD_VAR 0 6
42418: PUSH
42419: LD_INT 1
42421: PLUS
42422: PPUSH
42423: CALL_OW 44
42427: PPUSH
42428: CALL_OW 1
42432: ST_TO_ADDR
// PlaceUnitXYR ( tmp [ tmp ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
42433: LD_VAR 0 6
42437: PUSH
42438: LD_VAR 0 6
42442: ARRAY
42443: PPUSH
42444: LD_EXP 25
42448: PUSH
42449: LD_INT 1
42451: ARRAY
42452: PPUSH
42453: LD_EXP 25
42457: PUSH
42458: LD_INT 2
42460: ARRAY
42461: PPUSH
42462: LD_INT 12
42464: PPUSH
42465: LD_INT 0
42467: PPUSH
42468: CALL_OW 50
// end ;
42472: GO 42378
42474: POP
42475: POP
// end ;
42476: LD_VAR 0 4
42480: RET
// every 0 0$1 trigger ecoCratesDrop and ecoCratesDropXY do var time , xy ;
42481: LD_EXP 26
42485: PUSH
42486: LD_EXP 27
42490: AND
42491: IFFALSE 42661
42493: GO 42495
42495: DISABLE
42496: LD_INT 0
42498: PPUSH
42499: PPUSH
// begin time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
42500: LD_ADDR_VAR 0 1
42504: PUSH
42505: LD_INT 700
42507: PUSH
42508: LD_INT 350
42510: PUSH
42511: LD_INT 175
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: LIST
42518: PUSH
42519: LD_EXP 26
42523: ARRAY
42524: ST_TO_ADDR
// while true do
42525: LD_INT 1
42527: IFFALSE 42661
// begin wait ( time ) ;
42529: LD_VAR 0 1
42533: PPUSH
42534: CALL_OW 67
// if not ecoCratesDropAllow then
42538: LD_EXP 28
42542: NOT
42543: IFFALSE 42547
// continue ;
42545: GO 42525
// time := time + 0 0$2 ;
42547: LD_ADDR_VAR 0 1
42551: PUSH
42552: LD_VAR 0 1
42556: PUSH
42557: LD_INT 70
42559: PLUS
42560: ST_TO_ADDR
// if time > 0 0$40 then
42561: LD_VAR 0 1
42565: PUSH
42566: LD_INT 1400
42568: GREATER
42569: IFFALSE 42596
// time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
42571: LD_ADDR_VAR 0 1
42575: PUSH
42576: LD_INT 700
42578: PUSH
42579: LD_INT 350
42581: PUSH
42582: LD_INT 175
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: LIST
42589: PUSH
42590: LD_EXP 26
42594: ARRAY
42595: ST_TO_ADDR
// xy := ecoCratesDropXY [ rand ( 1 , ecoCratesDropXY ) ] ;
42596: LD_ADDR_VAR 0 2
42600: PUSH
42601: LD_EXP 27
42605: PUSH
42606: LD_INT 1
42608: PPUSH
42609: LD_EXP 27
42613: PPUSH
42614: CALL_OW 12
42618: ARRAY
42619: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , xy [ 1 ] , xy [ 2 ] , 14 , true ) ;
42620: LD_INT 1
42622: PPUSH
42623: LD_INT 5
42625: PPUSH
42626: CALL_OW 12
42630: PPUSH
42631: LD_VAR 0 2
42635: PUSH
42636: LD_INT 1
42638: ARRAY
42639: PPUSH
42640: LD_VAR 0 2
42644: PUSH
42645: LD_INT 2
42647: ARRAY
42648: PPUSH
42649: LD_INT 14
42651: PPUSH
42652: LD_INT 1
42654: PPUSH
42655: CALL_OW 56
// end ;
42659: GO 42525
// end ;
42661: PPOPN 2
42663: END
// every 0 0$1 trigger ecoAttacksArea and ecoAttacksAllow do var time , area , tmp , i , xy , veh , dir , enemySide , waveBonus ;
42664: LD_EXP 31
42668: PUSH
42669: LD_EXP 29
42673: AND
42674: IFFALSE 43438
42676: GO 42678
42678: DISABLE
42679: LD_INT 0
42681: PPUSH
42682: PPUSH
42683: PPUSH
42684: PPUSH
42685: PPUSH
42686: PPUSH
42687: PPUSH
42688: PPUSH
42689: PPUSH
// begin time := 3 3$00 ;
42690: LD_ADDR_VAR 0 1
42694: PUSH
42695: LD_INT 6300
42697: ST_TO_ADDR
// enemySide := [ 3 , 9 ] [ rand ( 1 , 2 ) ] ;
42698: LD_ADDR_VAR 0 8
42702: PUSH
42703: LD_INT 3
42705: PUSH
42706: LD_INT 9
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: PPUSH
42716: LD_INT 2
42718: PPUSH
42719: CALL_OW 12
42723: ARRAY
42724: ST_TO_ADDR
// waveBonus := 0 ;
42725: LD_ADDR_VAR 0 9
42729: PUSH
42730: LD_INT 0
42732: ST_TO_ADDR
// if ecoSide = enemySide then
42733: LD_EXP 22
42737: PUSH
42738: LD_VAR 0 8
42742: EQUAL
42743: IFFALSE 42753
// enemySide := 1 ;
42745: LD_ADDR_VAR 0 8
42749: PUSH
42750: LD_INT 1
42752: ST_TO_ADDR
// while true do
42753: LD_INT 1
42755: IFFALSE 43438
// begin wait ( time ) ;
42757: LD_VAR 0 1
42761: PPUSH
42762: CALL_OW 67
// if not ecoAttacksAllow then
42766: LD_EXP 29
42770: NOT
42771: IFFALSE 42775
// continue ;
42773: GO 42753
// waveBonus := waveBonus + 2 ;
42775: LD_ADDR_VAR 0 9
42779: PUSH
42780: LD_VAR 0 9
42784: PUSH
42785: LD_INT 2
42787: PLUS
42788: ST_TO_ADDR
// if waveBonus > 20 then
42789: LD_VAR 0 9
42793: PUSH
42794: LD_INT 20
42796: GREATER
42797: IFFALSE 42807
// waveBonus := 20 ;
42799: LD_ADDR_VAR 0 9
42803: PUSH
42804: LD_INT 20
42806: ST_TO_ADDR
// area := ecoAttacksArea [ rand ( 1 , ecoAttacksArea ) ] ;
42807: LD_ADDR_VAR 0 2
42811: PUSH
42812: LD_EXP 31
42816: PUSH
42817: LD_INT 1
42819: PPUSH
42820: LD_EXP 31
42824: PPUSH
42825: CALL_OW 12
42829: ARRAY
42830: ST_TO_ADDR
// tmp := AreaToList ( area , 0 ) ;
42831: LD_ADDR_VAR 0 3
42835: PUSH
42836: LD_VAR 0 2
42840: PPUSH
42841: LD_INT 0
42843: PPUSH
42844: CALL_OW 517
42848: ST_TO_ADDR
// dir := GetDirFromHex ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
42849: LD_ADDR_VAR 0 7
42853: PUSH
42854: LD_VAR 0 3
42858: PUSH
42859: LD_INT 1
42861: ARRAY
42862: PUSH
42863: LD_INT 1
42865: ARRAY
42866: PPUSH
42867: LD_VAR 0 3
42871: PUSH
42872: LD_INT 2
42874: ARRAY
42875: PUSH
42876: LD_INT 1
42878: ARRAY
42879: PPUSH
42880: LD_EXP 25
42884: PUSH
42885: LD_INT 1
42887: ARRAY
42888: PPUSH
42889: LD_EXP 25
42893: PUSH
42894: LD_INT 2
42896: ARRAY
42897: PPUSH
42898: CALL 39442 0 4
42902: ST_TO_ADDR
// xy := PointBetweenXY ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
42903: LD_ADDR_VAR 0 5
42907: PUSH
42908: LD_VAR 0 3
42912: PUSH
42913: LD_INT 1
42915: ARRAY
42916: PUSH
42917: LD_INT 1
42919: ARRAY
42920: PPUSH
42921: LD_VAR 0 3
42925: PUSH
42926: LD_INT 2
42928: ARRAY
42929: PUSH
42930: LD_INT 1
42932: ARRAY
42933: PPUSH
42934: LD_EXP 25
42938: PUSH
42939: LD_INT 1
42941: ARRAY
42942: PPUSH
42943: LD_EXP 25
42947: PUSH
42948: LD_INT 2
42950: ARRAY
42951: PPUSH
42952: CALL 38580 0 4
42956: ST_TO_ADDR
// tmp := [ ] ;
42957: LD_ADDR_VAR 0 3
42961: PUSH
42962: EMPTY
42963: ST_TO_ADDR
// for i := 1 to 6 + waveBonus do
42964: LD_ADDR_VAR 0 4
42968: PUSH
42969: DOUBLE
42970: LD_INT 1
42972: DEC
42973: ST_TO_ADDR
42974: LD_INT 6
42976: PUSH
42977: LD_VAR 0 9
42981: PLUS
42982: PUSH
42983: FOR_TO
42984: IFFALSE 43303
// begin uc_side := enemySide ;
42986: LD_ADDR_OWVAR 20
42990: PUSH
42991: LD_VAR 0 8
42995: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
42996: LD_ADDR_OWVAR 21
43000: PUSH
43001: LD_INT 1
43003: PPUSH
43004: LD_INT 3
43006: PPUSH
43007: CALL_OW 12
43011: ST_TO_ADDR
// case uc_nation of 1 :
43012: LD_OWVAR 21
43016: PUSH
43017: LD_INT 1
43019: DOUBLE
43020: EQUAL
43021: IFTRUE 43025
43023: GO 43066
43025: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ; 2 :
43026: LD_INT 5
43028: PPUSH
43029: LD_INT 3
43031: PPUSH
43032: LD_INT 3
43034: PPUSH
43035: LD_INT 6
43037: PUSH
43038: LD_INT 7
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: PPUSH
43048: LD_INT 2
43050: PPUSH
43051: CALL_OW 12
43055: ARRAY
43056: PPUSH
43057: LD_INT 100
43059: PPUSH
43060: CALL 6172 0 5
43064: GO 43169
43066: LD_INT 2
43068: DOUBLE
43069: EQUAL
43070: IFTRUE 43074
43072: GO 43119
43074: POP
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] , 100 ) ; 3 :
43075: LD_INT 14
43077: PPUSH
43078: LD_INT 3
43080: PPUSH
43081: LD_INT 5
43083: PPUSH
43084: LD_INT 27
43086: PUSH
43087: LD_INT 28
43089: PUSH
43090: LD_INT 29
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: PPUSH
43101: LD_INT 3
43103: PPUSH
43104: CALL_OW 12
43108: ARRAY
43109: PPUSH
43110: LD_INT 100
43112: PPUSH
43113: CALL 6172 0 5
43117: GO 43169
43119: LD_INT 3
43121: DOUBLE
43122: EQUAL
43123: IFTRUE 43127
43125: GO 43168
43127: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket ] [ rand ( 1 , 2 ) ] , 100 ) ; end ;
43128: LD_INT 24
43130: PPUSH
43131: LD_INT 3
43133: PPUSH
43134: LD_INT 3
43136: PPUSH
43137: LD_INT 46
43139: PUSH
43140: LD_INT 47
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: PPUSH
43150: LD_INT 2
43152: PPUSH
43153: CALL_OW 12
43157: ARRAY
43158: PPUSH
43159: LD_INT 100
43161: PPUSH
43162: CALL 6172 0 5
43166: GO 43169
43168: POP
// veh := CreateVehicle ;
43169: LD_ADDR_VAR 0 6
43173: PUSH
43174: CALL_OW 45
43178: ST_TO_ADDR
// SetDir ( veh , dir ) ;
43179: LD_VAR 0 6
43183: PPUSH
43184: LD_VAR 0 7
43188: PPUSH
43189: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
43193: LD_VAR 0 6
43197: PPUSH
43198: LD_VAR 0 2
43202: PPUSH
43203: LD_INT 0
43205: PPUSH
43206: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
43210: LD_ADDR_VAR 0 3
43214: PUSH
43215: LD_VAR 0 3
43219: PPUSH
43220: LD_VAR 0 3
43224: PUSH
43225: LD_INT 1
43227: PLUS
43228: PPUSH
43229: LD_VAR 0 6
43233: PPUSH
43234: CALL_OW 1
43238: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) = 0 then
43239: LD_VAR 0 5
43243: PUSH
43244: LD_INT 1
43246: ARRAY
43247: PPUSH
43248: LD_VAR 0 5
43252: PUSH
43253: LD_INT 2
43255: ARRAY
43256: PPUSH
43257: CALL_OW 428
43261: PUSH
43262: LD_INT 0
43264: EQUAL
43265: IFFALSE 43294
// ComMoveXY ( veh , xy [ 1 ] , xy [ 2 ] ) ;
43267: LD_VAR 0 6
43271: PPUSH
43272: LD_VAR 0 5
43276: PUSH
43277: LD_INT 1
43279: ARRAY
43280: PPUSH
43281: LD_VAR 0 5
43285: PUSH
43286: LD_INT 2
43288: ARRAY
43289: PPUSH
43290: CALL_OW 111
// wait ( 0 0$0.5 ) ;
43294: LD_INT 18
43296: PPUSH
43297: CALL_OW 67
// end ;
43301: GO 42983
43303: POP
43304: POP
// if tmp then
43305: LD_VAR 0 3
43309: IFFALSE 43436
// begin repeat wait ( 0 0$2 ) ;
43311: LD_INT 70
43313: PPUSH
43314: CALL_OW 67
// for i in tmp do
43318: LD_ADDR_VAR 0 4
43322: PUSH
43323: LD_VAR 0 3
43327: PUSH
43328: FOR_IN
43329: IFFALSE 43427
// begin if IsDead ( i ) or not IsPlaced ( i ) or GetSide ( i ) <> enemySide then
43331: LD_VAR 0 4
43335: PPUSH
43336: CALL_OW 301
43340: PUSH
43341: LD_VAR 0 4
43345: PPUSH
43346: CALL_OW 305
43350: NOT
43351: OR
43352: PUSH
43353: LD_VAR 0 4
43357: PPUSH
43358: CALL_OW 255
43362: PUSH
43363: LD_VAR 0 8
43367: NONEQUAL
43368: OR
43369: IFFALSE 43389
// tmp := tmp diff i else
43371: LD_ADDR_VAR 0 3
43375: PUSH
43376: LD_VAR 0 3
43380: PUSH
43381: LD_VAR 0 4
43385: DIFF
43386: ST_TO_ADDR
43387: GO 43425
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , ecoSide ] ) , i ) ) ;
43389: LD_VAR 0 4
43393: PPUSH
43394: LD_INT 22
43396: PUSH
43397: LD_EXP 22
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PPUSH
43406: CALL_OW 69
43410: PPUSH
43411: LD_VAR 0 4
43415: PPUSH
43416: CALL_OW 74
43420: PPUSH
43421: CALL_OW 115
// end ;
43425: GO 43328
43427: POP
43428: POP
// until not tmp ;
43429: LD_VAR 0 3
43433: NOT
43434: IFFALSE 43311
// end ; end ;
43436: GO 42753
// end ;
43438: PPOPN 9
43440: END
// every 0 0$1 trigger ecoEventsAllow do var time , xy ;
43441: LD_EXP 30
43445: IFFALSE 43498
43447: GO 43449
43449: DISABLE
43450: LD_INT 0
43452: PPUSH
43453: PPUSH
// begin time := rand ( 1 1$00 , 10 10$00 ) ;
43454: LD_ADDR_VAR 0 1
43458: PUSH
43459: LD_INT 2100
43461: PPUSH
43462: LD_INT 21000
43464: PPUSH
43465: CALL_OW 12
43469: ST_TO_ADDR
// while true do
43470: LD_INT 1
43472: IFFALSE 43498
// begin wait ( time ) ;
43474: LD_VAR 0 1
43478: PPUSH
43479: CALL_OW 67
// if not ecoEventsAllow then
43483: LD_EXP 30
43487: NOT
43488: IFFALSE 43492
// continue ;
43490: GO 43470
// EcoEvent ( ) ;
43492: CALL 43501 0 0
// end ;
43496: GO 43470
// end ;
43498: PPOPN 2
43500: END
// export function EcoEvent ( ) ; var event , tmp , i ; begin
43501: LD_INT 0
43503: PPUSH
43504: PPUSH
43505: PPUSH
43506: PPUSH
// event := rand ( 1 , 5 ) ;
43507: LD_ADDR_VAR 0 2
43511: PUSH
43512: LD_INT 1
43514: PPUSH
43515: LD_INT 5
43517: PPUSH
43518: CALL_OW 12
43522: ST_TO_ADDR
// case event of 1 :
43523: LD_VAR 0 2
43527: PUSH
43528: LD_INT 1
43530: DOUBLE
43531: EQUAL
43532: IFTRUE 43536
43534: GO 43622
43536: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_building ] ) diff FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
43537: LD_ADDR_VAR 0 3
43541: PUSH
43542: LD_INT 21
43544: PUSH
43545: LD_INT 3
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PPUSH
43552: CALL_OW 69
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: LD_INT 30
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 30
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: LIST
43584: PPUSH
43585: CALL_OW 69
43589: DIFF
43590: ST_TO_ADDR
// if tmp then
43591: LD_VAR 0 3
43595: IFFALSE 43620
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
43597: LD_VAR 0 3
43601: PUSH
43602: LD_INT 1
43604: PPUSH
43605: LD_VAR 0 3
43609: PPUSH
43610: CALL_OW 12
43614: ARRAY
43615: PPUSH
43616: CALL_OW 65
// end ; 2 :
43620: GO 43821
43622: LD_INT 2
43624: DOUBLE
43625: EQUAL
43626: IFTRUE 43630
43628: GO 43686
43630: POP
// begin uc_side := ecoSide ;
43631: LD_ADDR_OWVAR 20
43635: PUSH
43636: LD_EXP 22
43640: ST_TO_ADDR
// uc_nation := ecoNation ;
43641: LD_ADDR_OWVAR 21
43645: PUSH
43646: LD_EXP 23
43650: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 8 ) ;
43651: LD_INT 0
43653: PPUSH
43654: LD_INT 1
43656: PPUSH
43657: LD_INT 4
43659: PPUSH
43660: CALL_OW 12
43664: PPUSH
43665: LD_INT 8
43667: PPUSH
43668: CALL_OW 380
// PlaceUnitAnyWhere ( CreateHuman , true ) ;
43672: CALL_OW 44
43676: PPUSH
43677: LD_INT 1
43679: PPUSH
43680: CALL_OW 51
// end ; 3 :
43684: GO 43821
43686: LD_INT 3
43688: DOUBLE
43689: EQUAL
43690: IFTRUE 43694
43692: GO 43746
43694: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_vehicle ] ) ;
43695: LD_ADDR_VAR 0 3
43699: PUSH
43700: LD_INT 21
43702: PUSH
43703: LD_INT 2
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PPUSH
43710: CALL_OW 69
43714: ST_TO_ADDR
// if tmp then
43715: LD_VAR 0 3
43719: IFFALSE 43744
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
43721: LD_VAR 0 3
43725: PUSH
43726: LD_INT 1
43728: PPUSH
43729: LD_VAR 0 3
43733: PPUSH
43734: CALL_OW 12
43738: ARRAY
43739: PPUSH
43740: CALL_OW 65
// end ; 4 :
43744: GO 43821
43746: LD_INT 4
43748: DOUBLE
43749: EQUAL
43750: IFTRUE 43754
43752: GO 43809
43754: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_human ] ) ;
43755: LD_ADDR_VAR 0 3
43759: PUSH
43760: LD_INT 21
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PPUSH
43770: CALL_OW 69
43774: ST_TO_ADDR
// if tmp then
43775: LD_VAR 0 3
43779: IFFALSE 43807
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 190 ) ;
43781: LD_VAR 0 3
43785: PUSH
43786: LD_INT 1
43788: PPUSH
43789: LD_VAR 0 3
43793: PPUSH
43794: CALL_OW 12
43798: ARRAY
43799: PPUSH
43800: LD_INT 190
43802: PPUSH
43803: CALL_OW 234
// end ; 5 :
43807: GO 43821
43809: LD_INT 5
43811: DOUBLE
43812: EQUAL
43813: IFTRUE 43817
43815: GO 43820
43817: POP
// begin end ; end ;
43818: GO 43821
43820: POP
// end ;
43821: LD_VAR 0 1
43825: RET
// export function EcoEnableAllTechs ( ) ; var i ; begin
43826: LD_INT 0
43828: PPUSH
43829: PPUSH
// for i := 1 to 100 do
43830: LD_ADDR_VAR 0 2
43834: PUSH
43835: DOUBLE
43836: LD_INT 1
43838: DEC
43839: ST_TO_ADDR
43840: LD_INT 100
43842: PUSH
43843: FOR_TO
43844: IFFALSE 43865
// SetTech ( i , ecoSide , state_researched ) ;
43846: LD_VAR 0 2
43850: PPUSH
43851: LD_EXP 22
43855: PPUSH
43856: LD_INT 2
43858: PPUSH
43859: CALL_OW 322
43863: GO 43843
43865: POP
43866: POP
// end ;
43867: LD_VAR 0 1
43871: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
43872: LD_VAR 0 2
43876: PUSH
43877: LD_INT 102
43879: EQUAL
43880: IFFALSE 44072
// begin case p3 of 1 :
43882: LD_VAR 0 3
43886: PUSH
43887: LD_INT 1
43889: DOUBLE
43890: EQUAL
43891: IFTRUE 43895
43893: GO 43913
43895: POP
// ecoEventsAllow := Negate ( ecoEventsAllow ) ; 2 :
43896: LD_ADDR_EXP 30
43900: PUSH
43901: LD_EXP 30
43905: PPUSH
43906: CALL 39379 0 1
43910: ST_TO_ADDR
43911: GO 44070
43913: LD_INT 2
43915: DOUBLE
43916: EQUAL
43917: IFTRUE 43921
43919: GO 43939
43921: POP
// ecoAttacksAllow := Negate ( ecoAttacksAllow ) ; 3 :
43922: LD_ADDR_EXP 29
43926: PUSH
43927: LD_EXP 29
43931: PPUSH
43932: CALL 39379 0 1
43936: ST_TO_ADDR
43937: GO 44070
43939: LD_INT 3
43941: DOUBLE
43942: EQUAL
43943: IFTRUE 43947
43945: GO 43965
43947: POP
// ecoCratesDropAllow := Negate ( ecoCratesDropAllow ) ; 4 :
43948: LD_ADDR_EXP 28
43952: PUSH
43953: LD_EXP 28
43957: PPUSH
43958: CALL 39379 0 1
43962: ST_TO_ADDR
43963: GO 44070
43965: LD_INT 4
43967: DOUBLE
43968: EQUAL
43969: IFTRUE 43973
43971: GO 43980
43973: POP
// EcoEnableAllTechs ( ) ; 5 .. 8 :
43974: CALL 43826 0 0
43978: GO 44070
43980: LD_INT 5
43982: DOUBLE
43983: GREATEREQUAL
43984: IFFALSE 43992
43986: LD_INT 8
43988: DOUBLE
43989: LESSEQUAL
43990: IFTRUE 43994
43992: GO 44069
43994: POP
// begin uc_side := ecoSide ;
43995: LD_ADDR_OWVAR 20
43999: PUSH
44000: LD_EXP 22
44004: ST_TO_ADDR
// uc_nation := ecoNation ;
44005: LD_ADDR_OWVAR 21
44009: PUSH
44010: LD_EXP 23
44014: ST_TO_ADDR
// PrepareHuman ( false , p3 - 4 , 4 ) ;
44015: LD_INT 0
44017: PPUSH
44018: LD_VAR 0 3
44022: PUSH
44023: LD_INT 4
44025: MINUS
44026: PPUSH
44027: LD_INT 4
44029: PPUSH
44030: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , true ) ;
44034: CALL_OW 44
44038: PPUSH
44039: LD_EXP 25
44043: PUSH
44044: LD_INT 1
44046: ARRAY
44047: PPUSH
44048: LD_EXP 25
44052: PUSH
44053: LD_INT 2
44055: ARRAY
44056: PPUSH
44057: LD_INT 12
44059: PPUSH
44060: LD_INT 1
44062: PPUSH
44063: CALL_OW 50
// end ; end ;
44067: GO 44070
44069: POP
// end else
44070: GO 44106
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
44072: LD_VAR 0 1
44076: PPUSH
44077: LD_VAR 0 2
44081: PPUSH
44082: LD_VAR 0 3
44086: PPUSH
44087: LD_VAR 0 4
44091: PPUSH
44092: LD_VAR 0 5
44096: PPUSH
44097: LD_VAR 0 6
44101: PPUSH
44102: CALL 44180 0 6
// end ;
44106: PPOPN 6
44108: END
// on MapStart ( p ) do begin if gameType = 1 then
44109: LD_EXP 2
44113: PUSH
44114: LD_INT 1
44116: EQUAL
44117: IFFALSE 44126
// ToLua ( SKIRMISH_GAME_TYPE = 1 ) ;
44119: LD_STRING SKIRMISH_GAME_TYPE = 1
44121: PPUSH
44122: CALL_OW 559
// SOS_MapStart ( ) ;
44126: CALL 44155 0 0
// end ; end_of_file
44130: PPOPN 1
44132: END
// every 0 0$1 do
44133: GO 44135
44135: DISABLE
// begin enable ;
44136: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
44137: LD_STRING updateTimer(
44139: PUSH
44140: LD_OWVAR 1
44144: STR
44145: PUSH
44146: LD_STRING );
44148: STR
44149: PPUSH
44150: CALL_OW 559
// end ;
44154: END
// export function SOS_MapStart ( ) ; begin
44155: LD_INT 0
44157: PPUSH
// if streamModeActive then
44158: LD_EXP 33
44162: IFFALSE 44171
// DefineStreamItems ( true ) ;
44164: LD_INT 1
44166: PPUSH
44167: CALL 45821 0 1
// UpdateFactoryWaypoints ( ) ;
44171: CALL 59405 0 0
// end ;
44175: LD_VAR 0 1
44179: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
44180: LD_INT 0
44182: PPUSH
// if p2 = 100 then
44183: LD_VAR 0 2
44187: PUSH
44188: LD_INT 100
44190: EQUAL
44191: IFFALSE 45194
// begin if not StreamModeActive then
44193: LD_EXP 33
44197: NOT
44198: IFFALSE 44208
// StreamModeActive := true ;
44200: LD_ADDR_EXP 33
44204: PUSH
44205: LD_INT 1
44207: ST_TO_ADDR
// if p3 = 0 then
44208: LD_VAR 0 3
44212: PUSH
44213: LD_INT 0
44215: EQUAL
44216: IFFALSE 44222
// InitStreamMode ;
44218: CALL 45357 0 0
// if p3 = 1 then
44222: LD_VAR 0 3
44226: PUSH
44227: LD_INT 1
44229: EQUAL
44230: IFFALSE 44240
// sRocket := true ;
44232: LD_ADDR_EXP 38
44236: PUSH
44237: LD_INT 1
44239: ST_TO_ADDR
// if p3 = 2 then
44240: LD_VAR 0 3
44244: PUSH
44245: LD_INT 2
44247: EQUAL
44248: IFFALSE 44258
// sSpeed := true ;
44250: LD_ADDR_EXP 37
44254: PUSH
44255: LD_INT 1
44257: ST_TO_ADDR
// if p3 = 3 then
44258: LD_VAR 0 3
44262: PUSH
44263: LD_INT 3
44265: EQUAL
44266: IFFALSE 44276
// sEngine := true ;
44268: LD_ADDR_EXP 39
44272: PUSH
44273: LD_INT 1
44275: ST_TO_ADDR
// if p3 = 4 then
44276: LD_VAR 0 3
44280: PUSH
44281: LD_INT 4
44283: EQUAL
44284: IFFALSE 44294
// sSpec := true ;
44286: LD_ADDR_EXP 36
44290: PUSH
44291: LD_INT 1
44293: ST_TO_ADDR
// if p3 = 5 then
44294: LD_VAR 0 3
44298: PUSH
44299: LD_INT 5
44301: EQUAL
44302: IFFALSE 44312
// sLevel := true ;
44304: LD_ADDR_EXP 40
44308: PUSH
44309: LD_INT 1
44311: ST_TO_ADDR
// if p3 = 6 then
44312: LD_VAR 0 3
44316: PUSH
44317: LD_INT 6
44319: EQUAL
44320: IFFALSE 44330
// sArmoury := true ;
44322: LD_ADDR_EXP 41
44326: PUSH
44327: LD_INT 1
44329: ST_TO_ADDR
// if p3 = 7 then
44330: LD_VAR 0 3
44334: PUSH
44335: LD_INT 7
44337: EQUAL
44338: IFFALSE 44348
// sRadar := true ;
44340: LD_ADDR_EXP 42
44344: PUSH
44345: LD_INT 1
44347: ST_TO_ADDR
// if p3 = 8 then
44348: LD_VAR 0 3
44352: PUSH
44353: LD_INT 8
44355: EQUAL
44356: IFFALSE 44366
// sBunker := true ;
44358: LD_ADDR_EXP 43
44362: PUSH
44363: LD_INT 1
44365: ST_TO_ADDR
// if p3 = 9 then
44366: LD_VAR 0 3
44370: PUSH
44371: LD_INT 9
44373: EQUAL
44374: IFFALSE 44384
// sHack := true ;
44376: LD_ADDR_EXP 44
44380: PUSH
44381: LD_INT 1
44383: ST_TO_ADDR
// if p3 = 10 then
44384: LD_VAR 0 3
44388: PUSH
44389: LD_INT 10
44391: EQUAL
44392: IFFALSE 44402
// sFire := true ;
44394: LD_ADDR_EXP 45
44398: PUSH
44399: LD_INT 1
44401: ST_TO_ADDR
// if p3 = 11 then
44402: LD_VAR 0 3
44406: PUSH
44407: LD_INT 11
44409: EQUAL
44410: IFFALSE 44420
// sRefresh := true ;
44412: LD_ADDR_EXP 46
44416: PUSH
44417: LD_INT 1
44419: ST_TO_ADDR
// if p3 = 12 then
44420: LD_VAR 0 3
44424: PUSH
44425: LD_INT 12
44427: EQUAL
44428: IFFALSE 44438
// sExp := true ;
44430: LD_ADDR_EXP 47
44434: PUSH
44435: LD_INT 1
44437: ST_TO_ADDR
// if p3 = 13 then
44438: LD_VAR 0 3
44442: PUSH
44443: LD_INT 13
44445: EQUAL
44446: IFFALSE 44456
// sDepot := true ;
44448: LD_ADDR_EXP 48
44452: PUSH
44453: LD_INT 1
44455: ST_TO_ADDR
// if p3 = 14 then
44456: LD_VAR 0 3
44460: PUSH
44461: LD_INT 14
44463: EQUAL
44464: IFFALSE 44474
// sFlag := true ;
44466: LD_ADDR_EXP 49
44470: PUSH
44471: LD_INT 1
44473: ST_TO_ADDR
// if p3 = 15 then
44474: LD_VAR 0 3
44478: PUSH
44479: LD_INT 15
44481: EQUAL
44482: IFFALSE 44492
// sKamikadze := true ;
44484: LD_ADDR_EXP 57
44488: PUSH
44489: LD_INT 1
44491: ST_TO_ADDR
// if p3 = 16 then
44492: LD_VAR 0 3
44496: PUSH
44497: LD_INT 16
44499: EQUAL
44500: IFFALSE 44510
// sTroll := true ;
44502: LD_ADDR_EXP 58
44506: PUSH
44507: LD_INT 1
44509: ST_TO_ADDR
// if p3 = 17 then
44510: LD_VAR 0 3
44514: PUSH
44515: LD_INT 17
44517: EQUAL
44518: IFFALSE 44528
// sSlow := true ;
44520: LD_ADDR_EXP 59
44524: PUSH
44525: LD_INT 1
44527: ST_TO_ADDR
// if p3 = 18 then
44528: LD_VAR 0 3
44532: PUSH
44533: LD_INT 18
44535: EQUAL
44536: IFFALSE 44546
// sLack := true ;
44538: LD_ADDR_EXP 60
44542: PUSH
44543: LD_INT 1
44545: ST_TO_ADDR
// if p3 = 19 then
44546: LD_VAR 0 3
44550: PUSH
44551: LD_INT 19
44553: EQUAL
44554: IFFALSE 44564
// sTank := true ;
44556: LD_ADDR_EXP 62
44560: PUSH
44561: LD_INT 1
44563: ST_TO_ADDR
// if p3 = 20 then
44564: LD_VAR 0 3
44568: PUSH
44569: LD_INT 20
44571: EQUAL
44572: IFFALSE 44582
// sRemote := true ;
44574: LD_ADDR_EXP 63
44578: PUSH
44579: LD_INT 1
44581: ST_TO_ADDR
// if p3 = 21 then
44582: LD_VAR 0 3
44586: PUSH
44587: LD_INT 21
44589: EQUAL
44590: IFFALSE 44600
// sPowell := true ;
44592: LD_ADDR_EXP 64
44596: PUSH
44597: LD_INT 1
44599: ST_TO_ADDR
// if p3 = 22 then
44600: LD_VAR 0 3
44604: PUSH
44605: LD_INT 22
44607: EQUAL
44608: IFFALSE 44618
// sTeleport := true ;
44610: LD_ADDR_EXP 67
44614: PUSH
44615: LD_INT 1
44617: ST_TO_ADDR
// if p3 = 23 then
44618: LD_VAR 0 3
44622: PUSH
44623: LD_INT 23
44625: EQUAL
44626: IFFALSE 44636
// sOilTower := true ;
44628: LD_ADDR_EXP 69
44632: PUSH
44633: LD_INT 1
44635: ST_TO_ADDR
// if p3 = 24 then
44636: LD_VAR 0 3
44640: PUSH
44641: LD_INT 24
44643: EQUAL
44644: IFFALSE 44654
// sShovel := true ;
44646: LD_ADDR_EXP 70
44650: PUSH
44651: LD_INT 1
44653: ST_TO_ADDR
// if p3 = 25 then
44654: LD_VAR 0 3
44658: PUSH
44659: LD_INT 25
44661: EQUAL
44662: IFFALSE 44672
// sSheik := true ;
44664: LD_ADDR_EXP 71
44668: PUSH
44669: LD_INT 1
44671: ST_TO_ADDR
// if p3 = 26 then
44672: LD_VAR 0 3
44676: PUSH
44677: LD_INT 26
44679: EQUAL
44680: IFFALSE 44690
// sEarthquake := true ;
44682: LD_ADDR_EXP 73
44686: PUSH
44687: LD_INT 1
44689: ST_TO_ADDR
// if p3 = 27 then
44690: LD_VAR 0 3
44694: PUSH
44695: LD_INT 27
44697: EQUAL
44698: IFFALSE 44708
// sAI := true ;
44700: LD_ADDR_EXP 74
44704: PUSH
44705: LD_INT 1
44707: ST_TO_ADDR
// if p3 = 28 then
44708: LD_VAR 0 3
44712: PUSH
44713: LD_INT 28
44715: EQUAL
44716: IFFALSE 44726
// sCargo := true ;
44718: LD_ADDR_EXP 77
44722: PUSH
44723: LD_INT 1
44725: ST_TO_ADDR
// if p3 = 29 then
44726: LD_VAR 0 3
44730: PUSH
44731: LD_INT 29
44733: EQUAL
44734: IFFALSE 44744
// sDLaser := true ;
44736: LD_ADDR_EXP 78
44740: PUSH
44741: LD_INT 1
44743: ST_TO_ADDR
// if p3 = 30 then
44744: LD_VAR 0 3
44748: PUSH
44749: LD_INT 30
44751: EQUAL
44752: IFFALSE 44762
// sExchange := true ;
44754: LD_ADDR_EXP 79
44758: PUSH
44759: LD_INT 1
44761: ST_TO_ADDR
// if p3 = 31 then
44762: LD_VAR 0 3
44766: PUSH
44767: LD_INT 31
44769: EQUAL
44770: IFFALSE 44780
// sFac := true ;
44772: LD_ADDR_EXP 80
44776: PUSH
44777: LD_INT 1
44779: ST_TO_ADDR
// if p3 = 32 then
44780: LD_VAR 0 3
44784: PUSH
44785: LD_INT 32
44787: EQUAL
44788: IFFALSE 44798
// sPower := true ;
44790: LD_ADDR_EXP 81
44794: PUSH
44795: LD_INT 1
44797: ST_TO_ADDR
// if p3 = 33 then
44798: LD_VAR 0 3
44802: PUSH
44803: LD_INT 33
44805: EQUAL
44806: IFFALSE 44816
// sRandom := true ;
44808: LD_ADDR_EXP 82
44812: PUSH
44813: LD_INT 1
44815: ST_TO_ADDR
// if p3 = 34 then
44816: LD_VAR 0 3
44820: PUSH
44821: LD_INT 34
44823: EQUAL
44824: IFFALSE 44834
// sShield := true ;
44826: LD_ADDR_EXP 83
44830: PUSH
44831: LD_INT 1
44833: ST_TO_ADDR
// if p3 = 35 then
44834: LD_VAR 0 3
44838: PUSH
44839: LD_INT 35
44841: EQUAL
44842: IFFALSE 44852
// sTime := true ;
44844: LD_ADDR_EXP 84
44848: PUSH
44849: LD_INT 1
44851: ST_TO_ADDR
// if p3 = 36 then
44852: LD_VAR 0 3
44856: PUSH
44857: LD_INT 36
44859: EQUAL
44860: IFFALSE 44870
// sTools := true ;
44862: LD_ADDR_EXP 85
44866: PUSH
44867: LD_INT 1
44869: ST_TO_ADDR
// if p3 = 101 then
44870: LD_VAR 0 3
44874: PUSH
44875: LD_INT 101
44877: EQUAL
44878: IFFALSE 44888
// sSold := true ;
44880: LD_ADDR_EXP 50
44884: PUSH
44885: LD_INT 1
44887: ST_TO_ADDR
// if p3 = 102 then
44888: LD_VAR 0 3
44892: PUSH
44893: LD_INT 102
44895: EQUAL
44896: IFFALSE 44906
// sDiff := true ;
44898: LD_ADDR_EXP 51
44902: PUSH
44903: LD_INT 1
44905: ST_TO_ADDR
// if p3 = 103 then
44906: LD_VAR 0 3
44910: PUSH
44911: LD_INT 103
44913: EQUAL
44914: IFFALSE 44924
// sFog := true ;
44916: LD_ADDR_EXP 54
44920: PUSH
44921: LD_INT 1
44923: ST_TO_ADDR
// if p3 = 104 then
44924: LD_VAR 0 3
44928: PUSH
44929: LD_INT 104
44931: EQUAL
44932: IFFALSE 44942
// sReset := true ;
44934: LD_ADDR_EXP 55
44938: PUSH
44939: LD_INT 1
44941: ST_TO_ADDR
// if p3 = 105 then
44942: LD_VAR 0 3
44946: PUSH
44947: LD_INT 105
44949: EQUAL
44950: IFFALSE 44960
// sSun := true ;
44952: LD_ADDR_EXP 56
44956: PUSH
44957: LD_INT 1
44959: ST_TO_ADDR
// if p3 = 106 then
44960: LD_VAR 0 3
44964: PUSH
44965: LD_INT 106
44967: EQUAL
44968: IFFALSE 44978
// sTiger := true ;
44970: LD_ADDR_EXP 52
44974: PUSH
44975: LD_INT 1
44977: ST_TO_ADDR
// if p3 = 107 then
44978: LD_VAR 0 3
44982: PUSH
44983: LD_INT 107
44985: EQUAL
44986: IFFALSE 44996
// sBomb := true ;
44988: LD_ADDR_EXP 53
44992: PUSH
44993: LD_INT 1
44995: ST_TO_ADDR
// if p3 = 108 then
44996: LD_VAR 0 3
45000: PUSH
45001: LD_INT 108
45003: EQUAL
45004: IFFALSE 45014
// sWound := true ;
45006: LD_ADDR_EXP 61
45010: PUSH
45011: LD_INT 1
45013: ST_TO_ADDR
// if p3 = 109 then
45014: LD_VAR 0 3
45018: PUSH
45019: LD_INT 109
45021: EQUAL
45022: IFFALSE 45032
// sBetray := true ;
45024: LD_ADDR_EXP 65
45028: PUSH
45029: LD_INT 1
45031: ST_TO_ADDR
// if p3 = 110 then
45032: LD_VAR 0 3
45036: PUSH
45037: LD_INT 110
45039: EQUAL
45040: IFFALSE 45050
// sContamin := true ;
45042: LD_ADDR_EXP 66
45046: PUSH
45047: LD_INT 1
45049: ST_TO_ADDR
// if p3 = 111 then
45050: LD_VAR 0 3
45054: PUSH
45055: LD_INT 111
45057: EQUAL
45058: IFFALSE 45068
// sOil := true ;
45060: LD_ADDR_EXP 68
45064: PUSH
45065: LD_INT 1
45067: ST_TO_ADDR
// if p3 = 112 then
45068: LD_VAR 0 3
45072: PUSH
45073: LD_INT 112
45075: EQUAL
45076: IFFALSE 45086
// sStu := true ;
45078: LD_ADDR_EXP 72
45082: PUSH
45083: LD_INT 1
45085: ST_TO_ADDR
// if p3 = 113 then
45086: LD_VAR 0 3
45090: PUSH
45091: LD_INT 113
45093: EQUAL
45094: IFFALSE 45104
// sBazooka := true ;
45096: LD_ADDR_EXP 75
45100: PUSH
45101: LD_INT 1
45103: ST_TO_ADDR
// if p3 = 114 then
45104: LD_VAR 0 3
45108: PUSH
45109: LD_INT 114
45111: EQUAL
45112: IFFALSE 45122
// sMortar := true ;
45114: LD_ADDR_EXP 76
45118: PUSH
45119: LD_INT 1
45121: ST_TO_ADDR
// if p3 = 115 then
45122: LD_VAR 0 3
45126: PUSH
45127: LD_INT 115
45129: EQUAL
45130: IFFALSE 45140
// sRanger := true ;
45132: LD_ADDR_EXP 86
45136: PUSH
45137: LD_INT 1
45139: ST_TO_ADDR
// if p3 = 116 then
45140: LD_VAR 0 3
45144: PUSH
45145: LD_INT 116
45147: EQUAL
45148: IFFALSE 45158
// sComputer := true ;
45150: LD_ADDR_EXP 87
45154: PUSH
45155: LD_INT 1
45157: ST_TO_ADDR
// if p3 = 117 then
45158: LD_VAR 0 3
45162: PUSH
45163: LD_INT 117
45165: EQUAL
45166: IFFALSE 45176
// s30 := true ;
45168: LD_ADDR_EXP 88
45172: PUSH
45173: LD_INT 1
45175: ST_TO_ADDR
// if p3 = 118 then
45176: LD_VAR 0 3
45180: PUSH
45181: LD_INT 118
45183: EQUAL
45184: IFFALSE 45194
// s60 := true ;
45186: LD_ADDR_EXP 89
45190: PUSH
45191: LD_INT 1
45193: ST_TO_ADDR
// end ; if p2 = 101 then
45194: LD_VAR 0 2
45198: PUSH
45199: LD_INT 101
45201: EQUAL
45202: IFFALSE 45330
// begin case p3 of 1 :
45204: LD_VAR 0 3
45208: PUSH
45209: LD_INT 1
45211: DOUBLE
45212: EQUAL
45213: IFTRUE 45217
45215: GO 45224
45217: POP
// hHackUnlimitedResources ; 2 :
45218: CALL 57428 0 0
45222: GO 45330
45224: LD_INT 2
45226: DOUBLE
45227: EQUAL
45228: IFTRUE 45232
45230: GO 45239
45232: POP
// hHackSetLevel10 ; 3 :
45233: CALL 57561 0 0
45237: GO 45330
45239: LD_INT 3
45241: DOUBLE
45242: EQUAL
45243: IFTRUE 45247
45245: GO 45254
45247: POP
// hHackSetLevel10YourUnits ; 4 :
45248: CALL 57646 0 0
45252: GO 45330
45254: LD_INT 4
45256: DOUBLE
45257: EQUAL
45258: IFTRUE 45262
45260: GO 45269
45262: POP
// hHackInvincible ; 5 :
45263: CALL 58094 0 0
45267: GO 45330
45269: LD_INT 5
45271: DOUBLE
45272: EQUAL
45273: IFTRUE 45277
45275: GO 45284
45277: POP
// hHackInvisible ; 6 :
45278: CALL 58205 0 0
45282: GO 45330
45284: LD_INT 6
45286: DOUBLE
45287: EQUAL
45288: IFTRUE 45292
45290: GO 45299
45292: POP
// hHackChangeYourSide ; 7 :
45293: CALL 58262 0 0
45297: GO 45330
45299: LD_INT 7
45301: DOUBLE
45302: EQUAL
45303: IFTRUE 45307
45305: GO 45314
45307: POP
// hHackChangeUnitSide ; 8 :
45308: CALL 58304 0 0
45312: GO 45330
45314: LD_INT 8
45316: DOUBLE
45317: EQUAL
45318: IFTRUE 45322
45320: GO 45329
45322: POP
// hHackFog ; end ;
45323: CALL 58405 0 0
45327: GO 45330
45329: POP
// end ; end ;
45330: LD_VAR 0 7
45334: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
45335: GO 45337
45337: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
45338: LD_STRING initStreamRollete();
45340: PPUSH
45341: CALL_OW 559
// InitStreamMode ;
45345: CALL 45357 0 0
// DefineStreamItems ( false ) ;
45349: LD_INT 0
45351: PPUSH
45352: CALL 45821 0 1
// end ;
45356: END
// function InitStreamMode ; begin
45357: LD_INT 0
45359: PPUSH
// streamModeActive := false ;
45360: LD_ADDR_EXP 33
45364: PUSH
45365: LD_INT 0
45367: ST_TO_ADDR
// normalCounter := 36 ;
45368: LD_ADDR_EXP 34
45372: PUSH
45373: LD_INT 36
45375: ST_TO_ADDR
// hardcoreCounter := 18 ;
45376: LD_ADDR_EXP 35
45380: PUSH
45381: LD_INT 18
45383: ST_TO_ADDR
// sRocket := false ;
45384: LD_ADDR_EXP 38
45388: PUSH
45389: LD_INT 0
45391: ST_TO_ADDR
// sSpeed := false ;
45392: LD_ADDR_EXP 37
45396: PUSH
45397: LD_INT 0
45399: ST_TO_ADDR
// sEngine := false ;
45400: LD_ADDR_EXP 39
45404: PUSH
45405: LD_INT 0
45407: ST_TO_ADDR
// sSpec := false ;
45408: LD_ADDR_EXP 36
45412: PUSH
45413: LD_INT 0
45415: ST_TO_ADDR
// sLevel := false ;
45416: LD_ADDR_EXP 40
45420: PUSH
45421: LD_INT 0
45423: ST_TO_ADDR
// sArmoury := false ;
45424: LD_ADDR_EXP 41
45428: PUSH
45429: LD_INT 0
45431: ST_TO_ADDR
// sRadar := false ;
45432: LD_ADDR_EXP 42
45436: PUSH
45437: LD_INT 0
45439: ST_TO_ADDR
// sBunker := false ;
45440: LD_ADDR_EXP 43
45444: PUSH
45445: LD_INT 0
45447: ST_TO_ADDR
// sHack := false ;
45448: LD_ADDR_EXP 44
45452: PUSH
45453: LD_INT 0
45455: ST_TO_ADDR
// sFire := false ;
45456: LD_ADDR_EXP 45
45460: PUSH
45461: LD_INT 0
45463: ST_TO_ADDR
// sRefresh := false ;
45464: LD_ADDR_EXP 46
45468: PUSH
45469: LD_INT 0
45471: ST_TO_ADDR
// sExp := false ;
45472: LD_ADDR_EXP 47
45476: PUSH
45477: LD_INT 0
45479: ST_TO_ADDR
// sDepot := false ;
45480: LD_ADDR_EXP 48
45484: PUSH
45485: LD_INT 0
45487: ST_TO_ADDR
// sFlag := false ;
45488: LD_ADDR_EXP 49
45492: PUSH
45493: LD_INT 0
45495: ST_TO_ADDR
// sKamikadze := false ;
45496: LD_ADDR_EXP 57
45500: PUSH
45501: LD_INT 0
45503: ST_TO_ADDR
// sTroll := false ;
45504: LD_ADDR_EXP 58
45508: PUSH
45509: LD_INT 0
45511: ST_TO_ADDR
// sSlow := false ;
45512: LD_ADDR_EXP 59
45516: PUSH
45517: LD_INT 0
45519: ST_TO_ADDR
// sLack := false ;
45520: LD_ADDR_EXP 60
45524: PUSH
45525: LD_INT 0
45527: ST_TO_ADDR
// sTank := false ;
45528: LD_ADDR_EXP 62
45532: PUSH
45533: LD_INT 0
45535: ST_TO_ADDR
// sRemote := false ;
45536: LD_ADDR_EXP 63
45540: PUSH
45541: LD_INT 0
45543: ST_TO_ADDR
// sPowell := false ;
45544: LD_ADDR_EXP 64
45548: PUSH
45549: LD_INT 0
45551: ST_TO_ADDR
// sTeleport := false ;
45552: LD_ADDR_EXP 67
45556: PUSH
45557: LD_INT 0
45559: ST_TO_ADDR
// sOilTower := false ;
45560: LD_ADDR_EXP 69
45564: PUSH
45565: LD_INT 0
45567: ST_TO_ADDR
// sShovel := false ;
45568: LD_ADDR_EXP 70
45572: PUSH
45573: LD_INT 0
45575: ST_TO_ADDR
// sSheik := false ;
45576: LD_ADDR_EXP 71
45580: PUSH
45581: LD_INT 0
45583: ST_TO_ADDR
// sEarthquake := false ;
45584: LD_ADDR_EXP 73
45588: PUSH
45589: LD_INT 0
45591: ST_TO_ADDR
// sAI := false ;
45592: LD_ADDR_EXP 74
45596: PUSH
45597: LD_INT 0
45599: ST_TO_ADDR
// sCargo := false ;
45600: LD_ADDR_EXP 77
45604: PUSH
45605: LD_INT 0
45607: ST_TO_ADDR
// sDLaser := false ;
45608: LD_ADDR_EXP 78
45612: PUSH
45613: LD_INT 0
45615: ST_TO_ADDR
// sExchange := false ;
45616: LD_ADDR_EXP 79
45620: PUSH
45621: LD_INT 0
45623: ST_TO_ADDR
// sFac := false ;
45624: LD_ADDR_EXP 80
45628: PUSH
45629: LD_INT 0
45631: ST_TO_ADDR
// sPower := false ;
45632: LD_ADDR_EXP 81
45636: PUSH
45637: LD_INT 0
45639: ST_TO_ADDR
// sRandom := false ;
45640: LD_ADDR_EXP 82
45644: PUSH
45645: LD_INT 0
45647: ST_TO_ADDR
// sShield := false ;
45648: LD_ADDR_EXP 83
45652: PUSH
45653: LD_INT 0
45655: ST_TO_ADDR
// sTime := false ;
45656: LD_ADDR_EXP 84
45660: PUSH
45661: LD_INT 0
45663: ST_TO_ADDR
// sTools := false ;
45664: LD_ADDR_EXP 85
45668: PUSH
45669: LD_INT 0
45671: ST_TO_ADDR
// sSold := false ;
45672: LD_ADDR_EXP 50
45676: PUSH
45677: LD_INT 0
45679: ST_TO_ADDR
// sDiff := false ;
45680: LD_ADDR_EXP 51
45684: PUSH
45685: LD_INT 0
45687: ST_TO_ADDR
// sFog := false ;
45688: LD_ADDR_EXP 54
45692: PUSH
45693: LD_INT 0
45695: ST_TO_ADDR
// sReset := false ;
45696: LD_ADDR_EXP 55
45700: PUSH
45701: LD_INT 0
45703: ST_TO_ADDR
// sSun := false ;
45704: LD_ADDR_EXP 56
45708: PUSH
45709: LD_INT 0
45711: ST_TO_ADDR
// sTiger := false ;
45712: LD_ADDR_EXP 52
45716: PUSH
45717: LD_INT 0
45719: ST_TO_ADDR
// sBomb := false ;
45720: LD_ADDR_EXP 53
45724: PUSH
45725: LD_INT 0
45727: ST_TO_ADDR
// sWound := false ;
45728: LD_ADDR_EXP 61
45732: PUSH
45733: LD_INT 0
45735: ST_TO_ADDR
// sBetray := false ;
45736: LD_ADDR_EXP 65
45740: PUSH
45741: LD_INT 0
45743: ST_TO_ADDR
// sContamin := false ;
45744: LD_ADDR_EXP 66
45748: PUSH
45749: LD_INT 0
45751: ST_TO_ADDR
// sOil := false ;
45752: LD_ADDR_EXP 68
45756: PUSH
45757: LD_INT 0
45759: ST_TO_ADDR
// sStu := false ;
45760: LD_ADDR_EXP 72
45764: PUSH
45765: LD_INT 0
45767: ST_TO_ADDR
// sBazooka := false ;
45768: LD_ADDR_EXP 75
45772: PUSH
45773: LD_INT 0
45775: ST_TO_ADDR
// sMortar := false ;
45776: LD_ADDR_EXP 76
45780: PUSH
45781: LD_INT 0
45783: ST_TO_ADDR
// sRanger := false ;
45784: LD_ADDR_EXP 86
45788: PUSH
45789: LD_INT 0
45791: ST_TO_ADDR
// sComputer := false ;
45792: LD_ADDR_EXP 87
45796: PUSH
45797: LD_INT 0
45799: ST_TO_ADDR
// s30 := false ;
45800: LD_ADDR_EXP 88
45804: PUSH
45805: LD_INT 0
45807: ST_TO_ADDR
// s60 := false ;
45808: LD_ADDR_EXP 89
45812: PUSH
45813: LD_INT 0
45815: ST_TO_ADDR
// end ;
45816: LD_VAR 0 1
45820: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
45821: LD_INT 0
45823: PPUSH
45824: PPUSH
45825: PPUSH
45826: PPUSH
45827: PPUSH
45828: PPUSH
45829: PPUSH
// result := [ ] ;
45830: LD_ADDR_VAR 0 2
45834: PUSH
45835: EMPTY
45836: ST_TO_ADDR
// if campaign_id = 1 then
45837: LD_OWVAR 69
45841: PUSH
45842: LD_INT 1
45844: EQUAL
45845: IFFALSE 49011
// begin case mission_number of 1 :
45847: LD_OWVAR 70
45851: PUSH
45852: LD_INT 1
45854: DOUBLE
45855: EQUAL
45856: IFTRUE 45860
45858: GO 45936
45860: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
45861: LD_ADDR_VAR 0 2
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: LD_INT 4
45871: PUSH
45872: LD_INT 11
45874: PUSH
45875: LD_INT 12
45877: PUSH
45878: LD_INT 15
45880: PUSH
45881: LD_INT 16
45883: PUSH
45884: LD_INT 22
45886: PUSH
45887: LD_INT 23
45889: PUSH
45890: LD_INT 26
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 101
45906: PUSH
45907: LD_INT 102
45909: PUSH
45910: LD_INT 106
45912: PUSH
45913: LD_INT 116
45915: PUSH
45916: LD_INT 117
45918: PUSH
45919: LD_INT 118
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: ST_TO_ADDR
45934: GO 49009
45936: LD_INT 2
45938: DOUBLE
45939: EQUAL
45940: IFTRUE 45944
45942: GO 46028
45944: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
45945: LD_ADDR_VAR 0 2
45949: PUSH
45950: LD_INT 2
45952: PUSH
45953: LD_INT 4
45955: PUSH
45956: LD_INT 11
45958: PUSH
45959: LD_INT 12
45961: PUSH
45962: LD_INT 15
45964: PUSH
45965: LD_INT 16
45967: PUSH
45968: LD_INT 22
45970: PUSH
45971: LD_INT 23
45973: PUSH
45974: LD_INT 26
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 101
45990: PUSH
45991: LD_INT 102
45993: PUSH
45994: LD_INT 105
45996: PUSH
45997: LD_INT 106
45999: PUSH
46000: LD_INT 108
46002: PUSH
46003: LD_INT 116
46005: PUSH
46006: LD_INT 117
46008: PUSH
46009: LD_INT 118
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: ST_TO_ADDR
46026: GO 49009
46028: LD_INT 3
46030: DOUBLE
46031: EQUAL
46032: IFTRUE 46036
46034: GO 46124
46036: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
46037: LD_ADDR_VAR 0 2
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: LD_INT 4
46047: PUSH
46048: LD_INT 5
46050: PUSH
46051: LD_INT 11
46053: PUSH
46054: LD_INT 12
46056: PUSH
46057: LD_INT 15
46059: PUSH
46060: LD_INT 16
46062: PUSH
46063: LD_INT 22
46065: PUSH
46066: LD_INT 26
46068: PUSH
46069: LD_INT 36
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 101
46086: PUSH
46087: LD_INT 102
46089: PUSH
46090: LD_INT 105
46092: PUSH
46093: LD_INT 106
46095: PUSH
46096: LD_INT 108
46098: PUSH
46099: LD_INT 116
46101: PUSH
46102: LD_INT 117
46104: PUSH
46105: LD_INT 118
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: ST_TO_ADDR
46122: GO 49009
46124: LD_INT 4
46126: DOUBLE
46127: EQUAL
46128: IFTRUE 46132
46130: GO 46228
46132: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
46133: LD_ADDR_VAR 0 2
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: LD_INT 4
46143: PUSH
46144: LD_INT 5
46146: PUSH
46147: LD_INT 8
46149: PUSH
46150: LD_INT 11
46152: PUSH
46153: LD_INT 12
46155: PUSH
46156: LD_INT 15
46158: PUSH
46159: LD_INT 16
46161: PUSH
46162: LD_INT 22
46164: PUSH
46165: LD_INT 23
46167: PUSH
46168: LD_INT 26
46170: PUSH
46171: LD_INT 36
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 101
46190: PUSH
46191: LD_INT 102
46193: PUSH
46194: LD_INT 105
46196: PUSH
46197: LD_INT 106
46199: PUSH
46200: LD_INT 108
46202: PUSH
46203: LD_INT 116
46205: PUSH
46206: LD_INT 117
46208: PUSH
46209: LD_INT 118
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: ST_TO_ADDR
46226: GO 49009
46228: LD_INT 5
46230: DOUBLE
46231: EQUAL
46232: IFTRUE 46236
46234: GO 46348
46236: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
46237: LD_ADDR_VAR 0 2
46241: PUSH
46242: LD_INT 2
46244: PUSH
46245: LD_INT 4
46247: PUSH
46248: LD_INT 5
46250: PUSH
46251: LD_INT 6
46253: PUSH
46254: LD_INT 8
46256: PUSH
46257: LD_INT 11
46259: PUSH
46260: LD_INT 12
46262: PUSH
46263: LD_INT 15
46265: PUSH
46266: LD_INT 16
46268: PUSH
46269: LD_INT 22
46271: PUSH
46272: LD_INT 23
46274: PUSH
46275: LD_INT 25
46277: PUSH
46278: LD_INT 26
46280: PUSH
46281: LD_INT 36
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 101
46302: PUSH
46303: LD_INT 102
46305: PUSH
46306: LD_INT 105
46308: PUSH
46309: LD_INT 106
46311: PUSH
46312: LD_INT 108
46314: PUSH
46315: LD_INT 109
46317: PUSH
46318: LD_INT 112
46320: PUSH
46321: LD_INT 116
46323: PUSH
46324: LD_INT 117
46326: PUSH
46327: LD_INT 118
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: ST_TO_ADDR
46346: GO 49009
46348: LD_INT 6
46350: DOUBLE
46351: EQUAL
46352: IFTRUE 46356
46354: GO 46488
46356: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
46357: LD_ADDR_VAR 0 2
46361: PUSH
46362: LD_INT 2
46364: PUSH
46365: LD_INT 4
46367: PUSH
46368: LD_INT 5
46370: PUSH
46371: LD_INT 6
46373: PUSH
46374: LD_INT 8
46376: PUSH
46377: LD_INT 11
46379: PUSH
46380: LD_INT 12
46382: PUSH
46383: LD_INT 15
46385: PUSH
46386: LD_INT 16
46388: PUSH
46389: LD_INT 20
46391: PUSH
46392: LD_INT 21
46394: PUSH
46395: LD_INT 22
46397: PUSH
46398: LD_INT 23
46400: PUSH
46401: LD_INT 25
46403: PUSH
46404: LD_INT 26
46406: PUSH
46407: LD_INT 30
46409: PUSH
46410: LD_INT 31
46412: PUSH
46413: LD_INT 32
46415: PUSH
46416: LD_INT 36
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 101
46442: PUSH
46443: LD_INT 102
46445: PUSH
46446: LD_INT 105
46448: PUSH
46449: LD_INT 106
46451: PUSH
46452: LD_INT 108
46454: PUSH
46455: LD_INT 109
46457: PUSH
46458: LD_INT 112
46460: PUSH
46461: LD_INT 116
46463: PUSH
46464: LD_INT 117
46466: PUSH
46467: LD_INT 118
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: ST_TO_ADDR
46486: GO 49009
46488: LD_INT 7
46490: DOUBLE
46491: EQUAL
46492: IFTRUE 46496
46494: GO 46608
46496: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
46497: LD_ADDR_VAR 0 2
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: LD_INT 4
46507: PUSH
46508: LD_INT 5
46510: PUSH
46511: LD_INT 7
46513: PUSH
46514: LD_INT 11
46516: PUSH
46517: LD_INT 12
46519: PUSH
46520: LD_INT 15
46522: PUSH
46523: LD_INT 16
46525: PUSH
46526: LD_INT 20
46528: PUSH
46529: LD_INT 21
46531: PUSH
46532: LD_INT 22
46534: PUSH
46535: LD_INT 23
46537: PUSH
46538: LD_INT 25
46540: PUSH
46541: LD_INT 26
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 101
46562: PUSH
46563: LD_INT 102
46565: PUSH
46566: LD_INT 103
46568: PUSH
46569: LD_INT 105
46571: PUSH
46572: LD_INT 106
46574: PUSH
46575: LD_INT 108
46577: PUSH
46578: LD_INT 112
46580: PUSH
46581: LD_INT 116
46583: PUSH
46584: LD_INT 117
46586: PUSH
46587: LD_INT 118
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: ST_TO_ADDR
46606: GO 49009
46608: LD_INT 8
46610: DOUBLE
46611: EQUAL
46612: IFTRUE 46616
46614: GO 46756
46616: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
46617: LD_ADDR_VAR 0 2
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: LD_INT 4
46627: PUSH
46628: LD_INT 5
46630: PUSH
46631: LD_INT 6
46633: PUSH
46634: LD_INT 7
46636: PUSH
46637: LD_INT 8
46639: PUSH
46640: LD_INT 11
46642: PUSH
46643: LD_INT 12
46645: PUSH
46646: LD_INT 15
46648: PUSH
46649: LD_INT 16
46651: PUSH
46652: LD_INT 20
46654: PUSH
46655: LD_INT 21
46657: PUSH
46658: LD_INT 22
46660: PUSH
46661: LD_INT 23
46663: PUSH
46664: LD_INT 25
46666: PUSH
46667: LD_INT 26
46669: PUSH
46670: LD_INT 30
46672: PUSH
46673: LD_INT 31
46675: PUSH
46676: LD_INT 32
46678: PUSH
46679: LD_INT 36
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 101
46706: PUSH
46707: LD_INT 102
46709: PUSH
46710: LD_INT 103
46712: PUSH
46713: LD_INT 105
46715: PUSH
46716: LD_INT 106
46718: PUSH
46719: LD_INT 108
46721: PUSH
46722: LD_INT 109
46724: PUSH
46725: LD_INT 112
46727: PUSH
46728: LD_INT 116
46730: PUSH
46731: LD_INT 117
46733: PUSH
46734: LD_INT 118
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: ST_TO_ADDR
46754: GO 49009
46756: LD_INT 9
46758: DOUBLE
46759: EQUAL
46760: IFTRUE 46764
46762: GO 46912
46764: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
46765: LD_ADDR_VAR 0 2
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: LD_INT 4
46775: PUSH
46776: LD_INT 5
46778: PUSH
46779: LD_INT 6
46781: PUSH
46782: LD_INT 7
46784: PUSH
46785: LD_INT 8
46787: PUSH
46788: LD_INT 11
46790: PUSH
46791: LD_INT 12
46793: PUSH
46794: LD_INT 15
46796: PUSH
46797: LD_INT 16
46799: PUSH
46800: LD_INT 20
46802: PUSH
46803: LD_INT 21
46805: PUSH
46806: LD_INT 22
46808: PUSH
46809: LD_INT 23
46811: PUSH
46812: LD_INT 25
46814: PUSH
46815: LD_INT 26
46817: PUSH
46818: LD_INT 28
46820: PUSH
46821: LD_INT 30
46823: PUSH
46824: LD_INT 31
46826: PUSH
46827: LD_INT 32
46829: PUSH
46830: LD_INT 36
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 101
46858: PUSH
46859: LD_INT 102
46861: PUSH
46862: LD_INT 103
46864: PUSH
46865: LD_INT 105
46867: PUSH
46868: LD_INT 106
46870: PUSH
46871: LD_INT 108
46873: PUSH
46874: LD_INT 109
46876: PUSH
46877: LD_INT 112
46879: PUSH
46880: LD_INT 114
46882: PUSH
46883: LD_INT 116
46885: PUSH
46886: LD_INT 117
46888: PUSH
46889: LD_INT 118
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: ST_TO_ADDR
46910: GO 49009
46912: LD_INT 10
46914: DOUBLE
46915: EQUAL
46916: IFTRUE 46920
46918: GO 47116
46920: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
46921: LD_ADDR_VAR 0 2
46925: PUSH
46926: LD_INT 2
46928: PUSH
46929: LD_INT 4
46931: PUSH
46932: LD_INT 5
46934: PUSH
46935: LD_INT 6
46937: PUSH
46938: LD_INT 7
46940: PUSH
46941: LD_INT 8
46943: PUSH
46944: LD_INT 9
46946: PUSH
46947: LD_INT 10
46949: PUSH
46950: LD_INT 11
46952: PUSH
46953: LD_INT 12
46955: PUSH
46956: LD_INT 13
46958: PUSH
46959: LD_INT 14
46961: PUSH
46962: LD_INT 15
46964: PUSH
46965: LD_INT 16
46967: PUSH
46968: LD_INT 17
46970: PUSH
46971: LD_INT 18
46973: PUSH
46974: LD_INT 19
46976: PUSH
46977: LD_INT 20
46979: PUSH
46980: LD_INT 21
46982: PUSH
46983: LD_INT 22
46985: PUSH
46986: LD_INT 23
46988: PUSH
46989: LD_INT 24
46991: PUSH
46992: LD_INT 25
46994: PUSH
46995: LD_INT 26
46997: PUSH
46998: LD_INT 28
47000: PUSH
47001: LD_INT 30
47003: PUSH
47004: LD_INT 31
47006: PUSH
47007: LD_INT 32
47009: PUSH
47010: LD_INT 36
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 101
47046: PUSH
47047: LD_INT 102
47049: PUSH
47050: LD_INT 103
47052: PUSH
47053: LD_INT 104
47055: PUSH
47056: LD_INT 105
47058: PUSH
47059: LD_INT 106
47061: PUSH
47062: LD_INT 107
47064: PUSH
47065: LD_INT 108
47067: PUSH
47068: LD_INT 109
47070: PUSH
47071: LD_INT 110
47073: PUSH
47074: LD_INT 111
47076: PUSH
47077: LD_INT 112
47079: PUSH
47080: LD_INT 114
47082: PUSH
47083: LD_INT 116
47085: PUSH
47086: LD_INT 117
47088: PUSH
47089: LD_INT 118
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: ST_TO_ADDR
47114: GO 49009
47116: LD_INT 11
47118: DOUBLE
47119: EQUAL
47120: IFTRUE 47124
47122: GO 47328
47124: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
47125: LD_ADDR_VAR 0 2
47129: PUSH
47130: LD_INT 2
47132: PUSH
47133: LD_INT 3
47135: PUSH
47136: LD_INT 4
47138: PUSH
47139: LD_INT 5
47141: PUSH
47142: LD_INT 6
47144: PUSH
47145: LD_INT 7
47147: PUSH
47148: LD_INT 8
47150: PUSH
47151: LD_INT 9
47153: PUSH
47154: LD_INT 10
47156: PUSH
47157: LD_INT 11
47159: PUSH
47160: LD_INT 12
47162: PUSH
47163: LD_INT 13
47165: PUSH
47166: LD_INT 14
47168: PUSH
47169: LD_INT 15
47171: PUSH
47172: LD_INT 16
47174: PUSH
47175: LD_INT 17
47177: PUSH
47178: LD_INT 18
47180: PUSH
47181: LD_INT 19
47183: PUSH
47184: LD_INT 20
47186: PUSH
47187: LD_INT 21
47189: PUSH
47190: LD_INT 22
47192: PUSH
47193: LD_INT 23
47195: PUSH
47196: LD_INT 24
47198: PUSH
47199: LD_INT 25
47201: PUSH
47202: LD_INT 26
47204: PUSH
47205: LD_INT 28
47207: PUSH
47208: LD_INT 30
47210: PUSH
47211: LD_INT 31
47213: PUSH
47214: LD_INT 32
47216: PUSH
47217: LD_INT 34
47219: PUSH
47220: LD_INT 36
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 101
47258: PUSH
47259: LD_INT 102
47261: PUSH
47262: LD_INT 103
47264: PUSH
47265: LD_INT 104
47267: PUSH
47268: LD_INT 105
47270: PUSH
47271: LD_INT 106
47273: PUSH
47274: LD_INT 107
47276: PUSH
47277: LD_INT 108
47279: PUSH
47280: LD_INT 109
47282: PUSH
47283: LD_INT 110
47285: PUSH
47286: LD_INT 111
47288: PUSH
47289: LD_INT 112
47291: PUSH
47292: LD_INT 114
47294: PUSH
47295: LD_INT 116
47297: PUSH
47298: LD_INT 117
47300: PUSH
47301: LD_INT 118
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: ST_TO_ADDR
47326: GO 49009
47328: LD_INT 12
47330: DOUBLE
47331: EQUAL
47332: IFTRUE 47336
47334: GO 47556
47336: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
47337: LD_ADDR_VAR 0 2
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: LD_INT 2
47347: PUSH
47348: LD_INT 3
47350: PUSH
47351: LD_INT 4
47353: PUSH
47354: LD_INT 5
47356: PUSH
47357: LD_INT 6
47359: PUSH
47360: LD_INT 7
47362: PUSH
47363: LD_INT 8
47365: PUSH
47366: LD_INT 9
47368: PUSH
47369: LD_INT 10
47371: PUSH
47372: LD_INT 11
47374: PUSH
47375: LD_INT 12
47377: PUSH
47378: LD_INT 13
47380: PUSH
47381: LD_INT 14
47383: PUSH
47384: LD_INT 15
47386: PUSH
47387: LD_INT 16
47389: PUSH
47390: LD_INT 17
47392: PUSH
47393: LD_INT 18
47395: PUSH
47396: LD_INT 19
47398: PUSH
47399: LD_INT 20
47401: PUSH
47402: LD_INT 21
47404: PUSH
47405: LD_INT 22
47407: PUSH
47408: LD_INT 23
47410: PUSH
47411: LD_INT 24
47413: PUSH
47414: LD_INT 25
47416: PUSH
47417: LD_INT 26
47419: PUSH
47420: LD_INT 27
47422: PUSH
47423: LD_INT 28
47425: PUSH
47426: LD_INT 30
47428: PUSH
47429: LD_INT 31
47431: PUSH
47432: LD_INT 32
47434: PUSH
47435: LD_INT 33
47437: PUSH
47438: LD_INT 34
47440: PUSH
47441: LD_INT 36
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 101
47482: PUSH
47483: LD_INT 102
47485: PUSH
47486: LD_INT 103
47488: PUSH
47489: LD_INT 104
47491: PUSH
47492: LD_INT 105
47494: PUSH
47495: LD_INT 106
47497: PUSH
47498: LD_INT 107
47500: PUSH
47501: LD_INT 108
47503: PUSH
47504: LD_INT 109
47506: PUSH
47507: LD_INT 110
47509: PUSH
47510: LD_INT 111
47512: PUSH
47513: LD_INT 112
47515: PUSH
47516: LD_INT 113
47518: PUSH
47519: LD_INT 114
47521: PUSH
47522: LD_INT 116
47524: PUSH
47525: LD_INT 117
47527: PUSH
47528: LD_INT 118
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: ST_TO_ADDR
47554: GO 49009
47556: LD_INT 13
47558: DOUBLE
47559: EQUAL
47560: IFTRUE 47564
47562: GO 47772
47564: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
47565: LD_ADDR_VAR 0 2
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: LD_INT 3
47578: PUSH
47579: LD_INT 4
47581: PUSH
47582: LD_INT 5
47584: PUSH
47585: LD_INT 8
47587: PUSH
47588: LD_INT 9
47590: PUSH
47591: LD_INT 10
47593: PUSH
47594: LD_INT 11
47596: PUSH
47597: LD_INT 12
47599: PUSH
47600: LD_INT 14
47602: PUSH
47603: LD_INT 15
47605: PUSH
47606: LD_INT 16
47608: PUSH
47609: LD_INT 17
47611: PUSH
47612: LD_INT 18
47614: PUSH
47615: LD_INT 19
47617: PUSH
47618: LD_INT 20
47620: PUSH
47621: LD_INT 21
47623: PUSH
47624: LD_INT 22
47626: PUSH
47627: LD_INT 23
47629: PUSH
47630: LD_INT 24
47632: PUSH
47633: LD_INT 25
47635: PUSH
47636: LD_INT 26
47638: PUSH
47639: LD_INT 27
47641: PUSH
47642: LD_INT 28
47644: PUSH
47645: LD_INT 30
47647: PUSH
47648: LD_INT 31
47650: PUSH
47651: LD_INT 32
47653: PUSH
47654: LD_INT 33
47656: PUSH
47657: LD_INT 34
47659: PUSH
47660: LD_INT 36
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 101
47698: PUSH
47699: LD_INT 102
47701: PUSH
47702: LD_INT 103
47704: PUSH
47705: LD_INT 104
47707: PUSH
47708: LD_INT 105
47710: PUSH
47711: LD_INT 106
47713: PUSH
47714: LD_INT 107
47716: PUSH
47717: LD_INT 108
47719: PUSH
47720: LD_INT 109
47722: PUSH
47723: LD_INT 110
47725: PUSH
47726: LD_INT 111
47728: PUSH
47729: LD_INT 112
47731: PUSH
47732: LD_INT 113
47734: PUSH
47735: LD_INT 114
47737: PUSH
47738: LD_INT 116
47740: PUSH
47741: LD_INT 117
47743: PUSH
47744: LD_INT 118
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: ST_TO_ADDR
47770: GO 49009
47772: LD_INT 14
47774: DOUBLE
47775: EQUAL
47776: IFTRUE 47780
47778: GO 48004
47780: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
47781: LD_ADDR_VAR 0 2
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: LD_INT 3
47794: PUSH
47795: LD_INT 4
47797: PUSH
47798: LD_INT 5
47800: PUSH
47801: LD_INT 6
47803: PUSH
47804: LD_INT 7
47806: PUSH
47807: LD_INT 8
47809: PUSH
47810: LD_INT 9
47812: PUSH
47813: LD_INT 10
47815: PUSH
47816: LD_INT 11
47818: PUSH
47819: LD_INT 12
47821: PUSH
47822: LD_INT 13
47824: PUSH
47825: LD_INT 14
47827: PUSH
47828: LD_INT 15
47830: PUSH
47831: LD_INT 16
47833: PUSH
47834: LD_INT 17
47836: PUSH
47837: LD_INT 18
47839: PUSH
47840: LD_INT 19
47842: PUSH
47843: LD_INT 20
47845: PUSH
47846: LD_INT 21
47848: PUSH
47849: LD_INT 22
47851: PUSH
47852: LD_INT 23
47854: PUSH
47855: LD_INT 24
47857: PUSH
47858: LD_INT 25
47860: PUSH
47861: LD_INT 26
47863: PUSH
47864: LD_INT 27
47866: PUSH
47867: LD_INT 28
47869: PUSH
47870: LD_INT 29
47872: PUSH
47873: LD_INT 30
47875: PUSH
47876: LD_INT 31
47878: PUSH
47879: LD_INT 32
47881: PUSH
47882: LD_INT 33
47884: PUSH
47885: LD_INT 34
47887: PUSH
47888: LD_INT 36
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 101
47930: PUSH
47931: LD_INT 102
47933: PUSH
47934: LD_INT 103
47936: PUSH
47937: LD_INT 104
47939: PUSH
47940: LD_INT 105
47942: PUSH
47943: LD_INT 106
47945: PUSH
47946: LD_INT 107
47948: PUSH
47949: LD_INT 108
47951: PUSH
47952: LD_INT 109
47954: PUSH
47955: LD_INT 110
47957: PUSH
47958: LD_INT 111
47960: PUSH
47961: LD_INT 112
47963: PUSH
47964: LD_INT 113
47966: PUSH
47967: LD_INT 114
47969: PUSH
47970: LD_INT 116
47972: PUSH
47973: LD_INT 117
47975: PUSH
47976: LD_INT 118
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: ST_TO_ADDR
48002: GO 49009
48004: LD_INT 15
48006: DOUBLE
48007: EQUAL
48008: IFTRUE 48012
48010: GO 48236
48012: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
48013: LD_ADDR_VAR 0 2
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: LD_INT 3
48026: PUSH
48027: LD_INT 4
48029: PUSH
48030: LD_INT 5
48032: PUSH
48033: LD_INT 6
48035: PUSH
48036: LD_INT 7
48038: PUSH
48039: LD_INT 8
48041: PUSH
48042: LD_INT 9
48044: PUSH
48045: LD_INT 10
48047: PUSH
48048: LD_INT 11
48050: PUSH
48051: LD_INT 12
48053: PUSH
48054: LD_INT 13
48056: PUSH
48057: LD_INT 14
48059: PUSH
48060: LD_INT 15
48062: PUSH
48063: LD_INT 16
48065: PUSH
48066: LD_INT 17
48068: PUSH
48069: LD_INT 18
48071: PUSH
48072: LD_INT 19
48074: PUSH
48075: LD_INT 20
48077: PUSH
48078: LD_INT 21
48080: PUSH
48081: LD_INT 22
48083: PUSH
48084: LD_INT 23
48086: PUSH
48087: LD_INT 24
48089: PUSH
48090: LD_INT 25
48092: PUSH
48093: LD_INT 26
48095: PUSH
48096: LD_INT 27
48098: PUSH
48099: LD_INT 28
48101: PUSH
48102: LD_INT 29
48104: PUSH
48105: LD_INT 30
48107: PUSH
48108: LD_INT 31
48110: PUSH
48111: LD_INT 32
48113: PUSH
48114: LD_INT 33
48116: PUSH
48117: LD_INT 34
48119: PUSH
48120: LD_INT 36
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 101
48162: PUSH
48163: LD_INT 102
48165: PUSH
48166: LD_INT 103
48168: PUSH
48169: LD_INT 104
48171: PUSH
48172: LD_INT 105
48174: PUSH
48175: LD_INT 106
48177: PUSH
48178: LD_INT 107
48180: PUSH
48181: LD_INT 108
48183: PUSH
48184: LD_INT 109
48186: PUSH
48187: LD_INT 110
48189: PUSH
48190: LD_INT 111
48192: PUSH
48193: LD_INT 112
48195: PUSH
48196: LD_INT 113
48198: PUSH
48199: LD_INT 114
48201: PUSH
48202: LD_INT 116
48204: PUSH
48205: LD_INT 117
48207: PUSH
48208: LD_INT 118
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: ST_TO_ADDR
48234: GO 49009
48236: LD_INT 16
48238: DOUBLE
48239: EQUAL
48240: IFTRUE 48244
48242: GO 48380
48244: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
48245: LD_ADDR_VAR 0 2
48249: PUSH
48250: LD_INT 2
48252: PUSH
48253: LD_INT 4
48255: PUSH
48256: LD_INT 5
48258: PUSH
48259: LD_INT 7
48261: PUSH
48262: LD_INT 11
48264: PUSH
48265: LD_INT 12
48267: PUSH
48268: LD_INT 15
48270: PUSH
48271: LD_INT 16
48273: PUSH
48274: LD_INT 20
48276: PUSH
48277: LD_INT 21
48279: PUSH
48280: LD_INT 22
48282: PUSH
48283: LD_INT 23
48285: PUSH
48286: LD_INT 25
48288: PUSH
48289: LD_INT 26
48291: PUSH
48292: LD_INT 30
48294: PUSH
48295: LD_INT 31
48297: PUSH
48298: LD_INT 32
48300: PUSH
48301: LD_INT 33
48303: PUSH
48304: LD_INT 34
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 101
48330: PUSH
48331: LD_INT 102
48333: PUSH
48334: LD_INT 103
48336: PUSH
48337: LD_INT 106
48339: PUSH
48340: LD_INT 108
48342: PUSH
48343: LD_INT 112
48345: PUSH
48346: LD_INT 113
48348: PUSH
48349: LD_INT 114
48351: PUSH
48352: LD_INT 116
48354: PUSH
48355: LD_INT 117
48357: PUSH
48358: LD_INT 118
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: ST_TO_ADDR
48378: GO 49009
48380: LD_INT 17
48382: DOUBLE
48383: EQUAL
48384: IFTRUE 48388
48386: GO 48612
48388: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
48389: LD_ADDR_VAR 0 2
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: LD_INT 3
48402: PUSH
48403: LD_INT 4
48405: PUSH
48406: LD_INT 5
48408: PUSH
48409: LD_INT 6
48411: PUSH
48412: LD_INT 7
48414: PUSH
48415: LD_INT 8
48417: PUSH
48418: LD_INT 9
48420: PUSH
48421: LD_INT 10
48423: PUSH
48424: LD_INT 11
48426: PUSH
48427: LD_INT 12
48429: PUSH
48430: LD_INT 13
48432: PUSH
48433: LD_INT 14
48435: PUSH
48436: LD_INT 15
48438: PUSH
48439: LD_INT 16
48441: PUSH
48442: LD_INT 17
48444: PUSH
48445: LD_INT 18
48447: PUSH
48448: LD_INT 19
48450: PUSH
48451: LD_INT 20
48453: PUSH
48454: LD_INT 21
48456: PUSH
48457: LD_INT 22
48459: PUSH
48460: LD_INT 23
48462: PUSH
48463: LD_INT 24
48465: PUSH
48466: LD_INT 25
48468: PUSH
48469: LD_INT 26
48471: PUSH
48472: LD_INT 27
48474: PUSH
48475: LD_INT 28
48477: PUSH
48478: LD_INT 29
48480: PUSH
48481: LD_INT 30
48483: PUSH
48484: LD_INT 31
48486: PUSH
48487: LD_INT 32
48489: PUSH
48490: LD_INT 33
48492: PUSH
48493: LD_INT 34
48495: PUSH
48496: LD_INT 36
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 101
48538: PUSH
48539: LD_INT 102
48541: PUSH
48542: LD_INT 103
48544: PUSH
48545: LD_INT 104
48547: PUSH
48548: LD_INT 105
48550: PUSH
48551: LD_INT 106
48553: PUSH
48554: LD_INT 107
48556: PUSH
48557: LD_INT 108
48559: PUSH
48560: LD_INT 109
48562: PUSH
48563: LD_INT 110
48565: PUSH
48566: LD_INT 111
48568: PUSH
48569: LD_INT 112
48571: PUSH
48572: LD_INT 113
48574: PUSH
48575: LD_INT 114
48577: PUSH
48578: LD_INT 116
48580: PUSH
48581: LD_INT 117
48583: PUSH
48584: LD_INT 118
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: ST_TO_ADDR
48610: GO 49009
48612: LD_INT 18
48614: DOUBLE
48615: EQUAL
48616: IFTRUE 48620
48618: GO 48768
48620: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
48621: LD_ADDR_VAR 0 2
48625: PUSH
48626: LD_INT 2
48628: PUSH
48629: LD_INT 4
48631: PUSH
48632: LD_INT 5
48634: PUSH
48635: LD_INT 7
48637: PUSH
48638: LD_INT 11
48640: PUSH
48641: LD_INT 12
48643: PUSH
48644: LD_INT 15
48646: PUSH
48647: LD_INT 16
48649: PUSH
48650: LD_INT 20
48652: PUSH
48653: LD_INT 21
48655: PUSH
48656: LD_INT 22
48658: PUSH
48659: LD_INT 23
48661: PUSH
48662: LD_INT 25
48664: PUSH
48665: LD_INT 26
48667: PUSH
48668: LD_INT 30
48670: PUSH
48671: LD_INT 31
48673: PUSH
48674: LD_INT 32
48676: PUSH
48677: LD_INT 33
48679: PUSH
48680: LD_INT 34
48682: PUSH
48683: LD_INT 35
48685: PUSH
48686: LD_INT 36
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 101
48714: PUSH
48715: LD_INT 102
48717: PUSH
48718: LD_INT 103
48720: PUSH
48721: LD_INT 106
48723: PUSH
48724: LD_INT 108
48726: PUSH
48727: LD_INT 112
48729: PUSH
48730: LD_INT 113
48732: PUSH
48733: LD_INT 114
48735: PUSH
48736: LD_INT 115
48738: PUSH
48739: LD_INT 116
48741: PUSH
48742: LD_INT 117
48744: PUSH
48745: LD_INT 118
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: ST_TO_ADDR
48766: GO 49009
48768: LD_INT 19
48770: DOUBLE
48771: EQUAL
48772: IFTRUE 48776
48774: GO 49008
48776: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
48777: LD_ADDR_VAR 0 2
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: LD_INT 2
48787: PUSH
48788: LD_INT 3
48790: PUSH
48791: LD_INT 4
48793: PUSH
48794: LD_INT 5
48796: PUSH
48797: LD_INT 6
48799: PUSH
48800: LD_INT 7
48802: PUSH
48803: LD_INT 8
48805: PUSH
48806: LD_INT 9
48808: PUSH
48809: LD_INT 10
48811: PUSH
48812: LD_INT 11
48814: PUSH
48815: LD_INT 12
48817: PUSH
48818: LD_INT 13
48820: PUSH
48821: LD_INT 14
48823: PUSH
48824: LD_INT 15
48826: PUSH
48827: LD_INT 16
48829: PUSH
48830: LD_INT 17
48832: PUSH
48833: LD_INT 18
48835: PUSH
48836: LD_INT 19
48838: PUSH
48839: LD_INT 20
48841: PUSH
48842: LD_INT 21
48844: PUSH
48845: LD_INT 22
48847: PUSH
48848: LD_INT 23
48850: PUSH
48851: LD_INT 24
48853: PUSH
48854: LD_INT 25
48856: PUSH
48857: LD_INT 26
48859: PUSH
48860: LD_INT 27
48862: PUSH
48863: LD_INT 28
48865: PUSH
48866: LD_INT 29
48868: PUSH
48869: LD_INT 30
48871: PUSH
48872: LD_INT 31
48874: PUSH
48875: LD_INT 32
48877: PUSH
48878: LD_INT 33
48880: PUSH
48881: LD_INT 34
48883: PUSH
48884: LD_INT 35
48886: PUSH
48887: LD_INT 36
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 101
48930: PUSH
48931: LD_INT 102
48933: PUSH
48934: LD_INT 103
48936: PUSH
48937: LD_INT 104
48939: PUSH
48940: LD_INT 105
48942: PUSH
48943: LD_INT 106
48945: PUSH
48946: LD_INT 107
48948: PUSH
48949: LD_INT 108
48951: PUSH
48952: LD_INT 109
48954: PUSH
48955: LD_INT 110
48957: PUSH
48958: LD_INT 111
48960: PUSH
48961: LD_INT 112
48963: PUSH
48964: LD_INT 113
48966: PUSH
48967: LD_INT 114
48969: PUSH
48970: LD_INT 115
48972: PUSH
48973: LD_INT 116
48975: PUSH
48976: LD_INT 117
48978: PUSH
48979: LD_INT 118
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: ST_TO_ADDR
49006: GO 49009
49008: POP
// end else
49009: GO 49240
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
49011: LD_ADDR_VAR 0 2
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: LD_INT 3
49024: PUSH
49025: LD_INT 4
49027: PUSH
49028: LD_INT 5
49030: PUSH
49031: LD_INT 6
49033: PUSH
49034: LD_INT 7
49036: PUSH
49037: LD_INT 8
49039: PUSH
49040: LD_INT 9
49042: PUSH
49043: LD_INT 10
49045: PUSH
49046: LD_INT 11
49048: PUSH
49049: LD_INT 12
49051: PUSH
49052: LD_INT 13
49054: PUSH
49055: LD_INT 14
49057: PUSH
49058: LD_INT 15
49060: PUSH
49061: LD_INT 16
49063: PUSH
49064: LD_INT 17
49066: PUSH
49067: LD_INT 18
49069: PUSH
49070: LD_INT 19
49072: PUSH
49073: LD_INT 20
49075: PUSH
49076: LD_INT 21
49078: PUSH
49079: LD_INT 22
49081: PUSH
49082: LD_INT 23
49084: PUSH
49085: LD_INT 24
49087: PUSH
49088: LD_INT 25
49090: PUSH
49091: LD_INT 26
49093: PUSH
49094: LD_INT 27
49096: PUSH
49097: LD_INT 28
49099: PUSH
49100: LD_INT 29
49102: PUSH
49103: LD_INT 30
49105: PUSH
49106: LD_INT 31
49108: PUSH
49109: LD_INT 32
49111: PUSH
49112: LD_INT 33
49114: PUSH
49115: LD_INT 34
49117: PUSH
49118: LD_INT 35
49120: PUSH
49121: LD_INT 36
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 101
49164: PUSH
49165: LD_INT 102
49167: PUSH
49168: LD_INT 103
49170: PUSH
49171: LD_INT 104
49173: PUSH
49174: LD_INT 105
49176: PUSH
49177: LD_INT 106
49179: PUSH
49180: LD_INT 107
49182: PUSH
49183: LD_INT 108
49185: PUSH
49186: LD_INT 109
49188: PUSH
49189: LD_INT 110
49191: PUSH
49192: LD_INT 111
49194: PUSH
49195: LD_INT 112
49197: PUSH
49198: LD_INT 113
49200: PUSH
49201: LD_INT 114
49203: PUSH
49204: LD_INT 115
49206: PUSH
49207: LD_INT 116
49209: PUSH
49210: LD_INT 117
49212: PUSH
49213: LD_INT 118
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: ST_TO_ADDR
// if result then
49240: LD_VAR 0 2
49244: IFFALSE 50030
// begin normal :=  ;
49246: LD_ADDR_VAR 0 5
49250: PUSH
49251: LD_STRING 
49253: ST_TO_ADDR
// hardcore :=  ;
49254: LD_ADDR_VAR 0 6
49258: PUSH
49259: LD_STRING 
49261: ST_TO_ADDR
// active :=  ;
49262: LD_ADDR_VAR 0 7
49266: PUSH
49267: LD_STRING 
49269: ST_TO_ADDR
// for i = 1 to normalCounter do
49270: LD_ADDR_VAR 0 8
49274: PUSH
49275: DOUBLE
49276: LD_INT 1
49278: DEC
49279: ST_TO_ADDR
49280: LD_EXP 34
49284: PUSH
49285: FOR_TO
49286: IFFALSE 49387
// begin tmp := 0 ;
49288: LD_ADDR_VAR 0 3
49292: PUSH
49293: LD_STRING 0
49295: ST_TO_ADDR
// if result [ 1 ] then
49296: LD_VAR 0 2
49300: PUSH
49301: LD_INT 1
49303: ARRAY
49304: IFFALSE 49369
// if result [ 1 ] [ 1 ] = i then
49306: LD_VAR 0 2
49310: PUSH
49311: LD_INT 1
49313: ARRAY
49314: PUSH
49315: LD_INT 1
49317: ARRAY
49318: PUSH
49319: LD_VAR 0 8
49323: EQUAL
49324: IFFALSE 49369
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
49326: LD_ADDR_VAR 0 2
49330: PUSH
49331: LD_VAR 0 2
49335: PPUSH
49336: LD_INT 1
49338: PPUSH
49339: LD_VAR 0 2
49343: PUSH
49344: LD_INT 1
49346: ARRAY
49347: PPUSH
49348: LD_INT 1
49350: PPUSH
49351: CALL_OW 3
49355: PPUSH
49356: CALL_OW 1
49360: ST_TO_ADDR
// tmp := 1 ;
49361: LD_ADDR_VAR 0 3
49365: PUSH
49366: LD_STRING 1
49368: ST_TO_ADDR
// end ; normal := normal & tmp ;
49369: LD_ADDR_VAR 0 5
49373: PUSH
49374: LD_VAR 0 5
49378: PUSH
49379: LD_VAR 0 3
49383: STR
49384: ST_TO_ADDR
// end ;
49385: GO 49285
49387: POP
49388: POP
// for i = 1 to hardcoreCounter do
49389: LD_ADDR_VAR 0 8
49393: PUSH
49394: DOUBLE
49395: LD_INT 1
49397: DEC
49398: ST_TO_ADDR
49399: LD_EXP 35
49403: PUSH
49404: FOR_TO
49405: IFFALSE 49510
// begin tmp := 0 ;
49407: LD_ADDR_VAR 0 3
49411: PUSH
49412: LD_STRING 0
49414: ST_TO_ADDR
// if result [ 2 ] then
49415: LD_VAR 0 2
49419: PUSH
49420: LD_INT 2
49422: ARRAY
49423: IFFALSE 49492
// if result [ 2 ] [ 1 ] = 100 + i then
49425: LD_VAR 0 2
49429: PUSH
49430: LD_INT 2
49432: ARRAY
49433: PUSH
49434: LD_INT 1
49436: ARRAY
49437: PUSH
49438: LD_INT 100
49440: PUSH
49441: LD_VAR 0 8
49445: PLUS
49446: EQUAL
49447: IFFALSE 49492
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
49449: LD_ADDR_VAR 0 2
49453: PUSH
49454: LD_VAR 0 2
49458: PPUSH
49459: LD_INT 2
49461: PPUSH
49462: LD_VAR 0 2
49466: PUSH
49467: LD_INT 2
49469: ARRAY
49470: PPUSH
49471: LD_INT 1
49473: PPUSH
49474: CALL_OW 3
49478: PPUSH
49479: CALL_OW 1
49483: ST_TO_ADDR
// tmp := 1 ;
49484: LD_ADDR_VAR 0 3
49488: PUSH
49489: LD_STRING 1
49491: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
49492: LD_ADDR_VAR 0 6
49496: PUSH
49497: LD_VAR 0 6
49501: PUSH
49502: LD_VAR 0 3
49506: STR
49507: ST_TO_ADDR
// end ;
49508: GO 49404
49510: POP
49511: POP
// if isGameLoad then
49512: LD_VAR 0 1
49516: IFFALSE 49991
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
49518: LD_ADDR_VAR 0 4
49522: PUSH
49523: LD_EXP 38
49527: PUSH
49528: LD_EXP 37
49532: PUSH
49533: LD_EXP 39
49537: PUSH
49538: LD_EXP 36
49542: PUSH
49543: LD_EXP 40
49547: PUSH
49548: LD_EXP 41
49552: PUSH
49553: LD_EXP 42
49557: PUSH
49558: LD_EXP 43
49562: PUSH
49563: LD_EXP 44
49567: PUSH
49568: LD_EXP 45
49572: PUSH
49573: LD_EXP 46
49577: PUSH
49578: LD_EXP 47
49582: PUSH
49583: LD_EXP 48
49587: PUSH
49588: LD_EXP 49
49592: PUSH
49593: LD_EXP 57
49597: PUSH
49598: LD_EXP 58
49602: PUSH
49603: LD_EXP 59
49607: PUSH
49608: LD_EXP 60
49612: PUSH
49613: LD_EXP 62
49617: PUSH
49618: LD_EXP 63
49622: PUSH
49623: LD_EXP 64
49627: PUSH
49628: LD_EXP 67
49632: PUSH
49633: LD_EXP 69
49637: PUSH
49638: LD_EXP 70
49642: PUSH
49643: LD_EXP 71
49647: PUSH
49648: LD_EXP 73
49652: PUSH
49653: LD_EXP 74
49657: PUSH
49658: LD_EXP 77
49662: PUSH
49663: LD_EXP 78
49667: PUSH
49668: LD_EXP 79
49672: PUSH
49673: LD_EXP 80
49677: PUSH
49678: LD_EXP 81
49682: PUSH
49683: LD_EXP 82
49687: PUSH
49688: LD_EXP 83
49692: PUSH
49693: LD_EXP 84
49697: PUSH
49698: LD_EXP 85
49702: PUSH
49703: LD_EXP 50
49707: PUSH
49708: LD_EXP 51
49712: PUSH
49713: LD_EXP 54
49717: PUSH
49718: LD_EXP 55
49722: PUSH
49723: LD_EXP 56
49727: PUSH
49728: LD_EXP 52
49732: PUSH
49733: LD_EXP 53
49737: PUSH
49738: LD_EXP 61
49742: PUSH
49743: LD_EXP 65
49747: PUSH
49748: LD_EXP 66
49752: PUSH
49753: LD_EXP 68
49757: PUSH
49758: LD_EXP 72
49762: PUSH
49763: LD_EXP 75
49767: PUSH
49768: LD_EXP 76
49772: PUSH
49773: LD_EXP 86
49777: PUSH
49778: LD_EXP 87
49782: PUSH
49783: LD_EXP 88
49787: PUSH
49788: LD_EXP 89
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: ST_TO_ADDR
// tmp :=  ;
49849: LD_ADDR_VAR 0 3
49853: PUSH
49854: LD_STRING 
49856: ST_TO_ADDR
// for i = 1 to normalCounter do
49857: LD_ADDR_VAR 0 8
49861: PUSH
49862: DOUBLE
49863: LD_INT 1
49865: DEC
49866: ST_TO_ADDR
49867: LD_EXP 34
49871: PUSH
49872: FOR_TO
49873: IFFALSE 49909
// begin if flags [ i ] then
49875: LD_VAR 0 4
49879: PUSH
49880: LD_VAR 0 8
49884: ARRAY
49885: IFFALSE 49907
// tmp := tmp & i & ; ;
49887: LD_ADDR_VAR 0 3
49891: PUSH
49892: LD_VAR 0 3
49896: PUSH
49897: LD_VAR 0 8
49901: STR
49902: PUSH
49903: LD_STRING ;
49905: STR
49906: ST_TO_ADDR
// end ;
49907: GO 49872
49909: POP
49910: POP
// for i = 1 to hardcoreCounter do
49911: LD_ADDR_VAR 0 8
49915: PUSH
49916: DOUBLE
49917: LD_INT 1
49919: DEC
49920: ST_TO_ADDR
49921: LD_EXP 35
49925: PUSH
49926: FOR_TO
49927: IFFALSE 49973
// begin if flags [ normalCounter + i ] then
49929: LD_VAR 0 4
49933: PUSH
49934: LD_EXP 34
49938: PUSH
49939: LD_VAR 0 8
49943: PLUS
49944: ARRAY
49945: IFFALSE 49971
// tmp := tmp & ( 100 + i ) & ; ;
49947: LD_ADDR_VAR 0 3
49951: PUSH
49952: LD_VAR 0 3
49956: PUSH
49957: LD_INT 100
49959: PUSH
49960: LD_VAR 0 8
49964: PLUS
49965: STR
49966: PUSH
49967: LD_STRING ;
49969: STR
49970: ST_TO_ADDR
// end ;
49971: GO 49926
49973: POP
49974: POP
// if tmp then
49975: LD_VAR 0 3
49979: IFFALSE 49991
// active := tmp ;
49981: LD_ADDR_VAR 0 7
49985: PUSH
49986: LD_VAR 0 3
49990: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
49991: LD_STRING getStreamItemsFromMission("
49993: PUSH
49994: LD_VAR 0 5
49998: STR
49999: PUSH
50000: LD_STRING ","
50002: STR
50003: PUSH
50004: LD_VAR 0 6
50008: STR
50009: PUSH
50010: LD_STRING ","
50012: STR
50013: PUSH
50014: LD_VAR 0 7
50018: STR
50019: PUSH
50020: LD_STRING ")
50022: STR
50023: PPUSH
50024: CALL_OW 559
// end else
50028: GO 50037
// ToLua ( getStreamItemsFromMission("","","") ) ;
50030: LD_STRING getStreamItemsFromMission("","","")
50032: PPUSH
50033: CALL_OW 559
// end ;
50037: LD_VAR 0 2
50041: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
50042: LD_EXP 33
50046: PUSH
50047: LD_EXP 38
50051: AND
50052: IFFALSE 50176
50054: GO 50056
50056: DISABLE
50057: LD_INT 0
50059: PPUSH
50060: PPUSH
// begin enable ;
50061: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
50062: LD_ADDR_VAR 0 2
50066: PUSH
50067: LD_INT 22
50069: PUSH
50070: LD_OWVAR 2
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: LD_INT 34
50084: PUSH
50085: LD_INT 7
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 34
50094: PUSH
50095: LD_INT 45
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 34
50104: PUSH
50105: LD_INT 28
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 34
50114: PUSH
50115: LD_INT 47
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PPUSH
50133: CALL_OW 69
50137: ST_TO_ADDR
// if not tmp then
50138: LD_VAR 0 2
50142: NOT
50143: IFFALSE 50147
// exit ;
50145: GO 50176
// for i in tmp do
50147: LD_ADDR_VAR 0 1
50151: PUSH
50152: LD_VAR 0 2
50156: PUSH
50157: FOR_IN
50158: IFFALSE 50174
// begin SetLives ( i , 0 ) ;
50160: LD_VAR 0 1
50164: PPUSH
50165: LD_INT 0
50167: PPUSH
50168: CALL_OW 234
// end ;
50172: GO 50157
50174: POP
50175: POP
// end ;
50176: PPOPN 2
50178: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
50179: LD_EXP 33
50183: PUSH
50184: LD_EXP 39
50188: AND
50189: IFFALSE 50273
50191: GO 50193
50193: DISABLE
50194: LD_INT 0
50196: PPUSH
50197: PPUSH
// begin enable ;
50198: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
50199: LD_ADDR_VAR 0 2
50203: PUSH
50204: LD_INT 22
50206: PUSH
50207: LD_OWVAR 2
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 32
50218: PUSH
50219: LD_INT 3
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PPUSH
50230: CALL_OW 69
50234: ST_TO_ADDR
// if not tmp then
50235: LD_VAR 0 2
50239: NOT
50240: IFFALSE 50244
// exit ;
50242: GO 50273
// for i in tmp do
50244: LD_ADDR_VAR 0 1
50248: PUSH
50249: LD_VAR 0 2
50253: PUSH
50254: FOR_IN
50255: IFFALSE 50271
// begin SetLives ( i , 0 ) ;
50257: LD_VAR 0 1
50261: PPUSH
50262: LD_INT 0
50264: PPUSH
50265: CALL_OW 234
// end ;
50269: GO 50254
50271: POP
50272: POP
// end ;
50273: PPOPN 2
50275: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
50276: LD_EXP 33
50280: PUSH
50281: LD_EXP 36
50285: AND
50286: IFFALSE 50379
50288: GO 50290
50290: DISABLE
50291: LD_INT 0
50293: PPUSH
// begin enable ;
50294: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
50295: LD_ADDR_VAR 0 1
50299: PUSH
50300: LD_INT 22
50302: PUSH
50303: LD_OWVAR 2
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 2
50314: PUSH
50315: LD_INT 25
50317: PUSH
50318: LD_INT 5
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 25
50327: PUSH
50328: LD_INT 9
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 25
50337: PUSH
50338: LD_INT 8
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PPUSH
50355: CALL_OW 69
50359: PUSH
50360: FOR_IN
50361: IFFALSE 50377
// begin SetClass ( i , 1 ) ;
50363: LD_VAR 0 1
50367: PPUSH
50368: LD_INT 1
50370: PPUSH
50371: CALL_OW 336
// end ;
50375: GO 50360
50377: POP
50378: POP
// end ;
50379: PPOPN 1
50381: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
50382: LD_EXP 33
50386: PUSH
50387: LD_EXP 37
50391: AND
50392: PUSH
50393: LD_OWVAR 65
50397: PUSH
50398: LD_INT 7
50400: LESS
50401: AND
50402: IFFALSE 50416
50404: GO 50406
50406: DISABLE
// begin enable ;
50407: ENABLE
// game_speed := 7 ;
50408: LD_ADDR_OWVAR 65
50412: PUSH
50413: LD_INT 7
50415: ST_TO_ADDR
// end ;
50416: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
50417: LD_EXP 33
50421: PUSH
50422: LD_EXP 40
50426: AND
50427: IFFALSE 50629
50429: GO 50431
50431: DISABLE
50432: LD_INT 0
50434: PPUSH
50435: PPUSH
50436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
50437: LD_ADDR_VAR 0 3
50441: PUSH
50442: LD_INT 81
50444: PUSH
50445: LD_OWVAR 2
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 21
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PPUSH
50468: CALL_OW 69
50472: ST_TO_ADDR
// if not tmp then
50473: LD_VAR 0 3
50477: NOT
50478: IFFALSE 50482
// exit ;
50480: GO 50629
// if tmp > 5 then
50482: LD_VAR 0 3
50486: PUSH
50487: LD_INT 5
50489: GREATER
50490: IFFALSE 50502
// k := 5 else
50492: LD_ADDR_VAR 0 2
50496: PUSH
50497: LD_INT 5
50499: ST_TO_ADDR
50500: GO 50512
// k := tmp ;
50502: LD_ADDR_VAR 0 2
50506: PUSH
50507: LD_VAR 0 3
50511: ST_TO_ADDR
// for i := 1 to k do
50512: LD_ADDR_VAR 0 1
50516: PUSH
50517: DOUBLE
50518: LD_INT 1
50520: DEC
50521: ST_TO_ADDR
50522: LD_VAR 0 2
50526: PUSH
50527: FOR_TO
50528: IFFALSE 50627
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
50530: LD_VAR 0 3
50534: PUSH
50535: LD_VAR 0 1
50539: ARRAY
50540: PPUSH
50541: LD_VAR 0 1
50545: PUSH
50546: LD_INT 4
50548: MOD
50549: PUSH
50550: LD_INT 1
50552: PLUS
50553: PPUSH
50554: CALL_OW 259
50558: PUSH
50559: LD_INT 10
50561: LESS
50562: IFFALSE 50625
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
50564: LD_VAR 0 3
50568: PUSH
50569: LD_VAR 0 1
50573: ARRAY
50574: PPUSH
50575: LD_VAR 0 1
50579: PUSH
50580: LD_INT 4
50582: MOD
50583: PUSH
50584: LD_INT 1
50586: PLUS
50587: PPUSH
50588: LD_VAR 0 3
50592: PUSH
50593: LD_VAR 0 1
50597: ARRAY
50598: PPUSH
50599: LD_VAR 0 1
50603: PUSH
50604: LD_INT 4
50606: MOD
50607: PUSH
50608: LD_INT 1
50610: PLUS
50611: PPUSH
50612: CALL_OW 259
50616: PUSH
50617: LD_INT 1
50619: PLUS
50620: PPUSH
50621: CALL_OW 237
50625: GO 50527
50627: POP
50628: POP
// end ;
50629: PPOPN 3
50631: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
50632: LD_EXP 33
50636: PUSH
50637: LD_EXP 41
50641: AND
50642: IFFALSE 50662
50644: GO 50646
50646: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
50647: LD_INT 4
50649: PPUSH
50650: LD_OWVAR 2
50654: PPUSH
50655: LD_INT 0
50657: PPUSH
50658: CALL_OW 324
50662: END
// every 0 0$1 trigger StreamModeActive and sShovel do
50663: LD_EXP 33
50667: PUSH
50668: LD_EXP 70
50672: AND
50673: IFFALSE 50693
50675: GO 50677
50677: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
50678: LD_INT 19
50680: PPUSH
50681: LD_OWVAR 2
50685: PPUSH
50686: LD_INT 0
50688: PPUSH
50689: CALL_OW 324
50693: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
50694: LD_EXP 33
50698: PUSH
50699: LD_EXP 42
50703: AND
50704: IFFALSE 50806
50706: GO 50708
50708: DISABLE
50709: LD_INT 0
50711: PPUSH
50712: PPUSH
// begin enable ;
50713: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
50714: LD_ADDR_VAR 0 2
50718: PUSH
50719: LD_INT 22
50721: PUSH
50722: LD_OWVAR 2
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: PUSH
50734: LD_INT 34
50736: PUSH
50737: LD_INT 11
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 34
50746: PUSH
50747: LD_INT 30
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: LIST
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PPUSH
50763: CALL_OW 69
50767: ST_TO_ADDR
// if not tmp then
50768: LD_VAR 0 2
50772: NOT
50773: IFFALSE 50777
// exit ;
50775: GO 50806
// for i in tmp do
50777: LD_ADDR_VAR 0 1
50781: PUSH
50782: LD_VAR 0 2
50786: PUSH
50787: FOR_IN
50788: IFFALSE 50804
// begin SetLives ( i , 0 ) ;
50790: LD_VAR 0 1
50794: PPUSH
50795: LD_INT 0
50797: PPUSH
50798: CALL_OW 234
// end ;
50802: GO 50787
50804: POP
50805: POP
// end ;
50806: PPOPN 2
50808: END
// every 0 0$1 trigger StreamModeActive and sBunker do
50809: LD_EXP 33
50813: PUSH
50814: LD_EXP 43
50818: AND
50819: IFFALSE 50839
50821: GO 50823
50823: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
50824: LD_INT 32
50826: PPUSH
50827: LD_OWVAR 2
50831: PPUSH
50832: LD_INT 0
50834: PPUSH
50835: CALL_OW 324
50839: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
50840: LD_EXP 33
50844: PUSH
50845: LD_EXP 44
50849: AND
50850: IFFALSE 51031
50852: GO 50854
50854: DISABLE
50855: LD_INT 0
50857: PPUSH
50858: PPUSH
50859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
50860: LD_ADDR_VAR 0 2
50864: PUSH
50865: LD_INT 22
50867: PUSH
50868: LD_OWVAR 2
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 33
50879: PUSH
50880: LD_INT 3
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PPUSH
50891: CALL_OW 69
50895: ST_TO_ADDR
// if not tmp then
50896: LD_VAR 0 2
50900: NOT
50901: IFFALSE 50905
// exit ;
50903: GO 51031
// side := 0 ;
50905: LD_ADDR_VAR 0 3
50909: PUSH
50910: LD_INT 0
50912: ST_TO_ADDR
// for i := 1 to 8 do
50913: LD_ADDR_VAR 0 1
50917: PUSH
50918: DOUBLE
50919: LD_INT 1
50921: DEC
50922: ST_TO_ADDR
50923: LD_INT 8
50925: PUSH
50926: FOR_TO
50927: IFFALSE 50975
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
50929: LD_OWVAR 2
50933: PUSH
50934: LD_VAR 0 1
50938: NONEQUAL
50939: PUSH
50940: LD_OWVAR 2
50944: PPUSH
50945: LD_VAR 0 1
50949: PPUSH
50950: CALL_OW 81
50954: PUSH
50955: LD_INT 2
50957: EQUAL
50958: AND
50959: IFFALSE 50973
// begin side := i ;
50961: LD_ADDR_VAR 0 3
50965: PUSH
50966: LD_VAR 0 1
50970: ST_TO_ADDR
// break ;
50971: GO 50975
// end ;
50973: GO 50926
50975: POP
50976: POP
// if not side then
50977: LD_VAR 0 3
50981: NOT
50982: IFFALSE 50986
// exit ;
50984: GO 51031
// for i := 1 to tmp do
50986: LD_ADDR_VAR 0 1
50990: PUSH
50991: DOUBLE
50992: LD_INT 1
50994: DEC
50995: ST_TO_ADDR
50996: LD_VAR 0 2
51000: PUSH
51001: FOR_TO
51002: IFFALSE 51029
// if Prob ( 60 ) then
51004: LD_INT 60
51006: PPUSH
51007: CALL_OW 13
51011: IFFALSE 51027
// SetSide ( i , side ) ;
51013: LD_VAR 0 1
51017: PPUSH
51018: LD_VAR 0 3
51022: PPUSH
51023: CALL_OW 235
51027: GO 51001
51029: POP
51030: POP
// end ;
51031: PPOPN 3
51033: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
51034: LD_EXP 33
51038: PUSH
51039: LD_EXP 46
51043: AND
51044: IFFALSE 51163
51046: GO 51048
51048: DISABLE
51049: LD_INT 0
51051: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
51052: LD_ADDR_VAR 0 1
51056: PUSH
51057: LD_INT 22
51059: PUSH
51060: LD_OWVAR 2
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 21
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 3
51081: PUSH
51082: LD_INT 23
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: LIST
51100: PPUSH
51101: CALL_OW 69
51105: PUSH
51106: FOR_IN
51107: IFFALSE 51161
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
51109: LD_VAR 0 1
51113: PPUSH
51114: CALL_OW 257
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: LD_INT 3
51127: PUSH
51128: LD_INT 4
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: IN
51137: IFFALSE 51159
// SetClass ( un , rand ( 1 , 4 ) ) ;
51139: LD_VAR 0 1
51143: PPUSH
51144: LD_INT 1
51146: PPUSH
51147: LD_INT 4
51149: PPUSH
51150: CALL_OW 12
51154: PPUSH
51155: CALL_OW 336
51159: GO 51106
51161: POP
51162: POP
// end ;
51163: PPOPN 1
51165: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
51166: LD_EXP 33
51170: PUSH
51171: LD_EXP 45
51175: AND
51176: IFFALSE 51255
51178: GO 51180
51180: DISABLE
51181: LD_INT 0
51183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
51184: LD_ADDR_VAR 0 1
51188: PUSH
51189: LD_INT 22
51191: PUSH
51192: LD_OWVAR 2
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 21
51203: PUSH
51204: LD_INT 3
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PPUSH
51215: CALL_OW 69
51219: ST_TO_ADDR
// if not tmp then
51220: LD_VAR 0 1
51224: NOT
51225: IFFALSE 51229
// exit ;
51227: GO 51255
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
51229: LD_VAR 0 1
51233: PUSH
51234: LD_INT 1
51236: PPUSH
51237: LD_VAR 0 1
51241: PPUSH
51242: CALL_OW 12
51246: ARRAY
51247: PPUSH
51248: LD_INT 100
51250: PPUSH
51251: CALL_OW 234
// end ;
51255: PPOPN 1
51257: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
51258: LD_EXP 33
51262: PUSH
51263: LD_EXP 47
51267: AND
51268: IFFALSE 51366
51270: GO 51272
51272: DISABLE
51273: LD_INT 0
51275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
51276: LD_ADDR_VAR 0 1
51280: PUSH
51281: LD_INT 22
51283: PUSH
51284: LD_OWVAR 2
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 21
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PPUSH
51307: CALL_OW 69
51311: ST_TO_ADDR
// if not tmp then
51312: LD_VAR 0 1
51316: NOT
51317: IFFALSE 51321
// exit ;
51319: GO 51366
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
51321: LD_VAR 0 1
51325: PUSH
51326: LD_INT 1
51328: PPUSH
51329: LD_VAR 0 1
51333: PPUSH
51334: CALL_OW 12
51338: ARRAY
51339: PPUSH
51340: LD_INT 1
51342: PPUSH
51343: LD_INT 4
51345: PPUSH
51346: CALL_OW 12
51350: PPUSH
51351: LD_INT 3000
51353: PPUSH
51354: LD_INT 9000
51356: PPUSH
51357: CALL_OW 12
51361: PPUSH
51362: CALL_OW 492
// end ;
51366: PPOPN 1
51368: END
// every 0 0$1 trigger StreamModeActive and sDepot do
51369: LD_EXP 33
51373: PUSH
51374: LD_EXP 48
51378: AND
51379: IFFALSE 51399
51381: GO 51383
51383: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
51384: LD_INT 1
51386: PPUSH
51387: LD_OWVAR 2
51391: PPUSH
51392: LD_INT 0
51394: PPUSH
51395: CALL_OW 324
51399: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
51400: LD_EXP 33
51404: PUSH
51405: LD_EXP 49
51409: AND
51410: IFFALSE 51493
51412: GO 51414
51414: DISABLE
51415: LD_INT 0
51417: PPUSH
51418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
51419: LD_ADDR_VAR 0 2
51423: PUSH
51424: LD_INT 22
51426: PUSH
51427: LD_OWVAR 2
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 21
51438: PUSH
51439: LD_INT 3
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PPUSH
51450: CALL_OW 69
51454: ST_TO_ADDR
// if not tmp then
51455: LD_VAR 0 2
51459: NOT
51460: IFFALSE 51464
// exit ;
51462: GO 51493
// for i in tmp do
51464: LD_ADDR_VAR 0 1
51468: PUSH
51469: LD_VAR 0 2
51473: PUSH
51474: FOR_IN
51475: IFFALSE 51491
// SetBLevel ( i , 10 ) ;
51477: LD_VAR 0 1
51481: PPUSH
51482: LD_INT 10
51484: PPUSH
51485: CALL_OW 241
51489: GO 51474
51491: POP
51492: POP
// end ;
51493: PPOPN 2
51495: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
51496: LD_EXP 33
51500: PUSH
51501: LD_EXP 50
51505: AND
51506: IFFALSE 51617
51508: GO 51510
51510: DISABLE
51511: LD_INT 0
51513: PPUSH
51514: PPUSH
51515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51516: LD_ADDR_VAR 0 3
51520: PUSH
51521: LD_INT 22
51523: PUSH
51524: LD_OWVAR 2
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 25
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PPUSH
51547: CALL_OW 69
51551: ST_TO_ADDR
// if not tmp then
51552: LD_VAR 0 3
51556: NOT
51557: IFFALSE 51561
// exit ;
51559: GO 51617
// un := tmp [ rand ( 1 , tmp ) ] ;
51561: LD_ADDR_VAR 0 2
51565: PUSH
51566: LD_VAR 0 3
51570: PUSH
51571: LD_INT 1
51573: PPUSH
51574: LD_VAR 0 3
51578: PPUSH
51579: CALL_OW 12
51583: ARRAY
51584: ST_TO_ADDR
// if Crawls ( un ) then
51585: LD_VAR 0 2
51589: PPUSH
51590: CALL_OW 318
51594: IFFALSE 51605
// ComWalk ( un ) ;
51596: LD_VAR 0 2
51600: PPUSH
51601: CALL_OW 138
// SetClass ( un , class_sniper ) ;
51605: LD_VAR 0 2
51609: PPUSH
51610: LD_INT 5
51612: PPUSH
51613: CALL_OW 336
// end ;
51617: PPOPN 3
51619: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
51620: LD_EXP 33
51624: PUSH
51625: LD_EXP 51
51629: AND
51630: PUSH
51631: LD_OWVAR 67
51635: PUSH
51636: LD_INT 4
51638: LESS
51639: AND
51640: IFFALSE 51659
51642: GO 51644
51644: DISABLE
// begin Difficulty := Difficulty + 1 ;
51645: LD_ADDR_OWVAR 67
51649: PUSH
51650: LD_OWVAR 67
51654: PUSH
51655: LD_INT 1
51657: PLUS
51658: ST_TO_ADDR
// end ;
51659: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
51660: LD_EXP 33
51664: PUSH
51665: LD_EXP 52
51669: AND
51670: IFFALSE 51773
51672: GO 51674
51674: DISABLE
51675: LD_INT 0
51677: PPUSH
// begin for i := 1 to 5 do
51678: LD_ADDR_VAR 0 1
51682: PUSH
51683: DOUBLE
51684: LD_INT 1
51686: DEC
51687: ST_TO_ADDR
51688: LD_INT 5
51690: PUSH
51691: FOR_TO
51692: IFFALSE 51771
// begin uc_nation := nation_nature ;
51694: LD_ADDR_OWVAR 21
51698: PUSH
51699: LD_INT 0
51701: ST_TO_ADDR
// uc_side := 0 ;
51702: LD_ADDR_OWVAR 20
51706: PUSH
51707: LD_INT 0
51709: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51710: LD_ADDR_OWVAR 29
51714: PUSH
51715: LD_INT 12
51717: PUSH
51718: LD_INT 12
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: ST_TO_ADDR
// hc_agressivity := 20 ;
51725: LD_ADDR_OWVAR 35
51729: PUSH
51730: LD_INT 20
51732: ST_TO_ADDR
// hc_class := class_tiger ;
51733: LD_ADDR_OWVAR 28
51737: PUSH
51738: LD_INT 14
51740: ST_TO_ADDR
// hc_gallery :=  ;
51741: LD_ADDR_OWVAR 33
51745: PUSH
51746: LD_STRING 
51748: ST_TO_ADDR
// hc_name :=  ;
51749: LD_ADDR_OWVAR 26
51753: PUSH
51754: LD_STRING 
51756: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
51757: CALL_OW 44
51761: PPUSH
51762: LD_INT 0
51764: PPUSH
51765: CALL_OW 51
// end ;
51769: GO 51691
51771: POP
51772: POP
// end ;
51773: PPOPN 1
51775: END
// every 0 0$1 trigger StreamModeActive and sBomb do
51776: LD_EXP 33
51780: PUSH
51781: LD_EXP 53
51785: AND
51786: IFFALSE 51795
51788: GO 51790
51790: DISABLE
// StreamSibBomb ;
51791: CALL 51796 0 0
51795: END
// export function StreamSibBomb ; var i , x , y ; begin
51796: LD_INT 0
51798: PPUSH
51799: PPUSH
51800: PPUSH
51801: PPUSH
// result := false ;
51802: LD_ADDR_VAR 0 1
51806: PUSH
51807: LD_INT 0
51809: ST_TO_ADDR
// for i := 1 to 16 do
51810: LD_ADDR_VAR 0 2
51814: PUSH
51815: DOUBLE
51816: LD_INT 1
51818: DEC
51819: ST_TO_ADDR
51820: LD_INT 16
51822: PUSH
51823: FOR_TO
51824: IFFALSE 52023
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
51826: LD_ADDR_VAR 0 3
51830: PUSH
51831: LD_INT 10
51833: PUSH
51834: LD_INT 20
51836: PUSH
51837: LD_INT 30
51839: PUSH
51840: LD_INT 40
51842: PUSH
51843: LD_INT 50
51845: PUSH
51846: LD_INT 60
51848: PUSH
51849: LD_INT 70
51851: PUSH
51852: LD_INT 80
51854: PUSH
51855: LD_INT 90
51857: PUSH
51858: LD_INT 100
51860: PUSH
51861: LD_INT 110
51863: PUSH
51864: LD_INT 120
51866: PUSH
51867: LD_INT 130
51869: PUSH
51870: LD_INT 140
51872: PUSH
51873: LD_INT 150
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: PPUSH
51896: LD_INT 15
51898: PPUSH
51899: CALL_OW 12
51903: ARRAY
51904: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
51905: LD_ADDR_VAR 0 4
51909: PUSH
51910: LD_INT 10
51912: PUSH
51913: LD_INT 20
51915: PUSH
51916: LD_INT 30
51918: PUSH
51919: LD_INT 40
51921: PUSH
51922: LD_INT 50
51924: PUSH
51925: LD_INT 60
51927: PUSH
51928: LD_INT 70
51930: PUSH
51931: LD_INT 80
51933: PUSH
51934: LD_INT 90
51936: PUSH
51937: LD_INT 100
51939: PUSH
51940: LD_INT 110
51942: PUSH
51943: LD_INT 120
51945: PUSH
51946: LD_INT 130
51948: PUSH
51949: LD_INT 140
51951: PUSH
51952: LD_INT 150
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: PPUSH
51975: LD_INT 15
51977: PPUSH
51978: CALL_OW 12
51982: ARRAY
51983: ST_TO_ADDR
// if ValidHex ( x , y ) then
51984: LD_VAR 0 3
51988: PPUSH
51989: LD_VAR 0 4
51993: PPUSH
51994: CALL_OW 488
51998: IFFALSE 52021
// begin result := [ x , y ] ;
52000: LD_ADDR_VAR 0 1
52004: PUSH
52005: LD_VAR 0 3
52009: PUSH
52010: LD_VAR 0 4
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: ST_TO_ADDR
// break ;
52019: GO 52023
// end ; end ;
52021: GO 51823
52023: POP
52024: POP
// if result then
52025: LD_VAR 0 1
52029: IFFALSE 52089
// begin ToLua ( playSibBomb() ) ;
52031: LD_STRING playSibBomb()
52033: PPUSH
52034: CALL_OW 559
// wait ( 0 0$14 ) ;
52038: LD_INT 490
52040: PPUSH
52041: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
52045: LD_VAR 0 1
52049: PUSH
52050: LD_INT 1
52052: ARRAY
52053: PPUSH
52054: LD_VAR 0 1
52058: PUSH
52059: LD_INT 2
52061: ARRAY
52062: PPUSH
52063: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
52067: LD_VAR 0 1
52071: PUSH
52072: LD_INT 1
52074: ARRAY
52075: PPUSH
52076: LD_VAR 0 1
52080: PUSH
52081: LD_INT 2
52083: ARRAY
52084: PPUSH
52085: CALL_OW 429
// end ; end ;
52089: LD_VAR 0 1
52093: RET
// every 0 0$1 trigger StreamModeActive and sReset do
52094: LD_EXP 33
52098: PUSH
52099: LD_EXP 55
52103: AND
52104: IFFALSE 52116
52106: GO 52108
52108: DISABLE
// YouLost (  ) ;
52109: LD_STRING 
52111: PPUSH
52112: CALL_OW 104
52116: END
// every 0 0$1 trigger StreamModeActive and sFog do
52117: LD_EXP 33
52121: PUSH
52122: LD_EXP 54
52126: AND
52127: IFFALSE 52141
52129: GO 52131
52131: DISABLE
// FogOff ( your_side ) ;
52132: LD_OWVAR 2
52136: PPUSH
52137: CALL_OW 344
52141: END
// every 0 0$1 trigger StreamModeActive and sSun do
52142: LD_EXP 33
52146: PUSH
52147: LD_EXP 56
52151: AND
52152: IFFALSE 52180
52154: GO 52156
52156: DISABLE
// begin solar_recharge_percent := 0 ;
52157: LD_ADDR_OWVAR 79
52161: PUSH
52162: LD_INT 0
52164: ST_TO_ADDR
// wait ( 5 5$00 ) ;
52165: LD_INT 10500
52167: PPUSH
52168: CALL_OW 67
// solar_recharge_percent := 100 ;
52172: LD_ADDR_OWVAR 79
52176: PUSH
52177: LD_INT 100
52179: ST_TO_ADDR
// end ;
52180: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
52181: LD_EXP 33
52185: PUSH
52186: LD_EXP 57
52190: AND
52191: IFFALSE 52430
52193: GO 52195
52195: DISABLE
52196: LD_INT 0
52198: PPUSH
52199: PPUSH
52200: PPUSH
// begin tmp := [ ] ;
52201: LD_ADDR_VAR 0 3
52205: PUSH
52206: EMPTY
52207: ST_TO_ADDR
// for i := 1 to 6 do
52208: LD_ADDR_VAR 0 1
52212: PUSH
52213: DOUBLE
52214: LD_INT 1
52216: DEC
52217: ST_TO_ADDR
52218: LD_INT 6
52220: PUSH
52221: FOR_TO
52222: IFFALSE 52327
// begin uc_nation := nation_nature ;
52224: LD_ADDR_OWVAR 21
52228: PUSH
52229: LD_INT 0
52231: ST_TO_ADDR
// uc_side := 0 ;
52232: LD_ADDR_OWVAR 20
52236: PUSH
52237: LD_INT 0
52239: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
52240: LD_ADDR_OWVAR 29
52244: PUSH
52245: LD_INT 12
52247: PUSH
52248: LD_INT 12
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: ST_TO_ADDR
// hc_agressivity := 20 ;
52255: LD_ADDR_OWVAR 35
52259: PUSH
52260: LD_INT 20
52262: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
52263: LD_ADDR_OWVAR 28
52267: PUSH
52268: LD_INT 17
52270: ST_TO_ADDR
// hc_gallery :=  ;
52271: LD_ADDR_OWVAR 33
52275: PUSH
52276: LD_STRING 
52278: ST_TO_ADDR
// hc_name :=  ;
52279: LD_ADDR_OWVAR 26
52283: PUSH
52284: LD_STRING 
52286: ST_TO_ADDR
// un := CreateHuman ;
52287: LD_ADDR_VAR 0 2
52291: PUSH
52292: CALL_OW 44
52296: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
52297: LD_VAR 0 2
52301: PPUSH
52302: LD_INT 1
52304: PPUSH
52305: CALL_OW 51
// tmp := tmp ^ un ;
52309: LD_ADDR_VAR 0 3
52313: PUSH
52314: LD_VAR 0 3
52318: PUSH
52319: LD_VAR 0 2
52323: ADD
52324: ST_TO_ADDR
// end ;
52325: GO 52221
52327: POP
52328: POP
// repeat wait ( 0 0$1 ) ;
52329: LD_INT 35
52331: PPUSH
52332: CALL_OW 67
// for un in tmp do
52336: LD_ADDR_VAR 0 2
52340: PUSH
52341: LD_VAR 0 3
52345: PUSH
52346: FOR_IN
52347: IFFALSE 52421
// begin if IsDead ( un ) then
52349: LD_VAR 0 2
52353: PPUSH
52354: CALL_OW 301
52358: IFFALSE 52378
// begin tmp := tmp diff un ;
52360: LD_ADDR_VAR 0 3
52364: PUSH
52365: LD_VAR 0 3
52369: PUSH
52370: LD_VAR 0 2
52374: DIFF
52375: ST_TO_ADDR
// continue ;
52376: GO 52346
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
52378: LD_VAR 0 2
52382: PPUSH
52383: LD_INT 3
52385: PUSH
52386: LD_INT 22
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PPUSH
52400: CALL_OW 69
52404: PPUSH
52405: LD_VAR 0 2
52409: PPUSH
52410: CALL_OW 74
52414: PPUSH
52415: CALL_OW 115
// end ;
52419: GO 52346
52421: POP
52422: POP
// until not tmp ;
52423: LD_VAR 0 3
52427: NOT
52428: IFFALSE 52329
// end ;
52430: PPOPN 3
52432: END
// every 0 0$1 trigger StreamModeActive and sTroll do
52433: LD_EXP 33
52437: PUSH
52438: LD_EXP 58
52442: AND
52443: IFFALSE 52497
52445: GO 52447
52447: DISABLE
// begin ToLua ( displayTroll(); ) ;
52448: LD_STRING displayTroll();
52450: PPUSH
52451: CALL_OW 559
// wait ( 3 3$00 ) ;
52455: LD_INT 6300
52457: PPUSH
52458: CALL_OW 67
// ToLua ( hideTroll(); ) ;
52462: LD_STRING hideTroll();
52464: PPUSH
52465: CALL_OW 559
// wait ( 1 1$00 ) ;
52469: LD_INT 2100
52471: PPUSH
52472: CALL_OW 67
// ToLua ( displayTroll(); ) ;
52476: LD_STRING displayTroll();
52478: PPUSH
52479: CALL_OW 559
// wait ( 1 1$00 ) ;
52483: LD_INT 2100
52485: PPUSH
52486: CALL_OW 67
// ToLua ( hideTroll(); ) ;
52490: LD_STRING hideTroll();
52492: PPUSH
52493: CALL_OW 559
// end ;
52497: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
52498: LD_EXP 33
52502: PUSH
52503: LD_EXP 59
52507: AND
52508: IFFALSE 52571
52510: GO 52512
52512: DISABLE
52513: LD_INT 0
52515: PPUSH
// begin p := 0 ;
52516: LD_ADDR_VAR 0 1
52520: PUSH
52521: LD_INT 0
52523: ST_TO_ADDR
// repeat game_speed := 1 ;
52524: LD_ADDR_OWVAR 65
52528: PUSH
52529: LD_INT 1
52531: ST_TO_ADDR
// wait ( 0 0$1 ) ;
52532: LD_INT 35
52534: PPUSH
52535: CALL_OW 67
// p := p + 1 ;
52539: LD_ADDR_VAR 0 1
52543: PUSH
52544: LD_VAR 0 1
52548: PUSH
52549: LD_INT 1
52551: PLUS
52552: ST_TO_ADDR
// until p >= 60 ;
52553: LD_VAR 0 1
52557: PUSH
52558: LD_INT 60
52560: GREATEREQUAL
52561: IFFALSE 52524
// game_speed := 4 ;
52563: LD_ADDR_OWVAR 65
52567: PUSH
52568: LD_INT 4
52570: ST_TO_ADDR
// end ;
52571: PPOPN 1
52573: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
52574: LD_EXP 33
52578: PUSH
52579: LD_EXP 60
52583: AND
52584: IFFALSE 52730
52586: GO 52588
52588: DISABLE
52589: LD_INT 0
52591: PPUSH
52592: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52593: LD_ADDR_VAR 0 1
52597: PUSH
52598: LD_INT 22
52600: PUSH
52601: LD_OWVAR 2
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 2
52612: PUSH
52613: LD_INT 30
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 30
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: LIST
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PPUSH
52642: CALL_OW 69
52646: ST_TO_ADDR
// if not depot then
52647: LD_VAR 0 1
52651: NOT
52652: IFFALSE 52656
// exit ;
52654: GO 52730
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
52656: LD_ADDR_VAR 0 2
52660: PUSH
52661: LD_VAR 0 1
52665: PUSH
52666: LD_INT 1
52668: PPUSH
52669: LD_VAR 0 1
52673: PPUSH
52674: CALL_OW 12
52678: ARRAY
52679: PPUSH
52680: CALL_OW 274
52684: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
52685: LD_VAR 0 2
52689: PPUSH
52690: LD_INT 1
52692: PPUSH
52693: LD_INT 0
52695: PPUSH
52696: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
52700: LD_VAR 0 2
52704: PPUSH
52705: LD_INT 2
52707: PPUSH
52708: LD_INT 0
52710: PPUSH
52711: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
52715: LD_VAR 0 2
52719: PPUSH
52720: LD_INT 3
52722: PPUSH
52723: LD_INT 0
52725: PPUSH
52726: CALL_OW 277
// end ;
52730: PPOPN 2
52732: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
52733: LD_EXP 33
52737: PUSH
52738: LD_EXP 61
52742: AND
52743: IFFALSE 52840
52745: GO 52747
52747: DISABLE
52748: LD_INT 0
52750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
52751: LD_ADDR_VAR 0 1
52755: PUSH
52756: LD_INT 22
52758: PUSH
52759: LD_OWVAR 2
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 21
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 3
52780: PUSH
52781: LD_INT 23
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: LIST
52799: PPUSH
52800: CALL_OW 69
52804: ST_TO_ADDR
// if not tmp then
52805: LD_VAR 0 1
52809: NOT
52810: IFFALSE 52814
// exit ;
52812: GO 52840
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
52814: LD_VAR 0 1
52818: PUSH
52819: LD_INT 1
52821: PPUSH
52822: LD_VAR 0 1
52826: PPUSH
52827: CALL_OW 12
52831: ARRAY
52832: PPUSH
52833: LD_INT 200
52835: PPUSH
52836: CALL_OW 234
// end ;
52840: PPOPN 1
52842: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
52843: LD_EXP 33
52847: PUSH
52848: LD_EXP 62
52852: AND
52853: IFFALSE 52932
52855: GO 52857
52857: DISABLE
52858: LD_INT 0
52860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
52861: LD_ADDR_VAR 0 1
52865: PUSH
52866: LD_INT 22
52868: PUSH
52869: LD_OWVAR 2
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 21
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PPUSH
52892: CALL_OW 69
52896: ST_TO_ADDR
// if not tmp then
52897: LD_VAR 0 1
52901: NOT
52902: IFFALSE 52906
// exit ;
52904: GO 52932
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
52906: LD_VAR 0 1
52910: PUSH
52911: LD_INT 1
52913: PPUSH
52914: LD_VAR 0 1
52918: PPUSH
52919: CALL_OW 12
52923: ARRAY
52924: PPUSH
52925: LD_INT 60
52927: PPUSH
52928: CALL_OW 234
// end ;
52932: PPOPN 1
52934: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
52935: LD_EXP 33
52939: PUSH
52940: LD_EXP 63
52944: AND
52945: IFFALSE 53044
52947: GO 52949
52949: DISABLE
52950: LD_INT 0
52952: PPUSH
52953: PPUSH
// begin enable ;
52954: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
52955: LD_ADDR_VAR 0 1
52959: PUSH
52960: LD_INT 22
52962: PUSH
52963: LD_OWVAR 2
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 61
52974: PUSH
52975: EMPTY
52976: LIST
52977: PUSH
52978: LD_INT 33
52980: PUSH
52981: LD_INT 2
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: LIST
52992: PPUSH
52993: CALL_OW 69
52997: ST_TO_ADDR
// if not tmp then
52998: LD_VAR 0 1
53002: NOT
53003: IFFALSE 53007
// exit ;
53005: GO 53044
// for i in tmp do
53007: LD_ADDR_VAR 0 2
53011: PUSH
53012: LD_VAR 0 1
53016: PUSH
53017: FOR_IN
53018: IFFALSE 53042
// if IsControledBy ( i ) then
53020: LD_VAR 0 2
53024: PPUSH
53025: CALL_OW 312
53029: IFFALSE 53040
// ComUnlink ( i ) ;
53031: LD_VAR 0 2
53035: PPUSH
53036: CALL_OW 136
53040: GO 53017
53042: POP
53043: POP
// end ;
53044: PPOPN 2
53046: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
53047: LD_EXP 33
53051: PUSH
53052: LD_EXP 64
53056: AND
53057: IFFALSE 53197
53059: GO 53061
53061: DISABLE
53062: LD_INT 0
53064: PPUSH
53065: PPUSH
// begin ToLua ( displayPowell(); ) ;
53066: LD_STRING displayPowell();
53068: PPUSH
53069: CALL_OW 559
// uc_side := 0 ;
53073: LD_ADDR_OWVAR 20
53077: PUSH
53078: LD_INT 0
53080: ST_TO_ADDR
// uc_nation := 2 ;
53081: LD_ADDR_OWVAR 21
53085: PUSH
53086: LD_INT 2
53088: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
53089: LD_ADDR_OWVAR 37
53093: PUSH
53094: LD_INT 14
53096: ST_TO_ADDR
// vc_engine := engine_siberite ;
53097: LD_ADDR_OWVAR 39
53101: PUSH
53102: LD_INT 3
53104: ST_TO_ADDR
// vc_control := control_apeman ;
53105: LD_ADDR_OWVAR 38
53109: PUSH
53110: LD_INT 5
53112: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
53113: LD_ADDR_OWVAR 40
53117: PUSH
53118: LD_INT 29
53120: ST_TO_ADDR
// un := CreateVehicle ;
53121: LD_ADDR_VAR 0 2
53125: PUSH
53126: CALL_OW 45
53130: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53131: LD_VAR 0 2
53135: PPUSH
53136: LD_INT 1
53138: PPUSH
53139: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
53143: LD_INT 35
53145: PPUSH
53146: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
53150: LD_VAR 0 2
53154: PPUSH
53155: LD_INT 22
53157: PUSH
53158: LD_OWVAR 2
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PPUSH
53167: CALL_OW 69
53171: PPUSH
53172: LD_VAR 0 2
53176: PPUSH
53177: CALL_OW 74
53181: PPUSH
53182: CALL_OW 115
// until IsDead ( un ) ;
53186: LD_VAR 0 2
53190: PPUSH
53191: CALL_OW 301
53195: IFFALSE 53143
// end ;
53197: PPOPN 2
53199: END
// every 0 0$1 trigger StreamModeActive and sStu do
53200: LD_EXP 33
53204: PUSH
53205: LD_EXP 72
53209: AND
53210: IFFALSE 53226
53212: GO 53214
53214: DISABLE
// begin ToLua ( displayStucuk(); ) ;
53215: LD_STRING displayStucuk();
53217: PPUSH
53218: CALL_OW 559
// ResetFog ;
53222: CALL_OW 335
// end ;
53226: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
53227: LD_EXP 33
53231: PUSH
53232: LD_EXP 65
53236: AND
53237: IFFALSE 53378
53239: GO 53241
53241: DISABLE
53242: LD_INT 0
53244: PPUSH
53245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53246: LD_ADDR_VAR 0 2
53250: PUSH
53251: LD_INT 22
53253: PUSH
53254: LD_OWVAR 2
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 21
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PPUSH
53277: CALL_OW 69
53281: ST_TO_ADDR
// if not tmp then
53282: LD_VAR 0 2
53286: NOT
53287: IFFALSE 53291
// exit ;
53289: GO 53378
// un := tmp [ rand ( 1 , tmp ) ] ;
53291: LD_ADDR_VAR 0 1
53295: PUSH
53296: LD_VAR 0 2
53300: PUSH
53301: LD_INT 1
53303: PPUSH
53304: LD_VAR 0 2
53308: PPUSH
53309: CALL_OW 12
53313: ARRAY
53314: ST_TO_ADDR
// SetSide ( un , 0 ) ;
53315: LD_VAR 0 1
53319: PPUSH
53320: LD_INT 0
53322: PPUSH
53323: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
53327: LD_VAR 0 1
53331: PPUSH
53332: LD_OWVAR 3
53336: PUSH
53337: LD_VAR 0 1
53341: DIFF
53342: PPUSH
53343: LD_VAR 0 1
53347: PPUSH
53348: CALL_OW 74
53352: PPUSH
53353: CALL_OW 115
// wait ( 0 0$20 ) ;
53357: LD_INT 700
53359: PPUSH
53360: CALL_OW 67
// SetSide ( un , your_side ) ;
53364: LD_VAR 0 1
53368: PPUSH
53369: LD_OWVAR 2
53373: PPUSH
53374: CALL_OW 235
// end ;
53378: PPOPN 2
53380: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
53381: LD_EXP 33
53385: PUSH
53386: LD_EXP 66
53390: AND
53391: IFFALSE 53497
53393: GO 53395
53395: DISABLE
53396: LD_INT 0
53398: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53399: LD_ADDR_VAR 0 1
53403: PUSH
53404: LD_INT 22
53406: PUSH
53407: LD_OWVAR 2
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: LD_INT 30
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 30
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: LIST
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PPUSH
53448: CALL_OW 69
53452: ST_TO_ADDR
// if not depot then
53453: LD_VAR 0 1
53457: NOT
53458: IFFALSE 53462
// exit ;
53460: GO 53497
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
53462: LD_VAR 0 1
53466: PUSH
53467: LD_INT 1
53469: ARRAY
53470: PPUSH
53471: CALL_OW 250
53475: PPUSH
53476: LD_VAR 0 1
53480: PUSH
53481: LD_INT 1
53483: ARRAY
53484: PPUSH
53485: CALL_OW 251
53489: PPUSH
53490: LD_INT 70
53492: PPUSH
53493: CALL_OW 495
// end ;
53497: PPOPN 1
53499: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
53500: LD_EXP 33
53504: PUSH
53505: LD_EXP 67
53509: AND
53510: IFFALSE 53721
53512: GO 53514
53514: DISABLE
53515: LD_INT 0
53517: PPUSH
53518: PPUSH
53519: PPUSH
53520: PPUSH
53521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53522: LD_ADDR_VAR 0 5
53526: PUSH
53527: LD_INT 22
53529: PUSH
53530: LD_OWVAR 2
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 21
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PPUSH
53553: CALL_OW 69
53557: ST_TO_ADDR
// if not tmp then
53558: LD_VAR 0 5
53562: NOT
53563: IFFALSE 53567
// exit ;
53565: GO 53721
// for i in tmp do
53567: LD_ADDR_VAR 0 1
53571: PUSH
53572: LD_VAR 0 5
53576: PUSH
53577: FOR_IN
53578: IFFALSE 53719
// begin d := rand ( 0 , 5 ) ;
53580: LD_ADDR_VAR 0 4
53584: PUSH
53585: LD_INT 0
53587: PPUSH
53588: LD_INT 5
53590: PPUSH
53591: CALL_OW 12
53595: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
53596: LD_ADDR_VAR 0 2
53600: PUSH
53601: LD_VAR 0 1
53605: PPUSH
53606: CALL_OW 250
53610: PPUSH
53611: LD_VAR 0 4
53615: PPUSH
53616: LD_INT 3
53618: PPUSH
53619: LD_INT 12
53621: PPUSH
53622: CALL_OW 12
53626: PPUSH
53627: CALL_OW 272
53631: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
53632: LD_ADDR_VAR 0 3
53636: PUSH
53637: LD_VAR 0 1
53641: PPUSH
53642: CALL_OW 251
53646: PPUSH
53647: LD_VAR 0 4
53651: PPUSH
53652: LD_INT 3
53654: PPUSH
53655: LD_INT 12
53657: PPUSH
53658: CALL_OW 12
53662: PPUSH
53663: CALL_OW 273
53667: ST_TO_ADDR
// if ValidHex ( x , y ) then
53668: LD_VAR 0 2
53672: PPUSH
53673: LD_VAR 0 3
53677: PPUSH
53678: CALL_OW 488
53682: IFFALSE 53717
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
53684: LD_VAR 0 1
53688: PPUSH
53689: LD_VAR 0 2
53693: PPUSH
53694: LD_VAR 0 3
53698: PPUSH
53699: LD_INT 3
53701: PPUSH
53702: LD_INT 6
53704: PPUSH
53705: CALL_OW 12
53709: PPUSH
53710: LD_INT 1
53712: PPUSH
53713: CALL_OW 483
// end ;
53717: GO 53577
53719: POP
53720: POP
// end ;
53721: PPOPN 5
53723: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
53724: LD_EXP 33
53728: PUSH
53729: LD_EXP 68
53733: AND
53734: IFFALSE 53828
53736: GO 53738
53738: DISABLE
53739: LD_INT 0
53741: PPUSH
53742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
53743: LD_ADDR_VAR 0 2
53747: PUSH
53748: LD_INT 22
53750: PUSH
53751: LD_OWVAR 2
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 32
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 21
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: LIST
53784: PPUSH
53785: CALL_OW 69
53789: ST_TO_ADDR
// if not tmp then
53790: LD_VAR 0 2
53794: NOT
53795: IFFALSE 53799
// exit ;
53797: GO 53828
// for i in tmp do
53799: LD_ADDR_VAR 0 1
53803: PUSH
53804: LD_VAR 0 2
53808: PUSH
53809: FOR_IN
53810: IFFALSE 53826
// SetFuel ( i , 0 ) ;
53812: LD_VAR 0 1
53816: PPUSH
53817: LD_INT 0
53819: PPUSH
53820: CALL_OW 240
53824: GO 53809
53826: POP
53827: POP
// end ;
53828: PPOPN 2
53830: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
53831: LD_EXP 33
53835: PUSH
53836: LD_EXP 69
53840: AND
53841: IFFALSE 53907
53843: GO 53845
53845: DISABLE
53846: LD_INT 0
53848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
53849: LD_ADDR_VAR 0 1
53853: PUSH
53854: LD_INT 22
53856: PUSH
53857: LD_OWVAR 2
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 30
53868: PUSH
53869: LD_INT 29
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PPUSH
53880: CALL_OW 69
53884: ST_TO_ADDR
// if not tmp then
53885: LD_VAR 0 1
53889: NOT
53890: IFFALSE 53894
// exit ;
53892: GO 53907
// DestroyUnit ( tmp [ 1 ] ) ;
53894: LD_VAR 0 1
53898: PUSH
53899: LD_INT 1
53901: ARRAY
53902: PPUSH
53903: CALL_OW 65
// end ;
53907: PPOPN 1
53909: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
53910: LD_EXP 33
53914: PUSH
53915: LD_EXP 71
53919: AND
53920: IFFALSE 54049
53922: GO 53924
53924: DISABLE
53925: LD_INT 0
53927: PPUSH
// begin uc_side := 0 ;
53928: LD_ADDR_OWVAR 20
53932: PUSH
53933: LD_INT 0
53935: ST_TO_ADDR
// uc_nation := nation_arabian ;
53936: LD_ADDR_OWVAR 21
53940: PUSH
53941: LD_INT 2
53943: ST_TO_ADDR
// hc_gallery :=  ;
53944: LD_ADDR_OWVAR 33
53948: PUSH
53949: LD_STRING 
53951: ST_TO_ADDR
// hc_name :=  ;
53952: LD_ADDR_OWVAR 26
53956: PUSH
53957: LD_STRING 
53959: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
53960: LD_INT 1
53962: PPUSH
53963: LD_INT 11
53965: PPUSH
53966: LD_INT 10
53968: PPUSH
53969: CALL_OW 380
// un := CreateHuman ;
53973: LD_ADDR_VAR 0 1
53977: PUSH
53978: CALL_OW 44
53982: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53983: LD_VAR 0 1
53987: PPUSH
53988: LD_INT 1
53990: PPUSH
53991: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
53995: LD_INT 35
53997: PPUSH
53998: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54002: LD_VAR 0 1
54006: PPUSH
54007: LD_INT 22
54009: PUSH
54010: LD_OWVAR 2
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PPUSH
54019: CALL_OW 69
54023: PPUSH
54024: LD_VAR 0 1
54028: PPUSH
54029: CALL_OW 74
54033: PPUSH
54034: CALL_OW 115
// until IsDead ( un ) ;
54038: LD_VAR 0 1
54042: PPUSH
54043: CALL_OW 301
54047: IFFALSE 53995
// end ;
54049: PPOPN 1
54051: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
54052: LD_EXP 33
54056: PUSH
54057: LD_EXP 73
54061: AND
54062: IFFALSE 54074
54064: GO 54066
54066: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
54067: LD_STRING earthquake(getX(game), 0, 32)
54069: PPUSH
54070: CALL_OW 559
54074: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
54075: LD_EXP 33
54079: PUSH
54080: LD_EXP 74
54084: AND
54085: IFFALSE 54176
54087: GO 54089
54089: DISABLE
54090: LD_INT 0
54092: PPUSH
// begin enable ;
54093: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
54094: LD_ADDR_VAR 0 1
54098: PUSH
54099: LD_INT 22
54101: PUSH
54102: LD_OWVAR 2
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 21
54113: PUSH
54114: LD_INT 2
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 33
54123: PUSH
54124: LD_INT 3
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: LIST
54135: PPUSH
54136: CALL_OW 69
54140: ST_TO_ADDR
// if not tmp then
54141: LD_VAR 0 1
54145: NOT
54146: IFFALSE 54150
// exit ;
54148: GO 54176
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
54150: LD_VAR 0 1
54154: PUSH
54155: LD_INT 1
54157: PPUSH
54158: LD_VAR 0 1
54162: PPUSH
54163: CALL_OW 12
54167: ARRAY
54168: PPUSH
54169: LD_INT 1
54171: PPUSH
54172: CALL_OW 234
// end ;
54176: PPOPN 1
54178: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
54179: LD_EXP 33
54183: PUSH
54184: LD_EXP 75
54188: AND
54189: IFFALSE 54330
54191: GO 54193
54193: DISABLE
54194: LD_INT 0
54196: PPUSH
54197: PPUSH
54198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54199: LD_ADDR_VAR 0 3
54203: PUSH
54204: LD_INT 22
54206: PUSH
54207: LD_OWVAR 2
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 25
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PPUSH
54230: CALL_OW 69
54234: ST_TO_ADDR
// if not tmp then
54235: LD_VAR 0 3
54239: NOT
54240: IFFALSE 54244
// exit ;
54242: GO 54330
// un := tmp [ rand ( 1 , tmp ) ] ;
54244: LD_ADDR_VAR 0 2
54248: PUSH
54249: LD_VAR 0 3
54253: PUSH
54254: LD_INT 1
54256: PPUSH
54257: LD_VAR 0 3
54261: PPUSH
54262: CALL_OW 12
54266: ARRAY
54267: ST_TO_ADDR
// if Crawls ( un ) then
54268: LD_VAR 0 2
54272: PPUSH
54273: CALL_OW 318
54277: IFFALSE 54288
// ComWalk ( un ) ;
54279: LD_VAR 0 2
54283: PPUSH
54284: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
54288: LD_VAR 0 2
54292: PPUSH
54293: LD_INT 9
54295: PPUSH
54296: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
54300: LD_INT 28
54302: PPUSH
54303: LD_OWVAR 2
54307: PPUSH
54308: LD_INT 2
54310: PPUSH
54311: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
54315: LD_INT 29
54317: PPUSH
54318: LD_OWVAR 2
54322: PPUSH
54323: LD_INT 2
54325: PPUSH
54326: CALL_OW 322
// end ;
54330: PPOPN 3
54332: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
54333: LD_EXP 33
54337: PUSH
54338: LD_EXP 76
54342: AND
54343: IFFALSE 54454
54345: GO 54347
54347: DISABLE
54348: LD_INT 0
54350: PPUSH
54351: PPUSH
54352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54353: LD_ADDR_VAR 0 3
54357: PUSH
54358: LD_INT 22
54360: PUSH
54361: LD_OWVAR 2
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 25
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PPUSH
54384: CALL_OW 69
54388: ST_TO_ADDR
// if not tmp then
54389: LD_VAR 0 3
54393: NOT
54394: IFFALSE 54398
// exit ;
54396: GO 54454
// un := tmp [ rand ( 1 , tmp ) ] ;
54398: LD_ADDR_VAR 0 2
54402: PUSH
54403: LD_VAR 0 3
54407: PUSH
54408: LD_INT 1
54410: PPUSH
54411: LD_VAR 0 3
54415: PPUSH
54416: CALL_OW 12
54420: ARRAY
54421: ST_TO_ADDR
// if Crawls ( un ) then
54422: LD_VAR 0 2
54426: PPUSH
54427: CALL_OW 318
54431: IFFALSE 54442
// ComWalk ( un ) ;
54433: LD_VAR 0 2
54437: PPUSH
54438: CALL_OW 138
// SetClass ( un , class_mortar ) ;
54442: LD_VAR 0 2
54446: PPUSH
54447: LD_INT 8
54449: PPUSH
54450: CALL_OW 336
// end ;
54454: PPOPN 3
54456: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
54457: LD_EXP 33
54461: PUSH
54462: LD_EXP 77
54466: AND
54467: IFFALSE 54611
54469: GO 54471
54471: DISABLE
54472: LD_INT 0
54474: PPUSH
54475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
54476: LD_ADDR_VAR 0 2
54480: PUSH
54481: LD_INT 22
54483: PUSH
54484: LD_OWVAR 2
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 21
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: LD_INT 34
54508: PUSH
54509: LD_INT 12
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 34
54518: PUSH
54519: LD_INT 51
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 34
54528: PUSH
54529: LD_INT 32
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: LIST
54546: PPUSH
54547: CALL_OW 69
54551: ST_TO_ADDR
// if not tmp then
54552: LD_VAR 0 2
54556: NOT
54557: IFFALSE 54561
// exit ;
54559: GO 54611
// for i in tmp do
54561: LD_ADDR_VAR 0 1
54565: PUSH
54566: LD_VAR 0 2
54570: PUSH
54571: FOR_IN
54572: IFFALSE 54609
// if GetCargo ( i , mat_artifact ) = 0 then
54574: LD_VAR 0 1
54578: PPUSH
54579: LD_INT 4
54581: PPUSH
54582: CALL_OW 289
54586: PUSH
54587: LD_INT 0
54589: EQUAL
54590: IFFALSE 54607
// SetCargo ( i , mat_siberit , 100 ) ;
54592: LD_VAR 0 1
54596: PPUSH
54597: LD_INT 3
54599: PPUSH
54600: LD_INT 100
54602: PPUSH
54603: CALL_OW 290
54607: GO 54571
54609: POP
54610: POP
// end ;
54611: PPOPN 2
54613: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
54614: LD_EXP 33
54618: PUSH
54619: LD_EXP 78
54623: AND
54624: IFFALSE 54807
54626: GO 54628
54628: DISABLE
54629: LD_INT 0
54631: PPUSH
54632: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
54633: LD_ADDR_VAR 0 2
54637: PUSH
54638: LD_INT 22
54640: PUSH
54641: LD_OWVAR 2
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PPUSH
54650: CALL_OW 69
54654: ST_TO_ADDR
// if not tmp then
54655: LD_VAR 0 2
54659: NOT
54660: IFFALSE 54664
// exit ;
54662: GO 54807
// for i := 1 to 2 do
54664: LD_ADDR_VAR 0 1
54668: PUSH
54669: DOUBLE
54670: LD_INT 1
54672: DEC
54673: ST_TO_ADDR
54674: LD_INT 2
54676: PUSH
54677: FOR_TO
54678: IFFALSE 54805
// begin uc_side := your_side ;
54680: LD_ADDR_OWVAR 20
54684: PUSH
54685: LD_OWVAR 2
54689: ST_TO_ADDR
// uc_nation := nation_american ;
54690: LD_ADDR_OWVAR 21
54694: PUSH
54695: LD_INT 1
54697: ST_TO_ADDR
// vc_chassis := us_morphling ;
54698: LD_ADDR_OWVAR 37
54702: PUSH
54703: LD_INT 5
54705: ST_TO_ADDR
// vc_engine := engine_siberite ;
54706: LD_ADDR_OWVAR 39
54710: PUSH
54711: LD_INT 3
54713: ST_TO_ADDR
// vc_control := control_computer ;
54714: LD_ADDR_OWVAR 38
54718: PUSH
54719: LD_INT 3
54721: ST_TO_ADDR
// vc_weapon := us_double_laser ;
54722: LD_ADDR_OWVAR 40
54726: PUSH
54727: LD_INT 10
54729: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
54730: LD_VAR 0 2
54734: PUSH
54735: LD_INT 1
54737: ARRAY
54738: PPUSH
54739: CALL_OW 310
54743: NOT
54744: IFFALSE 54791
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
54746: CALL_OW 45
54750: PPUSH
54751: LD_VAR 0 2
54755: PUSH
54756: LD_INT 1
54758: ARRAY
54759: PPUSH
54760: CALL_OW 250
54764: PPUSH
54765: LD_VAR 0 2
54769: PUSH
54770: LD_INT 1
54772: ARRAY
54773: PPUSH
54774: CALL_OW 251
54778: PPUSH
54779: LD_INT 12
54781: PPUSH
54782: LD_INT 1
54784: PPUSH
54785: CALL_OW 50
54789: GO 54803
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
54791: CALL_OW 45
54795: PPUSH
54796: LD_INT 1
54798: PPUSH
54799: CALL_OW 51
// end ;
54803: GO 54677
54805: POP
54806: POP
// end ;
54807: PPOPN 2
54809: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
54810: LD_EXP 33
54814: PUSH
54815: LD_EXP 79
54819: AND
54820: IFFALSE 55042
54822: GO 54824
54824: DISABLE
54825: LD_INT 0
54827: PPUSH
54828: PPUSH
54829: PPUSH
54830: PPUSH
54831: PPUSH
54832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54833: LD_ADDR_VAR 0 6
54837: PUSH
54838: LD_INT 22
54840: PUSH
54841: LD_OWVAR 2
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 21
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 3
54862: PUSH
54863: LD_INT 23
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: LIST
54881: PPUSH
54882: CALL_OW 69
54886: ST_TO_ADDR
// if not tmp then
54887: LD_VAR 0 6
54891: NOT
54892: IFFALSE 54896
// exit ;
54894: GO 55042
// s1 := rand ( 1 , 4 ) ;
54896: LD_ADDR_VAR 0 2
54900: PUSH
54901: LD_INT 1
54903: PPUSH
54904: LD_INT 4
54906: PPUSH
54907: CALL_OW 12
54911: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
54912: LD_ADDR_VAR 0 4
54916: PUSH
54917: LD_VAR 0 6
54921: PUSH
54922: LD_INT 1
54924: ARRAY
54925: PPUSH
54926: LD_VAR 0 2
54930: PPUSH
54931: CALL_OW 259
54935: ST_TO_ADDR
// if s1 = 1 then
54936: LD_VAR 0 2
54940: PUSH
54941: LD_INT 1
54943: EQUAL
54944: IFFALSE 54964
// s2 := rand ( 2 , 4 ) else
54946: LD_ADDR_VAR 0 3
54950: PUSH
54951: LD_INT 2
54953: PPUSH
54954: LD_INT 4
54956: PPUSH
54957: CALL_OW 12
54961: ST_TO_ADDR
54962: GO 54972
// s2 := 1 ;
54964: LD_ADDR_VAR 0 3
54968: PUSH
54969: LD_INT 1
54971: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
54972: LD_ADDR_VAR 0 5
54976: PUSH
54977: LD_VAR 0 6
54981: PUSH
54982: LD_INT 1
54984: ARRAY
54985: PPUSH
54986: LD_VAR 0 3
54990: PPUSH
54991: CALL_OW 259
54995: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
54996: LD_VAR 0 6
55000: PUSH
55001: LD_INT 1
55003: ARRAY
55004: PPUSH
55005: LD_VAR 0 2
55009: PPUSH
55010: LD_VAR 0 5
55014: PPUSH
55015: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
55019: LD_VAR 0 6
55023: PUSH
55024: LD_INT 1
55026: ARRAY
55027: PPUSH
55028: LD_VAR 0 3
55032: PPUSH
55033: LD_VAR 0 4
55037: PPUSH
55038: CALL_OW 237
// end ;
55042: PPOPN 6
55044: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
55045: LD_EXP 33
55049: PUSH
55050: LD_EXP 80
55054: AND
55055: IFFALSE 55134
55057: GO 55059
55059: DISABLE
55060: LD_INT 0
55062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
55063: LD_ADDR_VAR 0 1
55067: PUSH
55068: LD_INT 22
55070: PUSH
55071: LD_OWVAR 2
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 30
55082: PUSH
55083: LD_INT 3
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PPUSH
55094: CALL_OW 69
55098: ST_TO_ADDR
// if not tmp then
55099: LD_VAR 0 1
55103: NOT
55104: IFFALSE 55108
// exit ;
55106: GO 55134
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55108: LD_VAR 0 1
55112: PUSH
55113: LD_INT 1
55115: PPUSH
55116: LD_VAR 0 1
55120: PPUSH
55121: CALL_OW 12
55125: ARRAY
55126: PPUSH
55127: LD_INT 1
55129: PPUSH
55130: CALL_OW 234
// end ;
55134: PPOPN 1
55136: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
55137: LD_EXP 33
55141: PUSH
55142: LD_EXP 81
55146: AND
55147: IFFALSE 55259
55149: GO 55151
55151: DISABLE
55152: LD_INT 0
55154: PPUSH
55155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
55156: LD_ADDR_VAR 0 2
55160: PUSH
55161: LD_INT 22
55163: PUSH
55164: LD_OWVAR 2
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: LD_INT 30
55178: PUSH
55179: LD_INT 27
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 30
55188: PUSH
55189: LD_INT 26
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 30
55198: PUSH
55199: LD_INT 28
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PPUSH
55216: CALL_OW 69
55220: ST_TO_ADDR
// if not tmp then
55221: LD_VAR 0 2
55225: NOT
55226: IFFALSE 55230
// exit ;
55228: GO 55259
// for i in tmp do
55230: LD_ADDR_VAR 0 1
55234: PUSH
55235: LD_VAR 0 2
55239: PUSH
55240: FOR_IN
55241: IFFALSE 55257
// SetLives ( i , 1 ) ;
55243: LD_VAR 0 1
55247: PPUSH
55248: LD_INT 1
55250: PPUSH
55251: CALL_OW 234
55255: GO 55240
55257: POP
55258: POP
// end ;
55259: PPOPN 2
55261: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
55262: LD_EXP 33
55266: PUSH
55267: LD_EXP 82
55271: AND
55272: IFFALSE 55559
55274: GO 55276
55276: DISABLE
55277: LD_INT 0
55279: PPUSH
55280: PPUSH
55281: PPUSH
// begin i := rand ( 1 , 7 ) ;
55282: LD_ADDR_VAR 0 1
55286: PUSH
55287: LD_INT 1
55289: PPUSH
55290: LD_INT 7
55292: PPUSH
55293: CALL_OW 12
55297: ST_TO_ADDR
// case i of 1 :
55298: LD_VAR 0 1
55302: PUSH
55303: LD_INT 1
55305: DOUBLE
55306: EQUAL
55307: IFTRUE 55311
55309: GO 55321
55311: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
55312: LD_STRING earthquake(getX(game), 0, 32)
55314: PPUSH
55315: CALL_OW 559
55319: GO 55559
55321: LD_INT 2
55323: DOUBLE
55324: EQUAL
55325: IFTRUE 55329
55327: GO 55343
55329: POP
// begin ToLua ( displayStucuk(); ) ;
55330: LD_STRING displayStucuk();
55332: PPUSH
55333: CALL_OW 559
// ResetFog ;
55337: CALL_OW 335
// end ; 3 :
55341: GO 55559
55343: LD_INT 3
55345: DOUBLE
55346: EQUAL
55347: IFTRUE 55351
55349: GO 55455
55351: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55352: LD_ADDR_VAR 0 2
55356: PUSH
55357: LD_INT 22
55359: PUSH
55360: LD_OWVAR 2
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 25
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PPUSH
55383: CALL_OW 69
55387: ST_TO_ADDR
// if not tmp then
55388: LD_VAR 0 2
55392: NOT
55393: IFFALSE 55397
// exit ;
55395: GO 55559
// un := tmp [ rand ( 1 , tmp ) ] ;
55397: LD_ADDR_VAR 0 3
55401: PUSH
55402: LD_VAR 0 2
55406: PUSH
55407: LD_INT 1
55409: PPUSH
55410: LD_VAR 0 2
55414: PPUSH
55415: CALL_OW 12
55419: ARRAY
55420: ST_TO_ADDR
// if Crawls ( un ) then
55421: LD_VAR 0 3
55425: PPUSH
55426: CALL_OW 318
55430: IFFALSE 55441
// ComWalk ( un ) ;
55432: LD_VAR 0 3
55436: PPUSH
55437: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55441: LD_VAR 0 3
55445: PPUSH
55446: LD_INT 8
55448: PPUSH
55449: CALL_OW 336
// end ; 4 :
55453: GO 55559
55455: LD_INT 4
55457: DOUBLE
55458: EQUAL
55459: IFTRUE 55463
55461: GO 55537
55463: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
55464: LD_ADDR_VAR 0 2
55468: PUSH
55469: LD_INT 22
55471: PUSH
55472: LD_OWVAR 2
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 30
55483: PUSH
55484: LD_INT 29
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PPUSH
55495: CALL_OW 69
55499: ST_TO_ADDR
// if not tmp then
55500: LD_VAR 0 2
55504: NOT
55505: IFFALSE 55509
// exit ;
55507: GO 55559
// CenterNowOnUnits ( tmp [ 1 ] ) ;
55509: LD_VAR 0 2
55513: PUSH
55514: LD_INT 1
55516: ARRAY
55517: PPUSH
55518: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
55522: LD_VAR 0 2
55526: PUSH
55527: LD_INT 1
55529: ARRAY
55530: PPUSH
55531: CALL_OW 65
// end ; 5 .. 7 :
55535: GO 55559
55537: LD_INT 5
55539: DOUBLE
55540: GREATEREQUAL
55541: IFFALSE 55549
55543: LD_INT 7
55545: DOUBLE
55546: LESSEQUAL
55547: IFTRUE 55551
55549: GO 55558
55551: POP
// StreamSibBomb ; end ;
55552: CALL 51796 0 0
55556: GO 55559
55558: POP
// end ;
55559: PPOPN 3
55561: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
55562: LD_EXP 33
55566: PUSH
55567: LD_EXP 83
55571: AND
55572: IFFALSE 55728
55574: GO 55576
55576: DISABLE
55577: LD_INT 0
55579: PPUSH
55580: PPUSH
55581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
55582: LD_ADDR_VAR 0 2
55586: PUSH
55587: LD_INT 81
55589: PUSH
55590: LD_OWVAR 2
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 2
55601: PUSH
55602: LD_INT 21
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 21
55614: PUSH
55615: LD_INT 2
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: LIST
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PPUSH
55631: CALL_OW 69
55635: ST_TO_ADDR
// if not tmp then
55636: LD_VAR 0 2
55640: NOT
55641: IFFALSE 55645
// exit ;
55643: GO 55728
// p := 0 ;
55645: LD_ADDR_VAR 0 3
55649: PUSH
55650: LD_INT 0
55652: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
55653: LD_INT 35
55655: PPUSH
55656: CALL_OW 67
// p := p + 1 ;
55660: LD_ADDR_VAR 0 3
55664: PUSH
55665: LD_VAR 0 3
55669: PUSH
55670: LD_INT 1
55672: PLUS
55673: ST_TO_ADDR
// for i in tmp do
55674: LD_ADDR_VAR 0 1
55678: PUSH
55679: LD_VAR 0 2
55683: PUSH
55684: FOR_IN
55685: IFFALSE 55716
// if GetLives ( i ) < 1000 then
55687: LD_VAR 0 1
55691: PPUSH
55692: CALL_OW 256
55696: PUSH
55697: LD_INT 1000
55699: LESS
55700: IFFALSE 55714
// SetLives ( i , 1000 ) ;
55702: LD_VAR 0 1
55706: PPUSH
55707: LD_INT 1000
55709: PPUSH
55710: CALL_OW 234
55714: GO 55684
55716: POP
55717: POP
// until p > 20 ;
55718: LD_VAR 0 3
55722: PUSH
55723: LD_INT 20
55725: GREATER
55726: IFFALSE 55653
// end ;
55728: PPOPN 3
55730: END
// every 0 0$1 trigger StreamModeActive and sTime do
55731: LD_EXP 33
55735: PUSH
55736: LD_EXP 84
55740: AND
55741: IFFALSE 55776
55743: GO 55745
55745: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
55746: LD_INT 28
55748: PPUSH
55749: LD_OWVAR 2
55753: PPUSH
55754: LD_INT 2
55756: PPUSH
55757: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
55761: LD_INT 30
55763: PPUSH
55764: LD_OWVAR 2
55768: PPUSH
55769: LD_INT 2
55771: PPUSH
55772: CALL_OW 322
// end ;
55776: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
55777: LD_EXP 33
55781: PUSH
55782: LD_EXP 85
55786: AND
55787: IFFALSE 55908
55789: GO 55791
55791: DISABLE
55792: LD_INT 0
55794: PPUSH
55795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55796: LD_ADDR_VAR 0 2
55800: PUSH
55801: LD_INT 22
55803: PUSH
55804: LD_OWVAR 2
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 21
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 3
55825: PUSH
55826: LD_INT 23
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: LIST
55844: PPUSH
55845: CALL_OW 69
55849: ST_TO_ADDR
// if not tmp then
55850: LD_VAR 0 2
55854: NOT
55855: IFFALSE 55859
// exit ;
55857: GO 55908
// for i in tmp do
55859: LD_ADDR_VAR 0 1
55863: PUSH
55864: LD_VAR 0 2
55868: PUSH
55869: FOR_IN
55870: IFFALSE 55906
// begin if Crawls ( i ) then
55872: LD_VAR 0 1
55876: PPUSH
55877: CALL_OW 318
55881: IFFALSE 55892
// ComWalk ( i ) ;
55883: LD_VAR 0 1
55887: PPUSH
55888: CALL_OW 138
// SetClass ( i , 2 ) ;
55892: LD_VAR 0 1
55896: PPUSH
55897: LD_INT 2
55899: PPUSH
55900: CALL_OW 336
// end ;
55904: GO 55869
55906: POP
55907: POP
// end ;
55908: PPOPN 2
55910: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
55911: LD_EXP 33
55915: PUSH
55916: LD_EXP 86
55920: AND
55921: IFFALSE 56209
55923: GO 55925
55925: DISABLE
55926: LD_INT 0
55928: PPUSH
55929: PPUSH
55930: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
55931: LD_OWVAR 2
55935: PPUSH
55936: LD_INT 9
55938: PPUSH
55939: LD_INT 1
55941: PPUSH
55942: LD_INT 1
55944: PPUSH
55945: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
55949: LD_INT 9
55951: PPUSH
55952: LD_OWVAR 2
55956: PPUSH
55957: CALL_OW 343
// uc_side := 9 ;
55961: LD_ADDR_OWVAR 20
55965: PUSH
55966: LD_INT 9
55968: ST_TO_ADDR
// uc_nation := 2 ;
55969: LD_ADDR_OWVAR 21
55973: PUSH
55974: LD_INT 2
55976: ST_TO_ADDR
// hc_name := Dark Warrior ;
55977: LD_ADDR_OWVAR 26
55981: PUSH
55982: LD_STRING Dark Warrior
55984: ST_TO_ADDR
// hc_gallery :=  ;
55985: LD_ADDR_OWVAR 33
55989: PUSH
55990: LD_STRING 
55992: ST_TO_ADDR
// hc_noskilllimit := true ;
55993: LD_ADDR_OWVAR 76
55997: PUSH
55998: LD_INT 1
56000: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
56001: LD_ADDR_OWVAR 31
56005: PUSH
56006: LD_INT 30
56008: PUSH
56009: LD_INT 30
56011: PUSH
56012: LD_INT 30
56014: PUSH
56015: LD_INT 30
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: ST_TO_ADDR
// un := CreateHuman ;
56024: LD_ADDR_VAR 0 3
56028: PUSH
56029: CALL_OW 44
56033: ST_TO_ADDR
// hc_noskilllimit := false ;
56034: LD_ADDR_OWVAR 76
56038: PUSH
56039: LD_INT 0
56041: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56042: LD_VAR 0 3
56046: PPUSH
56047: LD_INT 1
56049: PPUSH
56050: CALL_OW 51
// ToLua ( playRanger() ) ;
56054: LD_STRING playRanger()
56056: PPUSH
56057: CALL_OW 559
// p := 0 ;
56061: LD_ADDR_VAR 0 2
56065: PUSH
56066: LD_INT 0
56068: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56069: LD_INT 35
56071: PPUSH
56072: CALL_OW 67
// p := p + 1 ;
56076: LD_ADDR_VAR 0 2
56080: PUSH
56081: LD_VAR 0 2
56085: PUSH
56086: LD_INT 1
56088: PLUS
56089: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
56090: LD_VAR 0 3
56094: PPUSH
56095: CALL_OW 256
56099: PUSH
56100: LD_INT 1000
56102: LESS
56103: IFFALSE 56117
// SetLives ( un , 1000 ) ;
56105: LD_VAR 0 3
56109: PPUSH
56110: LD_INT 1000
56112: PPUSH
56113: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
56117: LD_VAR 0 3
56121: PPUSH
56122: LD_INT 81
56124: PUSH
56125: LD_OWVAR 2
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 91
56136: PUSH
56137: LD_VAR 0 3
56141: PUSH
56142: LD_INT 30
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: LIST
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PPUSH
56154: CALL_OW 69
56158: PPUSH
56159: LD_VAR 0 3
56163: PPUSH
56164: CALL_OW 74
56168: PPUSH
56169: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
56173: LD_VAR 0 2
56177: PUSH
56178: LD_INT 80
56180: GREATER
56181: PUSH
56182: LD_VAR 0 3
56186: PPUSH
56187: CALL_OW 301
56191: OR
56192: IFFALSE 56069
// if un then
56194: LD_VAR 0 3
56198: IFFALSE 56209
// RemoveUnit ( un ) ;
56200: LD_VAR 0 3
56204: PPUSH
56205: CALL_OW 64
// end ;
56209: PPOPN 3
56211: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
56212: LD_EXP 87
56216: IFFALSE 56332
56218: GO 56220
56220: DISABLE
56221: LD_INT 0
56223: PPUSH
56224: PPUSH
56225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56226: LD_ADDR_VAR 0 2
56230: PUSH
56231: LD_INT 81
56233: PUSH
56234: LD_OWVAR 2
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 21
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PPUSH
56257: CALL_OW 69
56261: ST_TO_ADDR
// ToLua ( playComputer() ) ;
56262: LD_STRING playComputer()
56264: PPUSH
56265: CALL_OW 559
// if not tmp then
56269: LD_VAR 0 2
56273: NOT
56274: IFFALSE 56278
// exit ;
56276: GO 56332
// for i in tmp do
56278: LD_ADDR_VAR 0 1
56282: PUSH
56283: LD_VAR 0 2
56287: PUSH
56288: FOR_IN
56289: IFFALSE 56330
// for j := 1 to 4 do
56291: LD_ADDR_VAR 0 3
56295: PUSH
56296: DOUBLE
56297: LD_INT 1
56299: DEC
56300: ST_TO_ADDR
56301: LD_INT 4
56303: PUSH
56304: FOR_TO
56305: IFFALSE 56326
// SetSkill ( i , j , 10 ) ;
56307: LD_VAR 0 1
56311: PPUSH
56312: LD_VAR 0 3
56316: PPUSH
56317: LD_INT 10
56319: PPUSH
56320: CALL_OW 237
56324: GO 56304
56326: POP
56327: POP
56328: GO 56288
56330: POP
56331: POP
// end ;
56332: PPOPN 3
56334: END
// every 0 0$1 trigger s30 do var i , tmp ;
56335: LD_EXP 88
56339: IFFALSE 56408
56341: GO 56343
56343: DISABLE
56344: LD_INT 0
56346: PPUSH
56347: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56348: LD_ADDR_VAR 0 2
56352: PUSH
56353: LD_INT 22
56355: PUSH
56356: LD_OWVAR 2
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PPUSH
56365: CALL_OW 69
56369: ST_TO_ADDR
// if not tmp then
56370: LD_VAR 0 2
56374: NOT
56375: IFFALSE 56379
// exit ;
56377: GO 56408
// for i in tmp do
56379: LD_ADDR_VAR 0 1
56383: PUSH
56384: LD_VAR 0 2
56388: PUSH
56389: FOR_IN
56390: IFFALSE 56406
// SetLives ( i , 300 ) ;
56392: LD_VAR 0 1
56396: PPUSH
56397: LD_INT 300
56399: PPUSH
56400: CALL_OW 234
56404: GO 56389
56406: POP
56407: POP
// end ;
56408: PPOPN 2
56410: END
// every 0 0$1 trigger s60 do var i , tmp ;
56411: LD_EXP 89
56415: IFFALSE 56484
56417: GO 56419
56419: DISABLE
56420: LD_INT 0
56422: PPUSH
56423: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56424: LD_ADDR_VAR 0 2
56428: PUSH
56429: LD_INT 22
56431: PUSH
56432: LD_OWVAR 2
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PPUSH
56441: CALL_OW 69
56445: ST_TO_ADDR
// if not tmp then
56446: LD_VAR 0 2
56450: NOT
56451: IFFALSE 56455
// exit ;
56453: GO 56484
// for i in tmp do
56455: LD_ADDR_VAR 0 1
56459: PUSH
56460: LD_VAR 0 2
56464: PUSH
56465: FOR_IN
56466: IFFALSE 56482
// SetLives ( i , 600 ) ;
56468: LD_VAR 0 1
56472: PPUSH
56473: LD_INT 600
56475: PPUSH
56476: CALL_OW 234
56480: GO 56465
56482: POP
56483: POP
// end ;
56484: PPOPN 2
56486: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
56487: LD_INT 0
56489: PPUSH
// case cmd of 301 :
56490: LD_VAR 0 1
56494: PUSH
56495: LD_INT 301
56497: DOUBLE
56498: EQUAL
56499: IFTRUE 56503
56501: GO 56535
56503: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
56504: LD_VAR 0 6
56508: PPUSH
56509: LD_VAR 0 7
56513: PPUSH
56514: LD_VAR 0 8
56518: PPUSH
56519: LD_VAR 0 4
56523: PPUSH
56524: LD_VAR 0 5
56528: PPUSH
56529: CALL 57736 0 5
56533: GO 56656
56535: LD_INT 302
56537: DOUBLE
56538: EQUAL
56539: IFTRUE 56543
56541: GO 56580
56543: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
56544: LD_VAR 0 6
56548: PPUSH
56549: LD_VAR 0 7
56553: PPUSH
56554: LD_VAR 0 8
56558: PPUSH
56559: LD_VAR 0 9
56563: PPUSH
56564: LD_VAR 0 4
56568: PPUSH
56569: LD_VAR 0 5
56573: PPUSH
56574: CALL 57827 0 6
56578: GO 56656
56580: LD_INT 303
56582: DOUBLE
56583: EQUAL
56584: IFTRUE 56588
56586: GO 56625
56588: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
56589: LD_VAR 0 6
56593: PPUSH
56594: LD_VAR 0 7
56598: PPUSH
56599: LD_VAR 0 8
56603: PPUSH
56604: LD_VAR 0 9
56608: PPUSH
56609: LD_VAR 0 4
56613: PPUSH
56614: LD_VAR 0 5
56618: PPUSH
56619: CALL 56661 0 6
56623: GO 56656
56625: LD_INT 304
56627: DOUBLE
56628: EQUAL
56629: IFTRUE 56633
56631: GO 56655
56633: POP
// hHackTeleport ( unit , x , y ) ; end ;
56634: LD_VAR 0 2
56638: PPUSH
56639: LD_VAR 0 4
56643: PPUSH
56644: LD_VAR 0 5
56648: PPUSH
56649: CALL 58420 0 3
56653: GO 56656
56655: POP
// end ;
56656: LD_VAR 0 12
56660: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
56661: LD_INT 0
56663: PPUSH
56664: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
56665: LD_VAR 0 1
56669: PUSH
56670: LD_INT 1
56672: LESS
56673: PUSH
56674: LD_VAR 0 1
56678: PUSH
56679: LD_INT 3
56681: GREATER
56682: OR
56683: PUSH
56684: LD_VAR 0 5
56688: PPUSH
56689: LD_VAR 0 6
56693: PPUSH
56694: CALL_OW 428
56698: OR
56699: IFFALSE 56703
// exit ;
56701: GO 57423
// uc_side := your_side ;
56703: LD_ADDR_OWVAR 20
56707: PUSH
56708: LD_OWVAR 2
56712: ST_TO_ADDR
// uc_nation := nation ;
56713: LD_ADDR_OWVAR 21
56717: PUSH
56718: LD_VAR 0 1
56722: ST_TO_ADDR
// bc_level = 1 ;
56723: LD_ADDR_OWVAR 43
56727: PUSH
56728: LD_INT 1
56730: ST_TO_ADDR
// case btype of 1 :
56731: LD_VAR 0 2
56735: PUSH
56736: LD_INT 1
56738: DOUBLE
56739: EQUAL
56740: IFTRUE 56744
56742: GO 56755
56744: POP
// bc_type := b_depot ; 2 :
56745: LD_ADDR_OWVAR 42
56749: PUSH
56750: LD_INT 0
56752: ST_TO_ADDR
56753: GO 57367
56755: LD_INT 2
56757: DOUBLE
56758: EQUAL
56759: IFTRUE 56763
56761: GO 56774
56763: POP
// bc_type := b_warehouse ; 3 :
56764: LD_ADDR_OWVAR 42
56768: PUSH
56769: LD_INT 1
56771: ST_TO_ADDR
56772: GO 57367
56774: LD_INT 3
56776: DOUBLE
56777: EQUAL
56778: IFTRUE 56782
56780: GO 56793
56782: POP
// bc_type := b_lab ; 4 .. 9 :
56783: LD_ADDR_OWVAR 42
56787: PUSH
56788: LD_INT 6
56790: ST_TO_ADDR
56791: GO 57367
56793: LD_INT 4
56795: DOUBLE
56796: GREATEREQUAL
56797: IFFALSE 56805
56799: LD_INT 9
56801: DOUBLE
56802: LESSEQUAL
56803: IFTRUE 56807
56805: GO 56859
56807: POP
// begin bc_type := b_lab_half ;
56808: LD_ADDR_OWVAR 42
56812: PUSH
56813: LD_INT 7
56815: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
56816: LD_ADDR_OWVAR 44
56820: PUSH
56821: LD_INT 10
56823: PUSH
56824: LD_INT 11
56826: PUSH
56827: LD_INT 12
56829: PUSH
56830: LD_INT 15
56832: PUSH
56833: LD_INT 14
56835: PUSH
56836: LD_INT 13
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: PUSH
56847: LD_VAR 0 2
56851: PUSH
56852: LD_INT 3
56854: MINUS
56855: ARRAY
56856: ST_TO_ADDR
// end ; 10 .. 13 :
56857: GO 57367
56859: LD_INT 10
56861: DOUBLE
56862: GREATEREQUAL
56863: IFFALSE 56871
56865: LD_INT 13
56867: DOUBLE
56868: LESSEQUAL
56869: IFTRUE 56873
56871: GO 56950
56873: POP
// begin bc_type := b_lab_full ;
56874: LD_ADDR_OWVAR 42
56878: PUSH
56879: LD_INT 8
56881: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
56882: LD_ADDR_OWVAR 44
56886: PUSH
56887: LD_INT 10
56889: PUSH
56890: LD_INT 12
56892: PUSH
56893: LD_INT 14
56895: PUSH
56896: LD_INT 13
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: PUSH
56905: LD_VAR 0 2
56909: PUSH
56910: LD_INT 9
56912: MINUS
56913: ARRAY
56914: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
56915: LD_ADDR_OWVAR 45
56919: PUSH
56920: LD_INT 11
56922: PUSH
56923: LD_INT 15
56925: PUSH
56926: LD_INT 12
56928: PUSH
56929: LD_INT 15
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: PUSH
56938: LD_VAR 0 2
56942: PUSH
56943: LD_INT 9
56945: MINUS
56946: ARRAY
56947: ST_TO_ADDR
// end ; 14 :
56948: GO 57367
56950: LD_INT 14
56952: DOUBLE
56953: EQUAL
56954: IFTRUE 56958
56956: GO 56969
56958: POP
// bc_type := b_workshop ; 15 :
56959: LD_ADDR_OWVAR 42
56963: PUSH
56964: LD_INT 2
56966: ST_TO_ADDR
56967: GO 57367
56969: LD_INT 15
56971: DOUBLE
56972: EQUAL
56973: IFTRUE 56977
56975: GO 56988
56977: POP
// bc_type := b_factory ; 16 :
56978: LD_ADDR_OWVAR 42
56982: PUSH
56983: LD_INT 3
56985: ST_TO_ADDR
56986: GO 57367
56988: LD_INT 16
56990: DOUBLE
56991: EQUAL
56992: IFTRUE 56996
56994: GO 57007
56996: POP
// bc_type := b_ext_gun ; 17 :
56997: LD_ADDR_OWVAR 42
57001: PUSH
57002: LD_INT 17
57004: ST_TO_ADDR
57005: GO 57367
57007: LD_INT 17
57009: DOUBLE
57010: EQUAL
57011: IFTRUE 57015
57013: GO 57043
57015: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
57016: LD_ADDR_OWVAR 42
57020: PUSH
57021: LD_INT 19
57023: PUSH
57024: LD_INT 23
57026: PUSH
57027: LD_INT 19
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: LIST
57034: PUSH
57035: LD_VAR 0 1
57039: ARRAY
57040: ST_TO_ADDR
57041: GO 57367
57043: LD_INT 18
57045: DOUBLE
57046: EQUAL
57047: IFTRUE 57051
57049: GO 57062
57051: POP
// bc_type := b_ext_radar ; 19 :
57052: LD_ADDR_OWVAR 42
57056: PUSH
57057: LD_INT 20
57059: ST_TO_ADDR
57060: GO 57367
57062: LD_INT 19
57064: DOUBLE
57065: EQUAL
57066: IFTRUE 57070
57068: GO 57081
57070: POP
// bc_type := b_ext_radio ; 20 :
57071: LD_ADDR_OWVAR 42
57075: PUSH
57076: LD_INT 22
57078: ST_TO_ADDR
57079: GO 57367
57081: LD_INT 20
57083: DOUBLE
57084: EQUAL
57085: IFTRUE 57089
57087: GO 57100
57089: POP
// bc_type := b_ext_siberium ; 21 :
57090: LD_ADDR_OWVAR 42
57094: PUSH
57095: LD_INT 21
57097: ST_TO_ADDR
57098: GO 57367
57100: LD_INT 21
57102: DOUBLE
57103: EQUAL
57104: IFTRUE 57108
57106: GO 57119
57108: POP
// bc_type := b_ext_computer ; 22 :
57109: LD_ADDR_OWVAR 42
57113: PUSH
57114: LD_INT 24
57116: ST_TO_ADDR
57117: GO 57367
57119: LD_INT 22
57121: DOUBLE
57122: EQUAL
57123: IFTRUE 57127
57125: GO 57138
57127: POP
// bc_type := b_ext_track ; 23 :
57128: LD_ADDR_OWVAR 42
57132: PUSH
57133: LD_INT 16
57135: ST_TO_ADDR
57136: GO 57367
57138: LD_INT 23
57140: DOUBLE
57141: EQUAL
57142: IFTRUE 57146
57144: GO 57157
57146: POP
// bc_type := b_ext_laser ; 24 :
57147: LD_ADDR_OWVAR 42
57151: PUSH
57152: LD_INT 25
57154: ST_TO_ADDR
57155: GO 57367
57157: LD_INT 24
57159: DOUBLE
57160: EQUAL
57161: IFTRUE 57165
57163: GO 57176
57165: POP
// bc_type := b_control_tower ; 25 :
57166: LD_ADDR_OWVAR 42
57170: PUSH
57171: LD_INT 36
57173: ST_TO_ADDR
57174: GO 57367
57176: LD_INT 25
57178: DOUBLE
57179: EQUAL
57180: IFTRUE 57184
57182: GO 57195
57184: POP
// bc_type := b_breastwork ; 26 :
57185: LD_ADDR_OWVAR 42
57189: PUSH
57190: LD_INT 31
57192: ST_TO_ADDR
57193: GO 57367
57195: LD_INT 26
57197: DOUBLE
57198: EQUAL
57199: IFTRUE 57203
57201: GO 57214
57203: POP
// bc_type := b_bunker ; 27 :
57204: LD_ADDR_OWVAR 42
57208: PUSH
57209: LD_INT 32
57211: ST_TO_ADDR
57212: GO 57367
57214: LD_INT 27
57216: DOUBLE
57217: EQUAL
57218: IFTRUE 57222
57220: GO 57233
57222: POP
// bc_type := b_turret ; 28 :
57223: LD_ADDR_OWVAR 42
57227: PUSH
57228: LD_INT 33
57230: ST_TO_ADDR
57231: GO 57367
57233: LD_INT 28
57235: DOUBLE
57236: EQUAL
57237: IFTRUE 57241
57239: GO 57252
57241: POP
// bc_type := b_armoury ; 29 :
57242: LD_ADDR_OWVAR 42
57246: PUSH
57247: LD_INT 4
57249: ST_TO_ADDR
57250: GO 57367
57252: LD_INT 29
57254: DOUBLE
57255: EQUAL
57256: IFTRUE 57260
57258: GO 57271
57260: POP
// bc_type := b_barracks ; 30 :
57261: LD_ADDR_OWVAR 42
57265: PUSH
57266: LD_INT 5
57268: ST_TO_ADDR
57269: GO 57367
57271: LD_INT 30
57273: DOUBLE
57274: EQUAL
57275: IFTRUE 57279
57277: GO 57290
57279: POP
// bc_type := b_solar_power ; 31 :
57280: LD_ADDR_OWVAR 42
57284: PUSH
57285: LD_INT 27
57287: ST_TO_ADDR
57288: GO 57367
57290: LD_INT 31
57292: DOUBLE
57293: EQUAL
57294: IFTRUE 57298
57296: GO 57309
57298: POP
// bc_type := b_oil_power ; 32 :
57299: LD_ADDR_OWVAR 42
57303: PUSH
57304: LD_INT 26
57306: ST_TO_ADDR
57307: GO 57367
57309: LD_INT 32
57311: DOUBLE
57312: EQUAL
57313: IFTRUE 57317
57315: GO 57328
57317: POP
// bc_type := b_siberite_power ; 33 :
57318: LD_ADDR_OWVAR 42
57322: PUSH
57323: LD_INT 28
57325: ST_TO_ADDR
57326: GO 57367
57328: LD_INT 33
57330: DOUBLE
57331: EQUAL
57332: IFTRUE 57336
57334: GO 57347
57336: POP
// bc_type := b_oil_mine ; 34 :
57337: LD_ADDR_OWVAR 42
57341: PUSH
57342: LD_INT 29
57344: ST_TO_ADDR
57345: GO 57367
57347: LD_INT 34
57349: DOUBLE
57350: EQUAL
57351: IFTRUE 57355
57353: GO 57366
57355: POP
// bc_type := b_siberite_mine ; end ;
57356: LD_ADDR_OWVAR 42
57360: PUSH
57361: LD_INT 30
57363: ST_TO_ADDR
57364: GO 57367
57366: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
57367: LD_ADDR_VAR 0 8
57371: PUSH
57372: LD_VAR 0 5
57376: PPUSH
57377: LD_VAR 0 6
57381: PPUSH
57382: LD_VAR 0 3
57386: PPUSH
57387: CALL_OW 47
57391: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
57392: LD_OWVAR 42
57396: PUSH
57397: LD_INT 32
57399: PUSH
57400: LD_INT 33
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: IN
57407: IFFALSE 57423
// PlaceWeaponTurret ( b , weapon ) ;
57409: LD_VAR 0 8
57413: PPUSH
57414: LD_VAR 0 4
57418: PPUSH
57419: CALL_OW 431
// end ;
57423: LD_VAR 0 7
57427: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
57428: LD_INT 0
57430: PPUSH
57431: PPUSH
57432: PPUSH
57433: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57434: LD_ADDR_VAR 0 4
57438: PUSH
57439: LD_INT 22
57441: PUSH
57442: LD_OWVAR 2
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: LD_INT 30
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 30
57466: PUSH
57467: LD_INT 1
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: LIST
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PPUSH
57483: CALL_OW 69
57487: ST_TO_ADDR
// if not tmp then
57488: LD_VAR 0 4
57492: NOT
57493: IFFALSE 57497
// exit ;
57495: GO 57556
// for i in tmp do
57497: LD_ADDR_VAR 0 2
57501: PUSH
57502: LD_VAR 0 4
57506: PUSH
57507: FOR_IN
57508: IFFALSE 57554
// for j = 1 to 3 do
57510: LD_ADDR_VAR 0 3
57514: PUSH
57515: DOUBLE
57516: LD_INT 1
57518: DEC
57519: ST_TO_ADDR
57520: LD_INT 3
57522: PUSH
57523: FOR_TO
57524: IFFALSE 57550
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
57526: LD_VAR 0 2
57530: PPUSH
57531: CALL_OW 274
57535: PPUSH
57536: LD_VAR 0 3
57540: PPUSH
57541: LD_INT 99999
57543: PPUSH
57544: CALL_OW 277
57548: GO 57523
57550: POP
57551: POP
57552: GO 57507
57554: POP
57555: POP
// end ;
57556: LD_VAR 0 1
57560: RET
// export function hHackSetLevel10 ; var i , j ; begin
57561: LD_INT 0
57563: PPUSH
57564: PPUSH
57565: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
57566: LD_ADDR_VAR 0 2
57570: PUSH
57571: LD_INT 21
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PPUSH
57581: CALL_OW 69
57585: PUSH
57586: FOR_IN
57587: IFFALSE 57639
// if IsSelected ( i ) then
57589: LD_VAR 0 2
57593: PPUSH
57594: CALL_OW 306
57598: IFFALSE 57637
// begin for j := 1 to 4 do
57600: LD_ADDR_VAR 0 3
57604: PUSH
57605: DOUBLE
57606: LD_INT 1
57608: DEC
57609: ST_TO_ADDR
57610: LD_INT 4
57612: PUSH
57613: FOR_TO
57614: IFFALSE 57635
// SetSkill ( i , j , 10 ) ;
57616: LD_VAR 0 2
57620: PPUSH
57621: LD_VAR 0 3
57625: PPUSH
57626: LD_INT 10
57628: PPUSH
57629: CALL_OW 237
57633: GO 57613
57635: POP
57636: POP
// end ;
57637: GO 57586
57639: POP
57640: POP
// end ;
57641: LD_VAR 0 1
57645: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
57646: LD_INT 0
57648: PPUSH
57649: PPUSH
57650: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
57651: LD_ADDR_VAR 0 2
57655: PUSH
57656: LD_INT 22
57658: PUSH
57659: LD_OWVAR 2
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 21
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PPUSH
57682: CALL_OW 69
57686: PUSH
57687: FOR_IN
57688: IFFALSE 57729
// begin for j := 1 to 4 do
57690: LD_ADDR_VAR 0 3
57694: PUSH
57695: DOUBLE
57696: LD_INT 1
57698: DEC
57699: ST_TO_ADDR
57700: LD_INT 4
57702: PUSH
57703: FOR_TO
57704: IFFALSE 57725
// SetSkill ( i , j , 10 ) ;
57706: LD_VAR 0 2
57710: PPUSH
57711: LD_VAR 0 3
57715: PPUSH
57716: LD_INT 10
57718: PPUSH
57719: CALL_OW 237
57723: GO 57703
57725: POP
57726: POP
// end ;
57727: GO 57687
57729: POP
57730: POP
// end ;
57731: LD_VAR 0 1
57735: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
57736: LD_INT 0
57738: PPUSH
// uc_side := your_side ;
57739: LD_ADDR_OWVAR 20
57743: PUSH
57744: LD_OWVAR 2
57748: ST_TO_ADDR
// uc_nation := nation ;
57749: LD_ADDR_OWVAR 21
57753: PUSH
57754: LD_VAR 0 1
57758: ST_TO_ADDR
// InitHc ;
57759: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
57763: LD_INT 0
57765: PPUSH
57766: LD_VAR 0 2
57770: PPUSH
57771: LD_VAR 0 3
57775: PPUSH
57776: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
57780: LD_VAR 0 4
57784: PPUSH
57785: LD_VAR 0 5
57789: PPUSH
57790: CALL_OW 428
57794: PUSH
57795: LD_INT 0
57797: EQUAL
57798: IFFALSE 57822
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
57800: CALL_OW 44
57804: PPUSH
57805: LD_VAR 0 4
57809: PPUSH
57810: LD_VAR 0 5
57814: PPUSH
57815: LD_INT 1
57817: PPUSH
57818: CALL_OW 48
// end ;
57822: LD_VAR 0 6
57826: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
57827: LD_INT 0
57829: PPUSH
57830: PPUSH
// uc_side := your_side ;
57831: LD_ADDR_OWVAR 20
57835: PUSH
57836: LD_OWVAR 2
57840: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
57841: LD_VAR 0 1
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: LD_INT 2
57851: PUSH
57852: LD_INT 3
57854: PUSH
57855: LD_INT 4
57857: PUSH
57858: LD_INT 5
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: IN
57868: IFFALSE 57880
// uc_nation := nation_american else
57870: LD_ADDR_OWVAR 21
57874: PUSH
57875: LD_INT 1
57877: ST_TO_ADDR
57878: GO 57923
// if chassis in [ 11 , 12 , 13 , 14 ] then
57880: LD_VAR 0 1
57884: PUSH
57885: LD_INT 11
57887: PUSH
57888: LD_INT 12
57890: PUSH
57891: LD_INT 13
57893: PUSH
57894: LD_INT 14
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: IN
57903: IFFALSE 57915
// uc_nation := nation_arabian else
57905: LD_ADDR_OWVAR 21
57909: PUSH
57910: LD_INT 2
57912: ST_TO_ADDR
57913: GO 57923
// uc_nation := nation_russian ;
57915: LD_ADDR_OWVAR 21
57919: PUSH
57920: LD_INT 3
57922: ST_TO_ADDR
// vc_chassis := chassis ;
57923: LD_ADDR_OWVAR 37
57927: PUSH
57928: LD_VAR 0 1
57932: ST_TO_ADDR
// vc_engine := engine ;
57933: LD_ADDR_OWVAR 39
57937: PUSH
57938: LD_VAR 0 2
57942: ST_TO_ADDR
// vc_control := control ;
57943: LD_ADDR_OWVAR 38
57947: PUSH
57948: LD_VAR 0 3
57952: ST_TO_ADDR
// vc_weapon := weapon ;
57953: LD_ADDR_OWVAR 40
57957: PUSH
57958: LD_VAR 0 4
57962: ST_TO_ADDR
// un := CreateVehicle ;
57963: LD_ADDR_VAR 0 8
57967: PUSH
57968: CALL_OW 45
57972: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
57973: LD_VAR 0 8
57977: PPUSH
57978: LD_INT 0
57980: PPUSH
57981: LD_INT 5
57983: PPUSH
57984: CALL_OW 12
57988: PPUSH
57989: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
57993: LD_VAR 0 8
57997: PPUSH
57998: LD_VAR 0 5
58002: PPUSH
58003: LD_VAR 0 6
58007: PPUSH
58008: LD_INT 1
58010: PPUSH
58011: CALL_OW 48
// end ;
58015: LD_VAR 0 7
58019: RET
// export hInvincible ; every 1 do
58020: GO 58022
58022: DISABLE
// hInvincible := [ ] ;
58023: LD_ADDR_EXP 90
58027: PUSH
58028: EMPTY
58029: ST_TO_ADDR
58030: END
// every 10 do var i ;
58031: GO 58033
58033: DISABLE
58034: LD_INT 0
58036: PPUSH
// begin enable ;
58037: ENABLE
// if not hInvincible then
58038: LD_EXP 90
58042: NOT
58043: IFFALSE 58047
// exit ;
58045: GO 58091
// for i in hInvincible do
58047: LD_ADDR_VAR 0 1
58051: PUSH
58052: LD_EXP 90
58056: PUSH
58057: FOR_IN
58058: IFFALSE 58089
// if GetLives ( i ) < 1000 then
58060: LD_VAR 0 1
58064: PPUSH
58065: CALL_OW 256
58069: PUSH
58070: LD_INT 1000
58072: LESS
58073: IFFALSE 58087
// SetLives ( i , 1000 ) ;
58075: LD_VAR 0 1
58079: PPUSH
58080: LD_INT 1000
58082: PPUSH
58083: CALL_OW 234
58087: GO 58057
58089: POP
58090: POP
// end ;
58091: PPOPN 1
58093: END
// export function hHackInvincible ; var i ; begin
58094: LD_INT 0
58096: PPUSH
58097: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
58098: LD_ADDR_VAR 0 2
58102: PUSH
58103: LD_INT 2
58105: PUSH
58106: LD_INT 21
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 21
58118: PUSH
58119: LD_INT 2
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: LIST
58130: PPUSH
58131: CALL_OW 69
58135: PUSH
58136: FOR_IN
58137: IFFALSE 58198
// if IsSelected ( i ) then
58139: LD_VAR 0 2
58143: PPUSH
58144: CALL_OW 306
58148: IFFALSE 58196
// begin if i in hInvincible then
58150: LD_VAR 0 2
58154: PUSH
58155: LD_EXP 90
58159: IN
58160: IFFALSE 58180
// hInvincible := hInvincible diff i else
58162: LD_ADDR_EXP 90
58166: PUSH
58167: LD_EXP 90
58171: PUSH
58172: LD_VAR 0 2
58176: DIFF
58177: ST_TO_ADDR
58178: GO 58196
// hInvincible := hInvincible union i ;
58180: LD_ADDR_EXP 90
58184: PUSH
58185: LD_EXP 90
58189: PUSH
58190: LD_VAR 0 2
58194: UNION
58195: ST_TO_ADDR
// end ;
58196: GO 58136
58198: POP
58199: POP
// end ;
58200: LD_VAR 0 1
58204: RET
// export function hHackInvisible ; var i , j ; begin
58205: LD_INT 0
58207: PPUSH
58208: PPUSH
58209: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58210: LD_ADDR_VAR 0 2
58214: PUSH
58215: LD_INT 21
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PPUSH
58225: CALL_OW 69
58229: PUSH
58230: FOR_IN
58231: IFFALSE 58255
// if IsSelected ( i ) then
58233: LD_VAR 0 2
58237: PPUSH
58238: CALL_OW 306
58242: IFFALSE 58253
// ComForceInvisible ( i ) ;
58244: LD_VAR 0 2
58248: PPUSH
58249: CALL_OW 496
58253: GO 58230
58255: POP
58256: POP
// end ;
58257: LD_VAR 0 1
58261: RET
// export function hHackChangeYourSide ; begin
58262: LD_INT 0
58264: PPUSH
// if your_side = 8 then
58265: LD_OWVAR 2
58269: PUSH
58270: LD_INT 8
58272: EQUAL
58273: IFFALSE 58285
// your_side := 0 else
58275: LD_ADDR_OWVAR 2
58279: PUSH
58280: LD_INT 0
58282: ST_TO_ADDR
58283: GO 58299
// your_side := your_side + 1 ;
58285: LD_ADDR_OWVAR 2
58289: PUSH
58290: LD_OWVAR 2
58294: PUSH
58295: LD_INT 1
58297: PLUS
58298: ST_TO_ADDR
// end ;
58299: LD_VAR 0 1
58303: RET
// export function hHackChangeUnitSide ; var i , j ; begin
58304: LD_INT 0
58306: PPUSH
58307: PPUSH
58308: PPUSH
// for i in all_units do
58309: LD_ADDR_VAR 0 2
58313: PUSH
58314: LD_OWVAR 3
58318: PUSH
58319: FOR_IN
58320: IFFALSE 58398
// if IsSelected ( i ) then
58322: LD_VAR 0 2
58326: PPUSH
58327: CALL_OW 306
58331: IFFALSE 58396
// begin j := GetSide ( i ) ;
58333: LD_ADDR_VAR 0 3
58337: PUSH
58338: LD_VAR 0 2
58342: PPUSH
58343: CALL_OW 255
58347: ST_TO_ADDR
// if j = 8 then
58348: LD_VAR 0 3
58352: PUSH
58353: LD_INT 8
58355: EQUAL
58356: IFFALSE 58368
// j := 0 else
58358: LD_ADDR_VAR 0 3
58362: PUSH
58363: LD_INT 0
58365: ST_TO_ADDR
58366: GO 58382
// j := j + 1 ;
58368: LD_ADDR_VAR 0 3
58372: PUSH
58373: LD_VAR 0 3
58377: PUSH
58378: LD_INT 1
58380: PLUS
58381: ST_TO_ADDR
// SetSide ( i , j ) ;
58382: LD_VAR 0 2
58386: PPUSH
58387: LD_VAR 0 3
58391: PPUSH
58392: CALL_OW 235
// end ;
58396: GO 58319
58398: POP
58399: POP
// end ;
58400: LD_VAR 0 1
58404: RET
// export function hHackFog ; begin
58405: LD_INT 0
58407: PPUSH
// FogOff ( true ) ;
58408: LD_INT 1
58410: PPUSH
58411: CALL_OW 344
// end ;
58415: LD_VAR 0 1
58419: RET
// export function hHackTeleport ( unit , x , y ) ; begin
58420: LD_INT 0
58422: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
58423: LD_VAR 0 1
58427: PPUSH
58428: LD_VAR 0 2
58432: PPUSH
58433: LD_VAR 0 3
58437: PPUSH
58438: LD_INT 1
58440: PPUSH
58441: LD_INT 1
58443: PPUSH
58444: CALL_OW 483
// CenterOnXY ( x , y ) ;
58448: LD_VAR 0 2
58452: PPUSH
58453: LD_VAR 0 3
58457: PPUSH
58458: CALL_OW 84
// end ; end_of_file end_of_file
58462: LD_VAR 0 4
58466: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
58467: LD_INT 0
58469: PPUSH
58470: PPUSH
58471: PPUSH
58472: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
58473: LD_VAR 0 1
58477: PPUSH
58478: CALL_OW 264
58482: PUSH
58483: LD_EXP 7
58487: EQUAL
58488: IFFALSE 58560
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58490: LD_INT 68
58492: PPUSH
58493: LD_VAR 0 1
58497: PPUSH
58498: CALL_OW 255
58502: PPUSH
58503: CALL_OW 321
58507: PUSH
58508: LD_INT 2
58510: EQUAL
58511: IFFALSE 58523
// eff := 70 else
58513: LD_ADDR_VAR 0 4
58517: PUSH
58518: LD_INT 70
58520: ST_TO_ADDR
58521: GO 58531
// eff := 30 ;
58523: LD_ADDR_VAR 0 4
58527: PUSH
58528: LD_INT 30
58530: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58531: LD_VAR 0 1
58535: PPUSH
58536: CALL_OW 250
58540: PPUSH
58541: LD_VAR 0 1
58545: PPUSH
58546: CALL_OW 251
58550: PPUSH
58551: LD_VAR 0 4
58555: PPUSH
58556: CALL_OW 495
// end ; end ;
58560: LD_VAR 0 2
58564: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
58565: LD_INT 0
58567: PPUSH
// end ;
58568: LD_VAR 0 4
58572: RET
// export function SOS_Command ( cmd ) ; begin
58573: LD_INT 0
58575: PPUSH
// end ;
58576: LD_VAR 0 2
58580: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
58581: LD_INT 0
58583: PPUSH
// end ;
58584: LD_VAR 0 6
58588: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
58589: LD_INT 0
58591: PPUSH
58592: PPUSH
// if not vehicle or not factory then
58593: LD_VAR 0 1
58597: NOT
58598: PUSH
58599: LD_VAR 0 2
58603: NOT
58604: OR
58605: IFFALSE 58609
// exit ;
58607: GO 58840
// if factoryWaypoints >= factory then
58609: LD_EXP 91
58613: PUSH
58614: LD_VAR 0 2
58618: GREATEREQUAL
58619: IFFALSE 58840
// if factoryWaypoints [ factory ] then
58621: LD_EXP 91
58625: PUSH
58626: LD_VAR 0 2
58630: ARRAY
58631: IFFALSE 58840
// begin if GetControl ( vehicle ) = control_manual then
58633: LD_VAR 0 1
58637: PPUSH
58638: CALL_OW 263
58642: PUSH
58643: LD_INT 1
58645: EQUAL
58646: IFFALSE 58727
// begin driver := IsDrivenBy ( vehicle ) ;
58648: LD_ADDR_VAR 0 4
58652: PUSH
58653: LD_VAR 0 1
58657: PPUSH
58658: CALL_OW 311
58662: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
58663: LD_VAR 0 4
58667: PPUSH
58668: LD_EXP 91
58672: PUSH
58673: LD_VAR 0 2
58677: ARRAY
58678: PUSH
58679: LD_INT 3
58681: ARRAY
58682: PPUSH
58683: LD_EXP 91
58687: PUSH
58688: LD_VAR 0 2
58692: ARRAY
58693: PUSH
58694: LD_INT 4
58696: ARRAY
58697: PPUSH
58698: CALL_OW 171
// AddComExitVehicle ( driver ) ;
58702: LD_VAR 0 4
58706: PPUSH
58707: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
58711: LD_VAR 0 4
58715: PPUSH
58716: LD_VAR 0 2
58720: PPUSH
58721: CALL_OW 180
// end else
58725: GO 58840
// if GetControl ( vehicle ) = control_remote then
58727: LD_VAR 0 1
58731: PPUSH
58732: CALL_OW 263
58736: PUSH
58737: LD_INT 2
58739: EQUAL
58740: IFFALSE 58801
// begin wait ( 0 0$2 ) ;
58742: LD_INT 70
58744: PPUSH
58745: CALL_OW 67
// if Connect ( vehicle ) then
58749: LD_VAR 0 1
58753: PPUSH
58754: CALL 9265 0 1
58758: IFFALSE 58799
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
58760: LD_VAR 0 1
58764: PPUSH
58765: LD_EXP 91
58769: PUSH
58770: LD_VAR 0 2
58774: ARRAY
58775: PUSH
58776: LD_INT 3
58778: ARRAY
58779: PPUSH
58780: LD_EXP 91
58784: PUSH
58785: LD_VAR 0 2
58789: ARRAY
58790: PUSH
58791: LD_INT 4
58793: ARRAY
58794: PPUSH
58795: CALL_OW 171
// end else
58799: GO 58840
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
58801: LD_VAR 0 1
58805: PPUSH
58806: LD_EXP 91
58810: PUSH
58811: LD_VAR 0 2
58815: ARRAY
58816: PUSH
58817: LD_INT 3
58819: ARRAY
58820: PPUSH
58821: LD_EXP 91
58825: PUSH
58826: LD_VAR 0 2
58830: ARRAY
58831: PUSH
58832: LD_INT 4
58834: ARRAY
58835: PPUSH
58836: CALL_OW 171
// end ; end ;
58840: LD_VAR 0 3
58844: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
58845: LD_INT 0
58847: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
58848: LD_VAR 0 1
58852: PUSH
58853: LD_INT 250
58855: EQUAL
58856: PUSH
58857: LD_VAR 0 2
58861: PPUSH
58862: CALL_OW 264
58866: PUSH
58867: LD_EXP 10
58871: EQUAL
58872: AND
58873: IFFALSE 58894
// MinerPlaceMine ( unit , x , y ) ;
58875: LD_VAR 0 2
58879: PPUSH
58880: LD_VAR 0 4
58884: PPUSH
58885: LD_VAR 0 5
58889: PPUSH
58890: CALL 61622 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
58894: LD_VAR 0 1
58898: PUSH
58899: LD_INT 251
58901: EQUAL
58902: PUSH
58903: LD_VAR 0 2
58907: PPUSH
58908: CALL_OW 264
58912: PUSH
58913: LD_EXP 10
58917: EQUAL
58918: AND
58919: IFFALSE 58940
// MinerDetonateMine ( unit , x , y ) ;
58921: LD_VAR 0 2
58925: PPUSH
58926: LD_VAR 0 4
58930: PPUSH
58931: LD_VAR 0 5
58935: PPUSH
58936: CALL 61899 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
58940: LD_VAR 0 1
58944: PUSH
58945: LD_INT 252
58947: EQUAL
58948: PUSH
58949: LD_VAR 0 2
58953: PPUSH
58954: CALL_OW 264
58958: PUSH
58959: LD_EXP 10
58963: EQUAL
58964: AND
58965: IFFALSE 58986
// MinerCreateMinefield ( unit , x , y ) ;
58967: LD_VAR 0 2
58971: PPUSH
58972: LD_VAR 0 4
58976: PPUSH
58977: LD_VAR 0 5
58981: PPUSH
58982: CALL 62316 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
58986: LD_VAR 0 1
58990: PUSH
58991: LD_INT 253
58993: EQUAL
58994: PUSH
58995: LD_VAR 0 2
58999: PPUSH
59000: CALL_OW 257
59004: PUSH
59005: LD_INT 5
59007: EQUAL
59008: AND
59009: IFFALSE 59030
// ComBinocular ( unit , x , y ) ;
59011: LD_VAR 0 2
59015: PPUSH
59016: LD_VAR 0 4
59020: PPUSH
59021: LD_VAR 0 5
59025: PPUSH
59026: CALL 62687 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
59030: LD_VAR 0 1
59034: PUSH
59035: LD_INT 254
59037: EQUAL
59038: PUSH
59039: LD_VAR 0 2
59043: PPUSH
59044: CALL_OW 264
59048: PUSH
59049: LD_EXP 5
59053: EQUAL
59054: AND
59055: PUSH
59056: LD_VAR 0 3
59060: PPUSH
59061: CALL_OW 263
59065: PUSH
59066: LD_INT 3
59068: EQUAL
59069: AND
59070: IFFALSE 59086
// HackDestroyVehicle ( unit , selectedUnit ) ;
59072: LD_VAR 0 2
59076: PPUSH
59077: LD_VAR 0 3
59081: PPUSH
59082: CALL 60982 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
59086: LD_VAR 0 1
59090: PUSH
59091: LD_INT 255
59093: EQUAL
59094: PUSH
59095: LD_VAR 0 2
59099: PPUSH
59100: CALL_OW 264
59104: PUSH
59105: LD_INT 14
59107: PUSH
59108: LD_INT 53
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: IN
59115: AND
59116: PUSH
59117: LD_VAR 0 4
59121: PPUSH
59122: LD_VAR 0 5
59126: PPUSH
59127: CALL_OW 488
59131: AND
59132: IFFALSE 59156
// CutTreeXYR ( unit , x , y , 12 ) ;
59134: LD_VAR 0 2
59138: PPUSH
59139: LD_VAR 0 4
59143: PPUSH
59144: LD_VAR 0 5
59148: PPUSH
59149: LD_INT 12
59151: PPUSH
59152: CALL 59548 0 4
// if cmd = 256 then
59156: LD_VAR 0 1
59160: PUSH
59161: LD_INT 256
59163: EQUAL
59164: IFFALSE 59185
// SetFactoryWaypoint ( unit , x , y ) ;
59166: LD_VAR 0 2
59170: PPUSH
59171: LD_VAR 0 4
59175: PPUSH
59176: LD_VAR 0 5
59180: PPUSH
59181: CALL 59190 0 3
// end ;
59185: LD_VAR 0 6
59189: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59190: LD_INT 0
59192: PPUSH
59193: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59194: LD_VAR 0 1
59198: NOT
59199: PUSH
59200: LD_VAR 0 2
59204: PPUSH
59205: LD_VAR 0 3
59209: PPUSH
59210: CALL_OW 488
59214: NOT
59215: OR
59216: PUSH
59217: LD_VAR 0 1
59221: PPUSH
59222: CALL_OW 266
59226: PUSH
59227: LD_INT 3
59229: NONEQUAL
59230: PUSH
59231: LD_VAR 0 1
59235: PPUSH
59236: CALL_OW 247
59240: PUSH
59241: LD_INT 1
59243: EQUAL
59244: NOT
59245: AND
59246: OR
59247: IFFALSE 59251
// exit ;
59249: GO 59400
// if GetType ( factory ) = unit_human then
59251: LD_VAR 0 1
59255: PPUSH
59256: CALL_OW 247
59260: PUSH
59261: LD_INT 1
59263: EQUAL
59264: IFFALSE 59281
// factory := IsInUnit ( factory ) ;
59266: LD_ADDR_VAR 0 1
59270: PUSH
59271: LD_VAR 0 1
59275: PPUSH
59276: CALL_OW 310
59280: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59281: LD_VAR 0 1
59285: PPUSH
59286: CALL_OW 266
59290: PUSH
59291: LD_INT 3
59293: NONEQUAL
59294: IFFALSE 59298
// exit ;
59296: GO 59400
// if HexInfo ( x , y ) = factory then
59298: LD_VAR 0 2
59302: PPUSH
59303: LD_VAR 0 3
59307: PPUSH
59308: CALL_OW 428
59312: PUSH
59313: LD_VAR 0 1
59317: EQUAL
59318: IFFALSE 59345
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
59320: LD_ADDR_EXP 91
59324: PUSH
59325: LD_EXP 91
59329: PPUSH
59330: LD_VAR 0 1
59334: PPUSH
59335: LD_INT 0
59337: PPUSH
59338: CALL_OW 1
59342: ST_TO_ADDR
59343: GO 59396
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
59345: LD_ADDR_EXP 91
59349: PUSH
59350: LD_EXP 91
59354: PPUSH
59355: LD_VAR 0 1
59359: PPUSH
59360: LD_VAR 0 1
59364: PPUSH
59365: CALL_OW 255
59369: PUSH
59370: LD_VAR 0 1
59374: PUSH
59375: LD_VAR 0 2
59379: PUSH
59380: LD_VAR 0 3
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: PPUSH
59391: CALL_OW 1
59395: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59396: CALL 59405 0 0
// end ;
59400: LD_VAR 0 4
59404: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
59405: LD_INT 0
59407: PPUSH
59408: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59409: LD_STRING resetFactoryWaypoint();
59411: PPUSH
59412: CALL_OW 559
// if factoryWaypoints then
59416: LD_EXP 91
59420: IFFALSE 59543
// begin for i := 1 to factoryWaypoints do
59422: LD_ADDR_VAR 0 2
59426: PUSH
59427: DOUBLE
59428: LD_INT 1
59430: DEC
59431: ST_TO_ADDR
59432: LD_EXP 91
59436: PUSH
59437: FOR_TO
59438: IFFALSE 59541
// if factoryWaypoints [ i ] then
59440: LD_EXP 91
59444: PUSH
59445: LD_VAR 0 2
59449: ARRAY
59450: IFFALSE 59539
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
59452: LD_STRING setFactoryWaypointXY(
59454: PUSH
59455: LD_EXP 91
59459: PUSH
59460: LD_VAR 0 2
59464: ARRAY
59465: PUSH
59466: LD_INT 1
59468: ARRAY
59469: STR
59470: PUSH
59471: LD_STRING ,
59473: STR
59474: PUSH
59475: LD_EXP 91
59479: PUSH
59480: LD_VAR 0 2
59484: ARRAY
59485: PUSH
59486: LD_INT 2
59488: ARRAY
59489: STR
59490: PUSH
59491: LD_STRING ,
59493: STR
59494: PUSH
59495: LD_EXP 91
59499: PUSH
59500: LD_VAR 0 2
59504: ARRAY
59505: PUSH
59506: LD_INT 3
59508: ARRAY
59509: STR
59510: PUSH
59511: LD_STRING ,
59513: STR
59514: PUSH
59515: LD_EXP 91
59519: PUSH
59520: LD_VAR 0 2
59524: ARRAY
59525: PUSH
59526: LD_INT 4
59528: ARRAY
59529: STR
59530: PUSH
59531: LD_STRING )
59533: STR
59534: PPUSH
59535: CALL_OW 559
59539: GO 59437
59541: POP
59542: POP
// end ; end ;
59543: LD_VAR 0 1
59547: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
59548: LD_INT 0
59550: PPUSH
59551: PPUSH
59552: PPUSH
59553: PPUSH
59554: PPUSH
59555: PPUSH
59556: PPUSH
59557: PPUSH
59558: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
59559: LD_VAR 0 1
59563: NOT
59564: PUSH
59565: LD_VAR 0 2
59569: PPUSH
59570: LD_VAR 0 3
59574: PPUSH
59575: CALL_OW 488
59579: NOT
59580: OR
59581: PUSH
59582: LD_VAR 0 4
59586: NOT
59587: OR
59588: IFFALSE 59592
// exit ;
59590: GO 59932
// list := [ ] ;
59592: LD_ADDR_VAR 0 13
59596: PUSH
59597: EMPTY
59598: ST_TO_ADDR
// if x - r < 0 then
59599: LD_VAR 0 2
59603: PUSH
59604: LD_VAR 0 4
59608: MINUS
59609: PUSH
59610: LD_INT 0
59612: LESS
59613: IFFALSE 59625
// min_x := 0 else
59615: LD_ADDR_VAR 0 7
59619: PUSH
59620: LD_INT 0
59622: ST_TO_ADDR
59623: GO 59641
// min_x := x - r ;
59625: LD_ADDR_VAR 0 7
59629: PUSH
59630: LD_VAR 0 2
59634: PUSH
59635: LD_VAR 0 4
59639: MINUS
59640: ST_TO_ADDR
// if y - r < 0 then
59641: LD_VAR 0 3
59645: PUSH
59646: LD_VAR 0 4
59650: MINUS
59651: PUSH
59652: LD_INT 0
59654: LESS
59655: IFFALSE 59667
// min_y := 0 else
59657: LD_ADDR_VAR 0 8
59661: PUSH
59662: LD_INT 0
59664: ST_TO_ADDR
59665: GO 59683
// min_y := y - r ;
59667: LD_ADDR_VAR 0 8
59671: PUSH
59672: LD_VAR 0 3
59676: PUSH
59677: LD_VAR 0 4
59681: MINUS
59682: ST_TO_ADDR
// max_x := x + r ;
59683: LD_ADDR_VAR 0 9
59687: PUSH
59688: LD_VAR 0 2
59692: PUSH
59693: LD_VAR 0 4
59697: PLUS
59698: ST_TO_ADDR
// max_y := y + r ;
59699: LD_ADDR_VAR 0 10
59703: PUSH
59704: LD_VAR 0 3
59708: PUSH
59709: LD_VAR 0 4
59713: PLUS
59714: ST_TO_ADDR
// for _x = min_x to max_x do
59715: LD_ADDR_VAR 0 11
59719: PUSH
59720: DOUBLE
59721: LD_VAR 0 7
59725: DEC
59726: ST_TO_ADDR
59727: LD_VAR 0 9
59731: PUSH
59732: FOR_TO
59733: IFFALSE 59850
// for _y = min_y to max_y do
59735: LD_ADDR_VAR 0 12
59739: PUSH
59740: DOUBLE
59741: LD_VAR 0 8
59745: DEC
59746: ST_TO_ADDR
59747: LD_VAR 0 10
59751: PUSH
59752: FOR_TO
59753: IFFALSE 59846
// begin if not ValidHex ( _x , _y ) then
59755: LD_VAR 0 11
59759: PPUSH
59760: LD_VAR 0 12
59764: PPUSH
59765: CALL_OW 488
59769: NOT
59770: IFFALSE 59774
// continue ;
59772: GO 59752
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59774: LD_VAR 0 11
59778: PPUSH
59779: LD_VAR 0 12
59783: PPUSH
59784: CALL_OW 351
59788: PUSH
59789: LD_VAR 0 11
59793: PPUSH
59794: LD_VAR 0 12
59798: PPUSH
59799: CALL_OW 554
59803: AND
59804: IFFALSE 59844
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59806: LD_ADDR_VAR 0 13
59810: PUSH
59811: LD_VAR 0 13
59815: PPUSH
59816: LD_VAR 0 13
59820: PUSH
59821: LD_INT 1
59823: PLUS
59824: PPUSH
59825: LD_VAR 0 11
59829: PUSH
59830: LD_VAR 0 12
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PPUSH
59839: CALL_OW 2
59843: ST_TO_ADDR
// end ;
59844: GO 59752
59846: POP
59847: POP
59848: GO 59732
59850: POP
59851: POP
// if not list then
59852: LD_VAR 0 13
59856: NOT
59857: IFFALSE 59861
// exit ;
59859: GO 59932
// for i in list do
59861: LD_ADDR_VAR 0 6
59865: PUSH
59866: LD_VAR 0 13
59870: PUSH
59871: FOR_IN
59872: IFFALSE 59930
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
59874: LD_VAR 0 1
59878: PPUSH
59879: LD_STRING M
59881: PUSH
59882: LD_VAR 0 6
59886: PUSH
59887: LD_INT 1
59889: ARRAY
59890: PUSH
59891: LD_VAR 0 6
59895: PUSH
59896: LD_INT 2
59898: ARRAY
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: PUSH
59921: EMPTY
59922: LIST
59923: PPUSH
59924: CALL_OW 447
59928: GO 59871
59930: POP
59931: POP
// end ;
59932: LD_VAR 0 5
59936: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59937: LD_EXP 92
59941: NOT
59942: IFFALSE 59992
59944: GO 59946
59946: DISABLE
// begin initHack := true ;
59947: LD_ADDR_EXP 92
59951: PUSH
59952: LD_INT 1
59954: ST_TO_ADDR
// hackTanks := [ ] ;
59955: LD_ADDR_EXP 93
59959: PUSH
59960: EMPTY
59961: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59962: LD_ADDR_EXP 94
59966: PUSH
59967: EMPTY
59968: ST_TO_ADDR
// hackLimit := 3 ;
59969: LD_ADDR_EXP 95
59973: PUSH
59974: LD_INT 3
59976: ST_TO_ADDR
// hackDist := 12 ;
59977: LD_ADDR_EXP 96
59981: PUSH
59982: LD_INT 12
59984: ST_TO_ADDR
// hackCounter := [ ] ;
59985: LD_ADDR_EXP 97
59989: PUSH
59990: EMPTY
59991: ST_TO_ADDR
// end ;
59992: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59993: LD_EXP 92
59997: PUSH
59998: LD_INT 34
60000: PUSH
60001: LD_EXP 5
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PPUSH
60010: CALL_OW 69
60014: AND
60015: IFFALSE 60270
60017: GO 60019
60019: DISABLE
60020: LD_INT 0
60022: PPUSH
60023: PPUSH
// begin enable ;
60024: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
60025: LD_ADDR_VAR 0 1
60029: PUSH
60030: LD_INT 34
60032: PUSH
60033: LD_EXP 5
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PPUSH
60042: CALL_OW 69
60046: PUSH
60047: FOR_IN
60048: IFFALSE 60268
// begin if not i in hackTanks then
60050: LD_VAR 0 1
60054: PUSH
60055: LD_EXP 93
60059: IN
60060: NOT
60061: IFFALSE 60144
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
60063: LD_ADDR_EXP 93
60067: PUSH
60068: LD_EXP 93
60072: PPUSH
60073: LD_EXP 93
60077: PUSH
60078: LD_INT 1
60080: PLUS
60081: PPUSH
60082: LD_VAR 0 1
60086: PPUSH
60087: CALL_OW 1
60091: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
60092: LD_ADDR_EXP 94
60096: PUSH
60097: LD_EXP 94
60101: PPUSH
60102: LD_EXP 94
60106: PUSH
60107: LD_INT 1
60109: PLUS
60110: PPUSH
60111: EMPTY
60112: PPUSH
60113: CALL_OW 1
60117: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
60118: LD_ADDR_EXP 97
60122: PUSH
60123: LD_EXP 97
60127: PPUSH
60128: LD_EXP 97
60132: PUSH
60133: LD_INT 1
60135: PLUS
60136: PPUSH
60137: EMPTY
60138: PPUSH
60139: CALL_OW 1
60143: ST_TO_ADDR
// end ; if not IsOk ( i ) then
60144: LD_VAR 0 1
60148: PPUSH
60149: CALL_OW 302
60153: NOT
60154: IFFALSE 60167
// begin HackUnlinkAll ( i ) ;
60156: LD_VAR 0 1
60160: PPUSH
60161: CALL 60273 0 1
// continue ;
60165: GO 60047
// end ; HackCheckCapturedStatus ( i ) ;
60167: LD_VAR 0 1
60171: PPUSH
60172: CALL 60716 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
60176: LD_ADDR_VAR 0 2
60180: PUSH
60181: LD_INT 81
60183: PUSH
60184: LD_VAR 0 1
60188: PPUSH
60189: CALL_OW 255
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 33
60200: PUSH
60201: LD_INT 3
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 91
60210: PUSH
60211: LD_VAR 0 1
60215: PUSH
60216: LD_EXP 96
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 50
60228: PUSH
60229: EMPTY
60230: LIST
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: PPUSH
60238: CALL_OW 69
60242: ST_TO_ADDR
// if not tmp then
60243: LD_VAR 0 2
60247: NOT
60248: IFFALSE 60252
// continue ;
60250: GO 60047
// HackLink ( i , tmp ) ;
60252: LD_VAR 0 1
60256: PPUSH
60257: LD_VAR 0 2
60261: PPUSH
60262: CALL 60409 0 2
// end ;
60266: GO 60047
60268: POP
60269: POP
// end ;
60270: PPOPN 2
60272: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
60273: LD_INT 0
60275: PPUSH
60276: PPUSH
60277: PPUSH
// if not hack in hackTanks then
60278: LD_VAR 0 1
60282: PUSH
60283: LD_EXP 93
60287: IN
60288: NOT
60289: IFFALSE 60293
// exit ;
60291: GO 60404
// index := GetElementIndex ( hackTanks , hack ) ;
60293: LD_ADDR_VAR 0 4
60297: PUSH
60298: LD_EXP 93
60302: PPUSH
60303: LD_VAR 0 1
60307: PPUSH
60308: CALL 6079 0 2
60312: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
60313: LD_EXP 94
60317: PUSH
60318: LD_VAR 0 4
60322: ARRAY
60323: IFFALSE 60404
// begin for i in hackTanksCaptured [ index ] do
60325: LD_ADDR_VAR 0 3
60329: PUSH
60330: LD_EXP 94
60334: PUSH
60335: LD_VAR 0 4
60339: ARRAY
60340: PUSH
60341: FOR_IN
60342: IFFALSE 60368
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
60344: LD_VAR 0 3
60348: PUSH
60349: LD_INT 1
60351: ARRAY
60352: PPUSH
60353: LD_VAR 0 3
60357: PUSH
60358: LD_INT 2
60360: ARRAY
60361: PPUSH
60362: CALL_OW 235
60366: GO 60341
60368: POP
60369: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
60370: LD_ADDR_EXP 94
60374: PUSH
60375: LD_EXP 94
60379: PPUSH
60380: LD_VAR 0 4
60384: PPUSH
60385: EMPTY
60386: PPUSH
60387: CALL_OW 1
60391: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
60392: LD_VAR 0 1
60396: PPUSH
60397: LD_INT 0
60399: PPUSH
60400: CALL_OW 505
// end ; end ;
60404: LD_VAR 0 2
60408: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
60409: LD_INT 0
60411: PPUSH
60412: PPUSH
60413: PPUSH
// if not hack in hackTanks or not vehicles then
60414: LD_VAR 0 1
60418: PUSH
60419: LD_EXP 93
60423: IN
60424: NOT
60425: PUSH
60426: LD_VAR 0 2
60430: NOT
60431: OR
60432: IFFALSE 60436
// exit ;
60434: GO 60711
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
60436: LD_ADDR_VAR 0 2
60440: PUSH
60441: LD_VAR 0 1
60445: PPUSH
60446: LD_VAR 0 2
60450: PPUSH
60451: LD_INT 1
60453: PPUSH
60454: LD_INT 1
60456: PPUSH
60457: CALL 6729 0 4
60461: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
60462: LD_ADDR_VAR 0 5
60466: PUSH
60467: LD_EXP 93
60471: PPUSH
60472: LD_VAR 0 1
60476: PPUSH
60477: CALL 6079 0 2
60481: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
60482: LD_EXP 94
60486: PUSH
60487: LD_VAR 0 5
60491: ARRAY
60492: PUSH
60493: LD_EXP 95
60497: LESS
60498: IFFALSE 60687
// begin for i := 1 to vehicles do
60500: LD_ADDR_VAR 0 4
60504: PUSH
60505: DOUBLE
60506: LD_INT 1
60508: DEC
60509: ST_TO_ADDR
60510: LD_VAR 0 2
60514: PUSH
60515: FOR_TO
60516: IFFALSE 60685
// begin if hackTanksCaptured [ index ] = hackLimit then
60518: LD_EXP 94
60522: PUSH
60523: LD_VAR 0 5
60527: ARRAY
60528: PUSH
60529: LD_EXP 95
60533: EQUAL
60534: IFFALSE 60538
// break ;
60536: GO 60685
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
60538: LD_ADDR_EXP 97
60542: PUSH
60543: LD_EXP 97
60547: PPUSH
60548: LD_VAR 0 5
60552: PPUSH
60553: LD_EXP 97
60557: PUSH
60558: LD_VAR 0 5
60562: ARRAY
60563: PUSH
60564: LD_INT 1
60566: PLUS
60567: PPUSH
60568: CALL_OW 1
60572: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
60573: LD_ADDR_EXP 94
60577: PUSH
60578: LD_EXP 94
60582: PPUSH
60583: LD_VAR 0 5
60587: PUSH
60588: LD_EXP 94
60592: PUSH
60593: LD_VAR 0 5
60597: ARRAY
60598: PUSH
60599: LD_INT 1
60601: PLUS
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PPUSH
60607: LD_VAR 0 2
60611: PUSH
60612: LD_VAR 0 4
60616: ARRAY
60617: PUSH
60618: LD_VAR 0 2
60622: PUSH
60623: LD_VAR 0 4
60627: ARRAY
60628: PPUSH
60629: CALL_OW 255
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PPUSH
60638: CALL 6294 0 3
60642: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
60643: LD_VAR 0 2
60647: PUSH
60648: LD_VAR 0 4
60652: ARRAY
60653: PPUSH
60654: LD_VAR 0 1
60658: PPUSH
60659: CALL_OW 255
60663: PPUSH
60664: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
60668: LD_VAR 0 2
60672: PUSH
60673: LD_VAR 0 4
60677: ARRAY
60678: PPUSH
60679: CALL_OW 141
// end ;
60683: GO 60515
60685: POP
60686: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60687: LD_VAR 0 1
60691: PPUSH
60692: LD_EXP 94
60696: PUSH
60697: LD_VAR 0 5
60701: ARRAY
60702: PUSH
60703: LD_INT 0
60705: PLUS
60706: PPUSH
60707: CALL_OW 505
// end ;
60711: LD_VAR 0 3
60715: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
60716: LD_INT 0
60718: PPUSH
60719: PPUSH
60720: PPUSH
60721: PPUSH
// if not hack in hackTanks then
60722: LD_VAR 0 1
60726: PUSH
60727: LD_EXP 93
60731: IN
60732: NOT
60733: IFFALSE 60737
// exit ;
60735: GO 60977
// index := GetElementIndex ( hackTanks , hack ) ;
60737: LD_ADDR_VAR 0 4
60741: PUSH
60742: LD_EXP 93
60746: PPUSH
60747: LD_VAR 0 1
60751: PPUSH
60752: CALL 6079 0 2
60756: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
60757: LD_ADDR_VAR 0 3
60761: PUSH
60762: DOUBLE
60763: LD_EXP 94
60767: PUSH
60768: LD_VAR 0 4
60772: ARRAY
60773: INC
60774: ST_TO_ADDR
60775: LD_INT 1
60777: PUSH
60778: FOR_DOWNTO
60779: IFFALSE 60951
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60781: LD_ADDR_VAR 0 5
60785: PUSH
60786: LD_EXP 94
60790: PUSH
60791: LD_VAR 0 4
60795: ARRAY
60796: PUSH
60797: LD_VAR 0 3
60801: ARRAY
60802: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60803: LD_VAR 0 5
60807: PUSH
60808: LD_INT 1
60810: ARRAY
60811: PPUSH
60812: CALL_OW 302
60816: NOT
60817: PUSH
60818: LD_VAR 0 5
60822: PUSH
60823: LD_INT 1
60825: ARRAY
60826: PPUSH
60827: CALL_OW 255
60831: PUSH
60832: LD_VAR 0 1
60836: PPUSH
60837: CALL_OW 255
60841: NONEQUAL
60842: OR
60843: IFFALSE 60949
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60845: LD_VAR 0 5
60849: PUSH
60850: LD_INT 1
60852: ARRAY
60853: PPUSH
60854: CALL_OW 305
60858: PUSH
60859: LD_VAR 0 5
60863: PUSH
60864: LD_INT 1
60866: ARRAY
60867: PPUSH
60868: CALL_OW 255
60872: PUSH
60873: LD_VAR 0 1
60877: PPUSH
60878: CALL_OW 255
60882: EQUAL
60883: AND
60884: IFFALSE 60908
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60886: LD_VAR 0 5
60890: PUSH
60891: LD_INT 1
60893: ARRAY
60894: PPUSH
60895: LD_VAR 0 5
60899: PUSH
60900: LD_INT 2
60902: ARRAY
60903: PPUSH
60904: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60908: LD_ADDR_EXP 94
60912: PUSH
60913: LD_EXP 94
60917: PPUSH
60918: LD_VAR 0 4
60922: PPUSH
60923: LD_EXP 94
60927: PUSH
60928: LD_VAR 0 4
60932: ARRAY
60933: PPUSH
60934: LD_VAR 0 3
60938: PPUSH
60939: CALL_OW 3
60943: PPUSH
60944: CALL_OW 1
60948: ST_TO_ADDR
// end ; end ;
60949: GO 60778
60951: POP
60952: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60953: LD_VAR 0 1
60957: PPUSH
60958: LD_EXP 94
60962: PUSH
60963: LD_VAR 0 4
60967: ARRAY
60968: PUSH
60969: LD_INT 0
60971: PLUS
60972: PPUSH
60973: CALL_OW 505
// end ;
60977: LD_VAR 0 2
60981: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60982: LD_INT 0
60984: PPUSH
60985: PPUSH
60986: PPUSH
60987: PPUSH
// if not hack in hackTanks then
60988: LD_VAR 0 1
60992: PUSH
60993: LD_EXP 93
60997: IN
60998: NOT
60999: IFFALSE 61003
// exit ;
61001: GO 61088
// index := GetElementIndex ( hackTanks , hack ) ;
61003: LD_ADDR_VAR 0 5
61007: PUSH
61008: LD_EXP 93
61012: PPUSH
61013: LD_VAR 0 1
61017: PPUSH
61018: CALL 6079 0 2
61022: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
61023: LD_ADDR_VAR 0 4
61027: PUSH
61028: DOUBLE
61029: LD_INT 1
61031: DEC
61032: ST_TO_ADDR
61033: LD_EXP 94
61037: PUSH
61038: LD_VAR 0 5
61042: ARRAY
61043: PUSH
61044: FOR_TO
61045: IFFALSE 61086
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
61047: LD_EXP 94
61051: PUSH
61052: LD_VAR 0 5
61056: ARRAY
61057: PUSH
61058: LD_VAR 0 4
61062: ARRAY
61063: PUSH
61064: LD_INT 1
61066: ARRAY
61067: PUSH
61068: LD_VAR 0 2
61072: EQUAL
61073: IFFALSE 61084
// KillUnit ( vehicle ) ;
61075: LD_VAR 0 2
61079: PPUSH
61080: CALL_OW 66
61084: GO 61044
61086: POP
61087: POP
// end ;
61088: LD_VAR 0 3
61092: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
61093: LD_EXP 98
61097: NOT
61098: IFFALSE 61133
61100: GO 61102
61102: DISABLE
// begin initMiner := true ;
61103: LD_ADDR_EXP 98
61107: PUSH
61108: LD_INT 1
61110: ST_TO_ADDR
// minersList := [ ] ;
61111: LD_ADDR_EXP 99
61115: PUSH
61116: EMPTY
61117: ST_TO_ADDR
// minerMinesList := [ ] ;
61118: LD_ADDR_EXP 100
61122: PUSH
61123: EMPTY
61124: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
61125: LD_ADDR_EXP 101
61129: PUSH
61130: LD_INT 5
61132: ST_TO_ADDR
// end ;
61133: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
61134: LD_EXP 98
61138: PUSH
61139: LD_INT 34
61141: PUSH
61142: LD_EXP 10
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PPUSH
61151: CALL_OW 69
61155: AND
61156: IFFALSE 61619
61158: GO 61160
61160: DISABLE
61161: LD_INT 0
61163: PPUSH
61164: PPUSH
61165: PPUSH
61166: PPUSH
// begin enable ;
61167: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
61168: LD_ADDR_VAR 0 1
61172: PUSH
61173: LD_INT 34
61175: PUSH
61176: LD_EXP 10
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PPUSH
61185: CALL_OW 69
61189: PUSH
61190: FOR_IN
61191: IFFALSE 61263
// begin if not i in minersList then
61193: LD_VAR 0 1
61197: PUSH
61198: LD_EXP 99
61202: IN
61203: NOT
61204: IFFALSE 61261
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
61206: LD_ADDR_EXP 99
61210: PUSH
61211: LD_EXP 99
61215: PPUSH
61216: LD_EXP 99
61220: PUSH
61221: LD_INT 1
61223: PLUS
61224: PPUSH
61225: LD_VAR 0 1
61229: PPUSH
61230: CALL_OW 1
61234: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
61235: LD_ADDR_EXP 100
61239: PUSH
61240: LD_EXP 100
61244: PPUSH
61245: LD_EXP 100
61249: PUSH
61250: LD_INT 1
61252: PLUS
61253: PPUSH
61254: EMPTY
61255: PPUSH
61256: CALL_OW 1
61260: ST_TO_ADDR
// end end ;
61261: GO 61190
61263: POP
61264: POP
// for i := minerMinesList downto 1 do
61265: LD_ADDR_VAR 0 1
61269: PUSH
61270: DOUBLE
61271: LD_EXP 100
61275: INC
61276: ST_TO_ADDR
61277: LD_INT 1
61279: PUSH
61280: FOR_DOWNTO
61281: IFFALSE 61617
// begin if IsLive ( minersList [ i ] ) then
61283: LD_EXP 99
61287: PUSH
61288: LD_VAR 0 1
61292: ARRAY
61293: PPUSH
61294: CALL_OW 300
61298: IFFALSE 61326
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
61300: LD_EXP 99
61304: PUSH
61305: LD_VAR 0 1
61309: ARRAY
61310: PPUSH
61311: LD_EXP 100
61315: PUSH
61316: LD_VAR 0 1
61320: ARRAY
61321: PPUSH
61322: CALL_OW 505
// if not minerMinesList [ i ] then
61326: LD_EXP 100
61330: PUSH
61331: LD_VAR 0 1
61335: ARRAY
61336: NOT
61337: IFFALSE 61341
// continue ;
61339: GO 61280
// for j := minerMinesList [ i ] downto 1 do
61341: LD_ADDR_VAR 0 2
61345: PUSH
61346: DOUBLE
61347: LD_EXP 100
61351: PUSH
61352: LD_VAR 0 1
61356: ARRAY
61357: INC
61358: ST_TO_ADDR
61359: LD_INT 1
61361: PUSH
61362: FOR_DOWNTO
61363: IFFALSE 61613
// begin side := GetSide ( minersList [ i ] ) ;
61365: LD_ADDR_VAR 0 3
61369: PUSH
61370: LD_EXP 99
61374: PUSH
61375: LD_VAR 0 1
61379: ARRAY
61380: PPUSH
61381: CALL_OW 255
61385: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61386: LD_ADDR_VAR 0 4
61390: PUSH
61391: LD_EXP 100
61395: PUSH
61396: LD_VAR 0 1
61400: ARRAY
61401: PUSH
61402: LD_VAR 0 2
61406: ARRAY
61407: PUSH
61408: LD_INT 1
61410: ARRAY
61411: PPUSH
61412: LD_EXP 100
61416: PUSH
61417: LD_VAR 0 1
61421: ARRAY
61422: PUSH
61423: LD_VAR 0 2
61427: ARRAY
61428: PUSH
61429: LD_INT 2
61431: ARRAY
61432: PPUSH
61433: CALL_OW 428
61437: ST_TO_ADDR
// if not tmp then
61438: LD_VAR 0 4
61442: NOT
61443: IFFALSE 61447
// continue ;
61445: GO 61362
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
61447: LD_VAR 0 4
61451: PUSH
61452: LD_INT 81
61454: PUSH
61455: LD_VAR 0 3
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PPUSH
61464: CALL_OW 69
61468: IN
61469: PUSH
61470: LD_EXP 100
61474: PUSH
61475: LD_VAR 0 1
61479: ARRAY
61480: PUSH
61481: LD_VAR 0 2
61485: ARRAY
61486: PUSH
61487: LD_INT 1
61489: ARRAY
61490: PPUSH
61491: LD_EXP 100
61495: PUSH
61496: LD_VAR 0 1
61500: ARRAY
61501: PUSH
61502: LD_VAR 0 2
61506: ARRAY
61507: PUSH
61508: LD_INT 2
61510: ARRAY
61511: PPUSH
61512: CALL_OW 458
61516: AND
61517: IFFALSE 61611
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
61519: LD_EXP 100
61523: PUSH
61524: LD_VAR 0 1
61528: ARRAY
61529: PUSH
61530: LD_VAR 0 2
61534: ARRAY
61535: PUSH
61536: LD_INT 1
61538: ARRAY
61539: PPUSH
61540: LD_EXP 100
61544: PUSH
61545: LD_VAR 0 1
61549: ARRAY
61550: PUSH
61551: LD_VAR 0 2
61555: ARRAY
61556: PUSH
61557: LD_INT 2
61559: ARRAY
61560: PPUSH
61561: LD_VAR 0 3
61565: PPUSH
61566: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61570: LD_ADDR_EXP 100
61574: PUSH
61575: LD_EXP 100
61579: PPUSH
61580: LD_VAR 0 1
61584: PPUSH
61585: LD_EXP 100
61589: PUSH
61590: LD_VAR 0 1
61594: ARRAY
61595: PPUSH
61596: LD_VAR 0 2
61600: PPUSH
61601: CALL_OW 3
61605: PPUSH
61606: CALL_OW 1
61610: ST_TO_ADDR
// end ; end ;
61611: GO 61362
61613: POP
61614: POP
// end ;
61615: GO 61280
61617: POP
61618: POP
// end ;
61619: PPOPN 4
61621: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
61622: LD_INT 0
61624: PPUSH
61625: PPUSH
// result := false ;
61626: LD_ADDR_VAR 0 4
61630: PUSH
61631: LD_INT 0
61633: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61634: LD_VAR 0 1
61638: PPUSH
61639: CALL_OW 264
61643: PUSH
61644: LD_EXP 10
61648: EQUAL
61649: NOT
61650: IFFALSE 61654
// exit ;
61652: GO 61894
// index := GetElementIndex ( minersList , unit ) ;
61654: LD_ADDR_VAR 0 5
61658: PUSH
61659: LD_EXP 99
61663: PPUSH
61664: LD_VAR 0 1
61668: PPUSH
61669: CALL 6079 0 2
61673: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61674: LD_EXP 100
61678: PUSH
61679: LD_VAR 0 5
61683: ARRAY
61684: PUSH
61685: LD_EXP 101
61689: GREATEREQUAL
61690: IFFALSE 61694
// exit ;
61692: GO 61894
// ComMoveXY ( unit , x , y ) ;
61694: LD_VAR 0 1
61698: PPUSH
61699: LD_VAR 0 2
61703: PPUSH
61704: LD_VAR 0 3
61708: PPUSH
61709: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61713: LD_INT 35
61715: PPUSH
61716: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61720: LD_VAR 0 1
61724: PPUSH
61725: LD_VAR 0 2
61729: PPUSH
61730: LD_VAR 0 3
61734: PPUSH
61735: CALL 36851 0 3
61739: NOT
61740: PUSH
61741: LD_VAR 0 1
61745: PPUSH
61746: CALL_OW 314
61750: AND
61751: IFFALSE 61755
// exit ;
61753: GO 61894
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61755: LD_VAR 0 2
61759: PPUSH
61760: LD_VAR 0 3
61764: PPUSH
61765: CALL_OW 428
61769: PUSH
61770: LD_VAR 0 1
61774: EQUAL
61775: PUSH
61776: LD_VAR 0 1
61780: PPUSH
61781: CALL_OW 314
61785: NOT
61786: AND
61787: IFFALSE 61713
// PlaySoundXY ( x , y , PlantMine ) ;
61789: LD_VAR 0 2
61793: PPUSH
61794: LD_VAR 0 3
61798: PPUSH
61799: LD_STRING PlantMine
61801: PPUSH
61802: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
61806: LD_VAR 0 2
61810: PPUSH
61811: LD_VAR 0 3
61815: PPUSH
61816: LD_VAR 0 1
61820: PPUSH
61821: CALL_OW 255
61825: PPUSH
61826: LD_INT 0
61828: PPUSH
61829: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61833: LD_ADDR_EXP 100
61837: PUSH
61838: LD_EXP 100
61842: PPUSH
61843: LD_VAR 0 5
61847: PUSH
61848: LD_EXP 100
61852: PUSH
61853: LD_VAR 0 5
61857: ARRAY
61858: PUSH
61859: LD_INT 1
61861: PLUS
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PPUSH
61867: LD_VAR 0 2
61871: PUSH
61872: LD_VAR 0 3
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PPUSH
61881: CALL 6294 0 3
61885: ST_TO_ADDR
// result := true ;
61886: LD_ADDR_VAR 0 4
61890: PUSH
61891: LD_INT 1
61893: ST_TO_ADDR
// end ;
61894: LD_VAR 0 4
61898: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61899: LD_INT 0
61901: PPUSH
61902: PPUSH
61903: PPUSH
// if not unit in minersList then
61904: LD_VAR 0 1
61908: PUSH
61909: LD_EXP 99
61913: IN
61914: NOT
61915: IFFALSE 61919
// exit ;
61917: GO 62311
// index := GetElementIndex ( minersList , unit ) ;
61919: LD_ADDR_VAR 0 6
61923: PUSH
61924: LD_EXP 99
61928: PPUSH
61929: LD_VAR 0 1
61933: PPUSH
61934: CALL 6079 0 2
61938: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61939: LD_ADDR_VAR 0 5
61943: PUSH
61944: DOUBLE
61945: LD_EXP 100
61949: PUSH
61950: LD_VAR 0 6
61954: ARRAY
61955: INC
61956: ST_TO_ADDR
61957: LD_INT 1
61959: PUSH
61960: FOR_DOWNTO
61961: IFFALSE 62122
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
61963: LD_EXP 100
61967: PUSH
61968: LD_VAR 0 6
61972: ARRAY
61973: PUSH
61974: LD_VAR 0 5
61978: ARRAY
61979: PUSH
61980: LD_INT 1
61982: ARRAY
61983: PUSH
61984: LD_VAR 0 2
61988: EQUAL
61989: PUSH
61990: LD_EXP 100
61994: PUSH
61995: LD_VAR 0 6
61999: ARRAY
62000: PUSH
62001: LD_VAR 0 5
62005: ARRAY
62006: PUSH
62007: LD_INT 2
62009: ARRAY
62010: PUSH
62011: LD_VAR 0 3
62015: EQUAL
62016: AND
62017: IFFALSE 62120
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62019: LD_EXP 100
62023: PUSH
62024: LD_VAR 0 6
62028: ARRAY
62029: PUSH
62030: LD_VAR 0 5
62034: ARRAY
62035: PUSH
62036: LD_INT 1
62038: ARRAY
62039: PPUSH
62040: LD_EXP 100
62044: PUSH
62045: LD_VAR 0 6
62049: ARRAY
62050: PUSH
62051: LD_VAR 0 5
62055: ARRAY
62056: PUSH
62057: LD_INT 2
62059: ARRAY
62060: PPUSH
62061: LD_VAR 0 1
62065: PPUSH
62066: CALL_OW 255
62070: PPUSH
62071: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62075: LD_ADDR_EXP 100
62079: PUSH
62080: LD_EXP 100
62084: PPUSH
62085: LD_VAR 0 6
62089: PPUSH
62090: LD_EXP 100
62094: PUSH
62095: LD_VAR 0 6
62099: ARRAY
62100: PPUSH
62101: LD_VAR 0 5
62105: PPUSH
62106: CALL_OW 3
62110: PPUSH
62111: CALL_OW 1
62115: ST_TO_ADDR
// exit ;
62116: POP
62117: POP
62118: GO 62311
// end ; end ;
62120: GO 61960
62122: POP
62123: POP
// for i := minerMinesList [ index ] downto 1 do
62124: LD_ADDR_VAR 0 5
62128: PUSH
62129: DOUBLE
62130: LD_EXP 100
62134: PUSH
62135: LD_VAR 0 6
62139: ARRAY
62140: INC
62141: ST_TO_ADDR
62142: LD_INT 1
62144: PUSH
62145: FOR_DOWNTO
62146: IFFALSE 62309
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
62148: LD_EXP 100
62152: PUSH
62153: LD_VAR 0 6
62157: ARRAY
62158: PUSH
62159: LD_VAR 0 5
62163: ARRAY
62164: PUSH
62165: LD_INT 1
62167: ARRAY
62168: PPUSH
62169: LD_EXP 100
62173: PUSH
62174: LD_VAR 0 6
62178: ARRAY
62179: PUSH
62180: LD_VAR 0 5
62184: ARRAY
62185: PUSH
62186: LD_INT 2
62188: ARRAY
62189: PPUSH
62190: LD_VAR 0 2
62194: PPUSH
62195: LD_VAR 0 3
62199: PPUSH
62200: CALL_OW 298
62204: PUSH
62205: LD_INT 6
62207: LESS
62208: IFFALSE 62307
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62210: LD_EXP 100
62214: PUSH
62215: LD_VAR 0 6
62219: ARRAY
62220: PUSH
62221: LD_VAR 0 5
62225: ARRAY
62226: PUSH
62227: LD_INT 1
62229: ARRAY
62230: PPUSH
62231: LD_EXP 100
62235: PUSH
62236: LD_VAR 0 6
62240: ARRAY
62241: PUSH
62242: LD_VAR 0 5
62246: ARRAY
62247: PUSH
62248: LD_INT 2
62250: ARRAY
62251: PPUSH
62252: LD_VAR 0 1
62256: PPUSH
62257: CALL_OW 255
62261: PPUSH
62262: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62266: LD_ADDR_EXP 100
62270: PUSH
62271: LD_EXP 100
62275: PPUSH
62276: LD_VAR 0 6
62280: PPUSH
62281: LD_EXP 100
62285: PUSH
62286: LD_VAR 0 6
62290: ARRAY
62291: PPUSH
62292: LD_VAR 0 5
62296: PPUSH
62297: CALL_OW 3
62301: PPUSH
62302: CALL_OW 1
62306: ST_TO_ADDR
// end ; end ;
62307: GO 62145
62309: POP
62310: POP
// end ;
62311: LD_VAR 0 4
62315: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
62316: LD_INT 0
62318: PPUSH
62319: PPUSH
62320: PPUSH
62321: PPUSH
62322: PPUSH
62323: PPUSH
62324: PPUSH
62325: PPUSH
62326: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
62327: LD_VAR 0 1
62331: PPUSH
62332: CALL_OW 264
62336: PUSH
62337: LD_EXP 10
62341: EQUAL
62342: NOT
62343: PUSH
62344: LD_VAR 0 1
62348: PUSH
62349: LD_EXP 99
62353: IN
62354: NOT
62355: OR
62356: IFFALSE 62360
// exit ;
62358: GO 62682
// index := GetElementIndex ( minersList , unit ) ;
62360: LD_ADDR_VAR 0 6
62364: PUSH
62365: LD_EXP 99
62369: PPUSH
62370: LD_VAR 0 1
62374: PPUSH
62375: CALL 6079 0 2
62379: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
62380: LD_ADDR_VAR 0 8
62384: PUSH
62385: LD_EXP 101
62389: PUSH
62390: LD_EXP 100
62394: PUSH
62395: LD_VAR 0 6
62399: ARRAY
62400: MINUS
62401: ST_TO_ADDR
// if not minesFreeAmount then
62402: LD_VAR 0 8
62406: NOT
62407: IFFALSE 62411
// exit ;
62409: GO 62682
// tmp := [ ] ;
62411: LD_ADDR_VAR 0 7
62415: PUSH
62416: EMPTY
62417: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
62418: LD_ADDR_VAR 0 5
62422: PUSH
62423: DOUBLE
62424: LD_INT 1
62426: DEC
62427: ST_TO_ADDR
62428: LD_VAR 0 8
62432: PUSH
62433: FOR_TO
62434: IFFALSE 62629
// begin _d := rand ( 0 , 5 ) ;
62436: LD_ADDR_VAR 0 11
62440: PUSH
62441: LD_INT 0
62443: PPUSH
62444: LD_INT 5
62446: PPUSH
62447: CALL_OW 12
62451: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
62452: LD_ADDR_VAR 0 12
62456: PUSH
62457: LD_INT 2
62459: PPUSH
62460: LD_INT 6
62462: PPUSH
62463: CALL_OW 12
62467: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
62468: LD_ADDR_VAR 0 9
62472: PUSH
62473: LD_VAR 0 2
62477: PPUSH
62478: LD_VAR 0 11
62482: PPUSH
62483: LD_VAR 0 12
62487: PPUSH
62488: CALL_OW 272
62492: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
62493: LD_ADDR_VAR 0 10
62497: PUSH
62498: LD_VAR 0 3
62502: PPUSH
62503: LD_VAR 0 11
62507: PPUSH
62508: LD_VAR 0 12
62512: PPUSH
62513: CALL_OW 273
62517: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
62518: LD_VAR 0 9
62522: PPUSH
62523: LD_VAR 0 10
62527: PPUSH
62528: CALL_OW 488
62532: PUSH
62533: LD_VAR 0 9
62537: PUSH
62538: LD_VAR 0 10
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_VAR 0 7
62551: IN
62552: NOT
62553: AND
62554: PUSH
62555: LD_VAR 0 9
62559: PPUSH
62560: LD_VAR 0 10
62564: PPUSH
62565: CALL_OW 458
62569: NOT
62570: AND
62571: IFFALSE 62613
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
62573: LD_ADDR_VAR 0 7
62577: PUSH
62578: LD_VAR 0 7
62582: PPUSH
62583: LD_VAR 0 7
62587: PUSH
62588: LD_INT 1
62590: PLUS
62591: PPUSH
62592: LD_VAR 0 9
62596: PUSH
62597: LD_VAR 0 10
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PPUSH
62606: CALL_OW 1
62610: ST_TO_ADDR
62611: GO 62627
// i := i - 1 ;
62613: LD_ADDR_VAR 0 5
62617: PUSH
62618: LD_VAR 0 5
62622: PUSH
62623: LD_INT 1
62625: MINUS
62626: ST_TO_ADDR
// end ;
62627: GO 62433
62629: POP
62630: POP
// for i in tmp do
62631: LD_ADDR_VAR 0 5
62635: PUSH
62636: LD_VAR 0 7
62640: PUSH
62641: FOR_IN
62642: IFFALSE 62680
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62644: LD_VAR 0 1
62648: PPUSH
62649: LD_VAR 0 5
62653: PUSH
62654: LD_INT 1
62656: ARRAY
62657: PPUSH
62658: LD_VAR 0 5
62662: PUSH
62663: LD_INT 2
62665: ARRAY
62666: PPUSH
62667: CALL 61622 0 3
62671: NOT
62672: IFFALSE 62678
// exit ;
62674: POP
62675: POP
62676: GO 62682
62678: GO 62641
62680: POP
62681: POP
// end ;
62682: LD_VAR 0 4
62686: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
62687: LD_INT 0
62689: PPUSH
62690: PPUSH
62691: PPUSH
62692: PPUSH
62693: PPUSH
62694: PPUSH
62695: PPUSH
// if not GetClass ( unit ) = class_sniper then
62696: LD_VAR 0 1
62700: PPUSH
62701: CALL_OW 257
62705: PUSH
62706: LD_INT 5
62708: EQUAL
62709: NOT
62710: IFFALSE 62714
// exit ;
62712: GO 63102
// dist := 8 ;
62714: LD_ADDR_VAR 0 5
62718: PUSH
62719: LD_INT 8
62721: ST_TO_ADDR
// viewRange := 12 ;
62722: LD_ADDR_VAR 0 7
62726: PUSH
62727: LD_INT 12
62729: ST_TO_ADDR
// side := GetSide ( unit ) ;
62730: LD_ADDR_VAR 0 6
62734: PUSH
62735: LD_VAR 0 1
62739: PPUSH
62740: CALL_OW 255
62744: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62745: LD_INT 61
62747: PPUSH
62748: LD_VAR 0 6
62752: PPUSH
62753: CALL_OW 321
62757: PUSH
62758: LD_INT 2
62760: EQUAL
62761: IFFALSE 62771
// viewRange := 16 ;
62763: LD_ADDR_VAR 0 7
62767: PUSH
62768: LD_INT 16
62770: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62771: LD_VAR 0 1
62775: PPUSH
62776: LD_VAR 0 2
62780: PPUSH
62781: LD_VAR 0 3
62785: PPUSH
62786: CALL_OW 297
62790: PUSH
62791: LD_VAR 0 5
62795: GREATER
62796: IFFALSE 62875
// begin ComMoveXY ( unit , x , y ) ;
62798: LD_VAR 0 1
62802: PPUSH
62803: LD_VAR 0 2
62807: PPUSH
62808: LD_VAR 0 3
62812: PPUSH
62813: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62817: LD_INT 35
62819: PPUSH
62820: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62824: LD_VAR 0 1
62828: PPUSH
62829: LD_VAR 0 2
62833: PPUSH
62834: LD_VAR 0 3
62838: PPUSH
62839: CALL 36851 0 3
62843: NOT
62844: IFFALSE 62848
// exit ;
62846: GO 63102
// until GetDistUnitXY ( unit , x , y ) < dist ;
62848: LD_VAR 0 1
62852: PPUSH
62853: LD_VAR 0 2
62857: PPUSH
62858: LD_VAR 0 3
62862: PPUSH
62863: CALL_OW 297
62867: PUSH
62868: LD_VAR 0 5
62872: LESS
62873: IFFALSE 62817
// end ; ComTurnXY ( unit , x , y ) ;
62875: LD_VAR 0 1
62879: PPUSH
62880: LD_VAR 0 2
62884: PPUSH
62885: LD_VAR 0 3
62889: PPUSH
62890: CALL_OW 118
// wait ( 5 ) ;
62894: LD_INT 5
62896: PPUSH
62897: CALL_OW 67
// _d := GetDir ( unit ) ;
62901: LD_ADDR_VAR 0 10
62905: PUSH
62906: LD_VAR 0 1
62910: PPUSH
62911: CALL_OW 254
62915: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
62916: LD_ADDR_VAR 0 8
62920: PUSH
62921: LD_VAR 0 1
62925: PPUSH
62926: CALL_OW 250
62930: PPUSH
62931: LD_VAR 0 10
62935: PPUSH
62936: LD_VAR 0 5
62940: PPUSH
62941: CALL_OW 272
62945: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
62946: LD_ADDR_VAR 0 9
62950: PUSH
62951: LD_VAR 0 1
62955: PPUSH
62956: CALL_OW 251
62960: PPUSH
62961: LD_VAR 0 10
62965: PPUSH
62966: LD_VAR 0 5
62970: PPUSH
62971: CALL_OW 273
62975: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62976: LD_VAR 0 8
62980: PPUSH
62981: LD_VAR 0 9
62985: PPUSH
62986: CALL_OW 488
62990: NOT
62991: IFFALSE 62995
// exit ;
62993: GO 63102
// ComAnimCustom ( unit , 1 ) ;
62995: LD_VAR 0 1
62999: PPUSH
63000: LD_INT 1
63002: PPUSH
63003: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
63007: LD_VAR 0 8
63011: PPUSH
63012: LD_VAR 0 9
63016: PPUSH
63017: LD_VAR 0 6
63021: PPUSH
63022: LD_VAR 0 7
63026: PPUSH
63027: CALL_OW 330
// repeat wait ( 1 ) ;
63031: LD_INT 1
63033: PPUSH
63034: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
63038: LD_VAR 0 1
63042: PPUSH
63043: CALL_OW 316
63047: PUSH
63048: LD_VAR 0 1
63052: PPUSH
63053: CALL_OW 314
63057: OR
63058: PUSH
63059: LD_VAR 0 1
63063: PPUSH
63064: CALL_OW 302
63068: NOT
63069: OR
63070: PUSH
63071: LD_VAR 0 1
63075: PPUSH
63076: CALL_OW 301
63080: OR
63081: IFFALSE 63031
// RemoveSeeing ( _x , _y , side ) ;
63083: LD_VAR 0 8
63087: PPUSH
63088: LD_VAR 0 9
63092: PPUSH
63093: LD_VAR 0 6
63097: PPUSH
63098: CALL_OW 331
// end ; end_of_file
63102: LD_VAR 0 4
63106: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63107: LD_VAR 0 1
63111: PUSH
63112: LD_INT 200
63114: DOUBLE
63115: GREATEREQUAL
63116: IFFALSE 63124
63118: LD_INT 299
63120: DOUBLE
63121: LESSEQUAL
63122: IFTRUE 63126
63124: GO 63158
63126: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63127: LD_VAR 0 1
63131: PPUSH
63132: LD_VAR 0 2
63136: PPUSH
63137: LD_VAR 0 3
63141: PPUSH
63142: LD_VAR 0 4
63146: PPUSH
63147: LD_VAR 0 5
63151: PPUSH
63152: CALL 58845 0 5
63156: GO 63235
63158: LD_INT 300
63160: DOUBLE
63161: GREATEREQUAL
63162: IFFALSE 63170
63164: LD_INT 399
63166: DOUBLE
63167: LESSEQUAL
63168: IFTRUE 63172
63170: GO 63234
63172: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63173: LD_VAR 0 1
63177: PPUSH
63178: LD_VAR 0 2
63182: PPUSH
63183: LD_VAR 0 3
63187: PPUSH
63188: LD_VAR 0 4
63192: PPUSH
63193: LD_VAR 0 5
63197: PPUSH
63198: LD_VAR 0 6
63202: PPUSH
63203: LD_VAR 0 7
63207: PPUSH
63208: LD_VAR 0 8
63212: PPUSH
63213: LD_VAR 0 9
63217: PPUSH
63218: LD_VAR 0 10
63222: PPUSH
63223: LD_VAR 0 11
63227: PPUSH
63228: CALL 56487 0 11
63232: GO 63235
63234: POP
// end ;
63235: PPOPN 11
63237: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
63238: LD_VAR 0 1
63242: PPUSH
63243: LD_VAR 0 2
63247: PPUSH
63248: LD_VAR 0 3
63252: PPUSH
63253: LD_VAR 0 4
63257: PPUSH
63258: LD_VAR 0 5
63262: PPUSH
63263: CALL 58581 0 5
// end ;
63267: PPOPN 5
63269: END
