// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 116 0 0
// PrepareNature ( 4 , 4 , 12 , 4 , 4 , 1 , 4 , natArea , watArea ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 12
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 4
  22: PPUSH
  23: LD_INT 1
  25: PPUSH
  26: LD_INT 4
  28: PPUSH
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: CALL 35508 0 9
// if gameType = 1 then
  39: LD_EXP 2
  43: PUSH
  44: LD_INT 1
  46: EQUAL
  47: IFFALSE 111
// InitEcoMode ( [ 189 , 97 ] , [ [ 215 , 93 ] , [ 204 , 126 ] ] , [ attacksArea1 , attacksArea2 , attacksArea3 , attacksArea4 , attacksArea5 ] ) else
  49: LD_INT 189
  51: PUSH
  52: LD_INT 97
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: PPUSH
  59: LD_INT 215
  61: PUSH
  62: LD_INT 93
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: PUSH
  69: LD_INT 204
  71: PUSH
  72: LD_INT 126
  74: PUSH
  75: EMPTY
  76: LIST
  77: LIST
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PPUSH
  83: LD_INT 2
  85: PUSH
  86: LD_INT 3
  88: PUSH
  89: LD_INT 4
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 6
  97: PUSH
  98: EMPTY
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: PPUSH
 105: CALL 43911 0 3
 109: GO 115
// InitDefendMode ( ) ;
 111: CALL 165 0 0
// end ;
 115: END
// export debug , gameType ; function Init ; begin
 116: LD_INT 0
 118: PPUSH
// debug := 0 ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// if debug then
 127: LD_EXP 1
 131: IFFALSE 143
// gameType := 1 else
 133: LD_ADDR_EXP 2
 137: PUSH
 138: LD_INT 1
 140: ST_TO_ADDR
 141: GO 160
// gameType := GetMultiplayerSetting ( 50 ) + 1 ;
 143: LD_ADDR_EXP 2
 147: PUSH
 148: LD_INT 50
 150: PPUSH
 151: CALL_OW 426
 155: PUSH
 156: LD_INT 1
 158: PLUS
 159: ST_TO_ADDR
// end ; end_of_file
 160: LD_VAR 0 1
 164: RET
// export function InitDefendMode ( ) ; var buildingsList ; begin
 165: LD_INT 0
 167: PPUSH
 168: PPUSH
// buildingsList := [ [ 91 , 182 , 59 , 3 , 0 , 0 , 45 ] , [ 90 , 185 , 60 , 3 , 0 , 0 , 46 ] , [ 90 , 188 , 62 , 3 , 0 , 0 , 43 ] , [ 73 , 178 , 64 , 2 , 0 , 0 , 0 ] , [ 75 , 182 , 65 , 3 , 0 , 0 , 0 ] , [ 76 , 179 , 68 , 1 , 0 , 0 , 0 ] , [ 69 , 182 , 68 , 2 , 0 , 0 , 0 ] , [ 71 , 186 , 68 , 4 , 0 , 0 , 0 ] , [ 72 , 182 , 72 , 0 , 0 , 0 , 0 ] , [ 91 , 169 , 73 , 1 , 0 , 0 , 46 ] , [ 67 , 209 , 79 , 4 , 0 , 0 , 0 ] , [ 88 , 204 , 87 , 3 , 0 , 0 , 0 ] , [ 91 , 169 , 88 , 1 , 0 , 0 , 43 ] , [ 91 , 169 , 91 , 1 , 0 , 0 , 45 ] , [ 86 , 192 , 92 , 4 , 0 , 0 , 0 ] , [ 88 , 207 , 93 , 2 , 0 , 0 , 0 ] , [ 65 , 194 , 96 , 4 , 0 , 0 , 0 ] , [ 90 , 224 , 96 , 4 , 0 , 0 , 45 ] , [ 86 , 196 , 100 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 100 , 4 , 0 , 0 , 46 ] , [ 88 , 211 , 101 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 103 , 4 , 0 , 0 , 45 ] , [ 67 , 172 , 105 , 1 , 0 , 0 , 0 ] , [ 86 , 185 , 105 , 0 , 0 , 0 , 0 ] , [ 86 , 188 , 107 , 5 , 0 , 0 , 0 ] , [ 86 , 186 , 108 , 3 , 0 , 0 , 0 ] , [ 91 , 172 , 109 , 1 , 0 , 0 , 45 ] , [ 90 , 227 , 119 , 5 , 0 , 0 , 46 ] , [ 91 , 225 , 120 , 5 , 0 , 0 , 45 ] , [ 67 , 226 , 135 , 5 , 0 , 0 , 0 ] ] ;
 169: LD_ADDR_VAR 0 2
 173: PUSH
 174: LD_INT 91
 176: PUSH
 177: LD_INT 182
 179: PUSH
 180: LD_INT 59
 182: PUSH
 183: LD_INT 3
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 45
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 90
 206: PUSH
 207: LD_INT 185
 209: PUSH
 210: LD_INT 60
 212: PUSH
 213: LD_INT 3
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 46
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: PUSH
 234: LD_INT 90
 236: PUSH
 237: LD_INT 188
 239: PUSH
 240: LD_INT 62
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 0
 251: PUSH
 252: LD_INT 43
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 73
 266: PUSH
 267: LD_INT 178
 269: PUSH
 270: LD_INT 64
 272: PUSH
 273: LD_INT 2
 275: PUSH
 276: LD_INT 0
 278: PUSH
 279: LD_INT 0
 281: PUSH
 282: LD_INT 0
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 75
 296: PUSH
 297: LD_INT 182
 299: PUSH
 300: LD_INT 65
 302: PUSH
 303: LD_INT 3
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: LD_INT 0
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: PUSH
 324: LD_INT 76
 326: PUSH
 327: LD_INT 179
 329: PUSH
 330: LD_INT 68
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 0
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 69
 356: PUSH
 357: LD_INT 182
 359: PUSH
 360: LD_INT 68
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 71
 386: PUSH
 387: LD_INT 186
 389: PUSH
 390: LD_INT 68
 392: PUSH
 393: LD_INT 4
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: LD_INT 72
 416: PUSH
 417: LD_INT 182
 419: PUSH
 420: LD_INT 72
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: LD_INT 0
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: PUSH
 444: LD_INT 91
 446: PUSH
 447: LD_INT 169
 449: PUSH
 450: LD_INT 73
 452: PUSH
 453: LD_INT 1
 455: PUSH
 456: LD_INT 0
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 46
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 67
 476: PUSH
 477: LD_INT 209
 479: PUSH
 480: LD_INT 79
 482: PUSH
 483: LD_INT 4
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 88
 506: PUSH
 507: LD_INT 204
 509: PUSH
 510: LD_INT 87
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: LD_INT 0
 518: PUSH
 519: LD_INT 0
 521: PUSH
 522: LD_INT 0
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 91
 536: PUSH
 537: LD_INT 169
 539: PUSH
 540: LD_INT 88
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 0
 551: PUSH
 552: LD_INT 43
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 91
 566: PUSH
 567: LD_INT 169
 569: PUSH
 570: LD_INT 91
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 0
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: LD_INT 45
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 86
 596: PUSH
 597: LD_INT 192
 599: PUSH
 600: LD_INT 92
 602: PUSH
 603: LD_INT 4
 605: PUSH
 606: LD_INT 0
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: LD_INT 0
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_INT 88
 626: PUSH
 627: LD_INT 207
 629: PUSH
 630: LD_INT 93
 632: PUSH
 633: LD_INT 2
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 65
 656: PUSH
 657: LD_INT 194
 659: PUSH
 660: LD_INT 96
 662: PUSH
 663: LD_INT 4
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 90
 686: PUSH
 687: LD_INT 224
 689: PUSH
 690: LD_INT 96
 692: PUSH
 693: LD_INT 4
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 45
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: PUSH
 714: LD_INT 86
 716: PUSH
 717: LD_INT 196
 719: PUSH
 720: LD_INT 100
 722: PUSH
 723: LD_INT 4
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 91
 746: PUSH
 747: LD_INT 228
 749: PUSH
 750: LD_INT 100
 752: PUSH
 753: LD_INT 4
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: LD_INT 0
 761: PUSH
 762: LD_INT 46
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 88
 776: PUSH
 777: LD_INT 211
 779: PUSH
 780: LD_INT 101
 782: PUSH
 783: LD_INT 4
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 0
 791: PUSH
 792: LD_INT 0
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 91
 806: PUSH
 807: LD_INT 228
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 4
 815: PUSH
 816: LD_INT 0
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 45
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 67
 836: PUSH
 837: LD_INT 172
 839: PUSH
 840: LD_INT 105
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 0
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 86
 866: PUSH
 867: LD_INT 185
 869: PUSH
 870: LD_INT 105
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: LD_INT 0
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 86
 896: PUSH
 897: LD_INT 188
 899: PUSH
 900: LD_INT 107
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: LD_INT 0
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 86
 926: PUSH
 927: LD_INT 186
 929: PUSH
 930: LD_INT 108
 932: PUSH
 933: LD_INT 3
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 91
 956: PUSH
 957: LD_INT 172
 959: PUSH
 960: LD_INT 109
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 0
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 45
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 227
 989: PUSH
 990: LD_INT 119
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 0
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 46
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 91
1016: PUSH
1017: LD_INT 225
1019: PUSH
1020: LD_INT 120
1022: PUSH
1023: LD_INT 5
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: LD_INT 45
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_INT 67
1046: PUSH
1047: LD_INT 226
1049: PUSH
1050: LD_INT 135
1052: PUSH
1053: LD_INT 5
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: ST_TO_ADDR
// end ; end_of_file
1106: LD_VAR 0 1
1110: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
1111: LD_VAR 0 1
1115: PPUSH
1116: LD_VAR 0 2
1120: PPUSH
1121: CALL 62653 0 2
// end ;
1125: PPOPN 2
1127: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
1128: LD_VAR 0 1
1132: PPUSH
1133: CALL 62533 0 1
// end ; end_of_file
1137: PPOPN 1
1139: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1140: LD_INT 0
1142: PPUSH
1143: PPUSH
// if exist_mode then
1144: LD_VAR 0 2
1148: IFFALSE 1173
// unit := CreateCharacter ( prefix & ident ) else
1150: LD_ADDR_VAR 0 5
1154: PUSH
1155: LD_VAR 0 3
1159: PUSH
1160: LD_VAR 0 1
1164: STR
1165: PPUSH
1166: CALL_OW 34
1170: ST_TO_ADDR
1171: GO 1188
// unit := NewCharacter ( ident ) ;
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_VAR 0 1
1182: PPUSH
1183: CALL_OW 25
1187: ST_TO_ADDR
// result := unit ;
1188: LD_ADDR_VAR 0 4
1192: PUSH
1193: LD_VAR 0 5
1197: ST_TO_ADDR
// end ;
1198: LD_VAR 0 4
1202: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1203: LD_INT 0
1205: PPUSH
1206: PPUSH
// if not side or not nation then
1207: LD_VAR 0 1
1211: NOT
1212: PUSH
1213: LD_VAR 0 2
1217: NOT
1218: OR
1219: IFFALSE 1223
// exit ;
1221: GO 1991
// case nation of nation_american :
1223: LD_VAR 0 2
1227: PUSH
1228: LD_INT 1
1230: DOUBLE
1231: EQUAL
1232: IFTRUE 1236
1234: GO 1450
1236: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1237: LD_ADDR_VAR 0 4
1241: PUSH
1242: LD_INT 35
1244: PUSH
1245: LD_INT 45
1247: PUSH
1248: LD_INT 46
1250: PUSH
1251: LD_INT 47
1253: PUSH
1254: LD_INT 82
1256: PUSH
1257: LD_INT 83
1259: PUSH
1260: LD_INT 84
1262: PUSH
1263: LD_INT 85
1265: PUSH
1266: LD_INT 86
1268: PUSH
1269: LD_INT 1
1271: PUSH
1272: LD_INT 2
1274: PUSH
1275: LD_INT 6
1277: PUSH
1278: LD_INT 15
1280: PUSH
1281: LD_INT 16
1283: PUSH
1284: LD_INT 7
1286: PUSH
1287: LD_INT 12
1289: PUSH
1290: LD_INT 13
1292: PUSH
1293: LD_INT 10
1295: PUSH
1296: LD_INT 14
1298: PUSH
1299: LD_INT 20
1301: PUSH
1302: LD_INT 21
1304: PUSH
1305: LD_INT 22
1307: PUSH
1308: LD_INT 25
1310: PUSH
1311: LD_INT 32
1313: PUSH
1314: LD_INT 27
1316: PUSH
1317: LD_INT 36
1319: PUSH
1320: LD_INT 69
1322: PUSH
1323: LD_INT 39
1325: PUSH
1326: LD_INT 34
1328: PUSH
1329: LD_INT 40
1331: PUSH
1332: LD_INT 48
1334: PUSH
1335: LD_INT 49
1337: PUSH
1338: LD_INT 50
1340: PUSH
1341: LD_INT 51
1343: PUSH
1344: LD_INT 52
1346: PUSH
1347: LD_INT 53
1349: PUSH
1350: LD_INT 54
1352: PUSH
1353: LD_INT 55
1355: PUSH
1356: LD_INT 56
1358: PUSH
1359: LD_INT 57
1361: PUSH
1362: LD_INT 58
1364: PUSH
1365: LD_INT 59
1367: PUSH
1368: LD_INT 60
1370: PUSH
1371: LD_INT 61
1373: PUSH
1374: LD_INT 62
1376: PUSH
1377: LD_INT 80
1379: PUSH
1380: LD_INT 82
1382: PUSH
1383: LD_INT 83
1385: PUSH
1386: LD_INT 84
1388: PUSH
1389: LD_INT 85
1391: PUSH
1392: LD_INT 86
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
1448: GO 1915
1450: LD_INT 2
1452: DOUBLE
1453: EQUAL
1454: IFTRUE 1458
1456: GO 1684
1458: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: LD_INT 35
1466: PUSH
1467: LD_INT 45
1469: PUSH
1470: LD_INT 46
1472: PUSH
1473: LD_INT 47
1475: PUSH
1476: LD_INT 82
1478: PUSH
1479: LD_INT 83
1481: PUSH
1482: LD_INT 84
1484: PUSH
1485: LD_INT 85
1487: PUSH
1488: LD_INT 87
1490: PUSH
1491: LD_INT 70
1493: PUSH
1494: LD_INT 1
1496: PUSH
1497: LD_INT 11
1499: PUSH
1500: LD_INT 3
1502: PUSH
1503: LD_INT 4
1505: PUSH
1506: LD_INT 5
1508: PUSH
1509: LD_INT 6
1511: PUSH
1512: LD_INT 15
1514: PUSH
1515: LD_INT 18
1517: PUSH
1518: LD_INT 7
1520: PUSH
1521: LD_INT 17
1523: PUSH
1524: LD_INT 8
1526: PUSH
1527: LD_INT 20
1529: PUSH
1530: LD_INT 21
1532: PUSH
1533: LD_INT 22
1535: PUSH
1536: LD_INT 72
1538: PUSH
1539: LD_INT 26
1541: PUSH
1542: LD_INT 69
1544: PUSH
1545: LD_INT 39
1547: PUSH
1548: LD_INT 40
1550: PUSH
1551: LD_INT 41
1553: PUSH
1554: LD_INT 42
1556: PUSH
1557: LD_INT 43
1559: PUSH
1560: LD_INT 48
1562: PUSH
1563: LD_INT 49
1565: PUSH
1566: LD_INT 50
1568: PUSH
1569: LD_INT 51
1571: PUSH
1572: LD_INT 52
1574: PUSH
1575: LD_INT 53
1577: PUSH
1578: LD_INT 54
1580: PUSH
1581: LD_INT 55
1583: PUSH
1584: LD_INT 56
1586: PUSH
1587: LD_INT 60
1589: PUSH
1590: LD_INT 61
1592: PUSH
1593: LD_INT 62
1595: PUSH
1596: LD_INT 66
1598: PUSH
1599: LD_INT 67
1601: PUSH
1602: LD_INT 68
1604: PUSH
1605: LD_INT 81
1607: PUSH
1608: LD_INT 82
1610: PUSH
1611: LD_INT 83
1613: PUSH
1614: LD_INT 84
1616: PUSH
1617: LD_INT 85
1619: PUSH
1620: LD_INT 87
1622: PUSH
1623: LD_INT 88
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: ST_TO_ADDR
1682: GO 1915
1684: LD_INT 3
1686: DOUBLE
1687: EQUAL
1688: IFTRUE 1692
1690: GO 1914
1692: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1693: LD_ADDR_VAR 0 4
1697: PUSH
1698: LD_INT 46
1700: PUSH
1701: LD_INT 47
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 2
1709: PUSH
1710: LD_INT 82
1712: PUSH
1713: LD_INT 83
1715: PUSH
1716: LD_INT 84
1718: PUSH
1719: LD_INT 85
1721: PUSH
1722: LD_INT 86
1724: PUSH
1725: LD_INT 11
1727: PUSH
1728: LD_INT 9
1730: PUSH
1731: LD_INT 20
1733: PUSH
1734: LD_INT 19
1736: PUSH
1737: LD_INT 21
1739: PUSH
1740: LD_INT 24
1742: PUSH
1743: LD_INT 22
1745: PUSH
1746: LD_INT 25
1748: PUSH
1749: LD_INT 28
1751: PUSH
1752: LD_INT 29
1754: PUSH
1755: LD_INT 30
1757: PUSH
1758: LD_INT 31
1760: PUSH
1761: LD_INT 37
1763: PUSH
1764: LD_INT 38
1766: PUSH
1767: LD_INT 32
1769: PUSH
1770: LD_INT 27
1772: PUSH
1773: LD_INT 33
1775: PUSH
1776: LD_INT 69
1778: PUSH
1779: LD_INT 39
1781: PUSH
1782: LD_INT 34
1784: PUSH
1785: LD_INT 40
1787: PUSH
1788: LD_INT 71
1790: PUSH
1791: LD_INT 23
1793: PUSH
1794: LD_INT 44
1796: PUSH
1797: LD_INT 48
1799: PUSH
1800: LD_INT 49
1802: PUSH
1803: LD_INT 50
1805: PUSH
1806: LD_INT 51
1808: PUSH
1809: LD_INT 52
1811: PUSH
1812: LD_INT 53
1814: PUSH
1815: LD_INT 54
1817: PUSH
1818: LD_INT 55
1820: PUSH
1821: LD_INT 56
1823: PUSH
1824: LD_INT 57
1826: PUSH
1827: LD_INT 58
1829: PUSH
1830: LD_INT 59
1832: PUSH
1833: LD_INT 63
1835: PUSH
1836: LD_INT 64
1838: PUSH
1839: LD_INT 65
1841: PUSH
1842: LD_INT 82
1844: PUSH
1845: LD_INT 83
1847: PUSH
1848: LD_INT 84
1850: PUSH
1851: LD_INT 85
1853: PUSH
1854: LD_INT 86
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
1912: GO 1915
1914: POP
// if state > - 1 and state < 3 then
1915: LD_VAR 0 3
1919: PUSH
1920: LD_INT 1
1922: NEG
1923: GREATER
1924: PUSH
1925: LD_VAR 0 3
1929: PUSH
1930: LD_INT 3
1932: LESS
1933: AND
1934: IFFALSE 1991
// for i in result do
1936: LD_ADDR_VAR 0 5
1940: PUSH
1941: LD_VAR 0 4
1945: PUSH
1946: FOR_IN
1947: IFFALSE 1989
// if GetTech ( i , side ) <> state then
1949: LD_VAR 0 5
1953: PPUSH
1954: LD_VAR 0 1
1958: PPUSH
1959: CALL_OW 321
1963: PUSH
1964: LD_VAR 0 3
1968: NONEQUAL
1969: IFFALSE 1987
// result := result diff i ;
1971: LD_ADDR_VAR 0 4
1975: PUSH
1976: LD_VAR 0 4
1980: PUSH
1981: LD_VAR 0 5
1985: DIFF
1986: ST_TO_ADDR
1987: GO 1946
1989: POP
1990: POP
// end ;
1991: LD_VAR 0 4
1995: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1996: LD_INT 0
1998: PPUSH
1999: PPUSH
2000: PPUSH
// result := true ;
2001: LD_ADDR_VAR 0 3
2005: PUSH
2006: LD_INT 1
2008: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2009: LD_ADDR_VAR 0 5
2013: PUSH
2014: LD_VAR 0 2
2018: PPUSH
2019: CALL_OW 480
2023: ST_TO_ADDR
// if not tmp then
2024: LD_VAR 0 5
2028: NOT
2029: IFFALSE 2033
// exit ;
2031: GO 2082
// for i in tmp do
2033: LD_ADDR_VAR 0 4
2037: PUSH
2038: LD_VAR 0 5
2042: PUSH
2043: FOR_IN
2044: IFFALSE 2080
// if GetTech ( i , side ) <> state_researched then
2046: LD_VAR 0 4
2050: PPUSH
2051: LD_VAR 0 1
2055: PPUSH
2056: CALL_OW 321
2060: PUSH
2061: LD_INT 2
2063: NONEQUAL
2064: IFFALSE 2078
// begin result := false ;
2066: LD_ADDR_VAR 0 3
2070: PUSH
2071: LD_INT 0
2073: ST_TO_ADDR
// exit ;
2074: POP
2075: POP
2076: GO 2082
// end ;
2078: GO 2043
2080: POP
2081: POP
// end ;
2082: LD_VAR 0 3
2086: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2087: LD_INT 0
2089: PPUSH
2090: PPUSH
2091: PPUSH
2092: PPUSH
2093: PPUSH
2094: PPUSH
2095: PPUSH
2096: PPUSH
2097: PPUSH
2098: PPUSH
2099: PPUSH
2100: PPUSH
2101: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2102: LD_VAR 0 1
2106: NOT
2107: PUSH
2108: LD_VAR 0 1
2112: PPUSH
2113: CALL_OW 257
2117: PUSH
2118: LD_INT 9
2120: NONEQUAL
2121: OR
2122: IFFALSE 2126
// exit ;
2124: GO 2699
// side := GetSide ( unit ) ;
2126: LD_ADDR_VAR 0 9
2130: PUSH
2131: LD_VAR 0 1
2135: PPUSH
2136: CALL_OW 255
2140: ST_TO_ADDR
// tech_space := tech_spacanom ;
2141: LD_ADDR_VAR 0 12
2145: PUSH
2146: LD_INT 29
2148: ST_TO_ADDR
// tech_time := tech_taurad ;
2149: LD_ADDR_VAR 0 13
2153: PUSH
2154: LD_INT 28
2156: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2157: LD_ADDR_VAR 0 11
2161: PUSH
2162: LD_VAR 0 1
2166: PPUSH
2167: CALL_OW 310
2171: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2172: LD_VAR 0 11
2176: PPUSH
2177: CALL_OW 247
2181: PUSH
2182: LD_INT 2
2184: EQUAL
2185: IFFALSE 2189
// exit ;
2187: GO 2699
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2189: LD_ADDR_VAR 0 8
2193: PUSH
2194: LD_INT 81
2196: PUSH
2197: LD_VAR 0 9
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 3
2208: PUSH
2209: LD_INT 21
2211: PUSH
2212: LD_INT 3
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PPUSH
2227: CALL_OW 69
2231: ST_TO_ADDR
// if not tmp then
2232: LD_VAR 0 8
2236: NOT
2237: IFFALSE 2241
// exit ;
2239: GO 2699
// if in_unit then
2241: LD_VAR 0 11
2245: IFFALSE 2269
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2247: LD_ADDR_VAR 0 10
2251: PUSH
2252: LD_VAR 0 8
2256: PPUSH
2257: LD_VAR 0 11
2261: PPUSH
2262: CALL_OW 74
2266: ST_TO_ADDR
2267: GO 2289
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2269: LD_ADDR_VAR 0 10
2273: PUSH
2274: LD_VAR 0 8
2278: PPUSH
2279: LD_VAR 0 1
2283: PPUSH
2284: CALL_OW 74
2288: ST_TO_ADDR
// if not enemy then
2289: LD_VAR 0 10
2293: NOT
2294: IFFALSE 2298
// exit ;
2296: GO 2699
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2298: LD_VAR 0 11
2302: PUSH
2303: LD_VAR 0 11
2307: PPUSH
2308: LD_VAR 0 10
2312: PPUSH
2313: CALL_OW 296
2317: PUSH
2318: LD_INT 13
2320: GREATER
2321: AND
2322: PUSH
2323: LD_VAR 0 1
2327: PPUSH
2328: LD_VAR 0 10
2332: PPUSH
2333: CALL_OW 296
2337: PUSH
2338: LD_INT 12
2340: GREATER
2341: OR
2342: IFFALSE 2346
// exit ;
2344: GO 2699
// missile := [ 1 ] ;
2346: LD_ADDR_VAR 0 14
2350: PUSH
2351: LD_INT 1
2353: PUSH
2354: EMPTY
2355: LIST
2356: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2357: LD_VAR 0 9
2361: PPUSH
2362: LD_VAR 0 12
2366: PPUSH
2367: CALL_OW 325
2371: IFFALSE 2400
// missile := Replace ( missile , missile + 1 , 2 ) ;
2373: LD_ADDR_VAR 0 14
2377: PUSH
2378: LD_VAR 0 14
2382: PPUSH
2383: LD_VAR 0 14
2387: PUSH
2388: LD_INT 1
2390: PLUS
2391: PPUSH
2392: LD_INT 2
2394: PPUSH
2395: CALL_OW 1
2399: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2400: LD_VAR 0 9
2404: PPUSH
2405: LD_VAR 0 13
2409: PPUSH
2410: CALL_OW 325
2414: PUSH
2415: LD_VAR 0 10
2419: PPUSH
2420: CALL_OW 255
2424: PPUSH
2425: LD_VAR 0 13
2429: PPUSH
2430: CALL_OW 325
2434: NOT
2435: AND
2436: IFFALSE 2465
// missile := Replace ( missile , missile + 1 , 3 ) ;
2438: LD_ADDR_VAR 0 14
2442: PUSH
2443: LD_VAR 0 14
2447: PPUSH
2448: LD_VAR 0 14
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: LD_INT 3
2459: PPUSH
2460: CALL_OW 1
2464: ST_TO_ADDR
// if missile < 2 then
2465: LD_VAR 0 14
2469: PUSH
2470: LD_INT 2
2472: LESS
2473: IFFALSE 2477
// exit ;
2475: GO 2699
// x := GetX ( enemy ) ;
2477: LD_ADDR_VAR 0 4
2481: PUSH
2482: LD_VAR 0 10
2486: PPUSH
2487: CALL_OW 250
2491: ST_TO_ADDR
// y := GetY ( enemy ) ;
2492: LD_ADDR_VAR 0 5
2496: PUSH
2497: LD_VAR 0 10
2501: PPUSH
2502: CALL_OW 251
2506: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2507: LD_ADDR_VAR 0 6
2511: PUSH
2512: LD_VAR 0 4
2516: PUSH
2517: LD_INT 1
2519: NEG
2520: PPUSH
2521: LD_INT 1
2523: PPUSH
2524: CALL_OW 12
2528: PLUS
2529: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2530: LD_ADDR_VAR 0 7
2534: PUSH
2535: LD_VAR 0 5
2539: PUSH
2540: LD_INT 1
2542: NEG
2543: PPUSH
2544: LD_INT 1
2546: PPUSH
2547: CALL_OW 12
2551: PLUS
2552: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2553: LD_VAR 0 6
2557: PPUSH
2558: LD_VAR 0 7
2562: PPUSH
2563: CALL_OW 488
2567: NOT
2568: IFFALSE 2590
// begin _x := x ;
2570: LD_ADDR_VAR 0 6
2574: PUSH
2575: LD_VAR 0 4
2579: ST_TO_ADDR
// _y := y ;
2580: LD_ADDR_VAR 0 7
2584: PUSH
2585: LD_VAR 0 5
2589: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2590: LD_ADDR_VAR 0 3
2594: PUSH
2595: LD_INT 1
2597: PPUSH
2598: LD_VAR 0 14
2602: PPUSH
2603: CALL_OW 12
2607: ST_TO_ADDR
// case i of 1 :
2608: LD_VAR 0 3
2612: PUSH
2613: LD_INT 1
2615: DOUBLE
2616: EQUAL
2617: IFTRUE 2621
2619: GO 2638
2621: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2622: LD_VAR 0 1
2626: PPUSH
2627: LD_VAR 0 10
2631: PPUSH
2632: CALL_OW 115
2636: GO 2699
2638: LD_INT 2
2640: DOUBLE
2641: EQUAL
2642: IFTRUE 2646
2644: GO 2668
2646: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2647: LD_VAR 0 1
2651: PPUSH
2652: LD_VAR 0 6
2656: PPUSH
2657: LD_VAR 0 7
2661: PPUSH
2662: CALL_OW 153
2666: GO 2699
2668: LD_INT 3
2670: DOUBLE
2671: EQUAL
2672: IFTRUE 2676
2674: GO 2698
2676: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2677: LD_VAR 0 1
2681: PPUSH
2682: LD_VAR 0 6
2686: PPUSH
2687: LD_VAR 0 7
2691: PPUSH
2692: CALL_OW 154
2696: GO 2699
2698: POP
// end ;
2699: LD_VAR 0 2
2703: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2704: LD_INT 0
2706: PPUSH
2707: PPUSH
2708: PPUSH
2709: PPUSH
2710: PPUSH
2711: PPUSH
// if not unit or not building then
2712: LD_VAR 0 1
2716: NOT
2717: PUSH
2718: LD_VAR 0 2
2722: NOT
2723: OR
2724: IFFALSE 2728
// exit ;
2726: GO 2886
// x := GetX ( building ) ;
2728: LD_ADDR_VAR 0 5
2732: PUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: CALL_OW 250
2742: ST_TO_ADDR
// y := GetY ( building ) ;
2743: LD_ADDR_VAR 0 6
2747: PUSH
2748: LD_VAR 0 2
2752: PPUSH
2753: CALL_OW 251
2757: ST_TO_ADDR
// for i = 0 to 5 do
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: DOUBLE
2764: LD_INT 0
2766: DEC
2767: ST_TO_ADDR
2768: LD_INT 5
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2884
// begin _x := ShiftX ( x , i , 3 ) ;
2774: LD_ADDR_VAR 0 7
2778: PUSH
2779: LD_VAR 0 5
2783: PPUSH
2784: LD_VAR 0 4
2788: PPUSH
2789: LD_INT 3
2791: PPUSH
2792: CALL_OW 272
2796: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2797: LD_ADDR_VAR 0 8
2801: PUSH
2802: LD_VAR 0 6
2806: PPUSH
2807: LD_VAR 0 4
2811: PPUSH
2812: LD_INT 3
2814: PPUSH
2815: CALL_OW 273
2819: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2820: LD_VAR 0 7
2824: PPUSH
2825: LD_VAR 0 8
2829: PPUSH
2830: CALL_OW 488
2834: NOT
2835: IFFALSE 2839
// continue ;
2837: GO 2771
// if HexInfo ( _x , _y ) = 0 then
2839: LD_VAR 0 7
2843: PPUSH
2844: LD_VAR 0 8
2848: PPUSH
2849: CALL_OW 428
2853: PUSH
2854: LD_INT 0
2856: EQUAL
2857: IFFALSE 2882
// begin ComMoveXY ( unit , _x , _y ) ;
2859: LD_VAR 0 1
2863: PPUSH
2864: LD_VAR 0 7
2868: PPUSH
2869: LD_VAR 0 8
2873: PPUSH
2874: CALL_OW 111
// exit ;
2878: POP
2879: POP
2880: GO 2886
// end ; end ;
2882: GO 2771
2884: POP
2885: POP
// end ;
2886: LD_VAR 0 3
2890: RET
// export function ScanBase ( side , base_area ) ; begin
2891: LD_INT 0
2893: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_VAR 0 2
2903: PPUSH
2904: LD_INT 81
2906: PUSH
2907: LD_VAR 0 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PPUSH
2916: CALL_OW 70
2920: ST_TO_ADDR
// end ;
2921: LD_VAR 0 3
2925: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2926: LD_INT 0
2928: PPUSH
2929: PPUSH
2930: PPUSH
2931: PPUSH
// result := false ;
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: LD_INT 0
2939: ST_TO_ADDR
// side := GetSide ( unit ) ;
2940: LD_ADDR_VAR 0 3
2944: PUSH
2945: LD_VAR 0 1
2949: PPUSH
2950: CALL_OW 255
2954: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2955: LD_ADDR_VAR 0 4
2959: PUSH
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 248
2969: ST_TO_ADDR
// case nat of 1 :
2970: LD_VAR 0 4
2974: PUSH
2975: LD_INT 1
2977: DOUBLE
2978: EQUAL
2979: IFTRUE 2983
2981: GO 2994
2983: POP
// tech := tech_lassight ; 2 :
2984: LD_ADDR_VAR 0 5
2988: PUSH
2989: LD_INT 12
2991: ST_TO_ADDR
2992: GO 3033
2994: LD_INT 2
2996: DOUBLE
2997: EQUAL
2998: IFTRUE 3002
3000: GO 3013
3002: POP
// tech := tech_mortar ; 3 :
3003: LD_ADDR_VAR 0 5
3007: PUSH
3008: LD_INT 41
3010: ST_TO_ADDR
3011: GO 3033
3013: LD_INT 3
3015: DOUBLE
3016: EQUAL
3017: IFTRUE 3021
3019: GO 3032
3021: POP
// tech := tech_bazooka ; end ;
3022: LD_ADDR_VAR 0 5
3026: PUSH
3027: LD_INT 44
3029: ST_TO_ADDR
3030: GO 3033
3032: POP
// if Researched ( side , tech ) then
3033: LD_VAR 0 3
3037: PPUSH
3038: LD_VAR 0 5
3042: PPUSH
3043: CALL_OW 325
3047: IFFALSE 3074
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3049: LD_ADDR_VAR 0 2
3053: PUSH
3054: LD_INT 5
3056: PUSH
3057: LD_INT 8
3059: PUSH
3060: LD_INT 9
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: LIST
3067: PUSH
3068: LD_VAR 0 4
3072: ARRAY
3073: ST_TO_ADDR
// end ;
3074: LD_VAR 0 2
3078: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// if not mines then
3084: LD_VAR 0 2
3088: NOT
3089: IFFALSE 3093
// exit ;
3091: GO 3237
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3093: LD_ADDR_VAR 0 5
3097: PUSH
3098: LD_INT 81
3100: PUSH
3101: LD_VAR 0 1
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: PUSH
3110: LD_INT 3
3112: PUSH
3113: LD_INT 21
3115: PUSH
3116: LD_INT 3
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: ST_TO_ADDR
// for i in mines do
3136: LD_ADDR_VAR 0 4
3140: PUSH
3141: LD_VAR 0 2
3145: PUSH
3146: FOR_IN
3147: IFFALSE 3235
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3149: LD_VAR 0 4
3153: PUSH
3154: LD_INT 1
3156: ARRAY
3157: PPUSH
3158: LD_VAR 0 4
3162: PUSH
3163: LD_INT 2
3165: ARRAY
3166: PPUSH
3167: CALL_OW 458
3171: NOT
3172: IFFALSE 3176
// continue ;
3174: GO 3146
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3176: LD_VAR 0 4
3180: PUSH
3181: LD_INT 1
3183: ARRAY
3184: PPUSH
3185: LD_VAR 0 4
3189: PUSH
3190: LD_INT 2
3192: ARRAY
3193: PPUSH
3194: CALL_OW 428
3198: PUSH
3199: LD_VAR 0 5
3203: IN
3204: IFFALSE 3233
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3206: LD_VAR 0 4
3210: PUSH
3211: LD_INT 1
3213: ARRAY
3214: PPUSH
3215: LD_VAR 0 4
3219: PUSH
3220: LD_INT 2
3222: ARRAY
3223: PPUSH
3224: LD_VAR 0 1
3228: PPUSH
3229: CALL_OW 456
// end ;
3233: GO 3146
3235: POP
3236: POP
// end ;
3237: LD_VAR 0 3
3241: RET
// export function Count ( array ) ; begin
3242: LD_INT 0
3244: PPUSH
// result := array + 0 ;
3245: LD_ADDR_VAR 0 2
3249: PUSH
3250: LD_VAR 0 1
3254: PUSH
3255: LD_INT 0
3257: PLUS
3258: ST_TO_ADDR
// end ;
3259: LD_VAR 0 2
3263: RET
// export function IsEmpty ( building ) ; begin
3264: LD_INT 0
3266: PPUSH
// if not building then
3267: LD_VAR 0 1
3271: NOT
3272: IFFALSE 3276
// exit ;
3274: GO 3319
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3276: LD_ADDR_VAR 0 2
3280: PUSH
3281: LD_VAR 0 1
3285: PUSH
3286: LD_INT 22
3288: PUSH
3289: LD_VAR 0 1
3293: PPUSH
3294: CALL_OW 255
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: PUSH
3303: LD_INT 58
3305: PUSH
3306: EMPTY
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PPUSH
3313: CALL_OW 69
3317: IN
3318: ST_TO_ADDR
// end ;
3319: LD_VAR 0 2
3323: RET
// export function IsNotFull ( building ) ; var places ; begin
3324: LD_INT 0
3326: PPUSH
3327: PPUSH
// if not building then
3328: LD_VAR 0 1
3332: NOT
3333: IFFALSE 3337
// exit ;
3335: GO 3365
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: LD_VAR 0 1
3346: PPUSH
3347: LD_INT 3
3349: PUSH
3350: LD_INT 62
3352: PUSH
3353: EMPTY
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PPUSH
3360: CALL_OW 72
3364: ST_TO_ADDR
// end ;
3365: LD_VAR 0 2
3369: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3370: LD_INT 0
3372: PPUSH
3373: PPUSH
3374: PPUSH
3375: PPUSH
// tmp := [ ] ;
3376: LD_ADDR_VAR 0 3
3380: PUSH
3381: EMPTY
3382: ST_TO_ADDR
// list := [ ] ;
3383: LD_ADDR_VAR 0 5
3387: PUSH
3388: EMPTY
3389: ST_TO_ADDR
// for i = 16 to 25 do
3390: LD_ADDR_VAR 0 4
3394: PUSH
3395: DOUBLE
3396: LD_INT 16
3398: DEC
3399: ST_TO_ADDR
3400: LD_INT 25
3402: PUSH
3403: FOR_TO
3404: IFFALSE 3477
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3406: LD_ADDR_VAR 0 3
3410: PUSH
3411: LD_VAR 0 3
3415: PUSH
3416: LD_INT 22
3418: PUSH
3419: LD_VAR 0 1
3423: PPUSH
3424: CALL_OW 255
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: PUSH
3433: LD_INT 91
3435: PUSH
3436: LD_VAR 0 1
3440: PUSH
3441: LD_INT 6
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 30
3451: PUSH
3452: LD_VAR 0 4
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: LIST
3465: PUSH
3466: EMPTY
3467: LIST
3468: PPUSH
3469: CALL_OW 69
3473: ADD
3474: ST_TO_ADDR
3475: GO 3403
3477: POP
3478: POP
// for i = 1 to tmp do
3479: LD_ADDR_VAR 0 4
3483: PUSH
3484: DOUBLE
3485: LD_INT 1
3487: DEC
3488: ST_TO_ADDR
3489: LD_VAR 0 3
3493: PUSH
3494: FOR_TO
3495: IFFALSE 3583
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3497: LD_ADDR_VAR 0 5
3501: PUSH
3502: LD_VAR 0 5
3506: PUSH
3507: LD_VAR 0 3
3511: PUSH
3512: LD_VAR 0 4
3516: ARRAY
3517: PPUSH
3518: CALL_OW 266
3522: PUSH
3523: LD_VAR 0 3
3527: PUSH
3528: LD_VAR 0 4
3532: ARRAY
3533: PPUSH
3534: CALL_OW 250
3538: PUSH
3539: LD_VAR 0 3
3543: PUSH
3544: LD_VAR 0 4
3548: ARRAY
3549: PPUSH
3550: CALL_OW 251
3554: PUSH
3555: LD_VAR 0 3
3559: PUSH
3560: LD_VAR 0 4
3564: ARRAY
3565: PPUSH
3566: CALL_OW 254
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: PUSH
3577: EMPTY
3578: LIST
3579: ADD
3580: ST_TO_ADDR
3581: GO 3494
3583: POP
3584: POP
// result := list ;
3585: LD_ADDR_VAR 0 2
3589: PUSH
3590: LD_VAR 0 5
3594: ST_TO_ADDR
// end ;
3595: LD_VAR 0 2
3599: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3600: LD_INT 0
3602: PPUSH
3603: PPUSH
3604: PPUSH
3605: PPUSH
3606: PPUSH
3607: PPUSH
3608: PPUSH
// if not factory then
3609: LD_VAR 0 1
3613: NOT
3614: IFFALSE 3618
// exit ;
3616: GO 4211
// if control = control_apeman then
3618: LD_VAR 0 4
3622: PUSH
3623: LD_INT 5
3625: EQUAL
3626: IFFALSE 3735
// begin tmp := UnitsInside ( factory ) ;
3628: LD_ADDR_VAR 0 8
3632: PUSH
3633: LD_VAR 0 1
3637: PPUSH
3638: CALL_OW 313
3642: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3643: LD_VAR 0 8
3647: PPUSH
3648: LD_INT 25
3650: PUSH
3651: LD_INT 12
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: PPUSH
3658: CALL_OW 72
3662: NOT
3663: IFFALSE 3673
// control := control_manual ;
3665: LD_ADDR_VAR 0 4
3669: PUSH
3670: LD_INT 1
3672: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3673: LD_ADDR_VAR 0 8
3677: PUSH
3678: LD_VAR 0 1
3682: PPUSH
3683: CALL 3370 0 1
3687: ST_TO_ADDR
// if tmp then
3688: LD_VAR 0 8
3692: IFFALSE 3735
// begin for i in tmp do
3694: LD_ADDR_VAR 0 7
3698: PUSH
3699: LD_VAR 0 8
3703: PUSH
3704: FOR_IN
3705: IFFALSE 3733
// if i [ 1 ] = b_ext_radio then
3707: LD_VAR 0 7
3711: PUSH
3712: LD_INT 1
3714: ARRAY
3715: PUSH
3716: LD_INT 22
3718: EQUAL
3719: IFFALSE 3731
// begin control := control_remote ;
3721: LD_ADDR_VAR 0 4
3725: PUSH
3726: LD_INT 2
3728: ST_TO_ADDR
// break ;
3729: GO 3733
// end ;
3731: GO 3704
3733: POP
3734: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3735: LD_VAR 0 1
3739: PPUSH
3740: LD_VAR 0 2
3744: PPUSH
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_VAR 0 4
3754: PPUSH
3755: LD_VAR 0 5
3759: PPUSH
3760: CALL_OW 448
3764: IFFALSE 3799
// begin result := [ chassis , engine , control , weapon ] ;
3766: LD_ADDR_VAR 0 6
3770: PUSH
3771: LD_VAR 0 2
3775: PUSH
3776: LD_VAR 0 3
3780: PUSH
3781: LD_VAR 0 4
3785: PUSH
3786: LD_VAR 0 5
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: ST_TO_ADDR
// exit ;
3797: GO 4211
// end ; _chassis := AvailableChassisList ( factory ) ;
3799: LD_ADDR_VAR 0 9
3803: PUSH
3804: LD_VAR 0 1
3808: PPUSH
3809: CALL_OW 475
3813: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3814: LD_ADDR_VAR 0 11
3818: PUSH
3819: LD_VAR 0 1
3823: PPUSH
3824: CALL_OW 476
3828: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3829: LD_ADDR_VAR 0 12
3833: PUSH
3834: LD_VAR 0 1
3838: PPUSH
3839: CALL_OW 477
3843: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3844: LD_ADDR_VAR 0 10
3848: PUSH
3849: LD_VAR 0 1
3853: PPUSH
3854: CALL_OW 478
3858: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3859: LD_VAR 0 9
3863: NOT
3864: PUSH
3865: LD_VAR 0 11
3869: NOT
3870: OR
3871: PUSH
3872: LD_VAR 0 12
3876: NOT
3877: OR
3878: PUSH
3879: LD_VAR 0 10
3883: NOT
3884: OR
3885: IFFALSE 3920
// begin result := [ chassis , engine , control , weapon ] ;
3887: LD_ADDR_VAR 0 6
3891: PUSH
3892: LD_VAR 0 2
3896: PUSH
3897: LD_VAR 0 3
3901: PUSH
3902: LD_VAR 0 4
3906: PUSH
3907: LD_VAR 0 5
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: ST_TO_ADDR
// exit ;
3918: GO 4211
// end ; if not chassis in _chassis then
3920: LD_VAR 0 2
3924: PUSH
3925: LD_VAR 0 9
3929: IN
3930: NOT
3931: IFFALSE 3957
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3933: LD_ADDR_VAR 0 2
3937: PUSH
3938: LD_VAR 0 9
3942: PUSH
3943: LD_INT 1
3945: PPUSH
3946: LD_VAR 0 9
3950: PPUSH
3951: CALL_OW 12
3955: ARRAY
3956: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3957: LD_VAR 0 2
3961: PPUSH
3962: LD_VAR 0 3
3966: PPUSH
3967: CALL 4216 0 2
3971: NOT
3972: IFFALSE 4031
// repeat engine := _engine [ 1 ] ;
3974: LD_ADDR_VAR 0 3
3978: PUSH
3979: LD_VAR 0 11
3983: PUSH
3984: LD_INT 1
3986: ARRAY
3987: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3988: LD_ADDR_VAR 0 11
3992: PUSH
3993: LD_VAR 0 11
3997: PPUSH
3998: LD_INT 1
4000: PPUSH
4001: CALL_OW 3
4005: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4006: LD_VAR 0 2
4010: PPUSH
4011: LD_VAR 0 3
4015: PPUSH
4016: CALL 4216 0 2
4020: PUSH
4021: LD_VAR 0 11
4025: PUSH
4026: EMPTY
4027: EQUAL
4028: OR
4029: IFFALSE 3974
// if not control in _control then
4031: LD_VAR 0 4
4035: PUSH
4036: LD_VAR 0 12
4040: IN
4041: NOT
4042: IFFALSE 4068
// control := _control [ rand ( 1 , _control ) ] ;
4044: LD_ADDR_VAR 0 4
4048: PUSH
4049: LD_VAR 0 12
4053: PUSH
4054: LD_INT 1
4056: PPUSH
4057: LD_VAR 0 12
4061: PPUSH
4062: CALL_OW 12
4066: ARRAY
4067: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_VAR 0 5
4077: PPUSH
4078: CALL 4436 0 2
4082: NOT
4083: IFFALSE 4142
// repeat weapon := _weapon [ 1 ] ;
4085: LD_ADDR_VAR 0 5
4089: PUSH
4090: LD_VAR 0 10
4094: PUSH
4095: LD_INT 1
4097: ARRAY
4098: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4099: LD_ADDR_VAR 0 10
4103: PUSH
4104: LD_VAR 0 10
4108: PPUSH
4109: LD_INT 1
4111: PPUSH
4112: CALL_OW 3
4116: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4117: LD_VAR 0 2
4121: PPUSH
4122: LD_VAR 0 5
4126: PPUSH
4127: CALL 4436 0 2
4131: PUSH
4132: LD_VAR 0 10
4136: PUSH
4137: EMPTY
4138: EQUAL
4139: OR
4140: IFFALSE 4085
// result := [ ] ;
4142: LD_ADDR_VAR 0 6
4146: PUSH
4147: EMPTY
4148: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4149: LD_VAR 0 1
4153: PPUSH
4154: LD_VAR 0 2
4158: PPUSH
4159: LD_VAR 0 3
4163: PPUSH
4164: LD_VAR 0 4
4168: PPUSH
4169: LD_VAR 0 5
4173: PPUSH
4174: CALL_OW 448
4178: IFFALSE 4211
// result := [ chassis , engine , control , weapon ] ;
4180: LD_ADDR_VAR 0 6
4184: PUSH
4185: LD_VAR 0 2
4189: PUSH
4190: LD_VAR 0 3
4194: PUSH
4195: LD_VAR 0 4
4199: PUSH
4200: LD_VAR 0 5
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: ST_TO_ADDR
// end ;
4211: LD_VAR 0 6
4215: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4216: LD_INT 0
4218: PPUSH
// if not chassis or not engine then
4219: LD_VAR 0 1
4223: NOT
4224: PUSH
4225: LD_VAR 0 2
4229: NOT
4230: OR
4231: IFFALSE 4235
// exit ;
4233: GO 4431
// case engine of engine_solar :
4235: LD_VAR 0 2
4239: PUSH
4240: LD_INT 2
4242: DOUBLE
4243: EQUAL
4244: IFTRUE 4248
4246: GO 4286
4248: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4249: LD_ADDR_VAR 0 3
4253: PUSH
4254: LD_INT 11
4256: PUSH
4257: LD_INT 12
4259: PUSH
4260: LD_INT 13
4262: PUSH
4263: LD_INT 14
4265: PUSH
4266: LD_INT 1
4268: PUSH
4269: LD_INT 2
4271: PUSH
4272: LD_INT 3
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: ST_TO_ADDR
4284: GO 4415
4286: LD_INT 1
4288: DOUBLE
4289: EQUAL
4290: IFTRUE 4294
4292: GO 4356
4294: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4295: LD_ADDR_VAR 0 3
4299: PUSH
4300: LD_INT 11
4302: PUSH
4303: LD_INT 12
4305: PUSH
4306: LD_INT 13
4308: PUSH
4309: LD_INT 14
4311: PUSH
4312: LD_INT 1
4314: PUSH
4315: LD_INT 2
4317: PUSH
4318: LD_INT 3
4320: PUSH
4321: LD_INT 4
4323: PUSH
4324: LD_INT 5
4326: PUSH
4327: LD_INT 21
4329: PUSH
4330: LD_INT 23
4332: PUSH
4333: LD_INT 22
4335: PUSH
4336: LD_INT 24
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: ST_TO_ADDR
4354: GO 4415
4356: LD_INT 3
4358: DOUBLE
4359: EQUAL
4360: IFTRUE 4364
4362: GO 4414
4364: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4365: LD_ADDR_VAR 0 3
4369: PUSH
4370: LD_INT 13
4372: PUSH
4373: LD_INT 14
4375: PUSH
4376: LD_INT 2
4378: PUSH
4379: LD_INT 3
4381: PUSH
4382: LD_INT 4
4384: PUSH
4385: LD_INT 5
4387: PUSH
4388: LD_INT 21
4390: PUSH
4391: LD_INT 22
4393: PUSH
4394: LD_INT 23
4396: PUSH
4397: LD_INT 24
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: ST_TO_ADDR
4412: GO 4415
4414: POP
// result := ( chassis in result ) ;
4415: LD_ADDR_VAR 0 3
4419: PUSH
4420: LD_VAR 0 1
4424: PUSH
4425: LD_VAR 0 3
4429: IN
4430: ST_TO_ADDR
// end ;
4431: LD_VAR 0 3
4435: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4436: LD_INT 0
4438: PPUSH
// if not chassis or not weapon then
4439: LD_VAR 0 1
4443: NOT
4444: PUSH
4445: LD_VAR 0 2
4449: NOT
4450: OR
4451: IFFALSE 4455
// exit ;
4453: GO 5515
// case weapon of us_machine_gun :
4455: LD_VAR 0 2
4459: PUSH
4460: LD_INT 2
4462: DOUBLE
4463: EQUAL
4464: IFTRUE 4468
4466: GO 4498
4468: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4469: LD_ADDR_VAR 0 3
4473: PUSH
4474: LD_INT 1
4476: PUSH
4477: LD_INT 2
4479: PUSH
4480: LD_INT 3
4482: PUSH
4483: LD_INT 4
4485: PUSH
4486: LD_INT 5
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
4496: GO 5499
4498: LD_INT 3
4500: DOUBLE
4501: EQUAL
4502: IFTRUE 4506
4504: GO 4536
4506: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4507: LD_ADDR_VAR 0 3
4511: PUSH
4512: LD_INT 1
4514: PUSH
4515: LD_INT 2
4517: PUSH
4518: LD_INT 3
4520: PUSH
4521: LD_INT 4
4523: PUSH
4524: LD_INT 5
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: ST_TO_ADDR
4534: GO 5499
4536: LD_INT 11
4538: DOUBLE
4539: EQUAL
4540: IFTRUE 4544
4542: GO 4574
4544: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4545: LD_ADDR_VAR 0 3
4549: PUSH
4550: LD_INT 1
4552: PUSH
4553: LD_INT 2
4555: PUSH
4556: LD_INT 3
4558: PUSH
4559: LD_INT 4
4561: PUSH
4562: LD_INT 5
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: ST_TO_ADDR
4572: GO 5499
4574: LD_INT 4
4576: DOUBLE
4577: EQUAL
4578: IFTRUE 4582
4580: GO 4608
4582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4583: LD_ADDR_VAR 0 3
4587: PUSH
4588: LD_INT 2
4590: PUSH
4591: LD_INT 3
4593: PUSH
4594: LD_INT 4
4596: PUSH
4597: LD_INT 5
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: ST_TO_ADDR
4606: GO 5499
4608: LD_INT 5
4610: DOUBLE
4611: EQUAL
4612: IFTRUE 4616
4614: GO 4642
4616: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: LD_INT 2
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: LD_INT 4
4630: PUSH
4631: LD_INT 5
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
4640: GO 5499
4642: LD_INT 9
4644: DOUBLE
4645: EQUAL
4646: IFTRUE 4650
4648: GO 4676
4650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: LD_INT 2
4658: PUSH
4659: LD_INT 3
4661: PUSH
4662: LD_INT 4
4664: PUSH
4665: LD_INT 5
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: ST_TO_ADDR
4674: GO 5499
4676: LD_INT 7
4678: DOUBLE
4679: EQUAL
4680: IFTRUE 4684
4682: GO 4710
4684: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4685: LD_ADDR_VAR 0 3
4689: PUSH
4690: LD_INT 2
4692: PUSH
4693: LD_INT 3
4695: PUSH
4696: LD_INT 4
4698: PUSH
4699: LD_INT 5
4701: PUSH
4702: EMPTY
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: ST_TO_ADDR
4708: GO 5499
4710: LD_INT 12
4712: DOUBLE
4713: EQUAL
4714: IFTRUE 4718
4716: GO 4744
4718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4719: LD_ADDR_VAR 0 3
4723: PUSH
4724: LD_INT 2
4726: PUSH
4727: LD_INT 3
4729: PUSH
4730: LD_INT 4
4732: PUSH
4733: LD_INT 5
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: ST_TO_ADDR
4742: GO 5499
4744: LD_INT 13
4746: DOUBLE
4747: EQUAL
4748: IFTRUE 4752
4750: GO 4778
4752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4753: LD_ADDR_VAR 0 3
4757: PUSH
4758: LD_INT 2
4760: PUSH
4761: LD_INT 3
4763: PUSH
4764: LD_INT 4
4766: PUSH
4767: LD_INT 5
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: ST_TO_ADDR
4776: GO 5499
4778: LD_INT 14
4780: DOUBLE
4781: EQUAL
4782: IFTRUE 4786
4784: GO 4804
4786: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4787: LD_ADDR_VAR 0 3
4791: PUSH
4792: LD_INT 4
4794: PUSH
4795: LD_INT 5
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: ST_TO_ADDR
4802: GO 5499
4804: LD_INT 6
4806: DOUBLE
4807: EQUAL
4808: IFTRUE 4812
4810: GO 4830
4812: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4813: LD_ADDR_VAR 0 3
4817: PUSH
4818: LD_INT 4
4820: PUSH
4821: LD_INT 5
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: ST_TO_ADDR
4828: GO 5499
4830: LD_INT 10
4832: DOUBLE
4833: EQUAL
4834: IFTRUE 4838
4836: GO 4856
4838: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4839: LD_ADDR_VAR 0 3
4843: PUSH
4844: LD_INT 4
4846: PUSH
4847: LD_INT 5
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: ST_TO_ADDR
4854: GO 5499
4856: LD_INT 22
4858: DOUBLE
4859: EQUAL
4860: IFTRUE 4864
4862: GO 4890
4864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4865: LD_ADDR_VAR 0 3
4869: PUSH
4870: LD_INT 11
4872: PUSH
4873: LD_INT 12
4875: PUSH
4876: LD_INT 13
4878: PUSH
4879: LD_INT 14
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: ST_TO_ADDR
4888: GO 5499
4890: LD_INT 23
4892: DOUBLE
4893: EQUAL
4894: IFTRUE 4898
4896: GO 4924
4898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4899: LD_ADDR_VAR 0 3
4903: PUSH
4904: LD_INT 11
4906: PUSH
4907: LD_INT 12
4909: PUSH
4910: LD_INT 13
4912: PUSH
4913: LD_INT 14
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: ST_TO_ADDR
4922: GO 5499
4924: LD_INT 24
4926: DOUBLE
4927: EQUAL
4928: IFTRUE 4932
4930: GO 4958
4932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4933: LD_ADDR_VAR 0 3
4937: PUSH
4938: LD_INT 11
4940: PUSH
4941: LD_INT 12
4943: PUSH
4944: LD_INT 13
4946: PUSH
4947: LD_INT 14
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: ST_TO_ADDR
4956: GO 5499
4958: LD_INT 30
4960: DOUBLE
4961: EQUAL
4962: IFTRUE 4966
4964: GO 4992
4966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4967: LD_ADDR_VAR 0 3
4971: PUSH
4972: LD_INT 11
4974: PUSH
4975: LD_INT 12
4977: PUSH
4978: LD_INT 13
4980: PUSH
4981: LD_INT 14
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: ST_TO_ADDR
4990: GO 5499
4992: LD_INT 25
4994: DOUBLE
4995: EQUAL
4996: IFTRUE 5000
4998: GO 5018
5000: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5001: LD_ADDR_VAR 0 3
5005: PUSH
5006: LD_INT 13
5008: PUSH
5009: LD_INT 14
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: ST_TO_ADDR
5016: GO 5499
5018: LD_INT 27
5020: DOUBLE
5021: EQUAL
5022: IFTRUE 5026
5024: GO 5044
5026: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5027: LD_ADDR_VAR 0 3
5031: PUSH
5032: LD_INT 13
5034: PUSH
5035: LD_INT 14
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: ST_TO_ADDR
5042: GO 5499
5044: LD_INT 92
5046: DOUBLE
5047: EQUAL
5048: IFTRUE 5052
5050: GO 5078
5052: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5053: LD_ADDR_VAR 0 3
5057: PUSH
5058: LD_INT 11
5060: PUSH
5061: LD_INT 12
5063: PUSH
5064: LD_INT 13
5066: PUSH
5067: LD_INT 14
5069: PUSH
5070: EMPTY
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: ST_TO_ADDR
5076: GO 5499
5078: LD_INT 28
5080: DOUBLE
5081: EQUAL
5082: IFTRUE 5086
5084: GO 5104
5086: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5087: LD_ADDR_VAR 0 3
5091: PUSH
5092: LD_INT 13
5094: PUSH
5095: LD_INT 14
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: ST_TO_ADDR
5102: GO 5499
5104: LD_INT 29
5106: DOUBLE
5107: EQUAL
5108: IFTRUE 5112
5110: GO 5130
5112: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5113: LD_ADDR_VAR 0 3
5117: PUSH
5118: LD_INT 13
5120: PUSH
5121: LD_INT 14
5123: PUSH
5124: EMPTY
5125: LIST
5126: LIST
5127: ST_TO_ADDR
5128: GO 5499
5130: LD_INT 31
5132: DOUBLE
5133: EQUAL
5134: IFTRUE 5138
5136: GO 5156
5138: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5139: LD_ADDR_VAR 0 3
5143: PUSH
5144: LD_INT 13
5146: PUSH
5147: LD_INT 14
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: ST_TO_ADDR
5154: GO 5499
5156: LD_INT 26
5158: DOUBLE
5159: EQUAL
5160: IFTRUE 5164
5162: GO 5182
5164: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5165: LD_ADDR_VAR 0 3
5169: PUSH
5170: LD_INT 13
5172: PUSH
5173: LD_INT 14
5175: PUSH
5176: EMPTY
5177: LIST
5178: LIST
5179: ST_TO_ADDR
5180: GO 5499
5182: LD_INT 42
5184: DOUBLE
5185: EQUAL
5186: IFTRUE 5190
5188: GO 5216
5190: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5191: LD_ADDR_VAR 0 3
5195: PUSH
5196: LD_INT 21
5198: PUSH
5199: LD_INT 22
5201: PUSH
5202: LD_INT 23
5204: PUSH
5205: LD_INT 24
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: ST_TO_ADDR
5214: GO 5499
5216: LD_INT 43
5218: DOUBLE
5219: EQUAL
5220: IFTRUE 5224
5222: GO 5250
5224: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: LD_INT 21
5232: PUSH
5233: LD_INT 22
5235: PUSH
5236: LD_INT 23
5238: PUSH
5239: LD_INT 24
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: ST_TO_ADDR
5248: GO 5499
5250: LD_INT 44
5252: DOUBLE
5253: EQUAL
5254: IFTRUE 5258
5256: GO 5284
5258: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5259: LD_ADDR_VAR 0 3
5263: PUSH
5264: LD_INT 21
5266: PUSH
5267: LD_INT 22
5269: PUSH
5270: LD_INT 23
5272: PUSH
5273: LD_INT 24
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: ST_TO_ADDR
5282: GO 5499
5284: LD_INT 45
5286: DOUBLE
5287: EQUAL
5288: IFTRUE 5292
5290: GO 5318
5292: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5293: LD_ADDR_VAR 0 3
5297: PUSH
5298: LD_INT 21
5300: PUSH
5301: LD_INT 22
5303: PUSH
5304: LD_INT 23
5306: PUSH
5307: LD_INT 24
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: ST_TO_ADDR
5316: GO 5499
5318: LD_INT 49
5320: DOUBLE
5321: EQUAL
5322: IFTRUE 5326
5324: GO 5352
5326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5327: LD_ADDR_VAR 0 3
5331: PUSH
5332: LD_INT 21
5334: PUSH
5335: LD_INT 22
5337: PUSH
5338: LD_INT 23
5340: PUSH
5341: LD_INT 24
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: ST_TO_ADDR
5350: GO 5499
5352: LD_INT 51
5354: DOUBLE
5355: EQUAL
5356: IFTRUE 5360
5358: GO 5386
5360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5361: LD_ADDR_VAR 0 3
5365: PUSH
5366: LD_INT 21
5368: PUSH
5369: LD_INT 22
5371: PUSH
5372: LD_INT 23
5374: PUSH
5375: LD_INT 24
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: ST_TO_ADDR
5384: GO 5499
5386: LD_INT 52
5388: DOUBLE
5389: EQUAL
5390: IFTRUE 5394
5392: GO 5420
5394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5395: LD_ADDR_VAR 0 3
5399: PUSH
5400: LD_INT 21
5402: PUSH
5403: LD_INT 22
5405: PUSH
5406: LD_INT 23
5408: PUSH
5409: LD_INT 24
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: ST_TO_ADDR
5418: GO 5499
5420: LD_INT 53
5422: DOUBLE
5423: EQUAL
5424: IFTRUE 5428
5426: GO 5446
5428: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5429: LD_ADDR_VAR 0 3
5433: PUSH
5434: LD_INT 23
5436: PUSH
5437: LD_INT 24
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: ST_TO_ADDR
5444: GO 5499
5446: LD_INT 46
5448: DOUBLE
5449: EQUAL
5450: IFTRUE 5454
5452: GO 5472
5454: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5455: LD_ADDR_VAR 0 3
5459: PUSH
5460: LD_INT 23
5462: PUSH
5463: LD_INT 24
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: ST_TO_ADDR
5470: GO 5499
5472: LD_INT 47
5474: DOUBLE
5475: EQUAL
5476: IFTRUE 5480
5478: GO 5498
5480: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5481: LD_ADDR_VAR 0 3
5485: PUSH
5486: LD_INT 23
5488: PUSH
5489: LD_INT 24
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: ST_TO_ADDR
5496: GO 5499
5498: POP
// result := ( chassis in result ) ;
5499: LD_ADDR_VAR 0 3
5503: PUSH
5504: LD_VAR 0 1
5508: PUSH
5509: LD_VAR 0 3
5513: IN
5514: ST_TO_ADDR
// end ;
5515: LD_VAR 0 3
5519: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5520: LD_INT 0
5522: PPUSH
5523: PPUSH
5524: PPUSH
5525: PPUSH
5526: PPUSH
5527: PPUSH
5528: PPUSH
// result := array ;
5529: LD_ADDR_VAR 0 5
5533: PUSH
5534: LD_VAR 0 1
5538: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5539: LD_VAR 0 1
5543: NOT
5544: PUSH
5545: LD_VAR 0 2
5549: NOT
5550: OR
5551: PUSH
5552: LD_VAR 0 3
5556: NOT
5557: OR
5558: PUSH
5559: LD_VAR 0 2
5563: PUSH
5564: LD_VAR 0 1
5568: GREATER
5569: OR
5570: PUSH
5571: LD_VAR 0 3
5575: PUSH
5576: LD_VAR 0 1
5580: GREATER
5581: OR
5582: IFFALSE 5586
// exit ;
5584: GO 5882
// if direction then
5586: LD_VAR 0 4
5590: IFFALSE 5654
// begin d := 1 ;
5592: LD_ADDR_VAR 0 9
5596: PUSH
5597: LD_INT 1
5599: ST_TO_ADDR
// if i_from > i_to then
5600: LD_VAR 0 2
5604: PUSH
5605: LD_VAR 0 3
5609: GREATER
5610: IFFALSE 5636
// length := ( array - i_from ) + i_to else
5612: LD_ADDR_VAR 0 11
5616: PUSH
5617: LD_VAR 0 1
5621: PUSH
5622: LD_VAR 0 2
5626: MINUS
5627: PUSH
5628: LD_VAR 0 3
5632: PLUS
5633: ST_TO_ADDR
5634: GO 5652
// length := i_to - i_from ;
5636: LD_ADDR_VAR 0 11
5640: PUSH
5641: LD_VAR 0 3
5645: PUSH
5646: LD_VAR 0 2
5650: MINUS
5651: ST_TO_ADDR
// end else
5652: GO 5715
// begin d := - 1 ;
5654: LD_ADDR_VAR 0 9
5658: PUSH
5659: LD_INT 1
5661: NEG
5662: ST_TO_ADDR
// if i_from > i_to then
5663: LD_VAR 0 2
5667: PUSH
5668: LD_VAR 0 3
5672: GREATER
5673: IFFALSE 5693
// length := i_from - i_to else
5675: LD_ADDR_VAR 0 11
5679: PUSH
5680: LD_VAR 0 2
5684: PUSH
5685: LD_VAR 0 3
5689: MINUS
5690: ST_TO_ADDR
5691: GO 5715
// length := ( array - i_to ) + i_from ;
5693: LD_ADDR_VAR 0 11
5697: PUSH
5698: LD_VAR 0 1
5702: PUSH
5703: LD_VAR 0 3
5707: MINUS
5708: PUSH
5709: LD_VAR 0 2
5713: PLUS
5714: ST_TO_ADDR
// end ; if not length then
5715: LD_VAR 0 11
5719: NOT
5720: IFFALSE 5724
// exit ;
5722: GO 5882
// tmp := array ;
5724: LD_ADDR_VAR 0 10
5728: PUSH
5729: LD_VAR 0 1
5733: ST_TO_ADDR
// for i = 1 to length do
5734: LD_ADDR_VAR 0 6
5738: PUSH
5739: DOUBLE
5740: LD_INT 1
5742: DEC
5743: ST_TO_ADDR
5744: LD_VAR 0 11
5748: PUSH
5749: FOR_TO
5750: IFFALSE 5870
// begin for j = 1 to array do
5752: LD_ADDR_VAR 0 7
5756: PUSH
5757: DOUBLE
5758: LD_INT 1
5760: DEC
5761: ST_TO_ADDR
5762: LD_VAR 0 1
5766: PUSH
5767: FOR_TO
5768: IFFALSE 5856
// begin k := j + d ;
5770: LD_ADDR_VAR 0 8
5774: PUSH
5775: LD_VAR 0 7
5779: PUSH
5780: LD_VAR 0 9
5784: PLUS
5785: ST_TO_ADDR
// if k > array then
5786: LD_VAR 0 8
5790: PUSH
5791: LD_VAR 0 1
5795: GREATER
5796: IFFALSE 5806
// k := 1 ;
5798: LD_ADDR_VAR 0 8
5802: PUSH
5803: LD_INT 1
5805: ST_TO_ADDR
// if not k then
5806: LD_VAR 0 8
5810: NOT
5811: IFFALSE 5823
// k := array ;
5813: LD_ADDR_VAR 0 8
5817: PUSH
5818: LD_VAR 0 1
5822: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5823: LD_ADDR_VAR 0 10
5827: PUSH
5828: LD_VAR 0 10
5832: PPUSH
5833: LD_VAR 0 8
5837: PPUSH
5838: LD_VAR 0 1
5842: PUSH
5843: LD_VAR 0 7
5847: ARRAY
5848: PPUSH
5849: CALL_OW 1
5853: ST_TO_ADDR
// end ;
5854: GO 5767
5856: POP
5857: POP
// array := tmp ;
5858: LD_ADDR_VAR 0 1
5862: PUSH
5863: LD_VAR 0 10
5867: ST_TO_ADDR
// end ;
5868: GO 5749
5870: POP
5871: POP
// result := array ;
5872: LD_ADDR_VAR 0 5
5876: PUSH
5877: LD_VAR 0 1
5881: ST_TO_ADDR
// end ;
5882: LD_VAR 0 5
5886: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5887: LD_INT 0
5889: PPUSH
5890: PPUSH
// result := 0 ;
5891: LD_ADDR_VAR 0 3
5895: PUSH
5896: LD_INT 0
5898: ST_TO_ADDR
// if not array or not value in array then
5899: LD_VAR 0 1
5903: NOT
5904: PUSH
5905: LD_VAR 0 2
5909: PUSH
5910: LD_VAR 0 1
5914: IN
5915: NOT
5916: OR
5917: IFFALSE 5921
// exit ;
5919: GO 5975
// for i = 1 to array do
5921: LD_ADDR_VAR 0 4
5925: PUSH
5926: DOUBLE
5927: LD_INT 1
5929: DEC
5930: ST_TO_ADDR
5931: LD_VAR 0 1
5935: PUSH
5936: FOR_TO
5937: IFFALSE 5973
// if value = array [ i ] then
5939: LD_VAR 0 2
5943: PUSH
5944: LD_VAR 0 1
5948: PUSH
5949: LD_VAR 0 4
5953: ARRAY
5954: EQUAL
5955: IFFALSE 5971
// begin result := i ;
5957: LD_ADDR_VAR 0 3
5961: PUSH
5962: LD_VAR 0 4
5966: ST_TO_ADDR
// exit ;
5967: POP
5968: POP
5969: GO 5975
// end ;
5971: GO 5936
5973: POP
5974: POP
// end ;
5975: LD_VAR 0 3
5979: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5980: LD_INT 0
5982: PPUSH
// vc_chassis := chassis ;
5983: LD_ADDR_OWVAR 37
5987: PUSH
5988: LD_VAR 0 1
5992: ST_TO_ADDR
// vc_engine := engine ;
5993: LD_ADDR_OWVAR 39
5997: PUSH
5998: LD_VAR 0 2
6002: ST_TO_ADDR
// vc_control := control ;
6003: LD_ADDR_OWVAR 38
6007: PUSH
6008: LD_VAR 0 3
6012: ST_TO_ADDR
// vc_weapon := weapon ;
6013: LD_ADDR_OWVAR 40
6017: PUSH
6018: LD_VAR 0 4
6022: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6023: LD_ADDR_OWVAR 41
6027: PUSH
6028: LD_VAR 0 5
6032: ST_TO_ADDR
// end ;
6033: LD_VAR 0 6
6037: RET
// export function WantPlant ( unit ) ; var task ; begin
6038: LD_INT 0
6040: PPUSH
6041: PPUSH
// result := false ;
6042: LD_ADDR_VAR 0 2
6046: PUSH
6047: LD_INT 0
6049: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6050: LD_ADDR_VAR 0 3
6054: PUSH
6055: LD_VAR 0 1
6059: PPUSH
6060: CALL_OW 437
6064: ST_TO_ADDR
// if task then
6065: LD_VAR 0 3
6069: IFFALSE 6097
// if task [ 1 ] [ 1 ] = p then
6071: LD_VAR 0 3
6075: PUSH
6076: LD_INT 1
6078: ARRAY
6079: PUSH
6080: LD_INT 1
6082: ARRAY
6083: PUSH
6084: LD_STRING p
6086: EQUAL
6087: IFFALSE 6097
// result := true ;
6089: LD_ADDR_VAR 0 2
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// end ;
6097: LD_VAR 0 2
6101: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6102: LD_INT 0
6104: PPUSH
6105: PPUSH
6106: PPUSH
6107: PPUSH
// if pos < 1 then
6108: LD_VAR 0 2
6112: PUSH
6113: LD_INT 1
6115: LESS
6116: IFFALSE 6120
// exit ;
6118: GO 6423
// if pos = 1 then
6120: LD_VAR 0 2
6124: PUSH
6125: LD_INT 1
6127: EQUAL
6128: IFFALSE 6161
// result := Replace ( arr , pos [ 1 ] , value ) else
6130: LD_ADDR_VAR 0 4
6134: PUSH
6135: LD_VAR 0 1
6139: PPUSH
6140: LD_VAR 0 2
6144: PUSH
6145: LD_INT 1
6147: ARRAY
6148: PPUSH
6149: LD_VAR 0 3
6153: PPUSH
6154: CALL_OW 1
6158: ST_TO_ADDR
6159: GO 6423
// begin tmp := arr ;
6161: LD_ADDR_VAR 0 6
6165: PUSH
6166: LD_VAR 0 1
6170: ST_TO_ADDR
// s_arr := [ tmp ] ;
6171: LD_ADDR_VAR 0 7
6175: PUSH
6176: LD_VAR 0 6
6180: PUSH
6181: EMPTY
6182: LIST
6183: ST_TO_ADDR
// for i = 1 to pos - 1 do
6184: LD_ADDR_VAR 0 5
6188: PUSH
6189: DOUBLE
6190: LD_INT 1
6192: DEC
6193: ST_TO_ADDR
6194: LD_VAR 0 2
6198: PUSH
6199: LD_INT 1
6201: MINUS
6202: PUSH
6203: FOR_TO
6204: IFFALSE 6249
// begin tmp := tmp [ pos [ i ] ] ;
6206: LD_ADDR_VAR 0 6
6210: PUSH
6211: LD_VAR 0 6
6215: PUSH
6216: LD_VAR 0 2
6220: PUSH
6221: LD_VAR 0 5
6225: ARRAY
6226: ARRAY
6227: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6228: LD_ADDR_VAR 0 7
6232: PUSH
6233: LD_VAR 0 7
6237: PUSH
6238: LD_VAR 0 6
6242: PUSH
6243: EMPTY
6244: LIST
6245: ADD
6246: ST_TO_ADDR
// end ;
6247: GO 6203
6249: POP
6250: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6251: LD_ADDR_VAR 0 6
6255: PUSH
6256: LD_VAR 0 6
6260: PPUSH
6261: LD_VAR 0 2
6265: PUSH
6266: LD_VAR 0 2
6270: ARRAY
6271: PPUSH
6272: LD_VAR 0 3
6276: PPUSH
6277: CALL_OW 1
6281: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6282: LD_ADDR_VAR 0 7
6286: PUSH
6287: LD_VAR 0 7
6291: PPUSH
6292: LD_VAR 0 7
6296: PPUSH
6297: LD_VAR 0 6
6301: PPUSH
6302: CALL_OW 1
6306: ST_TO_ADDR
// for i = s_arr downto 2 do
6307: LD_ADDR_VAR 0 5
6311: PUSH
6312: DOUBLE
6313: LD_VAR 0 7
6317: INC
6318: ST_TO_ADDR
6319: LD_INT 2
6321: PUSH
6322: FOR_DOWNTO
6323: IFFALSE 6407
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6325: LD_ADDR_VAR 0 6
6329: PUSH
6330: LD_VAR 0 7
6334: PUSH
6335: LD_VAR 0 5
6339: PUSH
6340: LD_INT 1
6342: MINUS
6343: ARRAY
6344: PPUSH
6345: LD_VAR 0 2
6349: PUSH
6350: LD_VAR 0 5
6354: PUSH
6355: LD_INT 1
6357: MINUS
6358: ARRAY
6359: PPUSH
6360: LD_VAR 0 7
6364: PUSH
6365: LD_VAR 0 5
6369: ARRAY
6370: PPUSH
6371: CALL_OW 1
6375: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6376: LD_ADDR_VAR 0 7
6380: PUSH
6381: LD_VAR 0 7
6385: PPUSH
6386: LD_VAR 0 5
6390: PUSH
6391: LD_INT 1
6393: MINUS
6394: PPUSH
6395: LD_VAR 0 6
6399: PPUSH
6400: CALL_OW 1
6404: ST_TO_ADDR
// end ;
6405: GO 6322
6407: POP
6408: POP
// result := s_arr [ 1 ] ;
6409: LD_ADDR_VAR 0 4
6413: PUSH
6414: LD_VAR 0 7
6418: PUSH
6419: LD_INT 1
6421: ARRAY
6422: ST_TO_ADDR
// end ; end ;
6423: LD_VAR 0 4
6427: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6428: LD_INT 0
6430: PPUSH
6431: PPUSH
// if not list then
6432: LD_VAR 0 1
6436: NOT
6437: IFFALSE 6441
// exit ;
6439: GO 6532
// i := list [ pos1 ] ;
6441: LD_ADDR_VAR 0 5
6445: PUSH
6446: LD_VAR 0 1
6450: PUSH
6451: LD_VAR 0 2
6455: ARRAY
6456: ST_TO_ADDR
// if not i then
6457: LD_VAR 0 5
6461: NOT
6462: IFFALSE 6466
// exit ;
6464: GO 6532
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6466: LD_ADDR_VAR 0 1
6470: PUSH
6471: LD_VAR 0 1
6475: PPUSH
6476: LD_VAR 0 2
6480: PPUSH
6481: LD_VAR 0 1
6485: PUSH
6486: LD_VAR 0 3
6490: ARRAY
6491: PPUSH
6492: CALL_OW 1
6496: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6497: LD_ADDR_VAR 0 1
6501: PUSH
6502: LD_VAR 0 1
6506: PPUSH
6507: LD_VAR 0 3
6511: PPUSH
6512: LD_VAR 0 5
6516: PPUSH
6517: CALL_OW 1
6521: ST_TO_ADDR
// result := list ;
6522: LD_ADDR_VAR 0 4
6526: PUSH
6527: LD_VAR 0 1
6531: ST_TO_ADDR
// end ;
6532: LD_VAR 0 4
6536: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6537: LD_INT 0
6539: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6540: LD_ADDR_VAR 0 5
6544: PUSH
6545: LD_VAR 0 1
6549: PPUSH
6550: CALL_OW 250
6554: PPUSH
6555: LD_VAR 0 1
6559: PPUSH
6560: CALL_OW 251
6564: PPUSH
6565: LD_VAR 0 2
6569: PPUSH
6570: LD_VAR 0 3
6574: PPUSH
6575: LD_VAR 0 4
6579: PPUSH
6580: CALL 6958 0 5
6584: ST_TO_ADDR
// end ;
6585: LD_VAR 0 5
6589: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6590: LD_INT 0
6592: PPUSH
6593: PPUSH
6594: PPUSH
6595: PPUSH
// if not list or not unit then
6596: LD_VAR 0 2
6600: NOT
6601: PUSH
6602: LD_VAR 0 1
6606: NOT
6607: OR
6608: IFFALSE 6612
// exit ;
6610: GO 6953
// result := [ ] ;
6612: LD_ADDR_VAR 0 5
6616: PUSH
6617: EMPTY
6618: ST_TO_ADDR
// for i in list do
6619: LD_ADDR_VAR 0 6
6623: PUSH
6624: LD_VAR 0 2
6628: PUSH
6629: FOR_IN
6630: IFFALSE 6848
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6632: LD_ADDR_VAR 0 8
6636: PUSH
6637: LD_VAR 0 1
6641: PPUSH
6642: LD_VAR 0 6
6646: PUSH
6647: LD_INT 1
6649: ARRAY
6650: PPUSH
6651: LD_VAR 0 6
6655: PUSH
6656: LD_INT 2
6658: ARRAY
6659: PPUSH
6660: CALL_OW 297
6664: ST_TO_ADDR
// if not Count ( result ) then
6665: LD_VAR 0 5
6669: PPUSH
6670: CALL 3242 0 1
6674: NOT
6675: IFFALSE 6708
// begin result := Join ( result , [ i , tmp ] ) ;
6677: LD_ADDR_VAR 0 5
6681: PUSH
6682: LD_VAR 0 5
6686: PPUSH
6687: LD_VAR 0 6
6691: PUSH
6692: LD_VAR 0 8
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: PPUSH
6701: CALL 38831 0 2
6705: ST_TO_ADDR
// continue ;
6706: GO 6629
// end ; if result [ result ] [ 2 ] <= tmp then
6708: LD_VAR 0 5
6712: PUSH
6713: LD_VAR 0 5
6717: ARRAY
6718: PUSH
6719: LD_INT 2
6721: ARRAY
6722: PUSH
6723: LD_VAR 0 8
6727: LESSEQUAL
6728: IFFALSE 6761
// result := Join ( result , [ i , tmp ] ) else
6730: LD_ADDR_VAR 0 5
6734: PUSH
6735: LD_VAR 0 5
6739: PPUSH
6740: LD_VAR 0 6
6744: PUSH
6745: LD_VAR 0 8
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: PPUSH
6754: CALL 38831 0 2
6758: ST_TO_ADDR
6759: GO 6846
// begin for j := 1 to Count ( result ) do
6761: LD_ADDR_VAR 0 7
6765: PUSH
6766: DOUBLE
6767: LD_INT 1
6769: DEC
6770: ST_TO_ADDR
6771: LD_VAR 0 5
6775: PPUSH
6776: CALL 3242 0 1
6780: PUSH
6781: FOR_TO
6782: IFFALSE 6844
// begin if tmp < result [ j ] [ 2 ] then
6784: LD_VAR 0 8
6788: PUSH
6789: LD_VAR 0 5
6793: PUSH
6794: LD_VAR 0 7
6798: ARRAY
6799: PUSH
6800: LD_INT 2
6802: ARRAY
6803: LESS
6804: IFFALSE 6842
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6806: LD_ADDR_VAR 0 5
6810: PUSH
6811: LD_VAR 0 5
6815: PPUSH
6816: LD_VAR 0 7
6820: PPUSH
6821: LD_VAR 0 6
6825: PUSH
6826: LD_VAR 0 8
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PPUSH
6835: CALL_OW 2
6839: ST_TO_ADDR
// break ;
6840: GO 6844
// end ; end ;
6842: GO 6781
6844: POP
6845: POP
// end ; end ;
6846: GO 6629
6848: POP
6849: POP
// if result and not asc then
6850: LD_VAR 0 5
6854: PUSH
6855: LD_VAR 0 3
6859: NOT
6860: AND
6861: IFFALSE 6878
// result := ReverseArray ( result ) ;
6863: LD_ADDR_VAR 0 5
6867: PUSH
6868: LD_VAR 0 5
6872: PPUSH
6873: CALL 34118 0 1
6877: ST_TO_ADDR
// tmp := [ ] ;
6878: LD_ADDR_VAR 0 8
6882: PUSH
6883: EMPTY
6884: ST_TO_ADDR
// if mode then
6885: LD_VAR 0 4
6889: IFFALSE 6953
// begin for i := 1 to result do
6891: LD_ADDR_VAR 0 6
6895: PUSH
6896: DOUBLE
6897: LD_INT 1
6899: DEC
6900: ST_TO_ADDR
6901: LD_VAR 0 5
6905: PUSH
6906: FOR_TO
6907: IFFALSE 6941
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
6909: LD_ADDR_VAR 0 8
6913: PUSH
6914: LD_VAR 0 8
6918: PPUSH
6919: LD_VAR 0 5
6923: PUSH
6924: LD_VAR 0 6
6928: ARRAY
6929: PUSH
6930: LD_INT 1
6932: ARRAY
6933: PPUSH
6934: CALL 38831 0 2
6938: ST_TO_ADDR
6939: GO 6906
6941: POP
6942: POP
// result := tmp ;
6943: LD_ADDR_VAR 0 5
6947: PUSH
6948: LD_VAR 0 8
6952: ST_TO_ADDR
// end ; end ;
6953: LD_VAR 0 5
6957: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6958: LD_INT 0
6960: PPUSH
6961: PPUSH
6962: PPUSH
6963: PPUSH
// if not list then
6964: LD_VAR 0 3
6968: NOT
6969: IFFALSE 6973
// exit ;
6971: GO 7361
// result := [ ] ;
6973: LD_ADDR_VAR 0 6
6977: PUSH
6978: EMPTY
6979: ST_TO_ADDR
// for i in list do
6980: LD_ADDR_VAR 0 7
6984: PUSH
6985: LD_VAR 0 3
6989: PUSH
6990: FOR_IN
6991: IFFALSE 7193
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6993: LD_ADDR_VAR 0 9
6997: PUSH
6998: LD_VAR 0 7
7002: PPUSH
7003: LD_VAR 0 1
7007: PPUSH
7008: LD_VAR 0 2
7012: PPUSH
7013: CALL_OW 297
7017: ST_TO_ADDR
// if not result then
7018: LD_VAR 0 6
7022: NOT
7023: IFFALSE 7049
// result := [ [ i , tmp ] ] else
7025: LD_ADDR_VAR 0 6
7029: PUSH
7030: LD_VAR 0 7
7034: PUSH
7035: LD_VAR 0 9
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: EMPTY
7045: LIST
7046: ST_TO_ADDR
7047: GO 7191
// begin if result [ result ] [ 2 ] < tmp then
7049: LD_VAR 0 6
7053: PUSH
7054: LD_VAR 0 6
7058: ARRAY
7059: PUSH
7060: LD_INT 2
7062: ARRAY
7063: PUSH
7064: LD_VAR 0 9
7068: LESS
7069: IFFALSE 7111
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7071: LD_ADDR_VAR 0 6
7075: PUSH
7076: LD_VAR 0 6
7080: PPUSH
7081: LD_VAR 0 6
7085: PUSH
7086: LD_INT 1
7088: PLUS
7089: PPUSH
7090: LD_VAR 0 7
7094: PUSH
7095: LD_VAR 0 9
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PPUSH
7104: CALL_OW 2
7108: ST_TO_ADDR
7109: GO 7191
// for j = 1 to result do
7111: LD_ADDR_VAR 0 8
7115: PUSH
7116: DOUBLE
7117: LD_INT 1
7119: DEC
7120: ST_TO_ADDR
7121: LD_VAR 0 6
7125: PUSH
7126: FOR_TO
7127: IFFALSE 7189
// begin if tmp < result [ j ] [ 2 ] then
7129: LD_VAR 0 9
7133: PUSH
7134: LD_VAR 0 6
7138: PUSH
7139: LD_VAR 0 8
7143: ARRAY
7144: PUSH
7145: LD_INT 2
7147: ARRAY
7148: LESS
7149: IFFALSE 7187
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7151: LD_ADDR_VAR 0 6
7155: PUSH
7156: LD_VAR 0 6
7160: PPUSH
7161: LD_VAR 0 8
7165: PPUSH
7166: LD_VAR 0 7
7170: PUSH
7171: LD_VAR 0 9
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PPUSH
7180: CALL_OW 2
7184: ST_TO_ADDR
// break ;
7185: GO 7189
// end ; end ;
7187: GO 7126
7189: POP
7190: POP
// end ; end ;
7191: GO 6990
7193: POP
7194: POP
// if result and not asc then
7195: LD_VAR 0 6
7199: PUSH
7200: LD_VAR 0 4
7204: NOT
7205: AND
7206: IFFALSE 7281
// begin tmp := result ;
7208: LD_ADDR_VAR 0 9
7212: PUSH
7213: LD_VAR 0 6
7217: ST_TO_ADDR
// for i = tmp downto 1 do
7218: LD_ADDR_VAR 0 7
7222: PUSH
7223: DOUBLE
7224: LD_VAR 0 9
7228: INC
7229: ST_TO_ADDR
7230: LD_INT 1
7232: PUSH
7233: FOR_DOWNTO
7234: IFFALSE 7279
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7236: LD_ADDR_VAR 0 6
7240: PUSH
7241: LD_VAR 0 6
7245: PPUSH
7246: LD_VAR 0 9
7250: PUSH
7251: LD_VAR 0 7
7255: MINUS
7256: PUSH
7257: LD_INT 1
7259: PLUS
7260: PPUSH
7261: LD_VAR 0 9
7265: PUSH
7266: LD_VAR 0 7
7270: ARRAY
7271: PPUSH
7272: CALL_OW 1
7276: ST_TO_ADDR
7277: GO 7233
7279: POP
7280: POP
// end ; tmp := [ ] ;
7281: LD_ADDR_VAR 0 9
7285: PUSH
7286: EMPTY
7287: ST_TO_ADDR
// if mode then
7288: LD_VAR 0 5
7292: IFFALSE 7361
// begin for i = 1 to result do
7294: LD_ADDR_VAR 0 7
7298: PUSH
7299: DOUBLE
7300: LD_INT 1
7302: DEC
7303: ST_TO_ADDR
7304: LD_VAR 0 6
7308: PUSH
7309: FOR_TO
7310: IFFALSE 7349
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7312: LD_ADDR_VAR 0 9
7316: PUSH
7317: LD_VAR 0 9
7321: PPUSH
7322: LD_VAR 0 7
7326: PPUSH
7327: LD_VAR 0 6
7331: PUSH
7332: LD_VAR 0 7
7336: ARRAY
7337: PUSH
7338: LD_INT 1
7340: ARRAY
7341: PPUSH
7342: CALL_OW 1
7346: ST_TO_ADDR
7347: GO 7309
7349: POP
7350: POP
// result := tmp ;
7351: LD_ADDR_VAR 0 6
7355: PUSH
7356: LD_VAR 0 9
7360: ST_TO_ADDR
// end ; end ;
7361: LD_VAR 0 6
7365: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7366: LD_INT 0
7368: PPUSH
7369: PPUSH
7370: PPUSH
7371: PPUSH
7372: PPUSH
7373: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7374: LD_ADDR_VAR 0 5
7378: PUSH
7379: LD_INT 0
7381: PUSH
7382: LD_INT 0
7384: PUSH
7385: LD_INT 0
7387: PUSH
7388: EMPTY
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: ST_TO_ADDR
// if not x or not y then
7396: LD_VAR 0 2
7400: NOT
7401: PUSH
7402: LD_VAR 0 3
7406: NOT
7407: OR
7408: IFFALSE 7412
// exit ;
7410: GO 9062
// if not range then
7412: LD_VAR 0 4
7416: NOT
7417: IFFALSE 7427
// range := 10 ;
7419: LD_ADDR_VAR 0 4
7423: PUSH
7424: LD_INT 10
7426: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7427: LD_ADDR_VAR 0 8
7431: PUSH
7432: LD_INT 81
7434: PUSH
7435: LD_VAR 0 1
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PUSH
7444: LD_INT 92
7446: PUSH
7447: LD_VAR 0 2
7451: PUSH
7452: LD_VAR 0 3
7456: PUSH
7457: LD_VAR 0 4
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: LD_INT 21
7473: PUSH
7474: LD_INT 3
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: LIST
7489: PPUSH
7490: CALL_OW 69
7494: ST_TO_ADDR
// if not tmp then
7495: LD_VAR 0 8
7499: NOT
7500: IFFALSE 7504
// exit ;
7502: GO 9062
// for i in tmp do
7504: LD_ADDR_VAR 0 6
7508: PUSH
7509: LD_VAR 0 8
7513: PUSH
7514: FOR_IN
7515: IFFALSE 9037
// begin points := [ 0 , 0 , 0 ] ;
7517: LD_ADDR_VAR 0 9
7521: PUSH
7522: LD_INT 0
7524: PUSH
7525: LD_INT 0
7527: PUSH
7528: LD_INT 0
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: LIST
7535: ST_TO_ADDR
// bpoints := 1 ;
7536: LD_ADDR_VAR 0 10
7540: PUSH
7541: LD_INT 1
7543: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7544: LD_VAR 0 6
7548: PPUSH
7549: CALL_OW 247
7553: PUSH
7554: LD_INT 1
7556: DOUBLE
7557: EQUAL
7558: IFTRUE 7562
7560: GO 8140
7562: POP
// begin if GetClass ( i ) = 1 then
7563: LD_VAR 0 6
7567: PPUSH
7568: CALL_OW 257
7572: PUSH
7573: LD_INT 1
7575: EQUAL
7576: IFFALSE 7597
// points := [ 10 , 5 , 3 ] ;
7578: LD_ADDR_VAR 0 9
7582: PUSH
7583: LD_INT 10
7585: PUSH
7586: LD_INT 5
7588: PUSH
7589: LD_INT 3
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: LIST
7596: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7597: LD_VAR 0 6
7601: PPUSH
7602: CALL_OW 257
7606: PUSH
7607: LD_INT 2
7609: PUSH
7610: LD_INT 3
7612: PUSH
7613: LD_INT 4
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: IN
7621: IFFALSE 7642
// points := [ 3 , 2 , 1 ] ;
7623: LD_ADDR_VAR 0 9
7627: PUSH
7628: LD_INT 3
7630: PUSH
7631: LD_INT 2
7633: PUSH
7634: LD_INT 1
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7642: LD_VAR 0 6
7646: PPUSH
7647: CALL_OW 257
7651: PUSH
7652: LD_INT 5
7654: EQUAL
7655: IFFALSE 7676
// points := [ 130 , 5 , 2 ] ;
7657: LD_ADDR_VAR 0 9
7661: PUSH
7662: LD_INT 130
7664: PUSH
7665: LD_INT 5
7667: PUSH
7668: LD_INT 2
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: LIST
7675: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7676: LD_VAR 0 6
7680: PPUSH
7681: CALL_OW 257
7685: PUSH
7686: LD_INT 8
7688: EQUAL
7689: IFFALSE 7710
// points := [ 35 , 35 , 30 ] ;
7691: LD_ADDR_VAR 0 9
7695: PUSH
7696: LD_INT 35
7698: PUSH
7699: LD_INT 35
7701: PUSH
7702: LD_INT 30
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: LIST
7709: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7710: LD_VAR 0 6
7714: PPUSH
7715: CALL_OW 257
7719: PUSH
7720: LD_INT 9
7722: EQUAL
7723: IFFALSE 7744
// points := [ 20 , 55 , 40 ] ;
7725: LD_ADDR_VAR 0 9
7729: PUSH
7730: LD_INT 20
7732: PUSH
7733: LD_INT 55
7735: PUSH
7736: LD_INT 40
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: LIST
7743: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7744: LD_VAR 0 6
7748: PPUSH
7749: CALL_OW 257
7753: PUSH
7754: LD_INT 12
7756: PUSH
7757: LD_INT 16
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: IN
7764: IFFALSE 7785
// points := [ 5 , 3 , 2 ] ;
7766: LD_ADDR_VAR 0 9
7770: PUSH
7771: LD_INT 5
7773: PUSH
7774: LD_INT 3
7776: PUSH
7777: LD_INT 2
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: LIST
7784: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7785: LD_VAR 0 6
7789: PPUSH
7790: CALL_OW 257
7794: PUSH
7795: LD_INT 17
7797: EQUAL
7798: IFFALSE 7819
// points := [ 100 , 50 , 75 ] ;
7800: LD_ADDR_VAR 0 9
7804: PUSH
7805: LD_INT 100
7807: PUSH
7808: LD_INT 50
7810: PUSH
7811: LD_INT 75
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7819: LD_VAR 0 6
7823: PPUSH
7824: CALL_OW 257
7828: PUSH
7829: LD_INT 15
7831: EQUAL
7832: IFFALSE 7853
// points := [ 10 , 5 , 3 ] ;
7834: LD_ADDR_VAR 0 9
7838: PUSH
7839: LD_INT 10
7841: PUSH
7842: LD_INT 5
7844: PUSH
7845: LD_INT 3
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7853: LD_VAR 0 6
7857: PPUSH
7858: CALL_OW 257
7862: PUSH
7863: LD_INT 14
7865: EQUAL
7866: IFFALSE 7887
// points := [ 10 , 0 , 0 ] ;
7868: LD_ADDR_VAR 0 9
7872: PUSH
7873: LD_INT 10
7875: PUSH
7876: LD_INT 0
7878: PUSH
7879: LD_INT 0
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7887: LD_VAR 0 6
7891: PPUSH
7892: CALL_OW 257
7896: PUSH
7897: LD_INT 11
7899: EQUAL
7900: IFFALSE 7921
// points := [ 30 , 10 , 5 ] ;
7902: LD_ADDR_VAR 0 9
7906: PUSH
7907: LD_INT 30
7909: PUSH
7910: LD_INT 10
7912: PUSH
7913: LD_INT 5
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: LIST
7920: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7921: LD_VAR 0 1
7925: PPUSH
7926: LD_INT 5
7928: PPUSH
7929: CALL_OW 321
7933: PUSH
7934: LD_INT 2
7936: EQUAL
7937: IFFALSE 7954
// bpoints := bpoints * 1.8 ;
7939: LD_ADDR_VAR 0 10
7943: PUSH
7944: LD_VAR 0 10
7948: PUSH
7949: LD_REAL  1.80000000000000E+0000
7952: MUL
7953: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7954: LD_VAR 0 6
7958: PPUSH
7959: CALL_OW 257
7963: PUSH
7964: LD_INT 1
7966: PUSH
7967: LD_INT 2
7969: PUSH
7970: LD_INT 3
7972: PUSH
7973: LD_INT 4
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: IN
7982: PUSH
7983: LD_VAR 0 1
7987: PPUSH
7988: LD_INT 51
7990: PPUSH
7991: CALL_OW 321
7995: PUSH
7996: LD_INT 2
7998: EQUAL
7999: AND
8000: IFFALSE 8017
// bpoints := bpoints * 1.2 ;
8002: LD_ADDR_VAR 0 10
8006: PUSH
8007: LD_VAR 0 10
8011: PUSH
8012: LD_REAL  1.20000000000000E+0000
8015: MUL
8016: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8017: LD_VAR 0 6
8021: PPUSH
8022: CALL_OW 257
8026: PUSH
8027: LD_INT 5
8029: PUSH
8030: LD_INT 7
8032: PUSH
8033: LD_INT 9
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: LIST
8040: IN
8041: PUSH
8042: LD_VAR 0 1
8046: PPUSH
8047: LD_INT 52
8049: PPUSH
8050: CALL_OW 321
8054: PUSH
8055: LD_INT 2
8057: EQUAL
8058: AND
8059: IFFALSE 8076
// bpoints := bpoints * 1.5 ;
8061: LD_ADDR_VAR 0 10
8065: PUSH
8066: LD_VAR 0 10
8070: PUSH
8071: LD_REAL  1.50000000000000E+0000
8074: MUL
8075: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8076: LD_VAR 0 1
8080: PPUSH
8081: LD_INT 66
8083: PPUSH
8084: CALL_OW 321
8088: PUSH
8089: LD_INT 2
8091: EQUAL
8092: IFFALSE 8109
// bpoints := bpoints * 1.1 ;
8094: LD_ADDR_VAR 0 10
8098: PUSH
8099: LD_VAR 0 10
8103: PUSH
8104: LD_REAL  1.10000000000000E+0000
8107: MUL
8108: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8109: LD_ADDR_VAR 0 10
8113: PUSH
8114: LD_VAR 0 10
8118: PUSH
8119: LD_VAR 0 6
8123: PPUSH
8124: LD_INT 1
8126: PPUSH
8127: CALL_OW 259
8131: PUSH
8132: LD_REAL  1.15000000000000E+0000
8135: MUL
8136: MUL
8137: ST_TO_ADDR
// end ; unit_vehicle :
8138: GO 8966
8140: LD_INT 2
8142: DOUBLE
8143: EQUAL
8144: IFTRUE 8148
8146: GO 8954
8148: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8149: LD_VAR 0 6
8153: PPUSH
8154: CALL_OW 264
8158: PUSH
8159: LD_INT 2
8161: PUSH
8162: LD_INT 42
8164: PUSH
8165: LD_INT 24
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: IN
8173: IFFALSE 8194
// points := [ 25 , 5 , 3 ] ;
8175: LD_ADDR_VAR 0 9
8179: PUSH
8180: LD_INT 25
8182: PUSH
8183: LD_INT 5
8185: PUSH
8186: LD_INT 3
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: LIST
8193: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8194: LD_VAR 0 6
8198: PPUSH
8199: CALL_OW 264
8203: PUSH
8204: LD_INT 4
8206: PUSH
8207: LD_INT 43
8209: PUSH
8210: LD_INT 25
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: IN
8218: IFFALSE 8239
// points := [ 40 , 15 , 5 ] ;
8220: LD_ADDR_VAR 0 9
8224: PUSH
8225: LD_INT 40
8227: PUSH
8228: LD_INT 15
8230: PUSH
8231: LD_INT 5
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: LIST
8238: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8239: LD_VAR 0 6
8243: PPUSH
8244: CALL_OW 264
8248: PUSH
8249: LD_INT 3
8251: PUSH
8252: LD_INT 23
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: IN
8259: IFFALSE 8280
// points := [ 7 , 25 , 8 ] ;
8261: LD_ADDR_VAR 0 9
8265: PUSH
8266: LD_INT 7
8268: PUSH
8269: LD_INT 25
8271: PUSH
8272: LD_INT 8
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: LIST
8279: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8280: LD_VAR 0 6
8284: PPUSH
8285: CALL_OW 264
8289: PUSH
8290: LD_INT 5
8292: PUSH
8293: LD_INT 27
8295: PUSH
8296: LD_INT 44
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: LIST
8303: IN
8304: IFFALSE 8325
// points := [ 14 , 50 , 16 ] ;
8306: LD_ADDR_VAR 0 9
8310: PUSH
8311: LD_INT 14
8313: PUSH
8314: LD_INT 50
8316: PUSH
8317: LD_INT 16
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: LIST
8324: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8325: LD_VAR 0 6
8329: PPUSH
8330: CALL_OW 264
8334: PUSH
8335: LD_INT 6
8337: PUSH
8338: LD_INT 46
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: IN
8345: IFFALSE 8366
// points := [ 32 , 120 , 70 ] ;
8347: LD_ADDR_VAR 0 9
8351: PUSH
8352: LD_INT 32
8354: PUSH
8355: LD_INT 120
8357: PUSH
8358: LD_INT 70
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: LIST
8365: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8366: LD_VAR 0 6
8370: PPUSH
8371: CALL_OW 264
8375: PUSH
8376: LD_INT 7
8378: PUSH
8379: LD_INT 28
8381: PUSH
8382: LD_INT 45
8384: PUSH
8385: LD_INT 92
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: IN
8394: IFFALSE 8415
// points := [ 35 , 20 , 45 ] ;
8396: LD_ADDR_VAR 0 9
8400: PUSH
8401: LD_INT 35
8403: PUSH
8404: LD_INT 20
8406: PUSH
8407: LD_INT 45
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: LIST
8414: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8415: LD_VAR 0 6
8419: PPUSH
8420: CALL_OW 264
8424: PUSH
8425: LD_INT 47
8427: PUSH
8428: EMPTY
8429: LIST
8430: IN
8431: IFFALSE 8452
// points := [ 67 , 45 , 75 ] ;
8433: LD_ADDR_VAR 0 9
8437: PUSH
8438: LD_INT 67
8440: PUSH
8441: LD_INT 45
8443: PUSH
8444: LD_INT 75
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: LIST
8451: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8452: LD_VAR 0 6
8456: PPUSH
8457: CALL_OW 264
8461: PUSH
8462: LD_INT 26
8464: PUSH
8465: EMPTY
8466: LIST
8467: IN
8468: IFFALSE 8489
// points := [ 120 , 30 , 80 ] ;
8470: LD_ADDR_VAR 0 9
8474: PUSH
8475: LD_INT 120
8477: PUSH
8478: LD_INT 30
8480: PUSH
8481: LD_INT 80
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8489: LD_VAR 0 6
8493: PPUSH
8494: CALL_OW 264
8498: PUSH
8499: LD_INT 22
8501: PUSH
8502: EMPTY
8503: LIST
8504: IN
8505: IFFALSE 8526
// points := [ 40 , 1 , 1 ] ;
8507: LD_ADDR_VAR 0 9
8511: PUSH
8512: LD_INT 40
8514: PUSH
8515: LD_INT 1
8517: PUSH
8518: LD_INT 1
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8526: LD_VAR 0 6
8530: PPUSH
8531: CALL_OW 264
8535: PUSH
8536: LD_INT 29
8538: PUSH
8539: EMPTY
8540: LIST
8541: IN
8542: IFFALSE 8563
// points := [ 70 , 200 , 400 ] ;
8544: LD_ADDR_VAR 0 9
8548: PUSH
8549: LD_INT 70
8551: PUSH
8552: LD_INT 200
8554: PUSH
8555: LD_INT 400
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: LIST
8562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8563: LD_VAR 0 6
8567: PPUSH
8568: CALL_OW 264
8572: PUSH
8573: LD_INT 14
8575: PUSH
8576: LD_INT 53
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: IN
8583: IFFALSE 8604
// points := [ 40 , 10 , 20 ] ;
8585: LD_ADDR_VAR 0 9
8589: PUSH
8590: LD_INT 40
8592: PUSH
8593: LD_INT 10
8595: PUSH
8596: LD_INT 20
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: LIST
8603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8604: LD_VAR 0 6
8608: PPUSH
8609: CALL_OW 264
8613: PUSH
8614: LD_INT 9
8616: PUSH
8617: EMPTY
8618: LIST
8619: IN
8620: IFFALSE 8641
// points := [ 5 , 70 , 20 ] ;
8622: LD_ADDR_VAR 0 9
8626: PUSH
8627: LD_INT 5
8629: PUSH
8630: LD_INT 70
8632: PUSH
8633: LD_INT 20
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: LIST
8640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8641: LD_VAR 0 6
8645: PPUSH
8646: CALL_OW 264
8650: PUSH
8651: LD_INT 10
8653: PUSH
8654: EMPTY
8655: LIST
8656: IN
8657: IFFALSE 8678
// points := [ 35 , 110 , 70 ] ;
8659: LD_ADDR_VAR 0 9
8663: PUSH
8664: LD_INT 35
8666: PUSH
8667: LD_INT 110
8669: PUSH
8670: LD_INT 70
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: LIST
8677: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8678: LD_VAR 0 6
8682: PPUSH
8683: CALL_OW 265
8687: PUSH
8688: LD_INT 25
8690: EQUAL
8691: IFFALSE 8712
// points := [ 80 , 65 , 100 ] ;
8693: LD_ADDR_VAR 0 9
8697: PUSH
8698: LD_INT 80
8700: PUSH
8701: LD_INT 65
8703: PUSH
8704: LD_INT 100
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: LIST
8711: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8712: LD_VAR 0 6
8716: PPUSH
8717: CALL_OW 263
8721: PUSH
8722: LD_INT 1
8724: EQUAL
8725: IFFALSE 8760
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8727: LD_ADDR_VAR 0 10
8731: PUSH
8732: LD_VAR 0 10
8736: PUSH
8737: LD_VAR 0 6
8741: PPUSH
8742: CALL_OW 311
8746: PPUSH
8747: LD_INT 3
8749: PPUSH
8750: CALL_OW 259
8754: PUSH
8755: LD_INT 4
8757: MUL
8758: MUL
8759: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8760: LD_VAR 0 6
8764: PPUSH
8765: CALL_OW 263
8769: PUSH
8770: LD_INT 2
8772: EQUAL
8773: IFFALSE 8824
// begin j := IsControledBy ( i ) ;
8775: LD_ADDR_VAR 0 7
8779: PUSH
8780: LD_VAR 0 6
8784: PPUSH
8785: CALL_OW 312
8789: ST_TO_ADDR
// if j then
8790: LD_VAR 0 7
8794: IFFALSE 8824
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8796: LD_ADDR_VAR 0 10
8800: PUSH
8801: LD_VAR 0 10
8805: PUSH
8806: LD_VAR 0 7
8810: PPUSH
8811: LD_INT 3
8813: PPUSH
8814: CALL_OW 259
8818: PUSH
8819: LD_INT 3
8821: MUL
8822: MUL
8823: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8824: LD_VAR 0 6
8828: PPUSH
8829: CALL_OW 264
8833: PUSH
8834: LD_INT 5
8836: PUSH
8837: LD_INT 6
8839: PUSH
8840: LD_INT 46
8842: PUSH
8843: LD_INT 44
8845: PUSH
8846: LD_INT 47
8848: PUSH
8849: LD_INT 45
8851: PUSH
8852: LD_INT 28
8854: PUSH
8855: LD_INT 7
8857: PUSH
8858: LD_INT 27
8860: PUSH
8861: LD_INT 29
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: IN
8876: PUSH
8877: LD_VAR 0 1
8881: PPUSH
8882: LD_INT 52
8884: PPUSH
8885: CALL_OW 321
8889: PUSH
8890: LD_INT 2
8892: EQUAL
8893: AND
8894: IFFALSE 8911
// bpoints := bpoints * 1.2 ;
8896: LD_ADDR_VAR 0 10
8900: PUSH
8901: LD_VAR 0 10
8905: PUSH
8906: LD_REAL  1.20000000000000E+0000
8909: MUL
8910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8911: LD_VAR 0 6
8915: PPUSH
8916: CALL_OW 264
8920: PUSH
8921: LD_INT 6
8923: PUSH
8924: LD_INT 46
8926: PUSH
8927: LD_INT 47
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: LIST
8934: IN
8935: IFFALSE 8952
// bpoints := bpoints * 1.2 ;
8937: LD_ADDR_VAR 0 10
8941: PUSH
8942: LD_VAR 0 10
8946: PUSH
8947: LD_REAL  1.20000000000000E+0000
8950: MUL
8951: ST_TO_ADDR
// end ; unit_building :
8952: GO 8966
8954: LD_INT 3
8956: DOUBLE
8957: EQUAL
8958: IFTRUE 8962
8960: GO 8965
8962: POP
// ; end ;
8963: GO 8966
8965: POP
// for j = 1 to 3 do
8966: LD_ADDR_VAR 0 7
8970: PUSH
8971: DOUBLE
8972: LD_INT 1
8974: DEC
8975: ST_TO_ADDR
8976: LD_INT 3
8978: PUSH
8979: FOR_TO
8980: IFFALSE 9033
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8982: LD_ADDR_VAR 0 5
8986: PUSH
8987: LD_VAR 0 5
8991: PPUSH
8992: LD_VAR 0 7
8996: PPUSH
8997: LD_VAR 0 5
9001: PUSH
9002: LD_VAR 0 7
9006: ARRAY
9007: PUSH
9008: LD_VAR 0 9
9012: PUSH
9013: LD_VAR 0 7
9017: ARRAY
9018: PUSH
9019: LD_VAR 0 10
9023: MUL
9024: PLUS
9025: PPUSH
9026: CALL_OW 1
9030: ST_TO_ADDR
9031: GO 8979
9033: POP
9034: POP
// end ;
9035: GO 7514
9037: POP
9038: POP
// result := Replace ( result , 4 , tmp ) ;
9039: LD_ADDR_VAR 0 5
9043: PUSH
9044: LD_VAR 0 5
9048: PPUSH
9049: LD_INT 4
9051: PPUSH
9052: LD_VAR 0 8
9056: PPUSH
9057: CALL_OW 1
9061: ST_TO_ADDR
// end ;
9062: LD_VAR 0 5
9066: RET
// export function DangerAtRange ( unit , range ) ; begin
9067: LD_INT 0
9069: PPUSH
// if not unit then
9070: LD_VAR 0 1
9074: NOT
9075: IFFALSE 9079
// exit ;
9077: GO 9124
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9079: LD_ADDR_VAR 0 3
9083: PUSH
9084: LD_VAR 0 1
9088: PPUSH
9089: CALL_OW 255
9093: PPUSH
9094: LD_VAR 0 1
9098: PPUSH
9099: CALL_OW 250
9103: PPUSH
9104: LD_VAR 0 1
9108: PPUSH
9109: CALL_OW 251
9113: PPUSH
9114: LD_VAR 0 2
9118: PPUSH
9119: CALL 7366 0 4
9123: ST_TO_ADDR
// end ;
9124: LD_VAR 0 3
9128: RET
// export function DangerInArea ( side , area ) ; begin
9129: LD_INT 0
9131: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9132: LD_ADDR_VAR 0 3
9136: PUSH
9137: LD_VAR 0 2
9141: PPUSH
9142: LD_INT 81
9144: PUSH
9145: LD_VAR 0 1
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PPUSH
9154: CALL_OW 70
9158: ST_TO_ADDR
// end ;
9159: LD_VAR 0 3
9163: RET
// export function IsExtension ( b ) ; begin
9164: LD_INT 0
9166: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9167: LD_ADDR_VAR 0 2
9171: PUSH
9172: LD_VAR 0 1
9176: PUSH
9177: LD_INT 23
9179: PUSH
9180: LD_INT 20
9182: PUSH
9183: LD_INT 22
9185: PUSH
9186: LD_INT 17
9188: PUSH
9189: LD_INT 24
9191: PUSH
9192: LD_INT 21
9194: PUSH
9195: LD_INT 19
9197: PUSH
9198: LD_INT 16
9200: PUSH
9201: LD_INT 25
9203: PUSH
9204: LD_INT 18
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: IN
9219: ST_TO_ADDR
// end ;
9220: LD_VAR 0 2
9224: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9225: LD_INT 0
9227: PPUSH
9228: PPUSH
9229: PPUSH
// result := [ ] ;
9230: LD_ADDR_VAR 0 4
9234: PUSH
9235: EMPTY
9236: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9237: LD_ADDR_VAR 0 5
9241: PUSH
9242: LD_VAR 0 2
9246: PPUSH
9247: LD_INT 21
9249: PUSH
9250: LD_INT 3
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 70
9261: ST_TO_ADDR
// if not tmp then
9262: LD_VAR 0 5
9266: NOT
9267: IFFALSE 9271
// exit ;
9269: GO 9335
// if checkLink then
9271: LD_VAR 0 3
9275: IFFALSE 9325
// begin for i in tmp do
9277: LD_ADDR_VAR 0 6
9281: PUSH
9282: LD_VAR 0 5
9286: PUSH
9287: FOR_IN
9288: IFFALSE 9323
// if GetBase ( i ) <> base then
9290: LD_VAR 0 6
9294: PPUSH
9295: CALL_OW 274
9299: PUSH
9300: LD_VAR 0 1
9304: NONEQUAL
9305: IFFALSE 9321
// ComLinkToBase ( base , i ) ;
9307: LD_VAR 0 1
9311: PPUSH
9312: LD_VAR 0 6
9316: PPUSH
9317: CALL_OW 169
9321: GO 9287
9323: POP
9324: POP
// end ; result := tmp ;
9325: LD_ADDR_VAR 0 4
9329: PUSH
9330: LD_VAR 0 5
9334: ST_TO_ADDR
// end ;
9335: LD_VAR 0 4
9339: RET
// export function ComComplete ( units , b ) ; var i ; begin
9340: LD_INT 0
9342: PPUSH
9343: PPUSH
// if not units then
9344: LD_VAR 0 1
9348: NOT
9349: IFFALSE 9353
// exit ;
9351: GO 9443
// for i in units do
9353: LD_ADDR_VAR 0 4
9357: PUSH
9358: LD_VAR 0 1
9362: PUSH
9363: FOR_IN
9364: IFFALSE 9441
// if BuildingStatus ( b ) = bs_build then
9366: LD_VAR 0 2
9370: PPUSH
9371: CALL_OW 461
9375: PUSH
9376: LD_INT 1
9378: EQUAL
9379: IFFALSE 9439
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9381: LD_VAR 0 4
9385: PPUSH
9386: LD_STRING h
9388: PUSH
9389: LD_VAR 0 2
9393: PPUSH
9394: CALL_OW 250
9398: PUSH
9399: LD_VAR 0 2
9403: PPUSH
9404: CALL_OW 251
9408: PUSH
9409: LD_VAR 0 2
9413: PUSH
9414: LD_INT 0
9416: PUSH
9417: LD_INT 0
9419: PUSH
9420: LD_INT 0
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: PUSH
9432: EMPTY
9433: LIST
9434: PPUSH
9435: CALL_OW 446
9439: GO 9363
9441: POP
9442: POP
// end ;
9443: LD_VAR 0 3
9447: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9448: LD_INT 0
9450: PPUSH
9451: PPUSH
9452: PPUSH
9453: PPUSH
9454: PPUSH
9455: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9456: LD_VAR 0 1
9460: NOT
9461: PUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: CALL_OW 263
9471: PUSH
9472: LD_INT 2
9474: NONEQUAL
9475: OR
9476: IFFALSE 9480
// exit ;
9478: GO 9796
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9480: LD_ADDR_VAR 0 6
9484: PUSH
9485: LD_INT 22
9487: PUSH
9488: LD_VAR 0 1
9492: PPUSH
9493: CALL_OW 255
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PUSH
9502: LD_INT 2
9504: PUSH
9505: LD_INT 30
9507: PUSH
9508: LD_INT 36
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: PUSH
9515: LD_INT 34
9517: PUSH
9518: LD_INT 31
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: CALL_OW 69
9538: ST_TO_ADDR
// if not tmp then
9539: LD_VAR 0 6
9543: NOT
9544: IFFALSE 9548
// exit ;
9546: GO 9796
// result := [ ] ;
9548: LD_ADDR_VAR 0 2
9552: PUSH
9553: EMPTY
9554: ST_TO_ADDR
// for i in tmp do
9555: LD_ADDR_VAR 0 3
9559: PUSH
9560: LD_VAR 0 6
9564: PUSH
9565: FOR_IN
9566: IFFALSE 9637
// begin t := UnitsInside ( i ) ;
9568: LD_ADDR_VAR 0 4
9572: PUSH
9573: LD_VAR 0 3
9577: PPUSH
9578: CALL_OW 313
9582: ST_TO_ADDR
// if t then
9583: LD_VAR 0 4
9587: IFFALSE 9635
// for j in t do
9589: LD_ADDR_VAR 0 7
9593: PUSH
9594: LD_VAR 0 4
9598: PUSH
9599: FOR_IN
9600: IFFALSE 9633
// result := Replace ( result , result + 1 , j ) ;
9602: LD_ADDR_VAR 0 2
9606: PUSH
9607: LD_VAR 0 2
9611: PPUSH
9612: LD_VAR 0 2
9616: PUSH
9617: LD_INT 1
9619: PLUS
9620: PPUSH
9621: LD_VAR 0 7
9625: PPUSH
9626: CALL_OW 1
9630: ST_TO_ADDR
9631: GO 9599
9633: POP
9634: POP
// end ;
9635: GO 9565
9637: POP
9638: POP
// if not result then
9639: LD_VAR 0 2
9643: NOT
9644: IFFALSE 9648
// exit ;
9646: GO 9796
// mech := result [ 1 ] ;
9648: LD_ADDR_VAR 0 5
9652: PUSH
9653: LD_VAR 0 2
9657: PUSH
9658: LD_INT 1
9660: ARRAY
9661: ST_TO_ADDR
// if result > 1 then
9662: LD_VAR 0 2
9666: PUSH
9667: LD_INT 1
9669: GREATER
9670: IFFALSE 9782
// begin for i = 2 to result do
9672: LD_ADDR_VAR 0 3
9676: PUSH
9677: DOUBLE
9678: LD_INT 2
9680: DEC
9681: ST_TO_ADDR
9682: LD_VAR 0 2
9686: PUSH
9687: FOR_TO
9688: IFFALSE 9780
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9690: LD_ADDR_VAR 0 4
9694: PUSH
9695: LD_VAR 0 2
9699: PUSH
9700: LD_VAR 0 3
9704: ARRAY
9705: PPUSH
9706: LD_INT 3
9708: PPUSH
9709: CALL_OW 259
9713: PUSH
9714: LD_VAR 0 2
9718: PUSH
9719: LD_VAR 0 3
9723: ARRAY
9724: PPUSH
9725: CALL_OW 432
9729: MINUS
9730: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9731: LD_VAR 0 4
9735: PUSH
9736: LD_VAR 0 5
9740: PPUSH
9741: LD_INT 3
9743: PPUSH
9744: CALL_OW 259
9748: PUSH
9749: LD_VAR 0 5
9753: PPUSH
9754: CALL_OW 432
9758: MINUS
9759: GREATEREQUAL
9760: IFFALSE 9778
// mech := result [ i ] ;
9762: LD_ADDR_VAR 0 5
9766: PUSH
9767: LD_VAR 0 2
9771: PUSH
9772: LD_VAR 0 3
9776: ARRAY
9777: ST_TO_ADDR
// end ;
9778: GO 9687
9780: POP
9781: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9782: LD_VAR 0 1
9786: PPUSH
9787: LD_VAR 0 5
9791: PPUSH
9792: CALL_OW 135
// end ;
9796: LD_VAR 0 2
9800: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9801: LD_INT 0
9803: PPUSH
9804: PPUSH
9805: PPUSH
9806: PPUSH
9807: PPUSH
9808: PPUSH
9809: PPUSH
9810: PPUSH
9811: PPUSH
9812: PPUSH
9813: PPUSH
9814: PPUSH
9815: PPUSH
// result := [ ] ;
9816: LD_ADDR_VAR 0 7
9820: PUSH
9821: EMPTY
9822: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9823: LD_VAR 0 1
9827: PPUSH
9828: CALL_OW 266
9832: PUSH
9833: LD_INT 0
9835: PUSH
9836: LD_INT 1
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: IN
9843: NOT
9844: IFFALSE 9848
// exit ;
9846: GO 11482
// if name then
9848: LD_VAR 0 3
9852: IFFALSE 9868
// SetBName ( base_dep , name ) ;
9854: LD_VAR 0 1
9858: PPUSH
9859: LD_VAR 0 3
9863: PPUSH
9864: CALL_OW 500
// base := GetBase ( base_dep ) ;
9868: LD_ADDR_VAR 0 15
9872: PUSH
9873: LD_VAR 0 1
9877: PPUSH
9878: CALL_OW 274
9882: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9883: LD_ADDR_VAR 0 16
9887: PUSH
9888: LD_VAR 0 1
9892: PPUSH
9893: CALL_OW 255
9897: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9898: LD_ADDR_VAR 0 17
9902: PUSH
9903: LD_VAR 0 1
9907: PPUSH
9908: CALL_OW 248
9912: ST_TO_ADDR
// if sources then
9913: LD_VAR 0 5
9917: IFFALSE 9964
// for i = 1 to 3 do
9919: LD_ADDR_VAR 0 8
9923: PUSH
9924: DOUBLE
9925: LD_INT 1
9927: DEC
9928: ST_TO_ADDR
9929: LD_INT 3
9931: PUSH
9932: FOR_TO
9933: IFFALSE 9962
// AddResourceType ( base , i , sources [ i ] ) ;
9935: LD_VAR 0 15
9939: PPUSH
9940: LD_VAR 0 8
9944: PPUSH
9945: LD_VAR 0 5
9949: PUSH
9950: LD_VAR 0 8
9954: ARRAY
9955: PPUSH
9956: CALL_OW 276
9960: GO 9932
9962: POP
9963: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9964: LD_ADDR_VAR 0 18
9968: PUSH
9969: LD_VAR 0 15
9973: PPUSH
9974: LD_VAR 0 2
9978: PPUSH
9979: LD_INT 1
9981: PPUSH
9982: CALL 9225 0 3
9986: ST_TO_ADDR
// InitHc ;
9987: CALL_OW 19
// InitUc ;
9991: CALL_OW 18
// uc_side := side ;
9995: LD_ADDR_OWVAR 20
9999: PUSH
10000: LD_VAR 0 16
10004: ST_TO_ADDR
// uc_nation := nation ;
10005: LD_ADDR_OWVAR 21
10009: PUSH
10010: LD_VAR 0 17
10014: ST_TO_ADDR
// if buildings then
10015: LD_VAR 0 18
10019: IFFALSE 11341
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10021: LD_ADDR_VAR 0 19
10025: PUSH
10026: LD_VAR 0 18
10030: PPUSH
10031: LD_INT 2
10033: PUSH
10034: LD_INT 30
10036: PUSH
10037: LD_INT 29
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: LD_INT 30
10046: PUSH
10047: LD_INT 30
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: LIST
10058: PPUSH
10059: CALL_OW 72
10063: ST_TO_ADDR
// if tmp then
10064: LD_VAR 0 19
10068: IFFALSE 10116
// for i in tmp do
10070: LD_ADDR_VAR 0 8
10074: PUSH
10075: LD_VAR 0 19
10079: PUSH
10080: FOR_IN
10081: IFFALSE 10114
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10083: LD_VAR 0 8
10087: PPUSH
10088: CALL_OW 250
10092: PPUSH
10093: LD_VAR 0 8
10097: PPUSH
10098: CALL_OW 251
10102: PPUSH
10103: LD_VAR 0 16
10107: PPUSH
10108: CALL_OW 441
10112: GO 10080
10114: POP
10115: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10116: LD_VAR 0 18
10120: PPUSH
10121: LD_INT 2
10123: PUSH
10124: LD_INT 30
10126: PUSH
10127: LD_INT 32
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: LD_INT 30
10136: PUSH
10137: LD_INT 33
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: LIST
10148: PPUSH
10149: CALL_OW 72
10153: IFFALSE 10241
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10155: LD_ADDR_VAR 0 8
10159: PUSH
10160: LD_VAR 0 18
10164: PPUSH
10165: LD_INT 2
10167: PUSH
10168: LD_INT 30
10170: PUSH
10171: LD_INT 32
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: LD_INT 30
10180: PUSH
10181: LD_INT 33
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: PPUSH
10193: CALL_OW 72
10197: PUSH
10198: FOR_IN
10199: IFFALSE 10239
// begin if not GetBWeapon ( i ) then
10201: LD_VAR 0 8
10205: PPUSH
10206: CALL_OW 269
10210: NOT
10211: IFFALSE 10237
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10213: LD_VAR 0 8
10217: PPUSH
10218: LD_VAR 0 8
10222: PPUSH
10223: LD_VAR 0 2
10227: PPUSH
10228: CALL 11487 0 2
10232: PPUSH
10233: CALL_OW 431
// end ;
10237: GO 10198
10239: POP
10240: POP
// end ; for i = 1 to personel do
10241: LD_ADDR_VAR 0 8
10245: PUSH
10246: DOUBLE
10247: LD_INT 1
10249: DEC
10250: ST_TO_ADDR
10251: LD_VAR 0 6
10255: PUSH
10256: FOR_TO
10257: IFFALSE 11321
// begin if i > 4 then
10259: LD_VAR 0 8
10263: PUSH
10264: LD_INT 4
10266: GREATER
10267: IFFALSE 10271
// break ;
10269: GO 11321
// case i of 1 :
10271: LD_VAR 0 8
10275: PUSH
10276: LD_INT 1
10278: DOUBLE
10279: EQUAL
10280: IFTRUE 10284
10282: GO 10364
10284: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10285: LD_ADDR_VAR 0 12
10289: PUSH
10290: LD_VAR 0 18
10294: PPUSH
10295: LD_INT 22
10297: PUSH
10298: LD_VAR 0 16
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 58
10309: PUSH
10310: EMPTY
10311: LIST
10312: PUSH
10313: LD_INT 2
10315: PUSH
10316: LD_INT 30
10318: PUSH
10319: LD_INT 32
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 30
10328: PUSH
10329: LD_INT 4
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: LD_INT 30
10338: PUSH
10339: LD_INT 5
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 72
10361: ST_TO_ADDR
10362: GO 10586
10364: LD_INT 2
10366: DOUBLE
10367: EQUAL
10368: IFTRUE 10372
10370: GO 10434
10372: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10373: LD_ADDR_VAR 0 12
10377: PUSH
10378: LD_VAR 0 18
10382: PPUSH
10383: LD_INT 22
10385: PUSH
10386: LD_VAR 0 16
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PUSH
10395: LD_INT 2
10397: PUSH
10398: LD_INT 30
10400: PUSH
10401: LD_INT 0
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: LD_INT 30
10410: PUSH
10411: LD_INT 1
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PPUSH
10427: CALL_OW 72
10431: ST_TO_ADDR
10432: GO 10586
10434: LD_INT 3
10436: DOUBLE
10437: EQUAL
10438: IFTRUE 10442
10440: GO 10504
10442: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10443: LD_ADDR_VAR 0 12
10447: PUSH
10448: LD_VAR 0 18
10452: PPUSH
10453: LD_INT 22
10455: PUSH
10456: LD_VAR 0 16
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PUSH
10465: LD_INT 2
10467: PUSH
10468: LD_INT 30
10470: PUSH
10471: LD_INT 2
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: LD_INT 30
10480: PUSH
10481: LD_INT 3
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: LIST
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PPUSH
10497: CALL_OW 72
10501: ST_TO_ADDR
10502: GO 10586
10504: LD_INT 4
10506: DOUBLE
10507: EQUAL
10508: IFTRUE 10512
10510: GO 10585
10512: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10513: LD_ADDR_VAR 0 12
10517: PUSH
10518: LD_VAR 0 18
10522: PPUSH
10523: LD_INT 22
10525: PUSH
10526: LD_VAR 0 16
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 2
10537: PUSH
10538: LD_INT 30
10540: PUSH
10541: LD_INT 6
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 30
10550: PUSH
10551: LD_INT 7
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 30
10560: PUSH
10561: LD_INT 8
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PPUSH
10578: CALL_OW 72
10582: ST_TO_ADDR
10583: GO 10586
10585: POP
// if i = 1 then
10586: LD_VAR 0 8
10590: PUSH
10591: LD_INT 1
10593: EQUAL
10594: IFFALSE 10705
// begin tmp := [ ] ;
10596: LD_ADDR_VAR 0 19
10600: PUSH
10601: EMPTY
10602: ST_TO_ADDR
// for j in f do
10603: LD_ADDR_VAR 0 9
10607: PUSH
10608: LD_VAR 0 12
10612: PUSH
10613: FOR_IN
10614: IFFALSE 10687
// if GetBType ( j ) = b_bunker then
10616: LD_VAR 0 9
10620: PPUSH
10621: CALL_OW 266
10625: PUSH
10626: LD_INT 32
10628: EQUAL
10629: IFFALSE 10656
// tmp := Insert ( tmp , 1 , j ) else
10631: LD_ADDR_VAR 0 19
10635: PUSH
10636: LD_VAR 0 19
10640: PPUSH
10641: LD_INT 1
10643: PPUSH
10644: LD_VAR 0 9
10648: PPUSH
10649: CALL_OW 2
10653: ST_TO_ADDR
10654: GO 10685
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10656: LD_ADDR_VAR 0 19
10660: PUSH
10661: LD_VAR 0 19
10665: PPUSH
10666: LD_VAR 0 19
10670: PUSH
10671: LD_INT 1
10673: PLUS
10674: PPUSH
10675: LD_VAR 0 9
10679: PPUSH
10680: CALL_OW 2
10684: ST_TO_ADDR
10685: GO 10613
10687: POP
10688: POP
// if tmp then
10689: LD_VAR 0 19
10693: IFFALSE 10705
// f := tmp ;
10695: LD_ADDR_VAR 0 12
10699: PUSH
10700: LD_VAR 0 19
10704: ST_TO_ADDR
// end ; x := personel [ i ] ;
10705: LD_ADDR_VAR 0 13
10709: PUSH
10710: LD_VAR 0 6
10714: PUSH
10715: LD_VAR 0 8
10719: ARRAY
10720: ST_TO_ADDR
// if x = - 1 then
10721: LD_VAR 0 13
10725: PUSH
10726: LD_INT 1
10728: NEG
10729: EQUAL
10730: IFFALSE 10939
// begin for j in f do
10732: LD_ADDR_VAR 0 9
10736: PUSH
10737: LD_VAR 0 12
10741: PUSH
10742: FOR_IN
10743: IFFALSE 10935
// repeat InitHc ;
10745: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10749: LD_VAR 0 9
10753: PPUSH
10754: CALL_OW 266
10758: PUSH
10759: LD_INT 5
10761: EQUAL
10762: IFFALSE 10832
// begin if UnitsInside ( j ) < 3 then
10764: LD_VAR 0 9
10768: PPUSH
10769: CALL_OW 313
10773: PUSH
10774: LD_INT 3
10776: LESS
10777: IFFALSE 10813
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10779: LD_INT 0
10781: PPUSH
10782: LD_INT 5
10784: PUSH
10785: LD_INT 8
10787: PUSH
10788: LD_INT 9
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: PUSH
10796: LD_VAR 0 17
10800: ARRAY
10801: PPUSH
10802: LD_VAR 0 4
10806: PPUSH
10807: CALL_OW 380
10811: GO 10830
// PrepareHuman ( false , i , skill ) ;
10813: LD_INT 0
10815: PPUSH
10816: LD_VAR 0 8
10820: PPUSH
10821: LD_VAR 0 4
10825: PPUSH
10826: CALL_OW 380
// end else
10830: GO 10849
// PrepareHuman ( false , i , skill ) ;
10832: LD_INT 0
10834: PPUSH
10835: LD_VAR 0 8
10839: PPUSH
10840: LD_VAR 0 4
10844: PPUSH
10845: CALL_OW 380
// un := CreateHuman ;
10849: LD_ADDR_VAR 0 14
10853: PUSH
10854: CALL_OW 44
10858: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10859: LD_ADDR_VAR 0 7
10863: PUSH
10864: LD_VAR 0 7
10868: PPUSH
10869: LD_INT 1
10871: PPUSH
10872: LD_VAR 0 14
10876: PPUSH
10877: CALL_OW 2
10881: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10882: LD_VAR 0 14
10886: PPUSH
10887: LD_VAR 0 9
10891: PPUSH
10892: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10896: LD_VAR 0 9
10900: PPUSH
10901: CALL_OW 313
10905: PUSH
10906: LD_INT 6
10908: EQUAL
10909: PUSH
10910: LD_VAR 0 9
10914: PPUSH
10915: CALL_OW 266
10919: PUSH
10920: LD_INT 32
10922: PUSH
10923: LD_INT 31
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: IN
10930: OR
10931: IFFALSE 10745
10933: GO 10742
10935: POP
10936: POP
// end else
10937: GO 11319
// for j = 1 to x do
10939: LD_ADDR_VAR 0 9
10943: PUSH
10944: DOUBLE
10945: LD_INT 1
10947: DEC
10948: ST_TO_ADDR
10949: LD_VAR 0 13
10953: PUSH
10954: FOR_TO
10955: IFFALSE 11317
// begin InitHc ;
10957: CALL_OW 19
// if not f then
10961: LD_VAR 0 12
10965: NOT
10966: IFFALSE 11055
// begin PrepareHuman ( false , i , skill ) ;
10968: LD_INT 0
10970: PPUSH
10971: LD_VAR 0 8
10975: PPUSH
10976: LD_VAR 0 4
10980: PPUSH
10981: CALL_OW 380
// un := CreateHuman ;
10985: LD_ADDR_VAR 0 14
10989: PUSH
10990: CALL_OW 44
10994: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10995: LD_ADDR_VAR 0 7
10999: PUSH
11000: LD_VAR 0 7
11004: PPUSH
11005: LD_INT 1
11007: PPUSH
11008: LD_VAR 0 14
11012: PPUSH
11013: CALL_OW 2
11017: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11018: LD_VAR 0 14
11022: PPUSH
11023: LD_VAR 0 1
11027: PPUSH
11028: CALL_OW 250
11032: PPUSH
11033: LD_VAR 0 1
11037: PPUSH
11038: CALL_OW 251
11042: PPUSH
11043: LD_INT 10
11045: PPUSH
11046: LD_INT 0
11048: PPUSH
11049: CALL_OW 50
// continue ;
11053: GO 10954
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11055: LD_VAR 0 12
11059: PUSH
11060: LD_INT 1
11062: ARRAY
11063: PPUSH
11064: CALL_OW 313
11068: PUSH
11069: LD_VAR 0 12
11073: PUSH
11074: LD_INT 1
11076: ARRAY
11077: PPUSH
11078: CALL_OW 266
11082: PUSH
11083: LD_INT 32
11085: PUSH
11086: LD_INT 31
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: IN
11093: AND
11094: PUSH
11095: LD_VAR 0 12
11099: PUSH
11100: LD_INT 1
11102: ARRAY
11103: PPUSH
11104: CALL_OW 313
11108: PUSH
11109: LD_INT 6
11111: EQUAL
11112: OR
11113: IFFALSE 11133
// f := Delete ( f , 1 ) ;
11115: LD_ADDR_VAR 0 12
11119: PUSH
11120: LD_VAR 0 12
11124: PPUSH
11125: LD_INT 1
11127: PPUSH
11128: CALL_OW 3
11132: ST_TO_ADDR
// if not f then
11133: LD_VAR 0 12
11137: NOT
11138: IFFALSE 11156
// begin x := x + 2 ;
11140: LD_ADDR_VAR 0 13
11144: PUSH
11145: LD_VAR 0 13
11149: PUSH
11150: LD_INT 2
11152: PLUS
11153: ST_TO_ADDR
// continue ;
11154: GO 10954
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11156: LD_VAR 0 12
11160: PUSH
11161: LD_INT 1
11163: ARRAY
11164: PPUSH
11165: CALL_OW 266
11169: PUSH
11170: LD_INT 5
11172: EQUAL
11173: IFFALSE 11247
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11175: LD_VAR 0 12
11179: PUSH
11180: LD_INT 1
11182: ARRAY
11183: PPUSH
11184: CALL_OW 313
11188: PUSH
11189: LD_INT 3
11191: LESS
11192: IFFALSE 11228
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11194: LD_INT 0
11196: PPUSH
11197: LD_INT 5
11199: PUSH
11200: LD_INT 8
11202: PUSH
11203: LD_INT 9
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: LIST
11210: PUSH
11211: LD_VAR 0 17
11215: ARRAY
11216: PPUSH
11217: LD_VAR 0 4
11221: PPUSH
11222: CALL_OW 380
11226: GO 11245
// PrepareHuman ( false , i , skill ) ;
11228: LD_INT 0
11230: PPUSH
11231: LD_VAR 0 8
11235: PPUSH
11236: LD_VAR 0 4
11240: PPUSH
11241: CALL_OW 380
// end else
11245: GO 11264
// PrepareHuman ( false , i , skill ) ;
11247: LD_INT 0
11249: PPUSH
11250: LD_VAR 0 8
11254: PPUSH
11255: LD_VAR 0 4
11259: PPUSH
11260: CALL_OW 380
// un := CreateHuman ;
11264: LD_ADDR_VAR 0 14
11268: PUSH
11269: CALL_OW 44
11273: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11274: LD_ADDR_VAR 0 7
11278: PUSH
11279: LD_VAR 0 7
11283: PPUSH
11284: LD_INT 1
11286: PPUSH
11287: LD_VAR 0 14
11291: PPUSH
11292: CALL_OW 2
11296: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11297: LD_VAR 0 14
11301: PPUSH
11302: LD_VAR 0 12
11306: PUSH
11307: LD_INT 1
11309: ARRAY
11310: PPUSH
11311: CALL_OW 52
// end ;
11315: GO 10954
11317: POP
11318: POP
// end ;
11319: GO 10256
11321: POP
11322: POP
// result := result ^ buildings ;
11323: LD_ADDR_VAR 0 7
11327: PUSH
11328: LD_VAR 0 7
11332: PUSH
11333: LD_VAR 0 18
11337: ADD
11338: ST_TO_ADDR
// end else
11339: GO 11482
// begin for i = 1 to personel do
11341: LD_ADDR_VAR 0 8
11345: PUSH
11346: DOUBLE
11347: LD_INT 1
11349: DEC
11350: ST_TO_ADDR
11351: LD_VAR 0 6
11355: PUSH
11356: FOR_TO
11357: IFFALSE 11480
// begin if i > 4 then
11359: LD_VAR 0 8
11363: PUSH
11364: LD_INT 4
11366: GREATER
11367: IFFALSE 11371
// break ;
11369: GO 11480
// x := personel [ i ] ;
11371: LD_ADDR_VAR 0 13
11375: PUSH
11376: LD_VAR 0 6
11380: PUSH
11381: LD_VAR 0 8
11385: ARRAY
11386: ST_TO_ADDR
// if x = - 1 then
11387: LD_VAR 0 13
11391: PUSH
11392: LD_INT 1
11394: NEG
11395: EQUAL
11396: IFFALSE 11400
// continue ;
11398: GO 11356
// PrepareHuman ( false , i , skill ) ;
11400: LD_INT 0
11402: PPUSH
11403: LD_VAR 0 8
11407: PPUSH
11408: LD_VAR 0 4
11412: PPUSH
11413: CALL_OW 380
// un := CreateHuman ;
11417: LD_ADDR_VAR 0 14
11421: PUSH
11422: CALL_OW 44
11426: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11427: LD_VAR 0 14
11431: PPUSH
11432: LD_VAR 0 1
11436: PPUSH
11437: CALL_OW 250
11441: PPUSH
11442: LD_VAR 0 1
11446: PPUSH
11447: CALL_OW 251
11451: PPUSH
11452: LD_INT 10
11454: PPUSH
11455: LD_INT 0
11457: PPUSH
11458: CALL_OW 50
// result := result ^ un ;
11462: LD_ADDR_VAR 0 7
11466: PUSH
11467: LD_VAR 0 7
11471: PUSH
11472: LD_VAR 0 14
11476: ADD
11477: ST_TO_ADDR
// end ;
11478: GO 11356
11480: POP
11481: POP
// end ; end ;
11482: LD_VAR 0 7
11486: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11487: LD_INT 0
11489: PPUSH
11490: PPUSH
11491: PPUSH
11492: PPUSH
11493: PPUSH
11494: PPUSH
11495: PPUSH
11496: PPUSH
11497: PPUSH
11498: PPUSH
11499: PPUSH
11500: PPUSH
11501: PPUSH
11502: PPUSH
11503: PPUSH
11504: PPUSH
// result := false ;
11505: LD_ADDR_VAR 0 3
11509: PUSH
11510: LD_INT 0
11512: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11513: LD_VAR 0 1
11517: NOT
11518: PUSH
11519: LD_VAR 0 1
11523: PPUSH
11524: CALL_OW 266
11528: PUSH
11529: LD_INT 32
11531: PUSH
11532: LD_INT 33
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: IN
11539: NOT
11540: OR
11541: IFFALSE 11545
// exit ;
11543: GO 12654
// nat := GetNation ( tower ) ;
11545: LD_ADDR_VAR 0 12
11549: PUSH
11550: LD_VAR 0 1
11554: PPUSH
11555: CALL_OW 248
11559: ST_TO_ADDR
// side := GetSide ( tower ) ;
11560: LD_ADDR_VAR 0 16
11564: PUSH
11565: LD_VAR 0 1
11569: PPUSH
11570: CALL_OW 255
11574: ST_TO_ADDR
// x := GetX ( tower ) ;
11575: LD_ADDR_VAR 0 10
11579: PUSH
11580: LD_VAR 0 1
11584: PPUSH
11585: CALL_OW 250
11589: ST_TO_ADDR
// y := GetY ( tower ) ;
11590: LD_ADDR_VAR 0 11
11594: PUSH
11595: LD_VAR 0 1
11599: PPUSH
11600: CALL_OW 251
11604: ST_TO_ADDR
// if not x or not y then
11605: LD_VAR 0 10
11609: NOT
11610: PUSH
11611: LD_VAR 0 11
11615: NOT
11616: OR
11617: IFFALSE 11621
// exit ;
11619: GO 12654
// weapon := 0 ;
11621: LD_ADDR_VAR 0 18
11625: PUSH
11626: LD_INT 0
11628: ST_TO_ADDR
// fac_list := [ ] ;
11629: LD_ADDR_VAR 0 17
11633: PUSH
11634: EMPTY
11635: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11636: LD_ADDR_VAR 0 6
11640: PUSH
11641: LD_VAR 0 1
11645: PPUSH
11646: CALL_OW 274
11650: PPUSH
11651: LD_VAR 0 2
11655: PPUSH
11656: LD_INT 0
11658: PPUSH
11659: CALL 9225 0 3
11663: PPUSH
11664: LD_INT 30
11666: PUSH
11667: LD_INT 3
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PPUSH
11674: CALL_OW 72
11678: ST_TO_ADDR
// if not factories then
11679: LD_VAR 0 6
11683: NOT
11684: IFFALSE 11688
// exit ;
11686: GO 12654
// for i in factories do
11688: LD_ADDR_VAR 0 8
11692: PUSH
11693: LD_VAR 0 6
11697: PUSH
11698: FOR_IN
11699: IFFALSE 11724
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11701: LD_ADDR_VAR 0 17
11705: PUSH
11706: LD_VAR 0 17
11710: PUSH
11711: LD_VAR 0 8
11715: PPUSH
11716: CALL_OW 478
11720: UNION
11721: ST_TO_ADDR
11722: GO 11698
11724: POP
11725: POP
// if not fac_list then
11726: LD_VAR 0 17
11730: NOT
11731: IFFALSE 11735
// exit ;
11733: GO 12654
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11735: LD_ADDR_VAR 0 5
11739: PUSH
11740: LD_INT 4
11742: PUSH
11743: LD_INT 5
11745: PUSH
11746: LD_INT 9
11748: PUSH
11749: LD_INT 10
11751: PUSH
11752: LD_INT 6
11754: PUSH
11755: LD_INT 7
11757: PUSH
11758: LD_INT 11
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: PUSH
11770: LD_INT 27
11772: PUSH
11773: LD_INT 28
11775: PUSH
11776: LD_INT 26
11778: PUSH
11779: LD_INT 30
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: PUSH
11788: LD_INT 43
11790: PUSH
11791: LD_INT 44
11793: PUSH
11794: LD_INT 46
11796: PUSH
11797: LD_INT 45
11799: PUSH
11800: LD_INT 47
11802: PUSH
11803: LD_INT 49
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: LIST
11818: PUSH
11819: LD_VAR 0 12
11823: ARRAY
11824: ST_TO_ADDR
// list := list isect fac_list ;
11825: LD_ADDR_VAR 0 5
11829: PUSH
11830: LD_VAR 0 5
11834: PUSH
11835: LD_VAR 0 17
11839: ISECT
11840: ST_TO_ADDR
// if not list then
11841: LD_VAR 0 5
11845: NOT
11846: IFFALSE 11850
// exit ;
11848: GO 12654
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11850: LD_VAR 0 12
11854: PUSH
11855: LD_INT 3
11857: EQUAL
11858: PUSH
11859: LD_INT 49
11861: PUSH
11862: LD_VAR 0 5
11866: IN
11867: AND
11868: PUSH
11869: LD_INT 31
11871: PPUSH
11872: LD_VAR 0 16
11876: PPUSH
11877: CALL_OW 321
11881: PUSH
11882: LD_INT 2
11884: EQUAL
11885: AND
11886: IFFALSE 11946
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11888: LD_INT 22
11890: PUSH
11891: LD_VAR 0 16
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 35
11902: PUSH
11903: LD_INT 49
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: LD_INT 91
11912: PUSH
11913: LD_VAR 0 1
11917: PUSH
11918: LD_INT 10
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: LIST
11930: PPUSH
11931: CALL_OW 69
11935: NOT
11936: IFFALSE 11946
// weapon := ru_time_lapser ;
11938: LD_ADDR_VAR 0 18
11942: PUSH
11943: LD_INT 49
11945: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11946: LD_VAR 0 12
11950: PUSH
11951: LD_INT 1
11953: PUSH
11954: LD_INT 2
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: IN
11961: PUSH
11962: LD_INT 11
11964: PUSH
11965: LD_VAR 0 5
11969: IN
11970: PUSH
11971: LD_INT 30
11973: PUSH
11974: LD_VAR 0 5
11978: IN
11979: OR
11980: AND
11981: PUSH
11982: LD_INT 6
11984: PPUSH
11985: LD_VAR 0 16
11989: PPUSH
11990: CALL_OW 321
11994: PUSH
11995: LD_INT 2
11997: EQUAL
11998: AND
11999: IFFALSE 12164
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12001: LD_INT 22
12003: PUSH
12004: LD_VAR 0 16
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 2
12015: PUSH
12016: LD_INT 35
12018: PUSH
12019: LD_INT 11
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 35
12028: PUSH
12029: LD_INT 30
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: LIST
12040: PUSH
12041: LD_INT 91
12043: PUSH
12044: LD_VAR 0 1
12048: PUSH
12049: LD_INT 18
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: LIST
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: PPUSH
12062: CALL_OW 69
12066: NOT
12067: PUSH
12068: LD_INT 22
12070: PUSH
12071: LD_VAR 0 16
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: LD_INT 2
12082: PUSH
12083: LD_INT 30
12085: PUSH
12086: LD_INT 32
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: LD_INT 30
12095: PUSH
12096: LD_INT 33
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 91
12110: PUSH
12111: LD_VAR 0 1
12115: PUSH
12116: LD_INT 12
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: LIST
12128: PUSH
12129: EMPTY
12130: LIST
12131: PPUSH
12132: CALL_OW 69
12136: PUSH
12137: LD_INT 2
12139: GREATER
12140: AND
12141: IFFALSE 12164
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12143: LD_ADDR_VAR 0 18
12147: PUSH
12148: LD_INT 11
12150: PUSH
12151: LD_INT 30
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_VAR 0 12
12162: ARRAY
12163: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12164: LD_VAR 0 18
12168: NOT
12169: PUSH
12170: LD_INT 40
12172: PPUSH
12173: LD_VAR 0 16
12177: PPUSH
12178: CALL_OW 321
12182: PUSH
12183: LD_INT 2
12185: EQUAL
12186: AND
12187: PUSH
12188: LD_INT 7
12190: PUSH
12191: LD_VAR 0 5
12195: IN
12196: PUSH
12197: LD_INT 28
12199: PUSH
12200: LD_VAR 0 5
12204: IN
12205: OR
12206: PUSH
12207: LD_INT 45
12209: PUSH
12210: LD_VAR 0 5
12214: IN
12215: OR
12216: AND
12217: IFFALSE 12471
// begin hex := GetHexInfo ( x , y ) ;
12219: LD_ADDR_VAR 0 4
12223: PUSH
12224: LD_VAR 0 10
12228: PPUSH
12229: LD_VAR 0 11
12233: PPUSH
12234: CALL_OW 546
12238: ST_TO_ADDR
// if hex [ 1 ] then
12239: LD_VAR 0 4
12243: PUSH
12244: LD_INT 1
12246: ARRAY
12247: IFFALSE 12251
// exit ;
12249: GO 12654
// height := hex [ 2 ] ;
12251: LD_ADDR_VAR 0 15
12255: PUSH
12256: LD_VAR 0 4
12260: PUSH
12261: LD_INT 2
12263: ARRAY
12264: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12265: LD_ADDR_VAR 0 14
12269: PUSH
12270: LD_INT 0
12272: PUSH
12273: LD_INT 2
12275: PUSH
12276: LD_INT 3
12278: PUSH
12279: LD_INT 5
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: ST_TO_ADDR
// for i in tmp do
12288: LD_ADDR_VAR 0 8
12292: PUSH
12293: LD_VAR 0 14
12297: PUSH
12298: FOR_IN
12299: IFFALSE 12469
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12301: LD_ADDR_VAR 0 9
12305: PUSH
12306: LD_VAR 0 10
12310: PPUSH
12311: LD_VAR 0 8
12315: PPUSH
12316: LD_INT 5
12318: PPUSH
12319: CALL_OW 272
12323: PUSH
12324: LD_VAR 0 11
12328: PPUSH
12329: LD_VAR 0 8
12333: PPUSH
12334: LD_INT 5
12336: PPUSH
12337: CALL_OW 273
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12346: LD_VAR 0 9
12350: PUSH
12351: LD_INT 1
12353: ARRAY
12354: PPUSH
12355: LD_VAR 0 9
12359: PUSH
12360: LD_INT 2
12362: ARRAY
12363: PPUSH
12364: CALL_OW 488
12368: IFFALSE 12467
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12370: LD_ADDR_VAR 0 4
12374: PUSH
12375: LD_VAR 0 9
12379: PUSH
12380: LD_INT 1
12382: ARRAY
12383: PPUSH
12384: LD_VAR 0 9
12388: PUSH
12389: LD_INT 2
12391: ARRAY
12392: PPUSH
12393: CALL_OW 546
12397: ST_TO_ADDR
// if hex [ 1 ] then
12398: LD_VAR 0 4
12402: PUSH
12403: LD_INT 1
12405: ARRAY
12406: IFFALSE 12410
// continue ;
12408: GO 12298
// h := hex [ 2 ] ;
12410: LD_ADDR_VAR 0 13
12414: PUSH
12415: LD_VAR 0 4
12419: PUSH
12420: LD_INT 2
12422: ARRAY
12423: ST_TO_ADDR
// if h + 7 < height then
12424: LD_VAR 0 13
12428: PUSH
12429: LD_INT 7
12431: PLUS
12432: PUSH
12433: LD_VAR 0 15
12437: LESS
12438: IFFALSE 12467
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12440: LD_ADDR_VAR 0 18
12444: PUSH
12445: LD_INT 7
12447: PUSH
12448: LD_INT 28
12450: PUSH
12451: LD_INT 45
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: LIST
12458: PUSH
12459: LD_VAR 0 12
12463: ARRAY
12464: ST_TO_ADDR
// break ;
12465: GO 12469
// end ; end ; end ;
12467: GO 12298
12469: POP
12470: POP
// end ; if not weapon then
12471: LD_VAR 0 18
12475: NOT
12476: IFFALSE 12536
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12478: LD_ADDR_VAR 0 5
12482: PUSH
12483: LD_VAR 0 5
12487: PUSH
12488: LD_INT 11
12490: PUSH
12491: LD_INT 30
12493: PUSH
12494: LD_INT 49
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: LIST
12501: DIFF
12502: ST_TO_ADDR
// if not list then
12503: LD_VAR 0 5
12507: NOT
12508: IFFALSE 12512
// exit ;
12510: GO 12654
// weapon := list [ rand ( 1 , list ) ] ;
12512: LD_ADDR_VAR 0 18
12516: PUSH
12517: LD_VAR 0 5
12521: PUSH
12522: LD_INT 1
12524: PPUSH
12525: LD_VAR 0 5
12529: PPUSH
12530: CALL_OW 12
12534: ARRAY
12535: ST_TO_ADDR
// end ; if weapon then
12536: LD_VAR 0 18
12540: IFFALSE 12654
// begin tmp := CostOfWeapon ( weapon ) ;
12542: LD_ADDR_VAR 0 14
12546: PUSH
12547: LD_VAR 0 18
12551: PPUSH
12552: CALL_OW 451
12556: ST_TO_ADDR
// j := GetBase ( tower ) ;
12557: LD_ADDR_VAR 0 9
12561: PUSH
12562: LD_VAR 0 1
12566: PPUSH
12567: CALL_OW 274
12571: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12572: LD_VAR 0 9
12576: PPUSH
12577: LD_INT 1
12579: PPUSH
12580: CALL_OW 275
12584: PUSH
12585: LD_VAR 0 14
12589: PUSH
12590: LD_INT 1
12592: ARRAY
12593: GREATEREQUAL
12594: PUSH
12595: LD_VAR 0 9
12599: PPUSH
12600: LD_INT 2
12602: PPUSH
12603: CALL_OW 275
12607: PUSH
12608: LD_VAR 0 14
12612: PUSH
12613: LD_INT 2
12615: ARRAY
12616: GREATEREQUAL
12617: AND
12618: PUSH
12619: LD_VAR 0 9
12623: PPUSH
12624: LD_INT 3
12626: PPUSH
12627: CALL_OW 275
12631: PUSH
12632: LD_VAR 0 14
12636: PUSH
12637: LD_INT 3
12639: ARRAY
12640: GREATEREQUAL
12641: AND
12642: IFFALSE 12654
// result := weapon ;
12644: LD_ADDR_VAR 0 3
12648: PUSH
12649: LD_VAR 0 18
12653: ST_TO_ADDR
// end ; end ;
12654: LD_VAR 0 3
12658: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12659: LD_INT 0
12661: PPUSH
12662: PPUSH
// result := true ;
12663: LD_ADDR_VAR 0 3
12667: PUSH
12668: LD_INT 1
12670: ST_TO_ADDR
// if array1 = array2 then
12671: LD_VAR 0 1
12675: PUSH
12676: LD_VAR 0 2
12680: EQUAL
12681: IFFALSE 12741
// begin for i = 1 to array1 do
12683: LD_ADDR_VAR 0 4
12687: PUSH
12688: DOUBLE
12689: LD_INT 1
12691: DEC
12692: ST_TO_ADDR
12693: LD_VAR 0 1
12697: PUSH
12698: FOR_TO
12699: IFFALSE 12737
// if array1 [ i ] <> array2 [ i ] then
12701: LD_VAR 0 1
12705: PUSH
12706: LD_VAR 0 4
12710: ARRAY
12711: PUSH
12712: LD_VAR 0 2
12716: PUSH
12717: LD_VAR 0 4
12721: ARRAY
12722: NONEQUAL
12723: IFFALSE 12735
// begin result := false ;
12725: LD_ADDR_VAR 0 3
12729: PUSH
12730: LD_INT 0
12732: ST_TO_ADDR
// break ;
12733: GO 12737
// end ;
12735: GO 12698
12737: POP
12738: POP
// end else
12739: GO 12749
// result := false ;
12741: LD_ADDR_VAR 0 3
12745: PUSH
12746: LD_INT 0
12748: ST_TO_ADDR
// end ;
12749: LD_VAR 0 3
12753: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12754: LD_INT 0
12756: PPUSH
12757: PPUSH
// if not array1 or not array2 then
12758: LD_VAR 0 1
12762: NOT
12763: PUSH
12764: LD_VAR 0 2
12768: NOT
12769: OR
12770: IFFALSE 12774
// exit ;
12772: GO 12838
// result := true ;
12774: LD_ADDR_VAR 0 3
12778: PUSH
12779: LD_INT 1
12781: ST_TO_ADDR
// for i = 1 to array1 do
12782: LD_ADDR_VAR 0 4
12786: PUSH
12787: DOUBLE
12788: LD_INT 1
12790: DEC
12791: ST_TO_ADDR
12792: LD_VAR 0 1
12796: PUSH
12797: FOR_TO
12798: IFFALSE 12836
// if array1 [ i ] <> array2 [ i ] then
12800: LD_VAR 0 1
12804: PUSH
12805: LD_VAR 0 4
12809: ARRAY
12810: PUSH
12811: LD_VAR 0 2
12815: PUSH
12816: LD_VAR 0 4
12820: ARRAY
12821: NONEQUAL
12822: IFFALSE 12834
// begin result := false ;
12824: LD_ADDR_VAR 0 3
12828: PUSH
12829: LD_INT 0
12831: ST_TO_ADDR
// break ;
12832: GO 12836
// end ;
12834: GO 12797
12836: POP
12837: POP
// end ;
12838: LD_VAR 0 3
12842: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12843: LD_INT 0
12845: PPUSH
12846: PPUSH
12847: PPUSH
// pom := GetBase ( fac ) ;
12848: LD_ADDR_VAR 0 5
12852: PUSH
12853: LD_VAR 0 1
12857: PPUSH
12858: CALL_OW 274
12862: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12863: LD_ADDR_VAR 0 4
12867: PUSH
12868: LD_VAR 0 2
12872: PUSH
12873: LD_INT 1
12875: ARRAY
12876: PPUSH
12877: LD_VAR 0 2
12881: PUSH
12882: LD_INT 2
12884: ARRAY
12885: PPUSH
12886: LD_VAR 0 2
12890: PUSH
12891: LD_INT 3
12893: ARRAY
12894: PPUSH
12895: LD_VAR 0 2
12899: PUSH
12900: LD_INT 4
12902: ARRAY
12903: PPUSH
12904: CALL_OW 449
12908: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12909: LD_ADDR_VAR 0 3
12913: PUSH
12914: LD_VAR 0 5
12918: PPUSH
12919: LD_INT 1
12921: PPUSH
12922: CALL_OW 275
12926: PUSH
12927: LD_VAR 0 4
12931: PUSH
12932: LD_INT 1
12934: ARRAY
12935: GREATEREQUAL
12936: PUSH
12937: LD_VAR 0 5
12941: PPUSH
12942: LD_INT 2
12944: PPUSH
12945: CALL_OW 275
12949: PUSH
12950: LD_VAR 0 4
12954: PUSH
12955: LD_INT 2
12957: ARRAY
12958: GREATEREQUAL
12959: AND
12960: PUSH
12961: LD_VAR 0 5
12965: PPUSH
12966: LD_INT 3
12968: PPUSH
12969: CALL_OW 275
12973: PUSH
12974: LD_VAR 0 4
12978: PUSH
12979: LD_INT 3
12981: ARRAY
12982: GREATEREQUAL
12983: AND
12984: ST_TO_ADDR
// end ;
12985: LD_VAR 0 3
12989: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12990: LD_INT 0
12992: PPUSH
12993: PPUSH
12994: PPUSH
12995: PPUSH
// pom := GetBase ( building ) ;
12996: LD_ADDR_VAR 0 3
13000: PUSH
13001: LD_VAR 0 1
13005: PPUSH
13006: CALL_OW 274
13010: ST_TO_ADDR
// if not pom then
13011: LD_VAR 0 3
13015: NOT
13016: IFFALSE 13020
// exit ;
13018: GO 13190
// btype := GetBType ( building ) ;
13020: LD_ADDR_VAR 0 5
13024: PUSH
13025: LD_VAR 0 1
13029: PPUSH
13030: CALL_OW 266
13034: ST_TO_ADDR
// if btype = b_armoury then
13035: LD_VAR 0 5
13039: PUSH
13040: LD_INT 4
13042: EQUAL
13043: IFFALSE 13053
// btype := b_barracks ;
13045: LD_ADDR_VAR 0 5
13049: PUSH
13050: LD_INT 5
13052: ST_TO_ADDR
// if btype = b_depot then
13053: LD_VAR 0 5
13057: PUSH
13058: LD_INT 0
13060: EQUAL
13061: IFFALSE 13071
// btype := b_warehouse ;
13063: LD_ADDR_VAR 0 5
13067: PUSH
13068: LD_INT 1
13070: ST_TO_ADDR
// if btype = b_workshop then
13071: LD_VAR 0 5
13075: PUSH
13076: LD_INT 2
13078: EQUAL
13079: IFFALSE 13089
// btype := b_factory ;
13081: LD_ADDR_VAR 0 5
13085: PUSH
13086: LD_INT 3
13088: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13089: LD_ADDR_VAR 0 4
13093: PUSH
13094: LD_VAR 0 5
13098: PPUSH
13099: LD_VAR 0 1
13103: PPUSH
13104: CALL_OW 248
13108: PPUSH
13109: CALL_OW 450
13113: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13114: LD_ADDR_VAR 0 2
13118: PUSH
13119: LD_VAR 0 3
13123: PPUSH
13124: LD_INT 1
13126: PPUSH
13127: CALL_OW 275
13131: PUSH
13132: LD_VAR 0 4
13136: PUSH
13137: LD_INT 1
13139: ARRAY
13140: GREATEREQUAL
13141: PUSH
13142: LD_VAR 0 3
13146: PPUSH
13147: LD_INT 2
13149: PPUSH
13150: CALL_OW 275
13154: PUSH
13155: LD_VAR 0 4
13159: PUSH
13160: LD_INT 2
13162: ARRAY
13163: GREATEREQUAL
13164: AND
13165: PUSH
13166: LD_VAR 0 3
13170: PPUSH
13171: LD_INT 3
13173: PPUSH
13174: CALL_OW 275
13178: PUSH
13179: LD_VAR 0 4
13183: PUSH
13184: LD_INT 3
13186: ARRAY
13187: GREATEREQUAL
13188: AND
13189: ST_TO_ADDR
// end ;
13190: LD_VAR 0 2
13194: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13195: LD_INT 0
13197: PPUSH
13198: PPUSH
13199: PPUSH
// pom := GetBase ( building ) ;
13200: LD_ADDR_VAR 0 4
13204: PUSH
13205: LD_VAR 0 1
13209: PPUSH
13210: CALL_OW 274
13214: ST_TO_ADDR
// if not pom then
13215: LD_VAR 0 4
13219: NOT
13220: IFFALSE 13224
// exit ;
13222: GO 13325
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13224: LD_ADDR_VAR 0 5
13228: PUSH
13229: LD_VAR 0 2
13233: PPUSH
13234: LD_VAR 0 1
13238: PPUSH
13239: CALL_OW 248
13243: PPUSH
13244: CALL_OW 450
13248: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13249: LD_ADDR_VAR 0 3
13253: PUSH
13254: LD_VAR 0 4
13258: PPUSH
13259: LD_INT 1
13261: PPUSH
13262: CALL_OW 275
13266: PUSH
13267: LD_VAR 0 5
13271: PUSH
13272: LD_INT 1
13274: ARRAY
13275: GREATEREQUAL
13276: PUSH
13277: LD_VAR 0 4
13281: PPUSH
13282: LD_INT 2
13284: PPUSH
13285: CALL_OW 275
13289: PUSH
13290: LD_VAR 0 5
13294: PUSH
13295: LD_INT 2
13297: ARRAY
13298: GREATEREQUAL
13299: AND
13300: PUSH
13301: LD_VAR 0 4
13305: PPUSH
13306: LD_INT 3
13308: PPUSH
13309: CALL_OW 275
13313: PUSH
13314: LD_VAR 0 5
13318: PUSH
13319: LD_INT 3
13321: ARRAY
13322: GREATEREQUAL
13323: AND
13324: ST_TO_ADDR
// end ;
13325: LD_VAR 0 3
13329: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13330: LD_INT 0
13332: PPUSH
13333: PPUSH
13334: PPUSH
13335: PPUSH
13336: PPUSH
13337: PPUSH
13338: PPUSH
13339: PPUSH
13340: PPUSH
13341: PPUSH
13342: PPUSH
// result := false ;
13343: LD_ADDR_VAR 0 8
13347: PUSH
13348: LD_INT 0
13350: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13351: LD_VAR 0 5
13355: NOT
13356: PUSH
13357: LD_VAR 0 1
13361: NOT
13362: OR
13363: PUSH
13364: LD_VAR 0 2
13368: NOT
13369: OR
13370: PUSH
13371: LD_VAR 0 3
13375: NOT
13376: OR
13377: IFFALSE 13381
// exit ;
13379: GO 14195
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13381: LD_ADDR_VAR 0 14
13385: PUSH
13386: LD_VAR 0 1
13390: PPUSH
13391: LD_VAR 0 2
13395: PPUSH
13396: LD_VAR 0 3
13400: PPUSH
13401: LD_VAR 0 4
13405: PPUSH
13406: LD_VAR 0 5
13410: PUSH
13411: LD_INT 1
13413: ARRAY
13414: PPUSH
13415: CALL_OW 248
13419: PPUSH
13420: LD_INT 0
13422: PPUSH
13423: CALL 15448 0 6
13427: ST_TO_ADDR
// if not hexes then
13428: LD_VAR 0 14
13432: NOT
13433: IFFALSE 13437
// exit ;
13435: GO 14195
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13437: LD_ADDR_VAR 0 17
13441: PUSH
13442: LD_VAR 0 5
13446: PPUSH
13447: LD_INT 22
13449: PUSH
13450: LD_VAR 0 13
13454: PPUSH
13455: CALL_OW 255
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 2
13466: PUSH
13467: LD_INT 30
13469: PUSH
13470: LD_INT 0
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 30
13479: PUSH
13480: LD_INT 1
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PPUSH
13496: CALL_OW 72
13500: ST_TO_ADDR
// for i = 1 to hexes do
13501: LD_ADDR_VAR 0 9
13505: PUSH
13506: DOUBLE
13507: LD_INT 1
13509: DEC
13510: ST_TO_ADDR
13511: LD_VAR 0 14
13515: PUSH
13516: FOR_TO
13517: IFFALSE 14193
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13519: LD_ADDR_VAR 0 13
13523: PUSH
13524: LD_VAR 0 14
13528: PUSH
13529: LD_VAR 0 9
13533: ARRAY
13534: PUSH
13535: LD_INT 1
13537: ARRAY
13538: PPUSH
13539: LD_VAR 0 14
13543: PUSH
13544: LD_VAR 0 9
13548: ARRAY
13549: PUSH
13550: LD_INT 2
13552: ARRAY
13553: PPUSH
13554: CALL_OW 428
13558: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13559: LD_VAR 0 14
13563: PUSH
13564: LD_VAR 0 9
13568: ARRAY
13569: PUSH
13570: LD_INT 1
13572: ARRAY
13573: PPUSH
13574: LD_VAR 0 14
13578: PUSH
13579: LD_VAR 0 9
13583: ARRAY
13584: PUSH
13585: LD_INT 2
13587: ARRAY
13588: PPUSH
13589: CALL_OW 351
13593: PUSH
13594: LD_VAR 0 14
13598: PUSH
13599: LD_VAR 0 9
13603: ARRAY
13604: PUSH
13605: LD_INT 1
13607: ARRAY
13608: PPUSH
13609: LD_VAR 0 14
13613: PUSH
13614: LD_VAR 0 9
13618: ARRAY
13619: PUSH
13620: LD_INT 2
13622: ARRAY
13623: PPUSH
13624: CALL_OW 488
13628: NOT
13629: OR
13630: PUSH
13631: LD_VAR 0 13
13635: PPUSH
13636: CALL_OW 247
13640: PUSH
13641: LD_INT 3
13643: EQUAL
13644: OR
13645: IFFALSE 13651
// exit ;
13647: POP
13648: POP
13649: GO 14195
// if not tmp then
13651: LD_VAR 0 13
13655: NOT
13656: IFFALSE 13660
// continue ;
13658: GO 13516
// result := true ;
13660: LD_ADDR_VAR 0 8
13664: PUSH
13665: LD_INT 1
13667: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13668: LD_VAR 0 6
13672: PUSH
13673: LD_VAR 0 13
13677: PPUSH
13678: CALL_OW 247
13682: PUSH
13683: LD_INT 2
13685: EQUAL
13686: AND
13687: PUSH
13688: LD_VAR 0 13
13692: PPUSH
13693: CALL_OW 263
13697: PUSH
13698: LD_INT 1
13700: EQUAL
13701: AND
13702: IFFALSE 13866
// begin if IsDrivenBy ( tmp ) then
13704: LD_VAR 0 13
13708: PPUSH
13709: CALL_OW 311
13713: IFFALSE 13717
// continue ;
13715: GO 13516
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13717: LD_VAR 0 6
13721: PPUSH
13722: LD_INT 3
13724: PUSH
13725: LD_INT 60
13727: PUSH
13728: EMPTY
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 3
13737: PUSH
13738: LD_INT 55
13740: PUSH
13741: EMPTY
13742: LIST
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PPUSH
13752: CALL_OW 72
13756: IFFALSE 13864
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13758: LD_ADDR_VAR 0 18
13762: PUSH
13763: LD_VAR 0 6
13767: PPUSH
13768: LD_INT 3
13770: PUSH
13771: LD_INT 60
13773: PUSH
13774: EMPTY
13775: LIST
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PUSH
13781: LD_INT 3
13783: PUSH
13784: LD_INT 55
13786: PUSH
13787: EMPTY
13788: LIST
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PPUSH
13798: CALL_OW 72
13802: PUSH
13803: LD_INT 1
13805: ARRAY
13806: ST_TO_ADDR
// if IsInUnit ( driver ) then
13807: LD_VAR 0 18
13811: PPUSH
13812: CALL_OW 310
13816: IFFALSE 13827
// ComExit ( driver ) ;
13818: LD_VAR 0 18
13822: PPUSH
13823: CALL 39229 0 1
// AddComEnterUnit ( driver , tmp ) ;
13827: LD_VAR 0 18
13831: PPUSH
13832: LD_VAR 0 13
13836: PPUSH
13837: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13841: LD_VAR 0 18
13845: PPUSH
13846: LD_VAR 0 7
13850: PPUSH
13851: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13855: LD_VAR 0 18
13859: PPUSH
13860: CALL_OW 181
// end ; continue ;
13864: GO 13516
// end ; if not cleaners or not tmp in cleaners then
13866: LD_VAR 0 6
13870: NOT
13871: PUSH
13872: LD_VAR 0 13
13876: PUSH
13877: LD_VAR 0 6
13881: IN
13882: NOT
13883: OR
13884: IFFALSE 14191
// begin if dep then
13886: LD_VAR 0 17
13890: IFFALSE 14026
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13892: LD_ADDR_VAR 0 16
13896: PUSH
13897: LD_VAR 0 17
13901: PUSH
13902: LD_INT 1
13904: ARRAY
13905: PPUSH
13906: CALL_OW 250
13910: PPUSH
13911: LD_VAR 0 17
13915: PUSH
13916: LD_INT 1
13918: ARRAY
13919: PPUSH
13920: CALL_OW 254
13924: PPUSH
13925: LD_INT 5
13927: PPUSH
13928: CALL_OW 272
13932: PUSH
13933: LD_VAR 0 17
13937: PUSH
13938: LD_INT 1
13940: ARRAY
13941: PPUSH
13942: CALL_OW 251
13946: PPUSH
13947: LD_VAR 0 17
13951: PUSH
13952: LD_INT 1
13954: ARRAY
13955: PPUSH
13956: CALL_OW 254
13960: PPUSH
13961: LD_INT 5
13963: PPUSH
13964: CALL_OW 273
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13973: LD_VAR 0 16
13977: PUSH
13978: LD_INT 1
13980: ARRAY
13981: PPUSH
13982: LD_VAR 0 16
13986: PUSH
13987: LD_INT 2
13989: ARRAY
13990: PPUSH
13991: CALL_OW 488
13995: IFFALSE 14026
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13997: LD_VAR 0 13
14001: PPUSH
14002: LD_VAR 0 16
14006: PUSH
14007: LD_INT 1
14009: ARRAY
14010: PPUSH
14011: LD_VAR 0 16
14015: PUSH
14016: LD_INT 2
14018: ARRAY
14019: PPUSH
14020: CALL_OW 111
// continue ;
14024: GO 13516
// end ; end ; r := GetDir ( tmp ) ;
14026: LD_ADDR_VAR 0 15
14030: PUSH
14031: LD_VAR 0 13
14035: PPUSH
14036: CALL_OW 254
14040: ST_TO_ADDR
// if r = 5 then
14041: LD_VAR 0 15
14045: PUSH
14046: LD_INT 5
14048: EQUAL
14049: IFFALSE 14059
// r := 0 ;
14051: LD_ADDR_VAR 0 15
14055: PUSH
14056: LD_INT 0
14058: ST_TO_ADDR
// for j = r to 5 do
14059: LD_ADDR_VAR 0 10
14063: PUSH
14064: DOUBLE
14065: LD_VAR 0 15
14069: DEC
14070: ST_TO_ADDR
14071: LD_INT 5
14073: PUSH
14074: FOR_TO
14075: IFFALSE 14189
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14077: LD_ADDR_VAR 0 11
14081: PUSH
14082: LD_VAR 0 13
14086: PPUSH
14087: CALL_OW 250
14091: PPUSH
14092: LD_VAR 0 10
14096: PPUSH
14097: LD_INT 2
14099: PPUSH
14100: CALL_OW 272
14104: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14105: LD_ADDR_VAR 0 12
14109: PUSH
14110: LD_VAR 0 13
14114: PPUSH
14115: CALL_OW 251
14119: PPUSH
14120: LD_VAR 0 10
14124: PPUSH
14125: LD_INT 2
14127: PPUSH
14128: CALL_OW 273
14132: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14133: LD_VAR 0 11
14137: PPUSH
14138: LD_VAR 0 12
14142: PPUSH
14143: CALL_OW 488
14147: PUSH
14148: LD_VAR 0 11
14152: PPUSH
14153: LD_VAR 0 12
14157: PPUSH
14158: CALL_OW 428
14162: NOT
14163: AND
14164: IFFALSE 14187
// begin ComMoveXY ( tmp , _x , _y ) ;
14166: LD_VAR 0 13
14170: PPUSH
14171: LD_VAR 0 11
14175: PPUSH
14176: LD_VAR 0 12
14180: PPUSH
14181: CALL_OW 111
// break ;
14185: GO 14189
// end ; end ;
14187: GO 14074
14189: POP
14190: POP
// end ; end ;
14191: GO 13516
14193: POP
14194: POP
// end ;
14195: LD_VAR 0 8
14199: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14200: LD_INT 0
14202: PPUSH
// result := true ;
14203: LD_ADDR_VAR 0 3
14207: PUSH
14208: LD_INT 1
14210: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14211: LD_VAR 0 2
14215: PUSH
14216: LD_INT 24
14218: DOUBLE
14219: EQUAL
14220: IFTRUE 14230
14222: LD_INT 33
14224: DOUBLE
14225: EQUAL
14226: IFTRUE 14230
14228: GO 14255
14230: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14231: LD_ADDR_VAR 0 3
14235: PUSH
14236: LD_INT 32
14238: PPUSH
14239: LD_VAR 0 1
14243: PPUSH
14244: CALL_OW 321
14248: PUSH
14249: LD_INT 2
14251: EQUAL
14252: ST_TO_ADDR
14253: GO 14571
14255: LD_INT 20
14257: DOUBLE
14258: EQUAL
14259: IFTRUE 14263
14261: GO 14288
14263: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14264: LD_ADDR_VAR 0 3
14268: PUSH
14269: LD_INT 6
14271: PPUSH
14272: LD_VAR 0 1
14276: PPUSH
14277: CALL_OW 321
14281: PUSH
14282: LD_INT 2
14284: EQUAL
14285: ST_TO_ADDR
14286: GO 14571
14288: LD_INT 22
14290: DOUBLE
14291: EQUAL
14292: IFTRUE 14302
14294: LD_INT 36
14296: DOUBLE
14297: EQUAL
14298: IFTRUE 14302
14300: GO 14327
14302: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14303: LD_ADDR_VAR 0 3
14307: PUSH
14308: LD_INT 15
14310: PPUSH
14311: LD_VAR 0 1
14315: PPUSH
14316: CALL_OW 321
14320: PUSH
14321: LD_INT 2
14323: EQUAL
14324: ST_TO_ADDR
14325: GO 14571
14327: LD_INT 30
14329: DOUBLE
14330: EQUAL
14331: IFTRUE 14335
14333: GO 14360
14335: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14336: LD_ADDR_VAR 0 3
14340: PUSH
14341: LD_INT 20
14343: PPUSH
14344: LD_VAR 0 1
14348: PPUSH
14349: CALL_OW 321
14353: PUSH
14354: LD_INT 2
14356: EQUAL
14357: ST_TO_ADDR
14358: GO 14571
14360: LD_INT 28
14362: DOUBLE
14363: EQUAL
14364: IFTRUE 14374
14366: LD_INT 21
14368: DOUBLE
14369: EQUAL
14370: IFTRUE 14374
14372: GO 14399
14374: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14375: LD_ADDR_VAR 0 3
14379: PUSH
14380: LD_INT 21
14382: PPUSH
14383: LD_VAR 0 1
14387: PPUSH
14388: CALL_OW 321
14392: PUSH
14393: LD_INT 2
14395: EQUAL
14396: ST_TO_ADDR
14397: GO 14571
14399: LD_INT 16
14401: DOUBLE
14402: EQUAL
14403: IFTRUE 14407
14405: GO 14432
14407: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14408: LD_ADDR_VAR 0 3
14412: PUSH
14413: LD_INT 84
14415: PPUSH
14416: LD_VAR 0 1
14420: PPUSH
14421: CALL_OW 321
14425: PUSH
14426: LD_INT 2
14428: EQUAL
14429: ST_TO_ADDR
14430: GO 14571
14432: LD_INT 19
14434: DOUBLE
14435: EQUAL
14436: IFTRUE 14446
14438: LD_INT 23
14440: DOUBLE
14441: EQUAL
14442: IFTRUE 14446
14444: GO 14471
14446: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14447: LD_ADDR_VAR 0 3
14451: PUSH
14452: LD_INT 83
14454: PPUSH
14455: LD_VAR 0 1
14459: PPUSH
14460: CALL_OW 321
14464: PUSH
14465: LD_INT 2
14467: EQUAL
14468: ST_TO_ADDR
14469: GO 14571
14471: LD_INT 17
14473: DOUBLE
14474: EQUAL
14475: IFTRUE 14479
14477: GO 14504
14479: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14480: LD_ADDR_VAR 0 3
14484: PUSH
14485: LD_INT 39
14487: PPUSH
14488: LD_VAR 0 1
14492: PPUSH
14493: CALL_OW 321
14497: PUSH
14498: LD_INT 2
14500: EQUAL
14501: ST_TO_ADDR
14502: GO 14571
14504: LD_INT 18
14506: DOUBLE
14507: EQUAL
14508: IFTRUE 14512
14510: GO 14537
14512: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14513: LD_ADDR_VAR 0 3
14517: PUSH
14518: LD_INT 40
14520: PPUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 321
14530: PUSH
14531: LD_INT 2
14533: EQUAL
14534: ST_TO_ADDR
14535: GO 14571
14537: LD_INT 27
14539: DOUBLE
14540: EQUAL
14541: IFTRUE 14545
14543: GO 14570
14545: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14546: LD_ADDR_VAR 0 3
14550: PUSH
14551: LD_INT 35
14553: PPUSH
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL_OW 321
14563: PUSH
14564: LD_INT 2
14566: EQUAL
14567: ST_TO_ADDR
14568: GO 14571
14570: POP
// end ;
14571: LD_VAR 0 3
14575: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14576: LD_INT 0
14578: PPUSH
14579: PPUSH
14580: PPUSH
14581: PPUSH
14582: PPUSH
14583: PPUSH
14584: PPUSH
14585: PPUSH
14586: PPUSH
14587: PPUSH
14588: PPUSH
// result := false ;
14589: LD_ADDR_VAR 0 6
14593: PUSH
14594: LD_INT 0
14596: ST_TO_ADDR
// if btype = b_depot then
14597: LD_VAR 0 2
14601: PUSH
14602: LD_INT 0
14604: EQUAL
14605: IFFALSE 14617
// begin result := true ;
14607: LD_ADDR_VAR 0 6
14611: PUSH
14612: LD_INT 1
14614: ST_TO_ADDR
// exit ;
14615: GO 15443
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14617: LD_VAR 0 1
14621: NOT
14622: PUSH
14623: LD_VAR 0 1
14627: PPUSH
14628: CALL_OW 266
14632: PUSH
14633: LD_INT 0
14635: PUSH
14636: LD_INT 1
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: IN
14643: NOT
14644: OR
14645: PUSH
14646: LD_VAR 0 2
14650: NOT
14651: OR
14652: PUSH
14653: LD_VAR 0 5
14657: PUSH
14658: LD_INT 0
14660: PUSH
14661: LD_INT 1
14663: PUSH
14664: LD_INT 2
14666: PUSH
14667: LD_INT 3
14669: PUSH
14670: LD_INT 4
14672: PUSH
14673: LD_INT 5
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: IN
14684: NOT
14685: OR
14686: PUSH
14687: LD_VAR 0 3
14691: PPUSH
14692: LD_VAR 0 4
14696: PPUSH
14697: CALL_OW 488
14701: NOT
14702: OR
14703: IFFALSE 14707
// exit ;
14705: GO 15443
// side := GetSide ( depot ) ;
14707: LD_ADDR_VAR 0 9
14711: PUSH
14712: LD_VAR 0 1
14716: PPUSH
14717: CALL_OW 255
14721: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14722: LD_VAR 0 9
14726: PPUSH
14727: LD_VAR 0 2
14731: PPUSH
14732: CALL 14200 0 2
14736: NOT
14737: IFFALSE 14741
// exit ;
14739: GO 15443
// pom := GetBase ( depot ) ;
14741: LD_ADDR_VAR 0 10
14745: PUSH
14746: LD_VAR 0 1
14750: PPUSH
14751: CALL_OW 274
14755: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14756: LD_ADDR_VAR 0 11
14760: PUSH
14761: LD_VAR 0 2
14765: PPUSH
14766: LD_VAR 0 1
14770: PPUSH
14771: CALL_OW 248
14775: PPUSH
14776: CALL_OW 450
14780: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14781: LD_VAR 0 10
14785: PPUSH
14786: LD_INT 1
14788: PPUSH
14789: CALL_OW 275
14793: PUSH
14794: LD_VAR 0 11
14798: PUSH
14799: LD_INT 1
14801: ARRAY
14802: GREATEREQUAL
14803: PUSH
14804: LD_VAR 0 10
14808: PPUSH
14809: LD_INT 2
14811: PPUSH
14812: CALL_OW 275
14816: PUSH
14817: LD_VAR 0 11
14821: PUSH
14822: LD_INT 2
14824: ARRAY
14825: GREATEREQUAL
14826: AND
14827: PUSH
14828: LD_VAR 0 10
14832: PPUSH
14833: LD_INT 3
14835: PPUSH
14836: CALL_OW 275
14840: PUSH
14841: LD_VAR 0 11
14845: PUSH
14846: LD_INT 3
14848: ARRAY
14849: GREATEREQUAL
14850: AND
14851: NOT
14852: IFFALSE 14856
// exit ;
14854: GO 15443
// if GetBType ( depot ) = b_depot then
14856: LD_VAR 0 1
14860: PPUSH
14861: CALL_OW 266
14865: PUSH
14866: LD_INT 0
14868: EQUAL
14869: IFFALSE 14881
// dist := 28 else
14871: LD_ADDR_VAR 0 14
14875: PUSH
14876: LD_INT 28
14878: ST_TO_ADDR
14879: GO 14889
// dist := 36 ;
14881: LD_ADDR_VAR 0 14
14885: PUSH
14886: LD_INT 36
14888: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14889: LD_VAR 0 1
14893: PPUSH
14894: LD_VAR 0 3
14898: PPUSH
14899: LD_VAR 0 4
14903: PPUSH
14904: CALL_OW 297
14908: PUSH
14909: LD_VAR 0 14
14913: GREATER
14914: IFFALSE 14918
// exit ;
14916: GO 15443
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14918: LD_ADDR_VAR 0 12
14922: PUSH
14923: LD_VAR 0 2
14927: PPUSH
14928: LD_VAR 0 3
14932: PPUSH
14933: LD_VAR 0 4
14937: PPUSH
14938: LD_VAR 0 5
14942: PPUSH
14943: LD_VAR 0 1
14947: PPUSH
14948: CALL_OW 248
14952: PPUSH
14953: LD_INT 0
14955: PPUSH
14956: CALL 15448 0 6
14960: ST_TO_ADDR
// if not hexes then
14961: LD_VAR 0 12
14965: NOT
14966: IFFALSE 14970
// exit ;
14968: GO 15443
// hex := GetHexInfo ( x , y ) ;
14970: LD_ADDR_VAR 0 15
14974: PUSH
14975: LD_VAR 0 3
14979: PPUSH
14980: LD_VAR 0 4
14984: PPUSH
14985: CALL_OW 546
14989: ST_TO_ADDR
// if hex [ 1 ] then
14990: LD_VAR 0 15
14994: PUSH
14995: LD_INT 1
14997: ARRAY
14998: IFFALSE 15002
// exit ;
15000: GO 15443
// height := hex [ 2 ] ;
15002: LD_ADDR_VAR 0 13
15006: PUSH
15007: LD_VAR 0 15
15011: PUSH
15012: LD_INT 2
15014: ARRAY
15015: ST_TO_ADDR
// for i = 1 to hexes do
15016: LD_ADDR_VAR 0 7
15020: PUSH
15021: DOUBLE
15022: LD_INT 1
15024: DEC
15025: ST_TO_ADDR
15026: LD_VAR 0 12
15030: PUSH
15031: FOR_TO
15032: IFFALSE 15362
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15034: LD_VAR 0 12
15038: PUSH
15039: LD_VAR 0 7
15043: ARRAY
15044: PUSH
15045: LD_INT 1
15047: ARRAY
15048: PPUSH
15049: LD_VAR 0 12
15053: PUSH
15054: LD_VAR 0 7
15058: ARRAY
15059: PUSH
15060: LD_INT 2
15062: ARRAY
15063: PPUSH
15064: CALL_OW 488
15068: NOT
15069: PUSH
15070: LD_VAR 0 12
15074: PUSH
15075: LD_VAR 0 7
15079: ARRAY
15080: PUSH
15081: LD_INT 1
15083: ARRAY
15084: PPUSH
15085: LD_VAR 0 12
15089: PUSH
15090: LD_VAR 0 7
15094: ARRAY
15095: PUSH
15096: LD_INT 2
15098: ARRAY
15099: PPUSH
15100: CALL_OW 428
15104: PUSH
15105: LD_INT 0
15107: GREATER
15108: OR
15109: PUSH
15110: LD_VAR 0 12
15114: PUSH
15115: LD_VAR 0 7
15119: ARRAY
15120: PUSH
15121: LD_INT 1
15123: ARRAY
15124: PPUSH
15125: LD_VAR 0 12
15129: PUSH
15130: LD_VAR 0 7
15134: ARRAY
15135: PUSH
15136: LD_INT 2
15138: ARRAY
15139: PPUSH
15140: CALL_OW 351
15144: OR
15145: IFFALSE 15151
// exit ;
15147: POP
15148: POP
15149: GO 15443
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15151: LD_ADDR_VAR 0 8
15155: PUSH
15156: LD_VAR 0 12
15160: PUSH
15161: LD_VAR 0 7
15165: ARRAY
15166: PUSH
15167: LD_INT 1
15169: ARRAY
15170: PPUSH
15171: LD_VAR 0 12
15175: PUSH
15176: LD_VAR 0 7
15180: ARRAY
15181: PUSH
15182: LD_INT 2
15184: ARRAY
15185: PPUSH
15186: CALL_OW 546
15190: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15191: LD_VAR 0 8
15195: PUSH
15196: LD_INT 1
15198: ARRAY
15199: PUSH
15200: LD_VAR 0 8
15204: PUSH
15205: LD_INT 2
15207: ARRAY
15208: PUSH
15209: LD_VAR 0 13
15213: PUSH
15214: LD_INT 2
15216: PLUS
15217: GREATER
15218: OR
15219: PUSH
15220: LD_VAR 0 8
15224: PUSH
15225: LD_INT 2
15227: ARRAY
15228: PUSH
15229: LD_VAR 0 13
15233: PUSH
15234: LD_INT 2
15236: MINUS
15237: LESS
15238: OR
15239: PUSH
15240: LD_VAR 0 8
15244: PUSH
15245: LD_INT 3
15247: ARRAY
15248: PUSH
15249: LD_INT 0
15251: PUSH
15252: LD_INT 8
15254: PUSH
15255: LD_INT 9
15257: PUSH
15258: LD_INT 10
15260: PUSH
15261: LD_INT 11
15263: PUSH
15264: LD_INT 12
15266: PUSH
15267: LD_INT 13
15269: PUSH
15270: LD_INT 16
15272: PUSH
15273: LD_INT 17
15275: PUSH
15276: LD_INT 18
15278: PUSH
15279: LD_INT 19
15281: PUSH
15282: LD_INT 20
15284: PUSH
15285: LD_INT 21
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: IN
15303: NOT
15304: OR
15305: PUSH
15306: LD_VAR 0 8
15310: PUSH
15311: LD_INT 5
15313: ARRAY
15314: NOT
15315: OR
15316: PUSH
15317: LD_VAR 0 8
15321: PUSH
15322: LD_INT 6
15324: ARRAY
15325: PUSH
15326: LD_INT 1
15328: PUSH
15329: LD_INT 2
15331: PUSH
15332: LD_INT 7
15334: PUSH
15335: LD_INT 9
15337: PUSH
15338: LD_INT 10
15340: PUSH
15341: LD_INT 11
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: IN
15352: NOT
15353: OR
15354: IFFALSE 15360
// exit ;
15356: POP
15357: POP
15358: GO 15443
// end ;
15360: GO 15031
15362: POP
15363: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15364: LD_VAR 0 9
15368: PPUSH
15369: LD_VAR 0 3
15373: PPUSH
15374: LD_VAR 0 4
15378: PPUSH
15379: LD_INT 20
15381: PPUSH
15382: CALL 7366 0 4
15386: PUSH
15387: LD_INT 4
15389: ARRAY
15390: IFFALSE 15394
// exit ;
15392: GO 15443
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15394: LD_VAR 0 2
15398: PUSH
15399: LD_INT 29
15401: PUSH
15402: LD_INT 30
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: IN
15409: PUSH
15410: LD_VAR 0 3
15414: PPUSH
15415: LD_VAR 0 4
15419: PPUSH
15420: LD_VAR 0 9
15424: PPUSH
15425: CALL_OW 440
15429: NOT
15430: AND
15431: IFFALSE 15435
// exit ;
15433: GO 15443
// result := true ;
15435: LD_ADDR_VAR 0 6
15439: PUSH
15440: LD_INT 1
15442: ST_TO_ADDR
// end ;
15443: LD_VAR 0 6
15447: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15448: LD_INT 0
15450: PPUSH
15451: PPUSH
15452: PPUSH
15453: PPUSH
15454: PPUSH
15455: PPUSH
15456: PPUSH
15457: PPUSH
15458: PPUSH
15459: PPUSH
15460: PPUSH
15461: PPUSH
15462: PPUSH
15463: PPUSH
15464: PPUSH
15465: PPUSH
15466: PPUSH
15467: PPUSH
15468: PPUSH
15469: PPUSH
15470: PPUSH
15471: PPUSH
15472: PPUSH
15473: PPUSH
15474: PPUSH
15475: PPUSH
15476: PPUSH
15477: PPUSH
15478: PPUSH
15479: PPUSH
15480: PPUSH
15481: PPUSH
15482: PPUSH
15483: PPUSH
15484: PPUSH
15485: PPUSH
15486: PPUSH
15487: PPUSH
15488: PPUSH
15489: PPUSH
15490: PPUSH
15491: PPUSH
15492: PPUSH
15493: PPUSH
15494: PPUSH
15495: PPUSH
15496: PPUSH
15497: PPUSH
15498: PPUSH
15499: PPUSH
15500: PPUSH
15501: PPUSH
15502: PPUSH
15503: PPUSH
15504: PPUSH
15505: PPUSH
15506: PPUSH
15507: PPUSH
// result = [ ] ;
15508: LD_ADDR_VAR 0 7
15512: PUSH
15513: EMPTY
15514: ST_TO_ADDR
// temp_list = [ ] ;
15515: LD_ADDR_VAR 0 9
15519: PUSH
15520: EMPTY
15521: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15522: LD_VAR 0 4
15526: PUSH
15527: LD_INT 0
15529: PUSH
15530: LD_INT 1
15532: PUSH
15533: LD_INT 2
15535: PUSH
15536: LD_INT 3
15538: PUSH
15539: LD_INT 4
15541: PUSH
15542: LD_INT 5
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: IN
15553: NOT
15554: PUSH
15555: LD_VAR 0 1
15559: PUSH
15560: LD_INT 0
15562: PUSH
15563: LD_INT 1
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: IN
15570: PUSH
15571: LD_VAR 0 5
15575: PUSH
15576: LD_INT 1
15578: PUSH
15579: LD_INT 2
15581: PUSH
15582: LD_INT 3
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: LIST
15589: IN
15590: NOT
15591: AND
15592: OR
15593: IFFALSE 15597
// exit ;
15595: GO 33988
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15597: LD_VAR 0 1
15601: PUSH
15602: LD_INT 6
15604: PUSH
15605: LD_INT 7
15607: PUSH
15608: LD_INT 8
15610: PUSH
15611: LD_INT 13
15613: PUSH
15614: LD_INT 12
15616: PUSH
15617: LD_INT 15
15619: PUSH
15620: LD_INT 11
15622: PUSH
15623: LD_INT 14
15625: PUSH
15626: LD_INT 10
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: IN
15640: IFFALSE 15650
// btype = b_lab ;
15642: LD_ADDR_VAR 0 1
15646: PUSH
15647: LD_INT 6
15649: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15650: LD_VAR 0 6
15654: PUSH
15655: LD_INT 0
15657: PUSH
15658: LD_INT 1
15660: PUSH
15661: LD_INT 2
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: LIST
15668: IN
15669: NOT
15670: PUSH
15671: LD_VAR 0 1
15675: PUSH
15676: LD_INT 0
15678: PUSH
15679: LD_INT 1
15681: PUSH
15682: LD_INT 2
15684: PUSH
15685: LD_INT 3
15687: PUSH
15688: LD_INT 6
15690: PUSH
15691: LD_INT 36
15693: PUSH
15694: LD_INT 4
15696: PUSH
15697: LD_INT 5
15699: PUSH
15700: LD_INT 31
15702: PUSH
15703: LD_INT 32
15705: PUSH
15706: LD_INT 33
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: IN
15722: NOT
15723: PUSH
15724: LD_VAR 0 6
15728: PUSH
15729: LD_INT 1
15731: EQUAL
15732: AND
15733: OR
15734: PUSH
15735: LD_VAR 0 1
15739: PUSH
15740: LD_INT 2
15742: PUSH
15743: LD_INT 3
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: IN
15750: NOT
15751: PUSH
15752: LD_VAR 0 6
15756: PUSH
15757: LD_INT 2
15759: EQUAL
15760: AND
15761: OR
15762: IFFALSE 15772
// mode = 0 ;
15764: LD_ADDR_VAR 0 6
15768: PUSH
15769: LD_INT 0
15771: ST_TO_ADDR
// case mode of 0 :
15772: LD_VAR 0 6
15776: PUSH
15777: LD_INT 0
15779: DOUBLE
15780: EQUAL
15781: IFTRUE 15785
15783: GO 27238
15785: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15786: LD_ADDR_VAR 0 11
15790: PUSH
15791: LD_INT 0
15793: PUSH
15794: LD_INT 0
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 0
15803: PUSH
15804: LD_INT 1
15806: NEG
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 1
15814: PUSH
15815: LD_INT 0
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 1
15824: PUSH
15825: LD_INT 1
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 0
15834: PUSH
15835: LD_INT 1
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: LD_INT 1
15844: NEG
15845: PUSH
15846: LD_INT 0
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: LD_INT 1
15855: NEG
15856: PUSH
15857: LD_INT 1
15859: NEG
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: PUSH
15865: LD_INT 1
15867: NEG
15868: PUSH
15869: LD_INT 2
15871: NEG
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: LD_INT 0
15879: PUSH
15880: LD_INT 2
15882: NEG
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 1
15890: PUSH
15891: LD_INT 1
15893: NEG
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: PUSH
15899: LD_INT 1
15901: PUSH
15902: LD_INT 2
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PUSH
15909: LD_INT 0
15911: PUSH
15912: LD_INT 2
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: LD_INT 1
15921: NEG
15922: PUSH
15923: LD_INT 1
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 1
15932: PUSH
15933: LD_INT 3
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 0
15942: PUSH
15943: LD_INT 3
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 1
15952: NEG
15953: PUSH
15954: LD_INT 2
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15979: LD_ADDR_VAR 0 12
15983: PUSH
15984: LD_INT 0
15986: PUSH
15987: LD_INT 0
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 0
15996: PUSH
15997: LD_INT 1
15999: NEG
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: LD_INT 1
16007: PUSH
16008: LD_INT 0
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 1
16017: PUSH
16018: LD_INT 1
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 0
16027: PUSH
16028: LD_INT 1
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 1
16037: NEG
16038: PUSH
16039: LD_INT 0
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: LD_INT 1
16048: NEG
16049: PUSH
16050: LD_INT 1
16052: NEG
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: LD_INT 1
16060: PUSH
16061: LD_INT 1
16063: NEG
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: LD_INT 2
16071: PUSH
16072: LD_INT 0
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: LD_INT 2
16081: PUSH
16082: LD_INT 1
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 1
16091: NEG
16092: PUSH
16093: LD_INT 1
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 2
16102: NEG
16103: PUSH
16104: LD_INT 0
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 2
16113: NEG
16114: PUSH
16115: LD_INT 1
16117: NEG
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: PUSH
16123: LD_INT 2
16125: NEG
16126: PUSH
16127: LD_INT 1
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 3
16136: NEG
16137: PUSH
16138: LD_INT 0
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: LD_INT 3
16147: NEG
16148: PUSH
16149: LD_INT 1
16151: NEG
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16175: LD_ADDR_VAR 0 13
16179: PUSH
16180: LD_INT 0
16182: PUSH
16183: LD_INT 0
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 0
16192: PUSH
16193: LD_INT 1
16195: NEG
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 1
16203: PUSH
16204: LD_INT 0
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 1
16213: PUSH
16214: LD_INT 1
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 0
16223: PUSH
16224: LD_INT 1
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 1
16233: NEG
16234: PUSH
16235: LD_INT 0
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 1
16244: NEG
16245: PUSH
16246: LD_INT 1
16248: NEG
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 1
16256: NEG
16257: PUSH
16258: LD_INT 2
16260: NEG
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 2
16268: PUSH
16269: LD_INT 1
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 2
16278: PUSH
16279: LD_INT 2
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: LD_INT 1
16288: PUSH
16289: LD_INT 2
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 2
16298: NEG
16299: PUSH
16300: LD_INT 1
16302: NEG
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: LD_INT 2
16310: NEG
16311: PUSH
16312: LD_INT 2
16314: NEG
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 2
16322: NEG
16323: PUSH
16324: LD_INT 3
16326: NEG
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 3
16334: NEG
16335: PUSH
16336: LD_INT 2
16338: NEG
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: LD_INT 3
16346: NEG
16347: PUSH
16348: LD_INT 3
16350: NEG
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16374: LD_ADDR_VAR 0 14
16378: PUSH
16379: LD_INT 0
16381: PUSH
16382: LD_INT 0
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 0
16391: PUSH
16392: LD_INT 1
16394: NEG
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 1
16402: PUSH
16403: LD_INT 0
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: LD_INT 1
16412: PUSH
16413: LD_INT 1
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: LD_INT 0
16422: PUSH
16423: LD_INT 1
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: PUSH
16430: LD_INT 1
16432: NEG
16433: PUSH
16434: LD_INT 0
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 1
16443: NEG
16444: PUSH
16445: LD_INT 1
16447: NEG
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 1
16455: NEG
16456: PUSH
16457: LD_INT 2
16459: NEG
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 0
16467: PUSH
16468: LD_INT 2
16470: NEG
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 1
16478: PUSH
16479: LD_INT 1
16481: NEG
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 1
16489: PUSH
16490: LD_INT 2
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: LD_INT 0
16499: PUSH
16500: LD_INT 2
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 1
16509: NEG
16510: PUSH
16511: LD_INT 1
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 1
16520: NEG
16521: PUSH
16522: LD_INT 3
16524: NEG
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 0
16532: PUSH
16533: LD_INT 3
16535: NEG
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: LD_INT 2
16546: NEG
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16570: LD_ADDR_VAR 0 15
16574: PUSH
16575: LD_INT 0
16577: PUSH
16578: LD_INT 0
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: LD_INT 0
16587: PUSH
16588: LD_INT 1
16590: NEG
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 1
16598: PUSH
16599: LD_INT 0
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 1
16608: PUSH
16609: LD_INT 1
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: LD_INT 0
16618: PUSH
16619: LD_INT 1
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 1
16628: NEG
16629: PUSH
16630: LD_INT 0
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 1
16639: NEG
16640: PUSH
16641: LD_INT 1
16643: NEG
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 1
16651: PUSH
16652: LD_INT 1
16654: NEG
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 2
16662: PUSH
16663: LD_INT 0
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 2
16672: PUSH
16673: LD_INT 1
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 1
16682: NEG
16683: PUSH
16684: LD_INT 1
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 2
16693: NEG
16694: PUSH
16695: LD_INT 0
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 2
16704: NEG
16705: PUSH
16706: LD_INT 1
16708: NEG
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 2
16716: PUSH
16717: LD_INT 1
16719: NEG
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: LD_INT 3
16727: PUSH
16728: LD_INT 0
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: PUSH
16735: LD_INT 3
16737: PUSH
16738: LD_INT 1
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16763: LD_ADDR_VAR 0 16
16767: PUSH
16768: LD_INT 0
16770: PUSH
16771: LD_INT 0
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 0
16780: PUSH
16781: LD_INT 1
16783: NEG
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: LD_INT 1
16791: PUSH
16792: LD_INT 0
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: LD_INT 1
16801: PUSH
16802: LD_INT 1
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 0
16811: PUSH
16812: LD_INT 1
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: LD_INT 1
16821: NEG
16822: PUSH
16823: LD_INT 0
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 1
16832: NEG
16833: PUSH
16834: LD_INT 1
16836: NEG
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 1
16844: NEG
16845: PUSH
16846: LD_INT 2
16848: NEG
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 2
16856: PUSH
16857: LD_INT 1
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 2
16866: PUSH
16867: LD_INT 2
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 1
16876: PUSH
16877: LD_INT 2
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 2
16886: NEG
16887: PUSH
16888: LD_INT 1
16890: NEG
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 2
16898: NEG
16899: PUSH
16900: LD_INT 2
16902: NEG
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 3
16910: PUSH
16911: LD_INT 2
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: LD_INT 3
16920: PUSH
16921: LD_INT 3
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 2
16930: PUSH
16931: LD_INT 3
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16956: LD_ADDR_VAR 0 17
16960: PUSH
16961: LD_INT 0
16963: PUSH
16964: LD_INT 0
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 0
16973: PUSH
16974: LD_INT 1
16976: NEG
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 1
16984: PUSH
16985: LD_INT 0
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: LD_INT 1
16994: PUSH
16995: LD_INT 1
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 0
17004: PUSH
17005: LD_INT 1
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: LD_INT 1
17014: NEG
17015: PUSH
17016: LD_INT 0
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 1
17025: NEG
17026: PUSH
17027: LD_INT 1
17029: NEG
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PUSH
17035: LD_INT 1
17037: NEG
17038: PUSH
17039: LD_INT 2
17041: NEG
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 0
17049: PUSH
17050: LD_INT 2
17052: NEG
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 1
17060: PUSH
17061: LD_INT 1
17063: NEG
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PUSH
17069: LD_INT 2
17071: PUSH
17072: LD_INT 0
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 2
17081: PUSH
17082: LD_INT 1
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 2
17091: PUSH
17092: LD_INT 2
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 1
17101: PUSH
17102: LD_INT 2
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 0
17111: PUSH
17112: LD_INT 2
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 1
17121: NEG
17122: PUSH
17123: LD_INT 1
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 2
17132: NEG
17133: PUSH
17134: LD_INT 0
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 2
17143: NEG
17144: PUSH
17145: LD_INT 1
17147: NEG
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: LD_INT 2
17155: NEG
17156: PUSH
17157: LD_INT 2
17159: NEG
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17186: LD_ADDR_VAR 0 18
17190: PUSH
17191: LD_INT 0
17193: PUSH
17194: LD_INT 0
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 0
17203: PUSH
17204: LD_INT 1
17206: NEG
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 1
17214: PUSH
17215: LD_INT 0
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 1
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 0
17234: PUSH
17235: LD_INT 1
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 1
17244: NEG
17245: PUSH
17246: LD_INT 0
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 1
17255: NEG
17256: PUSH
17257: LD_INT 1
17259: NEG
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: LD_INT 1
17267: NEG
17268: PUSH
17269: LD_INT 2
17271: NEG
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 0
17279: PUSH
17280: LD_INT 2
17282: NEG
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: LD_INT 1
17293: NEG
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 2
17301: PUSH
17302: LD_INT 0
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 2
17311: PUSH
17312: LD_INT 1
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 2
17321: PUSH
17322: LD_INT 2
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 1
17331: PUSH
17332: LD_INT 2
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PUSH
17339: LD_INT 0
17341: PUSH
17342: LD_INT 2
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 1
17351: NEG
17352: PUSH
17353: LD_INT 1
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 2
17362: NEG
17363: PUSH
17364: LD_INT 0
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 2
17373: NEG
17374: PUSH
17375: LD_INT 1
17377: NEG
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 2
17385: NEG
17386: PUSH
17387: LD_INT 2
17389: NEG
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17416: LD_ADDR_VAR 0 19
17420: PUSH
17421: LD_INT 0
17423: PUSH
17424: LD_INT 0
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 0
17433: PUSH
17434: LD_INT 1
17436: NEG
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 1
17444: PUSH
17445: LD_INT 0
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 1
17454: PUSH
17455: LD_INT 1
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 0
17464: PUSH
17465: LD_INT 1
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 1
17474: NEG
17475: PUSH
17476: LD_INT 0
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 1
17485: NEG
17486: PUSH
17487: LD_INT 1
17489: NEG
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: LD_INT 1
17497: NEG
17498: PUSH
17499: LD_INT 2
17501: NEG
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 0
17509: PUSH
17510: LD_INT 2
17512: NEG
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 1
17520: PUSH
17521: LD_INT 1
17523: NEG
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 2
17531: PUSH
17532: LD_INT 0
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 2
17541: PUSH
17542: LD_INT 1
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 2
17551: PUSH
17552: LD_INT 2
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 1
17561: PUSH
17562: LD_INT 2
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 0
17571: PUSH
17572: LD_INT 2
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 1
17581: NEG
17582: PUSH
17583: LD_INT 1
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 2
17592: NEG
17593: PUSH
17594: LD_INT 0
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 2
17603: NEG
17604: PUSH
17605: LD_INT 1
17607: NEG
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PUSH
17613: LD_INT 2
17615: NEG
17616: PUSH
17617: LD_INT 2
17619: NEG
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17646: LD_ADDR_VAR 0 20
17650: PUSH
17651: LD_INT 0
17653: PUSH
17654: LD_INT 0
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 0
17663: PUSH
17664: LD_INT 1
17666: NEG
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 1
17674: PUSH
17675: LD_INT 0
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 1
17684: PUSH
17685: LD_INT 1
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 0
17694: PUSH
17695: LD_INT 1
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 1
17704: NEG
17705: PUSH
17706: LD_INT 0
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 1
17715: NEG
17716: PUSH
17717: LD_INT 1
17719: NEG
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: LD_INT 1
17727: NEG
17728: PUSH
17729: LD_INT 2
17731: NEG
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 0
17739: PUSH
17740: LD_INT 2
17742: NEG
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 1
17750: PUSH
17751: LD_INT 1
17753: NEG
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 2
17761: PUSH
17762: LD_INT 0
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 2
17771: PUSH
17772: LD_INT 1
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 2
17781: PUSH
17782: LD_INT 2
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 1
17791: PUSH
17792: LD_INT 2
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 0
17801: PUSH
17802: LD_INT 2
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 1
17811: NEG
17812: PUSH
17813: LD_INT 1
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 2
17822: NEG
17823: PUSH
17824: LD_INT 0
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 2
17833: NEG
17834: PUSH
17835: LD_INT 1
17837: NEG
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 2
17845: NEG
17846: PUSH
17847: LD_INT 2
17849: NEG
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17876: LD_ADDR_VAR 0 21
17880: PUSH
17881: LD_INT 0
17883: PUSH
17884: LD_INT 0
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: LD_INT 0
17893: PUSH
17894: LD_INT 1
17896: NEG
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 1
17904: PUSH
17905: LD_INT 0
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: LD_INT 1
17914: PUSH
17915: LD_INT 1
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 0
17924: PUSH
17925: LD_INT 1
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 1
17934: NEG
17935: PUSH
17936: LD_INT 0
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 1
17945: NEG
17946: PUSH
17947: LD_INT 1
17949: NEG
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 1
17957: NEG
17958: PUSH
17959: LD_INT 2
17961: NEG
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 0
17969: PUSH
17970: LD_INT 2
17972: NEG
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 1
17980: PUSH
17981: LD_INT 1
17983: NEG
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 2
17991: PUSH
17992: LD_INT 0
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 2
18001: PUSH
18002: LD_INT 1
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 2
18011: PUSH
18012: LD_INT 2
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 1
18021: PUSH
18022: LD_INT 2
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 0
18031: PUSH
18032: LD_INT 2
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 1
18041: NEG
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 2
18052: NEG
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 2
18063: NEG
18064: PUSH
18065: LD_INT 1
18067: NEG
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 2
18075: NEG
18076: PUSH
18077: LD_INT 2
18079: NEG
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18106: LD_ADDR_VAR 0 22
18110: PUSH
18111: LD_INT 0
18113: PUSH
18114: LD_INT 0
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 0
18123: PUSH
18124: LD_INT 1
18126: NEG
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 1
18134: PUSH
18135: LD_INT 0
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 1
18144: PUSH
18145: LD_INT 1
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 0
18154: PUSH
18155: LD_INT 1
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 1
18164: NEG
18165: PUSH
18166: LD_INT 0
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 1
18175: NEG
18176: PUSH
18177: LD_INT 1
18179: NEG
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 1
18187: NEG
18188: PUSH
18189: LD_INT 2
18191: NEG
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 0
18199: PUSH
18200: LD_INT 2
18202: NEG
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 1
18210: PUSH
18211: LD_INT 1
18213: NEG
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 2
18221: PUSH
18222: LD_INT 0
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 2
18231: PUSH
18232: LD_INT 1
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 2
18241: PUSH
18242: LD_INT 2
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 1
18251: PUSH
18252: LD_INT 2
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 0
18261: PUSH
18262: LD_INT 2
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: LD_INT 1
18271: NEG
18272: PUSH
18273: LD_INT 1
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 2
18282: NEG
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 2
18293: NEG
18294: PUSH
18295: LD_INT 1
18297: NEG
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 2
18305: NEG
18306: PUSH
18307: LD_INT 2
18309: NEG
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18336: LD_ADDR_VAR 0 23
18340: PUSH
18341: LD_INT 0
18343: PUSH
18344: LD_INT 0
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 0
18353: PUSH
18354: LD_INT 1
18356: NEG
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 1
18364: PUSH
18365: LD_INT 0
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 1
18374: PUSH
18375: LD_INT 1
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 0
18384: PUSH
18385: LD_INT 1
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 1
18394: NEG
18395: PUSH
18396: LD_INT 0
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 1
18405: NEG
18406: PUSH
18407: LD_INT 1
18409: NEG
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 1
18417: NEG
18418: PUSH
18419: LD_INT 2
18421: NEG
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 0
18429: PUSH
18430: LD_INT 2
18432: NEG
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 1
18440: PUSH
18441: LD_INT 1
18443: NEG
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 2
18451: PUSH
18452: LD_INT 0
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 2
18461: PUSH
18462: LD_INT 1
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 2
18471: PUSH
18472: LD_INT 2
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: LD_INT 1
18481: PUSH
18482: LD_INT 2
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 0
18491: PUSH
18492: LD_INT 2
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 1
18501: NEG
18502: PUSH
18503: LD_INT 1
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 2
18512: NEG
18513: PUSH
18514: LD_INT 0
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 2
18523: NEG
18524: PUSH
18525: LD_INT 1
18527: NEG
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 2
18535: NEG
18536: PUSH
18537: LD_INT 2
18539: NEG
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 2
18547: NEG
18548: PUSH
18549: LD_INT 3
18551: NEG
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 1
18559: NEG
18560: PUSH
18561: LD_INT 3
18563: NEG
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 1
18571: PUSH
18572: LD_INT 2
18574: NEG
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 2
18582: PUSH
18583: LD_INT 1
18585: NEG
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18616: LD_ADDR_VAR 0 24
18620: PUSH
18621: LD_INT 0
18623: PUSH
18624: LD_INT 0
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 0
18633: PUSH
18634: LD_INT 1
18636: NEG
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 1
18644: PUSH
18645: LD_INT 0
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 1
18654: PUSH
18655: LD_INT 1
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 0
18664: PUSH
18665: LD_INT 1
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 1
18674: NEG
18675: PUSH
18676: LD_INT 0
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 1
18685: NEG
18686: PUSH
18687: LD_INT 1
18689: NEG
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 1
18697: NEG
18698: PUSH
18699: LD_INT 2
18701: NEG
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 0
18709: PUSH
18710: LD_INT 2
18712: NEG
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 1
18720: PUSH
18721: LD_INT 1
18723: NEG
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 2
18731: PUSH
18732: LD_INT 0
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 2
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 2
18751: PUSH
18752: LD_INT 2
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 1
18761: PUSH
18762: LD_INT 2
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 0
18771: PUSH
18772: LD_INT 2
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 1
18781: NEG
18782: PUSH
18783: LD_INT 1
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 2
18792: NEG
18793: PUSH
18794: LD_INT 0
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 2
18803: NEG
18804: PUSH
18805: LD_INT 1
18807: NEG
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 2
18815: NEG
18816: PUSH
18817: LD_INT 2
18819: NEG
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 1
18827: PUSH
18828: LD_INT 2
18830: NEG
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 2
18838: PUSH
18839: LD_INT 1
18841: NEG
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 3
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 3
18859: PUSH
18860: LD_INT 2
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18892: LD_ADDR_VAR 0 25
18896: PUSH
18897: LD_INT 0
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 0
18909: PUSH
18910: LD_INT 1
18912: NEG
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 1
18920: PUSH
18921: LD_INT 0
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 1
18930: PUSH
18931: LD_INT 1
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 0
18940: PUSH
18941: LD_INT 1
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 1
18950: NEG
18951: PUSH
18952: LD_INT 0
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 1
18961: NEG
18962: PUSH
18963: LD_INT 1
18965: NEG
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 1
18973: NEG
18974: PUSH
18975: LD_INT 2
18977: NEG
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 0
18985: PUSH
18986: LD_INT 2
18988: NEG
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: PUSH
18997: LD_INT 1
18999: NEG
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 2
19007: PUSH
19008: LD_INT 0
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 2
19017: PUSH
19018: LD_INT 1
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 2
19027: PUSH
19028: LD_INT 2
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: LD_INT 2
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 0
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 1
19057: NEG
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 2
19068: NEG
19069: PUSH
19070: LD_INT 0
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 2
19079: NEG
19080: PUSH
19081: LD_INT 1
19083: NEG
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 2
19091: NEG
19092: PUSH
19093: LD_INT 2
19095: NEG
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 3
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 3
19113: PUSH
19114: LD_INT 2
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 2
19123: PUSH
19124: LD_INT 3
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 1
19133: PUSH
19134: LD_INT 3
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19166: LD_ADDR_VAR 0 26
19170: PUSH
19171: LD_INT 0
19173: PUSH
19174: LD_INT 0
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 0
19183: PUSH
19184: LD_INT 1
19186: NEG
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: LD_INT 0
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 1
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 0
19214: PUSH
19215: LD_INT 1
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 1
19224: NEG
19225: PUSH
19226: LD_INT 0
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 1
19235: NEG
19236: PUSH
19237: LD_INT 1
19239: NEG
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 1
19247: NEG
19248: PUSH
19249: LD_INT 2
19251: NEG
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 0
19259: PUSH
19260: LD_INT 2
19262: NEG
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 1
19270: PUSH
19271: LD_INT 1
19273: NEG
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 2
19281: PUSH
19282: LD_INT 0
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 2
19291: PUSH
19292: LD_INT 1
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 2
19301: PUSH
19302: LD_INT 2
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 1
19311: PUSH
19312: LD_INT 2
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 0
19321: PUSH
19322: LD_INT 2
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 1
19331: NEG
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 2
19342: NEG
19343: PUSH
19344: LD_INT 0
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 2
19353: NEG
19354: PUSH
19355: LD_INT 1
19357: NEG
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 2
19365: NEG
19366: PUSH
19367: LD_INT 2
19369: NEG
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 2
19377: PUSH
19378: LD_INT 3
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 1
19387: PUSH
19388: LD_INT 3
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 1
19397: NEG
19398: PUSH
19399: LD_INT 2
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 2
19408: NEG
19409: PUSH
19410: LD_INT 1
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19442: LD_ADDR_VAR 0 27
19446: PUSH
19447: LD_INT 0
19449: PUSH
19450: LD_INT 0
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 0
19459: PUSH
19460: LD_INT 1
19462: NEG
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: LD_INT 0
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 1
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 0
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 1
19500: NEG
19501: PUSH
19502: LD_INT 0
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 1
19511: NEG
19512: PUSH
19513: LD_INT 1
19515: NEG
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 1
19523: NEG
19524: PUSH
19525: LD_INT 2
19527: NEG
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 0
19535: PUSH
19536: LD_INT 2
19538: NEG
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 1
19546: PUSH
19547: LD_INT 1
19549: NEG
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: LD_INT 0
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: LD_INT 1
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 2
19577: PUSH
19578: LD_INT 2
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 1
19587: PUSH
19588: LD_INT 2
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 0
19597: PUSH
19598: LD_INT 2
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 1
19607: NEG
19608: PUSH
19609: LD_INT 1
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 2
19618: NEG
19619: PUSH
19620: LD_INT 0
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: NEG
19630: PUSH
19631: LD_INT 1
19633: NEG
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 2
19641: NEG
19642: PUSH
19643: LD_INT 2
19645: NEG
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 1
19653: NEG
19654: PUSH
19655: LD_INT 2
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 2
19664: NEG
19665: PUSH
19666: LD_INT 1
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 3
19675: NEG
19676: PUSH
19677: LD_INT 1
19679: NEG
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 3
19687: NEG
19688: PUSH
19689: LD_INT 2
19691: NEG
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19722: LD_ADDR_VAR 0 28
19726: PUSH
19727: LD_INT 0
19729: PUSH
19730: LD_INT 0
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 0
19739: PUSH
19740: LD_INT 1
19742: NEG
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 1
19750: PUSH
19751: LD_INT 0
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 1
19760: PUSH
19761: LD_INT 1
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 0
19770: PUSH
19771: LD_INT 1
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 1
19780: NEG
19781: PUSH
19782: LD_INT 0
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 1
19791: NEG
19792: PUSH
19793: LD_INT 1
19795: NEG
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 1
19803: NEG
19804: PUSH
19805: LD_INT 2
19807: NEG
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 0
19815: PUSH
19816: LD_INT 2
19818: NEG
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 1
19826: PUSH
19827: LD_INT 1
19829: NEG
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 2
19837: PUSH
19838: LD_INT 0
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 2
19847: PUSH
19848: LD_INT 1
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 2
19857: PUSH
19858: LD_INT 2
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 1
19867: PUSH
19868: LD_INT 2
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 0
19877: PUSH
19878: LD_INT 2
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 1
19887: NEG
19888: PUSH
19889: LD_INT 1
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 2
19898: NEG
19899: PUSH
19900: LD_INT 0
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 2
19909: NEG
19910: PUSH
19911: LD_INT 1
19913: NEG
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 2
19921: NEG
19922: PUSH
19923: LD_INT 2
19925: NEG
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 2
19933: NEG
19934: PUSH
19935: LD_INT 3
19937: NEG
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 1
19945: NEG
19946: PUSH
19947: LD_INT 3
19949: NEG
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 3
19957: NEG
19958: PUSH
19959: LD_INT 1
19961: NEG
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: LD_INT 3
19969: NEG
19970: PUSH
19971: LD_INT 2
19973: NEG
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20004: LD_ADDR_VAR 0 29
20008: PUSH
20009: LD_INT 0
20011: PUSH
20012: LD_INT 0
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 0
20021: PUSH
20022: LD_INT 1
20024: NEG
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 1
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 1
20042: PUSH
20043: LD_INT 1
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 0
20052: PUSH
20053: LD_INT 1
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 1
20062: NEG
20063: PUSH
20064: LD_INT 0
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 1
20073: NEG
20074: PUSH
20075: LD_INT 1
20077: NEG
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 1
20085: NEG
20086: PUSH
20087: LD_INT 2
20089: NEG
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 0
20097: PUSH
20098: LD_INT 2
20100: NEG
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: LD_INT 1
20108: PUSH
20109: LD_INT 1
20111: NEG
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 2
20119: PUSH
20120: LD_INT 0
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 2
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 1
20139: PUSH
20140: LD_INT 2
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 0
20149: PUSH
20150: LD_INT 2
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: NEG
20160: PUSH
20161: LD_INT 1
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 2
20170: NEG
20171: PUSH
20172: LD_INT 1
20174: NEG
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 2
20182: NEG
20183: PUSH
20184: LD_INT 2
20186: NEG
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 2
20194: NEG
20195: PUSH
20196: LD_INT 3
20198: NEG
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 2
20206: PUSH
20207: LD_INT 1
20209: NEG
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 3
20217: PUSH
20218: LD_INT 1
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 1
20227: PUSH
20228: LD_INT 3
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 1
20237: NEG
20238: PUSH
20239: LD_INT 2
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 3
20248: NEG
20249: PUSH
20250: LD_INT 2
20252: NEG
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20283: LD_ADDR_VAR 0 30
20287: PUSH
20288: LD_INT 0
20290: PUSH
20291: LD_INT 0
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 0
20300: PUSH
20301: LD_INT 1
20303: NEG
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 1
20311: PUSH
20312: LD_INT 0
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 1
20321: PUSH
20322: LD_INT 1
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 0
20331: PUSH
20332: LD_INT 1
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 1
20341: NEG
20342: PUSH
20343: LD_INT 0
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 1
20352: NEG
20353: PUSH
20354: LD_INT 1
20356: NEG
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 1
20364: NEG
20365: PUSH
20366: LD_INT 2
20368: NEG
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 0
20376: PUSH
20377: LD_INT 2
20379: NEG
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 1
20387: PUSH
20388: LD_INT 1
20390: NEG
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 2
20398: PUSH
20399: LD_INT 0
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 2
20408: PUSH
20409: LD_INT 1
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 2
20418: PUSH
20419: LD_INT 2
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 1
20428: PUSH
20429: LD_INT 2
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 1
20438: NEG
20439: PUSH
20440: LD_INT 1
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 2
20449: NEG
20450: PUSH
20451: LD_INT 0
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 2
20460: NEG
20461: PUSH
20462: LD_INT 1
20464: NEG
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 1
20472: NEG
20473: PUSH
20474: LD_INT 3
20476: NEG
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 1
20484: PUSH
20485: LD_INT 2
20487: NEG
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 3
20495: PUSH
20496: LD_INT 2
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 2
20505: PUSH
20506: LD_INT 3
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 2
20515: NEG
20516: PUSH
20517: LD_INT 1
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 3
20526: NEG
20527: PUSH
20528: LD_INT 1
20530: NEG
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20561: LD_ADDR_VAR 0 31
20565: PUSH
20566: LD_INT 0
20568: PUSH
20569: LD_INT 0
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 0
20578: PUSH
20579: LD_INT 1
20581: NEG
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 1
20589: PUSH
20590: LD_INT 0
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 1
20599: PUSH
20600: LD_INT 1
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 0
20609: PUSH
20610: LD_INT 1
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 1
20619: NEG
20620: PUSH
20621: LD_INT 0
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 1
20630: NEG
20631: PUSH
20632: LD_INT 1
20634: NEG
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 1
20642: NEG
20643: PUSH
20644: LD_INT 2
20646: NEG
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 1
20654: PUSH
20655: LD_INT 1
20657: NEG
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 2
20665: PUSH
20666: LD_INT 0
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 2
20675: PUSH
20676: LD_INT 1
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 2
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 1
20695: PUSH
20696: LD_INT 2
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 0
20705: PUSH
20706: LD_INT 2
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: NEG
20716: PUSH
20717: LD_INT 1
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 2
20726: NEG
20727: PUSH
20728: LD_INT 1
20730: NEG
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 2
20738: NEG
20739: PUSH
20740: LD_INT 2
20742: NEG
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 2
20750: NEG
20751: PUSH
20752: LD_INT 3
20754: NEG
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 2
20762: PUSH
20763: LD_INT 1
20765: NEG
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 3
20773: PUSH
20774: LD_INT 1
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 1
20783: PUSH
20784: LD_INT 3
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 1
20793: NEG
20794: PUSH
20795: LD_INT 2
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 3
20804: NEG
20805: PUSH
20806: LD_INT 2
20808: NEG
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20839: LD_ADDR_VAR 0 32
20843: PUSH
20844: LD_INT 0
20846: PUSH
20847: LD_INT 0
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 0
20856: PUSH
20857: LD_INT 1
20859: NEG
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 1
20867: PUSH
20868: LD_INT 0
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 1
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 0
20887: PUSH
20888: LD_INT 1
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 1
20897: NEG
20898: PUSH
20899: LD_INT 0
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 1
20908: NEG
20909: PUSH
20910: LD_INT 1
20912: NEG
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 1
20920: NEG
20921: PUSH
20922: LD_INT 2
20924: NEG
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 0
20932: PUSH
20933: LD_INT 2
20935: NEG
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 1
20943: PUSH
20944: LD_INT 1
20946: NEG
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 2
20954: PUSH
20955: LD_INT 1
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 2
20964: PUSH
20965: LD_INT 2
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 1
20974: PUSH
20975: LD_INT 2
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 0
20984: PUSH
20985: LD_INT 2
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 1
20994: NEG
20995: PUSH
20996: LD_INT 1
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 2
21005: NEG
21006: PUSH
21007: LD_INT 0
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 2
21016: NEG
21017: PUSH
21018: LD_INT 1
21020: NEG
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: LD_INT 3
21032: NEG
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 1
21040: PUSH
21041: LD_INT 2
21043: NEG
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 3
21051: PUSH
21052: LD_INT 2
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 2
21061: PUSH
21062: LD_INT 3
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 2
21071: NEG
21072: PUSH
21073: LD_INT 1
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 3
21082: NEG
21083: PUSH
21084: LD_INT 1
21086: NEG
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21117: LD_ADDR_VAR 0 33
21121: PUSH
21122: LD_INT 0
21124: PUSH
21125: LD_INT 0
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 0
21134: PUSH
21135: LD_INT 1
21137: NEG
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 1
21145: PUSH
21146: LD_INT 0
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 1
21155: PUSH
21156: LD_INT 1
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 0
21165: PUSH
21166: LD_INT 1
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 1
21175: NEG
21176: PUSH
21177: LD_INT 0
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 1
21186: NEG
21187: PUSH
21188: LD_INT 1
21190: NEG
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 1
21198: NEG
21199: PUSH
21200: LD_INT 2
21202: NEG
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 1
21210: PUSH
21211: LD_INT 1
21213: NEG
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 2
21221: PUSH
21222: LD_INT 0
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 2
21231: PUSH
21232: LD_INT 1
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 1
21241: PUSH
21242: LD_INT 2
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 0
21251: PUSH
21252: LD_INT 2
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 1
21261: NEG
21262: PUSH
21263: LD_INT 1
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 2
21272: NEG
21273: PUSH
21274: LD_INT 0
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 2
21283: NEG
21284: PUSH
21285: LD_INT 1
21287: NEG
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 2
21295: NEG
21296: PUSH
21297: LD_INT 2
21299: NEG
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 2
21307: NEG
21308: PUSH
21309: LD_INT 3
21311: NEG
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 2
21319: PUSH
21320: LD_INT 1
21322: NEG
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 3
21330: PUSH
21331: LD_INT 1
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 1
21340: PUSH
21341: LD_INT 3
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 1
21350: NEG
21351: PUSH
21352: LD_INT 2
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 3
21361: NEG
21362: PUSH
21363: LD_INT 2
21365: NEG
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21396: LD_ADDR_VAR 0 34
21400: PUSH
21401: LD_INT 0
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 0
21413: PUSH
21414: LD_INT 1
21416: NEG
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 1
21424: PUSH
21425: LD_INT 0
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 1
21434: PUSH
21435: LD_INT 1
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 0
21444: PUSH
21445: LD_INT 1
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 1
21454: NEG
21455: PUSH
21456: LD_INT 0
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 1
21465: NEG
21466: PUSH
21467: LD_INT 1
21469: NEG
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 1
21477: NEG
21478: PUSH
21479: LD_INT 2
21481: NEG
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 0
21489: PUSH
21490: LD_INT 2
21492: NEG
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 1
21500: PUSH
21501: LD_INT 1
21503: NEG
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 2
21511: PUSH
21512: LD_INT 1
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 2
21521: PUSH
21522: LD_INT 2
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 1
21531: PUSH
21532: LD_INT 2
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 1
21541: NEG
21542: PUSH
21543: LD_INT 1
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 2
21552: NEG
21553: PUSH
21554: LD_INT 0
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 2
21563: NEG
21564: PUSH
21565: LD_INT 1
21567: NEG
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 2
21575: NEG
21576: PUSH
21577: LD_INT 2
21579: NEG
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 1
21587: NEG
21588: PUSH
21589: LD_INT 3
21591: NEG
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 1
21599: PUSH
21600: LD_INT 2
21602: NEG
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 3
21610: PUSH
21611: LD_INT 2
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 2
21620: PUSH
21621: LD_INT 3
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 2
21630: NEG
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 3
21641: NEG
21642: PUSH
21643: LD_INT 1
21645: NEG
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21676: LD_ADDR_VAR 0 35
21680: PUSH
21681: LD_INT 0
21683: PUSH
21684: LD_INT 0
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 0
21693: PUSH
21694: LD_INT 1
21696: NEG
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: LD_INT 0
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 0
21724: PUSH
21725: LD_INT 1
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 1
21734: NEG
21735: PUSH
21736: LD_INT 0
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: LD_INT 1
21749: NEG
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 2
21757: PUSH
21758: LD_INT 1
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 2
21767: NEG
21768: PUSH
21769: LD_INT 1
21771: NEG
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21788: LD_ADDR_VAR 0 36
21792: PUSH
21793: LD_INT 0
21795: PUSH
21796: LD_INT 0
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 0
21805: PUSH
21806: LD_INT 1
21808: NEG
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 1
21816: PUSH
21817: LD_INT 0
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 1
21826: PUSH
21827: LD_INT 1
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 0
21836: PUSH
21837: LD_INT 1
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 1
21846: NEG
21847: PUSH
21848: LD_INT 0
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 1
21857: NEG
21858: PUSH
21859: LD_INT 1
21861: NEG
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 1
21869: NEG
21870: PUSH
21871: LD_INT 2
21873: NEG
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 1
21881: PUSH
21882: LD_INT 2
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21900: LD_ADDR_VAR 0 37
21904: PUSH
21905: LD_INT 0
21907: PUSH
21908: LD_INT 0
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 0
21917: PUSH
21918: LD_INT 1
21920: NEG
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_INT 1
21928: PUSH
21929: LD_INT 0
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 1
21938: PUSH
21939: LD_INT 1
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 0
21948: PUSH
21949: LD_INT 1
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 1
21958: NEG
21959: PUSH
21960: LD_INT 0
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 1
21969: NEG
21970: PUSH
21971: LD_INT 1
21973: NEG
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 1
21981: PUSH
21982: LD_INT 1
21984: NEG
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 1
21992: NEG
21993: PUSH
21994: LD_INT 1
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22012: LD_ADDR_VAR 0 38
22016: PUSH
22017: LD_INT 0
22019: PUSH
22020: LD_INT 0
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 0
22029: PUSH
22030: LD_INT 1
22032: NEG
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 1
22040: PUSH
22041: LD_INT 0
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 1
22050: PUSH
22051: LD_INT 1
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 0
22060: PUSH
22061: LD_INT 1
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 1
22070: NEG
22071: PUSH
22072: LD_INT 0
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 1
22081: NEG
22082: PUSH
22083: LD_INT 1
22085: NEG
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 2
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 2
22103: NEG
22104: PUSH
22105: LD_INT 1
22107: NEG
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22124: LD_ADDR_VAR 0 39
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: LD_INT 0
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 0
22141: PUSH
22142: LD_INT 1
22144: NEG
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: LD_INT 0
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 1
22162: PUSH
22163: LD_INT 1
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 0
22172: PUSH
22173: LD_INT 1
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 1
22182: NEG
22183: PUSH
22184: LD_INT 0
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 1
22193: NEG
22194: PUSH
22195: LD_INT 1
22197: NEG
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 1
22205: NEG
22206: PUSH
22207: LD_INT 2
22209: NEG
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 1
22217: PUSH
22218: LD_INT 2
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22236: LD_ADDR_VAR 0 40
22240: PUSH
22241: LD_INT 0
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 0
22253: PUSH
22254: LD_INT 1
22256: NEG
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 1
22264: PUSH
22265: LD_INT 0
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 1
22274: PUSH
22275: LD_INT 1
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 0
22284: PUSH
22285: LD_INT 1
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 1
22294: NEG
22295: PUSH
22296: LD_INT 0
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 1
22305: NEG
22306: PUSH
22307: LD_INT 1
22309: NEG
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 1
22317: PUSH
22318: LD_INT 1
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: LD_INT 1
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22348: LD_ADDR_VAR 0 41
22352: PUSH
22353: LD_INT 0
22355: PUSH
22356: LD_INT 0
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 0
22365: PUSH
22366: LD_INT 1
22368: NEG
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 1
22376: PUSH
22377: LD_INT 0
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 1
22386: PUSH
22387: LD_INT 1
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 0
22396: PUSH
22397: LD_INT 1
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 1
22406: NEG
22407: PUSH
22408: LD_INT 0
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 1
22417: NEG
22418: PUSH
22419: LD_INT 1
22421: NEG
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 1
22429: NEG
22430: PUSH
22431: LD_INT 2
22433: NEG
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: LD_INT 1
22444: NEG
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 2
22452: PUSH
22453: LD_INT 0
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: LD_INT 1
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 2
22472: PUSH
22473: LD_INT 2
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: LD_INT 2
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 1
22492: NEG
22493: PUSH
22494: LD_INT 1
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 2
22503: NEG
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 2
22514: NEG
22515: PUSH
22516: LD_INT 1
22518: NEG
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 2
22526: NEG
22527: PUSH
22528: LD_INT 2
22530: NEG
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 2
22538: NEG
22539: PUSH
22540: LD_INT 3
22542: NEG
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 2
22550: PUSH
22551: LD_INT 1
22553: NEG
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 3
22561: PUSH
22562: LD_INT 0
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 3
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 3
22581: PUSH
22582: LD_INT 2
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 3
22591: PUSH
22592: LD_INT 3
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 2
22601: PUSH
22602: LD_INT 3
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 2
22611: NEG
22612: PUSH
22613: LD_INT 1
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 3
22622: NEG
22623: PUSH
22624: LD_INT 0
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 3
22633: NEG
22634: PUSH
22635: LD_INT 1
22637: NEG
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 3
22645: NEG
22646: PUSH
22647: LD_INT 2
22649: NEG
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 3
22657: NEG
22658: PUSH
22659: LD_INT 3
22661: NEG
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22698: LD_ADDR_VAR 0 42
22702: PUSH
22703: LD_INT 0
22705: PUSH
22706: LD_INT 0
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 0
22715: PUSH
22716: LD_INT 1
22718: NEG
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 1
22726: PUSH
22727: LD_INT 0
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 1
22736: PUSH
22737: LD_INT 1
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 0
22746: PUSH
22747: LD_INT 1
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 1
22756: NEG
22757: PUSH
22758: LD_INT 0
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 1
22767: NEG
22768: PUSH
22769: LD_INT 1
22771: NEG
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 1
22779: NEG
22780: PUSH
22781: LD_INT 2
22783: NEG
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 0
22791: PUSH
22792: LD_INT 2
22794: NEG
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 1
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 2
22813: PUSH
22814: LD_INT 1
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 2
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 1
22833: PUSH
22834: LD_INT 2
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 0
22843: PUSH
22844: LD_INT 2
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 1
22853: NEG
22854: PUSH
22855: LD_INT 1
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 2
22864: NEG
22865: PUSH
22866: LD_INT 1
22868: NEG
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 2
22876: NEG
22877: PUSH
22878: LD_INT 2
22880: NEG
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 2
22888: NEG
22889: PUSH
22890: LD_INT 3
22892: NEG
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 1
22900: NEG
22901: PUSH
22902: LD_INT 3
22904: NEG
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 0
22912: PUSH
22913: LD_INT 3
22915: NEG
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 1
22923: PUSH
22924: LD_INT 2
22926: NEG
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 3
22934: PUSH
22935: LD_INT 2
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 3
22944: PUSH
22945: LD_INT 3
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 2
22954: PUSH
22955: LD_INT 3
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 1
22964: PUSH
22965: LD_INT 3
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 0
22974: PUSH
22975: LD_INT 3
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 1
22984: NEG
22985: PUSH
22986: LD_INT 2
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 3
22995: NEG
22996: PUSH
22997: LD_INT 2
22999: NEG
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 3
23007: NEG
23008: PUSH
23009: LD_INT 3
23011: NEG
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23048: LD_ADDR_VAR 0 43
23052: PUSH
23053: LD_INT 0
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 0
23065: PUSH
23066: LD_INT 1
23068: NEG
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 1
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 1
23086: PUSH
23087: LD_INT 1
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 0
23096: PUSH
23097: LD_INT 1
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 1
23106: NEG
23107: PUSH
23108: LD_INT 0
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 1
23117: NEG
23118: PUSH
23119: LD_INT 1
23121: NEG
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 1
23129: NEG
23130: PUSH
23131: LD_INT 2
23133: NEG
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 0
23141: PUSH
23142: LD_INT 2
23144: NEG
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: LD_INT 1
23155: NEG
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 2
23163: PUSH
23164: LD_INT 0
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 2
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 1
23183: PUSH
23184: LD_INT 2
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 0
23193: PUSH
23194: LD_INT 2
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 1
23203: NEG
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 2
23214: NEG
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 2
23225: NEG
23226: PUSH
23227: LD_INT 1
23229: NEG
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 1
23237: NEG
23238: PUSH
23239: LD_INT 3
23241: NEG
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 0
23249: PUSH
23250: LD_INT 3
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: LD_INT 2
23263: NEG
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 2
23271: PUSH
23272: LD_INT 1
23274: NEG
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 3
23282: PUSH
23283: LD_INT 0
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 3
23292: PUSH
23293: LD_INT 1
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 1
23302: PUSH
23303: LD_INT 3
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 0
23312: PUSH
23313: LD_INT 3
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 1
23322: NEG
23323: PUSH
23324: LD_INT 2
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 2
23333: NEG
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 3
23344: NEG
23345: PUSH
23346: LD_INT 0
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 3
23355: NEG
23356: PUSH
23357: LD_INT 1
23359: NEG
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23396: LD_ADDR_VAR 0 44
23400: PUSH
23401: LD_INT 0
23403: PUSH
23404: LD_INT 0
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 0
23413: PUSH
23414: LD_INT 1
23416: NEG
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 1
23424: PUSH
23425: LD_INT 0
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 1
23434: PUSH
23435: LD_INT 1
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 0
23444: PUSH
23445: LD_INT 1
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 1
23454: NEG
23455: PUSH
23456: LD_INT 0
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 1
23465: NEG
23466: PUSH
23467: LD_INT 1
23469: NEG
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 1
23477: NEG
23478: PUSH
23479: LD_INT 2
23481: NEG
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 1
23489: PUSH
23490: LD_INT 1
23492: NEG
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 2
23500: PUSH
23501: LD_INT 0
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 2
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 2
23520: PUSH
23521: LD_INT 2
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 1
23530: PUSH
23531: LD_INT 2
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 1
23540: NEG
23541: PUSH
23542: LD_INT 1
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 2
23551: NEG
23552: PUSH
23553: LD_INT 0
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 2
23562: NEG
23563: PUSH
23564: LD_INT 1
23566: NEG
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 2
23574: NEG
23575: PUSH
23576: LD_INT 2
23578: NEG
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 2
23586: NEG
23587: PUSH
23588: LD_INT 3
23590: NEG
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 2
23598: PUSH
23599: LD_INT 1
23601: NEG
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 3
23609: PUSH
23610: LD_INT 0
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 3
23619: PUSH
23620: LD_INT 1
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 3
23629: PUSH
23630: LD_INT 2
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 3
23639: PUSH
23640: LD_INT 3
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 2
23649: PUSH
23650: LD_INT 3
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 2
23659: NEG
23660: PUSH
23661: LD_INT 1
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 3
23670: NEG
23671: PUSH
23672: LD_INT 0
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 3
23681: NEG
23682: PUSH
23683: LD_INT 1
23685: NEG
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 3
23693: NEG
23694: PUSH
23695: LD_INT 2
23697: NEG
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 3
23705: NEG
23706: PUSH
23707: LD_INT 3
23709: NEG
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23746: LD_ADDR_VAR 0 45
23750: PUSH
23751: LD_INT 0
23753: PUSH
23754: LD_INT 0
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 0
23763: PUSH
23764: LD_INT 1
23766: NEG
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 1
23774: PUSH
23775: LD_INT 0
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: PUSH
23785: LD_INT 1
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 0
23794: PUSH
23795: LD_INT 1
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 1
23804: NEG
23805: PUSH
23806: LD_INT 0
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 1
23815: NEG
23816: PUSH
23817: LD_INT 1
23819: NEG
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 1
23827: NEG
23828: PUSH
23829: LD_INT 2
23831: NEG
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 0
23839: PUSH
23840: LD_INT 2
23842: NEG
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: PUSH
23851: LD_INT 1
23853: NEG
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 2
23861: PUSH
23862: LD_INT 1
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 2
23871: PUSH
23872: LD_INT 2
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 1
23881: PUSH
23882: LD_INT 2
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 0
23891: PUSH
23892: LD_INT 2
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 1
23901: NEG
23902: PUSH
23903: LD_INT 1
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 2
23912: NEG
23913: PUSH
23914: LD_INT 1
23916: NEG
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 2
23924: NEG
23925: PUSH
23926: LD_INT 2
23928: NEG
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 2
23936: NEG
23937: PUSH
23938: LD_INT 3
23940: NEG
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 1
23948: NEG
23949: PUSH
23950: LD_INT 3
23952: NEG
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 0
23960: PUSH
23961: LD_INT 3
23963: NEG
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 1
23971: PUSH
23972: LD_INT 2
23974: NEG
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 3
23982: PUSH
23983: LD_INT 2
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 3
23992: PUSH
23993: LD_INT 3
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 2
24002: PUSH
24003: LD_INT 3
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 1
24012: PUSH
24013: LD_INT 3
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 0
24022: PUSH
24023: LD_INT 3
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 1
24032: NEG
24033: PUSH
24034: LD_INT 2
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: LD_INT 3
24043: NEG
24044: PUSH
24045: LD_INT 2
24047: NEG
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 3
24055: NEG
24056: PUSH
24057: LD_INT 3
24059: NEG
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24096: LD_ADDR_VAR 0 46
24100: PUSH
24101: LD_INT 0
24103: PUSH
24104: LD_INT 0
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 0
24113: PUSH
24114: LD_INT 1
24116: NEG
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 1
24124: PUSH
24125: LD_INT 0
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 1
24134: PUSH
24135: LD_INT 1
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 0
24144: PUSH
24145: LD_INT 1
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 1
24154: NEG
24155: PUSH
24156: LD_INT 0
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 1
24165: NEG
24166: PUSH
24167: LD_INT 1
24169: NEG
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 1
24177: NEG
24178: PUSH
24179: LD_INT 2
24181: NEG
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 0
24189: PUSH
24190: LD_INT 2
24192: NEG
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 1
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 2
24211: PUSH
24212: LD_INT 0
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 2
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 1
24231: PUSH
24232: LD_INT 2
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 0
24241: PUSH
24242: LD_INT 2
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 1
24251: NEG
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 2
24262: NEG
24263: PUSH
24264: LD_INT 0
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 2
24273: NEG
24274: PUSH
24275: LD_INT 1
24277: NEG
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 1
24285: NEG
24286: PUSH
24287: LD_INT 3
24289: NEG
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 0
24297: PUSH
24298: LD_INT 3
24300: NEG
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: LD_INT 2
24311: NEG
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 2
24319: PUSH
24320: LD_INT 1
24322: NEG
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 3
24330: PUSH
24331: LD_INT 0
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 3
24340: PUSH
24341: LD_INT 1
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 1
24350: PUSH
24351: LD_INT 3
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: LD_INT 3
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 1
24370: NEG
24371: PUSH
24372: LD_INT 2
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 2
24381: NEG
24382: PUSH
24383: LD_INT 1
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 3
24392: NEG
24393: PUSH
24394: LD_INT 0
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 3
24403: NEG
24404: PUSH
24405: LD_INT 1
24407: NEG
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24444: LD_ADDR_VAR 0 47
24448: PUSH
24449: LD_INT 0
24451: PUSH
24452: LD_INT 0
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 0
24461: PUSH
24462: LD_INT 1
24464: NEG
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 1
24472: PUSH
24473: LD_INT 0
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 1
24482: PUSH
24483: LD_INT 1
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 0
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 1
24502: NEG
24503: PUSH
24504: LD_INT 0
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 1
24513: NEG
24514: PUSH
24515: LD_INT 1
24517: NEG
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: LD_INT 2
24529: NEG
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 0
24537: PUSH
24538: LD_INT 2
24540: NEG
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 1
24548: PUSH
24549: LD_INT 1
24551: NEG
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 2
24559: NEG
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 2
24571: NEG
24572: PUSH
24573: LD_INT 2
24575: NEG
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24595: LD_ADDR_VAR 0 48
24599: PUSH
24600: LD_INT 0
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 0
24612: PUSH
24613: LD_INT 1
24615: NEG
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 1
24623: PUSH
24624: LD_INT 0
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 1
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 0
24643: PUSH
24644: LD_INT 1
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 1
24653: NEG
24654: PUSH
24655: LD_INT 0
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 1
24664: NEG
24665: PUSH
24666: LD_INT 1
24668: NEG
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 1
24676: NEG
24677: PUSH
24678: LD_INT 2
24680: NEG
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: LD_INT 2
24691: NEG
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 1
24699: PUSH
24700: LD_INT 1
24702: NEG
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 2
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 2
24720: PUSH
24721: LD_INT 1
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24742: LD_ADDR_VAR 0 49
24746: PUSH
24747: LD_INT 0
24749: PUSH
24750: LD_INT 0
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 0
24759: PUSH
24760: LD_INT 1
24762: NEG
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 1
24770: PUSH
24771: LD_INT 0
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 0
24790: PUSH
24791: LD_INT 1
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 1
24800: NEG
24801: PUSH
24802: LD_INT 0
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 1
24811: NEG
24812: PUSH
24813: LD_INT 1
24815: NEG
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 1
24823: PUSH
24824: LD_INT 1
24826: NEG
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 2
24834: PUSH
24835: LD_INT 0
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 2
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 2
24854: PUSH
24855: LD_INT 2
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 1
24864: PUSH
24865: LD_INT 2
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24886: LD_ADDR_VAR 0 50
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: LD_INT 1
24906: NEG
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 1
24924: PUSH
24925: LD_INT 1
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 0
24934: PUSH
24935: LD_INT 1
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 1
24944: NEG
24945: PUSH
24946: LD_INT 0
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 1
24955: NEG
24956: PUSH
24957: LD_INT 1
24959: NEG
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 2
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 2
24977: PUSH
24978: LD_INT 2
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: LD_INT 2
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 0
24997: PUSH
24998: LD_INT 2
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 1
25007: NEG
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25030: LD_ADDR_VAR 0 51
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: LD_INT 0
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 0
25047: PUSH
25048: LD_INT 1
25050: NEG
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: PUSH
25059: LD_INT 0
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 0
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 1
25088: NEG
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: NEG
25100: PUSH
25101: LD_INT 1
25103: NEG
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 1
25111: PUSH
25112: LD_INT 2
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: LD_INT 2
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 1
25131: NEG
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 2
25142: NEG
25143: PUSH
25144: LD_INT 0
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 2
25153: NEG
25154: PUSH
25155: LD_INT 1
25157: NEG
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25177: LD_ADDR_VAR 0 52
25181: PUSH
25182: LD_INT 0
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 0
25194: PUSH
25195: LD_INT 1
25197: NEG
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 1
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 0
25225: PUSH
25226: LD_INT 1
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 1
25235: NEG
25236: PUSH
25237: LD_INT 0
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 1
25246: NEG
25247: PUSH
25248: LD_INT 1
25250: NEG
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 1
25258: NEG
25259: PUSH
25260: LD_INT 2
25262: NEG
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 1
25270: NEG
25271: PUSH
25272: LD_INT 1
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 2
25281: NEG
25282: PUSH
25283: LD_INT 0
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 2
25292: NEG
25293: PUSH
25294: LD_INT 1
25296: NEG
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 2
25304: NEG
25305: PUSH
25306: LD_INT 2
25308: NEG
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25328: LD_ADDR_VAR 0 53
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: LD_INT 0
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: LD_INT 1
25348: NEG
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 1
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: PUSH
25367: LD_INT 1
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 0
25376: PUSH
25377: LD_INT 1
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 1
25386: NEG
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 1
25397: NEG
25398: PUSH
25399: LD_INT 1
25401: NEG
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 1
25409: NEG
25410: PUSH
25411: LD_INT 2
25413: NEG
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: LD_INT 2
25424: NEG
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 1
25432: PUSH
25433: LD_INT 1
25435: NEG
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 2
25443: PUSH
25444: LD_INT 0
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 2
25453: PUSH
25454: LD_INT 1
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 2
25463: PUSH
25464: LD_INT 2
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: LD_INT 2
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: LD_INT 2
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: LD_INT 1
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 2
25504: NEG
25505: PUSH
25506: LD_INT 0
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 2
25515: NEG
25516: PUSH
25517: LD_INT 1
25519: NEG
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 2
25527: NEG
25528: PUSH
25529: LD_INT 2
25531: NEG
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25558: LD_ADDR_VAR 0 54
25562: PUSH
25563: LD_INT 0
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 0
25575: PUSH
25576: LD_INT 1
25578: NEG
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 1
25586: PUSH
25587: LD_INT 0
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 0
25606: PUSH
25607: LD_INT 1
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 1
25616: NEG
25617: PUSH
25618: LD_INT 0
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 1
25627: NEG
25628: PUSH
25629: LD_INT 1
25631: NEG
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: LD_INT 2
25643: NEG
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 0
25651: PUSH
25652: LD_INT 2
25654: NEG
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 1
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 2
25673: PUSH
25674: LD_INT 0
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 2
25683: PUSH
25684: LD_INT 1
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 2
25693: PUSH
25694: LD_INT 2
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: LD_INT 2
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 0
25713: PUSH
25714: LD_INT 2
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 2
25734: NEG
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 2
25745: NEG
25746: PUSH
25747: LD_INT 1
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 2
25757: NEG
25758: PUSH
25759: LD_INT 2
25761: NEG
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25788: LD_ADDR_VAR 0 55
25792: PUSH
25793: LD_INT 0
25795: PUSH
25796: LD_INT 0
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 0
25805: PUSH
25806: LD_INT 1
25808: NEG
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 1
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 1
25826: PUSH
25827: LD_INT 1
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 0
25836: PUSH
25837: LD_INT 1
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 1
25846: NEG
25847: PUSH
25848: LD_INT 0
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 1
25857: NEG
25858: PUSH
25859: LD_INT 1
25861: NEG
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: LD_INT 2
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 0
25881: PUSH
25882: LD_INT 2
25884: NEG
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: LD_INT 1
25895: NEG
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 2
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 2
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 2
25923: PUSH
25924: LD_INT 2
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 1
25933: PUSH
25934: LD_INT 2
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 0
25943: PUSH
25944: LD_INT 2
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: LD_INT 1
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 2
25964: NEG
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 2
25975: NEG
25976: PUSH
25977: LD_INT 1
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 2
25987: NEG
25988: PUSH
25989: LD_INT 2
25991: NEG
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26018: LD_ADDR_VAR 0 56
26022: PUSH
26023: LD_INT 0
26025: PUSH
26026: LD_INT 0
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 0
26035: PUSH
26036: LD_INT 1
26038: NEG
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 1
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 1
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 0
26066: PUSH
26067: LD_INT 1
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 1
26076: NEG
26077: PUSH
26078: LD_INT 0
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 1
26087: NEG
26088: PUSH
26089: LD_INT 1
26091: NEG
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: PUSH
26101: LD_INT 2
26103: NEG
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: LD_INT 2
26114: NEG
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: PUSH
26123: LD_INT 1
26125: NEG
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 2
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 2
26143: PUSH
26144: LD_INT 1
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 2
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: LD_INT 2
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 0
26173: PUSH
26174: LD_INT 2
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 1
26183: NEG
26184: PUSH
26185: LD_INT 1
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 2
26194: NEG
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 2
26205: NEG
26206: PUSH
26207: LD_INT 1
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 2
26217: NEG
26218: PUSH
26219: LD_INT 2
26221: NEG
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26248: LD_ADDR_VAR 0 57
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 0
26265: PUSH
26266: LD_INT 1
26268: NEG
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 1
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 1
26286: PUSH
26287: LD_INT 1
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 0
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 1
26306: NEG
26307: PUSH
26308: LD_INT 0
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 1
26317: NEG
26318: PUSH
26319: LD_INT 1
26321: NEG
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: LD_INT 2
26333: NEG
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 0
26341: PUSH
26342: LD_INT 2
26344: NEG
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 1
26352: PUSH
26353: LD_INT 1
26355: NEG
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 2
26363: PUSH
26364: LD_INT 0
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 2
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 2
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 1
26393: PUSH
26394: LD_INT 2
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 0
26403: PUSH
26404: LD_INT 2
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 1
26413: NEG
26414: PUSH
26415: LD_INT 1
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 2
26424: NEG
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 2
26435: NEG
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 2
26447: NEG
26448: PUSH
26449: LD_INT 2
26451: NEG
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26478: LD_ADDR_VAR 0 58
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 0
26495: PUSH
26496: LD_INT 1
26498: NEG
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 1
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 1
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: LD_INT 1
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 1
26536: NEG
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 1
26547: NEG
26548: PUSH
26549: LD_INT 1
26551: NEG
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 1
26559: NEG
26560: PUSH
26561: LD_INT 2
26563: NEG
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: LD_INT 2
26574: NEG
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 1
26582: PUSH
26583: LD_INT 1
26585: NEG
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 2
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 2
26603: PUSH
26604: LD_INT 1
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 2
26613: PUSH
26614: LD_INT 2
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 1
26623: PUSH
26624: LD_INT 2
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 0
26633: PUSH
26634: LD_INT 2
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: NEG
26644: PUSH
26645: LD_INT 1
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 2
26654: NEG
26655: PUSH
26656: LD_INT 0
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 2
26665: NEG
26666: PUSH
26667: LD_INT 1
26669: NEG
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 2
26677: NEG
26678: PUSH
26679: LD_INT 2
26681: NEG
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26708: LD_ADDR_VAR 0 59
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: LD_INT 0
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: LD_INT 1
26728: NEG
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 1
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 1
26746: PUSH
26747: LD_INT 1
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: LD_INT 1
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 1
26766: NEG
26767: PUSH
26768: LD_INT 0
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 1
26777: NEG
26778: PUSH
26779: LD_INT 1
26781: NEG
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26796: LD_ADDR_VAR 0 60
26800: PUSH
26801: LD_INT 0
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: LD_INT 1
26816: NEG
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 1
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: LD_INT 1
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 1
26854: NEG
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 1
26865: NEG
26866: PUSH
26867: LD_INT 1
26869: NEG
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26884: LD_ADDR_VAR 0 61
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: LD_INT 0
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: LD_INT 1
26904: NEG
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: LD_INT 0
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: LD_INT 1
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 1
26942: NEG
26943: PUSH
26944: LD_INT 0
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 1
26953: NEG
26954: PUSH
26955: LD_INT 1
26957: NEG
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26972: LD_ADDR_VAR 0 62
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 0
26989: PUSH
26990: LD_INT 1
26992: NEG
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: LD_INT 1
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 0
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: NEG
27031: PUSH
27032: LD_INT 0
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 1
27041: NEG
27042: PUSH
27043: LD_INT 1
27045: NEG
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27060: LD_ADDR_VAR 0 63
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 0
27077: PUSH
27078: LD_INT 1
27080: NEG
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 1
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: NEG
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: NEG
27130: PUSH
27131: LD_INT 1
27133: NEG
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27148: LD_ADDR_VAR 0 64
27152: PUSH
27153: LD_INT 0
27155: PUSH
27156: LD_INT 0
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 0
27165: PUSH
27166: LD_INT 1
27168: NEG
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 1
27176: PUSH
27177: LD_INT 0
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 1
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 0
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 1
27206: NEG
27207: PUSH
27208: LD_INT 0
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 1
27217: NEG
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: ST_TO_ADDR
// end ; 1 :
27236: GO 33133
27238: LD_INT 1
27240: DOUBLE
27241: EQUAL
27242: IFTRUE 27246
27244: GO 29869
27246: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27247: LD_ADDR_VAR 0 11
27251: PUSH
27252: LD_INT 1
27254: NEG
27255: PUSH
27256: LD_INT 3
27258: NEG
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 0
27266: PUSH
27267: LD_INT 3
27269: NEG
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: LD_INT 2
27280: NEG
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: LIST
27290: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27291: LD_ADDR_VAR 0 12
27295: PUSH
27296: LD_INT 2
27298: PUSH
27299: LD_INT 1
27301: NEG
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 3
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 3
27319: PUSH
27320: LD_INT 1
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: LIST
27331: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27332: LD_ADDR_VAR 0 13
27336: PUSH
27337: LD_INT 3
27339: PUSH
27340: LD_INT 2
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 3
27349: PUSH
27350: LD_INT 3
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 2
27359: PUSH
27360: LD_INT 3
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: LIST
27371: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27372: LD_ADDR_VAR 0 14
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: LD_INT 3
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: LD_INT 3
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 1
27399: NEG
27400: PUSH
27401: LD_INT 2
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: LIST
27412: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27413: LD_ADDR_VAR 0 15
27417: PUSH
27418: LD_INT 2
27420: NEG
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 3
27431: NEG
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 3
27442: NEG
27443: PUSH
27444: LD_INT 1
27446: NEG
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: LIST
27456: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27457: LD_ADDR_VAR 0 16
27461: PUSH
27462: LD_INT 2
27464: NEG
27465: PUSH
27466: LD_INT 3
27468: NEG
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 3
27476: NEG
27477: PUSH
27478: LD_INT 2
27480: NEG
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 3
27488: NEG
27489: PUSH
27490: LD_INT 3
27492: NEG
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: LIST
27502: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27503: LD_ADDR_VAR 0 17
27507: PUSH
27508: LD_INT 1
27510: NEG
27511: PUSH
27512: LD_INT 3
27514: NEG
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: LD_INT 3
27525: NEG
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 1
27533: PUSH
27534: LD_INT 2
27536: NEG
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: LIST
27546: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27547: LD_ADDR_VAR 0 18
27551: PUSH
27552: LD_INT 2
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 3
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 3
27575: PUSH
27576: LD_INT 1
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: LIST
27587: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27588: LD_ADDR_VAR 0 19
27592: PUSH
27593: LD_INT 3
27595: PUSH
27596: LD_INT 2
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 3
27605: PUSH
27606: LD_INT 3
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: LD_INT 3
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27628: LD_ADDR_VAR 0 20
27632: PUSH
27633: LD_INT 1
27635: PUSH
27636: LD_INT 3
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 0
27645: PUSH
27646: LD_INT 3
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 1
27655: NEG
27656: PUSH
27657: LD_INT 2
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: LIST
27668: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27669: LD_ADDR_VAR 0 21
27673: PUSH
27674: LD_INT 2
27676: NEG
27677: PUSH
27678: LD_INT 1
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 3
27687: NEG
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 3
27698: NEG
27699: PUSH
27700: LD_INT 1
27702: NEG
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: LIST
27712: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27713: LD_ADDR_VAR 0 22
27717: PUSH
27718: LD_INT 2
27720: NEG
27721: PUSH
27722: LD_INT 3
27724: NEG
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 3
27732: NEG
27733: PUSH
27734: LD_INT 2
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 3
27744: NEG
27745: PUSH
27746: LD_INT 3
27748: NEG
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: LIST
27758: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27759: LD_ADDR_VAR 0 23
27763: PUSH
27764: LD_INT 0
27766: PUSH
27767: LD_INT 3
27769: NEG
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 1
27777: NEG
27778: PUSH
27779: LD_INT 4
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: PUSH
27790: LD_INT 3
27792: NEG
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: LIST
27802: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27803: LD_ADDR_VAR 0 24
27807: PUSH
27808: LD_INT 3
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 3
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 4
27831: PUSH
27832: LD_INT 1
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: LIST
27843: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27844: LD_ADDR_VAR 0 25
27848: PUSH
27849: LD_INT 3
27851: PUSH
27852: LD_INT 3
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 4
27861: PUSH
27862: LD_INT 3
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 3
27871: PUSH
27872: LD_INT 4
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: LIST
27883: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27884: LD_ADDR_VAR 0 26
27888: PUSH
27889: LD_INT 0
27891: PUSH
27892: LD_INT 3
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 1
27901: PUSH
27902: LD_INT 4
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: LD_INT 3
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27925: LD_ADDR_VAR 0 27
27929: PUSH
27930: LD_INT 3
27932: NEG
27933: PUSH
27934: LD_INT 0
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 3
27943: NEG
27944: PUSH
27945: LD_INT 1
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 4
27954: NEG
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: LIST
27968: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27969: LD_ADDR_VAR 0 28
27973: PUSH
27974: LD_INT 3
27976: NEG
27977: PUSH
27978: LD_INT 3
27980: NEG
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 3
27988: NEG
27989: PUSH
27990: LD_INT 4
27992: NEG
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 4
28000: NEG
28001: PUSH
28002: LD_INT 3
28004: NEG
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: LIST
28014: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28015: LD_ADDR_VAR 0 29
28019: PUSH
28020: LD_INT 1
28022: NEG
28023: PUSH
28024: LD_INT 3
28026: NEG
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 0
28034: PUSH
28035: LD_INT 3
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 1
28045: PUSH
28046: LD_INT 2
28048: NEG
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 1
28056: NEG
28057: PUSH
28058: LD_INT 4
28060: NEG
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 0
28068: PUSH
28069: LD_INT 4
28071: NEG
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 1
28079: PUSH
28080: LD_INT 3
28082: NEG
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 1
28090: NEG
28091: PUSH
28092: LD_INT 5
28094: NEG
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: LD_INT 5
28105: NEG
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 1
28113: PUSH
28114: LD_INT 4
28116: NEG
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: NEG
28125: PUSH
28126: LD_INT 6
28128: NEG
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 0
28136: PUSH
28137: LD_INT 6
28139: NEG
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: LD_INT 5
28150: NEG
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28170: LD_ADDR_VAR 0 30
28174: PUSH
28175: LD_INT 2
28177: PUSH
28178: LD_INT 1
28180: NEG
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 3
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 3
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 3
28208: PUSH
28209: LD_INT 1
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 4
28219: PUSH
28220: LD_INT 0
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 4
28229: PUSH
28230: LD_INT 1
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 4
28239: PUSH
28240: LD_INT 1
28242: NEG
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 5
28250: PUSH
28251: LD_INT 0
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 5
28260: PUSH
28261: LD_INT 1
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 5
28270: PUSH
28271: LD_INT 1
28273: NEG
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 6
28281: PUSH
28282: LD_INT 0
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 6
28291: PUSH
28292: LD_INT 1
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28313: LD_ADDR_VAR 0 31
28317: PUSH
28318: LD_INT 3
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 3
28330: PUSH
28331: LD_INT 3
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 2
28340: PUSH
28341: LD_INT 3
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 4
28350: PUSH
28351: LD_INT 3
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 4
28360: PUSH
28361: LD_INT 4
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 3
28370: PUSH
28371: LD_INT 4
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 5
28380: PUSH
28381: LD_INT 4
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 5
28390: PUSH
28391: LD_INT 5
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 4
28400: PUSH
28401: LD_INT 5
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 6
28410: PUSH
28411: LD_INT 5
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 6
28420: PUSH
28421: LD_INT 6
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 5
28430: PUSH
28431: LD_INT 6
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28452: LD_ADDR_VAR 0 32
28456: PUSH
28457: LD_INT 1
28459: PUSH
28460: LD_INT 3
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 0
28469: PUSH
28470: LD_INT 3
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 1
28479: NEG
28480: PUSH
28481: LD_INT 2
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 1
28490: PUSH
28491: LD_INT 4
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 0
28500: PUSH
28501: LD_INT 4
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 1
28510: NEG
28511: PUSH
28512: LD_INT 3
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 1
28521: PUSH
28522: LD_INT 5
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: LD_INT 5
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 1
28541: NEG
28542: PUSH
28543: LD_INT 4
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: LD_INT 6
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: LD_INT 6
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 1
28572: NEG
28573: PUSH
28574: LD_INT 5
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28595: LD_ADDR_VAR 0 33
28599: PUSH
28600: LD_INT 2
28602: NEG
28603: PUSH
28604: LD_INT 1
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 3
28613: NEG
28614: PUSH
28615: LD_INT 0
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 3
28624: NEG
28625: PUSH
28626: LD_INT 1
28628: NEG
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 3
28636: NEG
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 4
28647: NEG
28648: PUSH
28649: LD_INT 0
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 4
28658: NEG
28659: PUSH
28660: LD_INT 1
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 4
28670: NEG
28671: PUSH
28672: LD_INT 1
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 5
28681: NEG
28682: PUSH
28683: LD_INT 0
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 5
28692: NEG
28693: PUSH
28694: LD_INT 1
28696: NEG
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 5
28704: NEG
28705: PUSH
28706: LD_INT 1
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 6
28715: NEG
28716: PUSH
28717: LD_INT 0
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 6
28726: NEG
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28750: LD_ADDR_VAR 0 34
28754: PUSH
28755: LD_INT 2
28757: NEG
28758: PUSH
28759: LD_INT 3
28761: NEG
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 3
28769: NEG
28770: PUSH
28771: LD_INT 2
28773: NEG
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 3
28781: NEG
28782: PUSH
28783: LD_INT 3
28785: NEG
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 3
28793: NEG
28794: PUSH
28795: LD_INT 4
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 4
28805: NEG
28806: PUSH
28807: LD_INT 3
28809: NEG
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 4
28817: NEG
28818: PUSH
28819: LD_INT 4
28821: NEG
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 4
28829: NEG
28830: PUSH
28831: LD_INT 5
28833: NEG
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 5
28841: NEG
28842: PUSH
28843: LD_INT 4
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 5
28853: NEG
28854: PUSH
28855: LD_INT 5
28857: NEG
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 5
28865: NEG
28866: PUSH
28867: LD_INT 6
28869: NEG
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 6
28877: NEG
28878: PUSH
28879: LD_INT 5
28881: NEG
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 6
28889: NEG
28890: PUSH
28891: LD_INT 6
28893: NEG
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28913: LD_ADDR_VAR 0 41
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: LD_INT 2
28923: NEG
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 1
28931: NEG
28932: PUSH
28933: LD_INT 3
28935: NEG
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 1
28943: PUSH
28944: LD_INT 2
28946: NEG
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: LIST
28956: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28957: LD_ADDR_VAR 0 42
28961: PUSH
28962: LD_INT 2
28964: PUSH
28965: LD_INT 0
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 2
28974: PUSH
28975: LD_INT 1
28977: NEG
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 3
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: LIST
28997: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28998: LD_ADDR_VAR 0 43
29002: PUSH
29003: LD_INT 2
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 3
29015: PUSH
29016: LD_INT 2
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 2
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: LIST
29037: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29038: LD_ADDR_VAR 0 44
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: LD_INT 2
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 1
29055: PUSH
29056: LD_INT 3
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 1
29065: NEG
29066: PUSH
29067: LD_INT 2
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: LIST
29078: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29079: LD_ADDR_VAR 0 45
29083: PUSH
29084: LD_INT 2
29086: NEG
29087: PUSH
29088: LD_INT 0
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 2
29097: NEG
29098: PUSH
29099: LD_INT 1
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 3
29108: NEG
29109: PUSH
29110: LD_INT 1
29112: NEG
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: LIST
29122: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29123: LD_ADDR_VAR 0 46
29127: PUSH
29128: LD_INT 2
29130: NEG
29131: PUSH
29132: LD_INT 2
29134: NEG
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 2
29142: NEG
29143: PUSH
29144: LD_INT 3
29146: NEG
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 3
29154: NEG
29155: PUSH
29156: LD_INT 2
29158: NEG
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: LIST
29168: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29169: LD_ADDR_VAR 0 47
29173: PUSH
29174: LD_INT 2
29176: NEG
29177: PUSH
29178: LD_INT 3
29180: NEG
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 1
29188: NEG
29189: PUSH
29190: LD_INT 3
29192: NEG
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29202: LD_ADDR_VAR 0 48
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: LD_INT 2
29212: NEG
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 2
29220: PUSH
29221: LD_INT 1
29223: NEG
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29233: LD_ADDR_VAR 0 49
29237: PUSH
29238: LD_INT 3
29240: PUSH
29241: LD_INT 1
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 3
29250: PUSH
29251: LD_INT 2
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29262: LD_ADDR_VAR 0 50
29266: PUSH
29267: LD_INT 2
29269: PUSH
29270: LD_INT 3
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 1
29279: PUSH
29280: LD_INT 3
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29291: LD_ADDR_VAR 0 51
29295: PUSH
29296: LD_INT 1
29298: NEG
29299: PUSH
29300: LD_INT 2
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 2
29309: NEG
29310: PUSH
29311: LD_INT 1
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29322: LD_ADDR_VAR 0 52
29326: PUSH
29327: LD_INT 3
29329: NEG
29330: PUSH
29331: LD_INT 1
29333: NEG
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 3
29341: NEG
29342: PUSH
29343: LD_INT 2
29345: NEG
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29355: LD_ADDR_VAR 0 53
29359: PUSH
29360: LD_INT 1
29362: NEG
29363: PUSH
29364: LD_INT 3
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: LD_INT 3
29377: NEG
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: LD_INT 2
29388: NEG
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: LIST
29398: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29399: LD_ADDR_VAR 0 54
29403: PUSH
29404: LD_INT 2
29406: PUSH
29407: LD_INT 1
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 3
29417: PUSH
29418: LD_INT 0
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 3
29427: PUSH
29428: LD_INT 1
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: LIST
29439: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29440: LD_ADDR_VAR 0 55
29444: PUSH
29445: LD_INT 3
29447: PUSH
29448: LD_INT 2
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 3
29457: PUSH
29458: LD_INT 3
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 2
29467: PUSH
29468: LD_INT 3
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: LIST
29479: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29480: LD_ADDR_VAR 0 56
29484: PUSH
29485: LD_INT 1
29487: PUSH
29488: LD_INT 3
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 0
29497: PUSH
29498: LD_INT 3
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 1
29507: NEG
29508: PUSH
29509: LD_INT 2
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: LIST
29520: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29521: LD_ADDR_VAR 0 57
29525: PUSH
29526: LD_INT 2
29528: NEG
29529: PUSH
29530: LD_INT 1
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 3
29539: NEG
29540: PUSH
29541: LD_INT 0
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 3
29550: NEG
29551: PUSH
29552: LD_INT 1
29554: NEG
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: LIST
29564: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29565: LD_ADDR_VAR 0 58
29569: PUSH
29570: LD_INT 2
29572: NEG
29573: PUSH
29574: LD_INT 3
29576: NEG
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 3
29584: NEG
29585: PUSH
29586: LD_INT 2
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 3
29596: NEG
29597: PUSH
29598: LD_INT 3
29600: NEG
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: LIST
29610: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29611: LD_ADDR_VAR 0 59
29615: PUSH
29616: LD_INT 1
29618: NEG
29619: PUSH
29620: LD_INT 2
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 0
29630: PUSH
29631: LD_INT 2
29633: NEG
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 1
29641: PUSH
29642: LD_INT 1
29644: NEG
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: LIST
29654: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29655: LD_ADDR_VAR 0 60
29659: PUSH
29660: LD_INT 1
29662: PUSH
29663: LD_INT 1
29665: NEG
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 2
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 2
29683: PUSH
29684: LD_INT 1
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: LIST
29695: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29696: LD_ADDR_VAR 0 61
29700: PUSH
29701: LD_INT 2
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 2
29713: PUSH
29714: LD_INT 2
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: LD_INT 2
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: LIST
29735: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29736: LD_ADDR_VAR 0 62
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 0
29753: PUSH
29754: LD_INT 2
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 1
29763: NEG
29764: PUSH
29765: LD_INT 1
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: LIST
29776: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29777: LD_ADDR_VAR 0 63
29781: PUSH
29782: LD_INT 1
29784: NEG
29785: PUSH
29786: LD_INT 1
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 2
29795: NEG
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 2
29806: NEG
29807: PUSH
29808: LD_INT 1
29810: NEG
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: LIST
29820: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29821: LD_ADDR_VAR 0 64
29825: PUSH
29826: LD_INT 1
29828: NEG
29829: PUSH
29830: LD_INT 2
29832: NEG
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 2
29840: NEG
29841: PUSH
29842: LD_INT 1
29844: NEG
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 2
29852: NEG
29853: PUSH
29854: LD_INT 2
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: LIST
29866: ST_TO_ADDR
// end ; 2 :
29867: GO 33133
29869: LD_INT 2
29871: DOUBLE
29872: EQUAL
29873: IFTRUE 29877
29875: GO 33132
29877: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29878: LD_ADDR_VAR 0 29
29882: PUSH
29883: LD_INT 4
29885: PUSH
29886: LD_INT 0
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 4
29895: PUSH
29896: LD_INT 1
29898: NEG
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 5
29906: PUSH
29907: LD_INT 0
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 5
29916: PUSH
29917: LD_INT 1
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 4
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 3
29936: PUSH
29937: LD_INT 0
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 3
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 3
29957: PUSH
29958: LD_INT 2
29960: NEG
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 5
29968: PUSH
29969: LD_INT 2
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 3
29978: PUSH
29979: LD_INT 3
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 3
29988: PUSH
29989: LD_INT 2
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 4
29998: PUSH
29999: LD_INT 3
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 4
30008: PUSH
30009: LD_INT 4
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 3
30018: PUSH
30019: LD_INT 4
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 2
30028: PUSH
30029: LD_INT 3
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 2
30038: PUSH
30039: LD_INT 2
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 4
30048: PUSH
30049: LD_INT 2
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 2
30058: PUSH
30059: LD_INT 4
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 0
30068: PUSH
30069: LD_INT 4
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: LD_INT 3
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 1
30088: PUSH
30089: LD_INT 4
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 1
30098: PUSH
30099: LD_INT 5
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 0
30108: PUSH
30109: LD_INT 5
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 1
30118: NEG
30119: PUSH
30120: LD_INT 4
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 1
30129: NEG
30130: PUSH
30131: LD_INT 3
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 2
30140: PUSH
30141: LD_INT 5
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 2
30150: NEG
30151: PUSH
30152: LD_INT 3
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 3
30161: NEG
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 3
30172: NEG
30173: PUSH
30174: LD_INT 1
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 2
30184: NEG
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 2
30195: NEG
30196: PUSH
30197: LD_INT 1
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 3
30206: NEG
30207: PUSH
30208: LD_INT 1
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 4
30217: NEG
30218: PUSH
30219: LD_INT 0
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 4
30228: NEG
30229: PUSH
30230: LD_INT 1
30232: NEG
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 4
30240: NEG
30241: PUSH
30242: LD_INT 2
30244: NEG
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 2
30252: NEG
30253: PUSH
30254: LD_INT 2
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 4
30263: NEG
30264: PUSH
30265: LD_INT 4
30267: NEG
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 4
30275: NEG
30276: PUSH
30277: LD_INT 5
30279: NEG
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 3
30287: NEG
30288: PUSH
30289: LD_INT 4
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 3
30299: NEG
30300: PUSH
30301: LD_INT 3
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 4
30311: NEG
30312: PUSH
30313: LD_INT 3
30315: NEG
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 5
30323: NEG
30324: PUSH
30325: LD_INT 4
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 5
30335: NEG
30336: PUSH
30337: LD_INT 5
30339: NEG
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 3
30347: NEG
30348: PUSH
30349: LD_INT 5
30351: NEG
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 5
30359: NEG
30360: PUSH
30361: LD_INT 3
30363: NEG
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30416: LD_ADDR_VAR 0 30
30420: PUSH
30421: LD_INT 4
30423: PUSH
30424: LD_INT 4
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 4
30433: PUSH
30434: LD_INT 3
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 5
30443: PUSH
30444: LD_INT 4
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 5
30453: PUSH
30454: LD_INT 5
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 4
30463: PUSH
30464: LD_INT 5
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 3
30473: PUSH
30474: LD_INT 4
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 3
30483: PUSH
30484: LD_INT 3
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 5
30493: PUSH
30494: LD_INT 3
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 3
30503: PUSH
30504: LD_INT 5
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 0
30513: PUSH
30514: LD_INT 3
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: LD_INT 2
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 1
30533: PUSH
30534: LD_INT 3
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 1
30543: PUSH
30544: LD_INT 4
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 0
30553: PUSH
30554: LD_INT 4
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 1
30563: NEG
30564: PUSH
30565: LD_INT 3
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 1
30574: NEG
30575: PUSH
30576: LD_INT 2
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 2
30585: PUSH
30586: LD_INT 4
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 2
30595: NEG
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 4
30606: NEG
30607: PUSH
30608: LD_INT 0
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 4
30617: NEG
30618: PUSH
30619: LD_INT 1
30621: NEG
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 3
30629: NEG
30630: PUSH
30631: LD_INT 0
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 3
30640: NEG
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 4
30651: NEG
30652: PUSH
30653: LD_INT 1
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 5
30662: NEG
30663: PUSH
30664: LD_INT 0
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 5
30673: NEG
30674: PUSH
30675: LD_INT 1
30677: NEG
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 5
30685: NEG
30686: PUSH
30687: LD_INT 2
30689: NEG
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 3
30697: NEG
30698: PUSH
30699: LD_INT 2
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 3
30708: NEG
30709: PUSH
30710: LD_INT 3
30712: NEG
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 3
30720: NEG
30721: PUSH
30722: LD_INT 4
30724: NEG
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 2
30732: NEG
30733: PUSH
30734: LD_INT 3
30736: NEG
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 2
30744: NEG
30745: PUSH
30746: LD_INT 2
30748: NEG
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 3
30756: NEG
30757: PUSH
30758: LD_INT 2
30760: NEG
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 4
30768: NEG
30769: PUSH
30770: LD_INT 3
30772: NEG
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 4
30780: NEG
30781: PUSH
30782: LD_INT 4
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 2
30792: NEG
30793: PUSH
30794: LD_INT 4
30796: NEG
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 4
30804: NEG
30805: PUSH
30806: LD_INT 2
30808: NEG
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: LD_INT 4
30819: NEG
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 0
30827: PUSH
30828: LD_INT 5
30830: NEG
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: LD_INT 4
30841: NEG
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 1
30849: PUSH
30850: LD_INT 3
30852: NEG
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: LD_INT 3
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 1
30871: NEG
30872: PUSH
30873: LD_INT 4
30875: NEG
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 1
30883: NEG
30884: PUSH
30885: LD_INT 5
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 2
30895: PUSH
30896: LD_INT 3
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 2
30906: NEG
30907: PUSH
30908: LD_INT 5
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30963: LD_ADDR_VAR 0 31
30967: PUSH
30968: LD_INT 0
30970: PUSH
30971: LD_INT 4
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 0
30980: PUSH
30981: LD_INT 3
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 1
30990: PUSH
30991: LD_INT 4
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 1
31000: PUSH
31001: LD_INT 5
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: LD_INT 5
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 1
31020: NEG
31021: PUSH
31022: LD_INT 4
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 1
31031: NEG
31032: PUSH
31033: LD_INT 3
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 2
31042: PUSH
31043: LD_INT 5
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 2
31052: NEG
31053: PUSH
31054: LD_INT 3
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 3
31063: NEG
31064: PUSH
31065: LD_INT 0
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 3
31074: NEG
31075: PUSH
31076: LD_INT 1
31078: NEG
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 2
31086: NEG
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 2
31097: NEG
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 3
31108: NEG
31109: PUSH
31110: LD_INT 1
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 4
31119: NEG
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 4
31130: NEG
31131: PUSH
31132: LD_INT 1
31134: NEG
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 4
31142: NEG
31143: PUSH
31144: LD_INT 2
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 2
31154: NEG
31155: PUSH
31156: LD_INT 2
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 4
31165: NEG
31166: PUSH
31167: LD_INT 4
31169: NEG
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 4
31177: NEG
31178: PUSH
31179: LD_INT 5
31181: NEG
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 3
31189: NEG
31190: PUSH
31191: LD_INT 4
31193: NEG
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 3
31201: NEG
31202: PUSH
31203: LD_INT 3
31205: NEG
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 4
31213: NEG
31214: PUSH
31215: LD_INT 3
31217: NEG
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 5
31225: NEG
31226: PUSH
31227: LD_INT 4
31229: NEG
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 5
31237: NEG
31238: PUSH
31239: LD_INT 5
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 3
31249: NEG
31250: PUSH
31251: LD_INT 5
31253: NEG
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 5
31261: NEG
31262: PUSH
31263: LD_INT 3
31265: NEG
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 0
31273: PUSH
31274: LD_INT 3
31276: NEG
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 0
31284: PUSH
31285: LD_INT 4
31287: NEG
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: LD_INT 3
31298: NEG
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 1
31306: PUSH
31307: LD_INT 2
31309: NEG
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: LD_INT 2
31320: NEG
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 1
31328: NEG
31329: PUSH
31330: LD_INT 3
31332: NEG
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 1
31340: NEG
31341: PUSH
31342: LD_INT 4
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 2
31352: PUSH
31353: LD_INT 2
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 2
31363: NEG
31364: PUSH
31365: LD_INT 4
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 4
31375: PUSH
31376: LD_INT 0
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 4
31385: PUSH
31386: LD_INT 1
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 5
31396: PUSH
31397: LD_INT 0
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 5
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 4
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 3
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 3
31436: PUSH
31437: LD_INT 1
31439: NEG
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 3
31447: PUSH
31448: LD_INT 2
31450: NEG
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 5
31458: PUSH
31459: LD_INT 2
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31513: LD_ADDR_VAR 0 32
31517: PUSH
31518: LD_INT 4
31520: NEG
31521: PUSH
31522: LD_INT 0
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 4
31531: NEG
31532: PUSH
31533: LD_INT 1
31535: NEG
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 3
31543: NEG
31544: PUSH
31545: LD_INT 0
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 3
31554: NEG
31555: PUSH
31556: LD_INT 1
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 4
31565: NEG
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 5
31576: NEG
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 5
31587: NEG
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 5
31599: NEG
31600: PUSH
31601: LD_INT 2
31603: NEG
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 3
31611: NEG
31612: PUSH
31613: LD_INT 2
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 3
31622: NEG
31623: PUSH
31624: LD_INT 3
31626: NEG
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 3
31634: NEG
31635: PUSH
31636: LD_INT 4
31638: NEG
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 2
31646: NEG
31647: PUSH
31648: LD_INT 3
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 2
31658: NEG
31659: PUSH
31660: LD_INT 2
31662: NEG
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 3
31670: NEG
31671: PUSH
31672: LD_INT 2
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 4
31682: NEG
31683: PUSH
31684: LD_INT 3
31686: NEG
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 4
31694: NEG
31695: PUSH
31696: LD_INT 4
31698: NEG
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 2
31706: NEG
31707: PUSH
31708: LD_INT 4
31710: NEG
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 4
31718: NEG
31719: PUSH
31720: LD_INT 2
31722: NEG
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 0
31730: PUSH
31731: LD_INT 4
31733: NEG
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: LD_INT 5
31744: NEG
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 1
31752: PUSH
31753: LD_INT 4
31755: NEG
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 1
31763: PUSH
31764: LD_INT 3
31766: NEG
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 0
31774: PUSH
31775: LD_INT 3
31777: NEG
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 1
31785: NEG
31786: PUSH
31787: LD_INT 4
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 1
31797: NEG
31798: PUSH
31799: LD_INT 5
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 2
31809: PUSH
31810: LD_INT 3
31812: NEG
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 2
31820: NEG
31821: PUSH
31822: LD_INT 5
31824: NEG
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 3
31832: PUSH
31833: LD_INT 0
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 3
31842: PUSH
31843: LD_INT 1
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 4
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 4
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 3
31873: PUSH
31874: LD_INT 1
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 2
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 2
31904: PUSH
31905: LD_INT 2
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 4
31915: PUSH
31916: LD_INT 2
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 4
31925: PUSH
31926: LD_INT 4
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 4
31935: PUSH
31936: LD_INT 3
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 5
31945: PUSH
31946: LD_INT 4
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 5
31955: PUSH
31956: LD_INT 5
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 4
31965: PUSH
31966: LD_INT 5
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 3
31975: PUSH
31976: LD_INT 4
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 3
31985: PUSH
31986: LD_INT 3
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 5
31995: PUSH
31996: LD_INT 3
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 3
32005: PUSH
32006: LD_INT 5
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32060: LD_ADDR_VAR 0 33
32064: PUSH
32065: LD_INT 4
32067: NEG
32068: PUSH
32069: LD_INT 4
32071: NEG
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 4
32079: NEG
32080: PUSH
32081: LD_INT 5
32083: NEG
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 3
32091: NEG
32092: PUSH
32093: LD_INT 4
32095: NEG
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 3
32103: NEG
32104: PUSH
32105: LD_INT 3
32107: NEG
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 4
32115: NEG
32116: PUSH
32117: LD_INT 3
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 5
32127: NEG
32128: PUSH
32129: LD_INT 4
32131: NEG
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 5
32139: NEG
32140: PUSH
32141: LD_INT 5
32143: NEG
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 3
32151: NEG
32152: PUSH
32153: LD_INT 5
32155: NEG
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 5
32163: NEG
32164: PUSH
32165: LD_INT 3
32167: NEG
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: LD_INT 3
32178: NEG
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: LD_INT 4
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 1
32197: PUSH
32198: LD_INT 3
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: LD_INT 2
32211: NEG
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: LD_INT 2
32222: NEG
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 1
32230: NEG
32231: PUSH
32232: LD_INT 3
32234: NEG
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 1
32242: NEG
32243: PUSH
32244: LD_INT 4
32246: NEG
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 2
32254: PUSH
32255: LD_INT 2
32257: NEG
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 2
32265: NEG
32266: PUSH
32267: LD_INT 4
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 4
32277: PUSH
32278: LD_INT 0
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 4
32287: PUSH
32288: LD_INT 1
32290: NEG
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 5
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 5
32308: PUSH
32309: LD_INT 1
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 4
32318: PUSH
32319: LD_INT 1
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 3
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 3
32338: PUSH
32339: LD_INT 1
32341: NEG
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 3
32349: PUSH
32350: LD_INT 2
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 5
32360: PUSH
32361: LD_INT 2
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 3
32370: PUSH
32371: LD_INT 3
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 3
32380: PUSH
32381: LD_INT 2
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 4
32390: PUSH
32391: LD_INT 3
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 4
32400: PUSH
32401: LD_INT 4
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 3
32410: PUSH
32411: LD_INT 4
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 2
32420: PUSH
32421: LD_INT 3
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 2
32430: PUSH
32431: LD_INT 2
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 4
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: LD_INT 4
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: LD_INT 4
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: LD_INT 3
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: LD_INT 4
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: PUSH
32491: LD_INT 5
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 0
32500: PUSH
32501: LD_INT 5
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: NEG
32511: PUSH
32512: LD_INT 4
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 1
32521: NEG
32522: PUSH
32523: LD_INT 3
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 2
32532: PUSH
32533: LD_INT 5
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 2
32542: NEG
32543: PUSH
32544: LD_INT 3
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32598: LD_ADDR_VAR 0 34
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: LD_INT 4
32608: NEG
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: LD_INT 5
32619: NEG
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 1
32627: PUSH
32628: LD_INT 4
32630: NEG
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 1
32638: PUSH
32639: LD_INT 3
32641: NEG
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: LD_INT 3
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 1
32660: NEG
32661: PUSH
32662: LD_INT 4
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 1
32672: NEG
32673: PUSH
32674: LD_INT 5
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 2
32684: PUSH
32685: LD_INT 3
32687: NEG
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 2
32695: NEG
32696: PUSH
32697: LD_INT 5
32699: NEG
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 3
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 3
32717: PUSH
32718: LD_INT 1
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 4
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 4
32738: PUSH
32739: LD_INT 1
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 3
32748: PUSH
32749: LD_INT 1
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 2
32758: PUSH
32759: LD_INT 0
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 2
32768: PUSH
32769: LD_INT 1
32771: NEG
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 2
32779: PUSH
32780: LD_INT 2
32782: NEG
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 4
32790: PUSH
32791: LD_INT 2
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 4
32800: PUSH
32801: LD_INT 4
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 4
32810: PUSH
32811: LD_INT 3
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 5
32820: PUSH
32821: LD_INT 4
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 5
32830: PUSH
32831: LD_INT 5
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 4
32840: PUSH
32841: LD_INT 5
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 3
32850: PUSH
32851: LD_INT 4
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 3
32860: PUSH
32861: LD_INT 3
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 5
32870: PUSH
32871: LD_INT 3
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 3
32880: PUSH
32881: LD_INT 5
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 0
32890: PUSH
32891: LD_INT 3
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 0
32900: PUSH
32901: LD_INT 2
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 1
32910: PUSH
32911: LD_INT 3
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: LD_INT 4
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: LD_INT 4
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: PUSH
32942: LD_INT 3
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 1
32951: NEG
32952: PUSH
32953: LD_INT 2
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: LD_INT 4
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 2
32972: NEG
32973: PUSH
32974: LD_INT 2
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 4
32983: NEG
32984: PUSH
32985: LD_INT 0
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 4
32994: NEG
32995: PUSH
32996: LD_INT 1
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 3
33006: NEG
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 3
33017: NEG
33018: PUSH
33019: LD_INT 1
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 4
33028: NEG
33029: PUSH
33030: LD_INT 1
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 5
33039: NEG
33040: PUSH
33041: LD_INT 0
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 5
33050: NEG
33051: PUSH
33052: LD_INT 1
33054: NEG
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 5
33062: NEG
33063: PUSH
33064: LD_INT 2
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 3
33074: NEG
33075: PUSH
33076: LD_INT 2
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: ST_TO_ADDR
// end ; end ;
33130: GO 33133
33132: POP
// case btype of b_depot , b_warehouse :
33133: LD_VAR 0 1
33137: PUSH
33138: LD_INT 0
33140: DOUBLE
33141: EQUAL
33142: IFTRUE 33152
33144: LD_INT 1
33146: DOUBLE
33147: EQUAL
33148: IFTRUE 33152
33150: GO 33353
33152: POP
// case nation of nation_american :
33153: LD_VAR 0 5
33157: PUSH
33158: LD_INT 1
33160: DOUBLE
33161: EQUAL
33162: IFTRUE 33166
33164: GO 33222
33166: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33167: LD_ADDR_VAR 0 9
33171: PUSH
33172: LD_VAR 0 11
33176: PUSH
33177: LD_VAR 0 12
33181: PUSH
33182: LD_VAR 0 13
33186: PUSH
33187: LD_VAR 0 14
33191: PUSH
33192: LD_VAR 0 15
33196: PUSH
33197: LD_VAR 0 16
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: PUSH
33210: LD_VAR 0 4
33214: PUSH
33215: LD_INT 1
33217: PLUS
33218: ARRAY
33219: ST_TO_ADDR
33220: GO 33351
33222: LD_INT 2
33224: DOUBLE
33225: EQUAL
33226: IFTRUE 33230
33228: GO 33286
33230: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33231: LD_ADDR_VAR 0 9
33235: PUSH
33236: LD_VAR 0 17
33240: PUSH
33241: LD_VAR 0 18
33245: PUSH
33246: LD_VAR 0 19
33250: PUSH
33251: LD_VAR 0 20
33255: PUSH
33256: LD_VAR 0 21
33260: PUSH
33261: LD_VAR 0 22
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: PUSH
33274: LD_VAR 0 4
33278: PUSH
33279: LD_INT 1
33281: PLUS
33282: ARRAY
33283: ST_TO_ADDR
33284: GO 33351
33286: LD_INT 3
33288: DOUBLE
33289: EQUAL
33290: IFTRUE 33294
33292: GO 33350
33294: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33295: LD_ADDR_VAR 0 9
33299: PUSH
33300: LD_VAR 0 23
33304: PUSH
33305: LD_VAR 0 24
33309: PUSH
33310: LD_VAR 0 25
33314: PUSH
33315: LD_VAR 0 26
33319: PUSH
33320: LD_VAR 0 27
33324: PUSH
33325: LD_VAR 0 28
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: PUSH
33338: LD_VAR 0 4
33342: PUSH
33343: LD_INT 1
33345: PLUS
33346: ARRAY
33347: ST_TO_ADDR
33348: GO 33351
33350: POP
33351: GO 33906
33353: LD_INT 2
33355: DOUBLE
33356: EQUAL
33357: IFTRUE 33367
33359: LD_INT 3
33361: DOUBLE
33362: EQUAL
33363: IFTRUE 33367
33365: GO 33423
33367: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33368: LD_ADDR_VAR 0 9
33372: PUSH
33373: LD_VAR 0 29
33377: PUSH
33378: LD_VAR 0 30
33382: PUSH
33383: LD_VAR 0 31
33387: PUSH
33388: LD_VAR 0 32
33392: PUSH
33393: LD_VAR 0 33
33397: PUSH
33398: LD_VAR 0 34
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: PUSH
33411: LD_VAR 0 4
33415: PUSH
33416: LD_INT 1
33418: PLUS
33419: ARRAY
33420: ST_TO_ADDR
33421: GO 33906
33423: LD_INT 16
33425: DOUBLE
33426: EQUAL
33427: IFTRUE 33485
33429: LD_INT 17
33431: DOUBLE
33432: EQUAL
33433: IFTRUE 33485
33435: LD_INT 18
33437: DOUBLE
33438: EQUAL
33439: IFTRUE 33485
33441: LD_INT 19
33443: DOUBLE
33444: EQUAL
33445: IFTRUE 33485
33447: LD_INT 22
33449: DOUBLE
33450: EQUAL
33451: IFTRUE 33485
33453: LD_INT 20
33455: DOUBLE
33456: EQUAL
33457: IFTRUE 33485
33459: LD_INT 21
33461: DOUBLE
33462: EQUAL
33463: IFTRUE 33485
33465: LD_INT 23
33467: DOUBLE
33468: EQUAL
33469: IFTRUE 33485
33471: LD_INT 24
33473: DOUBLE
33474: EQUAL
33475: IFTRUE 33485
33477: LD_INT 25
33479: DOUBLE
33480: EQUAL
33481: IFTRUE 33485
33483: GO 33541
33485: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33486: LD_ADDR_VAR 0 9
33490: PUSH
33491: LD_VAR 0 35
33495: PUSH
33496: LD_VAR 0 36
33500: PUSH
33501: LD_VAR 0 37
33505: PUSH
33506: LD_VAR 0 38
33510: PUSH
33511: LD_VAR 0 39
33515: PUSH
33516: LD_VAR 0 40
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: PUSH
33529: LD_VAR 0 4
33533: PUSH
33534: LD_INT 1
33536: PLUS
33537: ARRAY
33538: ST_TO_ADDR
33539: GO 33906
33541: LD_INT 6
33543: DOUBLE
33544: EQUAL
33545: IFTRUE 33597
33547: LD_INT 7
33549: DOUBLE
33550: EQUAL
33551: IFTRUE 33597
33553: LD_INT 8
33555: DOUBLE
33556: EQUAL
33557: IFTRUE 33597
33559: LD_INT 13
33561: DOUBLE
33562: EQUAL
33563: IFTRUE 33597
33565: LD_INT 12
33567: DOUBLE
33568: EQUAL
33569: IFTRUE 33597
33571: LD_INT 15
33573: DOUBLE
33574: EQUAL
33575: IFTRUE 33597
33577: LD_INT 11
33579: DOUBLE
33580: EQUAL
33581: IFTRUE 33597
33583: LD_INT 14
33585: DOUBLE
33586: EQUAL
33587: IFTRUE 33597
33589: LD_INT 10
33591: DOUBLE
33592: EQUAL
33593: IFTRUE 33597
33595: GO 33653
33597: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33598: LD_ADDR_VAR 0 9
33602: PUSH
33603: LD_VAR 0 41
33607: PUSH
33608: LD_VAR 0 42
33612: PUSH
33613: LD_VAR 0 43
33617: PUSH
33618: LD_VAR 0 44
33622: PUSH
33623: LD_VAR 0 45
33627: PUSH
33628: LD_VAR 0 46
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: PUSH
33641: LD_VAR 0 4
33645: PUSH
33646: LD_INT 1
33648: PLUS
33649: ARRAY
33650: ST_TO_ADDR
33651: GO 33906
33653: LD_INT 36
33655: DOUBLE
33656: EQUAL
33657: IFTRUE 33661
33659: GO 33717
33661: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33662: LD_ADDR_VAR 0 9
33666: PUSH
33667: LD_VAR 0 47
33671: PUSH
33672: LD_VAR 0 48
33676: PUSH
33677: LD_VAR 0 49
33681: PUSH
33682: LD_VAR 0 50
33686: PUSH
33687: LD_VAR 0 51
33691: PUSH
33692: LD_VAR 0 52
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: PUSH
33705: LD_VAR 0 4
33709: PUSH
33710: LD_INT 1
33712: PLUS
33713: ARRAY
33714: ST_TO_ADDR
33715: GO 33906
33717: LD_INT 4
33719: DOUBLE
33720: EQUAL
33721: IFTRUE 33743
33723: LD_INT 5
33725: DOUBLE
33726: EQUAL
33727: IFTRUE 33743
33729: LD_INT 34
33731: DOUBLE
33732: EQUAL
33733: IFTRUE 33743
33735: LD_INT 37
33737: DOUBLE
33738: EQUAL
33739: IFTRUE 33743
33741: GO 33799
33743: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33744: LD_ADDR_VAR 0 9
33748: PUSH
33749: LD_VAR 0 53
33753: PUSH
33754: LD_VAR 0 54
33758: PUSH
33759: LD_VAR 0 55
33763: PUSH
33764: LD_VAR 0 56
33768: PUSH
33769: LD_VAR 0 57
33773: PUSH
33774: LD_VAR 0 58
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: PUSH
33787: LD_VAR 0 4
33791: PUSH
33792: LD_INT 1
33794: PLUS
33795: ARRAY
33796: ST_TO_ADDR
33797: GO 33906
33799: LD_INT 31
33801: DOUBLE
33802: EQUAL
33803: IFTRUE 33849
33805: LD_INT 32
33807: DOUBLE
33808: EQUAL
33809: IFTRUE 33849
33811: LD_INT 33
33813: DOUBLE
33814: EQUAL
33815: IFTRUE 33849
33817: LD_INT 27
33819: DOUBLE
33820: EQUAL
33821: IFTRUE 33849
33823: LD_INT 26
33825: DOUBLE
33826: EQUAL
33827: IFTRUE 33849
33829: LD_INT 28
33831: DOUBLE
33832: EQUAL
33833: IFTRUE 33849
33835: LD_INT 29
33837: DOUBLE
33838: EQUAL
33839: IFTRUE 33849
33841: LD_INT 30
33843: DOUBLE
33844: EQUAL
33845: IFTRUE 33849
33847: GO 33905
33849: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33850: LD_ADDR_VAR 0 9
33854: PUSH
33855: LD_VAR 0 59
33859: PUSH
33860: LD_VAR 0 60
33864: PUSH
33865: LD_VAR 0 61
33869: PUSH
33870: LD_VAR 0 62
33874: PUSH
33875: LD_VAR 0 63
33879: PUSH
33880: LD_VAR 0 64
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: PUSH
33893: LD_VAR 0 4
33897: PUSH
33898: LD_INT 1
33900: PLUS
33901: ARRAY
33902: ST_TO_ADDR
33903: GO 33906
33905: POP
// temp_list2 = [ ] ;
33906: LD_ADDR_VAR 0 10
33910: PUSH
33911: EMPTY
33912: ST_TO_ADDR
// for i in temp_list do
33913: LD_ADDR_VAR 0 8
33917: PUSH
33918: LD_VAR 0 9
33922: PUSH
33923: FOR_IN
33924: IFFALSE 33976
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33926: LD_ADDR_VAR 0 10
33930: PUSH
33931: LD_VAR 0 10
33935: PUSH
33936: LD_VAR 0 8
33940: PUSH
33941: LD_INT 1
33943: ARRAY
33944: PUSH
33945: LD_VAR 0 2
33949: PLUS
33950: PUSH
33951: LD_VAR 0 8
33955: PUSH
33956: LD_INT 2
33958: ARRAY
33959: PUSH
33960: LD_VAR 0 3
33964: PLUS
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: EMPTY
33971: LIST
33972: ADD
33973: ST_TO_ADDR
33974: GO 33923
33976: POP
33977: POP
// result = temp_list2 ;
33978: LD_ADDR_VAR 0 7
33982: PUSH
33983: LD_VAR 0 10
33987: ST_TO_ADDR
// end ;
33988: LD_VAR 0 7
33992: RET
// export function EnemyInRange ( unit , dist ) ; begin
33993: LD_INT 0
33995: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33996: LD_ADDR_VAR 0 3
34000: PUSH
34001: LD_VAR 0 1
34005: PPUSH
34006: CALL_OW 255
34010: PPUSH
34011: LD_VAR 0 1
34015: PPUSH
34016: CALL_OW 250
34020: PPUSH
34021: LD_VAR 0 1
34025: PPUSH
34026: CALL_OW 251
34030: PPUSH
34031: LD_VAR 0 2
34035: PPUSH
34036: CALL 7366 0 4
34040: PUSH
34041: LD_INT 4
34043: ARRAY
34044: ST_TO_ADDR
// end ;
34045: LD_VAR 0 3
34049: RET
// export function PlayerSeeMe ( unit ) ; begin
34050: LD_INT 0
34052: PPUSH
// result := See ( your_side , unit ) ;
34053: LD_ADDR_VAR 0 2
34057: PUSH
34058: LD_OWVAR 2
34062: PPUSH
34063: LD_VAR 0 1
34067: PPUSH
34068: CALL_OW 292
34072: ST_TO_ADDR
// end ;
34073: LD_VAR 0 2
34077: RET
// export function ReverseDir ( unit ) ; begin
34078: LD_INT 0
34080: PPUSH
// if not unit then
34081: LD_VAR 0 1
34085: NOT
34086: IFFALSE 34090
// exit ;
34088: GO 34113
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34090: LD_ADDR_VAR 0 2
34094: PUSH
34095: LD_VAR 0 1
34099: PPUSH
34100: CALL_OW 254
34104: PUSH
34105: LD_INT 3
34107: PLUS
34108: PUSH
34109: LD_INT 6
34111: MOD
34112: ST_TO_ADDR
// end ;
34113: LD_VAR 0 2
34117: RET
// export function ReverseArray ( array ) ; var i ; begin
34118: LD_INT 0
34120: PPUSH
34121: PPUSH
// if not array then
34122: LD_VAR 0 1
34126: NOT
34127: IFFALSE 34131
// exit ;
34129: GO 34186
// result := [ ] ;
34131: LD_ADDR_VAR 0 2
34135: PUSH
34136: EMPTY
34137: ST_TO_ADDR
// for i := array downto 1 do
34138: LD_ADDR_VAR 0 3
34142: PUSH
34143: DOUBLE
34144: LD_VAR 0 1
34148: INC
34149: ST_TO_ADDR
34150: LD_INT 1
34152: PUSH
34153: FOR_DOWNTO
34154: IFFALSE 34184
// result := Join ( result , array [ i ] ) ;
34156: LD_ADDR_VAR 0 2
34160: PUSH
34161: LD_VAR 0 2
34165: PPUSH
34166: LD_VAR 0 1
34170: PUSH
34171: LD_VAR 0 3
34175: ARRAY
34176: PPUSH
34177: CALL 38831 0 2
34181: ST_TO_ADDR
34182: GO 34153
34184: POP
34185: POP
// end ;
34186: LD_VAR 0 2
34190: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34191: LD_INT 0
34193: PPUSH
34194: PPUSH
34195: PPUSH
34196: PPUSH
34197: PPUSH
34198: PPUSH
// if not unit or not hexes then
34199: LD_VAR 0 1
34203: NOT
34204: PUSH
34205: LD_VAR 0 2
34209: NOT
34210: OR
34211: IFFALSE 34215
// exit ;
34213: GO 34338
// dist := 9999 ;
34215: LD_ADDR_VAR 0 5
34219: PUSH
34220: LD_INT 9999
34222: ST_TO_ADDR
// for i = 1 to hexes do
34223: LD_ADDR_VAR 0 4
34227: PUSH
34228: DOUBLE
34229: LD_INT 1
34231: DEC
34232: ST_TO_ADDR
34233: LD_VAR 0 2
34237: PUSH
34238: FOR_TO
34239: IFFALSE 34326
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34241: LD_ADDR_VAR 0 6
34245: PUSH
34246: LD_VAR 0 1
34250: PPUSH
34251: LD_VAR 0 2
34255: PUSH
34256: LD_VAR 0 4
34260: ARRAY
34261: PUSH
34262: LD_INT 1
34264: ARRAY
34265: PPUSH
34266: LD_VAR 0 2
34270: PUSH
34271: LD_VAR 0 4
34275: ARRAY
34276: PUSH
34277: LD_INT 2
34279: ARRAY
34280: PPUSH
34281: CALL_OW 297
34285: ST_TO_ADDR
// if tdist < dist then
34286: LD_VAR 0 6
34290: PUSH
34291: LD_VAR 0 5
34295: LESS
34296: IFFALSE 34324
// begin hex := hexes [ i ] ;
34298: LD_ADDR_VAR 0 8
34302: PUSH
34303: LD_VAR 0 2
34307: PUSH
34308: LD_VAR 0 4
34312: ARRAY
34313: ST_TO_ADDR
// dist := tdist ;
34314: LD_ADDR_VAR 0 5
34318: PUSH
34319: LD_VAR 0 6
34323: ST_TO_ADDR
// end ; end ;
34324: GO 34238
34326: POP
34327: POP
// result := hex ;
34328: LD_ADDR_VAR 0 3
34332: PUSH
34333: LD_VAR 0 8
34337: ST_TO_ADDR
// end ;
34338: LD_VAR 0 3
34342: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34343: LD_INT 0
34345: PPUSH
34346: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34347: LD_VAR 0 1
34351: NOT
34352: PUSH
34353: LD_VAR 0 1
34357: PUSH
34358: LD_INT 21
34360: PUSH
34361: LD_INT 2
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 23
34370: PUSH
34371: LD_INT 2
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PPUSH
34382: CALL_OW 69
34386: IN
34387: NOT
34388: OR
34389: IFFALSE 34393
// exit ;
34391: GO 34440
// for i = 1 to 3 do
34393: LD_ADDR_VAR 0 3
34397: PUSH
34398: DOUBLE
34399: LD_INT 1
34401: DEC
34402: ST_TO_ADDR
34403: LD_INT 3
34405: PUSH
34406: FOR_TO
34407: IFFALSE 34438
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34409: LD_VAR 0 1
34413: PPUSH
34414: CALL_OW 250
34418: PPUSH
34419: LD_VAR 0 1
34423: PPUSH
34424: CALL_OW 251
34428: PPUSH
34429: LD_INT 1
34431: PPUSH
34432: CALL_OW 453
34436: GO 34406
34438: POP
34439: POP
// end ;
34440: LD_VAR 0 2
34444: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34445: LD_INT 0
34447: PPUSH
34448: PPUSH
34449: PPUSH
34450: PPUSH
34451: PPUSH
34452: PPUSH
// if not unit or not enemy_unit then
34453: LD_VAR 0 1
34457: NOT
34458: PUSH
34459: LD_VAR 0 2
34463: NOT
34464: OR
34465: IFFALSE 34469
// exit ;
34467: GO 34936
// if GetLives ( i ) < 250 then
34469: LD_VAR 0 4
34473: PPUSH
34474: CALL_OW 256
34478: PUSH
34479: LD_INT 250
34481: LESS
34482: IFFALSE 34495
// begin ComAutodestruct ( i ) ;
34484: LD_VAR 0 4
34488: PPUSH
34489: CALL 34343 0 1
// exit ;
34493: GO 34936
// end ; x := GetX ( enemy_unit ) ;
34495: LD_ADDR_VAR 0 7
34499: PUSH
34500: LD_VAR 0 2
34504: PPUSH
34505: CALL_OW 250
34509: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34510: LD_ADDR_VAR 0 8
34514: PUSH
34515: LD_VAR 0 2
34519: PPUSH
34520: CALL_OW 251
34524: ST_TO_ADDR
// if not x or not y then
34525: LD_VAR 0 7
34529: NOT
34530: PUSH
34531: LD_VAR 0 8
34535: NOT
34536: OR
34537: IFFALSE 34541
// exit ;
34539: GO 34936
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34541: LD_ADDR_VAR 0 6
34545: PUSH
34546: LD_VAR 0 7
34550: PPUSH
34551: LD_INT 0
34553: PPUSH
34554: LD_INT 4
34556: PPUSH
34557: CALL_OW 272
34561: PUSH
34562: LD_VAR 0 8
34566: PPUSH
34567: LD_INT 0
34569: PPUSH
34570: LD_INT 4
34572: PPUSH
34573: CALL_OW 273
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_VAR 0 7
34586: PPUSH
34587: LD_INT 1
34589: PPUSH
34590: LD_INT 4
34592: PPUSH
34593: CALL_OW 272
34597: PUSH
34598: LD_VAR 0 8
34602: PPUSH
34603: LD_INT 1
34605: PPUSH
34606: LD_INT 4
34608: PPUSH
34609: CALL_OW 273
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_VAR 0 7
34622: PPUSH
34623: LD_INT 2
34625: PPUSH
34626: LD_INT 4
34628: PPUSH
34629: CALL_OW 272
34633: PUSH
34634: LD_VAR 0 8
34638: PPUSH
34639: LD_INT 2
34641: PPUSH
34642: LD_INT 4
34644: PPUSH
34645: CALL_OW 273
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_VAR 0 7
34658: PPUSH
34659: LD_INT 3
34661: PPUSH
34662: LD_INT 4
34664: PPUSH
34665: CALL_OW 272
34669: PUSH
34670: LD_VAR 0 8
34674: PPUSH
34675: LD_INT 3
34677: PPUSH
34678: LD_INT 4
34680: PPUSH
34681: CALL_OW 273
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_VAR 0 7
34694: PPUSH
34695: LD_INT 4
34697: PPUSH
34698: LD_INT 4
34700: PPUSH
34701: CALL_OW 272
34705: PUSH
34706: LD_VAR 0 8
34710: PPUSH
34711: LD_INT 4
34713: PPUSH
34714: LD_INT 4
34716: PPUSH
34717: CALL_OW 273
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_VAR 0 7
34730: PPUSH
34731: LD_INT 5
34733: PPUSH
34734: LD_INT 4
34736: PPUSH
34737: CALL_OW 272
34741: PUSH
34742: LD_VAR 0 8
34746: PPUSH
34747: LD_INT 5
34749: PPUSH
34750: LD_INT 4
34752: PPUSH
34753: CALL_OW 273
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: ST_TO_ADDR
// for i = tmp downto 1 do
34770: LD_ADDR_VAR 0 4
34774: PUSH
34775: DOUBLE
34776: LD_VAR 0 6
34780: INC
34781: ST_TO_ADDR
34782: LD_INT 1
34784: PUSH
34785: FOR_DOWNTO
34786: IFFALSE 34887
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34788: LD_VAR 0 6
34792: PUSH
34793: LD_VAR 0 4
34797: ARRAY
34798: PUSH
34799: LD_INT 1
34801: ARRAY
34802: PPUSH
34803: LD_VAR 0 6
34807: PUSH
34808: LD_VAR 0 4
34812: ARRAY
34813: PUSH
34814: LD_INT 2
34816: ARRAY
34817: PPUSH
34818: CALL_OW 488
34822: NOT
34823: PUSH
34824: LD_VAR 0 6
34828: PUSH
34829: LD_VAR 0 4
34833: ARRAY
34834: PUSH
34835: LD_INT 1
34837: ARRAY
34838: PPUSH
34839: LD_VAR 0 6
34843: PUSH
34844: LD_VAR 0 4
34848: ARRAY
34849: PUSH
34850: LD_INT 2
34852: ARRAY
34853: PPUSH
34854: CALL_OW 428
34858: PUSH
34859: LD_INT 0
34861: NONEQUAL
34862: OR
34863: IFFALSE 34885
// tmp := Delete ( tmp , i ) ;
34865: LD_ADDR_VAR 0 6
34869: PUSH
34870: LD_VAR 0 6
34874: PPUSH
34875: LD_VAR 0 4
34879: PPUSH
34880: CALL_OW 3
34884: ST_TO_ADDR
34885: GO 34785
34887: POP
34888: POP
// j := GetClosestHex ( unit , tmp ) ;
34889: LD_ADDR_VAR 0 5
34893: PUSH
34894: LD_VAR 0 1
34898: PPUSH
34899: LD_VAR 0 6
34903: PPUSH
34904: CALL 34191 0 2
34908: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34909: LD_VAR 0 1
34913: PPUSH
34914: LD_VAR 0 5
34918: PUSH
34919: LD_INT 1
34921: ARRAY
34922: PPUSH
34923: LD_VAR 0 5
34927: PUSH
34928: LD_INT 2
34930: ARRAY
34931: PPUSH
34932: CALL_OW 111
// end ;
34936: LD_VAR 0 3
34940: RET
// export function PrepareApemanSoldier ( ) ; begin
34941: LD_INT 0
34943: PPUSH
// uc_nation := 0 ;
34944: LD_ADDR_OWVAR 21
34948: PUSH
34949: LD_INT 0
34951: ST_TO_ADDR
// hc_sex := sex_male ;
34952: LD_ADDR_OWVAR 27
34956: PUSH
34957: LD_INT 1
34959: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34960: LD_ADDR_OWVAR 28
34964: PUSH
34965: LD_INT 15
34967: ST_TO_ADDR
// hc_gallery :=  ;
34968: LD_ADDR_OWVAR 33
34972: PUSH
34973: LD_STRING 
34975: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34976: LD_ADDR_OWVAR 31
34980: PUSH
34981: LD_INT 0
34983: PPUSH
34984: LD_INT 3
34986: PPUSH
34987: CALL_OW 12
34991: PUSH
34992: LD_INT 0
34994: PPUSH
34995: LD_INT 3
34997: PPUSH
34998: CALL_OW 12
35002: PUSH
35003: LD_INT 0
35005: PUSH
35006: LD_INT 0
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: ST_TO_ADDR
// end ;
35015: LD_VAR 0 1
35019: RET
// export function PrepareApemanEngineer ( ) ; begin
35020: LD_INT 0
35022: PPUSH
// uc_nation := 0 ;
35023: LD_ADDR_OWVAR 21
35027: PUSH
35028: LD_INT 0
35030: ST_TO_ADDR
// hc_sex := sex_male ;
35031: LD_ADDR_OWVAR 27
35035: PUSH
35036: LD_INT 1
35038: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35039: LD_ADDR_OWVAR 28
35043: PUSH
35044: LD_INT 16
35046: ST_TO_ADDR
// hc_gallery :=  ;
35047: LD_ADDR_OWVAR 33
35051: PUSH
35052: LD_STRING 
35054: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35055: LD_ADDR_OWVAR 31
35059: PUSH
35060: LD_INT 0
35062: PPUSH
35063: LD_INT 3
35065: PPUSH
35066: CALL_OW 12
35070: PUSH
35071: LD_INT 0
35073: PPUSH
35074: LD_INT 3
35076: PPUSH
35077: CALL_OW 12
35081: PUSH
35082: LD_INT 0
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: ST_TO_ADDR
// end ;
35094: LD_VAR 0 1
35098: RET
// export function PrepareApeman ( agressivity ) ; begin
35099: LD_INT 0
35101: PPUSH
// uc_side := 0 ;
35102: LD_ADDR_OWVAR 20
35106: PUSH
35107: LD_INT 0
35109: ST_TO_ADDR
// uc_nation := 0 ;
35110: LD_ADDR_OWVAR 21
35114: PUSH
35115: LD_INT 0
35117: ST_TO_ADDR
// hc_sex := sex_male ;
35118: LD_ADDR_OWVAR 27
35122: PUSH
35123: LD_INT 1
35125: ST_TO_ADDR
// hc_class := class_apeman ;
35126: LD_ADDR_OWVAR 28
35130: PUSH
35131: LD_INT 12
35133: ST_TO_ADDR
// hc_gallery :=  ;
35134: LD_ADDR_OWVAR 33
35138: PUSH
35139: LD_STRING 
35141: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35142: LD_ADDR_OWVAR 35
35146: PUSH
35147: LD_VAR 0 1
35151: NEG
35152: PPUSH
35153: LD_VAR 0 1
35157: PPUSH
35158: CALL_OW 12
35162: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35163: LD_ADDR_OWVAR 31
35167: PUSH
35168: LD_INT 0
35170: PPUSH
35171: LD_INT 3
35173: PPUSH
35174: CALL_OW 12
35178: PUSH
35179: LD_INT 0
35181: PPUSH
35182: LD_INT 3
35184: PPUSH
35185: CALL_OW 12
35189: PUSH
35190: LD_INT 0
35192: PUSH
35193: LD_INT 0
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: ST_TO_ADDR
// end ;
35202: LD_VAR 0 2
35206: RET
// export function PrepareTiger ( agressivity ) ; begin
35207: LD_INT 0
35209: PPUSH
// uc_side := 0 ;
35210: LD_ADDR_OWVAR 20
35214: PUSH
35215: LD_INT 0
35217: ST_TO_ADDR
// uc_nation := 0 ;
35218: LD_ADDR_OWVAR 21
35222: PUSH
35223: LD_INT 0
35225: ST_TO_ADDR
// hc_class := class_tiger ;
35226: LD_ADDR_OWVAR 28
35230: PUSH
35231: LD_INT 14
35233: ST_TO_ADDR
// hc_gallery :=  ;
35234: LD_ADDR_OWVAR 33
35238: PUSH
35239: LD_STRING 
35241: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35242: LD_ADDR_OWVAR 35
35246: PUSH
35247: LD_VAR 0 1
35251: NEG
35252: PPUSH
35253: LD_VAR 0 1
35257: PPUSH
35258: CALL_OW 12
35262: ST_TO_ADDR
// end ;
35263: LD_VAR 0 2
35267: RET
// export function PrepareEnchidna ( ) ; begin
35268: LD_INT 0
35270: PPUSH
// uc_side := 0 ;
35271: LD_ADDR_OWVAR 20
35275: PUSH
35276: LD_INT 0
35278: ST_TO_ADDR
// uc_nation := 0 ;
35279: LD_ADDR_OWVAR 21
35283: PUSH
35284: LD_INT 0
35286: ST_TO_ADDR
// hc_class := class_baggie ;
35287: LD_ADDR_OWVAR 28
35291: PUSH
35292: LD_INT 13
35294: ST_TO_ADDR
// hc_gallery :=  ;
35295: LD_ADDR_OWVAR 33
35299: PUSH
35300: LD_STRING 
35302: ST_TO_ADDR
// end ;
35303: LD_VAR 0 1
35307: RET
// export function PrepareFrog ( ) ; begin
35308: LD_INT 0
35310: PPUSH
// uc_side := 0 ;
35311: LD_ADDR_OWVAR 20
35315: PUSH
35316: LD_INT 0
35318: ST_TO_ADDR
// uc_nation := 0 ;
35319: LD_ADDR_OWVAR 21
35323: PUSH
35324: LD_INT 0
35326: ST_TO_ADDR
// hc_class := class_frog ;
35327: LD_ADDR_OWVAR 28
35331: PUSH
35332: LD_INT 19
35334: ST_TO_ADDR
// hc_gallery :=  ;
35335: LD_ADDR_OWVAR 33
35339: PUSH
35340: LD_STRING 
35342: ST_TO_ADDR
// end ;
35343: LD_VAR 0 1
35347: RET
// export function PrepareFish ( ) ; begin
35348: LD_INT 0
35350: PPUSH
// uc_side := 0 ;
35351: LD_ADDR_OWVAR 20
35355: PUSH
35356: LD_INT 0
35358: ST_TO_ADDR
// uc_nation := 0 ;
35359: LD_ADDR_OWVAR 21
35363: PUSH
35364: LD_INT 0
35366: ST_TO_ADDR
// hc_class := class_fish ;
35367: LD_ADDR_OWVAR 28
35371: PUSH
35372: LD_INT 20
35374: ST_TO_ADDR
// hc_gallery :=  ;
35375: LD_ADDR_OWVAR 33
35379: PUSH
35380: LD_STRING 
35382: ST_TO_ADDR
// end ;
35383: LD_VAR 0 1
35387: RET
// export function PrepareBird ( ) ; begin
35388: LD_INT 0
35390: PPUSH
// uc_side := 0 ;
35391: LD_ADDR_OWVAR 20
35395: PUSH
35396: LD_INT 0
35398: ST_TO_ADDR
// uc_nation := 0 ;
35399: LD_ADDR_OWVAR 21
35403: PUSH
35404: LD_INT 0
35406: ST_TO_ADDR
// hc_class := class_phororhacos ;
35407: LD_ADDR_OWVAR 28
35411: PUSH
35412: LD_INT 18
35414: ST_TO_ADDR
// hc_gallery :=  ;
35415: LD_ADDR_OWVAR 33
35419: PUSH
35420: LD_STRING 
35422: ST_TO_ADDR
// end ;
35423: LD_VAR 0 1
35427: RET
// export function PrepareHorse ( ) ; begin
35428: LD_INT 0
35430: PPUSH
// uc_side := 0 ;
35431: LD_ADDR_OWVAR 20
35435: PUSH
35436: LD_INT 0
35438: ST_TO_ADDR
// uc_nation := 0 ;
35439: LD_ADDR_OWVAR 21
35443: PUSH
35444: LD_INT 0
35446: ST_TO_ADDR
// hc_class := class_horse ;
35447: LD_ADDR_OWVAR 28
35451: PUSH
35452: LD_INT 21
35454: ST_TO_ADDR
// hc_gallery :=  ;
35455: LD_ADDR_OWVAR 33
35459: PUSH
35460: LD_STRING 
35462: ST_TO_ADDR
// end ;
35463: LD_VAR 0 1
35467: RET
// export function PrepareMastodont ( ) ; begin
35468: LD_INT 0
35470: PPUSH
// uc_side := 0 ;
35471: LD_ADDR_OWVAR 20
35475: PUSH
35476: LD_INT 0
35478: ST_TO_ADDR
// uc_nation := 0 ;
35479: LD_ADDR_OWVAR 21
35483: PUSH
35484: LD_INT 0
35486: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35487: LD_ADDR_OWVAR 37
35491: PUSH
35492: LD_INT 31
35494: ST_TO_ADDR
// vc_control := control_rider ;
35495: LD_ADDR_OWVAR 38
35499: PUSH
35500: LD_INT 4
35502: ST_TO_ADDR
// end ;
35503: LD_VAR 0 1
35507: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35508: LD_INT 0
35510: PPUSH
35511: PPUSH
35512: PPUSH
// uc_side = 0 ;
35513: LD_ADDR_OWVAR 20
35517: PUSH
35518: LD_INT 0
35520: ST_TO_ADDR
// uc_nation = 0 ;
35521: LD_ADDR_OWVAR 21
35525: PUSH
35526: LD_INT 0
35528: ST_TO_ADDR
// InitHc_All ( ) ;
35529: CALL_OW 584
// InitVc ;
35533: CALL_OW 20
// if mastodonts then
35537: LD_VAR 0 6
35541: IFFALSE 35608
// for i = 1 to mastodonts do
35543: LD_ADDR_VAR 0 11
35547: PUSH
35548: DOUBLE
35549: LD_INT 1
35551: DEC
35552: ST_TO_ADDR
35553: LD_VAR 0 6
35557: PUSH
35558: FOR_TO
35559: IFFALSE 35606
// begin vc_chassis := 31 ;
35561: LD_ADDR_OWVAR 37
35565: PUSH
35566: LD_INT 31
35568: ST_TO_ADDR
// vc_control := control_rider ;
35569: LD_ADDR_OWVAR 38
35573: PUSH
35574: LD_INT 4
35576: ST_TO_ADDR
// animal := CreateVehicle ;
35577: LD_ADDR_VAR 0 12
35581: PUSH
35582: CALL_OW 45
35586: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35587: LD_VAR 0 12
35591: PPUSH
35592: LD_VAR 0 8
35596: PPUSH
35597: LD_INT 0
35599: PPUSH
35600: CALL 37736 0 3
// end ;
35604: GO 35558
35606: POP
35607: POP
// if horses then
35608: LD_VAR 0 5
35612: IFFALSE 35679
// for i = 1 to horses do
35614: LD_ADDR_VAR 0 11
35618: PUSH
35619: DOUBLE
35620: LD_INT 1
35622: DEC
35623: ST_TO_ADDR
35624: LD_VAR 0 5
35628: PUSH
35629: FOR_TO
35630: IFFALSE 35677
// begin hc_class := 21 ;
35632: LD_ADDR_OWVAR 28
35636: PUSH
35637: LD_INT 21
35639: ST_TO_ADDR
// hc_gallery :=  ;
35640: LD_ADDR_OWVAR 33
35644: PUSH
35645: LD_STRING 
35647: ST_TO_ADDR
// animal := CreateHuman ;
35648: LD_ADDR_VAR 0 12
35652: PUSH
35653: CALL_OW 44
35657: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35658: LD_VAR 0 12
35662: PPUSH
35663: LD_VAR 0 8
35667: PPUSH
35668: LD_INT 0
35670: PPUSH
35671: CALL 37736 0 3
// end ;
35675: GO 35629
35677: POP
35678: POP
// if birds then
35679: LD_VAR 0 1
35683: IFFALSE 35750
// for i = 1 to birds do
35685: LD_ADDR_VAR 0 11
35689: PUSH
35690: DOUBLE
35691: LD_INT 1
35693: DEC
35694: ST_TO_ADDR
35695: LD_VAR 0 1
35699: PUSH
35700: FOR_TO
35701: IFFALSE 35748
// begin hc_class := 18 ;
35703: LD_ADDR_OWVAR 28
35707: PUSH
35708: LD_INT 18
35710: ST_TO_ADDR
// hc_gallery =  ;
35711: LD_ADDR_OWVAR 33
35715: PUSH
35716: LD_STRING 
35718: ST_TO_ADDR
// animal := CreateHuman ;
35719: LD_ADDR_VAR 0 12
35723: PUSH
35724: CALL_OW 44
35728: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35729: LD_VAR 0 12
35733: PPUSH
35734: LD_VAR 0 8
35738: PPUSH
35739: LD_INT 0
35741: PPUSH
35742: CALL 37736 0 3
// end ;
35746: GO 35700
35748: POP
35749: POP
// if tigers then
35750: LD_VAR 0 2
35754: IFFALSE 35838
// for i = 1 to tigers do
35756: LD_ADDR_VAR 0 11
35760: PUSH
35761: DOUBLE
35762: LD_INT 1
35764: DEC
35765: ST_TO_ADDR
35766: LD_VAR 0 2
35770: PUSH
35771: FOR_TO
35772: IFFALSE 35836
// begin hc_class = class_tiger ;
35774: LD_ADDR_OWVAR 28
35778: PUSH
35779: LD_INT 14
35781: ST_TO_ADDR
// hc_gallery =  ;
35782: LD_ADDR_OWVAR 33
35786: PUSH
35787: LD_STRING 
35789: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35790: LD_ADDR_OWVAR 35
35794: PUSH
35795: LD_INT 7
35797: NEG
35798: PPUSH
35799: LD_INT 7
35801: PPUSH
35802: CALL_OW 12
35806: ST_TO_ADDR
// animal := CreateHuman ;
35807: LD_ADDR_VAR 0 12
35811: PUSH
35812: CALL_OW 44
35816: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35817: LD_VAR 0 12
35821: PPUSH
35822: LD_VAR 0 8
35826: PPUSH
35827: LD_INT 0
35829: PPUSH
35830: CALL 37736 0 3
// end ;
35834: GO 35771
35836: POP
35837: POP
// if apemans then
35838: LD_VAR 0 3
35842: IFFALSE 35965
// for i = 1 to apemans do
35844: LD_ADDR_VAR 0 11
35848: PUSH
35849: DOUBLE
35850: LD_INT 1
35852: DEC
35853: ST_TO_ADDR
35854: LD_VAR 0 3
35858: PUSH
35859: FOR_TO
35860: IFFALSE 35963
// begin hc_class = class_apeman ;
35862: LD_ADDR_OWVAR 28
35866: PUSH
35867: LD_INT 12
35869: ST_TO_ADDR
// hc_gallery =  ;
35870: LD_ADDR_OWVAR 33
35874: PUSH
35875: LD_STRING 
35877: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35878: LD_ADDR_OWVAR 35
35882: PUSH
35883: LD_INT 2
35885: NEG
35886: PPUSH
35887: LD_INT 2
35889: PPUSH
35890: CALL_OW 12
35894: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35895: LD_ADDR_OWVAR 31
35899: PUSH
35900: LD_INT 1
35902: PPUSH
35903: LD_INT 3
35905: PPUSH
35906: CALL_OW 12
35910: PUSH
35911: LD_INT 1
35913: PPUSH
35914: LD_INT 3
35916: PPUSH
35917: CALL_OW 12
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: ST_TO_ADDR
// animal := CreateHuman ;
35934: LD_ADDR_VAR 0 12
35938: PUSH
35939: CALL_OW 44
35943: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35944: LD_VAR 0 12
35948: PPUSH
35949: LD_VAR 0 8
35953: PPUSH
35954: LD_INT 0
35956: PPUSH
35957: CALL 37736 0 3
// end ;
35961: GO 35859
35963: POP
35964: POP
// if enchidnas then
35965: LD_VAR 0 4
35969: IFFALSE 36036
// for i = 1 to enchidnas do
35971: LD_ADDR_VAR 0 11
35975: PUSH
35976: DOUBLE
35977: LD_INT 1
35979: DEC
35980: ST_TO_ADDR
35981: LD_VAR 0 4
35985: PUSH
35986: FOR_TO
35987: IFFALSE 36034
// begin hc_class = 13 ;
35989: LD_ADDR_OWVAR 28
35993: PUSH
35994: LD_INT 13
35996: ST_TO_ADDR
// hc_gallery =  ;
35997: LD_ADDR_OWVAR 33
36001: PUSH
36002: LD_STRING 
36004: ST_TO_ADDR
// animal := CreateHuman ;
36005: LD_ADDR_VAR 0 12
36009: PUSH
36010: CALL_OW 44
36014: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36015: LD_VAR 0 12
36019: PPUSH
36020: LD_VAR 0 8
36024: PPUSH
36025: LD_INT 0
36027: PPUSH
36028: CALL 37736 0 3
// end ;
36032: GO 35986
36034: POP
36035: POP
// if fishes then
36036: LD_VAR 0 7
36040: IFFALSE 36107
// for i = 1 to fishes do
36042: LD_ADDR_VAR 0 11
36046: PUSH
36047: DOUBLE
36048: LD_INT 1
36050: DEC
36051: ST_TO_ADDR
36052: LD_VAR 0 7
36056: PUSH
36057: FOR_TO
36058: IFFALSE 36105
// begin hc_class = 20 ;
36060: LD_ADDR_OWVAR 28
36064: PUSH
36065: LD_INT 20
36067: ST_TO_ADDR
// hc_gallery =  ;
36068: LD_ADDR_OWVAR 33
36072: PUSH
36073: LD_STRING 
36075: ST_TO_ADDR
// animal := CreateHuman ;
36076: LD_ADDR_VAR 0 12
36080: PUSH
36081: CALL_OW 44
36085: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36086: LD_VAR 0 12
36090: PPUSH
36091: LD_VAR 0 9
36095: PPUSH
36096: LD_INT 0
36098: PPUSH
36099: CALL 37736 0 3
// end ;
36103: GO 36057
36105: POP
36106: POP
// end ;
36107: LD_VAR 0 10
36111: RET
// export function WantHeal ( sci , unit ) ; begin
36112: LD_INT 0
36114: PPUSH
// if GetTaskList ( sci ) > 0 then
36115: LD_VAR 0 1
36119: PPUSH
36120: CALL_OW 437
36124: PUSH
36125: LD_INT 0
36127: GREATER
36128: IFFALSE 36198
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36130: LD_VAR 0 1
36134: PPUSH
36135: CALL_OW 437
36139: PUSH
36140: LD_INT 1
36142: ARRAY
36143: PUSH
36144: LD_INT 1
36146: ARRAY
36147: PUSH
36148: LD_STRING l
36150: EQUAL
36151: PUSH
36152: LD_VAR 0 1
36156: PPUSH
36157: CALL_OW 437
36161: PUSH
36162: LD_INT 1
36164: ARRAY
36165: PUSH
36166: LD_INT 4
36168: ARRAY
36169: PUSH
36170: LD_VAR 0 2
36174: EQUAL
36175: AND
36176: IFFALSE 36188
// result := true else
36178: LD_ADDR_VAR 0 3
36182: PUSH
36183: LD_INT 1
36185: ST_TO_ADDR
36186: GO 36196
// result := false ;
36188: LD_ADDR_VAR 0 3
36192: PUSH
36193: LD_INT 0
36195: ST_TO_ADDR
// end else
36196: GO 36206
// result := false ;
36198: LD_ADDR_VAR 0 3
36202: PUSH
36203: LD_INT 0
36205: ST_TO_ADDR
// end ;
36206: LD_VAR 0 3
36210: RET
// export function HealTarget ( sci ) ; begin
36211: LD_INT 0
36213: PPUSH
// if not sci then
36214: LD_VAR 0 1
36218: NOT
36219: IFFALSE 36223
// exit ;
36221: GO 36288
// result := 0 ;
36223: LD_ADDR_VAR 0 2
36227: PUSH
36228: LD_INT 0
36230: ST_TO_ADDR
// if GetTaskList ( sci ) then
36231: LD_VAR 0 1
36235: PPUSH
36236: CALL_OW 437
36240: IFFALSE 36288
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36242: LD_VAR 0 1
36246: PPUSH
36247: CALL_OW 437
36251: PUSH
36252: LD_INT 1
36254: ARRAY
36255: PUSH
36256: LD_INT 1
36258: ARRAY
36259: PUSH
36260: LD_STRING l
36262: EQUAL
36263: IFFALSE 36288
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36265: LD_ADDR_VAR 0 2
36269: PUSH
36270: LD_VAR 0 1
36274: PPUSH
36275: CALL_OW 437
36279: PUSH
36280: LD_INT 1
36282: ARRAY
36283: PUSH
36284: LD_INT 4
36286: ARRAY
36287: ST_TO_ADDR
// end ;
36288: LD_VAR 0 2
36292: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36293: LD_INT 0
36295: PPUSH
36296: PPUSH
36297: PPUSH
36298: PPUSH
// if not base_units then
36299: LD_VAR 0 1
36303: NOT
36304: IFFALSE 36308
// exit ;
36306: GO 36395
// result := false ;
36308: LD_ADDR_VAR 0 2
36312: PUSH
36313: LD_INT 0
36315: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36316: LD_ADDR_VAR 0 5
36320: PUSH
36321: LD_VAR 0 1
36325: PPUSH
36326: LD_INT 21
36328: PUSH
36329: LD_INT 3
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PPUSH
36336: CALL_OW 72
36340: ST_TO_ADDR
// if not tmp then
36341: LD_VAR 0 5
36345: NOT
36346: IFFALSE 36350
// exit ;
36348: GO 36395
// for i in tmp do
36350: LD_ADDR_VAR 0 3
36354: PUSH
36355: LD_VAR 0 5
36359: PUSH
36360: FOR_IN
36361: IFFALSE 36393
// begin result := EnemyInRange ( i , 22 ) ;
36363: LD_ADDR_VAR 0 2
36367: PUSH
36368: LD_VAR 0 3
36372: PPUSH
36373: LD_INT 22
36375: PPUSH
36376: CALL 33993 0 2
36380: ST_TO_ADDR
// if result then
36381: LD_VAR 0 2
36385: IFFALSE 36391
// exit ;
36387: POP
36388: POP
36389: GO 36395
// end ;
36391: GO 36360
36393: POP
36394: POP
// end ;
36395: LD_VAR 0 2
36399: RET
// export function FilterByTag ( units , tag ) ; begin
36400: LD_INT 0
36402: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36403: LD_ADDR_VAR 0 3
36407: PUSH
36408: LD_VAR 0 1
36412: PPUSH
36413: LD_INT 120
36415: PUSH
36416: LD_VAR 0 2
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PPUSH
36425: CALL_OW 72
36429: ST_TO_ADDR
// end ;
36430: LD_VAR 0 3
36434: RET
// export function IsDriver ( un ) ; begin
36435: LD_INT 0
36437: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36438: LD_ADDR_VAR 0 2
36442: PUSH
36443: LD_VAR 0 1
36447: PUSH
36448: LD_INT 55
36450: PUSH
36451: EMPTY
36452: LIST
36453: PPUSH
36454: CALL_OW 69
36458: IN
36459: ST_TO_ADDR
// end ;
36460: LD_VAR 0 2
36464: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36465: LD_INT 0
36467: PPUSH
36468: PPUSH
// list := [ ] ;
36469: LD_ADDR_VAR 0 5
36473: PUSH
36474: EMPTY
36475: ST_TO_ADDR
// case d of 0 :
36476: LD_VAR 0 3
36480: PUSH
36481: LD_INT 0
36483: DOUBLE
36484: EQUAL
36485: IFTRUE 36489
36487: GO 36622
36489: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36490: LD_ADDR_VAR 0 5
36494: PUSH
36495: LD_VAR 0 1
36499: PUSH
36500: LD_INT 4
36502: MINUS
36503: PUSH
36504: LD_VAR 0 2
36508: PUSH
36509: LD_INT 4
36511: MINUS
36512: PUSH
36513: LD_INT 2
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: LIST
36520: PUSH
36521: LD_VAR 0 1
36525: PUSH
36526: LD_INT 3
36528: MINUS
36529: PUSH
36530: LD_VAR 0 2
36534: PUSH
36535: LD_INT 1
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: LIST
36542: PUSH
36543: LD_VAR 0 1
36547: PUSH
36548: LD_INT 4
36550: PLUS
36551: PUSH
36552: LD_VAR 0 2
36556: PUSH
36557: LD_INT 4
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: LIST
36564: PUSH
36565: LD_VAR 0 1
36569: PUSH
36570: LD_INT 3
36572: PLUS
36573: PUSH
36574: LD_VAR 0 2
36578: PUSH
36579: LD_INT 3
36581: PLUS
36582: PUSH
36583: LD_INT 5
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: LIST
36590: PUSH
36591: LD_VAR 0 1
36595: PUSH
36596: LD_VAR 0 2
36600: PUSH
36601: LD_INT 4
36603: PLUS
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: LIST
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: ST_TO_ADDR
// end ; 1 :
36620: GO 37320
36622: LD_INT 1
36624: DOUBLE
36625: EQUAL
36626: IFTRUE 36630
36628: GO 36763
36630: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36631: LD_ADDR_VAR 0 5
36635: PUSH
36636: LD_VAR 0 1
36640: PUSH
36641: LD_VAR 0 2
36645: PUSH
36646: LD_INT 4
36648: MINUS
36649: PUSH
36650: LD_INT 3
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: LIST
36657: PUSH
36658: LD_VAR 0 1
36662: PUSH
36663: LD_INT 3
36665: MINUS
36666: PUSH
36667: LD_VAR 0 2
36671: PUSH
36672: LD_INT 3
36674: MINUS
36675: PUSH
36676: LD_INT 2
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: PUSH
36684: LD_VAR 0 1
36688: PUSH
36689: LD_INT 4
36691: MINUS
36692: PUSH
36693: LD_VAR 0 2
36697: PUSH
36698: LD_INT 1
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: LIST
36705: PUSH
36706: LD_VAR 0 1
36710: PUSH
36711: LD_VAR 0 2
36715: PUSH
36716: LD_INT 3
36718: PLUS
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: LIST
36727: PUSH
36728: LD_VAR 0 1
36732: PUSH
36733: LD_INT 4
36735: PLUS
36736: PUSH
36737: LD_VAR 0 2
36741: PUSH
36742: LD_INT 4
36744: PLUS
36745: PUSH
36746: LD_INT 5
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: LIST
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: ST_TO_ADDR
// end ; 2 :
36761: GO 37320
36763: LD_INT 2
36765: DOUBLE
36766: EQUAL
36767: IFTRUE 36771
36769: GO 36900
36771: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36772: LD_ADDR_VAR 0 5
36776: PUSH
36777: LD_VAR 0 1
36781: PUSH
36782: LD_VAR 0 2
36786: PUSH
36787: LD_INT 3
36789: MINUS
36790: PUSH
36791: LD_INT 3
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: LIST
36798: PUSH
36799: LD_VAR 0 1
36803: PUSH
36804: LD_INT 4
36806: PLUS
36807: PUSH
36808: LD_VAR 0 2
36812: PUSH
36813: LD_INT 4
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: LIST
36820: PUSH
36821: LD_VAR 0 1
36825: PUSH
36826: LD_VAR 0 2
36830: PUSH
36831: LD_INT 4
36833: PLUS
36834: PUSH
36835: LD_INT 0
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: LIST
36842: PUSH
36843: LD_VAR 0 1
36847: PUSH
36848: LD_INT 3
36850: MINUS
36851: PUSH
36852: LD_VAR 0 2
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: LIST
36864: PUSH
36865: LD_VAR 0 1
36869: PUSH
36870: LD_INT 4
36872: MINUS
36873: PUSH
36874: LD_VAR 0 2
36878: PUSH
36879: LD_INT 4
36881: MINUS
36882: PUSH
36883: LD_INT 2
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: ST_TO_ADDR
// end ; 3 :
36898: GO 37320
36900: LD_INT 3
36902: DOUBLE
36903: EQUAL
36904: IFTRUE 36908
36906: GO 37041
36908: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36909: LD_ADDR_VAR 0 5
36913: PUSH
36914: LD_VAR 0 1
36918: PUSH
36919: LD_INT 3
36921: PLUS
36922: PUSH
36923: LD_VAR 0 2
36927: PUSH
36928: LD_INT 4
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: LIST
36935: PUSH
36936: LD_VAR 0 1
36940: PUSH
36941: LD_INT 4
36943: PLUS
36944: PUSH
36945: LD_VAR 0 2
36949: PUSH
36950: LD_INT 4
36952: PLUS
36953: PUSH
36954: LD_INT 5
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: LIST
36961: PUSH
36962: LD_VAR 0 1
36966: PUSH
36967: LD_INT 4
36969: MINUS
36970: PUSH
36971: LD_VAR 0 2
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: PUSH
36984: LD_VAR 0 1
36988: PUSH
36989: LD_VAR 0 2
36993: PUSH
36994: LD_INT 4
36996: MINUS
36997: PUSH
36998: LD_INT 3
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: LIST
37005: PUSH
37006: LD_VAR 0 1
37010: PUSH
37011: LD_INT 3
37013: MINUS
37014: PUSH
37015: LD_VAR 0 2
37019: PUSH
37020: LD_INT 3
37022: MINUS
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: ST_TO_ADDR
// end ; 4 :
37039: GO 37320
37041: LD_INT 4
37043: DOUBLE
37044: EQUAL
37045: IFTRUE 37049
37047: GO 37182
37049: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37050: LD_ADDR_VAR 0 5
37054: PUSH
37055: LD_VAR 0 1
37059: PUSH
37060: LD_VAR 0 2
37064: PUSH
37065: LD_INT 4
37067: PLUS
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: LIST
37076: PUSH
37077: LD_VAR 0 1
37081: PUSH
37082: LD_INT 3
37084: PLUS
37085: PUSH
37086: LD_VAR 0 2
37090: PUSH
37091: LD_INT 3
37093: PLUS
37094: PUSH
37095: LD_INT 5
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: LIST
37102: PUSH
37103: LD_VAR 0 1
37107: PUSH
37108: LD_INT 4
37110: PLUS
37111: PUSH
37112: LD_VAR 0 2
37116: PUSH
37117: LD_INT 4
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: PUSH
37125: LD_VAR 0 1
37129: PUSH
37130: LD_VAR 0 2
37134: PUSH
37135: LD_INT 3
37137: MINUS
37138: PUSH
37139: LD_INT 3
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: LIST
37146: PUSH
37147: LD_VAR 0 1
37151: PUSH
37152: LD_INT 4
37154: MINUS
37155: PUSH
37156: LD_VAR 0 2
37160: PUSH
37161: LD_INT 4
37163: MINUS
37164: PUSH
37165: LD_INT 2
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: LIST
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: ST_TO_ADDR
// end ; 5 :
37180: GO 37320
37182: LD_INT 5
37184: DOUBLE
37185: EQUAL
37186: IFTRUE 37190
37188: GO 37319
37190: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37191: LD_ADDR_VAR 0 5
37195: PUSH
37196: LD_VAR 0 1
37200: PUSH
37201: LD_INT 4
37203: MINUS
37204: PUSH
37205: LD_VAR 0 2
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: LIST
37217: PUSH
37218: LD_VAR 0 1
37222: PUSH
37223: LD_VAR 0 2
37227: PUSH
37228: LD_INT 4
37230: MINUS
37231: PUSH
37232: LD_INT 3
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: LIST
37239: PUSH
37240: LD_VAR 0 1
37244: PUSH
37245: LD_INT 4
37247: PLUS
37248: PUSH
37249: LD_VAR 0 2
37253: PUSH
37254: LD_INT 4
37256: PLUS
37257: PUSH
37258: LD_INT 5
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: LIST
37265: PUSH
37266: LD_VAR 0 1
37270: PUSH
37271: LD_INT 3
37273: PLUS
37274: PUSH
37275: LD_VAR 0 2
37279: PUSH
37280: LD_INT 4
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: LIST
37287: PUSH
37288: LD_VAR 0 1
37292: PUSH
37293: LD_VAR 0 2
37297: PUSH
37298: LD_INT 3
37300: PLUS
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: LIST
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: ST_TO_ADDR
// end ; end ;
37317: GO 37320
37319: POP
// result := list ;
37320: LD_ADDR_VAR 0 4
37324: PUSH
37325: LD_VAR 0 5
37329: ST_TO_ADDR
// end ;
37330: LD_VAR 0 4
37334: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37335: LD_INT 0
37337: PPUSH
37338: PPUSH
37339: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37340: LD_VAR 0 1
37344: NOT
37345: PUSH
37346: LD_VAR 0 2
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: LD_INT 2
37356: PUSH
37357: LD_INT 3
37359: PUSH
37360: LD_INT 4
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: IN
37369: NOT
37370: OR
37371: IFFALSE 37375
// exit ;
37373: GO 37458
// tmp := [ ] ;
37375: LD_ADDR_VAR 0 5
37379: PUSH
37380: EMPTY
37381: ST_TO_ADDR
// for i in units do
37382: LD_ADDR_VAR 0 4
37386: PUSH
37387: LD_VAR 0 1
37391: PUSH
37392: FOR_IN
37393: IFFALSE 37427
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37395: LD_ADDR_VAR 0 5
37399: PUSH
37400: LD_VAR 0 5
37404: PPUSH
37405: LD_VAR 0 4
37409: PPUSH
37410: LD_VAR 0 2
37414: PPUSH
37415: CALL_OW 259
37419: PPUSH
37420: CALL 38831 0 2
37424: ST_TO_ADDR
37425: GO 37392
37427: POP
37428: POP
// if not tmp then
37429: LD_VAR 0 5
37433: NOT
37434: IFFALSE 37438
// exit ;
37436: GO 37458
// result := SortListByListDesc ( units , tmp ) ;
37438: LD_ADDR_VAR 0 3
37442: PUSH
37443: LD_VAR 0 1
37447: PPUSH
37448: LD_VAR 0 5
37452: PPUSH
37453: CALL_OW 77
37457: ST_TO_ADDR
// end ;
37458: LD_VAR 0 3
37462: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37463: LD_INT 0
37465: PPUSH
37466: PPUSH
37467: PPUSH
// result := false ;
37468: LD_ADDR_VAR 0 3
37472: PUSH
37473: LD_INT 0
37475: ST_TO_ADDR
// if not building then
37476: LD_VAR 0 2
37480: NOT
37481: IFFALSE 37485
// exit ;
37483: GO 37623
// x := GetX ( building ) ;
37485: LD_ADDR_VAR 0 4
37489: PUSH
37490: LD_VAR 0 2
37494: PPUSH
37495: CALL_OW 250
37499: ST_TO_ADDR
// y := GetY ( building ) ;
37500: LD_ADDR_VAR 0 5
37504: PUSH
37505: LD_VAR 0 2
37509: PPUSH
37510: CALL_OW 251
37514: ST_TO_ADDR
// if not x or not y then
37515: LD_VAR 0 4
37519: NOT
37520: PUSH
37521: LD_VAR 0 5
37525: NOT
37526: OR
37527: IFFALSE 37531
// exit ;
37529: GO 37623
// if GetTaskList ( unit ) then
37531: LD_VAR 0 1
37535: PPUSH
37536: CALL_OW 437
37540: IFFALSE 37623
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37542: LD_STRING e
37544: PUSH
37545: LD_VAR 0 1
37549: PPUSH
37550: CALL_OW 437
37554: PUSH
37555: LD_INT 1
37557: ARRAY
37558: PUSH
37559: LD_INT 1
37561: ARRAY
37562: EQUAL
37563: PUSH
37564: LD_VAR 0 4
37568: PUSH
37569: LD_VAR 0 1
37573: PPUSH
37574: CALL_OW 437
37578: PUSH
37579: LD_INT 1
37581: ARRAY
37582: PUSH
37583: LD_INT 2
37585: ARRAY
37586: EQUAL
37587: AND
37588: PUSH
37589: LD_VAR 0 5
37593: PUSH
37594: LD_VAR 0 1
37598: PPUSH
37599: CALL_OW 437
37603: PUSH
37604: LD_INT 1
37606: ARRAY
37607: PUSH
37608: LD_INT 3
37610: ARRAY
37611: EQUAL
37612: AND
37613: IFFALSE 37623
// result := true end ;
37615: LD_ADDR_VAR 0 3
37619: PUSH
37620: LD_INT 1
37622: ST_TO_ADDR
// end ;
37623: LD_VAR 0 3
37627: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37628: LD_INT 0
37630: PPUSH
// result := false ;
37631: LD_ADDR_VAR 0 4
37635: PUSH
37636: LD_INT 0
37638: ST_TO_ADDR
// if GetTaskList ( unit ) then
37639: LD_VAR 0 1
37643: PPUSH
37644: CALL_OW 437
37648: IFFALSE 37731
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37650: LD_STRING M
37652: PUSH
37653: LD_VAR 0 1
37657: PPUSH
37658: CALL_OW 437
37662: PUSH
37663: LD_INT 1
37665: ARRAY
37666: PUSH
37667: LD_INT 1
37669: ARRAY
37670: EQUAL
37671: PUSH
37672: LD_VAR 0 2
37676: PUSH
37677: LD_VAR 0 1
37681: PPUSH
37682: CALL_OW 437
37686: PUSH
37687: LD_INT 1
37689: ARRAY
37690: PUSH
37691: LD_INT 2
37693: ARRAY
37694: EQUAL
37695: AND
37696: PUSH
37697: LD_VAR 0 3
37701: PUSH
37702: LD_VAR 0 1
37706: PPUSH
37707: CALL_OW 437
37711: PUSH
37712: LD_INT 1
37714: ARRAY
37715: PUSH
37716: LD_INT 3
37718: ARRAY
37719: EQUAL
37720: AND
37721: IFFALSE 37731
// result := true ;
37723: LD_ADDR_VAR 0 4
37727: PUSH
37728: LD_INT 1
37730: ST_TO_ADDR
// end ; end ;
37731: LD_VAR 0 4
37735: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37736: LD_INT 0
37738: PPUSH
37739: PPUSH
37740: PPUSH
37741: PPUSH
// if not unit or not area then
37742: LD_VAR 0 1
37746: NOT
37747: PUSH
37748: LD_VAR 0 2
37752: NOT
37753: OR
37754: IFFALSE 37758
// exit ;
37756: GO 37934
// tmp := AreaToList ( area , i ) ;
37758: LD_ADDR_VAR 0 6
37762: PUSH
37763: LD_VAR 0 2
37767: PPUSH
37768: LD_VAR 0 5
37772: PPUSH
37773: CALL_OW 517
37777: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37778: LD_ADDR_VAR 0 5
37782: PUSH
37783: DOUBLE
37784: LD_INT 1
37786: DEC
37787: ST_TO_ADDR
37788: LD_VAR 0 6
37792: PUSH
37793: LD_INT 1
37795: ARRAY
37796: PUSH
37797: FOR_TO
37798: IFFALSE 37932
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37800: LD_ADDR_VAR 0 7
37804: PUSH
37805: LD_VAR 0 6
37809: PUSH
37810: LD_INT 1
37812: ARRAY
37813: PUSH
37814: LD_VAR 0 5
37818: ARRAY
37819: PUSH
37820: LD_VAR 0 6
37824: PUSH
37825: LD_INT 2
37827: ARRAY
37828: PUSH
37829: LD_VAR 0 5
37833: ARRAY
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
37839: LD_INT 92
37841: PUSH
37842: LD_VAR 0 7
37846: PUSH
37847: LD_INT 1
37849: ARRAY
37850: PUSH
37851: LD_VAR 0 7
37855: PUSH
37856: LD_INT 2
37858: ARRAY
37859: PUSH
37860: LD_INT 2
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: PPUSH
37869: CALL_OW 69
37873: PUSH
37874: LD_INT 0
37876: EQUAL
37877: IFFALSE 37930
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37879: LD_VAR 0 1
37883: PPUSH
37884: LD_VAR 0 7
37888: PUSH
37889: LD_INT 1
37891: ARRAY
37892: PPUSH
37893: LD_VAR 0 7
37897: PUSH
37898: LD_INT 2
37900: ARRAY
37901: PPUSH
37902: LD_VAR 0 3
37906: PPUSH
37907: CALL_OW 48
// result := IsPlaced ( unit ) ;
37911: LD_ADDR_VAR 0 4
37915: PUSH
37916: LD_VAR 0 1
37920: PPUSH
37921: CALL_OW 305
37925: ST_TO_ADDR
// exit ;
37926: POP
37927: POP
37928: GO 37934
// end ; end ;
37930: GO 37797
37932: POP
37933: POP
// end ;
37934: LD_VAR 0 4
37938: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37939: LD_INT 0
37941: PPUSH
37942: PPUSH
37943: PPUSH
// if not side or side > 8 then
37944: LD_VAR 0 1
37948: NOT
37949: PUSH
37950: LD_VAR 0 1
37954: PUSH
37955: LD_INT 8
37957: GREATER
37958: OR
37959: IFFALSE 37963
// exit ;
37961: GO 38150
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37963: LD_ADDR_VAR 0 4
37967: PUSH
37968: LD_INT 22
37970: PUSH
37971: LD_VAR 0 1
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 21
37982: PUSH
37983: LD_INT 3
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PPUSH
37994: CALL_OW 69
37998: ST_TO_ADDR
// if not tmp then
37999: LD_VAR 0 4
38003: NOT
38004: IFFALSE 38008
// exit ;
38006: GO 38150
// enable_addtolog := true ;
38008: LD_ADDR_OWVAR 81
38012: PUSH
38013: LD_INT 1
38015: ST_TO_ADDR
// AddToLog ( [ ) ;
38016: LD_STRING [
38018: PPUSH
38019: CALL_OW 561
// for i in tmp do
38023: LD_ADDR_VAR 0 3
38027: PUSH
38028: LD_VAR 0 4
38032: PUSH
38033: FOR_IN
38034: IFFALSE 38141
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38036: LD_STRING [
38038: PUSH
38039: LD_VAR 0 3
38043: PPUSH
38044: CALL_OW 266
38048: STR
38049: PUSH
38050: LD_STRING , 
38052: STR
38053: PUSH
38054: LD_VAR 0 3
38058: PPUSH
38059: CALL_OW 250
38063: STR
38064: PUSH
38065: LD_STRING , 
38067: STR
38068: PUSH
38069: LD_VAR 0 3
38073: PPUSH
38074: CALL_OW 251
38078: STR
38079: PUSH
38080: LD_STRING , 
38082: STR
38083: PUSH
38084: LD_VAR 0 3
38088: PPUSH
38089: CALL_OW 254
38093: STR
38094: PUSH
38095: LD_STRING , 
38097: STR
38098: PUSH
38099: LD_VAR 0 3
38103: PPUSH
38104: LD_INT 1
38106: PPUSH
38107: CALL_OW 268
38111: STR
38112: PUSH
38113: LD_STRING , 
38115: STR
38116: PUSH
38117: LD_VAR 0 3
38121: PPUSH
38122: LD_INT 2
38124: PPUSH
38125: CALL_OW 268
38129: STR
38130: PUSH
38131: LD_STRING ],
38133: STR
38134: PPUSH
38135: CALL_OW 561
// end ;
38139: GO 38033
38141: POP
38142: POP
// AddToLog ( ]; ) ;
38143: LD_STRING ];
38145: PPUSH
38146: CALL_OW 561
// end ;
38150: LD_VAR 0 2
38154: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38155: LD_INT 0
38157: PPUSH
38158: PPUSH
38159: PPUSH
38160: PPUSH
38161: PPUSH
// if not area or not rate or not max then
38162: LD_VAR 0 1
38166: NOT
38167: PUSH
38168: LD_VAR 0 2
38172: NOT
38173: OR
38174: PUSH
38175: LD_VAR 0 4
38179: NOT
38180: OR
38181: IFFALSE 38185
// exit ;
38183: GO 38374
// while 1 do
38185: LD_INT 1
38187: IFFALSE 38374
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38189: LD_ADDR_VAR 0 9
38193: PUSH
38194: LD_VAR 0 1
38198: PPUSH
38199: LD_INT 1
38201: PPUSH
38202: CALL_OW 287
38206: PUSH
38207: LD_INT 10
38209: MUL
38210: ST_TO_ADDR
// r := rate / 10 ;
38211: LD_ADDR_VAR 0 7
38215: PUSH
38216: LD_VAR 0 2
38220: PUSH
38221: LD_INT 10
38223: DIVREAL
38224: ST_TO_ADDR
// time := 1 1$00 ;
38225: LD_ADDR_VAR 0 8
38229: PUSH
38230: LD_INT 2100
38232: ST_TO_ADDR
// if amount < min then
38233: LD_VAR 0 9
38237: PUSH
38238: LD_VAR 0 3
38242: LESS
38243: IFFALSE 38261
// r := r * 2 else
38245: LD_ADDR_VAR 0 7
38249: PUSH
38250: LD_VAR 0 7
38254: PUSH
38255: LD_INT 2
38257: MUL
38258: ST_TO_ADDR
38259: GO 38287
// if amount > max then
38261: LD_VAR 0 9
38265: PUSH
38266: LD_VAR 0 4
38270: GREATER
38271: IFFALSE 38287
// r := r / 2 ;
38273: LD_ADDR_VAR 0 7
38277: PUSH
38278: LD_VAR 0 7
38282: PUSH
38283: LD_INT 2
38285: DIVREAL
38286: ST_TO_ADDR
// time := time / r ;
38287: LD_ADDR_VAR 0 8
38291: PUSH
38292: LD_VAR 0 8
38296: PUSH
38297: LD_VAR 0 7
38301: DIVREAL
38302: ST_TO_ADDR
// if time < 0 then
38303: LD_VAR 0 8
38307: PUSH
38308: LD_INT 0
38310: LESS
38311: IFFALSE 38328
// time := time * - 1 ;
38313: LD_ADDR_VAR 0 8
38317: PUSH
38318: LD_VAR 0 8
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: MUL
38327: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38328: LD_VAR 0 8
38332: PUSH
38333: LD_INT 35
38335: PPUSH
38336: LD_INT 875
38338: PPUSH
38339: CALL_OW 12
38343: PLUS
38344: PPUSH
38345: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38349: LD_INT 1
38351: PPUSH
38352: LD_INT 5
38354: PPUSH
38355: CALL_OW 12
38359: PPUSH
38360: LD_VAR 0 1
38364: PPUSH
38365: LD_INT 1
38367: PPUSH
38368: CALL_OW 55
// end ;
38372: GO 38185
// end ;
38374: LD_VAR 0 5
38378: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38379: LD_INT 0
38381: PPUSH
38382: PPUSH
38383: PPUSH
38384: PPUSH
38385: PPUSH
38386: PPUSH
38387: PPUSH
38388: PPUSH
// if not turrets or not factories then
38389: LD_VAR 0 1
38393: NOT
38394: PUSH
38395: LD_VAR 0 2
38399: NOT
38400: OR
38401: IFFALSE 38405
// exit ;
38403: GO 38712
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38405: LD_ADDR_VAR 0 10
38409: PUSH
38410: LD_INT 5
38412: PUSH
38413: LD_INT 6
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 2
38422: PUSH
38423: LD_INT 4
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 3
38432: PUSH
38433: LD_INT 5
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 24
38447: PUSH
38448: LD_INT 25
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 23
38457: PUSH
38458: LD_INT 27
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 42
38471: PUSH
38472: LD_INT 43
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 44
38481: PUSH
38482: LD_INT 46
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 45
38491: PUSH
38492: LD_INT 47
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: LIST
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: LIST
38508: ST_TO_ADDR
// result := [ ] ;
38509: LD_ADDR_VAR 0 3
38513: PUSH
38514: EMPTY
38515: ST_TO_ADDR
// for i in turrets do
38516: LD_ADDR_VAR 0 4
38520: PUSH
38521: LD_VAR 0 1
38525: PUSH
38526: FOR_IN
38527: IFFALSE 38710
// begin nat := GetNation ( i ) ;
38529: LD_ADDR_VAR 0 7
38533: PUSH
38534: LD_VAR 0 4
38538: PPUSH
38539: CALL_OW 248
38543: ST_TO_ADDR
// weapon := 0 ;
38544: LD_ADDR_VAR 0 8
38548: PUSH
38549: LD_INT 0
38551: ST_TO_ADDR
// if not nat then
38552: LD_VAR 0 7
38556: NOT
38557: IFFALSE 38561
// continue ;
38559: GO 38526
// for j in list [ nat ] do
38561: LD_ADDR_VAR 0 5
38565: PUSH
38566: LD_VAR 0 10
38570: PUSH
38571: LD_VAR 0 7
38575: ARRAY
38576: PUSH
38577: FOR_IN
38578: IFFALSE 38619
// if GetBWeapon ( i ) = j [ 1 ] then
38580: LD_VAR 0 4
38584: PPUSH
38585: CALL_OW 269
38589: PUSH
38590: LD_VAR 0 5
38594: PUSH
38595: LD_INT 1
38597: ARRAY
38598: EQUAL
38599: IFFALSE 38617
// begin weapon := j [ 2 ] ;
38601: LD_ADDR_VAR 0 8
38605: PUSH
38606: LD_VAR 0 5
38610: PUSH
38611: LD_INT 2
38613: ARRAY
38614: ST_TO_ADDR
// break ;
38615: GO 38619
// end ;
38617: GO 38577
38619: POP
38620: POP
// if not weapon then
38621: LD_VAR 0 8
38625: NOT
38626: IFFALSE 38630
// continue ;
38628: GO 38526
// for k in factories do
38630: LD_ADDR_VAR 0 6
38634: PUSH
38635: LD_VAR 0 2
38639: PUSH
38640: FOR_IN
38641: IFFALSE 38706
// begin weapons := AvailableWeaponList ( k ) ;
38643: LD_ADDR_VAR 0 9
38647: PUSH
38648: LD_VAR 0 6
38652: PPUSH
38653: CALL_OW 478
38657: ST_TO_ADDR
// if not weapons then
38658: LD_VAR 0 9
38662: NOT
38663: IFFALSE 38667
// continue ;
38665: GO 38640
// if weapon in weapons then
38667: LD_VAR 0 8
38671: PUSH
38672: LD_VAR 0 9
38676: IN
38677: IFFALSE 38704
// begin result := [ i , weapon ] ;
38679: LD_ADDR_VAR 0 3
38683: PUSH
38684: LD_VAR 0 4
38688: PUSH
38689: LD_VAR 0 8
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: ST_TO_ADDR
// exit ;
38698: POP
38699: POP
38700: POP
38701: POP
38702: GO 38712
// end ; end ;
38704: GO 38640
38706: POP
38707: POP
// end ;
38708: GO 38526
38710: POP
38711: POP
// end ;
38712: LD_VAR 0 3
38716: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38717: LD_INT 0
38719: PPUSH
// if not side or side > 8 then
38720: LD_VAR 0 3
38724: NOT
38725: PUSH
38726: LD_VAR 0 3
38730: PUSH
38731: LD_INT 8
38733: GREATER
38734: OR
38735: IFFALSE 38739
// exit ;
38737: GO 38798
// if not range then
38739: LD_VAR 0 4
38743: NOT
38744: IFFALSE 38755
// range := - 12 ;
38746: LD_ADDR_VAR 0 4
38750: PUSH
38751: LD_INT 12
38753: NEG
38754: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38755: LD_VAR 0 1
38759: PPUSH
38760: LD_VAR 0 2
38764: PPUSH
38765: LD_VAR 0 3
38769: PPUSH
38770: LD_VAR 0 4
38774: PPUSH
38775: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38779: LD_VAR 0 1
38783: PPUSH
38784: LD_VAR 0 2
38788: PPUSH
38789: LD_VAR 0 3
38793: PPUSH
38794: CALL_OW 331
// end ;
38798: LD_VAR 0 5
38802: RET
// export function Video ( mode ) ; begin
38803: LD_INT 0
38805: PPUSH
// ingame_video = mode ;
38806: LD_ADDR_OWVAR 52
38810: PUSH
38811: LD_VAR 0 1
38815: ST_TO_ADDR
// interface_hidden = mode ;
38816: LD_ADDR_OWVAR 54
38820: PUSH
38821: LD_VAR 0 1
38825: ST_TO_ADDR
// end ;
38826: LD_VAR 0 2
38830: RET
// export function Join ( array , element ) ; begin
38831: LD_INT 0
38833: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38834: LD_ADDR_VAR 0 3
38838: PUSH
38839: LD_VAR 0 1
38843: PPUSH
38844: LD_VAR 0 1
38848: PUSH
38849: LD_INT 1
38851: PLUS
38852: PPUSH
38853: LD_VAR 0 2
38857: PPUSH
38858: CALL_OW 1
38862: ST_TO_ADDR
// end ;
38863: LD_VAR 0 3
38867: RET
// export function JoinUnion ( array , element ) ; begin
38868: LD_INT 0
38870: PPUSH
// result := array union element ;
38871: LD_ADDR_VAR 0 3
38875: PUSH
38876: LD_VAR 0 1
38880: PUSH
38881: LD_VAR 0 2
38885: UNION
38886: ST_TO_ADDR
// end ;
38887: LD_VAR 0 3
38891: RET
// export function GetBehemoths ( side ) ; begin
38892: LD_INT 0
38894: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38895: LD_ADDR_VAR 0 2
38899: PUSH
38900: LD_INT 22
38902: PUSH
38903: LD_VAR 0 1
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 31
38914: PUSH
38915: LD_INT 25
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PPUSH
38926: CALL_OW 69
38930: ST_TO_ADDR
// end ;
38931: LD_VAR 0 2
38935: RET
// export function Shuffle ( array ) ; var i , index ; begin
38936: LD_INT 0
38938: PPUSH
38939: PPUSH
38940: PPUSH
// result := [ ] ;
38941: LD_ADDR_VAR 0 2
38945: PUSH
38946: EMPTY
38947: ST_TO_ADDR
// if not array then
38948: LD_VAR 0 1
38952: NOT
38953: IFFALSE 38957
// exit ;
38955: GO 39056
// Randomize ;
38957: CALL_OW 10
// for i = array downto 1 do
38961: LD_ADDR_VAR 0 3
38965: PUSH
38966: DOUBLE
38967: LD_VAR 0 1
38971: INC
38972: ST_TO_ADDR
38973: LD_INT 1
38975: PUSH
38976: FOR_DOWNTO
38977: IFFALSE 39054
// begin index := rand ( 1 , array ) ;
38979: LD_ADDR_VAR 0 4
38983: PUSH
38984: LD_INT 1
38986: PPUSH
38987: LD_VAR 0 1
38991: PPUSH
38992: CALL_OW 12
38996: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38997: LD_ADDR_VAR 0 2
39001: PUSH
39002: LD_VAR 0 2
39006: PPUSH
39007: LD_VAR 0 2
39011: PUSH
39012: LD_INT 1
39014: PLUS
39015: PPUSH
39016: LD_VAR 0 1
39020: PUSH
39021: LD_VAR 0 4
39025: ARRAY
39026: PPUSH
39027: CALL_OW 2
39031: ST_TO_ADDR
// array := Delete ( array , index ) ;
39032: LD_ADDR_VAR 0 1
39036: PUSH
39037: LD_VAR 0 1
39041: PPUSH
39042: LD_VAR 0 4
39046: PPUSH
39047: CALL_OW 3
39051: ST_TO_ADDR
// end ;
39052: GO 38976
39054: POP
39055: POP
// end ;
39056: LD_VAR 0 2
39060: RET
// export function GetBaseMaterials ( base ) ; begin
39061: LD_INT 0
39063: PPUSH
// result := [ 0 , 0 , 0 ] ;
39064: LD_ADDR_VAR 0 2
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: LIST
39082: ST_TO_ADDR
// if not base then
39083: LD_VAR 0 1
39087: NOT
39088: IFFALSE 39092
// exit ;
39090: GO 39141
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39092: LD_ADDR_VAR 0 2
39096: PUSH
39097: LD_VAR 0 1
39101: PPUSH
39102: LD_INT 1
39104: PPUSH
39105: CALL_OW 275
39109: PUSH
39110: LD_VAR 0 1
39114: PPUSH
39115: LD_INT 2
39117: PPUSH
39118: CALL_OW 275
39122: PUSH
39123: LD_VAR 0 1
39127: PPUSH
39128: LD_INT 3
39130: PPUSH
39131: CALL_OW 275
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: LIST
39140: ST_TO_ADDR
// end ;
39141: LD_VAR 0 2
39145: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39146: LD_INT 0
39148: PPUSH
39149: PPUSH
// result := array ;
39150: LD_ADDR_VAR 0 3
39154: PUSH
39155: LD_VAR 0 1
39159: ST_TO_ADDR
// if size >= result then
39160: LD_VAR 0 2
39164: PUSH
39165: LD_VAR 0 3
39169: GREATEREQUAL
39170: IFFALSE 39174
// exit ;
39172: GO 39224
// if size then
39174: LD_VAR 0 2
39178: IFFALSE 39224
// for i := array downto size do
39180: LD_ADDR_VAR 0 4
39184: PUSH
39185: DOUBLE
39186: LD_VAR 0 1
39190: INC
39191: ST_TO_ADDR
39192: LD_VAR 0 2
39196: PUSH
39197: FOR_DOWNTO
39198: IFFALSE 39222
// result := Delete ( result , result ) ;
39200: LD_ADDR_VAR 0 3
39204: PUSH
39205: LD_VAR 0 3
39209: PPUSH
39210: LD_VAR 0 3
39214: PPUSH
39215: CALL_OW 3
39219: ST_TO_ADDR
39220: GO 39197
39222: POP
39223: POP
// end ;
39224: LD_VAR 0 3
39228: RET
// export function ComExit ( unit ) ; var tmp ; begin
39229: LD_INT 0
39231: PPUSH
39232: PPUSH
// if not IsInUnit ( unit ) then
39233: LD_VAR 0 1
39237: PPUSH
39238: CALL_OW 310
39242: NOT
39243: IFFALSE 39247
// exit ;
39245: GO 39307
// tmp := IsInUnit ( unit ) ;
39247: LD_ADDR_VAR 0 3
39251: PUSH
39252: LD_VAR 0 1
39256: PPUSH
39257: CALL_OW 310
39261: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39262: LD_VAR 0 3
39266: PPUSH
39267: CALL_OW 247
39271: PUSH
39272: LD_INT 2
39274: EQUAL
39275: IFFALSE 39288
// ComExitVehicle ( unit ) else
39277: LD_VAR 0 1
39281: PPUSH
39282: CALL_OW 121
39286: GO 39297
// ComExitBuilding ( unit ) ;
39288: LD_VAR 0 1
39292: PPUSH
39293: CALL_OW 122
// result := tmp ;
39297: LD_ADDR_VAR 0 2
39301: PUSH
39302: LD_VAR 0 3
39306: ST_TO_ADDR
// end ;
39307: LD_VAR 0 2
39311: RET
// export function ComExitAll ( units ) ; var i ; begin
39312: LD_INT 0
39314: PPUSH
39315: PPUSH
// if not units then
39316: LD_VAR 0 1
39320: NOT
39321: IFFALSE 39325
// exit ;
39323: GO 39351
// for i in units do
39325: LD_ADDR_VAR 0 3
39329: PUSH
39330: LD_VAR 0 1
39334: PUSH
39335: FOR_IN
39336: IFFALSE 39349
// ComExit ( i ) ;
39338: LD_VAR 0 3
39342: PPUSH
39343: CALL 39229 0 1
39347: GO 39335
39349: POP
39350: POP
// end ;
39351: LD_VAR 0 2
39355: RET
// export function ResetHc ; begin
39356: LD_INT 0
39358: PPUSH
// InitHc ;
39359: CALL_OW 19
// hc_importance := 0 ;
39363: LD_ADDR_OWVAR 32
39367: PUSH
39368: LD_INT 0
39370: ST_TO_ADDR
// end ;
39371: LD_VAR 0 1
39375: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39376: LD_INT 0
39378: PPUSH
39379: PPUSH
39380: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39381: LD_ADDR_VAR 0 6
39385: PUSH
39386: LD_VAR 0 1
39390: PUSH
39391: LD_VAR 0 3
39395: PLUS
39396: PUSH
39397: LD_INT 2
39399: DIV
39400: ST_TO_ADDR
// if _x < 0 then
39401: LD_VAR 0 6
39405: PUSH
39406: LD_INT 0
39408: LESS
39409: IFFALSE 39426
// _x := _x * - 1 ;
39411: LD_ADDR_VAR 0 6
39415: PUSH
39416: LD_VAR 0 6
39420: PUSH
39421: LD_INT 1
39423: NEG
39424: MUL
39425: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39426: LD_ADDR_VAR 0 7
39430: PUSH
39431: LD_VAR 0 2
39435: PUSH
39436: LD_VAR 0 4
39440: PLUS
39441: PUSH
39442: LD_INT 2
39444: DIV
39445: ST_TO_ADDR
// if _y < 0 then
39446: LD_VAR 0 7
39450: PUSH
39451: LD_INT 0
39453: LESS
39454: IFFALSE 39471
// _y := _y * - 1 ;
39456: LD_ADDR_VAR 0 7
39460: PUSH
39461: LD_VAR 0 7
39465: PUSH
39466: LD_INT 1
39468: NEG
39469: MUL
39470: ST_TO_ADDR
// result := [ _x , _y ] ;
39471: LD_ADDR_VAR 0 5
39475: PUSH
39476: LD_VAR 0 6
39480: PUSH
39481: LD_VAR 0 7
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: ST_TO_ADDR
// end ;
39490: LD_VAR 0 5
39494: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39495: LD_INT 0
39497: PPUSH
39498: PPUSH
39499: PPUSH
39500: PPUSH
// task := GetTaskList ( unit ) ;
39501: LD_ADDR_VAR 0 7
39505: PUSH
39506: LD_VAR 0 1
39510: PPUSH
39511: CALL_OW 437
39515: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39516: LD_VAR 0 7
39520: NOT
39521: PUSH
39522: LD_VAR 0 1
39526: PPUSH
39527: LD_VAR 0 2
39531: PPUSH
39532: CALL_OW 308
39536: NOT
39537: AND
39538: IFFALSE 39542
// exit ;
39540: GO 39660
// if IsInArea ( unit , area ) then
39542: LD_VAR 0 1
39546: PPUSH
39547: LD_VAR 0 2
39551: PPUSH
39552: CALL_OW 308
39556: IFFALSE 39574
// begin ComMoveToArea ( unit , goAway ) ;
39558: LD_VAR 0 1
39562: PPUSH
39563: LD_VAR 0 3
39567: PPUSH
39568: CALL_OW 113
// exit ;
39572: GO 39660
// end ; if task [ 1 ] [ 1 ] <> M then
39574: LD_VAR 0 7
39578: PUSH
39579: LD_INT 1
39581: ARRAY
39582: PUSH
39583: LD_INT 1
39585: ARRAY
39586: PUSH
39587: LD_STRING M
39589: NONEQUAL
39590: IFFALSE 39594
// exit ;
39592: GO 39660
// x := task [ 1 ] [ 2 ] ;
39594: LD_ADDR_VAR 0 5
39598: PUSH
39599: LD_VAR 0 7
39603: PUSH
39604: LD_INT 1
39606: ARRAY
39607: PUSH
39608: LD_INT 2
39610: ARRAY
39611: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39612: LD_ADDR_VAR 0 6
39616: PUSH
39617: LD_VAR 0 7
39621: PUSH
39622: LD_INT 1
39624: ARRAY
39625: PUSH
39626: LD_INT 3
39628: ARRAY
39629: ST_TO_ADDR
// if InArea ( x , y , area ) then
39630: LD_VAR 0 5
39634: PPUSH
39635: LD_VAR 0 6
39639: PPUSH
39640: LD_VAR 0 2
39644: PPUSH
39645: CALL_OW 309
39649: IFFALSE 39660
// ComStop ( unit ) ;
39651: LD_VAR 0 1
39655: PPUSH
39656: CALL_OW 141
// end ;
39660: LD_VAR 0 4
39664: RET
// export function Abs ( value ) ; begin
39665: LD_INT 0
39667: PPUSH
// result := value ;
39668: LD_ADDR_VAR 0 2
39672: PUSH
39673: LD_VAR 0 1
39677: ST_TO_ADDR
// if value < 0 then
39678: LD_VAR 0 1
39682: PUSH
39683: LD_INT 0
39685: LESS
39686: IFFALSE 39703
// result := value * - 1 ;
39688: LD_ADDR_VAR 0 2
39692: PUSH
39693: LD_VAR 0 1
39697: PUSH
39698: LD_INT 1
39700: NEG
39701: MUL
39702: ST_TO_ADDR
// end ;
39703: LD_VAR 0 2
39707: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39708: LD_INT 0
39710: PPUSH
39711: PPUSH
39712: PPUSH
39713: PPUSH
39714: PPUSH
39715: PPUSH
39716: PPUSH
39717: PPUSH
// if not unit or not building then
39718: LD_VAR 0 1
39722: NOT
39723: PUSH
39724: LD_VAR 0 2
39728: NOT
39729: OR
39730: IFFALSE 39734
// exit ;
39732: GO 39960
// x := GetX ( building ) ;
39734: LD_ADDR_VAR 0 4
39738: PUSH
39739: LD_VAR 0 2
39743: PPUSH
39744: CALL_OW 250
39748: ST_TO_ADDR
// y := GetY ( building ) ;
39749: LD_ADDR_VAR 0 6
39753: PUSH
39754: LD_VAR 0 2
39758: PPUSH
39759: CALL_OW 251
39763: ST_TO_ADDR
// d := GetDir ( building ) ;
39764: LD_ADDR_VAR 0 8
39768: PUSH
39769: LD_VAR 0 2
39773: PPUSH
39774: CALL_OW 254
39778: ST_TO_ADDR
// r := 4 ;
39779: LD_ADDR_VAR 0 9
39783: PUSH
39784: LD_INT 4
39786: ST_TO_ADDR
// for i := 1 to 5 do
39787: LD_ADDR_VAR 0 10
39791: PUSH
39792: DOUBLE
39793: LD_INT 1
39795: DEC
39796: ST_TO_ADDR
39797: LD_INT 5
39799: PUSH
39800: FOR_TO
39801: IFFALSE 39958
// begin _x := ShiftX ( x , d , r + i ) ;
39803: LD_ADDR_VAR 0 5
39807: PUSH
39808: LD_VAR 0 4
39812: PPUSH
39813: LD_VAR 0 8
39817: PPUSH
39818: LD_VAR 0 9
39822: PUSH
39823: LD_VAR 0 10
39827: PLUS
39828: PPUSH
39829: CALL_OW 272
39833: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39834: LD_ADDR_VAR 0 7
39838: PUSH
39839: LD_VAR 0 6
39843: PPUSH
39844: LD_VAR 0 8
39848: PPUSH
39849: LD_VAR 0 9
39853: PUSH
39854: LD_VAR 0 10
39858: PLUS
39859: PPUSH
39860: CALL_OW 273
39864: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39865: LD_VAR 0 5
39869: PPUSH
39870: LD_VAR 0 7
39874: PPUSH
39875: CALL_OW 488
39879: PUSH
39880: LD_VAR 0 5
39884: PPUSH
39885: LD_VAR 0 7
39889: PPUSH
39890: CALL_OW 428
39894: PPUSH
39895: CALL_OW 247
39899: PUSH
39900: LD_INT 3
39902: PUSH
39903: LD_INT 2
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: IN
39910: NOT
39911: AND
39912: IFFALSE 39956
// begin ComMoveXY ( unit , _x , _y ) ;
39914: LD_VAR 0 1
39918: PPUSH
39919: LD_VAR 0 5
39923: PPUSH
39924: LD_VAR 0 7
39928: PPUSH
39929: CALL_OW 111
// result := [ _x , _y ] ;
39933: LD_ADDR_VAR 0 3
39937: PUSH
39938: LD_VAR 0 5
39942: PUSH
39943: LD_VAR 0 7
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: ST_TO_ADDR
// exit ;
39952: POP
39953: POP
39954: GO 39960
// end ; end ;
39956: GO 39800
39958: POP
39959: POP
// end ;
39960: LD_VAR 0 3
39964: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39965: LD_INT 0
39967: PPUSH
39968: PPUSH
39969: PPUSH
// result := 0 ;
39970: LD_ADDR_VAR 0 3
39974: PUSH
39975: LD_INT 0
39977: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39978: LD_VAR 0 1
39982: PUSH
39983: LD_INT 0
39985: LESS
39986: PUSH
39987: LD_VAR 0 1
39991: PUSH
39992: LD_INT 8
39994: GREATER
39995: OR
39996: PUSH
39997: LD_VAR 0 2
40001: PUSH
40002: LD_INT 0
40004: LESS
40005: OR
40006: PUSH
40007: LD_VAR 0 2
40011: PUSH
40012: LD_INT 8
40014: GREATER
40015: OR
40016: IFFALSE 40020
// exit ;
40018: GO 40095
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40020: LD_ADDR_VAR 0 4
40024: PUSH
40025: LD_INT 22
40027: PUSH
40028: LD_VAR 0 2
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PPUSH
40037: CALL_OW 69
40041: PUSH
40042: FOR_IN
40043: IFFALSE 40093
// begin un := UnitShoot ( i ) ;
40045: LD_ADDR_VAR 0 5
40049: PUSH
40050: LD_VAR 0 4
40054: PPUSH
40055: CALL_OW 504
40059: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40060: LD_VAR 0 5
40064: PPUSH
40065: CALL_OW 255
40069: PUSH
40070: LD_VAR 0 1
40074: EQUAL
40075: IFFALSE 40091
// begin result := un ;
40077: LD_ADDR_VAR 0 3
40081: PUSH
40082: LD_VAR 0 5
40086: ST_TO_ADDR
// exit ;
40087: POP
40088: POP
40089: GO 40095
// end ; end ;
40091: GO 40042
40093: POP
40094: POP
// end ;
40095: LD_VAR 0 3
40099: RET
// export function GetCargoBay ( units ) ; begin
40100: LD_INT 0
40102: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40103: LD_ADDR_VAR 0 2
40107: PUSH
40108: LD_VAR 0 1
40112: PPUSH
40113: LD_INT 2
40115: PUSH
40116: LD_INT 34
40118: PUSH
40119: LD_INT 12
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 34
40128: PUSH
40129: LD_INT 51
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 34
40138: PUSH
40139: LD_INT 32
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 34
40148: PUSH
40149: LD_INT 89
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: PPUSH
40163: CALL_OW 72
40167: ST_TO_ADDR
// end ;
40168: LD_VAR 0 2
40172: RET
// export function Negate ( value ) ; begin
40173: LD_INT 0
40175: PPUSH
// result := not value ;
40176: LD_ADDR_VAR 0 2
40180: PUSH
40181: LD_VAR 0 1
40185: NOT
40186: ST_TO_ADDR
// end ;
40187: LD_VAR 0 2
40191: RET
// export function Inc ( value ) ; begin
40192: LD_INT 0
40194: PPUSH
// result := value + 1 ;
40195: LD_ADDR_VAR 0 2
40199: PUSH
40200: LD_VAR 0 1
40204: PUSH
40205: LD_INT 1
40207: PLUS
40208: ST_TO_ADDR
// end ;
40209: LD_VAR 0 2
40213: RET
// export function Dec ( value ) ; begin
40214: LD_INT 0
40216: PPUSH
// result := value - 1 ;
40217: LD_ADDR_VAR 0 2
40221: PUSH
40222: LD_VAR 0 1
40226: PUSH
40227: LD_INT 1
40229: MINUS
40230: ST_TO_ADDR
// end ;
40231: LD_VAR 0 2
40235: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40236: LD_INT 0
40238: PPUSH
40239: PPUSH
40240: PPUSH
40241: PPUSH
40242: PPUSH
40243: PPUSH
40244: PPUSH
40245: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40246: LD_VAR 0 1
40250: PPUSH
40251: LD_VAR 0 2
40255: PPUSH
40256: CALL_OW 488
40260: NOT
40261: PUSH
40262: LD_VAR 0 3
40266: PPUSH
40267: LD_VAR 0 4
40271: PPUSH
40272: CALL_OW 488
40276: NOT
40277: OR
40278: IFFALSE 40291
// begin result := - 1 ;
40280: LD_ADDR_VAR 0 5
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: ST_TO_ADDR
// exit ;
40289: GO 40526
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40291: LD_ADDR_VAR 0 12
40295: PUSH
40296: LD_VAR 0 1
40300: PPUSH
40301: LD_VAR 0 2
40305: PPUSH
40306: LD_VAR 0 3
40310: PPUSH
40311: LD_VAR 0 4
40315: PPUSH
40316: CALL 39376 0 4
40320: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40321: LD_ADDR_VAR 0 11
40325: PUSH
40326: LD_VAR 0 1
40330: PPUSH
40331: LD_VAR 0 2
40335: PPUSH
40336: LD_VAR 0 12
40340: PUSH
40341: LD_INT 1
40343: ARRAY
40344: PPUSH
40345: LD_VAR 0 12
40349: PUSH
40350: LD_INT 2
40352: ARRAY
40353: PPUSH
40354: CALL_OW 298
40358: ST_TO_ADDR
// distance := 9999 ;
40359: LD_ADDR_VAR 0 10
40363: PUSH
40364: LD_INT 9999
40366: ST_TO_ADDR
// for i := 0 to 5 do
40367: LD_ADDR_VAR 0 6
40371: PUSH
40372: DOUBLE
40373: LD_INT 0
40375: DEC
40376: ST_TO_ADDR
40377: LD_INT 5
40379: PUSH
40380: FOR_TO
40381: IFFALSE 40524
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40383: LD_ADDR_VAR 0 7
40387: PUSH
40388: LD_VAR 0 1
40392: PPUSH
40393: LD_VAR 0 6
40397: PPUSH
40398: LD_VAR 0 11
40402: PPUSH
40403: CALL_OW 272
40407: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40408: LD_ADDR_VAR 0 8
40412: PUSH
40413: LD_VAR 0 2
40417: PPUSH
40418: LD_VAR 0 6
40422: PPUSH
40423: LD_VAR 0 11
40427: PPUSH
40428: CALL_OW 273
40432: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40433: LD_VAR 0 7
40437: PPUSH
40438: LD_VAR 0 8
40442: PPUSH
40443: CALL_OW 488
40447: NOT
40448: IFFALSE 40452
// continue ;
40450: GO 40380
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40452: LD_ADDR_VAR 0 9
40456: PUSH
40457: LD_VAR 0 12
40461: PUSH
40462: LD_INT 1
40464: ARRAY
40465: PPUSH
40466: LD_VAR 0 12
40470: PUSH
40471: LD_INT 2
40473: ARRAY
40474: PPUSH
40475: LD_VAR 0 7
40479: PPUSH
40480: LD_VAR 0 8
40484: PPUSH
40485: CALL_OW 298
40489: ST_TO_ADDR
// if tmp < distance then
40490: LD_VAR 0 9
40494: PUSH
40495: LD_VAR 0 10
40499: LESS
40500: IFFALSE 40522
// begin result := i ;
40502: LD_ADDR_VAR 0 5
40506: PUSH
40507: LD_VAR 0 6
40511: ST_TO_ADDR
// distance := tmp ;
40512: LD_ADDR_VAR 0 10
40516: PUSH
40517: LD_VAR 0 9
40521: ST_TO_ADDR
// end ; end ;
40522: GO 40380
40524: POP
40525: POP
// end ;
40526: LD_VAR 0 5
40530: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40531: LD_INT 0
40533: PPUSH
40534: PPUSH
// if not driver or not IsInUnit ( driver ) then
40535: LD_VAR 0 1
40539: NOT
40540: PUSH
40541: LD_VAR 0 1
40545: PPUSH
40546: CALL_OW 310
40550: NOT
40551: OR
40552: IFFALSE 40556
// exit ;
40554: GO 40646
// vehicle := IsInUnit ( driver ) ;
40556: LD_ADDR_VAR 0 3
40560: PUSH
40561: LD_VAR 0 1
40565: PPUSH
40566: CALL_OW 310
40570: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40571: LD_VAR 0 1
40575: PPUSH
40576: LD_STRING \
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: LD_INT 0
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: PUSH
40606: LD_STRING E
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: LD_VAR 0 3
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PPUSH
40642: CALL_OW 446
// end ;
40646: LD_VAR 0 2
40650: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40651: LD_INT 0
40653: PPUSH
40654: PPUSH
// if not driver or not IsInUnit ( driver ) then
40655: LD_VAR 0 1
40659: NOT
40660: PUSH
40661: LD_VAR 0 1
40665: PPUSH
40666: CALL_OW 310
40670: NOT
40671: OR
40672: IFFALSE 40676
// exit ;
40674: GO 40766
// vehicle := IsInUnit ( driver ) ;
40676: LD_ADDR_VAR 0 3
40680: PUSH
40681: LD_VAR 0 1
40685: PPUSH
40686: CALL_OW 310
40690: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40691: LD_VAR 0 1
40695: PPUSH
40696: LD_STRING \
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: LD_INT 0
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: PUSH
40726: LD_STRING E
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_VAR 0 3
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PPUSH
40762: CALL_OW 447
// end ;
40766: LD_VAR 0 2
40770: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40771: LD_INT 0
40773: PPUSH
40774: PPUSH
40775: PPUSH
// tmp := [ ] ;
40776: LD_ADDR_VAR 0 5
40780: PUSH
40781: EMPTY
40782: ST_TO_ADDR
// for i in units do
40783: LD_ADDR_VAR 0 4
40787: PUSH
40788: LD_VAR 0 1
40792: PUSH
40793: FOR_IN
40794: IFFALSE 40832
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40796: LD_ADDR_VAR 0 5
40800: PUSH
40801: LD_VAR 0 5
40805: PPUSH
40806: LD_VAR 0 5
40810: PUSH
40811: LD_INT 1
40813: PLUS
40814: PPUSH
40815: LD_VAR 0 4
40819: PPUSH
40820: CALL_OW 256
40824: PPUSH
40825: CALL_OW 2
40829: ST_TO_ADDR
40830: GO 40793
40832: POP
40833: POP
// if not tmp then
40834: LD_VAR 0 5
40838: NOT
40839: IFFALSE 40843
// exit ;
40841: GO 40891
// if asc then
40843: LD_VAR 0 2
40847: IFFALSE 40871
// result := SortListByListAsc ( units , tmp ) else
40849: LD_ADDR_VAR 0 3
40853: PUSH
40854: LD_VAR 0 1
40858: PPUSH
40859: LD_VAR 0 5
40863: PPUSH
40864: CALL_OW 76
40868: ST_TO_ADDR
40869: GO 40891
// result := SortListByListDesc ( units , tmp ) ;
40871: LD_ADDR_VAR 0 3
40875: PUSH
40876: LD_VAR 0 1
40880: PPUSH
40881: LD_VAR 0 5
40885: PPUSH
40886: CALL_OW 77
40890: ST_TO_ADDR
// end ;
40891: LD_VAR 0 3
40895: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40896: LD_INT 0
40898: PPUSH
40899: PPUSH
// task := GetTaskList ( mech ) ;
40900: LD_ADDR_VAR 0 4
40904: PUSH
40905: LD_VAR 0 1
40909: PPUSH
40910: CALL_OW 437
40914: ST_TO_ADDR
// if not task then
40915: LD_VAR 0 4
40919: NOT
40920: IFFALSE 40924
// exit ;
40922: GO 40966
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40924: LD_ADDR_VAR 0 3
40928: PUSH
40929: LD_VAR 0 4
40933: PUSH
40934: LD_INT 1
40936: ARRAY
40937: PUSH
40938: LD_INT 1
40940: ARRAY
40941: PUSH
40942: LD_STRING r
40944: EQUAL
40945: PUSH
40946: LD_VAR 0 4
40950: PUSH
40951: LD_INT 1
40953: ARRAY
40954: PUSH
40955: LD_INT 4
40957: ARRAY
40958: PUSH
40959: LD_VAR 0 2
40963: EQUAL
40964: AND
40965: ST_TO_ADDR
// end ;
40966: LD_VAR 0 3
40970: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40971: LD_INT 0
40973: PPUSH
// SetDir ( unit , d ) ;
40974: LD_VAR 0 1
40978: PPUSH
40979: LD_VAR 0 4
40983: PPUSH
40984: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40988: LD_VAR 0 1
40992: PPUSH
40993: LD_VAR 0 2
40997: PPUSH
40998: LD_VAR 0 3
41002: PPUSH
41003: LD_VAR 0 5
41007: PPUSH
41008: CALL_OW 48
// end ;
41012: LD_VAR 0 6
41016: RET
// export function ToNaturalNumber ( number ) ; begin
41017: LD_INT 0
41019: PPUSH
// result := number div 1 ;
41020: LD_ADDR_VAR 0 2
41024: PUSH
41025: LD_VAR 0 1
41029: PUSH
41030: LD_INT 1
41032: DIV
41033: ST_TO_ADDR
// if number < 0 then
41034: LD_VAR 0 1
41038: PUSH
41039: LD_INT 0
41041: LESS
41042: IFFALSE 41052
// result := 0 ;
41044: LD_ADDR_VAR 0 2
41048: PUSH
41049: LD_INT 0
41051: ST_TO_ADDR
// end ;
41052: LD_VAR 0 2
41056: RET
// export function SortByClass ( units , class ) ; var un ; begin
41057: LD_INT 0
41059: PPUSH
41060: PPUSH
// if not units or not class then
41061: LD_VAR 0 1
41065: NOT
41066: PUSH
41067: LD_VAR 0 2
41071: NOT
41072: OR
41073: IFFALSE 41077
// exit ;
41075: GO 41172
// result := [ ] ;
41077: LD_ADDR_VAR 0 3
41081: PUSH
41082: EMPTY
41083: ST_TO_ADDR
// for un in units do
41084: LD_ADDR_VAR 0 4
41088: PUSH
41089: LD_VAR 0 1
41093: PUSH
41094: FOR_IN
41095: IFFALSE 41170
// if GetClass ( un ) = class then
41097: LD_VAR 0 4
41101: PPUSH
41102: CALL_OW 257
41106: PUSH
41107: LD_VAR 0 2
41111: EQUAL
41112: IFFALSE 41139
// result := Insert ( result , 1 , un ) else
41114: LD_ADDR_VAR 0 3
41118: PUSH
41119: LD_VAR 0 3
41123: PPUSH
41124: LD_INT 1
41126: PPUSH
41127: LD_VAR 0 4
41131: PPUSH
41132: CALL_OW 2
41136: ST_TO_ADDR
41137: GO 41168
// result := Replace ( result , result + 1 , un ) ;
41139: LD_ADDR_VAR 0 3
41143: PUSH
41144: LD_VAR 0 3
41148: PPUSH
41149: LD_VAR 0 3
41153: PUSH
41154: LD_INT 1
41156: PLUS
41157: PPUSH
41158: LD_VAR 0 4
41162: PPUSH
41163: CALL_OW 1
41167: ST_TO_ADDR
41168: GO 41094
41170: POP
41171: POP
// end ;
41172: LD_VAR 0 3
41176: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41177: LD_INT 0
41179: PPUSH
41180: PPUSH
41181: PPUSH
41182: PPUSH
41183: PPUSH
41184: PPUSH
41185: PPUSH
// result := [ ] ;
41186: LD_ADDR_VAR 0 4
41190: PUSH
41191: EMPTY
41192: ST_TO_ADDR
// if x - r < 0 then
41193: LD_VAR 0 1
41197: PUSH
41198: LD_VAR 0 3
41202: MINUS
41203: PUSH
41204: LD_INT 0
41206: LESS
41207: IFFALSE 41219
// min_x := 0 else
41209: LD_ADDR_VAR 0 8
41213: PUSH
41214: LD_INT 0
41216: ST_TO_ADDR
41217: GO 41235
// min_x := x - r ;
41219: LD_ADDR_VAR 0 8
41223: PUSH
41224: LD_VAR 0 1
41228: PUSH
41229: LD_VAR 0 3
41233: MINUS
41234: ST_TO_ADDR
// if y - r < 0 then
41235: LD_VAR 0 2
41239: PUSH
41240: LD_VAR 0 3
41244: MINUS
41245: PUSH
41246: LD_INT 0
41248: LESS
41249: IFFALSE 41261
// min_y := 0 else
41251: LD_ADDR_VAR 0 7
41255: PUSH
41256: LD_INT 0
41258: ST_TO_ADDR
41259: GO 41277
// min_y := y - r ;
41261: LD_ADDR_VAR 0 7
41265: PUSH
41266: LD_VAR 0 2
41270: PUSH
41271: LD_VAR 0 3
41275: MINUS
41276: ST_TO_ADDR
// max_x := x + r ;
41277: LD_ADDR_VAR 0 9
41281: PUSH
41282: LD_VAR 0 1
41286: PUSH
41287: LD_VAR 0 3
41291: PLUS
41292: ST_TO_ADDR
// max_y := y + r ;
41293: LD_ADDR_VAR 0 10
41297: PUSH
41298: LD_VAR 0 2
41302: PUSH
41303: LD_VAR 0 3
41307: PLUS
41308: ST_TO_ADDR
// for _x = min_x to max_x do
41309: LD_ADDR_VAR 0 5
41313: PUSH
41314: DOUBLE
41315: LD_VAR 0 8
41319: DEC
41320: ST_TO_ADDR
41321: LD_VAR 0 9
41325: PUSH
41326: FOR_TO
41327: IFFALSE 41428
// for _y = min_y to max_y do
41329: LD_ADDR_VAR 0 6
41333: PUSH
41334: DOUBLE
41335: LD_VAR 0 7
41339: DEC
41340: ST_TO_ADDR
41341: LD_VAR 0 10
41345: PUSH
41346: FOR_TO
41347: IFFALSE 41424
// begin if not ValidHex ( _x , _y ) then
41349: LD_VAR 0 5
41353: PPUSH
41354: LD_VAR 0 6
41358: PPUSH
41359: CALL_OW 488
41363: NOT
41364: IFFALSE 41368
// continue ;
41366: GO 41346
// if GetResourceTypeXY ( _x , _y ) then
41368: LD_VAR 0 5
41372: PPUSH
41373: LD_VAR 0 6
41377: PPUSH
41378: CALL_OW 283
41382: IFFALSE 41422
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41384: LD_ADDR_VAR 0 4
41388: PUSH
41389: LD_VAR 0 4
41393: PPUSH
41394: LD_VAR 0 4
41398: PUSH
41399: LD_INT 1
41401: PLUS
41402: PPUSH
41403: LD_VAR 0 5
41407: PUSH
41408: LD_VAR 0 6
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PPUSH
41417: CALL_OW 1
41421: ST_TO_ADDR
// end ;
41422: GO 41346
41424: POP
41425: POP
41426: GO 41326
41428: POP
41429: POP
// end ;
41430: LD_VAR 0 4
41434: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41435: LD_INT 0
41437: PPUSH
41438: PPUSH
41439: PPUSH
41440: PPUSH
41441: PPUSH
41442: PPUSH
41443: PPUSH
41444: PPUSH
// if not units then
41445: LD_VAR 0 1
41449: NOT
41450: IFFALSE 41454
// exit ;
41452: GO 41978
// result := UnitFilter ( units , [ f_ok ] ) ;
41454: LD_ADDR_VAR 0 3
41458: PUSH
41459: LD_VAR 0 1
41463: PPUSH
41464: LD_INT 50
41466: PUSH
41467: EMPTY
41468: LIST
41469: PPUSH
41470: CALL_OW 72
41474: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41475: LD_ADDR_VAR 0 8
41479: PUSH
41480: LD_VAR 0 1
41484: PUSH
41485: LD_INT 1
41487: ARRAY
41488: PPUSH
41489: CALL_OW 255
41493: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41494: LD_ADDR_VAR 0 10
41498: PUSH
41499: LD_INT 29
41501: PUSH
41502: LD_INT 91
41504: PUSH
41505: LD_INT 49
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: LIST
41512: ST_TO_ADDR
// if not result then
41513: LD_VAR 0 3
41517: NOT
41518: IFFALSE 41522
// exit ;
41520: GO 41978
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41522: LD_ADDR_VAR 0 5
41526: PUSH
41527: LD_INT 81
41529: PUSH
41530: LD_VAR 0 8
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PPUSH
41539: CALL_OW 69
41543: ST_TO_ADDR
// for i in result do
41544: LD_ADDR_VAR 0 4
41548: PUSH
41549: LD_VAR 0 3
41553: PUSH
41554: FOR_IN
41555: IFFALSE 41976
// begin tag := GetTag ( i ) + 1 ;
41557: LD_ADDR_VAR 0 9
41561: PUSH
41562: LD_VAR 0 4
41566: PPUSH
41567: CALL_OW 110
41571: PUSH
41572: LD_INT 1
41574: PLUS
41575: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41576: LD_ADDR_VAR 0 7
41580: PUSH
41581: LD_VAR 0 4
41585: PPUSH
41586: CALL_OW 250
41590: PPUSH
41591: LD_VAR 0 4
41595: PPUSH
41596: CALL_OW 251
41600: PPUSH
41601: LD_INT 6
41603: PPUSH
41604: CALL 41177 0 3
41608: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41609: LD_VAR 0 4
41613: PPUSH
41614: CALL_OW 247
41618: PUSH
41619: LD_INT 2
41621: EQUAL
41622: PUSH
41623: LD_VAR 0 7
41627: AND
41628: PUSH
41629: LD_VAR 0 4
41633: PPUSH
41634: CALL_OW 264
41638: PUSH
41639: LD_VAR 0 10
41643: IN
41644: NOT
41645: AND
41646: IFFALSE 41685
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41648: LD_VAR 0 4
41652: PPUSH
41653: LD_VAR 0 7
41657: PUSH
41658: LD_INT 1
41660: ARRAY
41661: PUSH
41662: LD_INT 1
41664: ARRAY
41665: PPUSH
41666: LD_VAR 0 7
41670: PUSH
41671: LD_INT 1
41673: ARRAY
41674: PUSH
41675: LD_INT 2
41677: ARRAY
41678: PPUSH
41679: CALL_OW 116
41683: GO 41974
// if path > tag then
41685: LD_VAR 0 2
41689: PUSH
41690: LD_VAR 0 9
41694: GREATER
41695: IFFALSE 41903
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41697: LD_ADDR_VAR 0 6
41701: PUSH
41702: LD_VAR 0 5
41706: PPUSH
41707: LD_INT 91
41709: PUSH
41710: LD_VAR 0 4
41714: PUSH
41715: LD_INT 8
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: LIST
41722: PPUSH
41723: CALL_OW 72
41727: ST_TO_ADDR
// if nearEnemy then
41728: LD_VAR 0 6
41732: IFFALSE 41801
// begin if GetWeapon ( i ) = ru_time_lapser then
41734: LD_VAR 0 4
41738: PPUSH
41739: CALL_OW 264
41743: PUSH
41744: LD_INT 49
41746: EQUAL
41747: IFFALSE 41775
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41749: LD_VAR 0 4
41753: PPUSH
41754: LD_VAR 0 6
41758: PPUSH
41759: LD_VAR 0 4
41763: PPUSH
41764: CALL_OW 74
41768: PPUSH
41769: CALL_OW 112
41773: GO 41799
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41775: LD_VAR 0 4
41779: PPUSH
41780: LD_VAR 0 6
41784: PPUSH
41785: LD_VAR 0 4
41789: PPUSH
41790: CALL_OW 74
41794: PPUSH
41795: CALL 42903 0 2
// end else
41799: GO 41901
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41801: LD_VAR 0 4
41805: PPUSH
41806: LD_VAR 0 2
41810: PUSH
41811: LD_VAR 0 9
41815: ARRAY
41816: PUSH
41817: LD_INT 1
41819: ARRAY
41820: PPUSH
41821: LD_VAR 0 2
41825: PUSH
41826: LD_VAR 0 9
41830: ARRAY
41831: PUSH
41832: LD_INT 2
41834: ARRAY
41835: PPUSH
41836: CALL_OW 297
41840: PUSH
41841: LD_INT 6
41843: GREATER
41844: IFFALSE 41887
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41846: LD_VAR 0 4
41850: PPUSH
41851: LD_VAR 0 2
41855: PUSH
41856: LD_VAR 0 9
41860: ARRAY
41861: PUSH
41862: LD_INT 1
41864: ARRAY
41865: PPUSH
41866: LD_VAR 0 2
41870: PUSH
41871: LD_VAR 0 9
41875: ARRAY
41876: PUSH
41877: LD_INT 2
41879: ARRAY
41880: PPUSH
41881: CALL_OW 114
41885: GO 41901
// SetTag ( i , tag ) ;
41887: LD_VAR 0 4
41891: PPUSH
41892: LD_VAR 0 9
41896: PPUSH
41897: CALL_OW 109
// end else
41901: GO 41974
// if enemy then
41903: LD_VAR 0 5
41907: IFFALSE 41974
// begin if GetWeapon ( i ) = ru_time_lapser then
41909: LD_VAR 0 4
41913: PPUSH
41914: CALL_OW 264
41918: PUSH
41919: LD_INT 49
41921: EQUAL
41922: IFFALSE 41950
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41924: LD_VAR 0 4
41928: PPUSH
41929: LD_VAR 0 5
41933: PPUSH
41934: LD_VAR 0 4
41938: PPUSH
41939: CALL_OW 74
41943: PPUSH
41944: CALL_OW 112
41948: GO 41974
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41950: LD_VAR 0 4
41954: PPUSH
41955: LD_VAR 0 5
41959: PPUSH
41960: LD_VAR 0 4
41964: PPUSH
41965: CALL_OW 74
41969: PPUSH
41970: CALL 42903 0 2
// end ; end ;
41974: GO 41554
41976: POP
41977: POP
// end ;
41978: LD_VAR 0 3
41982: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41983: LD_INT 0
41985: PPUSH
41986: PPUSH
41987: PPUSH
// if not unit or IsInUnit ( unit ) then
41988: LD_VAR 0 1
41992: NOT
41993: PUSH
41994: LD_VAR 0 1
41998: PPUSH
41999: CALL_OW 310
42003: OR
42004: IFFALSE 42008
// exit ;
42006: GO 42099
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42008: LD_ADDR_VAR 0 4
42012: PUSH
42013: LD_VAR 0 1
42017: PPUSH
42018: CALL_OW 250
42022: PPUSH
42023: LD_VAR 0 2
42027: PPUSH
42028: LD_INT 1
42030: PPUSH
42031: CALL_OW 272
42035: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42036: LD_ADDR_VAR 0 5
42040: PUSH
42041: LD_VAR 0 1
42045: PPUSH
42046: CALL_OW 251
42050: PPUSH
42051: LD_VAR 0 2
42055: PPUSH
42056: LD_INT 1
42058: PPUSH
42059: CALL_OW 273
42063: ST_TO_ADDR
// if ValidHex ( x , y ) then
42064: LD_VAR 0 4
42068: PPUSH
42069: LD_VAR 0 5
42073: PPUSH
42074: CALL_OW 488
42078: IFFALSE 42099
// ComTurnXY ( unit , x , y ) ;
42080: LD_VAR 0 1
42084: PPUSH
42085: LD_VAR 0 4
42089: PPUSH
42090: LD_VAR 0 5
42094: PPUSH
42095: CALL_OW 118
// end ;
42099: LD_VAR 0 3
42103: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42104: LD_INT 0
42106: PPUSH
42107: PPUSH
// result := false ;
42108: LD_ADDR_VAR 0 3
42112: PUSH
42113: LD_INT 0
42115: ST_TO_ADDR
// if not units then
42116: LD_VAR 0 2
42120: NOT
42121: IFFALSE 42125
// exit ;
42123: GO 42170
// for i in units do
42125: LD_ADDR_VAR 0 4
42129: PUSH
42130: LD_VAR 0 2
42134: PUSH
42135: FOR_IN
42136: IFFALSE 42168
// if See ( side , i ) then
42138: LD_VAR 0 1
42142: PPUSH
42143: LD_VAR 0 4
42147: PPUSH
42148: CALL_OW 292
42152: IFFALSE 42166
// begin result := true ;
42154: LD_ADDR_VAR 0 3
42158: PUSH
42159: LD_INT 1
42161: ST_TO_ADDR
// exit ;
42162: POP
42163: POP
42164: GO 42170
// end ;
42166: GO 42135
42168: POP
42169: POP
// end ;
42170: LD_VAR 0 3
42174: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42175: LD_INT 0
42177: PPUSH
42178: PPUSH
42179: PPUSH
42180: PPUSH
// if not unit or not points then
42181: LD_VAR 0 1
42185: NOT
42186: PUSH
42187: LD_VAR 0 2
42191: NOT
42192: OR
42193: IFFALSE 42197
// exit ;
42195: GO 42287
// dist := 99999 ;
42197: LD_ADDR_VAR 0 5
42201: PUSH
42202: LD_INT 99999
42204: ST_TO_ADDR
// for i in points do
42205: LD_ADDR_VAR 0 4
42209: PUSH
42210: LD_VAR 0 2
42214: PUSH
42215: FOR_IN
42216: IFFALSE 42285
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42218: LD_ADDR_VAR 0 6
42222: PUSH
42223: LD_VAR 0 1
42227: PPUSH
42228: LD_VAR 0 4
42232: PUSH
42233: LD_INT 1
42235: ARRAY
42236: PPUSH
42237: LD_VAR 0 4
42241: PUSH
42242: LD_INT 2
42244: ARRAY
42245: PPUSH
42246: CALL_OW 297
42250: ST_TO_ADDR
// if tmpDist < dist then
42251: LD_VAR 0 6
42255: PUSH
42256: LD_VAR 0 5
42260: LESS
42261: IFFALSE 42283
// begin result := i ;
42263: LD_ADDR_VAR 0 3
42267: PUSH
42268: LD_VAR 0 4
42272: ST_TO_ADDR
// dist := tmpDist ;
42273: LD_ADDR_VAR 0 5
42277: PUSH
42278: LD_VAR 0 6
42282: ST_TO_ADDR
// end ; end ;
42283: GO 42215
42285: POP
42286: POP
// end ;
42287: LD_VAR 0 3
42291: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42292: LD_INT 0
42294: PPUSH
// uc_side := side ;
42295: LD_ADDR_OWVAR 20
42299: PUSH
42300: LD_VAR 0 1
42304: ST_TO_ADDR
// uc_nation := 3 ;
42305: LD_ADDR_OWVAR 21
42309: PUSH
42310: LD_INT 3
42312: ST_TO_ADDR
// vc_chassis := 25 ;
42313: LD_ADDR_OWVAR 37
42317: PUSH
42318: LD_INT 25
42320: ST_TO_ADDR
// vc_engine := engine_siberite ;
42321: LD_ADDR_OWVAR 39
42325: PUSH
42326: LD_INT 3
42328: ST_TO_ADDR
// vc_control := control_computer ;
42329: LD_ADDR_OWVAR 38
42333: PUSH
42334: LD_INT 3
42336: ST_TO_ADDR
// vc_weapon := 59 ;
42337: LD_ADDR_OWVAR 40
42341: PUSH
42342: LD_INT 59
42344: ST_TO_ADDR
// result := CreateVehicle ;
42345: LD_ADDR_VAR 0 5
42349: PUSH
42350: CALL_OW 45
42354: ST_TO_ADDR
// SetDir ( result , d ) ;
42355: LD_VAR 0 5
42359: PPUSH
42360: LD_VAR 0 4
42364: PPUSH
42365: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42369: LD_VAR 0 5
42373: PPUSH
42374: LD_VAR 0 2
42378: PPUSH
42379: LD_VAR 0 3
42383: PPUSH
42384: LD_INT 0
42386: PPUSH
42387: CALL_OW 48
// end ;
42391: LD_VAR 0 5
42395: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42396: LD_INT 0
42398: PPUSH
42399: PPUSH
42400: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42401: LD_ADDR_VAR 0 2
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42424: LD_VAR 0 1
42428: NOT
42429: PUSH
42430: LD_VAR 0 1
42434: PPUSH
42435: CALL_OW 264
42439: PUSH
42440: LD_INT 12
42442: PUSH
42443: LD_INT 51
42445: PUSH
42446: LD_INT 32
42448: PUSH
42449: LD_INT 89
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: IN
42458: NOT
42459: OR
42460: IFFALSE 42464
// exit ;
42462: GO 42562
// for i := 1 to 3 do
42464: LD_ADDR_VAR 0 3
42468: PUSH
42469: DOUBLE
42470: LD_INT 1
42472: DEC
42473: ST_TO_ADDR
42474: LD_INT 3
42476: PUSH
42477: FOR_TO
42478: IFFALSE 42560
// begin tmp := GetCargo ( cargo , i ) ;
42480: LD_ADDR_VAR 0 4
42484: PUSH
42485: LD_VAR 0 1
42489: PPUSH
42490: LD_VAR 0 3
42494: PPUSH
42495: CALL_OW 289
42499: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42500: LD_ADDR_VAR 0 2
42504: PUSH
42505: LD_VAR 0 2
42509: PPUSH
42510: LD_VAR 0 3
42514: PPUSH
42515: LD_VAR 0 4
42519: PPUSH
42520: CALL_OW 1
42524: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42525: LD_ADDR_VAR 0 2
42529: PUSH
42530: LD_VAR 0 2
42534: PPUSH
42535: LD_INT 4
42537: PPUSH
42538: LD_VAR 0 2
42542: PUSH
42543: LD_INT 4
42545: ARRAY
42546: PUSH
42547: LD_VAR 0 4
42551: PLUS
42552: PPUSH
42553: CALL_OW 1
42557: ST_TO_ADDR
// end ;
42558: GO 42477
42560: POP
42561: POP
// end ;
42562: LD_VAR 0 2
42566: RET
// export function Length ( array ) ; begin
42567: LD_INT 0
42569: PPUSH
// result := array + 0 ;
42570: LD_ADDR_VAR 0 2
42574: PUSH
42575: LD_VAR 0 1
42579: PUSH
42580: LD_INT 0
42582: PLUS
42583: ST_TO_ADDR
// end ;
42584: LD_VAR 0 2
42588: RET
// export function PrepareArray ( array ) ; begin
42589: LD_INT 0
42591: PPUSH
// result := array diff 0 ;
42592: LD_ADDR_VAR 0 2
42596: PUSH
42597: LD_VAR 0 1
42601: PUSH
42602: LD_INT 0
42604: DIFF
42605: ST_TO_ADDR
// if not result [ 1 ] then
42606: LD_VAR 0 2
42610: PUSH
42611: LD_INT 1
42613: ARRAY
42614: NOT
42615: IFFALSE 42635
// result := Delete ( result , 1 ) ;
42617: LD_ADDR_VAR 0 2
42621: PUSH
42622: LD_VAR 0 2
42626: PPUSH
42627: LD_INT 1
42629: PPUSH
42630: CALL_OW 3
42634: ST_TO_ADDR
// end ;
42635: LD_VAR 0 2
42639: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42640: LD_INT 0
42642: PPUSH
42643: PPUSH
42644: PPUSH
42645: PPUSH
// sibRocketRange := 25 ;
42646: LD_ADDR_VAR 0 6
42650: PUSH
42651: LD_INT 25
42653: ST_TO_ADDR
// result := false ;
42654: LD_ADDR_VAR 0 4
42658: PUSH
42659: LD_INT 0
42661: ST_TO_ADDR
// for i := 0 to 5 do
42662: LD_ADDR_VAR 0 5
42666: PUSH
42667: DOUBLE
42668: LD_INT 0
42670: DEC
42671: ST_TO_ADDR
42672: LD_INT 5
42674: PUSH
42675: FOR_TO
42676: IFFALSE 42743
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42678: LD_VAR 0 1
42682: PPUSH
42683: LD_VAR 0 5
42687: PPUSH
42688: LD_VAR 0 6
42692: PPUSH
42693: CALL_OW 272
42697: PPUSH
42698: LD_VAR 0 2
42702: PPUSH
42703: LD_VAR 0 5
42707: PPUSH
42708: LD_VAR 0 6
42712: PPUSH
42713: CALL_OW 273
42717: PPUSH
42718: LD_VAR 0 3
42722: PPUSH
42723: CALL_OW 309
42727: IFFALSE 42741
// begin result := true ;
42729: LD_ADDR_VAR 0 4
42733: PUSH
42734: LD_INT 1
42736: ST_TO_ADDR
// exit ;
42737: POP
42738: POP
42739: GO 42745
// end ;
42741: GO 42675
42743: POP
42744: POP
// end ;
42745: LD_VAR 0 4
42749: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42750: LD_INT 0
42752: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42753: LD_VAR 0 1
42757: PPUSH
42758: LD_VAR 0 2
42762: PPUSH
42763: LD_INT 0
42765: PPUSH
42766: LD_INT 0
42768: PPUSH
42769: LD_INT 1
42771: PPUSH
42772: LD_INT 0
42774: PPUSH
42775: CALL_OW 587
// end ;
42779: LD_VAR 0 3
42783: RET
// export function CenterOnNow ( unit ) ; begin
42784: LD_INT 0
42786: PPUSH
// result := IsInUnit ( unit ) ;
42787: LD_ADDR_VAR 0 2
42791: PUSH
42792: LD_VAR 0 1
42796: PPUSH
42797: CALL_OW 310
42801: ST_TO_ADDR
// if not result then
42802: LD_VAR 0 2
42806: NOT
42807: IFFALSE 42819
// result := unit ;
42809: LD_ADDR_VAR 0 2
42813: PUSH
42814: LD_VAR 0 1
42818: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42819: LD_VAR 0 1
42823: PPUSH
42824: CALL_OW 87
// end ;
42828: LD_VAR 0 2
42832: RET
// export function ComMoveHex ( unit , hex ) ; begin
42833: LD_INT 0
42835: PPUSH
// if not hex then
42836: LD_VAR 0 2
42840: NOT
42841: IFFALSE 42845
// exit ;
42843: GO 42898
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42845: LD_VAR 0 2
42849: PUSH
42850: LD_INT 1
42852: ARRAY
42853: PPUSH
42854: LD_VAR 0 2
42858: PUSH
42859: LD_INT 2
42861: ARRAY
42862: PPUSH
42863: CALL_OW 428
42867: IFFALSE 42871
// exit ;
42869: GO 42898
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
42871: LD_VAR 0 1
42875: PPUSH
42876: LD_VAR 0 2
42880: PUSH
42881: LD_INT 1
42883: ARRAY
42884: PPUSH
42885: LD_VAR 0 2
42889: PUSH
42890: LD_INT 2
42892: ARRAY
42893: PPUSH
42894: CALL_OW 111
// end ;
42898: LD_VAR 0 3
42902: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
42903: LD_INT 0
42905: PPUSH
42906: PPUSH
42907: PPUSH
// if not unit or not enemy then
42908: LD_VAR 0 1
42912: NOT
42913: PUSH
42914: LD_VAR 0 2
42918: NOT
42919: OR
42920: IFFALSE 42924
// exit ;
42922: GO 43048
// x := GetX ( enemy ) ;
42924: LD_ADDR_VAR 0 4
42928: PUSH
42929: LD_VAR 0 2
42933: PPUSH
42934: CALL_OW 250
42938: ST_TO_ADDR
// y := GetY ( enemy ) ;
42939: LD_ADDR_VAR 0 5
42943: PUSH
42944: LD_VAR 0 2
42948: PPUSH
42949: CALL_OW 251
42953: ST_TO_ADDR
// if ValidHex ( x , y ) then
42954: LD_VAR 0 4
42958: PPUSH
42959: LD_VAR 0 5
42963: PPUSH
42964: CALL_OW 488
42968: IFFALSE 43048
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
42970: LD_VAR 0 2
42974: PPUSH
42975: CALL_OW 247
42979: PUSH
42980: LD_INT 3
42982: PUSH
42983: LD_INT 2
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: IN
42990: PUSH
42991: LD_VAR 0 1
42995: PPUSH
42996: CALL_OW 255
43000: PPUSH
43001: LD_VAR 0 2
43005: PPUSH
43006: CALL_OW 292
43010: OR
43011: IFFALSE 43029
// ComAttackUnit ( unit , enemy ) else
43013: LD_VAR 0 1
43017: PPUSH
43018: LD_VAR 0 2
43022: PPUSH
43023: CALL_OW 115
43027: GO 43048
// ComAgressiveMove ( unit , x , y ) ;
43029: LD_VAR 0 1
43033: PPUSH
43034: LD_VAR 0 4
43038: PPUSH
43039: LD_VAR 0 5
43043: PPUSH
43044: CALL_OW 114
// end ;
43048: LD_VAR 0 3
43052: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43053: LD_INT 0
43055: PPUSH
43056: PPUSH
43057: PPUSH
// list := AreaToList ( area , 0 ) ;
43058: LD_ADDR_VAR 0 5
43062: PUSH
43063: LD_VAR 0 1
43067: PPUSH
43068: LD_INT 0
43070: PPUSH
43071: CALL_OW 517
43075: ST_TO_ADDR
// if not list then
43076: LD_VAR 0 5
43080: NOT
43081: IFFALSE 43085
// exit ;
43083: GO 43215
// if all then
43085: LD_VAR 0 2
43089: IFFALSE 43177
// begin for i := 1 to list [ 1 ] do
43091: LD_ADDR_VAR 0 4
43095: PUSH
43096: DOUBLE
43097: LD_INT 1
43099: DEC
43100: ST_TO_ADDR
43101: LD_VAR 0 5
43105: PUSH
43106: LD_INT 1
43108: ARRAY
43109: PUSH
43110: FOR_TO
43111: IFFALSE 43173
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43113: LD_ADDR_VAR 0 3
43117: PUSH
43118: LD_VAR 0 3
43122: PPUSH
43123: LD_VAR 0 3
43127: PUSH
43128: LD_INT 1
43130: PLUS
43131: PPUSH
43132: LD_VAR 0 5
43136: PUSH
43137: LD_INT 1
43139: ARRAY
43140: PUSH
43141: LD_VAR 0 4
43145: ARRAY
43146: PUSH
43147: LD_VAR 0 5
43151: PUSH
43152: LD_INT 2
43154: ARRAY
43155: PUSH
43156: LD_VAR 0 4
43160: ARRAY
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PPUSH
43166: CALL_OW 1
43170: ST_TO_ADDR
43171: GO 43110
43173: POP
43174: POP
// exit ;
43175: GO 43215
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43177: LD_ADDR_VAR 0 3
43181: PUSH
43182: LD_VAR 0 5
43186: PUSH
43187: LD_INT 1
43189: ARRAY
43190: PUSH
43191: LD_INT 1
43193: ARRAY
43194: PUSH
43195: LD_VAR 0 5
43199: PUSH
43200: LD_INT 2
43202: ARRAY
43203: PUSH
43204: LD_INT 1
43206: ARRAY
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: EMPTY
43213: LIST
43214: ST_TO_ADDR
// end ;
43215: LD_VAR 0 3
43219: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43220: LD_INT 0
43222: PPUSH
43223: PPUSH
// list := AreaToList ( area , 0 ) ;
43224: LD_ADDR_VAR 0 4
43228: PUSH
43229: LD_VAR 0 1
43233: PPUSH
43234: LD_INT 0
43236: PPUSH
43237: CALL_OW 517
43241: ST_TO_ADDR
// if not list then
43242: LD_VAR 0 4
43246: NOT
43247: IFFALSE 43251
// exit ;
43249: GO 43292
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43251: LD_ADDR_VAR 0 3
43255: PUSH
43256: LD_VAR 0 4
43260: PUSH
43261: LD_INT 1
43263: ARRAY
43264: PUSH
43265: LD_INT 1
43267: ARRAY
43268: PUSH
43269: LD_VAR 0 4
43273: PUSH
43274: LD_INT 2
43276: ARRAY
43277: PUSH
43278: LD_INT 1
43280: ARRAY
43281: PUSH
43282: LD_VAR 0 2
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: LIST
43291: ST_TO_ADDR
// end ;
43292: LD_VAR 0 3
43296: RET
// export function First ( array ) ; begin
43297: LD_INT 0
43299: PPUSH
// if not array then
43300: LD_VAR 0 1
43304: NOT
43305: IFFALSE 43309
// exit ;
43307: GO 43323
// result := array [ 1 ] ;
43309: LD_ADDR_VAR 0 2
43313: PUSH
43314: LD_VAR 0 1
43318: PUSH
43319: LD_INT 1
43321: ARRAY
43322: ST_TO_ADDR
// end ;
43323: LD_VAR 0 2
43327: RET
// export function Last ( array ) ; begin
43328: LD_INT 0
43330: PPUSH
// if not array then
43331: LD_VAR 0 1
43335: NOT
43336: IFFALSE 43340
// exit ;
43338: GO 43356
// result := array [ array ] ;
43340: LD_ADDR_VAR 0 2
43344: PUSH
43345: LD_VAR 0 1
43349: PUSH
43350: LD_VAR 0 1
43354: ARRAY
43355: ST_TO_ADDR
// end ;
43356: LD_VAR 0 2
43360: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
43361: LD_INT 0
43363: PPUSH
43364: PPUSH
// result := [ ] ;
43365: LD_ADDR_VAR 0 5
43369: PUSH
43370: EMPTY
43371: ST_TO_ADDR
// if not array then
43372: LD_VAR 0 1
43376: NOT
43377: IFFALSE 43381
// exit ;
43379: GO 43493
// for i := 1 to array do
43381: LD_ADDR_VAR 0 6
43385: PUSH
43386: DOUBLE
43387: LD_INT 1
43389: DEC
43390: ST_TO_ADDR
43391: LD_VAR 0 1
43395: PUSH
43396: FOR_TO
43397: IFFALSE 43491
// if array [ i ] [ index ] = value then
43399: LD_VAR 0 1
43403: PUSH
43404: LD_VAR 0 6
43408: ARRAY
43409: PUSH
43410: LD_VAR 0 2
43414: ARRAY
43415: PUSH
43416: LD_VAR 0 3
43420: EQUAL
43421: IFFALSE 43489
// begin if indexColumn then
43423: LD_VAR 0 4
43427: IFFALSE 43463
// result := Join ( result , array [ i ] [ indexColumn ] ) else
43429: LD_ADDR_VAR 0 5
43433: PUSH
43434: LD_VAR 0 5
43438: PPUSH
43439: LD_VAR 0 1
43443: PUSH
43444: LD_VAR 0 6
43448: ARRAY
43449: PUSH
43450: LD_VAR 0 4
43454: ARRAY
43455: PPUSH
43456: CALL 38831 0 2
43460: ST_TO_ADDR
43461: GO 43489
// result := Join ( result , array [ i ] ) ;
43463: LD_ADDR_VAR 0 5
43467: PUSH
43468: LD_VAR 0 5
43472: PPUSH
43473: LD_VAR 0 1
43477: PUSH
43478: LD_VAR 0 6
43482: ARRAY
43483: PPUSH
43484: CALL 38831 0 2
43488: ST_TO_ADDR
// end ;
43489: GO 43396
43491: POP
43492: POP
// end ;
43493: LD_VAR 0 5
43497: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43498: LD_INT 0
43500: PPUSH
43501: PPUSH
43502: PPUSH
// if btype = b_depot then
43503: LD_VAR 0 2
43507: PUSH
43508: LD_INT 0
43510: EQUAL
43511: IFFALSE 43523
// begin result := true ;
43513: LD_ADDR_VAR 0 3
43517: PUSH
43518: LD_INT 1
43520: ST_TO_ADDR
// exit ;
43521: GO 43639
// end ; pom := GetBase ( depot ) ;
43523: LD_ADDR_VAR 0 4
43527: PUSH
43528: LD_VAR 0 1
43532: PPUSH
43533: CALL_OW 274
43537: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43538: LD_ADDR_VAR 0 5
43542: PUSH
43543: LD_VAR 0 2
43547: PPUSH
43548: LD_VAR 0 1
43552: PPUSH
43553: CALL_OW 248
43557: PPUSH
43558: CALL_OW 450
43562: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43563: LD_ADDR_VAR 0 3
43567: PUSH
43568: LD_VAR 0 4
43572: PPUSH
43573: LD_INT 1
43575: PPUSH
43576: CALL_OW 275
43580: PUSH
43581: LD_VAR 0 5
43585: PUSH
43586: LD_INT 1
43588: ARRAY
43589: GREATEREQUAL
43590: PUSH
43591: LD_VAR 0 4
43595: PPUSH
43596: LD_INT 2
43598: PPUSH
43599: CALL_OW 275
43603: PUSH
43604: LD_VAR 0 5
43608: PUSH
43609: LD_INT 2
43611: ARRAY
43612: GREATEREQUAL
43613: AND
43614: PUSH
43615: LD_VAR 0 4
43619: PPUSH
43620: LD_INT 3
43622: PPUSH
43623: CALL_OW 275
43627: PUSH
43628: LD_VAR 0 5
43632: PUSH
43633: LD_INT 3
43635: ARRAY
43636: GREATEREQUAL
43637: AND
43638: ST_TO_ADDR
// end ;
43639: LD_VAR 0 3
43643: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
43644: LD_INT 0
43646: PPUSH
// if not vehicles or not parkingPoint then
43647: LD_VAR 0 1
43651: NOT
43652: PUSH
43653: LD_VAR 0 2
43657: NOT
43658: OR
43659: IFFALSE 43663
// exit ;
43661: GO 43761
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
43663: LD_ADDR_VAR 0 1
43667: PUSH
43668: LD_VAR 0 1
43672: PPUSH
43673: LD_INT 50
43675: PUSH
43676: EMPTY
43677: LIST
43678: PUSH
43679: LD_INT 3
43681: PUSH
43682: LD_INT 92
43684: PUSH
43685: LD_VAR 0 2
43689: PUSH
43690: LD_INT 1
43692: ARRAY
43693: PUSH
43694: LD_VAR 0 2
43698: PUSH
43699: LD_INT 2
43701: ARRAY
43702: PUSH
43703: LD_INT 8
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PPUSH
43720: CALL_OW 72
43724: ST_TO_ADDR
// if not vehicles then
43725: LD_VAR 0 1
43729: NOT
43730: IFFALSE 43734
// exit ;
43732: GO 43761
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
43734: LD_VAR 0 1
43738: PPUSH
43739: LD_VAR 0 2
43743: PUSH
43744: LD_INT 1
43746: ARRAY
43747: PPUSH
43748: LD_VAR 0 2
43752: PUSH
43753: LD_INT 2
43755: ARRAY
43756: PPUSH
43757: CALL_OW 111
// end ;
43761: LD_VAR 0 3
43765: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
43766: LD_INT 0
43768: PPUSH
43769: PPUSH
43770: PPUSH
// if not side or not area then
43771: LD_VAR 0 1
43775: NOT
43776: PUSH
43777: LD_VAR 0 2
43781: NOT
43782: OR
43783: IFFALSE 43787
// exit ;
43785: GO 43906
// tmp := AreaToList ( area , 0 ) ;
43787: LD_ADDR_VAR 0 5
43791: PUSH
43792: LD_VAR 0 2
43796: PPUSH
43797: LD_INT 0
43799: PPUSH
43800: CALL_OW 517
43804: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
43805: LD_ADDR_VAR 0 4
43809: PUSH
43810: DOUBLE
43811: LD_INT 1
43813: DEC
43814: ST_TO_ADDR
43815: LD_VAR 0 5
43819: PUSH
43820: LD_INT 1
43822: ARRAY
43823: PUSH
43824: FOR_TO
43825: IFFALSE 43904
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
43827: LD_VAR 0 5
43831: PUSH
43832: LD_INT 1
43834: ARRAY
43835: PUSH
43836: LD_VAR 0 4
43840: ARRAY
43841: PPUSH
43842: LD_VAR 0 5
43846: PUSH
43847: LD_INT 2
43849: ARRAY
43850: PUSH
43851: LD_VAR 0 4
43855: ARRAY
43856: PPUSH
43857: CALL_OW 351
43861: IFFALSE 43902
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
43863: LD_VAR 0 5
43867: PUSH
43868: LD_INT 1
43870: ARRAY
43871: PUSH
43872: LD_VAR 0 4
43876: ARRAY
43877: PPUSH
43878: LD_VAR 0 5
43882: PUSH
43883: LD_INT 2
43885: ARRAY
43886: PUSH
43887: LD_VAR 0 4
43891: ARRAY
43892: PPUSH
43893: LD_VAR 0 1
43897: PPUSH
43898: CALL_OW 244
// end ;
43902: GO 43824
43904: POP
43905: POP
// end ; end_of_file
43906: LD_VAR 0 3
43910: RET
// export ecoSide , ecoNation , ecoPeopleAmount , ecoStartPoint , ecoCratesDrop , ecoCratesDropXY , ecoCratesDropAllow , ecoAttacksAllow , ecoEventsAllow , ecoAttacksArea , ecoEventsList ; export function InitEcoMode ( startPoint , cratesDropXY , attacksArea ) ; var i , tmp , side , nation , peopleAmount , resourcesAmount ; begin
43911: LD_INT 0
43913: PPUSH
43914: PPUSH
43915: PPUSH
43916: PPUSH
43917: PPUSH
43918: PPUSH
43919: PPUSH
// ecoStartPoint := startPoint ;
43920: LD_ADDR_EXP 6
43924: PUSH
43925: LD_VAR 0 1
43929: ST_TO_ADDR
// CenterNowOnXY ( ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
43930: LD_EXP 6
43934: PUSH
43935: LD_INT 1
43937: ARRAY
43938: PPUSH
43939: LD_EXP 6
43943: PUSH
43944: LD_INT 2
43946: ARRAY
43947: PPUSH
43948: CALL_OW 86
// ecoCratesDropXY := cratesDropXY ;
43952: LD_ADDR_EXP 8
43956: PUSH
43957: LD_VAR 0 2
43961: ST_TO_ADDR
// ecoAttacksArea := attacksArea ;
43962: LD_ADDR_EXP 12
43966: PUSH
43967: LD_VAR 0 3
43971: ST_TO_ADDR
// if debug then
43972: LD_EXP 1
43976: IFFALSE 44020
// begin side := 1 ;
43978: LD_ADDR_VAR 0 7
43982: PUSH
43983: LD_INT 1
43985: ST_TO_ADDR
// nation := 1 ;
43986: LD_ADDR_VAR 0 8
43990: PUSH
43991: LD_INT 1
43993: ST_TO_ADDR
// peopleAmount := 15 ;
43994: LD_ADDR_VAR 0 9
43998: PUSH
43999: LD_INT 15
44001: ST_TO_ADDR
// resourcesAmount := 2 ;
44002: LD_ADDR_VAR 0 10
44006: PUSH
44007: LD_INT 2
44009: ST_TO_ADDR
// ecoCratesDrop := 3 ;
44010: LD_ADDR_EXP 7
44014: PUSH
44015: LD_INT 3
44017: ST_TO_ADDR
// end else
44018: GO 44116
// begin side := GetMultiplayerSetting ( 0 ) ;
44020: LD_ADDR_VAR 0 7
44024: PUSH
44025: LD_INT 0
44027: PPUSH
44028: CALL_OW 426
44032: ST_TO_ADDR
// nation := GetMultiplayerSetting ( 1 ) ;
44033: LD_ADDR_VAR 0 8
44037: PUSH
44038: LD_INT 1
44040: PPUSH
44041: CALL_OW 426
44045: ST_TO_ADDR
// peopleAmount := [ 6 , 9 , 12 , 15 , 18 , 21 , 24 ] [ GetMultiplayerSetting ( 2 ) ] ;
44046: LD_ADDR_VAR 0 9
44050: PUSH
44051: LD_INT 6
44053: PUSH
44054: LD_INT 9
44056: PUSH
44057: LD_INT 12
44059: PUSH
44060: LD_INT 15
44062: PUSH
44063: LD_INT 18
44065: PUSH
44066: LD_INT 21
44068: PUSH
44069: LD_INT 24
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 2
44083: PPUSH
44084: CALL_OW 426
44088: ARRAY
44089: ST_TO_ADDR
// resourcesAmount := GetMultiplayerSetting ( 3 ) ;
44090: LD_ADDR_VAR 0 10
44094: PUSH
44095: LD_INT 3
44097: PPUSH
44098: CALL_OW 426
44102: ST_TO_ADDR
// ecoCratesDrop := GetMultiplayerSetting ( 4 ) ;
44103: LD_ADDR_EXP 7
44107: PUSH
44108: LD_INT 4
44110: PPUSH
44111: CALL_OW 426
44115: ST_TO_ADDR
// end ; ecoCratesDropAllow := true ;
44116: LD_ADDR_EXP 9
44120: PUSH
44121: LD_INT 1
44123: ST_TO_ADDR
// ecoEventsAllow := false ;
44124: LD_ADDR_EXP 11
44128: PUSH
44129: LD_INT 0
44131: ST_TO_ADDR
// ecoAttacksAllow := false ;
44132: LD_ADDR_EXP 10
44136: PUSH
44137: LD_INT 0
44139: ST_TO_ADDR
// ecoSide := side ;
44140: LD_ADDR_EXP 3
44144: PUSH
44145: LD_VAR 0 7
44149: ST_TO_ADDR
// your_side := side ;
44150: LD_ADDR_OWVAR 2
44154: PUSH
44155: LD_VAR 0 7
44159: ST_TO_ADDR
// ChangeSideFog ( 1 , side ) ;
44160: LD_INT 1
44162: PPUSH
44163: LD_VAR 0 7
44167: PPUSH
44168: CALL_OW 343
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
44172: LD_INT 1
44174: PPUSH
44175: LD_INT 1
44177: PPUSH
44178: LD_VAR 0 7
44182: PPUSH
44183: LD_INT 32793
44185: NEG
44186: PPUSH
44187: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
44191: LD_INT 1
44193: PPUSH
44194: LD_INT 1
44196: PPUSH
44197: LD_VAR 0 7
44201: PPUSH
44202: CALL_OW 331
// ecoNation := nation ;
44206: LD_ADDR_EXP 4
44210: PUSH
44211: LD_VAR 0 8
44215: ST_TO_ADDR
// ecoPeopleAmount := peopleAmount ;
44216: LD_ADDR_EXP 5
44220: PUSH
44221: LD_VAR 0 9
44225: ST_TO_ADDR
// for i = 1 to resourcesAmount * 5 do
44226: LD_ADDR_VAR 0 5
44230: PUSH
44231: DOUBLE
44232: LD_INT 1
44234: DEC
44235: ST_TO_ADDR
44236: LD_VAR 0 10
44240: PUSH
44241: LD_INT 5
44243: MUL
44244: PUSH
44245: FOR_TO
44246: IFFALSE 44284
// CreateResourcesXYR ( mat_cans , 5 , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 6 , false ) ;
44248: LD_INT 1
44250: PPUSH
44251: LD_INT 5
44253: PPUSH
44254: LD_EXP 6
44258: PUSH
44259: LD_INT 1
44261: ARRAY
44262: PPUSH
44263: LD_EXP 6
44267: PUSH
44268: LD_INT 2
44270: ARRAY
44271: PPUSH
44272: LD_INT 6
44274: PPUSH
44275: LD_INT 0
44277: PPUSH
44278: CALL_OW 60
44282: GO 44245
44284: POP
44285: POP
// uc_side := side ;
44286: LD_ADDR_OWVAR 20
44290: PUSH
44291: LD_VAR 0 7
44295: ST_TO_ADDR
// uc_nation := nation ;
44296: LD_ADDR_OWVAR 21
44300: PUSH
44301: LD_VAR 0 8
44305: ST_TO_ADDR
// hc_importance := 100 ;
44306: LD_ADDR_OWVAR 32
44310: PUSH
44311: LD_INT 100
44313: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
44314: LD_INT 0
44316: PPUSH
44317: LD_INT 1
44319: PPUSH
44320: LD_INT 4
44322: PPUSH
44323: CALL_OW 380
// if side = 1 and nation = 1 then
44327: LD_VAR 0 7
44331: PUSH
44332: LD_INT 1
44334: EQUAL
44335: PUSH
44336: LD_VAR 0 8
44340: PUSH
44341: LD_INT 1
44343: EQUAL
44344: AND
44345: IFFALSE 44379
// begin hc_name := John Macmilan ;
44347: LD_ADDR_OWVAR 26
44351: PUSH
44352: LD_STRING John Macmilan
44354: ST_TO_ADDR
// hc_gallery := us ;
44355: LD_ADDR_OWVAR 33
44359: PUSH
44360: LD_STRING us
44362: ST_TO_ADDR
// hc_face_number := 5 ;
44363: LD_ADDR_OWVAR 34
44367: PUSH
44368: LD_INT 5
44370: ST_TO_ADDR
// hc_sex := sex_male ;
44371: LD_ADDR_OWVAR 27
44375: PUSH
44376: LD_INT 1
44378: ST_TO_ADDR
// end ; if side = 2 and nation = 2 then
44379: LD_VAR 0 7
44383: PUSH
44384: LD_INT 2
44386: EQUAL
44387: PUSH
44388: LD_VAR 0 8
44392: PUSH
44393: LD_INT 2
44395: EQUAL
44396: AND
44397: IFFALSE 44431
// begin hc_name := Heike Steyer ;
44399: LD_ADDR_OWVAR 26
44403: PUSH
44404: LD_STRING Heike Steyer
44406: ST_TO_ADDR
// hc_gallery := sandar ;
44407: LD_ADDR_OWVAR 33
44411: PUSH
44412: LD_STRING sandar
44414: ST_TO_ADDR
// hc_face_number := 14 ;
44415: LD_ADDR_OWVAR 34
44419: PUSH
44420: LD_INT 14
44422: ST_TO_ADDR
// hc_sex := sex_female ;
44423: LD_ADDR_OWVAR 27
44427: PUSH
44428: LD_INT 2
44430: ST_TO_ADDR
// end ; if side = 5 and nation = 2 then
44431: LD_VAR 0 7
44435: PUSH
44436: LD_INT 5
44438: EQUAL
44439: PUSH
44440: LD_VAR 0 8
44444: PUSH
44445: LD_INT 2
44447: EQUAL
44448: AND
44449: IFFALSE 44491
// begin hc_name := Omar Ali ;
44451: LD_ADDR_OWVAR 26
44455: PUSH
44456: LD_STRING Omar Ali
44458: ST_TO_ADDR
// hc_gallery := sandar ;
44459: LD_ADDR_OWVAR 33
44463: PUSH
44464: LD_STRING sandar
44466: ST_TO_ADDR
// hc_face_number := 6 ;
44467: LD_ADDR_OWVAR 34
44471: PUSH
44472: LD_INT 6
44474: ST_TO_ADDR
// hc_sex := sex_male ;
44475: LD_ADDR_OWVAR 27
44479: PUSH
44480: LD_INT 1
44482: ST_TO_ADDR
// hc_class := class_desert_warior ;
44483: LD_ADDR_OWVAR 28
44487: PUSH
44488: LD_INT 11
44490: ST_TO_ADDR
// end ; if side = 6 and nation = 3 then
44491: LD_VAR 0 7
44495: PUSH
44496: LD_INT 6
44498: EQUAL
44499: PUSH
44500: LD_VAR 0 8
44504: PUSH
44505: LD_INT 3
44507: EQUAL
44508: AND
44509: IFFALSE 44556
// begin PrepareHuman ( false , 3 , 4 ) ;
44511: LD_INT 0
44513: PPUSH
44514: LD_INT 3
44516: PPUSH
44517: LD_INT 4
44519: PPUSH
44520: CALL_OW 380
// hc_name := Yuri I. Burlak ;
44524: LD_ADDR_OWVAR 26
44528: PUSH
44529: LD_STRING Yuri I. Burlak
44531: ST_TO_ADDR
// hc_gallery := ru ;
44532: LD_ADDR_OWVAR 33
44536: PUSH
44537: LD_STRING ru
44539: ST_TO_ADDR
// hc_face_number := 1 ;
44540: LD_ADDR_OWVAR 34
44544: PUSH
44545: LD_INT 1
44547: ST_TO_ADDR
// hc_sex := sex_male ;
44548: LD_ADDR_OWVAR 27
44552: PUSH
44553: LD_INT 1
44555: ST_TO_ADDR
// end ; if side = 4 and nation = 1 then
44556: LD_VAR 0 7
44560: PUSH
44561: LD_INT 4
44563: EQUAL
44564: PUSH
44565: LD_VAR 0 8
44569: PUSH
44570: LD_INT 1
44572: EQUAL
44573: AND
44574: IFFALSE 44608
// begin hc_name := Arthur Powell ;
44576: LD_ADDR_OWVAR 26
44580: PUSH
44581: LD_STRING Arthur Powell
44583: ST_TO_ADDR
// hc_gallery := us ;
44584: LD_ADDR_OWVAR 33
44588: PUSH
44589: LD_STRING us
44591: ST_TO_ADDR
// hc_face_number := 7 ;
44592: LD_ADDR_OWVAR 34
44596: PUSH
44597: LD_INT 7
44599: ST_TO_ADDR
// hc_sex := sex_male ;
44600: LD_ADDR_OWVAR 27
44604: PUSH
44605: LD_INT 1
44607: ST_TO_ADDR
// end ; if side = 3 and nation = 3 then
44608: LD_VAR 0 7
44612: PUSH
44613: LD_INT 3
44615: EQUAL
44616: PUSH
44617: LD_VAR 0 8
44621: PUSH
44622: LD_INT 3
44624: EQUAL
44625: AND
44626: IFFALSE 44660
// begin hc_name := Mjr. Platonov ;
44628: LD_ADDR_OWVAR 26
44632: PUSH
44633: LD_STRING Mjr. Platonov
44635: ST_TO_ADDR
// hc_gallery := ru ;
44636: LD_ADDR_OWVAR 33
44640: PUSH
44641: LD_STRING ru
44643: ST_TO_ADDR
// hc_face_number := 60 ;
44644: LD_ADDR_OWVAR 34
44648: PUSH
44649: LD_INT 60
44651: ST_TO_ADDR
// hc_sex := sex_male ;
44652: LD_ADDR_OWVAR 27
44656: PUSH
44657: LD_INT 1
44659: ST_TO_ADDR
// end ; if side = 7 and nation = 1 then
44660: LD_VAR 0 7
44664: PUSH
44665: LD_INT 7
44667: EQUAL
44668: PUSH
44669: LD_VAR 0 8
44673: PUSH
44674: LD_INT 1
44676: EQUAL
44677: AND
44678: IFFALSE 44725
// begin PrepareHuman ( false , 4 , 4 ) ;
44680: LD_INT 0
44682: PPUSH
44683: LD_INT 4
44685: PPUSH
44686: LD_INT 4
44688: PPUSH
44689: CALL_OW 380
// hc_name := Peter Roth ;
44693: LD_ADDR_OWVAR 26
44697: PUSH
44698: LD_STRING Peter Roth
44700: ST_TO_ADDR
// hc_gallery := us ;
44701: LD_ADDR_OWVAR 33
44705: PUSH
44706: LD_STRING us
44708: ST_TO_ADDR
// hc_face_number := 22 ;
44709: LD_ADDR_OWVAR 34
44713: PUSH
44714: LD_INT 22
44716: ST_TO_ADDR
// hc_sex := sex_male ;
44717: LD_ADDR_OWVAR 27
44721: PUSH
44722: LD_INT 1
44724: ST_TO_ADDR
// end ; if side = 7 and nation = 3 then
44725: LD_VAR 0 7
44729: PUSH
44730: LD_INT 7
44732: EQUAL
44733: PUSH
44734: LD_VAR 0 8
44738: PUSH
44739: LD_INT 3
44741: EQUAL
44742: AND
44743: IFFALSE 44790
// begin PrepareHuman ( false , 4 , 4 ) ;
44745: LD_INT 0
44747: PPUSH
44748: LD_INT 4
44750: PPUSH
44751: LD_INT 4
44753: PPUSH
44754: CALL_OW 380
// hc_name := Prof. Gossudarov ;
44758: LD_ADDR_OWVAR 26
44762: PUSH
44763: LD_STRING Prof. Gossudarov
44765: ST_TO_ADDR
// hc_gallery := ru ;
44766: LD_ADDR_OWVAR 33
44770: PUSH
44771: LD_STRING ru
44773: ST_TO_ADDR
// hc_face_number := 61 ;
44774: LD_ADDR_OWVAR 34
44778: PUSH
44779: LD_INT 61
44781: ST_TO_ADDR
// hc_sex := sex_male ;
44782: LD_ADDR_OWVAR 27
44786: PUSH
44787: LD_INT 1
44789: ST_TO_ADDR
// end ; if side = 8 and nation = 1 then
44790: LD_VAR 0 7
44794: PUSH
44795: LD_INT 8
44797: EQUAL
44798: PUSH
44799: LD_VAR 0 8
44803: PUSH
44804: LD_INT 1
44806: EQUAL
44807: AND
44808: IFFALSE 44842
// begin hc_name := Ron Harisson ;
44810: LD_ADDR_OWVAR 26
44814: PUSH
44815: LD_STRING Ron Harisson
44817: ST_TO_ADDR
// hc_gallery := us ;
44818: LD_ADDR_OWVAR 33
44822: PUSH
44823: LD_STRING us
44825: ST_TO_ADDR
// hc_face_number := 6 ;
44826: LD_ADDR_OWVAR 34
44830: PUSH
44831: LD_INT 6
44833: ST_TO_ADDR
// hc_sex := sex_male ;
44834: LD_ADDR_OWVAR 27
44838: PUSH
44839: LD_INT 1
44841: ST_TO_ADDR
// end ; if side = 8 and nation = 2 then
44842: LD_VAR 0 7
44846: PUSH
44847: LD_INT 8
44849: EQUAL
44850: PUSH
44851: LD_VAR 0 8
44855: PUSH
44856: LD_INT 2
44858: EQUAL
44859: AND
44860: IFFALSE 44894
// begin hc_name := Louis Schulz ;
44862: LD_ADDR_OWVAR 26
44866: PUSH
44867: LD_STRING Louis Schulz
44869: ST_TO_ADDR
// hc_gallery := sandar ;
44870: LD_ADDR_OWVAR 33
44874: PUSH
44875: LD_STRING sandar
44877: ST_TO_ADDR
// hc_face_number := 1 ;
44878: LD_ADDR_OWVAR 34
44882: PUSH
44883: LD_INT 1
44885: ST_TO_ADDR
// hc_sex := sex_male ;
44886: LD_ADDR_OWVAR 27
44890: PUSH
44891: LD_INT 1
44893: ST_TO_ADDR
// end ; PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
44894: CALL_OW 44
44898: PPUSH
44899: LD_EXP 6
44903: PUSH
44904: LD_INT 1
44906: ARRAY
44907: PPUSH
44908: LD_EXP 6
44912: PUSH
44913: LD_INT 2
44915: ARRAY
44916: PPUSH
44917: LD_INT 12
44919: PPUSH
44920: LD_INT 0
44922: PPUSH
44923: CALL_OW 50
// InitHc_All ( ) ;
44927: CALL_OW 584
// for i = 1 to peopleAmount - 1 do
44931: LD_ADDR_VAR 0 5
44935: PUSH
44936: DOUBLE
44937: LD_INT 1
44939: DEC
44940: ST_TO_ADDR
44941: LD_VAR 0 9
44945: PUSH
44946: LD_INT 1
44948: MINUS
44949: PUSH
44950: FOR_TO
44951: IFFALSE 45046
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
44953: LD_INT 0
44955: PPUSH
44956: LD_VAR 0 5
44960: PUSH
44961: LD_INT 4
44963: MOD
44964: PUSH
44965: LD_INT 1
44967: PLUS
44968: PPUSH
44969: LD_INT 3
44971: PPUSH
44972: CALL_OW 380
// tmp := Replace ( tmp , tmp + 1 , CreateHuman ) ;
44976: LD_ADDR_VAR 0 6
44980: PUSH
44981: LD_VAR 0 6
44985: PPUSH
44986: LD_VAR 0 6
44990: PUSH
44991: LD_INT 1
44993: PLUS
44994: PPUSH
44995: CALL_OW 44
44999: PPUSH
45000: CALL_OW 1
45004: ST_TO_ADDR
// PlaceUnitXYR ( tmp [ tmp ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
45005: LD_VAR 0 6
45009: PUSH
45010: LD_VAR 0 6
45014: ARRAY
45015: PPUSH
45016: LD_EXP 6
45020: PUSH
45021: LD_INT 1
45023: ARRAY
45024: PPUSH
45025: LD_EXP 6
45029: PUSH
45030: LD_INT 2
45032: ARRAY
45033: PPUSH
45034: LD_INT 12
45036: PPUSH
45037: LD_INT 0
45039: PPUSH
45040: CALL_OW 50
// end ;
45044: GO 44950
45046: POP
45047: POP
// end ;
45048: LD_VAR 0 4
45052: RET
// every 0 0$1 trigger ecoCratesDrop and ecoCratesDropXY do var time , xy ;
45053: LD_EXP 7
45057: PUSH
45058: LD_EXP 8
45062: AND
45063: IFFALSE 45233
45065: GO 45067
45067: DISABLE
45068: LD_INT 0
45070: PPUSH
45071: PPUSH
// begin time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
45072: LD_ADDR_VAR 0 1
45076: PUSH
45077: LD_INT 700
45079: PUSH
45080: LD_INT 350
45082: PUSH
45083: LD_INT 175
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: LIST
45090: PUSH
45091: LD_EXP 7
45095: ARRAY
45096: ST_TO_ADDR
// while true do
45097: LD_INT 1
45099: IFFALSE 45233
// begin wait ( time ) ;
45101: LD_VAR 0 1
45105: PPUSH
45106: CALL_OW 67
// if not ecoCratesDropAllow then
45110: LD_EXP 9
45114: NOT
45115: IFFALSE 45119
// continue ;
45117: GO 45097
// time := time + 0 0$2 ;
45119: LD_ADDR_VAR 0 1
45123: PUSH
45124: LD_VAR 0 1
45128: PUSH
45129: LD_INT 70
45131: PLUS
45132: ST_TO_ADDR
// if time > 0 0$40 then
45133: LD_VAR 0 1
45137: PUSH
45138: LD_INT 1400
45140: GREATER
45141: IFFALSE 45168
// time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
45143: LD_ADDR_VAR 0 1
45147: PUSH
45148: LD_INT 700
45150: PUSH
45151: LD_INT 350
45153: PUSH
45154: LD_INT 175
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: LIST
45161: PUSH
45162: LD_EXP 7
45166: ARRAY
45167: ST_TO_ADDR
// xy := ecoCratesDropXY [ rand ( 1 , ecoCratesDropXY ) ] ;
45168: LD_ADDR_VAR 0 2
45172: PUSH
45173: LD_EXP 8
45177: PUSH
45178: LD_INT 1
45180: PPUSH
45181: LD_EXP 8
45185: PPUSH
45186: CALL_OW 12
45190: ARRAY
45191: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , xy [ 1 ] , xy [ 2 ] , 14 , true ) ;
45192: LD_INT 1
45194: PPUSH
45195: LD_INT 5
45197: PPUSH
45198: CALL_OW 12
45202: PPUSH
45203: LD_VAR 0 2
45207: PUSH
45208: LD_INT 1
45210: ARRAY
45211: PPUSH
45212: LD_VAR 0 2
45216: PUSH
45217: LD_INT 2
45219: ARRAY
45220: PPUSH
45221: LD_INT 14
45223: PPUSH
45224: LD_INT 1
45226: PPUSH
45227: CALL_OW 56
// end ;
45231: GO 45097
// end ;
45233: PPOPN 2
45235: END
// every 0 0$1 trigger ecoAttacksArea and ecoAttacksAllow do var time , area , tmp , i , xy , veh , dir , enemySide , waveBonus ;
45236: LD_EXP 12
45240: PUSH
45241: LD_EXP 10
45245: AND
45246: IFFALSE 46010
45248: GO 45250
45250: DISABLE
45251: LD_INT 0
45253: PPUSH
45254: PPUSH
45255: PPUSH
45256: PPUSH
45257: PPUSH
45258: PPUSH
45259: PPUSH
45260: PPUSH
45261: PPUSH
// begin time := 3 3$00 ;
45262: LD_ADDR_VAR 0 1
45266: PUSH
45267: LD_INT 6300
45269: ST_TO_ADDR
// enemySide := [ 3 , 9 ] [ rand ( 1 , 2 ) ] ;
45270: LD_ADDR_VAR 0 8
45274: PUSH
45275: LD_INT 3
45277: PUSH
45278: LD_INT 9
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: PPUSH
45288: LD_INT 2
45290: PPUSH
45291: CALL_OW 12
45295: ARRAY
45296: ST_TO_ADDR
// waveBonus := 0 ;
45297: LD_ADDR_VAR 0 9
45301: PUSH
45302: LD_INT 0
45304: ST_TO_ADDR
// if ecoSide = enemySide then
45305: LD_EXP 3
45309: PUSH
45310: LD_VAR 0 8
45314: EQUAL
45315: IFFALSE 45325
// enemySide := 1 ;
45317: LD_ADDR_VAR 0 8
45321: PUSH
45322: LD_INT 1
45324: ST_TO_ADDR
// while true do
45325: LD_INT 1
45327: IFFALSE 46010
// begin wait ( time ) ;
45329: LD_VAR 0 1
45333: PPUSH
45334: CALL_OW 67
// if not ecoAttacksAllow then
45338: LD_EXP 10
45342: NOT
45343: IFFALSE 45347
// continue ;
45345: GO 45325
// waveBonus := waveBonus + 2 ;
45347: LD_ADDR_VAR 0 9
45351: PUSH
45352: LD_VAR 0 9
45356: PUSH
45357: LD_INT 2
45359: PLUS
45360: ST_TO_ADDR
// if waveBonus > 20 then
45361: LD_VAR 0 9
45365: PUSH
45366: LD_INT 20
45368: GREATER
45369: IFFALSE 45379
// waveBonus := 20 ;
45371: LD_ADDR_VAR 0 9
45375: PUSH
45376: LD_INT 20
45378: ST_TO_ADDR
// area := ecoAttacksArea [ rand ( 1 , ecoAttacksArea ) ] ;
45379: LD_ADDR_VAR 0 2
45383: PUSH
45384: LD_EXP 12
45388: PUSH
45389: LD_INT 1
45391: PPUSH
45392: LD_EXP 12
45396: PPUSH
45397: CALL_OW 12
45401: ARRAY
45402: ST_TO_ADDR
// tmp := AreaToList ( area , 0 ) ;
45403: LD_ADDR_VAR 0 3
45407: PUSH
45408: LD_VAR 0 2
45412: PPUSH
45413: LD_INT 0
45415: PPUSH
45416: CALL_OW 517
45420: ST_TO_ADDR
// dir := GetDirFromHex ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
45421: LD_ADDR_VAR 0 7
45425: PUSH
45426: LD_VAR 0 3
45430: PUSH
45431: LD_INT 1
45433: ARRAY
45434: PUSH
45435: LD_INT 1
45437: ARRAY
45438: PPUSH
45439: LD_VAR 0 3
45443: PUSH
45444: LD_INT 2
45446: ARRAY
45447: PUSH
45448: LD_INT 1
45450: ARRAY
45451: PPUSH
45452: LD_EXP 6
45456: PUSH
45457: LD_INT 1
45459: ARRAY
45460: PPUSH
45461: LD_EXP 6
45465: PUSH
45466: LD_INT 2
45468: ARRAY
45469: PPUSH
45470: CALL 40236 0 4
45474: ST_TO_ADDR
// xy := PointBetweenXY ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
45475: LD_ADDR_VAR 0 5
45479: PUSH
45480: LD_VAR 0 3
45484: PUSH
45485: LD_INT 1
45487: ARRAY
45488: PUSH
45489: LD_INT 1
45491: ARRAY
45492: PPUSH
45493: LD_VAR 0 3
45497: PUSH
45498: LD_INT 2
45500: ARRAY
45501: PUSH
45502: LD_INT 1
45504: ARRAY
45505: PPUSH
45506: LD_EXP 6
45510: PUSH
45511: LD_INT 1
45513: ARRAY
45514: PPUSH
45515: LD_EXP 6
45519: PUSH
45520: LD_INT 2
45522: ARRAY
45523: PPUSH
45524: CALL 39376 0 4
45528: ST_TO_ADDR
// tmp := [ ] ;
45529: LD_ADDR_VAR 0 3
45533: PUSH
45534: EMPTY
45535: ST_TO_ADDR
// for i := 1 to 6 + waveBonus do
45536: LD_ADDR_VAR 0 4
45540: PUSH
45541: DOUBLE
45542: LD_INT 1
45544: DEC
45545: ST_TO_ADDR
45546: LD_INT 6
45548: PUSH
45549: LD_VAR 0 9
45553: PLUS
45554: PUSH
45555: FOR_TO
45556: IFFALSE 45875
// begin uc_side := enemySide ;
45558: LD_ADDR_OWVAR 20
45562: PUSH
45563: LD_VAR 0 8
45567: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
45568: LD_ADDR_OWVAR 21
45572: PUSH
45573: LD_INT 1
45575: PPUSH
45576: LD_INT 3
45578: PPUSH
45579: CALL_OW 12
45583: ST_TO_ADDR
// case uc_nation of 1 :
45584: LD_OWVAR 21
45588: PUSH
45589: LD_INT 1
45591: DOUBLE
45592: EQUAL
45593: IFTRUE 45597
45595: GO 45638
45597: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ; 2 :
45598: LD_INT 5
45600: PPUSH
45601: LD_INT 3
45603: PPUSH
45604: LD_INT 3
45606: PPUSH
45607: LD_INT 6
45609: PUSH
45610: LD_INT 7
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: PPUSH
45620: LD_INT 2
45622: PPUSH
45623: CALL_OW 12
45627: ARRAY
45628: PPUSH
45629: LD_INT 100
45631: PPUSH
45632: CALL 5980 0 5
45636: GO 45741
45638: LD_INT 2
45640: DOUBLE
45641: EQUAL
45642: IFTRUE 45646
45644: GO 45691
45646: POP
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] , 100 ) ; 3 :
45647: LD_INT 14
45649: PPUSH
45650: LD_INT 3
45652: PPUSH
45653: LD_INT 5
45655: PPUSH
45656: LD_INT 27
45658: PUSH
45659: LD_INT 28
45661: PUSH
45662: LD_INT 29
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: PPUSH
45673: LD_INT 3
45675: PPUSH
45676: CALL_OW 12
45680: ARRAY
45681: PPUSH
45682: LD_INT 100
45684: PPUSH
45685: CALL 5980 0 5
45689: GO 45741
45691: LD_INT 3
45693: DOUBLE
45694: EQUAL
45695: IFTRUE 45699
45697: GO 45740
45699: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket ] [ rand ( 1 , 2 ) ] , 100 ) ; end ;
45700: LD_INT 24
45702: PPUSH
45703: LD_INT 3
45705: PPUSH
45706: LD_INT 3
45708: PPUSH
45709: LD_INT 46
45711: PUSH
45712: LD_INT 47
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: PPUSH
45722: LD_INT 2
45724: PPUSH
45725: CALL_OW 12
45729: ARRAY
45730: PPUSH
45731: LD_INT 100
45733: PPUSH
45734: CALL 5980 0 5
45738: GO 45741
45740: POP
// veh := CreateVehicle ;
45741: LD_ADDR_VAR 0 6
45745: PUSH
45746: CALL_OW 45
45750: ST_TO_ADDR
// SetDir ( veh , dir ) ;
45751: LD_VAR 0 6
45755: PPUSH
45756: LD_VAR 0 7
45760: PPUSH
45761: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
45765: LD_VAR 0 6
45769: PPUSH
45770: LD_VAR 0 2
45774: PPUSH
45775: LD_INT 0
45777: PPUSH
45778: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
45782: LD_ADDR_VAR 0 3
45786: PUSH
45787: LD_VAR 0 3
45791: PPUSH
45792: LD_VAR 0 3
45796: PUSH
45797: LD_INT 1
45799: PLUS
45800: PPUSH
45801: LD_VAR 0 6
45805: PPUSH
45806: CALL_OW 1
45810: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) = 0 then
45811: LD_VAR 0 5
45815: PUSH
45816: LD_INT 1
45818: ARRAY
45819: PPUSH
45820: LD_VAR 0 5
45824: PUSH
45825: LD_INT 2
45827: ARRAY
45828: PPUSH
45829: CALL_OW 428
45833: PUSH
45834: LD_INT 0
45836: EQUAL
45837: IFFALSE 45866
// ComMoveXY ( veh , xy [ 1 ] , xy [ 2 ] ) ;
45839: LD_VAR 0 6
45843: PPUSH
45844: LD_VAR 0 5
45848: PUSH
45849: LD_INT 1
45851: ARRAY
45852: PPUSH
45853: LD_VAR 0 5
45857: PUSH
45858: LD_INT 2
45860: ARRAY
45861: PPUSH
45862: CALL_OW 111
// wait ( 0 0$0.5 ) ;
45866: LD_INT 18
45868: PPUSH
45869: CALL_OW 67
// end ;
45873: GO 45555
45875: POP
45876: POP
// if tmp then
45877: LD_VAR 0 3
45881: IFFALSE 46008
// begin repeat wait ( 0 0$2 ) ;
45883: LD_INT 70
45885: PPUSH
45886: CALL_OW 67
// for i in tmp do
45890: LD_ADDR_VAR 0 4
45894: PUSH
45895: LD_VAR 0 3
45899: PUSH
45900: FOR_IN
45901: IFFALSE 45999
// begin if IsDead ( i ) or not IsPlaced ( i ) or GetSide ( i ) <> enemySide then
45903: LD_VAR 0 4
45907: PPUSH
45908: CALL_OW 301
45912: PUSH
45913: LD_VAR 0 4
45917: PPUSH
45918: CALL_OW 305
45922: NOT
45923: OR
45924: PUSH
45925: LD_VAR 0 4
45929: PPUSH
45930: CALL_OW 255
45934: PUSH
45935: LD_VAR 0 8
45939: NONEQUAL
45940: OR
45941: IFFALSE 45961
// tmp := tmp diff i else
45943: LD_ADDR_VAR 0 3
45947: PUSH
45948: LD_VAR 0 3
45952: PUSH
45953: LD_VAR 0 4
45957: DIFF
45958: ST_TO_ADDR
45959: GO 45997
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , ecoSide ] ) , i ) ) ;
45961: LD_VAR 0 4
45965: PPUSH
45966: LD_INT 22
45968: PUSH
45969: LD_EXP 3
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PPUSH
45978: CALL_OW 69
45982: PPUSH
45983: LD_VAR 0 4
45987: PPUSH
45988: CALL_OW 74
45992: PPUSH
45993: CALL_OW 115
// end ;
45997: GO 45900
45999: POP
46000: POP
// until not tmp ;
46001: LD_VAR 0 3
46005: NOT
46006: IFFALSE 45883
// end ; end ;
46008: GO 45325
// end ;
46010: PPOPN 9
46012: END
// every 0 0$1 trigger ecoEventsAllow do var time , xy ;
46013: LD_EXP 11
46017: IFFALSE 46070
46019: GO 46021
46021: DISABLE
46022: LD_INT 0
46024: PPUSH
46025: PPUSH
// begin time := rand ( 1 1$00 , 10 10$00 ) ;
46026: LD_ADDR_VAR 0 1
46030: PUSH
46031: LD_INT 2100
46033: PPUSH
46034: LD_INT 21000
46036: PPUSH
46037: CALL_OW 12
46041: ST_TO_ADDR
// while true do
46042: LD_INT 1
46044: IFFALSE 46070
// begin wait ( time ) ;
46046: LD_VAR 0 1
46050: PPUSH
46051: CALL_OW 67
// if not ecoEventsAllow then
46055: LD_EXP 11
46059: NOT
46060: IFFALSE 46064
// continue ;
46062: GO 46042
// EcoEvent ( ) ;
46064: CALL 46073 0 0
// end ;
46068: GO 46042
// end ;
46070: PPOPN 2
46072: END
// export function EcoEvent ( ) ; var event , tmp , i ; begin
46073: LD_INT 0
46075: PPUSH
46076: PPUSH
46077: PPUSH
46078: PPUSH
// event := rand ( 1 , 5 ) ;
46079: LD_ADDR_VAR 0 2
46083: PUSH
46084: LD_INT 1
46086: PPUSH
46087: LD_INT 5
46089: PPUSH
46090: CALL_OW 12
46094: ST_TO_ADDR
// case event of 1 :
46095: LD_VAR 0 2
46099: PUSH
46100: LD_INT 1
46102: DOUBLE
46103: EQUAL
46104: IFTRUE 46108
46106: GO 46194
46108: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_building ] ) diff FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
46109: LD_ADDR_VAR 0 3
46113: PUSH
46114: LD_INT 21
46116: PUSH
46117: LD_INT 3
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PPUSH
46124: CALL_OW 69
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: LD_INT 30
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 30
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: LIST
46156: PPUSH
46157: CALL_OW 69
46161: DIFF
46162: ST_TO_ADDR
// if tmp then
46163: LD_VAR 0 3
46167: IFFALSE 46192
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
46169: LD_VAR 0 3
46173: PUSH
46174: LD_INT 1
46176: PPUSH
46177: LD_VAR 0 3
46181: PPUSH
46182: CALL_OW 12
46186: ARRAY
46187: PPUSH
46188: CALL_OW 65
// end ; 2 :
46192: GO 46393
46194: LD_INT 2
46196: DOUBLE
46197: EQUAL
46198: IFTRUE 46202
46200: GO 46258
46202: POP
// begin uc_side := ecoSide ;
46203: LD_ADDR_OWVAR 20
46207: PUSH
46208: LD_EXP 3
46212: ST_TO_ADDR
// uc_nation := ecoNation ;
46213: LD_ADDR_OWVAR 21
46217: PUSH
46218: LD_EXP 4
46222: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 8 ) ;
46223: LD_INT 0
46225: PPUSH
46226: LD_INT 1
46228: PPUSH
46229: LD_INT 4
46231: PPUSH
46232: CALL_OW 12
46236: PPUSH
46237: LD_INT 8
46239: PPUSH
46240: CALL_OW 380
// PlaceUnitAnyWhere ( CreateHuman , true ) ;
46244: CALL_OW 44
46248: PPUSH
46249: LD_INT 1
46251: PPUSH
46252: CALL_OW 51
// end ; 3 :
46256: GO 46393
46258: LD_INT 3
46260: DOUBLE
46261: EQUAL
46262: IFTRUE 46266
46264: GO 46318
46266: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_vehicle ] ) ;
46267: LD_ADDR_VAR 0 3
46271: PUSH
46272: LD_INT 21
46274: PUSH
46275: LD_INT 2
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PPUSH
46282: CALL_OW 69
46286: ST_TO_ADDR
// if tmp then
46287: LD_VAR 0 3
46291: IFFALSE 46316
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
46293: LD_VAR 0 3
46297: PUSH
46298: LD_INT 1
46300: PPUSH
46301: LD_VAR 0 3
46305: PPUSH
46306: CALL_OW 12
46310: ARRAY
46311: PPUSH
46312: CALL_OW 65
// end ; 4 :
46316: GO 46393
46318: LD_INT 4
46320: DOUBLE
46321: EQUAL
46322: IFTRUE 46326
46324: GO 46381
46326: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_human ] ) ;
46327: LD_ADDR_VAR 0 3
46331: PUSH
46332: LD_INT 21
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PPUSH
46342: CALL_OW 69
46346: ST_TO_ADDR
// if tmp then
46347: LD_VAR 0 3
46351: IFFALSE 46379
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 190 ) ;
46353: LD_VAR 0 3
46357: PUSH
46358: LD_INT 1
46360: PPUSH
46361: LD_VAR 0 3
46365: PPUSH
46366: CALL_OW 12
46370: ARRAY
46371: PPUSH
46372: LD_INT 190
46374: PPUSH
46375: CALL_OW 234
// end ; 5 :
46379: GO 46393
46381: LD_INT 5
46383: DOUBLE
46384: EQUAL
46385: IFTRUE 46389
46387: GO 46392
46389: POP
// begin end ; end ;
46390: GO 46393
46392: POP
// end ;
46393: LD_VAR 0 1
46397: RET
// export function EcoEnableAllTechs ( ) ; var i ; begin
46398: LD_INT 0
46400: PPUSH
46401: PPUSH
// for i := 1 to 100 do
46402: LD_ADDR_VAR 0 2
46406: PUSH
46407: DOUBLE
46408: LD_INT 1
46410: DEC
46411: ST_TO_ADDR
46412: LD_INT 100
46414: PUSH
46415: FOR_TO
46416: IFFALSE 46437
// SetTech ( i , ecoSide , state_researched ) ;
46418: LD_VAR 0 2
46422: PPUSH
46423: LD_EXP 3
46427: PPUSH
46428: LD_INT 2
46430: PPUSH
46431: CALL_OW 322
46435: GO 46415
46437: POP
46438: POP
// end ;
46439: LD_VAR 0 1
46443: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
46444: LD_VAR 0 2
46448: PUSH
46449: LD_INT 102
46451: EQUAL
46452: IFFALSE 46644
// begin case p3 of 1 :
46454: LD_VAR 0 3
46458: PUSH
46459: LD_INT 1
46461: DOUBLE
46462: EQUAL
46463: IFTRUE 46467
46465: GO 46485
46467: POP
// ecoEventsAllow := Negate ( ecoEventsAllow ) ; 2 :
46468: LD_ADDR_EXP 11
46472: PUSH
46473: LD_EXP 11
46477: PPUSH
46478: CALL 40173 0 1
46482: ST_TO_ADDR
46483: GO 46642
46485: LD_INT 2
46487: DOUBLE
46488: EQUAL
46489: IFTRUE 46493
46491: GO 46511
46493: POP
// ecoAttacksAllow := Negate ( ecoAttacksAllow ) ; 3 :
46494: LD_ADDR_EXP 10
46498: PUSH
46499: LD_EXP 10
46503: PPUSH
46504: CALL 40173 0 1
46508: ST_TO_ADDR
46509: GO 46642
46511: LD_INT 3
46513: DOUBLE
46514: EQUAL
46515: IFTRUE 46519
46517: GO 46537
46519: POP
// ecoCratesDropAllow := Negate ( ecoCratesDropAllow ) ; 4 :
46520: LD_ADDR_EXP 9
46524: PUSH
46525: LD_EXP 9
46529: PPUSH
46530: CALL 40173 0 1
46534: ST_TO_ADDR
46535: GO 46642
46537: LD_INT 4
46539: DOUBLE
46540: EQUAL
46541: IFTRUE 46545
46543: GO 46552
46545: POP
// EcoEnableAllTechs ( ) ; 5 .. 8 :
46546: CALL 46398 0 0
46550: GO 46642
46552: LD_INT 5
46554: DOUBLE
46555: GREATEREQUAL
46556: IFFALSE 46564
46558: LD_INT 8
46560: DOUBLE
46561: LESSEQUAL
46562: IFTRUE 46566
46564: GO 46641
46566: POP
// begin uc_side := ecoSide ;
46567: LD_ADDR_OWVAR 20
46571: PUSH
46572: LD_EXP 3
46576: ST_TO_ADDR
// uc_nation := ecoNation ;
46577: LD_ADDR_OWVAR 21
46581: PUSH
46582: LD_EXP 4
46586: ST_TO_ADDR
// PrepareHuman ( false , p3 - 4 , 4 ) ;
46587: LD_INT 0
46589: PPUSH
46590: LD_VAR 0 3
46594: PUSH
46595: LD_INT 4
46597: MINUS
46598: PPUSH
46599: LD_INT 4
46601: PPUSH
46602: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , true ) ;
46606: CALL_OW 44
46610: PPUSH
46611: LD_EXP 6
46615: PUSH
46616: LD_INT 1
46618: ARRAY
46619: PPUSH
46620: LD_EXP 6
46624: PUSH
46625: LD_INT 2
46627: ARRAY
46628: PPUSH
46629: LD_INT 12
46631: PPUSH
46632: LD_INT 1
46634: PPUSH
46635: CALL_OW 50
// end ; end ;
46639: GO 46642
46641: POP
// end else
46642: GO 46678
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
46644: LD_VAR 0 1
46648: PPUSH
46649: LD_VAR 0 2
46653: PPUSH
46654: LD_VAR 0 3
46658: PPUSH
46659: LD_VAR 0 4
46663: PPUSH
46664: LD_VAR 0 5
46668: PPUSH
46669: LD_VAR 0 6
46673: PPUSH
46674: CALL 46886 0 6
// end ;
46678: PPOPN 6
46680: END
// on MapStart ( p ) do begin if gameType = 1 then
46681: LD_EXP 2
46685: PUSH
46686: LD_INT 1
46688: EQUAL
46689: IFFALSE 46700
// ToLua ( SKIRMISH_GAME_TYPE = 1 ) else
46691: LD_STRING SKIRMISH_GAME_TYPE = 1
46693: PPUSH
46694: CALL_OW 559
46698: GO 46707
// ToLua ( SKIRMISH_GAME_TYPE = 0 ) ;
46700: LD_STRING SKIRMISH_GAME_TYPE = 0
46702: PPUSH
46703: CALL_OW 559
// SOS_MapStart ( ) ;
46707: CALL 46773 0 0
// end ; end_of_file
46711: PPOPN 1
46713: END
// export globalGameSaveCounter ; every 0 0$1 do
46714: GO 46716
46716: DISABLE
// begin enable ;
46717: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
46718: LD_STRING updateTimer(
46720: PUSH
46721: LD_OWVAR 1
46725: STR
46726: PUSH
46727: LD_STRING );
46729: STR
46730: PPUSH
46731: CALL_OW 559
// end ;
46735: END
// every 0 0$1 do
46736: GO 46738
46738: DISABLE
// begin globalGameSaveCounter := 0 ;
46739: LD_ADDR_EXP 14
46743: PUSH
46744: LD_INT 0
46746: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
46747: LD_STRING setGameSaveCounter(0)
46749: PPUSH
46750: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
46754: LD_STRING initStreamRollete();
46756: PPUSH
46757: CALL_OW 559
// InitStreamMode ;
46761: CALL 48104 0 0
// DefineStreamItems ( false ) ;
46765: LD_INT 0
46767: PPUSH
46768: CALL 48568 0 1
// end ;
46772: END
// export function SOS_MapStart ( ) ; begin
46773: LD_INT 0
46775: PPUSH
// if streamModeActive then
46776: LD_EXP 15
46780: IFFALSE 46789
// DefineStreamItems ( true ) ;
46782: LD_INT 1
46784: PPUSH
46785: CALL 48568 0 1
// UpdateLuaVariables ( ) ;
46789: CALL 46806 0 0
// UpdateFactoryWaypoints ( ) ;
46793: CALL 61437 0 0
// UpdateWarehouseGatheringPoints ( ) ;
46797: CALL 61694 0 0
// end ;
46801: LD_VAR 0 1
46805: RET
// function UpdateLuaVariables ( ) ; begin
46806: LD_INT 0
46808: PPUSH
// if globalGameSaveCounter then
46809: LD_EXP 14
46813: IFFALSE 46847
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
46815: LD_ADDR_EXP 14
46819: PUSH
46820: LD_EXP 14
46824: PPUSH
46825: CALL 40192 0 1
46829: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
46830: LD_STRING setGameSaveCounter(
46832: PUSH
46833: LD_EXP 14
46837: STR
46838: PUSH
46839: LD_STRING )
46841: STR
46842: PPUSH
46843: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
46847: LD_STRING setGameDifficulty(
46849: PUSH
46850: LD_OWVAR 67
46854: STR
46855: PUSH
46856: LD_STRING )
46858: STR
46859: PPUSH
46860: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
46864: LD_STRING displayDifficulty(
46866: PUSH
46867: LD_OWVAR 67
46871: STR
46872: PUSH
46873: LD_STRING )
46875: STR
46876: PPUSH
46877: CALL_OW 559
// end ;
46881: LD_VAR 0 1
46885: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46886: LD_INT 0
46888: PPUSH
// if p2 = stream_mode then
46889: LD_VAR 0 2
46893: PUSH
46894: LD_INT 100
46896: EQUAL
46897: IFFALSE 47900
// begin if not StreamModeActive then
46899: LD_EXP 15
46903: NOT
46904: IFFALSE 46914
// StreamModeActive := true ;
46906: LD_ADDR_EXP 15
46910: PUSH
46911: LD_INT 1
46913: ST_TO_ADDR
// if p3 = 0 then
46914: LD_VAR 0 3
46918: PUSH
46919: LD_INT 0
46921: EQUAL
46922: IFFALSE 46928
// InitStreamMode ;
46924: CALL 48104 0 0
// if p3 = 1 then
46928: LD_VAR 0 3
46932: PUSH
46933: LD_INT 1
46935: EQUAL
46936: IFFALSE 46946
// sRocket := true ;
46938: LD_ADDR_EXP 20
46942: PUSH
46943: LD_INT 1
46945: ST_TO_ADDR
// if p3 = 2 then
46946: LD_VAR 0 3
46950: PUSH
46951: LD_INT 2
46953: EQUAL
46954: IFFALSE 46964
// sSpeed := true ;
46956: LD_ADDR_EXP 19
46960: PUSH
46961: LD_INT 1
46963: ST_TO_ADDR
// if p3 = 3 then
46964: LD_VAR 0 3
46968: PUSH
46969: LD_INT 3
46971: EQUAL
46972: IFFALSE 46982
// sEngine := true ;
46974: LD_ADDR_EXP 21
46978: PUSH
46979: LD_INT 1
46981: ST_TO_ADDR
// if p3 = 4 then
46982: LD_VAR 0 3
46986: PUSH
46987: LD_INT 4
46989: EQUAL
46990: IFFALSE 47000
// sSpec := true ;
46992: LD_ADDR_EXP 18
46996: PUSH
46997: LD_INT 1
46999: ST_TO_ADDR
// if p3 = 5 then
47000: LD_VAR 0 3
47004: PUSH
47005: LD_INT 5
47007: EQUAL
47008: IFFALSE 47018
// sLevel := true ;
47010: LD_ADDR_EXP 22
47014: PUSH
47015: LD_INT 1
47017: ST_TO_ADDR
// if p3 = 6 then
47018: LD_VAR 0 3
47022: PUSH
47023: LD_INT 6
47025: EQUAL
47026: IFFALSE 47036
// sArmoury := true ;
47028: LD_ADDR_EXP 23
47032: PUSH
47033: LD_INT 1
47035: ST_TO_ADDR
// if p3 = 7 then
47036: LD_VAR 0 3
47040: PUSH
47041: LD_INT 7
47043: EQUAL
47044: IFFALSE 47054
// sRadar := true ;
47046: LD_ADDR_EXP 24
47050: PUSH
47051: LD_INT 1
47053: ST_TO_ADDR
// if p3 = 8 then
47054: LD_VAR 0 3
47058: PUSH
47059: LD_INT 8
47061: EQUAL
47062: IFFALSE 47072
// sBunker := true ;
47064: LD_ADDR_EXP 25
47068: PUSH
47069: LD_INT 1
47071: ST_TO_ADDR
// if p3 = 9 then
47072: LD_VAR 0 3
47076: PUSH
47077: LD_INT 9
47079: EQUAL
47080: IFFALSE 47090
// sHack := true ;
47082: LD_ADDR_EXP 26
47086: PUSH
47087: LD_INT 1
47089: ST_TO_ADDR
// if p3 = 10 then
47090: LD_VAR 0 3
47094: PUSH
47095: LD_INT 10
47097: EQUAL
47098: IFFALSE 47108
// sFire := true ;
47100: LD_ADDR_EXP 27
47104: PUSH
47105: LD_INT 1
47107: ST_TO_ADDR
// if p3 = 11 then
47108: LD_VAR 0 3
47112: PUSH
47113: LD_INT 11
47115: EQUAL
47116: IFFALSE 47126
// sRefresh := true ;
47118: LD_ADDR_EXP 28
47122: PUSH
47123: LD_INT 1
47125: ST_TO_ADDR
// if p3 = 12 then
47126: LD_VAR 0 3
47130: PUSH
47131: LD_INT 12
47133: EQUAL
47134: IFFALSE 47144
// sExp := true ;
47136: LD_ADDR_EXP 29
47140: PUSH
47141: LD_INT 1
47143: ST_TO_ADDR
// if p3 = 13 then
47144: LD_VAR 0 3
47148: PUSH
47149: LD_INT 13
47151: EQUAL
47152: IFFALSE 47162
// sDepot := true ;
47154: LD_ADDR_EXP 30
47158: PUSH
47159: LD_INT 1
47161: ST_TO_ADDR
// if p3 = 14 then
47162: LD_VAR 0 3
47166: PUSH
47167: LD_INT 14
47169: EQUAL
47170: IFFALSE 47180
// sFlag := true ;
47172: LD_ADDR_EXP 31
47176: PUSH
47177: LD_INT 1
47179: ST_TO_ADDR
// if p3 = 15 then
47180: LD_VAR 0 3
47184: PUSH
47185: LD_INT 15
47187: EQUAL
47188: IFFALSE 47198
// sKamikadze := true ;
47190: LD_ADDR_EXP 39
47194: PUSH
47195: LD_INT 1
47197: ST_TO_ADDR
// if p3 = 16 then
47198: LD_VAR 0 3
47202: PUSH
47203: LD_INT 16
47205: EQUAL
47206: IFFALSE 47216
// sTroll := true ;
47208: LD_ADDR_EXP 40
47212: PUSH
47213: LD_INT 1
47215: ST_TO_ADDR
// if p3 = 17 then
47216: LD_VAR 0 3
47220: PUSH
47221: LD_INT 17
47223: EQUAL
47224: IFFALSE 47234
// sSlow := true ;
47226: LD_ADDR_EXP 41
47230: PUSH
47231: LD_INT 1
47233: ST_TO_ADDR
// if p3 = 18 then
47234: LD_VAR 0 3
47238: PUSH
47239: LD_INT 18
47241: EQUAL
47242: IFFALSE 47252
// sLack := true ;
47244: LD_ADDR_EXP 42
47248: PUSH
47249: LD_INT 1
47251: ST_TO_ADDR
// if p3 = 19 then
47252: LD_VAR 0 3
47256: PUSH
47257: LD_INT 19
47259: EQUAL
47260: IFFALSE 47270
// sTank := true ;
47262: LD_ADDR_EXP 44
47266: PUSH
47267: LD_INT 1
47269: ST_TO_ADDR
// if p3 = 20 then
47270: LD_VAR 0 3
47274: PUSH
47275: LD_INT 20
47277: EQUAL
47278: IFFALSE 47288
// sRemote := true ;
47280: LD_ADDR_EXP 45
47284: PUSH
47285: LD_INT 1
47287: ST_TO_ADDR
// if p3 = 21 then
47288: LD_VAR 0 3
47292: PUSH
47293: LD_INT 21
47295: EQUAL
47296: IFFALSE 47306
// sPowell := true ;
47298: LD_ADDR_EXP 46
47302: PUSH
47303: LD_INT 1
47305: ST_TO_ADDR
// if p3 = 22 then
47306: LD_VAR 0 3
47310: PUSH
47311: LD_INT 22
47313: EQUAL
47314: IFFALSE 47324
// sTeleport := true ;
47316: LD_ADDR_EXP 49
47320: PUSH
47321: LD_INT 1
47323: ST_TO_ADDR
// if p3 = 23 then
47324: LD_VAR 0 3
47328: PUSH
47329: LD_INT 23
47331: EQUAL
47332: IFFALSE 47342
// sOilTower := true ;
47334: LD_ADDR_EXP 51
47338: PUSH
47339: LD_INT 1
47341: ST_TO_ADDR
// if p3 = 24 then
47342: LD_VAR 0 3
47346: PUSH
47347: LD_INT 24
47349: EQUAL
47350: IFFALSE 47360
// sShovel := true ;
47352: LD_ADDR_EXP 52
47356: PUSH
47357: LD_INT 1
47359: ST_TO_ADDR
// if p3 = 25 then
47360: LD_VAR 0 3
47364: PUSH
47365: LD_INT 25
47367: EQUAL
47368: IFFALSE 47378
// sSheik := true ;
47370: LD_ADDR_EXP 53
47374: PUSH
47375: LD_INT 1
47377: ST_TO_ADDR
// if p3 = 26 then
47378: LD_VAR 0 3
47382: PUSH
47383: LD_INT 26
47385: EQUAL
47386: IFFALSE 47396
// sEarthquake := true ;
47388: LD_ADDR_EXP 55
47392: PUSH
47393: LD_INT 1
47395: ST_TO_ADDR
// if p3 = 27 then
47396: LD_VAR 0 3
47400: PUSH
47401: LD_INT 27
47403: EQUAL
47404: IFFALSE 47414
// sAI := true ;
47406: LD_ADDR_EXP 56
47410: PUSH
47411: LD_INT 1
47413: ST_TO_ADDR
// if p3 = 28 then
47414: LD_VAR 0 3
47418: PUSH
47419: LD_INT 28
47421: EQUAL
47422: IFFALSE 47432
// sCargo := true ;
47424: LD_ADDR_EXP 59
47428: PUSH
47429: LD_INT 1
47431: ST_TO_ADDR
// if p3 = 29 then
47432: LD_VAR 0 3
47436: PUSH
47437: LD_INT 29
47439: EQUAL
47440: IFFALSE 47450
// sDLaser := true ;
47442: LD_ADDR_EXP 60
47446: PUSH
47447: LD_INT 1
47449: ST_TO_ADDR
// if p3 = 30 then
47450: LD_VAR 0 3
47454: PUSH
47455: LD_INT 30
47457: EQUAL
47458: IFFALSE 47468
// sExchange := true ;
47460: LD_ADDR_EXP 61
47464: PUSH
47465: LD_INT 1
47467: ST_TO_ADDR
// if p3 = 31 then
47468: LD_VAR 0 3
47472: PUSH
47473: LD_INT 31
47475: EQUAL
47476: IFFALSE 47486
// sFac := true ;
47478: LD_ADDR_EXP 62
47482: PUSH
47483: LD_INT 1
47485: ST_TO_ADDR
// if p3 = 32 then
47486: LD_VAR 0 3
47490: PUSH
47491: LD_INT 32
47493: EQUAL
47494: IFFALSE 47504
// sPower := true ;
47496: LD_ADDR_EXP 63
47500: PUSH
47501: LD_INT 1
47503: ST_TO_ADDR
// if p3 = 33 then
47504: LD_VAR 0 3
47508: PUSH
47509: LD_INT 33
47511: EQUAL
47512: IFFALSE 47522
// sRandom := true ;
47514: LD_ADDR_EXP 64
47518: PUSH
47519: LD_INT 1
47521: ST_TO_ADDR
// if p3 = 34 then
47522: LD_VAR 0 3
47526: PUSH
47527: LD_INT 34
47529: EQUAL
47530: IFFALSE 47540
// sShield := true ;
47532: LD_ADDR_EXP 65
47536: PUSH
47537: LD_INT 1
47539: ST_TO_ADDR
// if p3 = 35 then
47540: LD_VAR 0 3
47544: PUSH
47545: LD_INT 35
47547: EQUAL
47548: IFFALSE 47558
// sTime := true ;
47550: LD_ADDR_EXP 66
47554: PUSH
47555: LD_INT 1
47557: ST_TO_ADDR
// if p3 = 36 then
47558: LD_VAR 0 3
47562: PUSH
47563: LD_INT 36
47565: EQUAL
47566: IFFALSE 47576
// sTools := true ;
47568: LD_ADDR_EXP 67
47572: PUSH
47573: LD_INT 1
47575: ST_TO_ADDR
// if p3 = 101 then
47576: LD_VAR 0 3
47580: PUSH
47581: LD_INT 101
47583: EQUAL
47584: IFFALSE 47594
// sSold := true ;
47586: LD_ADDR_EXP 32
47590: PUSH
47591: LD_INT 1
47593: ST_TO_ADDR
// if p3 = 102 then
47594: LD_VAR 0 3
47598: PUSH
47599: LD_INT 102
47601: EQUAL
47602: IFFALSE 47612
// sDiff := true ;
47604: LD_ADDR_EXP 33
47608: PUSH
47609: LD_INT 1
47611: ST_TO_ADDR
// if p3 = 103 then
47612: LD_VAR 0 3
47616: PUSH
47617: LD_INT 103
47619: EQUAL
47620: IFFALSE 47630
// sFog := true ;
47622: LD_ADDR_EXP 36
47626: PUSH
47627: LD_INT 1
47629: ST_TO_ADDR
// if p3 = 104 then
47630: LD_VAR 0 3
47634: PUSH
47635: LD_INT 104
47637: EQUAL
47638: IFFALSE 47648
// sReset := true ;
47640: LD_ADDR_EXP 37
47644: PUSH
47645: LD_INT 1
47647: ST_TO_ADDR
// if p3 = 105 then
47648: LD_VAR 0 3
47652: PUSH
47653: LD_INT 105
47655: EQUAL
47656: IFFALSE 47666
// sSun := true ;
47658: LD_ADDR_EXP 38
47662: PUSH
47663: LD_INT 1
47665: ST_TO_ADDR
// if p3 = 106 then
47666: LD_VAR 0 3
47670: PUSH
47671: LD_INT 106
47673: EQUAL
47674: IFFALSE 47684
// sTiger := true ;
47676: LD_ADDR_EXP 34
47680: PUSH
47681: LD_INT 1
47683: ST_TO_ADDR
// if p3 = 107 then
47684: LD_VAR 0 3
47688: PUSH
47689: LD_INT 107
47691: EQUAL
47692: IFFALSE 47702
// sBomb := true ;
47694: LD_ADDR_EXP 35
47698: PUSH
47699: LD_INT 1
47701: ST_TO_ADDR
// if p3 = 108 then
47702: LD_VAR 0 3
47706: PUSH
47707: LD_INT 108
47709: EQUAL
47710: IFFALSE 47720
// sWound := true ;
47712: LD_ADDR_EXP 43
47716: PUSH
47717: LD_INT 1
47719: ST_TO_ADDR
// if p3 = 109 then
47720: LD_VAR 0 3
47724: PUSH
47725: LD_INT 109
47727: EQUAL
47728: IFFALSE 47738
// sBetray := true ;
47730: LD_ADDR_EXP 47
47734: PUSH
47735: LD_INT 1
47737: ST_TO_ADDR
// if p3 = 110 then
47738: LD_VAR 0 3
47742: PUSH
47743: LD_INT 110
47745: EQUAL
47746: IFFALSE 47756
// sContamin := true ;
47748: LD_ADDR_EXP 48
47752: PUSH
47753: LD_INT 1
47755: ST_TO_ADDR
// if p3 = 111 then
47756: LD_VAR 0 3
47760: PUSH
47761: LD_INT 111
47763: EQUAL
47764: IFFALSE 47774
// sOil := true ;
47766: LD_ADDR_EXP 50
47770: PUSH
47771: LD_INT 1
47773: ST_TO_ADDR
// if p3 = 112 then
47774: LD_VAR 0 3
47778: PUSH
47779: LD_INT 112
47781: EQUAL
47782: IFFALSE 47792
// sStu := true ;
47784: LD_ADDR_EXP 54
47788: PUSH
47789: LD_INT 1
47791: ST_TO_ADDR
// if p3 = 113 then
47792: LD_VAR 0 3
47796: PUSH
47797: LD_INT 113
47799: EQUAL
47800: IFFALSE 47810
// sBazooka := true ;
47802: LD_ADDR_EXP 57
47806: PUSH
47807: LD_INT 1
47809: ST_TO_ADDR
// if p3 = 114 then
47810: LD_VAR 0 3
47814: PUSH
47815: LD_INT 114
47817: EQUAL
47818: IFFALSE 47828
// sMortar := true ;
47820: LD_ADDR_EXP 58
47824: PUSH
47825: LD_INT 1
47827: ST_TO_ADDR
// if p3 = 115 then
47828: LD_VAR 0 3
47832: PUSH
47833: LD_INT 115
47835: EQUAL
47836: IFFALSE 47846
// sRanger := true ;
47838: LD_ADDR_EXP 68
47842: PUSH
47843: LD_INT 1
47845: ST_TO_ADDR
// if p3 = 116 then
47846: LD_VAR 0 3
47850: PUSH
47851: LD_INT 116
47853: EQUAL
47854: IFFALSE 47864
// sComputer := true ;
47856: LD_ADDR_EXP 69
47860: PUSH
47861: LD_INT 1
47863: ST_TO_ADDR
// if p3 = 117 then
47864: LD_VAR 0 3
47868: PUSH
47869: LD_INT 117
47871: EQUAL
47872: IFFALSE 47882
// s30 := true ;
47874: LD_ADDR_EXP 70
47878: PUSH
47879: LD_INT 1
47881: ST_TO_ADDR
// if p3 = 118 then
47882: LD_VAR 0 3
47886: PUSH
47887: LD_INT 118
47889: EQUAL
47890: IFFALSE 47900
// s60 := true ;
47892: LD_ADDR_EXP 71
47896: PUSH
47897: LD_INT 1
47899: ST_TO_ADDR
// end ; if p2 = hack_mode then
47900: LD_VAR 0 2
47904: PUSH
47905: LD_INT 101
47907: EQUAL
47908: IFFALSE 48036
// begin case p3 of 1 :
47910: LD_VAR 0 3
47914: PUSH
47915: LD_INT 1
47917: DOUBLE
47918: EQUAL
47919: IFTRUE 47923
47921: GO 47930
47923: POP
// hHackUnlimitedResources ; 2 :
47924: CALL 60183 0 0
47928: GO 48036
47930: LD_INT 2
47932: DOUBLE
47933: EQUAL
47934: IFTRUE 47938
47936: GO 47945
47938: POP
// hHackSetLevel10 ; 3 :
47939: CALL 60316 0 0
47943: GO 48036
47945: LD_INT 3
47947: DOUBLE
47948: EQUAL
47949: IFTRUE 47953
47951: GO 47960
47953: POP
// hHackSetLevel10YourUnits ; 4 :
47954: CALL 60401 0 0
47958: GO 48036
47960: LD_INT 4
47962: DOUBLE
47963: EQUAL
47964: IFTRUE 47968
47966: GO 47975
47968: POP
// hHackInvincible ; 5 :
47969: CALL 60849 0 0
47973: GO 48036
47975: LD_INT 5
47977: DOUBLE
47978: EQUAL
47979: IFTRUE 47983
47981: GO 47990
47983: POP
// hHackInvisible ; 6 :
47984: CALL 60960 0 0
47988: GO 48036
47990: LD_INT 6
47992: DOUBLE
47993: EQUAL
47994: IFTRUE 47998
47996: GO 48005
47998: POP
// hHackChangeYourSide ; 7 :
47999: CALL 61017 0 0
48003: GO 48036
48005: LD_INT 7
48007: DOUBLE
48008: EQUAL
48009: IFTRUE 48013
48011: GO 48020
48013: POP
// hHackChangeUnitSide ; 8 :
48014: CALL 61059 0 0
48018: GO 48036
48020: LD_INT 8
48022: DOUBLE
48023: EQUAL
48024: IFTRUE 48028
48026: GO 48035
48028: POP
// hHackFog ; end ;
48029: CALL 61160 0 0
48033: GO 48036
48035: POP
// end ; if p2 = game_save_mode then
48036: LD_VAR 0 2
48040: PUSH
48041: LD_INT 102
48043: EQUAL
48044: IFFALSE 48099
// begin if p3 = 1 then
48046: LD_VAR 0 3
48050: PUSH
48051: LD_INT 1
48053: EQUAL
48054: IFFALSE 48066
// globalGameSaveCounter := p4 ;
48056: LD_ADDR_EXP 14
48060: PUSH
48061: LD_VAR 0 4
48065: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
48066: LD_VAR 0 3
48070: PUSH
48071: LD_INT 2
48073: EQUAL
48074: PUSH
48075: LD_EXP 14
48079: AND
48080: IFFALSE 48099
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
48082: LD_STRING setGameSaveCounter(
48084: PUSH
48085: LD_EXP 14
48089: STR
48090: PUSH
48091: LD_STRING )
48093: STR
48094: PPUSH
48095: CALL_OW 559
// end ; end ;
48099: LD_VAR 0 7
48103: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
48104: LD_INT 0
48106: PPUSH
// streamModeActive := false ;
48107: LD_ADDR_EXP 15
48111: PUSH
48112: LD_INT 0
48114: ST_TO_ADDR
// normalCounter := 36 ;
48115: LD_ADDR_EXP 16
48119: PUSH
48120: LD_INT 36
48122: ST_TO_ADDR
// hardcoreCounter := 18 ;
48123: LD_ADDR_EXP 17
48127: PUSH
48128: LD_INT 18
48130: ST_TO_ADDR
// sRocket := false ;
48131: LD_ADDR_EXP 20
48135: PUSH
48136: LD_INT 0
48138: ST_TO_ADDR
// sSpeed := false ;
48139: LD_ADDR_EXP 19
48143: PUSH
48144: LD_INT 0
48146: ST_TO_ADDR
// sEngine := false ;
48147: LD_ADDR_EXP 21
48151: PUSH
48152: LD_INT 0
48154: ST_TO_ADDR
// sSpec := false ;
48155: LD_ADDR_EXP 18
48159: PUSH
48160: LD_INT 0
48162: ST_TO_ADDR
// sLevel := false ;
48163: LD_ADDR_EXP 22
48167: PUSH
48168: LD_INT 0
48170: ST_TO_ADDR
// sArmoury := false ;
48171: LD_ADDR_EXP 23
48175: PUSH
48176: LD_INT 0
48178: ST_TO_ADDR
// sRadar := false ;
48179: LD_ADDR_EXP 24
48183: PUSH
48184: LD_INT 0
48186: ST_TO_ADDR
// sBunker := false ;
48187: LD_ADDR_EXP 25
48191: PUSH
48192: LD_INT 0
48194: ST_TO_ADDR
// sHack := false ;
48195: LD_ADDR_EXP 26
48199: PUSH
48200: LD_INT 0
48202: ST_TO_ADDR
// sFire := false ;
48203: LD_ADDR_EXP 27
48207: PUSH
48208: LD_INT 0
48210: ST_TO_ADDR
// sRefresh := false ;
48211: LD_ADDR_EXP 28
48215: PUSH
48216: LD_INT 0
48218: ST_TO_ADDR
// sExp := false ;
48219: LD_ADDR_EXP 29
48223: PUSH
48224: LD_INT 0
48226: ST_TO_ADDR
// sDepot := false ;
48227: LD_ADDR_EXP 30
48231: PUSH
48232: LD_INT 0
48234: ST_TO_ADDR
// sFlag := false ;
48235: LD_ADDR_EXP 31
48239: PUSH
48240: LD_INT 0
48242: ST_TO_ADDR
// sKamikadze := false ;
48243: LD_ADDR_EXP 39
48247: PUSH
48248: LD_INT 0
48250: ST_TO_ADDR
// sTroll := false ;
48251: LD_ADDR_EXP 40
48255: PUSH
48256: LD_INT 0
48258: ST_TO_ADDR
// sSlow := false ;
48259: LD_ADDR_EXP 41
48263: PUSH
48264: LD_INT 0
48266: ST_TO_ADDR
// sLack := false ;
48267: LD_ADDR_EXP 42
48271: PUSH
48272: LD_INT 0
48274: ST_TO_ADDR
// sTank := false ;
48275: LD_ADDR_EXP 44
48279: PUSH
48280: LD_INT 0
48282: ST_TO_ADDR
// sRemote := false ;
48283: LD_ADDR_EXP 45
48287: PUSH
48288: LD_INT 0
48290: ST_TO_ADDR
// sPowell := false ;
48291: LD_ADDR_EXP 46
48295: PUSH
48296: LD_INT 0
48298: ST_TO_ADDR
// sTeleport := false ;
48299: LD_ADDR_EXP 49
48303: PUSH
48304: LD_INT 0
48306: ST_TO_ADDR
// sOilTower := false ;
48307: LD_ADDR_EXP 51
48311: PUSH
48312: LD_INT 0
48314: ST_TO_ADDR
// sShovel := false ;
48315: LD_ADDR_EXP 52
48319: PUSH
48320: LD_INT 0
48322: ST_TO_ADDR
// sSheik := false ;
48323: LD_ADDR_EXP 53
48327: PUSH
48328: LD_INT 0
48330: ST_TO_ADDR
// sEarthquake := false ;
48331: LD_ADDR_EXP 55
48335: PUSH
48336: LD_INT 0
48338: ST_TO_ADDR
// sAI := false ;
48339: LD_ADDR_EXP 56
48343: PUSH
48344: LD_INT 0
48346: ST_TO_ADDR
// sCargo := false ;
48347: LD_ADDR_EXP 59
48351: PUSH
48352: LD_INT 0
48354: ST_TO_ADDR
// sDLaser := false ;
48355: LD_ADDR_EXP 60
48359: PUSH
48360: LD_INT 0
48362: ST_TO_ADDR
// sExchange := false ;
48363: LD_ADDR_EXP 61
48367: PUSH
48368: LD_INT 0
48370: ST_TO_ADDR
// sFac := false ;
48371: LD_ADDR_EXP 62
48375: PUSH
48376: LD_INT 0
48378: ST_TO_ADDR
// sPower := false ;
48379: LD_ADDR_EXP 63
48383: PUSH
48384: LD_INT 0
48386: ST_TO_ADDR
// sRandom := false ;
48387: LD_ADDR_EXP 64
48391: PUSH
48392: LD_INT 0
48394: ST_TO_ADDR
// sShield := false ;
48395: LD_ADDR_EXP 65
48399: PUSH
48400: LD_INT 0
48402: ST_TO_ADDR
// sTime := false ;
48403: LD_ADDR_EXP 66
48407: PUSH
48408: LD_INT 0
48410: ST_TO_ADDR
// sTools := false ;
48411: LD_ADDR_EXP 67
48415: PUSH
48416: LD_INT 0
48418: ST_TO_ADDR
// sSold := false ;
48419: LD_ADDR_EXP 32
48423: PUSH
48424: LD_INT 0
48426: ST_TO_ADDR
// sDiff := false ;
48427: LD_ADDR_EXP 33
48431: PUSH
48432: LD_INT 0
48434: ST_TO_ADDR
// sFog := false ;
48435: LD_ADDR_EXP 36
48439: PUSH
48440: LD_INT 0
48442: ST_TO_ADDR
// sReset := false ;
48443: LD_ADDR_EXP 37
48447: PUSH
48448: LD_INT 0
48450: ST_TO_ADDR
// sSun := false ;
48451: LD_ADDR_EXP 38
48455: PUSH
48456: LD_INT 0
48458: ST_TO_ADDR
// sTiger := false ;
48459: LD_ADDR_EXP 34
48463: PUSH
48464: LD_INT 0
48466: ST_TO_ADDR
// sBomb := false ;
48467: LD_ADDR_EXP 35
48471: PUSH
48472: LD_INT 0
48474: ST_TO_ADDR
// sWound := false ;
48475: LD_ADDR_EXP 43
48479: PUSH
48480: LD_INT 0
48482: ST_TO_ADDR
// sBetray := false ;
48483: LD_ADDR_EXP 47
48487: PUSH
48488: LD_INT 0
48490: ST_TO_ADDR
// sContamin := false ;
48491: LD_ADDR_EXP 48
48495: PUSH
48496: LD_INT 0
48498: ST_TO_ADDR
// sOil := false ;
48499: LD_ADDR_EXP 50
48503: PUSH
48504: LD_INT 0
48506: ST_TO_ADDR
// sStu := false ;
48507: LD_ADDR_EXP 54
48511: PUSH
48512: LD_INT 0
48514: ST_TO_ADDR
// sBazooka := false ;
48515: LD_ADDR_EXP 57
48519: PUSH
48520: LD_INT 0
48522: ST_TO_ADDR
// sMortar := false ;
48523: LD_ADDR_EXP 58
48527: PUSH
48528: LD_INT 0
48530: ST_TO_ADDR
// sRanger := false ;
48531: LD_ADDR_EXP 68
48535: PUSH
48536: LD_INT 0
48538: ST_TO_ADDR
// sComputer := false ;
48539: LD_ADDR_EXP 69
48543: PUSH
48544: LD_INT 0
48546: ST_TO_ADDR
// s30 := false ;
48547: LD_ADDR_EXP 70
48551: PUSH
48552: LD_INT 0
48554: ST_TO_ADDR
// s60 := false ;
48555: LD_ADDR_EXP 71
48559: PUSH
48560: LD_INT 0
48562: ST_TO_ADDR
// end ;
48563: LD_VAR 0 1
48567: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
48568: LD_INT 0
48570: PPUSH
48571: PPUSH
48572: PPUSH
48573: PPUSH
48574: PPUSH
48575: PPUSH
48576: PPUSH
// result := [ ] ;
48577: LD_ADDR_VAR 0 2
48581: PUSH
48582: EMPTY
48583: ST_TO_ADDR
// if campaign_id = 1 then
48584: LD_OWVAR 69
48588: PUSH
48589: LD_INT 1
48591: EQUAL
48592: IFFALSE 51758
// begin case mission_number of 1 :
48594: LD_OWVAR 70
48598: PUSH
48599: LD_INT 1
48601: DOUBLE
48602: EQUAL
48603: IFTRUE 48607
48605: GO 48683
48607: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
48608: LD_ADDR_VAR 0 2
48612: PUSH
48613: LD_INT 2
48615: PUSH
48616: LD_INT 4
48618: PUSH
48619: LD_INT 11
48621: PUSH
48622: LD_INT 12
48624: PUSH
48625: LD_INT 15
48627: PUSH
48628: LD_INT 16
48630: PUSH
48631: LD_INT 22
48633: PUSH
48634: LD_INT 23
48636: PUSH
48637: LD_INT 26
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 101
48653: PUSH
48654: LD_INT 102
48656: PUSH
48657: LD_INT 106
48659: PUSH
48660: LD_INT 116
48662: PUSH
48663: LD_INT 117
48665: PUSH
48666: LD_INT 118
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: ST_TO_ADDR
48681: GO 51756
48683: LD_INT 2
48685: DOUBLE
48686: EQUAL
48687: IFTRUE 48691
48689: GO 48775
48691: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
48692: LD_ADDR_VAR 0 2
48696: PUSH
48697: LD_INT 2
48699: PUSH
48700: LD_INT 4
48702: PUSH
48703: LD_INT 11
48705: PUSH
48706: LD_INT 12
48708: PUSH
48709: LD_INT 15
48711: PUSH
48712: LD_INT 16
48714: PUSH
48715: LD_INT 22
48717: PUSH
48718: LD_INT 23
48720: PUSH
48721: LD_INT 26
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 101
48737: PUSH
48738: LD_INT 102
48740: PUSH
48741: LD_INT 105
48743: PUSH
48744: LD_INT 106
48746: PUSH
48747: LD_INT 108
48749: PUSH
48750: LD_INT 116
48752: PUSH
48753: LD_INT 117
48755: PUSH
48756: LD_INT 118
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: ST_TO_ADDR
48773: GO 51756
48775: LD_INT 3
48777: DOUBLE
48778: EQUAL
48779: IFTRUE 48783
48781: GO 48871
48783: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
48784: LD_ADDR_VAR 0 2
48788: PUSH
48789: LD_INT 2
48791: PUSH
48792: LD_INT 4
48794: PUSH
48795: LD_INT 5
48797: PUSH
48798: LD_INT 11
48800: PUSH
48801: LD_INT 12
48803: PUSH
48804: LD_INT 15
48806: PUSH
48807: LD_INT 16
48809: PUSH
48810: LD_INT 22
48812: PUSH
48813: LD_INT 26
48815: PUSH
48816: LD_INT 36
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 101
48833: PUSH
48834: LD_INT 102
48836: PUSH
48837: LD_INT 105
48839: PUSH
48840: LD_INT 106
48842: PUSH
48843: LD_INT 108
48845: PUSH
48846: LD_INT 116
48848: PUSH
48849: LD_INT 117
48851: PUSH
48852: LD_INT 118
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: ST_TO_ADDR
48869: GO 51756
48871: LD_INT 4
48873: DOUBLE
48874: EQUAL
48875: IFTRUE 48879
48877: GO 48975
48879: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
48880: LD_ADDR_VAR 0 2
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: LD_INT 4
48890: PUSH
48891: LD_INT 5
48893: PUSH
48894: LD_INT 8
48896: PUSH
48897: LD_INT 11
48899: PUSH
48900: LD_INT 12
48902: PUSH
48903: LD_INT 15
48905: PUSH
48906: LD_INT 16
48908: PUSH
48909: LD_INT 22
48911: PUSH
48912: LD_INT 23
48914: PUSH
48915: LD_INT 26
48917: PUSH
48918: LD_INT 36
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 101
48937: PUSH
48938: LD_INT 102
48940: PUSH
48941: LD_INT 105
48943: PUSH
48944: LD_INT 106
48946: PUSH
48947: LD_INT 108
48949: PUSH
48950: LD_INT 116
48952: PUSH
48953: LD_INT 117
48955: PUSH
48956: LD_INT 118
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: ST_TO_ADDR
48973: GO 51756
48975: LD_INT 5
48977: DOUBLE
48978: EQUAL
48979: IFTRUE 48983
48981: GO 49095
48983: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
48984: LD_ADDR_VAR 0 2
48988: PUSH
48989: LD_INT 2
48991: PUSH
48992: LD_INT 4
48994: PUSH
48995: LD_INT 5
48997: PUSH
48998: LD_INT 6
49000: PUSH
49001: LD_INT 8
49003: PUSH
49004: LD_INT 11
49006: PUSH
49007: LD_INT 12
49009: PUSH
49010: LD_INT 15
49012: PUSH
49013: LD_INT 16
49015: PUSH
49016: LD_INT 22
49018: PUSH
49019: LD_INT 23
49021: PUSH
49022: LD_INT 25
49024: PUSH
49025: LD_INT 26
49027: PUSH
49028: LD_INT 36
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 101
49049: PUSH
49050: LD_INT 102
49052: PUSH
49053: LD_INT 105
49055: PUSH
49056: LD_INT 106
49058: PUSH
49059: LD_INT 108
49061: PUSH
49062: LD_INT 109
49064: PUSH
49065: LD_INT 112
49067: PUSH
49068: LD_INT 116
49070: PUSH
49071: LD_INT 117
49073: PUSH
49074: LD_INT 118
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: ST_TO_ADDR
49093: GO 51756
49095: LD_INT 6
49097: DOUBLE
49098: EQUAL
49099: IFTRUE 49103
49101: GO 49235
49103: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
49104: LD_ADDR_VAR 0 2
49108: PUSH
49109: LD_INT 2
49111: PUSH
49112: LD_INT 4
49114: PUSH
49115: LD_INT 5
49117: PUSH
49118: LD_INT 6
49120: PUSH
49121: LD_INT 8
49123: PUSH
49124: LD_INT 11
49126: PUSH
49127: LD_INT 12
49129: PUSH
49130: LD_INT 15
49132: PUSH
49133: LD_INT 16
49135: PUSH
49136: LD_INT 20
49138: PUSH
49139: LD_INT 21
49141: PUSH
49142: LD_INT 22
49144: PUSH
49145: LD_INT 23
49147: PUSH
49148: LD_INT 25
49150: PUSH
49151: LD_INT 26
49153: PUSH
49154: LD_INT 30
49156: PUSH
49157: LD_INT 31
49159: PUSH
49160: LD_INT 32
49162: PUSH
49163: LD_INT 36
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 101
49189: PUSH
49190: LD_INT 102
49192: PUSH
49193: LD_INT 105
49195: PUSH
49196: LD_INT 106
49198: PUSH
49199: LD_INT 108
49201: PUSH
49202: LD_INT 109
49204: PUSH
49205: LD_INT 112
49207: PUSH
49208: LD_INT 116
49210: PUSH
49211: LD_INT 117
49213: PUSH
49214: LD_INT 118
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: ST_TO_ADDR
49233: GO 51756
49235: LD_INT 7
49237: DOUBLE
49238: EQUAL
49239: IFTRUE 49243
49241: GO 49355
49243: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
49244: LD_ADDR_VAR 0 2
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: LD_INT 4
49254: PUSH
49255: LD_INT 5
49257: PUSH
49258: LD_INT 7
49260: PUSH
49261: LD_INT 11
49263: PUSH
49264: LD_INT 12
49266: PUSH
49267: LD_INT 15
49269: PUSH
49270: LD_INT 16
49272: PUSH
49273: LD_INT 20
49275: PUSH
49276: LD_INT 21
49278: PUSH
49279: LD_INT 22
49281: PUSH
49282: LD_INT 23
49284: PUSH
49285: LD_INT 25
49287: PUSH
49288: LD_INT 26
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 101
49309: PUSH
49310: LD_INT 102
49312: PUSH
49313: LD_INT 103
49315: PUSH
49316: LD_INT 105
49318: PUSH
49319: LD_INT 106
49321: PUSH
49322: LD_INT 108
49324: PUSH
49325: LD_INT 112
49327: PUSH
49328: LD_INT 116
49330: PUSH
49331: LD_INT 117
49333: PUSH
49334: LD_INT 118
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: ST_TO_ADDR
49353: GO 51756
49355: LD_INT 8
49357: DOUBLE
49358: EQUAL
49359: IFTRUE 49363
49361: GO 49503
49363: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
49364: LD_ADDR_VAR 0 2
49368: PUSH
49369: LD_INT 2
49371: PUSH
49372: LD_INT 4
49374: PUSH
49375: LD_INT 5
49377: PUSH
49378: LD_INT 6
49380: PUSH
49381: LD_INT 7
49383: PUSH
49384: LD_INT 8
49386: PUSH
49387: LD_INT 11
49389: PUSH
49390: LD_INT 12
49392: PUSH
49393: LD_INT 15
49395: PUSH
49396: LD_INT 16
49398: PUSH
49399: LD_INT 20
49401: PUSH
49402: LD_INT 21
49404: PUSH
49405: LD_INT 22
49407: PUSH
49408: LD_INT 23
49410: PUSH
49411: LD_INT 25
49413: PUSH
49414: LD_INT 26
49416: PUSH
49417: LD_INT 30
49419: PUSH
49420: LD_INT 31
49422: PUSH
49423: LD_INT 32
49425: PUSH
49426: LD_INT 36
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 101
49453: PUSH
49454: LD_INT 102
49456: PUSH
49457: LD_INT 103
49459: PUSH
49460: LD_INT 105
49462: PUSH
49463: LD_INT 106
49465: PUSH
49466: LD_INT 108
49468: PUSH
49469: LD_INT 109
49471: PUSH
49472: LD_INT 112
49474: PUSH
49475: LD_INT 116
49477: PUSH
49478: LD_INT 117
49480: PUSH
49481: LD_INT 118
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: ST_TO_ADDR
49501: GO 51756
49503: LD_INT 9
49505: DOUBLE
49506: EQUAL
49507: IFTRUE 49511
49509: GO 49659
49511: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
49512: LD_ADDR_VAR 0 2
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: LD_INT 4
49522: PUSH
49523: LD_INT 5
49525: PUSH
49526: LD_INT 6
49528: PUSH
49529: LD_INT 7
49531: PUSH
49532: LD_INT 8
49534: PUSH
49535: LD_INT 11
49537: PUSH
49538: LD_INT 12
49540: PUSH
49541: LD_INT 15
49543: PUSH
49544: LD_INT 16
49546: PUSH
49547: LD_INT 20
49549: PUSH
49550: LD_INT 21
49552: PUSH
49553: LD_INT 22
49555: PUSH
49556: LD_INT 23
49558: PUSH
49559: LD_INT 25
49561: PUSH
49562: LD_INT 26
49564: PUSH
49565: LD_INT 28
49567: PUSH
49568: LD_INT 30
49570: PUSH
49571: LD_INT 31
49573: PUSH
49574: LD_INT 32
49576: PUSH
49577: LD_INT 36
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 101
49605: PUSH
49606: LD_INT 102
49608: PUSH
49609: LD_INT 103
49611: PUSH
49612: LD_INT 105
49614: PUSH
49615: LD_INT 106
49617: PUSH
49618: LD_INT 108
49620: PUSH
49621: LD_INT 109
49623: PUSH
49624: LD_INT 112
49626: PUSH
49627: LD_INT 114
49629: PUSH
49630: LD_INT 116
49632: PUSH
49633: LD_INT 117
49635: PUSH
49636: LD_INT 118
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: ST_TO_ADDR
49657: GO 51756
49659: LD_INT 10
49661: DOUBLE
49662: EQUAL
49663: IFTRUE 49667
49665: GO 49863
49667: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
49668: LD_ADDR_VAR 0 2
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: LD_INT 4
49678: PUSH
49679: LD_INT 5
49681: PUSH
49682: LD_INT 6
49684: PUSH
49685: LD_INT 7
49687: PUSH
49688: LD_INT 8
49690: PUSH
49691: LD_INT 9
49693: PUSH
49694: LD_INT 10
49696: PUSH
49697: LD_INT 11
49699: PUSH
49700: LD_INT 12
49702: PUSH
49703: LD_INT 13
49705: PUSH
49706: LD_INT 14
49708: PUSH
49709: LD_INT 15
49711: PUSH
49712: LD_INT 16
49714: PUSH
49715: LD_INT 17
49717: PUSH
49718: LD_INT 18
49720: PUSH
49721: LD_INT 19
49723: PUSH
49724: LD_INT 20
49726: PUSH
49727: LD_INT 21
49729: PUSH
49730: LD_INT 22
49732: PUSH
49733: LD_INT 23
49735: PUSH
49736: LD_INT 24
49738: PUSH
49739: LD_INT 25
49741: PUSH
49742: LD_INT 26
49744: PUSH
49745: LD_INT 28
49747: PUSH
49748: LD_INT 30
49750: PUSH
49751: LD_INT 31
49753: PUSH
49754: LD_INT 32
49756: PUSH
49757: LD_INT 36
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 101
49793: PUSH
49794: LD_INT 102
49796: PUSH
49797: LD_INT 103
49799: PUSH
49800: LD_INT 104
49802: PUSH
49803: LD_INT 105
49805: PUSH
49806: LD_INT 106
49808: PUSH
49809: LD_INT 107
49811: PUSH
49812: LD_INT 108
49814: PUSH
49815: LD_INT 109
49817: PUSH
49818: LD_INT 110
49820: PUSH
49821: LD_INT 111
49823: PUSH
49824: LD_INT 112
49826: PUSH
49827: LD_INT 114
49829: PUSH
49830: LD_INT 116
49832: PUSH
49833: LD_INT 117
49835: PUSH
49836: LD_INT 118
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: ST_TO_ADDR
49861: GO 51756
49863: LD_INT 11
49865: DOUBLE
49866: EQUAL
49867: IFTRUE 49871
49869: GO 50075
49871: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
49872: LD_ADDR_VAR 0 2
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: LD_INT 3
49882: PUSH
49883: LD_INT 4
49885: PUSH
49886: LD_INT 5
49888: PUSH
49889: LD_INT 6
49891: PUSH
49892: LD_INT 7
49894: PUSH
49895: LD_INT 8
49897: PUSH
49898: LD_INT 9
49900: PUSH
49901: LD_INT 10
49903: PUSH
49904: LD_INT 11
49906: PUSH
49907: LD_INT 12
49909: PUSH
49910: LD_INT 13
49912: PUSH
49913: LD_INT 14
49915: PUSH
49916: LD_INT 15
49918: PUSH
49919: LD_INT 16
49921: PUSH
49922: LD_INT 17
49924: PUSH
49925: LD_INT 18
49927: PUSH
49928: LD_INT 19
49930: PUSH
49931: LD_INT 20
49933: PUSH
49934: LD_INT 21
49936: PUSH
49937: LD_INT 22
49939: PUSH
49940: LD_INT 23
49942: PUSH
49943: LD_INT 24
49945: PUSH
49946: LD_INT 25
49948: PUSH
49949: LD_INT 26
49951: PUSH
49952: LD_INT 28
49954: PUSH
49955: LD_INT 30
49957: PUSH
49958: LD_INT 31
49960: PUSH
49961: LD_INT 32
49963: PUSH
49964: LD_INT 34
49966: PUSH
49967: LD_INT 36
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 101
50005: PUSH
50006: LD_INT 102
50008: PUSH
50009: LD_INT 103
50011: PUSH
50012: LD_INT 104
50014: PUSH
50015: LD_INT 105
50017: PUSH
50018: LD_INT 106
50020: PUSH
50021: LD_INT 107
50023: PUSH
50024: LD_INT 108
50026: PUSH
50027: LD_INT 109
50029: PUSH
50030: LD_INT 110
50032: PUSH
50033: LD_INT 111
50035: PUSH
50036: LD_INT 112
50038: PUSH
50039: LD_INT 114
50041: PUSH
50042: LD_INT 116
50044: PUSH
50045: LD_INT 117
50047: PUSH
50048: LD_INT 118
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: ST_TO_ADDR
50073: GO 51756
50075: LD_INT 12
50077: DOUBLE
50078: EQUAL
50079: IFTRUE 50083
50081: GO 50303
50083: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
50084: LD_ADDR_VAR 0 2
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: LD_INT 3
50097: PUSH
50098: LD_INT 4
50100: PUSH
50101: LD_INT 5
50103: PUSH
50104: LD_INT 6
50106: PUSH
50107: LD_INT 7
50109: PUSH
50110: LD_INT 8
50112: PUSH
50113: LD_INT 9
50115: PUSH
50116: LD_INT 10
50118: PUSH
50119: LD_INT 11
50121: PUSH
50122: LD_INT 12
50124: PUSH
50125: LD_INT 13
50127: PUSH
50128: LD_INT 14
50130: PUSH
50131: LD_INT 15
50133: PUSH
50134: LD_INT 16
50136: PUSH
50137: LD_INT 17
50139: PUSH
50140: LD_INT 18
50142: PUSH
50143: LD_INT 19
50145: PUSH
50146: LD_INT 20
50148: PUSH
50149: LD_INT 21
50151: PUSH
50152: LD_INT 22
50154: PUSH
50155: LD_INT 23
50157: PUSH
50158: LD_INT 24
50160: PUSH
50161: LD_INT 25
50163: PUSH
50164: LD_INT 26
50166: PUSH
50167: LD_INT 27
50169: PUSH
50170: LD_INT 28
50172: PUSH
50173: LD_INT 30
50175: PUSH
50176: LD_INT 31
50178: PUSH
50179: LD_INT 32
50181: PUSH
50182: LD_INT 33
50184: PUSH
50185: LD_INT 34
50187: PUSH
50188: LD_INT 36
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 101
50229: PUSH
50230: LD_INT 102
50232: PUSH
50233: LD_INT 103
50235: PUSH
50236: LD_INT 104
50238: PUSH
50239: LD_INT 105
50241: PUSH
50242: LD_INT 106
50244: PUSH
50245: LD_INT 107
50247: PUSH
50248: LD_INT 108
50250: PUSH
50251: LD_INT 109
50253: PUSH
50254: LD_INT 110
50256: PUSH
50257: LD_INT 111
50259: PUSH
50260: LD_INT 112
50262: PUSH
50263: LD_INT 113
50265: PUSH
50266: LD_INT 114
50268: PUSH
50269: LD_INT 116
50271: PUSH
50272: LD_INT 117
50274: PUSH
50275: LD_INT 118
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: ST_TO_ADDR
50301: GO 51756
50303: LD_INT 13
50305: DOUBLE
50306: EQUAL
50307: IFTRUE 50311
50309: GO 50519
50311: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
50312: LD_ADDR_VAR 0 2
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: LD_INT 3
50325: PUSH
50326: LD_INT 4
50328: PUSH
50329: LD_INT 5
50331: PUSH
50332: LD_INT 8
50334: PUSH
50335: LD_INT 9
50337: PUSH
50338: LD_INT 10
50340: PUSH
50341: LD_INT 11
50343: PUSH
50344: LD_INT 12
50346: PUSH
50347: LD_INT 14
50349: PUSH
50350: LD_INT 15
50352: PUSH
50353: LD_INT 16
50355: PUSH
50356: LD_INT 17
50358: PUSH
50359: LD_INT 18
50361: PUSH
50362: LD_INT 19
50364: PUSH
50365: LD_INT 20
50367: PUSH
50368: LD_INT 21
50370: PUSH
50371: LD_INT 22
50373: PUSH
50374: LD_INT 23
50376: PUSH
50377: LD_INT 24
50379: PUSH
50380: LD_INT 25
50382: PUSH
50383: LD_INT 26
50385: PUSH
50386: LD_INT 27
50388: PUSH
50389: LD_INT 28
50391: PUSH
50392: LD_INT 30
50394: PUSH
50395: LD_INT 31
50397: PUSH
50398: LD_INT 32
50400: PUSH
50401: LD_INT 33
50403: PUSH
50404: LD_INT 34
50406: PUSH
50407: LD_INT 36
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 101
50445: PUSH
50446: LD_INT 102
50448: PUSH
50449: LD_INT 103
50451: PUSH
50452: LD_INT 104
50454: PUSH
50455: LD_INT 105
50457: PUSH
50458: LD_INT 106
50460: PUSH
50461: LD_INT 107
50463: PUSH
50464: LD_INT 108
50466: PUSH
50467: LD_INT 109
50469: PUSH
50470: LD_INT 110
50472: PUSH
50473: LD_INT 111
50475: PUSH
50476: LD_INT 112
50478: PUSH
50479: LD_INT 113
50481: PUSH
50482: LD_INT 114
50484: PUSH
50485: LD_INT 116
50487: PUSH
50488: LD_INT 117
50490: PUSH
50491: LD_INT 118
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: ST_TO_ADDR
50517: GO 51756
50519: LD_INT 14
50521: DOUBLE
50522: EQUAL
50523: IFTRUE 50527
50525: GO 50751
50527: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
50528: LD_ADDR_VAR 0 2
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: LD_INT 3
50541: PUSH
50542: LD_INT 4
50544: PUSH
50545: LD_INT 5
50547: PUSH
50548: LD_INT 6
50550: PUSH
50551: LD_INT 7
50553: PUSH
50554: LD_INT 8
50556: PUSH
50557: LD_INT 9
50559: PUSH
50560: LD_INT 10
50562: PUSH
50563: LD_INT 11
50565: PUSH
50566: LD_INT 12
50568: PUSH
50569: LD_INT 13
50571: PUSH
50572: LD_INT 14
50574: PUSH
50575: LD_INT 15
50577: PUSH
50578: LD_INT 16
50580: PUSH
50581: LD_INT 17
50583: PUSH
50584: LD_INT 18
50586: PUSH
50587: LD_INT 19
50589: PUSH
50590: LD_INT 20
50592: PUSH
50593: LD_INT 21
50595: PUSH
50596: LD_INT 22
50598: PUSH
50599: LD_INT 23
50601: PUSH
50602: LD_INT 24
50604: PUSH
50605: LD_INT 25
50607: PUSH
50608: LD_INT 26
50610: PUSH
50611: LD_INT 27
50613: PUSH
50614: LD_INT 28
50616: PUSH
50617: LD_INT 29
50619: PUSH
50620: LD_INT 30
50622: PUSH
50623: LD_INT 31
50625: PUSH
50626: LD_INT 32
50628: PUSH
50629: LD_INT 33
50631: PUSH
50632: LD_INT 34
50634: PUSH
50635: LD_INT 36
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 101
50677: PUSH
50678: LD_INT 102
50680: PUSH
50681: LD_INT 103
50683: PUSH
50684: LD_INT 104
50686: PUSH
50687: LD_INT 105
50689: PUSH
50690: LD_INT 106
50692: PUSH
50693: LD_INT 107
50695: PUSH
50696: LD_INT 108
50698: PUSH
50699: LD_INT 109
50701: PUSH
50702: LD_INT 110
50704: PUSH
50705: LD_INT 111
50707: PUSH
50708: LD_INT 112
50710: PUSH
50711: LD_INT 113
50713: PUSH
50714: LD_INT 114
50716: PUSH
50717: LD_INT 116
50719: PUSH
50720: LD_INT 117
50722: PUSH
50723: LD_INT 118
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: ST_TO_ADDR
50749: GO 51756
50751: LD_INT 15
50753: DOUBLE
50754: EQUAL
50755: IFTRUE 50759
50757: GO 50983
50759: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
50760: LD_ADDR_VAR 0 2
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 2
50770: PUSH
50771: LD_INT 3
50773: PUSH
50774: LD_INT 4
50776: PUSH
50777: LD_INT 5
50779: PUSH
50780: LD_INT 6
50782: PUSH
50783: LD_INT 7
50785: PUSH
50786: LD_INT 8
50788: PUSH
50789: LD_INT 9
50791: PUSH
50792: LD_INT 10
50794: PUSH
50795: LD_INT 11
50797: PUSH
50798: LD_INT 12
50800: PUSH
50801: LD_INT 13
50803: PUSH
50804: LD_INT 14
50806: PUSH
50807: LD_INT 15
50809: PUSH
50810: LD_INT 16
50812: PUSH
50813: LD_INT 17
50815: PUSH
50816: LD_INT 18
50818: PUSH
50819: LD_INT 19
50821: PUSH
50822: LD_INT 20
50824: PUSH
50825: LD_INT 21
50827: PUSH
50828: LD_INT 22
50830: PUSH
50831: LD_INT 23
50833: PUSH
50834: LD_INT 24
50836: PUSH
50837: LD_INT 25
50839: PUSH
50840: LD_INT 26
50842: PUSH
50843: LD_INT 27
50845: PUSH
50846: LD_INT 28
50848: PUSH
50849: LD_INT 29
50851: PUSH
50852: LD_INT 30
50854: PUSH
50855: LD_INT 31
50857: PUSH
50858: LD_INT 32
50860: PUSH
50861: LD_INT 33
50863: PUSH
50864: LD_INT 34
50866: PUSH
50867: LD_INT 36
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 101
50909: PUSH
50910: LD_INT 102
50912: PUSH
50913: LD_INT 103
50915: PUSH
50916: LD_INT 104
50918: PUSH
50919: LD_INT 105
50921: PUSH
50922: LD_INT 106
50924: PUSH
50925: LD_INT 107
50927: PUSH
50928: LD_INT 108
50930: PUSH
50931: LD_INT 109
50933: PUSH
50934: LD_INT 110
50936: PUSH
50937: LD_INT 111
50939: PUSH
50940: LD_INT 112
50942: PUSH
50943: LD_INT 113
50945: PUSH
50946: LD_INT 114
50948: PUSH
50949: LD_INT 116
50951: PUSH
50952: LD_INT 117
50954: PUSH
50955: LD_INT 118
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: ST_TO_ADDR
50981: GO 51756
50983: LD_INT 16
50985: DOUBLE
50986: EQUAL
50987: IFTRUE 50991
50989: GO 51127
50991: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
50992: LD_ADDR_VAR 0 2
50996: PUSH
50997: LD_INT 2
50999: PUSH
51000: LD_INT 4
51002: PUSH
51003: LD_INT 5
51005: PUSH
51006: LD_INT 7
51008: PUSH
51009: LD_INT 11
51011: PUSH
51012: LD_INT 12
51014: PUSH
51015: LD_INT 15
51017: PUSH
51018: LD_INT 16
51020: PUSH
51021: LD_INT 20
51023: PUSH
51024: LD_INT 21
51026: PUSH
51027: LD_INT 22
51029: PUSH
51030: LD_INT 23
51032: PUSH
51033: LD_INT 25
51035: PUSH
51036: LD_INT 26
51038: PUSH
51039: LD_INT 30
51041: PUSH
51042: LD_INT 31
51044: PUSH
51045: LD_INT 32
51047: PUSH
51048: LD_INT 33
51050: PUSH
51051: LD_INT 34
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 101
51077: PUSH
51078: LD_INT 102
51080: PUSH
51081: LD_INT 103
51083: PUSH
51084: LD_INT 106
51086: PUSH
51087: LD_INT 108
51089: PUSH
51090: LD_INT 112
51092: PUSH
51093: LD_INT 113
51095: PUSH
51096: LD_INT 114
51098: PUSH
51099: LD_INT 116
51101: PUSH
51102: LD_INT 117
51104: PUSH
51105: LD_INT 118
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: ST_TO_ADDR
51125: GO 51756
51127: LD_INT 17
51129: DOUBLE
51130: EQUAL
51131: IFTRUE 51135
51133: GO 51359
51135: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
51136: LD_ADDR_VAR 0 2
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: LD_INT 2
51146: PUSH
51147: LD_INT 3
51149: PUSH
51150: LD_INT 4
51152: PUSH
51153: LD_INT 5
51155: PUSH
51156: LD_INT 6
51158: PUSH
51159: LD_INT 7
51161: PUSH
51162: LD_INT 8
51164: PUSH
51165: LD_INT 9
51167: PUSH
51168: LD_INT 10
51170: PUSH
51171: LD_INT 11
51173: PUSH
51174: LD_INT 12
51176: PUSH
51177: LD_INT 13
51179: PUSH
51180: LD_INT 14
51182: PUSH
51183: LD_INT 15
51185: PUSH
51186: LD_INT 16
51188: PUSH
51189: LD_INT 17
51191: PUSH
51192: LD_INT 18
51194: PUSH
51195: LD_INT 19
51197: PUSH
51198: LD_INT 20
51200: PUSH
51201: LD_INT 21
51203: PUSH
51204: LD_INT 22
51206: PUSH
51207: LD_INT 23
51209: PUSH
51210: LD_INT 24
51212: PUSH
51213: LD_INT 25
51215: PUSH
51216: LD_INT 26
51218: PUSH
51219: LD_INT 27
51221: PUSH
51222: LD_INT 28
51224: PUSH
51225: LD_INT 29
51227: PUSH
51228: LD_INT 30
51230: PUSH
51231: LD_INT 31
51233: PUSH
51234: LD_INT 32
51236: PUSH
51237: LD_INT 33
51239: PUSH
51240: LD_INT 34
51242: PUSH
51243: LD_INT 36
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 101
51285: PUSH
51286: LD_INT 102
51288: PUSH
51289: LD_INT 103
51291: PUSH
51292: LD_INT 104
51294: PUSH
51295: LD_INT 105
51297: PUSH
51298: LD_INT 106
51300: PUSH
51301: LD_INT 107
51303: PUSH
51304: LD_INT 108
51306: PUSH
51307: LD_INT 109
51309: PUSH
51310: LD_INT 110
51312: PUSH
51313: LD_INT 111
51315: PUSH
51316: LD_INT 112
51318: PUSH
51319: LD_INT 113
51321: PUSH
51322: LD_INT 114
51324: PUSH
51325: LD_INT 116
51327: PUSH
51328: LD_INT 117
51330: PUSH
51331: LD_INT 118
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: ST_TO_ADDR
51357: GO 51756
51359: LD_INT 18
51361: DOUBLE
51362: EQUAL
51363: IFTRUE 51367
51365: GO 51515
51367: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
51368: LD_ADDR_VAR 0 2
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: LD_INT 4
51378: PUSH
51379: LD_INT 5
51381: PUSH
51382: LD_INT 7
51384: PUSH
51385: LD_INT 11
51387: PUSH
51388: LD_INT 12
51390: PUSH
51391: LD_INT 15
51393: PUSH
51394: LD_INT 16
51396: PUSH
51397: LD_INT 20
51399: PUSH
51400: LD_INT 21
51402: PUSH
51403: LD_INT 22
51405: PUSH
51406: LD_INT 23
51408: PUSH
51409: LD_INT 25
51411: PUSH
51412: LD_INT 26
51414: PUSH
51415: LD_INT 30
51417: PUSH
51418: LD_INT 31
51420: PUSH
51421: LD_INT 32
51423: PUSH
51424: LD_INT 33
51426: PUSH
51427: LD_INT 34
51429: PUSH
51430: LD_INT 35
51432: PUSH
51433: LD_INT 36
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 101
51461: PUSH
51462: LD_INT 102
51464: PUSH
51465: LD_INT 103
51467: PUSH
51468: LD_INT 106
51470: PUSH
51471: LD_INT 108
51473: PUSH
51474: LD_INT 112
51476: PUSH
51477: LD_INT 113
51479: PUSH
51480: LD_INT 114
51482: PUSH
51483: LD_INT 115
51485: PUSH
51486: LD_INT 116
51488: PUSH
51489: LD_INT 117
51491: PUSH
51492: LD_INT 118
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: ST_TO_ADDR
51513: GO 51756
51515: LD_INT 19
51517: DOUBLE
51518: EQUAL
51519: IFTRUE 51523
51521: GO 51755
51523: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
51524: LD_ADDR_VAR 0 2
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: LD_INT 3
51537: PUSH
51538: LD_INT 4
51540: PUSH
51541: LD_INT 5
51543: PUSH
51544: LD_INT 6
51546: PUSH
51547: LD_INT 7
51549: PUSH
51550: LD_INT 8
51552: PUSH
51553: LD_INT 9
51555: PUSH
51556: LD_INT 10
51558: PUSH
51559: LD_INT 11
51561: PUSH
51562: LD_INT 12
51564: PUSH
51565: LD_INT 13
51567: PUSH
51568: LD_INT 14
51570: PUSH
51571: LD_INT 15
51573: PUSH
51574: LD_INT 16
51576: PUSH
51577: LD_INT 17
51579: PUSH
51580: LD_INT 18
51582: PUSH
51583: LD_INT 19
51585: PUSH
51586: LD_INT 20
51588: PUSH
51589: LD_INT 21
51591: PUSH
51592: LD_INT 22
51594: PUSH
51595: LD_INT 23
51597: PUSH
51598: LD_INT 24
51600: PUSH
51601: LD_INT 25
51603: PUSH
51604: LD_INT 26
51606: PUSH
51607: LD_INT 27
51609: PUSH
51610: LD_INT 28
51612: PUSH
51613: LD_INT 29
51615: PUSH
51616: LD_INT 30
51618: PUSH
51619: LD_INT 31
51621: PUSH
51622: LD_INT 32
51624: PUSH
51625: LD_INT 33
51627: PUSH
51628: LD_INT 34
51630: PUSH
51631: LD_INT 35
51633: PUSH
51634: LD_INT 36
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 101
51677: PUSH
51678: LD_INT 102
51680: PUSH
51681: LD_INT 103
51683: PUSH
51684: LD_INT 104
51686: PUSH
51687: LD_INT 105
51689: PUSH
51690: LD_INT 106
51692: PUSH
51693: LD_INT 107
51695: PUSH
51696: LD_INT 108
51698: PUSH
51699: LD_INT 109
51701: PUSH
51702: LD_INT 110
51704: PUSH
51705: LD_INT 111
51707: PUSH
51708: LD_INT 112
51710: PUSH
51711: LD_INT 113
51713: PUSH
51714: LD_INT 114
51716: PUSH
51717: LD_INT 115
51719: PUSH
51720: LD_INT 116
51722: PUSH
51723: LD_INT 117
51725: PUSH
51726: LD_INT 118
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: ST_TO_ADDR
51753: GO 51756
51755: POP
// end else
51756: GO 51987
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
51758: LD_ADDR_VAR 0 2
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: LD_INT 2
51768: PUSH
51769: LD_INT 3
51771: PUSH
51772: LD_INT 4
51774: PUSH
51775: LD_INT 5
51777: PUSH
51778: LD_INT 6
51780: PUSH
51781: LD_INT 7
51783: PUSH
51784: LD_INT 8
51786: PUSH
51787: LD_INT 9
51789: PUSH
51790: LD_INT 10
51792: PUSH
51793: LD_INT 11
51795: PUSH
51796: LD_INT 12
51798: PUSH
51799: LD_INT 13
51801: PUSH
51802: LD_INT 14
51804: PUSH
51805: LD_INT 15
51807: PUSH
51808: LD_INT 16
51810: PUSH
51811: LD_INT 17
51813: PUSH
51814: LD_INT 18
51816: PUSH
51817: LD_INT 19
51819: PUSH
51820: LD_INT 20
51822: PUSH
51823: LD_INT 21
51825: PUSH
51826: LD_INT 22
51828: PUSH
51829: LD_INT 23
51831: PUSH
51832: LD_INT 24
51834: PUSH
51835: LD_INT 25
51837: PUSH
51838: LD_INT 26
51840: PUSH
51841: LD_INT 27
51843: PUSH
51844: LD_INT 28
51846: PUSH
51847: LD_INT 29
51849: PUSH
51850: LD_INT 30
51852: PUSH
51853: LD_INT 31
51855: PUSH
51856: LD_INT 32
51858: PUSH
51859: LD_INT 33
51861: PUSH
51862: LD_INT 34
51864: PUSH
51865: LD_INT 35
51867: PUSH
51868: LD_INT 36
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 101
51911: PUSH
51912: LD_INT 102
51914: PUSH
51915: LD_INT 103
51917: PUSH
51918: LD_INT 104
51920: PUSH
51921: LD_INT 105
51923: PUSH
51924: LD_INT 106
51926: PUSH
51927: LD_INT 107
51929: PUSH
51930: LD_INT 108
51932: PUSH
51933: LD_INT 109
51935: PUSH
51936: LD_INT 110
51938: PUSH
51939: LD_INT 111
51941: PUSH
51942: LD_INT 112
51944: PUSH
51945: LD_INT 113
51947: PUSH
51948: LD_INT 114
51950: PUSH
51951: LD_INT 115
51953: PUSH
51954: LD_INT 116
51956: PUSH
51957: LD_INT 117
51959: PUSH
51960: LD_INT 118
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: ST_TO_ADDR
// if result then
51987: LD_VAR 0 2
51991: IFFALSE 52777
// begin normal :=  ;
51993: LD_ADDR_VAR 0 5
51997: PUSH
51998: LD_STRING 
52000: ST_TO_ADDR
// hardcore :=  ;
52001: LD_ADDR_VAR 0 6
52005: PUSH
52006: LD_STRING 
52008: ST_TO_ADDR
// active :=  ;
52009: LD_ADDR_VAR 0 7
52013: PUSH
52014: LD_STRING 
52016: ST_TO_ADDR
// for i = 1 to normalCounter do
52017: LD_ADDR_VAR 0 8
52021: PUSH
52022: DOUBLE
52023: LD_INT 1
52025: DEC
52026: ST_TO_ADDR
52027: LD_EXP 16
52031: PUSH
52032: FOR_TO
52033: IFFALSE 52134
// begin tmp := 0 ;
52035: LD_ADDR_VAR 0 3
52039: PUSH
52040: LD_STRING 0
52042: ST_TO_ADDR
// if result [ 1 ] then
52043: LD_VAR 0 2
52047: PUSH
52048: LD_INT 1
52050: ARRAY
52051: IFFALSE 52116
// if result [ 1 ] [ 1 ] = i then
52053: LD_VAR 0 2
52057: PUSH
52058: LD_INT 1
52060: ARRAY
52061: PUSH
52062: LD_INT 1
52064: ARRAY
52065: PUSH
52066: LD_VAR 0 8
52070: EQUAL
52071: IFFALSE 52116
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
52073: LD_ADDR_VAR 0 2
52077: PUSH
52078: LD_VAR 0 2
52082: PPUSH
52083: LD_INT 1
52085: PPUSH
52086: LD_VAR 0 2
52090: PUSH
52091: LD_INT 1
52093: ARRAY
52094: PPUSH
52095: LD_INT 1
52097: PPUSH
52098: CALL_OW 3
52102: PPUSH
52103: CALL_OW 1
52107: ST_TO_ADDR
// tmp := 1 ;
52108: LD_ADDR_VAR 0 3
52112: PUSH
52113: LD_STRING 1
52115: ST_TO_ADDR
// end ; normal := normal & tmp ;
52116: LD_ADDR_VAR 0 5
52120: PUSH
52121: LD_VAR 0 5
52125: PUSH
52126: LD_VAR 0 3
52130: STR
52131: ST_TO_ADDR
// end ;
52132: GO 52032
52134: POP
52135: POP
// for i = 1 to hardcoreCounter do
52136: LD_ADDR_VAR 0 8
52140: PUSH
52141: DOUBLE
52142: LD_INT 1
52144: DEC
52145: ST_TO_ADDR
52146: LD_EXP 17
52150: PUSH
52151: FOR_TO
52152: IFFALSE 52257
// begin tmp := 0 ;
52154: LD_ADDR_VAR 0 3
52158: PUSH
52159: LD_STRING 0
52161: ST_TO_ADDR
// if result [ 2 ] then
52162: LD_VAR 0 2
52166: PUSH
52167: LD_INT 2
52169: ARRAY
52170: IFFALSE 52239
// if result [ 2 ] [ 1 ] = 100 + i then
52172: LD_VAR 0 2
52176: PUSH
52177: LD_INT 2
52179: ARRAY
52180: PUSH
52181: LD_INT 1
52183: ARRAY
52184: PUSH
52185: LD_INT 100
52187: PUSH
52188: LD_VAR 0 8
52192: PLUS
52193: EQUAL
52194: IFFALSE 52239
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
52196: LD_ADDR_VAR 0 2
52200: PUSH
52201: LD_VAR 0 2
52205: PPUSH
52206: LD_INT 2
52208: PPUSH
52209: LD_VAR 0 2
52213: PUSH
52214: LD_INT 2
52216: ARRAY
52217: PPUSH
52218: LD_INT 1
52220: PPUSH
52221: CALL_OW 3
52225: PPUSH
52226: CALL_OW 1
52230: ST_TO_ADDR
// tmp := 1 ;
52231: LD_ADDR_VAR 0 3
52235: PUSH
52236: LD_STRING 1
52238: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
52239: LD_ADDR_VAR 0 6
52243: PUSH
52244: LD_VAR 0 6
52248: PUSH
52249: LD_VAR 0 3
52253: STR
52254: ST_TO_ADDR
// end ;
52255: GO 52151
52257: POP
52258: POP
// if isGameLoad then
52259: LD_VAR 0 1
52263: IFFALSE 52738
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
52265: LD_ADDR_VAR 0 4
52269: PUSH
52270: LD_EXP 20
52274: PUSH
52275: LD_EXP 19
52279: PUSH
52280: LD_EXP 21
52284: PUSH
52285: LD_EXP 18
52289: PUSH
52290: LD_EXP 22
52294: PUSH
52295: LD_EXP 23
52299: PUSH
52300: LD_EXP 24
52304: PUSH
52305: LD_EXP 25
52309: PUSH
52310: LD_EXP 26
52314: PUSH
52315: LD_EXP 27
52319: PUSH
52320: LD_EXP 28
52324: PUSH
52325: LD_EXP 29
52329: PUSH
52330: LD_EXP 30
52334: PUSH
52335: LD_EXP 31
52339: PUSH
52340: LD_EXP 39
52344: PUSH
52345: LD_EXP 40
52349: PUSH
52350: LD_EXP 41
52354: PUSH
52355: LD_EXP 42
52359: PUSH
52360: LD_EXP 44
52364: PUSH
52365: LD_EXP 45
52369: PUSH
52370: LD_EXP 46
52374: PUSH
52375: LD_EXP 49
52379: PUSH
52380: LD_EXP 51
52384: PUSH
52385: LD_EXP 52
52389: PUSH
52390: LD_EXP 53
52394: PUSH
52395: LD_EXP 55
52399: PUSH
52400: LD_EXP 56
52404: PUSH
52405: LD_EXP 59
52409: PUSH
52410: LD_EXP 60
52414: PUSH
52415: LD_EXP 61
52419: PUSH
52420: LD_EXP 62
52424: PUSH
52425: LD_EXP 63
52429: PUSH
52430: LD_EXP 64
52434: PUSH
52435: LD_EXP 65
52439: PUSH
52440: LD_EXP 66
52444: PUSH
52445: LD_EXP 67
52449: PUSH
52450: LD_EXP 32
52454: PUSH
52455: LD_EXP 33
52459: PUSH
52460: LD_EXP 36
52464: PUSH
52465: LD_EXP 37
52469: PUSH
52470: LD_EXP 38
52474: PUSH
52475: LD_EXP 34
52479: PUSH
52480: LD_EXP 35
52484: PUSH
52485: LD_EXP 43
52489: PUSH
52490: LD_EXP 47
52494: PUSH
52495: LD_EXP 48
52499: PUSH
52500: LD_EXP 50
52504: PUSH
52505: LD_EXP 54
52509: PUSH
52510: LD_EXP 57
52514: PUSH
52515: LD_EXP 58
52519: PUSH
52520: LD_EXP 68
52524: PUSH
52525: LD_EXP 69
52529: PUSH
52530: LD_EXP 70
52534: PUSH
52535: LD_EXP 71
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: ST_TO_ADDR
// tmp :=  ;
52596: LD_ADDR_VAR 0 3
52600: PUSH
52601: LD_STRING 
52603: ST_TO_ADDR
// for i = 1 to normalCounter do
52604: LD_ADDR_VAR 0 8
52608: PUSH
52609: DOUBLE
52610: LD_INT 1
52612: DEC
52613: ST_TO_ADDR
52614: LD_EXP 16
52618: PUSH
52619: FOR_TO
52620: IFFALSE 52656
// begin if flags [ i ] then
52622: LD_VAR 0 4
52626: PUSH
52627: LD_VAR 0 8
52631: ARRAY
52632: IFFALSE 52654
// tmp := tmp & i & ; ;
52634: LD_ADDR_VAR 0 3
52638: PUSH
52639: LD_VAR 0 3
52643: PUSH
52644: LD_VAR 0 8
52648: STR
52649: PUSH
52650: LD_STRING ;
52652: STR
52653: ST_TO_ADDR
// end ;
52654: GO 52619
52656: POP
52657: POP
// for i = 1 to hardcoreCounter do
52658: LD_ADDR_VAR 0 8
52662: PUSH
52663: DOUBLE
52664: LD_INT 1
52666: DEC
52667: ST_TO_ADDR
52668: LD_EXP 17
52672: PUSH
52673: FOR_TO
52674: IFFALSE 52720
// begin if flags [ normalCounter + i ] then
52676: LD_VAR 0 4
52680: PUSH
52681: LD_EXP 16
52685: PUSH
52686: LD_VAR 0 8
52690: PLUS
52691: ARRAY
52692: IFFALSE 52718
// tmp := tmp & ( 100 + i ) & ; ;
52694: LD_ADDR_VAR 0 3
52698: PUSH
52699: LD_VAR 0 3
52703: PUSH
52704: LD_INT 100
52706: PUSH
52707: LD_VAR 0 8
52711: PLUS
52712: STR
52713: PUSH
52714: LD_STRING ;
52716: STR
52717: ST_TO_ADDR
// end ;
52718: GO 52673
52720: POP
52721: POP
// if tmp then
52722: LD_VAR 0 3
52726: IFFALSE 52738
// active := tmp ;
52728: LD_ADDR_VAR 0 7
52732: PUSH
52733: LD_VAR 0 3
52737: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
52738: LD_STRING getStreamItemsFromMission("
52740: PUSH
52741: LD_VAR 0 5
52745: STR
52746: PUSH
52747: LD_STRING ","
52749: STR
52750: PUSH
52751: LD_VAR 0 6
52755: STR
52756: PUSH
52757: LD_STRING ","
52759: STR
52760: PUSH
52761: LD_VAR 0 7
52765: STR
52766: PUSH
52767: LD_STRING ")
52769: STR
52770: PPUSH
52771: CALL_OW 559
// end else
52775: GO 52784
// ToLua ( getStreamItemsFromMission("","","") ) ;
52777: LD_STRING getStreamItemsFromMission("","","")
52779: PPUSH
52780: CALL_OW 559
// end ;
52784: LD_VAR 0 2
52788: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
52789: LD_EXP 15
52793: PUSH
52794: LD_EXP 20
52798: AND
52799: IFFALSE 52923
52801: GO 52803
52803: DISABLE
52804: LD_INT 0
52806: PPUSH
52807: PPUSH
// begin enable ;
52808: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
52809: LD_ADDR_VAR 0 2
52813: PUSH
52814: LD_INT 22
52816: PUSH
52817: LD_OWVAR 2
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: LD_INT 34
52831: PUSH
52832: LD_INT 7
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 34
52841: PUSH
52842: LD_INT 45
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 34
52851: PUSH
52852: LD_INT 28
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 34
52861: PUSH
52862: LD_INT 47
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PPUSH
52880: CALL_OW 69
52884: ST_TO_ADDR
// if not tmp then
52885: LD_VAR 0 2
52889: NOT
52890: IFFALSE 52894
// exit ;
52892: GO 52923
// for i in tmp do
52894: LD_ADDR_VAR 0 1
52898: PUSH
52899: LD_VAR 0 2
52903: PUSH
52904: FOR_IN
52905: IFFALSE 52921
// begin SetLives ( i , 0 ) ;
52907: LD_VAR 0 1
52911: PPUSH
52912: LD_INT 0
52914: PPUSH
52915: CALL_OW 234
// end ;
52919: GO 52904
52921: POP
52922: POP
// end ;
52923: PPOPN 2
52925: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
52926: LD_EXP 15
52930: PUSH
52931: LD_EXP 21
52935: AND
52936: IFFALSE 53020
52938: GO 52940
52940: DISABLE
52941: LD_INT 0
52943: PPUSH
52944: PPUSH
// begin enable ;
52945: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
52946: LD_ADDR_VAR 0 2
52950: PUSH
52951: LD_INT 22
52953: PUSH
52954: LD_OWVAR 2
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 32
52965: PUSH
52966: LD_INT 3
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PPUSH
52977: CALL_OW 69
52981: ST_TO_ADDR
// if not tmp then
52982: LD_VAR 0 2
52986: NOT
52987: IFFALSE 52991
// exit ;
52989: GO 53020
// for i in tmp do
52991: LD_ADDR_VAR 0 1
52995: PUSH
52996: LD_VAR 0 2
53000: PUSH
53001: FOR_IN
53002: IFFALSE 53018
// begin SetLives ( i , 0 ) ;
53004: LD_VAR 0 1
53008: PPUSH
53009: LD_INT 0
53011: PPUSH
53012: CALL_OW 234
// end ;
53016: GO 53001
53018: POP
53019: POP
// end ;
53020: PPOPN 2
53022: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
53023: LD_EXP 15
53027: PUSH
53028: LD_EXP 18
53032: AND
53033: IFFALSE 53126
53035: GO 53037
53037: DISABLE
53038: LD_INT 0
53040: PPUSH
// begin enable ;
53041: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
53042: LD_ADDR_VAR 0 1
53046: PUSH
53047: LD_INT 22
53049: PUSH
53050: LD_OWVAR 2
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: LD_INT 25
53064: PUSH
53065: LD_INT 5
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 25
53074: PUSH
53075: LD_INT 9
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 25
53084: PUSH
53085: LD_INT 8
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PPUSH
53102: CALL_OW 69
53106: PUSH
53107: FOR_IN
53108: IFFALSE 53124
// begin SetClass ( i , 1 ) ;
53110: LD_VAR 0 1
53114: PPUSH
53115: LD_INT 1
53117: PPUSH
53118: CALL_OW 336
// end ;
53122: GO 53107
53124: POP
53125: POP
// end ;
53126: PPOPN 1
53128: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
53129: LD_EXP 15
53133: PUSH
53134: LD_EXP 19
53138: AND
53139: PUSH
53140: LD_OWVAR 65
53144: PUSH
53145: LD_INT 7
53147: LESS
53148: AND
53149: IFFALSE 53163
53151: GO 53153
53153: DISABLE
// begin enable ;
53154: ENABLE
// game_speed := 7 ;
53155: LD_ADDR_OWVAR 65
53159: PUSH
53160: LD_INT 7
53162: ST_TO_ADDR
// end ;
53163: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
53164: LD_EXP 15
53168: PUSH
53169: LD_EXP 22
53173: AND
53174: IFFALSE 53376
53176: GO 53178
53178: DISABLE
53179: LD_INT 0
53181: PPUSH
53182: PPUSH
53183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
53184: LD_ADDR_VAR 0 3
53188: PUSH
53189: LD_INT 81
53191: PUSH
53192: LD_OWVAR 2
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 21
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PPUSH
53215: CALL_OW 69
53219: ST_TO_ADDR
// if not tmp then
53220: LD_VAR 0 3
53224: NOT
53225: IFFALSE 53229
// exit ;
53227: GO 53376
// if tmp > 5 then
53229: LD_VAR 0 3
53233: PUSH
53234: LD_INT 5
53236: GREATER
53237: IFFALSE 53249
// k := 5 else
53239: LD_ADDR_VAR 0 2
53243: PUSH
53244: LD_INT 5
53246: ST_TO_ADDR
53247: GO 53259
// k := tmp ;
53249: LD_ADDR_VAR 0 2
53253: PUSH
53254: LD_VAR 0 3
53258: ST_TO_ADDR
// for i := 1 to k do
53259: LD_ADDR_VAR 0 1
53263: PUSH
53264: DOUBLE
53265: LD_INT 1
53267: DEC
53268: ST_TO_ADDR
53269: LD_VAR 0 2
53273: PUSH
53274: FOR_TO
53275: IFFALSE 53374
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
53277: LD_VAR 0 3
53281: PUSH
53282: LD_VAR 0 1
53286: ARRAY
53287: PPUSH
53288: LD_VAR 0 1
53292: PUSH
53293: LD_INT 4
53295: MOD
53296: PUSH
53297: LD_INT 1
53299: PLUS
53300: PPUSH
53301: CALL_OW 259
53305: PUSH
53306: LD_INT 10
53308: LESS
53309: IFFALSE 53372
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
53311: LD_VAR 0 3
53315: PUSH
53316: LD_VAR 0 1
53320: ARRAY
53321: PPUSH
53322: LD_VAR 0 1
53326: PUSH
53327: LD_INT 4
53329: MOD
53330: PUSH
53331: LD_INT 1
53333: PLUS
53334: PPUSH
53335: LD_VAR 0 3
53339: PUSH
53340: LD_VAR 0 1
53344: ARRAY
53345: PPUSH
53346: LD_VAR 0 1
53350: PUSH
53351: LD_INT 4
53353: MOD
53354: PUSH
53355: LD_INT 1
53357: PLUS
53358: PPUSH
53359: CALL_OW 259
53363: PUSH
53364: LD_INT 1
53366: PLUS
53367: PPUSH
53368: CALL_OW 237
53372: GO 53274
53374: POP
53375: POP
// end ;
53376: PPOPN 3
53378: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
53379: LD_EXP 15
53383: PUSH
53384: LD_EXP 23
53388: AND
53389: IFFALSE 53409
53391: GO 53393
53393: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
53394: LD_INT 4
53396: PPUSH
53397: LD_OWVAR 2
53401: PPUSH
53402: LD_INT 0
53404: PPUSH
53405: CALL_OW 324
53409: END
// every 0 0$1 trigger StreamModeActive and sShovel do
53410: LD_EXP 15
53414: PUSH
53415: LD_EXP 52
53419: AND
53420: IFFALSE 53440
53422: GO 53424
53424: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
53425: LD_INT 19
53427: PPUSH
53428: LD_OWVAR 2
53432: PPUSH
53433: LD_INT 0
53435: PPUSH
53436: CALL_OW 324
53440: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
53441: LD_EXP 15
53445: PUSH
53446: LD_EXP 24
53450: AND
53451: IFFALSE 53553
53453: GO 53455
53455: DISABLE
53456: LD_INT 0
53458: PPUSH
53459: PPUSH
// begin enable ;
53460: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
53461: LD_ADDR_VAR 0 2
53465: PUSH
53466: LD_INT 22
53468: PUSH
53469: LD_OWVAR 2
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: LD_INT 34
53483: PUSH
53484: LD_INT 11
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 34
53493: PUSH
53494: LD_INT 30
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: LIST
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PPUSH
53510: CALL_OW 69
53514: ST_TO_ADDR
// if not tmp then
53515: LD_VAR 0 2
53519: NOT
53520: IFFALSE 53524
// exit ;
53522: GO 53553
// for i in tmp do
53524: LD_ADDR_VAR 0 1
53528: PUSH
53529: LD_VAR 0 2
53533: PUSH
53534: FOR_IN
53535: IFFALSE 53551
// begin SetLives ( i , 0 ) ;
53537: LD_VAR 0 1
53541: PPUSH
53542: LD_INT 0
53544: PPUSH
53545: CALL_OW 234
// end ;
53549: GO 53534
53551: POP
53552: POP
// end ;
53553: PPOPN 2
53555: END
// every 0 0$1 trigger StreamModeActive and sBunker do
53556: LD_EXP 15
53560: PUSH
53561: LD_EXP 25
53565: AND
53566: IFFALSE 53586
53568: GO 53570
53570: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
53571: LD_INT 32
53573: PPUSH
53574: LD_OWVAR 2
53578: PPUSH
53579: LD_INT 0
53581: PPUSH
53582: CALL_OW 324
53586: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
53587: LD_EXP 15
53591: PUSH
53592: LD_EXP 26
53596: AND
53597: IFFALSE 53778
53599: GO 53601
53601: DISABLE
53602: LD_INT 0
53604: PPUSH
53605: PPUSH
53606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
53607: LD_ADDR_VAR 0 2
53611: PUSH
53612: LD_INT 22
53614: PUSH
53615: LD_OWVAR 2
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 33
53626: PUSH
53627: LD_INT 3
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PPUSH
53638: CALL_OW 69
53642: ST_TO_ADDR
// if not tmp then
53643: LD_VAR 0 2
53647: NOT
53648: IFFALSE 53652
// exit ;
53650: GO 53778
// side := 0 ;
53652: LD_ADDR_VAR 0 3
53656: PUSH
53657: LD_INT 0
53659: ST_TO_ADDR
// for i := 1 to 8 do
53660: LD_ADDR_VAR 0 1
53664: PUSH
53665: DOUBLE
53666: LD_INT 1
53668: DEC
53669: ST_TO_ADDR
53670: LD_INT 8
53672: PUSH
53673: FOR_TO
53674: IFFALSE 53722
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
53676: LD_OWVAR 2
53680: PUSH
53681: LD_VAR 0 1
53685: NONEQUAL
53686: PUSH
53687: LD_OWVAR 2
53691: PPUSH
53692: LD_VAR 0 1
53696: PPUSH
53697: CALL_OW 81
53701: PUSH
53702: LD_INT 2
53704: EQUAL
53705: AND
53706: IFFALSE 53720
// begin side := i ;
53708: LD_ADDR_VAR 0 3
53712: PUSH
53713: LD_VAR 0 1
53717: ST_TO_ADDR
// break ;
53718: GO 53722
// end ;
53720: GO 53673
53722: POP
53723: POP
// if not side then
53724: LD_VAR 0 3
53728: NOT
53729: IFFALSE 53733
// exit ;
53731: GO 53778
// for i := 1 to tmp do
53733: LD_ADDR_VAR 0 1
53737: PUSH
53738: DOUBLE
53739: LD_INT 1
53741: DEC
53742: ST_TO_ADDR
53743: LD_VAR 0 2
53747: PUSH
53748: FOR_TO
53749: IFFALSE 53776
// if Prob ( 60 ) then
53751: LD_INT 60
53753: PPUSH
53754: CALL_OW 13
53758: IFFALSE 53774
// SetSide ( i , side ) ;
53760: LD_VAR 0 1
53764: PPUSH
53765: LD_VAR 0 3
53769: PPUSH
53770: CALL_OW 235
53774: GO 53748
53776: POP
53777: POP
// end ;
53778: PPOPN 3
53780: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
53781: LD_EXP 15
53785: PUSH
53786: LD_EXP 28
53790: AND
53791: IFFALSE 53910
53793: GO 53795
53795: DISABLE
53796: LD_INT 0
53798: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
53799: LD_ADDR_VAR 0 1
53803: PUSH
53804: LD_INT 22
53806: PUSH
53807: LD_OWVAR 2
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 21
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 3
53828: PUSH
53829: LD_INT 23
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: LIST
53847: PPUSH
53848: CALL_OW 69
53852: PUSH
53853: FOR_IN
53854: IFFALSE 53908
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
53856: LD_VAR 0 1
53860: PPUSH
53861: CALL_OW 257
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: LD_INT 3
53874: PUSH
53875: LD_INT 4
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: IN
53884: IFFALSE 53906
// SetClass ( un , rand ( 1 , 4 ) ) ;
53886: LD_VAR 0 1
53890: PPUSH
53891: LD_INT 1
53893: PPUSH
53894: LD_INT 4
53896: PPUSH
53897: CALL_OW 12
53901: PPUSH
53902: CALL_OW 336
53906: GO 53853
53908: POP
53909: POP
// end ;
53910: PPOPN 1
53912: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
53913: LD_EXP 15
53917: PUSH
53918: LD_EXP 27
53922: AND
53923: IFFALSE 54002
53925: GO 53927
53927: DISABLE
53928: LD_INT 0
53930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53931: LD_ADDR_VAR 0 1
53935: PUSH
53936: LD_INT 22
53938: PUSH
53939: LD_OWVAR 2
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 21
53950: PUSH
53951: LD_INT 3
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PPUSH
53962: CALL_OW 69
53966: ST_TO_ADDR
// if not tmp then
53967: LD_VAR 0 1
53971: NOT
53972: IFFALSE 53976
// exit ;
53974: GO 54002
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
53976: LD_VAR 0 1
53980: PUSH
53981: LD_INT 1
53983: PPUSH
53984: LD_VAR 0 1
53988: PPUSH
53989: CALL_OW 12
53993: ARRAY
53994: PPUSH
53995: LD_INT 100
53997: PPUSH
53998: CALL_OW 234
// end ;
54002: PPOPN 1
54004: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
54005: LD_EXP 15
54009: PUSH
54010: LD_EXP 29
54014: AND
54015: IFFALSE 54113
54017: GO 54019
54019: DISABLE
54020: LD_INT 0
54022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54023: LD_ADDR_VAR 0 1
54027: PUSH
54028: LD_INT 22
54030: PUSH
54031: LD_OWVAR 2
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 21
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PPUSH
54054: CALL_OW 69
54058: ST_TO_ADDR
// if not tmp then
54059: LD_VAR 0 1
54063: NOT
54064: IFFALSE 54068
// exit ;
54066: GO 54113
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
54068: LD_VAR 0 1
54072: PUSH
54073: LD_INT 1
54075: PPUSH
54076: LD_VAR 0 1
54080: PPUSH
54081: CALL_OW 12
54085: ARRAY
54086: PPUSH
54087: LD_INT 1
54089: PPUSH
54090: LD_INT 4
54092: PPUSH
54093: CALL_OW 12
54097: PPUSH
54098: LD_INT 3000
54100: PPUSH
54101: LD_INT 9000
54103: PPUSH
54104: CALL_OW 12
54108: PPUSH
54109: CALL_OW 492
// end ;
54113: PPOPN 1
54115: END
// every 0 0$1 trigger StreamModeActive and sDepot do
54116: LD_EXP 15
54120: PUSH
54121: LD_EXP 30
54125: AND
54126: IFFALSE 54146
54128: GO 54130
54130: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
54131: LD_INT 1
54133: PPUSH
54134: LD_OWVAR 2
54138: PPUSH
54139: LD_INT 0
54141: PPUSH
54142: CALL_OW 324
54146: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
54147: LD_EXP 15
54151: PUSH
54152: LD_EXP 31
54156: AND
54157: IFFALSE 54240
54159: GO 54161
54161: DISABLE
54162: LD_INT 0
54164: PPUSH
54165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
54166: LD_ADDR_VAR 0 2
54170: PUSH
54171: LD_INT 22
54173: PUSH
54174: LD_OWVAR 2
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 21
54185: PUSH
54186: LD_INT 3
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PPUSH
54197: CALL_OW 69
54201: ST_TO_ADDR
// if not tmp then
54202: LD_VAR 0 2
54206: NOT
54207: IFFALSE 54211
// exit ;
54209: GO 54240
// for i in tmp do
54211: LD_ADDR_VAR 0 1
54215: PUSH
54216: LD_VAR 0 2
54220: PUSH
54221: FOR_IN
54222: IFFALSE 54238
// SetBLevel ( i , 10 ) ;
54224: LD_VAR 0 1
54228: PPUSH
54229: LD_INT 10
54231: PPUSH
54232: CALL_OW 241
54236: GO 54221
54238: POP
54239: POP
// end ;
54240: PPOPN 2
54242: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
54243: LD_EXP 15
54247: PUSH
54248: LD_EXP 32
54252: AND
54253: IFFALSE 54364
54255: GO 54257
54257: DISABLE
54258: LD_INT 0
54260: PPUSH
54261: PPUSH
54262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54263: LD_ADDR_VAR 0 3
54267: PUSH
54268: LD_INT 22
54270: PUSH
54271: LD_OWVAR 2
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 25
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PPUSH
54294: CALL_OW 69
54298: ST_TO_ADDR
// if not tmp then
54299: LD_VAR 0 3
54303: NOT
54304: IFFALSE 54308
// exit ;
54306: GO 54364
// un := tmp [ rand ( 1 , tmp ) ] ;
54308: LD_ADDR_VAR 0 2
54312: PUSH
54313: LD_VAR 0 3
54317: PUSH
54318: LD_INT 1
54320: PPUSH
54321: LD_VAR 0 3
54325: PPUSH
54326: CALL_OW 12
54330: ARRAY
54331: ST_TO_ADDR
// if Crawls ( un ) then
54332: LD_VAR 0 2
54336: PPUSH
54337: CALL_OW 318
54341: IFFALSE 54352
// ComWalk ( un ) ;
54343: LD_VAR 0 2
54347: PPUSH
54348: CALL_OW 138
// SetClass ( un , class_sniper ) ;
54352: LD_VAR 0 2
54356: PPUSH
54357: LD_INT 5
54359: PPUSH
54360: CALL_OW 336
// end ;
54364: PPOPN 3
54366: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
54367: LD_EXP 15
54371: PUSH
54372: LD_EXP 33
54376: AND
54377: PUSH
54378: LD_OWVAR 67
54382: PUSH
54383: LD_INT 4
54385: LESS
54386: AND
54387: IFFALSE 54406
54389: GO 54391
54391: DISABLE
// begin Difficulty := Difficulty + 1 ;
54392: LD_ADDR_OWVAR 67
54396: PUSH
54397: LD_OWVAR 67
54401: PUSH
54402: LD_INT 1
54404: PLUS
54405: ST_TO_ADDR
// end ;
54406: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
54407: LD_EXP 15
54411: PUSH
54412: LD_EXP 34
54416: AND
54417: IFFALSE 54520
54419: GO 54421
54421: DISABLE
54422: LD_INT 0
54424: PPUSH
// begin for i := 1 to 5 do
54425: LD_ADDR_VAR 0 1
54429: PUSH
54430: DOUBLE
54431: LD_INT 1
54433: DEC
54434: ST_TO_ADDR
54435: LD_INT 5
54437: PUSH
54438: FOR_TO
54439: IFFALSE 54518
// begin uc_nation := nation_nature ;
54441: LD_ADDR_OWVAR 21
54445: PUSH
54446: LD_INT 0
54448: ST_TO_ADDR
// uc_side := 0 ;
54449: LD_ADDR_OWVAR 20
54453: PUSH
54454: LD_INT 0
54456: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54457: LD_ADDR_OWVAR 29
54461: PUSH
54462: LD_INT 12
54464: PUSH
54465: LD_INT 12
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: ST_TO_ADDR
// hc_agressivity := 20 ;
54472: LD_ADDR_OWVAR 35
54476: PUSH
54477: LD_INT 20
54479: ST_TO_ADDR
// hc_class := class_tiger ;
54480: LD_ADDR_OWVAR 28
54484: PUSH
54485: LD_INT 14
54487: ST_TO_ADDR
// hc_gallery :=  ;
54488: LD_ADDR_OWVAR 33
54492: PUSH
54493: LD_STRING 
54495: ST_TO_ADDR
// hc_name :=  ;
54496: LD_ADDR_OWVAR 26
54500: PUSH
54501: LD_STRING 
54503: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
54504: CALL_OW 44
54508: PPUSH
54509: LD_INT 0
54511: PPUSH
54512: CALL_OW 51
// end ;
54516: GO 54438
54518: POP
54519: POP
// end ;
54520: PPOPN 1
54522: END
// every 0 0$1 trigger StreamModeActive and sBomb do
54523: LD_EXP 15
54527: PUSH
54528: LD_EXP 35
54532: AND
54533: IFFALSE 54542
54535: GO 54537
54537: DISABLE
// StreamSibBomb ;
54538: CALL 54543 0 0
54542: END
// export function StreamSibBomb ; var i , x , y ; begin
54543: LD_INT 0
54545: PPUSH
54546: PPUSH
54547: PPUSH
54548: PPUSH
// result := false ;
54549: LD_ADDR_VAR 0 1
54553: PUSH
54554: LD_INT 0
54556: ST_TO_ADDR
// for i := 1 to 16 do
54557: LD_ADDR_VAR 0 2
54561: PUSH
54562: DOUBLE
54563: LD_INT 1
54565: DEC
54566: ST_TO_ADDR
54567: LD_INT 16
54569: PUSH
54570: FOR_TO
54571: IFFALSE 54770
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
54573: LD_ADDR_VAR 0 3
54577: PUSH
54578: LD_INT 10
54580: PUSH
54581: LD_INT 20
54583: PUSH
54584: LD_INT 30
54586: PUSH
54587: LD_INT 40
54589: PUSH
54590: LD_INT 50
54592: PUSH
54593: LD_INT 60
54595: PUSH
54596: LD_INT 70
54598: PUSH
54599: LD_INT 80
54601: PUSH
54602: LD_INT 90
54604: PUSH
54605: LD_INT 100
54607: PUSH
54608: LD_INT 110
54610: PUSH
54611: LD_INT 120
54613: PUSH
54614: LD_INT 130
54616: PUSH
54617: LD_INT 140
54619: PUSH
54620: LD_INT 150
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: PPUSH
54643: LD_INT 15
54645: PPUSH
54646: CALL_OW 12
54650: ARRAY
54651: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
54652: LD_ADDR_VAR 0 4
54656: PUSH
54657: LD_INT 10
54659: PUSH
54660: LD_INT 20
54662: PUSH
54663: LD_INT 30
54665: PUSH
54666: LD_INT 40
54668: PUSH
54669: LD_INT 50
54671: PUSH
54672: LD_INT 60
54674: PUSH
54675: LD_INT 70
54677: PUSH
54678: LD_INT 80
54680: PUSH
54681: LD_INT 90
54683: PUSH
54684: LD_INT 100
54686: PUSH
54687: LD_INT 110
54689: PUSH
54690: LD_INT 120
54692: PUSH
54693: LD_INT 130
54695: PUSH
54696: LD_INT 140
54698: PUSH
54699: LD_INT 150
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: PPUSH
54722: LD_INT 15
54724: PPUSH
54725: CALL_OW 12
54729: ARRAY
54730: ST_TO_ADDR
// if ValidHex ( x , y ) then
54731: LD_VAR 0 3
54735: PPUSH
54736: LD_VAR 0 4
54740: PPUSH
54741: CALL_OW 488
54745: IFFALSE 54768
// begin result := [ x , y ] ;
54747: LD_ADDR_VAR 0 1
54751: PUSH
54752: LD_VAR 0 3
54756: PUSH
54757: LD_VAR 0 4
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: ST_TO_ADDR
// break ;
54766: GO 54770
// end ; end ;
54768: GO 54570
54770: POP
54771: POP
// if result then
54772: LD_VAR 0 1
54776: IFFALSE 54836
// begin ToLua ( playSibBomb() ) ;
54778: LD_STRING playSibBomb()
54780: PPUSH
54781: CALL_OW 559
// wait ( 0 0$14 ) ;
54785: LD_INT 490
54787: PPUSH
54788: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
54792: LD_VAR 0 1
54796: PUSH
54797: LD_INT 1
54799: ARRAY
54800: PPUSH
54801: LD_VAR 0 1
54805: PUSH
54806: LD_INT 2
54808: ARRAY
54809: PPUSH
54810: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
54814: LD_VAR 0 1
54818: PUSH
54819: LD_INT 1
54821: ARRAY
54822: PPUSH
54823: LD_VAR 0 1
54827: PUSH
54828: LD_INT 2
54830: ARRAY
54831: PPUSH
54832: CALL_OW 429
// end ; end ;
54836: LD_VAR 0 1
54840: RET
// every 0 0$1 trigger StreamModeActive and sReset do
54841: LD_EXP 15
54845: PUSH
54846: LD_EXP 37
54850: AND
54851: IFFALSE 54863
54853: GO 54855
54855: DISABLE
// YouLost (  ) ;
54856: LD_STRING 
54858: PPUSH
54859: CALL_OW 104
54863: END
// every 0 0$1 trigger StreamModeActive and sFog do
54864: LD_EXP 15
54868: PUSH
54869: LD_EXP 36
54873: AND
54874: IFFALSE 54888
54876: GO 54878
54878: DISABLE
// FogOff ( your_side ) ;
54879: LD_OWVAR 2
54883: PPUSH
54884: CALL_OW 344
54888: END
// every 0 0$1 trigger StreamModeActive and sSun do
54889: LD_EXP 15
54893: PUSH
54894: LD_EXP 38
54898: AND
54899: IFFALSE 54927
54901: GO 54903
54903: DISABLE
// begin solar_recharge_percent := 0 ;
54904: LD_ADDR_OWVAR 79
54908: PUSH
54909: LD_INT 0
54911: ST_TO_ADDR
// wait ( 5 5$00 ) ;
54912: LD_INT 10500
54914: PPUSH
54915: CALL_OW 67
// solar_recharge_percent := 100 ;
54919: LD_ADDR_OWVAR 79
54923: PUSH
54924: LD_INT 100
54926: ST_TO_ADDR
// end ;
54927: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
54928: LD_EXP 15
54932: PUSH
54933: LD_EXP 39
54937: AND
54938: IFFALSE 55177
54940: GO 54942
54942: DISABLE
54943: LD_INT 0
54945: PPUSH
54946: PPUSH
54947: PPUSH
// begin tmp := [ ] ;
54948: LD_ADDR_VAR 0 3
54952: PUSH
54953: EMPTY
54954: ST_TO_ADDR
// for i := 1 to 6 do
54955: LD_ADDR_VAR 0 1
54959: PUSH
54960: DOUBLE
54961: LD_INT 1
54963: DEC
54964: ST_TO_ADDR
54965: LD_INT 6
54967: PUSH
54968: FOR_TO
54969: IFFALSE 55074
// begin uc_nation := nation_nature ;
54971: LD_ADDR_OWVAR 21
54975: PUSH
54976: LD_INT 0
54978: ST_TO_ADDR
// uc_side := 0 ;
54979: LD_ADDR_OWVAR 20
54983: PUSH
54984: LD_INT 0
54986: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54987: LD_ADDR_OWVAR 29
54991: PUSH
54992: LD_INT 12
54994: PUSH
54995: LD_INT 12
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: ST_TO_ADDR
// hc_agressivity := 20 ;
55002: LD_ADDR_OWVAR 35
55006: PUSH
55007: LD_INT 20
55009: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
55010: LD_ADDR_OWVAR 28
55014: PUSH
55015: LD_INT 17
55017: ST_TO_ADDR
// hc_gallery :=  ;
55018: LD_ADDR_OWVAR 33
55022: PUSH
55023: LD_STRING 
55025: ST_TO_ADDR
// hc_name :=  ;
55026: LD_ADDR_OWVAR 26
55030: PUSH
55031: LD_STRING 
55033: ST_TO_ADDR
// un := CreateHuman ;
55034: LD_ADDR_VAR 0 2
55038: PUSH
55039: CALL_OW 44
55043: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
55044: LD_VAR 0 2
55048: PPUSH
55049: LD_INT 1
55051: PPUSH
55052: CALL_OW 51
// tmp := tmp ^ un ;
55056: LD_ADDR_VAR 0 3
55060: PUSH
55061: LD_VAR 0 3
55065: PUSH
55066: LD_VAR 0 2
55070: ADD
55071: ST_TO_ADDR
// end ;
55072: GO 54968
55074: POP
55075: POP
// repeat wait ( 0 0$1 ) ;
55076: LD_INT 35
55078: PPUSH
55079: CALL_OW 67
// for un in tmp do
55083: LD_ADDR_VAR 0 2
55087: PUSH
55088: LD_VAR 0 3
55092: PUSH
55093: FOR_IN
55094: IFFALSE 55168
// begin if IsDead ( un ) then
55096: LD_VAR 0 2
55100: PPUSH
55101: CALL_OW 301
55105: IFFALSE 55125
// begin tmp := tmp diff un ;
55107: LD_ADDR_VAR 0 3
55111: PUSH
55112: LD_VAR 0 3
55116: PUSH
55117: LD_VAR 0 2
55121: DIFF
55122: ST_TO_ADDR
// continue ;
55123: GO 55093
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
55125: LD_VAR 0 2
55129: PPUSH
55130: LD_INT 3
55132: PUSH
55133: LD_INT 22
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PPUSH
55147: CALL_OW 69
55151: PPUSH
55152: LD_VAR 0 2
55156: PPUSH
55157: CALL_OW 74
55161: PPUSH
55162: CALL_OW 115
// end ;
55166: GO 55093
55168: POP
55169: POP
// until not tmp ;
55170: LD_VAR 0 3
55174: NOT
55175: IFFALSE 55076
// end ;
55177: PPOPN 3
55179: END
// every 0 0$1 trigger StreamModeActive and sTroll do
55180: LD_EXP 15
55184: PUSH
55185: LD_EXP 40
55189: AND
55190: IFFALSE 55244
55192: GO 55194
55194: DISABLE
// begin ToLua ( displayTroll(); ) ;
55195: LD_STRING displayTroll();
55197: PPUSH
55198: CALL_OW 559
// wait ( 3 3$00 ) ;
55202: LD_INT 6300
55204: PPUSH
55205: CALL_OW 67
// ToLua ( hideTroll(); ) ;
55209: LD_STRING hideTroll();
55211: PPUSH
55212: CALL_OW 559
// wait ( 1 1$00 ) ;
55216: LD_INT 2100
55218: PPUSH
55219: CALL_OW 67
// ToLua ( displayTroll(); ) ;
55223: LD_STRING displayTroll();
55225: PPUSH
55226: CALL_OW 559
// wait ( 1 1$00 ) ;
55230: LD_INT 2100
55232: PPUSH
55233: CALL_OW 67
// ToLua ( hideTroll(); ) ;
55237: LD_STRING hideTroll();
55239: PPUSH
55240: CALL_OW 559
// end ;
55244: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
55245: LD_EXP 15
55249: PUSH
55250: LD_EXP 41
55254: AND
55255: IFFALSE 55318
55257: GO 55259
55259: DISABLE
55260: LD_INT 0
55262: PPUSH
// begin p := 0 ;
55263: LD_ADDR_VAR 0 1
55267: PUSH
55268: LD_INT 0
55270: ST_TO_ADDR
// repeat game_speed := 1 ;
55271: LD_ADDR_OWVAR 65
55275: PUSH
55276: LD_INT 1
55278: ST_TO_ADDR
// wait ( 0 0$1 ) ;
55279: LD_INT 35
55281: PPUSH
55282: CALL_OW 67
// p := p + 1 ;
55286: LD_ADDR_VAR 0 1
55290: PUSH
55291: LD_VAR 0 1
55295: PUSH
55296: LD_INT 1
55298: PLUS
55299: ST_TO_ADDR
// until p >= 60 ;
55300: LD_VAR 0 1
55304: PUSH
55305: LD_INT 60
55307: GREATEREQUAL
55308: IFFALSE 55271
// game_speed := 4 ;
55310: LD_ADDR_OWVAR 65
55314: PUSH
55315: LD_INT 4
55317: ST_TO_ADDR
// end ;
55318: PPOPN 1
55320: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
55321: LD_EXP 15
55325: PUSH
55326: LD_EXP 42
55330: AND
55331: IFFALSE 55477
55333: GO 55335
55335: DISABLE
55336: LD_INT 0
55338: PPUSH
55339: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55340: LD_ADDR_VAR 0 1
55344: PUSH
55345: LD_INT 22
55347: PUSH
55348: LD_OWVAR 2
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 2
55359: PUSH
55360: LD_INT 30
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 30
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: LIST
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PPUSH
55389: CALL_OW 69
55393: ST_TO_ADDR
// if not depot then
55394: LD_VAR 0 1
55398: NOT
55399: IFFALSE 55403
// exit ;
55401: GO 55477
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
55403: LD_ADDR_VAR 0 2
55407: PUSH
55408: LD_VAR 0 1
55412: PUSH
55413: LD_INT 1
55415: PPUSH
55416: LD_VAR 0 1
55420: PPUSH
55421: CALL_OW 12
55425: ARRAY
55426: PPUSH
55427: CALL_OW 274
55431: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
55432: LD_VAR 0 2
55436: PPUSH
55437: LD_INT 1
55439: PPUSH
55440: LD_INT 0
55442: PPUSH
55443: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
55447: LD_VAR 0 2
55451: PPUSH
55452: LD_INT 2
55454: PPUSH
55455: LD_INT 0
55457: PPUSH
55458: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
55462: LD_VAR 0 2
55466: PPUSH
55467: LD_INT 3
55469: PPUSH
55470: LD_INT 0
55472: PPUSH
55473: CALL_OW 277
// end ;
55477: PPOPN 2
55479: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
55480: LD_EXP 15
55484: PUSH
55485: LD_EXP 43
55489: AND
55490: IFFALSE 55587
55492: GO 55494
55494: DISABLE
55495: LD_INT 0
55497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55498: LD_ADDR_VAR 0 1
55502: PUSH
55503: LD_INT 22
55505: PUSH
55506: LD_OWVAR 2
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 21
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 3
55527: PUSH
55528: LD_INT 23
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: LIST
55546: PPUSH
55547: CALL_OW 69
55551: ST_TO_ADDR
// if not tmp then
55552: LD_VAR 0 1
55556: NOT
55557: IFFALSE 55561
// exit ;
55559: GO 55587
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
55561: LD_VAR 0 1
55565: PUSH
55566: LD_INT 1
55568: PPUSH
55569: LD_VAR 0 1
55573: PPUSH
55574: CALL_OW 12
55578: ARRAY
55579: PPUSH
55580: LD_INT 200
55582: PPUSH
55583: CALL_OW 234
// end ;
55587: PPOPN 1
55589: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
55590: LD_EXP 15
55594: PUSH
55595: LD_EXP 44
55599: AND
55600: IFFALSE 55679
55602: GO 55604
55604: DISABLE
55605: LD_INT 0
55607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
55608: LD_ADDR_VAR 0 1
55612: PUSH
55613: LD_INT 22
55615: PUSH
55616: LD_OWVAR 2
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 21
55627: PUSH
55628: LD_INT 2
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PPUSH
55639: CALL_OW 69
55643: ST_TO_ADDR
// if not tmp then
55644: LD_VAR 0 1
55648: NOT
55649: IFFALSE 55653
// exit ;
55651: GO 55679
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
55653: LD_VAR 0 1
55657: PUSH
55658: LD_INT 1
55660: PPUSH
55661: LD_VAR 0 1
55665: PPUSH
55666: CALL_OW 12
55670: ARRAY
55671: PPUSH
55672: LD_INT 60
55674: PPUSH
55675: CALL_OW 234
// end ;
55679: PPOPN 1
55681: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
55682: LD_EXP 15
55686: PUSH
55687: LD_EXP 45
55691: AND
55692: IFFALSE 55791
55694: GO 55696
55696: DISABLE
55697: LD_INT 0
55699: PPUSH
55700: PPUSH
// begin enable ;
55701: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
55702: LD_ADDR_VAR 0 1
55706: PUSH
55707: LD_INT 22
55709: PUSH
55710: LD_OWVAR 2
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 61
55721: PUSH
55722: EMPTY
55723: LIST
55724: PUSH
55725: LD_INT 33
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: LIST
55739: PPUSH
55740: CALL_OW 69
55744: ST_TO_ADDR
// if not tmp then
55745: LD_VAR 0 1
55749: NOT
55750: IFFALSE 55754
// exit ;
55752: GO 55791
// for i in tmp do
55754: LD_ADDR_VAR 0 2
55758: PUSH
55759: LD_VAR 0 1
55763: PUSH
55764: FOR_IN
55765: IFFALSE 55789
// if IsControledBy ( i ) then
55767: LD_VAR 0 2
55771: PPUSH
55772: CALL_OW 312
55776: IFFALSE 55787
// ComUnlink ( i ) ;
55778: LD_VAR 0 2
55782: PPUSH
55783: CALL_OW 136
55787: GO 55764
55789: POP
55790: POP
// end ;
55791: PPOPN 2
55793: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
55794: LD_EXP 15
55798: PUSH
55799: LD_EXP 46
55803: AND
55804: IFFALSE 55944
55806: GO 55808
55808: DISABLE
55809: LD_INT 0
55811: PPUSH
55812: PPUSH
// begin ToLua ( displayPowell(); ) ;
55813: LD_STRING displayPowell();
55815: PPUSH
55816: CALL_OW 559
// uc_side := 0 ;
55820: LD_ADDR_OWVAR 20
55824: PUSH
55825: LD_INT 0
55827: ST_TO_ADDR
// uc_nation := 2 ;
55828: LD_ADDR_OWVAR 21
55832: PUSH
55833: LD_INT 2
55835: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
55836: LD_ADDR_OWVAR 37
55840: PUSH
55841: LD_INT 14
55843: ST_TO_ADDR
// vc_engine := engine_siberite ;
55844: LD_ADDR_OWVAR 39
55848: PUSH
55849: LD_INT 3
55851: ST_TO_ADDR
// vc_control := control_apeman ;
55852: LD_ADDR_OWVAR 38
55856: PUSH
55857: LD_INT 5
55859: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
55860: LD_ADDR_OWVAR 40
55864: PUSH
55865: LD_INT 29
55867: ST_TO_ADDR
// un := CreateVehicle ;
55868: LD_ADDR_VAR 0 2
55872: PUSH
55873: CALL_OW 45
55877: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55878: LD_VAR 0 2
55882: PPUSH
55883: LD_INT 1
55885: PPUSH
55886: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55890: LD_INT 35
55892: PPUSH
55893: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55897: LD_VAR 0 2
55901: PPUSH
55902: LD_INT 22
55904: PUSH
55905: LD_OWVAR 2
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PPUSH
55914: CALL_OW 69
55918: PPUSH
55919: LD_VAR 0 2
55923: PPUSH
55924: CALL_OW 74
55928: PPUSH
55929: CALL_OW 115
// until IsDead ( un ) ;
55933: LD_VAR 0 2
55937: PPUSH
55938: CALL_OW 301
55942: IFFALSE 55890
// end ;
55944: PPOPN 2
55946: END
// every 0 0$1 trigger StreamModeActive and sStu do
55947: LD_EXP 15
55951: PUSH
55952: LD_EXP 54
55956: AND
55957: IFFALSE 55973
55959: GO 55961
55961: DISABLE
// begin ToLua ( displayStucuk(); ) ;
55962: LD_STRING displayStucuk();
55964: PPUSH
55965: CALL_OW 559
// ResetFog ;
55969: CALL_OW 335
// end ;
55973: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
55974: LD_EXP 15
55978: PUSH
55979: LD_EXP 47
55983: AND
55984: IFFALSE 56125
55986: GO 55988
55988: DISABLE
55989: LD_INT 0
55991: PPUSH
55992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55993: LD_ADDR_VAR 0 2
55997: PUSH
55998: LD_INT 22
56000: PUSH
56001: LD_OWVAR 2
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 21
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PPUSH
56024: CALL_OW 69
56028: ST_TO_ADDR
// if not tmp then
56029: LD_VAR 0 2
56033: NOT
56034: IFFALSE 56038
// exit ;
56036: GO 56125
// un := tmp [ rand ( 1 , tmp ) ] ;
56038: LD_ADDR_VAR 0 1
56042: PUSH
56043: LD_VAR 0 2
56047: PUSH
56048: LD_INT 1
56050: PPUSH
56051: LD_VAR 0 2
56055: PPUSH
56056: CALL_OW 12
56060: ARRAY
56061: ST_TO_ADDR
// SetSide ( un , 0 ) ;
56062: LD_VAR 0 1
56066: PPUSH
56067: LD_INT 0
56069: PPUSH
56070: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
56074: LD_VAR 0 1
56078: PPUSH
56079: LD_OWVAR 3
56083: PUSH
56084: LD_VAR 0 1
56088: DIFF
56089: PPUSH
56090: LD_VAR 0 1
56094: PPUSH
56095: CALL_OW 74
56099: PPUSH
56100: CALL_OW 115
// wait ( 0 0$20 ) ;
56104: LD_INT 700
56106: PPUSH
56107: CALL_OW 67
// SetSide ( un , your_side ) ;
56111: LD_VAR 0 1
56115: PPUSH
56116: LD_OWVAR 2
56120: PPUSH
56121: CALL_OW 235
// end ;
56125: PPOPN 2
56127: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
56128: LD_EXP 15
56132: PUSH
56133: LD_EXP 48
56137: AND
56138: IFFALSE 56244
56140: GO 56142
56142: DISABLE
56143: LD_INT 0
56145: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56146: LD_ADDR_VAR 0 1
56150: PUSH
56151: LD_INT 22
56153: PUSH
56154: LD_OWVAR 2
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: LD_INT 30
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 30
56178: PUSH
56179: LD_INT 1
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: LIST
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PPUSH
56195: CALL_OW 69
56199: ST_TO_ADDR
// if not depot then
56200: LD_VAR 0 1
56204: NOT
56205: IFFALSE 56209
// exit ;
56207: GO 56244
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
56209: LD_VAR 0 1
56213: PUSH
56214: LD_INT 1
56216: ARRAY
56217: PPUSH
56218: CALL_OW 250
56222: PPUSH
56223: LD_VAR 0 1
56227: PUSH
56228: LD_INT 1
56230: ARRAY
56231: PPUSH
56232: CALL_OW 251
56236: PPUSH
56237: LD_INT 70
56239: PPUSH
56240: CALL_OW 495
// end ;
56244: PPOPN 1
56246: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
56247: LD_EXP 15
56251: PUSH
56252: LD_EXP 49
56256: AND
56257: IFFALSE 56468
56259: GO 56261
56261: DISABLE
56262: LD_INT 0
56264: PPUSH
56265: PPUSH
56266: PPUSH
56267: PPUSH
56268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56269: LD_ADDR_VAR 0 5
56273: PUSH
56274: LD_INT 22
56276: PUSH
56277: LD_OWVAR 2
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 21
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PPUSH
56300: CALL_OW 69
56304: ST_TO_ADDR
// if not tmp then
56305: LD_VAR 0 5
56309: NOT
56310: IFFALSE 56314
// exit ;
56312: GO 56468
// for i in tmp do
56314: LD_ADDR_VAR 0 1
56318: PUSH
56319: LD_VAR 0 5
56323: PUSH
56324: FOR_IN
56325: IFFALSE 56466
// begin d := rand ( 0 , 5 ) ;
56327: LD_ADDR_VAR 0 4
56331: PUSH
56332: LD_INT 0
56334: PPUSH
56335: LD_INT 5
56337: PPUSH
56338: CALL_OW 12
56342: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
56343: LD_ADDR_VAR 0 2
56347: PUSH
56348: LD_VAR 0 1
56352: PPUSH
56353: CALL_OW 250
56357: PPUSH
56358: LD_VAR 0 4
56362: PPUSH
56363: LD_INT 3
56365: PPUSH
56366: LD_INT 12
56368: PPUSH
56369: CALL_OW 12
56373: PPUSH
56374: CALL_OW 272
56378: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
56379: LD_ADDR_VAR 0 3
56383: PUSH
56384: LD_VAR 0 1
56388: PPUSH
56389: CALL_OW 251
56393: PPUSH
56394: LD_VAR 0 4
56398: PPUSH
56399: LD_INT 3
56401: PPUSH
56402: LD_INT 12
56404: PPUSH
56405: CALL_OW 12
56409: PPUSH
56410: CALL_OW 273
56414: ST_TO_ADDR
// if ValidHex ( x , y ) then
56415: LD_VAR 0 2
56419: PPUSH
56420: LD_VAR 0 3
56424: PPUSH
56425: CALL_OW 488
56429: IFFALSE 56464
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
56431: LD_VAR 0 1
56435: PPUSH
56436: LD_VAR 0 2
56440: PPUSH
56441: LD_VAR 0 3
56445: PPUSH
56446: LD_INT 3
56448: PPUSH
56449: LD_INT 6
56451: PPUSH
56452: CALL_OW 12
56456: PPUSH
56457: LD_INT 1
56459: PPUSH
56460: CALL_OW 483
// end ;
56464: GO 56324
56466: POP
56467: POP
// end ;
56468: PPOPN 5
56470: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
56471: LD_EXP 15
56475: PUSH
56476: LD_EXP 50
56480: AND
56481: IFFALSE 56575
56483: GO 56485
56485: DISABLE
56486: LD_INT 0
56488: PPUSH
56489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
56490: LD_ADDR_VAR 0 2
56494: PUSH
56495: LD_INT 22
56497: PUSH
56498: LD_OWVAR 2
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 32
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 21
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: LIST
56531: PPUSH
56532: CALL_OW 69
56536: ST_TO_ADDR
// if not tmp then
56537: LD_VAR 0 2
56541: NOT
56542: IFFALSE 56546
// exit ;
56544: GO 56575
// for i in tmp do
56546: LD_ADDR_VAR 0 1
56550: PUSH
56551: LD_VAR 0 2
56555: PUSH
56556: FOR_IN
56557: IFFALSE 56573
// SetFuel ( i , 0 ) ;
56559: LD_VAR 0 1
56563: PPUSH
56564: LD_INT 0
56566: PPUSH
56567: CALL_OW 240
56571: GO 56556
56573: POP
56574: POP
// end ;
56575: PPOPN 2
56577: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
56578: LD_EXP 15
56582: PUSH
56583: LD_EXP 51
56587: AND
56588: IFFALSE 56654
56590: GO 56592
56592: DISABLE
56593: LD_INT 0
56595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56596: LD_ADDR_VAR 0 1
56600: PUSH
56601: LD_INT 22
56603: PUSH
56604: LD_OWVAR 2
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 30
56615: PUSH
56616: LD_INT 29
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PPUSH
56627: CALL_OW 69
56631: ST_TO_ADDR
// if not tmp then
56632: LD_VAR 0 1
56636: NOT
56637: IFFALSE 56641
// exit ;
56639: GO 56654
// DestroyUnit ( tmp [ 1 ] ) ;
56641: LD_VAR 0 1
56645: PUSH
56646: LD_INT 1
56648: ARRAY
56649: PPUSH
56650: CALL_OW 65
// end ;
56654: PPOPN 1
56656: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
56657: LD_EXP 15
56661: PUSH
56662: LD_EXP 53
56666: AND
56667: IFFALSE 56796
56669: GO 56671
56671: DISABLE
56672: LD_INT 0
56674: PPUSH
// begin uc_side := 0 ;
56675: LD_ADDR_OWVAR 20
56679: PUSH
56680: LD_INT 0
56682: ST_TO_ADDR
// uc_nation := nation_arabian ;
56683: LD_ADDR_OWVAR 21
56687: PUSH
56688: LD_INT 2
56690: ST_TO_ADDR
// hc_gallery :=  ;
56691: LD_ADDR_OWVAR 33
56695: PUSH
56696: LD_STRING 
56698: ST_TO_ADDR
// hc_name :=  ;
56699: LD_ADDR_OWVAR 26
56703: PUSH
56704: LD_STRING 
56706: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
56707: LD_INT 1
56709: PPUSH
56710: LD_INT 11
56712: PPUSH
56713: LD_INT 10
56715: PPUSH
56716: CALL_OW 380
// un := CreateHuman ;
56720: LD_ADDR_VAR 0 1
56724: PUSH
56725: CALL_OW 44
56729: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56730: LD_VAR 0 1
56734: PPUSH
56735: LD_INT 1
56737: PPUSH
56738: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56742: LD_INT 35
56744: PPUSH
56745: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56749: LD_VAR 0 1
56753: PPUSH
56754: LD_INT 22
56756: PUSH
56757: LD_OWVAR 2
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PPUSH
56766: CALL_OW 69
56770: PPUSH
56771: LD_VAR 0 1
56775: PPUSH
56776: CALL_OW 74
56780: PPUSH
56781: CALL_OW 115
// until IsDead ( un ) ;
56785: LD_VAR 0 1
56789: PPUSH
56790: CALL_OW 301
56794: IFFALSE 56742
// end ;
56796: PPOPN 1
56798: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
56799: LD_EXP 15
56803: PUSH
56804: LD_EXP 55
56808: AND
56809: IFFALSE 56821
56811: GO 56813
56813: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
56814: LD_STRING earthquake(getX(game), 0, 32)
56816: PPUSH
56817: CALL_OW 559
56821: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
56822: LD_EXP 15
56826: PUSH
56827: LD_EXP 56
56831: AND
56832: IFFALSE 56923
56834: GO 56836
56836: DISABLE
56837: LD_INT 0
56839: PPUSH
// begin enable ;
56840: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
56841: LD_ADDR_VAR 0 1
56845: PUSH
56846: LD_INT 22
56848: PUSH
56849: LD_OWVAR 2
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 21
56860: PUSH
56861: LD_INT 2
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 33
56870: PUSH
56871: LD_INT 3
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: LIST
56882: PPUSH
56883: CALL_OW 69
56887: ST_TO_ADDR
// if not tmp then
56888: LD_VAR 0 1
56892: NOT
56893: IFFALSE 56897
// exit ;
56895: GO 56923
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56897: LD_VAR 0 1
56901: PUSH
56902: LD_INT 1
56904: PPUSH
56905: LD_VAR 0 1
56909: PPUSH
56910: CALL_OW 12
56914: ARRAY
56915: PPUSH
56916: LD_INT 1
56918: PPUSH
56919: CALL_OW 234
// end ;
56923: PPOPN 1
56925: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
56926: LD_EXP 15
56930: PUSH
56931: LD_EXP 57
56935: AND
56936: IFFALSE 57077
56938: GO 56940
56940: DISABLE
56941: LD_INT 0
56943: PPUSH
56944: PPUSH
56945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56946: LD_ADDR_VAR 0 3
56950: PUSH
56951: LD_INT 22
56953: PUSH
56954: LD_OWVAR 2
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 25
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PPUSH
56977: CALL_OW 69
56981: ST_TO_ADDR
// if not tmp then
56982: LD_VAR 0 3
56986: NOT
56987: IFFALSE 56991
// exit ;
56989: GO 57077
// un := tmp [ rand ( 1 , tmp ) ] ;
56991: LD_ADDR_VAR 0 2
56995: PUSH
56996: LD_VAR 0 3
57000: PUSH
57001: LD_INT 1
57003: PPUSH
57004: LD_VAR 0 3
57008: PPUSH
57009: CALL_OW 12
57013: ARRAY
57014: ST_TO_ADDR
// if Crawls ( un ) then
57015: LD_VAR 0 2
57019: PPUSH
57020: CALL_OW 318
57024: IFFALSE 57035
// ComWalk ( un ) ;
57026: LD_VAR 0 2
57030: PPUSH
57031: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
57035: LD_VAR 0 2
57039: PPUSH
57040: LD_INT 9
57042: PPUSH
57043: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
57047: LD_INT 28
57049: PPUSH
57050: LD_OWVAR 2
57054: PPUSH
57055: LD_INT 2
57057: PPUSH
57058: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
57062: LD_INT 29
57064: PPUSH
57065: LD_OWVAR 2
57069: PPUSH
57070: LD_INT 2
57072: PPUSH
57073: CALL_OW 322
// end ;
57077: PPOPN 3
57079: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
57080: LD_EXP 15
57084: PUSH
57085: LD_EXP 58
57089: AND
57090: IFFALSE 57201
57092: GO 57094
57094: DISABLE
57095: LD_INT 0
57097: PPUSH
57098: PPUSH
57099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57100: LD_ADDR_VAR 0 3
57104: PUSH
57105: LD_INT 22
57107: PUSH
57108: LD_OWVAR 2
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 25
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PPUSH
57131: CALL_OW 69
57135: ST_TO_ADDR
// if not tmp then
57136: LD_VAR 0 3
57140: NOT
57141: IFFALSE 57145
// exit ;
57143: GO 57201
// un := tmp [ rand ( 1 , tmp ) ] ;
57145: LD_ADDR_VAR 0 2
57149: PUSH
57150: LD_VAR 0 3
57154: PUSH
57155: LD_INT 1
57157: PPUSH
57158: LD_VAR 0 3
57162: PPUSH
57163: CALL_OW 12
57167: ARRAY
57168: ST_TO_ADDR
// if Crawls ( un ) then
57169: LD_VAR 0 2
57173: PPUSH
57174: CALL_OW 318
57178: IFFALSE 57189
// ComWalk ( un ) ;
57180: LD_VAR 0 2
57184: PPUSH
57185: CALL_OW 138
// SetClass ( un , class_mortar ) ;
57189: LD_VAR 0 2
57193: PPUSH
57194: LD_INT 8
57196: PPUSH
57197: CALL_OW 336
// end ;
57201: PPOPN 3
57203: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
57204: LD_EXP 15
57208: PUSH
57209: LD_EXP 59
57213: AND
57214: IFFALSE 57358
57216: GO 57218
57218: DISABLE
57219: LD_INT 0
57221: PPUSH
57222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
57223: LD_ADDR_VAR 0 2
57227: PUSH
57228: LD_INT 22
57230: PUSH
57231: LD_OWVAR 2
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 21
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 2
57252: PUSH
57253: LD_INT 34
57255: PUSH
57256: LD_INT 12
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 34
57265: PUSH
57266: LD_INT 51
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 34
57275: PUSH
57276: LD_INT 32
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: LIST
57293: PPUSH
57294: CALL_OW 69
57298: ST_TO_ADDR
// if not tmp then
57299: LD_VAR 0 2
57303: NOT
57304: IFFALSE 57308
// exit ;
57306: GO 57358
// for i in tmp do
57308: LD_ADDR_VAR 0 1
57312: PUSH
57313: LD_VAR 0 2
57317: PUSH
57318: FOR_IN
57319: IFFALSE 57356
// if GetCargo ( i , mat_artifact ) = 0 then
57321: LD_VAR 0 1
57325: PPUSH
57326: LD_INT 4
57328: PPUSH
57329: CALL_OW 289
57333: PUSH
57334: LD_INT 0
57336: EQUAL
57337: IFFALSE 57354
// SetCargo ( i , mat_siberit , 100 ) ;
57339: LD_VAR 0 1
57343: PPUSH
57344: LD_INT 3
57346: PPUSH
57347: LD_INT 100
57349: PPUSH
57350: CALL_OW 290
57354: GO 57318
57356: POP
57357: POP
// end ;
57358: PPOPN 2
57360: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
57361: LD_EXP 15
57365: PUSH
57366: LD_EXP 60
57370: AND
57371: IFFALSE 57554
57373: GO 57375
57375: DISABLE
57376: LD_INT 0
57378: PPUSH
57379: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57380: LD_ADDR_VAR 0 2
57384: PUSH
57385: LD_INT 22
57387: PUSH
57388: LD_OWVAR 2
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PPUSH
57397: CALL_OW 69
57401: ST_TO_ADDR
// if not tmp then
57402: LD_VAR 0 2
57406: NOT
57407: IFFALSE 57411
// exit ;
57409: GO 57554
// for i := 1 to 2 do
57411: LD_ADDR_VAR 0 1
57415: PUSH
57416: DOUBLE
57417: LD_INT 1
57419: DEC
57420: ST_TO_ADDR
57421: LD_INT 2
57423: PUSH
57424: FOR_TO
57425: IFFALSE 57552
// begin uc_side := your_side ;
57427: LD_ADDR_OWVAR 20
57431: PUSH
57432: LD_OWVAR 2
57436: ST_TO_ADDR
// uc_nation := nation_american ;
57437: LD_ADDR_OWVAR 21
57441: PUSH
57442: LD_INT 1
57444: ST_TO_ADDR
// vc_chassis := us_morphling ;
57445: LD_ADDR_OWVAR 37
57449: PUSH
57450: LD_INT 5
57452: ST_TO_ADDR
// vc_engine := engine_siberite ;
57453: LD_ADDR_OWVAR 39
57457: PUSH
57458: LD_INT 3
57460: ST_TO_ADDR
// vc_control := control_computer ;
57461: LD_ADDR_OWVAR 38
57465: PUSH
57466: LD_INT 3
57468: ST_TO_ADDR
// vc_weapon := us_double_laser ;
57469: LD_ADDR_OWVAR 40
57473: PUSH
57474: LD_INT 10
57476: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
57477: LD_VAR 0 2
57481: PUSH
57482: LD_INT 1
57484: ARRAY
57485: PPUSH
57486: CALL_OW 310
57490: NOT
57491: IFFALSE 57538
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
57493: CALL_OW 45
57497: PPUSH
57498: LD_VAR 0 2
57502: PUSH
57503: LD_INT 1
57505: ARRAY
57506: PPUSH
57507: CALL_OW 250
57511: PPUSH
57512: LD_VAR 0 2
57516: PUSH
57517: LD_INT 1
57519: ARRAY
57520: PPUSH
57521: CALL_OW 251
57525: PPUSH
57526: LD_INT 12
57528: PPUSH
57529: LD_INT 1
57531: PPUSH
57532: CALL_OW 50
57536: GO 57550
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
57538: CALL_OW 45
57542: PPUSH
57543: LD_INT 1
57545: PPUSH
57546: CALL_OW 51
// end ;
57550: GO 57424
57552: POP
57553: POP
// end ;
57554: PPOPN 2
57556: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
57557: LD_EXP 15
57561: PUSH
57562: LD_EXP 61
57566: AND
57567: IFFALSE 57789
57569: GO 57571
57571: DISABLE
57572: LD_INT 0
57574: PPUSH
57575: PPUSH
57576: PPUSH
57577: PPUSH
57578: PPUSH
57579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57580: LD_ADDR_VAR 0 6
57584: PUSH
57585: LD_INT 22
57587: PUSH
57588: LD_OWVAR 2
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 21
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 3
57609: PUSH
57610: LD_INT 23
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: LIST
57628: PPUSH
57629: CALL_OW 69
57633: ST_TO_ADDR
// if not tmp then
57634: LD_VAR 0 6
57638: NOT
57639: IFFALSE 57643
// exit ;
57641: GO 57789
// s1 := rand ( 1 , 4 ) ;
57643: LD_ADDR_VAR 0 2
57647: PUSH
57648: LD_INT 1
57650: PPUSH
57651: LD_INT 4
57653: PPUSH
57654: CALL_OW 12
57658: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
57659: LD_ADDR_VAR 0 4
57663: PUSH
57664: LD_VAR 0 6
57668: PUSH
57669: LD_INT 1
57671: ARRAY
57672: PPUSH
57673: LD_VAR 0 2
57677: PPUSH
57678: CALL_OW 259
57682: ST_TO_ADDR
// if s1 = 1 then
57683: LD_VAR 0 2
57687: PUSH
57688: LD_INT 1
57690: EQUAL
57691: IFFALSE 57711
// s2 := rand ( 2 , 4 ) else
57693: LD_ADDR_VAR 0 3
57697: PUSH
57698: LD_INT 2
57700: PPUSH
57701: LD_INT 4
57703: PPUSH
57704: CALL_OW 12
57708: ST_TO_ADDR
57709: GO 57719
// s2 := 1 ;
57711: LD_ADDR_VAR 0 3
57715: PUSH
57716: LD_INT 1
57718: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
57719: LD_ADDR_VAR 0 5
57723: PUSH
57724: LD_VAR 0 6
57728: PUSH
57729: LD_INT 1
57731: ARRAY
57732: PPUSH
57733: LD_VAR 0 3
57737: PPUSH
57738: CALL_OW 259
57742: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
57743: LD_VAR 0 6
57747: PUSH
57748: LD_INT 1
57750: ARRAY
57751: PPUSH
57752: LD_VAR 0 2
57756: PPUSH
57757: LD_VAR 0 5
57761: PPUSH
57762: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
57766: LD_VAR 0 6
57770: PUSH
57771: LD_INT 1
57773: ARRAY
57774: PPUSH
57775: LD_VAR 0 3
57779: PPUSH
57780: LD_VAR 0 4
57784: PPUSH
57785: CALL_OW 237
// end ;
57789: PPOPN 6
57791: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
57792: LD_EXP 15
57796: PUSH
57797: LD_EXP 62
57801: AND
57802: IFFALSE 57881
57804: GO 57806
57806: DISABLE
57807: LD_INT 0
57809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
57810: LD_ADDR_VAR 0 1
57814: PUSH
57815: LD_INT 22
57817: PUSH
57818: LD_OWVAR 2
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 30
57829: PUSH
57830: LD_INT 3
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PPUSH
57841: CALL_OW 69
57845: ST_TO_ADDR
// if not tmp then
57846: LD_VAR 0 1
57850: NOT
57851: IFFALSE 57855
// exit ;
57853: GO 57881
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57855: LD_VAR 0 1
57859: PUSH
57860: LD_INT 1
57862: PPUSH
57863: LD_VAR 0 1
57867: PPUSH
57868: CALL_OW 12
57872: ARRAY
57873: PPUSH
57874: LD_INT 1
57876: PPUSH
57877: CALL_OW 234
// end ;
57881: PPOPN 1
57883: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
57884: LD_EXP 15
57888: PUSH
57889: LD_EXP 63
57893: AND
57894: IFFALSE 58006
57896: GO 57898
57898: DISABLE
57899: LD_INT 0
57901: PPUSH
57902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
57903: LD_ADDR_VAR 0 2
57907: PUSH
57908: LD_INT 22
57910: PUSH
57911: LD_OWVAR 2
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: LD_INT 30
57925: PUSH
57926: LD_INT 27
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 30
57935: PUSH
57936: LD_INT 26
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 30
57945: PUSH
57946: LD_INT 28
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PPUSH
57963: CALL_OW 69
57967: ST_TO_ADDR
// if not tmp then
57968: LD_VAR 0 2
57972: NOT
57973: IFFALSE 57977
// exit ;
57975: GO 58006
// for i in tmp do
57977: LD_ADDR_VAR 0 1
57981: PUSH
57982: LD_VAR 0 2
57986: PUSH
57987: FOR_IN
57988: IFFALSE 58004
// SetLives ( i , 1 ) ;
57990: LD_VAR 0 1
57994: PPUSH
57995: LD_INT 1
57997: PPUSH
57998: CALL_OW 234
58002: GO 57987
58004: POP
58005: POP
// end ;
58006: PPOPN 2
58008: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
58009: LD_EXP 15
58013: PUSH
58014: LD_EXP 64
58018: AND
58019: IFFALSE 58306
58021: GO 58023
58023: DISABLE
58024: LD_INT 0
58026: PPUSH
58027: PPUSH
58028: PPUSH
// begin i := rand ( 1 , 7 ) ;
58029: LD_ADDR_VAR 0 1
58033: PUSH
58034: LD_INT 1
58036: PPUSH
58037: LD_INT 7
58039: PPUSH
58040: CALL_OW 12
58044: ST_TO_ADDR
// case i of 1 :
58045: LD_VAR 0 1
58049: PUSH
58050: LD_INT 1
58052: DOUBLE
58053: EQUAL
58054: IFTRUE 58058
58056: GO 58068
58058: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
58059: LD_STRING earthquake(getX(game), 0, 32)
58061: PPUSH
58062: CALL_OW 559
58066: GO 58306
58068: LD_INT 2
58070: DOUBLE
58071: EQUAL
58072: IFTRUE 58076
58074: GO 58090
58076: POP
// begin ToLua ( displayStucuk(); ) ;
58077: LD_STRING displayStucuk();
58079: PPUSH
58080: CALL_OW 559
// ResetFog ;
58084: CALL_OW 335
// end ; 3 :
58088: GO 58306
58090: LD_INT 3
58092: DOUBLE
58093: EQUAL
58094: IFTRUE 58098
58096: GO 58202
58098: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58099: LD_ADDR_VAR 0 2
58103: PUSH
58104: LD_INT 22
58106: PUSH
58107: LD_OWVAR 2
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 25
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PPUSH
58130: CALL_OW 69
58134: ST_TO_ADDR
// if not tmp then
58135: LD_VAR 0 2
58139: NOT
58140: IFFALSE 58144
// exit ;
58142: GO 58306
// un := tmp [ rand ( 1 , tmp ) ] ;
58144: LD_ADDR_VAR 0 3
58148: PUSH
58149: LD_VAR 0 2
58153: PUSH
58154: LD_INT 1
58156: PPUSH
58157: LD_VAR 0 2
58161: PPUSH
58162: CALL_OW 12
58166: ARRAY
58167: ST_TO_ADDR
// if Crawls ( un ) then
58168: LD_VAR 0 3
58172: PPUSH
58173: CALL_OW 318
58177: IFFALSE 58188
// ComWalk ( un ) ;
58179: LD_VAR 0 3
58183: PPUSH
58184: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58188: LD_VAR 0 3
58192: PPUSH
58193: LD_INT 8
58195: PPUSH
58196: CALL_OW 336
// end ; 4 :
58200: GO 58306
58202: LD_INT 4
58204: DOUBLE
58205: EQUAL
58206: IFTRUE 58210
58208: GO 58284
58210: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
58211: LD_ADDR_VAR 0 2
58215: PUSH
58216: LD_INT 22
58218: PUSH
58219: LD_OWVAR 2
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 30
58230: PUSH
58231: LD_INT 29
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PPUSH
58242: CALL_OW 69
58246: ST_TO_ADDR
// if not tmp then
58247: LD_VAR 0 2
58251: NOT
58252: IFFALSE 58256
// exit ;
58254: GO 58306
// CenterNowOnUnits ( tmp [ 1 ] ) ;
58256: LD_VAR 0 2
58260: PUSH
58261: LD_INT 1
58263: ARRAY
58264: PPUSH
58265: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
58269: LD_VAR 0 2
58273: PUSH
58274: LD_INT 1
58276: ARRAY
58277: PPUSH
58278: CALL_OW 65
// end ; 5 .. 7 :
58282: GO 58306
58284: LD_INT 5
58286: DOUBLE
58287: GREATEREQUAL
58288: IFFALSE 58296
58290: LD_INT 7
58292: DOUBLE
58293: LESSEQUAL
58294: IFTRUE 58298
58296: GO 58305
58298: POP
// StreamSibBomb ; end ;
58299: CALL 54543 0 0
58303: GO 58306
58305: POP
// end ;
58306: PPOPN 3
58308: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
58309: LD_EXP 15
58313: PUSH
58314: LD_EXP 65
58318: AND
58319: IFFALSE 58475
58321: GO 58323
58323: DISABLE
58324: LD_INT 0
58326: PPUSH
58327: PPUSH
58328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
58329: LD_ADDR_VAR 0 2
58333: PUSH
58334: LD_INT 81
58336: PUSH
58337: LD_OWVAR 2
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: LD_INT 21
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 21
58361: PUSH
58362: LD_INT 2
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: LIST
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PPUSH
58378: CALL_OW 69
58382: ST_TO_ADDR
// if not tmp then
58383: LD_VAR 0 2
58387: NOT
58388: IFFALSE 58392
// exit ;
58390: GO 58475
// p := 0 ;
58392: LD_ADDR_VAR 0 3
58396: PUSH
58397: LD_INT 0
58399: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
58400: LD_INT 35
58402: PPUSH
58403: CALL_OW 67
// p := p + 1 ;
58407: LD_ADDR_VAR 0 3
58411: PUSH
58412: LD_VAR 0 3
58416: PUSH
58417: LD_INT 1
58419: PLUS
58420: ST_TO_ADDR
// for i in tmp do
58421: LD_ADDR_VAR 0 1
58425: PUSH
58426: LD_VAR 0 2
58430: PUSH
58431: FOR_IN
58432: IFFALSE 58463
// if GetLives ( i ) < 1000 then
58434: LD_VAR 0 1
58438: PPUSH
58439: CALL_OW 256
58443: PUSH
58444: LD_INT 1000
58446: LESS
58447: IFFALSE 58461
// SetLives ( i , 1000 ) ;
58449: LD_VAR 0 1
58453: PPUSH
58454: LD_INT 1000
58456: PPUSH
58457: CALL_OW 234
58461: GO 58431
58463: POP
58464: POP
// until p > 20 ;
58465: LD_VAR 0 3
58469: PUSH
58470: LD_INT 20
58472: GREATER
58473: IFFALSE 58400
// end ;
58475: PPOPN 3
58477: END
// every 0 0$1 trigger StreamModeActive and sTime do
58478: LD_EXP 15
58482: PUSH
58483: LD_EXP 66
58487: AND
58488: IFFALSE 58523
58490: GO 58492
58492: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
58493: LD_INT 28
58495: PPUSH
58496: LD_OWVAR 2
58500: PPUSH
58501: LD_INT 2
58503: PPUSH
58504: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
58508: LD_INT 30
58510: PPUSH
58511: LD_OWVAR 2
58515: PPUSH
58516: LD_INT 2
58518: PPUSH
58519: CALL_OW 322
// end ;
58523: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
58524: LD_EXP 15
58528: PUSH
58529: LD_EXP 67
58533: AND
58534: IFFALSE 58655
58536: GO 58538
58538: DISABLE
58539: LD_INT 0
58541: PPUSH
58542: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58543: LD_ADDR_VAR 0 2
58547: PUSH
58548: LD_INT 22
58550: PUSH
58551: LD_OWVAR 2
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 21
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 3
58572: PUSH
58573: LD_INT 23
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: LIST
58591: PPUSH
58592: CALL_OW 69
58596: ST_TO_ADDR
// if not tmp then
58597: LD_VAR 0 2
58601: NOT
58602: IFFALSE 58606
// exit ;
58604: GO 58655
// for i in tmp do
58606: LD_ADDR_VAR 0 1
58610: PUSH
58611: LD_VAR 0 2
58615: PUSH
58616: FOR_IN
58617: IFFALSE 58653
// begin if Crawls ( i ) then
58619: LD_VAR 0 1
58623: PPUSH
58624: CALL_OW 318
58628: IFFALSE 58639
// ComWalk ( i ) ;
58630: LD_VAR 0 1
58634: PPUSH
58635: CALL_OW 138
// SetClass ( i , 2 ) ;
58639: LD_VAR 0 1
58643: PPUSH
58644: LD_INT 2
58646: PPUSH
58647: CALL_OW 336
// end ;
58651: GO 58616
58653: POP
58654: POP
// end ;
58655: PPOPN 2
58657: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
58658: LD_EXP 15
58662: PUSH
58663: LD_EXP 68
58667: AND
58668: IFFALSE 58956
58670: GO 58672
58672: DISABLE
58673: LD_INT 0
58675: PPUSH
58676: PPUSH
58677: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
58678: LD_OWVAR 2
58682: PPUSH
58683: LD_INT 9
58685: PPUSH
58686: LD_INT 1
58688: PPUSH
58689: LD_INT 1
58691: PPUSH
58692: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
58696: LD_INT 9
58698: PPUSH
58699: LD_OWVAR 2
58703: PPUSH
58704: CALL_OW 343
// uc_side := 9 ;
58708: LD_ADDR_OWVAR 20
58712: PUSH
58713: LD_INT 9
58715: ST_TO_ADDR
// uc_nation := 2 ;
58716: LD_ADDR_OWVAR 21
58720: PUSH
58721: LD_INT 2
58723: ST_TO_ADDR
// hc_name := Dark Warrior ;
58724: LD_ADDR_OWVAR 26
58728: PUSH
58729: LD_STRING Dark Warrior
58731: ST_TO_ADDR
// hc_gallery :=  ;
58732: LD_ADDR_OWVAR 33
58736: PUSH
58737: LD_STRING 
58739: ST_TO_ADDR
// hc_noskilllimit := true ;
58740: LD_ADDR_OWVAR 76
58744: PUSH
58745: LD_INT 1
58747: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
58748: LD_ADDR_OWVAR 31
58752: PUSH
58753: LD_INT 30
58755: PUSH
58756: LD_INT 30
58758: PUSH
58759: LD_INT 30
58761: PUSH
58762: LD_INT 30
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: ST_TO_ADDR
// un := CreateHuman ;
58771: LD_ADDR_VAR 0 3
58775: PUSH
58776: CALL_OW 44
58780: ST_TO_ADDR
// hc_noskilllimit := false ;
58781: LD_ADDR_OWVAR 76
58785: PUSH
58786: LD_INT 0
58788: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58789: LD_VAR 0 3
58793: PPUSH
58794: LD_INT 1
58796: PPUSH
58797: CALL_OW 51
// ToLua ( playRanger() ) ;
58801: LD_STRING playRanger()
58803: PPUSH
58804: CALL_OW 559
// p := 0 ;
58808: LD_ADDR_VAR 0 2
58812: PUSH
58813: LD_INT 0
58815: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
58816: LD_INT 35
58818: PPUSH
58819: CALL_OW 67
// p := p + 1 ;
58823: LD_ADDR_VAR 0 2
58827: PUSH
58828: LD_VAR 0 2
58832: PUSH
58833: LD_INT 1
58835: PLUS
58836: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
58837: LD_VAR 0 3
58841: PPUSH
58842: CALL_OW 256
58846: PUSH
58847: LD_INT 1000
58849: LESS
58850: IFFALSE 58864
// SetLives ( un , 1000 ) ;
58852: LD_VAR 0 3
58856: PPUSH
58857: LD_INT 1000
58859: PPUSH
58860: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
58864: LD_VAR 0 3
58868: PPUSH
58869: LD_INT 81
58871: PUSH
58872: LD_OWVAR 2
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 91
58883: PUSH
58884: LD_VAR 0 3
58888: PUSH
58889: LD_INT 30
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: LIST
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PPUSH
58901: CALL_OW 69
58905: PPUSH
58906: LD_VAR 0 3
58910: PPUSH
58911: CALL_OW 74
58915: PPUSH
58916: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
58920: LD_VAR 0 2
58924: PUSH
58925: LD_INT 80
58927: GREATER
58928: PUSH
58929: LD_VAR 0 3
58933: PPUSH
58934: CALL_OW 301
58938: OR
58939: IFFALSE 58816
// if un then
58941: LD_VAR 0 3
58945: IFFALSE 58956
// RemoveUnit ( un ) ;
58947: LD_VAR 0 3
58951: PPUSH
58952: CALL_OW 64
// end ;
58956: PPOPN 3
58958: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
58959: LD_EXP 69
58963: IFFALSE 59079
58965: GO 58967
58967: DISABLE
58968: LD_INT 0
58970: PPUSH
58971: PPUSH
58972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58973: LD_ADDR_VAR 0 2
58977: PUSH
58978: LD_INT 81
58980: PUSH
58981: LD_OWVAR 2
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 21
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PPUSH
59004: CALL_OW 69
59008: ST_TO_ADDR
// ToLua ( playComputer() ) ;
59009: LD_STRING playComputer()
59011: PPUSH
59012: CALL_OW 559
// if not tmp then
59016: LD_VAR 0 2
59020: NOT
59021: IFFALSE 59025
// exit ;
59023: GO 59079
// for i in tmp do
59025: LD_ADDR_VAR 0 1
59029: PUSH
59030: LD_VAR 0 2
59034: PUSH
59035: FOR_IN
59036: IFFALSE 59077
// for j := 1 to 4 do
59038: LD_ADDR_VAR 0 3
59042: PUSH
59043: DOUBLE
59044: LD_INT 1
59046: DEC
59047: ST_TO_ADDR
59048: LD_INT 4
59050: PUSH
59051: FOR_TO
59052: IFFALSE 59073
// SetSkill ( i , j , 10 ) ;
59054: LD_VAR 0 1
59058: PPUSH
59059: LD_VAR 0 3
59063: PPUSH
59064: LD_INT 10
59066: PPUSH
59067: CALL_OW 237
59071: GO 59051
59073: POP
59074: POP
59075: GO 59035
59077: POP
59078: POP
// end ;
59079: PPOPN 3
59081: END
// every 0 0$1 trigger s30 do var i , tmp ;
59082: LD_EXP 70
59086: IFFALSE 59155
59088: GO 59090
59090: DISABLE
59091: LD_INT 0
59093: PPUSH
59094: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59095: LD_ADDR_VAR 0 2
59099: PUSH
59100: LD_INT 22
59102: PUSH
59103: LD_OWVAR 2
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PPUSH
59112: CALL_OW 69
59116: ST_TO_ADDR
// if not tmp then
59117: LD_VAR 0 2
59121: NOT
59122: IFFALSE 59126
// exit ;
59124: GO 59155
// for i in tmp do
59126: LD_ADDR_VAR 0 1
59130: PUSH
59131: LD_VAR 0 2
59135: PUSH
59136: FOR_IN
59137: IFFALSE 59153
// SetLives ( i , 300 ) ;
59139: LD_VAR 0 1
59143: PPUSH
59144: LD_INT 300
59146: PPUSH
59147: CALL_OW 234
59151: GO 59136
59153: POP
59154: POP
// end ;
59155: PPOPN 2
59157: END
// every 0 0$1 trigger s60 do var i , tmp ;
59158: LD_EXP 71
59162: IFFALSE 59231
59164: GO 59166
59166: DISABLE
59167: LD_INT 0
59169: PPUSH
59170: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59171: LD_ADDR_VAR 0 2
59175: PUSH
59176: LD_INT 22
59178: PUSH
59179: LD_OWVAR 2
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PPUSH
59188: CALL_OW 69
59192: ST_TO_ADDR
// if not tmp then
59193: LD_VAR 0 2
59197: NOT
59198: IFFALSE 59202
// exit ;
59200: GO 59231
// for i in tmp do
59202: LD_ADDR_VAR 0 1
59206: PUSH
59207: LD_VAR 0 2
59211: PUSH
59212: FOR_IN
59213: IFFALSE 59229
// SetLives ( i , 600 ) ;
59215: LD_VAR 0 1
59219: PPUSH
59220: LD_INT 600
59222: PPUSH
59223: CALL_OW 234
59227: GO 59212
59229: POP
59230: POP
// end ;
59231: PPOPN 2
59233: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59234: LD_INT 0
59236: PPUSH
// case cmd of 301 :
59237: LD_VAR 0 1
59241: PUSH
59242: LD_INT 301
59244: DOUBLE
59245: EQUAL
59246: IFTRUE 59250
59248: GO 59282
59250: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
59251: LD_VAR 0 6
59255: PPUSH
59256: LD_VAR 0 7
59260: PPUSH
59261: LD_VAR 0 8
59265: PPUSH
59266: LD_VAR 0 4
59270: PPUSH
59271: LD_VAR 0 5
59275: PPUSH
59276: CALL 60491 0 5
59280: GO 59403
59282: LD_INT 302
59284: DOUBLE
59285: EQUAL
59286: IFTRUE 59290
59288: GO 59327
59290: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
59291: LD_VAR 0 6
59295: PPUSH
59296: LD_VAR 0 7
59300: PPUSH
59301: LD_VAR 0 8
59305: PPUSH
59306: LD_VAR 0 9
59310: PPUSH
59311: LD_VAR 0 4
59315: PPUSH
59316: LD_VAR 0 5
59320: PPUSH
59321: CALL 60582 0 6
59325: GO 59403
59327: LD_INT 303
59329: DOUBLE
59330: EQUAL
59331: IFTRUE 59335
59333: GO 59372
59335: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
59336: LD_VAR 0 6
59340: PPUSH
59341: LD_VAR 0 7
59345: PPUSH
59346: LD_VAR 0 8
59350: PPUSH
59351: LD_VAR 0 9
59355: PPUSH
59356: LD_VAR 0 4
59360: PPUSH
59361: LD_VAR 0 5
59365: PPUSH
59366: CALL 59408 0 6
59370: GO 59403
59372: LD_INT 304
59374: DOUBLE
59375: EQUAL
59376: IFTRUE 59380
59378: GO 59402
59380: POP
// hHackTeleport ( unit , x , y ) ; end ;
59381: LD_VAR 0 2
59385: PPUSH
59386: LD_VAR 0 4
59390: PPUSH
59391: LD_VAR 0 5
59395: PPUSH
59396: CALL 61175 0 3
59400: GO 59403
59402: POP
// end ;
59403: LD_VAR 0 12
59407: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
59408: LD_INT 0
59410: PPUSH
59411: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
59412: LD_VAR 0 1
59416: PUSH
59417: LD_INT 1
59419: LESS
59420: PUSH
59421: LD_VAR 0 1
59425: PUSH
59426: LD_INT 3
59428: GREATER
59429: OR
59430: PUSH
59431: LD_VAR 0 5
59435: PPUSH
59436: LD_VAR 0 6
59440: PPUSH
59441: CALL_OW 428
59445: OR
59446: IFFALSE 59450
// exit ;
59448: GO 60178
// uc_side := your_side ;
59450: LD_ADDR_OWVAR 20
59454: PUSH
59455: LD_OWVAR 2
59459: ST_TO_ADDR
// uc_nation := nation ;
59460: LD_ADDR_OWVAR 21
59464: PUSH
59465: LD_VAR 0 1
59469: ST_TO_ADDR
// bc_level = 1 ;
59470: LD_ADDR_OWVAR 43
59474: PUSH
59475: LD_INT 1
59477: ST_TO_ADDR
// case btype of 1 :
59478: LD_VAR 0 2
59482: PUSH
59483: LD_INT 1
59485: DOUBLE
59486: EQUAL
59487: IFTRUE 59491
59489: GO 59502
59491: POP
// bc_type := b_depot ; 2 :
59492: LD_ADDR_OWVAR 42
59496: PUSH
59497: LD_INT 0
59499: ST_TO_ADDR
59500: GO 60122
59502: LD_INT 2
59504: DOUBLE
59505: EQUAL
59506: IFTRUE 59510
59508: GO 59521
59510: POP
// bc_type := b_warehouse ; 3 :
59511: LD_ADDR_OWVAR 42
59515: PUSH
59516: LD_INT 1
59518: ST_TO_ADDR
59519: GO 60122
59521: LD_INT 3
59523: DOUBLE
59524: EQUAL
59525: IFTRUE 59529
59527: GO 59540
59529: POP
// bc_type := b_lab ; 4 .. 9 :
59530: LD_ADDR_OWVAR 42
59534: PUSH
59535: LD_INT 6
59537: ST_TO_ADDR
59538: GO 60122
59540: LD_INT 4
59542: DOUBLE
59543: GREATEREQUAL
59544: IFFALSE 59552
59546: LD_INT 9
59548: DOUBLE
59549: LESSEQUAL
59550: IFTRUE 59554
59552: GO 59614
59554: POP
// begin bc_type := b_lab_half ;
59555: LD_ADDR_OWVAR 42
59559: PUSH
59560: LD_INT 7
59562: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
59563: LD_ADDR_OWVAR 44
59567: PUSH
59568: LD_INT 10
59570: PUSH
59571: LD_INT 11
59573: PUSH
59574: LD_INT 12
59576: PUSH
59577: LD_INT 15
59579: PUSH
59580: LD_INT 14
59582: PUSH
59583: LD_INT 13
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: PUSH
59594: LD_VAR 0 2
59598: PUSH
59599: LD_INT 3
59601: MINUS
59602: ARRAY
59603: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
59604: LD_ADDR_OWVAR 45
59608: PUSH
59609: LD_INT 9
59611: ST_TO_ADDR
// end ; 10 .. 13 :
59612: GO 60122
59614: LD_INT 10
59616: DOUBLE
59617: GREATEREQUAL
59618: IFFALSE 59626
59620: LD_INT 13
59622: DOUBLE
59623: LESSEQUAL
59624: IFTRUE 59628
59626: GO 59705
59628: POP
// begin bc_type := b_lab_full ;
59629: LD_ADDR_OWVAR 42
59633: PUSH
59634: LD_INT 8
59636: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
59637: LD_ADDR_OWVAR 44
59641: PUSH
59642: LD_INT 10
59644: PUSH
59645: LD_INT 12
59647: PUSH
59648: LD_INT 14
59650: PUSH
59651: LD_INT 13
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: PUSH
59660: LD_VAR 0 2
59664: PUSH
59665: LD_INT 9
59667: MINUS
59668: ARRAY
59669: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
59670: LD_ADDR_OWVAR 45
59674: PUSH
59675: LD_INT 11
59677: PUSH
59678: LD_INT 15
59680: PUSH
59681: LD_INT 12
59683: PUSH
59684: LD_INT 15
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: PUSH
59693: LD_VAR 0 2
59697: PUSH
59698: LD_INT 9
59700: MINUS
59701: ARRAY
59702: ST_TO_ADDR
// end ; 14 :
59703: GO 60122
59705: LD_INT 14
59707: DOUBLE
59708: EQUAL
59709: IFTRUE 59713
59711: GO 59724
59713: POP
// bc_type := b_workshop ; 15 :
59714: LD_ADDR_OWVAR 42
59718: PUSH
59719: LD_INT 2
59721: ST_TO_ADDR
59722: GO 60122
59724: LD_INT 15
59726: DOUBLE
59727: EQUAL
59728: IFTRUE 59732
59730: GO 59743
59732: POP
// bc_type := b_factory ; 16 :
59733: LD_ADDR_OWVAR 42
59737: PUSH
59738: LD_INT 3
59740: ST_TO_ADDR
59741: GO 60122
59743: LD_INT 16
59745: DOUBLE
59746: EQUAL
59747: IFTRUE 59751
59749: GO 59762
59751: POP
// bc_type := b_ext_gun ; 17 :
59752: LD_ADDR_OWVAR 42
59756: PUSH
59757: LD_INT 17
59759: ST_TO_ADDR
59760: GO 60122
59762: LD_INT 17
59764: DOUBLE
59765: EQUAL
59766: IFTRUE 59770
59768: GO 59798
59770: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
59771: LD_ADDR_OWVAR 42
59775: PUSH
59776: LD_INT 19
59778: PUSH
59779: LD_INT 23
59781: PUSH
59782: LD_INT 19
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: LIST
59789: PUSH
59790: LD_VAR 0 1
59794: ARRAY
59795: ST_TO_ADDR
59796: GO 60122
59798: LD_INT 18
59800: DOUBLE
59801: EQUAL
59802: IFTRUE 59806
59804: GO 59817
59806: POP
// bc_type := b_ext_radar ; 19 :
59807: LD_ADDR_OWVAR 42
59811: PUSH
59812: LD_INT 20
59814: ST_TO_ADDR
59815: GO 60122
59817: LD_INT 19
59819: DOUBLE
59820: EQUAL
59821: IFTRUE 59825
59823: GO 59836
59825: POP
// bc_type := b_ext_radio ; 20 :
59826: LD_ADDR_OWVAR 42
59830: PUSH
59831: LD_INT 22
59833: ST_TO_ADDR
59834: GO 60122
59836: LD_INT 20
59838: DOUBLE
59839: EQUAL
59840: IFTRUE 59844
59842: GO 59855
59844: POP
// bc_type := b_ext_siberium ; 21 :
59845: LD_ADDR_OWVAR 42
59849: PUSH
59850: LD_INT 21
59852: ST_TO_ADDR
59853: GO 60122
59855: LD_INT 21
59857: DOUBLE
59858: EQUAL
59859: IFTRUE 59863
59861: GO 59874
59863: POP
// bc_type := b_ext_computer ; 22 :
59864: LD_ADDR_OWVAR 42
59868: PUSH
59869: LD_INT 24
59871: ST_TO_ADDR
59872: GO 60122
59874: LD_INT 22
59876: DOUBLE
59877: EQUAL
59878: IFTRUE 59882
59880: GO 59893
59882: POP
// bc_type := b_ext_track ; 23 :
59883: LD_ADDR_OWVAR 42
59887: PUSH
59888: LD_INT 16
59890: ST_TO_ADDR
59891: GO 60122
59893: LD_INT 23
59895: DOUBLE
59896: EQUAL
59897: IFTRUE 59901
59899: GO 59912
59901: POP
// bc_type := b_ext_laser ; 24 :
59902: LD_ADDR_OWVAR 42
59906: PUSH
59907: LD_INT 25
59909: ST_TO_ADDR
59910: GO 60122
59912: LD_INT 24
59914: DOUBLE
59915: EQUAL
59916: IFTRUE 59920
59918: GO 59931
59920: POP
// bc_type := b_control_tower ; 25 :
59921: LD_ADDR_OWVAR 42
59925: PUSH
59926: LD_INT 36
59928: ST_TO_ADDR
59929: GO 60122
59931: LD_INT 25
59933: DOUBLE
59934: EQUAL
59935: IFTRUE 59939
59937: GO 59950
59939: POP
// bc_type := b_breastwork ; 26 :
59940: LD_ADDR_OWVAR 42
59944: PUSH
59945: LD_INT 31
59947: ST_TO_ADDR
59948: GO 60122
59950: LD_INT 26
59952: DOUBLE
59953: EQUAL
59954: IFTRUE 59958
59956: GO 59969
59958: POP
// bc_type := b_bunker ; 27 :
59959: LD_ADDR_OWVAR 42
59963: PUSH
59964: LD_INT 32
59966: ST_TO_ADDR
59967: GO 60122
59969: LD_INT 27
59971: DOUBLE
59972: EQUAL
59973: IFTRUE 59977
59975: GO 59988
59977: POP
// bc_type := b_turret ; 28 :
59978: LD_ADDR_OWVAR 42
59982: PUSH
59983: LD_INT 33
59985: ST_TO_ADDR
59986: GO 60122
59988: LD_INT 28
59990: DOUBLE
59991: EQUAL
59992: IFTRUE 59996
59994: GO 60007
59996: POP
// bc_type := b_armoury ; 29 :
59997: LD_ADDR_OWVAR 42
60001: PUSH
60002: LD_INT 4
60004: ST_TO_ADDR
60005: GO 60122
60007: LD_INT 29
60009: DOUBLE
60010: EQUAL
60011: IFTRUE 60015
60013: GO 60026
60015: POP
// bc_type := b_barracks ; 30 :
60016: LD_ADDR_OWVAR 42
60020: PUSH
60021: LD_INT 5
60023: ST_TO_ADDR
60024: GO 60122
60026: LD_INT 30
60028: DOUBLE
60029: EQUAL
60030: IFTRUE 60034
60032: GO 60045
60034: POP
// bc_type := b_solar_power ; 31 :
60035: LD_ADDR_OWVAR 42
60039: PUSH
60040: LD_INT 27
60042: ST_TO_ADDR
60043: GO 60122
60045: LD_INT 31
60047: DOUBLE
60048: EQUAL
60049: IFTRUE 60053
60051: GO 60064
60053: POP
// bc_type := b_oil_power ; 32 :
60054: LD_ADDR_OWVAR 42
60058: PUSH
60059: LD_INT 26
60061: ST_TO_ADDR
60062: GO 60122
60064: LD_INT 32
60066: DOUBLE
60067: EQUAL
60068: IFTRUE 60072
60070: GO 60083
60072: POP
// bc_type := b_siberite_power ; 33 :
60073: LD_ADDR_OWVAR 42
60077: PUSH
60078: LD_INT 28
60080: ST_TO_ADDR
60081: GO 60122
60083: LD_INT 33
60085: DOUBLE
60086: EQUAL
60087: IFTRUE 60091
60089: GO 60102
60091: POP
// bc_type := b_oil_mine ; 34 :
60092: LD_ADDR_OWVAR 42
60096: PUSH
60097: LD_INT 29
60099: ST_TO_ADDR
60100: GO 60122
60102: LD_INT 34
60104: DOUBLE
60105: EQUAL
60106: IFTRUE 60110
60108: GO 60121
60110: POP
// bc_type := b_siberite_mine ; end ;
60111: LD_ADDR_OWVAR 42
60115: PUSH
60116: LD_INT 30
60118: ST_TO_ADDR
60119: GO 60122
60121: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
60122: LD_ADDR_VAR 0 8
60126: PUSH
60127: LD_VAR 0 5
60131: PPUSH
60132: LD_VAR 0 6
60136: PPUSH
60137: LD_VAR 0 3
60141: PPUSH
60142: CALL_OW 47
60146: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
60147: LD_OWVAR 42
60151: PUSH
60152: LD_INT 32
60154: PUSH
60155: LD_INT 33
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: IN
60162: IFFALSE 60178
// PlaceWeaponTurret ( b , weapon ) ;
60164: LD_VAR 0 8
60168: PPUSH
60169: LD_VAR 0 4
60173: PPUSH
60174: CALL_OW 431
// end ;
60178: LD_VAR 0 7
60182: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
60183: LD_INT 0
60185: PPUSH
60186: PPUSH
60187: PPUSH
60188: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60189: LD_ADDR_VAR 0 4
60193: PUSH
60194: LD_INT 22
60196: PUSH
60197: LD_OWVAR 2
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: LD_INT 30
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 30
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: LIST
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PPUSH
60238: CALL_OW 69
60242: ST_TO_ADDR
// if not tmp then
60243: LD_VAR 0 4
60247: NOT
60248: IFFALSE 60252
// exit ;
60250: GO 60311
// for i in tmp do
60252: LD_ADDR_VAR 0 2
60256: PUSH
60257: LD_VAR 0 4
60261: PUSH
60262: FOR_IN
60263: IFFALSE 60309
// for j = 1 to 3 do
60265: LD_ADDR_VAR 0 3
60269: PUSH
60270: DOUBLE
60271: LD_INT 1
60273: DEC
60274: ST_TO_ADDR
60275: LD_INT 3
60277: PUSH
60278: FOR_TO
60279: IFFALSE 60305
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
60281: LD_VAR 0 2
60285: PPUSH
60286: CALL_OW 274
60290: PPUSH
60291: LD_VAR 0 3
60295: PPUSH
60296: LD_INT 99999
60298: PPUSH
60299: CALL_OW 277
60303: GO 60278
60305: POP
60306: POP
60307: GO 60262
60309: POP
60310: POP
// end ;
60311: LD_VAR 0 1
60315: RET
// export function hHackSetLevel10 ; var i , j ; begin
60316: LD_INT 0
60318: PPUSH
60319: PPUSH
60320: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
60321: LD_ADDR_VAR 0 2
60325: PUSH
60326: LD_INT 21
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PPUSH
60336: CALL_OW 69
60340: PUSH
60341: FOR_IN
60342: IFFALSE 60394
// if IsSelected ( i ) then
60344: LD_VAR 0 2
60348: PPUSH
60349: CALL_OW 306
60353: IFFALSE 60392
// begin for j := 1 to 4 do
60355: LD_ADDR_VAR 0 3
60359: PUSH
60360: DOUBLE
60361: LD_INT 1
60363: DEC
60364: ST_TO_ADDR
60365: LD_INT 4
60367: PUSH
60368: FOR_TO
60369: IFFALSE 60390
// SetSkill ( i , j , 10 ) ;
60371: LD_VAR 0 2
60375: PPUSH
60376: LD_VAR 0 3
60380: PPUSH
60381: LD_INT 10
60383: PPUSH
60384: CALL_OW 237
60388: GO 60368
60390: POP
60391: POP
// end ;
60392: GO 60341
60394: POP
60395: POP
// end ;
60396: LD_VAR 0 1
60400: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
60401: LD_INT 0
60403: PPUSH
60404: PPUSH
60405: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
60406: LD_ADDR_VAR 0 2
60410: PUSH
60411: LD_INT 22
60413: PUSH
60414: LD_OWVAR 2
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 21
60425: PUSH
60426: LD_INT 1
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PPUSH
60437: CALL_OW 69
60441: PUSH
60442: FOR_IN
60443: IFFALSE 60484
// begin for j := 1 to 4 do
60445: LD_ADDR_VAR 0 3
60449: PUSH
60450: DOUBLE
60451: LD_INT 1
60453: DEC
60454: ST_TO_ADDR
60455: LD_INT 4
60457: PUSH
60458: FOR_TO
60459: IFFALSE 60480
// SetSkill ( i , j , 10 ) ;
60461: LD_VAR 0 2
60465: PPUSH
60466: LD_VAR 0 3
60470: PPUSH
60471: LD_INT 10
60473: PPUSH
60474: CALL_OW 237
60478: GO 60458
60480: POP
60481: POP
// end ;
60482: GO 60442
60484: POP
60485: POP
// end ;
60486: LD_VAR 0 1
60490: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
60491: LD_INT 0
60493: PPUSH
// uc_side := your_side ;
60494: LD_ADDR_OWVAR 20
60498: PUSH
60499: LD_OWVAR 2
60503: ST_TO_ADDR
// uc_nation := nation ;
60504: LD_ADDR_OWVAR 21
60508: PUSH
60509: LD_VAR 0 1
60513: ST_TO_ADDR
// InitHc ;
60514: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
60518: LD_INT 0
60520: PPUSH
60521: LD_VAR 0 2
60525: PPUSH
60526: LD_VAR 0 3
60530: PPUSH
60531: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
60535: LD_VAR 0 4
60539: PPUSH
60540: LD_VAR 0 5
60544: PPUSH
60545: CALL_OW 428
60549: PUSH
60550: LD_INT 0
60552: EQUAL
60553: IFFALSE 60577
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
60555: CALL_OW 44
60559: PPUSH
60560: LD_VAR 0 4
60564: PPUSH
60565: LD_VAR 0 5
60569: PPUSH
60570: LD_INT 1
60572: PPUSH
60573: CALL_OW 48
// end ;
60577: LD_VAR 0 6
60581: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
60582: LD_INT 0
60584: PPUSH
60585: PPUSH
// uc_side := your_side ;
60586: LD_ADDR_OWVAR 20
60590: PUSH
60591: LD_OWVAR 2
60595: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
60596: LD_VAR 0 1
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: LD_INT 2
60606: PUSH
60607: LD_INT 3
60609: PUSH
60610: LD_INT 4
60612: PUSH
60613: LD_INT 5
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: IN
60623: IFFALSE 60635
// uc_nation := nation_american else
60625: LD_ADDR_OWVAR 21
60629: PUSH
60630: LD_INT 1
60632: ST_TO_ADDR
60633: GO 60678
// if chassis in [ 11 , 12 , 13 , 14 ] then
60635: LD_VAR 0 1
60639: PUSH
60640: LD_INT 11
60642: PUSH
60643: LD_INT 12
60645: PUSH
60646: LD_INT 13
60648: PUSH
60649: LD_INT 14
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: IN
60658: IFFALSE 60670
// uc_nation := nation_arabian else
60660: LD_ADDR_OWVAR 21
60664: PUSH
60665: LD_INT 2
60667: ST_TO_ADDR
60668: GO 60678
// uc_nation := nation_russian ;
60670: LD_ADDR_OWVAR 21
60674: PUSH
60675: LD_INT 3
60677: ST_TO_ADDR
// vc_chassis := chassis ;
60678: LD_ADDR_OWVAR 37
60682: PUSH
60683: LD_VAR 0 1
60687: ST_TO_ADDR
// vc_engine := engine ;
60688: LD_ADDR_OWVAR 39
60692: PUSH
60693: LD_VAR 0 2
60697: ST_TO_ADDR
// vc_control := control ;
60698: LD_ADDR_OWVAR 38
60702: PUSH
60703: LD_VAR 0 3
60707: ST_TO_ADDR
// vc_weapon := weapon ;
60708: LD_ADDR_OWVAR 40
60712: PUSH
60713: LD_VAR 0 4
60717: ST_TO_ADDR
// un := CreateVehicle ;
60718: LD_ADDR_VAR 0 8
60722: PUSH
60723: CALL_OW 45
60727: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
60728: LD_VAR 0 8
60732: PPUSH
60733: LD_INT 0
60735: PPUSH
60736: LD_INT 5
60738: PPUSH
60739: CALL_OW 12
60743: PPUSH
60744: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
60748: LD_VAR 0 8
60752: PPUSH
60753: LD_VAR 0 5
60757: PPUSH
60758: LD_VAR 0 6
60762: PPUSH
60763: LD_INT 1
60765: PPUSH
60766: CALL_OW 48
// end ;
60770: LD_VAR 0 7
60774: RET
// export hInvincible ; every 1 do
60775: GO 60777
60777: DISABLE
// hInvincible := [ ] ;
60778: LD_ADDR_EXP 72
60782: PUSH
60783: EMPTY
60784: ST_TO_ADDR
60785: END
// every 10 do var i ;
60786: GO 60788
60788: DISABLE
60789: LD_INT 0
60791: PPUSH
// begin enable ;
60792: ENABLE
// if not hInvincible then
60793: LD_EXP 72
60797: NOT
60798: IFFALSE 60802
// exit ;
60800: GO 60846
// for i in hInvincible do
60802: LD_ADDR_VAR 0 1
60806: PUSH
60807: LD_EXP 72
60811: PUSH
60812: FOR_IN
60813: IFFALSE 60844
// if GetLives ( i ) < 1000 then
60815: LD_VAR 0 1
60819: PPUSH
60820: CALL_OW 256
60824: PUSH
60825: LD_INT 1000
60827: LESS
60828: IFFALSE 60842
// SetLives ( i , 1000 ) ;
60830: LD_VAR 0 1
60834: PPUSH
60835: LD_INT 1000
60837: PPUSH
60838: CALL_OW 234
60842: GO 60812
60844: POP
60845: POP
// end ;
60846: PPOPN 1
60848: END
// export function hHackInvincible ; var i ; begin
60849: LD_INT 0
60851: PPUSH
60852: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
60853: LD_ADDR_VAR 0 2
60857: PUSH
60858: LD_INT 2
60860: PUSH
60861: LD_INT 21
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 21
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: LIST
60885: PPUSH
60886: CALL_OW 69
60890: PUSH
60891: FOR_IN
60892: IFFALSE 60953
// if IsSelected ( i ) then
60894: LD_VAR 0 2
60898: PPUSH
60899: CALL_OW 306
60903: IFFALSE 60951
// begin if i in hInvincible then
60905: LD_VAR 0 2
60909: PUSH
60910: LD_EXP 72
60914: IN
60915: IFFALSE 60935
// hInvincible := hInvincible diff i else
60917: LD_ADDR_EXP 72
60921: PUSH
60922: LD_EXP 72
60926: PUSH
60927: LD_VAR 0 2
60931: DIFF
60932: ST_TO_ADDR
60933: GO 60951
// hInvincible := hInvincible union i ;
60935: LD_ADDR_EXP 72
60939: PUSH
60940: LD_EXP 72
60944: PUSH
60945: LD_VAR 0 2
60949: UNION
60950: ST_TO_ADDR
// end ;
60951: GO 60891
60953: POP
60954: POP
// end ;
60955: LD_VAR 0 1
60959: RET
// export function hHackInvisible ; var i , j ; begin
60960: LD_INT 0
60962: PPUSH
60963: PPUSH
60964: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
60965: LD_ADDR_VAR 0 2
60969: PUSH
60970: LD_INT 21
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PPUSH
60980: CALL_OW 69
60984: PUSH
60985: FOR_IN
60986: IFFALSE 61010
// if IsSelected ( i ) then
60988: LD_VAR 0 2
60992: PPUSH
60993: CALL_OW 306
60997: IFFALSE 61008
// ComForceInvisible ( i ) ;
60999: LD_VAR 0 2
61003: PPUSH
61004: CALL_OW 496
61008: GO 60985
61010: POP
61011: POP
// end ;
61012: LD_VAR 0 1
61016: RET
// export function hHackChangeYourSide ; begin
61017: LD_INT 0
61019: PPUSH
// if your_side = 8 then
61020: LD_OWVAR 2
61024: PUSH
61025: LD_INT 8
61027: EQUAL
61028: IFFALSE 61040
// your_side := 0 else
61030: LD_ADDR_OWVAR 2
61034: PUSH
61035: LD_INT 0
61037: ST_TO_ADDR
61038: GO 61054
// your_side := your_side + 1 ;
61040: LD_ADDR_OWVAR 2
61044: PUSH
61045: LD_OWVAR 2
61049: PUSH
61050: LD_INT 1
61052: PLUS
61053: ST_TO_ADDR
// end ;
61054: LD_VAR 0 1
61058: RET
// export function hHackChangeUnitSide ; var i , j ; begin
61059: LD_INT 0
61061: PPUSH
61062: PPUSH
61063: PPUSH
// for i in all_units do
61064: LD_ADDR_VAR 0 2
61068: PUSH
61069: LD_OWVAR 3
61073: PUSH
61074: FOR_IN
61075: IFFALSE 61153
// if IsSelected ( i ) then
61077: LD_VAR 0 2
61081: PPUSH
61082: CALL_OW 306
61086: IFFALSE 61151
// begin j := GetSide ( i ) ;
61088: LD_ADDR_VAR 0 3
61092: PUSH
61093: LD_VAR 0 2
61097: PPUSH
61098: CALL_OW 255
61102: ST_TO_ADDR
// if j = 8 then
61103: LD_VAR 0 3
61107: PUSH
61108: LD_INT 8
61110: EQUAL
61111: IFFALSE 61123
// j := 0 else
61113: LD_ADDR_VAR 0 3
61117: PUSH
61118: LD_INT 0
61120: ST_TO_ADDR
61121: GO 61137
// j := j + 1 ;
61123: LD_ADDR_VAR 0 3
61127: PUSH
61128: LD_VAR 0 3
61132: PUSH
61133: LD_INT 1
61135: PLUS
61136: ST_TO_ADDR
// SetSide ( i , j ) ;
61137: LD_VAR 0 2
61141: PPUSH
61142: LD_VAR 0 3
61146: PPUSH
61147: CALL_OW 235
// end ;
61151: GO 61074
61153: POP
61154: POP
// end ;
61155: LD_VAR 0 1
61159: RET
// export function hHackFog ; begin
61160: LD_INT 0
61162: PPUSH
// FogOff ( true ) ;
61163: LD_INT 1
61165: PPUSH
61166: CALL_OW 344
// end ;
61170: LD_VAR 0 1
61174: RET
// export function hHackTeleport ( unit , x , y ) ; begin
61175: LD_INT 0
61177: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
61178: LD_VAR 0 1
61182: PPUSH
61183: LD_VAR 0 2
61187: PPUSH
61188: LD_VAR 0 3
61192: PPUSH
61193: LD_INT 1
61195: PPUSH
61196: LD_INT 1
61198: PPUSH
61199: CALL_OW 483
// CenterOnXY ( x , y ) ;
61203: LD_VAR 0 2
61207: PPUSH
61208: LD_VAR 0 3
61212: PPUSH
61213: CALL_OW 84
// end ;
61217: LD_VAR 0 4
61221: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61222: LD_INT 0
61224: PPUSH
61225: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61226: LD_VAR 0 1
61230: NOT
61231: PUSH
61232: LD_VAR 0 2
61236: PPUSH
61237: LD_VAR 0 3
61241: PPUSH
61242: CALL_OW 488
61246: NOT
61247: OR
61248: PUSH
61249: LD_VAR 0 1
61253: PPUSH
61254: CALL_OW 266
61258: PUSH
61259: LD_INT 3
61261: NONEQUAL
61262: PUSH
61263: LD_VAR 0 1
61267: PPUSH
61268: CALL_OW 247
61272: PUSH
61273: LD_INT 1
61275: EQUAL
61276: NOT
61277: AND
61278: OR
61279: IFFALSE 61283
// exit ;
61281: GO 61432
// if GetType ( factory ) = unit_human then
61283: LD_VAR 0 1
61287: PPUSH
61288: CALL_OW 247
61292: PUSH
61293: LD_INT 1
61295: EQUAL
61296: IFFALSE 61313
// factory := IsInUnit ( factory ) ;
61298: LD_ADDR_VAR 0 1
61302: PUSH
61303: LD_VAR 0 1
61307: PPUSH
61308: CALL_OW 310
61312: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61313: LD_VAR 0 1
61317: PPUSH
61318: CALL_OW 266
61322: PUSH
61323: LD_INT 3
61325: NONEQUAL
61326: IFFALSE 61330
// exit ;
61328: GO 61432
// if HexInfo ( x , y ) = factory then
61330: LD_VAR 0 2
61334: PPUSH
61335: LD_VAR 0 3
61339: PPUSH
61340: CALL_OW 428
61344: PUSH
61345: LD_VAR 0 1
61349: EQUAL
61350: IFFALSE 61377
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
61352: LD_ADDR_EXP 73
61356: PUSH
61357: LD_EXP 73
61361: PPUSH
61362: LD_VAR 0 1
61366: PPUSH
61367: LD_INT 0
61369: PPUSH
61370: CALL_OW 1
61374: ST_TO_ADDR
61375: GO 61428
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
61377: LD_ADDR_EXP 73
61381: PUSH
61382: LD_EXP 73
61386: PPUSH
61387: LD_VAR 0 1
61391: PPUSH
61392: LD_VAR 0 1
61396: PPUSH
61397: CALL_OW 255
61401: PUSH
61402: LD_VAR 0 1
61406: PUSH
61407: LD_VAR 0 2
61411: PUSH
61412: LD_VAR 0 3
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: PPUSH
61423: CALL_OW 1
61427: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61428: CALL 61437 0 0
// end ;
61432: LD_VAR 0 4
61436: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61437: LD_INT 0
61439: PPUSH
61440: PPUSH
61441: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61442: LD_STRING resetFactoryWaypoint();
61444: PPUSH
61445: CALL_OW 559
// if factoryWaypoints then
61449: LD_EXP 73
61453: IFFALSE 61579
// begin list := PrepareArray ( factoryWaypoints ) ;
61455: LD_ADDR_VAR 0 3
61459: PUSH
61460: LD_EXP 73
61464: PPUSH
61465: CALL 42589 0 1
61469: ST_TO_ADDR
// for i := 1 to list do
61470: LD_ADDR_VAR 0 2
61474: PUSH
61475: DOUBLE
61476: LD_INT 1
61478: DEC
61479: ST_TO_ADDR
61480: LD_VAR 0 3
61484: PUSH
61485: FOR_TO
61486: IFFALSE 61577
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61488: LD_STRING setFactoryWaypointXY(
61490: PUSH
61491: LD_VAR 0 3
61495: PUSH
61496: LD_VAR 0 2
61500: ARRAY
61501: PUSH
61502: LD_INT 1
61504: ARRAY
61505: STR
61506: PUSH
61507: LD_STRING ,
61509: STR
61510: PUSH
61511: LD_VAR 0 3
61515: PUSH
61516: LD_VAR 0 2
61520: ARRAY
61521: PUSH
61522: LD_INT 2
61524: ARRAY
61525: STR
61526: PUSH
61527: LD_STRING ,
61529: STR
61530: PUSH
61531: LD_VAR 0 3
61535: PUSH
61536: LD_VAR 0 2
61540: ARRAY
61541: PUSH
61542: LD_INT 3
61544: ARRAY
61545: STR
61546: PUSH
61547: LD_STRING ,
61549: STR
61550: PUSH
61551: LD_VAR 0 3
61555: PUSH
61556: LD_VAR 0 2
61560: ARRAY
61561: PUSH
61562: LD_INT 4
61564: ARRAY
61565: STR
61566: PUSH
61567: LD_STRING )
61569: STR
61570: PPUSH
61571: CALL_OW 559
61575: GO 61485
61577: POP
61578: POP
// end ; end ;
61579: LD_VAR 0 1
61583: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61584: LD_INT 0
61586: PPUSH
// if HexInfo ( x , y ) = warehouse then
61587: LD_VAR 0 2
61591: PPUSH
61592: LD_VAR 0 3
61596: PPUSH
61597: CALL_OW 428
61601: PUSH
61602: LD_VAR 0 1
61606: EQUAL
61607: IFFALSE 61634
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61609: LD_ADDR_EXP 74
61613: PUSH
61614: LD_EXP 74
61618: PPUSH
61619: LD_VAR 0 1
61623: PPUSH
61624: LD_INT 0
61626: PPUSH
61627: CALL_OW 1
61631: ST_TO_ADDR
61632: GO 61685
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61634: LD_ADDR_EXP 74
61638: PUSH
61639: LD_EXP 74
61643: PPUSH
61644: LD_VAR 0 1
61648: PPUSH
61649: LD_VAR 0 1
61653: PPUSH
61654: CALL_OW 255
61658: PUSH
61659: LD_VAR 0 1
61663: PUSH
61664: LD_VAR 0 2
61668: PUSH
61669: LD_VAR 0 3
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: PPUSH
61680: CALL_OW 1
61684: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61685: CALL 61694 0 0
// end ;
61689: LD_VAR 0 4
61693: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61694: LD_INT 0
61696: PPUSH
61697: PPUSH
61698: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61699: LD_STRING resetWarehouseGatheringPoints();
61701: PPUSH
61702: CALL_OW 559
// if warehouseGatheringPoints then
61706: LD_EXP 74
61710: IFFALSE 61836
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
61712: LD_ADDR_VAR 0 3
61716: PUSH
61717: LD_EXP 74
61721: PPUSH
61722: CALL 42589 0 1
61726: ST_TO_ADDR
// for i := 1 to list do
61727: LD_ADDR_VAR 0 2
61731: PUSH
61732: DOUBLE
61733: LD_INT 1
61735: DEC
61736: ST_TO_ADDR
61737: LD_VAR 0 3
61741: PUSH
61742: FOR_TO
61743: IFFALSE 61834
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61745: LD_STRING setWarehouseGatheringPointXY(
61747: PUSH
61748: LD_VAR 0 3
61752: PUSH
61753: LD_VAR 0 2
61757: ARRAY
61758: PUSH
61759: LD_INT 1
61761: ARRAY
61762: STR
61763: PUSH
61764: LD_STRING ,
61766: STR
61767: PUSH
61768: LD_VAR 0 3
61772: PUSH
61773: LD_VAR 0 2
61777: ARRAY
61778: PUSH
61779: LD_INT 2
61781: ARRAY
61782: STR
61783: PUSH
61784: LD_STRING ,
61786: STR
61787: PUSH
61788: LD_VAR 0 3
61792: PUSH
61793: LD_VAR 0 2
61797: ARRAY
61798: PUSH
61799: LD_INT 3
61801: ARRAY
61802: STR
61803: PUSH
61804: LD_STRING ,
61806: STR
61807: PUSH
61808: LD_VAR 0 3
61812: PUSH
61813: LD_VAR 0 2
61817: ARRAY
61818: PUSH
61819: LD_INT 4
61821: ARRAY
61822: STR
61823: PUSH
61824: LD_STRING )
61826: STR
61827: PPUSH
61828: CALL_OW 559
61832: GO 61742
61834: POP
61835: POP
// end ; end ;
61836: LD_VAR 0 1
61840: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
61841: LD_EXP 74
61845: IFFALSE 62530
61847: GO 61849
61849: DISABLE
61850: LD_INT 0
61852: PPUSH
61853: PPUSH
61854: PPUSH
61855: PPUSH
61856: PPUSH
61857: PPUSH
61858: PPUSH
61859: PPUSH
61860: PPUSH
// begin enable ;
61861: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
61862: LD_ADDR_VAR 0 3
61866: PUSH
61867: LD_EXP 74
61871: PPUSH
61872: CALL 42589 0 1
61876: ST_TO_ADDR
// if not list then
61877: LD_VAR 0 3
61881: NOT
61882: IFFALSE 61886
// exit ;
61884: GO 62530
// for i := 1 to list do
61886: LD_ADDR_VAR 0 1
61890: PUSH
61891: DOUBLE
61892: LD_INT 1
61894: DEC
61895: ST_TO_ADDR
61896: LD_VAR 0 3
61900: PUSH
61901: FOR_TO
61902: IFFALSE 62528
// begin depot := list [ i ] [ 2 ] ;
61904: LD_ADDR_VAR 0 8
61908: PUSH
61909: LD_VAR 0 3
61913: PUSH
61914: LD_VAR 0 1
61918: ARRAY
61919: PUSH
61920: LD_INT 2
61922: ARRAY
61923: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
61924: LD_ADDR_VAR 0 5
61928: PUSH
61929: LD_VAR 0 3
61933: PUSH
61934: LD_VAR 0 1
61938: ARRAY
61939: PUSH
61940: LD_INT 1
61942: ARRAY
61943: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
61944: LD_VAR 0 8
61948: PPUSH
61949: CALL_OW 301
61953: PUSH
61954: LD_VAR 0 5
61958: PUSH
61959: LD_VAR 0 8
61963: PPUSH
61964: CALL_OW 255
61968: NONEQUAL
61969: OR
61970: IFFALSE 61999
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
61972: LD_ADDR_EXP 74
61976: PUSH
61977: LD_EXP 74
61981: PPUSH
61982: LD_VAR 0 8
61986: PPUSH
61987: LD_INT 0
61989: PPUSH
61990: CALL_OW 1
61994: ST_TO_ADDR
// exit ;
61995: POP
61996: POP
61997: GO 62530
// end ; x := list [ i ] [ 3 ] ;
61999: LD_ADDR_VAR 0 6
62003: PUSH
62004: LD_VAR 0 3
62008: PUSH
62009: LD_VAR 0 1
62013: ARRAY
62014: PUSH
62015: LD_INT 3
62017: ARRAY
62018: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
62019: LD_ADDR_VAR 0 7
62023: PUSH
62024: LD_VAR 0 3
62028: PUSH
62029: LD_VAR 0 1
62033: ARRAY
62034: PUSH
62035: LD_INT 4
62037: ARRAY
62038: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
62039: LD_ADDR_VAR 0 9
62043: PUSH
62044: LD_VAR 0 6
62048: PPUSH
62049: LD_VAR 0 7
62053: PPUSH
62054: LD_INT 16
62056: PPUSH
62057: CALL 41177 0 3
62061: ST_TO_ADDR
// if not cratesNearbyPoint then
62062: LD_VAR 0 9
62066: NOT
62067: IFFALSE 62073
// exit ;
62069: POP
62070: POP
62071: GO 62530
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
62073: LD_ADDR_VAR 0 4
62077: PUSH
62078: LD_INT 22
62080: PUSH
62081: LD_VAR 0 5
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 3
62092: PUSH
62093: LD_INT 60
62095: PUSH
62096: EMPTY
62097: LIST
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 91
62105: PUSH
62106: LD_VAR 0 8
62110: PUSH
62111: LD_INT 6
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 2
62121: PUSH
62122: LD_INT 25
62124: PUSH
62125: LD_INT 2
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 25
62134: PUSH
62135: LD_INT 16
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: LIST
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: PPUSH
62153: CALL_OW 69
62157: PUSH
62158: LD_VAR 0 8
62162: PPUSH
62163: CALL_OW 313
62167: PPUSH
62168: LD_INT 3
62170: PUSH
62171: LD_INT 60
62173: PUSH
62174: EMPTY
62175: LIST
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 2
62183: PUSH
62184: LD_INT 25
62186: PUSH
62187: LD_INT 2
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 25
62196: PUSH
62197: LD_INT 16
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: LIST
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PPUSH
62213: CALL_OW 72
62217: UNION
62218: ST_TO_ADDR
// if tmp then
62219: LD_VAR 0 4
62223: IFFALSE 62303
// begin tmp := ShrinkArray ( tmp , 3 ) ;
62225: LD_ADDR_VAR 0 4
62229: PUSH
62230: LD_VAR 0 4
62234: PPUSH
62235: LD_INT 3
62237: PPUSH
62238: CALL 39146 0 2
62242: ST_TO_ADDR
// for j in tmp do
62243: LD_ADDR_VAR 0 2
62247: PUSH
62248: LD_VAR 0 4
62252: PUSH
62253: FOR_IN
62254: IFFALSE 62297
// begin if IsInUnit ( j ) then
62256: LD_VAR 0 2
62260: PPUSH
62261: CALL_OW 310
62265: IFFALSE 62276
// ComExit ( j ) ;
62267: LD_VAR 0 2
62271: PPUSH
62272: CALL 39229 0 1
// AddComCollect ( j , x , y ) ;
62276: LD_VAR 0 2
62280: PPUSH
62281: LD_VAR 0 6
62285: PPUSH
62286: LD_VAR 0 7
62290: PPUSH
62291: CALL_OW 177
// end ;
62295: GO 62253
62297: POP
62298: POP
// exit ;
62299: POP
62300: POP
62301: GO 62530
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
62303: LD_ADDR_VAR 0 4
62307: PUSH
62308: LD_INT 22
62310: PUSH
62311: LD_VAR 0 5
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 91
62322: PUSH
62323: LD_VAR 0 8
62327: PUSH
62328: LD_INT 8
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 2
62338: PUSH
62339: LD_INT 34
62341: PUSH
62342: LD_INT 12
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 34
62351: PUSH
62352: LD_INT 51
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 34
62361: PUSH
62362: LD_INT 32
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 34
62371: PUSH
62372: LD_INT 89
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: LIST
62390: PPUSH
62391: CALL_OW 69
62395: ST_TO_ADDR
// if tmp then
62396: LD_VAR 0 4
62400: IFFALSE 62526
// begin for j in tmp do
62402: LD_ADDR_VAR 0 2
62406: PUSH
62407: LD_VAR 0 4
62411: PUSH
62412: FOR_IN
62413: IFFALSE 62524
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
62415: LD_VAR 0 2
62419: PPUSH
62420: CALL_OW 262
62424: PUSH
62425: LD_INT 3
62427: EQUAL
62428: PUSH
62429: LD_VAR 0 2
62433: PPUSH
62434: CALL_OW 261
62438: PUSH
62439: LD_INT 20
62441: GREATER
62442: OR
62443: PUSH
62444: LD_VAR 0 2
62448: PPUSH
62449: CALL_OW 314
62453: NOT
62454: AND
62455: PUSH
62456: LD_VAR 0 2
62460: PPUSH
62461: CALL_OW 263
62465: PUSH
62466: LD_INT 1
62468: NONEQUAL
62469: PUSH
62470: LD_VAR 0 2
62474: PPUSH
62475: CALL_OW 311
62479: OR
62480: AND
62481: IFFALSE 62522
// begin ComCollect ( j , x , y ) ;
62483: LD_VAR 0 2
62487: PPUSH
62488: LD_VAR 0 6
62492: PPUSH
62493: LD_VAR 0 7
62497: PPUSH
62498: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
62502: LD_VAR 0 2
62506: PPUSH
62507: LD_VAR 0 8
62511: PPUSH
62512: CALL_OW 172
// exit ;
62516: POP
62517: POP
62518: POP
62519: POP
62520: GO 62530
// end ;
62522: GO 62412
62524: POP
62525: POP
// end ; end ;
62526: GO 61901
62528: POP
62529: POP
// end ; end_of_file end_of_file
62530: PPOPN 9
62532: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
62533: LD_INT 0
62535: PPUSH
62536: PPUSH
62537: PPUSH
62538: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
62539: LD_VAR 0 1
62543: PPUSH
62544: CALL_OW 264
62548: PUSH
62549: LD_INT 91
62551: EQUAL
62552: IFFALSE 62624
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
62554: LD_INT 68
62556: PPUSH
62557: LD_VAR 0 1
62561: PPUSH
62562: CALL_OW 255
62566: PPUSH
62567: CALL_OW 321
62571: PUSH
62572: LD_INT 2
62574: EQUAL
62575: IFFALSE 62587
// eff := 70 else
62577: LD_ADDR_VAR 0 4
62581: PUSH
62582: LD_INT 70
62584: ST_TO_ADDR
62585: GO 62595
// eff := 30 ;
62587: LD_ADDR_VAR 0 4
62591: PUSH
62592: LD_INT 30
62594: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
62595: LD_VAR 0 1
62599: PPUSH
62600: CALL_OW 250
62604: PPUSH
62605: LD_VAR 0 1
62609: PPUSH
62610: CALL_OW 251
62614: PPUSH
62615: LD_VAR 0 4
62619: PPUSH
62620: CALL_OW 495
// end ; end ;
62624: LD_VAR 0 2
62628: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
62629: LD_INT 0
62631: PPUSH
// end ;
62632: LD_VAR 0 4
62636: RET
// export function SOS_Command ( cmd ) ; begin
62637: LD_INT 0
62639: PPUSH
// end ;
62640: LD_VAR 0 2
62644: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
62645: LD_INT 0
62647: PPUSH
// end ;
62648: LD_VAR 0 6
62652: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
62653: LD_INT 0
62655: PPUSH
62656: PPUSH
// if not vehicle or not factory then
62657: LD_VAR 0 1
62661: NOT
62662: PUSH
62663: LD_VAR 0 2
62667: NOT
62668: OR
62669: IFFALSE 62673
// exit ;
62671: GO 62904
// if factoryWaypoints >= factory then
62673: LD_EXP 73
62677: PUSH
62678: LD_VAR 0 2
62682: GREATEREQUAL
62683: IFFALSE 62904
// if factoryWaypoints [ factory ] then
62685: LD_EXP 73
62689: PUSH
62690: LD_VAR 0 2
62694: ARRAY
62695: IFFALSE 62904
// begin if GetControl ( vehicle ) = control_manual then
62697: LD_VAR 0 1
62701: PPUSH
62702: CALL_OW 263
62706: PUSH
62707: LD_INT 1
62709: EQUAL
62710: IFFALSE 62791
// begin driver := IsDrivenBy ( vehicle ) ;
62712: LD_ADDR_VAR 0 4
62716: PUSH
62717: LD_VAR 0 1
62721: PPUSH
62722: CALL_OW 311
62726: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62727: LD_VAR 0 4
62731: PPUSH
62732: LD_EXP 73
62736: PUSH
62737: LD_VAR 0 2
62741: ARRAY
62742: PUSH
62743: LD_INT 3
62745: ARRAY
62746: PPUSH
62747: LD_EXP 73
62751: PUSH
62752: LD_VAR 0 2
62756: ARRAY
62757: PUSH
62758: LD_INT 4
62760: ARRAY
62761: PPUSH
62762: CALL_OW 171
// AddComExitVehicle ( driver ) ;
62766: LD_VAR 0 4
62770: PPUSH
62771: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
62775: LD_VAR 0 4
62779: PPUSH
62780: LD_VAR 0 2
62784: PPUSH
62785: CALL_OW 180
// end else
62789: GO 62904
// if GetControl ( vehicle ) = control_remote then
62791: LD_VAR 0 1
62795: PPUSH
62796: CALL_OW 263
62800: PUSH
62801: LD_INT 2
62803: EQUAL
62804: IFFALSE 62865
// begin wait ( 0 0$2 ) ;
62806: LD_INT 70
62808: PPUSH
62809: CALL_OW 67
// if Connect ( vehicle ) then
62813: LD_VAR 0 1
62817: PPUSH
62818: CALL 9448 0 1
62822: IFFALSE 62863
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62824: LD_VAR 0 1
62828: PPUSH
62829: LD_EXP 73
62833: PUSH
62834: LD_VAR 0 2
62838: ARRAY
62839: PUSH
62840: LD_INT 3
62842: ARRAY
62843: PPUSH
62844: LD_EXP 73
62848: PUSH
62849: LD_VAR 0 2
62853: ARRAY
62854: PUSH
62855: LD_INT 4
62857: ARRAY
62858: PPUSH
62859: CALL_OW 171
// end else
62863: GO 62904
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62865: LD_VAR 0 1
62869: PPUSH
62870: LD_EXP 73
62874: PUSH
62875: LD_VAR 0 2
62879: ARRAY
62880: PUSH
62881: LD_INT 3
62883: ARRAY
62884: PPUSH
62885: LD_EXP 73
62889: PUSH
62890: LD_VAR 0 2
62894: ARRAY
62895: PUSH
62896: LD_INT 4
62898: ARRAY
62899: PPUSH
62900: CALL_OW 171
// end ; end ;
62904: LD_VAR 0 3
62908: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
62909: LD_INT 0
62911: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
62912: LD_VAR 0 1
62916: PUSH
62917: LD_INT 250
62919: EQUAL
62920: PUSH
62921: LD_VAR 0 2
62925: PPUSH
62926: CALL_OW 264
62930: PUSH
62931: LD_INT 81
62933: EQUAL
62934: AND
62935: IFFALSE 62956
// MinerPlaceMine ( unit , x , y ) ;
62937: LD_VAR 0 2
62941: PPUSH
62942: LD_VAR 0 4
62946: PPUSH
62947: LD_VAR 0 5
62951: PPUSH
62952: CALL 65946 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
62956: LD_VAR 0 1
62960: PUSH
62961: LD_INT 251
62963: EQUAL
62964: PUSH
62965: LD_VAR 0 2
62969: PPUSH
62970: CALL_OW 264
62974: PUSH
62975: LD_INT 81
62977: EQUAL
62978: AND
62979: IFFALSE 63000
// MinerDetonateMine ( unit , x , y ) ;
62981: LD_VAR 0 2
62985: PPUSH
62986: LD_VAR 0 4
62990: PPUSH
62991: LD_VAR 0 5
62995: PPUSH
62996: CALL 66221 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
63000: LD_VAR 0 1
63004: PUSH
63005: LD_INT 252
63007: EQUAL
63008: PUSH
63009: LD_VAR 0 2
63013: PPUSH
63014: CALL_OW 264
63018: PUSH
63019: LD_INT 81
63021: EQUAL
63022: AND
63023: IFFALSE 63044
// MinerCreateMinefield ( unit , x , y ) ;
63025: LD_VAR 0 2
63029: PPUSH
63030: LD_VAR 0 4
63034: PPUSH
63035: LD_VAR 0 5
63039: PPUSH
63040: CALL 66638 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
63044: LD_VAR 0 1
63048: PUSH
63049: LD_INT 253
63051: EQUAL
63052: PUSH
63053: LD_VAR 0 2
63057: PPUSH
63058: CALL_OW 257
63062: PUSH
63063: LD_INT 5
63065: EQUAL
63066: AND
63067: IFFALSE 63088
// ComBinocular ( unit , x , y ) ;
63069: LD_VAR 0 2
63073: PPUSH
63074: LD_VAR 0 4
63078: PPUSH
63079: LD_VAR 0 5
63083: PPUSH
63084: CALL 67007 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
63088: LD_VAR 0 1
63092: PUSH
63093: LD_INT 254
63095: EQUAL
63096: PUSH
63097: LD_VAR 0 2
63101: PPUSH
63102: CALL_OW 264
63106: PUSH
63107: LD_INT 99
63109: EQUAL
63110: AND
63111: PUSH
63112: LD_VAR 0 3
63116: PPUSH
63117: CALL_OW 263
63121: PUSH
63122: LD_INT 3
63124: EQUAL
63125: AND
63126: IFFALSE 63142
// HackDestroyVehicle ( unit , selectedUnit ) ;
63128: LD_VAR 0 2
63132: PPUSH
63133: LD_VAR 0 3
63137: PPUSH
63138: CALL 65310 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
63142: LD_VAR 0 1
63146: PUSH
63147: LD_INT 255
63149: EQUAL
63150: PUSH
63151: LD_VAR 0 2
63155: PPUSH
63156: CALL_OW 264
63160: PUSH
63161: LD_INT 14
63163: PUSH
63164: LD_INT 53
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: IN
63171: AND
63172: PUSH
63173: LD_VAR 0 4
63177: PPUSH
63178: LD_VAR 0 5
63182: PPUSH
63183: CALL_OW 488
63187: AND
63188: IFFALSE 63212
// CutTreeXYR ( unit , x , y , 12 ) ;
63190: LD_VAR 0 2
63194: PPUSH
63195: LD_VAR 0 4
63199: PPUSH
63200: LD_VAR 0 5
63204: PPUSH
63205: LD_INT 12
63207: PPUSH
63208: CALL 63307 0 4
// if cmd = 256 then
63212: LD_VAR 0 1
63216: PUSH
63217: LD_INT 256
63219: EQUAL
63220: IFFALSE 63241
// SetFactoryWaypoint ( unit , x , y ) ;
63222: LD_VAR 0 2
63226: PPUSH
63227: LD_VAR 0 4
63231: PPUSH
63232: LD_VAR 0 5
63236: PPUSH
63237: CALL 61222 0 3
// if cmd = 257 then
63241: LD_VAR 0 1
63245: PUSH
63246: LD_INT 257
63248: EQUAL
63249: IFFALSE 63270
// SetWarehouseGatheringPoint ( unit , x , y ) ;
63251: LD_VAR 0 2
63255: PPUSH
63256: LD_VAR 0 4
63260: PPUSH
63261: LD_VAR 0 5
63265: PPUSH
63266: CALL 61584 0 3
// if cmd = 258 then
63270: LD_VAR 0 1
63274: PUSH
63275: LD_INT 258
63277: EQUAL
63278: IFFALSE 63302
// BurnTreeXYR ( unit , x , y , 8 ) ;
63280: LD_VAR 0 2
63284: PPUSH
63285: LD_VAR 0 4
63289: PPUSH
63290: LD_VAR 0 5
63294: PPUSH
63295: LD_INT 8
63297: PPUSH
63298: CALL 63701 0 4
// end ;
63302: LD_VAR 0 6
63306: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
63307: LD_INT 0
63309: PPUSH
63310: PPUSH
63311: PPUSH
63312: PPUSH
63313: PPUSH
63314: PPUSH
63315: PPUSH
63316: PPUSH
63317: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
63318: LD_VAR 0 1
63322: PPUSH
63323: CALL_OW 302
63327: NOT
63328: PUSH
63329: LD_VAR 0 2
63333: PPUSH
63334: LD_VAR 0 3
63338: PPUSH
63339: CALL_OW 488
63343: NOT
63344: OR
63345: PUSH
63346: LD_VAR 0 4
63350: NOT
63351: OR
63352: IFFALSE 63356
// exit ;
63354: GO 63696
// list := [ ] ;
63356: LD_ADDR_VAR 0 13
63360: PUSH
63361: EMPTY
63362: ST_TO_ADDR
// if x - r < 0 then
63363: LD_VAR 0 2
63367: PUSH
63368: LD_VAR 0 4
63372: MINUS
63373: PUSH
63374: LD_INT 0
63376: LESS
63377: IFFALSE 63389
// min_x := 0 else
63379: LD_ADDR_VAR 0 7
63383: PUSH
63384: LD_INT 0
63386: ST_TO_ADDR
63387: GO 63405
// min_x := x - r ;
63389: LD_ADDR_VAR 0 7
63393: PUSH
63394: LD_VAR 0 2
63398: PUSH
63399: LD_VAR 0 4
63403: MINUS
63404: ST_TO_ADDR
// if y - r < 0 then
63405: LD_VAR 0 3
63409: PUSH
63410: LD_VAR 0 4
63414: MINUS
63415: PUSH
63416: LD_INT 0
63418: LESS
63419: IFFALSE 63431
// min_y := 0 else
63421: LD_ADDR_VAR 0 8
63425: PUSH
63426: LD_INT 0
63428: ST_TO_ADDR
63429: GO 63447
// min_y := y - r ;
63431: LD_ADDR_VAR 0 8
63435: PUSH
63436: LD_VAR 0 3
63440: PUSH
63441: LD_VAR 0 4
63445: MINUS
63446: ST_TO_ADDR
// max_x := x + r ;
63447: LD_ADDR_VAR 0 9
63451: PUSH
63452: LD_VAR 0 2
63456: PUSH
63457: LD_VAR 0 4
63461: PLUS
63462: ST_TO_ADDR
// max_y := y + r ;
63463: LD_ADDR_VAR 0 10
63467: PUSH
63468: LD_VAR 0 3
63472: PUSH
63473: LD_VAR 0 4
63477: PLUS
63478: ST_TO_ADDR
// for _x = min_x to max_x do
63479: LD_ADDR_VAR 0 11
63483: PUSH
63484: DOUBLE
63485: LD_VAR 0 7
63489: DEC
63490: ST_TO_ADDR
63491: LD_VAR 0 9
63495: PUSH
63496: FOR_TO
63497: IFFALSE 63614
// for _y = min_y to max_y do
63499: LD_ADDR_VAR 0 12
63503: PUSH
63504: DOUBLE
63505: LD_VAR 0 8
63509: DEC
63510: ST_TO_ADDR
63511: LD_VAR 0 10
63515: PUSH
63516: FOR_TO
63517: IFFALSE 63610
// begin if not ValidHex ( _x , _y ) then
63519: LD_VAR 0 11
63523: PPUSH
63524: LD_VAR 0 12
63528: PPUSH
63529: CALL_OW 488
63533: NOT
63534: IFFALSE 63538
// continue ;
63536: GO 63516
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
63538: LD_VAR 0 11
63542: PPUSH
63543: LD_VAR 0 12
63547: PPUSH
63548: CALL_OW 351
63552: PUSH
63553: LD_VAR 0 11
63557: PPUSH
63558: LD_VAR 0 12
63562: PPUSH
63563: CALL_OW 554
63567: AND
63568: IFFALSE 63608
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
63570: LD_ADDR_VAR 0 13
63574: PUSH
63575: LD_VAR 0 13
63579: PPUSH
63580: LD_VAR 0 13
63584: PUSH
63585: LD_INT 1
63587: PLUS
63588: PPUSH
63589: LD_VAR 0 11
63593: PUSH
63594: LD_VAR 0 12
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PPUSH
63603: CALL_OW 2
63607: ST_TO_ADDR
// end ;
63608: GO 63516
63610: POP
63611: POP
63612: GO 63496
63614: POP
63615: POP
// if not list then
63616: LD_VAR 0 13
63620: NOT
63621: IFFALSE 63625
// exit ;
63623: GO 63696
// for i in list do
63625: LD_ADDR_VAR 0 6
63629: PUSH
63630: LD_VAR 0 13
63634: PUSH
63635: FOR_IN
63636: IFFALSE 63694
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
63638: LD_VAR 0 1
63642: PPUSH
63643: LD_STRING M
63645: PUSH
63646: LD_VAR 0 6
63650: PUSH
63651: LD_INT 1
63653: ARRAY
63654: PUSH
63655: LD_VAR 0 6
63659: PUSH
63660: LD_INT 2
63662: ARRAY
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: LD_INT 0
63669: PUSH
63670: LD_INT 0
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: PUSH
63685: EMPTY
63686: LIST
63687: PPUSH
63688: CALL_OW 447
63692: GO 63635
63694: POP
63695: POP
// end ;
63696: LD_VAR 0 5
63700: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
63701: LD_INT 0
63703: PPUSH
63704: PPUSH
63705: PPUSH
63706: PPUSH
63707: PPUSH
63708: PPUSH
63709: PPUSH
63710: PPUSH
63711: PPUSH
63712: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
63713: LD_VAR 0 1
63717: PPUSH
63718: CALL_OW 302
63722: NOT
63723: PUSH
63724: LD_VAR 0 2
63728: PPUSH
63729: LD_VAR 0 3
63733: PPUSH
63734: CALL_OW 488
63738: NOT
63739: OR
63740: PUSH
63741: LD_VAR 0 4
63745: NOT
63746: OR
63747: IFFALSE 63751
// exit ;
63749: GO 64264
// list := [ ] ;
63751: LD_ADDR_VAR 0 13
63755: PUSH
63756: EMPTY
63757: ST_TO_ADDR
// if x - r < 0 then
63758: LD_VAR 0 2
63762: PUSH
63763: LD_VAR 0 4
63767: MINUS
63768: PUSH
63769: LD_INT 0
63771: LESS
63772: IFFALSE 63784
// min_x := 0 else
63774: LD_ADDR_VAR 0 7
63778: PUSH
63779: LD_INT 0
63781: ST_TO_ADDR
63782: GO 63800
// min_x := x - r ;
63784: LD_ADDR_VAR 0 7
63788: PUSH
63789: LD_VAR 0 2
63793: PUSH
63794: LD_VAR 0 4
63798: MINUS
63799: ST_TO_ADDR
// if y - r < 0 then
63800: LD_VAR 0 3
63804: PUSH
63805: LD_VAR 0 4
63809: MINUS
63810: PUSH
63811: LD_INT 0
63813: LESS
63814: IFFALSE 63826
// min_y := 0 else
63816: LD_ADDR_VAR 0 8
63820: PUSH
63821: LD_INT 0
63823: ST_TO_ADDR
63824: GO 63842
// min_y := y - r ;
63826: LD_ADDR_VAR 0 8
63830: PUSH
63831: LD_VAR 0 3
63835: PUSH
63836: LD_VAR 0 4
63840: MINUS
63841: ST_TO_ADDR
// max_x := x + r ;
63842: LD_ADDR_VAR 0 9
63846: PUSH
63847: LD_VAR 0 2
63851: PUSH
63852: LD_VAR 0 4
63856: PLUS
63857: ST_TO_ADDR
// max_y := y + r ;
63858: LD_ADDR_VAR 0 10
63862: PUSH
63863: LD_VAR 0 3
63867: PUSH
63868: LD_VAR 0 4
63872: PLUS
63873: ST_TO_ADDR
// for _x = min_x to max_x do
63874: LD_ADDR_VAR 0 11
63878: PUSH
63879: DOUBLE
63880: LD_VAR 0 7
63884: DEC
63885: ST_TO_ADDR
63886: LD_VAR 0 9
63890: PUSH
63891: FOR_TO
63892: IFFALSE 64009
// for _y = min_y to max_y do
63894: LD_ADDR_VAR 0 12
63898: PUSH
63899: DOUBLE
63900: LD_VAR 0 8
63904: DEC
63905: ST_TO_ADDR
63906: LD_VAR 0 10
63910: PUSH
63911: FOR_TO
63912: IFFALSE 64005
// begin if not ValidHex ( _x , _y ) then
63914: LD_VAR 0 11
63918: PPUSH
63919: LD_VAR 0 12
63923: PPUSH
63924: CALL_OW 488
63928: NOT
63929: IFFALSE 63933
// continue ;
63931: GO 63911
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
63933: LD_VAR 0 11
63937: PPUSH
63938: LD_VAR 0 12
63942: PPUSH
63943: CALL_OW 351
63947: PUSH
63948: LD_VAR 0 11
63952: PPUSH
63953: LD_VAR 0 12
63957: PPUSH
63958: CALL_OW 554
63962: AND
63963: IFFALSE 64003
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
63965: LD_ADDR_VAR 0 13
63969: PUSH
63970: LD_VAR 0 13
63974: PPUSH
63975: LD_VAR 0 13
63979: PUSH
63980: LD_INT 1
63982: PLUS
63983: PPUSH
63984: LD_VAR 0 11
63988: PUSH
63989: LD_VAR 0 12
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PPUSH
63998: CALL_OW 2
64002: ST_TO_ADDR
// end ;
64003: GO 63911
64005: POP
64006: POP
64007: GO 63891
64009: POP
64010: POP
// if not list then
64011: LD_VAR 0 13
64015: NOT
64016: IFFALSE 64020
// exit ;
64018: GO 64264
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
64020: LD_ADDR_VAR 0 13
64024: PUSH
64025: LD_VAR 0 1
64029: PPUSH
64030: LD_VAR 0 13
64034: PPUSH
64035: LD_INT 1
64037: PPUSH
64038: LD_INT 1
64040: PPUSH
64041: CALL 6590 0 4
64045: ST_TO_ADDR
// ComStop ( flame ) ;
64046: LD_VAR 0 1
64050: PPUSH
64051: CALL_OW 141
// for i in list do
64055: LD_ADDR_VAR 0 6
64059: PUSH
64060: LD_VAR 0 13
64064: PUSH
64065: FOR_IN
64066: IFFALSE 64097
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
64068: LD_VAR 0 1
64072: PPUSH
64073: LD_VAR 0 6
64077: PUSH
64078: LD_INT 1
64080: ARRAY
64081: PPUSH
64082: LD_VAR 0 6
64086: PUSH
64087: LD_INT 2
64089: ARRAY
64090: PPUSH
64091: CALL_OW 176
64095: GO 64065
64097: POP
64098: POP
// repeat wait ( 0 0$1 ) ;
64099: LD_INT 35
64101: PPUSH
64102: CALL_OW 67
// task := GetTaskList ( flame ) ;
64106: LD_ADDR_VAR 0 14
64110: PUSH
64111: LD_VAR 0 1
64115: PPUSH
64116: CALL_OW 437
64120: ST_TO_ADDR
// if not task then
64121: LD_VAR 0 14
64125: NOT
64126: IFFALSE 64130
// exit ;
64128: GO 64264
// if task [ 1 ] [ 1 ] <> | then
64130: LD_VAR 0 14
64134: PUSH
64135: LD_INT 1
64137: ARRAY
64138: PUSH
64139: LD_INT 1
64141: ARRAY
64142: PUSH
64143: LD_STRING |
64145: NONEQUAL
64146: IFFALSE 64150
// exit ;
64148: GO 64264
// _x := task [ 1 ] [ 2 ] ;
64150: LD_ADDR_VAR 0 11
64154: PUSH
64155: LD_VAR 0 14
64159: PUSH
64160: LD_INT 1
64162: ARRAY
64163: PUSH
64164: LD_INT 2
64166: ARRAY
64167: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
64168: LD_ADDR_VAR 0 12
64172: PUSH
64173: LD_VAR 0 14
64177: PUSH
64178: LD_INT 1
64180: ARRAY
64181: PUSH
64182: LD_INT 3
64184: ARRAY
64185: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
64186: LD_VAR 0 11
64190: PPUSH
64191: LD_VAR 0 12
64195: PPUSH
64196: CALL_OW 351
64200: NOT
64201: PUSH
64202: LD_VAR 0 11
64206: PPUSH
64207: LD_VAR 0 12
64211: PPUSH
64212: CALL_OW 554
64216: NOT
64217: OR
64218: IFFALSE 64252
// begin task := Delete ( task , 1 ) ;
64220: LD_ADDR_VAR 0 14
64224: PUSH
64225: LD_VAR 0 14
64229: PPUSH
64230: LD_INT 1
64232: PPUSH
64233: CALL_OW 3
64237: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
64238: LD_VAR 0 1
64242: PPUSH
64243: LD_VAR 0 14
64247: PPUSH
64248: CALL_OW 446
// end ; until not HasTask ( flame ) ;
64252: LD_VAR 0 1
64256: PPUSH
64257: CALL_OW 314
64261: NOT
64262: IFFALSE 64099
// end ;
64264: LD_VAR 0 5
64268: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
64269: LD_EXP 76
64273: NOT
64274: IFFALSE 64324
64276: GO 64278
64278: DISABLE
// begin initHack := true ;
64279: LD_ADDR_EXP 76
64283: PUSH
64284: LD_INT 1
64286: ST_TO_ADDR
// hackTanks := [ ] ;
64287: LD_ADDR_EXP 77
64291: PUSH
64292: EMPTY
64293: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
64294: LD_ADDR_EXP 78
64298: PUSH
64299: EMPTY
64300: ST_TO_ADDR
// hackLimit := 3 ;
64301: LD_ADDR_EXP 79
64305: PUSH
64306: LD_INT 3
64308: ST_TO_ADDR
// hackDist := 12 ;
64309: LD_ADDR_EXP 80
64313: PUSH
64314: LD_INT 12
64316: ST_TO_ADDR
// hackCounter := [ ] ;
64317: LD_ADDR_EXP 81
64321: PUSH
64322: EMPTY
64323: ST_TO_ADDR
// end ;
64324: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
64325: LD_EXP 76
64329: PUSH
64330: LD_INT 34
64332: PUSH
64333: LD_INT 99
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PPUSH
64340: CALL_OW 69
64344: AND
64345: IFFALSE 64598
64347: GO 64349
64349: DISABLE
64350: LD_INT 0
64352: PPUSH
64353: PPUSH
// begin enable ;
64354: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
64355: LD_ADDR_VAR 0 1
64359: PUSH
64360: LD_INT 34
64362: PUSH
64363: LD_INT 99
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PPUSH
64370: CALL_OW 69
64374: PUSH
64375: FOR_IN
64376: IFFALSE 64596
// begin if not i in hackTanks then
64378: LD_VAR 0 1
64382: PUSH
64383: LD_EXP 77
64387: IN
64388: NOT
64389: IFFALSE 64472
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
64391: LD_ADDR_EXP 77
64395: PUSH
64396: LD_EXP 77
64400: PPUSH
64401: LD_EXP 77
64405: PUSH
64406: LD_INT 1
64408: PLUS
64409: PPUSH
64410: LD_VAR 0 1
64414: PPUSH
64415: CALL_OW 1
64419: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
64420: LD_ADDR_EXP 78
64424: PUSH
64425: LD_EXP 78
64429: PPUSH
64430: LD_EXP 78
64434: PUSH
64435: LD_INT 1
64437: PLUS
64438: PPUSH
64439: EMPTY
64440: PPUSH
64441: CALL_OW 1
64445: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
64446: LD_ADDR_EXP 81
64450: PUSH
64451: LD_EXP 81
64455: PPUSH
64456: LD_EXP 81
64460: PUSH
64461: LD_INT 1
64463: PLUS
64464: PPUSH
64465: EMPTY
64466: PPUSH
64467: CALL_OW 1
64471: ST_TO_ADDR
// end ; if not IsOk ( i ) then
64472: LD_VAR 0 1
64476: PPUSH
64477: CALL_OW 302
64481: NOT
64482: IFFALSE 64495
// begin HackUnlinkAll ( i ) ;
64484: LD_VAR 0 1
64488: PPUSH
64489: CALL 64601 0 1
// continue ;
64493: GO 64375
// end ; HackCheckCapturedStatus ( i ) ;
64495: LD_VAR 0 1
64499: PPUSH
64500: CALL 65044 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
64504: LD_ADDR_VAR 0 2
64508: PUSH
64509: LD_INT 81
64511: PUSH
64512: LD_VAR 0 1
64516: PPUSH
64517: CALL_OW 255
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 33
64528: PUSH
64529: LD_INT 3
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 91
64538: PUSH
64539: LD_VAR 0 1
64543: PUSH
64544: LD_EXP 80
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 50
64556: PUSH
64557: EMPTY
64558: LIST
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: PPUSH
64566: CALL_OW 69
64570: ST_TO_ADDR
// if not tmp then
64571: LD_VAR 0 2
64575: NOT
64576: IFFALSE 64580
// continue ;
64578: GO 64375
// HackLink ( i , tmp ) ;
64580: LD_VAR 0 1
64584: PPUSH
64585: LD_VAR 0 2
64589: PPUSH
64590: CALL 64737 0 2
// end ;
64594: GO 64375
64596: POP
64597: POP
// end ;
64598: PPOPN 2
64600: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
64601: LD_INT 0
64603: PPUSH
64604: PPUSH
64605: PPUSH
// if not hack in hackTanks then
64606: LD_VAR 0 1
64610: PUSH
64611: LD_EXP 77
64615: IN
64616: NOT
64617: IFFALSE 64621
// exit ;
64619: GO 64732
// index := GetElementIndex ( hackTanks , hack ) ;
64621: LD_ADDR_VAR 0 4
64625: PUSH
64626: LD_EXP 77
64630: PPUSH
64631: LD_VAR 0 1
64635: PPUSH
64636: CALL 5887 0 2
64640: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
64641: LD_EXP 78
64645: PUSH
64646: LD_VAR 0 4
64650: ARRAY
64651: IFFALSE 64732
// begin for i in hackTanksCaptured [ index ] do
64653: LD_ADDR_VAR 0 3
64657: PUSH
64658: LD_EXP 78
64662: PUSH
64663: LD_VAR 0 4
64667: ARRAY
64668: PUSH
64669: FOR_IN
64670: IFFALSE 64696
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
64672: LD_VAR 0 3
64676: PUSH
64677: LD_INT 1
64679: ARRAY
64680: PPUSH
64681: LD_VAR 0 3
64685: PUSH
64686: LD_INT 2
64688: ARRAY
64689: PPUSH
64690: CALL_OW 235
64694: GO 64669
64696: POP
64697: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
64698: LD_ADDR_EXP 78
64702: PUSH
64703: LD_EXP 78
64707: PPUSH
64708: LD_VAR 0 4
64712: PPUSH
64713: EMPTY
64714: PPUSH
64715: CALL_OW 1
64719: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
64720: LD_VAR 0 1
64724: PPUSH
64725: LD_INT 0
64727: PPUSH
64728: CALL_OW 505
// end ; end ;
64732: LD_VAR 0 2
64736: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
64737: LD_INT 0
64739: PPUSH
64740: PPUSH
64741: PPUSH
// if not hack in hackTanks or not vehicles then
64742: LD_VAR 0 1
64746: PUSH
64747: LD_EXP 77
64751: IN
64752: NOT
64753: PUSH
64754: LD_VAR 0 2
64758: NOT
64759: OR
64760: IFFALSE 64764
// exit ;
64762: GO 65039
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
64764: LD_ADDR_VAR 0 2
64768: PUSH
64769: LD_VAR 0 1
64773: PPUSH
64774: LD_VAR 0 2
64778: PPUSH
64779: LD_INT 1
64781: PPUSH
64782: LD_INT 1
64784: PPUSH
64785: CALL 6537 0 4
64789: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
64790: LD_ADDR_VAR 0 5
64794: PUSH
64795: LD_EXP 77
64799: PPUSH
64800: LD_VAR 0 1
64804: PPUSH
64805: CALL 5887 0 2
64809: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
64810: LD_EXP 78
64814: PUSH
64815: LD_VAR 0 5
64819: ARRAY
64820: PUSH
64821: LD_EXP 79
64825: LESS
64826: IFFALSE 65015
// begin for i := 1 to vehicles do
64828: LD_ADDR_VAR 0 4
64832: PUSH
64833: DOUBLE
64834: LD_INT 1
64836: DEC
64837: ST_TO_ADDR
64838: LD_VAR 0 2
64842: PUSH
64843: FOR_TO
64844: IFFALSE 65013
// begin if hackTanksCaptured [ index ] = hackLimit then
64846: LD_EXP 78
64850: PUSH
64851: LD_VAR 0 5
64855: ARRAY
64856: PUSH
64857: LD_EXP 79
64861: EQUAL
64862: IFFALSE 64866
// break ;
64864: GO 65013
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
64866: LD_ADDR_EXP 81
64870: PUSH
64871: LD_EXP 81
64875: PPUSH
64876: LD_VAR 0 5
64880: PPUSH
64881: LD_EXP 81
64885: PUSH
64886: LD_VAR 0 5
64890: ARRAY
64891: PUSH
64892: LD_INT 1
64894: PLUS
64895: PPUSH
64896: CALL_OW 1
64900: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
64901: LD_ADDR_EXP 78
64905: PUSH
64906: LD_EXP 78
64910: PPUSH
64911: LD_VAR 0 5
64915: PUSH
64916: LD_EXP 78
64920: PUSH
64921: LD_VAR 0 5
64925: ARRAY
64926: PUSH
64927: LD_INT 1
64929: PLUS
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PPUSH
64935: LD_VAR 0 2
64939: PUSH
64940: LD_VAR 0 4
64944: ARRAY
64945: PUSH
64946: LD_VAR 0 2
64950: PUSH
64951: LD_VAR 0 4
64955: ARRAY
64956: PPUSH
64957: CALL_OW 255
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PPUSH
64966: CALL 6102 0 3
64970: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
64971: LD_VAR 0 2
64975: PUSH
64976: LD_VAR 0 4
64980: ARRAY
64981: PPUSH
64982: LD_VAR 0 1
64986: PPUSH
64987: CALL_OW 255
64991: PPUSH
64992: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
64996: LD_VAR 0 2
65000: PUSH
65001: LD_VAR 0 4
65005: ARRAY
65006: PPUSH
65007: CALL_OW 141
// end ;
65011: GO 64843
65013: POP
65014: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65015: LD_VAR 0 1
65019: PPUSH
65020: LD_EXP 78
65024: PUSH
65025: LD_VAR 0 5
65029: ARRAY
65030: PUSH
65031: LD_INT 0
65033: PLUS
65034: PPUSH
65035: CALL_OW 505
// end ;
65039: LD_VAR 0 3
65043: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
65044: LD_INT 0
65046: PPUSH
65047: PPUSH
65048: PPUSH
65049: PPUSH
// if not hack in hackTanks then
65050: LD_VAR 0 1
65054: PUSH
65055: LD_EXP 77
65059: IN
65060: NOT
65061: IFFALSE 65065
// exit ;
65063: GO 65305
// index := GetElementIndex ( hackTanks , hack ) ;
65065: LD_ADDR_VAR 0 4
65069: PUSH
65070: LD_EXP 77
65074: PPUSH
65075: LD_VAR 0 1
65079: PPUSH
65080: CALL 5887 0 2
65084: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
65085: LD_ADDR_VAR 0 3
65089: PUSH
65090: DOUBLE
65091: LD_EXP 78
65095: PUSH
65096: LD_VAR 0 4
65100: ARRAY
65101: INC
65102: ST_TO_ADDR
65103: LD_INT 1
65105: PUSH
65106: FOR_DOWNTO
65107: IFFALSE 65279
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
65109: LD_ADDR_VAR 0 5
65113: PUSH
65114: LD_EXP 78
65118: PUSH
65119: LD_VAR 0 4
65123: ARRAY
65124: PUSH
65125: LD_VAR 0 3
65129: ARRAY
65130: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
65131: LD_VAR 0 5
65135: PUSH
65136: LD_INT 1
65138: ARRAY
65139: PPUSH
65140: CALL_OW 302
65144: NOT
65145: PUSH
65146: LD_VAR 0 5
65150: PUSH
65151: LD_INT 1
65153: ARRAY
65154: PPUSH
65155: CALL_OW 255
65159: PUSH
65160: LD_VAR 0 1
65164: PPUSH
65165: CALL_OW 255
65169: NONEQUAL
65170: OR
65171: IFFALSE 65277
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
65173: LD_VAR 0 5
65177: PUSH
65178: LD_INT 1
65180: ARRAY
65181: PPUSH
65182: CALL_OW 305
65186: PUSH
65187: LD_VAR 0 5
65191: PUSH
65192: LD_INT 1
65194: ARRAY
65195: PPUSH
65196: CALL_OW 255
65200: PUSH
65201: LD_VAR 0 1
65205: PPUSH
65206: CALL_OW 255
65210: EQUAL
65211: AND
65212: IFFALSE 65236
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
65214: LD_VAR 0 5
65218: PUSH
65219: LD_INT 1
65221: ARRAY
65222: PPUSH
65223: LD_VAR 0 5
65227: PUSH
65228: LD_INT 2
65230: ARRAY
65231: PPUSH
65232: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
65236: LD_ADDR_EXP 78
65240: PUSH
65241: LD_EXP 78
65245: PPUSH
65246: LD_VAR 0 4
65250: PPUSH
65251: LD_EXP 78
65255: PUSH
65256: LD_VAR 0 4
65260: ARRAY
65261: PPUSH
65262: LD_VAR 0 3
65266: PPUSH
65267: CALL_OW 3
65271: PPUSH
65272: CALL_OW 1
65276: ST_TO_ADDR
// end ; end ;
65277: GO 65106
65279: POP
65280: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65281: LD_VAR 0 1
65285: PPUSH
65286: LD_EXP 78
65290: PUSH
65291: LD_VAR 0 4
65295: ARRAY
65296: PUSH
65297: LD_INT 0
65299: PLUS
65300: PPUSH
65301: CALL_OW 505
// end ;
65305: LD_VAR 0 2
65309: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
65310: LD_INT 0
65312: PPUSH
65313: PPUSH
65314: PPUSH
65315: PPUSH
// if not hack in hackTanks then
65316: LD_VAR 0 1
65320: PUSH
65321: LD_EXP 77
65325: IN
65326: NOT
65327: IFFALSE 65331
// exit ;
65329: GO 65416
// index := GetElementIndex ( hackTanks , hack ) ;
65331: LD_ADDR_VAR 0 5
65335: PUSH
65336: LD_EXP 77
65340: PPUSH
65341: LD_VAR 0 1
65345: PPUSH
65346: CALL 5887 0 2
65350: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
65351: LD_ADDR_VAR 0 4
65355: PUSH
65356: DOUBLE
65357: LD_INT 1
65359: DEC
65360: ST_TO_ADDR
65361: LD_EXP 78
65365: PUSH
65366: LD_VAR 0 5
65370: ARRAY
65371: PUSH
65372: FOR_TO
65373: IFFALSE 65414
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
65375: LD_EXP 78
65379: PUSH
65380: LD_VAR 0 5
65384: ARRAY
65385: PUSH
65386: LD_VAR 0 4
65390: ARRAY
65391: PUSH
65392: LD_INT 1
65394: ARRAY
65395: PUSH
65396: LD_VAR 0 2
65400: EQUAL
65401: IFFALSE 65412
// KillUnit ( vehicle ) ;
65403: LD_VAR 0 2
65407: PPUSH
65408: CALL_OW 66
65412: GO 65372
65414: POP
65415: POP
// end ;
65416: LD_VAR 0 3
65420: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
65421: LD_EXP 82
65425: NOT
65426: IFFALSE 65461
65428: GO 65430
65430: DISABLE
// begin initMiner := true ;
65431: LD_ADDR_EXP 82
65435: PUSH
65436: LD_INT 1
65438: ST_TO_ADDR
// minersList := [ ] ;
65439: LD_ADDR_EXP 83
65443: PUSH
65444: EMPTY
65445: ST_TO_ADDR
// minerMinesList := [ ] ;
65446: LD_ADDR_EXP 84
65450: PUSH
65451: EMPTY
65452: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
65453: LD_ADDR_EXP 85
65457: PUSH
65458: LD_INT 5
65460: ST_TO_ADDR
// end ;
65461: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
65462: LD_EXP 82
65466: PUSH
65467: LD_INT 34
65469: PUSH
65470: LD_INT 81
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PPUSH
65477: CALL_OW 69
65481: AND
65482: IFFALSE 65943
65484: GO 65486
65486: DISABLE
65487: LD_INT 0
65489: PPUSH
65490: PPUSH
65491: PPUSH
65492: PPUSH
// begin enable ;
65493: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
65494: LD_ADDR_VAR 0 1
65498: PUSH
65499: LD_INT 34
65501: PUSH
65502: LD_INT 81
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PPUSH
65509: CALL_OW 69
65513: PUSH
65514: FOR_IN
65515: IFFALSE 65587
// begin if not i in minersList then
65517: LD_VAR 0 1
65521: PUSH
65522: LD_EXP 83
65526: IN
65527: NOT
65528: IFFALSE 65585
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
65530: LD_ADDR_EXP 83
65534: PUSH
65535: LD_EXP 83
65539: PPUSH
65540: LD_EXP 83
65544: PUSH
65545: LD_INT 1
65547: PLUS
65548: PPUSH
65549: LD_VAR 0 1
65553: PPUSH
65554: CALL_OW 1
65558: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
65559: LD_ADDR_EXP 84
65563: PUSH
65564: LD_EXP 84
65568: PPUSH
65569: LD_EXP 84
65573: PUSH
65574: LD_INT 1
65576: PLUS
65577: PPUSH
65578: EMPTY
65579: PPUSH
65580: CALL_OW 1
65584: ST_TO_ADDR
// end end ;
65585: GO 65514
65587: POP
65588: POP
// for i := minerMinesList downto 1 do
65589: LD_ADDR_VAR 0 1
65593: PUSH
65594: DOUBLE
65595: LD_EXP 84
65599: INC
65600: ST_TO_ADDR
65601: LD_INT 1
65603: PUSH
65604: FOR_DOWNTO
65605: IFFALSE 65941
// begin if IsLive ( minersList [ i ] ) then
65607: LD_EXP 83
65611: PUSH
65612: LD_VAR 0 1
65616: ARRAY
65617: PPUSH
65618: CALL_OW 300
65622: IFFALSE 65650
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
65624: LD_EXP 83
65628: PUSH
65629: LD_VAR 0 1
65633: ARRAY
65634: PPUSH
65635: LD_EXP 84
65639: PUSH
65640: LD_VAR 0 1
65644: ARRAY
65645: PPUSH
65646: CALL_OW 505
// if not minerMinesList [ i ] then
65650: LD_EXP 84
65654: PUSH
65655: LD_VAR 0 1
65659: ARRAY
65660: NOT
65661: IFFALSE 65665
// continue ;
65663: GO 65604
// for j := minerMinesList [ i ] downto 1 do
65665: LD_ADDR_VAR 0 2
65669: PUSH
65670: DOUBLE
65671: LD_EXP 84
65675: PUSH
65676: LD_VAR 0 1
65680: ARRAY
65681: INC
65682: ST_TO_ADDR
65683: LD_INT 1
65685: PUSH
65686: FOR_DOWNTO
65687: IFFALSE 65937
// begin side := GetSide ( minersList [ i ] ) ;
65689: LD_ADDR_VAR 0 3
65693: PUSH
65694: LD_EXP 83
65698: PUSH
65699: LD_VAR 0 1
65703: ARRAY
65704: PPUSH
65705: CALL_OW 255
65709: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
65710: LD_ADDR_VAR 0 4
65714: PUSH
65715: LD_EXP 84
65719: PUSH
65720: LD_VAR 0 1
65724: ARRAY
65725: PUSH
65726: LD_VAR 0 2
65730: ARRAY
65731: PUSH
65732: LD_INT 1
65734: ARRAY
65735: PPUSH
65736: LD_EXP 84
65740: PUSH
65741: LD_VAR 0 1
65745: ARRAY
65746: PUSH
65747: LD_VAR 0 2
65751: ARRAY
65752: PUSH
65753: LD_INT 2
65755: ARRAY
65756: PPUSH
65757: CALL_OW 428
65761: ST_TO_ADDR
// if not tmp then
65762: LD_VAR 0 4
65766: NOT
65767: IFFALSE 65771
// continue ;
65769: GO 65686
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
65771: LD_VAR 0 4
65775: PUSH
65776: LD_INT 81
65778: PUSH
65779: LD_VAR 0 3
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PPUSH
65788: CALL_OW 69
65792: IN
65793: PUSH
65794: LD_EXP 84
65798: PUSH
65799: LD_VAR 0 1
65803: ARRAY
65804: PUSH
65805: LD_VAR 0 2
65809: ARRAY
65810: PUSH
65811: LD_INT 1
65813: ARRAY
65814: PPUSH
65815: LD_EXP 84
65819: PUSH
65820: LD_VAR 0 1
65824: ARRAY
65825: PUSH
65826: LD_VAR 0 2
65830: ARRAY
65831: PUSH
65832: LD_INT 2
65834: ARRAY
65835: PPUSH
65836: CALL_OW 458
65840: AND
65841: IFFALSE 65935
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
65843: LD_EXP 84
65847: PUSH
65848: LD_VAR 0 1
65852: ARRAY
65853: PUSH
65854: LD_VAR 0 2
65858: ARRAY
65859: PUSH
65860: LD_INT 1
65862: ARRAY
65863: PPUSH
65864: LD_EXP 84
65868: PUSH
65869: LD_VAR 0 1
65873: ARRAY
65874: PUSH
65875: LD_VAR 0 2
65879: ARRAY
65880: PUSH
65881: LD_INT 2
65883: ARRAY
65884: PPUSH
65885: LD_VAR 0 3
65889: PPUSH
65890: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
65894: LD_ADDR_EXP 84
65898: PUSH
65899: LD_EXP 84
65903: PPUSH
65904: LD_VAR 0 1
65908: PPUSH
65909: LD_EXP 84
65913: PUSH
65914: LD_VAR 0 1
65918: ARRAY
65919: PPUSH
65920: LD_VAR 0 2
65924: PPUSH
65925: CALL_OW 3
65929: PPUSH
65930: CALL_OW 1
65934: ST_TO_ADDR
// end ; end ;
65935: GO 65686
65937: POP
65938: POP
// end ;
65939: GO 65604
65941: POP
65942: POP
// end ;
65943: PPOPN 4
65945: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
65946: LD_INT 0
65948: PPUSH
65949: PPUSH
// result := false ;
65950: LD_ADDR_VAR 0 4
65954: PUSH
65955: LD_INT 0
65957: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
65958: LD_VAR 0 1
65962: PPUSH
65963: CALL_OW 264
65967: PUSH
65968: LD_INT 81
65970: EQUAL
65971: NOT
65972: IFFALSE 65976
// exit ;
65974: GO 66216
// index := GetElementIndex ( minersList , unit ) ;
65976: LD_ADDR_VAR 0 5
65980: PUSH
65981: LD_EXP 83
65985: PPUSH
65986: LD_VAR 0 1
65990: PPUSH
65991: CALL 5887 0 2
65995: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
65996: LD_EXP 84
66000: PUSH
66001: LD_VAR 0 5
66005: ARRAY
66006: PUSH
66007: LD_EXP 85
66011: GREATEREQUAL
66012: IFFALSE 66016
// exit ;
66014: GO 66216
// ComMoveXY ( unit , x , y ) ;
66016: LD_VAR 0 1
66020: PPUSH
66021: LD_VAR 0 2
66025: PPUSH
66026: LD_VAR 0 3
66030: PPUSH
66031: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66035: LD_INT 35
66037: PPUSH
66038: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
66042: LD_VAR 0 1
66046: PPUSH
66047: LD_VAR 0 2
66051: PPUSH
66052: LD_VAR 0 3
66056: PPUSH
66057: CALL 37628 0 3
66061: NOT
66062: PUSH
66063: LD_VAR 0 1
66067: PPUSH
66068: CALL_OW 314
66072: AND
66073: IFFALSE 66077
// exit ;
66075: GO 66216
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
66077: LD_VAR 0 2
66081: PPUSH
66082: LD_VAR 0 3
66086: PPUSH
66087: CALL_OW 428
66091: PUSH
66092: LD_VAR 0 1
66096: EQUAL
66097: PUSH
66098: LD_VAR 0 1
66102: PPUSH
66103: CALL_OW 314
66107: NOT
66108: AND
66109: IFFALSE 66035
// PlaySoundXY ( x , y , PlantMine ) ;
66111: LD_VAR 0 2
66115: PPUSH
66116: LD_VAR 0 3
66120: PPUSH
66121: LD_STRING PlantMine
66123: PPUSH
66124: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
66128: LD_VAR 0 2
66132: PPUSH
66133: LD_VAR 0 3
66137: PPUSH
66138: LD_VAR 0 1
66142: PPUSH
66143: CALL_OW 255
66147: PPUSH
66148: LD_INT 0
66150: PPUSH
66151: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
66155: LD_ADDR_EXP 84
66159: PUSH
66160: LD_EXP 84
66164: PPUSH
66165: LD_VAR 0 5
66169: PUSH
66170: LD_EXP 84
66174: PUSH
66175: LD_VAR 0 5
66179: ARRAY
66180: PUSH
66181: LD_INT 1
66183: PLUS
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PPUSH
66189: LD_VAR 0 2
66193: PUSH
66194: LD_VAR 0 3
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PPUSH
66203: CALL 6102 0 3
66207: ST_TO_ADDR
// result := true ;
66208: LD_ADDR_VAR 0 4
66212: PUSH
66213: LD_INT 1
66215: ST_TO_ADDR
// end ;
66216: LD_VAR 0 4
66220: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
66221: LD_INT 0
66223: PPUSH
66224: PPUSH
66225: PPUSH
// if not unit in minersList then
66226: LD_VAR 0 1
66230: PUSH
66231: LD_EXP 83
66235: IN
66236: NOT
66237: IFFALSE 66241
// exit ;
66239: GO 66633
// index := GetElementIndex ( minersList , unit ) ;
66241: LD_ADDR_VAR 0 6
66245: PUSH
66246: LD_EXP 83
66250: PPUSH
66251: LD_VAR 0 1
66255: PPUSH
66256: CALL 5887 0 2
66260: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
66261: LD_ADDR_VAR 0 5
66265: PUSH
66266: DOUBLE
66267: LD_EXP 84
66271: PUSH
66272: LD_VAR 0 6
66276: ARRAY
66277: INC
66278: ST_TO_ADDR
66279: LD_INT 1
66281: PUSH
66282: FOR_DOWNTO
66283: IFFALSE 66444
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
66285: LD_EXP 84
66289: PUSH
66290: LD_VAR 0 6
66294: ARRAY
66295: PUSH
66296: LD_VAR 0 5
66300: ARRAY
66301: PUSH
66302: LD_INT 1
66304: ARRAY
66305: PUSH
66306: LD_VAR 0 2
66310: EQUAL
66311: PUSH
66312: LD_EXP 84
66316: PUSH
66317: LD_VAR 0 6
66321: ARRAY
66322: PUSH
66323: LD_VAR 0 5
66327: ARRAY
66328: PUSH
66329: LD_INT 2
66331: ARRAY
66332: PUSH
66333: LD_VAR 0 3
66337: EQUAL
66338: AND
66339: IFFALSE 66442
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
66341: LD_EXP 84
66345: PUSH
66346: LD_VAR 0 6
66350: ARRAY
66351: PUSH
66352: LD_VAR 0 5
66356: ARRAY
66357: PUSH
66358: LD_INT 1
66360: ARRAY
66361: PPUSH
66362: LD_EXP 84
66366: PUSH
66367: LD_VAR 0 6
66371: ARRAY
66372: PUSH
66373: LD_VAR 0 5
66377: ARRAY
66378: PUSH
66379: LD_INT 2
66381: ARRAY
66382: PPUSH
66383: LD_VAR 0 1
66387: PPUSH
66388: CALL_OW 255
66392: PPUSH
66393: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
66397: LD_ADDR_EXP 84
66401: PUSH
66402: LD_EXP 84
66406: PPUSH
66407: LD_VAR 0 6
66411: PPUSH
66412: LD_EXP 84
66416: PUSH
66417: LD_VAR 0 6
66421: ARRAY
66422: PPUSH
66423: LD_VAR 0 5
66427: PPUSH
66428: CALL_OW 3
66432: PPUSH
66433: CALL_OW 1
66437: ST_TO_ADDR
// exit ;
66438: POP
66439: POP
66440: GO 66633
// end ; end ;
66442: GO 66282
66444: POP
66445: POP
// for i := minerMinesList [ index ] downto 1 do
66446: LD_ADDR_VAR 0 5
66450: PUSH
66451: DOUBLE
66452: LD_EXP 84
66456: PUSH
66457: LD_VAR 0 6
66461: ARRAY
66462: INC
66463: ST_TO_ADDR
66464: LD_INT 1
66466: PUSH
66467: FOR_DOWNTO
66468: IFFALSE 66631
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
66470: LD_EXP 84
66474: PUSH
66475: LD_VAR 0 6
66479: ARRAY
66480: PUSH
66481: LD_VAR 0 5
66485: ARRAY
66486: PUSH
66487: LD_INT 1
66489: ARRAY
66490: PPUSH
66491: LD_EXP 84
66495: PUSH
66496: LD_VAR 0 6
66500: ARRAY
66501: PUSH
66502: LD_VAR 0 5
66506: ARRAY
66507: PUSH
66508: LD_INT 2
66510: ARRAY
66511: PPUSH
66512: LD_VAR 0 2
66516: PPUSH
66517: LD_VAR 0 3
66521: PPUSH
66522: CALL_OW 298
66526: PUSH
66527: LD_INT 6
66529: LESS
66530: IFFALSE 66629
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
66532: LD_EXP 84
66536: PUSH
66537: LD_VAR 0 6
66541: ARRAY
66542: PUSH
66543: LD_VAR 0 5
66547: ARRAY
66548: PUSH
66549: LD_INT 1
66551: ARRAY
66552: PPUSH
66553: LD_EXP 84
66557: PUSH
66558: LD_VAR 0 6
66562: ARRAY
66563: PUSH
66564: LD_VAR 0 5
66568: ARRAY
66569: PUSH
66570: LD_INT 2
66572: ARRAY
66573: PPUSH
66574: LD_VAR 0 1
66578: PPUSH
66579: CALL_OW 255
66583: PPUSH
66584: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
66588: LD_ADDR_EXP 84
66592: PUSH
66593: LD_EXP 84
66597: PPUSH
66598: LD_VAR 0 6
66602: PPUSH
66603: LD_EXP 84
66607: PUSH
66608: LD_VAR 0 6
66612: ARRAY
66613: PPUSH
66614: LD_VAR 0 5
66618: PPUSH
66619: CALL_OW 3
66623: PPUSH
66624: CALL_OW 1
66628: ST_TO_ADDR
// end ; end ;
66629: GO 66467
66631: POP
66632: POP
// end ;
66633: LD_VAR 0 4
66637: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
66638: LD_INT 0
66640: PPUSH
66641: PPUSH
66642: PPUSH
66643: PPUSH
66644: PPUSH
66645: PPUSH
66646: PPUSH
66647: PPUSH
66648: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
66649: LD_VAR 0 1
66653: PPUSH
66654: CALL_OW 264
66658: PUSH
66659: LD_INT 81
66661: EQUAL
66662: NOT
66663: PUSH
66664: LD_VAR 0 1
66668: PUSH
66669: LD_EXP 83
66673: IN
66674: NOT
66675: OR
66676: IFFALSE 66680
// exit ;
66678: GO 67002
// index := GetElementIndex ( minersList , unit ) ;
66680: LD_ADDR_VAR 0 6
66684: PUSH
66685: LD_EXP 83
66689: PPUSH
66690: LD_VAR 0 1
66694: PPUSH
66695: CALL 5887 0 2
66699: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
66700: LD_ADDR_VAR 0 8
66704: PUSH
66705: LD_EXP 85
66709: PUSH
66710: LD_EXP 84
66714: PUSH
66715: LD_VAR 0 6
66719: ARRAY
66720: MINUS
66721: ST_TO_ADDR
// if not minesFreeAmount then
66722: LD_VAR 0 8
66726: NOT
66727: IFFALSE 66731
// exit ;
66729: GO 67002
// tmp := [ ] ;
66731: LD_ADDR_VAR 0 7
66735: PUSH
66736: EMPTY
66737: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
66738: LD_ADDR_VAR 0 5
66742: PUSH
66743: DOUBLE
66744: LD_INT 1
66746: DEC
66747: ST_TO_ADDR
66748: LD_VAR 0 8
66752: PUSH
66753: FOR_TO
66754: IFFALSE 66949
// begin _d := rand ( 0 , 5 ) ;
66756: LD_ADDR_VAR 0 11
66760: PUSH
66761: LD_INT 0
66763: PPUSH
66764: LD_INT 5
66766: PPUSH
66767: CALL_OW 12
66771: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
66772: LD_ADDR_VAR 0 12
66776: PUSH
66777: LD_INT 2
66779: PPUSH
66780: LD_INT 6
66782: PPUSH
66783: CALL_OW 12
66787: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
66788: LD_ADDR_VAR 0 9
66792: PUSH
66793: LD_VAR 0 2
66797: PPUSH
66798: LD_VAR 0 11
66802: PPUSH
66803: LD_VAR 0 12
66807: PPUSH
66808: CALL_OW 272
66812: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
66813: LD_ADDR_VAR 0 10
66817: PUSH
66818: LD_VAR 0 3
66822: PPUSH
66823: LD_VAR 0 11
66827: PPUSH
66828: LD_VAR 0 12
66832: PPUSH
66833: CALL_OW 273
66837: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
66838: LD_VAR 0 9
66842: PPUSH
66843: LD_VAR 0 10
66847: PPUSH
66848: CALL_OW 488
66852: PUSH
66853: LD_VAR 0 9
66857: PUSH
66858: LD_VAR 0 10
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_VAR 0 7
66871: IN
66872: NOT
66873: AND
66874: PUSH
66875: LD_VAR 0 9
66879: PPUSH
66880: LD_VAR 0 10
66884: PPUSH
66885: CALL_OW 458
66889: NOT
66890: AND
66891: IFFALSE 66933
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
66893: LD_ADDR_VAR 0 7
66897: PUSH
66898: LD_VAR 0 7
66902: PPUSH
66903: LD_VAR 0 7
66907: PUSH
66908: LD_INT 1
66910: PLUS
66911: PPUSH
66912: LD_VAR 0 9
66916: PUSH
66917: LD_VAR 0 10
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PPUSH
66926: CALL_OW 1
66930: ST_TO_ADDR
66931: GO 66947
// i := i - 1 ;
66933: LD_ADDR_VAR 0 5
66937: PUSH
66938: LD_VAR 0 5
66942: PUSH
66943: LD_INT 1
66945: MINUS
66946: ST_TO_ADDR
// end ;
66947: GO 66753
66949: POP
66950: POP
// for i in tmp do
66951: LD_ADDR_VAR 0 5
66955: PUSH
66956: LD_VAR 0 7
66960: PUSH
66961: FOR_IN
66962: IFFALSE 67000
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
66964: LD_VAR 0 1
66968: PPUSH
66969: LD_VAR 0 5
66973: PUSH
66974: LD_INT 1
66976: ARRAY
66977: PPUSH
66978: LD_VAR 0 5
66982: PUSH
66983: LD_INT 2
66985: ARRAY
66986: PPUSH
66987: CALL 65946 0 3
66991: NOT
66992: IFFALSE 66998
// exit ;
66994: POP
66995: POP
66996: GO 67002
66998: GO 66961
67000: POP
67001: POP
// end ;
67002: LD_VAR 0 4
67006: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
67007: LD_INT 0
67009: PPUSH
67010: PPUSH
67011: PPUSH
67012: PPUSH
67013: PPUSH
67014: PPUSH
67015: PPUSH
// if not GetClass ( unit ) = class_sniper then
67016: LD_VAR 0 1
67020: PPUSH
67021: CALL_OW 257
67025: PUSH
67026: LD_INT 5
67028: EQUAL
67029: NOT
67030: IFFALSE 67034
// exit ;
67032: GO 67422
// dist := 8 ;
67034: LD_ADDR_VAR 0 5
67038: PUSH
67039: LD_INT 8
67041: ST_TO_ADDR
// viewRange := 12 ;
67042: LD_ADDR_VAR 0 7
67046: PUSH
67047: LD_INT 12
67049: ST_TO_ADDR
// side := GetSide ( unit ) ;
67050: LD_ADDR_VAR 0 6
67054: PUSH
67055: LD_VAR 0 1
67059: PPUSH
67060: CALL_OW 255
67064: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
67065: LD_INT 61
67067: PPUSH
67068: LD_VAR 0 6
67072: PPUSH
67073: CALL_OW 321
67077: PUSH
67078: LD_INT 2
67080: EQUAL
67081: IFFALSE 67091
// viewRange := 16 ;
67083: LD_ADDR_VAR 0 7
67087: PUSH
67088: LD_INT 16
67090: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
67091: LD_VAR 0 1
67095: PPUSH
67096: LD_VAR 0 2
67100: PPUSH
67101: LD_VAR 0 3
67105: PPUSH
67106: CALL_OW 297
67110: PUSH
67111: LD_VAR 0 5
67115: GREATER
67116: IFFALSE 67195
// begin ComMoveXY ( unit , x , y ) ;
67118: LD_VAR 0 1
67122: PPUSH
67123: LD_VAR 0 2
67127: PPUSH
67128: LD_VAR 0 3
67132: PPUSH
67133: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67137: LD_INT 35
67139: PPUSH
67140: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
67144: LD_VAR 0 1
67148: PPUSH
67149: LD_VAR 0 2
67153: PPUSH
67154: LD_VAR 0 3
67158: PPUSH
67159: CALL 37628 0 3
67163: NOT
67164: IFFALSE 67168
// exit ;
67166: GO 67422
// until GetDistUnitXY ( unit , x , y ) < dist ;
67168: LD_VAR 0 1
67172: PPUSH
67173: LD_VAR 0 2
67177: PPUSH
67178: LD_VAR 0 3
67182: PPUSH
67183: CALL_OW 297
67187: PUSH
67188: LD_VAR 0 5
67192: LESS
67193: IFFALSE 67137
// end ; ComTurnXY ( unit , x , y ) ;
67195: LD_VAR 0 1
67199: PPUSH
67200: LD_VAR 0 2
67204: PPUSH
67205: LD_VAR 0 3
67209: PPUSH
67210: CALL_OW 118
// wait ( 5 ) ;
67214: LD_INT 5
67216: PPUSH
67217: CALL_OW 67
// _d := GetDir ( unit ) ;
67221: LD_ADDR_VAR 0 10
67225: PUSH
67226: LD_VAR 0 1
67230: PPUSH
67231: CALL_OW 254
67235: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
67236: LD_ADDR_VAR 0 8
67240: PUSH
67241: LD_VAR 0 1
67245: PPUSH
67246: CALL_OW 250
67250: PPUSH
67251: LD_VAR 0 10
67255: PPUSH
67256: LD_VAR 0 5
67260: PPUSH
67261: CALL_OW 272
67265: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
67266: LD_ADDR_VAR 0 9
67270: PUSH
67271: LD_VAR 0 1
67275: PPUSH
67276: CALL_OW 251
67280: PPUSH
67281: LD_VAR 0 10
67285: PPUSH
67286: LD_VAR 0 5
67290: PPUSH
67291: CALL_OW 273
67295: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67296: LD_VAR 0 8
67300: PPUSH
67301: LD_VAR 0 9
67305: PPUSH
67306: CALL_OW 488
67310: NOT
67311: IFFALSE 67315
// exit ;
67313: GO 67422
// ComAnimCustom ( unit , 1 ) ;
67315: LD_VAR 0 1
67319: PPUSH
67320: LD_INT 1
67322: PPUSH
67323: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
67327: LD_VAR 0 8
67331: PPUSH
67332: LD_VAR 0 9
67336: PPUSH
67337: LD_VAR 0 6
67341: PPUSH
67342: LD_VAR 0 7
67346: PPUSH
67347: CALL_OW 330
// repeat wait ( 1 ) ;
67351: LD_INT 1
67353: PPUSH
67354: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
67358: LD_VAR 0 1
67362: PPUSH
67363: CALL_OW 316
67367: PUSH
67368: LD_VAR 0 1
67372: PPUSH
67373: CALL_OW 314
67377: OR
67378: PUSH
67379: LD_VAR 0 1
67383: PPUSH
67384: CALL_OW 302
67388: NOT
67389: OR
67390: PUSH
67391: LD_VAR 0 1
67395: PPUSH
67396: CALL_OW 301
67400: OR
67401: IFFALSE 67351
// RemoveSeeing ( _x , _y , side ) ;
67403: LD_VAR 0 8
67407: PPUSH
67408: LD_VAR 0 9
67412: PPUSH
67413: LD_VAR 0 6
67417: PPUSH
67418: CALL_OW 331
// end ; end_of_file
67422: LD_VAR 0 4
67426: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67427: LD_VAR 0 1
67431: PUSH
67432: LD_INT 200
67434: DOUBLE
67435: GREATEREQUAL
67436: IFFALSE 67444
67438: LD_INT 299
67440: DOUBLE
67441: LESSEQUAL
67442: IFTRUE 67446
67444: GO 67478
67446: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67447: LD_VAR 0 1
67451: PPUSH
67452: LD_VAR 0 2
67456: PPUSH
67457: LD_VAR 0 3
67461: PPUSH
67462: LD_VAR 0 4
67466: PPUSH
67467: LD_VAR 0 5
67471: PPUSH
67472: CALL 62909 0 5
67476: GO 67555
67478: LD_INT 300
67480: DOUBLE
67481: GREATEREQUAL
67482: IFFALSE 67490
67484: LD_INT 399
67486: DOUBLE
67487: LESSEQUAL
67488: IFTRUE 67492
67490: GO 67554
67492: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67493: LD_VAR 0 1
67497: PPUSH
67498: LD_VAR 0 2
67502: PPUSH
67503: LD_VAR 0 3
67507: PPUSH
67508: LD_VAR 0 4
67512: PPUSH
67513: LD_VAR 0 5
67517: PPUSH
67518: LD_VAR 0 6
67522: PPUSH
67523: LD_VAR 0 7
67527: PPUSH
67528: LD_VAR 0 8
67532: PPUSH
67533: LD_VAR 0 9
67537: PPUSH
67538: LD_VAR 0 10
67542: PPUSH
67543: LD_VAR 0 11
67547: PPUSH
67548: CALL 59234 0 11
67552: GO 67555
67554: POP
// end ;
67555: PPOPN 11
67557: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67558: LD_VAR 0 1
67562: PPUSH
67563: LD_VAR 0 2
67567: PPUSH
67568: LD_VAR 0 3
67572: PPUSH
67573: LD_VAR 0 4
67577: PPUSH
67578: LD_VAR 0 5
67582: PPUSH
67583: CALL 62645 0 5
// end ;
67587: PPOPN 5
67589: END
