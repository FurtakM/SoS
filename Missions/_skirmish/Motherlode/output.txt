// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 116 0 0
// PrepareNature ( 4 , 4 , 12 , 4 , 4 , 1 , 4 , natArea , watArea ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 12
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 4
  22: PPUSH
  23: LD_INT 1
  25: PPUSH
  26: LD_INT 4
  28: PPUSH
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: CALL 34643 0 9
// if gameType = 1 then
  39: LD_EXP 2
  43: PUSH
  44: LD_INT 1
  46: EQUAL
  47: IFFALSE 111
// InitEcoMode ( [ 189 , 97 ] , [ [ 215 , 93 ] , [ 204 , 126 ] ] , [ attacksArea1 , attacksArea2 , attacksArea3 , attacksArea4 , attacksArea5 ] ) else
  49: LD_INT 189
  51: PUSH
  52: LD_INT 97
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: PPUSH
  59: LD_INT 215
  61: PUSH
  62: LD_INT 93
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: PUSH
  69: LD_INT 204
  71: PUSH
  72: LD_INT 126
  74: PUSH
  75: EMPTY
  76: LIST
  77: LIST
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PPUSH
  83: LD_INT 2
  85: PUSH
  86: LD_INT 3
  88: PUSH
  89: LD_INT 4
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 6
  97: PUSH
  98: EMPTY
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: PPUSH
 105: CALL 39753 0 3
 109: GO 115
// InitDefendMode ( ) ;
 111: CALL 165 0 0
// end ;
 115: END
// export debug , gameType ; function Init ; begin
 116: LD_INT 0
 118: PPUSH
// debug := false ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// if debug then
 127: LD_EXP 1
 131: IFFALSE 143
// gameType := 1 else
 133: LD_ADDR_EXP 2
 137: PUSH
 138: LD_INT 1
 140: ST_TO_ADDR
 141: GO 160
// gameType := GetMultiplayerSetting ( 50 ) + 1 ;
 143: LD_ADDR_EXP 2
 147: PUSH
 148: LD_INT 50
 150: PPUSH
 151: CALL_OW 426
 155: PUSH
 156: LD_INT 1
 158: PLUS
 159: ST_TO_ADDR
// end ; end_of_file
 160: LD_VAR 0 1
 164: RET
// export function InitDefendMode ( ) ; var buildingsList ; begin
 165: LD_INT 0
 167: PPUSH
 168: PPUSH
// buildingsList := [ [ 91 , 182 , 59 , 3 , 0 , 0 , 45 ] , [ 90 , 185 , 60 , 3 , 0 , 0 , 46 ] , [ 90 , 188 , 62 , 3 , 0 , 0 , 43 ] , [ 73 , 178 , 64 , 2 , 0 , 0 , 0 ] , [ 75 , 182 , 65 , 3 , 0 , 0 , 0 ] , [ 76 , 179 , 68 , 1 , 0 , 0 , 0 ] , [ 69 , 182 , 68 , 2 , 0 , 0 , 0 ] , [ 71 , 186 , 68 , 4 , 0 , 0 , 0 ] , [ 72 , 182 , 72 , 0 , 0 , 0 , 0 ] , [ 91 , 169 , 73 , 1 , 0 , 0 , 46 ] , [ 67 , 209 , 79 , 4 , 0 , 0 , 0 ] , [ 88 , 204 , 87 , 3 , 0 , 0 , 0 ] , [ 91 , 169 , 88 , 1 , 0 , 0 , 43 ] , [ 91 , 169 , 91 , 1 , 0 , 0 , 45 ] , [ 86 , 192 , 92 , 4 , 0 , 0 , 0 ] , [ 88 , 207 , 93 , 2 , 0 , 0 , 0 ] , [ 65 , 194 , 96 , 4 , 0 , 0 , 0 ] , [ 90 , 224 , 96 , 4 , 0 , 0 , 45 ] , [ 86 , 196 , 100 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 100 , 4 , 0 , 0 , 46 ] , [ 88 , 211 , 101 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 103 , 4 , 0 , 0 , 45 ] , [ 67 , 172 , 105 , 1 , 0 , 0 , 0 ] , [ 86 , 185 , 105 , 0 , 0 , 0 , 0 ] , [ 86 , 188 , 107 , 5 , 0 , 0 , 0 ] , [ 86 , 186 , 108 , 3 , 0 , 0 , 0 ] , [ 91 , 172 , 109 , 1 , 0 , 0 , 45 ] , [ 90 , 227 , 119 , 5 , 0 , 0 , 46 ] , [ 91 , 225 , 120 , 5 , 0 , 0 , 45 ] , [ 67 , 226 , 135 , 5 , 0 , 0 , 0 ] ] ;
 169: LD_ADDR_VAR 0 2
 173: PUSH
 174: LD_INT 91
 176: PUSH
 177: LD_INT 182
 179: PUSH
 180: LD_INT 59
 182: PUSH
 183: LD_INT 3
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 45
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 90
 206: PUSH
 207: LD_INT 185
 209: PUSH
 210: LD_INT 60
 212: PUSH
 213: LD_INT 3
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 46
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: PUSH
 234: LD_INT 90
 236: PUSH
 237: LD_INT 188
 239: PUSH
 240: LD_INT 62
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 0
 251: PUSH
 252: LD_INT 43
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 73
 266: PUSH
 267: LD_INT 178
 269: PUSH
 270: LD_INT 64
 272: PUSH
 273: LD_INT 2
 275: PUSH
 276: LD_INT 0
 278: PUSH
 279: LD_INT 0
 281: PUSH
 282: LD_INT 0
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 75
 296: PUSH
 297: LD_INT 182
 299: PUSH
 300: LD_INT 65
 302: PUSH
 303: LD_INT 3
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: LD_INT 0
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: PUSH
 324: LD_INT 76
 326: PUSH
 327: LD_INT 179
 329: PUSH
 330: LD_INT 68
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 0
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 69
 356: PUSH
 357: LD_INT 182
 359: PUSH
 360: LD_INT 68
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 71
 386: PUSH
 387: LD_INT 186
 389: PUSH
 390: LD_INT 68
 392: PUSH
 393: LD_INT 4
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: LD_INT 72
 416: PUSH
 417: LD_INT 182
 419: PUSH
 420: LD_INT 72
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: LD_INT 0
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: PUSH
 444: LD_INT 91
 446: PUSH
 447: LD_INT 169
 449: PUSH
 450: LD_INT 73
 452: PUSH
 453: LD_INT 1
 455: PUSH
 456: LD_INT 0
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 46
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 67
 476: PUSH
 477: LD_INT 209
 479: PUSH
 480: LD_INT 79
 482: PUSH
 483: LD_INT 4
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 88
 506: PUSH
 507: LD_INT 204
 509: PUSH
 510: LD_INT 87
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: LD_INT 0
 518: PUSH
 519: LD_INT 0
 521: PUSH
 522: LD_INT 0
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 91
 536: PUSH
 537: LD_INT 169
 539: PUSH
 540: LD_INT 88
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 0
 551: PUSH
 552: LD_INT 43
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 91
 566: PUSH
 567: LD_INT 169
 569: PUSH
 570: LD_INT 91
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 0
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: LD_INT 45
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 86
 596: PUSH
 597: LD_INT 192
 599: PUSH
 600: LD_INT 92
 602: PUSH
 603: LD_INT 4
 605: PUSH
 606: LD_INT 0
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: LD_INT 0
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_INT 88
 626: PUSH
 627: LD_INT 207
 629: PUSH
 630: LD_INT 93
 632: PUSH
 633: LD_INT 2
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 65
 656: PUSH
 657: LD_INT 194
 659: PUSH
 660: LD_INT 96
 662: PUSH
 663: LD_INT 4
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 90
 686: PUSH
 687: LD_INT 224
 689: PUSH
 690: LD_INT 96
 692: PUSH
 693: LD_INT 4
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 45
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: PUSH
 714: LD_INT 86
 716: PUSH
 717: LD_INT 196
 719: PUSH
 720: LD_INT 100
 722: PUSH
 723: LD_INT 4
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 91
 746: PUSH
 747: LD_INT 228
 749: PUSH
 750: LD_INT 100
 752: PUSH
 753: LD_INT 4
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: LD_INT 0
 761: PUSH
 762: LD_INT 46
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 88
 776: PUSH
 777: LD_INT 211
 779: PUSH
 780: LD_INT 101
 782: PUSH
 783: LD_INT 4
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 0
 791: PUSH
 792: LD_INT 0
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 91
 806: PUSH
 807: LD_INT 228
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 4
 815: PUSH
 816: LD_INT 0
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 45
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 67
 836: PUSH
 837: LD_INT 172
 839: PUSH
 840: LD_INT 105
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 0
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 86
 866: PUSH
 867: LD_INT 185
 869: PUSH
 870: LD_INT 105
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: LD_INT 0
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 86
 896: PUSH
 897: LD_INT 188
 899: PUSH
 900: LD_INT 107
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: LD_INT 0
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 86
 926: PUSH
 927: LD_INT 186
 929: PUSH
 930: LD_INT 108
 932: PUSH
 933: LD_INT 3
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 91
 956: PUSH
 957: LD_INT 172
 959: PUSH
 960: LD_INT 109
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 0
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 45
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 227
 989: PUSH
 990: LD_INT 119
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 0
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 46
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 91
1016: PUSH
1017: LD_INT 225
1019: PUSH
1020: LD_INT 120
1022: PUSH
1023: LD_INT 5
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: LD_INT 45
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_INT 67
1046: PUSH
1047: LD_INT 226
1049: PUSH
1050: LD_INT 135
1052: PUSH
1053: LD_INT 5
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: ST_TO_ADDR
// end ; end_of_file
1106: LD_VAR 0 1
1110: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
1111: LD_INT 0
1113: PPUSH
// ar_miner := 81 ;
1114: LD_ADDR_EXP 10
1118: PUSH
1119: LD_INT 81
1121: ST_TO_ADDR
// ar_crane := 88 ;
1122: LD_ADDR_EXP 9
1126: PUSH
1127: LD_INT 88
1129: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
1130: LD_ADDR_EXP 4
1134: PUSH
1135: LD_INT 89
1137: ST_TO_ADDR
// us_hack := 99 ;
1138: LD_ADDR_EXP 5
1142: PUSH
1143: LD_INT 99
1145: ST_TO_ADDR
// us_artillery := 97 ;
1146: LD_ADDR_EXP 6
1150: PUSH
1151: LD_INT 97
1153: ST_TO_ADDR
// ar_bio_bomb := 91 ;
1154: LD_ADDR_EXP 7
1158: PUSH
1159: LD_INT 91
1161: ST_TO_ADDR
// ar_mortar := 92 ;
1162: LD_ADDR_EXP 8
1166: PUSH
1167: LD_INT 92
1169: ST_TO_ADDR
// ru_radar := 98 ;
1170: LD_ADDR_EXP 3
1174: PUSH
1175: LD_INT 98
1177: ST_TO_ADDR
// tech_Artillery := 80 ;
1178: LD_ADDR_EXP 11
1182: PUSH
1183: LD_INT 80
1185: ST_TO_ADDR
// tech_RadMat := 81 ;
1186: LD_ADDR_EXP 12
1190: PUSH
1191: LD_INT 81
1193: ST_TO_ADDR
// tech_BasicTools := 82 ;
1194: LD_ADDR_EXP 13
1198: PUSH
1199: LD_INT 82
1201: ST_TO_ADDR
// tech_Cargo := 83 ;
1202: LD_ADDR_EXP 14
1206: PUSH
1207: LD_INT 83
1209: ST_TO_ADDR
// tech_Track := 84 ;
1210: LD_ADDR_EXP 15
1214: PUSH
1215: LD_INT 84
1217: ST_TO_ADDR
// tech_Crane := 85 ;
1218: LD_ADDR_EXP 16
1222: PUSH
1223: LD_INT 85
1225: ST_TO_ADDR
// tech_Bulldozer := 86 ;
1226: LD_ADDR_EXP 17
1230: PUSH
1231: LD_INT 86
1233: ST_TO_ADDR
// tech_Hovercraft := 87 ;
1234: LD_ADDR_EXP 18
1238: PUSH
1239: LD_INT 87
1241: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
1242: LD_ADDR_EXP 19
1246: PUSH
1247: LD_INT 88
1249: ST_TO_ADDR
// class_mastodont := 31 ;
1250: LD_ADDR_EXP 20
1254: PUSH
1255: LD_INT 31
1257: ST_TO_ADDR
// class_horse := 21 ;
1258: LD_ADDR_EXP 21
1262: PUSH
1263: LD_INT 21
1265: ST_TO_ADDR
// end ;
1266: LD_VAR 0 1
1270: RET
// every 1 do
1271: GO 1273
1273: DISABLE
// InitGlobalVariables ; end_of_file
1274: CALL 1111 0 0
1278: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1279: LD_INT 0
1281: PPUSH
1282: PPUSH
// if exist_mode then
1283: LD_VAR 0 2
1287: IFFALSE 1312
// unit := CreateCharacter ( prefix & ident ) else
1289: LD_ADDR_VAR 0 5
1293: PUSH
1294: LD_VAR 0 3
1298: PUSH
1299: LD_VAR 0 1
1303: STR
1304: PPUSH
1305: CALL_OW 34
1309: ST_TO_ADDR
1310: GO 1327
// unit := NewCharacter ( ident ) ;
1312: LD_ADDR_VAR 0 5
1316: PUSH
1317: LD_VAR 0 1
1321: PPUSH
1322: CALL_OW 25
1326: ST_TO_ADDR
// result := unit ;
1327: LD_ADDR_VAR 0 4
1331: PUSH
1332: LD_VAR 0 5
1336: ST_TO_ADDR
// end ;
1337: LD_VAR 0 4
1341: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1342: LD_INT 0
1344: PPUSH
1345: PPUSH
// if not side or not nation then
1346: LD_VAR 0 1
1350: NOT
1351: PUSH
1352: LD_VAR 0 2
1356: NOT
1357: OR
1358: IFFALSE 1362
// exit ;
1360: GO 2130
// case nation of nation_american :
1362: LD_VAR 0 2
1366: PUSH
1367: LD_INT 1
1369: DOUBLE
1370: EQUAL
1371: IFTRUE 1375
1373: GO 1589
1375: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1376: LD_ADDR_VAR 0 4
1380: PUSH
1381: LD_INT 35
1383: PUSH
1384: LD_INT 45
1386: PUSH
1387: LD_INT 46
1389: PUSH
1390: LD_INT 47
1392: PUSH
1393: LD_INT 82
1395: PUSH
1396: LD_INT 83
1398: PUSH
1399: LD_INT 84
1401: PUSH
1402: LD_INT 85
1404: PUSH
1405: LD_INT 86
1407: PUSH
1408: LD_INT 1
1410: PUSH
1411: LD_INT 2
1413: PUSH
1414: LD_INT 6
1416: PUSH
1417: LD_INT 15
1419: PUSH
1420: LD_INT 16
1422: PUSH
1423: LD_INT 7
1425: PUSH
1426: LD_INT 12
1428: PUSH
1429: LD_INT 13
1431: PUSH
1432: LD_INT 10
1434: PUSH
1435: LD_INT 14
1437: PUSH
1438: LD_INT 20
1440: PUSH
1441: LD_INT 21
1443: PUSH
1444: LD_INT 22
1446: PUSH
1447: LD_INT 25
1449: PUSH
1450: LD_INT 32
1452: PUSH
1453: LD_INT 27
1455: PUSH
1456: LD_INT 36
1458: PUSH
1459: LD_INT 69
1461: PUSH
1462: LD_INT 39
1464: PUSH
1465: LD_INT 34
1467: PUSH
1468: LD_INT 40
1470: PUSH
1471: LD_INT 48
1473: PUSH
1474: LD_INT 49
1476: PUSH
1477: LD_INT 50
1479: PUSH
1480: LD_INT 51
1482: PUSH
1483: LD_INT 52
1485: PUSH
1486: LD_INT 53
1488: PUSH
1489: LD_INT 54
1491: PUSH
1492: LD_INT 55
1494: PUSH
1495: LD_INT 56
1497: PUSH
1498: LD_INT 57
1500: PUSH
1501: LD_INT 58
1503: PUSH
1504: LD_INT 59
1506: PUSH
1507: LD_INT 60
1509: PUSH
1510: LD_INT 61
1512: PUSH
1513: LD_INT 62
1515: PUSH
1516: LD_INT 80
1518: PUSH
1519: LD_INT 82
1521: PUSH
1522: LD_INT 83
1524: PUSH
1525: LD_INT 84
1527: PUSH
1528: LD_INT 85
1530: PUSH
1531: LD_INT 86
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: ST_TO_ADDR
1587: GO 2054
1589: LD_INT 2
1591: DOUBLE
1592: EQUAL
1593: IFTRUE 1597
1595: GO 1823
1597: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1598: LD_ADDR_VAR 0 4
1602: PUSH
1603: LD_INT 35
1605: PUSH
1606: LD_INT 45
1608: PUSH
1609: LD_INT 46
1611: PUSH
1612: LD_INT 47
1614: PUSH
1615: LD_INT 82
1617: PUSH
1618: LD_INT 83
1620: PUSH
1621: LD_INT 84
1623: PUSH
1624: LD_INT 85
1626: PUSH
1627: LD_INT 87
1629: PUSH
1630: LD_INT 70
1632: PUSH
1633: LD_INT 1
1635: PUSH
1636: LD_INT 11
1638: PUSH
1639: LD_INT 3
1641: PUSH
1642: LD_INT 4
1644: PUSH
1645: LD_INT 5
1647: PUSH
1648: LD_INT 6
1650: PUSH
1651: LD_INT 15
1653: PUSH
1654: LD_INT 18
1656: PUSH
1657: LD_INT 7
1659: PUSH
1660: LD_INT 17
1662: PUSH
1663: LD_INT 8
1665: PUSH
1666: LD_INT 20
1668: PUSH
1669: LD_INT 21
1671: PUSH
1672: LD_INT 22
1674: PUSH
1675: LD_INT 72
1677: PUSH
1678: LD_INT 26
1680: PUSH
1681: LD_INT 69
1683: PUSH
1684: LD_INT 39
1686: PUSH
1687: LD_INT 40
1689: PUSH
1690: LD_INT 41
1692: PUSH
1693: LD_INT 42
1695: PUSH
1696: LD_INT 43
1698: PUSH
1699: LD_INT 48
1701: PUSH
1702: LD_INT 49
1704: PUSH
1705: LD_INT 50
1707: PUSH
1708: LD_INT 51
1710: PUSH
1711: LD_INT 52
1713: PUSH
1714: LD_INT 53
1716: PUSH
1717: LD_INT 54
1719: PUSH
1720: LD_INT 55
1722: PUSH
1723: LD_INT 56
1725: PUSH
1726: LD_INT 60
1728: PUSH
1729: LD_INT 61
1731: PUSH
1732: LD_INT 62
1734: PUSH
1735: LD_INT 66
1737: PUSH
1738: LD_INT 67
1740: PUSH
1741: LD_INT 68
1743: PUSH
1744: LD_INT 81
1746: PUSH
1747: LD_INT 82
1749: PUSH
1750: LD_INT 83
1752: PUSH
1753: LD_INT 84
1755: PUSH
1756: LD_INT 85
1758: PUSH
1759: LD_INT 87
1761: PUSH
1762: LD_INT 88
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: ST_TO_ADDR
1821: GO 2054
1823: LD_INT 3
1825: DOUBLE
1826: EQUAL
1827: IFTRUE 1831
1829: GO 2053
1831: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1832: LD_ADDR_VAR 0 4
1836: PUSH
1837: LD_INT 46
1839: PUSH
1840: LD_INT 47
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: LD_INT 2
1848: PUSH
1849: LD_INT 82
1851: PUSH
1852: LD_INT 83
1854: PUSH
1855: LD_INT 84
1857: PUSH
1858: LD_INT 85
1860: PUSH
1861: LD_INT 86
1863: PUSH
1864: LD_INT 11
1866: PUSH
1867: LD_INT 9
1869: PUSH
1870: LD_INT 20
1872: PUSH
1873: LD_INT 19
1875: PUSH
1876: LD_INT 21
1878: PUSH
1879: LD_INT 24
1881: PUSH
1882: LD_INT 22
1884: PUSH
1885: LD_INT 25
1887: PUSH
1888: LD_INT 28
1890: PUSH
1891: LD_INT 29
1893: PUSH
1894: LD_INT 30
1896: PUSH
1897: LD_INT 31
1899: PUSH
1900: LD_INT 37
1902: PUSH
1903: LD_INT 38
1905: PUSH
1906: LD_INT 32
1908: PUSH
1909: LD_INT 27
1911: PUSH
1912: LD_INT 33
1914: PUSH
1915: LD_INT 69
1917: PUSH
1918: LD_INT 39
1920: PUSH
1921: LD_INT 34
1923: PUSH
1924: LD_INT 40
1926: PUSH
1927: LD_INT 71
1929: PUSH
1930: LD_INT 23
1932: PUSH
1933: LD_INT 44
1935: PUSH
1936: LD_INT 48
1938: PUSH
1939: LD_INT 49
1941: PUSH
1942: LD_INT 50
1944: PUSH
1945: LD_INT 51
1947: PUSH
1948: LD_INT 52
1950: PUSH
1951: LD_INT 53
1953: PUSH
1954: LD_INT 54
1956: PUSH
1957: LD_INT 55
1959: PUSH
1960: LD_INT 56
1962: PUSH
1963: LD_INT 57
1965: PUSH
1966: LD_INT 58
1968: PUSH
1969: LD_INT 59
1971: PUSH
1972: LD_INT 63
1974: PUSH
1975: LD_INT 64
1977: PUSH
1978: LD_INT 65
1980: PUSH
1981: LD_INT 82
1983: PUSH
1984: LD_INT 83
1986: PUSH
1987: LD_INT 84
1989: PUSH
1990: LD_INT 85
1992: PUSH
1993: LD_INT 86
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: ST_TO_ADDR
2051: GO 2054
2053: POP
// if state > - 1 and state < 3 then
2054: LD_VAR 0 3
2058: PUSH
2059: LD_INT 1
2061: NEG
2062: GREATER
2063: PUSH
2064: LD_VAR 0 3
2068: PUSH
2069: LD_INT 3
2071: LESS
2072: AND
2073: IFFALSE 2130
// for i in result do
2075: LD_ADDR_VAR 0 5
2079: PUSH
2080: LD_VAR 0 4
2084: PUSH
2085: FOR_IN
2086: IFFALSE 2128
// if GetTech ( i , side ) <> state then
2088: LD_VAR 0 5
2092: PPUSH
2093: LD_VAR 0 1
2097: PPUSH
2098: CALL_OW 321
2102: PUSH
2103: LD_VAR 0 3
2107: NONEQUAL
2108: IFFALSE 2126
// result := result diff i ;
2110: LD_ADDR_VAR 0 4
2114: PUSH
2115: LD_VAR 0 4
2119: PUSH
2120: LD_VAR 0 5
2124: DIFF
2125: ST_TO_ADDR
2126: GO 2085
2128: POP
2129: POP
// end ;
2130: LD_VAR 0 4
2134: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2135: LD_INT 0
2137: PPUSH
2138: PPUSH
2139: PPUSH
// result := true ;
2140: LD_ADDR_VAR 0 3
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2148: LD_ADDR_VAR 0 5
2152: PUSH
2153: LD_VAR 0 2
2157: PPUSH
2158: CALL_OW 480
2162: ST_TO_ADDR
// if not tmp then
2163: LD_VAR 0 5
2167: NOT
2168: IFFALSE 2172
// exit ;
2170: GO 2221
// for i in tmp do
2172: LD_ADDR_VAR 0 4
2176: PUSH
2177: LD_VAR 0 5
2181: PUSH
2182: FOR_IN
2183: IFFALSE 2219
// if GetTech ( i , side ) <> state_researched then
2185: LD_VAR 0 4
2189: PPUSH
2190: LD_VAR 0 1
2194: PPUSH
2195: CALL_OW 321
2199: PUSH
2200: LD_INT 2
2202: NONEQUAL
2203: IFFALSE 2217
// begin result := false ;
2205: LD_ADDR_VAR 0 3
2209: PUSH
2210: LD_INT 0
2212: ST_TO_ADDR
// exit ;
2213: POP
2214: POP
2215: GO 2221
// end ;
2217: GO 2182
2219: POP
2220: POP
// end ;
2221: LD_VAR 0 3
2225: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2226: LD_INT 0
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2241: LD_VAR 0 1
2245: NOT
2246: PUSH
2247: LD_VAR 0 1
2251: PPUSH
2252: CALL_OW 257
2256: PUSH
2257: LD_INT 9
2259: NONEQUAL
2260: OR
2261: IFFALSE 2265
// exit ;
2263: GO 2838
// side := GetSide ( unit ) ;
2265: LD_ADDR_VAR 0 9
2269: PUSH
2270: LD_VAR 0 1
2274: PPUSH
2275: CALL_OW 255
2279: ST_TO_ADDR
// tech_space := tech_spacanom ;
2280: LD_ADDR_VAR 0 12
2284: PUSH
2285: LD_INT 29
2287: ST_TO_ADDR
// tech_time := tech_taurad ;
2288: LD_ADDR_VAR 0 13
2292: PUSH
2293: LD_INT 28
2295: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2296: LD_ADDR_VAR 0 11
2300: PUSH
2301: LD_VAR 0 1
2305: PPUSH
2306: CALL_OW 310
2310: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2311: LD_VAR 0 11
2315: PPUSH
2316: CALL_OW 247
2320: PUSH
2321: LD_INT 2
2323: EQUAL
2324: IFFALSE 2328
// exit ;
2326: GO 2838
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2328: LD_ADDR_VAR 0 8
2332: PUSH
2333: LD_INT 81
2335: PUSH
2336: LD_VAR 0 9
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: PUSH
2345: LD_INT 3
2347: PUSH
2348: LD_INT 21
2350: PUSH
2351: LD_INT 3
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PPUSH
2366: CALL_OW 69
2370: ST_TO_ADDR
// if not tmp then
2371: LD_VAR 0 8
2375: NOT
2376: IFFALSE 2380
// exit ;
2378: GO 2838
// if in_unit then
2380: LD_VAR 0 11
2384: IFFALSE 2408
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2386: LD_ADDR_VAR 0 10
2390: PUSH
2391: LD_VAR 0 8
2395: PPUSH
2396: LD_VAR 0 11
2400: PPUSH
2401: CALL_OW 74
2405: ST_TO_ADDR
2406: GO 2428
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2408: LD_ADDR_VAR 0 10
2412: PUSH
2413: LD_VAR 0 8
2417: PPUSH
2418: LD_VAR 0 1
2422: PPUSH
2423: CALL_OW 74
2427: ST_TO_ADDR
// if not enemy then
2428: LD_VAR 0 10
2432: NOT
2433: IFFALSE 2437
// exit ;
2435: GO 2838
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2437: LD_VAR 0 11
2441: PUSH
2442: LD_VAR 0 11
2446: PPUSH
2447: LD_VAR 0 10
2451: PPUSH
2452: CALL_OW 296
2456: PUSH
2457: LD_INT 13
2459: GREATER
2460: AND
2461: PUSH
2462: LD_VAR 0 1
2466: PPUSH
2467: LD_VAR 0 10
2471: PPUSH
2472: CALL_OW 296
2476: PUSH
2477: LD_INT 12
2479: GREATER
2480: OR
2481: IFFALSE 2485
// exit ;
2483: GO 2838
// missile := [ 1 ] ;
2485: LD_ADDR_VAR 0 14
2489: PUSH
2490: LD_INT 1
2492: PUSH
2493: EMPTY
2494: LIST
2495: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2496: LD_VAR 0 9
2500: PPUSH
2501: LD_VAR 0 12
2505: PPUSH
2506: CALL_OW 325
2510: IFFALSE 2539
// missile := Insert ( missile , missile + 1 , 2 ) ;
2512: LD_ADDR_VAR 0 14
2516: PUSH
2517: LD_VAR 0 14
2521: PPUSH
2522: LD_VAR 0 14
2526: PUSH
2527: LD_INT 1
2529: PLUS
2530: PPUSH
2531: LD_INT 2
2533: PPUSH
2534: CALL_OW 2
2538: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2539: LD_VAR 0 9
2543: PPUSH
2544: LD_VAR 0 13
2548: PPUSH
2549: CALL_OW 325
2553: PUSH
2554: LD_VAR 0 10
2558: PPUSH
2559: CALL_OW 255
2563: PPUSH
2564: LD_VAR 0 13
2568: PPUSH
2569: CALL_OW 325
2573: NOT
2574: AND
2575: IFFALSE 2604
// missile := Insert ( missile , missile + 1 , 3 ) ;
2577: LD_ADDR_VAR 0 14
2581: PUSH
2582: LD_VAR 0 14
2586: PPUSH
2587: LD_VAR 0 14
2591: PUSH
2592: LD_INT 1
2594: PLUS
2595: PPUSH
2596: LD_INT 3
2598: PPUSH
2599: CALL_OW 2
2603: ST_TO_ADDR
// if missile < 2 then
2604: LD_VAR 0 14
2608: PUSH
2609: LD_INT 2
2611: LESS
2612: IFFALSE 2616
// exit ;
2614: GO 2838
// x := GetX ( enemy ) ;
2616: LD_ADDR_VAR 0 4
2620: PUSH
2621: LD_VAR 0 10
2625: PPUSH
2626: CALL_OW 250
2630: ST_TO_ADDR
// y := GetY ( enemy ) ;
2631: LD_ADDR_VAR 0 5
2635: PUSH
2636: LD_VAR 0 10
2640: PPUSH
2641: CALL_OW 251
2645: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2646: LD_ADDR_VAR 0 6
2650: PUSH
2651: LD_VAR 0 4
2655: PUSH
2656: LD_INT 1
2658: NEG
2659: PPUSH
2660: LD_INT 1
2662: PPUSH
2663: CALL_OW 12
2667: PLUS
2668: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2669: LD_ADDR_VAR 0 7
2673: PUSH
2674: LD_VAR 0 5
2678: PUSH
2679: LD_INT 1
2681: NEG
2682: PPUSH
2683: LD_INT 1
2685: PPUSH
2686: CALL_OW 12
2690: PLUS
2691: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2692: LD_VAR 0 6
2696: PPUSH
2697: LD_VAR 0 7
2701: PPUSH
2702: CALL_OW 488
2706: NOT
2707: IFFALSE 2729
// begin _x := x ;
2709: LD_ADDR_VAR 0 6
2713: PUSH
2714: LD_VAR 0 4
2718: ST_TO_ADDR
// _y := y ;
2719: LD_ADDR_VAR 0 7
2723: PUSH
2724: LD_VAR 0 5
2728: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2729: LD_ADDR_VAR 0 3
2733: PUSH
2734: LD_INT 1
2736: PPUSH
2737: LD_VAR 0 14
2741: PPUSH
2742: CALL_OW 12
2746: ST_TO_ADDR
// case i of 1 :
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 1
2754: DOUBLE
2755: EQUAL
2756: IFTRUE 2760
2758: GO 2777
2760: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2761: LD_VAR 0 1
2765: PPUSH
2766: LD_VAR 0 10
2770: PPUSH
2771: CALL_OW 115
2775: GO 2838
2777: LD_INT 2
2779: DOUBLE
2780: EQUAL
2781: IFTRUE 2785
2783: GO 2807
2785: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2786: LD_VAR 0 1
2790: PPUSH
2791: LD_VAR 0 6
2795: PPUSH
2796: LD_VAR 0 7
2800: PPUSH
2801: CALL_OW 153
2805: GO 2838
2807: LD_INT 3
2809: DOUBLE
2810: EQUAL
2811: IFTRUE 2815
2813: GO 2837
2815: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2816: LD_VAR 0 1
2820: PPUSH
2821: LD_VAR 0 6
2825: PPUSH
2826: LD_VAR 0 7
2830: PPUSH
2831: CALL_OW 154
2835: GO 2838
2837: POP
// end ;
2838: LD_VAR 0 2
2842: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2843: LD_INT 0
2845: PPUSH
2846: PPUSH
2847: PPUSH
2848: PPUSH
2849: PPUSH
2850: PPUSH
// if not unit or not building then
2851: LD_VAR 0 1
2855: NOT
2856: PUSH
2857: LD_VAR 0 2
2861: NOT
2862: OR
2863: IFFALSE 2867
// exit ;
2865: GO 3025
// x := GetX ( building ) ;
2867: LD_ADDR_VAR 0 5
2871: PUSH
2872: LD_VAR 0 2
2876: PPUSH
2877: CALL_OW 250
2881: ST_TO_ADDR
// y := GetY ( building ) ;
2882: LD_ADDR_VAR 0 6
2886: PUSH
2887: LD_VAR 0 2
2891: PPUSH
2892: CALL_OW 251
2896: ST_TO_ADDR
// for i = 0 to 5 do
2897: LD_ADDR_VAR 0 4
2901: PUSH
2902: DOUBLE
2903: LD_INT 0
2905: DEC
2906: ST_TO_ADDR
2907: LD_INT 5
2909: PUSH
2910: FOR_TO
2911: IFFALSE 3023
// begin _x := ShiftX ( x , i , 3 ) ;
2913: LD_ADDR_VAR 0 7
2917: PUSH
2918: LD_VAR 0 5
2922: PPUSH
2923: LD_VAR 0 4
2927: PPUSH
2928: LD_INT 3
2930: PPUSH
2931: CALL_OW 272
2935: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2936: LD_ADDR_VAR 0 8
2940: PUSH
2941: LD_VAR 0 6
2945: PPUSH
2946: LD_VAR 0 4
2950: PPUSH
2951: LD_INT 3
2953: PPUSH
2954: CALL_OW 273
2958: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2959: LD_VAR 0 7
2963: PPUSH
2964: LD_VAR 0 8
2968: PPUSH
2969: CALL_OW 488
2973: NOT
2974: IFFALSE 2978
// continue ;
2976: GO 2910
// if HexInfo ( _x , _y ) = 0 then
2978: LD_VAR 0 7
2982: PPUSH
2983: LD_VAR 0 8
2987: PPUSH
2988: CALL_OW 428
2992: PUSH
2993: LD_INT 0
2995: EQUAL
2996: IFFALSE 3021
// begin ComMoveXY ( unit , _x , _y ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_VAR 0 7
3007: PPUSH
3008: LD_VAR 0 8
3012: PPUSH
3013: CALL_OW 111
// exit ;
3017: POP
3018: POP
3019: GO 3025
// end ; end ;
3021: GO 2910
3023: POP
3024: POP
// end ;
3025: LD_VAR 0 3
3029: RET
// export function ScanBase ( side , base_area ) ; begin
3030: LD_INT 0
3032: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3033: LD_ADDR_VAR 0 3
3037: PUSH
3038: LD_VAR 0 2
3042: PPUSH
3043: LD_INT 81
3045: PUSH
3046: LD_VAR 0 1
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PPUSH
3055: CALL_OW 70
3059: ST_TO_ADDR
// end ;
3060: LD_VAR 0 3
3064: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3065: LD_INT 0
3067: PPUSH
3068: PPUSH
3069: PPUSH
3070: PPUSH
// result := false ;
3071: LD_ADDR_VAR 0 2
3075: PUSH
3076: LD_INT 0
3078: ST_TO_ADDR
// side := GetSide ( unit ) ;
3079: LD_ADDR_VAR 0 3
3083: PUSH
3084: LD_VAR 0 1
3088: PPUSH
3089: CALL_OW 255
3093: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3094: LD_ADDR_VAR 0 4
3098: PUSH
3099: LD_VAR 0 1
3103: PPUSH
3104: CALL_OW 248
3108: ST_TO_ADDR
// case nat of 1 :
3109: LD_VAR 0 4
3113: PUSH
3114: LD_INT 1
3116: DOUBLE
3117: EQUAL
3118: IFTRUE 3122
3120: GO 3133
3122: POP
// tech := tech_lassight ; 2 :
3123: LD_ADDR_VAR 0 5
3127: PUSH
3128: LD_INT 12
3130: ST_TO_ADDR
3131: GO 3172
3133: LD_INT 2
3135: DOUBLE
3136: EQUAL
3137: IFTRUE 3141
3139: GO 3152
3141: POP
// tech := tech_mortar ; 3 :
3142: LD_ADDR_VAR 0 5
3146: PUSH
3147: LD_INT 41
3149: ST_TO_ADDR
3150: GO 3172
3152: LD_INT 3
3154: DOUBLE
3155: EQUAL
3156: IFTRUE 3160
3158: GO 3171
3160: POP
// tech := tech_bazooka ; end ;
3161: LD_ADDR_VAR 0 5
3165: PUSH
3166: LD_INT 44
3168: ST_TO_ADDR
3169: GO 3172
3171: POP
// if Researched ( side , tech ) then
3172: LD_VAR 0 3
3176: PPUSH
3177: LD_VAR 0 5
3181: PPUSH
3182: CALL_OW 325
3186: IFFALSE 3213
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3188: LD_ADDR_VAR 0 2
3192: PUSH
3193: LD_INT 5
3195: PUSH
3196: LD_INT 8
3198: PUSH
3199: LD_INT 9
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: LIST
3206: PUSH
3207: LD_VAR 0 4
3211: ARRAY
3212: ST_TO_ADDR
// end ;
3213: LD_VAR 0 2
3217: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3218: LD_INT 0
3220: PPUSH
3221: PPUSH
3222: PPUSH
// if not mines then
3223: LD_VAR 0 2
3227: NOT
3228: IFFALSE 3232
// exit ;
3230: GO 3376
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3232: LD_ADDR_VAR 0 5
3236: PUSH
3237: LD_INT 81
3239: PUSH
3240: LD_VAR 0 1
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PUSH
3249: LD_INT 3
3251: PUSH
3252: LD_INT 21
3254: PUSH
3255: LD_INT 3
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PPUSH
3270: CALL_OW 69
3274: ST_TO_ADDR
// for i in mines do
3275: LD_ADDR_VAR 0 4
3279: PUSH
3280: LD_VAR 0 2
3284: PUSH
3285: FOR_IN
3286: IFFALSE 3374
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3288: LD_VAR 0 4
3292: PUSH
3293: LD_INT 1
3295: ARRAY
3296: PPUSH
3297: LD_VAR 0 4
3301: PUSH
3302: LD_INT 2
3304: ARRAY
3305: PPUSH
3306: CALL_OW 458
3310: NOT
3311: IFFALSE 3315
// continue ;
3313: GO 3285
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3315: LD_VAR 0 4
3319: PUSH
3320: LD_INT 1
3322: ARRAY
3323: PPUSH
3324: LD_VAR 0 4
3328: PUSH
3329: LD_INT 2
3331: ARRAY
3332: PPUSH
3333: CALL_OW 428
3337: PUSH
3338: LD_VAR 0 5
3342: IN
3343: IFFALSE 3372
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3345: LD_VAR 0 4
3349: PUSH
3350: LD_INT 1
3352: ARRAY
3353: PPUSH
3354: LD_VAR 0 4
3358: PUSH
3359: LD_INT 2
3361: ARRAY
3362: PPUSH
3363: LD_VAR 0 1
3367: PPUSH
3368: CALL_OW 456
// end ;
3372: GO 3285
3374: POP
3375: POP
// end ;
3376: LD_VAR 0 3
3380: RET
// export function Count ( array ) ; var i ; begin
3381: LD_INT 0
3383: PPUSH
3384: PPUSH
// result := 0 ;
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: LD_INT 0
3392: ST_TO_ADDR
// for i in array do
3393: LD_ADDR_VAR 0 3
3397: PUSH
3398: LD_VAR 0 1
3402: PUSH
3403: FOR_IN
3404: IFFALSE 3428
// if i then
3406: LD_VAR 0 3
3410: IFFALSE 3426
// result := result + 1 ;
3412: LD_ADDR_VAR 0 2
3416: PUSH
3417: LD_VAR 0 2
3421: PUSH
3422: LD_INT 1
3424: PLUS
3425: ST_TO_ADDR
3426: GO 3403
3428: POP
3429: POP
// end ;
3430: LD_VAR 0 2
3434: RET
// export function IsEmpty ( building ) ; begin
3435: LD_INT 0
3437: PPUSH
// if not building then
3438: LD_VAR 0 1
3442: NOT
3443: IFFALSE 3447
// exit ;
3445: GO 3490
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3447: LD_ADDR_VAR 0 2
3451: PUSH
3452: LD_VAR 0 1
3456: PUSH
3457: LD_INT 22
3459: PUSH
3460: LD_VAR 0 1
3464: PPUSH
3465: CALL_OW 255
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: PUSH
3474: LD_INT 58
3476: PUSH
3477: EMPTY
3478: LIST
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PPUSH
3484: CALL_OW 69
3488: IN
3489: ST_TO_ADDR
// end ;
3490: LD_VAR 0 2
3494: RET
// export function IsNotFull ( building ) ; begin
3495: LD_INT 0
3497: PPUSH
// if not building then
3498: LD_VAR 0 1
3502: NOT
3503: IFFALSE 3507
// exit ;
3505: GO 3526
// result := UnitsInside ( building ) < 6 ;
3507: LD_ADDR_VAR 0 2
3511: PUSH
3512: LD_VAR 0 1
3516: PPUSH
3517: CALL_OW 313
3521: PUSH
3522: LD_INT 6
3524: LESS
3525: ST_TO_ADDR
// end ;
3526: LD_VAR 0 2
3530: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
3535: PPUSH
3536: PPUSH
// tmp := [ ] ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: EMPTY
3543: ST_TO_ADDR
// list := [ ] ;
3544: LD_ADDR_VAR 0 5
3548: PUSH
3549: EMPTY
3550: ST_TO_ADDR
// for i = 16 to 25 do
3551: LD_ADDR_VAR 0 4
3555: PUSH
3556: DOUBLE
3557: LD_INT 16
3559: DEC
3560: ST_TO_ADDR
3561: LD_INT 25
3563: PUSH
3564: FOR_TO
3565: IFFALSE 3638
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: LD_VAR 0 3
3576: PUSH
3577: LD_INT 22
3579: PUSH
3580: LD_VAR 0 1
3584: PPUSH
3585: CALL_OW 255
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 91
3596: PUSH
3597: LD_VAR 0 1
3601: PUSH
3602: LD_INT 6
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: PUSH
3610: LD_INT 30
3612: PUSH
3613: LD_VAR 0 4
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: LIST
3626: PUSH
3627: EMPTY
3628: LIST
3629: PPUSH
3630: CALL_OW 69
3634: ADD
3635: ST_TO_ADDR
3636: GO 3564
3638: POP
3639: POP
// for i = 1 to tmp do
3640: LD_ADDR_VAR 0 4
3644: PUSH
3645: DOUBLE
3646: LD_INT 1
3648: DEC
3649: ST_TO_ADDR
3650: LD_VAR 0 3
3654: PUSH
3655: FOR_TO
3656: IFFALSE 3744
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3658: LD_ADDR_VAR 0 5
3662: PUSH
3663: LD_VAR 0 5
3667: PUSH
3668: LD_VAR 0 3
3672: PUSH
3673: LD_VAR 0 4
3677: ARRAY
3678: PPUSH
3679: CALL_OW 266
3683: PUSH
3684: LD_VAR 0 3
3688: PUSH
3689: LD_VAR 0 4
3693: ARRAY
3694: PPUSH
3695: CALL_OW 250
3699: PUSH
3700: LD_VAR 0 3
3704: PUSH
3705: LD_VAR 0 4
3709: ARRAY
3710: PPUSH
3711: CALL_OW 251
3715: PUSH
3716: LD_VAR 0 3
3720: PUSH
3721: LD_VAR 0 4
3725: ARRAY
3726: PPUSH
3727: CALL_OW 254
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: PUSH
3738: EMPTY
3739: LIST
3740: ADD
3741: ST_TO_ADDR
3742: GO 3655
3744: POP
3745: POP
// result := list ;
3746: LD_ADDR_VAR 0 2
3750: PUSH
3751: LD_VAR 0 5
3755: ST_TO_ADDR
// end ;
3756: LD_VAR 0 2
3760: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3761: LD_INT 0
3763: PPUSH
3764: PPUSH
3765: PPUSH
3766: PPUSH
3767: PPUSH
3768: PPUSH
3769: PPUSH
// if not factory then
3770: LD_VAR 0 1
3774: NOT
3775: IFFALSE 3779
// exit ;
3777: GO 4372
// if control = control_apeman then
3779: LD_VAR 0 4
3783: PUSH
3784: LD_INT 5
3786: EQUAL
3787: IFFALSE 3896
// begin tmp := UnitsInside ( factory ) ;
3789: LD_ADDR_VAR 0 8
3793: PUSH
3794: LD_VAR 0 1
3798: PPUSH
3799: CALL_OW 313
3803: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3804: LD_VAR 0 8
3808: PPUSH
3809: LD_INT 25
3811: PUSH
3812: LD_INT 12
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: PPUSH
3819: CALL_OW 72
3823: NOT
3824: IFFALSE 3834
// control := control_manual ;
3826: LD_ADDR_VAR 0 4
3830: PUSH
3831: LD_INT 1
3833: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3834: LD_ADDR_VAR 0 8
3838: PUSH
3839: LD_VAR 0 1
3843: PPUSH
3844: CALL 3531 0 1
3848: ST_TO_ADDR
// if tmp then
3849: LD_VAR 0 8
3853: IFFALSE 3896
// begin for i in tmp do
3855: LD_ADDR_VAR 0 7
3859: PUSH
3860: LD_VAR 0 8
3864: PUSH
3865: FOR_IN
3866: IFFALSE 3894
// if i [ 1 ] = b_ext_radio then
3868: LD_VAR 0 7
3872: PUSH
3873: LD_INT 1
3875: ARRAY
3876: PUSH
3877: LD_INT 22
3879: EQUAL
3880: IFFALSE 3892
// begin control := control_remote ;
3882: LD_ADDR_VAR 0 4
3886: PUSH
3887: LD_INT 2
3889: ST_TO_ADDR
// break ;
3890: GO 3894
// end ;
3892: GO 3865
3894: POP
3895: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3896: LD_VAR 0 1
3900: PPUSH
3901: LD_VAR 0 2
3905: PPUSH
3906: LD_VAR 0 3
3910: PPUSH
3911: LD_VAR 0 4
3915: PPUSH
3916: LD_VAR 0 5
3920: PPUSH
3921: CALL_OW 448
3925: IFFALSE 3960
// begin result := [ chassis , engine , control , weapon ] ;
3927: LD_ADDR_VAR 0 6
3931: PUSH
3932: LD_VAR 0 2
3936: PUSH
3937: LD_VAR 0 3
3941: PUSH
3942: LD_VAR 0 4
3946: PUSH
3947: LD_VAR 0 5
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: ST_TO_ADDR
// exit ;
3958: GO 4372
// end ; _chassis := AvailableChassisList ( factory ) ;
3960: LD_ADDR_VAR 0 9
3964: PUSH
3965: LD_VAR 0 1
3969: PPUSH
3970: CALL_OW 475
3974: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3975: LD_ADDR_VAR 0 11
3979: PUSH
3980: LD_VAR 0 1
3984: PPUSH
3985: CALL_OW 476
3989: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3990: LD_ADDR_VAR 0 12
3994: PUSH
3995: LD_VAR 0 1
3999: PPUSH
4000: CALL_OW 477
4004: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4005: LD_ADDR_VAR 0 10
4009: PUSH
4010: LD_VAR 0 1
4014: PPUSH
4015: CALL_OW 478
4019: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4020: LD_VAR 0 9
4024: NOT
4025: PUSH
4026: LD_VAR 0 11
4030: NOT
4031: OR
4032: PUSH
4033: LD_VAR 0 12
4037: NOT
4038: OR
4039: PUSH
4040: LD_VAR 0 10
4044: NOT
4045: OR
4046: IFFALSE 4081
// begin result := [ chassis , engine , control , weapon ] ;
4048: LD_ADDR_VAR 0 6
4052: PUSH
4053: LD_VAR 0 2
4057: PUSH
4058: LD_VAR 0 3
4062: PUSH
4063: LD_VAR 0 4
4067: PUSH
4068: LD_VAR 0 5
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: ST_TO_ADDR
// exit ;
4079: GO 4372
// end ; if not chassis in _chassis then
4081: LD_VAR 0 2
4085: PUSH
4086: LD_VAR 0 9
4090: IN
4091: NOT
4092: IFFALSE 4118
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4094: LD_ADDR_VAR 0 2
4098: PUSH
4099: LD_VAR 0 9
4103: PUSH
4104: LD_INT 1
4106: PPUSH
4107: LD_VAR 0 9
4111: PPUSH
4112: CALL_OW 12
4116: ARRAY
4117: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4118: LD_VAR 0 2
4122: PPUSH
4123: LD_VAR 0 3
4127: PPUSH
4128: CALL 4377 0 2
4132: NOT
4133: IFFALSE 4192
// repeat engine := _engine [ 1 ] ;
4135: LD_ADDR_VAR 0 3
4139: PUSH
4140: LD_VAR 0 11
4144: PUSH
4145: LD_INT 1
4147: ARRAY
4148: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4149: LD_ADDR_VAR 0 11
4153: PUSH
4154: LD_VAR 0 11
4158: PPUSH
4159: LD_INT 1
4161: PPUSH
4162: CALL_OW 3
4166: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4167: LD_VAR 0 2
4171: PPUSH
4172: LD_VAR 0 3
4176: PPUSH
4177: CALL 4377 0 2
4181: PUSH
4182: LD_VAR 0 11
4186: PUSH
4187: EMPTY
4188: EQUAL
4189: OR
4190: IFFALSE 4135
// if not control in _control then
4192: LD_VAR 0 4
4196: PUSH
4197: LD_VAR 0 12
4201: IN
4202: NOT
4203: IFFALSE 4229
// control := _control [ rand ( 1 , _control ) ] ;
4205: LD_ADDR_VAR 0 4
4209: PUSH
4210: LD_VAR 0 12
4214: PUSH
4215: LD_INT 1
4217: PPUSH
4218: LD_VAR 0 12
4222: PPUSH
4223: CALL_OW 12
4227: ARRAY
4228: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4229: LD_VAR 0 2
4233: PPUSH
4234: LD_VAR 0 5
4238: PPUSH
4239: CALL 4597 0 2
4243: NOT
4244: IFFALSE 4303
// repeat weapon := _weapon [ 1 ] ;
4246: LD_ADDR_VAR 0 5
4250: PUSH
4251: LD_VAR 0 10
4255: PUSH
4256: LD_INT 1
4258: ARRAY
4259: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4260: LD_ADDR_VAR 0 10
4264: PUSH
4265: LD_VAR 0 10
4269: PPUSH
4270: LD_INT 1
4272: PPUSH
4273: CALL_OW 3
4277: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4278: LD_VAR 0 2
4282: PPUSH
4283: LD_VAR 0 5
4287: PPUSH
4288: CALL 4597 0 2
4292: PUSH
4293: LD_VAR 0 10
4297: PUSH
4298: EMPTY
4299: EQUAL
4300: OR
4301: IFFALSE 4246
// result := [ ] ;
4303: LD_ADDR_VAR 0 6
4307: PUSH
4308: EMPTY
4309: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4310: LD_VAR 0 1
4314: PPUSH
4315: LD_VAR 0 2
4319: PPUSH
4320: LD_VAR 0 3
4324: PPUSH
4325: LD_VAR 0 4
4329: PPUSH
4330: LD_VAR 0 5
4334: PPUSH
4335: CALL_OW 448
4339: IFFALSE 4372
// result := [ chassis , engine , control , weapon ] ;
4341: LD_ADDR_VAR 0 6
4345: PUSH
4346: LD_VAR 0 2
4350: PUSH
4351: LD_VAR 0 3
4355: PUSH
4356: LD_VAR 0 4
4360: PUSH
4361: LD_VAR 0 5
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: ST_TO_ADDR
// end ;
4372: LD_VAR 0 6
4376: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4377: LD_INT 0
4379: PPUSH
// if not chassis or not engine then
4380: LD_VAR 0 1
4384: NOT
4385: PUSH
4386: LD_VAR 0 2
4390: NOT
4391: OR
4392: IFFALSE 4396
// exit ;
4394: GO 4592
// case engine of engine_solar :
4396: LD_VAR 0 2
4400: PUSH
4401: LD_INT 2
4403: DOUBLE
4404: EQUAL
4405: IFTRUE 4409
4407: GO 4447
4409: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4410: LD_ADDR_VAR 0 3
4414: PUSH
4415: LD_INT 11
4417: PUSH
4418: LD_INT 12
4420: PUSH
4421: LD_INT 13
4423: PUSH
4424: LD_INT 14
4426: PUSH
4427: LD_INT 1
4429: PUSH
4430: LD_INT 2
4432: PUSH
4433: LD_INT 3
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: ST_TO_ADDR
4445: GO 4576
4447: LD_INT 1
4449: DOUBLE
4450: EQUAL
4451: IFTRUE 4455
4453: GO 4517
4455: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4456: LD_ADDR_VAR 0 3
4460: PUSH
4461: LD_INT 11
4463: PUSH
4464: LD_INT 12
4466: PUSH
4467: LD_INT 13
4469: PUSH
4470: LD_INT 14
4472: PUSH
4473: LD_INT 1
4475: PUSH
4476: LD_INT 2
4478: PUSH
4479: LD_INT 3
4481: PUSH
4482: LD_INT 4
4484: PUSH
4485: LD_INT 5
4487: PUSH
4488: LD_INT 21
4490: PUSH
4491: LD_INT 23
4493: PUSH
4494: LD_INT 22
4496: PUSH
4497: LD_INT 24
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: ST_TO_ADDR
4515: GO 4576
4517: LD_INT 3
4519: DOUBLE
4520: EQUAL
4521: IFTRUE 4525
4523: GO 4575
4525: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4526: LD_ADDR_VAR 0 3
4530: PUSH
4531: LD_INT 13
4533: PUSH
4534: LD_INT 14
4536: PUSH
4537: LD_INT 2
4539: PUSH
4540: LD_INT 3
4542: PUSH
4543: LD_INT 4
4545: PUSH
4546: LD_INT 5
4548: PUSH
4549: LD_INT 21
4551: PUSH
4552: LD_INT 22
4554: PUSH
4555: LD_INT 23
4557: PUSH
4558: LD_INT 24
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: ST_TO_ADDR
4573: GO 4576
4575: POP
// result := ( chassis in result ) ;
4576: LD_ADDR_VAR 0 3
4580: PUSH
4581: LD_VAR 0 1
4585: PUSH
4586: LD_VAR 0 3
4590: IN
4591: ST_TO_ADDR
// end ;
4592: LD_VAR 0 3
4596: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4597: LD_INT 0
4599: PPUSH
// if not chassis or not weapon then
4600: LD_VAR 0 1
4604: NOT
4605: PUSH
4606: LD_VAR 0 2
4610: NOT
4611: OR
4612: IFFALSE 4616
// exit ;
4614: GO 5678
// case weapon of us_machine_gun :
4616: LD_VAR 0 2
4620: PUSH
4621: LD_INT 2
4623: DOUBLE
4624: EQUAL
4625: IFTRUE 4629
4627: GO 4659
4629: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4630: LD_ADDR_VAR 0 3
4634: PUSH
4635: LD_INT 1
4637: PUSH
4638: LD_INT 2
4640: PUSH
4641: LD_INT 3
4643: PUSH
4644: LD_INT 4
4646: PUSH
4647: LD_INT 5
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: ST_TO_ADDR
4657: GO 5662
4659: LD_INT 3
4661: DOUBLE
4662: EQUAL
4663: IFTRUE 4667
4665: GO 4697
4667: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: LD_INT 1
4675: PUSH
4676: LD_INT 2
4678: PUSH
4679: LD_INT 3
4681: PUSH
4682: LD_INT 4
4684: PUSH
4685: LD_INT 5
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: ST_TO_ADDR
4695: GO 5662
4697: LD_INT 11
4699: DOUBLE
4700: EQUAL
4701: IFTRUE 4705
4703: GO 4735
4705: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4706: LD_ADDR_VAR 0 3
4710: PUSH
4711: LD_INT 1
4713: PUSH
4714: LD_INT 2
4716: PUSH
4717: LD_INT 3
4719: PUSH
4720: LD_INT 4
4722: PUSH
4723: LD_INT 5
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: ST_TO_ADDR
4733: GO 5662
4735: LD_INT 4
4737: DOUBLE
4738: EQUAL
4739: IFTRUE 4743
4741: GO 4769
4743: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4744: LD_ADDR_VAR 0 3
4748: PUSH
4749: LD_INT 2
4751: PUSH
4752: LD_INT 3
4754: PUSH
4755: LD_INT 4
4757: PUSH
4758: LD_INT 5
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: ST_TO_ADDR
4767: GO 5662
4769: LD_INT 5
4771: DOUBLE
4772: EQUAL
4773: IFTRUE 4777
4775: GO 4803
4777: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4778: LD_ADDR_VAR 0 3
4782: PUSH
4783: LD_INT 2
4785: PUSH
4786: LD_INT 3
4788: PUSH
4789: LD_INT 4
4791: PUSH
4792: LD_INT 5
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: ST_TO_ADDR
4801: GO 5662
4803: LD_INT 9
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4811
4809: GO 4837
4811: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4812: LD_ADDR_VAR 0 3
4816: PUSH
4817: LD_INT 2
4819: PUSH
4820: LD_INT 3
4822: PUSH
4823: LD_INT 4
4825: PUSH
4826: LD_INT 5
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: ST_TO_ADDR
4835: GO 5662
4837: LD_INT 7
4839: DOUBLE
4840: EQUAL
4841: IFTRUE 4845
4843: GO 4871
4845: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4846: LD_ADDR_VAR 0 3
4850: PUSH
4851: LD_INT 2
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: LD_INT 4
4859: PUSH
4860: LD_INT 5
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: ST_TO_ADDR
4869: GO 5662
4871: LD_INT 12
4873: DOUBLE
4874: EQUAL
4875: IFTRUE 4879
4877: GO 4905
4879: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4880: LD_ADDR_VAR 0 3
4884: PUSH
4885: LD_INT 2
4887: PUSH
4888: LD_INT 3
4890: PUSH
4891: LD_INT 4
4893: PUSH
4894: LD_INT 5
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: ST_TO_ADDR
4903: GO 5662
4905: LD_INT 13
4907: DOUBLE
4908: EQUAL
4909: IFTRUE 4913
4911: GO 4939
4913: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4914: LD_ADDR_VAR 0 3
4918: PUSH
4919: LD_INT 2
4921: PUSH
4922: LD_INT 3
4924: PUSH
4925: LD_INT 4
4927: PUSH
4928: LD_INT 5
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: ST_TO_ADDR
4937: GO 5662
4939: LD_INT 14
4941: DOUBLE
4942: EQUAL
4943: IFTRUE 4947
4945: GO 4965
4947: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4948: LD_ADDR_VAR 0 3
4952: PUSH
4953: LD_INT 4
4955: PUSH
4956: LD_INT 5
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: ST_TO_ADDR
4963: GO 5662
4965: LD_INT 6
4967: DOUBLE
4968: EQUAL
4969: IFTRUE 4973
4971: GO 4991
4973: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4974: LD_ADDR_VAR 0 3
4978: PUSH
4979: LD_INT 4
4981: PUSH
4982: LD_INT 5
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: ST_TO_ADDR
4989: GO 5662
4991: LD_INT 10
4993: DOUBLE
4994: EQUAL
4995: IFTRUE 4999
4997: GO 5017
4999: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5000: LD_ADDR_VAR 0 3
5004: PUSH
5005: LD_INT 4
5007: PUSH
5008: LD_INT 5
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: ST_TO_ADDR
5015: GO 5662
5017: LD_INT 22
5019: DOUBLE
5020: EQUAL
5021: IFTRUE 5025
5023: GO 5051
5025: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5026: LD_ADDR_VAR 0 3
5030: PUSH
5031: LD_INT 11
5033: PUSH
5034: LD_INT 12
5036: PUSH
5037: LD_INT 13
5039: PUSH
5040: LD_INT 14
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: ST_TO_ADDR
5049: GO 5662
5051: LD_INT 23
5053: DOUBLE
5054: EQUAL
5055: IFTRUE 5059
5057: GO 5085
5059: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5060: LD_ADDR_VAR 0 3
5064: PUSH
5065: LD_INT 11
5067: PUSH
5068: LD_INT 12
5070: PUSH
5071: LD_INT 13
5073: PUSH
5074: LD_INT 14
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: ST_TO_ADDR
5083: GO 5662
5085: LD_INT 24
5087: DOUBLE
5088: EQUAL
5089: IFTRUE 5093
5091: GO 5119
5093: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5094: LD_ADDR_VAR 0 3
5098: PUSH
5099: LD_INT 11
5101: PUSH
5102: LD_INT 12
5104: PUSH
5105: LD_INT 13
5107: PUSH
5108: LD_INT 14
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: ST_TO_ADDR
5117: GO 5662
5119: LD_INT 30
5121: DOUBLE
5122: EQUAL
5123: IFTRUE 5127
5125: GO 5153
5127: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5128: LD_ADDR_VAR 0 3
5132: PUSH
5133: LD_INT 11
5135: PUSH
5136: LD_INT 12
5138: PUSH
5139: LD_INT 13
5141: PUSH
5142: LD_INT 14
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: ST_TO_ADDR
5151: GO 5662
5153: LD_INT 25
5155: DOUBLE
5156: EQUAL
5157: IFTRUE 5161
5159: GO 5179
5161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5162: LD_ADDR_VAR 0 3
5166: PUSH
5167: LD_INT 13
5169: PUSH
5170: LD_INT 14
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: ST_TO_ADDR
5177: GO 5662
5179: LD_INT 27
5181: DOUBLE
5182: EQUAL
5183: IFTRUE 5187
5185: GO 5205
5187: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5188: LD_ADDR_VAR 0 3
5192: PUSH
5193: LD_INT 13
5195: PUSH
5196: LD_INT 14
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: ST_TO_ADDR
5203: GO 5662
5205: LD_EXP 8
5209: DOUBLE
5210: EQUAL
5211: IFTRUE 5215
5213: GO 5241
5215: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5216: LD_ADDR_VAR 0 3
5220: PUSH
5221: LD_INT 11
5223: PUSH
5224: LD_INT 12
5226: PUSH
5227: LD_INT 13
5229: PUSH
5230: LD_INT 14
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: ST_TO_ADDR
5239: GO 5662
5241: LD_INT 28
5243: DOUBLE
5244: EQUAL
5245: IFTRUE 5249
5247: GO 5267
5249: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5250: LD_ADDR_VAR 0 3
5254: PUSH
5255: LD_INT 13
5257: PUSH
5258: LD_INT 14
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: ST_TO_ADDR
5265: GO 5662
5267: LD_INT 29
5269: DOUBLE
5270: EQUAL
5271: IFTRUE 5275
5273: GO 5293
5275: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5276: LD_ADDR_VAR 0 3
5280: PUSH
5281: LD_INT 13
5283: PUSH
5284: LD_INT 14
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: ST_TO_ADDR
5291: GO 5662
5293: LD_INT 31
5295: DOUBLE
5296: EQUAL
5297: IFTRUE 5301
5299: GO 5319
5301: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5302: LD_ADDR_VAR 0 3
5306: PUSH
5307: LD_INT 13
5309: PUSH
5310: LD_INT 14
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: ST_TO_ADDR
5317: GO 5662
5319: LD_INT 26
5321: DOUBLE
5322: EQUAL
5323: IFTRUE 5327
5325: GO 5345
5327: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5328: LD_ADDR_VAR 0 3
5332: PUSH
5333: LD_INT 13
5335: PUSH
5336: LD_INT 14
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: ST_TO_ADDR
5343: GO 5662
5345: LD_INT 42
5347: DOUBLE
5348: EQUAL
5349: IFTRUE 5353
5351: GO 5379
5353: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5354: LD_ADDR_VAR 0 3
5358: PUSH
5359: LD_INT 21
5361: PUSH
5362: LD_INT 22
5364: PUSH
5365: LD_INT 23
5367: PUSH
5368: LD_INT 24
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: ST_TO_ADDR
5377: GO 5662
5379: LD_INT 43
5381: DOUBLE
5382: EQUAL
5383: IFTRUE 5387
5385: GO 5413
5387: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5388: LD_ADDR_VAR 0 3
5392: PUSH
5393: LD_INT 21
5395: PUSH
5396: LD_INT 22
5398: PUSH
5399: LD_INT 23
5401: PUSH
5402: LD_INT 24
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: ST_TO_ADDR
5411: GO 5662
5413: LD_INT 44
5415: DOUBLE
5416: EQUAL
5417: IFTRUE 5421
5419: GO 5447
5421: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5422: LD_ADDR_VAR 0 3
5426: PUSH
5427: LD_INT 21
5429: PUSH
5430: LD_INT 22
5432: PUSH
5433: LD_INT 23
5435: PUSH
5436: LD_INT 24
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: ST_TO_ADDR
5445: GO 5662
5447: LD_INT 45
5449: DOUBLE
5450: EQUAL
5451: IFTRUE 5455
5453: GO 5481
5455: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5456: LD_ADDR_VAR 0 3
5460: PUSH
5461: LD_INT 21
5463: PUSH
5464: LD_INT 22
5466: PUSH
5467: LD_INT 23
5469: PUSH
5470: LD_INT 24
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: ST_TO_ADDR
5479: GO 5662
5481: LD_INT 49
5483: DOUBLE
5484: EQUAL
5485: IFTRUE 5489
5487: GO 5515
5489: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5490: LD_ADDR_VAR 0 3
5494: PUSH
5495: LD_INT 21
5497: PUSH
5498: LD_INT 22
5500: PUSH
5501: LD_INT 23
5503: PUSH
5504: LD_INT 24
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: ST_TO_ADDR
5513: GO 5662
5515: LD_INT 51
5517: DOUBLE
5518: EQUAL
5519: IFTRUE 5523
5521: GO 5549
5523: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5524: LD_ADDR_VAR 0 3
5528: PUSH
5529: LD_INT 21
5531: PUSH
5532: LD_INT 22
5534: PUSH
5535: LD_INT 23
5537: PUSH
5538: LD_INT 24
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: ST_TO_ADDR
5547: GO 5662
5549: LD_INT 52
5551: DOUBLE
5552: EQUAL
5553: IFTRUE 5557
5555: GO 5583
5557: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5558: LD_ADDR_VAR 0 3
5562: PUSH
5563: LD_INT 21
5565: PUSH
5566: LD_INT 22
5568: PUSH
5569: LD_INT 23
5571: PUSH
5572: LD_INT 24
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: ST_TO_ADDR
5581: GO 5662
5583: LD_INT 53
5585: DOUBLE
5586: EQUAL
5587: IFTRUE 5591
5589: GO 5609
5591: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5592: LD_ADDR_VAR 0 3
5596: PUSH
5597: LD_INT 23
5599: PUSH
5600: LD_INT 24
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: ST_TO_ADDR
5607: GO 5662
5609: LD_INT 46
5611: DOUBLE
5612: EQUAL
5613: IFTRUE 5617
5615: GO 5635
5617: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5618: LD_ADDR_VAR 0 3
5622: PUSH
5623: LD_INT 23
5625: PUSH
5626: LD_INT 24
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: ST_TO_ADDR
5633: GO 5662
5635: LD_INT 47
5637: DOUBLE
5638: EQUAL
5639: IFTRUE 5643
5641: GO 5661
5643: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5644: LD_ADDR_VAR 0 3
5648: PUSH
5649: LD_INT 23
5651: PUSH
5652: LD_INT 24
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: ST_TO_ADDR
5659: GO 5662
5661: POP
// result := ( chassis in result ) ;
5662: LD_ADDR_VAR 0 3
5666: PUSH
5667: LD_VAR 0 1
5671: PUSH
5672: LD_VAR 0 3
5676: IN
5677: ST_TO_ADDR
// end ;
5678: LD_VAR 0 3
5682: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5683: LD_INT 0
5685: PPUSH
5686: PPUSH
5687: PPUSH
5688: PPUSH
5689: PPUSH
5690: PPUSH
5691: PPUSH
// result := array ;
5692: LD_ADDR_VAR 0 5
5696: PUSH
5697: LD_VAR 0 1
5701: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5702: LD_VAR 0 1
5706: NOT
5707: PUSH
5708: LD_VAR 0 2
5712: NOT
5713: OR
5714: PUSH
5715: LD_VAR 0 3
5719: NOT
5720: OR
5721: PUSH
5722: LD_VAR 0 2
5726: PUSH
5727: LD_VAR 0 1
5731: GREATER
5732: OR
5733: PUSH
5734: LD_VAR 0 3
5738: PUSH
5739: LD_VAR 0 1
5743: GREATER
5744: OR
5745: IFFALSE 5749
// exit ;
5747: GO 6045
// if direction then
5749: LD_VAR 0 4
5753: IFFALSE 5817
// begin d := 1 ;
5755: LD_ADDR_VAR 0 9
5759: PUSH
5760: LD_INT 1
5762: ST_TO_ADDR
// if i_from > i_to then
5763: LD_VAR 0 2
5767: PUSH
5768: LD_VAR 0 3
5772: GREATER
5773: IFFALSE 5799
// length := ( array - i_from ) + i_to else
5775: LD_ADDR_VAR 0 11
5779: PUSH
5780: LD_VAR 0 1
5784: PUSH
5785: LD_VAR 0 2
5789: MINUS
5790: PUSH
5791: LD_VAR 0 3
5795: PLUS
5796: ST_TO_ADDR
5797: GO 5815
// length := i_to - i_from ;
5799: LD_ADDR_VAR 0 11
5803: PUSH
5804: LD_VAR 0 3
5808: PUSH
5809: LD_VAR 0 2
5813: MINUS
5814: ST_TO_ADDR
// end else
5815: GO 5878
// begin d := - 1 ;
5817: LD_ADDR_VAR 0 9
5821: PUSH
5822: LD_INT 1
5824: NEG
5825: ST_TO_ADDR
// if i_from > i_to then
5826: LD_VAR 0 2
5830: PUSH
5831: LD_VAR 0 3
5835: GREATER
5836: IFFALSE 5856
// length := i_from - i_to else
5838: LD_ADDR_VAR 0 11
5842: PUSH
5843: LD_VAR 0 2
5847: PUSH
5848: LD_VAR 0 3
5852: MINUS
5853: ST_TO_ADDR
5854: GO 5878
// length := ( array - i_to ) + i_from ;
5856: LD_ADDR_VAR 0 11
5860: PUSH
5861: LD_VAR 0 1
5865: PUSH
5866: LD_VAR 0 3
5870: MINUS
5871: PUSH
5872: LD_VAR 0 2
5876: PLUS
5877: ST_TO_ADDR
// end ; if not length then
5878: LD_VAR 0 11
5882: NOT
5883: IFFALSE 5887
// exit ;
5885: GO 6045
// tmp := array ;
5887: LD_ADDR_VAR 0 10
5891: PUSH
5892: LD_VAR 0 1
5896: ST_TO_ADDR
// for i = 1 to length do
5897: LD_ADDR_VAR 0 6
5901: PUSH
5902: DOUBLE
5903: LD_INT 1
5905: DEC
5906: ST_TO_ADDR
5907: LD_VAR 0 11
5911: PUSH
5912: FOR_TO
5913: IFFALSE 6033
// begin for j = 1 to array do
5915: LD_ADDR_VAR 0 7
5919: PUSH
5920: DOUBLE
5921: LD_INT 1
5923: DEC
5924: ST_TO_ADDR
5925: LD_VAR 0 1
5929: PUSH
5930: FOR_TO
5931: IFFALSE 6019
// begin k := j + d ;
5933: LD_ADDR_VAR 0 8
5937: PUSH
5938: LD_VAR 0 7
5942: PUSH
5943: LD_VAR 0 9
5947: PLUS
5948: ST_TO_ADDR
// if k > array then
5949: LD_VAR 0 8
5953: PUSH
5954: LD_VAR 0 1
5958: GREATER
5959: IFFALSE 5969
// k := 1 ;
5961: LD_ADDR_VAR 0 8
5965: PUSH
5966: LD_INT 1
5968: ST_TO_ADDR
// if not k then
5969: LD_VAR 0 8
5973: NOT
5974: IFFALSE 5986
// k := array ;
5976: LD_ADDR_VAR 0 8
5980: PUSH
5981: LD_VAR 0 1
5985: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5986: LD_ADDR_VAR 0 10
5990: PUSH
5991: LD_VAR 0 10
5995: PPUSH
5996: LD_VAR 0 8
6000: PPUSH
6001: LD_VAR 0 1
6005: PUSH
6006: LD_VAR 0 7
6010: ARRAY
6011: PPUSH
6012: CALL_OW 1
6016: ST_TO_ADDR
// end ;
6017: GO 5930
6019: POP
6020: POP
// array := tmp ;
6021: LD_ADDR_VAR 0 1
6025: PUSH
6026: LD_VAR 0 10
6030: ST_TO_ADDR
// end ;
6031: GO 5912
6033: POP
6034: POP
// result := array ;
6035: LD_ADDR_VAR 0 5
6039: PUSH
6040: LD_VAR 0 1
6044: ST_TO_ADDR
// end ;
6045: LD_VAR 0 5
6049: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6050: LD_INT 0
6052: PPUSH
6053: PPUSH
// result := 0 ;
6054: LD_ADDR_VAR 0 3
6058: PUSH
6059: LD_INT 0
6061: ST_TO_ADDR
// if not array or not value in array then
6062: LD_VAR 0 1
6066: NOT
6067: PUSH
6068: LD_VAR 0 2
6072: PUSH
6073: LD_VAR 0 1
6077: IN
6078: NOT
6079: OR
6080: IFFALSE 6084
// exit ;
6082: GO 6138
// for i = 1 to array do
6084: LD_ADDR_VAR 0 4
6088: PUSH
6089: DOUBLE
6090: LD_INT 1
6092: DEC
6093: ST_TO_ADDR
6094: LD_VAR 0 1
6098: PUSH
6099: FOR_TO
6100: IFFALSE 6136
// if value = array [ i ] then
6102: LD_VAR 0 2
6106: PUSH
6107: LD_VAR 0 1
6111: PUSH
6112: LD_VAR 0 4
6116: ARRAY
6117: EQUAL
6118: IFFALSE 6134
// begin result := i ;
6120: LD_ADDR_VAR 0 3
6124: PUSH
6125: LD_VAR 0 4
6129: ST_TO_ADDR
// exit ;
6130: POP
6131: POP
6132: GO 6138
// end ;
6134: GO 6099
6136: POP
6137: POP
// end ;
6138: LD_VAR 0 3
6142: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6143: LD_INT 0
6145: PPUSH
// vc_chassis := chassis ;
6146: LD_ADDR_OWVAR 37
6150: PUSH
6151: LD_VAR 0 1
6155: ST_TO_ADDR
// vc_engine := engine ;
6156: LD_ADDR_OWVAR 39
6160: PUSH
6161: LD_VAR 0 2
6165: ST_TO_ADDR
// vc_control := control ;
6166: LD_ADDR_OWVAR 38
6170: PUSH
6171: LD_VAR 0 3
6175: ST_TO_ADDR
// vc_weapon := weapon ;
6176: LD_ADDR_OWVAR 40
6180: PUSH
6181: LD_VAR 0 4
6185: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6186: LD_ADDR_OWVAR 41
6190: PUSH
6191: LD_VAR 0 5
6195: ST_TO_ADDR
// end ;
6196: LD_VAR 0 6
6200: RET
// export function WantPlant ( unit ) ; var task ; begin
6201: LD_INT 0
6203: PPUSH
6204: PPUSH
// result := false ;
6205: LD_ADDR_VAR 0 2
6209: PUSH
6210: LD_INT 0
6212: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6213: LD_ADDR_VAR 0 3
6217: PUSH
6218: LD_VAR 0 1
6222: PPUSH
6223: CALL_OW 437
6227: ST_TO_ADDR
// if task then
6228: LD_VAR 0 3
6232: IFFALSE 6260
// if task [ 1 ] [ 1 ] = p then
6234: LD_VAR 0 3
6238: PUSH
6239: LD_INT 1
6241: ARRAY
6242: PUSH
6243: LD_INT 1
6245: ARRAY
6246: PUSH
6247: LD_STRING p
6249: EQUAL
6250: IFFALSE 6260
// result := true ;
6252: LD_ADDR_VAR 0 2
6256: PUSH
6257: LD_INT 1
6259: ST_TO_ADDR
// end ;
6260: LD_VAR 0 2
6264: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6265: LD_INT 0
6267: PPUSH
6268: PPUSH
6269: PPUSH
6270: PPUSH
// if pos < 1 then
6271: LD_VAR 0 2
6275: PUSH
6276: LD_INT 1
6278: LESS
6279: IFFALSE 6283
// exit ;
6281: GO 6586
// if pos = 1 then
6283: LD_VAR 0 2
6287: PUSH
6288: LD_INT 1
6290: EQUAL
6291: IFFALSE 6324
// result := Replace ( arr , pos [ 1 ] , value ) else
6293: LD_ADDR_VAR 0 4
6297: PUSH
6298: LD_VAR 0 1
6302: PPUSH
6303: LD_VAR 0 2
6307: PUSH
6308: LD_INT 1
6310: ARRAY
6311: PPUSH
6312: LD_VAR 0 3
6316: PPUSH
6317: CALL_OW 1
6321: ST_TO_ADDR
6322: GO 6586
// begin tmp := arr ;
6324: LD_ADDR_VAR 0 6
6328: PUSH
6329: LD_VAR 0 1
6333: ST_TO_ADDR
// s_arr := [ tmp ] ;
6334: LD_ADDR_VAR 0 7
6338: PUSH
6339: LD_VAR 0 6
6343: PUSH
6344: EMPTY
6345: LIST
6346: ST_TO_ADDR
// for i = 1 to pos - 1 do
6347: LD_ADDR_VAR 0 5
6351: PUSH
6352: DOUBLE
6353: LD_INT 1
6355: DEC
6356: ST_TO_ADDR
6357: LD_VAR 0 2
6361: PUSH
6362: LD_INT 1
6364: MINUS
6365: PUSH
6366: FOR_TO
6367: IFFALSE 6412
// begin tmp := tmp [ pos [ i ] ] ;
6369: LD_ADDR_VAR 0 6
6373: PUSH
6374: LD_VAR 0 6
6378: PUSH
6379: LD_VAR 0 2
6383: PUSH
6384: LD_VAR 0 5
6388: ARRAY
6389: ARRAY
6390: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6391: LD_ADDR_VAR 0 7
6395: PUSH
6396: LD_VAR 0 7
6400: PUSH
6401: LD_VAR 0 6
6405: PUSH
6406: EMPTY
6407: LIST
6408: ADD
6409: ST_TO_ADDR
// end ;
6410: GO 6366
6412: POP
6413: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6414: LD_ADDR_VAR 0 6
6418: PUSH
6419: LD_VAR 0 6
6423: PPUSH
6424: LD_VAR 0 2
6428: PUSH
6429: LD_VAR 0 2
6433: ARRAY
6434: PPUSH
6435: LD_VAR 0 3
6439: PPUSH
6440: CALL_OW 1
6444: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6445: LD_ADDR_VAR 0 7
6449: PUSH
6450: LD_VAR 0 7
6454: PPUSH
6455: LD_VAR 0 7
6459: PPUSH
6460: LD_VAR 0 6
6464: PPUSH
6465: CALL_OW 1
6469: ST_TO_ADDR
// for i = s_arr downto 2 do
6470: LD_ADDR_VAR 0 5
6474: PUSH
6475: DOUBLE
6476: LD_VAR 0 7
6480: INC
6481: ST_TO_ADDR
6482: LD_INT 2
6484: PUSH
6485: FOR_DOWNTO
6486: IFFALSE 6570
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6488: LD_ADDR_VAR 0 6
6492: PUSH
6493: LD_VAR 0 7
6497: PUSH
6498: LD_VAR 0 5
6502: PUSH
6503: LD_INT 1
6505: MINUS
6506: ARRAY
6507: PPUSH
6508: LD_VAR 0 2
6512: PUSH
6513: LD_VAR 0 5
6517: PUSH
6518: LD_INT 1
6520: MINUS
6521: ARRAY
6522: PPUSH
6523: LD_VAR 0 7
6527: PUSH
6528: LD_VAR 0 5
6532: ARRAY
6533: PPUSH
6534: CALL_OW 1
6538: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6539: LD_ADDR_VAR 0 7
6543: PUSH
6544: LD_VAR 0 7
6548: PPUSH
6549: LD_VAR 0 5
6553: PUSH
6554: LD_INT 1
6556: MINUS
6557: PPUSH
6558: LD_VAR 0 6
6562: PPUSH
6563: CALL_OW 1
6567: ST_TO_ADDR
// end ;
6568: GO 6485
6570: POP
6571: POP
// result := s_arr [ 1 ] ;
6572: LD_ADDR_VAR 0 4
6576: PUSH
6577: LD_VAR 0 7
6581: PUSH
6582: LD_INT 1
6584: ARRAY
6585: ST_TO_ADDR
// end ; end ;
6586: LD_VAR 0 4
6590: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6591: LD_INT 0
6593: PPUSH
6594: PPUSH
// if not list then
6595: LD_VAR 0 1
6599: NOT
6600: IFFALSE 6604
// exit ;
6602: GO 6695
// i := list [ pos1 ] ;
6604: LD_ADDR_VAR 0 5
6608: PUSH
6609: LD_VAR 0 1
6613: PUSH
6614: LD_VAR 0 2
6618: ARRAY
6619: ST_TO_ADDR
// if not i then
6620: LD_VAR 0 5
6624: NOT
6625: IFFALSE 6629
// exit ;
6627: GO 6695
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6629: LD_ADDR_VAR 0 1
6633: PUSH
6634: LD_VAR 0 1
6638: PPUSH
6639: LD_VAR 0 2
6643: PPUSH
6644: LD_VAR 0 1
6648: PUSH
6649: LD_VAR 0 3
6653: ARRAY
6654: PPUSH
6655: CALL_OW 1
6659: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6660: LD_ADDR_VAR 0 1
6664: PUSH
6665: LD_VAR 0 1
6669: PPUSH
6670: LD_VAR 0 3
6674: PPUSH
6675: LD_VAR 0 5
6679: PPUSH
6680: CALL_OW 1
6684: ST_TO_ADDR
// result := list ;
6685: LD_ADDR_VAR 0 4
6689: PUSH
6690: LD_VAR 0 1
6694: ST_TO_ADDR
// end ;
6695: LD_VAR 0 4
6699: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6700: LD_INT 0
6702: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6703: LD_ADDR_VAR 0 5
6707: PUSH
6708: LD_VAR 0 1
6712: PPUSH
6713: CALL_OW 250
6717: PPUSH
6718: LD_VAR 0 1
6722: PPUSH
6723: CALL_OW 251
6727: PPUSH
6728: LD_VAR 0 2
6732: PPUSH
6733: LD_VAR 0 3
6737: PPUSH
6738: LD_VAR 0 4
6742: PPUSH
6743: CALL 6753 0 5
6747: ST_TO_ADDR
// end ;
6748: LD_VAR 0 5
6752: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6753: LD_INT 0
6755: PPUSH
6756: PPUSH
6757: PPUSH
6758: PPUSH
// if not list then
6759: LD_VAR 0 3
6763: NOT
6764: IFFALSE 6768
// exit ;
6766: GO 7156
// result := [ ] ;
6768: LD_ADDR_VAR 0 6
6772: PUSH
6773: EMPTY
6774: ST_TO_ADDR
// for i in list do
6775: LD_ADDR_VAR 0 7
6779: PUSH
6780: LD_VAR 0 3
6784: PUSH
6785: FOR_IN
6786: IFFALSE 6988
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6788: LD_ADDR_VAR 0 9
6792: PUSH
6793: LD_VAR 0 7
6797: PPUSH
6798: LD_VAR 0 1
6802: PPUSH
6803: LD_VAR 0 2
6807: PPUSH
6808: CALL_OW 297
6812: ST_TO_ADDR
// if not result then
6813: LD_VAR 0 6
6817: NOT
6818: IFFALSE 6844
// result := [ [ i , tmp ] ] else
6820: LD_ADDR_VAR 0 6
6824: PUSH
6825: LD_VAR 0 7
6829: PUSH
6830: LD_VAR 0 9
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: ST_TO_ADDR
6842: GO 6986
// begin if result [ result ] [ 2 ] < tmp then
6844: LD_VAR 0 6
6848: PUSH
6849: LD_VAR 0 6
6853: ARRAY
6854: PUSH
6855: LD_INT 2
6857: ARRAY
6858: PUSH
6859: LD_VAR 0 9
6863: LESS
6864: IFFALSE 6906
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6866: LD_ADDR_VAR 0 6
6870: PUSH
6871: LD_VAR 0 6
6875: PPUSH
6876: LD_VAR 0 6
6880: PUSH
6881: LD_INT 1
6883: PLUS
6884: PPUSH
6885: LD_VAR 0 7
6889: PUSH
6890: LD_VAR 0 9
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PPUSH
6899: CALL_OW 2
6903: ST_TO_ADDR
6904: GO 6986
// for j = 1 to result do
6906: LD_ADDR_VAR 0 8
6910: PUSH
6911: DOUBLE
6912: LD_INT 1
6914: DEC
6915: ST_TO_ADDR
6916: LD_VAR 0 6
6920: PUSH
6921: FOR_TO
6922: IFFALSE 6984
// begin if tmp < result [ j ] [ 2 ] then
6924: LD_VAR 0 9
6928: PUSH
6929: LD_VAR 0 6
6933: PUSH
6934: LD_VAR 0 8
6938: ARRAY
6939: PUSH
6940: LD_INT 2
6942: ARRAY
6943: LESS
6944: IFFALSE 6982
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6946: LD_ADDR_VAR 0 6
6950: PUSH
6951: LD_VAR 0 6
6955: PPUSH
6956: LD_VAR 0 8
6960: PPUSH
6961: LD_VAR 0 7
6965: PUSH
6966: LD_VAR 0 9
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PPUSH
6975: CALL_OW 2
6979: ST_TO_ADDR
// break ;
6980: GO 6984
// end ; end ;
6982: GO 6921
6984: POP
6985: POP
// end ; end ;
6986: GO 6785
6988: POP
6989: POP
// if result and not asc then
6990: LD_VAR 0 6
6994: PUSH
6995: LD_VAR 0 4
6999: NOT
7000: AND
7001: IFFALSE 7076
// begin tmp := result ;
7003: LD_ADDR_VAR 0 9
7007: PUSH
7008: LD_VAR 0 6
7012: ST_TO_ADDR
// for i = tmp downto 1 do
7013: LD_ADDR_VAR 0 7
7017: PUSH
7018: DOUBLE
7019: LD_VAR 0 9
7023: INC
7024: ST_TO_ADDR
7025: LD_INT 1
7027: PUSH
7028: FOR_DOWNTO
7029: IFFALSE 7074
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7031: LD_ADDR_VAR 0 6
7035: PUSH
7036: LD_VAR 0 6
7040: PPUSH
7041: LD_VAR 0 9
7045: PUSH
7046: LD_VAR 0 7
7050: MINUS
7051: PUSH
7052: LD_INT 1
7054: PLUS
7055: PPUSH
7056: LD_VAR 0 9
7060: PUSH
7061: LD_VAR 0 7
7065: ARRAY
7066: PPUSH
7067: CALL_OW 1
7071: ST_TO_ADDR
7072: GO 7028
7074: POP
7075: POP
// end ; tmp := [ ] ;
7076: LD_ADDR_VAR 0 9
7080: PUSH
7081: EMPTY
7082: ST_TO_ADDR
// if mode then
7083: LD_VAR 0 5
7087: IFFALSE 7156
// begin for i = 1 to result do
7089: LD_ADDR_VAR 0 7
7093: PUSH
7094: DOUBLE
7095: LD_INT 1
7097: DEC
7098: ST_TO_ADDR
7099: LD_VAR 0 6
7103: PUSH
7104: FOR_TO
7105: IFFALSE 7144
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7107: LD_ADDR_VAR 0 9
7111: PUSH
7112: LD_VAR 0 9
7116: PPUSH
7117: LD_VAR 0 7
7121: PPUSH
7122: LD_VAR 0 6
7126: PUSH
7127: LD_VAR 0 7
7131: ARRAY
7132: PUSH
7133: LD_INT 1
7135: ARRAY
7136: PPUSH
7137: CALL_OW 1
7141: ST_TO_ADDR
7142: GO 7104
7144: POP
7145: POP
// result := tmp ;
7146: LD_ADDR_VAR 0 6
7150: PUSH
7151: LD_VAR 0 9
7155: ST_TO_ADDR
// end ; end ;
7156: LD_VAR 0 6
7160: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7161: LD_INT 0
7163: PPUSH
7164: PPUSH
7165: PPUSH
7166: PPUSH
7167: PPUSH
7168: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7169: LD_ADDR_VAR 0 5
7173: PUSH
7174: LD_INT 0
7176: PUSH
7177: LD_INT 0
7179: PUSH
7180: LD_INT 0
7182: PUSH
7183: EMPTY
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: ST_TO_ADDR
// if not x or not y then
7191: LD_VAR 0 2
7195: NOT
7196: PUSH
7197: LD_VAR 0 3
7201: NOT
7202: OR
7203: IFFALSE 7207
// exit ;
7205: GO 8859
// if not range then
7207: LD_VAR 0 4
7211: NOT
7212: IFFALSE 7222
// range := 10 ;
7214: LD_ADDR_VAR 0 4
7218: PUSH
7219: LD_INT 10
7221: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7222: LD_ADDR_VAR 0 8
7226: PUSH
7227: LD_INT 81
7229: PUSH
7230: LD_VAR 0 1
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: LD_INT 92
7241: PUSH
7242: LD_VAR 0 2
7246: PUSH
7247: LD_VAR 0 3
7251: PUSH
7252: LD_VAR 0 4
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 3
7265: PUSH
7266: LD_INT 21
7268: PUSH
7269: LD_INT 3
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: LIST
7284: PPUSH
7285: CALL_OW 69
7289: ST_TO_ADDR
// if not tmp then
7290: LD_VAR 0 8
7294: NOT
7295: IFFALSE 7299
// exit ;
7297: GO 8859
// for i in tmp do
7299: LD_ADDR_VAR 0 6
7303: PUSH
7304: LD_VAR 0 8
7308: PUSH
7309: FOR_IN
7310: IFFALSE 8834
// begin points := [ 0 , 0 , 0 ] ;
7312: LD_ADDR_VAR 0 9
7316: PUSH
7317: LD_INT 0
7319: PUSH
7320: LD_INT 0
7322: PUSH
7323: LD_INT 0
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: LIST
7330: ST_TO_ADDR
// bpoints := 1 ;
7331: LD_ADDR_VAR 0 10
7335: PUSH
7336: LD_INT 1
7338: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7339: LD_VAR 0 6
7343: PPUSH
7344: CALL_OW 247
7348: PUSH
7349: LD_INT 1
7351: DOUBLE
7352: EQUAL
7353: IFTRUE 7357
7355: GO 7935
7357: POP
// begin if GetClass ( i ) = 1 then
7358: LD_VAR 0 6
7362: PPUSH
7363: CALL_OW 257
7367: PUSH
7368: LD_INT 1
7370: EQUAL
7371: IFFALSE 7392
// points := [ 10 , 5 , 3 ] ;
7373: LD_ADDR_VAR 0 9
7377: PUSH
7378: LD_INT 10
7380: PUSH
7381: LD_INT 5
7383: PUSH
7384: LD_INT 3
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: LIST
7391: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7392: LD_VAR 0 6
7396: PPUSH
7397: CALL_OW 257
7401: PUSH
7402: LD_INT 2
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: LD_INT 4
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: LIST
7415: IN
7416: IFFALSE 7437
// points := [ 3 , 2 , 1 ] ;
7418: LD_ADDR_VAR 0 9
7422: PUSH
7423: LD_INT 3
7425: PUSH
7426: LD_INT 2
7428: PUSH
7429: LD_INT 1
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: LIST
7436: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7437: LD_VAR 0 6
7441: PPUSH
7442: CALL_OW 257
7446: PUSH
7447: LD_INT 5
7449: EQUAL
7450: IFFALSE 7471
// points := [ 130 , 5 , 2 ] ;
7452: LD_ADDR_VAR 0 9
7456: PUSH
7457: LD_INT 130
7459: PUSH
7460: LD_INT 5
7462: PUSH
7463: LD_INT 2
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: LIST
7470: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7471: LD_VAR 0 6
7475: PPUSH
7476: CALL_OW 257
7480: PUSH
7481: LD_INT 8
7483: EQUAL
7484: IFFALSE 7505
// points := [ 35 , 35 , 30 ] ;
7486: LD_ADDR_VAR 0 9
7490: PUSH
7491: LD_INT 35
7493: PUSH
7494: LD_INT 35
7496: PUSH
7497: LD_INT 30
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: LIST
7504: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7505: LD_VAR 0 6
7509: PPUSH
7510: CALL_OW 257
7514: PUSH
7515: LD_INT 9
7517: EQUAL
7518: IFFALSE 7539
// points := [ 20 , 55 , 40 ] ;
7520: LD_ADDR_VAR 0 9
7524: PUSH
7525: LD_INT 20
7527: PUSH
7528: LD_INT 55
7530: PUSH
7531: LD_INT 40
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: LIST
7538: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7539: LD_VAR 0 6
7543: PPUSH
7544: CALL_OW 257
7548: PUSH
7549: LD_INT 12
7551: PUSH
7552: LD_INT 16
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: IN
7559: IFFALSE 7580
// points := [ 5 , 3 , 2 ] ;
7561: LD_ADDR_VAR 0 9
7565: PUSH
7566: LD_INT 5
7568: PUSH
7569: LD_INT 3
7571: PUSH
7572: LD_INT 2
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: LIST
7579: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7580: LD_VAR 0 6
7584: PPUSH
7585: CALL_OW 257
7589: PUSH
7590: LD_INT 17
7592: EQUAL
7593: IFFALSE 7614
// points := [ 100 , 50 , 75 ] ;
7595: LD_ADDR_VAR 0 9
7599: PUSH
7600: LD_INT 100
7602: PUSH
7603: LD_INT 50
7605: PUSH
7606: LD_INT 75
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: LIST
7613: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7614: LD_VAR 0 6
7618: PPUSH
7619: CALL_OW 257
7623: PUSH
7624: LD_INT 15
7626: EQUAL
7627: IFFALSE 7648
// points := [ 10 , 5 , 3 ] ;
7629: LD_ADDR_VAR 0 9
7633: PUSH
7634: LD_INT 10
7636: PUSH
7637: LD_INT 5
7639: PUSH
7640: LD_INT 3
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: LIST
7647: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7648: LD_VAR 0 6
7652: PPUSH
7653: CALL_OW 257
7657: PUSH
7658: LD_INT 14
7660: EQUAL
7661: IFFALSE 7682
// points := [ 10 , 0 , 0 ] ;
7663: LD_ADDR_VAR 0 9
7667: PUSH
7668: LD_INT 10
7670: PUSH
7671: LD_INT 0
7673: PUSH
7674: LD_INT 0
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: LIST
7681: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7682: LD_VAR 0 6
7686: PPUSH
7687: CALL_OW 257
7691: PUSH
7692: LD_INT 11
7694: EQUAL
7695: IFFALSE 7716
// points := [ 30 , 10 , 5 ] ;
7697: LD_ADDR_VAR 0 9
7701: PUSH
7702: LD_INT 30
7704: PUSH
7705: LD_INT 10
7707: PUSH
7708: LD_INT 5
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: LIST
7715: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7716: LD_VAR 0 1
7720: PPUSH
7721: LD_INT 5
7723: PPUSH
7724: CALL_OW 321
7728: PUSH
7729: LD_INT 2
7731: EQUAL
7732: IFFALSE 7749
// bpoints := bpoints * 1.8 ;
7734: LD_ADDR_VAR 0 10
7738: PUSH
7739: LD_VAR 0 10
7743: PUSH
7744: LD_REAL  1.80000000000000E+0000
7747: MUL
7748: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7749: LD_VAR 0 6
7753: PPUSH
7754: CALL_OW 257
7758: PUSH
7759: LD_INT 1
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: LD_INT 3
7767: PUSH
7768: LD_INT 4
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: IN
7777: PUSH
7778: LD_VAR 0 1
7782: PPUSH
7783: LD_INT 51
7785: PPUSH
7786: CALL_OW 321
7790: PUSH
7791: LD_INT 2
7793: EQUAL
7794: AND
7795: IFFALSE 7812
// bpoints := bpoints * 1.2 ;
7797: LD_ADDR_VAR 0 10
7801: PUSH
7802: LD_VAR 0 10
7806: PUSH
7807: LD_REAL  1.20000000000000E+0000
7810: MUL
7811: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7812: LD_VAR 0 6
7816: PPUSH
7817: CALL_OW 257
7821: PUSH
7822: LD_INT 5
7824: PUSH
7825: LD_INT 7
7827: PUSH
7828: LD_INT 9
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: LIST
7835: IN
7836: PUSH
7837: LD_VAR 0 1
7841: PPUSH
7842: LD_INT 52
7844: PPUSH
7845: CALL_OW 321
7849: PUSH
7850: LD_INT 2
7852: EQUAL
7853: AND
7854: IFFALSE 7871
// bpoints := bpoints * 1.5 ;
7856: LD_ADDR_VAR 0 10
7860: PUSH
7861: LD_VAR 0 10
7865: PUSH
7866: LD_REAL  1.50000000000000E+0000
7869: MUL
7870: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7871: LD_VAR 0 1
7875: PPUSH
7876: LD_INT 66
7878: PPUSH
7879: CALL_OW 321
7883: PUSH
7884: LD_INT 2
7886: EQUAL
7887: IFFALSE 7904
// bpoints := bpoints * 1.1 ;
7889: LD_ADDR_VAR 0 10
7893: PUSH
7894: LD_VAR 0 10
7898: PUSH
7899: LD_REAL  1.10000000000000E+0000
7902: MUL
7903: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7904: LD_ADDR_VAR 0 10
7908: PUSH
7909: LD_VAR 0 10
7913: PUSH
7914: LD_VAR 0 6
7918: PPUSH
7919: LD_INT 1
7921: PPUSH
7922: CALL_OW 259
7926: PUSH
7927: LD_REAL  1.15000000000000E+0000
7930: MUL
7931: MUL
7932: ST_TO_ADDR
// end ; unit_vehicle :
7933: GO 8763
7935: LD_INT 2
7937: DOUBLE
7938: EQUAL
7939: IFTRUE 7943
7941: GO 8751
7943: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7944: LD_VAR 0 6
7948: PPUSH
7949: CALL_OW 264
7953: PUSH
7954: LD_INT 2
7956: PUSH
7957: LD_INT 42
7959: PUSH
7960: LD_INT 24
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: LIST
7967: IN
7968: IFFALSE 7989
// points := [ 25 , 5 , 3 ] ;
7970: LD_ADDR_VAR 0 9
7974: PUSH
7975: LD_INT 25
7977: PUSH
7978: LD_INT 5
7980: PUSH
7981: LD_INT 3
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: LIST
7988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7989: LD_VAR 0 6
7993: PPUSH
7994: CALL_OW 264
7998: PUSH
7999: LD_INT 4
8001: PUSH
8002: LD_INT 43
8004: PUSH
8005: LD_INT 25
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: LIST
8012: IN
8013: IFFALSE 8034
// points := [ 40 , 15 , 5 ] ;
8015: LD_ADDR_VAR 0 9
8019: PUSH
8020: LD_INT 40
8022: PUSH
8023: LD_INT 15
8025: PUSH
8026: LD_INT 5
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8034: LD_VAR 0 6
8038: PPUSH
8039: CALL_OW 264
8043: PUSH
8044: LD_INT 3
8046: PUSH
8047: LD_INT 23
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: IN
8054: IFFALSE 8075
// points := [ 7 , 25 , 8 ] ;
8056: LD_ADDR_VAR 0 9
8060: PUSH
8061: LD_INT 7
8063: PUSH
8064: LD_INT 25
8066: PUSH
8067: LD_INT 8
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: LIST
8074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8075: LD_VAR 0 6
8079: PPUSH
8080: CALL_OW 264
8084: PUSH
8085: LD_INT 5
8087: PUSH
8088: LD_INT 27
8090: PUSH
8091: LD_INT 44
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: LIST
8098: IN
8099: IFFALSE 8120
// points := [ 14 , 50 , 16 ] ;
8101: LD_ADDR_VAR 0 9
8105: PUSH
8106: LD_INT 14
8108: PUSH
8109: LD_INT 50
8111: PUSH
8112: LD_INT 16
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: LIST
8119: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8120: LD_VAR 0 6
8124: PPUSH
8125: CALL_OW 264
8129: PUSH
8130: LD_INT 6
8132: PUSH
8133: LD_INT 46
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: IN
8140: IFFALSE 8161
// points := [ 32 , 120 , 70 ] ;
8142: LD_ADDR_VAR 0 9
8146: PUSH
8147: LD_INT 32
8149: PUSH
8150: LD_INT 120
8152: PUSH
8153: LD_INT 70
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: LIST
8160: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8161: LD_VAR 0 6
8165: PPUSH
8166: CALL_OW 264
8170: PUSH
8171: LD_INT 7
8173: PUSH
8174: LD_INT 28
8176: PUSH
8177: LD_INT 45
8179: PUSH
8180: LD_EXP 8
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: IN
8191: IFFALSE 8212
// points := [ 35 , 20 , 45 ] ;
8193: LD_ADDR_VAR 0 9
8197: PUSH
8198: LD_INT 35
8200: PUSH
8201: LD_INT 20
8203: PUSH
8204: LD_INT 45
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8212: LD_VAR 0 6
8216: PPUSH
8217: CALL_OW 264
8221: PUSH
8222: LD_INT 47
8224: PUSH
8225: EMPTY
8226: LIST
8227: IN
8228: IFFALSE 8249
// points := [ 67 , 45 , 75 ] ;
8230: LD_ADDR_VAR 0 9
8234: PUSH
8235: LD_INT 67
8237: PUSH
8238: LD_INT 45
8240: PUSH
8241: LD_INT 75
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: LIST
8248: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8249: LD_VAR 0 6
8253: PPUSH
8254: CALL_OW 264
8258: PUSH
8259: LD_INT 26
8261: PUSH
8262: EMPTY
8263: LIST
8264: IN
8265: IFFALSE 8286
// points := [ 120 , 30 , 80 ] ;
8267: LD_ADDR_VAR 0 9
8271: PUSH
8272: LD_INT 120
8274: PUSH
8275: LD_INT 30
8277: PUSH
8278: LD_INT 80
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8286: LD_VAR 0 6
8290: PPUSH
8291: CALL_OW 264
8295: PUSH
8296: LD_INT 22
8298: PUSH
8299: EMPTY
8300: LIST
8301: IN
8302: IFFALSE 8323
// points := [ 40 , 1 , 1 ] ;
8304: LD_ADDR_VAR 0 9
8308: PUSH
8309: LD_INT 40
8311: PUSH
8312: LD_INT 1
8314: PUSH
8315: LD_INT 1
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: LIST
8322: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8323: LD_VAR 0 6
8327: PPUSH
8328: CALL_OW 264
8332: PUSH
8333: LD_INT 29
8335: PUSH
8336: EMPTY
8337: LIST
8338: IN
8339: IFFALSE 8360
// points := [ 70 , 200 , 400 ] ;
8341: LD_ADDR_VAR 0 9
8345: PUSH
8346: LD_INT 70
8348: PUSH
8349: LD_INT 200
8351: PUSH
8352: LD_INT 400
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: LIST
8359: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8360: LD_VAR 0 6
8364: PPUSH
8365: CALL_OW 264
8369: PUSH
8370: LD_INT 14
8372: PUSH
8373: LD_INT 53
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: IN
8380: IFFALSE 8401
// points := [ 40 , 10 , 20 ] ;
8382: LD_ADDR_VAR 0 9
8386: PUSH
8387: LD_INT 40
8389: PUSH
8390: LD_INT 10
8392: PUSH
8393: LD_INT 20
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: LIST
8400: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8401: LD_VAR 0 6
8405: PPUSH
8406: CALL_OW 264
8410: PUSH
8411: LD_INT 9
8413: PUSH
8414: EMPTY
8415: LIST
8416: IN
8417: IFFALSE 8438
// points := [ 5 , 70 , 20 ] ;
8419: LD_ADDR_VAR 0 9
8423: PUSH
8424: LD_INT 5
8426: PUSH
8427: LD_INT 70
8429: PUSH
8430: LD_INT 20
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8438: LD_VAR 0 6
8442: PPUSH
8443: CALL_OW 264
8447: PUSH
8448: LD_INT 10
8450: PUSH
8451: EMPTY
8452: LIST
8453: IN
8454: IFFALSE 8475
// points := [ 35 , 110 , 70 ] ;
8456: LD_ADDR_VAR 0 9
8460: PUSH
8461: LD_INT 35
8463: PUSH
8464: LD_INT 110
8466: PUSH
8467: LD_INT 70
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8475: LD_VAR 0 6
8479: PPUSH
8480: CALL_OW 265
8484: PUSH
8485: LD_INT 25
8487: EQUAL
8488: IFFALSE 8509
// points := [ 80 , 65 , 100 ] ;
8490: LD_ADDR_VAR 0 9
8494: PUSH
8495: LD_INT 80
8497: PUSH
8498: LD_INT 65
8500: PUSH
8501: LD_INT 100
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8509: LD_VAR 0 6
8513: PPUSH
8514: CALL_OW 263
8518: PUSH
8519: LD_INT 1
8521: EQUAL
8522: IFFALSE 8557
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8524: LD_ADDR_VAR 0 10
8528: PUSH
8529: LD_VAR 0 10
8533: PUSH
8534: LD_VAR 0 6
8538: PPUSH
8539: CALL_OW 311
8543: PPUSH
8544: LD_INT 3
8546: PPUSH
8547: CALL_OW 259
8551: PUSH
8552: LD_INT 4
8554: MUL
8555: MUL
8556: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8557: LD_VAR 0 6
8561: PPUSH
8562: CALL_OW 263
8566: PUSH
8567: LD_INT 2
8569: EQUAL
8570: IFFALSE 8621
// begin j := IsControledBy ( i ) ;
8572: LD_ADDR_VAR 0 7
8576: PUSH
8577: LD_VAR 0 6
8581: PPUSH
8582: CALL_OW 312
8586: ST_TO_ADDR
// if j then
8587: LD_VAR 0 7
8591: IFFALSE 8621
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8593: LD_ADDR_VAR 0 10
8597: PUSH
8598: LD_VAR 0 10
8602: PUSH
8603: LD_VAR 0 7
8607: PPUSH
8608: LD_INT 3
8610: PPUSH
8611: CALL_OW 259
8615: PUSH
8616: LD_INT 3
8618: MUL
8619: MUL
8620: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8621: LD_VAR 0 6
8625: PPUSH
8626: CALL_OW 264
8630: PUSH
8631: LD_INT 5
8633: PUSH
8634: LD_INT 6
8636: PUSH
8637: LD_INT 46
8639: PUSH
8640: LD_INT 44
8642: PUSH
8643: LD_INT 47
8645: PUSH
8646: LD_INT 45
8648: PUSH
8649: LD_INT 28
8651: PUSH
8652: LD_INT 7
8654: PUSH
8655: LD_INT 27
8657: PUSH
8658: LD_INT 29
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: IN
8673: PUSH
8674: LD_VAR 0 1
8678: PPUSH
8679: LD_INT 52
8681: PPUSH
8682: CALL_OW 321
8686: PUSH
8687: LD_INT 2
8689: EQUAL
8690: AND
8691: IFFALSE 8708
// bpoints := bpoints * 1.2 ;
8693: LD_ADDR_VAR 0 10
8697: PUSH
8698: LD_VAR 0 10
8702: PUSH
8703: LD_REAL  1.20000000000000E+0000
8706: MUL
8707: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8708: LD_VAR 0 6
8712: PPUSH
8713: CALL_OW 264
8717: PUSH
8718: LD_INT 6
8720: PUSH
8721: LD_INT 46
8723: PUSH
8724: LD_INT 47
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: IN
8732: IFFALSE 8749
// bpoints := bpoints * 1.2 ;
8734: LD_ADDR_VAR 0 10
8738: PUSH
8739: LD_VAR 0 10
8743: PUSH
8744: LD_REAL  1.20000000000000E+0000
8747: MUL
8748: ST_TO_ADDR
// end ; unit_building :
8749: GO 8763
8751: LD_INT 3
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 8762
8759: POP
// ; end ;
8760: GO 8763
8762: POP
// for j = 1 to 3 do
8763: LD_ADDR_VAR 0 7
8767: PUSH
8768: DOUBLE
8769: LD_INT 1
8771: DEC
8772: ST_TO_ADDR
8773: LD_INT 3
8775: PUSH
8776: FOR_TO
8777: IFFALSE 8830
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8779: LD_ADDR_VAR 0 5
8783: PUSH
8784: LD_VAR 0 5
8788: PPUSH
8789: LD_VAR 0 7
8793: PPUSH
8794: LD_VAR 0 5
8798: PUSH
8799: LD_VAR 0 7
8803: ARRAY
8804: PUSH
8805: LD_VAR 0 9
8809: PUSH
8810: LD_VAR 0 7
8814: ARRAY
8815: PUSH
8816: LD_VAR 0 10
8820: MUL
8821: PLUS
8822: PPUSH
8823: CALL_OW 1
8827: ST_TO_ADDR
8828: GO 8776
8830: POP
8831: POP
// end ;
8832: GO 7309
8834: POP
8835: POP
// result := Replace ( result , 4 , tmp ) ;
8836: LD_ADDR_VAR 0 5
8840: PUSH
8841: LD_VAR 0 5
8845: PPUSH
8846: LD_INT 4
8848: PPUSH
8849: LD_VAR 0 8
8853: PPUSH
8854: CALL_OW 1
8858: ST_TO_ADDR
// end ;
8859: LD_VAR 0 5
8863: RET
// export function DangerAtRange ( unit , range ) ; begin
8864: LD_INT 0
8866: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8867: LD_ADDR_VAR 0 3
8871: PUSH
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 255
8881: PPUSH
8882: LD_VAR 0 1
8886: PPUSH
8887: CALL_OW 250
8891: PPUSH
8892: LD_VAR 0 1
8896: PPUSH
8897: CALL_OW 251
8901: PPUSH
8902: LD_VAR 0 2
8906: PPUSH
8907: CALL 7161 0 4
8911: ST_TO_ADDR
// end ;
8912: LD_VAR 0 3
8916: RET
// export function DangerInArea ( side , area ) ; begin
8917: LD_INT 0
8919: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8920: LD_ADDR_VAR 0 3
8924: PUSH
8925: LD_VAR 0 2
8929: PPUSH
8930: LD_INT 81
8932: PUSH
8933: LD_VAR 0 1
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PPUSH
8942: CALL_OW 70
8946: ST_TO_ADDR
// end ;
8947: LD_VAR 0 3
8951: RET
// export function IsExtension ( b ) ; begin
8952: LD_INT 0
8954: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8955: LD_ADDR_VAR 0 2
8959: PUSH
8960: LD_VAR 0 1
8964: PUSH
8965: LD_INT 23
8967: PUSH
8968: LD_INT 20
8970: PUSH
8971: LD_INT 22
8973: PUSH
8974: LD_INT 17
8976: PUSH
8977: LD_INT 24
8979: PUSH
8980: LD_INT 21
8982: PUSH
8983: LD_INT 19
8985: PUSH
8986: LD_INT 16
8988: PUSH
8989: LD_INT 25
8991: PUSH
8992: LD_INT 18
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: IN
9007: ST_TO_ADDR
// end ;
9008: LD_VAR 0 2
9012: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9013: LD_INT 0
9015: PPUSH
9016: PPUSH
9017: PPUSH
// result := [ ] ;
9018: LD_ADDR_VAR 0 4
9022: PUSH
9023: EMPTY
9024: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9025: LD_ADDR_VAR 0 5
9029: PUSH
9030: LD_VAR 0 2
9034: PPUSH
9035: LD_INT 21
9037: PUSH
9038: LD_INT 3
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PPUSH
9045: CALL_OW 70
9049: ST_TO_ADDR
// if not tmp then
9050: LD_VAR 0 5
9054: NOT
9055: IFFALSE 9059
// exit ;
9057: GO 9123
// if checkLink then
9059: LD_VAR 0 3
9063: IFFALSE 9113
// begin for i in tmp do
9065: LD_ADDR_VAR 0 6
9069: PUSH
9070: LD_VAR 0 5
9074: PUSH
9075: FOR_IN
9076: IFFALSE 9111
// if GetBase ( i ) <> base then
9078: LD_VAR 0 6
9082: PPUSH
9083: CALL_OW 274
9087: PUSH
9088: LD_VAR 0 1
9092: NONEQUAL
9093: IFFALSE 9109
// ComLinkToBase ( base , i ) ;
9095: LD_VAR 0 1
9099: PPUSH
9100: LD_VAR 0 6
9104: PPUSH
9105: CALL_OW 169
9109: GO 9075
9111: POP
9112: POP
// end ; result := tmp ;
9113: LD_ADDR_VAR 0 4
9117: PUSH
9118: LD_VAR 0 5
9122: ST_TO_ADDR
// end ;
9123: LD_VAR 0 4
9127: RET
// export function ComComplete ( units , b ) ; var i ; begin
9128: LD_INT 0
9130: PPUSH
9131: PPUSH
// if not units then
9132: LD_VAR 0 1
9136: NOT
9137: IFFALSE 9141
// exit ;
9139: GO 9231
// for i in units do
9141: LD_ADDR_VAR 0 4
9145: PUSH
9146: LD_VAR 0 1
9150: PUSH
9151: FOR_IN
9152: IFFALSE 9229
// if BuildingStatus ( b ) = bs_build then
9154: LD_VAR 0 2
9158: PPUSH
9159: CALL_OW 461
9163: PUSH
9164: LD_INT 1
9166: EQUAL
9167: IFFALSE 9227
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9169: LD_VAR 0 4
9173: PPUSH
9174: LD_STRING h
9176: PUSH
9177: LD_VAR 0 2
9181: PPUSH
9182: CALL_OW 250
9186: PUSH
9187: LD_VAR 0 2
9191: PPUSH
9192: CALL_OW 251
9196: PUSH
9197: LD_VAR 0 2
9201: PUSH
9202: LD_INT 0
9204: PUSH
9205: LD_INT 0
9207: PUSH
9208: LD_INT 0
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: PUSH
9220: EMPTY
9221: LIST
9222: PPUSH
9223: CALL_OW 446
9227: GO 9151
9229: POP
9230: POP
// end ;
9231: LD_VAR 0 3
9235: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9236: LD_INT 0
9238: PPUSH
9239: PPUSH
9240: PPUSH
9241: PPUSH
9242: PPUSH
9243: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
9244: LD_VAR 0 1
9248: NOT
9249: PUSH
9250: LD_VAR 0 1
9254: PPUSH
9255: CALL_OW 263
9259: PUSH
9260: LD_INT 2
9262: EQUAL
9263: NOT
9264: OR
9265: IFFALSE 9269
// exit ;
9267: GO 9585
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9269: LD_ADDR_VAR 0 6
9273: PUSH
9274: LD_INT 22
9276: PUSH
9277: LD_VAR 0 1
9281: PPUSH
9282: CALL_OW 255
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: PUSH
9291: LD_INT 2
9293: PUSH
9294: LD_INT 30
9296: PUSH
9297: LD_INT 36
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 34
9306: PUSH
9307: LD_INT 31
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: LIST
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PPUSH
9323: CALL_OW 69
9327: ST_TO_ADDR
// if not tmp then
9328: LD_VAR 0 6
9332: NOT
9333: IFFALSE 9337
// exit ;
9335: GO 9585
// result := [ ] ;
9337: LD_ADDR_VAR 0 2
9341: PUSH
9342: EMPTY
9343: ST_TO_ADDR
// for i in tmp do
9344: LD_ADDR_VAR 0 3
9348: PUSH
9349: LD_VAR 0 6
9353: PUSH
9354: FOR_IN
9355: IFFALSE 9426
// begin t := UnitsInside ( i ) ;
9357: LD_ADDR_VAR 0 4
9361: PUSH
9362: LD_VAR 0 3
9366: PPUSH
9367: CALL_OW 313
9371: ST_TO_ADDR
// if t then
9372: LD_VAR 0 4
9376: IFFALSE 9424
// for j in t do
9378: LD_ADDR_VAR 0 7
9382: PUSH
9383: LD_VAR 0 4
9387: PUSH
9388: FOR_IN
9389: IFFALSE 9422
// result := Insert ( result , result + 1 , j ) ;
9391: LD_ADDR_VAR 0 2
9395: PUSH
9396: LD_VAR 0 2
9400: PPUSH
9401: LD_VAR 0 2
9405: PUSH
9406: LD_INT 1
9408: PLUS
9409: PPUSH
9410: LD_VAR 0 7
9414: PPUSH
9415: CALL_OW 2
9419: ST_TO_ADDR
9420: GO 9388
9422: POP
9423: POP
// end ;
9424: GO 9354
9426: POP
9427: POP
// if not result then
9428: LD_VAR 0 2
9432: NOT
9433: IFFALSE 9437
// exit ;
9435: GO 9585
// mech := result [ 1 ] ;
9437: LD_ADDR_VAR 0 5
9441: PUSH
9442: LD_VAR 0 2
9446: PUSH
9447: LD_INT 1
9449: ARRAY
9450: ST_TO_ADDR
// if result > 1 then
9451: LD_VAR 0 2
9455: PUSH
9456: LD_INT 1
9458: GREATER
9459: IFFALSE 9571
// for i = 2 to result do
9461: LD_ADDR_VAR 0 3
9465: PUSH
9466: DOUBLE
9467: LD_INT 2
9469: DEC
9470: ST_TO_ADDR
9471: LD_VAR 0 2
9475: PUSH
9476: FOR_TO
9477: IFFALSE 9569
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9479: LD_ADDR_VAR 0 4
9483: PUSH
9484: LD_VAR 0 2
9488: PUSH
9489: LD_VAR 0 3
9493: ARRAY
9494: PPUSH
9495: LD_INT 3
9497: PPUSH
9498: CALL_OW 259
9502: PUSH
9503: LD_VAR 0 2
9507: PUSH
9508: LD_VAR 0 3
9512: ARRAY
9513: PPUSH
9514: CALL_OW 432
9518: MINUS
9519: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9520: LD_VAR 0 4
9524: PUSH
9525: LD_VAR 0 5
9529: PPUSH
9530: LD_INT 3
9532: PPUSH
9533: CALL_OW 259
9537: PUSH
9538: LD_VAR 0 5
9542: PPUSH
9543: CALL_OW 432
9547: MINUS
9548: GREATEREQUAL
9549: IFFALSE 9567
// mech := result [ i ] ;
9551: LD_ADDR_VAR 0 5
9555: PUSH
9556: LD_VAR 0 2
9560: PUSH
9561: LD_VAR 0 3
9565: ARRAY
9566: ST_TO_ADDR
// end ;
9567: GO 9476
9569: POP
9570: POP
// ComLinkTo ( vehicle , mech ) ;
9571: LD_VAR 0 1
9575: PPUSH
9576: LD_VAR 0 5
9580: PPUSH
9581: CALL_OW 135
// end ;
9585: LD_VAR 0 2
9589: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9590: LD_INT 0
9592: PPUSH
9593: PPUSH
9594: PPUSH
9595: PPUSH
9596: PPUSH
9597: PPUSH
9598: PPUSH
9599: PPUSH
9600: PPUSH
9601: PPUSH
9602: PPUSH
9603: PPUSH
9604: PPUSH
// result := [ ] ;
9605: LD_ADDR_VAR 0 7
9609: PUSH
9610: EMPTY
9611: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9612: LD_VAR 0 1
9616: PPUSH
9617: CALL_OW 266
9621: PUSH
9622: LD_INT 0
9624: PUSH
9625: LD_INT 1
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: IN
9632: NOT
9633: IFFALSE 9637
// exit ;
9635: GO 11271
// if name then
9637: LD_VAR 0 3
9641: IFFALSE 9657
// SetBName ( base_dep , name ) ;
9643: LD_VAR 0 1
9647: PPUSH
9648: LD_VAR 0 3
9652: PPUSH
9653: CALL_OW 500
// base := GetBase ( base_dep ) ;
9657: LD_ADDR_VAR 0 15
9661: PUSH
9662: LD_VAR 0 1
9666: PPUSH
9667: CALL_OW 274
9671: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9672: LD_ADDR_VAR 0 16
9676: PUSH
9677: LD_VAR 0 1
9681: PPUSH
9682: CALL_OW 255
9686: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9687: LD_ADDR_VAR 0 17
9691: PUSH
9692: LD_VAR 0 1
9696: PPUSH
9697: CALL_OW 248
9701: ST_TO_ADDR
// if sources then
9702: LD_VAR 0 5
9706: IFFALSE 9753
// for i = 1 to 3 do
9708: LD_ADDR_VAR 0 8
9712: PUSH
9713: DOUBLE
9714: LD_INT 1
9716: DEC
9717: ST_TO_ADDR
9718: LD_INT 3
9720: PUSH
9721: FOR_TO
9722: IFFALSE 9751
// AddResourceType ( base , i , sources [ i ] ) ;
9724: LD_VAR 0 15
9728: PPUSH
9729: LD_VAR 0 8
9733: PPUSH
9734: LD_VAR 0 5
9738: PUSH
9739: LD_VAR 0 8
9743: ARRAY
9744: PPUSH
9745: CALL_OW 276
9749: GO 9721
9751: POP
9752: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9753: LD_ADDR_VAR 0 18
9757: PUSH
9758: LD_VAR 0 15
9762: PPUSH
9763: LD_VAR 0 2
9767: PPUSH
9768: LD_INT 1
9770: PPUSH
9771: CALL 9013 0 3
9775: ST_TO_ADDR
// InitHc ;
9776: CALL_OW 19
// InitUc ;
9780: CALL_OW 18
// uc_side := side ;
9784: LD_ADDR_OWVAR 20
9788: PUSH
9789: LD_VAR 0 16
9793: ST_TO_ADDR
// uc_nation := nation ;
9794: LD_ADDR_OWVAR 21
9798: PUSH
9799: LD_VAR 0 17
9803: ST_TO_ADDR
// if buildings then
9804: LD_VAR 0 18
9808: IFFALSE 11130
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9810: LD_ADDR_VAR 0 19
9814: PUSH
9815: LD_VAR 0 18
9819: PPUSH
9820: LD_INT 2
9822: PUSH
9823: LD_INT 30
9825: PUSH
9826: LD_INT 29
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 30
9835: PUSH
9836: LD_INT 30
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: PPUSH
9848: CALL_OW 72
9852: ST_TO_ADDR
// if tmp then
9853: LD_VAR 0 19
9857: IFFALSE 9905
// for i in tmp do
9859: LD_ADDR_VAR 0 8
9863: PUSH
9864: LD_VAR 0 19
9868: PUSH
9869: FOR_IN
9870: IFFALSE 9903
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9872: LD_VAR 0 8
9876: PPUSH
9877: CALL_OW 250
9881: PPUSH
9882: LD_VAR 0 8
9886: PPUSH
9887: CALL_OW 251
9891: PPUSH
9892: LD_VAR 0 16
9896: PPUSH
9897: CALL_OW 441
9901: GO 9869
9903: POP
9904: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9905: LD_VAR 0 18
9909: PPUSH
9910: LD_INT 2
9912: PUSH
9913: LD_INT 30
9915: PUSH
9916: LD_INT 32
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: LD_INT 30
9925: PUSH
9926: LD_INT 33
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: LIST
9937: PPUSH
9938: CALL_OW 72
9942: IFFALSE 10030
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9944: LD_ADDR_VAR 0 8
9948: PUSH
9949: LD_VAR 0 18
9953: PPUSH
9954: LD_INT 2
9956: PUSH
9957: LD_INT 30
9959: PUSH
9960: LD_INT 32
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 30
9969: PUSH
9970: LD_INT 33
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: LIST
9981: PPUSH
9982: CALL_OW 72
9986: PUSH
9987: FOR_IN
9988: IFFALSE 10028
// begin if not GetBWeapon ( i ) then
9990: LD_VAR 0 8
9994: PPUSH
9995: CALL_OW 269
9999: NOT
10000: IFFALSE 10026
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10002: LD_VAR 0 8
10006: PPUSH
10007: LD_VAR 0 8
10011: PPUSH
10012: LD_VAR 0 2
10016: PPUSH
10017: CALL 11276 0 2
10021: PPUSH
10022: CALL_OW 431
// end ;
10026: GO 9987
10028: POP
10029: POP
// end ; for i = 1 to personel do
10030: LD_ADDR_VAR 0 8
10034: PUSH
10035: DOUBLE
10036: LD_INT 1
10038: DEC
10039: ST_TO_ADDR
10040: LD_VAR 0 6
10044: PUSH
10045: FOR_TO
10046: IFFALSE 11110
// begin if i > 4 then
10048: LD_VAR 0 8
10052: PUSH
10053: LD_INT 4
10055: GREATER
10056: IFFALSE 10060
// break ;
10058: GO 11110
// case i of 1 :
10060: LD_VAR 0 8
10064: PUSH
10065: LD_INT 1
10067: DOUBLE
10068: EQUAL
10069: IFTRUE 10073
10071: GO 10153
10073: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10074: LD_ADDR_VAR 0 12
10078: PUSH
10079: LD_VAR 0 18
10083: PPUSH
10084: LD_INT 22
10086: PUSH
10087: LD_VAR 0 16
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 58
10098: PUSH
10099: EMPTY
10100: LIST
10101: PUSH
10102: LD_INT 2
10104: PUSH
10105: LD_INT 30
10107: PUSH
10108: LD_INT 32
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 30
10117: PUSH
10118: LD_INT 4
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PUSH
10125: LD_INT 30
10127: PUSH
10128: LD_INT 5
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: PPUSH
10146: CALL_OW 72
10150: ST_TO_ADDR
10151: GO 10375
10153: LD_INT 2
10155: DOUBLE
10156: EQUAL
10157: IFTRUE 10161
10159: GO 10223
10161: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10162: LD_ADDR_VAR 0 12
10166: PUSH
10167: LD_VAR 0 18
10171: PPUSH
10172: LD_INT 22
10174: PUSH
10175: LD_VAR 0 16
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PUSH
10184: LD_INT 2
10186: PUSH
10187: LD_INT 30
10189: PUSH
10190: LD_INT 0
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: LD_INT 30
10199: PUSH
10200: LD_INT 1
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: LIST
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PPUSH
10216: CALL_OW 72
10220: ST_TO_ADDR
10221: GO 10375
10223: LD_INT 3
10225: DOUBLE
10226: EQUAL
10227: IFTRUE 10231
10229: GO 10293
10231: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10232: LD_ADDR_VAR 0 12
10236: PUSH
10237: LD_VAR 0 18
10241: PPUSH
10242: LD_INT 22
10244: PUSH
10245: LD_VAR 0 16
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 2
10256: PUSH
10257: LD_INT 30
10259: PUSH
10260: LD_INT 2
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 30
10269: PUSH
10270: LD_INT 3
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: LIST
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PPUSH
10286: CALL_OW 72
10290: ST_TO_ADDR
10291: GO 10375
10293: LD_INT 4
10295: DOUBLE
10296: EQUAL
10297: IFTRUE 10301
10299: GO 10374
10301: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10302: LD_ADDR_VAR 0 12
10306: PUSH
10307: LD_VAR 0 18
10311: PPUSH
10312: LD_INT 22
10314: PUSH
10315: LD_VAR 0 16
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 2
10326: PUSH
10327: LD_INT 30
10329: PUSH
10330: LD_INT 6
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 30
10339: PUSH
10340: LD_INT 7
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 30
10349: PUSH
10350: LD_INT 8
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PPUSH
10367: CALL_OW 72
10371: ST_TO_ADDR
10372: GO 10375
10374: POP
// if i = 1 then
10375: LD_VAR 0 8
10379: PUSH
10380: LD_INT 1
10382: EQUAL
10383: IFFALSE 10494
// begin tmp := [ ] ;
10385: LD_ADDR_VAR 0 19
10389: PUSH
10390: EMPTY
10391: ST_TO_ADDR
// for j in f do
10392: LD_ADDR_VAR 0 9
10396: PUSH
10397: LD_VAR 0 12
10401: PUSH
10402: FOR_IN
10403: IFFALSE 10476
// if GetBType ( j ) = b_bunker then
10405: LD_VAR 0 9
10409: PPUSH
10410: CALL_OW 266
10414: PUSH
10415: LD_INT 32
10417: EQUAL
10418: IFFALSE 10445
// tmp := Insert ( tmp , 1 , j ) else
10420: LD_ADDR_VAR 0 19
10424: PUSH
10425: LD_VAR 0 19
10429: PPUSH
10430: LD_INT 1
10432: PPUSH
10433: LD_VAR 0 9
10437: PPUSH
10438: CALL_OW 2
10442: ST_TO_ADDR
10443: GO 10474
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10445: LD_ADDR_VAR 0 19
10449: PUSH
10450: LD_VAR 0 19
10454: PPUSH
10455: LD_VAR 0 19
10459: PUSH
10460: LD_INT 1
10462: PLUS
10463: PPUSH
10464: LD_VAR 0 9
10468: PPUSH
10469: CALL_OW 2
10473: ST_TO_ADDR
10474: GO 10402
10476: POP
10477: POP
// if tmp then
10478: LD_VAR 0 19
10482: IFFALSE 10494
// f := tmp ;
10484: LD_ADDR_VAR 0 12
10488: PUSH
10489: LD_VAR 0 19
10493: ST_TO_ADDR
// end ; x := personel [ i ] ;
10494: LD_ADDR_VAR 0 13
10498: PUSH
10499: LD_VAR 0 6
10503: PUSH
10504: LD_VAR 0 8
10508: ARRAY
10509: ST_TO_ADDR
// if x = - 1 then
10510: LD_VAR 0 13
10514: PUSH
10515: LD_INT 1
10517: NEG
10518: EQUAL
10519: IFFALSE 10728
// begin for j in f do
10521: LD_ADDR_VAR 0 9
10525: PUSH
10526: LD_VAR 0 12
10530: PUSH
10531: FOR_IN
10532: IFFALSE 10724
// repeat InitHc ;
10534: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10538: LD_VAR 0 9
10542: PPUSH
10543: CALL_OW 266
10547: PUSH
10548: LD_INT 5
10550: EQUAL
10551: IFFALSE 10621
// begin if UnitsInside ( j ) < 3 then
10553: LD_VAR 0 9
10557: PPUSH
10558: CALL_OW 313
10562: PUSH
10563: LD_INT 3
10565: LESS
10566: IFFALSE 10602
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10568: LD_INT 0
10570: PPUSH
10571: LD_INT 5
10573: PUSH
10574: LD_INT 8
10576: PUSH
10577: LD_INT 9
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: LIST
10584: PUSH
10585: LD_VAR 0 17
10589: ARRAY
10590: PPUSH
10591: LD_VAR 0 4
10595: PPUSH
10596: CALL_OW 380
10600: GO 10619
// PrepareHuman ( false , i , skill ) ;
10602: LD_INT 0
10604: PPUSH
10605: LD_VAR 0 8
10609: PPUSH
10610: LD_VAR 0 4
10614: PPUSH
10615: CALL_OW 380
// end else
10619: GO 10638
// PrepareHuman ( false , i , skill ) ;
10621: LD_INT 0
10623: PPUSH
10624: LD_VAR 0 8
10628: PPUSH
10629: LD_VAR 0 4
10633: PPUSH
10634: CALL_OW 380
// un := CreateHuman ;
10638: LD_ADDR_VAR 0 14
10642: PUSH
10643: CALL_OW 44
10647: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10648: LD_ADDR_VAR 0 7
10652: PUSH
10653: LD_VAR 0 7
10657: PPUSH
10658: LD_INT 1
10660: PPUSH
10661: LD_VAR 0 14
10665: PPUSH
10666: CALL_OW 2
10670: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10671: LD_VAR 0 14
10675: PPUSH
10676: LD_VAR 0 9
10680: PPUSH
10681: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10685: LD_VAR 0 9
10689: PPUSH
10690: CALL_OW 313
10694: PUSH
10695: LD_INT 6
10697: EQUAL
10698: PUSH
10699: LD_VAR 0 9
10703: PPUSH
10704: CALL_OW 266
10708: PUSH
10709: LD_INT 32
10711: PUSH
10712: LD_INT 31
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: IN
10719: OR
10720: IFFALSE 10534
10722: GO 10531
10724: POP
10725: POP
// end else
10726: GO 11108
// for j = 1 to x do
10728: LD_ADDR_VAR 0 9
10732: PUSH
10733: DOUBLE
10734: LD_INT 1
10736: DEC
10737: ST_TO_ADDR
10738: LD_VAR 0 13
10742: PUSH
10743: FOR_TO
10744: IFFALSE 11106
// begin InitHc ;
10746: CALL_OW 19
// if not f then
10750: LD_VAR 0 12
10754: NOT
10755: IFFALSE 10844
// begin PrepareHuman ( false , i , skill ) ;
10757: LD_INT 0
10759: PPUSH
10760: LD_VAR 0 8
10764: PPUSH
10765: LD_VAR 0 4
10769: PPUSH
10770: CALL_OW 380
// un := CreateHuman ;
10774: LD_ADDR_VAR 0 14
10778: PUSH
10779: CALL_OW 44
10783: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10784: LD_ADDR_VAR 0 7
10788: PUSH
10789: LD_VAR 0 7
10793: PPUSH
10794: LD_INT 1
10796: PPUSH
10797: LD_VAR 0 14
10801: PPUSH
10802: CALL_OW 2
10806: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10807: LD_VAR 0 14
10811: PPUSH
10812: LD_VAR 0 1
10816: PPUSH
10817: CALL_OW 250
10821: PPUSH
10822: LD_VAR 0 1
10826: PPUSH
10827: CALL_OW 251
10831: PPUSH
10832: LD_INT 10
10834: PPUSH
10835: LD_INT 0
10837: PPUSH
10838: CALL_OW 50
// continue ;
10842: GO 10743
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10844: LD_VAR 0 12
10848: PUSH
10849: LD_INT 1
10851: ARRAY
10852: PPUSH
10853: CALL_OW 313
10857: PUSH
10858: LD_VAR 0 12
10862: PUSH
10863: LD_INT 1
10865: ARRAY
10866: PPUSH
10867: CALL_OW 266
10871: PUSH
10872: LD_INT 32
10874: PUSH
10875: LD_INT 31
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: IN
10882: AND
10883: PUSH
10884: LD_VAR 0 12
10888: PUSH
10889: LD_INT 1
10891: ARRAY
10892: PPUSH
10893: CALL_OW 313
10897: PUSH
10898: LD_INT 6
10900: EQUAL
10901: OR
10902: IFFALSE 10922
// f := Delete ( f , 1 ) ;
10904: LD_ADDR_VAR 0 12
10908: PUSH
10909: LD_VAR 0 12
10913: PPUSH
10914: LD_INT 1
10916: PPUSH
10917: CALL_OW 3
10921: ST_TO_ADDR
// if not f then
10922: LD_VAR 0 12
10926: NOT
10927: IFFALSE 10945
// begin x := x + 2 ;
10929: LD_ADDR_VAR 0 13
10933: PUSH
10934: LD_VAR 0 13
10938: PUSH
10939: LD_INT 2
10941: PLUS
10942: ST_TO_ADDR
// continue ;
10943: GO 10743
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10945: LD_VAR 0 12
10949: PUSH
10950: LD_INT 1
10952: ARRAY
10953: PPUSH
10954: CALL_OW 266
10958: PUSH
10959: LD_INT 5
10961: EQUAL
10962: IFFALSE 11036
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10964: LD_VAR 0 12
10968: PUSH
10969: LD_INT 1
10971: ARRAY
10972: PPUSH
10973: CALL_OW 313
10977: PUSH
10978: LD_INT 3
10980: LESS
10981: IFFALSE 11017
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10983: LD_INT 0
10985: PPUSH
10986: LD_INT 5
10988: PUSH
10989: LD_INT 8
10991: PUSH
10992: LD_INT 9
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: LIST
10999: PUSH
11000: LD_VAR 0 17
11004: ARRAY
11005: PPUSH
11006: LD_VAR 0 4
11010: PPUSH
11011: CALL_OW 380
11015: GO 11034
// PrepareHuman ( false , i , skill ) ;
11017: LD_INT 0
11019: PPUSH
11020: LD_VAR 0 8
11024: PPUSH
11025: LD_VAR 0 4
11029: PPUSH
11030: CALL_OW 380
// end else
11034: GO 11053
// PrepareHuman ( false , i , skill ) ;
11036: LD_INT 0
11038: PPUSH
11039: LD_VAR 0 8
11043: PPUSH
11044: LD_VAR 0 4
11048: PPUSH
11049: CALL_OW 380
// un := CreateHuman ;
11053: LD_ADDR_VAR 0 14
11057: PUSH
11058: CALL_OW 44
11062: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11063: LD_ADDR_VAR 0 7
11067: PUSH
11068: LD_VAR 0 7
11072: PPUSH
11073: LD_INT 1
11075: PPUSH
11076: LD_VAR 0 14
11080: PPUSH
11081: CALL_OW 2
11085: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11086: LD_VAR 0 14
11090: PPUSH
11091: LD_VAR 0 12
11095: PUSH
11096: LD_INT 1
11098: ARRAY
11099: PPUSH
11100: CALL_OW 52
// end ;
11104: GO 10743
11106: POP
11107: POP
// end ;
11108: GO 10045
11110: POP
11111: POP
// result := result ^ buildings ;
11112: LD_ADDR_VAR 0 7
11116: PUSH
11117: LD_VAR 0 7
11121: PUSH
11122: LD_VAR 0 18
11126: ADD
11127: ST_TO_ADDR
// end else
11128: GO 11271
// begin for i = 1 to personel do
11130: LD_ADDR_VAR 0 8
11134: PUSH
11135: DOUBLE
11136: LD_INT 1
11138: DEC
11139: ST_TO_ADDR
11140: LD_VAR 0 6
11144: PUSH
11145: FOR_TO
11146: IFFALSE 11269
// begin if i > 4 then
11148: LD_VAR 0 8
11152: PUSH
11153: LD_INT 4
11155: GREATER
11156: IFFALSE 11160
// break ;
11158: GO 11269
// x := personel [ i ] ;
11160: LD_ADDR_VAR 0 13
11164: PUSH
11165: LD_VAR 0 6
11169: PUSH
11170: LD_VAR 0 8
11174: ARRAY
11175: ST_TO_ADDR
// if x = - 1 then
11176: LD_VAR 0 13
11180: PUSH
11181: LD_INT 1
11183: NEG
11184: EQUAL
11185: IFFALSE 11189
// continue ;
11187: GO 11145
// PrepareHuman ( false , i , skill ) ;
11189: LD_INT 0
11191: PPUSH
11192: LD_VAR 0 8
11196: PPUSH
11197: LD_VAR 0 4
11201: PPUSH
11202: CALL_OW 380
// un := CreateHuman ;
11206: LD_ADDR_VAR 0 14
11210: PUSH
11211: CALL_OW 44
11215: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11216: LD_VAR 0 14
11220: PPUSH
11221: LD_VAR 0 1
11225: PPUSH
11226: CALL_OW 250
11230: PPUSH
11231: LD_VAR 0 1
11235: PPUSH
11236: CALL_OW 251
11240: PPUSH
11241: LD_INT 10
11243: PPUSH
11244: LD_INT 0
11246: PPUSH
11247: CALL_OW 50
// result := result ^ un ;
11251: LD_ADDR_VAR 0 7
11255: PUSH
11256: LD_VAR 0 7
11260: PUSH
11261: LD_VAR 0 14
11265: ADD
11266: ST_TO_ADDR
// end ;
11267: GO 11145
11269: POP
11270: POP
// end ; end ;
11271: LD_VAR 0 7
11275: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11276: LD_INT 0
11278: PPUSH
11279: PPUSH
11280: PPUSH
11281: PPUSH
11282: PPUSH
11283: PPUSH
11284: PPUSH
11285: PPUSH
11286: PPUSH
11287: PPUSH
11288: PPUSH
11289: PPUSH
11290: PPUSH
11291: PPUSH
11292: PPUSH
11293: PPUSH
// result := false ;
11294: LD_ADDR_VAR 0 3
11298: PUSH
11299: LD_INT 0
11301: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11302: LD_VAR 0 1
11306: NOT
11307: PUSH
11308: LD_VAR 0 1
11312: PPUSH
11313: CALL_OW 266
11317: PUSH
11318: LD_INT 32
11320: PUSH
11321: LD_INT 33
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: IN
11328: NOT
11329: OR
11330: IFFALSE 11334
// exit ;
11332: GO 12443
// nat := GetNation ( tower ) ;
11334: LD_ADDR_VAR 0 12
11338: PUSH
11339: LD_VAR 0 1
11343: PPUSH
11344: CALL_OW 248
11348: ST_TO_ADDR
// side := GetSide ( tower ) ;
11349: LD_ADDR_VAR 0 16
11353: PUSH
11354: LD_VAR 0 1
11358: PPUSH
11359: CALL_OW 255
11363: ST_TO_ADDR
// x := GetX ( tower ) ;
11364: LD_ADDR_VAR 0 10
11368: PUSH
11369: LD_VAR 0 1
11373: PPUSH
11374: CALL_OW 250
11378: ST_TO_ADDR
// y := GetY ( tower ) ;
11379: LD_ADDR_VAR 0 11
11383: PUSH
11384: LD_VAR 0 1
11388: PPUSH
11389: CALL_OW 251
11393: ST_TO_ADDR
// if not x or not y then
11394: LD_VAR 0 10
11398: NOT
11399: PUSH
11400: LD_VAR 0 11
11404: NOT
11405: OR
11406: IFFALSE 11410
// exit ;
11408: GO 12443
// weapon := 0 ;
11410: LD_ADDR_VAR 0 18
11414: PUSH
11415: LD_INT 0
11417: ST_TO_ADDR
// fac_list := [ ] ;
11418: LD_ADDR_VAR 0 17
11422: PUSH
11423: EMPTY
11424: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11425: LD_ADDR_VAR 0 6
11429: PUSH
11430: LD_VAR 0 1
11434: PPUSH
11435: CALL_OW 274
11439: PPUSH
11440: LD_VAR 0 2
11444: PPUSH
11445: LD_INT 0
11447: PPUSH
11448: CALL 9013 0 3
11452: PPUSH
11453: LD_INT 30
11455: PUSH
11456: LD_INT 3
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: PPUSH
11463: CALL_OW 72
11467: ST_TO_ADDR
// if not factories then
11468: LD_VAR 0 6
11472: NOT
11473: IFFALSE 11477
// exit ;
11475: GO 12443
// for i in factories do
11477: LD_ADDR_VAR 0 8
11481: PUSH
11482: LD_VAR 0 6
11486: PUSH
11487: FOR_IN
11488: IFFALSE 11513
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11490: LD_ADDR_VAR 0 17
11494: PUSH
11495: LD_VAR 0 17
11499: PUSH
11500: LD_VAR 0 8
11504: PPUSH
11505: CALL_OW 478
11509: UNION
11510: ST_TO_ADDR
11511: GO 11487
11513: POP
11514: POP
// if not fac_list then
11515: LD_VAR 0 17
11519: NOT
11520: IFFALSE 11524
// exit ;
11522: GO 12443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11524: LD_ADDR_VAR 0 5
11528: PUSH
11529: LD_INT 4
11531: PUSH
11532: LD_INT 5
11534: PUSH
11535: LD_INT 9
11537: PUSH
11538: LD_INT 10
11540: PUSH
11541: LD_INT 6
11543: PUSH
11544: LD_INT 7
11546: PUSH
11547: LD_INT 11
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: PUSH
11559: LD_INT 27
11561: PUSH
11562: LD_INT 28
11564: PUSH
11565: LD_INT 26
11567: PUSH
11568: LD_INT 30
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: PUSH
11577: LD_INT 43
11579: PUSH
11580: LD_INT 44
11582: PUSH
11583: LD_INT 46
11585: PUSH
11586: LD_INT 45
11588: PUSH
11589: LD_INT 47
11591: PUSH
11592: LD_INT 49
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: LIST
11607: PUSH
11608: LD_VAR 0 12
11612: ARRAY
11613: ST_TO_ADDR
// list := list isect fac_list ;
11614: LD_ADDR_VAR 0 5
11618: PUSH
11619: LD_VAR 0 5
11623: PUSH
11624: LD_VAR 0 17
11628: ISECT
11629: ST_TO_ADDR
// if not list then
11630: LD_VAR 0 5
11634: NOT
11635: IFFALSE 11639
// exit ;
11637: GO 12443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11639: LD_VAR 0 12
11643: PUSH
11644: LD_INT 3
11646: EQUAL
11647: PUSH
11648: LD_INT 49
11650: PUSH
11651: LD_VAR 0 5
11655: IN
11656: AND
11657: PUSH
11658: LD_INT 31
11660: PPUSH
11661: LD_VAR 0 16
11665: PPUSH
11666: CALL_OW 321
11670: PUSH
11671: LD_INT 2
11673: EQUAL
11674: AND
11675: IFFALSE 11735
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11677: LD_INT 22
11679: PUSH
11680: LD_VAR 0 16
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: PUSH
11689: LD_INT 35
11691: PUSH
11692: LD_INT 49
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PUSH
11699: LD_INT 91
11701: PUSH
11702: LD_VAR 0 1
11706: PUSH
11707: LD_INT 10
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: LIST
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: LIST
11719: PPUSH
11720: CALL_OW 69
11724: NOT
11725: IFFALSE 11735
// weapon := ru_time_lapser ;
11727: LD_ADDR_VAR 0 18
11731: PUSH
11732: LD_INT 49
11734: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11735: LD_VAR 0 12
11739: PUSH
11740: LD_INT 1
11742: PUSH
11743: LD_INT 2
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: IN
11750: PUSH
11751: LD_INT 11
11753: PUSH
11754: LD_VAR 0 5
11758: IN
11759: PUSH
11760: LD_INT 30
11762: PUSH
11763: LD_VAR 0 5
11767: IN
11768: OR
11769: AND
11770: PUSH
11771: LD_INT 6
11773: PPUSH
11774: LD_VAR 0 16
11778: PPUSH
11779: CALL_OW 321
11783: PUSH
11784: LD_INT 2
11786: EQUAL
11787: AND
11788: IFFALSE 11953
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11790: LD_INT 22
11792: PUSH
11793: LD_VAR 0 16
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 2
11804: PUSH
11805: LD_INT 35
11807: PUSH
11808: LD_INT 11
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PUSH
11815: LD_INT 35
11817: PUSH
11818: LD_INT 30
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 91
11832: PUSH
11833: LD_VAR 0 1
11837: PUSH
11838: LD_INT 18
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 69
11855: NOT
11856: PUSH
11857: LD_INT 22
11859: PUSH
11860: LD_VAR 0 16
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: LD_INT 2
11871: PUSH
11872: LD_INT 30
11874: PUSH
11875: LD_INT 32
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PUSH
11882: LD_INT 30
11884: PUSH
11885: LD_INT 33
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: LIST
11896: PUSH
11897: LD_INT 91
11899: PUSH
11900: LD_VAR 0 1
11904: PUSH
11905: LD_INT 12
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: LIST
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: LIST
11917: PUSH
11918: EMPTY
11919: LIST
11920: PPUSH
11921: CALL_OW 69
11925: PUSH
11926: LD_INT 2
11928: GREATER
11929: AND
11930: IFFALSE 11953
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11932: LD_ADDR_VAR 0 18
11936: PUSH
11937: LD_INT 11
11939: PUSH
11940: LD_INT 30
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: PUSH
11947: LD_VAR 0 12
11951: ARRAY
11952: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11953: LD_VAR 0 18
11957: NOT
11958: PUSH
11959: LD_INT 40
11961: PPUSH
11962: LD_VAR 0 16
11966: PPUSH
11967: CALL_OW 321
11971: PUSH
11972: LD_INT 2
11974: EQUAL
11975: AND
11976: PUSH
11977: LD_INT 7
11979: PUSH
11980: LD_VAR 0 5
11984: IN
11985: PUSH
11986: LD_INT 28
11988: PUSH
11989: LD_VAR 0 5
11993: IN
11994: OR
11995: PUSH
11996: LD_INT 45
11998: PUSH
11999: LD_VAR 0 5
12003: IN
12004: OR
12005: AND
12006: IFFALSE 12260
// begin hex := GetHexInfo ( x , y ) ;
12008: LD_ADDR_VAR 0 4
12012: PUSH
12013: LD_VAR 0 10
12017: PPUSH
12018: LD_VAR 0 11
12022: PPUSH
12023: CALL_OW 546
12027: ST_TO_ADDR
// if hex [ 1 ] then
12028: LD_VAR 0 4
12032: PUSH
12033: LD_INT 1
12035: ARRAY
12036: IFFALSE 12040
// exit ;
12038: GO 12443
// height := hex [ 2 ] ;
12040: LD_ADDR_VAR 0 15
12044: PUSH
12045: LD_VAR 0 4
12049: PUSH
12050: LD_INT 2
12052: ARRAY
12053: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12054: LD_ADDR_VAR 0 14
12058: PUSH
12059: LD_INT 0
12061: PUSH
12062: LD_INT 2
12064: PUSH
12065: LD_INT 3
12067: PUSH
12068: LD_INT 5
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: ST_TO_ADDR
// for i in tmp do
12077: LD_ADDR_VAR 0 8
12081: PUSH
12082: LD_VAR 0 14
12086: PUSH
12087: FOR_IN
12088: IFFALSE 12258
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12090: LD_ADDR_VAR 0 9
12094: PUSH
12095: LD_VAR 0 10
12099: PPUSH
12100: LD_VAR 0 8
12104: PPUSH
12105: LD_INT 5
12107: PPUSH
12108: CALL_OW 272
12112: PUSH
12113: LD_VAR 0 11
12117: PPUSH
12118: LD_VAR 0 8
12122: PPUSH
12123: LD_INT 5
12125: PPUSH
12126: CALL_OW 273
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12135: LD_VAR 0 9
12139: PUSH
12140: LD_INT 1
12142: ARRAY
12143: PPUSH
12144: LD_VAR 0 9
12148: PUSH
12149: LD_INT 2
12151: ARRAY
12152: PPUSH
12153: CALL_OW 488
12157: IFFALSE 12256
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12159: LD_ADDR_VAR 0 4
12163: PUSH
12164: LD_VAR 0 9
12168: PUSH
12169: LD_INT 1
12171: ARRAY
12172: PPUSH
12173: LD_VAR 0 9
12177: PUSH
12178: LD_INT 2
12180: ARRAY
12181: PPUSH
12182: CALL_OW 546
12186: ST_TO_ADDR
// if hex [ 1 ] then
12187: LD_VAR 0 4
12191: PUSH
12192: LD_INT 1
12194: ARRAY
12195: IFFALSE 12199
// continue ;
12197: GO 12087
// h := hex [ 2 ] ;
12199: LD_ADDR_VAR 0 13
12203: PUSH
12204: LD_VAR 0 4
12208: PUSH
12209: LD_INT 2
12211: ARRAY
12212: ST_TO_ADDR
// if h + 7 < height then
12213: LD_VAR 0 13
12217: PUSH
12218: LD_INT 7
12220: PLUS
12221: PUSH
12222: LD_VAR 0 15
12226: LESS
12227: IFFALSE 12256
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12229: LD_ADDR_VAR 0 18
12233: PUSH
12234: LD_INT 7
12236: PUSH
12237: LD_INT 28
12239: PUSH
12240: LD_INT 45
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: LIST
12247: PUSH
12248: LD_VAR 0 12
12252: ARRAY
12253: ST_TO_ADDR
// break ;
12254: GO 12258
// end ; end ; end ;
12256: GO 12087
12258: POP
12259: POP
// end ; if not weapon then
12260: LD_VAR 0 18
12264: NOT
12265: IFFALSE 12325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12267: LD_ADDR_VAR 0 5
12271: PUSH
12272: LD_VAR 0 5
12276: PUSH
12277: LD_INT 11
12279: PUSH
12280: LD_INT 30
12282: PUSH
12283: LD_INT 49
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: DIFF
12291: ST_TO_ADDR
// if not list then
12292: LD_VAR 0 5
12296: NOT
12297: IFFALSE 12301
// exit ;
12299: GO 12443
// weapon := list [ rand ( 1 , list ) ] ;
12301: LD_ADDR_VAR 0 18
12305: PUSH
12306: LD_VAR 0 5
12310: PUSH
12311: LD_INT 1
12313: PPUSH
12314: LD_VAR 0 5
12318: PPUSH
12319: CALL_OW 12
12323: ARRAY
12324: ST_TO_ADDR
// end ; if weapon then
12325: LD_VAR 0 18
12329: IFFALSE 12443
// begin tmp := CostOfWeapon ( weapon ) ;
12331: LD_ADDR_VAR 0 14
12335: PUSH
12336: LD_VAR 0 18
12340: PPUSH
12341: CALL_OW 451
12345: ST_TO_ADDR
// j := GetBase ( tower ) ;
12346: LD_ADDR_VAR 0 9
12350: PUSH
12351: LD_VAR 0 1
12355: PPUSH
12356: CALL_OW 274
12360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12361: LD_VAR 0 9
12365: PPUSH
12366: LD_INT 1
12368: PPUSH
12369: CALL_OW 275
12373: PUSH
12374: LD_VAR 0 14
12378: PUSH
12379: LD_INT 1
12381: ARRAY
12382: GREATEREQUAL
12383: PUSH
12384: LD_VAR 0 9
12388: PPUSH
12389: LD_INT 2
12391: PPUSH
12392: CALL_OW 275
12396: PUSH
12397: LD_VAR 0 14
12401: PUSH
12402: LD_INT 2
12404: ARRAY
12405: GREATEREQUAL
12406: AND
12407: PUSH
12408: LD_VAR 0 9
12412: PPUSH
12413: LD_INT 3
12415: PPUSH
12416: CALL_OW 275
12420: PUSH
12421: LD_VAR 0 14
12425: PUSH
12426: LD_INT 3
12428: ARRAY
12429: GREATEREQUAL
12430: AND
12431: IFFALSE 12443
// result := weapon ;
12433: LD_ADDR_VAR 0 3
12437: PUSH
12438: LD_VAR 0 18
12442: ST_TO_ADDR
// end ; end ;
12443: LD_VAR 0 3
12447: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12448: LD_INT 0
12450: PPUSH
12451: PPUSH
// result := true ;
12452: LD_ADDR_VAR 0 3
12456: PUSH
12457: LD_INT 1
12459: ST_TO_ADDR
// if array1 = array2 then
12460: LD_VAR 0 1
12464: PUSH
12465: LD_VAR 0 2
12469: EQUAL
12470: IFFALSE 12530
// begin for i = 1 to array1 do
12472: LD_ADDR_VAR 0 4
12476: PUSH
12477: DOUBLE
12478: LD_INT 1
12480: DEC
12481: ST_TO_ADDR
12482: LD_VAR 0 1
12486: PUSH
12487: FOR_TO
12488: IFFALSE 12526
// if array1 [ i ] <> array2 [ i ] then
12490: LD_VAR 0 1
12494: PUSH
12495: LD_VAR 0 4
12499: ARRAY
12500: PUSH
12501: LD_VAR 0 2
12505: PUSH
12506: LD_VAR 0 4
12510: ARRAY
12511: NONEQUAL
12512: IFFALSE 12524
// begin result := false ;
12514: LD_ADDR_VAR 0 3
12518: PUSH
12519: LD_INT 0
12521: ST_TO_ADDR
// break ;
12522: GO 12526
// end ;
12524: GO 12487
12526: POP
12527: POP
// end else
12528: GO 12538
// result := false ;
12530: LD_ADDR_VAR 0 3
12534: PUSH
12535: LD_INT 0
12537: ST_TO_ADDR
// end ;
12538: LD_VAR 0 3
12542: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12543: LD_INT 0
12545: PPUSH
12546: PPUSH
// if not array1 or not array2 then
12547: LD_VAR 0 1
12551: NOT
12552: PUSH
12553: LD_VAR 0 2
12557: NOT
12558: OR
12559: IFFALSE 12563
// exit ;
12561: GO 12627
// result := true ;
12563: LD_ADDR_VAR 0 3
12567: PUSH
12568: LD_INT 1
12570: ST_TO_ADDR
// for i = 1 to array1 do
12571: LD_ADDR_VAR 0 4
12575: PUSH
12576: DOUBLE
12577: LD_INT 1
12579: DEC
12580: ST_TO_ADDR
12581: LD_VAR 0 1
12585: PUSH
12586: FOR_TO
12587: IFFALSE 12625
// if array1 [ i ] <> array2 [ i ] then
12589: LD_VAR 0 1
12593: PUSH
12594: LD_VAR 0 4
12598: ARRAY
12599: PUSH
12600: LD_VAR 0 2
12604: PUSH
12605: LD_VAR 0 4
12609: ARRAY
12610: NONEQUAL
12611: IFFALSE 12623
// begin result := false ;
12613: LD_ADDR_VAR 0 3
12617: PUSH
12618: LD_INT 0
12620: ST_TO_ADDR
// break ;
12621: GO 12625
// end ;
12623: GO 12586
12625: POP
12626: POP
// end ;
12627: LD_VAR 0 3
12631: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12632: LD_INT 0
12634: PPUSH
12635: PPUSH
12636: PPUSH
// pom := GetBase ( fac ) ;
12637: LD_ADDR_VAR 0 5
12641: PUSH
12642: LD_VAR 0 1
12646: PPUSH
12647: CALL_OW 274
12651: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12652: LD_ADDR_VAR 0 4
12656: PUSH
12657: LD_VAR 0 2
12661: PUSH
12662: LD_INT 1
12664: ARRAY
12665: PPUSH
12666: LD_VAR 0 2
12670: PUSH
12671: LD_INT 2
12673: ARRAY
12674: PPUSH
12675: LD_VAR 0 2
12679: PUSH
12680: LD_INT 3
12682: ARRAY
12683: PPUSH
12684: LD_VAR 0 2
12688: PUSH
12689: LD_INT 4
12691: ARRAY
12692: PPUSH
12693: CALL_OW 449
12697: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12698: LD_ADDR_VAR 0 3
12702: PUSH
12703: LD_VAR 0 5
12707: PPUSH
12708: LD_INT 1
12710: PPUSH
12711: CALL_OW 275
12715: PUSH
12716: LD_VAR 0 4
12720: PUSH
12721: LD_INT 1
12723: ARRAY
12724: GREATEREQUAL
12725: PUSH
12726: LD_VAR 0 5
12730: PPUSH
12731: LD_INT 2
12733: PPUSH
12734: CALL_OW 275
12738: PUSH
12739: LD_VAR 0 4
12743: PUSH
12744: LD_INT 2
12746: ARRAY
12747: GREATEREQUAL
12748: AND
12749: PUSH
12750: LD_VAR 0 5
12754: PPUSH
12755: LD_INT 3
12757: PPUSH
12758: CALL_OW 275
12762: PUSH
12763: LD_VAR 0 4
12767: PUSH
12768: LD_INT 3
12770: ARRAY
12771: GREATEREQUAL
12772: AND
12773: ST_TO_ADDR
// end ;
12774: LD_VAR 0 3
12778: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12779: LD_INT 0
12781: PPUSH
12782: PPUSH
12783: PPUSH
12784: PPUSH
// pom := GetBase ( building ) ;
12785: LD_ADDR_VAR 0 3
12789: PUSH
12790: LD_VAR 0 1
12794: PPUSH
12795: CALL_OW 274
12799: ST_TO_ADDR
// if not pom then
12800: LD_VAR 0 3
12804: NOT
12805: IFFALSE 12809
// exit ;
12807: GO 12979
// btype := GetBType ( building ) ;
12809: LD_ADDR_VAR 0 5
12813: PUSH
12814: LD_VAR 0 1
12818: PPUSH
12819: CALL_OW 266
12823: ST_TO_ADDR
// if btype = b_armoury then
12824: LD_VAR 0 5
12828: PUSH
12829: LD_INT 4
12831: EQUAL
12832: IFFALSE 12842
// btype := b_barracks ;
12834: LD_ADDR_VAR 0 5
12838: PUSH
12839: LD_INT 5
12841: ST_TO_ADDR
// if btype = b_depot then
12842: LD_VAR 0 5
12846: PUSH
12847: LD_INT 0
12849: EQUAL
12850: IFFALSE 12860
// btype := b_warehouse ;
12852: LD_ADDR_VAR 0 5
12856: PUSH
12857: LD_INT 1
12859: ST_TO_ADDR
// if btype = b_workshop then
12860: LD_VAR 0 5
12864: PUSH
12865: LD_INT 2
12867: EQUAL
12868: IFFALSE 12878
// btype := b_factory ;
12870: LD_ADDR_VAR 0 5
12874: PUSH
12875: LD_INT 3
12877: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12878: LD_ADDR_VAR 0 4
12882: PUSH
12883: LD_VAR 0 5
12887: PPUSH
12888: LD_VAR 0 1
12892: PPUSH
12893: CALL_OW 248
12897: PPUSH
12898: CALL_OW 450
12902: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12903: LD_ADDR_VAR 0 2
12907: PUSH
12908: LD_VAR 0 3
12912: PPUSH
12913: LD_INT 1
12915: PPUSH
12916: CALL_OW 275
12920: PUSH
12921: LD_VAR 0 4
12925: PUSH
12926: LD_INT 1
12928: ARRAY
12929: GREATEREQUAL
12930: PUSH
12931: LD_VAR 0 3
12935: PPUSH
12936: LD_INT 2
12938: PPUSH
12939: CALL_OW 275
12943: PUSH
12944: LD_VAR 0 4
12948: PUSH
12949: LD_INT 2
12951: ARRAY
12952: GREATEREQUAL
12953: AND
12954: PUSH
12955: LD_VAR 0 3
12959: PPUSH
12960: LD_INT 3
12962: PPUSH
12963: CALL_OW 275
12967: PUSH
12968: LD_VAR 0 4
12972: PUSH
12973: LD_INT 3
12975: ARRAY
12976: GREATEREQUAL
12977: AND
12978: ST_TO_ADDR
// end ;
12979: LD_VAR 0 2
12983: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12984: LD_INT 0
12986: PPUSH
12987: PPUSH
12988: PPUSH
// pom := GetBase ( building ) ;
12989: LD_ADDR_VAR 0 4
12993: PUSH
12994: LD_VAR 0 1
12998: PPUSH
12999: CALL_OW 274
13003: ST_TO_ADDR
// if not pom then
13004: LD_VAR 0 4
13008: NOT
13009: IFFALSE 13013
// exit ;
13011: GO 13114
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13013: LD_ADDR_VAR 0 5
13017: PUSH
13018: LD_VAR 0 2
13022: PPUSH
13023: LD_VAR 0 1
13027: PPUSH
13028: CALL_OW 248
13032: PPUSH
13033: CALL_OW 450
13037: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13038: LD_ADDR_VAR 0 3
13042: PUSH
13043: LD_VAR 0 4
13047: PPUSH
13048: LD_INT 1
13050: PPUSH
13051: CALL_OW 275
13055: PUSH
13056: LD_VAR 0 5
13060: PUSH
13061: LD_INT 1
13063: ARRAY
13064: GREATEREQUAL
13065: PUSH
13066: LD_VAR 0 4
13070: PPUSH
13071: LD_INT 2
13073: PPUSH
13074: CALL_OW 275
13078: PUSH
13079: LD_VAR 0 5
13083: PUSH
13084: LD_INT 2
13086: ARRAY
13087: GREATEREQUAL
13088: AND
13089: PUSH
13090: LD_VAR 0 4
13094: PPUSH
13095: LD_INT 3
13097: PPUSH
13098: CALL_OW 275
13102: PUSH
13103: LD_VAR 0 5
13107: PUSH
13108: LD_INT 3
13110: ARRAY
13111: GREATEREQUAL
13112: AND
13113: ST_TO_ADDR
// end ;
13114: LD_VAR 0 3
13118: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13119: LD_INT 0
13121: PPUSH
13122: PPUSH
13123: PPUSH
13124: PPUSH
13125: PPUSH
13126: PPUSH
13127: PPUSH
13128: PPUSH
13129: PPUSH
13130: PPUSH
13131: PPUSH
// result := false ;
13132: LD_ADDR_VAR 0 8
13136: PUSH
13137: LD_INT 0
13139: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13140: LD_VAR 0 5
13144: NOT
13145: PUSH
13146: LD_VAR 0 1
13150: NOT
13151: OR
13152: PUSH
13153: LD_VAR 0 2
13157: NOT
13158: OR
13159: PUSH
13160: LD_VAR 0 3
13164: NOT
13165: OR
13166: IFFALSE 13170
// exit ;
13168: GO 13984
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13170: LD_ADDR_VAR 0 14
13174: PUSH
13175: LD_VAR 0 1
13179: PPUSH
13180: LD_VAR 0 2
13184: PPUSH
13185: LD_VAR 0 3
13189: PPUSH
13190: LD_VAR 0 4
13194: PPUSH
13195: LD_VAR 0 5
13199: PUSH
13200: LD_INT 1
13202: ARRAY
13203: PPUSH
13204: CALL_OW 248
13208: PPUSH
13209: LD_INT 0
13211: PPUSH
13212: CALL 15221 0 6
13216: ST_TO_ADDR
// if not hexes then
13217: LD_VAR 0 14
13221: NOT
13222: IFFALSE 13226
// exit ;
13224: GO 13984
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13226: LD_ADDR_VAR 0 17
13230: PUSH
13231: LD_VAR 0 5
13235: PPUSH
13236: LD_INT 22
13238: PUSH
13239: LD_VAR 0 13
13243: PPUSH
13244: CALL_OW 255
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 2
13255: PUSH
13256: LD_INT 30
13258: PUSH
13259: LD_INT 0
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 30
13268: PUSH
13269: LD_INT 1
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: LIST
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PPUSH
13285: CALL_OW 72
13289: ST_TO_ADDR
// for i = 1 to hexes do
13290: LD_ADDR_VAR 0 9
13294: PUSH
13295: DOUBLE
13296: LD_INT 1
13298: DEC
13299: ST_TO_ADDR
13300: LD_VAR 0 14
13304: PUSH
13305: FOR_TO
13306: IFFALSE 13982
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13308: LD_ADDR_VAR 0 13
13312: PUSH
13313: LD_VAR 0 14
13317: PUSH
13318: LD_VAR 0 9
13322: ARRAY
13323: PUSH
13324: LD_INT 1
13326: ARRAY
13327: PPUSH
13328: LD_VAR 0 14
13332: PUSH
13333: LD_VAR 0 9
13337: ARRAY
13338: PUSH
13339: LD_INT 2
13341: ARRAY
13342: PPUSH
13343: CALL_OW 428
13347: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13348: LD_VAR 0 14
13352: PUSH
13353: LD_VAR 0 9
13357: ARRAY
13358: PUSH
13359: LD_INT 1
13361: ARRAY
13362: PPUSH
13363: LD_VAR 0 14
13367: PUSH
13368: LD_VAR 0 9
13372: ARRAY
13373: PUSH
13374: LD_INT 2
13376: ARRAY
13377: PPUSH
13378: CALL_OW 351
13382: PUSH
13383: LD_VAR 0 14
13387: PUSH
13388: LD_VAR 0 9
13392: ARRAY
13393: PUSH
13394: LD_INT 1
13396: ARRAY
13397: PPUSH
13398: LD_VAR 0 14
13402: PUSH
13403: LD_VAR 0 9
13407: ARRAY
13408: PUSH
13409: LD_INT 2
13411: ARRAY
13412: PPUSH
13413: CALL_OW 488
13417: NOT
13418: OR
13419: PUSH
13420: LD_VAR 0 13
13424: PPUSH
13425: CALL_OW 247
13429: PUSH
13430: LD_INT 3
13432: EQUAL
13433: OR
13434: IFFALSE 13440
// exit ;
13436: POP
13437: POP
13438: GO 13984
// if not tmp then
13440: LD_VAR 0 13
13444: NOT
13445: IFFALSE 13449
// continue ;
13447: GO 13305
// result := true ;
13449: LD_ADDR_VAR 0 8
13453: PUSH
13454: LD_INT 1
13456: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13457: LD_VAR 0 6
13461: PUSH
13462: LD_VAR 0 13
13466: PPUSH
13467: CALL_OW 247
13471: PUSH
13472: LD_INT 2
13474: EQUAL
13475: AND
13476: PUSH
13477: LD_VAR 0 13
13481: PPUSH
13482: CALL_OW 263
13486: PUSH
13487: LD_INT 1
13489: EQUAL
13490: AND
13491: IFFALSE 13655
// begin if IsDrivenBy ( tmp ) then
13493: LD_VAR 0 13
13497: PPUSH
13498: CALL_OW 311
13502: IFFALSE 13506
// continue ;
13504: GO 13305
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13506: LD_VAR 0 6
13510: PPUSH
13511: LD_INT 3
13513: PUSH
13514: LD_INT 60
13516: PUSH
13517: EMPTY
13518: LIST
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 3
13526: PUSH
13527: LD_INT 55
13529: PUSH
13530: EMPTY
13531: LIST
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PPUSH
13541: CALL_OW 72
13545: IFFALSE 13653
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13547: LD_ADDR_VAR 0 18
13551: PUSH
13552: LD_VAR 0 6
13556: PPUSH
13557: LD_INT 3
13559: PUSH
13560: LD_INT 60
13562: PUSH
13563: EMPTY
13564: LIST
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 3
13572: PUSH
13573: LD_INT 55
13575: PUSH
13576: EMPTY
13577: LIST
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PPUSH
13587: CALL_OW 72
13591: PUSH
13592: LD_INT 1
13594: ARRAY
13595: ST_TO_ADDR
// if IsInUnit ( driver ) then
13596: LD_VAR 0 18
13600: PPUSH
13601: CALL_OW 310
13605: IFFALSE 13616
// ComExit ( driver ) ;
13607: LD_VAR 0 18
13611: PPUSH
13612: CALL 38405 0 1
// AddComEnterUnit ( driver , tmp ) ;
13616: LD_VAR 0 18
13620: PPUSH
13621: LD_VAR 0 13
13625: PPUSH
13626: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13630: LD_VAR 0 18
13634: PPUSH
13635: LD_VAR 0 7
13639: PPUSH
13640: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13644: LD_VAR 0 18
13648: PPUSH
13649: CALL_OW 181
// end ; continue ;
13653: GO 13305
// end ; if not cleaners or not tmp in cleaners then
13655: LD_VAR 0 6
13659: NOT
13660: PUSH
13661: LD_VAR 0 13
13665: PUSH
13666: LD_VAR 0 6
13670: IN
13671: NOT
13672: OR
13673: IFFALSE 13980
// begin if dep then
13675: LD_VAR 0 17
13679: IFFALSE 13815
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13681: LD_ADDR_VAR 0 16
13685: PUSH
13686: LD_VAR 0 17
13690: PUSH
13691: LD_INT 1
13693: ARRAY
13694: PPUSH
13695: CALL_OW 250
13699: PPUSH
13700: LD_VAR 0 17
13704: PUSH
13705: LD_INT 1
13707: ARRAY
13708: PPUSH
13709: CALL_OW 254
13713: PPUSH
13714: LD_INT 5
13716: PPUSH
13717: CALL_OW 272
13721: PUSH
13722: LD_VAR 0 17
13726: PUSH
13727: LD_INT 1
13729: ARRAY
13730: PPUSH
13731: CALL_OW 251
13735: PPUSH
13736: LD_VAR 0 17
13740: PUSH
13741: LD_INT 1
13743: ARRAY
13744: PPUSH
13745: CALL_OW 254
13749: PPUSH
13750: LD_INT 5
13752: PPUSH
13753: CALL_OW 273
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13762: LD_VAR 0 16
13766: PUSH
13767: LD_INT 1
13769: ARRAY
13770: PPUSH
13771: LD_VAR 0 16
13775: PUSH
13776: LD_INT 2
13778: ARRAY
13779: PPUSH
13780: CALL_OW 488
13784: IFFALSE 13815
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13786: LD_VAR 0 13
13790: PPUSH
13791: LD_VAR 0 16
13795: PUSH
13796: LD_INT 1
13798: ARRAY
13799: PPUSH
13800: LD_VAR 0 16
13804: PUSH
13805: LD_INT 2
13807: ARRAY
13808: PPUSH
13809: CALL_OW 111
// continue ;
13813: GO 13305
// end ; end ; r := GetDir ( tmp ) ;
13815: LD_ADDR_VAR 0 15
13819: PUSH
13820: LD_VAR 0 13
13824: PPUSH
13825: CALL_OW 254
13829: ST_TO_ADDR
// if r = 5 then
13830: LD_VAR 0 15
13834: PUSH
13835: LD_INT 5
13837: EQUAL
13838: IFFALSE 13848
// r := 0 ;
13840: LD_ADDR_VAR 0 15
13844: PUSH
13845: LD_INT 0
13847: ST_TO_ADDR
// for j = r to 5 do
13848: LD_ADDR_VAR 0 10
13852: PUSH
13853: DOUBLE
13854: LD_VAR 0 15
13858: DEC
13859: ST_TO_ADDR
13860: LD_INT 5
13862: PUSH
13863: FOR_TO
13864: IFFALSE 13978
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13866: LD_ADDR_VAR 0 11
13870: PUSH
13871: LD_VAR 0 13
13875: PPUSH
13876: CALL_OW 250
13880: PPUSH
13881: LD_VAR 0 10
13885: PPUSH
13886: LD_INT 2
13888: PPUSH
13889: CALL_OW 272
13893: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13894: LD_ADDR_VAR 0 12
13898: PUSH
13899: LD_VAR 0 13
13903: PPUSH
13904: CALL_OW 251
13908: PPUSH
13909: LD_VAR 0 10
13913: PPUSH
13914: LD_INT 2
13916: PPUSH
13917: CALL_OW 273
13921: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13922: LD_VAR 0 11
13926: PPUSH
13927: LD_VAR 0 12
13931: PPUSH
13932: CALL_OW 488
13936: PUSH
13937: LD_VAR 0 11
13941: PPUSH
13942: LD_VAR 0 12
13946: PPUSH
13947: CALL_OW 428
13951: NOT
13952: AND
13953: IFFALSE 13976
// begin ComMoveXY ( tmp , _x , _y ) ;
13955: LD_VAR 0 13
13959: PPUSH
13960: LD_VAR 0 11
13964: PPUSH
13965: LD_VAR 0 12
13969: PPUSH
13970: CALL_OW 111
// break ;
13974: GO 13978
// end ; end ;
13976: GO 13863
13978: POP
13979: POP
// end ; end ;
13980: GO 13305
13982: POP
13983: POP
// end ;
13984: LD_VAR 0 8
13988: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13989: LD_INT 0
13991: PPUSH
// result := true ;
13992: LD_ADDR_VAR 0 3
13996: PUSH
13997: LD_INT 1
13999: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14000: LD_VAR 0 2
14004: PUSH
14005: LD_INT 24
14007: DOUBLE
14008: EQUAL
14009: IFTRUE 14019
14011: LD_INT 33
14013: DOUBLE
14014: EQUAL
14015: IFTRUE 14019
14017: GO 14044
14019: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14020: LD_ADDR_VAR 0 3
14024: PUSH
14025: LD_INT 32
14027: PPUSH
14028: LD_VAR 0 1
14032: PPUSH
14033: CALL_OW 321
14037: PUSH
14038: LD_INT 2
14040: EQUAL
14041: ST_TO_ADDR
14042: GO 14364
14044: LD_INT 20
14046: DOUBLE
14047: EQUAL
14048: IFTRUE 14052
14050: GO 14077
14052: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14053: LD_ADDR_VAR 0 3
14057: PUSH
14058: LD_INT 6
14060: PPUSH
14061: LD_VAR 0 1
14065: PPUSH
14066: CALL_OW 321
14070: PUSH
14071: LD_INT 2
14073: EQUAL
14074: ST_TO_ADDR
14075: GO 14364
14077: LD_INT 22
14079: DOUBLE
14080: EQUAL
14081: IFTRUE 14091
14083: LD_INT 36
14085: DOUBLE
14086: EQUAL
14087: IFTRUE 14091
14089: GO 14116
14091: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14092: LD_ADDR_VAR 0 3
14096: PUSH
14097: LD_INT 15
14099: PPUSH
14100: LD_VAR 0 1
14104: PPUSH
14105: CALL_OW 321
14109: PUSH
14110: LD_INT 2
14112: EQUAL
14113: ST_TO_ADDR
14114: GO 14364
14116: LD_INT 30
14118: DOUBLE
14119: EQUAL
14120: IFTRUE 14124
14122: GO 14149
14124: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14125: LD_ADDR_VAR 0 3
14129: PUSH
14130: LD_INT 20
14132: PPUSH
14133: LD_VAR 0 1
14137: PPUSH
14138: CALL_OW 321
14142: PUSH
14143: LD_INT 2
14145: EQUAL
14146: ST_TO_ADDR
14147: GO 14364
14149: LD_INT 28
14151: DOUBLE
14152: EQUAL
14153: IFTRUE 14163
14155: LD_INT 21
14157: DOUBLE
14158: EQUAL
14159: IFTRUE 14163
14161: GO 14188
14163: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14164: LD_ADDR_VAR 0 3
14168: PUSH
14169: LD_INT 21
14171: PPUSH
14172: LD_VAR 0 1
14176: PPUSH
14177: CALL_OW 321
14181: PUSH
14182: LD_INT 2
14184: EQUAL
14185: ST_TO_ADDR
14186: GO 14364
14188: LD_INT 16
14190: DOUBLE
14191: EQUAL
14192: IFTRUE 14196
14194: GO 14223
14196: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14197: LD_ADDR_VAR 0 3
14201: PUSH
14202: LD_EXP 15
14206: PPUSH
14207: LD_VAR 0 1
14211: PPUSH
14212: CALL_OW 321
14216: PUSH
14217: LD_INT 2
14219: EQUAL
14220: ST_TO_ADDR
14221: GO 14364
14223: LD_INT 19
14225: DOUBLE
14226: EQUAL
14227: IFTRUE 14237
14229: LD_INT 23
14231: DOUBLE
14232: EQUAL
14233: IFTRUE 14237
14235: GO 14264
14237: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14238: LD_ADDR_VAR 0 3
14242: PUSH
14243: LD_EXP 14
14247: PPUSH
14248: LD_VAR 0 1
14252: PPUSH
14253: CALL_OW 321
14257: PUSH
14258: LD_INT 2
14260: EQUAL
14261: ST_TO_ADDR
14262: GO 14364
14264: LD_INT 17
14266: DOUBLE
14267: EQUAL
14268: IFTRUE 14272
14270: GO 14297
14272: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14273: LD_ADDR_VAR 0 3
14277: PUSH
14278: LD_INT 39
14280: PPUSH
14281: LD_VAR 0 1
14285: PPUSH
14286: CALL_OW 321
14290: PUSH
14291: LD_INT 2
14293: EQUAL
14294: ST_TO_ADDR
14295: GO 14364
14297: LD_INT 18
14299: DOUBLE
14300: EQUAL
14301: IFTRUE 14305
14303: GO 14330
14305: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14306: LD_ADDR_VAR 0 3
14310: PUSH
14311: LD_INT 40
14313: PPUSH
14314: LD_VAR 0 1
14318: PPUSH
14319: CALL_OW 321
14323: PUSH
14324: LD_INT 2
14326: EQUAL
14327: ST_TO_ADDR
14328: GO 14364
14330: LD_INT 27
14332: DOUBLE
14333: EQUAL
14334: IFTRUE 14338
14336: GO 14363
14338: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14339: LD_ADDR_VAR 0 3
14343: PUSH
14344: LD_INT 35
14346: PPUSH
14347: LD_VAR 0 1
14351: PPUSH
14352: CALL_OW 321
14356: PUSH
14357: LD_INT 2
14359: EQUAL
14360: ST_TO_ADDR
14361: GO 14364
14363: POP
// end ;
14364: LD_VAR 0 3
14368: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14369: LD_INT 0
14371: PPUSH
14372: PPUSH
14373: PPUSH
14374: PPUSH
14375: PPUSH
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
14381: PPUSH
// result := false ;
14382: LD_ADDR_VAR 0 6
14386: PUSH
14387: LD_INT 0
14389: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14390: LD_VAR 0 1
14394: NOT
14395: PUSH
14396: LD_VAR 0 1
14400: PPUSH
14401: CALL_OW 266
14405: PUSH
14406: LD_INT 0
14408: PUSH
14409: LD_INT 1
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: IN
14416: NOT
14417: OR
14418: PUSH
14419: LD_VAR 0 2
14423: NOT
14424: OR
14425: PUSH
14426: LD_VAR 0 5
14430: PUSH
14431: LD_INT 0
14433: PUSH
14434: LD_INT 1
14436: PUSH
14437: LD_INT 2
14439: PUSH
14440: LD_INT 3
14442: PUSH
14443: LD_INT 4
14445: PUSH
14446: LD_INT 5
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: IN
14457: NOT
14458: OR
14459: PUSH
14460: LD_VAR 0 3
14464: PPUSH
14465: LD_VAR 0 4
14469: PPUSH
14470: CALL_OW 488
14474: NOT
14475: OR
14476: IFFALSE 14480
// exit ;
14478: GO 15216
// side := GetSide ( depot ) ;
14480: LD_ADDR_VAR 0 9
14484: PUSH
14485: LD_VAR 0 1
14489: PPUSH
14490: CALL_OW 255
14494: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14495: LD_VAR 0 9
14499: PPUSH
14500: LD_VAR 0 2
14504: PPUSH
14505: CALL 13989 0 2
14509: NOT
14510: IFFALSE 14514
// exit ;
14512: GO 15216
// pom := GetBase ( depot ) ;
14514: LD_ADDR_VAR 0 10
14518: PUSH
14519: LD_VAR 0 1
14523: PPUSH
14524: CALL_OW 274
14528: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14529: LD_ADDR_VAR 0 11
14533: PUSH
14534: LD_VAR 0 2
14538: PPUSH
14539: LD_VAR 0 1
14543: PPUSH
14544: CALL_OW 248
14548: PPUSH
14549: CALL_OW 450
14553: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14554: LD_VAR 0 10
14558: PPUSH
14559: LD_INT 1
14561: PPUSH
14562: CALL_OW 275
14566: PUSH
14567: LD_VAR 0 11
14571: PUSH
14572: LD_INT 1
14574: ARRAY
14575: GREATEREQUAL
14576: PUSH
14577: LD_VAR 0 10
14581: PPUSH
14582: LD_INT 2
14584: PPUSH
14585: CALL_OW 275
14589: PUSH
14590: LD_VAR 0 11
14594: PUSH
14595: LD_INT 2
14597: ARRAY
14598: GREATEREQUAL
14599: AND
14600: PUSH
14601: LD_VAR 0 10
14605: PPUSH
14606: LD_INT 3
14608: PPUSH
14609: CALL_OW 275
14613: PUSH
14614: LD_VAR 0 11
14618: PUSH
14619: LD_INT 3
14621: ARRAY
14622: GREATEREQUAL
14623: AND
14624: NOT
14625: IFFALSE 14629
// exit ;
14627: GO 15216
// if GetBType ( depot ) = b_depot then
14629: LD_VAR 0 1
14633: PPUSH
14634: CALL_OW 266
14638: PUSH
14639: LD_INT 0
14641: EQUAL
14642: IFFALSE 14654
// dist := 28 else
14644: LD_ADDR_VAR 0 14
14648: PUSH
14649: LD_INT 28
14651: ST_TO_ADDR
14652: GO 14662
// dist := 36 ;
14654: LD_ADDR_VAR 0 14
14658: PUSH
14659: LD_INT 36
14661: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14662: LD_VAR 0 1
14666: PPUSH
14667: LD_VAR 0 3
14671: PPUSH
14672: LD_VAR 0 4
14676: PPUSH
14677: CALL_OW 297
14681: PUSH
14682: LD_VAR 0 14
14686: GREATER
14687: IFFALSE 14691
// exit ;
14689: GO 15216
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14691: LD_ADDR_VAR 0 12
14695: PUSH
14696: LD_VAR 0 2
14700: PPUSH
14701: LD_VAR 0 3
14705: PPUSH
14706: LD_VAR 0 4
14710: PPUSH
14711: LD_VAR 0 5
14715: PPUSH
14716: LD_VAR 0 1
14720: PPUSH
14721: CALL_OW 248
14725: PPUSH
14726: LD_INT 0
14728: PPUSH
14729: CALL 15221 0 6
14733: ST_TO_ADDR
// if not hexes then
14734: LD_VAR 0 12
14738: NOT
14739: IFFALSE 14743
// exit ;
14741: GO 15216
// hex := GetHexInfo ( x , y ) ;
14743: LD_ADDR_VAR 0 15
14747: PUSH
14748: LD_VAR 0 3
14752: PPUSH
14753: LD_VAR 0 4
14757: PPUSH
14758: CALL_OW 546
14762: ST_TO_ADDR
// if hex [ 1 ] then
14763: LD_VAR 0 15
14767: PUSH
14768: LD_INT 1
14770: ARRAY
14771: IFFALSE 14775
// exit ;
14773: GO 15216
// height := hex [ 2 ] ;
14775: LD_ADDR_VAR 0 13
14779: PUSH
14780: LD_VAR 0 15
14784: PUSH
14785: LD_INT 2
14787: ARRAY
14788: ST_TO_ADDR
// for i = 1 to hexes do
14789: LD_ADDR_VAR 0 7
14793: PUSH
14794: DOUBLE
14795: LD_INT 1
14797: DEC
14798: ST_TO_ADDR
14799: LD_VAR 0 12
14803: PUSH
14804: FOR_TO
14805: IFFALSE 15135
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14807: LD_VAR 0 12
14811: PUSH
14812: LD_VAR 0 7
14816: ARRAY
14817: PUSH
14818: LD_INT 1
14820: ARRAY
14821: PPUSH
14822: LD_VAR 0 12
14826: PUSH
14827: LD_VAR 0 7
14831: ARRAY
14832: PUSH
14833: LD_INT 2
14835: ARRAY
14836: PPUSH
14837: CALL_OW 488
14841: NOT
14842: PUSH
14843: LD_VAR 0 12
14847: PUSH
14848: LD_VAR 0 7
14852: ARRAY
14853: PUSH
14854: LD_INT 1
14856: ARRAY
14857: PPUSH
14858: LD_VAR 0 12
14862: PUSH
14863: LD_VAR 0 7
14867: ARRAY
14868: PUSH
14869: LD_INT 2
14871: ARRAY
14872: PPUSH
14873: CALL_OW 428
14877: PUSH
14878: LD_INT 0
14880: GREATER
14881: OR
14882: PUSH
14883: LD_VAR 0 12
14887: PUSH
14888: LD_VAR 0 7
14892: ARRAY
14893: PUSH
14894: LD_INT 1
14896: ARRAY
14897: PPUSH
14898: LD_VAR 0 12
14902: PUSH
14903: LD_VAR 0 7
14907: ARRAY
14908: PUSH
14909: LD_INT 2
14911: ARRAY
14912: PPUSH
14913: CALL_OW 351
14917: OR
14918: IFFALSE 14924
// exit ;
14920: POP
14921: POP
14922: GO 15216
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14924: LD_ADDR_VAR 0 8
14928: PUSH
14929: LD_VAR 0 12
14933: PUSH
14934: LD_VAR 0 7
14938: ARRAY
14939: PUSH
14940: LD_INT 1
14942: ARRAY
14943: PPUSH
14944: LD_VAR 0 12
14948: PUSH
14949: LD_VAR 0 7
14953: ARRAY
14954: PUSH
14955: LD_INT 2
14957: ARRAY
14958: PPUSH
14959: CALL_OW 546
14963: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14964: LD_VAR 0 8
14968: PUSH
14969: LD_INT 1
14971: ARRAY
14972: PUSH
14973: LD_VAR 0 8
14977: PUSH
14978: LD_INT 2
14980: ARRAY
14981: PUSH
14982: LD_VAR 0 13
14986: PUSH
14987: LD_INT 2
14989: PLUS
14990: GREATER
14991: OR
14992: PUSH
14993: LD_VAR 0 8
14997: PUSH
14998: LD_INT 2
15000: ARRAY
15001: PUSH
15002: LD_VAR 0 13
15006: PUSH
15007: LD_INT 2
15009: MINUS
15010: LESS
15011: OR
15012: PUSH
15013: LD_VAR 0 8
15017: PUSH
15018: LD_INT 3
15020: ARRAY
15021: PUSH
15022: LD_INT 0
15024: PUSH
15025: LD_INT 8
15027: PUSH
15028: LD_INT 9
15030: PUSH
15031: LD_INT 10
15033: PUSH
15034: LD_INT 11
15036: PUSH
15037: LD_INT 12
15039: PUSH
15040: LD_INT 13
15042: PUSH
15043: LD_INT 16
15045: PUSH
15046: LD_INT 17
15048: PUSH
15049: LD_INT 18
15051: PUSH
15052: LD_INT 19
15054: PUSH
15055: LD_INT 20
15057: PUSH
15058: LD_INT 21
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: IN
15076: NOT
15077: OR
15078: PUSH
15079: LD_VAR 0 8
15083: PUSH
15084: LD_INT 5
15086: ARRAY
15087: NOT
15088: OR
15089: PUSH
15090: LD_VAR 0 8
15094: PUSH
15095: LD_INT 6
15097: ARRAY
15098: PUSH
15099: LD_INT 1
15101: PUSH
15102: LD_INT 2
15104: PUSH
15105: LD_INT 7
15107: PUSH
15108: LD_INT 9
15110: PUSH
15111: LD_INT 10
15113: PUSH
15114: LD_INT 11
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: IN
15125: NOT
15126: OR
15127: IFFALSE 15133
// exit ;
15129: POP
15130: POP
15131: GO 15216
// end ;
15133: GO 14804
15135: POP
15136: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15137: LD_VAR 0 9
15141: PPUSH
15142: LD_VAR 0 3
15146: PPUSH
15147: LD_VAR 0 4
15151: PPUSH
15152: LD_INT 20
15154: PPUSH
15155: CALL 7161 0 4
15159: PUSH
15160: LD_INT 4
15162: ARRAY
15163: IFFALSE 15167
// exit ;
15165: GO 15216
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15167: LD_VAR 0 2
15171: PUSH
15172: LD_INT 29
15174: PUSH
15175: LD_INT 30
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: IN
15182: PUSH
15183: LD_VAR 0 3
15187: PPUSH
15188: LD_VAR 0 4
15192: PPUSH
15193: LD_VAR 0 9
15197: PPUSH
15198: CALL_OW 440
15202: NOT
15203: AND
15204: IFFALSE 15208
// exit ;
15206: GO 15216
// result := true ;
15208: LD_ADDR_VAR 0 6
15212: PUSH
15213: LD_INT 1
15215: ST_TO_ADDR
// end ;
15216: LD_VAR 0 6
15220: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15221: LD_INT 0
15223: PPUSH
15224: PPUSH
15225: PPUSH
15226: PPUSH
15227: PPUSH
15228: PPUSH
15229: PPUSH
15230: PPUSH
15231: PPUSH
15232: PPUSH
15233: PPUSH
15234: PPUSH
15235: PPUSH
15236: PPUSH
15237: PPUSH
15238: PPUSH
15239: PPUSH
15240: PPUSH
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
15245: PPUSH
15246: PPUSH
15247: PPUSH
15248: PPUSH
15249: PPUSH
15250: PPUSH
15251: PPUSH
15252: PPUSH
15253: PPUSH
15254: PPUSH
15255: PPUSH
15256: PPUSH
15257: PPUSH
15258: PPUSH
15259: PPUSH
15260: PPUSH
15261: PPUSH
15262: PPUSH
15263: PPUSH
15264: PPUSH
15265: PPUSH
15266: PPUSH
15267: PPUSH
15268: PPUSH
15269: PPUSH
15270: PPUSH
15271: PPUSH
15272: PPUSH
15273: PPUSH
15274: PPUSH
15275: PPUSH
15276: PPUSH
15277: PPUSH
15278: PPUSH
15279: PPUSH
15280: PPUSH
// result = [ ] ;
15281: LD_ADDR_VAR 0 7
15285: PUSH
15286: EMPTY
15287: ST_TO_ADDR
// temp_list = [ ] ;
15288: LD_ADDR_VAR 0 9
15292: PUSH
15293: EMPTY
15294: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15295: LD_VAR 0 4
15299: PUSH
15300: LD_INT 0
15302: PUSH
15303: LD_INT 1
15305: PUSH
15306: LD_INT 2
15308: PUSH
15309: LD_INT 3
15311: PUSH
15312: LD_INT 4
15314: PUSH
15315: LD_INT 5
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: IN
15326: NOT
15327: PUSH
15328: LD_VAR 0 1
15332: PUSH
15333: LD_INT 0
15335: PUSH
15336: LD_INT 1
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: IN
15343: PUSH
15344: LD_VAR 0 5
15348: PUSH
15349: LD_INT 1
15351: PUSH
15352: LD_INT 2
15354: PUSH
15355: LD_INT 3
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: IN
15363: NOT
15364: AND
15365: OR
15366: IFFALSE 15370
// exit ;
15368: GO 33761
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15370: LD_VAR 0 1
15374: PUSH
15375: LD_INT 6
15377: PUSH
15378: LD_INT 7
15380: PUSH
15381: LD_INT 8
15383: PUSH
15384: LD_INT 13
15386: PUSH
15387: LD_INT 12
15389: PUSH
15390: LD_INT 15
15392: PUSH
15393: LD_INT 11
15395: PUSH
15396: LD_INT 14
15398: PUSH
15399: LD_INT 10
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: IN
15413: IFFALSE 15423
// btype = b_lab ;
15415: LD_ADDR_VAR 0 1
15419: PUSH
15420: LD_INT 6
15422: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15423: LD_VAR 0 6
15427: PUSH
15428: LD_INT 0
15430: PUSH
15431: LD_INT 1
15433: PUSH
15434: LD_INT 2
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: LIST
15441: IN
15442: NOT
15443: PUSH
15444: LD_VAR 0 1
15448: PUSH
15449: LD_INT 0
15451: PUSH
15452: LD_INT 1
15454: PUSH
15455: LD_INT 2
15457: PUSH
15458: LD_INT 3
15460: PUSH
15461: LD_INT 6
15463: PUSH
15464: LD_INT 36
15466: PUSH
15467: LD_INT 4
15469: PUSH
15470: LD_INT 5
15472: PUSH
15473: LD_INT 31
15475: PUSH
15476: LD_INT 32
15478: PUSH
15479: LD_INT 33
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: IN
15495: NOT
15496: PUSH
15497: LD_VAR 0 6
15501: PUSH
15502: LD_INT 1
15504: EQUAL
15505: AND
15506: OR
15507: PUSH
15508: LD_VAR 0 1
15512: PUSH
15513: LD_INT 2
15515: PUSH
15516: LD_INT 3
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: IN
15523: NOT
15524: PUSH
15525: LD_VAR 0 6
15529: PUSH
15530: LD_INT 2
15532: EQUAL
15533: AND
15534: OR
15535: IFFALSE 15545
// mode = 0 ;
15537: LD_ADDR_VAR 0 6
15541: PUSH
15542: LD_INT 0
15544: ST_TO_ADDR
// case mode of 0 :
15545: LD_VAR 0 6
15549: PUSH
15550: LD_INT 0
15552: DOUBLE
15553: EQUAL
15554: IFTRUE 15558
15556: GO 27011
15558: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15559: LD_ADDR_VAR 0 11
15563: PUSH
15564: LD_INT 0
15566: PUSH
15567: LD_INT 0
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: LD_INT 0
15576: PUSH
15577: LD_INT 1
15579: NEG
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: PUSH
15585: LD_INT 1
15587: PUSH
15588: LD_INT 0
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: PUSH
15595: LD_INT 1
15597: PUSH
15598: LD_INT 1
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 0
15607: PUSH
15608: LD_INT 1
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: LD_INT 1
15617: NEG
15618: PUSH
15619: LD_INT 0
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 1
15628: NEG
15629: PUSH
15630: LD_INT 1
15632: NEG
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 1
15640: NEG
15641: PUSH
15642: LD_INT 2
15644: NEG
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: LD_INT 0
15652: PUSH
15653: LD_INT 2
15655: NEG
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 1
15663: PUSH
15664: LD_INT 1
15666: NEG
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: LD_INT 1
15674: PUSH
15675: LD_INT 2
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 0
15684: PUSH
15685: LD_INT 2
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: LD_INT 1
15694: NEG
15695: PUSH
15696: LD_INT 1
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PUSH
15703: LD_INT 1
15705: PUSH
15706: LD_INT 3
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PUSH
15713: LD_INT 0
15715: PUSH
15716: LD_INT 3
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: LD_INT 1
15725: NEG
15726: PUSH
15727: LD_INT 2
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15752: LD_ADDR_VAR 0 12
15756: PUSH
15757: LD_INT 0
15759: PUSH
15760: LD_INT 0
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PUSH
15767: LD_INT 0
15769: PUSH
15770: LD_INT 1
15772: NEG
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 1
15780: PUSH
15781: LD_INT 0
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 1
15790: PUSH
15791: LD_INT 1
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PUSH
15798: LD_INT 0
15800: PUSH
15801: LD_INT 1
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PUSH
15808: LD_INT 1
15810: NEG
15811: PUSH
15812: LD_INT 0
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 1
15821: NEG
15822: PUSH
15823: LD_INT 1
15825: NEG
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PUSH
15831: LD_INT 1
15833: PUSH
15834: LD_INT 1
15836: NEG
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: LD_INT 2
15844: PUSH
15845: LD_INT 0
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: LD_INT 2
15854: PUSH
15855: LD_INT 1
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: LD_INT 1
15864: NEG
15865: PUSH
15866: LD_INT 1
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: LD_INT 2
15875: NEG
15876: PUSH
15877: LD_INT 0
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 2
15886: NEG
15887: PUSH
15888: LD_INT 1
15890: NEG
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 2
15898: NEG
15899: PUSH
15900: LD_INT 1
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: LD_INT 3
15909: NEG
15910: PUSH
15911: LD_INT 0
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 3
15920: NEG
15921: PUSH
15922: LD_INT 1
15924: NEG
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15948: LD_ADDR_VAR 0 13
15952: PUSH
15953: LD_INT 0
15955: PUSH
15956: LD_INT 0
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: LD_INT 0
15965: PUSH
15966: LD_INT 1
15968: NEG
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 1
15976: PUSH
15977: LD_INT 0
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 1
15986: PUSH
15987: LD_INT 1
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 0
15996: PUSH
15997: LD_INT 1
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 1
16006: NEG
16007: PUSH
16008: LD_INT 0
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 1
16017: NEG
16018: PUSH
16019: LD_INT 1
16021: NEG
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PUSH
16027: LD_INT 1
16029: NEG
16030: PUSH
16031: LD_INT 2
16033: NEG
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: LD_INT 2
16041: PUSH
16042: LD_INT 1
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: PUSH
16049: LD_INT 2
16051: PUSH
16052: LD_INT 2
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: LD_INT 1
16061: PUSH
16062: LD_INT 2
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: LD_INT 2
16071: NEG
16072: PUSH
16073: LD_INT 1
16075: NEG
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: PUSH
16081: LD_INT 2
16083: NEG
16084: PUSH
16085: LD_INT 2
16087: NEG
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 2
16095: NEG
16096: PUSH
16097: LD_INT 3
16099: NEG
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: PUSH
16105: LD_INT 3
16107: NEG
16108: PUSH
16109: LD_INT 2
16111: NEG
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: LD_INT 3
16119: NEG
16120: PUSH
16121: LD_INT 3
16123: NEG
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16147: LD_ADDR_VAR 0 14
16151: PUSH
16152: LD_INT 0
16154: PUSH
16155: LD_INT 0
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: LD_INT 0
16164: PUSH
16165: LD_INT 1
16167: NEG
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: LD_INT 1
16175: PUSH
16176: LD_INT 0
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: LD_INT 1
16185: PUSH
16186: LD_INT 1
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PUSH
16193: LD_INT 0
16195: PUSH
16196: LD_INT 1
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: LD_INT 1
16205: NEG
16206: PUSH
16207: LD_INT 0
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: LD_INT 1
16216: NEG
16217: PUSH
16218: LD_INT 1
16220: NEG
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 1
16228: NEG
16229: PUSH
16230: LD_INT 2
16232: NEG
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: LD_INT 0
16240: PUSH
16241: LD_INT 2
16243: NEG
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 1
16251: PUSH
16252: LD_INT 1
16254: NEG
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: LD_INT 2
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 0
16272: PUSH
16273: LD_INT 2
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 1
16282: NEG
16283: PUSH
16284: LD_INT 1
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 1
16293: NEG
16294: PUSH
16295: LD_INT 3
16297: NEG
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: LD_INT 0
16305: PUSH
16306: LD_INT 3
16308: NEG
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 1
16316: PUSH
16317: LD_INT 2
16319: NEG
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16343: LD_ADDR_VAR 0 15
16347: PUSH
16348: LD_INT 0
16350: PUSH
16351: LD_INT 0
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: LD_INT 0
16360: PUSH
16361: LD_INT 1
16363: NEG
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: LD_INT 1
16371: PUSH
16372: LD_INT 0
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 1
16381: PUSH
16382: LD_INT 1
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 0
16391: PUSH
16392: LD_INT 1
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 1
16401: NEG
16402: PUSH
16403: LD_INT 0
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: LD_INT 1
16412: NEG
16413: PUSH
16414: LD_INT 1
16416: NEG
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 1
16424: PUSH
16425: LD_INT 1
16427: NEG
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: LD_INT 2
16435: PUSH
16436: LD_INT 0
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 2
16445: PUSH
16446: LD_INT 1
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 1
16455: NEG
16456: PUSH
16457: LD_INT 1
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 2
16466: NEG
16467: PUSH
16468: LD_INT 0
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 2
16477: NEG
16478: PUSH
16479: LD_INT 1
16481: NEG
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 2
16489: PUSH
16490: LD_INT 1
16492: NEG
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 3
16500: PUSH
16501: LD_INT 0
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 3
16510: PUSH
16511: LD_INT 1
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16536: LD_ADDR_VAR 0 16
16540: PUSH
16541: LD_INT 0
16543: PUSH
16544: LD_INT 0
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: LD_INT 0
16553: PUSH
16554: LD_INT 1
16556: NEG
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: LD_INT 1
16564: PUSH
16565: LD_INT 0
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: PUSH
16572: LD_INT 1
16574: PUSH
16575: LD_INT 1
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: PUSH
16582: LD_INT 0
16584: PUSH
16585: LD_INT 1
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: LD_INT 1
16594: NEG
16595: PUSH
16596: LD_INT 0
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: LD_INT 1
16605: NEG
16606: PUSH
16607: LD_INT 1
16609: NEG
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 1
16617: NEG
16618: PUSH
16619: LD_INT 2
16621: NEG
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 2
16629: PUSH
16630: LD_INT 1
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 2
16639: PUSH
16640: LD_INT 2
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 1
16649: PUSH
16650: LD_INT 2
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 2
16659: NEG
16660: PUSH
16661: LD_INT 1
16663: NEG
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 2
16671: NEG
16672: PUSH
16673: LD_INT 2
16675: NEG
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PUSH
16681: LD_INT 3
16683: PUSH
16684: LD_INT 2
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 3
16693: PUSH
16694: LD_INT 3
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 2
16703: PUSH
16704: LD_INT 3
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16729: LD_ADDR_VAR 0 17
16733: PUSH
16734: LD_INT 0
16736: PUSH
16737: LD_INT 0
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PUSH
16744: LD_INT 0
16746: PUSH
16747: LD_INT 1
16749: NEG
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 1
16757: PUSH
16758: LD_INT 0
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 1
16767: PUSH
16768: LD_INT 1
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: LD_INT 0
16777: PUSH
16778: LD_INT 1
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 1
16787: NEG
16788: PUSH
16789: LD_INT 0
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 1
16798: NEG
16799: PUSH
16800: LD_INT 1
16802: NEG
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: LD_INT 1
16810: NEG
16811: PUSH
16812: LD_INT 2
16814: NEG
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 0
16822: PUSH
16823: LD_INT 2
16825: NEG
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 1
16833: PUSH
16834: LD_INT 1
16836: NEG
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 2
16844: PUSH
16845: LD_INT 0
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 2
16854: PUSH
16855: LD_INT 1
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 2
16864: PUSH
16865: LD_INT 2
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: LD_INT 1
16874: PUSH
16875: LD_INT 2
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: LD_INT 0
16884: PUSH
16885: LD_INT 2
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 1
16894: NEG
16895: PUSH
16896: LD_INT 1
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 2
16905: NEG
16906: PUSH
16907: LD_INT 0
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 2
16916: NEG
16917: PUSH
16918: LD_INT 1
16920: NEG
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PUSH
16926: LD_INT 2
16928: NEG
16929: PUSH
16930: LD_INT 2
16932: NEG
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16959: LD_ADDR_VAR 0 18
16963: PUSH
16964: LD_INT 0
16966: PUSH
16967: LD_INT 0
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 0
16976: PUSH
16977: LD_INT 1
16979: NEG
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: LD_INT 1
16987: PUSH
16988: LD_INT 0
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: PUSH
16995: LD_INT 1
16997: PUSH
16998: LD_INT 1
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PUSH
17005: LD_INT 0
17007: PUSH
17008: LD_INT 1
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: LD_INT 1
17017: NEG
17018: PUSH
17019: LD_INT 0
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 1
17028: NEG
17029: PUSH
17030: LD_INT 1
17032: NEG
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 1
17040: NEG
17041: PUSH
17042: LD_INT 2
17044: NEG
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 0
17052: PUSH
17053: LD_INT 2
17055: NEG
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: LD_INT 1
17063: PUSH
17064: LD_INT 1
17066: NEG
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 2
17074: PUSH
17075: LD_INT 0
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: LD_INT 2
17084: PUSH
17085: LD_INT 1
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PUSH
17092: LD_INT 2
17094: PUSH
17095: LD_INT 2
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 1
17104: PUSH
17105: LD_INT 2
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 0
17114: PUSH
17115: LD_INT 2
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 1
17124: NEG
17125: PUSH
17126: LD_INT 1
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 2
17135: NEG
17136: PUSH
17137: LD_INT 0
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 2
17146: NEG
17147: PUSH
17148: LD_INT 1
17150: NEG
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 2
17158: NEG
17159: PUSH
17160: LD_INT 2
17162: NEG
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17189: LD_ADDR_VAR 0 19
17193: PUSH
17194: LD_INT 0
17196: PUSH
17197: LD_INT 0
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 0
17206: PUSH
17207: LD_INT 1
17209: NEG
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 1
17217: PUSH
17218: LD_INT 0
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: LD_INT 1
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 0
17237: PUSH
17238: LD_INT 1
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 1
17247: NEG
17248: PUSH
17249: LD_INT 0
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 1
17258: NEG
17259: PUSH
17260: LD_INT 1
17262: NEG
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 1
17270: NEG
17271: PUSH
17272: LD_INT 2
17274: NEG
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 0
17282: PUSH
17283: LD_INT 2
17285: NEG
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 1
17293: PUSH
17294: LD_INT 1
17296: NEG
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 2
17304: PUSH
17305: LD_INT 0
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 2
17314: PUSH
17315: LD_INT 1
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: LD_INT 2
17324: PUSH
17325: LD_INT 2
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 1
17334: PUSH
17335: LD_INT 2
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 0
17344: PUSH
17345: LD_INT 2
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 1
17354: NEG
17355: PUSH
17356: LD_INT 1
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 2
17365: NEG
17366: PUSH
17367: LD_INT 0
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: LD_INT 2
17376: NEG
17377: PUSH
17378: LD_INT 1
17380: NEG
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 2
17388: NEG
17389: PUSH
17390: LD_INT 2
17392: NEG
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17419: LD_ADDR_VAR 0 20
17423: PUSH
17424: LD_INT 0
17426: PUSH
17427: LD_INT 0
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: LD_INT 0
17436: PUSH
17437: LD_INT 1
17439: NEG
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 1
17447: PUSH
17448: LD_INT 0
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: LD_INT 1
17457: PUSH
17458: LD_INT 1
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 0
17467: PUSH
17468: LD_INT 1
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 1
17477: NEG
17478: PUSH
17479: LD_INT 0
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 1
17488: NEG
17489: PUSH
17490: LD_INT 1
17492: NEG
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 1
17500: NEG
17501: PUSH
17502: LD_INT 2
17504: NEG
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 0
17512: PUSH
17513: LD_INT 2
17515: NEG
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 1
17523: PUSH
17524: LD_INT 1
17526: NEG
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 2
17534: PUSH
17535: LD_INT 0
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 2
17544: PUSH
17545: LD_INT 1
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 2
17554: PUSH
17555: LD_INT 2
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 1
17564: PUSH
17565: LD_INT 2
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 0
17574: PUSH
17575: LD_INT 2
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 1
17584: NEG
17585: PUSH
17586: LD_INT 1
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 2
17595: NEG
17596: PUSH
17597: LD_INT 0
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 2
17606: NEG
17607: PUSH
17608: LD_INT 1
17610: NEG
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 2
17618: NEG
17619: PUSH
17620: LD_INT 2
17622: NEG
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17649: LD_ADDR_VAR 0 21
17653: PUSH
17654: LD_INT 0
17656: PUSH
17657: LD_INT 0
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 0
17666: PUSH
17667: LD_INT 1
17669: NEG
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PUSH
17675: LD_INT 1
17677: PUSH
17678: LD_INT 0
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 1
17687: PUSH
17688: LD_INT 1
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 0
17697: PUSH
17698: LD_INT 1
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 1
17707: NEG
17708: PUSH
17709: LD_INT 0
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 1
17718: NEG
17719: PUSH
17720: LD_INT 1
17722: NEG
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 1
17730: NEG
17731: PUSH
17732: LD_INT 2
17734: NEG
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 0
17742: PUSH
17743: LD_INT 2
17745: NEG
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 1
17753: PUSH
17754: LD_INT 1
17756: NEG
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 2
17764: PUSH
17765: LD_INT 0
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 2
17774: PUSH
17775: LD_INT 1
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: LD_INT 2
17784: PUSH
17785: LD_INT 2
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 1
17794: PUSH
17795: LD_INT 2
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 0
17804: PUSH
17805: LD_INT 2
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 1
17814: NEG
17815: PUSH
17816: LD_INT 1
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 2
17825: NEG
17826: PUSH
17827: LD_INT 0
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 2
17836: NEG
17837: PUSH
17838: LD_INT 1
17840: NEG
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 2
17848: NEG
17849: PUSH
17850: LD_INT 2
17852: NEG
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17879: LD_ADDR_VAR 0 22
17883: PUSH
17884: LD_INT 0
17886: PUSH
17887: LD_INT 0
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 0
17896: PUSH
17897: LD_INT 1
17899: NEG
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 1
17907: PUSH
17908: LD_INT 0
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 1
17917: PUSH
17918: LD_INT 1
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 0
17927: PUSH
17928: LD_INT 1
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 1
17937: NEG
17938: PUSH
17939: LD_INT 0
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 1
17948: NEG
17949: PUSH
17950: LD_INT 1
17952: NEG
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 1
17960: NEG
17961: PUSH
17962: LD_INT 2
17964: NEG
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 0
17972: PUSH
17973: LD_INT 2
17975: NEG
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 1
17983: PUSH
17984: LD_INT 1
17986: NEG
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 2
17994: PUSH
17995: LD_INT 0
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 2
18004: PUSH
18005: LD_INT 1
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 2
18014: PUSH
18015: LD_INT 2
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 1
18024: PUSH
18025: LD_INT 2
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: LD_INT 0
18034: PUSH
18035: LD_INT 2
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PUSH
18042: LD_INT 1
18044: NEG
18045: PUSH
18046: LD_INT 1
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 2
18055: NEG
18056: PUSH
18057: LD_INT 0
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 2
18066: NEG
18067: PUSH
18068: LD_INT 1
18070: NEG
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: LD_INT 2
18078: NEG
18079: PUSH
18080: LD_INT 2
18082: NEG
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18109: LD_ADDR_VAR 0 23
18113: PUSH
18114: LD_INT 0
18116: PUSH
18117: LD_INT 0
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 0
18126: PUSH
18127: LD_INT 1
18129: NEG
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 1
18137: PUSH
18138: LD_INT 0
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 1
18147: PUSH
18148: LD_INT 1
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 0
18157: PUSH
18158: LD_INT 1
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 1
18167: NEG
18168: PUSH
18169: LD_INT 0
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 1
18178: NEG
18179: PUSH
18180: LD_INT 1
18182: NEG
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 1
18190: NEG
18191: PUSH
18192: LD_INT 2
18194: NEG
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 0
18202: PUSH
18203: LD_INT 2
18205: NEG
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 1
18213: PUSH
18214: LD_INT 1
18216: NEG
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 2
18224: PUSH
18225: LD_INT 0
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 2
18234: PUSH
18235: LD_INT 1
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 2
18244: PUSH
18245: LD_INT 2
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 1
18254: PUSH
18255: LD_INT 2
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 0
18264: PUSH
18265: LD_INT 2
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 1
18274: NEG
18275: PUSH
18276: LD_INT 1
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 2
18285: NEG
18286: PUSH
18287: LD_INT 0
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 2
18296: NEG
18297: PUSH
18298: LD_INT 1
18300: NEG
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 2
18308: NEG
18309: PUSH
18310: LD_INT 2
18312: NEG
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 2
18320: NEG
18321: PUSH
18322: LD_INT 3
18324: NEG
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 1
18332: NEG
18333: PUSH
18334: LD_INT 3
18336: NEG
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 1
18344: PUSH
18345: LD_INT 2
18347: NEG
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 2
18355: PUSH
18356: LD_INT 1
18358: NEG
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18389: LD_ADDR_VAR 0 24
18393: PUSH
18394: LD_INT 0
18396: PUSH
18397: LD_INT 0
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 0
18406: PUSH
18407: LD_INT 1
18409: NEG
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: LD_INT 0
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: LD_INT 1
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 0
18437: PUSH
18438: LD_INT 1
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 1
18447: NEG
18448: PUSH
18449: LD_INT 0
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 1
18458: NEG
18459: PUSH
18460: LD_INT 1
18462: NEG
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 1
18470: NEG
18471: PUSH
18472: LD_INT 2
18474: NEG
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 0
18482: PUSH
18483: LD_INT 2
18485: NEG
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: LD_INT 1
18496: NEG
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 2
18504: PUSH
18505: LD_INT 0
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 2
18514: PUSH
18515: LD_INT 1
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 2
18524: PUSH
18525: LD_INT 2
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 1
18534: PUSH
18535: LD_INT 2
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 0
18544: PUSH
18545: LD_INT 2
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 1
18554: NEG
18555: PUSH
18556: LD_INT 1
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: LD_INT 2
18565: NEG
18566: PUSH
18567: LD_INT 0
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: LD_INT 2
18576: NEG
18577: PUSH
18578: LD_INT 1
18580: NEG
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 2
18588: NEG
18589: PUSH
18590: LD_INT 2
18592: NEG
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: LD_INT 2
18603: NEG
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 2
18611: PUSH
18612: LD_INT 1
18614: NEG
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 3
18622: PUSH
18623: LD_INT 1
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 3
18632: PUSH
18633: LD_INT 2
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18665: LD_ADDR_VAR 0 25
18669: PUSH
18670: LD_INT 0
18672: PUSH
18673: LD_INT 0
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 0
18682: PUSH
18683: LD_INT 1
18685: NEG
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 1
18693: PUSH
18694: LD_INT 0
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 1
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 0
18713: PUSH
18714: LD_INT 1
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 1
18723: NEG
18724: PUSH
18725: LD_INT 0
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 1
18734: NEG
18735: PUSH
18736: LD_INT 1
18738: NEG
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 1
18746: NEG
18747: PUSH
18748: LD_INT 2
18750: NEG
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 0
18758: PUSH
18759: LD_INT 2
18761: NEG
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: LD_INT 1
18772: NEG
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 2
18780: PUSH
18781: LD_INT 0
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 2
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 2
18800: PUSH
18801: LD_INT 2
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 1
18810: PUSH
18811: LD_INT 2
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 0
18820: PUSH
18821: LD_INT 2
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 1
18830: NEG
18831: PUSH
18832: LD_INT 1
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 2
18841: NEG
18842: PUSH
18843: LD_INT 0
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 2
18852: NEG
18853: PUSH
18854: LD_INT 1
18856: NEG
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 2
18864: NEG
18865: PUSH
18866: LD_INT 2
18868: NEG
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 3
18876: PUSH
18877: LD_INT 1
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 3
18886: PUSH
18887: LD_INT 2
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 2
18896: PUSH
18897: LD_INT 3
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: LD_INT 3
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18939: LD_ADDR_VAR 0 26
18943: PUSH
18944: LD_INT 0
18946: PUSH
18947: LD_INT 0
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 0
18956: PUSH
18957: LD_INT 1
18959: NEG
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 1
18967: PUSH
18968: LD_INT 0
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 1
18977: PUSH
18978: LD_INT 1
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 0
18987: PUSH
18988: LD_INT 1
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 1
18997: NEG
18998: PUSH
18999: LD_INT 0
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 1
19008: NEG
19009: PUSH
19010: LD_INT 1
19012: NEG
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 1
19020: NEG
19021: PUSH
19022: LD_INT 2
19024: NEG
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 0
19032: PUSH
19033: LD_INT 2
19035: NEG
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 1
19043: PUSH
19044: LD_INT 1
19046: NEG
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 2
19054: PUSH
19055: LD_INT 0
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 2
19064: PUSH
19065: LD_INT 1
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: LD_INT 2
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 1
19084: PUSH
19085: LD_INT 2
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 0
19094: PUSH
19095: LD_INT 2
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 1
19104: NEG
19105: PUSH
19106: LD_INT 1
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 2
19115: NEG
19116: PUSH
19117: LD_INT 0
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 2
19126: NEG
19127: PUSH
19128: LD_INT 1
19130: NEG
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 2
19138: NEG
19139: PUSH
19140: LD_INT 2
19142: NEG
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 2
19150: PUSH
19151: LD_INT 3
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 1
19160: PUSH
19161: LD_INT 3
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 1
19170: NEG
19171: PUSH
19172: LD_INT 2
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 2
19181: NEG
19182: PUSH
19183: LD_INT 1
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19215: LD_ADDR_VAR 0 27
19219: PUSH
19220: LD_INT 0
19222: PUSH
19223: LD_INT 0
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 0
19232: PUSH
19233: LD_INT 1
19235: NEG
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: LD_INT 0
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 0
19263: PUSH
19264: LD_INT 1
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 1
19273: NEG
19274: PUSH
19275: LD_INT 0
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 1
19284: NEG
19285: PUSH
19286: LD_INT 1
19288: NEG
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 1
19296: NEG
19297: PUSH
19298: LD_INT 2
19300: NEG
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 0
19308: PUSH
19309: LD_INT 2
19311: NEG
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 1
19319: PUSH
19320: LD_INT 1
19322: NEG
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 2
19330: PUSH
19331: LD_INT 0
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: LD_INT 1
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 2
19350: PUSH
19351: LD_INT 2
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 1
19360: PUSH
19361: LD_INT 2
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 0
19370: PUSH
19371: LD_INT 2
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 1
19380: NEG
19381: PUSH
19382: LD_INT 1
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 2
19391: NEG
19392: PUSH
19393: LD_INT 0
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 2
19402: NEG
19403: PUSH
19404: LD_INT 1
19406: NEG
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 2
19414: NEG
19415: PUSH
19416: LD_INT 2
19418: NEG
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: NEG
19427: PUSH
19428: LD_INT 2
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 2
19437: NEG
19438: PUSH
19439: LD_INT 1
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 3
19448: NEG
19449: PUSH
19450: LD_INT 1
19452: NEG
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 3
19460: NEG
19461: PUSH
19462: LD_INT 2
19464: NEG
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19495: LD_ADDR_VAR 0 28
19499: PUSH
19500: LD_INT 0
19502: PUSH
19503: LD_INT 0
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 0
19512: PUSH
19513: LD_INT 1
19515: NEG
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 1
19523: PUSH
19524: LD_INT 0
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 1
19533: PUSH
19534: LD_INT 1
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 0
19543: PUSH
19544: LD_INT 1
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 1
19553: NEG
19554: PUSH
19555: LD_INT 0
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 1
19564: NEG
19565: PUSH
19566: LD_INT 1
19568: NEG
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 1
19576: NEG
19577: PUSH
19578: LD_INT 2
19580: NEG
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 0
19588: PUSH
19589: LD_INT 2
19591: NEG
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 1
19599: PUSH
19600: LD_INT 1
19602: NEG
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 2
19610: PUSH
19611: LD_INT 0
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 2
19620: PUSH
19621: LD_INT 1
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 2
19630: PUSH
19631: LD_INT 2
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 1
19640: PUSH
19641: LD_INT 2
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 0
19650: PUSH
19651: LD_INT 2
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 1
19660: NEG
19661: PUSH
19662: LD_INT 1
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 2
19671: NEG
19672: PUSH
19673: LD_INT 0
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 2
19682: NEG
19683: PUSH
19684: LD_INT 1
19686: NEG
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 2
19694: NEG
19695: PUSH
19696: LD_INT 2
19698: NEG
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 2
19706: NEG
19707: PUSH
19708: LD_INT 3
19710: NEG
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 1
19718: NEG
19719: PUSH
19720: LD_INT 3
19722: NEG
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 3
19730: NEG
19731: PUSH
19732: LD_INT 1
19734: NEG
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 3
19742: NEG
19743: PUSH
19744: LD_INT 2
19746: NEG
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19777: LD_ADDR_VAR 0 29
19781: PUSH
19782: LD_INT 0
19784: PUSH
19785: LD_INT 0
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 0
19794: PUSH
19795: LD_INT 1
19797: NEG
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: LD_INT 0
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 1
19815: PUSH
19816: LD_INT 1
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 0
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 1
19835: NEG
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 1
19846: NEG
19847: PUSH
19848: LD_INT 1
19850: NEG
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 1
19858: NEG
19859: PUSH
19860: LD_INT 2
19862: NEG
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 0
19870: PUSH
19871: LD_INT 2
19873: NEG
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 1
19881: PUSH
19882: LD_INT 1
19884: NEG
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 2
19892: PUSH
19893: LD_INT 0
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 2
19902: PUSH
19903: LD_INT 1
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: LD_INT 2
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 0
19922: PUSH
19923: LD_INT 2
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 1
19932: NEG
19933: PUSH
19934: LD_INT 1
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 2
19943: NEG
19944: PUSH
19945: LD_INT 1
19947: NEG
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 2
19955: NEG
19956: PUSH
19957: LD_INT 2
19959: NEG
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 2
19967: NEG
19968: PUSH
19969: LD_INT 3
19971: NEG
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 2
19979: PUSH
19980: LD_INT 1
19982: NEG
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 3
19990: PUSH
19991: LD_INT 1
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 1
20000: PUSH
20001: LD_INT 3
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 1
20010: NEG
20011: PUSH
20012: LD_INT 2
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 3
20021: NEG
20022: PUSH
20023: LD_INT 2
20025: NEG
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20056: LD_ADDR_VAR 0 30
20060: PUSH
20061: LD_INT 0
20063: PUSH
20064: LD_INT 0
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 0
20073: PUSH
20074: LD_INT 1
20076: NEG
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 1
20084: PUSH
20085: LD_INT 0
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 1
20094: PUSH
20095: LD_INT 1
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 0
20104: PUSH
20105: LD_INT 1
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 1
20114: NEG
20115: PUSH
20116: LD_INT 0
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 1
20125: NEG
20126: PUSH
20127: LD_INT 1
20129: NEG
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 1
20137: NEG
20138: PUSH
20139: LD_INT 2
20141: NEG
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 0
20149: PUSH
20150: LD_INT 2
20152: NEG
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 1
20160: PUSH
20161: LD_INT 1
20163: NEG
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 2
20171: PUSH
20172: LD_INT 0
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 2
20181: PUSH
20182: LD_INT 1
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 2
20191: PUSH
20192: LD_INT 2
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: LD_INT 2
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 1
20211: NEG
20212: PUSH
20213: LD_INT 1
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 2
20222: NEG
20223: PUSH
20224: LD_INT 0
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 2
20233: NEG
20234: PUSH
20235: LD_INT 1
20237: NEG
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 1
20245: NEG
20246: PUSH
20247: LD_INT 3
20249: NEG
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 1
20257: PUSH
20258: LD_INT 2
20260: NEG
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 3
20268: PUSH
20269: LD_INT 2
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 2
20278: PUSH
20279: LD_INT 3
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 2
20288: NEG
20289: PUSH
20290: LD_INT 1
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 3
20299: NEG
20300: PUSH
20301: LD_INT 1
20303: NEG
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20334: LD_ADDR_VAR 0 31
20338: PUSH
20339: LD_INT 0
20341: PUSH
20342: LD_INT 0
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 0
20351: PUSH
20352: LD_INT 1
20354: NEG
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: LD_INT 0
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 1
20372: PUSH
20373: LD_INT 1
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 0
20382: PUSH
20383: LD_INT 1
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 1
20392: NEG
20393: PUSH
20394: LD_INT 0
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 1
20403: NEG
20404: PUSH
20405: LD_INT 1
20407: NEG
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 1
20415: NEG
20416: PUSH
20417: LD_INT 2
20419: NEG
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: LD_INT 1
20430: NEG
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 2
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 2
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 2
20458: PUSH
20459: LD_INT 2
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 1
20468: PUSH
20469: LD_INT 2
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 0
20478: PUSH
20479: LD_INT 2
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 1
20488: NEG
20489: PUSH
20490: LD_INT 1
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 2
20499: NEG
20500: PUSH
20501: LD_INT 1
20503: NEG
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 2
20511: NEG
20512: PUSH
20513: LD_INT 2
20515: NEG
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 2
20523: NEG
20524: PUSH
20525: LD_INT 3
20527: NEG
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 2
20535: PUSH
20536: LD_INT 1
20538: NEG
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 3
20546: PUSH
20547: LD_INT 1
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: LD_INT 1
20556: PUSH
20557: LD_INT 3
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 1
20566: NEG
20567: PUSH
20568: LD_INT 2
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 3
20577: NEG
20578: PUSH
20579: LD_INT 2
20581: NEG
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20612: LD_ADDR_VAR 0 32
20616: PUSH
20617: LD_INT 0
20619: PUSH
20620: LD_INT 0
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 0
20629: PUSH
20630: LD_INT 1
20632: NEG
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 1
20640: PUSH
20641: LD_INT 0
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 1
20650: PUSH
20651: LD_INT 1
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: LD_INT 1
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 1
20670: NEG
20671: PUSH
20672: LD_INT 0
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 1
20681: NEG
20682: PUSH
20683: LD_INT 1
20685: NEG
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PUSH
20695: LD_INT 2
20697: NEG
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 0
20705: PUSH
20706: LD_INT 2
20708: NEG
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 1
20716: PUSH
20717: LD_INT 1
20719: NEG
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 2
20727: PUSH
20728: LD_INT 1
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 2
20737: PUSH
20738: LD_INT 2
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 1
20747: PUSH
20748: LD_INT 2
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 0
20757: PUSH
20758: LD_INT 2
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 1
20767: NEG
20768: PUSH
20769: LD_INT 1
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 2
20778: NEG
20779: PUSH
20780: LD_INT 0
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 2
20789: NEG
20790: PUSH
20791: LD_INT 1
20793: NEG
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 1
20801: NEG
20802: PUSH
20803: LD_INT 3
20805: NEG
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: LD_INT 2
20816: NEG
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 3
20824: PUSH
20825: LD_INT 2
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 2
20834: PUSH
20835: LD_INT 3
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 2
20844: NEG
20845: PUSH
20846: LD_INT 1
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 3
20855: NEG
20856: PUSH
20857: LD_INT 1
20859: NEG
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20890: LD_ADDR_VAR 0 33
20894: PUSH
20895: LD_INT 0
20897: PUSH
20898: LD_INT 0
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 0
20907: PUSH
20908: LD_INT 1
20910: NEG
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: LD_INT 0
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 1
20928: PUSH
20929: LD_INT 1
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 0
20938: PUSH
20939: LD_INT 1
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 1
20948: NEG
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 1
20959: NEG
20960: PUSH
20961: LD_INT 1
20963: NEG
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 1
20971: NEG
20972: PUSH
20973: LD_INT 2
20975: NEG
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 1
20983: PUSH
20984: LD_INT 1
20986: NEG
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 2
20994: PUSH
20995: LD_INT 0
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 2
21004: PUSH
21005: LD_INT 1
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 1
21014: PUSH
21015: LD_INT 2
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 0
21024: PUSH
21025: LD_INT 2
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 1
21034: NEG
21035: PUSH
21036: LD_INT 1
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 2
21045: NEG
21046: PUSH
21047: LD_INT 0
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 2
21056: NEG
21057: PUSH
21058: LD_INT 1
21060: NEG
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 2
21068: NEG
21069: PUSH
21070: LD_INT 2
21072: NEG
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 2
21080: NEG
21081: PUSH
21082: LD_INT 3
21084: NEG
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 2
21092: PUSH
21093: LD_INT 1
21095: NEG
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 3
21103: PUSH
21104: LD_INT 1
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 1
21113: PUSH
21114: LD_INT 3
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 1
21123: NEG
21124: PUSH
21125: LD_INT 2
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 3
21134: NEG
21135: PUSH
21136: LD_INT 2
21138: NEG
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21169: LD_ADDR_VAR 0 34
21173: PUSH
21174: LD_INT 0
21176: PUSH
21177: LD_INT 0
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 0
21186: PUSH
21187: LD_INT 1
21189: NEG
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 1
21197: PUSH
21198: LD_INT 0
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 1
21207: PUSH
21208: LD_INT 1
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 0
21217: PUSH
21218: LD_INT 1
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 1
21227: NEG
21228: PUSH
21229: LD_INT 0
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 1
21238: NEG
21239: PUSH
21240: LD_INT 1
21242: NEG
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 1
21250: NEG
21251: PUSH
21252: LD_INT 2
21254: NEG
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 0
21262: PUSH
21263: LD_INT 2
21265: NEG
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: LD_INT 1
21276: NEG
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 2
21284: PUSH
21285: LD_INT 1
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 2
21294: PUSH
21295: LD_INT 2
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 1
21304: PUSH
21305: LD_INT 2
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 1
21314: NEG
21315: PUSH
21316: LD_INT 1
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 2
21325: NEG
21326: PUSH
21327: LD_INT 0
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 2
21336: NEG
21337: PUSH
21338: LD_INT 1
21340: NEG
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 2
21348: NEG
21349: PUSH
21350: LD_INT 2
21352: NEG
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 1
21360: NEG
21361: PUSH
21362: LD_INT 3
21364: NEG
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 1
21372: PUSH
21373: LD_INT 2
21375: NEG
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 3
21383: PUSH
21384: LD_INT 2
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 2
21393: PUSH
21394: LD_INT 3
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 2
21403: NEG
21404: PUSH
21405: LD_INT 1
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 3
21414: NEG
21415: PUSH
21416: LD_INT 1
21418: NEG
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21449: LD_ADDR_VAR 0 35
21453: PUSH
21454: LD_INT 0
21456: PUSH
21457: LD_INT 0
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 0
21466: PUSH
21467: LD_INT 1
21469: NEG
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 1
21477: PUSH
21478: LD_INT 0
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 1
21487: PUSH
21488: LD_INT 1
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 0
21497: PUSH
21498: LD_INT 1
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 1
21507: NEG
21508: PUSH
21509: LD_INT 0
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 1
21518: NEG
21519: PUSH
21520: LD_INT 1
21522: NEG
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 2
21530: PUSH
21531: LD_INT 1
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 2
21540: NEG
21541: PUSH
21542: LD_INT 1
21544: NEG
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21561: LD_ADDR_VAR 0 36
21565: PUSH
21566: LD_INT 0
21568: PUSH
21569: LD_INT 0
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 0
21578: PUSH
21579: LD_INT 1
21581: NEG
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 1
21589: PUSH
21590: LD_INT 0
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 1
21599: PUSH
21600: LD_INT 1
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 0
21609: PUSH
21610: LD_INT 1
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 1
21619: NEG
21620: PUSH
21621: LD_INT 0
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 1
21630: NEG
21631: PUSH
21632: LD_INT 1
21634: NEG
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 1
21642: NEG
21643: PUSH
21644: LD_INT 2
21646: NEG
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 1
21654: PUSH
21655: LD_INT 2
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21673: LD_ADDR_VAR 0 37
21677: PUSH
21678: LD_INT 0
21680: PUSH
21681: LD_INT 0
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 0
21690: PUSH
21691: LD_INT 1
21693: NEG
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 1
21701: PUSH
21702: LD_INT 0
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 1
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 0
21721: PUSH
21722: LD_INT 1
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 1
21731: NEG
21732: PUSH
21733: LD_INT 0
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 1
21742: NEG
21743: PUSH
21744: LD_INT 1
21746: NEG
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 1
21754: PUSH
21755: LD_INT 1
21757: NEG
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 1
21765: NEG
21766: PUSH
21767: LD_INT 1
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21785: LD_ADDR_VAR 0 38
21789: PUSH
21790: LD_INT 0
21792: PUSH
21793: LD_INT 0
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 0
21802: PUSH
21803: LD_INT 1
21805: NEG
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 1
21813: PUSH
21814: LD_INT 0
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 1
21823: PUSH
21824: LD_INT 1
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 0
21833: PUSH
21834: LD_INT 1
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 1
21843: NEG
21844: PUSH
21845: LD_INT 0
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 1
21854: NEG
21855: PUSH
21856: LD_INT 1
21858: NEG
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PUSH
21864: LD_INT 2
21866: PUSH
21867: LD_INT 1
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 2
21876: NEG
21877: PUSH
21878: LD_INT 1
21880: NEG
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21897: LD_ADDR_VAR 0 39
21901: PUSH
21902: LD_INT 0
21904: PUSH
21905: LD_INT 0
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 0
21914: PUSH
21915: LD_INT 1
21917: NEG
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 1
21925: PUSH
21926: LD_INT 0
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 1
21935: PUSH
21936: LD_INT 1
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 0
21945: PUSH
21946: LD_INT 1
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 1
21955: NEG
21956: PUSH
21957: LD_INT 0
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 1
21966: NEG
21967: PUSH
21968: LD_INT 1
21970: NEG
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 1
21978: NEG
21979: PUSH
21980: LD_INT 2
21982: NEG
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 1
21990: PUSH
21991: LD_INT 2
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22009: LD_ADDR_VAR 0 40
22013: PUSH
22014: LD_INT 0
22016: PUSH
22017: LD_INT 0
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 0
22026: PUSH
22027: LD_INT 1
22029: NEG
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 1
22037: PUSH
22038: LD_INT 0
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 1
22047: PUSH
22048: LD_INT 1
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 0
22057: PUSH
22058: LD_INT 1
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 1
22067: NEG
22068: PUSH
22069: LD_INT 0
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 1
22078: NEG
22079: PUSH
22080: LD_INT 1
22082: NEG
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 1
22090: PUSH
22091: LD_INT 1
22093: NEG
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 1
22101: NEG
22102: PUSH
22103: LD_INT 1
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22121: LD_ADDR_VAR 0 41
22125: PUSH
22126: LD_INT 0
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 0
22138: PUSH
22139: LD_INT 1
22141: NEG
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 1
22149: PUSH
22150: LD_INT 0
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: LD_INT 1
22159: PUSH
22160: LD_INT 1
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 0
22169: PUSH
22170: LD_INT 1
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 1
22179: NEG
22180: PUSH
22181: LD_INT 0
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 1
22190: NEG
22191: PUSH
22192: LD_INT 1
22194: NEG
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 1
22202: NEG
22203: PUSH
22204: LD_INT 2
22206: NEG
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 1
22214: PUSH
22215: LD_INT 1
22217: NEG
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 2
22225: PUSH
22226: LD_INT 0
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 2
22235: PUSH
22236: LD_INT 1
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 2
22245: PUSH
22246: LD_INT 2
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 1
22255: PUSH
22256: LD_INT 2
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 1
22265: NEG
22266: PUSH
22267: LD_INT 1
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 2
22276: NEG
22277: PUSH
22278: LD_INT 0
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 2
22287: NEG
22288: PUSH
22289: LD_INT 1
22291: NEG
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 2
22299: NEG
22300: PUSH
22301: LD_INT 2
22303: NEG
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 2
22311: NEG
22312: PUSH
22313: LD_INT 3
22315: NEG
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 2
22323: PUSH
22324: LD_INT 1
22326: NEG
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 3
22334: PUSH
22335: LD_INT 0
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 3
22344: PUSH
22345: LD_INT 1
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 3
22354: PUSH
22355: LD_INT 2
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 3
22364: PUSH
22365: LD_INT 3
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 2
22374: PUSH
22375: LD_INT 3
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 2
22384: NEG
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 3
22395: NEG
22396: PUSH
22397: LD_INT 0
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 3
22406: NEG
22407: PUSH
22408: LD_INT 1
22410: NEG
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 3
22418: NEG
22419: PUSH
22420: LD_INT 2
22422: NEG
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 3
22430: NEG
22431: PUSH
22432: LD_INT 3
22434: NEG
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22471: LD_ADDR_VAR 0 42
22475: PUSH
22476: LD_INT 0
22478: PUSH
22479: LD_INT 0
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 0
22488: PUSH
22489: LD_INT 1
22491: NEG
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 1
22499: PUSH
22500: LD_INT 0
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 1
22509: PUSH
22510: LD_INT 1
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 0
22519: PUSH
22520: LD_INT 1
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 1
22529: NEG
22530: PUSH
22531: LD_INT 0
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 1
22540: NEG
22541: PUSH
22542: LD_INT 1
22544: NEG
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: LD_INT 2
22556: NEG
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 0
22564: PUSH
22565: LD_INT 2
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: LD_INT 1
22578: NEG
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 2
22586: PUSH
22587: LD_INT 1
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 2
22596: PUSH
22597: LD_INT 2
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 1
22606: PUSH
22607: LD_INT 2
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 0
22616: PUSH
22617: LD_INT 2
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 1
22626: NEG
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 2
22637: NEG
22638: PUSH
22639: LD_INT 1
22641: NEG
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 2
22649: NEG
22650: PUSH
22651: LD_INT 2
22653: NEG
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 2
22661: NEG
22662: PUSH
22663: LD_INT 3
22665: NEG
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 1
22673: NEG
22674: PUSH
22675: LD_INT 3
22677: NEG
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 0
22685: PUSH
22686: LD_INT 3
22688: NEG
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 1
22696: PUSH
22697: LD_INT 2
22699: NEG
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 3
22707: PUSH
22708: LD_INT 2
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 3
22717: PUSH
22718: LD_INT 3
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 2
22727: PUSH
22728: LD_INT 3
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: LD_INT 3
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 0
22747: PUSH
22748: LD_INT 3
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 1
22757: NEG
22758: PUSH
22759: LD_INT 2
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 3
22768: NEG
22769: PUSH
22770: LD_INT 2
22772: NEG
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 3
22780: NEG
22781: PUSH
22782: LD_INT 3
22784: NEG
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22821: LD_ADDR_VAR 0 43
22825: PUSH
22826: LD_INT 0
22828: PUSH
22829: LD_INT 0
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 0
22838: PUSH
22839: LD_INT 1
22841: NEG
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 1
22849: PUSH
22850: LD_INT 0
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: LD_INT 1
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 0
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 1
22879: NEG
22880: PUSH
22881: LD_INT 0
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 1
22890: NEG
22891: PUSH
22892: LD_INT 1
22894: NEG
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 1
22902: NEG
22903: PUSH
22904: LD_INT 2
22906: NEG
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 0
22914: PUSH
22915: LD_INT 2
22917: NEG
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 1
22925: PUSH
22926: LD_INT 1
22928: NEG
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 2
22936: PUSH
22937: LD_INT 0
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 2
22946: PUSH
22947: LD_INT 1
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 1
22956: PUSH
22957: LD_INT 2
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 0
22966: PUSH
22967: LD_INT 2
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 1
22976: NEG
22977: PUSH
22978: LD_INT 1
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 2
22987: NEG
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 2
22998: NEG
22999: PUSH
23000: LD_INT 1
23002: NEG
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 1
23010: NEG
23011: PUSH
23012: LD_INT 3
23014: NEG
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 0
23022: PUSH
23023: LD_INT 3
23025: NEG
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 1
23033: PUSH
23034: LD_INT 2
23036: NEG
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 2
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 3
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 3
23065: PUSH
23066: LD_INT 1
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 1
23075: PUSH
23076: LD_INT 3
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 0
23085: PUSH
23086: LD_INT 3
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 1
23095: NEG
23096: PUSH
23097: LD_INT 2
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 2
23106: NEG
23107: PUSH
23108: LD_INT 1
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 3
23117: NEG
23118: PUSH
23119: LD_INT 0
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 3
23128: NEG
23129: PUSH
23130: LD_INT 1
23132: NEG
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23169: LD_ADDR_VAR 0 44
23173: PUSH
23174: LD_INT 0
23176: PUSH
23177: LD_INT 0
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 0
23186: PUSH
23187: LD_INT 1
23189: NEG
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: LD_INT 0
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: LD_INT 1
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 0
23217: PUSH
23218: LD_INT 1
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 1
23227: NEG
23228: PUSH
23229: LD_INT 0
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 1
23238: NEG
23239: PUSH
23240: LD_INT 1
23242: NEG
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 1
23250: NEG
23251: PUSH
23252: LD_INT 2
23254: NEG
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 1
23262: PUSH
23263: LD_INT 1
23265: NEG
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 2
23273: PUSH
23274: LD_INT 0
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 2
23283: PUSH
23284: LD_INT 1
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 2
23293: PUSH
23294: LD_INT 2
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 1
23303: PUSH
23304: LD_INT 2
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 1
23313: NEG
23314: PUSH
23315: LD_INT 1
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 2
23324: NEG
23325: PUSH
23326: LD_INT 0
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 2
23335: NEG
23336: PUSH
23337: LD_INT 1
23339: NEG
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 2
23347: NEG
23348: PUSH
23349: LD_INT 2
23351: NEG
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 2
23359: NEG
23360: PUSH
23361: LD_INT 3
23363: NEG
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 2
23371: PUSH
23372: LD_INT 1
23374: NEG
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 3
23382: PUSH
23383: LD_INT 0
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 3
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 3
23402: PUSH
23403: LD_INT 2
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 3
23412: PUSH
23413: LD_INT 3
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 2
23422: PUSH
23423: LD_INT 3
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 2
23432: NEG
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 3
23443: NEG
23444: PUSH
23445: LD_INT 0
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 3
23454: NEG
23455: PUSH
23456: LD_INT 1
23458: NEG
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 3
23466: NEG
23467: PUSH
23468: LD_INT 2
23470: NEG
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 3
23478: NEG
23479: PUSH
23480: LD_INT 3
23482: NEG
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23519: LD_ADDR_VAR 0 45
23523: PUSH
23524: LD_INT 0
23526: PUSH
23527: LD_INT 0
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 0
23536: PUSH
23537: LD_INT 1
23539: NEG
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 1
23547: PUSH
23548: LD_INT 0
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 1
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 0
23567: PUSH
23568: LD_INT 1
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 1
23577: NEG
23578: PUSH
23579: LD_INT 0
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 1
23588: NEG
23589: PUSH
23590: LD_INT 1
23592: NEG
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 1
23600: NEG
23601: PUSH
23602: LD_INT 2
23604: NEG
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 0
23612: PUSH
23613: LD_INT 2
23615: NEG
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 1
23623: PUSH
23624: LD_INT 1
23626: NEG
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 2
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 2
23644: PUSH
23645: LD_INT 2
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 1
23654: PUSH
23655: LD_INT 2
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 0
23664: PUSH
23665: LD_INT 2
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 1
23674: NEG
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 2
23685: NEG
23686: PUSH
23687: LD_INT 1
23689: NEG
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 2
23697: NEG
23698: PUSH
23699: LD_INT 2
23701: NEG
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 2
23709: NEG
23710: PUSH
23711: LD_INT 3
23713: NEG
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: LD_INT 3
23725: NEG
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 0
23733: PUSH
23734: LD_INT 3
23736: NEG
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 1
23744: PUSH
23745: LD_INT 2
23747: NEG
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 3
23755: PUSH
23756: LD_INT 2
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 3
23765: PUSH
23766: LD_INT 3
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 2
23775: PUSH
23776: LD_INT 3
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 1
23785: PUSH
23786: LD_INT 3
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 0
23795: PUSH
23796: LD_INT 3
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 1
23805: NEG
23806: PUSH
23807: LD_INT 2
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 3
23816: NEG
23817: PUSH
23818: LD_INT 2
23820: NEG
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 3
23828: NEG
23829: PUSH
23830: LD_INT 3
23832: NEG
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23869: LD_ADDR_VAR 0 46
23873: PUSH
23874: LD_INT 0
23876: PUSH
23877: LD_INT 0
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 0
23886: PUSH
23887: LD_INT 1
23889: NEG
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 1
23897: PUSH
23898: LD_INT 0
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: LD_INT 1
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 0
23917: PUSH
23918: LD_INT 1
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 1
23927: NEG
23928: PUSH
23929: LD_INT 0
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 1
23938: NEG
23939: PUSH
23940: LD_INT 1
23942: NEG
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: LD_INT 2
23954: NEG
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: LD_INT 2
23965: NEG
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: LD_INT 1
23976: NEG
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 2
23984: PUSH
23985: LD_INT 0
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 2
23994: PUSH
23995: LD_INT 1
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 1
24004: PUSH
24005: LD_INT 2
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 0
24014: PUSH
24015: LD_INT 2
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 1
24024: NEG
24025: PUSH
24026: LD_INT 1
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 2
24035: NEG
24036: PUSH
24037: LD_INT 0
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 2
24046: NEG
24047: PUSH
24048: LD_INT 1
24050: NEG
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 1
24058: NEG
24059: PUSH
24060: LD_INT 3
24062: NEG
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 0
24070: PUSH
24071: LD_INT 3
24073: NEG
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 1
24081: PUSH
24082: LD_INT 2
24084: NEG
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 2
24092: PUSH
24093: LD_INT 1
24095: NEG
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 3
24103: PUSH
24104: LD_INT 0
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 3
24113: PUSH
24114: LD_INT 1
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: PUSH
24124: LD_INT 3
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 0
24133: PUSH
24134: LD_INT 3
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 1
24143: NEG
24144: PUSH
24145: LD_INT 2
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 2
24154: NEG
24155: PUSH
24156: LD_INT 1
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 3
24165: NEG
24166: PUSH
24167: LD_INT 0
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 3
24176: NEG
24177: PUSH
24178: LD_INT 1
24180: NEG
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24217: LD_ADDR_VAR 0 47
24221: PUSH
24222: LD_INT 0
24224: PUSH
24225: LD_INT 0
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: LD_INT 1
24237: NEG
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: LD_INT 0
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 1
24275: NEG
24276: PUSH
24277: LD_INT 0
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 1
24286: NEG
24287: PUSH
24288: LD_INT 1
24290: NEG
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: NEG
24299: PUSH
24300: LD_INT 2
24302: NEG
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 0
24310: PUSH
24311: LD_INT 2
24313: NEG
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: LD_INT 1
24324: NEG
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 2
24332: NEG
24333: PUSH
24334: LD_INT 1
24336: NEG
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 2
24344: NEG
24345: PUSH
24346: LD_INT 2
24348: NEG
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24368: LD_ADDR_VAR 0 48
24372: PUSH
24373: LD_INT 0
24375: PUSH
24376: LD_INT 0
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 0
24385: PUSH
24386: LD_INT 1
24388: NEG
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 1
24396: PUSH
24397: LD_INT 0
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 1
24406: PUSH
24407: LD_INT 1
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 0
24416: PUSH
24417: LD_INT 1
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 1
24426: NEG
24427: PUSH
24428: LD_INT 0
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 1
24437: NEG
24438: PUSH
24439: LD_INT 1
24441: NEG
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 1
24449: NEG
24450: PUSH
24451: LD_INT 2
24453: NEG
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 0
24461: PUSH
24462: LD_INT 2
24464: NEG
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 1
24472: PUSH
24473: LD_INT 1
24475: NEG
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 2
24483: PUSH
24484: LD_INT 0
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 2
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24515: LD_ADDR_VAR 0 49
24519: PUSH
24520: LD_INT 0
24522: PUSH
24523: LD_INT 0
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 0
24532: PUSH
24533: LD_INT 1
24535: NEG
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 1
24543: PUSH
24544: LD_INT 0
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 1
24553: PUSH
24554: LD_INT 1
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: LD_INT 1
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 1
24573: NEG
24574: PUSH
24575: LD_INT 0
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 1
24584: NEG
24585: PUSH
24586: LD_INT 1
24588: NEG
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 1
24596: PUSH
24597: LD_INT 1
24599: NEG
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 2
24607: PUSH
24608: LD_INT 0
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 2
24617: PUSH
24618: LD_INT 1
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 2
24627: PUSH
24628: LD_INT 2
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 1
24637: PUSH
24638: LD_INT 2
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24659: LD_ADDR_VAR 0 50
24663: PUSH
24664: LD_INT 0
24666: PUSH
24667: LD_INT 0
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 0
24676: PUSH
24677: LD_INT 1
24679: NEG
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: LD_INT 0
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 1
24697: PUSH
24698: LD_INT 1
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 0
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 1
24717: NEG
24718: PUSH
24719: LD_INT 0
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 1
24728: NEG
24729: PUSH
24730: LD_INT 1
24732: NEG
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 2
24740: PUSH
24741: LD_INT 1
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 2
24750: PUSH
24751: LD_INT 2
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 1
24760: PUSH
24761: LD_INT 2
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 0
24770: PUSH
24771: LD_INT 2
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 1
24780: NEG
24781: PUSH
24782: LD_INT 1
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24803: LD_ADDR_VAR 0 51
24807: PUSH
24808: LD_INT 0
24810: PUSH
24811: LD_INT 0
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: LD_INT 1
24823: NEG
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 1
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 0
24851: PUSH
24852: LD_INT 1
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 1
24861: NEG
24862: PUSH
24863: LD_INT 0
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 1
24872: NEG
24873: PUSH
24874: LD_INT 1
24876: NEG
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 1
24884: PUSH
24885: LD_INT 2
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 0
24894: PUSH
24895: LD_INT 2
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 1
24904: NEG
24905: PUSH
24906: LD_INT 1
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 2
24915: NEG
24916: PUSH
24917: LD_INT 0
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 2
24926: NEG
24927: PUSH
24928: LD_INT 1
24930: NEG
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24950: LD_ADDR_VAR 0 52
24954: PUSH
24955: LD_INT 0
24957: PUSH
24958: LD_INT 0
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 0
24967: PUSH
24968: LD_INT 1
24970: NEG
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: LD_INT 0
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 1
24988: PUSH
24989: LD_INT 1
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 0
24998: PUSH
24999: LD_INT 1
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 1
25008: NEG
25009: PUSH
25010: LD_INT 0
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 1
25019: NEG
25020: PUSH
25021: LD_INT 1
25023: NEG
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 1
25031: NEG
25032: PUSH
25033: LD_INT 2
25035: NEG
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 1
25043: NEG
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 2
25054: NEG
25055: PUSH
25056: LD_INT 0
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 2
25065: NEG
25066: PUSH
25067: LD_INT 1
25069: NEG
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 2
25077: NEG
25078: PUSH
25079: LD_INT 2
25081: NEG
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25101: LD_ADDR_VAR 0 53
25105: PUSH
25106: LD_INT 0
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 0
25118: PUSH
25119: LD_INT 1
25121: NEG
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: LD_INT 0
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 1
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 0
25149: PUSH
25150: LD_INT 1
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 1
25159: NEG
25160: PUSH
25161: LD_INT 0
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: NEG
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 1
25182: NEG
25183: PUSH
25184: LD_INT 2
25186: NEG
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 0
25194: PUSH
25195: LD_INT 2
25197: NEG
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: LD_INT 1
25208: NEG
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 2
25216: PUSH
25217: LD_INT 0
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 2
25226: PUSH
25227: LD_INT 1
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 2
25236: PUSH
25237: LD_INT 2
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 1
25246: PUSH
25247: LD_INT 2
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 0
25256: PUSH
25257: LD_INT 2
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 1
25266: NEG
25267: PUSH
25268: LD_INT 1
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 2
25277: NEG
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 2
25288: NEG
25289: PUSH
25290: LD_INT 1
25292: NEG
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 2
25300: NEG
25301: PUSH
25302: LD_INT 2
25304: NEG
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25331: LD_ADDR_VAR 0 54
25335: PUSH
25336: LD_INT 0
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: LD_INT 1
25351: NEG
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 1
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 1
25369: PUSH
25370: LD_INT 1
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 0
25379: PUSH
25380: LD_INT 1
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: LD_INT 1
25404: NEG
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 1
25412: NEG
25413: PUSH
25414: LD_INT 2
25416: NEG
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: LD_INT 2
25427: NEG
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: LD_INT 1
25438: NEG
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 2
25446: PUSH
25447: LD_INT 0
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 2
25456: PUSH
25457: LD_INT 1
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 2
25466: PUSH
25467: LD_INT 2
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 1
25476: PUSH
25477: LD_INT 2
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 0
25486: PUSH
25487: LD_INT 2
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 1
25496: NEG
25497: PUSH
25498: LD_INT 1
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 2
25507: NEG
25508: PUSH
25509: LD_INT 0
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 2
25518: NEG
25519: PUSH
25520: LD_INT 1
25522: NEG
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 2
25530: NEG
25531: PUSH
25532: LD_INT 2
25534: NEG
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25561: LD_ADDR_VAR 0 55
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: LD_INT 0
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 0
25578: PUSH
25579: LD_INT 1
25581: NEG
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: LD_INT 0
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 0
25609: PUSH
25610: LD_INT 1
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 1
25619: NEG
25620: PUSH
25621: LD_INT 0
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 1
25630: NEG
25631: PUSH
25632: LD_INT 1
25634: NEG
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 1
25642: NEG
25643: PUSH
25644: LD_INT 2
25646: NEG
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 0
25654: PUSH
25655: LD_INT 2
25657: NEG
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: LD_INT 1
25668: NEG
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 2
25676: PUSH
25677: LD_INT 0
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 2
25686: PUSH
25687: LD_INT 1
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 2
25696: PUSH
25697: LD_INT 2
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: LD_INT 2
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: LD_INT 2
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 1
25726: NEG
25727: PUSH
25728: LD_INT 1
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 2
25737: NEG
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 2
25748: NEG
25749: PUSH
25750: LD_INT 1
25752: NEG
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 2
25760: NEG
25761: PUSH
25762: LD_INT 2
25764: NEG
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25791: LD_ADDR_VAR 0 56
25795: PUSH
25796: LD_INT 0
25798: PUSH
25799: LD_INT 0
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 0
25808: PUSH
25809: LD_INT 1
25811: NEG
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 1
25819: PUSH
25820: LD_INT 0
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 1
25829: PUSH
25830: LD_INT 1
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 0
25839: PUSH
25840: LD_INT 1
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 1
25849: NEG
25850: PUSH
25851: LD_INT 0
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 1
25860: NEG
25861: PUSH
25862: LD_INT 1
25864: NEG
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 1
25872: NEG
25873: PUSH
25874: LD_INT 2
25876: NEG
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: LD_INT 2
25887: NEG
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: LD_INT 1
25898: NEG
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 2
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 2
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 2
25926: PUSH
25927: LD_INT 2
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: PUSH
25937: LD_INT 2
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: LD_INT 2
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 1
25956: NEG
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 2
25967: NEG
25968: PUSH
25969: LD_INT 0
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 2
25978: NEG
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 2
25990: NEG
25991: PUSH
25992: LD_INT 2
25994: NEG
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26021: LD_ADDR_VAR 0 57
26025: PUSH
26026: LD_INT 0
26028: PUSH
26029: LD_INT 0
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 0
26038: PUSH
26039: LD_INT 1
26041: NEG
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 1
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: LD_INT 1
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 0
26069: PUSH
26070: LD_INT 1
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 1
26079: NEG
26080: PUSH
26081: LD_INT 0
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 1
26090: NEG
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 1
26102: NEG
26103: PUSH
26104: LD_INT 2
26106: NEG
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 0
26114: PUSH
26115: LD_INT 2
26117: NEG
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: LD_INT 1
26128: NEG
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 2
26136: PUSH
26137: LD_INT 0
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 2
26146: PUSH
26147: LD_INT 1
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: LD_INT 2
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: LD_INT 2
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 0
26176: PUSH
26177: LD_INT 2
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 2
26197: NEG
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 2
26208: NEG
26209: PUSH
26210: LD_INT 1
26212: NEG
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 2
26220: NEG
26221: PUSH
26222: LD_INT 2
26224: NEG
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26251: LD_ADDR_VAR 0 58
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: LD_INT 0
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: LD_INT 1
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 1
26279: PUSH
26280: LD_INT 0
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 1
26289: PUSH
26290: LD_INT 1
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 0
26299: PUSH
26300: LD_INT 1
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 1
26309: NEG
26310: PUSH
26311: LD_INT 0
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 1
26320: NEG
26321: PUSH
26322: LD_INT 1
26324: NEG
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: NEG
26333: PUSH
26334: LD_INT 2
26336: NEG
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: LD_INT 2
26347: NEG
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: LD_INT 1
26358: NEG
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 2
26366: PUSH
26367: LD_INT 0
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 2
26376: PUSH
26377: LD_INT 1
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 2
26386: PUSH
26387: LD_INT 2
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: LD_INT 2
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 0
26406: PUSH
26407: LD_INT 2
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 1
26416: NEG
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 2
26427: NEG
26428: PUSH
26429: LD_INT 0
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 2
26438: NEG
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 2
26450: NEG
26451: PUSH
26452: LD_INT 2
26454: NEG
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26481: LD_ADDR_VAR 0 59
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: LD_INT 1
26501: NEG
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 1
26539: NEG
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 1
26550: NEG
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26569: LD_ADDR_VAR 0 60
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: LD_INT 0
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 0
26586: PUSH
26587: LD_INT 1
26589: NEG
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 1
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 1
26607: PUSH
26608: LD_INT 1
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 0
26617: PUSH
26618: LD_INT 1
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 1
26627: NEG
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 1
26638: NEG
26639: PUSH
26640: LD_INT 1
26642: NEG
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26657: LD_ADDR_VAR 0 61
26661: PUSH
26662: LD_INT 0
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 0
26674: PUSH
26675: LD_INT 1
26677: NEG
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 1
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: LD_INT 1
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 0
26705: PUSH
26706: LD_INT 1
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 1
26715: NEG
26716: PUSH
26717: LD_INT 0
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 1
26726: NEG
26727: PUSH
26728: LD_INT 1
26730: NEG
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26745: LD_ADDR_VAR 0 62
26749: PUSH
26750: LD_INT 0
26752: PUSH
26753: LD_INT 0
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 0
26762: PUSH
26763: LD_INT 1
26765: NEG
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 1
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 1
26783: PUSH
26784: LD_INT 1
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 0
26793: PUSH
26794: LD_INT 1
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: NEG
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 1
26814: NEG
26815: PUSH
26816: LD_INT 1
26818: NEG
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26833: LD_ADDR_VAR 0 63
26837: PUSH
26838: LD_INT 0
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 0
26850: PUSH
26851: LD_INT 1
26853: NEG
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 1
26861: PUSH
26862: LD_INT 0
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: LD_INT 1
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 1
26891: NEG
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 1
26902: NEG
26903: PUSH
26904: LD_INT 1
26906: NEG
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26921: LD_ADDR_VAR 0 64
26925: PUSH
26926: LD_INT 0
26928: PUSH
26929: LD_INT 0
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 0
26938: PUSH
26939: LD_INT 1
26941: NEG
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 1
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: LD_INT 1
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: LD_INT 1
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 1
26990: NEG
26991: PUSH
26992: LD_INT 1
26994: NEG
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: ST_TO_ADDR
// end ; 1 :
27009: GO 32906
27011: LD_INT 1
27013: DOUBLE
27014: EQUAL
27015: IFTRUE 27019
27017: GO 29642
27019: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27020: LD_ADDR_VAR 0 11
27024: PUSH
27025: LD_INT 1
27027: NEG
27028: PUSH
27029: LD_INT 3
27031: NEG
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 0
27039: PUSH
27040: LD_INT 3
27042: NEG
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 1
27050: PUSH
27051: LD_INT 2
27053: NEG
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: LIST
27063: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27064: LD_ADDR_VAR 0 12
27068: PUSH
27069: LD_INT 2
27071: PUSH
27072: LD_INT 1
27074: NEG
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 3
27082: PUSH
27083: LD_INT 0
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 3
27092: PUSH
27093: LD_INT 1
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: LIST
27104: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27105: LD_ADDR_VAR 0 13
27109: PUSH
27110: LD_INT 3
27112: PUSH
27113: LD_INT 2
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 3
27122: PUSH
27123: LD_INT 3
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 2
27132: PUSH
27133: LD_INT 3
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: LIST
27144: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27145: LD_ADDR_VAR 0 14
27149: PUSH
27150: LD_INT 1
27152: PUSH
27153: LD_INT 3
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: LD_INT 3
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 1
27172: NEG
27173: PUSH
27174: LD_INT 2
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: LIST
27185: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27186: LD_ADDR_VAR 0 15
27190: PUSH
27191: LD_INT 2
27193: NEG
27194: PUSH
27195: LD_INT 1
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 3
27204: NEG
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 3
27215: NEG
27216: PUSH
27217: LD_INT 1
27219: NEG
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: LIST
27229: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27230: LD_ADDR_VAR 0 16
27234: PUSH
27235: LD_INT 2
27237: NEG
27238: PUSH
27239: LD_INT 3
27241: NEG
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 3
27249: NEG
27250: PUSH
27251: LD_INT 2
27253: NEG
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 3
27261: NEG
27262: PUSH
27263: LD_INT 3
27265: NEG
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: LIST
27275: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27276: LD_ADDR_VAR 0 17
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: LD_INT 3
27287: NEG
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 0
27295: PUSH
27296: LD_INT 3
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: LD_INT 2
27309: NEG
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: LIST
27319: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27320: LD_ADDR_VAR 0 18
27324: PUSH
27325: LD_INT 2
27327: PUSH
27328: LD_INT 1
27330: NEG
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 3
27338: PUSH
27339: LD_INT 0
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 3
27348: PUSH
27349: LD_INT 1
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: LIST
27360: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27361: LD_ADDR_VAR 0 19
27365: PUSH
27366: LD_INT 3
27368: PUSH
27369: LD_INT 2
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 3
27378: PUSH
27379: LD_INT 3
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 2
27388: PUSH
27389: LD_INT 3
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: LIST
27400: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27401: LD_ADDR_VAR 0 20
27405: PUSH
27406: LD_INT 1
27408: PUSH
27409: LD_INT 3
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: LD_INT 3
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: LD_INT 2
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: LIST
27441: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27442: LD_ADDR_VAR 0 21
27446: PUSH
27447: LD_INT 2
27449: NEG
27450: PUSH
27451: LD_INT 1
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 3
27460: NEG
27461: PUSH
27462: LD_INT 0
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 3
27471: NEG
27472: PUSH
27473: LD_INT 1
27475: NEG
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: LIST
27485: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27486: LD_ADDR_VAR 0 22
27490: PUSH
27491: LD_INT 2
27493: NEG
27494: PUSH
27495: LD_INT 3
27497: NEG
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 3
27505: NEG
27506: PUSH
27507: LD_INT 2
27509: NEG
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 3
27517: NEG
27518: PUSH
27519: LD_INT 3
27521: NEG
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: LIST
27531: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27532: LD_ADDR_VAR 0 23
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: LD_INT 3
27542: NEG
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 1
27550: NEG
27551: PUSH
27552: LD_INT 4
27554: NEG
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 1
27562: PUSH
27563: LD_INT 3
27565: NEG
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: LIST
27575: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27576: LD_ADDR_VAR 0 24
27580: PUSH
27581: LD_INT 3
27583: PUSH
27584: LD_INT 0
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 3
27593: PUSH
27594: LD_INT 1
27596: NEG
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 4
27604: PUSH
27605: LD_INT 1
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: LIST
27616: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27617: LD_ADDR_VAR 0 25
27621: PUSH
27622: LD_INT 3
27624: PUSH
27625: LD_INT 3
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 4
27634: PUSH
27635: LD_INT 3
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 3
27644: PUSH
27645: LD_INT 4
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: LIST
27656: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27657: LD_ADDR_VAR 0 26
27661: PUSH
27662: LD_INT 0
27664: PUSH
27665: LD_INT 3
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: LD_INT 4
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 1
27684: NEG
27685: PUSH
27686: LD_INT 3
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: LIST
27697: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27698: LD_ADDR_VAR 0 27
27702: PUSH
27703: LD_INT 3
27705: NEG
27706: PUSH
27707: LD_INT 0
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 3
27716: NEG
27717: PUSH
27718: LD_INT 1
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 4
27727: NEG
27728: PUSH
27729: LD_INT 1
27731: NEG
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: LIST
27741: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27742: LD_ADDR_VAR 0 28
27746: PUSH
27747: LD_INT 3
27749: NEG
27750: PUSH
27751: LD_INT 3
27753: NEG
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 3
27761: NEG
27762: PUSH
27763: LD_INT 4
27765: NEG
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 4
27773: NEG
27774: PUSH
27775: LD_INT 3
27777: NEG
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: LIST
27787: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27788: LD_ADDR_VAR 0 29
27792: PUSH
27793: LD_INT 1
27795: NEG
27796: PUSH
27797: LD_INT 3
27799: NEG
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 0
27807: PUSH
27808: LD_INT 3
27810: NEG
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 1
27818: PUSH
27819: LD_INT 2
27821: NEG
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: LD_INT 4
27833: NEG
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: LD_INT 4
27844: NEG
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: LD_INT 3
27855: NEG
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 1
27863: NEG
27864: PUSH
27865: LD_INT 5
27867: NEG
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 0
27875: PUSH
27876: LD_INT 5
27878: NEG
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 1
27886: PUSH
27887: LD_INT 4
27889: NEG
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 1
27897: NEG
27898: PUSH
27899: LD_INT 6
27901: NEG
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 0
27909: PUSH
27910: LD_INT 6
27912: NEG
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 1
27920: PUSH
27921: LD_INT 5
27923: NEG
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27943: LD_ADDR_VAR 0 30
27947: PUSH
27948: LD_INT 2
27950: PUSH
27951: LD_INT 1
27953: NEG
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 3
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 3
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 3
27981: PUSH
27982: LD_INT 1
27984: NEG
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 4
27992: PUSH
27993: LD_INT 0
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 4
28002: PUSH
28003: LD_INT 1
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 4
28012: PUSH
28013: LD_INT 1
28015: NEG
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 5
28023: PUSH
28024: LD_INT 0
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 5
28033: PUSH
28034: LD_INT 1
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 5
28043: PUSH
28044: LD_INT 1
28046: NEG
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 6
28054: PUSH
28055: LD_INT 0
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 6
28064: PUSH
28065: LD_INT 1
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28086: LD_ADDR_VAR 0 31
28090: PUSH
28091: LD_INT 3
28093: PUSH
28094: LD_INT 2
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 3
28103: PUSH
28104: LD_INT 3
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 2
28113: PUSH
28114: LD_INT 3
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 4
28123: PUSH
28124: LD_INT 3
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 4
28133: PUSH
28134: LD_INT 4
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 3
28143: PUSH
28144: LD_INT 4
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 5
28153: PUSH
28154: LD_INT 4
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 5
28163: PUSH
28164: LD_INT 5
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 4
28173: PUSH
28174: LD_INT 5
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 6
28183: PUSH
28184: LD_INT 5
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 6
28193: PUSH
28194: LD_INT 6
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 5
28203: PUSH
28204: LD_INT 6
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28225: LD_ADDR_VAR 0 32
28229: PUSH
28230: LD_INT 1
28232: PUSH
28233: LD_INT 3
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 0
28242: PUSH
28243: LD_INT 3
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 1
28252: NEG
28253: PUSH
28254: LD_INT 2
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 1
28263: PUSH
28264: LD_INT 4
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: LD_INT 4
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 1
28283: NEG
28284: PUSH
28285: LD_INT 3
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 1
28294: PUSH
28295: LD_INT 5
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 0
28304: PUSH
28305: LD_INT 5
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 1
28314: NEG
28315: PUSH
28316: LD_INT 4
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 1
28325: PUSH
28326: LD_INT 6
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 0
28335: PUSH
28336: LD_INT 6
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: LD_INT 5
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28368: LD_ADDR_VAR 0 33
28372: PUSH
28373: LD_INT 2
28375: NEG
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 3
28386: NEG
28387: PUSH
28388: LD_INT 0
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 3
28397: NEG
28398: PUSH
28399: LD_INT 1
28401: NEG
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 3
28409: NEG
28410: PUSH
28411: LD_INT 1
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 4
28420: NEG
28421: PUSH
28422: LD_INT 0
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 4
28431: NEG
28432: PUSH
28433: LD_INT 1
28435: NEG
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 4
28443: NEG
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 5
28454: NEG
28455: PUSH
28456: LD_INT 0
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 5
28465: NEG
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 5
28477: NEG
28478: PUSH
28479: LD_INT 1
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 6
28488: NEG
28489: PUSH
28490: LD_INT 0
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 6
28499: NEG
28500: PUSH
28501: LD_INT 1
28503: NEG
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28523: LD_ADDR_VAR 0 34
28527: PUSH
28528: LD_INT 2
28530: NEG
28531: PUSH
28532: LD_INT 3
28534: NEG
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 3
28542: NEG
28543: PUSH
28544: LD_INT 2
28546: NEG
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 3
28554: NEG
28555: PUSH
28556: LD_INT 3
28558: NEG
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 3
28566: NEG
28567: PUSH
28568: LD_INT 4
28570: NEG
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 4
28578: NEG
28579: PUSH
28580: LD_INT 3
28582: NEG
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 4
28590: NEG
28591: PUSH
28592: LD_INT 4
28594: NEG
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 4
28602: NEG
28603: PUSH
28604: LD_INT 5
28606: NEG
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 5
28614: NEG
28615: PUSH
28616: LD_INT 4
28618: NEG
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 5
28626: NEG
28627: PUSH
28628: LD_INT 5
28630: NEG
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 5
28638: NEG
28639: PUSH
28640: LD_INT 6
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 6
28650: NEG
28651: PUSH
28652: LD_INT 5
28654: NEG
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 6
28662: NEG
28663: PUSH
28664: LD_INT 6
28666: NEG
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28686: LD_ADDR_VAR 0 41
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: LD_INT 2
28696: NEG
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: LD_INT 3
28708: NEG
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 1
28716: PUSH
28717: LD_INT 2
28719: NEG
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: LIST
28729: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28730: LD_ADDR_VAR 0 42
28734: PUSH
28735: LD_INT 2
28737: PUSH
28738: LD_INT 0
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 2
28747: PUSH
28748: LD_INT 1
28750: NEG
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 3
28758: PUSH
28759: LD_INT 1
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: LIST
28770: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28771: LD_ADDR_VAR 0 43
28775: PUSH
28776: LD_INT 2
28778: PUSH
28779: LD_INT 2
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 3
28788: PUSH
28789: LD_INT 2
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 2
28798: PUSH
28799: LD_INT 3
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: LIST
28810: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28811: LD_ADDR_VAR 0 44
28815: PUSH
28816: LD_INT 0
28818: PUSH
28819: LD_INT 2
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: LD_INT 3
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: LD_INT 2
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: LIST
28851: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28852: LD_ADDR_VAR 0 45
28856: PUSH
28857: LD_INT 2
28859: NEG
28860: PUSH
28861: LD_INT 0
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 2
28870: NEG
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 3
28881: NEG
28882: PUSH
28883: LD_INT 1
28885: NEG
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: LIST
28895: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28896: LD_ADDR_VAR 0 46
28900: PUSH
28901: LD_INT 2
28903: NEG
28904: PUSH
28905: LD_INT 2
28907: NEG
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 2
28915: NEG
28916: PUSH
28917: LD_INT 3
28919: NEG
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 3
28927: NEG
28928: PUSH
28929: LD_INT 2
28931: NEG
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: LIST
28941: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28942: LD_ADDR_VAR 0 47
28946: PUSH
28947: LD_INT 2
28949: NEG
28950: PUSH
28951: LD_INT 3
28953: NEG
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 1
28961: NEG
28962: PUSH
28963: LD_INT 3
28965: NEG
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28975: LD_ADDR_VAR 0 48
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: LD_INT 2
28985: NEG
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 2
28993: PUSH
28994: LD_INT 1
28996: NEG
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29006: LD_ADDR_VAR 0 49
29010: PUSH
29011: LD_INT 3
29013: PUSH
29014: LD_INT 1
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 3
29023: PUSH
29024: LD_INT 2
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29035: LD_ADDR_VAR 0 50
29039: PUSH
29040: LD_INT 2
29042: PUSH
29043: LD_INT 3
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 1
29052: PUSH
29053: LD_INT 3
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29064: LD_ADDR_VAR 0 51
29068: PUSH
29069: LD_INT 1
29071: NEG
29072: PUSH
29073: LD_INT 2
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 2
29082: NEG
29083: PUSH
29084: LD_INT 1
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29095: LD_ADDR_VAR 0 52
29099: PUSH
29100: LD_INT 3
29102: NEG
29103: PUSH
29104: LD_INT 1
29106: NEG
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 3
29114: NEG
29115: PUSH
29116: LD_INT 2
29118: NEG
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29128: LD_ADDR_VAR 0 53
29132: PUSH
29133: LD_INT 1
29135: NEG
29136: PUSH
29137: LD_INT 3
29139: NEG
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 0
29147: PUSH
29148: LD_INT 3
29150: NEG
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 1
29158: PUSH
29159: LD_INT 2
29161: NEG
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: LIST
29171: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29172: LD_ADDR_VAR 0 54
29176: PUSH
29177: LD_INT 2
29179: PUSH
29180: LD_INT 1
29182: NEG
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 3
29190: PUSH
29191: LD_INT 0
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 3
29200: PUSH
29201: LD_INT 1
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: LIST
29212: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29213: LD_ADDR_VAR 0 55
29217: PUSH
29218: LD_INT 3
29220: PUSH
29221: LD_INT 2
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 3
29230: PUSH
29231: LD_INT 3
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 2
29240: PUSH
29241: LD_INT 3
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: LIST
29252: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29253: LD_ADDR_VAR 0 56
29257: PUSH
29258: LD_INT 1
29260: PUSH
29261: LD_INT 3
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 0
29270: PUSH
29271: LD_INT 3
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 1
29280: NEG
29281: PUSH
29282: LD_INT 2
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: LIST
29293: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29294: LD_ADDR_VAR 0 57
29298: PUSH
29299: LD_INT 2
29301: NEG
29302: PUSH
29303: LD_INT 1
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 3
29312: NEG
29313: PUSH
29314: LD_INT 0
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 3
29323: NEG
29324: PUSH
29325: LD_INT 1
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: LIST
29337: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29338: LD_ADDR_VAR 0 58
29342: PUSH
29343: LD_INT 2
29345: NEG
29346: PUSH
29347: LD_INT 3
29349: NEG
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 3
29357: NEG
29358: PUSH
29359: LD_INT 2
29361: NEG
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 3
29369: NEG
29370: PUSH
29371: LD_INT 3
29373: NEG
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: LIST
29383: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29384: LD_ADDR_VAR 0 59
29388: PUSH
29389: LD_INT 1
29391: NEG
29392: PUSH
29393: LD_INT 2
29395: NEG
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 0
29403: PUSH
29404: LD_INT 2
29406: NEG
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 1
29414: PUSH
29415: LD_INT 1
29417: NEG
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: LIST
29427: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29428: LD_ADDR_VAR 0 60
29432: PUSH
29433: LD_INT 1
29435: PUSH
29436: LD_INT 1
29438: NEG
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 2
29446: PUSH
29447: LD_INT 0
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 2
29456: PUSH
29457: LD_INT 1
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: LIST
29468: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29469: LD_ADDR_VAR 0 61
29473: PUSH
29474: LD_INT 2
29476: PUSH
29477: LD_INT 1
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 2
29486: PUSH
29487: LD_INT 2
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 1
29496: PUSH
29497: LD_INT 2
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: LIST
29508: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29509: LD_ADDR_VAR 0 62
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: LD_INT 2
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 0
29526: PUSH
29527: LD_INT 2
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: PUSH
29538: LD_INT 1
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: LIST
29549: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29550: LD_ADDR_VAR 0 63
29554: PUSH
29555: LD_INT 1
29557: NEG
29558: PUSH
29559: LD_INT 1
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 2
29568: NEG
29569: PUSH
29570: LD_INT 0
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 2
29579: NEG
29580: PUSH
29581: LD_INT 1
29583: NEG
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: LIST
29593: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29594: LD_ADDR_VAR 0 64
29598: PUSH
29599: LD_INT 1
29601: NEG
29602: PUSH
29603: LD_INT 2
29605: NEG
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 2
29613: NEG
29614: PUSH
29615: LD_INT 1
29617: NEG
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 2
29625: NEG
29626: PUSH
29627: LD_INT 2
29629: NEG
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: LIST
29639: ST_TO_ADDR
// end ; 2 :
29640: GO 32906
29642: LD_INT 2
29644: DOUBLE
29645: EQUAL
29646: IFTRUE 29650
29648: GO 32905
29650: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29651: LD_ADDR_VAR 0 29
29655: PUSH
29656: LD_INT 4
29658: PUSH
29659: LD_INT 0
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 4
29668: PUSH
29669: LD_INT 1
29671: NEG
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 5
29679: PUSH
29680: LD_INT 0
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 5
29689: PUSH
29690: LD_INT 1
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 4
29699: PUSH
29700: LD_INT 1
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 3
29709: PUSH
29710: LD_INT 0
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 3
29719: PUSH
29720: LD_INT 1
29722: NEG
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 3
29730: PUSH
29731: LD_INT 2
29733: NEG
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 5
29741: PUSH
29742: LD_INT 2
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 3
29751: PUSH
29752: LD_INT 3
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 3
29761: PUSH
29762: LD_INT 2
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 4
29771: PUSH
29772: LD_INT 3
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 4
29781: PUSH
29782: LD_INT 4
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 3
29791: PUSH
29792: LD_INT 4
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 2
29801: PUSH
29802: LD_INT 3
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 2
29811: PUSH
29812: LD_INT 2
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 4
29821: PUSH
29822: LD_INT 2
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 2
29831: PUSH
29832: LD_INT 4
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 0
29841: PUSH
29842: LD_INT 4
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 0
29851: PUSH
29852: LD_INT 3
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 1
29861: PUSH
29862: LD_INT 4
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 1
29871: PUSH
29872: LD_INT 5
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 0
29881: PUSH
29882: LD_INT 5
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 1
29891: NEG
29892: PUSH
29893: LD_INT 4
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 1
29902: NEG
29903: PUSH
29904: LD_INT 3
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 2
29913: PUSH
29914: LD_INT 5
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 2
29923: NEG
29924: PUSH
29925: LD_INT 3
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 3
29934: NEG
29935: PUSH
29936: LD_INT 0
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 3
29945: NEG
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 2
29957: NEG
29958: PUSH
29959: LD_INT 0
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 2
29968: NEG
29969: PUSH
29970: LD_INT 1
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 3
29979: NEG
29980: PUSH
29981: LD_INT 1
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 4
29990: NEG
29991: PUSH
29992: LD_INT 0
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 4
30001: NEG
30002: PUSH
30003: LD_INT 1
30005: NEG
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 4
30013: NEG
30014: PUSH
30015: LD_INT 2
30017: NEG
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 2
30025: NEG
30026: PUSH
30027: LD_INT 2
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 4
30036: NEG
30037: PUSH
30038: LD_INT 4
30040: NEG
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 4
30048: NEG
30049: PUSH
30050: LD_INT 5
30052: NEG
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 3
30060: NEG
30061: PUSH
30062: LD_INT 4
30064: NEG
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 3
30072: NEG
30073: PUSH
30074: LD_INT 3
30076: NEG
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 4
30084: NEG
30085: PUSH
30086: LD_INT 3
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 5
30096: NEG
30097: PUSH
30098: LD_INT 4
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 5
30108: NEG
30109: PUSH
30110: LD_INT 5
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 3
30120: NEG
30121: PUSH
30122: LD_INT 5
30124: NEG
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 5
30132: NEG
30133: PUSH
30134: LD_INT 3
30136: NEG
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30189: LD_ADDR_VAR 0 30
30193: PUSH
30194: LD_INT 4
30196: PUSH
30197: LD_INT 4
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 4
30206: PUSH
30207: LD_INT 3
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 5
30216: PUSH
30217: LD_INT 4
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 5
30226: PUSH
30227: LD_INT 5
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 4
30236: PUSH
30237: LD_INT 5
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 3
30246: PUSH
30247: LD_INT 4
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 3
30256: PUSH
30257: LD_INT 3
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 5
30266: PUSH
30267: LD_INT 3
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 3
30276: PUSH
30277: LD_INT 5
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: LD_INT 3
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 0
30296: PUSH
30297: LD_INT 2
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 1
30306: PUSH
30307: LD_INT 3
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 1
30316: PUSH
30317: LD_INT 4
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 0
30326: PUSH
30327: LD_INT 4
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 1
30336: NEG
30337: PUSH
30338: LD_INT 3
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 1
30347: NEG
30348: PUSH
30349: LD_INT 2
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 2
30358: PUSH
30359: LD_INT 4
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 2
30368: NEG
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 4
30379: NEG
30380: PUSH
30381: LD_INT 0
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 4
30390: NEG
30391: PUSH
30392: LD_INT 1
30394: NEG
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 3
30402: NEG
30403: PUSH
30404: LD_INT 0
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 3
30413: NEG
30414: PUSH
30415: LD_INT 1
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 4
30424: NEG
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 5
30435: NEG
30436: PUSH
30437: LD_INT 0
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 5
30446: NEG
30447: PUSH
30448: LD_INT 1
30450: NEG
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 5
30458: NEG
30459: PUSH
30460: LD_INT 2
30462: NEG
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 3
30470: NEG
30471: PUSH
30472: LD_INT 2
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 3
30481: NEG
30482: PUSH
30483: LD_INT 3
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 3
30493: NEG
30494: PUSH
30495: LD_INT 4
30497: NEG
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 2
30505: NEG
30506: PUSH
30507: LD_INT 3
30509: NEG
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 2
30517: NEG
30518: PUSH
30519: LD_INT 2
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 3
30529: NEG
30530: PUSH
30531: LD_INT 2
30533: NEG
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 4
30541: NEG
30542: PUSH
30543: LD_INT 3
30545: NEG
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 4
30553: NEG
30554: PUSH
30555: LD_INT 4
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 2
30565: NEG
30566: PUSH
30567: LD_INT 4
30569: NEG
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 4
30577: NEG
30578: PUSH
30579: LD_INT 2
30581: NEG
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 0
30589: PUSH
30590: LD_INT 4
30592: NEG
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 0
30600: PUSH
30601: LD_INT 5
30603: NEG
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 1
30611: PUSH
30612: LD_INT 4
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: PUSH
30623: LD_INT 3
30625: NEG
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 0
30633: PUSH
30634: LD_INT 3
30636: NEG
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 1
30644: NEG
30645: PUSH
30646: LD_INT 4
30648: NEG
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 1
30656: NEG
30657: PUSH
30658: LD_INT 5
30660: NEG
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 2
30668: PUSH
30669: LD_INT 3
30671: NEG
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 2
30679: NEG
30680: PUSH
30681: LD_INT 5
30683: NEG
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30736: LD_ADDR_VAR 0 31
30740: PUSH
30741: LD_INT 0
30743: PUSH
30744: LD_INT 4
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: LD_INT 3
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 1
30763: PUSH
30764: LD_INT 4
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 1
30773: PUSH
30774: LD_INT 5
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 0
30783: PUSH
30784: LD_INT 5
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 1
30793: NEG
30794: PUSH
30795: LD_INT 4
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 1
30804: NEG
30805: PUSH
30806: LD_INT 3
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 2
30815: PUSH
30816: LD_INT 5
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 2
30825: NEG
30826: PUSH
30827: LD_INT 3
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 3
30836: NEG
30837: PUSH
30838: LD_INT 0
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 3
30847: NEG
30848: PUSH
30849: LD_INT 1
30851: NEG
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 2
30859: NEG
30860: PUSH
30861: LD_INT 0
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 2
30870: NEG
30871: PUSH
30872: LD_INT 1
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 3
30881: NEG
30882: PUSH
30883: LD_INT 1
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 4
30892: NEG
30893: PUSH
30894: LD_INT 0
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 4
30903: NEG
30904: PUSH
30905: LD_INT 1
30907: NEG
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 4
30915: NEG
30916: PUSH
30917: LD_INT 2
30919: NEG
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 2
30927: NEG
30928: PUSH
30929: LD_INT 2
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 4
30938: NEG
30939: PUSH
30940: LD_INT 4
30942: NEG
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 4
30950: NEG
30951: PUSH
30952: LD_INT 5
30954: NEG
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 3
30962: NEG
30963: PUSH
30964: LD_INT 4
30966: NEG
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 3
30974: NEG
30975: PUSH
30976: LD_INT 3
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 4
30986: NEG
30987: PUSH
30988: LD_INT 3
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 5
30998: NEG
30999: PUSH
31000: LD_INT 4
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 5
31010: NEG
31011: PUSH
31012: LD_INT 5
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 3
31022: NEG
31023: PUSH
31024: LD_INT 5
31026: NEG
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 5
31034: NEG
31035: PUSH
31036: LD_INT 3
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 0
31046: PUSH
31047: LD_INT 3
31049: NEG
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 0
31057: PUSH
31058: LD_INT 4
31060: NEG
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: LD_INT 3
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 1
31079: PUSH
31080: LD_INT 2
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: LD_INT 2
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: NEG
31102: PUSH
31103: LD_INT 3
31105: NEG
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 1
31113: NEG
31114: PUSH
31115: LD_INT 4
31117: NEG
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 2
31125: PUSH
31126: LD_INT 2
31128: NEG
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 2
31136: NEG
31137: PUSH
31138: LD_INT 4
31140: NEG
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 4
31148: PUSH
31149: LD_INT 0
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 4
31158: PUSH
31159: LD_INT 1
31161: NEG
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 5
31169: PUSH
31170: LD_INT 0
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 5
31179: PUSH
31180: LD_INT 1
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 4
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 3
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 3
31209: PUSH
31210: LD_INT 1
31212: NEG
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 3
31220: PUSH
31221: LD_INT 2
31223: NEG
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 5
31231: PUSH
31232: LD_INT 2
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31286: LD_ADDR_VAR 0 32
31290: PUSH
31291: LD_INT 4
31293: NEG
31294: PUSH
31295: LD_INT 0
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 4
31304: NEG
31305: PUSH
31306: LD_INT 1
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 3
31316: NEG
31317: PUSH
31318: LD_INT 0
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 3
31327: NEG
31328: PUSH
31329: LD_INT 1
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 4
31338: NEG
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 5
31349: NEG
31350: PUSH
31351: LD_INT 0
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 5
31360: NEG
31361: PUSH
31362: LD_INT 1
31364: NEG
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 5
31372: NEG
31373: PUSH
31374: LD_INT 2
31376: NEG
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 3
31384: NEG
31385: PUSH
31386: LD_INT 2
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 3
31395: NEG
31396: PUSH
31397: LD_INT 3
31399: NEG
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 3
31407: NEG
31408: PUSH
31409: LD_INT 4
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 2
31419: NEG
31420: PUSH
31421: LD_INT 3
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 2
31431: NEG
31432: PUSH
31433: LD_INT 2
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 3
31443: NEG
31444: PUSH
31445: LD_INT 2
31447: NEG
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 4
31455: NEG
31456: PUSH
31457: LD_INT 3
31459: NEG
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 4
31467: NEG
31468: PUSH
31469: LD_INT 4
31471: NEG
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 2
31479: NEG
31480: PUSH
31481: LD_INT 4
31483: NEG
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 4
31491: NEG
31492: PUSH
31493: LD_INT 2
31495: NEG
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: LD_INT 4
31506: NEG
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 0
31514: PUSH
31515: LD_INT 5
31517: NEG
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 1
31525: PUSH
31526: LD_INT 4
31528: NEG
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: LD_INT 3
31539: NEG
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 0
31547: PUSH
31548: LD_INT 3
31550: NEG
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 1
31558: NEG
31559: PUSH
31560: LD_INT 4
31562: NEG
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 1
31570: NEG
31571: PUSH
31572: LD_INT 5
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 2
31582: PUSH
31583: LD_INT 3
31585: NEG
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 2
31593: NEG
31594: PUSH
31595: LD_INT 5
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 3
31605: PUSH
31606: LD_INT 0
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 3
31615: PUSH
31616: LD_INT 1
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 4
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 4
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 3
31646: PUSH
31647: LD_INT 1
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 2
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 2
31666: PUSH
31667: LD_INT 1
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 2
31677: PUSH
31678: LD_INT 2
31680: NEG
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 4
31688: PUSH
31689: LD_INT 2
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 4
31698: PUSH
31699: LD_INT 4
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 4
31708: PUSH
31709: LD_INT 3
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 5
31718: PUSH
31719: LD_INT 4
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 5
31728: PUSH
31729: LD_INT 5
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 4
31738: PUSH
31739: LD_INT 5
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 3
31748: PUSH
31749: LD_INT 4
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 3
31758: PUSH
31759: LD_INT 3
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 5
31768: PUSH
31769: LD_INT 3
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 3
31778: PUSH
31779: LD_INT 5
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31833: LD_ADDR_VAR 0 33
31837: PUSH
31838: LD_INT 4
31840: NEG
31841: PUSH
31842: LD_INT 4
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 4
31852: NEG
31853: PUSH
31854: LD_INT 5
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 3
31864: NEG
31865: PUSH
31866: LD_INT 4
31868: NEG
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 3
31876: NEG
31877: PUSH
31878: LD_INT 3
31880: NEG
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 4
31888: NEG
31889: PUSH
31890: LD_INT 3
31892: NEG
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 5
31900: NEG
31901: PUSH
31902: LD_INT 4
31904: NEG
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 5
31912: NEG
31913: PUSH
31914: LD_INT 5
31916: NEG
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 3
31924: NEG
31925: PUSH
31926: LD_INT 5
31928: NEG
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 5
31936: NEG
31937: PUSH
31938: LD_INT 3
31940: NEG
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 0
31948: PUSH
31949: LD_INT 3
31951: NEG
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 0
31959: PUSH
31960: LD_INT 4
31962: NEG
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 1
31970: PUSH
31971: LD_INT 3
31973: NEG
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 1
31981: PUSH
31982: LD_INT 2
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 0
31992: PUSH
31993: LD_INT 2
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: NEG
32004: PUSH
32005: LD_INT 3
32007: NEG
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 1
32015: NEG
32016: PUSH
32017: LD_INT 4
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 2
32027: PUSH
32028: LD_INT 2
32030: NEG
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 2
32038: NEG
32039: PUSH
32040: LD_INT 4
32042: NEG
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 4
32050: PUSH
32051: LD_INT 0
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 4
32060: PUSH
32061: LD_INT 1
32063: NEG
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 5
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 5
32081: PUSH
32082: LD_INT 1
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 4
32091: PUSH
32092: LD_INT 1
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 3
32101: PUSH
32102: LD_INT 0
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 3
32111: PUSH
32112: LD_INT 1
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 3
32122: PUSH
32123: LD_INT 2
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 5
32133: PUSH
32134: LD_INT 2
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 3
32143: PUSH
32144: LD_INT 3
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 3
32153: PUSH
32154: LD_INT 2
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 4
32163: PUSH
32164: LD_INT 3
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 4
32173: PUSH
32174: LD_INT 4
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 3
32183: PUSH
32184: LD_INT 4
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 2
32193: PUSH
32194: LD_INT 3
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 2
32203: PUSH
32204: LD_INT 2
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 4
32213: PUSH
32214: LD_INT 2
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 2
32223: PUSH
32224: LD_INT 4
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 0
32233: PUSH
32234: LD_INT 4
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: LD_INT 3
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 1
32253: PUSH
32254: LD_INT 4
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 1
32263: PUSH
32264: LD_INT 5
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 0
32273: PUSH
32274: LD_INT 5
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 1
32283: NEG
32284: PUSH
32285: LD_INT 4
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 1
32294: NEG
32295: PUSH
32296: LD_INT 3
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 2
32305: PUSH
32306: LD_INT 5
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 2
32315: NEG
32316: PUSH
32317: LD_INT 3
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32371: LD_ADDR_VAR 0 34
32375: PUSH
32376: LD_INT 0
32378: PUSH
32379: LD_INT 4
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 0
32389: PUSH
32390: LD_INT 5
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 1
32400: PUSH
32401: LD_INT 4
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 1
32411: PUSH
32412: LD_INT 3
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 0
32422: PUSH
32423: LD_INT 3
32425: NEG
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 1
32433: NEG
32434: PUSH
32435: LD_INT 4
32437: NEG
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 1
32445: NEG
32446: PUSH
32447: LD_INT 5
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 2
32457: PUSH
32458: LD_INT 3
32460: NEG
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 2
32468: NEG
32469: PUSH
32470: LD_INT 5
32472: NEG
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 3
32480: PUSH
32481: LD_INT 0
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 3
32490: PUSH
32491: LD_INT 1
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 4
32501: PUSH
32502: LD_INT 0
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 4
32511: PUSH
32512: LD_INT 1
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 3
32521: PUSH
32522: LD_INT 1
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 2
32531: PUSH
32532: LD_INT 0
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 2
32541: PUSH
32542: LD_INT 1
32544: NEG
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 2
32552: PUSH
32553: LD_INT 2
32555: NEG
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 4
32563: PUSH
32564: LD_INT 2
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 4
32573: PUSH
32574: LD_INT 4
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 4
32583: PUSH
32584: LD_INT 3
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 5
32593: PUSH
32594: LD_INT 4
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 5
32603: PUSH
32604: LD_INT 5
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 4
32613: PUSH
32614: LD_INT 5
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 3
32623: PUSH
32624: LD_INT 4
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 3
32633: PUSH
32634: LD_INT 3
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 5
32643: PUSH
32644: LD_INT 3
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 3
32653: PUSH
32654: LD_INT 5
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: LD_INT 3
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: LD_INT 2
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: LD_INT 3
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: LD_INT 4
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: LD_INT 4
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: LD_INT 3
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 2
32735: PUSH
32736: LD_INT 4
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 2
32745: NEG
32746: PUSH
32747: LD_INT 2
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 4
32756: NEG
32757: PUSH
32758: LD_INT 0
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 4
32767: NEG
32768: PUSH
32769: LD_INT 1
32771: NEG
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 3
32779: NEG
32780: PUSH
32781: LD_INT 0
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 3
32790: NEG
32791: PUSH
32792: LD_INT 1
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 4
32801: NEG
32802: PUSH
32803: LD_INT 1
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 5
32812: NEG
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 5
32823: NEG
32824: PUSH
32825: LD_INT 1
32827: NEG
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 5
32835: NEG
32836: PUSH
32837: LD_INT 2
32839: NEG
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 3
32847: NEG
32848: PUSH
32849: LD_INT 2
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: ST_TO_ADDR
// end ; end ;
32903: GO 32906
32905: POP
// case btype of b_depot , b_warehouse :
32906: LD_VAR 0 1
32910: PUSH
32911: LD_INT 0
32913: DOUBLE
32914: EQUAL
32915: IFTRUE 32925
32917: LD_INT 1
32919: DOUBLE
32920: EQUAL
32921: IFTRUE 32925
32923: GO 33126
32925: POP
// case nation of nation_american :
32926: LD_VAR 0 5
32930: PUSH
32931: LD_INT 1
32933: DOUBLE
32934: EQUAL
32935: IFTRUE 32939
32937: GO 32995
32939: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32940: LD_ADDR_VAR 0 9
32944: PUSH
32945: LD_VAR 0 11
32949: PUSH
32950: LD_VAR 0 12
32954: PUSH
32955: LD_VAR 0 13
32959: PUSH
32960: LD_VAR 0 14
32964: PUSH
32965: LD_VAR 0 15
32969: PUSH
32970: LD_VAR 0 16
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: PUSH
32983: LD_VAR 0 4
32987: PUSH
32988: LD_INT 1
32990: PLUS
32991: ARRAY
32992: ST_TO_ADDR
32993: GO 33124
32995: LD_INT 2
32997: DOUBLE
32998: EQUAL
32999: IFTRUE 33003
33001: GO 33059
33003: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33004: LD_ADDR_VAR 0 9
33008: PUSH
33009: LD_VAR 0 17
33013: PUSH
33014: LD_VAR 0 18
33018: PUSH
33019: LD_VAR 0 19
33023: PUSH
33024: LD_VAR 0 20
33028: PUSH
33029: LD_VAR 0 21
33033: PUSH
33034: LD_VAR 0 22
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: PUSH
33047: LD_VAR 0 4
33051: PUSH
33052: LD_INT 1
33054: PLUS
33055: ARRAY
33056: ST_TO_ADDR
33057: GO 33124
33059: LD_INT 3
33061: DOUBLE
33062: EQUAL
33063: IFTRUE 33067
33065: GO 33123
33067: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33068: LD_ADDR_VAR 0 9
33072: PUSH
33073: LD_VAR 0 23
33077: PUSH
33078: LD_VAR 0 24
33082: PUSH
33083: LD_VAR 0 25
33087: PUSH
33088: LD_VAR 0 26
33092: PUSH
33093: LD_VAR 0 27
33097: PUSH
33098: LD_VAR 0 28
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: PUSH
33111: LD_VAR 0 4
33115: PUSH
33116: LD_INT 1
33118: PLUS
33119: ARRAY
33120: ST_TO_ADDR
33121: GO 33124
33123: POP
33124: GO 33679
33126: LD_INT 2
33128: DOUBLE
33129: EQUAL
33130: IFTRUE 33140
33132: LD_INT 3
33134: DOUBLE
33135: EQUAL
33136: IFTRUE 33140
33138: GO 33196
33140: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33141: LD_ADDR_VAR 0 9
33145: PUSH
33146: LD_VAR 0 29
33150: PUSH
33151: LD_VAR 0 30
33155: PUSH
33156: LD_VAR 0 31
33160: PUSH
33161: LD_VAR 0 32
33165: PUSH
33166: LD_VAR 0 33
33170: PUSH
33171: LD_VAR 0 34
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: PUSH
33184: LD_VAR 0 4
33188: PUSH
33189: LD_INT 1
33191: PLUS
33192: ARRAY
33193: ST_TO_ADDR
33194: GO 33679
33196: LD_INT 16
33198: DOUBLE
33199: EQUAL
33200: IFTRUE 33258
33202: LD_INT 17
33204: DOUBLE
33205: EQUAL
33206: IFTRUE 33258
33208: LD_INT 18
33210: DOUBLE
33211: EQUAL
33212: IFTRUE 33258
33214: LD_INT 19
33216: DOUBLE
33217: EQUAL
33218: IFTRUE 33258
33220: LD_INT 22
33222: DOUBLE
33223: EQUAL
33224: IFTRUE 33258
33226: LD_INT 20
33228: DOUBLE
33229: EQUAL
33230: IFTRUE 33258
33232: LD_INT 21
33234: DOUBLE
33235: EQUAL
33236: IFTRUE 33258
33238: LD_INT 23
33240: DOUBLE
33241: EQUAL
33242: IFTRUE 33258
33244: LD_INT 24
33246: DOUBLE
33247: EQUAL
33248: IFTRUE 33258
33250: LD_INT 25
33252: DOUBLE
33253: EQUAL
33254: IFTRUE 33258
33256: GO 33314
33258: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33259: LD_ADDR_VAR 0 9
33263: PUSH
33264: LD_VAR 0 35
33268: PUSH
33269: LD_VAR 0 36
33273: PUSH
33274: LD_VAR 0 37
33278: PUSH
33279: LD_VAR 0 38
33283: PUSH
33284: LD_VAR 0 39
33288: PUSH
33289: LD_VAR 0 40
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: PUSH
33302: LD_VAR 0 4
33306: PUSH
33307: LD_INT 1
33309: PLUS
33310: ARRAY
33311: ST_TO_ADDR
33312: GO 33679
33314: LD_INT 6
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33370
33320: LD_INT 7
33322: DOUBLE
33323: EQUAL
33324: IFTRUE 33370
33326: LD_INT 8
33328: DOUBLE
33329: EQUAL
33330: IFTRUE 33370
33332: LD_INT 13
33334: DOUBLE
33335: EQUAL
33336: IFTRUE 33370
33338: LD_INT 12
33340: DOUBLE
33341: EQUAL
33342: IFTRUE 33370
33344: LD_INT 15
33346: DOUBLE
33347: EQUAL
33348: IFTRUE 33370
33350: LD_INT 11
33352: DOUBLE
33353: EQUAL
33354: IFTRUE 33370
33356: LD_INT 14
33358: DOUBLE
33359: EQUAL
33360: IFTRUE 33370
33362: LD_INT 10
33364: DOUBLE
33365: EQUAL
33366: IFTRUE 33370
33368: GO 33426
33370: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33371: LD_ADDR_VAR 0 9
33375: PUSH
33376: LD_VAR 0 41
33380: PUSH
33381: LD_VAR 0 42
33385: PUSH
33386: LD_VAR 0 43
33390: PUSH
33391: LD_VAR 0 44
33395: PUSH
33396: LD_VAR 0 45
33400: PUSH
33401: LD_VAR 0 46
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: PUSH
33414: LD_VAR 0 4
33418: PUSH
33419: LD_INT 1
33421: PLUS
33422: ARRAY
33423: ST_TO_ADDR
33424: GO 33679
33426: LD_INT 36
33428: DOUBLE
33429: EQUAL
33430: IFTRUE 33434
33432: GO 33490
33434: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33435: LD_ADDR_VAR 0 9
33439: PUSH
33440: LD_VAR 0 47
33444: PUSH
33445: LD_VAR 0 48
33449: PUSH
33450: LD_VAR 0 49
33454: PUSH
33455: LD_VAR 0 50
33459: PUSH
33460: LD_VAR 0 51
33464: PUSH
33465: LD_VAR 0 52
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: PUSH
33478: LD_VAR 0 4
33482: PUSH
33483: LD_INT 1
33485: PLUS
33486: ARRAY
33487: ST_TO_ADDR
33488: GO 33679
33490: LD_INT 4
33492: DOUBLE
33493: EQUAL
33494: IFTRUE 33516
33496: LD_INT 5
33498: DOUBLE
33499: EQUAL
33500: IFTRUE 33516
33502: LD_INT 34
33504: DOUBLE
33505: EQUAL
33506: IFTRUE 33516
33508: LD_INT 37
33510: DOUBLE
33511: EQUAL
33512: IFTRUE 33516
33514: GO 33572
33516: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33517: LD_ADDR_VAR 0 9
33521: PUSH
33522: LD_VAR 0 53
33526: PUSH
33527: LD_VAR 0 54
33531: PUSH
33532: LD_VAR 0 55
33536: PUSH
33537: LD_VAR 0 56
33541: PUSH
33542: LD_VAR 0 57
33546: PUSH
33547: LD_VAR 0 58
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: PUSH
33560: LD_VAR 0 4
33564: PUSH
33565: LD_INT 1
33567: PLUS
33568: ARRAY
33569: ST_TO_ADDR
33570: GO 33679
33572: LD_INT 31
33574: DOUBLE
33575: EQUAL
33576: IFTRUE 33622
33578: LD_INT 32
33580: DOUBLE
33581: EQUAL
33582: IFTRUE 33622
33584: LD_INT 33
33586: DOUBLE
33587: EQUAL
33588: IFTRUE 33622
33590: LD_INT 27
33592: DOUBLE
33593: EQUAL
33594: IFTRUE 33622
33596: LD_INT 26
33598: DOUBLE
33599: EQUAL
33600: IFTRUE 33622
33602: LD_INT 28
33604: DOUBLE
33605: EQUAL
33606: IFTRUE 33622
33608: LD_INT 29
33610: DOUBLE
33611: EQUAL
33612: IFTRUE 33622
33614: LD_INT 30
33616: DOUBLE
33617: EQUAL
33618: IFTRUE 33622
33620: GO 33678
33622: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33623: LD_ADDR_VAR 0 9
33627: PUSH
33628: LD_VAR 0 59
33632: PUSH
33633: LD_VAR 0 60
33637: PUSH
33638: LD_VAR 0 61
33642: PUSH
33643: LD_VAR 0 62
33647: PUSH
33648: LD_VAR 0 63
33652: PUSH
33653: LD_VAR 0 64
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: PUSH
33666: LD_VAR 0 4
33670: PUSH
33671: LD_INT 1
33673: PLUS
33674: ARRAY
33675: ST_TO_ADDR
33676: GO 33679
33678: POP
// temp_list2 = [ ] ;
33679: LD_ADDR_VAR 0 10
33683: PUSH
33684: EMPTY
33685: ST_TO_ADDR
// for i in temp_list do
33686: LD_ADDR_VAR 0 8
33690: PUSH
33691: LD_VAR 0 9
33695: PUSH
33696: FOR_IN
33697: IFFALSE 33749
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33699: LD_ADDR_VAR 0 10
33703: PUSH
33704: LD_VAR 0 10
33708: PUSH
33709: LD_VAR 0 8
33713: PUSH
33714: LD_INT 1
33716: ARRAY
33717: PUSH
33718: LD_VAR 0 2
33722: PLUS
33723: PUSH
33724: LD_VAR 0 8
33728: PUSH
33729: LD_INT 2
33731: ARRAY
33732: PUSH
33733: LD_VAR 0 3
33737: PLUS
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: EMPTY
33744: LIST
33745: ADD
33746: ST_TO_ADDR
33747: GO 33696
33749: POP
33750: POP
// result = temp_list2 ;
33751: LD_ADDR_VAR 0 7
33755: PUSH
33756: LD_VAR 0 10
33760: ST_TO_ADDR
// end ;
33761: LD_VAR 0 7
33765: RET
// export function EnemyInRange ( unit , dist ) ; begin
33766: LD_INT 0
33768: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33769: LD_ADDR_VAR 0 3
33773: PUSH
33774: LD_VAR 0 1
33778: PPUSH
33779: CALL_OW 255
33783: PPUSH
33784: LD_VAR 0 1
33788: PPUSH
33789: CALL_OW 250
33793: PPUSH
33794: LD_VAR 0 1
33798: PPUSH
33799: CALL_OW 251
33803: PPUSH
33804: LD_VAR 0 2
33808: PPUSH
33809: CALL 7161 0 4
33813: PUSH
33814: LD_INT 4
33816: ARRAY
33817: ST_TO_ADDR
// end ;
33818: LD_VAR 0 3
33822: RET
// export function PlayerSeeMe ( unit ) ; begin
33823: LD_INT 0
33825: PPUSH
// result := See ( your_side , unit ) ;
33826: LD_ADDR_VAR 0 2
33830: PUSH
33831: LD_OWVAR 2
33835: PPUSH
33836: LD_VAR 0 1
33840: PPUSH
33841: CALL_OW 292
33845: ST_TO_ADDR
// end ;
33846: LD_VAR 0 2
33850: RET
// export function ReverseDir ( unit ) ; begin
33851: LD_INT 0
33853: PPUSH
// if not unit then
33854: LD_VAR 0 1
33858: NOT
33859: IFFALSE 33863
// exit ;
33861: GO 33886
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33863: LD_ADDR_VAR 0 2
33867: PUSH
33868: LD_VAR 0 1
33872: PPUSH
33873: CALL_OW 254
33877: PUSH
33878: LD_INT 3
33880: PLUS
33881: PUSH
33882: LD_INT 6
33884: MOD
33885: ST_TO_ADDR
// end ;
33886: LD_VAR 0 2
33890: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
33891: LD_INT 0
33893: PPUSH
33894: PPUSH
33895: PPUSH
33896: PPUSH
33897: PPUSH
// if not hexes then
33898: LD_VAR 0 2
33902: NOT
33903: IFFALSE 33907
// exit ;
33905: GO 34055
// dist := 9999 ;
33907: LD_ADDR_VAR 0 5
33911: PUSH
33912: LD_INT 9999
33914: ST_TO_ADDR
// for i = 1 to hexes do
33915: LD_ADDR_VAR 0 4
33919: PUSH
33920: DOUBLE
33921: LD_INT 1
33923: DEC
33924: ST_TO_ADDR
33925: LD_VAR 0 2
33929: PUSH
33930: FOR_TO
33931: IFFALSE 34043
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
33933: LD_VAR 0 1
33937: PPUSH
33938: LD_VAR 0 2
33942: PUSH
33943: LD_VAR 0 4
33947: ARRAY
33948: PUSH
33949: LD_INT 1
33951: ARRAY
33952: PPUSH
33953: LD_VAR 0 2
33957: PUSH
33958: LD_VAR 0 4
33962: ARRAY
33963: PUSH
33964: LD_INT 2
33966: ARRAY
33967: PPUSH
33968: CALL_OW 297
33972: PUSH
33973: LD_VAR 0 5
33977: LESS
33978: IFFALSE 34041
// begin hex := hexes [ i ] ;
33980: LD_ADDR_VAR 0 7
33984: PUSH
33985: LD_VAR 0 2
33989: PUSH
33990: LD_VAR 0 4
33994: ARRAY
33995: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33996: LD_ADDR_VAR 0 5
34000: PUSH
34001: LD_VAR 0 1
34005: PPUSH
34006: LD_VAR 0 2
34010: PUSH
34011: LD_VAR 0 4
34015: ARRAY
34016: PUSH
34017: LD_INT 1
34019: ARRAY
34020: PPUSH
34021: LD_VAR 0 2
34025: PUSH
34026: LD_VAR 0 4
34030: ARRAY
34031: PUSH
34032: LD_INT 2
34034: ARRAY
34035: PPUSH
34036: CALL_OW 297
34040: ST_TO_ADDR
// end ; end ;
34041: GO 33930
34043: POP
34044: POP
// result := hex ;
34045: LD_ADDR_VAR 0 3
34049: PUSH
34050: LD_VAR 0 7
34054: ST_TO_ADDR
// end ;
34055: LD_VAR 0 3
34059: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34060: LD_INT 0
34062: PPUSH
34063: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34064: LD_VAR 0 1
34068: NOT
34069: PUSH
34070: LD_VAR 0 1
34074: PUSH
34075: LD_INT 21
34077: PUSH
34078: LD_INT 2
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 23
34087: PUSH
34088: LD_INT 2
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PPUSH
34099: CALL_OW 69
34103: IN
34104: NOT
34105: OR
34106: IFFALSE 34110
// exit ;
34108: GO 34157
// for i = 1 to 3 do
34110: LD_ADDR_VAR 0 3
34114: PUSH
34115: DOUBLE
34116: LD_INT 1
34118: DEC
34119: ST_TO_ADDR
34120: LD_INT 3
34122: PUSH
34123: FOR_TO
34124: IFFALSE 34155
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34126: LD_VAR 0 1
34130: PPUSH
34131: CALL_OW 250
34135: PPUSH
34136: LD_VAR 0 1
34140: PPUSH
34141: CALL_OW 251
34145: PPUSH
34146: LD_INT 1
34148: PPUSH
34149: CALL_OW 453
34153: GO 34123
34155: POP
34156: POP
// end ;
34157: LD_VAR 0 2
34161: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34162: LD_INT 0
34164: PPUSH
34165: PPUSH
34166: PPUSH
34167: PPUSH
34168: PPUSH
34169: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34170: LD_VAR 0 1
34174: NOT
34175: PUSH
34176: LD_VAR 0 2
34180: NOT
34181: OR
34182: PUSH
34183: LD_VAR 0 1
34187: PPUSH
34188: CALL_OW 314
34192: OR
34193: IFFALSE 34197
// exit ;
34195: GO 34638
// x := GetX ( enemy_unit ) ;
34197: LD_ADDR_VAR 0 7
34201: PUSH
34202: LD_VAR 0 2
34206: PPUSH
34207: CALL_OW 250
34211: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34212: LD_ADDR_VAR 0 8
34216: PUSH
34217: LD_VAR 0 2
34221: PPUSH
34222: CALL_OW 251
34226: ST_TO_ADDR
// if not x or not y then
34227: LD_VAR 0 7
34231: NOT
34232: PUSH
34233: LD_VAR 0 8
34237: NOT
34238: OR
34239: IFFALSE 34243
// exit ;
34241: GO 34638
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34243: LD_ADDR_VAR 0 6
34247: PUSH
34248: LD_VAR 0 7
34252: PPUSH
34253: LD_INT 0
34255: PPUSH
34256: LD_INT 4
34258: PPUSH
34259: CALL_OW 272
34263: PUSH
34264: LD_VAR 0 8
34268: PPUSH
34269: LD_INT 0
34271: PPUSH
34272: LD_INT 4
34274: PPUSH
34275: CALL_OW 273
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_VAR 0 7
34288: PPUSH
34289: LD_INT 1
34291: PPUSH
34292: LD_INT 4
34294: PPUSH
34295: CALL_OW 272
34299: PUSH
34300: LD_VAR 0 8
34304: PPUSH
34305: LD_INT 1
34307: PPUSH
34308: LD_INT 4
34310: PPUSH
34311: CALL_OW 273
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_VAR 0 7
34324: PPUSH
34325: LD_INT 2
34327: PPUSH
34328: LD_INT 4
34330: PPUSH
34331: CALL_OW 272
34335: PUSH
34336: LD_VAR 0 8
34340: PPUSH
34341: LD_INT 2
34343: PPUSH
34344: LD_INT 4
34346: PPUSH
34347: CALL_OW 273
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_VAR 0 7
34360: PPUSH
34361: LD_INT 3
34363: PPUSH
34364: LD_INT 4
34366: PPUSH
34367: CALL_OW 272
34371: PUSH
34372: LD_VAR 0 8
34376: PPUSH
34377: LD_INT 3
34379: PPUSH
34380: LD_INT 4
34382: PPUSH
34383: CALL_OW 273
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_VAR 0 7
34396: PPUSH
34397: LD_INT 4
34399: PPUSH
34400: LD_INT 4
34402: PPUSH
34403: CALL_OW 272
34407: PUSH
34408: LD_VAR 0 8
34412: PPUSH
34413: LD_INT 4
34415: PPUSH
34416: LD_INT 4
34418: PPUSH
34419: CALL_OW 273
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_VAR 0 7
34432: PPUSH
34433: LD_INT 5
34435: PPUSH
34436: LD_INT 4
34438: PPUSH
34439: CALL_OW 272
34443: PUSH
34444: LD_VAR 0 8
34448: PPUSH
34449: LD_INT 5
34451: PPUSH
34452: LD_INT 4
34454: PPUSH
34455: CALL_OW 273
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: ST_TO_ADDR
// for i = tmp downto 1 do
34472: LD_ADDR_VAR 0 4
34476: PUSH
34477: DOUBLE
34478: LD_VAR 0 6
34482: INC
34483: ST_TO_ADDR
34484: LD_INT 1
34486: PUSH
34487: FOR_DOWNTO
34488: IFFALSE 34589
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34490: LD_VAR 0 6
34494: PUSH
34495: LD_VAR 0 4
34499: ARRAY
34500: PUSH
34501: LD_INT 1
34503: ARRAY
34504: PPUSH
34505: LD_VAR 0 6
34509: PUSH
34510: LD_VAR 0 4
34514: ARRAY
34515: PUSH
34516: LD_INT 2
34518: ARRAY
34519: PPUSH
34520: CALL_OW 488
34524: NOT
34525: PUSH
34526: LD_VAR 0 6
34530: PUSH
34531: LD_VAR 0 4
34535: ARRAY
34536: PUSH
34537: LD_INT 1
34539: ARRAY
34540: PPUSH
34541: LD_VAR 0 6
34545: PUSH
34546: LD_VAR 0 4
34550: ARRAY
34551: PUSH
34552: LD_INT 2
34554: ARRAY
34555: PPUSH
34556: CALL_OW 428
34560: PUSH
34561: LD_INT 0
34563: NONEQUAL
34564: OR
34565: IFFALSE 34587
// tmp := Delete ( tmp , i ) ;
34567: LD_ADDR_VAR 0 6
34571: PUSH
34572: LD_VAR 0 6
34576: PPUSH
34577: LD_VAR 0 4
34581: PPUSH
34582: CALL_OW 3
34586: ST_TO_ADDR
34587: GO 34487
34589: POP
34590: POP
// j := GetClosestHex ( unit , tmp ) ;
34591: LD_ADDR_VAR 0 5
34595: PUSH
34596: LD_VAR 0 1
34600: PPUSH
34601: LD_VAR 0 6
34605: PPUSH
34606: CALL 33891 0 2
34610: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34611: LD_VAR 0 1
34615: PPUSH
34616: LD_VAR 0 5
34620: PUSH
34621: LD_INT 1
34623: ARRAY
34624: PPUSH
34625: LD_VAR 0 5
34629: PUSH
34630: LD_INT 2
34632: ARRAY
34633: PPUSH
34634: CALL_OW 111
// end ;
34638: LD_VAR 0 3
34642: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34643: LD_INT 0
34645: PPUSH
34646: PPUSH
34647: PPUSH
// uc_side = 0 ;
34648: LD_ADDR_OWVAR 20
34652: PUSH
34653: LD_INT 0
34655: ST_TO_ADDR
// uc_nation = 0 ;
34656: LD_ADDR_OWVAR 21
34660: PUSH
34661: LD_INT 0
34663: ST_TO_ADDR
// InitHc_All ( ) ;
34664: CALL_OW 584
// InitVc ;
34668: CALL_OW 20
// if mastodonts then
34672: LD_VAR 0 6
34676: IFFALSE 34743
// for i = 1 to mastodonts do
34678: LD_ADDR_VAR 0 11
34682: PUSH
34683: DOUBLE
34684: LD_INT 1
34686: DEC
34687: ST_TO_ADDR
34688: LD_VAR 0 6
34692: PUSH
34693: FOR_TO
34694: IFFALSE 34741
// begin vc_chassis := 31 ;
34696: LD_ADDR_OWVAR 37
34700: PUSH
34701: LD_INT 31
34703: ST_TO_ADDR
// vc_control := control_rider ;
34704: LD_ADDR_OWVAR 38
34708: PUSH
34709: LD_INT 4
34711: ST_TO_ADDR
// animal := CreateVehicle ;
34712: LD_ADDR_VAR 0 12
34716: PUSH
34717: CALL_OW 45
34721: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34722: LD_VAR 0 12
34726: PPUSH
34727: LD_VAR 0 8
34731: PPUSH
34732: LD_INT 0
34734: PPUSH
34735: CALL 36931 0 3
// end ;
34739: GO 34693
34741: POP
34742: POP
// if horses then
34743: LD_VAR 0 5
34747: IFFALSE 34814
// for i = 1 to horses do
34749: LD_ADDR_VAR 0 11
34753: PUSH
34754: DOUBLE
34755: LD_INT 1
34757: DEC
34758: ST_TO_ADDR
34759: LD_VAR 0 5
34763: PUSH
34764: FOR_TO
34765: IFFALSE 34812
// begin hc_class := 21 ;
34767: LD_ADDR_OWVAR 28
34771: PUSH
34772: LD_INT 21
34774: ST_TO_ADDR
// hc_gallery :=  ;
34775: LD_ADDR_OWVAR 33
34779: PUSH
34780: LD_STRING 
34782: ST_TO_ADDR
// animal := CreateHuman ;
34783: LD_ADDR_VAR 0 12
34787: PUSH
34788: CALL_OW 44
34792: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34793: LD_VAR 0 12
34797: PPUSH
34798: LD_VAR 0 8
34802: PPUSH
34803: LD_INT 0
34805: PPUSH
34806: CALL 36931 0 3
// end ;
34810: GO 34764
34812: POP
34813: POP
// if birds then
34814: LD_VAR 0 1
34818: IFFALSE 34885
// for i = 1 to birds do
34820: LD_ADDR_VAR 0 11
34824: PUSH
34825: DOUBLE
34826: LD_INT 1
34828: DEC
34829: ST_TO_ADDR
34830: LD_VAR 0 1
34834: PUSH
34835: FOR_TO
34836: IFFALSE 34883
// begin hc_class = 18 ;
34838: LD_ADDR_OWVAR 28
34842: PUSH
34843: LD_INT 18
34845: ST_TO_ADDR
// hc_gallery =  ;
34846: LD_ADDR_OWVAR 33
34850: PUSH
34851: LD_STRING 
34853: ST_TO_ADDR
// animal := CreateHuman ;
34854: LD_ADDR_VAR 0 12
34858: PUSH
34859: CALL_OW 44
34863: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34864: LD_VAR 0 12
34868: PPUSH
34869: LD_VAR 0 8
34873: PPUSH
34874: LD_INT 0
34876: PPUSH
34877: CALL 36931 0 3
// end ;
34881: GO 34835
34883: POP
34884: POP
// if tigers then
34885: LD_VAR 0 2
34889: IFFALSE 34973
// for i = 1 to tigers do
34891: LD_ADDR_VAR 0 11
34895: PUSH
34896: DOUBLE
34897: LD_INT 1
34899: DEC
34900: ST_TO_ADDR
34901: LD_VAR 0 2
34905: PUSH
34906: FOR_TO
34907: IFFALSE 34971
// begin hc_class = class_tiger ;
34909: LD_ADDR_OWVAR 28
34913: PUSH
34914: LD_INT 14
34916: ST_TO_ADDR
// hc_gallery =  ;
34917: LD_ADDR_OWVAR 33
34921: PUSH
34922: LD_STRING 
34924: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34925: LD_ADDR_OWVAR 35
34929: PUSH
34930: LD_INT 7
34932: NEG
34933: PPUSH
34934: LD_INT 7
34936: PPUSH
34937: CALL_OW 12
34941: ST_TO_ADDR
// animal := CreateHuman ;
34942: LD_ADDR_VAR 0 12
34946: PUSH
34947: CALL_OW 44
34951: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34952: LD_VAR 0 12
34956: PPUSH
34957: LD_VAR 0 8
34961: PPUSH
34962: LD_INT 0
34964: PPUSH
34965: CALL 36931 0 3
// end ;
34969: GO 34906
34971: POP
34972: POP
// if apemans then
34973: LD_VAR 0 3
34977: IFFALSE 35100
// for i = 1 to apemans do
34979: LD_ADDR_VAR 0 11
34983: PUSH
34984: DOUBLE
34985: LD_INT 1
34987: DEC
34988: ST_TO_ADDR
34989: LD_VAR 0 3
34993: PUSH
34994: FOR_TO
34995: IFFALSE 35098
// begin hc_class = class_apeman ;
34997: LD_ADDR_OWVAR 28
35001: PUSH
35002: LD_INT 12
35004: ST_TO_ADDR
// hc_gallery =  ;
35005: LD_ADDR_OWVAR 33
35009: PUSH
35010: LD_STRING 
35012: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
35013: LD_ADDR_OWVAR 35
35017: PUSH
35018: LD_INT 5
35020: NEG
35021: PPUSH
35022: LD_INT 5
35024: PPUSH
35025: CALL_OW 12
35029: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35030: LD_ADDR_OWVAR 31
35034: PUSH
35035: LD_INT 1
35037: PPUSH
35038: LD_INT 3
35040: PPUSH
35041: CALL_OW 12
35045: PUSH
35046: LD_INT 1
35048: PPUSH
35049: LD_INT 3
35051: PPUSH
35052: CALL_OW 12
35056: PUSH
35057: LD_INT 0
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: ST_TO_ADDR
// animal := CreateHuman ;
35069: LD_ADDR_VAR 0 12
35073: PUSH
35074: CALL_OW 44
35078: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35079: LD_VAR 0 12
35083: PPUSH
35084: LD_VAR 0 8
35088: PPUSH
35089: LD_INT 0
35091: PPUSH
35092: CALL 36931 0 3
// end ;
35096: GO 34994
35098: POP
35099: POP
// if enchidnas then
35100: LD_VAR 0 4
35104: IFFALSE 35171
// for i = 1 to enchidnas do
35106: LD_ADDR_VAR 0 11
35110: PUSH
35111: DOUBLE
35112: LD_INT 1
35114: DEC
35115: ST_TO_ADDR
35116: LD_VAR 0 4
35120: PUSH
35121: FOR_TO
35122: IFFALSE 35169
// begin hc_class = 13 ;
35124: LD_ADDR_OWVAR 28
35128: PUSH
35129: LD_INT 13
35131: ST_TO_ADDR
// hc_gallery =  ;
35132: LD_ADDR_OWVAR 33
35136: PUSH
35137: LD_STRING 
35139: ST_TO_ADDR
// animal := CreateHuman ;
35140: LD_ADDR_VAR 0 12
35144: PUSH
35145: CALL_OW 44
35149: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35150: LD_VAR 0 12
35154: PPUSH
35155: LD_VAR 0 8
35159: PPUSH
35160: LD_INT 0
35162: PPUSH
35163: CALL 36931 0 3
// end ;
35167: GO 35121
35169: POP
35170: POP
// if fishes then
35171: LD_VAR 0 7
35175: IFFALSE 35242
// for i = 1 to fishes do
35177: LD_ADDR_VAR 0 11
35181: PUSH
35182: DOUBLE
35183: LD_INT 1
35185: DEC
35186: ST_TO_ADDR
35187: LD_VAR 0 7
35191: PUSH
35192: FOR_TO
35193: IFFALSE 35240
// begin hc_class = 20 ;
35195: LD_ADDR_OWVAR 28
35199: PUSH
35200: LD_INT 20
35202: ST_TO_ADDR
// hc_gallery =  ;
35203: LD_ADDR_OWVAR 33
35207: PUSH
35208: LD_STRING 
35210: ST_TO_ADDR
// animal := CreateHuman ;
35211: LD_ADDR_VAR 0 12
35215: PUSH
35216: CALL_OW 44
35220: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35221: LD_VAR 0 12
35225: PPUSH
35226: LD_VAR 0 9
35230: PPUSH
35231: LD_INT 0
35233: PPUSH
35234: CALL 36931 0 3
// end ;
35238: GO 35192
35240: POP
35241: POP
// end ;
35242: LD_VAR 0 10
35246: RET
// export function WantHeal ( sci , unit ) ; begin
35247: LD_INT 0
35249: PPUSH
// if GetTaskList ( sci ) > 0 then
35250: LD_VAR 0 1
35254: PPUSH
35255: CALL_OW 437
35259: PUSH
35260: LD_INT 0
35262: GREATER
35263: IFFALSE 35333
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35265: LD_VAR 0 1
35269: PPUSH
35270: CALL_OW 437
35274: PUSH
35275: LD_INT 1
35277: ARRAY
35278: PUSH
35279: LD_INT 1
35281: ARRAY
35282: PUSH
35283: LD_STRING l
35285: EQUAL
35286: PUSH
35287: LD_VAR 0 1
35291: PPUSH
35292: CALL_OW 437
35296: PUSH
35297: LD_INT 1
35299: ARRAY
35300: PUSH
35301: LD_INT 4
35303: ARRAY
35304: PUSH
35305: LD_VAR 0 2
35309: EQUAL
35310: AND
35311: IFFALSE 35323
// result := true else
35313: LD_ADDR_VAR 0 3
35317: PUSH
35318: LD_INT 1
35320: ST_TO_ADDR
35321: GO 35331
// result := false ;
35323: LD_ADDR_VAR 0 3
35327: PUSH
35328: LD_INT 0
35330: ST_TO_ADDR
// end else
35331: GO 35341
// result := false ;
35333: LD_ADDR_VAR 0 3
35337: PUSH
35338: LD_INT 0
35340: ST_TO_ADDR
// end ;
35341: LD_VAR 0 3
35345: RET
// export function HealTarget ( sci ) ; begin
35346: LD_INT 0
35348: PPUSH
// if not sci then
35349: LD_VAR 0 1
35353: NOT
35354: IFFALSE 35358
// exit ;
35356: GO 35423
// result := 0 ;
35358: LD_ADDR_VAR 0 2
35362: PUSH
35363: LD_INT 0
35365: ST_TO_ADDR
// if GetTaskList ( sci ) then
35366: LD_VAR 0 1
35370: PPUSH
35371: CALL_OW 437
35375: IFFALSE 35423
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35377: LD_VAR 0 1
35381: PPUSH
35382: CALL_OW 437
35386: PUSH
35387: LD_INT 1
35389: ARRAY
35390: PUSH
35391: LD_INT 1
35393: ARRAY
35394: PUSH
35395: LD_STRING l
35397: EQUAL
35398: IFFALSE 35423
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35400: LD_ADDR_VAR 0 2
35404: PUSH
35405: LD_VAR 0 1
35409: PPUSH
35410: CALL_OW 437
35414: PUSH
35415: LD_INT 1
35417: ARRAY
35418: PUSH
35419: LD_INT 4
35421: ARRAY
35422: ST_TO_ADDR
// end ;
35423: LD_VAR 0 2
35427: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35428: LD_INT 0
35430: PPUSH
35431: PPUSH
35432: PPUSH
35433: PPUSH
// if not base_units then
35434: LD_VAR 0 1
35438: NOT
35439: IFFALSE 35443
// exit ;
35441: GO 35530
// result := false ;
35443: LD_ADDR_VAR 0 2
35447: PUSH
35448: LD_INT 0
35450: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35451: LD_ADDR_VAR 0 5
35455: PUSH
35456: LD_VAR 0 1
35460: PPUSH
35461: LD_INT 21
35463: PUSH
35464: LD_INT 3
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PPUSH
35471: CALL_OW 72
35475: ST_TO_ADDR
// if not tmp then
35476: LD_VAR 0 5
35480: NOT
35481: IFFALSE 35485
// exit ;
35483: GO 35530
// for i in tmp do
35485: LD_ADDR_VAR 0 3
35489: PUSH
35490: LD_VAR 0 5
35494: PUSH
35495: FOR_IN
35496: IFFALSE 35528
// begin result := EnemyInRange ( i , 22 ) ;
35498: LD_ADDR_VAR 0 2
35502: PUSH
35503: LD_VAR 0 3
35507: PPUSH
35508: LD_INT 22
35510: PPUSH
35511: CALL 33766 0 2
35515: ST_TO_ADDR
// if result then
35516: LD_VAR 0 2
35520: IFFALSE 35526
// exit ;
35522: POP
35523: POP
35524: GO 35530
// end ;
35526: GO 35495
35528: POP
35529: POP
// end ;
35530: LD_VAR 0 2
35534: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
35535: LD_INT 0
35537: PPUSH
35538: PPUSH
// if not units then
35539: LD_VAR 0 1
35543: NOT
35544: IFFALSE 35548
// exit ;
35546: GO 35618
// result := [ ] ;
35548: LD_ADDR_VAR 0 3
35552: PUSH
35553: EMPTY
35554: ST_TO_ADDR
// for i in units do
35555: LD_ADDR_VAR 0 4
35559: PUSH
35560: LD_VAR 0 1
35564: PUSH
35565: FOR_IN
35566: IFFALSE 35616
// if GetTag ( i ) = tag then
35568: LD_VAR 0 4
35572: PPUSH
35573: CALL_OW 110
35577: PUSH
35578: LD_VAR 0 2
35582: EQUAL
35583: IFFALSE 35614
// result := Insert ( result , result + 1 , i ) ;
35585: LD_ADDR_VAR 0 3
35589: PUSH
35590: LD_VAR 0 3
35594: PPUSH
35595: LD_VAR 0 3
35599: PUSH
35600: LD_INT 1
35602: PLUS
35603: PPUSH
35604: LD_VAR 0 4
35608: PPUSH
35609: CALL_OW 2
35613: ST_TO_ADDR
35614: GO 35565
35616: POP
35617: POP
// end ;
35618: LD_VAR 0 3
35622: RET
// export function IsDriver ( un ) ; begin
35623: LD_INT 0
35625: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35626: LD_ADDR_VAR 0 2
35630: PUSH
35631: LD_VAR 0 1
35635: PUSH
35636: LD_INT 55
35638: PUSH
35639: EMPTY
35640: LIST
35641: PPUSH
35642: CALL_OW 69
35646: IN
35647: ST_TO_ADDR
// end ;
35648: LD_VAR 0 2
35652: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35653: LD_INT 0
35655: PPUSH
35656: PPUSH
// list := [ ] ;
35657: LD_ADDR_VAR 0 5
35661: PUSH
35662: EMPTY
35663: ST_TO_ADDR
// case d of 0 :
35664: LD_VAR 0 3
35668: PUSH
35669: LD_INT 0
35671: DOUBLE
35672: EQUAL
35673: IFTRUE 35677
35675: GO 35810
35677: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35678: LD_ADDR_VAR 0 5
35682: PUSH
35683: LD_VAR 0 1
35687: PUSH
35688: LD_INT 4
35690: MINUS
35691: PUSH
35692: LD_VAR 0 2
35696: PUSH
35697: LD_INT 4
35699: MINUS
35700: PUSH
35701: LD_INT 2
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: LIST
35708: PUSH
35709: LD_VAR 0 1
35713: PUSH
35714: LD_INT 3
35716: MINUS
35717: PUSH
35718: LD_VAR 0 2
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: LIST
35730: PUSH
35731: LD_VAR 0 1
35735: PUSH
35736: LD_INT 4
35738: PLUS
35739: PUSH
35740: LD_VAR 0 2
35744: PUSH
35745: LD_INT 4
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: LIST
35752: PUSH
35753: LD_VAR 0 1
35757: PUSH
35758: LD_INT 3
35760: PLUS
35761: PUSH
35762: LD_VAR 0 2
35766: PUSH
35767: LD_INT 3
35769: PLUS
35770: PUSH
35771: LD_INT 5
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: LIST
35778: PUSH
35779: LD_VAR 0 1
35783: PUSH
35784: LD_VAR 0 2
35788: PUSH
35789: LD_INT 4
35791: PLUS
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: LIST
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: ST_TO_ADDR
// end ; 1 :
35808: GO 36508
35810: LD_INT 1
35812: DOUBLE
35813: EQUAL
35814: IFTRUE 35818
35816: GO 35951
35818: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35819: LD_ADDR_VAR 0 5
35823: PUSH
35824: LD_VAR 0 1
35828: PUSH
35829: LD_VAR 0 2
35833: PUSH
35834: LD_INT 4
35836: MINUS
35837: PUSH
35838: LD_INT 3
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: LIST
35845: PUSH
35846: LD_VAR 0 1
35850: PUSH
35851: LD_INT 3
35853: MINUS
35854: PUSH
35855: LD_VAR 0 2
35859: PUSH
35860: LD_INT 3
35862: MINUS
35863: PUSH
35864: LD_INT 2
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: LIST
35871: PUSH
35872: LD_VAR 0 1
35876: PUSH
35877: LD_INT 4
35879: MINUS
35880: PUSH
35881: LD_VAR 0 2
35885: PUSH
35886: LD_INT 1
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: LIST
35893: PUSH
35894: LD_VAR 0 1
35898: PUSH
35899: LD_VAR 0 2
35903: PUSH
35904: LD_INT 3
35906: PLUS
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: PUSH
35916: LD_VAR 0 1
35920: PUSH
35921: LD_INT 4
35923: PLUS
35924: PUSH
35925: LD_VAR 0 2
35929: PUSH
35930: LD_INT 4
35932: PLUS
35933: PUSH
35934: LD_INT 5
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: LIST
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: ST_TO_ADDR
// end ; 2 :
35949: GO 36508
35951: LD_INT 2
35953: DOUBLE
35954: EQUAL
35955: IFTRUE 35959
35957: GO 36088
35959: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35960: LD_ADDR_VAR 0 5
35964: PUSH
35965: LD_VAR 0 1
35969: PUSH
35970: LD_VAR 0 2
35974: PUSH
35975: LD_INT 3
35977: MINUS
35978: PUSH
35979: LD_INT 3
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: LIST
35986: PUSH
35987: LD_VAR 0 1
35991: PUSH
35992: LD_INT 4
35994: PLUS
35995: PUSH
35996: LD_VAR 0 2
36000: PUSH
36001: LD_INT 4
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: LIST
36008: PUSH
36009: LD_VAR 0 1
36013: PUSH
36014: LD_VAR 0 2
36018: PUSH
36019: LD_INT 4
36021: PLUS
36022: PUSH
36023: LD_INT 0
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: LIST
36030: PUSH
36031: LD_VAR 0 1
36035: PUSH
36036: LD_INT 3
36038: MINUS
36039: PUSH
36040: LD_VAR 0 2
36044: PUSH
36045: LD_INT 1
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: LIST
36052: PUSH
36053: LD_VAR 0 1
36057: PUSH
36058: LD_INT 4
36060: MINUS
36061: PUSH
36062: LD_VAR 0 2
36066: PUSH
36067: LD_INT 4
36069: MINUS
36070: PUSH
36071: LD_INT 2
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: LIST
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: ST_TO_ADDR
// end ; 3 :
36086: GO 36508
36088: LD_INT 3
36090: DOUBLE
36091: EQUAL
36092: IFTRUE 36096
36094: GO 36229
36096: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36097: LD_ADDR_VAR 0 5
36101: PUSH
36102: LD_VAR 0 1
36106: PUSH
36107: LD_INT 3
36109: PLUS
36110: PUSH
36111: LD_VAR 0 2
36115: PUSH
36116: LD_INT 4
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: LIST
36123: PUSH
36124: LD_VAR 0 1
36128: PUSH
36129: LD_INT 4
36131: PLUS
36132: PUSH
36133: LD_VAR 0 2
36137: PUSH
36138: LD_INT 4
36140: PLUS
36141: PUSH
36142: LD_INT 5
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: LIST
36149: PUSH
36150: LD_VAR 0 1
36154: PUSH
36155: LD_INT 4
36157: MINUS
36158: PUSH
36159: LD_VAR 0 2
36163: PUSH
36164: LD_INT 1
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: LIST
36171: PUSH
36172: LD_VAR 0 1
36176: PUSH
36177: LD_VAR 0 2
36181: PUSH
36182: LD_INT 4
36184: MINUS
36185: PUSH
36186: LD_INT 3
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: LIST
36193: PUSH
36194: LD_VAR 0 1
36198: PUSH
36199: LD_INT 3
36201: MINUS
36202: PUSH
36203: LD_VAR 0 2
36207: PUSH
36208: LD_INT 3
36210: MINUS
36211: PUSH
36212: LD_INT 2
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: LIST
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: ST_TO_ADDR
// end ; 4 :
36227: GO 36508
36229: LD_INT 4
36231: DOUBLE
36232: EQUAL
36233: IFTRUE 36237
36235: GO 36370
36237: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36238: LD_ADDR_VAR 0 5
36242: PUSH
36243: LD_VAR 0 1
36247: PUSH
36248: LD_VAR 0 2
36252: PUSH
36253: LD_INT 4
36255: PLUS
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: LIST
36264: PUSH
36265: LD_VAR 0 1
36269: PUSH
36270: LD_INT 3
36272: PLUS
36273: PUSH
36274: LD_VAR 0 2
36278: PUSH
36279: LD_INT 3
36281: PLUS
36282: PUSH
36283: LD_INT 5
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: LIST
36290: PUSH
36291: LD_VAR 0 1
36295: PUSH
36296: LD_INT 4
36298: PLUS
36299: PUSH
36300: LD_VAR 0 2
36304: PUSH
36305: LD_INT 4
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: LIST
36312: PUSH
36313: LD_VAR 0 1
36317: PUSH
36318: LD_VAR 0 2
36322: PUSH
36323: LD_INT 3
36325: MINUS
36326: PUSH
36327: LD_INT 3
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: LIST
36334: PUSH
36335: LD_VAR 0 1
36339: PUSH
36340: LD_INT 4
36342: MINUS
36343: PUSH
36344: LD_VAR 0 2
36348: PUSH
36349: LD_INT 4
36351: MINUS
36352: PUSH
36353: LD_INT 2
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: LIST
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: ST_TO_ADDR
// end ; 5 :
36368: GO 36508
36370: LD_INT 5
36372: DOUBLE
36373: EQUAL
36374: IFTRUE 36378
36376: GO 36507
36378: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36379: LD_ADDR_VAR 0 5
36383: PUSH
36384: LD_VAR 0 1
36388: PUSH
36389: LD_INT 4
36391: MINUS
36392: PUSH
36393: LD_VAR 0 2
36397: PUSH
36398: LD_INT 1
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: LIST
36405: PUSH
36406: LD_VAR 0 1
36410: PUSH
36411: LD_VAR 0 2
36415: PUSH
36416: LD_INT 4
36418: MINUS
36419: PUSH
36420: LD_INT 3
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: LIST
36427: PUSH
36428: LD_VAR 0 1
36432: PUSH
36433: LD_INT 4
36435: PLUS
36436: PUSH
36437: LD_VAR 0 2
36441: PUSH
36442: LD_INT 4
36444: PLUS
36445: PUSH
36446: LD_INT 5
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: PUSH
36454: LD_VAR 0 1
36458: PUSH
36459: LD_INT 3
36461: PLUS
36462: PUSH
36463: LD_VAR 0 2
36467: PUSH
36468: LD_INT 4
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: LIST
36475: PUSH
36476: LD_VAR 0 1
36480: PUSH
36481: LD_VAR 0 2
36485: PUSH
36486: LD_INT 3
36488: PLUS
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: LIST
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: ST_TO_ADDR
// end ; end ;
36505: GO 36508
36507: POP
// result := list ;
36508: LD_ADDR_VAR 0 4
36512: PUSH
36513: LD_VAR 0 5
36517: ST_TO_ADDR
// end ;
36518: LD_VAR 0 4
36522: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36523: LD_INT 0
36525: PPUSH
36526: PPUSH
36527: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36528: LD_VAR 0 1
36532: NOT
36533: PUSH
36534: LD_VAR 0 2
36538: PUSH
36539: LD_INT 1
36541: PUSH
36542: LD_INT 2
36544: PUSH
36545: LD_INT 3
36547: PUSH
36548: LD_INT 4
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: IN
36557: NOT
36558: OR
36559: IFFALSE 36563
// exit ;
36561: GO 36655
// tmp := [ ] ;
36563: LD_ADDR_VAR 0 5
36567: PUSH
36568: EMPTY
36569: ST_TO_ADDR
// for i in units do
36570: LD_ADDR_VAR 0 4
36574: PUSH
36575: LD_VAR 0 1
36579: PUSH
36580: FOR_IN
36581: IFFALSE 36624
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
36583: LD_ADDR_VAR 0 5
36587: PUSH
36588: LD_VAR 0 5
36592: PPUSH
36593: LD_VAR 0 5
36597: PUSH
36598: LD_INT 1
36600: PLUS
36601: PPUSH
36602: LD_VAR 0 4
36606: PPUSH
36607: LD_VAR 0 2
36611: PPUSH
36612: CALL_OW 259
36616: PPUSH
36617: CALL_OW 2
36621: ST_TO_ADDR
36622: GO 36580
36624: POP
36625: POP
// if not tmp then
36626: LD_VAR 0 5
36630: NOT
36631: IFFALSE 36635
// exit ;
36633: GO 36655
// result := SortListByListDesc ( units , tmp ) ;
36635: LD_ADDR_VAR 0 3
36639: PUSH
36640: LD_VAR 0 1
36644: PPUSH
36645: LD_VAR 0 5
36649: PPUSH
36650: CALL_OW 77
36654: ST_TO_ADDR
// end ;
36655: LD_VAR 0 3
36659: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36660: LD_INT 0
36662: PPUSH
36663: PPUSH
36664: PPUSH
// result := false ;
36665: LD_ADDR_VAR 0 3
36669: PUSH
36670: LD_INT 0
36672: ST_TO_ADDR
// x := GetX ( building ) ;
36673: LD_ADDR_VAR 0 4
36677: PUSH
36678: LD_VAR 0 2
36682: PPUSH
36683: CALL_OW 250
36687: ST_TO_ADDR
// y := GetY ( building ) ;
36688: LD_ADDR_VAR 0 5
36692: PUSH
36693: LD_VAR 0 2
36697: PPUSH
36698: CALL_OW 251
36702: ST_TO_ADDR
// if not building or not x or not y then
36703: LD_VAR 0 2
36707: NOT
36708: PUSH
36709: LD_VAR 0 4
36713: NOT
36714: OR
36715: PUSH
36716: LD_VAR 0 5
36720: NOT
36721: OR
36722: IFFALSE 36726
// exit ;
36724: GO 36818
// if GetTaskList ( unit ) then
36726: LD_VAR 0 1
36730: PPUSH
36731: CALL_OW 437
36735: IFFALSE 36818
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36737: LD_STRING e
36739: PUSH
36740: LD_VAR 0 1
36744: PPUSH
36745: CALL_OW 437
36749: PUSH
36750: LD_INT 1
36752: ARRAY
36753: PUSH
36754: LD_INT 1
36756: ARRAY
36757: EQUAL
36758: PUSH
36759: LD_VAR 0 4
36763: PUSH
36764: LD_VAR 0 1
36768: PPUSH
36769: CALL_OW 437
36773: PUSH
36774: LD_INT 1
36776: ARRAY
36777: PUSH
36778: LD_INT 2
36780: ARRAY
36781: EQUAL
36782: AND
36783: PUSH
36784: LD_VAR 0 5
36788: PUSH
36789: LD_VAR 0 1
36793: PPUSH
36794: CALL_OW 437
36798: PUSH
36799: LD_INT 1
36801: ARRAY
36802: PUSH
36803: LD_INT 3
36805: ARRAY
36806: EQUAL
36807: AND
36808: IFFALSE 36818
// result := true end ;
36810: LD_ADDR_VAR 0 3
36814: PUSH
36815: LD_INT 1
36817: ST_TO_ADDR
// end ;
36818: LD_VAR 0 3
36822: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36823: LD_INT 0
36825: PPUSH
// result := false ;
36826: LD_ADDR_VAR 0 4
36830: PUSH
36831: LD_INT 0
36833: ST_TO_ADDR
// if GetTaskList ( unit ) then
36834: LD_VAR 0 1
36838: PPUSH
36839: CALL_OW 437
36843: IFFALSE 36926
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36845: LD_STRING M
36847: PUSH
36848: LD_VAR 0 1
36852: PPUSH
36853: CALL_OW 437
36857: PUSH
36858: LD_INT 1
36860: ARRAY
36861: PUSH
36862: LD_INT 1
36864: ARRAY
36865: EQUAL
36866: PUSH
36867: LD_VAR 0 2
36871: PUSH
36872: LD_VAR 0 1
36876: PPUSH
36877: CALL_OW 437
36881: PUSH
36882: LD_INT 1
36884: ARRAY
36885: PUSH
36886: LD_INT 2
36888: ARRAY
36889: EQUAL
36890: AND
36891: PUSH
36892: LD_VAR 0 3
36896: PUSH
36897: LD_VAR 0 1
36901: PPUSH
36902: CALL_OW 437
36906: PUSH
36907: LD_INT 1
36909: ARRAY
36910: PUSH
36911: LD_INT 3
36913: ARRAY
36914: EQUAL
36915: AND
36916: IFFALSE 36926
// result := true ;
36918: LD_ADDR_VAR 0 4
36922: PUSH
36923: LD_INT 1
36925: ST_TO_ADDR
// end ; end ;
36926: LD_VAR 0 4
36930: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36931: LD_INT 0
36933: PPUSH
36934: PPUSH
36935: PPUSH
36936: PPUSH
// if not unit or not area then
36937: LD_VAR 0 1
36941: NOT
36942: PUSH
36943: LD_VAR 0 2
36947: NOT
36948: OR
36949: IFFALSE 36953
// exit ;
36951: GO 37117
// tmp := AreaToList ( area , i ) ;
36953: LD_ADDR_VAR 0 6
36957: PUSH
36958: LD_VAR 0 2
36962: PPUSH
36963: LD_VAR 0 5
36967: PPUSH
36968: CALL_OW 517
36972: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36973: LD_ADDR_VAR 0 5
36977: PUSH
36978: DOUBLE
36979: LD_INT 1
36981: DEC
36982: ST_TO_ADDR
36983: LD_VAR 0 6
36987: PUSH
36988: LD_INT 1
36990: ARRAY
36991: PUSH
36992: FOR_TO
36993: IFFALSE 37115
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36995: LD_ADDR_VAR 0 7
36999: PUSH
37000: LD_VAR 0 6
37004: PUSH
37005: LD_INT 1
37007: ARRAY
37008: PUSH
37009: LD_VAR 0 5
37013: ARRAY
37014: PUSH
37015: LD_VAR 0 6
37019: PUSH
37020: LD_INT 2
37022: ARRAY
37023: PUSH
37024: LD_VAR 0 5
37028: ARRAY
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
37034: LD_VAR 0 7
37038: PUSH
37039: LD_INT 1
37041: ARRAY
37042: PPUSH
37043: LD_VAR 0 7
37047: PUSH
37048: LD_INT 2
37050: ARRAY
37051: PPUSH
37052: CALL_OW 428
37056: PUSH
37057: LD_INT 0
37059: EQUAL
37060: IFFALSE 37113
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37062: LD_VAR 0 1
37066: PPUSH
37067: LD_VAR 0 7
37071: PUSH
37072: LD_INT 1
37074: ARRAY
37075: PPUSH
37076: LD_VAR 0 7
37080: PUSH
37081: LD_INT 2
37083: ARRAY
37084: PPUSH
37085: LD_VAR 0 3
37089: PPUSH
37090: CALL_OW 48
// result := IsPlaced ( unit ) ;
37094: LD_ADDR_VAR 0 4
37098: PUSH
37099: LD_VAR 0 1
37103: PPUSH
37104: CALL_OW 305
37108: ST_TO_ADDR
// exit ;
37109: POP
37110: POP
37111: GO 37117
// end ; end ;
37113: GO 36992
37115: POP
37116: POP
// end ;
37117: LD_VAR 0 4
37121: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37122: LD_INT 0
37124: PPUSH
37125: PPUSH
37126: PPUSH
// if not side or side > 8 then
37127: LD_VAR 0 1
37131: NOT
37132: PUSH
37133: LD_VAR 0 1
37137: PUSH
37138: LD_INT 8
37140: GREATER
37141: OR
37142: IFFALSE 37146
// exit ;
37144: GO 37333
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37146: LD_ADDR_VAR 0 4
37150: PUSH
37151: LD_INT 22
37153: PUSH
37154: LD_VAR 0 1
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 21
37165: PUSH
37166: LD_INT 3
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PPUSH
37177: CALL_OW 69
37181: ST_TO_ADDR
// if not tmp then
37182: LD_VAR 0 4
37186: NOT
37187: IFFALSE 37191
// exit ;
37189: GO 37333
// enable_addtolog := true ;
37191: LD_ADDR_OWVAR 81
37195: PUSH
37196: LD_INT 1
37198: ST_TO_ADDR
// AddToLog ( [ ) ;
37199: LD_STRING [
37201: PPUSH
37202: CALL_OW 561
// for i in tmp do
37206: LD_ADDR_VAR 0 3
37210: PUSH
37211: LD_VAR 0 4
37215: PUSH
37216: FOR_IN
37217: IFFALSE 37324
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37219: LD_STRING [
37221: PUSH
37222: LD_VAR 0 3
37226: PPUSH
37227: CALL_OW 266
37231: STR
37232: PUSH
37233: LD_STRING , 
37235: STR
37236: PUSH
37237: LD_VAR 0 3
37241: PPUSH
37242: CALL_OW 250
37246: STR
37247: PUSH
37248: LD_STRING , 
37250: STR
37251: PUSH
37252: LD_VAR 0 3
37256: PPUSH
37257: CALL_OW 251
37261: STR
37262: PUSH
37263: LD_STRING , 
37265: STR
37266: PUSH
37267: LD_VAR 0 3
37271: PPUSH
37272: CALL_OW 254
37276: STR
37277: PUSH
37278: LD_STRING , 
37280: STR
37281: PUSH
37282: LD_VAR 0 3
37286: PPUSH
37287: LD_INT 1
37289: PPUSH
37290: CALL_OW 268
37294: STR
37295: PUSH
37296: LD_STRING , 
37298: STR
37299: PUSH
37300: LD_VAR 0 3
37304: PPUSH
37305: LD_INT 2
37307: PPUSH
37308: CALL_OW 268
37312: STR
37313: PUSH
37314: LD_STRING ],
37316: STR
37317: PPUSH
37318: CALL_OW 561
// end ;
37322: GO 37216
37324: POP
37325: POP
// AddToLog ( ]; ) ;
37326: LD_STRING ];
37328: PPUSH
37329: CALL_OW 561
// end ;
37333: LD_VAR 0 2
37337: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37338: LD_INT 0
37340: PPUSH
37341: PPUSH
37342: PPUSH
37343: PPUSH
37344: PPUSH
// if not area or not rate or not max then
37345: LD_VAR 0 1
37349: NOT
37350: PUSH
37351: LD_VAR 0 2
37355: NOT
37356: OR
37357: PUSH
37358: LD_VAR 0 4
37362: NOT
37363: OR
37364: IFFALSE 37368
// exit ;
37366: GO 37560
// while 1 do
37368: LD_INT 1
37370: IFFALSE 37560
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37372: LD_ADDR_VAR 0 9
37376: PUSH
37377: LD_VAR 0 1
37381: PPUSH
37382: LD_INT 1
37384: PPUSH
37385: CALL_OW 287
37389: PUSH
37390: LD_INT 10
37392: MUL
37393: ST_TO_ADDR
// r := rate / 10 ;
37394: LD_ADDR_VAR 0 7
37398: PUSH
37399: LD_VAR 0 2
37403: PUSH
37404: LD_INT 10
37406: DIVREAL
37407: ST_TO_ADDR
// time := 1 1$00 ;
37408: LD_ADDR_VAR 0 8
37412: PUSH
37413: LD_INT 2100
37415: ST_TO_ADDR
// if amount < min then
37416: LD_VAR 0 9
37420: PUSH
37421: LD_VAR 0 3
37425: LESS
37426: IFFALSE 37444
// r := r * 2 else
37428: LD_ADDR_VAR 0 7
37432: PUSH
37433: LD_VAR 0 7
37437: PUSH
37438: LD_INT 2
37440: MUL
37441: ST_TO_ADDR
37442: GO 37470
// if amount > max then
37444: LD_VAR 0 9
37448: PUSH
37449: LD_VAR 0 4
37453: GREATER
37454: IFFALSE 37470
// r := r / 2 ;
37456: LD_ADDR_VAR 0 7
37460: PUSH
37461: LD_VAR 0 7
37465: PUSH
37466: LD_INT 2
37468: DIVREAL
37469: ST_TO_ADDR
// time := time / r ;
37470: LD_ADDR_VAR 0 8
37474: PUSH
37475: LD_VAR 0 8
37479: PUSH
37480: LD_VAR 0 7
37484: DIVREAL
37485: ST_TO_ADDR
// if time < 0 then
37486: LD_VAR 0 8
37490: PUSH
37491: LD_INT 0
37493: LESS
37494: IFFALSE 37511
// time := time * - 1 ;
37496: LD_ADDR_VAR 0 8
37500: PUSH
37501: LD_VAR 0 8
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: MUL
37510: ST_TO_ADDR
// wait ( time ) ;
37511: LD_VAR 0 8
37515: PPUSH
37516: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
37520: LD_INT 35
37522: PPUSH
37523: LD_INT 875
37525: PPUSH
37526: CALL_OW 12
37530: PPUSH
37531: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37535: LD_INT 1
37537: PPUSH
37538: LD_INT 5
37540: PPUSH
37541: CALL_OW 12
37545: PPUSH
37546: LD_VAR 0 1
37550: PPUSH
37551: LD_INT 1
37553: PPUSH
37554: CALL_OW 55
// end ;
37558: GO 37368
// end ;
37560: LD_VAR 0 5
37564: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37565: LD_INT 0
37567: PPUSH
37568: PPUSH
37569: PPUSH
37570: PPUSH
37571: PPUSH
37572: PPUSH
37573: PPUSH
37574: PPUSH
// if not turrets or not factories then
37575: LD_VAR 0 1
37579: NOT
37580: PUSH
37581: LD_VAR 0 2
37585: NOT
37586: OR
37587: IFFALSE 37591
// exit ;
37589: GO 37898
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37591: LD_ADDR_VAR 0 10
37595: PUSH
37596: LD_INT 5
37598: PUSH
37599: LD_INT 6
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 2
37608: PUSH
37609: LD_INT 4
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 3
37618: PUSH
37619: LD_INT 5
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 24
37633: PUSH
37634: LD_INT 25
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 23
37643: PUSH
37644: LD_INT 27
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 42
37657: PUSH
37658: LD_INT 43
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 44
37667: PUSH
37668: LD_INT 46
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 45
37677: PUSH
37678: LD_INT 47
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: LIST
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: LIST
37694: ST_TO_ADDR
// result := [ ] ;
37695: LD_ADDR_VAR 0 3
37699: PUSH
37700: EMPTY
37701: ST_TO_ADDR
// for i in turrets do
37702: LD_ADDR_VAR 0 4
37706: PUSH
37707: LD_VAR 0 1
37711: PUSH
37712: FOR_IN
37713: IFFALSE 37896
// begin nat := GetNation ( i ) ;
37715: LD_ADDR_VAR 0 7
37719: PUSH
37720: LD_VAR 0 4
37724: PPUSH
37725: CALL_OW 248
37729: ST_TO_ADDR
// weapon := 0 ;
37730: LD_ADDR_VAR 0 8
37734: PUSH
37735: LD_INT 0
37737: ST_TO_ADDR
// if not nat then
37738: LD_VAR 0 7
37742: NOT
37743: IFFALSE 37747
// continue ;
37745: GO 37712
// for j in list [ nat ] do
37747: LD_ADDR_VAR 0 5
37751: PUSH
37752: LD_VAR 0 10
37756: PUSH
37757: LD_VAR 0 7
37761: ARRAY
37762: PUSH
37763: FOR_IN
37764: IFFALSE 37805
// if GetBWeapon ( i ) = j [ 1 ] then
37766: LD_VAR 0 4
37770: PPUSH
37771: CALL_OW 269
37775: PUSH
37776: LD_VAR 0 5
37780: PUSH
37781: LD_INT 1
37783: ARRAY
37784: EQUAL
37785: IFFALSE 37803
// begin weapon := j [ 2 ] ;
37787: LD_ADDR_VAR 0 8
37791: PUSH
37792: LD_VAR 0 5
37796: PUSH
37797: LD_INT 2
37799: ARRAY
37800: ST_TO_ADDR
// break ;
37801: GO 37805
// end ;
37803: GO 37763
37805: POP
37806: POP
// if not weapon then
37807: LD_VAR 0 8
37811: NOT
37812: IFFALSE 37816
// continue ;
37814: GO 37712
// for k in factories do
37816: LD_ADDR_VAR 0 6
37820: PUSH
37821: LD_VAR 0 2
37825: PUSH
37826: FOR_IN
37827: IFFALSE 37892
// begin weapons := AvailableWeaponList ( k ) ;
37829: LD_ADDR_VAR 0 9
37833: PUSH
37834: LD_VAR 0 6
37838: PPUSH
37839: CALL_OW 478
37843: ST_TO_ADDR
// if not weapons then
37844: LD_VAR 0 9
37848: NOT
37849: IFFALSE 37853
// continue ;
37851: GO 37826
// if weapon in weapons then
37853: LD_VAR 0 8
37857: PUSH
37858: LD_VAR 0 9
37862: IN
37863: IFFALSE 37890
// begin result := [ i , weapon ] ;
37865: LD_ADDR_VAR 0 3
37869: PUSH
37870: LD_VAR 0 4
37874: PUSH
37875: LD_VAR 0 8
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: ST_TO_ADDR
// exit ;
37884: POP
37885: POP
37886: POP
37887: POP
37888: GO 37898
// end ; end ;
37890: GO 37826
37892: POP
37893: POP
// end ;
37894: GO 37712
37896: POP
37897: POP
// end ;
37898: LD_VAR 0 3
37902: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37903: LD_INT 0
37905: PPUSH
// if not side or side > 8 then
37906: LD_VAR 0 3
37910: NOT
37911: PUSH
37912: LD_VAR 0 3
37916: PUSH
37917: LD_INT 8
37919: GREATER
37920: OR
37921: IFFALSE 37925
// exit ;
37923: GO 37984
// if not range then
37925: LD_VAR 0 4
37929: NOT
37930: IFFALSE 37941
// range := - 12 ;
37932: LD_ADDR_VAR 0 4
37936: PUSH
37937: LD_INT 12
37939: NEG
37940: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37941: LD_VAR 0 1
37945: PPUSH
37946: LD_VAR 0 2
37950: PPUSH
37951: LD_VAR 0 3
37955: PPUSH
37956: LD_VAR 0 4
37960: PPUSH
37961: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37965: LD_VAR 0 1
37969: PPUSH
37970: LD_VAR 0 2
37974: PPUSH
37975: LD_VAR 0 3
37979: PPUSH
37980: CALL_OW 331
// end ;
37984: LD_VAR 0 5
37988: RET
// export function Video ( mode ) ; begin
37989: LD_INT 0
37991: PPUSH
// ingame_video = mode ;
37992: LD_ADDR_OWVAR 52
37996: PUSH
37997: LD_VAR 0 1
38001: ST_TO_ADDR
// interface_hidden = mode ;
38002: LD_ADDR_OWVAR 54
38006: PUSH
38007: LD_VAR 0 1
38011: ST_TO_ADDR
// end ;
38012: LD_VAR 0 2
38016: RET
// export function Join ( array , element ) ; begin
38017: LD_INT 0
38019: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38020: LD_ADDR_VAR 0 3
38024: PUSH
38025: LD_VAR 0 1
38029: PPUSH
38030: LD_VAR 0 1
38034: PUSH
38035: LD_INT 1
38037: PLUS
38038: PPUSH
38039: LD_VAR 0 2
38043: PPUSH
38044: CALL_OW 1
38048: ST_TO_ADDR
// end ;
38049: LD_VAR 0 3
38053: RET
// export function JoinUnion ( array , element ) ; begin
38054: LD_INT 0
38056: PPUSH
// result := array union element ;
38057: LD_ADDR_VAR 0 3
38061: PUSH
38062: LD_VAR 0 1
38066: PUSH
38067: LD_VAR 0 2
38071: UNION
38072: ST_TO_ADDR
// end ;
38073: LD_VAR 0 3
38077: RET
// export function GetBehemoths ( side ) ; begin
38078: LD_INT 0
38080: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
38081: LD_ADDR_VAR 0 2
38085: PUSH
38086: LD_INT 22
38088: PUSH
38089: LD_VAR 0 1
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 31
38100: PUSH
38101: LD_INT 25
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PPUSH
38112: CALL_OW 69
38116: ST_TO_ADDR
// end ;
38117: LD_VAR 0 2
38121: RET
// export function Shuffle ( array ) ; var i , index ; begin
38122: LD_INT 0
38124: PPUSH
38125: PPUSH
38126: PPUSH
// result := [ ] ;
38127: LD_ADDR_VAR 0 2
38131: PUSH
38132: EMPTY
38133: ST_TO_ADDR
// if not array then
38134: LD_VAR 0 1
38138: NOT
38139: IFFALSE 38143
// exit ;
38141: GO 38242
// Randomize ;
38143: CALL_OW 10
// for i = array downto 1 do
38147: LD_ADDR_VAR 0 3
38151: PUSH
38152: DOUBLE
38153: LD_VAR 0 1
38157: INC
38158: ST_TO_ADDR
38159: LD_INT 1
38161: PUSH
38162: FOR_DOWNTO
38163: IFFALSE 38240
// begin index := rand ( 1 , array ) ;
38165: LD_ADDR_VAR 0 4
38169: PUSH
38170: LD_INT 1
38172: PPUSH
38173: LD_VAR 0 1
38177: PPUSH
38178: CALL_OW 12
38182: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38183: LD_ADDR_VAR 0 2
38187: PUSH
38188: LD_VAR 0 2
38192: PPUSH
38193: LD_VAR 0 2
38197: PUSH
38198: LD_INT 1
38200: PLUS
38201: PPUSH
38202: LD_VAR 0 1
38206: PUSH
38207: LD_VAR 0 4
38211: ARRAY
38212: PPUSH
38213: CALL_OW 2
38217: ST_TO_ADDR
// array := Delete ( array , index ) ;
38218: LD_ADDR_VAR 0 1
38222: PUSH
38223: LD_VAR 0 1
38227: PPUSH
38228: LD_VAR 0 4
38232: PPUSH
38233: CALL_OW 3
38237: ST_TO_ADDR
// end ;
38238: GO 38162
38240: POP
38241: POP
// end ;
38242: LD_VAR 0 2
38246: RET
// export function GetBaseMaterials ( base ) ; begin
38247: LD_INT 0
38249: PPUSH
// result := [ 0 , 0 , 0 ] ;
38250: LD_ADDR_VAR 0 2
38254: PUSH
38255: LD_INT 0
38257: PUSH
38258: LD_INT 0
38260: PUSH
38261: LD_INT 0
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: LIST
38268: ST_TO_ADDR
// if not base then
38269: LD_VAR 0 1
38273: NOT
38274: IFFALSE 38278
// exit ;
38276: GO 38327
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38278: LD_ADDR_VAR 0 2
38282: PUSH
38283: LD_VAR 0 1
38287: PPUSH
38288: LD_INT 1
38290: PPUSH
38291: CALL_OW 275
38295: PUSH
38296: LD_VAR 0 1
38300: PPUSH
38301: LD_INT 2
38303: PPUSH
38304: CALL_OW 275
38308: PUSH
38309: LD_VAR 0 1
38313: PPUSH
38314: LD_INT 3
38316: PPUSH
38317: CALL_OW 275
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: LIST
38326: ST_TO_ADDR
// end ;
38327: LD_VAR 0 2
38331: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38332: LD_INT 0
38334: PPUSH
38335: PPUSH
// result := array ;
38336: LD_ADDR_VAR 0 3
38340: PUSH
38341: LD_VAR 0 1
38345: ST_TO_ADDR
// if size > 0 then
38346: LD_VAR 0 2
38350: PUSH
38351: LD_INT 0
38353: GREATER
38354: IFFALSE 38400
// for i := array downto size do
38356: LD_ADDR_VAR 0 4
38360: PUSH
38361: DOUBLE
38362: LD_VAR 0 1
38366: INC
38367: ST_TO_ADDR
38368: LD_VAR 0 2
38372: PUSH
38373: FOR_DOWNTO
38374: IFFALSE 38398
// result := Delete ( result , result ) ;
38376: LD_ADDR_VAR 0 3
38380: PUSH
38381: LD_VAR 0 3
38385: PPUSH
38386: LD_VAR 0 3
38390: PPUSH
38391: CALL_OW 3
38395: ST_TO_ADDR
38396: GO 38373
38398: POP
38399: POP
// end ;
38400: LD_VAR 0 3
38404: RET
// export function ComExit ( unit ) ; var tmp ; begin
38405: LD_INT 0
38407: PPUSH
38408: PPUSH
// if not IsInUnit ( unit ) then
38409: LD_VAR 0 1
38413: PPUSH
38414: CALL_OW 310
38418: NOT
38419: IFFALSE 38423
// exit ;
38421: GO 38483
// tmp := IsInUnit ( unit ) ;
38423: LD_ADDR_VAR 0 3
38427: PUSH
38428: LD_VAR 0 1
38432: PPUSH
38433: CALL_OW 310
38437: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38438: LD_VAR 0 3
38442: PPUSH
38443: CALL_OW 247
38447: PUSH
38448: LD_INT 2
38450: EQUAL
38451: IFFALSE 38464
// ComExitVehicle ( unit ) else
38453: LD_VAR 0 1
38457: PPUSH
38458: CALL_OW 121
38462: GO 38473
// ComExitBuilding ( unit ) ;
38464: LD_VAR 0 1
38468: PPUSH
38469: CALL_OW 122
// result := tmp ;
38473: LD_ADDR_VAR 0 2
38477: PUSH
38478: LD_VAR 0 3
38482: ST_TO_ADDR
// end ;
38483: LD_VAR 0 2
38487: RET
// export function ComExitAll ( units ) ; var i ; begin
38488: LD_INT 0
38490: PPUSH
38491: PPUSH
// if not units then
38492: LD_VAR 0 1
38496: NOT
38497: IFFALSE 38501
// exit ;
38499: GO 38527
// for i in units do
38501: LD_ADDR_VAR 0 3
38505: PUSH
38506: LD_VAR 0 1
38510: PUSH
38511: FOR_IN
38512: IFFALSE 38525
// ComExit ( i ) ;
38514: LD_VAR 0 3
38518: PPUSH
38519: CALL 38405 0 1
38523: GO 38511
38525: POP
38526: POP
// end ;
38527: LD_VAR 0 2
38531: RET
// export function ResetHc ; begin
38532: LD_INT 0
38534: PPUSH
// InitHc ;
38535: CALL_OW 19
// hc_importance := 0 ;
38539: LD_ADDR_OWVAR 32
38543: PUSH
38544: LD_INT 0
38546: ST_TO_ADDR
// end ;
38547: LD_VAR 0 1
38551: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38552: LD_INT 0
38554: PPUSH
38555: PPUSH
38556: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38557: LD_ADDR_VAR 0 6
38561: PUSH
38562: LD_VAR 0 1
38566: PUSH
38567: LD_VAR 0 3
38571: PLUS
38572: PUSH
38573: LD_INT 2
38575: DIV
38576: ST_TO_ADDR
// if _x < 0 then
38577: LD_VAR 0 6
38581: PUSH
38582: LD_INT 0
38584: LESS
38585: IFFALSE 38602
// _x := _x * - 1 ;
38587: LD_ADDR_VAR 0 6
38591: PUSH
38592: LD_VAR 0 6
38596: PUSH
38597: LD_INT 1
38599: NEG
38600: MUL
38601: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38602: LD_ADDR_VAR 0 7
38606: PUSH
38607: LD_VAR 0 2
38611: PUSH
38612: LD_VAR 0 4
38616: PLUS
38617: PUSH
38618: LD_INT 2
38620: DIV
38621: ST_TO_ADDR
// if _y < 0 then
38622: LD_VAR 0 7
38626: PUSH
38627: LD_INT 0
38629: LESS
38630: IFFALSE 38647
// _y := _y * - 1 ;
38632: LD_ADDR_VAR 0 7
38636: PUSH
38637: LD_VAR 0 7
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: MUL
38646: ST_TO_ADDR
// result := [ _x , _y ] ;
38647: LD_ADDR_VAR 0 5
38651: PUSH
38652: LD_VAR 0 6
38656: PUSH
38657: LD_VAR 0 7
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: ST_TO_ADDR
// end ;
38666: LD_VAR 0 5
38670: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38671: LD_INT 0
38673: PPUSH
38674: PPUSH
38675: PPUSH
38676: PPUSH
// task := GetTaskList ( unit ) ;
38677: LD_ADDR_VAR 0 7
38681: PUSH
38682: LD_VAR 0 1
38686: PPUSH
38687: CALL_OW 437
38691: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38692: LD_VAR 0 7
38696: NOT
38697: PUSH
38698: LD_VAR 0 1
38702: PPUSH
38703: LD_VAR 0 2
38707: PPUSH
38708: CALL_OW 308
38712: NOT
38713: AND
38714: IFFALSE 38718
// exit ;
38716: GO 38836
// if IsInArea ( unit , area ) then
38718: LD_VAR 0 1
38722: PPUSH
38723: LD_VAR 0 2
38727: PPUSH
38728: CALL_OW 308
38732: IFFALSE 38750
// begin ComMoveToArea ( unit , goAway ) ;
38734: LD_VAR 0 1
38738: PPUSH
38739: LD_VAR 0 3
38743: PPUSH
38744: CALL_OW 113
// exit ;
38748: GO 38836
// end ; if task [ 1 ] [ 1 ] <> M then
38750: LD_VAR 0 7
38754: PUSH
38755: LD_INT 1
38757: ARRAY
38758: PUSH
38759: LD_INT 1
38761: ARRAY
38762: PUSH
38763: LD_STRING M
38765: NONEQUAL
38766: IFFALSE 38770
// exit ;
38768: GO 38836
// x := task [ 1 ] [ 2 ] ;
38770: LD_ADDR_VAR 0 5
38774: PUSH
38775: LD_VAR 0 7
38779: PUSH
38780: LD_INT 1
38782: ARRAY
38783: PUSH
38784: LD_INT 2
38786: ARRAY
38787: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38788: LD_ADDR_VAR 0 6
38792: PUSH
38793: LD_VAR 0 7
38797: PUSH
38798: LD_INT 1
38800: ARRAY
38801: PUSH
38802: LD_INT 3
38804: ARRAY
38805: ST_TO_ADDR
// if InArea ( x , y , area ) then
38806: LD_VAR 0 5
38810: PPUSH
38811: LD_VAR 0 6
38815: PPUSH
38816: LD_VAR 0 2
38820: PPUSH
38821: CALL_OW 309
38825: IFFALSE 38836
// ComStop ( unit ) ;
38827: LD_VAR 0 1
38831: PPUSH
38832: CALL_OW 141
// end ;
38836: LD_VAR 0 4
38840: RET
// export function Abs ( value ) ; begin
38841: LD_INT 0
38843: PPUSH
// result := value ;
38844: LD_ADDR_VAR 0 2
38848: PUSH
38849: LD_VAR 0 1
38853: ST_TO_ADDR
// if value < 0 then
38854: LD_VAR 0 1
38858: PUSH
38859: LD_INT 0
38861: LESS
38862: IFFALSE 38879
// result := value * - 1 ;
38864: LD_ADDR_VAR 0 2
38868: PUSH
38869: LD_VAR 0 1
38873: PUSH
38874: LD_INT 1
38876: NEG
38877: MUL
38878: ST_TO_ADDR
// end ;
38879: LD_VAR 0 2
38883: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38884: LD_INT 0
38886: PPUSH
38887: PPUSH
38888: PPUSH
38889: PPUSH
38890: PPUSH
38891: PPUSH
38892: PPUSH
38893: PPUSH
// if not unit or not building then
38894: LD_VAR 0 1
38898: NOT
38899: PUSH
38900: LD_VAR 0 2
38904: NOT
38905: OR
38906: IFFALSE 38910
// exit ;
38908: GO 39136
// x := GetX ( building ) ;
38910: LD_ADDR_VAR 0 4
38914: PUSH
38915: LD_VAR 0 2
38919: PPUSH
38920: CALL_OW 250
38924: ST_TO_ADDR
// y := GetY ( building ) ;
38925: LD_ADDR_VAR 0 6
38929: PUSH
38930: LD_VAR 0 2
38934: PPUSH
38935: CALL_OW 251
38939: ST_TO_ADDR
// d := GetDir ( building ) ;
38940: LD_ADDR_VAR 0 8
38944: PUSH
38945: LD_VAR 0 2
38949: PPUSH
38950: CALL_OW 254
38954: ST_TO_ADDR
// r := 4 ;
38955: LD_ADDR_VAR 0 9
38959: PUSH
38960: LD_INT 4
38962: ST_TO_ADDR
// for i := 1 to 5 do
38963: LD_ADDR_VAR 0 10
38967: PUSH
38968: DOUBLE
38969: LD_INT 1
38971: DEC
38972: ST_TO_ADDR
38973: LD_INT 5
38975: PUSH
38976: FOR_TO
38977: IFFALSE 39134
// begin _x := ShiftX ( x , d , r + i ) ;
38979: LD_ADDR_VAR 0 5
38983: PUSH
38984: LD_VAR 0 4
38988: PPUSH
38989: LD_VAR 0 8
38993: PPUSH
38994: LD_VAR 0 9
38998: PUSH
38999: LD_VAR 0 10
39003: PLUS
39004: PPUSH
39005: CALL_OW 272
39009: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39010: LD_ADDR_VAR 0 7
39014: PUSH
39015: LD_VAR 0 6
39019: PPUSH
39020: LD_VAR 0 8
39024: PPUSH
39025: LD_VAR 0 9
39029: PUSH
39030: LD_VAR 0 10
39034: PLUS
39035: PPUSH
39036: CALL_OW 273
39040: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39041: LD_VAR 0 5
39045: PPUSH
39046: LD_VAR 0 7
39050: PPUSH
39051: CALL_OW 488
39055: PUSH
39056: LD_VAR 0 5
39060: PPUSH
39061: LD_VAR 0 7
39065: PPUSH
39066: CALL_OW 428
39070: PPUSH
39071: CALL_OW 247
39075: PUSH
39076: LD_INT 3
39078: PUSH
39079: LD_INT 2
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: IN
39086: NOT
39087: AND
39088: IFFALSE 39132
// begin ComMoveXY ( unit , _x , _y ) ;
39090: LD_VAR 0 1
39094: PPUSH
39095: LD_VAR 0 5
39099: PPUSH
39100: LD_VAR 0 7
39104: PPUSH
39105: CALL_OW 111
// result := [ _x , _y ] ;
39109: LD_ADDR_VAR 0 3
39113: PUSH
39114: LD_VAR 0 5
39118: PUSH
39119: LD_VAR 0 7
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: ST_TO_ADDR
// exit ;
39128: POP
39129: POP
39130: GO 39136
// end ; end ;
39132: GO 38976
39134: POP
39135: POP
// end ;
39136: LD_VAR 0 3
39140: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39141: LD_INT 0
39143: PPUSH
39144: PPUSH
39145: PPUSH
// result := 0 ;
39146: LD_ADDR_VAR 0 3
39150: PUSH
39151: LD_INT 0
39153: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39154: LD_VAR 0 1
39158: PUSH
39159: LD_INT 0
39161: LESS
39162: PUSH
39163: LD_VAR 0 1
39167: PUSH
39168: LD_INT 8
39170: GREATER
39171: OR
39172: PUSH
39173: LD_VAR 0 2
39177: PUSH
39178: LD_INT 0
39180: LESS
39181: OR
39182: PUSH
39183: LD_VAR 0 2
39187: PUSH
39188: LD_INT 8
39190: GREATER
39191: OR
39192: IFFALSE 39196
// exit ;
39194: GO 39271
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39196: LD_ADDR_VAR 0 4
39200: PUSH
39201: LD_INT 22
39203: PUSH
39204: LD_VAR 0 2
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PPUSH
39213: CALL_OW 69
39217: PUSH
39218: FOR_IN
39219: IFFALSE 39269
// begin un := UnitShoot ( i ) ;
39221: LD_ADDR_VAR 0 5
39225: PUSH
39226: LD_VAR 0 4
39230: PPUSH
39231: CALL_OW 504
39235: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39236: LD_VAR 0 5
39240: PPUSH
39241: CALL_OW 255
39245: PUSH
39246: LD_VAR 0 1
39250: EQUAL
39251: IFFALSE 39267
// begin result := un ;
39253: LD_ADDR_VAR 0 3
39257: PUSH
39258: LD_VAR 0 5
39262: ST_TO_ADDR
// exit ;
39263: POP
39264: POP
39265: GO 39271
// end ; end ;
39267: GO 39218
39269: POP
39270: POP
// end ;
39271: LD_VAR 0 3
39275: RET
// export function GetCargoBay ( units ) ; begin
39276: LD_INT 0
39278: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39279: LD_ADDR_VAR 0 2
39283: PUSH
39284: LD_VAR 0 1
39288: PPUSH
39289: LD_INT 2
39291: PUSH
39292: LD_INT 34
39294: PUSH
39295: LD_INT 12
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 34
39304: PUSH
39305: LD_INT 51
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 34
39314: PUSH
39315: LD_INT 32
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 34
39324: PUSH
39325: LD_EXP 4
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: PPUSH
39341: CALL_OW 72
39345: ST_TO_ADDR
// end ;
39346: LD_VAR 0 2
39350: RET
// export function Negate ( value ) ; begin
39351: LD_INT 0
39353: PPUSH
// result := not value ;
39354: LD_ADDR_VAR 0 2
39358: PUSH
39359: LD_VAR 0 1
39363: NOT
39364: ST_TO_ADDR
// end ;
39365: LD_VAR 0 2
39369: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
39370: LD_INT 0
39372: PPUSH
// if x1 = x2 then
39373: LD_VAR 0 1
39377: PUSH
39378: LD_VAR 0 3
39382: EQUAL
39383: IFFALSE 39417
// begin if y1 > y2 then
39385: LD_VAR 0 2
39389: PUSH
39390: LD_VAR 0 4
39394: GREATER
39395: IFFALSE 39407
// result := 0 else
39397: LD_ADDR_VAR 0 5
39401: PUSH
39402: LD_INT 0
39404: ST_TO_ADDR
39405: GO 39415
// result := 3 ;
39407: LD_ADDR_VAR 0 5
39411: PUSH
39412: LD_INT 3
39414: ST_TO_ADDR
// exit ;
39415: GO 39503
// end ; if y1 = y2 then
39417: LD_VAR 0 2
39421: PUSH
39422: LD_VAR 0 4
39426: EQUAL
39427: IFFALSE 39461
// begin if x1 > x2 then
39429: LD_VAR 0 1
39433: PUSH
39434: LD_VAR 0 3
39438: GREATER
39439: IFFALSE 39451
// result := 1 else
39441: LD_ADDR_VAR 0 5
39445: PUSH
39446: LD_INT 1
39448: ST_TO_ADDR
39449: GO 39459
// result := 4 ;
39451: LD_ADDR_VAR 0 5
39455: PUSH
39456: LD_INT 4
39458: ST_TO_ADDR
// exit ;
39459: GO 39503
// end ; if x1 > x2 and y1 > y2 then
39461: LD_VAR 0 1
39465: PUSH
39466: LD_VAR 0 3
39470: GREATER
39471: PUSH
39472: LD_VAR 0 2
39476: PUSH
39477: LD_VAR 0 4
39481: GREATER
39482: AND
39483: IFFALSE 39495
// result := 2 else
39485: LD_ADDR_VAR 0 5
39489: PUSH
39490: LD_INT 2
39492: ST_TO_ADDR
39493: GO 39503
// result := 5 ;
39495: LD_ADDR_VAR 0 5
39499: PUSH
39500: LD_INT 5
39502: ST_TO_ADDR
// end ;
39503: LD_VAR 0 5
39507: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39508: LD_INT 0
39510: PPUSH
39511: PPUSH
// if not driver or not IsInUnit ( driver ) then
39512: LD_VAR 0 1
39516: NOT
39517: PUSH
39518: LD_VAR 0 1
39522: PPUSH
39523: CALL_OW 310
39527: NOT
39528: OR
39529: IFFALSE 39533
// exit ;
39531: GO 39623
// vehicle := IsInUnit ( driver ) ;
39533: LD_ADDR_VAR 0 3
39537: PUSH
39538: LD_VAR 0 1
39542: PPUSH
39543: CALL_OW 310
39547: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39548: LD_VAR 0 1
39552: PPUSH
39553: LD_STRING \
39555: PUSH
39556: LD_INT 0
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: LD_INT 0
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: PUSH
39583: LD_STRING E
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: LD_VAR 0 3
39596: PUSH
39597: LD_INT 0
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: LD_INT 0
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PPUSH
39619: CALL_OW 446
// end ;
39623: LD_VAR 0 2
39627: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39628: LD_INT 0
39630: PPUSH
39631: PPUSH
39632: PPUSH
// tmp := [ ] ;
39633: LD_ADDR_VAR 0 5
39637: PUSH
39638: EMPTY
39639: ST_TO_ADDR
// for i in units do
39640: LD_ADDR_VAR 0 4
39644: PUSH
39645: LD_VAR 0 1
39649: PUSH
39650: FOR_IN
39651: IFFALSE 39689
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39653: LD_ADDR_VAR 0 5
39657: PUSH
39658: LD_VAR 0 5
39662: PPUSH
39663: LD_VAR 0 5
39667: PUSH
39668: LD_INT 1
39670: PLUS
39671: PPUSH
39672: LD_VAR 0 4
39676: PPUSH
39677: CALL_OW 256
39681: PPUSH
39682: CALL_OW 2
39686: ST_TO_ADDR
39687: GO 39650
39689: POP
39690: POP
// if not tmp then
39691: LD_VAR 0 5
39695: NOT
39696: IFFALSE 39700
// exit ;
39698: GO 39748
// if asc then
39700: LD_VAR 0 2
39704: IFFALSE 39728
// result := SortListByListAsc ( units , tmp ) else
39706: LD_ADDR_VAR 0 3
39710: PUSH
39711: LD_VAR 0 1
39715: PPUSH
39716: LD_VAR 0 5
39720: PPUSH
39721: CALL_OW 76
39725: ST_TO_ADDR
39726: GO 39748
// result := SortListByListDesc ( units , tmp ) ;
39728: LD_ADDR_VAR 0 3
39732: PUSH
39733: LD_VAR 0 1
39737: PPUSH
39738: LD_VAR 0 5
39742: PPUSH
39743: CALL_OW 77
39747: ST_TO_ADDR
// end ; end_of_file
39748: LD_VAR 0 3
39752: RET
// export ecoSide , ecoNation , ecoPeopleAmount , ecoStartPoint , ecoCratesDrop , ecoCratesDropXY , ecoCratesDropAllow , ecoAttacksAllow , ecoEventsAllow , ecoAttacksArea , ecoEventsList ; export function InitEcoMode ( startPoint , cratesDropXY , attacksArea ) ; var i , tmp , side , nation , peopleAmount , resourcesAmount ; begin
39753: LD_INT 0
39755: PPUSH
39756: PPUSH
39757: PPUSH
39758: PPUSH
39759: PPUSH
39760: PPUSH
39761: PPUSH
// ecoStartPoint := startPoint ;
39762: LD_ADDR_EXP 25
39766: PUSH
39767: LD_VAR 0 1
39771: ST_TO_ADDR
// CenterNowOnXY ( ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
39772: LD_EXP 25
39776: PUSH
39777: LD_INT 1
39779: ARRAY
39780: PPUSH
39781: LD_EXP 25
39785: PUSH
39786: LD_INT 2
39788: ARRAY
39789: PPUSH
39790: CALL_OW 86
// ecoCratesDropXY := cratesDropXY ;
39794: LD_ADDR_EXP 27
39798: PUSH
39799: LD_VAR 0 2
39803: ST_TO_ADDR
// ecoAttacksArea := attacksArea ;
39804: LD_ADDR_EXP 31
39808: PUSH
39809: LD_VAR 0 3
39813: ST_TO_ADDR
// if debug then
39814: LD_EXP 1
39818: IFFALSE 39862
// begin side := 1 ;
39820: LD_ADDR_VAR 0 7
39824: PUSH
39825: LD_INT 1
39827: ST_TO_ADDR
// nation := 1 ;
39828: LD_ADDR_VAR 0 8
39832: PUSH
39833: LD_INT 1
39835: ST_TO_ADDR
// peopleAmount := 15 ;
39836: LD_ADDR_VAR 0 9
39840: PUSH
39841: LD_INT 15
39843: ST_TO_ADDR
// resourcesAmount := 2 ;
39844: LD_ADDR_VAR 0 10
39848: PUSH
39849: LD_INT 2
39851: ST_TO_ADDR
// ecoCratesDrop := 3 ;
39852: LD_ADDR_EXP 26
39856: PUSH
39857: LD_INT 3
39859: ST_TO_ADDR
// end else
39860: GO 39958
// begin side := GetMultiplayerSetting ( 0 ) ;
39862: LD_ADDR_VAR 0 7
39866: PUSH
39867: LD_INT 0
39869: PPUSH
39870: CALL_OW 426
39874: ST_TO_ADDR
// nation := GetMultiplayerSetting ( 1 ) ;
39875: LD_ADDR_VAR 0 8
39879: PUSH
39880: LD_INT 1
39882: PPUSH
39883: CALL_OW 426
39887: ST_TO_ADDR
// peopleAmount := [ 6 , 9 , 12 , 15 , 18 , 21 , 24 ] [ GetMultiplayerSetting ( 2 ) ] ;
39888: LD_ADDR_VAR 0 9
39892: PUSH
39893: LD_INT 6
39895: PUSH
39896: LD_INT 9
39898: PUSH
39899: LD_INT 12
39901: PUSH
39902: LD_INT 15
39904: PUSH
39905: LD_INT 18
39907: PUSH
39908: LD_INT 21
39910: PUSH
39911: LD_INT 24
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 2
39925: PPUSH
39926: CALL_OW 426
39930: ARRAY
39931: ST_TO_ADDR
// resourcesAmount := GetMultiplayerSetting ( 3 ) ;
39932: LD_ADDR_VAR 0 10
39936: PUSH
39937: LD_INT 3
39939: PPUSH
39940: CALL_OW 426
39944: ST_TO_ADDR
// ecoCratesDrop := GetMultiplayerSetting ( 4 ) ;
39945: LD_ADDR_EXP 26
39949: PUSH
39950: LD_INT 4
39952: PPUSH
39953: CALL_OW 426
39957: ST_TO_ADDR
// end ; ecoCratesDropAllow := true ;
39958: LD_ADDR_EXP 28
39962: PUSH
39963: LD_INT 1
39965: ST_TO_ADDR
// ecoEventsAllow := false ;
39966: LD_ADDR_EXP 30
39970: PUSH
39971: LD_INT 0
39973: ST_TO_ADDR
// ecoAttacksAllow := false ;
39974: LD_ADDR_EXP 29
39978: PUSH
39979: LD_INT 0
39981: ST_TO_ADDR
// ecoSide := side ;
39982: LD_ADDR_EXP 22
39986: PUSH
39987: LD_VAR 0 7
39991: ST_TO_ADDR
// your_side := side ;
39992: LD_ADDR_OWVAR 2
39996: PUSH
39997: LD_VAR 0 7
40001: ST_TO_ADDR
// ChangeSideFog ( 1 , side ) ;
40002: LD_INT 1
40004: PPUSH
40005: LD_VAR 0 7
40009: PPUSH
40010: CALL_OW 343
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
40014: LD_INT 1
40016: PPUSH
40017: LD_INT 1
40019: PPUSH
40020: LD_VAR 0 7
40024: PPUSH
40025: LD_INT 32793
40027: NEG
40028: PPUSH
40029: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
40033: LD_INT 1
40035: PPUSH
40036: LD_INT 1
40038: PPUSH
40039: LD_VAR 0 7
40043: PPUSH
40044: CALL_OW 331
// ecoNation := nation ;
40048: LD_ADDR_EXP 23
40052: PUSH
40053: LD_VAR 0 8
40057: ST_TO_ADDR
// ecoPeopleAmount := peopleAmount ;
40058: LD_ADDR_EXP 24
40062: PUSH
40063: LD_VAR 0 9
40067: ST_TO_ADDR
// for i = 1 to resourcesAmount * 5 do
40068: LD_ADDR_VAR 0 5
40072: PUSH
40073: DOUBLE
40074: LD_INT 1
40076: DEC
40077: ST_TO_ADDR
40078: LD_VAR 0 10
40082: PUSH
40083: LD_INT 5
40085: MUL
40086: PUSH
40087: FOR_TO
40088: IFFALSE 40126
// CreateResourcesXYR ( mat_cans , 5 , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 6 , false ) ;
40090: LD_INT 1
40092: PPUSH
40093: LD_INT 5
40095: PPUSH
40096: LD_EXP 25
40100: PUSH
40101: LD_INT 1
40103: ARRAY
40104: PPUSH
40105: LD_EXP 25
40109: PUSH
40110: LD_INT 2
40112: ARRAY
40113: PPUSH
40114: LD_INT 6
40116: PPUSH
40117: LD_INT 0
40119: PPUSH
40120: CALL_OW 60
40124: GO 40087
40126: POP
40127: POP
// uc_side := side ;
40128: LD_ADDR_OWVAR 20
40132: PUSH
40133: LD_VAR 0 7
40137: ST_TO_ADDR
// uc_nation := nation ;
40138: LD_ADDR_OWVAR 21
40142: PUSH
40143: LD_VAR 0 8
40147: ST_TO_ADDR
// hc_importance := 100 ;
40148: LD_ADDR_OWVAR 32
40152: PUSH
40153: LD_INT 100
40155: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
40156: LD_INT 0
40158: PPUSH
40159: LD_INT 1
40161: PPUSH
40162: LD_INT 4
40164: PPUSH
40165: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
40169: CALL_OW 44
40173: PPUSH
40174: LD_EXP 25
40178: PUSH
40179: LD_INT 1
40181: ARRAY
40182: PPUSH
40183: LD_EXP 25
40187: PUSH
40188: LD_INT 2
40190: ARRAY
40191: PPUSH
40192: LD_INT 12
40194: PPUSH
40195: LD_INT 0
40197: PPUSH
40198: CALL_OW 50
// InitHc_All ( ) ;
40202: CALL_OW 584
// for i = 1 to peopleAmount - 1 do
40206: LD_ADDR_VAR 0 5
40210: PUSH
40211: DOUBLE
40212: LD_INT 1
40214: DEC
40215: ST_TO_ADDR
40216: LD_VAR 0 9
40220: PUSH
40221: LD_INT 1
40223: MINUS
40224: PUSH
40225: FOR_TO
40226: IFFALSE 40321
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
40228: LD_INT 0
40230: PPUSH
40231: LD_VAR 0 5
40235: PUSH
40236: LD_INT 4
40238: MOD
40239: PUSH
40240: LD_INT 1
40242: PLUS
40243: PPUSH
40244: LD_INT 3
40246: PPUSH
40247: CALL_OW 380
// tmp := Replace ( tmp , tmp + 1 , CreateHuman ) ;
40251: LD_ADDR_VAR 0 6
40255: PUSH
40256: LD_VAR 0 6
40260: PPUSH
40261: LD_VAR 0 6
40265: PUSH
40266: LD_INT 1
40268: PLUS
40269: PPUSH
40270: CALL_OW 44
40274: PPUSH
40275: CALL_OW 1
40279: ST_TO_ADDR
// PlaceUnitXYR ( tmp [ tmp ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
40280: LD_VAR 0 6
40284: PUSH
40285: LD_VAR 0 6
40289: ARRAY
40290: PPUSH
40291: LD_EXP 25
40295: PUSH
40296: LD_INT 1
40298: ARRAY
40299: PPUSH
40300: LD_EXP 25
40304: PUSH
40305: LD_INT 2
40307: ARRAY
40308: PPUSH
40309: LD_INT 12
40311: PPUSH
40312: LD_INT 0
40314: PPUSH
40315: CALL_OW 50
// end ;
40319: GO 40225
40321: POP
40322: POP
// end ;
40323: LD_VAR 0 4
40327: RET
// every 0 0$1 trigger ecoCratesDrop and ecoCratesDropXY do var time , xy ;
40328: LD_EXP 26
40332: PUSH
40333: LD_EXP 27
40337: AND
40338: IFFALSE 40508
40340: GO 40342
40342: DISABLE
40343: LD_INT 0
40345: PPUSH
40346: PPUSH
// begin time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
40347: LD_ADDR_VAR 0 1
40351: PUSH
40352: LD_INT 700
40354: PUSH
40355: LD_INT 350
40357: PUSH
40358: LD_INT 175
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: LIST
40365: PUSH
40366: LD_EXP 26
40370: ARRAY
40371: ST_TO_ADDR
// while true do
40372: LD_INT 1
40374: IFFALSE 40508
// begin wait ( time ) ;
40376: LD_VAR 0 1
40380: PPUSH
40381: CALL_OW 67
// if not ecoCratesDropAllow then
40385: LD_EXP 28
40389: NOT
40390: IFFALSE 40394
// continue ;
40392: GO 40372
// time := time + 0 0$2 ;
40394: LD_ADDR_VAR 0 1
40398: PUSH
40399: LD_VAR 0 1
40403: PUSH
40404: LD_INT 70
40406: PLUS
40407: ST_TO_ADDR
// if time > 0 0$40 then
40408: LD_VAR 0 1
40412: PUSH
40413: LD_INT 1400
40415: GREATER
40416: IFFALSE 40443
// time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
40418: LD_ADDR_VAR 0 1
40422: PUSH
40423: LD_INT 700
40425: PUSH
40426: LD_INT 350
40428: PUSH
40429: LD_INT 175
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: LIST
40436: PUSH
40437: LD_EXP 26
40441: ARRAY
40442: ST_TO_ADDR
// xy := ecoCratesDropXY [ rand ( 1 , ecoCratesDropXY ) ] ;
40443: LD_ADDR_VAR 0 2
40447: PUSH
40448: LD_EXP 27
40452: PUSH
40453: LD_INT 1
40455: PPUSH
40456: LD_EXP 27
40460: PPUSH
40461: CALL_OW 12
40465: ARRAY
40466: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , xy [ 1 ] , xy [ 2 ] , 14 , true ) ;
40467: LD_INT 1
40469: PPUSH
40470: LD_INT 5
40472: PPUSH
40473: CALL_OW 12
40477: PPUSH
40478: LD_VAR 0 2
40482: PUSH
40483: LD_INT 1
40485: ARRAY
40486: PPUSH
40487: LD_VAR 0 2
40491: PUSH
40492: LD_INT 2
40494: ARRAY
40495: PPUSH
40496: LD_INT 14
40498: PPUSH
40499: LD_INT 1
40501: PPUSH
40502: CALL_OW 56
// end ;
40506: GO 40372
// end ;
40508: PPOPN 2
40510: END
// every 0 0$1 trigger ecoAttacksArea and ecoAttacksAllow do var time , area , tmp , i , xy , veh , dir , enemySide , waveBonus ;
40511: LD_EXP 31
40515: PUSH
40516: LD_EXP 29
40520: AND
40521: IFFALSE 41285
40523: GO 40525
40525: DISABLE
40526: LD_INT 0
40528: PPUSH
40529: PPUSH
40530: PPUSH
40531: PPUSH
40532: PPUSH
40533: PPUSH
40534: PPUSH
40535: PPUSH
40536: PPUSH
// begin time := 3 3$00 ;
40537: LD_ADDR_VAR 0 1
40541: PUSH
40542: LD_INT 6300
40544: ST_TO_ADDR
// enemySide := [ 3 , 9 ] [ rand ( 1 , 2 ) ] ;
40545: LD_ADDR_VAR 0 8
40549: PUSH
40550: LD_INT 3
40552: PUSH
40553: LD_INT 9
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 1
40562: PPUSH
40563: LD_INT 2
40565: PPUSH
40566: CALL_OW 12
40570: ARRAY
40571: ST_TO_ADDR
// waveBonus := 0 ;
40572: LD_ADDR_VAR 0 9
40576: PUSH
40577: LD_INT 0
40579: ST_TO_ADDR
// if ecoSide = enemySide then
40580: LD_EXP 22
40584: PUSH
40585: LD_VAR 0 8
40589: EQUAL
40590: IFFALSE 40600
// enemySide := 1 ;
40592: LD_ADDR_VAR 0 8
40596: PUSH
40597: LD_INT 1
40599: ST_TO_ADDR
// while true do
40600: LD_INT 1
40602: IFFALSE 41285
// begin wait ( time ) ;
40604: LD_VAR 0 1
40608: PPUSH
40609: CALL_OW 67
// if not ecoAttacksAllow then
40613: LD_EXP 29
40617: NOT
40618: IFFALSE 40622
// continue ;
40620: GO 40600
// waveBonus := waveBonus + 2 ;
40622: LD_ADDR_VAR 0 9
40626: PUSH
40627: LD_VAR 0 9
40631: PUSH
40632: LD_INT 2
40634: PLUS
40635: ST_TO_ADDR
// if waveBonus > 20 then
40636: LD_VAR 0 9
40640: PUSH
40641: LD_INT 20
40643: GREATER
40644: IFFALSE 40654
// waveBonus := 20 ;
40646: LD_ADDR_VAR 0 9
40650: PUSH
40651: LD_INT 20
40653: ST_TO_ADDR
// area := ecoAttacksArea [ rand ( 1 , ecoAttacksArea ) ] ;
40654: LD_ADDR_VAR 0 2
40658: PUSH
40659: LD_EXP 31
40663: PUSH
40664: LD_INT 1
40666: PPUSH
40667: LD_EXP 31
40671: PPUSH
40672: CALL_OW 12
40676: ARRAY
40677: ST_TO_ADDR
// tmp := AreaToList ( area , 0 ) ;
40678: LD_ADDR_VAR 0 3
40682: PUSH
40683: LD_VAR 0 2
40687: PPUSH
40688: LD_INT 0
40690: PPUSH
40691: CALL_OW 517
40695: ST_TO_ADDR
// dir := GetDirFromHex ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
40696: LD_ADDR_VAR 0 7
40700: PUSH
40701: LD_VAR 0 3
40705: PUSH
40706: LD_INT 1
40708: ARRAY
40709: PUSH
40710: LD_INT 1
40712: ARRAY
40713: PPUSH
40714: LD_VAR 0 3
40718: PUSH
40719: LD_INT 2
40721: ARRAY
40722: PUSH
40723: LD_INT 1
40725: ARRAY
40726: PPUSH
40727: LD_EXP 25
40731: PUSH
40732: LD_INT 1
40734: ARRAY
40735: PPUSH
40736: LD_EXP 25
40740: PUSH
40741: LD_INT 2
40743: ARRAY
40744: PPUSH
40745: CALL 39370 0 4
40749: ST_TO_ADDR
// xy := PointBetweenXY ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
40750: LD_ADDR_VAR 0 5
40754: PUSH
40755: LD_VAR 0 3
40759: PUSH
40760: LD_INT 1
40762: ARRAY
40763: PUSH
40764: LD_INT 1
40766: ARRAY
40767: PPUSH
40768: LD_VAR 0 3
40772: PUSH
40773: LD_INT 2
40775: ARRAY
40776: PUSH
40777: LD_INT 1
40779: ARRAY
40780: PPUSH
40781: LD_EXP 25
40785: PUSH
40786: LD_INT 1
40788: ARRAY
40789: PPUSH
40790: LD_EXP 25
40794: PUSH
40795: LD_INT 2
40797: ARRAY
40798: PPUSH
40799: CALL 38552 0 4
40803: ST_TO_ADDR
// tmp := [ ] ;
40804: LD_ADDR_VAR 0 3
40808: PUSH
40809: EMPTY
40810: ST_TO_ADDR
// for i := 1 to 6 + waveBonus do
40811: LD_ADDR_VAR 0 4
40815: PUSH
40816: DOUBLE
40817: LD_INT 1
40819: DEC
40820: ST_TO_ADDR
40821: LD_INT 6
40823: PUSH
40824: LD_VAR 0 9
40828: PLUS
40829: PUSH
40830: FOR_TO
40831: IFFALSE 41150
// begin uc_side := enemySide ;
40833: LD_ADDR_OWVAR 20
40837: PUSH
40838: LD_VAR 0 8
40842: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
40843: LD_ADDR_OWVAR 21
40847: PUSH
40848: LD_INT 1
40850: PPUSH
40851: LD_INT 3
40853: PPUSH
40854: CALL_OW 12
40858: ST_TO_ADDR
// case uc_nation of 1 :
40859: LD_OWVAR 21
40863: PUSH
40864: LD_INT 1
40866: DOUBLE
40867: EQUAL
40868: IFTRUE 40872
40870: GO 40913
40872: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ; 2 :
40873: LD_INT 5
40875: PPUSH
40876: LD_INT 3
40878: PPUSH
40879: LD_INT 3
40881: PPUSH
40882: LD_INT 6
40884: PUSH
40885: LD_INT 7
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 1
40894: PPUSH
40895: LD_INT 2
40897: PPUSH
40898: CALL_OW 12
40902: ARRAY
40903: PPUSH
40904: LD_INT 100
40906: PPUSH
40907: CALL 6143 0 5
40911: GO 41016
40913: LD_INT 2
40915: DOUBLE
40916: EQUAL
40917: IFTRUE 40921
40919: GO 40966
40921: POP
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] , 100 ) ; 3 :
40922: LD_INT 14
40924: PPUSH
40925: LD_INT 3
40927: PPUSH
40928: LD_INT 5
40930: PPUSH
40931: LD_INT 27
40933: PUSH
40934: LD_INT 28
40936: PUSH
40937: LD_INT 29
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 1
40947: PPUSH
40948: LD_INT 3
40950: PPUSH
40951: CALL_OW 12
40955: ARRAY
40956: PPUSH
40957: LD_INT 100
40959: PPUSH
40960: CALL 6143 0 5
40964: GO 41016
40966: LD_INT 3
40968: DOUBLE
40969: EQUAL
40970: IFTRUE 40974
40972: GO 41015
40974: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket ] [ rand ( 1 , 2 ) ] , 100 ) ; end ;
40975: LD_INT 24
40977: PPUSH
40978: LD_INT 3
40980: PPUSH
40981: LD_INT 3
40983: PPUSH
40984: LD_INT 46
40986: PUSH
40987: LD_INT 47
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 1
40996: PPUSH
40997: LD_INT 2
40999: PPUSH
41000: CALL_OW 12
41004: ARRAY
41005: PPUSH
41006: LD_INT 100
41008: PPUSH
41009: CALL 6143 0 5
41013: GO 41016
41015: POP
// veh := CreateVehicle ;
41016: LD_ADDR_VAR 0 6
41020: PUSH
41021: CALL_OW 45
41025: ST_TO_ADDR
// SetDir ( veh , dir ) ;
41026: LD_VAR 0 6
41030: PPUSH
41031: LD_VAR 0 7
41035: PPUSH
41036: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
41040: LD_VAR 0 6
41044: PPUSH
41045: LD_VAR 0 2
41049: PPUSH
41050: LD_INT 0
41052: PPUSH
41053: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
41057: LD_ADDR_VAR 0 3
41061: PUSH
41062: LD_VAR 0 3
41066: PPUSH
41067: LD_VAR 0 3
41071: PUSH
41072: LD_INT 1
41074: PLUS
41075: PPUSH
41076: LD_VAR 0 6
41080: PPUSH
41081: CALL_OW 1
41085: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) = 0 then
41086: LD_VAR 0 5
41090: PUSH
41091: LD_INT 1
41093: ARRAY
41094: PPUSH
41095: LD_VAR 0 5
41099: PUSH
41100: LD_INT 2
41102: ARRAY
41103: PPUSH
41104: CALL_OW 428
41108: PUSH
41109: LD_INT 0
41111: EQUAL
41112: IFFALSE 41141
// ComMoveXY ( veh , xy [ 1 ] , xy [ 2 ] ) ;
41114: LD_VAR 0 6
41118: PPUSH
41119: LD_VAR 0 5
41123: PUSH
41124: LD_INT 1
41126: ARRAY
41127: PPUSH
41128: LD_VAR 0 5
41132: PUSH
41133: LD_INT 2
41135: ARRAY
41136: PPUSH
41137: CALL_OW 111
// wait ( 0 0$0.5 ) ;
41141: LD_INT 18
41143: PPUSH
41144: CALL_OW 67
// end ;
41148: GO 40830
41150: POP
41151: POP
// if tmp then
41152: LD_VAR 0 3
41156: IFFALSE 41283
// begin repeat wait ( 0 0$2 ) ;
41158: LD_INT 70
41160: PPUSH
41161: CALL_OW 67
// for i in tmp do
41165: LD_ADDR_VAR 0 4
41169: PUSH
41170: LD_VAR 0 3
41174: PUSH
41175: FOR_IN
41176: IFFALSE 41274
// begin if IsDead ( i ) or not IsPlaced ( i ) or GetSide ( i ) <> enemySide then
41178: LD_VAR 0 4
41182: PPUSH
41183: CALL_OW 301
41187: PUSH
41188: LD_VAR 0 4
41192: PPUSH
41193: CALL_OW 305
41197: NOT
41198: OR
41199: PUSH
41200: LD_VAR 0 4
41204: PPUSH
41205: CALL_OW 255
41209: PUSH
41210: LD_VAR 0 8
41214: NONEQUAL
41215: OR
41216: IFFALSE 41236
// tmp := tmp diff i else
41218: LD_ADDR_VAR 0 3
41222: PUSH
41223: LD_VAR 0 3
41227: PUSH
41228: LD_VAR 0 4
41232: DIFF
41233: ST_TO_ADDR
41234: GO 41272
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , ecoSide ] ) , i ) ) ;
41236: LD_VAR 0 4
41240: PPUSH
41241: LD_INT 22
41243: PUSH
41244: LD_EXP 22
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PPUSH
41253: CALL_OW 69
41257: PPUSH
41258: LD_VAR 0 4
41262: PPUSH
41263: CALL_OW 74
41267: PPUSH
41268: CALL_OW 115
// end ;
41272: GO 41175
41274: POP
41275: POP
// until not tmp ;
41276: LD_VAR 0 3
41280: NOT
41281: IFFALSE 41158
// end ; end ;
41283: GO 40600
// end ;
41285: PPOPN 9
41287: END
// every 0 0$1 trigger ecoEventsAllow do var time , xy ;
41288: LD_EXP 30
41292: IFFALSE 41345
41294: GO 41296
41296: DISABLE
41297: LD_INT 0
41299: PPUSH
41300: PPUSH
// begin time := rand ( 1 1$00 , 10 10$00 ) ;
41301: LD_ADDR_VAR 0 1
41305: PUSH
41306: LD_INT 2100
41308: PPUSH
41309: LD_INT 21000
41311: PPUSH
41312: CALL_OW 12
41316: ST_TO_ADDR
// while true do
41317: LD_INT 1
41319: IFFALSE 41345
// begin wait ( time ) ;
41321: LD_VAR 0 1
41325: PPUSH
41326: CALL_OW 67
// if not ecoEventsAllow then
41330: LD_EXP 30
41334: NOT
41335: IFFALSE 41339
// continue ;
41337: GO 41317
// EcoEvent ( ) ;
41339: CALL 41348 0 0
// end ;
41343: GO 41317
// end ;
41345: PPOPN 2
41347: END
// export function EcoEvent ( ) ; var event , tmp , i ; begin
41348: LD_INT 0
41350: PPUSH
41351: PPUSH
41352: PPUSH
41353: PPUSH
// event := rand ( 1 , 5 ) ;
41354: LD_ADDR_VAR 0 2
41358: PUSH
41359: LD_INT 1
41361: PPUSH
41362: LD_INT 5
41364: PPUSH
41365: CALL_OW 12
41369: ST_TO_ADDR
// case event of 1 :
41370: LD_VAR 0 2
41374: PUSH
41375: LD_INT 1
41377: DOUBLE
41378: EQUAL
41379: IFTRUE 41383
41381: GO 41469
41383: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_building ] ) diff FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
41384: LD_ADDR_VAR 0 3
41388: PUSH
41389: LD_INT 21
41391: PUSH
41392: LD_INT 3
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PPUSH
41399: CALL_OW 69
41403: PUSH
41404: LD_INT 2
41406: PUSH
41407: LD_INT 30
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 30
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: LIST
41431: PPUSH
41432: CALL_OW 69
41436: DIFF
41437: ST_TO_ADDR
// if tmp then
41438: LD_VAR 0 3
41442: IFFALSE 41467
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
41444: LD_VAR 0 3
41448: PUSH
41449: LD_INT 1
41451: PPUSH
41452: LD_VAR 0 3
41456: PPUSH
41457: CALL_OW 12
41461: ARRAY
41462: PPUSH
41463: CALL_OW 65
// end ; 2 :
41467: GO 41668
41469: LD_INT 2
41471: DOUBLE
41472: EQUAL
41473: IFTRUE 41477
41475: GO 41533
41477: POP
// begin uc_side := ecoSide ;
41478: LD_ADDR_OWVAR 20
41482: PUSH
41483: LD_EXP 22
41487: ST_TO_ADDR
// uc_nation := ecoNation ;
41488: LD_ADDR_OWVAR 21
41492: PUSH
41493: LD_EXP 23
41497: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 8 ) ;
41498: LD_INT 0
41500: PPUSH
41501: LD_INT 1
41503: PPUSH
41504: LD_INT 4
41506: PPUSH
41507: CALL_OW 12
41511: PPUSH
41512: LD_INT 8
41514: PPUSH
41515: CALL_OW 380
// PlaceUnitAnyWhere ( CreateHuman , true ) ;
41519: CALL_OW 44
41523: PPUSH
41524: LD_INT 1
41526: PPUSH
41527: CALL_OW 51
// end ; 3 :
41531: GO 41668
41533: LD_INT 3
41535: DOUBLE
41536: EQUAL
41537: IFTRUE 41541
41539: GO 41593
41541: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_vehicle ] ) ;
41542: LD_ADDR_VAR 0 3
41546: PUSH
41547: LD_INT 21
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PPUSH
41557: CALL_OW 69
41561: ST_TO_ADDR
// if tmp then
41562: LD_VAR 0 3
41566: IFFALSE 41591
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
41568: LD_VAR 0 3
41572: PUSH
41573: LD_INT 1
41575: PPUSH
41576: LD_VAR 0 3
41580: PPUSH
41581: CALL_OW 12
41585: ARRAY
41586: PPUSH
41587: CALL_OW 65
// end ; 4 :
41591: GO 41668
41593: LD_INT 4
41595: DOUBLE
41596: EQUAL
41597: IFTRUE 41601
41599: GO 41656
41601: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_human ] ) ;
41602: LD_ADDR_VAR 0 3
41606: PUSH
41607: LD_INT 21
41609: PUSH
41610: LD_INT 1
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PPUSH
41617: CALL_OW 69
41621: ST_TO_ADDR
// if tmp then
41622: LD_VAR 0 3
41626: IFFALSE 41654
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 190 ) ;
41628: LD_VAR 0 3
41632: PUSH
41633: LD_INT 1
41635: PPUSH
41636: LD_VAR 0 3
41640: PPUSH
41641: CALL_OW 12
41645: ARRAY
41646: PPUSH
41647: LD_INT 190
41649: PPUSH
41650: CALL_OW 234
// end ; 5 :
41654: GO 41668
41656: LD_INT 5
41658: DOUBLE
41659: EQUAL
41660: IFTRUE 41664
41662: GO 41667
41664: POP
// begin end ; end ;
41665: GO 41668
41667: POP
// end ;
41668: LD_VAR 0 1
41672: RET
// export function EcoEnableAllTechs ( ) ; var i ; begin
41673: LD_INT 0
41675: PPUSH
41676: PPUSH
// for i := 1 to 100 do
41677: LD_ADDR_VAR 0 2
41681: PUSH
41682: DOUBLE
41683: LD_INT 1
41685: DEC
41686: ST_TO_ADDR
41687: LD_INT 100
41689: PUSH
41690: FOR_TO
41691: IFFALSE 41712
// SetTech ( i , ecoSide , state_researched ) ;
41693: LD_VAR 0 2
41697: PPUSH
41698: LD_EXP 22
41702: PPUSH
41703: LD_INT 2
41705: PPUSH
41706: CALL_OW 322
41710: GO 41690
41712: POP
41713: POP
// end ;
41714: LD_VAR 0 1
41718: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
41719: LD_VAR 0 2
41723: PUSH
41724: LD_INT 102
41726: EQUAL
41727: IFFALSE 41919
// begin case p3 of 1 :
41729: LD_VAR 0 3
41733: PUSH
41734: LD_INT 1
41736: DOUBLE
41737: EQUAL
41738: IFTRUE 41742
41740: GO 41760
41742: POP
// ecoEventsAllow := Negate ( ecoEventsAllow ) ; 2 :
41743: LD_ADDR_EXP 30
41747: PUSH
41748: LD_EXP 30
41752: PPUSH
41753: CALL 39351 0 1
41757: ST_TO_ADDR
41758: GO 41917
41760: LD_INT 2
41762: DOUBLE
41763: EQUAL
41764: IFTRUE 41768
41766: GO 41786
41768: POP
// ecoAttacksAllow := Negate ( ecoAttacksAllow ) ; 3 :
41769: LD_ADDR_EXP 29
41773: PUSH
41774: LD_EXP 29
41778: PPUSH
41779: CALL 39351 0 1
41783: ST_TO_ADDR
41784: GO 41917
41786: LD_INT 3
41788: DOUBLE
41789: EQUAL
41790: IFTRUE 41794
41792: GO 41812
41794: POP
// ecoCratesDropAllow := Negate ( ecoCratesDropAllow ) ; 4 :
41795: LD_ADDR_EXP 28
41799: PUSH
41800: LD_EXP 28
41804: PPUSH
41805: CALL 39351 0 1
41809: ST_TO_ADDR
41810: GO 41917
41812: LD_INT 4
41814: DOUBLE
41815: EQUAL
41816: IFTRUE 41820
41818: GO 41827
41820: POP
// EcoEnableAllTechs ( ) ; 5 .. 8 :
41821: CALL 41673 0 0
41825: GO 41917
41827: LD_INT 5
41829: DOUBLE
41830: GREATEREQUAL
41831: IFFALSE 41839
41833: LD_INT 8
41835: DOUBLE
41836: LESSEQUAL
41837: IFTRUE 41841
41839: GO 41916
41841: POP
// begin uc_side := ecoSide ;
41842: LD_ADDR_OWVAR 20
41846: PUSH
41847: LD_EXP 22
41851: ST_TO_ADDR
// uc_nation := ecoNation ;
41852: LD_ADDR_OWVAR 21
41856: PUSH
41857: LD_EXP 23
41861: ST_TO_ADDR
// PrepareHuman ( false , p3 - 4 , 4 ) ;
41862: LD_INT 0
41864: PPUSH
41865: LD_VAR 0 3
41869: PUSH
41870: LD_INT 4
41872: MINUS
41873: PPUSH
41874: LD_INT 4
41876: PPUSH
41877: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , true ) ;
41881: CALL_OW 44
41885: PPUSH
41886: LD_EXP 25
41890: PUSH
41891: LD_INT 1
41893: ARRAY
41894: PPUSH
41895: LD_EXP 25
41899: PUSH
41900: LD_INT 2
41902: ARRAY
41903: PPUSH
41904: LD_INT 12
41906: PPUSH
41907: LD_INT 1
41909: PPUSH
41910: CALL_OW 50
// end ; end ;
41914: GO 41917
41916: POP
// end else
41917: GO 41953
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
41919: LD_VAR 0 1
41923: PPUSH
41924: LD_VAR 0 2
41928: PPUSH
41929: LD_VAR 0 3
41933: PPUSH
41934: LD_VAR 0 4
41938: PPUSH
41939: LD_VAR 0 5
41943: PPUSH
41944: LD_VAR 0 6
41948: PPUSH
41949: CALL 41956 0 6
// end ; end_of_file
41953: PPOPN 6
41955: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
41956: LD_INT 0
41958: PPUSH
// if p2 = 100 then
41959: LD_VAR 0 2
41963: PUSH
41964: LD_INT 100
41966: EQUAL
41967: IFFALSE 42916
// begin if not StreamModeActive then
41969: LD_EXP 33
41973: NOT
41974: IFFALSE 41984
// StreamModeActive := true ;
41976: LD_ADDR_EXP 33
41980: PUSH
41981: LD_INT 1
41983: ST_TO_ADDR
// if p3 = 0 then
41984: LD_VAR 0 3
41988: PUSH
41989: LD_INT 0
41991: EQUAL
41992: IFFALSE 41998
// InitStreamMode ;
41994: CALL 43076 0 0
// if p3 = 1 then
41998: LD_VAR 0 3
42002: PUSH
42003: LD_INT 1
42005: EQUAL
42006: IFFALSE 42016
// sRocket := true ;
42008: LD_ADDR_EXP 38
42012: PUSH
42013: LD_INT 1
42015: ST_TO_ADDR
// if p3 = 2 then
42016: LD_VAR 0 3
42020: PUSH
42021: LD_INT 2
42023: EQUAL
42024: IFFALSE 42034
// sSpeed := true ;
42026: LD_ADDR_EXP 37
42030: PUSH
42031: LD_INT 1
42033: ST_TO_ADDR
// if p3 = 3 then
42034: LD_VAR 0 3
42038: PUSH
42039: LD_INT 3
42041: EQUAL
42042: IFFALSE 42052
// sEngine := true ;
42044: LD_ADDR_EXP 39
42048: PUSH
42049: LD_INT 1
42051: ST_TO_ADDR
// if p3 = 4 then
42052: LD_VAR 0 3
42056: PUSH
42057: LD_INT 4
42059: EQUAL
42060: IFFALSE 42070
// sSpec := true ;
42062: LD_ADDR_EXP 36
42066: PUSH
42067: LD_INT 1
42069: ST_TO_ADDR
// if p3 = 5 then
42070: LD_VAR 0 3
42074: PUSH
42075: LD_INT 5
42077: EQUAL
42078: IFFALSE 42088
// sLevel := true ;
42080: LD_ADDR_EXP 40
42084: PUSH
42085: LD_INT 1
42087: ST_TO_ADDR
// if p3 = 6 then
42088: LD_VAR 0 3
42092: PUSH
42093: LD_INT 6
42095: EQUAL
42096: IFFALSE 42106
// sArmoury := true ;
42098: LD_ADDR_EXP 41
42102: PUSH
42103: LD_INT 1
42105: ST_TO_ADDR
// if p3 = 7 then
42106: LD_VAR 0 3
42110: PUSH
42111: LD_INT 7
42113: EQUAL
42114: IFFALSE 42124
// sRadar := true ;
42116: LD_ADDR_EXP 42
42120: PUSH
42121: LD_INT 1
42123: ST_TO_ADDR
// if p3 = 8 then
42124: LD_VAR 0 3
42128: PUSH
42129: LD_INT 8
42131: EQUAL
42132: IFFALSE 42142
// sBunker := true ;
42134: LD_ADDR_EXP 43
42138: PUSH
42139: LD_INT 1
42141: ST_TO_ADDR
// if p3 = 9 then
42142: LD_VAR 0 3
42146: PUSH
42147: LD_INT 9
42149: EQUAL
42150: IFFALSE 42160
// sHack := true ;
42152: LD_ADDR_EXP 44
42156: PUSH
42157: LD_INT 1
42159: ST_TO_ADDR
// if p3 = 10 then
42160: LD_VAR 0 3
42164: PUSH
42165: LD_INT 10
42167: EQUAL
42168: IFFALSE 42178
// sFire := true ;
42170: LD_ADDR_EXP 45
42174: PUSH
42175: LD_INT 1
42177: ST_TO_ADDR
// if p3 = 11 then
42178: LD_VAR 0 3
42182: PUSH
42183: LD_INT 11
42185: EQUAL
42186: IFFALSE 42196
// sRefresh := true ;
42188: LD_ADDR_EXP 46
42192: PUSH
42193: LD_INT 1
42195: ST_TO_ADDR
// if p3 = 12 then
42196: LD_VAR 0 3
42200: PUSH
42201: LD_INT 12
42203: EQUAL
42204: IFFALSE 42214
// sExp := true ;
42206: LD_ADDR_EXP 47
42210: PUSH
42211: LD_INT 1
42213: ST_TO_ADDR
// if p3 = 13 then
42214: LD_VAR 0 3
42218: PUSH
42219: LD_INT 13
42221: EQUAL
42222: IFFALSE 42232
// sDepot := true ;
42224: LD_ADDR_EXP 48
42228: PUSH
42229: LD_INT 1
42231: ST_TO_ADDR
// if p3 = 14 then
42232: LD_VAR 0 3
42236: PUSH
42237: LD_INT 14
42239: EQUAL
42240: IFFALSE 42250
// sFlag := true ;
42242: LD_ADDR_EXP 49
42246: PUSH
42247: LD_INT 1
42249: ST_TO_ADDR
// if p3 = 15 then
42250: LD_VAR 0 3
42254: PUSH
42255: LD_INT 15
42257: EQUAL
42258: IFFALSE 42268
// sKamikadze := true ;
42260: LD_ADDR_EXP 57
42264: PUSH
42265: LD_INT 1
42267: ST_TO_ADDR
// if p3 = 16 then
42268: LD_VAR 0 3
42272: PUSH
42273: LD_INT 16
42275: EQUAL
42276: IFFALSE 42286
// sTroll := true ;
42278: LD_ADDR_EXP 58
42282: PUSH
42283: LD_INT 1
42285: ST_TO_ADDR
// if p3 = 17 then
42286: LD_VAR 0 3
42290: PUSH
42291: LD_INT 17
42293: EQUAL
42294: IFFALSE 42304
// sSlow := true ;
42296: LD_ADDR_EXP 59
42300: PUSH
42301: LD_INT 1
42303: ST_TO_ADDR
// if p3 = 18 then
42304: LD_VAR 0 3
42308: PUSH
42309: LD_INT 18
42311: EQUAL
42312: IFFALSE 42322
// sLack := true ;
42314: LD_ADDR_EXP 60
42318: PUSH
42319: LD_INT 1
42321: ST_TO_ADDR
// if p3 = 19 then
42322: LD_VAR 0 3
42326: PUSH
42327: LD_INT 19
42329: EQUAL
42330: IFFALSE 42340
// sTank := true ;
42332: LD_ADDR_EXP 62
42336: PUSH
42337: LD_INT 1
42339: ST_TO_ADDR
// if p3 = 20 then
42340: LD_VAR 0 3
42344: PUSH
42345: LD_INT 20
42347: EQUAL
42348: IFFALSE 42358
// sRemote := true ;
42350: LD_ADDR_EXP 63
42354: PUSH
42355: LD_INT 1
42357: ST_TO_ADDR
// if p3 = 21 then
42358: LD_VAR 0 3
42362: PUSH
42363: LD_INT 21
42365: EQUAL
42366: IFFALSE 42376
// sPowell := true ;
42368: LD_ADDR_EXP 64
42372: PUSH
42373: LD_INT 1
42375: ST_TO_ADDR
// if p3 = 22 then
42376: LD_VAR 0 3
42380: PUSH
42381: LD_INT 22
42383: EQUAL
42384: IFFALSE 42394
// sTeleport := true ;
42386: LD_ADDR_EXP 67
42390: PUSH
42391: LD_INT 1
42393: ST_TO_ADDR
// if p3 = 23 then
42394: LD_VAR 0 3
42398: PUSH
42399: LD_INT 23
42401: EQUAL
42402: IFFALSE 42412
// sOilTower := true ;
42404: LD_ADDR_EXP 69
42408: PUSH
42409: LD_INT 1
42411: ST_TO_ADDR
// if p3 = 24 then
42412: LD_VAR 0 3
42416: PUSH
42417: LD_INT 24
42419: EQUAL
42420: IFFALSE 42430
// sShovel := true ;
42422: LD_ADDR_EXP 70
42426: PUSH
42427: LD_INT 1
42429: ST_TO_ADDR
// if p3 = 25 then
42430: LD_VAR 0 3
42434: PUSH
42435: LD_INT 25
42437: EQUAL
42438: IFFALSE 42448
// sSheik := true ;
42440: LD_ADDR_EXP 71
42444: PUSH
42445: LD_INT 1
42447: ST_TO_ADDR
// if p3 = 26 then
42448: LD_VAR 0 3
42452: PUSH
42453: LD_INT 26
42455: EQUAL
42456: IFFALSE 42466
// sEarthquake := true ;
42458: LD_ADDR_EXP 73
42462: PUSH
42463: LD_INT 1
42465: ST_TO_ADDR
// if p3 = 27 then
42466: LD_VAR 0 3
42470: PUSH
42471: LD_INT 27
42473: EQUAL
42474: IFFALSE 42484
// sAI := true ;
42476: LD_ADDR_EXP 74
42480: PUSH
42481: LD_INT 1
42483: ST_TO_ADDR
// if p3 = 28 then
42484: LD_VAR 0 3
42488: PUSH
42489: LD_INT 28
42491: EQUAL
42492: IFFALSE 42502
// sCargo := true ;
42494: LD_ADDR_EXP 77
42498: PUSH
42499: LD_INT 1
42501: ST_TO_ADDR
// if p3 = 29 then
42502: LD_VAR 0 3
42506: PUSH
42507: LD_INT 29
42509: EQUAL
42510: IFFALSE 42520
// sDLaser := true ;
42512: LD_ADDR_EXP 78
42516: PUSH
42517: LD_INT 1
42519: ST_TO_ADDR
// if p3 = 30 then
42520: LD_VAR 0 3
42524: PUSH
42525: LD_INT 30
42527: EQUAL
42528: IFFALSE 42538
// sExchange := true ;
42530: LD_ADDR_EXP 79
42534: PUSH
42535: LD_INT 1
42537: ST_TO_ADDR
// if p3 = 31 then
42538: LD_VAR 0 3
42542: PUSH
42543: LD_INT 31
42545: EQUAL
42546: IFFALSE 42556
// sFac := true ;
42548: LD_ADDR_EXP 80
42552: PUSH
42553: LD_INT 1
42555: ST_TO_ADDR
// if p3 = 32 then
42556: LD_VAR 0 3
42560: PUSH
42561: LD_INT 32
42563: EQUAL
42564: IFFALSE 42574
// sPower := true ;
42566: LD_ADDR_EXP 81
42570: PUSH
42571: LD_INT 1
42573: ST_TO_ADDR
// if p3 = 33 then
42574: LD_VAR 0 3
42578: PUSH
42579: LD_INT 33
42581: EQUAL
42582: IFFALSE 42592
// sRandom := true ;
42584: LD_ADDR_EXP 82
42588: PUSH
42589: LD_INT 1
42591: ST_TO_ADDR
// if p3 = 34 then
42592: LD_VAR 0 3
42596: PUSH
42597: LD_INT 34
42599: EQUAL
42600: IFFALSE 42610
// sShield := true ;
42602: LD_ADDR_EXP 83
42606: PUSH
42607: LD_INT 1
42609: ST_TO_ADDR
// if p3 = 35 then
42610: LD_VAR 0 3
42614: PUSH
42615: LD_INT 35
42617: EQUAL
42618: IFFALSE 42628
// sTime := true ;
42620: LD_ADDR_EXP 84
42624: PUSH
42625: LD_INT 1
42627: ST_TO_ADDR
// if p3 = 36 then
42628: LD_VAR 0 3
42632: PUSH
42633: LD_INT 36
42635: EQUAL
42636: IFFALSE 42646
// sTools := true ;
42638: LD_ADDR_EXP 85
42642: PUSH
42643: LD_INT 1
42645: ST_TO_ADDR
// if p3 = 101 then
42646: LD_VAR 0 3
42650: PUSH
42651: LD_INT 101
42653: EQUAL
42654: IFFALSE 42664
// sSold := true ;
42656: LD_ADDR_EXP 50
42660: PUSH
42661: LD_INT 1
42663: ST_TO_ADDR
// if p3 = 102 then
42664: LD_VAR 0 3
42668: PUSH
42669: LD_INT 102
42671: EQUAL
42672: IFFALSE 42682
// sDiff := true ;
42674: LD_ADDR_EXP 51
42678: PUSH
42679: LD_INT 1
42681: ST_TO_ADDR
// if p3 = 103 then
42682: LD_VAR 0 3
42686: PUSH
42687: LD_INT 103
42689: EQUAL
42690: IFFALSE 42700
// sFog := true ;
42692: LD_ADDR_EXP 54
42696: PUSH
42697: LD_INT 1
42699: ST_TO_ADDR
// if p3 = 104 then
42700: LD_VAR 0 3
42704: PUSH
42705: LD_INT 104
42707: EQUAL
42708: IFFALSE 42718
// sReset := true ;
42710: LD_ADDR_EXP 55
42714: PUSH
42715: LD_INT 1
42717: ST_TO_ADDR
// if p3 = 105 then
42718: LD_VAR 0 3
42722: PUSH
42723: LD_INT 105
42725: EQUAL
42726: IFFALSE 42736
// sSun := true ;
42728: LD_ADDR_EXP 56
42732: PUSH
42733: LD_INT 1
42735: ST_TO_ADDR
// if p3 = 106 then
42736: LD_VAR 0 3
42740: PUSH
42741: LD_INT 106
42743: EQUAL
42744: IFFALSE 42754
// sTiger := true ;
42746: LD_ADDR_EXP 52
42750: PUSH
42751: LD_INT 1
42753: ST_TO_ADDR
// if p3 = 107 then
42754: LD_VAR 0 3
42758: PUSH
42759: LD_INT 107
42761: EQUAL
42762: IFFALSE 42772
// sBomb := true ;
42764: LD_ADDR_EXP 53
42768: PUSH
42769: LD_INT 1
42771: ST_TO_ADDR
// if p3 = 108 then
42772: LD_VAR 0 3
42776: PUSH
42777: LD_INT 108
42779: EQUAL
42780: IFFALSE 42790
// sWound := true ;
42782: LD_ADDR_EXP 61
42786: PUSH
42787: LD_INT 1
42789: ST_TO_ADDR
// if p3 = 109 then
42790: LD_VAR 0 3
42794: PUSH
42795: LD_INT 109
42797: EQUAL
42798: IFFALSE 42808
// sBetray := true ;
42800: LD_ADDR_EXP 65
42804: PUSH
42805: LD_INT 1
42807: ST_TO_ADDR
// if p3 = 110 then
42808: LD_VAR 0 3
42812: PUSH
42813: LD_INT 110
42815: EQUAL
42816: IFFALSE 42826
// sContamin := true ;
42818: LD_ADDR_EXP 66
42822: PUSH
42823: LD_INT 1
42825: ST_TO_ADDR
// if p3 = 111 then
42826: LD_VAR 0 3
42830: PUSH
42831: LD_INT 111
42833: EQUAL
42834: IFFALSE 42844
// sOil := true ;
42836: LD_ADDR_EXP 68
42840: PUSH
42841: LD_INT 1
42843: ST_TO_ADDR
// if p3 = 112 then
42844: LD_VAR 0 3
42848: PUSH
42849: LD_INT 112
42851: EQUAL
42852: IFFALSE 42862
// sStu := true ;
42854: LD_ADDR_EXP 72
42858: PUSH
42859: LD_INT 1
42861: ST_TO_ADDR
// if p3 = 113 then
42862: LD_VAR 0 3
42866: PUSH
42867: LD_INT 113
42869: EQUAL
42870: IFFALSE 42880
// sBazooka := true ;
42872: LD_ADDR_EXP 75
42876: PUSH
42877: LD_INT 1
42879: ST_TO_ADDR
// if p3 = 114 then
42880: LD_VAR 0 3
42884: PUSH
42885: LD_INT 114
42887: EQUAL
42888: IFFALSE 42898
// sMortar := true ;
42890: LD_ADDR_EXP 76
42894: PUSH
42895: LD_INT 1
42897: ST_TO_ADDR
// if p3 = 115 then
42898: LD_VAR 0 3
42902: PUSH
42903: LD_INT 115
42905: EQUAL
42906: IFFALSE 42916
// sRanger := true ;
42908: LD_ADDR_EXP 86
42912: PUSH
42913: LD_INT 1
42915: ST_TO_ADDR
// end ; if p2 = 101 then
42916: LD_VAR 0 2
42920: PUSH
42921: LD_INT 101
42923: EQUAL
42924: IFFALSE 43052
// begin case p3 of 1 :
42926: LD_VAR 0 3
42930: PUSH
42931: LD_INT 1
42933: DOUBLE
42934: EQUAL
42935: IFTRUE 42939
42937: GO 42946
42939: POP
// hHackUnlimitedResources ; 2 :
42940: CALL 54089 0 0
42944: GO 43052
42946: LD_INT 2
42948: DOUBLE
42949: EQUAL
42950: IFTRUE 42954
42952: GO 42961
42954: POP
// hHackSetLevel10 ; 3 :
42955: CALL 54222 0 0
42959: GO 43052
42961: LD_INT 3
42963: DOUBLE
42964: EQUAL
42965: IFTRUE 42969
42967: GO 42976
42969: POP
// hHackSetLevel10YourUnits ; 4 :
42970: CALL 54307 0 0
42974: GO 43052
42976: LD_INT 4
42978: DOUBLE
42979: EQUAL
42980: IFTRUE 42984
42982: GO 42991
42984: POP
// hHackInvincible ; 5 :
42985: CALL 54755 0 0
42989: GO 43052
42991: LD_INT 5
42993: DOUBLE
42994: EQUAL
42995: IFTRUE 42999
42997: GO 43006
42999: POP
// hHackInvisible ; 6 :
43000: CALL 54866 0 0
43004: GO 43052
43006: LD_INT 6
43008: DOUBLE
43009: EQUAL
43010: IFTRUE 43014
43012: GO 43021
43014: POP
// hHackChangeYourSide ; 7 :
43015: CALL 54923 0 0
43019: GO 43052
43021: LD_INT 7
43023: DOUBLE
43024: EQUAL
43025: IFTRUE 43029
43027: GO 43036
43029: POP
// hHackChangeUnitSide ; 8 :
43030: CALL 54965 0 0
43034: GO 43052
43036: LD_INT 8
43038: DOUBLE
43039: EQUAL
43040: IFTRUE 43044
43042: GO 43051
43044: POP
// hHackFog ; end ;
43045: CALL 55066 0 0
43049: GO 43052
43051: POP
// end ; end ;
43052: LD_VAR 0 7
43056: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
43057: GO 43059
43059: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
43060: LD_STRING initStreamRollete();
43062: PPUSH
43063: CALL_OW 559
// InitStreamMode ;
43067: CALL 43076 0 0
// DefineStreamItems ( ) ;
43071: CALL 43516 0 0
// end ;
43075: END
// function InitStreamMode ; begin
43076: LD_INT 0
43078: PPUSH
// streamModeActive := false ;
43079: LD_ADDR_EXP 33
43083: PUSH
43084: LD_INT 0
43086: ST_TO_ADDR
// normalCounter := 36 ;
43087: LD_ADDR_EXP 34
43091: PUSH
43092: LD_INT 36
43094: ST_TO_ADDR
// hardcoreCounter := 16 ;
43095: LD_ADDR_EXP 35
43099: PUSH
43100: LD_INT 16
43102: ST_TO_ADDR
// sRocket := false ;
43103: LD_ADDR_EXP 38
43107: PUSH
43108: LD_INT 0
43110: ST_TO_ADDR
// sSpeed := false ;
43111: LD_ADDR_EXP 37
43115: PUSH
43116: LD_INT 0
43118: ST_TO_ADDR
// sEngine := false ;
43119: LD_ADDR_EXP 39
43123: PUSH
43124: LD_INT 0
43126: ST_TO_ADDR
// sSpec := false ;
43127: LD_ADDR_EXP 36
43131: PUSH
43132: LD_INT 0
43134: ST_TO_ADDR
// sLevel := false ;
43135: LD_ADDR_EXP 40
43139: PUSH
43140: LD_INT 0
43142: ST_TO_ADDR
// sArmoury := false ;
43143: LD_ADDR_EXP 41
43147: PUSH
43148: LD_INT 0
43150: ST_TO_ADDR
// sRadar := false ;
43151: LD_ADDR_EXP 42
43155: PUSH
43156: LD_INT 0
43158: ST_TO_ADDR
// sBunker := false ;
43159: LD_ADDR_EXP 43
43163: PUSH
43164: LD_INT 0
43166: ST_TO_ADDR
// sHack := false ;
43167: LD_ADDR_EXP 44
43171: PUSH
43172: LD_INT 0
43174: ST_TO_ADDR
// sFire := false ;
43175: LD_ADDR_EXP 45
43179: PUSH
43180: LD_INT 0
43182: ST_TO_ADDR
// sRefresh := false ;
43183: LD_ADDR_EXP 46
43187: PUSH
43188: LD_INT 0
43190: ST_TO_ADDR
// sExp := false ;
43191: LD_ADDR_EXP 47
43195: PUSH
43196: LD_INT 0
43198: ST_TO_ADDR
// sDepot := false ;
43199: LD_ADDR_EXP 48
43203: PUSH
43204: LD_INT 0
43206: ST_TO_ADDR
// sFlag := false ;
43207: LD_ADDR_EXP 49
43211: PUSH
43212: LD_INT 0
43214: ST_TO_ADDR
// sKamikadze := false ;
43215: LD_ADDR_EXP 57
43219: PUSH
43220: LD_INT 0
43222: ST_TO_ADDR
// sTroll := false ;
43223: LD_ADDR_EXP 58
43227: PUSH
43228: LD_INT 0
43230: ST_TO_ADDR
// sSlow := false ;
43231: LD_ADDR_EXP 59
43235: PUSH
43236: LD_INT 0
43238: ST_TO_ADDR
// sLack := false ;
43239: LD_ADDR_EXP 60
43243: PUSH
43244: LD_INT 0
43246: ST_TO_ADDR
// sTank := false ;
43247: LD_ADDR_EXP 62
43251: PUSH
43252: LD_INT 0
43254: ST_TO_ADDR
// sRemote := false ;
43255: LD_ADDR_EXP 63
43259: PUSH
43260: LD_INT 0
43262: ST_TO_ADDR
// sPowell := false ;
43263: LD_ADDR_EXP 64
43267: PUSH
43268: LD_INT 0
43270: ST_TO_ADDR
// sTeleport := false ;
43271: LD_ADDR_EXP 67
43275: PUSH
43276: LD_INT 0
43278: ST_TO_ADDR
// sOilTower := false ;
43279: LD_ADDR_EXP 69
43283: PUSH
43284: LD_INT 0
43286: ST_TO_ADDR
// sShovel := false ;
43287: LD_ADDR_EXP 70
43291: PUSH
43292: LD_INT 0
43294: ST_TO_ADDR
// sSheik := false ;
43295: LD_ADDR_EXP 71
43299: PUSH
43300: LD_INT 0
43302: ST_TO_ADDR
// sEarthquake := false ;
43303: LD_ADDR_EXP 73
43307: PUSH
43308: LD_INT 0
43310: ST_TO_ADDR
// sAI := false ;
43311: LD_ADDR_EXP 74
43315: PUSH
43316: LD_INT 0
43318: ST_TO_ADDR
// sCargo := false ;
43319: LD_ADDR_EXP 77
43323: PUSH
43324: LD_INT 0
43326: ST_TO_ADDR
// sDLaser := false ;
43327: LD_ADDR_EXP 78
43331: PUSH
43332: LD_INT 0
43334: ST_TO_ADDR
// sExchange := false ;
43335: LD_ADDR_EXP 79
43339: PUSH
43340: LD_INT 0
43342: ST_TO_ADDR
// sFac := false ;
43343: LD_ADDR_EXP 80
43347: PUSH
43348: LD_INT 0
43350: ST_TO_ADDR
// sPower := false ;
43351: LD_ADDR_EXP 81
43355: PUSH
43356: LD_INT 0
43358: ST_TO_ADDR
// sRandom := false ;
43359: LD_ADDR_EXP 82
43363: PUSH
43364: LD_INT 0
43366: ST_TO_ADDR
// sShield := false ;
43367: LD_ADDR_EXP 83
43371: PUSH
43372: LD_INT 0
43374: ST_TO_ADDR
// sTime := false ;
43375: LD_ADDR_EXP 84
43379: PUSH
43380: LD_INT 0
43382: ST_TO_ADDR
// sTools := false ;
43383: LD_ADDR_EXP 85
43387: PUSH
43388: LD_INT 0
43390: ST_TO_ADDR
// sSold := false ;
43391: LD_ADDR_EXP 50
43395: PUSH
43396: LD_INT 0
43398: ST_TO_ADDR
// sDiff := false ;
43399: LD_ADDR_EXP 51
43403: PUSH
43404: LD_INT 0
43406: ST_TO_ADDR
// sFog := false ;
43407: LD_ADDR_EXP 54
43411: PUSH
43412: LD_INT 0
43414: ST_TO_ADDR
// sReset := false ;
43415: LD_ADDR_EXP 55
43419: PUSH
43420: LD_INT 0
43422: ST_TO_ADDR
// sSun := false ;
43423: LD_ADDR_EXP 56
43427: PUSH
43428: LD_INT 0
43430: ST_TO_ADDR
// sTiger := false ;
43431: LD_ADDR_EXP 52
43435: PUSH
43436: LD_INT 0
43438: ST_TO_ADDR
// sBomb := false ;
43439: LD_ADDR_EXP 53
43443: PUSH
43444: LD_INT 0
43446: ST_TO_ADDR
// sWound := false ;
43447: LD_ADDR_EXP 61
43451: PUSH
43452: LD_INT 0
43454: ST_TO_ADDR
// sBetray := false ;
43455: LD_ADDR_EXP 65
43459: PUSH
43460: LD_INT 0
43462: ST_TO_ADDR
// sContamin := false ;
43463: LD_ADDR_EXP 66
43467: PUSH
43468: LD_INT 0
43470: ST_TO_ADDR
// sOil := false ;
43471: LD_ADDR_EXP 68
43475: PUSH
43476: LD_INT 0
43478: ST_TO_ADDR
// sStu := false ;
43479: LD_ADDR_EXP 72
43483: PUSH
43484: LD_INT 0
43486: ST_TO_ADDR
// sBazooka := false ;
43487: LD_ADDR_EXP 75
43491: PUSH
43492: LD_INT 0
43494: ST_TO_ADDR
// sMortar := false ;
43495: LD_ADDR_EXP 76
43499: PUSH
43500: LD_INT 0
43502: ST_TO_ADDR
// sRanger := false ;
43503: LD_ADDR_EXP 86
43507: PUSH
43508: LD_INT 0
43510: ST_TO_ADDR
// end ;
43511: LD_VAR 0 1
43515: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
43516: LD_INT 0
43518: PPUSH
43519: PPUSH
43520: PPUSH
43521: PPUSH
43522: PPUSH
// result := [ ] ;
43523: LD_ADDR_VAR 0 1
43527: PUSH
43528: EMPTY
43529: ST_TO_ADDR
// if campaign_id = 1 then
43530: LD_OWVAR 69
43534: PUSH
43535: LD_INT 1
43537: EQUAL
43538: IFFALSE 46476
// begin case mission_number of 1 :
43540: LD_OWVAR 70
43544: PUSH
43545: LD_INT 1
43547: DOUBLE
43548: EQUAL
43549: IFTRUE 43553
43551: GO 43617
43553: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
43554: LD_ADDR_VAR 0 1
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: LD_INT 4
43564: PUSH
43565: LD_INT 11
43567: PUSH
43568: LD_INT 12
43570: PUSH
43571: LD_INT 15
43573: PUSH
43574: LD_INT 16
43576: PUSH
43577: LD_INT 22
43579: PUSH
43580: LD_INT 23
43582: PUSH
43583: LD_INT 26
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 101
43599: PUSH
43600: LD_INT 102
43602: PUSH
43603: LD_INT 106
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: LIST
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: ST_TO_ADDR
43615: GO 46474
43617: LD_INT 2
43619: DOUBLE
43620: EQUAL
43621: IFTRUE 43625
43623: GO 43697
43625: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
43626: LD_ADDR_VAR 0 1
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: LD_INT 4
43636: PUSH
43637: LD_INT 11
43639: PUSH
43640: LD_INT 12
43642: PUSH
43643: LD_INT 15
43645: PUSH
43646: LD_INT 16
43648: PUSH
43649: LD_INT 22
43651: PUSH
43652: LD_INT 23
43654: PUSH
43655: LD_INT 26
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 101
43671: PUSH
43672: LD_INT 102
43674: PUSH
43675: LD_INT 105
43677: PUSH
43678: LD_INT 106
43680: PUSH
43681: LD_INT 108
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: ST_TO_ADDR
43695: GO 46474
43697: LD_INT 3
43699: DOUBLE
43700: EQUAL
43701: IFTRUE 43705
43703: GO 43781
43705: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
43706: LD_ADDR_VAR 0 1
43710: PUSH
43711: LD_INT 2
43713: PUSH
43714: LD_INT 4
43716: PUSH
43717: LD_INT 5
43719: PUSH
43720: LD_INT 11
43722: PUSH
43723: LD_INT 12
43725: PUSH
43726: LD_INT 15
43728: PUSH
43729: LD_INT 16
43731: PUSH
43732: LD_INT 22
43734: PUSH
43735: LD_INT 26
43737: PUSH
43738: LD_INT 36
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 101
43755: PUSH
43756: LD_INT 102
43758: PUSH
43759: LD_INT 105
43761: PUSH
43762: LD_INT 106
43764: PUSH
43765: LD_INT 108
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: ST_TO_ADDR
43779: GO 46474
43781: LD_INT 4
43783: DOUBLE
43784: EQUAL
43785: IFTRUE 43789
43787: GO 43873
43789: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
43790: LD_ADDR_VAR 0 1
43794: PUSH
43795: LD_INT 2
43797: PUSH
43798: LD_INT 4
43800: PUSH
43801: LD_INT 5
43803: PUSH
43804: LD_INT 8
43806: PUSH
43807: LD_INT 11
43809: PUSH
43810: LD_INT 12
43812: PUSH
43813: LD_INT 15
43815: PUSH
43816: LD_INT 16
43818: PUSH
43819: LD_INT 22
43821: PUSH
43822: LD_INT 23
43824: PUSH
43825: LD_INT 26
43827: PUSH
43828: LD_INT 36
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 101
43847: PUSH
43848: LD_INT 102
43850: PUSH
43851: LD_INT 105
43853: PUSH
43854: LD_INT 106
43856: PUSH
43857: LD_INT 108
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: ST_TO_ADDR
43871: GO 46474
43873: LD_INT 5
43875: DOUBLE
43876: EQUAL
43877: IFTRUE 43881
43879: GO 43981
43881: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
43882: LD_ADDR_VAR 0 1
43886: PUSH
43887: LD_INT 2
43889: PUSH
43890: LD_INT 4
43892: PUSH
43893: LD_INT 5
43895: PUSH
43896: LD_INT 6
43898: PUSH
43899: LD_INT 8
43901: PUSH
43902: LD_INT 11
43904: PUSH
43905: LD_INT 12
43907: PUSH
43908: LD_INT 15
43910: PUSH
43911: LD_INT 16
43913: PUSH
43914: LD_INT 22
43916: PUSH
43917: LD_INT 23
43919: PUSH
43920: LD_INT 25
43922: PUSH
43923: LD_INT 26
43925: PUSH
43926: LD_INT 36
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 101
43947: PUSH
43948: LD_INT 102
43950: PUSH
43951: LD_INT 105
43953: PUSH
43954: LD_INT 106
43956: PUSH
43957: LD_INT 108
43959: PUSH
43960: LD_INT 109
43962: PUSH
43963: LD_INT 112
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: ST_TO_ADDR
43979: GO 46474
43981: LD_INT 6
43983: DOUBLE
43984: EQUAL
43985: IFTRUE 43989
43987: GO 44109
43989: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
43990: LD_ADDR_VAR 0 1
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: LD_INT 4
44000: PUSH
44001: LD_INT 5
44003: PUSH
44004: LD_INT 6
44006: PUSH
44007: LD_INT 8
44009: PUSH
44010: LD_INT 11
44012: PUSH
44013: LD_INT 12
44015: PUSH
44016: LD_INT 15
44018: PUSH
44019: LD_INT 16
44021: PUSH
44022: LD_INT 20
44024: PUSH
44025: LD_INT 21
44027: PUSH
44028: LD_INT 22
44030: PUSH
44031: LD_INT 23
44033: PUSH
44034: LD_INT 25
44036: PUSH
44037: LD_INT 26
44039: PUSH
44040: LD_INT 30
44042: PUSH
44043: LD_INT 31
44045: PUSH
44046: LD_INT 32
44048: PUSH
44049: LD_INT 36
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 101
44075: PUSH
44076: LD_INT 102
44078: PUSH
44079: LD_INT 105
44081: PUSH
44082: LD_INT 106
44084: PUSH
44085: LD_INT 108
44087: PUSH
44088: LD_INT 109
44090: PUSH
44091: LD_INT 112
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: ST_TO_ADDR
44107: GO 46474
44109: LD_INT 7
44111: DOUBLE
44112: EQUAL
44113: IFTRUE 44117
44115: GO 44217
44117: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
44118: LD_ADDR_VAR 0 1
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: LD_INT 4
44128: PUSH
44129: LD_INT 5
44131: PUSH
44132: LD_INT 7
44134: PUSH
44135: LD_INT 11
44137: PUSH
44138: LD_INT 12
44140: PUSH
44141: LD_INT 15
44143: PUSH
44144: LD_INT 16
44146: PUSH
44147: LD_INT 20
44149: PUSH
44150: LD_INT 21
44152: PUSH
44153: LD_INT 22
44155: PUSH
44156: LD_INT 23
44158: PUSH
44159: LD_INT 25
44161: PUSH
44162: LD_INT 26
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 101
44183: PUSH
44184: LD_INT 102
44186: PUSH
44187: LD_INT 103
44189: PUSH
44190: LD_INT 105
44192: PUSH
44193: LD_INT 106
44195: PUSH
44196: LD_INT 108
44198: PUSH
44199: LD_INT 112
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: ST_TO_ADDR
44215: GO 46474
44217: LD_INT 8
44219: DOUBLE
44220: EQUAL
44221: IFTRUE 44225
44223: GO 44353
44225: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
44226: LD_ADDR_VAR 0 1
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: LD_INT 4
44236: PUSH
44237: LD_INT 5
44239: PUSH
44240: LD_INT 6
44242: PUSH
44243: LD_INT 7
44245: PUSH
44246: LD_INT 8
44248: PUSH
44249: LD_INT 11
44251: PUSH
44252: LD_INT 12
44254: PUSH
44255: LD_INT 15
44257: PUSH
44258: LD_INT 16
44260: PUSH
44261: LD_INT 20
44263: PUSH
44264: LD_INT 21
44266: PUSH
44267: LD_INT 22
44269: PUSH
44270: LD_INT 23
44272: PUSH
44273: LD_INT 25
44275: PUSH
44276: LD_INT 26
44278: PUSH
44279: LD_INT 30
44281: PUSH
44282: LD_INT 31
44284: PUSH
44285: LD_INT 32
44287: PUSH
44288: LD_INT 36
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 101
44315: PUSH
44316: LD_INT 102
44318: PUSH
44319: LD_INT 103
44321: PUSH
44322: LD_INT 105
44324: PUSH
44325: LD_INT 106
44327: PUSH
44328: LD_INT 108
44330: PUSH
44331: LD_INT 109
44333: PUSH
44334: LD_INT 112
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: ST_TO_ADDR
44351: GO 46474
44353: LD_INT 9
44355: DOUBLE
44356: EQUAL
44357: IFTRUE 44361
44359: GO 44497
44361: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
44362: LD_ADDR_VAR 0 1
44366: PUSH
44367: LD_INT 2
44369: PUSH
44370: LD_INT 4
44372: PUSH
44373: LD_INT 5
44375: PUSH
44376: LD_INT 6
44378: PUSH
44379: LD_INT 7
44381: PUSH
44382: LD_INT 8
44384: PUSH
44385: LD_INT 11
44387: PUSH
44388: LD_INT 12
44390: PUSH
44391: LD_INT 15
44393: PUSH
44394: LD_INT 16
44396: PUSH
44397: LD_INT 20
44399: PUSH
44400: LD_INT 21
44402: PUSH
44403: LD_INT 22
44405: PUSH
44406: LD_INT 23
44408: PUSH
44409: LD_INT 25
44411: PUSH
44412: LD_INT 26
44414: PUSH
44415: LD_INT 28
44417: PUSH
44418: LD_INT 30
44420: PUSH
44421: LD_INT 31
44423: PUSH
44424: LD_INT 32
44426: PUSH
44427: LD_INT 36
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 101
44455: PUSH
44456: LD_INT 102
44458: PUSH
44459: LD_INT 103
44461: PUSH
44462: LD_INT 105
44464: PUSH
44465: LD_INT 106
44467: PUSH
44468: LD_INT 108
44470: PUSH
44471: LD_INT 109
44473: PUSH
44474: LD_INT 112
44476: PUSH
44477: LD_INT 114
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: ST_TO_ADDR
44495: GO 46474
44497: LD_INT 10
44499: DOUBLE
44500: EQUAL
44501: IFTRUE 44505
44503: GO 44689
44505: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
44506: LD_ADDR_VAR 0 1
44510: PUSH
44511: LD_INT 2
44513: PUSH
44514: LD_INT 4
44516: PUSH
44517: LD_INT 5
44519: PUSH
44520: LD_INT 6
44522: PUSH
44523: LD_INT 7
44525: PUSH
44526: LD_INT 8
44528: PUSH
44529: LD_INT 9
44531: PUSH
44532: LD_INT 10
44534: PUSH
44535: LD_INT 11
44537: PUSH
44538: LD_INT 12
44540: PUSH
44541: LD_INT 13
44543: PUSH
44544: LD_INT 14
44546: PUSH
44547: LD_INT 15
44549: PUSH
44550: LD_INT 16
44552: PUSH
44553: LD_INT 17
44555: PUSH
44556: LD_INT 18
44558: PUSH
44559: LD_INT 19
44561: PUSH
44562: LD_INT 20
44564: PUSH
44565: LD_INT 21
44567: PUSH
44568: LD_INT 22
44570: PUSH
44571: LD_INT 23
44573: PUSH
44574: LD_INT 24
44576: PUSH
44577: LD_INT 25
44579: PUSH
44580: LD_INT 26
44582: PUSH
44583: LD_INT 28
44585: PUSH
44586: LD_INT 30
44588: PUSH
44589: LD_INT 31
44591: PUSH
44592: LD_INT 32
44594: PUSH
44595: LD_INT 36
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 101
44631: PUSH
44632: LD_INT 102
44634: PUSH
44635: LD_INT 103
44637: PUSH
44638: LD_INT 104
44640: PUSH
44641: LD_INT 105
44643: PUSH
44644: LD_INT 106
44646: PUSH
44647: LD_INT 107
44649: PUSH
44650: LD_INT 108
44652: PUSH
44653: LD_INT 109
44655: PUSH
44656: LD_INT 110
44658: PUSH
44659: LD_INT 111
44661: PUSH
44662: LD_INT 112
44664: PUSH
44665: LD_INT 114
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: ST_TO_ADDR
44687: GO 46474
44689: LD_INT 11
44691: DOUBLE
44692: EQUAL
44693: IFTRUE 44697
44695: GO 44889
44697: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
44698: LD_ADDR_VAR 0 1
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: LD_INT 3
44708: PUSH
44709: LD_INT 4
44711: PUSH
44712: LD_INT 5
44714: PUSH
44715: LD_INT 6
44717: PUSH
44718: LD_INT 7
44720: PUSH
44721: LD_INT 8
44723: PUSH
44724: LD_INT 9
44726: PUSH
44727: LD_INT 10
44729: PUSH
44730: LD_INT 11
44732: PUSH
44733: LD_INT 12
44735: PUSH
44736: LD_INT 13
44738: PUSH
44739: LD_INT 14
44741: PUSH
44742: LD_INT 15
44744: PUSH
44745: LD_INT 16
44747: PUSH
44748: LD_INT 17
44750: PUSH
44751: LD_INT 18
44753: PUSH
44754: LD_INT 19
44756: PUSH
44757: LD_INT 20
44759: PUSH
44760: LD_INT 21
44762: PUSH
44763: LD_INT 22
44765: PUSH
44766: LD_INT 23
44768: PUSH
44769: LD_INT 24
44771: PUSH
44772: LD_INT 25
44774: PUSH
44775: LD_INT 26
44777: PUSH
44778: LD_INT 28
44780: PUSH
44781: LD_INT 30
44783: PUSH
44784: LD_INT 31
44786: PUSH
44787: LD_INT 32
44789: PUSH
44790: LD_INT 34
44792: PUSH
44793: LD_INT 36
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 101
44831: PUSH
44832: LD_INT 102
44834: PUSH
44835: LD_INT 103
44837: PUSH
44838: LD_INT 104
44840: PUSH
44841: LD_INT 105
44843: PUSH
44844: LD_INT 106
44846: PUSH
44847: LD_INT 107
44849: PUSH
44850: LD_INT 108
44852: PUSH
44853: LD_INT 109
44855: PUSH
44856: LD_INT 110
44858: PUSH
44859: LD_INT 111
44861: PUSH
44862: LD_INT 112
44864: PUSH
44865: LD_INT 114
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: ST_TO_ADDR
44887: GO 46474
44889: LD_INT 12
44891: DOUBLE
44892: EQUAL
44893: IFTRUE 44897
44895: GO 45105
44897: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
44898: LD_ADDR_VAR 0 1
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: LD_INT 3
44911: PUSH
44912: LD_INT 4
44914: PUSH
44915: LD_INT 5
44917: PUSH
44918: LD_INT 6
44920: PUSH
44921: LD_INT 7
44923: PUSH
44924: LD_INT 8
44926: PUSH
44927: LD_INT 9
44929: PUSH
44930: LD_INT 10
44932: PUSH
44933: LD_INT 11
44935: PUSH
44936: LD_INT 12
44938: PUSH
44939: LD_INT 13
44941: PUSH
44942: LD_INT 14
44944: PUSH
44945: LD_INT 15
44947: PUSH
44948: LD_INT 16
44950: PUSH
44951: LD_INT 17
44953: PUSH
44954: LD_INT 18
44956: PUSH
44957: LD_INT 19
44959: PUSH
44960: LD_INT 20
44962: PUSH
44963: LD_INT 21
44965: PUSH
44966: LD_INT 22
44968: PUSH
44969: LD_INT 23
44971: PUSH
44972: LD_INT 24
44974: PUSH
44975: LD_INT 25
44977: PUSH
44978: LD_INT 26
44980: PUSH
44981: LD_INT 27
44983: PUSH
44984: LD_INT 28
44986: PUSH
44987: LD_INT 30
44989: PUSH
44990: LD_INT 31
44992: PUSH
44993: LD_INT 32
44995: PUSH
44996: LD_INT 33
44998: PUSH
44999: LD_INT 34
45001: PUSH
45002: LD_INT 36
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 101
45043: PUSH
45044: LD_INT 102
45046: PUSH
45047: LD_INT 103
45049: PUSH
45050: LD_INT 104
45052: PUSH
45053: LD_INT 105
45055: PUSH
45056: LD_INT 106
45058: PUSH
45059: LD_INT 107
45061: PUSH
45062: LD_INT 108
45064: PUSH
45065: LD_INT 109
45067: PUSH
45068: LD_INT 110
45070: PUSH
45071: LD_INT 111
45073: PUSH
45074: LD_INT 112
45076: PUSH
45077: LD_INT 113
45079: PUSH
45080: LD_INT 114
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: ST_TO_ADDR
45103: GO 46474
45105: LD_INT 13
45107: DOUBLE
45108: EQUAL
45109: IFTRUE 45113
45111: GO 45309
45113: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
45114: LD_ADDR_VAR 0 1
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: LD_INT 2
45124: PUSH
45125: LD_INT 3
45127: PUSH
45128: LD_INT 4
45130: PUSH
45131: LD_INT 5
45133: PUSH
45134: LD_INT 8
45136: PUSH
45137: LD_INT 9
45139: PUSH
45140: LD_INT 10
45142: PUSH
45143: LD_INT 11
45145: PUSH
45146: LD_INT 12
45148: PUSH
45149: LD_INT 14
45151: PUSH
45152: LD_INT 15
45154: PUSH
45155: LD_INT 16
45157: PUSH
45158: LD_INT 17
45160: PUSH
45161: LD_INT 18
45163: PUSH
45164: LD_INT 19
45166: PUSH
45167: LD_INT 20
45169: PUSH
45170: LD_INT 21
45172: PUSH
45173: LD_INT 22
45175: PUSH
45176: LD_INT 23
45178: PUSH
45179: LD_INT 24
45181: PUSH
45182: LD_INT 25
45184: PUSH
45185: LD_INT 26
45187: PUSH
45188: LD_INT 27
45190: PUSH
45191: LD_INT 28
45193: PUSH
45194: LD_INT 30
45196: PUSH
45197: LD_INT 31
45199: PUSH
45200: LD_INT 32
45202: PUSH
45203: LD_INT 33
45205: PUSH
45206: LD_INT 34
45208: PUSH
45209: LD_INT 36
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 101
45247: PUSH
45248: LD_INT 102
45250: PUSH
45251: LD_INT 103
45253: PUSH
45254: LD_INT 104
45256: PUSH
45257: LD_INT 105
45259: PUSH
45260: LD_INT 106
45262: PUSH
45263: LD_INT 107
45265: PUSH
45266: LD_INT 108
45268: PUSH
45269: LD_INT 109
45271: PUSH
45272: LD_INT 110
45274: PUSH
45275: LD_INT 111
45277: PUSH
45278: LD_INT 112
45280: PUSH
45281: LD_INT 113
45283: PUSH
45284: LD_INT 114
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: ST_TO_ADDR
45307: GO 46474
45309: LD_INT 14
45311: DOUBLE
45312: EQUAL
45313: IFTRUE 45317
45315: GO 45529
45317: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
45318: LD_ADDR_VAR 0 1
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: LD_INT 3
45331: PUSH
45332: LD_INT 4
45334: PUSH
45335: LD_INT 5
45337: PUSH
45338: LD_INT 6
45340: PUSH
45341: LD_INT 7
45343: PUSH
45344: LD_INT 8
45346: PUSH
45347: LD_INT 9
45349: PUSH
45350: LD_INT 10
45352: PUSH
45353: LD_INT 11
45355: PUSH
45356: LD_INT 12
45358: PUSH
45359: LD_INT 13
45361: PUSH
45362: LD_INT 14
45364: PUSH
45365: LD_INT 15
45367: PUSH
45368: LD_INT 16
45370: PUSH
45371: LD_INT 17
45373: PUSH
45374: LD_INT 18
45376: PUSH
45377: LD_INT 19
45379: PUSH
45380: LD_INT 20
45382: PUSH
45383: LD_INT 21
45385: PUSH
45386: LD_INT 22
45388: PUSH
45389: LD_INT 23
45391: PUSH
45392: LD_INT 24
45394: PUSH
45395: LD_INT 25
45397: PUSH
45398: LD_INT 26
45400: PUSH
45401: LD_INT 27
45403: PUSH
45404: LD_INT 28
45406: PUSH
45407: LD_INT 29
45409: PUSH
45410: LD_INT 30
45412: PUSH
45413: LD_INT 31
45415: PUSH
45416: LD_INT 32
45418: PUSH
45419: LD_INT 33
45421: PUSH
45422: LD_INT 34
45424: PUSH
45425: LD_INT 36
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 101
45467: PUSH
45468: LD_INT 102
45470: PUSH
45471: LD_INT 103
45473: PUSH
45474: LD_INT 104
45476: PUSH
45477: LD_INT 105
45479: PUSH
45480: LD_INT 106
45482: PUSH
45483: LD_INT 107
45485: PUSH
45486: LD_INT 108
45488: PUSH
45489: LD_INT 109
45491: PUSH
45492: LD_INT 110
45494: PUSH
45495: LD_INT 111
45497: PUSH
45498: LD_INT 112
45500: PUSH
45501: LD_INT 113
45503: PUSH
45504: LD_INT 114
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: ST_TO_ADDR
45527: GO 46474
45529: LD_INT 15
45531: DOUBLE
45532: EQUAL
45533: IFTRUE 45537
45535: GO 45749
45537: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
45538: LD_ADDR_VAR 0 1
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: LD_INT 3
45551: PUSH
45552: LD_INT 4
45554: PUSH
45555: LD_INT 5
45557: PUSH
45558: LD_INT 6
45560: PUSH
45561: LD_INT 7
45563: PUSH
45564: LD_INT 8
45566: PUSH
45567: LD_INT 9
45569: PUSH
45570: LD_INT 10
45572: PUSH
45573: LD_INT 11
45575: PUSH
45576: LD_INT 12
45578: PUSH
45579: LD_INT 13
45581: PUSH
45582: LD_INT 14
45584: PUSH
45585: LD_INT 15
45587: PUSH
45588: LD_INT 16
45590: PUSH
45591: LD_INT 17
45593: PUSH
45594: LD_INT 18
45596: PUSH
45597: LD_INT 19
45599: PUSH
45600: LD_INT 20
45602: PUSH
45603: LD_INT 21
45605: PUSH
45606: LD_INT 22
45608: PUSH
45609: LD_INT 23
45611: PUSH
45612: LD_INT 24
45614: PUSH
45615: LD_INT 25
45617: PUSH
45618: LD_INT 26
45620: PUSH
45621: LD_INT 27
45623: PUSH
45624: LD_INT 28
45626: PUSH
45627: LD_INT 29
45629: PUSH
45630: LD_INT 30
45632: PUSH
45633: LD_INT 31
45635: PUSH
45636: LD_INT 32
45638: PUSH
45639: LD_INT 33
45641: PUSH
45642: LD_INT 34
45644: PUSH
45645: LD_INT 36
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 101
45687: PUSH
45688: LD_INT 102
45690: PUSH
45691: LD_INT 103
45693: PUSH
45694: LD_INT 104
45696: PUSH
45697: LD_INT 105
45699: PUSH
45700: LD_INT 106
45702: PUSH
45703: LD_INT 107
45705: PUSH
45706: LD_INT 108
45708: PUSH
45709: LD_INT 109
45711: PUSH
45712: LD_INT 110
45714: PUSH
45715: LD_INT 111
45717: PUSH
45718: LD_INT 112
45720: PUSH
45721: LD_INT 113
45723: PUSH
45724: LD_INT 114
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: ST_TO_ADDR
45747: GO 46474
45749: LD_INT 16
45751: DOUBLE
45752: EQUAL
45753: IFTRUE 45757
45755: GO 45881
45757: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
45758: LD_ADDR_VAR 0 1
45762: PUSH
45763: LD_INT 2
45765: PUSH
45766: LD_INT 4
45768: PUSH
45769: LD_INT 5
45771: PUSH
45772: LD_INT 7
45774: PUSH
45775: LD_INT 11
45777: PUSH
45778: LD_INT 12
45780: PUSH
45781: LD_INT 15
45783: PUSH
45784: LD_INT 16
45786: PUSH
45787: LD_INT 20
45789: PUSH
45790: LD_INT 21
45792: PUSH
45793: LD_INT 22
45795: PUSH
45796: LD_INT 23
45798: PUSH
45799: LD_INT 25
45801: PUSH
45802: LD_INT 26
45804: PUSH
45805: LD_INT 30
45807: PUSH
45808: LD_INT 31
45810: PUSH
45811: LD_INT 32
45813: PUSH
45814: LD_INT 33
45816: PUSH
45817: LD_INT 34
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 101
45843: PUSH
45844: LD_INT 102
45846: PUSH
45847: LD_INT 103
45849: PUSH
45850: LD_INT 106
45852: PUSH
45853: LD_INT 108
45855: PUSH
45856: LD_INT 112
45858: PUSH
45859: LD_INT 113
45861: PUSH
45862: LD_INT 114
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: ST_TO_ADDR
45879: GO 46474
45881: LD_INT 17
45883: DOUBLE
45884: EQUAL
45885: IFTRUE 45889
45887: GO 46101
45889: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
45890: LD_ADDR_VAR 0 1
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: LD_INT 3
45903: PUSH
45904: LD_INT 4
45906: PUSH
45907: LD_INT 5
45909: PUSH
45910: LD_INT 6
45912: PUSH
45913: LD_INT 7
45915: PUSH
45916: LD_INT 8
45918: PUSH
45919: LD_INT 9
45921: PUSH
45922: LD_INT 10
45924: PUSH
45925: LD_INT 11
45927: PUSH
45928: LD_INT 12
45930: PUSH
45931: LD_INT 13
45933: PUSH
45934: LD_INT 14
45936: PUSH
45937: LD_INT 15
45939: PUSH
45940: LD_INT 16
45942: PUSH
45943: LD_INT 17
45945: PUSH
45946: LD_INT 18
45948: PUSH
45949: LD_INT 19
45951: PUSH
45952: LD_INT 20
45954: PUSH
45955: LD_INT 21
45957: PUSH
45958: LD_INT 22
45960: PUSH
45961: LD_INT 23
45963: PUSH
45964: LD_INT 24
45966: PUSH
45967: LD_INT 25
45969: PUSH
45970: LD_INT 26
45972: PUSH
45973: LD_INT 27
45975: PUSH
45976: LD_INT 28
45978: PUSH
45979: LD_INT 29
45981: PUSH
45982: LD_INT 30
45984: PUSH
45985: LD_INT 31
45987: PUSH
45988: LD_INT 32
45990: PUSH
45991: LD_INT 33
45993: PUSH
45994: LD_INT 34
45996: PUSH
45997: LD_INT 36
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 101
46039: PUSH
46040: LD_INT 102
46042: PUSH
46043: LD_INT 103
46045: PUSH
46046: LD_INT 104
46048: PUSH
46049: LD_INT 105
46051: PUSH
46052: LD_INT 106
46054: PUSH
46055: LD_INT 107
46057: PUSH
46058: LD_INT 108
46060: PUSH
46061: LD_INT 109
46063: PUSH
46064: LD_INT 110
46066: PUSH
46067: LD_INT 111
46069: PUSH
46070: LD_INT 112
46072: PUSH
46073: LD_INT 113
46075: PUSH
46076: LD_INT 114
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: ST_TO_ADDR
46099: GO 46474
46101: LD_INT 18
46103: DOUBLE
46104: EQUAL
46105: IFTRUE 46109
46107: GO 46245
46109: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
46110: LD_ADDR_VAR 0 1
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: LD_INT 4
46120: PUSH
46121: LD_INT 5
46123: PUSH
46124: LD_INT 7
46126: PUSH
46127: LD_INT 11
46129: PUSH
46130: LD_INT 12
46132: PUSH
46133: LD_INT 15
46135: PUSH
46136: LD_INT 16
46138: PUSH
46139: LD_INT 20
46141: PUSH
46142: LD_INT 21
46144: PUSH
46145: LD_INT 22
46147: PUSH
46148: LD_INT 23
46150: PUSH
46151: LD_INT 25
46153: PUSH
46154: LD_INT 26
46156: PUSH
46157: LD_INT 30
46159: PUSH
46160: LD_INT 31
46162: PUSH
46163: LD_INT 32
46165: PUSH
46166: LD_INT 33
46168: PUSH
46169: LD_INT 34
46171: PUSH
46172: LD_INT 35
46174: PUSH
46175: LD_INT 36
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 101
46203: PUSH
46204: LD_INT 102
46206: PUSH
46207: LD_INT 103
46209: PUSH
46210: LD_INT 106
46212: PUSH
46213: LD_INT 108
46215: PUSH
46216: LD_INT 112
46218: PUSH
46219: LD_INT 113
46221: PUSH
46222: LD_INT 114
46224: PUSH
46225: LD_INT 115
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: ST_TO_ADDR
46243: GO 46474
46245: LD_INT 19
46247: DOUBLE
46248: EQUAL
46249: IFTRUE 46253
46251: GO 46473
46253: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
46254: LD_ADDR_VAR 0 1
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: LD_INT 2
46264: PUSH
46265: LD_INT 3
46267: PUSH
46268: LD_INT 4
46270: PUSH
46271: LD_INT 5
46273: PUSH
46274: LD_INT 6
46276: PUSH
46277: LD_INT 7
46279: PUSH
46280: LD_INT 8
46282: PUSH
46283: LD_INT 9
46285: PUSH
46286: LD_INT 10
46288: PUSH
46289: LD_INT 11
46291: PUSH
46292: LD_INT 12
46294: PUSH
46295: LD_INT 13
46297: PUSH
46298: LD_INT 14
46300: PUSH
46301: LD_INT 15
46303: PUSH
46304: LD_INT 16
46306: PUSH
46307: LD_INT 17
46309: PUSH
46310: LD_INT 18
46312: PUSH
46313: LD_INT 19
46315: PUSH
46316: LD_INT 20
46318: PUSH
46319: LD_INT 21
46321: PUSH
46322: LD_INT 22
46324: PUSH
46325: LD_INT 23
46327: PUSH
46328: LD_INT 24
46330: PUSH
46331: LD_INT 25
46333: PUSH
46334: LD_INT 26
46336: PUSH
46337: LD_INT 27
46339: PUSH
46340: LD_INT 28
46342: PUSH
46343: LD_INT 29
46345: PUSH
46346: LD_INT 30
46348: PUSH
46349: LD_INT 31
46351: PUSH
46352: LD_INT 32
46354: PUSH
46355: LD_INT 33
46357: PUSH
46358: LD_INT 34
46360: PUSH
46361: LD_INT 35
46363: PUSH
46364: LD_INT 36
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 101
46407: PUSH
46408: LD_INT 102
46410: PUSH
46411: LD_INT 103
46413: PUSH
46414: LD_INT 104
46416: PUSH
46417: LD_INT 105
46419: PUSH
46420: LD_INT 106
46422: PUSH
46423: LD_INT 107
46425: PUSH
46426: LD_INT 108
46428: PUSH
46429: LD_INT 109
46431: PUSH
46432: LD_INT 110
46434: PUSH
46435: LD_INT 111
46437: PUSH
46438: LD_INT 112
46440: PUSH
46441: LD_INT 113
46443: PUSH
46444: LD_INT 114
46446: PUSH
46447: LD_INT 115
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: ST_TO_ADDR
46471: GO 46474
46473: POP
// end else
46474: GO 46693
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
46476: LD_ADDR_VAR 0 1
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: LD_INT 3
46489: PUSH
46490: LD_INT 4
46492: PUSH
46493: LD_INT 5
46495: PUSH
46496: LD_INT 6
46498: PUSH
46499: LD_INT 7
46501: PUSH
46502: LD_INT 8
46504: PUSH
46505: LD_INT 9
46507: PUSH
46508: LD_INT 10
46510: PUSH
46511: LD_INT 11
46513: PUSH
46514: LD_INT 12
46516: PUSH
46517: LD_INT 13
46519: PUSH
46520: LD_INT 14
46522: PUSH
46523: LD_INT 15
46525: PUSH
46526: LD_INT 16
46528: PUSH
46529: LD_INT 17
46531: PUSH
46532: LD_INT 18
46534: PUSH
46535: LD_INT 19
46537: PUSH
46538: LD_INT 20
46540: PUSH
46541: LD_INT 21
46543: PUSH
46544: LD_INT 22
46546: PUSH
46547: LD_INT 23
46549: PUSH
46550: LD_INT 24
46552: PUSH
46553: LD_INT 25
46555: PUSH
46556: LD_INT 26
46558: PUSH
46559: LD_INT 27
46561: PUSH
46562: LD_INT 28
46564: PUSH
46565: LD_INT 29
46567: PUSH
46568: LD_INT 30
46570: PUSH
46571: LD_INT 31
46573: PUSH
46574: LD_INT 32
46576: PUSH
46577: LD_INT 33
46579: PUSH
46580: LD_INT 34
46582: PUSH
46583: LD_INT 35
46585: PUSH
46586: LD_INT 36
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 101
46629: PUSH
46630: LD_INT 102
46632: PUSH
46633: LD_INT 103
46635: PUSH
46636: LD_INT 104
46638: PUSH
46639: LD_INT 105
46641: PUSH
46642: LD_INT 106
46644: PUSH
46645: LD_INT 107
46647: PUSH
46648: LD_INT 108
46650: PUSH
46651: LD_INT 109
46653: PUSH
46654: LD_INT 110
46656: PUSH
46657: LD_INT 111
46659: PUSH
46660: LD_INT 112
46662: PUSH
46663: LD_INT 113
46665: PUSH
46666: LD_INT 114
46668: PUSH
46669: LD_INT 115
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: ST_TO_ADDR
// if result then
46693: LD_VAR 0 1
46697: IFFALSE 46986
// begin normal :=  ;
46699: LD_ADDR_VAR 0 3
46703: PUSH
46704: LD_STRING 
46706: ST_TO_ADDR
// hardcore :=  ;
46707: LD_ADDR_VAR 0 4
46711: PUSH
46712: LD_STRING 
46714: ST_TO_ADDR
// for i = 1 to normalCounter do
46715: LD_ADDR_VAR 0 5
46719: PUSH
46720: DOUBLE
46721: LD_INT 1
46723: DEC
46724: ST_TO_ADDR
46725: LD_EXP 34
46729: PUSH
46730: FOR_TO
46731: IFFALSE 46832
// begin tmp := 0 ;
46733: LD_ADDR_VAR 0 2
46737: PUSH
46738: LD_STRING 0
46740: ST_TO_ADDR
// if result [ 1 ] then
46741: LD_VAR 0 1
46745: PUSH
46746: LD_INT 1
46748: ARRAY
46749: IFFALSE 46814
// if result [ 1 ] [ 1 ] = i then
46751: LD_VAR 0 1
46755: PUSH
46756: LD_INT 1
46758: ARRAY
46759: PUSH
46760: LD_INT 1
46762: ARRAY
46763: PUSH
46764: LD_VAR 0 5
46768: EQUAL
46769: IFFALSE 46814
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
46771: LD_ADDR_VAR 0 1
46775: PUSH
46776: LD_VAR 0 1
46780: PPUSH
46781: LD_INT 1
46783: PPUSH
46784: LD_VAR 0 1
46788: PUSH
46789: LD_INT 1
46791: ARRAY
46792: PPUSH
46793: LD_INT 1
46795: PPUSH
46796: CALL_OW 3
46800: PPUSH
46801: CALL_OW 1
46805: ST_TO_ADDR
// tmp := 1 ;
46806: LD_ADDR_VAR 0 2
46810: PUSH
46811: LD_STRING 1
46813: ST_TO_ADDR
// end ; normal := normal & tmp ;
46814: LD_ADDR_VAR 0 3
46818: PUSH
46819: LD_VAR 0 3
46823: PUSH
46824: LD_VAR 0 2
46828: STR
46829: ST_TO_ADDR
// end ;
46830: GO 46730
46832: POP
46833: POP
// for i = 1 to hardcoreCounter do
46834: LD_ADDR_VAR 0 5
46838: PUSH
46839: DOUBLE
46840: LD_INT 1
46842: DEC
46843: ST_TO_ADDR
46844: LD_EXP 35
46848: PUSH
46849: FOR_TO
46850: IFFALSE 46955
// begin tmp := 0 ;
46852: LD_ADDR_VAR 0 2
46856: PUSH
46857: LD_STRING 0
46859: ST_TO_ADDR
// if result [ 2 ] then
46860: LD_VAR 0 1
46864: PUSH
46865: LD_INT 2
46867: ARRAY
46868: IFFALSE 46937
// if result [ 2 ] [ 1 ] = 100 + i then
46870: LD_VAR 0 1
46874: PUSH
46875: LD_INT 2
46877: ARRAY
46878: PUSH
46879: LD_INT 1
46881: ARRAY
46882: PUSH
46883: LD_INT 100
46885: PUSH
46886: LD_VAR 0 5
46890: PLUS
46891: EQUAL
46892: IFFALSE 46937
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
46894: LD_ADDR_VAR 0 1
46898: PUSH
46899: LD_VAR 0 1
46903: PPUSH
46904: LD_INT 2
46906: PPUSH
46907: LD_VAR 0 1
46911: PUSH
46912: LD_INT 2
46914: ARRAY
46915: PPUSH
46916: LD_INT 1
46918: PPUSH
46919: CALL_OW 3
46923: PPUSH
46924: CALL_OW 1
46928: ST_TO_ADDR
// tmp := 1 ;
46929: LD_ADDR_VAR 0 2
46933: PUSH
46934: LD_STRING 1
46936: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
46937: LD_ADDR_VAR 0 4
46941: PUSH
46942: LD_VAR 0 4
46946: PUSH
46947: LD_VAR 0 2
46951: STR
46952: ST_TO_ADDR
// end ;
46953: GO 46849
46955: POP
46956: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
46957: LD_STRING getStreamItemsFromMission("
46959: PUSH
46960: LD_VAR 0 3
46964: STR
46965: PUSH
46966: LD_STRING ","
46968: STR
46969: PUSH
46970: LD_VAR 0 4
46974: STR
46975: PUSH
46976: LD_STRING ")
46978: STR
46979: PPUSH
46980: CALL_OW 559
// end else
46984: GO 46993
// ToLua ( getStreamItemsFromMission("","") ) ;
46986: LD_STRING getStreamItemsFromMission("","")
46988: PPUSH
46989: CALL_OW 559
// end ;
46993: LD_VAR 0 1
46997: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
46998: LD_EXP 33
47002: PUSH
47003: LD_EXP 38
47007: AND
47008: IFFALSE 47132
47010: GO 47012
47012: DISABLE
47013: LD_INT 0
47015: PPUSH
47016: PPUSH
// begin enable ;
47017: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
47018: LD_ADDR_VAR 0 2
47022: PUSH
47023: LD_INT 22
47025: PUSH
47026: LD_OWVAR 2
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 2
47037: PUSH
47038: LD_INT 34
47040: PUSH
47041: LD_INT 7
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 34
47050: PUSH
47051: LD_INT 45
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 34
47060: PUSH
47061: LD_INT 28
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 34
47070: PUSH
47071: LD_INT 47
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PPUSH
47089: CALL_OW 69
47093: ST_TO_ADDR
// if not tmp then
47094: LD_VAR 0 2
47098: NOT
47099: IFFALSE 47103
// exit ;
47101: GO 47132
// for i in tmp do
47103: LD_ADDR_VAR 0 1
47107: PUSH
47108: LD_VAR 0 2
47112: PUSH
47113: FOR_IN
47114: IFFALSE 47130
// begin SetLives ( i , 0 ) ;
47116: LD_VAR 0 1
47120: PPUSH
47121: LD_INT 0
47123: PPUSH
47124: CALL_OW 234
// end ;
47128: GO 47113
47130: POP
47131: POP
// end ;
47132: PPOPN 2
47134: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
47135: LD_EXP 33
47139: PUSH
47140: LD_EXP 39
47144: AND
47145: IFFALSE 47229
47147: GO 47149
47149: DISABLE
47150: LD_INT 0
47152: PPUSH
47153: PPUSH
// begin enable ;
47154: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
47155: LD_ADDR_VAR 0 2
47159: PUSH
47160: LD_INT 22
47162: PUSH
47163: LD_OWVAR 2
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 32
47174: PUSH
47175: LD_INT 3
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PPUSH
47186: CALL_OW 69
47190: ST_TO_ADDR
// if not tmp then
47191: LD_VAR 0 2
47195: NOT
47196: IFFALSE 47200
// exit ;
47198: GO 47229
// for i in tmp do
47200: LD_ADDR_VAR 0 1
47204: PUSH
47205: LD_VAR 0 2
47209: PUSH
47210: FOR_IN
47211: IFFALSE 47227
// begin SetLives ( i , 0 ) ;
47213: LD_VAR 0 1
47217: PPUSH
47218: LD_INT 0
47220: PPUSH
47221: CALL_OW 234
// end ;
47225: GO 47210
47227: POP
47228: POP
// end ;
47229: PPOPN 2
47231: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
47232: LD_EXP 33
47236: PUSH
47237: LD_EXP 36
47241: AND
47242: IFFALSE 47335
47244: GO 47246
47246: DISABLE
47247: LD_INT 0
47249: PPUSH
// begin enable ;
47250: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
47251: LD_ADDR_VAR 0 1
47255: PUSH
47256: LD_INT 22
47258: PUSH
47259: LD_OWVAR 2
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: LD_INT 25
47273: PUSH
47274: LD_INT 5
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 25
47283: PUSH
47284: LD_INT 9
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 25
47293: PUSH
47294: LD_INT 8
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PPUSH
47311: CALL_OW 69
47315: PUSH
47316: FOR_IN
47317: IFFALSE 47333
// begin SetClass ( i , 1 ) ;
47319: LD_VAR 0 1
47323: PPUSH
47324: LD_INT 1
47326: PPUSH
47327: CALL_OW 336
// end ;
47331: GO 47316
47333: POP
47334: POP
// end ;
47335: PPOPN 1
47337: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
47338: LD_EXP 33
47342: PUSH
47343: LD_EXP 37
47347: AND
47348: PUSH
47349: LD_OWVAR 65
47353: PUSH
47354: LD_INT 7
47356: LESS
47357: AND
47358: IFFALSE 47372
47360: GO 47362
47362: DISABLE
// begin enable ;
47363: ENABLE
// game_speed := 7 ;
47364: LD_ADDR_OWVAR 65
47368: PUSH
47369: LD_INT 7
47371: ST_TO_ADDR
// end ;
47372: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
47373: LD_EXP 33
47377: PUSH
47378: LD_EXP 40
47382: AND
47383: IFFALSE 47585
47385: GO 47387
47387: DISABLE
47388: LD_INT 0
47390: PPUSH
47391: PPUSH
47392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
47393: LD_ADDR_VAR 0 3
47397: PUSH
47398: LD_INT 81
47400: PUSH
47401: LD_OWVAR 2
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 21
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PPUSH
47424: CALL_OW 69
47428: ST_TO_ADDR
// if not tmp then
47429: LD_VAR 0 3
47433: NOT
47434: IFFALSE 47438
// exit ;
47436: GO 47585
// if tmp > 5 then
47438: LD_VAR 0 3
47442: PUSH
47443: LD_INT 5
47445: GREATER
47446: IFFALSE 47458
// k := 5 else
47448: LD_ADDR_VAR 0 2
47452: PUSH
47453: LD_INT 5
47455: ST_TO_ADDR
47456: GO 47468
// k := tmp ;
47458: LD_ADDR_VAR 0 2
47462: PUSH
47463: LD_VAR 0 3
47467: ST_TO_ADDR
// for i := 1 to k do
47468: LD_ADDR_VAR 0 1
47472: PUSH
47473: DOUBLE
47474: LD_INT 1
47476: DEC
47477: ST_TO_ADDR
47478: LD_VAR 0 2
47482: PUSH
47483: FOR_TO
47484: IFFALSE 47583
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
47486: LD_VAR 0 3
47490: PUSH
47491: LD_VAR 0 1
47495: ARRAY
47496: PPUSH
47497: LD_VAR 0 1
47501: PUSH
47502: LD_INT 4
47504: MOD
47505: PUSH
47506: LD_INT 1
47508: PLUS
47509: PPUSH
47510: CALL_OW 259
47514: PUSH
47515: LD_INT 10
47517: LESS
47518: IFFALSE 47581
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
47520: LD_VAR 0 3
47524: PUSH
47525: LD_VAR 0 1
47529: ARRAY
47530: PPUSH
47531: LD_VAR 0 1
47535: PUSH
47536: LD_INT 4
47538: MOD
47539: PUSH
47540: LD_INT 1
47542: PLUS
47543: PPUSH
47544: LD_VAR 0 3
47548: PUSH
47549: LD_VAR 0 1
47553: ARRAY
47554: PPUSH
47555: LD_VAR 0 1
47559: PUSH
47560: LD_INT 4
47562: MOD
47563: PUSH
47564: LD_INT 1
47566: PLUS
47567: PPUSH
47568: CALL_OW 259
47572: PUSH
47573: LD_INT 1
47575: PLUS
47576: PPUSH
47577: CALL_OW 237
47581: GO 47483
47583: POP
47584: POP
// end ;
47585: PPOPN 3
47587: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
47588: LD_EXP 33
47592: PUSH
47593: LD_EXP 41
47597: AND
47598: IFFALSE 47618
47600: GO 47602
47602: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
47603: LD_INT 4
47605: PPUSH
47606: LD_OWVAR 2
47610: PPUSH
47611: LD_INT 0
47613: PPUSH
47614: CALL_OW 324
47618: END
// every 0 0$1 trigger StreamModeActive and sShovel do
47619: LD_EXP 33
47623: PUSH
47624: LD_EXP 70
47628: AND
47629: IFFALSE 47649
47631: GO 47633
47633: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
47634: LD_INT 19
47636: PPUSH
47637: LD_OWVAR 2
47641: PPUSH
47642: LD_INT 0
47644: PPUSH
47645: CALL_OW 324
47649: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
47650: LD_EXP 33
47654: PUSH
47655: LD_EXP 42
47659: AND
47660: IFFALSE 47762
47662: GO 47664
47664: DISABLE
47665: LD_INT 0
47667: PPUSH
47668: PPUSH
// begin enable ;
47669: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
47670: LD_ADDR_VAR 0 2
47674: PUSH
47675: LD_INT 22
47677: PUSH
47678: LD_OWVAR 2
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: PUSH
47690: LD_INT 34
47692: PUSH
47693: LD_INT 11
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 34
47702: PUSH
47703: LD_INT 30
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: LIST
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PPUSH
47719: CALL_OW 69
47723: ST_TO_ADDR
// if not tmp then
47724: LD_VAR 0 2
47728: NOT
47729: IFFALSE 47733
// exit ;
47731: GO 47762
// for i in tmp do
47733: LD_ADDR_VAR 0 1
47737: PUSH
47738: LD_VAR 0 2
47742: PUSH
47743: FOR_IN
47744: IFFALSE 47760
// begin SetLives ( i , 0 ) ;
47746: LD_VAR 0 1
47750: PPUSH
47751: LD_INT 0
47753: PPUSH
47754: CALL_OW 234
// end ;
47758: GO 47743
47760: POP
47761: POP
// end ;
47762: PPOPN 2
47764: END
// every 0 0$1 trigger StreamModeActive and sBunker do
47765: LD_EXP 33
47769: PUSH
47770: LD_EXP 43
47774: AND
47775: IFFALSE 47795
47777: GO 47779
47779: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
47780: LD_INT 32
47782: PPUSH
47783: LD_OWVAR 2
47787: PPUSH
47788: LD_INT 0
47790: PPUSH
47791: CALL_OW 324
47795: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
47796: LD_EXP 33
47800: PUSH
47801: LD_EXP 44
47805: AND
47806: IFFALSE 47987
47808: GO 47810
47810: DISABLE
47811: LD_INT 0
47813: PPUSH
47814: PPUSH
47815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
47816: LD_ADDR_VAR 0 2
47820: PUSH
47821: LD_INT 22
47823: PUSH
47824: LD_OWVAR 2
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 33
47835: PUSH
47836: LD_INT 3
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PPUSH
47847: CALL_OW 69
47851: ST_TO_ADDR
// if not tmp then
47852: LD_VAR 0 2
47856: NOT
47857: IFFALSE 47861
// exit ;
47859: GO 47987
// side := 0 ;
47861: LD_ADDR_VAR 0 3
47865: PUSH
47866: LD_INT 0
47868: ST_TO_ADDR
// for i := 1 to 8 do
47869: LD_ADDR_VAR 0 1
47873: PUSH
47874: DOUBLE
47875: LD_INT 1
47877: DEC
47878: ST_TO_ADDR
47879: LD_INT 8
47881: PUSH
47882: FOR_TO
47883: IFFALSE 47931
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
47885: LD_OWVAR 2
47889: PUSH
47890: LD_VAR 0 1
47894: NONEQUAL
47895: PUSH
47896: LD_OWVAR 2
47900: PPUSH
47901: LD_VAR 0 1
47905: PPUSH
47906: CALL_OW 81
47910: PUSH
47911: LD_INT 2
47913: EQUAL
47914: AND
47915: IFFALSE 47929
// begin side := i ;
47917: LD_ADDR_VAR 0 3
47921: PUSH
47922: LD_VAR 0 1
47926: ST_TO_ADDR
// break ;
47927: GO 47931
// end ;
47929: GO 47882
47931: POP
47932: POP
// if not side then
47933: LD_VAR 0 3
47937: NOT
47938: IFFALSE 47942
// exit ;
47940: GO 47987
// for i := 1 to tmp do
47942: LD_ADDR_VAR 0 1
47946: PUSH
47947: DOUBLE
47948: LD_INT 1
47950: DEC
47951: ST_TO_ADDR
47952: LD_VAR 0 2
47956: PUSH
47957: FOR_TO
47958: IFFALSE 47985
// if Prob ( 60 ) then
47960: LD_INT 60
47962: PPUSH
47963: CALL_OW 13
47967: IFFALSE 47983
// SetSide ( i , side ) ;
47969: LD_VAR 0 1
47973: PPUSH
47974: LD_VAR 0 3
47978: PPUSH
47979: CALL_OW 235
47983: GO 47957
47985: POP
47986: POP
// end ;
47987: PPOPN 3
47989: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
47990: LD_EXP 33
47994: PUSH
47995: LD_EXP 46
47999: AND
48000: IFFALSE 48119
48002: GO 48004
48004: DISABLE
48005: LD_INT 0
48007: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
48008: LD_ADDR_VAR 0 1
48012: PUSH
48013: LD_INT 22
48015: PUSH
48016: LD_OWVAR 2
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 21
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 3
48037: PUSH
48038: LD_INT 23
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: LIST
48056: PPUSH
48057: CALL_OW 69
48061: PUSH
48062: FOR_IN
48063: IFFALSE 48117
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
48065: LD_VAR 0 1
48069: PPUSH
48070: CALL_OW 257
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: LD_INT 2
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: LD_INT 4
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: IN
48093: IFFALSE 48115
// SetClass ( un , rand ( 1 , 4 ) ) ;
48095: LD_VAR 0 1
48099: PPUSH
48100: LD_INT 1
48102: PPUSH
48103: LD_INT 4
48105: PPUSH
48106: CALL_OW 12
48110: PPUSH
48111: CALL_OW 336
48115: GO 48062
48117: POP
48118: POP
// end ;
48119: PPOPN 1
48121: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
48122: LD_EXP 33
48126: PUSH
48127: LD_EXP 45
48131: AND
48132: IFFALSE 48211
48134: GO 48136
48136: DISABLE
48137: LD_INT 0
48139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
48140: LD_ADDR_VAR 0 1
48144: PUSH
48145: LD_INT 22
48147: PUSH
48148: LD_OWVAR 2
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 21
48159: PUSH
48160: LD_INT 3
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PPUSH
48171: CALL_OW 69
48175: ST_TO_ADDR
// if not tmp then
48176: LD_VAR 0 1
48180: NOT
48181: IFFALSE 48185
// exit ;
48183: GO 48211
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
48185: LD_VAR 0 1
48189: PUSH
48190: LD_INT 1
48192: PPUSH
48193: LD_VAR 0 1
48197: PPUSH
48198: CALL_OW 12
48202: ARRAY
48203: PPUSH
48204: LD_INT 100
48206: PPUSH
48207: CALL_OW 234
// end ;
48211: PPOPN 1
48213: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
48214: LD_EXP 33
48218: PUSH
48219: LD_EXP 47
48223: AND
48224: IFFALSE 48322
48226: GO 48228
48228: DISABLE
48229: LD_INT 0
48231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
48232: LD_ADDR_VAR 0 1
48236: PUSH
48237: LD_INT 22
48239: PUSH
48240: LD_OWVAR 2
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 21
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PPUSH
48263: CALL_OW 69
48267: ST_TO_ADDR
// if not tmp then
48268: LD_VAR 0 1
48272: NOT
48273: IFFALSE 48277
// exit ;
48275: GO 48322
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
48277: LD_VAR 0 1
48281: PUSH
48282: LD_INT 1
48284: PPUSH
48285: LD_VAR 0 1
48289: PPUSH
48290: CALL_OW 12
48294: ARRAY
48295: PPUSH
48296: LD_INT 1
48298: PPUSH
48299: LD_INT 4
48301: PPUSH
48302: CALL_OW 12
48306: PPUSH
48307: LD_INT 3000
48309: PPUSH
48310: LD_INT 9000
48312: PPUSH
48313: CALL_OW 12
48317: PPUSH
48318: CALL_OW 492
// end ;
48322: PPOPN 1
48324: END
// every 0 0$1 trigger StreamModeActive and sDepot do
48325: LD_EXP 33
48329: PUSH
48330: LD_EXP 48
48334: AND
48335: IFFALSE 48355
48337: GO 48339
48339: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
48340: LD_INT 1
48342: PPUSH
48343: LD_OWVAR 2
48347: PPUSH
48348: LD_INT 0
48350: PPUSH
48351: CALL_OW 324
48355: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
48356: LD_EXP 33
48360: PUSH
48361: LD_EXP 49
48365: AND
48366: IFFALSE 48449
48368: GO 48370
48370: DISABLE
48371: LD_INT 0
48373: PPUSH
48374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
48375: LD_ADDR_VAR 0 2
48379: PUSH
48380: LD_INT 22
48382: PUSH
48383: LD_OWVAR 2
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 21
48394: PUSH
48395: LD_INT 3
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PPUSH
48406: CALL_OW 69
48410: ST_TO_ADDR
// if not tmp then
48411: LD_VAR 0 2
48415: NOT
48416: IFFALSE 48420
// exit ;
48418: GO 48449
// for i in tmp do
48420: LD_ADDR_VAR 0 1
48424: PUSH
48425: LD_VAR 0 2
48429: PUSH
48430: FOR_IN
48431: IFFALSE 48447
// SetBLevel ( i , 10 ) ;
48433: LD_VAR 0 1
48437: PPUSH
48438: LD_INT 10
48440: PPUSH
48441: CALL_OW 241
48445: GO 48430
48447: POP
48448: POP
// end ;
48449: PPOPN 2
48451: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
48452: LD_EXP 33
48456: PUSH
48457: LD_EXP 50
48461: AND
48462: IFFALSE 48573
48464: GO 48466
48466: DISABLE
48467: LD_INT 0
48469: PPUSH
48470: PPUSH
48471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
48472: LD_ADDR_VAR 0 3
48476: PUSH
48477: LD_INT 22
48479: PUSH
48480: LD_OWVAR 2
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 25
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PPUSH
48503: CALL_OW 69
48507: ST_TO_ADDR
// if not tmp then
48508: LD_VAR 0 3
48512: NOT
48513: IFFALSE 48517
// exit ;
48515: GO 48573
// un := tmp [ rand ( 1 , tmp ) ] ;
48517: LD_ADDR_VAR 0 2
48521: PUSH
48522: LD_VAR 0 3
48526: PUSH
48527: LD_INT 1
48529: PPUSH
48530: LD_VAR 0 3
48534: PPUSH
48535: CALL_OW 12
48539: ARRAY
48540: ST_TO_ADDR
// if Crawls ( un ) then
48541: LD_VAR 0 2
48545: PPUSH
48546: CALL_OW 318
48550: IFFALSE 48561
// ComWalk ( un ) ;
48552: LD_VAR 0 2
48556: PPUSH
48557: CALL_OW 138
// SetClass ( un , class_sniper ) ;
48561: LD_VAR 0 2
48565: PPUSH
48566: LD_INT 5
48568: PPUSH
48569: CALL_OW 336
// end ;
48573: PPOPN 3
48575: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
48576: LD_EXP 33
48580: PUSH
48581: LD_EXP 51
48585: AND
48586: PUSH
48587: LD_OWVAR 67
48591: PUSH
48592: LD_INT 3
48594: LESS
48595: AND
48596: IFFALSE 48615
48598: GO 48600
48600: DISABLE
// Difficulty := Difficulty + 1 ;
48601: LD_ADDR_OWVAR 67
48605: PUSH
48606: LD_OWVAR 67
48610: PUSH
48611: LD_INT 1
48613: PLUS
48614: ST_TO_ADDR
48615: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
48616: LD_EXP 33
48620: PUSH
48621: LD_EXP 52
48625: AND
48626: IFFALSE 48729
48628: GO 48630
48630: DISABLE
48631: LD_INT 0
48633: PPUSH
// begin for i := 1 to 5 do
48634: LD_ADDR_VAR 0 1
48638: PUSH
48639: DOUBLE
48640: LD_INT 1
48642: DEC
48643: ST_TO_ADDR
48644: LD_INT 5
48646: PUSH
48647: FOR_TO
48648: IFFALSE 48727
// begin uc_nation := nation_nature ;
48650: LD_ADDR_OWVAR 21
48654: PUSH
48655: LD_INT 0
48657: ST_TO_ADDR
// uc_side := 0 ;
48658: LD_ADDR_OWVAR 20
48662: PUSH
48663: LD_INT 0
48665: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
48666: LD_ADDR_OWVAR 29
48670: PUSH
48671: LD_INT 12
48673: PUSH
48674: LD_INT 12
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: ST_TO_ADDR
// hc_agressivity := 20 ;
48681: LD_ADDR_OWVAR 35
48685: PUSH
48686: LD_INT 20
48688: ST_TO_ADDR
// hc_class := class_tiger ;
48689: LD_ADDR_OWVAR 28
48693: PUSH
48694: LD_INT 14
48696: ST_TO_ADDR
// hc_gallery :=  ;
48697: LD_ADDR_OWVAR 33
48701: PUSH
48702: LD_STRING 
48704: ST_TO_ADDR
// hc_name :=  ;
48705: LD_ADDR_OWVAR 26
48709: PUSH
48710: LD_STRING 
48712: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
48713: CALL_OW 44
48717: PPUSH
48718: LD_INT 0
48720: PPUSH
48721: CALL_OW 51
// end ;
48725: GO 48647
48727: POP
48728: POP
// end ;
48729: PPOPN 1
48731: END
// every 0 0$1 trigger StreamModeActive and sBomb do
48732: LD_EXP 33
48736: PUSH
48737: LD_EXP 53
48741: AND
48742: IFFALSE 48751
48744: GO 48746
48746: DISABLE
// StreamSibBomb ;
48747: CALL 48752 0 0
48751: END
// export function StreamSibBomb ; var i , x , y ; begin
48752: LD_INT 0
48754: PPUSH
48755: PPUSH
48756: PPUSH
48757: PPUSH
// result := false ;
48758: LD_ADDR_VAR 0 1
48762: PUSH
48763: LD_INT 0
48765: ST_TO_ADDR
// for i := 1 to 16 do
48766: LD_ADDR_VAR 0 2
48770: PUSH
48771: DOUBLE
48772: LD_INT 1
48774: DEC
48775: ST_TO_ADDR
48776: LD_INT 16
48778: PUSH
48779: FOR_TO
48780: IFFALSE 48979
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
48782: LD_ADDR_VAR 0 3
48786: PUSH
48787: LD_INT 10
48789: PUSH
48790: LD_INT 20
48792: PUSH
48793: LD_INT 30
48795: PUSH
48796: LD_INT 40
48798: PUSH
48799: LD_INT 50
48801: PUSH
48802: LD_INT 60
48804: PUSH
48805: LD_INT 70
48807: PUSH
48808: LD_INT 80
48810: PUSH
48811: LD_INT 90
48813: PUSH
48814: LD_INT 100
48816: PUSH
48817: LD_INT 110
48819: PUSH
48820: LD_INT 120
48822: PUSH
48823: LD_INT 130
48825: PUSH
48826: LD_INT 140
48828: PUSH
48829: LD_INT 150
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: PPUSH
48852: LD_INT 15
48854: PPUSH
48855: CALL_OW 12
48859: ARRAY
48860: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
48861: LD_ADDR_VAR 0 4
48865: PUSH
48866: LD_INT 10
48868: PUSH
48869: LD_INT 20
48871: PUSH
48872: LD_INT 30
48874: PUSH
48875: LD_INT 40
48877: PUSH
48878: LD_INT 50
48880: PUSH
48881: LD_INT 60
48883: PUSH
48884: LD_INT 70
48886: PUSH
48887: LD_INT 80
48889: PUSH
48890: LD_INT 90
48892: PUSH
48893: LD_INT 100
48895: PUSH
48896: LD_INT 110
48898: PUSH
48899: LD_INT 120
48901: PUSH
48902: LD_INT 130
48904: PUSH
48905: LD_INT 140
48907: PUSH
48908: LD_INT 150
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: PPUSH
48931: LD_INT 15
48933: PPUSH
48934: CALL_OW 12
48938: ARRAY
48939: ST_TO_ADDR
// if ValidHex ( x , y ) then
48940: LD_VAR 0 3
48944: PPUSH
48945: LD_VAR 0 4
48949: PPUSH
48950: CALL_OW 488
48954: IFFALSE 48977
// begin result := [ x , y ] ;
48956: LD_ADDR_VAR 0 1
48960: PUSH
48961: LD_VAR 0 3
48965: PUSH
48966: LD_VAR 0 4
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: ST_TO_ADDR
// break ;
48975: GO 48979
// end ; end ;
48977: GO 48779
48979: POP
48980: POP
// if result then
48981: LD_VAR 0 1
48985: IFFALSE 49045
// begin ToLua ( playSibBomb() ) ;
48987: LD_STRING playSibBomb()
48989: PPUSH
48990: CALL_OW 559
// wait ( 0 0$14 ) ;
48994: LD_INT 490
48996: PPUSH
48997: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
49001: LD_VAR 0 1
49005: PUSH
49006: LD_INT 1
49008: ARRAY
49009: PPUSH
49010: LD_VAR 0 1
49014: PUSH
49015: LD_INT 2
49017: ARRAY
49018: PPUSH
49019: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
49023: LD_VAR 0 1
49027: PUSH
49028: LD_INT 1
49030: ARRAY
49031: PPUSH
49032: LD_VAR 0 1
49036: PUSH
49037: LD_INT 2
49039: ARRAY
49040: PPUSH
49041: CALL_OW 429
// end ; end ;
49045: LD_VAR 0 1
49049: RET
// every 0 0$1 trigger StreamModeActive and sReset do
49050: LD_EXP 33
49054: PUSH
49055: LD_EXP 55
49059: AND
49060: IFFALSE 49072
49062: GO 49064
49064: DISABLE
// YouLost (  ) ;
49065: LD_STRING 
49067: PPUSH
49068: CALL_OW 104
49072: END
// every 0 0$1 trigger StreamModeActive and sFog do
49073: LD_EXP 33
49077: PUSH
49078: LD_EXP 54
49082: AND
49083: IFFALSE 49097
49085: GO 49087
49087: DISABLE
// FogOff ( your_side ) ;
49088: LD_OWVAR 2
49092: PPUSH
49093: CALL_OW 344
49097: END
// every 0 0$1 trigger StreamModeActive and sSun do
49098: LD_EXP 33
49102: PUSH
49103: LD_EXP 56
49107: AND
49108: IFFALSE 49136
49110: GO 49112
49112: DISABLE
// begin solar_recharge_percent := 0 ;
49113: LD_ADDR_OWVAR 79
49117: PUSH
49118: LD_INT 0
49120: ST_TO_ADDR
// wait ( 5 5$00 ) ;
49121: LD_INT 10500
49123: PPUSH
49124: CALL_OW 67
// solar_recharge_percent := 100 ;
49128: LD_ADDR_OWVAR 79
49132: PUSH
49133: LD_INT 100
49135: ST_TO_ADDR
// end ;
49136: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
49137: LD_EXP 33
49141: PUSH
49142: LD_EXP 57
49146: AND
49147: IFFALSE 49386
49149: GO 49151
49151: DISABLE
49152: LD_INT 0
49154: PPUSH
49155: PPUSH
49156: PPUSH
// begin tmp := [ ] ;
49157: LD_ADDR_VAR 0 3
49161: PUSH
49162: EMPTY
49163: ST_TO_ADDR
// for i := 1 to 6 do
49164: LD_ADDR_VAR 0 1
49168: PUSH
49169: DOUBLE
49170: LD_INT 1
49172: DEC
49173: ST_TO_ADDR
49174: LD_INT 6
49176: PUSH
49177: FOR_TO
49178: IFFALSE 49283
// begin uc_nation := nation_nature ;
49180: LD_ADDR_OWVAR 21
49184: PUSH
49185: LD_INT 0
49187: ST_TO_ADDR
// uc_side := 0 ;
49188: LD_ADDR_OWVAR 20
49192: PUSH
49193: LD_INT 0
49195: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49196: LD_ADDR_OWVAR 29
49200: PUSH
49201: LD_INT 12
49203: PUSH
49204: LD_INT 12
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: ST_TO_ADDR
// hc_agressivity := 20 ;
49211: LD_ADDR_OWVAR 35
49215: PUSH
49216: LD_INT 20
49218: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
49219: LD_ADDR_OWVAR 28
49223: PUSH
49224: LD_INT 17
49226: ST_TO_ADDR
// hc_gallery :=  ;
49227: LD_ADDR_OWVAR 33
49231: PUSH
49232: LD_STRING 
49234: ST_TO_ADDR
// hc_name :=  ;
49235: LD_ADDR_OWVAR 26
49239: PUSH
49240: LD_STRING 
49242: ST_TO_ADDR
// un := CreateHuman ;
49243: LD_ADDR_VAR 0 2
49247: PUSH
49248: CALL_OW 44
49252: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
49253: LD_VAR 0 2
49257: PPUSH
49258: LD_INT 1
49260: PPUSH
49261: CALL_OW 51
// tmp := tmp ^ un ;
49265: LD_ADDR_VAR 0 3
49269: PUSH
49270: LD_VAR 0 3
49274: PUSH
49275: LD_VAR 0 2
49279: ADD
49280: ST_TO_ADDR
// end ;
49281: GO 49177
49283: POP
49284: POP
// repeat wait ( 0 0$1 ) ;
49285: LD_INT 35
49287: PPUSH
49288: CALL_OW 67
// for un in tmp do
49292: LD_ADDR_VAR 0 2
49296: PUSH
49297: LD_VAR 0 3
49301: PUSH
49302: FOR_IN
49303: IFFALSE 49377
// begin if IsDead ( un ) then
49305: LD_VAR 0 2
49309: PPUSH
49310: CALL_OW 301
49314: IFFALSE 49334
// begin tmp := tmp diff un ;
49316: LD_ADDR_VAR 0 3
49320: PUSH
49321: LD_VAR 0 3
49325: PUSH
49326: LD_VAR 0 2
49330: DIFF
49331: ST_TO_ADDR
// continue ;
49332: GO 49302
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
49334: LD_VAR 0 2
49338: PPUSH
49339: LD_INT 3
49341: PUSH
49342: LD_INT 22
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PPUSH
49356: CALL_OW 69
49360: PPUSH
49361: LD_VAR 0 2
49365: PPUSH
49366: CALL_OW 74
49370: PPUSH
49371: CALL_OW 115
// end ;
49375: GO 49302
49377: POP
49378: POP
// until not tmp ;
49379: LD_VAR 0 3
49383: NOT
49384: IFFALSE 49285
// end ;
49386: PPOPN 3
49388: END
// every 0 0$1 trigger StreamModeActive and sTroll do
49389: LD_EXP 33
49393: PUSH
49394: LD_EXP 58
49398: AND
49399: IFFALSE 49453
49401: GO 49403
49403: DISABLE
// begin ToLua ( displayTroll(); ) ;
49404: LD_STRING displayTroll();
49406: PPUSH
49407: CALL_OW 559
// wait ( 3 3$00 ) ;
49411: LD_INT 6300
49413: PPUSH
49414: CALL_OW 67
// ToLua ( hideTroll(); ) ;
49418: LD_STRING hideTroll();
49420: PPUSH
49421: CALL_OW 559
// wait ( 1 1$00 ) ;
49425: LD_INT 2100
49427: PPUSH
49428: CALL_OW 67
// ToLua ( displayTroll(); ) ;
49432: LD_STRING displayTroll();
49434: PPUSH
49435: CALL_OW 559
// wait ( 1 1$00 ) ;
49439: LD_INT 2100
49441: PPUSH
49442: CALL_OW 67
// ToLua ( hideTroll(); ) ;
49446: LD_STRING hideTroll();
49448: PPUSH
49449: CALL_OW 559
// end ;
49453: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
49454: LD_EXP 33
49458: PUSH
49459: LD_EXP 59
49463: AND
49464: IFFALSE 49527
49466: GO 49468
49468: DISABLE
49469: LD_INT 0
49471: PPUSH
// begin p := 0 ;
49472: LD_ADDR_VAR 0 1
49476: PUSH
49477: LD_INT 0
49479: ST_TO_ADDR
// repeat game_speed := 1 ;
49480: LD_ADDR_OWVAR 65
49484: PUSH
49485: LD_INT 1
49487: ST_TO_ADDR
// wait ( 0 0$1 ) ;
49488: LD_INT 35
49490: PPUSH
49491: CALL_OW 67
// p := p + 1 ;
49495: LD_ADDR_VAR 0 1
49499: PUSH
49500: LD_VAR 0 1
49504: PUSH
49505: LD_INT 1
49507: PLUS
49508: ST_TO_ADDR
// until p >= 60 ;
49509: LD_VAR 0 1
49513: PUSH
49514: LD_INT 60
49516: GREATEREQUAL
49517: IFFALSE 49480
// game_speed := 4 ;
49519: LD_ADDR_OWVAR 65
49523: PUSH
49524: LD_INT 4
49526: ST_TO_ADDR
// end ;
49527: PPOPN 1
49529: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
49530: LD_EXP 33
49534: PUSH
49535: LD_EXP 60
49539: AND
49540: IFFALSE 49686
49542: GO 49544
49544: DISABLE
49545: LD_INT 0
49547: PPUSH
49548: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49549: LD_ADDR_VAR 0 1
49553: PUSH
49554: LD_INT 22
49556: PUSH
49557: LD_OWVAR 2
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: LD_INT 30
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 30
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: LIST
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PPUSH
49598: CALL_OW 69
49602: ST_TO_ADDR
// if not depot then
49603: LD_VAR 0 1
49607: NOT
49608: IFFALSE 49612
// exit ;
49610: GO 49686
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
49612: LD_ADDR_VAR 0 2
49616: PUSH
49617: LD_VAR 0 1
49621: PUSH
49622: LD_INT 1
49624: PPUSH
49625: LD_VAR 0 1
49629: PPUSH
49630: CALL_OW 12
49634: ARRAY
49635: PPUSH
49636: CALL_OW 274
49640: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
49641: LD_VAR 0 2
49645: PPUSH
49646: LD_INT 1
49648: PPUSH
49649: LD_INT 0
49651: PPUSH
49652: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
49656: LD_VAR 0 2
49660: PPUSH
49661: LD_INT 2
49663: PPUSH
49664: LD_INT 0
49666: PPUSH
49667: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
49671: LD_VAR 0 2
49675: PPUSH
49676: LD_INT 3
49678: PPUSH
49679: LD_INT 0
49681: PPUSH
49682: CALL_OW 277
// end ;
49686: PPOPN 2
49688: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
49689: LD_EXP 33
49693: PUSH
49694: LD_EXP 61
49698: AND
49699: IFFALSE 49796
49701: GO 49703
49703: DISABLE
49704: LD_INT 0
49706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
49707: LD_ADDR_VAR 0 1
49711: PUSH
49712: LD_INT 22
49714: PUSH
49715: LD_OWVAR 2
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 21
49726: PUSH
49727: LD_INT 1
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 3
49736: PUSH
49737: LD_INT 23
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: LIST
49755: PPUSH
49756: CALL_OW 69
49760: ST_TO_ADDR
// if not tmp then
49761: LD_VAR 0 1
49765: NOT
49766: IFFALSE 49770
// exit ;
49768: GO 49796
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
49770: LD_VAR 0 1
49774: PUSH
49775: LD_INT 1
49777: PPUSH
49778: LD_VAR 0 1
49782: PPUSH
49783: CALL_OW 12
49787: ARRAY
49788: PPUSH
49789: LD_INT 200
49791: PPUSH
49792: CALL_OW 234
// end ;
49796: PPOPN 1
49798: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
49799: LD_EXP 33
49803: PUSH
49804: LD_EXP 62
49808: AND
49809: IFFALSE 49888
49811: GO 49813
49813: DISABLE
49814: LD_INT 0
49816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
49817: LD_ADDR_VAR 0 1
49821: PUSH
49822: LD_INT 22
49824: PUSH
49825: LD_OWVAR 2
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 21
49836: PUSH
49837: LD_INT 2
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PPUSH
49848: CALL_OW 69
49852: ST_TO_ADDR
// if not tmp then
49853: LD_VAR 0 1
49857: NOT
49858: IFFALSE 49862
// exit ;
49860: GO 49888
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
49862: LD_VAR 0 1
49866: PUSH
49867: LD_INT 1
49869: PPUSH
49870: LD_VAR 0 1
49874: PPUSH
49875: CALL_OW 12
49879: ARRAY
49880: PPUSH
49881: LD_INT 60
49883: PPUSH
49884: CALL_OW 234
// end ;
49888: PPOPN 1
49890: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
49891: LD_EXP 33
49895: PUSH
49896: LD_EXP 63
49900: AND
49901: IFFALSE 50000
49903: GO 49905
49905: DISABLE
49906: LD_INT 0
49908: PPUSH
49909: PPUSH
// begin enable ;
49910: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
49911: LD_ADDR_VAR 0 1
49915: PUSH
49916: LD_INT 22
49918: PUSH
49919: LD_OWVAR 2
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 61
49930: PUSH
49931: EMPTY
49932: LIST
49933: PUSH
49934: LD_INT 33
49936: PUSH
49937: LD_INT 2
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: LIST
49948: PPUSH
49949: CALL_OW 69
49953: ST_TO_ADDR
// if not tmp then
49954: LD_VAR 0 1
49958: NOT
49959: IFFALSE 49963
// exit ;
49961: GO 50000
// for i in tmp do
49963: LD_ADDR_VAR 0 2
49967: PUSH
49968: LD_VAR 0 1
49972: PUSH
49973: FOR_IN
49974: IFFALSE 49998
// if IsControledBy ( i ) then
49976: LD_VAR 0 2
49980: PPUSH
49981: CALL_OW 312
49985: IFFALSE 49996
// ComUnlink ( i ) ;
49987: LD_VAR 0 2
49991: PPUSH
49992: CALL_OW 136
49996: GO 49973
49998: POP
49999: POP
// end ;
50000: PPOPN 2
50002: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
50003: LD_EXP 33
50007: PUSH
50008: LD_EXP 64
50012: AND
50013: IFFALSE 50153
50015: GO 50017
50017: DISABLE
50018: LD_INT 0
50020: PPUSH
50021: PPUSH
// begin ToLua ( displayPowell(); ) ;
50022: LD_STRING displayPowell();
50024: PPUSH
50025: CALL_OW 559
// uc_side := 0 ;
50029: LD_ADDR_OWVAR 20
50033: PUSH
50034: LD_INT 0
50036: ST_TO_ADDR
// uc_nation := 2 ;
50037: LD_ADDR_OWVAR 21
50041: PUSH
50042: LD_INT 2
50044: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
50045: LD_ADDR_OWVAR 37
50049: PUSH
50050: LD_INT 14
50052: ST_TO_ADDR
// vc_engine := engine_siberite ;
50053: LD_ADDR_OWVAR 39
50057: PUSH
50058: LD_INT 3
50060: ST_TO_ADDR
// vc_control := control_apeman ;
50061: LD_ADDR_OWVAR 38
50065: PUSH
50066: LD_INT 5
50068: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
50069: LD_ADDR_OWVAR 40
50073: PUSH
50074: LD_INT 29
50076: ST_TO_ADDR
// un := CreateVehicle ;
50077: LD_ADDR_VAR 0 2
50081: PUSH
50082: CALL_OW 45
50086: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
50087: LD_VAR 0 2
50091: PPUSH
50092: LD_INT 1
50094: PPUSH
50095: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
50099: LD_INT 35
50101: PPUSH
50102: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
50106: LD_VAR 0 2
50110: PPUSH
50111: LD_INT 22
50113: PUSH
50114: LD_OWVAR 2
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PPUSH
50123: CALL_OW 69
50127: PPUSH
50128: LD_VAR 0 2
50132: PPUSH
50133: CALL_OW 74
50137: PPUSH
50138: CALL_OW 115
// until IsDead ( un ) ;
50142: LD_VAR 0 2
50146: PPUSH
50147: CALL_OW 301
50151: IFFALSE 50099
// end ;
50153: PPOPN 2
50155: END
// every 0 0$1 trigger StreamModeActive and sStu do
50156: LD_EXP 33
50160: PUSH
50161: LD_EXP 72
50165: AND
50166: IFFALSE 50182
50168: GO 50170
50170: DISABLE
// begin ToLua ( displayStucuk(); ) ;
50171: LD_STRING displayStucuk();
50173: PPUSH
50174: CALL_OW 559
// ResetFog ;
50178: CALL_OW 335
// end ;
50182: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
50183: LD_EXP 33
50187: PUSH
50188: LD_EXP 65
50192: AND
50193: IFFALSE 50334
50195: GO 50197
50197: DISABLE
50198: LD_INT 0
50200: PPUSH
50201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
50202: LD_ADDR_VAR 0 2
50206: PUSH
50207: LD_INT 22
50209: PUSH
50210: LD_OWVAR 2
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 21
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PPUSH
50233: CALL_OW 69
50237: ST_TO_ADDR
// if not tmp then
50238: LD_VAR 0 2
50242: NOT
50243: IFFALSE 50247
// exit ;
50245: GO 50334
// un := tmp [ rand ( 1 , tmp ) ] ;
50247: LD_ADDR_VAR 0 1
50251: PUSH
50252: LD_VAR 0 2
50256: PUSH
50257: LD_INT 1
50259: PPUSH
50260: LD_VAR 0 2
50264: PPUSH
50265: CALL_OW 12
50269: ARRAY
50270: ST_TO_ADDR
// SetSide ( un , 0 ) ;
50271: LD_VAR 0 1
50275: PPUSH
50276: LD_INT 0
50278: PPUSH
50279: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
50283: LD_VAR 0 1
50287: PPUSH
50288: LD_OWVAR 3
50292: PUSH
50293: LD_VAR 0 1
50297: DIFF
50298: PPUSH
50299: LD_VAR 0 1
50303: PPUSH
50304: CALL_OW 74
50308: PPUSH
50309: CALL_OW 115
// wait ( 0 0$20 ) ;
50313: LD_INT 700
50315: PPUSH
50316: CALL_OW 67
// SetSide ( un , your_side ) ;
50320: LD_VAR 0 1
50324: PPUSH
50325: LD_OWVAR 2
50329: PPUSH
50330: CALL_OW 235
// end ;
50334: PPOPN 2
50336: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
50337: LD_EXP 33
50341: PUSH
50342: LD_EXP 66
50346: AND
50347: IFFALSE 50453
50349: GO 50351
50351: DISABLE
50352: LD_INT 0
50354: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50355: LD_ADDR_VAR 0 1
50359: PUSH
50360: LD_INT 22
50362: PUSH
50363: LD_OWVAR 2
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: PUSH
50375: LD_INT 30
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 30
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: LIST
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PPUSH
50404: CALL_OW 69
50408: ST_TO_ADDR
// if not depot then
50409: LD_VAR 0 1
50413: NOT
50414: IFFALSE 50418
// exit ;
50416: GO 50453
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
50418: LD_VAR 0 1
50422: PUSH
50423: LD_INT 1
50425: ARRAY
50426: PPUSH
50427: CALL_OW 250
50431: PPUSH
50432: LD_VAR 0 1
50436: PUSH
50437: LD_INT 1
50439: ARRAY
50440: PPUSH
50441: CALL_OW 251
50445: PPUSH
50446: LD_INT 70
50448: PPUSH
50449: CALL_OW 495
// end ;
50453: PPOPN 1
50455: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
50456: LD_EXP 33
50460: PUSH
50461: LD_EXP 67
50465: AND
50466: IFFALSE 50677
50468: GO 50470
50470: DISABLE
50471: LD_INT 0
50473: PPUSH
50474: PPUSH
50475: PPUSH
50476: PPUSH
50477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
50478: LD_ADDR_VAR 0 5
50482: PUSH
50483: LD_INT 22
50485: PUSH
50486: LD_OWVAR 2
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 21
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PPUSH
50509: CALL_OW 69
50513: ST_TO_ADDR
// if not tmp then
50514: LD_VAR 0 5
50518: NOT
50519: IFFALSE 50523
// exit ;
50521: GO 50677
// for i in tmp do
50523: LD_ADDR_VAR 0 1
50527: PUSH
50528: LD_VAR 0 5
50532: PUSH
50533: FOR_IN
50534: IFFALSE 50675
// begin d := rand ( 0 , 5 ) ;
50536: LD_ADDR_VAR 0 4
50540: PUSH
50541: LD_INT 0
50543: PPUSH
50544: LD_INT 5
50546: PPUSH
50547: CALL_OW 12
50551: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
50552: LD_ADDR_VAR 0 2
50556: PUSH
50557: LD_VAR 0 1
50561: PPUSH
50562: CALL_OW 250
50566: PPUSH
50567: LD_VAR 0 4
50571: PPUSH
50572: LD_INT 3
50574: PPUSH
50575: LD_INT 12
50577: PPUSH
50578: CALL_OW 12
50582: PPUSH
50583: CALL_OW 272
50587: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
50588: LD_ADDR_VAR 0 3
50592: PUSH
50593: LD_VAR 0 1
50597: PPUSH
50598: CALL_OW 251
50602: PPUSH
50603: LD_VAR 0 4
50607: PPUSH
50608: LD_INT 3
50610: PPUSH
50611: LD_INT 12
50613: PPUSH
50614: CALL_OW 12
50618: PPUSH
50619: CALL_OW 273
50623: ST_TO_ADDR
// if ValidHex ( x , y ) then
50624: LD_VAR 0 2
50628: PPUSH
50629: LD_VAR 0 3
50633: PPUSH
50634: CALL_OW 488
50638: IFFALSE 50673
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
50640: LD_VAR 0 1
50644: PPUSH
50645: LD_VAR 0 2
50649: PPUSH
50650: LD_VAR 0 3
50654: PPUSH
50655: LD_INT 3
50657: PPUSH
50658: LD_INT 6
50660: PPUSH
50661: CALL_OW 12
50665: PPUSH
50666: LD_INT 1
50668: PPUSH
50669: CALL_OW 483
// end ;
50673: GO 50533
50675: POP
50676: POP
// end ;
50677: PPOPN 5
50679: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
50680: LD_EXP 33
50684: PUSH
50685: LD_EXP 68
50689: AND
50690: IFFALSE 50784
50692: GO 50694
50694: DISABLE
50695: LD_INT 0
50697: PPUSH
50698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
50699: LD_ADDR_VAR 0 2
50703: PUSH
50704: LD_INT 22
50706: PUSH
50707: LD_OWVAR 2
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 32
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 21
50728: PUSH
50729: LD_INT 2
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: LIST
50740: PPUSH
50741: CALL_OW 69
50745: ST_TO_ADDR
// if not tmp then
50746: LD_VAR 0 2
50750: NOT
50751: IFFALSE 50755
// exit ;
50753: GO 50784
// for i in tmp do
50755: LD_ADDR_VAR 0 1
50759: PUSH
50760: LD_VAR 0 2
50764: PUSH
50765: FOR_IN
50766: IFFALSE 50782
// SetFuel ( i , 0 ) ;
50768: LD_VAR 0 1
50772: PPUSH
50773: LD_INT 0
50775: PPUSH
50776: CALL_OW 240
50780: GO 50765
50782: POP
50783: POP
// end ;
50784: PPOPN 2
50786: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
50787: LD_EXP 33
50791: PUSH
50792: LD_EXP 69
50796: AND
50797: IFFALSE 50863
50799: GO 50801
50801: DISABLE
50802: LD_INT 0
50804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
50805: LD_ADDR_VAR 0 1
50809: PUSH
50810: LD_INT 22
50812: PUSH
50813: LD_OWVAR 2
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 30
50824: PUSH
50825: LD_INT 29
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PPUSH
50836: CALL_OW 69
50840: ST_TO_ADDR
// if not tmp then
50841: LD_VAR 0 1
50845: NOT
50846: IFFALSE 50850
// exit ;
50848: GO 50863
// DestroyUnit ( tmp [ 1 ] ) ;
50850: LD_VAR 0 1
50854: PUSH
50855: LD_INT 1
50857: ARRAY
50858: PPUSH
50859: CALL_OW 65
// end ;
50863: PPOPN 1
50865: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
50866: LD_EXP 33
50870: PUSH
50871: LD_EXP 71
50875: AND
50876: IFFALSE 51005
50878: GO 50880
50880: DISABLE
50881: LD_INT 0
50883: PPUSH
// begin uc_side := 0 ;
50884: LD_ADDR_OWVAR 20
50888: PUSH
50889: LD_INT 0
50891: ST_TO_ADDR
// uc_nation := nation_arabian ;
50892: LD_ADDR_OWVAR 21
50896: PUSH
50897: LD_INT 2
50899: ST_TO_ADDR
// hc_gallery :=  ;
50900: LD_ADDR_OWVAR 33
50904: PUSH
50905: LD_STRING 
50907: ST_TO_ADDR
// hc_name :=  ;
50908: LD_ADDR_OWVAR 26
50912: PUSH
50913: LD_STRING 
50915: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
50916: LD_INT 1
50918: PPUSH
50919: LD_INT 11
50921: PPUSH
50922: LD_INT 10
50924: PPUSH
50925: CALL_OW 380
// un := CreateHuman ;
50929: LD_ADDR_VAR 0 1
50933: PUSH
50934: CALL_OW 44
50938: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
50939: LD_VAR 0 1
50943: PPUSH
50944: LD_INT 1
50946: PPUSH
50947: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
50951: LD_INT 35
50953: PPUSH
50954: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
50958: LD_VAR 0 1
50962: PPUSH
50963: LD_INT 22
50965: PUSH
50966: LD_OWVAR 2
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PPUSH
50975: CALL_OW 69
50979: PPUSH
50980: LD_VAR 0 1
50984: PPUSH
50985: CALL_OW 74
50989: PPUSH
50990: CALL_OW 115
// until IsDead ( un ) ;
50994: LD_VAR 0 1
50998: PPUSH
50999: CALL_OW 301
51003: IFFALSE 50951
// end ;
51005: PPOPN 1
51007: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
51008: LD_EXP 33
51012: PUSH
51013: LD_EXP 73
51017: AND
51018: IFFALSE 51030
51020: GO 51022
51022: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
51023: LD_STRING earthquake(getX(game), 0, 32)
51025: PPUSH
51026: CALL_OW 559
51030: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
51031: LD_EXP 33
51035: PUSH
51036: LD_EXP 74
51040: AND
51041: IFFALSE 51132
51043: GO 51045
51045: DISABLE
51046: LD_INT 0
51048: PPUSH
// begin enable ;
51049: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
51050: LD_ADDR_VAR 0 1
51054: PUSH
51055: LD_INT 22
51057: PUSH
51058: LD_OWVAR 2
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 21
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 33
51079: PUSH
51080: LD_INT 3
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: LIST
51091: PPUSH
51092: CALL_OW 69
51096: ST_TO_ADDR
// if not tmp then
51097: LD_VAR 0 1
51101: NOT
51102: IFFALSE 51106
// exit ;
51104: GO 51132
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
51106: LD_VAR 0 1
51110: PUSH
51111: LD_INT 1
51113: PPUSH
51114: LD_VAR 0 1
51118: PPUSH
51119: CALL_OW 12
51123: ARRAY
51124: PPUSH
51125: LD_INT 1
51127: PPUSH
51128: CALL_OW 234
// end ;
51132: PPOPN 1
51134: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
51135: LD_EXP 33
51139: PUSH
51140: LD_EXP 75
51144: AND
51145: IFFALSE 51286
51147: GO 51149
51149: DISABLE
51150: LD_INT 0
51152: PPUSH
51153: PPUSH
51154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51155: LD_ADDR_VAR 0 3
51159: PUSH
51160: LD_INT 22
51162: PUSH
51163: LD_OWVAR 2
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 25
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PPUSH
51186: CALL_OW 69
51190: ST_TO_ADDR
// if not tmp then
51191: LD_VAR 0 3
51195: NOT
51196: IFFALSE 51200
// exit ;
51198: GO 51286
// un := tmp [ rand ( 1 , tmp ) ] ;
51200: LD_ADDR_VAR 0 2
51204: PUSH
51205: LD_VAR 0 3
51209: PUSH
51210: LD_INT 1
51212: PPUSH
51213: LD_VAR 0 3
51217: PPUSH
51218: CALL_OW 12
51222: ARRAY
51223: ST_TO_ADDR
// if Crawls ( un ) then
51224: LD_VAR 0 2
51228: PPUSH
51229: CALL_OW 318
51233: IFFALSE 51244
// ComWalk ( un ) ;
51235: LD_VAR 0 2
51239: PPUSH
51240: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
51244: LD_VAR 0 2
51248: PPUSH
51249: LD_INT 9
51251: PPUSH
51252: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
51256: LD_INT 28
51258: PPUSH
51259: LD_OWVAR 2
51263: PPUSH
51264: LD_INT 2
51266: PPUSH
51267: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
51271: LD_INT 29
51273: PPUSH
51274: LD_OWVAR 2
51278: PPUSH
51279: LD_INT 2
51281: PPUSH
51282: CALL_OW 322
// end ;
51286: PPOPN 3
51288: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
51289: LD_EXP 33
51293: PUSH
51294: LD_EXP 76
51298: AND
51299: IFFALSE 51410
51301: GO 51303
51303: DISABLE
51304: LD_INT 0
51306: PPUSH
51307: PPUSH
51308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51309: LD_ADDR_VAR 0 3
51313: PUSH
51314: LD_INT 22
51316: PUSH
51317: LD_OWVAR 2
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 25
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PPUSH
51340: CALL_OW 69
51344: ST_TO_ADDR
// if not tmp then
51345: LD_VAR 0 3
51349: NOT
51350: IFFALSE 51354
// exit ;
51352: GO 51410
// un := tmp [ rand ( 1 , tmp ) ] ;
51354: LD_ADDR_VAR 0 2
51358: PUSH
51359: LD_VAR 0 3
51363: PUSH
51364: LD_INT 1
51366: PPUSH
51367: LD_VAR 0 3
51371: PPUSH
51372: CALL_OW 12
51376: ARRAY
51377: ST_TO_ADDR
// if Crawls ( un ) then
51378: LD_VAR 0 2
51382: PPUSH
51383: CALL_OW 318
51387: IFFALSE 51398
// ComWalk ( un ) ;
51389: LD_VAR 0 2
51393: PPUSH
51394: CALL_OW 138
// SetClass ( un , class_mortar ) ;
51398: LD_VAR 0 2
51402: PPUSH
51403: LD_INT 8
51405: PPUSH
51406: CALL_OW 336
// end ;
51410: PPOPN 3
51412: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
51413: LD_EXP 33
51417: PUSH
51418: LD_EXP 77
51422: AND
51423: IFFALSE 51567
51425: GO 51427
51427: DISABLE
51428: LD_INT 0
51430: PPUSH
51431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
51432: LD_ADDR_VAR 0 2
51436: PUSH
51437: LD_INT 22
51439: PUSH
51440: LD_OWVAR 2
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 21
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: LD_INT 34
51464: PUSH
51465: LD_INT 12
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 34
51474: PUSH
51475: LD_INT 51
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 34
51484: PUSH
51485: LD_INT 32
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: LIST
51502: PPUSH
51503: CALL_OW 69
51507: ST_TO_ADDR
// if not tmp then
51508: LD_VAR 0 2
51512: NOT
51513: IFFALSE 51517
// exit ;
51515: GO 51567
// for i in tmp do
51517: LD_ADDR_VAR 0 1
51521: PUSH
51522: LD_VAR 0 2
51526: PUSH
51527: FOR_IN
51528: IFFALSE 51565
// if GetCargo ( i , mat_artifact ) = 0 then
51530: LD_VAR 0 1
51534: PPUSH
51535: LD_INT 4
51537: PPUSH
51538: CALL_OW 289
51542: PUSH
51543: LD_INT 0
51545: EQUAL
51546: IFFALSE 51563
// SetCargo ( i , mat_siberit , 100 ) ;
51548: LD_VAR 0 1
51552: PPUSH
51553: LD_INT 3
51555: PPUSH
51556: LD_INT 100
51558: PPUSH
51559: CALL_OW 290
51563: GO 51527
51565: POP
51566: POP
// end ;
51567: PPOPN 2
51569: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
51570: LD_EXP 33
51574: PUSH
51575: LD_EXP 78
51579: AND
51580: IFFALSE 51763
51582: GO 51584
51584: DISABLE
51585: LD_INT 0
51587: PPUSH
51588: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
51589: LD_ADDR_VAR 0 2
51593: PUSH
51594: LD_INT 22
51596: PUSH
51597: LD_OWVAR 2
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PPUSH
51606: CALL_OW 69
51610: ST_TO_ADDR
// if not tmp then
51611: LD_VAR 0 2
51615: NOT
51616: IFFALSE 51620
// exit ;
51618: GO 51763
// for i := 1 to 2 do
51620: LD_ADDR_VAR 0 1
51624: PUSH
51625: DOUBLE
51626: LD_INT 1
51628: DEC
51629: ST_TO_ADDR
51630: LD_INT 2
51632: PUSH
51633: FOR_TO
51634: IFFALSE 51761
// begin uc_side := your_side ;
51636: LD_ADDR_OWVAR 20
51640: PUSH
51641: LD_OWVAR 2
51645: ST_TO_ADDR
// uc_nation := nation_american ;
51646: LD_ADDR_OWVAR 21
51650: PUSH
51651: LD_INT 1
51653: ST_TO_ADDR
// vc_chassis := us_morphling ;
51654: LD_ADDR_OWVAR 37
51658: PUSH
51659: LD_INT 5
51661: ST_TO_ADDR
// vc_engine := engine_siberite ;
51662: LD_ADDR_OWVAR 39
51666: PUSH
51667: LD_INT 3
51669: ST_TO_ADDR
// vc_control := control_computer ;
51670: LD_ADDR_OWVAR 38
51674: PUSH
51675: LD_INT 3
51677: ST_TO_ADDR
// vc_weapon := us_double_laser ;
51678: LD_ADDR_OWVAR 40
51682: PUSH
51683: LD_INT 10
51685: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
51686: LD_VAR 0 2
51690: PUSH
51691: LD_INT 1
51693: ARRAY
51694: PPUSH
51695: CALL_OW 310
51699: NOT
51700: IFFALSE 51747
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
51702: CALL_OW 45
51706: PPUSH
51707: LD_VAR 0 2
51711: PUSH
51712: LD_INT 1
51714: ARRAY
51715: PPUSH
51716: CALL_OW 250
51720: PPUSH
51721: LD_VAR 0 2
51725: PUSH
51726: LD_INT 1
51728: ARRAY
51729: PPUSH
51730: CALL_OW 251
51734: PPUSH
51735: LD_INT 12
51737: PPUSH
51738: LD_INT 1
51740: PPUSH
51741: CALL_OW 50
51745: GO 51759
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
51747: CALL_OW 45
51751: PPUSH
51752: LD_INT 1
51754: PPUSH
51755: CALL_OW 51
// end ;
51759: GO 51633
51761: POP
51762: POP
// end ;
51763: PPOPN 2
51765: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
51766: LD_EXP 33
51770: PUSH
51771: LD_EXP 79
51775: AND
51776: IFFALSE 51998
51778: GO 51780
51780: DISABLE
51781: LD_INT 0
51783: PPUSH
51784: PPUSH
51785: PPUSH
51786: PPUSH
51787: PPUSH
51788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
51789: LD_ADDR_VAR 0 6
51793: PUSH
51794: LD_INT 22
51796: PUSH
51797: LD_OWVAR 2
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 21
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 3
51818: PUSH
51819: LD_INT 23
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: LIST
51837: PPUSH
51838: CALL_OW 69
51842: ST_TO_ADDR
// if not tmp then
51843: LD_VAR 0 6
51847: NOT
51848: IFFALSE 51852
// exit ;
51850: GO 51998
// s1 := rand ( 1 , 4 ) ;
51852: LD_ADDR_VAR 0 2
51856: PUSH
51857: LD_INT 1
51859: PPUSH
51860: LD_INT 4
51862: PPUSH
51863: CALL_OW 12
51867: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
51868: LD_ADDR_VAR 0 4
51872: PUSH
51873: LD_VAR 0 6
51877: PUSH
51878: LD_INT 1
51880: ARRAY
51881: PPUSH
51882: LD_VAR 0 2
51886: PPUSH
51887: CALL_OW 259
51891: ST_TO_ADDR
// if s1 = 1 then
51892: LD_VAR 0 2
51896: PUSH
51897: LD_INT 1
51899: EQUAL
51900: IFFALSE 51920
// s2 := rand ( 2 , 4 ) else
51902: LD_ADDR_VAR 0 3
51906: PUSH
51907: LD_INT 2
51909: PPUSH
51910: LD_INT 4
51912: PPUSH
51913: CALL_OW 12
51917: ST_TO_ADDR
51918: GO 51928
// s2 := 1 ;
51920: LD_ADDR_VAR 0 3
51924: PUSH
51925: LD_INT 1
51927: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
51928: LD_ADDR_VAR 0 5
51932: PUSH
51933: LD_VAR 0 6
51937: PUSH
51938: LD_INT 1
51940: ARRAY
51941: PPUSH
51942: LD_VAR 0 3
51946: PPUSH
51947: CALL_OW 259
51951: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
51952: LD_VAR 0 6
51956: PUSH
51957: LD_INT 1
51959: ARRAY
51960: PPUSH
51961: LD_VAR 0 2
51965: PPUSH
51966: LD_VAR 0 5
51970: PPUSH
51971: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
51975: LD_VAR 0 6
51979: PUSH
51980: LD_INT 1
51982: ARRAY
51983: PPUSH
51984: LD_VAR 0 3
51988: PPUSH
51989: LD_VAR 0 4
51993: PPUSH
51994: CALL_OW 237
// end ;
51998: PPOPN 6
52000: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
52001: LD_EXP 33
52005: PUSH
52006: LD_EXP 80
52010: AND
52011: IFFALSE 52090
52013: GO 52015
52015: DISABLE
52016: LD_INT 0
52018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
52019: LD_ADDR_VAR 0 1
52023: PUSH
52024: LD_INT 22
52026: PUSH
52027: LD_OWVAR 2
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 30
52038: PUSH
52039: LD_INT 3
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PPUSH
52050: CALL_OW 69
52054: ST_TO_ADDR
// if not tmp then
52055: LD_VAR 0 1
52059: NOT
52060: IFFALSE 52064
// exit ;
52062: GO 52090
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
52064: LD_VAR 0 1
52068: PUSH
52069: LD_INT 1
52071: PPUSH
52072: LD_VAR 0 1
52076: PPUSH
52077: CALL_OW 12
52081: ARRAY
52082: PPUSH
52083: LD_INT 1
52085: PPUSH
52086: CALL_OW 234
// end ;
52090: PPOPN 1
52092: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
52093: LD_EXP 33
52097: PUSH
52098: LD_EXP 81
52102: AND
52103: IFFALSE 52215
52105: GO 52107
52107: DISABLE
52108: LD_INT 0
52110: PPUSH
52111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
52112: LD_ADDR_VAR 0 2
52116: PUSH
52117: LD_INT 22
52119: PUSH
52120: LD_OWVAR 2
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: LD_INT 30
52134: PUSH
52135: LD_INT 27
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 30
52144: PUSH
52145: LD_INT 26
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 30
52154: PUSH
52155: LD_INT 28
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PPUSH
52172: CALL_OW 69
52176: ST_TO_ADDR
// if not tmp then
52177: LD_VAR 0 2
52181: NOT
52182: IFFALSE 52186
// exit ;
52184: GO 52215
// for i in tmp do
52186: LD_ADDR_VAR 0 1
52190: PUSH
52191: LD_VAR 0 2
52195: PUSH
52196: FOR_IN
52197: IFFALSE 52213
// SetLives ( i , 1 ) ;
52199: LD_VAR 0 1
52203: PPUSH
52204: LD_INT 1
52206: PPUSH
52207: CALL_OW 234
52211: GO 52196
52213: POP
52214: POP
// end ;
52215: PPOPN 2
52217: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
52218: LD_EXP 33
52222: PUSH
52223: LD_EXP 82
52227: AND
52228: IFFALSE 52502
52230: GO 52232
52232: DISABLE
52233: LD_INT 0
52235: PPUSH
52236: PPUSH
52237: PPUSH
// begin i := rand ( 1 , 7 ) ;
52238: LD_ADDR_VAR 0 1
52242: PUSH
52243: LD_INT 1
52245: PPUSH
52246: LD_INT 7
52248: PPUSH
52249: CALL_OW 12
52253: ST_TO_ADDR
// case i of 1 :
52254: LD_VAR 0 1
52258: PUSH
52259: LD_INT 1
52261: DOUBLE
52262: EQUAL
52263: IFTRUE 52267
52265: GO 52277
52267: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
52268: LD_STRING earthquake(getX(game), 0, 32)
52270: PPUSH
52271: CALL_OW 559
52275: GO 52502
52277: LD_INT 2
52279: DOUBLE
52280: EQUAL
52281: IFTRUE 52285
52283: GO 52299
52285: POP
// begin ToLua ( displayStucuk(); ) ;
52286: LD_STRING displayStucuk();
52288: PPUSH
52289: CALL_OW 559
// ResetFog ;
52293: CALL_OW 335
// end ; 3 :
52297: GO 52502
52299: LD_INT 3
52301: DOUBLE
52302: EQUAL
52303: IFTRUE 52307
52305: GO 52411
52307: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52308: LD_ADDR_VAR 0 2
52312: PUSH
52313: LD_INT 22
52315: PUSH
52316: LD_OWVAR 2
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 25
52327: PUSH
52328: LD_INT 1
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PPUSH
52339: CALL_OW 69
52343: ST_TO_ADDR
// if not tmp then
52344: LD_VAR 0 2
52348: NOT
52349: IFFALSE 52353
// exit ;
52351: GO 52502
// un := tmp [ rand ( 1 , tmp ) ] ;
52353: LD_ADDR_VAR 0 3
52357: PUSH
52358: LD_VAR 0 2
52362: PUSH
52363: LD_INT 1
52365: PPUSH
52366: LD_VAR 0 2
52370: PPUSH
52371: CALL_OW 12
52375: ARRAY
52376: ST_TO_ADDR
// if Crawls ( un ) then
52377: LD_VAR 0 3
52381: PPUSH
52382: CALL_OW 318
52386: IFFALSE 52397
// ComWalk ( un ) ;
52388: LD_VAR 0 3
52392: PPUSH
52393: CALL_OW 138
// SetClass ( un , class_mortar ) ;
52397: LD_VAR 0 3
52401: PPUSH
52402: LD_INT 8
52404: PPUSH
52405: CALL_OW 336
// end ; 4 :
52409: GO 52502
52411: LD_INT 4
52413: DOUBLE
52414: EQUAL
52415: IFTRUE 52419
52417: GO 52480
52419: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
52420: LD_ADDR_VAR 0 2
52424: PUSH
52425: LD_INT 22
52427: PUSH
52428: LD_OWVAR 2
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 30
52439: PUSH
52440: LD_INT 29
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PPUSH
52451: CALL_OW 69
52455: ST_TO_ADDR
// if not tmp then
52456: LD_VAR 0 2
52460: NOT
52461: IFFALSE 52465
// exit ;
52463: GO 52502
// DestroyUnit ( tmp [ 1 ] ) ;
52465: LD_VAR 0 2
52469: PUSH
52470: LD_INT 1
52472: ARRAY
52473: PPUSH
52474: CALL_OW 65
// end ; 5 .. 7 :
52478: GO 52502
52480: LD_INT 5
52482: DOUBLE
52483: GREATEREQUAL
52484: IFFALSE 52492
52486: LD_INT 7
52488: DOUBLE
52489: LESSEQUAL
52490: IFTRUE 52494
52492: GO 52501
52494: POP
// StreamSibBomb ; end ;
52495: CALL 48752 0 0
52499: GO 52502
52501: POP
// end ;
52502: PPOPN 3
52504: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
52505: LD_EXP 33
52509: PUSH
52510: LD_EXP 83
52514: AND
52515: IFFALSE 52671
52517: GO 52519
52519: DISABLE
52520: LD_INT 0
52522: PPUSH
52523: PPUSH
52524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
52525: LD_ADDR_VAR 0 2
52529: PUSH
52530: LD_INT 81
52532: PUSH
52533: LD_OWVAR 2
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: LD_INT 21
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 21
52557: PUSH
52558: LD_INT 2
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: LIST
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PPUSH
52574: CALL_OW 69
52578: ST_TO_ADDR
// if not tmp then
52579: LD_VAR 0 2
52583: NOT
52584: IFFALSE 52588
// exit ;
52586: GO 52671
// p := 0 ;
52588: LD_ADDR_VAR 0 3
52592: PUSH
52593: LD_INT 0
52595: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
52596: LD_INT 35
52598: PPUSH
52599: CALL_OW 67
// p := p + 1 ;
52603: LD_ADDR_VAR 0 3
52607: PUSH
52608: LD_VAR 0 3
52612: PUSH
52613: LD_INT 1
52615: PLUS
52616: ST_TO_ADDR
// for i in tmp do
52617: LD_ADDR_VAR 0 1
52621: PUSH
52622: LD_VAR 0 2
52626: PUSH
52627: FOR_IN
52628: IFFALSE 52659
// if GetLives ( i ) < 1000 then
52630: LD_VAR 0 1
52634: PPUSH
52635: CALL_OW 256
52639: PUSH
52640: LD_INT 1000
52642: LESS
52643: IFFALSE 52657
// SetLives ( i , 1000 ) ;
52645: LD_VAR 0 1
52649: PPUSH
52650: LD_INT 1000
52652: PPUSH
52653: CALL_OW 234
52657: GO 52627
52659: POP
52660: POP
// until p > 20 ;
52661: LD_VAR 0 3
52665: PUSH
52666: LD_INT 20
52668: GREATER
52669: IFFALSE 52596
// end ;
52671: PPOPN 3
52673: END
// every 0 0$1 trigger StreamModeActive and sTime do
52674: LD_EXP 33
52678: PUSH
52679: LD_EXP 84
52683: AND
52684: IFFALSE 52719
52686: GO 52688
52688: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
52689: LD_INT 28
52691: PPUSH
52692: LD_OWVAR 2
52696: PPUSH
52697: LD_INT 2
52699: PPUSH
52700: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
52704: LD_INT 30
52706: PPUSH
52707: LD_OWVAR 2
52711: PPUSH
52712: LD_INT 2
52714: PPUSH
52715: CALL_OW 322
// end ;
52719: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
52720: LD_EXP 33
52724: PUSH
52725: LD_EXP 85
52729: AND
52730: IFFALSE 52851
52732: GO 52734
52734: DISABLE
52735: LD_INT 0
52737: PPUSH
52738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
52739: LD_ADDR_VAR 0 2
52743: PUSH
52744: LD_INT 22
52746: PUSH
52747: LD_OWVAR 2
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 21
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 3
52768: PUSH
52769: LD_INT 23
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: LIST
52787: PPUSH
52788: CALL_OW 69
52792: ST_TO_ADDR
// if not tmp then
52793: LD_VAR 0 2
52797: NOT
52798: IFFALSE 52802
// exit ;
52800: GO 52851
// for i in tmp do
52802: LD_ADDR_VAR 0 1
52806: PUSH
52807: LD_VAR 0 2
52811: PUSH
52812: FOR_IN
52813: IFFALSE 52849
// begin if Crawls ( i ) then
52815: LD_VAR 0 1
52819: PPUSH
52820: CALL_OW 318
52824: IFFALSE 52835
// ComWalk ( i ) ;
52826: LD_VAR 0 1
52830: PPUSH
52831: CALL_OW 138
// SetClass ( i , 2 ) ;
52835: LD_VAR 0 1
52839: PPUSH
52840: LD_INT 2
52842: PPUSH
52843: CALL_OW 336
// end ;
52847: GO 52812
52849: POP
52850: POP
// end ;
52851: PPOPN 2
52853: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
52854: LD_EXP 33
52858: PUSH
52859: LD_EXP 86
52863: AND
52864: IFFALSE 53145
52866: GO 52868
52868: DISABLE
52869: LD_INT 0
52871: PPUSH
52872: PPUSH
52873: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
52874: LD_OWVAR 2
52878: PPUSH
52879: LD_INT 9
52881: PPUSH
52882: LD_INT 1
52884: PPUSH
52885: LD_INT 1
52887: PPUSH
52888: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
52892: LD_INT 9
52894: PPUSH
52895: LD_OWVAR 2
52899: PPUSH
52900: CALL_OW 343
// uc_side := 9 ;
52904: LD_ADDR_OWVAR 20
52908: PUSH
52909: LD_INT 9
52911: ST_TO_ADDR
// uc_nation := 2 ;
52912: LD_ADDR_OWVAR 21
52916: PUSH
52917: LD_INT 2
52919: ST_TO_ADDR
// hc_name := Dark Warrior ;
52920: LD_ADDR_OWVAR 26
52924: PUSH
52925: LD_STRING Dark Warrior
52927: ST_TO_ADDR
// hc_gallery :=  ;
52928: LD_ADDR_OWVAR 33
52932: PUSH
52933: LD_STRING 
52935: ST_TO_ADDR
// hc_noskilllimit := true ;
52936: LD_ADDR_OWVAR 76
52940: PUSH
52941: LD_INT 1
52943: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
52944: LD_ADDR_OWVAR 31
52948: PUSH
52949: LD_INT 30
52951: PUSH
52952: LD_INT 30
52954: PUSH
52955: LD_INT 30
52957: PUSH
52958: LD_INT 30
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: ST_TO_ADDR
// un := CreateHuman ;
52967: LD_ADDR_VAR 0 3
52971: PUSH
52972: CALL_OW 44
52976: ST_TO_ADDR
// hc_noskilllimit := false ;
52977: LD_ADDR_OWVAR 76
52981: PUSH
52982: LD_INT 0
52984: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
52985: LD_VAR 0 3
52989: PPUSH
52990: LD_INT 1
52992: PPUSH
52993: CALL_OW 51
// p := 0 ;
52997: LD_ADDR_VAR 0 2
53001: PUSH
53002: LD_INT 0
53004: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
53005: LD_INT 35
53007: PPUSH
53008: CALL_OW 67
// p := p + 1 ;
53012: LD_ADDR_VAR 0 2
53016: PUSH
53017: LD_VAR 0 2
53021: PUSH
53022: LD_INT 1
53024: PLUS
53025: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
53026: LD_VAR 0 3
53030: PPUSH
53031: CALL_OW 256
53035: PUSH
53036: LD_INT 1000
53038: LESS
53039: IFFALSE 53053
// SetLives ( un , 1000 ) ;
53041: LD_VAR 0 3
53045: PPUSH
53046: LD_INT 1000
53048: PPUSH
53049: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
53053: LD_VAR 0 3
53057: PPUSH
53058: LD_INT 81
53060: PUSH
53061: LD_OWVAR 2
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 91
53072: PUSH
53073: LD_VAR 0 3
53077: PUSH
53078: LD_INT 30
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: LIST
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PPUSH
53090: CALL_OW 69
53094: PPUSH
53095: LD_VAR 0 3
53099: PPUSH
53100: CALL_OW 74
53104: PPUSH
53105: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
53109: LD_VAR 0 2
53113: PUSH
53114: LD_INT 60
53116: GREATER
53117: PUSH
53118: LD_VAR 0 3
53122: PPUSH
53123: CALL_OW 301
53127: OR
53128: IFFALSE 53005
// if un then
53130: LD_VAR 0 3
53134: IFFALSE 53145
// RemoveUnit ( un ) ;
53136: LD_VAR 0 3
53140: PPUSH
53141: CALL_OW 64
// end ;
53145: PPOPN 3
53147: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
53148: LD_INT 0
53150: PPUSH
// case cmd of 301 :
53151: LD_VAR 0 1
53155: PUSH
53156: LD_INT 301
53158: DOUBLE
53159: EQUAL
53160: IFTRUE 53164
53162: GO 53196
53164: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
53165: LD_VAR 0 6
53169: PPUSH
53170: LD_VAR 0 7
53174: PPUSH
53175: LD_VAR 0 8
53179: PPUSH
53180: LD_VAR 0 4
53184: PPUSH
53185: LD_VAR 0 5
53189: PPUSH
53190: CALL 54397 0 5
53194: GO 53317
53196: LD_INT 302
53198: DOUBLE
53199: EQUAL
53200: IFTRUE 53204
53202: GO 53241
53204: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
53205: LD_VAR 0 6
53209: PPUSH
53210: LD_VAR 0 7
53214: PPUSH
53215: LD_VAR 0 8
53219: PPUSH
53220: LD_VAR 0 9
53224: PPUSH
53225: LD_VAR 0 4
53229: PPUSH
53230: LD_VAR 0 5
53234: PPUSH
53235: CALL 54488 0 6
53239: GO 53317
53241: LD_INT 303
53243: DOUBLE
53244: EQUAL
53245: IFTRUE 53249
53247: GO 53286
53249: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
53250: LD_VAR 0 6
53254: PPUSH
53255: LD_VAR 0 7
53259: PPUSH
53260: LD_VAR 0 8
53264: PPUSH
53265: LD_VAR 0 9
53269: PPUSH
53270: LD_VAR 0 4
53274: PPUSH
53275: LD_VAR 0 5
53279: PPUSH
53280: CALL 53322 0 6
53284: GO 53317
53286: LD_INT 304
53288: DOUBLE
53289: EQUAL
53290: IFTRUE 53294
53292: GO 53316
53294: POP
// hHackTeleport ( unit , x , y ) ; end ;
53295: LD_VAR 0 2
53299: PPUSH
53300: LD_VAR 0 4
53304: PPUSH
53305: LD_VAR 0 5
53309: PPUSH
53310: CALL 55081 0 3
53314: GO 53317
53316: POP
// end ;
53317: LD_VAR 0 12
53321: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
53322: LD_INT 0
53324: PPUSH
53325: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
53326: LD_VAR 0 1
53330: PUSH
53331: LD_INT 1
53333: LESS
53334: PUSH
53335: LD_VAR 0 1
53339: PUSH
53340: LD_INT 3
53342: GREATER
53343: OR
53344: PUSH
53345: LD_VAR 0 5
53349: PPUSH
53350: LD_VAR 0 6
53354: PPUSH
53355: CALL_OW 428
53359: OR
53360: IFFALSE 53364
// exit ;
53362: GO 54084
// uc_side := your_side ;
53364: LD_ADDR_OWVAR 20
53368: PUSH
53369: LD_OWVAR 2
53373: ST_TO_ADDR
// uc_nation := nation ;
53374: LD_ADDR_OWVAR 21
53378: PUSH
53379: LD_VAR 0 1
53383: ST_TO_ADDR
// bc_level = 1 ;
53384: LD_ADDR_OWVAR 43
53388: PUSH
53389: LD_INT 1
53391: ST_TO_ADDR
// case btype of 1 :
53392: LD_VAR 0 2
53396: PUSH
53397: LD_INT 1
53399: DOUBLE
53400: EQUAL
53401: IFTRUE 53405
53403: GO 53416
53405: POP
// bc_type := b_depot ; 2 :
53406: LD_ADDR_OWVAR 42
53410: PUSH
53411: LD_INT 0
53413: ST_TO_ADDR
53414: GO 54028
53416: LD_INT 2
53418: DOUBLE
53419: EQUAL
53420: IFTRUE 53424
53422: GO 53435
53424: POP
// bc_type := b_warehouse ; 3 :
53425: LD_ADDR_OWVAR 42
53429: PUSH
53430: LD_INT 1
53432: ST_TO_ADDR
53433: GO 54028
53435: LD_INT 3
53437: DOUBLE
53438: EQUAL
53439: IFTRUE 53443
53441: GO 53454
53443: POP
// bc_type := b_lab ; 4 .. 9 :
53444: LD_ADDR_OWVAR 42
53448: PUSH
53449: LD_INT 6
53451: ST_TO_ADDR
53452: GO 54028
53454: LD_INT 4
53456: DOUBLE
53457: GREATEREQUAL
53458: IFFALSE 53466
53460: LD_INT 9
53462: DOUBLE
53463: LESSEQUAL
53464: IFTRUE 53468
53466: GO 53520
53468: POP
// begin bc_type := b_lab_half ;
53469: LD_ADDR_OWVAR 42
53473: PUSH
53474: LD_INT 7
53476: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
53477: LD_ADDR_OWVAR 44
53481: PUSH
53482: LD_INT 10
53484: PUSH
53485: LD_INT 11
53487: PUSH
53488: LD_INT 12
53490: PUSH
53491: LD_INT 15
53493: PUSH
53494: LD_INT 14
53496: PUSH
53497: LD_INT 13
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: PUSH
53508: LD_VAR 0 2
53512: PUSH
53513: LD_INT 3
53515: MINUS
53516: ARRAY
53517: ST_TO_ADDR
// end ; 10 .. 13 :
53518: GO 54028
53520: LD_INT 10
53522: DOUBLE
53523: GREATEREQUAL
53524: IFFALSE 53532
53526: LD_INT 13
53528: DOUBLE
53529: LESSEQUAL
53530: IFTRUE 53534
53532: GO 53611
53534: POP
// begin bc_type := b_lab_full ;
53535: LD_ADDR_OWVAR 42
53539: PUSH
53540: LD_INT 8
53542: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
53543: LD_ADDR_OWVAR 44
53547: PUSH
53548: LD_INT 10
53550: PUSH
53551: LD_INT 12
53553: PUSH
53554: LD_INT 14
53556: PUSH
53557: LD_INT 13
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: PUSH
53566: LD_VAR 0 2
53570: PUSH
53571: LD_INT 9
53573: MINUS
53574: ARRAY
53575: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
53576: LD_ADDR_OWVAR 45
53580: PUSH
53581: LD_INT 11
53583: PUSH
53584: LD_INT 15
53586: PUSH
53587: LD_INT 12
53589: PUSH
53590: LD_INT 15
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: PUSH
53599: LD_VAR 0 2
53603: PUSH
53604: LD_INT 9
53606: MINUS
53607: ARRAY
53608: ST_TO_ADDR
// end ; 14 :
53609: GO 54028
53611: LD_INT 14
53613: DOUBLE
53614: EQUAL
53615: IFTRUE 53619
53617: GO 53630
53619: POP
// bc_type := b_workshop ; 15 :
53620: LD_ADDR_OWVAR 42
53624: PUSH
53625: LD_INT 2
53627: ST_TO_ADDR
53628: GO 54028
53630: LD_INT 15
53632: DOUBLE
53633: EQUAL
53634: IFTRUE 53638
53636: GO 53649
53638: POP
// bc_type := b_factory ; 16 :
53639: LD_ADDR_OWVAR 42
53643: PUSH
53644: LD_INT 3
53646: ST_TO_ADDR
53647: GO 54028
53649: LD_INT 16
53651: DOUBLE
53652: EQUAL
53653: IFTRUE 53657
53655: GO 53668
53657: POP
// bc_type := b_ext_gun ; 17 :
53658: LD_ADDR_OWVAR 42
53662: PUSH
53663: LD_INT 17
53665: ST_TO_ADDR
53666: GO 54028
53668: LD_INT 17
53670: DOUBLE
53671: EQUAL
53672: IFTRUE 53676
53674: GO 53704
53676: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
53677: LD_ADDR_OWVAR 42
53681: PUSH
53682: LD_INT 19
53684: PUSH
53685: LD_INT 23
53687: PUSH
53688: LD_INT 19
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: LIST
53695: PUSH
53696: LD_VAR 0 1
53700: ARRAY
53701: ST_TO_ADDR
53702: GO 54028
53704: LD_INT 18
53706: DOUBLE
53707: EQUAL
53708: IFTRUE 53712
53710: GO 53723
53712: POP
// bc_type := b_ext_radar ; 19 :
53713: LD_ADDR_OWVAR 42
53717: PUSH
53718: LD_INT 20
53720: ST_TO_ADDR
53721: GO 54028
53723: LD_INT 19
53725: DOUBLE
53726: EQUAL
53727: IFTRUE 53731
53729: GO 53742
53731: POP
// bc_type := b_ext_radio ; 20 :
53732: LD_ADDR_OWVAR 42
53736: PUSH
53737: LD_INT 22
53739: ST_TO_ADDR
53740: GO 54028
53742: LD_INT 20
53744: DOUBLE
53745: EQUAL
53746: IFTRUE 53750
53748: GO 53761
53750: POP
// bc_type := b_ext_siberium ; 21 :
53751: LD_ADDR_OWVAR 42
53755: PUSH
53756: LD_INT 21
53758: ST_TO_ADDR
53759: GO 54028
53761: LD_INT 21
53763: DOUBLE
53764: EQUAL
53765: IFTRUE 53769
53767: GO 53780
53769: POP
// bc_type := b_ext_computer ; 22 :
53770: LD_ADDR_OWVAR 42
53774: PUSH
53775: LD_INT 24
53777: ST_TO_ADDR
53778: GO 54028
53780: LD_INT 22
53782: DOUBLE
53783: EQUAL
53784: IFTRUE 53788
53786: GO 53799
53788: POP
// bc_type := b_ext_track ; 23 :
53789: LD_ADDR_OWVAR 42
53793: PUSH
53794: LD_INT 16
53796: ST_TO_ADDR
53797: GO 54028
53799: LD_INT 23
53801: DOUBLE
53802: EQUAL
53803: IFTRUE 53807
53805: GO 53818
53807: POP
// bc_type := b_ext_laser ; 24 :
53808: LD_ADDR_OWVAR 42
53812: PUSH
53813: LD_INT 25
53815: ST_TO_ADDR
53816: GO 54028
53818: LD_INT 24
53820: DOUBLE
53821: EQUAL
53822: IFTRUE 53826
53824: GO 53837
53826: POP
// bc_type := b_control_tower ; 25 :
53827: LD_ADDR_OWVAR 42
53831: PUSH
53832: LD_INT 36
53834: ST_TO_ADDR
53835: GO 54028
53837: LD_INT 25
53839: DOUBLE
53840: EQUAL
53841: IFTRUE 53845
53843: GO 53856
53845: POP
// bc_type := b_breastwork ; 26 :
53846: LD_ADDR_OWVAR 42
53850: PUSH
53851: LD_INT 31
53853: ST_TO_ADDR
53854: GO 54028
53856: LD_INT 26
53858: DOUBLE
53859: EQUAL
53860: IFTRUE 53864
53862: GO 53875
53864: POP
// bc_type := b_bunker ; 27 :
53865: LD_ADDR_OWVAR 42
53869: PUSH
53870: LD_INT 32
53872: ST_TO_ADDR
53873: GO 54028
53875: LD_INT 27
53877: DOUBLE
53878: EQUAL
53879: IFTRUE 53883
53881: GO 53894
53883: POP
// bc_type := b_turret ; 28 :
53884: LD_ADDR_OWVAR 42
53888: PUSH
53889: LD_INT 33
53891: ST_TO_ADDR
53892: GO 54028
53894: LD_INT 28
53896: DOUBLE
53897: EQUAL
53898: IFTRUE 53902
53900: GO 53913
53902: POP
// bc_type := b_armoury ; 29 :
53903: LD_ADDR_OWVAR 42
53907: PUSH
53908: LD_INT 4
53910: ST_TO_ADDR
53911: GO 54028
53913: LD_INT 29
53915: DOUBLE
53916: EQUAL
53917: IFTRUE 53921
53919: GO 53932
53921: POP
// bc_type := b_barracks ; 30 :
53922: LD_ADDR_OWVAR 42
53926: PUSH
53927: LD_INT 5
53929: ST_TO_ADDR
53930: GO 54028
53932: LD_INT 30
53934: DOUBLE
53935: EQUAL
53936: IFTRUE 53940
53938: GO 53951
53940: POP
// bc_type := b_solar_power ; 31 :
53941: LD_ADDR_OWVAR 42
53945: PUSH
53946: LD_INT 27
53948: ST_TO_ADDR
53949: GO 54028
53951: LD_INT 31
53953: DOUBLE
53954: EQUAL
53955: IFTRUE 53959
53957: GO 53970
53959: POP
// bc_type := b_oil_power ; 32 :
53960: LD_ADDR_OWVAR 42
53964: PUSH
53965: LD_INT 26
53967: ST_TO_ADDR
53968: GO 54028
53970: LD_INT 32
53972: DOUBLE
53973: EQUAL
53974: IFTRUE 53978
53976: GO 53989
53978: POP
// bc_type := b_siberite_power ; 33 :
53979: LD_ADDR_OWVAR 42
53983: PUSH
53984: LD_INT 28
53986: ST_TO_ADDR
53987: GO 54028
53989: LD_INT 33
53991: DOUBLE
53992: EQUAL
53993: IFTRUE 53997
53995: GO 54008
53997: POP
// bc_type := b_oil_mine ; 34 :
53998: LD_ADDR_OWVAR 42
54002: PUSH
54003: LD_INT 29
54005: ST_TO_ADDR
54006: GO 54028
54008: LD_INT 34
54010: DOUBLE
54011: EQUAL
54012: IFTRUE 54016
54014: GO 54027
54016: POP
// bc_type := b_siberite_mine ; end ;
54017: LD_ADDR_OWVAR 42
54021: PUSH
54022: LD_INT 30
54024: ST_TO_ADDR
54025: GO 54028
54027: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
54028: LD_ADDR_VAR 0 8
54032: PUSH
54033: LD_VAR 0 5
54037: PPUSH
54038: LD_VAR 0 6
54042: PPUSH
54043: LD_VAR 0 3
54047: PPUSH
54048: CALL_OW 47
54052: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
54053: LD_OWVAR 42
54057: PUSH
54058: LD_INT 32
54060: PUSH
54061: LD_INT 33
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: IN
54068: IFFALSE 54084
// PlaceWeaponTurret ( b , weapon ) ;
54070: LD_VAR 0 8
54074: PPUSH
54075: LD_VAR 0 4
54079: PPUSH
54080: CALL_OW 431
// end ;
54084: LD_VAR 0 7
54088: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
54089: LD_INT 0
54091: PPUSH
54092: PPUSH
54093: PPUSH
54094: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54095: LD_ADDR_VAR 0 4
54099: PUSH
54100: LD_INT 22
54102: PUSH
54103: LD_OWVAR 2
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: LD_INT 30
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 30
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: LIST
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PPUSH
54144: CALL_OW 69
54148: ST_TO_ADDR
// if not tmp then
54149: LD_VAR 0 4
54153: NOT
54154: IFFALSE 54158
// exit ;
54156: GO 54217
// for i in tmp do
54158: LD_ADDR_VAR 0 2
54162: PUSH
54163: LD_VAR 0 4
54167: PUSH
54168: FOR_IN
54169: IFFALSE 54215
// for j = 1 to 3 do
54171: LD_ADDR_VAR 0 3
54175: PUSH
54176: DOUBLE
54177: LD_INT 1
54179: DEC
54180: ST_TO_ADDR
54181: LD_INT 3
54183: PUSH
54184: FOR_TO
54185: IFFALSE 54211
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
54187: LD_VAR 0 2
54191: PPUSH
54192: CALL_OW 274
54196: PPUSH
54197: LD_VAR 0 3
54201: PPUSH
54202: LD_INT 99999
54204: PPUSH
54205: CALL_OW 277
54209: GO 54184
54211: POP
54212: POP
54213: GO 54168
54215: POP
54216: POP
// end ;
54217: LD_VAR 0 1
54221: RET
// export function hHackSetLevel10 ; var i , j ; begin
54222: LD_INT 0
54224: PPUSH
54225: PPUSH
54226: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
54227: LD_ADDR_VAR 0 2
54231: PUSH
54232: LD_INT 21
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PPUSH
54242: CALL_OW 69
54246: PUSH
54247: FOR_IN
54248: IFFALSE 54300
// if IsSelected ( i ) then
54250: LD_VAR 0 2
54254: PPUSH
54255: CALL_OW 306
54259: IFFALSE 54298
// begin for j := 1 to 4 do
54261: LD_ADDR_VAR 0 3
54265: PUSH
54266: DOUBLE
54267: LD_INT 1
54269: DEC
54270: ST_TO_ADDR
54271: LD_INT 4
54273: PUSH
54274: FOR_TO
54275: IFFALSE 54296
// SetSkill ( i , j , 10 ) ;
54277: LD_VAR 0 2
54281: PPUSH
54282: LD_VAR 0 3
54286: PPUSH
54287: LD_INT 10
54289: PPUSH
54290: CALL_OW 237
54294: GO 54274
54296: POP
54297: POP
// end ;
54298: GO 54247
54300: POP
54301: POP
// end ;
54302: LD_VAR 0 1
54306: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
54307: LD_INT 0
54309: PPUSH
54310: PPUSH
54311: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
54312: LD_ADDR_VAR 0 2
54316: PUSH
54317: LD_INT 22
54319: PUSH
54320: LD_OWVAR 2
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 21
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PPUSH
54343: CALL_OW 69
54347: PUSH
54348: FOR_IN
54349: IFFALSE 54390
// begin for j := 1 to 4 do
54351: LD_ADDR_VAR 0 3
54355: PUSH
54356: DOUBLE
54357: LD_INT 1
54359: DEC
54360: ST_TO_ADDR
54361: LD_INT 4
54363: PUSH
54364: FOR_TO
54365: IFFALSE 54386
// SetSkill ( i , j , 10 ) ;
54367: LD_VAR 0 2
54371: PPUSH
54372: LD_VAR 0 3
54376: PPUSH
54377: LD_INT 10
54379: PPUSH
54380: CALL_OW 237
54384: GO 54364
54386: POP
54387: POP
// end ;
54388: GO 54348
54390: POP
54391: POP
// end ;
54392: LD_VAR 0 1
54396: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
54397: LD_INT 0
54399: PPUSH
// uc_side := your_side ;
54400: LD_ADDR_OWVAR 20
54404: PUSH
54405: LD_OWVAR 2
54409: ST_TO_ADDR
// uc_nation := nation ;
54410: LD_ADDR_OWVAR 21
54414: PUSH
54415: LD_VAR 0 1
54419: ST_TO_ADDR
// InitHc ;
54420: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
54424: LD_INT 0
54426: PPUSH
54427: LD_VAR 0 2
54431: PPUSH
54432: LD_VAR 0 3
54436: PPUSH
54437: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
54441: LD_VAR 0 4
54445: PPUSH
54446: LD_VAR 0 5
54450: PPUSH
54451: CALL_OW 428
54455: PUSH
54456: LD_INT 0
54458: EQUAL
54459: IFFALSE 54483
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
54461: CALL_OW 44
54465: PPUSH
54466: LD_VAR 0 4
54470: PPUSH
54471: LD_VAR 0 5
54475: PPUSH
54476: LD_INT 1
54478: PPUSH
54479: CALL_OW 48
// end ;
54483: LD_VAR 0 6
54487: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
54488: LD_INT 0
54490: PPUSH
54491: PPUSH
// uc_side := your_side ;
54492: LD_ADDR_OWVAR 20
54496: PUSH
54497: LD_OWVAR 2
54501: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
54502: LD_VAR 0 1
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: LD_INT 3
54515: PUSH
54516: LD_INT 4
54518: PUSH
54519: LD_INT 5
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: IN
54529: IFFALSE 54541
// uc_nation := nation_american else
54531: LD_ADDR_OWVAR 21
54535: PUSH
54536: LD_INT 1
54538: ST_TO_ADDR
54539: GO 54584
// if chassis in [ 11 , 12 , 13 , 14 ] then
54541: LD_VAR 0 1
54545: PUSH
54546: LD_INT 11
54548: PUSH
54549: LD_INT 12
54551: PUSH
54552: LD_INT 13
54554: PUSH
54555: LD_INT 14
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: IN
54564: IFFALSE 54576
// uc_nation := nation_arabian else
54566: LD_ADDR_OWVAR 21
54570: PUSH
54571: LD_INT 2
54573: ST_TO_ADDR
54574: GO 54584
// uc_nation := nation_russian ;
54576: LD_ADDR_OWVAR 21
54580: PUSH
54581: LD_INT 3
54583: ST_TO_ADDR
// vc_chassis := chassis ;
54584: LD_ADDR_OWVAR 37
54588: PUSH
54589: LD_VAR 0 1
54593: ST_TO_ADDR
// vc_engine := engine ;
54594: LD_ADDR_OWVAR 39
54598: PUSH
54599: LD_VAR 0 2
54603: ST_TO_ADDR
// vc_control := control ;
54604: LD_ADDR_OWVAR 38
54608: PUSH
54609: LD_VAR 0 3
54613: ST_TO_ADDR
// vc_weapon := weapon ;
54614: LD_ADDR_OWVAR 40
54618: PUSH
54619: LD_VAR 0 4
54623: ST_TO_ADDR
// un := CreateVehicle ;
54624: LD_ADDR_VAR 0 8
54628: PUSH
54629: CALL_OW 45
54633: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
54634: LD_VAR 0 8
54638: PPUSH
54639: LD_INT 0
54641: PPUSH
54642: LD_INT 5
54644: PPUSH
54645: CALL_OW 12
54649: PPUSH
54650: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
54654: LD_VAR 0 8
54658: PPUSH
54659: LD_VAR 0 5
54663: PPUSH
54664: LD_VAR 0 6
54668: PPUSH
54669: LD_INT 1
54671: PPUSH
54672: CALL_OW 48
// end ;
54676: LD_VAR 0 7
54680: RET
// export hInvincible ; every 1 do
54681: GO 54683
54683: DISABLE
// hInvincible := [ ] ;
54684: LD_ADDR_EXP 87
54688: PUSH
54689: EMPTY
54690: ST_TO_ADDR
54691: END
// every 10 do var i ;
54692: GO 54694
54694: DISABLE
54695: LD_INT 0
54697: PPUSH
// begin enable ;
54698: ENABLE
// if not hInvincible then
54699: LD_EXP 87
54703: NOT
54704: IFFALSE 54708
// exit ;
54706: GO 54752
// for i in hInvincible do
54708: LD_ADDR_VAR 0 1
54712: PUSH
54713: LD_EXP 87
54717: PUSH
54718: FOR_IN
54719: IFFALSE 54750
// if GetLives ( i ) < 1000 then
54721: LD_VAR 0 1
54725: PPUSH
54726: CALL_OW 256
54730: PUSH
54731: LD_INT 1000
54733: LESS
54734: IFFALSE 54748
// SetLives ( i , 1000 ) ;
54736: LD_VAR 0 1
54740: PPUSH
54741: LD_INT 1000
54743: PPUSH
54744: CALL_OW 234
54748: GO 54718
54750: POP
54751: POP
// end ;
54752: PPOPN 1
54754: END
// export function hHackInvincible ; var i ; begin
54755: LD_INT 0
54757: PPUSH
54758: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
54759: LD_ADDR_VAR 0 2
54763: PUSH
54764: LD_INT 2
54766: PUSH
54767: LD_INT 21
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 21
54779: PUSH
54780: LD_INT 2
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: LIST
54791: PPUSH
54792: CALL_OW 69
54796: PUSH
54797: FOR_IN
54798: IFFALSE 54859
// if IsSelected ( i ) then
54800: LD_VAR 0 2
54804: PPUSH
54805: CALL_OW 306
54809: IFFALSE 54857
// begin if i in hInvincible then
54811: LD_VAR 0 2
54815: PUSH
54816: LD_EXP 87
54820: IN
54821: IFFALSE 54841
// hInvincible := hInvincible diff i else
54823: LD_ADDR_EXP 87
54827: PUSH
54828: LD_EXP 87
54832: PUSH
54833: LD_VAR 0 2
54837: DIFF
54838: ST_TO_ADDR
54839: GO 54857
// hInvincible := hInvincible union i ;
54841: LD_ADDR_EXP 87
54845: PUSH
54846: LD_EXP 87
54850: PUSH
54851: LD_VAR 0 2
54855: UNION
54856: ST_TO_ADDR
// end ;
54857: GO 54797
54859: POP
54860: POP
// end ;
54861: LD_VAR 0 1
54865: RET
// export function hHackInvisible ; var i , j ; begin
54866: LD_INT 0
54868: PPUSH
54869: PPUSH
54870: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
54871: LD_ADDR_VAR 0 2
54875: PUSH
54876: LD_INT 21
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PPUSH
54886: CALL_OW 69
54890: PUSH
54891: FOR_IN
54892: IFFALSE 54916
// if IsSelected ( i ) then
54894: LD_VAR 0 2
54898: PPUSH
54899: CALL_OW 306
54903: IFFALSE 54914
// ComForceInvisible ( i ) ;
54905: LD_VAR 0 2
54909: PPUSH
54910: CALL_OW 496
54914: GO 54891
54916: POP
54917: POP
// end ;
54918: LD_VAR 0 1
54922: RET
// export function hHackChangeYourSide ; begin
54923: LD_INT 0
54925: PPUSH
// if your_side = 8 then
54926: LD_OWVAR 2
54930: PUSH
54931: LD_INT 8
54933: EQUAL
54934: IFFALSE 54946
// your_side := 0 else
54936: LD_ADDR_OWVAR 2
54940: PUSH
54941: LD_INT 0
54943: ST_TO_ADDR
54944: GO 54960
// your_side := your_side + 1 ;
54946: LD_ADDR_OWVAR 2
54950: PUSH
54951: LD_OWVAR 2
54955: PUSH
54956: LD_INT 1
54958: PLUS
54959: ST_TO_ADDR
// end ;
54960: LD_VAR 0 1
54964: RET
// export function hHackChangeUnitSide ; var i , j ; begin
54965: LD_INT 0
54967: PPUSH
54968: PPUSH
54969: PPUSH
// for i in all_units do
54970: LD_ADDR_VAR 0 2
54974: PUSH
54975: LD_OWVAR 3
54979: PUSH
54980: FOR_IN
54981: IFFALSE 55059
// if IsSelected ( i ) then
54983: LD_VAR 0 2
54987: PPUSH
54988: CALL_OW 306
54992: IFFALSE 55057
// begin j := GetSide ( i ) ;
54994: LD_ADDR_VAR 0 3
54998: PUSH
54999: LD_VAR 0 2
55003: PPUSH
55004: CALL_OW 255
55008: ST_TO_ADDR
// if j = 8 then
55009: LD_VAR 0 3
55013: PUSH
55014: LD_INT 8
55016: EQUAL
55017: IFFALSE 55029
// j := 0 else
55019: LD_ADDR_VAR 0 3
55023: PUSH
55024: LD_INT 0
55026: ST_TO_ADDR
55027: GO 55043
// j := j + 1 ;
55029: LD_ADDR_VAR 0 3
55033: PUSH
55034: LD_VAR 0 3
55038: PUSH
55039: LD_INT 1
55041: PLUS
55042: ST_TO_ADDR
// SetSide ( i , j ) ;
55043: LD_VAR 0 2
55047: PPUSH
55048: LD_VAR 0 3
55052: PPUSH
55053: CALL_OW 235
// end ;
55057: GO 54980
55059: POP
55060: POP
// end ;
55061: LD_VAR 0 1
55065: RET
// export function hHackFog ; begin
55066: LD_INT 0
55068: PPUSH
// FogOff ( true ) ;
55069: LD_INT 1
55071: PPUSH
55072: CALL_OW 344
// end ;
55076: LD_VAR 0 1
55080: RET
// export function hHackTeleport ( unit , x , y ) ; begin
55081: LD_INT 0
55083: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
55084: LD_VAR 0 1
55088: PPUSH
55089: LD_VAR 0 2
55093: PPUSH
55094: LD_VAR 0 3
55098: PPUSH
55099: LD_INT 1
55101: PPUSH
55102: LD_INT 1
55104: PPUSH
55105: CALL_OW 483
// CenterOnXY ( x , y ) ;
55109: LD_VAR 0 2
55113: PPUSH
55114: LD_VAR 0 3
55118: PPUSH
55119: CALL_OW 84
// end ; end_of_file end_of_file
55123: LD_VAR 0 4
55127: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
55128: LD_INT 0
55130: PPUSH
55131: PPUSH
55132: PPUSH
55133: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
55134: LD_VAR 0 1
55138: PPUSH
55139: CALL_OW 264
55143: PUSH
55144: LD_EXP 7
55148: EQUAL
55149: IFFALSE 55221
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55151: LD_INT 68
55153: PPUSH
55154: LD_VAR 0 1
55158: PPUSH
55159: CALL_OW 255
55163: PPUSH
55164: CALL_OW 321
55168: PUSH
55169: LD_INT 2
55171: EQUAL
55172: IFFALSE 55184
// eff := 70 else
55174: LD_ADDR_VAR 0 4
55178: PUSH
55179: LD_INT 70
55181: ST_TO_ADDR
55182: GO 55192
// eff := 30 ;
55184: LD_ADDR_VAR 0 4
55188: PUSH
55189: LD_INT 30
55191: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55192: LD_VAR 0 1
55196: PPUSH
55197: CALL_OW 250
55201: PPUSH
55202: LD_VAR 0 1
55206: PPUSH
55207: CALL_OW 251
55211: PPUSH
55212: LD_VAR 0 4
55216: PPUSH
55217: CALL_OW 495
// end ; end ;
55221: LD_VAR 0 2
55225: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55226: LD_INT 0
55228: PPUSH
// end ;
55229: LD_VAR 0 4
55233: RET
// export function SOS_Command ( cmd ) ; begin
55234: LD_INT 0
55236: PPUSH
// end ;
55237: LD_VAR 0 2
55241: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55242: LD_INT 0
55244: PPUSH
// if cmd = 121 then
55245: LD_VAR 0 1
55249: PUSH
55250: LD_INT 121
55252: EQUAL
55253: IFFALSE 55255
// end ;
55255: LD_VAR 0 6
55259: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55260: LD_INT 0
55262: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55263: LD_VAR 0 1
55267: PUSH
55268: LD_INT 250
55270: EQUAL
55271: PUSH
55272: LD_VAR 0 2
55276: PPUSH
55277: CALL_OW 264
55281: PUSH
55282: LD_EXP 10
55286: EQUAL
55287: AND
55288: IFFALSE 55309
// MinerPlaceMine ( unit , x , y ) ;
55290: LD_VAR 0 2
55294: PPUSH
55295: LD_VAR 0 4
55299: PPUSH
55300: LD_VAR 0 5
55304: PPUSH
55305: CALL 57658 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55309: LD_VAR 0 1
55313: PUSH
55314: LD_INT 251
55316: EQUAL
55317: PUSH
55318: LD_VAR 0 2
55322: PPUSH
55323: CALL_OW 264
55327: PUSH
55328: LD_EXP 10
55332: EQUAL
55333: AND
55334: IFFALSE 55355
// MinerDetonateMine ( unit , x , y ) ;
55336: LD_VAR 0 2
55340: PPUSH
55341: LD_VAR 0 4
55345: PPUSH
55346: LD_VAR 0 5
55350: PPUSH
55351: CALL 57935 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55355: LD_VAR 0 1
55359: PUSH
55360: LD_INT 252
55362: EQUAL
55363: PUSH
55364: LD_VAR 0 2
55368: PPUSH
55369: CALL_OW 264
55373: PUSH
55374: LD_EXP 10
55378: EQUAL
55379: AND
55380: IFFALSE 55401
// MinerCreateMinefield ( unit , x , y ) ;
55382: LD_VAR 0 2
55386: PPUSH
55387: LD_VAR 0 4
55391: PPUSH
55392: LD_VAR 0 5
55396: PPUSH
55397: CALL 58352 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55401: LD_VAR 0 1
55405: PUSH
55406: LD_INT 253
55408: EQUAL
55409: PUSH
55410: LD_VAR 0 2
55414: PPUSH
55415: CALL_OW 257
55419: PUSH
55420: LD_INT 5
55422: EQUAL
55423: AND
55424: IFFALSE 55445
// ComBinocular ( unit , x , y ) ;
55426: LD_VAR 0 2
55430: PPUSH
55431: LD_VAR 0 4
55435: PPUSH
55436: LD_VAR 0 5
55440: PPUSH
55441: CALL 58723 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55445: LD_VAR 0 1
55449: PUSH
55450: LD_INT 254
55452: EQUAL
55453: PUSH
55454: LD_VAR 0 2
55458: PPUSH
55459: CALL_OW 264
55463: PUSH
55464: LD_EXP 5
55468: EQUAL
55469: AND
55470: PUSH
55471: LD_VAR 0 3
55475: PPUSH
55476: CALL_OW 263
55480: PUSH
55481: LD_INT 3
55483: EQUAL
55484: AND
55485: IFFALSE 55501
// HackDestroyVehicle ( unit , selectedUnit ) ;
55487: LD_VAR 0 2
55491: PPUSH
55492: LD_VAR 0 3
55496: PPUSH
55497: CALL 57018 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55501: LD_VAR 0 1
55505: PUSH
55506: LD_INT 255
55508: EQUAL
55509: PUSH
55510: LD_VAR 0 2
55514: PPUSH
55515: CALL_OW 264
55519: PUSH
55520: LD_INT 14
55522: PUSH
55523: LD_INT 53
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: IN
55530: AND
55531: PUSH
55532: LD_VAR 0 4
55536: PPUSH
55537: LD_VAR 0 5
55541: PPUSH
55542: CALL_OW 488
55546: AND
55547: IFFALSE 55571
// CutTreeXYR ( unit , x , y , 12 ) ;
55549: LD_VAR 0 2
55553: PPUSH
55554: LD_VAR 0 4
55558: PPUSH
55559: LD_VAR 0 5
55563: PPUSH
55564: LD_INT 12
55566: PPUSH
55567: CALL 55584 0 4
// end ;
55571: LD_VAR 0 6
55575: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
55576: LD_INT 0
55578: PPUSH
// end ;
55579: LD_VAR 0 4
55583: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55584: LD_INT 0
55586: PPUSH
55587: PPUSH
55588: PPUSH
55589: PPUSH
55590: PPUSH
55591: PPUSH
55592: PPUSH
55593: PPUSH
55594: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
55595: LD_VAR 0 1
55599: NOT
55600: PUSH
55601: LD_VAR 0 2
55605: PPUSH
55606: LD_VAR 0 3
55610: PPUSH
55611: CALL_OW 488
55615: NOT
55616: OR
55617: PUSH
55618: LD_VAR 0 4
55622: NOT
55623: OR
55624: IFFALSE 55628
// exit ;
55626: GO 55968
// list := [ ] ;
55628: LD_ADDR_VAR 0 13
55632: PUSH
55633: EMPTY
55634: ST_TO_ADDR
// if x - r < 0 then
55635: LD_VAR 0 2
55639: PUSH
55640: LD_VAR 0 4
55644: MINUS
55645: PUSH
55646: LD_INT 0
55648: LESS
55649: IFFALSE 55661
// min_x := 0 else
55651: LD_ADDR_VAR 0 7
55655: PUSH
55656: LD_INT 0
55658: ST_TO_ADDR
55659: GO 55677
// min_x := x - r ;
55661: LD_ADDR_VAR 0 7
55665: PUSH
55666: LD_VAR 0 2
55670: PUSH
55671: LD_VAR 0 4
55675: MINUS
55676: ST_TO_ADDR
// if y - r < 0 then
55677: LD_VAR 0 3
55681: PUSH
55682: LD_VAR 0 4
55686: MINUS
55687: PUSH
55688: LD_INT 0
55690: LESS
55691: IFFALSE 55703
// min_y := 0 else
55693: LD_ADDR_VAR 0 8
55697: PUSH
55698: LD_INT 0
55700: ST_TO_ADDR
55701: GO 55719
// min_y := y - r ;
55703: LD_ADDR_VAR 0 8
55707: PUSH
55708: LD_VAR 0 3
55712: PUSH
55713: LD_VAR 0 4
55717: MINUS
55718: ST_TO_ADDR
// max_x := x + r ;
55719: LD_ADDR_VAR 0 9
55723: PUSH
55724: LD_VAR 0 2
55728: PUSH
55729: LD_VAR 0 4
55733: PLUS
55734: ST_TO_ADDR
// max_y := y + r ;
55735: LD_ADDR_VAR 0 10
55739: PUSH
55740: LD_VAR 0 3
55744: PUSH
55745: LD_VAR 0 4
55749: PLUS
55750: ST_TO_ADDR
// for _x = min_x to max_x do
55751: LD_ADDR_VAR 0 11
55755: PUSH
55756: DOUBLE
55757: LD_VAR 0 7
55761: DEC
55762: ST_TO_ADDR
55763: LD_VAR 0 9
55767: PUSH
55768: FOR_TO
55769: IFFALSE 55886
// for _y = min_y to max_y do
55771: LD_ADDR_VAR 0 12
55775: PUSH
55776: DOUBLE
55777: LD_VAR 0 8
55781: DEC
55782: ST_TO_ADDR
55783: LD_VAR 0 10
55787: PUSH
55788: FOR_TO
55789: IFFALSE 55882
// begin if not ValidHex ( _x , _y ) then
55791: LD_VAR 0 11
55795: PPUSH
55796: LD_VAR 0 12
55800: PPUSH
55801: CALL_OW 488
55805: NOT
55806: IFFALSE 55810
// continue ;
55808: GO 55788
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55810: LD_VAR 0 11
55814: PPUSH
55815: LD_VAR 0 12
55819: PPUSH
55820: CALL_OW 351
55824: PUSH
55825: LD_VAR 0 11
55829: PPUSH
55830: LD_VAR 0 12
55834: PPUSH
55835: CALL_OW 554
55839: AND
55840: IFFALSE 55880
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55842: LD_ADDR_VAR 0 13
55846: PUSH
55847: LD_VAR 0 13
55851: PPUSH
55852: LD_VAR 0 13
55856: PUSH
55857: LD_INT 1
55859: PLUS
55860: PPUSH
55861: LD_VAR 0 11
55865: PUSH
55866: LD_VAR 0 12
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PPUSH
55875: CALL_OW 2
55879: ST_TO_ADDR
// end ;
55880: GO 55788
55882: POP
55883: POP
55884: GO 55768
55886: POP
55887: POP
// if not list then
55888: LD_VAR 0 13
55892: NOT
55893: IFFALSE 55897
// exit ;
55895: GO 55968
// for i in list do
55897: LD_ADDR_VAR 0 6
55901: PUSH
55902: LD_VAR 0 13
55906: PUSH
55907: FOR_IN
55908: IFFALSE 55966
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55910: LD_VAR 0 1
55914: PPUSH
55915: LD_STRING M
55917: PUSH
55918: LD_VAR 0 6
55922: PUSH
55923: LD_INT 1
55925: ARRAY
55926: PUSH
55927: LD_VAR 0 6
55931: PUSH
55932: LD_INT 2
55934: ARRAY
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: PUSH
55957: EMPTY
55958: LIST
55959: PPUSH
55960: CALL_OW 447
55964: GO 55907
55966: POP
55967: POP
// end ;
55968: LD_VAR 0 5
55972: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55973: LD_EXP 90
55977: NOT
55978: IFFALSE 56028
55980: GO 55982
55982: DISABLE
// begin initHack := true ;
55983: LD_ADDR_EXP 90
55987: PUSH
55988: LD_INT 1
55990: ST_TO_ADDR
// hackTanks := [ ] ;
55991: LD_ADDR_EXP 91
55995: PUSH
55996: EMPTY
55997: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55998: LD_ADDR_EXP 92
56002: PUSH
56003: EMPTY
56004: ST_TO_ADDR
// hackLimit := 3 ;
56005: LD_ADDR_EXP 93
56009: PUSH
56010: LD_INT 3
56012: ST_TO_ADDR
// hackDist := 12 ;
56013: LD_ADDR_EXP 94
56017: PUSH
56018: LD_INT 12
56020: ST_TO_ADDR
// hackCounter := [ ] ;
56021: LD_ADDR_EXP 95
56025: PUSH
56026: EMPTY
56027: ST_TO_ADDR
// end ;
56028: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56029: LD_EXP 90
56033: PUSH
56034: LD_INT 34
56036: PUSH
56037: LD_EXP 5
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PPUSH
56046: CALL_OW 69
56050: AND
56051: IFFALSE 56306
56053: GO 56055
56055: DISABLE
56056: LD_INT 0
56058: PPUSH
56059: PPUSH
// begin enable ;
56060: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56061: LD_ADDR_VAR 0 1
56065: PUSH
56066: LD_INT 34
56068: PUSH
56069: LD_EXP 5
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PPUSH
56078: CALL_OW 69
56082: PUSH
56083: FOR_IN
56084: IFFALSE 56304
// begin if not i in hackTanks then
56086: LD_VAR 0 1
56090: PUSH
56091: LD_EXP 91
56095: IN
56096: NOT
56097: IFFALSE 56180
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56099: LD_ADDR_EXP 91
56103: PUSH
56104: LD_EXP 91
56108: PPUSH
56109: LD_EXP 91
56113: PUSH
56114: LD_INT 1
56116: PLUS
56117: PPUSH
56118: LD_VAR 0 1
56122: PPUSH
56123: CALL_OW 1
56127: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56128: LD_ADDR_EXP 92
56132: PUSH
56133: LD_EXP 92
56137: PPUSH
56138: LD_EXP 92
56142: PUSH
56143: LD_INT 1
56145: PLUS
56146: PPUSH
56147: EMPTY
56148: PPUSH
56149: CALL_OW 1
56153: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56154: LD_ADDR_EXP 95
56158: PUSH
56159: LD_EXP 95
56163: PPUSH
56164: LD_EXP 95
56168: PUSH
56169: LD_INT 1
56171: PLUS
56172: PPUSH
56173: EMPTY
56174: PPUSH
56175: CALL_OW 1
56179: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56180: LD_VAR 0 1
56184: PPUSH
56185: CALL_OW 302
56189: NOT
56190: IFFALSE 56203
// begin HackUnlinkAll ( i ) ;
56192: LD_VAR 0 1
56196: PPUSH
56197: CALL 56309 0 1
// continue ;
56201: GO 56083
// end ; HackCheckCapturedStatus ( i ) ;
56203: LD_VAR 0 1
56207: PPUSH
56208: CALL 56752 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56212: LD_ADDR_VAR 0 2
56216: PUSH
56217: LD_INT 81
56219: PUSH
56220: LD_VAR 0 1
56224: PPUSH
56225: CALL_OW 255
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 33
56236: PUSH
56237: LD_INT 3
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 91
56246: PUSH
56247: LD_VAR 0 1
56251: PUSH
56252: LD_EXP 94
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 50
56264: PUSH
56265: EMPTY
56266: LIST
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: PPUSH
56274: CALL_OW 69
56278: ST_TO_ADDR
// if not tmp then
56279: LD_VAR 0 2
56283: NOT
56284: IFFALSE 56288
// continue ;
56286: GO 56083
// HackLink ( i , tmp ) ;
56288: LD_VAR 0 1
56292: PPUSH
56293: LD_VAR 0 2
56297: PPUSH
56298: CALL 56445 0 2
// end ;
56302: GO 56083
56304: POP
56305: POP
// end ;
56306: PPOPN 2
56308: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56309: LD_INT 0
56311: PPUSH
56312: PPUSH
56313: PPUSH
// if not hack in hackTanks then
56314: LD_VAR 0 1
56318: PUSH
56319: LD_EXP 91
56323: IN
56324: NOT
56325: IFFALSE 56329
// exit ;
56327: GO 56440
// index := GetElementIndex ( hackTanks , hack ) ;
56329: LD_ADDR_VAR 0 4
56333: PUSH
56334: LD_EXP 91
56338: PPUSH
56339: LD_VAR 0 1
56343: PPUSH
56344: CALL 6050 0 2
56348: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56349: LD_EXP 92
56353: PUSH
56354: LD_VAR 0 4
56358: ARRAY
56359: IFFALSE 56440
// begin for i in hackTanksCaptured [ index ] do
56361: LD_ADDR_VAR 0 3
56365: PUSH
56366: LD_EXP 92
56370: PUSH
56371: LD_VAR 0 4
56375: ARRAY
56376: PUSH
56377: FOR_IN
56378: IFFALSE 56404
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56380: LD_VAR 0 3
56384: PUSH
56385: LD_INT 1
56387: ARRAY
56388: PPUSH
56389: LD_VAR 0 3
56393: PUSH
56394: LD_INT 2
56396: ARRAY
56397: PPUSH
56398: CALL_OW 235
56402: GO 56377
56404: POP
56405: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56406: LD_ADDR_EXP 92
56410: PUSH
56411: LD_EXP 92
56415: PPUSH
56416: LD_VAR 0 4
56420: PPUSH
56421: EMPTY
56422: PPUSH
56423: CALL_OW 1
56427: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56428: LD_VAR 0 1
56432: PPUSH
56433: LD_INT 0
56435: PPUSH
56436: CALL_OW 505
// end ; end ;
56440: LD_VAR 0 2
56444: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56445: LD_INT 0
56447: PPUSH
56448: PPUSH
56449: PPUSH
// if not hack in hackTanks or not vehicles then
56450: LD_VAR 0 1
56454: PUSH
56455: LD_EXP 91
56459: IN
56460: NOT
56461: PUSH
56462: LD_VAR 0 2
56466: NOT
56467: OR
56468: IFFALSE 56472
// exit ;
56470: GO 56747
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56472: LD_ADDR_VAR 0 2
56476: PUSH
56477: LD_VAR 0 1
56481: PPUSH
56482: LD_VAR 0 2
56486: PPUSH
56487: LD_INT 1
56489: PPUSH
56490: LD_INT 1
56492: PPUSH
56493: CALL 6700 0 4
56497: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56498: LD_ADDR_VAR 0 5
56502: PUSH
56503: LD_EXP 91
56507: PPUSH
56508: LD_VAR 0 1
56512: PPUSH
56513: CALL 6050 0 2
56517: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56518: LD_EXP 92
56522: PUSH
56523: LD_VAR 0 5
56527: ARRAY
56528: PUSH
56529: LD_EXP 93
56533: LESS
56534: IFFALSE 56723
// begin for i := 1 to vehicles do
56536: LD_ADDR_VAR 0 4
56540: PUSH
56541: DOUBLE
56542: LD_INT 1
56544: DEC
56545: ST_TO_ADDR
56546: LD_VAR 0 2
56550: PUSH
56551: FOR_TO
56552: IFFALSE 56721
// begin if hackTanksCaptured [ index ] = hackLimit then
56554: LD_EXP 92
56558: PUSH
56559: LD_VAR 0 5
56563: ARRAY
56564: PUSH
56565: LD_EXP 93
56569: EQUAL
56570: IFFALSE 56574
// break ;
56572: GO 56721
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56574: LD_ADDR_EXP 95
56578: PUSH
56579: LD_EXP 95
56583: PPUSH
56584: LD_VAR 0 5
56588: PPUSH
56589: LD_EXP 95
56593: PUSH
56594: LD_VAR 0 5
56598: ARRAY
56599: PUSH
56600: LD_INT 1
56602: PLUS
56603: PPUSH
56604: CALL_OW 1
56608: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56609: LD_ADDR_EXP 92
56613: PUSH
56614: LD_EXP 92
56618: PPUSH
56619: LD_VAR 0 5
56623: PUSH
56624: LD_EXP 92
56628: PUSH
56629: LD_VAR 0 5
56633: ARRAY
56634: PUSH
56635: LD_INT 1
56637: PLUS
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PPUSH
56643: LD_VAR 0 2
56647: PUSH
56648: LD_VAR 0 4
56652: ARRAY
56653: PUSH
56654: LD_VAR 0 2
56658: PUSH
56659: LD_VAR 0 4
56663: ARRAY
56664: PPUSH
56665: CALL_OW 255
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PPUSH
56674: CALL 6265 0 3
56678: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56679: LD_VAR 0 2
56683: PUSH
56684: LD_VAR 0 4
56688: ARRAY
56689: PPUSH
56690: LD_VAR 0 1
56694: PPUSH
56695: CALL_OW 255
56699: PPUSH
56700: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56704: LD_VAR 0 2
56708: PUSH
56709: LD_VAR 0 4
56713: ARRAY
56714: PPUSH
56715: CALL_OW 141
// end ;
56719: GO 56551
56721: POP
56722: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56723: LD_VAR 0 1
56727: PPUSH
56728: LD_EXP 92
56732: PUSH
56733: LD_VAR 0 5
56737: ARRAY
56738: PUSH
56739: LD_INT 0
56741: PLUS
56742: PPUSH
56743: CALL_OW 505
// end ;
56747: LD_VAR 0 3
56751: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56752: LD_INT 0
56754: PPUSH
56755: PPUSH
56756: PPUSH
56757: PPUSH
// if not hack in hackTanks then
56758: LD_VAR 0 1
56762: PUSH
56763: LD_EXP 91
56767: IN
56768: NOT
56769: IFFALSE 56773
// exit ;
56771: GO 57013
// index := GetElementIndex ( hackTanks , hack ) ;
56773: LD_ADDR_VAR 0 4
56777: PUSH
56778: LD_EXP 91
56782: PPUSH
56783: LD_VAR 0 1
56787: PPUSH
56788: CALL 6050 0 2
56792: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56793: LD_ADDR_VAR 0 3
56797: PUSH
56798: DOUBLE
56799: LD_EXP 92
56803: PUSH
56804: LD_VAR 0 4
56808: ARRAY
56809: INC
56810: ST_TO_ADDR
56811: LD_INT 1
56813: PUSH
56814: FOR_DOWNTO
56815: IFFALSE 56987
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56817: LD_ADDR_VAR 0 5
56821: PUSH
56822: LD_EXP 92
56826: PUSH
56827: LD_VAR 0 4
56831: ARRAY
56832: PUSH
56833: LD_VAR 0 3
56837: ARRAY
56838: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56839: LD_VAR 0 5
56843: PUSH
56844: LD_INT 1
56846: ARRAY
56847: PPUSH
56848: CALL_OW 302
56852: NOT
56853: PUSH
56854: LD_VAR 0 5
56858: PUSH
56859: LD_INT 1
56861: ARRAY
56862: PPUSH
56863: CALL_OW 255
56867: PUSH
56868: LD_VAR 0 1
56872: PPUSH
56873: CALL_OW 255
56877: NONEQUAL
56878: OR
56879: IFFALSE 56985
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56881: LD_VAR 0 5
56885: PUSH
56886: LD_INT 1
56888: ARRAY
56889: PPUSH
56890: CALL_OW 305
56894: PUSH
56895: LD_VAR 0 5
56899: PUSH
56900: LD_INT 1
56902: ARRAY
56903: PPUSH
56904: CALL_OW 255
56908: PUSH
56909: LD_VAR 0 1
56913: PPUSH
56914: CALL_OW 255
56918: EQUAL
56919: AND
56920: IFFALSE 56944
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56922: LD_VAR 0 5
56926: PUSH
56927: LD_INT 1
56929: ARRAY
56930: PPUSH
56931: LD_VAR 0 5
56935: PUSH
56936: LD_INT 2
56938: ARRAY
56939: PPUSH
56940: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56944: LD_ADDR_EXP 92
56948: PUSH
56949: LD_EXP 92
56953: PPUSH
56954: LD_VAR 0 4
56958: PPUSH
56959: LD_EXP 92
56963: PUSH
56964: LD_VAR 0 4
56968: ARRAY
56969: PPUSH
56970: LD_VAR 0 3
56974: PPUSH
56975: CALL_OW 3
56979: PPUSH
56980: CALL_OW 1
56984: ST_TO_ADDR
// end ; end ;
56985: GO 56814
56987: POP
56988: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56989: LD_VAR 0 1
56993: PPUSH
56994: LD_EXP 92
56998: PUSH
56999: LD_VAR 0 4
57003: ARRAY
57004: PUSH
57005: LD_INT 0
57007: PLUS
57008: PPUSH
57009: CALL_OW 505
// end ;
57013: LD_VAR 0 2
57017: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57018: LD_INT 0
57020: PPUSH
57021: PPUSH
57022: PPUSH
57023: PPUSH
// if not hack in hackTanks then
57024: LD_VAR 0 1
57028: PUSH
57029: LD_EXP 91
57033: IN
57034: NOT
57035: IFFALSE 57039
// exit ;
57037: GO 57124
// index := GetElementIndex ( hackTanks , hack ) ;
57039: LD_ADDR_VAR 0 5
57043: PUSH
57044: LD_EXP 91
57048: PPUSH
57049: LD_VAR 0 1
57053: PPUSH
57054: CALL 6050 0 2
57058: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57059: LD_ADDR_VAR 0 4
57063: PUSH
57064: DOUBLE
57065: LD_INT 1
57067: DEC
57068: ST_TO_ADDR
57069: LD_EXP 92
57073: PUSH
57074: LD_VAR 0 5
57078: ARRAY
57079: PUSH
57080: FOR_TO
57081: IFFALSE 57122
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57083: LD_EXP 92
57087: PUSH
57088: LD_VAR 0 5
57092: ARRAY
57093: PUSH
57094: LD_VAR 0 4
57098: ARRAY
57099: PUSH
57100: LD_INT 1
57102: ARRAY
57103: PUSH
57104: LD_VAR 0 2
57108: EQUAL
57109: IFFALSE 57120
// KillUnit ( vehicle ) ;
57111: LD_VAR 0 2
57115: PPUSH
57116: CALL_OW 66
57120: GO 57080
57122: POP
57123: POP
// end ;
57124: LD_VAR 0 3
57128: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57129: LD_EXP 96
57133: NOT
57134: IFFALSE 57169
57136: GO 57138
57138: DISABLE
// begin initMiner := true ;
57139: LD_ADDR_EXP 96
57143: PUSH
57144: LD_INT 1
57146: ST_TO_ADDR
// minersList := [ ] ;
57147: LD_ADDR_EXP 97
57151: PUSH
57152: EMPTY
57153: ST_TO_ADDR
// minerMinesList := [ ] ;
57154: LD_ADDR_EXP 98
57158: PUSH
57159: EMPTY
57160: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57161: LD_ADDR_EXP 99
57165: PUSH
57166: LD_INT 5
57168: ST_TO_ADDR
// end ;
57169: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57170: LD_EXP 96
57174: PUSH
57175: LD_INT 34
57177: PUSH
57178: LD_EXP 10
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PPUSH
57187: CALL_OW 69
57191: AND
57192: IFFALSE 57655
57194: GO 57196
57196: DISABLE
57197: LD_INT 0
57199: PPUSH
57200: PPUSH
57201: PPUSH
57202: PPUSH
// begin enable ;
57203: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57204: LD_ADDR_VAR 0 1
57208: PUSH
57209: LD_INT 34
57211: PUSH
57212: LD_EXP 10
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PPUSH
57221: CALL_OW 69
57225: PUSH
57226: FOR_IN
57227: IFFALSE 57299
// begin if not i in minersList then
57229: LD_VAR 0 1
57233: PUSH
57234: LD_EXP 97
57238: IN
57239: NOT
57240: IFFALSE 57297
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57242: LD_ADDR_EXP 97
57246: PUSH
57247: LD_EXP 97
57251: PPUSH
57252: LD_EXP 97
57256: PUSH
57257: LD_INT 1
57259: PLUS
57260: PPUSH
57261: LD_VAR 0 1
57265: PPUSH
57266: CALL_OW 1
57270: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57271: LD_ADDR_EXP 98
57275: PUSH
57276: LD_EXP 98
57280: PPUSH
57281: LD_EXP 98
57285: PUSH
57286: LD_INT 1
57288: PLUS
57289: PPUSH
57290: EMPTY
57291: PPUSH
57292: CALL_OW 1
57296: ST_TO_ADDR
// end end ;
57297: GO 57226
57299: POP
57300: POP
// for i := minerMinesList downto 1 do
57301: LD_ADDR_VAR 0 1
57305: PUSH
57306: DOUBLE
57307: LD_EXP 98
57311: INC
57312: ST_TO_ADDR
57313: LD_INT 1
57315: PUSH
57316: FOR_DOWNTO
57317: IFFALSE 57653
// begin if IsLive ( minersList [ i ] ) then
57319: LD_EXP 97
57323: PUSH
57324: LD_VAR 0 1
57328: ARRAY
57329: PPUSH
57330: CALL_OW 300
57334: IFFALSE 57362
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57336: LD_EXP 97
57340: PUSH
57341: LD_VAR 0 1
57345: ARRAY
57346: PPUSH
57347: LD_EXP 98
57351: PUSH
57352: LD_VAR 0 1
57356: ARRAY
57357: PPUSH
57358: CALL_OW 505
// if not minerMinesList [ i ] then
57362: LD_EXP 98
57366: PUSH
57367: LD_VAR 0 1
57371: ARRAY
57372: NOT
57373: IFFALSE 57377
// continue ;
57375: GO 57316
// for j := minerMinesList [ i ] downto 1 do
57377: LD_ADDR_VAR 0 2
57381: PUSH
57382: DOUBLE
57383: LD_EXP 98
57387: PUSH
57388: LD_VAR 0 1
57392: ARRAY
57393: INC
57394: ST_TO_ADDR
57395: LD_INT 1
57397: PUSH
57398: FOR_DOWNTO
57399: IFFALSE 57649
// begin side := GetSide ( minersList [ i ] ) ;
57401: LD_ADDR_VAR 0 3
57405: PUSH
57406: LD_EXP 97
57410: PUSH
57411: LD_VAR 0 1
57415: ARRAY
57416: PPUSH
57417: CALL_OW 255
57421: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57422: LD_ADDR_VAR 0 4
57426: PUSH
57427: LD_EXP 98
57431: PUSH
57432: LD_VAR 0 1
57436: ARRAY
57437: PUSH
57438: LD_VAR 0 2
57442: ARRAY
57443: PUSH
57444: LD_INT 1
57446: ARRAY
57447: PPUSH
57448: LD_EXP 98
57452: PUSH
57453: LD_VAR 0 1
57457: ARRAY
57458: PUSH
57459: LD_VAR 0 2
57463: ARRAY
57464: PUSH
57465: LD_INT 2
57467: ARRAY
57468: PPUSH
57469: CALL_OW 428
57473: ST_TO_ADDR
// if not tmp then
57474: LD_VAR 0 4
57478: NOT
57479: IFFALSE 57483
// continue ;
57481: GO 57398
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57483: LD_VAR 0 4
57487: PUSH
57488: LD_INT 81
57490: PUSH
57491: LD_VAR 0 3
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PPUSH
57500: CALL_OW 69
57504: IN
57505: PUSH
57506: LD_EXP 98
57510: PUSH
57511: LD_VAR 0 1
57515: ARRAY
57516: PUSH
57517: LD_VAR 0 2
57521: ARRAY
57522: PUSH
57523: LD_INT 1
57525: ARRAY
57526: PPUSH
57527: LD_EXP 98
57531: PUSH
57532: LD_VAR 0 1
57536: ARRAY
57537: PUSH
57538: LD_VAR 0 2
57542: ARRAY
57543: PUSH
57544: LD_INT 2
57546: ARRAY
57547: PPUSH
57548: CALL_OW 458
57552: AND
57553: IFFALSE 57647
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57555: LD_EXP 98
57559: PUSH
57560: LD_VAR 0 1
57564: ARRAY
57565: PUSH
57566: LD_VAR 0 2
57570: ARRAY
57571: PUSH
57572: LD_INT 1
57574: ARRAY
57575: PPUSH
57576: LD_EXP 98
57580: PUSH
57581: LD_VAR 0 1
57585: ARRAY
57586: PUSH
57587: LD_VAR 0 2
57591: ARRAY
57592: PUSH
57593: LD_INT 2
57595: ARRAY
57596: PPUSH
57597: LD_VAR 0 3
57601: PPUSH
57602: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57606: LD_ADDR_EXP 98
57610: PUSH
57611: LD_EXP 98
57615: PPUSH
57616: LD_VAR 0 1
57620: PPUSH
57621: LD_EXP 98
57625: PUSH
57626: LD_VAR 0 1
57630: ARRAY
57631: PPUSH
57632: LD_VAR 0 2
57636: PPUSH
57637: CALL_OW 3
57641: PPUSH
57642: CALL_OW 1
57646: ST_TO_ADDR
// end ; end ;
57647: GO 57398
57649: POP
57650: POP
// end ;
57651: GO 57316
57653: POP
57654: POP
// end ;
57655: PPOPN 4
57657: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57658: LD_INT 0
57660: PPUSH
57661: PPUSH
// result := false ;
57662: LD_ADDR_VAR 0 4
57666: PUSH
57667: LD_INT 0
57669: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57670: LD_VAR 0 1
57674: PPUSH
57675: CALL_OW 264
57679: PUSH
57680: LD_EXP 10
57684: EQUAL
57685: NOT
57686: IFFALSE 57690
// exit ;
57688: GO 57930
// index := GetElementIndex ( minersList , unit ) ;
57690: LD_ADDR_VAR 0 5
57694: PUSH
57695: LD_EXP 97
57699: PPUSH
57700: LD_VAR 0 1
57704: PPUSH
57705: CALL 6050 0 2
57709: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57710: LD_EXP 98
57714: PUSH
57715: LD_VAR 0 5
57719: ARRAY
57720: PUSH
57721: LD_EXP 99
57725: GREATEREQUAL
57726: IFFALSE 57730
// exit ;
57728: GO 57930
// ComMoveXY ( unit , x , y ) ;
57730: LD_VAR 0 1
57734: PPUSH
57735: LD_VAR 0 2
57739: PPUSH
57740: LD_VAR 0 3
57744: PPUSH
57745: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57749: LD_INT 35
57751: PPUSH
57752: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57756: LD_VAR 0 1
57760: PPUSH
57761: LD_VAR 0 2
57765: PPUSH
57766: LD_VAR 0 3
57770: PPUSH
57771: CALL 36823 0 3
57775: NOT
57776: PUSH
57777: LD_VAR 0 1
57781: PPUSH
57782: CALL_OW 314
57786: AND
57787: IFFALSE 57791
// exit ;
57789: GO 57930
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57791: LD_VAR 0 2
57795: PPUSH
57796: LD_VAR 0 3
57800: PPUSH
57801: CALL_OW 428
57805: PUSH
57806: LD_VAR 0 1
57810: EQUAL
57811: PUSH
57812: LD_VAR 0 1
57816: PPUSH
57817: CALL_OW 314
57821: NOT
57822: AND
57823: IFFALSE 57749
// PlaySoundXY ( x , y , PlantMine ) ;
57825: LD_VAR 0 2
57829: PPUSH
57830: LD_VAR 0 3
57834: PPUSH
57835: LD_STRING PlantMine
57837: PPUSH
57838: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57842: LD_VAR 0 2
57846: PPUSH
57847: LD_VAR 0 3
57851: PPUSH
57852: LD_VAR 0 1
57856: PPUSH
57857: CALL_OW 255
57861: PPUSH
57862: LD_INT 0
57864: PPUSH
57865: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57869: LD_ADDR_EXP 98
57873: PUSH
57874: LD_EXP 98
57878: PPUSH
57879: LD_VAR 0 5
57883: PUSH
57884: LD_EXP 98
57888: PUSH
57889: LD_VAR 0 5
57893: ARRAY
57894: PUSH
57895: LD_INT 1
57897: PLUS
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PPUSH
57903: LD_VAR 0 2
57907: PUSH
57908: LD_VAR 0 3
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PPUSH
57917: CALL 6265 0 3
57921: ST_TO_ADDR
// result := true ;
57922: LD_ADDR_VAR 0 4
57926: PUSH
57927: LD_INT 1
57929: ST_TO_ADDR
// end ;
57930: LD_VAR 0 4
57934: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57935: LD_INT 0
57937: PPUSH
57938: PPUSH
57939: PPUSH
// if not unit in minersList then
57940: LD_VAR 0 1
57944: PUSH
57945: LD_EXP 97
57949: IN
57950: NOT
57951: IFFALSE 57955
// exit ;
57953: GO 58347
// index := GetElementIndex ( minersList , unit ) ;
57955: LD_ADDR_VAR 0 6
57959: PUSH
57960: LD_EXP 97
57964: PPUSH
57965: LD_VAR 0 1
57969: PPUSH
57970: CALL 6050 0 2
57974: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57975: LD_ADDR_VAR 0 5
57979: PUSH
57980: DOUBLE
57981: LD_EXP 98
57985: PUSH
57986: LD_VAR 0 6
57990: ARRAY
57991: INC
57992: ST_TO_ADDR
57993: LD_INT 1
57995: PUSH
57996: FOR_DOWNTO
57997: IFFALSE 58158
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57999: LD_EXP 98
58003: PUSH
58004: LD_VAR 0 6
58008: ARRAY
58009: PUSH
58010: LD_VAR 0 5
58014: ARRAY
58015: PUSH
58016: LD_INT 1
58018: ARRAY
58019: PUSH
58020: LD_VAR 0 2
58024: EQUAL
58025: PUSH
58026: LD_EXP 98
58030: PUSH
58031: LD_VAR 0 6
58035: ARRAY
58036: PUSH
58037: LD_VAR 0 5
58041: ARRAY
58042: PUSH
58043: LD_INT 2
58045: ARRAY
58046: PUSH
58047: LD_VAR 0 3
58051: EQUAL
58052: AND
58053: IFFALSE 58156
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58055: LD_EXP 98
58059: PUSH
58060: LD_VAR 0 6
58064: ARRAY
58065: PUSH
58066: LD_VAR 0 5
58070: ARRAY
58071: PUSH
58072: LD_INT 1
58074: ARRAY
58075: PPUSH
58076: LD_EXP 98
58080: PUSH
58081: LD_VAR 0 6
58085: ARRAY
58086: PUSH
58087: LD_VAR 0 5
58091: ARRAY
58092: PUSH
58093: LD_INT 2
58095: ARRAY
58096: PPUSH
58097: LD_VAR 0 1
58101: PPUSH
58102: CALL_OW 255
58106: PPUSH
58107: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58111: LD_ADDR_EXP 98
58115: PUSH
58116: LD_EXP 98
58120: PPUSH
58121: LD_VAR 0 6
58125: PPUSH
58126: LD_EXP 98
58130: PUSH
58131: LD_VAR 0 6
58135: ARRAY
58136: PPUSH
58137: LD_VAR 0 5
58141: PPUSH
58142: CALL_OW 3
58146: PPUSH
58147: CALL_OW 1
58151: ST_TO_ADDR
// exit ;
58152: POP
58153: POP
58154: GO 58347
// end ; end ;
58156: GO 57996
58158: POP
58159: POP
// for i := minerMinesList [ index ] downto 1 do
58160: LD_ADDR_VAR 0 5
58164: PUSH
58165: DOUBLE
58166: LD_EXP 98
58170: PUSH
58171: LD_VAR 0 6
58175: ARRAY
58176: INC
58177: ST_TO_ADDR
58178: LD_INT 1
58180: PUSH
58181: FOR_DOWNTO
58182: IFFALSE 58345
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58184: LD_EXP 98
58188: PUSH
58189: LD_VAR 0 6
58193: ARRAY
58194: PUSH
58195: LD_VAR 0 5
58199: ARRAY
58200: PUSH
58201: LD_INT 1
58203: ARRAY
58204: PPUSH
58205: LD_EXP 98
58209: PUSH
58210: LD_VAR 0 6
58214: ARRAY
58215: PUSH
58216: LD_VAR 0 5
58220: ARRAY
58221: PUSH
58222: LD_INT 2
58224: ARRAY
58225: PPUSH
58226: LD_VAR 0 2
58230: PPUSH
58231: LD_VAR 0 3
58235: PPUSH
58236: CALL_OW 298
58240: PUSH
58241: LD_INT 6
58243: LESS
58244: IFFALSE 58343
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58246: LD_EXP 98
58250: PUSH
58251: LD_VAR 0 6
58255: ARRAY
58256: PUSH
58257: LD_VAR 0 5
58261: ARRAY
58262: PUSH
58263: LD_INT 1
58265: ARRAY
58266: PPUSH
58267: LD_EXP 98
58271: PUSH
58272: LD_VAR 0 6
58276: ARRAY
58277: PUSH
58278: LD_VAR 0 5
58282: ARRAY
58283: PUSH
58284: LD_INT 2
58286: ARRAY
58287: PPUSH
58288: LD_VAR 0 1
58292: PPUSH
58293: CALL_OW 255
58297: PPUSH
58298: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58302: LD_ADDR_EXP 98
58306: PUSH
58307: LD_EXP 98
58311: PPUSH
58312: LD_VAR 0 6
58316: PPUSH
58317: LD_EXP 98
58321: PUSH
58322: LD_VAR 0 6
58326: ARRAY
58327: PPUSH
58328: LD_VAR 0 5
58332: PPUSH
58333: CALL_OW 3
58337: PPUSH
58338: CALL_OW 1
58342: ST_TO_ADDR
// end ; end ;
58343: GO 58181
58345: POP
58346: POP
// end ;
58347: LD_VAR 0 4
58351: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58352: LD_INT 0
58354: PPUSH
58355: PPUSH
58356: PPUSH
58357: PPUSH
58358: PPUSH
58359: PPUSH
58360: PPUSH
58361: PPUSH
58362: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58363: LD_VAR 0 1
58367: PPUSH
58368: CALL_OW 264
58372: PUSH
58373: LD_EXP 10
58377: EQUAL
58378: NOT
58379: PUSH
58380: LD_VAR 0 1
58384: PUSH
58385: LD_EXP 97
58389: IN
58390: NOT
58391: OR
58392: IFFALSE 58396
// exit ;
58394: GO 58718
// index := GetElementIndex ( minersList , unit ) ;
58396: LD_ADDR_VAR 0 6
58400: PUSH
58401: LD_EXP 97
58405: PPUSH
58406: LD_VAR 0 1
58410: PPUSH
58411: CALL 6050 0 2
58415: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58416: LD_ADDR_VAR 0 8
58420: PUSH
58421: LD_EXP 99
58425: PUSH
58426: LD_EXP 98
58430: PUSH
58431: LD_VAR 0 6
58435: ARRAY
58436: MINUS
58437: ST_TO_ADDR
// if not minesFreeAmount then
58438: LD_VAR 0 8
58442: NOT
58443: IFFALSE 58447
// exit ;
58445: GO 58718
// tmp := [ ] ;
58447: LD_ADDR_VAR 0 7
58451: PUSH
58452: EMPTY
58453: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58454: LD_ADDR_VAR 0 5
58458: PUSH
58459: DOUBLE
58460: LD_INT 1
58462: DEC
58463: ST_TO_ADDR
58464: LD_VAR 0 8
58468: PUSH
58469: FOR_TO
58470: IFFALSE 58665
// begin _d := rand ( 0 , 5 ) ;
58472: LD_ADDR_VAR 0 11
58476: PUSH
58477: LD_INT 0
58479: PPUSH
58480: LD_INT 5
58482: PPUSH
58483: CALL_OW 12
58487: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58488: LD_ADDR_VAR 0 12
58492: PUSH
58493: LD_INT 2
58495: PPUSH
58496: LD_INT 6
58498: PPUSH
58499: CALL_OW 12
58503: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58504: LD_ADDR_VAR 0 9
58508: PUSH
58509: LD_VAR 0 2
58513: PPUSH
58514: LD_VAR 0 11
58518: PPUSH
58519: LD_VAR 0 12
58523: PPUSH
58524: CALL_OW 272
58528: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58529: LD_ADDR_VAR 0 10
58533: PUSH
58534: LD_VAR 0 3
58538: PPUSH
58539: LD_VAR 0 11
58543: PPUSH
58544: LD_VAR 0 12
58548: PPUSH
58549: CALL_OW 273
58553: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58554: LD_VAR 0 9
58558: PPUSH
58559: LD_VAR 0 10
58563: PPUSH
58564: CALL_OW 488
58568: PUSH
58569: LD_VAR 0 9
58573: PUSH
58574: LD_VAR 0 10
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_VAR 0 7
58587: IN
58588: NOT
58589: AND
58590: PUSH
58591: LD_VAR 0 9
58595: PPUSH
58596: LD_VAR 0 10
58600: PPUSH
58601: CALL_OW 458
58605: NOT
58606: AND
58607: IFFALSE 58649
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58609: LD_ADDR_VAR 0 7
58613: PUSH
58614: LD_VAR 0 7
58618: PPUSH
58619: LD_VAR 0 7
58623: PUSH
58624: LD_INT 1
58626: PLUS
58627: PPUSH
58628: LD_VAR 0 9
58632: PUSH
58633: LD_VAR 0 10
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PPUSH
58642: CALL_OW 1
58646: ST_TO_ADDR
58647: GO 58663
// i := i - 1 ;
58649: LD_ADDR_VAR 0 5
58653: PUSH
58654: LD_VAR 0 5
58658: PUSH
58659: LD_INT 1
58661: MINUS
58662: ST_TO_ADDR
// end ;
58663: GO 58469
58665: POP
58666: POP
// for i in tmp do
58667: LD_ADDR_VAR 0 5
58671: PUSH
58672: LD_VAR 0 7
58676: PUSH
58677: FOR_IN
58678: IFFALSE 58716
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58680: LD_VAR 0 1
58684: PPUSH
58685: LD_VAR 0 5
58689: PUSH
58690: LD_INT 1
58692: ARRAY
58693: PPUSH
58694: LD_VAR 0 5
58698: PUSH
58699: LD_INT 2
58701: ARRAY
58702: PPUSH
58703: CALL 57658 0 3
58707: NOT
58708: IFFALSE 58714
// exit ;
58710: POP
58711: POP
58712: GO 58718
58714: GO 58677
58716: POP
58717: POP
// end ;
58718: LD_VAR 0 4
58722: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
58723: LD_INT 0
58725: PPUSH
58726: PPUSH
58727: PPUSH
58728: PPUSH
58729: PPUSH
58730: PPUSH
58731: PPUSH
// if not GetClass ( unit ) = class_sniper then
58732: LD_VAR 0 1
58736: PPUSH
58737: CALL_OW 257
58741: PUSH
58742: LD_INT 5
58744: EQUAL
58745: NOT
58746: IFFALSE 58750
// exit ;
58748: GO 59138
// dist := 8 ;
58750: LD_ADDR_VAR 0 5
58754: PUSH
58755: LD_INT 8
58757: ST_TO_ADDR
// viewRange := 12 ;
58758: LD_ADDR_VAR 0 7
58762: PUSH
58763: LD_INT 12
58765: ST_TO_ADDR
// side := GetSide ( unit ) ;
58766: LD_ADDR_VAR 0 6
58770: PUSH
58771: LD_VAR 0 1
58775: PPUSH
58776: CALL_OW 255
58780: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58781: LD_INT 61
58783: PPUSH
58784: LD_VAR 0 6
58788: PPUSH
58789: CALL_OW 321
58793: PUSH
58794: LD_INT 2
58796: EQUAL
58797: IFFALSE 58807
// viewRange := 16 ;
58799: LD_ADDR_VAR 0 7
58803: PUSH
58804: LD_INT 16
58806: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58807: LD_VAR 0 1
58811: PPUSH
58812: LD_VAR 0 2
58816: PPUSH
58817: LD_VAR 0 3
58821: PPUSH
58822: CALL_OW 297
58826: PUSH
58827: LD_VAR 0 5
58831: GREATER
58832: IFFALSE 58911
// begin ComMoveXY ( unit , x , y ) ;
58834: LD_VAR 0 1
58838: PPUSH
58839: LD_VAR 0 2
58843: PPUSH
58844: LD_VAR 0 3
58848: PPUSH
58849: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58853: LD_INT 35
58855: PPUSH
58856: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58860: LD_VAR 0 1
58864: PPUSH
58865: LD_VAR 0 2
58869: PPUSH
58870: LD_VAR 0 3
58874: PPUSH
58875: CALL 36823 0 3
58879: NOT
58880: IFFALSE 58884
// exit ;
58882: GO 59138
// until GetDistUnitXY ( unit , x , y ) < dist ;
58884: LD_VAR 0 1
58888: PPUSH
58889: LD_VAR 0 2
58893: PPUSH
58894: LD_VAR 0 3
58898: PPUSH
58899: CALL_OW 297
58903: PUSH
58904: LD_VAR 0 5
58908: LESS
58909: IFFALSE 58853
// end ; ComTurnXY ( unit , x , y ) ;
58911: LD_VAR 0 1
58915: PPUSH
58916: LD_VAR 0 2
58920: PPUSH
58921: LD_VAR 0 3
58925: PPUSH
58926: CALL_OW 118
// wait ( 5 ) ;
58930: LD_INT 5
58932: PPUSH
58933: CALL_OW 67
// _d := GetDir ( unit ) ;
58937: LD_ADDR_VAR 0 10
58941: PUSH
58942: LD_VAR 0 1
58946: PPUSH
58947: CALL_OW 254
58951: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
58952: LD_ADDR_VAR 0 8
58956: PUSH
58957: LD_VAR 0 1
58961: PPUSH
58962: CALL_OW 250
58966: PPUSH
58967: LD_VAR 0 10
58971: PPUSH
58972: LD_VAR 0 5
58976: PPUSH
58977: CALL_OW 272
58981: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
58982: LD_ADDR_VAR 0 9
58986: PUSH
58987: LD_VAR 0 1
58991: PPUSH
58992: CALL_OW 251
58996: PPUSH
58997: LD_VAR 0 10
59001: PPUSH
59002: LD_VAR 0 5
59006: PPUSH
59007: CALL_OW 273
59011: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59012: LD_VAR 0 8
59016: PPUSH
59017: LD_VAR 0 9
59021: PPUSH
59022: CALL_OW 488
59026: NOT
59027: IFFALSE 59031
// exit ;
59029: GO 59138
// ComAnimCustom ( unit , 1 ) ;
59031: LD_VAR 0 1
59035: PPUSH
59036: LD_INT 1
59038: PPUSH
59039: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59043: LD_VAR 0 8
59047: PPUSH
59048: LD_VAR 0 9
59052: PPUSH
59053: LD_VAR 0 6
59057: PPUSH
59058: LD_VAR 0 7
59062: PPUSH
59063: CALL_OW 330
// repeat wait ( 1 ) ;
59067: LD_INT 1
59069: PPUSH
59070: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
59074: LD_VAR 0 1
59078: PPUSH
59079: CALL_OW 316
59083: PUSH
59084: LD_VAR 0 1
59088: PPUSH
59089: CALL_OW 314
59093: OR
59094: PUSH
59095: LD_VAR 0 1
59099: PPUSH
59100: CALL_OW 302
59104: NOT
59105: OR
59106: PUSH
59107: LD_VAR 0 1
59111: PPUSH
59112: CALL_OW 301
59116: OR
59117: IFFALSE 59067
// RemoveSeeing ( _x , _y , side ) ;
59119: LD_VAR 0 8
59123: PPUSH
59124: LD_VAR 0 9
59128: PPUSH
59129: LD_VAR 0 6
59133: PPUSH
59134: CALL_OW 331
// end ; end_of_file
59138: LD_VAR 0 4
59142: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
59143: LD_VAR 0 1
59147: PUSH
59148: LD_INT 200
59150: DOUBLE
59151: GREATEREQUAL
59152: IFFALSE 59160
59154: LD_INT 299
59156: DOUBLE
59157: LESSEQUAL
59158: IFTRUE 59162
59160: GO 59194
59162: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
59163: LD_VAR 0 1
59167: PPUSH
59168: LD_VAR 0 2
59172: PPUSH
59173: LD_VAR 0 3
59177: PPUSH
59178: LD_VAR 0 4
59182: PPUSH
59183: LD_VAR 0 5
59187: PPUSH
59188: CALL 55260 0 5
59192: GO 59271
59194: LD_INT 300
59196: DOUBLE
59197: GREATEREQUAL
59198: IFFALSE 59206
59200: LD_INT 399
59202: DOUBLE
59203: LESSEQUAL
59204: IFTRUE 59208
59206: GO 59270
59208: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
59209: LD_VAR 0 1
59213: PPUSH
59214: LD_VAR 0 2
59218: PPUSH
59219: LD_VAR 0 3
59223: PPUSH
59224: LD_VAR 0 4
59228: PPUSH
59229: LD_VAR 0 5
59233: PPUSH
59234: LD_VAR 0 6
59238: PPUSH
59239: LD_VAR 0 7
59243: PPUSH
59244: LD_VAR 0 8
59248: PPUSH
59249: LD_VAR 0 9
59253: PPUSH
59254: LD_VAR 0 10
59258: PPUSH
59259: LD_VAR 0 11
59263: PPUSH
59264: CALL 53148 0 11
59268: GO 59271
59270: POP
// end ;
59271: PPOPN 11
59273: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
59274: LD_VAR 0 1
59278: PPUSH
59279: LD_VAR 0 2
59283: PPUSH
59284: LD_VAR 0 3
59288: PPUSH
59289: LD_VAR 0 4
59293: PPUSH
59294: LD_VAR 0 5
59298: PPUSH
59299: CALL 55242 0 5
// end ;
59303: PPOPN 5
59305: END
