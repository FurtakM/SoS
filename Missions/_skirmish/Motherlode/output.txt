// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 57 0 0
// if gameType = 1 then
   8: LD_EXP 2
  12: PUSH
  13: LD_INT 1
  15: EQUAL
  16: IFFALSE 56
// InitEcoMode ( [ 189 , 97 ] , [ [ 215 , 93 ] , [ 204 , 126 ] ] ) ;
  18: LD_INT 189
  20: PUSH
  21: LD_INT 97
  23: PUSH
  24: EMPTY
  25: LIST
  26: LIST
  27: PPUSH
  28: LD_INT 215
  30: PUSH
  31: LD_INT 93
  33: PUSH
  34: EMPTY
  35: LIST
  36: LIST
  37: PUSH
  38: LD_INT 204
  40: PUSH
  41: LD_INT 126
  43: PUSH
  44: EMPTY
  45: LIST
  46: LIST
  47: PUSH
  48: EMPTY
  49: LIST
  50: LIST
  51: PPUSH
  52: CALL 37905 0 2
// end ;
  56: END
// export debug , gameType ; function Init ; begin
  57: LD_INT 0
  59: PPUSH
// debug := true ;
  60: LD_ADDR_EXP 1
  64: PUSH
  65: LD_INT 1
  67: ST_TO_ADDR
// gameType := 1 ;
  68: LD_ADDR_EXP 2
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// end ; end_of_file
  76: LD_VAR 0 1
  80: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
  81: LD_INT 0
  83: PPUSH
// ar_miner := 81 ;
  84: LD_ADDR_EXP 10
  88: PUSH
  89: LD_INT 81
  91: ST_TO_ADDR
// ar_crane := 88 ;
  92: LD_ADDR_EXP 9
  96: PUSH
  97: LD_INT 88
  99: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
 100: LD_ADDR_EXP 4
 104: PUSH
 105: LD_INT 89
 107: ST_TO_ADDR
// us_hack := 99 ;
 108: LD_ADDR_EXP 5
 112: PUSH
 113: LD_INT 99
 115: ST_TO_ADDR
// us_artillery := 97 ;
 116: LD_ADDR_EXP 6
 120: PUSH
 121: LD_INT 97
 123: ST_TO_ADDR
// ar_bio_bomb := 91 ;
 124: LD_ADDR_EXP 7
 128: PUSH
 129: LD_INT 91
 131: ST_TO_ADDR
// ar_mortar := 92 ;
 132: LD_ADDR_EXP 8
 136: PUSH
 137: LD_INT 92
 139: ST_TO_ADDR
// ru_radar := 98 ;
 140: LD_ADDR_EXP 3
 144: PUSH
 145: LD_INT 98
 147: ST_TO_ADDR
// tech_Artillery := 80 ;
 148: LD_ADDR_EXP 11
 152: PUSH
 153: LD_INT 80
 155: ST_TO_ADDR
// tech_RadMat := 81 ;
 156: LD_ADDR_EXP 12
 160: PUSH
 161: LD_INT 81
 163: ST_TO_ADDR
// tech_BasicTools := 82 ;
 164: LD_ADDR_EXP 13
 168: PUSH
 169: LD_INT 82
 171: ST_TO_ADDR
// tech_Cargo := 83 ;
 172: LD_ADDR_EXP 14
 176: PUSH
 177: LD_INT 83
 179: ST_TO_ADDR
// tech_Track := 84 ;
 180: LD_ADDR_EXP 15
 184: PUSH
 185: LD_INT 84
 187: ST_TO_ADDR
// tech_Crane := 85 ;
 188: LD_ADDR_EXP 16
 192: PUSH
 193: LD_INT 85
 195: ST_TO_ADDR
// tech_Bulldozer := 86 ;
 196: LD_ADDR_EXP 17
 200: PUSH
 201: LD_INT 86
 203: ST_TO_ADDR
// tech_Hovercraft := 87 ;
 204: LD_ADDR_EXP 18
 208: PUSH
 209: LD_INT 87
 211: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
 212: LD_ADDR_EXP 19
 216: PUSH
 217: LD_INT 88
 219: ST_TO_ADDR
// class_mastodont := 31 ;
 220: LD_ADDR_EXP 20
 224: PUSH
 225: LD_INT 31
 227: ST_TO_ADDR
// class_horse := 21 ;
 228: LD_ADDR_EXP 21
 232: PUSH
 233: LD_INT 21
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// every 1 do
 241: GO 243
 243: DISABLE
// InitGlobalVariables ; end_of_file
 244: CALL 81 0 0
 248: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 249: LD_INT 0
 251: PPUSH
 252: PPUSH
// if exist_mode then
 253: LD_VAR 0 2
 257: IFFALSE 282
// unit := CreateCharacter ( prefix & ident ) else
 259: LD_ADDR_VAR 0 5
 263: PUSH
 264: LD_VAR 0 3
 268: PUSH
 269: LD_VAR 0 1
 273: STR
 274: PPUSH
 275: CALL_OW 34
 279: ST_TO_ADDR
 280: GO 297
// unit := NewCharacter ( ident ) ;
 282: LD_ADDR_VAR 0 5
 286: PUSH
 287: LD_VAR 0 1
 291: PPUSH
 292: CALL_OW 25
 296: ST_TO_ADDR
// result := unit ;
 297: LD_ADDR_VAR 0 4
 301: PUSH
 302: LD_VAR 0 5
 306: ST_TO_ADDR
// end ;
 307: LD_VAR 0 4
 311: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 312: LD_INT 0
 314: PPUSH
 315: PPUSH
// if not side or not nation then
 316: LD_VAR 0 1
 320: NOT
 321: PUSH
 322: LD_VAR 0 2
 326: NOT
 327: OR
 328: IFFALSE 332
// exit ;
 330: GO 1096
// case nation of nation_american :
 332: LD_VAR 0 2
 336: PUSH
 337: LD_INT 1
 339: DOUBLE
 340: EQUAL
 341: IFTRUE 345
 343: GO 559
 345: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 346: LD_ADDR_VAR 0 4
 350: PUSH
 351: LD_INT 35
 353: PUSH
 354: LD_INT 45
 356: PUSH
 357: LD_INT 46
 359: PUSH
 360: LD_INT 47
 362: PUSH
 363: LD_INT 82
 365: PUSH
 366: LD_INT 83
 368: PUSH
 369: LD_INT 84
 371: PUSH
 372: LD_INT 85
 374: PUSH
 375: LD_INT 86
 377: PUSH
 378: LD_INT 1
 380: PUSH
 381: LD_INT 2
 383: PUSH
 384: LD_INT 6
 386: PUSH
 387: LD_INT 15
 389: PUSH
 390: LD_INT 16
 392: PUSH
 393: LD_INT 7
 395: PUSH
 396: LD_INT 12
 398: PUSH
 399: LD_INT 13
 401: PUSH
 402: LD_INT 10
 404: PUSH
 405: LD_INT 14
 407: PUSH
 408: LD_INT 20
 410: PUSH
 411: LD_INT 21
 413: PUSH
 414: LD_INT 22
 416: PUSH
 417: LD_INT 25
 419: PUSH
 420: LD_INT 32
 422: PUSH
 423: LD_INT 27
 425: PUSH
 426: LD_INT 36
 428: PUSH
 429: LD_INT 69
 431: PUSH
 432: LD_INT 39
 434: PUSH
 435: LD_INT 34
 437: PUSH
 438: LD_INT 40
 440: PUSH
 441: LD_INT 48
 443: PUSH
 444: LD_INT 49
 446: PUSH
 447: LD_INT 50
 449: PUSH
 450: LD_INT 51
 452: PUSH
 453: LD_INT 52
 455: PUSH
 456: LD_INT 53
 458: PUSH
 459: LD_INT 54
 461: PUSH
 462: LD_INT 55
 464: PUSH
 465: LD_INT 56
 467: PUSH
 468: LD_INT 57
 470: PUSH
 471: LD_INT 58
 473: PUSH
 474: LD_INT 59
 476: PUSH
 477: LD_INT 60
 479: PUSH
 480: LD_INT 61
 482: PUSH
 483: LD_INT 62
 485: PUSH
 486: LD_INT 80
 488: PUSH
 489: LD_INT 82
 491: PUSH
 492: LD_INT 83
 494: PUSH
 495: LD_INT 84
 497: PUSH
 498: LD_INT 85
 500: PUSH
 501: LD_INT 86
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: LIST
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: LIST
 553: LIST
 554: LIST
 555: LIST
 556: ST_TO_ADDR
 557: GO 1020
 559: LD_INT 2
 561: DOUBLE
 562: EQUAL
 563: IFTRUE 567
 565: GO 789
 567: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: LD_INT 35
 575: PUSH
 576: LD_INT 45
 578: PUSH
 579: LD_INT 46
 581: PUSH
 582: LD_INT 47
 584: PUSH
 585: LD_INT 82
 587: PUSH
 588: LD_INT 83
 590: PUSH
 591: LD_INT 84
 593: PUSH
 594: LD_INT 85
 596: PUSH
 597: LD_INT 87
 599: PUSH
 600: LD_INT 70
 602: PUSH
 603: LD_INT 1
 605: PUSH
 606: LD_INT 11
 608: PUSH
 609: LD_INT 3
 611: PUSH
 612: LD_INT 4
 614: PUSH
 615: LD_INT 5
 617: PUSH
 618: LD_INT 6
 620: PUSH
 621: LD_INT 15
 623: PUSH
 624: LD_INT 18
 626: PUSH
 627: LD_INT 7
 629: PUSH
 630: LD_INT 17
 632: PUSH
 633: LD_INT 8
 635: PUSH
 636: LD_INT 20
 638: PUSH
 639: LD_INT 21
 641: PUSH
 642: LD_INT 22
 644: PUSH
 645: LD_INT 72
 647: PUSH
 648: LD_INT 26
 650: PUSH
 651: LD_INT 69
 653: PUSH
 654: LD_INT 39
 656: PUSH
 657: LD_INT 40
 659: PUSH
 660: LD_INT 41
 662: PUSH
 663: LD_INT 42
 665: PUSH
 666: LD_INT 43
 668: PUSH
 669: LD_INT 48
 671: PUSH
 672: LD_INT 49
 674: PUSH
 675: LD_INT 50
 677: PUSH
 678: LD_INT 51
 680: PUSH
 681: LD_INT 52
 683: PUSH
 684: LD_INT 53
 686: PUSH
 687: LD_INT 54
 689: PUSH
 690: LD_INT 55
 692: PUSH
 693: LD_INT 56
 695: PUSH
 696: LD_INT 60
 698: PUSH
 699: LD_INT 61
 701: PUSH
 702: LD_INT 62
 704: PUSH
 705: LD_INT 66
 707: PUSH
 708: LD_INT 67
 710: PUSH
 711: LD_INT 68
 713: PUSH
 714: LD_INT 81
 716: PUSH
 717: LD_INT 82
 719: PUSH
 720: LD_INT 83
 722: PUSH
 723: LD_INT 84
 725: PUSH
 726: LD_INT 85
 728: PUSH
 729: LD_INT 87
 731: PUSH
 732: EMPTY
 733: LIST
 734: LIST
 735: LIST
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: LIST
 763: LIST
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: LIST
 786: ST_TO_ADDR
 787: GO 1020
 789: LD_INT 3
 791: DOUBLE
 792: EQUAL
 793: IFTRUE 797
 795: GO 1019
 797: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
 798: LD_ADDR_VAR 0 4
 802: PUSH
 803: LD_INT 46
 805: PUSH
 806: LD_INT 47
 808: PUSH
 809: LD_INT 1
 811: PUSH
 812: LD_INT 2
 814: PUSH
 815: LD_INT 82
 817: PUSH
 818: LD_INT 83
 820: PUSH
 821: LD_INT 84
 823: PUSH
 824: LD_INT 85
 826: PUSH
 827: LD_INT 86
 829: PUSH
 830: LD_INT 11
 832: PUSH
 833: LD_INT 9
 835: PUSH
 836: LD_INT 20
 838: PUSH
 839: LD_INT 19
 841: PUSH
 842: LD_INT 21
 844: PUSH
 845: LD_INT 24
 847: PUSH
 848: LD_INT 22
 850: PUSH
 851: LD_INT 25
 853: PUSH
 854: LD_INT 28
 856: PUSH
 857: LD_INT 29
 859: PUSH
 860: LD_INT 30
 862: PUSH
 863: LD_INT 31
 865: PUSH
 866: LD_INT 37
 868: PUSH
 869: LD_INT 38
 871: PUSH
 872: LD_INT 32
 874: PUSH
 875: LD_INT 27
 877: PUSH
 878: LD_INT 33
 880: PUSH
 881: LD_INT 69
 883: PUSH
 884: LD_INT 39
 886: PUSH
 887: LD_INT 34
 889: PUSH
 890: LD_INT 40
 892: PUSH
 893: LD_INT 71
 895: PUSH
 896: LD_INT 23
 898: PUSH
 899: LD_INT 44
 901: PUSH
 902: LD_INT 48
 904: PUSH
 905: LD_INT 49
 907: PUSH
 908: LD_INT 50
 910: PUSH
 911: LD_INT 51
 913: PUSH
 914: LD_INT 52
 916: PUSH
 917: LD_INT 53
 919: PUSH
 920: LD_INT 54
 922: PUSH
 923: LD_INT 55
 925: PUSH
 926: LD_INT 56
 928: PUSH
 929: LD_INT 57
 931: PUSH
 932: LD_INT 58
 934: PUSH
 935: LD_INT 59
 937: PUSH
 938: LD_INT 63
 940: PUSH
 941: LD_INT 64
 943: PUSH
 944: LD_INT 65
 946: PUSH
 947: LD_INT 82
 949: PUSH
 950: LD_INT 83
 952: PUSH
 953: LD_INT 84
 955: PUSH
 956: LD_INT 85
 958: PUSH
 959: LD_INT 86
 961: PUSH
 962: EMPTY
 963: LIST
 964: LIST
 965: LIST
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: LIST
 985: LIST
 986: LIST
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: ST_TO_ADDR
1017: GO 1020
1019: POP
// if state > - 1 and state < 3 then
1020: LD_VAR 0 3
1024: PUSH
1025: LD_INT 1
1027: NEG
1028: GREATER
1029: PUSH
1030: LD_VAR 0 3
1034: PUSH
1035: LD_INT 3
1037: LESS
1038: AND
1039: IFFALSE 1096
// for i in result do
1041: LD_ADDR_VAR 0 5
1045: PUSH
1046: LD_VAR 0 4
1050: PUSH
1051: FOR_IN
1052: IFFALSE 1094
// if GetTech ( i , side ) <> state then
1054: LD_VAR 0 5
1058: PPUSH
1059: LD_VAR 0 1
1063: PPUSH
1064: CALL_OW 321
1068: PUSH
1069: LD_VAR 0 3
1073: NONEQUAL
1074: IFFALSE 1092
// result := result diff i ;
1076: LD_ADDR_VAR 0 4
1080: PUSH
1081: LD_VAR 0 4
1085: PUSH
1086: LD_VAR 0 5
1090: DIFF
1091: ST_TO_ADDR
1092: GO 1051
1094: POP
1095: POP
// end ;
1096: LD_VAR 0 4
1100: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1101: LD_INT 0
1103: PPUSH
1104: PPUSH
1105: PPUSH
// result := true ;
1106: LD_ADDR_VAR 0 3
1110: PUSH
1111: LD_INT 1
1113: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1114: LD_ADDR_VAR 0 5
1118: PUSH
1119: LD_VAR 0 2
1123: PPUSH
1124: CALL_OW 480
1128: ST_TO_ADDR
// if not tmp then
1129: LD_VAR 0 5
1133: NOT
1134: IFFALSE 1138
// exit ;
1136: GO 1187
// for i in tmp do
1138: LD_ADDR_VAR 0 4
1142: PUSH
1143: LD_VAR 0 5
1147: PUSH
1148: FOR_IN
1149: IFFALSE 1185
// if GetTech ( i , side ) <> state_researched then
1151: LD_VAR 0 4
1155: PPUSH
1156: LD_VAR 0 1
1160: PPUSH
1161: CALL_OW 321
1165: PUSH
1166: LD_INT 2
1168: NONEQUAL
1169: IFFALSE 1183
// begin result := false ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: LD_INT 0
1178: ST_TO_ADDR
// exit ;
1179: POP
1180: POP
1181: GO 1187
// end ;
1183: GO 1148
1185: POP
1186: POP
// end ;
1187: LD_VAR 0 3
1191: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1192: LD_INT 0
1194: PPUSH
1195: PPUSH
1196: PPUSH
1197: PPUSH
1198: PPUSH
1199: PPUSH
1200: PPUSH
1201: PPUSH
1202: PPUSH
1203: PPUSH
1204: PPUSH
1205: PPUSH
1206: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1207: LD_VAR 0 1
1211: NOT
1212: PUSH
1213: LD_VAR 0 1
1217: PPUSH
1218: CALL_OW 257
1222: PUSH
1223: LD_INT 9
1225: NONEQUAL
1226: OR
1227: IFFALSE 1231
// exit ;
1229: GO 1804
// side := GetSide ( unit ) ;
1231: LD_ADDR_VAR 0 9
1235: PUSH
1236: LD_VAR 0 1
1240: PPUSH
1241: CALL_OW 255
1245: ST_TO_ADDR
// tech_space := tech_spacanom ;
1246: LD_ADDR_VAR 0 12
1250: PUSH
1251: LD_INT 29
1253: ST_TO_ADDR
// tech_time := tech_taurad ;
1254: LD_ADDR_VAR 0 13
1258: PUSH
1259: LD_INT 28
1261: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1262: LD_ADDR_VAR 0 11
1266: PUSH
1267: LD_VAR 0 1
1271: PPUSH
1272: CALL_OW 310
1276: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1277: LD_VAR 0 11
1281: PPUSH
1282: CALL_OW 247
1286: PUSH
1287: LD_INT 2
1289: EQUAL
1290: IFFALSE 1294
// exit ;
1292: GO 1804
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1294: LD_ADDR_VAR 0 8
1298: PUSH
1299: LD_INT 81
1301: PUSH
1302: LD_VAR 0 9
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: LD_INT 3
1313: PUSH
1314: LD_INT 21
1316: PUSH
1317: LD_INT 3
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: PUSH
1324: EMPTY
1325: LIST
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PPUSH
1332: CALL_OW 69
1336: ST_TO_ADDR
// if not tmp then
1337: LD_VAR 0 8
1341: NOT
1342: IFFALSE 1346
// exit ;
1344: GO 1804
// if in_unit then
1346: LD_VAR 0 11
1350: IFFALSE 1374
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1352: LD_ADDR_VAR 0 10
1356: PUSH
1357: LD_VAR 0 8
1361: PPUSH
1362: LD_VAR 0 11
1366: PPUSH
1367: CALL_OW 74
1371: ST_TO_ADDR
1372: GO 1394
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1374: LD_ADDR_VAR 0 10
1378: PUSH
1379: LD_VAR 0 8
1383: PPUSH
1384: LD_VAR 0 1
1388: PPUSH
1389: CALL_OW 74
1393: ST_TO_ADDR
// if not enemy then
1394: LD_VAR 0 10
1398: NOT
1399: IFFALSE 1403
// exit ;
1401: GO 1804
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1403: LD_VAR 0 11
1407: PUSH
1408: LD_VAR 0 11
1412: PPUSH
1413: LD_VAR 0 10
1417: PPUSH
1418: CALL_OW 296
1422: PUSH
1423: LD_INT 13
1425: GREATER
1426: AND
1427: PUSH
1428: LD_VAR 0 1
1432: PPUSH
1433: LD_VAR 0 10
1437: PPUSH
1438: CALL_OW 296
1442: PUSH
1443: LD_INT 12
1445: GREATER
1446: OR
1447: IFFALSE 1451
// exit ;
1449: GO 1804
// missile := [ 1 ] ;
1451: LD_ADDR_VAR 0 14
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: EMPTY
1460: LIST
1461: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1462: LD_VAR 0 9
1466: PPUSH
1467: LD_VAR 0 12
1471: PPUSH
1472: CALL_OW 325
1476: IFFALSE 1505
// missile := Insert ( missile , missile + 1 , 2 ) ;
1478: LD_ADDR_VAR 0 14
1482: PUSH
1483: LD_VAR 0 14
1487: PPUSH
1488: LD_VAR 0 14
1492: PUSH
1493: LD_INT 1
1495: PLUS
1496: PPUSH
1497: LD_INT 2
1499: PPUSH
1500: CALL_OW 2
1504: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1505: LD_VAR 0 9
1509: PPUSH
1510: LD_VAR 0 13
1514: PPUSH
1515: CALL_OW 325
1519: PUSH
1520: LD_VAR 0 10
1524: PPUSH
1525: CALL_OW 255
1529: PPUSH
1530: LD_VAR 0 13
1534: PPUSH
1535: CALL_OW 325
1539: NOT
1540: AND
1541: IFFALSE 1570
// missile := Insert ( missile , missile + 1 , 3 ) ;
1543: LD_ADDR_VAR 0 14
1547: PUSH
1548: LD_VAR 0 14
1552: PPUSH
1553: LD_VAR 0 14
1557: PUSH
1558: LD_INT 1
1560: PLUS
1561: PPUSH
1562: LD_INT 3
1564: PPUSH
1565: CALL_OW 2
1569: ST_TO_ADDR
// if missile < 2 then
1570: LD_VAR 0 14
1574: PUSH
1575: LD_INT 2
1577: LESS
1578: IFFALSE 1582
// exit ;
1580: GO 1804
// x := GetX ( enemy ) ;
1582: LD_ADDR_VAR 0 4
1586: PUSH
1587: LD_VAR 0 10
1591: PPUSH
1592: CALL_OW 250
1596: ST_TO_ADDR
// y := GetY ( enemy ) ;
1597: LD_ADDR_VAR 0 5
1601: PUSH
1602: LD_VAR 0 10
1606: PPUSH
1607: CALL_OW 251
1611: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1612: LD_ADDR_VAR 0 6
1616: PUSH
1617: LD_VAR 0 4
1621: PUSH
1622: LD_INT 1
1624: NEG
1625: PPUSH
1626: LD_INT 1
1628: PPUSH
1629: CALL_OW 12
1633: PLUS
1634: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1635: LD_ADDR_VAR 0 7
1639: PUSH
1640: LD_VAR 0 5
1644: PUSH
1645: LD_INT 1
1647: NEG
1648: PPUSH
1649: LD_INT 1
1651: PPUSH
1652: CALL_OW 12
1656: PLUS
1657: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1658: LD_VAR 0 6
1662: PPUSH
1663: LD_VAR 0 7
1667: PPUSH
1668: CALL_OW 488
1672: NOT
1673: IFFALSE 1695
// begin _x := x ;
1675: LD_ADDR_VAR 0 6
1679: PUSH
1680: LD_VAR 0 4
1684: ST_TO_ADDR
// _y := y ;
1685: LD_ADDR_VAR 0 7
1689: PUSH
1690: LD_VAR 0 5
1694: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1695: LD_ADDR_VAR 0 3
1699: PUSH
1700: LD_INT 1
1702: PPUSH
1703: LD_VAR 0 14
1707: PPUSH
1708: CALL_OW 12
1712: ST_TO_ADDR
// case i of 1 :
1713: LD_VAR 0 3
1717: PUSH
1718: LD_INT 1
1720: DOUBLE
1721: EQUAL
1722: IFTRUE 1726
1724: GO 1743
1726: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1727: LD_VAR 0 1
1731: PPUSH
1732: LD_VAR 0 10
1736: PPUSH
1737: CALL_OW 115
1741: GO 1804
1743: LD_INT 2
1745: DOUBLE
1746: EQUAL
1747: IFTRUE 1751
1749: GO 1773
1751: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1752: LD_VAR 0 1
1756: PPUSH
1757: LD_VAR 0 6
1761: PPUSH
1762: LD_VAR 0 7
1766: PPUSH
1767: CALL_OW 153
1771: GO 1804
1773: LD_INT 3
1775: DOUBLE
1776: EQUAL
1777: IFTRUE 1781
1779: GO 1803
1781: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1782: LD_VAR 0 1
1786: PPUSH
1787: LD_VAR 0 6
1791: PPUSH
1792: LD_VAR 0 7
1796: PPUSH
1797: CALL_OW 154
1801: GO 1804
1803: POP
// end ;
1804: LD_VAR 0 2
1808: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1809: LD_INT 0
1811: PPUSH
1812: PPUSH
1813: PPUSH
1814: PPUSH
1815: PPUSH
1816: PPUSH
// if not unit or not building then
1817: LD_VAR 0 1
1821: NOT
1822: PUSH
1823: LD_VAR 0 2
1827: NOT
1828: OR
1829: IFFALSE 1833
// exit ;
1831: GO 1991
// x := GetX ( building ) ;
1833: LD_ADDR_VAR 0 5
1837: PUSH
1838: LD_VAR 0 2
1842: PPUSH
1843: CALL_OW 250
1847: ST_TO_ADDR
// y := GetY ( building ) ;
1848: LD_ADDR_VAR 0 6
1852: PUSH
1853: LD_VAR 0 2
1857: PPUSH
1858: CALL_OW 251
1862: ST_TO_ADDR
// for i = 0 to 5 do
1863: LD_ADDR_VAR 0 4
1867: PUSH
1868: DOUBLE
1869: LD_INT 0
1871: DEC
1872: ST_TO_ADDR
1873: LD_INT 5
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1989
// begin _x := ShiftX ( x , i , 3 ) ;
1879: LD_ADDR_VAR 0 7
1883: PUSH
1884: LD_VAR 0 5
1888: PPUSH
1889: LD_VAR 0 4
1893: PPUSH
1894: LD_INT 3
1896: PPUSH
1897: CALL_OW 272
1901: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
1902: LD_ADDR_VAR 0 8
1906: PUSH
1907: LD_VAR 0 6
1911: PPUSH
1912: LD_VAR 0 4
1916: PPUSH
1917: LD_INT 3
1919: PPUSH
1920: CALL_OW 273
1924: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1925: LD_VAR 0 7
1929: PPUSH
1930: LD_VAR 0 8
1934: PPUSH
1935: CALL_OW 488
1939: NOT
1940: IFFALSE 1944
// continue ;
1942: GO 1876
// if HexInfo ( _x , _y ) = 0 then
1944: LD_VAR 0 7
1948: PPUSH
1949: LD_VAR 0 8
1953: PPUSH
1954: CALL_OW 428
1958: PUSH
1959: LD_INT 0
1961: EQUAL
1962: IFFALSE 1987
// begin ComMoveXY ( unit , _x , _y ) ;
1964: LD_VAR 0 1
1968: PPUSH
1969: LD_VAR 0 7
1973: PPUSH
1974: LD_VAR 0 8
1978: PPUSH
1979: CALL_OW 111
// exit ;
1983: POP
1984: POP
1985: GO 1991
// end ; end ;
1987: GO 1876
1989: POP
1990: POP
// end ;
1991: LD_VAR 0 3
1995: RET
// export function ScanBase ( side , base_area ) ; begin
1996: LD_INT 0
1998: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
1999: LD_ADDR_VAR 0 3
2003: PUSH
2004: LD_VAR 0 2
2008: PPUSH
2009: LD_INT 81
2011: PUSH
2012: LD_VAR 0 1
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PPUSH
2021: CALL_OW 70
2025: ST_TO_ADDR
// end ;
2026: LD_VAR 0 3
2030: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2031: LD_INT 0
2033: PPUSH
2034: PPUSH
2035: PPUSH
2036: PPUSH
// result := false ;
2037: LD_ADDR_VAR 0 2
2041: PUSH
2042: LD_INT 0
2044: ST_TO_ADDR
// side := GetSide ( unit ) ;
2045: LD_ADDR_VAR 0 3
2049: PUSH
2050: LD_VAR 0 1
2054: PPUSH
2055: CALL_OW 255
2059: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2060: LD_ADDR_VAR 0 4
2064: PUSH
2065: LD_VAR 0 1
2069: PPUSH
2070: CALL_OW 248
2074: ST_TO_ADDR
// case nat of 1 :
2075: LD_VAR 0 4
2079: PUSH
2080: LD_INT 1
2082: DOUBLE
2083: EQUAL
2084: IFTRUE 2088
2086: GO 2099
2088: POP
// tech := tech_lassight ; 2 :
2089: LD_ADDR_VAR 0 5
2093: PUSH
2094: LD_INT 12
2096: ST_TO_ADDR
2097: GO 2138
2099: LD_INT 2
2101: DOUBLE
2102: EQUAL
2103: IFTRUE 2107
2105: GO 2118
2107: POP
// tech := tech_mortar ; 3 :
2108: LD_ADDR_VAR 0 5
2112: PUSH
2113: LD_INT 41
2115: ST_TO_ADDR
2116: GO 2138
2118: LD_INT 3
2120: DOUBLE
2121: EQUAL
2122: IFTRUE 2126
2124: GO 2137
2126: POP
// tech := tech_bazooka ; end ;
2127: LD_ADDR_VAR 0 5
2131: PUSH
2132: LD_INT 44
2134: ST_TO_ADDR
2135: GO 2138
2137: POP
// if Researched ( side , tech ) then
2138: LD_VAR 0 3
2142: PPUSH
2143: LD_VAR 0 5
2147: PPUSH
2148: CALL_OW 325
2152: IFFALSE 2179
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2154: LD_ADDR_VAR 0 2
2158: PUSH
2159: LD_INT 5
2161: PUSH
2162: LD_INT 8
2164: PUSH
2165: LD_INT 9
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_VAR 0 4
2177: ARRAY
2178: ST_TO_ADDR
// end ;
2179: LD_VAR 0 2
2183: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2184: LD_INT 0
2186: PPUSH
2187: PPUSH
2188: PPUSH
// if not mines then
2189: LD_VAR 0 2
2193: NOT
2194: IFFALSE 2198
// exit ;
2196: GO 2342
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2198: LD_ADDR_VAR 0 5
2202: PUSH
2203: LD_INT 81
2205: PUSH
2206: LD_VAR 0 1
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PUSH
2215: LD_INT 3
2217: PUSH
2218: LD_INT 21
2220: PUSH
2221: LD_INT 3
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PPUSH
2236: CALL_OW 69
2240: ST_TO_ADDR
// for i in mines do
2241: LD_ADDR_VAR 0 4
2245: PUSH
2246: LD_VAR 0 2
2250: PUSH
2251: FOR_IN
2252: IFFALSE 2340
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2254: LD_VAR 0 4
2258: PUSH
2259: LD_INT 1
2261: ARRAY
2262: PPUSH
2263: LD_VAR 0 4
2267: PUSH
2268: LD_INT 2
2270: ARRAY
2271: PPUSH
2272: CALL_OW 458
2276: NOT
2277: IFFALSE 2281
// continue ;
2279: GO 2251
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2281: LD_VAR 0 4
2285: PUSH
2286: LD_INT 1
2288: ARRAY
2289: PPUSH
2290: LD_VAR 0 4
2294: PUSH
2295: LD_INT 2
2297: ARRAY
2298: PPUSH
2299: CALL_OW 428
2303: PUSH
2304: LD_VAR 0 5
2308: IN
2309: IFFALSE 2338
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2311: LD_VAR 0 4
2315: PUSH
2316: LD_INT 1
2318: ARRAY
2319: PPUSH
2320: LD_VAR 0 4
2324: PUSH
2325: LD_INT 2
2327: ARRAY
2328: PPUSH
2329: LD_VAR 0 1
2333: PPUSH
2334: CALL_OW 456
// end ;
2338: GO 2251
2340: POP
2341: POP
// end ;
2342: LD_VAR 0 3
2346: RET
// export function Count ( array ) ; var i ; begin
2347: LD_INT 0
2349: PPUSH
2350: PPUSH
// result := 0 ;
2351: LD_ADDR_VAR 0 2
2355: PUSH
2356: LD_INT 0
2358: ST_TO_ADDR
// for i in array do
2359: LD_ADDR_VAR 0 3
2363: PUSH
2364: LD_VAR 0 1
2368: PUSH
2369: FOR_IN
2370: IFFALSE 2394
// if i then
2372: LD_VAR 0 3
2376: IFFALSE 2392
// result := result + 1 ;
2378: LD_ADDR_VAR 0 2
2382: PUSH
2383: LD_VAR 0 2
2387: PUSH
2388: LD_INT 1
2390: PLUS
2391: ST_TO_ADDR
2392: GO 2369
2394: POP
2395: POP
// end ;
2396: LD_VAR 0 2
2400: RET
// export function IsEmpty ( building ) ; begin
2401: LD_INT 0
2403: PPUSH
// if not building then
2404: LD_VAR 0 1
2408: NOT
2409: IFFALSE 2413
// exit ;
2411: GO 2456
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2413: LD_ADDR_VAR 0 2
2417: PUSH
2418: LD_VAR 0 1
2422: PUSH
2423: LD_INT 22
2425: PUSH
2426: LD_VAR 0 1
2430: PPUSH
2431: CALL_OW 255
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: PUSH
2440: LD_INT 58
2442: PUSH
2443: EMPTY
2444: LIST
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: PPUSH
2450: CALL_OW 69
2454: IN
2455: ST_TO_ADDR
// end ;
2456: LD_VAR 0 2
2460: RET
// export function IsNotFull ( building ) ; begin
2461: LD_INT 0
2463: PPUSH
// if not building then
2464: LD_VAR 0 1
2468: NOT
2469: IFFALSE 2473
// exit ;
2471: GO 2492
// result := UnitsInside ( building ) < 6 ;
2473: LD_ADDR_VAR 0 2
2477: PUSH
2478: LD_VAR 0 1
2482: PPUSH
2483: CALL_OW 313
2487: PUSH
2488: LD_INT 6
2490: LESS
2491: ST_TO_ADDR
// end ;
2492: LD_VAR 0 2
2496: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2497: LD_INT 0
2499: PPUSH
2500: PPUSH
2501: PPUSH
2502: PPUSH
// tmp := [ ] ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: EMPTY
2509: ST_TO_ADDR
// list := [ ] ;
2510: LD_ADDR_VAR 0 5
2514: PUSH
2515: EMPTY
2516: ST_TO_ADDR
// for i = 16 to 25 do
2517: LD_ADDR_VAR 0 4
2521: PUSH
2522: DOUBLE
2523: LD_INT 16
2525: DEC
2526: ST_TO_ADDR
2527: LD_INT 25
2529: PUSH
2530: FOR_TO
2531: IFFALSE 2604
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2533: LD_ADDR_VAR 0 3
2537: PUSH
2538: LD_VAR 0 3
2542: PUSH
2543: LD_INT 22
2545: PUSH
2546: LD_VAR 0 1
2550: PPUSH
2551: CALL_OW 255
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: LD_INT 91
2562: PUSH
2563: LD_VAR 0 1
2567: PUSH
2568: LD_INT 6
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 30
2578: PUSH
2579: LD_VAR 0 4
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: LIST
2592: PUSH
2593: EMPTY
2594: LIST
2595: PPUSH
2596: CALL_OW 69
2600: ADD
2601: ST_TO_ADDR
2602: GO 2530
2604: POP
2605: POP
// for i = 1 to tmp do
2606: LD_ADDR_VAR 0 4
2610: PUSH
2611: DOUBLE
2612: LD_INT 1
2614: DEC
2615: ST_TO_ADDR
2616: LD_VAR 0 3
2620: PUSH
2621: FOR_TO
2622: IFFALSE 2710
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2624: LD_ADDR_VAR 0 5
2628: PUSH
2629: LD_VAR 0 5
2633: PUSH
2634: LD_VAR 0 3
2638: PUSH
2639: LD_VAR 0 4
2643: ARRAY
2644: PPUSH
2645: CALL_OW 266
2649: PUSH
2650: LD_VAR 0 3
2654: PUSH
2655: LD_VAR 0 4
2659: ARRAY
2660: PPUSH
2661: CALL_OW 250
2665: PUSH
2666: LD_VAR 0 3
2670: PUSH
2671: LD_VAR 0 4
2675: ARRAY
2676: PPUSH
2677: CALL_OW 251
2681: PUSH
2682: LD_VAR 0 3
2686: PUSH
2687: LD_VAR 0 4
2691: ARRAY
2692: PPUSH
2693: CALL_OW 254
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: PUSH
2704: EMPTY
2705: LIST
2706: ADD
2707: ST_TO_ADDR
2708: GO 2621
2710: POP
2711: POP
// result := list ;
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: LD_VAR 0 5
2721: ST_TO_ADDR
// end ;
2722: LD_VAR 0 2
2726: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2727: LD_INT 0
2729: PPUSH
2730: PPUSH
2731: PPUSH
2732: PPUSH
2733: PPUSH
2734: PPUSH
2735: PPUSH
// if not factory then
2736: LD_VAR 0 1
2740: NOT
2741: IFFALSE 2745
// exit ;
2743: GO 3338
// if control = control_apeman then
2745: LD_VAR 0 4
2749: PUSH
2750: LD_INT 5
2752: EQUAL
2753: IFFALSE 2862
// begin tmp := UnitsInside ( factory ) ;
2755: LD_ADDR_VAR 0 8
2759: PUSH
2760: LD_VAR 0 1
2764: PPUSH
2765: CALL_OW 313
2769: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2770: LD_VAR 0 8
2774: PPUSH
2775: LD_INT 25
2777: PUSH
2778: LD_INT 12
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: PPUSH
2785: CALL_OW 72
2789: NOT
2790: IFFALSE 2800
// control := control_manual ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: LD_INT 1
2799: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2800: LD_ADDR_VAR 0 8
2804: PUSH
2805: LD_VAR 0 1
2809: PPUSH
2810: CALL 2497 0 1
2814: ST_TO_ADDR
// if tmp then
2815: LD_VAR 0 8
2819: IFFALSE 2862
// begin for i in tmp do
2821: LD_ADDR_VAR 0 7
2825: PUSH
2826: LD_VAR 0 8
2830: PUSH
2831: FOR_IN
2832: IFFALSE 2860
// if i [ 1 ] = b_ext_radio then
2834: LD_VAR 0 7
2838: PUSH
2839: LD_INT 1
2841: ARRAY
2842: PUSH
2843: LD_INT 22
2845: EQUAL
2846: IFFALSE 2858
// begin control := control_remote ;
2848: LD_ADDR_VAR 0 4
2852: PUSH
2853: LD_INT 2
2855: ST_TO_ADDR
// break ;
2856: GO 2860
// end ;
2858: GO 2831
2860: POP
2861: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
2862: LD_VAR 0 1
2866: PPUSH
2867: LD_VAR 0 2
2871: PPUSH
2872: LD_VAR 0 3
2876: PPUSH
2877: LD_VAR 0 4
2881: PPUSH
2882: LD_VAR 0 5
2886: PPUSH
2887: CALL_OW 448
2891: IFFALSE 2926
// begin result := [ chassis , engine , control , weapon ] ;
2893: LD_ADDR_VAR 0 6
2897: PUSH
2898: LD_VAR 0 2
2902: PUSH
2903: LD_VAR 0 3
2907: PUSH
2908: LD_VAR 0 4
2912: PUSH
2913: LD_VAR 0 5
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: LIST
2922: LIST
2923: ST_TO_ADDR
// exit ;
2924: GO 3338
// end ; _chassis := AvailableChassisList ( factory ) ;
2926: LD_ADDR_VAR 0 9
2930: PUSH
2931: LD_VAR 0 1
2935: PPUSH
2936: CALL_OW 475
2940: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
2941: LD_ADDR_VAR 0 11
2945: PUSH
2946: LD_VAR 0 1
2950: PPUSH
2951: CALL_OW 476
2955: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
2956: LD_ADDR_VAR 0 12
2960: PUSH
2961: LD_VAR 0 1
2965: PPUSH
2966: CALL_OW 477
2970: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
2971: LD_ADDR_VAR 0 10
2975: PUSH
2976: LD_VAR 0 1
2980: PPUSH
2981: CALL_OW 478
2985: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
2986: LD_VAR 0 9
2990: NOT
2991: PUSH
2992: LD_VAR 0 11
2996: NOT
2997: OR
2998: PUSH
2999: LD_VAR 0 12
3003: NOT
3004: OR
3005: PUSH
3006: LD_VAR 0 10
3010: NOT
3011: OR
3012: IFFALSE 3047
// begin result := [ chassis , engine , control , weapon ] ;
3014: LD_ADDR_VAR 0 6
3018: PUSH
3019: LD_VAR 0 2
3023: PUSH
3024: LD_VAR 0 3
3028: PUSH
3029: LD_VAR 0 4
3033: PUSH
3034: LD_VAR 0 5
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: LIST
3043: LIST
3044: ST_TO_ADDR
// exit ;
3045: GO 3338
// end ; if not chassis in _chassis then
3047: LD_VAR 0 2
3051: PUSH
3052: LD_VAR 0 9
3056: IN
3057: NOT
3058: IFFALSE 3084
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3060: LD_ADDR_VAR 0 2
3064: PUSH
3065: LD_VAR 0 9
3069: PUSH
3070: LD_INT 1
3072: PPUSH
3073: LD_VAR 0 9
3077: PPUSH
3078: CALL_OW 12
3082: ARRAY
3083: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3084: LD_VAR 0 2
3088: PPUSH
3089: LD_VAR 0 3
3093: PPUSH
3094: CALL 3343 0 2
3098: NOT
3099: IFFALSE 3158
// repeat engine := _engine [ 1 ] ;
3101: LD_ADDR_VAR 0 3
3105: PUSH
3106: LD_VAR 0 11
3110: PUSH
3111: LD_INT 1
3113: ARRAY
3114: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3115: LD_ADDR_VAR 0 11
3119: PUSH
3120: LD_VAR 0 11
3124: PPUSH
3125: LD_INT 1
3127: PPUSH
3128: CALL_OW 3
3132: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3133: LD_VAR 0 2
3137: PPUSH
3138: LD_VAR 0 3
3142: PPUSH
3143: CALL 3343 0 2
3147: PUSH
3148: LD_VAR 0 11
3152: PUSH
3153: EMPTY
3154: EQUAL
3155: OR
3156: IFFALSE 3101
// if not control in _control then
3158: LD_VAR 0 4
3162: PUSH
3163: LD_VAR 0 12
3167: IN
3168: NOT
3169: IFFALSE 3195
// control := _control [ rand ( 1 , _control ) ] ;
3171: LD_ADDR_VAR 0 4
3175: PUSH
3176: LD_VAR 0 12
3180: PUSH
3181: LD_INT 1
3183: PPUSH
3184: LD_VAR 0 12
3188: PPUSH
3189: CALL_OW 12
3193: ARRAY
3194: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3195: LD_VAR 0 2
3199: PPUSH
3200: LD_VAR 0 5
3204: PPUSH
3205: CALL 3563 0 2
3209: NOT
3210: IFFALSE 3269
// repeat weapon := _weapon [ 1 ] ;
3212: LD_ADDR_VAR 0 5
3216: PUSH
3217: LD_VAR 0 10
3221: PUSH
3222: LD_INT 1
3224: ARRAY
3225: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3226: LD_ADDR_VAR 0 10
3230: PUSH
3231: LD_VAR 0 10
3235: PPUSH
3236: LD_INT 1
3238: PPUSH
3239: CALL_OW 3
3243: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3244: LD_VAR 0 2
3248: PPUSH
3249: LD_VAR 0 5
3253: PPUSH
3254: CALL 3563 0 2
3258: PUSH
3259: LD_VAR 0 10
3263: PUSH
3264: EMPTY
3265: EQUAL
3266: OR
3267: IFFALSE 3212
// result := [ ] ;
3269: LD_ADDR_VAR 0 6
3273: PUSH
3274: EMPTY
3275: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3276: LD_VAR 0 1
3280: PPUSH
3281: LD_VAR 0 2
3285: PPUSH
3286: LD_VAR 0 3
3290: PPUSH
3291: LD_VAR 0 4
3295: PPUSH
3296: LD_VAR 0 5
3300: PPUSH
3301: CALL_OW 448
3305: IFFALSE 3338
// result := [ chassis , engine , control , weapon ] ;
3307: LD_ADDR_VAR 0 6
3311: PUSH
3312: LD_VAR 0 2
3316: PUSH
3317: LD_VAR 0 3
3321: PUSH
3322: LD_VAR 0 4
3326: PUSH
3327: LD_VAR 0 5
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: ST_TO_ADDR
// end ;
3338: LD_VAR 0 6
3342: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3343: LD_INT 0
3345: PPUSH
// if not chassis or not engine then
3346: LD_VAR 0 1
3350: NOT
3351: PUSH
3352: LD_VAR 0 2
3356: NOT
3357: OR
3358: IFFALSE 3362
// exit ;
3360: GO 3558
// case engine of engine_solar :
3362: LD_VAR 0 2
3366: PUSH
3367: LD_INT 2
3369: DOUBLE
3370: EQUAL
3371: IFTRUE 3375
3373: GO 3413
3375: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3376: LD_ADDR_VAR 0 3
3380: PUSH
3381: LD_INT 11
3383: PUSH
3384: LD_INT 12
3386: PUSH
3387: LD_INT 13
3389: PUSH
3390: LD_INT 14
3392: PUSH
3393: LD_INT 1
3395: PUSH
3396: LD_INT 2
3398: PUSH
3399: LD_INT 3
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: ST_TO_ADDR
3411: GO 3542
3413: LD_INT 1
3415: DOUBLE
3416: EQUAL
3417: IFTRUE 3421
3419: GO 3483
3421: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3422: LD_ADDR_VAR 0 3
3426: PUSH
3427: LD_INT 11
3429: PUSH
3430: LD_INT 12
3432: PUSH
3433: LD_INT 13
3435: PUSH
3436: LD_INT 14
3438: PUSH
3439: LD_INT 1
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: LD_INT 3
3447: PUSH
3448: LD_INT 4
3450: PUSH
3451: LD_INT 5
3453: PUSH
3454: LD_INT 21
3456: PUSH
3457: LD_INT 23
3459: PUSH
3460: LD_INT 22
3462: PUSH
3463: LD_INT 24
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: ST_TO_ADDR
3481: GO 3542
3483: LD_INT 3
3485: DOUBLE
3486: EQUAL
3487: IFTRUE 3491
3489: GO 3541
3491: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3492: LD_ADDR_VAR 0 3
3496: PUSH
3497: LD_INT 13
3499: PUSH
3500: LD_INT 14
3502: PUSH
3503: LD_INT 2
3505: PUSH
3506: LD_INT 3
3508: PUSH
3509: LD_INT 4
3511: PUSH
3512: LD_INT 5
3514: PUSH
3515: LD_INT 21
3517: PUSH
3518: LD_INT 22
3520: PUSH
3521: LD_INT 23
3523: PUSH
3524: LD_INT 24
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: ST_TO_ADDR
3539: GO 3542
3541: POP
// result := ( chassis in result ) ;
3542: LD_ADDR_VAR 0 3
3546: PUSH
3547: LD_VAR 0 1
3551: PUSH
3552: LD_VAR 0 3
3556: IN
3557: ST_TO_ADDR
// end ;
3558: LD_VAR 0 3
3562: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3563: LD_INT 0
3565: PPUSH
// if not chassis or not weapon then
3566: LD_VAR 0 1
3570: NOT
3571: PUSH
3572: LD_VAR 0 2
3576: NOT
3577: OR
3578: IFFALSE 3582
// exit ;
3580: GO 4608
// case weapon of us_machine_gun :
3582: LD_VAR 0 2
3586: PUSH
3587: LD_INT 2
3589: DOUBLE
3590: EQUAL
3591: IFTRUE 3595
3593: GO 3625
3595: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3596: LD_ADDR_VAR 0 3
3600: PUSH
3601: LD_INT 1
3603: PUSH
3604: LD_INT 2
3606: PUSH
3607: LD_INT 3
3609: PUSH
3610: LD_INT 4
3612: PUSH
3613: LD_INT 5
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: ST_TO_ADDR
3623: GO 4592
3625: LD_INT 3
3627: DOUBLE
3628: EQUAL
3629: IFTRUE 3633
3631: GO 3663
3633: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3634: LD_ADDR_VAR 0 3
3638: PUSH
3639: LD_INT 1
3641: PUSH
3642: LD_INT 2
3644: PUSH
3645: LD_INT 3
3647: PUSH
3648: LD_INT 4
3650: PUSH
3651: LD_INT 5
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
3661: GO 4592
3663: LD_INT 11
3665: DOUBLE
3666: EQUAL
3667: IFTRUE 3671
3669: GO 3701
3671: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3672: LD_ADDR_VAR 0 3
3676: PUSH
3677: LD_INT 1
3679: PUSH
3680: LD_INT 2
3682: PUSH
3683: LD_INT 3
3685: PUSH
3686: LD_INT 4
3688: PUSH
3689: LD_INT 5
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: ST_TO_ADDR
3699: GO 4592
3701: LD_INT 4
3703: DOUBLE
3704: EQUAL
3705: IFTRUE 3709
3707: GO 3735
3709: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3710: LD_ADDR_VAR 0 3
3714: PUSH
3715: LD_INT 2
3717: PUSH
3718: LD_INT 3
3720: PUSH
3721: LD_INT 4
3723: PUSH
3724: LD_INT 5
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: ST_TO_ADDR
3733: GO 4592
3735: LD_INT 5
3737: DOUBLE
3738: EQUAL
3739: IFTRUE 3743
3741: GO 3769
3743: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: LD_INT 2
3751: PUSH
3752: LD_INT 3
3754: PUSH
3755: LD_INT 4
3757: PUSH
3758: LD_INT 5
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: ST_TO_ADDR
3767: GO 4592
3769: LD_INT 9
3771: DOUBLE
3772: EQUAL
3773: IFTRUE 3777
3775: GO 3803
3777: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3778: LD_ADDR_VAR 0 3
3782: PUSH
3783: LD_INT 2
3785: PUSH
3786: LD_INT 3
3788: PUSH
3789: LD_INT 4
3791: PUSH
3792: LD_INT 5
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: ST_TO_ADDR
3801: GO 4592
3803: LD_INT 7
3805: DOUBLE
3806: EQUAL
3807: IFTRUE 3811
3809: GO 3837
3811: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
3812: LD_ADDR_VAR 0 3
3816: PUSH
3817: LD_INT 2
3819: PUSH
3820: LD_INT 3
3822: PUSH
3823: LD_INT 4
3825: PUSH
3826: LD_INT 5
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: ST_TO_ADDR
3835: GO 4592
3837: LD_INT 12
3839: DOUBLE
3840: EQUAL
3841: IFTRUE 3845
3843: GO 3871
3845: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
3846: LD_ADDR_VAR 0 3
3850: PUSH
3851: LD_INT 2
3853: PUSH
3854: LD_INT 3
3856: PUSH
3857: LD_INT 4
3859: PUSH
3860: LD_INT 5
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: ST_TO_ADDR
3869: GO 4592
3871: LD_INT 13
3873: DOUBLE
3874: EQUAL
3875: IFTRUE 3879
3877: GO 3905
3879: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
3880: LD_ADDR_VAR 0 3
3884: PUSH
3885: LD_INT 2
3887: PUSH
3888: LD_INT 3
3890: PUSH
3891: LD_INT 4
3893: PUSH
3894: LD_INT 5
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: ST_TO_ADDR
3903: GO 4592
3905: LD_INT 14
3907: DOUBLE
3908: EQUAL
3909: IFTRUE 3913
3911: GO 3931
3913: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
3914: LD_ADDR_VAR 0 3
3918: PUSH
3919: LD_INT 4
3921: PUSH
3922: LD_INT 5
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: ST_TO_ADDR
3929: GO 4592
3931: LD_INT 6
3933: DOUBLE
3934: EQUAL
3935: IFTRUE 3939
3937: GO 3957
3939: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
3940: LD_ADDR_VAR 0 3
3944: PUSH
3945: LD_INT 4
3947: PUSH
3948: LD_INT 5
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: ST_TO_ADDR
3955: GO 4592
3957: LD_INT 10
3959: DOUBLE
3960: EQUAL
3961: IFTRUE 3965
3963: GO 3983
3965: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
3966: LD_ADDR_VAR 0 3
3970: PUSH
3971: LD_INT 4
3973: PUSH
3974: LD_INT 5
3976: PUSH
3977: EMPTY
3978: LIST
3979: LIST
3980: ST_TO_ADDR
3981: GO 4592
3983: LD_INT 22
3985: DOUBLE
3986: EQUAL
3987: IFTRUE 3991
3989: GO 4017
3991: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
3992: LD_ADDR_VAR 0 3
3996: PUSH
3997: LD_INT 11
3999: PUSH
4000: LD_INT 12
4002: PUSH
4003: LD_INT 13
4005: PUSH
4006: LD_INT 14
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: ST_TO_ADDR
4015: GO 4592
4017: LD_INT 23
4019: DOUBLE
4020: EQUAL
4021: IFTRUE 4025
4023: GO 4051
4025: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4026: LD_ADDR_VAR 0 3
4030: PUSH
4031: LD_INT 11
4033: PUSH
4034: LD_INT 12
4036: PUSH
4037: LD_INT 13
4039: PUSH
4040: LD_INT 14
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: ST_TO_ADDR
4049: GO 4592
4051: LD_INT 24
4053: DOUBLE
4054: EQUAL
4055: IFTRUE 4059
4057: GO 4085
4059: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4060: LD_ADDR_VAR 0 3
4064: PUSH
4065: LD_INT 11
4067: PUSH
4068: LD_INT 12
4070: PUSH
4071: LD_INT 13
4073: PUSH
4074: LD_INT 14
4076: PUSH
4077: EMPTY
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: ST_TO_ADDR
4083: GO 4592
4085: LD_INT 30
4087: DOUBLE
4088: EQUAL
4089: IFTRUE 4093
4091: GO 4119
4093: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4094: LD_ADDR_VAR 0 3
4098: PUSH
4099: LD_INT 11
4101: PUSH
4102: LD_INT 12
4104: PUSH
4105: LD_INT 13
4107: PUSH
4108: LD_INT 14
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: ST_TO_ADDR
4117: GO 4592
4119: LD_INT 25
4121: DOUBLE
4122: EQUAL
4123: IFTRUE 4127
4125: GO 4145
4127: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4128: LD_ADDR_VAR 0 3
4132: PUSH
4133: LD_INT 13
4135: PUSH
4136: LD_INT 14
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: ST_TO_ADDR
4143: GO 4592
4145: LD_INT 27
4147: DOUBLE
4148: EQUAL
4149: IFTRUE 4153
4151: GO 4171
4153: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4154: LD_ADDR_VAR 0 3
4158: PUSH
4159: LD_INT 13
4161: PUSH
4162: LD_INT 14
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: ST_TO_ADDR
4169: GO 4592
4171: LD_INT 28
4173: DOUBLE
4174: EQUAL
4175: IFTRUE 4179
4177: GO 4197
4179: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4180: LD_ADDR_VAR 0 3
4184: PUSH
4185: LD_INT 13
4187: PUSH
4188: LD_INT 14
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: ST_TO_ADDR
4195: GO 4592
4197: LD_INT 29
4199: DOUBLE
4200: EQUAL
4201: IFTRUE 4205
4203: GO 4223
4205: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4206: LD_ADDR_VAR 0 3
4210: PUSH
4211: LD_INT 13
4213: PUSH
4214: LD_INT 14
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: ST_TO_ADDR
4221: GO 4592
4223: LD_INT 31
4225: DOUBLE
4226: EQUAL
4227: IFTRUE 4231
4229: GO 4249
4231: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4232: LD_ADDR_VAR 0 3
4236: PUSH
4237: LD_INT 13
4239: PUSH
4240: LD_INT 14
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: ST_TO_ADDR
4247: GO 4592
4249: LD_INT 26
4251: DOUBLE
4252: EQUAL
4253: IFTRUE 4257
4255: GO 4275
4257: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4258: LD_ADDR_VAR 0 3
4262: PUSH
4263: LD_INT 13
4265: PUSH
4266: LD_INT 14
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: ST_TO_ADDR
4273: GO 4592
4275: LD_INT 42
4277: DOUBLE
4278: EQUAL
4279: IFTRUE 4283
4281: GO 4309
4283: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4284: LD_ADDR_VAR 0 3
4288: PUSH
4289: LD_INT 21
4291: PUSH
4292: LD_INT 22
4294: PUSH
4295: LD_INT 23
4297: PUSH
4298: LD_INT 24
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: ST_TO_ADDR
4307: GO 4592
4309: LD_INT 43
4311: DOUBLE
4312: EQUAL
4313: IFTRUE 4317
4315: GO 4343
4317: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4318: LD_ADDR_VAR 0 3
4322: PUSH
4323: LD_INT 21
4325: PUSH
4326: LD_INT 22
4328: PUSH
4329: LD_INT 23
4331: PUSH
4332: LD_INT 24
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: ST_TO_ADDR
4341: GO 4592
4343: LD_INT 44
4345: DOUBLE
4346: EQUAL
4347: IFTRUE 4351
4349: GO 4377
4351: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4352: LD_ADDR_VAR 0 3
4356: PUSH
4357: LD_INT 21
4359: PUSH
4360: LD_INT 22
4362: PUSH
4363: LD_INT 23
4365: PUSH
4366: LD_INT 24
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: ST_TO_ADDR
4375: GO 4592
4377: LD_INT 45
4379: DOUBLE
4380: EQUAL
4381: IFTRUE 4385
4383: GO 4411
4385: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4386: LD_ADDR_VAR 0 3
4390: PUSH
4391: LD_INT 21
4393: PUSH
4394: LD_INT 22
4396: PUSH
4397: LD_INT 23
4399: PUSH
4400: LD_INT 24
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: ST_TO_ADDR
4409: GO 4592
4411: LD_INT 49
4413: DOUBLE
4414: EQUAL
4415: IFTRUE 4419
4417: GO 4445
4419: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4420: LD_ADDR_VAR 0 3
4424: PUSH
4425: LD_INT 21
4427: PUSH
4428: LD_INT 22
4430: PUSH
4431: LD_INT 23
4433: PUSH
4434: LD_INT 24
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: ST_TO_ADDR
4443: GO 4592
4445: LD_INT 51
4447: DOUBLE
4448: EQUAL
4449: IFTRUE 4453
4451: GO 4479
4453: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4454: LD_ADDR_VAR 0 3
4458: PUSH
4459: LD_INT 21
4461: PUSH
4462: LD_INT 22
4464: PUSH
4465: LD_INT 23
4467: PUSH
4468: LD_INT 24
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: ST_TO_ADDR
4477: GO 4592
4479: LD_INT 52
4481: DOUBLE
4482: EQUAL
4483: IFTRUE 4487
4485: GO 4513
4487: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4488: LD_ADDR_VAR 0 3
4492: PUSH
4493: LD_INT 21
4495: PUSH
4496: LD_INT 22
4498: PUSH
4499: LD_INT 23
4501: PUSH
4502: LD_INT 24
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: ST_TO_ADDR
4511: GO 4592
4513: LD_INT 53
4515: DOUBLE
4516: EQUAL
4517: IFTRUE 4521
4519: GO 4539
4521: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4522: LD_ADDR_VAR 0 3
4526: PUSH
4527: LD_INT 23
4529: PUSH
4530: LD_INT 24
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: ST_TO_ADDR
4537: GO 4592
4539: LD_INT 46
4541: DOUBLE
4542: EQUAL
4543: IFTRUE 4547
4545: GO 4565
4547: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4548: LD_ADDR_VAR 0 3
4552: PUSH
4553: LD_INT 23
4555: PUSH
4556: LD_INT 24
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: ST_TO_ADDR
4563: GO 4592
4565: LD_INT 47
4567: DOUBLE
4568: EQUAL
4569: IFTRUE 4573
4571: GO 4591
4573: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4574: LD_ADDR_VAR 0 3
4578: PUSH
4579: LD_INT 23
4581: PUSH
4582: LD_INT 24
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: ST_TO_ADDR
4589: GO 4592
4591: POP
// result := ( chassis in result ) ;
4592: LD_ADDR_VAR 0 3
4596: PUSH
4597: LD_VAR 0 1
4601: PUSH
4602: LD_VAR 0 3
4606: IN
4607: ST_TO_ADDR
// end ;
4608: LD_VAR 0 3
4612: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4613: LD_INT 0
4615: PPUSH
4616: PPUSH
4617: PPUSH
4618: PPUSH
4619: PPUSH
4620: PPUSH
4621: PPUSH
// result := array ;
4622: LD_ADDR_VAR 0 5
4626: PUSH
4627: LD_VAR 0 1
4631: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4632: LD_VAR 0 1
4636: NOT
4637: PUSH
4638: LD_VAR 0 2
4642: NOT
4643: OR
4644: PUSH
4645: LD_VAR 0 3
4649: NOT
4650: OR
4651: PUSH
4652: LD_VAR 0 2
4656: PUSH
4657: LD_VAR 0 1
4661: GREATER
4662: OR
4663: PUSH
4664: LD_VAR 0 3
4668: PUSH
4669: LD_VAR 0 1
4673: GREATER
4674: OR
4675: IFFALSE 4679
// exit ;
4677: GO 4975
// if direction then
4679: LD_VAR 0 4
4683: IFFALSE 4747
// begin d := 1 ;
4685: LD_ADDR_VAR 0 9
4689: PUSH
4690: LD_INT 1
4692: ST_TO_ADDR
// if i_from > i_to then
4693: LD_VAR 0 2
4697: PUSH
4698: LD_VAR 0 3
4702: GREATER
4703: IFFALSE 4729
// length := ( array - i_from ) + i_to else
4705: LD_ADDR_VAR 0 11
4709: PUSH
4710: LD_VAR 0 1
4714: PUSH
4715: LD_VAR 0 2
4719: MINUS
4720: PUSH
4721: LD_VAR 0 3
4725: PLUS
4726: ST_TO_ADDR
4727: GO 4745
// length := i_to - i_from ;
4729: LD_ADDR_VAR 0 11
4733: PUSH
4734: LD_VAR 0 3
4738: PUSH
4739: LD_VAR 0 2
4743: MINUS
4744: ST_TO_ADDR
// end else
4745: GO 4808
// begin d := - 1 ;
4747: LD_ADDR_VAR 0 9
4751: PUSH
4752: LD_INT 1
4754: NEG
4755: ST_TO_ADDR
// if i_from > i_to then
4756: LD_VAR 0 2
4760: PUSH
4761: LD_VAR 0 3
4765: GREATER
4766: IFFALSE 4786
// length := i_from - i_to else
4768: LD_ADDR_VAR 0 11
4772: PUSH
4773: LD_VAR 0 2
4777: PUSH
4778: LD_VAR 0 3
4782: MINUS
4783: ST_TO_ADDR
4784: GO 4808
// length := ( array - i_to ) + i_from ;
4786: LD_ADDR_VAR 0 11
4790: PUSH
4791: LD_VAR 0 1
4795: PUSH
4796: LD_VAR 0 3
4800: MINUS
4801: PUSH
4802: LD_VAR 0 2
4806: PLUS
4807: ST_TO_ADDR
// end ; if not length then
4808: LD_VAR 0 11
4812: NOT
4813: IFFALSE 4817
// exit ;
4815: GO 4975
// tmp := array ;
4817: LD_ADDR_VAR 0 10
4821: PUSH
4822: LD_VAR 0 1
4826: ST_TO_ADDR
// for i = 1 to length do
4827: LD_ADDR_VAR 0 6
4831: PUSH
4832: DOUBLE
4833: LD_INT 1
4835: DEC
4836: ST_TO_ADDR
4837: LD_VAR 0 11
4841: PUSH
4842: FOR_TO
4843: IFFALSE 4963
// begin for j = 1 to array do
4845: LD_ADDR_VAR 0 7
4849: PUSH
4850: DOUBLE
4851: LD_INT 1
4853: DEC
4854: ST_TO_ADDR
4855: LD_VAR 0 1
4859: PUSH
4860: FOR_TO
4861: IFFALSE 4949
// begin k := j + d ;
4863: LD_ADDR_VAR 0 8
4867: PUSH
4868: LD_VAR 0 7
4872: PUSH
4873: LD_VAR 0 9
4877: PLUS
4878: ST_TO_ADDR
// if k > array then
4879: LD_VAR 0 8
4883: PUSH
4884: LD_VAR 0 1
4888: GREATER
4889: IFFALSE 4899
// k := 1 ;
4891: LD_ADDR_VAR 0 8
4895: PUSH
4896: LD_INT 1
4898: ST_TO_ADDR
// if not k then
4899: LD_VAR 0 8
4903: NOT
4904: IFFALSE 4916
// k := array ;
4906: LD_ADDR_VAR 0 8
4910: PUSH
4911: LD_VAR 0 1
4915: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
4916: LD_ADDR_VAR 0 10
4920: PUSH
4921: LD_VAR 0 10
4925: PPUSH
4926: LD_VAR 0 8
4930: PPUSH
4931: LD_VAR 0 1
4935: PUSH
4936: LD_VAR 0 7
4940: ARRAY
4941: PPUSH
4942: CALL_OW 1
4946: ST_TO_ADDR
// end ;
4947: GO 4860
4949: POP
4950: POP
// array := tmp ;
4951: LD_ADDR_VAR 0 1
4955: PUSH
4956: LD_VAR 0 10
4960: ST_TO_ADDR
// end ;
4961: GO 4842
4963: POP
4964: POP
// result := array ;
4965: LD_ADDR_VAR 0 5
4969: PUSH
4970: LD_VAR 0 1
4974: ST_TO_ADDR
// end ;
4975: LD_VAR 0 5
4979: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
4980: LD_INT 0
4982: PPUSH
4983: PPUSH
// result := 0 ;
4984: LD_ADDR_VAR 0 3
4988: PUSH
4989: LD_INT 0
4991: ST_TO_ADDR
// if not array or not value in array then
4992: LD_VAR 0 1
4996: NOT
4997: PUSH
4998: LD_VAR 0 2
5002: PUSH
5003: LD_VAR 0 1
5007: IN
5008: NOT
5009: OR
5010: IFFALSE 5014
// exit ;
5012: GO 5068
// for i = 1 to array do
5014: LD_ADDR_VAR 0 4
5018: PUSH
5019: DOUBLE
5020: LD_INT 1
5022: DEC
5023: ST_TO_ADDR
5024: LD_VAR 0 1
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5066
// if value = array [ i ] then
5032: LD_VAR 0 2
5036: PUSH
5037: LD_VAR 0 1
5041: PUSH
5042: LD_VAR 0 4
5046: ARRAY
5047: EQUAL
5048: IFFALSE 5064
// begin result := i ;
5050: LD_ADDR_VAR 0 3
5054: PUSH
5055: LD_VAR 0 4
5059: ST_TO_ADDR
// exit ;
5060: POP
5061: POP
5062: GO 5068
// end ;
5064: GO 5029
5066: POP
5067: POP
// end ;
5068: LD_VAR 0 3
5072: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5073: LD_INT 0
5075: PPUSH
// vc_chassis := chassis ;
5076: LD_ADDR_OWVAR 37
5080: PUSH
5081: LD_VAR 0 1
5085: ST_TO_ADDR
// vc_engine := engine ;
5086: LD_ADDR_OWVAR 39
5090: PUSH
5091: LD_VAR 0 2
5095: ST_TO_ADDR
// vc_control := control ;
5096: LD_ADDR_OWVAR 38
5100: PUSH
5101: LD_VAR 0 3
5105: ST_TO_ADDR
// vc_weapon := weapon ;
5106: LD_ADDR_OWVAR 40
5110: PUSH
5111: LD_VAR 0 4
5115: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5116: LD_ADDR_OWVAR 41
5120: PUSH
5121: LD_VAR 0 5
5125: ST_TO_ADDR
// end ;
5126: LD_VAR 0 6
5130: RET
// export function WantPlant ( unit ) ; var task ; begin
5131: LD_INT 0
5133: PPUSH
5134: PPUSH
// result := false ;
5135: LD_ADDR_VAR 0 2
5139: PUSH
5140: LD_INT 0
5142: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5143: LD_ADDR_VAR 0 3
5147: PUSH
5148: LD_VAR 0 1
5152: PPUSH
5153: CALL_OW 437
5157: ST_TO_ADDR
// if task then
5158: LD_VAR 0 3
5162: IFFALSE 5190
// if task [ 1 ] [ 1 ] = p then
5164: LD_VAR 0 3
5168: PUSH
5169: LD_INT 1
5171: ARRAY
5172: PUSH
5173: LD_INT 1
5175: ARRAY
5176: PUSH
5177: LD_STRING p
5179: EQUAL
5180: IFFALSE 5190
// result := true ;
5182: LD_ADDR_VAR 0 2
5186: PUSH
5187: LD_INT 1
5189: ST_TO_ADDR
// end ;
5190: LD_VAR 0 2
5194: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5195: LD_INT 0
5197: PPUSH
5198: PPUSH
5199: PPUSH
5200: PPUSH
// if pos < 1 then
5201: LD_VAR 0 2
5205: PUSH
5206: LD_INT 1
5208: LESS
5209: IFFALSE 5213
// exit ;
5211: GO 5516
// if pos = 1 then
5213: LD_VAR 0 2
5217: PUSH
5218: LD_INT 1
5220: EQUAL
5221: IFFALSE 5254
// result := Replace ( arr , pos [ 1 ] , value ) else
5223: LD_ADDR_VAR 0 4
5227: PUSH
5228: LD_VAR 0 1
5232: PPUSH
5233: LD_VAR 0 2
5237: PUSH
5238: LD_INT 1
5240: ARRAY
5241: PPUSH
5242: LD_VAR 0 3
5246: PPUSH
5247: CALL_OW 1
5251: ST_TO_ADDR
5252: GO 5516
// begin tmp := arr ;
5254: LD_ADDR_VAR 0 6
5258: PUSH
5259: LD_VAR 0 1
5263: ST_TO_ADDR
// s_arr := [ tmp ] ;
5264: LD_ADDR_VAR 0 7
5268: PUSH
5269: LD_VAR 0 6
5273: PUSH
5274: EMPTY
5275: LIST
5276: ST_TO_ADDR
// for i = 1 to pos - 1 do
5277: LD_ADDR_VAR 0 5
5281: PUSH
5282: DOUBLE
5283: LD_INT 1
5285: DEC
5286: ST_TO_ADDR
5287: LD_VAR 0 2
5291: PUSH
5292: LD_INT 1
5294: MINUS
5295: PUSH
5296: FOR_TO
5297: IFFALSE 5342
// begin tmp := tmp [ pos [ i ] ] ;
5299: LD_ADDR_VAR 0 6
5303: PUSH
5304: LD_VAR 0 6
5308: PUSH
5309: LD_VAR 0 2
5313: PUSH
5314: LD_VAR 0 5
5318: ARRAY
5319: ARRAY
5320: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5321: LD_ADDR_VAR 0 7
5325: PUSH
5326: LD_VAR 0 7
5330: PUSH
5331: LD_VAR 0 6
5335: PUSH
5336: EMPTY
5337: LIST
5338: ADD
5339: ST_TO_ADDR
// end ;
5340: GO 5296
5342: POP
5343: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5344: LD_ADDR_VAR 0 6
5348: PUSH
5349: LD_VAR 0 6
5353: PPUSH
5354: LD_VAR 0 2
5358: PUSH
5359: LD_VAR 0 2
5363: ARRAY
5364: PPUSH
5365: LD_VAR 0 3
5369: PPUSH
5370: CALL_OW 1
5374: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5375: LD_ADDR_VAR 0 7
5379: PUSH
5380: LD_VAR 0 7
5384: PPUSH
5385: LD_VAR 0 7
5389: PPUSH
5390: LD_VAR 0 6
5394: PPUSH
5395: CALL_OW 1
5399: ST_TO_ADDR
// for i = s_arr downto 2 do
5400: LD_ADDR_VAR 0 5
5404: PUSH
5405: DOUBLE
5406: LD_VAR 0 7
5410: INC
5411: ST_TO_ADDR
5412: LD_INT 2
5414: PUSH
5415: FOR_DOWNTO
5416: IFFALSE 5500
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5418: LD_ADDR_VAR 0 6
5422: PUSH
5423: LD_VAR 0 7
5427: PUSH
5428: LD_VAR 0 5
5432: PUSH
5433: LD_INT 1
5435: MINUS
5436: ARRAY
5437: PPUSH
5438: LD_VAR 0 2
5442: PUSH
5443: LD_VAR 0 5
5447: PUSH
5448: LD_INT 1
5450: MINUS
5451: ARRAY
5452: PPUSH
5453: LD_VAR 0 7
5457: PUSH
5458: LD_VAR 0 5
5462: ARRAY
5463: PPUSH
5464: CALL_OW 1
5468: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5469: LD_ADDR_VAR 0 7
5473: PUSH
5474: LD_VAR 0 7
5478: PPUSH
5479: LD_VAR 0 5
5483: PUSH
5484: LD_INT 1
5486: MINUS
5487: PPUSH
5488: LD_VAR 0 6
5492: PPUSH
5493: CALL_OW 1
5497: ST_TO_ADDR
// end ;
5498: GO 5415
5500: POP
5501: POP
// result := s_arr [ 1 ] ;
5502: LD_ADDR_VAR 0 4
5506: PUSH
5507: LD_VAR 0 7
5511: PUSH
5512: LD_INT 1
5514: ARRAY
5515: ST_TO_ADDR
// end ; end ;
5516: LD_VAR 0 4
5520: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5521: LD_INT 0
5523: PPUSH
5524: PPUSH
// if not list then
5525: LD_VAR 0 1
5529: NOT
5530: IFFALSE 5534
// exit ;
5532: GO 5625
// i := list [ pos1 ] ;
5534: LD_ADDR_VAR 0 5
5538: PUSH
5539: LD_VAR 0 1
5543: PUSH
5544: LD_VAR 0 2
5548: ARRAY
5549: ST_TO_ADDR
// if not i then
5550: LD_VAR 0 5
5554: NOT
5555: IFFALSE 5559
// exit ;
5557: GO 5625
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5559: LD_ADDR_VAR 0 1
5563: PUSH
5564: LD_VAR 0 1
5568: PPUSH
5569: LD_VAR 0 2
5573: PPUSH
5574: LD_VAR 0 1
5578: PUSH
5579: LD_VAR 0 3
5583: ARRAY
5584: PPUSH
5585: CALL_OW 1
5589: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5590: LD_ADDR_VAR 0 1
5594: PUSH
5595: LD_VAR 0 1
5599: PPUSH
5600: LD_VAR 0 3
5604: PPUSH
5605: LD_VAR 0 5
5609: PPUSH
5610: CALL_OW 1
5614: ST_TO_ADDR
// result := list ;
5615: LD_ADDR_VAR 0 4
5619: PUSH
5620: LD_VAR 0 1
5624: ST_TO_ADDR
// end ;
5625: LD_VAR 0 4
5629: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5630: LD_INT 0
5632: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5633: LD_ADDR_VAR 0 5
5637: PUSH
5638: LD_VAR 0 1
5642: PPUSH
5643: CALL_OW 250
5647: PPUSH
5648: LD_VAR 0 1
5652: PPUSH
5653: CALL_OW 251
5657: PPUSH
5658: LD_VAR 0 2
5662: PPUSH
5663: LD_VAR 0 3
5667: PPUSH
5668: LD_VAR 0 4
5672: PPUSH
5673: CALL 5683 0 5
5677: ST_TO_ADDR
// end ;
5678: LD_VAR 0 5
5682: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
5683: LD_INT 0
5685: PPUSH
5686: PPUSH
5687: PPUSH
5688: PPUSH
// if not list then
5689: LD_VAR 0 3
5693: NOT
5694: IFFALSE 5698
// exit ;
5696: GO 6086
// result := [ ] ;
5698: LD_ADDR_VAR 0 6
5702: PUSH
5703: EMPTY
5704: ST_TO_ADDR
// for i in list do
5705: LD_ADDR_VAR 0 7
5709: PUSH
5710: LD_VAR 0 3
5714: PUSH
5715: FOR_IN
5716: IFFALSE 5918
// begin tmp := GetDistUnitXY ( i , x , y ) ;
5718: LD_ADDR_VAR 0 9
5722: PUSH
5723: LD_VAR 0 7
5727: PPUSH
5728: LD_VAR 0 1
5732: PPUSH
5733: LD_VAR 0 2
5737: PPUSH
5738: CALL_OW 297
5742: ST_TO_ADDR
// if not result then
5743: LD_VAR 0 6
5747: NOT
5748: IFFALSE 5774
// result := [ [ i , tmp ] ] else
5750: LD_ADDR_VAR 0 6
5754: PUSH
5755: LD_VAR 0 7
5759: PUSH
5760: LD_VAR 0 9
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: PUSH
5769: EMPTY
5770: LIST
5771: ST_TO_ADDR
5772: GO 5916
// begin if result [ result ] [ 2 ] < tmp then
5774: LD_VAR 0 6
5778: PUSH
5779: LD_VAR 0 6
5783: ARRAY
5784: PUSH
5785: LD_INT 2
5787: ARRAY
5788: PUSH
5789: LD_VAR 0 9
5793: LESS
5794: IFFALSE 5836
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
5796: LD_ADDR_VAR 0 6
5800: PUSH
5801: LD_VAR 0 6
5805: PPUSH
5806: LD_VAR 0 6
5810: PUSH
5811: LD_INT 1
5813: PLUS
5814: PPUSH
5815: LD_VAR 0 7
5819: PUSH
5820: LD_VAR 0 9
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: PPUSH
5829: CALL_OW 2
5833: ST_TO_ADDR
5834: GO 5916
// for j = 1 to result do
5836: LD_ADDR_VAR 0 8
5840: PUSH
5841: DOUBLE
5842: LD_INT 1
5844: DEC
5845: ST_TO_ADDR
5846: LD_VAR 0 6
5850: PUSH
5851: FOR_TO
5852: IFFALSE 5914
// begin if tmp < result [ j ] [ 2 ] then
5854: LD_VAR 0 9
5858: PUSH
5859: LD_VAR 0 6
5863: PUSH
5864: LD_VAR 0 8
5868: ARRAY
5869: PUSH
5870: LD_INT 2
5872: ARRAY
5873: LESS
5874: IFFALSE 5912
// begin result := Insert ( result , j , [ i , tmp ] ) ;
5876: LD_ADDR_VAR 0 6
5880: PUSH
5881: LD_VAR 0 6
5885: PPUSH
5886: LD_VAR 0 8
5890: PPUSH
5891: LD_VAR 0 7
5895: PUSH
5896: LD_VAR 0 9
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: PPUSH
5905: CALL_OW 2
5909: ST_TO_ADDR
// break ;
5910: GO 5914
// end ; end ;
5912: GO 5851
5914: POP
5915: POP
// end ; end ;
5916: GO 5715
5918: POP
5919: POP
// if result and not asc then
5920: LD_VAR 0 6
5924: PUSH
5925: LD_VAR 0 4
5929: NOT
5930: AND
5931: IFFALSE 6006
// begin tmp := result ;
5933: LD_ADDR_VAR 0 9
5937: PUSH
5938: LD_VAR 0 6
5942: ST_TO_ADDR
// for i = tmp downto 1 do
5943: LD_ADDR_VAR 0 7
5947: PUSH
5948: DOUBLE
5949: LD_VAR 0 9
5953: INC
5954: ST_TO_ADDR
5955: LD_INT 1
5957: PUSH
5958: FOR_DOWNTO
5959: IFFALSE 6004
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
5961: LD_ADDR_VAR 0 6
5965: PUSH
5966: LD_VAR 0 6
5970: PPUSH
5971: LD_VAR 0 9
5975: PUSH
5976: LD_VAR 0 7
5980: MINUS
5981: PUSH
5982: LD_INT 1
5984: PLUS
5985: PPUSH
5986: LD_VAR 0 9
5990: PUSH
5991: LD_VAR 0 7
5995: ARRAY
5996: PPUSH
5997: CALL_OW 1
6001: ST_TO_ADDR
6002: GO 5958
6004: POP
6005: POP
// end ; tmp := [ ] ;
6006: LD_ADDR_VAR 0 9
6010: PUSH
6011: EMPTY
6012: ST_TO_ADDR
// if mode then
6013: LD_VAR 0 5
6017: IFFALSE 6086
// begin for i = 1 to result do
6019: LD_ADDR_VAR 0 7
6023: PUSH
6024: DOUBLE
6025: LD_INT 1
6027: DEC
6028: ST_TO_ADDR
6029: LD_VAR 0 6
6033: PUSH
6034: FOR_TO
6035: IFFALSE 6074
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6037: LD_ADDR_VAR 0 9
6041: PUSH
6042: LD_VAR 0 9
6046: PPUSH
6047: LD_VAR 0 7
6051: PPUSH
6052: LD_VAR 0 6
6056: PUSH
6057: LD_VAR 0 7
6061: ARRAY
6062: PUSH
6063: LD_INT 1
6065: ARRAY
6066: PPUSH
6067: CALL_OW 1
6071: ST_TO_ADDR
6072: GO 6034
6074: POP
6075: POP
// result := tmp ;
6076: LD_ADDR_VAR 0 6
6080: PUSH
6081: LD_VAR 0 9
6085: ST_TO_ADDR
// end ; end ;
6086: LD_VAR 0 6
6090: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6091: LD_INT 0
6093: PPUSH
6094: PPUSH
6095: PPUSH
6096: PPUSH
6097: PPUSH
6098: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6099: LD_ADDR_VAR 0 5
6103: PUSH
6104: LD_INT 0
6106: PUSH
6107: LD_INT 0
6109: PUSH
6110: LD_INT 0
6112: PUSH
6113: EMPTY
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: ST_TO_ADDR
// if not x or not y then
6121: LD_VAR 0 2
6125: NOT
6126: PUSH
6127: LD_VAR 0 3
6131: NOT
6132: OR
6133: IFFALSE 6137
// exit ;
6135: GO 7783
// if not range then
6137: LD_VAR 0 4
6141: NOT
6142: IFFALSE 6152
// range := 10 ;
6144: LD_ADDR_VAR 0 4
6148: PUSH
6149: LD_INT 10
6151: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6152: LD_ADDR_VAR 0 8
6156: PUSH
6157: LD_INT 81
6159: PUSH
6160: LD_VAR 0 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 92
6171: PUSH
6172: LD_VAR 0 2
6176: PUSH
6177: LD_VAR 0 3
6181: PUSH
6182: LD_VAR 0 4
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: LD_INT 21
6198: PUSH
6199: LD_INT 3
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: LIST
6214: PPUSH
6215: CALL_OW 69
6219: ST_TO_ADDR
// if not tmp then
6220: LD_VAR 0 8
6224: NOT
6225: IFFALSE 6229
// exit ;
6227: GO 7783
// for i in tmp do
6229: LD_ADDR_VAR 0 6
6233: PUSH
6234: LD_VAR 0 8
6238: PUSH
6239: FOR_IN
6240: IFFALSE 7758
// begin points := [ 0 , 0 , 0 ] ;
6242: LD_ADDR_VAR 0 9
6246: PUSH
6247: LD_INT 0
6249: PUSH
6250: LD_INT 0
6252: PUSH
6253: LD_INT 0
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: LIST
6260: ST_TO_ADDR
// bpoints := 1 ;
6261: LD_ADDR_VAR 0 10
6265: PUSH
6266: LD_INT 1
6268: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6269: LD_VAR 0 6
6273: PPUSH
6274: CALL_OW 247
6278: PUSH
6279: LD_INT 1
6281: DOUBLE
6282: EQUAL
6283: IFTRUE 6287
6285: GO 6865
6287: POP
// begin if GetClass ( i ) = 1 then
6288: LD_VAR 0 6
6292: PPUSH
6293: CALL_OW 257
6297: PUSH
6298: LD_INT 1
6300: EQUAL
6301: IFFALSE 6322
// points := [ 10 , 5 , 3 ] ;
6303: LD_ADDR_VAR 0 9
6307: PUSH
6308: LD_INT 10
6310: PUSH
6311: LD_INT 5
6313: PUSH
6314: LD_INT 3
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: LIST
6321: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6322: LD_VAR 0 6
6326: PPUSH
6327: CALL_OW 257
6331: PUSH
6332: LD_INT 2
6334: PUSH
6335: LD_INT 3
6337: PUSH
6338: LD_INT 4
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: LIST
6345: IN
6346: IFFALSE 6367
// points := [ 3 , 2 , 1 ] ;
6348: LD_ADDR_VAR 0 9
6352: PUSH
6353: LD_INT 3
6355: PUSH
6356: LD_INT 2
6358: PUSH
6359: LD_INT 1
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6367: LD_VAR 0 6
6371: PPUSH
6372: CALL_OW 257
6376: PUSH
6377: LD_INT 5
6379: EQUAL
6380: IFFALSE 6401
// points := [ 130 , 5 , 2 ] ;
6382: LD_ADDR_VAR 0 9
6386: PUSH
6387: LD_INT 130
6389: PUSH
6390: LD_INT 5
6392: PUSH
6393: LD_INT 2
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: LIST
6400: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6401: LD_VAR 0 6
6405: PPUSH
6406: CALL_OW 257
6410: PUSH
6411: LD_INT 8
6413: EQUAL
6414: IFFALSE 6435
// points := [ 35 , 35 , 30 ] ;
6416: LD_ADDR_VAR 0 9
6420: PUSH
6421: LD_INT 35
6423: PUSH
6424: LD_INT 35
6426: PUSH
6427: LD_INT 30
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: LIST
6434: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6435: LD_VAR 0 6
6439: PPUSH
6440: CALL_OW 257
6444: PUSH
6445: LD_INT 9
6447: EQUAL
6448: IFFALSE 6469
// points := [ 20 , 55 , 40 ] ;
6450: LD_ADDR_VAR 0 9
6454: PUSH
6455: LD_INT 20
6457: PUSH
6458: LD_INT 55
6460: PUSH
6461: LD_INT 40
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: LIST
6468: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6469: LD_VAR 0 6
6473: PPUSH
6474: CALL_OW 257
6478: PUSH
6479: LD_INT 12
6481: PUSH
6482: LD_INT 16
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: IN
6489: IFFALSE 6510
// points := [ 5 , 3 , 2 ] ;
6491: LD_ADDR_VAR 0 9
6495: PUSH
6496: LD_INT 5
6498: PUSH
6499: LD_INT 3
6501: PUSH
6502: LD_INT 2
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: LIST
6509: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6510: LD_VAR 0 6
6514: PPUSH
6515: CALL_OW 257
6519: PUSH
6520: LD_INT 17
6522: EQUAL
6523: IFFALSE 6544
// points := [ 100 , 50 , 75 ] ;
6525: LD_ADDR_VAR 0 9
6529: PUSH
6530: LD_INT 100
6532: PUSH
6533: LD_INT 50
6535: PUSH
6536: LD_INT 75
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6544: LD_VAR 0 6
6548: PPUSH
6549: CALL_OW 257
6553: PUSH
6554: LD_INT 15
6556: EQUAL
6557: IFFALSE 6578
// points := [ 10 , 5 , 3 ] ;
6559: LD_ADDR_VAR 0 9
6563: PUSH
6564: LD_INT 10
6566: PUSH
6567: LD_INT 5
6569: PUSH
6570: LD_INT 3
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: LIST
6577: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6578: LD_VAR 0 6
6582: PPUSH
6583: CALL_OW 257
6587: PUSH
6588: LD_INT 14
6590: EQUAL
6591: IFFALSE 6612
// points := [ 10 , 0 , 0 ] ;
6593: LD_ADDR_VAR 0 9
6597: PUSH
6598: LD_INT 10
6600: PUSH
6601: LD_INT 0
6603: PUSH
6604: LD_INT 0
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: LIST
6611: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6612: LD_VAR 0 6
6616: PPUSH
6617: CALL_OW 257
6621: PUSH
6622: LD_INT 11
6624: EQUAL
6625: IFFALSE 6646
// points := [ 30 , 10 , 5 ] ;
6627: LD_ADDR_VAR 0 9
6631: PUSH
6632: LD_INT 30
6634: PUSH
6635: LD_INT 10
6637: PUSH
6638: LD_INT 5
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6646: LD_VAR 0 1
6650: PPUSH
6651: LD_INT 5
6653: PPUSH
6654: CALL_OW 321
6658: PUSH
6659: LD_INT 2
6661: EQUAL
6662: IFFALSE 6679
// bpoints := bpoints * 1.8 ;
6664: LD_ADDR_VAR 0 10
6668: PUSH
6669: LD_VAR 0 10
6673: PUSH
6674: LD_REAL  1.80000000000000E+0000
6677: MUL
6678: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
6679: LD_VAR 0 6
6683: PPUSH
6684: CALL_OW 257
6688: PUSH
6689: LD_INT 1
6691: PUSH
6692: LD_INT 2
6694: PUSH
6695: LD_INT 3
6697: PUSH
6698: LD_INT 4
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: IN
6707: PUSH
6708: LD_VAR 0 1
6712: PPUSH
6713: LD_INT 51
6715: PPUSH
6716: CALL_OW 321
6720: PUSH
6721: LD_INT 2
6723: EQUAL
6724: AND
6725: IFFALSE 6742
// bpoints := bpoints * 1.2 ;
6727: LD_ADDR_VAR 0 10
6731: PUSH
6732: LD_VAR 0 10
6736: PUSH
6737: LD_REAL  1.20000000000000E+0000
6740: MUL
6741: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
6742: LD_VAR 0 6
6746: PPUSH
6747: CALL_OW 257
6751: PUSH
6752: LD_INT 5
6754: PUSH
6755: LD_INT 7
6757: PUSH
6758: LD_INT 9
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: LIST
6765: IN
6766: PUSH
6767: LD_VAR 0 1
6771: PPUSH
6772: LD_INT 52
6774: PPUSH
6775: CALL_OW 321
6779: PUSH
6780: LD_INT 2
6782: EQUAL
6783: AND
6784: IFFALSE 6801
// bpoints := bpoints * 1.5 ;
6786: LD_ADDR_VAR 0 10
6790: PUSH
6791: LD_VAR 0 10
6795: PUSH
6796: LD_REAL  1.50000000000000E+0000
6799: MUL
6800: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
6801: LD_VAR 0 1
6805: PPUSH
6806: LD_INT 66
6808: PPUSH
6809: CALL_OW 321
6813: PUSH
6814: LD_INT 2
6816: EQUAL
6817: IFFALSE 6834
// bpoints := bpoints * 1.1 ;
6819: LD_ADDR_VAR 0 10
6823: PUSH
6824: LD_VAR 0 10
6828: PUSH
6829: LD_REAL  1.10000000000000E+0000
6832: MUL
6833: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
6834: LD_ADDR_VAR 0 10
6838: PUSH
6839: LD_VAR 0 10
6843: PUSH
6844: LD_VAR 0 6
6848: PPUSH
6849: LD_INT 1
6851: PPUSH
6852: CALL_OW 259
6856: PUSH
6857: LD_REAL  1.15000000000000E+0000
6860: MUL
6861: MUL
6862: ST_TO_ADDR
// end ; unit_vehicle :
6863: GO 7687
6865: LD_INT 2
6867: DOUBLE
6868: EQUAL
6869: IFTRUE 6873
6871: GO 7675
6873: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
6874: LD_VAR 0 6
6878: PPUSH
6879: CALL_OW 264
6883: PUSH
6884: LD_INT 2
6886: PUSH
6887: LD_INT 42
6889: PUSH
6890: LD_INT 24
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: IN
6898: IFFALSE 6919
// points := [ 25 , 5 , 3 ] ;
6900: LD_ADDR_VAR 0 9
6904: PUSH
6905: LD_INT 25
6907: PUSH
6908: LD_INT 5
6910: PUSH
6911: LD_INT 3
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
6919: LD_VAR 0 6
6923: PPUSH
6924: CALL_OW 264
6928: PUSH
6929: LD_INT 4
6931: PUSH
6932: LD_INT 43
6934: PUSH
6935: LD_INT 25
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: LIST
6942: IN
6943: IFFALSE 6964
// points := [ 40 , 15 , 5 ] ;
6945: LD_ADDR_VAR 0 9
6949: PUSH
6950: LD_INT 40
6952: PUSH
6953: LD_INT 15
6955: PUSH
6956: LD_INT 5
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
6964: LD_VAR 0 6
6968: PPUSH
6969: CALL_OW 264
6973: PUSH
6974: LD_INT 3
6976: PUSH
6977: LD_INT 23
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: IN
6984: IFFALSE 7005
// points := [ 7 , 25 , 8 ] ;
6986: LD_ADDR_VAR 0 9
6990: PUSH
6991: LD_INT 7
6993: PUSH
6994: LD_INT 25
6996: PUSH
6997: LD_INT 8
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: LIST
7004: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7005: LD_VAR 0 6
7009: PPUSH
7010: CALL_OW 264
7014: PUSH
7015: LD_INT 5
7017: PUSH
7018: LD_INT 27
7020: PUSH
7021: LD_INT 44
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: IN
7029: IFFALSE 7050
// points := [ 14 , 50 , 16 ] ;
7031: LD_ADDR_VAR 0 9
7035: PUSH
7036: LD_INT 14
7038: PUSH
7039: LD_INT 50
7041: PUSH
7042: LD_INT 16
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7050: LD_VAR 0 6
7054: PPUSH
7055: CALL_OW 264
7059: PUSH
7060: LD_INT 6
7062: PUSH
7063: LD_INT 46
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: IN
7070: IFFALSE 7091
// points := [ 32 , 120 , 70 ] ;
7072: LD_ADDR_VAR 0 9
7076: PUSH
7077: LD_INT 32
7079: PUSH
7080: LD_INT 120
7082: PUSH
7083: LD_INT 70
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
7091: LD_VAR 0 6
7095: PPUSH
7096: CALL_OW 264
7100: PUSH
7101: LD_INT 7
7103: PUSH
7104: LD_INT 28
7106: PUSH
7107: LD_INT 45
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: IN
7115: IFFALSE 7136
// points := [ 35 , 20 , 45 ] ;
7117: LD_ADDR_VAR 0 9
7121: PUSH
7122: LD_INT 35
7124: PUSH
7125: LD_INT 20
7127: PUSH
7128: LD_INT 45
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: LIST
7135: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7136: LD_VAR 0 6
7140: PPUSH
7141: CALL_OW 264
7145: PUSH
7146: LD_INT 47
7148: PUSH
7149: EMPTY
7150: LIST
7151: IN
7152: IFFALSE 7173
// points := [ 67 , 45 , 75 ] ;
7154: LD_ADDR_VAR 0 9
7158: PUSH
7159: LD_INT 67
7161: PUSH
7162: LD_INT 45
7164: PUSH
7165: LD_INT 75
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: LIST
7172: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7173: LD_VAR 0 6
7177: PPUSH
7178: CALL_OW 264
7182: PUSH
7183: LD_INT 26
7185: PUSH
7186: EMPTY
7187: LIST
7188: IN
7189: IFFALSE 7210
// points := [ 120 , 30 , 80 ] ;
7191: LD_ADDR_VAR 0 9
7195: PUSH
7196: LD_INT 120
7198: PUSH
7199: LD_INT 30
7201: PUSH
7202: LD_INT 80
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: LIST
7209: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7210: LD_VAR 0 6
7214: PPUSH
7215: CALL_OW 264
7219: PUSH
7220: LD_INT 22
7222: PUSH
7223: EMPTY
7224: LIST
7225: IN
7226: IFFALSE 7247
// points := [ 40 , 1 , 1 ] ;
7228: LD_ADDR_VAR 0 9
7232: PUSH
7233: LD_INT 40
7235: PUSH
7236: LD_INT 1
7238: PUSH
7239: LD_INT 1
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: LIST
7246: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7247: LD_VAR 0 6
7251: PPUSH
7252: CALL_OW 264
7256: PUSH
7257: LD_INT 29
7259: PUSH
7260: EMPTY
7261: LIST
7262: IN
7263: IFFALSE 7284
// points := [ 70 , 200 , 400 ] ;
7265: LD_ADDR_VAR 0 9
7269: PUSH
7270: LD_INT 70
7272: PUSH
7273: LD_INT 200
7275: PUSH
7276: LD_INT 400
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7284: LD_VAR 0 6
7288: PPUSH
7289: CALL_OW 264
7293: PUSH
7294: LD_INT 14
7296: PUSH
7297: LD_INT 53
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: IN
7304: IFFALSE 7325
// points := [ 40 , 10 , 20 ] ;
7306: LD_ADDR_VAR 0 9
7310: PUSH
7311: LD_INT 40
7313: PUSH
7314: LD_INT 10
7316: PUSH
7317: LD_INT 20
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: LIST
7324: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7325: LD_VAR 0 6
7329: PPUSH
7330: CALL_OW 264
7334: PUSH
7335: LD_INT 9
7337: PUSH
7338: EMPTY
7339: LIST
7340: IN
7341: IFFALSE 7362
// points := [ 5 , 70 , 20 ] ;
7343: LD_ADDR_VAR 0 9
7347: PUSH
7348: LD_INT 5
7350: PUSH
7351: LD_INT 70
7353: PUSH
7354: LD_INT 20
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: LIST
7361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7362: LD_VAR 0 6
7366: PPUSH
7367: CALL_OW 264
7371: PUSH
7372: LD_INT 10
7374: PUSH
7375: EMPTY
7376: LIST
7377: IN
7378: IFFALSE 7399
// points := [ 35 , 110 , 70 ] ;
7380: LD_ADDR_VAR 0 9
7384: PUSH
7385: LD_INT 35
7387: PUSH
7388: LD_INT 110
7390: PUSH
7391: LD_INT 70
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: LIST
7398: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7399: LD_VAR 0 6
7403: PPUSH
7404: CALL_OW 265
7408: PUSH
7409: LD_INT 25
7411: EQUAL
7412: IFFALSE 7433
// points := [ 80 , 65 , 100 ] ;
7414: LD_ADDR_VAR 0 9
7418: PUSH
7419: LD_INT 80
7421: PUSH
7422: LD_INT 65
7424: PUSH
7425: LD_INT 100
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: LIST
7432: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7433: LD_VAR 0 6
7437: PPUSH
7438: CALL_OW 263
7442: PUSH
7443: LD_INT 1
7445: EQUAL
7446: IFFALSE 7481
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7448: LD_ADDR_VAR 0 10
7452: PUSH
7453: LD_VAR 0 10
7457: PUSH
7458: LD_VAR 0 6
7462: PPUSH
7463: CALL_OW 311
7467: PPUSH
7468: LD_INT 3
7470: PPUSH
7471: CALL_OW 259
7475: PUSH
7476: LD_INT 4
7478: MUL
7479: MUL
7480: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7481: LD_VAR 0 6
7485: PPUSH
7486: CALL_OW 263
7490: PUSH
7491: LD_INT 2
7493: EQUAL
7494: IFFALSE 7545
// begin j := IsControledBy ( i ) ;
7496: LD_ADDR_VAR 0 7
7500: PUSH
7501: LD_VAR 0 6
7505: PPUSH
7506: CALL_OW 312
7510: ST_TO_ADDR
// if j then
7511: LD_VAR 0 7
7515: IFFALSE 7545
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7517: LD_ADDR_VAR 0 10
7521: PUSH
7522: LD_VAR 0 10
7526: PUSH
7527: LD_VAR 0 7
7531: PPUSH
7532: LD_INT 3
7534: PPUSH
7535: CALL_OW 259
7539: PUSH
7540: LD_INT 3
7542: MUL
7543: MUL
7544: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7545: LD_VAR 0 6
7549: PPUSH
7550: CALL_OW 264
7554: PUSH
7555: LD_INT 5
7557: PUSH
7558: LD_INT 6
7560: PUSH
7561: LD_INT 46
7563: PUSH
7564: LD_INT 44
7566: PUSH
7567: LD_INT 47
7569: PUSH
7570: LD_INT 45
7572: PUSH
7573: LD_INT 28
7575: PUSH
7576: LD_INT 7
7578: PUSH
7579: LD_INT 27
7581: PUSH
7582: LD_INT 29
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: IN
7597: PUSH
7598: LD_VAR 0 1
7602: PPUSH
7603: LD_INT 52
7605: PPUSH
7606: CALL_OW 321
7610: PUSH
7611: LD_INT 2
7613: EQUAL
7614: AND
7615: IFFALSE 7632
// bpoints := bpoints * 1.2 ;
7617: LD_ADDR_VAR 0 10
7621: PUSH
7622: LD_VAR 0 10
7626: PUSH
7627: LD_REAL  1.20000000000000E+0000
7630: MUL
7631: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7632: LD_VAR 0 6
7636: PPUSH
7637: CALL_OW 264
7641: PUSH
7642: LD_INT 6
7644: PUSH
7645: LD_INT 46
7647: PUSH
7648: LD_INT 47
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: LIST
7655: IN
7656: IFFALSE 7673
// bpoints := bpoints * 1.2 ;
7658: LD_ADDR_VAR 0 10
7662: PUSH
7663: LD_VAR 0 10
7667: PUSH
7668: LD_REAL  1.20000000000000E+0000
7671: MUL
7672: ST_TO_ADDR
// end ; unit_building :
7673: GO 7687
7675: LD_INT 3
7677: DOUBLE
7678: EQUAL
7679: IFTRUE 7683
7681: GO 7686
7683: POP
// ; end ;
7684: GO 7687
7686: POP
// for j = 1 to 3 do
7687: LD_ADDR_VAR 0 7
7691: PUSH
7692: DOUBLE
7693: LD_INT 1
7695: DEC
7696: ST_TO_ADDR
7697: LD_INT 3
7699: PUSH
7700: FOR_TO
7701: IFFALSE 7754
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
7703: LD_ADDR_VAR 0 5
7707: PUSH
7708: LD_VAR 0 5
7712: PPUSH
7713: LD_VAR 0 7
7717: PPUSH
7718: LD_VAR 0 5
7722: PUSH
7723: LD_VAR 0 7
7727: ARRAY
7728: PUSH
7729: LD_VAR 0 9
7733: PUSH
7734: LD_VAR 0 7
7738: ARRAY
7739: PUSH
7740: LD_VAR 0 10
7744: MUL
7745: PLUS
7746: PPUSH
7747: CALL_OW 1
7751: ST_TO_ADDR
7752: GO 7700
7754: POP
7755: POP
// end ;
7756: GO 6239
7758: POP
7759: POP
// result := Replace ( result , 4 , tmp ) ;
7760: LD_ADDR_VAR 0 5
7764: PUSH
7765: LD_VAR 0 5
7769: PPUSH
7770: LD_INT 4
7772: PPUSH
7773: LD_VAR 0 8
7777: PPUSH
7778: CALL_OW 1
7782: ST_TO_ADDR
// end ;
7783: LD_VAR 0 5
7787: RET
// export function DangerAtRange ( unit , range ) ; begin
7788: LD_INT 0
7790: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
7791: LD_ADDR_VAR 0 3
7795: PUSH
7796: LD_VAR 0 1
7800: PPUSH
7801: CALL_OW 255
7805: PPUSH
7806: LD_VAR 0 1
7810: PPUSH
7811: CALL_OW 250
7815: PPUSH
7816: LD_VAR 0 1
7820: PPUSH
7821: CALL_OW 251
7825: PPUSH
7826: LD_VAR 0 2
7830: PPUSH
7831: CALL 6091 0 4
7835: ST_TO_ADDR
// end ;
7836: LD_VAR 0 3
7840: RET
// export function DangerInArea ( side , area ) ; begin
7841: LD_INT 0
7843: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7844: LD_ADDR_VAR 0 3
7848: PUSH
7849: LD_VAR 0 2
7853: PPUSH
7854: LD_INT 81
7856: PUSH
7857: LD_VAR 0 1
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PPUSH
7866: CALL_OW 70
7870: ST_TO_ADDR
// end ;
7871: LD_VAR 0 3
7875: RET
// export function IsExtension ( b ) ; begin
7876: LD_INT 0
7878: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
7879: LD_ADDR_VAR 0 2
7883: PUSH
7884: LD_VAR 0 1
7888: PUSH
7889: LD_INT 23
7891: PUSH
7892: LD_INT 20
7894: PUSH
7895: LD_INT 22
7897: PUSH
7898: LD_INT 17
7900: PUSH
7901: LD_INT 24
7903: PUSH
7904: LD_INT 21
7906: PUSH
7907: LD_INT 19
7909: PUSH
7910: LD_INT 16
7912: PUSH
7913: LD_INT 25
7915: PUSH
7916: LD_INT 18
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: IN
7931: ST_TO_ADDR
// end ;
7932: LD_VAR 0 2
7936: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
7937: LD_INT 0
7939: PPUSH
7940: PPUSH
7941: PPUSH
// result := [ ] ;
7942: LD_ADDR_VAR 0 4
7946: PUSH
7947: EMPTY
7948: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
7949: LD_ADDR_VAR 0 5
7953: PUSH
7954: LD_VAR 0 2
7958: PPUSH
7959: LD_INT 21
7961: PUSH
7962: LD_INT 3
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PPUSH
7969: CALL_OW 70
7973: ST_TO_ADDR
// if not tmp then
7974: LD_VAR 0 5
7978: NOT
7979: IFFALSE 7983
// exit ;
7981: GO 8047
// if checkLink then
7983: LD_VAR 0 3
7987: IFFALSE 8037
// begin for i in tmp do
7989: LD_ADDR_VAR 0 6
7993: PUSH
7994: LD_VAR 0 5
7998: PUSH
7999: FOR_IN
8000: IFFALSE 8035
// if GetBase ( i ) <> base then
8002: LD_VAR 0 6
8006: PPUSH
8007: CALL_OW 274
8011: PUSH
8012: LD_VAR 0 1
8016: NONEQUAL
8017: IFFALSE 8033
// ComLinkToBase ( base , i ) ;
8019: LD_VAR 0 1
8023: PPUSH
8024: LD_VAR 0 6
8028: PPUSH
8029: CALL_OW 169
8033: GO 7999
8035: POP
8036: POP
// end ; result := tmp ;
8037: LD_ADDR_VAR 0 4
8041: PUSH
8042: LD_VAR 0 5
8046: ST_TO_ADDR
// end ;
8047: LD_VAR 0 4
8051: RET
// export function ComComplete ( units , b ) ; var i ; begin
8052: LD_INT 0
8054: PPUSH
8055: PPUSH
// if not units then
8056: LD_VAR 0 1
8060: NOT
8061: IFFALSE 8065
// exit ;
8063: GO 8155
// for i in units do
8065: LD_ADDR_VAR 0 4
8069: PUSH
8070: LD_VAR 0 1
8074: PUSH
8075: FOR_IN
8076: IFFALSE 8153
// if BuildingStatus ( b ) = bs_build then
8078: LD_VAR 0 2
8082: PPUSH
8083: CALL_OW 461
8087: PUSH
8088: LD_INT 1
8090: EQUAL
8091: IFFALSE 8151
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8093: LD_VAR 0 4
8097: PPUSH
8098: LD_STRING h
8100: PUSH
8101: LD_VAR 0 2
8105: PPUSH
8106: CALL_OW 250
8110: PUSH
8111: LD_VAR 0 2
8115: PPUSH
8116: CALL_OW 251
8120: PUSH
8121: LD_VAR 0 2
8125: PUSH
8126: LD_INT 0
8128: PUSH
8129: LD_INT 0
8131: PUSH
8132: LD_INT 0
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: PUSH
8144: EMPTY
8145: LIST
8146: PPUSH
8147: CALL_OW 446
8151: GO 8075
8153: POP
8154: POP
// end ;
8155: LD_VAR 0 3
8159: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8160: LD_INT 0
8162: PPUSH
8163: PPUSH
8164: PPUSH
8165: PPUSH
8166: PPUSH
8167: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
8168: LD_VAR 0 1
8172: NOT
8173: PUSH
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 263
8183: PUSH
8184: LD_INT 2
8186: EQUAL
8187: NOT
8188: OR
8189: IFFALSE 8193
// exit ;
8191: GO 8509
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8193: LD_ADDR_VAR 0 6
8197: PUSH
8198: LD_INT 22
8200: PUSH
8201: LD_VAR 0 1
8205: PPUSH
8206: CALL_OW 255
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: PUSH
8215: LD_INT 2
8217: PUSH
8218: LD_INT 30
8220: PUSH
8221: LD_INT 36
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PUSH
8228: LD_INT 34
8230: PUSH
8231: LD_INT 31
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: LIST
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: PPUSH
8247: CALL_OW 69
8251: ST_TO_ADDR
// if not tmp then
8252: LD_VAR 0 6
8256: NOT
8257: IFFALSE 8261
// exit ;
8259: GO 8509
// result := [ ] ;
8261: LD_ADDR_VAR 0 2
8265: PUSH
8266: EMPTY
8267: ST_TO_ADDR
// for i in tmp do
8268: LD_ADDR_VAR 0 3
8272: PUSH
8273: LD_VAR 0 6
8277: PUSH
8278: FOR_IN
8279: IFFALSE 8350
// begin t := UnitsInside ( i ) ;
8281: LD_ADDR_VAR 0 4
8285: PUSH
8286: LD_VAR 0 3
8290: PPUSH
8291: CALL_OW 313
8295: ST_TO_ADDR
// if t then
8296: LD_VAR 0 4
8300: IFFALSE 8348
// for j in t do
8302: LD_ADDR_VAR 0 7
8306: PUSH
8307: LD_VAR 0 4
8311: PUSH
8312: FOR_IN
8313: IFFALSE 8346
// result := Insert ( result , result + 1 , j ) ;
8315: LD_ADDR_VAR 0 2
8319: PUSH
8320: LD_VAR 0 2
8324: PPUSH
8325: LD_VAR 0 2
8329: PUSH
8330: LD_INT 1
8332: PLUS
8333: PPUSH
8334: LD_VAR 0 7
8338: PPUSH
8339: CALL_OW 2
8343: ST_TO_ADDR
8344: GO 8312
8346: POP
8347: POP
// end ;
8348: GO 8278
8350: POP
8351: POP
// if not result then
8352: LD_VAR 0 2
8356: NOT
8357: IFFALSE 8361
// exit ;
8359: GO 8509
// mech := result [ 1 ] ;
8361: LD_ADDR_VAR 0 5
8365: PUSH
8366: LD_VAR 0 2
8370: PUSH
8371: LD_INT 1
8373: ARRAY
8374: ST_TO_ADDR
// if result > 1 then
8375: LD_VAR 0 2
8379: PUSH
8380: LD_INT 1
8382: GREATER
8383: IFFALSE 8495
// for i = 2 to result do
8385: LD_ADDR_VAR 0 3
8389: PUSH
8390: DOUBLE
8391: LD_INT 2
8393: DEC
8394: ST_TO_ADDR
8395: LD_VAR 0 2
8399: PUSH
8400: FOR_TO
8401: IFFALSE 8493
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8403: LD_ADDR_VAR 0 4
8407: PUSH
8408: LD_VAR 0 2
8412: PUSH
8413: LD_VAR 0 3
8417: ARRAY
8418: PPUSH
8419: LD_INT 3
8421: PPUSH
8422: CALL_OW 259
8426: PUSH
8427: LD_VAR 0 2
8431: PUSH
8432: LD_VAR 0 3
8436: ARRAY
8437: PPUSH
8438: CALL_OW 432
8442: MINUS
8443: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8444: LD_VAR 0 4
8448: PUSH
8449: LD_VAR 0 5
8453: PPUSH
8454: LD_INT 3
8456: PPUSH
8457: CALL_OW 259
8461: PUSH
8462: LD_VAR 0 5
8466: PPUSH
8467: CALL_OW 432
8471: MINUS
8472: GREATEREQUAL
8473: IFFALSE 8491
// mech := result [ i ] ;
8475: LD_ADDR_VAR 0 5
8479: PUSH
8480: LD_VAR 0 2
8484: PUSH
8485: LD_VAR 0 3
8489: ARRAY
8490: ST_TO_ADDR
// end ;
8491: GO 8400
8493: POP
8494: POP
// ComLinkTo ( vehicle , mech ) ;
8495: LD_VAR 0 1
8499: PPUSH
8500: LD_VAR 0 5
8504: PPUSH
8505: CALL_OW 135
// end ;
8509: LD_VAR 0 2
8513: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8514: LD_INT 0
8516: PPUSH
8517: PPUSH
8518: PPUSH
8519: PPUSH
8520: PPUSH
8521: PPUSH
8522: PPUSH
8523: PPUSH
8524: PPUSH
8525: PPUSH
8526: PPUSH
8527: PPUSH
8528: PPUSH
// result := [ ] ;
8529: LD_ADDR_VAR 0 7
8533: PUSH
8534: EMPTY
8535: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8536: LD_VAR 0 1
8540: PPUSH
8541: CALL_OW 266
8545: PUSH
8546: LD_INT 0
8548: PUSH
8549: LD_INT 1
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: IN
8556: NOT
8557: IFFALSE 8561
// exit ;
8559: GO 10195
// if name then
8561: LD_VAR 0 3
8565: IFFALSE 8581
// SetBName ( base_dep , name ) ;
8567: LD_VAR 0 1
8571: PPUSH
8572: LD_VAR 0 3
8576: PPUSH
8577: CALL_OW 500
// base := GetBase ( base_dep ) ;
8581: LD_ADDR_VAR 0 15
8585: PUSH
8586: LD_VAR 0 1
8590: PPUSH
8591: CALL_OW 274
8595: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8596: LD_ADDR_VAR 0 16
8600: PUSH
8601: LD_VAR 0 1
8605: PPUSH
8606: CALL_OW 255
8610: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8611: LD_ADDR_VAR 0 17
8615: PUSH
8616: LD_VAR 0 1
8620: PPUSH
8621: CALL_OW 248
8625: ST_TO_ADDR
// if sources then
8626: LD_VAR 0 5
8630: IFFALSE 8677
// for i = 1 to 3 do
8632: LD_ADDR_VAR 0 8
8636: PUSH
8637: DOUBLE
8638: LD_INT 1
8640: DEC
8641: ST_TO_ADDR
8642: LD_INT 3
8644: PUSH
8645: FOR_TO
8646: IFFALSE 8675
// AddResourceType ( base , i , sources [ i ] ) ;
8648: LD_VAR 0 15
8652: PPUSH
8653: LD_VAR 0 8
8657: PPUSH
8658: LD_VAR 0 5
8662: PUSH
8663: LD_VAR 0 8
8667: ARRAY
8668: PPUSH
8669: CALL_OW 276
8673: GO 8645
8675: POP
8676: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
8677: LD_ADDR_VAR 0 18
8681: PUSH
8682: LD_VAR 0 15
8686: PPUSH
8687: LD_VAR 0 2
8691: PPUSH
8692: LD_INT 1
8694: PPUSH
8695: CALL 7937 0 3
8699: ST_TO_ADDR
// InitHc ;
8700: CALL_OW 19
// InitUc ;
8704: CALL_OW 18
// uc_side := side ;
8708: LD_ADDR_OWVAR 20
8712: PUSH
8713: LD_VAR 0 16
8717: ST_TO_ADDR
// uc_nation := nation ;
8718: LD_ADDR_OWVAR 21
8722: PUSH
8723: LD_VAR 0 17
8727: ST_TO_ADDR
// if buildings then
8728: LD_VAR 0 18
8732: IFFALSE 10054
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
8734: LD_ADDR_VAR 0 19
8738: PUSH
8739: LD_VAR 0 18
8743: PPUSH
8744: LD_INT 2
8746: PUSH
8747: LD_INT 30
8749: PUSH
8750: LD_INT 29
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PUSH
8757: LD_INT 30
8759: PUSH
8760: LD_INT 30
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: LIST
8771: PPUSH
8772: CALL_OW 72
8776: ST_TO_ADDR
// if tmp then
8777: LD_VAR 0 19
8781: IFFALSE 8829
// for i in tmp do
8783: LD_ADDR_VAR 0 8
8787: PUSH
8788: LD_VAR 0 19
8792: PUSH
8793: FOR_IN
8794: IFFALSE 8827
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
8796: LD_VAR 0 8
8800: PPUSH
8801: CALL_OW 250
8805: PPUSH
8806: LD_VAR 0 8
8810: PPUSH
8811: CALL_OW 251
8815: PPUSH
8816: LD_VAR 0 16
8820: PPUSH
8821: CALL_OW 441
8825: GO 8793
8827: POP
8828: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
8829: LD_VAR 0 18
8833: PPUSH
8834: LD_INT 2
8836: PUSH
8837: LD_INT 30
8839: PUSH
8840: LD_INT 32
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: PUSH
8847: LD_INT 30
8849: PUSH
8850: LD_INT 33
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: LIST
8861: PPUSH
8862: CALL_OW 72
8866: IFFALSE 8954
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
8868: LD_ADDR_VAR 0 8
8872: PUSH
8873: LD_VAR 0 18
8877: PPUSH
8878: LD_INT 2
8880: PUSH
8881: LD_INT 30
8883: PUSH
8884: LD_INT 32
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: LD_INT 30
8893: PUSH
8894: LD_INT 33
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: PPUSH
8906: CALL_OW 72
8910: PUSH
8911: FOR_IN
8912: IFFALSE 8952
// begin if not GetBWeapon ( i ) then
8914: LD_VAR 0 8
8918: PPUSH
8919: CALL_OW 269
8923: NOT
8924: IFFALSE 8950
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
8926: LD_VAR 0 8
8930: PPUSH
8931: LD_VAR 0 8
8935: PPUSH
8936: LD_VAR 0 2
8940: PPUSH
8941: CALL 10200 0 2
8945: PPUSH
8946: CALL_OW 431
// end ;
8950: GO 8911
8952: POP
8953: POP
// end ; for i = 1 to personel do
8954: LD_ADDR_VAR 0 8
8958: PUSH
8959: DOUBLE
8960: LD_INT 1
8962: DEC
8963: ST_TO_ADDR
8964: LD_VAR 0 6
8968: PUSH
8969: FOR_TO
8970: IFFALSE 10034
// begin if i > 4 then
8972: LD_VAR 0 8
8976: PUSH
8977: LD_INT 4
8979: GREATER
8980: IFFALSE 8984
// break ;
8982: GO 10034
// case i of 1 :
8984: LD_VAR 0 8
8988: PUSH
8989: LD_INT 1
8991: DOUBLE
8992: EQUAL
8993: IFTRUE 8997
8995: GO 9077
8997: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
8998: LD_ADDR_VAR 0 12
9002: PUSH
9003: LD_VAR 0 18
9007: PPUSH
9008: LD_INT 22
9010: PUSH
9011: LD_VAR 0 16
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: LD_INT 58
9022: PUSH
9023: EMPTY
9024: LIST
9025: PUSH
9026: LD_INT 2
9028: PUSH
9029: LD_INT 30
9031: PUSH
9032: LD_INT 32
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 4
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 30
9051: PUSH
9052: LD_INT 5
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: LIST
9069: PPUSH
9070: CALL_OW 72
9074: ST_TO_ADDR
9075: GO 9299
9077: LD_INT 2
9079: DOUBLE
9080: EQUAL
9081: IFTRUE 9085
9083: GO 9147
9085: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9086: LD_ADDR_VAR 0 12
9090: PUSH
9091: LD_VAR 0 18
9095: PPUSH
9096: LD_INT 22
9098: PUSH
9099: LD_VAR 0 16
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PUSH
9108: LD_INT 2
9110: PUSH
9111: LD_INT 30
9113: PUSH
9114: LD_INT 0
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PUSH
9121: LD_INT 30
9123: PUSH
9124: LD_INT 1
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PPUSH
9140: CALL_OW 72
9144: ST_TO_ADDR
9145: GO 9299
9147: LD_INT 3
9149: DOUBLE
9150: EQUAL
9151: IFTRUE 9155
9153: GO 9217
9155: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9156: LD_ADDR_VAR 0 12
9160: PUSH
9161: LD_VAR 0 18
9165: PPUSH
9166: LD_INT 22
9168: PUSH
9169: LD_VAR 0 16
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: PUSH
9178: LD_INT 2
9180: PUSH
9181: LD_INT 30
9183: PUSH
9184: LD_INT 2
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PUSH
9191: LD_INT 30
9193: PUSH
9194: LD_INT 3
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: LIST
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PPUSH
9210: CALL_OW 72
9214: ST_TO_ADDR
9215: GO 9299
9217: LD_INT 4
9219: DOUBLE
9220: EQUAL
9221: IFTRUE 9225
9223: GO 9298
9225: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9226: LD_ADDR_VAR 0 12
9230: PUSH
9231: LD_VAR 0 18
9235: PPUSH
9236: LD_INT 22
9238: PUSH
9239: LD_VAR 0 16
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PUSH
9248: LD_INT 2
9250: PUSH
9251: LD_INT 30
9253: PUSH
9254: LD_INT 6
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: PUSH
9261: LD_INT 30
9263: PUSH
9264: LD_INT 7
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_INT 30
9273: PUSH
9274: LD_INT 8
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: PPUSH
9291: CALL_OW 72
9295: ST_TO_ADDR
9296: GO 9299
9298: POP
// if i = 1 then
9299: LD_VAR 0 8
9303: PUSH
9304: LD_INT 1
9306: EQUAL
9307: IFFALSE 9418
// begin tmp := [ ] ;
9309: LD_ADDR_VAR 0 19
9313: PUSH
9314: EMPTY
9315: ST_TO_ADDR
// for j in f do
9316: LD_ADDR_VAR 0 9
9320: PUSH
9321: LD_VAR 0 12
9325: PUSH
9326: FOR_IN
9327: IFFALSE 9400
// if GetBType ( j ) = b_bunker then
9329: LD_VAR 0 9
9333: PPUSH
9334: CALL_OW 266
9338: PUSH
9339: LD_INT 32
9341: EQUAL
9342: IFFALSE 9369
// tmp := Insert ( tmp , 1 , j ) else
9344: LD_ADDR_VAR 0 19
9348: PUSH
9349: LD_VAR 0 19
9353: PPUSH
9354: LD_INT 1
9356: PPUSH
9357: LD_VAR 0 9
9361: PPUSH
9362: CALL_OW 2
9366: ST_TO_ADDR
9367: GO 9398
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9369: LD_ADDR_VAR 0 19
9373: PUSH
9374: LD_VAR 0 19
9378: PPUSH
9379: LD_VAR 0 19
9383: PUSH
9384: LD_INT 1
9386: PLUS
9387: PPUSH
9388: LD_VAR 0 9
9392: PPUSH
9393: CALL_OW 2
9397: ST_TO_ADDR
9398: GO 9326
9400: POP
9401: POP
// if tmp then
9402: LD_VAR 0 19
9406: IFFALSE 9418
// f := tmp ;
9408: LD_ADDR_VAR 0 12
9412: PUSH
9413: LD_VAR 0 19
9417: ST_TO_ADDR
// end ; x := personel [ i ] ;
9418: LD_ADDR_VAR 0 13
9422: PUSH
9423: LD_VAR 0 6
9427: PUSH
9428: LD_VAR 0 8
9432: ARRAY
9433: ST_TO_ADDR
// if x = - 1 then
9434: LD_VAR 0 13
9438: PUSH
9439: LD_INT 1
9441: NEG
9442: EQUAL
9443: IFFALSE 9652
// begin for j in f do
9445: LD_ADDR_VAR 0 9
9449: PUSH
9450: LD_VAR 0 12
9454: PUSH
9455: FOR_IN
9456: IFFALSE 9648
// repeat InitHc ;
9458: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9462: LD_VAR 0 9
9466: PPUSH
9467: CALL_OW 266
9471: PUSH
9472: LD_INT 5
9474: EQUAL
9475: IFFALSE 9545
// begin if UnitsInside ( j ) < 3 then
9477: LD_VAR 0 9
9481: PPUSH
9482: CALL_OW 313
9486: PUSH
9487: LD_INT 3
9489: LESS
9490: IFFALSE 9526
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9492: LD_INT 0
9494: PPUSH
9495: LD_INT 5
9497: PUSH
9498: LD_INT 8
9500: PUSH
9501: LD_INT 9
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: LIST
9508: PUSH
9509: LD_VAR 0 17
9513: ARRAY
9514: PPUSH
9515: LD_VAR 0 4
9519: PPUSH
9520: CALL_OW 380
9524: GO 9543
// PrepareHuman ( false , i , skill ) ;
9526: LD_INT 0
9528: PPUSH
9529: LD_VAR 0 8
9533: PPUSH
9534: LD_VAR 0 4
9538: PPUSH
9539: CALL_OW 380
// end else
9543: GO 9562
// PrepareHuman ( false , i , skill ) ;
9545: LD_INT 0
9547: PPUSH
9548: LD_VAR 0 8
9552: PPUSH
9553: LD_VAR 0 4
9557: PPUSH
9558: CALL_OW 380
// un := CreateHuman ;
9562: LD_ADDR_VAR 0 14
9566: PUSH
9567: CALL_OW 44
9571: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9572: LD_ADDR_VAR 0 7
9576: PUSH
9577: LD_VAR 0 7
9581: PPUSH
9582: LD_INT 1
9584: PPUSH
9585: LD_VAR 0 14
9589: PPUSH
9590: CALL_OW 2
9594: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9595: LD_VAR 0 14
9599: PPUSH
9600: LD_VAR 0 9
9604: PPUSH
9605: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9609: LD_VAR 0 9
9613: PPUSH
9614: CALL_OW 313
9618: PUSH
9619: LD_INT 6
9621: EQUAL
9622: PUSH
9623: LD_VAR 0 9
9627: PPUSH
9628: CALL_OW 266
9632: PUSH
9633: LD_INT 32
9635: PUSH
9636: LD_INT 31
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: IN
9643: OR
9644: IFFALSE 9458
9646: GO 9455
9648: POP
9649: POP
// end else
9650: GO 10032
// for j = 1 to x do
9652: LD_ADDR_VAR 0 9
9656: PUSH
9657: DOUBLE
9658: LD_INT 1
9660: DEC
9661: ST_TO_ADDR
9662: LD_VAR 0 13
9666: PUSH
9667: FOR_TO
9668: IFFALSE 10030
// begin InitHc ;
9670: CALL_OW 19
// if not f then
9674: LD_VAR 0 12
9678: NOT
9679: IFFALSE 9768
// begin PrepareHuman ( false , i , skill ) ;
9681: LD_INT 0
9683: PPUSH
9684: LD_VAR 0 8
9688: PPUSH
9689: LD_VAR 0 4
9693: PPUSH
9694: CALL_OW 380
// un := CreateHuman ;
9698: LD_ADDR_VAR 0 14
9702: PUSH
9703: CALL_OW 44
9707: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9708: LD_ADDR_VAR 0 7
9712: PUSH
9713: LD_VAR 0 7
9717: PPUSH
9718: LD_INT 1
9720: PPUSH
9721: LD_VAR 0 14
9725: PPUSH
9726: CALL_OW 2
9730: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
9731: LD_VAR 0 14
9735: PPUSH
9736: LD_VAR 0 1
9740: PPUSH
9741: CALL_OW 250
9745: PPUSH
9746: LD_VAR 0 1
9750: PPUSH
9751: CALL_OW 251
9755: PPUSH
9756: LD_INT 10
9758: PPUSH
9759: LD_INT 0
9761: PPUSH
9762: CALL_OW 50
// continue ;
9766: GO 9667
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
9768: LD_VAR 0 12
9772: PUSH
9773: LD_INT 1
9775: ARRAY
9776: PPUSH
9777: CALL_OW 313
9781: PUSH
9782: LD_VAR 0 12
9786: PUSH
9787: LD_INT 1
9789: ARRAY
9790: PPUSH
9791: CALL_OW 266
9795: PUSH
9796: LD_INT 32
9798: PUSH
9799: LD_INT 31
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: IN
9806: AND
9807: PUSH
9808: LD_VAR 0 12
9812: PUSH
9813: LD_INT 1
9815: ARRAY
9816: PPUSH
9817: CALL_OW 313
9821: PUSH
9822: LD_INT 6
9824: EQUAL
9825: OR
9826: IFFALSE 9846
// f := Delete ( f , 1 ) ;
9828: LD_ADDR_VAR 0 12
9832: PUSH
9833: LD_VAR 0 12
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: CALL_OW 3
9845: ST_TO_ADDR
// if not f then
9846: LD_VAR 0 12
9850: NOT
9851: IFFALSE 9869
// begin x := x + 2 ;
9853: LD_ADDR_VAR 0 13
9857: PUSH
9858: LD_VAR 0 13
9862: PUSH
9863: LD_INT 2
9865: PLUS
9866: ST_TO_ADDR
// continue ;
9867: GO 9667
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
9869: LD_VAR 0 12
9873: PUSH
9874: LD_INT 1
9876: ARRAY
9877: PPUSH
9878: CALL_OW 266
9882: PUSH
9883: LD_INT 5
9885: EQUAL
9886: IFFALSE 9960
// begin if UnitsInside ( f [ 1 ] ) < 3 then
9888: LD_VAR 0 12
9892: PUSH
9893: LD_INT 1
9895: ARRAY
9896: PPUSH
9897: CALL_OW 313
9901: PUSH
9902: LD_INT 3
9904: LESS
9905: IFFALSE 9941
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9907: LD_INT 0
9909: PPUSH
9910: LD_INT 5
9912: PUSH
9913: LD_INT 8
9915: PUSH
9916: LD_INT 9
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: LIST
9923: PUSH
9924: LD_VAR 0 17
9928: ARRAY
9929: PPUSH
9930: LD_VAR 0 4
9934: PPUSH
9935: CALL_OW 380
9939: GO 9958
// PrepareHuman ( false , i , skill ) ;
9941: LD_INT 0
9943: PPUSH
9944: LD_VAR 0 8
9948: PPUSH
9949: LD_VAR 0 4
9953: PPUSH
9954: CALL_OW 380
// end else
9958: GO 9977
// PrepareHuman ( false , i , skill ) ;
9960: LD_INT 0
9962: PPUSH
9963: LD_VAR 0 8
9967: PPUSH
9968: LD_VAR 0 4
9972: PPUSH
9973: CALL_OW 380
// un := CreateHuman ;
9977: LD_ADDR_VAR 0 14
9981: PUSH
9982: CALL_OW 44
9986: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9987: LD_ADDR_VAR 0 7
9991: PUSH
9992: LD_VAR 0 7
9996: PPUSH
9997: LD_INT 1
9999: PPUSH
10000: LD_VAR 0 14
10004: PPUSH
10005: CALL_OW 2
10009: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10010: LD_VAR 0 14
10014: PPUSH
10015: LD_VAR 0 12
10019: PUSH
10020: LD_INT 1
10022: ARRAY
10023: PPUSH
10024: CALL_OW 52
// end ;
10028: GO 9667
10030: POP
10031: POP
// end ;
10032: GO 8969
10034: POP
10035: POP
// result := result ^ buildings ;
10036: LD_ADDR_VAR 0 7
10040: PUSH
10041: LD_VAR 0 7
10045: PUSH
10046: LD_VAR 0 18
10050: ADD
10051: ST_TO_ADDR
// end else
10052: GO 10195
// begin for i = 1 to personel do
10054: LD_ADDR_VAR 0 8
10058: PUSH
10059: DOUBLE
10060: LD_INT 1
10062: DEC
10063: ST_TO_ADDR
10064: LD_VAR 0 6
10068: PUSH
10069: FOR_TO
10070: IFFALSE 10193
// begin if i > 4 then
10072: LD_VAR 0 8
10076: PUSH
10077: LD_INT 4
10079: GREATER
10080: IFFALSE 10084
// break ;
10082: GO 10193
// x := personel [ i ] ;
10084: LD_ADDR_VAR 0 13
10088: PUSH
10089: LD_VAR 0 6
10093: PUSH
10094: LD_VAR 0 8
10098: ARRAY
10099: ST_TO_ADDR
// if x = - 1 then
10100: LD_VAR 0 13
10104: PUSH
10105: LD_INT 1
10107: NEG
10108: EQUAL
10109: IFFALSE 10113
// continue ;
10111: GO 10069
// PrepareHuman ( false , i , skill ) ;
10113: LD_INT 0
10115: PPUSH
10116: LD_VAR 0 8
10120: PPUSH
10121: LD_VAR 0 4
10125: PPUSH
10126: CALL_OW 380
// un := CreateHuman ;
10130: LD_ADDR_VAR 0 14
10134: PUSH
10135: CALL_OW 44
10139: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10140: LD_VAR 0 14
10144: PPUSH
10145: LD_VAR 0 1
10149: PPUSH
10150: CALL_OW 250
10154: PPUSH
10155: LD_VAR 0 1
10159: PPUSH
10160: CALL_OW 251
10164: PPUSH
10165: LD_INT 10
10167: PPUSH
10168: LD_INT 0
10170: PPUSH
10171: CALL_OW 50
// result := result ^ un ;
10175: LD_ADDR_VAR 0 7
10179: PUSH
10180: LD_VAR 0 7
10184: PUSH
10185: LD_VAR 0 14
10189: ADD
10190: ST_TO_ADDR
// end ;
10191: GO 10069
10193: POP
10194: POP
// end ; end ;
10195: LD_VAR 0 7
10199: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10200: LD_INT 0
10202: PPUSH
10203: PPUSH
10204: PPUSH
10205: PPUSH
10206: PPUSH
10207: PPUSH
10208: PPUSH
10209: PPUSH
10210: PPUSH
10211: PPUSH
10212: PPUSH
10213: PPUSH
10214: PPUSH
10215: PPUSH
10216: PPUSH
10217: PPUSH
// result := false ;
10218: LD_ADDR_VAR 0 3
10222: PUSH
10223: LD_INT 0
10225: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10226: LD_VAR 0 1
10230: NOT
10231: PUSH
10232: LD_VAR 0 1
10236: PPUSH
10237: CALL_OW 266
10241: PUSH
10242: LD_INT 32
10244: PUSH
10245: LD_INT 33
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: IN
10252: NOT
10253: OR
10254: IFFALSE 10258
// exit ;
10256: GO 11397
// nat := GetNation ( tower ) ;
10258: LD_ADDR_VAR 0 12
10262: PUSH
10263: LD_VAR 0 1
10267: PPUSH
10268: CALL_OW 248
10272: ST_TO_ADDR
// side := GetSide ( tower ) ;
10273: LD_ADDR_VAR 0 16
10277: PUSH
10278: LD_VAR 0 1
10282: PPUSH
10283: CALL_OW 255
10287: ST_TO_ADDR
// x := GetX ( tower ) ;
10288: LD_ADDR_VAR 0 10
10292: PUSH
10293: LD_VAR 0 1
10297: PPUSH
10298: CALL_OW 250
10302: ST_TO_ADDR
// y := GetY ( tower ) ;
10303: LD_ADDR_VAR 0 11
10307: PUSH
10308: LD_VAR 0 1
10312: PPUSH
10313: CALL_OW 251
10317: ST_TO_ADDR
// if not x or not y then
10318: LD_VAR 0 10
10322: NOT
10323: PUSH
10324: LD_VAR 0 11
10328: NOT
10329: OR
10330: IFFALSE 10334
// exit ;
10332: GO 11397
// weapon := 0 ;
10334: LD_ADDR_VAR 0 18
10338: PUSH
10339: LD_INT 0
10341: ST_TO_ADDR
// fac_list := [ ] ;
10342: LD_ADDR_VAR 0 17
10346: PUSH
10347: EMPTY
10348: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10349: LD_ADDR_VAR 0 6
10353: PUSH
10354: LD_VAR 0 1
10358: PPUSH
10359: CALL_OW 274
10363: PPUSH
10364: LD_VAR 0 2
10368: PPUSH
10369: LD_INT 0
10371: PPUSH
10372: CALL 7937 0 3
10376: PPUSH
10377: LD_INT 30
10379: PUSH
10380: LD_INT 3
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PPUSH
10387: CALL_OW 72
10391: ST_TO_ADDR
// if not factories then
10392: LD_VAR 0 6
10396: NOT
10397: IFFALSE 10401
// exit ;
10399: GO 11397
// for i in factories do
10401: LD_ADDR_VAR 0 8
10405: PUSH
10406: LD_VAR 0 6
10410: PUSH
10411: FOR_IN
10412: IFFALSE 10437
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10414: LD_ADDR_VAR 0 17
10418: PUSH
10419: LD_VAR 0 17
10423: PUSH
10424: LD_VAR 0 8
10428: PPUSH
10429: CALL_OW 478
10433: UNION
10434: ST_TO_ADDR
10435: GO 10411
10437: POP
10438: POP
// if not fac_list then
10439: LD_VAR 0 17
10443: NOT
10444: IFFALSE 10448
// exit ;
10446: GO 11397
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10448: LD_ADDR_VAR 0 5
10452: PUSH
10453: LD_INT 4
10455: PUSH
10456: LD_INT 5
10458: PUSH
10459: LD_INT 9
10461: PUSH
10462: LD_INT 10
10464: PUSH
10465: LD_INT 6
10467: PUSH
10468: LD_INT 7
10470: PUSH
10471: LD_INT 11
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: PUSH
10483: LD_INT 27
10485: PUSH
10486: LD_INT 28
10488: PUSH
10489: LD_INT 26
10491: PUSH
10492: LD_INT 30
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 43
10503: PUSH
10504: LD_INT 44
10506: PUSH
10507: LD_INT 46
10509: PUSH
10510: LD_INT 45
10512: PUSH
10513: LD_INT 47
10515: PUSH
10516: LD_INT 49
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: LD_VAR 0 12
10536: ARRAY
10537: ST_TO_ADDR
// for i in list do
10538: LD_ADDR_VAR 0 8
10542: PUSH
10543: LD_VAR 0 5
10547: PUSH
10548: FOR_IN
10549: IFFALSE 10582
// if not i in fac_list then
10551: LD_VAR 0 8
10555: PUSH
10556: LD_VAR 0 17
10560: IN
10561: NOT
10562: IFFALSE 10580
// list := list diff i ;
10564: LD_ADDR_VAR 0 5
10568: PUSH
10569: LD_VAR 0 5
10573: PUSH
10574: LD_VAR 0 8
10578: DIFF
10579: ST_TO_ADDR
10580: GO 10548
10582: POP
10583: POP
// if not list then
10584: LD_VAR 0 5
10588: NOT
10589: IFFALSE 10593
// exit ;
10591: GO 11397
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10593: LD_VAR 0 12
10597: PUSH
10598: LD_INT 3
10600: EQUAL
10601: PUSH
10602: LD_INT 49
10604: PUSH
10605: LD_VAR 0 5
10609: IN
10610: AND
10611: PUSH
10612: LD_INT 31
10614: PPUSH
10615: LD_VAR 0 16
10619: PPUSH
10620: CALL_OW 321
10624: PUSH
10625: LD_INT 2
10627: EQUAL
10628: AND
10629: IFFALSE 10689
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10631: LD_INT 22
10633: PUSH
10634: LD_VAR 0 16
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PUSH
10643: LD_INT 35
10645: PUSH
10646: LD_INT 49
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 91
10655: PUSH
10656: LD_VAR 0 1
10660: PUSH
10661: LD_INT 10
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: LIST
10673: PPUSH
10674: CALL_OW 69
10678: NOT
10679: IFFALSE 10689
// weapon := ru_time_lapser ;
10681: LD_ADDR_VAR 0 18
10685: PUSH
10686: LD_INT 49
10688: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
10689: LD_VAR 0 12
10693: PUSH
10694: LD_INT 1
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: IN
10704: PUSH
10705: LD_INT 11
10707: PUSH
10708: LD_VAR 0 5
10712: IN
10713: PUSH
10714: LD_INT 30
10716: PUSH
10717: LD_VAR 0 5
10721: IN
10722: OR
10723: AND
10724: PUSH
10725: LD_INT 6
10727: PPUSH
10728: LD_VAR 0 16
10732: PPUSH
10733: CALL_OW 321
10737: PUSH
10738: LD_INT 2
10740: EQUAL
10741: AND
10742: IFFALSE 10907
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
10744: LD_INT 22
10746: PUSH
10747: LD_VAR 0 16
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PUSH
10756: LD_INT 2
10758: PUSH
10759: LD_INT 35
10761: PUSH
10762: LD_INT 11
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 35
10771: PUSH
10772: LD_INT 30
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: PUSH
10784: LD_INT 91
10786: PUSH
10787: LD_VAR 0 1
10791: PUSH
10792: LD_INT 18
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: LIST
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: PPUSH
10805: CALL_OW 69
10809: NOT
10810: PUSH
10811: LD_INT 22
10813: PUSH
10814: LD_VAR 0 16
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 2
10825: PUSH
10826: LD_INT 30
10828: PUSH
10829: LD_INT 32
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 30
10838: PUSH
10839: LD_INT 33
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: LIST
10850: PUSH
10851: LD_INT 91
10853: PUSH
10854: LD_VAR 0 1
10858: PUSH
10859: LD_INT 12
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: PUSH
10872: EMPTY
10873: LIST
10874: PPUSH
10875: CALL_OW 69
10879: PUSH
10880: LD_INT 2
10882: GREATER
10883: AND
10884: IFFALSE 10907
// weapon := [ us_radar , ar_radar ] [ nat ] ;
10886: LD_ADDR_VAR 0 18
10890: PUSH
10891: LD_INT 11
10893: PUSH
10894: LD_INT 30
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: LD_VAR 0 12
10905: ARRAY
10906: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
10907: LD_VAR 0 18
10911: NOT
10912: PUSH
10913: LD_INT 40
10915: PPUSH
10916: LD_VAR 0 16
10920: PPUSH
10921: CALL_OW 321
10925: PUSH
10926: LD_INT 2
10928: EQUAL
10929: AND
10930: PUSH
10931: LD_INT 7
10933: PUSH
10934: LD_VAR 0 5
10938: IN
10939: PUSH
10940: LD_INT 28
10942: PUSH
10943: LD_VAR 0 5
10947: IN
10948: OR
10949: PUSH
10950: LD_INT 45
10952: PUSH
10953: LD_VAR 0 5
10957: IN
10958: OR
10959: AND
10960: IFFALSE 11214
// begin hex := GetHexInfo ( x , y ) ;
10962: LD_ADDR_VAR 0 4
10966: PUSH
10967: LD_VAR 0 10
10971: PPUSH
10972: LD_VAR 0 11
10976: PPUSH
10977: CALL_OW 546
10981: ST_TO_ADDR
// if hex [ 1 ] then
10982: LD_VAR 0 4
10986: PUSH
10987: LD_INT 1
10989: ARRAY
10990: IFFALSE 10994
// exit ;
10992: GO 11397
// height := hex [ 2 ] ;
10994: LD_ADDR_VAR 0 15
10998: PUSH
10999: LD_VAR 0 4
11003: PUSH
11004: LD_INT 2
11006: ARRAY
11007: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11008: LD_ADDR_VAR 0 14
11012: PUSH
11013: LD_INT 0
11015: PUSH
11016: LD_INT 2
11018: PUSH
11019: LD_INT 3
11021: PUSH
11022: LD_INT 5
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: ST_TO_ADDR
// for i in tmp do
11031: LD_ADDR_VAR 0 8
11035: PUSH
11036: LD_VAR 0 14
11040: PUSH
11041: FOR_IN
11042: IFFALSE 11212
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11044: LD_ADDR_VAR 0 9
11048: PUSH
11049: LD_VAR 0 10
11053: PPUSH
11054: LD_VAR 0 8
11058: PPUSH
11059: LD_INT 5
11061: PPUSH
11062: CALL_OW 272
11066: PUSH
11067: LD_VAR 0 11
11071: PPUSH
11072: LD_VAR 0 8
11076: PPUSH
11077: LD_INT 5
11079: PPUSH
11080: CALL_OW 273
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11089: LD_VAR 0 9
11093: PUSH
11094: LD_INT 1
11096: ARRAY
11097: PPUSH
11098: LD_VAR 0 9
11102: PUSH
11103: LD_INT 2
11105: ARRAY
11106: PPUSH
11107: CALL_OW 488
11111: IFFALSE 11210
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11113: LD_ADDR_VAR 0 4
11117: PUSH
11118: LD_VAR 0 9
11122: PUSH
11123: LD_INT 1
11125: ARRAY
11126: PPUSH
11127: LD_VAR 0 9
11131: PUSH
11132: LD_INT 2
11134: ARRAY
11135: PPUSH
11136: CALL_OW 546
11140: ST_TO_ADDR
// if hex [ 1 ] then
11141: LD_VAR 0 4
11145: PUSH
11146: LD_INT 1
11148: ARRAY
11149: IFFALSE 11153
// continue ;
11151: GO 11041
// h := hex [ 2 ] ;
11153: LD_ADDR_VAR 0 13
11157: PUSH
11158: LD_VAR 0 4
11162: PUSH
11163: LD_INT 2
11165: ARRAY
11166: ST_TO_ADDR
// if h + 7 < height then
11167: LD_VAR 0 13
11171: PUSH
11172: LD_INT 7
11174: PLUS
11175: PUSH
11176: LD_VAR 0 15
11180: LESS
11181: IFFALSE 11210
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11183: LD_ADDR_VAR 0 18
11187: PUSH
11188: LD_INT 7
11190: PUSH
11191: LD_INT 28
11193: PUSH
11194: LD_INT 45
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: LIST
11201: PUSH
11202: LD_VAR 0 12
11206: ARRAY
11207: ST_TO_ADDR
// break ;
11208: GO 11212
// end ; end ; end ;
11210: GO 11041
11212: POP
11213: POP
// end ; if not weapon then
11214: LD_VAR 0 18
11218: NOT
11219: IFFALSE 11279
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11221: LD_ADDR_VAR 0 5
11225: PUSH
11226: LD_VAR 0 5
11230: PUSH
11231: LD_INT 11
11233: PUSH
11234: LD_INT 30
11236: PUSH
11237: LD_INT 49
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: LIST
11244: DIFF
11245: ST_TO_ADDR
// if not list then
11246: LD_VAR 0 5
11250: NOT
11251: IFFALSE 11255
// exit ;
11253: GO 11397
// weapon := list [ rand ( 1 , list ) ] ;
11255: LD_ADDR_VAR 0 18
11259: PUSH
11260: LD_VAR 0 5
11264: PUSH
11265: LD_INT 1
11267: PPUSH
11268: LD_VAR 0 5
11272: PPUSH
11273: CALL_OW 12
11277: ARRAY
11278: ST_TO_ADDR
// end ; if weapon then
11279: LD_VAR 0 18
11283: IFFALSE 11397
// begin tmp := CostOfWeapon ( weapon ) ;
11285: LD_ADDR_VAR 0 14
11289: PUSH
11290: LD_VAR 0 18
11294: PPUSH
11295: CALL_OW 451
11299: ST_TO_ADDR
// j := GetBase ( tower ) ;
11300: LD_ADDR_VAR 0 9
11304: PUSH
11305: LD_VAR 0 1
11309: PPUSH
11310: CALL_OW 274
11314: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11315: LD_VAR 0 9
11319: PPUSH
11320: LD_INT 1
11322: PPUSH
11323: CALL_OW 275
11327: PUSH
11328: LD_VAR 0 14
11332: PUSH
11333: LD_INT 1
11335: ARRAY
11336: GREATEREQUAL
11337: PUSH
11338: LD_VAR 0 9
11342: PPUSH
11343: LD_INT 2
11345: PPUSH
11346: CALL_OW 275
11350: PUSH
11351: LD_VAR 0 14
11355: PUSH
11356: LD_INT 2
11358: ARRAY
11359: GREATEREQUAL
11360: AND
11361: PUSH
11362: LD_VAR 0 9
11366: PPUSH
11367: LD_INT 3
11369: PPUSH
11370: CALL_OW 275
11374: PUSH
11375: LD_VAR 0 14
11379: PUSH
11380: LD_INT 3
11382: ARRAY
11383: GREATEREQUAL
11384: AND
11385: IFFALSE 11397
// result := weapon ;
11387: LD_ADDR_VAR 0 3
11391: PUSH
11392: LD_VAR 0 18
11396: ST_TO_ADDR
// end ; end ;
11397: LD_VAR 0 3
11401: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11402: LD_INT 0
11404: PPUSH
11405: PPUSH
// result := true ;
11406: LD_ADDR_VAR 0 3
11410: PUSH
11411: LD_INT 1
11413: ST_TO_ADDR
// if array1 = array2 then
11414: LD_VAR 0 1
11418: PUSH
11419: LD_VAR 0 2
11423: EQUAL
11424: IFFALSE 11484
// begin for i = 1 to array1 do
11426: LD_ADDR_VAR 0 4
11430: PUSH
11431: DOUBLE
11432: LD_INT 1
11434: DEC
11435: ST_TO_ADDR
11436: LD_VAR 0 1
11440: PUSH
11441: FOR_TO
11442: IFFALSE 11480
// if array1 [ i ] <> array2 [ i ] then
11444: LD_VAR 0 1
11448: PUSH
11449: LD_VAR 0 4
11453: ARRAY
11454: PUSH
11455: LD_VAR 0 2
11459: PUSH
11460: LD_VAR 0 4
11464: ARRAY
11465: NONEQUAL
11466: IFFALSE 11478
// begin result := false ;
11468: LD_ADDR_VAR 0 3
11472: PUSH
11473: LD_INT 0
11475: ST_TO_ADDR
// break ;
11476: GO 11480
// end ;
11478: GO 11441
11480: POP
11481: POP
// end else
11482: GO 11492
// result := false ;
11484: LD_ADDR_VAR 0 3
11488: PUSH
11489: LD_INT 0
11491: ST_TO_ADDR
// end ;
11492: LD_VAR 0 3
11496: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11497: LD_INT 0
11499: PPUSH
11500: PPUSH
// if not array1 or not array2 then
11501: LD_VAR 0 1
11505: NOT
11506: PUSH
11507: LD_VAR 0 2
11511: NOT
11512: OR
11513: IFFALSE 11517
// exit ;
11515: GO 11581
// result := true ;
11517: LD_ADDR_VAR 0 3
11521: PUSH
11522: LD_INT 1
11524: ST_TO_ADDR
// for i = 1 to array1 do
11525: LD_ADDR_VAR 0 4
11529: PUSH
11530: DOUBLE
11531: LD_INT 1
11533: DEC
11534: ST_TO_ADDR
11535: LD_VAR 0 1
11539: PUSH
11540: FOR_TO
11541: IFFALSE 11579
// if array1 [ i ] <> array2 [ i ] then
11543: LD_VAR 0 1
11547: PUSH
11548: LD_VAR 0 4
11552: ARRAY
11553: PUSH
11554: LD_VAR 0 2
11558: PUSH
11559: LD_VAR 0 4
11563: ARRAY
11564: NONEQUAL
11565: IFFALSE 11577
// begin result := false ;
11567: LD_ADDR_VAR 0 3
11571: PUSH
11572: LD_INT 0
11574: ST_TO_ADDR
// break ;
11575: GO 11579
// end ;
11577: GO 11540
11579: POP
11580: POP
// end ;
11581: LD_VAR 0 3
11585: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11586: LD_INT 0
11588: PPUSH
11589: PPUSH
11590: PPUSH
// pom := GetBase ( fac ) ;
11591: LD_ADDR_VAR 0 5
11595: PUSH
11596: LD_VAR 0 1
11600: PPUSH
11601: CALL_OW 274
11605: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11606: LD_ADDR_VAR 0 4
11610: PUSH
11611: LD_VAR 0 2
11615: PUSH
11616: LD_INT 1
11618: ARRAY
11619: PPUSH
11620: LD_VAR 0 2
11624: PUSH
11625: LD_INT 2
11627: ARRAY
11628: PPUSH
11629: LD_VAR 0 2
11633: PUSH
11634: LD_INT 3
11636: ARRAY
11637: PPUSH
11638: LD_VAR 0 2
11642: PUSH
11643: LD_INT 4
11645: ARRAY
11646: PPUSH
11647: CALL_OW 449
11651: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11652: LD_ADDR_VAR 0 3
11656: PUSH
11657: LD_VAR 0 5
11661: PPUSH
11662: LD_INT 1
11664: PPUSH
11665: CALL_OW 275
11669: PUSH
11670: LD_VAR 0 4
11674: PUSH
11675: LD_INT 1
11677: ARRAY
11678: GREATEREQUAL
11679: PUSH
11680: LD_VAR 0 5
11684: PPUSH
11685: LD_INT 2
11687: PPUSH
11688: CALL_OW 275
11692: PUSH
11693: LD_VAR 0 4
11697: PUSH
11698: LD_INT 2
11700: ARRAY
11701: GREATEREQUAL
11702: AND
11703: PUSH
11704: LD_VAR 0 5
11708: PPUSH
11709: LD_INT 3
11711: PPUSH
11712: CALL_OW 275
11716: PUSH
11717: LD_VAR 0 4
11721: PUSH
11722: LD_INT 3
11724: ARRAY
11725: GREATEREQUAL
11726: AND
11727: ST_TO_ADDR
// end ;
11728: LD_VAR 0 3
11732: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
11733: LD_INT 0
11735: PPUSH
11736: PPUSH
11737: PPUSH
11738: PPUSH
// pom := GetBase ( building ) ;
11739: LD_ADDR_VAR 0 3
11743: PUSH
11744: LD_VAR 0 1
11748: PPUSH
11749: CALL_OW 274
11753: ST_TO_ADDR
// if not pom then
11754: LD_VAR 0 3
11758: NOT
11759: IFFALSE 11763
// exit ;
11761: GO 11933
// btype := GetBType ( building ) ;
11763: LD_ADDR_VAR 0 5
11767: PUSH
11768: LD_VAR 0 1
11772: PPUSH
11773: CALL_OW 266
11777: ST_TO_ADDR
// if btype = b_armoury then
11778: LD_VAR 0 5
11782: PUSH
11783: LD_INT 4
11785: EQUAL
11786: IFFALSE 11796
// btype := b_barracks ;
11788: LD_ADDR_VAR 0 5
11792: PUSH
11793: LD_INT 5
11795: ST_TO_ADDR
// if btype = b_depot then
11796: LD_VAR 0 5
11800: PUSH
11801: LD_INT 0
11803: EQUAL
11804: IFFALSE 11814
// btype := b_warehouse ;
11806: LD_ADDR_VAR 0 5
11810: PUSH
11811: LD_INT 1
11813: ST_TO_ADDR
// if btype = b_workshop then
11814: LD_VAR 0 5
11818: PUSH
11819: LD_INT 2
11821: EQUAL
11822: IFFALSE 11832
// btype := b_factory ;
11824: LD_ADDR_VAR 0 5
11828: PUSH
11829: LD_INT 3
11831: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11832: LD_ADDR_VAR 0 4
11836: PUSH
11837: LD_VAR 0 5
11841: PPUSH
11842: LD_VAR 0 1
11846: PPUSH
11847: CALL_OW 248
11851: PPUSH
11852: CALL_OW 450
11856: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11857: LD_ADDR_VAR 0 2
11861: PUSH
11862: LD_VAR 0 3
11866: PPUSH
11867: LD_INT 1
11869: PPUSH
11870: CALL_OW 275
11874: PUSH
11875: LD_VAR 0 4
11879: PUSH
11880: LD_INT 1
11882: ARRAY
11883: GREATEREQUAL
11884: PUSH
11885: LD_VAR 0 3
11889: PPUSH
11890: LD_INT 2
11892: PPUSH
11893: CALL_OW 275
11897: PUSH
11898: LD_VAR 0 4
11902: PUSH
11903: LD_INT 2
11905: ARRAY
11906: GREATEREQUAL
11907: AND
11908: PUSH
11909: LD_VAR 0 3
11913: PPUSH
11914: LD_INT 3
11916: PPUSH
11917: CALL_OW 275
11921: PUSH
11922: LD_VAR 0 4
11926: PUSH
11927: LD_INT 3
11929: ARRAY
11930: GREATEREQUAL
11931: AND
11932: ST_TO_ADDR
// end ;
11933: LD_VAR 0 2
11937: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
11938: LD_INT 0
11940: PPUSH
11941: PPUSH
11942: PPUSH
// pom := GetBase ( building ) ;
11943: LD_ADDR_VAR 0 4
11947: PUSH
11948: LD_VAR 0 1
11952: PPUSH
11953: CALL_OW 274
11957: ST_TO_ADDR
// if not pom then
11958: LD_VAR 0 4
11962: NOT
11963: IFFALSE 11967
// exit ;
11965: GO 12068
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11967: LD_ADDR_VAR 0 5
11971: PUSH
11972: LD_VAR 0 2
11976: PPUSH
11977: LD_VAR 0 1
11981: PPUSH
11982: CALL_OW 248
11986: PPUSH
11987: CALL_OW 450
11991: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11992: LD_ADDR_VAR 0 3
11996: PUSH
11997: LD_VAR 0 4
12001: PPUSH
12002: LD_INT 1
12004: PPUSH
12005: CALL_OW 275
12009: PUSH
12010: LD_VAR 0 5
12014: PUSH
12015: LD_INT 1
12017: ARRAY
12018: GREATEREQUAL
12019: PUSH
12020: LD_VAR 0 4
12024: PPUSH
12025: LD_INT 2
12027: PPUSH
12028: CALL_OW 275
12032: PUSH
12033: LD_VAR 0 5
12037: PUSH
12038: LD_INT 2
12040: ARRAY
12041: GREATEREQUAL
12042: AND
12043: PUSH
12044: LD_VAR 0 4
12048: PPUSH
12049: LD_INT 3
12051: PPUSH
12052: CALL_OW 275
12056: PUSH
12057: LD_VAR 0 5
12061: PUSH
12062: LD_INT 3
12064: ARRAY
12065: GREATEREQUAL
12066: AND
12067: ST_TO_ADDR
// end ;
12068: LD_VAR 0 3
12072: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12073: LD_INT 0
12075: PPUSH
12076: PPUSH
12077: PPUSH
12078: PPUSH
12079: PPUSH
12080: PPUSH
12081: PPUSH
12082: PPUSH
12083: PPUSH
12084: PPUSH
12085: PPUSH
// result := false ;
12086: LD_ADDR_VAR 0 8
12090: PUSH
12091: LD_INT 0
12093: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12094: LD_VAR 0 5
12098: NOT
12099: PUSH
12100: LD_VAR 0 1
12104: NOT
12105: OR
12106: PUSH
12107: LD_VAR 0 2
12111: NOT
12112: OR
12113: PUSH
12114: LD_VAR 0 3
12118: NOT
12119: OR
12120: IFFALSE 12124
// exit ;
12122: GO 12938
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12124: LD_ADDR_VAR 0 14
12128: PUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: LD_VAR 0 2
12138: PPUSH
12139: LD_VAR 0 3
12143: PPUSH
12144: LD_VAR 0 4
12148: PPUSH
12149: LD_VAR 0 5
12153: PUSH
12154: LD_INT 1
12156: ARRAY
12157: PPUSH
12158: CALL_OW 248
12162: PPUSH
12163: LD_INT 0
12165: PPUSH
12166: CALL 13775 0 6
12170: ST_TO_ADDR
// if not hexes then
12171: LD_VAR 0 14
12175: NOT
12176: IFFALSE 12180
// exit ;
12178: GO 12938
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12180: LD_ADDR_VAR 0 17
12184: PUSH
12185: LD_VAR 0 5
12189: PPUSH
12190: LD_INT 22
12192: PUSH
12193: LD_VAR 0 13
12197: PPUSH
12198: CALL_OW 255
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 2
12209: PUSH
12210: LD_INT 30
12212: PUSH
12213: LD_INT 0
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 30
12222: PUSH
12223: LD_INT 1
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: LIST
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PPUSH
12239: CALL_OW 72
12243: ST_TO_ADDR
// for i = 1 to hexes do
12244: LD_ADDR_VAR 0 9
12248: PUSH
12249: DOUBLE
12250: LD_INT 1
12252: DEC
12253: ST_TO_ADDR
12254: LD_VAR 0 14
12258: PUSH
12259: FOR_TO
12260: IFFALSE 12936
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12262: LD_ADDR_VAR 0 13
12266: PUSH
12267: LD_VAR 0 14
12271: PUSH
12272: LD_VAR 0 9
12276: ARRAY
12277: PUSH
12278: LD_INT 1
12280: ARRAY
12281: PPUSH
12282: LD_VAR 0 14
12286: PUSH
12287: LD_VAR 0 9
12291: ARRAY
12292: PUSH
12293: LD_INT 2
12295: ARRAY
12296: PPUSH
12297: CALL_OW 428
12301: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12302: LD_VAR 0 14
12306: PUSH
12307: LD_VAR 0 9
12311: ARRAY
12312: PUSH
12313: LD_INT 1
12315: ARRAY
12316: PPUSH
12317: LD_VAR 0 14
12321: PUSH
12322: LD_VAR 0 9
12326: ARRAY
12327: PUSH
12328: LD_INT 2
12330: ARRAY
12331: PPUSH
12332: CALL_OW 351
12336: PUSH
12337: LD_VAR 0 14
12341: PUSH
12342: LD_VAR 0 9
12346: ARRAY
12347: PUSH
12348: LD_INT 1
12350: ARRAY
12351: PPUSH
12352: LD_VAR 0 14
12356: PUSH
12357: LD_VAR 0 9
12361: ARRAY
12362: PUSH
12363: LD_INT 2
12365: ARRAY
12366: PPUSH
12367: CALL_OW 488
12371: NOT
12372: OR
12373: PUSH
12374: LD_VAR 0 13
12378: PPUSH
12379: CALL_OW 247
12383: PUSH
12384: LD_INT 3
12386: EQUAL
12387: OR
12388: IFFALSE 12394
// exit ;
12390: POP
12391: POP
12392: GO 12938
// if not tmp then
12394: LD_VAR 0 13
12398: NOT
12399: IFFALSE 12403
// continue ;
12401: GO 12259
// result := true ;
12403: LD_ADDR_VAR 0 8
12407: PUSH
12408: LD_INT 1
12410: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12411: LD_VAR 0 6
12415: PUSH
12416: LD_VAR 0 13
12420: PPUSH
12421: CALL_OW 247
12425: PUSH
12426: LD_INT 2
12428: EQUAL
12429: AND
12430: PUSH
12431: LD_VAR 0 13
12435: PPUSH
12436: CALL_OW 263
12440: PUSH
12441: LD_INT 1
12443: EQUAL
12444: AND
12445: IFFALSE 12609
// begin if IsDrivenBy ( tmp ) then
12447: LD_VAR 0 13
12451: PPUSH
12452: CALL_OW 311
12456: IFFALSE 12460
// continue ;
12458: GO 12259
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12460: LD_VAR 0 6
12464: PPUSH
12465: LD_INT 3
12467: PUSH
12468: LD_INT 60
12470: PUSH
12471: EMPTY
12472: LIST
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PUSH
12478: LD_INT 3
12480: PUSH
12481: LD_INT 55
12483: PUSH
12484: EMPTY
12485: LIST
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PPUSH
12495: CALL_OW 72
12499: IFFALSE 12607
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12501: LD_ADDR_VAR 0 18
12505: PUSH
12506: LD_VAR 0 6
12510: PPUSH
12511: LD_INT 3
12513: PUSH
12514: LD_INT 60
12516: PUSH
12517: EMPTY
12518: LIST
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 3
12526: PUSH
12527: LD_INT 55
12529: PUSH
12530: EMPTY
12531: LIST
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PPUSH
12541: CALL_OW 72
12545: PUSH
12546: LD_INT 1
12548: ARRAY
12549: ST_TO_ADDR
// if IsInUnit ( driver ) then
12550: LD_VAR 0 18
12554: PPUSH
12555: CALL_OW 310
12559: IFFALSE 12570
// ComExit ( driver ) ;
12561: LD_VAR 0 18
12565: PPUSH
12566: CALL 36959 0 1
// AddComEnterUnit ( driver , tmp ) ;
12570: LD_VAR 0 18
12574: PPUSH
12575: LD_VAR 0 13
12579: PPUSH
12580: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12584: LD_VAR 0 18
12588: PPUSH
12589: LD_VAR 0 7
12593: PPUSH
12594: CALL_OW 173
// AddComExitVehicle ( driver ) ;
12598: LD_VAR 0 18
12602: PPUSH
12603: CALL_OW 181
// end ; continue ;
12607: GO 12259
// end ; if not cleaners or not tmp in cleaners then
12609: LD_VAR 0 6
12613: NOT
12614: PUSH
12615: LD_VAR 0 13
12619: PUSH
12620: LD_VAR 0 6
12624: IN
12625: NOT
12626: OR
12627: IFFALSE 12934
// begin if dep then
12629: LD_VAR 0 17
12633: IFFALSE 12769
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
12635: LD_ADDR_VAR 0 16
12639: PUSH
12640: LD_VAR 0 17
12644: PUSH
12645: LD_INT 1
12647: ARRAY
12648: PPUSH
12649: CALL_OW 250
12653: PPUSH
12654: LD_VAR 0 17
12658: PUSH
12659: LD_INT 1
12661: ARRAY
12662: PPUSH
12663: CALL_OW 254
12667: PPUSH
12668: LD_INT 5
12670: PPUSH
12671: CALL_OW 272
12675: PUSH
12676: LD_VAR 0 17
12680: PUSH
12681: LD_INT 1
12683: ARRAY
12684: PPUSH
12685: CALL_OW 251
12689: PPUSH
12690: LD_VAR 0 17
12694: PUSH
12695: LD_INT 1
12697: ARRAY
12698: PPUSH
12699: CALL_OW 254
12703: PPUSH
12704: LD_INT 5
12706: PPUSH
12707: CALL_OW 273
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
12716: LD_VAR 0 16
12720: PUSH
12721: LD_INT 1
12723: ARRAY
12724: PPUSH
12725: LD_VAR 0 16
12729: PUSH
12730: LD_INT 2
12732: ARRAY
12733: PPUSH
12734: CALL_OW 488
12738: IFFALSE 12769
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
12740: LD_VAR 0 13
12744: PPUSH
12745: LD_VAR 0 16
12749: PUSH
12750: LD_INT 1
12752: ARRAY
12753: PPUSH
12754: LD_VAR 0 16
12758: PUSH
12759: LD_INT 2
12761: ARRAY
12762: PPUSH
12763: CALL_OW 111
// continue ;
12767: GO 12259
// end ; end ; r := GetDir ( tmp ) ;
12769: LD_ADDR_VAR 0 15
12773: PUSH
12774: LD_VAR 0 13
12778: PPUSH
12779: CALL_OW 254
12783: ST_TO_ADDR
// if r = 5 then
12784: LD_VAR 0 15
12788: PUSH
12789: LD_INT 5
12791: EQUAL
12792: IFFALSE 12802
// r := 0 ;
12794: LD_ADDR_VAR 0 15
12798: PUSH
12799: LD_INT 0
12801: ST_TO_ADDR
// for j = r to 5 do
12802: LD_ADDR_VAR 0 10
12806: PUSH
12807: DOUBLE
12808: LD_VAR 0 15
12812: DEC
12813: ST_TO_ADDR
12814: LD_INT 5
12816: PUSH
12817: FOR_TO
12818: IFFALSE 12932
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
12820: LD_ADDR_VAR 0 11
12824: PUSH
12825: LD_VAR 0 13
12829: PPUSH
12830: CALL_OW 250
12834: PPUSH
12835: LD_VAR 0 10
12839: PPUSH
12840: LD_INT 2
12842: PPUSH
12843: CALL_OW 272
12847: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
12848: LD_ADDR_VAR 0 12
12852: PUSH
12853: LD_VAR 0 13
12857: PPUSH
12858: CALL_OW 251
12862: PPUSH
12863: LD_VAR 0 10
12867: PPUSH
12868: LD_INT 2
12870: PPUSH
12871: CALL_OW 273
12875: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
12876: LD_VAR 0 11
12880: PPUSH
12881: LD_VAR 0 12
12885: PPUSH
12886: CALL_OW 488
12890: PUSH
12891: LD_VAR 0 11
12895: PPUSH
12896: LD_VAR 0 12
12900: PPUSH
12901: CALL_OW 428
12905: NOT
12906: AND
12907: IFFALSE 12930
// begin ComMoveXY ( tmp , _x , _y ) ;
12909: LD_VAR 0 13
12913: PPUSH
12914: LD_VAR 0 11
12918: PPUSH
12919: LD_VAR 0 12
12923: PPUSH
12924: CALL_OW 111
// break ;
12928: GO 12932
// end ; end ;
12930: GO 12817
12932: POP
12933: POP
// end ; end ;
12934: GO 12259
12936: POP
12937: POP
// end ;
12938: LD_VAR 0 8
12942: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
12943: LD_INT 0
12945: PPUSH
12946: PPUSH
12947: PPUSH
12948: PPUSH
12949: PPUSH
12950: PPUSH
12951: PPUSH
12952: PPUSH
12953: PPUSH
12954: PPUSH
// result := false ;
12955: LD_ADDR_VAR 0 6
12959: PUSH
12960: LD_INT 0
12962: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
12963: LD_VAR 0 1
12967: NOT
12968: PUSH
12969: LD_VAR 0 1
12973: PPUSH
12974: CALL_OW 266
12978: PUSH
12979: LD_INT 0
12981: PUSH
12982: LD_INT 1
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: IN
12989: NOT
12990: OR
12991: PUSH
12992: LD_VAR 0 2
12996: NOT
12997: OR
12998: PUSH
12999: LD_VAR 0 5
13003: PUSH
13004: LD_INT 0
13006: PUSH
13007: LD_INT 1
13009: PUSH
13010: LD_INT 2
13012: PUSH
13013: LD_INT 3
13015: PUSH
13016: LD_INT 4
13018: PUSH
13019: LD_INT 5
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: IN
13030: NOT
13031: OR
13032: PUSH
13033: LD_VAR 0 3
13037: PPUSH
13038: LD_VAR 0 4
13042: PPUSH
13043: CALL_OW 488
13047: NOT
13048: OR
13049: IFFALSE 13053
// exit ;
13051: GO 13770
// pom := GetBase ( depot ) ;
13053: LD_ADDR_VAR 0 10
13057: PUSH
13058: LD_VAR 0 1
13062: PPUSH
13063: CALL_OW 274
13067: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13068: LD_ADDR_VAR 0 11
13072: PUSH
13073: LD_VAR 0 2
13077: PPUSH
13078: LD_VAR 0 1
13082: PPUSH
13083: CALL_OW 248
13087: PPUSH
13088: CALL_OW 450
13092: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13093: LD_VAR 0 10
13097: PPUSH
13098: LD_INT 1
13100: PPUSH
13101: CALL_OW 275
13105: PUSH
13106: LD_VAR 0 11
13110: PUSH
13111: LD_INT 1
13113: ARRAY
13114: GREATEREQUAL
13115: PUSH
13116: LD_VAR 0 10
13120: PPUSH
13121: LD_INT 2
13123: PPUSH
13124: CALL_OW 275
13128: PUSH
13129: LD_VAR 0 11
13133: PUSH
13134: LD_INT 2
13136: ARRAY
13137: GREATEREQUAL
13138: AND
13139: PUSH
13140: LD_VAR 0 10
13144: PPUSH
13145: LD_INT 3
13147: PPUSH
13148: CALL_OW 275
13152: PUSH
13153: LD_VAR 0 11
13157: PUSH
13158: LD_INT 3
13160: ARRAY
13161: GREATEREQUAL
13162: AND
13163: NOT
13164: IFFALSE 13168
// exit ;
13166: GO 13770
// if GetBType ( depot ) = b_depot then
13168: LD_VAR 0 1
13172: PPUSH
13173: CALL_OW 266
13177: PUSH
13178: LD_INT 0
13180: EQUAL
13181: IFFALSE 13193
// dist := 28 else
13183: LD_ADDR_VAR 0 14
13187: PUSH
13188: LD_INT 28
13190: ST_TO_ADDR
13191: GO 13201
// dist := 36 ;
13193: LD_ADDR_VAR 0 14
13197: PUSH
13198: LD_INT 36
13200: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
13201: LD_VAR 0 1
13205: PPUSH
13206: LD_VAR 0 3
13210: PPUSH
13211: LD_VAR 0 4
13215: PPUSH
13216: CALL_OW 297
13220: PUSH
13221: LD_VAR 0 14
13225: GREATER
13226: IFFALSE 13230
// exit ;
13228: GO 13770
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
13230: LD_ADDR_VAR 0 12
13234: PUSH
13235: LD_VAR 0 2
13239: PPUSH
13240: LD_VAR 0 3
13244: PPUSH
13245: LD_VAR 0 4
13249: PPUSH
13250: LD_VAR 0 5
13254: PPUSH
13255: LD_VAR 0 1
13259: PPUSH
13260: CALL_OW 248
13264: PPUSH
13265: LD_INT 0
13267: PPUSH
13268: CALL 13775 0 6
13272: ST_TO_ADDR
// if not hexes then
13273: LD_VAR 0 12
13277: NOT
13278: IFFALSE 13282
// exit ;
13280: GO 13770
// hex := GetHexInfo ( x , y ) ;
13282: LD_ADDR_VAR 0 15
13286: PUSH
13287: LD_VAR 0 3
13291: PPUSH
13292: LD_VAR 0 4
13296: PPUSH
13297: CALL_OW 546
13301: ST_TO_ADDR
// if hex [ 1 ] then
13302: LD_VAR 0 15
13306: PUSH
13307: LD_INT 1
13309: ARRAY
13310: IFFALSE 13314
// exit ;
13312: GO 13770
// height := hex [ 2 ] ;
13314: LD_ADDR_VAR 0 13
13318: PUSH
13319: LD_VAR 0 15
13323: PUSH
13324: LD_INT 2
13326: ARRAY
13327: ST_TO_ADDR
// for i = 1 to hexes do
13328: LD_ADDR_VAR 0 7
13332: PUSH
13333: DOUBLE
13334: LD_INT 1
13336: DEC
13337: ST_TO_ADDR
13338: LD_VAR 0 12
13342: PUSH
13343: FOR_TO
13344: IFFALSE 13674
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
13346: LD_VAR 0 12
13350: PUSH
13351: LD_VAR 0 7
13355: ARRAY
13356: PUSH
13357: LD_INT 1
13359: ARRAY
13360: PPUSH
13361: LD_VAR 0 12
13365: PUSH
13366: LD_VAR 0 7
13370: ARRAY
13371: PUSH
13372: LD_INT 2
13374: ARRAY
13375: PPUSH
13376: CALL_OW 488
13380: NOT
13381: PUSH
13382: LD_VAR 0 12
13386: PUSH
13387: LD_VAR 0 7
13391: ARRAY
13392: PUSH
13393: LD_INT 1
13395: ARRAY
13396: PPUSH
13397: LD_VAR 0 12
13401: PUSH
13402: LD_VAR 0 7
13406: ARRAY
13407: PUSH
13408: LD_INT 2
13410: ARRAY
13411: PPUSH
13412: CALL_OW 428
13416: PUSH
13417: LD_INT 0
13419: GREATER
13420: OR
13421: PUSH
13422: LD_VAR 0 12
13426: PUSH
13427: LD_VAR 0 7
13431: ARRAY
13432: PUSH
13433: LD_INT 1
13435: ARRAY
13436: PPUSH
13437: LD_VAR 0 12
13441: PUSH
13442: LD_VAR 0 7
13446: ARRAY
13447: PUSH
13448: LD_INT 2
13450: ARRAY
13451: PPUSH
13452: CALL_OW 351
13456: OR
13457: IFFALSE 13463
// exit ;
13459: POP
13460: POP
13461: GO 13770
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13463: LD_ADDR_VAR 0 8
13467: PUSH
13468: LD_VAR 0 12
13472: PUSH
13473: LD_VAR 0 7
13477: ARRAY
13478: PUSH
13479: LD_INT 1
13481: ARRAY
13482: PPUSH
13483: LD_VAR 0 12
13487: PUSH
13488: LD_VAR 0 7
13492: ARRAY
13493: PUSH
13494: LD_INT 2
13496: ARRAY
13497: PPUSH
13498: CALL_OW 546
13502: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
13503: LD_VAR 0 8
13507: PUSH
13508: LD_INT 1
13510: ARRAY
13511: PUSH
13512: LD_VAR 0 8
13516: PUSH
13517: LD_INT 2
13519: ARRAY
13520: PUSH
13521: LD_VAR 0 13
13525: PUSH
13526: LD_INT 2
13528: PLUS
13529: GREATER
13530: OR
13531: PUSH
13532: LD_VAR 0 8
13536: PUSH
13537: LD_INT 2
13539: ARRAY
13540: PUSH
13541: LD_VAR 0 13
13545: PUSH
13546: LD_INT 2
13548: MINUS
13549: LESS
13550: OR
13551: PUSH
13552: LD_VAR 0 8
13556: PUSH
13557: LD_INT 3
13559: ARRAY
13560: PUSH
13561: LD_INT 0
13563: PUSH
13564: LD_INT 8
13566: PUSH
13567: LD_INT 9
13569: PUSH
13570: LD_INT 10
13572: PUSH
13573: LD_INT 11
13575: PUSH
13576: LD_INT 12
13578: PUSH
13579: LD_INT 13
13581: PUSH
13582: LD_INT 16
13584: PUSH
13585: LD_INT 17
13587: PUSH
13588: LD_INT 18
13590: PUSH
13591: LD_INT 19
13593: PUSH
13594: LD_INT 20
13596: PUSH
13597: LD_INT 21
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: IN
13615: NOT
13616: OR
13617: PUSH
13618: LD_VAR 0 8
13622: PUSH
13623: LD_INT 5
13625: ARRAY
13626: NOT
13627: OR
13628: PUSH
13629: LD_VAR 0 8
13633: PUSH
13634: LD_INT 6
13636: ARRAY
13637: PUSH
13638: LD_INT 1
13640: PUSH
13641: LD_INT 2
13643: PUSH
13644: LD_INT 7
13646: PUSH
13647: LD_INT 9
13649: PUSH
13650: LD_INT 10
13652: PUSH
13653: LD_INT 11
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: IN
13664: NOT
13665: OR
13666: IFFALSE 13672
// exit ;
13668: POP
13669: POP
13670: GO 13770
// end ;
13672: GO 13343
13674: POP
13675: POP
// side := GetSide ( depot ) ;
13676: LD_ADDR_VAR 0 9
13680: PUSH
13681: LD_VAR 0 1
13685: PPUSH
13686: CALL_OW 255
13690: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
13691: LD_VAR 0 9
13695: PPUSH
13696: LD_VAR 0 3
13700: PPUSH
13701: LD_VAR 0 4
13705: PPUSH
13706: LD_INT 20
13708: PPUSH
13709: CALL 6091 0 4
13713: PUSH
13714: LD_INT 4
13716: ARRAY
13717: IFFALSE 13721
// exit ;
13719: GO 13770
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
13721: LD_VAR 0 2
13725: PUSH
13726: LD_INT 29
13728: PUSH
13729: LD_INT 30
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: IN
13736: PUSH
13737: LD_VAR 0 3
13741: PPUSH
13742: LD_VAR 0 4
13746: PPUSH
13747: LD_VAR 0 9
13751: PPUSH
13752: CALL_OW 440
13756: NOT
13757: AND
13758: IFFALSE 13762
// exit ;
13760: GO 13770
// result := true ;
13762: LD_ADDR_VAR 0 6
13766: PUSH
13767: LD_INT 1
13769: ST_TO_ADDR
// end ;
13770: LD_VAR 0 6
13774: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
13775: LD_INT 0
13777: PPUSH
13778: PPUSH
13779: PPUSH
13780: PPUSH
13781: PPUSH
13782: PPUSH
13783: PPUSH
13784: PPUSH
13785: PPUSH
13786: PPUSH
13787: PPUSH
13788: PPUSH
13789: PPUSH
13790: PPUSH
13791: PPUSH
13792: PPUSH
13793: PPUSH
13794: PPUSH
13795: PPUSH
13796: PPUSH
13797: PPUSH
13798: PPUSH
13799: PPUSH
13800: PPUSH
13801: PPUSH
13802: PPUSH
13803: PPUSH
13804: PPUSH
13805: PPUSH
13806: PPUSH
13807: PPUSH
13808: PPUSH
13809: PPUSH
13810: PPUSH
13811: PPUSH
13812: PPUSH
13813: PPUSH
13814: PPUSH
13815: PPUSH
13816: PPUSH
13817: PPUSH
13818: PPUSH
13819: PPUSH
13820: PPUSH
13821: PPUSH
13822: PPUSH
13823: PPUSH
13824: PPUSH
13825: PPUSH
13826: PPUSH
13827: PPUSH
13828: PPUSH
13829: PPUSH
13830: PPUSH
13831: PPUSH
13832: PPUSH
13833: PPUSH
13834: PPUSH
// result = [ ] ;
13835: LD_ADDR_VAR 0 7
13839: PUSH
13840: EMPTY
13841: ST_TO_ADDR
// temp_list = [ ] ;
13842: LD_ADDR_VAR 0 9
13846: PUSH
13847: EMPTY
13848: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
13849: LD_VAR 0 4
13853: PUSH
13854: LD_INT 0
13856: PUSH
13857: LD_INT 1
13859: PUSH
13860: LD_INT 2
13862: PUSH
13863: LD_INT 3
13865: PUSH
13866: LD_INT 4
13868: PUSH
13869: LD_INT 5
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: IN
13880: NOT
13881: PUSH
13882: LD_VAR 0 1
13886: PUSH
13887: LD_INT 0
13889: PUSH
13890: LD_INT 1
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: IN
13897: PUSH
13898: LD_VAR 0 5
13902: PUSH
13903: LD_INT 1
13905: PUSH
13906: LD_INT 2
13908: PUSH
13909: LD_INT 3
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: IN
13917: NOT
13918: AND
13919: OR
13920: IFFALSE 13924
// exit ;
13922: GO 32315
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
13924: LD_VAR 0 1
13928: PUSH
13929: LD_INT 6
13931: PUSH
13932: LD_INT 7
13934: PUSH
13935: LD_INT 8
13937: PUSH
13938: LD_INT 13
13940: PUSH
13941: LD_INT 12
13943: PUSH
13944: LD_INT 15
13946: PUSH
13947: LD_INT 11
13949: PUSH
13950: LD_INT 14
13952: PUSH
13953: LD_INT 10
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: IN
13967: IFFALSE 13977
// btype = b_lab ;
13969: LD_ADDR_VAR 0 1
13973: PUSH
13974: LD_INT 6
13976: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
13977: LD_VAR 0 6
13981: PUSH
13982: LD_INT 0
13984: PUSH
13985: LD_INT 1
13987: PUSH
13988: LD_INT 2
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: LIST
13995: IN
13996: NOT
13997: PUSH
13998: LD_VAR 0 1
14002: PUSH
14003: LD_INT 0
14005: PUSH
14006: LD_INT 1
14008: PUSH
14009: LD_INT 2
14011: PUSH
14012: LD_INT 3
14014: PUSH
14015: LD_INT 6
14017: PUSH
14018: LD_INT 36
14020: PUSH
14021: LD_INT 4
14023: PUSH
14024: LD_INT 5
14026: PUSH
14027: LD_INT 31
14029: PUSH
14030: LD_INT 32
14032: PUSH
14033: LD_INT 33
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: IN
14049: NOT
14050: PUSH
14051: LD_VAR 0 6
14055: PUSH
14056: LD_INT 1
14058: EQUAL
14059: AND
14060: OR
14061: PUSH
14062: LD_VAR 0 1
14066: PUSH
14067: LD_INT 2
14069: PUSH
14070: LD_INT 3
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: IN
14077: NOT
14078: PUSH
14079: LD_VAR 0 6
14083: PUSH
14084: LD_INT 2
14086: EQUAL
14087: AND
14088: OR
14089: IFFALSE 14099
// mode = 0 ;
14091: LD_ADDR_VAR 0 6
14095: PUSH
14096: LD_INT 0
14098: ST_TO_ADDR
// case mode of 0 :
14099: LD_VAR 0 6
14103: PUSH
14104: LD_INT 0
14106: DOUBLE
14107: EQUAL
14108: IFTRUE 14112
14110: GO 25565
14112: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14113: LD_ADDR_VAR 0 11
14117: PUSH
14118: LD_INT 0
14120: PUSH
14121: LD_INT 0
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: LD_INT 0
14130: PUSH
14131: LD_INT 1
14133: NEG
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 1
14141: PUSH
14142: LD_INT 0
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 1
14151: PUSH
14152: LD_INT 1
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PUSH
14159: LD_INT 0
14161: PUSH
14162: LD_INT 1
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 1
14171: NEG
14172: PUSH
14173: LD_INT 0
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: LD_INT 1
14182: NEG
14183: PUSH
14184: LD_INT 1
14186: NEG
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: LD_INT 1
14194: NEG
14195: PUSH
14196: LD_INT 2
14198: NEG
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PUSH
14204: LD_INT 0
14206: PUSH
14207: LD_INT 2
14209: NEG
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 1
14217: PUSH
14218: LD_INT 1
14220: NEG
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 1
14228: PUSH
14229: LD_INT 2
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 0
14238: PUSH
14239: LD_INT 2
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PUSH
14246: LD_INT 1
14248: NEG
14249: PUSH
14250: LD_INT 1
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: LD_INT 1
14259: PUSH
14260: LD_INT 3
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: LD_INT 0
14269: PUSH
14270: LD_INT 3
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 1
14279: NEG
14280: PUSH
14281: LD_INT 2
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
14306: LD_ADDR_VAR 0 12
14310: PUSH
14311: LD_INT 0
14313: PUSH
14314: LD_INT 0
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: LD_INT 0
14323: PUSH
14324: LD_INT 1
14326: NEG
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PUSH
14332: LD_INT 1
14334: PUSH
14335: LD_INT 0
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 1
14344: PUSH
14345: LD_INT 1
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 0
14354: PUSH
14355: LD_INT 1
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 1
14364: NEG
14365: PUSH
14366: LD_INT 0
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: LD_INT 1
14375: NEG
14376: PUSH
14377: LD_INT 1
14379: NEG
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 1
14387: PUSH
14388: LD_INT 1
14390: NEG
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PUSH
14396: LD_INT 2
14398: PUSH
14399: LD_INT 0
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 2
14408: PUSH
14409: LD_INT 1
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 1
14418: NEG
14419: PUSH
14420: LD_INT 1
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: LD_INT 2
14429: NEG
14430: PUSH
14431: LD_INT 0
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 2
14440: NEG
14441: PUSH
14442: LD_INT 1
14444: NEG
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: LD_INT 2
14452: NEG
14453: PUSH
14454: LD_INT 1
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 3
14463: NEG
14464: PUSH
14465: LD_INT 0
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 3
14474: NEG
14475: PUSH
14476: LD_INT 1
14478: NEG
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
14502: LD_ADDR_VAR 0 13
14506: PUSH
14507: LD_INT 0
14509: PUSH
14510: LD_INT 0
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: LD_INT 0
14519: PUSH
14520: LD_INT 1
14522: NEG
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 1
14530: PUSH
14531: LD_INT 0
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: LD_INT 1
14540: PUSH
14541: LD_INT 1
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PUSH
14548: LD_INT 0
14550: PUSH
14551: LD_INT 1
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PUSH
14558: LD_INT 1
14560: NEG
14561: PUSH
14562: LD_INT 0
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: LD_INT 1
14571: NEG
14572: PUSH
14573: LD_INT 1
14575: NEG
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: LD_INT 1
14583: NEG
14584: PUSH
14585: LD_INT 2
14587: NEG
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: PUSH
14593: LD_INT 2
14595: PUSH
14596: LD_INT 1
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PUSH
14603: LD_INT 2
14605: PUSH
14606: LD_INT 2
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PUSH
14613: LD_INT 1
14615: PUSH
14616: LD_INT 2
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 2
14625: NEG
14626: PUSH
14627: LD_INT 1
14629: NEG
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: LD_INT 2
14637: NEG
14638: PUSH
14639: LD_INT 2
14641: NEG
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 2
14649: NEG
14650: PUSH
14651: LD_INT 3
14653: NEG
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: LD_INT 3
14661: NEG
14662: PUSH
14663: LD_INT 2
14665: NEG
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PUSH
14671: LD_INT 3
14673: NEG
14674: PUSH
14675: LD_INT 3
14677: NEG
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
14701: LD_ADDR_VAR 0 14
14705: PUSH
14706: LD_INT 0
14708: PUSH
14709: LD_INT 0
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: LD_INT 0
14718: PUSH
14719: LD_INT 1
14721: NEG
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: LD_INT 1
14729: PUSH
14730: LD_INT 0
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PUSH
14737: LD_INT 1
14739: PUSH
14740: LD_INT 1
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PUSH
14747: LD_INT 0
14749: PUSH
14750: LD_INT 1
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PUSH
14757: LD_INT 1
14759: NEG
14760: PUSH
14761: LD_INT 0
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: LD_INT 1
14770: NEG
14771: PUSH
14772: LD_INT 1
14774: NEG
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: LD_INT 1
14782: NEG
14783: PUSH
14784: LD_INT 2
14786: NEG
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PUSH
14792: LD_INT 0
14794: PUSH
14795: LD_INT 2
14797: NEG
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: LD_INT 1
14808: NEG
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: LD_INT 1
14816: PUSH
14817: LD_INT 2
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 0
14826: PUSH
14827: LD_INT 2
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 1
14836: NEG
14837: PUSH
14838: LD_INT 1
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 1
14847: NEG
14848: PUSH
14849: LD_INT 3
14851: NEG
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 0
14859: PUSH
14860: LD_INT 3
14862: NEG
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 1
14870: PUSH
14871: LD_INT 2
14873: NEG
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
14897: LD_ADDR_VAR 0 15
14901: PUSH
14902: LD_INT 0
14904: PUSH
14905: LD_INT 0
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: LD_INT 0
14914: PUSH
14915: LD_INT 1
14917: NEG
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 1
14925: PUSH
14926: LD_INT 0
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 1
14935: PUSH
14936: LD_INT 1
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PUSH
14943: LD_INT 0
14945: PUSH
14946: LD_INT 1
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 1
14955: NEG
14956: PUSH
14957: LD_INT 0
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PUSH
14964: LD_INT 1
14966: NEG
14967: PUSH
14968: LD_INT 1
14970: NEG
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: LD_INT 1
14978: PUSH
14979: LD_INT 1
14981: NEG
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: LD_INT 2
14989: PUSH
14990: LD_INT 0
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 2
14999: PUSH
15000: LD_INT 1
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: LD_INT 1
15009: NEG
15010: PUSH
15011: LD_INT 1
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PUSH
15018: LD_INT 2
15020: NEG
15021: PUSH
15022: LD_INT 0
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PUSH
15029: LD_INT 2
15031: NEG
15032: PUSH
15033: LD_INT 1
15035: NEG
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 2
15043: PUSH
15044: LD_INT 1
15046: NEG
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: LD_INT 3
15054: PUSH
15055: LD_INT 0
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PUSH
15062: LD_INT 3
15064: PUSH
15065: LD_INT 1
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15090: LD_ADDR_VAR 0 16
15094: PUSH
15095: LD_INT 0
15097: PUSH
15098: LD_INT 0
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: PUSH
15105: LD_INT 0
15107: PUSH
15108: LD_INT 1
15110: NEG
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: PUSH
15116: LD_INT 1
15118: PUSH
15119: LD_INT 0
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 1
15128: PUSH
15129: LD_INT 1
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: PUSH
15136: LD_INT 0
15138: PUSH
15139: LD_INT 1
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PUSH
15146: LD_INT 1
15148: NEG
15149: PUSH
15150: LD_INT 0
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PUSH
15157: LD_INT 1
15159: NEG
15160: PUSH
15161: LD_INT 1
15163: NEG
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PUSH
15169: LD_INT 1
15171: NEG
15172: PUSH
15173: LD_INT 2
15175: NEG
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: LD_INT 2
15183: PUSH
15184: LD_INT 1
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 2
15193: PUSH
15194: LD_INT 2
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: LD_INT 1
15203: PUSH
15204: LD_INT 2
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 2
15213: NEG
15214: PUSH
15215: LD_INT 1
15217: NEG
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: LD_INT 2
15225: NEG
15226: PUSH
15227: LD_INT 2
15229: NEG
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: LD_INT 3
15237: PUSH
15238: LD_INT 2
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PUSH
15245: LD_INT 3
15247: PUSH
15248: LD_INT 3
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: LD_INT 2
15257: PUSH
15258: LD_INT 3
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15283: LD_ADDR_VAR 0 17
15287: PUSH
15288: LD_INT 0
15290: PUSH
15291: LD_INT 0
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 0
15300: PUSH
15301: LD_INT 1
15303: NEG
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 1
15311: PUSH
15312: LD_INT 0
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 1
15321: PUSH
15322: LD_INT 1
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: LD_INT 0
15331: PUSH
15332: LD_INT 1
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 1
15341: NEG
15342: PUSH
15343: LD_INT 0
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: LD_INT 1
15352: NEG
15353: PUSH
15354: LD_INT 1
15356: NEG
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: LD_INT 1
15364: NEG
15365: PUSH
15366: LD_INT 2
15368: NEG
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PUSH
15374: LD_INT 0
15376: PUSH
15377: LD_INT 2
15379: NEG
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 1
15387: PUSH
15388: LD_INT 1
15390: NEG
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: PUSH
15396: LD_INT 2
15398: PUSH
15399: LD_INT 0
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: PUSH
15406: LD_INT 2
15408: PUSH
15409: LD_INT 1
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: LD_INT 2
15418: PUSH
15419: LD_INT 2
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 1
15428: PUSH
15429: LD_INT 2
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 0
15438: PUSH
15439: LD_INT 2
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: LD_INT 1
15448: NEG
15449: PUSH
15450: LD_INT 1
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: LD_INT 2
15459: NEG
15460: PUSH
15461: LD_INT 0
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 2
15470: NEG
15471: PUSH
15472: LD_INT 1
15474: NEG
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: LD_INT 2
15482: NEG
15483: PUSH
15484: LD_INT 2
15486: NEG
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15513: LD_ADDR_VAR 0 18
15517: PUSH
15518: LD_INT 0
15520: PUSH
15521: LD_INT 0
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 0
15530: PUSH
15531: LD_INT 1
15533: NEG
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 1
15541: PUSH
15542: LD_INT 0
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: LD_INT 1
15551: PUSH
15552: LD_INT 1
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PUSH
15559: LD_INT 0
15561: PUSH
15562: LD_INT 1
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: PUSH
15569: LD_INT 1
15571: NEG
15572: PUSH
15573: LD_INT 0
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: LD_INT 1
15582: NEG
15583: PUSH
15584: LD_INT 1
15586: NEG
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 1
15594: NEG
15595: PUSH
15596: LD_INT 2
15598: NEG
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 0
15606: PUSH
15607: LD_INT 2
15609: NEG
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: LD_INT 1
15617: PUSH
15618: LD_INT 1
15620: NEG
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 2
15628: PUSH
15629: LD_INT 0
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 2
15638: PUSH
15639: LD_INT 1
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 2
15648: PUSH
15649: LD_INT 2
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: LD_INT 1
15658: PUSH
15659: LD_INT 2
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 0
15668: PUSH
15669: LD_INT 2
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 1
15678: NEG
15679: PUSH
15680: LD_INT 1
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 2
15689: NEG
15690: PUSH
15691: LD_INT 0
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 2
15700: NEG
15701: PUSH
15702: LD_INT 1
15704: NEG
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PUSH
15710: LD_INT 2
15712: NEG
15713: PUSH
15714: LD_INT 2
15716: NEG
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15743: LD_ADDR_VAR 0 19
15747: PUSH
15748: LD_INT 0
15750: PUSH
15751: LD_INT 0
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: LD_INT 0
15760: PUSH
15761: LD_INT 1
15763: NEG
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 1
15771: PUSH
15772: LD_INT 0
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 1
15781: PUSH
15782: LD_INT 1
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 0
15791: PUSH
15792: LD_INT 1
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 1
15801: NEG
15802: PUSH
15803: LD_INT 0
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 1
15812: NEG
15813: PUSH
15814: LD_INT 1
15816: NEG
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 1
15824: NEG
15825: PUSH
15826: LD_INT 2
15828: NEG
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 0
15836: PUSH
15837: LD_INT 2
15839: NEG
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PUSH
15845: LD_INT 1
15847: PUSH
15848: LD_INT 1
15850: NEG
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 2
15858: PUSH
15859: LD_INT 0
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 2
15868: PUSH
15869: LD_INT 1
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: LD_INT 2
15878: PUSH
15879: LD_INT 2
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PUSH
15886: LD_INT 1
15888: PUSH
15889: LD_INT 2
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 0
15898: PUSH
15899: LD_INT 2
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 1
15908: NEG
15909: PUSH
15910: LD_INT 1
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 2
15919: NEG
15920: PUSH
15921: LD_INT 0
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 2
15930: NEG
15931: PUSH
15932: LD_INT 1
15934: NEG
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 2
15942: NEG
15943: PUSH
15944: LD_INT 2
15946: NEG
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15973: LD_ADDR_VAR 0 20
15977: PUSH
15978: LD_INT 0
15980: PUSH
15981: LD_INT 0
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: LD_INT 0
15990: PUSH
15991: LD_INT 1
15993: NEG
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 1
16001: PUSH
16002: LD_INT 0
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 1
16011: PUSH
16012: LD_INT 1
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PUSH
16019: LD_INT 0
16021: PUSH
16022: LD_INT 1
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: LD_INT 1
16031: NEG
16032: PUSH
16033: LD_INT 0
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PUSH
16040: LD_INT 1
16042: NEG
16043: PUSH
16044: LD_INT 1
16046: NEG
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: LD_INT 1
16054: NEG
16055: PUSH
16056: LD_INT 2
16058: NEG
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: LD_INT 0
16066: PUSH
16067: LD_INT 2
16069: NEG
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: LD_INT 1
16077: PUSH
16078: LD_INT 1
16080: NEG
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: LD_INT 2
16088: PUSH
16089: LD_INT 0
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: LD_INT 2
16098: PUSH
16099: LD_INT 1
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: LD_INT 2
16108: PUSH
16109: LD_INT 2
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PUSH
16116: LD_INT 1
16118: PUSH
16119: LD_INT 2
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PUSH
16126: LD_INT 0
16128: PUSH
16129: LD_INT 2
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PUSH
16136: LD_INT 1
16138: NEG
16139: PUSH
16140: LD_INT 1
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: PUSH
16147: LD_INT 2
16149: NEG
16150: PUSH
16151: LD_INT 0
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 2
16160: NEG
16161: PUSH
16162: LD_INT 1
16164: NEG
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 2
16172: NEG
16173: PUSH
16174: LD_INT 2
16176: NEG
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16203: LD_ADDR_VAR 0 21
16207: PUSH
16208: LD_INT 0
16210: PUSH
16211: LD_INT 0
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 0
16220: PUSH
16221: LD_INT 1
16223: NEG
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 1
16231: PUSH
16232: LD_INT 0
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 1
16241: PUSH
16242: LD_INT 1
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 0
16251: PUSH
16252: LD_INT 1
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 1
16261: NEG
16262: PUSH
16263: LD_INT 0
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 1
16272: NEG
16273: PUSH
16274: LD_INT 1
16276: NEG
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: LD_INT 1
16284: NEG
16285: PUSH
16286: LD_INT 2
16288: NEG
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 0
16296: PUSH
16297: LD_INT 2
16299: NEG
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 1
16307: PUSH
16308: LD_INT 1
16310: NEG
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: LD_INT 2
16318: PUSH
16319: LD_INT 0
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: LD_INT 2
16328: PUSH
16329: LD_INT 1
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 2
16338: PUSH
16339: LD_INT 2
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 1
16348: PUSH
16349: LD_INT 2
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: LD_INT 0
16358: PUSH
16359: LD_INT 2
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 1
16368: NEG
16369: PUSH
16370: LD_INT 1
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 2
16379: NEG
16380: PUSH
16381: LD_INT 0
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 2
16390: NEG
16391: PUSH
16392: LD_INT 1
16394: NEG
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 2
16402: NEG
16403: PUSH
16404: LD_INT 2
16406: NEG
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16433: LD_ADDR_VAR 0 22
16437: PUSH
16438: LD_INT 0
16440: PUSH
16441: LD_INT 0
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 0
16450: PUSH
16451: LD_INT 1
16453: NEG
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 1
16461: PUSH
16462: LD_INT 0
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 1
16471: PUSH
16472: LD_INT 1
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 0
16481: PUSH
16482: LD_INT 1
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 1
16491: NEG
16492: PUSH
16493: LD_INT 0
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 1
16502: NEG
16503: PUSH
16504: LD_INT 1
16506: NEG
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 1
16514: NEG
16515: PUSH
16516: LD_INT 2
16518: NEG
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: LD_INT 0
16526: PUSH
16527: LD_INT 2
16529: NEG
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 1
16537: PUSH
16538: LD_INT 1
16540: NEG
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PUSH
16546: LD_INT 2
16548: PUSH
16549: LD_INT 0
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: LD_INT 2
16558: PUSH
16559: LD_INT 1
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 2
16568: PUSH
16569: LD_INT 2
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 1
16578: PUSH
16579: LD_INT 2
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: LD_INT 0
16588: PUSH
16589: LD_INT 2
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 1
16598: NEG
16599: PUSH
16600: LD_INT 1
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 2
16609: NEG
16610: PUSH
16611: LD_INT 0
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 2
16620: NEG
16621: PUSH
16622: LD_INT 1
16624: NEG
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: LD_INT 2
16632: NEG
16633: PUSH
16634: LD_INT 2
16636: NEG
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
16663: LD_ADDR_VAR 0 23
16667: PUSH
16668: LD_INT 0
16670: PUSH
16671: LD_INT 0
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: LD_INT 0
16680: PUSH
16681: LD_INT 1
16683: NEG
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 1
16691: PUSH
16692: LD_INT 0
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: PUSH
16699: LD_INT 1
16701: PUSH
16702: LD_INT 1
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PUSH
16709: LD_INT 0
16711: PUSH
16712: LD_INT 1
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 1
16721: NEG
16722: PUSH
16723: LD_INT 0
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 1
16732: NEG
16733: PUSH
16734: LD_INT 1
16736: NEG
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 1
16744: NEG
16745: PUSH
16746: LD_INT 2
16748: NEG
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 0
16756: PUSH
16757: LD_INT 2
16759: NEG
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 1
16767: PUSH
16768: LD_INT 1
16770: NEG
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 2
16778: PUSH
16779: LD_INT 0
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 2
16788: PUSH
16789: LD_INT 1
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 2
16798: PUSH
16799: LD_INT 2
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 1
16808: PUSH
16809: LD_INT 2
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: PUSH
16816: LD_INT 0
16818: PUSH
16819: LD_INT 2
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: LD_INT 1
16828: NEG
16829: PUSH
16830: LD_INT 1
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 2
16839: NEG
16840: PUSH
16841: LD_INT 0
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 2
16850: NEG
16851: PUSH
16852: LD_INT 1
16854: NEG
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 2
16862: NEG
16863: PUSH
16864: LD_INT 2
16866: NEG
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: LD_INT 2
16874: NEG
16875: PUSH
16876: LD_INT 3
16878: NEG
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 1
16886: NEG
16887: PUSH
16888: LD_INT 3
16890: NEG
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 1
16898: PUSH
16899: LD_INT 2
16901: NEG
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 2
16909: PUSH
16910: LD_INT 1
16912: NEG
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
16943: LD_ADDR_VAR 0 24
16947: PUSH
16948: LD_INT 0
16950: PUSH
16951: LD_INT 0
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 0
16960: PUSH
16961: LD_INT 1
16963: NEG
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 1
16971: PUSH
16972: LD_INT 0
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 1
16981: PUSH
16982: LD_INT 1
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 0
16991: PUSH
16992: LD_INT 1
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 1
17001: NEG
17002: PUSH
17003: LD_INT 0
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 1
17012: NEG
17013: PUSH
17014: LD_INT 1
17016: NEG
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: LD_INT 1
17024: NEG
17025: PUSH
17026: LD_INT 2
17028: NEG
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 0
17036: PUSH
17037: LD_INT 2
17039: NEG
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: LD_INT 1
17047: PUSH
17048: LD_INT 1
17050: NEG
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: LD_INT 2
17058: PUSH
17059: LD_INT 0
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 2
17068: PUSH
17069: LD_INT 1
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 2
17078: PUSH
17079: LD_INT 2
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: LD_INT 1
17088: PUSH
17089: LD_INT 2
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 0
17098: PUSH
17099: LD_INT 2
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PUSH
17106: LD_INT 1
17108: NEG
17109: PUSH
17110: LD_INT 1
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 2
17119: NEG
17120: PUSH
17121: LD_INT 0
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 2
17130: NEG
17131: PUSH
17132: LD_INT 1
17134: NEG
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 2
17142: NEG
17143: PUSH
17144: LD_INT 2
17146: NEG
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 1
17154: PUSH
17155: LD_INT 2
17157: NEG
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PUSH
17163: LD_INT 2
17165: PUSH
17166: LD_INT 1
17168: NEG
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 3
17176: PUSH
17177: LD_INT 1
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: LD_INT 3
17186: PUSH
17187: LD_INT 2
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
17219: LD_ADDR_VAR 0 25
17223: PUSH
17224: LD_INT 0
17226: PUSH
17227: LD_INT 0
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 0
17236: PUSH
17237: LD_INT 1
17239: NEG
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 1
17247: PUSH
17248: LD_INT 0
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 1
17257: PUSH
17258: LD_INT 1
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: LD_INT 0
17267: PUSH
17268: LD_INT 1
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 1
17277: NEG
17278: PUSH
17279: LD_INT 0
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 1
17288: NEG
17289: PUSH
17290: LD_INT 1
17292: NEG
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 1
17300: NEG
17301: PUSH
17302: LD_INT 2
17304: NEG
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 0
17312: PUSH
17313: LD_INT 2
17315: NEG
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 1
17323: PUSH
17324: LD_INT 1
17326: NEG
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 2
17334: PUSH
17335: LD_INT 0
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 2
17344: PUSH
17345: LD_INT 1
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 2
17354: PUSH
17355: LD_INT 2
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 1
17364: PUSH
17365: LD_INT 2
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: LD_INT 0
17374: PUSH
17375: LD_INT 2
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: LD_INT 1
17384: NEG
17385: PUSH
17386: LD_INT 1
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 2
17395: NEG
17396: PUSH
17397: LD_INT 0
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PUSH
17404: LD_INT 2
17406: NEG
17407: PUSH
17408: LD_INT 1
17410: NEG
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 2
17418: NEG
17419: PUSH
17420: LD_INT 2
17422: NEG
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: LD_INT 3
17430: PUSH
17431: LD_INT 1
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PUSH
17438: LD_INT 3
17440: PUSH
17441: LD_INT 2
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 2
17450: PUSH
17451: LD_INT 3
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 1
17460: PUSH
17461: LD_INT 3
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
17493: LD_ADDR_VAR 0 26
17497: PUSH
17498: LD_INT 0
17500: PUSH
17501: LD_INT 0
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 0
17510: PUSH
17511: LD_INT 1
17513: NEG
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 1
17521: PUSH
17522: LD_INT 0
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: LD_INT 1
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 0
17541: PUSH
17542: LD_INT 1
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 1
17551: NEG
17552: PUSH
17553: LD_INT 0
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 1
17562: NEG
17563: PUSH
17564: LD_INT 1
17566: NEG
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 1
17574: NEG
17575: PUSH
17576: LD_INT 2
17578: NEG
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 0
17586: PUSH
17587: LD_INT 2
17589: NEG
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 1
17597: PUSH
17598: LD_INT 1
17600: NEG
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PUSH
17606: LD_INT 2
17608: PUSH
17609: LD_INT 0
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 2
17618: PUSH
17619: LD_INT 1
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 2
17628: PUSH
17629: LD_INT 2
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 1
17638: PUSH
17639: LD_INT 2
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 0
17648: PUSH
17649: LD_INT 2
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 1
17658: NEG
17659: PUSH
17660: LD_INT 1
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 2
17669: NEG
17670: PUSH
17671: LD_INT 0
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 2
17680: NEG
17681: PUSH
17682: LD_INT 1
17684: NEG
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 2
17692: NEG
17693: PUSH
17694: LD_INT 2
17696: NEG
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 2
17704: PUSH
17705: LD_INT 3
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 1
17714: PUSH
17715: LD_INT 3
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 1
17724: NEG
17725: PUSH
17726: LD_INT 2
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 2
17735: NEG
17736: PUSH
17737: LD_INT 1
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
17769: LD_ADDR_VAR 0 27
17773: PUSH
17774: LD_INT 0
17776: PUSH
17777: LD_INT 0
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: LD_INT 0
17786: PUSH
17787: LD_INT 1
17789: NEG
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: LD_INT 1
17797: PUSH
17798: LD_INT 0
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 1
17807: PUSH
17808: LD_INT 1
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 0
17817: PUSH
17818: LD_INT 1
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 1
17827: NEG
17828: PUSH
17829: LD_INT 0
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 1
17838: NEG
17839: PUSH
17840: LD_INT 1
17842: NEG
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 1
17850: NEG
17851: PUSH
17852: LD_INT 2
17854: NEG
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 0
17862: PUSH
17863: LD_INT 2
17865: NEG
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 1
17873: PUSH
17874: LD_INT 1
17876: NEG
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 2
17884: PUSH
17885: LD_INT 0
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: LD_INT 2
17894: PUSH
17895: LD_INT 1
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 2
17904: PUSH
17905: LD_INT 2
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: LD_INT 1
17914: PUSH
17915: LD_INT 2
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 0
17924: PUSH
17925: LD_INT 2
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 1
17934: NEG
17935: PUSH
17936: LD_INT 1
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 2
17945: NEG
17946: PUSH
17947: LD_INT 0
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 2
17956: NEG
17957: PUSH
17958: LD_INT 1
17960: NEG
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 2
17968: NEG
17969: PUSH
17970: LD_INT 2
17972: NEG
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 1
17980: NEG
17981: PUSH
17982: LD_INT 2
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 2
17991: NEG
17992: PUSH
17993: LD_INT 1
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: LD_INT 3
18002: NEG
18003: PUSH
18004: LD_INT 1
18006: NEG
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 3
18014: NEG
18015: PUSH
18016: LD_INT 2
18018: NEG
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18049: LD_ADDR_VAR 0 28
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: LD_INT 0
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 0
18066: PUSH
18067: LD_INT 1
18069: NEG
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 1
18077: PUSH
18078: LD_INT 0
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 1
18087: PUSH
18088: LD_INT 1
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 0
18097: PUSH
18098: LD_INT 1
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 1
18107: NEG
18108: PUSH
18109: LD_INT 0
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 1
18118: NEG
18119: PUSH
18120: LD_INT 1
18122: NEG
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 1
18130: NEG
18131: PUSH
18132: LD_INT 2
18134: NEG
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 0
18142: PUSH
18143: LD_INT 2
18145: NEG
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 1
18153: PUSH
18154: LD_INT 1
18156: NEG
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 2
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 2
18174: PUSH
18175: LD_INT 1
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 2
18184: PUSH
18185: LD_INT 2
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 1
18194: PUSH
18195: LD_INT 2
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 0
18204: PUSH
18205: LD_INT 2
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 1
18214: NEG
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 2
18225: NEG
18226: PUSH
18227: LD_INT 0
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 2
18236: NEG
18237: PUSH
18238: LD_INT 1
18240: NEG
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 2
18248: NEG
18249: PUSH
18250: LD_INT 2
18252: NEG
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 2
18260: NEG
18261: PUSH
18262: LD_INT 3
18264: NEG
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 1
18272: NEG
18273: PUSH
18274: LD_INT 3
18276: NEG
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 3
18284: NEG
18285: PUSH
18286: LD_INT 1
18288: NEG
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 3
18296: NEG
18297: PUSH
18298: LD_INT 2
18300: NEG
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18331: LD_ADDR_VAR 0 29
18335: PUSH
18336: LD_INT 0
18338: PUSH
18339: LD_INT 0
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 0
18348: PUSH
18349: LD_INT 1
18351: NEG
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: LD_INT 0
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 1
18369: PUSH
18370: LD_INT 1
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 0
18379: PUSH
18380: LD_INT 1
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 1
18389: NEG
18390: PUSH
18391: LD_INT 0
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 1
18400: NEG
18401: PUSH
18402: LD_INT 1
18404: NEG
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 1
18412: NEG
18413: PUSH
18414: LD_INT 2
18416: NEG
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 0
18424: PUSH
18425: LD_INT 2
18427: NEG
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: LD_INT 1
18438: NEG
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 2
18446: PUSH
18447: LD_INT 0
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 2
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 1
18466: PUSH
18467: LD_INT 2
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 0
18476: PUSH
18477: LD_INT 2
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 1
18486: NEG
18487: PUSH
18488: LD_INT 1
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 2
18497: NEG
18498: PUSH
18499: LD_INT 1
18501: NEG
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 2
18509: NEG
18510: PUSH
18511: LD_INT 2
18513: NEG
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 2
18521: NEG
18522: PUSH
18523: LD_INT 3
18525: NEG
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 2
18533: PUSH
18534: LD_INT 1
18536: NEG
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 3
18544: PUSH
18545: LD_INT 1
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 1
18554: PUSH
18555: LD_INT 3
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 1
18564: NEG
18565: PUSH
18566: LD_INT 2
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 3
18575: NEG
18576: PUSH
18577: LD_INT 2
18579: NEG
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
18610: LD_ADDR_VAR 0 30
18614: PUSH
18615: LD_INT 0
18617: PUSH
18618: LD_INT 0
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 0
18627: PUSH
18628: LD_INT 1
18630: NEG
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 1
18638: PUSH
18639: LD_INT 0
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 1
18648: PUSH
18649: LD_INT 1
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 0
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 1
18668: NEG
18669: PUSH
18670: LD_INT 0
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 1
18679: NEG
18680: PUSH
18681: LD_INT 1
18683: NEG
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 1
18691: NEG
18692: PUSH
18693: LD_INT 2
18695: NEG
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 0
18703: PUSH
18704: LD_INT 2
18706: NEG
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 1
18714: PUSH
18715: LD_INT 1
18717: NEG
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 2
18725: PUSH
18726: LD_INT 0
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 2
18735: PUSH
18736: LD_INT 1
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 2
18745: PUSH
18746: LD_INT 2
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 1
18755: PUSH
18756: LD_INT 2
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 1
18765: NEG
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 2
18776: NEG
18777: PUSH
18778: LD_INT 0
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 2
18787: NEG
18788: PUSH
18789: LD_INT 1
18791: NEG
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 1
18799: NEG
18800: PUSH
18801: LD_INT 3
18803: NEG
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 1
18811: PUSH
18812: LD_INT 2
18814: NEG
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 3
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 2
18832: PUSH
18833: LD_INT 3
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 2
18842: NEG
18843: PUSH
18844: LD_INT 1
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 3
18853: NEG
18854: PUSH
18855: LD_INT 1
18857: NEG
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18888: LD_ADDR_VAR 0 31
18892: PUSH
18893: LD_INT 0
18895: PUSH
18896: LD_INT 0
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 0
18905: PUSH
18906: LD_INT 1
18908: NEG
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 1
18916: PUSH
18917: LD_INT 0
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 1
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 0
18936: PUSH
18937: LD_INT 1
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 1
18946: NEG
18947: PUSH
18948: LD_INT 0
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 1
18957: NEG
18958: PUSH
18959: LD_INT 1
18961: NEG
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 1
18969: NEG
18970: PUSH
18971: LD_INT 2
18973: NEG
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 1
18981: PUSH
18982: LD_INT 1
18984: NEG
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 2
18992: PUSH
18993: LD_INT 0
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 2
19002: PUSH
19003: LD_INT 1
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: LD_INT 2
19012: PUSH
19013: LD_INT 2
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 1
19022: PUSH
19023: LD_INT 2
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 0
19032: PUSH
19033: LD_INT 2
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 1
19042: NEG
19043: PUSH
19044: LD_INT 1
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 2
19053: NEG
19054: PUSH
19055: LD_INT 1
19057: NEG
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 2
19065: NEG
19066: PUSH
19067: LD_INT 2
19069: NEG
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 2
19077: NEG
19078: PUSH
19079: LD_INT 3
19081: NEG
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 2
19089: PUSH
19090: LD_INT 1
19092: NEG
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 3
19100: PUSH
19101: LD_INT 1
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 1
19110: PUSH
19111: LD_INT 3
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 1
19120: NEG
19121: PUSH
19122: LD_INT 2
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 3
19131: NEG
19132: PUSH
19133: LD_INT 2
19135: NEG
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19166: LD_ADDR_VAR 0 32
19170: PUSH
19171: LD_INT 0
19173: PUSH
19174: LD_INT 0
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 0
19183: PUSH
19184: LD_INT 1
19186: NEG
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: LD_INT 0
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 1
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 0
19214: PUSH
19215: LD_INT 1
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 1
19224: NEG
19225: PUSH
19226: LD_INT 0
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 1
19235: NEG
19236: PUSH
19237: LD_INT 1
19239: NEG
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 1
19247: NEG
19248: PUSH
19249: LD_INT 2
19251: NEG
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 0
19259: PUSH
19260: LD_INT 2
19262: NEG
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 1
19270: PUSH
19271: LD_INT 1
19273: NEG
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 2
19281: PUSH
19282: LD_INT 1
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 2
19291: PUSH
19292: LD_INT 2
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 1
19301: PUSH
19302: LD_INT 2
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 0
19311: PUSH
19312: LD_INT 2
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 1
19321: NEG
19322: PUSH
19323: LD_INT 1
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 2
19332: NEG
19333: PUSH
19334: LD_INT 0
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 2
19343: NEG
19344: PUSH
19345: LD_INT 1
19347: NEG
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 1
19355: NEG
19356: PUSH
19357: LD_INT 3
19359: NEG
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 1
19367: PUSH
19368: LD_INT 2
19370: NEG
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 3
19378: PUSH
19379: LD_INT 2
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 2
19388: PUSH
19389: LD_INT 3
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 2
19398: NEG
19399: PUSH
19400: LD_INT 1
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 3
19409: NEG
19410: PUSH
19411: LD_INT 1
19413: NEG
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19444: LD_ADDR_VAR 0 33
19448: PUSH
19449: LD_INT 0
19451: PUSH
19452: LD_INT 0
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 0
19461: PUSH
19462: LD_INT 1
19464: NEG
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 1
19472: PUSH
19473: LD_INT 0
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 1
19482: PUSH
19483: LD_INT 1
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 0
19492: PUSH
19493: LD_INT 1
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 1
19502: NEG
19503: PUSH
19504: LD_INT 0
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 1
19513: NEG
19514: PUSH
19515: LD_INT 1
19517: NEG
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 1
19525: NEG
19526: PUSH
19527: LD_INT 2
19529: NEG
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 1
19537: PUSH
19538: LD_INT 1
19540: NEG
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 2
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 2
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 1
19568: PUSH
19569: LD_INT 2
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 0
19578: PUSH
19579: LD_INT 2
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 1
19588: NEG
19589: PUSH
19590: LD_INT 1
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 2
19599: NEG
19600: PUSH
19601: LD_INT 0
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 2
19610: NEG
19611: PUSH
19612: LD_INT 1
19614: NEG
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 2
19622: NEG
19623: PUSH
19624: LD_INT 2
19626: NEG
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 2
19634: NEG
19635: PUSH
19636: LD_INT 3
19638: NEG
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 2
19646: PUSH
19647: LD_INT 1
19649: NEG
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 3
19657: PUSH
19658: LD_INT 1
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 1
19667: PUSH
19668: LD_INT 3
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 1
19677: NEG
19678: PUSH
19679: LD_INT 2
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 3
19688: NEG
19689: PUSH
19690: LD_INT 2
19692: NEG
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19723: LD_ADDR_VAR 0 34
19727: PUSH
19728: LD_INT 0
19730: PUSH
19731: LD_INT 0
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 0
19740: PUSH
19741: LD_INT 1
19743: NEG
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 1
19751: PUSH
19752: LD_INT 0
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 1
19761: PUSH
19762: LD_INT 1
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 0
19771: PUSH
19772: LD_INT 1
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 1
19781: NEG
19782: PUSH
19783: LD_INT 0
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 1
19792: NEG
19793: PUSH
19794: LD_INT 1
19796: NEG
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 1
19804: NEG
19805: PUSH
19806: LD_INT 2
19808: NEG
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 0
19816: PUSH
19817: LD_INT 2
19819: NEG
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 1
19827: PUSH
19828: LD_INT 1
19830: NEG
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 2
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 2
19848: PUSH
19849: LD_INT 2
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 1
19858: PUSH
19859: LD_INT 2
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 1
19868: NEG
19869: PUSH
19870: LD_INT 1
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 2
19879: NEG
19880: PUSH
19881: LD_INT 0
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 2
19890: NEG
19891: PUSH
19892: LD_INT 1
19894: NEG
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 2
19902: NEG
19903: PUSH
19904: LD_INT 2
19906: NEG
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 1
19914: NEG
19915: PUSH
19916: LD_INT 3
19918: NEG
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 1
19926: PUSH
19927: LD_INT 2
19929: NEG
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 3
19937: PUSH
19938: LD_INT 2
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 2
19947: PUSH
19948: LD_INT 3
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 2
19957: NEG
19958: PUSH
19959: LD_INT 1
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 3
19968: NEG
19969: PUSH
19970: LD_INT 1
19972: NEG
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20003: LD_ADDR_VAR 0 35
20007: PUSH
20008: LD_INT 0
20010: PUSH
20011: LD_INT 0
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 0
20020: PUSH
20021: LD_INT 1
20023: NEG
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 1
20031: PUSH
20032: LD_INT 0
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 1
20041: PUSH
20042: LD_INT 1
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 0
20051: PUSH
20052: LD_INT 1
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 1
20061: NEG
20062: PUSH
20063: LD_INT 0
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 1
20072: NEG
20073: PUSH
20074: LD_INT 1
20076: NEG
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 2
20084: PUSH
20085: LD_INT 1
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 2
20094: NEG
20095: PUSH
20096: LD_INT 1
20098: NEG
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20115: LD_ADDR_VAR 0 36
20119: PUSH
20120: LD_INT 0
20122: PUSH
20123: LD_INT 0
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: LD_INT 1
20135: NEG
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 1
20143: PUSH
20144: LD_INT 0
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 1
20153: PUSH
20154: LD_INT 1
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 0
20163: PUSH
20164: LD_INT 1
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 1
20173: NEG
20174: PUSH
20175: LD_INT 0
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 1
20184: NEG
20185: PUSH
20186: LD_INT 1
20188: NEG
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 1
20196: NEG
20197: PUSH
20198: LD_INT 2
20200: NEG
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 1
20208: PUSH
20209: LD_INT 2
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20227: LD_ADDR_VAR 0 37
20231: PUSH
20232: LD_INT 0
20234: PUSH
20235: LD_INT 0
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 0
20244: PUSH
20245: LD_INT 1
20247: NEG
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 1
20255: PUSH
20256: LD_INT 0
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 1
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 0
20275: PUSH
20276: LD_INT 1
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 1
20285: NEG
20286: PUSH
20287: LD_INT 0
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 1
20296: NEG
20297: PUSH
20298: LD_INT 1
20300: NEG
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 1
20308: PUSH
20309: LD_INT 1
20311: NEG
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 1
20319: NEG
20320: PUSH
20321: LD_INT 1
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20339: LD_ADDR_VAR 0 38
20343: PUSH
20344: LD_INT 0
20346: PUSH
20347: LD_INT 0
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 0
20356: PUSH
20357: LD_INT 1
20359: NEG
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 1
20367: PUSH
20368: LD_INT 0
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 1
20377: PUSH
20378: LD_INT 1
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 0
20387: PUSH
20388: LD_INT 1
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 1
20397: NEG
20398: PUSH
20399: LD_INT 0
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 1
20408: NEG
20409: PUSH
20410: LD_INT 1
20412: NEG
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 2
20420: PUSH
20421: LD_INT 1
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 2
20430: NEG
20431: PUSH
20432: LD_INT 1
20434: NEG
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20451: LD_ADDR_VAR 0 39
20455: PUSH
20456: LD_INT 0
20458: PUSH
20459: LD_INT 0
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 0
20468: PUSH
20469: LD_INT 1
20471: NEG
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 1
20479: PUSH
20480: LD_INT 0
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 1
20489: PUSH
20490: LD_INT 1
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 0
20499: PUSH
20500: LD_INT 1
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 1
20509: NEG
20510: PUSH
20511: LD_INT 0
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 1
20520: NEG
20521: PUSH
20522: LD_INT 1
20524: NEG
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 1
20532: NEG
20533: PUSH
20534: LD_INT 2
20536: NEG
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: LD_INT 2
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20563: LD_ADDR_VAR 0 40
20567: PUSH
20568: LD_INT 0
20570: PUSH
20571: LD_INT 0
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 0
20580: PUSH
20581: LD_INT 1
20583: NEG
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 1
20591: PUSH
20592: LD_INT 0
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 1
20601: PUSH
20602: LD_INT 1
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 0
20611: PUSH
20612: LD_INT 1
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 1
20621: NEG
20622: PUSH
20623: LD_INT 0
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 1
20632: NEG
20633: PUSH
20634: LD_INT 1
20636: NEG
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 1
20644: PUSH
20645: LD_INT 1
20647: NEG
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 1
20655: NEG
20656: PUSH
20657: LD_INT 1
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20675: LD_ADDR_VAR 0 41
20679: PUSH
20680: LD_INT 0
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 0
20692: PUSH
20693: LD_INT 1
20695: NEG
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 1
20703: PUSH
20704: LD_INT 0
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 1
20713: PUSH
20714: LD_INT 1
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 0
20723: PUSH
20724: LD_INT 1
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 1
20733: NEG
20734: PUSH
20735: LD_INT 0
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 1
20744: NEG
20745: PUSH
20746: LD_INT 1
20748: NEG
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 1
20756: NEG
20757: PUSH
20758: LD_INT 2
20760: NEG
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 1
20768: PUSH
20769: LD_INT 1
20771: NEG
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 2
20779: PUSH
20780: LD_INT 0
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 2
20789: PUSH
20790: LD_INT 1
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 2
20799: PUSH
20800: LD_INT 2
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 1
20809: PUSH
20810: LD_INT 2
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 1
20819: NEG
20820: PUSH
20821: LD_INT 1
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 2
20830: NEG
20831: PUSH
20832: LD_INT 0
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 2
20841: NEG
20842: PUSH
20843: LD_INT 1
20845: NEG
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 2
20853: NEG
20854: PUSH
20855: LD_INT 2
20857: NEG
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 2
20865: NEG
20866: PUSH
20867: LD_INT 3
20869: NEG
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 2
20877: PUSH
20878: LD_INT 1
20880: NEG
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 3
20888: PUSH
20889: LD_INT 0
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 3
20898: PUSH
20899: LD_INT 1
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 3
20908: PUSH
20909: LD_INT 2
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 3
20918: PUSH
20919: LD_INT 3
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 2
20928: PUSH
20929: LD_INT 3
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 2
20938: NEG
20939: PUSH
20940: LD_INT 1
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 3
20949: NEG
20950: PUSH
20951: LD_INT 0
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 3
20960: NEG
20961: PUSH
20962: LD_INT 1
20964: NEG
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 3
20972: NEG
20973: PUSH
20974: LD_INT 2
20976: NEG
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 3
20984: NEG
20985: PUSH
20986: LD_INT 3
20988: NEG
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21025: LD_ADDR_VAR 0 42
21029: PUSH
21030: LD_INT 0
21032: PUSH
21033: LD_INT 0
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 0
21042: PUSH
21043: LD_INT 1
21045: NEG
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 1
21053: PUSH
21054: LD_INT 0
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 1
21063: PUSH
21064: LD_INT 1
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 0
21073: PUSH
21074: LD_INT 1
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 1
21083: NEG
21084: PUSH
21085: LD_INT 0
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 1
21094: NEG
21095: PUSH
21096: LD_INT 1
21098: NEG
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 1
21106: NEG
21107: PUSH
21108: LD_INT 2
21110: NEG
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 0
21118: PUSH
21119: LD_INT 2
21121: NEG
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: LD_INT 1
21132: NEG
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 2
21140: PUSH
21141: LD_INT 1
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 2
21150: PUSH
21151: LD_INT 2
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 1
21160: PUSH
21161: LD_INT 2
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 0
21170: PUSH
21171: LD_INT 2
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: LD_INT 1
21180: NEG
21181: PUSH
21182: LD_INT 1
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 2
21191: NEG
21192: PUSH
21193: LD_INT 1
21195: NEG
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 2
21203: NEG
21204: PUSH
21205: LD_INT 2
21207: NEG
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 2
21215: NEG
21216: PUSH
21217: LD_INT 3
21219: NEG
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 1
21227: NEG
21228: PUSH
21229: LD_INT 3
21231: NEG
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 0
21239: PUSH
21240: LD_INT 3
21242: NEG
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 1
21250: PUSH
21251: LD_INT 2
21253: NEG
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 3
21261: PUSH
21262: LD_INT 2
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 3
21271: PUSH
21272: LD_INT 3
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 2
21281: PUSH
21282: LD_INT 3
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 1
21291: PUSH
21292: LD_INT 3
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 0
21301: PUSH
21302: LD_INT 3
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 1
21311: NEG
21312: PUSH
21313: LD_INT 2
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 3
21322: NEG
21323: PUSH
21324: LD_INT 2
21326: NEG
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 3
21334: NEG
21335: PUSH
21336: LD_INT 3
21338: NEG
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21375: LD_ADDR_VAR 0 43
21379: PUSH
21380: LD_INT 0
21382: PUSH
21383: LD_INT 0
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: LD_INT 1
21395: NEG
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: LD_INT 1
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: NEG
21434: PUSH
21435: LD_INT 0
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 1
21444: NEG
21445: PUSH
21446: LD_INT 1
21448: NEG
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 1
21456: NEG
21457: PUSH
21458: LD_INT 2
21460: NEG
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 0
21468: PUSH
21469: LD_INT 2
21471: NEG
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 1
21479: PUSH
21480: LD_INT 1
21482: NEG
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 2
21490: PUSH
21491: LD_INT 0
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 2
21500: PUSH
21501: LD_INT 1
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 1
21510: PUSH
21511: LD_INT 2
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 0
21520: PUSH
21521: LD_INT 2
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 1
21530: NEG
21531: PUSH
21532: LD_INT 1
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 2
21541: NEG
21542: PUSH
21543: LD_INT 0
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 2
21552: NEG
21553: PUSH
21554: LD_INT 1
21556: NEG
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 1
21564: NEG
21565: PUSH
21566: LD_INT 3
21568: NEG
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 0
21576: PUSH
21577: LD_INT 3
21579: NEG
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 1
21587: PUSH
21588: LD_INT 2
21590: NEG
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 2
21598: PUSH
21599: LD_INT 1
21601: NEG
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 3
21609: PUSH
21610: LD_INT 0
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 3
21619: PUSH
21620: LD_INT 1
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 1
21629: PUSH
21630: LD_INT 3
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 0
21639: PUSH
21640: LD_INT 3
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 1
21649: NEG
21650: PUSH
21651: LD_INT 2
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 2
21660: NEG
21661: PUSH
21662: LD_INT 1
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 3
21671: NEG
21672: PUSH
21673: LD_INT 0
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 3
21682: NEG
21683: PUSH
21684: LD_INT 1
21686: NEG
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21723: LD_ADDR_VAR 0 44
21727: PUSH
21728: LD_INT 0
21730: PUSH
21731: LD_INT 0
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 0
21740: PUSH
21741: LD_INT 1
21743: NEG
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 1
21751: PUSH
21752: LD_INT 0
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 1
21761: PUSH
21762: LD_INT 1
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 0
21771: PUSH
21772: LD_INT 1
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 1
21781: NEG
21782: PUSH
21783: LD_INT 0
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 1
21792: NEG
21793: PUSH
21794: LD_INT 1
21796: NEG
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 1
21804: NEG
21805: PUSH
21806: LD_INT 2
21808: NEG
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 1
21816: PUSH
21817: LD_INT 1
21819: NEG
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 2
21827: PUSH
21828: LD_INT 0
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 2
21837: PUSH
21838: LD_INT 1
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 2
21847: PUSH
21848: LD_INT 2
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 1
21857: PUSH
21858: LD_INT 2
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 1
21867: NEG
21868: PUSH
21869: LD_INT 1
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 2
21878: NEG
21879: PUSH
21880: LD_INT 0
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 2
21889: NEG
21890: PUSH
21891: LD_INT 1
21893: NEG
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 2
21901: NEG
21902: PUSH
21903: LD_INT 2
21905: NEG
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 2
21913: NEG
21914: PUSH
21915: LD_INT 3
21917: NEG
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 2
21925: PUSH
21926: LD_INT 1
21928: NEG
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 3
21936: PUSH
21937: LD_INT 0
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 3
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 3
21956: PUSH
21957: LD_INT 2
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 3
21966: PUSH
21967: LD_INT 3
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 2
21976: PUSH
21977: LD_INT 3
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 2
21986: NEG
21987: PUSH
21988: LD_INT 1
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 3
21997: NEG
21998: PUSH
21999: LD_INT 0
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 3
22008: NEG
22009: PUSH
22010: LD_INT 1
22012: NEG
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 3
22020: NEG
22021: PUSH
22022: LD_INT 2
22024: NEG
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 3
22032: NEG
22033: PUSH
22034: LD_INT 3
22036: NEG
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22073: LD_ADDR_VAR 0 45
22077: PUSH
22078: LD_INT 0
22080: PUSH
22081: LD_INT 0
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 0
22090: PUSH
22091: LD_INT 1
22093: NEG
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: LD_INT 0
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 1
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 0
22121: PUSH
22122: LD_INT 1
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 1
22131: NEG
22132: PUSH
22133: LD_INT 0
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 1
22142: NEG
22143: PUSH
22144: LD_INT 1
22146: NEG
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 1
22154: NEG
22155: PUSH
22156: LD_INT 2
22158: NEG
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 0
22166: PUSH
22167: LD_INT 2
22169: NEG
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 1
22177: PUSH
22178: LD_INT 1
22180: NEG
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 2
22188: PUSH
22189: LD_INT 1
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 2
22198: PUSH
22199: LD_INT 2
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: LD_INT 1
22208: PUSH
22209: LD_INT 2
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 0
22218: PUSH
22219: LD_INT 2
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 1
22228: NEG
22229: PUSH
22230: LD_INT 1
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: LD_INT 2
22239: NEG
22240: PUSH
22241: LD_INT 1
22243: NEG
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 2
22251: NEG
22252: PUSH
22253: LD_INT 2
22255: NEG
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 2
22263: NEG
22264: PUSH
22265: LD_INT 3
22267: NEG
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 1
22275: NEG
22276: PUSH
22277: LD_INT 3
22279: NEG
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: LD_INT 3
22290: NEG
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: LD_INT 2
22301: NEG
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 3
22309: PUSH
22310: LD_INT 2
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 3
22319: PUSH
22320: LD_INT 3
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 2
22329: PUSH
22330: LD_INT 3
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 1
22339: PUSH
22340: LD_INT 3
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 0
22349: PUSH
22350: LD_INT 3
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 1
22359: NEG
22360: PUSH
22361: LD_INT 2
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 3
22370: NEG
22371: PUSH
22372: LD_INT 2
22374: NEG
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 3
22382: NEG
22383: PUSH
22384: LD_INT 3
22386: NEG
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22423: LD_ADDR_VAR 0 46
22427: PUSH
22428: LD_INT 0
22430: PUSH
22431: LD_INT 0
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 0
22440: PUSH
22441: LD_INT 1
22443: NEG
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 1
22451: PUSH
22452: LD_INT 0
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 1
22461: PUSH
22462: LD_INT 1
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 0
22471: PUSH
22472: LD_INT 1
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 1
22481: NEG
22482: PUSH
22483: LD_INT 0
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 1
22492: NEG
22493: PUSH
22494: LD_INT 1
22496: NEG
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 1
22504: NEG
22505: PUSH
22506: LD_INT 2
22508: NEG
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 0
22516: PUSH
22517: LD_INT 2
22519: NEG
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 1
22527: PUSH
22528: LD_INT 1
22530: NEG
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 2
22538: PUSH
22539: LD_INT 0
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 2
22548: PUSH
22549: LD_INT 1
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 1
22558: PUSH
22559: LD_INT 2
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 0
22568: PUSH
22569: LD_INT 2
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 1
22578: NEG
22579: PUSH
22580: LD_INT 1
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 2
22589: NEG
22590: PUSH
22591: LD_INT 0
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 2
22600: NEG
22601: PUSH
22602: LD_INT 1
22604: NEG
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 1
22612: NEG
22613: PUSH
22614: LD_INT 3
22616: NEG
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: LD_INT 3
22627: NEG
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 1
22635: PUSH
22636: LD_INT 2
22638: NEG
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 2
22646: PUSH
22647: LD_INT 1
22649: NEG
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 3
22657: PUSH
22658: LD_INT 0
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 3
22667: PUSH
22668: LD_INT 1
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: LD_INT 3
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 0
22687: PUSH
22688: LD_INT 3
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 1
22697: NEG
22698: PUSH
22699: LD_INT 2
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 2
22708: NEG
22709: PUSH
22710: LD_INT 1
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 3
22719: NEG
22720: PUSH
22721: LD_INT 0
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 3
22730: NEG
22731: PUSH
22732: LD_INT 1
22734: NEG
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22771: LD_ADDR_VAR 0 47
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: LD_INT 0
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 0
22788: PUSH
22789: LD_INT 1
22791: NEG
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: LD_INT 0
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 1
22809: PUSH
22810: LD_INT 1
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 0
22819: PUSH
22820: LD_INT 1
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 1
22829: NEG
22830: PUSH
22831: LD_INT 0
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 1
22840: NEG
22841: PUSH
22842: LD_INT 1
22844: NEG
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 1
22852: NEG
22853: PUSH
22854: LD_INT 2
22856: NEG
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 0
22864: PUSH
22865: LD_INT 2
22867: NEG
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 1
22875: PUSH
22876: LD_INT 1
22878: NEG
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 2
22886: NEG
22887: PUSH
22888: LD_INT 1
22890: NEG
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 2
22898: NEG
22899: PUSH
22900: LD_INT 2
22902: NEG
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
22922: LD_ADDR_VAR 0 48
22926: PUSH
22927: LD_INT 0
22929: PUSH
22930: LD_INT 0
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 0
22939: PUSH
22940: LD_INT 1
22942: NEG
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 1
22950: PUSH
22951: LD_INT 0
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 1
22960: PUSH
22961: LD_INT 1
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 0
22970: PUSH
22971: LD_INT 1
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 1
22980: NEG
22981: PUSH
22982: LD_INT 0
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 1
22991: NEG
22992: PUSH
22993: LD_INT 1
22995: NEG
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 1
23003: NEG
23004: PUSH
23005: LD_INT 2
23007: NEG
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 0
23015: PUSH
23016: LD_INT 2
23018: NEG
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 1
23026: PUSH
23027: LD_INT 1
23029: NEG
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 2
23037: PUSH
23038: LD_INT 0
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 2
23047: PUSH
23048: LD_INT 1
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23069: LD_ADDR_VAR 0 49
23073: PUSH
23074: LD_INT 0
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 0
23086: PUSH
23087: LD_INT 1
23089: NEG
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 1
23097: PUSH
23098: LD_INT 0
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 1
23107: PUSH
23108: LD_INT 1
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 0
23117: PUSH
23118: LD_INT 1
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 1
23127: NEG
23128: PUSH
23129: LD_INT 0
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 1
23138: NEG
23139: PUSH
23140: LD_INT 1
23142: NEG
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 1
23150: PUSH
23151: LD_INT 1
23153: NEG
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 2
23161: PUSH
23162: LD_INT 0
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 2
23171: PUSH
23172: LD_INT 1
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 2
23181: PUSH
23182: LD_INT 2
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 1
23191: PUSH
23192: LD_INT 2
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23213: LD_ADDR_VAR 0 50
23217: PUSH
23218: LD_INT 0
23220: PUSH
23221: LD_INT 0
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 0
23230: PUSH
23231: LD_INT 1
23233: NEG
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 1
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 1
23251: PUSH
23252: LD_INT 1
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 0
23261: PUSH
23262: LD_INT 1
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 1
23271: NEG
23272: PUSH
23273: LD_INT 0
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 1
23282: NEG
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 2
23294: PUSH
23295: LD_INT 1
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 2
23304: PUSH
23305: LD_INT 2
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 1
23314: PUSH
23315: LD_INT 2
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 0
23324: PUSH
23325: LD_INT 2
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 1
23334: NEG
23335: PUSH
23336: LD_INT 1
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23357: LD_ADDR_VAR 0 51
23361: PUSH
23362: LD_INT 0
23364: PUSH
23365: LD_INT 0
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 0
23374: PUSH
23375: LD_INT 1
23377: NEG
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 1
23385: PUSH
23386: LD_INT 0
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 0
23405: PUSH
23406: LD_INT 1
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 1
23415: NEG
23416: PUSH
23417: LD_INT 0
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 1
23426: NEG
23427: PUSH
23428: LD_INT 1
23430: NEG
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 1
23438: PUSH
23439: LD_INT 2
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 0
23448: PUSH
23449: LD_INT 2
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 1
23458: NEG
23459: PUSH
23460: LD_INT 1
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 2
23469: NEG
23470: PUSH
23471: LD_INT 0
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 2
23480: NEG
23481: PUSH
23482: LD_INT 1
23484: NEG
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23504: LD_ADDR_VAR 0 52
23508: PUSH
23509: LD_INT 0
23511: PUSH
23512: LD_INT 0
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 0
23521: PUSH
23522: LD_INT 1
23524: NEG
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 1
23532: PUSH
23533: LD_INT 0
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 1
23542: PUSH
23543: LD_INT 1
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 0
23552: PUSH
23553: LD_INT 1
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 1
23562: NEG
23563: PUSH
23564: LD_INT 0
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 1
23573: NEG
23574: PUSH
23575: LD_INT 1
23577: NEG
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 1
23585: NEG
23586: PUSH
23587: LD_INT 2
23589: NEG
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 1
23597: NEG
23598: PUSH
23599: LD_INT 1
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 2
23608: NEG
23609: PUSH
23610: LD_INT 0
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 2
23619: NEG
23620: PUSH
23621: LD_INT 1
23623: NEG
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 2
23631: NEG
23632: PUSH
23633: LD_INT 2
23635: NEG
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23655: LD_ADDR_VAR 0 53
23659: PUSH
23660: LD_INT 0
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 0
23672: PUSH
23673: LD_INT 1
23675: NEG
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: LD_INT 0
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: LD_INT 1
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 0
23703: PUSH
23704: LD_INT 1
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 1
23713: NEG
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 1
23724: NEG
23725: PUSH
23726: LD_INT 1
23728: NEG
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 1
23736: NEG
23737: PUSH
23738: LD_INT 2
23740: NEG
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 0
23748: PUSH
23749: LD_INT 2
23751: NEG
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 1
23759: PUSH
23760: LD_INT 1
23762: NEG
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 2
23770: PUSH
23771: LD_INT 0
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 2
23790: PUSH
23791: LD_INT 2
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 1
23800: PUSH
23801: LD_INT 2
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 0
23810: PUSH
23811: LD_INT 2
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 1
23820: NEG
23821: PUSH
23822: LD_INT 1
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 2
23831: NEG
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 2
23842: NEG
23843: PUSH
23844: LD_INT 1
23846: NEG
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 2
23854: NEG
23855: PUSH
23856: LD_INT 2
23858: NEG
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23885: LD_ADDR_VAR 0 54
23889: PUSH
23890: LD_INT 0
23892: PUSH
23893: LD_INT 0
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 0
23902: PUSH
23903: LD_INT 1
23905: NEG
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 1
23913: PUSH
23914: LD_INT 0
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 0
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 1
23943: NEG
23944: PUSH
23945: LD_INT 0
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 1
23954: NEG
23955: PUSH
23956: LD_INT 1
23958: NEG
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 1
23966: NEG
23967: PUSH
23968: LD_INT 2
23970: NEG
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: LD_INT 2
23981: NEG
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 1
23989: PUSH
23990: LD_INT 1
23992: NEG
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 2
24000: PUSH
24001: LD_INT 0
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 2
24010: PUSH
24011: LD_INT 1
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: LD_INT 2
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 1
24030: PUSH
24031: LD_INT 2
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: LD_INT 2
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 1
24050: NEG
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 2
24061: NEG
24062: PUSH
24063: LD_INT 0
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 2
24072: NEG
24073: PUSH
24074: LD_INT 1
24076: NEG
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 2
24084: NEG
24085: PUSH
24086: LD_INT 2
24088: NEG
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24115: LD_ADDR_VAR 0 55
24119: PUSH
24120: LD_INT 0
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 0
24132: PUSH
24133: LD_INT 1
24135: NEG
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: LD_INT 0
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 1
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 0
24163: PUSH
24164: LD_INT 1
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: LD_INT 0
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 1
24184: NEG
24185: PUSH
24186: LD_INT 1
24188: NEG
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 1
24196: NEG
24197: PUSH
24198: LD_INT 2
24200: NEG
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 0
24208: PUSH
24209: LD_INT 2
24211: NEG
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 1
24219: PUSH
24220: LD_INT 1
24222: NEG
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 2
24230: PUSH
24231: LD_INT 0
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 2
24240: PUSH
24241: LD_INT 1
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 2
24250: PUSH
24251: LD_INT 2
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 1
24260: PUSH
24261: LD_INT 2
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: LD_INT 2
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 2
24291: NEG
24292: PUSH
24293: LD_INT 0
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 2
24302: NEG
24303: PUSH
24304: LD_INT 1
24306: NEG
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 2
24314: NEG
24315: PUSH
24316: LD_INT 2
24318: NEG
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24345: LD_ADDR_VAR 0 56
24349: PUSH
24350: LD_INT 0
24352: PUSH
24353: LD_INT 0
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 0
24362: PUSH
24363: LD_INT 1
24365: NEG
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 1
24373: PUSH
24374: LD_INT 0
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 1
24383: PUSH
24384: LD_INT 1
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 0
24393: PUSH
24394: LD_INT 1
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 1
24403: NEG
24404: PUSH
24405: LD_INT 0
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 1
24414: NEG
24415: PUSH
24416: LD_INT 1
24418: NEG
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 1
24426: NEG
24427: PUSH
24428: LD_INT 2
24430: NEG
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: LD_INT 2
24441: NEG
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 1
24449: PUSH
24450: LD_INT 1
24452: NEG
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 2
24460: PUSH
24461: LD_INT 0
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 2
24470: PUSH
24471: LD_INT 1
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 2
24480: PUSH
24481: LD_INT 2
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 1
24490: PUSH
24491: LD_INT 2
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 0
24500: PUSH
24501: LD_INT 2
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 1
24510: NEG
24511: PUSH
24512: LD_INT 1
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 2
24521: NEG
24522: PUSH
24523: LD_INT 0
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 2
24532: NEG
24533: PUSH
24534: LD_INT 1
24536: NEG
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 2
24544: NEG
24545: PUSH
24546: LD_INT 2
24548: NEG
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24575: LD_ADDR_VAR 0 57
24579: PUSH
24580: LD_INT 0
24582: PUSH
24583: LD_INT 0
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 0
24592: PUSH
24593: LD_INT 1
24595: NEG
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 1
24603: PUSH
24604: LD_INT 0
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 1
24613: PUSH
24614: LD_INT 1
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 0
24623: PUSH
24624: LD_INT 1
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 1
24633: NEG
24634: PUSH
24635: LD_INT 0
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 1
24644: NEG
24645: PUSH
24646: LD_INT 1
24648: NEG
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 1
24656: NEG
24657: PUSH
24658: LD_INT 2
24660: NEG
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 0
24668: PUSH
24669: LD_INT 2
24671: NEG
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 1
24679: PUSH
24680: LD_INT 1
24682: NEG
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 2
24690: PUSH
24691: LD_INT 0
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 2
24700: PUSH
24701: LD_INT 1
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 2
24710: PUSH
24711: LD_INT 2
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 1
24720: PUSH
24721: LD_INT 2
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 0
24730: PUSH
24731: LD_INT 2
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 1
24740: NEG
24741: PUSH
24742: LD_INT 1
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 2
24751: NEG
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 2
24762: NEG
24763: PUSH
24764: LD_INT 1
24766: NEG
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 2
24774: NEG
24775: PUSH
24776: LD_INT 2
24778: NEG
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24805: LD_ADDR_VAR 0 58
24809: PUSH
24810: LD_INT 0
24812: PUSH
24813: LD_INT 0
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 0
24822: PUSH
24823: LD_INT 1
24825: NEG
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 1
24833: PUSH
24834: LD_INT 0
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 1
24843: PUSH
24844: LD_INT 1
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 0
24853: PUSH
24854: LD_INT 1
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 1
24863: NEG
24864: PUSH
24865: LD_INT 0
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 1
24874: NEG
24875: PUSH
24876: LD_INT 1
24878: NEG
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 1
24886: NEG
24887: PUSH
24888: LD_INT 2
24890: NEG
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: LD_INT 2
24901: NEG
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: LD_INT 1
24912: NEG
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 2
24920: PUSH
24921: LD_INT 0
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 2
24930: PUSH
24931: LD_INT 1
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 2
24940: PUSH
24941: LD_INT 2
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: PUSH
24951: LD_INT 2
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 0
24960: PUSH
24961: LD_INT 2
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 1
24970: NEG
24971: PUSH
24972: LD_INT 1
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 2
24981: NEG
24982: PUSH
24983: LD_INT 0
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 2
24992: NEG
24993: PUSH
24994: LD_INT 1
24996: NEG
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 2
25004: NEG
25005: PUSH
25006: LD_INT 2
25008: NEG
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25035: LD_ADDR_VAR 0 59
25039: PUSH
25040: LD_INT 0
25042: PUSH
25043: LD_INT 0
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 0
25052: PUSH
25053: LD_INT 1
25055: NEG
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 1
25063: PUSH
25064: LD_INT 0
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 1
25073: PUSH
25074: LD_INT 1
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 0
25083: PUSH
25084: LD_INT 1
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 1
25093: NEG
25094: PUSH
25095: LD_INT 0
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 1
25104: NEG
25105: PUSH
25106: LD_INT 1
25108: NEG
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25123: LD_ADDR_VAR 0 60
25127: PUSH
25128: LD_INT 0
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 0
25140: PUSH
25141: LD_INT 1
25143: NEG
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 1
25151: PUSH
25152: LD_INT 0
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 1
25161: PUSH
25162: LD_INT 1
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: LD_INT 1
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 1
25181: NEG
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 1
25192: NEG
25193: PUSH
25194: LD_INT 1
25196: NEG
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25211: LD_ADDR_VAR 0 61
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: LD_INT 0
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 0
25228: PUSH
25229: LD_INT 1
25231: NEG
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: LD_INT 0
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: PUSH
25250: LD_INT 1
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 0
25259: PUSH
25260: LD_INT 1
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 1
25269: NEG
25270: PUSH
25271: LD_INT 0
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 1
25280: NEG
25281: PUSH
25282: LD_INT 1
25284: NEG
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25299: LD_ADDR_VAR 0 62
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: LD_INT 0
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: LD_INT 1
25319: NEG
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: LD_INT 0
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 0
25347: PUSH
25348: LD_INT 1
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 1
25357: NEG
25358: PUSH
25359: LD_INT 0
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 1
25368: NEG
25369: PUSH
25370: LD_INT 1
25372: NEG
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25387: LD_ADDR_VAR 0 63
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: LD_INT 0
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: LD_INT 1
25407: NEG
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: LD_INT 0
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 1
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 0
25435: PUSH
25436: LD_INT 1
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 1
25445: NEG
25446: PUSH
25447: LD_INT 0
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 1
25456: NEG
25457: PUSH
25458: LD_INT 1
25460: NEG
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25475: LD_ADDR_VAR 0 64
25479: PUSH
25480: LD_INT 0
25482: PUSH
25483: LD_INT 0
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 0
25492: PUSH
25493: LD_INT 1
25495: NEG
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 1
25503: PUSH
25504: LD_INT 0
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 1
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 0
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 1
25533: NEG
25534: PUSH
25535: LD_INT 0
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 1
25544: NEG
25545: PUSH
25546: LD_INT 1
25548: NEG
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: ST_TO_ADDR
// end ; 1 :
25563: GO 31460
25565: LD_INT 1
25567: DOUBLE
25568: EQUAL
25569: IFTRUE 25573
25571: GO 28196
25573: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25574: LD_ADDR_VAR 0 11
25578: PUSH
25579: LD_INT 1
25581: NEG
25582: PUSH
25583: LD_INT 3
25585: NEG
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 0
25593: PUSH
25594: LD_INT 3
25596: NEG
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 1
25604: PUSH
25605: LD_INT 2
25607: NEG
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: LIST
25617: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25618: LD_ADDR_VAR 0 12
25622: PUSH
25623: LD_INT 2
25625: PUSH
25626: LD_INT 1
25628: NEG
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 3
25636: PUSH
25637: LD_INT 0
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 3
25646: PUSH
25647: LD_INT 1
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: LIST
25658: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25659: LD_ADDR_VAR 0 13
25663: PUSH
25664: LD_INT 3
25666: PUSH
25667: LD_INT 2
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 3
25676: PUSH
25677: LD_INT 3
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 2
25686: PUSH
25687: LD_INT 3
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: LIST
25698: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25699: LD_ADDR_VAR 0 14
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: LD_INT 3
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: LD_INT 3
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 1
25726: NEG
25727: PUSH
25728: LD_INT 2
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: LIST
25739: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25740: LD_ADDR_VAR 0 15
25744: PUSH
25745: LD_INT 2
25747: NEG
25748: PUSH
25749: LD_INT 1
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 3
25758: NEG
25759: PUSH
25760: LD_INT 0
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 3
25769: NEG
25770: PUSH
25771: LD_INT 1
25773: NEG
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: LIST
25783: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25784: LD_ADDR_VAR 0 16
25788: PUSH
25789: LD_INT 2
25791: NEG
25792: PUSH
25793: LD_INT 3
25795: NEG
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 3
25803: NEG
25804: PUSH
25805: LD_INT 2
25807: NEG
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 3
25815: NEG
25816: PUSH
25817: LD_INT 3
25819: NEG
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: LIST
25829: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25830: LD_ADDR_VAR 0 17
25834: PUSH
25835: LD_INT 1
25837: NEG
25838: PUSH
25839: LD_INT 3
25841: NEG
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 0
25849: PUSH
25850: LD_INT 3
25852: NEG
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 1
25860: PUSH
25861: LD_INT 2
25863: NEG
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: LIST
25873: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25874: LD_ADDR_VAR 0 18
25878: PUSH
25879: LD_INT 2
25881: PUSH
25882: LD_INT 1
25884: NEG
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 3
25892: PUSH
25893: LD_INT 0
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 3
25902: PUSH
25903: LD_INT 1
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: LIST
25914: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25915: LD_ADDR_VAR 0 19
25919: PUSH
25920: LD_INT 3
25922: PUSH
25923: LD_INT 2
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 3
25932: PUSH
25933: LD_INT 3
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 2
25942: PUSH
25943: LD_INT 3
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: LIST
25954: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25955: LD_ADDR_VAR 0 20
25959: PUSH
25960: LD_INT 1
25962: PUSH
25963: LD_INT 3
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: LD_INT 3
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: LD_INT 2
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: LIST
25995: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25996: LD_ADDR_VAR 0 21
26000: PUSH
26001: LD_INT 2
26003: NEG
26004: PUSH
26005: LD_INT 1
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 3
26014: NEG
26015: PUSH
26016: LD_INT 0
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 3
26025: NEG
26026: PUSH
26027: LD_INT 1
26029: NEG
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: LIST
26039: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26040: LD_ADDR_VAR 0 22
26044: PUSH
26045: LD_INT 2
26047: NEG
26048: PUSH
26049: LD_INT 3
26051: NEG
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 3
26059: NEG
26060: PUSH
26061: LD_INT 2
26063: NEG
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 3
26071: NEG
26072: PUSH
26073: LD_INT 3
26075: NEG
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: LIST
26085: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26086: LD_ADDR_VAR 0 23
26090: PUSH
26091: LD_INT 0
26093: PUSH
26094: LD_INT 3
26096: NEG
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 1
26104: NEG
26105: PUSH
26106: LD_INT 4
26108: NEG
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: LD_INT 3
26119: NEG
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: LIST
26129: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26130: LD_ADDR_VAR 0 24
26134: PUSH
26135: LD_INT 3
26137: PUSH
26138: LD_INT 0
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 3
26147: PUSH
26148: LD_INT 1
26150: NEG
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 4
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: LIST
26170: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26171: LD_ADDR_VAR 0 25
26175: PUSH
26176: LD_INT 3
26178: PUSH
26179: LD_INT 3
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 4
26188: PUSH
26189: LD_INT 3
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 3
26198: PUSH
26199: LD_INT 4
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: LIST
26210: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
26211: LD_ADDR_VAR 0 26
26215: PUSH
26216: LD_INT 0
26218: PUSH
26219: LD_INT 3
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: LD_INT 4
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 1
26238: NEG
26239: PUSH
26240: LD_INT 3
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: LIST
26251: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
26252: LD_ADDR_VAR 0 27
26256: PUSH
26257: LD_INT 3
26259: NEG
26260: PUSH
26261: LD_INT 0
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 3
26270: NEG
26271: PUSH
26272: LD_INT 1
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 4
26281: NEG
26282: PUSH
26283: LD_INT 1
26285: NEG
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: LIST
26295: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
26296: LD_ADDR_VAR 0 28
26300: PUSH
26301: LD_INT 3
26303: NEG
26304: PUSH
26305: LD_INT 3
26307: NEG
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 3
26315: NEG
26316: PUSH
26317: LD_INT 4
26319: NEG
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 4
26327: NEG
26328: PUSH
26329: LD_INT 3
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: LIST
26341: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
26342: LD_ADDR_VAR 0 29
26346: PUSH
26347: LD_INT 1
26349: NEG
26350: PUSH
26351: LD_INT 3
26353: NEG
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 0
26361: PUSH
26362: LD_INT 3
26364: NEG
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 1
26372: PUSH
26373: LD_INT 2
26375: NEG
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 1
26383: NEG
26384: PUSH
26385: LD_INT 4
26387: NEG
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 0
26395: PUSH
26396: LD_INT 4
26398: NEG
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 1
26406: PUSH
26407: LD_INT 3
26409: NEG
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: LD_INT 5
26421: NEG
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: LD_INT 5
26432: NEG
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: LD_INT 4
26443: NEG
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 1
26451: NEG
26452: PUSH
26453: LD_INT 6
26455: NEG
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 0
26463: PUSH
26464: LD_INT 6
26466: NEG
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: LD_INT 5
26477: NEG
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
26497: LD_ADDR_VAR 0 30
26501: PUSH
26502: LD_INT 2
26504: PUSH
26505: LD_INT 1
26507: NEG
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 3
26515: PUSH
26516: LD_INT 0
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 3
26525: PUSH
26526: LD_INT 1
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 3
26535: PUSH
26536: LD_INT 1
26538: NEG
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 4
26546: PUSH
26547: LD_INT 0
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 4
26556: PUSH
26557: LD_INT 1
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 4
26566: PUSH
26567: LD_INT 1
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 5
26577: PUSH
26578: LD_INT 0
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 5
26587: PUSH
26588: LD_INT 1
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 5
26597: PUSH
26598: LD_INT 1
26600: NEG
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 6
26608: PUSH
26609: LD_INT 0
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 6
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
26640: LD_ADDR_VAR 0 31
26644: PUSH
26645: LD_INT 3
26647: PUSH
26648: LD_INT 2
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 3
26657: PUSH
26658: LD_INT 3
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 2
26667: PUSH
26668: LD_INT 3
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 4
26677: PUSH
26678: LD_INT 3
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 4
26687: PUSH
26688: LD_INT 4
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 3
26697: PUSH
26698: LD_INT 4
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 5
26707: PUSH
26708: LD_INT 4
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 5
26717: PUSH
26718: LD_INT 5
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 4
26727: PUSH
26728: LD_INT 5
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 6
26737: PUSH
26738: LD_INT 5
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 6
26747: PUSH
26748: LD_INT 6
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 5
26757: PUSH
26758: LD_INT 6
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
26779: LD_ADDR_VAR 0 32
26783: PUSH
26784: LD_INT 1
26786: PUSH
26787: LD_INT 3
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 0
26796: PUSH
26797: LD_INT 3
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 1
26806: NEG
26807: PUSH
26808: LD_INT 2
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: PUSH
26818: LD_INT 4
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: LD_INT 4
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: NEG
26838: PUSH
26839: LD_INT 3
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: LD_INT 5
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: LD_INT 5
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 1
26868: NEG
26869: PUSH
26870: LD_INT 4
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 1
26879: PUSH
26880: LD_INT 6
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: LD_INT 6
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: NEG
26900: PUSH
26901: LD_INT 5
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
26922: LD_ADDR_VAR 0 33
26926: PUSH
26927: LD_INT 2
26929: NEG
26930: PUSH
26931: LD_INT 1
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 3
26940: NEG
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 3
26951: NEG
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 3
26963: NEG
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 4
26974: NEG
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 4
26985: NEG
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 4
26997: NEG
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 5
27008: NEG
27009: PUSH
27010: LD_INT 0
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 5
27019: NEG
27020: PUSH
27021: LD_INT 1
27023: NEG
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 5
27031: NEG
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 6
27042: NEG
27043: PUSH
27044: LD_INT 0
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 6
27053: NEG
27054: PUSH
27055: LD_INT 1
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27077: LD_ADDR_VAR 0 34
27081: PUSH
27082: LD_INT 2
27084: NEG
27085: PUSH
27086: LD_INT 3
27088: NEG
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 3
27096: NEG
27097: PUSH
27098: LD_INT 2
27100: NEG
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 3
27108: NEG
27109: PUSH
27110: LD_INT 3
27112: NEG
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 3
27120: NEG
27121: PUSH
27122: LD_INT 4
27124: NEG
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 4
27132: NEG
27133: PUSH
27134: LD_INT 3
27136: NEG
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 4
27144: NEG
27145: PUSH
27146: LD_INT 4
27148: NEG
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 4
27156: NEG
27157: PUSH
27158: LD_INT 5
27160: NEG
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 5
27168: NEG
27169: PUSH
27170: LD_INT 4
27172: NEG
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 5
27180: NEG
27181: PUSH
27182: LD_INT 5
27184: NEG
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 5
27192: NEG
27193: PUSH
27194: LD_INT 6
27196: NEG
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 6
27204: NEG
27205: PUSH
27206: LD_INT 5
27208: NEG
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 6
27216: NEG
27217: PUSH
27218: LD_INT 6
27220: NEG
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
27240: LD_ADDR_VAR 0 41
27244: PUSH
27245: LD_INT 0
27247: PUSH
27248: LD_INT 2
27250: NEG
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 1
27258: NEG
27259: PUSH
27260: LD_INT 3
27262: NEG
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: PUSH
27271: LD_INT 2
27273: NEG
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: LIST
27283: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
27284: LD_ADDR_VAR 0 42
27288: PUSH
27289: LD_INT 2
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 2
27301: PUSH
27302: LD_INT 1
27304: NEG
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 3
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: LIST
27324: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
27325: LD_ADDR_VAR 0 43
27329: PUSH
27330: LD_INT 2
27332: PUSH
27333: LD_INT 2
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 3
27342: PUSH
27343: LD_INT 2
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 2
27352: PUSH
27353: LD_INT 3
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: LIST
27364: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
27365: LD_ADDR_VAR 0 44
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 2
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 1
27382: PUSH
27383: LD_INT 3
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: LD_INT 2
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: LIST
27405: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27406: LD_ADDR_VAR 0 45
27410: PUSH
27411: LD_INT 2
27413: NEG
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 2
27424: NEG
27425: PUSH
27426: LD_INT 1
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 3
27435: NEG
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: LIST
27449: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
27450: LD_ADDR_VAR 0 46
27454: PUSH
27455: LD_INT 2
27457: NEG
27458: PUSH
27459: LD_INT 2
27461: NEG
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 2
27469: NEG
27470: PUSH
27471: LD_INT 3
27473: NEG
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 3
27481: NEG
27482: PUSH
27483: LD_INT 2
27485: NEG
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: LIST
27495: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
27496: LD_ADDR_VAR 0 47
27500: PUSH
27501: LD_INT 2
27503: NEG
27504: PUSH
27505: LD_INT 3
27507: NEG
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 1
27515: NEG
27516: PUSH
27517: LD_INT 3
27519: NEG
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27529: LD_ADDR_VAR 0 48
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: LD_INT 2
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 2
27547: PUSH
27548: LD_INT 1
27550: NEG
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
27560: LD_ADDR_VAR 0 49
27564: PUSH
27565: LD_INT 3
27567: PUSH
27568: LD_INT 1
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 3
27577: PUSH
27578: LD_INT 2
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
27589: LD_ADDR_VAR 0 50
27593: PUSH
27594: LD_INT 2
27596: PUSH
27597: LD_INT 3
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 1
27606: PUSH
27607: LD_INT 3
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27618: LD_ADDR_VAR 0 51
27622: PUSH
27623: LD_INT 1
27625: NEG
27626: PUSH
27627: LD_INT 2
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 2
27636: NEG
27637: PUSH
27638: LD_INT 1
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27649: LD_ADDR_VAR 0 52
27653: PUSH
27654: LD_INT 3
27656: NEG
27657: PUSH
27658: LD_INT 1
27660: NEG
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 3
27668: NEG
27669: PUSH
27670: LD_INT 2
27672: NEG
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27682: LD_ADDR_VAR 0 53
27686: PUSH
27687: LD_INT 1
27689: NEG
27690: PUSH
27691: LD_INT 3
27693: NEG
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 0
27701: PUSH
27702: LD_INT 3
27704: NEG
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 1
27712: PUSH
27713: LD_INT 2
27715: NEG
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: LIST
27725: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27726: LD_ADDR_VAR 0 54
27730: PUSH
27731: LD_INT 2
27733: PUSH
27734: LD_INT 1
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 3
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 3
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: LIST
27766: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27767: LD_ADDR_VAR 0 55
27771: PUSH
27772: LD_INT 3
27774: PUSH
27775: LD_INT 2
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 3
27784: PUSH
27785: LD_INT 3
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 2
27794: PUSH
27795: LD_INT 3
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: LIST
27806: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27807: LD_ADDR_VAR 0 56
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: LD_INT 3
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: LD_INT 3
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 1
27834: NEG
27835: PUSH
27836: LD_INT 2
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: LIST
27847: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27848: LD_ADDR_VAR 0 57
27852: PUSH
27853: LD_INT 2
27855: NEG
27856: PUSH
27857: LD_INT 1
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 3
27866: NEG
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 3
27877: NEG
27878: PUSH
27879: LD_INT 1
27881: NEG
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: LIST
27891: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27892: LD_ADDR_VAR 0 58
27896: PUSH
27897: LD_INT 2
27899: NEG
27900: PUSH
27901: LD_INT 3
27903: NEG
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 3
27911: NEG
27912: PUSH
27913: LD_INT 2
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 3
27923: NEG
27924: PUSH
27925: LD_INT 3
27927: NEG
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: LIST
27937: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
27938: LD_ADDR_VAR 0 59
27942: PUSH
27943: LD_INT 1
27945: NEG
27946: PUSH
27947: LD_INT 2
27949: NEG
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: LD_INT 2
27960: NEG
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 1
27968: PUSH
27969: LD_INT 1
27971: NEG
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: LIST
27981: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27982: LD_ADDR_VAR 0 60
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: LD_INT 1
27992: NEG
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 2
28000: PUSH
28001: LD_INT 0
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 2
28010: PUSH
28011: LD_INT 1
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: LIST
28022: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28023: LD_ADDR_VAR 0 61
28027: PUSH
28028: LD_INT 2
28030: PUSH
28031: LD_INT 1
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 2
28040: PUSH
28041: LD_INT 2
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: LD_INT 2
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: LIST
28062: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28063: LD_ADDR_VAR 0 62
28067: PUSH
28068: LD_INT 1
28070: PUSH
28071: LD_INT 2
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 0
28080: PUSH
28081: LD_INT 2
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 1
28090: NEG
28091: PUSH
28092: LD_INT 1
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: LIST
28103: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28104: LD_ADDR_VAR 0 63
28108: PUSH
28109: LD_INT 1
28111: NEG
28112: PUSH
28113: LD_INT 1
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 2
28122: NEG
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 2
28133: NEG
28134: PUSH
28135: LD_INT 1
28137: NEG
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: LIST
28147: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28148: LD_ADDR_VAR 0 64
28152: PUSH
28153: LD_INT 1
28155: NEG
28156: PUSH
28157: LD_INT 2
28159: NEG
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 2
28167: NEG
28168: PUSH
28169: LD_INT 1
28171: NEG
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 2
28179: NEG
28180: PUSH
28181: LD_INT 2
28183: NEG
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: LIST
28193: ST_TO_ADDR
// end ; 2 :
28194: GO 31460
28196: LD_INT 2
28198: DOUBLE
28199: EQUAL
28200: IFTRUE 28204
28202: GO 31459
28204: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
28205: LD_ADDR_VAR 0 29
28209: PUSH
28210: LD_INT 4
28212: PUSH
28213: LD_INT 0
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 4
28222: PUSH
28223: LD_INT 1
28225: NEG
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 5
28233: PUSH
28234: LD_INT 0
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 5
28243: PUSH
28244: LD_INT 1
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 4
28253: PUSH
28254: LD_INT 1
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 3
28263: PUSH
28264: LD_INT 0
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 3
28273: PUSH
28274: LD_INT 1
28276: NEG
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 3
28284: PUSH
28285: LD_INT 2
28287: NEG
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 5
28295: PUSH
28296: LD_INT 2
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 3
28305: PUSH
28306: LD_INT 3
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 3
28315: PUSH
28316: LD_INT 2
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 4
28325: PUSH
28326: LD_INT 3
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 4
28335: PUSH
28336: LD_INT 4
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 3
28345: PUSH
28346: LD_INT 4
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 2
28355: PUSH
28356: LD_INT 3
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 2
28365: PUSH
28366: LD_INT 2
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 4
28375: PUSH
28376: LD_INT 2
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 2
28385: PUSH
28386: LD_INT 4
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: LD_INT 4
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 0
28405: PUSH
28406: LD_INT 3
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: LD_INT 4
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: LD_INT 5
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 0
28435: PUSH
28436: LD_INT 5
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 1
28445: NEG
28446: PUSH
28447: LD_INT 4
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 1
28456: NEG
28457: PUSH
28458: LD_INT 3
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 2
28467: PUSH
28468: LD_INT 5
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 2
28477: NEG
28478: PUSH
28479: LD_INT 3
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 3
28488: NEG
28489: PUSH
28490: LD_INT 0
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 3
28499: NEG
28500: PUSH
28501: LD_INT 1
28503: NEG
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 2
28511: NEG
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 2
28522: NEG
28523: PUSH
28524: LD_INT 1
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 3
28533: NEG
28534: PUSH
28535: LD_INT 1
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 4
28544: NEG
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 4
28555: NEG
28556: PUSH
28557: LD_INT 1
28559: NEG
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 4
28567: NEG
28568: PUSH
28569: LD_INT 2
28571: NEG
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 2
28579: NEG
28580: PUSH
28581: LD_INT 2
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 4
28590: NEG
28591: PUSH
28592: LD_INT 4
28594: NEG
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 4
28602: NEG
28603: PUSH
28604: LD_INT 5
28606: NEG
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 3
28614: NEG
28615: PUSH
28616: LD_INT 4
28618: NEG
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 3
28626: NEG
28627: PUSH
28628: LD_INT 3
28630: NEG
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 4
28638: NEG
28639: PUSH
28640: LD_INT 3
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 5
28650: NEG
28651: PUSH
28652: LD_INT 4
28654: NEG
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 5
28662: NEG
28663: PUSH
28664: LD_INT 5
28666: NEG
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 3
28674: NEG
28675: PUSH
28676: LD_INT 5
28678: NEG
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 5
28686: NEG
28687: PUSH
28688: LD_INT 3
28690: NEG
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
28743: LD_ADDR_VAR 0 30
28747: PUSH
28748: LD_INT 4
28750: PUSH
28751: LD_INT 4
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 4
28760: PUSH
28761: LD_INT 3
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 5
28770: PUSH
28771: LD_INT 4
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 5
28780: PUSH
28781: LD_INT 5
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 4
28790: PUSH
28791: LD_INT 5
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 3
28800: PUSH
28801: LD_INT 4
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 3
28810: PUSH
28811: LD_INT 3
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 5
28820: PUSH
28821: LD_INT 3
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 3
28830: PUSH
28831: LD_INT 5
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: LD_INT 3
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: LD_INT 2
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 1
28860: PUSH
28861: LD_INT 3
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 1
28870: PUSH
28871: LD_INT 4
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: LD_INT 4
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: LD_INT 3
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 1
28901: NEG
28902: PUSH
28903: LD_INT 2
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 2
28912: PUSH
28913: LD_INT 4
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 2
28922: NEG
28923: PUSH
28924: LD_INT 2
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 4
28933: NEG
28934: PUSH
28935: LD_INT 0
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 4
28944: NEG
28945: PUSH
28946: LD_INT 1
28948: NEG
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 3
28956: NEG
28957: PUSH
28958: LD_INT 0
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 3
28967: NEG
28968: PUSH
28969: LD_INT 1
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 4
28978: NEG
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 5
28989: NEG
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 5
29000: NEG
29001: PUSH
29002: LD_INT 1
29004: NEG
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 5
29012: NEG
29013: PUSH
29014: LD_INT 2
29016: NEG
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 3
29024: NEG
29025: PUSH
29026: LD_INT 2
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 3
29035: NEG
29036: PUSH
29037: LD_INT 3
29039: NEG
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 3
29047: NEG
29048: PUSH
29049: LD_INT 4
29051: NEG
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 2
29059: NEG
29060: PUSH
29061: LD_INT 3
29063: NEG
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 2
29071: NEG
29072: PUSH
29073: LD_INT 2
29075: NEG
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 3
29083: NEG
29084: PUSH
29085: LD_INT 2
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 4
29095: NEG
29096: PUSH
29097: LD_INT 3
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 4
29107: NEG
29108: PUSH
29109: LD_INT 4
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 2
29119: NEG
29120: PUSH
29121: LD_INT 4
29123: NEG
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 4
29131: NEG
29132: PUSH
29133: LD_INT 2
29135: NEG
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: LD_INT 4
29146: NEG
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: LD_INT 5
29157: NEG
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 1
29165: PUSH
29166: LD_INT 4
29168: NEG
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 1
29176: PUSH
29177: LD_INT 3
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 0
29187: PUSH
29188: LD_INT 3
29190: NEG
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 1
29198: NEG
29199: PUSH
29200: LD_INT 4
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 1
29210: NEG
29211: PUSH
29212: LD_INT 5
29214: NEG
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 2
29222: PUSH
29223: LD_INT 3
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 2
29233: NEG
29234: PUSH
29235: LD_INT 5
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
29290: LD_ADDR_VAR 0 31
29294: PUSH
29295: LD_INT 0
29297: PUSH
29298: LD_INT 4
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 0
29307: PUSH
29308: LD_INT 3
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 1
29317: PUSH
29318: LD_INT 4
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 1
29327: PUSH
29328: LD_INT 5
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 0
29337: PUSH
29338: LD_INT 5
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 1
29347: NEG
29348: PUSH
29349: LD_INT 4
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 1
29358: NEG
29359: PUSH
29360: LD_INT 3
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 2
29369: PUSH
29370: LD_INT 5
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 2
29379: NEG
29380: PUSH
29381: LD_INT 3
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 3
29390: NEG
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 3
29401: NEG
29402: PUSH
29403: LD_INT 1
29405: NEG
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 2
29413: NEG
29414: PUSH
29415: LD_INT 0
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 2
29424: NEG
29425: PUSH
29426: LD_INT 1
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 3
29435: NEG
29436: PUSH
29437: LD_INT 1
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 4
29446: NEG
29447: PUSH
29448: LD_INT 0
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 4
29457: NEG
29458: PUSH
29459: LD_INT 1
29461: NEG
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 4
29469: NEG
29470: PUSH
29471: LD_INT 2
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 2
29481: NEG
29482: PUSH
29483: LD_INT 2
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 4
29492: NEG
29493: PUSH
29494: LD_INT 4
29496: NEG
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 4
29504: NEG
29505: PUSH
29506: LD_INT 5
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 3
29516: NEG
29517: PUSH
29518: LD_INT 4
29520: NEG
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 3
29528: NEG
29529: PUSH
29530: LD_INT 3
29532: NEG
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 4
29540: NEG
29541: PUSH
29542: LD_INT 3
29544: NEG
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 5
29552: NEG
29553: PUSH
29554: LD_INT 4
29556: NEG
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 5
29564: NEG
29565: PUSH
29566: LD_INT 5
29568: NEG
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 3
29576: NEG
29577: PUSH
29578: LD_INT 5
29580: NEG
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 5
29588: NEG
29589: PUSH
29590: LD_INT 3
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 0
29600: PUSH
29601: LD_INT 3
29603: NEG
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 0
29611: PUSH
29612: LD_INT 4
29614: NEG
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 1
29622: PUSH
29623: LD_INT 3
29625: NEG
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 1
29633: PUSH
29634: LD_INT 2
29636: NEG
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 0
29644: PUSH
29645: LD_INT 2
29647: NEG
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 1
29655: NEG
29656: PUSH
29657: LD_INT 3
29659: NEG
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 1
29667: NEG
29668: PUSH
29669: LD_INT 4
29671: NEG
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 2
29679: PUSH
29680: LD_INT 2
29682: NEG
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 2
29690: NEG
29691: PUSH
29692: LD_INT 4
29694: NEG
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 4
29702: PUSH
29703: LD_INT 0
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 4
29712: PUSH
29713: LD_INT 1
29715: NEG
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 5
29723: PUSH
29724: LD_INT 0
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 5
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 4
29743: PUSH
29744: LD_INT 1
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 3
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 3
29763: PUSH
29764: LD_INT 1
29766: NEG
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 3
29774: PUSH
29775: LD_INT 2
29777: NEG
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 5
29785: PUSH
29786: LD_INT 2
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
29840: LD_ADDR_VAR 0 32
29844: PUSH
29845: LD_INT 4
29847: NEG
29848: PUSH
29849: LD_INT 0
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 4
29858: NEG
29859: PUSH
29860: LD_INT 1
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 3
29870: NEG
29871: PUSH
29872: LD_INT 0
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 3
29881: NEG
29882: PUSH
29883: LD_INT 1
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 4
29892: NEG
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 5
29903: NEG
29904: PUSH
29905: LD_INT 0
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 5
29914: NEG
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 5
29926: NEG
29927: PUSH
29928: LD_INT 2
29930: NEG
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 3
29938: NEG
29939: PUSH
29940: LD_INT 2
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 3
29949: NEG
29950: PUSH
29951: LD_INT 3
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 3
29961: NEG
29962: PUSH
29963: LD_INT 4
29965: NEG
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 2
29973: NEG
29974: PUSH
29975: LD_INT 3
29977: NEG
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 2
29985: NEG
29986: PUSH
29987: LD_INT 2
29989: NEG
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 3
29997: NEG
29998: PUSH
29999: LD_INT 2
30001: NEG
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 4
30009: NEG
30010: PUSH
30011: LD_INT 3
30013: NEG
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 4
30021: NEG
30022: PUSH
30023: LD_INT 4
30025: NEG
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 2
30033: NEG
30034: PUSH
30035: LD_INT 4
30037: NEG
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 4
30045: NEG
30046: PUSH
30047: LD_INT 2
30049: NEG
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 0
30057: PUSH
30058: LD_INT 4
30060: NEG
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 0
30068: PUSH
30069: LD_INT 5
30071: NEG
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: LD_INT 4
30082: NEG
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: LD_INT 3
30093: NEG
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 0
30101: PUSH
30102: LD_INT 3
30104: NEG
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 1
30112: NEG
30113: PUSH
30114: LD_INT 4
30116: NEG
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 1
30124: NEG
30125: PUSH
30126: LD_INT 5
30128: NEG
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 2
30136: PUSH
30137: LD_INT 3
30139: NEG
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 2
30147: NEG
30148: PUSH
30149: LD_INT 5
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 3
30159: PUSH
30160: LD_INT 0
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 3
30169: PUSH
30170: LD_INT 1
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 4
30180: PUSH
30181: LD_INT 0
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 4
30190: PUSH
30191: LD_INT 1
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 3
30200: PUSH
30201: LD_INT 1
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 2
30210: PUSH
30211: LD_INT 0
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 2
30220: PUSH
30221: LD_INT 1
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 2
30231: PUSH
30232: LD_INT 2
30234: NEG
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 4
30242: PUSH
30243: LD_INT 2
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 4
30252: PUSH
30253: LD_INT 4
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 4
30262: PUSH
30263: LD_INT 3
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 5
30272: PUSH
30273: LD_INT 4
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 5
30282: PUSH
30283: LD_INT 5
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 4
30292: PUSH
30293: LD_INT 5
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 3
30302: PUSH
30303: LD_INT 4
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 3
30312: PUSH
30313: LD_INT 3
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 5
30322: PUSH
30323: LD_INT 3
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 3
30332: PUSH
30333: LD_INT 5
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
30387: LD_ADDR_VAR 0 33
30391: PUSH
30392: LD_INT 4
30394: NEG
30395: PUSH
30396: LD_INT 4
30398: NEG
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 4
30406: NEG
30407: PUSH
30408: LD_INT 5
30410: NEG
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 3
30418: NEG
30419: PUSH
30420: LD_INT 4
30422: NEG
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 3
30430: NEG
30431: PUSH
30432: LD_INT 3
30434: NEG
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 4
30442: NEG
30443: PUSH
30444: LD_INT 3
30446: NEG
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 5
30454: NEG
30455: PUSH
30456: LD_INT 4
30458: NEG
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 5
30466: NEG
30467: PUSH
30468: LD_INT 5
30470: NEG
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 3
30478: NEG
30479: PUSH
30480: LD_INT 5
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 5
30490: NEG
30491: PUSH
30492: LD_INT 3
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 0
30502: PUSH
30503: LD_INT 3
30505: NEG
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 0
30513: PUSH
30514: LD_INT 4
30516: NEG
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 1
30524: PUSH
30525: LD_INT 3
30527: NEG
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 1
30535: PUSH
30536: LD_INT 2
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 0
30546: PUSH
30547: LD_INT 2
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 1
30557: NEG
30558: PUSH
30559: LD_INT 3
30561: NEG
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 1
30569: NEG
30570: PUSH
30571: LD_INT 4
30573: NEG
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 2
30581: PUSH
30582: LD_INT 2
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 2
30592: NEG
30593: PUSH
30594: LD_INT 4
30596: NEG
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 4
30604: PUSH
30605: LD_INT 0
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 4
30614: PUSH
30615: LD_INT 1
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 5
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 5
30635: PUSH
30636: LD_INT 1
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 4
30645: PUSH
30646: LD_INT 1
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 3
30655: PUSH
30656: LD_INT 0
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 3
30665: PUSH
30666: LD_INT 1
30668: NEG
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 3
30676: PUSH
30677: LD_INT 2
30679: NEG
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 5
30687: PUSH
30688: LD_INT 2
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 3
30697: PUSH
30698: LD_INT 3
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 3
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 4
30717: PUSH
30718: LD_INT 3
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 4
30727: PUSH
30728: LD_INT 4
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 3
30737: PUSH
30738: LD_INT 4
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 2
30747: PUSH
30748: LD_INT 3
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 2
30757: PUSH
30758: LD_INT 2
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 4
30767: PUSH
30768: LD_INT 2
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 2
30777: PUSH
30778: LD_INT 4
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: LD_INT 4
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 0
30797: PUSH
30798: LD_INT 3
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 1
30807: PUSH
30808: LD_INT 4
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: LD_INT 5
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 0
30827: PUSH
30828: LD_INT 5
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 1
30837: NEG
30838: PUSH
30839: LD_INT 4
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 1
30848: NEG
30849: PUSH
30850: LD_INT 3
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 2
30859: PUSH
30860: LD_INT 5
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 2
30869: NEG
30870: PUSH
30871: LD_INT 3
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
30925: LD_ADDR_VAR 0 34
30929: PUSH
30930: LD_INT 0
30932: PUSH
30933: LD_INT 4
30935: NEG
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 0
30943: PUSH
30944: LD_INT 5
30946: NEG
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 1
30954: PUSH
30955: LD_INT 4
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 1
30965: PUSH
30966: LD_INT 3
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 0
30976: PUSH
30977: LD_INT 3
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: LD_INT 4
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: LD_INT 5
31003: NEG
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 2
31011: PUSH
31012: LD_INT 3
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 2
31022: NEG
31023: PUSH
31024: LD_INT 5
31026: NEG
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 3
31034: PUSH
31035: LD_INT 0
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 3
31044: PUSH
31045: LD_INT 1
31047: NEG
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 4
31055: PUSH
31056: LD_INT 0
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 4
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 3
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 2
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 2
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 2
31106: PUSH
31107: LD_INT 2
31109: NEG
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 4
31117: PUSH
31118: LD_INT 2
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 4
31127: PUSH
31128: LD_INT 4
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 4
31137: PUSH
31138: LD_INT 3
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 5
31147: PUSH
31148: LD_INT 4
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 5
31157: PUSH
31158: LD_INT 5
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 4
31167: PUSH
31168: LD_INT 5
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 3
31177: PUSH
31178: LD_INT 4
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 3
31187: PUSH
31188: LD_INT 3
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 5
31197: PUSH
31198: LD_INT 3
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 3
31207: PUSH
31208: LD_INT 5
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 0
31217: PUSH
31218: LD_INT 3
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 0
31227: PUSH
31228: LD_INT 2
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 1
31237: PUSH
31238: LD_INT 3
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 1
31247: PUSH
31248: LD_INT 4
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 0
31257: PUSH
31258: LD_INT 4
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 1
31267: NEG
31268: PUSH
31269: LD_INT 3
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 1
31278: NEG
31279: PUSH
31280: LD_INT 2
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 2
31289: PUSH
31290: LD_INT 4
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 2
31299: NEG
31300: PUSH
31301: LD_INT 2
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 4
31310: NEG
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 4
31321: NEG
31322: PUSH
31323: LD_INT 1
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 3
31333: NEG
31334: PUSH
31335: LD_INT 0
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 3
31344: NEG
31345: PUSH
31346: LD_INT 1
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 4
31355: NEG
31356: PUSH
31357: LD_INT 1
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 5
31366: NEG
31367: PUSH
31368: LD_INT 0
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 5
31377: NEG
31378: PUSH
31379: LD_INT 1
31381: NEG
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 5
31389: NEG
31390: PUSH
31391: LD_INT 2
31393: NEG
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 3
31401: NEG
31402: PUSH
31403: LD_INT 2
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: ST_TO_ADDR
// end ; end ;
31457: GO 31460
31459: POP
// case btype of b_depot , b_warehouse :
31460: LD_VAR 0 1
31464: PUSH
31465: LD_INT 0
31467: DOUBLE
31468: EQUAL
31469: IFTRUE 31479
31471: LD_INT 1
31473: DOUBLE
31474: EQUAL
31475: IFTRUE 31479
31477: GO 31680
31479: POP
// case nation of nation_american :
31480: LD_VAR 0 5
31484: PUSH
31485: LD_INT 1
31487: DOUBLE
31488: EQUAL
31489: IFTRUE 31493
31491: GO 31549
31493: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
31494: LD_ADDR_VAR 0 9
31498: PUSH
31499: LD_VAR 0 11
31503: PUSH
31504: LD_VAR 0 12
31508: PUSH
31509: LD_VAR 0 13
31513: PUSH
31514: LD_VAR 0 14
31518: PUSH
31519: LD_VAR 0 15
31523: PUSH
31524: LD_VAR 0 16
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: PUSH
31537: LD_VAR 0 4
31541: PUSH
31542: LD_INT 1
31544: PLUS
31545: ARRAY
31546: ST_TO_ADDR
31547: GO 31678
31549: LD_INT 2
31551: DOUBLE
31552: EQUAL
31553: IFTRUE 31557
31555: GO 31613
31557: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
31558: LD_ADDR_VAR 0 9
31562: PUSH
31563: LD_VAR 0 17
31567: PUSH
31568: LD_VAR 0 18
31572: PUSH
31573: LD_VAR 0 19
31577: PUSH
31578: LD_VAR 0 20
31582: PUSH
31583: LD_VAR 0 21
31587: PUSH
31588: LD_VAR 0 22
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: PUSH
31601: LD_VAR 0 4
31605: PUSH
31606: LD_INT 1
31608: PLUS
31609: ARRAY
31610: ST_TO_ADDR
31611: GO 31678
31613: LD_INT 3
31615: DOUBLE
31616: EQUAL
31617: IFTRUE 31621
31619: GO 31677
31621: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
31622: LD_ADDR_VAR 0 9
31626: PUSH
31627: LD_VAR 0 23
31631: PUSH
31632: LD_VAR 0 24
31636: PUSH
31637: LD_VAR 0 25
31641: PUSH
31642: LD_VAR 0 26
31646: PUSH
31647: LD_VAR 0 27
31651: PUSH
31652: LD_VAR 0 28
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: PUSH
31665: LD_VAR 0 4
31669: PUSH
31670: LD_INT 1
31672: PLUS
31673: ARRAY
31674: ST_TO_ADDR
31675: GO 31678
31677: POP
31678: GO 32233
31680: LD_INT 2
31682: DOUBLE
31683: EQUAL
31684: IFTRUE 31694
31686: LD_INT 3
31688: DOUBLE
31689: EQUAL
31690: IFTRUE 31694
31692: GO 31750
31694: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
31695: LD_ADDR_VAR 0 9
31699: PUSH
31700: LD_VAR 0 29
31704: PUSH
31705: LD_VAR 0 30
31709: PUSH
31710: LD_VAR 0 31
31714: PUSH
31715: LD_VAR 0 32
31719: PUSH
31720: LD_VAR 0 33
31724: PUSH
31725: LD_VAR 0 34
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: PUSH
31738: LD_VAR 0 4
31742: PUSH
31743: LD_INT 1
31745: PLUS
31746: ARRAY
31747: ST_TO_ADDR
31748: GO 32233
31750: LD_INT 16
31752: DOUBLE
31753: EQUAL
31754: IFTRUE 31812
31756: LD_INT 17
31758: DOUBLE
31759: EQUAL
31760: IFTRUE 31812
31762: LD_INT 18
31764: DOUBLE
31765: EQUAL
31766: IFTRUE 31812
31768: LD_INT 19
31770: DOUBLE
31771: EQUAL
31772: IFTRUE 31812
31774: LD_INT 22
31776: DOUBLE
31777: EQUAL
31778: IFTRUE 31812
31780: LD_INT 20
31782: DOUBLE
31783: EQUAL
31784: IFTRUE 31812
31786: LD_INT 21
31788: DOUBLE
31789: EQUAL
31790: IFTRUE 31812
31792: LD_INT 23
31794: DOUBLE
31795: EQUAL
31796: IFTRUE 31812
31798: LD_INT 24
31800: DOUBLE
31801: EQUAL
31802: IFTRUE 31812
31804: LD_INT 25
31806: DOUBLE
31807: EQUAL
31808: IFTRUE 31812
31810: GO 31868
31812: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
31813: LD_ADDR_VAR 0 9
31817: PUSH
31818: LD_VAR 0 35
31822: PUSH
31823: LD_VAR 0 36
31827: PUSH
31828: LD_VAR 0 37
31832: PUSH
31833: LD_VAR 0 38
31837: PUSH
31838: LD_VAR 0 39
31842: PUSH
31843: LD_VAR 0 40
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: PUSH
31856: LD_VAR 0 4
31860: PUSH
31861: LD_INT 1
31863: PLUS
31864: ARRAY
31865: ST_TO_ADDR
31866: GO 32233
31868: LD_INT 6
31870: DOUBLE
31871: EQUAL
31872: IFTRUE 31924
31874: LD_INT 7
31876: DOUBLE
31877: EQUAL
31878: IFTRUE 31924
31880: LD_INT 8
31882: DOUBLE
31883: EQUAL
31884: IFTRUE 31924
31886: LD_INT 13
31888: DOUBLE
31889: EQUAL
31890: IFTRUE 31924
31892: LD_INT 12
31894: DOUBLE
31895: EQUAL
31896: IFTRUE 31924
31898: LD_INT 15
31900: DOUBLE
31901: EQUAL
31902: IFTRUE 31924
31904: LD_INT 11
31906: DOUBLE
31907: EQUAL
31908: IFTRUE 31924
31910: LD_INT 14
31912: DOUBLE
31913: EQUAL
31914: IFTRUE 31924
31916: LD_INT 10
31918: DOUBLE
31919: EQUAL
31920: IFTRUE 31924
31922: GO 31980
31924: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
31925: LD_ADDR_VAR 0 9
31929: PUSH
31930: LD_VAR 0 41
31934: PUSH
31935: LD_VAR 0 42
31939: PUSH
31940: LD_VAR 0 43
31944: PUSH
31945: LD_VAR 0 44
31949: PUSH
31950: LD_VAR 0 45
31954: PUSH
31955: LD_VAR 0 46
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: PUSH
31968: LD_VAR 0 4
31972: PUSH
31973: LD_INT 1
31975: PLUS
31976: ARRAY
31977: ST_TO_ADDR
31978: GO 32233
31980: LD_INT 36
31982: DOUBLE
31983: EQUAL
31984: IFTRUE 31988
31986: GO 32044
31988: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
31989: LD_ADDR_VAR 0 9
31993: PUSH
31994: LD_VAR 0 47
31998: PUSH
31999: LD_VAR 0 48
32003: PUSH
32004: LD_VAR 0 49
32008: PUSH
32009: LD_VAR 0 50
32013: PUSH
32014: LD_VAR 0 51
32018: PUSH
32019: LD_VAR 0 52
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: PUSH
32032: LD_VAR 0 4
32036: PUSH
32037: LD_INT 1
32039: PLUS
32040: ARRAY
32041: ST_TO_ADDR
32042: GO 32233
32044: LD_INT 4
32046: DOUBLE
32047: EQUAL
32048: IFTRUE 32070
32050: LD_INT 5
32052: DOUBLE
32053: EQUAL
32054: IFTRUE 32070
32056: LD_INT 34
32058: DOUBLE
32059: EQUAL
32060: IFTRUE 32070
32062: LD_INT 37
32064: DOUBLE
32065: EQUAL
32066: IFTRUE 32070
32068: GO 32126
32070: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32071: LD_ADDR_VAR 0 9
32075: PUSH
32076: LD_VAR 0 53
32080: PUSH
32081: LD_VAR 0 54
32085: PUSH
32086: LD_VAR 0 55
32090: PUSH
32091: LD_VAR 0 56
32095: PUSH
32096: LD_VAR 0 57
32100: PUSH
32101: LD_VAR 0 58
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: PUSH
32114: LD_VAR 0 4
32118: PUSH
32119: LD_INT 1
32121: PLUS
32122: ARRAY
32123: ST_TO_ADDR
32124: GO 32233
32126: LD_INT 31
32128: DOUBLE
32129: EQUAL
32130: IFTRUE 32176
32132: LD_INT 32
32134: DOUBLE
32135: EQUAL
32136: IFTRUE 32176
32138: LD_INT 33
32140: DOUBLE
32141: EQUAL
32142: IFTRUE 32176
32144: LD_INT 27
32146: DOUBLE
32147: EQUAL
32148: IFTRUE 32176
32150: LD_INT 26
32152: DOUBLE
32153: EQUAL
32154: IFTRUE 32176
32156: LD_INT 28
32158: DOUBLE
32159: EQUAL
32160: IFTRUE 32176
32162: LD_INT 29
32164: DOUBLE
32165: EQUAL
32166: IFTRUE 32176
32168: LD_INT 30
32170: DOUBLE
32171: EQUAL
32172: IFTRUE 32176
32174: GO 32232
32176: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
32177: LD_ADDR_VAR 0 9
32181: PUSH
32182: LD_VAR 0 59
32186: PUSH
32187: LD_VAR 0 60
32191: PUSH
32192: LD_VAR 0 61
32196: PUSH
32197: LD_VAR 0 62
32201: PUSH
32202: LD_VAR 0 63
32206: PUSH
32207: LD_VAR 0 64
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: PUSH
32220: LD_VAR 0 4
32224: PUSH
32225: LD_INT 1
32227: PLUS
32228: ARRAY
32229: ST_TO_ADDR
32230: GO 32233
32232: POP
// temp_list2 = [ ] ;
32233: LD_ADDR_VAR 0 10
32237: PUSH
32238: EMPTY
32239: ST_TO_ADDR
// for i in temp_list do
32240: LD_ADDR_VAR 0 8
32244: PUSH
32245: LD_VAR 0 9
32249: PUSH
32250: FOR_IN
32251: IFFALSE 32303
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
32253: LD_ADDR_VAR 0 10
32257: PUSH
32258: LD_VAR 0 10
32262: PUSH
32263: LD_VAR 0 8
32267: PUSH
32268: LD_INT 1
32270: ARRAY
32271: PUSH
32272: LD_VAR 0 2
32276: PLUS
32277: PUSH
32278: LD_VAR 0 8
32282: PUSH
32283: LD_INT 2
32285: ARRAY
32286: PUSH
32287: LD_VAR 0 3
32291: PLUS
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: EMPTY
32298: LIST
32299: ADD
32300: ST_TO_ADDR
32301: GO 32250
32303: POP
32304: POP
// result = temp_list2 ;
32305: LD_ADDR_VAR 0 7
32309: PUSH
32310: LD_VAR 0 10
32314: ST_TO_ADDR
// end ;
32315: LD_VAR 0 7
32319: RET
// export function EnemyInRange ( unit , dist ) ; begin
32320: LD_INT 0
32322: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
32323: LD_ADDR_VAR 0 3
32327: PUSH
32328: LD_VAR 0 1
32332: PPUSH
32333: CALL_OW 255
32337: PPUSH
32338: LD_VAR 0 1
32342: PPUSH
32343: CALL_OW 250
32347: PPUSH
32348: LD_VAR 0 1
32352: PPUSH
32353: CALL_OW 251
32357: PPUSH
32358: LD_VAR 0 2
32362: PPUSH
32363: CALL 6091 0 4
32367: PUSH
32368: LD_INT 4
32370: ARRAY
32371: ST_TO_ADDR
// end ;
32372: LD_VAR 0 3
32376: RET
// export function PlayerSeeMe ( unit ) ; begin
32377: LD_INT 0
32379: PPUSH
// result := See ( your_side , unit ) ;
32380: LD_ADDR_VAR 0 2
32384: PUSH
32385: LD_OWVAR 2
32389: PPUSH
32390: LD_VAR 0 1
32394: PPUSH
32395: CALL_OW 292
32399: ST_TO_ADDR
// end ;
32400: LD_VAR 0 2
32404: RET
// export function ReverseDir ( unit ) ; begin
32405: LD_INT 0
32407: PPUSH
// if not unit then
32408: LD_VAR 0 1
32412: NOT
32413: IFFALSE 32417
// exit ;
32415: GO 32440
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
32417: LD_ADDR_VAR 0 2
32421: PUSH
32422: LD_VAR 0 1
32426: PPUSH
32427: CALL_OW 254
32431: PUSH
32432: LD_INT 3
32434: PLUS
32435: PUSH
32436: LD_INT 6
32438: MOD
32439: ST_TO_ADDR
// end ;
32440: LD_VAR 0 2
32444: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
32445: LD_INT 0
32447: PPUSH
32448: PPUSH
32449: PPUSH
32450: PPUSH
32451: PPUSH
// if not hexes then
32452: LD_VAR 0 2
32456: NOT
32457: IFFALSE 32461
// exit ;
32459: GO 32609
// dist := 9999 ;
32461: LD_ADDR_VAR 0 5
32465: PUSH
32466: LD_INT 9999
32468: ST_TO_ADDR
// for i = 1 to hexes do
32469: LD_ADDR_VAR 0 4
32473: PUSH
32474: DOUBLE
32475: LD_INT 1
32477: DEC
32478: ST_TO_ADDR
32479: LD_VAR 0 2
32483: PUSH
32484: FOR_TO
32485: IFFALSE 32597
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
32487: LD_VAR 0 1
32491: PPUSH
32492: LD_VAR 0 2
32496: PUSH
32497: LD_VAR 0 4
32501: ARRAY
32502: PUSH
32503: LD_INT 1
32505: ARRAY
32506: PPUSH
32507: LD_VAR 0 2
32511: PUSH
32512: LD_VAR 0 4
32516: ARRAY
32517: PUSH
32518: LD_INT 2
32520: ARRAY
32521: PPUSH
32522: CALL_OW 297
32526: PUSH
32527: LD_VAR 0 5
32531: LESS
32532: IFFALSE 32595
// begin hex := hexes [ i ] ;
32534: LD_ADDR_VAR 0 7
32538: PUSH
32539: LD_VAR 0 2
32543: PUSH
32544: LD_VAR 0 4
32548: ARRAY
32549: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32550: LD_ADDR_VAR 0 5
32554: PUSH
32555: LD_VAR 0 1
32559: PPUSH
32560: LD_VAR 0 2
32564: PUSH
32565: LD_VAR 0 4
32569: ARRAY
32570: PUSH
32571: LD_INT 1
32573: ARRAY
32574: PPUSH
32575: LD_VAR 0 2
32579: PUSH
32580: LD_VAR 0 4
32584: ARRAY
32585: PUSH
32586: LD_INT 2
32588: ARRAY
32589: PPUSH
32590: CALL_OW 297
32594: ST_TO_ADDR
// end ; end ;
32595: GO 32484
32597: POP
32598: POP
// result := hex ;
32599: LD_ADDR_VAR 0 3
32603: PUSH
32604: LD_VAR 0 7
32608: ST_TO_ADDR
// end ;
32609: LD_VAR 0 3
32613: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
32614: LD_INT 0
32616: PPUSH
32617: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
32618: LD_VAR 0 1
32622: NOT
32623: PUSH
32624: LD_VAR 0 1
32628: PUSH
32629: LD_INT 21
32631: PUSH
32632: LD_INT 2
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 23
32641: PUSH
32642: LD_INT 2
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PPUSH
32653: CALL_OW 69
32657: IN
32658: NOT
32659: OR
32660: IFFALSE 32664
// exit ;
32662: GO 32711
// for i = 1 to 3 do
32664: LD_ADDR_VAR 0 3
32668: PUSH
32669: DOUBLE
32670: LD_INT 1
32672: DEC
32673: ST_TO_ADDR
32674: LD_INT 3
32676: PUSH
32677: FOR_TO
32678: IFFALSE 32709
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
32680: LD_VAR 0 1
32684: PPUSH
32685: CALL_OW 250
32689: PPUSH
32690: LD_VAR 0 1
32694: PPUSH
32695: CALL_OW 251
32699: PPUSH
32700: LD_INT 1
32702: PPUSH
32703: CALL_OW 453
32707: GO 32677
32709: POP
32710: POP
// end ;
32711: LD_VAR 0 2
32715: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
32716: LD_INT 0
32718: PPUSH
32719: PPUSH
32720: PPUSH
32721: PPUSH
32722: PPUSH
32723: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
32724: LD_VAR 0 1
32728: NOT
32729: PUSH
32730: LD_VAR 0 2
32734: NOT
32735: OR
32736: PUSH
32737: LD_VAR 0 1
32741: PPUSH
32742: CALL_OW 314
32746: OR
32747: IFFALSE 32751
// exit ;
32749: GO 33192
// x := GetX ( enemy_unit ) ;
32751: LD_ADDR_VAR 0 7
32755: PUSH
32756: LD_VAR 0 2
32760: PPUSH
32761: CALL_OW 250
32765: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
32766: LD_ADDR_VAR 0 8
32770: PUSH
32771: LD_VAR 0 2
32775: PPUSH
32776: CALL_OW 251
32780: ST_TO_ADDR
// if not x or not y then
32781: LD_VAR 0 7
32785: NOT
32786: PUSH
32787: LD_VAR 0 8
32791: NOT
32792: OR
32793: IFFALSE 32797
// exit ;
32795: GO 33192
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
32797: LD_ADDR_VAR 0 6
32801: PUSH
32802: LD_VAR 0 7
32806: PPUSH
32807: LD_INT 0
32809: PPUSH
32810: LD_INT 4
32812: PPUSH
32813: CALL_OW 272
32817: PUSH
32818: LD_VAR 0 8
32822: PPUSH
32823: LD_INT 0
32825: PPUSH
32826: LD_INT 4
32828: PPUSH
32829: CALL_OW 273
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_VAR 0 7
32842: PPUSH
32843: LD_INT 1
32845: PPUSH
32846: LD_INT 4
32848: PPUSH
32849: CALL_OW 272
32853: PUSH
32854: LD_VAR 0 8
32858: PPUSH
32859: LD_INT 1
32861: PPUSH
32862: LD_INT 4
32864: PPUSH
32865: CALL_OW 273
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_VAR 0 7
32878: PPUSH
32879: LD_INT 2
32881: PPUSH
32882: LD_INT 4
32884: PPUSH
32885: CALL_OW 272
32889: PUSH
32890: LD_VAR 0 8
32894: PPUSH
32895: LD_INT 2
32897: PPUSH
32898: LD_INT 4
32900: PPUSH
32901: CALL_OW 273
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_VAR 0 7
32914: PPUSH
32915: LD_INT 3
32917: PPUSH
32918: LD_INT 4
32920: PPUSH
32921: CALL_OW 272
32925: PUSH
32926: LD_VAR 0 8
32930: PPUSH
32931: LD_INT 3
32933: PPUSH
32934: LD_INT 4
32936: PPUSH
32937: CALL_OW 273
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_VAR 0 7
32950: PPUSH
32951: LD_INT 4
32953: PPUSH
32954: LD_INT 4
32956: PPUSH
32957: CALL_OW 272
32961: PUSH
32962: LD_VAR 0 8
32966: PPUSH
32967: LD_INT 4
32969: PPUSH
32970: LD_INT 4
32972: PPUSH
32973: CALL_OW 273
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_VAR 0 7
32986: PPUSH
32987: LD_INT 5
32989: PPUSH
32990: LD_INT 4
32992: PPUSH
32993: CALL_OW 272
32997: PUSH
32998: LD_VAR 0 8
33002: PPUSH
33003: LD_INT 5
33005: PPUSH
33006: LD_INT 4
33008: PPUSH
33009: CALL_OW 273
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: ST_TO_ADDR
// for i = tmp downto 1 do
33026: LD_ADDR_VAR 0 4
33030: PUSH
33031: DOUBLE
33032: LD_VAR 0 6
33036: INC
33037: ST_TO_ADDR
33038: LD_INT 1
33040: PUSH
33041: FOR_DOWNTO
33042: IFFALSE 33143
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33044: LD_VAR 0 6
33048: PUSH
33049: LD_VAR 0 4
33053: ARRAY
33054: PUSH
33055: LD_INT 1
33057: ARRAY
33058: PPUSH
33059: LD_VAR 0 6
33063: PUSH
33064: LD_VAR 0 4
33068: ARRAY
33069: PUSH
33070: LD_INT 2
33072: ARRAY
33073: PPUSH
33074: CALL_OW 488
33078: NOT
33079: PUSH
33080: LD_VAR 0 6
33084: PUSH
33085: LD_VAR 0 4
33089: ARRAY
33090: PUSH
33091: LD_INT 1
33093: ARRAY
33094: PPUSH
33095: LD_VAR 0 6
33099: PUSH
33100: LD_VAR 0 4
33104: ARRAY
33105: PUSH
33106: LD_INT 2
33108: ARRAY
33109: PPUSH
33110: CALL_OW 428
33114: PUSH
33115: LD_INT 0
33117: NONEQUAL
33118: OR
33119: IFFALSE 33141
// tmp := Delete ( tmp , i ) ;
33121: LD_ADDR_VAR 0 6
33125: PUSH
33126: LD_VAR 0 6
33130: PPUSH
33131: LD_VAR 0 4
33135: PPUSH
33136: CALL_OW 3
33140: ST_TO_ADDR
33141: GO 33041
33143: POP
33144: POP
// j := GetClosestHex ( unit , tmp ) ;
33145: LD_ADDR_VAR 0 5
33149: PUSH
33150: LD_VAR 0 1
33154: PPUSH
33155: LD_VAR 0 6
33159: PPUSH
33160: CALL 32445 0 2
33164: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
33165: LD_VAR 0 1
33169: PPUSH
33170: LD_VAR 0 5
33174: PUSH
33175: LD_INT 1
33177: ARRAY
33178: PPUSH
33179: LD_VAR 0 5
33183: PUSH
33184: LD_INT 2
33186: ARRAY
33187: PPUSH
33188: CALL_OW 111
// end ;
33192: LD_VAR 0 3
33196: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
33197: LD_INT 0
33199: PPUSH
33200: PPUSH
33201: PPUSH
// uc_side = 0 ;
33202: LD_ADDR_OWVAR 20
33206: PUSH
33207: LD_INT 0
33209: ST_TO_ADDR
// uc_nation = 0 ;
33210: LD_ADDR_OWVAR 21
33214: PUSH
33215: LD_INT 0
33217: ST_TO_ADDR
// InitHc_All ( ) ;
33218: CALL_OW 584
// InitVc ;
33222: CALL_OW 20
// if mastodonts then
33226: LD_VAR 0 6
33230: IFFALSE 33297
// for i = 1 to mastodonts do
33232: LD_ADDR_VAR 0 11
33236: PUSH
33237: DOUBLE
33238: LD_INT 1
33240: DEC
33241: ST_TO_ADDR
33242: LD_VAR 0 6
33246: PUSH
33247: FOR_TO
33248: IFFALSE 33295
// begin vc_chassis := 31 ;
33250: LD_ADDR_OWVAR 37
33254: PUSH
33255: LD_INT 31
33257: ST_TO_ADDR
// vc_control := control_rider ;
33258: LD_ADDR_OWVAR 38
33262: PUSH
33263: LD_INT 4
33265: ST_TO_ADDR
// animal := CreateVehicle ;
33266: LD_ADDR_VAR 0 12
33270: PUSH
33271: CALL_OW 45
33275: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33276: LD_VAR 0 12
33280: PPUSH
33281: LD_VAR 0 8
33285: PPUSH
33286: LD_INT 0
33288: PPUSH
33289: CALL 35485 0 3
// end ;
33293: GO 33247
33295: POP
33296: POP
// if horses then
33297: LD_VAR 0 5
33301: IFFALSE 33368
// for i = 1 to horses do
33303: LD_ADDR_VAR 0 11
33307: PUSH
33308: DOUBLE
33309: LD_INT 1
33311: DEC
33312: ST_TO_ADDR
33313: LD_VAR 0 5
33317: PUSH
33318: FOR_TO
33319: IFFALSE 33366
// begin hc_class := 21 ;
33321: LD_ADDR_OWVAR 28
33325: PUSH
33326: LD_INT 21
33328: ST_TO_ADDR
// hc_gallery :=  ;
33329: LD_ADDR_OWVAR 33
33333: PUSH
33334: LD_STRING 
33336: ST_TO_ADDR
// animal := CreateHuman ;
33337: LD_ADDR_VAR 0 12
33341: PUSH
33342: CALL_OW 44
33346: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33347: LD_VAR 0 12
33351: PPUSH
33352: LD_VAR 0 8
33356: PPUSH
33357: LD_INT 0
33359: PPUSH
33360: CALL 35485 0 3
// end ;
33364: GO 33318
33366: POP
33367: POP
// if birds then
33368: LD_VAR 0 1
33372: IFFALSE 33439
// for i = 1 to birds do
33374: LD_ADDR_VAR 0 11
33378: PUSH
33379: DOUBLE
33380: LD_INT 1
33382: DEC
33383: ST_TO_ADDR
33384: LD_VAR 0 1
33388: PUSH
33389: FOR_TO
33390: IFFALSE 33437
// begin hc_class = 18 ;
33392: LD_ADDR_OWVAR 28
33396: PUSH
33397: LD_INT 18
33399: ST_TO_ADDR
// hc_gallery =  ;
33400: LD_ADDR_OWVAR 33
33404: PUSH
33405: LD_STRING 
33407: ST_TO_ADDR
// animal := CreateHuman ;
33408: LD_ADDR_VAR 0 12
33412: PUSH
33413: CALL_OW 44
33417: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33418: LD_VAR 0 12
33422: PPUSH
33423: LD_VAR 0 8
33427: PPUSH
33428: LD_INT 0
33430: PPUSH
33431: CALL 35485 0 3
// end ;
33435: GO 33389
33437: POP
33438: POP
// if tigers then
33439: LD_VAR 0 2
33443: IFFALSE 33527
// for i = 1 to tigers do
33445: LD_ADDR_VAR 0 11
33449: PUSH
33450: DOUBLE
33451: LD_INT 1
33453: DEC
33454: ST_TO_ADDR
33455: LD_VAR 0 2
33459: PUSH
33460: FOR_TO
33461: IFFALSE 33525
// begin hc_class = class_tiger ;
33463: LD_ADDR_OWVAR 28
33467: PUSH
33468: LD_INT 14
33470: ST_TO_ADDR
// hc_gallery =  ;
33471: LD_ADDR_OWVAR 33
33475: PUSH
33476: LD_STRING 
33478: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
33479: LD_ADDR_OWVAR 35
33483: PUSH
33484: LD_INT 7
33486: NEG
33487: PPUSH
33488: LD_INT 7
33490: PPUSH
33491: CALL_OW 12
33495: ST_TO_ADDR
// animal := CreateHuman ;
33496: LD_ADDR_VAR 0 12
33500: PUSH
33501: CALL_OW 44
33505: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33506: LD_VAR 0 12
33510: PPUSH
33511: LD_VAR 0 8
33515: PPUSH
33516: LD_INT 0
33518: PPUSH
33519: CALL 35485 0 3
// end ;
33523: GO 33460
33525: POP
33526: POP
// if apemans then
33527: LD_VAR 0 3
33531: IFFALSE 33654
// for i = 1 to apemans do
33533: LD_ADDR_VAR 0 11
33537: PUSH
33538: DOUBLE
33539: LD_INT 1
33541: DEC
33542: ST_TO_ADDR
33543: LD_VAR 0 3
33547: PUSH
33548: FOR_TO
33549: IFFALSE 33652
// begin hc_class = class_apeman ;
33551: LD_ADDR_OWVAR 28
33555: PUSH
33556: LD_INT 12
33558: ST_TO_ADDR
// hc_gallery =  ;
33559: LD_ADDR_OWVAR 33
33563: PUSH
33564: LD_STRING 
33566: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
33567: LD_ADDR_OWVAR 35
33571: PUSH
33572: LD_INT 5
33574: NEG
33575: PPUSH
33576: LD_INT 5
33578: PPUSH
33579: CALL_OW 12
33583: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
33584: LD_ADDR_OWVAR 31
33588: PUSH
33589: LD_INT 1
33591: PPUSH
33592: LD_INT 3
33594: PPUSH
33595: CALL_OW 12
33599: PUSH
33600: LD_INT 1
33602: PPUSH
33603: LD_INT 3
33605: PPUSH
33606: CALL_OW 12
33610: PUSH
33611: LD_INT 0
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: ST_TO_ADDR
// animal := CreateHuman ;
33623: LD_ADDR_VAR 0 12
33627: PUSH
33628: CALL_OW 44
33632: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33633: LD_VAR 0 12
33637: PPUSH
33638: LD_VAR 0 8
33642: PPUSH
33643: LD_INT 0
33645: PPUSH
33646: CALL 35485 0 3
// end ;
33650: GO 33548
33652: POP
33653: POP
// if enchidnas then
33654: LD_VAR 0 4
33658: IFFALSE 33725
// for i = 1 to enchidnas do
33660: LD_ADDR_VAR 0 11
33664: PUSH
33665: DOUBLE
33666: LD_INT 1
33668: DEC
33669: ST_TO_ADDR
33670: LD_VAR 0 4
33674: PUSH
33675: FOR_TO
33676: IFFALSE 33723
// begin hc_class = 13 ;
33678: LD_ADDR_OWVAR 28
33682: PUSH
33683: LD_INT 13
33685: ST_TO_ADDR
// hc_gallery =  ;
33686: LD_ADDR_OWVAR 33
33690: PUSH
33691: LD_STRING 
33693: ST_TO_ADDR
// animal := CreateHuman ;
33694: LD_ADDR_VAR 0 12
33698: PUSH
33699: CALL_OW 44
33703: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33704: LD_VAR 0 12
33708: PPUSH
33709: LD_VAR 0 8
33713: PPUSH
33714: LD_INT 0
33716: PPUSH
33717: CALL 35485 0 3
// end ;
33721: GO 33675
33723: POP
33724: POP
// if fishes then
33725: LD_VAR 0 7
33729: IFFALSE 33796
// for i = 1 to fishes do
33731: LD_ADDR_VAR 0 11
33735: PUSH
33736: DOUBLE
33737: LD_INT 1
33739: DEC
33740: ST_TO_ADDR
33741: LD_VAR 0 7
33745: PUSH
33746: FOR_TO
33747: IFFALSE 33794
// begin hc_class = 20 ;
33749: LD_ADDR_OWVAR 28
33753: PUSH
33754: LD_INT 20
33756: ST_TO_ADDR
// hc_gallery =  ;
33757: LD_ADDR_OWVAR 33
33761: PUSH
33762: LD_STRING 
33764: ST_TO_ADDR
// animal := CreateHuman ;
33765: LD_ADDR_VAR 0 12
33769: PUSH
33770: CALL_OW 44
33774: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
33775: LD_VAR 0 12
33779: PPUSH
33780: LD_VAR 0 9
33784: PPUSH
33785: LD_INT 0
33787: PPUSH
33788: CALL 35485 0 3
// end ;
33792: GO 33746
33794: POP
33795: POP
// end ;
33796: LD_VAR 0 10
33800: RET
// export function WantHeal ( sci , unit ) ; begin
33801: LD_INT 0
33803: PPUSH
// if GetTaskList ( sci ) > 0 then
33804: LD_VAR 0 1
33808: PPUSH
33809: CALL_OW 437
33813: PUSH
33814: LD_INT 0
33816: GREATER
33817: IFFALSE 33887
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
33819: LD_VAR 0 1
33823: PPUSH
33824: CALL_OW 437
33828: PUSH
33829: LD_INT 1
33831: ARRAY
33832: PUSH
33833: LD_INT 1
33835: ARRAY
33836: PUSH
33837: LD_STRING l
33839: EQUAL
33840: PUSH
33841: LD_VAR 0 1
33845: PPUSH
33846: CALL_OW 437
33850: PUSH
33851: LD_INT 1
33853: ARRAY
33854: PUSH
33855: LD_INT 4
33857: ARRAY
33858: PUSH
33859: LD_VAR 0 2
33863: EQUAL
33864: AND
33865: IFFALSE 33877
// result := true else
33867: LD_ADDR_VAR 0 3
33871: PUSH
33872: LD_INT 1
33874: ST_TO_ADDR
33875: GO 33885
// result := false ;
33877: LD_ADDR_VAR 0 3
33881: PUSH
33882: LD_INT 0
33884: ST_TO_ADDR
// end else
33885: GO 33895
// result := false ;
33887: LD_ADDR_VAR 0 3
33891: PUSH
33892: LD_INT 0
33894: ST_TO_ADDR
// end ;
33895: LD_VAR 0 3
33899: RET
// export function HealTarget ( sci ) ; begin
33900: LD_INT 0
33902: PPUSH
// if not sci then
33903: LD_VAR 0 1
33907: NOT
33908: IFFALSE 33912
// exit ;
33910: GO 33977
// result := 0 ;
33912: LD_ADDR_VAR 0 2
33916: PUSH
33917: LD_INT 0
33919: ST_TO_ADDR
// if GetTaskList ( sci ) then
33920: LD_VAR 0 1
33924: PPUSH
33925: CALL_OW 437
33929: IFFALSE 33977
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
33931: LD_VAR 0 1
33935: PPUSH
33936: CALL_OW 437
33940: PUSH
33941: LD_INT 1
33943: ARRAY
33944: PUSH
33945: LD_INT 1
33947: ARRAY
33948: PUSH
33949: LD_STRING l
33951: EQUAL
33952: IFFALSE 33977
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
33954: LD_ADDR_VAR 0 2
33958: PUSH
33959: LD_VAR 0 1
33963: PPUSH
33964: CALL_OW 437
33968: PUSH
33969: LD_INT 1
33971: ARRAY
33972: PUSH
33973: LD_INT 4
33975: ARRAY
33976: ST_TO_ADDR
// end ;
33977: LD_VAR 0 2
33981: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
33982: LD_INT 0
33984: PPUSH
33985: PPUSH
33986: PPUSH
33987: PPUSH
// if not base_units then
33988: LD_VAR 0 1
33992: NOT
33993: IFFALSE 33997
// exit ;
33995: GO 34084
// result := false ;
33997: LD_ADDR_VAR 0 2
34001: PUSH
34002: LD_INT 0
34004: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
34005: LD_ADDR_VAR 0 5
34009: PUSH
34010: LD_VAR 0 1
34014: PPUSH
34015: LD_INT 21
34017: PUSH
34018: LD_INT 3
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PPUSH
34025: CALL_OW 72
34029: ST_TO_ADDR
// if not tmp then
34030: LD_VAR 0 5
34034: NOT
34035: IFFALSE 34039
// exit ;
34037: GO 34084
// for i in tmp do
34039: LD_ADDR_VAR 0 3
34043: PUSH
34044: LD_VAR 0 5
34048: PUSH
34049: FOR_IN
34050: IFFALSE 34082
// begin result := EnemyInRange ( i , 22 ) ;
34052: LD_ADDR_VAR 0 2
34056: PUSH
34057: LD_VAR 0 3
34061: PPUSH
34062: LD_INT 22
34064: PPUSH
34065: CALL 32320 0 2
34069: ST_TO_ADDR
// if result then
34070: LD_VAR 0 2
34074: IFFALSE 34080
// exit ;
34076: POP
34077: POP
34078: GO 34084
// end ;
34080: GO 34049
34082: POP
34083: POP
// end ;
34084: LD_VAR 0 2
34088: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
34089: LD_INT 0
34091: PPUSH
34092: PPUSH
// if not units then
34093: LD_VAR 0 1
34097: NOT
34098: IFFALSE 34102
// exit ;
34100: GO 34172
// result := [ ] ;
34102: LD_ADDR_VAR 0 3
34106: PUSH
34107: EMPTY
34108: ST_TO_ADDR
// for i in units do
34109: LD_ADDR_VAR 0 4
34113: PUSH
34114: LD_VAR 0 1
34118: PUSH
34119: FOR_IN
34120: IFFALSE 34170
// if GetTag ( i ) = tag then
34122: LD_VAR 0 4
34126: PPUSH
34127: CALL_OW 110
34131: PUSH
34132: LD_VAR 0 2
34136: EQUAL
34137: IFFALSE 34168
// result := Insert ( result , result + 1 , i ) ;
34139: LD_ADDR_VAR 0 3
34143: PUSH
34144: LD_VAR 0 3
34148: PPUSH
34149: LD_VAR 0 3
34153: PUSH
34154: LD_INT 1
34156: PLUS
34157: PPUSH
34158: LD_VAR 0 4
34162: PPUSH
34163: CALL_OW 2
34167: ST_TO_ADDR
34168: GO 34119
34170: POP
34171: POP
// end ;
34172: LD_VAR 0 3
34176: RET
// export function IsDriver ( un ) ; begin
34177: LD_INT 0
34179: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
34180: LD_ADDR_VAR 0 2
34184: PUSH
34185: LD_VAR 0 1
34189: PUSH
34190: LD_INT 55
34192: PUSH
34193: EMPTY
34194: LIST
34195: PPUSH
34196: CALL_OW 69
34200: IN
34201: ST_TO_ADDR
// end ;
34202: LD_VAR 0 2
34206: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
34207: LD_INT 0
34209: PPUSH
34210: PPUSH
// list := [ ] ;
34211: LD_ADDR_VAR 0 5
34215: PUSH
34216: EMPTY
34217: ST_TO_ADDR
// case d of 0 :
34218: LD_VAR 0 3
34222: PUSH
34223: LD_INT 0
34225: DOUBLE
34226: EQUAL
34227: IFTRUE 34231
34229: GO 34364
34231: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
34232: LD_ADDR_VAR 0 5
34236: PUSH
34237: LD_VAR 0 1
34241: PUSH
34242: LD_INT 4
34244: MINUS
34245: PUSH
34246: LD_VAR 0 2
34250: PUSH
34251: LD_INT 4
34253: MINUS
34254: PUSH
34255: LD_INT 2
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: LIST
34262: PUSH
34263: LD_VAR 0 1
34267: PUSH
34268: LD_INT 3
34270: MINUS
34271: PUSH
34272: LD_VAR 0 2
34276: PUSH
34277: LD_INT 1
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: LIST
34284: PUSH
34285: LD_VAR 0 1
34289: PUSH
34290: LD_INT 4
34292: PLUS
34293: PUSH
34294: LD_VAR 0 2
34298: PUSH
34299: LD_INT 4
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: LIST
34306: PUSH
34307: LD_VAR 0 1
34311: PUSH
34312: LD_INT 3
34314: PLUS
34315: PUSH
34316: LD_VAR 0 2
34320: PUSH
34321: LD_INT 3
34323: PLUS
34324: PUSH
34325: LD_INT 5
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: LIST
34332: PUSH
34333: LD_VAR 0 1
34337: PUSH
34338: LD_VAR 0 2
34342: PUSH
34343: LD_INT 4
34345: PLUS
34346: PUSH
34347: LD_INT 0
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: LIST
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: ST_TO_ADDR
// end ; 1 :
34362: GO 35062
34364: LD_INT 1
34366: DOUBLE
34367: EQUAL
34368: IFTRUE 34372
34370: GO 34505
34372: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
34373: LD_ADDR_VAR 0 5
34377: PUSH
34378: LD_VAR 0 1
34382: PUSH
34383: LD_VAR 0 2
34387: PUSH
34388: LD_INT 4
34390: MINUS
34391: PUSH
34392: LD_INT 3
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: LIST
34399: PUSH
34400: LD_VAR 0 1
34404: PUSH
34405: LD_INT 3
34407: MINUS
34408: PUSH
34409: LD_VAR 0 2
34413: PUSH
34414: LD_INT 3
34416: MINUS
34417: PUSH
34418: LD_INT 2
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: LIST
34425: PUSH
34426: LD_VAR 0 1
34430: PUSH
34431: LD_INT 4
34433: MINUS
34434: PUSH
34435: LD_VAR 0 2
34439: PUSH
34440: LD_INT 1
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: LIST
34447: PUSH
34448: LD_VAR 0 1
34452: PUSH
34453: LD_VAR 0 2
34457: PUSH
34458: LD_INT 3
34460: PLUS
34461: PUSH
34462: LD_INT 0
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: LIST
34469: PUSH
34470: LD_VAR 0 1
34474: PUSH
34475: LD_INT 4
34477: PLUS
34478: PUSH
34479: LD_VAR 0 2
34483: PUSH
34484: LD_INT 4
34486: PLUS
34487: PUSH
34488: LD_INT 5
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: LIST
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: ST_TO_ADDR
// end ; 2 :
34503: GO 35062
34505: LD_INT 2
34507: DOUBLE
34508: EQUAL
34509: IFTRUE 34513
34511: GO 34642
34513: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
34514: LD_ADDR_VAR 0 5
34518: PUSH
34519: LD_VAR 0 1
34523: PUSH
34524: LD_VAR 0 2
34528: PUSH
34529: LD_INT 3
34531: MINUS
34532: PUSH
34533: LD_INT 3
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: LIST
34540: PUSH
34541: LD_VAR 0 1
34545: PUSH
34546: LD_INT 4
34548: PLUS
34549: PUSH
34550: LD_VAR 0 2
34554: PUSH
34555: LD_INT 4
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: LIST
34562: PUSH
34563: LD_VAR 0 1
34567: PUSH
34568: LD_VAR 0 2
34572: PUSH
34573: LD_INT 4
34575: PLUS
34576: PUSH
34577: LD_INT 0
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: LIST
34584: PUSH
34585: LD_VAR 0 1
34589: PUSH
34590: LD_INT 3
34592: MINUS
34593: PUSH
34594: LD_VAR 0 2
34598: PUSH
34599: LD_INT 1
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: LIST
34606: PUSH
34607: LD_VAR 0 1
34611: PUSH
34612: LD_INT 4
34614: MINUS
34615: PUSH
34616: LD_VAR 0 2
34620: PUSH
34621: LD_INT 4
34623: MINUS
34624: PUSH
34625: LD_INT 2
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: ST_TO_ADDR
// end ; 3 :
34640: GO 35062
34642: LD_INT 3
34644: DOUBLE
34645: EQUAL
34646: IFTRUE 34650
34648: GO 34783
34650: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
34651: LD_ADDR_VAR 0 5
34655: PUSH
34656: LD_VAR 0 1
34660: PUSH
34661: LD_INT 3
34663: PLUS
34664: PUSH
34665: LD_VAR 0 2
34669: PUSH
34670: LD_INT 4
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: PUSH
34678: LD_VAR 0 1
34682: PUSH
34683: LD_INT 4
34685: PLUS
34686: PUSH
34687: LD_VAR 0 2
34691: PUSH
34692: LD_INT 4
34694: PLUS
34695: PUSH
34696: LD_INT 5
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: LIST
34703: PUSH
34704: LD_VAR 0 1
34708: PUSH
34709: LD_INT 4
34711: MINUS
34712: PUSH
34713: LD_VAR 0 2
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: LIST
34725: PUSH
34726: LD_VAR 0 1
34730: PUSH
34731: LD_VAR 0 2
34735: PUSH
34736: LD_INT 4
34738: MINUS
34739: PUSH
34740: LD_INT 3
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: LIST
34747: PUSH
34748: LD_VAR 0 1
34752: PUSH
34753: LD_INT 3
34755: MINUS
34756: PUSH
34757: LD_VAR 0 2
34761: PUSH
34762: LD_INT 3
34764: MINUS
34765: PUSH
34766: LD_INT 2
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: LIST
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: ST_TO_ADDR
// end ; 4 :
34781: GO 35062
34783: LD_INT 4
34785: DOUBLE
34786: EQUAL
34787: IFTRUE 34791
34789: GO 34924
34791: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
34792: LD_ADDR_VAR 0 5
34796: PUSH
34797: LD_VAR 0 1
34801: PUSH
34802: LD_VAR 0 2
34806: PUSH
34807: LD_INT 4
34809: PLUS
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: LIST
34818: PUSH
34819: LD_VAR 0 1
34823: PUSH
34824: LD_INT 3
34826: PLUS
34827: PUSH
34828: LD_VAR 0 2
34832: PUSH
34833: LD_INT 3
34835: PLUS
34836: PUSH
34837: LD_INT 5
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: LIST
34844: PUSH
34845: LD_VAR 0 1
34849: PUSH
34850: LD_INT 4
34852: PLUS
34853: PUSH
34854: LD_VAR 0 2
34858: PUSH
34859: LD_INT 4
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: LIST
34866: PUSH
34867: LD_VAR 0 1
34871: PUSH
34872: LD_VAR 0 2
34876: PUSH
34877: LD_INT 3
34879: MINUS
34880: PUSH
34881: LD_INT 3
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: LIST
34888: PUSH
34889: LD_VAR 0 1
34893: PUSH
34894: LD_INT 4
34896: MINUS
34897: PUSH
34898: LD_VAR 0 2
34902: PUSH
34903: LD_INT 4
34905: MINUS
34906: PUSH
34907: LD_INT 2
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: LIST
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: ST_TO_ADDR
// end ; 5 :
34922: GO 35062
34924: LD_INT 5
34926: DOUBLE
34927: EQUAL
34928: IFTRUE 34932
34930: GO 35061
34932: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
34933: LD_ADDR_VAR 0 5
34937: PUSH
34938: LD_VAR 0 1
34942: PUSH
34943: LD_INT 4
34945: MINUS
34946: PUSH
34947: LD_VAR 0 2
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: LIST
34959: PUSH
34960: LD_VAR 0 1
34964: PUSH
34965: LD_VAR 0 2
34969: PUSH
34970: LD_INT 4
34972: MINUS
34973: PUSH
34974: LD_INT 3
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: LIST
34981: PUSH
34982: LD_VAR 0 1
34986: PUSH
34987: LD_INT 4
34989: PLUS
34990: PUSH
34991: LD_VAR 0 2
34995: PUSH
34996: LD_INT 4
34998: PLUS
34999: PUSH
35000: LD_INT 5
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: LIST
35007: PUSH
35008: LD_VAR 0 1
35012: PUSH
35013: LD_INT 3
35015: PLUS
35016: PUSH
35017: LD_VAR 0 2
35021: PUSH
35022: LD_INT 4
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: LIST
35029: PUSH
35030: LD_VAR 0 1
35034: PUSH
35035: LD_VAR 0 2
35039: PUSH
35040: LD_INT 3
35042: PLUS
35043: PUSH
35044: LD_INT 0
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: LIST
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: ST_TO_ADDR
// end ; end ;
35059: GO 35062
35061: POP
// result := list ;
35062: LD_ADDR_VAR 0 4
35066: PUSH
35067: LD_VAR 0 5
35071: ST_TO_ADDR
// end ;
35072: LD_VAR 0 4
35076: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
35077: LD_INT 0
35079: PPUSH
35080: PPUSH
35081: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
35082: LD_VAR 0 1
35086: NOT
35087: PUSH
35088: LD_VAR 0 2
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: LD_INT 2
35098: PUSH
35099: LD_INT 3
35101: PUSH
35102: LD_INT 4
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: IN
35111: NOT
35112: OR
35113: IFFALSE 35117
// exit ;
35115: GO 35209
// tmp := [ ] ;
35117: LD_ADDR_VAR 0 5
35121: PUSH
35122: EMPTY
35123: ST_TO_ADDR
// for i in units do
35124: LD_ADDR_VAR 0 4
35128: PUSH
35129: LD_VAR 0 1
35133: PUSH
35134: FOR_IN
35135: IFFALSE 35178
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
35137: LD_ADDR_VAR 0 5
35141: PUSH
35142: LD_VAR 0 5
35146: PPUSH
35147: LD_VAR 0 5
35151: PUSH
35152: LD_INT 1
35154: PLUS
35155: PPUSH
35156: LD_VAR 0 4
35160: PPUSH
35161: LD_VAR 0 2
35165: PPUSH
35166: CALL_OW 259
35170: PPUSH
35171: CALL_OW 2
35175: ST_TO_ADDR
35176: GO 35134
35178: POP
35179: POP
// if not tmp then
35180: LD_VAR 0 5
35184: NOT
35185: IFFALSE 35189
// exit ;
35187: GO 35209
// result := SortListByListDesc ( units , tmp ) ;
35189: LD_ADDR_VAR 0 3
35193: PUSH
35194: LD_VAR 0 1
35198: PPUSH
35199: LD_VAR 0 5
35203: PPUSH
35204: CALL_OW 77
35208: ST_TO_ADDR
// end ;
35209: LD_VAR 0 3
35213: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
35214: LD_INT 0
35216: PPUSH
35217: PPUSH
35218: PPUSH
// result := false ;
35219: LD_ADDR_VAR 0 3
35223: PUSH
35224: LD_INT 0
35226: ST_TO_ADDR
// x := GetX ( building ) ;
35227: LD_ADDR_VAR 0 4
35231: PUSH
35232: LD_VAR 0 2
35236: PPUSH
35237: CALL_OW 250
35241: ST_TO_ADDR
// y := GetY ( building ) ;
35242: LD_ADDR_VAR 0 5
35246: PUSH
35247: LD_VAR 0 2
35251: PPUSH
35252: CALL_OW 251
35256: ST_TO_ADDR
// if not building or not x or not y then
35257: LD_VAR 0 2
35261: NOT
35262: PUSH
35263: LD_VAR 0 4
35267: NOT
35268: OR
35269: PUSH
35270: LD_VAR 0 5
35274: NOT
35275: OR
35276: IFFALSE 35280
// exit ;
35278: GO 35372
// if GetTaskList ( unit ) then
35280: LD_VAR 0 1
35284: PPUSH
35285: CALL_OW 437
35289: IFFALSE 35372
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
35291: LD_STRING e
35293: PUSH
35294: LD_VAR 0 1
35298: PPUSH
35299: CALL_OW 437
35303: PUSH
35304: LD_INT 1
35306: ARRAY
35307: PUSH
35308: LD_INT 1
35310: ARRAY
35311: EQUAL
35312: PUSH
35313: LD_VAR 0 4
35317: PUSH
35318: LD_VAR 0 1
35322: PPUSH
35323: CALL_OW 437
35327: PUSH
35328: LD_INT 1
35330: ARRAY
35331: PUSH
35332: LD_INT 2
35334: ARRAY
35335: EQUAL
35336: AND
35337: PUSH
35338: LD_VAR 0 5
35342: PUSH
35343: LD_VAR 0 1
35347: PPUSH
35348: CALL_OW 437
35352: PUSH
35353: LD_INT 1
35355: ARRAY
35356: PUSH
35357: LD_INT 3
35359: ARRAY
35360: EQUAL
35361: AND
35362: IFFALSE 35372
// result := true end ;
35364: LD_ADDR_VAR 0 3
35368: PUSH
35369: LD_INT 1
35371: ST_TO_ADDR
// end ;
35372: LD_VAR 0 3
35376: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
35377: LD_INT 0
35379: PPUSH
// result := false ;
35380: LD_ADDR_VAR 0 4
35384: PUSH
35385: LD_INT 0
35387: ST_TO_ADDR
// if GetTaskList ( unit ) then
35388: LD_VAR 0 1
35392: PPUSH
35393: CALL_OW 437
35397: IFFALSE 35480
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
35399: LD_STRING M
35401: PUSH
35402: LD_VAR 0 1
35406: PPUSH
35407: CALL_OW 437
35411: PUSH
35412: LD_INT 1
35414: ARRAY
35415: PUSH
35416: LD_INT 1
35418: ARRAY
35419: EQUAL
35420: PUSH
35421: LD_VAR 0 2
35425: PUSH
35426: LD_VAR 0 1
35430: PPUSH
35431: CALL_OW 437
35435: PUSH
35436: LD_INT 1
35438: ARRAY
35439: PUSH
35440: LD_INT 2
35442: ARRAY
35443: EQUAL
35444: AND
35445: PUSH
35446: LD_VAR 0 3
35450: PUSH
35451: LD_VAR 0 1
35455: PPUSH
35456: CALL_OW 437
35460: PUSH
35461: LD_INT 1
35463: ARRAY
35464: PUSH
35465: LD_INT 3
35467: ARRAY
35468: EQUAL
35469: AND
35470: IFFALSE 35480
// result := true ;
35472: LD_ADDR_VAR 0 4
35476: PUSH
35477: LD_INT 1
35479: ST_TO_ADDR
// end ; end ;
35480: LD_VAR 0 4
35484: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
35485: LD_INT 0
35487: PPUSH
35488: PPUSH
35489: PPUSH
35490: PPUSH
// if not unit or not area then
35491: LD_VAR 0 1
35495: NOT
35496: PUSH
35497: LD_VAR 0 2
35501: NOT
35502: OR
35503: IFFALSE 35507
// exit ;
35505: GO 35671
// tmp := AreaToList ( area , i ) ;
35507: LD_ADDR_VAR 0 6
35511: PUSH
35512: LD_VAR 0 2
35516: PPUSH
35517: LD_VAR 0 5
35521: PPUSH
35522: CALL_OW 517
35526: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
35527: LD_ADDR_VAR 0 5
35531: PUSH
35532: DOUBLE
35533: LD_INT 1
35535: DEC
35536: ST_TO_ADDR
35537: LD_VAR 0 6
35541: PUSH
35542: LD_INT 1
35544: ARRAY
35545: PUSH
35546: FOR_TO
35547: IFFALSE 35669
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
35549: LD_ADDR_VAR 0 7
35553: PUSH
35554: LD_VAR 0 6
35558: PUSH
35559: LD_INT 1
35561: ARRAY
35562: PUSH
35563: LD_VAR 0 5
35567: ARRAY
35568: PUSH
35569: LD_VAR 0 6
35573: PUSH
35574: LD_INT 2
35576: ARRAY
35577: PUSH
35578: LD_VAR 0 5
35582: ARRAY
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
35588: LD_VAR 0 7
35592: PUSH
35593: LD_INT 1
35595: ARRAY
35596: PPUSH
35597: LD_VAR 0 7
35601: PUSH
35602: LD_INT 2
35604: ARRAY
35605: PPUSH
35606: CALL_OW 428
35610: PUSH
35611: LD_INT 0
35613: EQUAL
35614: IFFALSE 35667
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
35616: LD_VAR 0 1
35620: PPUSH
35621: LD_VAR 0 7
35625: PUSH
35626: LD_INT 1
35628: ARRAY
35629: PPUSH
35630: LD_VAR 0 7
35634: PUSH
35635: LD_INT 2
35637: ARRAY
35638: PPUSH
35639: LD_VAR 0 3
35643: PPUSH
35644: CALL_OW 48
// result := IsPlaced ( unit ) ;
35648: LD_ADDR_VAR 0 4
35652: PUSH
35653: LD_VAR 0 1
35657: PPUSH
35658: CALL_OW 305
35662: ST_TO_ADDR
// exit ;
35663: POP
35664: POP
35665: GO 35671
// end ; end ;
35667: GO 35546
35669: POP
35670: POP
// end ;
35671: LD_VAR 0 4
35675: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
35676: LD_INT 0
35678: PPUSH
35679: PPUSH
35680: PPUSH
// if not side or side > 8 then
35681: LD_VAR 0 1
35685: NOT
35686: PUSH
35687: LD_VAR 0 1
35691: PUSH
35692: LD_INT 8
35694: GREATER
35695: OR
35696: IFFALSE 35700
// exit ;
35698: GO 35887
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
35700: LD_ADDR_VAR 0 4
35704: PUSH
35705: LD_INT 22
35707: PUSH
35708: LD_VAR 0 1
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 21
35719: PUSH
35720: LD_INT 3
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PPUSH
35731: CALL_OW 69
35735: ST_TO_ADDR
// if not tmp then
35736: LD_VAR 0 4
35740: NOT
35741: IFFALSE 35745
// exit ;
35743: GO 35887
// enable_addtolog := true ;
35745: LD_ADDR_OWVAR 81
35749: PUSH
35750: LD_INT 1
35752: ST_TO_ADDR
// AddToLog ( [ ) ;
35753: LD_STRING [
35755: PPUSH
35756: CALL_OW 561
// for i in tmp do
35760: LD_ADDR_VAR 0 3
35764: PUSH
35765: LD_VAR 0 4
35769: PUSH
35770: FOR_IN
35771: IFFALSE 35878
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
35773: LD_STRING [
35775: PUSH
35776: LD_VAR 0 3
35780: PPUSH
35781: CALL_OW 266
35785: STR
35786: PUSH
35787: LD_STRING , 
35789: STR
35790: PUSH
35791: LD_VAR 0 3
35795: PPUSH
35796: CALL_OW 250
35800: STR
35801: PUSH
35802: LD_STRING , 
35804: STR
35805: PUSH
35806: LD_VAR 0 3
35810: PPUSH
35811: CALL_OW 251
35815: STR
35816: PUSH
35817: LD_STRING , 
35819: STR
35820: PUSH
35821: LD_VAR 0 3
35825: PPUSH
35826: CALL_OW 254
35830: STR
35831: PUSH
35832: LD_STRING , 
35834: STR
35835: PUSH
35836: LD_VAR 0 3
35840: PPUSH
35841: LD_INT 1
35843: PPUSH
35844: CALL_OW 268
35848: STR
35849: PUSH
35850: LD_STRING , 
35852: STR
35853: PUSH
35854: LD_VAR 0 3
35858: PPUSH
35859: LD_INT 2
35861: PPUSH
35862: CALL_OW 268
35866: STR
35867: PUSH
35868: LD_STRING ],
35870: STR
35871: PPUSH
35872: CALL_OW 561
// end ;
35876: GO 35770
35878: POP
35879: POP
// AddToLog ( ]; ) ;
35880: LD_STRING ];
35882: PPUSH
35883: CALL_OW 561
// end ;
35887: LD_VAR 0 2
35891: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
35892: LD_INT 0
35894: PPUSH
35895: PPUSH
35896: PPUSH
35897: PPUSH
35898: PPUSH
// if not area or not rate or not max then
35899: LD_VAR 0 1
35903: NOT
35904: PUSH
35905: LD_VAR 0 2
35909: NOT
35910: OR
35911: PUSH
35912: LD_VAR 0 4
35916: NOT
35917: OR
35918: IFFALSE 35922
// exit ;
35920: GO 36114
// while 1 do
35922: LD_INT 1
35924: IFFALSE 36114
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
35926: LD_ADDR_VAR 0 9
35930: PUSH
35931: LD_VAR 0 1
35935: PPUSH
35936: LD_INT 1
35938: PPUSH
35939: CALL_OW 287
35943: PUSH
35944: LD_INT 10
35946: MUL
35947: ST_TO_ADDR
// r := rate / 10 ;
35948: LD_ADDR_VAR 0 7
35952: PUSH
35953: LD_VAR 0 2
35957: PUSH
35958: LD_INT 10
35960: DIVREAL
35961: ST_TO_ADDR
// time := 1 1$00 ;
35962: LD_ADDR_VAR 0 8
35966: PUSH
35967: LD_INT 2100
35969: ST_TO_ADDR
// if amount < min then
35970: LD_VAR 0 9
35974: PUSH
35975: LD_VAR 0 3
35979: LESS
35980: IFFALSE 35998
// r := r * 2 else
35982: LD_ADDR_VAR 0 7
35986: PUSH
35987: LD_VAR 0 7
35991: PUSH
35992: LD_INT 2
35994: MUL
35995: ST_TO_ADDR
35996: GO 36024
// if amount > max then
35998: LD_VAR 0 9
36002: PUSH
36003: LD_VAR 0 4
36007: GREATER
36008: IFFALSE 36024
// r := r / 2 ;
36010: LD_ADDR_VAR 0 7
36014: PUSH
36015: LD_VAR 0 7
36019: PUSH
36020: LD_INT 2
36022: DIVREAL
36023: ST_TO_ADDR
// time := time / r ;
36024: LD_ADDR_VAR 0 8
36028: PUSH
36029: LD_VAR 0 8
36033: PUSH
36034: LD_VAR 0 7
36038: DIVREAL
36039: ST_TO_ADDR
// if time < 0 then
36040: LD_VAR 0 8
36044: PUSH
36045: LD_INT 0
36047: LESS
36048: IFFALSE 36065
// time := time * - 1 ;
36050: LD_ADDR_VAR 0 8
36054: PUSH
36055: LD_VAR 0 8
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: MUL
36064: ST_TO_ADDR
// wait ( time ) ;
36065: LD_VAR 0 8
36069: PPUSH
36070: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
36074: LD_INT 35
36076: PPUSH
36077: LD_INT 875
36079: PPUSH
36080: CALL_OW 12
36084: PPUSH
36085: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
36089: LD_INT 1
36091: PPUSH
36092: LD_INT 5
36094: PPUSH
36095: CALL_OW 12
36099: PPUSH
36100: LD_VAR 0 1
36104: PPUSH
36105: LD_INT 1
36107: PPUSH
36108: CALL_OW 55
// end ;
36112: GO 35922
// end ;
36114: LD_VAR 0 5
36118: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
36119: LD_INT 0
36121: PPUSH
36122: PPUSH
36123: PPUSH
36124: PPUSH
36125: PPUSH
36126: PPUSH
36127: PPUSH
36128: PPUSH
// if not turrets or not factories then
36129: LD_VAR 0 1
36133: NOT
36134: PUSH
36135: LD_VAR 0 2
36139: NOT
36140: OR
36141: IFFALSE 36145
// exit ;
36143: GO 36452
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
36145: LD_ADDR_VAR 0 10
36149: PUSH
36150: LD_INT 5
36152: PUSH
36153: LD_INT 6
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 2
36162: PUSH
36163: LD_INT 4
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 3
36172: PUSH
36173: LD_INT 5
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 24
36187: PUSH
36188: LD_INT 25
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 23
36197: PUSH
36198: LD_INT 27
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 42
36211: PUSH
36212: LD_INT 43
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 44
36221: PUSH
36222: LD_INT 46
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 45
36231: PUSH
36232: LD_INT 47
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: LIST
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: LIST
36248: ST_TO_ADDR
// result := [ ] ;
36249: LD_ADDR_VAR 0 3
36253: PUSH
36254: EMPTY
36255: ST_TO_ADDR
// for i in turrets do
36256: LD_ADDR_VAR 0 4
36260: PUSH
36261: LD_VAR 0 1
36265: PUSH
36266: FOR_IN
36267: IFFALSE 36450
// begin nat := GetNation ( i ) ;
36269: LD_ADDR_VAR 0 7
36273: PUSH
36274: LD_VAR 0 4
36278: PPUSH
36279: CALL_OW 248
36283: ST_TO_ADDR
// weapon := 0 ;
36284: LD_ADDR_VAR 0 8
36288: PUSH
36289: LD_INT 0
36291: ST_TO_ADDR
// if not nat then
36292: LD_VAR 0 7
36296: NOT
36297: IFFALSE 36301
// continue ;
36299: GO 36266
// for j in list [ nat ] do
36301: LD_ADDR_VAR 0 5
36305: PUSH
36306: LD_VAR 0 10
36310: PUSH
36311: LD_VAR 0 7
36315: ARRAY
36316: PUSH
36317: FOR_IN
36318: IFFALSE 36359
// if GetBWeapon ( i ) = j [ 1 ] then
36320: LD_VAR 0 4
36324: PPUSH
36325: CALL_OW 269
36329: PUSH
36330: LD_VAR 0 5
36334: PUSH
36335: LD_INT 1
36337: ARRAY
36338: EQUAL
36339: IFFALSE 36357
// begin weapon := j [ 2 ] ;
36341: LD_ADDR_VAR 0 8
36345: PUSH
36346: LD_VAR 0 5
36350: PUSH
36351: LD_INT 2
36353: ARRAY
36354: ST_TO_ADDR
// break ;
36355: GO 36359
// end ;
36357: GO 36317
36359: POP
36360: POP
// if not weapon then
36361: LD_VAR 0 8
36365: NOT
36366: IFFALSE 36370
// continue ;
36368: GO 36266
// for k in factories do
36370: LD_ADDR_VAR 0 6
36374: PUSH
36375: LD_VAR 0 2
36379: PUSH
36380: FOR_IN
36381: IFFALSE 36446
// begin weapons := AvailableWeaponList ( k ) ;
36383: LD_ADDR_VAR 0 9
36387: PUSH
36388: LD_VAR 0 6
36392: PPUSH
36393: CALL_OW 478
36397: ST_TO_ADDR
// if not weapons then
36398: LD_VAR 0 9
36402: NOT
36403: IFFALSE 36407
// continue ;
36405: GO 36380
// if weapon in weapons then
36407: LD_VAR 0 8
36411: PUSH
36412: LD_VAR 0 9
36416: IN
36417: IFFALSE 36444
// begin result := [ i , weapon ] ;
36419: LD_ADDR_VAR 0 3
36423: PUSH
36424: LD_VAR 0 4
36428: PUSH
36429: LD_VAR 0 8
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: ST_TO_ADDR
// exit ;
36438: POP
36439: POP
36440: POP
36441: POP
36442: GO 36452
// end ; end ;
36444: GO 36380
36446: POP
36447: POP
// end ;
36448: GO 36266
36450: POP
36451: POP
// end ;
36452: LD_VAR 0 3
36456: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
36457: LD_INT 0
36459: PPUSH
// if not side or side > 8 then
36460: LD_VAR 0 3
36464: NOT
36465: PUSH
36466: LD_VAR 0 3
36470: PUSH
36471: LD_INT 8
36473: GREATER
36474: OR
36475: IFFALSE 36479
// exit ;
36477: GO 36538
// if not range then
36479: LD_VAR 0 4
36483: NOT
36484: IFFALSE 36495
// range := - 12 ;
36486: LD_ADDR_VAR 0 4
36490: PUSH
36491: LD_INT 12
36493: NEG
36494: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
36495: LD_VAR 0 1
36499: PPUSH
36500: LD_VAR 0 2
36504: PPUSH
36505: LD_VAR 0 3
36509: PPUSH
36510: LD_VAR 0 4
36514: PPUSH
36515: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
36519: LD_VAR 0 1
36523: PPUSH
36524: LD_VAR 0 2
36528: PPUSH
36529: LD_VAR 0 3
36533: PPUSH
36534: CALL_OW 331
// end ;
36538: LD_VAR 0 5
36542: RET
// export function Video ( mode ) ; begin
36543: LD_INT 0
36545: PPUSH
// ingame_video = mode ;
36546: LD_ADDR_OWVAR 52
36550: PUSH
36551: LD_VAR 0 1
36555: ST_TO_ADDR
// interface_hidden = mode ;
36556: LD_ADDR_OWVAR 54
36560: PUSH
36561: LD_VAR 0 1
36565: ST_TO_ADDR
// end ;
36566: LD_VAR 0 2
36570: RET
// export function Join ( array , element ) ; begin
36571: LD_INT 0
36573: PPUSH
// result := Replace ( array , array + 1 , element ) ;
36574: LD_ADDR_VAR 0 3
36578: PUSH
36579: LD_VAR 0 1
36583: PPUSH
36584: LD_VAR 0 1
36588: PUSH
36589: LD_INT 1
36591: PLUS
36592: PPUSH
36593: LD_VAR 0 2
36597: PPUSH
36598: CALL_OW 1
36602: ST_TO_ADDR
// end ;
36603: LD_VAR 0 3
36607: RET
// export function JoinUnion ( array , element ) ; begin
36608: LD_INT 0
36610: PPUSH
// result := array union element ;
36611: LD_ADDR_VAR 0 3
36615: PUSH
36616: LD_VAR 0 1
36620: PUSH
36621: LD_VAR 0 2
36625: UNION
36626: ST_TO_ADDR
// end ;
36627: LD_VAR 0 3
36631: RET
// export function GetBehemoths ( side ) ; begin
36632: LD_INT 0
36634: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
36635: LD_ADDR_VAR 0 2
36639: PUSH
36640: LD_INT 22
36642: PUSH
36643: LD_VAR 0 1
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 31
36654: PUSH
36655: LD_INT 25
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PPUSH
36666: CALL_OW 69
36670: ST_TO_ADDR
// end ;
36671: LD_VAR 0 2
36675: RET
// export function Shuffle ( array ) ; var i , index ; begin
36676: LD_INT 0
36678: PPUSH
36679: PPUSH
36680: PPUSH
// result := [ ] ;
36681: LD_ADDR_VAR 0 2
36685: PUSH
36686: EMPTY
36687: ST_TO_ADDR
// if not array then
36688: LD_VAR 0 1
36692: NOT
36693: IFFALSE 36697
// exit ;
36695: GO 36796
// Randomize ;
36697: CALL_OW 10
// for i = array downto 1 do
36701: LD_ADDR_VAR 0 3
36705: PUSH
36706: DOUBLE
36707: LD_VAR 0 1
36711: INC
36712: ST_TO_ADDR
36713: LD_INT 1
36715: PUSH
36716: FOR_DOWNTO
36717: IFFALSE 36794
// begin index := rand ( 1 , array ) ;
36719: LD_ADDR_VAR 0 4
36723: PUSH
36724: LD_INT 1
36726: PPUSH
36727: LD_VAR 0 1
36731: PPUSH
36732: CALL_OW 12
36736: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
36737: LD_ADDR_VAR 0 2
36741: PUSH
36742: LD_VAR 0 2
36746: PPUSH
36747: LD_VAR 0 2
36751: PUSH
36752: LD_INT 1
36754: PLUS
36755: PPUSH
36756: LD_VAR 0 1
36760: PUSH
36761: LD_VAR 0 4
36765: ARRAY
36766: PPUSH
36767: CALL_OW 2
36771: ST_TO_ADDR
// array := Delete ( array , index ) ;
36772: LD_ADDR_VAR 0 1
36776: PUSH
36777: LD_VAR 0 1
36781: PPUSH
36782: LD_VAR 0 4
36786: PPUSH
36787: CALL_OW 3
36791: ST_TO_ADDR
// end ;
36792: GO 36716
36794: POP
36795: POP
// end ;
36796: LD_VAR 0 2
36800: RET
// export function GetBaseMaterials ( base ) ; begin
36801: LD_INT 0
36803: PPUSH
// result := [ 0 , 0 , 0 ] ;
36804: LD_ADDR_VAR 0 2
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: LD_INT 0
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: LIST
36822: ST_TO_ADDR
// if not base then
36823: LD_VAR 0 1
36827: NOT
36828: IFFALSE 36832
// exit ;
36830: GO 36881
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
36832: LD_ADDR_VAR 0 2
36836: PUSH
36837: LD_VAR 0 1
36841: PPUSH
36842: LD_INT 1
36844: PPUSH
36845: CALL_OW 275
36849: PUSH
36850: LD_VAR 0 1
36854: PPUSH
36855: LD_INT 2
36857: PPUSH
36858: CALL_OW 275
36862: PUSH
36863: LD_VAR 0 1
36867: PPUSH
36868: LD_INT 3
36870: PPUSH
36871: CALL_OW 275
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: LIST
36880: ST_TO_ADDR
// end ;
36881: LD_VAR 0 2
36885: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
36886: LD_INT 0
36888: PPUSH
36889: PPUSH
// result := array ;
36890: LD_ADDR_VAR 0 3
36894: PUSH
36895: LD_VAR 0 1
36899: ST_TO_ADDR
// if size > 0 then
36900: LD_VAR 0 2
36904: PUSH
36905: LD_INT 0
36907: GREATER
36908: IFFALSE 36954
// for i := array downto size do
36910: LD_ADDR_VAR 0 4
36914: PUSH
36915: DOUBLE
36916: LD_VAR 0 1
36920: INC
36921: ST_TO_ADDR
36922: LD_VAR 0 2
36926: PUSH
36927: FOR_DOWNTO
36928: IFFALSE 36952
// result := Delete ( result , result ) ;
36930: LD_ADDR_VAR 0 3
36934: PUSH
36935: LD_VAR 0 3
36939: PPUSH
36940: LD_VAR 0 3
36944: PPUSH
36945: CALL_OW 3
36949: ST_TO_ADDR
36950: GO 36927
36952: POP
36953: POP
// end ;
36954: LD_VAR 0 3
36958: RET
// export function ComExit ( unit ) ; var tmp ; begin
36959: LD_INT 0
36961: PPUSH
36962: PPUSH
// if not IsInUnit ( unit ) then
36963: LD_VAR 0 1
36967: PPUSH
36968: CALL_OW 310
36972: NOT
36973: IFFALSE 36977
// exit ;
36975: GO 37037
// tmp := IsInUnit ( unit ) ;
36977: LD_ADDR_VAR 0 3
36981: PUSH
36982: LD_VAR 0 1
36986: PPUSH
36987: CALL_OW 310
36991: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
36992: LD_VAR 0 3
36996: PPUSH
36997: CALL_OW 247
37001: PUSH
37002: LD_INT 2
37004: EQUAL
37005: IFFALSE 37018
// ComExitVehicle ( unit ) else
37007: LD_VAR 0 1
37011: PPUSH
37012: CALL_OW 121
37016: GO 37027
// ComExitBuilding ( unit ) ;
37018: LD_VAR 0 1
37022: PPUSH
37023: CALL_OW 122
// result := tmp ;
37027: LD_ADDR_VAR 0 2
37031: PUSH
37032: LD_VAR 0 3
37036: ST_TO_ADDR
// end ;
37037: LD_VAR 0 2
37041: RET
// export function ComExitAll ( units ) ; var i ; begin
37042: LD_INT 0
37044: PPUSH
37045: PPUSH
// if not units then
37046: LD_VAR 0 1
37050: NOT
37051: IFFALSE 37055
// exit ;
37053: GO 37081
// for i in units do
37055: LD_ADDR_VAR 0 3
37059: PUSH
37060: LD_VAR 0 1
37064: PUSH
37065: FOR_IN
37066: IFFALSE 37079
// ComExit ( i ) ;
37068: LD_VAR 0 3
37072: PPUSH
37073: CALL 36959 0 1
37077: GO 37065
37079: POP
37080: POP
// end ;
37081: LD_VAR 0 2
37085: RET
// export function ResetHc ; begin
37086: LD_INT 0
37088: PPUSH
// InitHc ;
37089: CALL_OW 19
// hc_importance := 0 ;
37093: LD_ADDR_OWVAR 32
37097: PUSH
37098: LD_INT 0
37100: ST_TO_ADDR
// end ;
37101: LD_VAR 0 1
37105: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
37106: LD_INT 0
37108: PPUSH
37109: PPUSH
37110: PPUSH
// _x := ( x1 + x2 ) div 2 ;
37111: LD_ADDR_VAR 0 6
37115: PUSH
37116: LD_VAR 0 1
37120: PUSH
37121: LD_VAR 0 3
37125: PLUS
37126: PUSH
37127: LD_INT 2
37129: DIV
37130: ST_TO_ADDR
// if _x < 0 then
37131: LD_VAR 0 6
37135: PUSH
37136: LD_INT 0
37138: LESS
37139: IFFALSE 37156
// _x := _x * - 1 ;
37141: LD_ADDR_VAR 0 6
37145: PUSH
37146: LD_VAR 0 6
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: MUL
37155: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
37156: LD_ADDR_VAR 0 7
37160: PUSH
37161: LD_VAR 0 2
37165: PUSH
37166: LD_VAR 0 4
37170: PLUS
37171: PUSH
37172: LD_INT 2
37174: DIV
37175: ST_TO_ADDR
// if _y < 0 then
37176: LD_VAR 0 7
37180: PUSH
37181: LD_INT 0
37183: LESS
37184: IFFALSE 37201
// _y := _y * - 1 ;
37186: LD_ADDR_VAR 0 7
37190: PUSH
37191: LD_VAR 0 7
37195: PUSH
37196: LD_INT 1
37198: NEG
37199: MUL
37200: ST_TO_ADDR
// result := [ _x , _y ] ;
37201: LD_ADDR_VAR 0 5
37205: PUSH
37206: LD_VAR 0 6
37210: PUSH
37211: LD_VAR 0 7
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: ST_TO_ADDR
// end ;
37220: LD_VAR 0 5
37224: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
37225: LD_INT 0
37227: PPUSH
37228: PPUSH
37229: PPUSH
37230: PPUSH
// task := GetTaskList ( unit ) ;
37231: LD_ADDR_VAR 0 7
37235: PUSH
37236: LD_VAR 0 1
37240: PPUSH
37241: CALL_OW 437
37245: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
37246: LD_VAR 0 7
37250: NOT
37251: PUSH
37252: LD_VAR 0 1
37256: PPUSH
37257: LD_VAR 0 2
37261: PPUSH
37262: CALL_OW 308
37266: NOT
37267: AND
37268: IFFALSE 37272
// exit ;
37270: GO 37390
// if IsInArea ( unit , area ) then
37272: LD_VAR 0 1
37276: PPUSH
37277: LD_VAR 0 2
37281: PPUSH
37282: CALL_OW 308
37286: IFFALSE 37304
// begin ComMoveToArea ( unit , goAway ) ;
37288: LD_VAR 0 1
37292: PPUSH
37293: LD_VAR 0 3
37297: PPUSH
37298: CALL_OW 113
// exit ;
37302: GO 37390
// end ; if task [ 1 ] [ 1 ] <> M then
37304: LD_VAR 0 7
37308: PUSH
37309: LD_INT 1
37311: ARRAY
37312: PUSH
37313: LD_INT 1
37315: ARRAY
37316: PUSH
37317: LD_STRING M
37319: NONEQUAL
37320: IFFALSE 37324
// exit ;
37322: GO 37390
// x := task [ 1 ] [ 2 ] ;
37324: LD_ADDR_VAR 0 5
37328: PUSH
37329: LD_VAR 0 7
37333: PUSH
37334: LD_INT 1
37336: ARRAY
37337: PUSH
37338: LD_INT 2
37340: ARRAY
37341: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
37342: LD_ADDR_VAR 0 6
37346: PUSH
37347: LD_VAR 0 7
37351: PUSH
37352: LD_INT 1
37354: ARRAY
37355: PUSH
37356: LD_INT 3
37358: ARRAY
37359: ST_TO_ADDR
// if InArea ( x , y , area ) then
37360: LD_VAR 0 5
37364: PPUSH
37365: LD_VAR 0 6
37369: PPUSH
37370: LD_VAR 0 2
37374: PPUSH
37375: CALL_OW 309
37379: IFFALSE 37390
// ComStop ( unit ) ;
37381: LD_VAR 0 1
37385: PPUSH
37386: CALL_OW 141
// end ;
37390: LD_VAR 0 4
37394: RET
// export function Abs ( value ) ; begin
37395: LD_INT 0
37397: PPUSH
// result := value ;
37398: LD_ADDR_VAR 0 2
37402: PUSH
37403: LD_VAR 0 1
37407: ST_TO_ADDR
// if value < 0 then
37408: LD_VAR 0 1
37412: PUSH
37413: LD_INT 0
37415: LESS
37416: IFFALSE 37433
// result := value * - 1 ;
37418: LD_ADDR_VAR 0 2
37422: PUSH
37423: LD_VAR 0 1
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: MUL
37432: ST_TO_ADDR
// end ;
37433: LD_VAR 0 2
37437: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
37438: LD_INT 0
37440: PPUSH
37441: PPUSH
37442: PPUSH
37443: PPUSH
37444: PPUSH
37445: PPUSH
37446: PPUSH
37447: PPUSH
// if not unit or not building then
37448: LD_VAR 0 1
37452: NOT
37453: PUSH
37454: LD_VAR 0 2
37458: NOT
37459: OR
37460: IFFALSE 37464
// exit ;
37462: GO 37690
// x := GetX ( building ) ;
37464: LD_ADDR_VAR 0 4
37468: PUSH
37469: LD_VAR 0 2
37473: PPUSH
37474: CALL_OW 250
37478: ST_TO_ADDR
// y := GetY ( building ) ;
37479: LD_ADDR_VAR 0 6
37483: PUSH
37484: LD_VAR 0 2
37488: PPUSH
37489: CALL_OW 251
37493: ST_TO_ADDR
// d := GetDir ( building ) ;
37494: LD_ADDR_VAR 0 8
37498: PUSH
37499: LD_VAR 0 2
37503: PPUSH
37504: CALL_OW 254
37508: ST_TO_ADDR
// r := 4 ;
37509: LD_ADDR_VAR 0 9
37513: PUSH
37514: LD_INT 4
37516: ST_TO_ADDR
// for i := 1 to 5 do
37517: LD_ADDR_VAR 0 10
37521: PUSH
37522: DOUBLE
37523: LD_INT 1
37525: DEC
37526: ST_TO_ADDR
37527: LD_INT 5
37529: PUSH
37530: FOR_TO
37531: IFFALSE 37688
// begin _x := ShiftX ( x , d , r + i ) ;
37533: LD_ADDR_VAR 0 5
37537: PUSH
37538: LD_VAR 0 4
37542: PPUSH
37543: LD_VAR 0 8
37547: PPUSH
37548: LD_VAR 0 9
37552: PUSH
37553: LD_VAR 0 10
37557: PLUS
37558: PPUSH
37559: CALL_OW 272
37563: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
37564: LD_ADDR_VAR 0 7
37568: PUSH
37569: LD_VAR 0 6
37573: PPUSH
37574: LD_VAR 0 8
37578: PPUSH
37579: LD_VAR 0 9
37583: PUSH
37584: LD_VAR 0 10
37588: PLUS
37589: PPUSH
37590: CALL_OW 273
37594: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
37595: LD_VAR 0 5
37599: PPUSH
37600: LD_VAR 0 7
37604: PPUSH
37605: CALL_OW 488
37609: PUSH
37610: LD_VAR 0 5
37614: PPUSH
37615: LD_VAR 0 7
37619: PPUSH
37620: CALL_OW 428
37624: PPUSH
37625: CALL_OW 247
37629: PUSH
37630: LD_INT 3
37632: PUSH
37633: LD_INT 2
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: IN
37640: NOT
37641: AND
37642: IFFALSE 37686
// begin ComMoveXY ( unit , _x , _y ) ;
37644: LD_VAR 0 1
37648: PPUSH
37649: LD_VAR 0 5
37653: PPUSH
37654: LD_VAR 0 7
37658: PPUSH
37659: CALL_OW 111
// result := [ _x , _y ] ;
37663: LD_ADDR_VAR 0 3
37667: PUSH
37668: LD_VAR 0 5
37672: PUSH
37673: LD_VAR 0 7
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: ST_TO_ADDR
// exit ;
37682: POP
37683: POP
37684: GO 37690
// end ; end ;
37686: GO 37530
37688: POP
37689: POP
// end ;
37690: LD_VAR 0 3
37694: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
37695: LD_INT 0
37697: PPUSH
37698: PPUSH
37699: PPUSH
// result := 0 ;
37700: LD_ADDR_VAR 0 3
37704: PUSH
37705: LD_INT 0
37707: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
37708: LD_VAR 0 1
37712: PUSH
37713: LD_INT 0
37715: LESS
37716: PUSH
37717: LD_VAR 0 1
37721: PUSH
37722: LD_INT 8
37724: GREATER
37725: OR
37726: PUSH
37727: LD_VAR 0 2
37731: PUSH
37732: LD_INT 0
37734: LESS
37735: OR
37736: PUSH
37737: LD_VAR 0 2
37741: PUSH
37742: LD_INT 8
37744: GREATER
37745: OR
37746: IFFALSE 37750
// exit ;
37748: GO 37825
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
37750: LD_ADDR_VAR 0 4
37754: PUSH
37755: LD_INT 22
37757: PUSH
37758: LD_VAR 0 2
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PPUSH
37767: CALL_OW 69
37771: PUSH
37772: FOR_IN
37773: IFFALSE 37823
// begin un := UnitShoot ( i ) ;
37775: LD_ADDR_VAR 0 5
37779: PUSH
37780: LD_VAR 0 4
37784: PPUSH
37785: CALL_OW 504
37789: ST_TO_ADDR
// if GetSide ( un ) = side1 then
37790: LD_VAR 0 5
37794: PPUSH
37795: CALL_OW 255
37799: PUSH
37800: LD_VAR 0 1
37804: EQUAL
37805: IFFALSE 37821
// begin result := un ;
37807: LD_ADDR_VAR 0 3
37811: PUSH
37812: LD_VAR 0 5
37816: ST_TO_ADDR
// exit ;
37817: POP
37818: POP
37819: GO 37825
// end ; end ;
37821: GO 37772
37823: POP
37824: POP
// end ;
37825: LD_VAR 0 3
37829: RET
// export function GetCargoBay ( units ) ; begin
37830: LD_INT 0
37832: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
37833: LD_ADDR_VAR 0 2
37837: PUSH
37838: LD_VAR 0 1
37842: PPUSH
37843: LD_INT 2
37845: PUSH
37846: LD_INT 34
37848: PUSH
37849: LD_INT 12
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 34
37858: PUSH
37859: LD_INT 51
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 34
37868: PUSH
37869: LD_INT 32
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 34
37878: PUSH
37879: LD_EXP 4
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: PPUSH
37895: CALL_OW 72
37899: ST_TO_ADDR
// end ; end_of_file
37900: LD_VAR 0 2
37904: RET
// export ecoSide , ecoNation , ecoPeopleAmount , ecoStartPoint , ecoCratesDrop , ecoCratesDropXY ; export function InitEcoMode ( startPoint , cratesDropXY ) ; var i , tmp , side , nation , peopleAmount , resourcesAmount ; begin
37905: LD_INT 0
37907: PPUSH
37908: PPUSH
37909: PPUSH
37910: PPUSH
37911: PPUSH
37912: PPUSH
37913: PPUSH
// ecoStartPoint := startPoint ;
37914: LD_ADDR_EXP 25
37918: PUSH
37919: LD_VAR 0 1
37923: ST_TO_ADDR
// CenterNowOnXY ( ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
37924: LD_EXP 25
37928: PUSH
37929: LD_INT 1
37931: ARRAY
37932: PPUSH
37933: LD_EXP 25
37937: PUSH
37938: LD_INT 2
37940: ARRAY
37941: PPUSH
37942: CALL_OW 86
// ToLua ( ShowEcoButton(); ) ;
37946: LD_STRING ShowEcoButton();
37948: PPUSH
37949: CALL_OW 559
// ecoCratesDropXY := cratesDropXY ;
37953: LD_ADDR_EXP 27
37957: PUSH
37958: LD_VAR 0 2
37962: ST_TO_ADDR
// if debug then
37963: LD_EXP 1
37967: IFFALSE 38011
// begin side := 1 ;
37969: LD_ADDR_VAR 0 6
37973: PUSH
37974: LD_INT 1
37976: ST_TO_ADDR
// nation := 1 ;
37977: LD_ADDR_VAR 0 7
37981: PUSH
37982: LD_INT 1
37984: ST_TO_ADDR
// peopleAmount := 15 ;
37985: LD_ADDR_VAR 0 8
37989: PUSH
37990: LD_INT 15
37992: ST_TO_ADDR
// resourcesAmount := 2 ;
37993: LD_ADDR_VAR 0 9
37997: PUSH
37998: LD_INT 2
38000: ST_TO_ADDR
// ecoCratesDrop := 3 ;
38001: LD_ADDR_EXP 26
38005: PUSH
38006: LD_INT 3
38008: ST_TO_ADDR
// end else
38009: GO 38127
// begin side := GetMultiplayerSetting ( 1 ) + 1 ;
38011: LD_ADDR_VAR 0 6
38015: PUSH
38016: LD_INT 1
38018: PPUSH
38019: CALL_OW 426
38023: PUSH
38024: LD_INT 1
38026: PLUS
38027: ST_TO_ADDR
// nation := GetMultiplayerSetting ( 2 ) + 1 ;
38028: LD_ADDR_VAR 0 7
38032: PUSH
38033: LD_INT 2
38035: PPUSH
38036: CALL_OW 426
38040: PUSH
38041: LD_INT 1
38043: PLUS
38044: ST_TO_ADDR
// peopleAmount := [ 6 , 9 , 12 , 15 , 18 , 21 , 24 ] [ GetMultiplayerSetting ( 3 ) + 1 ] ;
38045: LD_ADDR_VAR 0 8
38049: PUSH
38050: LD_INT 6
38052: PUSH
38053: LD_INT 9
38055: PUSH
38056: LD_INT 12
38058: PUSH
38059: LD_INT 15
38061: PUSH
38062: LD_INT 18
38064: PUSH
38065: LD_INT 21
38067: PUSH
38068: LD_INT 24
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 3
38082: PPUSH
38083: CALL_OW 426
38087: PUSH
38088: LD_INT 1
38090: PLUS
38091: ARRAY
38092: ST_TO_ADDR
// resourcesAmount := GetMultiplayerSetting ( 4 ) + 1 ;
38093: LD_ADDR_VAR 0 9
38097: PUSH
38098: LD_INT 4
38100: PPUSH
38101: CALL_OW 426
38105: PUSH
38106: LD_INT 1
38108: PLUS
38109: ST_TO_ADDR
// ecoCratesDrop := GetMultiplayerSetting ( 5 ) + 1 ;
38110: LD_ADDR_EXP 26
38114: PUSH
38115: LD_INT 5
38117: PPUSH
38118: CALL_OW 426
38122: PUSH
38123: LD_INT 1
38125: PLUS
38126: ST_TO_ADDR
// end ; ecoSide := side ;
38127: LD_ADDR_EXP 22
38131: PUSH
38132: LD_VAR 0 6
38136: ST_TO_ADDR
// your_side := side ;
38137: LD_ADDR_OWVAR 2
38141: PUSH
38142: LD_VAR 0 6
38146: ST_TO_ADDR
// ChangeSideFog ( 1 , side ) ;
38147: LD_INT 1
38149: PPUSH
38150: LD_VAR 0 6
38154: PPUSH
38155: CALL_OW 343
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
38159: LD_INT 1
38161: PPUSH
38162: LD_INT 1
38164: PPUSH
38165: LD_VAR 0 6
38169: PPUSH
38170: LD_INT 32793
38172: NEG
38173: PPUSH
38174: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
38178: LD_INT 1
38180: PPUSH
38181: LD_INT 1
38183: PPUSH
38184: LD_VAR 0 6
38188: PPUSH
38189: CALL_OW 331
// ecoNation := nation ;
38193: LD_ADDR_EXP 23
38197: PUSH
38198: LD_VAR 0 7
38202: ST_TO_ADDR
// ecoPeopleAmount := peopleAmount ;
38203: LD_ADDR_EXP 24
38207: PUSH
38208: LD_VAR 0 8
38212: ST_TO_ADDR
// for i = 1 to resourcesAmount * 5 do
38213: LD_ADDR_VAR 0 4
38217: PUSH
38218: DOUBLE
38219: LD_INT 1
38221: DEC
38222: ST_TO_ADDR
38223: LD_VAR 0 9
38227: PUSH
38228: LD_INT 5
38230: MUL
38231: PUSH
38232: FOR_TO
38233: IFFALSE 38271
// CreateResourcesXYR ( mat_cans , 5 , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 6 , false ) ;
38235: LD_INT 1
38237: PPUSH
38238: LD_INT 5
38240: PPUSH
38241: LD_EXP 25
38245: PUSH
38246: LD_INT 1
38248: ARRAY
38249: PPUSH
38250: LD_EXP 25
38254: PUSH
38255: LD_INT 2
38257: ARRAY
38258: PPUSH
38259: LD_INT 6
38261: PPUSH
38262: LD_INT 0
38264: PPUSH
38265: CALL_OW 60
38269: GO 38232
38271: POP
38272: POP
// uc_side := side ;
38273: LD_ADDR_OWVAR 20
38277: PUSH
38278: LD_VAR 0 6
38282: ST_TO_ADDR
// uc_nation := nation ;
38283: LD_ADDR_OWVAR 21
38287: PUSH
38288: LD_VAR 0 7
38292: ST_TO_ADDR
// hc_importance := 100 ;
38293: LD_ADDR_OWVAR 32
38297: PUSH
38298: LD_INT 100
38300: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
38301: LD_INT 0
38303: PPUSH
38304: LD_INT 1
38306: PPUSH
38307: LD_INT 4
38309: PPUSH
38310: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
38314: CALL_OW 44
38318: PPUSH
38319: LD_EXP 25
38323: PUSH
38324: LD_INT 1
38326: ARRAY
38327: PPUSH
38328: LD_EXP 25
38332: PUSH
38333: LD_INT 2
38335: ARRAY
38336: PPUSH
38337: LD_INT 12
38339: PPUSH
38340: LD_INT 0
38342: PPUSH
38343: CALL_OW 50
// InitHc_All ( ) ;
38347: CALL_OW 584
// for i = 1 to peopleAmount - 1 do
38351: LD_ADDR_VAR 0 4
38355: PUSH
38356: DOUBLE
38357: LD_INT 1
38359: DEC
38360: ST_TO_ADDR
38361: LD_VAR 0 8
38365: PUSH
38366: LD_INT 1
38368: MINUS
38369: PUSH
38370: FOR_TO
38371: IFFALSE 38466
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
38373: LD_INT 0
38375: PPUSH
38376: LD_VAR 0 4
38380: PUSH
38381: LD_INT 4
38383: MOD
38384: PUSH
38385: LD_INT 1
38387: PLUS
38388: PPUSH
38389: LD_INT 3
38391: PPUSH
38392: CALL_OW 380
// tmp := Replace ( tmp , tmp + 1 , CreateHuman ) ;
38396: LD_ADDR_VAR 0 5
38400: PUSH
38401: LD_VAR 0 5
38405: PPUSH
38406: LD_VAR 0 5
38410: PUSH
38411: LD_INT 1
38413: PLUS
38414: PPUSH
38415: CALL_OW 44
38419: PPUSH
38420: CALL_OW 1
38424: ST_TO_ADDR
// PlaceUnitXYR ( tmp [ tmp ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
38425: LD_VAR 0 5
38429: PUSH
38430: LD_VAR 0 5
38434: ARRAY
38435: PPUSH
38436: LD_EXP 25
38440: PUSH
38441: LD_INT 1
38443: ARRAY
38444: PPUSH
38445: LD_EXP 25
38449: PUSH
38450: LD_INT 2
38452: ARRAY
38453: PPUSH
38454: LD_INT 12
38456: PPUSH
38457: LD_INT 0
38459: PPUSH
38460: CALL_OW 50
// end ;
38464: GO 38370
38466: POP
38467: POP
// end ;
38468: LD_VAR 0 3
38472: RET
// every 0 0$1 trigger ecoCratesDrop and ecoCratesDropXY do var time , xy ;
38473: LD_EXP 26
38477: PUSH
38478: LD_EXP 27
38482: AND
38483: IFFALSE 38627
38485: GO 38487
38487: DISABLE
38488: LD_INT 0
38490: PPUSH
38491: PPUSH
// begin time := [ 0 0$30 , 0 0$20 , 0 0$10 ] [ ecoCratesDrop ] ;
38492: LD_ADDR_VAR 0 1
38496: PUSH
38497: LD_INT 1050
38499: PUSH
38500: LD_INT 700
38502: PUSH
38503: LD_INT 350
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: LIST
38510: PUSH
38511: LD_EXP 26
38515: ARRAY
38516: ST_TO_ADDR
// while true do
38517: LD_INT 1
38519: IFFALSE 38627
// begin wait ( time ) ;
38521: LD_VAR 0 1
38525: PPUSH
38526: CALL_OW 67
// time := time + 0 0$3 ;
38530: LD_ADDR_VAR 0 1
38534: PUSH
38535: LD_VAR 0 1
38539: PUSH
38540: LD_INT 105
38542: PLUS
38543: ST_TO_ADDR
// if time > 1 1$00 then
38544: LD_VAR 0 1
38548: PUSH
38549: LD_INT 2100
38551: GREATER
38552: IFFALSE 38562
// time := 0 0$30 ;
38554: LD_ADDR_VAR 0 1
38558: PUSH
38559: LD_INT 1050
38561: ST_TO_ADDR
// xy := ecoCratesDropXY [ rand ( 1 , ecoCratesDropXY ) ] ;
38562: LD_ADDR_VAR 0 2
38566: PUSH
38567: LD_EXP 27
38571: PUSH
38572: LD_INT 1
38574: PPUSH
38575: LD_EXP 27
38579: PPUSH
38580: CALL_OW 12
38584: ARRAY
38585: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , xy [ 1 ] , xy [ 2 ] , 6 , true ) ;
38586: LD_INT 1
38588: PPUSH
38589: LD_INT 5
38591: PPUSH
38592: CALL_OW 12
38596: PPUSH
38597: LD_VAR 0 2
38601: PUSH
38602: LD_INT 1
38604: ARRAY
38605: PPUSH
38606: LD_VAR 0 2
38610: PUSH
38611: LD_INT 2
38613: ARRAY
38614: PPUSH
38615: LD_INT 6
38617: PPUSH
38618: LD_INT 1
38620: PPUSH
38621: CALL_OW 56
// end ;
38625: GO 38517
// end ;
38627: PPOPN 2
38629: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
38630: LD_VAR 0 1
38634: PPUSH
38635: LD_VAR 0 2
38639: PPUSH
38640: LD_VAR 0 3
38644: PPUSH
38645: LD_VAR 0 4
38649: PPUSH
38650: LD_VAR 0 5
38654: PPUSH
38655: LD_VAR 0 6
38659: PPUSH
38660: CALL 38667 0 6
// end ; end_of_file
38664: PPOPN 6
38666: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
38667: LD_INT 0
38669: PPUSH
// if p2 = 100 then
38670: LD_VAR 0 2
38674: PUSH
38675: LD_INT 100
38677: EQUAL
38678: IFFALSE 39627
// begin if not StreamModeActive then
38680: LD_EXP 28
38684: NOT
38685: IFFALSE 38695
// StreamModeActive := true ;
38687: LD_ADDR_EXP 28
38691: PUSH
38692: LD_INT 1
38694: ST_TO_ADDR
// if p3 = 0 then
38695: LD_VAR 0 3
38699: PUSH
38700: LD_INT 0
38702: EQUAL
38703: IFFALSE 38709
// InitStreamMode ;
38705: CALL 39787 0 0
// if p3 = 1 then
38709: LD_VAR 0 3
38713: PUSH
38714: LD_INT 1
38716: EQUAL
38717: IFFALSE 38727
// sRocket := true ;
38719: LD_ADDR_EXP 33
38723: PUSH
38724: LD_INT 1
38726: ST_TO_ADDR
// if p3 = 2 then
38727: LD_VAR 0 3
38731: PUSH
38732: LD_INT 2
38734: EQUAL
38735: IFFALSE 38745
// sSpeed := true ;
38737: LD_ADDR_EXP 32
38741: PUSH
38742: LD_INT 1
38744: ST_TO_ADDR
// if p3 = 3 then
38745: LD_VAR 0 3
38749: PUSH
38750: LD_INT 3
38752: EQUAL
38753: IFFALSE 38763
// sEngine := true ;
38755: LD_ADDR_EXP 34
38759: PUSH
38760: LD_INT 1
38762: ST_TO_ADDR
// if p3 = 4 then
38763: LD_VAR 0 3
38767: PUSH
38768: LD_INT 4
38770: EQUAL
38771: IFFALSE 38781
// sSpec := true ;
38773: LD_ADDR_EXP 31
38777: PUSH
38778: LD_INT 1
38780: ST_TO_ADDR
// if p3 = 5 then
38781: LD_VAR 0 3
38785: PUSH
38786: LD_INT 5
38788: EQUAL
38789: IFFALSE 38799
// sLevel := true ;
38791: LD_ADDR_EXP 35
38795: PUSH
38796: LD_INT 1
38798: ST_TO_ADDR
// if p3 = 6 then
38799: LD_VAR 0 3
38803: PUSH
38804: LD_INT 6
38806: EQUAL
38807: IFFALSE 38817
// sArmoury := true ;
38809: LD_ADDR_EXP 36
38813: PUSH
38814: LD_INT 1
38816: ST_TO_ADDR
// if p3 = 7 then
38817: LD_VAR 0 3
38821: PUSH
38822: LD_INT 7
38824: EQUAL
38825: IFFALSE 38835
// sRadar := true ;
38827: LD_ADDR_EXP 37
38831: PUSH
38832: LD_INT 1
38834: ST_TO_ADDR
// if p3 = 8 then
38835: LD_VAR 0 3
38839: PUSH
38840: LD_INT 8
38842: EQUAL
38843: IFFALSE 38853
// sBunker := true ;
38845: LD_ADDR_EXP 38
38849: PUSH
38850: LD_INT 1
38852: ST_TO_ADDR
// if p3 = 9 then
38853: LD_VAR 0 3
38857: PUSH
38858: LD_INT 9
38860: EQUAL
38861: IFFALSE 38871
// sHack := true ;
38863: LD_ADDR_EXP 39
38867: PUSH
38868: LD_INT 1
38870: ST_TO_ADDR
// if p3 = 10 then
38871: LD_VAR 0 3
38875: PUSH
38876: LD_INT 10
38878: EQUAL
38879: IFFALSE 38889
// sFire := true ;
38881: LD_ADDR_EXP 40
38885: PUSH
38886: LD_INT 1
38888: ST_TO_ADDR
// if p3 = 11 then
38889: LD_VAR 0 3
38893: PUSH
38894: LD_INT 11
38896: EQUAL
38897: IFFALSE 38907
// sRefresh := true ;
38899: LD_ADDR_EXP 41
38903: PUSH
38904: LD_INT 1
38906: ST_TO_ADDR
// if p3 = 12 then
38907: LD_VAR 0 3
38911: PUSH
38912: LD_INT 12
38914: EQUAL
38915: IFFALSE 38925
// sExp := true ;
38917: LD_ADDR_EXP 42
38921: PUSH
38922: LD_INT 1
38924: ST_TO_ADDR
// if p3 = 13 then
38925: LD_VAR 0 3
38929: PUSH
38930: LD_INT 13
38932: EQUAL
38933: IFFALSE 38943
// sDepot := true ;
38935: LD_ADDR_EXP 43
38939: PUSH
38940: LD_INT 1
38942: ST_TO_ADDR
// if p3 = 14 then
38943: LD_VAR 0 3
38947: PUSH
38948: LD_INT 14
38950: EQUAL
38951: IFFALSE 38961
// sFlag := true ;
38953: LD_ADDR_EXP 44
38957: PUSH
38958: LD_INT 1
38960: ST_TO_ADDR
// if p3 = 15 then
38961: LD_VAR 0 3
38965: PUSH
38966: LD_INT 15
38968: EQUAL
38969: IFFALSE 38979
// sKamikadze := true ;
38971: LD_ADDR_EXP 52
38975: PUSH
38976: LD_INT 1
38978: ST_TO_ADDR
// if p3 = 16 then
38979: LD_VAR 0 3
38983: PUSH
38984: LD_INT 16
38986: EQUAL
38987: IFFALSE 38997
// sTroll := true ;
38989: LD_ADDR_EXP 53
38993: PUSH
38994: LD_INT 1
38996: ST_TO_ADDR
// if p3 = 17 then
38997: LD_VAR 0 3
39001: PUSH
39002: LD_INT 17
39004: EQUAL
39005: IFFALSE 39015
// sSlow := true ;
39007: LD_ADDR_EXP 54
39011: PUSH
39012: LD_INT 1
39014: ST_TO_ADDR
// if p3 = 18 then
39015: LD_VAR 0 3
39019: PUSH
39020: LD_INT 18
39022: EQUAL
39023: IFFALSE 39033
// sLack := true ;
39025: LD_ADDR_EXP 55
39029: PUSH
39030: LD_INT 1
39032: ST_TO_ADDR
// if p3 = 19 then
39033: LD_VAR 0 3
39037: PUSH
39038: LD_INT 19
39040: EQUAL
39041: IFFALSE 39051
// sTank := true ;
39043: LD_ADDR_EXP 57
39047: PUSH
39048: LD_INT 1
39050: ST_TO_ADDR
// if p3 = 20 then
39051: LD_VAR 0 3
39055: PUSH
39056: LD_INT 20
39058: EQUAL
39059: IFFALSE 39069
// sRemote := true ;
39061: LD_ADDR_EXP 58
39065: PUSH
39066: LD_INT 1
39068: ST_TO_ADDR
// if p3 = 21 then
39069: LD_VAR 0 3
39073: PUSH
39074: LD_INT 21
39076: EQUAL
39077: IFFALSE 39087
// sPowell := true ;
39079: LD_ADDR_EXP 59
39083: PUSH
39084: LD_INT 1
39086: ST_TO_ADDR
// if p3 = 22 then
39087: LD_VAR 0 3
39091: PUSH
39092: LD_INT 22
39094: EQUAL
39095: IFFALSE 39105
// sTeleport := true ;
39097: LD_ADDR_EXP 62
39101: PUSH
39102: LD_INT 1
39104: ST_TO_ADDR
// if p3 = 23 then
39105: LD_VAR 0 3
39109: PUSH
39110: LD_INT 23
39112: EQUAL
39113: IFFALSE 39123
// sOilTower := true ;
39115: LD_ADDR_EXP 64
39119: PUSH
39120: LD_INT 1
39122: ST_TO_ADDR
// if p3 = 24 then
39123: LD_VAR 0 3
39127: PUSH
39128: LD_INT 24
39130: EQUAL
39131: IFFALSE 39141
// sShovel := true ;
39133: LD_ADDR_EXP 65
39137: PUSH
39138: LD_INT 1
39140: ST_TO_ADDR
// if p3 = 25 then
39141: LD_VAR 0 3
39145: PUSH
39146: LD_INT 25
39148: EQUAL
39149: IFFALSE 39159
// sSheik := true ;
39151: LD_ADDR_EXP 66
39155: PUSH
39156: LD_INT 1
39158: ST_TO_ADDR
// if p3 = 26 then
39159: LD_VAR 0 3
39163: PUSH
39164: LD_INT 26
39166: EQUAL
39167: IFFALSE 39177
// sEarthquake := true ;
39169: LD_ADDR_EXP 68
39173: PUSH
39174: LD_INT 1
39176: ST_TO_ADDR
// if p3 = 27 then
39177: LD_VAR 0 3
39181: PUSH
39182: LD_INT 27
39184: EQUAL
39185: IFFALSE 39195
// sAI := true ;
39187: LD_ADDR_EXP 69
39191: PUSH
39192: LD_INT 1
39194: ST_TO_ADDR
// if p3 = 28 then
39195: LD_VAR 0 3
39199: PUSH
39200: LD_INT 28
39202: EQUAL
39203: IFFALSE 39213
// sCargo := true ;
39205: LD_ADDR_EXP 72
39209: PUSH
39210: LD_INT 1
39212: ST_TO_ADDR
// if p3 = 29 then
39213: LD_VAR 0 3
39217: PUSH
39218: LD_INT 29
39220: EQUAL
39221: IFFALSE 39231
// sDLaser := true ;
39223: LD_ADDR_EXP 73
39227: PUSH
39228: LD_INT 1
39230: ST_TO_ADDR
// if p3 = 30 then
39231: LD_VAR 0 3
39235: PUSH
39236: LD_INT 30
39238: EQUAL
39239: IFFALSE 39249
// sExchange := true ;
39241: LD_ADDR_EXP 74
39245: PUSH
39246: LD_INT 1
39248: ST_TO_ADDR
// if p3 = 31 then
39249: LD_VAR 0 3
39253: PUSH
39254: LD_INT 31
39256: EQUAL
39257: IFFALSE 39267
// sFac := true ;
39259: LD_ADDR_EXP 75
39263: PUSH
39264: LD_INT 1
39266: ST_TO_ADDR
// if p3 = 32 then
39267: LD_VAR 0 3
39271: PUSH
39272: LD_INT 32
39274: EQUAL
39275: IFFALSE 39285
// sPower := true ;
39277: LD_ADDR_EXP 76
39281: PUSH
39282: LD_INT 1
39284: ST_TO_ADDR
// if p3 = 33 then
39285: LD_VAR 0 3
39289: PUSH
39290: LD_INT 33
39292: EQUAL
39293: IFFALSE 39303
// sRandom := true ;
39295: LD_ADDR_EXP 77
39299: PUSH
39300: LD_INT 1
39302: ST_TO_ADDR
// if p3 = 34 then
39303: LD_VAR 0 3
39307: PUSH
39308: LD_INT 34
39310: EQUAL
39311: IFFALSE 39321
// sShield := true ;
39313: LD_ADDR_EXP 78
39317: PUSH
39318: LD_INT 1
39320: ST_TO_ADDR
// if p3 = 35 then
39321: LD_VAR 0 3
39325: PUSH
39326: LD_INT 35
39328: EQUAL
39329: IFFALSE 39339
// sTime := true ;
39331: LD_ADDR_EXP 79
39335: PUSH
39336: LD_INT 1
39338: ST_TO_ADDR
// if p3 = 36 then
39339: LD_VAR 0 3
39343: PUSH
39344: LD_INT 36
39346: EQUAL
39347: IFFALSE 39357
// sTools := true ;
39349: LD_ADDR_EXP 80
39353: PUSH
39354: LD_INT 1
39356: ST_TO_ADDR
// if p3 = 101 then
39357: LD_VAR 0 3
39361: PUSH
39362: LD_INT 101
39364: EQUAL
39365: IFFALSE 39375
// sSold := true ;
39367: LD_ADDR_EXP 45
39371: PUSH
39372: LD_INT 1
39374: ST_TO_ADDR
// if p3 = 102 then
39375: LD_VAR 0 3
39379: PUSH
39380: LD_INT 102
39382: EQUAL
39383: IFFALSE 39393
// sDiff := true ;
39385: LD_ADDR_EXP 46
39389: PUSH
39390: LD_INT 1
39392: ST_TO_ADDR
// if p3 = 103 then
39393: LD_VAR 0 3
39397: PUSH
39398: LD_INT 103
39400: EQUAL
39401: IFFALSE 39411
// sFog := true ;
39403: LD_ADDR_EXP 49
39407: PUSH
39408: LD_INT 1
39410: ST_TO_ADDR
// if p3 = 104 then
39411: LD_VAR 0 3
39415: PUSH
39416: LD_INT 104
39418: EQUAL
39419: IFFALSE 39429
// sReset := true ;
39421: LD_ADDR_EXP 50
39425: PUSH
39426: LD_INT 1
39428: ST_TO_ADDR
// if p3 = 105 then
39429: LD_VAR 0 3
39433: PUSH
39434: LD_INT 105
39436: EQUAL
39437: IFFALSE 39447
// sSun := true ;
39439: LD_ADDR_EXP 51
39443: PUSH
39444: LD_INT 1
39446: ST_TO_ADDR
// if p3 = 106 then
39447: LD_VAR 0 3
39451: PUSH
39452: LD_INT 106
39454: EQUAL
39455: IFFALSE 39465
// sTiger := true ;
39457: LD_ADDR_EXP 47
39461: PUSH
39462: LD_INT 1
39464: ST_TO_ADDR
// if p3 = 107 then
39465: LD_VAR 0 3
39469: PUSH
39470: LD_INT 107
39472: EQUAL
39473: IFFALSE 39483
// sBomb := true ;
39475: LD_ADDR_EXP 48
39479: PUSH
39480: LD_INT 1
39482: ST_TO_ADDR
// if p3 = 108 then
39483: LD_VAR 0 3
39487: PUSH
39488: LD_INT 108
39490: EQUAL
39491: IFFALSE 39501
// sWound := true ;
39493: LD_ADDR_EXP 56
39497: PUSH
39498: LD_INT 1
39500: ST_TO_ADDR
// if p3 = 109 then
39501: LD_VAR 0 3
39505: PUSH
39506: LD_INT 109
39508: EQUAL
39509: IFFALSE 39519
// sBetray := true ;
39511: LD_ADDR_EXP 60
39515: PUSH
39516: LD_INT 1
39518: ST_TO_ADDR
// if p3 = 110 then
39519: LD_VAR 0 3
39523: PUSH
39524: LD_INT 110
39526: EQUAL
39527: IFFALSE 39537
// sContamin := true ;
39529: LD_ADDR_EXP 61
39533: PUSH
39534: LD_INT 1
39536: ST_TO_ADDR
// if p3 = 111 then
39537: LD_VAR 0 3
39541: PUSH
39542: LD_INT 111
39544: EQUAL
39545: IFFALSE 39555
// sOil := true ;
39547: LD_ADDR_EXP 63
39551: PUSH
39552: LD_INT 1
39554: ST_TO_ADDR
// if p3 = 112 then
39555: LD_VAR 0 3
39559: PUSH
39560: LD_INT 112
39562: EQUAL
39563: IFFALSE 39573
// sStu := true ;
39565: LD_ADDR_EXP 67
39569: PUSH
39570: LD_INT 1
39572: ST_TO_ADDR
// if p3 = 113 then
39573: LD_VAR 0 3
39577: PUSH
39578: LD_INT 113
39580: EQUAL
39581: IFFALSE 39591
// sBazooka := true ;
39583: LD_ADDR_EXP 70
39587: PUSH
39588: LD_INT 1
39590: ST_TO_ADDR
// if p3 = 114 then
39591: LD_VAR 0 3
39595: PUSH
39596: LD_INT 114
39598: EQUAL
39599: IFFALSE 39609
// sMortar := true ;
39601: LD_ADDR_EXP 71
39605: PUSH
39606: LD_INT 1
39608: ST_TO_ADDR
// if p3 = 115 then
39609: LD_VAR 0 3
39613: PUSH
39614: LD_INT 115
39616: EQUAL
39617: IFFALSE 39627
// sRanger := true ;
39619: LD_ADDR_EXP 81
39623: PUSH
39624: LD_INT 1
39626: ST_TO_ADDR
// end ; if p2 = 101 then
39627: LD_VAR 0 2
39631: PUSH
39632: LD_INT 101
39634: EQUAL
39635: IFFALSE 39763
// begin case p3 of 1 :
39637: LD_VAR 0 3
39641: PUSH
39642: LD_INT 1
39644: DOUBLE
39645: EQUAL
39646: IFTRUE 39650
39648: GO 39657
39650: POP
// hHackUnlimitedResources ; 2 :
39651: CALL 50800 0 0
39655: GO 39763
39657: LD_INT 2
39659: DOUBLE
39660: EQUAL
39661: IFTRUE 39665
39663: GO 39672
39665: POP
// hHackSetLevel10 ; 3 :
39666: CALL 50933 0 0
39670: GO 39763
39672: LD_INT 3
39674: DOUBLE
39675: EQUAL
39676: IFTRUE 39680
39678: GO 39687
39680: POP
// hHackSetLevel10YourUnits ; 4 :
39681: CALL 51018 0 0
39685: GO 39763
39687: LD_INT 4
39689: DOUBLE
39690: EQUAL
39691: IFTRUE 39695
39693: GO 39702
39695: POP
// hHackInvincible ; 5 :
39696: CALL 51466 0 0
39700: GO 39763
39702: LD_INT 5
39704: DOUBLE
39705: EQUAL
39706: IFTRUE 39710
39708: GO 39717
39710: POP
// hHackInvisible ; 6 :
39711: CALL 51577 0 0
39715: GO 39763
39717: LD_INT 6
39719: DOUBLE
39720: EQUAL
39721: IFTRUE 39725
39723: GO 39732
39725: POP
// hHackChangeYourSide ; 7 :
39726: CALL 51634 0 0
39730: GO 39763
39732: LD_INT 7
39734: DOUBLE
39735: EQUAL
39736: IFTRUE 39740
39738: GO 39747
39740: POP
// hHackChangeUnitSide ; 8 :
39741: CALL 51676 0 0
39745: GO 39763
39747: LD_INT 8
39749: DOUBLE
39750: EQUAL
39751: IFTRUE 39755
39753: GO 39762
39755: POP
// hHackFog ; end ;
39756: CALL 51777 0 0
39760: GO 39763
39762: POP
// end ; end ;
39763: LD_VAR 0 7
39767: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
39768: GO 39770
39770: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
39771: LD_STRING initStreamRollete();
39773: PPUSH
39774: CALL_OW 559
// InitStreamMode ;
39778: CALL 39787 0 0
// DefineStreamItems ( ) ;
39782: CALL 40227 0 0
// end ;
39786: END
// function InitStreamMode ; begin
39787: LD_INT 0
39789: PPUSH
// streamModeActive := false ;
39790: LD_ADDR_EXP 28
39794: PUSH
39795: LD_INT 0
39797: ST_TO_ADDR
// normalCounter := 36 ;
39798: LD_ADDR_EXP 29
39802: PUSH
39803: LD_INT 36
39805: ST_TO_ADDR
// hardcoreCounter := 16 ;
39806: LD_ADDR_EXP 30
39810: PUSH
39811: LD_INT 16
39813: ST_TO_ADDR
// sRocket := false ;
39814: LD_ADDR_EXP 33
39818: PUSH
39819: LD_INT 0
39821: ST_TO_ADDR
// sSpeed := false ;
39822: LD_ADDR_EXP 32
39826: PUSH
39827: LD_INT 0
39829: ST_TO_ADDR
// sEngine := false ;
39830: LD_ADDR_EXP 34
39834: PUSH
39835: LD_INT 0
39837: ST_TO_ADDR
// sSpec := false ;
39838: LD_ADDR_EXP 31
39842: PUSH
39843: LD_INT 0
39845: ST_TO_ADDR
// sLevel := false ;
39846: LD_ADDR_EXP 35
39850: PUSH
39851: LD_INT 0
39853: ST_TO_ADDR
// sArmoury := false ;
39854: LD_ADDR_EXP 36
39858: PUSH
39859: LD_INT 0
39861: ST_TO_ADDR
// sRadar := false ;
39862: LD_ADDR_EXP 37
39866: PUSH
39867: LD_INT 0
39869: ST_TO_ADDR
// sBunker := false ;
39870: LD_ADDR_EXP 38
39874: PUSH
39875: LD_INT 0
39877: ST_TO_ADDR
// sHack := false ;
39878: LD_ADDR_EXP 39
39882: PUSH
39883: LD_INT 0
39885: ST_TO_ADDR
// sFire := false ;
39886: LD_ADDR_EXP 40
39890: PUSH
39891: LD_INT 0
39893: ST_TO_ADDR
// sRefresh := false ;
39894: LD_ADDR_EXP 41
39898: PUSH
39899: LD_INT 0
39901: ST_TO_ADDR
// sExp := false ;
39902: LD_ADDR_EXP 42
39906: PUSH
39907: LD_INT 0
39909: ST_TO_ADDR
// sDepot := false ;
39910: LD_ADDR_EXP 43
39914: PUSH
39915: LD_INT 0
39917: ST_TO_ADDR
// sFlag := false ;
39918: LD_ADDR_EXP 44
39922: PUSH
39923: LD_INT 0
39925: ST_TO_ADDR
// sKamikadze := false ;
39926: LD_ADDR_EXP 52
39930: PUSH
39931: LD_INT 0
39933: ST_TO_ADDR
// sTroll := false ;
39934: LD_ADDR_EXP 53
39938: PUSH
39939: LD_INT 0
39941: ST_TO_ADDR
// sSlow := false ;
39942: LD_ADDR_EXP 54
39946: PUSH
39947: LD_INT 0
39949: ST_TO_ADDR
// sLack := false ;
39950: LD_ADDR_EXP 55
39954: PUSH
39955: LD_INT 0
39957: ST_TO_ADDR
// sTank := false ;
39958: LD_ADDR_EXP 57
39962: PUSH
39963: LD_INT 0
39965: ST_TO_ADDR
// sRemote := false ;
39966: LD_ADDR_EXP 58
39970: PUSH
39971: LD_INT 0
39973: ST_TO_ADDR
// sPowell := false ;
39974: LD_ADDR_EXP 59
39978: PUSH
39979: LD_INT 0
39981: ST_TO_ADDR
// sTeleport := false ;
39982: LD_ADDR_EXP 62
39986: PUSH
39987: LD_INT 0
39989: ST_TO_ADDR
// sOilTower := false ;
39990: LD_ADDR_EXP 64
39994: PUSH
39995: LD_INT 0
39997: ST_TO_ADDR
// sShovel := false ;
39998: LD_ADDR_EXP 65
40002: PUSH
40003: LD_INT 0
40005: ST_TO_ADDR
// sSheik := false ;
40006: LD_ADDR_EXP 66
40010: PUSH
40011: LD_INT 0
40013: ST_TO_ADDR
// sEarthquake := false ;
40014: LD_ADDR_EXP 68
40018: PUSH
40019: LD_INT 0
40021: ST_TO_ADDR
// sAI := false ;
40022: LD_ADDR_EXP 69
40026: PUSH
40027: LD_INT 0
40029: ST_TO_ADDR
// sCargo := false ;
40030: LD_ADDR_EXP 72
40034: PUSH
40035: LD_INT 0
40037: ST_TO_ADDR
// sDLaser := false ;
40038: LD_ADDR_EXP 73
40042: PUSH
40043: LD_INT 0
40045: ST_TO_ADDR
// sExchange := false ;
40046: LD_ADDR_EXP 74
40050: PUSH
40051: LD_INT 0
40053: ST_TO_ADDR
// sFac := false ;
40054: LD_ADDR_EXP 75
40058: PUSH
40059: LD_INT 0
40061: ST_TO_ADDR
// sPower := false ;
40062: LD_ADDR_EXP 76
40066: PUSH
40067: LD_INT 0
40069: ST_TO_ADDR
// sRandom := false ;
40070: LD_ADDR_EXP 77
40074: PUSH
40075: LD_INT 0
40077: ST_TO_ADDR
// sShield := false ;
40078: LD_ADDR_EXP 78
40082: PUSH
40083: LD_INT 0
40085: ST_TO_ADDR
// sTime := false ;
40086: LD_ADDR_EXP 79
40090: PUSH
40091: LD_INT 0
40093: ST_TO_ADDR
// sTools := false ;
40094: LD_ADDR_EXP 80
40098: PUSH
40099: LD_INT 0
40101: ST_TO_ADDR
// sSold := false ;
40102: LD_ADDR_EXP 45
40106: PUSH
40107: LD_INT 0
40109: ST_TO_ADDR
// sDiff := false ;
40110: LD_ADDR_EXP 46
40114: PUSH
40115: LD_INT 0
40117: ST_TO_ADDR
// sFog := false ;
40118: LD_ADDR_EXP 49
40122: PUSH
40123: LD_INT 0
40125: ST_TO_ADDR
// sReset := false ;
40126: LD_ADDR_EXP 50
40130: PUSH
40131: LD_INT 0
40133: ST_TO_ADDR
// sSun := false ;
40134: LD_ADDR_EXP 51
40138: PUSH
40139: LD_INT 0
40141: ST_TO_ADDR
// sTiger := false ;
40142: LD_ADDR_EXP 47
40146: PUSH
40147: LD_INT 0
40149: ST_TO_ADDR
// sBomb := false ;
40150: LD_ADDR_EXP 48
40154: PUSH
40155: LD_INT 0
40157: ST_TO_ADDR
// sWound := false ;
40158: LD_ADDR_EXP 56
40162: PUSH
40163: LD_INT 0
40165: ST_TO_ADDR
// sBetray := false ;
40166: LD_ADDR_EXP 60
40170: PUSH
40171: LD_INT 0
40173: ST_TO_ADDR
// sContamin := false ;
40174: LD_ADDR_EXP 61
40178: PUSH
40179: LD_INT 0
40181: ST_TO_ADDR
// sOil := false ;
40182: LD_ADDR_EXP 63
40186: PUSH
40187: LD_INT 0
40189: ST_TO_ADDR
// sStu := false ;
40190: LD_ADDR_EXP 67
40194: PUSH
40195: LD_INT 0
40197: ST_TO_ADDR
// sBazooka := false ;
40198: LD_ADDR_EXP 70
40202: PUSH
40203: LD_INT 0
40205: ST_TO_ADDR
// sMortar := false ;
40206: LD_ADDR_EXP 71
40210: PUSH
40211: LD_INT 0
40213: ST_TO_ADDR
// sRanger := false ;
40214: LD_ADDR_EXP 81
40218: PUSH
40219: LD_INT 0
40221: ST_TO_ADDR
// end ;
40222: LD_VAR 0 1
40226: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
40227: LD_INT 0
40229: PPUSH
40230: PPUSH
40231: PPUSH
40232: PPUSH
40233: PPUSH
// result := [ ] ;
40234: LD_ADDR_VAR 0 1
40238: PUSH
40239: EMPTY
40240: ST_TO_ADDR
// if campaign_id = 1 then
40241: LD_OWVAR 69
40245: PUSH
40246: LD_INT 1
40248: EQUAL
40249: IFFALSE 43187
// begin case mission_number of 1 :
40251: LD_OWVAR 70
40255: PUSH
40256: LD_INT 1
40258: DOUBLE
40259: EQUAL
40260: IFTRUE 40264
40262: GO 40328
40264: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
40265: LD_ADDR_VAR 0 1
40269: PUSH
40270: LD_INT 2
40272: PUSH
40273: LD_INT 4
40275: PUSH
40276: LD_INT 11
40278: PUSH
40279: LD_INT 12
40281: PUSH
40282: LD_INT 15
40284: PUSH
40285: LD_INT 16
40287: PUSH
40288: LD_INT 22
40290: PUSH
40291: LD_INT 23
40293: PUSH
40294: LD_INT 26
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 101
40310: PUSH
40311: LD_INT 102
40313: PUSH
40314: LD_INT 106
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: LIST
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: ST_TO_ADDR
40326: GO 43185
40328: LD_INT 2
40330: DOUBLE
40331: EQUAL
40332: IFTRUE 40336
40334: GO 40408
40336: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
40337: LD_ADDR_VAR 0 1
40341: PUSH
40342: LD_INT 2
40344: PUSH
40345: LD_INT 4
40347: PUSH
40348: LD_INT 11
40350: PUSH
40351: LD_INT 12
40353: PUSH
40354: LD_INT 15
40356: PUSH
40357: LD_INT 16
40359: PUSH
40360: LD_INT 22
40362: PUSH
40363: LD_INT 23
40365: PUSH
40366: LD_INT 26
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 101
40382: PUSH
40383: LD_INT 102
40385: PUSH
40386: LD_INT 105
40388: PUSH
40389: LD_INT 106
40391: PUSH
40392: LD_INT 108
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: ST_TO_ADDR
40406: GO 43185
40408: LD_INT 3
40410: DOUBLE
40411: EQUAL
40412: IFTRUE 40416
40414: GO 40492
40416: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
40417: LD_ADDR_VAR 0 1
40421: PUSH
40422: LD_INT 2
40424: PUSH
40425: LD_INT 4
40427: PUSH
40428: LD_INT 5
40430: PUSH
40431: LD_INT 11
40433: PUSH
40434: LD_INT 12
40436: PUSH
40437: LD_INT 15
40439: PUSH
40440: LD_INT 16
40442: PUSH
40443: LD_INT 22
40445: PUSH
40446: LD_INT 26
40448: PUSH
40449: LD_INT 36
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 101
40466: PUSH
40467: LD_INT 102
40469: PUSH
40470: LD_INT 105
40472: PUSH
40473: LD_INT 106
40475: PUSH
40476: LD_INT 108
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: ST_TO_ADDR
40490: GO 43185
40492: LD_INT 4
40494: DOUBLE
40495: EQUAL
40496: IFTRUE 40500
40498: GO 40584
40500: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
40501: LD_ADDR_VAR 0 1
40505: PUSH
40506: LD_INT 2
40508: PUSH
40509: LD_INT 4
40511: PUSH
40512: LD_INT 5
40514: PUSH
40515: LD_INT 8
40517: PUSH
40518: LD_INT 11
40520: PUSH
40521: LD_INT 12
40523: PUSH
40524: LD_INT 15
40526: PUSH
40527: LD_INT 16
40529: PUSH
40530: LD_INT 22
40532: PUSH
40533: LD_INT 23
40535: PUSH
40536: LD_INT 26
40538: PUSH
40539: LD_INT 36
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 101
40558: PUSH
40559: LD_INT 102
40561: PUSH
40562: LD_INT 105
40564: PUSH
40565: LD_INT 106
40567: PUSH
40568: LD_INT 108
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: ST_TO_ADDR
40582: GO 43185
40584: LD_INT 5
40586: DOUBLE
40587: EQUAL
40588: IFTRUE 40592
40590: GO 40692
40592: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
40593: LD_ADDR_VAR 0 1
40597: PUSH
40598: LD_INT 2
40600: PUSH
40601: LD_INT 4
40603: PUSH
40604: LD_INT 5
40606: PUSH
40607: LD_INT 6
40609: PUSH
40610: LD_INT 8
40612: PUSH
40613: LD_INT 11
40615: PUSH
40616: LD_INT 12
40618: PUSH
40619: LD_INT 15
40621: PUSH
40622: LD_INT 16
40624: PUSH
40625: LD_INT 22
40627: PUSH
40628: LD_INT 23
40630: PUSH
40631: LD_INT 25
40633: PUSH
40634: LD_INT 26
40636: PUSH
40637: LD_INT 36
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 101
40658: PUSH
40659: LD_INT 102
40661: PUSH
40662: LD_INT 105
40664: PUSH
40665: LD_INT 106
40667: PUSH
40668: LD_INT 108
40670: PUSH
40671: LD_INT 109
40673: PUSH
40674: LD_INT 112
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: ST_TO_ADDR
40690: GO 43185
40692: LD_INT 6
40694: DOUBLE
40695: EQUAL
40696: IFTRUE 40700
40698: GO 40820
40700: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
40701: LD_ADDR_VAR 0 1
40705: PUSH
40706: LD_INT 2
40708: PUSH
40709: LD_INT 4
40711: PUSH
40712: LD_INT 5
40714: PUSH
40715: LD_INT 6
40717: PUSH
40718: LD_INT 8
40720: PUSH
40721: LD_INT 11
40723: PUSH
40724: LD_INT 12
40726: PUSH
40727: LD_INT 15
40729: PUSH
40730: LD_INT 16
40732: PUSH
40733: LD_INT 20
40735: PUSH
40736: LD_INT 21
40738: PUSH
40739: LD_INT 22
40741: PUSH
40742: LD_INT 23
40744: PUSH
40745: LD_INT 25
40747: PUSH
40748: LD_INT 26
40750: PUSH
40751: LD_INT 30
40753: PUSH
40754: LD_INT 31
40756: PUSH
40757: LD_INT 32
40759: PUSH
40760: LD_INT 36
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 101
40786: PUSH
40787: LD_INT 102
40789: PUSH
40790: LD_INT 105
40792: PUSH
40793: LD_INT 106
40795: PUSH
40796: LD_INT 108
40798: PUSH
40799: LD_INT 109
40801: PUSH
40802: LD_INT 112
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: ST_TO_ADDR
40818: GO 43185
40820: LD_INT 7
40822: DOUBLE
40823: EQUAL
40824: IFTRUE 40828
40826: GO 40928
40828: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
40829: LD_ADDR_VAR 0 1
40833: PUSH
40834: LD_INT 2
40836: PUSH
40837: LD_INT 4
40839: PUSH
40840: LD_INT 5
40842: PUSH
40843: LD_INT 7
40845: PUSH
40846: LD_INT 11
40848: PUSH
40849: LD_INT 12
40851: PUSH
40852: LD_INT 15
40854: PUSH
40855: LD_INT 16
40857: PUSH
40858: LD_INT 20
40860: PUSH
40861: LD_INT 21
40863: PUSH
40864: LD_INT 22
40866: PUSH
40867: LD_INT 23
40869: PUSH
40870: LD_INT 25
40872: PUSH
40873: LD_INT 26
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 101
40894: PUSH
40895: LD_INT 102
40897: PUSH
40898: LD_INT 103
40900: PUSH
40901: LD_INT 105
40903: PUSH
40904: LD_INT 106
40906: PUSH
40907: LD_INT 108
40909: PUSH
40910: LD_INT 112
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: ST_TO_ADDR
40926: GO 43185
40928: LD_INT 8
40930: DOUBLE
40931: EQUAL
40932: IFTRUE 40936
40934: GO 41064
40936: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
40937: LD_ADDR_VAR 0 1
40941: PUSH
40942: LD_INT 2
40944: PUSH
40945: LD_INT 4
40947: PUSH
40948: LD_INT 5
40950: PUSH
40951: LD_INT 6
40953: PUSH
40954: LD_INT 7
40956: PUSH
40957: LD_INT 8
40959: PUSH
40960: LD_INT 11
40962: PUSH
40963: LD_INT 12
40965: PUSH
40966: LD_INT 15
40968: PUSH
40969: LD_INT 16
40971: PUSH
40972: LD_INT 20
40974: PUSH
40975: LD_INT 21
40977: PUSH
40978: LD_INT 22
40980: PUSH
40981: LD_INT 23
40983: PUSH
40984: LD_INT 25
40986: PUSH
40987: LD_INT 26
40989: PUSH
40990: LD_INT 30
40992: PUSH
40993: LD_INT 31
40995: PUSH
40996: LD_INT 32
40998: PUSH
40999: LD_INT 36
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 101
41026: PUSH
41027: LD_INT 102
41029: PUSH
41030: LD_INT 103
41032: PUSH
41033: LD_INT 105
41035: PUSH
41036: LD_INT 106
41038: PUSH
41039: LD_INT 108
41041: PUSH
41042: LD_INT 109
41044: PUSH
41045: LD_INT 112
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: ST_TO_ADDR
41062: GO 43185
41064: LD_INT 9
41066: DOUBLE
41067: EQUAL
41068: IFTRUE 41072
41070: GO 41208
41072: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
41073: LD_ADDR_VAR 0 1
41077: PUSH
41078: LD_INT 2
41080: PUSH
41081: LD_INT 4
41083: PUSH
41084: LD_INT 5
41086: PUSH
41087: LD_INT 6
41089: PUSH
41090: LD_INT 7
41092: PUSH
41093: LD_INT 8
41095: PUSH
41096: LD_INT 11
41098: PUSH
41099: LD_INT 12
41101: PUSH
41102: LD_INT 15
41104: PUSH
41105: LD_INT 16
41107: PUSH
41108: LD_INT 20
41110: PUSH
41111: LD_INT 21
41113: PUSH
41114: LD_INT 22
41116: PUSH
41117: LD_INT 23
41119: PUSH
41120: LD_INT 25
41122: PUSH
41123: LD_INT 26
41125: PUSH
41126: LD_INT 28
41128: PUSH
41129: LD_INT 30
41131: PUSH
41132: LD_INT 31
41134: PUSH
41135: LD_INT 32
41137: PUSH
41138: LD_INT 36
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 101
41166: PUSH
41167: LD_INT 102
41169: PUSH
41170: LD_INT 103
41172: PUSH
41173: LD_INT 105
41175: PUSH
41176: LD_INT 106
41178: PUSH
41179: LD_INT 108
41181: PUSH
41182: LD_INT 109
41184: PUSH
41185: LD_INT 112
41187: PUSH
41188: LD_INT 114
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: ST_TO_ADDR
41206: GO 43185
41208: LD_INT 10
41210: DOUBLE
41211: EQUAL
41212: IFTRUE 41216
41214: GO 41400
41216: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
41217: LD_ADDR_VAR 0 1
41221: PUSH
41222: LD_INT 2
41224: PUSH
41225: LD_INT 4
41227: PUSH
41228: LD_INT 5
41230: PUSH
41231: LD_INT 6
41233: PUSH
41234: LD_INT 7
41236: PUSH
41237: LD_INT 8
41239: PUSH
41240: LD_INT 9
41242: PUSH
41243: LD_INT 10
41245: PUSH
41246: LD_INT 11
41248: PUSH
41249: LD_INT 12
41251: PUSH
41252: LD_INT 13
41254: PUSH
41255: LD_INT 14
41257: PUSH
41258: LD_INT 15
41260: PUSH
41261: LD_INT 16
41263: PUSH
41264: LD_INT 17
41266: PUSH
41267: LD_INT 18
41269: PUSH
41270: LD_INT 19
41272: PUSH
41273: LD_INT 20
41275: PUSH
41276: LD_INT 21
41278: PUSH
41279: LD_INT 22
41281: PUSH
41282: LD_INT 23
41284: PUSH
41285: LD_INT 24
41287: PUSH
41288: LD_INT 25
41290: PUSH
41291: LD_INT 26
41293: PUSH
41294: LD_INT 28
41296: PUSH
41297: LD_INT 30
41299: PUSH
41300: LD_INT 31
41302: PUSH
41303: LD_INT 32
41305: PUSH
41306: LD_INT 36
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 101
41342: PUSH
41343: LD_INT 102
41345: PUSH
41346: LD_INT 103
41348: PUSH
41349: LD_INT 104
41351: PUSH
41352: LD_INT 105
41354: PUSH
41355: LD_INT 106
41357: PUSH
41358: LD_INT 107
41360: PUSH
41361: LD_INT 108
41363: PUSH
41364: LD_INT 109
41366: PUSH
41367: LD_INT 110
41369: PUSH
41370: LD_INT 111
41372: PUSH
41373: LD_INT 112
41375: PUSH
41376: LD_INT 114
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: ST_TO_ADDR
41398: GO 43185
41400: LD_INT 11
41402: DOUBLE
41403: EQUAL
41404: IFTRUE 41408
41406: GO 41600
41408: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
41409: LD_ADDR_VAR 0 1
41413: PUSH
41414: LD_INT 2
41416: PUSH
41417: LD_INT 3
41419: PUSH
41420: LD_INT 4
41422: PUSH
41423: LD_INT 5
41425: PUSH
41426: LD_INT 6
41428: PUSH
41429: LD_INT 7
41431: PUSH
41432: LD_INT 8
41434: PUSH
41435: LD_INT 9
41437: PUSH
41438: LD_INT 10
41440: PUSH
41441: LD_INT 11
41443: PUSH
41444: LD_INT 12
41446: PUSH
41447: LD_INT 13
41449: PUSH
41450: LD_INT 14
41452: PUSH
41453: LD_INT 15
41455: PUSH
41456: LD_INT 16
41458: PUSH
41459: LD_INT 17
41461: PUSH
41462: LD_INT 18
41464: PUSH
41465: LD_INT 19
41467: PUSH
41468: LD_INT 20
41470: PUSH
41471: LD_INT 21
41473: PUSH
41474: LD_INT 22
41476: PUSH
41477: LD_INT 23
41479: PUSH
41480: LD_INT 24
41482: PUSH
41483: LD_INT 25
41485: PUSH
41486: LD_INT 26
41488: PUSH
41489: LD_INT 28
41491: PUSH
41492: LD_INT 30
41494: PUSH
41495: LD_INT 31
41497: PUSH
41498: LD_INT 32
41500: PUSH
41501: LD_INT 34
41503: PUSH
41504: LD_INT 36
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 101
41542: PUSH
41543: LD_INT 102
41545: PUSH
41546: LD_INT 103
41548: PUSH
41549: LD_INT 104
41551: PUSH
41552: LD_INT 105
41554: PUSH
41555: LD_INT 106
41557: PUSH
41558: LD_INT 107
41560: PUSH
41561: LD_INT 108
41563: PUSH
41564: LD_INT 109
41566: PUSH
41567: LD_INT 110
41569: PUSH
41570: LD_INT 111
41572: PUSH
41573: LD_INT 112
41575: PUSH
41576: LD_INT 114
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: ST_TO_ADDR
41598: GO 43185
41600: LD_INT 12
41602: DOUBLE
41603: EQUAL
41604: IFTRUE 41608
41606: GO 41816
41608: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
41609: LD_ADDR_VAR 0 1
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: LD_INT 2
41619: PUSH
41620: LD_INT 3
41622: PUSH
41623: LD_INT 4
41625: PUSH
41626: LD_INT 5
41628: PUSH
41629: LD_INT 6
41631: PUSH
41632: LD_INT 7
41634: PUSH
41635: LD_INT 8
41637: PUSH
41638: LD_INT 9
41640: PUSH
41641: LD_INT 10
41643: PUSH
41644: LD_INT 11
41646: PUSH
41647: LD_INT 12
41649: PUSH
41650: LD_INT 13
41652: PUSH
41653: LD_INT 14
41655: PUSH
41656: LD_INT 15
41658: PUSH
41659: LD_INT 16
41661: PUSH
41662: LD_INT 17
41664: PUSH
41665: LD_INT 18
41667: PUSH
41668: LD_INT 19
41670: PUSH
41671: LD_INT 20
41673: PUSH
41674: LD_INT 21
41676: PUSH
41677: LD_INT 22
41679: PUSH
41680: LD_INT 23
41682: PUSH
41683: LD_INT 24
41685: PUSH
41686: LD_INT 25
41688: PUSH
41689: LD_INT 26
41691: PUSH
41692: LD_INT 27
41694: PUSH
41695: LD_INT 28
41697: PUSH
41698: LD_INT 30
41700: PUSH
41701: LD_INT 31
41703: PUSH
41704: LD_INT 32
41706: PUSH
41707: LD_INT 33
41709: PUSH
41710: LD_INT 34
41712: PUSH
41713: LD_INT 36
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 101
41754: PUSH
41755: LD_INT 102
41757: PUSH
41758: LD_INT 103
41760: PUSH
41761: LD_INT 104
41763: PUSH
41764: LD_INT 105
41766: PUSH
41767: LD_INT 106
41769: PUSH
41770: LD_INT 107
41772: PUSH
41773: LD_INT 108
41775: PUSH
41776: LD_INT 109
41778: PUSH
41779: LD_INT 110
41781: PUSH
41782: LD_INT 111
41784: PUSH
41785: LD_INT 112
41787: PUSH
41788: LD_INT 113
41790: PUSH
41791: LD_INT 114
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: ST_TO_ADDR
41814: GO 43185
41816: LD_INT 13
41818: DOUBLE
41819: EQUAL
41820: IFTRUE 41824
41822: GO 42020
41824: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
41825: LD_ADDR_VAR 0 1
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: LD_INT 2
41835: PUSH
41836: LD_INT 3
41838: PUSH
41839: LD_INT 4
41841: PUSH
41842: LD_INT 5
41844: PUSH
41845: LD_INT 8
41847: PUSH
41848: LD_INT 9
41850: PUSH
41851: LD_INT 10
41853: PUSH
41854: LD_INT 11
41856: PUSH
41857: LD_INT 12
41859: PUSH
41860: LD_INT 14
41862: PUSH
41863: LD_INT 15
41865: PUSH
41866: LD_INT 16
41868: PUSH
41869: LD_INT 17
41871: PUSH
41872: LD_INT 18
41874: PUSH
41875: LD_INT 19
41877: PUSH
41878: LD_INT 20
41880: PUSH
41881: LD_INT 21
41883: PUSH
41884: LD_INT 22
41886: PUSH
41887: LD_INT 23
41889: PUSH
41890: LD_INT 24
41892: PUSH
41893: LD_INT 25
41895: PUSH
41896: LD_INT 26
41898: PUSH
41899: LD_INT 27
41901: PUSH
41902: LD_INT 28
41904: PUSH
41905: LD_INT 30
41907: PUSH
41908: LD_INT 31
41910: PUSH
41911: LD_INT 32
41913: PUSH
41914: LD_INT 33
41916: PUSH
41917: LD_INT 34
41919: PUSH
41920: LD_INT 36
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 101
41958: PUSH
41959: LD_INT 102
41961: PUSH
41962: LD_INT 103
41964: PUSH
41965: LD_INT 104
41967: PUSH
41968: LD_INT 105
41970: PUSH
41971: LD_INT 106
41973: PUSH
41974: LD_INT 107
41976: PUSH
41977: LD_INT 108
41979: PUSH
41980: LD_INT 109
41982: PUSH
41983: LD_INT 110
41985: PUSH
41986: LD_INT 111
41988: PUSH
41989: LD_INT 112
41991: PUSH
41992: LD_INT 113
41994: PUSH
41995: LD_INT 114
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: ST_TO_ADDR
42018: GO 43185
42020: LD_INT 14
42022: DOUBLE
42023: EQUAL
42024: IFTRUE 42028
42026: GO 42240
42028: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
42029: LD_ADDR_VAR 0 1
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: LD_INT 2
42039: PUSH
42040: LD_INT 3
42042: PUSH
42043: LD_INT 4
42045: PUSH
42046: LD_INT 5
42048: PUSH
42049: LD_INT 6
42051: PUSH
42052: LD_INT 7
42054: PUSH
42055: LD_INT 8
42057: PUSH
42058: LD_INT 9
42060: PUSH
42061: LD_INT 10
42063: PUSH
42064: LD_INT 11
42066: PUSH
42067: LD_INT 12
42069: PUSH
42070: LD_INT 13
42072: PUSH
42073: LD_INT 14
42075: PUSH
42076: LD_INT 15
42078: PUSH
42079: LD_INT 16
42081: PUSH
42082: LD_INT 17
42084: PUSH
42085: LD_INT 18
42087: PUSH
42088: LD_INT 19
42090: PUSH
42091: LD_INT 20
42093: PUSH
42094: LD_INT 21
42096: PUSH
42097: LD_INT 22
42099: PUSH
42100: LD_INT 23
42102: PUSH
42103: LD_INT 24
42105: PUSH
42106: LD_INT 25
42108: PUSH
42109: LD_INT 26
42111: PUSH
42112: LD_INT 27
42114: PUSH
42115: LD_INT 28
42117: PUSH
42118: LD_INT 29
42120: PUSH
42121: LD_INT 30
42123: PUSH
42124: LD_INT 31
42126: PUSH
42127: LD_INT 32
42129: PUSH
42130: LD_INT 33
42132: PUSH
42133: LD_INT 34
42135: PUSH
42136: LD_INT 36
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 101
42178: PUSH
42179: LD_INT 102
42181: PUSH
42182: LD_INT 103
42184: PUSH
42185: LD_INT 104
42187: PUSH
42188: LD_INT 105
42190: PUSH
42191: LD_INT 106
42193: PUSH
42194: LD_INT 107
42196: PUSH
42197: LD_INT 108
42199: PUSH
42200: LD_INT 109
42202: PUSH
42203: LD_INT 110
42205: PUSH
42206: LD_INT 111
42208: PUSH
42209: LD_INT 112
42211: PUSH
42212: LD_INT 113
42214: PUSH
42215: LD_INT 114
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: ST_TO_ADDR
42238: GO 43185
42240: LD_INT 15
42242: DOUBLE
42243: EQUAL
42244: IFTRUE 42248
42246: GO 42460
42248: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
42249: LD_ADDR_VAR 0 1
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: LD_INT 2
42259: PUSH
42260: LD_INT 3
42262: PUSH
42263: LD_INT 4
42265: PUSH
42266: LD_INT 5
42268: PUSH
42269: LD_INT 6
42271: PUSH
42272: LD_INT 7
42274: PUSH
42275: LD_INT 8
42277: PUSH
42278: LD_INT 9
42280: PUSH
42281: LD_INT 10
42283: PUSH
42284: LD_INT 11
42286: PUSH
42287: LD_INT 12
42289: PUSH
42290: LD_INT 13
42292: PUSH
42293: LD_INT 14
42295: PUSH
42296: LD_INT 15
42298: PUSH
42299: LD_INT 16
42301: PUSH
42302: LD_INT 17
42304: PUSH
42305: LD_INT 18
42307: PUSH
42308: LD_INT 19
42310: PUSH
42311: LD_INT 20
42313: PUSH
42314: LD_INT 21
42316: PUSH
42317: LD_INT 22
42319: PUSH
42320: LD_INT 23
42322: PUSH
42323: LD_INT 24
42325: PUSH
42326: LD_INT 25
42328: PUSH
42329: LD_INT 26
42331: PUSH
42332: LD_INT 27
42334: PUSH
42335: LD_INT 28
42337: PUSH
42338: LD_INT 29
42340: PUSH
42341: LD_INT 30
42343: PUSH
42344: LD_INT 31
42346: PUSH
42347: LD_INT 32
42349: PUSH
42350: LD_INT 33
42352: PUSH
42353: LD_INT 34
42355: PUSH
42356: LD_INT 36
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 101
42398: PUSH
42399: LD_INT 102
42401: PUSH
42402: LD_INT 103
42404: PUSH
42405: LD_INT 104
42407: PUSH
42408: LD_INT 105
42410: PUSH
42411: LD_INT 106
42413: PUSH
42414: LD_INT 107
42416: PUSH
42417: LD_INT 108
42419: PUSH
42420: LD_INT 109
42422: PUSH
42423: LD_INT 110
42425: PUSH
42426: LD_INT 111
42428: PUSH
42429: LD_INT 112
42431: PUSH
42432: LD_INT 113
42434: PUSH
42435: LD_INT 114
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: ST_TO_ADDR
42458: GO 43185
42460: LD_INT 16
42462: DOUBLE
42463: EQUAL
42464: IFTRUE 42468
42466: GO 42592
42468: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
42469: LD_ADDR_VAR 0 1
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: LD_INT 4
42479: PUSH
42480: LD_INT 5
42482: PUSH
42483: LD_INT 7
42485: PUSH
42486: LD_INT 11
42488: PUSH
42489: LD_INT 12
42491: PUSH
42492: LD_INT 15
42494: PUSH
42495: LD_INT 16
42497: PUSH
42498: LD_INT 20
42500: PUSH
42501: LD_INT 21
42503: PUSH
42504: LD_INT 22
42506: PUSH
42507: LD_INT 23
42509: PUSH
42510: LD_INT 25
42512: PUSH
42513: LD_INT 26
42515: PUSH
42516: LD_INT 30
42518: PUSH
42519: LD_INT 31
42521: PUSH
42522: LD_INT 32
42524: PUSH
42525: LD_INT 33
42527: PUSH
42528: LD_INT 34
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 101
42554: PUSH
42555: LD_INT 102
42557: PUSH
42558: LD_INT 103
42560: PUSH
42561: LD_INT 106
42563: PUSH
42564: LD_INT 108
42566: PUSH
42567: LD_INT 112
42569: PUSH
42570: LD_INT 113
42572: PUSH
42573: LD_INT 114
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: ST_TO_ADDR
42590: GO 43185
42592: LD_INT 17
42594: DOUBLE
42595: EQUAL
42596: IFTRUE 42600
42598: GO 42812
42600: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
42601: LD_ADDR_VAR 0 1
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: LD_INT 3
42614: PUSH
42615: LD_INT 4
42617: PUSH
42618: LD_INT 5
42620: PUSH
42621: LD_INT 6
42623: PUSH
42624: LD_INT 7
42626: PUSH
42627: LD_INT 8
42629: PUSH
42630: LD_INT 9
42632: PUSH
42633: LD_INT 10
42635: PUSH
42636: LD_INT 11
42638: PUSH
42639: LD_INT 12
42641: PUSH
42642: LD_INT 13
42644: PUSH
42645: LD_INT 14
42647: PUSH
42648: LD_INT 15
42650: PUSH
42651: LD_INT 16
42653: PUSH
42654: LD_INT 17
42656: PUSH
42657: LD_INT 18
42659: PUSH
42660: LD_INT 19
42662: PUSH
42663: LD_INT 20
42665: PUSH
42666: LD_INT 21
42668: PUSH
42669: LD_INT 22
42671: PUSH
42672: LD_INT 23
42674: PUSH
42675: LD_INT 24
42677: PUSH
42678: LD_INT 25
42680: PUSH
42681: LD_INT 26
42683: PUSH
42684: LD_INT 27
42686: PUSH
42687: LD_INT 28
42689: PUSH
42690: LD_INT 29
42692: PUSH
42693: LD_INT 30
42695: PUSH
42696: LD_INT 31
42698: PUSH
42699: LD_INT 32
42701: PUSH
42702: LD_INT 33
42704: PUSH
42705: LD_INT 34
42707: PUSH
42708: LD_INT 36
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 101
42750: PUSH
42751: LD_INT 102
42753: PUSH
42754: LD_INT 103
42756: PUSH
42757: LD_INT 104
42759: PUSH
42760: LD_INT 105
42762: PUSH
42763: LD_INT 106
42765: PUSH
42766: LD_INT 107
42768: PUSH
42769: LD_INT 108
42771: PUSH
42772: LD_INT 109
42774: PUSH
42775: LD_INT 110
42777: PUSH
42778: LD_INT 111
42780: PUSH
42781: LD_INT 112
42783: PUSH
42784: LD_INT 113
42786: PUSH
42787: LD_INT 114
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: ST_TO_ADDR
42810: GO 43185
42812: LD_INT 18
42814: DOUBLE
42815: EQUAL
42816: IFTRUE 42820
42818: GO 42956
42820: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
42821: LD_ADDR_VAR 0 1
42825: PUSH
42826: LD_INT 2
42828: PUSH
42829: LD_INT 4
42831: PUSH
42832: LD_INT 5
42834: PUSH
42835: LD_INT 7
42837: PUSH
42838: LD_INT 11
42840: PUSH
42841: LD_INT 12
42843: PUSH
42844: LD_INT 15
42846: PUSH
42847: LD_INT 16
42849: PUSH
42850: LD_INT 20
42852: PUSH
42853: LD_INT 21
42855: PUSH
42856: LD_INT 22
42858: PUSH
42859: LD_INT 23
42861: PUSH
42862: LD_INT 25
42864: PUSH
42865: LD_INT 26
42867: PUSH
42868: LD_INT 30
42870: PUSH
42871: LD_INT 31
42873: PUSH
42874: LD_INT 32
42876: PUSH
42877: LD_INT 33
42879: PUSH
42880: LD_INT 34
42882: PUSH
42883: LD_INT 35
42885: PUSH
42886: LD_INT 36
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 101
42914: PUSH
42915: LD_INT 102
42917: PUSH
42918: LD_INT 103
42920: PUSH
42921: LD_INT 106
42923: PUSH
42924: LD_INT 108
42926: PUSH
42927: LD_INT 112
42929: PUSH
42930: LD_INT 113
42932: PUSH
42933: LD_INT 114
42935: PUSH
42936: LD_INT 115
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: ST_TO_ADDR
42954: GO 43185
42956: LD_INT 19
42958: DOUBLE
42959: EQUAL
42960: IFTRUE 42964
42962: GO 43184
42964: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
42965: LD_ADDR_VAR 0 1
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: LD_INT 2
42975: PUSH
42976: LD_INT 3
42978: PUSH
42979: LD_INT 4
42981: PUSH
42982: LD_INT 5
42984: PUSH
42985: LD_INT 6
42987: PUSH
42988: LD_INT 7
42990: PUSH
42991: LD_INT 8
42993: PUSH
42994: LD_INT 9
42996: PUSH
42997: LD_INT 10
42999: PUSH
43000: LD_INT 11
43002: PUSH
43003: LD_INT 12
43005: PUSH
43006: LD_INT 13
43008: PUSH
43009: LD_INT 14
43011: PUSH
43012: LD_INT 15
43014: PUSH
43015: LD_INT 16
43017: PUSH
43018: LD_INT 17
43020: PUSH
43021: LD_INT 18
43023: PUSH
43024: LD_INT 19
43026: PUSH
43027: LD_INT 20
43029: PUSH
43030: LD_INT 21
43032: PUSH
43033: LD_INT 22
43035: PUSH
43036: LD_INT 23
43038: PUSH
43039: LD_INT 24
43041: PUSH
43042: LD_INT 25
43044: PUSH
43045: LD_INT 26
43047: PUSH
43048: LD_INT 27
43050: PUSH
43051: LD_INT 28
43053: PUSH
43054: LD_INT 29
43056: PUSH
43057: LD_INT 30
43059: PUSH
43060: LD_INT 31
43062: PUSH
43063: LD_INT 32
43065: PUSH
43066: LD_INT 33
43068: PUSH
43069: LD_INT 34
43071: PUSH
43072: LD_INT 35
43074: PUSH
43075: LD_INT 36
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 101
43118: PUSH
43119: LD_INT 102
43121: PUSH
43122: LD_INT 103
43124: PUSH
43125: LD_INT 104
43127: PUSH
43128: LD_INT 105
43130: PUSH
43131: LD_INT 106
43133: PUSH
43134: LD_INT 107
43136: PUSH
43137: LD_INT 108
43139: PUSH
43140: LD_INT 109
43142: PUSH
43143: LD_INT 110
43145: PUSH
43146: LD_INT 111
43148: PUSH
43149: LD_INT 112
43151: PUSH
43152: LD_INT 113
43154: PUSH
43155: LD_INT 114
43157: PUSH
43158: LD_INT 115
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: ST_TO_ADDR
43182: GO 43185
43184: POP
// end else
43185: GO 43404
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
43187: LD_ADDR_VAR 0 1
43191: PUSH
43192: LD_INT 1
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: LD_INT 3
43200: PUSH
43201: LD_INT 4
43203: PUSH
43204: LD_INT 5
43206: PUSH
43207: LD_INT 6
43209: PUSH
43210: LD_INT 7
43212: PUSH
43213: LD_INT 8
43215: PUSH
43216: LD_INT 9
43218: PUSH
43219: LD_INT 10
43221: PUSH
43222: LD_INT 11
43224: PUSH
43225: LD_INT 12
43227: PUSH
43228: LD_INT 13
43230: PUSH
43231: LD_INT 14
43233: PUSH
43234: LD_INT 15
43236: PUSH
43237: LD_INT 16
43239: PUSH
43240: LD_INT 17
43242: PUSH
43243: LD_INT 18
43245: PUSH
43246: LD_INT 19
43248: PUSH
43249: LD_INT 20
43251: PUSH
43252: LD_INT 21
43254: PUSH
43255: LD_INT 22
43257: PUSH
43258: LD_INT 23
43260: PUSH
43261: LD_INT 24
43263: PUSH
43264: LD_INT 25
43266: PUSH
43267: LD_INT 26
43269: PUSH
43270: LD_INT 27
43272: PUSH
43273: LD_INT 28
43275: PUSH
43276: LD_INT 29
43278: PUSH
43279: LD_INT 30
43281: PUSH
43282: LD_INT 31
43284: PUSH
43285: LD_INT 32
43287: PUSH
43288: LD_INT 33
43290: PUSH
43291: LD_INT 34
43293: PUSH
43294: LD_INT 35
43296: PUSH
43297: LD_INT 36
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 101
43340: PUSH
43341: LD_INT 102
43343: PUSH
43344: LD_INT 103
43346: PUSH
43347: LD_INT 104
43349: PUSH
43350: LD_INT 105
43352: PUSH
43353: LD_INT 106
43355: PUSH
43356: LD_INT 107
43358: PUSH
43359: LD_INT 108
43361: PUSH
43362: LD_INT 109
43364: PUSH
43365: LD_INT 110
43367: PUSH
43368: LD_INT 111
43370: PUSH
43371: LD_INT 112
43373: PUSH
43374: LD_INT 113
43376: PUSH
43377: LD_INT 114
43379: PUSH
43380: LD_INT 115
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: ST_TO_ADDR
// if result then
43404: LD_VAR 0 1
43408: IFFALSE 43697
// begin normal :=  ;
43410: LD_ADDR_VAR 0 3
43414: PUSH
43415: LD_STRING 
43417: ST_TO_ADDR
// hardcore :=  ;
43418: LD_ADDR_VAR 0 4
43422: PUSH
43423: LD_STRING 
43425: ST_TO_ADDR
// for i = 1 to normalCounter do
43426: LD_ADDR_VAR 0 5
43430: PUSH
43431: DOUBLE
43432: LD_INT 1
43434: DEC
43435: ST_TO_ADDR
43436: LD_EXP 29
43440: PUSH
43441: FOR_TO
43442: IFFALSE 43543
// begin tmp := 0 ;
43444: LD_ADDR_VAR 0 2
43448: PUSH
43449: LD_STRING 0
43451: ST_TO_ADDR
// if result [ 1 ] then
43452: LD_VAR 0 1
43456: PUSH
43457: LD_INT 1
43459: ARRAY
43460: IFFALSE 43525
// if result [ 1 ] [ 1 ] = i then
43462: LD_VAR 0 1
43466: PUSH
43467: LD_INT 1
43469: ARRAY
43470: PUSH
43471: LD_INT 1
43473: ARRAY
43474: PUSH
43475: LD_VAR 0 5
43479: EQUAL
43480: IFFALSE 43525
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
43482: LD_ADDR_VAR 0 1
43486: PUSH
43487: LD_VAR 0 1
43491: PPUSH
43492: LD_INT 1
43494: PPUSH
43495: LD_VAR 0 1
43499: PUSH
43500: LD_INT 1
43502: ARRAY
43503: PPUSH
43504: LD_INT 1
43506: PPUSH
43507: CALL_OW 3
43511: PPUSH
43512: CALL_OW 1
43516: ST_TO_ADDR
// tmp := 1 ;
43517: LD_ADDR_VAR 0 2
43521: PUSH
43522: LD_STRING 1
43524: ST_TO_ADDR
// end ; normal := normal & tmp ;
43525: LD_ADDR_VAR 0 3
43529: PUSH
43530: LD_VAR 0 3
43534: PUSH
43535: LD_VAR 0 2
43539: STR
43540: ST_TO_ADDR
// end ;
43541: GO 43441
43543: POP
43544: POP
// for i = 1 to hardcoreCounter do
43545: LD_ADDR_VAR 0 5
43549: PUSH
43550: DOUBLE
43551: LD_INT 1
43553: DEC
43554: ST_TO_ADDR
43555: LD_EXP 30
43559: PUSH
43560: FOR_TO
43561: IFFALSE 43666
// begin tmp := 0 ;
43563: LD_ADDR_VAR 0 2
43567: PUSH
43568: LD_STRING 0
43570: ST_TO_ADDR
// if result [ 2 ] then
43571: LD_VAR 0 1
43575: PUSH
43576: LD_INT 2
43578: ARRAY
43579: IFFALSE 43648
// if result [ 2 ] [ 1 ] = 100 + i then
43581: LD_VAR 0 1
43585: PUSH
43586: LD_INT 2
43588: ARRAY
43589: PUSH
43590: LD_INT 1
43592: ARRAY
43593: PUSH
43594: LD_INT 100
43596: PUSH
43597: LD_VAR 0 5
43601: PLUS
43602: EQUAL
43603: IFFALSE 43648
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
43605: LD_ADDR_VAR 0 1
43609: PUSH
43610: LD_VAR 0 1
43614: PPUSH
43615: LD_INT 2
43617: PPUSH
43618: LD_VAR 0 1
43622: PUSH
43623: LD_INT 2
43625: ARRAY
43626: PPUSH
43627: LD_INT 1
43629: PPUSH
43630: CALL_OW 3
43634: PPUSH
43635: CALL_OW 1
43639: ST_TO_ADDR
// tmp := 1 ;
43640: LD_ADDR_VAR 0 2
43644: PUSH
43645: LD_STRING 1
43647: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
43648: LD_ADDR_VAR 0 4
43652: PUSH
43653: LD_VAR 0 4
43657: PUSH
43658: LD_VAR 0 2
43662: STR
43663: ST_TO_ADDR
// end ;
43664: GO 43560
43666: POP
43667: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
43668: LD_STRING getStreamItemsFromMission("
43670: PUSH
43671: LD_VAR 0 3
43675: STR
43676: PUSH
43677: LD_STRING ","
43679: STR
43680: PUSH
43681: LD_VAR 0 4
43685: STR
43686: PUSH
43687: LD_STRING ")
43689: STR
43690: PPUSH
43691: CALL_OW 559
// end else
43695: GO 43704
// ToLua ( getStreamItemsFromMission("","") ) ;
43697: LD_STRING getStreamItemsFromMission("","")
43699: PPUSH
43700: CALL_OW 559
// end ;
43704: LD_VAR 0 1
43708: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
43709: LD_EXP 28
43713: PUSH
43714: LD_EXP 33
43718: AND
43719: IFFALSE 43843
43721: GO 43723
43723: DISABLE
43724: LD_INT 0
43726: PPUSH
43727: PPUSH
// begin enable ;
43728: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
43729: LD_ADDR_VAR 0 2
43733: PUSH
43734: LD_INT 22
43736: PUSH
43737: LD_OWVAR 2
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 2
43748: PUSH
43749: LD_INT 34
43751: PUSH
43752: LD_INT 7
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 34
43761: PUSH
43762: LD_INT 45
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 34
43771: PUSH
43772: LD_INT 28
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 34
43781: PUSH
43782: LD_INT 47
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PPUSH
43800: CALL_OW 69
43804: ST_TO_ADDR
// if not tmp then
43805: LD_VAR 0 2
43809: NOT
43810: IFFALSE 43814
// exit ;
43812: GO 43843
// for i in tmp do
43814: LD_ADDR_VAR 0 1
43818: PUSH
43819: LD_VAR 0 2
43823: PUSH
43824: FOR_IN
43825: IFFALSE 43841
// begin SetLives ( i , 0 ) ;
43827: LD_VAR 0 1
43831: PPUSH
43832: LD_INT 0
43834: PPUSH
43835: CALL_OW 234
// end ;
43839: GO 43824
43841: POP
43842: POP
// end ;
43843: PPOPN 2
43845: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
43846: LD_EXP 28
43850: PUSH
43851: LD_EXP 34
43855: AND
43856: IFFALSE 43940
43858: GO 43860
43860: DISABLE
43861: LD_INT 0
43863: PPUSH
43864: PPUSH
// begin enable ;
43865: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
43866: LD_ADDR_VAR 0 2
43870: PUSH
43871: LD_INT 22
43873: PUSH
43874: LD_OWVAR 2
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 32
43885: PUSH
43886: LD_INT 3
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PPUSH
43897: CALL_OW 69
43901: ST_TO_ADDR
// if not tmp then
43902: LD_VAR 0 2
43906: NOT
43907: IFFALSE 43911
// exit ;
43909: GO 43940
// for i in tmp do
43911: LD_ADDR_VAR 0 1
43915: PUSH
43916: LD_VAR 0 2
43920: PUSH
43921: FOR_IN
43922: IFFALSE 43938
// begin SetLives ( i , 0 ) ;
43924: LD_VAR 0 1
43928: PPUSH
43929: LD_INT 0
43931: PPUSH
43932: CALL_OW 234
// end ;
43936: GO 43921
43938: POP
43939: POP
// end ;
43940: PPOPN 2
43942: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
43943: LD_EXP 28
43947: PUSH
43948: LD_EXP 31
43952: AND
43953: IFFALSE 44046
43955: GO 43957
43957: DISABLE
43958: LD_INT 0
43960: PPUSH
// begin enable ;
43961: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
43962: LD_ADDR_VAR 0 1
43966: PUSH
43967: LD_INT 22
43969: PUSH
43970: LD_OWVAR 2
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: PUSH
43982: LD_INT 25
43984: PUSH
43985: LD_INT 5
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 25
43994: PUSH
43995: LD_INT 9
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 25
44004: PUSH
44005: LD_INT 8
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PPUSH
44022: CALL_OW 69
44026: PUSH
44027: FOR_IN
44028: IFFALSE 44044
// begin SetClass ( i , 1 ) ;
44030: LD_VAR 0 1
44034: PPUSH
44035: LD_INT 1
44037: PPUSH
44038: CALL_OW 336
// end ;
44042: GO 44027
44044: POP
44045: POP
// end ;
44046: PPOPN 1
44048: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
44049: LD_EXP 28
44053: PUSH
44054: LD_EXP 32
44058: AND
44059: PUSH
44060: LD_OWVAR 65
44064: PUSH
44065: LD_INT 7
44067: LESS
44068: AND
44069: IFFALSE 44083
44071: GO 44073
44073: DISABLE
// begin enable ;
44074: ENABLE
// game_speed := 7 ;
44075: LD_ADDR_OWVAR 65
44079: PUSH
44080: LD_INT 7
44082: ST_TO_ADDR
// end ;
44083: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
44084: LD_EXP 28
44088: PUSH
44089: LD_EXP 35
44093: AND
44094: IFFALSE 44296
44096: GO 44098
44098: DISABLE
44099: LD_INT 0
44101: PPUSH
44102: PPUSH
44103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
44104: LD_ADDR_VAR 0 3
44108: PUSH
44109: LD_INT 81
44111: PUSH
44112: LD_OWVAR 2
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 21
44123: PUSH
44124: LD_INT 1
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PPUSH
44135: CALL_OW 69
44139: ST_TO_ADDR
// if not tmp then
44140: LD_VAR 0 3
44144: NOT
44145: IFFALSE 44149
// exit ;
44147: GO 44296
// if tmp > 5 then
44149: LD_VAR 0 3
44153: PUSH
44154: LD_INT 5
44156: GREATER
44157: IFFALSE 44169
// k := 5 else
44159: LD_ADDR_VAR 0 2
44163: PUSH
44164: LD_INT 5
44166: ST_TO_ADDR
44167: GO 44179
// k := tmp ;
44169: LD_ADDR_VAR 0 2
44173: PUSH
44174: LD_VAR 0 3
44178: ST_TO_ADDR
// for i := 1 to k do
44179: LD_ADDR_VAR 0 1
44183: PUSH
44184: DOUBLE
44185: LD_INT 1
44187: DEC
44188: ST_TO_ADDR
44189: LD_VAR 0 2
44193: PUSH
44194: FOR_TO
44195: IFFALSE 44294
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
44197: LD_VAR 0 3
44201: PUSH
44202: LD_VAR 0 1
44206: ARRAY
44207: PPUSH
44208: LD_VAR 0 1
44212: PUSH
44213: LD_INT 4
44215: MOD
44216: PUSH
44217: LD_INT 1
44219: PLUS
44220: PPUSH
44221: CALL_OW 259
44225: PUSH
44226: LD_INT 10
44228: LESS
44229: IFFALSE 44292
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
44231: LD_VAR 0 3
44235: PUSH
44236: LD_VAR 0 1
44240: ARRAY
44241: PPUSH
44242: LD_VAR 0 1
44246: PUSH
44247: LD_INT 4
44249: MOD
44250: PUSH
44251: LD_INT 1
44253: PLUS
44254: PPUSH
44255: LD_VAR 0 3
44259: PUSH
44260: LD_VAR 0 1
44264: ARRAY
44265: PPUSH
44266: LD_VAR 0 1
44270: PUSH
44271: LD_INT 4
44273: MOD
44274: PUSH
44275: LD_INT 1
44277: PLUS
44278: PPUSH
44279: CALL_OW 259
44283: PUSH
44284: LD_INT 1
44286: PLUS
44287: PPUSH
44288: CALL_OW 237
44292: GO 44194
44294: POP
44295: POP
// end ;
44296: PPOPN 3
44298: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
44299: LD_EXP 28
44303: PUSH
44304: LD_EXP 36
44308: AND
44309: IFFALSE 44329
44311: GO 44313
44313: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
44314: LD_INT 4
44316: PPUSH
44317: LD_OWVAR 2
44321: PPUSH
44322: LD_INT 0
44324: PPUSH
44325: CALL_OW 324
44329: END
// every 0 0$1 trigger StreamModeActive and sShovel do
44330: LD_EXP 28
44334: PUSH
44335: LD_EXP 65
44339: AND
44340: IFFALSE 44360
44342: GO 44344
44344: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
44345: LD_INT 19
44347: PPUSH
44348: LD_OWVAR 2
44352: PPUSH
44353: LD_INT 0
44355: PPUSH
44356: CALL_OW 324
44360: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
44361: LD_EXP 28
44365: PUSH
44366: LD_EXP 37
44370: AND
44371: IFFALSE 44473
44373: GO 44375
44375: DISABLE
44376: LD_INT 0
44378: PPUSH
44379: PPUSH
// begin enable ;
44380: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
44381: LD_ADDR_VAR 0 2
44385: PUSH
44386: LD_INT 22
44388: PUSH
44389: LD_OWVAR 2
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: LD_INT 34
44403: PUSH
44404: LD_INT 11
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 34
44413: PUSH
44414: LD_INT 30
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: LIST
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PPUSH
44430: CALL_OW 69
44434: ST_TO_ADDR
// if not tmp then
44435: LD_VAR 0 2
44439: NOT
44440: IFFALSE 44444
// exit ;
44442: GO 44473
// for i in tmp do
44444: LD_ADDR_VAR 0 1
44448: PUSH
44449: LD_VAR 0 2
44453: PUSH
44454: FOR_IN
44455: IFFALSE 44471
// begin SetLives ( i , 0 ) ;
44457: LD_VAR 0 1
44461: PPUSH
44462: LD_INT 0
44464: PPUSH
44465: CALL_OW 234
// end ;
44469: GO 44454
44471: POP
44472: POP
// end ;
44473: PPOPN 2
44475: END
// every 0 0$1 trigger StreamModeActive and sBunker do
44476: LD_EXP 28
44480: PUSH
44481: LD_EXP 38
44485: AND
44486: IFFALSE 44506
44488: GO 44490
44490: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
44491: LD_INT 32
44493: PPUSH
44494: LD_OWVAR 2
44498: PPUSH
44499: LD_INT 0
44501: PPUSH
44502: CALL_OW 324
44506: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
44507: LD_EXP 28
44511: PUSH
44512: LD_EXP 39
44516: AND
44517: IFFALSE 44698
44519: GO 44521
44521: DISABLE
44522: LD_INT 0
44524: PPUSH
44525: PPUSH
44526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
44527: LD_ADDR_VAR 0 2
44531: PUSH
44532: LD_INT 22
44534: PUSH
44535: LD_OWVAR 2
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 33
44546: PUSH
44547: LD_INT 3
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PPUSH
44558: CALL_OW 69
44562: ST_TO_ADDR
// if not tmp then
44563: LD_VAR 0 2
44567: NOT
44568: IFFALSE 44572
// exit ;
44570: GO 44698
// side := 0 ;
44572: LD_ADDR_VAR 0 3
44576: PUSH
44577: LD_INT 0
44579: ST_TO_ADDR
// for i := 1 to 8 do
44580: LD_ADDR_VAR 0 1
44584: PUSH
44585: DOUBLE
44586: LD_INT 1
44588: DEC
44589: ST_TO_ADDR
44590: LD_INT 8
44592: PUSH
44593: FOR_TO
44594: IFFALSE 44642
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
44596: LD_OWVAR 2
44600: PUSH
44601: LD_VAR 0 1
44605: NONEQUAL
44606: PUSH
44607: LD_OWVAR 2
44611: PPUSH
44612: LD_VAR 0 1
44616: PPUSH
44617: CALL_OW 81
44621: PUSH
44622: LD_INT 2
44624: EQUAL
44625: AND
44626: IFFALSE 44640
// begin side := i ;
44628: LD_ADDR_VAR 0 3
44632: PUSH
44633: LD_VAR 0 1
44637: ST_TO_ADDR
// break ;
44638: GO 44642
// end ;
44640: GO 44593
44642: POP
44643: POP
// if not side then
44644: LD_VAR 0 3
44648: NOT
44649: IFFALSE 44653
// exit ;
44651: GO 44698
// for i := 1 to tmp do
44653: LD_ADDR_VAR 0 1
44657: PUSH
44658: DOUBLE
44659: LD_INT 1
44661: DEC
44662: ST_TO_ADDR
44663: LD_VAR 0 2
44667: PUSH
44668: FOR_TO
44669: IFFALSE 44696
// if Prob ( 60 ) then
44671: LD_INT 60
44673: PPUSH
44674: CALL_OW 13
44678: IFFALSE 44694
// SetSide ( i , side ) ;
44680: LD_VAR 0 1
44684: PPUSH
44685: LD_VAR 0 3
44689: PPUSH
44690: CALL_OW 235
44694: GO 44668
44696: POP
44697: POP
// end ;
44698: PPOPN 3
44700: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
44701: LD_EXP 28
44705: PUSH
44706: LD_EXP 41
44710: AND
44711: IFFALSE 44830
44713: GO 44715
44715: DISABLE
44716: LD_INT 0
44718: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
44719: LD_ADDR_VAR 0 1
44723: PUSH
44724: LD_INT 22
44726: PUSH
44727: LD_OWVAR 2
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 21
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 3
44748: PUSH
44749: LD_INT 23
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: LIST
44767: PPUSH
44768: CALL_OW 69
44772: PUSH
44773: FOR_IN
44774: IFFALSE 44828
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
44776: LD_VAR 0 1
44780: PPUSH
44781: CALL_OW 257
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: LD_INT 2
44791: PUSH
44792: LD_INT 3
44794: PUSH
44795: LD_INT 4
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: IN
44804: IFFALSE 44826
// SetClass ( un , rand ( 1 , 4 ) ) ;
44806: LD_VAR 0 1
44810: PPUSH
44811: LD_INT 1
44813: PPUSH
44814: LD_INT 4
44816: PPUSH
44817: CALL_OW 12
44821: PPUSH
44822: CALL_OW 336
44826: GO 44773
44828: POP
44829: POP
// end ;
44830: PPOPN 1
44832: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
44833: LD_EXP 28
44837: PUSH
44838: LD_EXP 40
44842: AND
44843: IFFALSE 44922
44845: GO 44847
44847: DISABLE
44848: LD_INT 0
44850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
44851: LD_ADDR_VAR 0 1
44855: PUSH
44856: LD_INT 22
44858: PUSH
44859: LD_OWVAR 2
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 21
44870: PUSH
44871: LD_INT 3
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PPUSH
44882: CALL_OW 69
44886: ST_TO_ADDR
// if not tmp then
44887: LD_VAR 0 1
44891: NOT
44892: IFFALSE 44896
// exit ;
44894: GO 44922
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
44896: LD_VAR 0 1
44900: PUSH
44901: LD_INT 1
44903: PPUSH
44904: LD_VAR 0 1
44908: PPUSH
44909: CALL_OW 12
44913: ARRAY
44914: PPUSH
44915: LD_INT 100
44917: PPUSH
44918: CALL_OW 234
// end ;
44922: PPOPN 1
44924: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
44925: LD_EXP 28
44929: PUSH
44930: LD_EXP 42
44934: AND
44935: IFFALSE 45033
44937: GO 44939
44939: DISABLE
44940: LD_INT 0
44942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
44943: LD_ADDR_VAR 0 1
44947: PUSH
44948: LD_INT 22
44950: PUSH
44951: LD_OWVAR 2
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 21
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PPUSH
44974: CALL_OW 69
44978: ST_TO_ADDR
// if not tmp then
44979: LD_VAR 0 1
44983: NOT
44984: IFFALSE 44988
// exit ;
44986: GO 45033
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
44988: LD_VAR 0 1
44992: PUSH
44993: LD_INT 1
44995: PPUSH
44996: LD_VAR 0 1
45000: PPUSH
45001: CALL_OW 12
45005: ARRAY
45006: PPUSH
45007: LD_INT 1
45009: PPUSH
45010: LD_INT 4
45012: PPUSH
45013: CALL_OW 12
45017: PPUSH
45018: LD_INT 3000
45020: PPUSH
45021: LD_INT 9000
45023: PPUSH
45024: CALL_OW 12
45028: PPUSH
45029: CALL_OW 492
// end ;
45033: PPOPN 1
45035: END
// every 0 0$1 trigger StreamModeActive and sDepot do
45036: LD_EXP 28
45040: PUSH
45041: LD_EXP 43
45045: AND
45046: IFFALSE 45066
45048: GO 45050
45050: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
45051: LD_INT 1
45053: PPUSH
45054: LD_OWVAR 2
45058: PPUSH
45059: LD_INT 0
45061: PPUSH
45062: CALL_OW 324
45066: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
45067: LD_EXP 28
45071: PUSH
45072: LD_EXP 44
45076: AND
45077: IFFALSE 45160
45079: GO 45081
45081: DISABLE
45082: LD_INT 0
45084: PPUSH
45085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
45086: LD_ADDR_VAR 0 2
45090: PUSH
45091: LD_INT 22
45093: PUSH
45094: LD_OWVAR 2
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 21
45105: PUSH
45106: LD_INT 3
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PPUSH
45117: CALL_OW 69
45121: ST_TO_ADDR
// if not tmp then
45122: LD_VAR 0 2
45126: NOT
45127: IFFALSE 45131
// exit ;
45129: GO 45160
// for i in tmp do
45131: LD_ADDR_VAR 0 1
45135: PUSH
45136: LD_VAR 0 2
45140: PUSH
45141: FOR_IN
45142: IFFALSE 45158
// SetBLevel ( i , 10 ) ;
45144: LD_VAR 0 1
45148: PPUSH
45149: LD_INT 10
45151: PPUSH
45152: CALL_OW 241
45156: GO 45141
45158: POP
45159: POP
// end ;
45160: PPOPN 2
45162: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
45163: LD_EXP 28
45167: PUSH
45168: LD_EXP 45
45172: AND
45173: IFFALSE 45284
45175: GO 45177
45177: DISABLE
45178: LD_INT 0
45180: PPUSH
45181: PPUSH
45182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45183: LD_ADDR_VAR 0 3
45187: PUSH
45188: LD_INT 22
45190: PUSH
45191: LD_OWVAR 2
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 25
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PPUSH
45214: CALL_OW 69
45218: ST_TO_ADDR
// if not tmp then
45219: LD_VAR 0 3
45223: NOT
45224: IFFALSE 45228
// exit ;
45226: GO 45284
// un := tmp [ rand ( 1 , tmp ) ] ;
45228: LD_ADDR_VAR 0 2
45232: PUSH
45233: LD_VAR 0 3
45237: PUSH
45238: LD_INT 1
45240: PPUSH
45241: LD_VAR 0 3
45245: PPUSH
45246: CALL_OW 12
45250: ARRAY
45251: ST_TO_ADDR
// if Crawls ( un ) then
45252: LD_VAR 0 2
45256: PPUSH
45257: CALL_OW 318
45261: IFFALSE 45272
// ComWalk ( un ) ;
45263: LD_VAR 0 2
45267: PPUSH
45268: CALL_OW 138
// SetClass ( un , class_sniper ) ;
45272: LD_VAR 0 2
45276: PPUSH
45277: LD_INT 5
45279: PPUSH
45280: CALL_OW 336
// end ;
45284: PPOPN 3
45286: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
45287: LD_EXP 28
45291: PUSH
45292: LD_EXP 46
45296: AND
45297: PUSH
45298: LD_OWVAR 67
45302: PUSH
45303: LD_INT 3
45305: LESS
45306: AND
45307: IFFALSE 45326
45309: GO 45311
45311: DISABLE
// Difficulty := Difficulty + 1 ;
45312: LD_ADDR_OWVAR 67
45316: PUSH
45317: LD_OWVAR 67
45321: PUSH
45322: LD_INT 1
45324: PLUS
45325: ST_TO_ADDR
45326: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
45327: LD_EXP 28
45331: PUSH
45332: LD_EXP 47
45336: AND
45337: IFFALSE 45440
45339: GO 45341
45341: DISABLE
45342: LD_INT 0
45344: PPUSH
// begin for i := 1 to 5 do
45345: LD_ADDR_VAR 0 1
45349: PUSH
45350: DOUBLE
45351: LD_INT 1
45353: DEC
45354: ST_TO_ADDR
45355: LD_INT 5
45357: PUSH
45358: FOR_TO
45359: IFFALSE 45438
// begin uc_nation := nation_nature ;
45361: LD_ADDR_OWVAR 21
45365: PUSH
45366: LD_INT 0
45368: ST_TO_ADDR
// uc_side := 0 ;
45369: LD_ADDR_OWVAR 20
45373: PUSH
45374: LD_INT 0
45376: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
45377: LD_ADDR_OWVAR 29
45381: PUSH
45382: LD_INT 12
45384: PUSH
45385: LD_INT 12
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: ST_TO_ADDR
// hc_agressivity := 20 ;
45392: LD_ADDR_OWVAR 35
45396: PUSH
45397: LD_INT 20
45399: ST_TO_ADDR
// hc_class := class_tiger ;
45400: LD_ADDR_OWVAR 28
45404: PUSH
45405: LD_INT 14
45407: ST_TO_ADDR
// hc_gallery :=  ;
45408: LD_ADDR_OWVAR 33
45412: PUSH
45413: LD_STRING 
45415: ST_TO_ADDR
// hc_name :=  ;
45416: LD_ADDR_OWVAR 26
45420: PUSH
45421: LD_STRING 
45423: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
45424: CALL_OW 44
45428: PPUSH
45429: LD_INT 0
45431: PPUSH
45432: CALL_OW 51
// end ;
45436: GO 45358
45438: POP
45439: POP
// end ;
45440: PPOPN 1
45442: END
// every 0 0$1 trigger StreamModeActive and sBomb do
45443: LD_EXP 28
45447: PUSH
45448: LD_EXP 48
45452: AND
45453: IFFALSE 45462
45455: GO 45457
45457: DISABLE
// StreamSibBomb ;
45458: CALL 45463 0 0
45462: END
// export function StreamSibBomb ; var i , x , y ; begin
45463: LD_INT 0
45465: PPUSH
45466: PPUSH
45467: PPUSH
45468: PPUSH
// result := false ;
45469: LD_ADDR_VAR 0 1
45473: PUSH
45474: LD_INT 0
45476: ST_TO_ADDR
// for i := 1 to 16 do
45477: LD_ADDR_VAR 0 2
45481: PUSH
45482: DOUBLE
45483: LD_INT 1
45485: DEC
45486: ST_TO_ADDR
45487: LD_INT 16
45489: PUSH
45490: FOR_TO
45491: IFFALSE 45690
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
45493: LD_ADDR_VAR 0 3
45497: PUSH
45498: LD_INT 10
45500: PUSH
45501: LD_INT 20
45503: PUSH
45504: LD_INT 30
45506: PUSH
45507: LD_INT 40
45509: PUSH
45510: LD_INT 50
45512: PUSH
45513: LD_INT 60
45515: PUSH
45516: LD_INT 70
45518: PUSH
45519: LD_INT 80
45521: PUSH
45522: LD_INT 90
45524: PUSH
45525: LD_INT 100
45527: PUSH
45528: LD_INT 110
45530: PUSH
45531: LD_INT 120
45533: PUSH
45534: LD_INT 130
45536: PUSH
45537: LD_INT 140
45539: PUSH
45540: LD_INT 150
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PPUSH
45563: LD_INT 15
45565: PPUSH
45566: CALL_OW 12
45570: ARRAY
45571: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
45572: LD_ADDR_VAR 0 4
45576: PUSH
45577: LD_INT 10
45579: PUSH
45580: LD_INT 20
45582: PUSH
45583: LD_INT 30
45585: PUSH
45586: LD_INT 40
45588: PUSH
45589: LD_INT 50
45591: PUSH
45592: LD_INT 60
45594: PUSH
45595: LD_INT 70
45597: PUSH
45598: LD_INT 80
45600: PUSH
45601: LD_INT 90
45603: PUSH
45604: LD_INT 100
45606: PUSH
45607: LD_INT 110
45609: PUSH
45610: LD_INT 120
45612: PUSH
45613: LD_INT 130
45615: PUSH
45616: LD_INT 140
45618: PUSH
45619: LD_INT 150
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: PPUSH
45642: LD_INT 15
45644: PPUSH
45645: CALL_OW 12
45649: ARRAY
45650: ST_TO_ADDR
// if ValidHex ( x , y ) then
45651: LD_VAR 0 3
45655: PPUSH
45656: LD_VAR 0 4
45660: PPUSH
45661: CALL_OW 488
45665: IFFALSE 45688
// begin result := [ x , y ] ;
45667: LD_ADDR_VAR 0 1
45671: PUSH
45672: LD_VAR 0 3
45676: PUSH
45677: LD_VAR 0 4
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: ST_TO_ADDR
// break ;
45686: GO 45690
// end ; end ;
45688: GO 45490
45690: POP
45691: POP
// if result then
45692: LD_VAR 0 1
45696: IFFALSE 45756
// begin ToLua ( playSibBomb() ) ;
45698: LD_STRING playSibBomb()
45700: PPUSH
45701: CALL_OW 559
// wait ( 0 0$14 ) ;
45705: LD_INT 490
45707: PPUSH
45708: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
45712: LD_VAR 0 1
45716: PUSH
45717: LD_INT 1
45719: ARRAY
45720: PPUSH
45721: LD_VAR 0 1
45725: PUSH
45726: LD_INT 2
45728: ARRAY
45729: PPUSH
45730: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
45734: LD_VAR 0 1
45738: PUSH
45739: LD_INT 1
45741: ARRAY
45742: PPUSH
45743: LD_VAR 0 1
45747: PUSH
45748: LD_INT 2
45750: ARRAY
45751: PPUSH
45752: CALL_OW 429
// end ; end ;
45756: LD_VAR 0 1
45760: RET
// every 0 0$1 trigger StreamModeActive and sReset do
45761: LD_EXP 28
45765: PUSH
45766: LD_EXP 50
45770: AND
45771: IFFALSE 45783
45773: GO 45775
45775: DISABLE
// YouLost (  ) ;
45776: LD_STRING 
45778: PPUSH
45779: CALL_OW 104
45783: END
// every 0 0$1 trigger StreamModeActive and sFog do
45784: LD_EXP 28
45788: PUSH
45789: LD_EXP 49
45793: AND
45794: IFFALSE 45808
45796: GO 45798
45798: DISABLE
// FogOff ( your_side ) ;
45799: LD_OWVAR 2
45803: PPUSH
45804: CALL_OW 344
45808: END
// every 0 0$1 trigger StreamModeActive and sSun do
45809: LD_EXP 28
45813: PUSH
45814: LD_EXP 51
45818: AND
45819: IFFALSE 45847
45821: GO 45823
45823: DISABLE
// begin solar_recharge_percent := 0 ;
45824: LD_ADDR_OWVAR 79
45828: PUSH
45829: LD_INT 0
45831: ST_TO_ADDR
// wait ( 5 5$00 ) ;
45832: LD_INT 10500
45834: PPUSH
45835: CALL_OW 67
// solar_recharge_percent := 100 ;
45839: LD_ADDR_OWVAR 79
45843: PUSH
45844: LD_INT 100
45846: ST_TO_ADDR
// end ;
45847: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
45848: LD_EXP 28
45852: PUSH
45853: LD_EXP 52
45857: AND
45858: IFFALSE 46097
45860: GO 45862
45862: DISABLE
45863: LD_INT 0
45865: PPUSH
45866: PPUSH
45867: PPUSH
// begin tmp := [ ] ;
45868: LD_ADDR_VAR 0 3
45872: PUSH
45873: EMPTY
45874: ST_TO_ADDR
// for i := 1 to 6 do
45875: LD_ADDR_VAR 0 1
45879: PUSH
45880: DOUBLE
45881: LD_INT 1
45883: DEC
45884: ST_TO_ADDR
45885: LD_INT 6
45887: PUSH
45888: FOR_TO
45889: IFFALSE 45994
// begin uc_nation := nation_nature ;
45891: LD_ADDR_OWVAR 21
45895: PUSH
45896: LD_INT 0
45898: ST_TO_ADDR
// uc_side := 0 ;
45899: LD_ADDR_OWVAR 20
45903: PUSH
45904: LD_INT 0
45906: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
45907: LD_ADDR_OWVAR 29
45911: PUSH
45912: LD_INT 12
45914: PUSH
45915: LD_INT 12
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: ST_TO_ADDR
// hc_agressivity := 20 ;
45922: LD_ADDR_OWVAR 35
45926: PUSH
45927: LD_INT 20
45929: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
45930: LD_ADDR_OWVAR 28
45934: PUSH
45935: LD_INT 17
45937: ST_TO_ADDR
// hc_gallery :=  ;
45938: LD_ADDR_OWVAR 33
45942: PUSH
45943: LD_STRING 
45945: ST_TO_ADDR
// hc_name :=  ;
45946: LD_ADDR_OWVAR 26
45950: PUSH
45951: LD_STRING 
45953: ST_TO_ADDR
// un := CreateHuman ;
45954: LD_ADDR_VAR 0 2
45958: PUSH
45959: CALL_OW 44
45963: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
45964: LD_VAR 0 2
45968: PPUSH
45969: LD_INT 1
45971: PPUSH
45972: CALL_OW 51
// tmp := tmp ^ un ;
45976: LD_ADDR_VAR 0 3
45980: PUSH
45981: LD_VAR 0 3
45985: PUSH
45986: LD_VAR 0 2
45990: ADD
45991: ST_TO_ADDR
// end ;
45992: GO 45888
45994: POP
45995: POP
// repeat wait ( 0 0$1 ) ;
45996: LD_INT 35
45998: PPUSH
45999: CALL_OW 67
// for un in tmp do
46003: LD_ADDR_VAR 0 2
46007: PUSH
46008: LD_VAR 0 3
46012: PUSH
46013: FOR_IN
46014: IFFALSE 46088
// begin if IsDead ( un ) then
46016: LD_VAR 0 2
46020: PPUSH
46021: CALL_OW 301
46025: IFFALSE 46045
// begin tmp := tmp diff un ;
46027: LD_ADDR_VAR 0 3
46031: PUSH
46032: LD_VAR 0 3
46036: PUSH
46037: LD_VAR 0 2
46041: DIFF
46042: ST_TO_ADDR
// continue ;
46043: GO 46013
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
46045: LD_VAR 0 2
46049: PPUSH
46050: LD_INT 3
46052: PUSH
46053: LD_INT 22
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PPUSH
46067: CALL_OW 69
46071: PPUSH
46072: LD_VAR 0 2
46076: PPUSH
46077: CALL_OW 74
46081: PPUSH
46082: CALL_OW 115
// end ;
46086: GO 46013
46088: POP
46089: POP
// until not tmp ;
46090: LD_VAR 0 3
46094: NOT
46095: IFFALSE 45996
// end ;
46097: PPOPN 3
46099: END
// every 0 0$1 trigger StreamModeActive and sTroll do
46100: LD_EXP 28
46104: PUSH
46105: LD_EXP 53
46109: AND
46110: IFFALSE 46164
46112: GO 46114
46114: DISABLE
// begin ToLua ( displayTroll(); ) ;
46115: LD_STRING displayTroll();
46117: PPUSH
46118: CALL_OW 559
// wait ( 3 3$00 ) ;
46122: LD_INT 6300
46124: PPUSH
46125: CALL_OW 67
// ToLua ( hideTroll(); ) ;
46129: LD_STRING hideTroll();
46131: PPUSH
46132: CALL_OW 559
// wait ( 1 1$00 ) ;
46136: LD_INT 2100
46138: PPUSH
46139: CALL_OW 67
// ToLua ( displayTroll(); ) ;
46143: LD_STRING displayTroll();
46145: PPUSH
46146: CALL_OW 559
// wait ( 1 1$00 ) ;
46150: LD_INT 2100
46152: PPUSH
46153: CALL_OW 67
// ToLua ( hideTroll(); ) ;
46157: LD_STRING hideTroll();
46159: PPUSH
46160: CALL_OW 559
// end ;
46164: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
46165: LD_EXP 28
46169: PUSH
46170: LD_EXP 54
46174: AND
46175: IFFALSE 46238
46177: GO 46179
46179: DISABLE
46180: LD_INT 0
46182: PPUSH
// begin p := 0 ;
46183: LD_ADDR_VAR 0 1
46187: PUSH
46188: LD_INT 0
46190: ST_TO_ADDR
// repeat game_speed := 1 ;
46191: LD_ADDR_OWVAR 65
46195: PUSH
46196: LD_INT 1
46198: ST_TO_ADDR
// wait ( 0 0$1 ) ;
46199: LD_INT 35
46201: PPUSH
46202: CALL_OW 67
// p := p + 1 ;
46206: LD_ADDR_VAR 0 1
46210: PUSH
46211: LD_VAR 0 1
46215: PUSH
46216: LD_INT 1
46218: PLUS
46219: ST_TO_ADDR
// until p >= 60 ;
46220: LD_VAR 0 1
46224: PUSH
46225: LD_INT 60
46227: GREATEREQUAL
46228: IFFALSE 46191
// game_speed := 4 ;
46230: LD_ADDR_OWVAR 65
46234: PUSH
46235: LD_INT 4
46237: ST_TO_ADDR
// end ;
46238: PPOPN 1
46240: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
46241: LD_EXP 28
46245: PUSH
46246: LD_EXP 55
46250: AND
46251: IFFALSE 46397
46253: GO 46255
46255: DISABLE
46256: LD_INT 0
46258: PPUSH
46259: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46260: LD_ADDR_VAR 0 1
46264: PUSH
46265: LD_INT 22
46267: PUSH
46268: LD_OWVAR 2
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: LD_INT 30
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 30
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: LIST
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PPUSH
46309: CALL_OW 69
46313: ST_TO_ADDR
// if not depot then
46314: LD_VAR 0 1
46318: NOT
46319: IFFALSE 46323
// exit ;
46321: GO 46397
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
46323: LD_ADDR_VAR 0 2
46327: PUSH
46328: LD_VAR 0 1
46332: PUSH
46333: LD_INT 1
46335: PPUSH
46336: LD_VAR 0 1
46340: PPUSH
46341: CALL_OW 12
46345: ARRAY
46346: PPUSH
46347: CALL_OW 274
46351: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
46352: LD_VAR 0 2
46356: PPUSH
46357: LD_INT 1
46359: PPUSH
46360: LD_INT 0
46362: PPUSH
46363: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
46367: LD_VAR 0 2
46371: PPUSH
46372: LD_INT 2
46374: PPUSH
46375: LD_INT 0
46377: PPUSH
46378: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
46382: LD_VAR 0 2
46386: PPUSH
46387: LD_INT 3
46389: PPUSH
46390: LD_INT 0
46392: PPUSH
46393: CALL_OW 277
// end ;
46397: PPOPN 2
46399: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
46400: LD_EXP 28
46404: PUSH
46405: LD_EXP 56
46409: AND
46410: IFFALSE 46507
46412: GO 46414
46414: DISABLE
46415: LD_INT 0
46417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
46418: LD_ADDR_VAR 0 1
46422: PUSH
46423: LD_INT 22
46425: PUSH
46426: LD_OWVAR 2
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 21
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 3
46447: PUSH
46448: LD_INT 23
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: LIST
46466: PPUSH
46467: CALL_OW 69
46471: ST_TO_ADDR
// if not tmp then
46472: LD_VAR 0 1
46476: NOT
46477: IFFALSE 46481
// exit ;
46479: GO 46507
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
46481: LD_VAR 0 1
46485: PUSH
46486: LD_INT 1
46488: PPUSH
46489: LD_VAR 0 1
46493: PPUSH
46494: CALL_OW 12
46498: ARRAY
46499: PPUSH
46500: LD_INT 200
46502: PPUSH
46503: CALL_OW 234
// end ;
46507: PPOPN 1
46509: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
46510: LD_EXP 28
46514: PUSH
46515: LD_EXP 57
46519: AND
46520: IFFALSE 46599
46522: GO 46524
46524: DISABLE
46525: LD_INT 0
46527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
46528: LD_ADDR_VAR 0 1
46532: PUSH
46533: LD_INT 22
46535: PUSH
46536: LD_OWVAR 2
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 21
46547: PUSH
46548: LD_INT 2
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PPUSH
46559: CALL_OW 69
46563: ST_TO_ADDR
// if not tmp then
46564: LD_VAR 0 1
46568: NOT
46569: IFFALSE 46573
// exit ;
46571: GO 46599
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
46573: LD_VAR 0 1
46577: PUSH
46578: LD_INT 1
46580: PPUSH
46581: LD_VAR 0 1
46585: PPUSH
46586: CALL_OW 12
46590: ARRAY
46591: PPUSH
46592: LD_INT 60
46594: PPUSH
46595: CALL_OW 234
// end ;
46599: PPOPN 1
46601: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
46602: LD_EXP 28
46606: PUSH
46607: LD_EXP 58
46611: AND
46612: IFFALSE 46711
46614: GO 46616
46616: DISABLE
46617: LD_INT 0
46619: PPUSH
46620: PPUSH
// begin enable ;
46621: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
46622: LD_ADDR_VAR 0 1
46626: PUSH
46627: LD_INT 22
46629: PUSH
46630: LD_OWVAR 2
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 61
46641: PUSH
46642: EMPTY
46643: LIST
46644: PUSH
46645: LD_INT 33
46647: PUSH
46648: LD_INT 2
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: LIST
46659: PPUSH
46660: CALL_OW 69
46664: ST_TO_ADDR
// if not tmp then
46665: LD_VAR 0 1
46669: NOT
46670: IFFALSE 46674
// exit ;
46672: GO 46711
// for i in tmp do
46674: LD_ADDR_VAR 0 2
46678: PUSH
46679: LD_VAR 0 1
46683: PUSH
46684: FOR_IN
46685: IFFALSE 46709
// if IsControledBy ( i ) then
46687: LD_VAR 0 2
46691: PPUSH
46692: CALL_OW 312
46696: IFFALSE 46707
// ComUnlink ( i ) ;
46698: LD_VAR 0 2
46702: PPUSH
46703: CALL_OW 136
46707: GO 46684
46709: POP
46710: POP
// end ;
46711: PPOPN 2
46713: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
46714: LD_EXP 28
46718: PUSH
46719: LD_EXP 59
46723: AND
46724: IFFALSE 46864
46726: GO 46728
46728: DISABLE
46729: LD_INT 0
46731: PPUSH
46732: PPUSH
// begin ToLua ( displayPowell(); ) ;
46733: LD_STRING displayPowell();
46735: PPUSH
46736: CALL_OW 559
// uc_side := 0 ;
46740: LD_ADDR_OWVAR 20
46744: PUSH
46745: LD_INT 0
46747: ST_TO_ADDR
// uc_nation := 2 ;
46748: LD_ADDR_OWVAR 21
46752: PUSH
46753: LD_INT 2
46755: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
46756: LD_ADDR_OWVAR 37
46760: PUSH
46761: LD_INT 14
46763: ST_TO_ADDR
// vc_engine := engine_siberite ;
46764: LD_ADDR_OWVAR 39
46768: PUSH
46769: LD_INT 3
46771: ST_TO_ADDR
// vc_control := control_apeman ;
46772: LD_ADDR_OWVAR 38
46776: PUSH
46777: LD_INT 5
46779: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
46780: LD_ADDR_OWVAR 40
46784: PUSH
46785: LD_INT 29
46787: ST_TO_ADDR
// un := CreateVehicle ;
46788: LD_ADDR_VAR 0 2
46792: PUSH
46793: CALL_OW 45
46797: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
46798: LD_VAR 0 2
46802: PPUSH
46803: LD_INT 1
46805: PPUSH
46806: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
46810: LD_INT 35
46812: PPUSH
46813: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
46817: LD_VAR 0 2
46821: PPUSH
46822: LD_INT 22
46824: PUSH
46825: LD_OWVAR 2
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PPUSH
46834: CALL_OW 69
46838: PPUSH
46839: LD_VAR 0 2
46843: PPUSH
46844: CALL_OW 74
46848: PPUSH
46849: CALL_OW 115
// until IsDead ( un ) ;
46853: LD_VAR 0 2
46857: PPUSH
46858: CALL_OW 301
46862: IFFALSE 46810
// end ;
46864: PPOPN 2
46866: END
// every 0 0$1 trigger StreamModeActive and sStu do
46867: LD_EXP 28
46871: PUSH
46872: LD_EXP 67
46876: AND
46877: IFFALSE 46893
46879: GO 46881
46881: DISABLE
// begin ToLua ( displayStucuk(); ) ;
46882: LD_STRING displayStucuk();
46884: PPUSH
46885: CALL_OW 559
// ResetFog ;
46889: CALL_OW 335
// end ;
46893: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
46894: LD_EXP 28
46898: PUSH
46899: LD_EXP 60
46903: AND
46904: IFFALSE 47045
46906: GO 46908
46908: DISABLE
46909: LD_INT 0
46911: PPUSH
46912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
46913: LD_ADDR_VAR 0 2
46917: PUSH
46918: LD_INT 22
46920: PUSH
46921: LD_OWVAR 2
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 21
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PPUSH
46944: CALL_OW 69
46948: ST_TO_ADDR
// if not tmp then
46949: LD_VAR 0 2
46953: NOT
46954: IFFALSE 46958
// exit ;
46956: GO 47045
// un := tmp [ rand ( 1 , tmp ) ] ;
46958: LD_ADDR_VAR 0 1
46962: PUSH
46963: LD_VAR 0 2
46967: PUSH
46968: LD_INT 1
46970: PPUSH
46971: LD_VAR 0 2
46975: PPUSH
46976: CALL_OW 12
46980: ARRAY
46981: ST_TO_ADDR
// SetSide ( un , 0 ) ;
46982: LD_VAR 0 1
46986: PPUSH
46987: LD_INT 0
46989: PPUSH
46990: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
46994: LD_VAR 0 1
46998: PPUSH
46999: LD_OWVAR 3
47003: PUSH
47004: LD_VAR 0 1
47008: DIFF
47009: PPUSH
47010: LD_VAR 0 1
47014: PPUSH
47015: CALL_OW 74
47019: PPUSH
47020: CALL_OW 115
// wait ( 0 0$20 ) ;
47024: LD_INT 700
47026: PPUSH
47027: CALL_OW 67
// SetSide ( un , your_side ) ;
47031: LD_VAR 0 1
47035: PPUSH
47036: LD_OWVAR 2
47040: PPUSH
47041: CALL_OW 235
// end ;
47045: PPOPN 2
47047: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
47048: LD_EXP 28
47052: PUSH
47053: LD_EXP 61
47057: AND
47058: IFFALSE 47164
47060: GO 47062
47062: DISABLE
47063: LD_INT 0
47065: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47066: LD_ADDR_VAR 0 1
47070: PUSH
47071: LD_INT 22
47073: PUSH
47074: LD_OWVAR 2
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: LD_INT 30
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 30
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: LIST
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PPUSH
47115: CALL_OW 69
47119: ST_TO_ADDR
// if not depot then
47120: LD_VAR 0 1
47124: NOT
47125: IFFALSE 47129
// exit ;
47127: GO 47164
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
47129: LD_VAR 0 1
47133: PUSH
47134: LD_INT 1
47136: ARRAY
47137: PPUSH
47138: CALL_OW 250
47142: PPUSH
47143: LD_VAR 0 1
47147: PUSH
47148: LD_INT 1
47150: ARRAY
47151: PPUSH
47152: CALL_OW 251
47156: PPUSH
47157: LD_INT 70
47159: PPUSH
47160: CALL_OW 495
// end ;
47164: PPOPN 1
47166: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
47167: LD_EXP 28
47171: PUSH
47172: LD_EXP 62
47176: AND
47177: IFFALSE 47388
47179: GO 47181
47181: DISABLE
47182: LD_INT 0
47184: PPUSH
47185: PPUSH
47186: PPUSH
47187: PPUSH
47188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
47189: LD_ADDR_VAR 0 5
47193: PUSH
47194: LD_INT 22
47196: PUSH
47197: LD_OWVAR 2
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 21
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PPUSH
47220: CALL_OW 69
47224: ST_TO_ADDR
// if not tmp then
47225: LD_VAR 0 5
47229: NOT
47230: IFFALSE 47234
// exit ;
47232: GO 47388
// for i in tmp do
47234: LD_ADDR_VAR 0 1
47238: PUSH
47239: LD_VAR 0 5
47243: PUSH
47244: FOR_IN
47245: IFFALSE 47386
// begin d := rand ( 0 , 5 ) ;
47247: LD_ADDR_VAR 0 4
47251: PUSH
47252: LD_INT 0
47254: PPUSH
47255: LD_INT 5
47257: PPUSH
47258: CALL_OW 12
47262: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
47263: LD_ADDR_VAR 0 2
47267: PUSH
47268: LD_VAR 0 1
47272: PPUSH
47273: CALL_OW 250
47277: PPUSH
47278: LD_VAR 0 4
47282: PPUSH
47283: LD_INT 3
47285: PPUSH
47286: LD_INT 12
47288: PPUSH
47289: CALL_OW 12
47293: PPUSH
47294: CALL_OW 272
47298: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
47299: LD_ADDR_VAR 0 3
47303: PUSH
47304: LD_VAR 0 1
47308: PPUSH
47309: CALL_OW 251
47313: PPUSH
47314: LD_VAR 0 4
47318: PPUSH
47319: LD_INT 3
47321: PPUSH
47322: LD_INT 12
47324: PPUSH
47325: CALL_OW 12
47329: PPUSH
47330: CALL_OW 273
47334: ST_TO_ADDR
// if ValidHex ( x , y ) then
47335: LD_VAR 0 2
47339: PPUSH
47340: LD_VAR 0 3
47344: PPUSH
47345: CALL_OW 488
47349: IFFALSE 47384
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
47351: LD_VAR 0 1
47355: PPUSH
47356: LD_VAR 0 2
47360: PPUSH
47361: LD_VAR 0 3
47365: PPUSH
47366: LD_INT 3
47368: PPUSH
47369: LD_INT 6
47371: PPUSH
47372: CALL_OW 12
47376: PPUSH
47377: LD_INT 1
47379: PPUSH
47380: CALL_OW 483
// end ;
47384: GO 47244
47386: POP
47387: POP
// end ;
47388: PPOPN 5
47390: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
47391: LD_EXP 28
47395: PUSH
47396: LD_EXP 63
47400: AND
47401: IFFALSE 47495
47403: GO 47405
47405: DISABLE
47406: LD_INT 0
47408: PPUSH
47409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
47410: LD_ADDR_VAR 0 2
47414: PUSH
47415: LD_INT 22
47417: PUSH
47418: LD_OWVAR 2
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 32
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 21
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: LIST
47451: PPUSH
47452: CALL_OW 69
47456: ST_TO_ADDR
// if not tmp then
47457: LD_VAR 0 2
47461: NOT
47462: IFFALSE 47466
// exit ;
47464: GO 47495
// for i in tmp do
47466: LD_ADDR_VAR 0 1
47470: PUSH
47471: LD_VAR 0 2
47475: PUSH
47476: FOR_IN
47477: IFFALSE 47493
// SetFuel ( i , 0 ) ;
47479: LD_VAR 0 1
47483: PPUSH
47484: LD_INT 0
47486: PPUSH
47487: CALL_OW 240
47491: GO 47476
47493: POP
47494: POP
// end ;
47495: PPOPN 2
47497: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
47498: LD_EXP 28
47502: PUSH
47503: LD_EXP 64
47507: AND
47508: IFFALSE 47574
47510: GO 47512
47512: DISABLE
47513: LD_INT 0
47515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
47516: LD_ADDR_VAR 0 1
47520: PUSH
47521: LD_INT 22
47523: PUSH
47524: LD_OWVAR 2
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 30
47535: PUSH
47536: LD_INT 29
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PPUSH
47547: CALL_OW 69
47551: ST_TO_ADDR
// if not tmp then
47552: LD_VAR 0 1
47556: NOT
47557: IFFALSE 47561
// exit ;
47559: GO 47574
// DestroyUnit ( tmp [ 1 ] ) ;
47561: LD_VAR 0 1
47565: PUSH
47566: LD_INT 1
47568: ARRAY
47569: PPUSH
47570: CALL_OW 65
// end ;
47574: PPOPN 1
47576: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
47577: LD_EXP 28
47581: PUSH
47582: LD_EXP 66
47586: AND
47587: IFFALSE 47716
47589: GO 47591
47591: DISABLE
47592: LD_INT 0
47594: PPUSH
// begin uc_side := 0 ;
47595: LD_ADDR_OWVAR 20
47599: PUSH
47600: LD_INT 0
47602: ST_TO_ADDR
// uc_nation := nation_arabian ;
47603: LD_ADDR_OWVAR 21
47607: PUSH
47608: LD_INT 2
47610: ST_TO_ADDR
// hc_gallery :=  ;
47611: LD_ADDR_OWVAR 33
47615: PUSH
47616: LD_STRING 
47618: ST_TO_ADDR
// hc_name :=  ;
47619: LD_ADDR_OWVAR 26
47623: PUSH
47624: LD_STRING 
47626: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
47627: LD_INT 1
47629: PPUSH
47630: LD_INT 11
47632: PPUSH
47633: LD_INT 10
47635: PPUSH
47636: CALL_OW 380
// un := CreateHuman ;
47640: LD_ADDR_VAR 0 1
47644: PUSH
47645: CALL_OW 44
47649: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
47650: LD_VAR 0 1
47654: PPUSH
47655: LD_INT 1
47657: PPUSH
47658: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
47662: LD_INT 35
47664: PPUSH
47665: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
47669: LD_VAR 0 1
47673: PPUSH
47674: LD_INT 22
47676: PUSH
47677: LD_OWVAR 2
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PPUSH
47686: CALL_OW 69
47690: PPUSH
47691: LD_VAR 0 1
47695: PPUSH
47696: CALL_OW 74
47700: PPUSH
47701: CALL_OW 115
// until IsDead ( un ) ;
47705: LD_VAR 0 1
47709: PPUSH
47710: CALL_OW 301
47714: IFFALSE 47662
// end ;
47716: PPOPN 1
47718: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
47719: LD_EXP 28
47723: PUSH
47724: LD_EXP 68
47728: AND
47729: IFFALSE 47741
47731: GO 47733
47733: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
47734: LD_STRING earthquake(getX(game), 0, 32)
47736: PPUSH
47737: CALL_OW 559
47741: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
47742: LD_EXP 28
47746: PUSH
47747: LD_EXP 69
47751: AND
47752: IFFALSE 47843
47754: GO 47756
47756: DISABLE
47757: LD_INT 0
47759: PPUSH
// begin enable ;
47760: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
47761: LD_ADDR_VAR 0 1
47765: PUSH
47766: LD_INT 22
47768: PUSH
47769: LD_OWVAR 2
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 21
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 33
47790: PUSH
47791: LD_INT 3
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: LIST
47802: PPUSH
47803: CALL_OW 69
47807: ST_TO_ADDR
// if not tmp then
47808: LD_VAR 0 1
47812: NOT
47813: IFFALSE 47817
// exit ;
47815: GO 47843
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
47817: LD_VAR 0 1
47821: PUSH
47822: LD_INT 1
47824: PPUSH
47825: LD_VAR 0 1
47829: PPUSH
47830: CALL_OW 12
47834: ARRAY
47835: PPUSH
47836: LD_INT 1
47838: PPUSH
47839: CALL_OW 234
// end ;
47843: PPOPN 1
47845: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
47846: LD_EXP 28
47850: PUSH
47851: LD_EXP 70
47855: AND
47856: IFFALSE 47997
47858: GO 47860
47860: DISABLE
47861: LD_INT 0
47863: PPUSH
47864: PPUSH
47865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
47866: LD_ADDR_VAR 0 3
47870: PUSH
47871: LD_INT 22
47873: PUSH
47874: LD_OWVAR 2
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 25
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PPUSH
47897: CALL_OW 69
47901: ST_TO_ADDR
// if not tmp then
47902: LD_VAR 0 3
47906: NOT
47907: IFFALSE 47911
// exit ;
47909: GO 47997
// un := tmp [ rand ( 1 , tmp ) ] ;
47911: LD_ADDR_VAR 0 2
47915: PUSH
47916: LD_VAR 0 3
47920: PUSH
47921: LD_INT 1
47923: PPUSH
47924: LD_VAR 0 3
47928: PPUSH
47929: CALL_OW 12
47933: ARRAY
47934: ST_TO_ADDR
// if Crawls ( un ) then
47935: LD_VAR 0 2
47939: PPUSH
47940: CALL_OW 318
47944: IFFALSE 47955
// ComWalk ( un ) ;
47946: LD_VAR 0 2
47950: PPUSH
47951: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
47955: LD_VAR 0 2
47959: PPUSH
47960: LD_INT 9
47962: PPUSH
47963: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
47967: LD_INT 28
47969: PPUSH
47970: LD_OWVAR 2
47974: PPUSH
47975: LD_INT 2
47977: PPUSH
47978: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
47982: LD_INT 29
47984: PPUSH
47985: LD_OWVAR 2
47989: PPUSH
47990: LD_INT 2
47992: PPUSH
47993: CALL_OW 322
// end ;
47997: PPOPN 3
47999: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
48000: LD_EXP 28
48004: PUSH
48005: LD_EXP 71
48009: AND
48010: IFFALSE 48121
48012: GO 48014
48014: DISABLE
48015: LD_INT 0
48017: PPUSH
48018: PPUSH
48019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
48020: LD_ADDR_VAR 0 3
48024: PUSH
48025: LD_INT 22
48027: PUSH
48028: LD_OWVAR 2
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 25
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PPUSH
48051: CALL_OW 69
48055: ST_TO_ADDR
// if not tmp then
48056: LD_VAR 0 3
48060: NOT
48061: IFFALSE 48065
// exit ;
48063: GO 48121
// un := tmp [ rand ( 1 , tmp ) ] ;
48065: LD_ADDR_VAR 0 2
48069: PUSH
48070: LD_VAR 0 3
48074: PUSH
48075: LD_INT 1
48077: PPUSH
48078: LD_VAR 0 3
48082: PPUSH
48083: CALL_OW 12
48087: ARRAY
48088: ST_TO_ADDR
// if Crawls ( un ) then
48089: LD_VAR 0 2
48093: PPUSH
48094: CALL_OW 318
48098: IFFALSE 48109
// ComWalk ( un ) ;
48100: LD_VAR 0 2
48104: PPUSH
48105: CALL_OW 138
// SetClass ( un , class_mortar ) ;
48109: LD_VAR 0 2
48113: PPUSH
48114: LD_INT 8
48116: PPUSH
48117: CALL_OW 336
// end ;
48121: PPOPN 3
48123: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
48124: LD_EXP 28
48128: PUSH
48129: LD_EXP 72
48133: AND
48134: IFFALSE 48278
48136: GO 48138
48138: DISABLE
48139: LD_INT 0
48141: PPUSH
48142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
48143: LD_ADDR_VAR 0 2
48147: PUSH
48148: LD_INT 22
48150: PUSH
48151: LD_OWVAR 2
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 21
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: LD_INT 34
48175: PUSH
48176: LD_INT 12
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 34
48185: PUSH
48186: LD_INT 51
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 34
48195: PUSH
48196: LD_INT 32
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: LIST
48213: PPUSH
48214: CALL_OW 69
48218: ST_TO_ADDR
// if not tmp then
48219: LD_VAR 0 2
48223: NOT
48224: IFFALSE 48228
// exit ;
48226: GO 48278
// for i in tmp do
48228: LD_ADDR_VAR 0 1
48232: PUSH
48233: LD_VAR 0 2
48237: PUSH
48238: FOR_IN
48239: IFFALSE 48276
// if GetCargo ( i , mat_artifact ) = 0 then
48241: LD_VAR 0 1
48245: PPUSH
48246: LD_INT 4
48248: PPUSH
48249: CALL_OW 289
48253: PUSH
48254: LD_INT 0
48256: EQUAL
48257: IFFALSE 48274
// SetCargo ( i , mat_siberit , 100 ) ;
48259: LD_VAR 0 1
48263: PPUSH
48264: LD_INT 3
48266: PPUSH
48267: LD_INT 100
48269: PPUSH
48270: CALL_OW 290
48274: GO 48238
48276: POP
48277: POP
// end ;
48278: PPOPN 2
48280: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
48281: LD_EXP 28
48285: PUSH
48286: LD_EXP 73
48290: AND
48291: IFFALSE 48474
48293: GO 48295
48295: DISABLE
48296: LD_INT 0
48298: PPUSH
48299: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
48300: LD_ADDR_VAR 0 2
48304: PUSH
48305: LD_INT 22
48307: PUSH
48308: LD_OWVAR 2
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PPUSH
48317: CALL_OW 69
48321: ST_TO_ADDR
// if not tmp then
48322: LD_VAR 0 2
48326: NOT
48327: IFFALSE 48331
// exit ;
48329: GO 48474
// for i := 1 to 2 do
48331: LD_ADDR_VAR 0 1
48335: PUSH
48336: DOUBLE
48337: LD_INT 1
48339: DEC
48340: ST_TO_ADDR
48341: LD_INT 2
48343: PUSH
48344: FOR_TO
48345: IFFALSE 48472
// begin uc_side := your_side ;
48347: LD_ADDR_OWVAR 20
48351: PUSH
48352: LD_OWVAR 2
48356: ST_TO_ADDR
// uc_nation := nation_american ;
48357: LD_ADDR_OWVAR 21
48361: PUSH
48362: LD_INT 1
48364: ST_TO_ADDR
// vc_chassis := us_morphling ;
48365: LD_ADDR_OWVAR 37
48369: PUSH
48370: LD_INT 5
48372: ST_TO_ADDR
// vc_engine := engine_siberite ;
48373: LD_ADDR_OWVAR 39
48377: PUSH
48378: LD_INT 3
48380: ST_TO_ADDR
// vc_control := control_computer ;
48381: LD_ADDR_OWVAR 38
48385: PUSH
48386: LD_INT 3
48388: ST_TO_ADDR
// vc_weapon := us_double_laser ;
48389: LD_ADDR_OWVAR 40
48393: PUSH
48394: LD_INT 10
48396: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
48397: LD_VAR 0 2
48401: PUSH
48402: LD_INT 1
48404: ARRAY
48405: PPUSH
48406: CALL_OW 310
48410: NOT
48411: IFFALSE 48458
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
48413: CALL_OW 45
48417: PPUSH
48418: LD_VAR 0 2
48422: PUSH
48423: LD_INT 1
48425: ARRAY
48426: PPUSH
48427: CALL_OW 250
48431: PPUSH
48432: LD_VAR 0 2
48436: PUSH
48437: LD_INT 1
48439: ARRAY
48440: PPUSH
48441: CALL_OW 251
48445: PPUSH
48446: LD_INT 12
48448: PPUSH
48449: LD_INT 1
48451: PPUSH
48452: CALL_OW 50
48456: GO 48470
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
48458: CALL_OW 45
48462: PPUSH
48463: LD_INT 1
48465: PPUSH
48466: CALL_OW 51
// end ;
48470: GO 48344
48472: POP
48473: POP
// end ;
48474: PPOPN 2
48476: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
48477: LD_EXP 28
48481: PUSH
48482: LD_EXP 74
48486: AND
48487: IFFALSE 48709
48489: GO 48491
48491: DISABLE
48492: LD_INT 0
48494: PPUSH
48495: PPUSH
48496: PPUSH
48497: PPUSH
48498: PPUSH
48499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
48500: LD_ADDR_VAR 0 6
48504: PUSH
48505: LD_INT 22
48507: PUSH
48508: LD_OWVAR 2
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 21
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 3
48529: PUSH
48530: LD_INT 23
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: LIST
48548: PPUSH
48549: CALL_OW 69
48553: ST_TO_ADDR
// if not tmp then
48554: LD_VAR 0 6
48558: NOT
48559: IFFALSE 48563
// exit ;
48561: GO 48709
// s1 := rand ( 1 , 4 ) ;
48563: LD_ADDR_VAR 0 2
48567: PUSH
48568: LD_INT 1
48570: PPUSH
48571: LD_INT 4
48573: PPUSH
48574: CALL_OW 12
48578: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
48579: LD_ADDR_VAR 0 4
48583: PUSH
48584: LD_VAR 0 6
48588: PUSH
48589: LD_INT 1
48591: ARRAY
48592: PPUSH
48593: LD_VAR 0 2
48597: PPUSH
48598: CALL_OW 259
48602: ST_TO_ADDR
// if s1 = 1 then
48603: LD_VAR 0 2
48607: PUSH
48608: LD_INT 1
48610: EQUAL
48611: IFFALSE 48631
// s2 := rand ( 2 , 4 ) else
48613: LD_ADDR_VAR 0 3
48617: PUSH
48618: LD_INT 2
48620: PPUSH
48621: LD_INT 4
48623: PPUSH
48624: CALL_OW 12
48628: ST_TO_ADDR
48629: GO 48639
// s2 := 1 ;
48631: LD_ADDR_VAR 0 3
48635: PUSH
48636: LD_INT 1
48638: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
48639: LD_ADDR_VAR 0 5
48643: PUSH
48644: LD_VAR 0 6
48648: PUSH
48649: LD_INT 1
48651: ARRAY
48652: PPUSH
48653: LD_VAR 0 3
48657: PPUSH
48658: CALL_OW 259
48662: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
48663: LD_VAR 0 6
48667: PUSH
48668: LD_INT 1
48670: ARRAY
48671: PPUSH
48672: LD_VAR 0 2
48676: PPUSH
48677: LD_VAR 0 5
48681: PPUSH
48682: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
48686: LD_VAR 0 6
48690: PUSH
48691: LD_INT 1
48693: ARRAY
48694: PPUSH
48695: LD_VAR 0 3
48699: PPUSH
48700: LD_VAR 0 4
48704: PPUSH
48705: CALL_OW 237
// end ;
48709: PPOPN 6
48711: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
48712: LD_EXP 28
48716: PUSH
48717: LD_EXP 75
48721: AND
48722: IFFALSE 48801
48724: GO 48726
48726: DISABLE
48727: LD_INT 0
48729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
48730: LD_ADDR_VAR 0 1
48734: PUSH
48735: LD_INT 22
48737: PUSH
48738: LD_OWVAR 2
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 30
48749: PUSH
48750: LD_INT 3
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PPUSH
48761: CALL_OW 69
48765: ST_TO_ADDR
// if not tmp then
48766: LD_VAR 0 1
48770: NOT
48771: IFFALSE 48775
// exit ;
48773: GO 48801
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
48775: LD_VAR 0 1
48779: PUSH
48780: LD_INT 1
48782: PPUSH
48783: LD_VAR 0 1
48787: PPUSH
48788: CALL_OW 12
48792: ARRAY
48793: PPUSH
48794: LD_INT 1
48796: PPUSH
48797: CALL_OW 234
// end ;
48801: PPOPN 1
48803: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
48804: LD_EXP 28
48808: PUSH
48809: LD_EXP 76
48813: AND
48814: IFFALSE 48926
48816: GO 48818
48818: DISABLE
48819: LD_INT 0
48821: PPUSH
48822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
48823: LD_ADDR_VAR 0 2
48827: PUSH
48828: LD_INT 22
48830: PUSH
48831: LD_OWVAR 2
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: LD_INT 30
48845: PUSH
48846: LD_INT 27
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 30
48855: PUSH
48856: LD_INT 26
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 30
48865: PUSH
48866: LD_INT 28
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PPUSH
48883: CALL_OW 69
48887: ST_TO_ADDR
// if not tmp then
48888: LD_VAR 0 2
48892: NOT
48893: IFFALSE 48897
// exit ;
48895: GO 48926
// for i in tmp do
48897: LD_ADDR_VAR 0 1
48901: PUSH
48902: LD_VAR 0 2
48906: PUSH
48907: FOR_IN
48908: IFFALSE 48924
// SetLives ( i , 1 ) ;
48910: LD_VAR 0 1
48914: PPUSH
48915: LD_INT 1
48917: PPUSH
48918: CALL_OW 234
48922: GO 48907
48924: POP
48925: POP
// end ;
48926: PPOPN 2
48928: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
48929: LD_EXP 28
48933: PUSH
48934: LD_EXP 77
48938: AND
48939: IFFALSE 49213
48941: GO 48943
48943: DISABLE
48944: LD_INT 0
48946: PPUSH
48947: PPUSH
48948: PPUSH
// begin i := rand ( 1 , 7 ) ;
48949: LD_ADDR_VAR 0 1
48953: PUSH
48954: LD_INT 1
48956: PPUSH
48957: LD_INT 7
48959: PPUSH
48960: CALL_OW 12
48964: ST_TO_ADDR
// case i of 1 :
48965: LD_VAR 0 1
48969: PUSH
48970: LD_INT 1
48972: DOUBLE
48973: EQUAL
48974: IFTRUE 48978
48976: GO 48988
48978: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
48979: LD_STRING earthquake(getX(game), 0, 32)
48981: PPUSH
48982: CALL_OW 559
48986: GO 49213
48988: LD_INT 2
48990: DOUBLE
48991: EQUAL
48992: IFTRUE 48996
48994: GO 49010
48996: POP
// begin ToLua ( displayStucuk(); ) ;
48997: LD_STRING displayStucuk();
48999: PPUSH
49000: CALL_OW 559
// ResetFog ;
49004: CALL_OW 335
// end ; 3 :
49008: GO 49213
49010: LD_INT 3
49012: DOUBLE
49013: EQUAL
49014: IFTRUE 49018
49016: GO 49122
49018: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
49019: LD_ADDR_VAR 0 2
49023: PUSH
49024: LD_INT 22
49026: PUSH
49027: LD_OWVAR 2
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 25
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PPUSH
49050: CALL_OW 69
49054: ST_TO_ADDR
// if not tmp then
49055: LD_VAR 0 2
49059: NOT
49060: IFFALSE 49064
// exit ;
49062: GO 49213
// un := tmp [ rand ( 1 , tmp ) ] ;
49064: LD_ADDR_VAR 0 3
49068: PUSH
49069: LD_VAR 0 2
49073: PUSH
49074: LD_INT 1
49076: PPUSH
49077: LD_VAR 0 2
49081: PPUSH
49082: CALL_OW 12
49086: ARRAY
49087: ST_TO_ADDR
// if Crawls ( un ) then
49088: LD_VAR 0 3
49092: PPUSH
49093: CALL_OW 318
49097: IFFALSE 49108
// ComWalk ( un ) ;
49099: LD_VAR 0 3
49103: PPUSH
49104: CALL_OW 138
// SetClass ( un , class_mortar ) ;
49108: LD_VAR 0 3
49112: PPUSH
49113: LD_INT 8
49115: PPUSH
49116: CALL_OW 336
// end ; 4 :
49120: GO 49213
49122: LD_INT 4
49124: DOUBLE
49125: EQUAL
49126: IFTRUE 49130
49128: GO 49191
49130: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
49131: LD_ADDR_VAR 0 2
49135: PUSH
49136: LD_INT 22
49138: PUSH
49139: LD_OWVAR 2
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 30
49150: PUSH
49151: LD_INT 29
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PPUSH
49162: CALL_OW 69
49166: ST_TO_ADDR
// if not tmp then
49167: LD_VAR 0 2
49171: NOT
49172: IFFALSE 49176
// exit ;
49174: GO 49213
// DestroyUnit ( tmp [ 1 ] ) ;
49176: LD_VAR 0 2
49180: PUSH
49181: LD_INT 1
49183: ARRAY
49184: PPUSH
49185: CALL_OW 65
// end ; 5 .. 7 :
49189: GO 49213
49191: LD_INT 5
49193: DOUBLE
49194: GREATEREQUAL
49195: IFFALSE 49203
49197: LD_INT 7
49199: DOUBLE
49200: LESSEQUAL
49201: IFTRUE 49205
49203: GO 49212
49205: POP
// StreamSibBomb ; end ;
49206: CALL 45463 0 0
49210: GO 49213
49212: POP
// end ;
49213: PPOPN 3
49215: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
49216: LD_EXP 28
49220: PUSH
49221: LD_EXP 78
49225: AND
49226: IFFALSE 49382
49228: GO 49230
49230: DISABLE
49231: LD_INT 0
49233: PPUSH
49234: PPUSH
49235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
49236: LD_ADDR_VAR 0 2
49240: PUSH
49241: LD_INT 81
49243: PUSH
49244: LD_OWVAR 2
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: LD_INT 21
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 21
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: LIST
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PPUSH
49285: CALL_OW 69
49289: ST_TO_ADDR
// if not tmp then
49290: LD_VAR 0 2
49294: NOT
49295: IFFALSE 49299
// exit ;
49297: GO 49382
// p := 0 ;
49299: LD_ADDR_VAR 0 3
49303: PUSH
49304: LD_INT 0
49306: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49307: LD_INT 35
49309: PPUSH
49310: CALL_OW 67
// p := p + 1 ;
49314: LD_ADDR_VAR 0 3
49318: PUSH
49319: LD_VAR 0 3
49323: PUSH
49324: LD_INT 1
49326: PLUS
49327: ST_TO_ADDR
// for i in tmp do
49328: LD_ADDR_VAR 0 1
49332: PUSH
49333: LD_VAR 0 2
49337: PUSH
49338: FOR_IN
49339: IFFALSE 49370
// if GetLives ( i ) < 1000 then
49341: LD_VAR 0 1
49345: PPUSH
49346: CALL_OW 256
49350: PUSH
49351: LD_INT 1000
49353: LESS
49354: IFFALSE 49368
// SetLives ( i , 1000 ) ;
49356: LD_VAR 0 1
49360: PPUSH
49361: LD_INT 1000
49363: PPUSH
49364: CALL_OW 234
49368: GO 49338
49370: POP
49371: POP
// until p > 20 ;
49372: LD_VAR 0 3
49376: PUSH
49377: LD_INT 20
49379: GREATER
49380: IFFALSE 49307
// end ;
49382: PPOPN 3
49384: END
// every 0 0$1 trigger StreamModeActive and sTime do
49385: LD_EXP 28
49389: PUSH
49390: LD_EXP 79
49394: AND
49395: IFFALSE 49430
49397: GO 49399
49399: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
49400: LD_INT 28
49402: PPUSH
49403: LD_OWVAR 2
49407: PPUSH
49408: LD_INT 2
49410: PPUSH
49411: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
49415: LD_INT 30
49417: PPUSH
49418: LD_OWVAR 2
49422: PPUSH
49423: LD_INT 2
49425: PPUSH
49426: CALL_OW 322
// end ;
49430: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
49431: LD_EXP 28
49435: PUSH
49436: LD_EXP 80
49440: AND
49441: IFFALSE 49562
49443: GO 49445
49445: DISABLE
49446: LD_INT 0
49448: PPUSH
49449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
49450: LD_ADDR_VAR 0 2
49454: PUSH
49455: LD_INT 22
49457: PUSH
49458: LD_OWVAR 2
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 21
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 3
49479: PUSH
49480: LD_INT 23
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: LIST
49498: PPUSH
49499: CALL_OW 69
49503: ST_TO_ADDR
// if not tmp then
49504: LD_VAR 0 2
49508: NOT
49509: IFFALSE 49513
// exit ;
49511: GO 49562
// for i in tmp do
49513: LD_ADDR_VAR 0 1
49517: PUSH
49518: LD_VAR 0 2
49522: PUSH
49523: FOR_IN
49524: IFFALSE 49560
// begin if Crawls ( i ) then
49526: LD_VAR 0 1
49530: PPUSH
49531: CALL_OW 318
49535: IFFALSE 49546
// ComWalk ( i ) ;
49537: LD_VAR 0 1
49541: PPUSH
49542: CALL_OW 138
// SetClass ( i , 2 ) ;
49546: LD_VAR 0 1
49550: PPUSH
49551: LD_INT 2
49553: PPUSH
49554: CALL_OW 336
// end ;
49558: GO 49523
49560: POP
49561: POP
// end ;
49562: PPOPN 2
49564: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
49565: LD_EXP 28
49569: PUSH
49570: LD_EXP 81
49574: AND
49575: IFFALSE 49856
49577: GO 49579
49579: DISABLE
49580: LD_INT 0
49582: PPUSH
49583: PPUSH
49584: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
49585: LD_OWVAR 2
49589: PPUSH
49590: LD_INT 9
49592: PPUSH
49593: LD_INT 1
49595: PPUSH
49596: LD_INT 1
49598: PPUSH
49599: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
49603: LD_INT 9
49605: PPUSH
49606: LD_OWVAR 2
49610: PPUSH
49611: CALL_OW 343
// uc_side := 9 ;
49615: LD_ADDR_OWVAR 20
49619: PUSH
49620: LD_INT 9
49622: ST_TO_ADDR
// uc_nation := 2 ;
49623: LD_ADDR_OWVAR 21
49627: PUSH
49628: LD_INT 2
49630: ST_TO_ADDR
// hc_name := Dark Warrior ;
49631: LD_ADDR_OWVAR 26
49635: PUSH
49636: LD_STRING Dark Warrior
49638: ST_TO_ADDR
// hc_gallery :=  ;
49639: LD_ADDR_OWVAR 33
49643: PUSH
49644: LD_STRING 
49646: ST_TO_ADDR
// hc_noskilllimit := true ;
49647: LD_ADDR_OWVAR 76
49651: PUSH
49652: LD_INT 1
49654: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
49655: LD_ADDR_OWVAR 31
49659: PUSH
49660: LD_INT 30
49662: PUSH
49663: LD_INT 30
49665: PUSH
49666: LD_INT 30
49668: PUSH
49669: LD_INT 30
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: ST_TO_ADDR
// un := CreateHuman ;
49678: LD_ADDR_VAR 0 3
49682: PUSH
49683: CALL_OW 44
49687: ST_TO_ADDR
// hc_noskilllimit := false ;
49688: LD_ADDR_OWVAR 76
49692: PUSH
49693: LD_INT 0
49695: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
49696: LD_VAR 0 3
49700: PPUSH
49701: LD_INT 1
49703: PPUSH
49704: CALL_OW 51
// p := 0 ;
49708: LD_ADDR_VAR 0 2
49712: PUSH
49713: LD_INT 0
49715: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49716: LD_INT 35
49718: PPUSH
49719: CALL_OW 67
// p := p + 1 ;
49723: LD_ADDR_VAR 0 2
49727: PUSH
49728: LD_VAR 0 2
49732: PUSH
49733: LD_INT 1
49735: PLUS
49736: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
49737: LD_VAR 0 3
49741: PPUSH
49742: CALL_OW 256
49746: PUSH
49747: LD_INT 1000
49749: LESS
49750: IFFALSE 49764
// SetLives ( un , 1000 ) ;
49752: LD_VAR 0 3
49756: PPUSH
49757: LD_INT 1000
49759: PPUSH
49760: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
49764: LD_VAR 0 3
49768: PPUSH
49769: LD_INT 81
49771: PUSH
49772: LD_OWVAR 2
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 91
49783: PUSH
49784: LD_VAR 0 3
49788: PUSH
49789: LD_INT 30
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: LIST
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PPUSH
49801: CALL_OW 69
49805: PPUSH
49806: LD_VAR 0 3
49810: PPUSH
49811: CALL_OW 74
49815: PPUSH
49816: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
49820: LD_VAR 0 2
49824: PUSH
49825: LD_INT 60
49827: GREATER
49828: PUSH
49829: LD_VAR 0 3
49833: PPUSH
49834: CALL_OW 301
49838: OR
49839: IFFALSE 49716
// if un then
49841: LD_VAR 0 3
49845: IFFALSE 49856
// RemoveUnit ( un ) ;
49847: LD_VAR 0 3
49851: PPUSH
49852: CALL_OW 64
// end ;
49856: PPOPN 3
49858: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
49859: LD_INT 0
49861: PPUSH
// case cmd of 301 :
49862: LD_VAR 0 1
49866: PUSH
49867: LD_INT 301
49869: DOUBLE
49870: EQUAL
49871: IFTRUE 49875
49873: GO 49907
49875: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
49876: LD_VAR 0 6
49880: PPUSH
49881: LD_VAR 0 7
49885: PPUSH
49886: LD_VAR 0 8
49890: PPUSH
49891: LD_VAR 0 4
49895: PPUSH
49896: LD_VAR 0 5
49900: PPUSH
49901: CALL 51108 0 5
49905: GO 50028
49907: LD_INT 302
49909: DOUBLE
49910: EQUAL
49911: IFTRUE 49915
49913: GO 49952
49915: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
49916: LD_VAR 0 6
49920: PPUSH
49921: LD_VAR 0 7
49925: PPUSH
49926: LD_VAR 0 8
49930: PPUSH
49931: LD_VAR 0 9
49935: PPUSH
49936: LD_VAR 0 4
49940: PPUSH
49941: LD_VAR 0 5
49945: PPUSH
49946: CALL 51199 0 6
49950: GO 50028
49952: LD_INT 303
49954: DOUBLE
49955: EQUAL
49956: IFTRUE 49960
49958: GO 49997
49960: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
49961: LD_VAR 0 6
49965: PPUSH
49966: LD_VAR 0 7
49970: PPUSH
49971: LD_VAR 0 8
49975: PPUSH
49976: LD_VAR 0 9
49980: PPUSH
49981: LD_VAR 0 4
49985: PPUSH
49986: LD_VAR 0 5
49990: PPUSH
49991: CALL 50033 0 6
49995: GO 50028
49997: LD_INT 304
49999: DOUBLE
50000: EQUAL
50001: IFTRUE 50005
50003: GO 50027
50005: POP
// hHackTeleport ( unit , x , y ) ; end ;
50006: LD_VAR 0 2
50010: PPUSH
50011: LD_VAR 0 4
50015: PPUSH
50016: LD_VAR 0 5
50020: PPUSH
50021: CALL 51792 0 3
50025: GO 50028
50027: POP
// end ;
50028: LD_VAR 0 12
50032: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
50033: LD_INT 0
50035: PPUSH
50036: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
50037: LD_VAR 0 1
50041: PUSH
50042: LD_INT 1
50044: LESS
50045: PUSH
50046: LD_VAR 0 1
50050: PUSH
50051: LD_INT 3
50053: GREATER
50054: OR
50055: PUSH
50056: LD_VAR 0 5
50060: PPUSH
50061: LD_VAR 0 6
50065: PPUSH
50066: CALL_OW 428
50070: OR
50071: IFFALSE 50075
// exit ;
50073: GO 50795
// uc_side := your_side ;
50075: LD_ADDR_OWVAR 20
50079: PUSH
50080: LD_OWVAR 2
50084: ST_TO_ADDR
// uc_nation := nation ;
50085: LD_ADDR_OWVAR 21
50089: PUSH
50090: LD_VAR 0 1
50094: ST_TO_ADDR
// bc_level = 1 ;
50095: LD_ADDR_OWVAR 43
50099: PUSH
50100: LD_INT 1
50102: ST_TO_ADDR
// case btype of 1 :
50103: LD_VAR 0 2
50107: PUSH
50108: LD_INT 1
50110: DOUBLE
50111: EQUAL
50112: IFTRUE 50116
50114: GO 50127
50116: POP
// bc_type := b_depot ; 2 :
50117: LD_ADDR_OWVAR 42
50121: PUSH
50122: LD_INT 0
50124: ST_TO_ADDR
50125: GO 50739
50127: LD_INT 2
50129: DOUBLE
50130: EQUAL
50131: IFTRUE 50135
50133: GO 50146
50135: POP
// bc_type := b_warehouse ; 3 :
50136: LD_ADDR_OWVAR 42
50140: PUSH
50141: LD_INT 1
50143: ST_TO_ADDR
50144: GO 50739
50146: LD_INT 3
50148: DOUBLE
50149: EQUAL
50150: IFTRUE 50154
50152: GO 50165
50154: POP
// bc_type := b_lab ; 4 .. 9 :
50155: LD_ADDR_OWVAR 42
50159: PUSH
50160: LD_INT 6
50162: ST_TO_ADDR
50163: GO 50739
50165: LD_INT 4
50167: DOUBLE
50168: GREATEREQUAL
50169: IFFALSE 50177
50171: LD_INT 9
50173: DOUBLE
50174: LESSEQUAL
50175: IFTRUE 50179
50177: GO 50231
50179: POP
// begin bc_type := b_lab_half ;
50180: LD_ADDR_OWVAR 42
50184: PUSH
50185: LD_INT 7
50187: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
50188: LD_ADDR_OWVAR 44
50192: PUSH
50193: LD_INT 10
50195: PUSH
50196: LD_INT 11
50198: PUSH
50199: LD_INT 12
50201: PUSH
50202: LD_INT 15
50204: PUSH
50205: LD_INT 14
50207: PUSH
50208: LD_INT 13
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: PUSH
50219: LD_VAR 0 2
50223: PUSH
50224: LD_INT 3
50226: MINUS
50227: ARRAY
50228: ST_TO_ADDR
// end ; 10 .. 13 :
50229: GO 50739
50231: LD_INT 10
50233: DOUBLE
50234: GREATEREQUAL
50235: IFFALSE 50243
50237: LD_INT 13
50239: DOUBLE
50240: LESSEQUAL
50241: IFTRUE 50245
50243: GO 50322
50245: POP
// begin bc_type := b_lab_full ;
50246: LD_ADDR_OWVAR 42
50250: PUSH
50251: LD_INT 8
50253: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
50254: LD_ADDR_OWVAR 44
50258: PUSH
50259: LD_INT 10
50261: PUSH
50262: LD_INT 12
50264: PUSH
50265: LD_INT 14
50267: PUSH
50268: LD_INT 13
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: PUSH
50277: LD_VAR 0 2
50281: PUSH
50282: LD_INT 9
50284: MINUS
50285: ARRAY
50286: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
50287: LD_ADDR_OWVAR 45
50291: PUSH
50292: LD_INT 11
50294: PUSH
50295: LD_INT 15
50297: PUSH
50298: LD_INT 12
50300: PUSH
50301: LD_INT 15
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: PUSH
50310: LD_VAR 0 2
50314: PUSH
50315: LD_INT 9
50317: MINUS
50318: ARRAY
50319: ST_TO_ADDR
// end ; 14 :
50320: GO 50739
50322: LD_INT 14
50324: DOUBLE
50325: EQUAL
50326: IFTRUE 50330
50328: GO 50341
50330: POP
// bc_type := b_workshop ; 15 :
50331: LD_ADDR_OWVAR 42
50335: PUSH
50336: LD_INT 2
50338: ST_TO_ADDR
50339: GO 50739
50341: LD_INT 15
50343: DOUBLE
50344: EQUAL
50345: IFTRUE 50349
50347: GO 50360
50349: POP
// bc_type := b_factory ; 16 :
50350: LD_ADDR_OWVAR 42
50354: PUSH
50355: LD_INT 3
50357: ST_TO_ADDR
50358: GO 50739
50360: LD_INT 16
50362: DOUBLE
50363: EQUAL
50364: IFTRUE 50368
50366: GO 50379
50368: POP
// bc_type := b_ext_gun ; 17 :
50369: LD_ADDR_OWVAR 42
50373: PUSH
50374: LD_INT 17
50376: ST_TO_ADDR
50377: GO 50739
50379: LD_INT 17
50381: DOUBLE
50382: EQUAL
50383: IFTRUE 50387
50385: GO 50415
50387: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
50388: LD_ADDR_OWVAR 42
50392: PUSH
50393: LD_INT 19
50395: PUSH
50396: LD_INT 23
50398: PUSH
50399: LD_INT 19
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: LIST
50406: PUSH
50407: LD_VAR 0 1
50411: ARRAY
50412: ST_TO_ADDR
50413: GO 50739
50415: LD_INT 18
50417: DOUBLE
50418: EQUAL
50419: IFTRUE 50423
50421: GO 50434
50423: POP
// bc_type := b_ext_radar ; 19 :
50424: LD_ADDR_OWVAR 42
50428: PUSH
50429: LD_INT 20
50431: ST_TO_ADDR
50432: GO 50739
50434: LD_INT 19
50436: DOUBLE
50437: EQUAL
50438: IFTRUE 50442
50440: GO 50453
50442: POP
// bc_type := b_ext_radio ; 20 :
50443: LD_ADDR_OWVAR 42
50447: PUSH
50448: LD_INT 22
50450: ST_TO_ADDR
50451: GO 50739
50453: LD_INT 20
50455: DOUBLE
50456: EQUAL
50457: IFTRUE 50461
50459: GO 50472
50461: POP
// bc_type := b_ext_siberium ; 21 :
50462: LD_ADDR_OWVAR 42
50466: PUSH
50467: LD_INT 21
50469: ST_TO_ADDR
50470: GO 50739
50472: LD_INT 21
50474: DOUBLE
50475: EQUAL
50476: IFTRUE 50480
50478: GO 50491
50480: POP
// bc_type := b_ext_computer ; 22 :
50481: LD_ADDR_OWVAR 42
50485: PUSH
50486: LD_INT 24
50488: ST_TO_ADDR
50489: GO 50739
50491: LD_INT 22
50493: DOUBLE
50494: EQUAL
50495: IFTRUE 50499
50497: GO 50510
50499: POP
// bc_type := b_ext_track ; 23 :
50500: LD_ADDR_OWVAR 42
50504: PUSH
50505: LD_INT 16
50507: ST_TO_ADDR
50508: GO 50739
50510: LD_INT 23
50512: DOUBLE
50513: EQUAL
50514: IFTRUE 50518
50516: GO 50529
50518: POP
// bc_type := b_ext_laser ; 24 :
50519: LD_ADDR_OWVAR 42
50523: PUSH
50524: LD_INT 25
50526: ST_TO_ADDR
50527: GO 50739
50529: LD_INT 24
50531: DOUBLE
50532: EQUAL
50533: IFTRUE 50537
50535: GO 50548
50537: POP
// bc_type := b_control_tower ; 25 :
50538: LD_ADDR_OWVAR 42
50542: PUSH
50543: LD_INT 36
50545: ST_TO_ADDR
50546: GO 50739
50548: LD_INT 25
50550: DOUBLE
50551: EQUAL
50552: IFTRUE 50556
50554: GO 50567
50556: POP
// bc_type := b_breastwork ; 26 :
50557: LD_ADDR_OWVAR 42
50561: PUSH
50562: LD_INT 31
50564: ST_TO_ADDR
50565: GO 50739
50567: LD_INT 26
50569: DOUBLE
50570: EQUAL
50571: IFTRUE 50575
50573: GO 50586
50575: POP
// bc_type := b_bunker ; 27 :
50576: LD_ADDR_OWVAR 42
50580: PUSH
50581: LD_INT 32
50583: ST_TO_ADDR
50584: GO 50739
50586: LD_INT 27
50588: DOUBLE
50589: EQUAL
50590: IFTRUE 50594
50592: GO 50605
50594: POP
// bc_type := b_turret ; 28 :
50595: LD_ADDR_OWVAR 42
50599: PUSH
50600: LD_INT 33
50602: ST_TO_ADDR
50603: GO 50739
50605: LD_INT 28
50607: DOUBLE
50608: EQUAL
50609: IFTRUE 50613
50611: GO 50624
50613: POP
// bc_type := b_armoury ; 29 :
50614: LD_ADDR_OWVAR 42
50618: PUSH
50619: LD_INT 4
50621: ST_TO_ADDR
50622: GO 50739
50624: LD_INT 29
50626: DOUBLE
50627: EQUAL
50628: IFTRUE 50632
50630: GO 50643
50632: POP
// bc_type := b_barracks ; 30 :
50633: LD_ADDR_OWVAR 42
50637: PUSH
50638: LD_INT 5
50640: ST_TO_ADDR
50641: GO 50739
50643: LD_INT 30
50645: DOUBLE
50646: EQUAL
50647: IFTRUE 50651
50649: GO 50662
50651: POP
// bc_type := b_solar_power ; 31 :
50652: LD_ADDR_OWVAR 42
50656: PUSH
50657: LD_INT 27
50659: ST_TO_ADDR
50660: GO 50739
50662: LD_INT 31
50664: DOUBLE
50665: EQUAL
50666: IFTRUE 50670
50668: GO 50681
50670: POP
// bc_type := b_oil_power ; 32 :
50671: LD_ADDR_OWVAR 42
50675: PUSH
50676: LD_INT 26
50678: ST_TO_ADDR
50679: GO 50739
50681: LD_INT 32
50683: DOUBLE
50684: EQUAL
50685: IFTRUE 50689
50687: GO 50700
50689: POP
// bc_type := b_siberite_power ; 33 :
50690: LD_ADDR_OWVAR 42
50694: PUSH
50695: LD_INT 28
50697: ST_TO_ADDR
50698: GO 50739
50700: LD_INT 33
50702: DOUBLE
50703: EQUAL
50704: IFTRUE 50708
50706: GO 50719
50708: POP
// bc_type := b_oil_mine ; 34 :
50709: LD_ADDR_OWVAR 42
50713: PUSH
50714: LD_INT 29
50716: ST_TO_ADDR
50717: GO 50739
50719: LD_INT 34
50721: DOUBLE
50722: EQUAL
50723: IFTRUE 50727
50725: GO 50738
50727: POP
// bc_type := b_siberite_mine ; end ;
50728: LD_ADDR_OWVAR 42
50732: PUSH
50733: LD_INT 30
50735: ST_TO_ADDR
50736: GO 50739
50738: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
50739: LD_ADDR_VAR 0 8
50743: PUSH
50744: LD_VAR 0 5
50748: PPUSH
50749: LD_VAR 0 6
50753: PPUSH
50754: LD_VAR 0 3
50758: PPUSH
50759: CALL_OW 47
50763: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
50764: LD_OWVAR 42
50768: PUSH
50769: LD_INT 32
50771: PUSH
50772: LD_INT 33
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: IN
50779: IFFALSE 50795
// PlaceWeaponTurret ( b , weapon ) ;
50781: LD_VAR 0 8
50785: PPUSH
50786: LD_VAR 0 4
50790: PPUSH
50791: CALL_OW 431
// end ;
50795: LD_VAR 0 7
50799: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
50800: LD_INT 0
50802: PPUSH
50803: PPUSH
50804: PPUSH
50805: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50806: LD_ADDR_VAR 0 4
50810: PUSH
50811: LD_INT 22
50813: PUSH
50814: LD_OWVAR 2
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: LD_INT 30
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 30
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: LIST
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PPUSH
50855: CALL_OW 69
50859: ST_TO_ADDR
// if not tmp then
50860: LD_VAR 0 4
50864: NOT
50865: IFFALSE 50869
// exit ;
50867: GO 50928
// for i in tmp do
50869: LD_ADDR_VAR 0 2
50873: PUSH
50874: LD_VAR 0 4
50878: PUSH
50879: FOR_IN
50880: IFFALSE 50926
// for j = 1 to 3 do
50882: LD_ADDR_VAR 0 3
50886: PUSH
50887: DOUBLE
50888: LD_INT 1
50890: DEC
50891: ST_TO_ADDR
50892: LD_INT 3
50894: PUSH
50895: FOR_TO
50896: IFFALSE 50922
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
50898: LD_VAR 0 2
50902: PPUSH
50903: CALL_OW 274
50907: PPUSH
50908: LD_VAR 0 3
50912: PPUSH
50913: LD_INT 99999
50915: PPUSH
50916: CALL_OW 277
50920: GO 50895
50922: POP
50923: POP
50924: GO 50879
50926: POP
50927: POP
// end ;
50928: LD_VAR 0 1
50932: RET
// export function hHackSetLevel10 ; var i , j ; begin
50933: LD_INT 0
50935: PPUSH
50936: PPUSH
50937: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
50938: LD_ADDR_VAR 0 2
50942: PUSH
50943: LD_INT 21
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PPUSH
50953: CALL_OW 69
50957: PUSH
50958: FOR_IN
50959: IFFALSE 51011
// if IsSelected ( i ) then
50961: LD_VAR 0 2
50965: PPUSH
50966: CALL_OW 306
50970: IFFALSE 51009
// begin for j := 1 to 4 do
50972: LD_ADDR_VAR 0 3
50976: PUSH
50977: DOUBLE
50978: LD_INT 1
50980: DEC
50981: ST_TO_ADDR
50982: LD_INT 4
50984: PUSH
50985: FOR_TO
50986: IFFALSE 51007
// SetSkill ( i , j , 10 ) ;
50988: LD_VAR 0 2
50992: PPUSH
50993: LD_VAR 0 3
50997: PPUSH
50998: LD_INT 10
51000: PPUSH
51001: CALL_OW 237
51005: GO 50985
51007: POP
51008: POP
// end ;
51009: GO 50958
51011: POP
51012: POP
// end ;
51013: LD_VAR 0 1
51017: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
51018: LD_INT 0
51020: PPUSH
51021: PPUSH
51022: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
51023: LD_ADDR_VAR 0 2
51027: PUSH
51028: LD_INT 22
51030: PUSH
51031: LD_OWVAR 2
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 21
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PPUSH
51054: CALL_OW 69
51058: PUSH
51059: FOR_IN
51060: IFFALSE 51101
// begin for j := 1 to 4 do
51062: LD_ADDR_VAR 0 3
51066: PUSH
51067: DOUBLE
51068: LD_INT 1
51070: DEC
51071: ST_TO_ADDR
51072: LD_INT 4
51074: PUSH
51075: FOR_TO
51076: IFFALSE 51097
// SetSkill ( i , j , 10 ) ;
51078: LD_VAR 0 2
51082: PPUSH
51083: LD_VAR 0 3
51087: PPUSH
51088: LD_INT 10
51090: PPUSH
51091: CALL_OW 237
51095: GO 51075
51097: POP
51098: POP
// end ;
51099: GO 51059
51101: POP
51102: POP
// end ;
51103: LD_VAR 0 1
51107: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
51108: LD_INT 0
51110: PPUSH
// uc_side := your_side ;
51111: LD_ADDR_OWVAR 20
51115: PUSH
51116: LD_OWVAR 2
51120: ST_TO_ADDR
// uc_nation := nation ;
51121: LD_ADDR_OWVAR 21
51125: PUSH
51126: LD_VAR 0 1
51130: ST_TO_ADDR
// InitHc ;
51131: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
51135: LD_INT 0
51137: PPUSH
51138: LD_VAR 0 2
51142: PPUSH
51143: LD_VAR 0 3
51147: PPUSH
51148: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
51152: LD_VAR 0 4
51156: PPUSH
51157: LD_VAR 0 5
51161: PPUSH
51162: CALL_OW 428
51166: PUSH
51167: LD_INT 0
51169: EQUAL
51170: IFFALSE 51194
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
51172: CALL_OW 44
51176: PPUSH
51177: LD_VAR 0 4
51181: PPUSH
51182: LD_VAR 0 5
51186: PPUSH
51187: LD_INT 1
51189: PPUSH
51190: CALL_OW 48
// end ;
51194: LD_VAR 0 6
51198: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
51199: LD_INT 0
51201: PPUSH
51202: PPUSH
// uc_side := your_side ;
51203: LD_ADDR_OWVAR 20
51207: PUSH
51208: LD_OWVAR 2
51212: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
51213: LD_VAR 0 1
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: LD_INT 2
51223: PUSH
51224: LD_INT 3
51226: PUSH
51227: LD_INT 4
51229: PUSH
51230: LD_INT 5
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: IN
51240: IFFALSE 51252
// uc_nation := nation_american else
51242: LD_ADDR_OWVAR 21
51246: PUSH
51247: LD_INT 1
51249: ST_TO_ADDR
51250: GO 51295
// if chassis in [ 11 , 12 , 13 , 14 ] then
51252: LD_VAR 0 1
51256: PUSH
51257: LD_INT 11
51259: PUSH
51260: LD_INT 12
51262: PUSH
51263: LD_INT 13
51265: PUSH
51266: LD_INT 14
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: IN
51275: IFFALSE 51287
// uc_nation := nation_arabian else
51277: LD_ADDR_OWVAR 21
51281: PUSH
51282: LD_INT 2
51284: ST_TO_ADDR
51285: GO 51295
// uc_nation := nation_russian ;
51287: LD_ADDR_OWVAR 21
51291: PUSH
51292: LD_INT 3
51294: ST_TO_ADDR
// vc_chassis := chassis ;
51295: LD_ADDR_OWVAR 37
51299: PUSH
51300: LD_VAR 0 1
51304: ST_TO_ADDR
// vc_engine := engine ;
51305: LD_ADDR_OWVAR 39
51309: PUSH
51310: LD_VAR 0 2
51314: ST_TO_ADDR
// vc_control := control ;
51315: LD_ADDR_OWVAR 38
51319: PUSH
51320: LD_VAR 0 3
51324: ST_TO_ADDR
// vc_weapon := weapon ;
51325: LD_ADDR_OWVAR 40
51329: PUSH
51330: LD_VAR 0 4
51334: ST_TO_ADDR
// un := CreateVehicle ;
51335: LD_ADDR_VAR 0 8
51339: PUSH
51340: CALL_OW 45
51344: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
51345: LD_VAR 0 8
51349: PPUSH
51350: LD_INT 0
51352: PPUSH
51353: LD_INT 5
51355: PPUSH
51356: CALL_OW 12
51360: PPUSH
51361: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
51365: LD_VAR 0 8
51369: PPUSH
51370: LD_VAR 0 5
51374: PPUSH
51375: LD_VAR 0 6
51379: PPUSH
51380: LD_INT 1
51382: PPUSH
51383: CALL_OW 48
// end ;
51387: LD_VAR 0 7
51391: RET
// export hInvincible ; every 1 do
51392: GO 51394
51394: DISABLE
// hInvincible := [ ] ;
51395: LD_ADDR_EXP 82
51399: PUSH
51400: EMPTY
51401: ST_TO_ADDR
51402: END
// every 10 do var i ;
51403: GO 51405
51405: DISABLE
51406: LD_INT 0
51408: PPUSH
// begin enable ;
51409: ENABLE
// if not hInvincible then
51410: LD_EXP 82
51414: NOT
51415: IFFALSE 51419
// exit ;
51417: GO 51463
// for i in hInvincible do
51419: LD_ADDR_VAR 0 1
51423: PUSH
51424: LD_EXP 82
51428: PUSH
51429: FOR_IN
51430: IFFALSE 51461
// if GetLives ( i ) < 1000 then
51432: LD_VAR 0 1
51436: PPUSH
51437: CALL_OW 256
51441: PUSH
51442: LD_INT 1000
51444: LESS
51445: IFFALSE 51459
// SetLives ( i , 1000 ) ;
51447: LD_VAR 0 1
51451: PPUSH
51452: LD_INT 1000
51454: PPUSH
51455: CALL_OW 234
51459: GO 51429
51461: POP
51462: POP
// end ;
51463: PPOPN 1
51465: END
// export function hHackInvincible ; var i ; begin
51466: LD_INT 0
51468: PPUSH
51469: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
51470: LD_ADDR_VAR 0 2
51474: PUSH
51475: LD_INT 2
51477: PUSH
51478: LD_INT 21
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 21
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: LIST
51502: PPUSH
51503: CALL_OW 69
51507: PUSH
51508: FOR_IN
51509: IFFALSE 51570
// if IsSelected ( i ) then
51511: LD_VAR 0 2
51515: PPUSH
51516: CALL_OW 306
51520: IFFALSE 51568
// begin if i in hInvincible then
51522: LD_VAR 0 2
51526: PUSH
51527: LD_EXP 82
51531: IN
51532: IFFALSE 51552
// hInvincible := hInvincible diff i else
51534: LD_ADDR_EXP 82
51538: PUSH
51539: LD_EXP 82
51543: PUSH
51544: LD_VAR 0 2
51548: DIFF
51549: ST_TO_ADDR
51550: GO 51568
// hInvincible := hInvincible union i ;
51552: LD_ADDR_EXP 82
51556: PUSH
51557: LD_EXP 82
51561: PUSH
51562: LD_VAR 0 2
51566: UNION
51567: ST_TO_ADDR
// end ;
51568: GO 51508
51570: POP
51571: POP
// end ;
51572: LD_VAR 0 1
51576: RET
// export function hHackInvisible ; var i , j ; begin
51577: LD_INT 0
51579: PPUSH
51580: PPUSH
51581: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
51582: LD_ADDR_VAR 0 2
51586: PUSH
51587: LD_INT 21
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PPUSH
51597: CALL_OW 69
51601: PUSH
51602: FOR_IN
51603: IFFALSE 51627
// if IsSelected ( i ) then
51605: LD_VAR 0 2
51609: PPUSH
51610: CALL_OW 306
51614: IFFALSE 51625
// ComForceInvisible ( i ) ;
51616: LD_VAR 0 2
51620: PPUSH
51621: CALL_OW 496
51625: GO 51602
51627: POP
51628: POP
// end ;
51629: LD_VAR 0 1
51633: RET
// export function hHackChangeYourSide ; begin
51634: LD_INT 0
51636: PPUSH
// if your_side = 8 then
51637: LD_OWVAR 2
51641: PUSH
51642: LD_INT 8
51644: EQUAL
51645: IFFALSE 51657
// your_side := 0 else
51647: LD_ADDR_OWVAR 2
51651: PUSH
51652: LD_INT 0
51654: ST_TO_ADDR
51655: GO 51671
// your_side := your_side + 1 ;
51657: LD_ADDR_OWVAR 2
51661: PUSH
51662: LD_OWVAR 2
51666: PUSH
51667: LD_INT 1
51669: PLUS
51670: ST_TO_ADDR
// end ;
51671: LD_VAR 0 1
51675: RET
// export function hHackChangeUnitSide ; var i , j ; begin
51676: LD_INT 0
51678: PPUSH
51679: PPUSH
51680: PPUSH
// for i in all_units do
51681: LD_ADDR_VAR 0 2
51685: PUSH
51686: LD_OWVAR 3
51690: PUSH
51691: FOR_IN
51692: IFFALSE 51770
// if IsSelected ( i ) then
51694: LD_VAR 0 2
51698: PPUSH
51699: CALL_OW 306
51703: IFFALSE 51768
// begin j := GetSide ( i ) ;
51705: LD_ADDR_VAR 0 3
51709: PUSH
51710: LD_VAR 0 2
51714: PPUSH
51715: CALL_OW 255
51719: ST_TO_ADDR
// if j = 8 then
51720: LD_VAR 0 3
51724: PUSH
51725: LD_INT 8
51727: EQUAL
51728: IFFALSE 51740
// j := 0 else
51730: LD_ADDR_VAR 0 3
51734: PUSH
51735: LD_INT 0
51737: ST_TO_ADDR
51738: GO 51754
// j := j + 1 ;
51740: LD_ADDR_VAR 0 3
51744: PUSH
51745: LD_VAR 0 3
51749: PUSH
51750: LD_INT 1
51752: PLUS
51753: ST_TO_ADDR
// SetSide ( i , j ) ;
51754: LD_VAR 0 2
51758: PPUSH
51759: LD_VAR 0 3
51763: PPUSH
51764: CALL_OW 235
// end ;
51768: GO 51691
51770: POP
51771: POP
// end ;
51772: LD_VAR 0 1
51776: RET
// export function hHackFog ; begin
51777: LD_INT 0
51779: PPUSH
// FogOff ( true ) ;
51780: LD_INT 1
51782: PPUSH
51783: CALL_OW 344
// end ;
51787: LD_VAR 0 1
51791: RET
// export function hHackTeleport ( unit , x , y ) ; begin
51792: LD_INT 0
51794: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
51795: LD_VAR 0 1
51799: PPUSH
51800: LD_VAR 0 2
51804: PPUSH
51805: LD_VAR 0 3
51809: PPUSH
51810: LD_INT 1
51812: PPUSH
51813: LD_INT 1
51815: PPUSH
51816: CALL_OW 483
// CenterOnXY ( x , y ) ;
51820: LD_VAR 0 2
51824: PPUSH
51825: LD_VAR 0 3
51829: PPUSH
51830: CALL_OW 84
// end ; end_of_file end_of_file
51834: LD_VAR 0 4
51838: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
51839: LD_INT 0
51841: PPUSH
51842: PPUSH
51843: PPUSH
51844: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
51845: LD_VAR 0 1
51849: PPUSH
51850: CALL_OW 264
51854: PUSH
51855: LD_EXP 7
51859: EQUAL
51860: IFFALSE 51932
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
51862: LD_INT 68
51864: PPUSH
51865: LD_VAR 0 1
51869: PPUSH
51870: CALL_OW 255
51874: PPUSH
51875: CALL_OW 321
51879: PUSH
51880: LD_INT 2
51882: EQUAL
51883: IFFALSE 51895
// eff := 70 else
51885: LD_ADDR_VAR 0 4
51889: PUSH
51890: LD_INT 70
51892: ST_TO_ADDR
51893: GO 51903
// eff := 30 ;
51895: LD_ADDR_VAR 0 4
51899: PUSH
51900: LD_INT 30
51902: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
51903: LD_VAR 0 1
51907: PPUSH
51908: CALL_OW 250
51912: PPUSH
51913: LD_VAR 0 1
51917: PPUSH
51918: CALL_OW 251
51922: PPUSH
51923: LD_VAR 0 4
51927: PPUSH
51928: CALL_OW 495
// end ; end ;
51932: LD_VAR 0 2
51936: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
51937: LD_INT 0
51939: PPUSH
// end ;
51940: LD_VAR 0 4
51944: RET
// export function SOS_Command ( cmd ) ; begin
51945: LD_INT 0
51947: PPUSH
// end ;
51948: LD_VAR 0 2
51952: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
51953: LD_INT 0
51955: PPUSH
// if cmd = 121 then
51956: LD_VAR 0 1
51960: PUSH
51961: LD_INT 121
51963: EQUAL
51964: IFFALSE 51966
// end ;
51966: LD_VAR 0 6
51970: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
51971: LD_INT 0
51973: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
51974: LD_VAR 0 1
51978: PUSH
51979: LD_INT 250
51981: EQUAL
51982: PUSH
51983: LD_VAR 0 2
51987: PPUSH
51988: CALL_OW 264
51992: PUSH
51993: LD_EXP 10
51997: EQUAL
51998: AND
51999: IFFALSE 52020
// MinerPlaceMine ( unit , x , y ) ;
52001: LD_VAR 0 2
52005: PPUSH
52006: LD_VAR 0 4
52010: PPUSH
52011: LD_VAR 0 5
52015: PPUSH
52016: CALL 54369 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
52020: LD_VAR 0 1
52024: PUSH
52025: LD_INT 251
52027: EQUAL
52028: PUSH
52029: LD_VAR 0 2
52033: PPUSH
52034: CALL_OW 264
52038: PUSH
52039: LD_EXP 10
52043: EQUAL
52044: AND
52045: IFFALSE 52066
// MinerDetonateMine ( unit , x , y ) ;
52047: LD_VAR 0 2
52051: PPUSH
52052: LD_VAR 0 4
52056: PPUSH
52057: LD_VAR 0 5
52061: PPUSH
52062: CALL 54646 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
52066: LD_VAR 0 1
52070: PUSH
52071: LD_INT 252
52073: EQUAL
52074: PUSH
52075: LD_VAR 0 2
52079: PPUSH
52080: CALL_OW 264
52084: PUSH
52085: LD_EXP 10
52089: EQUAL
52090: AND
52091: IFFALSE 52112
// MinerCreateMinefield ( unit , x , y ) ;
52093: LD_VAR 0 2
52097: PPUSH
52098: LD_VAR 0 4
52102: PPUSH
52103: LD_VAR 0 5
52107: PPUSH
52108: CALL 55063 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
52112: LD_VAR 0 1
52116: PUSH
52117: LD_INT 253
52119: EQUAL
52120: PUSH
52121: LD_VAR 0 2
52125: PPUSH
52126: CALL_OW 257
52130: PUSH
52131: LD_INT 5
52133: EQUAL
52134: AND
52135: IFFALSE 52156
// ComBinocular ( unit , x , y ) ;
52137: LD_VAR 0 2
52141: PPUSH
52142: LD_VAR 0 4
52146: PPUSH
52147: LD_VAR 0 5
52151: PPUSH
52152: CALL 55434 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
52156: LD_VAR 0 1
52160: PUSH
52161: LD_INT 254
52163: EQUAL
52164: PUSH
52165: LD_VAR 0 2
52169: PPUSH
52170: CALL_OW 264
52174: PUSH
52175: LD_EXP 5
52179: EQUAL
52180: AND
52181: PUSH
52182: LD_VAR 0 3
52186: PPUSH
52187: CALL_OW 263
52191: PUSH
52192: LD_INT 3
52194: EQUAL
52195: AND
52196: IFFALSE 52212
// HackDestroyVehicle ( unit , selectedUnit ) ;
52198: LD_VAR 0 2
52202: PPUSH
52203: LD_VAR 0 3
52207: PPUSH
52208: CALL 53729 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
52212: LD_VAR 0 1
52216: PUSH
52217: LD_INT 255
52219: EQUAL
52220: PUSH
52221: LD_VAR 0 2
52225: PPUSH
52226: CALL_OW 264
52230: PUSH
52231: LD_INT 14
52233: PUSH
52234: LD_INT 53
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: IN
52241: AND
52242: PUSH
52243: LD_VAR 0 4
52247: PPUSH
52248: LD_VAR 0 5
52252: PPUSH
52253: CALL_OW 488
52257: AND
52258: IFFALSE 52282
// CutTreeXYR ( unit , x , y , 12 ) ;
52260: LD_VAR 0 2
52264: PPUSH
52265: LD_VAR 0 4
52269: PPUSH
52270: LD_VAR 0 5
52274: PPUSH
52275: LD_INT 12
52277: PPUSH
52278: CALL 52295 0 4
// end ;
52282: LD_VAR 0 6
52286: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
52287: LD_INT 0
52289: PPUSH
// end ;
52290: LD_VAR 0 4
52294: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
52295: LD_INT 0
52297: PPUSH
52298: PPUSH
52299: PPUSH
52300: PPUSH
52301: PPUSH
52302: PPUSH
52303: PPUSH
52304: PPUSH
52305: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
52306: LD_VAR 0 1
52310: NOT
52311: PUSH
52312: LD_VAR 0 2
52316: PPUSH
52317: LD_VAR 0 3
52321: PPUSH
52322: CALL_OW 488
52326: NOT
52327: OR
52328: PUSH
52329: LD_VAR 0 4
52333: NOT
52334: OR
52335: IFFALSE 52339
// exit ;
52337: GO 52679
// list := [ ] ;
52339: LD_ADDR_VAR 0 13
52343: PUSH
52344: EMPTY
52345: ST_TO_ADDR
// if x - r < 0 then
52346: LD_VAR 0 2
52350: PUSH
52351: LD_VAR 0 4
52355: MINUS
52356: PUSH
52357: LD_INT 0
52359: LESS
52360: IFFALSE 52372
// min_x := 0 else
52362: LD_ADDR_VAR 0 7
52366: PUSH
52367: LD_INT 0
52369: ST_TO_ADDR
52370: GO 52388
// min_x := x - r ;
52372: LD_ADDR_VAR 0 7
52376: PUSH
52377: LD_VAR 0 2
52381: PUSH
52382: LD_VAR 0 4
52386: MINUS
52387: ST_TO_ADDR
// if y - r < 0 then
52388: LD_VAR 0 3
52392: PUSH
52393: LD_VAR 0 4
52397: MINUS
52398: PUSH
52399: LD_INT 0
52401: LESS
52402: IFFALSE 52414
// min_y := 0 else
52404: LD_ADDR_VAR 0 8
52408: PUSH
52409: LD_INT 0
52411: ST_TO_ADDR
52412: GO 52430
// min_y := y - r ;
52414: LD_ADDR_VAR 0 8
52418: PUSH
52419: LD_VAR 0 3
52423: PUSH
52424: LD_VAR 0 4
52428: MINUS
52429: ST_TO_ADDR
// max_x := x + r ;
52430: LD_ADDR_VAR 0 9
52434: PUSH
52435: LD_VAR 0 2
52439: PUSH
52440: LD_VAR 0 4
52444: PLUS
52445: ST_TO_ADDR
// max_y := y + r ;
52446: LD_ADDR_VAR 0 10
52450: PUSH
52451: LD_VAR 0 3
52455: PUSH
52456: LD_VAR 0 4
52460: PLUS
52461: ST_TO_ADDR
// for _x = min_x to max_x do
52462: LD_ADDR_VAR 0 11
52466: PUSH
52467: DOUBLE
52468: LD_VAR 0 7
52472: DEC
52473: ST_TO_ADDR
52474: LD_VAR 0 9
52478: PUSH
52479: FOR_TO
52480: IFFALSE 52597
// for _y = min_y to max_y do
52482: LD_ADDR_VAR 0 12
52486: PUSH
52487: DOUBLE
52488: LD_VAR 0 8
52492: DEC
52493: ST_TO_ADDR
52494: LD_VAR 0 10
52498: PUSH
52499: FOR_TO
52500: IFFALSE 52593
// begin if not ValidHex ( _x , _y ) then
52502: LD_VAR 0 11
52506: PPUSH
52507: LD_VAR 0 12
52511: PPUSH
52512: CALL_OW 488
52516: NOT
52517: IFFALSE 52521
// continue ;
52519: GO 52499
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
52521: LD_VAR 0 11
52525: PPUSH
52526: LD_VAR 0 12
52530: PPUSH
52531: CALL_OW 351
52535: PUSH
52536: LD_VAR 0 11
52540: PPUSH
52541: LD_VAR 0 12
52545: PPUSH
52546: CALL_OW 554
52550: AND
52551: IFFALSE 52591
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
52553: LD_ADDR_VAR 0 13
52557: PUSH
52558: LD_VAR 0 13
52562: PPUSH
52563: LD_VAR 0 13
52567: PUSH
52568: LD_INT 1
52570: PLUS
52571: PPUSH
52572: LD_VAR 0 11
52576: PUSH
52577: LD_VAR 0 12
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PPUSH
52586: CALL_OW 2
52590: ST_TO_ADDR
// end ;
52591: GO 52499
52593: POP
52594: POP
52595: GO 52479
52597: POP
52598: POP
// if not list then
52599: LD_VAR 0 13
52603: NOT
52604: IFFALSE 52608
// exit ;
52606: GO 52679
// for i in list do
52608: LD_ADDR_VAR 0 6
52612: PUSH
52613: LD_VAR 0 13
52617: PUSH
52618: FOR_IN
52619: IFFALSE 52677
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
52621: LD_VAR 0 1
52625: PPUSH
52626: LD_STRING M
52628: PUSH
52629: LD_VAR 0 6
52633: PUSH
52634: LD_INT 1
52636: ARRAY
52637: PUSH
52638: LD_VAR 0 6
52642: PUSH
52643: LD_INT 2
52645: ARRAY
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: PUSH
52668: EMPTY
52669: LIST
52670: PPUSH
52671: CALL_OW 447
52675: GO 52618
52677: POP
52678: POP
// end ;
52679: LD_VAR 0 5
52683: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
52684: LD_EXP 85
52688: NOT
52689: IFFALSE 52739
52691: GO 52693
52693: DISABLE
// begin initHack := true ;
52694: LD_ADDR_EXP 85
52698: PUSH
52699: LD_INT 1
52701: ST_TO_ADDR
// hackTanks := [ ] ;
52702: LD_ADDR_EXP 86
52706: PUSH
52707: EMPTY
52708: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
52709: LD_ADDR_EXP 87
52713: PUSH
52714: EMPTY
52715: ST_TO_ADDR
// hackLimit := 3 ;
52716: LD_ADDR_EXP 88
52720: PUSH
52721: LD_INT 3
52723: ST_TO_ADDR
// hackDist := 12 ;
52724: LD_ADDR_EXP 89
52728: PUSH
52729: LD_INT 12
52731: ST_TO_ADDR
// hackCounter := [ ] ;
52732: LD_ADDR_EXP 90
52736: PUSH
52737: EMPTY
52738: ST_TO_ADDR
// end ;
52739: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
52740: LD_EXP 85
52744: PUSH
52745: LD_INT 34
52747: PUSH
52748: LD_EXP 5
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PPUSH
52757: CALL_OW 69
52761: AND
52762: IFFALSE 53017
52764: GO 52766
52766: DISABLE
52767: LD_INT 0
52769: PPUSH
52770: PPUSH
// begin enable ;
52771: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
52772: LD_ADDR_VAR 0 1
52776: PUSH
52777: LD_INT 34
52779: PUSH
52780: LD_EXP 5
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PPUSH
52789: CALL_OW 69
52793: PUSH
52794: FOR_IN
52795: IFFALSE 53015
// begin if not i in hackTanks then
52797: LD_VAR 0 1
52801: PUSH
52802: LD_EXP 86
52806: IN
52807: NOT
52808: IFFALSE 52891
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
52810: LD_ADDR_EXP 86
52814: PUSH
52815: LD_EXP 86
52819: PPUSH
52820: LD_EXP 86
52824: PUSH
52825: LD_INT 1
52827: PLUS
52828: PPUSH
52829: LD_VAR 0 1
52833: PPUSH
52834: CALL_OW 1
52838: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
52839: LD_ADDR_EXP 87
52843: PUSH
52844: LD_EXP 87
52848: PPUSH
52849: LD_EXP 87
52853: PUSH
52854: LD_INT 1
52856: PLUS
52857: PPUSH
52858: EMPTY
52859: PPUSH
52860: CALL_OW 1
52864: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
52865: LD_ADDR_EXP 90
52869: PUSH
52870: LD_EXP 90
52874: PPUSH
52875: LD_EXP 90
52879: PUSH
52880: LD_INT 1
52882: PLUS
52883: PPUSH
52884: EMPTY
52885: PPUSH
52886: CALL_OW 1
52890: ST_TO_ADDR
// end ; if not IsOk ( i ) then
52891: LD_VAR 0 1
52895: PPUSH
52896: CALL_OW 302
52900: NOT
52901: IFFALSE 52914
// begin HackUnlinkAll ( i ) ;
52903: LD_VAR 0 1
52907: PPUSH
52908: CALL 53020 0 1
// continue ;
52912: GO 52794
// end ; HackCheckCapturedStatus ( i ) ;
52914: LD_VAR 0 1
52918: PPUSH
52919: CALL 53463 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
52923: LD_ADDR_VAR 0 2
52927: PUSH
52928: LD_INT 81
52930: PUSH
52931: LD_VAR 0 1
52935: PPUSH
52936: CALL_OW 255
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 33
52947: PUSH
52948: LD_INT 3
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 91
52957: PUSH
52958: LD_VAR 0 1
52962: PUSH
52963: LD_EXP 89
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 50
52975: PUSH
52976: EMPTY
52977: LIST
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: PPUSH
52985: CALL_OW 69
52989: ST_TO_ADDR
// if not tmp then
52990: LD_VAR 0 2
52994: NOT
52995: IFFALSE 52999
// continue ;
52997: GO 52794
// HackLink ( i , tmp ) ;
52999: LD_VAR 0 1
53003: PPUSH
53004: LD_VAR 0 2
53008: PPUSH
53009: CALL 53156 0 2
// end ;
53013: GO 52794
53015: POP
53016: POP
// end ;
53017: PPOPN 2
53019: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
53020: LD_INT 0
53022: PPUSH
53023: PPUSH
53024: PPUSH
// if not hack in hackTanks then
53025: LD_VAR 0 1
53029: PUSH
53030: LD_EXP 86
53034: IN
53035: NOT
53036: IFFALSE 53040
// exit ;
53038: GO 53151
// index := GetElementIndex ( hackTanks , hack ) ;
53040: LD_ADDR_VAR 0 4
53044: PUSH
53045: LD_EXP 86
53049: PPUSH
53050: LD_VAR 0 1
53054: PPUSH
53055: CALL 4980 0 2
53059: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
53060: LD_EXP 87
53064: PUSH
53065: LD_VAR 0 4
53069: ARRAY
53070: IFFALSE 53151
// begin for i in hackTanksCaptured [ index ] do
53072: LD_ADDR_VAR 0 3
53076: PUSH
53077: LD_EXP 87
53081: PUSH
53082: LD_VAR 0 4
53086: ARRAY
53087: PUSH
53088: FOR_IN
53089: IFFALSE 53115
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
53091: LD_VAR 0 3
53095: PUSH
53096: LD_INT 1
53098: ARRAY
53099: PPUSH
53100: LD_VAR 0 3
53104: PUSH
53105: LD_INT 2
53107: ARRAY
53108: PPUSH
53109: CALL_OW 235
53113: GO 53088
53115: POP
53116: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
53117: LD_ADDR_EXP 87
53121: PUSH
53122: LD_EXP 87
53126: PPUSH
53127: LD_VAR 0 4
53131: PPUSH
53132: EMPTY
53133: PPUSH
53134: CALL_OW 1
53138: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
53139: LD_VAR 0 1
53143: PPUSH
53144: LD_INT 0
53146: PPUSH
53147: CALL_OW 505
// end ; end ;
53151: LD_VAR 0 2
53155: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
53156: LD_INT 0
53158: PPUSH
53159: PPUSH
53160: PPUSH
// if not hack in hackTanks or not vehicles then
53161: LD_VAR 0 1
53165: PUSH
53166: LD_EXP 86
53170: IN
53171: NOT
53172: PUSH
53173: LD_VAR 0 2
53177: NOT
53178: OR
53179: IFFALSE 53183
// exit ;
53181: GO 53458
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
53183: LD_ADDR_VAR 0 2
53187: PUSH
53188: LD_VAR 0 1
53192: PPUSH
53193: LD_VAR 0 2
53197: PPUSH
53198: LD_INT 1
53200: PPUSH
53201: LD_INT 1
53203: PPUSH
53204: CALL 5630 0 4
53208: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
53209: LD_ADDR_VAR 0 5
53213: PUSH
53214: LD_EXP 86
53218: PPUSH
53219: LD_VAR 0 1
53223: PPUSH
53224: CALL 4980 0 2
53228: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
53229: LD_EXP 87
53233: PUSH
53234: LD_VAR 0 5
53238: ARRAY
53239: PUSH
53240: LD_EXP 88
53244: LESS
53245: IFFALSE 53434
// begin for i := 1 to vehicles do
53247: LD_ADDR_VAR 0 4
53251: PUSH
53252: DOUBLE
53253: LD_INT 1
53255: DEC
53256: ST_TO_ADDR
53257: LD_VAR 0 2
53261: PUSH
53262: FOR_TO
53263: IFFALSE 53432
// begin if hackTanksCaptured [ index ] = hackLimit then
53265: LD_EXP 87
53269: PUSH
53270: LD_VAR 0 5
53274: ARRAY
53275: PUSH
53276: LD_EXP 88
53280: EQUAL
53281: IFFALSE 53285
// break ;
53283: GO 53432
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
53285: LD_ADDR_EXP 90
53289: PUSH
53290: LD_EXP 90
53294: PPUSH
53295: LD_VAR 0 5
53299: PPUSH
53300: LD_EXP 90
53304: PUSH
53305: LD_VAR 0 5
53309: ARRAY
53310: PUSH
53311: LD_INT 1
53313: PLUS
53314: PPUSH
53315: CALL_OW 1
53319: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
53320: LD_ADDR_EXP 87
53324: PUSH
53325: LD_EXP 87
53329: PPUSH
53330: LD_VAR 0 5
53334: PUSH
53335: LD_EXP 87
53339: PUSH
53340: LD_VAR 0 5
53344: ARRAY
53345: PUSH
53346: LD_INT 1
53348: PLUS
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PPUSH
53354: LD_VAR 0 2
53358: PUSH
53359: LD_VAR 0 4
53363: ARRAY
53364: PUSH
53365: LD_VAR 0 2
53369: PUSH
53370: LD_VAR 0 4
53374: ARRAY
53375: PPUSH
53376: CALL_OW 255
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PPUSH
53385: CALL 5195 0 3
53389: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
53390: LD_VAR 0 2
53394: PUSH
53395: LD_VAR 0 4
53399: ARRAY
53400: PPUSH
53401: LD_VAR 0 1
53405: PPUSH
53406: CALL_OW 255
53410: PPUSH
53411: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
53415: LD_VAR 0 2
53419: PUSH
53420: LD_VAR 0 4
53424: ARRAY
53425: PPUSH
53426: CALL_OW 141
// end ;
53430: GO 53262
53432: POP
53433: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
53434: LD_VAR 0 1
53438: PPUSH
53439: LD_EXP 87
53443: PUSH
53444: LD_VAR 0 5
53448: ARRAY
53449: PUSH
53450: LD_INT 0
53452: PLUS
53453: PPUSH
53454: CALL_OW 505
// end ;
53458: LD_VAR 0 3
53462: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
53463: LD_INT 0
53465: PPUSH
53466: PPUSH
53467: PPUSH
53468: PPUSH
// if not hack in hackTanks then
53469: LD_VAR 0 1
53473: PUSH
53474: LD_EXP 86
53478: IN
53479: NOT
53480: IFFALSE 53484
// exit ;
53482: GO 53724
// index := GetElementIndex ( hackTanks , hack ) ;
53484: LD_ADDR_VAR 0 4
53488: PUSH
53489: LD_EXP 86
53493: PPUSH
53494: LD_VAR 0 1
53498: PPUSH
53499: CALL 4980 0 2
53503: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
53504: LD_ADDR_VAR 0 3
53508: PUSH
53509: DOUBLE
53510: LD_EXP 87
53514: PUSH
53515: LD_VAR 0 4
53519: ARRAY
53520: INC
53521: ST_TO_ADDR
53522: LD_INT 1
53524: PUSH
53525: FOR_DOWNTO
53526: IFFALSE 53698
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
53528: LD_ADDR_VAR 0 5
53532: PUSH
53533: LD_EXP 87
53537: PUSH
53538: LD_VAR 0 4
53542: ARRAY
53543: PUSH
53544: LD_VAR 0 3
53548: ARRAY
53549: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
53550: LD_VAR 0 5
53554: PUSH
53555: LD_INT 1
53557: ARRAY
53558: PPUSH
53559: CALL_OW 302
53563: NOT
53564: PUSH
53565: LD_VAR 0 5
53569: PUSH
53570: LD_INT 1
53572: ARRAY
53573: PPUSH
53574: CALL_OW 255
53578: PUSH
53579: LD_VAR 0 1
53583: PPUSH
53584: CALL_OW 255
53588: NONEQUAL
53589: OR
53590: IFFALSE 53696
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
53592: LD_VAR 0 5
53596: PUSH
53597: LD_INT 1
53599: ARRAY
53600: PPUSH
53601: CALL_OW 305
53605: PUSH
53606: LD_VAR 0 5
53610: PUSH
53611: LD_INT 1
53613: ARRAY
53614: PPUSH
53615: CALL_OW 255
53619: PUSH
53620: LD_VAR 0 1
53624: PPUSH
53625: CALL_OW 255
53629: EQUAL
53630: AND
53631: IFFALSE 53655
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
53633: LD_VAR 0 5
53637: PUSH
53638: LD_INT 1
53640: ARRAY
53641: PPUSH
53642: LD_VAR 0 5
53646: PUSH
53647: LD_INT 2
53649: ARRAY
53650: PPUSH
53651: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
53655: LD_ADDR_EXP 87
53659: PUSH
53660: LD_EXP 87
53664: PPUSH
53665: LD_VAR 0 4
53669: PPUSH
53670: LD_EXP 87
53674: PUSH
53675: LD_VAR 0 4
53679: ARRAY
53680: PPUSH
53681: LD_VAR 0 3
53685: PPUSH
53686: CALL_OW 3
53690: PPUSH
53691: CALL_OW 1
53695: ST_TO_ADDR
// end ; end ;
53696: GO 53525
53698: POP
53699: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
53700: LD_VAR 0 1
53704: PPUSH
53705: LD_EXP 87
53709: PUSH
53710: LD_VAR 0 4
53714: ARRAY
53715: PUSH
53716: LD_INT 0
53718: PLUS
53719: PPUSH
53720: CALL_OW 505
// end ;
53724: LD_VAR 0 2
53728: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
53729: LD_INT 0
53731: PPUSH
53732: PPUSH
53733: PPUSH
53734: PPUSH
// if not hack in hackTanks then
53735: LD_VAR 0 1
53739: PUSH
53740: LD_EXP 86
53744: IN
53745: NOT
53746: IFFALSE 53750
// exit ;
53748: GO 53835
// index := GetElementIndex ( hackTanks , hack ) ;
53750: LD_ADDR_VAR 0 5
53754: PUSH
53755: LD_EXP 86
53759: PPUSH
53760: LD_VAR 0 1
53764: PPUSH
53765: CALL 4980 0 2
53769: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
53770: LD_ADDR_VAR 0 4
53774: PUSH
53775: DOUBLE
53776: LD_INT 1
53778: DEC
53779: ST_TO_ADDR
53780: LD_EXP 87
53784: PUSH
53785: LD_VAR 0 5
53789: ARRAY
53790: PUSH
53791: FOR_TO
53792: IFFALSE 53833
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
53794: LD_EXP 87
53798: PUSH
53799: LD_VAR 0 5
53803: ARRAY
53804: PUSH
53805: LD_VAR 0 4
53809: ARRAY
53810: PUSH
53811: LD_INT 1
53813: ARRAY
53814: PUSH
53815: LD_VAR 0 2
53819: EQUAL
53820: IFFALSE 53831
// KillUnit ( vehicle ) ;
53822: LD_VAR 0 2
53826: PPUSH
53827: CALL_OW 66
53831: GO 53791
53833: POP
53834: POP
// end ;
53835: LD_VAR 0 3
53839: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
53840: LD_EXP 91
53844: NOT
53845: IFFALSE 53880
53847: GO 53849
53849: DISABLE
// begin initMiner := true ;
53850: LD_ADDR_EXP 91
53854: PUSH
53855: LD_INT 1
53857: ST_TO_ADDR
// minersList := [ ] ;
53858: LD_ADDR_EXP 92
53862: PUSH
53863: EMPTY
53864: ST_TO_ADDR
// minerMinesList := [ ] ;
53865: LD_ADDR_EXP 93
53869: PUSH
53870: EMPTY
53871: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
53872: LD_ADDR_EXP 94
53876: PUSH
53877: LD_INT 5
53879: ST_TO_ADDR
// end ;
53880: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
53881: LD_EXP 91
53885: PUSH
53886: LD_INT 34
53888: PUSH
53889: LD_EXP 10
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PPUSH
53898: CALL_OW 69
53902: AND
53903: IFFALSE 54366
53905: GO 53907
53907: DISABLE
53908: LD_INT 0
53910: PPUSH
53911: PPUSH
53912: PPUSH
53913: PPUSH
// begin enable ;
53914: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
53915: LD_ADDR_VAR 0 1
53919: PUSH
53920: LD_INT 34
53922: PUSH
53923: LD_EXP 10
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PPUSH
53932: CALL_OW 69
53936: PUSH
53937: FOR_IN
53938: IFFALSE 54010
// begin if not i in minersList then
53940: LD_VAR 0 1
53944: PUSH
53945: LD_EXP 92
53949: IN
53950: NOT
53951: IFFALSE 54008
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
53953: LD_ADDR_EXP 92
53957: PUSH
53958: LD_EXP 92
53962: PPUSH
53963: LD_EXP 92
53967: PUSH
53968: LD_INT 1
53970: PLUS
53971: PPUSH
53972: LD_VAR 0 1
53976: PPUSH
53977: CALL_OW 1
53981: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
53982: LD_ADDR_EXP 93
53986: PUSH
53987: LD_EXP 93
53991: PPUSH
53992: LD_EXP 93
53996: PUSH
53997: LD_INT 1
53999: PLUS
54000: PPUSH
54001: EMPTY
54002: PPUSH
54003: CALL_OW 1
54007: ST_TO_ADDR
// end end ;
54008: GO 53937
54010: POP
54011: POP
// for i := minerMinesList downto 1 do
54012: LD_ADDR_VAR 0 1
54016: PUSH
54017: DOUBLE
54018: LD_EXP 93
54022: INC
54023: ST_TO_ADDR
54024: LD_INT 1
54026: PUSH
54027: FOR_DOWNTO
54028: IFFALSE 54364
// begin if IsLive ( minersList [ i ] ) then
54030: LD_EXP 92
54034: PUSH
54035: LD_VAR 0 1
54039: ARRAY
54040: PPUSH
54041: CALL_OW 300
54045: IFFALSE 54073
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
54047: LD_EXP 92
54051: PUSH
54052: LD_VAR 0 1
54056: ARRAY
54057: PPUSH
54058: LD_EXP 93
54062: PUSH
54063: LD_VAR 0 1
54067: ARRAY
54068: PPUSH
54069: CALL_OW 505
// if not minerMinesList [ i ] then
54073: LD_EXP 93
54077: PUSH
54078: LD_VAR 0 1
54082: ARRAY
54083: NOT
54084: IFFALSE 54088
// continue ;
54086: GO 54027
// for j := minerMinesList [ i ] downto 1 do
54088: LD_ADDR_VAR 0 2
54092: PUSH
54093: DOUBLE
54094: LD_EXP 93
54098: PUSH
54099: LD_VAR 0 1
54103: ARRAY
54104: INC
54105: ST_TO_ADDR
54106: LD_INT 1
54108: PUSH
54109: FOR_DOWNTO
54110: IFFALSE 54360
// begin side := GetSide ( minersList [ i ] ) ;
54112: LD_ADDR_VAR 0 3
54116: PUSH
54117: LD_EXP 92
54121: PUSH
54122: LD_VAR 0 1
54126: ARRAY
54127: PPUSH
54128: CALL_OW 255
54132: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
54133: LD_ADDR_VAR 0 4
54137: PUSH
54138: LD_EXP 93
54142: PUSH
54143: LD_VAR 0 1
54147: ARRAY
54148: PUSH
54149: LD_VAR 0 2
54153: ARRAY
54154: PUSH
54155: LD_INT 1
54157: ARRAY
54158: PPUSH
54159: LD_EXP 93
54163: PUSH
54164: LD_VAR 0 1
54168: ARRAY
54169: PUSH
54170: LD_VAR 0 2
54174: ARRAY
54175: PUSH
54176: LD_INT 2
54178: ARRAY
54179: PPUSH
54180: CALL_OW 428
54184: ST_TO_ADDR
// if not tmp then
54185: LD_VAR 0 4
54189: NOT
54190: IFFALSE 54194
// continue ;
54192: GO 54109
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
54194: LD_VAR 0 4
54198: PUSH
54199: LD_INT 81
54201: PUSH
54202: LD_VAR 0 3
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PPUSH
54211: CALL_OW 69
54215: IN
54216: PUSH
54217: LD_EXP 93
54221: PUSH
54222: LD_VAR 0 1
54226: ARRAY
54227: PUSH
54228: LD_VAR 0 2
54232: ARRAY
54233: PUSH
54234: LD_INT 1
54236: ARRAY
54237: PPUSH
54238: LD_EXP 93
54242: PUSH
54243: LD_VAR 0 1
54247: ARRAY
54248: PUSH
54249: LD_VAR 0 2
54253: ARRAY
54254: PUSH
54255: LD_INT 2
54257: ARRAY
54258: PPUSH
54259: CALL_OW 458
54263: AND
54264: IFFALSE 54358
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
54266: LD_EXP 93
54270: PUSH
54271: LD_VAR 0 1
54275: ARRAY
54276: PUSH
54277: LD_VAR 0 2
54281: ARRAY
54282: PUSH
54283: LD_INT 1
54285: ARRAY
54286: PPUSH
54287: LD_EXP 93
54291: PUSH
54292: LD_VAR 0 1
54296: ARRAY
54297: PUSH
54298: LD_VAR 0 2
54302: ARRAY
54303: PUSH
54304: LD_INT 2
54306: ARRAY
54307: PPUSH
54308: LD_VAR 0 3
54312: PPUSH
54313: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
54317: LD_ADDR_EXP 93
54321: PUSH
54322: LD_EXP 93
54326: PPUSH
54327: LD_VAR 0 1
54331: PPUSH
54332: LD_EXP 93
54336: PUSH
54337: LD_VAR 0 1
54341: ARRAY
54342: PPUSH
54343: LD_VAR 0 2
54347: PPUSH
54348: CALL_OW 3
54352: PPUSH
54353: CALL_OW 1
54357: ST_TO_ADDR
// end ; end ;
54358: GO 54109
54360: POP
54361: POP
// end ;
54362: GO 54027
54364: POP
54365: POP
// end ;
54366: PPOPN 4
54368: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
54369: LD_INT 0
54371: PPUSH
54372: PPUSH
// result := false ;
54373: LD_ADDR_VAR 0 4
54377: PUSH
54378: LD_INT 0
54380: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
54381: LD_VAR 0 1
54385: PPUSH
54386: CALL_OW 264
54390: PUSH
54391: LD_EXP 10
54395: EQUAL
54396: NOT
54397: IFFALSE 54401
// exit ;
54399: GO 54641
// index := GetElementIndex ( minersList , unit ) ;
54401: LD_ADDR_VAR 0 5
54405: PUSH
54406: LD_EXP 92
54410: PPUSH
54411: LD_VAR 0 1
54415: PPUSH
54416: CALL 4980 0 2
54420: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
54421: LD_EXP 93
54425: PUSH
54426: LD_VAR 0 5
54430: ARRAY
54431: PUSH
54432: LD_EXP 94
54436: GREATEREQUAL
54437: IFFALSE 54441
// exit ;
54439: GO 54641
// ComMoveXY ( unit , x , y ) ;
54441: LD_VAR 0 1
54445: PPUSH
54446: LD_VAR 0 2
54450: PPUSH
54451: LD_VAR 0 3
54455: PPUSH
54456: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
54460: LD_INT 35
54462: PPUSH
54463: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
54467: LD_VAR 0 1
54471: PPUSH
54472: LD_VAR 0 2
54476: PPUSH
54477: LD_VAR 0 3
54481: PPUSH
54482: CALL 35377 0 3
54486: NOT
54487: PUSH
54488: LD_VAR 0 1
54492: PPUSH
54493: CALL_OW 314
54497: AND
54498: IFFALSE 54502
// exit ;
54500: GO 54641
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
54502: LD_VAR 0 2
54506: PPUSH
54507: LD_VAR 0 3
54511: PPUSH
54512: CALL_OW 428
54516: PUSH
54517: LD_VAR 0 1
54521: EQUAL
54522: PUSH
54523: LD_VAR 0 1
54527: PPUSH
54528: CALL_OW 314
54532: NOT
54533: AND
54534: IFFALSE 54460
// PlaySoundXY ( x , y , PlantMine ) ;
54536: LD_VAR 0 2
54540: PPUSH
54541: LD_VAR 0 3
54545: PPUSH
54546: LD_STRING PlantMine
54548: PPUSH
54549: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
54553: LD_VAR 0 2
54557: PPUSH
54558: LD_VAR 0 3
54562: PPUSH
54563: LD_VAR 0 1
54567: PPUSH
54568: CALL_OW 255
54572: PPUSH
54573: LD_INT 0
54575: PPUSH
54576: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
54580: LD_ADDR_EXP 93
54584: PUSH
54585: LD_EXP 93
54589: PPUSH
54590: LD_VAR 0 5
54594: PUSH
54595: LD_EXP 93
54599: PUSH
54600: LD_VAR 0 5
54604: ARRAY
54605: PUSH
54606: LD_INT 1
54608: PLUS
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PPUSH
54614: LD_VAR 0 2
54618: PUSH
54619: LD_VAR 0 3
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PPUSH
54628: CALL 5195 0 3
54632: ST_TO_ADDR
// result := true ;
54633: LD_ADDR_VAR 0 4
54637: PUSH
54638: LD_INT 1
54640: ST_TO_ADDR
// end ;
54641: LD_VAR 0 4
54645: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
54646: LD_INT 0
54648: PPUSH
54649: PPUSH
54650: PPUSH
// if not unit in minersList then
54651: LD_VAR 0 1
54655: PUSH
54656: LD_EXP 92
54660: IN
54661: NOT
54662: IFFALSE 54666
// exit ;
54664: GO 55058
// index := GetElementIndex ( minersList , unit ) ;
54666: LD_ADDR_VAR 0 6
54670: PUSH
54671: LD_EXP 92
54675: PPUSH
54676: LD_VAR 0 1
54680: PPUSH
54681: CALL 4980 0 2
54685: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
54686: LD_ADDR_VAR 0 5
54690: PUSH
54691: DOUBLE
54692: LD_EXP 93
54696: PUSH
54697: LD_VAR 0 6
54701: ARRAY
54702: INC
54703: ST_TO_ADDR
54704: LD_INT 1
54706: PUSH
54707: FOR_DOWNTO
54708: IFFALSE 54869
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
54710: LD_EXP 93
54714: PUSH
54715: LD_VAR 0 6
54719: ARRAY
54720: PUSH
54721: LD_VAR 0 5
54725: ARRAY
54726: PUSH
54727: LD_INT 1
54729: ARRAY
54730: PUSH
54731: LD_VAR 0 2
54735: EQUAL
54736: PUSH
54737: LD_EXP 93
54741: PUSH
54742: LD_VAR 0 6
54746: ARRAY
54747: PUSH
54748: LD_VAR 0 5
54752: ARRAY
54753: PUSH
54754: LD_INT 2
54756: ARRAY
54757: PUSH
54758: LD_VAR 0 3
54762: EQUAL
54763: AND
54764: IFFALSE 54867
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
54766: LD_EXP 93
54770: PUSH
54771: LD_VAR 0 6
54775: ARRAY
54776: PUSH
54777: LD_VAR 0 5
54781: ARRAY
54782: PUSH
54783: LD_INT 1
54785: ARRAY
54786: PPUSH
54787: LD_EXP 93
54791: PUSH
54792: LD_VAR 0 6
54796: ARRAY
54797: PUSH
54798: LD_VAR 0 5
54802: ARRAY
54803: PUSH
54804: LD_INT 2
54806: ARRAY
54807: PPUSH
54808: LD_VAR 0 1
54812: PPUSH
54813: CALL_OW 255
54817: PPUSH
54818: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
54822: LD_ADDR_EXP 93
54826: PUSH
54827: LD_EXP 93
54831: PPUSH
54832: LD_VAR 0 6
54836: PPUSH
54837: LD_EXP 93
54841: PUSH
54842: LD_VAR 0 6
54846: ARRAY
54847: PPUSH
54848: LD_VAR 0 5
54852: PPUSH
54853: CALL_OW 3
54857: PPUSH
54858: CALL_OW 1
54862: ST_TO_ADDR
// exit ;
54863: POP
54864: POP
54865: GO 55058
// end ; end ;
54867: GO 54707
54869: POP
54870: POP
// for i := minerMinesList [ index ] downto 1 do
54871: LD_ADDR_VAR 0 5
54875: PUSH
54876: DOUBLE
54877: LD_EXP 93
54881: PUSH
54882: LD_VAR 0 6
54886: ARRAY
54887: INC
54888: ST_TO_ADDR
54889: LD_INT 1
54891: PUSH
54892: FOR_DOWNTO
54893: IFFALSE 55056
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
54895: LD_EXP 93
54899: PUSH
54900: LD_VAR 0 6
54904: ARRAY
54905: PUSH
54906: LD_VAR 0 5
54910: ARRAY
54911: PUSH
54912: LD_INT 1
54914: ARRAY
54915: PPUSH
54916: LD_EXP 93
54920: PUSH
54921: LD_VAR 0 6
54925: ARRAY
54926: PUSH
54927: LD_VAR 0 5
54931: ARRAY
54932: PUSH
54933: LD_INT 2
54935: ARRAY
54936: PPUSH
54937: LD_VAR 0 2
54941: PPUSH
54942: LD_VAR 0 3
54946: PPUSH
54947: CALL_OW 298
54951: PUSH
54952: LD_INT 6
54954: LESS
54955: IFFALSE 55054
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
54957: LD_EXP 93
54961: PUSH
54962: LD_VAR 0 6
54966: ARRAY
54967: PUSH
54968: LD_VAR 0 5
54972: ARRAY
54973: PUSH
54974: LD_INT 1
54976: ARRAY
54977: PPUSH
54978: LD_EXP 93
54982: PUSH
54983: LD_VAR 0 6
54987: ARRAY
54988: PUSH
54989: LD_VAR 0 5
54993: ARRAY
54994: PUSH
54995: LD_INT 2
54997: ARRAY
54998: PPUSH
54999: LD_VAR 0 1
55003: PPUSH
55004: CALL_OW 255
55008: PPUSH
55009: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
55013: LD_ADDR_EXP 93
55017: PUSH
55018: LD_EXP 93
55022: PPUSH
55023: LD_VAR 0 6
55027: PPUSH
55028: LD_EXP 93
55032: PUSH
55033: LD_VAR 0 6
55037: ARRAY
55038: PPUSH
55039: LD_VAR 0 5
55043: PPUSH
55044: CALL_OW 3
55048: PPUSH
55049: CALL_OW 1
55053: ST_TO_ADDR
// end ; end ;
55054: GO 54892
55056: POP
55057: POP
// end ;
55058: LD_VAR 0 4
55062: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
55063: LD_INT 0
55065: PPUSH
55066: PPUSH
55067: PPUSH
55068: PPUSH
55069: PPUSH
55070: PPUSH
55071: PPUSH
55072: PPUSH
55073: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
55074: LD_VAR 0 1
55078: PPUSH
55079: CALL_OW 264
55083: PUSH
55084: LD_EXP 10
55088: EQUAL
55089: NOT
55090: PUSH
55091: LD_VAR 0 1
55095: PUSH
55096: LD_EXP 92
55100: IN
55101: NOT
55102: OR
55103: IFFALSE 55107
// exit ;
55105: GO 55429
// index := GetElementIndex ( minersList , unit ) ;
55107: LD_ADDR_VAR 0 6
55111: PUSH
55112: LD_EXP 92
55116: PPUSH
55117: LD_VAR 0 1
55121: PPUSH
55122: CALL 4980 0 2
55126: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
55127: LD_ADDR_VAR 0 8
55131: PUSH
55132: LD_EXP 94
55136: PUSH
55137: LD_EXP 93
55141: PUSH
55142: LD_VAR 0 6
55146: ARRAY
55147: MINUS
55148: ST_TO_ADDR
// if not minesFreeAmount then
55149: LD_VAR 0 8
55153: NOT
55154: IFFALSE 55158
// exit ;
55156: GO 55429
// tmp := [ ] ;
55158: LD_ADDR_VAR 0 7
55162: PUSH
55163: EMPTY
55164: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
55165: LD_ADDR_VAR 0 5
55169: PUSH
55170: DOUBLE
55171: LD_INT 1
55173: DEC
55174: ST_TO_ADDR
55175: LD_VAR 0 8
55179: PUSH
55180: FOR_TO
55181: IFFALSE 55376
// begin _d := rand ( 0 , 5 ) ;
55183: LD_ADDR_VAR 0 11
55187: PUSH
55188: LD_INT 0
55190: PPUSH
55191: LD_INT 5
55193: PPUSH
55194: CALL_OW 12
55198: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
55199: LD_ADDR_VAR 0 12
55203: PUSH
55204: LD_INT 2
55206: PPUSH
55207: LD_INT 6
55209: PPUSH
55210: CALL_OW 12
55214: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
55215: LD_ADDR_VAR 0 9
55219: PUSH
55220: LD_VAR 0 2
55224: PPUSH
55225: LD_VAR 0 11
55229: PPUSH
55230: LD_VAR 0 12
55234: PPUSH
55235: CALL_OW 272
55239: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
55240: LD_ADDR_VAR 0 10
55244: PUSH
55245: LD_VAR 0 3
55249: PPUSH
55250: LD_VAR 0 11
55254: PPUSH
55255: LD_VAR 0 12
55259: PPUSH
55260: CALL_OW 273
55264: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
55265: LD_VAR 0 9
55269: PPUSH
55270: LD_VAR 0 10
55274: PPUSH
55275: CALL_OW 488
55279: PUSH
55280: LD_VAR 0 9
55284: PUSH
55285: LD_VAR 0 10
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_VAR 0 7
55298: IN
55299: NOT
55300: AND
55301: PUSH
55302: LD_VAR 0 9
55306: PPUSH
55307: LD_VAR 0 10
55311: PPUSH
55312: CALL_OW 458
55316: NOT
55317: AND
55318: IFFALSE 55360
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
55320: LD_ADDR_VAR 0 7
55324: PUSH
55325: LD_VAR 0 7
55329: PPUSH
55330: LD_VAR 0 7
55334: PUSH
55335: LD_INT 1
55337: PLUS
55338: PPUSH
55339: LD_VAR 0 9
55343: PUSH
55344: LD_VAR 0 10
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PPUSH
55353: CALL_OW 1
55357: ST_TO_ADDR
55358: GO 55374
// i := i - 1 ;
55360: LD_ADDR_VAR 0 5
55364: PUSH
55365: LD_VAR 0 5
55369: PUSH
55370: LD_INT 1
55372: MINUS
55373: ST_TO_ADDR
// end ;
55374: GO 55180
55376: POP
55377: POP
// for i in tmp do
55378: LD_ADDR_VAR 0 5
55382: PUSH
55383: LD_VAR 0 7
55387: PUSH
55388: FOR_IN
55389: IFFALSE 55427
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
55391: LD_VAR 0 1
55395: PPUSH
55396: LD_VAR 0 5
55400: PUSH
55401: LD_INT 1
55403: ARRAY
55404: PPUSH
55405: LD_VAR 0 5
55409: PUSH
55410: LD_INT 2
55412: ARRAY
55413: PPUSH
55414: CALL 54369 0 3
55418: NOT
55419: IFFALSE 55425
// exit ;
55421: POP
55422: POP
55423: GO 55429
55425: GO 55388
55427: POP
55428: POP
// end ;
55429: LD_VAR 0 4
55433: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
55434: LD_INT 0
55436: PPUSH
55437: PPUSH
55438: PPUSH
55439: PPUSH
55440: PPUSH
55441: PPUSH
55442: PPUSH
// if not GetClass ( unit ) = class_sniper then
55443: LD_VAR 0 1
55447: PPUSH
55448: CALL_OW 257
55452: PUSH
55453: LD_INT 5
55455: EQUAL
55456: NOT
55457: IFFALSE 55461
// exit ;
55459: GO 55849
// dist := 8 ;
55461: LD_ADDR_VAR 0 5
55465: PUSH
55466: LD_INT 8
55468: ST_TO_ADDR
// viewRange := 12 ;
55469: LD_ADDR_VAR 0 7
55473: PUSH
55474: LD_INT 12
55476: ST_TO_ADDR
// side := GetSide ( unit ) ;
55477: LD_ADDR_VAR 0 6
55481: PUSH
55482: LD_VAR 0 1
55486: PPUSH
55487: CALL_OW 255
55491: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
55492: LD_INT 61
55494: PPUSH
55495: LD_VAR 0 6
55499: PPUSH
55500: CALL_OW 321
55504: PUSH
55505: LD_INT 2
55507: EQUAL
55508: IFFALSE 55518
// viewRange := 16 ;
55510: LD_ADDR_VAR 0 7
55514: PUSH
55515: LD_INT 16
55517: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
55518: LD_VAR 0 1
55522: PPUSH
55523: LD_VAR 0 2
55527: PPUSH
55528: LD_VAR 0 3
55532: PPUSH
55533: CALL_OW 297
55537: PUSH
55538: LD_VAR 0 5
55542: GREATER
55543: IFFALSE 55622
// begin ComMoveXY ( unit , x , y ) ;
55545: LD_VAR 0 1
55549: PPUSH
55550: LD_VAR 0 2
55554: PPUSH
55555: LD_VAR 0 3
55559: PPUSH
55560: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
55564: LD_INT 35
55566: PPUSH
55567: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
55571: LD_VAR 0 1
55575: PPUSH
55576: LD_VAR 0 2
55580: PPUSH
55581: LD_VAR 0 3
55585: PPUSH
55586: CALL 35377 0 3
55590: NOT
55591: IFFALSE 55595
// exit ;
55593: GO 55849
// until GetDistUnitXY ( unit , x , y ) < dist ;
55595: LD_VAR 0 1
55599: PPUSH
55600: LD_VAR 0 2
55604: PPUSH
55605: LD_VAR 0 3
55609: PPUSH
55610: CALL_OW 297
55614: PUSH
55615: LD_VAR 0 5
55619: LESS
55620: IFFALSE 55564
// end ; ComTurnXY ( unit , x , y ) ;
55622: LD_VAR 0 1
55626: PPUSH
55627: LD_VAR 0 2
55631: PPUSH
55632: LD_VAR 0 3
55636: PPUSH
55637: CALL_OW 118
// wait ( 5 ) ;
55641: LD_INT 5
55643: PPUSH
55644: CALL_OW 67
// _d := GetDir ( unit ) ;
55648: LD_ADDR_VAR 0 10
55652: PUSH
55653: LD_VAR 0 1
55657: PPUSH
55658: CALL_OW 254
55662: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
55663: LD_ADDR_VAR 0 8
55667: PUSH
55668: LD_VAR 0 1
55672: PPUSH
55673: CALL_OW 250
55677: PPUSH
55678: LD_VAR 0 10
55682: PPUSH
55683: LD_VAR 0 5
55687: PPUSH
55688: CALL_OW 272
55692: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
55693: LD_ADDR_VAR 0 9
55697: PUSH
55698: LD_VAR 0 1
55702: PPUSH
55703: CALL_OW 251
55707: PPUSH
55708: LD_VAR 0 10
55712: PPUSH
55713: LD_VAR 0 5
55717: PPUSH
55718: CALL_OW 273
55722: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55723: LD_VAR 0 8
55727: PPUSH
55728: LD_VAR 0 9
55732: PPUSH
55733: CALL_OW 488
55737: NOT
55738: IFFALSE 55742
// exit ;
55740: GO 55849
// ComAnimCustom ( unit , 1 ) ;
55742: LD_VAR 0 1
55746: PPUSH
55747: LD_INT 1
55749: PPUSH
55750: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
55754: LD_VAR 0 8
55758: PPUSH
55759: LD_VAR 0 9
55763: PPUSH
55764: LD_VAR 0 6
55768: PPUSH
55769: LD_VAR 0 7
55773: PPUSH
55774: CALL_OW 330
// repeat wait ( 1 ) ;
55778: LD_INT 1
55780: PPUSH
55781: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
55785: LD_VAR 0 1
55789: PPUSH
55790: CALL_OW 316
55794: PUSH
55795: LD_VAR 0 1
55799: PPUSH
55800: CALL_OW 314
55804: OR
55805: PUSH
55806: LD_VAR 0 1
55810: PPUSH
55811: CALL_OW 302
55815: NOT
55816: OR
55817: PUSH
55818: LD_VAR 0 1
55822: PPUSH
55823: CALL_OW 301
55827: OR
55828: IFFALSE 55778
// RemoveSeeing ( _x , _y , side ) ;
55830: LD_VAR 0 8
55834: PPUSH
55835: LD_VAR 0 9
55839: PPUSH
55840: LD_VAR 0 6
55844: PPUSH
55845: CALL_OW 331
// end ; end_of_file
55849: LD_VAR 0 4
55853: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55854: LD_VAR 0 1
55858: PUSH
55859: LD_INT 200
55861: DOUBLE
55862: GREATEREQUAL
55863: IFFALSE 55871
55865: LD_INT 299
55867: DOUBLE
55868: LESSEQUAL
55869: IFTRUE 55873
55871: GO 55905
55873: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55874: LD_VAR 0 1
55878: PPUSH
55879: LD_VAR 0 2
55883: PPUSH
55884: LD_VAR 0 3
55888: PPUSH
55889: LD_VAR 0 4
55893: PPUSH
55894: LD_VAR 0 5
55898: PPUSH
55899: CALL 51971 0 5
55903: GO 55982
55905: LD_INT 300
55907: DOUBLE
55908: GREATEREQUAL
55909: IFFALSE 55917
55911: LD_INT 399
55913: DOUBLE
55914: LESSEQUAL
55915: IFTRUE 55919
55917: GO 55981
55919: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55920: LD_VAR 0 1
55924: PPUSH
55925: LD_VAR 0 2
55929: PPUSH
55930: LD_VAR 0 3
55934: PPUSH
55935: LD_VAR 0 4
55939: PPUSH
55940: LD_VAR 0 5
55944: PPUSH
55945: LD_VAR 0 6
55949: PPUSH
55950: LD_VAR 0 7
55954: PPUSH
55955: LD_VAR 0 8
55959: PPUSH
55960: LD_VAR 0 9
55964: PPUSH
55965: LD_VAR 0 10
55969: PPUSH
55970: LD_VAR 0 11
55974: PPUSH
55975: CALL 49859 0 11
55979: GO 55982
55981: POP
// end ;
55982: PPOPN 11
55984: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55985: LD_VAR 0 1
55989: PPUSH
55990: LD_VAR 0 2
55994: PPUSH
55995: LD_VAR 0 3
55999: PPUSH
56000: LD_VAR 0 4
56004: PPUSH
56005: LD_VAR 0 5
56009: PPUSH
56010: CALL 51953 0 5
// end ;
56014: PPOPN 5
56016: END
