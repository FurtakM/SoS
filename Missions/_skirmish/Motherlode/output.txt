// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 116 0 0
// PrepareNature ( 4 , 4 , 12 , 4 , 4 , 1 , 4 , natArea , watArea ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 12
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 4
  22: PPUSH
  23: LD_INT 1
  25: PPUSH
  26: LD_INT 4
  28: PPUSH
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: CALL 35991 0 9
// if gameType = 1 then
  39: LD_EXP 2
  43: PUSH
  44: LD_INT 1
  46: EQUAL
  47: IFFALSE 111
// InitEcoMode ( [ 189 , 97 ] , [ [ 215 , 93 ] , [ 204 , 126 ] ] , [ attacksArea1 , attacksArea2 , attacksArea3 , attacksArea4 , attacksArea5 ] ) else
  49: LD_INT 189
  51: PUSH
  52: LD_INT 97
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: PPUSH
  59: LD_INT 215
  61: PUSH
  62: LD_INT 93
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: PUSH
  69: LD_INT 204
  71: PUSH
  72: LD_INT 126
  74: PUSH
  75: EMPTY
  76: LIST
  77: LIST
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PPUSH
  83: LD_INT 2
  85: PUSH
  86: LD_INT 3
  88: PUSH
  89: LD_INT 4
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 6
  97: PUSH
  98: EMPTY
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: PPUSH
 105: CALL 44694 0 3
 109: GO 115
// InitDefendMode ( ) ;
 111: CALL 165 0 0
// end ;
 115: END
// export debug , gameType ; function Init ; begin
 116: LD_INT 0
 118: PPUSH
// debug := 0 ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// if debug then
 127: LD_EXP 1
 131: IFFALSE 143
// gameType := 1 else
 133: LD_ADDR_EXP 2
 137: PUSH
 138: LD_INT 1
 140: ST_TO_ADDR
 141: GO 160
// gameType := GetMultiplayerSetting ( 50 ) + 1 ;
 143: LD_ADDR_EXP 2
 147: PUSH
 148: LD_INT 50
 150: PPUSH
 151: CALL_OW 426
 155: PUSH
 156: LD_INT 1
 158: PLUS
 159: ST_TO_ADDR
// end ; end_of_file
 160: LD_VAR 0 1
 164: RET
// export function InitDefendMode ( ) ; var buildingsList ; begin
 165: LD_INT 0
 167: PPUSH
 168: PPUSH
// buildingsList := [ [ 91 , 182 , 59 , 3 , 0 , 0 , 45 ] , [ 90 , 185 , 60 , 3 , 0 , 0 , 46 ] , [ 90 , 188 , 62 , 3 , 0 , 0 , 43 ] , [ 73 , 178 , 64 , 2 , 0 , 0 , 0 ] , [ 75 , 182 , 65 , 3 , 0 , 0 , 0 ] , [ 76 , 179 , 68 , 1 , 0 , 0 , 0 ] , [ 69 , 182 , 68 , 2 , 0 , 0 , 0 ] , [ 71 , 186 , 68 , 4 , 0 , 0 , 0 ] , [ 72 , 182 , 72 , 0 , 0 , 0 , 0 ] , [ 91 , 169 , 73 , 1 , 0 , 0 , 46 ] , [ 67 , 209 , 79 , 4 , 0 , 0 , 0 ] , [ 88 , 204 , 87 , 3 , 0 , 0 , 0 ] , [ 91 , 169 , 88 , 1 , 0 , 0 , 43 ] , [ 91 , 169 , 91 , 1 , 0 , 0 , 45 ] , [ 86 , 192 , 92 , 4 , 0 , 0 , 0 ] , [ 88 , 207 , 93 , 2 , 0 , 0 , 0 ] , [ 65 , 194 , 96 , 4 , 0 , 0 , 0 ] , [ 90 , 224 , 96 , 4 , 0 , 0 , 45 ] , [ 86 , 196 , 100 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 100 , 4 , 0 , 0 , 46 ] , [ 88 , 211 , 101 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 103 , 4 , 0 , 0 , 45 ] , [ 67 , 172 , 105 , 1 , 0 , 0 , 0 ] , [ 86 , 185 , 105 , 0 , 0 , 0 , 0 ] , [ 86 , 188 , 107 , 5 , 0 , 0 , 0 ] , [ 86 , 186 , 108 , 3 , 0 , 0 , 0 ] , [ 91 , 172 , 109 , 1 , 0 , 0 , 45 ] , [ 90 , 227 , 119 , 5 , 0 , 0 , 46 ] , [ 91 , 225 , 120 , 5 , 0 , 0 , 45 ] , [ 67 , 226 , 135 , 5 , 0 , 0 , 0 ] ] ;
 169: LD_ADDR_VAR 0 2
 173: PUSH
 174: LD_INT 91
 176: PUSH
 177: LD_INT 182
 179: PUSH
 180: LD_INT 59
 182: PUSH
 183: LD_INT 3
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 45
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 90
 206: PUSH
 207: LD_INT 185
 209: PUSH
 210: LD_INT 60
 212: PUSH
 213: LD_INT 3
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 46
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: PUSH
 234: LD_INT 90
 236: PUSH
 237: LD_INT 188
 239: PUSH
 240: LD_INT 62
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 0
 251: PUSH
 252: LD_INT 43
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 73
 266: PUSH
 267: LD_INT 178
 269: PUSH
 270: LD_INT 64
 272: PUSH
 273: LD_INT 2
 275: PUSH
 276: LD_INT 0
 278: PUSH
 279: LD_INT 0
 281: PUSH
 282: LD_INT 0
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 75
 296: PUSH
 297: LD_INT 182
 299: PUSH
 300: LD_INT 65
 302: PUSH
 303: LD_INT 3
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: LD_INT 0
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: PUSH
 324: LD_INT 76
 326: PUSH
 327: LD_INT 179
 329: PUSH
 330: LD_INT 68
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 0
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 69
 356: PUSH
 357: LD_INT 182
 359: PUSH
 360: LD_INT 68
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 71
 386: PUSH
 387: LD_INT 186
 389: PUSH
 390: LD_INT 68
 392: PUSH
 393: LD_INT 4
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: LD_INT 72
 416: PUSH
 417: LD_INT 182
 419: PUSH
 420: LD_INT 72
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: LD_INT 0
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: PUSH
 444: LD_INT 91
 446: PUSH
 447: LD_INT 169
 449: PUSH
 450: LD_INT 73
 452: PUSH
 453: LD_INT 1
 455: PUSH
 456: LD_INT 0
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 46
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 67
 476: PUSH
 477: LD_INT 209
 479: PUSH
 480: LD_INT 79
 482: PUSH
 483: LD_INT 4
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 88
 506: PUSH
 507: LD_INT 204
 509: PUSH
 510: LD_INT 87
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: LD_INT 0
 518: PUSH
 519: LD_INT 0
 521: PUSH
 522: LD_INT 0
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 91
 536: PUSH
 537: LD_INT 169
 539: PUSH
 540: LD_INT 88
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 0
 551: PUSH
 552: LD_INT 43
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 91
 566: PUSH
 567: LD_INT 169
 569: PUSH
 570: LD_INT 91
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 0
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: LD_INT 45
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 86
 596: PUSH
 597: LD_INT 192
 599: PUSH
 600: LD_INT 92
 602: PUSH
 603: LD_INT 4
 605: PUSH
 606: LD_INT 0
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: LD_INT 0
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_INT 88
 626: PUSH
 627: LD_INT 207
 629: PUSH
 630: LD_INT 93
 632: PUSH
 633: LD_INT 2
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 65
 656: PUSH
 657: LD_INT 194
 659: PUSH
 660: LD_INT 96
 662: PUSH
 663: LD_INT 4
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 90
 686: PUSH
 687: LD_INT 224
 689: PUSH
 690: LD_INT 96
 692: PUSH
 693: LD_INT 4
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 45
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: PUSH
 714: LD_INT 86
 716: PUSH
 717: LD_INT 196
 719: PUSH
 720: LD_INT 100
 722: PUSH
 723: LD_INT 4
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 91
 746: PUSH
 747: LD_INT 228
 749: PUSH
 750: LD_INT 100
 752: PUSH
 753: LD_INT 4
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: LD_INT 0
 761: PUSH
 762: LD_INT 46
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 88
 776: PUSH
 777: LD_INT 211
 779: PUSH
 780: LD_INT 101
 782: PUSH
 783: LD_INT 4
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 0
 791: PUSH
 792: LD_INT 0
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 91
 806: PUSH
 807: LD_INT 228
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 4
 815: PUSH
 816: LD_INT 0
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 45
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 67
 836: PUSH
 837: LD_INT 172
 839: PUSH
 840: LD_INT 105
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 0
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 86
 866: PUSH
 867: LD_INT 185
 869: PUSH
 870: LD_INT 105
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: LD_INT 0
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 86
 896: PUSH
 897: LD_INT 188
 899: PUSH
 900: LD_INT 107
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: LD_INT 0
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 86
 926: PUSH
 927: LD_INT 186
 929: PUSH
 930: LD_INT 108
 932: PUSH
 933: LD_INT 3
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 91
 956: PUSH
 957: LD_INT 172
 959: PUSH
 960: LD_INT 109
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 0
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 45
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 227
 989: PUSH
 990: LD_INT 119
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 0
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 46
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 91
1016: PUSH
1017: LD_INT 225
1019: PUSH
1020: LD_INT 120
1022: PUSH
1023: LD_INT 5
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: LD_INT 45
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_INT 67
1046: PUSH
1047: LD_INT 226
1049: PUSH
1050: LD_INT 135
1052: PUSH
1053: LD_INT 5
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: ST_TO_ADDR
// end ; end_of_file
1106: LD_VAR 0 1
1110: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
1111: LD_VAR 0 1
1115: PPUSH
1116: LD_VAR 0 2
1120: PPUSH
1121: CALL 63669 0 2
// end ;
1125: PPOPN 2
1127: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
1128: LD_VAR 0 1
1132: PPUSH
1133: CALL 63611 0 1
// end ; end_of_file
1137: PPOPN 1
1139: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1140: LD_INT 0
1142: PPUSH
1143: PPUSH
// if exist_mode then
1144: LD_VAR 0 2
1148: IFFALSE 1194
// begin unit := CreateCharacter ( prefix & ident ) ;
1150: LD_ADDR_VAR 0 5
1154: PUSH
1155: LD_VAR 0 3
1159: PUSH
1160: LD_VAR 0 1
1164: STR
1165: PPUSH
1166: CALL_OW 34
1170: ST_TO_ADDR
// if unit then
1171: LD_VAR 0 5
1175: IFFALSE 1192
// DeleteCharacters ( prefix & ident ) ;
1177: LD_VAR 0 3
1181: PUSH
1182: LD_VAR 0 1
1186: STR
1187: PPUSH
1188: CALL_OW 40
// end else
1192: GO 1209
// unit := NewCharacter ( ident ) ;
1194: LD_ADDR_VAR 0 5
1198: PUSH
1199: LD_VAR 0 1
1203: PPUSH
1204: CALL_OW 25
1208: ST_TO_ADDR
// result := unit ;
1209: LD_ADDR_VAR 0 4
1213: PUSH
1214: LD_VAR 0 5
1218: ST_TO_ADDR
// end ;
1219: LD_VAR 0 4
1223: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
1224: LD_INT 0
1226: PPUSH
1227: PPUSH
// if exist_mode then
1228: LD_VAR 0 2
1232: IFFALSE 1257
// unit := CreateCharacter ( prefix & ident ) else
1234: LD_ADDR_VAR 0 5
1238: PUSH
1239: LD_VAR 0 3
1243: PUSH
1244: LD_VAR 0 1
1248: STR
1249: PPUSH
1250: CALL_OW 34
1254: ST_TO_ADDR
1255: GO 1272
// unit := NewCharacter ( ident ) ;
1257: LD_ADDR_VAR 0 5
1261: PUSH
1262: LD_VAR 0 1
1266: PPUSH
1267: CALL_OW 25
1271: ST_TO_ADDR
// result := unit ;
1272: LD_ADDR_VAR 0 4
1276: PUSH
1277: LD_VAR 0 5
1281: ST_TO_ADDR
// end ;
1282: LD_VAR 0 4
1286: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1287: LD_INT 0
1289: PPUSH
1290: PPUSH
// if not side or not nation then
1291: LD_VAR 0 1
1295: NOT
1296: IFTRUE 1305
1298: PUSH
1299: LD_VAR 0 2
1303: NOT
1304: OR
1305: IFFALSE 1309
// exit ;
1307: GO 2103
// case nation of nation_american :
1309: LD_VAR 0 2
1313: PUSH
1314: LD_INT 1
1316: DOUBLE
1317: EQUAL
1318: IFTRUE 1322
1320: GO 1544
1322: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
1323: LD_ADDR_VAR 0 4
1327: PUSH
1328: LD_INT 35
1330: PUSH
1331: LD_INT 45
1333: PUSH
1334: LD_INT 46
1336: PUSH
1337: LD_INT 47
1339: PUSH
1340: LD_INT 82
1342: PUSH
1343: LD_INT 83
1345: PUSH
1346: LD_INT 84
1348: PUSH
1349: LD_INT 85
1351: PUSH
1352: LD_INT 86
1354: PUSH
1355: LD_INT 1
1357: PUSH
1358: LD_INT 2
1360: PUSH
1361: LD_INT 6
1363: PUSH
1364: LD_INT 15
1366: PUSH
1367: LD_INT 16
1369: PUSH
1370: LD_INT 7
1372: PUSH
1373: LD_INT 12
1375: PUSH
1376: LD_INT 13
1378: PUSH
1379: LD_INT 10
1381: PUSH
1382: LD_INT 14
1384: PUSH
1385: LD_INT 20
1387: PUSH
1388: LD_INT 21
1390: PUSH
1391: LD_INT 22
1393: PUSH
1394: LD_INT 25
1396: PUSH
1397: LD_INT 32
1399: PUSH
1400: LD_INT 27
1402: PUSH
1403: LD_INT 36
1405: PUSH
1406: LD_INT 69
1408: PUSH
1409: LD_INT 39
1411: PUSH
1412: LD_INT 34
1414: PUSH
1415: LD_INT 40
1417: PUSH
1418: LD_INT 48
1420: PUSH
1421: LD_INT 49
1423: PUSH
1424: LD_INT 50
1426: PUSH
1427: LD_INT 51
1429: PUSH
1430: LD_INT 52
1432: PUSH
1433: LD_INT 53
1435: PUSH
1436: LD_INT 54
1438: PUSH
1439: LD_INT 55
1441: PUSH
1442: LD_INT 56
1444: PUSH
1445: LD_INT 57
1447: PUSH
1448: LD_INT 58
1450: PUSH
1451: LD_INT 59
1453: PUSH
1454: LD_INT 60
1456: PUSH
1457: LD_INT 61
1459: PUSH
1460: LD_INT 62
1462: PUSH
1463: LD_INT 80
1465: PUSH
1466: LD_INT 82
1468: PUSH
1469: LD_INT 83
1471: PUSH
1472: LD_INT 84
1474: PUSH
1475: LD_INT 85
1477: PUSH
1478: LD_INT 86
1480: PUSH
1481: LD_INT 90
1483: PUSH
1484: LD_INT 93
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: ST_TO_ADDR
1542: GO 2025
1544: LD_INT 2
1546: DOUBLE
1547: EQUAL
1548: IFTRUE 1552
1550: GO 1786
1552: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
1553: LD_ADDR_VAR 0 4
1557: PUSH
1558: LD_INT 35
1560: PUSH
1561: LD_INT 45
1563: PUSH
1564: LD_INT 46
1566: PUSH
1567: LD_INT 47
1569: PUSH
1570: LD_INT 82
1572: PUSH
1573: LD_INT 83
1575: PUSH
1576: LD_INT 84
1578: PUSH
1579: LD_INT 85
1581: PUSH
1582: LD_INT 87
1584: PUSH
1585: LD_INT 70
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: LD_INT 11
1593: PUSH
1594: LD_INT 3
1596: PUSH
1597: LD_INT 4
1599: PUSH
1600: LD_INT 5
1602: PUSH
1603: LD_INT 6
1605: PUSH
1606: LD_INT 15
1608: PUSH
1609: LD_INT 18
1611: PUSH
1612: LD_INT 7
1614: PUSH
1615: LD_INT 17
1617: PUSH
1618: LD_INT 8
1620: PUSH
1621: LD_INT 20
1623: PUSH
1624: LD_INT 21
1626: PUSH
1627: LD_INT 22
1629: PUSH
1630: LD_INT 72
1632: PUSH
1633: LD_INT 26
1635: PUSH
1636: LD_INT 69
1638: PUSH
1639: LD_INT 39
1641: PUSH
1642: LD_INT 40
1644: PUSH
1645: LD_INT 41
1647: PUSH
1648: LD_INT 42
1650: PUSH
1651: LD_INT 43
1653: PUSH
1654: LD_INT 48
1656: PUSH
1657: LD_INT 49
1659: PUSH
1660: LD_INT 50
1662: PUSH
1663: LD_INT 51
1665: PUSH
1666: LD_INT 52
1668: PUSH
1669: LD_INT 53
1671: PUSH
1672: LD_INT 54
1674: PUSH
1675: LD_INT 55
1677: PUSH
1678: LD_INT 56
1680: PUSH
1681: LD_INT 60
1683: PUSH
1684: LD_INT 61
1686: PUSH
1687: LD_INT 62
1689: PUSH
1690: LD_INT 66
1692: PUSH
1693: LD_INT 67
1695: PUSH
1696: LD_INT 68
1698: PUSH
1699: LD_INT 81
1701: PUSH
1702: LD_INT 82
1704: PUSH
1705: LD_INT 83
1707: PUSH
1708: LD_INT 84
1710: PUSH
1711: LD_INT 85
1713: PUSH
1714: LD_INT 87
1716: PUSH
1717: LD_INT 88
1719: PUSH
1720: LD_INT 92
1722: PUSH
1723: LD_INT 94
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: ST_TO_ADDR
1784: GO 2025
1786: LD_INT 3
1788: DOUBLE
1789: EQUAL
1790: IFTRUE 1794
1792: GO 2024
1794: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
1795: LD_ADDR_VAR 0 4
1799: PUSH
1800: LD_INT 46
1802: PUSH
1803: LD_INT 47
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 2
1811: PUSH
1812: LD_INT 82
1814: PUSH
1815: LD_INT 83
1817: PUSH
1818: LD_INT 84
1820: PUSH
1821: LD_INT 85
1823: PUSH
1824: LD_INT 86
1826: PUSH
1827: LD_INT 11
1829: PUSH
1830: LD_INT 9
1832: PUSH
1833: LD_INT 20
1835: PUSH
1836: LD_INT 19
1838: PUSH
1839: LD_INT 21
1841: PUSH
1842: LD_INT 24
1844: PUSH
1845: LD_INT 22
1847: PUSH
1848: LD_INT 25
1850: PUSH
1851: LD_INT 28
1853: PUSH
1854: LD_INT 29
1856: PUSH
1857: LD_INT 30
1859: PUSH
1860: LD_INT 31
1862: PUSH
1863: LD_INT 37
1865: PUSH
1866: LD_INT 38
1868: PUSH
1869: LD_INT 32
1871: PUSH
1872: LD_INT 27
1874: PUSH
1875: LD_INT 33
1877: PUSH
1878: LD_INT 69
1880: PUSH
1881: LD_INT 39
1883: PUSH
1884: LD_INT 34
1886: PUSH
1887: LD_INT 40
1889: PUSH
1890: LD_INT 71
1892: PUSH
1893: LD_INT 23
1895: PUSH
1896: LD_INT 44
1898: PUSH
1899: LD_INT 48
1901: PUSH
1902: LD_INT 49
1904: PUSH
1905: LD_INT 50
1907: PUSH
1908: LD_INT 51
1910: PUSH
1911: LD_INT 52
1913: PUSH
1914: LD_INT 53
1916: PUSH
1917: LD_INT 54
1919: PUSH
1920: LD_INT 55
1922: PUSH
1923: LD_INT 56
1925: PUSH
1926: LD_INT 57
1928: PUSH
1929: LD_INT 58
1931: PUSH
1932: LD_INT 59
1934: PUSH
1935: LD_INT 63
1937: PUSH
1938: LD_INT 64
1940: PUSH
1941: LD_INT 65
1943: PUSH
1944: LD_INT 82
1946: PUSH
1947: LD_INT 83
1949: PUSH
1950: LD_INT 84
1952: PUSH
1953: LD_INT 85
1955: PUSH
1956: LD_INT 86
1958: PUSH
1959: LD_INT 89
1961: PUSH
1962: LD_INT 91
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: ST_TO_ADDR
2022: GO 2025
2024: POP
// if state > - 1 and state < 3 then
2025: LD_VAR 0 3
2029: PUSH
2030: LD_INT 1
2032: NEG
2033: GREATER
2034: IFFALSE 2046
2036: PUSH
2037: LD_VAR 0 3
2041: PUSH
2042: LD_INT 3
2044: LESS
2045: AND
2046: IFFALSE 2103
// for i in result do
2048: LD_ADDR_VAR 0 5
2052: PUSH
2053: LD_VAR 0 4
2057: PUSH
2058: FOR_IN
2059: IFFALSE 2101
// if GetTech ( i , side ) <> state then
2061: LD_VAR 0 5
2065: PPUSH
2066: LD_VAR 0 1
2070: PPUSH
2071: CALL_OW 321
2075: PUSH
2076: LD_VAR 0 3
2080: NONEQUAL
2081: IFFALSE 2099
// result := result diff i ;
2083: LD_ADDR_VAR 0 4
2087: PUSH
2088: LD_VAR 0 4
2092: PUSH
2093: LD_VAR 0 5
2097: DIFF
2098: ST_TO_ADDR
2099: GO 2058
2101: POP
2102: POP
// end ;
2103: LD_VAR 0 4
2107: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2108: LD_INT 0
2110: PPUSH
2111: PPUSH
2112: PPUSH
// result := true ;
2113: LD_ADDR_VAR 0 3
2117: PUSH
2118: LD_INT 1
2120: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2121: LD_ADDR_VAR 0 5
2125: PUSH
2126: LD_VAR 0 2
2130: PPUSH
2131: CALL_OW 480
2135: ST_TO_ADDR
// if not tmp then
2136: LD_VAR 0 5
2140: NOT
2141: IFFALSE 2145
// exit ;
2143: GO 2194
// for i in tmp do
2145: LD_ADDR_VAR 0 4
2149: PUSH
2150: LD_VAR 0 5
2154: PUSH
2155: FOR_IN
2156: IFFALSE 2192
// if GetTech ( i , side ) <> state_researched then
2158: LD_VAR 0 4
2162: PPUSH
2163: LD_VAR 0 1
2167: PPUSH
2168: CALL_OW 321
2172: PUSH
2173: LD_INT 2
2175: NONEQUAL
2176: IFFALSE 2190
// begin result := false ;
2178: LD_ADDR_VAR 0 3
2182: PUSH
2183: LD_INT 0
2185: ST_TO_ADDR
// exit ;
2186: POP
2187: POP
2188: GO 2194
// end ;
2190: GO 2155
2192: POP
2193: POP
// end ;
2194: LD_VAR 0 3
2198: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
2206: PPUSH
2207: PPUSH
2208: PPUSH
2209: PPUSH
2210: PPUSH
2211: PPUSH
2212: PPUSH
2213: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2214: LD_VAR 0 1
2218: NOT
2219: IFTRUE 2236
2221: PUSH
2222: LD_VAR 0 1
2226: PPUSH
2227: CALL_OW 257
2231: PUSH
2232: LD_INT 9
2234: NONEQUAL
2235: OR
2236: IFFALSE 2240
// exit ;
2238: GO 2819
// side := GetSide ( unit ) ;
2240: LD_ADDR_VAR 0 9
2244: PUSH
2245: LD_VAR 0 1
2249: PPUSH
2250: CALL_OW 255
2254: ST_TO_ADDR
// tech_space := tech_spacanom ;
2255: LD_ADDR_VAR 0 12
2259: PUSH
2260: LD_INT 29
2262: ST_TO_ADDR
// tech_time := tech_taurad ;
2263: LD_ADDR_VAR 0 13
2267: PUSH
2268: LD_INT 28
2270: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2271: LD_ADDR_VAR 0 11
2275: PUSH
2276: LD_VAR 0 1
2280: PPUSH
2281: CALL_OW 310
2285: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2286: LD_VAR 0 11
2290: PPUSH
2291: CALL_OW 247
2295: PUSH
2296: LD_INT 2
2298: EQUAL
2299: IFFALSE 2303
// exit ;
2301: GO 2819
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2303: LD_ADDR_VAR 0 8
2307: PUSH
2308: LD_INT 81
2310: PUSH
2311: LD_VAR 0 9
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 3
2322: PUSH
2323: LD_INT 21
2325: PUSH
2326: LD_INT 3
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL_OW 69
2345: ST_TO_ADDR
// if not tmp then
2346: LD_VAR 0 8
2350: NOT
2351: IFFALSE 2355
// exit ;
2353: GO 2819
// if in_unit then
2355: LD_VAR 0 11
2359: IFFALSE 2383
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2361: LD_ADDR_VAR 0 10
2365: PUSH
2366: LD_VAR 0 8
2370: PPUSH
2371: LD_VAR 0 11
2375: PPUSH
2376: CALL_OW 74
2380: ST_TO_ADDR
2381: GO 2403
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2383: LD_ADDR_VAR 0 10
2387: PUSH
2388: LD_VAR 0 8
2392: PPUSH
2393: LD_VAR 0 1
2397: PPUSH
2398: CALL_OW 74
2402: ST_TO_ADDR
// if not enemy then
2403: LD_VAR 0 10
2407: NOT
2408: IFFALSE 2412
// exit ;
2410: GO 2819
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2412: LD_VAR 0 11
2416: IFFALSE 2438
2418: PUSH
2419: LD_VAR 0 11
2423: PPUSH
2424: LD_VAR 0 10
2428: PPUSH
2429: CALL_OW 296
2433: PUSH
2434: LD_INT 13
2436: GREATER
2437: AND
2438: IFTRUE 2460
2440: PUSH
2441: LD_VAR 0 1
2445: PPUSH
2446: LD_VAR 0 10
2450: PPUSH
2451: CALL_OW 296
2455: PUSH
2456: LD_INT 12
2458: GREATER
2459: OR
2460: IFFALSE 2464
// exit ;
2462: GO 2819
// missile := [ 1 ] ;
2464: LD_ADDR_VAR 0 14
2468: PUSH
2469: LD_INT 1
2471: PUSH
2472: EMPTY
2473: LIST
2474: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2475: LD_VAR 0 9
2479: PPUSH
2480: LD_VAR 0 12
2484: PPUSH
2485: CALL_OW 325
2489: IFFALSE 2518
// missile := Replace ( missile , missile + 1 , 2 ) ;
2491: LD_ADDR_VAR 0 14
2495: PUSH
2496: LD_VAR 0 14
2500: PPUSH
2501: LD_VAR 0 14
2505: PUSH
2506: LD_INT 1
2508: PLUS
2509: PPUSH
2510: LD_INT 2
2512: PPUSH
2513: CALL_OW 1
2517: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2518: LD_VAR 0 9
2522: PPUSH
2523: LD_VAR 0 13
2527: PPUSH
2528: CALL_OW 325
2532: IFFALSE 2556
2534: PUSH
2535: LD_VAR 0 10
2539: PPUSH
2540: CALL_OW 255
2544: PPUSH
2545: LD_VAR 0 13
2549: PPUSH
2550: CALL_OW 325
2554: NOT
2555: AND
2556: IFFALSE 2585
// missile := Replace ( missile , missile + 1 , 3 ) ;
2558: LD_ADDR_VAR 0 14
2562: PUSH
2563: LD_VAR 0 14
2567: PPUSH
2568: LD_VAR 0 14
2572: PUSH
2573: LD_INT 1
2575: PLUS
2576: PPUSH
2577: LD_INT 3
2579: PPUSH
2580: CALL_OW 1
2584: ST_TO_ADDR
// if missile < 2 then
2585: LD_VAR 0 14
2589: PUSH
2590: LD_INT 2
2592: LESS
2593: IFFALSE 2597
// exit ;
2595: GO 2819
// x := GetX ( enemy ) ;
2597: LD_ADDR_VAR 0 4
2601: PUSH
2602: LD_VAR 0 10
2606: PPUSH
2607: CALL_OW 250
2611: ST_TO_ADDR
// y := GetY ( enemy ) ;
2612: LD_ADDR_VAR 0 5
2616: PUSH
2617: LD_VAR 0 10
2621: PPUSH
2622: CALL_OW 251
2626: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2627: LD_ADDR_VAR 0 6
2631: PUSH
2632: LD_VAR 0 4
2636: PUSH
2637: LD_INT 1
2639: NEG
2640: PPUSH
2641: LD_INT 1
2643: PPUSH
2644: CALL_OW 12
2648: PLUS
2649: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2650: LD_ADDR_VAR 0 7
2654: PUSH
2655: LD_VAR 0 5
2659: PUSH
2660: LD_INT 1
2662: NEG
2663: PPUSH
2664: LD_INT 1
2666: PPUSH
2667: CALL_OW 12
2671: PLUS
2672: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2673: LD_VAR 0 6
2677: PPUSH
2678: LD_VAR 0 7
2682: PPUSH
2683: CALL_OW 488
2687: NOT
2688: IFFALSE 2710
// begin _x := x ;
2690: LD_ADDR_VAR 0 6
2694: PUSH
2695: LD_VAR 0 4
2699: ST_TO_ADDR
// _y := y ;
2700: LD_ADDR_VAR 0 7
2704: PUSH
2705: LD_VAR 0 5
2709: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2710: LD_ADDR_VAR 0 3
2714: PUSH
2715: LD_INT 1
2717: PPUSH
2718: LD_VAR 0 14
2722: PPUSH
2723: CALL_OW 12
2727: ST_TO_ADDR
// case i of 1 :
2728: LD_VAR 0 3
2732: PUSH
2733: LD_INT 1
2735: DOUBLE
2736: EQUAL
2737: IFTRUE 2741
2739: GO 2758
2741: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2742: LD_VAR 0 1
2746: PPUSH
2747: LD_VAR 0 10
2751: PPUSH
2752: CALL_OW 115
2756: GO 2819
2758: LD_INT 2
2760: DOUBLE
2761: EQUAL
2762: IFTRUE 2766
2764: GO 2788
2766: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2767: LD_VAR 0 1
2771: PPUSH
2772: LD_VAR 0 6
2776: PPUSH
2777: LD_VAR 0 7
2781: PPUSH
2782: CALL_OW 153
2786: GO 2819
2788: LD_INT 3
2790: DOUBLE
2791: EQUAL
2792: IFTRUE 2796
2794: GO 2818
2796: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2797: LD_VAR 0 1
2801: PPUSH
2802: LD_VAR 0 6
2806: PPUSH
2807: LD_VAR 0 7
2811: PPUSH
2812: CALL_OW 154
2816: GO 2819
2818: POP
// end ;
2819: LD_VAR 0 2
2823: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2824: LD_INT 0
2826: PPUSH
2827: PPUSH
2828: PPUSH
2829: PPUSH
2830: PPUSH
2831: PPUSH
// if not unit or not building then
2832: LD_VAR 0 1
2836: NOT
2837: IFTRUE 2846
2839: PUSH
2840: LD_VAR 0 2
2844: NOT
2845: OR
2846: IFFALSE 2850
// exit ;
2848: GO 3008
// x := GetX ( building ) ;
2850: LD_ADDR_VAR 0 5
2854: PUSH
2855: LD_VAR 0 2
2859: PPUSH
2860: CALL_OW 250
2864: ST_TO_ADDR
// y := GetY ( building ) ;
2865: LD_ADDR_VAR 0 6
2869: PUSH
2870: LD_VAR 0 2
2874: PPUSH
2875: CALL_OW 251
2879: ST_TO_ADDR
// for i := 0 to 5 do
2880: LD_ADDR_VAR 0 4
2884: PUSH
2885: DOUBLE
2886: LD_INT 0
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 5
2892: PUSH
2893: FOR_TO
2894: IFFALSE 3006
// begin _x := ShiftX ( x , i , 3 ) ;
2896: LD_ADDR_VAR 0 7
2900: PUSH
2901: LD_VAR 0 5
2905: PPUSH
2906: LD_VAR 0 4
2910: PPUSH
2911: LD_INT 3
2913: PPUSH
2914: CALL_OW 272
2918: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2919: LD_ADDR_VAR 0 8
2923: PUSH
2924: LD_VAR 0 6
2928: PPUSH
2929: LD_VAR 0 4
2933: PPUSH
2934: LD_INT 3
2936: PPUSH
2937: CALL_OW 273
2941: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2942: LD_VAR 0 7
2946: PPUSH
2947: LD_VAR 0 8
2951: PPUSH
2952: CALL_OW 488
2956: NOT
2957: IFFALSE 2961
// continue ;
2959: GO 2893
// if HexInfo ( _x , _y ) = 0 then
2961: LD_VAR 0 7
2965: PPUSH
2966: LD_VAR 0 8
2970: PPUSH
2971: CALL_OW 428
2975: PUSH
2976: LD_INT 0
2978: EQUAL
2979: IFFALSE 3004
// begin ComMoveXY ( unit , _x , _y ) ;
2981: LD_VAR 0 1
2985: PPUSH
2986: LD_VAR 0 7
2990: PPUSH
2991: LD_VAR 0 8
2995: PPUSH
2996: CALL_OW 111
// exit ;
3000: POP
3001: POP
3002: GO 3008
// end ; end ;
3004: GO 2893
3006: POP
3007: POP
// end ;
3008: LD_VAR 0 3
3012: RET
// export function ScanBase ( side , base_area ) ; begin
3013: LD_INT 0
3015: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3016: LD_ADDR_VAR 0 3
3020: PUSH
3021: LD_VAR 0 2
3025: PPUSH
3026: LD_INT 81
3028: PUSH
3029: LD_VAR 0 1
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PPUSH
3038: CALL_OW 70
3042: ST_TO_ADDR
// end ;
3043: LD_VAR 0 3
3047: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3048: LD_INT 0
3050: PPUSH
3051: PPUSH
3052: PPUSH
3053: PPUSH
// result := false ;
3054: LD_ADDR_VAR 0 2
3058: PUSH
3059: LD_INT 0
3061: ST_TO_ADDR
// side := GetSide ( unit ) ;
3062: LD_ADDR_VAR 0 3
3066: PUSH
3067: LD_VAR 0 1
3071: PPUSH
3072: CALL_OW 255
3076: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3077: LD_ADDR_VAR 0 4
3081: PUSH
3082: LD_VAR 0 1
3086: PPUSH
3087: CALL_OW 248
3091: ST_TO_ADDR
// case nat of 1 :
3092: LD_VAR 0 4
3096: PUSH
3097: LD_INT 1
3099: DOUBLE
3100: EQUAL
3101: IFTRUE 3105
3103: GO 3116
3105: POP
// tech := tech_lassight ; 2 :
3106: LD_ADDR_VAR 0 5
3110: PUSH
3111: LD_INT 12
3113: ST_TO_ADDR
3114: GO 3155
3116: LD_INT 2
3118: DOUBLE
3119: EQUAL
3120: IFTRUE 3124
3122: GO 3135
3124: POP
// tech := tech_mortar ; 3 :
3125: LD_ADDR_VAR 0 5
3129: PUSH
3130: LD_INT 41
3132: ST_TO_ADDR
3133: GO 3155
3135: LD_INT 3
3137: DOUBLE
3138: EQUAL
3139: IFTRUE 3143
3141: GO 3154
3143: POP
// tech := tech_bazooka ; end ;
3144: LD_ADDR_VAR 0 5
3148: PUSH
3149: LD_INT 44
3151: ST_TO_ADDR
3152: GO 3155
3154: POP
// if Researched ( side , tech ) then
3155: LD_VAR 0 3
3159: PPUSH
3160: LD_VAR 0 5
3164: PPUSH
3165: CALL_OW 325
3169: IFFALSE 3196
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3171: LD_ADDR_VAR 0 2
3175: PUSH
3176: LD_INT 5
3178: PUSH
3179: LD_INT 8
3181: PUSH
3182: LD_INT 9
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: PUSH
3190: LD_VAR 0 4
3194: ARRAY
3195: ST_TO_ADDR
// end ;
3196: LD_VAR 0 2
3200: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3201: LD_INT 0
3203: PPUSH
3204: PPUSH
3205: PPUSH
// if not mines then
3206: LD_VAR 0 2
3210: NOT
3211: IFFALSE 3215
// exit ;
3213: GO 3359
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3215: LD_ADDR_VAR 0 5
3219: PUSH
3220: LD_INT 81
3222: PUSH
3223: LD_VAR 0 1
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: LD_INT 3
3234: PUSH
3235: LD_INT 21
3237: PUSH
3238: LD_INT 3
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PPUSH
3253: CALL_OW 69
3257: ST_TO_ADDR
// for i in mines do
3258: LD_ADDR_VAR 0 4
3262: PUSH
3263: LD_VAR 0 2
3267: PUSH
3268: FOR_IN
3269: IFFALSE 3357
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3271: LD_VAR 0 4
3275: PUSH
3276: LD_INT 1
3278: ARRAY
3279: PPUSH
3280: LD_VAR 0 4
3284: PUSH
3285: LD_INT 2
3287: ARRAY
3288: PPUSH
3289: CALL_OW 458
3293: NOT
3294: IFFALSE 3298
// continue ;
3296: GO 3268
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3298: LD_VAR 0 4
3302: PUSH
3303: LD_INT 1
3305: ARRAY
3306: PPUSH
3307: LD_VAR 0 4
3311: PUSH
3312: LD_INT 2
3314: ARRAY
3315: PPUSH
3316: CALL_OW 428
3320: PUSH
3321: LD_VAR 0 5
3325: IN
3326: IFFALSE 3355
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3328: LD_VAR 0 4
3332: PUSH
3333: LD_INT 1
3335: ARRAY
3336: PPUSH
3337: LD_VAR 0 4
3341: PUSH
3342: LD_INT 2
3344: ARRAY
3345: PPUSH
3346: LD_VAR 0 1
3350: PPUSH
3351: CALL_OW 456
// end ;
3355: GO 3268
3357: POP
3358: POP
// end ;
3359: LD_VAR 0 3
3363: RET
// export function Count ( array ) ; begin
3364: LD_INT 0
3366: PPUSH
// result := array + 0 ;
3367: LD_ADDR_VAR 0 2
3371: PUSH
3372: LD_VAR 0 1
3376: PUSH
3377: LD_INT 0
3379: PLUS
3380: ST_TO_ADDR
// end ;
3381: LD_VAR 0 2
3385: RET
// export function IsEmpty ( building ) ; begin
3386: LD_INT 0
3388: PPUSH
// if not building then
3389: LD_VAR 0 1
3393: NOT
3394: IFFALSE 3398
// exit ;
3396: GO 3441
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3398: LD_ADDR_VAR 0 2
3402: PUSH
3403: LD_VAR 0 1
3407: PUSH
3408: LD_INT 22
3410: PUSH
3411: LD_VAR 0 1
3415: PPUSH
3416: CALL_OW 255
3420: PUSH
3421: EMPTY
3422: LIST
3423: LIST
3424: PUSH
3425: LD_INT 58
3427: PUSH
3428: EMPTY
3429: LIST
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PPUSH
3435: CALL_OW 69
3439: IN
3440: ST_TO_ADDR
// end ;
3441: LD_VAR 0 2
3445: RET
// export function IsNotFull ( building ) ; var places ; begin
3446: LD_INT 0
3448: PPUSH
3449: PPUSH
// if not building then
3450: LD_VAR 0 1
3454: NOT
3455: IFFALSE 3459
// exit ;
3457: GO 3487
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3459: LD_ADDR_VAR 0 2
3463: PUSH
3464: LD_VAR 0 1
3468: PPUSH
3469: LD_INT 3
3471: PUSH
3472: LD_INT 62
3474: PUSH
3475: EMPTY
3476: LIST
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PPUSH
3482: CALL_OW 72
3486: ST_TO_ADDR
// end ;
3487: LD_VAR 0 2
3491: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3492: LD_INT 0
3494: PPUSH
3495: PPUSH
3496: PPUSH
3497: PPUSH
// tmp := [ ] ;
3498: LD_ADDR_VAR 0 3
3502: PUSH
3503: EMPTY
3504: ST_TO_ADDR
// list := [ ] ;
3505: LD_ADDR_VAR 0 5
3509: PUSH
3510: EMPTY
3511: ST_TO_ADDR
// for i = 16 to 25 do
3512: LD_ADDR_VAR 0 4
3516: PUSH
3517: DOUBLE
3518: LD_INT 16
3520: DEC
3521: ST_TO_ADDR
3522: LD_INT 25
3524: PUSH
3525: FOR_TO
3526: IFFALSE 3599
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3528: LD_ADDR_VAR 0 3
3532: PUSH
3533: LD_VAR 0 3
3537: PUSH
3538: LD_INT 22
3540: PUSH
3541: LD_VAR 0 1
3545: PPUSH
3546: CALL_OW 255
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PUSH
3555: LD_INT 91
3557: PUSH
3558: LD_VAR 0 1
3562: PUSH
3563: LD_INT 6
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: LIST
3570: PUSH
3571: LD_INT 30
3573: PUSH
3574: LD_VAR 0 4
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: LIST
3587: PUSH
3588: EMPTY
3589: LIST
3590: PPUSH
3591: CALL_OW 69
3595: ADD
3596: ST_TO_ADDR
3597: GO 3525
3599: POP
3600: POP
// for i = 1 to tmp do
3601: LD_ADDR_VAR 0 4
3605: PUSH
3606: DOUBLE
3607: LD_INT 1
3609: DEC
3610: ST_TO_ADDR
3611: LD_VAR 0 3
3615: PUSH
3616: FOR_TO
3617: IFFALSE 3705
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3619: LD_ADDR_VAR 0 5
3623: PUSH
3624: LD_VAR 0 5
3628: PUSH
3629: LD_VAR 0 3
3633: PUSH
3634: LD_VAR 0 4
3638: ARRAY
3639: PPUSH
3640: CALL_OW 266
3644: PUSH
3645: LD_VAR 0 3
3649: PUSH
3650: LD_VAR 0 4
3654: ARRAY
3655: PPUSH
3656: CALL_OW 250
3660: PUSH
3661: LD_VAR 0 3
3665: PUSH
3666: LD_VAR 0 4
3670: ARRAY
3671: PPUSH
3672: CALL_OW 251
3676: PUSH
3677: LD_VAR 0 3
3681: PUSH
3682: LD_VAR 0 4
3686: ARRAY
3687: PPUSH
3688: CALL_OW 254
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: PUSH
3699: EMPTY
3700: LIST
3701: ADD
3702: ST_TO_ADDR
3703: GO 3616
3705: POP
3706: POP
// result := list ;
3707: LD_ADDR_VAR 0 2
3711: PUSH
3712: LD_VAR 0 5
3716: ST_TO_ADDR
// end ;
3717: LD_VAR 0 2
3721: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3722: LD_INT 0
3724: PPUSH
3725: PPUSH
3726: PPUSH
3727: PPUSH
3728: PPUSH
3729: PPUSH
3730: PPUSH
// if not factory then
3731: LD_VAR 0 1
3735: NOT
3736: IFFALSE 3740
// exit ;
3738: GO 4343
// if control = control_apeman then
3740: LD_VAR 0 4
3744: PUSH
3745: LD_INT 5
3747: EQUAL
3748: IFFALSE 3857
// begin tmp := UnitsInside ( factory ) ;
3750: LD_ADDR_VAR 0 8
3754: PUSH
3755: LD_VAR 0 1
3759: PPUSH
3760: CALL_OW 313
3764: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3765: LD_VAR 0 8
3769: PPUSH
3770: LD_INT 25
3772: PUSH
3773: LD_INT 12
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: PPUSH
3780: CALL_OW 72
3784: NOT
3785: IFFALSE 3795
// control := control_manual ;
3787: LD_ADDR_VAR 0 4
3791: PUSH
3792: LD_INT 1
3794: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3795: LD_ADDR_VAR 0 8
3799: PUSH
3800: LD_VAR 0 1
3804: PPUSH
3805: CALL 3492 0 1
3809: ST_TO_ADDR
// if tmp then
3810: LD_VAR 0 8
3814: IFFALSE 3857
// begin for i in tmp do
3816: LD_ADDR_VAR 0 7
3820: PUSH
3821: LD_VAR 0 8
3825: PUSH
3826: FOR_IN
3827: IFFALSE 3855
// if i [ 1 ] = b_ext_radio then
3829: LD_VAR 0 7
3833: PUSH
3834: LD_INT 1
3836: ARRAY
3837: PUSH
3838: LD_INT 22
3840: EQUAL
3841: IFFALSE 3853
// begin control := control_remote ;
3843: LD_ADDR_VAR 0 4
3847: PUSH
3848: LD_INT 2
3850: ST_TO_ADDR
// break ;
3851: GO 3855
// end ;
3853: GO 3826
3855: POP
3856: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3857: LD_VAR 0 1
3861: PPUSH
3862: LD_VAR 0 2
3866: PPUSH
3867: LD_VAR 0 3
3871: PPUSH
3872: LD_VAR 0 4
3876: PPUSH
3877: LD_VAR 0 5
3881: PPUSH
3882: CALL_OW 448
3886: IFFALSE 3921
// begin result := [ chassis , engine , control , weapon ] ;
3888: LD_ADDR_VAR 0 6
3892: PUSH
3893: LD_VAR 0 2
3897: PUSH
3898: LD_VAR 0 3
3902: PUSH
3903: LD_VAR 0 4
3907: PUSH
3908: LD_VAR 0 5
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: ST_TO_ADDR
// exit ;
3919: GO 4343
// end ; _chassis := AvailableChassisList ( factory ) ;
3921: LD_ADDR_VAR 0 9
3925: PUSH
3926: LD_VAR 0 1
3930: PPUSH
3931: CALL_OW 475
3935: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3936: LD_ADDR_VAR 0 11
3940: PUSH
3941: LD_VAR 0 1
3945: PPUSH
3946: CALL_OW 476
3950: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3951: LD_ADDR_VAR 0 12
3955: PUSH
3956: LD_VAR 0 1
3960: PPUSH
3961: CALL_OW 477
3965: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3966: LD_ADDR_VAR 0 10
3970: PUSH
3971: LD_VAR 0 1
3975: PPUSH
3976: CALL_OW 478
3980: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3981: LD_VAR 0 9
3985: NOT
3986: IFTRUE 3995
3988: PUSH
3989: LD_VAR 0 11
3993: NOT
3994: OR
3995: IFTRUE 4004
3997: PUSH
3998: LD_VAR 0 12
4002: NOT
4003: OR
4004: IFTRUE 4013
4006: PUSH
4007: LD_VAR 0 10
4011: NOT
4012: OR
4013: IFFALSE 4048
// begin result := [ chassis , engine , control , weapon ] ;
4015: LD_ADDR_VAR 0 6
4019: PUSH
4020: LD_VAR 0 2
4024: PUSH
4025: LD_VAR 0 3
4029: PUSH
4030: LD_VAR 0 4
4034: PUSH
4035: LD_VAR 0 5
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: ST_TO_ADDR
// exit ;
4046: GO 4343
// end ; if not chassis in _chassis then
4048: LD_VAR 0 2
4052: PUSH
4053: LD_VAR 0 9
4057: IN
4058: NOT
4059: IFFALSE 4085
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4061: LD_ADDR_VAR 0 2
4065: PUSH
4066: LD_VAR 0 9
4070: PUSH
4071: LD_INT 1
4073: PPUSH
4074: LD_VAR 0 9
4078: PPUSH
4079: CALL_OW 12
4083: ARRAY
4084: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4085: LD_VAR 0 2
4089: PPUSH
4090: LD_VAR 0 3
4094: PPUSH
4095: CALL 4348 0 2
4099: NOT
4100: IFFALSE 4161
// repeat engine := _engine [ 1 ] ;
4102: LD_ADDR_VAR 0 3
4106: PUSH
4107: LD_VAR 0 11
4111: PUSH
4112: LD_INT 1
4114: ARRAY
4115: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4116: LD_ADDR_VAR 0 11
4120: PUSH
4121: LD_VAR 0 11
4125: PPUSH
4126: LD_INT 1
4128: PPUSH
4129: CALL_OW 3
4133: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4134: LD_VAR 0 2
4138: PPUSH
4139: LD_VAR 0 3
4143: PPUSH
4144: CALL 4348 0 2
4148: IFTRUE 4159
4150: PUSH
4151: LD_VAR 0 11
4155: PUSH
4156: EMPTY
4157: EQUAL
4158: OR
4159: IFFALSE 4102
// if not control in _control then
4161: LD_VAR 0 4
4165: PUSH
4166: LD_VAR 0 12
4170: IN
4171: NOT
4172: IFFALSE 4198
// control := _control [ rand ( 1 , _control ) ] ;
4174: LD_ADDR_VAR 0 4
4178: PUSH
4179: LD_VAR 0 12
4183: PUSH
4184: LD_INT 1
4186: PPUSH
4187: LD_VAR 0 12
4191: PPUSH
4192: CALL_OW 12
4196: ARRAY
4197: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4198: LD_VAR 0 2
4202: PPUSH
4203: LD_VAR 0 5
4207: PPUSH
4208: CALL 4570 0 2
4212: NOT
4213: IFFALSE 4274
// repeat weapon := _weapon [ 1 ] ;
4215: LD_ADDR_VAR 0 5
4219: PUSH
4220: LD_VAR 0 10
4224: PUSH
4225: LD_INT 1
4227: ARRAY
4228: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4229: LD_ADDR_VAR 0 10
4233: PUSH
4234: LD_VAR 0 10
4238: PPUSH
4239: LD_INT 1
4241: PPUSH
4242: CALL_OW 3
4246: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4247: LD_VAR 0 2
4251: PPUSH
4252: LD_VAR 0 5
4256: PPUSH
4257: CALL 4570 0 2
4261: IFTRUE 4272
4263: PUSH
4264: LD_VAR 0 10
4268: PUSH
4269: EMPTY
4270: EQUAL
4271: OR
4272: IFFALSE 4215
// result := [ ] ;
4274: LD_ADDR_VAR 0 6
4278: PUSH
4279: EMPTY
4280: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4281: LD_VAR 0 1
4285: PPUSH
4286: LD_VAR 0 2
4290: PPUSH
4291: LD_VAR 0 3
4295: PPUSH
4296: LD_VAR 0 4
4300: PPUSH
4301: LD_VAR 0 5
4305: PPUSH
4306: CALL_OW 448
4310: IFFALSE 4343
// result := [ chassis , engine , control , weapon ] ;
4312: LD_ADDR_VAR 0 6
4316: PUSH
4317: LD_VAR 0 2
4321: PUSH
4322: LD_VAR 0 3
4326: PUSH
4327: LD_VAR 0 4
4331: PUSH
4332: LD_VAR 0 5
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: ST_TO_ADDR
// end ;
4343: LD_VAR 0 6
4347: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4348: LD_INT 0
4350: PPUSH
// if not chassis or not engine then
4351: LD_VAR 0 1
4355: NOT
4356: IFTRUE 4365
4358: PUSH
4359: LD_VAR 0 2
4363: NOT
4364: OR
4365: IFFALSE 4369
// exit ;
4367: GO 4565
// case engine of engine_solar :
4369: LD_VAR 0 2
4373: PUSH
4374: LD_INT 2
4376: DOUBLE
4377: EQUAL
4378: IFTRUE 4382
4380: GO 4420
4382: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4383: LD_ADDR_VAR 0 3
4387: PUSH
4388: LD_INT 11
4390: PUSH
4391: LD_INT 12
4393: PUSH
4394: LD_INT 13
4396: PUSH
4397: LD_INT 14
4399: PUSH
4400: LD_INT 1
4402: PUSH
4403: LD_INT 2
4405: PUSH
4406: LD_INT 3
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: ST_TO_ADDR
4418: GO 4549
4420: LD_INT 1
4422: DOUBLE
4423: EQUAL
4424: IFTRUE 4428
4426: GO 4490
4428: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4429: LD_ADDR_VAR 0 3
4433: PUSH
4434: LD_INT 11
4436: PUSH
4437: LD_INT 12
4439: PUSH
4440: LD_INT 13
4442: PUSH
4443: LD_INT 14
4445: PUSH
4446: LD_INT 1
4448: PUSH
4449: LD_INT 2
4451: PUSH
4452: LD_INT 3
4454: PUSH
4455: LD_INT 4
4457: PUSH
4458: LD_INT 5
4460: PUSH
4461: LD_INT 21
4463: PUSH
4464: LD_INT 23
4466: PUSH
4467: LD_INT 22
4469: PUSH
4470: LD_INT 24
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: ST_TO_ADDR
4488: GO 4549
4490: LD_INT 3
4492: DOUBLE
4493: EQUAL
4494: IFTRUE 4498
4496: GO 4548
4498: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4499: LD_ADDR_VAR 0 3
4503: PUSH
4504: LD_INT 13
4506: PUSH
4507: LD_INT 14
4509: PUSH
4510: LD_INT 2
4512: PUSH
4513: LD_INT 3
4515: PUSH
4516: LD_INT 4
4518: PUSH
4519: LD_INT 5
4521: PUSH
4522: LD_INT 21
4524: PUSH
4525: LD_INT 22
4527: PUSH
4528: LD_INT 23
4530: PUSH
4531: LD_INT 24
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: ST_TO_ADDR
4546: GO 4549
4548: POP
// result := ( chassis in result ) ;
4549: LD_ADDR_VAR 0 3
4553: PUSH
4554: LD_VAR 0 1
4558: PUSH
4559: LD_VAR 0 3
4563: IN
4564: ST_TO_ADDR
// end ;
4565: LD_VAR 0 3
4569: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4570: LD_INT 0
4572: PPUSH
// if not chassis or not weapon then
4573: LD_VAR 0 1
4577: NOT
4578: IFTRUE 4587
4580: PUSH
4581: LD_VAR 0 2
4585: NOT
4586: OR
4587: IFFALSE 4591
// exit ;
4589: GO 5685
// case weapon of us_machine_gun :
4591: LD_VAR 0 2
4595: PUSH
4596: LD_INT 2
4598: DOUBLE
4599: EQUAL
4600: IFTRUE 4604
4602: GO 4634
4604: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4605: LD_ADDR_VAR 0 3
4609: PUSH
4610: LD_INT 1
4612: PUSH
4613: LD_INT 2
4615: PUSH
4616: LD_INT 3
4618: PUSH
4619: LD_INT 4
4621: PUSH
4622: LD_INT 5
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: ST_TO_ADDR
4632: GO 5669
4634: LD_INT 3
4636: DOUBLE
4637: EQUAL
4638: IFTRUE 4642
4640: GO 4672
4642: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4643: LD_ADDR_VAR 0 3
4647: PUSH
4648: LD_INT 1
4650: PUSH
4651: LD_INT 2
4653: PUSH
4654: LD_INT 3
4656: PUSH
4657: LD_INT 4
4659: PUSH
4660: LD_INT 5
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: ST_TO_ADDR
4670: GO 5669
4672: LD_INT 11
4674: DOUBLE
4675: EQUAL
4676: IFTRUE 4680
4678: GO 4710
4680: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4681: LD_ADDR_VAR 0 3
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: LD_INT 2
4691: PUSH
4692: LD_INT 3
4694: PUSH
4695: LD_INT 4
4697: PUSH
4698: LD_INT 5
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: ST_TO_ADDR
4708: GO 5669
4710: LD_INT 4
4712: DOUBLE
4713: EQUAL
4714: IFTRUE 4718
4716: GO 4744
4718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4719: LD_ADDR_VAR 0 3
4723: PUSH
4724: LD_INT 2
4726: PUSH
4727: LD_INT 3
4729: PUSH
4730: LD_INT 4
4732: PUSH
4733: LD_INT 5
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: ST_TO_ADDR
4742: GO 5669
4744: LD_INT 5
4746: DOUBLE
4747: EQUAL
4748: IFTRUE 4752
4750: GO 4778
4752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4753: LD_ADDR_VAR 0 3
4757: PUSH
4758: LD_INT 2
4760: PUSH
4761: LD_INT 3
4763: PUSH
4764: LD_INT 4
4766: PUSH
4767: LD_INT 5
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: ST_TO_ADDR
4776: GO 5669
4778: LD_INT 9
4780: DOUBLE
4781: EQUAL
4782: IFTRUE 4786
4784: GO 4812
4786: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4787: LD_ADDR_VAR 0 3
4791: PUSH
4792: LD_INT 2
4794: PUSH
4795: LD_INT 3
4797: PUSH
4798: LD_INT 4
4800: PUSH
4801: LD_INT 5
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: ST_TO_ADDR
4810: GO 5669
4812: LD_INT 7
4814: DOUBLE
4815: EQUAL
4816: IFTRUE 4820
4818: GO 4846
4820: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4821: LD_ADDR_VAR 0 3
4825: PUSH
4826: LD_INT 2
4828: PUSH
4829: LD_INT 3
4831: PUSH
4832: LD_INT 4
4834: PUSH
4835: LD_INT 5
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: ST_TO_ADDR
4844: GO 5669
4846: LD_INT 12
4848: DOUBLE
4849: EQUAL
4850: IFTRUE 4854
4852: GO 4880
4854: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4855: LD_ADDR_VAR 0 3
4859: PUSH
4860: LD_INT 2
4862: PUSH
4863: LD_INT 3
4865: PUSH
4866: LD_INT 4
4868: PUSH
4869: LD_INT 5
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: ST_TO_ADDR
4878: GO 5669
4880: LD_INT 13
4882: DOUBLE
4883: EQUAL
4884: IFTRUE 4888
4886: GO 4914
4888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4889: LD_ADDR_VAR 0 3
4893: PUSH
4894: LD_INT 2
4896: PUSH
4897: LD_INT 3
4899: PUSH
4900: LD_INT 4
4902: PUSH
4903: LD_INT 5
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: ST_TO_ADDR
4912: GO 5669
4914: LD_INT 14
4916: DOUBLE
4917: EQUAL
4918: IFTRUE 4922
4920: GO 4940
4922: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4923: LD_ADDR_VAR 0 3
4927: PUSH
4928: LD_INT 4
4930: PUSH
4931: LD_INT 5
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: ST_TO_ADDR
4938: GO 5669
4940: LD_INT 6
4942: DOUBLE
4943: EQUAL
4944: IFTRUE 4948
4946: GO 4966
4948: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4949: LD_ADDR_VAR 0 3
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: LD_INT 5
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: ST_TO_ADDR
4964: GO 5669
4966: LD_INT 10
4968: DOUBLE
4969: EQUAL
4970: IFTRUE 4974
4972: GO 4992
4974: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4975: LD_ADDR_VAR 0 3
4979: PUSH
4980: LD_INT 4
4982: PUSH
4983: LD_INT 5
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: ST_TO_ADDR
4990: GO 5669
4992: LD_INT 22
4994: DOUBLE
4995: EQUAL
4996: IFTRUE 5000
4998: GO 5026
5000: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5001: LD_ADDR_VAR 0 3
5005: PUSH
5006: LD_INT 11
5008: PUSH
5009: LD_INT 12
5011: PUSH
5012: LD_INT 13
5014: PUSH
5015: LD_INT 14
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: ST_TO_ADDR
5024: GO 5669
5026: LD_INT 23
5028: DOUBLE
5029: EQUAL
5030: IFTRUE 5034
5032: GO 5060
5034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5035: LD_ADDR_VAR 0 3
5039: PUSH
5040: LD_INT 11
5042: PUSH
5043: LD_INT 12
5045: PUSH
5046: LD_INT 13
5048: PUSH
5049: LD_INT 14
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: ST_TO_ADDR
5058: GO 5669
5060: LD_INT 24
5062: DOUBLE
5063: EQUAL
5064: IFTRUE 5068
5066: GO 5094
5068: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5069: LD_ADDR_VAR 0 3
5073: PUSH
5074: LD_INT 11
5076: PUSH
5077: LD_INT 12
5079: PUSH
5080: LD_INT 13
5082: PUSH
5083: LD_INT 14
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: ST_TO_ADDR
5092: GO 5669
5094: LD_INT 30
5096: DOUBLE
5097: EQUAL
5098: IFTRUE 5102
5100: GO 5128
5102: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5103: LD_ADDR_VAR 0 3
5107: PUSH
5108: LD_INT 11
5110: PUSH
5111: LD_INT 12
5113: PUSH
5114: LD_INT 13
5116: PUSH
5117: LD_INT 14
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: ST_TO_ADDR
5126: GO 5669
5128: LD_INT 25
5130: DOUBLE
5131: EQUAL
5132: IFTRUE 5136
5134: GO 5154
5136: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5137: LD_ADDR_VAR 0 3
5141: PUSH
5142: LD_INT 13
5144: PUSH
5145: LD_INT 14
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: ST_TO_ADDR
5152: GO 5669
5154: LD_INT 27
5156: DOUBLE
5157: EQUAL
5158: IFTRUE 5162
5160: GO 5180
5162: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5163: LD_ADDR_VAR 0 3
5167: PUSH
5168: LD_INT 13
5170: PUSH
5171: LD_INT 14
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: ST_TO_ADDR
5178: GO 5669
5180: LD_INT 92
5182: DOUBLE
5183: EQUAL
5184: IFTRUE 5188
5186: GO 5214
5188: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5189: LD_ADDR_VAR 0 3
5193: PUSH
5194: LD_INT 11
5196: PUSH
5197: LD_INT 12
5199: PUSH
5200: LD_INT 13
5202: PUSH
5203: LD_INT 14
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: ST_TO_ADDR
5212: GO 5669
5214: LD_INT 28
5216: DOUBLE
5217: EQUAL
5218: IFTRUE 5222
5220: GO 5240
5222: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5223: LD_ADDR_VAR 0 3
5227: PUSH
5228: LD_INT 13
5230: PUSH
5231: LD_INT 14
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: ST_TO_ADDR
5238: GO 5669
5240: LD_INT 29
5242: DOUBLE
5243: EQUAL
5244: IFTRUE 5248
5246: GO 5266
5248: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5249: LD_ADDR_VAR 0 3
5253: PUSH
5254: LD_INT 13
5256: PUSH
5257: LD_INT 14
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: ST_TO_ADDR
5264: GO 5669
5266: LD_INT 31
5268: DOUBLE
5269: EQUAL
5270: IFTRUE 5274
5272: GO 5292
5274: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5275: LD_ADDR_VAR 0 3
5279: PUSH
5280: LD_INT 13
5282: PUSH
5283: LD_INT 14
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: ST_TO_ADDR
5290: GO 5669
5292: LD_INT 26
5294: DOUBLE
5295: EQUAL
5296: IFTRUE 5300
5298: GO 5318
5300: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5301: LD_ADDR_VAR 0 3
5305: PUSH
5306: LD_INT 13
5308: PUSH
5309: LD_INT 14
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: ST_TO_ADDR
5316: GO 5669
5318: LD_INT 42
5320: DOUBLE
5321: EQUAL
5322: IFTRUE 5326
5324: GO 5352
5326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5327: LD_ADDR_VAR 0 3
5331: PUSH
5332: LD_INT 21
5334: PUSH
5335: LD_INT 22
5337: PUSH
5338: LD_INT 23
5340: PUSH
5341: LD_INT 24
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: ST_TO_ADDR
5350: GO 5669
5352: LD_INT 43
5354: DOUBLE
5355: EQUAL
5356: IFTRUE 5360
5358: GO 5386
5360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5361: LD_ADDR_VAR 0 3
5365: PUSH
5366: LD_INT 21
5368: PUSH
5369: LD_INT 22
5371: PUSH
5372: LD_INT 23
5374: PUSH
5375: LD_INT 24
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: ST_TO_ADDR
5384: GO 5669
5386: LD_INT 44
5388: DOUBLE
5389: EQUAL
5390: IFTRUE 5394
5392: GO 5420
5394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5395: LD_ADDR_VAR 0 3
5399: PUSH
5400: LD_INT 21
5402: PUSH
5403: LD_INT 22
5405: PUSH
5406: LD_INT 23
5408: PUSH
5409: LD_INT 24
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: ST_TO_ADDR
5418: GO 5669
5420: LD_INT 45
5422: DOUBLE
5423: EQUAL
5424: IFTRUE 5428
5426: GO 5454
5428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5429: LD_ADDR_VAR 0 3
5433: PUSH
5434: LD_INT 21
5436: PUSH
5437: LD_INT 22
5439: PUSH
5440: LD_INT 23
5442: PUSH
5443: LD_INT 24
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: ST_TO_ADDR
5452: GO 5669
5454: LD_INT 49
5456: DOUBLE
5457: EQUAL
5458: IFTRUE 5462
5460: GO 5488
5462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5463: LD_ADDR_VAR 0 3
5467: PUSH
5468: LD_INT 21
5470: PUSH
5471: LD_INT 22
5473: PUSH
5474: LD_INT 23
5476: PUSH
5477: LD_INT 24
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: ST_TO_ADDR
5486: GO 5669
5488: LD_INT 51
5490: DOUBLE
5491: EQUAL
5492: IFTRUE 5496
5494: GO 5522
5496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5497: LD_ADDR_VAR 0 3
5501: PUSH
5502: LD_INT 21
5504: PUSH
5505: LD_INT 22
5507: PUSH
5508: LD_INT 23
5510: PUSH
5511: LD_INT 24
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: ST_TO_ADDR
5520: GO 5669
5522: LD_INT 52
5524: DOUBLE
5525: EQUAL
5526: IFTRUE 5530
5528: GO 5556
5530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5531: LD_ADDR_VAR 0 3
5535: PUSH
5536: LD_INT 21
5538: PUSH
5539: LD_INT 22
5541: PUSH
5542: LD_INT 23
5544: PUSH
5545: LD_INT 24
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: ST_TO_ADDR
5554: GO 5669
5556: LD_INT 53
5558: DOUBLE
5559: EQUAL
5560: IFTRUE 5564
5562: GO 5582
5564: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5565: LD_ADDR_VAR 0 3
5569: PUSH
5570: LD_INT 23
5572: PUSH
5573: LD_INT 24
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: ST_TO_ADDR
5580: GO 5669
5582: LD_INT 46
5584: DOUBLE
5585: EQUAL
5586: IFTRUE 5590
5588: GO 5608
5590: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5591: LD_ADDR_VAR 0 3
5595: PUSH
5596: LD_INT 23
5598: PUSH
5599: LD_INT 24
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: ST_TO_ADDR
5606: GO 5669
5608: LD_INT 47
5610: DOUBLE
5611: EQUAL
5612: IFTRUE 5616
5614: GO 5634
5616: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
5617: LD_ADDR_VAR 0 3
5621: PUSH
5622: LD_INT 23
5624: PUSH
5625: LD_INT 24
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: ST_TO_ADDR
5632: GO 5669
5634: LD_INT 98
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5642
5640: GO 5668
5642: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5643: LD_ADDR_VAR 0 3
5647: PUSH
5648: LD_INT 21
5650: PUSH
5651: LD_INT 22
5653: PUSH
5654: LD_INT 23
5656: PUSH
5657: LD_INT 24
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: ST_TO_ADDR
5666: GO 5669
5668: POP
// result := ( chassis in result ) ;
5669: LD_ADDR_VAR 0 3
5673: PUSH
5674: LD_VAR 0 1
5678: PUSH
5679: LD_VAR 0 3
5683: IN
5684: ST_TO_ADDR
// end ;
5685: LD_VAR 0 3
5689: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5690: LD_INT 0
5692: PPUSH
5693: PPUSH
5694: PPUSH
5695: PPUSH
5696: PPUSH
5697: PPUSH
5698: PPUSH
// result := array ;
5699: LD_ADDR_VAR 0 5
5703: PUSH
5704: LD_VAR 0 1
5708: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5709: LD_VAR 0 1
5713: NOT
5714: IFTRUE 5723
5716: PUSH
5717: LD_VAR 0 2
5721: NOT
5722: OR
5723: IFTRUE 5732
5725: PUSH
5726: LD_VAR 0 3
5730: NOT
5731: OR
5732: IFTRUE 5746
5734: PUSH
5735: LD_VAR 0 2
5739: PUSH
5740: LD_VAR 0 1
5744: GREATER
5745: OR
5746: IFTRUE 5760
5748: PUSH
5749: LD_VAR 0 3
5753: PUSH
5754: LD_VAR 0 1
5758: GREATER
5759: OR
5760: IFFALSE 5764
// exit ;
5762: GO 6060
// if direction then
5764: LD_VAR 0 4
5768: IFFALSE 5832
// begin d := 1 ;
5770: LD_ADDR_VAR 0 9
5774: PUSH
5775: LD_INT 1
5777: ST_TO_ADDR
// if i_from > i_to then
5778: LD_VAR 0 2
5782: PUSH
5783: LD_VAR 0 3
5787: GREATER
5788: IFFALSE 5814
// length := ( array - i_from ) + i_to else
5790: LD_ADDR_VAR 0 11
5794: PUSH
5795: LD_VAR 0 1
5799: PUSH
5800: LD_VAR 0 2
5804: MINUS
5805: PUSH
5806: LD_VAR 0 3
5810: PLUS
5811: ST_TO_ADDR
5812: GO 5830
// length := i_to - i_from ;
5814: LD_ADDR_VAR 0 11
5818: PUSH
5819: LD_VAR 0 3
5823: PUSH
5824: LD_VAR 0 2
5828: MINUS
5829: ST_TO_ADDR
// end else
5830: GO 5893
// begin d := - 1 ;
5832: LD_ADDR_VAR 0 9
5836: PUSH
5837: LD_INT 1
5839: NEG
5840: ST_TO_ADDR
// if i_from > i_to then
5841: LD_VAR 0 2
5845: PUSH
5846: LD_VAR 0 3
5850: GREATER
5851: IFFALSE 5871
// length := i_from - i_to else
5853: LD_ADDR_VAR 0 11
5857: PUSH
5858: LD_VAR 0 2
5862: PUSH
5863: LD_VAR 0 3
5867: MINUS
5868: ST_TO_ADDR
5869: GO 5893
// length := ( array - i_to ) + i_from ;
5871: LD_ADDR_VAR 0 11
5875: PUSH
5876: LD_VAR 0 1
5880: PUSH
5881: LD_VAR 0 3
5885: MINUS
5886: PUSH
5887: LD_VAR 0 2
5891: PLUS
5892: ST_TO_ADDR
// end ; if not length then
5893: LD_VAR 0 11
5897: NOT
5898: IFFALSE 5902
// exit ;
5900: GO 6060
// tmp := array ;
5902: LD_ADDR_VAR 0 10
5906: PUSH
5907: LD_VAR 0 1
5911: ST_TO_ADDR
// for i = 1 to length do
5912: LD_ADDR_VAR 0 6
5916: PUSH
5917: DOUBLE
5918: LD_INT 1
5920: DEC
5921: ST_TO_ADDR
5922: LD_VAR 0 11
5926: PUSH
5927: FOR_TO
5928: IFFALSE 6048
// begin for j = 1 to array do
5930: LD_ADDR_VAR 0 7
5934: PUSH
5935: DOUBLE
5936: LD_INT 1
5938: DEC
5939: ST_TO_ADDR
5940: LD_VAR 0 1
5944: PUSH
5945: FOR_TO
5946: IFFALSE 6034
// begin k := j + d ;
5948: LD_ADDR_VAR 0 8
5952: PUSH
5953: LD_VAR 0 7
5957: PUSH
5958: LD_VAR 0 9
5962: PLUS
5963: ST_TO_ADDR
// if k > array then
5964: LD_VAR 0 8
5968: PUSH
5969: LD_VAR 0 1
5973: GREATER
5974: IFFALSE 5984
// k := 1 ;
5976: LD_ADDR_VAR 0 8
5980: PUSH
5981: LD_INT 1
5983: ST_TO_ADDR
// if not k then
5984: LD_VAR 0 8
5988: NOT
5989: IFFALSE 6001
// k := array ;
5991: LD_ADDR_VAR 0 8
5995: PUSH
5996: LD_VAR 0 1
6000: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6001: LD_ADDR_VAR 0 10
6005: PUSH
6006: LD_VAR 0 10
6010: PPUSH
6011: LD_VAR 0 8
6015: PPUSH
6016: LD_VAR 0 1
6020: PUSH
6021: LD_VAR 0 7
6025: ARRAY
6026: PPUSH
6027: CALL_OW 1
6031: ST_TO_ADDR
// end ;
6032: GO 5945
6034: POP
6035: POP
// array := tmp ;
6036: LD_ADDR_VAR 0 1
6040: PUSH
6041: LD_VAR 0 10
6045: ST_TO_ADDR
// end ;
6046: GO 5927
6048: POP
6049: POP
// result := array ;
6050: LD_ADDR_VAR 0 5
6054: PUSH
6055: LD_VAR 0 1
6059: ST_TO_ADDR
// end ;
6060: LD_VAR 0 5
6064: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6065: LD_INT 0
6067: PPUSH
6068: PPUSH
// result := 0 ;
6069: LD_ADDR_VAR 0 3
6073: PUSH
6074: LD_INT 0
6076: ST_TO_ADDR
// if not array or not value in array then
6077: LD_VAR 0 1
6081: NOT
6082: IFTRUE 6097
6084: PUSH
6085: LD_VAR 0 2
6089: PUSH
6090: LD_VAR 0 1
6094: IN
6095: NOT
6096: OR
6097: IFFALSE 6101
// exit ;
6099: GO 6155
// for i = 1 to array do
6101: LD_ADDR_VAR 0 4
6105: PUSH
6106: DOUBLE
6107: LD_INT 1
6109: DEC
6110: ST_TO_ADDR
6111: LD_VAR 0 1
6115: PUSH
6116: FOR_TO
6117: IFFALSE 6153
// if value = array [ i ] then
6119: LD_VAR 0 2
6123: PUSH
6124: LD_VAR 0 1
6128: PUSH
6129: LD_VAR 0 4
6133: ARRAY
6134: EQUAL
6135: IFFALSE 6151
// begin result := i ;
6137: LD_ADDR_VAR 0 3
6141: PUSH
6142: LD_VAR 0 4
6146: ST_TO_ADDR
// exit ;
6147: POP
6148: POP
6149: GO 6155
// end ;
6151: GO 6116
6153: POP
6154: POP
// end ;
6155: LD_VAR 0 3
6159: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6160: LD_INT 0
6162: PPUSH
// vc_chassis := chassis ;
6163: LD_ADDR_OWVAR 37
6167: PUSH
6168: LD_VAR 0 1
6172: ST_TO_ADDR
// vc_engine := engine ;
6173: LD_ADDR_OWVAR 39
6177: PUSH
6178: LD_VAR 0 2
6182: ST_TO_ADDR
// vc_control := control ;
6183: LD_ADDR_OWVAR 38
6187: PUSH
6188: LD_VAR 0 3
6192: ST_TO_ADDR
// vc_weapon := weapon ;
6193: LD_ADDR_OWVAR 40
6197: PUSH
6198: LD_VAR 0 4
6202: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6203: LD_ADDR_OWVAR 41
6207: PUSH
6208: LD_VAR 0 5
6212: ST_TO_ADDR
// end ;
6213: LD_VAR 0 6
6217: RET
// export function WantPlant ( unit ) ; var task ; begin
6218: LD_INT 0
6220: PPUSH
6221: PPUSH
// result := false ;
6222: LD_ADDR_VAR 0 2
6226: PUSH
6227: LD_INT 0
6229: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6230: LD_ADDR_VAR 0 3
6234: PUSH
6235: LD_VAR 0 1
6239: PPUSH
6240: CALL_OW 437
6244: ST_TO_ADDR
// if task then
6245: LD_VAR 0 3
6249: IFFALSE 6277
// if task [ 1 ] [ 1 ] = p then
6251: LD_VAR 0 3
6255: PUSH
6256: LD_INT 1
6258: ARRAY
6259: PUSH
6260: LD_INT 1
6262: ARRAY
6263: PUSH
6264: LD_STRING p
6266: EQUAL
6267: IFFALSE 6277
// result := true ;
6269: LD_ADDR_VAR 0 2
6273: PUSH
6274: LD_INT 1
6276: ST_TO_ADDR
// end ;
6277: LD_VAR 0 2
6281: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6282: LD_INT 0
6284: PPUSH
6285: PPUSH
6286: PPUSH
6287: PPUSH
// if pos < 1 then
6288: LD_VAR 0 2
6292: PUSH
6293: LD_INT 1
6295: LESS
6296: IFFALSE 6300
// exit ;
6298: GO 6603
// if pos = 1 then
6300: LD_VAR 0 2
6304: PUSH
6305: LD_INT 1
6307: EQUAL
6308: IFFALSE 6341
// result := Replace ( arr , pos [ 1 ] , value ) else
6310: LD_ADDR_VAR 0 4
6314: PUSH
6315: LD_VAR 0 1
6319: PPUSH
6320: LD_VAR 0 2
6324: PUSH
6325: LD_INT 1
6327: ARRAY
6328: PPUSH
6329: LD_VAR 0 3
6333: PPUSH
6334: CALL_OW 1
6338: ST_TO_ADDR
6339: GO 6603
// begin tmp := arr ;
6341: LD_ADDR_VAR 0 6
6345: PUSH
6346: LD_VAR 0 1
6350: ST_TO_ADDR
// s_arr := [ tmp ] ;
6351: LD_ADDR_VAR 0 7
6355: PUSH
6356: LD_VAR 0 6
6360: PUSH
6361: EMPTY
6362: LIST
6363: ST_TO_ADDR
// for i = 1 to pos - 1 do
6364: LD_ADDR_VAR 0 5
6368: PUSH
6369: DOUBLE
6370: LD_INT 1
6372: DEC
6373: ST_TO_ADDR
6374: LD_VAR 0 2
6378: PUSH
6379: LD_INT 1
6381: MINUS
6382: PUSH
6383: FOR_TO
6384: IFFALSE 6429
// begin tmp := tmp [ pos [ i ] ] ;
6386: LD_ADDR_VAR 0 6
6390: PUSH
6391: LD_VAR 0 6
6395: PUSH
6396: LD_VAR 0 2
6400: PUSH
6401: LD_VAR 0 5
6405: ARRAY
6406: ARRAY
6407: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6408: LD_ADDR_VAR 0 7
6412: PUSH
6413: LD_VAR 0 7
6417: PUSH
6418: LD_VAR 0 6
6422: PUSH
6423: EMPTY
6424: LIST
6425: ADD
6426: ST_TO_ADDR
// end ;
6427: GO 6383
6429: POP
6430: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6431: LD_ADDR_VAR 0 6
6435: PUSH
6436: LD_VAR 0 6
6440: PPUSH
6441: LD_VAR 0 2
6445: PUSH
6446: LD_VAR 0 2
6450: ARRAY
6451: PPUSH
6452: LD_VAR 0 3
6456: PPUSH
6457: CALL_OW 1
6461: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6462: LD_ADDR_VAR 0 7
6466: PUSH
6467: LD_VAR 0 7
6471: PPUSH
6472: LD_VAR 0 7
6476: PPUSH
6477: LD_VAR 0 6
6481: PPUSH
6482: CALL_OW 1
6486: ST_TO_ADDR
// for i = s_arr downto 2 do
6487: LD_ADDR_VAR 0 5
6491: PUSH
6492: DOUBLE
6493: LD_VAR 0 7
6497: INC
6498: ST_TO_ADDR
6499: LD_INT 2
6501: PUSH
6502: FOR_DOWNTO
6503: IFFALSE 6587
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6505: LD_ADDR_VAR 0 6
6509: PUSH
6510: LD_VAR 0 7
6514: PUSH
6515: LD_VAR 0 5
6519: PUSH
6520: LD_INT 1
6522: MINUS
6523: ARRAY
6524: PPUSH
6525: LD_VAR 0 2
6529: PUSH
6530: LD_VAR 0 5
6534: PUSH
6535: LD_INT 1
6537: MINUS
6538: ARRAY
6539: PPUSH
6540: LD_VAR 0 7
6544: PUSH
6545: LD_VAR 0 5
6549: ARRAY
6550: PPUSH
6551: CALL_OW 1
6555: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6556: LD_ADDR_VAR 0 7
6560: PUSH
6561: LD_VAR 0 7
6565: PPUSH
6566: LD_VAR 0 5
6570: PUSH
6571: LD_INT 1
6573: MINUS
6574: PPUSH
6575: LD_VAR 0 6
6579: PPUSH
6580: CALL_OW 1
6584: ST_TO_ADDR
// end ;
6585: GO 6502
6587: POP
6588: POP
// result := s_arr [ 1 ] ;
6589: LD_ADDR_VAR 0 4
6593: PUSH
6594: LD_VAR 0 7
6598: PUSH
6599: LD_INT 1
6601: ARRAY
6602: ST_TO_ADDR
// end ; end ;
6603: LD_VAR 0 4
6607: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6608: LD_INT 0
6610: PPUSH
6611: PPUSH
// if not list then
6612: LD_VAR 0 1
6616: NOT
6617: IFFALSE 6621
// exit ;
6619: GO 6712
// i := list [ pos1 ] ;
6621: LD_ADDR_VAR 0 5
6625: PUSH
6626: LD_VAR 0 1
6630: PUSH
6631: LD_VAR 0 2
6635: ARRAY
6636: ST_TO_ADDR
// if not i then
6637: LD_VAR 0 5
6641: NOT
6642: IFFALSE 6646
// exit ;
6644: GO 6712
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6646: LD_ADDR_VAR 0 1
6650: PUSH
6651: LD_VAR 0 1
6655: PPUSH
6656: LD_VAR 0 2
6660: PPUSH
6661: LD_VAR 0 1
6665: PUSH
6666: LD_VAR 0 3
6670: ARRAY
6671: PPUSH
6672: CALL_OW 1
6676: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6677: LD_ADDR_VAR 0 1
6681: PUSH
6682: LD_VAR 0 1
6686: PPUSH
6687: LD_VAR 0 3
6691: PPUSH
6692: LD_VAR 0 5
6696: PPUSH
6697: CALL_OW 1
6701: ST_TO_ADDR
// result := list ;
6702: LD_ADDR_VAR 0 4
6706: PUSH
6707: LD_VAR 0 1
6711: ST_TO_ADDR
// end ;
6712: LD_VAR 0 4
6716: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6717: LD_INT 0
6719: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6720: LD_ADDR_VAR 0 5
6724: PUSH
6725: LD_VAR 0 1
6729: PPUSH
6730: CALL_OW 250
6734: PPUSH
6735: LD_VAR 0 1
6739: PPUSH
6740: CALL_OW 251
6744: PPUSH
6745: LD_VAR 0 2
6749: PPUSH
6750: LD_VAR 0 3
6754: PPUSH
6755: LD_VAR 0 4
6759: PPUSH
6760: CALL 7142 0 5
6764: ST_TO_ADDR
// end ;
6765: LD_VAR 0 5
6769: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6770: LD_INT 0
6772: PPUSH
6773: PPUSH
6774: PPUSH
6775: PPUSH
// if not list or not unit then
6776: LD_VAR 0 2
6780: NOT
6781: IFTRUE 6790
6783: PUSH
6784: LD_VAR 0 1
6788: NOT
6789: OR
6790: IFFALSE 6794
// exit ;
6792: GO 7137
// result := [ ] ;
6794: LD_ADDR_VAR 0 5
6798: PUSH
6799: EMPTY
6800: ST_TO_ADDR
// for i in list do
6801: LD_ADDR_VAR 0 6
6805: PUSH
6806: LD_VAR 0 2
6810: PUSH
6811: FOR_IN
6812: IFFALSE 7030
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6814: LD_ADDR_VAR 0 8
6818: PUSH
6819: LD_VAR 0 1
6823: PPUSH
6824: LD_VAR 0 6
6828: PUSH
6829: LD_INT 1
6831: ARRAY
6832: PPUSH
6833: LD_VAR 0 6
6837: PUSH
6838: LD_INT 2
6840: ARRAY
6841: PPUSH
6842: CALL_OW 297
6846: ST_TO_ADDR
// if not Count ( result ) then
6847: LD_VAR 0 5
6851: PPUSH
6852: CALL 3364 0 1
6856: NOT
6857: IFFALSE 6890
// begin result := Join ( result , [ i , tmp ] ) ;
6859: LD_ADDR_VAR 0 5
6863: PUSH
6864: LD_VAR 0 5
6868: PPUSH
6869: LD_VAR 0 6
6873: PUSH
6874: LD_VAR 0 8
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PPUSH
6883: CALL 39340 0 2
6887: ST_TO_ADDR
// continue ;
6888: GO 6811
// end ; if result [ result ] [ 2 ] <= tmp then
6890: LD_VAR 0 5
6894: PUSH
6895: LD_VAR 0 5
6899: ARRAY
6900: PUSH
6901: LD_INT 2
6903: ARRAY
6904: PUSH
6905: LD_VAR 0 8
6909: LESSEQUAL
6910: IFFALSE 6943
// result := Join ( result , [ i , tmp ] ) else
6912: LD_ADDR_VAR 0 5
6916: PUSH
6917: LD_VAR 0 5
6921: PPUSH
6922: LD_VAR 0 6
6926: PUSH
6927: LD_VAR 0 8
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PPUSH
6936: CALL 39340 0 2
6940: ST_TO_ADDR
6941: GO 7028
// begin for j := 1 to Count ( result ) do
6943: LD_ADDR_VAR 0 7
6947: PUSH
6948: DOUBLE
6949: LD_INT 1
6951: DEC
6952: ST_TO_ADDR
6953: LD_VAR 0 5
6957: PPUSH
6958: CALL 3364 0 1
6962: PUSH
6963: FOR_TO
6964: IFFALSE 7026
// begin if tmp < result [ j ] [ 2 ] then
6966: LD_VAR 0 8
6970: PUSH
6971: LD_VAR 0 5
6975: PUSH
6976: LD_VAR 0 7
6980: ARRAY
6981: PUSH
6982: LD_INT 2
6984: ARRAY
6985: LESS
6986: IFFALSE 7024
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6988: LD_ADDR_VAR 0 5
6992: PUSH
6993: LD_VAR 0 5
6997: PPUSH
6998: LD_VAR 0 7
7002: PPUSH
7003: LD_VAR 0 6
7007: PUSH
7008: LD_VAR 0 8
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PPUSH
7017: CALL_OW 2
7021: ST_TO_ADDR
// break ;
7022: GO 7026
// end ; end ;
7024: GO 6963
7026: POP
7027: POP
// end ; end ;
7028: GO 6811
7030: POP
7031: POP
// if result and not asc then
7032: LD_VAR 0 5
7036: IFFALSE 7045
7038: PUSH
7039: LD_VAR 0 3
7043: NOT
7044: AND
7045: IFFALSE 7062
// result := ReverseArray ( result ) ;
7047: LD_ADDR_VAR 0 5
7051: PUSH
7052: LD_VAR 0 5
7056: PPUSH
7057: CALL 34420 0 1
7061: ST_TO_ADDR
// tmp := [ ] ;
7062: LD_ADDR_VAR 0 8
7066: PUSH
7067: EMPTY
7068: ST_TO_ADDR
// if mode then
7069: LD_VAR 0 4
7073: IFFALSE 7137
// begin for i := 1 to result do
7075: LD_ADDR_VAR 0 6
7079: PUSH
7080: DOUBLE
7081: LD_INT 1
7083: DEC
7084: ST_TO_ADDR
7085: LD_VAR 0 5
7089: PUSH
7090: FOR_TO
7091: IFFALSE 7125
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7093: LD_ADDR_VAR 0 8
7097: PUSH
7098: LD_VAR 0 8
7102: PPUSH
7103: LD_VAR 0 5
7107: PUSH
7108: LD_VAR 0 6
7112: ARRAY
7113: PUSH
7114: LD_INT 1
7116: ARRAY
7117: PPUSH
7118: CALL 39340 0 2
7122: ST_TO_ADDR
7123: GO 7090
7125: POP
7126: POP
// result := tmp ;
7127: LD_ADDR_VAR 0 5
7131: PUSH
7132: LD_VAR 0 8
7136: ST_TO_ADDR
// end ; end ;
7137: LD_VAR 0 5
7141: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7142: LD_INT 0
7144: PPUSH
7145: PPUSH
7146: PPUSH
7147: PPUSH
// if not list then
7148: LD_VAR 0 3
7152: NOT
7153: IFFALSE 7157
// exit ;
7155: GO 7547
// result := [ ] ;
7157: LD_ADDR_VAR 0 6
7161: PUSH
7162: EMPTY
7163: ST_TO_ADDR
// for i in list do
7164: LD_ADDR_VAR 0 7
7168: PUSH
7169: LD_VAR 0 3
7173: PUSH
7174: FOR_IN
7175: IFFALSE 7377
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7177: LD_ADDR_VAR 0 9
7181: PUSH
7182: LD_VAR 0 7
7186: PPUSH
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: CALL_OW 297
7201: ST_TO_ADDR
// if not result then
7202: LD_VAR 0 6
7206: NOT
7207: IFFALSE 7233
// result := [ [ i , tmp ] ] else
7209: LD_ADDR_VAR 0 6
7213: PUSH
7214: LD_VAR 0 7
7218: PUSH
7219: LD_VAR 0 9
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PUSH
7228: EMPTY
7229: LIST
7230: ST_TO_ADDR
7231: GO 7375
// begin if result [ result ] [ 2 ] <= tmp then
7233: LD_VAR 0 6
7237: PUSH
7238: LD_VAR 0 6
7242: ARRAY
7243: PUSH
7244: LD_INT 2
7246: ARRAY
7247: PUSH
7248: LD_VAR 0 9
7252: LESSEQUAL
7253: IFFALSE 7295
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7255: LD_ADDR_VAR 0 6
7259: PUSH
7260: LD_VAR 0 6
7264: PPUSH
7265: LD_VAR 0 6
7269: PUSH
7270: LD_INT 1
7272: PLUS
7273: PPUSH
7274: LD_VAR 0 7
7278: PUSH
7279: LD_VAR 0 9
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PPUSH
7288: CALL_OW 2
7292: ST_TO_ADDR
7293: GO 7375
// for j := 1 to result do
7295: LD_ADDR_VAR 0 8
7299: PUSH
7300: DOUBLE
7301: LD_INT 1
7303: DEC
7304: ST_TO_ADDR
7305: LD_VAR 0 6
7309: PUSH
7310: FOR_TO
7311: IFFALSE 7373
// begin if tmp < result [ j ] [ 2 ] then
7313: LD_VAR 0 9
7317: PUSH
7318: LD_VAR 0 6
7322: PUSH
7323: LD_VAR 0 8
7327: ARRAY
7328: PUSH
7329: LD_INT 2
7331: ARRAY
7332: LESS
7333: IFFALSE 7371
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7335: LD_ADDR_VAR 0 6
7339: PUSH
7340: LD_VAR 0 6
7344: PPUSH
7345: LD_VAR 0 8
7349: PPUSH
7350: LD_VAR 0 7
7354: PUSH
7355: LD_VAR 0 9
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PPUSH
7364: CALL_OW 2
7368: ST_TO_ADDR
// break ;
7369: GO 7373
// end ; end ;
7371: GO 7310
7373: POP
7374: POP
// end ; end ;
7375: GO 7174
7377: POP
7378: POP
// if result and not asc then
7379: LD_VAR 0 6
7383: IFFALSE 7392
7385: PUSH
7386: LD_VAR 0 4
7390: NOT
7391: AND
7392: IFFALSE 7467
// begin tmp := result ;
7394: LD_ADDR_VAR 0 9
7398: PUSH
7399: LD_VAR 0 6
7403: ST_TO_ADDR
// for i = tmp downto 1 do
7404: LD_ADDR_VAR 0 7
7408: PUSH
7409: DOUBLE
7410: LD_VAR 0 9
7414: INC
7415: ST_TO_ADDR
7416: LD_INT 1
7418: PUSH
7419: FOR_DOWNTO
7420: IFFALSE 7465
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7422: LD_ADDR_VAR 0 6
7426: PUSH
7427: LD_VAR 0 6
7431: PPUSH
7432: LD_VAR 0 9
7436: PUSH
7437: LD_VAR 0 7
7441: MINUS
7442: PUSH
7443: LD_INT 1
7445: PLUS
7446: PPUSH
7447: LD_VAR 0 9
7451: PUSH
7452: LD_VAR 0 7
7456: ARRAY
7457: PPUSH
7458: CALL_OW 1
7462: ST_TO_ADDR
7463: GO 7419
7465: POP
7466: POP
// end ; tmp := [ ] ;
7467: LD_ADDR_VAR 0 9
7471: PUSH
7472: EMPTY
7473: ST_TO_ADDR
// if mode then
7474: LD_VAR 0 5
7478: IFFALSE 7547
// begin for i = 1 to result do
7480: LD_ADDR_VAR 0 7
7484: PUSH
7485: DOUBLE
7486: LD_INT 1
7488: DEC
7489: ST_TO_ADDR
7490: LD_VAR 0 6
7494: PUSH
7495: FOR_TO
7496: IFFALSE 7535
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7498: LD_ADDR_VAR 0 9
7502: PUSH
7503: LD_VAR 0 9
7507: PPUSH
7508: LD_VAR 0 7
7512: PPUSH
7513: LD_VAR 0 6
7517: PUSH
7518: LD_VAR 0 7
7522: ARRAY
7523: PUSH
7524: LD_INT 1
7526: ARRAY
7527: PPUSH
7528: CALL_OW 1
7532: ST_TO_ADDR
7533: GO 7495
7535: POP
7536: POP
// result := tmp ;
7537: LD_ADDR_VAR 0 6
7541: PUSH
7542: LD_VAR 0 9
7546: ST_TO_ADDR
// end ; end ;
7547: LD_VAR 0 6
7551: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
7556: PPUSH
7557: PPUSH
7558: PPUSH
7559: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7560: LD_ADDR_VAR 0 5
7564: PUSH
7565: LD_INT 0
7567: PUSH
7568: LD_INT 0
7570: PUSH
7571: LD_INT 0
7573: PUSH
7574: EMPTY
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: ST_TO_ADDR
// if not x or not y then
7582: LD_VAR 0 2
7586: NOT
7587: IFTRUE 7596
7589: PUSH
7590: LD_VAR 0 3
7594: NOT
7595: OR
7596: IFFALSE 7600
// exit ;
7598: GO 9256
// if not range then
7600: LD_VAR 0 4
7604: NOT
7605: IFFALSE 7615
// range := 10 ;
7607: LD_ADDR_VAR 0 4
7611: PUSH
7612: LD_INT 10
7614: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7615: LD_ADDR_VAR 0 8
7619: PUSH
7620: LD_INT 81
7622: PUSH
7623: LD_VAR 0 1
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 92
7634: PUSH
7635: LD_VAR 0 2
7639: PUSH
7640: LD_VAR 0 3
7644: PUSH
7645: LD_VAR 0 4
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: PUSH
7656: LD_INT 3
7658: PUSH
7659: LD_INT 21
7661: PUSH
7662: LD_INT 3
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: LIST
7677: PPUSH
7678: CALL_OW 69
7682: ST_TO_ADDR
// if not tmp then
7683: LD_VAR 0 8
7687: NOT
7688: IFFALSE 7692
// exit ;
7690: GO 9256
// for i in tmp do
7692: LD_ADDR_VAR 0 6
7696: PUSH
7697: LD_VAR 0 8
7701: PUSH
7702: FOR_IN
7703: IFFALSE 9231
// begin points := [ 0 , 0 , 0 ] ;
7705: LD_ADDR_VAR 0 9
7709: PUSH
7710: LD_INT 0
7712: PUSH
7713: LD_INT 0
7715: PUSH
7716: LD_INT 0
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: LIST
7723: ST_TO_ADDR
// bpoints := 1 ;
7724: LD_ADDR_VAR 0 10
7728: PUSH
7729: LD_INT 1
7731: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7732: LD_VAR 0 6
7736: PPUSH
7737: CALL_OW 247
7741: PUSH
7742: LD_INT 1
7744: DOUBLE
7745: EQUAL
7746: IFTRUE 7750
7748: GO 8332
7750: POP
// begin if GetClass ( i ) = 1 then
7751: LD_VAR 0 6
7755: PPUSH
7756: CALL_OW 257
7760: PUSH
7761: LD_INT 1
7763: EQUAL
7764: IFFALSE 7785
// points := [ 10 , 5 , 3 ] ;
7766: LD_ADDR_VAR 0 9
7770: PUSH
7771: LD_INT 10
7773: PUSH
7774: LD_INT 5
7776: PUSH
7777: LD_INT 3
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: LIST
7784: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7785: LD_VAR 0 6
7789: PPUSH
7790: CALL_OW 257
7794: PUSH
7795: LD_INT 2
7797: PUSH
7798: LD_INT 3
7800: PUSH
7801: LD_INT 4
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: LIST
7808: IN
7809: IFFALSE 7830
// points := [ 3 , 2 , 1 ] ;
7811: LD_ADDR_VAR 0 9
7815: PUSH
7816: LD_INT 3
7818: PUSH
7819: LD_INT 2
7821: PUSH
7822: LD_INT 1
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: LIST
7829: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7830: LD_VAR 0 6
7834: PPUSH
7835: CALL_OW 257
7839: PUSH
7840: LD_INT 5
7842: EQUAL
7843: IFFALSE 7864
// points := [ 130 , 5 , 2 ] ;
7845: LD_ADDR_VAR 0 9
7849: PUSH
7850: LD_INT 130
7852: PUSH
7853: LD_INT 5
7855: PUSH
7856: LD_INT 2
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: LIST
7863: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7864: LD_VAR 0 6
7868: PPUSH
7869: CALL_OW 257
7873: PUSH
7874: LD_INT 8
7876: EQUAL
7877: IFFALSE 7898
// points := [ 35 , 35 , 30 ] ;
7879: LD_ADDR_VAR 0 9
7883: PUSH
7884: LD_INT 35
7886: PUSH
7887: LD_INT 35
7889: PUSH
7890: LD_INT 30
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: LIST
7897: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7898: LD_VAR 0 6
7902: PPUSH
7903: CALL_OW 257
7907: PUSH
7908: LD_INT 9
7910: EQUAL
7911: IFFALSE 7932
// points := [ 20 , 55 , 40 ] ;
7913: LD_ADDR_VAR 0 9
7917: PUSH
7918: LD_INT 20
7920: PUSH
7921: LD_INT 55
7923: PUSH
7924: LD_INT 40
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: LIST
7931: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7932: LD_VAR 0 6
7936: PPUSH
7937: CALL_OW 257
7941: PUSH
7942: LD_INT 12
7944: PUSH
7945: LD_INT 16
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: IN
7952: IFFALSE 7973
// points := [ 5 , 3 , 2 ] ;
7954: LD_ADDR_VAR 0 9
7958: PUSH
7959: LD_INT 5
7961: PUSH
7962: LD_INT 3
7964: PUSH
7965: LD_INT 2
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: LIST
7972: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7973: LD_VAR 0 6
7977: PPUSH
7978: CALL_OW 257
7982: PUSH
7983: LD_INT 17
7985: EQUAL
7986: IFFALSE 8007
// points := [ 100 , 50 , 75 ] ;
7988: LD_ADDR_VAR 0 9
7992: PUSH
7993: LD_INT 100
7995: PUSH
7996: LD_INT 50
7998: PUSH
7999: LD_INT 75
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: LIST
8006: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8007: LD_VAR 0 6
8011: PPUSH
8012: CALL_OW 257
8016: PUSH
8017: LD_INT 15
8019: EQUAL
8020: IFFALSE 8041
// points := [ 10 , 5 , 3 ] ;
8022: LD_ADDR_VAR 0 9
8026: PUSH
8027: LD_INT 10
8029: PUSH
8030: LD_INT 5
8032: PUSH
8033: LD_INT 3
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: LIST
8040: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8041: LD_VAR 0 6
8045: PPUSH
8046: CALL_OW 257
8050: PUSH
8051: LD_INT 14
8053: EQUAL
8054: IFFALSE 8075
// points := [ 10 , 0 , 0 ] ;
8056: LD_ADDR_VAR 0 9
8060: PUSH
8061: LD_INT 10
8063: PUSH
8064: LD_INT 0
8066: PUSH
8067: LD_INT 0
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: LIST
8074: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8075: LD_VAR 0 6
8079: PPUSH
8080: CALL_OW 257
8084: PUSH
8085: LD_INT 11
8087: EQUAL
8088: IFFALSE 8109
// points := [ 30 , 10 , 5 ] ;
8090: LD_ADDR_VAR 0 9
8094: PUSH
8095: LD_INT 30
8097: PUSH
8098: LD_INT 10
8100: PUSH
8101: LD_INT 5
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8109: LD_VAR 0 1
8113: PPUSH
8114: LD_INT 5
8116: PPUSH
8117: CALL_OW 321
8121: PUSH
8122: LD_INT 2
8124: EQUAL
8125: IFFALSE 8142
// bpoints := bpoints * 1.8 ;
8127: LD_ADDR_VAR 0 10
8131: PUSH
8132: LD_VAR 0 10
8136: PUSH
8137: LD_REAL  1.80000000000000E+0000
8140: MUL
8141: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8142: LD_VAR 0 6
8146: PPUSH
8147: CALL_OW 257
8151: PUSH
8152: LD_INT 1
8154: PUSH
8155: LD_INT 2
8157: PUSH
8158: LD_INT 3
8160: PUSH
8161: LD_INT 4
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: IN
8170: IFFALSE 8190
8172: PUSH
8173: LD_VAR 0 1
8177: PPUSH
8178: LD_INT 51
8180: PPUSH
8181: CALL_OW 321
8185: PUSH
8186: LD_INT 2
8188: EQUAL
8189: AND
8190: IFFALSE 8207
// bpoints := bpoints * 1.2 ;
8192: LD_ADDR_VAR 0 10
8196: PUSH
8197: LD_VAR 0 10
8201: PUSH
8202: LD_REAL  1.20000000000000E+0000
8205: MUL
8206: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8207: LD_VAR 0 6
8211: PPUSH
8212: CALL_OW 257
8216: PUSH
8217: LD_INT 5
8219: PUSH
8220: LD_INT 7
8222: PUSH
8223: LD_INT 9
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: LIST
8230: IN
8231: IFFALSE 8251
8233: PUSH
8234: LD_VAR 0 1
8238: PPUSH
8239: LD_INT 52
8241: PPUSH
8242: CALL_OW 321
8246: PUSH
8247: LD_INT 2
8249: EQUAL
8250: AND
8251: IFFALSE 8268
// bpoints := bpoints * 1.5 ;
8253: LD_ADDR_VAR 0 10
8257: PUSH
8258: LD_VAR 0 10
8262: PUSH
8263: LD_REAL  1.50000000000000E+0000
8266: MUL
8267: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8268: LD_VAR 0 1
8272: PPUSH
8273: LD_INT 66
8275: PPUSH
8276: CALL_OW 321
8280: PUSH
8281: LD_INT 2
8283: EQUAL
8284: IFFALSE 8301
// bpoints := bpoints * 1.1 ;
8286: LD_ADDR_VAR 0 10
8290: PUSH
8291: LD_VAR 0 10
8295: PUSH
8296: LD_REAL  1.10000000000000E+0000
8299: MUL
8300: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8301: LD_ADDR_VAR 0 10
8305: PUSH
8306: LD_VAR 0 10
8310: PUSH
8311: LD_VAR 0 6
8315: PPUSH
8316: LD_INT 1
8318: PPUSH
8319: CALL_OW 259
8323: PUSH
8324: LD_REAL  1.15000000000000E+0000
8327: MUL
8328: MUL
8329: ST_TO_ADDR
// end ; unit_vehicle :
8330: GO 9160
8332: LD_INT 2
8334: DOUBLE
8335: EQUAL
8336: IFTRUE 8340
8338: GO 9148
8340: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8341: LD_VAR 0 6
8345: PPUSH
8346: CALL_OW 264
8350: PUSH
8351: LD_INT 2
8353: PUSH
8354: LD_INT 42
8356: PUSH
8357: LD_INT 24
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: LIST
8364: IN
8365: IFFALSE 8386
// points := [ 25 , 5 , 3 ] ;
8367: LD_ADDR_VAR 0 9
8371: PUSH
8372: LD_INT 25
8374: PUSH
8375: LD_INT 5
8377: PUSH
8378: LD_INT 3
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8386: LD_VAR 0 6
8390: PPUSH
8391: CALL_OW 264
8395: PUSH
8396: LD_INT 4
8398: PUSH
8399: LD_INT 43
8401: PUSH
8402: LD_INT 25
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: LIST
8409: IN
8410: IFFALSE 8431
// points := [ 40 , 15 , 5 ] ;
8412: LD_ADDR_VAR 0 9
8416: PUSH
8417: LD_INT 40
8419: PUSH
8420: LD_INT 15
8422: PUSH
8423: LD_INT 5
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: LIST
8430: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8431: LD_VAR 0 6
8435: PPUSH
8436: CALL_OW 264
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: LD_INT 23
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: IN
8451: IFFALSE 8472
// points := [ 7 , 25 , 8 ] ;
8453: LD_ADDR_VAR 0 9
8457: PUSH
8458: LD_INT 7
8460: PUSH
8461: LD_INT 25
8463: PUSH
8464: LD_INT 8
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: LIST
8471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8472: LD_VAR 0 6
8476: PPUSH
8477: CALL_OW 264
8481: PUSH
8482: LD_INT 5
8484: PUSH
8485: LD_INT 27
8487: PUSH
8488: LD_INT 44
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: LIST
8495: IN
8496: IFFALSE 8517
// points := [ 14 , 50 , 16 ] ;
8498: LD_ADDR_VAR 0 9
8502: PUSH
8503: LD_INT 14
8505: PUSH
8506: LD_INT 50
8508: PUSH
8509: LD_INT 16
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: LIST
8516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8517: LD_VAR 0 6
8521: PPUSH
8522: CALL_OW 264
8526: PUSH
8527: LD_INT 6
8529: PUSH
8530: LD_INT 46
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: IN
8537: IFFALSE 8558
// points := [ 32 , 120 , 70 ] ;
8539: LD_ADDR_VAR 0 9
8543: PUSH
8544: LD_INT 32
8546: PUSH
8547: LD_INT 120
8549: PUSH
8550: LD_INT 70
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: LIST
8557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8558: LD_VAR 0 6
8562: PPUSH
8563: CALL_OW 264
8567: PUSH
8568: LD_INT 7
8570: PUSH
8571: LD_INT 28
8573: PUSH
8574: LD_INT 45
8576: PUSH
8577: LD_INT 92
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: IN
8586: IFFALSE 8607
// points := [ 35 , 20 , 45 ] ;
8588: LD_ADDR_VAR 0 9
8592: PUSH
8593: LD_INT 35
8595: PUSH
8596: LD_INT 20
8598: PUSH
8599: LD_INT 45
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8607: LD_VAR 0 6
8611: PPUSH
8612: CALL_OW 264
8616: PUSH
8617: LD_INT 47
8619: PUSH
8620: EMPTY
8621: LIST
8622: IN
8623: IFFALSE 8644
// points := [ 67 , 45 , 75 ] ;
8625: LD_ADDR_VAR 0 9
8629: PUSH
8630: LD_INT 67
8632: PUSH
8633: LD_INT 45
8635: PUSH
8636: LD_INT 75
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: LIST
8643: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8644: LD_VAR 0 6
8648: PPUSH
8649: CALL_OW 264
8653: PUSH
8654: LD_INT 26
8656: PUSH
8657: EMPTY
8658: LIST
8659: IN
8660: IFFALSE 8681
// points := [ 120 , 30 , 80 ] ;
8662: LD_ADDR_VAR 0 9
8666: PUSH
8667: LD_INT 120
8669: PUSH
8670: LD_INT 30
8672: PUSH
8673: LD_INT 80
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: LIST
8680: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8681: LD_VAR 0 6
8685: PPUSH
8686: CALL_OW 264
8690: PUSH
8691: LD_INT 22
8693: PUSH
8694: EMPTY
8695: LIST
8696: IN
8697: IFFALSE 8718
// points := [ 40 , 1 , 1 ] ;
8699: LD_ADDR_VAR 0 9
8703: PUSH
8704: LD_INT 40
8706: PUSH
8707: LD_INT 1
8709: PUSH
8710: LD_INT 1
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: LIST
8717: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8718: LD_VAR 0 6
8722: PPUSH
8723: CALL_OW 264
8727: PUSH
8728: LD_INT 29
8730: PUSH
8731: EMPTY
8732: LIST
8733: IN
8734: IFFALSE 8755
// points := [ 70 , 200 , 400 ] ;
8736: LD_ADDR_VAR 0 9
8740: PUSH
8741: LD_INT 70
8743: PUSH
8744: LD_INT 200
8746: PUSH
8747: LD_INT 400
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: LIST
8754: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8755: LD_VAR 0 6
8759: PPUSH
8760: CALL_OW 264
8764: PUSH
8765: LD_INT 14
8767: PUSH
8768: LD_INT 53
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: IN
8775: IFFALSE 8796
// points := [ 40 , 10 , 20 ] ;
8777: LD_ADDR_VAR 0 9
8781: PUSH
8782: LD_INT 40
8784: PUSH
8785: LD_INT 10
8787: PUSH
8788: LD_INT 20
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8796: LD_VAR 0 6
8800: PPUSH
8801: CALL_OW 264
8805: PUSH
8806: LD_INT 9
8808: PUSH
8809: EMPTY
8810: LIST
8811: IN
8812: IFFALSE 8833
// points := [ 5 , 70 , 20 ] ;
8814: LD_ADDR_VAR 0 9
8818: PUSH
8819: LD_INT 5
8821: PUSH
8822: LD_INT 70
8824: PUSH
8825: LD_INT 20
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: LIST
8832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8833: LD_VAR 0 6
8837: PPUSH
8838: CALL_OW 264
8842: PUSH
8843: LD_INT 10
8845: PUSH
8846: EMPTY
8847: LIST
8848: IN
8849: IFFALSE 8870
// points := [ 35 , 110 , 70 ] ;
8851: LD_ADDR_VAR 0 9
8855: PUSH
8856: LD_INT 35
8858: PUSH
8859: LD_INT 110
8861: PUSH
8862: LD_INT 70
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: LIST
8869: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8870: LD_VAR 0 6
8874: PPUSH
8875: CALL_OW 265
8879: PUSH
8880: LD_INT 25
8882: EQUAL
8883: IFFALSE 8904
// points := [ 80 , 65 , 100 ] ;
8885: LD_ADDR_VAR 0 9
8889: PUSH
8890: LD_INT 80
8892: PUSH
8893: LD_INT 65
8895: PUSH
8896: LD_INT 100
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8904: LD_VAR 0 6
8908: PPUSH
8909: CALL_OW 263
8913: PUSH
8914: LD_INT 1
8916: EQUAL
8917: IFFALSE 8952
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8919: LD_ADDR_VAR 0 10
8923: PUSH
8924: LD_VAR 0 10
8928: PUSH
8929: LD_VAR 0 6
8933: PPUSH
8934: CALL_OW 311
8938: PPUSH
8939: LD_INT 3
8941: PPUSH
8942: CALL_OW 259
8946: PUSH
8947: LD_INT 4
8949: MUL
8950: MUL
8951: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8952: LD_VAR 0 6
8956: PPUSH
8957: CALL_OW 263
8961: PUSH
8962: LD_INT 2
8964: EQUAL
8965: IFFALSE 9016
// begin j := IsControledBy ( i ) ;
8967: LD_ADDR_VAR 0 7
8971: PUSH
8972: LD_VAR 0 6
8976: PPUSH
8977: CALL_OW 312
8981: ST_TO_ADDR
// if j then
8982: LD_VAR 0 7
8986: IFFALSE 9016
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8988: LD_ADDR_VAR 0 10
8992: PUSH
8993: LD_VAR 0 10
8997: PUSH
8998: LD_VAR 0 7
9002: PPUSH
9003: LD_INT 3
9005: PPUSH
9006: CALL_OW 259
9010: PUSH
9011: LD_INT 3
9013: MUL
9014: MUL
9015: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9016: LD_VAR 0 6
9020: PPUSH
9021: CALL_OW 264
9025: PUSH
9026: LD_INT 5
9028: PUSH
9029: LD_INT 6
9031: PUSH
9032: LD_INT 46
9034: PUSH
9035: LD_INT 44
9037: PUSH
9038: LD_INT 47
9040: PUSH
9041: LD_INT 45
9043: PUSH
9044: LD_INT 28
9046: PUSH
9047: LD_INT 7
9049: PUSH
9050: LD_INT 27
9052: PUSH
9053: LD_INT 29
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: IN
9068: IFFALSE 9088
9070: PUSH
9071: LD_VAR 0 1
9075: PPUSH
9076: LD_INT 52
9078: PPUSH
9079: CALL_OW 321
9083: PUSH
9084: LD_INT 2
9086: EQUAL
9087: AND
9088: IFFALSE 9105
// bpoints := bpoints * 1.2 ;
9090: LD_ADDR_VAR 0 10
9094: PUSH
9095: LD_VAR 0 10
9099: PUSH
9100: LD_REAL  1.20000000000000E+0000
9103: MUL
9104: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9105: LD_VAR 0 6
9109: PPUSH
9110: CALL_OW 264
9114: PUSH
9115: LD_INT 6
9117: PUSH
9118: LD_INT 46
9120: PUSH
9121: LD_INT 47
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: LIST
9128: IN
9129: IFFALSE 9146
// bpoints := bpoints * 1.2 ;
9131: LD_ADDR_VAR 0 10
9135: PUSH
9136: LD_VAR 0 10
9140: PUSH
9141: LD_REAL  1.20000000000000E+0000
9144: MUL
9145: ST_TO_ADDR
// end ; unit_building :
9146: GO 9160
9148: LD_INT 3
9150: DOUBLE
9151: EQUAL
9152: IFTRUE 9156
9154: GO 9159
9156: POP
// ; end ;
9157: GO 9160
9159: POP
// for j = 1 to 3 do
9160: LD_ADDR_VAR 0 7
9164: PUSH
9165: DOUBLE
9166: LD_INT 1
9168: DEC
9169: ST_TO_ADDR
9170: LD_INT 3
9172: PUSH
9173: FOR_TO
9174: IFFALSE 9227
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9176: LD_ADDR_VAR 0 5
9180: PUSH
9181: LD_VAR 0 5
9185: PPUSH
9186: LD_VAR 0 7
9190: PPUSH
9191: LD_VAR 0 5
9195: PUSH
9196: LD_VAR 0 7
9200: ARRAY
9201: PUSH
9202: LD_VAR 0 9
9206: PUSH
9207: LD_VAR 0 7
9211: ARRAY
9212: PUSH
9213: LD_VAR 0 10
9217: MUL
9218: PLUS
9219: PPUSH
9220: CALL_OW 1
9224: ST_TO_ADDR
9225: GO 9173
9227: POP
9228: POP
// end ;
9229: GO 7702
9231: POP
9232: POP
// result := Replace ( result , 4 , tmp ) ;
9233: LD_ADDR_VAR 0 5
9237: PUSH
9238: LD_VAR 0 5
9242: PPUSH
9243: LD_INT 4
9245: PPUSH
9246: LD_VAR 0 8
9250: PPUSH
9251: CALL_OW 1
9255: ST_TO_ADDR
// end ;
9256: LD_VAR 0 5
9260: RET
// export function DangerAtRange ( unit , range ) ; begin
9261: LD_INT 0
9263: PPUSH
// if not unit then
9264: LD_VAR 0 1
9268: NOT
9269: IFFALSE 9273
// exit ;
9271: GO 9318
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9273: LD_ADDR_VAR 0 3
9277: PUSH
9278: LD_VAR 0 1
9282: PPUSH
9283: CALL_OW 255
9287: PPUSH
9288: LD_VAR 0 1
9292: PPUSH
9293: CALL_OW 250
9297: PPUSH
9298: LD_VAR 0 1
9302: PPUSH
9303: CALL_OW 251
9307: PPUSH
9308: LD_VAR 0 2
9312: PPUSH
9313: CALL 7552 0 4
9317: ST_TO_ADDR
// end ;
9318: LD_VAR 0 3
9322: RET
// export function DangerInArea ( side , area ) ; begin
9323: LD_INT 0
9325: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9326: LD_ADDR_VAR 0 3
9330: PUSH
9331: LD_VAR 0 2
9335: PPUSH
9336: LD_INT 81
9338: PUSH
9339: LD_VAR 0 1
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: PPUSH
9348: CALL_OW 70
9352: ST_TO_ADDR
// end ;
9353: LD_VAR 0 3
9357: RET
// export function IsExtension ( b ) ; begin
9358: LD_INT 0
9360: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9361: LD_ADDR_VAR 0 2
9365: PUSH
9366: LD_VAR 0 1
9370: PUSH
9371: LD_INT 23
9373: PUSH
9374: LD_INT 20
9376: PUSH
9377: LD_INT 22
9379: PUSH
9380: LD_INT 17
9382: PUSH
9383: LD_INT 24
9385: PUSH
9386: LD_INT 21
9388: PUSH
9389: LD_INT 19
9391: PUSH
9392: LD_INT 16
9394: PUSH
9395: LD_INT 25
9397: PUSH
9398: LD_INT 18
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: IN
9413: ST_TO_ADDR
// end ;
9414: LD_VAR 0 2
9418: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9419: LD_INT 0
9421: PPUSH
9422: PPUSH
9423: PPUSH
// result := [ ] ;
9424: LD_ADDR_VAR 0 4
9428: PUSH
9429: EMPTY
9430: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9431: LD_ADDR_VAR 0 5
9435: PUSH
9436: LD_VAR 0 2
9440: PPUSH
9441: LD_INT 21
9443: PUSH
9444: LD_INT 3
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: PPUSH
9451: CALL_OW 70
9455: ST_TO_ADDR
// if not tmp then
9456: LD_VAR 0 5
9460: NOT
9461: IFFALSE 9465
// exit ;
9463: GO 9529
// if checkLink then
9465: LD_VAR 0 3
9469: IFFALSE 9519
// begin for i in tmp do
9471: LD_ADDR_VAR 0 6
9475: PUSH
9476: LD_VAR 0 5
9480: PUSH
9481: FOR_IN
9482: IFFALSE 9517
// if GetBase ( i ) <> base then
9484: LD_VAR 0 6
9488: PPUSH
9489: CALL_OW 274
9493: PUSH
9494: LD_VAR 0 1
9498: NONEQUAL
9499: IFFALSE 9515
// ComLinkToBase ( base , i ) ;
9501: LD_VAR 0 1
9505: PPUSH
9506: LD_VAR 0 6
9510: PPUSH
9511: CALL_OW 169
9515: GO 9481
9517: POP
9518: POP
// end ; result := tmp ;
9519: LD_ADDR_VAR 0 4
9523: PUSH
9524: LD_VAR 0 5
9528: ST_TO_ADDR
// end ;
9529: LD_VAR 0 4
9533: RET
// export function ComComplete ( units , b ) ; var i ; begin
9534: LD_INT 0
9536: PPUSH
9537: PPUSH
// if not units then
9538: LD_VAR 0 1
9542: NOT
9543: IFFALSE 9547
// exit ;
9545: GO 9637
// for i in units do
9547: LD_ADDR_VAR 0 4
9551: PUSH
9552: LD_VAR 0 1
9556: PUSH
9557: FOR_IN
9558: IFFALSE 9635
// if BuildingStatus ( b ) = bs_build then
9560: LD_VAR 0 2
9564: PPUSH
9565: CALL_OW 461
9569: PUSH
9570: LD_INT 1
9572: EQUAL
9573: IFFALSE 9633
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9575: LD_VAR 0 4
9579: PPUSH
9580: LD_STRING h
9582: PUSH
9583: LD_VAR 0 2
9587: PPUSH
9588: CALL_OW 250
9592: PUSH
9593: LD_VAR 0 2
9597: PPUSH
9598: CALL_OW 251
9602: PUSH
9603: LD_VAR 0 2
9607: PUSH
9608: LD_INT 0
9610: PUSH
9611: LD_INT 0
9613: PUSH
9614: LD_INT 0
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: PUSH
9626: EMPTY
9627: LIST
9628: PPUSH
9629: CALL_OW 446
9633: GO 9557
9635: POP
9636: POP
// end ;
9637: LD_VAR 0 3
9641: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9642: LD_INT 0
9644: PPUSH
9645: PPUSH
9646: PPUSH
9647: PPUSH
9648: PPUSH
9649: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9650: LD_VAR 0 1
9654: NOT
9655: IFTRUE 9672
9657: PUSH
9658: LD_VAR 0 1
9662: PPUSH
9663: CALL_OW 263
9667: PUSH
9668: LD_INT 2
9670: NONEQUAL
9671: OR
9672: IFFALSE 9676
// exit ;
9674: GO 9992
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9676: LD_ADDR_VAR 0 6
9680: PUSH
9681: LD_INT 22
9683: PUSH
9684: LD_VAR 0 1
9688: PPUSH
9689: CALL_OW 255
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 2
9700: PUSH
9701: LD_INT 30
9703: PUSH
9704: LD_INT 36
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PUSH
9711: LD_INT 34
9713: PUSH
9714: LD_INT 31
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PPUSH
9730: CALL_OW 69
9734: ST_TO_ADDR
// if not tmp then
9735: LD_VAR 0 6
9739: NOT
9740: IFFALSE 9744
// exit ;
9742: GO 9992
// result := [ ] ;
9744: LD_ADDR_VAR 0 2
9748: PUSH
9749: EMPTY
9750: ST_TO_ADDR
// for i in tmp do
9751: LD_ADDR_VAR 0 3
9755: PUSH
9756: LD_VAR 0 6
9760: PUSH
9761: FOR_IN
9762: IFFALSE 9833
// begin t := UnitsInside ( i ) ;
9764: LD_ADDR_VAR 0 4
9768: PUSH
9769: LD_VAR 0 3
9773: PPUSH
9774: CALL_OW 313
9778: ST_TO_ADDR
// if t then
9779: LD_VAR 0 4
9783: IFFALSE 9831
// for j in t do
9785: LD_ADDR_VAR 0 7
9789: PUSH
9790: LD_VAR 0 4
9794: PUSH
9795: FOR_IN
9796: IFFALSE 9829
// result := Replace ( result , result + 1 , j ) ;
9798: LD_ADDR_VAR 0 2
9802: PUSH
9803: LD_VAR 0 2
9807: PPUSH
9808: LD_VAR 0 2
9812: PUSH
9813: LD_INT 1
9815: PLUS
9816: PPUSH
9817: LD_VAR 0 7
9821: PPUSH
9822: CALL_OW 1
9826: ST_TO_ADDR
9827: GO 9795
9829: POP
9830: POP
// end ;
9831: GO 9761
9833: POP
9834: POP
// if not result then
9835: LD_VAR 0 2
9839: NOT
9840: IFFALSE 9844
// exit ;
9842: GO 9992
// mech := result [ 1 ] ;
9844: LD_ADDR_VAR 0 5
9848: PUSH
9849: LD_VAR 0 2
9853: PUSH
9854: LD_INT 1
9856: ARRAY
9857: ST_TO_ADDR
// if result > 1 then
9858: LD_VAR 0 2
9862: PUSH
9863: LD_INT 1
9865: GREATER
9866: IFFALSE 9978
// begin for i = 2 to result do
9868: LD_ADDR_VAR 0 3
9872: PUSH
9873: DOUBLE
9874: LD_INT 2
9876: DEC
9877: ST_TO_ADDR
9878: LD_VAR 0 2
9882: PUSH
9883: FOR_TO
9884: IFFALSE 9976
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9886: LD_ADDR_VAR 0 4
9890: PUSH
9891: LD_VAR 0 2
9895: PUSH
9896: LD_VAR 0 3
9900: ARRAY
9901: PPUSH
9902: LD_INT 3
9904: PPUSH
9905: CALL_OW 259
9909: PUSH
9910: LD_VAR 0 2
9914: PUSH
9915: LD_VAR 0 3
9919: ARRAY
9920: PPUSH
9921: CALL_OW 432
9925: MINUS
9926: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9927: LD_VAR 0 4
9931: PUSH
9932: LD_VAR 0 5
9936: PPUSH
9937: LD_INT 3
9939: PPUSH
9940: CALL_OW 259
9944: PUSH
9945: LD_VAR 0 5
9949: PPUSH
9950: CALL_OW 432
9954: MINUS
9955: GREATEREQUAL
9956: IFFALSE 9974
// mech := result [ i ] ;
9958: LD_ADDR_VAR 0 5
9962: PUSH
9963: LD_VAR 0 2
9967: PUSH
9968: LD_VAR 0 3
9972: ARRAY
9973: ST_TO_ADDR
// end ;
9974: GO 9883
9976: POP
9977: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9978: LD_VAR 0 1
9982: PPUSH
9983: LD_VAR 0 5
9987: PPUSH
9988: CALL_OW 135
// end ;
9992: LD_VAR 0 2
9996: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9997: LD_INT 0
9999: PPUSH
10000: PPUSH
10001: PPUSH
10002: PPUSH
10003: PPUSH
10004: PPUSH
10005: PPUSH
10006: PPUSH
10007: PPUSH
10008: PPUSH
10009: PPUSH
10010: PPUSH
10011: PPUSH
// result := [ ] ;
10012: LD_ADDR_VAR 0 7
10016: PUSH
10017: EMPTY
10018: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10019: LD_VAR 0 1
10023: PPUSH
10024: CALL_OW 266
10028: PUSH
10029: LD_INT 0
10031: PUSH
10032: LD_INT 1
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: IN
10039: NOT
10040: IFFALSE 10044
// exit ;
10042: GO 11684
// if name then
10044: LD_VAR 0 3
10048: IFFALSE 10064
// SetBName ( base_dep , name ) ;
10050: LD_VAR 0 1
10054: PPUSH
10055: LD_VAR 0 3
10059: PPUSH
10060: CALL_OW 500
// base := GetBase ( base_dep ) ;
10064: LD_ADDR_VAR 0 15
10068: PUSH
10069: LD_VAR 0 1
10073: PPUSH
10074: CALL_OW 274
10078: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10079: LD_ADDR_VAR 0 16
10083: PUSH
10084: LD_VAR 0 1
10088: PPUSH
10089: CALL_OW 255
10093: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10094: LD_ADDR_VAR 0 17
10098: PUSH
10099: LD_VAR 0 1
10103: PPUSH
10104: CALL_OW 248
10108: ST_TO_ADDR
// if sources then
10109: LD_VAR 0 5
10113: IFFALSE 10160
// for i = 1 to 3 do
10115: LD_ADDR_VAR 0 8
10119: PUSH
10120: DOUBLE
10121: LD_INT 1
10123: DEC
10124: ST_TO_ADDR
10125: LD_INT 3
10127: PUSH
10128: FOR_TO
10129: IFFALSE 10158
// AddResourceType ( base , i , sources [ i ] ) ;
10131: LD_VAR 0 15
10135: PPUSH
10136: LD_VAR 0 8
10140: PPUSH
10141: LD_VAR 0 5
10145: PUSH
10146: LD_VAR 0 8
10150: ARRAY
10151: PPUSH
10152: CALL_OW 276
10156: GO 10128
10158: POP
10159: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10160: LD_ADDR_VAR 0 18
10164: PUSH
10165: LD_VAR 0 15
10169: PPUSH
10170: LD_VAR 0 2
10174: PPUSH
10175: LD_INT 1
10177: PPUSH
10178: CALL 9419 0 3
10182: ST_TO_ADDR
// InitHc ;
10183: CALL_OW 19
// InitUc ;
10187: CALL_OW 18
// uc_side := side ;
10191: LD_ADDR_OWVAR 20
10195: PUSH
10196: LD_VAR 0 16
10200: ST_TO_ADDR
// uc_nation := nation ;
10201: LD_ADDR_OWVAR 21
10205: PUSH
10206: LD_VAR 0 17
10210: ST_TO_ADDR
// if buildings then
10211: LD_VAR 0 18
10215: IFFALSE 11543
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10217: LD_ADDR_VAR 0 19
10221: PUSH
10222: LD_VAR 0 18
10226: PPUSH
10227: LD_INT 2
10229: PUSH
10230: LD_INT 30
10232: PUSH
10233: LD_INT 29
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: PUSH
10240: LD_INT 30
10242: PUSH
10243: LD_INT 30
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: LIST
10254: PPUSH
10255: CALL_OW 72
10259: ST_TO_ADDR
// if tmp then
10260: LD_VAR 0 19
10264: IFFALSE 10312
// for i in tmp do
10266: LD_ADDR_VAR 0 8
10270: PUSH
10271: LD_VAR 0 19
10275: PUSH
10276: FOR_IN
10277: IFFALSE 10310
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10279: LD_VAR 0 8
10283: PPUSH
10284: CALL_OW 250
10288: PPUSH
10289: LD_VAR 0 8
10293: PPUSH
10294: CALL_OW 251
10298: PPUSH
10299: LD_VAR 0 16
10303: PPUSH
10304: CALL_OW 441
10308: GO 10276
10310: POP
10311: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10312: LD_VAR 0 18
10316: PPUSH
10317: LD_INT 2
10319: PUSH
10320: LD_INT 30
10322: PUSH
10323: LD_INT 32
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: LD_INT 30
10332: PUSH
10333: LD_INT 33
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: LIST
10344: PPUSH
10345: CALL_OW 72
10349: IFFALSE 10437
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10351: LD_ADDR_VAR 0 8
10355: PUSH
10356: LD_VAR 0 18
10360: PPUSH
10361: LD_INT 2
10363: PUSH
10364: LD_INT 30
10366: PUSH
10367: LD_INT 32
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 30
10376: PUSH
10377: LD_INT 33
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: LIST
10388: PPUSH
10389: CALL_OW 72
10393: PUSH
10394: FOR_IN
10395: IFFALSE 10435
// begin if not GetBWeapon ( i ) then
10397: LD_VAR 0 8
10401: PPUSH
10402: CALL_OW 269
10406: NOT
10407: IFFALSE 10433
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10409: LD_VAR 0 8
10413: PPUSH
10414: LD_VAR 0 8
10418: PPUSH
10419: LD_VAR 0 2
10423: PPUSH
10424: CALL 11689 0 2
10428: PPUSH
10429: CALL_OW 431
// end ;
10433: GO 10394
10435: POP
10436: POP
// end ; for i = 1 to personel do
10437: LD_ADDR_VAR 0 8
10441: PUSH
10442: DOUBLE
10443: LD_INT 1
10445: DEC
10446: ST_TO_ADDR
10447: LD_VAR 0 6
10451: PUSH
10452: FOR_TO
10453: IFFALSE 11523
// begin if i > 4 then
10455: LD_VAR 0 8
10459: PUSH
10460: LD_INT 4
10462: GREATER
10463: IFFALSE 10467
// break ;
10465: GO 11523
// case i of 1 :
10467: LD_VAR 0 8
10471: PUSH
10472: LD_INT 1
10474: DOUBLE
10475: EQUAL
10476: IFTRUE 10480
10478: GO 10560
10480: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10481: LD_ADDR_VAR 0 12
10485: PUSH
10486: LD_VAR 0 18
10490: PPUSH
10491: LD_INT 22
10493: PUSH
10494: LD_VAR 0 16
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 58
10505: PUSH
10506: EMPTY
10507: LIST
10508: PUSH
10509: LD_INT 2
10511: PUSH
10512: LD_INT 30
10514: PUSH
10515: LD_INT 32
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 30
10524: PUSH
10525: LD_INT 4
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: LD_INT 30
10534: PUSH
10535: LD_INT 5
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: LIST
10552: PPUSH
10553: CALL_OW 72
10557: ST_TO_ADDR
10558: GO 10782
10560: LD_INT 2
10562: DOUBLE
10563: EQUAL
10564: IFTRUE 10568
10566: GO 10630
10568: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10569: LD_ADDR_VAR 0 12
10573: PUSH
10574: LD_VAR 0 18
10578: PPUSH
10579: LD_INT 22
10581: PUSH
10582: LD_VAR 0 16
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 2
10593: PUSH
10594: LD_INT 30
10596: PUSH
10597: LD_INT 0
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: LD_INT 30
10606: PUSH
10607: LD_INT 1
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: LIST
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: PPUSH
10623: CALL_OW 72
10627: ST_TO_ADDR
10628: GO 10782
10630: LD_INT 3
10632: DOUBLE
10633: EQUAL
10634: IFTRUE 10638
10636: GO 10700
10638: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10639: LD_ADDR_VAR 0 12
10643: PUSH
10644: LD_VAR 0 18
10648: PPUSH
10649: LD_INT 22
10651: PUSH
10652: LD_VAR 0 16
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PUSH
10661: LD_INT 2
10663: PUSH
10664: LD_INT 30
10666: PUSH
10667: LD_INT 2
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: LD_INT 30
10676: PUSH
10677: LD_INT 3
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: LIST
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PPUSH
10693: CALL_OW 72
10697: ST_TO_ADDR
10698: GO 10782
10700: LD_INT 4
10702: DOUBLE
10703: EQUAL
10704: IFTRUE 10708
10706: GO 10781
10708: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10709: LD_ADDR_VAR 0 12
10713: PUSH
10714: LD_VAR 0 18
10718: PPUSH
10719: LD_INT 22
10721: PUSH
10722: LD_VAR 0 16
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PUSH
10731: LD_INT 2
10733: PUSH
10734: LD_INT 30
10736: PUSH
10737: LD_INT 6
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 30
10746: PUSH
10747: LD_INT 7
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: LD_INT 30
10756: PUSH
10757: LD_INT 8
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PPUSH
10774: CALL_OW 72
10778: ST_TO_ADDR
10779: GO 10782
10781: POP
// if i = 1 then
10782: LD_VAR 0 8
10786: PUSH
10787: LD_INT 1
10789: EQUAL
10790: IFFALSE 10901
// begin tmp := [ ] ;
10792: LD_ADDR_VAR 0 19
10796: PUSH
10797: EMPTY
10798: ST_TO_ADDR
// for j in f do
10799: LD_ADDR_VAR 0 9
10803: PUSH
10804: LD_VAR 0 12
10808: PUSH
10809: FOR_IN
10810: IFFALSE 10883
// if GetBType ( j ) = b_bunker then
10812: LD_VAR 0 9
10816: PPUSH
10817: CALL_OW 266
10821: PUSH
10822: LD_INT 32
10824: EQUAL
10825: IFFALSE 10852
// tmp := Insert ( tmp , 1 , j ) else
10827: LD_ADDR_VAR 0 19
10831: PUSH
10832: LD_VAR 0 19
10836: PPUSH
10837: LD_INT 1
10839: PPUSH
10840: LD_VAR 0 9
10844: PPUSH
10845: CALL_OW 2
10849: ST_TO_ADDR
10850: GO 10881
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10852: LD_ADDR_VAR 0 19
10856: PUSH
10857: LD_VAR 0 19
10861: PPUSH
10862: LD_VAR 0 19
10866: PUSH
10867: LD_INT 1
10869: PLUS
10870: PPUSH
10871: LD_VAR 0 9
10875: PPUSH
10876: CALL_OW 2
10880: ST_TO_ADDR
10881: GO 10809
10883: POP
10884: POP
// if tmp then
10885: LD_VAR 0 19
10889: IFFALSE 10901
// f := tmp ;
10891: LD_ADDR_VAR 0 12
10895: PUSH
10896: LD_VAR 0 19
10900: ST_TO_ADDR
// end ; x := personel [ i ] ;
10901: LD_ADDR_VAR 0 13
10905: PUSH
10906: LD_VAR 0 6
10910: PUSH
10911: LD_VAR 0 8
10915: ARRAY
10916: ST_TO_ADDR
// if x = - 1 then
10917: LD_VAR 0 13
10921: PUSH
10922: LD_INT 1
10924: NEG
10925: EQUAL
10926: IFFALSE 11137
// begin for j in f do
10928: LD_ADDR_VAR 0 9
10932: PUSH
10933: LD_VAR 0 12
10937: PUSH
10938: FOR_IN
10939: IFFALSE 11133
// repeat InitHc ;
10941: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10945: LD_VAR 0 9
10949: PPUSH
10950: CALL_OW 266
10954: PUSH
10955: LD_INT 5
10957: EQUAL
10958: IFFALSE 11028
// begin if UnitsInside ( j ) < 3 then
10960: LD_VAR 0 9
10964: PPUSH
10965: CALL_OW 313
10969: PUSH
10970: LD_INT 3
10972: LESS
10973: IFFALSE 11009
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10975: LD_INT 0
10977: PPUSH
10978: LD_INT 5
10980: PUSH
10981: LD_INT 8
10983: PUSH
10984: LD_INT 9
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: LIST
10991: PUSH
10992: LD_VAR 0 17
10996: ARRAY
10997: PPUSH
10998: LD_VAR 0 4
11002: PPUSH
11003: CALL_OW 380
11007: GO 11026
// PrepareHuman ( false , i , skill ) ;
11009: LD_INT 0
11011: PPUSH
11012: LD_VAR 0 8
11016: PPUSH
11017: LD_VAR 0 4
11021: PPUSH
11022: CALL_OW 380
// end else
11026: GO 11045
// PrepareHuman ( false , i , skill ) ;
11028: LD_INT 0
11030: PPUSH
11031: LD_VAR 0 8
11035: PPUSH
11036: LD_VAR 0 4
11040: PPUSH
11041: CALL_OW 380
// un := CreateHuman ;
11045: LD_ADDR_VAR 0 14
11049: PUSH
11050: CALL_OW 44
11054: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11055: LD_ADDR_VAR 0 7
11059: PUSH
11060: LD_VAR 0 7
11064: PPUSH
11065: LD_INT 1
11067: PPUSH
11068: LD_VAR 0 14
11072: PPUSH
11073: CALL_OW 2
11077: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11078: LD_VAR 0 14
11082: PPUSH
11083: LD_VAR 0 9
11087: PPUSH
11088: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11092: LD_VAR 0 9
11096: PPUSH
11097: CALL_OW 313
11101: PUSH
11102: LD_INT 6
11104: EQUAL
11105: IFTRUE 11129
11107: PUSH
11108: LD_VAR 0 9
11112: PPUSH
11113: CALL_OW 266
11117: PUSH
11118: LD_INT 32
11120: PUSH
11121: LD_INT 31
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: IN
11128: OR
11129: IFFALSE 10941
11131: GO 10938
11133: POP
11134: POP
// end else
11135: GO 11521
// for j = 1 to x do
11137: LD_ADDR_VAR 0 9
11141: PUSH
11142: DOUBLE
11143: LD_INT 1
11145: DEC
11146: ST_TO_ADDR
11147: LD_VAR 0 13
11151: PUSH
11152: FOR_TO
11153: IFFALSE 11519
// begin InitHc ;
11155: CALL_OW 19
// if not f then
11159: LD_VAR 0 12
11163: NOT
11164: IFFALSE 11253
// begin PrepareHuman ( false , i , skill ) ;
11166: LD_INT 0
11168: PPUSH
11169: LD_VAR 0 8
11173: PPUSH
11174: LD_VAR 0 4
11178: PPUSH
11179: CALL_OW 380
// un := CreateHuman ;
11183: LD_ADDR_VAR 0 14
11187: PUSH
11188: CALL_OW 44
11192: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11193: LD_ADDR_VAR 0 7
11197: PUSH
11198: LD_VAR 0 7
11202: PPUSH
11203: LD_INT 1
11205: PPUSH
11206: LD_VAR 0 14
11210: PPUSH
11211: CALL_OW 2
11215: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11216: LD_VAR 0 14
11220: PPUSH
11221: LD_VAR 0 1
11225: PPUSH
11226: CALL_OW 250
11230: PPUSH
11231: LD_VAR 0 1
11235: PPUSH
11236: CALL_OW 251
11240: PPUSH
11241: LD_INT 10
11243: PPUSH
11244: LD_INT 0
11246: PPUSH
11247: CALL_OW 50
// continue ;
11251: GO 11152
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11253: LD_VAR 0 12
11257: PUSH
11258: LD_INT 1
11260: ARRAY
11261: PPUSH
11262: CALL_OW 313
11266: IFFALSE 11294
11268: PUSH
11269: LD_VAR 0 12
11273: PUSH
11274: LD_INT 1
11276: ARRAY
11277: PPUSH
11278: CALL_OW 266
11282: PUSH
11283: LD_INT 32
11285: PUSH
11286: LD_INT 31
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: IN
11293: AND
11294: IFTRUE 11315
11296: PUSH
11297: LD_VAR 0 12
11301: PUSH
11302: LD_INT 1
11304: ARRAY
11305: PPUSH
11306: CALL_OW 313
11310: PUSH
11311: LD_INT 6
11313: EQUAL
11314: OR
11315: IFFALSE 11335
// f := Delete ( f , 1 ) ;
11317: LD_ADDR_VAR 0 12
11321: PUSH
11322: LD_VAR 0 12
11326: PPUSH
11327: LD_INT 1
11329: PPUSH
11330: CALL_OW 3
11334: ST_TO_ADDR
// if not f then
11335: LD_VAR 0 12
11339: NOT
11340: IFFALSE 11358
// begin x := x + 2 ;
11342: LD_ADDR_VAR 0 13
11346: PUSH
11347: LD_VAR 0 13
11351: PUSH
11352: LD_INT 2
11354: PLUS
11355: ST_TO_ADDR
// continue ;
11356: GO 11152
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11358: LD_VAR 0 12
11362: PUSH
11363: LD_INT 1
11365: ARRAY
11366: PPUSH
11367: CALL_OW 266
11371: PUSH
11372: LD_INT 5
11374: EQUAL
11375: IFFALSE 11449
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11377: LD_VAR 0 12
11381: PUSH
11382: LD_INT 1
11384: ARRAY
11385: PPUSH
11386: CALL_OW 313
11390: PUSH
11391: LD_INT 3
11393: LESS
11394: IFFALSE 11430
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11396: LD_INT 0
11398: PPUSH
11399: LD_INT 5
11401: PUSH
11402: LD_INT 8
11404: PUSH
11405: LD_INT 9
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: LIST
11412: PUSH
11413: LD_VAR 0 17
11417: ARRAY
11418: PPUSH
11419: LD_VAR 0 4
11423: PPUSH
11424: CALL_OW 380
11428: GO 11447
// PrepareHuman ( false , i , skill ) ;
11430: LD_INT 0
11432: PPUSH
11433: LD_VAR 0 8
11437: PPUSH
11438: LD_VAR 0 4
11442: PPUSH
11443: CALL_OW 380
// end else
11447: GO 11466
// PrepareHuman ( false , i , skill ) ;
11449: LD_INT 0
11451: PPUSH
11452: LD_VAR 0 8
11456: PPUSH
11457: LD_VAR 0 4
11461: PPUSH
11462: CALL_OW 380
// un := CreateHuman ;
11466: LD_ADDR_VAR 0 14
11470: PUSH
11471: CALL_OW 44
11475: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11476: LD_ADDR_VAR 0 7
11480: PUSH
11481: LD_VAR 0 7
11485: PPUSH
11486: LD_INT 1
11488: PPUSH
11489: LD_VAR 0 14
11493: PPUSH
11494: CALL_OW 2
11498: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11499: LD_VAR 0 14
11503: PPUSH
11504: LD_VAR 0 12
11508: PUSH
11509: LD_INT 1
11511: ARRAY
11512: PPUSH
11513: CALL_OW 52
// end ;
11517: GO 11152
11519: POP
11520: POP
// end ;
11521: GO 10452
11523: POP
11524: POP
// result := result ^ buildings ;
11525: LD_ADDR_VAR 0 7
11529: PUSH
11530: LD_VAR 0 7
11534: PUSH
11535: LD_VAR 0 18
11539: ADD
11540: ST_TO_ADDR
// end else
11541: GO 11684
// begin for i = 1 to personel do
11543: LD_ADDR_VAR 0 8
11547: PUSH
11548: DOUBLE
11549: LD_INT 1
11551: DEC
11552: ST_TO_ADDR
11553: LD_VAR 0 6
11557: PUSH
11558: FOR_TO
11559: IFFALSE 11682
// begin if i > 4 then
11561: LD_VAR 0 8
11565: PUSH
11566: LD_INT 4
11568: GREATER
11569: IFFALSE 11573
// break ;
11571: GO 11682
// x := personel [ i ] ;
11573: LD_ADDR_VAR 0 13
11577: PUSH
11578: LD_VAR 0 6
11582: PUSH
11583: LD_VAR 0 8
11587: ARRAY
11588: ST_TO_ADDR
// if x = - 1 then
11589: LD_VAR 0 13
11593: PUSH
11594: LD_INT 1
11596: NEG
11597: EQUAL
11598: IFFALSE 11602
// continue ;
11600: GO 11558
// PrepareHuman ( false , i , skill ) ;
11602: LD_INT 0
11604: PPUSH
11605: LD_VAR 0 8
11609: PPUSH
11610: LD_VAR 0 4
11614: PPUSH
11615: CALL_OW 380
// un := CreateHuman ;
11619: LD_ADDR_VAR 0 14
11623: PUSH
11624: CALL_OW 44
11628: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11629: LD_VAR 0 14
11633: PPUSH
11634: LD_VAR 0 1
11638: PPUSH
11639: CALL_OW 250
11643: PPUSH
11644: LD_VAR 0 1
11648: PPUSH
11649: CALL_OW 251
11653: PPUSH
11654: LD_INT 10
11656: PPUSH
11657: LD_INT 0
11659: PPUSH
11660: CALL_OW 50
// result := result ^ un ;
11664: LD_ADDR_VAR 0 7
11668: PUSH
11669: LD_VAR 0 7
11673: PUSH
11674: LD_VAR 0 14
11678: ADD
11679: ST_TO_ADDR
// end ;
11680: GO 11558
11682: POP
11683: POP
// end ; end ;
11684: LD_VAR 0 7
11688: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11689: LD_INT 0
11691: PPUSH
11692: PPUSH
11693: PPUSH
11694: PPUSH
11695: PPUSH
11696: PPUSH
11697: PPUSH
11698: PPUSH
11699: PPUSH
11700: PPUSH
11701: PPUSH
11702: PPUSH
11703: PPUSH
11704: PPUSH
11705: PPUSH
11706: PPUSH
// result := false ;
11707: LD_ADDR_VAR 0 3
11711: PUSH
11712: LD_INT 0
11714: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11715: LD_VAR 0 1
11719: NOT
11720: IFTRUE 11745
11722: PUSH
11723: LD_VAR 0 1
11727: PPUSH
11728: CALL_OW 266
11732: PUSH
11733: LD_INT 32
11735: PUSH
11736: LD_INT 33
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: IN
11743: NOT
11744: OR
11745: IFFALSE 11749
// exit ;
11747: GO 12884
// nat := GetNation ( tower ) ;
11749: LD_ADDR_VAR 0 12
11753: PUSH
11754: LD_VAR 0 1
11758: PPUSH
11759: CALL_OW 248
11763: ST_TO_ADDR
// side := GetSide ( tower ) ;
11764: LD_ADDR_VAR 0 16
11768: PUSH
11769: LD_VAR 0 1
11773: PPUSH
11774: CALL_OW 255
11778: ST_TO_ADDR
// x := GetX ( tower ) ;
11779: LD_ADDR_VAR 0 10
11783: PUSH
11784: LD_VAR 0 1
11788: PPUSH
11789: CALL_OW 250
11793: ST_TO_ADDR
// y := GetY ( tower ) ;
11794: LD_ADDR_VAR 0 11
11798: PUSH
11799: LD_VAR 0 1
11803: PPUSH
11804: CALL_OW 251
11808: ST_TO_ADDR
// if not x or not y then
11809: LD_VAR 0 10
11813: NOT
11814: IFTRUE 11823
11816: PUSH
11817: LD_VAR 0 11
11821: NOT
11822: OR
11823: IFFALSE 11827
// exit ;
11825: GO 12884
// weapon := 0 ;
11827: LD_ADDR_VAR 0 18
11831: PUSH
11832: LD_INT 0
11834: ST_TO_ADDR
// fac_list := [ ] ;
11835: LD_ADDR_VAR 0 17
11839: PUSH
11840: EMPTY
11841: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11842: LD_ADDR_VAR 0 6
11846: PUSH
11847: LD_VAR 0 1
11851: PPUSH
11852: CALL_OW 274
11856: PPUSH
11857: LD_VAR 0 2
11861: PPUSH
11862: LD_INT 0
11864: PPUSH
11865: CALL 9419 0 3
11869: PPUSH
11870: LD_INT 30
11872: PUSH
11873: LD_INT 3
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PPUSH
11880: CALL_OW 72
11884: ST_TO_ADDR
// if not factories then
11885: LD_VAR 0 6
11889: NOT
11890: IFFALSE 11894
// exit ;
11892: GO 12884
// for i in factories do
11894: LD_ADDR_VAR 0 8
11898: PUSH
11899: LD_VAR 0 6
11903: PUSH
11904: FOR_IN
11905: IFFALSE 11930
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11907: LD_ADDR_VAR 0 17
11911: PUSH
11912: LD_VAR 0 17
11916: PUSH
11917: LD_VAR 0 8
11921: PPUSH
11922: CALL_OW 478
11926: UNION
11927: ST_TO_ADDR
11928: GO 11904
11930: POP
11931: POP
// if not fac_list then
11932: LD_VAR 0 17
11936: NOT
11937: IFFALSE 11941
// exit ;
11939: GO 12884
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11941: LD_ADDR_VAR 0 5
11945: PUSH
11946: LD_INT 4
11948: PUSH
11949: LD_INT 5
11951: PUSH
11952: LD_INT 9
11954: PUSH
11955: LD_INT 10
11957: PUSH
11958: LD_INT 6
11960: PUSH
11961: LD_INT 7
11963: PUSH
11964: LD_INT 11
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 27
11978: PUSH
11979: LD_INT 28
11981: PUSH
11982: LD_INT 26
11984: PUSH
11985: LD_INT 30
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: PUSH
11994: LD_INT 43
11996: PUSH
11997: LD_INT 44
11999: PUSH
12000: LD_INT 46
12002: PUSH
12003: LD_INT 45
12005: PUSH
12006: LD_INT 47
12008: PUSH
12009: LD_INT 49
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: LIST
12024: PUSH
12025: LD_VAR 0 12
12029: ARRAY
12030: ST_TO_ADDR
// list := list isect fac_list ;
12031: LD_ADDR_VAR 0 5
12035: PUSH
12036: LD_VAR 0 5
12040: PUSH
12041: LD_VAR 0 17
12045: ISECT
12046: ST_TO_ADDR
// if not list then
12047: LD_VAR 0 5
12051: NOT
12052: IFFALSE 12056
// exit ;
12054: GO 12884
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12056: LD_VAR 0 12
12060: PUSH
12061: LD_INT 3
12063: EQUAL
12064: IFFALSE 12076
12066: PUSH
12067: LD_INT 49
12069: PUSH
12070: LD_VAR 0 5
12074: IN
12075: AND
12076: IFFALSE 12096
12078: PUSH
12079: LD_INT 31
12081: PPUSH
12082: LD_VAR 0 16
12086: PPUSH
12087: CALL_OW 321
12091: PUSH
12092: LD_INT 2
12094: EQUAL
12095: AND
12096: IFFALSE 12156
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12098: LD_INT 22
12100: PUSH
12101: LD_VAR 0 16
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 35
12112: PUSH
12113: LD_INT 49
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 91
12122: PUSH
12123: LD_VAR 0 1
12127: PUSH
12128: LD_INT 10
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: LIST
12140: PPUSH
12141: CALL_OW 69
12145: NOT
12146: IFFALSE 12156
// weapon := ru_time_lapser ;
12148: LD_ADDR_VAR 0 18
12152: PUSH
12153: LD_INT 49
12155: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12156: LD_VAR 0 12
12160: PUSH
12161: LD_INT 1
12163: PUSH
12164: LD_INT 2
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: IN
12171: IFFALSE 12195
12173: PUSH
12174: LD_INT 11
12176: PUSH
12177: LD_VAR 0 5
12181: IN
12182: IFTRUE 12194
12184: PUSH
12185: LD_INT 30
12187: PUSH
12188: LD_VAR 0 5
12192: IN
12193: OR
12194: AND
12195: IFFALSE 12215
12197: PUSH
12198: LD_INT 6
12200: PPUSH
12201: LD_VAR 0 16
12205: PPUSH
12206: CALL_OW 321
12210: PUSH
12211: LD_INT 2
12213: EQUAL
12214: AND
12215: IFFALSE 12382
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12217: LD_INT 22
12219: PUSH
12220: LD_VAR 0 16
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PUSH
12229: LD_INT 2
12231: PUSH
12232: LD_INT 35
12234: PUSH
12235: LD_INT 11
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 35
12244: PUSH
12245: LD_INT 30
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: PUSH
12257: LD_INT 91
12259: PUSH
12260: LD_VAR 0 1
12264: PUSH
12265: LD_INT 18
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: PPUSH
12278: CALL_OW 69
12282: NOT
12283: IFFALSE 12359
12285: PUSH
12286: LD_INT 22
12288: PUSH
12289: LD_VAR 0 16
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: LD_INT 2
12300: PUSH
12301: LD_INT 30
12303: PUSH
12304: LD_INT 32
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 30
12313: PUSH
12314: LD_INT 33
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: LIST
12325: PUSH
12326: LD_INT 91
12328: PUSH
12329: LD_VAR 0 1
12333: PUSH
12334: LD_INT 12
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: PUSH
12347: EMPTY
12348: LIST
12349: PPUSH
12350: CALL_OW 69
12354: PUSH
12355: LD_INT 2
12357: GREATER
12358: AND
12359: IFFALSE 12382
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12361: LD_ADDR_VAR 0 18
12365: PUSH
12366: LD_INT 11
12368: PUSH
12369: LD_INT 30
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_VAR 0 12
12380: ARRAY
12381: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12382: LD_VAR 0 18
12386: NOT
12387: IFFALSE 12407
12389: PUSH
12390: LD_INT 40
12392: PPUSH
12393: LD_VAR 0 16
12397: PPUSH
12398: CALL_OW 321
12402: PUSH
12403: LD_INT 2
12405: EQUAL
12406: AND
12407: IFFALSE 12443
12409: PUSH
12410: LD_INT 7
12412: PUSH
12413: LD_VAR 0 5
12417: IN
12418: IFTRUE 12430
12420: PUSH
12421: LD_INT 28
12423: PUSH
12424: LD_VAR 0 5
12428: IN
12429: OR
12430: IFTRUE 12442
12432: PUSH
12433: LD_INT 45
12435: PUSH
12436: LD_VAR 0 5
12440: IN
12441: OR
12442: AND
12443: IFFALSE 12697
// begin hex := GetHexInfo ( x , y ) ;
12445: LD_ADDR_VAR 0 4
12449: PUSH
12450: LD_VAR 0 10
12454: PPUSH
12455: LD_VAR 0 11
12459: PPUSH
12460: CALL_OW 546
12464: ST_TO_ADDR
// if hex [ 1 ] then
12465: LD_VAR 0 4
12469: PUSH
12470: LD_INT 1
12472: ARRAY
12473: IFFALSE 12477
// exit ;
12475: GO 12884
// height := hex [ 2 ] ;
12477: LD_ADDR_VAR 0 15
12481: PUSH
12482: LD_VAR 0 4
12486: PUSH
12487: LD_INT 2
12489: ARRAY
12490: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12491: LD_ADDR_VAR 0 14
12495: PUSH
12496: LD_INT 0
12498: PUSH
12499: LD_INT 2
12501: PUSH
12502: LD_INT 3
12504: PUSH
12505: LD_INT 5
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: ST_TO_ADDR
// for i in tmp do
12514: LD_ADDR_VAR 0 8
12518: PUSH
12519: LD_VAR 0 14
12523: PUSH
12524: FOR_IN
12525: IFFALSE 12695
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12527: LD_ADDR_VAR 0 9
12531: PUSH
12532: LD_VAR 0 10
12536: PPUSH
12537: LD_VAR 0 8
12541: PPUSH
12542: LD_INT 5
12544: PPUSH
12545: CALL_OW 272
12549: PUSH
12550: LD_VAR 0 11
12554: PPUSH
12555: LD_VAR 0 8
12559: PPUSH
12560: LD_INT 5
12562: PPUSH
12563: CALL_OW 273
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12572: LD_VAR 0 9
12576: PUSH
12577: LD_INT 1
12579: ARRAY
12580: PPUSH
12581: LD_VAR 0 9
12585: PUSH
12586: LD_INT 2
12588: ARRAY
12589: PPUSH
12590: CALL_OW 488
12594: IFFALSE 12693
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12596: LD_ADDR_VAR 0 4
12600: PUSH
12601: LD_VAR 0 9
12605: PUSH
12606: LD_INT 1
12608: ARRAY
12609: PPUSH
12610: LD_VAR 0 9
12614: PUSH
12615: LD_INT 2
12617: ARRAY
12618: PPUSH
12619: CALL_OW 546
12623: ST_TO_ADDR
// if hex [ 1 ] then
12624: LD_VAR 0 4
12628: PUSH
12629: LD_INT 1
12631: ARRAY
12632: IFFALSE 12636
// continue ;
12634: GO 12524
// h := hex [ 2 ] ;
12636: LD_ADDR_VAR 0 13
12640: PUSH
12641: LD_VAR 0 4
12645: PUSH
12646: LD_INT 2
12648: ARRAY
12649: ST_TO_ADDR
// if h + 7 < height then
12650: LD_VAR 0 13
12654: PUSH
12655: LD_INT 7
12657: PLUS
12658: PUSH
12659: LD_VAR 0 15
12663: LESS
12664: IFFALSE 12693
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12666: LD_ADDR_VAR 0 18
12670: PUSH
12671: LD_INT 7
12673: PUSH
12674: LD_INT 28
12676: PUSH
12677: LD_INT 45
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: LIST
12684: PUSH
12685: LD_VAR 0 12
12689: ARRAY
12690: ST_TO_ADDR
// break ;
12691: GO 12695
// end ; end ; end ;
12693: GO 12524
12695: POP
12696: POP
// end ; if not weapon then
12697: LD_VAR 0 18
12701: NOT
12702: IFFALSE 12762
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12704: LD_ADDR_VAR 0 5
12708: PUSH
12709: LD_VAR 0 5
12713: PUSH
12714: LD_INT 11
12716: PUSH
12717: LD_INT 30
12719: PUSH
12720: LD_INT 49
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: LIST
12727: DIFF
12728: ST_TO_ADDR
// if not list then
12729: LD_VAR 0 5
12733: NOT
12734: IFFALSE 12738
// exit ;
12736: GO 12884
// weapon := list [ rand ( 1 , list ) ] ;
12738: LD_ADDR_VAR 0 18
12742: PUSH
12743: LD_VAR 0 5
12747: PUSH
12748: LD_INT 1
12750: PPUSH
12751: LD_VAR 0 5
12755: PPUSH
12756: CALL_OW 12
12760: ARRAY
12761: ST_TO_ADDR
// end ; if weapon then
12762: LD_VAR 0 18
12766: IFFALSE 12884
// begin tmp := CostOfWeapon ( weapon ) ;
12768: LD_ADDR_VAR 0 14
12772: PUSH
12773: LD_VAR 0 18
12777: PPUSH
12778: CALL_OW 451
12782: ST_TO_ADDR
// j := GetBase ( tower ) ;
12783: LD_ADDR_VAR 0 9
12787: PUSH
12788: LD_VAR 0 1
12792: PPUSH
12793: CALL_OW 274
12797: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12798: LD_VAR 0 9
12802: PPUSH
12803: LD_INT 1
12805: PPUSH
12806: CALL_OW 275
12810: PUSH
12811: LD_VAR 0 14
12815: PUSH
12816: LD_INT 1
12818: ARRAY
12819: GREATEREQUAL
12820: IFFALSE 12846
12822: PUSH
12823: LD_VAR 0 9
12827: PPUSH
12828: LD_INT 2
12830: PPUSH
12831: CALL_OW 275
12835: PUSH
12836: LD_VAR 0 14
12840: PUSH
12841: LD_INT 2
12843: ARRAY
12844: GREATEREQUAL
12845: AND
12846: IFFALSE 12872
12848: PUSH
12849: LD_VAR 0 9
12853: PPUSH
12854: LD_INT 3
12856: PPUSH
12857: CALL_OW 275
12861: PUSH
12862: LD_VAR 0 14
12866: PUSH
12867: LD_INT 3
12869: ARRAY
12870: GREATEREQUAL
12871: AND
12872: IFFALSE 12884
// result := weapon ;
12874: LD_ADDR_VAR 0 3
12878: PUSH
12879: LD_VAR 0 18
12883: ST_TO_ADDR
// end ; end ;
12884: LD_VAR 0 3
12888: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12889: LD_INT 0
12891: PPUSH
12892: PPUSH
// result := true ;
12893: LD_ADDR_VAR 0 3
12897: PUSH
12898: LD_INT 1
12900: ST_TO_ADDR
// if array1 = array2 then
12901: LD_VAR 0 1
12905: PUSH
12906: LD_VAR 0 2
12910: EQUAL
12911: IFFALSE 12971
// begin for i = 1 to array1 do
12913: LD_ADDR_VAR 0 4
12917: PUSH
12918: DOUBLE
12919: LD_INT 1
12921: DEC
12922: ST_TO_ADDR
12923: LD_VAR 0 1
12927: PUSH
12928: FOR_TO
12929: IFFALSE 12967
// if array1 [ i ] <> array2 [ i ] then
12931: LD_VAR 0 1
12935: PUSH
12936: LD_VAR 0 4
12940: ARRAY
12941: PUSH
12942: LD_VAR 0 2
12946: PUSH
12947: LD_VAR 0 4
12951: ARRAY
12952: NONEQUAL
12953: IFFALSE 12965
// begin result := false ;
12955: LD_ADDR_VAR 0 3
12959: PUSH
12960: LD_INT 0
12962: ST_TO_ADDR
// break ;
12963: GO 12967
// end ;
12965: GO 12928
12967: POP
12968: POP
// end else
12969: GO 12979
// result := false ;
12971: LD_ADDR_VAR 0 3
12975: PUSH
12976: LD_INT 0
12978: ST_TO_ADDR
// end ;
12979: LD_VAR 0 3
12983: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12984: LD_INT 0
12986: PPUSH
12987: PPUSH
// if not array1 or not array2 then
12988: LD_VAR 0 1
12992: NOT
12993: IFTRUE 13002
12995: PUSH
12996: LD_VAR 0 2
13000: NOT
13001: OR
13002: IFFALSE 13006
// exit ;
13004: GO 13070
// result := true ;
13006: LD_ADDR_VAR 0 3
13010: PUSH
13011: LD_INT 1
13013: ST_TO_ADDR
// for i = 1 to array1 do
13014: LD_ADDR_VAR 0 4
13018: PUSH
13019: DOUBLE
13020: LD_INT 1
13022: DEC
13023: ST_TO_ADDR
13024: LD_VAR 0 1
13028: PUSH
13029: FOR_TO
13030: IFFALSE 13068
// if array1 [ i ] <> array2 [ i ] then
13032: LD_VAR 0 1
13036: PUSH
13037: LD_VAR 0 4
13041: ARRAY
13042: PUSH
13043: LD_VAR 0 2
13047: PUSH
13048: LD_VAR 0 4
13052: ARRAY
13053: NONEQUAL
13054: IFFALSE 13066
// begin result := false ;
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: LD_INT 0
13063: ST_TO_ADDR
// break ;
13064: GO 13068
// end ;
13066: GO 13029
13068: POP
13069: POP
// end ;
13070: LD_VAR 0 3
13074: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13075: LD_INT 0
13077: PPUSH
13078: PPUSH
13079: PPUSH
// pom := GetBase ( fac ) ;
13080: LD_ADDR_VAR 0 5
13084: PUSH
13085: LD_VAR 0 1
13089: PPUSH
13090: CALL_OW 274
13094: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13095: LD_ADDR_VAR 0 4
13099: PUSH
13100: LD_VAR 0 2
13104: PUSH
13105: LD_INT 1
13107: ARRAY
13108: PPUSH
13109: LD_VAR 0 2
13113: PUSH
13114: LD_INT 2
13116: ARRAY
13117: PPUSH
13118: LD_VAR 0 2
13122: PUSH
13123: LD_INT 3
13125: ARRAY
13126: PPUSH
13127: LD_VAR 0 2
13131: PUSH
13132: LD_INT 4
13134: ARRAY
13135: PPUSH
13136: CALL_OW 449
13140: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13141: LD_ADDR_VAR 0 3
13145: PUSH
13146: LD_VAR 0 5
13150: PPUSH
13151: LD_INT 1
13153: PPUSH
13154: CALL_OW 275
13158: PUSH
13159: LD_VAR 0 4
13163: PUSH
13164: LD_INT 1
13166: ARRAY
13167: GREATEREQUAL
13168: IFFALSE 13194
13170: PUSH
13171: LD_VAR 0 5
13175: PPUSH
13176: LD_INT 2
13178: PPUSH
13179: CALL_OW 275
13183: PUSH
13184: LD_VAR 0 4
13188: PUSH
13189: LD_INT 2
13191: ARRAY
13192: GREATEREQUAL
13193: AND
13194: IFFALSE 13220
13196: PUSH
13197: LD_VAR 0 5
13201: PPUSH
13202: LD_INT 3
13204: PPUSH
13205: CALL_OW 275
13209: PUSH
13210: LD_VAR 0 4
13214: PUSH
13215: LD_INT 3
13217: ARRAY
13218: GREATEREQUAL
13219: AND
13220: ST_TO_ADDR
// end ;
13221: LD_VAR 0 3
13225: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13226: LD_INT 0
13228: PPUSH
13229: PPUSH
13230: PPUSH
13231: PPUSH
// pom := GetBase ( building ) ;
13232: LD_ADDR_VAR 0 3
13236: PUSH
13237: LD_VAR 0 1
13241: PPUSH
13242: CALL_OW 274
13246: ST_TO_ADDR
// if not pom then
13247: LD_VAR 0 3
13251: NOT
13252: IFFALSE 13256
// exit ;
13254: GO 13430
// btype := GetBType ( building ) ;
13256: LD_ADDR_VAR 0 5
13260: PUSH
13261: LD_VAR 0 1
13265: PPUSH
13266: CALL_OW 266
13270: ST_TO_ADDR
// if btype = b_armoury then
13271: LD_VAR 0 5
13275: PUSH
13276: LD_INT 4
13278: EQUAL
13279: IFFALSE 13289
// btype := b_barracks ;
13281: LD_ADDR_VAR 0 5
13285: PUSH
13286: LD_INT 5
13288: ST_TO_ADDR
// if btype = b_depot then
13289: LD_VAR 0 5
13293: PUSH
13294: LD_INT 0
13296: EQUAL
13297: IFFALSE 13307
// btype := b_warehouse ;
13299: LD_ADDR_VAR 0 5
13303: PUSH
13304: LD_INT 1
13306: ST_TO_ADDR
// if btype = b_workshop then
13307: LD_VAR 0 5
13311: PUSH
13312: LD_INT 2
13314: EQUAL
13315: IFFALSE 13325
// btype := b_factory ;
13317: LD_ADDR_VAR 0 5
13321: PUSH
13322: LD_INT 3
13324: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13325: LD_ADDR_VAR 0 4
13329: PUSH
13330: LD_VAR 0 5
13334: PPUSH
13335: LD_VAR 0 1
13339: PPUSH
13340: CALL_OW 248
13344: PPUSH
13345: CALL_OW 450
13349: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13350: LD_ADDR_VAR 0 2
13354: PUSH
13355: LD_VAR 0 3
13359: PPUSH
13360: LD_INT 1
13362: PPUSH
13363: CALL_OW 275
13367: PUSH
13368: LD_VAR 0 4
13372: PUSH
13373: LD_INT 1
13375: ARRAY
13376: GREATEREQUAL
13377: IFFALSE 13403
13379: PUSH
13380: LD_VAR 0 3
13384: PPUSH
13385: LD_INT 2
13387: PPUSH
13388: CALL_OW 275
13392: PUSH
13393: LD_VAR 0 4
13397: PUSH
13398: LD_INT 2
13400: ARRAY
13401: GREATEREQUAL
13402: AND
13403: IFFALSE 13429
13405: PUSH
13406: LD_VAR 0 3
13410: PPUSH
13411: LD_INT 3
13413: PPUSH
13414: CALL_OW 275
13418: PUSH
13419: LD_VAR 0 4
13423: PUSH
13424: LD_INT 3
13426: ARRAY
13427: GREATEREQUAL
13428: AND
13429: ST_TO_ADDR
// end ;
13430: LD_VAR 0 2
13434: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13435: LD_INT 0
13437: PPUSH
13438: PPUSH
13439: PPUSH
// pom := GetBase ( building ) ;
13440: LD_ADDR_VAR 0 4
13444: PUSH
13445: LD_VAR 0 1
13449: PPUSH
13450: CALL_OW 274
13454: ST_TO_ADDR
// if not pom then
13455: LD_VAR 0 4
13459: NOT
13460: IFFALSE 13464
// exit ;
13462: GO 13569
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13464: LD_ADDR_VAR 0 5
13468: PUSH
13469: LD_VAR 0 2
13473: PPUSH
13474: LD_VAR 0 1
13478: PPUSH
13479: CALL_OW 248
13483: PPUSH
13484: CALL_OW 450
13488: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13489: LD_ADDR_VAR 0 3
13493: PUSH
13494: LD_VAR 0 4
13498: PPUSH
13499: LD_INT 1
13501: PPUSH
13502: CALL_OW 275
13506: PUSH
13507: LD_VAR 0 5
13511: PUSH
13512: LD_INT 1
13514: ARRAY
13515: GREATEREQUAL
13516: IFFALSE 13542
13518: PUSH
13519: LD_VAR 0 4
13523: PPUSH
13524: LD_INT 2
13526: PPUSH
13527: CALL_OW 275
13531: PUSH
13532: LD_VAR 0 5
13536: PUSH
13537: LD_INT 2
13539: ARRAY
13540: GREATEREQUAL
13541: AND
13542: IFFALSE 13568
13544: PUSH
13545: LD_VAR 0 4
13549: PPUSH
13550: LD_INT 3
13552: PPUSH
13553: CALL_OW 275
13557: PUSH
13558: LD_VAR 0 5
13562: PUSH
13563: LD_INT 3
13565: ARRAY
13566: GREATEREQUAL
13567: AND
13568: ST_TO_ADDR
// end ;
13569: LD_VAR 0 3
13573: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13574: LD_INT 0
13576: PPUSH
13577: PPUSH
13578: PPUSH
13579: PPUSH
13580: PPUSH
13581: PPUSH
13582: PPUSH
13583: PPUSH
13584: PPUSH
13585: PPUSH
13586: PPUSH
// result := false ;
13587: LD_ADDR_VAR 0 8
13591: PUSH
13592: LD_INT 0
13594: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13595: LD_VAR 0 5
13599: NOT
13600: IFTRUE 13609
13602: PUSH
13603: LD_VAR 0 1
13607: NOT
13608: OR
13609: IFTRUE 13618
13611: PUSH
13612: LD_VAR 0 2
13616: NOT
13617: OR
13618: IFTRUE 13627
13620: PUSH
13621: LD_VAR 0 3
13625: NOT
13626: OR
13627: IFFALSE 13631
// exit ;
13629: GO 14457
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13631: LD_ADDR_VAR 0 14
13635: PUSH
13636: LD_VAR 0 1
13640: PPUSH
13641: LD_VAR 0 2
13645: PPUSH
13646: LD_VAR 0 3
13650: PPUSH
13651: LD_VAR 0 4
13655: PPUSH
13656: LD_VAR 0 5
13660: PUSH
13661: LD_INT 1
13663: ARRAY
13664: PPUSH
13665: CALL_OW 248
13669: PPUSH
13670: LD_INT 0
13672: PPUSH
13673: CALL 15738 0 6
13677: ST_TO_ADDR
// if not hexes then
13678: LD_VAR 0 14
13682: NOT
13683: IFFALSE 13687
// exit ;
13685: GO 14457
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13687: LD_ADDR_VAR 0 17
13691: PUSH
13692: LD_VAR 0 5
13696: PPUSH
13697: LD_INT 22
13699: PUSH
13700: LD_VAR 0 13
13704: PPUSH
13705: CALL_OW 255
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: PUSH
13714: LD_INT 2
13716: PUSH
13717: LD_INT 30
13719: PUSH
13720: LD_INT 0
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PUSH
13727: LD_INT 30
13729: PUSH
13730: LD_INT 1
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: LIST
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PPUSH
13746: CALL_OW 72
13750: ST_TO_ADDR
// for i = 1 to hexes do
13751: LD_ADDR_VAR 0 9
13755: PUSH
13756: DOUBLE
13757: LD_INT 1
13759: DEC
13760: ST_TO_ADDR
13761: LD_VAR 0 14
13765: PUSH
13766: FOR_TO
13767: IFFALSE 14455
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13769: LD_ADDR_VAR 0 13
13773: PUSH
13774: LD_VAR 0 14
13778: PUSH
13779: LD_VAR 0 9
13783: ARRAY
13784: PUSH
13785: LD_INT 1
13787: ARRAY
13788: PPUSH
13789: LD_VAR 0 14
13793: PUSH
13794: LD_VAR 0 9
13798: ARRAY
13799: PUSH
13800: LD_INT 2
13802: ARRAY
13803: PPUSH
13804: CALL_OW 428
13808: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13809: LD_VAR 0 14
13813: PUSH
13814: LD_VAR 0 9
13818: ARRAY
13819: PUSH
13820: LD_INT 1
13822: ARRAY
13823: PPUSH
13824: LD_VAR 0 14
13828: PUSH
13829: LD_VAR 0 9
13833: ARRAY
13834: PUSH
13835: LD_INT 2
13837: ARRAY
13838: PPUSH
13839: CALL_OW 351
13843: IFTRUE 13882
13845: PUSH
13846: LD_VAR 0 14
13850: PUSH
13851: LD_VAR 0 9
13855: ARRAY
13856: PUSH
13857: LD_INT 1
13859: ARRAY
13860: PPUSH
13861: LD_VAR 0 14
13865: PUSH
13866: LD_VAR 0 9
13870: ARRAY
13871: PUSH
13872: LD_INT 2
13874: ARRAY
13875: PPUSH
13876: CALL_OW 488
13880: NOT
13881: OR
13882: IFTRUE 13899
13884: PUSH
13885: LD_VAR 0 13
13889: PPUSH
13890: CALL_OW 247
13894: PUSH
13895: LD_INT 3
13897: EQUAL
13898: OR
13899: IFFALSE 13905
// exit ;
13901: POP
13902: POP
13903: GO 14457
// if not tmp then
13905: LD_VAR 0 13
13909: NOT
13910: IFFALSE 13914
// continue ;
13912: GO 13766
// result := true ;
13914: LD_ADDR_VAR 0 8
13918: PUSH
13919: LD_INT 1
13921: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13922: LD_VAR 0 6
13926: IFFALSE 13943
13928: PUSH
13929: LD_VAR 0 13
13933: PPUSH
13934: CALL_OW 247
13938: PUSH
13939: LD_INT 2
13941: EQUAL
13942: AND
13943: IFFALSE 13960
13945: PUSH
13946: LD_VAR 0 13
13950: PPUSH
13951: CALL_OW 263
13955: PUSH
13956: LD_INT 1
13958: EQUAL
13959: AND
13960: IFFALSE 14124
// begin if IsDrivenBy ( tmp ) then
13962: LD_VAR 0 13
13966: PPUSH
13967: CALL_OW 311
13971: IFFALSE 13975
// continue ;
13973: GO 13766
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13975: LD_VAR 0 6
13979: PPUSH
13980: LD_INT 3
13982: PUSH
13983: LD_INT 60
13985: PUSH
13986: EMPTY
13987: LIST
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 3
13995: PUSH
13996: LD_INT 55
13998: PUSH
13999: EMPTY
14000: LIST
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PPUSH
14010: CALL_OW 72
14014: IFFALSE 14122
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14016: LD_ADDR_VAR 0 18
14020: PUSH
14021: LD_VAR 0 6
14025: PPUSH
14026: LD_INT 3
14028: PUSH
14029: LD_INT 60
14031: PUSH
14032: EMPTY
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 3
14041: PUSH
14042: LD_INT 55
14044: PUSH
14045: EMPTY
14046: LIST
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: PPUSH
14056: CALL_OW 72
14060: PUSH
14061: LD_INT 1
14063: ARRAY
14064: ST_TO_ADDR
// if IsInUnit ( driver ) then
14065: LD_VAR 0 18
14069: PPUSH
14070: CALL_OW 310
14074: IFFALSE 14085
// ComExit ( driver ) ;
14076: LD_VAR 0 18
14080: PPUSH
14081: CALL 39738 0 1
// AddComEnterUnit ( driver , tmp ) ;
14085: LD_VAR 0 18
14089: PPUSH
14090: LD_VAR 0 13
14094: PPUSH
14095: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14099: LD_VAR 0 18
14103: PPUSH
14104: LD_VAR 0 7
14108: PPUSH
14109: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14113: LD_VAR 0 18
14117: PPUSH
14118: CALL_OW 181
// end ; continue ;
14122: GO 13766
// end ; if not cleaners or not tmp in cleaners then
14124: LD_VAR 0 6
14128: NOT
14129: IFTRUE 14144
14131: PUSH
14132: LD_VAR 0 13
14136: PUSH
14137: LD_VAR 0 6
14141: IN
14142: NOT
14143: OR
14144: IFFALSE 14453
// begin if dep then
14146: LD_VAR 0 17
14150: IFFALSE 14286
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14152: LD_ADDR_VAR 0 16
14156: PUSH
14157: LD_VAR 0 17
14161: PUSH
14162: LD_INT 1
14164: ARRAY
14165: PPUSH
14166: CALL_OW 250
14170: PPUSH
14171: LD_VAR 0 17
14175: PUSH
14176: LD_INT 1
14178: ARRAY
14179: PPUSH
14180: CALL_OW 254
14184: PPUSH
14185: LD_INT 5
14187: PPUSH
14188: CALL_OW 272
14192: PUSH
14193: LD_VAR 0 17
14197: PUSH
14198: LD_INT 1
14200: ARRAY
14201: PPUSH
14202: CALL_OW 251
14206: PPUSH
14207: LD_VAR 0 17
14211: PUSH
14212: LD_INT 1
14214: ARRAY
14215: PPUSH
14216: CALL_OW 254
14220: PPUSH
14221: LD_INT 5
14223: PPUSH
14224: CALL_OW 273
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14233: LD_VAR 0 16
14237: PUSH
14238: LD_INT 1
14240: ARRAY
14241: PPUSH
14242: LD_VAR 0 16
14246: PUSH
14247: LD_INT 2
14249: ARRAY
14250: PPUSH
14251: CALL_OW 488
14255: IFFALSE 14286
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14257: LD_VAR 0 13
14261: PPUSH
14262: LD_VAR 0 16
14266: PUSH
14267: LD_INT 1
14269: ARRAY
14270: PPUSH
14271: LD_VAR 0 16
14275: PUSH
14276: LD_INT 2
14278: ARRAY
14279: PPUSH
14280: CALL_OW 111
// continue ;
14284: GO 13766
// end ; end ; r := GetDir ( tmp ) ;
14286: LD_ADDR_VAR 0 15
14290: PUSH
14291: LD_VAR 0 13
14295: PPUSH
14296: CALL_OW 254
14300: ST_TO_ADDR
// if r = 5 then
14301: LD_VAR 0 15
14305: PUSH
14306: LD_INT 5
14308: EQUAL
14309: IFFALSE 14319
// r := 0 ;
14311: LD_ADDR_VAR 0 15
14315: PUSH
14316: LD_INT 0
14318: ST_TO_ADDR
// for j = r to 5 do
14319: LD_ADDR_VAR 0 10
14323: PUSH
14324: DOUBLE
14325: LD_VAR 0 15
14329: DEC
14330: ST_TO_ADDR
14331: LD_INT 5
14333: PUSH
14334: FOR_TO
14335: IFFALSE 14451
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14337: LD_ADDR_VAR 0 11
14341: PUSH
14342: LD_VAR 0 13
14346: PPUSH
14347: CALL_OW 250
14351: PPUSH
14352: LD_VAR 0 10
14356: PPUSH
14357: LD_INT 2
14359: PPUSH
14360: CALL_OW 272
14364: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14365: LD_ADDR_VAR 0 12
14369: PUSH
14370: LD_VAR 0 13
14374: PPUSH
14375: CALL_OW 251
14379: PPUSH
14380: LD_VAR 0 10
14384: PPUSH
14385: LD_INT 2
14387: PPUSH
14388: CALL_OW 273
14392: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14393: LD_VAR 0 11
14397: PPUSH
14398: LD_VAR 0 12
14402: PPUSH
14403: CALL_OW 488
14407: IFFALSE 14426
14409: PUSH
14410: LD_VAR 0 11
14414: PPUSH
14415: LD_VAR 0 12
14419: PPUSH
14420: CALL_OW 428
14424: NOT
14425: AND
14426: IFFALSE 14449
// begin ComMoveXY ( tmp , _x , _y ) ;
14428: LD_VAR 0 13
14432: PPUSH
14433: LD_VAR 0 11
14437: PPUSH
14438: LD_VAR 0 12
14442: PPUSH
14443: CALL_OW 111
// break ;
14447: GO 14451
// end ; end ;
14449: GO 14334
14451: POP
14452: POP
// end ; end ;
14453: GO 13766
14455: POP
14456: POP
// end ;
14457: LD_VAR 0 8
14461: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14462: LD_INT 0
14464: PPUSH
// result := true ;
14465: LD_ADDR_VAR 0 3
14469: PUSH
14470: LD_INT 1
14472: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14473: LD_VAR 0 2
14477: PUSH
14478: LD_INT 24
14480: DOUBLE
14481: EQUAL
14482: IFTRUE 14492
14484: LD_INT 33
14486: DOUBLE
14487: EQUAL
14488: IFTRUE 14492
14490: GO 14517
14492: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14493: LD_ADDR_VAR 0 3
14497: PUSH
14498: LD_INT 32
14500: PPUSH
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL_OW 321
14510: PUSH
14511: LD_INT 2
14513: EQUAL
14514: ST_TO_ADDR
14515: GO 14833
14517: LD_INT 20
14519: DOUBLE
14520: EQUAL
14521: IFTRUE 14525
14523: GO 14550
14525: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14526: LD_ADDR_VAR 0 3
14530: PUSH
14531: LD_INT 6
14533: PPUSH
14534: LD_VAR 0 1
14538: PPUSH
14539: CALL_OW 321
14543: PUSH
14544: LD_INT 2
14546: EQUAL
14547: ST_TO_ADDR
14548: GO 14833
14550: LD_INT 22
14552: DOUBLE
14553: EQUAL
14554: IFTRUE 14564
14556: LD_INT 36
14558: DOUBLE
14559: EQUAL
14560: IFTRUE 14564
14562: GO 14589
14564: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14565: LD_ADDR_VAR 0 3
14569: PUSH
14570: LD_INT 15
14572: PPUSH
14573: LD_VAR 0 1
14577: PPUSH
14578: CALL_OW 321
14582: PUSH
14583: LD_INT 2
14585: EQUAL
14586: ST_TO_ADDR
14587: GO 14833
14589: LD_INT 30
14591: DOUBLE
14592: EQUAL
14593: IFTRUE 14597
14595: GO 14622
14597: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14598: LD_ADDR_VAR 0 3
14602: PUSH
14603: LD_INT 20
14605: PPUSH
14606: LD_VAR 0 1
14610: PPUSH
14611: CALL_OW 321
14615: PUSH
14616: LD_INT 2
14618: EQUAL
14619: ST_TO_ADDR
14620: GO 14833
14622: LD_INT 28
14624: DOUBLE
14625: EQUAL
14626: IFTRUE 14636
14628: LD_INT 21
14630: DOUBLE
14631: EQUAL
14632: IFTRUE 14636
14634: GO 14661
14636: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14637: LD_ADDR_VAR 0 3
14641: PUSH
14642: LD_INT 21
14644: PPUSH
14645: LD_VAR 0 1
14649: PPUSH
14650: CALL_OW 321
14654: PUSH
14655: LD_INT 2
14657: EQUAL
14658: ST_TO_ADDR
14659: GO 14833
14661: LD_INT 16
14663: DOUBLE
14664: EQUAL
14665: IFTRUE 14669
14667: GO 14694
14669: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14670: LD_ADDR_VAR 0 3
14674: PUSH
14675: LD_INT 84
14677: PPUSH
14678: LD_VAR 0 1
14682: PPUSH
14683: CALL_OW 321
14687: PUSH
14688: LD_INT 2
14690: EQUAL
14691: ST_TO_ADDR
14692: GO 14833
14694: LD_INT 19
14696: DOUBLE
14697: EQUAL
14698: IFTRUE 14708
14700: LD_INT 23
14702: DOUBLE
14703: EQUAL
14704: IFTRUE 14708
14706: GO 14733
14708: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14709: LD_ADDR_VAR 0 3
14713: PUSH
14714: LD_INT 83
14716: PPUSH
14717: LD_VAR 0 1
14721: PPUSH
14722: CALL_OW 321
14726: PUSH
14727: LD_INT 2
14729: EQUAL
14730: ST_TO_ADDR
14731: GO 14833
14733: LD_INT 17
14735: DOUBLE
14736: EQUAL
14737: IFTRUE 14741
14739: GO 14766
14741: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14742: LD_ADDR_VAR 0 3
14746: PUSH
14747: LD_INT 39
14749: PPUSH
14750: LD_VAR 0 1
14754: PPUSH
14755: CALL_OW 321
14759: PUSH
14760: LD_INT 2
14762: EQUAL
14763: ST_TO_ADDR
14764: GO 14833
14766: LD_INT 18
14768: DOUBLE
14769: EQUAL
14770: IFTRUE 14774
14772: GO 14799
14774: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14775: LD_ADDR_VAR 0 3
14779: PUSH
14780: LD_INT 40
14782: PPUSH
14783: LD_VAR 0 1
14787: PPUSH
14788: CALL_OW 321
14792: PUSH
14793: LD_INT 2
14795: EQUAL
14796: ST_TO_ADDR
14797: GO 14833
14799: LD_INT 27
14801: DOUBLE
14802: EQUAL
14803: IFTRUE 14807
14805: GO 14832
14807: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14808: LD_ADDR_VAR 0 3
14812: PUSH
14813: LD_INT 35
14815: PPUSH
14816: LD_VAR 0 1
14820: PPUSH
14821: CALL_OW 321
14825: PUSH
14826: LD_INT 2
14828: EQUAL
14829: ST_TO_ADDR
14830: GO 14833
14832: POP
// end ;
14833: LD_VAR 0 3
14837: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14838: LD_INT 0
14840: PPUSH
14841: PPUSH
14842: PPUSH
14843: PPUSH
14844: PPUSH
14845: PPUSH
14846: PPUSH
14847: PPUSH
14848: PPUSH
14849: PPUSH
14850: PPUSH
// result := false ;
14851: LD_ADDR_VAR 0 6
14855: PUSH
14856: LD_INT 0
14858: ST_TO_ADDR
// if btype = b_depot then
14859: LD_VAR 0 2
14863: PUSH
14864: LD_INT 0
14866: EQUAL
14867: IFFALSE 14879
// begin result := true ;
14869: LD_ADDR_VAR 0 6
14873: PUSH
14874: LD_INT 1
14876: ST_TO_ADDR
// exit ;
14877: GO 15733
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14879: LD_VAR 0 1
14883: NOT
14884: IFTRUE 14909
14886: PUSH
14887: LD_VAR 0 1
14891: PPUSH
14892: CALL_OW 266
14896: PUSH
14897: LD_INT 0
14899: PUSH
14900: LD_INT 1
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: IN
14907: NOT
14908: OR
14909: IFTRUE 14918
14911: PUSH
14912: LD_VAR 0 2
14916: NOT
14917: OR
14918: IFTRUE 14954
14920: PUSH
14921: LD_VAR 0 5
14925: PUSH
14926: LD_INT 0
14928: PUSH
14929: LD_INT 1
14931: PUSH
14932: LD_INT 2
14934: PUSH
14935: LD_INT 3
14937: PUSH
14938: LD_INT 4
14940: PUSH
14941: LD_INT 5
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: IN
14952: NOT
14953: OR
14954: IFTRUE 14973
14956: PUSH
14957: LD_VAR 0 3
14961: PPUSH
14962: LD_VAR 0 4
14966: PPUSH
14967: CALL_OW 488
14971: NOT
14972: OR
14973: IFFALSE 14977
// exit ;
14975: GO 15733
// side := GetSide ( depot ) ;
14977: LD_ADDR_VAR 0 9
14981: PUSH
14982: LD_VAR 0 1
14986: PPUSH
14987: CALL_OW 255
14991: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14992: LD_VAR 0 9
14996: PPUSH
14997: LD_VAR 0 2
15001: PPUSH
15002: CALL 14462 0 2
15006: NOT
15007: IFFALSE 15011
// exit ;
15009: GO 15733
// pom := GetBase ( depot ) ;
15011: LD_ADDR_VAR 0 10
15015: PUSH
15016: LD_VAR 0 1
15020: PPUSH
15021: CALL_OW 274
15025: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15026: LD_ADDR_VAR 0 11
15030: PUSH
15031: LD_VAR 0 2
15035: PPUSH
15036: LD_VAR 0 1
15040: PPUSH
15041: CALL_OW 248
15045: PPUSH
15046: CALL_OW 450
15050: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15051: LD_VAR 0 10
15055: PPUSH
15056: LD_INT 1
15058: PPUSH
15059: CALL_OW 275
15063: PUSH
15064: LD_VAR 0 11
15068: PUSH
15069: LD_INT 1
15071: ARRAY
15072: GREATEREQUAL
15073: IFFALSE 15099
15075: PUSH
15076: LD_VAR 0 10
15080: PPUSH
15081: LD_INT 2
15083: PPUSH
15084: CALL_OW 275
15088: PUSH
15089: LD_VAR 0 11
15093: PUSH
15094: LD_INT 2
15096: ARRAY
15097: GREATEREQUAL
15098: AND
15099: IFFALSE 15125
15101: PUSH
15102: LD_VAR 0 10
15106: PPUSH
15107: LD_INT 3
15109: PPUSH
15110: CALL_OW 275
15114: PUSH
15115: LD_VAR 0 11
15119: PUSH
15120: LD_INT 3
15122: ARRAY
15123: GREATEREQUAL
15124: AND
15125: NOT
15126: IFFALSE 15130
// exit ;
15128: GO 15733
// if GetBType ( depot ) = b_depot then
15130: LD_VAR 0 1
15134: PPUSH
15135: CALL_OW 266
15139: PUSH
15140: LD_INT 0
15142: EQUAL
15143: IFFALSE 15155
// dist := 28 else
15145: LD_ADDR_VAR 0 14
15149: PUSH
15150: LD_INT 28
15152: ST_TO_ADDR
15153: GO 15163
// dist := 36 ;
15155: LD_ADDR_VAR 0 14
15159: PUSH
15160: LD_INT 36
15162: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15163: LD_VAR 0 1
15167: PPUSH
15168: LD_VAR 0 3
15172: PPUSH
15173: LD_VAR 0 4
15177: PPUSH
15178: CALL_OW 297
15182: PUSH
15183: LD_VAR 0 14
15187: GREATER
15188: IFFALSE 15192
// exit ;
15190: GO 15733
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15192: LD_ADDR_VAR 0 12
15196: PUSH
15197: LD_VAR 0 2
15201: PPUSH
15202: LD_VAR 0 3
15206: PPUSH
15207: LD_VAR 0 4
15211: PPUSH
15212: LD_VAR 0 5
15216: PPUSH
15217: LD_VAR 0 1
15221: PPUSH
15222: CALL_OW 248
15226: PPUSH
15227: LD_INT 0
15229: PPUSH
15230: CALL 15738 0 6
15234: ST_TO_ADDR
// if not hexes then
15235: LD_VAR 0 12
15239: NOT
15240: IFFALSE 15244
// exit ;
15242: GO 15733
// hex := GetHexInfo ( x , y ) ;
15244: LD_ADDR_VAR 0 15
15248: PUSH
15249: LD_VAR 0 3
15253: PPUSH
15254: LD_VAR 0 4
15258: PPUSH
15259: CALL_OW 546
15263: ST_TO_ADDR
// if hex [ 1 ] then
15264: LD_VAR 0 15
15268: PUSH
15269: LD_INT 1
15271: ARRAY
15272: IFFALSE 15276
// exit ;
15274: GO 15733
// height := hex [ 2 ] ;
15276: LD_ADDR_VAR 0 13
15280: PUSH
15281: LD_VAR 0 15
15285: PUSH
15286: LD_INT 2
15288: ARRAY
15289: ST_TO_ADDR
// for i = 1 to hexes do
15290: LD_ADDR_VAR 0 7
15294: PUSH
15295: DOUBLE
15296: LD_INT 1
15298: DEC
15299: ST_TO_ADDR
15300: LD_VAR 0 12
15304: PUSH
15305: FOR_TO
15306: IFFALSE 15650
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15308: LD_VAR 0 12
15312: PUSH
15313: LD_VAR 0 7
15317: ARRAY
15318: PUSH
15319: LD_INT 1
15321: ARRAY
15322: PPUSH
15323: LD_VAR 0 12
15327: PUSH
15328: LD_VAR 0 7
15332: ARRAY
15333: PUSH
15334: LD_INT 2
15336: ARRAY
15337: PPUSH
15338: CALL_OW 488
15342: NOT
15343: IFTRUE 15385
15345: PUSH
15346: LD_VAR 0 12
15350: PUSH
15351: LD_VAR 0 7
15355: ARRAY
15356: PUSH
15357: LD_INT 1
15359: ARRAY
15360: PPUSH
15361: LD_VAR 0 12
15365: PUSH
15366: LD_VAR 0 7
15370: ARRAY
15371: PUSH
15372: LD_INT 2
15374: ARRAY
15375: PPUSH
15376: CALL_OW 428
15380: PUSH
15381: LD_INT 0
15383: GREATER
15384: OR
15385: IFTRUE 15423
15387: PUSH
15388: LD_VAR 0 12
15392: PUSH
15393: LD_VAR 0 7
15397: ARRAY
15398: PUSH
15399: LD_INT 1
15401: ARRAY
15402: PPUSH
15403: LD_VAR 0 12
15407: PUSH
15408: LD_VAR 0 7
15412: ARRAY
15413: PUSH
15414: LD_INT 2
15416: ARRAY
15417: PPUSH
15418: CALL_OW 351
15422: OR
15423: IFFALSE 15429
// exit ;
15425: POP
15426: POP
15427: GO 15733
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15429: LD_ADDR_VAR 0 8
15433: PUSH
15434: LD_VAR 0 12
15438: PUSH
15439: LD_VAR 0 7
15443: ARRAY
15444: PUSH
15445: LD_INT 1
15447: ARRAY
15448: PPUSH
15449: LD_VAR 0 12
15453: PUSH
15454: LD_VAR 0 7
15458: ARRAY
15459: PUSH
15460: LD_INT 2
15462: ARRAY
15463: PPUSH
15464: CALL_OW 546
15468: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15469: LD_VAR 0 8
15473: PUSH
15474: LD_INT 1
15476: ARRAY
15477: IFTRUE 15499
15479: PUSH
15480: LD_VAR 0 8
15484: PUSH
15485: LD_INT 2
15487: ARRAY
15488: PUSH
15489: LD_VAR 0 13
15493: PUSH
15494: LD_INT 2
15496: PLUS
15497: GREATER
15498: OR
15499: IFTRUE 15521
15501: PUSH
15502: LD_VAR 0 8
15506: PUSH
15507: LD_INT 2
15509: ARRAY
15510: PUSH
15511: LD_VAR 0 13
15515: PUSH
15516: LD_INT 2
15518: MINUS
15519: LESS
15520: OR
15521: IFTRUE 15589
15523: PUSH
15524: LD_VAR 0 8
15528: PUSH
15529: LD_INT 3
15531: ARRAY
15532: PUSH
15533: LD_INT 0
15535: PUSH
15536: LD_INT 8
15538: PUSH
15539: LD_INT 9
15541: PUSH
15542: LD_INT 10
15544: PUSH
15545: LD_INT 11
15547: PUSH
15548: LD_INT 12
15550: PUSH
15551: LD_INT 13
15553: PUSH
15554: LD_INT 16
15556: PUSH
15557: LD_INT 17
15559: PUSH
15560: LD_INT 18
15562: PUSH
15563: LD_INT 19
15565: PUSH
15566: LD_INT 20
15568: PUSH
15569: LD_INT 21
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: IN
15587: NOT
15588: OR
15589: IFTRUE 15602
15591: PUSH
15592: LD_VAR 0 8
15596: PUSH
15597: LD_INT 5
15599: ARRAY
15600: NOT
15601: OR
15602: IFTRUE 15642
15604: PUSH
15605: LD_VAR 0 8
15609: PUSH
15610: LD_INT 6
15612: ARRAY
15613: PUSH
15614: LD_INT 1
15616: PUSH
15617: LD_INT 2
15619: PUSH
15620: LD_INT 7
15622: PUSH
15623: LD_INT 9
15625: PUSH
15626: LD_INT 10
15628: PUSH
15629: LD_INT 11
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: IN
15640: NOT
15641: OR
15642: IFFALSE 15648
// exit ;
15644: POP
15645: POP
15646: GO 15733
// end ;
15648: GO 15305
15650: POP
15651: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15652: LD_VAR 0 9
15656: PPUSH
15657: LD_VAR 0 3
15661: PPUSH
15662: LD_VAR 0 4
15666: PPUSH
15667: LD_INT 20
15669: PPUSH
15670: CALL 7552 0 4
15674: PUSH
15675: LD_INT 4
15677: ARRAY
15678: IFFALSE 15682
// exit ;
15680: GO 15733
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15682: LD_VAR 0 2
15686: PUSH
15687: LD_INT 29
15689: PUSH
15690: LD_INT 30
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: IN
15697: IFFALSE 15721
15699: PUSH
15700: LD_VAR 0 3
15704: PPUSH
15705: LD_VAR 0 4
15709: PPUSH
15710: LD_VAR 0 9
15714: PPUSH
15715: CALL_OW 440
15719: NOT
15720: AND
15721: IFFALSE 15725
// exit ;
15723: GO 15733
// result := true ;
15725: LD_ADDR_VAR 0 6
15729: PUSH
15730: LD_INT 1
15732: ST_TO_ADDR
// end ;
15733: LD_VAR 0 6
15737: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15738: LD_INT 0
15740: PPUSH
15741: PPUSH
15742: PPUSH
15743: PPUSH
15744: PPUSH
15745: PPUSH
15746: PPUSH
15747: PPUSH
15748: PPUSH
15749: PPUSH
15750: PPUSH
15751: PPUSH
15752: PPUSH
15753: PPUSH
15754: PPUSH
15755: PPUSH
15756: PPUSH
15757: PPUSH
15758: PPUSH
15759: PPUSH
15760: PPUSH
15761: PPUSH
15762: PPUSH
15763: PPUSH
15764: PPUSH
15765: PPUSH
15766: PPUSH
15767: PPUSH
15768: PPUSH
15769: PPUSH
15770: PPUSH
15771: PPUSH
15772: PPUSH
15773: PPUSH
15774: PPUSH
15775: PPUSH
15776: PPUSH
15777: PPUSH
15778: PPUSH
15779: PPUSH
15780: PPUSH
15781: PPUSH
15782: PPUSH
15783: PPUSH
15784: PPUSH
15785: PPUSH
15786: PPUSH
15787: PPUSH
15788: PPUSH
15789: PPUSH
15790: PPUSH
15791: PPUSH
15792: PPUSH
15793: PPUSH
15794: PPUSH
15795: PPUSH
15796: PPUSH
15797: PPUSH
// result = [ ] ;
15798: LD_ADDR_VAR 0 7
15802: PUSH
15803: EMPTY
15804: ST_TO_ADDR
// temp_list = [ ] ;
15805: LD_ADDR_VAR 0 9
15809: PUSH
15810: EMPTY
15811: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15812: LD_VAR 0 4
15816: PUSH
15817: LD_INT 0
15819: PUSH
15820: LD_INT 1
15822: PUSH
15823: LD_INT 2
15825: PUSH
15826: LD_INT 3
15828: PUSH
15829: LD_INT 4
15831: PUSH
15832: LD_INT 5
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: IN
15843: NOT
15844: IFTRUE 15887
15846: PUSH
15847: LD_VAR 0 1
15851: PUSH
15852: LD_INT 0
15854: PUSH
15855: LD_INT 1
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: IN
15862: IFFALSE 15886
15864: PUSH
15865: LD_VAR 0 5
15869: PUSH
15870: LD_INT 1
15872: PUSH
15873: LD_INT 2
15875: PUSH
15876: LD_INT 3
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: LIST
15883: IN
15884: NOT
15885: AND
15886: OR
15887: IFFALSE 15891
// exit ;
15889: GO 34290
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15891: LD_VAR 0 1
15895: PUSH
15896: LD_INT 6
15898: PUSH
15899: LD_INT 7
15901: PUSH
15902: LD_INT 8
15904: PUSH
15905: LD_INT 13
15907: PUSH
15908: LD_INT 12
15910: PUSH
15911: LD_INT 15
15913: PUSH
15914: LD_INT 11
15916: PUSH
15917: LD_INT 14
15919: PUSH
15920: LD_INT 10
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: IN
15934: IFFALSE 15944
// btype = b_lab ;
15936: LD_ADDR_VAR 0 1
15940: PUSH
15941: LD_INT 6
15943: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15944: LD_VAR 0 6
15948: PUSH
15949: LD_INT 0
15951: PUSH
15952: LD_INT 1
15954: PUSH
15955: LD_INT 2
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: LIST
15962: IN
15963: NOT
15964: IFTRUE 16032
15966: PUSH
15967: LD_VAR 0 1
15971: PUSH
15972: LD_INT 0
15974: PUSH
15975: LD_INT 1
15977: PUSH
15978: LD_INT 2
15980: PUSH
15981: LD_INT 3
15983: PUSH
15984: LD_INT 6
15986: PUSH
15987: LD_INT 36
15989: PUSH
15990: LD_INT 4
15992: PUSH
15993: LD_INT 5
15995: PUSH
15996: LD_INT 31
15998: PUSH
15999: LD_INT 32
16001: PUSH
16002: LD_INT 33
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: IN
16018: NOT
16019: IFFALSE 16031
16021: PUSH
16022: LD_VAR 0 6
16026: PUSH
16027: LD_INT 1
16029: EQUAL
16030: AND
16031: OR
16032: IFTRUE 16064
16034: PUSH
16035: LD_VAR 0 1
16039: PUSH
16040: LD_INT 2
16042: PUSH
16043: LD_INT 3
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: IN
16050: NOT
16051: IFFALSE 16063
16053: PUSH
16054: LD_VAR 0 6
16058: PUSH
16059: LD_INT 2
16061: EQUAL
16062: AND
16063: OR
16064: IFFALSE 16074
// mode = 0 ;
16066: LD_ADDR_VAR 0 6
16070: PUSH
16071: LD_INT 0
16073: ST_TO_ADDR
// case mode of 0 :
16074: LD_VAR 0 6
16078: PUSH
16079: LD_INT 0
16081: DOUBLE
16082: EQUAL
16083: IFTRUE 16087
16085: GO 27540
16087: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16088: LD_ADDR_VAR 0 11
16092: PUSH
16093: LD_INT 0
16095: PUSH
16096: LD_INT 0
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 0
16105: PUSH
16106: LD_INT 1
16108: NEG
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: LD_INT 1
16116: PUSH
16117: LD_INT 0
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PUSH
16124: LD_INT 1
16126: PUSH
16127: LD_INT 1
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 0
16136: PUSH
16137: LD_INT 1
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 1
16146: NEG
16147: PUSH
16148: LD_INT 0
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: LD_INT 1
16157: NEG
16158: PUSH
16159: LD_INT 1
16161: NEG
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 1
16169: NEG
16170: PUSH
16171: LD_INT 2
16173: NEG
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 0
16181: PUSH
16182: LD_INT 2
16184: NEG
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 1
16192: PUSH
16193: LD_INT 1
16195: NEG
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 1
16203: PUSH
16204: LD_INT 2
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 0
16213: PUSH
16214: LD_INT 2
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 1
16223: NEG
16224: PUSH
16225: LD_INT 1
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: LD_INT 3
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 0
16244: PUSH
16245: LD_INT 3
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 1
16254: NEG
16255: PUSH
16256: LD_INT 2
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16281: LD_ADDR_VAR 0 12
16285: PUSH
16286: LD_INT 0
16288: PUSH
16289: LD_INT 0
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 0
16298: PUSH
16299: LD_INT 1
16301: NEG
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 1
16309: PUSH
16310: LD_INT 0
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 1
16319: PUSH
16320: LD_INT 1
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: LD_INT 0
16329: PUSH
16330: LD_INT 1
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 1
16339: NEG
16340: PUSH
16341: LD_INT 0
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 1
16350: NEG
16351: PUSH
16352: LD_INT 1
16354: NEG
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 1
16362: PUSH
16363: LD_INT 1
16365: NEG
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: PUSH
16371: LD_INT 2
16373: PUSH
16374: LD_INT 0
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PUSH
16381: LD_INT 2
16383: PUSH
16384: LD_INT 1
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: LD_INT 1
16393: NEG
16394: PUSH
16395: LD_INT 1
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PUSH
16402: LD_INT 2
16404: NEG
16405: PUSH
16406: LD_INT 0
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 2
16415: NEG
16416: PUSH
16417: LD_INT 1
16419: NEG
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 2
16427: NEG
16428: PUSH
16429: LD_INT 1
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 3
16438: NEG
16439: PUSH
16440: LD_INT 0
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 3
16449: NEG
16450: PUSH
16451: LD_INT 1
16453: NEG
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16477: LD_ADDR_VAR 0 13
16481: PUSH
16482: LD_INT 0
16484: PUSH
16485: LD_INT 0
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 0
16494: PUSH
16495: LD_INT 1
16497: NEG
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 1
16505: PUSH
16506: LD_INT 0
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 1
16515: PUSH
16516: LD_INT 1
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 0
16525: PUSH
16526: LD_INT 1
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 1
16535: NEG
16536: PUSH
16537: LD_INT 0
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 1
16546: NEG
16547: PUSH
16548: LD_INT 1
16550: NEG
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: LD_INT 1
16558: NEG
16559: PUSH
16560: LD_INT 2
16562: NEG
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: LD_INT 2
16570: PUSH
16571: LD_INT 1
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: LD_INT 2
16580: PUSH
16581: LD_INT 2
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 1
16590: PUSH
16591: LD_INT 2
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 2
16600: NEG
16601: PUSH
16602: LD_INT 1
16604: NEG
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 2
16612: NEG
16613: PUSH
16614: LD_INT 2
16616: NEG
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 2
16624: NEG
16625: PUSH
16626: LD_INT 3
16628: NEG
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 3
16636: NEG
16637: PUSH
16638: LD_INT 2
16640: NEG
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 3
16648: NEG
16649: PUSH
16650: LD_INT 3
16652: NEG
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16676: LD_ADDR_VAR 0 14
16680: PUSH
16681: LD_INT 0
16683: PUSH
16684: LD_INT 0
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 0
16693: PUSH
16694: LD_INT 1
16696: NEG
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 1
16704: PUSH
16705: LD_INT 0
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: LD_INT 1
16714: PUSH
16715: LD_INT 1
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 0
16724: PUSH
16725: LD_INT 1
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 1
16734: NEG
16735: PUSH
16736: LD_INT 0
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PUSH
16743: LD_INT 1
16745: NEG
16746: PUSH
16747: LD_INT 1
16749: NEG
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 1
16757: NEG
16758: PUSH
16759: LD_INT 2
16761: NEG
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 0
16769: PUSH
16770: LD_INT 2
16772: NEG
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 1
16780: PUSH
16781: LD_INT 1
16783: NEG
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: LD_INT 1
16791: PUSH
16792: LD_INT 2
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: LD_INT 0
16801: PUSH
16802: LD_INT 2
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 1
16811: NEG
16812: PUSH
16813: LD_INT 1
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 1
16822: NEG
16823: PUSH
16824: LD_INT 3
16826: NEG
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: LD_INT 0
16834: PUSH
16835: LD_INT 3
16837: NEG
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 1
16845: PUSH
16846: LD_INT 2
16848: NEG
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16872: LD_ADDR_VAR 0 15
16876: PUSH
16877: LD_INT 0
16879: PUSH
16880: LD_INT 0
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 0
16889: PUSH
16890: LD_INT 1
16892: NEG
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 1
16900: PUSH
16901: LD_INT 0
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 1
16910: PUSH
16911: LD_INT 1
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: LD_INT 0
16920: PUSH
16921: LD_INT 1
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 1
16930: NEG
16931: PUSH
16932: LD_INT 0
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 1
16941: NEG
16942: PUSH
16943: LD_INT 1
16945: NEG
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 1
16953: PUSH
16954: LD_INT 1
16956: NEG
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 2
16964: PUSH
16965: LD_INT 0
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 2
16974: PUSH
16975: LD_INT 1
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 1
16984: NEG
16985: PUSH
16986: LD_INT 1
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 2
16995: NEG
16996: PUSH
16997: LD_INT 0
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 2
17006: NEG
17007: PUSH
17008: LD_INT 1
17010: NEG
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 2
17018: PUSH
17019: LD_INT 1
17021: NEG
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 3
17029: PUSH
17030: LD_INT 0
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 3
17039: PUSH
17040: LD_INT 1
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17065: LD_ADDR_VAR 0 16
17069: PUSH
17070: LD_INT 0
17072: PUSH
17073: LD_INT 0
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 0
17082: PUSH
17083: LD_INT 1
17085: NEG
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: LD_INT 1
17093: PUSH
17094: LD_INT 0
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 1
17103: PUSH
17104: LD_INT 1
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 0
17113: PUSH
17114: LD_INT 1
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 1
17123: NEG
17124: PUSH
17125: LD_INT 0
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 1
17134: NEG
17135: PUSH
17136: LD_INT 1
17138: NEG
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 1
17146: NEG
17147: PUSH
17148: LD_INT 2
17150: NEG
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 2
17158: PUSH
17159: LD_INT 1
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PUSH
17166: LD_INT 2
17168: PUSH
17169: LD_INT 2
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: PUSH
17176: LD_INT 1
17178: PUSH
17179: LD_INT 2
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 2
17188: NEG
17189: PUSH
17190: LD_INT 1
17192: NEG
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 2
17200: NEG
17201: PUSH
17202: LD_INT 2
17204: NEG
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 3
17212: PUSH
17213: LD_INT 2
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 3
17222: PUSH
17223: LD_INT 3
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 2
17232: PUSH
17233: LD_INT 3
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17258: LD_ADDR_VAR 0 17
17262: PUSH
17263: LD_INT 0
17265: PUSH
17266: LD_INT 0
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 0
17275: PUSH
17276: LD_INT 1
17278: NEG
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 1
17286: PUSH
17287: LD_INT 0
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 1
17296: PUSH
17297: LD_INT 1
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 0
17306: PUSH
17307: LD_INT 1
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 1
17316: NEG
17317: PUSH
17318: LD_INT 0
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 1
17327: NEG
17328: PUSH
17329: LD_INT 1
17331: NEG
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 1
17339: NEG
17340: PUSH
17341: LD_INT 2
17343: NEG
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 0
17351: PUSH
17352: LD_INT 2
17354: NEG
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 1
17362: PUSH
17363: LD_INT 1
17365: NEG
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 2
17373: PUSH
17374: LD_INT 0
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 2
17383: PUSH
17384: LD_INT 1
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 2
17393: PUSH
17394: LD_INT 2
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 1
17403: PUSH
17404: LD_INT 2
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: LD_INT 0
17413: PUSH
17414: LD_INT 2
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 1
17423: NEG
17424: PUSH
17425: LD_INT 1
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 2
17434: NEG
17435: PUSH
17436: LD_INT 0
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 2
17445: NEG
17446: PUSH
17447: LD_INT 1
17449: NEG
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: LD_INT 2
17457: NEG
17458: PUSH
17459: LD_INT 2
17461: NEG
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17488: LD_ADDR_VAR 0 18
17492: PUSH
17493: LD_INT 0
17495: PUSH
17496: LD_INT 0
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 0
17505: PUSH
17506: LD_INT 1
17508: NEG
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 1
17516: PUSH
17517: LD_INT 0
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 1
17526: PUSH
17527: LD_INT 1
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 0
17536: PUSH
17537: LD_INT 1
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 1
17546: NEG
17547: PUSH
17548: LD_INT 0
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 1
17557: NEG
17558: PUSH
17559: LD_INT 1
17561: NEG
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 1
17569: NEG
17570: PUSH
17571: LD_INT 2
17573: NEG
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 0
17581: PUSH
17582: LD_INT 2
17584: NEG
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 1
17592: PUSH
17593: LD_INT 1
17595: NEG
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 2
17603: PUSH
17604: LD_INT 0
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 2
17613: PUSH
17614: LD_INT 1
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 2
17623: PUSH
17624: LD_INT 2
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: LD_INT 1
17633: PUSH
17634: LD_INT 2
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: LD_INT 0
17643: PUSH
17644: LD_INT 2
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 1
17653: NEG
17654: PUSH
17655: LD_INT 1
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 2
17664: NEG
17665: PUSH
17666: LD_INT 0
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PUSH
17673: LD_INT 2
17675: NEG
17676: PUSH
17677: LD_INT 1
17679: NEG
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 2
17687: NEG
17688: PUSH
17689: LD_INT 2
17691: NEG
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17718: LD_ADDR_VAR 0 19
17722: PUSH
17723: LD_INT 0
17725: PUSH
17726: LD_INT 0
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 0
17735: PUSH
17736: LD_INT 1
17738: NEG
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 1
17746: PUSH
17747: LD_INT 0
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 1
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 0
17766: PUSH
17767: LD_INT 1
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 1
17776: NEG
17777: PUSH
17778: LD_INT 0
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 1
17787: NEG
17788: PUSH
17789: LD_INT 1
17791: NEG
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 1
17799: NEG
17800: PUSH
17801: LD_INT 2
17803: NEG
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 0
17811: PUSH
17812: LD_INT 2
17814: NEG
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 1
17822: PUSH
17823: LD_INT 1
17825: NEG
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 2
17833: PUSH
17834: LD_INT 0
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 2
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 2
17853: PUSH
17854: LD_INT 2
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 1
17863: PUSH
17864: LD_INT 2
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 0
17873: PUSH
17874: LD_INT 2
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 1
17883: NEG
17884: PUSH
17885: LD_INT 1
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: LD_INT 2
17894: NEG
17895: PUSH
17896: LD_INT 0
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 2
17905: NEG
17906: PUSH
17907: LD_INT 1
17909: NEG
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 2
17917: NEG
17918: PUSH
17919: LD_INT 2
17921: NEG
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17948: LD_ADDR_VAR 0 20
17952: PUSH
17953: LD_INT 0
17955: PUSH
17956: LD_INT 0
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 0
17965: PUSH
17966: LD_INT 1
17968: NEG
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 1
17976: PUSH
17977: LD_INT 0
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 1
17986: PUSH
17987: LD_INT 1
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 0
17996: PUSH
17997: LD_INT 1
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 1
18006: NEG
18007: PUSH
18008: LD_INT 0
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: LD_INT 1
18017: NEG
18018: PUSH
18019: LD_INT 1
18021: NEG
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 1
18029: NEG
18030: PUSH
18031: LD_INT 2
18033: NEG
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 0
18041: PUSH
18042: LD_INT 2
18044: NEG
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 1
18052: PUSH
18053: LD_INT 1
18055: NEG
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 2
18063: PUSH
18064: LD_INT 0
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 2
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 2
18083: PUSH
18084: LD_INT 2
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 1
18093: PUSH
18094: LD_INT 2
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 0
18103: PUSH
18104: LD_INT 2
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 1
18113: NEG
18114: PUSH
18115: LD_INT 1
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 2
18124: NEG
18125: PUSH
18126: LD_INT 0
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 2
18135: NEG
18136: PUSH
18137: LD_INT 1
18139: NEG
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 2
18147: NEG
18148: PUSH
18149: LD_INT 2
18151: NEG
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18178: LD_ADDR_VAR 0 21
18182: PUSH
18183: LD_INT 0
18185: PUSH
18186: LD_INT 0
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 0
18195: PUSH
18196: LD_INT 1
18198: NEG
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: LD_INT 0
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 1
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 0
18226: PUSH
18227: LD_INT 1
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 1
18236: NEG
18237: PUSH
18238: LD_INT 0
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 1
18247: NEG
18248: PUSH
18249: LD_INT 1
18251: NEG
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 1
18259: NEG
18260: PUSH
18261: LD_INT 2
18263: NEG
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: LD_INT 0
18271: PUSH
18272: LD_INT 2
18274: NEG
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 1
18282: PUSH
18283: LD_INT 1
18285: NEG
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 2
18293: PUSH
18294: LD_INT 0
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 2
18303: PUSH
18304: LD_INT 1
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 2
18313: PUSH
18314: LD_INT 2
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: LD_INT 2
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 0
18333: PUSH
18334: LD_INT 2
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 1
18343: NEG
18344: PUSH
18345: LD_INT 1
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: LD_INT 2
18354: NEG
18355: PUSH
18356: LD_INT 0
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 2
18365: NEG
18366: PUSH
18367: LD_INT 1
18369: NEG
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 2
18377: NEG
18378: PUSH
18379: LD_INT 2
18381: NEG
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18408: LD_ADDR_VAR 0 22
18412: PUSH
18413: LD_INT 0
18415: PUSH
18416: LD_INT 0
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: LD_INT 1
18428: NEG
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 1
18436: PUSH
18437: LD_INT 0
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: LD_INT 1
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 0
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 1
18466: NEG
18467: PUSH
18468: LD_INT 0
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 1
18477: NEG
18478: PUSH
18479: LD_INT 1
18481: NEG
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 1
18489: NEG
18490: PUSH
18491: LD_INT 2
18493: NEG
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 0
18501: PUSH
18502: LD_INT 2
18504: NEG
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 1
18512: PUSH
18513: LD_INT 1
18515: NEG
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 2
18523: PUSH
18524: LD_INT 0
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 2
18533: PUSH
18534: LD_INT 1
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 2
18543: PUSH
18544: LD_INT 2
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 1
18553: PUSH
18554: LD_INT 2
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 0
18563: PUSH
18564: LD_INT 2
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 1
18573: NEG
18574: PUSH
18575: LD_INT 1
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 2
18584: NEG
18585: PUSH
18586: LD_INT 0
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 2
18595: NEG
18596: PUSH
18597: LD_INT 1
18599: NEG
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 2
18607: NEG
18608: PUSH
18609: LD_INT 2
18611: NEG
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18638: LD_ADDR_VAR 0 23
18642: PUSH
18643: LD_INT 0
18645: PUSH
18646: LD_INT 0
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 0
18655: PUSH
18656: LD_INT 1
18658: NEG
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 1
18666: PUSH
18667: LD_INT 0
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 1
18676: PUSH
18677: LD_INT 1
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 0
18686: PUSH
18687: LD_INT 1
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 1
18696: NEG
18697: PUSH
18698: LD_INT 0
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 1
18707: NEG
18708: PUSH
18709: LD_INT 1
18711: NEG
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 1
18719: NEG
18720: PUSH
18721: LD_INT 2
18723: NEG
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 0
18731: PUSH
18732: LD_INT 2
18734: NEG
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 1
18742: PUSH
18743: LD_INT 1
18745: NEG
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 2
18753: PUSH
18754: LD_INT 0
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 2
18763: PUSH
18764: LD_INT 1
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 2
18773: PUSH
18774: LD_INT 2
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 1
18783: PUSH
18784: LD_INT 2
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 0
18793: PUSH
18794: LD_INT 2
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 1
18803: NEG
18804: PUSH
18805: LD_INT 1
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: LD_INT 2
18814: NEG
18815: PUSH
18816: LD_INT 0
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 2
18825: NEG
18826: PUSH
18827: LD_INT 1
18829: NEG
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 2
18837: NEG
18838: PUSH
18839: LD_INT 2
18841: NEG
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 2
18849: NEG
18850: PUSH
18851: LD_INT 3
18853: NEG
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 1
18861: NEG
18862: PUSH
18863: LD_INT 3
18865: NEG
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 1
18873: PUSH
18874: LD_INT 2
18876: NEG
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 2
18884: PUSH
18885: LD_INT 1
18887: NEG
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18918: LD_ADDR_VAR 0 24
18922: PUSH
18923: LD_INT 0
18925: PUSH
18926: LD_INT 0
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 0
18935: PUSH
18936: LD_INT 1
18938: NEG
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: LD_INT 0
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 1
18956: PUSH
18957: LD_INT 1
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 0
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: NEG
18977: PUSH
18978: LD_INT 0
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 1
18987: NEG
18988: PUSH
18989: LD_INT 1
18991: NEG
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 1
18999: NEG
19000: PUSH
19001: LD_INT 2
19003: NEG
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 0
19011: PUSH
19012: LD_INT 2
19014: NEG
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 1
19022: PUSH
19023: LD_INT 1
19025: NEG
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 2
19033: PUSH
19034: LD_INT 0
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 2
19043: PUSH
19044: LD_INT 1
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 2
19053: PUSH
19054: LD_INT 2
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 1
19063: PUSH
19064: LD_INT 2
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 0
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 1
19083: NEG
19084: PUSH
19085: LD_INT 1
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 2
19094: NEG
19095: PUSH
19096: LD_INT 0
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 2
19105: NEG
19106: PUSH
19107: LD_INT 1
19109: NEG
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 2
19117: NEG
19118: PUSH
19119: LD_INT 2
19121: NEG
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 1
19129: PUSH
19130: LD_INT 2
19132: NEG
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 2
19140: PUSH
19141: LD_INT 1
19143: NEG
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 3
19151: PUSH
19152: LD_INT 1
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 3
19161: PUSH
19162: LD_INT 2
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19194: LD_ADDR_VAR 0 25
19198: PUSH
19199: LD_INT 0
19201: PUSH
19202: LD_INT 0
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 0
19211: PUSH
19212: LD_INT 1
19214: NEG
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 1
19222: PUSH
19223: LD_INT 0
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 1
19232: PUSH
19233: LD_INT 1
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 0
19242: PUSH
19243: LD_INT 1
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 1
19252: NEG
19253: PUSH
19254: LD_INT 0
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 1
19263: NEG
19264: PUSH
19265: LD_INT 1
19267: NEG
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 1
19275: NEG
19276: PUSH
19277: LD_INT 2
19279: NEG
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 0
19287: PUSH
19288: LD_INT 2
19290: NEG
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 1
19298: PUSH
19299: LD_INT 1
19301: NEG
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 2
19309: PUSH
19310: LD_INT 0
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 2
19319: PUSH
19320: LD_INT 1
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 2
19329: PUSH
19330: LD_INT 2
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 1
19339: PUSH
19340: LD_INT 2
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 0
19349: PUSH
19350: LD_INT 2
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 1
19359: NEG
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 2
19370: NEG
19371: PUSH
19372: LD_INT 0
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 2
19381: NEG
19382: PUSH
19383: LD_INT 1
19385: NEG
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 2
19393: NEG
19394: PUSH
19395: LD_INT 2
19397: NEG
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 3
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 3
19415: PUSH
19416: LD_INT 2
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 2
19425: PUSH
19426: LD_INT 3
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 1
19435: PUSH
19436: LD_INT 3
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19468: LD_ADDR_VAR 0 26
19472: PUSH
19473: LD_INT 0
19475: PUSH
19476: LD_INT 0
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 0
19485: PUSH
19486: LD_INT 1
19488: NEG
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 1
19496: PUSH
19497: LD_INT 0
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 1
19506: PUSH
19507: LD_INT 1
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 0
19516: PUSH
19517: LD_INT 1
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 1
19526: NEG
19527: PUSH
19528: LD_INT 0
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 1
19537: NEG
19538: PUSH
19539: LD_INT 1
19541: NEG
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 1
19549: NEG
19550: PUSH
19551: LD_INT 2
19553: NEG
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 0
19561: PUSH
19562: LD_INT 2
19564: NEG
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: LD_INT 1
19575: NEG
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 2
19583: PUSH
19584: LD_INT 0
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 2
19593: PUSH
19594: LD_INT 1
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 2
19603: PUSH
19604: LD_INT 2
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 1
19613: PUSH
19614: LD_INT 2
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 0
19623: PUSH
19624: LD_INT 2
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 1
19633: NEG
19634: PUSH
19635: LD_INT 1
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 2
19644: NEG
19645: PUSH
19646: LD_INT 0
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 2
19655: NEG
19656: PUSH
19657: LD_INT 1
19659: NEG
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 2
19667: NEG
19668: PUSH
19669: LD_INT 2
19671: NEG
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 2
19679: PUSH
19680: LD_INT 3
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 1
19689: PUSH
19690: LD_INT 3
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 1
19699: NEG
19700: PUSH
19701: LD_INT 2
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 2
19710: NEG
19711: PUSH
19712: LD_INT 1
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19744: LD_ADDR_VAR 0 27
19748: PUSH
19749: LD_INT 0
19751: PUSH
19752: LD_INT 0
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 0
19761: PUSH
19762: LD_INT 1
19764: NEG
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 1
19772: PUSH
19773: LD_INT 0
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 1
19782: PUSH
19783: LD_INT 1
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 0
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 1
19802: NEG
19803: PUSH
19804: LD_INT 0
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 1
19813: NEG
19814: PUSH
19815: LD_INT 1
19817: NEG
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 1
19825: NEG
19826: PUSH
19827: LD_INT 2
19829: NEG
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 0
19837: PUSH
19838: LD_INT 2
19840: NEG
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 1
19848: PUSH
19849: LD_INT 1
19851: NEG
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 2
19859: PUSH
19860: LD_INT 0
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 2
19869: PUSH
19870: LD_INT 1
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 2
19879: PUSH
19880: LD_INT 2
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: LD_INT 2
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 0
19899: PUSH
19900: LD_INT 2
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 1
19909: NEG
19910: PUSH
19911: LD_INT 1
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 2
19920: NEG
19921: PUSH
19922: LD_INT 0
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 2
19931: NEG
19932: PUSH
19933: LD_INT 1
19935: NEG
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 2
19943: NEG
19944: PUSH
19945: LD_INT 2
19947: NEG
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 1
19955: NEG
19956: PUSH
19957: LD_INT 2
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 2
19966: NEG
19967: PUSH
19968: LD_INT 1
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 3
19977: NEG
19978: PUSH
19979: LD_INT 1
19981: NEG
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 3
19989: NEG
19990: PUSH
19991: LD_INT 2
19993: NEG
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20024: LD_ADDR_VAR 0 28
20028: PUSH
20029: LD_INT 0
20031: PUSH
20032: LD_INT 0
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 0
20041: PUSH
20042: LD_INT 1
20044: NEG
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 1
20052: PUSH
20053: LD_INT 0
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 1
20062: PUSH
20063: LD_INT 1
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 0
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 1
20082: NEG
20083: PUSH
20084: LD_INT 0
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 1
20093: NEG
20094: PUSH
20095: LD_INT 1
20097: NEG
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 1
20105: NEG
20106: PUSH
20107: LD_INT 2
20109: NEG
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 0
20117: PUSH
20118: LD_INT 2
20120: NEG
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 1
20128: PUSH
20129: LD_INT 1
20131: NEG
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 2
20139: PUSH
20140: LD_INT 0
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 2
20149: PUSH
20150: LD_INT 1
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 2
20159: PUSH
20160: LD_INT 2
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 1
20169: PUSH
20170: LD_INT 2
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: LD_INT 2
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 1
20189: NEG
20190: PUSH
20191: LD_INT 1
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 2
20200: NEG
20201: PUSH
20202: LD_INT 0
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 2
20211: NEG
20212: PUSH
20213: LD_INT 1
20215: NEG
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 2
20223: NEG
20224: PUSH
20225: LD_INT 2
20227: NEG
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 2
20235: NEG
20236: PUSH
20237: LD_INT 3
20239: NEG
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 1
20247: NEG
20248: PUSH
20249: LD_INT 3
20251: NEG
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 3
20259: NEG
20260: PUSH
20261: LD_INT 1
20263: NEG
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 3
20271: NEG
20272: PUSH
20273: LD_INT 2
20275: NEG
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20306: LD_ADDR_VAR 0 29
20310: PUSH
20311: LD_INT 0
20313: PUSH
20314: LD_INT 0
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 0
20323: PUSH
20324: LD_INT 1
20326: NEG
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 1
20334: PUSH
20335: LD_INT 0
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 1
20344: PUSH
20345: LD_INT 1
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 0
20354: PUSH
20355: LD_INT 1
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 1
20364: NEG
20365: PUSH
20366: LD_INT 0
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 1
20375: NEG
20376: PUSH
20377: LD_INT 1
20379: NEG
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 1
20387: NEG
20388: PUSH
20389: LD_INT 2
20391: NEG
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 0
20399: PUSH
20400: LD_INT 2
20402: NEG
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 1
20410: PUSH
20411: LD_INT 1
20413: NEG
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 2
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 2
20431: PUSH
20432: LD_INT 1
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 1
20441: PUSH
20442: LD_INT 2
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 0
20451: PUSH
20452: LD_INT 2
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 1
20461: NEG
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 2
20472: NEG
20473: PUSH
20474: LD_INT 1
20476: NEG
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 2
20484: NEG
20485: PUSH
20486: LD_INT 2
20488: NEG
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 2
20496: NEG
20497: PUSH
20498: LD_INT 3
20500: NEG
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 2
20508: PUSH
20509: LD_INT 1
20511: NEG
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 3
20519: PUSH
20520: LD_INT 1
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 1
20529: PUSH
20530: LD_INT 3
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 1
20539: NEG
20540: PUSH
20541: LD_INT 2
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 3
20550: NEG
20551: PUSH
20552: LD_INT 2
20554: NEG
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20585: LD_ADDR_VAR 0 30
20589: PUSH
20590: LD_INT 0
20592: PUSH
20593: LD_INT 0
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 0
20602: PUSH
20603: LD_INT 1
20605: NEG
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 1
20613: PUSH
20614: LD_INT 0
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 1
20623: PUSH
20624: LD_INT 1
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 0
20633: PUSH
20634: LD_INT 1
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 1
20643: NEG
20644: PUSH
20645: LD_INT 0
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 1
20654: NEG
20655: PUSH
20656: LD_INT 1
20658: NEG
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 1
20666: NEG
20667: PUSH
20668: LD_INT 2
20670: NEG
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 0
20678: PUSH
20679: LD_INT 2
20681: NEG
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 1
20689: PUSH
20690: LD_INT 1
20692: NEG
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 2
20700: PUSH
20701: LD_INT 0
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 2
20710: PUSH
20711: LD_INT 1
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 2
20720: PUSH
20721: LD_INT 2
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 1
20730: PUSH
20731: LD_INT 2
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 1
20740: NEG
20741: PUSH
20742: LD_INT 1
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 2
20751: NEG
20752: PUSH
20753: LD_INT 0
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 2
20762: NEG
20763: PUSH
20764: LD_INT 1
20766: NEG
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 1
20774: NEG
20775: PUSH
20776: LD_INT 3
20778: NEG
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 1
20786: PUSH
20787: LD_INT 2
20789: NEG
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 3
20797: PUSH
20798: LD_INT 2
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 2
20807: PUSH
20808: LD_INT 3
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 2
20817: NEG
20818: PUSH
20819: LD_INT 1
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 3
20828: NEG
20829: PUSH
20830: LD_INT 1
20832: NEG
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20863: LD_ADDR_VAR 0 31
20867: PUSH
20868: LD_INT 0
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 0
20880: PUSH
20881: LD_INT 1
20883: NEG
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 1
20891: PUSH
20892: LD_INT 0
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 1
20901: PUSH
20902: LD_INT 1
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 0
20911: PUSH
20912: LD_INT 1
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: LD_INT 1
20921: NEG
20922: PUSH
20923: LD_INT 0
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 1
20932: NEG
20933: PUSH
20934: LD_INT 1
20936: NEG
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 1
20944: NEG
20945: PUSH
20946: LD_INT 2
20948: NEG
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 1
20956: PUSH
20957: LD_INT 1
20959: NEG
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 2
20967: PUSH
20968: LD_INT 0
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 2
20977: PUSH
20978: LD_INT 1
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 2
20987: PUSH
20988: LD_INT 2
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 1
20997: PUSH
20998: LD_INT 2
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 0
21007: PUSH
21008: LD_INT 2
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 1
21017: NEG
21018: PUSH
21019: LD_INT 1
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 2
21028: NEG
21029: PUSH
21030: LD_INT 1
21032: NEG
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 2
21040: NEG
21041: PUSH
21042: LD_INT 2
21044: NEG
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 2
21052: NEG
21053: PUSH
21054: LD_INT 3
21056: NEG
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 2
21064: PUSH
21065: LD_INT 1
21067: NEG
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 3
21075: PUSH
21076: LD_INT 1
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 1
21085: PUSH
21086: LD_INT 3
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 1
21095: NEG
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 3
21106: NEG
21107: PUSH
21108: LD_INT 2
21110: NEG
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21141: LD_ADDR_VAR 0 32
21145: PUSH
21146: LD_INT 0
21148: PUSH
21149: LD_INT 0
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 0
21158: PUSH
21159: LD_INT 1
21161: NEG
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 1
21169: PUSH
21170: LD_INT 0
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 1
21179: PUSH
21180: LD_INT 1
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 0
21189: PUSH
21190: LD_INT 1
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 1
21199: NEG
21200: PUSH
21201: LD_INT 0
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 1
21210: NEG
21211: PUSH
21212: LD_INT 1
21214: NEG
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 1
21222: NEG
21223: PUSH
21224: LD_INT 2
21226: NEG
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 0
21234: PUSH
21235: LD_INT 2
21237: NEG
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 1
21245: PUSH
21246: LD_INT 1
21248: NEG
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 2
21256: PUSH
21257: LD_INT 1
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 2
21266: PUSH
21267: LD_INT 2
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 1
21276: PUSH
21277: LD_INT 2
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 0
21286: PUSH
21287: LD_INT 2
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 1
21296: NEG
21297: PUSH
21298: LD_INT 1
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 2
21307: NEG
21308: PUSH
21309: LD_INT 0
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 2
21318: NEG
21319: PUSH
21320: LD_INT 1
21322: NEG
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 1
21330: NEG
21331: PUSH
21332: LD_INT 3
21334: NEG
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 1
21342: PUSH
21343: LD_INT 2
21345: NEG
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 3
21353: PUSH
21354: LD_INT 2
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 2
21363: PUSH
21364: LD_INT 3
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 2
21373: NEG
21374: PUSH
21375: LD_INT 1
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 3
21384: NEG
21385: PUSH
21386: LD_INT 1
21388: NEG
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21419: LD_ADDR_VAR 0 33
21423: PUSH
21424: LD_INT 0
21426: PUSH
21427: LD_INT 0
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 0
21436: PUSH
21437: LD_INT 1
21439: NEG
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 1
21447: PUSH
21448: LD_INT 0
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 1
21457: PUSH
21458: LD_INT 1
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 0
21467: PUSH
21468: LD_INT 1
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 1
21477: NEG
21478: PUSH
21479: LD_INT 0
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 1
21488: NEG
21489: PUSH
21490: LD_INT 1
21492: NEG
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 1
21500: NEG
21501: PUSH
21502: LD_INT 2
21504: NEG
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 1
21512: PUSH
21513: LD_INT 1
21515: NEG
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 2
21523: PUSH
21524: LD_INT 0
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 2
21533: PUSH
21534: LD_INT 1
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 1
21543: PUSH
21544: LD_INT 2
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 0
21553: PUSH
21554: LD_INT 2
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 1
21563: NEG
21564: PUSH
21565: LD_INT 1
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 2
21574: NEG
21575: PUSH
21576: LD_INT 0
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 2
21585: NEG
21586: PUSH
21587: LD_INT 1
21589: NEG
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PUSH
21595: LD_INT 2
21597: NEG
21598: PUSH
21599: LD_INT 2
21601: NEG
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 2
21609: NEG
21610: PUSH
21611: LD_INT 3
21613: NEG
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 2
21621: PUSH
21622: LD_INT 1
21624: NEG
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PUSH
21630: LD_INT 3
21632: PUSH
21633: LD_INT 1
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 1
21642: PUSH
21643: LD_INT 3
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 1
21652: NEG
21653: PUSH
21654: LD_INT 2
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 3
21663: NEG
21664: PUSH
21665: LD_INT 2
21667: NEG
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21698: LD_ADDR_VAR 0 34
21702: PUSH
21703: LD_INT 0
21705: PUSH
21706: LD_INT 0
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 0
21715: PUSH
21716: LD_INT 1
21718: NEG
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 1
21726: PUSH
21727: LD_INT 0
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: LD_INT 1
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 0
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 1
21756: NEG
21757: PUSH
21758: LD_INT 0
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 1
21767: NEG
21768: PUSH
21769: LD_INT 1
21771: NEG
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 1
21779: NEG
21780: PUSH
21781: LD_INT 2
21783: NEG
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 0
21791: PUSH
21792: LD_INT 2
21794: NEG
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 1
21802: PUSH
21803: LD_INT 1
21805: NEG
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 2
21813: PUSH
21814: LD_INT 1
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: LD_INT 2
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 1
21833: PUSH
21834: LD_INT 2
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 1
21843: NEG
21844: PUSH
21845: LD_INT 1
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 2
21854: NEG
21855: PUSH
21856: LD_INT 0
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 2
21865: NEG
21866: PUSH
21867: LD_INT 1
21869: NEG
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 2
21877: NEG
21878: PUSH
21879: LD_INT 2
21881: NEG
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 1
21889: NEG
21890: PUSH
21891: LD_INT 3
21893: NEG
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 1
21901: PUSH
21902: LD_INT 2
21904: NEG
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 3
21912: PUSH
21913: LD_INT 2
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 2
21922: PUSH
21923: LD_INT 3
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 2
21932: NEG
21933: PUSH
21934: LD_INT 1
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 3
21943: NEG
21944: PUSH
21945: LD_INT 1
21947: NEG
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21978: LD_ADDR_VAR 0 35
21982: PUSH
21983: LD_INT 0
21985: PUSH
21986: LD_INT 0
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 0
21995: PUSH
21996: LD_INT 1
21998: NEG
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 1
22006: PUSH
22007: LD_INT 0
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: LD_INT 1
22016: PUSH
22017: LD_INT 1
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 0
22026: PUSH
22027: LD_INT 1
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 1
22036: NEG
22037: PUSH
22038: LD_INT 0
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 1
22047: NEG
22048: PUSH
22049: LD_INT 1
22051: NEG
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 2
22059: PUSH
22060: LD_INT 1
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 2
22069: NEG
22070: PUSH
22071: LD_INT 1
22073: NEG
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22090: LD_ADDR_VAR 0 36
22094: PUSH
22095: LD_INT 0
22097: PUSH
22098: LD_INT 0
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 0
22107: PUSH
22108: LD_INT 1
22110: NEG
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 1
22118: PUSH
22119: LD_INT 0
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 1
22128: PUSH
22129: LD_INT 1
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 0
22138: PUSH
22139: LD_INT 1
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 1
22148: NEG
22149: PUSH
22150: LD_INT 0
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: LD_INT 1
22159: NEG
22160: PUSH
22161: LD_INT 1
22163: NEG
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 1
22171: NEG
22172: PUSH
22173: LD_INT 2
22175: NEG
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 1
22183: PUSH
22184: LD_INT 2
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22202: LD_ADDR_VAR 0 37
22206: PUSH
22207: LD_INT 0
22209: PUSH
22210: LD_INT 0
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 0
22219: PUSH
22220: LD_INT 1
22222: NEG
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 1
22230: PUSH
22231: LD_INT 0
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: LD_INT 1
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: LD_INT 1
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 1
22260: NEG
22261: PUSH
22262: LD_INT 0
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 1
22271: NEG
22272: PUSH
22273: LD_INT 1
22275: NEG
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 1
22283: PUSH
22284: LD_INT 1
22286: NEG
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 1
22294: NEG
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22314: LD_ADDR_VAR 0 38
22318: PUSH
22319: LD_INT 0
22321: PUSH
22322: LD_INT 0
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: LD_INT 1
22334: NEG
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 1
22342: PUSH
22343: LD_INT 0
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 1
22352: PUSH
22353: LD_INT 1
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 0
22362: PUSH
22363: LD_INT 1
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 1
22372: NEG
22373: PUSH
22374: LD_INT 0
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 1
22383: NEG
22384: PUSH
22385: LD_INT 1
22387: NEG
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 2
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 2
22405: NEG
22406: PUSH
22407: LD_INT 1
22409: NEG
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22426: LD_ADDR_VAR 0 39
22430: PUSH
22431: LD_INT 0
22433: PUSH
22434: LD_INT 0
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PUSH
22441: LD_INT 0
22443: PUSH
22444: LD_INT 1
22446: NEG
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 1
22454: PUSH
22455: LD_INT 0
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 1
22464: PUSH
22465: LD_INT 1
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 0
22474: PUSH
22475: LD_INT 1
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 1
22484: NEG
22485: PUSH
22486: LD_INT 0
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 1
22495: NEG
22496: PUSH
22497: LD_INT 1
22499: NEG
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 1
22507: NEG
22508: PUSH
22509: LD_INT 2
22511: NEG
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: LD_INT 2
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22538: LD_ADDR_VAR 0 40
22542: PUSH
22543: LD_INT 0
22545: PUSH
22546: LD_INT 0
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 0
22555: PUSH
22556: LD_INT 1
22558: NEG
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 1
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: LD_INT 1
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 0
22586: PUSH
22587: LD_INT 1
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 1
22596: NEG
22597: PUSH
22598: LD_INT 0
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 1
22607: NEG
22608: PUSH
22609: LD_INT 1
22611: NEG
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 1
22619: PUSH
22620: LD_INT 1
22622: NEG
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 1
22630: NEG
22631: PUSH
22632: LD_INT 1
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22650: LD_ADDR_VAR 0 41
22654: PUSH
22655: LD_INT 0
22657: PUSH
22658: LD_INT 0
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 0
22667: PUSH
22668: LD_INT 1
22670: NEG
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: LD_INT 0
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 1
22688: PUSH
22689: LD_INT 1
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 0
22698: PUSH
22699: LD_INT 1
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 1
22708: NEG
22709: PUSH
22710: LD_INT 0
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 1
22719: NEG
22720: PUSH
22721: LD_INT 1
22723: NEG
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 1
22731: NEG
22732: PUSH
22733: LD_INT 2
22735: NEG
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: LD_INT 1
22746: NEG
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 2
22754: PUSH
22755: LD_INT 0
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 2
22764: PUSH
22765: LD_INT 1
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 2
22774: PUSH
22775: LD_INT 2
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 1
22784: PUSH
22785: LD_INT 2
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 1
22794: NEG
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 2
22805: NEG
22806: PUSH
22807: LD_INT 0
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 2
22816: NEG
22817: PUSH
22818: LD_INT 1
22820: NEG
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 2
22828: NEG
22829: PUSH
22830: LD_INT 2
22832: NEG
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 2
22840: NEG
22841: PUSH
22842: LD_INT 3
22844: NEG
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 2
22852: PUSH
22853: LD_INT 1
22855: NEG
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 3
22863: PUSH
22864: LD_INT 0
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 3
22873: PUSH
22874: LD_INT 1
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 3
22883: PUSH
22884: LD_INT 2
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 3
22893: PUSH
22894: LD_INT 3
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 2
22903: PUSH
22904: LD_INT 3
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 2
22913: NEG
22914: PUSH
22915: LD_INT 1
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 3
22924: NEG
22925: PUSH
22926: LD_INT 0
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 3
22935: NEG
22936: PUSH
22937: LD_INT 1
22939: NEG
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 3
22947: NEG
22948: PUSH
22949: LD_INT 2
22951: NEG
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 3
22959: NEG
22960: PUSH
22961: LD_INT 3
22963: NEG
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23000: LD_ADDR_VAR 0 42
23004: PUSH
23005: LD_INT 0
23007: PUSH
23008: LD_INT 0
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 0
23017: PUSH
23018: LD_INT 1
23020: NEG
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 1
23028: PUSH
23029: LD_INT 0
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: LD_INT 1
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 0
23048: PUSH
23049: LD_INT 1
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 1
23058: NEG
23059: PUSH
23060: LD_INT 0
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 1
23069: NEG
23070: PUSH
23071: LD_INT 1
23073: NEG
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 1
23081: NEG
23082: PUSH
23083: LD_INT 2
23085: NEG
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 0
23093: PUSH
23094: LD_INT 2
23096: NEG
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 1
23104: PUSH
23105: LD_INT 1
23107: NEG
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 2
23115: PUSH
23116: LD_INT 1
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 2
23125: PUSH
23126: LD_INT 2
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 1
23135: PUSH
23136: LD_INT 2
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 0
23145: PUSH
23146: LD_INT 2
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 1
23155: NEG
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 2
23166: NEG
23167: PUSH
23168: LD_INT 1
23170: NEG
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 2
23178: NEG
23179: PUSH
23180: LD_INT 2
23182: NEG
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 2
23190: NEG
23191: PUSH
23192: LD_INT 3
23194: NEG
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 1
23202: NEG
23203: PUSH
23204: LD_INT 3
23206: NEG
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 0
23214: PUSH
23215: LD_INT 3
23217: NEG
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: LD_INT 2
23228: NEG
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 3
23236: PUSH
23237: LD_INT 2
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 3
23246: PUSH
23247: LD_INT 3
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 2
23256: PUSH
23257: LD_INT 3
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 1
23266: PUSH
23267: LD_INT 3
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 0
23276: PUSH
23277: LD_INT 3
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: LD_INT 2
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 3
23297: NEG
23298: PUSH
23299: LD_INT 2
23301: NEG
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 3
23309: NEG
23310: PUSH
23311: LD_INT 3
23313: NEG
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23350: LD_ADDR_VAR 0 43
23354: PUSH
23355: LD_INT 0
23357: PUSH
23358: LD_INT 0
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 0
23367: PUSH
23368: LD_INT 1
23370: NEG
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 1
23378: PUSH
23379: LD_INT 0
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 1
23388: PUSH
23389: LD_INT 1
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 0
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 1
23408: NEG
23409: PUSH
23410: LD_INT 0
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 1
23419: NEG
23420: PUSH
23421: LD_INT 1
23423: NEG
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 1
23431: NEG
23432: PUSH
23433: LD_INT 2
23435: NEG
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 0
23443: PUSH
23444: LD_INT 2
23446: NEG
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 1
23454: PUSH
23455: LD_INT 1
23457: NEG
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 2
23465: PUSH
23466: LD_INT 0
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 2
23475: PUSH
23476: LD_INT 1
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 1
23485: PUSH
23486: LD_INT 2
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 0
23495: PUSH
23496: LD_INT 2
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 1
23505: NEG
23506: PUSH
23507: LD_INT 1
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 2
23516: NEG
23517: PUSH
23518: LD_INT 0
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 2
23527: NEG
23528: PUSH
23529: LD_INT 1
23531: NEG
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 1
23539: NEG
23540: PUSH
23541: LD_INT 3
23543: NEG
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 0
23551: PUSH
23552: LD_INT 3
23554: NEG
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 1
23562: PUSH
23563: LD_INT 2
23565: NEG
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 2
23573: PUSH
23574: LD_INT 1
23576: NEG
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 3
23584: PUSH
23585: LD_INT 0
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 3
23594: PUSH
23595: LD_INT 1
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: LD_INT 3
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 0
23614: PUSH
23615: LD_INT 3
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 1
23624: NEG
23625: PUSH
23626: LD_INT 2
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 2
23635: NEG
23636: PUSH
23637: LD_INT 1
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 3
23646: NEG
23647: PUSH
23648: LD_INT 0
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 3
23657: NEG
23658: PUSH
23659: LD_INT 1
23661: NEG
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23698: LD_ADDR_VAR 0 44
23702: PUSH
23703: LD_INT 0
23705: PUSH
23706: LD_INT 0
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 0
23715: PUSH
23716: LD_INT 1
23718: NEG
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: LD_INT 0
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 1
23736: PUSH
23737: LD_INT 1
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 0
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 1
23756: NEG
23757: PUSH
23758: LD_INT 0
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 1
23767: NEG
23768: PUSH
23769: LD_INT 1
23771: NEG
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 1
23779: NEG
23780: PUSH
23781: LD_INT 2
23783: NEG
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 1
23791: PUSH
23792: LD_INT 1
23794: NEG
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 2
23802: PUSH
23803: LD_INT 0
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 2
23812: PUSH
23813: LD_INT 1
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 2
23822: PUSH
23823: LD_INT 2
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 1
23832: PUSH
23833: LD_INT 2
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 1
23842: NEG
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 2
23853: NEG
23854: PUSH
23855: LD_INT 0
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 2
23864: NEG
23865: PUSH
23866: LD_INT 1
23868: NEG
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 2
23876: NEG
23877: PUSH
23878: LD_INT 2
23880: NEG
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 2
23888: NEG
23889: PUSH
23890: LD_INT 3
23892: NEG
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 2
23900: PUSH
23901: LD_INT 1
23903: NEG
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 3
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 3
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 3
23931: PUSH
23932: LD_INT 2
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 3
23941: PUSH
23942: LD_INT 3
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 2
23951: PUSH
23952: LD_INT 3
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 2
23961: NEG
23962: PUSH
23963: LD_INT 1
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 3
23972: NEG
23973: PUSH
23974: LD_INT 0
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 3
23983: NEG
23984: PUSH
23985: LD_INT 1
23987: NEG
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 3
23995: NEG
23996: PUSH
23997: LD_INT 2
23999: NEG
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 3
24007: NEG
24008: PUSH
24009: LD_INT 3
24011: NEG
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24048: LD_ADDR_VAR 0 45
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: LD_INT 0
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 0
24065: PUSH
24066: LD_INT 1
24068: NEG
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 1
24076: PUSH
24077: LD_INT 0
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: LD_INT 1
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 0
24096: PUSH
24097: LD_INT 1
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 1
24106: NEG
24107: PUSH
24108: LD_INT 0
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 1
24117: NEG
24118: PUSH
24119: LD_INT 1
24121: NEG
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 1
24129: NEG
24130: PUSH
24131: LD_INT 2
24133: NEG
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 0
24141: PUSH
24142: LD_INT 2
24144: NEG
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 1
24152: PUSH
24153: LD_INT 1
24155: NEG
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 2
24163: PUSH
24164: LD_INT 1
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 2
24173: PUSH
24174: LD_INT 2
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 1
24183: PUSH
24184: LD_INT 2
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 0
24193: PUSH
24194: LD_INT 2
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: LD_INT 1
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 2
24214: NEG
24215: PUSH
24216: LD_INT 1
24218: NEG
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 2
24226: NEG
24227: PUSH
24228: LD_INT 2
24230: NEG
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 2
24238: NEG
24239: PUSH
24240: LD_INT 3
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 1
24250: NEG
24251: PUSH
24252: LD_INT 3
24254: NEG
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 0
24262: PUSH
24263: LD_INT 3
24265: NEG
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: LD_INT 2
24276: NEG
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 3
24284: PUSH
24285: LD_INT 2
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 3
24294: PUSH
24295: LD_INT 3
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 2
24304: PUSH
24305: LD_INT 3
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 1
24314: PUSH
24315: LD_INT 3
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 0
24324: PUSH
24325: LD_INT 3
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 1
24334: NEG
24335: PUSH
24336: LD_INT 2
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 3
24345: NEG
24346: PUSH
24347: LD_INT 2
24349: NEG
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 3
24357: NEG
24358: PUSH
24359: LD_INT 3
24361: NEG
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24398: LD_ADDR_VAR 0 46
24402: PUSH
24403: LD_INT 0
24405: PUSH
24406: LD_INT 0
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 0
24415: PUSH
24416: LD_INT 1
24418: NEG
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 1
24426: PUSH
24427: LD_INT 0
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 1
24436: PUSH
24437: LD_INT 1
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 0
24446: PUSH
24447: LD_INT 1
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 1
24456: NEG
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 1
24467: NEG
24468: PUSH
24469: LD_INT 1
24471: NEG
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 1
24479: NEG
24480: PUSH
24481: LD_INT 2
24483: NEG
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 0
24491: PUSH
24492: LD_INT 2
24494: NEG
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: LD_INT 1
24505: NEG
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 2
24513: PUSH
24514: LD_INT 0
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 2
24523: PUSH
24524: LD_INT 1
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 1
24533: PUSH
24534: LD_INT 2
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 0
24543: PUSH
24544: LD_INT 2
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 1
24553: NEG
24554: PUSH
24555: LD_INT 1
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 2
24564: NEG
24565: PUSH
24566: LD_INT 0
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 2
24575: NEG
24576: PUSH
24577: LD_INT 1
24579: NEG
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 1
24587: NEG
24588: PUSH
24589: LD_INT 3
24591: NEG
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 0
24599: PUSH
24600: LD_INT 3
24602: NEG
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 1
24610: PUSH
24611: LD_INT 2
24613: NEG
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 2
24621: PUSH
24622: LD_INT 1
24624: NEG
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 3
24632: PUSH
24633: LD_INT 0
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 3
24642: PUSH
24643: LD_INT 1
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 1
24652: PUSH
24653: LD_INT 3
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 0
24662: PUSH
24663: LD_INT 3
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 1
24672: NEG
24673: PUSH
24674: LD_INT 2
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 2
24683: NEG
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 3
24694: NEG
24695: PUSH
24696: LD_INT 0
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 3
24705: NEG
24706: PUSH
24707: LD_INT 1
24709: NEG
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24746: LD_ADDR_VAR 0 47
24750: PUSH
24751: LD_INT 0
24753: PUSH
24754: LD_INT 0
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 0
24763: PUSH
24764: LD_INT 1
24766: NEG
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 1
24774: PUSH
24775: LD_INT 0
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 1
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 0
24794: PUSH
24795: LD_INT 1
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 1
24804: NEG
24805: PUSH
24806: LD_INT 0
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 1
24815: NEG
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 1
24827: NEG
24828: PUSH
24829: LD_INT 2
24831: NEG
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 0
24839: PUSH
24840: LD_INT 2
24842: NEG
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 1
24850: PUSH
24851: LD_INT 1
24853: NEG
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 2
24861: NEG
24862: PUSH
24863: LD_INT 1
24865: NEG
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 2
24873: NEG
24874: PUSH
24875: LD_INT 2
24877: NEG
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24897: LD_ADDR_VAR 0 48
24901: PUSH
24902: LD_INT 0
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 0
24914: PUSH
24915: LD_INT 1
24917: NEG
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 1
24935: PUSH
24936: LD_INT 1
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 0
24945: PUSH
24946: LD_INT 1
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 1
24955: NEG
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: LD_INT 1
24970: NEG
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 1
24978: NEG
24979: PUSH
24980: LD_INT 2
24982: NEG
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 0
24990: PUSH
24991: LD_INT 2
24993: NEG
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 1
25001: PUSH
25002: LD_INT 1
25004: NEG
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 2
25012: PUSH
25013: LD_INT 0
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 2
25022: PUSH
25023: LD_INT 1
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25044: LD_ADDR_VAR 0 49
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 0
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: LD_INT 0
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 1
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: LD_INT 1
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 1
25102: NEG
25103: PUSH
25104: LD_INT 0
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 1
25113: NEG
25114: PUSH
25115: LD_INT 1
25117: NEG
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 1
25125: PUSH
25126: LD_INT 1
25128: NEG
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 2
25136: PUSH
25137: LD_INT 0
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 2
25146: PUSH
25147: LD_INT 1
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 2
25156: PUSH
25157: LD_INT 2
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 1
25166: PUSH
25167: LD_INT 2
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25188: LD_ADDR_VAR 0 50
25192: PUSH
25193: LD_INT 0
25195: PUSH
25196: LD_INT 0
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: LD_INT 1
25208: NEG
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 1
25216: PUSH
25217: LD_INT 0
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 1
25226: PUSH
25227: LD_INT 1
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 1
25246: NEG
25247: PUSH
25248: LD_INT 0
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 1
25257: NEG
25258: PUSH
25259: LD_INT 1
25261: NEG
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 2
25269: PUSH
25270: LD_INT 1
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: LD_INT 2
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: LD_INT 2
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: LD_INT 2
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 1
25309: NEG
25310: PUSH
25311: LD_INT 1
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25332: LD_ADDR_VAR 0 51
25336: PUSH
25337: LD_INT 0
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 0
25349: PUSH
25350: LD_INT 1
25352: NEG
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: LD_INT 0
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 1
25370: PUSH
25371: LD_INT 1
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: LD_INT 1
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 1
25390: NEG
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 1
25401: NEG
25402: PUSH
25403: LD_INT 1
25405: NEG
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 1
25413: PUSH
25414: LD_INT 2
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 0
25423: PUSH
25424: LD_INT 2
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 1
25433: NEG
25434: PUSH
25435: LD_INT 1
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 2
25444: NEG
25445: PUSH
25446: LD_INT 0
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 2
25455: NEG
25456: PUSH
25457: LD_INT 1
25459: NEG
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25479: LD_ADDR_VAR 0 52
25483: PUSH
25484: LD_INT 0
25486: PUSH
25487: LD_INT 0
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 0
25496: PUSH
25497: LD_INT 1
25499: NEG
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 1
25507: PUSH
25508: LD_INT 0
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 1
25517: PUSH
25518: LD_INT 1
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 0
25527: PUSH
25528: LD_INT 1
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 1
25537: NEG
25538: PUSH
25539: LD_INT 0
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 1
25548: NEG
25549: PUSH
25550: LD_INT 1
25552: NEG
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 1
25560: NEG
25561: PUSH
25562: LD_INT 2
25564: NEG
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 1
25572: NEG
25573: PUSH
25574: LD_INT 1
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 2
25583: NEG
25584: PUSH
25585: LD_INT 0
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 2
25594: NEG
25595: PUSH
25596: LD_INT 1
25598: NEG
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 2
25606: NEG
25607: PUSH
25608: LD_INT 2
25610: NEG
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25630: LD_ADDR_VAR 0 53
25634: PUSH
25635: LD_INT 0
25637: PUSH
25638: LD_INT 0
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 0
25647: PUSH
25648: LD_INT 1
25650: NEG
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 1
25658: PUSH
25659: LD_INT 0
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 0
25678: PUSH
25679: LD_INT 1
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 1
25688: NEG
25689: PUSH
25690: LD_INT 0
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 1
25699: NEG
25700: PUSH
25701: LD_INT 1
25703: NEG
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 1
25711: NEG
25712: PUSH
25713: LD_INT 2
25715: NEG
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: LD_INT 2
25726: NEG
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 1
25734: PUSH
25735: LD_INT 1
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 2
25745: PUSH
25746: LD_INT 0
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 2
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 2
25765: PUSH
25766: LD_INT 2
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: LD_INT 2
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 0
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 1
25795: NEG
25796: PUSH
25797: LD_INT 1
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 2
25806: NEG
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 2
25817: NEG
25818: PUSH
25819: LD_INT 1
25821: NEG
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 2
25829: NEG
25830: PUSH
25831: LD_INT 2
25833: NEG
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25860: LD_ADDR_VAR 0 54
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: LD_INT 0
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 0
25877: PUSH
25878: LD_INT 1
25880: NEG
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 1
25888: PUSH
25889: LD_INT 0
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 1
25898: PUSH
25899: LD_INT 1
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: LD_INT 1
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 1
25918: NEG
25919: PUSH
25920: LD_INT 0
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 1
25929: NEG
25930: PUSH
25931: LD_INT 1
25933: NEG
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 1
25941: NEG
25942: PUSH
25943: LD_INT 2
25945: NEG
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 0
25953: PUSH
25954: LD_INT 2
25956: NEG
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 1
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 2
25975: PUSH
25976: LD_INT 0
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 2
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 2
25995: PUSH
25996: LD_INT 2
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 1
26005: PUSH
26006: LD_INT 2
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 0
26015: PUSH
26016: LD_INT 2
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 1
26025: NEG
26026: PUSH
26027: LD_INT 1
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 2
26036: NEG
26037: PUSH
26038: LD_INT 0
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 2
26047: NEG
26048: PUSH
26049: LD_INT 1
26051: NEG
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 2
26059: NEG
26060: PUSH
26061: LD_INT 2
26063: NEG
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26090: LD_ADDR_VAR 0 55
26094: PUSH
26095: LD_INT 0
26097: PUSH
26098: LD_INT 0
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 0
26107: PUSH
26108: LD_INT 1
26110: NEG
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 1
26118: PUSH
26119: LD_INT 0
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: LD_INT 1
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 0
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 1
26148: NEG
26149: PUSH
26150: LD_INT 0
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 1
26159: NEG
26160: PUSH
26161: LD_INT 1
26163: NEG
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: NEG
26172: PUSH
26173: LD_INT 2
26175: NEG
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 0
26183: PUSH
26184: LD_INT 2
26186: NEG
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 1
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 2
26205: PUSH
26206: LD_INT 0
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 2
26215: PUSH
26216: LD_INT 1
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 2
26225: PUSH
26226: LD_INT 2
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 1
26235: PUSH
26236: LD_INT 2
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 0
26245: PUSH
26246: LD_INT 2
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 1
26255: NEG
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 2
26266: NEG
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 2
26277: NEG
26278: PUSH
26279: LD_INT 1
26281: NEG
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 2
26289: NEG
26290: PUSH
26291: LD_INT 2
26293: NEG
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26320: LD_ADDR_VAR 0 56
26324: PUSH
26325: LD_INT 0
26327: PUSH
26328: LD_INT 0
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 0
26337: PUSH
26338: LD_INT 1
26340: NEG
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 1
26348: PUSH
26349: LD_INT 0
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 1
26358: PUSH
26359: LD_INT 1
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 0
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 1
26378: NEG
26379: PUSH
26380: LD_INT 0
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 1
26389: NEG
26390: PUSH
26391: LD_INT 1
26393: NEG
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 1
26401: NEG
26402: PUSH
26403: LD_INT 2
26405: NEG
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 0
26413: PUSH
26414: LD_INT 2
26416: NEG
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 1
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 2
26435: PUSH
26436: LD_INT 0
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 2
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 2
26455: PUSH
26456: LD_INT 2
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 1
26465: PUSH
26466: LD_INT 2
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 0
26475: PUSH
26476: LD_INT 2
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 1
26485: NEG
26486: PUSH
26487: LD_INT 1
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 2
26496: NEG
26497: PUSH
26498: LD_INT 0
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 2
26507: NEG
26508: PUSH
26509: LD_INT 1
26511: NEG
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 2
26519: NEG
26520: PUSH
26521: LD_INT 2
26523: NEG
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26550: LD_ADDR_VAR 0 57
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: LD_INT 0
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 0
26567: PUSH
26568: LD_INT 1
26570: NEG
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: LD_INT 0
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 1
26588: PUSH
26589: LD_INT 1
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 0
26598: PUSH
26599: LD_INT 1
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 1
26608: NEG
26609: PUSH
26610: LD_INT 0
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 1
26619: NEG
26620: PUSH
26621: LD_INT 1
26623: NEG
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 1
26631: NEG
26632: PUSH
26633: LD_INT 2
26635: NEG
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 0
26643: PUSH
26644: LD_INT 2
26646: NEG
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 1
26654: PUSH
26655: LD_INT 1
26657: NEG
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 2
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 2
26675: PUSH
26676: LD_INT 1
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 2
26685: PUSH
26686: LD_INT 2
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: LD_INT 2
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 0
26705: PUSH
26706: LD_INT 2
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 1
26715: NEG
26716: PUSH
26717: LD_INT 1
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 2
26726: NEG
26727: PUSH
26728: LD_INT 0
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 2
26737: NEG
26738: PUSH
26739: LD_INT 1
26741: NEG
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 2
26749: NEG
26750: PUSH
26751: LD_INT 2
26753: NEG
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26780: LD_ADDR_VAR 0 58
26784: PUSH
26785: LD_INT 0
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 0
26797: PUSH
26798: LD_INT 1
26800: NEG
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 1
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: LD_INT 1
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 1
26838: NEG
26839: PUSH
26840: LD_INT 0
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 1
26849: NEG
26850: PUSH
26851: LD_INT 1
26853: NEG
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 1
26861: NEG
26862: PUSH
26863: LD_INT 2
26865: NEG
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 0
26873: PUSH
26874: LD_INT 2
26876: NEG
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 1
26884: PUSH
26885: LD_INT 1
26887: NEG
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 2
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: PUSH
26906: LD_INT 1
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: LD_INT 2
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: LD_INT 2
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 0
26935: PUSH
26936: LD_INT 2
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 1
26945: NEG
26946: PUSH
26947: LD_INT 1
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 2
26956: NEG
26957: PUSH
26958: LD_INT 0
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 2
26967: NEG
26968: PUSH
26969: LD_INT 1
26971: NEG
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 2
26979: NEG
26980: PUSH
26981: LD_INT 2
26983: NEG
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27010: LD_ADDR_VAR 0 59
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: LD_INT 0
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: LD_INT 1
27030: NEG
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: LD_INT 0
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 1
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: LD_INT 1
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 1
27068: NEG
27069: PUSH
27070: LD_INT 0
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: LD_INT 1
27083: NEG
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27098: LD_ADDR_VAR 0 60
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: LD_INT 1
27118: NEG
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 1
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 1
27136: PUSH
27137: LD_INT 1
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: LD_INT 1
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 1
27156: NEG
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 1
27167: NEG
27168: PUSH
27169: LD_INT 1
27171: NEG
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27186: LD_ADDR_VAR 0 61
27190: PUSH
27191: LD_INT 0
27193: PUSH
27194: LD_INT 0
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 0
27203: PUSH
27204: LD_INT 1
27206: NEG
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 1
27214: PUSH
27215: LD_INT 0
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: LD_INT 1
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: LD_INT 1
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: NEG
27245: PUSH
27246: LD_INT 0
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 1
27255: NEG
27256: PUSH
27257: LD_INT 1
27259: NEG
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27274: LD_ADDR_VAR 0 62
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: LD_INT 1
27294: NEG
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: PUSH
27303: LD_INT 0
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 0
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 1
27332: NEG
27333: PUSH
27334: LD_INT 0
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 1
27343: NEG
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27362: LD_ADDR_VAR 0 63
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: LD_INT 1
27382: NEG
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 1
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 1
27420: NEG
27421: PUSH
27422: LD_INT 0
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 1
27431: NEG
27432: PUSH
27433: LD_INT 1
27435: NEG
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27450: LD_ADDR_VAR 0 64
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 0
27467: PUSH
27468: LD_INT 1
27470: NEG
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 1
27478: PUSH
27479: LD_INT 0
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 0
27498: PUSH
27499: LD_INT 1
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: NEG
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: LD_INT 1
27523: NEG
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: ST_TO_ADDR
// end ; 1 :
27538: GO 33435
27540: LD_INT 1
27542: DOUBLE
27543: EQUAL
27544: IFTRUE 27548
27546: GO 30171
27548: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27549: LD_ADDR_VAR 0 11
27553: PUSH
27554: LD_INT 1
27556: NEG
27557: PUSH
27558: LD_INT 3
27560: NEG
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: LD_INT 3
27571: NEG
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: LD_INT 2
27582: NEG
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: LIST
27592: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27593: LD_ADDR_VAR 0 12
27597: PUSH
27598: LD_INT 2
27600: PUSH
27601: LD_INT 1
27603: NEG
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 3
27611: PUSH
27612: LD_INT 0
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 3
27621: PUSH
27622: LD_INT 1
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27634: LD_ADDR_VAR 0 13
27638: PUSH
27639: LD_INT 3
27641: PUSH
27642: LD_INT 2
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 3
27651: PUSH
27652: LD_INT 3
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 2
27661: PUSH
27662: LD_INT 3
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: LIST
27673: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27674: LD_ADDR_VAR 0 14
27678: PUSH
27679: LD_INT 1
27681: PUSH
27682: LD_INT 3
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: LD_INT 3
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: PUSH
27703: LD_INT 2
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: LIST
27714: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27715: LD_ADDR_VAR 0 15
27719: PUSH
27720: LD_INT 2
27722: NEG
27723: PUSH
27724: LD_INT 1
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 3
27733: NEG
27734: PUSH
27735: LD_INT 0
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 3
27744: NEG
27745: PUSH
27746: LD_INT 1
27748: NEG
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: LIST
27758: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27759: LD_ADDR_VAR 0 16
27763: PUSH
27764: LD_INT 2
27766: NEG
27767: PUSH
27768: LD_INT 3
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 3
27778: NEG
27779: PUSH
27780: LD_INT 2
27782: NEG
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 3
27790: NEG
27791: PUSH
27792: LD_INT 3
27794: NEG
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: LIST
27804: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27805: LD_ADDR_VAR 0 17
27809: PUSH
27810: LD_INT 1
27812: NEG
27813: PUSH
27814: LD_INT 3
27816: NEG
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: LD_INT 3
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 1
27835: PUSH
27836: LD_INT 2
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: LIST
27848: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27849: LD_ADDR_VAR 0 18
27853: PUSH
27854: LD_INT 2
27856: PUSH
27857: LD_INT 1
27859: NEG
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 3
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 3
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: LIST
27889: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27890: LD_ADDR_VAR 0 19
27894: PUSH
27895: LD_INT 3
27897: PUSH
27898: LD_INT 2
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 3
27907: PUSH
27908: LD_INT 3
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 2
27917: PUSH
27918: LD_INT 3
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: LIST
27929: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27930: LD_ADDR_VAR 0 20
27934: PUSH
27935: LD_INT 1
27937: PUSH
27938: LD_INT 3
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: LD_INT 3
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 1
27957: NEG
27958: PUSH
27959: LD_INT 2
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: LIST
27970: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27971: LD_ADDR_VAR 0 21
27975: PUSH
27976: LD_INT 2
27978: NEG
27979: PUSH
27980: LD_INT 1
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 3
27989: NEG
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 3
28000: NEG
28001: PUSH
28002: LD_INT 1
28004: NEG
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: LIST
28014: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28015: LD_ADDR_VAR 0 22
28019: PUSH
28020: LD_INT 2
28022: NEG
28023: PUSH
28024: LD_INT 3
28026: NEG
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 3
28034: NEG
28035: PUSH
28036: LD_INT 2
28038: NEG
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 3
28046: NEG
28047: PUSH
28048: LD_INT 3
28050: NEG
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: LIST
28060: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28061: LD_ADDR_VAR 0 23
28065: PUSH
28066: LD_INT 0
28068: PUSH
28069: LD_INT 3
28071: NEG
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 1
28079: NEG
28080: PUSH
28081: LD_INT 4
28083: NEG
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 1
28091: PUSH
28092: LD_INT 3
28094: NEG
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: LIST
28104: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28105: LD_ADDR_VAR 0 24
28109: PUSH
28110: LD_INT 3
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 3
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 4
28133: PUSH
28134: LD_INT 1
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: LIST
28145: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28146: LD_ADDR_VAR 0 25
28150: PUSH
28151: LD_INT 3
28153: PUSH
28154: LD_INT 3
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 4
28163: PUSH
28164: LD_INT 3
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 3
28173: PUSH
28174: LD_INT 4
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: LIST
28185: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28186: LD_ADDR_VAR 0 26
28190: PUSH
28191: LD_INT 0
28193: PUSH
28194: LD_INT 3
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 1
28203: PUSH
28204: LD_INT 4
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 1
28213: NEG
28214: PUSH
28215: LD_INT 3
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: LIST
28226: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28227: LD_ADDR_VAR 0 27
28231: PUSH
28232: LD_INT 3
28234: NEG
28235: PUSH
28236: LD_INT 0
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 3
28245: NEG
28246: PUSH
28247: LD_INT 1
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 4
28256: NEG
28257: PUSH
28258: LD_INT 1
28260: NEG
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: LIST
28270: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28271: LD_ADDR_VAR 0 28
28275: PUSH
28276: LD_INT 3
28278: NEG
28279: PUSH
28280: LD_INT 3
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 3
28290: NEG
28291: PUSH
28292: LD_INT 4
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 4
28302: NEG
28303: PUSH
28304: LD_INT 3
28306: NEG
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: LIST
28316: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28317: LD_ADDR_VAR 0 29
28321: PUSH
28322: LD_INT 1
28324: NEG
28325: PUSH
28326: LD_INT 3
28328: NEG
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: LD_INT 3
28339: NEG
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 1
28347: PUSH
28348: LD_INT 2
28350: NEG
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: LD_INT 4
28362: NEG
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 0
28370: PUSH
28371: LD_INT 4
28373: NEG
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 1
28381: PUSH
28382: LD_INT 3
28384: NEG
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 1
28392: NEG
28393: PUSH
28394: LD_INT 5
28396: NEG
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: LD_INT 5
28407: NEG
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: LD_INT 4
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 1
28426: NEG
28427: PUSH
28428: LD_INT 6
28430: NEG
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 0
28438: PUSH
28439: LD_INT 6
28441: NEG
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 1
28449: PUSH
28450: LD_INT 5
28452: NEG
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28472: LD_ADDR_VAR 0 30
28476: PUSH
28477: LD_INT 2
28479: PUSH
28480: LD_INT 1
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 3
28490: PUSH
28491: LD_INT 0
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 3
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 3
28510: PUSH
28511: LD_INT 1
28513: NEG
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 4
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 4
28531: PUSH
28532: LD_INT 1
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 4
28541: PUSH
28542: LD_INT 1
28544: NEG
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 5
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 5
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 5
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 6
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 6
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28615: LD_ADDR_VAR 0 31
28619: PUSH
28620: LD_INT 3
28622: PUSH
28623: LD_INT 2
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 3
28632: PUSH
28633: LD_INT 3
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 2
28642: PUSH
28643: LD_INT 3
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 4
28652: PUSH
28653: LD_INT 3
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 4
28662: PUSH
28663: LD_INT 4
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 3
28672: PUSH
28673: LD_INT 4
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 5
28682: PUSH
28683: LD_INT 4
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 5
28692: PUSH
28693: LD_INT 5
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 4
28702: PUSH
28703: LD_INT 5
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 6
28712: PUSH
28713: LD_INT 5
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 6
28722: PUSH
28723: LD_INT 6
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 5
28732: PUSH
28733: LD_INT 6
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28754: LD_ADDR_VAR 0 32
28758: PUSH
28759: LD_INT 1
28761: PUSH
28762: LD_INT 3
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 0
28771: PUSH
28772: LD_INT 3
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 1
28781: NEG
28782: PUSH
28783: LD_INT 2
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: LD_INT 4
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 0
28802: PUSH
28803: LD_INT 4
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 1
28812: NEG
28813: PUSH
28814: LD_INT 3
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 1
28823: PUSH
28824: LD_INT 5
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 0
28833: PUSH
28834: LD_INT 5
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 1
28843: NEG
28844: PUSH
28845: LD_INT 4
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 1
28854: PUSH
28855: LD_INT 6
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: LD_INT 6
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: NEG
28875: PUSH
28876: LD_INT 5
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28897: LD_ADDR_VAR 0 33
28901: PUSH
28902: LD_INT 2
28904: NEG
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 3
28915: NEG
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 3
28926: NEG
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 3
28938: NEG
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 4
28949: NEG
28950: PUSH
28951: LD_INT 0
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 4
28960: NEG
28961: PUSH
28962: LD_INT 1
28964: NEG
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 4
28972: NEG
28973: PUSH
28974: LD_INT 1
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 5
28983: NEG
28984: PUSH
28985: LD_INT 0
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 5
28994: NEG
28995: PUSH
28996: LD_INT 1
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 5
29006: NEG
29007: PUSH
29008: LD_INT 1
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 6
29017: NEG
29018: PUSH
29019: LD_INT 0
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 6
29028: NEG
29029: PUSH
29030: LD_INT 1
29032: NEG
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29052: LD_ADDR_VAR 0 34
29056: PUSH
29057: LD_INT 2
29059: NEG
29060: PUSH
29061: LD_INT 3
29063: NEG
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 3
29071: NEG
29072: PUSH
29073: LD_INT 2
29075: NEG
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 3
29083: NEG
29084: PUSH
29085: LD_INT 3
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 3
29095: NEG
29096: PUSH
29097: LD_INT 4
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 4
29107: NEG
29108: PUSH
29109: LD_INT 3
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 4
29119: NEG
29120: PUSH
29121: LD_INT 4
29123: NEG
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 4
29131: NEG
29132: PUSH
29133: LD_INT 5
29135: NEG
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 5
29143: NEG
29144: PUSH
29145: LD_INT 4
29147: NEG
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 5
29155: NEG
29156: PUSH
29157: LD_INT 5
29159: NEG
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 5
29167: NEG
29168: PUSH
29169: LD_INT 6
29171: NEG
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 6
29179: NEG
29180: PUSH
29181: LD_INT 5
29183: NEG
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 6
29191: NEG
29192: PUSH
29193: LD_INT 6
29195: NEG
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29215: LD_ADDR_VAR 0 41
29219: PUSH
29220: LD_INT 0
29222: PUSH
29223: LD_INT 2
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 1
29233: NEG
29234: PUSH
29235: LD_INT 3
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 1
29245: PUSH
29246: LD_INT 2
29248: NEG
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: LIST
29258: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29259: LD_ADDR_VAR 0 42
29263: PUSH
29264: LD_INT 2
29266: PUSH
29267: LD_INT 0
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 2
29276: PUSH
29277: LD_INT 1
29279: NEG
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 3
29287: PUSH
29288: LD_INT 1
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: LIST
29299: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29300: LD_ADDR_VAR 0 43
29304: PUSH
29305: LD_INT 2
29307: PUSH
29308: LD_INT 2
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 3
29317: PUSH
29318: LD_INT 2
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 2
29327: PUSH
29328: LD_INT 3
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: LIST
29339: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29340: LD_ADDR_VAR 0 44
29344: PUSH
29345: LD_INT 0
29347: PUSH
29348: LD_INT 2
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: LD_INT 3
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 1
29367: NEG
29368: PUSH
29369: LD_INT 2
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: LIST
29380: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29381: LD_ADDR_VAR 0 45
29385: PUSH
29386: LD_INT 2
29388: NEG
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 2
29399: NEG
29400: PUSH
29401: LD_INT 1
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 3
29410: NEG
29411: PUSH
29412: LD_INT 1
29414: NEG
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: LIST
29424: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29425: LD_ADDR_VAR 0 46
29429: PUSH
29430: LD_INT 2
29432: NEG
29433: PUSH
29434: LD_INT 2
29436: NEG
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 2
29444: NEG
29445: PUSH
29446: LD_INT 3
29448: NEG
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 3
29456: NEG
29457: PUSH
29458: LD_INT 2
29460: NEG
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: LIST
29470: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29471: LD_ADDR_VAR 0 47
29475: PUSH
29476: LD_INT 2
29478: NEG
29479: PUSH
29480: LD_INT 3
29482: NEG
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 1
29490: NEG
29491: PUSH
29492: LD_INT 3
29494: NEG
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29504: LD_ADDR_VAR 0 48
29508: PUSH
29509: LD_INT 1
29511: PUSH
29512: LD_INT 2
29514: NEG
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 2
29522: PUSH
29523: LD_INT 1
29525: NEG
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29535: LD_ADDR_VAR 0 49
29539: PUSH
29540: LD_INT 3
29542: PUSH
29543: LD_INT 1
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 3
29552: PUSH
29553: LD_INT 2
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29564: LD_ADDR_VAR 0 50
29568: PUSH
29569: LD_INT 2
29571: PUSH
29572: LD_INT 3
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 1
29581: PUSH
29582: LD_INT 3
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29593: LD_ADDR_VAR 0 51
29597: PUSH
29598: LD_INT 1
29600: NEG
29601: PUSH
29602: LD_INT 2
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 2
29611: NEG
29612: PUSH
29613: LD_INT 1
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29624: LD_ADDR_VAR 0 52
29628: PUSH
29629: LD_INT 3
29631: NEG
29632: PUSH
29633: LD_INT 1
29635: NEG
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 3
29643: NEG
29644: PUSH
29645: LD_INT 2
29647: NEG
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29657: LD_ADDR_VAR 0 53
29661: PUSH
29662: LD_INT 1
29664: NEG
29665: PUSH
29666: LD_INT 3
29668: NEG
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: LD_INT 3
29679: NEG
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 1
29687: PUSH
29688: LD_INT 2
29690: NEG
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: LIST
29700: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29701: LD_ADDR_VAR 0 54
29705: PUSH
29706: LD_INT 2
29708: PUSH
29709: LD_INT 1
29711: NEG
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 3
29719: PUSH
29720: LD_INT 0
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 3
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: LIST
29741: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29742: LD_ADDR_VAR 0 55
29746: PUSH
29747: LD_INT 3
29749: PUSH
29750: LD_INT 2
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 3
29759: PUSH
29760: LD_INT 3
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 2
29769: PUSH
29770: LD_INT 3
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: LIST
29781: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29782: LD_ADDR_VAR 0 56
29786: PUSH
29787: LD_INT 1
29789: PUSH
29790: LD_INT 3
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: LD_INT 3
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 1
29809: NEG
29810: PUSH
29811: LD_INT 2
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: LIST
29822: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29823: LD_ADDR_VAR 0 57
29827: PUSH
29828: LD_INT 2
29830: NEG
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 3
29841: NEG
29842: PUSH
29843: LD_INT 0
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 3
29852: NEG
29853: PUSH
29854: LD_INT 1
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: LIST
29866: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29867: LD_ADDR_VAR 0 58
29871: PUSH
29872: LD_INT 2
29874: NEG
29875: PUSH
29876: LD_INT 3
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 3
29886: NEG
29887: PUSH
29888: LD_INT 2
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 3
29898: NEG
29899: PUSH
29900: LD_INT 3
29902: NEG
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: LIST
29912: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29913: LD_ADDR_VAR 0 59
29917: PUSH
29918: LD_INT 1
29920: NEG
29921: PUSH
29922: LD_INT 2
29924: NEG
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 0
29932: PUSH
29933: LD_INT 2
29935: NEG
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 1
29943: PUSH
29944: LD_INT 1
29946: NEG
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: LIST
29956: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29957: LD_ADDR_VAR 0 60
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: LD_INT 1
29967: NEG
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 2
29975: PUSH
29976: LD_INT 0
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 2
29985: PUSH
29986: LD_INT 1
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: LIST
29997: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29998: LD_ADDR_VAR 0 61
30002: PUSH
30003: LD_INT 2
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 2
30015: PUSH
30016: LD_INT 2
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 1
30025: PUSH
30026: LD_INT 2
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: LIST
30037: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30038: LD_ADDR_VAR 0 62
30042: PUSH
30043: LD_INT 1
30045: PUSH
30046: LD_INT 2
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: LD_INT 2
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 1
30065: NEG
30066: PUSH
30067: LD_INT 1
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: LIST
30078: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30079: LD_ADDR_VAR 0 63
30083: PUSH
30084: LD_INT 1
30086: NEG
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 2
30097: NEG
30098: PUSH
30099: LD_INT 0
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 2
30108: NEG
30109: PUSH
30110: LD_INT 1
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: LIST
30122: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30123: LD_ADDR_VAR 0 64
30127: PUSH
30128: LD_INT 1
30130: NEG
30131: PUSH
30132: LD_INT 2
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 2
30142: NEG
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 2
30154: NEG
30155: PUSH
30156: LD_INT 2
30158: NEG
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: LIST
30168: ST_TO_ADDR
// end ; 2 :
30169: GO 33435
30171: LD_INT 2
30173: DOUBLE
30174: EQUAL
30175: IFTRUE 30179
30177: GO 33434
30179: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30180: LD_ADDR_VAR 0 29
30184: PUSH
30185: LD_INT 4
30187: PUSH
30188: LD_INT 0
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 4
30197: PUSH
30198: LD_INT 1
30200: NEG
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 5
30208: PUSH
30209: LD_INT 0
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 5
30218: PUSH
30219: LD_INT 1
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 4
30228: PUSH
30229: LD_INT 1
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 3
30238: PUSH
30239: LD_INT 0
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 3
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 3
30259: PUSH
30260: LD_INT 2
30262: NEG
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 5
30270: PUSH
30271: LD_INT 2
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 3
30280: PUSH
30281: LD_INT 3
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 3
30290: PUSH
30291: LD_INT 2
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 4
30300: PUSH
30301: LD_INT 3
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 4
30310: PUSH
30311: LD_INT 4
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 3
30320: PUSH
30321: LD_INT 4
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 2
30330: PUSH
30331: LD_INT 3
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 2
30340: PUSH
30341: LD_INT 2
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 4
30350: PUSH
30351: LD_INT 2
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 2
30360: PUSH
30361: LD_INT 4
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 0
30370: PUSH
30371: LD_INT 4
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 0
30380: PUSH
30381: LD_INT 3
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: LD_INT 4
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 1
30400: PUSH
30401: LD_INT 5
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 0
30410: PUSH
30411: LD_INT 5
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 1
30420: NEG
30421: PUSH
30422: LD_INT 4
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 1
30431: NEG
30432: PUSH
30433: LD_INT 3
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 2
30442: PUSH
30443: LD_INT 5
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 2
30452: NEG
30453: PUSH
30454: LD_INT 3
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 3
30463: NEG
30464: PUSH
30465: LD_INT 0
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 3
30474: NEG
30475: PUSH
30476: LD_INT 1
30478: NEG
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 2
30486: NEG
30487: PUSH
30488: LD_INT 0
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 2
30497: NEG
30498: PUSH
30499: LD_INT 1
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 3
30508: NEG
30509: PUSH
30510: LD_INT 1
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 4
30519: NEG
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 4
30530: NEG
30531: PUSH
30532: LD_INT 1
30534: NEG
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 4
30542: NEG
30543: PUSH
30544: LD_INT 2
30546: NEG
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 2
30554: NEG
30555: PUSH
30556: LD_INT 2
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 4
30565: NEG
30566: PUSH
30567: LD_INT 4
30569: NEG
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 4
30577: NEG
30578: PUSH
30579: LD_INT 5
30581: NEG
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 3
30589: NEG
30590: PUSH
30591: LD_INT 4
30593: NEG
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 3
30601: NEG
30602: PUSH
30603: LD_INT 3
30605: NEG
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 4
30613: NEG
30614: PUSH
30615: LD_INT 3
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 5
30625: NEG
30626: PUSH
30627: LD_INT 4
30629: NEG
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 5
30637: NEG
30638: PUSH
30639: LD_INT 5
30641: NEG
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 3
30649: NEG
30650: PUSH
30651: LD_INT 5
30653: NEG
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 5
30661: NEG
30662: PUSH
30663: LD_INT 3
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30718: LD_ADDR_VAR 0 30
30722: PUSH
30723: LD_INT 4
30725: PUSH
30726: LD_INT 4
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 4
30735: PUSH
30736: LD_INT 3
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 5
30745: PUSH
30746: LD_INT 4
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 5
30755: PUSH
30756: LD_INT 5
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 4
30765: PUSH
30766: LD_INT 5
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 3
30775: PUSH
30776: LD_INT 4
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 3
30785: PUSH
30786: LD_INT 3
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 5
30795: PUSH
30796: LD_INT 3
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 3
30805: PUSH
30806: LD_INT 5
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 0
30815: PUSH
30816: LD_INT 3
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: LD_INT 2
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 1
30835: PUSH
30836: LD_INT 3
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: LD_INT 4
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 0
30855: PUSH
30856: LD_INT 4
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 1
30865: NEG
30866: PUSH
30867: LD_INT 3
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 1
30876: NEG
30877: PUSH
30878: LD_INT 2
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 2
30887: PUSH
30888: LD_INT 4
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 2
30897: NEG
30898: PUSH
30899: LD_INT 2
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 4
30908: NEG
30909: PUSH
30910: LD_INT 0
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 4
30919: NEG
30920: PUSH
30921: LD_INT 1
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 3
30931: NEG
30932: PUSH
30933: LD_INT 0
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 3
30942: NEG
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 4
30953: NEG
30954: PUSH
30955: LD_INT 1
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 5
30964: NEG
30965: PUSH
30966: LD_INT 0
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 5
30975: NEG
30976: PUSH
30977: LD_INT 1
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 5
30987: NEG
30988: PUSH
30989: LD_INT 2
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 3
30999: NEG
31000: PUSH
31001: LD_INT 2
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 3
31010: NEG
31011: PUSH
31012: LD_INT 3
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 3
31022: NEG
31023: PUSH
31024: LD_INT 4
31026: NEG
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 2
31034: NEG
31035: PUSH
31036: LD_INT 3
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 2
31046: NEG
31047: PUSH
31048: LD_INT 2
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 3
31058: NEG
31059: PUSH
31060: LD_INT 2
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 4
31070: NEG
31071: PUSH
31072: LD_INT 3
31074: NEG
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 4
31082: NEG
31083: PUSH
31084: LD_INT 4
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 2
31094: NEG
31095: PUSH
31096: LD_INT 4
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 4
31106: NEG
31107: PUSH
31108: LD_INT 2
31110: NEG
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 0
31118: PUSH
31119: LD_INT 4
31121: NEG
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 0
31129: PUSH
31130: LD_INT 5
31132: NEG
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 1
31140: PUSH
31141: LD_INT 4
31143: NEG
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 1
31151: PUSH
31152: LD_INT 3
31154: NEG
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 0
31162: PUSH
31163: LD_INT 3
31165: NEG
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 1
31173: NEG
31174: PUSH
31175: LD_INT 4
31177: NEG
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 1
31185: NEG
31186: PUSH
31187: LD_INT 5
31189: NEG
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 2
31197: PUSH
31198: LD_INT 3
31200: NEG
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 2
31208: NEG
31209: PUSH
31210: LD_INT 5
31212: NEG
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31265: LD_ADDR_VAR 0 31
31269: PUSH
31270: LD_INT 0
31272: PUSH
31273: LD_INT 4
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 0
31282: PUSH
31283: LD_INT 3
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: LD_INT 4
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 1
31302: PUSH
31303: LD_INT 5
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: LD_INT 5
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: LD_INT 4
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: LD_INT 3
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 2
31344: PUSH
31345: LD_INT 5
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 2
31354: NEG
31355: PUSH
31356: LD_INT 3
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 3
31365: NEG
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 3
31376: NEG
31377: PUSH
31378: LD_INT 1
31380: NEG
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 2
31388: NEG
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 2
31399: NEG
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 3
31410: NEG
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 4
31421: NEG
31422: PUSH
31423: LD_INT 0
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 4
31432: NEG
31433: PUSH
31434: LD_INT 1
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 4
31444: NEG
31445: PUSH
31446: LD_INT 2
31448: NEG
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 2
31456: NEG
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 4
31467: NEG
31468: PUSH
31469: LD_INT 4
31471: NEG
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 4
31479: NEG
31480: PUSH
31481: LD_INT 5
31483: NEG
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 3
31491: NEG
31492: PUSH
31493: LD_INT 4
31495: NEG
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 3
31503: NEG
31504: PUSH
31505: LD_INT 3
31507: NEG
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 4
31515: NEG
31516: PUSH
31517: LD_INT 3
31519: NEG
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 5
31527: NEG
31528: PUSH
31529: LD_INT 4
31531: NEG
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 5
31539: NEG
31540: PUSH
31541: LD_INT 5
31543: NEG
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 3
31551: NEG
31552: PUSH
31553: LD_INT 5
31555: NEG
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 5
31563: NEG
31564: PUSH
31565: LD_INT 3
31567: NEG
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 0
31575: PUSH
31576: LD_INT 3
31578: NEG
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 0
31586: PUSH
31587: LD_INT 4
31589: NEG
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 1
31597: PUSH
31598: LD_INT 3
31600: NEG
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 1
31608: PUSH
31609: LD_INT 2
31611: NEG
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: LD_INT 2
31622: NEG
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 1
31630: NEG
31631: PUSH
31632: LD_INT 3
31634: NEG
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 1
31642: NEG
31643: PUSH
31644: LD_INT 4
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 2
31654: PUSH
31655: LD_INT 2
31657: NEG
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 2
31665: NEG
31666: PUSH
31667: LD_INT 4
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 4
31677: PUSH
31678: LD_INT 0
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 4
31687: PUSH
31688: LD_INT 1
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 5
31698: PUSH
31699: LD_INT 0
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 5
31708: PUSH
31709: LD_INT 1
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 4
31718: PUSH
31719: LD_INT 1
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 3
31728: PUSH
31729: LD_INT 0
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 3
31738: PUSH
31739: LD_INT 1
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 3
31749: PUSH
31750: LD_INT 2
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 5
31760: PUSH
31761: LD_INT 2
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31815: LD_ADDR_VAR 0 32
31819: PUSH
31820: LD_INT 4
31822: NEG
31823: PUSH
31824: LD_INT 0
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 4
31833: NEG
31834: PUSH
31835: LD_INT 1
31837: NEG
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 3
31845: NEG
31846: PUSH
31847: LD_INT 0
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 3
31856: NEG
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 4
31867: NEG
31868: PUSH
31869: LD_INT 1
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 5
31878: NEG
31879: PUSH
31880: LD_INT 0
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 5
31889: NEG
31890: PUSH
31891: LD_INT 1
31893: NEG
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 5
31901: NEG
31902: PUSH
31903: LD_INT 2
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 3
31913: NEG
31914: PUSH
31915: LD_INT 2
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 3
31924: NEG
31925: PUSH
31926: LD_INT 3
31928: NEG
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 3
31936: NEG
31937: PUSH
31938: LD_INT 4
31940: NEG
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 2
31948: NEG
31949: PUSH
31950: LD_INT 3
31952: NEG
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 2
31960: NEG
31961: PUSH
31962: LD_INT 2
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 3
31972: NEG
31973: PUSH
31974: LD_INT 2
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 4
31984: NEG
31985: PUSH
31986: LD_INT 3
31988: NEG
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 4
31996: NEG
31997: PUSH
31998: LD_INT 4
32000: NEG
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 2
32008: NEG
32009: PUSH
32010: LD_INT 4
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 4
32020: NEG
32021: PUSH
32022: LD_INT 2
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: LD_INT 4
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 0
32043: PUSH
32044: LD_INT 5
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 1
32054: PUSH
32055: LD_INT 4
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: LD_INT 3
32068: NEG
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 0
32076: PUSH
32077: LD_INT 3
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 1
32087: NEG
32088: PUSH
32089: LD_INT 4
32091: NEG
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: LD_INT 5
32103: NEG
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 2
32111: PUSH
32112: LD_INT 3
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 2
32122: NEG
32123: PUSH
32124: LD_INT 5
32126: NEG
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 3
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 3
32144: PUSH
32145: LD_INT 1
32147: NEG
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 4
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 4
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 3
32175: PUSH
32176: LD_INT 1
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 2
32185: PUSH
32186: LD_INT 0
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 2
32195: PUSH
32196: LD_INT 1
32198: NEG
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 2
32206: PUSH
32207: LD_INT 2
32209: NEG
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 4
32217: PUSH
32218: LD_INT 2
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 4
32227: PUSH
32228: LD_INT 4
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 4
32237: PUSH
32238: LD_INT 3
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 5
32247: PUSH
32248: LD_INT 4
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 5
32257: PUSH
32258: LD_INT 5
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 4
32267: PUSH
32268: LD_INT 5
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 3
32277: PUSH
32278: LD_INT 4
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 3
32287: PUSH
32288: LD_INT 3
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 5
32297: PUSH
32298: LD_INT 3
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 3
32307: PUSH
32308: LD_INT 5
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32362: LD_ADDR_VAR 0 33
32366: PUSH
32367: LD_INT 4
32369: NEG
32370: PUSH
32371: LD_INT 4
32373: NEG
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 4
32381: NEG
32382: PUSH
32383: LD_INT 5
32385: NEG
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 3
32393: NEG
32394: PUSH
32395: LD_INT 4
32397: NEG
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 3
32405: NEG
32406: PUSH
32407: LD_INT 3
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 4
32417: NEG
32418: PUSH
32419: LD_INT 3
32421: NEG
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 5
32429: NEG
32430: PUSH
32431: LD_INT 4
32433: NEG
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 5
32441: NEG
32442: PUSH
32443: LD_INT 5
32445: NEG
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 3
32453: NEG
32454: PUSH
32455: LD_INT 5
32457: NEG
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 5
32465: NEG
32466: PUSH
32467: LD_INT 3
32469: NEG
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: LD_INT 3
32480: NEG
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 0
32488: PUSH
32489: LD_INT 4
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 1
32499: PUSH
32500: LD_INT 3
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: PUSH
32511: LD_INT 2
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: LD_INT 2
32524: NEG
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: LD_INT 3
32536: NEG
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 1
32544: NEG
32545: PUSH
32546: LD_INT 4
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 2
32556: PUSH
32557: LD_INT 2
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 2
32567: NEG
32568: PUSH
32569: LD_INT 4
32571: NEG
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 4
32579: PUSH
32580: LD_INT 0
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 4
32589: PUSH
32590: LD_INT 1
32592: NEG
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 5
32600: PUSH
32601: LD_INT 0
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 5
32610: PUSH
32611: LD_INT 1
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 4
32620: PUSH
32621: LD_INT 1
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 3
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 3
32640: PUSH
32641: LD_INT 1
32643: NEG
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 3
32651: PUSH
32652: LD_INT 2
32654: NEG
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 5
32662: PUSH
32663: LD_INT 2
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 3
32672: PUSH
32673: LD_INT 3
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 3
32682: PUSH
32683: LD_INT 2
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 4
32692: PUSH
32693: LD_INT 3
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 4
32702: PUSH
32703: LD_INT 4
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 3
32712: PUSH
32713: LD_INT 4
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 2
32722: PUSH
32723: LD_INT 3
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 2
32732: PUSH
32733: LD_INT 2
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 4
32742: PUSH
32743: LD_INT 2
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 2
32752: PUSH
32753: LD_INT 4
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 0
32762: PUSH
32763: LD_INT 4
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 0
32772: PUSH
32773: LD_INT 3
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 1
32782: PUSH
32783: LD_INT 4
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: PUSH
32793: LD_INT 5
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 0
32802: PUSH
32803: LD_INT 5
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: PUSH
32814: LD_INT 4
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 1
32823: NEG
32824: PUSH
32825: LD_INT 3
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 2
32834: PUSH
32835: LD_INT 5
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 2
32844: NEG
32845: PUSH
32846: LD_INT 3
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32900: LD_ADDR_VAR 0 34
32904: PUSH
32905: LD_INT 0
32907: PUSH
32908: LD_INT 4
32910: NEG
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 0
32918: PUSH
32919: LD_INT 5
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 1
32929: PUSH
32930: LD_INT 4
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: PUSH
32941: LD_INT 3
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 0
32951: PUSH
32952: LD_INT 3
32954: NEG
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 1
32962: NEG
32963: PUSH
32964: LD_INT 4
32966: NEG
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 1
32974: NEG
32975: PUSH
32976: LD_INT 5
32978: NEG
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 2
32986: PUSH
32987: LD_INT 3
32989: NEG
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 2
32997: NEG
32998: PUSH
32999: LD_INT 5
33001: NEG
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 3
33009: PUSH
33010: LD_INT 0
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 3
33019: PUSH
33020: LD_INT 1
33022: NEG
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 4
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 4
33040: PUSH
33041: LD_INT 1
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 3
33050: PUSH
33051: LD_INT 1
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 2
33060: PUSH
33061: LD_INT 0
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: LD_INT 1
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 2
33081: PUSH
33082: LD_INT 2
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 4
33092: PUSH
33093: LD_INT 2
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 4
33102: PUSH
33103: LD_INT 4
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 4
33112: PUSH
33113: LD_INT 3
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 5
33122: PUSH
33123: LD_INT 4
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 5
33132: PUSH
33133: LD_INT 5
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 4
33142: PUSH
33143: LD_INT 5
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 3
33152: PUSH
33153: LD_INT 4
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 3
33162: PUSH
33163: LD_INT 3
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 5
33172: PUSH
33173: LD_INT 3
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 3
33182: PUSH
33183: LD_INT 5
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: LD_INT 3
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: LD_INT 2
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 1
33212: PUSH
33213: LD_INT 3
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: LD_INT 4
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 0
33232: PUSH
33233: LD_INT 4
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 1
33242: NEG
33243: PUSH
33244: LD_INT 3
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: LD_INT 2
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 2
33264: PUSH
33265: LD_INT 4
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 2
33274: NEG
33275: PUSH
33276: LD_INT 2
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 4
33285: NEG
33286: PUSH
33287: LD_INT 0
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 4
33296: NEG
33297: PUSH
33298: LD_INT 1
33300: NEG
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 3
33308: NEG
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 3
33319: NEG
33320: PUSH
33321: LD_INT 1
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 4
33330: NEG
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 5
33341: NEG
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 5
33352: NEG
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 5
33364: NEG
33365: PUSH
33366: LD_INT 2
33368: NEG
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 3
33376: NEG
33377: PUSH
33378: LD_INT 2
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: ST_TO_ADDR
// end ; end ;
33432: GO 33435
33434: POP
// case btype of b_depot , b_warehouse :
33435: LD_VAR 0 1
33439: PUSH
33440: LD_INT 0
33442: DOUBLE
33443: EQUAL
33444: IFTRUE 33454
33446: LD_INT 1
33448: DOUBLE
33449: EQUAL
33450: IFTRUE 33454
33452: GO 33655
33454: POP
// case nation of nation_american :
33455: LD_VAR 0 5
33459: PUSH
33460: LD_INT 1
33462: DOUBLE
33463: EQUAL
33464: IFTRUE 33468
33466: GO 33524
33468: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33469: LD_ADDR_VAR 0 9
33473: PUSH
33474: LD_VAR 0 11
33478: PUSH
33479: LD_VAR 0 12
33483: PUSH
33484: LD_VAR 0 13
33488: PUSH
33489: LD_VAR 0 14
33493: PUSH
33494: LD_VAR 0 15
33498: PUSH
33499: LD_VAR 0 16
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: PUSH
33512: LD_VAR 0 4
33516: PUSH
33517: LD_INT 1
33519: PLUS
33520: ARRAY
33521: ST_TO_ADDR
33522: GO 33653
33524: LD_INT 2
33526: DOUBLE
33527: EQUAL
33528: IFTRUE 33532
33530: GO 33588
33532: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33533: LD_ADDR_VAR 0 9
33537: PUSH
33538: LD_VAR 0 17
33542: PUSH
33543: LD_VAR 0 18
33547: PUSH
33548: LD_VAR 0 19
33552: PUSH
33553: LD_VAR 0 20
33557: PUSH
33558: LD_VAR 0 21
33562: PUSH
33563: LD_VAR 0 22
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: PUSH
33576: LD_VAR 0 4
33580: PUSH
33581: LD_INT 1
33583: PLUS
33584: ARRAY
33585: ST_TO_ADDR
33586: GO 33653
33588: LD_INT 3
33590: DOUBLE
33591: EQUAL
33592: IFTRUE 33596
33594: GO 33652
33596: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33597: LD_ADDR_VAR 0 9
33601: PUSH
33602: LD_VAR 0 23
33606: PUSH
33607: LD_VAR 0 24
33611: PUSH
33612: LD_VAR 0 25
33616: PUSH
33617: LD_VAR 0 26
33621: PUSH
33622: LD_VAR 0 27
33626: PUSH
33627: LD_VAR 0 28
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: PUSH
33640: LD_VAR 0 4
33644: PUSH
33645: LD_INT 1
33647: PLUS
33648: ARRAY
33649: ST_TO_ADDR
33650: GO 33653
33652: POP
33653: GO 34208
33655: LD_INT 2
33657: DOUBLE
33658: EQUAL
33659: IFTRUE 33669
33661: LD_INT 3
33663: DOUBLE
33664: EQUAL
33665: IFTRUE 33669
33667: GO 33725
33669: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33670: LD_ADDR_VAR 0 9
33674: PUSH
33675: LD_VAR 0 29
33679: PUSH
33680: LD_VAR 0 30
33684: PUSH
33685: LD_VAR 0 31
33689: PUSH
33690: LD_VAR 0 32
33694: PUSH
33695: LD_VAR 0 33
33699: PUSH
33700: LD_VAR 0 34
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: PUSH
33713: LD_VAR 0 4
33717: PUSH
33718: LD_INT 1
33720: PLUS
33721: ARRAY
33722: ST_TO_ADDR
33723: GO 34208
33725: LD_INT 16
33727: DOUBLE
33728: EQUAL
33729: IFTRUE 33787
33731: LD_INT 17
33733: DOUBLE
33734: EQUAL
33735: IFTRUE 33787
33737: LD_INT 18
33739: DOUBLE
33740: EQUAL
33741: IFTRUE 33787
33743: LD_INT 19
33745: DOUBLE
33746: EQUAL
33747: IFTRUE 33787
33749: LD_INT 22
33751: DOUBLE
33752: EQUAL
33753: IFTRUE 33787
33755: LD_INT 20
33757: DOUBLE
33758: EQUAL
33759: IFTRUE 33787
33761: LD_INT 21
33763: DOUBLE
33764: EQUAL
33765: IFTRUE 33787
33767: LD_INT 23
33769: DOUBLE
33770: EQUAL
33771: IFTRUE 33787
33773: LD_INT 24
33775: DOUBLE
33776: EQUAL
33777: IFTRUE 33787
33779: LD_INT 25
33781: DOUBLE
33782: EQUAL
33783: IFTRUE 33787
33785: GO 33843
33787: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33788: LD_ADDR_VAR 0 9
33792: PUSH
33793: LD_VAR 0 35
33797: PUSH
33798: LD_VAR 0 36
33802: PUSH
33803: LD_VAR 0 37
33807: PUSH
33808: LD_VAR 0 38
33812: PUSH
33813: LD_VAR 0 39
33817: PUSH
33818: LD_VAR 0 40
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: PUSH
33831: LD_VAR 0 4
33835: PUSH
33836: LD_INT 1
33838: PLUS
33839: ARRAY
33840: ST_TO_ADDR
33841: GO 34208
33843: LD_INT 6
33845: DOUBLE
33846: EQUAL
33847: IFTRUE 33899
33849: LD_INT 7
33851: DOUBLE
33852: EQUAL
33853: IFTRUE 33899
33855: LD_INT 8
33857: DOUBLE
33858: EQUAL
33859: IFTRUE 33899
33861: LD_INT 13
33863: DOUBLE
33864: EQUAL
33865: IFTRUE 33899
33867: LD_INT 12
33869: DOUBLE
33870: EQUAL
33871: IFTRUE 33899
33873: LD_INT 15
33875: DOUBLE
33876: EQUAL
33877: IFTRUE 33899
33879: LD_INT 11
33881: DOUBLE
33882: EQUAL
33883: IFTRUE 33899
33885: LD_INT 14
33887: DOUBLE
33888: EQUAL
33889: IFTRUE 33899
33891: LD_INT 10
33893: DOUBLE
33894: EQUAL
33895: IFTRUE 33899
33897: GO 33955
33899: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33900: LD_ADDR_VAR 0 9
33904: PUSH
33905: LD_VAR 0 41
33909: PUSH
33910: LD_VAR 0 42
33914: PUSH
33915: LD_VAR 0 43
33919: PUSH
33920: LD_VAR 0 44
33924: PUSH
33925: LD_VAR 0 45
33929: PUSH
33930: LD_VAR 0 46
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: PUSH
33943: LD_VAR 0 4
33947: PUSH
33948: LD_INT 1
33950: PLUS
33951: ARRAY
33952: ST_TO_ADDR
33953: GO 34208
33955: LD_INT 36
33957: DOUBLE
33958: EQUAL
33959: IFTRUE 33963
33961: GO 34019
33963: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33964: LD_ADDR_VAR 0 9
33968: PUSH
33969: LD_VAR 0 47
33973: PUSH
33974: LD_VAR 0 48
33978: PUSH
33979: LD_VAR 0 49
33983: PUSH
33984: LD_VAR 0 50
33988: PUSH
33989: LD_VAR 0 51
33993: PUSH
33994: LD_VAR 0 52
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: PUSH
34007: LD_VAR 0 4
34011: PUSH
34012: LD_INT 1
34014: PLUS
34015: ARRAY
34016: ST_TO_ADDR
34017: GO 34208
34019: LD_INT 4
34021: DOUBLE
34022: EQUAL
34023: IFTRUE 34045
34025: LD_INT 5
34027: DOUBLE
34028: EQUAL
34029: IFTRUE 34045
34031: LD_INT 34
34033: DOUBLE
34034: EQUAL
34035: IFTRUE 34045
34037: LD_INT 37
34039: DOUBLE
34040: EQUAL
34041: IFTRUE 34045
34043: GO 34101
34045: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34046: LD_ADDR_VAR 0 9
34050: PUSH
34051: LD_VAR 0 53
34055: PUSH
34056: LD_VAR 0 54
34060: PUSH
34061: LD_VAR 0 55
34065: PUSH
34066: LD_VAR 0 56
34070: PUSH
34071: LD_VAR 0 57
34075: PUSH
34076: LD_VAR 0 58
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: PUSH
34089: LD_VAR 0 4
34093: PUSH
34094: LD_INT 1
34096: PLUS
34097: ARRAY
34098: ST_TO_ADDR
34099: GO 34208
34101: LD_INT 31
34103: DOUBLE
34104: EQUAL
34105: IFTRUE 34151
34107: LD_INT 32
34109: DOUBLE
34110: EQUAL
34111: IFTRUE 34151
34113: LD_INT 33
34115: DOUBLE
34116: EQUAL
34117: IFTRUE 34151
34119: LD_INT 27
34121: DOUBLE
34122: EQUAL
34123: IFTRUE 34151
34125: LD_INT 26
34127: DOUBLE
34128: EQUAL
34129: IFTRUE 34151
34131: LD_INT 28
34133: DOUBLE
34134: EQUAL
34135: IFTRUE 34151
34137: LD_INT 29
34139: DOUBLE
34140: EQUAL
34141: IFTRUE 34151
34143: LD_INT 30
34145: DOUBLE
34146: EQUAL
34147: IFTRUE 34151
34149: GO 34207
34151: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34152: LD_ADDR_VAR 0 9
34156: PUSH
34157: LD_VAR 0 59
34161: PUSH
34162: LD_VAR 0 60
34166: PUSH
34167: LD_VAR 0 61
34171: PUSH
34172: LD_VAR 0 62
34176: PUSH
34177: LD_VAR 0 63
34181: PUSH
34182: LD_VAR 0 64
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: PUSH
34195: LD_VAR 0 4
34199: PUSH
34200: LD_INT 1
34202: PLUS
34203: ARRAY
34204: ST_TO_ADDR
34205: GO 34208
34207: POP
// temp_list2 = [ ] ;
34208: LD_ADDR_VAR 0 10
34212: PUSH
34213: EMPTY
34214: ST_TO_ADDR
// for i in temp_list do
34215: LD_ADDR_VAR 0 8
34219: PUSH
34220: LD_VAR 0 9
34224: PUSH
34225: FOR_IN
34226: IFFALSE 34278
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34228: LD_ADDR_VAR 0 10
34232: PUSH
34233: LD_VAR 0 10
34237: PUSH
34238: LD_VAR 0 8
34242: PUSH
34243: LD_INT 1
34245: ARRAY
34246: PUSH
34247: LD_VAR 0 2
34251: PLUS
34252: PUSH
34253: LD_VAR 0 8
34257: PUSH
34258: LD_INT 2
34260: ARRAY
34261: PUSH
34262: LD_VAR 0 3
34266: PLUS
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: EMPTY
34273: LIST
34274: ADD
34275: ST_TO_ADDR
34276: GO 34225
34278: POP
34279: POP
// result = temp_list2 ;
34280: LD_ADDR_VAR 0 7
34284: PUSH
34285: LD_VAR 0 10
34289: ST_TO_ADDR
// end ;
34290: LD_VAR 0 7
34294: RET
// export function EnemyInRange ( unit , dist ) ; begin
34295: LD_INT 0
34297: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34298: LD_ADDR_VAR 0 3
34302: PUSH
34303: LD_VAR 0 1
34307: PPUSH
34308: CALL_OW 255
34312: PPUSH
34313: LD_VAR 0 1
34317: PPUSH
34318: CALL_OW 250
34322: PPUSH
34323: LD_VAR 0 1
34327: PPUSH
34328: CALL_OW 251
34332: PPUSH
34333: LD_VAR 0 2
34337: PPUSH
34338: CALL 7552 0 4
34342: PUSH
34343: LD_INT 4
34345: ARRAY
34346: ST_TO_ADDR
// end ;
34347: LD_VAR 0 3
34351: RET
// export function PlayerSeeMe ( unit ) ; begin
34352: LD_INT 0
34354: PPUSH
// result := See ( your_side , unit ) ;
34355: LD_ADDR_VAR 0 2
34359: PUSH
34360: LD_OWVAR 2
34364: PPUSH
34365: LD_VAR 0 1
34369: PPUSH
34370: CALL_OW 292
34374: ST_TO_ADDR
// end ;
34375: LD_VAR 0 2
34379: RET
// export function ReverseDir ( unit ) ; begin
34380: LD_INT 0
34382: PPUSH
// if not unit then
34383: LD_VAR 0 1
34387: NOT
34388: IFFALSE 34392
// exit ;
34390: GO 34415
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34392: LD_ADDR_VAR 0 2
34396: PUSH
34397: LD_VAR 0 1
34401: PPUSH
34402: CALL_OW 254
34406: PUSH
34407: LD_INT 3
34409: PLUS
34410: PUSH
34411: LD_INT 6
34413: MOD
34414: ST_TO_ADDR
// end ;
34415: LD_VAR 0 2
34419: RET
// export function ReverseArray ( array ) ; var i ; begin
34420: LD_INT 0
34422: PPUSH
34423: PPUSH
// if not array then
34424: LD_VAR 0 1
34428: NOT
34429: IFFALSE 34433
// exit ;
34431: GO 34488
// result := [ ] ;
34433: LD_ADDR_VAR 0 2
34437: PUSH
34438: EMPTY
34439: ST_TO_ADDR
// for i := array downto 1 do
34440: LD_ADDR_VAR 0 3
34444: PUSH
34445: DOUBLE
34446: LD_VAR 0 1
34450: INC
34451: ST_TO_ADDR
34452: LD_INT 1
34454: PUSH
34455: FOR_DOWNTO
34456: IFFALSE 34486
// result := Join ( result , array [ i ] ) ;
34458: LD_ADDR_VAR 0 2
34462: PUSH
34463: LD_VAR 0 2
34467: PPUSH
34468: LD_VAR 0 1
34472: PUSH
34473: LD_VAR 0 3
34477: ARRAY
34478: PPUSH
34479: CALL 39340 0 2
34483: ST_TO_ADDR
34484: GO 34455
34486: POP
34487: POP
// end ;
34488: LD_VAR 0 2
34492: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34493: LD_INT 0
34495: PPUSH
34496: PPUSH
34497: PPUSH
34498: PPUSH
34499: PPUSH
34500: PPUSH
// if not unit or not hexes then
34501: LD_VAR 0 1
34505: NOT
34506: IFTRUE 34515
34508: PUSH
34509: LD_VAR 0 2
34513: NOT
34514: OR
34515: IFFALSE 34519
// exit ;
34517: GO 34642
// dist := 9999 ;
34519: LD_ADDR_VAR 0 5
34523: PUSH
34524: LD_INT 9999
34526: ST_TO_ADDR
// for i = 1 to hexes do
34527: LD_ADDR_VAR 0 4
34531: PUSH
34532: DOUBLE
34533: LD_INT 1
34535: DEC
34536: ST_TO_ADDR
34537: LD_VAR 0 2
34541: PUSH
34542: FOR_TO
34543: IFFALSE 34630
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34545: LD_ADDR_VAR 0 6
34549: PUSH
34550: LD_VAR 0 1
34554: PPUSH
34555: LD_VAR 0 2
34559: PUSH
34560: LD_VAR 0 4
34564: ARRAY
34565: PUSH
34566: LD_INT 1
34568: ARRAY
34569: PPUSH
34570: LD_VAR 0 2
34574: PUSH
34575: LD_VAR 0 4
34579: ARRAY
34580: PUSH
34581: LD_INT 2
34583: ARRAY
34584: PPUSH
34585: CALL_OW 297
34589: ST_TO_ADDR
// if tdist < dist then
34590: LD_VAR 0 6
34594: PUSH
34595: LD_VAR 0 5
34599: LESS
34600: IFFALSE 34628
// begin hex := hexes [ i ] ;
34602: LD_ADDR_VAR 0 8
34606: PUSH
34607: LD_VAR 0 2
34611: PUSH
34612: LD_VAR 0 4
34616: ARRAY
34617: ST_TO_ADDR
// dist := tdist ;
34618: LD_ADDR_VAR 0 5
34622: PUSH
34623: LD_VAR 0 6
34627: ST_TO_ADDR
// end ; end ;
34628: GO 34542
34630: POP
34631: POP
// result := hex ;
34632: LD_ADDR_VAR 0 3
34636: PUSH
34637: LD_VAR 0 8
34641: ST_TO_ADDR
// end ;
34642: LD_VAR 0 3
34646: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34647: LD_INT 0
34649: PPUSH
34650: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34651: LD_VAR 0 1
34655: NOT
34656: IFTRUE 34695
34658: PUSH
34659: LD_VAR 0 1
34663: PUSH
34664: LD_INT 21
34666: PUSH
34667: LD_INT 2
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 23
34676: PUSH
34677: LD_INT 2
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PPUSH
34688: CALL_OW 69
34692: IN
34693: NOT
34694: OR
34695: IFFALSE 34699
// exit ;
34697: GO 34746
// for i = 1 to 3 do
34699: LD_ADDR_VAR 0 3
34703: PUSH
34704: DOUBLE
34705: LD_INT 1
34707: DEC
34708: ST_TO_ADDR
34709: LD_INT 3
34711: PUSH
34712: FOR_TO
34713: IFFALSE 34744
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34715: LD_VAR 0 1
34719: PPUSH
34720: CALL_OW 250
34724: PPUSH
34725: LD_VAR 0 1
34729: PPUSH
34730: CALL_OW 251
34734: PPUSH
34735: LD_INT 1
34737: PPUSH
34738: CALL_OW 453
34742: GO 34712
34744: POP
34745: POP
// end ;
34746: LD_VAR 0 2
34750: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34751: LD_INT 0
34753: PPUSH
34754: PPUSH
34755: PPUSH
34756: PPUSH
34757: PPUSH
34758: PPUSH
// if not unit or not enemy_unit then
34759: LD_VAR 0 1
34763: NOT
34764: IFTRUE 34773
34766: PUSH
34767: LD_VAR 0 2
34771: NOT
34772: OR
34773: IFFALSE 34777
// exit ;
34775: GO 35258
// if GetLives ( i ) < 250 then
34777: LD_VAR 0 4
34781: PPUSH
34782: CALL_OW 256
34786: PUSH
34787: LD_INT 250
34789: LESS
34790: IFFALSE 34803
// begin ComAutodestruct ( i ) ;
34792: LD_VAR 0 4
34796: PPUSH
34797: CALL 34647 0 1
// exit ;
34801: GO 35258
// end ; x := GetX ( enemy_unit ) ;
34803: LD_ADDR_VAR 0 7
34807: PUSH
34808: LD_VAR 0 2
34812: PPUSH
34813: CALL_OW 250
34817: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34818: LD_ADDR_VAR 0 8
34822: PUSH
34823: LD_VAR 0 2
34827: PPUSH
34828: CALL_OW 251
34832: ST_TO_ADDR
// if not x or not y then
34833: LD_VAR 0 7
34837: NOT
34838: IFTRUE 34847
34840: PUSH
34841: LD_VAR 0 8
34845: NOT
34846: OR
34847: IFFALSE 34851
// exit ;
34849: GO 35258
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34851: LD_ADDR_VAR 0 6
34855: PUSH
34856: LD_VAR 0 7
34860: PPUSH
34861: LD_INT 0
34863: PPUSH
34864: LD_INT 4
34866: PPUSH
34867: CALL_OW 272
34871: PUSH
34872: LD_VAR 0 8
34876: PPUSH
34877: LD_INT 0
34879: PPUSH
34880: LD_INT 4
34882: PPUSH
34883: CALL_OW 273
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_VAR 0 7
34896: PPUSH
34897: LD_INT 1
34899: PPUSH
34900: LD_INT 4
34902: PPUSH
34903: CALL_OW 272
34907: PUSH
34908: LD_VAR 0 8
34912: PPUSH
34913: LD_INT 1
34915: PPUSH
34916: LD_INT 4
34918: PPUSH
34919: CALL_OW 273
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_VAR 0 7
34932: PPUSH
34933: LD_INT 2
34935: PPUSH
34936: LD_INT 4
34938: PPUSH
34939: CALL_OW 272
34943: PUSH
34944: LD_VAR 0 8
34948: PPUSH
34949: LD_INT 2
34951: PPUSH
34952: LD_INT 4
34954: PPUSH
34955: CALL_OW 273
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_VAR 0 7
34968: PPUSH
34969: LD_INT 3
34971: PPUSH
34972: LD_INT 4
34974: PPUSH
34975: CALL_OW 272
34979: PUSH
34980: LD_VAR 0 8
34984: PPUSH
34985: LD_INT 3
34987: PPUSH
34988: LD_INT 4
34990: PPUSH
34991: CALL_OW 273
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_VAR 0 7
35004: PPUSH
35005: LD_INT 4
35007: PPUSH
35008: LD_INT 4
35010: PPUSH
35011: CALL_OW 272
35015: PUSH
35016: LD_VAR 0 8
35020: PPUSH
35021: LD_INT 4
35023: PPUSH
35024: LD_INT 4
35026: PPUSH
35027: CALL_OW 273
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_VAR 0 7
35040: PPUSH
35041: LD_INT 5
35043: PPUSH
35044: LD_INT 4
35046: PPUSH
35047: CALL_OW 272
35051: PUSH
35052: LD_VAR 0 8
35056: PPUSH
35057: LD_INT 5
35059: PPUSH
35060: LD_INT 4
35062: PPUSH
35063: CALL_OW 273
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: ST_TO_ADDR
// for i = tmp downto 1 do
35080: LD_ADDR_VAR 0 4
35084: PUSH
35085: DOUBLE
35086: LD_VAR 0 6
35090: INC
35091: ST_TO_ADDR
35092: LD_INT 1
35094: PUSH
35095: FOR_DOWNTO
35096: IFFALSE 35199
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35098: LD_VAR 0 6
35102: PUSH
35103: LD_VAR 0 4
35107: ARRAY
35108: PUSH
35109: LD_INT 1
35111: ARRAY
35112: PPUSH
35113: LD_VAR 0 6
35117: PUSH
35118: LD_VAR 0 4
35122: ARRAY
35123: PUSH
35124: LD_INT 2
35126: ARRAY
35127: PPUSH
35128: CALL_OW 488
35132: NOT
35133: IFTRUE 35175
35135: PUSH
35136: LD_VAR 0 6
35140: PUSH
35141: LD_VAR 0 4
35145: ARRAY
35146: PUSH
35147: LD_INT 1
35149: ARRAY
35150: PPUSH
35151: LD_VAR 0 6
35155: PUSH
35156: LD_VAR 0 4
35160: ARRAY
35161: PUSH
35162: LD_INT 2
35164: ARRAY
35165: PPUSH
35166: CALL_OW 428
35170: PUSH
35171: LD_INT 0
35173: NONEQUAL
35174: OR
35175: IFFALSE 35197
// tmp := Delete ( tmp , i ) ;
35177: LD_ADDR_VAR 0 6
35181: PUSH
35182: LD_VAR 0 6
35186: PPUSH
35187: LD_VAR 0 4
35191: PPUSH
35192: CALL_OW 3
35196: ST_TO_ADDR
35197: GO 35095
35199: POP
35200: POP
// j := GetClosestHex ( unit , tmp ) ;
35201: LD_ADDR_VAR 0 5
35205: PUSH
35206: LD_VAR 0 1
35210: PPUSH
35211: LD_VAR 0 6
35215: PPUSH
35216: CALL 34493 0 2
35220: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35221: LD_VAR 0 1
35225: PPUSH
35226: LD_VAR 0 5
35230: PUSH
35231: LD_INT 1
35233: ARRAY
35234: PPUSH
35235: LD_VAR 0 5
35239: PUSH
35240: LD_INT 2
35242: ARRAY
35243: PPUSH
35244: CALL_OW 111
// result := j ;
35248: LD_ADDR_VAR 0 3
35252: PUSH
35253: LD_VAR 0 5
35257: ST_TO_ADDR
// end ;
35258: LD_VAR 0 3
35262: RET
// export function PrepareApemanSoldier ( ) ; begin
35263: LD_INT 0
35265: PPUSH
// uc_nation := 0 ;
35266: LD_ADDR_OWVAR 21
35270: PUSH
35271: LD_INT 0
35273: ST_TO_ADDR
// hc_sex := sex_male ;
35274: LD_ADDR_OWVAR 27
35278: PUSH
35279: LD_INT 1
35281: ST_TO_ADDR
// hc_name :=  ;
35282: LD_ADDR_OWVAR 26
35286: PUSH
35287: LD_STRING 
35289: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35290: LD_ADDR_OWVAR 28
35294: PUSH
35295: LD_INT 15
35297: ST_TO_ADDR
// hc_gallery :=  ;
35298: LD_ADDR_OWVAR 33
35302: PUSH
35303: LD_STRING 
35305: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35306: LD_ADDR_OWVAR 31
35310: PUSH
35311: LD_INT 0
35313: PPUSH
35314: LD_INT 3
35316: PPUSH
35317: CALL_OW 12
35321: PUSH
35322: LD_INT 0
35324: PPUSH
35325: LD_INT 3
35327: PPUSH
35328: CALL_OW 12
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: LD_INT 0
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
35345: LD_ADDR_OWVAR 29
35349: PUSH
35350: LD_INT 10
35352: PUSH
35353: LD_INT 12
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: ST_TO_ADDR
// end ;
35360: LD_VAR 0 1
35364: RET
// export function PrepareApemanEngineer ( ) ; begin
35365: LD_INT 0
35367: PPUSH
// uc_nation := 0 ;
35368: LD_ADDR_OWVAR 21
35372: PUSH
35373: LD_INT 0
35375: ST_TO_ADDR
// hc_sex := sex_male ;
35376: LD_ADDR_OWVAR 27
35380: PUSH
35381: LD_INT 1
35383: ST_TO_ADDR
// hc_name :=  ;
35384: LD_ADDR_OWVAR 26
35388: PUSH
35389: LD_STRING 
35391: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35392: LD_ADDR_OWVAR 28
35396: PUSH
35397: LD_INT 16
35399: ST_TO_ADDR
// hc_gallery :=  ;
35400: LD_ADDR_OWVAR 33
35404: PUSH
35405: LD_STRING 
35407: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35408: LD_ADDR_OWVAR 31
35412: PUSH
35413: LD_INT 0
35415: PPUSH
35416: LD_INT 3
35418: PPUSH
35419: CALL_OW 12
35423: PUSH
35424: LD_INT 0
35426: PPUSH
35427: LD_INT 3
35429: PPUSH
35430: CALL_OW 12
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
35447: LD_ADDR_OWVAR 29
35451: PUSH
35452: LD_INT 10
35454: PUSH
35455: LD_INT 12
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: ST_TO_ADDR
// end ;
35462: LD_VAR 0 1
35466: RET
// export function PrepareApeman ( agressivity ) ; begin
35467: LD_INT 0
35469: PPUSH
// uc_side := 0 ;
35470: LD_ADDR_OWVAR 20
35474: PUSH
35475: LD_INT 0
35477: ST_TO_ADDR
// uc_nation := 0 ;
35478: LD_ADDR_OWVAR 21
35482: PUSH
35483: LD_INT 0
35485: ST_TO_ADDR
// hc_sex := sex_male ;
35486: LD_ADDR_OWVAR 27
35490: PUSH
35491: LD_INT 1
35493: ST_TO_ADDR
// hc_class := class_apeman ;
35494: LD_ADDR_OWVAR 28
35498: PUSH
35499: LD_INT 12
35501: ST_TO_ADDR
// hc_gallery :=  ;
35502: LD_ADDR_OWVAR 33
35506: PUSH
35507: LD_STRING 
35509: ST_TO_ADDR
// hc_name :=  ;
35510: LD_ADDR_OWVAR 26
35514: PUSH
35515: LD_STRING 
35517: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
35518: LD_ADDR_OWVAR 29
35522: PUSH
35523: LD_INT 10
35525: PUSH
35526: LD_INT 12
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: ST_TO_ADDR
// if agressivity = 0 then
35533: LD_VAR 0 1
35537: PUSH
35538: LD_INT 0
35540: EQUAL
35541: IFFALSE 35553
// hc_agressivity := 0 else
35543: LD_ADDR_OWVAR 35
35547: PUSH
35548: LD_INT 0
35550: ST_TO_ADDR
35551: GO 35574
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35553: LD_ADDR_OWVAR 35
35557: PUSH
35558: LD_VAR 0 1
35562: NEG
35563: PPUSH
35564: LD_VAR 0 1
35568: PPUSH
35569: CALL_OW 12
35573: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35574: LD_ADDR_OWVAR 31
35578: PUSH
35579: LD_INT 0
35581: PPUSH
35582: LD_INT 3
35584: PPUSH
35585: CALL_OW 12
35589: PUSH
35590: LD_INT 0
35592: PPUSH
35593: LD_INT 3
35595: PPUSH
35596: CALL_OW 12
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: ST_TO_ADDR
// end ;
35613: LD_VAR 0 2
35617: RET
// export function PrepareTiger ( agressivity ) ; begin
35618: LD_INT 0
35620: PPUSH
// uc_side := 0 ;
35621: LD_ADDR_OWVAR 20
35625: PUSH
35626: LD_INT 0
35628: ST_TO_ADDR
// uc_nation := 0 ;
35629: LD_ADDR_OWVAR 21
35633: PUSH
35634: LD_INT 0
35636: ST_TO_ADDR
// InitHc ;
35637: CALL_OW 19
// hc_class := class_tiger ;
35641: LD_ADDR_OWVAR 28
35645: PUSH
35646: LD_INT 14
35648: ST_TO_ADDR
// hc_gallery :=  ;
35649: LD_ADDR_OWVAR 33
35653: PUSH
35654: LD_STRING 
35656: ST_TO_ADDR
// hc_name :=  ;
35657: LD_ADDR_OWVAR 26
35661: PUSH
35662: LD_STRING 
35664: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35665: LD_ADDR_OWVAR 35
35669: PUSH
35670: LD_VAR 0 1
35674: NEG
35675: PPUSH
35676: LD_VAR 0 1
35680: PPUSH
35681: CALL_OW 12
35685: ST_TO_ADDR
// end ;
35686: LD_VAR 0 2
35690: RET
// export function PrepareEnchidna ( ) ; begin
35691: LD_INT 0
35693: PPUSH
// uc_side := 0 ;
35694: LD_ADDR_OWVAR 20
35698: PUSH
35699: LD_INT 0
35701: ST_TO_ADDR
// uc_nation := 0 ;
35702: LD_ADDR_OWVAR 21
35706: PUSH
35707: LD_INT 0
35709: ST_TO_ADDR
// InitHc ;
35710: CALL_OW 19
// hc_class := class_baggie ;
35714: LD_ADDR_OWVAR 28
35718: PUSH
35719: LD_INT 13
35721: ST_TO_ADDR
// hc_gallery :=  ;
35722: LD_ADDR_OWVAR 33
35726: PUSH
35727: LD_STRING 
35729: ST_TO_ADDR
// hc_name :=  ;
35730: LD_ADDR_OWVAR 26
35734: PUSH
35735: LD_STRING 
35737: ST_TO_ADDR
// end ;
35738: LD_VAR 0 1
35742: RET
// export function PrepareFrog ( ) ; begin
35743: LD_INT 0
35745: PPUSH
// uc_side := 0 ;
35746: LD_ADDR_OWVAR 20
35750: PUSH
35751: LD_INT 0
35753: ST_TO_ADDR
// uc_nation := 0 ;
35754: LD_ADDR_OWVAR 21
35758: PUSH
35759: LD_INT 0
35761: ST_TO_ADDR
// InitHc ;
35762: CALL_OW 19
// hc_class := class_frog ;
35766: LD_ADDR_OWVAR 28
35770: PUSH
35771: LD_INT 19
35773: ST_TO_ADDR
// hc_gallery :=  ;
35774: LD_ADDR_OWVAR 33
35778: PUSH
35779: LD_STRING 
35781: ST_TO_ADDR
// hc_name :=  ;
35782: LD_ADDR_OWVAR 26
35786: PUSH
35787: LD_STRING 
35789: ST_TO_ADDR
// end ;
35790: LD_VAR 0 1
35794: RET
// export function PrepareFish ( ) ; begin
35795: LD_INT 0
35797: PPUSH
// uc_side := 0 ;
35798: LD_ADDR_OWVAR 20
35802: PUSH
35803: LD_INT 0
35805: ST_TO_ADDR
// uc_nation := 0 ;
35806: LD_ADDR_OWVAR 21
35810: PUSH
35811: LD_INT 0
35813: ST_TO_ADDR
// InitHc ;
35814: CALL_OW 19
// hc_class := class_fish ;
35818: LD_ADDR_OWVAR 28
35822: PUSH
35823: LD_INT 20
35825: ST_TO_ADDR
// hc_gallery :=  ;
35826: LD_ADDR_OWVAR 33
35830: PUSH
35831: LD_STRING 
35833: ST_TO_ADDR
// hc_name :=  ;
35834: LD_ADDR_OWVAR 26
35838: PUSH
35839: LD_STRING 
35841: ST_TO_ADDR
// end ;
35842: LD_VAR 0 1
35846: RET
// export function PrepareBird ( ) ; begin
35847: LD_INT 0
35849: PPUSH
// uc_side := 0 ;
35850: LD_ADDR_OWVAR 20
35854: PUSH
35855: LD_INT 0
35857: ST_TO_ADDR
// uc_nation := 0 ;
35858: LD_ADDR_OWVAR 21
35862: PUSH
35863: LD_INT 0
35865: ST_TO_ADDR
// InitHc ;
35866: CALL_OW 19
// hc_class := class_phororhacos ;
35870: LD_ADDR_OWVAR 28
35874: PUSH
35875: LD_INT 18
35877: ST_TO_ADDR
// hc_gallery :=  ;
35878: LD_ADDR_OWVAR 33
35882: PUSH
35883: LD_STRING 
35885: ST_TO_ADDR
// hc_name :=  ;
35886: LD_ADDR_OWVAR 26
35890: PUSH
35891: LD_STRING 
35893: ST_TO_ADDR
// end ;
35894: LD_VAR 0 1
35898: RET
// export function PrepareHorse ( ) ; begin
35899: LD_INT 0
35901: PPUSH
// uc_side := 0 ;
35902: LD_ADDR_OWVAR 20
35906: PUSH
35907: LD_INT 0
35909: ST_TO_ADDR
// uc_nation := 0 ;
35910: LD_ADDR_OWVAR 21
35914: PUSH
35915: LD_INT 0
35917: ST_TO_ADDR
// InitHc ;
35918: CALL_OW 19
// hc_class := class_horse ;
35922: LD_ADDR_OWVAR 28
35926: PUSH
35927: LD_INT 21
35929: ST_TO_ADDR
// hc_gallery :=  ;
35930: LD_ADDR_OWVAR 33
35934: PUSH
35935: LD_STRING 
35937: ST_TO_ADDR
// hc_name :=  ;
35938: LD_ADDR_OWVAR 26
35942: PUSH
35943: LD_STRING 
35945: ST_TO_ADDR
// end ;
35946: LD_VAR 0 1
35950: RET
// export function PrepareMastodont ( ) ; begin
35951: LD_INT 0
35953: PPUSH
// uc_side := 0 ;
35954: LD_ADDR_OWVAR 20
35958: PUSH
35959: LD_INT 0
35961: ST_TO_ADDR
// uc_nation := 0 ;
35962: LD_ADDR_OWVAR 21
35966: PUSH
35967: LD_INT 0
35969: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35970: LD_ADDR_OWVAR 37
35974: PUSH
35975: LD_INT 31
35977: ST_TO_ADDR
// vc_control := control_rider ;
35978: LD_ADDR_OWVAR 38
35982: PUSH
35983: LD_INT 4
35985: ST_TO_ADDR
// end ;
35986: LD_VAR 0 1
35990: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35991: LD_INT 0
35993: PPUSH
35994: PPUSH
35995: PPUSH
// uc_side = 0 ;
35996: LD_ADDR_OWVAR 20
36000: PUSH
36001: LD_INT 0
36003: ST_TO_ADDR
// uc_nation = 0 ;
36004: LD_ADDR_OWVAR 21
36008: PUSH
36009: LD_INT 0
36011: ST_TO_ADDR
// InitHc_All ( ) ;
36012: CALL_OW 584
// InitVc ;
36016: CALL_OW 20
// if mastodonts then
36020: LD_VAR 0 6
36024: IFFALSE 36091
// for i = 1 to mastodonts do
36026: LD_ADDR_VAR 0 11
36030: PUSH
36031: DOUBLE
36032: LD_INT 1
36034: DEC
36035: ST_TO_ADDR
36036: LD_VAR 0 6
36040: PUSH
36041: FOR_TO
36042: IFFALSE 36089
// begin vc_chassis := 31 ;
36044: LD_ADDR_OWVAR 37
36048: PUSH
36049: LD_INT 31
36051: ST_TO_ADDR
// vc_control := control_rider ;
36052: LD_ADDR_OWVAR 38
36056: PUSH
36057: LD_INT 4
36059: ST_TO_ADDR
// animal := CreateVehicle ;
36060: LD_ADDR_VAR 0 12
36064: PUSH
36065: CALL_OW 45
36069: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36070: LD_VAR 0 12
36074: PPUSH
36075: LD_VAR 0 8
36079: PPUSH
36080: LD_INT 0
36082: PPUSH
36083: CALL 38233 0 3
// end ;
36087: GO 36041
36089: POP
36090: POP
// if horses then
36091: LD_VAR 0 5
36095: IFFALSE 36162
// for i = 1 to horses do
36097: LD_ADDR_VAR 0 11
36101: PUSH
36102: DOUBLE
36103: LD_INT 1
36105: DEC
36106: ST_TO_ADDR
36107: LD_VAR 0 5
36111: PUSH
36112: FOR_TO
36113: IFFALSE 36160
// begin hc_class := 21 ;
36115: LD_ADDR_OWVAR 28
36119: PUSH
36120: LD_INT 21
36122: ST_TO_ADDR
// hc_gallery :=  ;
36123: LD_ADDR_OWVAR 33
36127: PUSH
36128: LD_STRING 
36130: ST_TO_ADDR
// animal := CreateHuman ;
36131: LD_ADDR_VAR 0 12
36135: PUSH
36136: CALL_OW 44
36140: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36141: LD_VAR 0 12
36145: PPUSH
36146: LD_VAR 0 8
36150: PPUSH
36151: LD_INT 0
36153: PPUSH
36154: CALL 38233 0 3
// end ;
36158: GO 36112
36160: POP
36161: POP
// if birds then
36162: LD_VAR 0 1
36166: IFFALSE 36233
// for i = 1 to birds do
36168: LD_ADDR_VAR 0 11
36172: PUSH
36173: DOUBLE
36174: LD_INT 1
36176: DEC
36177: ST_TO_ADDR
36178: LD_VAR 0 1
36182: PUSH
36183: FOR_TO
36184: IFFALSE 36231
// begin hc_class := 18 ;
36186: LD_ADDR_OWVAR 28
36190: PUSH
36191: LD_INT 18
36193: ST_TO_ADDR
// hc_gallery =  ;
36194: LD_ADDR_OWVAR 33
36198: PUSH
36199: LD_STRING 
36201: ST_TO_ADDR
// animal := CreateHuman ;
36202: LD_ADDR_VAR 0 12
36206: PUSH
36207: CALL_OW 44
36211: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36212: LD_VAR 0 12
36216: PPUSH
36217: LD_VAR 0 8
36221: PPUSH
36222: LD_INT 0
36224: PPUSH
36225: CALL 38233 0 3
// end ;
36229: GO 36183
36231: POP
36232: POP
// if tigers then
36233: LD_VAR 0 2
36237: IFFALSE 36321
// for i = 1 to tigers do
36239: LD_ADDR_VAR 0 11
36243: PUSH
36244: DOUBLE
36245: LD_INT 1
36247: DEC
36248: ST_TO_ADDR
36249: LD_VAR 0 2
36253: PUSH
36254: FOR_TO
36255: IFFALSE 36319
// begin hc_class = class_tiger ;
36257: LD_ADDR_OWVAR 28
36261: PUSH
36262: LD_INT 14
36264: ST_TO_ADDR
// hc_gallery =  ;
36265: LD_ADDR_OWVAR 33
36269: PUSH
36270: LD_STRING 
36272: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36273: LD_ADDR_OWVAR 35
36277: PUSH
36278: LD_INT 7
36280: NEG
36281: PPUSH
36282: LD_INT 7
36284: PPUSH
36285: CALL_OW 12
36289: ST_TO_ADDR
// animal := CreateHuman ;
36290: LD_ADDR_VAR 0 12
36294: PUSH
36295: CALL_OW 44
36299: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36300: LD_VAR 0 12
36304: PPUSH
36305: LD_VAR 0 8
36309: PPUSH
36310: LD_INT 0
36312: PPUSH
36313: CALL 38233 0 3
// end ;
36317: GO 36254
36319: POP
36320: POP
// if apemans then
36321: LD_VAR 0 3
36325: IFFALSE 36448
// for i = 1 to apemans do
36327: LD_ADDR_VAR 0 11
36331: PUSH
36332: DOUBLE
36333: LD_INT 1
36335: DEC
36336: ST_TO_ADDR
36337: LD_VAR 0 3
36341: PUSH
36342: FOR_TO
36343: IFFALSE 36446
// begin hc_class = class_apeman ;
36345: LD_ADDR_OWVAR 28
36349: PUSH
36350: LD_INT 12
36352: ST_TO_ADDR
// hc_gallery =  ;
36353: LD_ADDR_OWVAR 33
36357: PUSH
36358: LD_STRING 
36360: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36361: LD_ADDR_OWVAR 35
36365: PUSH
36366: LD_INT 2
36368: NEG
36369: PPUSH
36370: LD_INT 2
36372: PPUSH
36373: CALL_OW 12
36377: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36378: LD_ADDR_OWVAR 31
36382: PUSH
36383: LD_INT 1
36385: PPUSH
36386: LD_INT 3
36388: PPUSH
36389: CALL_OW 12
36393: PUSH
36394: LD_INT 1
36396: PPUSH
36397: LD_INT 3
36399: PPUSH
36400: CALL_OW 12
36404: PUSH
36405: LD_INT 0
36407: PUSH
36408: LD_INT 0
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: ST_TO_ADDR
// animal := CreateHuman ;
36417: LD_ADDR_VAR 0 12
36421: PUSH
36422: CALL_OW 44
36426: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36427: LD_VAR 0 12
36431: PPUSH
36432: LD_VAR 0 8
36436: PPUSH
36437: LD_INT 0
36439: PPUSH
36440: CALL 38233 0 3
// end ;
36444: GO 36342
36446: POP
36447: POP
// if enchidnas then
36448: LD_VAR 0 4
36452: IFFALSE 36519
// for i = 1 to enchidnas do
36454: LD_ADDR_VAR 0 11
36458: PUSH
36459: DOUBLE
36460: LD_INT 1
36462: DEC
36463: ST_TO_ADDR
36464: LD_VAR 0 4
36468: PUSH
36469: FOR_TO
36470: IFFALSE 36517
// begin hc_class = 13 ;
36472: LD_ADDR_OWVAR 28
36476: PUSH
36477: LD_INT 13
36479: ST_TO_ADDR
// hc_gallery =  ;
36480: LD_ADDR_OWVAR 33
36484: PUSH
36485: LD_STRING 
36487: ST_TO_ADDR
// animal := CreateHuman ;
36488: LD_ADDR_VAR 0 12
36492: PUSH
36493: CALL_OW 44
36497: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36498: LD_VAR 0 12
36502: PPUSH
36503: LD_VAR 0 8
36507: PPUSH
36508: LD_INT 0
36510: PPUSH
36511: CALL 38233 0 3
// end ;
36515: GO 36469
36517: POP
36518: POP
// if fishes then
36519: LD_VAR 0 7
36523: IFFALSE 36590
// for i = 1 to fishes do
36525: LD_ADDR_VAR 0 11
36529: PUSH
36530: DOUBLE
36531: LD_INT 1
36533: DEC
36534: ST_TO_ADDR
36535: LD_VAR 0 7
36539: PUSH
36540: FOR_TO
36541: IFFALSE 36588
// begin hc_class = 20 ;
36543: LD_ADDR_OWVAR 28
36547: PUSH
36548: LD_INT 20
36550: ST_TO_ADDR
// hc_gallery =  ;
36551: LD_ADDR_OWVAR 33
36555: PUSH
36556: LD_STRING 
36558: ST_TO_ADDR
// animal := CreateHuman ;
36559: LD_ADDR_VAR 0 12
36563: PUSH
36564: CALL_OW 44
36568: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36569: LD_VAR 0 12
36573: PPUSH
36574: LD_VAR 0 9
36578: PPUSH
36579: LD_INT 0
36581: PPUSH
36582: CALL 38233 0 3
// end ;
36586: GO 36540
36588: POP
36589: POP
// end ;
36590: LD_VAR 0 10
36594: RET
// export function WantHeal ( sci , unit ) ; begin
36595: LD_INT 0
36597: PPUSH
// if GetTaskList ( sci ) > 0 then
36598: LD_VAR 0 1
36602: PPUSH
36603: CALL_OW 437
36607: PUSH
36608: LD_INT 0
36610: GREATER
36611: IFFALSE 36683
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36613: LD_VAR 0 1
36617: PPUSH
36618: CALL_OW 437
36622: PUSH
36623: LD_INT 1
36625: ARRAY
36626: PUSH
36627: LD_INT 1
36629: ARRAY
36630: PUSH
36631: LD_STRING l
36633: EQUAL
36634: IFFALSE 36661
36636: PUSH
36637: LD_VAR 0 1
36641: PPUSH
36642: CALL_OW 437
36646: PUSH
36647: LD_INT 1
36649: ARRAY
36650: PUSH
36651: LD_INT 4
36653: ARRAY
36654: PUSH
36655: LD_VAR 0 2
36659: EQUAL
36660: AND
36661: IFFALSE 36673
// result := true else
36663: LD_ADDR_VAR 0 3
36667: PUSH
36668: LD_INT 1
36670: ST_TO_ADDR
36671: GO 36681
// result := false ;
36673: LD_ADDR_VAR 0 3
36677: PUSH
36678: LD_INT 0
36680: ST_TO_ADDR
// end else
36681: GO 36691
// result := false ;
36683: LD_ADDR_VAR 0 3
36687: PUSH
36688: LD_INT 0
36690: ST_TO_ADDR
// end ;
36691: LD_VAR 0 3
36695: RET
// export function HealTarget ( sci ) ; begin
36696: LD_INT 0
36698: PPUSH
// if not sci then
36699: LD_VAR 0 1
36703: NOT
36704: IFFALSE 36708
// exit ;
36706: GO 36773
// result := 0 ;
36708: LD_ADDR_VAR 0 2
36712: PUSH
36713: LD_INT 0
36715: ST_TO_ADDR
// if GetTaskList ( sci ) then
36716: LD_VAR 0 1
36720: PPUSH
36721: CALL_OW 437
36725: IFFALSE 36773
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36727: LD_VAR 0 1
36731: PPUSH
36732: CALL_OW 437
36736: PUSH
36737: LD_INT 1
36739: ARRAY
36740: PUSH
36741: LD_INT 1
36743: ARRAY
36744: PUSH
36745: LD_STRING l
36747: EQUAL
36748: IFFALSE 36773
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36750: LD_ADDR_VAR 0 2
36754: PUSH
36755: LD_VAR 0 1
36759: PPUSH
36760: CALL_OW 437
36764: PUSH
36765: LD_INT 1
36767: ARRAY
36768: PUSH
36769: LD_INT 4
36771: ARRAY
36772: ST_TO_ADDR
// end ;
36773: LD_VAR 0 2
36777: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36778: LD_INT 0
36780: PPUSH
36781: PPUSH
36782: PPUSH
36783: PPUSH
// if not base_units then
36784: LD_VAR 0 1
36788: NOT
36789: IFFALSE 36793
// exit ;
36791: GO 36880
// result := false ;
36793: LD_ADDR_VAR 0 2
36797: PUSH
36798: LD_INT 0
36800: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36801: LD_ADDR_VAR 0 5
36805: PUSH
36806: LD_VAR 0 1
36810: PPUSH
36811: LD_INT 21
36813: PUSH
36814: LD_INT 3
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PPUSH
36821: CALL_OW 72
36825: ST_TO_ADDR
// if not tmp then
36826: LD_VAR 0 5
36830: NOT
36831: IFFALSE 36835
// exit ;
36833: GO 36880
// for i in tmp do
36835: LD_ADDR_VAR 0 3
36839: PUSH
36840: LD_VAR 0 5
36844: PUSH
36845: FOR_IN
36846: IFFALSE 36878
// begin result := EnemyInRange ( i , 22 ) ;
36848: LD_ADDR_VAR 0 2
36852: PUSH
36853: LD_VAR 0 3
36857: PPUSH
36858: LD_INT 22
36860: PPUSH
36861: CALL 34295 0 2
36865: ST_TO_ADDR
// if result then
36866: LD_VAR 0 2
36870: IFFALSE 36876
// exit ;
36872: POP
36873: POP
36874: GO 36880
// end ;
36876: GO 36845
36878: POP
36879: POP
// end ;
36880: LD_VAR 0 2
36884: RET
// export function FilterByTag ( units , tag ) ; begin
36885: LD_INT 0
36887: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36888: LD_ADDR_VAR 0 3
36892: PUSH
36893: LD_VAR 0 1
36897: PPUSH
36898: LD_INT 120
36900: PUSH
36901: LD_VAR 0 2
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PPUSH
36910: CALL_OW 72
36914: ST_TO_ADDR
// end ;
36915: LD_VAR 0 3
36919: RET
// export function IsDriver ( un ) ; begin
36920: LD_INT 0
36922: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36923: LD_ADDR_VAR 0 2
36927: PUSH
36928: LD_VAR 0 1
36932: PUSH
36933: LD_INT 55
36935: PUSH
36936: EMPTY
36937: LIST
36938: PPUSH
36939: CALL_OW 69
36943: IN
36944: ST_TO_ADDR
// end ;
36945: LD_VAR 0 2
36949: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36950: LD_INT 0
36952: PPUSH
36953: PPUSH
// list := [ ] ;
36954: LD_ADDR_VAR 0 5
36958: PUSH
36959: EMPTY
36960: ST_TO_ADDR
// case d of 0 :
36961: LD_VAR 0 3
36965: PUSH
36966: LD_INT 0
36968: DOUBLE
36969: EQUAL
36970: IFTRUE 36974
36972: GO 37107
36974: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36975: LD_ADDR_VAR 0 5
36979: PUSH
36980: LD_VAR 0 1
36984: PUSH
36985: LD_INT 4
36987: MINUS
36988: PUSH
36989: LD_VAR 0 2
36993: PUSH
36994: LD_INT 4
36996: MINUS
36997: PUSH
36998: LD_INT 2
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: LIST
37005: PUSH
37006: LD_VAR 0 1
37010: PUSH
37011: LD_INT 3
37013: MINUS
37014: PUSH
37015: LD_VAR 0 2
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: LIST
37027: PUSH
37028: LD_VAR 0 1
37032: PUSH
37033: LD_INT 4
37035: PLUS
37036: PUSH
37037: LD_VAR 0 2
37041: PUSH
37042: LD_INT 4
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: PUSH
37050: LD_VAR 0 1
37054: PUSH
37055: LD_INT 3
37057: PLUS
37058: PUSH
37059: LD_VAR 0 2
37063: PUSH
37064: LD_INT 3
37066: PLUS
37067: PUSH
37068: LD_INT 5
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: LIST
37075: PUSH
37076: LD_VAR 0 1
37080: PUSH
37081: LD_VAR 0 2
37085: PUSH
37086: LD_INT 4
37088: PLUS
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: LIST
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: ST_TO_ADDR
// end ; 1 :
37105: GO 37805
37107: LD_INT 1
37109: DOUBLE
37110: EQUAL
37111: IFTRUE 37115
37113: GO 37248
37115: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37116: LD_ADDR_VAR 0 5
37120: PUSH
37121: LD_VAR 0 1
37125: PUSH
37126: LD_VAR 0 2
37130: PUSH
37131: LD_INT 4
37133: MINUS
37134: PUSH
37135: LD_INT 3
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: LIST
37142: PUSH
37143: LD_VAR 0 1
37147: PUSH
37148: LD_INT 3
37150: MINUS
37151: PUSH
37152: LD_VAR 0 2
37156: PUSH
37157: LD_INT 3
37159: MINUS
37160: PUSH
37161: LD_INT 2
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: LIST
37168: PUSH
37169: LD_VAR 0 1
37173: PUSH
37174: LD_INT 4
37176: MINUS
37177: PUSH
37178: LD_VAR 0 2
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: LIST
37190: PUSH
37191: LD_VAR 0 1
37195: PUSH
37196: LD_VAR 0 2
37200: PUSH
37201: LD_INT 3
37203: PLUS
37204: PUSH
37205: LD_INT 0
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: LIST
37212: PUSH
37213: LD_VAR 0 1
37217: PUSH
37218: LD_INT 4
37220: PLUS
37221: PUSH
37222: LD_VAR 0 2
37226: PUSH
37227: LD_INT 4
37229: PLUS
37230: PUSH
37231: LD_INT 5
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: LIST
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: ST_TO_ADDR
// end ; 2 :
37246: GO 37805
37248: LD_INT 2
37250: DOUBLE
37251: EQUAL
37252: IFTRUE 37256
37254: GO 37385
37256: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37257: LD_ADDR_VAR 0 5
37261: PUSH
37262: LD_VAR 0 1
37266: PUSH
37267: LD_VAR 0 2
37271: PUSH
37272: LD_INT 3
37274: MINUS
37275: PUSH
37276: LD_INT 3
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: LIST
37283: PUSH
37284: LD_VAR 0 1
37288: PUSH
37289: LD_INT 4
37291: PLUS
37292: PUSH
37293: LD_VAR 0 2
37297: PUSH
37298: LD_INT 4
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: LIST
37305: PUSH
37306: LD_VAR 0 1
37310: PUSH
37311: LD_VAR 0 2
37315: PUSH
37316: LD_INT 4
37318: PLUS
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: LIST
37327: PUSH
37328: LD_VAR 0 1
37332: PUSH
37333: LD_INT 3
37335: MINUS
37336: PUSH
37337: LD_VAR 0 2
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: LIST
37349: PUSH
37350: LD_VAR 0 1
37354: PUSH
37355: LD_INT 4
37357: MINUS
37358: PUSH
37359: LD_VAR 0 2
37363: PUSH
37364: LD_INT 4
37366: MINUS
37367: PUSH
37368: LD_INT 2
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: LIST
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: ST_TO_ADDR
// end ; 3 :
37383: GO 37805
37385: LD_INT 3
37387: DOUBLE
37388: EQUAL
37389: IFTRUE 37393
37391: GO 37526
37393: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37394: LD_ADDR_VAR 0 5
37398: PUSH
37399: LD_VAR 0 1
37403: PUSH
37404: LD_INT 3
37406: PLUS
37407: PUSH
37408: LD_VAR 0 2
37412: PUSH
37413: LD_INT 4
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: LIST
37420: PUSH
37421: LD_VAR 0 1
37425: PUSH
37426: LD_INT 4
37428: PLUS
37429: PUSH
37430: LD_VAR 0 2
37434: PUSH
37435: LD_INT 4
37437: PLUS
37438: PUSH
37439: LD_INT 5
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: LIST
37446: PUSH
37447: LD_VAR 0 1
37451: PUSH
37452: LD_INT 4
37454: MINUS
37455: PUSH
37456: LD_VAR 0 2
37460: PUSH
37461: LD_INT 1
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: LIST
37468: PUSH
37469: LD_VAR 0 1
37473: PUSH
37474: LD_VAR 0 2
37478: PUSH
37479: LD_INT 4
37481: MINUS
37482: PUSH
37483: LD_INT 3
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: LIST
37490: PUSH
37491: LD_VAR 0 1
37495: PUSH
37496: LD_INT 3
37498: MINUS
37499: PUSH
37500: LD_VAR 0 2
37504: PUSH
37505: LD_INT 3
37507: MINUS
37508: PUSH
37509: LD_INT 2
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: LIST
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: ST_TO_ADDR
// end ; 4 :
37524: GO 37805
37526: LD_INT 4
37528: DOUBLE
37529: EQUAL
37530: IFTRUE 37534
37532: GO 37667
37534: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37535: LD_ADDR_VAR 0 5
37539: PUSH
37540: LD_VAR 0 1
37544: PUSH
37545: LD_VAR 0 2
37549: PUSH
37550: LD_INT 4
37552: PLUS
37553: PUSH
37554: LD_INT 0
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: LIST
37561: PUSH
37562: LD_VAR 0 1
37566: PUSH
37567: LD_INT 3
37569: PLUS
37570: PUSH
37571: LD_VAR 0 2
37575: PUSH
37576: LD_INT 3
37578: PLUS
37579: PUSH
37580: LD_INT 5
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: LIST
37587: PUSH
37588: LD_VAR 0 1
37592: PUSH
37593: LD_INT 4
37595: PLUS
37596: PUSH
37597: LD_VAR 0 2
37601: PUSH
37602: LD_INT 4
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: LIST
37609: PUSH
37610: LD_VAR 0 1
37614: PUSH
37615: LD_VAR 0 2
37619: PUSH
37620: LD_INT 3
37622: MINUS
37623: PUSH
37624: LD_INT 3
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: LIST
37631: PUSH
37632: LD_VAR 0 1
37636: PUSH
37637: LD_INT 4
37639: MINUS
37640: PUSH
37641: LD_VAR 0 2
37645: PUSH
37646: LD_INT 4
37648: MINUS
37649: PUSH
37650: LD_INT 2
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: ST_TO_ADDR
// end ; 5 :
37665: GO 37805
37667: LD_INT 5
37669: DOUBLE
37670: EQUAL
37671: IFTRUE 37675
37673: GO 37804
37675: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37676: LD_ADDR_VAR 0 5
37680: PUSH
37681: LD_VAR 0 1
37685: PUSH
37686: LD_INT 4
37688: MINUS
37689: PUSH
37690: LD_VAR 0 2
37694: PUSH
37695: LD_INT 1
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: LIST
37702: PUSH
37703: LD_VAR 0 1
37707: PUSH
37708: LD_VAR 0 2
37712: PUSH
37713: LD_INT 4
37715: MINUS
37716: PUSH
37717: LD_INT 3
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: LIST
37724: PUSH
37725: LD_VAR 0 1
37729: PUSH
37730: LD_INT 4
37732: PLUS
37733: PUSH
37734: LD_VAR 0 2
37738: PUSH
37739: LD_INT 4
37741: PLUS
37742: PUSH
37743: LD_INT 5
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: LIST
37750: PUSH
37751: LD_VAR 0 1
37755: PUSH
37756: LD_INT 3
37758: PLUS
37759: PUSH
37760: LD_VAR 0 2
37764: PUSH
37765: LD_INT 4
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: LIST
37772: PUSH
37773: LD_VAR 0 1
37777: PUSH
37778: LD_VAR 0 2
37782: PUSH
37783: LD_INT 3
37785: PLUS
37786: PUSH
37787: LD_INT 0
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: LIST
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: ST_TO_ADDR
// end ; end ;
37802: GO 37805
37804: POP
// result := list ;
37805: LD_ADDR_VAR 0 4
37809: PUSH
37810: LD_VAR 0 5
37814: ST_TO_ADDR
// end ;
37815: LD_VAR 0 4
37819: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37820: LD_INT 0
37822: PPUSH
37823: PPUSH
37824: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37825: LD_VAR 0 1
37829: NOT
37830: IFTRUE 37858
37832: PUSH
37833: LD_VAR 0 2
37837: PUSH
37838: LD_INT 1
37840: PUSH
37841: LD_INT 2
37843: PUSH
37844: LD_INT 3
37846: PUSH
37847: LD_INT 4
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: IN
37856: NOT
37857: OR
37858: IFFALSE 37862
// exit ;
37860: GO 37945
// tmp := [ ] ;
37862: LD_ADDR_VAR 0 5
37866: PUSH
37867: EMPTY
37868: ST_TO_ADDR
// for i in units do
37869: LD_ADDR_VAR 0 4
37873: PUSH
37874: LD_VAR 0 1
37878: PUSH
37879: FOR_IN
37880: IFFALSE 37914
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37882: LD_ADDR_VAR 0 5
37886: PUSH
37887: LD_VAR 0 5
37891: PPUSH
37892: LD_VAR 0 4
37896: PPUSH
37897: LD_VAR 0 2
37901: PPUSH
37902: CALL_OW 259
37906: PPUSH
37907: CALL 39340 0 2
37911: ST_TO_ADDR
37912: GO 37879
37914: POP
37915: POP
// if not tmp then
37916: LD_VAR 0 5
37920: NOT
37921: IFFALSE 37925
// exit ;
37923: GO 37945
// result := SortListByListDesc ( units , tmp ) ;
37925: LD_ADDR_VAR 0 3
37929: PUSH
37930: LD_VAR 0 1
37934: PPUSH
37935: LD_VAR 0 5
37939: PPUSH
37940: CALL_OW 77
37944: ST_TO_ADDR
// end ;
37945: LD_VAR 0 3
37949: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37950: LD_INT 0
37952: PPUSH
37953: PPUSH
37954: PPUSH
// result := false ;
37955: LD_ADDR_VAR 0 3
37959: PUSH
37960: LD_INT 0
37962: ST_TO_ADDR
// if not building then
37963: LD_VAR 0 2
37967: NOT
37968: IFFALSE 37972
// exit ;
37970: GO 38116
// x := GetX ( building ) ;
37972: LD_ADDR_VAR 0 4
37976: PUSH
37977: LD_VAR 0 2
37981: PPUSH
37982: CALL_OW 250
37986: ST_TO_ADDR
// y := GetY ( building ) ;
37987: LD_ADDR_VAR 0 5
37991: PUSH
37992: LD_VAR 0 2
37996: PPUSH
37997: CALL_OW 251
38001: ST_TO_ADDR
// if not x or not y then
38002: LD_VAR 0 4
38006: NOT
38007: IFTRUE 38016
38009: PUSH
38010: LD_VAR 0 5
38014: NOT
38015: OR
38016: IFFALSE 38020
// exit ;
38018: GO 38116
// if GetTaskList ( unit ) then
38020: LD_VAR 0 1
38024: PPUSH
38025: CALL_OW 437
38029: IFFALSE 38116
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38031: LD_STRING e
38033: PUSH
38034: LD_VAR 0 1
38038: PPUSH
38039: CALL_OW 437
38043: PUSH
38044: LD_INT 1
38046: ARRAY
38047: PUSH
38048: LD_INT 1
38050: ARRAY
38051: EQUAL
38052: IFFALSE 38079
38054: PUSH
38055: LD_VAR 0 4
38059: PUSH
38060: LD_VAR 0 1
38064: PPUSH
38065: CALL_OW 437
38069: PUSH
38070: LD_INT 1
38072: ARRAY
38073: PUSH
38074: LD_INT 2
38076: ARRAY
38077: EQUAL
38078: AND
38079: IFFALSE 38106
38081: PUSH
38082: LD_VAR 0 5
38086: PUSH
38087: LD_VAR 0 1
38091: PPUSH
38092: CALL_OW 437
38096: PUSH
38097: LD_INT 1
38099: ARRAY
38100: PUSH
38101: LD_INT 3
38103: ARRAY
38104: EQUAL
38105: AND
38106: IFFALSE 38116
// result := true end ;
38108: LD_ADDR_VAR 0 3
38112: PUSH
38113: LD_INT 1
38115: ST_TO_ADDR
// end ;
38116: LD_VAR 0 3
38120: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38121: LD_INT 0
38123: PPUSH
// result := false ;
38124: LD_ADDR_VAR 0 4
38128: PUSH
38129: LD_INT 0
38131: ST_TO_ADDR
// if GetTaskList ( unit ) then
38132: LD_VAR 0 1
38136: PPUSH
38137: CALL_OW 437
38141: IFFALSE 38228
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38143: LD_STRING M
38145: PUSH
38146: LD_VAR 0 1
38150: PPUSH
38151: CALL_OW 437
38155: PUSH
38156: LD_INT 1
38158: ARRAY
38159: PUSH
38160: LD_INT 1
38162: ARRAY
38163: EQUAL
38164: IFFALSE 38191
38166: PUSH
38167: LD_VAR 0 2
38171: PUSH
38172: LD_VAR 0 1
38176: PPUSH
38177: CALL_OW 437
38181: PUSH
38182: LD_INT 1
38184: ARRAY
38185: PUSH
38186: LD_INT 2
38188: ARRAY
38189: EQUAL
38190: AND
38191: IFFALSE 38218
38193: PUSH
38194: LD_VAR 0 3
38198: PUSH
38199: LD_VAR 0 1
38203: PPUSH
38204: CALL_OW 437
38208: PUSH
38209: LD_INT 1
38211: ARRAY
38212: PUSH
38213: LD_INT 3
38215: ARRAY
38216: EQUAL
38217: AND
38218: IFFALSE 38228
// result := true ;
38220: LD_ADDR_VAR 0 4
38224: PUSH
38225: LD_INT 1
38227: ST_TO_ADDR
// end ; end ;
38228: LD_VAR 0 4
38232: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38233: LD_INT 0
38235: PPUSH
38236: PPUSH
38237: PPUSH
38238: PPUSH
// if not unit or not area then
38239: LD_VAR 0 1
38243: NOT
38244: IFTRUE 38253
38246: PUSH
38247: LD_VAR 0 2
38251: NOT
38252: OR
38253: IFFALSE 38257
// exit ;
38255: GO 38433
// tmp := AreaToList ( area , i ) ;
38257: LD_ADDR_VAR 0 6
38261: PUSH
38262: LD_VAR 0 2
38266: PPUSH
38267: LD_VAR 0 5
38271: PPUSH
38272: CALL_OW 517
38276: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38277: LD_ADDR_VAR 0 5
38281: PUSH
38282: DOUBLE
38283: LD_INT 1
38285: DEC
38286: ST_TO_ADDR
38287: LD_VAR 0 6
38291: PUSH
38292: LD_INT 1
38294: ARRAY
38295: PUSH
38296: FOR_TO
38297: IFFALSE 38431
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38299: LD_ADDR_VAR 0 7
38303: PUSH
38304: LD_VAR 0 6
38308: PUSH
38309: LD_INT 1
38311: ARRAY
38312: PUSH
38313: LD_VAR 0 5
38317: ARRAY
38318: PUSH
38319: LD_VAR 0 6
38323: PUSH
38324: LD_INT 2
38326: ARRAY
38327: PUSH
38328: LD_VAR 0 5
38332: ARRAY
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38338: LD_INT 92
38340: PUSH
38341: LD_VAR 0 7
38345: PUSH
38346: LD_INT 1
38348: ARRAY
38349: PUSH
38350: LD_VAR 0 7
38354: PUSH
38355: LD_INT 2
38357: ARRAY
38358: PUSH
38359: LD_INT 2
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: PPUSH
38368: CALL_OW 69
38372: PUSH
38373: LD_INT 0
38375: EQUAL
38376: IFFALSE 38429
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38378: LD_VAR 0 1
38382: PPUSH
38383: LD_VAR 0 7
38387: PUSH
38388: LD_INT 1
38390: ARRAY
38391: PPUSH
38392: LD_VAR 0 7
38396: PUSH
38397: LD_INT 2
38399: ARRAY
38400: PPUSH
38401: LD_VAR 0 3
38405: PPUSH
38406: CALL_OW 48
// result := IsPlaced ( unit ) ;
38410: LD_ADDR_VAR 0 4
38414: PUSH
38415: LD_VAR 0 1
38419: PPUSH
38420: CALL_OW 305
38424: ST_TO_ADDR
// exit ;
38425: POP
38426: POP
38427: GO 38433
// end ; end ;
38429: GO 38296
38431: POP
38432: POP
// end ;
38433: LD_VAR 0 4
38437: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38438: LD_INT 0
38440: PPUSH
38441: PPUSH
38442: PPUSH
// if not side or side > 8 then
38443: LD_VAR 0 1
38447: NOT
38448: IFTRUE 38460
38450: PUSH
38451: LD_VAR 0 1
38455: PUSH
38456: LD_INT 8
38458: GREATER
38459: OR
38460: IFFALSE 38464
// exit ;
38462: GO 38651
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38464: LD_ADDR_VAR 0 4
38468: PUSH
38469: LD_INT 22
38471: PUSH
38472: LD_VAR 0 1
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 21
38483: PUSH
38484: LD_INT 3
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PPUSH
38495: CALL_OW 69
38499: ST_TO_ADDR
// if not tmp then
38500: LD_VAR 0 4
38504: NOT
38505: IFFALSE 38509
// exit ;
38507: GO 38651
// enable_addtolog := true ;
38509: LD_ADDR_OWVAR 81
38513: PUSH
38514: LD_INT 1
38516: ST_TO_ADDR
// AddToLog ( [ ) ;
38517: LD_STRING [
38519: PPUSH
38520: CALL_OW 561
// for i in tmp do
38524: LD_ADDR_VAR 0 3
38528: PUSH
38529: LD_VAR 0 4
38533: PUSH
38534: FOR_IN
38535: IFFALSE 38642
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38537: LD_STRING [
38539: PUSH
38540: LD_VAR 0 3
38544: PPUSH
38545: CALL_OW 266
38549: STR
38550: PUSH
38551: LD_STRING , 
38553: STR
38554: PUSH
38555: LD_VAR 0 3
38559: PPUSH
38560: CALL_OW 250
38564: STR
38565: PUSH
38566: LD_STRING , 
38568: STR
38569: PUSH
38570: LD_VAR 0 3
38574: PPUSH
38575: CALL_OW 251
38579: STR
38580: PUSH
38581: LD_STRING , 
38583: STR
38584: PUSH
38585: LD_VAR 0 3
38589: PPUSH
38590: CALL_OW 254
38594: STR
38595: PUSH
38596: LD_STRING , 
38598: STR
38599: PUSH
38600: LD_VAR 0 3
38604: PPUSH
38605: LD_INT 1
38607: PPUSH
38608: CALL_OW 268
38612: STR
38613: PUSH
38614: LD_STRING , 
38616: STR
38617: PUSH
38618: LD_VAR 0 3
38622: PPUSH
38623: LD_INT 2
38625: PPUSH
38626: CALL_OW 268
38630: STR
38631: PUSH
38632: LD_STRING ],
38634: STR
38635: PPUSH
38636: CALL_OW 561
// end ;
38640: GO 38534
38642: POP
38643: POP
// AddToLog ( ]; ) ;
38644: LD_STRING ];
38646: PPUSH
38647: CALL_OW 561
// end ;
38651: LD_VAR 0 2
38655: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38656: LD_INT 0
38658: PPUSH
38659: PPUSH
38660: PPUSH
38661: PPUSH
38662: PPUSH
// if not area or not rate or not max then
38663: LD_VAR 0 1
38667: NOT
38668: IFTRUE 38677
38670: PUSH
38671: LD_VAR 0 2
38675: NOT
38676: OR
38677: IFTRUE 38686
38679: PUSH
38680: LD_VAR 0 4
38684: NOT
38685: OR
38686: IFFALSE 38690
// exit ;
38688: GO 38879
// while 1 do
38690: LD_INT 1
38692: IFFALSE 38879
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38694: LD_ADDR_VAR 0 9
38698: PUSH
38699: LD_VAR 0 1
38703: PPUSH
38704: LD_INT 1
38706: PPUSH
38707: CALL_OW 287
38711: PUSH
38712: LD_INT 10
38714: MUL
38715: ST_TO_ADDR
// r := rate / 10 ;
38716: LD_ADDR_VAR 0 7
38720: PUSH
38721: LD_VAR 0 2
38725: PUSH
38726: LD_INT 10
38728: DIVREAL
38729: ST_TO_ADDR
// time := 1 1$00 ;
38730: LD_ADDR_VAR 0 8
38734: PUSH
38735: LD_INT 2100
38737: ST_TO_ADDR
// if amount < min then
38738: LD_VAR 0 9
38742: PUSH
38743: LD_VAR 0 3
38747: LESS
38748: IFFALSE 38766
// r := r * 2 else
38750: LD_ADDR_VAR 0 7
38754: PUSH
38755: LD_VAR 0 7
38759: PUSH
38760: LD_INT 2
38762: MUL
38763: ST_TO_ADDR
38764: GO 38792
// if amount > max then
38766: LD_VAR 0 9
38770: PUSH
38771: LD_VAR 0 4
38775: GREATER
38776: IFFALSE 38792
// r := r / 2 ;
38778: LD_ADDR_VAR 0 7
38782: PUSH
38783: LD_VAR 0 7
38787: PUSH
38788: LD_INT 2
38790: DIVREAL
38791: ST_TO_ADDR
// time := time / r ;
38792: LD_ADDR_VAR 0 8
38796: PUSH
38797: LD_VAR 0 8
38801: PUSH
38802: LD_VAR 0 7
38806: DIVREAL
38807: ST_TO_ADDR
// if time < 0 then
38808: LD_VAR 0 8
38812: PUSH
38813: LD_INT 0
38815: LESS
38816: IFFALSE 38833
// time := time * - 1 ;
38818: LD_ADDR_VAR 0 8
38822: PUSH
38823: LD_VAR 0 8
38827: PUSH
38828: LD_INT 1
38830: NEG
38831: MUL
38832: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38833: LD_VAR 0 8
38837: PUSH
38838: LD_INT 35
38840: PPUSH
38841: LD_INT 875
38843: PPUSH
38844: CALL_OW 12
38848: PLUS
38849: PPUSH
38850: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38854: LD_INT 1
38856: PPUSH
38857: LD_INT 5
38859: PPUSH
38860: CALL_OW 12
38864: PPUSH
38865: LD_VAR 0 1
38869: PPUSH
38870: LD_INT 1
38872: PPUSH
38873: CALL_OW 55
// end ;
38877: GO 38690
// end ;
38879: LD_VAR 0 5
38883: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38884: LD_INT 0
38886: PPUSH
38887: PPUSH
38888: PPUSH
38889: PPUSH
38890: PPUSH
38891: PPUSH
38892: PPUSH
38893: PPUSH
// if not turrets or not factories then
38894: LD_VAR 0 1
38898: NOT
38899: IFTRUE 38908
38901: PUSH
38902: LD_VAR 0 2
38906: NOT
38907: OR
38908: IFFALSE 38912
// exit ;
38910: GO 39219
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38912: LD_ADDR_VAR 0 10
38916: PUSH
38917: LD_INT 5
38919: PUSH
38920: LD_INT 6
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 2
38929: PUSH
38930: LD_INT 4
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 3
38939: PUSH
38940: LD_INT 5
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 24
38954: PUSH
38955: LD_INT 25
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 23
38964: PUSH
38965: LD_INT 27
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 42
38978: PUSH
38979: LD_INT 43
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 44
38988: PUSH
38989: LD_INT 46
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 45
38998: PUSH
38999: LD_INT 47
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: LIST
39015: ST_TO_ADDR
// result := [ ] ;
39016: LD_ADDR_VAR 0 3
39020: PUSH
39021: EMPTY
39022: ST_TO_ADDR
// for i in turrets do
39023: LD_ADDR_VAR 0 4
39027: PUSH
39028: LD_VAR 0 1
39032: PUSH
39033: FOR_IN
39034: IFFALSE 39217
// begin nat := GetNation ( i ) ;
39036: LD_ADDR_VAR 0 7
39040: PUSH
39041: LD_VAR 0 4
39045: PPUSH
39046: CALL_OW 248
39050: ST_TO_ADDR
// weapon := 0 ;
39051: LD_ADDR_VAR 0 8
39055: PUSH
39056: LD_INT 0
39058: ST_TO_ADDR
// if not nat then
39059: LD_VAR 0 7
39063: NOT
39064: IFFALSE 39068
// continue ;
39066: GO 39033
// for j in list [ nat ] do
39068: LD_ADDR_VAR 0 5
39072: PUSH
39073: LD_VAR 0 10
39077: PUSH
39078: LD_VAR 0 7
39082: ARRAY
39083: PUSH
39084: FOR_IN
39085: IFFALSE 39126
// if GetBWeapon ( i ) = j [ 1 ] then
39087: LD_VAR 0 4
39091: PPUSH
39092: CALL_OW 269
39096: PUSH
39097: LD_VAR 0 5
39101: PUSH
39102: LD_INT 1
39104: ARRAY
39105: EQUAL
39106: IFFALSE 39124
// begin weapon := j [ 2 ] ;
39108: LD_ADDR_VAR 0 8
39112: PUSH
39113: LD_VAR 0 5
39117: PUSH
39118: LD_INT 2
39120: ARRAY
39121: ST_TO_ADDR
// break ;
39122: GO 39126
// end ;
39124: GO 39084
39126: POP
39127: POP
// if not weapon then
39128: LD_VAR 0 8
39132: NOT
39133: IFFALSE 39137
// continue ;
39135: GO 39033
// for k in factories do
39137: LD_ADDR_VAR 0 6
39141: PUSH
39142: LD_VAR 0 2
39146: PUSH
39147: FOR_IN
39148: IFFALSE 39213
// begin weapons := AvailableWeaponList ( k ) ;
39150: LD_ADDR_VAR 0 9
39154: PUSH
39155: LD_VAR 0 6
39159: PPUSH
39160: CALL_OW 478
39164: ST_TO_ADDR
// if not weapons then
39165: LD_VAR 0 9
39169: NOT
39170: IFFALSE 39174
// continue ;
39172: GO 39147
// if weapon in weapons then
39174: LD_VAR 0 8
39178: PUSH
39179: LD_VAR 0 9
39183: IN
39184: IFFALSE 39211
// begin result := [ i , weapon ] ;
39186: LD_ADDR_VAR 0 3
39190: PUSH
39191: LD_VAR 0 4
39195: PUSH
39196: LD_VAR 0 8
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: ST_TO_ADDR
// exit ;
39205: POP
39206: POP
39207: POP
39208: POP
39209: GO 39219
// end ; end ;
39211: GO 39147
39213: POP
39214: POP
// end ;
39215: GO 39033
39217: POP
39218: POP
// end ;
39219: LD_VAR 0 3
39223: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39224: LD_INT 0
39226: PPUSH
// if not side or side > 8 then
39227: LD_VAR 0 3
39231: NOT
39232: IFTRUE 39244
39234: PUSH
39235: LD_VAR 0 3
39239: PUSH
39240: LD_INT 8
39242: GREATER
39243: OR
39244: IFFALSE 39248
// exit ;
39246: GO 39307
// if not range then
39248: LD_VAR 0 4
39252: NOT
39253: IFFALSE 39264
// range := - 12 ;
39255: LD_ADDR_VAR 0 4
39259: PUSH
39260: LD_INT 12
39262: NEG
39263: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39264: LD_VAR 0 1
39268: PPUSH
39269: LD_VAR 0 2
39273: PPUSH
39274: LD_VAR 0 3
39278: PPUSH
39279: LD_VAR 0 4
39283: PPUSH
39284: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39288: LD_VAR 0 1
39292: PPUSH
39293: LD_VAR 0 2
39297: PPUSH
39298: LD_VAR 0 3
39302: PPUSH
39303: CALL_OW 331
// end ;
39307: LD_VAR 0 5
39311: RET
// export function Video ( mode ) ; begin
39312: LD_INT 0
39314: PPUSH
// ingame_video = mode ;
39315: LD_ADDR_OWVAR 52
39319: PUSH
39320: LD_VAR 0 1
39324: ST_TO_ADDR
// interface_hidden = mode ;
39325: LD_ADDR_OWVAR 54
39329: PUSH
39330: LD_VAR 0 1
39334: ST_TO_ADDR
// end ;
39335: LD_VAR 0 2
39339: RET
// export function Join ( array , element ) ; begin
39340: LD_INT 0
39342: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39343: LD_ADDR_VAR 0 3
39347: PUSH
39348: LD_VAR 0 1
39352: PPUSH
39353: LD_VAR 0 1
39357: PUSH
39358: LD_INT 1
39360: PLUS
39361: PPUSH
39362: LD_VAR 0 2
39366: PPUSH
39367: CALL_OW 1
39371: ST_TO_ADDR
// end ;
39372: LD_VAR 0 3
39376: RET
// export function JoinUnion ( array , element ) ; begin
39377: LD_INT 0
39379: PPUSH
// result := array union element ;
39380: LD_ADDR_VAR 0 3
39384: PUSH
39385: LD_VAR 0 1
39389: PUSH
39390: LD_VAR 0 2
39394: UNION
39395: ST_TO_ADDR
// end ;
39396: LD_VAR 0 3
39400: RET
// export function GetBehemoths ( side ) ; begin
39401: LD_INT 0
39403: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39404: LD_ADDR_VAR 0 2
39408: PUSH
39409: LD_INT 22
39411: PUSH
39412: LD_VAR 0 1
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 31
39423: PUSH
39424: LD_INT 25
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PPUSH
39435: CALL_OW 69
39439: ST_TO_ADDR
// end ;
39440: LD_VAR 0 2
39444: RET
// export function Shuffle ( array ) ; var i , index ; begin
39445: LD_INT 0
39447: PPUSH
39448: PPUSH
39449: PPUSH
// result := [ ] ;
39450: LD_ADDR_VAR 0 2
39454: PUSH
39455: EMPTY
39456: ST_TO_ADDR
// if not array then
39457: LD_VAR 0 1
39461: NOT
39462: IFFALSE 39466
// exit ;
39464: GO 39565
// Randomize ;
39466: CALL_OW 10
// for i = array downto 1 do
39470: LD_ADDR_VAR 0 3
39474: PUSH
39475: DOUBLE
39476: LD_VAR 0 1
39480: INC
39481: ST_TO_ADDR
39482: LD_INT 1
39484: PUSH
39485: FOR_DOWNTO
39486: IFFALSE 39563
// begin index := rand ( 1 , array ) ;
39488: LD_ADDR_VAR 0 4
39492: PUSH
39493: LD_INT 1
39495: PPUSH
39496: LD_VAR 0 1
39500: PPUSH
39501: CALL_OW 12
39505: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39506: LD_ADDR_VAR 0 2
39510: PUSH
39511: LD_VAR 0 2
39515: PPUSH
39516: LD_VAR 0 2
39520: PUSH
39521: LD_INT 1
39523: PLUS
39524: PPUSH
39525: LD_VAR 0 1
39529: PUSH
39530: LD_VAR 0 4
39534: ARRAY
39535: PPUSH
39536: CALL_OW 2
39540: ST_TO_ADDR
// array := Delete ( array , index ) ;
39541: LD_ADDR_VAR 0 1
39545: PUSH
39546: LD_VAR 0 1
39550: PPUSH
39551: LD_VAR 0 4
39555: PPUSH
39556: CALL_OW 3
39560: ST_TO_ADDR
// end ;
39561: GO 39485
39563: POP
39564: POP
// end ;
39565: LD_VAR 0 2
39569: RET
// export function GetBaseMaterials ( base ) ; begin
39570: LD_INT 0
39572: PPUSH
// result := [ 0 , 0 , 0 ] ;
39573: LD_ADDR_VAR 0 2
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: LIST
39591: ST_TO_ADDR
// if not base then
39592: LD_VAR 0 1
39596: NOT
39597: IFFALSE 39601
// exit ;
39599: GO 39650
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39601: LD_ADDR_VAR 0 2
39605: PUSH
39606: LD_VAR 0 1
39610: PPUSH
39611: LD_INT 1
39613: PPUSH
39614: CALL_OW 275
39618: PUSH
39619: LD_VAR 0 1
39623: PPUSH
39624: LD_INT 2
39626: PPUSH
39627: CALL_OW 275
39631: PUSH
39632: LD_VAR 0 1
39636: PPUSH
39637: LD_INT 3
39639: PPUSH
39640: CALL_OW 275
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: LIST
39649: ST_TO_ADDR
// end ;
39650: LD_VAR 0 2
39654: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39655: LD_INT 0
39657: PPUSH
39658: PPUSH
// result := array ;
39659: LD_ADDR_VAR 0 3
39663: PUSH
39664: LD_VAR 0 1
39668: ST_TO_ADDR
// if size >= result then
39669: LD_VAR 0 2
39673: PUSH
39674: LD_VAR 0 3
39678: GREATEREQUAL
39679: IFFALSE 39683
// exit ;
39681: GO 39733
// if size then
39683: LD_VAR 0 2
39687: IFFALSE 39733
// for i := array downto size do
39689: LD_ADDR_VAR 0 4
39693: PUSH
39694: DOUBLE
39695: LD_VAR 0 1
39699: INC
39700: ST_TO_ADDR
39701: LD_VAR 0 2
39705: PUSH
39706: FOR_DOWNTO
39707: IFFALSE 39731
// result := Delete ( result , result ) ;
39709: LD_ADDR_VAR 0 3
39713: PUSH
39714: LD_VAR 0 3
39718: PPUSH
39719: LD_VAR 0 3
39723: PPUSH
39724: CALL_OW 3
39728: ST_TO_ADDR
39729: GO 39706
39731: POP
39732: POP
// end ;
39733: LD_VAR 0 3
39737: RET
// export function ComExit ( unit ) ; var tmp ; begin
39738: LD_INT 0
39740: PPUSH
39741: PPUSH
// if not IsInUnit ( unit ) then
39742: LD_VAR 0 1
39746: PPUSH
39747: CALL_OW 310
39751: NOT
39752: IFFALSE 39756
// exit ;
39754: GO 39816
// tmp := IsInUnit ( unit ) ;
39756: LD_ADDR_VAR 0 3
39760: PUSH
39761: LD_VAR 0 1
39765: PPUSH
39766: CALL_OW 310
39770: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39771: LD_VAR 0 3
39775: PPUSH
39776: CALL_OW 247
39780: PUSH
39781: LD_INT 2
39783: EQUAL
39784: IFFALSE 39797
// ComExitVehicle ( unit ) else
39786: LD_VAR 0 1
39790: PPUSH
39791: CALL_OW 121
39795: GO 39806
// ComExitBuilding ( unit ) ;
39797: LD_VAR 0 1
39801: PPUSH
39802: CALL_OW 122
// result := tmp ;
39806: LD_ADDR_VAR 0 2
39810: PUSH
39811: LD_VAR 0 3
39815: ST_TO_ADDR
// end ;
39816: LD_VAR 0 2
39820: RET
// export function ComExitAll ( units ) ; var i ; begin
39821: LD_INT 0
39823: PPUSH
39824: PPUSH
// if not units then
39825: LD_VAR 0 1
39829: NOT
39830: IFFALSE 39834
// exit ;
39832: GO 39860
// for i in units do
39834: LD_ADDR_VAR 0 3
39838: PUSH
39839: LD_VAR 0 1
39843: PUSH
39844: FOR_IN
39845: IFFALSE 39858
// ComExit ( i ) ;
39847: LD_VAR 0 3
39851: PPUSH
39852: CALL 39738 0 1
39856: GO 39844
39858: POP
39859: POP
// end ;
39860: LD_VAR 0 2
39864: RET
// export function ResetHc ; begin
39865: LD_INT 0
39867: PPUSH
// InitHc ;
39868: CALL_OW 19
// hc_importance := 0 ;
39872: LD_ADDR_OWVAR 32
39876: PUSH
39877: LD_INT 0
39879: ST_TO_ADDR
// end ;
39880: LD_VAR 0 1
39884: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39885: LD_INT 0
39887: PPUSH
39888: PPUSH
39889: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39890: LD_ADDR_VAR 0 6
39894: PUSH
39895: LD_VAR 0 1
39899: PUSH
39900: LD_VAR 0 3
39904: PLUS
39905: PUSH
39906: LD_INT 2
39908: DIV
39909: ST_TO_ADDR
// if _x < 0 then
39910: LD_VAR 0 6
39914: PUSH
39915: LD_INT 0
39917: LESS
39918: IFFALSE 39935
// _x := _x * - 1 ;
39920: LD_ADDR_VAR 0 6
39924: PUSH
39925: LD_VAR 0 6
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: MUL
39934: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39935: LD_ADDR_VAR 0 7
39939: PUSH
39940: LD_VAR 0 2
39944: PUSH
39945: LD_VAR 0 4
39949: PLUS
39950: PUSH
39951: LD_INT 2
39953: DIV
39954: ST_TO_ADDR
// if _y < 0 then
39955: LD_VAR 0 7
39959: PUSH
39960: LD_INT 0
39962: LESS
39963: IFFALSE 39980
// _y := _y * - 1 ;
39965: LD_ADDR_VAR 0 7
39969: PUSH
39970: LD_VAR 0 7
39974: PUSH
39975: LD_INT 1
39977: NEG
39978: MUL
39979: ST_TO_ADDR
// result := [ _x , _y ] ;
39980: LD_ADDR_VAR 0 5
39984: PUSH
39985: LD_VAR 0 6
39989: PUSH
39990: LD_VAR 0 7
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: ST_TO_ADDR
// end ;
39999: LD_VAR 0 5
40003: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40004: LD_INT 0
40006: PPUSH
40007: PPUSH
40008: PPUSH
40009: PPUSH
// task := GetTaskList ( unit ) ;
40010: LD_ADDR_VAR 0 7
40014: PUSH
40015: LD_VAR 0 1
40019: PPUSH
40020: CALL_OW 437
40024: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40025: LD_VAR 0 7
40029: NOT
40030: IFFALSE 40049
40032: PUSH
40033: LD_VAR 0 1
40037: PPUSH
40038: LD_VAR 0 2
40042: PPUSH
40043: CALL_OW 308
40047: NOT
40048: AND
40049: IFFALSE 40053
// exit ;
40051: GO 40171
// if IsInArea ( unit , area ) then
40053: LD_VAR 0 1
40057: PPUSH
40058: LD_VAR 0 2
40062: PPUSH
40063: CALL_OW 308
40067: IFFALSE 40085
// begin ComMoveToArea ( unit , goAway ) ;
40069: LD_VAR 0 1
40073: PPUSH
40074: LD_VAR 0 3
40078: PPUSH
40079: CALL_OW 113
// exit ;
40083: GO 40171
// end ; if task [ 1 ] [ 1 ] <> M then
40085: LD_VAR 0 7
40089: PUSH
40090: LD_INT 1
40092: ARRAY
40093: PUSH
40094: LD_INT 1
40096: ARRAY
40097: PUSH
40098: LD_STRING M
40100: NONEQUAL
40101: IFFALSE 40105
// exit ;
40103: GO 40171
// x := task [ 1 ] [ 2 ] ;
40105: LD_ADDR_VAR 0 5
40109: PUSH
40110: LD_VAR 0 7
40114: PUSH
40115: LD_INT 1
40117: ARRAY
40118: PUSH
40119: LD_INT 2
40121: ARRAY
40122: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40123: LD_ADDR_VAR 0 6
40127: PUSH
40128: LD_VAR 0 7
40132: PUSH
40133: LD_INT 1
40135: ARRAY
40136: PUSH
40137: LD_INT 3
40139: ARRAY
40140: ST_TO_ADDR
// if InArea ( x , y , area ) then
40141: LD_VAR 0 5
40145: PPUSH
40146: LD_VAR 0 6
40150: PPUSH
40151: LD_VAR 0 2
40155: PPUSH
40156: CALL_OW 309
40160: IFFALSE 40171
// ComStop ( unit ) ;
40162: LD_VAR 0 1
40166: PPUSH
40167: CALL_OW 141
// end ;
40171: LD_VAR 0 4
40175: RET
// export function Abs ( value ) ; begin
40176: LD_INT 0
40178: PPUSH
// result := value ;
40179: LD_ADDR_VAR 0 2
40183: PUSH
40184: LD_VAR 0 1
40188: ST_TO_ADDR
// if value < 0 then
40189: LD_VAR 0 1
40193: PUSH
40194: LD_INT 0
40196: LESS
40197: IFFALSE 40214
// result := value * - 1 ;
40199: LD_ADDR_VAR 0 2
40203: PUSH
40204: LD_VAR 0 1
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: MUL
40213: ST_TO_ADDR
// end ;
40214: LD_VAR 0 2
40218: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40219: LD_INT 0
40221: PPUSH
40222: PPUSH
40223: PPUSH
40224: PPUSH
40225: PPUSH
40226: PPUSH
40227: PPUSH
40228: PPUSH
// if not unit or not building then
40229: LD_VAR 0 1
40233: NOT
40234: IFTRUE 40243
40236: PUSH
40237: LD_VAR 0 2
40241: NOT
40242: OR
40243: IFFALSE 40247
// exit ;
40245: GO 40475
// x := GetX ( building ) ;
40247: LD_ADDR_VAR 0 4
40251: PUSH
40252: LD_VAR 0 2
40256: PPUSH
40257: CALL_OW 250
40261: ST_TO_ADDR
// y := GetY ( building ) ;
40262: LD_ADDR_VAR 0 6
40266: PUSH
40267: LD_VAR 0 2
40271: PPUSH
40272: CALL_OW 251
40276: ST_TO_ADDR
// d := GetDir ( building ) ;
40277: LD_ADDR_VAR 0 8
40281: PUSH
40282: LD_VAR 0 2
40286: PPUSH
40287: CALL_OW 254
40291: ST_TO_ADDR
// r := 4 ;
40292: LD_ADDR_VAR 0 9
40296: PUSH
40297: LD_INT 4
40299: ST_TO_ADDR
// for i := 1 to 5 do
40300: LD_ADDR_VAR 0 10
40304: PUSH
40305: DOUBLE
40306: LD_INT 1
40308: DEC
40309: ST_TO_ADDR
40310: LD_INT 5
40312: PUSH
40313: FOR_TO
40314: IFFALSE 40473
// begin _x := ShiftX ( x , d , r + i ) ;
40316: LD_ADDR_VAR 0 5
40320: PUSH
40321: LD_VAR 0 4
40325: PPUSH
40326: LD_VAR 0 8
40330: PPUSH
40331: LD_VAR 0 9
40335: PUSH
40336: LD_VAR 0 10
40340: PLUS
40341: PPUSH
40342: CALL_OW 272
40346: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40347: LD_ADDR_VAR 0 7
40351: PUSH
40352: LD_VAR 0 6
40356: PPUSH
40357: LD_VAR 0 8
40361: PPUSH
40362: LD_VAR 0 9
40366: PUSH
40367: LD_VAR 0 10
40371: PLUS
40372: PPUSH
40373: CALL_OW 273
40377: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40378: LD_VAR 0 5
40382: PPUSH
40383: LD_VAR 0 7
40387: PPUSH
40388: CALL_OW 488
40392: IFFALSE 40427
40394: PUSH
40395: LD_VAR 0 5
40399: PPUSH
40400: LD_VAR 0 7
40404: PPUSH
40405: CALL_OW 428
40409: PPUSH
40410: CALL_OW 247
40414: PUSH
40415: LD_INT 3
40417: PUSH
40418: LD_INT 2
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: IN
40425: NOT
40426: AND
40427: IFFALSE 40471
// begin ComMoveXY ( unit , _x , _y ) ;
40429: LD_VAR 0 1
40433: PPUSH
40434: LD_VAR 0 5
40438: PPUSH
40439: LD_VAR 0 7
40443: PPUSH
40444: CALL_OW 111
// result := [ _x , _y ] ;
40448: LD_ADDR_VAR 0 3
40452: PUSH
40453: LD_VAR 0 5
40457: PUSH
40458: LD_VAR 0 7
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: ST_TO_ADDR
// exit ;
40467: POP
40468: POP
40469: GO 40475
// end ; end ;
40471: GO 40313
40473: POP
40474: POP
// end ;
40475: LD_VAR 0 3
40479: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40480: LD_INT 0
40482: PPUSH
40483: PPUSH
40484: PPUSH
// result := 0 ;
40485: LD_ADDR_VAR 0 3
40489: PUSH
40490: LD_INT 0
40492: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40493: LD_VAR 0 1
40497: PUSH
40498: LD_INT 0
40500: LESS
40501: IFTRUE 40513
40503: PUSH
40504: LD_VAR 0 1
40508: PUSH
40509: LD_INT 8
40511: GREATER
40512: OR
40513: IFTRUE 40525
40515: PUSH
40516: LD_VAR 0 2
40520: PUSH
40521: LD_INT 0
40523: LESS
40524: OR
40525: IFTRUE 40537
40527: PUSH
40528: LD_VAR 0 2
40532: PUSH
40533: LD_INT 8
40535: GREATER
40536: OR
40537: IFFALSE 40541
// exit ;
40539: GO 40616
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40541: LD_ADDR_VAR 0 4
40545: PUSH
40546: LD_INT 22
40548: PUSH
40549: LD_VAR 0 2
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PPUSH
40558: CALL_OW 69
40562: PUSH
40563: FOR_IN
40564: IFFALSE 40614
// begin un := UnitShoot ( i ) ;
40566: LD_ADDR_VAR 0 5
40570: PUSH
40571: LD_VAR 0 4
40575: PPUSH
40576: CALL_OW 504
40580: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40581: LD_VAR 0 5
40585: PPUSH
40586: CALL_OW 255
40590: PUSH
40591: LD_VAR 0 1
40595: EQUAL
40596: IFFALSE 40612
// begin result := un ;
40598: LD_ADDR_VAR 0 3
40602: PUSH
40603: LD_VAR 0 5
40607: ST_TO_ADDR
// exit ;
40608: POP
40609: POP
40610: GO 40616
// end ; end ;
40612: GO 40563
40614: POP
40615: POP
// end ;
40616: LD_VAR 0 3
40620: RET
// export function GetCargoBay ( units ) ; begin
40621: LD_INT 0
40623: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40624: LD_ADDR_VAR 0 2
40628: PUSH
40629: LD_VAR 0 1
40633: PPUSH
40634: LD_INT 2
40636: PUSH
40637: LD_INT 34
40639: PUSH
40640: LD_INT 12
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 34
40649: PUSH
40650: LD_INT 51
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 34
40659: PUSH
40660: LD_INT 32
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 34
40669: PUSH
40670: LD_INT 89
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: PPUSH
40684: CALL_OW 72
40688: ST_TO_ADDR
// end ;
40689: LD_VAR 0 2
40693: RET
// export function Negate ( value ) ; begin
40694: LD_INT 0
40696: PPUSH
// result := not value ;
40697: LD_ADDR_VAR 0 2
40701: PUSH
40702: LD_VAR 0 1
40706: NOT
40707: ST_TO_ADDR
// end ;
40708: LD_VAR 0 2
40712: RET
// export function Inc ( value ) ; begin
40713: LD_INT 0
40715: PPUSH
// result := value + 1 ;
40716: LD_ADDR_VAR 0 2
40720: PUSH
40721: LD_VAR 0 1
40725: PUSH
40726: LD_INT 1
40728: PLUS
40729: ST_TO_ADDR
// end ;
40730: LD_VAR 0 2
40734: RET
// export function Dec ( value ) ; begin
40735: LD_INT 0
40737: PPUSH
// result := value - 1 ;
40738: LD_ADDR_VAR 0 2
40742: PUSH
40743: LD_VAR 0 1
40747: PUSH
40748: LD_INT 1
40750: MINUS
40751: ST_TO_ADDR
// end ;
40752: LD_VAR 0 2
40756: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40757: LD_INT 0
40759: PPUSH
40760: PPUSH
40761: PPUSH
40762: PPUSH
40763: PPUSH
40764: PPUSH
40765: PPUSH
40766: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40767: LD_VAR 0 1
40771: PPUSH
40772: LD_VAR 0 2
40776: PPUSH
40777: CALL_OW 488
40781: NOT
40782: IFTRUE 40801
40784: PUSH
40785: LD_VAR 0 3
40789: PPUSH
40790: LD_VAR 0 4
40794: PPUSH
40795: CALL_OW 488
40799: NOT
40800: OR
40801: IFFALSE 40814
// begin result := - 1 ;
40803: LD_ADDR_VAR 0 5
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: ST_TO_ADDR
// exit ;
40812: GO 41049
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40814: LD_ADDR_VAR 0 12
40818: PUSH
40819: LD_VAR 0 1
40823: PPUSH
40824: LD_VAR 0 2
40828: PPUSH
40829: LD_VAR 0 3
40833: PPUSH
40834: LD_VAR 0 4
40838: PPUSH
40839: CALL 39885 0 4
40843: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40844: LD_ADDR_VAR 0 11
40848: PUSH
40849: LD_VAR 0 1
40853: PPUSH
40854: LD_VAR 0 2
40858: PPUSH
40859: LD_VAR 0 12
40863: PUSH
40864: LD_INT 1
40866: ARRAY
40867: PPUSH
40868: LD_VAR 0 12
40872: PUSH
40873: LD_INT 2
40875: ARRAY
40876: PPUSH
40877: CALL_OW 298
40881: ST_TO_ADDR
// distance := 9999 ;
40882: LD_ADDR_VAR 0 10
40886: PUSH
40887: LD_INT 9999
40889: ST_TO_ADDR
// for i := 0 to 5 do
40890: LD_ADDR_VAR 0 6
40894: PUSH
40895: DOUBLE
40896: LD_INT 0
40898: DEC
40899: ST_TO_ADDR
40900: LD_INT 5
40902: PUSH
40903: FOR_TO
40904: IFFALSE 41047
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40906: LD_ADDR_VAR 0 7
40910: PUSH
40911: LD_VAR 0 1
40915: PPUSH
40916: LD_VAR 0 6
40920: PPUSH
40921: LD_VAR 0 11
40925: PPUSH
40926: CALL_OW 272
40930: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40931: LD_ADDR_VAR 0 8
40935: PUSH
40936: LD_VAR 0 2
40940: PPUSH
40941: LD_VAR 0 6
40945: PPUSH
40946: LD_VAR 0 11
40950: PPUSH
40951: CALL_OW 273
40955: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40956: LD_VAR 0 7
40960: PPUSH
40961: LD_VAR 0 8
40965: PPUSH
40966: CALL_OW 488
40970: NOT
40971: IFFALSE 40975
// continue ;
40973: GO 40903
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40975: LD_ADDR_VAR 0 9
40979: PUSH
40980: LD_VAR 0 12
40984: PUSH
40985: LD_INT 1
40987: ARRAY
40988: PPUSH
40989: LD_VAR 0 12
40993: PUSH
40994: LD_INT 2
40996: ARRAY
40997: PPUSH
40998: LD_VAR 0 7
41002: PPUSH
41003: LD_VAR 0 8
41007: PPUSH
41008: CALL_OW 298
41012: ST_TO_ADDR
// if tmp < distance then
41013: LD_VAR 0 9
41017: PUSH
41018: LD_VAR 0 10
41022: LESS
41023: IFFALSE 41045
// begin result := i ;
41025: LD_ADDR_VAR 0 5
41029: PUSH
41030: LD_VAR 0 6
41034: ST_TO_ADDR
// distance := tmp ;
41035: LD_ADDR_VAR 0 10
41039: PUSH
41040: LD_VAR 0 9
41044: ST_TO_ADDR
// end ; end ;
41045: GO 40903
41047: POP
41048: POP
// end ;
41049: LD_VAR 0 5
41053: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41054: LD_INT 0
41056: PPUSH
41057: PPUSH
// if not driver or not IsInUnit ( driver ) then
41058: LD_VAR 0 1
41062: NOT
41063: IFTRUE 41077
41065: PUSH
41066: LD_VAR 0 1
41070: PPUSH
41071: CALL_OW 310
41075: NOT
41076: OR
41077: IFFALSE 41081
// exit ;
41079: GO 41171
// vehicle := IsInUnit ( driver ) ;
41081: LD_ADDR_VAR 0 3
41085: PUSH
41086: LD_VAR 0 1
41090: PPUSH
41091: CALL_OW 310
41095: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41096: LD_VAR 0 1
41100: PPUSH
41101: LD_STRING \
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: PUSH
41131: LD_STRING E
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: LD_VAR 0 3
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PPUSH
41167: CALL_OW 446
// end ;
41171: LD_VAR 0 2
41175: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41176: LD_INT 0
41178: PPUSH
41179: PPUSH
// if not driver or not IsInUnit ( driver ) then
41180: LD_VAR 0 1
41184: NOT
41185: IFTRUE 41199
41187: PUSH
41188: LD_VAR 0 1
41192: PPUSH
41193: CALL_OW 310
41197: NOT
41198: OR
41199: IFFALSE 41203
// exit ;
41201: GO 41293
// vehicle := IsInUnit ( driver ) ;
41203: LD_ADDR_VAR 0 3
41207: PUSH
41208: LD_VAR 0 1
41212: PPUSH
41213: CALL_OW 310
41217: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41218: LD_VAR 0 1
41222: PPUSH
41223: LD_STRING \
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: PUSH
41253: LD_STRING E
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: LD_VAR 0 3
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PPUSH
41289: CALL_OW 447
// end ;
41293: LD_VAR 0 2
41297: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41298: LD_INT 0
41300: PPUSH
41301: PPUSH
41302: PPUSH
// tmp := [ ] ;
41303: LD_ADDR_VAR 0 5
41307: PUSH
41308: EMPTY
41309: ST_TO_ADDR
// for i in units do
41310: LD_ADDR_VAR 0 4
41314: PUSH
41315: LD_VAR 0 1
41319: PUSH
41320: FOR_IN
41321: IFFALSE 41359
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41323: LD_ADDR_VAR 0 5
41327: PUSH
41328: LD_VAR 0 5
41332: PPUSH
41333: LD_VAR 0 5
41337: PUSH
41338: LD_INT 1
41340: PLUS
41341: PPUSH
41342: LD_VAR 0 4
41346: PPUSH
41347: CALL_OW 256
41351: PPUSH
41352: CALL_OW 2
41356: ST_TO_ADDR
41357: GO 41320
41359: POP
41360: POP
// if not tmp then
41361: LD_VAR 0 5
41365: NOT
41366: IFFALSE 41370
// exit ;
41368: GO 41418
// if asc then
41370: LD_VAR 0 2
41374: IFFALSE 41398
// result := SortListByListAsc ( units , tmp ) else
41376: LD_ADDR_VAR 0 3
41380: PUSH
41381: LD_VAR 0 1
41385: PPUSH
41386: LD_VAR 0 5
41390: PPUSH
41391: CALL_OW 76
41395: ST_TO_ADDR
41396: GO 41418
// result := SortListByListDesc ( units , tmp ) ;
41398: LD_ADDR_VAR 0 3
41402: PUSH
41403: LD_VAR 0 1
41407: PPUSH
41408: LD_VAR 0 5
41412: PPUSH
41413: CALL_OW 77
41417: ST_TO_ADDR
// end ;
41418: LD_VAR 0 3
41422: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41423: LD_INT 0
41425: PPUSH
41426: PPUSH
// task := GetTaskList ( mech ) ;
41427: LD_ADDR_VAR 0 4
41431: PUSH
41432: LD_VAR 0 1
41436: PPUSH
41437: CALL_OW 437
41441: ST_TO_ADDR
// if not task then
41442: LD_VAR 0 4
41446: NOT
41447: IFFALSE 41451
// exit ;
41449: GO 41495
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41451: LD_ADDR_VAR 0 3
41455: PUSH
41456: LD_VAR 0 4
41460: PUSH
41461: LD_INT 1
41463: ARRAY
41464: PUSH
41465: LD_INT 1
41467: ARRAY
41468: PUSH
41469: LD_STRING r
41471: EQUAL
41472: IFFALSE 41494
41474: PUSH
41475: LD_VAR 0 4
41479: PUSH
41480: LD_INT 1
41482: ARRAY
41483: PUSH
41484: LD_INT 4
41486: ARRAY
41487: PUSH
41488: LD_VAR 0 2
41492: EQUAL
41493: AND
41494: ST_TO_ADDR
// end ;
41495: LD_VAR 0 3
41499: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41500: LD_INT 0
41502: PPUSH
// SetDir ( unit , d ) ;
41503: LD_VAR 0 1
41507: PPUSH
41508: LD_VAR 0 4
41512: PPUSH
41513: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
41517: LD_ADDR_VAR 0 6
41521: PUSH
41522: LD_VAR 0 1
41526: PPUSH
41527: LD_VAR 0 2
41531: PPUSH
41532: LD_VAR 0 3
41536: PPUSH
41537: LD_VAR 0 5
41541: PPUSH
41542: CALL_OW 48
41546: ST_TO_ADDR
// end ;
41547: LD_VAR 0 6
41551: RET
// export function ToNaturalNumber ( number ) ; begin
41552: LD_INT 0
41554: PPUSH
// result := number div 1 ;
41555: LD_ADDR_VAR 0 2
41559: PUSH
41560: LD_VAR 0 1
41564: PUSH
41565: LD_INT 1
41567: DIV
41568: ST_TO_ADDR
// if number < 0 then
41569: LD_VAR 0 1
41573: PUSH
41574: LD_INT 0
41576: LESS
41577: IFFALSE 41587
// result := 0 ;
41579: LD_ADDR_VAR 0 2
41583: PUSH
41584: LD_INT 0
41586: ST_TO_ADDR
// end ;
41587: LD_VAR 0 2
41591: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
41592: LD_INT 0
41594: PPUSH
41595: PPUSH
41596: PPUSH
// if not buildings then
41597: LD_VAR 0 1
41601: NOT
41602: IFFALSE 41606
// exit ;
41604: GO 41721
// tmp := [ ] ;
41606: LD_ADDR_VAR 0 5
41610: PUSH
41611: EMPTY
41612: ST_TO_ADDR
// for b in buildings do
41613: LD_ADDR_VAR 0 4
41617: PUSH
41618: LD_VAR 0 1
41622: PUSH
41623: FOR_IN
41624: IFFALSE 41662
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
41626: LD_ADDR_VAR 0 5
41630: PUSH
41631: LD_VAR 0 5
41635: PPUSH
41636: LD_VAR 0 5
41640: PUSH
41641: LD_INT 1
41643: PLUS
41644: PPUSH
41645: LD_VAR 0 4
41649: PPUSH
41650: CALL_OW 266
41654: PPUSH
41655: CALL_OW 1
41659: ST_TO_ADDR
41660: GO 41623
41662: POP
41663: POP
// if not tmp then
41664: LD_VAR 0 5
41668: NOT
41669: IFFALSE 41673
// exit ;
41671: GO 41721
// if asc then
41673: LD_VAR 0 2
41677: IFFALSE 41701
// result := SortListByListAsc ( buildings , tmp ) else
41679: LD_ADDR_VAR 0 3
41683: PUSH
41684: LD_VAR 0 1
41688: PPUSH
41689: LD_VAR 0 5
41693: PPUSH
41694: CALL_OW 76
41698: ST_TO_ADDR
41699: GO 41721
// result := SortListByListDesc ( buildings , tmp ) ;
41701: LD_ADDR_VAR 0 3
41705: PUSH
41706: LD_VAR 0 1
41710: PPUSH
41711: LD_VAR 0 5
41715: PPUSH
41716: CALL_OW 77
41720: ST_TO_ADDR
// end ;
41721: LD_VAR 0 3
41725: RET
// export function SortByClass ( units , class ) ; var un ; begin
41726: LD_INT 0
41728: PPUSH
41729: PPUSH
// if not units or not class then
41730: LD_VAR 0 1
41734: NOT
41735: IFTRUE 41744
41737: PUSH
41738: LD_VAR 0 2
41742: NOT
41743: OR
41744: IFFALSE 41748
// exit ;
41746: GO 41843
// result := [ ] ;
41748: LD_ADDR_VAR 0 3
41752: PUSH
41753: EMPTY
41754: ST_TO_ADDR
// for un in units do
41755: LD_ADDR_VAR 0 4
41759: PUSH
41760: LD_VAR 0 1
41764: PUSH
41765: FOR_IN
41766: IFFALSE 41841
// if GetClass ( un ) = class then
41768: LD_VAR 0 4
41772: PPUSH
41773: CALL_OW 257
41777: PUSH
41778: LD_VAR 0 2
41782: EQUAL
41783: IFFALSE 41810
// result := Insert ( result , 1 , un ) else
41785: LD_ADDR_VAR 0 3
41789: PUSH
41790: LD_VAR 0 3
41794: PPUSH
41795: LD_INT 1
41797: PPUSH
41798: LD_VAR 0 4
41802: PPUSH
41803: CALL_OW 2
41807: ST_TO_ADDR
41808: GO 41839
// result := Replace ( result , result + 1 , un ) ;
41810: LD_ADDR_VAR 0 3
41814: PUSH
41815: LD_VAR 0 3
41819: PPUSH
41820: LD_VAR 0 3
41824: PUSH
41825: LD_INT 1
41827: PLUS
41828: PPUSH
41829: LD_VAR 0 4
41833: PPUSH
41834: CALL_OW 1
41838: ST_TO_ADDR
41839: GO 41765
41841: POP
41842: POP
// end ;
41843: LD_VAR 0 3
41847: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41848: LD_INT 0
41850: PPUSH
41851: PPUSH
41852: PPUSH
41853: PPUSH
41854: PPUSH
41855: PPUSH
41856: PPUSH
// result := [ ] ;
41857: LD_ADDR_VAR 0 4
41861: PUSH
41862: EMPTY
41863: ST_TO_ADDR
// if x - r < 0 then
41864: LD_VAR 0 1
41868: PUSH
41869: LD_VAR 0 3
41873: MINUS
41874: PUSH
41875: LD_INT 0
41877: LESS
41878: IFFALSE 41890
// min_x := 0 else
41880: LD_ADDR_VAR 0 8
41884: PUSH
41885: LD_INT 0
41887: ST_TO_ADDR
41888: GO 41906
// min_x := x - r ;
41890: LD_ADDR_VAR 0 8
41894: PUSH
41895: LD_VAR 0 1
41899: PUSH
41900: LD_VAR 0 3
41904: MINUS
41905: ST_TO_ADDR
// if y - r < 0 then
41906: LD_VAR 0 2
41910: PUSH
41911: LD_VAR 0 3
41915: MINUS
41916: PUSH
41917: LD_INT 0
41919: LESS
41920: IFFALSE 41932
// min_y := 0 else
41922: LD_ADDR_VAR 0 7
41926: PUSH
41927: LD_INT 0
41929: ST_TO_ADDR
41930: GO 41948
// min_y := y - r ;
41932: LD_ADDR_VAR 0 7
41936: PUSH
41937: LD_VAR 0 2
41941: PUSH
41942: LD_VAR 0 3
41946: MINUS
41947: ST_TO_ADDR
// max_x := x + r ;
41948: LD_ADDR_VAR 0 9
41952: PUSH
41953: LD_VAR 0 1
41957: PUSH
41958: LD_VAR 0 3
41962: PLUS
41963: ST_TO_ADDR
// max_y := y + r ;
41964: LD_ADDR_VAR 0 10
41968: PUSH
41969: LD_VAR 0 2
41973: PUSH
41974: LD_VAR 0 3
41978: PLUS
41979: ST_TO_ADDR
// for _x = min_x to max_x do
41980: LD_ADDR_VAR 0 5
41984: PUSH
41985: DOUBLE
41986: LD_VAR 0 8
41990: DEC
41991: ST_TO_ADDR
41992: LD_VAR 0 9
41996: PUSH
41997: FOR_TO
41998: IFFALSE 42099
// for _y = min_y to max_y do
42000: LD_ADDR_VAR 0 6
42004: PUSH
42005: DOUBLE
42006: LD_VAR 0 7
42010: DEC
42011: ST_TO_ADDR
42012: LD_VAR 0 10
42016: PUSH
42017: FOR_TO
42018: IFFALSE 42095
// begin if not ValidHex ( _x , _y ) then
42020: LD_VAR 0 5
42024: PPUSH
42025: LD_VAR 0 6
42029: PPUSH
42030: CALL_OW 488
42034: NOT
42035: IFFALSE 42039
// continue ;
42037: GO 42017
// if GetResourceTypeXY ( _x , _y ) then
42039: LD_VAR 0 5
42043: PPUSH
42044: LD_VAR 0 6
42048: PPUSH
42049: CALL_OW 283
42053: IFFALSE 42093
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42055: LD_ADDR_VAR 0 4
42059: PUSH
42060: LD_VAR 0 4
42064: PPUSH
42065: LD_VAR 0 4
42069: PUSH
42070: LD_INT 1
42072: PLUS
42073: PPUSH
42074: LD_VAR 0 5
42078: PUSH
42079: LD_VAR 0 6
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PPUSH
42088: CALL_OW 1
42092: ST_TO_ADDR
// end ;
42093: GO 42017
42095: POP
42096: POP
42097: GO 41997
42099: POP
42100: POP
// end ;
42101: LD_VAR 0 4
42105: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42106: LD_INT 0
42108: PPUSH
42109: PPUSH
42110: PPUSH
42111: PPUSH
42112: PPUSH
42113: PPUSH
42114: PPUSH
42115: PPUSH
// if not units then
42116: LD_VAR 0 1
42120: NOT
42121: IFFALSE 42125
// exit ;
42123: GO 42657
// result := UnitFilter ( units , [ f_ok ] ) ;
42125: LD_ADDR_VAR 0 3
42129: PUSH
42130: LD_VAR 0 1
42134: PPUSH
42135: LD_INT 50
42137: PUSH
42138: EMPTY
42139: LIST
42140: PPUSH
42141: CALL_OW 72
42145: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42146: LD_ADDR_VAR 0 8
42150: PUSH
42151: LD_VAR 0 1
42155: PUSH
42156: LD_INT 1
42158: ARRAY
42159: PPUSH
42160: CALL_OW 255
42164: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42165: LD_ADDR_VAR 0 10
42169: PUSH
42170: LD_INT 29
42172: PUSH
42173: LD_INT 91
42175: PUSH
42176: LD_INT 49
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: LIST
42183: ST_TO_ADDR
// if not result then
42184: LD_VAR 0 3
42188: NOT
42189: IFFALSE 42193
// exit ;
42191: GO 42657
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42193: LD_ADDR_VAR 0 5
42197: PUSH
42198: LD_INT 81
42200: PUSH
42201: LD_VAR 0 8
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PPUSH
42210: CALL_OW 69
42214: ST_TO_ADDR
// for i in result do
42215: LD_ADDR_VAR 0 4
42219: PUSH
42220: LD_VAR 0 3
42224: PUSH
42225: FOR_IN
42226: IFFALSE 42655
// begin tag := GetTag ( i ) + 1 ;
42228: LD_ADDR_VAR 0 9
42232: PUSH
42233: LD_VAR 0 4
42237: PPUSH
42238: CALL_OW 110
42242: PUSH
42243: LD_INT 1
42245: PLUS
42246: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42247: LD_ADDR_VAR 0 7
42251: PUSH
42252: LD_VAR 0 4
42256: PPUSH
42257: CALL_OW 250
42261: PPUSH
42262: LD_VAR 0 4
42266: PPUSH
42267: CALL_OW 251
42271: PPUSH
42272: LD_INT 4
42274: PPUSH
42275: CALL 41848 0 3
42279: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42280: LD_VAR 0 4
42284: PPUSH
42285: CALL_OW 247
42289: PUSH
42290: LD_INT 2
42292: EQUAL
42293: IFFALSE 42305
42295: PUSH
42296: LD_VAR 0 7
42300: PUSH
42301: LD_INT 2
42303: GREATER
42304: AND
42305: IFFALSE 42325
42307: PUSH
42308: LD_VAR 0 4
42312: PPUSH
42313: CALL_OW 264
42317: PUSH
42318: LD_VAR 0 10
42322: IN
42323: NOT
42324: AND
42325: IFFALSE 42364
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42327: LD_VAR 0 4
42331: PPUSH
42332: LD_VAR 0 7
42336: PUSH
42337: LD_INT 1
42339: ARRAY
42340: PUSH
42341: LD_INT 1
42343: ARRAY
42344: PPUSH
42345: LD_VAR 0 7
42349: PUSH
42350: LD_INT 1
42352: ARRAY
42353: PUSH
42354: LD_INT 2
42356: ARRAY
42357: PPUSH
42358: CALL_OW 116
42362: GO 42653
// if path > tag then
42364: LD_VAR 0 2
42368: PUSH
42369: LD_VAR 0 9
42373: GREATER
42374: IFFALSE 42582
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42376: LD_ADDR_VAR 0 6
42380: PUSH
42381: LD_VAR 0 5
42385: PPUSH
42386: LD_INT 91
42388: PUSH
42389: LD_VAR 0 4
42393: PUSH
42394: LD_INT 8
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: LIST
42401: PPUSH
42402: CALL_OW 72
42406: ST_TO_ADDR
// if nearEnemy then
42407: LD_VAR 0 6
42411: IFFALSE 42480
// begin if GetWeapon ( i ) = ru_time_lapser then
42413: LD_VAR 0 4
42417: PPUSH
42418: CALL_OW 264
42422: PUSH
42423: LD_INT 49
42425: EQUAL
42426: IFFALSE 42454
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42428: LD_VAR 0 4
42432: PPUSH
42433: LD_VAR 0 6
42437: PPUSH
42438: LD_VAR 0 4
42442: PPUSH
42443: CALL_OW 74
42447: PPUSH
42448: CALL_OW 112
42452: GO 42478
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42454: LD_VAR 0 4
42458: PPUSH
42459: LD_VAR 0 6
42463: PPUSH
42464: LD_VAR 0 4
42468: PPUSH
42469: CALL_OW 74
42473: PPUSH
42474: CALL 43738 0 2
// end else
42478: GO 42580
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42480: LD_VAR 0 4
42484: PPUSH
42485: LD_VAR 0 2
42489: PUSH
42490: LD_VAR 0 9
42494: ARRAY
42495: PUSH
42496: LD_INT 1
42498: ARRAY
42499: PPUSH
42500: LD_VAR 0 2
42504: PUSH
42505: LD_VAR 0 9
42509: ARRAY
42510: PUSH
42511: LD_INT 2
42513: ARRAY
42514: PPUSH
42515: CALL_OW 297
42519: PUSH
42520: LD_INT 6
42522: GREATER
42523: IFFALSE 42566
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42525: LD_VAR 0 4
42529: PPUSH
42530: LD_VAR 0 2
42534: PUSH
42535: LD_VAR 0 9
42539: ARRAY
42540: PUSH
42541: LD_INT 1
42543: ARRAY
42544: PPUSH
42545: LD_VAR 0 2
42549: PUSH
42550: LD_VAR 0 9
42554: ARRAY
42555: PUSH
42556: LD_INT 2
42558: ARRAY
42559: PPUSH
42560: CALL_OW 114
42564: GO 42580
// SetTag ( i , tag ) ;
42566: LD_VAR 0 4
42570: PPUSH
42571: LD_VAR 0 9
42575: PPUSH
42576: CALL_OW 109
// end else
42580: GO 42653
// if enemy then
42582: LD_VAR 0 5
42586: IFFALSE 42653
// begin if GetWeapon ( i ) = ru_time_lapser then
42588: LD_VAR 0 4
42592: PPUSH
42593: CALL_OW 264
42597: PUSH
42598: LD_INT 49
42600: EQUAL
42601: IFFALSE 42629
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42603: LD_VAR 0 4
42607: PPUSH
42608: LD_VAR 0 5
42612: PPUSH
42613: LD_VAR 0 4
42617: PPUSH
42618: CALL_OW 74
42622: PPUSH
42623: CALL_OW 112
42627: GO 42653
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42629: LD_VAR 0 4
42633: PPUSH
42634: LD_VAR 0 5
42638: PPUSH
42639: LD_VAR 0 4
42643: PPUSH
42644: CALL_OW 74
42648: PPUSH
42649: CALL 43738 0 2
// end ; end ;
42653: GO 42225
42655: POP
42656: POP
// end ;
42657: LD_VAR 0 3
42661: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42662: LD_INT 0
42664: PPUSH
42665: PPUSH
42666: PPUSH
// if not unit or IsInUnit ( unit ) then
42667: LD_VAR 0 1
42671: NOT
42672: IFTRUE 42685
42674: PUSH
42675: LD_VAR 0 1
42679: PPUSH
42680: CALL_OW 310
42684: OR
42685: IFFALSE 42689
// exit ;
42687: GO 42780
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42689: LD_ADDR_VAR 0 4
42693: PUSH
42694: LD_VAR 0 1
42698: PPUSH
42699: CALL_OW 250
42703: PPUSH
42704: LD_VAR 0 2
42708: PPUSH
42709: LD_INT 1
42711: PPUSH
42712: CALL_OW 272
42716: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42717: LD_ADDR_VAR 0 5
42721: PUSH
42722: LD_VAR 0 1
42726: PPUSH
42727: CALL_OW 251
42731: PPUSH
42732: LD_VAR 0 2
42736: PPUSH
42737: LD_INT 1
42739: PPUSH
42740: CALL_OW 273
42744: ST_TO_ADDR
// if ValidHex ( x , y ) then
42745: LD_VAR 0 4
42749: PPUSH
42750: LD_VAR 0 5
42754: PPUSH
42755: CALL_OW 488
42759: IFFALSE 42780
// ComTurnXY ( unit , x , y ) ;
42761: LD_VAR 0 1
42765: PPUSH
42766: LD_VAR 0 4
42770: PPUSH
42771: LD_VAR 0 5
42775: PPUSH
42776: CALL_OW 118
// end ;
42780: LD_VAR 0 3
42784: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42785: LD_INT 0
42787: PPUSH
42788: PPUSH
// result := false ;
42789: LD_ADDR_VAR 0 3
42793: PUSH
42794: LD_INT 0
42796: ST_TO_ADDR
// if not units then
42797: LD_VAR 0 2
42801: NOT
42802: IFFALSE 42806
// exit ;
42804: GO 42851
// for i in units do
42806: LD_ADDR_VAR 0 4
42810: PUSH
42811: LD_VAR 0 2
42815: PUSH
42816: FOR_IN
42817: IFFALSE 42849
// if See ( side , i ) then
42819: LD_VAR 0 1
42823: PPUSH
42824: LD_VAR 0 4
42828: PPUSH
42829: CALL_OW 292
42833: IFFALSE 42847
// begin result := true ;
42835: LD_ADDR_VAR 0 3
42839: PUSH
42840: LD_INT 1
42842: ST_TO_ADDR
// exit ;
42843: POP
42844: POP
42845: GO 42851
// end ;
42847: GO 42816
42849: POP
42850: POP
// end ;
42851: LD_VAR 0 3
42855: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42856: LD_INT 0
42858: PPUSH
42859: PPUSH
42860: PPUSH
42861: PPUSH
// if not unit or not points then
42862: LD_VAR 0 1
42866: NOT
42867: IFTRUE 42876
42869: PUSH
42870: LD_VAR 0 2
42874: NOT
42875: OR
42876: IFFALSE 42880
// exit ;
42878: GO 42970
// dist := 99999 ;
42880: LD_ADDR_VAR 0 5
42884: PUSH
42885: LD_INT 99999
42887: ST_TO_ADDR
// for i in points do
42888: LD_ADDR_VAR 0 4
42892: PUSH
42893: LD_VAR 0 2
42897: PUSH
42898: FOR_IN
42899: IFFALSE 42968
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42901: LD_ADDR_VAR 0 6
42905: PUSH
42906: LD_VAR 0 1
42910: PPUSH
42911: LD_VAR 0 4
42915: PUSH
42916: LD_INT 1
42918: ARRAY
42919: PPUSH
42920: LD_VAR 0 4
42924: PUSH
42925: LD_INT 2
42927: ARRAY
42928: PPUSH
42929: CALL_OW 297
42933: ST_TO_ADDR
// if tmpDist < dist then
42934: LD_VAR 0 6
42938: PUSH
42939: LD_VAR 0 5
42943: LESS
42944: IFFALSE 42966
// begin result := i ;
42946: LD_ADDR_VAR 0 3
42950: PUSH
42951: LD_VAR 0 4
42955: ST_TO_ADDR
// dist := tmpDist ;
42956: LD_ADDR_VAR 0 5
42960: PUSH
42961: LD_VAR 0 6
42965: ST_TO_ADDR
// end ; end ;
42966: GO 42898
42968: POP
42969: POP
// end ;
42970: LD_VAR 0 3
42974: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42975: LD_INT 0
42977: PPUSH
// uc_side := side ;
42978: LD_ADDR_OWVAR 20
42982: PUSH
42983: LD_VAR 0 1
42987: ST_TO_ADDR
// uc_nation := 3 ;
42988: LD_ADDR_OWVAR 21
42992: PUSH
42993: LD_INT 3
42995: ST_TO_ADDR
// vc_chassis := 25 ;
42996: LD_ADDR_OWVAR 37
43000: PUSH
43001: LD_INT 25
43003: ST_TO_ADDR
// vc_engine := engine_siberite ;
43004: LD_ADDR_OWVAR 39
43008: PUSH
43009: LD_INT 3
43011: ST_TO_ADDR
// vc_control := control_computer ;
43012: LD_ADDR_OWVAR 38
43016: PUSH
43017: LD_INT 3
43019: ST_TO_ADDR
// vc_weapon := 59 ;
43020: LD_ADDR_OWVAR 40
43024: PUSH
43025: LD_INT 59
43027: ST_TO_ADDR
// result := CreateVehicle ;
43028: LD_ADDR_VAR 0 5
43032: PUSH
43033: CALL_OW 45
43037: ST_TO_ADDR
// SetDir ( result , d ) ;
43038: LD_VAR 0 5
43042: PPUSH
43043: LD_VAR 0 4
43047: PPUSH
43048: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43052: LD_VAR 0 5
43056: PPUSH
43057: LD_VAR 0 2
43061: PPUSH
43062: LD_VAR 0 3
43066: PPUSH
43067: LD_INT 0
43069: PPUSH
43070: CALL_OW 48
// end ;
43074: LD_VAR 0 5
43078: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43079: LD_INT 0
43081: PPUSH
43082: PPUSH
43083: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43084: LD_ADDR_VAR 0 2
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43107: LD_VAR 0 1
43111: NOT
43112: IFTRUE 43145
43114: PUSH
43115: LD_VAR 0 1
43119: PPUSH
43120: CALL_OW 264
43124: PUSH
43125: LD_INT 12
43127: PUSH
43128: LD_INT 51
43130: PUSH
43131: LD_INT 32
43133: PUSH
43134: LD_INT 89
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: IN
43143: NOT
43144: OR
43145: IFFALSE 43149
// exit ;
43147: GO 43247
// for i := 1 to 3 do
43149: LD_ADDR_VAR 0 3
43153: PUSH
43154: DOUBLE
43155: LD_INT 1
43157: DEC
43158: ST_TO_ADDR
43159: LD_INT 3
43161: PUSH
43162: FOR_TO
43163: IFFALSE 43245
// begin tmp := GetCargo ( cargo , i ) ;
43165: LD_ADDR_VAR 0 4
43169: PUSH
43170: LD_VAR 0 1
43174: PPUSH
43175: LD_VAR 0 3
43179: PPUSH
43180: CALL_OW 289
43184: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43185: LD_ADDR_VAR 0 2
43189: PUSH
43190: LD_VAR 0 2
43194: PPUSH
43195: LD_VAR 0 3
43199: PPUSH
43200: LD_VAR 0 4
43204: PPUSH
43205: CALL_OW 1
43209: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43210: LD_ADDR_VAR 0 2
43214: PUSH
43215: LD_VAR 0 2
43219: PPUSH
43220: LD_INT 4
43222: PPUSH
43223: LD_VAR 0 2
43227: PUSH
43228: LD_INT 4
43230: ARRAY
43231: PUSH
43232: LD_VAR 0 4
43236: PLUS
43237: PPUSH
43238: CALL_OW 1
43242: ST_TO_ADDR
// end ;
43243: GO 43162
43245: POP
43246: POP
// end ;
43247: LD_VAR 0 2
43251: RET
// export function Length ( array ) ; begin
43252: LD_INT 0
43254: PPUSH
// result := array + 0 ;
43255: LD_ADDR_VAR 0 2
43259: PUSH
43260: LD_VAR 0 1
43264: PUSH
43265: LD_INT 0
43267: PLUS
43268: ST_TO_ADDR
// end ;
43269: LD_VAR 0 2
43273: RET
// export function PrepareArray ( array ) ; begin
43274: LD_INT 0
43276: PPUSH
// result := array diff 0 ;
43277: LD_ADDR_VAR 0 2
43281: PUSH
43282: LD_VAR 0 1
43286: PUSH
43287: LD_INT 0
43289: DIFF
43290: ST_TO_ADDR
// if not result [ 1 ] then
43291: LD_VAR 0 2
43295: PUSH
43296: LD_INT 1
43298: ARRAY
43299: NOT
43300: IFFALSE 43320
// result := Delete ( result , 1 ) ;
43302: LD_ADDR_VAR 0 2
43306: PUSH
43307: LD_VAR 0 2
43311: PPUSH
43312: LD_INT 1
43314: PPUSH
43315: CALL_OW 3
43319: ST_TO_ADDR
// end ;
43320: LD_VAR 0 2
43324: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43325: LD_INT 0
43327: PPUSH
43328: PPUSH
43329: PPUSH
43330: PPUSH
// sibRocketRange := 25 ;
43331: LD_ADDR_VAR 0 6
43335: PUSH
43336: LD_INT 25
43338: ST_TO_ADDR
// result := false ;
43339: LD_ADDR_VAR 0 4
43343: PUSH
43344: LD_INT 0
43346: ST_TO_ADDR
// for i := 0 to 5 do
43347: LD_ADDR_VAR 0 5
43351: PUSH
43352: DOUBLE
43353: LD_INT 0
43355: DEC
43356: ST_TO_ADDR
43357: LD_INT 5
43359: PUSH
43360: FOR_TO
43361: IFFALSE 43428
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43363: LD_VAR 0 1
43367: PPUSH
43368: LD_VAR 0 5
43372: PPUSH
43373: LD_VAR 0 6
43377: PPUSH
43378: CALL_OW 272
43382: PPUSH
43383: LD_VAR 0 2
43387: PPUSH
43388: LD_VAR 0 5
43392: PPUSH
43393: LD_VAR 0 6
43397: PPUSH
43398: CALL_OW 273
43402: PPUSH
43403: LD_VAR 0 3
43407: PPUSH
43408: CALL_OW 309
43412: IFFALSE 43426
// begin result := true ;
43414: LD_ADDR_VAR 0 4
43418: PUSH
43419: LD_INT 1
43421: ST_TO_ADDR
// exit ;
43422: POP
43423: POP
43424: GO 43430
// end ;
43426: GO 43360
43428: POP
43429: POP
// end ;
43430: LD_VAR 0 4
43434: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43435: LD_INT 0
43437: PPUSH
43438: PPUSH
43439: PPUSH
// if btype = b_depot then
43440: LD_VAR 0 2
43444: PUSH
43445: LD_INT 0
43447: EQUAL
43448: IFFALSE 43460
// begin result := true ;
43450: LD_ADDR_VAR 0 3
43454: PUSH
43455: LD_INT 1
43457: ST_TO_ADDR
// exit ;
43458: GO 43580
// end ; pom := GetBase ( depot ) ;
43460: LD_ADDR_VAR 0 4
43464: PUSH
43465: LD_VAR 0 1
43469: PPUSH
43470: CALL_OW 274
43474: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43475: LD_ADDR_VAR 0 5
43479: PUSH
43480: LD_VAR 0 2
43484: PPUSH
43485: LD_VAR 0 1
43489: PPUSH
43490: CALL_OW 248
43494: PPUSH
43495: CALL_OW 450
43499: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43500: LD_ADDR_VAR 0 3
43504: PUSH
43505: LD_VAR 0 4
43509: PPUSH
43510: LD_INT 1
43512: PPUSH
43513: CALL_OW 275
43517: PUSH
43518: LD_VAR 0 5
43522: PUSH
43523: LD_INT 1
43525: ARRAY
43526: GREATEREQUAL
43527: IFFALSE 43553
43529: PUSH
43530: LD_VAR 0 4
43534: PPUSH
43535: LD_INT 2
43537: PPUSH
43538: CALL_OW 275
43542: PUSH
43543: LD_VAR 0 5
43547: PUSH
43548: LD_INT 2
43550: ARRAY
43551: GREATEREQUAL
43552: AND
43553: IFFALSE 43579
43555: PUSH
43556: LD_VAR 0 4
43560: PPUSH
43561: LD_INT 3
43563: PPUSH
43564: CALL_OW 275
43568: PUSH
43569: LD_VAR 0 5
43573: PUSH
43574: LD_INT 3
43576: ARRAY
43577: GREATEREQUAL
43578: AND
43579: ST_TO_ADDR
// end ;
43580: LD_VAR 0 3
43584: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43585: LD_INT 0
43587: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43588: LD_VAR 0 1
43592: PPUSH
43593: LD_VAR 0 2
43597: PPUSH
43598: LD_INT 0
43600: PPUSH
43601: LD_INT 0
43603: PPUSH
43604: LD_INT 1
43606: PPUSH
43607: LD_INT 0
43609: PPUSH
43610: CALL_OW 587
// end ;
43614: LD_VAR 0 3
43618: RET
// export function CenterOnNow ( unit ) ; begin
43619: LD_INT 0
43621: PPUSH
// result := IsInUnit ( unit ) ;
43622: LD_ADDR_VAR 0 2
43626: PUSH
43627: LD_VAR 0 1
43631: PPUSH
43632: CALL_OW 310
43636: ST_TO_ADDR
// if not result then
43637: LD_VAR 0 2
43641: NOT
43642: IFFALSE 43654
// result := unit ;
43644: LD_ADDR_VAR 0 2
43648: PUSH
43649: LD_VAR 0 1
43653: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43654: LD_VAR 0 1
43658: PPUSH
43659: CALL_OW 87
// end ;
43663: LD_VAR 0 2
43667: RET
// export function ComMoveHex ( unit , hex ) ; begin
43668: LD_INT 0
43670: PPUSH
// if not hex then
43671: LD_VAR 0 2
43675: NOT
43676: IFFALSE 43680
// exit ;
43678: GO 43733
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43680: LD_VAR 0 2
43684: PUSH
43685: LD_INT 1
43687: ARRAY
43688: PPUSH
43689: LD_VAR 0 2
43693: PUSH
43694: LD_INT 2
43696: ARRAY
43697: PPUSH
43698: CALL_OW 428
43702: IFFALSE 43706
// exit ;
43704: GO 43733
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43706: LD_VAR 0 1
43710: PPUSH
43711: LD_VAR 0 2
43715: PUSH
43716: LD_INT 1
43718: ARRAY
43719: PPUSH
43720: LD_VAR 0 2
43724: PUSH
43725: LD_INT 2
43727: ARRAY
43728: PPUSH
43729: CALL_OW 111
// end ;
43733: LD_VAR 0 3
43737: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43738: LD_INT 0
43740: PPUSH
43741: PPUSH
43742: PPUSH
// if not unit or not enemy then
43743: LD_VAR 0 1
43747: NOT
43748: IFTRUE 43757
43750: PUSH
43751: LD_VAR 0 2
43755: NOT
43756: OR
43757: IFFALSE 43761
// exit ;
43759: GO 43887
// x := GetX ( enemy ) ;
43761: LD_ADDR_VAR 0 4
43765: PUSH
43766: LD_VAR 0 2
43770: PPUSH
43771: CALL_OW 250
43775: ST_TO_ADDR
// y := GetY ( enemy ) ;
43776: LD_ADDR_VAR 0 5
43780: PUSH
43781: LD_VAR 0 2
43785: PPUSH
43786: CALL_OW 251
43790: ST_TO_ADDR
// if ValidHex ( x , y ) then
43791: LD_VAR 0 4
43795: PPUSH
43796: LD_VAR 0 5
43800: PPUSH
43801: CALL_OW 488
43805: IFFALSE 43887
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43807: LD_VAR 0 2
43811: PPUSH
43812: CALL_OW 247
43816: PUSH
43817: LD_INT 3
43819: PUSH
43820: LD_INT 2
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: IN
43827: IFTRUE 43850
43829: PUSH
43830: LD_VAR 0 1
43834: PPUSH
43835: CALL_OW 255
43839: PPUSH
43840: LD_VAR 0 2
43844: PPUSH
43845: CALL_OW 292
43849: OR
43850: IFFALSE 43868
// ComAttackUnit ( unit , enemy ) else
43852: LD_VAR 0 1
43856: PPUSH
43857: LD_VAR 0 2
43861: PPUSH
43862: CALL_OW 115
43866: GO 43887
// ComAgressiveMove ( unit , x , y ) ;
43868: LD_VAR 0 1
43872: PPUSH
43873: LD_VAR 0 4
43877: PPUSH
43878: LD_VAR 0 5
43882: PPUSH
43883: CALL_OW 114
// end ;
43887: LD_VAR 0 3
43891: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43892: LD_INT 0
43894: PPUSH
43895: PPUSH
43896: PPUSH
// list := AreaToList ( area , 0 ) ;
43897: LD_ADDR_VAR 0 5
43901: PUSH
43902: LD_VAR 0 1
43906: PPUSH
43907: LD_INT 0
43909: PPUSH
43910: CALL_OW 517
43914: ST_TO_ADDR
// if not list then
43915: LD_VAR 0 5
43919: NOT
43920: IFFALSE 43924
// exit ;
43922: GO 44054
// if all then
43924: LD_VAR 0 2
43928: IFFALSE 44016
// begin for i := 1 to list [ 1 ] do
43930: LD_ADDR_VAR 0 4
43934: PUSH
43935: DOUBLE
43936: LD_INT 1
43938: DEC
43939: ST_TO_ADDR
43940: LD_VAR 0 5
43944: PUSH
43945: LD_INT 1
43947: ARRAY
43948: PUSH
43949: FOR_TO
43950: IFFALSE 44012
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43952: LD_ADDR_VAR 0 3
43956: PUSH
43957: LD_VAR 0 3
43961: PPUSH
43962: LD_VAR 0 3
43966: PUSH
43967: LD_INT 1
43969: PLUS
43970: PPUSH
43971: LD_VAR 0 5
43975: PUSH
43976: LD_INT 1
43978: ARRAY
43979: PUSH
43980: LD_VAR 0 4
43984: ARRAY
43985: PUSH
43986: LD_VAR 0 5
43990: PUSH
43991: LD_INT 2
43993: ARRAY
43994: PUSH
43995: LD_VAR 0 4
43999: ARRAY
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PPUSH
44005: CALL_OW 1
44009: ST_TO_ADDR
44010: GO 43949
44012: POP
44013: POP
// exit ;
44014: GO 44054
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44016: LD_ADDR_VAR 0 3
44020: PUSH
44021: LD_VAR 0 5
44025: PUSH
44026: LD_INT 1
44028: ARRAY
44029: PUSH
44030: LD_INT 1
44032: ARRAY
44033: PUSH
44034: LD_VAR 0 5
44038: PUSH
44039: LD_INT 2
44041: ARRAY
44042: PUSH
44043: LD_INT 1
44045: ARRAY
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: EMPTY
44052: LIST
44053: ST_TO_ADDR
// end ;
44054: LD_VAR 0 3
44058: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44059: LD_INT 0
44061: PPUSH
44062: PPUSH
// list := AreaToList ( area , 0 ) ;
44063: LD_ADDR_VAR 0 4
44067: PUSH
44068: LD_VAR 0 1
44072: PPUSH
44073: LD_INT 0
44075: PPUSH
44076: CALL_OW 517
44080: ST_TO_ADDR
// if not list then
44081: LD_VAR 0 4
44085: NOT
44086: IFFALSE 44090
// exit ;
44088: GO 44131
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44090: LD_ADDR_VAR 0 3
44094: PUSH
44095: LD_VAR 0 4
44099: PUSH
44100: LD_INT 1
44102: ARRAY
44103: PUSH
44104: LD_INT 1
44106: ARRAY
44107: PUSH
44108: LD_VAR 0 4
44112: PUSH
44113: LD_INT 2
44115: ARRAY
44116: PUSH
44117: LD_INT 1
44119: ARRAY
44120: PUSH
44121: LD_VAR 0 2
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: LIST
44130: ST_TO_ADDR
// end ;
44131: LD_VAR 0 3
44135: RET
// export function First ( array ) ; begin
44136: LD_INT 0
44138: PPUSH
// if not array then
44139: LD_VAR 0 1
44143: NOT
44144: IFFALSE 44148
// exit ;
44146: GO 44162
// result := array [ 1 ] ;
44148: LD_ADDR_VAR 0 2
44152: PUSH
44153: LD_VAR 0 1
44157: PUSH
44158: LD_INT 1
44160: ARRAY
44161: ST_TO_ADDR
// end ;
44162: LD_VAR 0 2
44166: RET
// export function Last ( array ) ; begin
44167: LD_INT 0
44169: PPUSH
// if not array then
44170: LD_VAR 0 1
44174: NOT
44175: IFFALSE 44179
// exit ;
44177: GO 44195
// result := array [ array ] ;
44179: LD_ADDR_VAR 0 2
44183: PUSH
44184: LD_VAR 0 1
44188: PUSH
44189: LD_VAR 0 1
44193: ARRAY
44194: ST_TO_ADDR
// end ;
44195: LD_VAR 0 2
44199: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44200: LD_INT 0
44202: PPUSH
44203: PPUSH
// result := [ ] ;
44204: LD_ADDR_VAR 0 5
44208: PUSH
44209: EMPTY
44210: ST_TO_ADDR
// if not array then
44211: LD_VAR 0 1
44215: NOT
44216: IFFALSE 44220
// exit ;
44218: GO 44332
// for i := 1 to array do
44220: LD_ADDR_VAR 0 6
44224: PUSH
44225: DOUBLE
44226: LD_INT 1
44228: DEC
44229: ST_TO_ADDR
44230: LD_VAR 0 1
44234: PUSH
44235: FOR_TO
44236: IFFALSE 44330
// if array [ i ] [ index ] = value then
44238: LD_VAR 0 1
44242: PUSH
44243: LD_VAR 0 6
44247: ARRAY
44248: PUSH
44249: LD_VAR 0 2
44253: ARRAY
44254: PUSH
44255: LD_VAR 0 3
44259: EQUAL
44260: IFFALSE 44328
// begin if indexColumn then
44262: LD_VAR 0 4
44266: IFFALSE 44302
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44268: LD_ADDR_VAR 0 5
44272: PUSH
44273: LD_VAR 0 5
44277: PPUSH
44278: LD_VAR 0 1
44282: PUSH
44283: LD_VAR 0 6
44287: ARRAY
44288: PUSH
44289: LD_VAR 0 4
44293: ARRAY
44294: PPUSH
44295: CALL 39340 0 2
44299: ST_TO_ADDR
44300: GO 44328
// result := Join ( result , array [ i ] ) ;
44302: LD_ADDR_VAR 0 5
44306: PUSH
44307: LD_VAR 0 5
44311: PPUSH
44312: LD_VAR 0 1
44316: PUSH
44317: LD_VAR 0 6
44321: ARRAY
44322: PPUSH
44323: CALL 39340 0 2
44327: ST_TO_ADDR
// end ;
44328: GO 44235
44330: POP
44331: POP
// end ;
44332: LD_VAR 0 5
44336: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44337: LD_INT 0
44339: PPUSH
// if not vehicles or not parkingPoint then
44340: LD_VAR 0 1
44344: NOT
44345: IFTRUE 44354
44347: PUSH
44348: LD_VAR 0 2
44352: NOT
44353: OR
44354: IFFALSE 44358
// exit ;
44356: GO 44456
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44358: LD_ADDR_VAR 0 1
44362: PUSH
44363: LD_VAR 0 1
44367: PPUSH
44368: LD_INT 50
44370: PUSH
44371: EMPTY
44372: LIST
44373: PUSH
44374: LD_INT 3
44376: PUSH
44377: LD_INT 92
44379: PUSH
44380: LD_VAR 0 2
44384: PUSH
44385: LD_INT 1
44387: ARRAY
44388: PUSH
44389: LD_VAR 0 2
44393: PUSH
44394: LD_INT 2
44396: ARRAY
44397: PUSH
44398: LD_INT 8
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PPUSH
44415: CALL_OW 72
44419: ST_TO_ADDR
// if not vehicles then
44420: LD_VAR 0 1
44424: NOT
44425: IFFALSE 44429
// exit ;
44427: GO 44456
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44429: LD_VAR 0 1
44433: PPUSH
44434: LD_VAR 0 2
44438: PUSH
44439: LD_INT 1
44441: ARRAY
44442: PPUSH
44443: LD_VAR 0 2
44447: PUSH
44448: LD_INT 2
44450: ARRAY
44451: PPUSH
44452: CALL_OW 111
// end ;
44456: LD_VAR 0 3
44460: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44461: LD_INT 0
44463: PPUSH
44464: PPUSH
44465: PPUSH
// if not side or not area then
44466: LD_VAR 0 1
44470: NOT
44471: IFTRUE 44480
44473: PUSH
44474: LD_VAR 0 2
44478: NOT
44479: OR
44480: IFFALSE 44484
// exit ;
44482: GO 44603
// tmp := AreaToList ( area , 0 ) ;
44484: LD_ADDR_VAR 0 5
44488: PUSH
44489: LD_VAR 0 2
44493: PPUSH
44494: LD_INT 0
44496: PPUSH
44497: CALL_OW 517
44501: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44502: LD_ADDR_VAR 0 4
44506: PUSH
44507: DOUBLE
44508: LD_INT 1
44510: DEC
44511: ST_TO_ADDR
44512: LD_VAR 0 5
44516: PUSH
44517: LD_INT 1
44519: ARRAY
44520: PUSH
44521: FOR_TO
44522: IFFALSE 44601
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44524: LD_VAR 0 5
44528: PUSH
44529: LD_INT 1
44531: ARRAY
44532: PUSH
44533: LD_VAR 0 4
44537: ARRAY
44538: PPUSH
44539: LD_VAR 0 5
44543: PUSH
44544: LD_INT 2
44546: ARRAY
44547: PUSH
44548: LD_VAR 0 4
44552: ARRAY
44553: PPUSH
44554: CALL_OW 351
44558: IFFALSE 44599
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44560: LD_VAR 0 5
44564: PUSH
44565: LD_INT 1
44567: ARRAY
44568: PUSH
44569: LD_VAR 0 4
44573: ARRAY
44574: PPUSH
44575: LD_VAR 0 5
44579: PUSH
44580: LD_INT 2
44582: ARRAY
44583: PUSH
44584: LD_VAR 0 4
44588: ARRAY
44589: PPUSH
44590: LD_VAR 0 1
44594: PPUSH
44595: CALL_OW 244
// end ;
44599: GO 44521
44601: POP
44602: POP
// end ;
44603: LD_VAR 0 3
44607: RET
// export function UniqueArray ( array ) ; var i ; begin
44608: LD_INT 0
44610: PPUSH
44611: PPUSH
// result := [ ] ;
44612: LD_ADDR_VAR 0 2
44616: PUSH
44617: EMPTY
44618: ST_TO_ADDR
// if not array then
44619: LD_VAR 0 1
44623: NOT
44624: IFFALSE 44628
// exit ;
44626: GO 44689
// for i := 1 to array do
44628: LD_ADDR_VAR 0 3
44632: PUSH
44633: DOUBLE
44634: LD_INT 1
44636: DEC
44637: ST_TO_ADDR
44638: LD_VAR 0 1
44642: PUSH
44643: FOR_TO
44644: IFFALSE 44687
// if not array [ i ] in result then
44646: LD_VAR 0 1
44650: PUSH
44651: LD_VAR 0 3
44655: ARRAY
44656: PUSH
44657: LD_VAR 0 2
44661: IN
44662: NOT
44663: IFFALSE 44685
// result := Join ( result , i ) ;
44665: LD_ADDR_VAR 0 2
44669: PUSH
44670: LD_VAR 0 2
44674: PPUSH
44675: LD_VAR 0 3
44679: PPUSH
44680: CALL 39340 0 2
44684: ST_TO_ADDR
44685: GO 44643
44687: POP
44688: POP
// end ; end_of_file
44689: LD_VAR 0 2
44693: RET
// export ecoSide , ecoNation , ecoPeopleAmount , ecoStartPoint , ecoCratesDrop , ecoCratesDropXY , ecoCratesDropAllow , ecoAttacksAllow , ecoEventsAllow , ecoAttacksArea , ecoEventsList ; export function InitEcoMode ( startPoint , cratesDropXY , attacksArea ) ; var i , tmp , side , nation , peopleAmount , resourcesAmount ; begin
44694: LD_INT 0
44696: PPUSH
44697: PPUSH
44698: PPUSH
44699: PPUSH
44700: PPUSH
44701: PPUSH
44702: PPUSH
// ecoStartPoint := startPoint ;
44703: LD_ADDR_EXP 6
44707: PUSH
44708: LD_VAR 0 1
44712: ST_TO_ADDR
// CenterNowOnXY ( ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
44713: LD_EXP 6
44717: PUSH
44718: LD_INT 1
44720: ARRAY
44721: PPUSH
44722: LD_EXP 6
44726: PUSH
44727: LD_INT 2
44729: ARRAY
44730: PPUSH
44731: CALL_OW 86
// ecoCratesDropXY := cratesDropXY ;
44735: LD_ADDR_EXP 8
44739: PUSH
44740: LD_VAR 0 2
44744: ST_TO_ADDR
// ecoAttacksArea := attacksArea ;
44745: LD_ADDR_EXP 12
44749: PUSH
44750: LD_VAR 0 3
44754: ST_TO_ADDR
// if debug then
44755: LD_EXP 1
44759: IFFALSE 44803
// begin side := 1 ;
44761: LD_ADDR_VAR 0 7
44765: PUSH
44766: LD_INT 1
44768: ST_TO_ADDR
// nation := 1 ;
44769: LD_ADDR_VAR 0 8
44773: PUSH
44774: LD_INT 1
44776: ST_TO_ADDR
// peopleAmount := 15 ;
44777: LD_ADDR_VAR 0 9
44781: PUSH
44782: LD_INT 15
44784: ST_TO_ADDR
// resourcesAmount := 2 ;
44785: LD_ADDR_VAR 0 10
44789: PUSH
44790: LD_INT 2
44792: ST_TO_ADDR
// ecoCratesDrop := 3 ;
44793: LD_ADDR_EXP 7
44797: PUSH
44798: LD_INT 3
44800: ST_TO_ADDR
// end else
44801: GO 44899
// begin side := GetMultiplayerSetting ( 0 ) ;
44803: LD_ADDR_VAR 0 7
44807: PUSH
44808: LD_INT 0
44810: PPUSH
44811: CALL_OW 426
44815: ST_TO_ADDR
// nation := GetMultiplayerSetting ( 1 ) ;
44816: LD_ADDR_VAR 0 8
44820: PUSH
44821: LD_INT 1
44823: PPUSH
44824: CALL_OW 426
44828: ST_TO_ADDR
// peopleAmount := [ 6 , 9 , 12 , 15 , 18 , 21 , 24 ] [ GetMultiplayerSetting ( 2 ) ] ;
44829: LD_ADDR_VAR 0 9
44833: PUSH
44834: LD_INT 6
44836: PUSH
44837: LD_INT 9
44839: PUSH
44840: LD_INT 12
44842: PUSH
44843: LD_INT 15
44845: PUSH
44846: LD_INT 18
44848: PUSH
44849: LD_INT 21
44851: PUSH
44852: LD_INT 24
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 2
44866: PPUSH
44867: CALL_OW 426
44871: ARRAY
44872: ST_TO_ADDR
// resourcesAmount := GetMultiplayerSetting ( 3 ) ;
44873: LD_ADDR_VAR 0 10
44877: PUSH
44878: LD_INT 3
44880: PPUSH
44881: CALL_OW 426
44885: ST_TO_ADDR
// ecoCratesDrop := GetMultiplayerSetting ( 4 ) ;
44886: LD_ADDR_EXP 7
44890: PUSH
44891: LD_INT 4
44893: PPUSH
44894: CALL_OW 426
44898: ST_TO_ADDR
// end ; ecoCratesDropAllow := true ;
44899: LD_ADDR_EXP 9
44903: PUSH
44904: LD_INT 1
44906: ST_TO_ADDR
// ecoEventsAllow := false ;
44907: LD_ADDR_EXP 11
44911: PUSH
44912: LD_INT 0
44914: ST_TO_ADDR
// ecoAttacksAllow := false ;
44915: LD_ADDR_EXP 10
44919: PUSH
44920: LD_INT 0
44922: ST_TO_ADDR
// ecoSide := side ;
44923: LD_ADDR_EXP 3
44927: PUSH
44928: LD_VAR 0 7
44932: ST_TO_ADDR
// your_side := side ;
44933: LD_ADDR_OWVAR 2
44937: PUSH
44938: LD_VAR 0 7
44942: ST_TO_ADDR
// ChangeSideFog ( 1 , side ) ;
44943: LD_INT 1
44945: PPUSH
44946: LD_VAR 0 7
44950: PPUSH
44951: CALL_OW 343
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
44955: LD_INT 1
44957: PPUSH
44958: LD_INT 1
44960: PPUSH
44961: LD_VAR 0 7
44965: PPUSH
44966: LD_INT 32793
44968: NEG
44969: PPUSH
44970: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
44974: LD_INT 1
44976: PPUSH
44977: LD_INT 1
44979: PPUSH
44980: LD_VAR 0 7
44984: PPUSH
44985: CALL_OW 331
// ecoNation := nation ;
44989: LD_ADDR_EXP 4
44993: PUSH
44994: LD_VAR 0 8
44998: ST_TO_ADDR
// ecoPeopleAmount := peopleAmount ;
44999: LD_ADDR_EXP 5
45003: PUSH
45004: LD_VAR 0 9
45008: ST_TO_ADDR
// for i = 1 to resourcesAmount * 5 do
45009: LD_ADDR_VAR 0 5
45013: PUSH
45014: DOUBLE
45015: LD_INT 1
45017: DEC
45018: ST_TO_ADDR
45019: LD_VAR 0 10
45023: PUSH
45024: LD_INT 5
45026: MUL
45027: PUSH
45028: FOR_TO
45029: IFFALSE 45067
// CreateResourcesXYR ( mat_cans , 5 , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 6 , false ) ;
45031: LD_INT 1
45033: PPUSH
45034: LD_INT 5
45036: PPUSH
45037: LD_EXP 6
45041: PUSH
45042: LD_INT 1
45044: ARRAY
45045: PPUSH
45046: LD_EXP 6
45050: PUSH
45051: LD_INT 2
45053: ARRAY
45054: PPUSH
45055: LD_INT 6
45057: PPUSH
45058: LD_INT 0
45060: PPUSH
45061: CALL_OW 60
45065: GO 45028
45067: POP
45068: POP
// uc_side := side ;
45069: LD_ADDR_OWVAR 20
45073: PUSH
45074: LD_VAR 0 7
45078: ST_TO_ADDR
// uc_nation := nation ;
45079: LD_ADDR_OWVAR 21
45083: PUSH
45084: LD_VAR 0 8
45088: ST_TO_ADDR
// hc_importance := 100 ;
45089: LD_ADDR_OWVAR 32
45093: PUSH
45094: LD_INT 100
45096: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
45097: LD_INT 0
45099: PPUSH
45100: LD_INT 1
45102: PPUSH
45103: LD_INT 4
45105: PPUSH
45106: CALL_OW 380
// if side = 1 and nation = 1 then
45110: LD_VAR 0 7
45114: PUSH
45115: LD_INT 1
45117: EQUAL
45118: IFFALSE 45130
45120: PUSH
45121: LD_VAR 0 8
45125: PUSH
45126: LD_INT 1
45128: EQUAL
45129: AND
45130: IFFALSE 45164
// begin hc_name := John Macmilan ;
45132: LD_ADDR_OWVAR 26
45136: PUSH
45137: LD_STRING John Macmilan
45139: ST_TO_ADDR
// hc_gallery := us ;
45140: LD_ADDR_OWVAR 33
45144: PUSH
45145: LD_STRING us
45147: ST_TO_ADDR
// hc_face_number := 5 ;
45148: LD_ADDR_OWVAR 34
45152: PUSH
45153: LD_INT 5
45155: ST_TO_ADDR
// hc_sex := sex_male ;
45156: LD_ADDR_OWVAR 27
45160: PUSH
45161: LD_INT 1
45163: ST_TO_ADDR
// end ; if side = 2 and nation = 2 then
45164: LD_VAR 0 7
45168: PUSH
45169: LD_INT 2
45171: EQUAL
45172: IFFALSE 45184
45174: PUSH
45175: LD_VAR 0 8
45179: PUSH
45180: LD_INT 2
45182: EQUAL
45183: AND
45184: IFFALSE 45218
// begin hc_name := Heike Steyer ;
45186: LD_ADDR_OWVAR 26
45190: PUSH
45191: LD_STRING Heike Steyer
45193: ST_TO_ADDR
// hc_gallery := sandar ;
45194: LD_ADDR_OWVAR 33
45198: PUSH
45199: LD_STRING sandar
45201: ST_TO_ADDR
// hc_face_number := 14 ;
45202: LD_ADDR_OWVAR 34
45206: PUSH
45207: LD_INT 14
45209: ST_TO_ADDR
// hc_sex := sex_female ;
45210: LD_ADDR_OWVAR 27
45214: PUSH
45215: LD_INT 2
45217: ST_TO_ADDR
// end ; if side = 5 and nation = 2 then
45218: LD_VAR 0 7
45222: PUSH
45223: LD_INT 5
45225: EQUAL
45226: IFFALSE 45238
45228: PUSH
45229: LD_VAR 0 8
45233: PUSH
45234: LD_INT 2
45236: EQUAL
45237: AND
45238: IFFALSE 45280
// begin hc_name := Omar Ali ;
45240: LD_ADDR_OWVAR 26
45244: PUSH
45245: LD_STRING Omar Ali
45247: ST_TO_ADDR
// hc_gallery := sandar ;
45248: LD_ADDR_OWVAR 33
45252: PUSH
45253: LD_STRING sandar
45255: ST_TO_ADDR
// hc_face_number := 6 ;
45256: LD_ADDR_OWVAR 34
45260: PUSH
45261: LD_INT 6
45263: ST_TO_ADDR
// hc_sex := sex_male ;
45264: LD_ADDR_OWVAR 27
45268: PUSH
45269: LD_INT 1
45271: ST_TO_ADDR
// hc_class := class_desert_warior ;
45272: LD_ADDR_OWVAR 28
45276: PUSH
45277: LD_INT 11
45279: ST_TO_ADDR
// end ; if side = 6 and nation = 3 then
45280: LD_VAR 0 7
45284: PUSH
45285: LD_INT 6
45287: EQUAL
45288: IFFALSE 45300
45290: PUSH
45291: LD_VAR 0 8
45295: PUSH
45296: LD_INT 3
45298: EQUAL
45299: AND
45300: IFFALSE 45347
// begin PrepareHuman ( false , 3 , 4 ) ;
45302: LD_INT 0
45304: PPUSH
45305: LD_INT 3
45307: PPUSH
45308: LD_INT 4
45310: PPUSH
45311: CALL_OW 380
// hc_name := Yuri I. Burlak ;
45315: LD_ADDR_OWVAR 26
45319: PUSH
45320: LD_STRING Yuri I. Burlak
45322: ST_TO_ADDR
// hc_gallery := ru ;
45323: LD_ADDR_OWVAR 33
45327: PUSH
45328: LD_STRING ru
45330: ST_TO_ADDR
// hc_face_number := 1 ;
45331: LD_ADDR_OWVAR 34
45335: PUSH
45336: LD_INT 1
45338: ST_TO_ADDR
// hc_sex := sex_male ;
45339: LD_ADDR_OWVAR 27
45343: PUSH
45344: LD_INT 1
45346: ST_TO_ADDR
// end ; if side = 4 and nation = 1 then
45347: LD_VAR 0 7
45351: PUSH
45352: LD_INT 4
45354: EQUAL
45355: IFFALSE 45367
45357: PUSH
45358: LD_VAR 0 8
45362: PUSH
45363: LD_INT 1
45365: EQUAL
45366: AND
45367: IFFALSE 45401
// begin hc_name := Arthur Powell ;
45369: LD_ADDR_OWVAR 26
45373: PUSH
45374: LD_STRING Arthur Powell
45376: ST_TO_ADDR
// hc_gallery := us ;
45377: LD_ADDR_OWVAR 33
45381: PUSH
45382: LD_STRING us
45384: ST_TO_ADDR
// hc_face_number := 7 ;
45385: LD_ADDR_OWVAR 34
45389: PUSH
45390: LD_INT 7
45392: ST_TO_ADDR
// hc_sex := sex_male ;
45393: LD_ADDR_OWVAR 27
45397: PUSH
45398: LD_INT 1
45400: ST_TO_ADDR
// end ; if side = 3 and nation = 3 then
45401: LD_VAR 0 7
45405: PUSH
45406: LD_INT 3
45408: EQUAL
45409: IFFALSE 45421
45411: PUSH
45412: LD_VAR 0 8
45416: PUSH
45417: LD_INT 3
45419: EQUAL
45420: AND
45421: IFFALSE 45455
// begin hc_name := Mjr. Platonov ;
45423: LD_ADDR_OWVAR 26
45427: PUSH
45428: LD_STRING Mjr. Platonov
45430: ST_TO_ADDR
// hc_gallery := ru ;
45431: LD_ADDR_OWVAR 33
45435: PUSH
45436: LD_STRING ru
45438: ST_TO_ADDR
// hc_face_number := 60 ;
45439: LD_ADDR_OWVAR 34
45443: PUSH
45444: LD_INT 60
45446: ST_TO_ADDR
// hc_sex := sex_male ;
45447: LD_ADDR_OWVAR 27
45451: PUSH
45452: LD_INT 1
45454: ST_TO_ADDR
// end ; if side = 7 and nation = 1 then
45455: LD_VAR 0 7
45459: PUSH
45460: LD_INT 7
45462: EQUAL
45463: IFFALSE 45475
45465: PUSH
45466: LD_VAR 0 8
45470: PUSH
45471: LD_INT 1
45473: EQUAL
45474: AND
45475: IFFALSE 45522
// begin PrepareHuman ( false , 4 , 4 ) ;
45477: LD_INT 0
45479: PPUSH
45480: LD_INT 4
45482: PPUSH
45483: LD_INT 4
45485: PPUSH
45486: CALL_OW 380
// hc_name := Peter Roth ;
45490: LD_ADDR_OWVAR 26
45494: PUSH
45495: LD_STRING Peter Roth
45497: ST_TO_ADDR
// hc_gallery := us ;
45498: LD_ADDR_OWVAR 33
45502: PUSH
45503: LD_STRING us
45505: ST_TO_ADDR
// hc_face_number := 22 ;
45506: LD_ADDR_OWVAR 34
45510: PUSH
45511: LD_INT 22
45513: ST_TO_ADDR
// hc_sex := sex_male ;
45514: LD_ADDR_OWVAR 27
45518: PUSH
45519: LD_INT 1
45521: ST_TO_ADDR
// end ; if side = 7 and nation = 3 then
45522: LD_VAR 0 7
45526: PUSH
45527: LD_INT 7
45529: EQUAL
45530: IFFALSE 45542
45532: PUSH
45533: LD_VAR 0 8
45537: PUSH
45538: LD_INT 3
45540: EQUAL
45541: AND
45542: IFFALSE 45589
// begin PrepareHuman ( false , 4 , 4 ) ;
45544: LD_INT 0
45546: PPUSH
45547: LD_INT 4
45549: PPUSH
45550: LD_INT 4
45552: PPUSH
45553: CALL_OW 380
// hc_name := Prof. Gossudarov ;
45557: LD_ADDR_OWVAR 26
45561: PUSH
45562: LD_STRING Prof. Gossudarov
45564: ST_TO_ADDR
// hc_gallery := ru ;
45565: LD_ADDR_OWVAR 33
45569: PUSH
45570: LD_STRING ru
45572: ST_TO_ADDR
// hc_face_number := 61 ;
45573: LD_ADDR_OWVAR 34
45577: PUSH
45578: LD_INT 61
45580: ST_TO_ADDR
// hc_sex := sex_male ;
45581: LD_ADDR_OWVAR 27
45585: PUSH
45586: LD_INT 1
45588: ST_TO_ADDR
// end ; if side = 8 and nation = 1 then
45589: LD_VAR 0 7
45593: PUSH
45594: LD_INT 8
45596: EQUAL
45597: IFFALSE 45609
45599: PUSH
45600: LD_VAR 0 8
45604: PUSH
45605: LD_INT 1
45607: EQUAL
45608: AND
45609: IFFALSE 45643
// begin hc_name := Ron Harisson ;
45611: LD_ADDR_OWVAR 26
45615: PUSH
45616: LD_STRING Ron Harisson
45618: ST_TO_ADDR
// hc_gallery := us ;
45619: LD_ADDR_OWVAR 33
45623: PUSH
45624: LD_STRING us
45626: ST_TO_ADDR
// hc_face_number := 6 ;
45627: LD_ADDR_OWVAR 34
45631: PUSH
45632: LD_INT 6
45634: ST_TO_ADDR
// hc_sex := sex_male ;
45635: LD_ADDR_OWVAR 27
45639: PUSH
45640: LD_INT 1
45642: ST_TO_ADDR
// end ; if side = 8 and nation = 2 then
45643: LD_VAR 0 7
45647: PUSH
45648: LD_INT 8
45650: EQUAL
45651: IFFALSE 45663
45653: PUSH
45654: LD_VAR 0 8
45658: PUSH
45659: LD_INT 2
45661: EQUAL
45662: AND
45663: IFFALSE 45697
// begin hc_name := Louis Schulz ;
45665: LD_ADDR_OWVAR 26
45669: PUSH
45670: LD_STRING Louis Schulz
45672: ST_TO_ADDR
// hc_gallery := sandar ;
45673: LD_ADDR_OWVAR 33
45677: PUSH
45678: LD_STRING sandar
45680: ST_TO_ADDR
// hc_face_number := 1 ;
45681: LD_ADDR_OWVAR 34
45685: PUSH
45686: LD_INT 1
45688: ST_TO_ADDR
// hc_sex := sex_male ;
45689: LD_ADDR_OWVAR 27
45693: PUSH
45694: LD_INT 1
45696: ST_TO_ADDR
// end ; PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
45697: CALL_OW 44
45701: PPUSH
45702: LD_EXP 6
45706: PUSH
45707: LD_INT 1
45709: ARRAY
45710: PPUSH
45711: LD_EXP 6
45715: PUSH
45716: LD_INT 2
45718: ARRAY
45719: PPUSH
45720: LD_INT 12
45722: PPUSH
45723: LD_INT 0
45725: PPUSH
45726: CALL_OW 50
// InitHc_All ( ) ;
45730: CALL_OW 584
// for i = 1 to peopleAmount - 1 do
45734: LD_ADDR_VAR 0 5
45738: PUSH
45739: DOUBLE
45740: LD_INT 1
45742: DEC
45743: ST_TO_ADDR
45744: LD_VAR 0 9
45748: PUSH
45749: LD_INT 1
45751: MINUS
45752: PUSH
45753: FOR_TO
45754: IFFALSE 45849
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
45756: LD_INT 0
45758: PPUSH
45759: LD_VAR 0 5
45763: PUSH
45764: LD_INT 4
45766: MOD
45767: PUSH
45768: LD_INT 1
45770: PLUS
45771: PPUSH
45772: LD_INT 3
45774: PPUSH
45775: CALL_OW 380
// tmp := Replace ( tmp , tmp + 1 , CreateHuman ) ;
45779: LD_ADDR_VAR 0 6
45783: PUSH
45784: LD_VAR 0 6
45788: PPUSH
45789: LD_VAR 0 6
45793: PUSH
45794: LD_INT 1
45796: PLUS
45797: PPUSH
45798: CALL_OW 44
45802: PPUSH
45803: CALL_OW 1
45807: ST_TO_ADDR
// PlaceUnitXYR ( tmp [ tmp ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
45808: LD_VAR 0 6
45812: PUSH
45813: LD_VAR 0 6
45817: ARRAY
45818: PPUSH
45819: LD_EXP 6
45823: PUSH
45824: LD_INT 1
45826: ARRAY
45827: PPUSH
45828: LD_EXP 6
45832: PUSH
45833: LD_INT 2
45835: ARRAY
45836: PPUSH
45837: LD_INT 12
45839: PPUSH
45840: LD_INT 0
45842: PPUSH
45843: CALL_OW 50
// end ;
45847: GO 45753
45849: POP
45850: POP
// end ;
45851: LD_VAR 0 4
45855: RET
// every 0 0$1 trigger ecoCratesDrop and ecoCratesDropXY do var time , xy ;
45856: LD_EXP 7
45860: IFFALSE 45868
45862: PUSH
45863: LD_EXP 8
45867: AND
45868: IFFALSE 46038
45870: GO 45872
45872: DISABLE
45873: LD_INT 0
45875: PPUSH
45876: PPUSH
// begin time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
45877: LD_ADDR_VAR 0 1
45881: PUSH
45882: LD_INT 700
45884: PUSH
45885: LD_INT 350
45887: PUSH
45888: LD_INT 175
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: LIST
45895: PUSH
45896: LD_EXP 7
45900: ARRAY
45901: ST_TO_ADDR
// while true do
45902: LD_INT 1
45904: IFFALSE 46038
// begin wait ( time ) ;
45906: LD_VAR 0 1
45910: PPUSH
45911: CALL_OW 67
// if not ecoCratesDropAllow then
45915: LD_EXP 9
45919: NOT
45920: IFFALSE 45924
// continue ;
45922: GO 45902
// time := time + 0 0$2 ;
45924: LD_ADDR_VAR 0 1
45928: PUSH
45929: LD_VAR 0 1
45933: PUSH
45934: LD_INT 70
45936: PLUS
45937: ST_TO_ADDR
// if time > 0 0$40 then
45938: LD_VAR 0 1
45942: PUSH
45943: LD_INT 1400
45945: GREATER
45946: IFFALSE 45973
// time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
45948: LD_ADDR_VAR 0 1
45952: PUSH
45953: LD_INT 700
45955: PUSH
45956: LD_INT 350
45958: PUSH
45959: LD_INT 175
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: LIST
45966: PUSH
45967: LD_EXP 7
45971: ARRAY
45972: ST_TO_ADDR
// xy := ecoCratesDropXY [ rand ( 1 , ecoCratesDropXY ) ] ;
45973: LD_ADDR_VAR 0 2
45977: PUSH
45978: LD_EXP 8
45982: PUSH
45983: LD_INT 1
45985: PPUSH
45986: LD_EXP 8
45990: PPUSH
45991: CALL_OW 12
45995: ARRAY
45996: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , xy [ 1 ] , xy [ 2 ] , 14 , true ) ;
45997: LD_INT 1
45999: PPUSH
46000: LD_INT 5
46002: PPUSH
46003: CALL_OW 12
46007: PPUSH
46008: LD_VAR 0 2
46012: PUSH
46013: LD_INT 1
46015: ARRAY
46016: PPUSH
46017: LD_VAR 0 2
46021: PUSH
46022: LD_INT 2
46024: ARRAY
46025: PPUSH
46026: LD_INT 14
46028: PPUSH
46029: LD_INT 1
46031: PPUSH
46032: CALL_OW 56
// end ;
46036: GO 45902
// end ;
46038: PPOPN 2
46040: END
// every 0 0$1 trigger ecoAttacksArea and ecoAttacksAllow do var time , area , tmp , i , xy , veh , dir , enemySide , waveBonus ;
46041: LD_EXP 12
46045: IFFALSE 46053
46047: PUSH
46048: LD_EXP 10
46052: AND
46053: IFFALSE 46821
46055: GO 46057
46057: DISABLE
46058: LD_INT 0
46060: PPUSH
46061: PPUSH
46062: PPUSH
46063: PPUSH
46064: PPUSH
46065: PPUSH
46066: PPUSH
46067: PPUSH
46068: PPUSH
// begin time := 3 3$00 ;
46069: LD_ADDR_VAR 0 1
46073: PUSH
46074: LD_INT 6300
46076: ST_TO_ADDR
// enemySide := [ 3 , 9 ] [ rand ( 1 , 2 ) ] ;
46077: LD_ADDR_VAR 0 8
46081: PUSH
46082: LD_INT 3
46084: PUSH
46085: LD_INT 9
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: PPUSH
46095: LD_INT 2
46097: PPUSH
46098: CALL_OW 12
46102: ARRAY
46103: ST_TO_ADDR
// waveBonus := 0 ;
46104: LD_ADDR_VAR 0 9
46108: PUSH
46109: LD_INT 0
46111: ST_TO_ADDR
// if ecoSide = enemySide then
46112: LD_EXP 3
46116: PUSH
46117: LD_VAR 0 8
46121: EQUAL
46122: IFFALSE 46132
// enemySide := 1 ;
46124: LD_ADDR_VAR 0 8
46128: PUSH
46129: LD_INT 1
46131: ST_TO_ADDR
// while true do
46132: LD_INT 1
46134: IFFALSE 46821
// begin wait ( time ) ;
46136: LD_VAR 0 1
46140: PPUSH
46141: CALL_OW 67
// if not ecoAttacksAllow then
46145: LD_EXP 10
46149: NOT
46150: IFFALSE 46154
// continue ;
46152: GO 46132
// waveBonus := waveBonus + 2 ;
46154: LD_ADDR_VAR 0 9
46158: PUSH
46159: LD_VAR 0 9
46163: PUSH
46164: LD_INT 2
46166: PLUS
46167: ST_TO_ADDR
// if waveBonus > 20 then
46168: LD_VAR 0 9
46172: PUSH
46173: LD_INT 20
46175: GREATER
46176: IFFALSE 46186
// waveBonus := 20 ;
46178: LD_ADDR_VAR 0 9
46182: PUSH
46183: LD_INT 20
46185: ST_TO_ADDR
// area := ecoAttacksArea [ rand ( 1 , ecoAttacksArea ) ] ;
46186: LD_ADDR_VAR 0 2
46190: PUSH
46191: LD_EXP 12
46195: PUSH
46196: LD_INT 1
46198: PPUSH
46199: LD_EXP 12
46203: PPUSH
46204: CALL_OW 12
46208: ARRAY
46209: ST_TO_ADDR
// tmp := AreaToList ( area , 0 ) ;
46210: LD_ADDR_VAR 0 3
46214: PUSH
46215: LD_VAR 0 2
46219: PPUSH
46220: LD_INT 0
46222: PPUSH
46223: CALL_OW 517
46227: ST_TO_ADDR
// dir := GetDirFromHex ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
46228: LD_ADDR_VAR 0 7
46232: PUSH
46233: LD_VAR 0 3
46237: PUSH
46238: LD_INT 1
46240: ARRAY
46241: PUSH
46242: LD_INT 1
46244: ARRAY
46245: PPUSH
46246: LD_VAR 0 3
46250: PUSH
46251: LD_INT 2
46253: ARRAY
46254: PUSH
46255: LD_INT 1
46257: ARRAY
46258: PPUSH
46259: LD_EXP 6
46263: PUSH
46264: LD_INT 1
46266: ARRAY
46267: PPUSH
46268: LD_EXP 6
46272: PUSH
46273: LD_INT 2
46275: ARRAY
46276: PPUSH
46277: CALL 40757 0 4
46281: ST_TO_ADDR
// xy := PointBetweenXY ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
46282: LD_ADDR_VAR 0 5
46286: PUSH
46287: LD_VAR 0 3
46291: PUSH
46292: LD_INT 1
46294: ARRAY
46295: PUSH
46296: LD_INT 1
46298: ARRAY
46299: PPUSH
46300: LD_VAR 0 3
46304: PUSH
46305: LD_INT 2
46307: ARRAY
46308: PUSH
46309: LD_INT 1
46311: ARRAY
46312: PPUSH
46313: LD_EXP 6
46317: PUSH
46318: LD_INT 1
46320: ARRAY
46321: PPUSH
46322: LD_EXP 6
46326: PUSH
46327: LD_INT 2
46329: ARRAY
46330: PPUSH
46331: CALL 39885 0 4
46335: ST_TO_ADDR
// tmp := [ ] ;
46336: LD_ADDR_VAR 0 3
46340: PUSH
46341: EMPTY
46342: ST_TO_ADDR
// for i := 1 to 6 + waveBonus do
46343: LD_ADDR_VAR 0 4
46347: PUSH
46348: DOUBLE
46349: LD_INT 1
46351: DEC
46352: ST_TO_ADDR
46353: LD_INT 6
46355: PUSH
46356: LD_VAR 0 9
46360: PLUS
46361: PUSH
46362: FOR_TO
46363: IFFALSE 46682
// begin uc_side := enemySide ;
46365: LD_ADDR_OWVAR 20
46369: PUSH
46370: LD_VAR 0 8
46374: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
46375: LD_ADDR_OWVAR 21
46379: PUSH
46380: LD_INT 1
46382: PPUSH
46383: LD_INT 3
46385: PPUSH
46386: CALL_OW 12
46390: ST_TO_ADDR
// case uc_nation of 1 :
46391: LD_OWVAR 21
46395: PUSH
46396: LD_INT 1
46398: DOUBLE
46399: EQUAL
46400: IFTRUE 46404
46402: GO 46445
46404: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ; 2 :
46405: LD_INT 5
46407: PPUSH
46408: LD_INT 3
46410: PPUSH
46411: LD_INT 3
46413: PPUSH
46414: LD_INT 6
46416: PUSH
46417: LD_INT 7
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: PPUSH
46427: LD_INT 2
46429: PPUSH
46430: CALL_OW 12
46434: ARRAY
46435: PPUSH
46436: LD_INT 100
46438: PPUSH
46439: CALL 6160 0 5
46443: GO 46548
46445: LD_INT 2
46447: DOUBLE
46448: EQUAL
46449: IFTRUE 46453
46451: GO 46498
46453: POP
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] , 100 ) ; 3 :
46454: LD_INT 14
46456: PPUSH
46457: LD_INT 3
46459: PPUSH
46460: LD_INT 5
46462: PPUSH
46463: LD_INT 27
46465: PUSH
46466: LD_INT 28
46468: PUSH
46469: LD_INT 29
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 1
46479: PPUSH
46480: LD_INT 3
46482: PPUSH
46483: CALL_OW 12
46487: ARRAY
46488: PPUSH
46489: LD_INT 100
46491: PPUSH
46492: CALL 6160 0 5
46496: GO 46548
46498: LD_INT 3
46500: DOUBLE
46501: EQUAL
46502: IFTRUE 46506
46504: GO 46547
46506: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket ] [ rand ( 1 , 2 ) ] , 100 ) ; end ;
46507: LD_INT 24
46509: PPUSH
46510: LD_INT 3
46512: PPUSH
46513: LD_INT 3
46515: PPUSH
46516: LD_INT 46
46518: PUSH
46519: LD_INT 47
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: PPUSH
46529: LD_INT 2
46531: PPUSH
46532: CALL_OW 12
46536: ARRAY
46537: PPUSH
46538: LD_INT 100
46540: PPUSH
46541: CALL 6160 0 5
46545: GO 46548
46547: POP
// veh := CreateVehicle ;
46548: LD_ADDR_VAR 0 6
46552: PUSH
46553: CALL_OW 45
46557: ST_TO_ADDR
// SetDir ( veh , dir ) ;
46558: LD_VAR 0 6
46562: PPUSH
46563: LD_VAR 0 7
46567: PPUSH
46568: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
46572: LD_VAR 0 6
46576: PPUSH
46577: LD_VAR 0 2
46581: PPUSH
46582: LD_INT 0
46584: PPUSH
46585: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
46589: LD_ADDR_VAR 0 3
46593: PUSH
46594: LD_VAR 0 3
46598: PPUSH
46599: LD_VAR 0 3
46603: PUSH
46604: LD_INT 1
46606: PLUS
46607: PPUSH
46608: LD_VAR 0 6
46612: PPUSH
46613: CALL_OW 1
46617: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) = 0 then
46618: LD_VAR 0 5
46622: PUSH
46623: LD_INT 1
46625: ARRAY
46626: PPUSH
46627: LD_VAR 0 5
46631: PUSH
46632: LD_INT 2
46634: ARRAY
46635: PPUSH
46636: CALL_OW 428
46640: PUSH
46641: LD_INT 0
46643: EQUAL
46644: IFFALSE 46673
// ComMoveXY ( veh , xy [ 1 ] , xy [ 2 ] ) ;
46646: LD_VAR 0 6
46650: PPUSH
46651: LD_VAR 0 5
46655: PUSH
46656: LD_INT 1
46658: ARRAY
46659: PPUSH
46660: LD_VAR 0 5
46664: PUSH
46665: LD_INT 2
46667: ARRAY
46668: PPUSH
46669: CALL_OW 111
// wait ( 0 0$0.5 ) ;
46673: LD_INT 18
46675: PPUSH
46676: CALL_OW 67
// end ;
46680: GO 46362
46682: POP
46683: POP
// if tmp then
46684: LD_VAR 0 3
46688: IFFALSE 46819
// begin repeat wait ( 0 0$2 ) ;
46690: LD_INT 70
46692: PPUSH
46693: CALL_OW 67
// for i in tmp do
46697: LD_ADDR_VAR 0 4
46701: PUSH
46702: LD_VAR 0 3
46706: PUSH
46707: FOR_IN
46708: IFFALSE 46810
// begin if IsDead ( i ) or not IsPlaced ( i ) or GetSide ( i ) <> enemySide then
46710: LD_VAR 0 4
46714: PPUSH
46715: CALL_OW 301
46719: IFTRUE 46733
46721: PUSH
46722: LD_VAR 0 4
46726: PPUSH
46727: CALL_OW 305
46731: NOT
46732: OR
46733: IFTRUE 46752
46735: PUSH
46736: LD_VAR 0 4
46740: PPUSH
46741: CALL_OW 255
46745: PUSH
46746: LD_VAR 0 8
46750: NONEQUAL
46751: OR
46752: IFFALSE 46772
// tmp := tmp diff i else
46754: LD_ADDR_VAR 0 3
46758: PUSH
46759: LD_VAR 0 3
46763: PUSH
46764: LD_VAR 0 4
46768: DIFF
46769: ST_TO_ADDR
46770: GO 46808
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , ecoSide ] ) , i ) ) ;
46772: LD_VAR 0 4
46776: PPUSH
46777: LD_INT 22
46779: PUSH
46780: LD_EXP 3
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PPUSH
46789: CALL_OW 69
46793: PPUSH
46794: LD_VAR 0 4
46798: PPUSH
46799: CALL_OW 74
46803: PPUSH
46804: CALL_OW 115
// end ;
46808: GO 46707
46810: POP
46811: POP
// until not tmp ;
46812: LD_VAR 0 3
46816: NOT
46817: IFFALSE 46690
// end ; end ;
46819: GO 46132
// end ;
46821: PPOPN 9
46823: END
// every 0 0$1 trigger ecoEventsAllow do var time , xy ;
46824: LD_EXP 11
46828: IFFALSE 46881
46830: GO 46832
46832: DISABLE
46833: LD_INT 0
46835: PPUSH
46836: PPUSH
// begin time := rand ( 1 1$00 , 10 10$00 ) ;
46837: LD_ADDR_VAR 0 1
46841: PUSH
46842: LD_INT 2100
46844: PPUSH
46845: LD_INT 21000
46847: PPUSH
46848: CALL_OW 12
46852: ST_TO_ADDR
// while true do
46853: LD_INT 1
46855: IFFALSE 46881
// begin wait ( time ) ;
46857: LD_VAR 0 1
46861: PPUSH
46862: CALL_OW 67
// if not ecoEventsAllow then
46866: LD_EXP 11
46870: NOT
46871: IFFALSE 46875
// continue ;
46873: GO 46853
// EcoEvent ( ) ;
46875: CALL 46884 0 0
// end ;
46879: GO 46853
// end ;
46881: PPOPN 2
46883: END
// export function EcoEvent ( ) ; var event , tmp , i ; begin
46884: LD_INT 0
46886: PPUSH
46887: PPUSH
46888: PPUSH
46889: PPUSH
// event := rand ( 1 , 5 ) ;
46890: LD_ADDR_VAR 0 2
46894: PUSH
46895: LD_INT 1
46897: PPUSH
46898: LD_INT 5
46900: PPUSH
46901: CALL_OW 12
46905: ST_TO_ADDR
// case event of 1 :
46906: LD_VAR 0 2
46910: PUSH
46911: LD_INT 1
46913: DOUBLE
46914: EQUAL
46915: IFTRUE 46919
46917: GO 47005
46919: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_building ] ) diff FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
46920: LD_ADDR_VAR 0 3
46924: PUSH
46925: LD_INT 21
46927: PUSH
46928: LD_INT 3
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PPUSH
46935: CALL_OW 69
46939: PUSH
46940: LD_INT 2
46942: PUSH
46943: LD_INT 30
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 30
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: LIST
46967: PPUSH
46968: CALL_OW 69
46972: DIFF
46973: ST_TO_ADDR
// if tmp then
46974: LD_VAR 0 3
46978: IFFALSE 47003
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
46980: LD_VAR 0 3
46984: PUSH
46985: LD_INT 1
46987: PPUSH
46988: LD_VAR 0 3
46992: PPUSH
46993: CALL_OW 12
46997: ARRAY
46998: PPUSH
46999: CALL_OW 65
// end ; 2 :
47003: GO 47204
47005: LD_INT 2
47007: DOUBLE
47008: EQUAL
47009: IFTRUE 47013
47011: GO 47069
47013: POP
// begin uc_side := ecoSide ;
47014: LD_ADDR_OWVAR 20
47018: PUSH
47019: LD_EXP 3
47023: ST_TO_ADDR
// uc_nation := ecoNation ;
47024: LD_ADDR_OWVAR 21
47028: PUSH
47029: LD_EXP 4
47033: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 8 ) ;
47034: LD_INT 0
47036: PPUSH
47037: LD_INT 1
47039: PPUSH
47040: LD_INT 4
47042: PPUSH
47043: CALL_OW 12
47047: PPUSH
47048: LD_INT 8
47050: PPUSH
47051: CALL_OW 380
// PlaceUnitAnyWhere ( CreateHuman , true ) ;
47055: CALL_OW 44
47059: PPUSH
47060: LD_INT 1
47062: PPUSH
47063: CALL_OW 51
// end ; 3 :
47067: GO 47204
47069: LD_INT 3
47071: DOUBLE
47072: EQUAL
47073: IFTRUE 47077
47075: GO 47129
47077: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_vehicle ] ) ;
47078: LD_ADDR_VAR 0 3
47082: PUSH
47083: LD_INT 21
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PPUSH
47093: CALL_OW 69
47097: ST_TO_ADDR
// if tmp then
47098: LD_VAR 0 3
47102: IFFALSE 47127
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
47104: LD_VAR 0 3
47108: PUSH
47109: LD_INT 1
47111: PPUSH
47112: LD_VAR 0 3
47116: PPUSH
47117: CALL_OW 12
47121: ARRAY
47122: PPUSH
47123: CALL_OW 65
// end ; 4 :
47127: GO 47204
47129: LD_INT 4
47131: DOUBLE
47132: EQUAL
47133: IFTRUE 47137
47135: GO 47192
47137: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_human ] ) ;
47138: LD_ADDR_VAR 0 3
47142: PUSH
47143: LD_INT 21
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PPUSH
47153: CALL_OW 69
47157: ST_TO_ADDR
// if tmp then
47158: LD_VAR 0 3
47162: IFFALSE 47190
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 190 ) ;
47164: LD_VAR 0 3
47168: PUSH
47169: LD_INT 1
47171: PPUSH
47172: LD_VAR 0 3
47176: PPUSH
47177: CALL_OW 12
47181: ARRAY
47182: PPUSH
47183: LD_INT 190
47185: PPUSH
47186: CALL_OW 234
// end ; 5 :
47190: GO 47204
47192: LD_INT 5
47194: DOUBLE
47195: EQUAL
47196: IFTRUE 47200
47198: GO 47203
47200: POP
// begin end ; end ;
47201: GO 47204
47203: POP
// end ;
47204: LD_VAR 0 1
47208: RET
// export function EcoEnableAllTechs ( ) ; var i ; begin
47209: LD_INT 0
47211: PPUSH
47212: PPUSH
// for i := 1 to 100 do
47213: LD_ADDR_VAR 0 2
47217: PUSH
47218: DOUBLE
47219: LD_INT 1
47221: DEC
47222: ST_TO_ADDR
47223: LD_INT 100
47225: PUSH
47226: FOR_TO
47227: IFFALSE 47248
// SetTech ( i , ecoSide , state_researched ) ;
47229: LD_VAR 0 2
47233: PPUSH
47234: LD_EXP 3
47238: PPUSH
47239: LD_INT 2
47241: PPUSH
47242: CALL_OW 322
47246: GO 47226
47248: POP
47249: POP
// end ;
47250: LD_VAR 0 1
47254: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
47255: LD_VAR 0 2
47259: PUSH
47260: LD_INT 102
47262: EQUAL
47263: IFFALSE 47455
// begin case p3 of 1 :
47265: LD_VAR 0 3
47269: PUSH
47270: LD_INT 1
47272: DOUBLE
47273: EQUAL
47274: IFTRUE 47278
47276: GO 47296
47278: POP
// ecoEventsAllow := Negate ( ecoEventsAllow ) ; 2 :
47279: LD_ADDR_EXP 11
47283: PUSH
47284: LD_EXP 11
47288: PPUSH
47289: CALL 40694 0 1
47293: ST_TO_ADDR
47294: GO 47453
47296: LD_INT 2
47298: DOUBLE
47299: EQUAL
47300: IFTRUE 47304
47302: GO 47322
47304: POP
// ecoAttacksAllow := Negate ( ecoAttacksAllow ) ; 3 :
47305: LD_ADDR_EXP 10
47309: PUSH
47310: LD_EXP 10
47314: PPUSH
47315: CALL 40694 0 1
47319: ST_TO_ADDR
47320: GO 47453
47322: LD_INT 3
47324: DOUBLE
47325: EQUAL
47326: IFTRUE 47330
47328: GO 47348
47330: POP
// ecoCratesDropAllow := Negate ( ecoCratesDropAllow ) ; 4 :
47331: LD_ADDR_EXP 9
47335: PUSH
47336: LD_EXP 9
47340: PPUSH
47341: CALL 40694 0 1
47345: ST_TO_ADDR
47346: GO 47453
47348: LD_INT 4
47350: DOUBLE
47351: EQUAL
47352: IFTRUE 47356
47354: GO 47363
47356: POP
// EcoEnableAllTechs ( ) ; 5 .. 8 :
47357: CALL 47209 0 0
47361: GO 47453
47363: LD_INT 5
47365: DOUBLE
47366: GREATEREQUAL
47367: IFFALSE 47375
47369: LD_INT 8
47371: DOUBLE
47372: LESSEQUAL
47373: IFTRUE 47377
47375: GO 47452
47377: POP
// begin uc_side := ecoSide ;
47378: LD_ADDR_OWVAR 20
47382: PUSH
47383: LD_EXP 3
47387: ST_TO_ADDR
// uc_nation := ecoNation ;
47388: LD_ADDR_OWVAR 21
47392: PUSH
47393: LD_EXP 4
47397: ST_TO_ADDR
// PrepareHuman ( false , p3 - 4 , 4 ) ;
47398: LD_INT 0
47400: PPUSH
47401: LD_VAR 0 3
47405: PUSH
47406: LD_INT 4
47408: MINUS
47409: PPUSH
47410: LD_INT 4
47412: PPUSH
47413: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , true ) ;
47417: CALL_OW 44
47421: PPUSH
47422: LD_EXP 6
47426: PUSH
47427: LD_INT 1
47429: ARRAY
47430: PPUSH
47431: LD_EXP 6
47435: PUSH
47436: LD_INT 2
47438: ARRAY
47439: PPUSH
47440: LD_INT 12
47442: PPUSH
47443: LD_INT 1
47445: PPUSH
47446: CALL_OW 50
// end ; end ;
47450: GO 47453
47452: POP
// end else
47453: GO 47489
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
47455: LD_VAR 0 1
47459: PPUSH
47460: LD_VAR 0 2
47464: PPUSH
47465: LD_VAR 0 3
47469: PPUSH
47470: LD_VAR 0 4
47474: PPUSH
47475: LD_VAR 0 5
47479: PPUSH
47480: LD_VAR 0 6
47484: PPUSH
47485: CALL 47704 0 6
// end ;
47489: PPOPN 6
47491: END
// on MapStart ( p ) do begin if gameType = 1 then
47492: LD_EXP 2
47496: PUSH
47497: LD_INT 1
47499: EQUAL
47500: IFFALSE 47511
// ToLua ( SKIRMISH_GAME_TYPE = 1 ) else
47502: LD_STRING SKIRMISH_GAME_TYPE = 1
47504: PPUSH
47505: CALL_OW 559
47509: GO 47518
// ToLua ( SKIRMISH_GAME_TYPE = 0 ) ;
47511: LD_STRING SKIRMISH_GAME_TYPE = 0
47513: PPUSH
47514: CALL_OW 559
// SOS_MapStart ( ) ;
47518: CALL 47584 0 0
// end ; end_of_file
47522: PPOPN 1
47524: END
// export globalGameSaveCounter ; every 0 0$1 do
47525: GO 47527
47527: DISABLE
// begin enable ;
47528: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
47529: LD_STRING updateTimer(
47531: PUSH
47532: LD_OWVAR 1
47536: STR
47537: PUSH
47538: LD_STRING );
47540: STR
47541: PPUSH
47542: CALL_OW 559
// end ;
47546: END
// every 0 0$1 do
47547: GO 47549
47549: DISABLE
// begin globalGameSaveCounter := 0 ;
47550: LD_ADDR_EXP 14
47554: PUSH
47555: LD_INT 0
47557: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
47558: LD_STRING setGameSaveCounter(0)
47560: PPUSH
47561: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
47565: LD_STRING initStreamRollete();
47567: PPUSH
47568: CALL_OW 559
// InitStreamMode ;
47572: CALL 48924 0 0
// DefineStreamItems ( false ) ;
47576: LD_INT 0
47578: PPUSH
47579: CALL 49388 0 1
// end ;
47583: END
// export function SOS_MapStart ( ) ; begin
47584: LD_INT 0
47586: PPUSH
// if streamModeActive then
47587: LD_EXP 15
47591: IFFALSE 47600
// DefineStreamItems ( true ) ;
47593: LD_INT 1
47595: PPUSH
47596: CALL 49388 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
47600: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
47602: PPUSH
47603: CALL_OW 559
// UpdateLuaVariables ( ) ;
47607: CALL 47624 0 0
// UpdateFactoryWaypoints ( ) ;
47611: CALL 62510 0 0
// UpdateWarehouseGatheringPoints ( ) ;
47615: CALL 62762 0 0
// end ;
47619: LD_VAR 0 1
47623: RET
// function UpdateLuaVariables ( ) ; begin
47624: LD_INT 0
47626: PPUSH
// if globalGameSaveCounter then
47627: LD_EXP 14
47631: IFFALSE 47665
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
47633: LD_ADDR_EXP 14
47637: PUSH
47638: LD_EXP 14
47642: PPUSH
47643: CALL 40713 0 1
47647: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
47648: LD_STRING setGameSaveCounter(
47650: PUSH
47651: LD_EXP 14
47655: STR
47656: PUSH
47657: LD_STRING )
47659: STR
47660: PPUSH
47661: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
47665: LD_STRING setGameDifficulty(
47667: PUSH
47668: LD_OWVAR 67
47672: STR
47673: PUSH
47674: LD_STRING )
47676: STR
47677: PPUSH
47678: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
47682: LD_STRING displayDifficulty(
47684: PUSH
47685: LD_OWVAR 67
47689: STR
47690: PUSH
47691: LD_STRING )
47693: STR
47694: PPUSH
47695: CALL_OW 559
// end ;
47699: LD_VAR 0 1
47703: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
47704: LD_INT 0
47706: PPUSH
// if p2 = stream_mode then
47707: LD_VAR 0 2
47711: PUSH
47712: LD_INT 100
47714: EQUAL
47715: IFFALSE 48718
// begin if not StreamModeActive then
47717: LD_EXP 15
47721: NOT
47722: IFFALSE 47732
// StreamModeActive := true ;
47724: LD_ADDR_EXP 15
47728: PUSH
47729: LD_INT 1
47731: ST_TO_ADDR
// if p3 = 0 then
47732: LD_VAR 0 3
47736: PUSH
47737: LD_INT 0
47739: EQUAL
47740: IFFALSE 47746
// InitStreamMode ;
47742: CALL 48924 0 0
// if p3 = 1 then
47746: LD_VAR 0 3
47750: PUSH
47751: LD_INT 1
47753: EQUAL
47754: IFFALSE 47764
// sRocket := true ;
47756: LD_ADDR_EXP 20
47760: PUSH
47761: LD_INT 1
47763: ST_TO_ADDR
// if p3 = 2 then
47764: LD_VAR 0 3
47768: PUSH
47769: LD_INT 2
47771: EQUAL
47772: IFFALSE 47782
// sSpeed := true ;
47774: LD_ADDR_EXP 19
47778: PUSH
47779: LD_INT 1
47781: ST_TO_ADDR
// if p3 = 3 then
47782: LD_VAR 0 3
47786: PUSH
47787: LD_INT 3
47789: EQUAL
47790: IFFALSE 47800
// sEngine := true ;
47792: LD_ADDR_EXP 21
47796: PUSH
47797: LD_INT 1
47799: ST_TO_ADDR
// if p3 = 4 then
47800: LD_VAR 0 3
47804: PUSH
47805: LD_INT 4
47807: EQUAL
47808: IFFALSE 47818
// sSpec := true ;
47810: LD_ADDR_EXP 18
47814: PUSH
47815: LD_INT 1
47817: ST_TO_ADDR
// if p3 = 5 then
47818: LD_VAR 0 3
47822: PUSH
47823: LD_INT 5
47825: EQUAL
47826: IFFALSE 47836
// sLevel := true ;
47828: LD_ADDR_EXP 22
47832: PUSH
47833: LD_INT 1
47835: ST_TO_ADDR
// if p3 = 6 then
47836: LD_VAR 0 3
47840: PUSH
47841: LD_INT 6
47843: EQUAL
47844: IFFALSE 47854
// sArmoury := true ;
47846: LD_ADDR_EXP 23
47850: PUSH
47851: LD_INT 1
47853: ST_TO_ADDR
// if p3 = 7 then
47854: LD_VAR 0 3
47858: PUSH
47859: LD_INT 7
47861: EQUAL
47862: IFFALSE 47872
// sRadar := true ;
47864: LD_ADDR_EXP 24
47868: PUSH
47869: LD_INT 1
47871: ST_TO_ADDR
// if p3 = 8 then
47872: LD_VAR 0 3
47876: PUSH
47877: LD_INT 8
47879: EQUAL
47880: IFFALSE 47890
// sBunker := true ;
47882: LD_ADDR_EXP 25
47886: PUSH
47887: LD_INT 1
47889: ST_TO_ADDR
// if p3 = 9 then
47890: LD_VAR 0 3
47894: PUSH
47895: LD_INT 9
47897: EQUAL
47898: IFFALSE 47908
// sHack := true ;
47900: LD_ADDR_EXP 26
47904: PUSH
47905: LD_INT 1
47907: ST_TO_ADDR
// if p3 = 10 then
47908: LD_VAR 0 3
47912: PUSH
47913: LD_INT 10
47915: EQUAL
47916: IFFALSE 47926
// sFire := true ;
47918: LD_ADDR_EXP 27
47922: PUSH
47923: LD_INT 1
47925: ST_TO_ADDR
// if p3 = 11 then
47926: LD_VAR 0 3
47930: PUSH
47931: LD_INT 11
47933: EQUAL
47934: IFFALSE 47944
// sRefresh := true ;
47936: LD_ADDR_EXP 28
47940: PUSH
47941: LD_INT 1
47943: ST_TO_ADDR
// if p3 = 12 then
47944: LD_VAR 0 3
47948: PUSH
47949: LD_INT 12
47951: EQUAL
47952: IFFALSE 47962
// sExp := true ;
47954: LD_ADDR_EXP 29
47958: PUSH
47959: LD_INT 1
47961: ST_TO_ADDR
// if p3 = 13 then
47962: LD_VAR 0 3
47966: PUSH
47967: LD_INT 13
47969: EQUAL
47970: IFFALSE 47980
// sDepot := true ;
47972: LD_ADDR_EXP 30
47976: PUSH
47977: LD_INT 1
47979: ST_TO_ADDR
// if p3 = 14 then
47980: LD_VAR 0 3
47984: PUSH
47985: LD_INT 14
47987: EQUAL
47988: IFFALSE 47998
// sFlag := true ;
47990: LD_ADDR_EXP 31
47994: PUSH
47995: LD_INT 1
47997: ST_TO_ADDR
// if p3 = 15 then
47998: LD_VAR 0 3
48002: PUSH
48003: LD_INT 15
48005: EQUAL
48006: IFFALSE 48016
// sKamikadze := true ;
48008: LD_ADDR_EXP 39
48012: PUSH
48013: LD_INT 1
48015: ST_TO_ADDR
// if p3 = 16 then
48016: LD_VAR 0 3
48020: PUSH
48021: LD_INT 16
48023: EQUAL
48024: IFFALSE 48034
// sTroll := true ;
48026: LD_ADDR_EXP 40
48030: PUSH
48031: LD_INT 1
48033: ST_TO_ADDR
// if p3 = 17 then
48034: LD_VAR 0 3
48038: PUSH
48039: LD_INT 17
48041: EQUAL
48042: IFFALSE 48052
// sSlow := true ;
48044: LD_ADDR_EXP 41
48048: PUSH
48049: LD_INT 1
48051: ST_TO_ADDR
// if p3 = 18 then
48052: LD_VAR 0 3
48056: PUSH
48057: LD_INT 18
48059: EQUAL
48060: IFFALSE 48070
// sLack := true ;
48062: LD_ADDR_EXP 42
48066: PUSH
48067: LD_INT 1
48069: ST_TO_ADDR
// if p3 = 19 then
48070: LD_VAR 0 3
48074: PUSH
48075: LD_INT 19
48077: EQUAL
48078: IFFALSE 48088
// sTank := true ;
48080: LD_ADDR_EXP 44
48084: PUSH
48085: LD_INT 1
48087: ST_TO_ADDR
// if p3 = 20 then
48088: LD_VAR 0 3
48092: PUSH
48093: LD_INT 20
48095: EQUAL
48096: IFFALSE 48106
// sRemote := true ;
48098: LD_ADDR_EXP 45
48102: PUSH
48103: LD_INT 1
48105: ST_TO_ADDR
// if p3 = 21 then
48106: LD_VAR 0 3
48110: PUSH
48111: LD_INT 21
48113: EQUAL
48114: IFFALSE 48124
// sPowell := true ;
48116: LD_ADDR_EXP 46
48120: PUSH
48121: LD_INT 1
48123: ST_TO_ADDR
// if p3 = 22 then
48124: LD_VAR 0 3
48128: PUSH
48129: LD_INT 22
48131: EQUAL
48132: IFFALSE 48142
// sTeleport := true ;
48134: LD_ADDR_EXP 49
48138: PUSH
48139: LD_INT 1
48141: ST_TO_ADDR
// if p3 = 23 then
48142: LD_VAR 0 3
48146: PUSH
48147: LD_INT 23
48149: EQUAL
48150: IFFALSE 48160
// sOilTower := true ;
48152: LD_ADDR_EXP 51
48156: PUSH
48157: LD_INT 1
48159: ST_TO_ADDR
// if p3 = 24 then
48160: LD_VAR 0 3
48164: PUSH
48165: LD_INT 24
48167: EQUAL
48168: IFFALSE 48178
// sShovel := true ;
48170: LD_ADDR_EXP 52
48174: PUSH
48175: LD_INT 1
48177: ST_TO_ADDR
// if p3 = 25 then
48178: LD_VAR 0 3
48182: PUSH
48183: LD_INT 25
48185: EQUAL
48186: IFFALSE 48196
// sSheik := true ;
48188: LD_ADDR_EXP 53
48192: PUSH
48193: LD_INT 1
48195: ST_TO_ADDR
// if p3 = 26 then
48196: LD_VAR 0 3
48200: PUSH
48201: LD_INT 26
48203: EQUAL
48204: IFFALSE 48214
// sEarthquake := true ;
48206: LD_ADDR_EXP 55
48210: PUSH
48211: LD_INT 1
48213: ST_TO_ADDR
// if p3 = 27 then
48214: LD_VAR 0 3
48218: PUSH
48219: LD_INT 27
48221: EQUAL
48222: IFFALSE 48232
// sAI := true ;
48224: LD_ADDR_EXP 56
48228: PUSH
48229: LD_INT 1
48231: ST_TO_ADDR
// if p3 = 28 then
48232: LD_VAR 0 3
48236: PUSH
48237: LD_INT 28
48239: EQUAL
48240: IFFALSE 48250
// sCargo := true ;
48242: LD_ADDR_EXP 59
48246: PUSH
48247: LD_INT 1
48249: ST_TO_ADDR
// if p3 = 29 then
48250: LD_VAR 0 3
48254: PUSH
48255: LD_INT 29
48257: EQUAL
48258: IFFALSE 48268
// sDLaser := true ;
48260: LD_ADDR_EXP 60
48264: PUSH
48265: LD_INT 1
48267: ST_TO_ADDR
// if p3 = 30 then
48268: LD_VAR 0 3
48272: PUSH
48273: LD_INT 30
48275: EQUAL
48276: IFFALSE 48286
// sExchange := true ;
48278: LD_ADDR_EXP 61
48282: PUSH
48283: LD_INT 1
48285: ST_TO_ADDR
// if p3 = 31 then
48286: LD_VAR 0 3
48290: PUSH
48291: LD_INT 31
48293: EQUAL
48294: IFFALSE 48304
// sFac := true ;
48296: LD_ADDR_EXP 62
48300: PUSH
48301: LD_INT 1
48303: ST_TO_ADDR
// if p3 = 32 then
48304: LD_VAR 0 3
48308: PUSH
48309: LD_INT 32
48311: EQUAL
48312: IFFALSE 48322
// sPower := true ;
48314: LD_ADDR_EXP 63
48318: PUSH
48319: LD_INT 1
48321: ST_TO_ADDR
// if p3 = 33 then
48322: LD_VAR 0 3
48326: PUSH
48327: LD_INT 33
48329: EQUAL
48330: IFFALSE 48340
// sRandom := true ;
48332: LD_ADDR_EXP 64
48336: PUSH
48337: LD_INT 1
48339: ST_TO_ADDR
// if p3 = 34 then
48340: LD_VAR 0 3
48344: PUSH
48345: LD_INT 34
48347: EQUAL
48348: IFFALSE 48358
// sShield := true ;
48350: LD_ADDR_EXP 65
48354: PUSH
48355: LD_INT 1
48357: ST_TO_ADDR
// if p3 = 35 then
48358: LD_VAR 0 3
48362: PUSH
48363: LD_INT 35
48365: EQUAL
48366: IFFALSE 48376
// sTime := true ;
48368: LD_ADDR_EXP 66
48372: PUSH
48373: LD_INT 1
48375: ST_TO_ADDR
// if p3 = 36 then
48376: LD_VAR 0 3
48380: PUSH
48381: LD_INT 36
48383: EQUAL
48384: IFFALSE 48394
// sTools := true ;
48386: LD_ADDR_EXP 67
48390: PUSH
48391: LD_INT 1
48393: ST_TO_ADDR
// if p3 = 101 then
48394: LD_VAR 0 3
48398: PUSH
48399: LD_INT 101
48401: EQUAL
48402: IFFALSE 48412
// sSold := true ;
48404: LD_ADDR_EXP 32
48408: PUSH
48409: LD_INT 1
48411: ST_TO_ADDR
// if p3 = 102 then
48412: LD_VAR 0 3
48416: PUSH
48417: LD_INT 102
48419: EQUAL
48420: IFFALSE 48430
// sDiff := true ;
48422: LD_ADDR_EXP 33
48426: PUSH
48427: LD_INT 1
48429: ST_TO_ADDR
// if p3 = 103 then
48430: LD_VAR 0 3
48434: PUSH
48435: LD_INT 103
48437: EQUAL
48438: IFFALSE 48448
// sFog := true ;
48440: LD_ADDR_EXP 36
48444: PUSH
48445: LD_INT 1
48447: ST_TO_ADDR
// if p3 = 104 then
48448: LD_VAR 0 3
48452: PUSH
48453: LD_INT 104
48455: EQUAL
48456: IFFALSE 48466
// sReset := true ;
48458: LD_ADDR_EXP 37
48462: PUSH
48463: LD_INT 1
48465: ST_TO_ADDR
// if p3 = 105 then
48466: LD_VAR 0 3
48470: PUSH
48471: LD_INT 105
48473: EQUAL
48474: IFFALSE 48484
// sSun := true ;
48476: LD_ADDR_EXP 38
48480: PUSH
48481: LD_INT 1
48483: ST_TO_ADDR
// if p3 = 106 then
48484: LD_VAR 0 3
48488: PUSH
48489: LD_INT 106
48491: EQUAL
48492: IFFALSE 48502
// sTiger := true ;
48494: LD_ADDR_EXP 34
48498: PUSH
48499: LD_INT 1
48501: ST_TO_ADDR
// if p3 = 107 then
48502: LD_VAR 0 3
48506: PUSH
48507: LD_INT 107
48509: EQUAL
48510: IFFALSE 48520
// sBomb := true ;
48512: LD_ADDR_EXP 35
48516: PUSH
48517: LD_INT 1
48519: ST_TO_ADDR
// if p3 = 108 then
48520: LD_VAR 0 3
48524: PUSH
48525: LD_INT 108
48527: EQUAL
48528: IFFALSE 48538
// sWound := true ;
48530: LD_ADDR_EXP 43
48534: PUSH
48535: LD_INT 1
48537: ST_TO_ADDR
// if p3 = 109 then
48538: LD_VAR 0 3
48542: PUSH
48543: LD_INT 109
48545: EQUAL
48546: IFFALSE 48556
// sBetray := true ;
48548: LD_ADDR_EXP 47
48552: PUSH
48553: LD_INT 1
48555: ST_TO_ADDR
// if p3 = 110 then
48556: LD_VAR 0 3
48560: PUSH
48561: LD_INT 110
48563: EQUAL
48564: IFFALSE 48574
// sContamin := true ;
48566: LD_ADDR_EXP 48
48570: PUSH
48571: LD_INT 1
48573: ST_TO_ADDR
// if p3 = 111 then
48574: LD_VAR 0 3
48578: PUSH
48579: LD_INT 111
48581: EQUAL
48582: IFFALSE 48592
// sOil := true ;
48584: LD_ADDR_EXP 50
48588: PUSH
48589: LD_INT 1
48591: ST_TO_ADDR
// if p3 = 112 then
48592: LD_VAR 0 3
48596: PUSH
48597: LD_INT 112
48599: EQUAL
48600: IFFALSE 48610
// sStu := true ;
48602: LD_ADDR_EXP 54
48606: PUSH
48607: LD_INT 1
48609: ST_TO_ADDR
// if p3 = 113 then
48610: LD_VAR 0 3
48614: PUSH
48615: LD_INT 113
48617: EQUAL
48618: IFFALSE 48628
// sBazooka := true ;
48620: LD_ADDR_EXP 57
48624: PUSH
48625: LD_INT 1
48627: ST_TO_ADDR
// if p3 = 114 then
48628: LD_VAR 0 3
48632: PUSH
48633: LD_INT 114
48635: EQUAL
48636: IFFALSE 48646
// sMortar := true ;
48638: LD_ADDR_EXP 58
48642: PUSH
48643: LD_INT 1
48645: ST_TO_ADDR
// if p3 = 115 then
48646: LD_VAR 0 3
48650: PUSH
48651: LD_INT 115
48653: EQUAL
48654: IFFALSE 48664
// sRanger := true ;
48656: LD_ADDR_EXP 68
48660: PUSH
48661: LD_INT 1
48663: ST_TO_ADDR
// if p3 = 116 then
48664: LD_VAR 0 3
48668: PUSH
48669: LD_INT 116
48671: EQUAL
48672: IFFALSE 48682
// sComputer := true ;
48674: LD_ADDR_EXP 69
48678: PUSH
48679: LD_INT 1
48681: ST_TO_ADDR
// if p3 = 117 then
48682: LD_VAR 0 3
48686: PUSH
48687: LD_INT 117
48689: EQUAL
48690: IFFALSE 48700
// s30 := true ;
48692: LD_ADDR_EXP 70
48696: PUSH
48697: LD_INT 1
48699: ST_TO_ADDR
// if p3 = 118 then
48700: LD_VAR 0 3
48704: PUSH
48705: LD_INT 118
48707: EQUAL
48708: IFFALSE 48718
// s60 := true ;
48710: LD_ADDR_EXP 71
48714: PUSH
48715: LD_INT 1
48717: ST_TO_ADDR
// end ; if p2 = hack_mode then
48718: LD_VAR 0 2
48722: PUSH
48723: LD_INT 101
48725: EQUAL
48726: IFFALSE 48854
// begin case p3 of 1 :
48728: LD_VAR 0 3
48732: PUSH
48733: LD_INT 1
48735: DOUBLE
48736: EQUAL
48737: IFTRUE 48741
48739: GO 48748
48741: POP
// hHackUnlimitedResources ; 2 :
48742: CALL 61117 0 0
48746: GO 48854
48748: LD_INT 2
48750: DOUBLE
48751: EQUAL
48752: IFTRUE 48756
48754: GO 48763
48756: POP
// hHackSetLevel10 ; 3 :
48757: CALL 61250 0 0
48761: GO 48854
48763: LD_INT 3
48765: DOUBLE
48766: EQUAL
48767: IFTRUE 48771
48769: GO 48778
48771: POP
// hHackSetLevel10YourUnits ; 4 :
48772: CALL 61335 0 0
48776: GO 48854
48778: LD_INT 4
48780: DOUBLE
48781: EQUAL
48782: IFTRUE 48786
48784: GO 48793
48786: POP
// hHackInvincible ; 5 :
48787: CALL 61783 0 0
48791: GO 48854
48793: LD_INT 5
48795: DOUBLE
48796: EQUAL
48797: IFTRUE 48801
48799: GO 48808
48801: POP
// hHackInvisible ; 6 :
48802: CALL 61894 0 0
48806: GO 48854
48808: LD_INT 6
48810: DOUBLE
48811: EQUAL
48812: IFTRUE 48816
48814: GO 48823
48816: POP
// hHackChangeYourSide ; 7 :
48817: CALL 61951 0 0
48821: GO 48854
48823: LD_INT 7
48825: DOUBLE
48826: EQUAL
48827: IFTRUE 48831
48829: GO 48838
48831: POP
// hHackChangeUnitSide ; 8 :
48832: CALL 61993 0 0
48836: GO 48854
48838: LD_INT 8
48840: DOUBLE
48841: EQUAL
48842: IFTRUE 48846
48844: GO 48853
48846: POP
// hHackFog ; end ;
48847: CALL 62094 0 0
48851: GO 48854
48853: POP
// end ; if p2 = game_save_mode then
48854: LD_VAR 0 2
48858: PUSH
48859: LD_INT 102
48861: EQUAL
48862: IFFALSE 48919
// begin if p3 = 1 then
48864: LD_VAR 0 3
48868: PUSH
48869: LD_INT 1
48871: EQUAL
48872: IFFALSE 48884
// globalGameSaveCounter := p4 ;
48874: LD_ADDR_EXP 14
48878: PUSH
48879: LD_VAR 0 4
48883: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
48884: LD_VAR 0 3
48888: PUSH
48889: LD_INT 2
48891: EQUAL
48892: IFFALSE 48900
48894: PUSH
48895: LD_EXP 14
48899: AND
48900: IFFALSE 48919
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
48902: LD_STRING setGameSaveCounter(
48904: PUSH
48905: LD_EXP 14
48909: STR
48910: PUSH
48911: LD_STRING )
48913: STR
48914: PPUSH
48915: CALL_OW 559
// end ; end ;
48919: LD_VAR 0 7
48923: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
48924: LD_INT 0
48926: PPUSH
// streamModeActive := false ;
48927: LD_ADDR_EXP 15
48931: PUSH
48932: LD_INT 0
48934: ST_TO_ADDR
// normalCounter := 36 ;
48935: LD_ADDR_EXP 16
48939: PUSH
48940: LD_INT 36
48942: ST_TO_ADDR
// hardcoreCounter := 18 ;
48943: LD_ADDR_EXP 17
48947: PUSH
48948: LD_INT 18
48950: ST_TO_ADDR
// sRocket := false ;
48951: LD_ADDR_EXP 20
48955: PUSH
48956: LD_INT 0
48958: ST_TO_ADDR
// sSpeed := false ;
48959: LD_ADDR_EXP 19
48963: PUSH
48964: LD_INT 0
48966: ST_TO_ADDR
// sEngine := false ;
48967: LD_ADDR_EXP 21
48971: PUSH
48972: LD_INT 0
48974: ST_TO_ADDR
// sSpec := false ;
48975: LD_ADDR_EXP 18
48979: PUSH
48980: LD_INT 0
48982: ST_TO_ADDR
// sLevel := false ;
48983: LD_ADDR_EXP 22
48987: PUSH
48988: LD_INT 0
48990: ST_TO_ADDR
// sArmoury := false ;
48991: LD_ADDR_EXP 23
48995: PUSH
48996: LD_INT 0
48998: ST_TO_ADDR
// sRadar := false ;
48999: LD_ADDR_EXP 24
49003: PUSH
49004: LD_INT 0
49006: ST_TO_ADDR
// sBunker := false ;
49007: LD_ADDR_EXP 25
49011: PUSH
49012: LD_INT 0
49014: ST_TO_ADDR
// sHack := false ;
49015: LD_ADDR_EXP 26
49019: PUSH
49020: LD_INT 0
49022: ST_TO_ADDR
// sFire := false ;
49023: LD_ADDR_EXP 27
49027: PUSH
49028: LD_INT 0
49030: ST_TO_ADDR
// sRefresh := false ;
49031: LD_ADDR_EXP 28
49035: PUSH
49036: LD_INT 0
49038: ST_TO_ADDR
// sExp := false ;
49039: LD_ADDR_EXP 29
49043: PUSH
49044: LD_INT 0
49046: ST_TO_ADDR
// sDepot := false ;
49047: LD_ADDR_EXP 30
49051: PUSH
49052: LD_INT 0
49054: ST_TO_ADDR
// sFlag := false ;
49055: LD_ADDR_EXP 31
49059: PUSH
49060: LD_INT 0
49062: ST_TO_ADDR
// sKamikadze := false ;
49063: LD_ADDR_EXP 39
49067: PUSH
49068: LD_INT 0
49070: ST_TO_ADDR
// sTroll := false ;
49071: LD_ADDR_EXP 40
49075: PUSH
49076: LD_INT 0
49078: ST_TO_ADDR
// sSlow := false ;
49079: LD_ADDR_EXP 41
49083: PUSH
49084: LD_INT 0
49086: ST_TO_ADDR
// sLack := false ;
49087: LD_ADDR_EXP 42
49091: PUSH
49092: LD_INT 0
49094: ST_TO_ADDR
// sTank := false ;
49095: LD_ADDR_EXP 44
49099: PUSH
49100: LD_INT 0
49102: ST_TO_ADDR
// sRemote := false ;
49103: LD_ADDR_EXP 45
49107: PUSH
49108: LD_INT 0
49110: ST_TO_ADDR
// sPowell := false ;
49111: LD_ADDR_EXP 46
49115: PUSH
49116: LD_INT 0
49118: ST_TO_ADDR
// sTeleport := false ;
49119: LD_ADDR_EXP 49
49123: PUSH
49124: LD_INT 0
49126: ST_TO_ADDR
// sOilTower := false ;
49127: LD_ADDR_EXP 51
49131: PUSH
49132: LD_INT 0
49134: ST_TO_ADDR
// sShovel := false ;
49135: LD_ADDR_EXP 52
49139: PUSH
49140: LD_INT 0
49142: ST_TO_ADDR
// sSheik := false ;
49143: LD_ADDR_EXP 53
49147: PUSH
49148: LD_INT 0
49150: ST_TO_ADDR
// sEarthquake := false ;
49151: LD_ADDR_EXP 55
49155: PUSH
49156: LD_INT 0
49158: ST_TO_ADDR
// sAI := false ;
49159: LD_ADDR_EXP 56
49163: PUSH
49164: LD_INT 0
49166: ST_TO_ADDR
// sCargo := false ;
49167: LD_ADDR_EXP 59
49171: PUSH
49172: LD_INT 0
49174: ST_TO_ADDR
// sDLaser := false ;
49175: LD_ADDR_EXP 60
49179: PUSH
49180: LD_INT 0
49182: ST_TO_ADDR
// sExchange := false ;
49183: LD_ADDR_EXP 61
49187: PUSH
49188: LD_INT 0
49190: ST_TO_ADDR
// sFac := false ;
49191: LD_ADDR_EXP 62
49195: PUSH
49196: LD_INT 0
49198: ST_TO_ADDR
// sPower := false ;
49199: LD_ADDR_EXP 63
49203: PUSH
49204: LD_INT 0
49206: ST_TO_ADDR
// sRandom := false ;
49207: LD_ADDR_EXP 64
49211: PUSH
49212: LD_INT 0
49214: ST_TO_ADDR
// sShield := false ;
49215: LD_ADDR_EXP 65
49219: PUSH
49220: LD_INT 0
49222: ST_TO_ADDR
// sTime := false ;
49223: LD_ADDR_EXP 66
49227: PUSH
49228: LD_INT 0
49230: ST_TO_ADDR
// sTools := false ;
49231: LD_ADDR_EXP 67
49235: PUSH
49236: LD_INT 0
49238: ST_TO_ADDR
// sSold := false ;
49239: LD_ADDR_EXP 32
49243: PUSH
49244: LD_INT 0
49246: ST_TO_ADDR
// sDiff := false ;
49247: LD_ADDR_EXP 33
49251: PUSH
49252: LD_INT 0
49254: ST_TO_ADDR
// sFog := false ;
49255: LD_ADDR_EXP 36
49259: PUSH
49260: LD_INT 0
49262: ST_TO_ADDR
// sReset := false ;
49263: LD_ADDR_EXP 37
49267: PUSH
49268: LD_INT 0
49270: ST_TO_ADDR
// sSun := false ;
49271: LD_ADDR_EXP 38
49275: PUSH
49276: LD_INT 0
49278: ST_TO_ADDR
// sTiger := false ;
49279: LD_ADDR_EXP 34
49283: PUSH
49284: LD_INT 0
49286: ST_TO_ADDR
// sBomb := false ;
49287: LD_ADDR_EXP 35
49291: PUSH
49292: LD_INT 0
49294: ST_TO_ADDR
// sWound := false ;
49295: LD_ADDR_EXP 43
49299: PUSH
49300: LD_INT 0
49302: ST_TO_ADDR
// sBetray := false ;
49303: LD_ADDR_EXP 47
49307: PUSH
49308: LD_INT 0
49310: ST_TO_ADDR
// sContamin := false ;
49311: LD_ADDR_EXP 48
49315: PUSH
49316: LD_INT 0
49318: ST_TO_ADDR
// sOil := false ;
49319: LD_ADDR_EXP 50
49323: PUSH
49324: LD_INT 0
49326: ST_TO_ADDR
// sStu := false ;
49327: LD_ADDR_EXP 54
49331: PUSH
49332: LD_INT 0
49334: ST_TO_ADDR
// sBazooka := false ;
49335: LD_ADDR_EXP 57
49339: PUSH
49340: LD_INT 0
49342: ST_TO_ADDR
// sMortar := false ;
49343: LD_ADDR_EXP 58
49347: PUSH
49348: LD_INT 0
49350: ST_TO_ADDR
// sRanger := false ;
49351: LD_ADDR_EXP 68
49355: PUSH
49356: LD_INT 0
49358: ST_TO_ADDR
// sComputer := false ;
49359: LD_ADDR_EXP 69
49363: PUSH
49364: LD_INT 0
49366: ST_TO_ADDR
// s30 := false ;
49367: LD_ADDR_EXP 70
49371: PUSH
49372: LD_INT 0
49374: ST_TO_ADDR
// s60 := false ;
49375: LD_ADDR_EXP 71
49379: PUSH
49380: LD_INT 0
49382: ST_TO_ADDR
// end ;
49383: LD_VAR 0 1
49387: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
49388: LD_INT 0
49390: PPUSH
49391: PPUSH
49392: PPUSH
49393: PPUSH
49394: PPUSH
49395: PPUSH
49396: PPUSH
// result := [ ] ;
49397: LD_ADDR_VAR 0 2
49401: PUSH
49402: EMPTY
49403: ST_TO_ADDR
// if campaign_id = 1 then
49404: LD_OWVAR 69
49408: PUSH
49409: LD_INT 1
49411: EQUAL
49412: IFFALSE 52578
// begin case mission_number of 1 :
49414: LD_OWVAR 70
49418: PUSH
49419: LD_INT 1
49421: DOUBLE
49422: EQUAL
49423: IFTRUE 49427
49425: GO 49503
49427: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
49428: LD_ADDR_VAR 0 2
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: LD_INT 4
49438: PUSH
49439: LD_INT 11
49441: PUSH
49442: LD_INT 12
49444: PUSH
49445: LD_INT 15
49447: PUSH
49448: LD_INT 16
49450: PUSH
49451: LD_INT 22
49453: PUSH
49454: LD_INT 23
49456: PUSH
49457: LD_INT 26
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 101
49473: PUSH
49474: LD_INT 102
49476: PUSH
49477: LD_INT 106
49479: PUSH
49480: LD_INT 116
49482: PUSH
49483: LD_INT 117
49485: PUSH
49486: LD_INT 118
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: ST_TO_ADDR
49501: GO 52576
49503: LD_INT 2
49505: DOUBLE
49506: EQUAL
49507: IFTRUE 49511
49509: GO 49595
49511: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
49512: LD_ADDR_VAR 0 2
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: LD_INT 4
49522: PUSH
49523: LD_INT 11
49525: PUSH
49526: LD_INT 12
49528: PUSH
49529: LD_INT 15
49531: PUSH
49532: LD_INT 16
49534: PUSH
49535: LD_INT 22
49537: PUSH
49538: LD_INT 23
49540: PUSH
49541: LD_INT 26
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 101
49557: PUSH
49558: LD_INT 102
49560: PUSH
49561: LD_INT 105
49563: PUSH
49564: LD_INT 106
49566: PUSH
49567: LD_INT 108
49569: PUSH
49570: LD_INT 116
49572: PUSH
49573: LD_INT 117
49575: PUSH
49576: LD_INT 118
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: ST_TO_ADDR
49593: GO 52576
49595: LD_INT 3
49597: DOUBLE
49598: EQUAL
49599: IFTRUE 49603
49601: GO 49691
49603: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
49604: LD_ADDR_VAR 0 2
49608: PUSH
49609: LD_INT 2
49611: PUSH
49612: LD_INT 4
49614: PUSH
49615: LD_INT 5
49617: PUSH
49618: LD_INT 11
49620: PUSH
49621: LD_INT 12
49623: PUSH
49624: LD_INT 15
49626: PUSH
49627: LD_INT 16
49629: PUSH
49630: LD_INT 22
49632: PUSH
49633: LD_INT 26
49635: PUSH
49636: LD_INT 36
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 101
49653: PUSH
49654: LD_INT 102
49656: PUSH
49657: LD_INT 105
49659: PUSH
49660: LD_INT 106
49662: PUSH
49663: LD_INT 108
49665: PUSH
49666: LD_INT 116
49668: PUSH
49669: LD_INT 117
49671: PUSH
49672: LD_INT 118
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: ST_TO_ADDR
49689: GO 52576
49691: LD_INT 4
49693: DOUBLE
49694: EQUAL
49695: IFTRUE 49699
49697: GO 49795
49699: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
49700: LD_ADDR_VAR 0 2
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: LD_INT 4
49710: PUSH
49711: LD_INT 5
49713: PUSH
49714: LD_INT 8
49716: PUSH
49717: LD_INT 11
49719: PUSH
49720: LD_INT 12
49722: PUSH
49723: LD_INT 15
49725: PUSH
49726: LD_INT 16
49728: PUSH
49729: LD_INT 22
49731: PUSH
49732: LD_INT 23
49734: PUSH
49735: LD_INT 26
49737: PUSH
49738: LD_INT 36
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 101
49757: PUSH
49758: LD_INT 102
49760: PUSH
49761: LD_INT 105
49763: PUSH
49764: LD_INT 106
49766: PUSH
49767: LD_INT 108
49769: PUSH
49770: LD_INT 116
49772: PUSH
49773: LD_INT 117
49775: PUSH
49776: LD_INT 118
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: ST_TO_ADDR
49793: GO 52576
49795: LD_INT 5
49797: DOUBLE
49798: EQUAL
49799: IFTRUE 49803
49801: GO 49915
49803: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
49804: LD_ADDR_VAR 0 2
49808: PUSH
49809: LD_INT 2
49811: PUSH
49812: LD_INT 4
49814: PUSH
49815: LD_INT 5
49817: PUSH
49818: LD_INT 6
49820: PUSH
49821: LD_INT 8
49823: PUSH
49824: LD_INT 11
49826: PUSH
49827: LD_INT 12
49829: PUSH
49830: LD_INT 15
49832: PUSH
49833: LD_INT 16
49835: PUSH
49836: LD_INT 22
49838: PUSH
49839: LD_INT 23
49841: PUSH
49842: LD_INT 25
49844: PUSH
49845: LD_INT 26
49847: PUSH
49848: LD_INT 36
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 101
49869: PUSH
49870: LD_INT 102
49872: PUSH
49873: LD_INT 105
49875: PUSH
49876: LD_INT 106
49878: PUSH
49879: LD_INT 108
49881: PUSH
49882: LD_INT 109
49884: PUSH
49885: LD_INT 112
49887: PUSH
49888: LD_INT 116
49890: PUSH
49891: LD_INT 117
49893: PUSH
49894: LD_INT 118
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: ST_TO_ADDR
49913: GO 52576
49915: LD_INT 6
49917: DOUBLE
49918: EQUAL
49919: IFTRUE 49923
49921: GO 50055
49923: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
49924: LD_ADDR_VAR 0 2
49928: PUSH
49929: LD_INT 2
49931: PUSH
49932: LD_INT 4
49934: PUSH
49935: LD_INT 5
49937: PUSH
49938: LD_INT 6
49940: PUSH
49941: LD_INT 8
49943: PUSH
49944: LD_INT 11
49946: PUSH
49947: LD_INT 12
49949: PUSH
49950: LD_INT 15
49952: PUSH
49953: LD_INT 16
49955: PUSH
49956: LD_INT 20
49958: PUSH
49959: LD_INT 21
49961: PUSH
49962: LD_INT 22
49964: PUSH
49965: LD_INT 23
49967: PUSH
49968: LD_INT 25
49970: PUSH
49971: LD_INT 26
49973: PUSH
49974: LD_INT 30
49976: PUSH
49977: LD_INT 31
49979: PUSH
49980: LD_INT 32
49982: PUSH
49983: LD_INT 36
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 101
50009: PUSH
50010: LD_INT 102
50012: PUSH
50013: LD_INT 105
50015: PUSH
50016: LD_INT 106
50018: PUSH
50019: LD_INT 108
50021: PUSH
50022: LD_INT 109
50024: PUSH
50025: LD_INT 112
50027: PUSH
50028: LD_INT 116
50030: PUSH
50031: LD_INT 117
50033: PUSH
50034: LD_INT 118
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: ST_TO_ADDR
50053: GO 52576
50055: LD_INT 7
50057: DOUBLE
50058: EQUAL
50059: IFTRUE 50063
50061: GO 50175
50063: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50064: LD_ADDR_VAR 0 2
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: LD_INT 4
50074: PUSH
50075: LD_INT 5
50077: PUSH
50078: LD_INT 7
50080: PUSH
50081: LD_INT 11
50083: PUSH
50084: LD_INT 12
50086: PUSH
50087: LD_INT 15
50089: PUSH
50090: LD_INT 16
50092: PUSH
50093: LD_INT 20
50095: PUSH
50096: LD_INT 21
50098: PUSH
50099: LD_INT 22
50101: PUSH
50102: LD_INT 23
50104: PUSH
50105: LD_INT 25
50107: PUSH
50108: LD_INT 26
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 101
50129: PUSH
50130: LD_INT 102
50132: PUSH
50133: LD_INT 103
50135: PUSH
50136: LD_INT 105
50138: PUSH
50139: LD_INT 106
50141: PUSH
50142: LD_INT 108
50144: PUSH
50145: LD_INT 112
50147: PUSH
50148: LD_INT 116
50150: PUSH
50151: LD_INT 117
50153: PUSH
50154: LD_INT 118
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: ST_TO_ADDR
50173: GO 52576
50175: LD_INT 8
50177: DOUBLE
50178: EQUAL
50179: IFTRUE 50183
50181: GO 50323
50183: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
50184: LD_ADDR_VAR 0 2
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: LD_INT 4
50194: PUSH
50195: LD_INT 5
50197: PUSH
50198: LD_INT 6
50200: PUSH
50201: LD_INT 7
50203: PUSH
50204: LD_INT 8
50206: PUSH
50207: LD_INT 11
50209: PUSH
50210: LD_INT 12
50212: PUSH
50213: LD_INT 15
50215: PUSH
50216: LD_INT 16
50218: PUSH
50219: LD_INT 20
50221: PUSH
50222: LD_INT 21
50224: PUSH
50225: LD_INT 22
50227: PUSH
50228: LD_INT 23
50230: PUSH
50231: LD_INT 25
50233: PUSH
50234: LD_INT 26
50236: PUSH
50237: LD_INT 30
50239: PUSH
50240: LD_INT 31
50242: PUSH
50243: LD_INT 32
50245: PUSH
50246: LD_INT 36
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 101
50273: PUSH
50274: LD_INT 102
50276: PUSH
50277: LD_INT 103
50279: PUSH
50280: LD_INT 105
50282: PUSH
50283: LD_INT 106
50285: PUSH
50286: LD_INT 108
50288: PUSH
50289: LD_INT 109
50291: PUSH
50292: LD_INT 112
50294: PUSH
50295: LD_INT 116
50297: PUSH
50298: LD_INT 117
50300: PUSH
50301: LD_INT 118
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: ST_TO_ADDR
50321: GO 52576
50323: LD_INT 9
50325: DOUBLE
50326: EQUAL
50327: IFTRUE 50331
50329: GO 50479
50331: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
50332: LD_ADDR_VAR 0 2
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: LD_INT 4
50342: PUSH
50343: LD_INT 5
50345: PUSH
50346: LD_INT 6
50348: PUSH
50349: LD_INT 7
50351: PUSH
50352: LD_INT 8
50354: PUSH
50355: LD_INT 11
50357: PUSH
50358: LD_INT 12
50360: PUSH
50361: LD_INT 15
50363: PUSH
50364: LD_INT 16
50366: PUSH
50367: LD_INT 20
50369: PUSH
50370: LD_INT 21
50372: PUSH
50373: LD_INT 22
50375: PUSH
50376: LD_INT 23
50378: PUSH
50379: LD_INT 25
50381: PUSH
50382: LD_INT 26
50384: PUSH
50385: LD_INT 28
50387: PUSH
50388: LD_INT 30
50390: PUSH
50391: LD_INT 31
50393: PUSH
50394: LD_INT 32
50396: PUSH
50397: LD_INT 36
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 101
50425: PUSH
50426: LD_INT 102
50428: PUSH
50429: LD_INT 103
50431: PUSH
50432: LD_INT 105
50434: PUSH
50435: LD_INT 106
50437: PUSH
50438: LD_INT 108
50440: PUSH
50441: LD_INT 109
50443: PUSH
50444: LD_INT 112
50446: PUSH
50447: LD_INT 114
50449: PUSH
50450: LD_INT 116
50452: PUSH
50453: LD_INT 117
50455: PUSH
50456: LD_INT 118
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: ST_TO_ADDR
50477: GO 52576
50479: LD_INT 10
50481: DOUBLE
50482: EQUAL
50483: IFTRUE 50487
50485: GO 50683
50487: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
50488: LD_ADDR_VAR 0 2
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: LD_INT 4
50498: PUSH
50499: LD_INT 5
50501: PUSH
50502: LD_INT 6
50504: PUSH
50505: LD_INT 7
50507: PUSH
50508: LD_INT 8
50510: PUSH
50511: LD_INT 9
50513: PUSH
50514: LD_INT 10
50516: PUSH
50517: LD_INT 11
50519: PUSH
50520: LD_INT 12
50522: PUSH
50523: LD_INT 13
50525: PUSH
50526: LD_INT 14
50528: PUSH
50529: LD_INT 15
50531: PUSH
50532: LD_INT 16
50534: PUSH
50535: LD_INT 17
50537: PUSH
50538: LD_INT 18
50540: PUSH
50541: LD_INT 19
50543: PUSH
50544: LD_INT 20
50546: PUSH
50547: LD_INT 21
50549: PUSH
50550: LD_INT 22
50552: PUSH
50553: LD_INT 23
50555: PUSH
50556: LD_INT 24
50558: PUSH
50559: LD_INT 25
50561: PUSH
50562: LD_INT 26
50564: PUSH
50565: LD_INT 28
50567: PUSH
50568: LD_INT 30
50570: PUSH
50571: LD_INT 31
50573: PUSH
50574: LD_INT 32
50576: PUSH
50577: LD_INT 36
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 101
50613: PUSH
50614: LD_INT 102
50616: PUSH
50617: LD_INT 103
50619: PUSH
50620: LD_INT 104
50622: PUSH
50623: LD_INT 105
50625: PUSH
50626: LD_INT 106
50628: PUSH
50629: LD_INT 107
50631: PUSH
50632: LD_INT 108
50634: PUSH
50635: LD_INT 109
50637: PUSH
50638: LD_INT 110
50640: PUSH
50641: LD_INT 111
50643: PUSH
50644: LD_INT 112
50646: PUSH
50647: LD_INT 114
50649: PUSH
50650: LD_INT 116
50652: PUSH
50653: LD_INT 117
50655: PUSH
50656: LD_INT 118
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: ST_TO_ADDR
50681: GO 52576
50683: LD_INT 11
50685: DOUBLE
50686: EQUAL
50687: IFTRUE 50691
50689: GO 50895
50691: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
50692: LD_ADDR_VAR 0 2
50696: PUSH
50697: LD_INT 2
50699: PUSH
50700: LD_INT 3
50702: PUSH
50703: LD_INT 4
50705: PUSH
50706: LD_INT 5
50708: PUSH
50709: LD_INT 6
50711: PUSH
50712: LD_INT 7
50714: PUSH
50715: LD_INT 8
50717: PUSH
50718: LD_INT 9
50720: PUSH
50721: LD_INT 10
50723: PUSH
50724: LD_INT 11
50726: PUSH
50727: LD_INT 12
50729: PUSH
50730: LD_INT 13
50732: PUSH
50733: LD_INT 14
50735: PUSH
50736: LD_INT 15
50738: PUSH
50739: LD_INT 16
50741: PUSH
50742: LD_INT 17
50744: PUSH
50745: LD_INT 18
50747: PUSH
50748: LD_INT 19
50750: PUSH
50751: LD_INT 20
50753: PUSH
50754: LD_INT 21
50756: PUSH
50757: LD_INT 22
50759: PUSH
50760: LD_INT 23
50762: PUSH
50763: LD_INT 24
50765: PUSH
50766: LD_INT 25
50768: PUSH
50769: LD_INT 26
50771: PUSH
50772: LD_INT 28
50774: PUSH
50775: LD_INT 30
50777: PUSH
50778: LD_INT 31
50780: PUSH
50781: LD_INT 32
50783: PUSH
50784: LD_INT 34
50786: PUSH
50787: LD_INT 36
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 101
50825: PUSH
50826: LD_INT 102
50828: PUSH
50829: LD_INT 103
50831: PUSH
50832: LD_INT 104
50834: PUSH
50835: LD_INT 105
50837: PUSH
50838: LD_INT 106
50840: PUSH
50841: LD_INT 107
50843: PUSH
50844: LD_INT 108
50846: PUSH
50847: LD_INT 109
50849: PUSH
50850: LD_INT 110
50852: PUSH
50853: LD_INT 111
50855: PUSH
50856: LD_INT 112
50858: PUSH
50859: LD_INT 114
50861: PUSH
50862: LD_INT 116
50864: PUSH
50865: LD_INT 117
50867: PUSH
50868: LD_INT 118
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: ST_TO_ADDR
50893: GO 52576
50895: LD_INT 12
50897: DOUBLE
50898: EQUAL
50899: IFTRUE 50903
50901: GO 51123
50903: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
50904: LD_ADDR_VAR 0 2
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: LD_INT 3
50917: PUSH
50918: LD_INT 4
50920: PUSH
50921: LD_INT 5
50923: PUSH
50924: LD_INT 6
50926: PUSH
50927: LD_INT 7
50929: PUSH
50930: LD_INT 8
50932: PUSH
50933: LD_INT 9
50935: PUSH
50936: LD_INT 10
50938: PUSH
50939: LD_INT 11
50941: PUSH
50942: LD_INT 12
50944: PUSH
50945: LD_INT 13
50947: PUSH
50948: LD_INT 14
50950: PUSH
50951: LD_INT 15
50953: PUSH
50954: LD_INT 16
50956: PUSH
50957: LD_INT 17
50959: PUSH
50960: LD_INT 18
50962: PUSH
50963: LD_INT 19
50965: PUSH
50966: LD_INT 20
50968: PUSH
50969: LD_INT 21
50971: PUSH
50972: LD_INT 22
50974: PUSH
50975: LD_INT 23
50977: PUSH
50978: LD_INT 24
50980: PUSH
50981: LD_INT 25
50983: PUSH
50984: LD_INT 26
50986: PUSH
50987: LD_INT 27
50989: PUSH
50990: LD_INT 28
50992: PUSH
50993: LD_INT 30
50995: PUSH
50996: LD_INT 31
50998: PUSH
50999: LD_INT 32
51001: PUSH
51002: LD_INT 33
51004: PUSH
51005: LD_INT 34
51007: PUSH
51008: LD_INT 36
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 101
51049: PUSH
51050: LD_INT 102
51052: PUSH
51053: LD_INT 103
51055: PUSH
51056: LD_INT 104
51058: PUSH
51059: LD_INT 105
51061: PUSH
51062: LD_INT 106
51064: PUSH
51065: LD_INT 107
51067: PUSH
51068: LD_INT 108
51070: PUSH
51071: LD_INT 109
51073: PUSH
51074: LD_INT 110
51076: PUSH
51077: LD_INT 111
51079: PUSH
51080: LD_INT 112
51082: PUSH
51083: LD_INT 113
51085: PUSH
51086: LD_INT 114
51088: PUSH
51089: LD_INT 116
51091: PUSH
51092: LD_INT 117
51094: PUSH
51095: LD_INT 118
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: ST_TO_ADDR
51121: GO 52576
51123: LD_INT 13
51125: DOUBLE
51126: EQUAL
51127: IFTRUE 51131
51129: GO 51339
51131: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
51132: LD_ADDR_VAR 0 2
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: LD_INT 3
51145: PUSH
51146: LD_INT 4
51148: PUSH
51149: LD_INT 5
51151: PUSH
51152: LD_INT 8
51154: PUSH
51155: LD_INT 9
51157: PUSH
51158: LD_INT 10
51160: PUSH
51161: LD_INT 11
51163: PUSH
51164: LD_INT 12
51166: PUSH
51167: LD_INT 14
51169: PUSH
51170: LD_INT 15
51172: PUSH
51173: LD_INT 16
51175: PUSH
51176: LD_INT 17
51178: PUSH
51179: LD_INT 18
51181: PUSH
51182: LD_INT 19
51184: PUSH
51185: LD_INT 20
51187: PUSH
51188: LD_INT 21
51190: PUSH
51191: LD_INT 22
51193: PUSH
51194: LD_INT 23
51196: PUSH
51197: LD_INT 24
51199: PUSH
51200: LD_INT 25
51202: PUSH
51203: LD_INT 26
51205: PUSH
51206: LD_INT 27
51208: PUSH
51209: LD_INT 28
51211: PUSH
51212: LD_INT 30
51214: PUSH
51215: LD_INT 31
51217: PUSH
51218: LD_INT 32
51220: PUSH
51221: LD_INT 33
51223: PUSH
51224: LD_INT 34
51226: PUSH
51227: LD_INT 36
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 101
51265: PUSH
51266: LD_INT 102
51268: PUSH
51269: LD_INT 103
51271: PUSH
51272: LD_INT 104
51274: PUSH
51275: LD_INT 105
51277: PUSH
51278: LD_INT 106
51280: PUSH
51281: LD_INT 107
51283: PUSH
51284: LD_INT 108
51286: PUSH
51287: LD_INT 109
51289: PUSH
51290: LD_INT 110
51292: PUSH
51293: LD_INT 111
51295: PUSH
51296: LD_INT 112
51298: PUSH
51299: LD_INT 113
51301: PUSH
51302: LD_INT 114
51304: PUSH
51305: LD_INT 116
51307: PUSH
51308: LD_INT 117
51310: PUSH
51311: LD_INT 118
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: ST_TO_ADDR
51337: GO 52576
51339: LD_INT 14
51341: DOUBLE
51342: EQUAL
51343: IFTRUE 51347
51345: GO 51571
51347: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
51348: LD_ADDR_VAR 0 2
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: LD_INT 3
51361: PUSH
51362: LD_INT 4
51364: PUSH
51365: LD_INT 5
51367: PUSH
51368: LD_INT 6
51370: PUSH
51371: LD_INT 7
51373: PUSH
51374: LD_INT 8
51376: PUSH
51377: LD_INT 9
51379: PUSH
51380: LD_INT 10
51382: PUSH
51383: LD_INT 11
51385: PUSH
51386: LD_INT 12
51388: PUSH
51389: LD_INT 13
51391: PUSH
51392: LD_INT 14
51394: PUSH
51395: LD_INT 15
51397: PUSH
51398: LD_INT 16
51400: PUSH
51401: LD_INT 17
51403: PUSH
51404: LD_INT 18
51406: PUSH
51407: LD_INT 19
51409: PUSH
51410: LD_INT 20
51412: PUSH
51413: LD_INT 21
51415: PUSH
51416: LD_INT 22
51418: PUSH
51419: LD_INT 23
51421: PUSH
51422: LD_INT 24
51424: PUSH
51425: LD_INT 25
51427: PUSH
51428: LD_INT 26
51430: PUSH
51431: LD_INT 27
51433: PUSH
51434: LD_INT 28
51436: PUSH
51437: LD_INT 29
51439: PUSH
51440: LD_INT 30
51442: PUSH
51443: LD_INT 31
51445: PUSH
51446: LD_INT 32
51448: PUSH
51449: LD_INT 33
51451: PUSH
51452: LD_INT 34
51454: PUSH
51455: LD_INT 36
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 101
51497: PUSH
51498: LD_INT 102
51500: PUSH
51501: LD_INT 103
51503: PUSH
51504: LD_INT 104
51506: PUSH
51507: LD_INT 105
51509: PUSH
51510: LD_INT 106
51512: PUSH
51513: LD_INT 107
51515: PUSH
51516: LD_INT 108
51518: PUSH
51519: LD_INT 109
51521: PUSH
51522: LD_INT 110
51524: PUSH
51525: LD_INT 111
51527: PUSH
51528: LD_INT 112
51530: PUSH
51531: LD_INT 113
51533: PUSH
51534: LD_INT 114
51536: PUSH
51537: LD_INT 116
51539: PUSH
51540: LD_INT 117
51542: PUSH
51543: LD_INT 118
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: ST_TO_ADDR
51569: GO 52576
51571: LD_INT 15
51573: DOUBLE
51574: EQUAL
51575: IFTRUE 51579
51577: GO 51803
51579: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
51580: LD_ADDR_VAR 0 2
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: LD_INT 2
51590: PUSH
51591: LD_INT 3
51593: PUSH
51594: LD_INT 4
51596: PUSH
51597: LD_INT 5
51599: PUSH
51600: LD_INT 6
51602: PUSH
51603: LD_INT 7
51605: PUSH
51606: LD_INT 8
51608: PUSH
51609: LD_INT 9
51611: PUSH
51612: LD_INT 10
51614: PUSH
51615: LD_INT 11
51617: PUSH
51618: LD_INT 12
51620: PUSH
51621: LD_INT 13
51623: PUSH
51624: LD_INT 14
51626: PUSH
51627: LD_INT 15
51629: PUSH
51630: LD_INT 16
51632: PUSH
51633: LD_INT 17
51635: PUSH
51636: LD_INT 18
51638: PUSH
51639: LD_INT 19
51641: PUSH
51642: LD_INT 20
51644: PUSH
51645: LD_INT 21
51647: PUSH
51648: LD_INT 22
51650: PUSH
51651: LD_INT 23
51653: PUSH
51654: LD_INT 24
51656: PUSH
51657: LD_INT 25
51659: PUSH
51660: LD_INT 26
51662: PUSH
51663: LD_INT 27
51665: PUSH
51666: LD_INT 28
51668: PUSH
51669: LD_INT 29
51671: PUSH
51672: LD_INT 30
51674: PUSH
51675: LD_INT 31
51677: PUSH
51678: LD_INT 32
51680: PUSH
51681: LD_INT 33
51683: PUSH
51684: LD_INT 34
51686: PUSH
51687: LD_INT 36
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 101
51729: PUSH
51730: LD_INT 102
51732: PUSH
51733: LD_INT 103
51735: PUSH
51736: LD_INT 104
51738: PUSH
51739: LD_INT 105
51741: PUSH
51742: LD_INT 106
51744: PUSH
51745: LD_INT 107
51747: PUSH
51748: LD_INT 108
51750: PUSH
51751: LD_INT 109
51753: PUSH
51754: LD_INT 110
51756: PUSH
51757: LD_INT 111
51759: PUSH
51760: LD_INT 112
51762: PUSH
51763: LD_INT 113
51765: PUSH
51766: LD_INT 114
51768: PUSH
51769: LD_INT 116
51771: PUSH
51772: LD_INT 117
51774: PUSH
51775: LD_INT 118
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: ST_TO_ADDR
51801: GO 52576
51803: LD_INT 16
51805: DOUBLE
51806: EQUAL
51807: IFTRUE 51811
51809: GO 51947
51811: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
51812: LD_ADDR_VAR 0 2
51816: PUSH
51817: LD_INT 2
51819: PUSH
51820: LD_INT 4
51822: PUSH
51823: LD_INT 5
51825: PUSH
51826: LD_INT 7
51828: PUSH
51829: LD_INT 11
51831: PUSH
51832: LD_INT 12
51834: PUSH
51835: LD_INT 15
51837: PUSH
51838: LD_INT 16
51840: PUSH
51841: LD_INT 20
51843: PUSH
51844: LD_INT 21
51846: PUSH
51847: LD_INT 22
51849: PUSH
51850: LD_INT 23
51852: PUSH
51853: LD_INT 25
51855: PUSH
51856: LD_INT 26
51858: PUSH
51859: LD_INT 30
51861: PUSH
51862: LD_INT 31
51864: PUSH
51865: LD_INT 32
51867: PUSH
51868: LD_INT 33
51870: PUSH
51871: LD_INT 34
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 101
51897: PUSH
51898: LD_INT 102
51900: PUSH
51901: LD_INT 103
51903: PUSH
51904: LD_INT 106
51906: PUSH
51907: LD_INT 108
51909: PUSH
51910: LD_INT 112
51912: PUSH
51913: LD_INT 113
51915: PUSH
51916: LD_INT 114
51918: PUSH
51919: LD_INT 116
51921: PUSH
51922: LD_INT 117
51924: PUSH
51925: LD_INT 118
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: ST_TO_ADDR
51945: GO 52576
51947: LD_INT 17
51949: DOUBLE
51950: EQUAL
51951: IFTRUE 51955
51953: GO 52179
51955: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
51956: LD_ADDR_VAR 0 2
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 2
51966: PUSH
51967: LD_INT 3
51969: PUSH
51970: LD_INT 4
51972: PUSH
51973: LD_INT 5
51975: PUSH
51976: LD_INT 6
51978: PUSH
51979: LD_INT 7
51981: PUSH
51982: LD_INT 8
51984: PUSH
51985: LD_INT 9
51987: PUSH
51988: LD_INT 10
51990: PUSH
51991: LD_INT 11
51993: PUSH
51994: LD_INT 12
51996: PUSH
51997: LD_INT 13
51999: PUSH
52000: LD_INT 14
52002: PUSH
52003: LD_INT 15
52005: PUSH
52006: LD_INT 16
52008: PUSH
52009: LD_INT 17
52011: PUSH
52012: LD_INT 18
52014: PUSH
52015: LD_INT 19
52017: PUSH
52018: LD_INT 20
52020: PUSH
52021: LD_INT 21
52023: PUSH
52024: LD_INT 22
52026: PUSH
52027: LD_INT 23
52029: PUSH
52030: LD_INT 24
52032: PUSH
52033: LD_INT 25
52035: PUSH
52036: LD_INT 26
52038: PUSH
52039: LD_INT 27
52041: PUSH
52042: LD_INT 28
52044: PUSH
52045: LD_INT 29
52047: PUSH
52048: LD_INT 30
52050: PUSH
52051: LD_INT 31
52053: PUSH
52054: LD_INT 32
52056: PUSH
52057: LD_INT 33
52059: PUSH
52060: LD_INT 34
52062: PUSH
52063: LD_INT 36
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 101
52105: PUSH
52106: LD_INT 102
52108: PUSH
52109: LD_INT 103
52111: PUSH
52112: LD_INT 104
52114: PUSH
52115: LD_INT 105
52117: PUSH
52118: LD_INT 106
52120: PUSH
52121: LD_INT 107
52123: PUSH
52124: LD_INT 108
52126: PUSH
52127: LD_INT 109
52129: PUSH
52130: LD_INT 110
52132: PUSH
52133: LD_INT 111
52135: PUSH
52136: LD_INT 112
52138: PUSH
52139: LD_INT 113
52141: PUSH
52142: LD_INT 114
52144: PUSH
52145: LD_INT 116
52147: PUSH
52148: LD_INT 117
52150: PUSH
52151: LD_INT 118
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: ST_TO_ADDR
52177: GO 52576
52179: LD_INT 18
52181: DOUBLE
52182: EQUAL
52183: IFTRUE 52187
52185: GO 52335
52187: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
52188: LD_ADDR_VAR 0 2
52192: PUSH
52193: LD_INT 2
52195: PUSH
52196: LD_INT 4
52198: PUSH
52199: LD_INT 5
52201: PUSH
52202: LD_INT 7
52204: PUSH
52205: LD_INT 11
52207: PUSH
52208: LD_INT 12
52210: PUSH
52211: LD_INT 15
52213: PUSH
52214: LD_INT 16
52216: PUSH
52217: LD_INT 20
52219: PUSH
52220: LD_INT 21
52222: PUSH
52223: LD_INT 22
52225: PUSH
52226: LD_INT 23
52228: PUSH
52229: LD_INT 25
52231: PUSH
52232: LD_INT 26
52234: PUSH
52235: LD_INT 30
52237: PUSH
52238: LD_INT 31
52240: PUSH
52241: LD_INT 32
52243: PUSH
52244: LD_INT 33
52246: PUSH
52247: LD_INT 34
52249: PUSH
52250: LD_INT 35
52252: PUSH
52253: LD_INT 36
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 101
52281: PUSH
52282: LD_INT 102
52284: PUSH
52285: LD_INT 103
52287: PUSH
52288: LD_INT 106
52290: PUSH
52291: LD_INT 108
52293: PUSH
52294: LD_INT 112
52296: PUSH
52297: LD_INT 113
52299: PUSH
52300: LD_INT 114
52302: PUSH
52303: LD_INT 115
52305: PUSH
52306: LD_INT 116
52308: PUSH
52309: LD_INT 117
52311: PUSH
52312: LD_INT 118
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: ST_TO_ADDR
52333: GO 52576
52335: LD_INT 19
52337: DOUBLE
52338: EQUAL
52339: IFTRUE 52343
52341: GO 52575
52343: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
52344: LD_ADDR_VAR 0 2
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: LD_INT 3
52357: PUSH
52358: LD_INT 4
52360: PUSH
52361: LD_INT 5
52363: PUSH
52364: LD_INT 6
52366: PUSH
52367: LD_INT 7
52369: PUSH
52370: LD_INT 8
52372: PUSH
52373: LD_INT 9
52375: PUSH
52376: LD_INT 10
52378: PUSH
52379: LD_INT 11
52381: PUSH
52382: LD_INT 12
52384: PUSH
52385: LD_INT 13
52387: PUSH
52388: LD_INT 14
52390: PUSH
52391: LD_INT 15
52393: PUSH
52394: LD_INT 16
52396: PUSH
52397: LD_INT 17
52399: PUSH
52400: LD_INT 18
52402: PUSH
52403: LD_INT 19
52405: PUSH
52406: LD_INT 20
52408: PUSH
52409: LD_INT 21
52411: PUSH
52412: LD_INT 22
52414: PUSH
52415: LD_INT 23
52417: PUSH
52418: LD_INT 24
52420: PUSH
52421: LD_INT 25
52423: PUSH
52424: LD_INT 26
52426: PUSH
52427: LD_INT 27
52429: PUSH
52430: LD_INT 28
52432: PUSH
52433: LD_INT 29
52435: PUSH
52436: LD_INT 30
52438: PUSH
52439: LD_INT 31
52441: PUSH
52442: LD_INT 32
52444: PUSH
52445: LD_INT 33
52447: PUSH
52448: LD_INT 34
52450: PUSH
52451: LD_INT 35
52453: PUSH
52454: LD_INT 36
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 101
52497: PUSH
52498: LD_INT 102
52500: PUSH
52501: LD_INT 103
52503: PUSH
52504: LD_INT 104
52506: PUSH
52507: LD_INT 105
52509: PUSH
52510: LD_INT 106
52512: PUSH
52513: LD_INT 107
52515: PUSH
52516: LD_INT 108
52518: PUSH
52519: LD_INT 109
52521: PUSH
52522: LD_INT 110
52524: PUSH
52525: LD_INT 111
52527: PUSH
52528: LD_INT 112
52530: PUSH
52531: LD_INT 113
52533: PUSH
52534: LD_INT 114
52536: PUSH
52537: LD_INT 115
52539: PUSH
52540: LD_INT 116
52542: PUSH
52543: LD_INT 117
52545: PUSH
52546: LD_INT 118
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: ST_TO_ADDR
52573: GO 52576
52575: POP
// end else
52576: GO 52807
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
52578: LD_ADDR_VAR 0 2
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 2
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: LD_INT 4
52594: PUSH
52595: LD_INT 5
52597: PUSH
52598: LD_INT 6
52600: PUSH
52601: LD_INT 7
52603: PUSH
52604: LD_INT 8
52606: PUSH
52607: LD_INT 9
52609: PUSH
52610: LD_INT 10
52612: PUSH
52613: LD_INT 11
52615: PUSH
52616: LD_INT 12
52618: PUSH
52619: LD_INT 13
52621: PUSH
52622: LD_INT 14
52624: PUSH
52625: LD_INT 15
52627: PUSH
52628: LD_INT 16
52630: PUSH
52631: LD_INT 17
52633: PUSH
52634: LD_INT 18
52636: PUSH
52637: LD_INT 19
52639: PUSH
52640: LD_INT 20
52642: PUSH
52643: LD_INT 21
52645: PUSH
52646: LD_INT 22
52648: PUSH
52649: LD_INT 23
52651: PUSH
52652: LD_INT 24
52654: PUSH
52655: LD_INT 25
52657: PUSH
52658: LD_INT 26
52660: PUSH
52661: LD_INT 27
52663: PUSH
52664: LD_INT 28
52666: PUSH
52667: LD_INT 29
52669: PUSH
52670: LD_INT 30
52672: PUSH
52673: LD_INT 31
52675: PUSH
52676: LD_INT 32
52678: PUSH
52679: LD_INT 33
52681: PUSH
52682: LD_INT 34
52684: PUSH
52685: LD_INT 35
52687: PUSH
52688: LD_INT 36
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 101
52731: PUSH
52732: LD_INT 102
52734: PUSH
52735: LD_INT 103
52737: PUSH
52738: LD_INT 104
52740: PUSH
52741: LD_INT 105
52743: PUSH
52744: LD_INT 106
52746: PUSH
52747: LD_INT 107
52749: PUSH
52750: LD_INT 108
52752: PUSH
52753: LD_INT 109
52755: PUSH
52756: LD_INT 110
52758: PUSH
52759: LD_INT 111
52761: PUSH
52762: LD_INT 112
52764: PUSH
52765: LD_INT 113
52767: PUSH
52768: LD_INT 114
52770: PUSH
52771: LD_INT 115
52773: PUSH
52774: LD_INT 116
52776: PUSH
52777: LD_INT 117
52779: PUSH
52780: LD_INT 118
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: ST_TO_ADDR
// if result then
52807: LD_VAR 0 2
52811: IFFALSE 53597
// begin normal :=  ;
52813: LD_ADDR_VAR 0 5
52817: PUSH
52818: LD_STRING 
52820: ST_TO_ADDR
// hardcore :=  ;
52821: LD_ADDR_VAR 0 6
52825: PUSH
52826: LD_STRING 
52828: ST_TO_ADDR
// active :=  ;
52829: LD_ADDR_VAR 0 7
52833: PUSH
52834: LD_STRING 
52836: ST_TO_ADDR
// for i = 1 to normalCounter do
52837: LD_ADDR_VAR 0 8
52841: PUSH
52842: DOUBLE
52843: LD_INT 1
52845: DEC
52846: ST_TO_ADDR
52847: LD_EXP 16
52851: PUSH
52852: FOR_TO
52853: IFFALSE 52954
// begin tmp := 0 ;
52855: LD_ADDR_VAR 0 3
52859: PUSH
52860: LD_STRING 0
52862: ST_TO_ADDR
// if result [ 1 ] then
52863: LD_VAR 0 2
52867: PUSH
52868: LD_INT 1
52870: ARRAY
52871: IFFALSE 52936
// if result [ 1 ] [ 1 ] = i then
52873: LD_VAR 0 2
52877: PUSH
52878: LD_INT 1
52880: ARRAY
52881: PUSH
52882: LD_INT 1
52884: ARRAY
52885: PUSH
52886: LD_VAR 0 8
52890: EQUAL
52891: IFFALSE 52936
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
52893: LD_ADDR_VAR 0 2
52897: PUSH
52898: LD_VAR 0 2
52902: PPUSH
52903: LD_INT 1
52905: PPUSH
52906: LD_VAR 0 2
52910: PUSH
52911: LD_INT 1
52913: ARRAY
52914: PPUSH
52915: LD_INT 1
52917: PPUSH
52918: CALL_OW 3
52922: PPUSH
52923: CALL_OW 1
52927: ST_TO_ADDR
// tmp := 1 ;
52928: LD_ADDR_VAR 0 3
52932: PUSH
52933: LD_STRING 1
52935: ST_TO_ADDR
// end ; normal := normal & tmp ;
52936: LD_ADDR_VAR 0 5
52940: PUSH
52941: LD_VAR 0 5
52945: PUSH
52946: LD_VAR 0 3
52950: STR
52951: ST_TO_ADDR
// end ;
52952: GO 52852
52954: POP
52955: POP
// for i = 1 to hardcoreCounter do
52956: LD_ADDR_VAR 0 8
52960: PUSH
52961: DOUBLE
52962: LD_INT 1
52964: DEC
52965: ST_TO_ADDR
52966: LD_EXP 17
52970: PUSH
52971: FOR_TO
52972: IFFALSE 53077
// begin tmp := 0 ;
52974: LD_ADDR_VAR 0 3
52978: PUSH
52979: LD_STRING 0
52981: ST_TO_ADDR
// if result [ 2 ] then
52982: LD_VAR 0 2
52986: PUSH
52987: LD_INT 2
52989: ARRAY
52990: IFFALSE 53059
// if result [ 2 ] [ 1 ] = 100 + i then
52992: LD_VAR 0 2
52996: PUSH
52997: LD_INT 2
52999: ARRAY
53000: PUSH
53001: LD_INT 1
53003: ARRAY
53004: PUSH
53005: LD_INT 100
53007: PUSH
53008: LD_VAR 0 8
53012: PLUS
53013: EQUAL
53014: IFFALSE 53059
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53016: LD_ADDR_VAR 0 2
53020: PUSH
53021: LD_VAR 0 2
53025: PPUSH
53026: LD_INT 2
53028: PPUSH
53029: LD_VAR 0 2
53033: PUSH
53034: LD_INT 2
53036: ARRAY
53037: PPUSH
53038: LD_INT 1
53040: PPUSH
53041: CALL_OW 3
53045: PPUSH
53046: CALL_OW 1
53050: ST_TO_ADDR
// tmp := 1 ;
53051: LD_ADDR_VAR 0 3
53055: PUSH
53056: LD_STRING 1
53058: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53059: LD_ADDR_VAR 0 6
53063: PUSH
53064: LD_VAR 0 6
53068: PUSH
53069: LD_VAR 0 3
53073: STR
53074: ST_TO_ADDR
// end ;
53075: GO 52971
53077: POP
53078: POP
// if isGameLoad then
53079: LD_VAR 0 1
53083: IFFALSE 53558
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53085: LD_ADDR_VAR 0 4
53089: PUSH
53090: LD_EXP 20
53094: PUSH
53095: LD_EXP 19
53099: PUSH
53100: LD_EXP 21
53104: PUSH
53105: LD_EXP 18
53109: PUSH
53110: LD_EXP 22
53114: PUSH
53115: LD_EXP 23
53119: PUSH
53120: LD_EXP 24
53124: PUSH
53125: LD_EXP 25
53129: PUSH
53130: LD_EXP 26
53134: PUSH
53135: LD_EXP 27
53139: PUSH
53140: LD_EXP 28
53144: PUSH
53145: LD_EXP 29
53149: PUSH
53150: LD_EXP 30
53154: PUSH
53155: LD_EXP 31
53159: PUSH
53160: LD_EXP 39
53164: PUSH
53165: LD_EXP 40
53169: PUSH
53170: LD_EXP 41
53174: PUSH
53175: LD_EXP 42
53179: PUSH
53180: LD_EXP 44
53184: PUSH
53185: LD_EXP 45
53189: PUSH
53190: LD_EXP 46
53194: PUSH
53195: LD_EXP 49
53199: PUSH
53200: LD_EXP 51
53204: PUSH
53205: LD_EXP 52
53209: PUSH
53210: LD_EXP 53
53214: PUSH
53215: LD_EXP 55
53219: PUSH
53220: LD_EXP 56
53224: PUSH
53225: LD_EXP 59
53229: PUSH
53230: LD_EXP 60
53234: PUSH
53235: LD_EXP 61
53239: PUSH
53240: LD_EXP 62
53244: PUSH
53245: LD_EXP 63
53249: PUSH
53250: LD_EXP 64
53254: PUSH
53255: LD_EXP 65
53259: PUSH
53260: LD_EXP 66
53264: PUSH
53265: LD_EXP 67
53269: PUSH
53270: LD_EXP 32
53274: PUSH
53275: LD_EXP 33
53279: PUSH
53280: LD_EXP 36
53284: PUSH
53285: LD_EXP 37
53289: PUSH
53290: LD_EXP 38
53294: PUSH
53295: LD_EXP 34
53299: PUSH
53300: LD_EXP 35
53304: PUSH
53305: LD_EXP 43
53309: PUSH
53310: LD_EXP 47
53314: PUSH
53315: LD_EXP 48
53319: PUSH
53320: LD_EXP 50
53324: PUSH
53325: LD_EXP 54
53329: PUSH
53330: LD_EXP 57
53334: PUSH
53335: LD_EXP 58
53339: PUSH
53340: LD_EXP 68
53344: PUSH
53345: LD_EXP 69
53349: PUSH
53350: LD_EXP 70
53354: PUSH
53355: LD_EXP 71
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: ST_TO_ADDR
// tmp :=  ;
53416: LD_ADDR_VAR 0 3
53420: PUSH
53421: LD_STRING 
53423: ST_TO_ADDR
// for i = 1 to normalCounter do
53424: LD_ADDR_VAR 0 8
53428: PUSH
53429: DOUBLE
53430: LD_INT 1
53432: DEC
53433: ST_TO_ADDR
53434: LD_EXP 16
53438: PUSH
53439: FOR_TO
53440: IFFALSE 53476
// begin if flags [ i ] then
53442: LD_VAR 0 4
53446: PUSH
53447: LD_VAR 0 8
53451: ARRAY
53452: IFFALSE 53474
// tmp := tmp & i & ; ;
53454: LD_ADDR_VAR 0 3
53458: PUSH
53459: LD_VAR 0 3
53463: PUSH
53464: LD_VAR 0 8
53468: STR
53469: PUSH
53470: LD_STRING ;
53472: STR
53473: ST_TO_ADDR
// end ;
53474: GO 53439
53476: POP
53477: POP
// for i = 1 to hardcoreCounter do
53478: LD_ADDR_VAR 0 8
53482: PUSH
53483: DOUBLE
53484: LD_INT 1
53486: DEC
53487: ST_TO_ADDR
53488: LD_EXP 17
53492: PUSH
53493: FOR_TO
53494: IFFALSE 53540
// begin if flags [ normalCounter + i ] then
53496: LD_VAR 0 4
53500: PUSH
53501: LD_EXP 16
53505: PUSH
53506: LD_VAR 0 8
53510: PLUS
53511: ARRAY
53512: IFFALSE 53538
// tmp := tmp & ( 100 + i ) & ; ;
53514: LD_ADDR_VAR 0 3
53518: PUSH
53519: LD_VAR 0 3
53523: PUSH
53524: LD_INT 100
53526: PUSH
53527: LD_VAR 0 8
53531: PLUS
53532: STR
53533: PUSH
53534: LD_STRING ;
53536: STR
53537: ST_TO_ADDR
// end ;
53538: GO 53493
53540: POP
53541: POP
// if tmp then
53542: LD_VAR 0 3
53546: IFFALSE 53558
// active := tmp ;
53548: LD_ADDR_VAR 0 7
53552: PUSH
53553: LD_VAR 0 3
53557: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
53558: LD_STRING getStreamItemsFromMission("
53560: PUSH
53561: LD_VAR 0 5
53565: STR
53566: PUSH
53567: LD_STRING ","
53569: STR
53570: PUSH
53571: LD_VAR 0 6
53575: STR
53576: PUSH
53577: LD_STRING ","
53579: STR
53580: PUSH
53581: LD_VAR 0 7
53585: STR
53586: PUSH
53587: LD_STRING ")
53589: STR
53590: PPUSH
53591: CALL_OW 559
// end else
53595: GO 53604
// ToLua ( getStreamItemsFromMission("","","") ) ;
53597: LD_STRING getStreamItemsFromMission("","","")
53599: PPUSH
53600: CALL_OW 559
// end ;
53604: LD_VAR 0 2
53608: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
53609: LD_EXP 15
53613: IFFALSE 53621
53615: PUSH
53616: LD_EXP 20
53620: AND
53621: IFFALSE 53745
53623: GO 53625
53625: DISABLE
53626: LD_INT 0
53628: PPUSH
53629: PPUSH
// begin enable ;
53630: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
53631: LD_ADDR_VAR 0 2
53635: PUSH
53636: LD_INT 22
53638: PUSH
53639: LD_OWVAR 2
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: LD_INT 34
53653: PUSH
53654: LD_INT 7
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 34
53663: PUSH
53664: LD_INT 45
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 34
53673: PUSH
53674: LD_INT 28
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 34
53683: PUSH
53684: LD_INT 47
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PPUSH
53702: CALL_OW 69
53706: ST_TO_ADDR
// if not tmp then
53707: LD_VAR 0 2
53711: NOT
53712: IFFALSE 53716
// exit ;
53714: GO 53745
// for i in tmp do
53716: LD_ADDR_VAR 0 1
53720: PUSH
53721: LD_VAR 0 2
53725: PUSH
53726: FOR_IN
53727: IFFALSE 53743
// begin SetLives ( i , 0 ) ;
53729: LD_VAR 0 1
53733: PPUSH
53734: LD_INT 0
53736: PPUSH
53737: CALL_OW 234
// end ;
53741: GO 53726
53743: POP
53744: POP
// end ;
53745: PPOPN 2
53747: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
53748: LD_EXP 15
53752: IFFALSE 53760
53754: PUSH
53755: LD_EXP 21
53759: AND
53760: IFFALSE 53844
53762: GO 53764
53764: DISABLE
53765: LD_INT 0
53767: PPUSH
53768: PPUSH
// begin enable ;
53769: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
53770: LD_ADDR_VAR 0 2
53774: PUSH
53775: LD_INT 22
53777: PUSH
53778: LD_OWVAR 2
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 32
53789: PUSH
53790: LD_INT 3
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PPUSH
53801: CALL_OW 69
53805: ST_TO_ADDR
// if not tmp then
53806: LD_VAR 0 2
53810: NOT
53811: IFFALSE 53815
// exit ;
53813: GO 53844
// for i in tmp do
53815: LD_ADDR_VAR 0 1
53819: PUSH
53820: LD_VAR 0 2
53824: PUSH
53825: FOR_IN
53826: IFFALSE 53842
// begin SetLives ( i , 0 ) ;
53828: LD_VAR 0 1
53832: PPUSH
53833: LD_INT 0
53835: PPUSH
53836: CALL_OW 234
// end ;
53840: GO 53825
53842: POP
53843: POP
// end ;
53844: PPOPN 2
53846: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
53847: LD_EXP 15
53851: IFFALSE 53859
53853: PUSH
53854: LD_EXP 18
53858: AND
53859: IFFALSE 53952
53861: GO 53863
53863: DISABLE
53864: LD_INT 0
53866: PPUSH
// begin enable ;
53867: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
53868: LD_ADDR_VAR 0 1
53872: PUSH
53873: LD_INT 22
53875: PUSH
53876: LD_OWVAR 2
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: LD_INT 25
53890: PUSH
53891: LD_INT 5
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 25
53900: PUSH
53901: LD_INT 9
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 25
53910: PUSH
53911: LD_INT 8
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PPUSH
53928: CALL_OW 69
53932: PUSH
53933: FOR_IN
53934: IFFALSE 53950
// begin SetClass ( i , 1 ) ;
53936: LD_VAR 0 1
53940: PPUSH
53941: LD_INT 1
53943: PPUSH
53944: CALL_OW 336
// end ;
53948: GO 53933
53950: POP
53951: POP
// end ;
53952: PPOPN 1
53954: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
53955: LD_EXP 15
53959: IFFALSE 53967
53961: PUSH
53962: LD_EXP 19
53966: AND
53967: IFFALSE 53979
53969: PUSH
53970: LD_OWVAR 65
53974: PUSH
53975: LD_INT 7
53977: LESS
53978: AND
53979: IFFALSE 53993
53981: GO 53983
53983: DISABLE
// begin enable ;
53984: ENABLE
// game_speed := 7 ;
53985: LD_ADDR_OWVAR 65
53989: PUSH
53990: LD_INT 7
53992: ST_TO_ADDR
// end ;
53993: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
53994: LD_EXP 15
53998: IFFALSE 54006
54000: PUSH
54001: LD_EXP 22
54005: AND
54006: IFFALSE 54208
54008: GO 54010
54010: DISABLE
54011: LD_INT 0
54013: PPUSH
54014: PPUSH
54015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54016: LD_ADDR_VAR 0 3
54020: PUSH
54021: LD_INT 81
54023: PUSH
54024: LD_OWVAR 2
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 21
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PPUSH
54047: CALL_OW 69
54051: ST_TO_ADDR
// if not tmp then
54052: LD_VAR 0 3
54056: NOT
54057: IFFALSE 54061
// exit ;
54059: GO 54208
// if tmp > 5 then
54061: LD_VAR 0 3
54065: PUSH
54066: LD_INT 5
54068: GREATER
54069: IFFALSE 54081
// k := 5 else
54071: LD_ADDR_VAR 0 2
54075: PUSH
54076: LD_INT 5
54078: ST_TO_ADDR
54079: GO 54091
// k := tmp ;
54081: LD_ADDR_VAR 0 2
54085: PUSH
54086: LD_VAR 0 3
54090: ST_TO_ADDR
// for i := 1 to k do
54091: LD_ADDR_VAR 0 1
54095: PUSH
54096: DOUBLE
54097: LD_INT 1
54099: DEC
54100: ST_TO_ADDR
54101: LD_VAR 0 2
54105: PUSH
54106: FOR_TO
54107: IFFALSE 54206
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54109: LD_VAR 0 3
54113: PUSH
54114: LD_VAR 0 1
54118: ARRAY
54119: PPUSH
54120: LD_VAR 0 1
54124: PUSH
54125: LD_INT 4
54127: MOD
54128: PUSH
54129: LD_INT 1
54131: PLUS
54132: PPUSH
54133: CALL_OW 259
54137: PUSH
54138: LD_INT 10
54140: LESS
54141: IFFALSE 54204
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
54143: LD_VAR 0 3
54147: PUSH
54148: LD_VAR 0 1
54152: ARRAY
54153: PPUSH
54154: LD_VAR 0 1
54158: PUSH
54159: LD_INT 4
54161: MOD
54162: PUSH
54163: LD_INT 1
54165: PLUS
54166: PPUSH
54167: LD_VAR 0 3
54171: PUSH
54172: LD_VAR 0 1
54176: ARRAY
54177: PPUSH
54178: LD_VAR 0 1
54182: PUSH
54183: LD_INT 4
54185: MOD
54186: PUSH
54187: LD_INT 1
54189: PLUS
54190: PPUSH
54191: CALL_OW 259
54195: PUSH
54196: LD_INT 1
54198: PLUS
54199: PPUSH
54200: CALL_OW 237
54204: GO 54106
54206: POP
54207: POP
// end ;
54208: PPOPN 3
54210: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
54211: LD_EXP 15
54215: IFFALSE 54223
54217: PUSH
54218: LD_EXP 23
54222: AND
54223: IFFALSE 54243
54225: GO 54227
54227: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
54228: LD_INT 4
54230: PPUSH
54231: LD_OWVAR 2
54235: PPUSH
54236: LD_INT 0
54238: PPUSH
54239: CALL_OW 324
54243: END
// every 0 0$1 trigger StreamModeActive and sShovel do
54244: LD_EXP 15
54248: IFFALSE 54256
54250: PUSH
54251: LD_EXP 52
54255: AND
54256: IFFALSE 54276
54258: GO 54260
54260: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
54261: LD_INT 19
54263: PPUSH
54264: LD_OWVAR 2
54268: PPUSH
54269: LD_INT 0
54271: PPUSH
54272: CALL_OW 324
54276: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
54277: LD_EXP 15
54281: IFFALSE 54289
54283: PUSH
54284: LD_EXP 24
54288: AND
54289: IFFALSE 54391
54291: GO 54293
54293: DISABLE
54294: LD_INT 0
54296: PPUSH
54297: PPUSH
// begin enable ;
54298: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
54299: LD_ADDR_VAR 0 2
54303: PUSH
54304: LD_INT 22
54306: PUSH
54307: LD_OWVAR 2
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 2
54318: PUSH
54319: LD_INT 34
54321: PUSH
54322: LD_INT 11
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 34
54331: PUSH
54332: LD_INT 30
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: LIST
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PPUSH
54348: CALL_OW 69
54352: ST_TO_ADDR
// if not tmp then
54353: LD_VAR 0 2
54357: NOT
54358: IFFALSE 54362
// exit ;
54360: GO 54391
// for i in tmp do
54362: LD_ADDR_VAR 0 1
54366: PUSH
54367: LD_VAR 0 2
54371: PUSH
54372: FOR_IN
54373: IFFALSE 54389
// begin SetLives ( i , 0 ) ;
54375: LD_VAR 0 1
54379: PPUSH
54380: LD_INT 0
54382: PPUSH
54383: CALL_OW 234
// end ;
54387: GO 54372
54389: POP
54390: POP
// end ;
54391: PPOPN 2
54393: END
// every 0 0$1 trigger StreamModeActive and sBunker do
54394: LD_EXP 15
54398: IFFALSE 54406
54400: PUSH
54401: LD_EXP 25
54405: AND
54406: IFFALSE 54426
54408: GO 54410
54410: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
54411: LD_INT 32
54413: PPUSH
54414: LD_OWVAR 2
54418: PPUSH
54419: LD_INT 0
54421: PPUSH
54422: CALL_OW 324
54426: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
54427: LD_EXP 15
54431: IFFALSE 54439
54433: PUSH
54434: LD_EXP 26
54438: AND
54439: IFFALSE 54622
54441: GO 54443
54443: DISABLE
54444: LD_INT 0
54446: PPUSH
54447: PPUSH
54448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
54449: LD_ADDR_VAR 0 2
54453: PUSH
54454: LD_INT 22
54456: PUSH
54457: LD_OWVAR 2
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 33
54468: PUSH
54469: LD_INT 3
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PPUSH
54480: CALL_OW 69
54484: ST_TO_ADDR
// if not tmp then
54485: LD_VAR 0 2
54489: NOT
54490: IFFALSE 54494
// exit ;
54492: GO 54622
// side := 0 ;
54494: LD_ADDR_VAR 0 3
54498: PUSH
54499: LD_INT 0
54501: ST_TO_ADDR
// for i := 1 to 8 do
54502: LD_ADDR_VAR 0 1
54506: PUSH
54507: DOUBLE
54508: LD_INT 1
54510: DEC
54511: ST_TO_ADDR
54512: LD_INT 8
54514: PUSH
54515: FOR_TO
54516: IFFALSE 54566
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
54518: LD_OWVAR 2
54522: PUSH
54523: LD_VAR 0 1
54527: NONEQUAL
54528: IFFALSE 54550
54530: PUSH
54531: LD_OWVAR 2
54535: PPUSH
54536: LD_VAR 0 1
54540: PPUSH
54541: CALL_OW 81
54545: PUSH
54546: LD_INT 2
54548: EQUAL
54549: AND
54550: IFFALSE 54564
// begin side := i ;
54552: LD_ADDR_VAR 0 3
54556: PUSH
54557: LD_VAR 0 1
54561: ST_TO_ADDR
// break ;
54562: GO 54566
// end ;
54564: GO 54515
54566: POP
54567: POP
// if not side then
54568: LD_VAR 0 3
54572: NOT
54573: IFFALSE 54577
// exit ;
54575: GO 54622
// for i := 1 to tmp do
54577: LD_ADDR_VAR 0 1
54581: PUSH
54582: DOUBLE
54583: LD_INT 1
54585: DEC
54586: ST_TO_ADDR
54587: LD_VAR 0 2
54591: PUSH
54592: FOR_TO
54593: IFFALSE 54620
// if Prob ( 60 ) then
54595: LD_INT 60
54597: PPUSH
54598: CALL_OW 13
54602: IFFALSE 54618
// SetSide ( i , side ) ;
54604: LD_VAR 0 1
54608: PPUSH
54609: LD_VAR 0 3
54613: PPUSH
54614: CALL_OW 235
54618: GO 54592
54620: POP
54621: POP
// end ;
54622: PPOPN 3
54624: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
54625: LD_EXP 15
54629: IFFALSE 54637
54631: PUSH
54632: LD_EXP 28
54636: AND
54637: IFFALSE 54756
54639: GO 54641
54641: DISABLE
54642: LD_INT 0
54644: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
54645: LD_ADDR_VAR 0 1
54649: PUSH
54650: LD_INT 22
54652: PUSH
54653: LD_OWVAR 2
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 21
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 3
54674: PUSH
54675: LD_INT 23
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: LIST
54693: PPUSH
54694: CALL_OW 69
54698: PUSH
54699: FOR_IN
54700: IFFALSE 54754
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
54702: LD_VAR 0 1
54706: PPUSH
54707: CALL_OW 257
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: LD_INT 3
54720: PUSH
54721: LD_INT 4
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: IN
54730: IFFALSE 54752
// SetClass ( un , rand ( 1 , 4 ) ) ;
54732: LD_VAR 0 1
54736: PPUSH
54737: LD_INT 1
54739: PPUSH
54740: LD_INT 4
54742: PPUSH
54743: CALL_OW 12
54747: PPUSH
54748: CALL_OW 336
54752: GO 54699
54754: POP
54755: POP
// end ;
54756: PPOPN 1
54758: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
54759: LD_EXP 15
54763: IFFALSE 54771
54765: PUSH
54766: LD_EXP 27
54770: AND
54771: IFFALSE 54850
54773: GO 54775
54775: DISABLE
54776: LD_INT 0
54778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
54779: LD_ADDR_VAR 0 1
54783: PUSH
54784: LD_INT 22
54786: PUSH
54787: LD_OWVAR 2
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 21
54798: PUSH
54799: LD_INT 3
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PPUSH
54810: CALL_OW 69
54814: ST_TO_ADDR
// if not tmp then
54815: LD_VAR 0 1
54819: NOT
54820: IFFALSE 54824
// exit ;
54822: GO 54850
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
54824: LD_VAR 0 1
54828: PUSH
54829: LD_INT 1
54831: PPUSH
54832: LD_VAR 0 1
54836: PPUSH
54837: CALL_OW 12
54841: ARRAY
54842: PPUSH
54843: LD_INT 100
54845: PPUSH
54846: CALL_OW 234
// end ;
54850: PPOPN 1
54852: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
54853: LD_EXP 15
54857: IFFALSE 54865
54859: PUSH
54860: LD_EXP 29
54864: AND
54865: IFFALSE 54963
54867: GO 54869
54869: DISABLE
54870: LD_INT 0
54872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54873: LD_ADDR_VAR 0 1
54877: PUSH
54878: LD_INT 22
54880: PUSH
54881: LD_OWVAR 2
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 21
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PPUSH
54904: CALL_OW 69
54908: ST_TO_ADDR
// if not tmp then
54909: LD_VAR 0 1
54913: NOT
54914: IFFALSE 54918
// exit ;
54916: GO 54963
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
54918: LD_VAR 0 1
54922: PUSH
54923: LD_INT 1
54925: PPUSH
54926: LD_VAR 0 1
54930: PPUSH
54931: CALL_OW 12
54935: ARRAY
54936: PPUSH
54937: LD_INT 1
54939: PPUSH
54940: LD_INT 4
54942: PPUSH
54943: CALL_OW 12
54947: PPUSH
54948: LD_INT 3000
54950: PPUSH
54951: LD_INT 9000
54953: PPUSH
54954: CALL_OW 12
54958: PPUSH
54959: CALL_OW 492
// end ;
54963: PPOPN 1
54965: END
// every 0 0$1 trigger StreamModeActive and sDepot do
54966: LD_EXP 15
54970: IFFALSE 54978
54972: PUSH
54973: LD_EXP 30
54977: AND
54978: IFFALSE 54998
54980: GO 54982
54982: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
54983: LD_INT 1
54985: PPUSH
54986: LD_OWVAR 2
54990: PPUSH
54991: LD_INT 0
54993: PPUSH
54994: CALL_OW 324
54998: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
54999: LD_EXP 15
55003: IFFALSE 55011
55005: PUSH
55006: LD_EXP 31
55010: AND
55011: IFFALSE 55094
55013: GO 55015
55015: DISABLE
55016: LD_INT 0
55018: PPUSH
55019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55020: LD_ADDR_VAR 0 2
55024: PUSH
55025: LD_INT 22
55027: PUSH
55028: LD_OWVAR 2
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 21
55039: PUSH
55040: LD_INT 3
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PPUSH
55051: CALL_OW 69
55055: ST_TO_ADDR
// if not tmp then
55056: LD_VAR 0 2
55060: NOT
55061: IFFALSE 55065
// exit ;
55063: GO 55094
// for i in tmp do
55065: LD_ADDR_VAR 0 1
55069: PUSH
55070: LD_VAR 0 2
55074: PUSH
55075: FOR_IN
55076: IFFALSE 55092
// SetBLevel ( i , 10 ) ;
55078: LD_VAR 0 1
55082: PPUSH
55083: LD_INT 10
55085: PPUSH
55086: CALL_OW 241
55090: GO 55075
55092: POP
55093: POP
// end ;
55094: PPOPN 2
55096: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55097: LD_EXP 15
55101: IFFALSE 55109
55103: PUSH
55104: LD_EXP 32
55108: AND
55109: IFFALSE 55220
55111: GO 55113
55113: DISABLE
55114: LD_INT 0
55116: PPUSH
55117: PPUSH
55118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55119: LD_ADDR_VAR 0 3
55123: PUSH
55124: LD_INT 22
55126: PUSH
55127: LD_OWVAR 2
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 25
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PPUSH
55150: CALL_OW 69
55154: ST_TO_ADDR
// if not tmp then
55155: LD_VAR 0 3
55159: NOT
55160: IFFALSE 55164
// exit ;
55162: GO 55220
// un := tmp [ rand ( 1 , tmp ) ] ;
55164: LD_ADDR_VAR 0 2
55168: PUSH
55169: LD_VAR 0 3
55173: PUSH
55174: LD_INT 1
55176: PPUSH
55177: LD_VAR 0 3
55181: PPUSH
55182: CALL_OW 12
55186: ARRAY
55187: ST_TO_ADDR
// if Crawls ( un ) then
55188: LD_VAR 0 2
55192: PPUSH
55193: CALL_OW 318
55197: IFFALSE 55208
// ComWalk ( un ) ;
55199: LD_VAR 0 2
55203: PPUSH
55204: CALL_OW 138
// SetClass ( un , class_sniper ) ;
55208: LD_VAR 0 2
55212: PPUSH
55213: LD_INT 5
55215: PPUSH
55216: CALL_OW 336
// end ;
55220: PPOPN 3
55222: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
55223: LD_EXP 15
55227: IFFALSE 55235
55229: PUSH
55230: LD_EXP 33
55234: AND
55235: IFFALSE 55247
55237: PUSH
55238: LD_OWVAR 67
55242: PUSH
55243: LD_INT 4
55245: LESS
55246: AND
55247: IFFALSE 55266
55249: GO 55251
55251: DISABLE
// begin Difficulty := Difficulty + 1 ;
55252: LD_ADDR_OWVAR 67
55256: PUSH
55257: LD_OWVAR 67
55261: PUSH
55262: LD_INT 1
55264: PLUS
55265: ST_TO_ADDR
// end ;
55266: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
55267: LD_EXP 15
55271: IFFALSE 55279
55273: PUSH
55274: LD_EXP 34
55278: AND
55279: IFFALSE 55382
55281: GO 55283
55283: DISABLE
55284: LD_INT 0
55286: PPUSH
// begin for i := 1 to 5 do
55287: LD_ADDR_VAR 0 1
55291: PUSH
55292: DOUBLE
55293: LD_INT 1
55295: DEC
55296: ST_TO_ADDR
55297: LD_INT 5
55299: PUSH
55300: FOR_TO
55301: IFFALSE 55380
// begin uc_nation := nation_nature ;
55303: LD_ADDR_OWVAR 21
55307: PUSH
55308: LD_INT 0
55310: ST_TO_ADDR
// uc_side := 0 ;
55311: LD_ADDR_OWVAR 20
55315: PUSH
55316: LD_INT 0
55318: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55319: LD_ADDR_OWVAR 29
55323: PUSH
55324: LD_INT 12
55326: PUSH
55327: LD_INT 12
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: ST_TO_ADDR
// hc_agressivity := 20 ;
55334: LD_ADDR_OWVAR 35
55338: PUSH
55339: LD_INT 20
55341: ST_TO_ADDR
// hc_class := class_tiger ;
55342: LD_ADDR_OWVAR 28
55346: PUSH
55347: LD_INT 14
55349: ST_TO_ADDR
// hc_gallery :=  ;
55350: LD_ADDR_OWVAR 33
55354: PUSH
55355: LD_STRING 
55357: ST_TO_ADDR
// hc_name :=  ;
55358: LD_ADDR_OWVAR 26
55362: PUSH
55363: LD_STRING 
55365: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
55366: CALL_OW 44
55370: PPUSH
55371: LD_INT 0
55373: PPUSH
55374: CALL_OW 51
// end ;
55378: GO 55300
55380: POP
55381: POP
// end ;
55382: PPOPN 1
55384: END
// every 0 0$1 trigger StreamModeActive and sBomb do
55385: LD_EXP 15
55389: IFFALSE 55397
55391: PUSH
55392: LD_EXP 35
55396: AND
55397: IFFALSE 55406
55399: GO 55401
55401: DISABLE
// StreamSibBomb ;
55402: CALL 55407 0 0
55406: END
// export function StreamSibBomb ; var i , x , y ; begin
55407: LD_INT 0
55409: PPUSH
55410: PPUSH
55411: PPUSH
55412: PPUSH
// result := false ;
55413: LD_ADDR_VAR 0 1
55417: PUSH
55418: LD_INT 0
55420: ST_TO_ADDR
// for i := 1 to 16 do
55421: LD_ADDR_VAR 0 2
55425: PUSH
55426: DOUBLE
55427: LD_INT 1
55429: DEC
55430: ST_TO_ADDR
55431: LD_INT 16
55433: PUSH
55434: FOR_TO
55435: IFFALSE 55634
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55437: LD_ADDR_VAR 0 3
55441: PUSH
55442: LD_INT 10
55444: PUSH
55445: LD_INT 20
55447: PUSH
55448: LD_INT 30
55450: PUSH
55451: LD_INT 40
55453: PUSH
55454: LD_INT 50
55456: PUSH
55457: LD_INT 60
55459: PUSH
55460: LD_INT 70
55462: PUSH
55463: LD_INT 80
55465: PUSH
55466: LD_INT 90
55468: PUSH
55469: LD_INT 100
55471: PUSH
55472: LD_INT 110
55474: PUSH
55475: LD_INT 120
55477: PUSH
55478: LD_INT 130
55480: PUSH
55481: LD_INT 140
55483: PUSH
55484: LD_INT 150
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: PPUSH
55507: LD_INT 15
55509: PPUSH
55510: CALL_OW 12
55514: ARRAY
55515: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55516: LD_ADDR_VAR 0 4
55520: PUSH
55521: LD_INT 10
55523: PUSH
55524: LD_INT 20
55526: PUSH
55527: LD_INT 30
55529: PUSH
55530: LD_INT 40
55532: PUSH
55533: LD_INT 50
55535: PUSH
55536: LD_INT 60
55538: PUSH
55539: LD_INT 70
55541: PUSH
55542: LD_INT 80
55544: PUSH
55545: LD_INT 90
55547: PUSH
55548: LD_INT 100
55550: PUSH
55551: LD_INT 110
55553: PUSH
55554: LD_INT 120
55556: PUSH
55557: LD_INT 130
55559: PUSH
55560: LD_INT 140
55562: PUSH
55563: LD_INT 150
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: PPUSH
55586: LD_INT 15
55588: PPUSH
55589: CALL_OW 12
55593: ARRAY
55594: ST_TO_ADDR
// if ValidHex ( x , y ) then
55595: LD_VAR 0 3
55599: PPUSH
55600: LD_VAR 0 4
55604: PPUSH
55605: CALL_OW 488
55609: IFFALSE 55632
// begin result := [ x , y ] ;
55611: LD_ADDR_VAR 0 1
55615: PUSH
55616: LD_VAR 0 3
55620: PUSH
55621: LD_VAR 0 4
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: ST_TO_ADDR
// break ;
55630: GO 55634
// end ; end ;
55632: GO 55434
55634: POP
55635: POP
// if result then
55636: LD_VAR 0 1
55640: IFFALSE 55700
// begin ToLua ( playSibBomb() ) ;
55642: LD_STRING playSibBomb()
55644: PPUSH
55645: CALL_OW 559
// wait ( 0 0$14 ) ;
55649: LD_INT 490
55651: PPUSH
55652: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
55656: LD_VAR 0 1
55660: PUSH
55661: LD_INT 1
55663: ARRAY
55664: PPUSH
55665: LD_VAR 0 1
55669: PUSH
55670: LD_INT 2
55672: ARRAY
55673: PPUSH
55674: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
55678: LD_VAR 0 1
55682: PUSH
55683: LD_INT 1
55685: ARRAY
55686: PPUSH
55687: LD_VAR 0 1
55691: PUSH
55692: LD_INT 2
55694: ARRAY
55695: PPUSH
55696: CALL_OW 429
// end ; end ;
55700: LD_VAR 0 1
55704: RET
// every 0 0$1 trigger StreamModeActive and sReset do
55705: LD_EXP 15
55709: IFFALSE 55717
55711: PUSH
55712: LD_EXP 37
55716: AND
55717: IFFALSE 55729
55719: GO 55721
55721: DISABLE
// YouLost (  ) ;
55722: LD_STRING 
55724: PPUSH
55725: CALL_OW 104
55729: END
// every 0 0$1 trigger StreamModeActive and sFog do
55730: LD_EXP 15
55734: IFFALSE 55742
55736: PUSH
55737: LD_EXP 36
55741: AND
55742: IFFALSE 55756
55744: GO 55746
55746: DISABLE
// FogOff ( your_side ) ;
55747: LD_OWVAR 2
55751: PPUSH
55752: CALL_OW 344
55756: END
// every 0 0$1 trigger StreamModeActive and sSun do
55757: LD_EXP 15
55761: IFFALSE 55769
55763: PUSH
55764: LD_EXP 38
55768: AND
55769: IFFALSE 55797
55771: GO 55773
55773: DISABLE
// begin solar_recharge_percent := 0 ;
55774: LD_ADDR_OWVAR 79
55778: PUSH
55779: LD_INT 0
55781: ST_TO_ADDR
// wait ( 5 5$00 ) ;
55782: LD_INT 10500
55784: PPUSH
55785: CALL_OW 67
// solar_recharge_percent := 100 ;
55789: LD_ADDR_OWVAR 79
55793: PUSH
55794: LD_INT 100
55796: ST_TO_ADDR
// end ;
55797: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
55798: LD_EXP 15
55802: IFFALSE 55810
55804: PUSH
55805: LD_EXP 39
55809: AND
55810: IFFALSE 56049
55812: GO 55814
55814: DISABLE
55815: LD_INT 0
55817: PPUSH
55818: PPUSH
55819: PPUSH
// begin tmp := [ ] ;
55820: LD_ADDR_VAR 0 3
55824: PUSH
55825: EMPTY
55826: ST_TO_ADDR
// for i := 1 to 6 do
55827: LD_ADDR_VAR 0 1
55831: PUSH
55832: DOUBLE
55833: LD_INT 1
55835: DEC
55836: ST_TO_ADDR
55837: LD_INT 6
55839: PUSH
55840: FOR_TO
55841: IFFALSE 55946
// begin uc_nation := nation_nature ;
55843: LD_ADDR_OWVAR 21
55847: PUSH
55848: LD_INT 0
55850: ST_TO_ADDR
// uc_side := 0 ;
55851: LD_ADDR_OWVAR 20
55855: PUSH
55856: LD_INT 0
55858: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55859: LD_ADDR_OWVAR 29
55863: PUSH
55864: LD_INT 12
55866: PUSH
55867: LD_INT 12
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: ST_TO_ADDR
// hc_agressivity := 20 ;
55874: LD_ADDR_OWVAR 35
55878: PUSH
55879: LD_INT 20
55881: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
55882: LD_ADDR_OWVAR 28
55886: PUSH
55887: LD_INT 17
55889: ST_TO_ADDR
// hc_gallery :=  ;
55890: LD_ADDR_OWVAR 33
55894: PUSH
55895: LD_STRING 
55897: ST_TO_ADDR
// hc_name :=  ;
55898: LD_ADDR_OWVAR 26
55902: PUSH
55903: LD_STRING 
55905: ST_TO_ADDR
// un := CreateHuman ;
55906: LD_ADDR_VAR 0 2
55910: PUSH
55911: CALL_OW 44
55915: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
55916: LD_VAR 0 2
55920: PPUSH
55921: LD_INT 1
55923: PPUSH
55924: CALL_OW 51
// tmp := tmp ^ un ;
55928: LD_ADDR_VAR 0 3
55932: PUSH
55933: LD_VAR 0 3
55937: PUSH
55938: LD_VAR 0 2
55942: ADD
55943: ST_TO_ADDR
// end ;
55944: GO 55840
55946: POP
55947: POP
// repeat wait ( 0 0$1 ) ;
55948: LD_INT 35
55950: PPUSH
55951: CALL_OW 67
// for un in tmp do
55955: LD_ADDR_VAR 0 2
55959: PUSH
55960: LD_VAR 0 3
55964: PUSH
55965: FOR_IN
55966: IFFALSE 56040
// begin if IsDead ( un ) then
55968: LD_VAR 0 2
55972: PPUSH
55973: CALL_OW 301
55977: IFFALSE 55997
// begin tmp := tmp diff un ;
55979: LD_ADDR_VAR 0 3
55983: PUSH
55984: LD_VAR 0 3
55988: PUSH
55989: LD_VAR 0 2
55993: DIFF
55994: ST_TO_ADDR
// continue ;
55995: GO 55965
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
55997: LD_VAR 0 2
56001: PPUSH
56002: LD_INT 3
56004: PUSH
56005: LD_INT 22
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PPUSH
56019: CALL_OW 69
56023: PPUSH
56024: LD_VAR 0 2
56028: PPUSH
56029: CALL_OW 74
56033: PPUSH
56034: CALL_OW 115
// end ;
56038: GO 55965
56040: POP
56041: POP
// until not tmp ;
56042: LD_VAR 0 3
56046: NOT
56047: IFFALSE 55948
// end ;
56049: PPOPN 3
56051: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56052: LD_EXP 15
56056: IFFALSE 56064
56058: PUSH
56059: LD_EXP 40
56063: AND
56064: IFFALSE 56118
56066: GO 56068
56068: DISABLE
// begin ToLua ( displayTroll(); ) ;
56069: LD_STRING displayTroll();
56071: PPUSH
56072: CALL_OW 559
// wait ( 3 3$00 ) ;
56076: LD_INT 6300
56078: PPUSH
56079: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56083: LD_STRING hideTroll();
56085: PPUSH
56086: CALL_OW 559
// wait ( 1 1$00 ) ;
56090: LD_INT 2100
56092: PPUSH
56093: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56097: LD_STRING displayTroll();
56099: PPUSH
56100: CALL_OW 559
// wait ( 1 1$00 ) ;
56104: LD_INT 2100
56106: PPUSH
56107: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56111: LD_STRING hideTroll();
56113: PPUSH
56114: CALL_OW 559
// end ;
56118: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56119: LD_EXP 15
56123: IFFALSE 56131
56125: PUSH
56126: LD_EXP 41
56130: AND
56131: IFFALSE 56194
56133: GO 56135
56135: DISABLE
56136: LD_INT 0
56138: PPUSH
// begin p := 0 ;
56139: LD_ADDR_VAR 0 1
56143: PUSH
56144: LD_INT 0
56146: ST_TO_ADDR
// repeat game_speed := 1 ;
56147: LD_ADDR_OWVAR 65
56151: PUSH
56152: LD_INT 1
56154: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56155: LD_INT 35
56157: PPUSH
56158: CALL_OW 67
// p := p + 1 ;
56162: LD_ADDR_VAR 0 1
56166: PUSH
56167: LD_VAR 0 1
56171: PUSH
56172: LD_INT 1
56174: PLUS
56175: ST_TO_ADDR
// until p >= 60 ;
56176: LD_VAR 0 1
56180: PUSH
56181: LD_INT 60
56183: GREATEREQUAL
56184: IFFALSE 56147
// game_speed := 4 ;
56186: LD_ADDR_OWVAR 65
56190: PUSH
56191: LD_INT 4
56193: ST_TO_ADDR
// end ;
56194: PPOPN 1
56196: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
56197: LD_EXP 15
56201: IFFALSE 56209
56203: PUSH
56204: LD_EXP 42
56208: AND
56209: IFFALSE 56355
56211: GO 56213
56213: DISABLE
56214: LD_INT 0
56216: PPUSH
56217: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56218: LD_ADDR_VAR 0 1
56222: PUSH
56223: LD_INT 22
56225: PUSH
56226: LD_OWVAR 2
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: LD_INT 30
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 30
56250: PUSH
56251: LD_INT 1
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: LIST
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PPUSH
56267: CALL_OW 69
56271: ST_TO_ADDR
// if not depot then
56272: LD_VAR 0 1
56276: NOT
56277: IFFALSE 56281
// exit ;
56279: GO 56355
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
56281: LD_ADDR_VAR 0 2
56285: PUSH
56286: LD_VAR 0 1
56290: PUSH
56291: LD_INT 1
56293: PPUSH
56294: LD_VAR 0 1
56298: PPUSH
56299: CALL_OW 12
56303: ARRAY
56304: PPUSH
56305: CALL_OW 274
56309: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
56310: LD_VAR 0 2
56314: PPUSH
56315: LD_INT 1
56317: PPUSH
56318: LD_INT 0
56320: PPUSH
56321: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
56325: LD_VAR 0 2
56329: PPUSH
56330: LD_INT 2
56332: PPUSH
56333: LD_INT 0
56335: PPUSH
56336: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
56340: LD_VAR 0 2
56344: PPUSH
56345: LD_INT 3
56347: PPUSH
56348: LD_INT 0
56350: PPUSH
56351: CALL_OW 277
// end ;
56355: PPOPN 2
56357: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
56358: LD_EXP 15
56362: IFFALSE 56370
56364: PUSH
56365: LD_EXP 43
56369: AND
56370: IFFALSE 56467
56372: GO 56374
56374: DISABLE
56375: LD_INT 0
56377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56378: LD_ADDR_VAR 0 1
56382: PUSH
56383: LD_INT 22
56385: PUSH
56386: LD_OWVAR 2
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 21
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 3
56407: PUSH
56408: LD_INT 23
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: LIST
56426: PPUSH
56427: CALL_OW 69
56431: ST_TO_ADDR
// if not tmp then
56432: LD_VAR 0 1
56436: NOT
56437: IFFALSE 56441
// exit ;
56439: GO 56467
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
56441: LD_VAR 0 1
56445: PUSH
56446: LD_INT 1
56448: PPUSH
56449: LD_VAR 0 1
56453: PPUSH
56454: CALL_OW 12
56458: ARRAY
56459: PPUSH
56460: LD_INT 200
56462: PPUSH
56463: CALL_OW 234
// end ;
56467: PPOPN 1
56469: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
56470: LD_EXP 15
56474: IFFALSE 56482
56476: PUSH
56477: LD_EXP 44
56481: AND
56482: IFFALSE 56561
56484: GO 56486
56486: DISABLE
56487: LD_INT 0
56489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
56490: LD_ADDR_VAR 0 1
56494: PUSH
56495: LD_INT 22
56497: PUSH
56498: LD_OWVAR 2
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 21
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PPUSH
56521: CALL_OW 69
56525: ST_TO_ADDR
// if not tmp then
56526: LD_VAR 0 1
56530: NOT
56531: IFFALSE 56535
// exit ;
56533: GO 56561
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
56535: LD_VAR 0 1
56539: PUSH
56540: LD_INT 1
56542: PPUSH
56543: LD_VAR 0 1
56547: PPUSH
56548: CALL_OW 12
56552: ARRAY
56553: PPUSH
56554: LD_INT 60
56556: PPUSH
56557: CALL_OW 234
// end ;
56561: PPOPN 1
56563: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
56564: LD_EXP 15
56568: IFFALSE 56576
56570: PUSH
56571: LD_EXP 45
56575: AND
56576: IFFALSE 56675
56578: GO 56580
56580: DISABLE
56581: LD_INT 0
56583: PPUSH
56584: PPUSH
// begin enable ;
56585: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
56586: LD_ADDR_VAR 0 1
56590: PUSH
56591: LD_INT 22
56593: PUSH
56594: LD_OWVAR 2
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 61
56605: PUSH
56606: EMPTY
56607: LIST
56608: PUSH
56609: LD_INT 33
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: LIST
56623: PPUSH
56624: CALL_OW 69
56628: ST_TO_ADDR
// if not tmp then
56629: LD_VAR 0 1
56633: NOT
56634: IFFALSE 56638
// exit ;
56636: GO 56675
// for i in tmp do
56638: LD_ADDR_VAR 0 2
56642: PUSH
56643: LD_VAR 0 1
56647: PUSH
56648: FOR_IN
56649: IFFALSE 56673
// if IsControledBy ( i ) then
56651: LD_VAR 0 2
56655: PPUSH
56656: CALL_OW 312
56660: IFFALSE 56671
// ComUnlink ( i ) ;
56662: LD_VAR 0 2
56666: PPUSH
56667: CALL_OW 136
56671: GO 56648
56673: POP
56674: POP
// end ;
56675: PPOPN 2
56677: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
56678: LD_EXP 15
56682: IFFALSE 56690
56684: PUSH
56685: LD_EXP 46
56689: AND
56690: IFFALSE 56830
56692: GO 56694
56694: DISABLE
56695: LD_INT 0
56697: PPUSH
56698: PPUSH
// begin ToLua ( displayPowell(); ) ;
56699: LD_STRING displayPowell();
56701: PPUSH
56702: CALL_OW 559
// uc_side := 0 ;
56706: LD_ADDR_OWVAR 20
56710: PUSH
56711: LD_INT 0
56713: ST_TO_ADDR
// uc_nation := 2 ;
56714: LD_ADDR_OWVAR 21
56718: PUSH
56719: LD_INT 2
56721: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
56722: LD_ADDR_OWVAR 37
56726: PUSH
56727: LD_INT 14
56729: ST_TO_ADDR
// vc_engine := engine_siberite ;
56730: LD_ADDR_OWVAR 39
56734: PUSH
56735: LD_INT 3
56737: ST_TO_ADDR
// vc_control := control_apeman ;
56738: LD_ADDR_OWVAR 38
56742: PUSH
56743: LD_INT 5
56745: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
56746: LD_ADDR_OWVAR 40
56750: PUSH
56751: LD_INT 29
56753: ST_TO_ADDR
// un := CreateVehicle ;
56754: LD_ADDR_VAR 0 2
56758: PUSH
56759: CALL_OW 45
56763: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56764: LD_VAR 0 2
56768: PPUSH
56769: LD_INT 1
56771: PPUSH
56772: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56776: LD_INT 35
56778: PPUSH
56779: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56783: LD_VAR 0 2
56787: PPUSH
56788: LD_INT 22
56790: PUSH
56791: LD_OWVAR 2
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PPUSH
56800: CALL_OW 69
56804: PPUSH
56805: LD_VAR 0 2
56809: PPUSH
56810: CALL_OW 74
56814: PPUSH
56815: CALL_OW 115
// until IsDead ( un ) ;
56819: LD_VAR 0 2
56823: PPUSH
56824: CALL_OW 301
56828: IFFALSE 56776
// end ;
56830: PPOPN 2
56832: END
// every 0 0$1 trigger StreamModeActive and sStu do
56833: LD_EXP 15
56837: IFFALSE 56845
56839: PUSH
56840: LD_EXP 54
56844: AND
56845: IFFALSE 56861
56847: GO 56849
56849: DISABLE
// begin ToLua ( displayStucuk(); ) ;
56850: LD_STRING displayStucuk();
56852: PPUSH
56853: CALL_OW 559
// ResetFog ;
56857: CALL_OW 335
// end ;
56861: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
56862: LD_EXP 15
56866: IFFALSE 56874
56868: PUSH
56869: LD_EXP 47
56873: AND
56874: IFFALSE 57015
56876: GO 56878
56878: DISABLE
56879: LD_INT 0
56881: PPUSH
56882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56883: LD_ADDR_VAR 0 2
56887: PUSH
56888: LD_INT 22
56890: PUSH
56891: LD_OWVAR 2
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 21
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PPUSH
56914: CALL_OW 69
56918: ST_TO_ADDR
// if not tmp then
56919: LD_VAR 0 2
56923: NOT
56924: IFFALSE 56928
// exit ;
56926: GO 57015
// un := tmp [ rand ( 1 , tmp ) ] ;
56928: LD_ADDR_VAR 0 1
56932: PUSH
56933: LD_VAR 0 2
56937: PUSH
56938: LD_INT 1
56940: PPUSH
56941: LD_VAR 0 2
56945: PPUSH
56946: CALL_OW 12
56950: ARRAY
56951: ST_TO_ADDR
// SetSide ( un , 0 ) ;
56952: LD_VAR 0 1
56956: PPUSH
56957: LD_INT 0
56959: PPUSH
56960: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
56964: LD_VAR 0 1
56968: PPUSH
56969: LD_OWVAR 3
56973: PUSH
56974: LD_VAR 0 1
56978: DIFF
56979: PPUSH
56980: LD_VAR 0 1
56984: PPUSH
56985: CALL_OW 74
56989: PPUSH
56990: CALL_OW 115
// wait ( 0 0$20 ) ;
56994: LD_INT 700
56996: PPUSH
56997: CALL_OW 67
// SetSide ( un , your_side ) ;
57001: LD_VAR 0 1
57005: PPUSH
57006: LD_OWVAR 2
57010: PPUSH
57011: CALL_OW 235
// end ;
57015: PPOPN 2
57017: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
57018: LD_EXP 15
57022: IFFALSE 57030
57024: PUSH
57025: LD_EXP 48
57029: AND
57030: IFFALSE 57136
57032: GO 57034
57034: DISABLE
57035: LD_INT 0
57037: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57038: LD_ADDR_VAR 0 1
57042: PUSH
57043: LD_INT 22
57045: PUSH
57046: LD_OWVAR 2
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 2
57057: PUSH
57058: LD_INT 30
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 30
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: LIST
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PPUSH
57087: CALL_OW 69
57091: ST_TO_ADDR
// if not depot then
57092: LD_VAR 0 1
57096: NOT
57097: IFFALSE 57101
// exit ;
57099: GO 57136
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57101: LD_VAR 0 1
57105: PUSH
57106: LD_INT 1
57108: ARRAY
57109: PPUSH
57110: CALL_OW 250
57114: PPUSH
57115: LD_VAR 0 1
57119: PUSH
57120: LD_INT 1
57122: ARRAY
57123: PPUSH
57124: CALL_OW 251
57128: PPUSH
57129: LD_INT 70
57131: PPUSH
57132: CALL_OW 495
// end ;
57136: PPOPN 1
57138: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
57139: LD_EXP 15
57143: IFFALSE 57151
57145: PUSH
57146: LD_EXP 49
57150: AND
57151: IFFALSE 57362
57153: GO 57155
57155: DISABLE
57156: LD_INT 0
57158: PPUSH
57159: PPUSH
57160: PPUSH
57161: PPUSH
57162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57163: LD_ADDR_VAR 0 5
57167: PUSH
57168: LD_INT 22
57170: PUSH
57171: LD_OWVAR 2
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 21
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PPUSH
57194: CALL_OW 69
57198: ST_TO_ADDR
// if not tmp then
57199: LD_VAR 0 5
57203: NOT
57204: IFFALSE 57208
// exit ;
57206: GO 57362
// for i in tmp do
57208: LD_ADDR_VAR 0 1
57212: PUSH
57213: LD_VAR 0 5
57217: PUSH
57218: FOR_IN
57219: IFFALSE 57360
// begin d := rand ( 0 , 5 ) ;
57221: LD_ADDR_VAR 0 4
57225: PUSH
57226: LD_INT 0
57228: PPUSH
57229: LD_INT 5
57231: PPUSH
57232: CALL_OW 12
57236: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
57237: LD_ADDR_VAR 0 2
57241: PUSH
57242: LD_VAR 0 1
57246: PPUSH
57247: CALL_OW 250
57251: PPUSH
57252: LD_VAR 0 4
57256: PPUSH
57257: LD_INT 3
57259: PPUSH
57260: LD_INT 12
57262: PPUSH
57263: CALL_OW 12
57267: PPUSH
57268: CALL_OW 272
57272: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
57273: LD_ADDR_VAR 0 3
57277: PUSH
57278: LD_VAR 0 1
57282: PPUSH
57283: CALL_OW 251
57287: PPUSH
57288: LD_VAR 0 4
57292: PPUSH
57293: LD_INT 3
57295: PPUSH
57296: LD_INT 12
57298: PPUSH
57299: CALL_OW 12
57303: PPUSH
57304: CALL_OW 273
57308: ST_TO_ADDR
// if ValidHex ( x , y ) then
57309: LD_VAR 0 2
57313: PPUSH
57314: LD_VAR 0 3
57318: PPUSH
57319: CALL_OW 488
57323: IFFALSE 57358
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
57325: LD_VAR 0 1
57329: PPUSH
57330: LD_VAR 0 2
57334: PPUSH
57335: LD_VAR 0 3
57339: PPUSH
57340: LD_INT 3
57342: PPUSH
57343: LD_INT 6
57345: PPUSH
57346: CALL_OW 12
57350: PPUSH
57351: LD_INT 1
57353: PPUSH
57354: CALL_OW 483
// end ;
57358: GO 57218
57360: POP
57361: POP
// end ;
57362: PPOPN 5
57364: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
57365: LD_EXP 15
57369: IFFALSE 57377
57371: PUSH
57372: LD_EXP 50
57376: AND
57377: IFFALSE 57471
57379: GO 57381
57381: DISABLE
57382: LD_INT 0
57384: PPUSH
57385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
57386: LD_ADDR_VAR 0 2
57390: PUSH
57391: LD_INT 22
57393: PUSH
57394: LD_OWVAR 2
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 32
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 21
57415: PUSH
57416: LD_INT 2
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: LIST
57427: PPUSH
57428: CALL_OW 69
57432: ST_TO_ADDR
// if not tmp then
57433: LD_VAR 0 2
57437: NOT
57438: IFFALSE 57442
// exit ;
57440: GO 57471
// for i in tmp do
57442: LD_ADDR_VAR 0 1
57446: PUSH
57447: LD_VAR 0 2
57451: PUSH
57452: FOR_IN
57453: IFFALSE 57469
// SetFuel ( i , 0 ) ;
57455: LD_VAR 0 1
57459: PPUSH
57460: LD_INT 0
57462: PPUSH
57463: CALL_OW 240
57467: GO 57452
57469: POP
57470: POP
// end ;
57471: PPOPN 2
57473: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
57474: LD_EXP 15
57478: IFFALSE 57486
57480: PUSH
57481: LD_EXP 51
57485: AND
57486: IFFALSE 57552
57488: GO 57490
57490: DISABLE
57491: LD_INT 0
57493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57494: LD_ADDR_VAR 0 1
57498: PUSH
57499: LD_INT 22
57501: PUSH
57502: LD_OWVAR 2
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 30
57513: PUSH
57514: LD_INT 29
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PPUSH
57525: CALL_OW 69
57529: ST_TO_ADDR
// if not tmp then
57530: LD_VAR 0 1
57534: NOT
57535: IFFALSE 57539
// exit ;
57537: GO 57552
// DestroyUnit ( tmp [ 1 ] ) ;
57539: LD_VAR 0 1
57543: PUSH
57544: LD_INT 1
57546: ARRAY
57547: PPUSH
57548: CALL_OW 65
// end ;
57552: PPOPN 1
57554: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
57555: LD_EXP 15
57559: IFFALSE 57567
57561: PUSH
57562: LD_EXP 53
57566: AND
57567: IFFALSE 57696
57569: GO 57571
57571: DISABLE
57572: LD_INT 0
57574: PPUSH
// begin uc_side := 0 ;
57575: LD_ADDR_OWVAR 20
57579: PUSH
57580: LD_INT 0
57582: ST_TO_ADDR
// uc_nation := nation_arabian ;
57583: LD_ADDR_OWVAR 21
57587: PUSH
57588: LD_INT 2
57590: ST_TO_ADDR
// hc_gallery :=  ;
57591: LD_ADDR_OWVAR 33
57595: PUSH
57596: LD_STRING 
57598: ST_TO_ADDR
// hc_name :=  ;
57599: LD_ADDR_OWVAR 26
57603: PUSH
57604: LD_STRING 
57606: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
57607: LD_INT 1
57609: PPUSH
57610: LD_INT 11
57612: PPUSH
57613: LD_INT 10
57615: PPUSH
57616: CALL_OW 380
// un := CreateHuman ;
57620: LD_ADDR_VAR 0 1
57624: PUSH
57625: CALL_OW 44
57629: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57630: LD_VAR 0 1
57634: PPUSH
57635: LD_INT 1
57637: PPUSH
57638: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57642: LD_INT 35
57644: PPUSH
57645: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57649: LD_VAR 0 1
57653: PPUSH
57654: LD_INT 22
57656: PUSH
57657: LD_OWVAR 2
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PPUSH
57666: CALL_OW 69
57670: PPUSH
57671: LD_VAR 0 1
57675: PPUSH
57676: CALL_OW 74
57680: PPUSH
57681: CALL_OW 115
// until IsDead ( un ) ;
57685: LD_VAR 0 1
57689: PPUSH
57690: CALL_OW 301
57694: IFFALSE 57642
// end ;
57696: PPOPN 1
57698: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
57699: LD_EXP 15
57703: IFFALSE 57711
57705: PUSH
57706: LD_EXP 55
57710: AND
57711: IFFALSE 57723
57713: GO 57715
57715: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
57716: LD_STRING earthquake(getX(game), 0, 32)
57718: PPUSH
57719: CALL_OW 559
57723: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
57724: LD_EXP 15
57728: IFFALSE 57736
57730: PUSH
57731: LD_EXP 56
57735: AND
57736: IFFALSE 57827
57738: GO 57740
57740: DISABLE
57741: LD_INT 0
57743: PPUSH
// begin enable ;
57744: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
57745: LD_ADDR_VAR 0 1
57749: PUSH
57750: LD_INT 22
57752: PUSH
57753: LD_OWVAR 2
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 21
57764: PUSH
57765: LD_INT 2
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 33
57774: PUSH
57775: LD_INT 3
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: PPUSH
57787: CALL_OW 69
57791: ST_TO_ADDR
// if not tmp then
57792: LD_VAR 0 1
57796: NOT
57797: IFFALSE 57801
// exit ;
57799: GO 57827
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57801: LD_VAR 0 1
57805: PUSH
57806: LD_INT 1
57808: PPUSH
57809: LD_VAR 0 1
57813: PPUSH
57814: CALL_OW 12
57818: ARRAY
57819: PPUSH
57820: LD_INT 1
57822: PPUSH
57823: CALL_OW 234
// end ;
57827: PPOPN 1
57829: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
57830: LD_EXP 15
57834: IFFALSE 57842
57836: PUSH
57837: LD_EXP 57
57841: AND
57842: IFFALSE 57983
57844: GO 57846
57846: DISABLE
57847: LD_INT 0
57849: PPUSH
57850: PPUSH
57851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57852: LD_ADDR_VAR 0 3
57856: PUSH
57857: LD_INT 22
57859: PUSH
57860: LD_OWVAR 2
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 25
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PPUSH
57883: CALL_OW 69
57887: ST_TO_ADDR
// if not tmp then
57888: LD_VAR 0 3
57892: NOT
57893: IFFALSE 57897
// exit ;
57895: GO 57983
// un := tmp [ rand ( 1 , tmp ) ] ;
57897: LD_ADDR_VAR 0 2
57901: PUSH
57902: LD_VAR 0 3
57906: PUSH
57907: LD_INT 1
57909: PPUSH
57910: LD_VAR 0 3
57914: PPUSH
57915: CALL_OW 12
57919: ARRAY
57920: ST_TO_ADDR
// if Crawls ( un ) then
57921: LD_VAR 0 2
57925: PPUSH
57926: CALL_OW 318
57930: IFFALSE 57941
// ComWalk ( un ) ;
57932: LD_VAR 0 2
57936: PPUSH
57937: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
57941: LD_VAR 0 2
57945: PPUSH
57946: LD_INT 9
57948: PPUSH
57949: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
57953: LD_INT 28
57955: PPUSH
57956: LD_OWVAR 2
57960: PPUSH
57961: LD_INT 2
57963: PPUSH
57964: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
57968: LD_INT 29
57970: PPUSH
57971: LD_OWVAR 2
57975: PPUSH
57976: LD_INT 2
57978: PPUSH
57979: CALL_OW 322
// end ;
57983: PPOPN 3
57985: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
57986: LD_EXP 15
57990: IFFALSE 57998
57992: PUSH
57993: LD_EXP 58
57997: AND
57998: IFFALSE 58109
58000: GO 58002
58002: DISABLE
58003: LD_INT 0
58005: PPUSH
58006: PPUSH
58007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58008: LD_ADDR_VAR 0 3
58012: PUSH
58013: LD_INT 22
58015: PUSH
58016: LD_OWVAR 2
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 25
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PPUSH
58039: CALL_OW 69
58043: ST_TO_ADDR
// if not tmp then
58044: LD_VAR 0 3
58048: NOT
58049: IFFALSE 58053
// exit ;
58051: GO 58109
// un := tmp [ rand ( 1 , tmp ) ] ;
58053: LD_ADDR_VAR 0 2
58057: PUSH
58058: LD_VAR 0 3
58062: PUSH
58063: LD_INT 1
58065: PPUSH
58066: LD_VAR 0 3
58070: PPUSH
58071: CALL_OW 12
58075: ARRAY
58076: ST_TO_ADDR
// if Crawls ( un ) then
58077: LD_VAR 0 2
58081: PPUSH
58082: CALL_OW 318
58086: IFFALSE 58097
// ComWalk ( un ) ;
58088: LD_VAR 0 2
58092: PPUSH
58093: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58097: LD_VAR 0 2
58101: PPUSH
58102: LD_INT 8
58104: PPUSH
58105: CALL_OW 336
// end ;
58109: PPOPN 3
58111: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58112: LD_EXP 15
58116: IFFALSE 58124
58118: PUSH
58119: LD_EXP 59
58123: AND
58124: IFFALSE 58268
58126: GO 58128
58128: DISABLE
58129: LD_INT 0
58131: PPUSH
58132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58133: LD_ADDR_VAR 0 2
58137: PUSH
58138: LD_INT 22
58140: PUSH
58141: LD_OWVAR 2
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 21
58152: PUSH
58153: LD_INT 2
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 2
58162: PUSH
58163: LD_INT 34
58165: PUSH
58166: LD_INT 12
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 34
58175: PUSH
58176: LD_INT 51
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 34
58185: PUSH
58186: LD_INT 32
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: LIST
58203: PPUSH
58204: CALL_OW 69
58208: ST_TO_ADDR
// if not tmp then
58209: LD_VAR 0 2
58213: NOT
58214: IFFALSE 58218
// exit ;
58216: GO 58268
// for i in tmp do
58218: LD_ADDR_VAR 0 1
58222: PUSH
58223: LD_VAR 0 2
58227: PUSH
58228: FOR_IN
58229: IFFALSE 58266
// if GetCargo ( i , mat_artifact ) = 0 then
58231: LD_VAR 0 1
58235: PPUSH
58236: LD_INT 4
58238: PPUSH
58239: CALL_OW 289
58243: PUSH
58244: LD_INT 0
58246: EQUAL
58247: IFFALSE 58264
// SetCargo ( i , mat_siberit , 100 ) ;
58249: LD_VAR 0 1
58253: PPUSH
58254: LD_INT 3
58256: PPUSH
58257: LD_INT 100
58259: PPUSH
58260: CALL_OW 290
58264: GO 58228
58266: POP
58267: POP
// end ;
58268: PPOPN 2
58270: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
58271: LD_EXP 15
58275: IFFALSE 58283
58277: PUSH
58278: LD_EXP 60
58282: AND
58283: IFFALSE 58466
58285: GO 58287
58287: DISABLE
58288: LD_INT 0
58290: PPUSH
58291: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58292: LD_ADDR_VAR 0 2
58296: PUSH
58297: LD_INT 22
58299: PUSH
58300: LD_OWVAR 2
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PPUSH
58309: CALL_OW 69
58313: ST_TO_ADDR
// if not tmp then
58314: LD_VAR 0 2
58318: NOT
58319: IFFALSE 58323
// exit ;
58321: GO 58466
// for i := 1 to 2 do
58323: LD_ADDR_VAR 0 1
58327: PUSH
58328: DOUBLE
58329: LD_INT 1
58331: DEC
58332: ST_TO_ADDR
58333: LD_INT 2
58335: PUSH
58336: FOR_TO
58337: IFFALSE 58464
// begin uc_side := your_side ;
58339: LD_ADDR_OWVAR 20
58343: PUSH
58344: LD_OWVAR 2
58348: ST_TO_ADDR
// uc_nation := nation_american ;
58349: LD_ADDR_OWVAR 21
58353: PUSH
58354: LD_INT 1
58356: ST_TO_ADDR
// vc_chassis := us_morphling ;
58357: LD_ADDR_OWVAR 37
58361: PUSH
58362: LD_INT 5
58364: ST_TO_ADDR
// vc_engine := engine_siberite ;
58365: LD_ADDR_OWVAR 39
58369: PUSH
58370: LD_INT 3
58372: ST_TO_ADDR
// vc_control := control_computer ;
58373: LD_ADDR_OWVAR 38
58377: PUSH
58378: LD_INT 3
58380: ST_TO_ADDR
// vc_weapon := us_double_laser ;
58381: LD_ADDR_OWVAR 40
58385: PUSH
58386: LD_INT 10
58388: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
58389: LD_VAR 0 2
58393: PUSH
58394: LD_INT 1
58396: ARRAY
58397: PPUSH
58398: CALL_OW 310
58402: NOT
58403: IFFALSE 58450
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
58405: CALL_OW 45
58409: PPUSH
58410: LD_VAR 0 2
58414: PUSH
58415: LD_INT 1
58417: ARRAY
58418: PPUSH
58419: CALL_OW 250
58423: PPUSH
58424: LD_VAR 0 2
58428: PUSH
58429: LD_INT 1
58431: ARRAY
58432: PPUSH
58433: CALL_OW 251
58437: PPUSH
58438: LD_INT 12
58440: PPUSH
58441: LD_INT 1
58443: PPUSH
58444: CALL_OW 50
58448: GO 58462
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
58450: CALL_OW 45
58454: PPUSH
58455: LD_INT 1
58457: PPUSH
58458: CALL_OW 51
// end ;
58462: GO 58336
58464: POP
58465: POP
// end ;
58466: PPOPN 2
58468: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
58469: LD_EXP 15
58473: IFFALSE 58481
58475: PUSH
58476: LD_EXP 61
58480: AND
58481: IFFALSE 58703
58483: GO 58485
58485: DISABLE
58486: LD_INT 0
58488: PPUSH
58489: PPUSH
58490: PPUSH
58491: PPUSH
58492: PPUSH
58493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58494: LD_ADDR_VAR 0 6
58498: PUSH
58499: LD_INT 22
58501: PUSH
58502: LD_OWVAR 2
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 21
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 3
58523: PUSH
58524: LD_INT 23
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: LIST
58542: PPUSH
58543: CALL_OW 69
58547: ST_TO_ADDR
// if not tmp then
58548: LD_VAR 0 6
58552: NOT
58553: IFFALSE 58557
// exit ;
58555: GO 58703
// s1 := rand ( 1 , 4 ) ;
58557: LD_ADDR_VAR 0 2
58561: PUSH
58562: LD_INT 1
58564: PPUSH
58565: LD_INT 4
58567: PPUSH
58568: CALL_OW 12
58572: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
58573: LD_ADDR_VAR 0 4
58577: PUSH
58578: LD_VAR 0 6
58582: PUSH
58583: LD_INT 1
58585: ARRAY
58586: PPUSH
58587: LD_VAR 0 2
58591: PPUSH
58592: CALL_OW 259
58596: ST_TO_ADDR
// if s1 = 1 then
58597: LD_VAR 0 2
58601: PUSH
58602: LD_INT 1
58604: EQUAL
58605: IFFALSE 58625
// s2 := rand ( 2 , 4 ) else
58607: LD_ADDR_VAR 0 3
58611: PUSH
58612: LD_INT 2
58614: PPUSH
58615: LD_INT 4
58617: PPUSH
58618: CALL_OW 12
58622: ST_TO_ADDR
58623: GO 58633
// s2 := 1 ;
58625: LD_ADDR_VAR 0 3
58629: PUSH
58630: LD_INT 1
58632: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
58633: LD_ADDR_VAR 0 5
58637: PUSH
58638: LD_VAR 0 6
58642: PUSH
58643: LD_INT 1
58645: ARRAY
58646: PPUSH
58647: LD_VAR 0 3
58651: PPUSH
58652: CALL_OW 259
58656: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
58657: LD_VAR 0 6
58661: PUSH
58662: LD_INT 1
58664: ARRAY
58665: PPUSH
58666: LD_VAR 0 2
58670: PPUSH
58671: LD_VAR 0 5
58675: PPUSH
58676: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
58680: LD_VAR 0 6
58684: PUSH
58685: LD_INT 1
58687: ARRAY
58688: PPUSH
58689: LD_VAR 0 3
58693: PPUSH
58694: LD_VAR 0 4
58698: PPUSH
58699: CALL_OW 237
// end ;
58703: PPOPN 6
58705: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
58706: LD_EXP 15
58710: IFFALSE 58718
58712: PUSH
58713: LD_EXP 62
58717: AND
58718: IFFALSE 58797
58720: GO 58722
58722: DISABLE
58723: LD_INT 0
58725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
58726: LD_ADDR_VAR 0 1
58730: PUSH
58731: LD_INT 22
58733: PUSH
58734: LD_OWVAR 2
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 30
58745: PUSH
58746: LD_INT 3
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PPUSH
58757: CALL_OW 69
58761: ST_TO_ADDR
// if not tmp then
58762: LD_VAR 0 1
58766: NOT
58767: IFFALSE 58771
// exit ;
58769: GO 58797
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58771: LD_VAR 0 1
58775: PUSH
58776: LD_INT 1
58778: PPUSH
58779: LD_VAR 0 1
58783: PPUSH
58784: CALL_OW 12
58788: ARRAY
58789: PPUSH
58790: LD_INT 1
58792: PPUSH
58793: CALL_OW 234
// end ;
58797: PPOPN 1
58799: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
58800: LD_EXP 15
58804: IFFALSE 58812
58806: PUSH
58807: LD_EXP 63
58811: AND
58812: IFFALSE 58924
58814: GO 58816
58816: DISABLE
58817: LD_INT 0
58819: PPUSH
58820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
58821: LD_ADDR_VAR 0 2
58825: PUSH
58826: LD_INT 22
58828: PUSH
58829: LD_OWVAR 2
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: LD_INT 30
58843: PUSH
58844: LD_INT 27
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 30
58853: PUSH
58854: LD_INT 26
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 30
58863: PUSH
58864: LD_INT 28
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PPUSH
58881: CALL_OW 69
58885: ST_TO_ADDR
// if not tmp then
58886: LD_VAR 0 2
58890: NOT
58891: IFFALSE 58895
// exit ;
58893: GO 58924
// for i in tmp do
58895: LD_ADDR_VAR 0 1
58899: PUSH
58900: LD_VAR 0 2
58904: PUSH
58905: FOR_IN
58906: IFFALSE 58922
// SetLives ( i , 1 ) ;
58908: LD_VAR 0 1
58912: PPUSH
58913: LD_INT 1
58915: PPUSH
58916: CALL_OW 234
58920: GO 58905
58922: POP
58923: POP
// end ;
58924: PPOPN 2
58926: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
58927: LD_EXP 15
58931: IFFALSE 58939
58933: PUSH
58934: LD_EXP 64
58938: AND
58939: IFFALSE 59226
58941: GO 58943
58943: DISABLE
58944: LD_INT 0
58946: PPUSH
58947: PPUSH
58948: PPUSH
// begin i := rand ( 1 , 7 ) ;
58949: LD_ADDR_VAR 0 1
58953: PUSH
58954: LD_INT 1
58956: PPUSH
58957: LD_INT 7
58959: PPUSH
58960: CALL_OW 12
58964: ST_TO_ADDR
// case i of 1 :
58965: LD_VAR 0 1
58969: PUSH
58970: LD_INT 1
58972: DOUBLE
58973: EQUAL
58974: IFTRUE 58978
58976: GO 58988
58978: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
58979: LD_STRING earthquake(getX(game), 0, 32)
58981: PPUSH
58982: CALL_OW 559
58986: GO 59226
58988: LD_INT 2
58990: DOUBLE
58991: EQUAL
58992: IFTRUE 58996
58994: GO 59010
58996: POP
// begin ToLua ( displayStucuk(); ) ;
58997: LD_STRING displayStucuk();
58999: PPUSH
59000: CALL_OW 559
// ResetFog ;
59004: CALL_OW 335
// end ; 3 :
59008: GO 59226
59010: LD_INT 3
59012: DOUBLE
59013: EQUAL
59014: IFTRUE 59018
59016: GO 59122
59018: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59019: LD_ADDR_VAR 0 2
59023: PUSH
59024: LD_INT 22
59026: PUSH
59027: LD_OWVAR 2
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 25
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PPUSH
59050: CALL_OW 69
59054: ST_TO_ADDR
// if not tmp then
59055: LD_VAR 0 2
59059: NOT
59060: IFFALSE 59064
// exit ;
59062: GO 59226
// un := tmp [ rand ( 1 , tmp ) ] ;
59064: LD_ADDR_VAR 0 3
59068: PUSH
59069: LD_VAR 0 2
59073: PUSH
59074: LD_INT 1
59076: PPUSH
59077: LD_VAR 0 2
59081: PPUSH
59082: CALL_OW 12
59086: ARRAY
59087: ST_TO_ADDR
// if Crawls ( un ) then
59088: LD_VAR 0 3
59092: PPUSH
59093: CALL_OW 318
59097: IFFALSE 59108
// ComWalk ( un ) ;
59099: LD_VAR 0 3
59103: PPUSH
59104: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59108: LD_VAR 0 3
59112: PPUSH
59113: LD_INT 8
59115: PPUSH
59116: CALL_OW 336
// end ; 4 :
59120: GO 59226
59122: LD_INT 4
59124: DOUBLE
59125: EQUAL
59126: IFTRUE 59130
59128: GO 59204
59130: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59131: LD_ADDR_VAR 0 2
59135: PUSH
59136: LD_INT 22
59138: PUSH
59139: LD_OWVAR 2
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 30
59150: PUSH
59151: LD_INT 29
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PPUSH
59162: CALL_OW 69
59166: ST_TO_ADDR
// if not tmp then
59167: LD_VAR 0 2
59171: NOT
59172: IFFALSE 59176
// exit ;
59174: GO 59226
// CenterNowOnUnits ( tmp [ 1 ] ) ;
59176: LD_VAR 0 2
59180: PUSH
59181: LD_INT 1
59183: ARRAY
59184: PPUSH
59185: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
59189: LD_VAR 0 2
59193: PUSH
59194: LD_INT 1
59196: ARRAY
59197: PPUSH
59198: CALL_OW 65
// end ; 5 .. 7 :
59202: GO 59226
59204: LD_INT 5
59206: DOUBLE
59207: GREATEREQUAL
59208: IFFALSE 59216
59210: LD_INT 7
59212: DOUBLE
59213: LESSEQUAL
59214: IFTRUE 59218
59216: GO 59225
59218: POP
// StreamSibBomb ; end ;
59219: CALL 55407 0 0
59223: GO 59226
59225: POP
// end ;
59226: PPOPN 3
59228: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
59229: LD_EXP 15
59233: IFFALSE 59241
59235: PUSH
59236: LD_EXP 65
59240: AND
59241: IFFALSE 59397
59243: GO 59245
59245: DISABLE
59246: LD_INT 0
59248: PPUSH
59249: PPUSH
59250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
59251: LD_ADDR_VAR 0 2
59255: PUSH
59256: LD_INT 81
59258: PUSH
59259: LD_OWVAR 2
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 2
59270: PUSH
59271: LD_INT 21
59273: PUSH
59274: LD_INT 1
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 21
59283: PUSH
59284: LD_INT 2
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: LIST
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PPUSH
59300: CALL_OW 69
59304: ST_TO_ADDR
// if not tmp then
59305: LD_VAR 0 2
59309: NOT
59310: IFFALSE 59314
// exit ;
59312: GO 59397
// p := 0 ;
59314: LD_ADDR_VAR 0 3
59318: PUSH
59319: LD_INT 0
59321: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59322: LD_INT 35
59324: PPUSH
59325: CALL_OW 67
// p := p + 1 ;
59329: LD_ADDR_VAR 0 3
59333: PUSH
59334: LD_VAR 0 3
59338: PUSH
59339: LD_INT 1
59341: PLUS
59342: ST_TO_ADDR
// for i in tmp do
59343: LD_ADDR_VAR 0 1
59347: PUSH
59348: LD_VAR 0 2
59352: PUSH
59353: FOR_IN
59354: IFFALSE 59385
// if GetLives ( i ) < 1000 then
59356: LD_VAR 0 1
59360: PPUSH
59361: CALL_OW 256
59365: PUSH
59366: LD_INT 1000
59368: LESS
59369: IFFALSE 59383
// SetLives ( i , 1000 ) ;
59371: LD_VAR 0 1
59375: PPUSH
59376: LD_INT 1000
59378: PPUSH
59379: CALL_OW 234
59383: GO 59353
59385: POP
59386: POP
// until p > 20 ;
59387: LD_VAR 0 3
59391: PUSH
59392: LD_INT 20
59394: GREATER
59395: IFFALSE 59322
// end ;
59397: PPOPN 3
59399: END
// every 0 0$1 trigger StreamModeActive and sTime do
59400: LD_EXP 15
59404: IFFALSE 59412
59406: PUSH
59407: LD_EXP 66
59411: AND
59412: IFFALSE 59447
59414: GO 59416
59416: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
59417: LD_INT 28
59419: PPUSH
59420: LD_OWVAR 2
59424: PPUSH
59425: LD_INT 2
59427: PPUSH
59428: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
59432: LD_INT 30
59434: PPUSH
59435: LD_OWVAR 2
59439: PPUSH
59440: LD_INT 2
59442: PPUSH
59443: CALL_OW 322
// end ;
59447: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
59448: LD_EXP 15
59452: IFFALSE 59460
59454: PUSH
59455: LD_EXP 67
59459: AND
59460: IFFALSE 59581
59462: GO 59464
59464: DISABLE
59465: LD_INT 0
59467: PPUSH
59468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59469: LD_ADDR_VAR 0 2
59473: PUSH
59474: LD_INT 22
59476: PUSH
59477: LD_OWVAR 2
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 21
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 3
59498: PUSH
59499: LD_INT 23
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: LIST
59517: PPUSH
59518: CALL_OW 69
59522: ST_TO_ADDR
// if not tmp then
59523: LD_VAR 0 2
59527: NOT
59528: IFFALSE 59532
// exit ;
59530: GO 59581
// for i in tmp do
59532: LD_ADDR_VAR 0 1
59536: PUSH
59537: LD_VAR 0 2
59541: PUSH
59542: FOR_IN
59543: IFFALSE 59579
// begin if Crawls ( i ) then
59545: LD_VAR 0 1
59549: PPUSH
59550: CALL_OW 318
59554: IFFALSE 59565
// ComWalk ( i ) ;
59556: LD_VAR 0 1
59560: PPUSH
59561: CALL_OW 138
// SetClass ( i , 2 ) ;
59565: LD_VAR 0 1
59569: PPUSH
59570: LD_INT 2
59572: PPUSH
59573: CALL_OW 336
// end ;
59577: GO 59542
59579: POP
59580: POP
// end ;
59581: PPOPN 2
59583: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
59584: LD_EXP 15
59588: IFFALSE 59596
59590: PUSH
59591: LD_EXP 68
59595: AND
59596: IFFALSE 59886
59598: GO 59600
59600: DISABLE
59601: LD_INT 0
59603: PPUSH
59604: PPUSH
59605: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
59606: LD_OWVAR 2
59610: PPUSH
59611: LD_INT 9
59613: PPUSH
59614: LD_INT 1
59616: PPUSH
59617: LD_INT 1
59619: PPUSH
59620: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
59624: LD_INT 9
59626: PPUSH
59627: LD_OWVAR 2
59631: PPUSH
59632: CALL_OW 343
// uc_side := 9 ;
59636: LD_ADDR_OWVAR 20
59640: PUSH
59641: LD_INT 9
59643: ST_TO_ADDR
// uc_nation := 2 ;
59644: LD_ADDR_OWVAR 21
59648: PUSH
59649: LD_INT 2
59651: ST_TO_ADDR
// hc_name := Dark Warrior ;
59652: LD_ADDR_OWVAR 26
59656: PUSH
59657: LD_STRING Dark Warrior
59659: ST_TO_ADDR
// hc_gallery :=  ;
59660: LD_ADDR_OWVAR 33
59664: PUSH
59665: LD_STRING 
59667: ST_TO_ADDR
// hc_noskilllimit := true ;
59668: LD_ADDR_OWVAR 76
59672: PUSH
59673: LD_INT 1
59675: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
59676: LD_ADDR_OWVAR 31
59680: PUSH
59681: LD_INT 30
59683: PUSH
59684: LD_INT 30
59686: PUSH
59687: LD_INT 30
59689: PUSH
59690: LD_INT 30
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: ST_TO_ADDR
// un := CreateHuman ;
59699: LD_ADDR_VAR 0 3
59703: PUSH
59704: CALL_OW 44
59708: ST_TO_ADDR
// hc_noskilllimit := false ;
59709: LD_ADDR_OWVAR 76
59713: PUSH
59714: LD_INT 0
59716: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59717: LD_VAR 0 3
59721: PPUSH
59722: LD_INT 1
59724: PPUSH
59725: CALL_OW 51
// ToLua ( playRanger() ) ;
59729: LD_STRING playRanger()
59731: PPUSH
59732: CALL_OW 559
// p := 0 ;
59736: LD_ADDR_VAR 0 2
59740: PUSH
59741: LD_INT 0
59743: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59744: LD_INT 35
59746: PPUSH
59747: CALL_OW 67
// p := p + 1 ;
59751: LD_ADDR_VAR 0 2
59755: PUSH
59756: LD_VAR 0 2
59760: PUSH
59761: LD_INT 1
59763: PLUS
59764: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
59765: LD_VAR 0 3
59769: PPUSH
59770: CALL_OW 256
59774: PUSH
59775: LD_INT 1000
59777: LESS
59778: IFFALSE 59792
// SetLives ( un , 1000 ) ;
59780: LD_VAR 0 3
59784: PPUSH
59785: LD_INT 1000
59787: PPUSH
59788: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
59792: LD_VAR 0 3
59796: PPUSH
59797: LD_INT 81
59799: PUSH
59800: LD_OWVAR 2
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 91
59811: PUSH
59812: LD_VAR 0 3
59816: PUSH
59817: LD_INT 30
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: LIST
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PPUSH
59829: CALL_OW 69
59833: PPUSH
59834: LD_VAR 0 3
59838: PPUSH
59839: CALL_OW 74
59843: PPUSH
59844: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
59848: LD_VAR 0 2
59852: PUSH
59853: LD_INT 80
59855: GREATER
59856: IFTRUE 59869
59858: PUSH
59859: LD_VAR 0 3
59863: PPUSH
59864: CALL_OW 301
59868: OR
59869: IFFALSE 59744
// if un then
59871: LD_VAR 0 3
59875: IFFALSE 59886
// RemoveUnit ( un ) ;
59877: LD_VAR 0 3
59881: PPUSH
59882: CALL_OW 64
// end ;
59886: PPOPN 3
59888: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
59889: LD_EXP 69
59893: IFFALSE 60009
59895: GO 59897
59897: DISABLE
59898: LD_INT 0
59900: PPUSH
59901: PPUSH
59902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59903: LD_ADDR_VAR 0 2
59907: PUSH
59908: LD_INT 81
59910: PUSH
59911: LD_OWVAR 2
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 21
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PPUSH
59934: CALL_OW 69
59938: ST_TO_ADDR
// ToLua ( playComputer() ) ;
59939: LD_STRING playComputer()
59941: PPUSH
59942: CALL_OW 559
// if not tmp then
59946: LD_VAR 0 2
59950: NOT
59951: IFFALSE 59955
// exit ;
59953: GO 60009
// for i in tmp do
59955: LD_ADDR_VAR 0 1
59959: PUSH
59960: LD_VAR 0 2
59964: PUSH
59965: FOR_IN
59966: IFFALSE 60007
// for j := 1 to 4 do
59968: LD_ADDR_VAR 0 3
59972: PUSH
59973: DOUBLE
59974: LD_INT 1
59976: DEC
59977: ST_TO_ADDR
59978: LD_INT 4
59980: PUSH
59981: FOR_TO
59982: IFFALSE 60003
// SetSkill ( i , j , 10 ) ;
59984: LD_VAR 0 1
59988: PPUSH
59989: LD_VAR 0 3
59993: PPUSH
59994: LD_INT 10
59996: PPUSH
59997: CALL_OW 237
60001: GO 59981
60003: POP
60004: POP
60005: GO 59965
60007: POP
60008: POP
// end ;
60009: PPOPN 3
60011: END
// every 0 0$1 trigger s30 do var i , tmp ;
60012: LD_EXP 70
60016: IFFALSE 60085
60018: GO 60020
60020: DISABLE
60021: LD_INT 0
60023: PPUSH
60024: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60025: LD_ADDR_VAR 0 2
60029: PUSH
60030: LD_INT 22
60032: PUSH
60033: LD_OWVAR 2
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PPUSH
60042: CALL_OW 69
60046: ST_TO_ADDR
// if not tmp then
60047: LD_VAR 0 2
60051: NOT
60052: IFFALSE 60056
// exit ;
60054: GO 60085
// for i in tmp do
60056: LD_ADDR_VAR 0 1
60060: PUSH
60061: LD_VAR 0 2
60065: PUSH
60066: FOR_IN
60067: IFFALSE 60083
// SetLives ( i , 300 ) ;
60069: LD_VAR 0 1
60073: PPUSH
60074: LD_INT 300
60076: PPUSH
60077: CALL_OW 234
60081: GO 60066
60083: POP
60084: POP
// end ;
60085: PPOPN 2
60087: END
// every 0 0$1 trigger s60 do var i , tmp ;
60088: LD_EXP 71
60092: IFFALSE 60161
60094: GO 60096
60096: DISABLE
60097: LD_INT 0
60099: PPUSH
60100: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60101: LD_ADDR_VAR 0 2
60105: PUSH
60106: LD_INT 22
60108: PUSH
60109: LD_OWVAR 2
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PPUSH
60118: CALL_OW 69
60122: ST_TO_ADDR
// if not tmp then
60123: LD_VAR 0 2
60127: NOT
60128: IFFALSE 60132
// exit ;
60130: GO 60161
// for i in tmp do
60132: LD_ADDR_VAR 0 1
60136: PUSH
60137: LD_VAR 0 2
60141: PUSH
60142: FOR_IN
60143: IFFALSE 60159
// SetLives ( i , 600 ) ;
60145: LD_VAR 0 1
60149: PPUSH
60150: LD_INT 600
60152: PPUSH
60153: CALL_OW 234
60157: GO 60142
60159: POP
60160: POP
// end ;
60161: PPOPN 2
60163: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60164: LD_INT 0
60166: PPUSH
// case cmd of 301 :
60167: LD_VAR 0 1
60171: PUSH
60172: LD_INT 301
60174: DOUBLE
60175: EQUAL
60176: IFTRUE 60180
60178: GO 60212
60180: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
60181: LD_VAR 0 6
60185: PPUSH
60186: LD_VAR 0 7
60190: PPUSH
60191: LD_VAR 0 8
60195: PPUSH
60196: LD_VAR 0 4
60200: PPUSH
60201: LD_VAR 0 5
60205: PPUSH
60206: CALL 61425 0 5
60210: GO 60333
60212: LD_INT 302
60214: DOUBLE
60215: EQUAL
60216: IFTRUE 60220
60218: GO 60257
60220: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
60221: LD_VAR 0 6
60225: PPUSH
60226: LD_VAR 0 7
60230: PPUSH
60231: LD_VAR 0 8
60235: PPUSH
60236: LD_VAR 0 9
60240: PPUSH
60241: LD_VAR 0 4
60245: PPUSH
60246: LD_VAR 0 5
60250: PPUSH
60251: CALL 61516 0 6
60255: GO 60333
60257: LD_INT 303
60259: DOUBLE
60260: EQUAL
60261: IFTRUE 60265
60263: GO 60302
60265: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
60266: LD_VAR 0 6
60270: PPUSH
60271: LD_VAR 0 7
60275: PPUSH
60276: LD_VAR 0 8
60280: PPUSH
60281: LD_VAR 0 9
60285: PPUSH
60286: LD_VAR 0 4
60290: PPUSH
60291: LD_VAR 0 5
60295: PPUSH
60296: CALL 60338 0 6
60300: GO 60333
60302: LD_INT 304
60304: DOUBLE
60305: EQUAL
60306: IFTRUE 60310
60308: GO 60332
60310: POP
// hHackTeleport ( unit , x , y ) ; end ;
60311: LD_VAR 0 2
60315: PPUSH
60316: LD_VAR 0 4
60320: PPUSH
60321: LD_VAR 0 5
60325: PPUSH
60326: CALL 62109 0 3
60330: GO 60333
60332: POP
// end ;
60333: LD_VAR 0 12
60337: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
60338: LD_INT 0
60340: PPUSH
60341: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
60342: LD_VAR 0 1
60346: PUSH
60347: LD_INT 1
60349: LESS
60350: IFTRUE 60362
60352: PUSH
60353: LD_VAR 0 1
60357: PUSH
60358: LD_INT 3
60360: GREATER
60361: OR
60362: IFTRUE 60380
60364: PUSH
60365: LD_VAR 0 5
60369: PPUSH
60370: LD_VAR 0 6
60374: PPUSH
60375: CALL_OW 428
60379: OR
60380: IFFALSE 60384
// exit ;
60382: GO 61112
// uc_side := your_side ;
60384: LD_ADDR_OWVAR 20
60388: PUSH
60389: LD_OWVAR 2
60393: ST_TO_ADDR
// uc_nation := nation ;
60394: LD_ADDR_OWVAR 21
60398: PUSH
60399: LD_VAR 0 1
60403: ST_TO_ADDR
// bc_level = 1 ;
60404: LD_ADDR_OWVAR 43
60408: PUSH
60409: LD_INT 1
60411: ST_TO_ADDR
// case btype of 1 :
60412: LD_VAR 0 2
60416: PUSH
60417: LD_INT 1
60419: DOUBLE
60420: EQUAL
60421: IFTRUE 60425
60423: GO 60436
60425: POP
// bc_type := b_depot ; 2 :
60426: LD_ADDR_OWVAR 42
60430: PUSH
60431: LD_INT 0
60433: ST_TO_ADDR
60434: GO 61056
60436: LD_INT 2
60438: DOUBLE
60439: EQUAL
60440: IFTRUE 60444
60442: GO 60455
60444: POP
// bc_type := b_warehouse ; 3 :
60445: LD_ADDR_OWVAR 42
60449: PUSH
60450: LD_INT 1
60452: ST_TO_ADDR
60453: GO 61056
60455: LD_INT 3
60457: DOUBLE
60458: EQUAL
60459: IFTRUE 60463
60461: GO 60474
60463: POP
// bc_type := b_lab ; 4 .. 9 :
60464: LD_ADDR_OWVAR 42
60468: PUSH
60469: LD_INT 6
60471: ST_TO_ADDR
60472: GO 61056
60474: LD_INT 4
60476: DOUBLE
60477: GREATEREQUAL
60478: IFFALSE 60486
60480: LD_INT 9
60482: DOUBLE
60483: LESSEQUAL
60484: IFTRUE 60488
60486: GO 60548
60488: POP
// begin bc_type := b_lab_half ;
60489: LD_ADDR_OWVAR 42
60493: PUSH
60494: LD_INT 7
60496: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
60497: LD_ADDR_OWVAR 44
60501: PUSH
60502: LD_INT 10
60504: PUSH
60505: LD_INT 11
60507: PUSH
60508: LD_INT 12
60510: PUSH
60511: LD_INT 15
60513: PUSH
60514: LD_INT 14
60516: PUSH
60517: LD_INT 13
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: PUSH
60528: LD_VAR 0 2
60532: PUSH
60533: LD_INT 3
60535: MINUS
60536: ARRAY
60537: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
60538: LD_ADDR_OWVAR 45
60542: PUSH
60543: LD_INT 9
60545: ST_TO_ADDR
// end ; 10 .. 13 :
60546: GO 61056
60548: LD_INT 10
60550: DOUBLE
60551: GREATEREQUAL
60552: IFFALSE 60560
60554: LD_INT 13
60556: DOUBLE
60557: LESSEQUAL
60558: IFTRUE 60562
60560: GO 60639
60562: POP
// begin bc_type := b_lab_full ;
60563: LD_ADDR_OWVAR 42
60567: PUSH
60568: LD_INT 8
60570: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
60571: LD_ADDR_OWVAR 44
60575: PUSH
60576: LD_INT 10
60578: PUSH
60579: LD_INT 12
60581: PUSH
60582: LD_INT 14
60584: PUSH
60585: LD_INT 13
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: PUSH
60594: LD_VAR 0 2
60598: PUSH
60599: LD_INT 9
60601: MINUS
60602: ARRAY
60603: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
60604: LD_ADDR_OWVAR 45
60608: PUSH
60609: LD_INT 11
60611: PUSH
60612: LD_INT 15
60614: PUSH
60615: LD_INT 12
60617: PUSH
60618: LD_INT 15
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: PUSH
60627: LD_VAR 0 2
60631: PUSH
60632: LD_INT 9
60634: MINUS
60635: ARRAY
60636: ST_TO_ADDR
// end ; 14 :
60637: GO 61056
60639: LD_INT 14
60641: DOUBLE
60642: EQUAL
60643: IFTRUE 60647
60645: GO 60658
60647: POP
// bc_type := b_workshop ; 15 :
60648: LD_ADDR_OWVAR 42
60652: PUSH
60653: LD_INT 2
60655: ST_TO_ADDR
60656: GO 61056
60658: LD_INT 15
60660: DOUBLE
60661: EQUAL
60662: IFTRUE 60666
60664: GO 60677
60666: POP
// bc_type := b_factory ; 16 :
60667: LD_ADDR_OWVAR 42
60671: PUSH
60672: LD_INT 3
60674: ST_TO_ADDR
60675: GO 61056
60677: LD_INT 16
60679: DOUBLE
60680: EQUAL
60681: IFTRUE 60685
60683: GO 60696
60685: POP
// bc_type := b_ext_gun ; 17 :
60686: LD_ADDR_OWVAR 42
60690: PUSH
60691: LD_INT 17
60693: ST_TO_ADDR
60694: GO 61056
60696: LD_INT 17
60698: DOUBLE
60699: EQUAL
60700: IFTRUE 60704
60702: GO 60732
60704: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
60705: LD_ADDR_OWVAR 42
60709: PUSH
60710: LD_INT 19
60712: PUSH
60713: LD_INT 23
60715: PUSH
60716: LD_INT 19
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: LIST
60723: PUSH
60724: LD_VAR 0 1
60728: ARRAY
60729: ST_TO_ADDR
60730: GO 61056
60732: LD_INT 18
60734: DOUBLE
60735: EQUAL
60736: IFTRUE 60740
60738: GO 60751
60740: POP
// bc_type := b_ext_radar ; 19 :
60741: LD_ADDR_OWVAR 42
60745: PUSH
60746: LD_INT 20
60748: ST_TO_ADDR
60749: GO 61056
60751: LD_INT 19
60753: DOUBLE
60754: EQUAL
60755: IFTRUE 60759
60757: GO 60770
60759: POP
// bc_type := b_ext_radio ; 20 :
60760: LD_ADDR_OWVAR 42
60764: PUSH
60765: LD_INT 22
60767: ST_TO_ADDR
60768: GO 61056
60770: LD_INT 20
60772: DOUBLE
60773: EQUAL
60774: IFTRUE 60778
60776: GO 60789
60778: POP
// bc_type := b_ext_siberium ; 21 :
60779: LD_ADDR_OWVAR 42
60783: PUSH
60784: LD_INT 21
60786: ST_TO_ADDR
60787: GO 61056
60789: LD_INT 21
60791: DOUBLE
60792: EQUAL
60793: IFTRUE 60797
60795: GO 60808
60797: POP
// bc_type := b_ext_computer ; 22 :
60798: LD_ADDR_OWVAR 42
60802: PUSH
60803: LD_INT 24
60805: ST_TO_ADDR
60806: GO 61056
60808: LD_INT 22
60810: DOUBLE
60811: EQUAL
60812: IFTRUE 60816
60814: GO 60827
60816: POP
// bc_type := b_ext_track ; 23 :
60817: LD_ADDR_OWVAR 42
60821: PUSH
60822: LD_INT 16
60824: ST_TO_ADDR
60825: GO 61056
60827: LD_INT 23
60829: DOUBLE
60830: EQUAL
60831: IFTRUE 60835
60833: GO 60846
60835: POP
// bc_type := b_ext_laser ; 24 :
60836: LD_ADDR_OWVAR 42
60840: PUSH
60841: LD_INT 25
60843: ST_TO_ADDR
60844: GO 61056
60846: LD_INT 24
60848: DOUBLE
60849: EQUAL
60850: IFTRUE 60854
60852: GO 60865
60854: POP
// bc_type := b_control_tower ; 25 :
60855: LD_ADDR_OWVAR 42
60859: PUSH
60860: LD_INT 36
60862: ST_TO_ADDR
60863: GO 61056
60865: LD_INT 25
60867: DOUBLE
60868: EQUAL
60869: IFTRUE 60873
60871: GO 60884
60873: POP
// bc_type := b_breastwork ; 26 :
60874: LD_ADDR_OWVAR 42
60878: PUSH
60879: LD_INT 31
60881: ST_TO_ADDR
60882: GO 61056
60884: LD_INT 26
60886: DOUBLE
60887: EQUAL
60888: IFTRUE 60892
60890: GO 60903
60892: POP
// bc_type := b_bunker ; 27 :
60893: LD_ADDR_OWVAR 42
60897: PUSH
60898: LD_INT 32
60900: ST_TO_ADDR
60901: GO 61056
60903: LD_INT 27
60905: DOUBLE
60906: EQUAL
60907: IFTRUE 60911
60909: GO 60922
60911: POP
// bc_type := b_turret ; 28 :
60912: LD_ADDR_OWVAR 42
60916: PUSH
60917: LD_INT 33
60919: ST_TO_ADDR
60920: GO 61056
60922: LD_INT 28
60924: DOUBLE
60925: EQUAL
60926: IFTRUE 60930
60928: GO 60941
60930: POP
// bc_type := b_armoury ; 29 :
60931: LD_ADDR_OWVAR 42
60935: PUSH
60936: LD_INT 4
60938: ST_TO_ADDR
60939: GO 61056
60941: LD_INT 29
60943: DOUBLE
60944: EQUAL
60945: IFTRUE 60949
60947: GO 60960
60949: POP
// bc_type := b_barracks ; 30 :
60950: LD_ADDR_OWVAR 42
60954: PUSH
60955: LD_INT 5
60957: ST_TO_ADDR
60958: GO 61056
60960: LD_INT 30
60962: DOUBLE
60963: EQUAL
60964: IFTRUE 60968
60966: GO 60979
60968: POP
// bc_type := b_solar_power ; 31 :
60969: LD_ADDR_OWVAR 42
60973: PUSH
60974: LD_INT 27
60976: ST_TO_ADDR
60977: GO 61056
60979: LD_INT 31
60981: DOUBLE
60982: EQUAL
60983: IFTRUE 60987
60985: GO 60998
60987: POP
// bc_type := b_oil_power ; 32 :
60988: LD_ADDR_OWVAR 42
60992: PUSH
60993: LD_INT 26
60995: ST_TO_ADDR
60996: GO 61056
60998: LD_INT 32
61000: DOUBLE
61001: EQUAL
61002: IFTRUE 61006
61004: GO 61017
61006: POP
// bc_type := b_siberite_power ; 33 :
61007: LD_ADDR_OWVAR 42
61011: PUSH
61012: LD_INT 28
61014: ST_TO_ADDR
61015: GO 61056
61017: LD_INT 33
61019: DOUBLE
61020: EQUAL
61021: IFTRUE 61025
61023: GO 61036
61025: POP
// bc_type := b_oil_mine ; 34 :
61026: LD_ADDR_OWVAR 42
61030: PUSH
61031: LD_INT 29
61033: ST_TO_ADDR
61034: GO 61056
61036: LD_INT 34
61038: DOUBLE
61039: EQUAL
61040: IFTRUE 61044
61042: GO 61055
61044: POP
// bc_type := b_siberite_mine ; end ;
61045: LD_ADDR_OWVAR 42
61049: PUSH
61050: LD_INT 30
61052: ST_TO_ADDR
61053: GO 61056
61055: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
61056: LD_ADDR_VAR 0 8
61060: PUSH
61061: LD_VAR 0 5
61065: PPUSH
61066: LD_VAR 0 6
61070: PPUSH
61071: LD_VAR 0 3
61075: PPUSH
61076: CALL_OW 47
61080: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
61081: LD_OWVAR 42
61085: PUSH
61086: LD_INT 32
61088: PUSH
61089: LD_INT 33
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: IN
61096: IFFALSE 61112
// PlaceWeaponTurret ( b , weapon ) ;
61098: LD_VAR 0 8
61102: PPUSH
61103: LD_VAR 0 4
61107: PPUSH
61108: CALL_OW 431
// end ;
61112: LD_VAR 0 7
61116: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61117: LD_INT 0
61119: PPUSH
61120: PPUSH
61121: PPUSH
61122: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61123: LD_ADDR_VAR 0 4
61127: PUSH
61128: LD_INT 22
61130: PUSH
61131: LD_OWVAR 2
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: LD_INT 30
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 30
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: LIST
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PPUSH
61172: CALL_OW 69
61176: ST_TO_ADDR
// if not tmp then
61177: LD_VAR 0 4
61181: NOT
61182: IFFALSE 61186
// exit ;
61184: GO 61245
// for i in tmp do
61186: LD_ADDR_VAR 0 2
61190: PUSH
61191: LD_VAR 0 4
61195: PUSH
61196: FOR_IN
61197: IFFALSE 61243
// for j = 1 to 3 do
61199: LD_ADDR_VAR 0 3
61203: PUSH
61204: DOUBLE
61205: LD_INT 1
61207: DEC
61208: ST_TO_ADDR
61209: LD_INT 3
61211: PUSH
61212: FOR_TO
61213: IFFALSE 61239
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
61215: LD_VAR 0 2
61219: PPUSH
61220: CALL_OW 274
61224: PPUSH
61225: LD_VAR 0 3
61229: PPUSH
61230: LD_INT 99999
61232: PPUSH
61233: CALL_OW 277
61237: GO 61212
61239: POP
61240: POP
61241: GO 61196
61243: POP
61244: POP
// end ;
61245: LD_VAR 0 1
61249: RET
// export function hHackSetLevel10 ; var i , j ; begin
61250: LD_INT 0
61252: PPUSH
61253: PPUSH
61254: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61255: LD_ADDR_VAR 0 2
61259: PUSH
61260: LD_INT 21
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PPUSH
61270: CALL_OW 69
61274: PUSH
61275: FOR_IN
61276: IFFALSE 61328
// if IsSelected ( i ) then
61278: LD_VAR 0 2
61282: PPUSH
61283: CALL_OW 306
61287: IFFALSE 61326
// begin for j := 1 to 4 do
61289: LD_ADDR_VAR 0 3
61293: PUSH
61294: DOUBLE
61295: LD_INT 1
61297: DEC
61298: ST_TO_ADDR
61299: LD_INT 4
61301: PUSH
61302: FOR_TO
61303: IFFALSE 61324
// SetSkill ( i , j , 10 ) ;
61305: LD_VAR 0 2
61309: PPUSH
61310: LD_VAR 0 3
61314: PPUSH
61315: LD_INT 10
61317: PPUSH
61318: CALL_OW 237
61322: GO 61302
61324: POP
61325: POP
// end ;
61326: GO 61275
61328: POP
61329: POP
// end ;
61330: LD_VAR 0 1
61334: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
61335: LD_INT 0
61337: PPUSH
61338: PPUSH
61339: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
61340: LD_ADDR_VAR 0 2
61344: PUSH
61345: LD_INT 22
61347: PUSH
61348: LD_OWVAR 2
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 21
61359: PUSH
61360: LD_INT 1
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PPUSH
61371: CALL_OW 69
61375: PUSH
61376: FOR_IN
61377: IFFALSE 61418
// begin for j := 1 to 4 do
61379: LD_ADDR_VAR 0 3
61383: PUSH
61384: DOUBLE
61385: LD_INT 1
61387: DEC
61388: ST_TO_ADDR
61389: LD_INT 4
61391: PUSH
61392: FOR_TO
61393: IFFALSE 61414
// SetSkill ( i , j , 10 ) ;
61395: LD_VAR 0 2
61399: PPUSH
61400: LD_VAR 0 3
61404: PPUSH
61405: LD_INT 10
61407: PPUSH
61408: CALL_OW 237
61412: GO 61392
61414: POP
61415: POP
// end ;
61416: GO 61376
61418: POP
61419: POP
// end ;
61420: LD_VAR 0 1
61424: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
61425: LD_INT 0
61427: PPUSH
// uc_side := your_side ;
61428: LD_ADDR_OWVAR 20
61432: PUSH
61433: LD_OWVAR 2
61437: ST_TO_ADDR
// uc_nation := nation ;
61438: LD_ADDR_OWVAR 21
61442: PUSH
61443: LD_VAR 0 1
61447: ST_TO_ADDR
// InitHc ;
61448: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
61452: LD_INT 0
61454: PPUSH
61455: LD_VAR 0 2
61459: PPUSH
61460: LD_VAR 0 3
61464: PPUSH
61465: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
61469: LD_VAR 0 4
61473: PPUSH
61474: LD_VAR 0 5
61478: PPUSH
61479: CALL_OW 428
61483: PUSH
61484: LD_INT 0
61486: EQUAL
61487: IFFALSE 61511
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
61489: CALL_OW 44
61493: PPUSH
61494: LD_VAR 0 4
61498: PPUSH
61499: LD_VAR 0 5
61503: PPUSH
61504: LD_INT 1
61506: PPUSH
61507: CALL_OW 48
// end ;
61511: LD_VAR 0 6
61515: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
61516: LD_INT 0
61518: PPUSH
61519: PPUSH
// uc_side := your_side ;
61520: LD_ADDR_OWVAR 20
61524: PUSH
61525: LD_OWVAR 2
61529: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
61530: LD_VAR 0 1
61534: PUSH
61535: LD_INT 1
61537: PUSH
61538: LD_INT 2
61540: PUSH
61541: LD_INT 3
61543: PUSH
61544: LD_INT 4
61546: PUSH
61547: LD_INT 5
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: IN
61557: IFFALSE 61569
// uc_nation := nation_american else
61559: LD_ADDR_OWVAR 21
61563: PUSH
61564: LD_INT 1
61566: ST_TO_ADDR
61567: GO 61612
// if chassis in [ 11 , 12 , 13 , 14 ] then
61569: LD_VAR 0 1
61573: PUSH
61574: LD_INT 11
61576: PUSH
61577: LD_INT 12
61579: PUSH
61580: LD_INT 13
61582: PUSH
61583: LD_INT 14
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: IN
61592: IFFALSE 61604
// uc_nation := nation_arabian else
61594: LD_ADDR_OWVAR 21
61598: PUSH
61599: LD_INT 2
61601: ST_TO_ADDR
61602: GO 61612
// uc_nation := nation_russian ;
61604: LD_ADDR_OWVAR 21
61608: PUSH
61609: LD_INT 3
61611: ST_TO_ADDR
// vc_chassis := chassis ;
61612: LD_ADDR_OWVAR 37
61616: PUSH
61617: LD_VAR 0 1
61621: ST_TO_ADDR
// vc_engine := engine ;
61622: LD_ADDR_OWVAR 39
61626: PUSH
61627: LD_VAR 0 2
61631: ST_TO_ADDR
// vc_control := control ;
61632: LD_ADDR_OWVAR 38
61636: PUSH
61637: LD_VAR 0 3
61641: ST_TO_ADDR
// vc_weapon := weapon ;
61642: LD_ADDR_OWVAR 40
61646: PUSH
61647: LD_VAR 0 4
61651: ST_TO_ADDR
// un := CreateVehicle ;
61652: LD_ADDR_VAR 0 8
61656: PUSH
61657: CALL_OW 45
61661: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
61662: LD_VAR 0 8
61666: PPUSH
61667: LD_INT 0
61669: PPUSH
61670: LD_INT 5
61672: PPUSH
61673: CALL_OW 12
61677: PPUSH
61678: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
61682: LD_VAR 0 8
61686: PPUSH
61687: LD_VAR 0 5
61691: PPUSH
61692: LD_VAR 0 6
61696: PPUSH
61697: LD_INT 1
61699: PPUSH
61700: CALL_OW 48
// end ;
61704: LD_VAR 0 7
61708: RET
// export hInvincible ; every 1 do
61709: GO 61711
61711: DISABLE
// hInvincible := [ ] ;
61712: LD_ADDR_EXP 72
61716: PUSH
61717: EMPTY
61718: ST_TO_ADDR
61719: END
// every 10 do var i ;
61720: GO 61722
61722: DISABLE
61723: LD_INT 0
61725: PPUSH
// begin enable ;
61726: ENABLE
// if not hInvincible then
61727: LD_EXP 72
61731: NOT
61732: IFFALSE 61736
// exit ;
61734: GO 61780
// for i in hInvincible do
61736: LD_ADDR_VAR 0 1
61740: PUSH
61741: LD_EXP 72
61745: PUSH
61746: FOR_IN
61747: IFFALSE 61778
// if GetLives ( i ) < 1000 then
61749: LD_VAR 0 1
61753: PPUSH
61754: CALL_OW 256
61758: PUSH
61759: LD_INT 1000
61761: LESS
61762: IFFALSE 61776
// SetLives ( i , 1000 ) ;
61764: LD_VAR 0 1
61768: PPUSH
61769: LD_INT 1000
61771: PPUSH
61772: CALL_OW 234
61776: GO 61746
61778: POP
61779: POP
// end ;
61780: PPOPN 1
61782: END
// export function hHackInvincible ; var i ; begin
61783: LD_INT 0
61785: PPUSH
61786: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
61787: LD_ADDR_VAR 0 2
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: LD_INT 21
61797: PUSH
61798: LD_INT 1
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 21
61807: PUSH
61808: LD_INT 2
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: LIST
61819: PPUSH
61820: CALL_OW 69
61824: PUSH
61825: FOR_IN
61826: IFFALSE 61887
// if IsSelected ( i ) then
61828: LD_VAR 0 2
61832: PPUSH
61833: CALL_OW 306
61837: IFFALSE 61885
// begin if i in hInvincible then
61839: LD_VAR 0 2
61843: PUSH
61844: LD_EXP 72
61848: IN
61849: IFFALSE 61869
// hInvincible := hInvincible diff i else
61851: LD_ADDR_EXP 72
61855: PUSH
61856: LD_EXP 72
61860: PUSH
61861: LD_VAR 0 2
61865: DIFF
61866: ST_TO_ADDR
61867: GO 61885
// hInvincible := hInvincible union i ;
61869: LD_ADDR_EXP 72
61873: PUSH
61874: LD_EXP 72
61878: PUSH
61879: LD_VAR 0 2
61883: UNION
61884: ST_TO_ADDR
// end ;
61885: GO 61825
61887: POP
61888: POP
// end ;
61889: LD_VAR 0 1
61893: RET
// export function hHackInvisible ; var i , j ; begin
61894: LD_INT 0
61896: PPUSH
61897: PPUSH
61898: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61899: LD_ADDR_VAR 0 2
61903: PUSH
61904: LD_INT 21
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PPUSH
61914: CALL_OW 69
61918: PUSH
61919: FOR_IN
61920: IFFALSE 61944
// if IsSelected ( i ) then
61922: LD_VAR 0 2
61926: PPUSH
61927: CALL_OW 306
61931: IFFALSE 61942
// ComForceInvisible ( i ) ;
61933: LD_VAR 0 2
61937: PPUSH
61938: CALL_OW 496
61942: GO 61919
61944: POP
61945: POP
// end ;
61946: LD_VAR 0 1
61950: RET
// export function hHackChangeYourSide ; begin
61951: LD_INT 0
61953: PPUSH
// if your_side = 8 then
61954: LD_OWVAR 2
61958: PUSH
61959: LD_INT 8
61961: EQUAL
61962: IFFALSE 61974
// your_side := 0 else
61964: LD_ADDR_OWVAR 2
61968: PUSH
61969: LD_INT 0
61971: ST_TO_ADDR
61972: GO 61988
// your_side := your_side + 1 ;
61974: LD_ADDR_OWVAR 2
61978: PUSH
61979: LD_OWVAR 2
61983: PUSH
61984: LD_INT 1
61986: PLUS
61987: ST_TO_ADDR
// end ;
61988: LD_VAR 0 1
61992: RET
// export function hHackChangeUnitSide ; var i , j ; begin
61993: LD_INT 0
61995: PPUSH
61996: PPUSH
61997: PPUSH
// for i in all_units do
61998: LD_ADDR_VAR 0 2
62002: PUSH
62003: LD_OWVAR 3
62007: PUSH
62008: FOR_IN
62009: IFFALSE 62087
// if IsSelected ( i ) then
62011: LD_VAR 0 2
62015: PPUSH
62016: CALL_OW 306
62020: IFFALSE 62085
// begin j := GetSide ( i ) ;
62022: LD_ADDR_VAR 0 3
62026: PUSH
62027: LD_VAR 0 2
62031: PPUSH
62032: CALL_OW 255
62036: ST_TO_ADDR
// if j = 8 then
62037: LD_VAR 0 3
62041: PUSH
62042: LD_INT 8
62044: EQUAL
62045: IFFALSE 62057
// j := 0 else
62047: LD_ADDR_VAR 0 3
62051: PUSH
62052: LD_INT 0
62054: ST_TO_ADDR
62055: GO 62071
// j := j + 1 ;
62057: LD_ADDR_VAR 0 3
62061: PUSH
62062: LD_VAR 0 3
62066: PUSH
62067: LD_INT 1
62069: PLUS
62070: ST_TO_ADDR
// SetSide ( i , j ) ;
62071: LD_VAR 0 2
62075: PPUSH
62076: LD_VAR 0 3
62080: PPUSH
62081: CALL_OW 235
// end ;
62085: GO 62008
62087: POP
62088: POP
// end ;
62089: LD_VAR 0 1
62093: RET
// export function hHackFog ; begin
62094: LD_INT 0
62096: PPUSH
// FogOff ( true ) ;
62097: LD_INT 1
62099: PPUSH
62100: CALL_OW 344
// end ;
62104: LD_VAR 0 1
62108: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62109: LD_INT 0
62111: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62112: LD_VAR 0 1
62116: PPUSH
62117: LD_VAR 0 2
62121: PPUSH
62122: LD_VAR 0 3
62126: PPUSH
62127: LD_INT 1
62129: PPUSH
62130: LD_INT 1
62132: PPUSH
62133: CALL_OW 483
// CenterOnXY ( x , y ) ;
62137: LD_VAR 0 2
62141: PPUSH
62142: LD_VAR 0 3
62146: PPUSH
62147: CALL_OW 84
// end ;
62151: LD_VAR 0 4
62155: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62156: LD_INT 0
62158: PPUSH
62159: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62160: LD_VAR 0 1
62164: NOT
62165: IFTRUE 62184
62167: PUSH
62168: LD_VAR 0 2
62172: PPUSH
62173: LD_VAR 0 3
62177: PPUSH
62178: CALL_OW 488
62182: NOT
62183: OR
62184: IFTRUE 62219
62186: PUSH
62187: LD_VAR 0 1
62191: PPUSH
62192: CALL_OW 266
62196: PUSH
62197: LD_INT 3
62199: NONEQUAL
62200: IFFALSE 62218
62202: PUSH
62203: LD_VAR 0 1
62207: PPUSH
62208: CALL_OW 247
62212: PUSH
62213: LD_INT 1
62215: EQUAL
62216: NOT
62217: AND
62218: OR
62219: IFFALSE 62223
// exit ;
62221: GO 62505
// if GetType ( factory ) = unit_human then
62223: LD_VAR 0 1
62227: PPUSH
62228: CALL_OW 247
62232: PUSH
62233: LD_INT 1
62235: EQUAL
62236: IFFALSE 62253
// factory := IsInUnit ( factory ) ;
62238: LD_ADDR_VAR 0 1
62242: PUSH
62243: LD_VAR 0 1
62247: PPUSH
62248: CALL_OW 310
62252: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62253: LD_VAR 0 1
62257: PPUSH
62258: CALL_OW 266
62262: PUSH
62263: LD_INT 3
62265: NONEQUAL
62266: IFFALSE 62270
// exit ;
62268: GO 62505
// for i := 1 to Count ( factoryWaypoints ) do
62270: LD_ADDR_VAR 0 5
62274: PUSH
62275: DOUBLE
62276: LD_INT 1
62278: DEC
62279: ST_TO_ADDR
62280: LD_EXP 73
62284: PPUSH
62285: CALL 3364 0 1
62289: PUSH
62290: FOR_TO
62291: IFFALSE 62453
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
62293: LD_VAR 0 2
62297: PPUSH
62298: LD_VAR 0 3
62302: PPUSH
62303: CALL_OW 428
62307: PUSH
62308: LD_EXP 73
62312: PUSH
62313: LD_VAR 0 5
62317: ARRAY
62318: PUSH
62319: LD_INT 2
62321: ARRAY
62322: EQUAL
62323: IFFALSE 62355
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
62325: LD_ADDR_EXP 73
62329: PUSH
62330: LD_EXP 73
62334: PPUSH
62335: LD_VAR 0 5
62339: PPUSH
62340: CALL_OW 3
62344: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62345: CALL 62510 0 0
// exit ;
62349: POP
62350: POP
62351: GO 62505
// end else
62353: GO 62451
// if factory = factoryWaypoints [ i ] [ 2 ] then
62355: LD_VAR 0 1
62359: PUSH
62360: LD_EXP 73
62364: PUSH
62365: LD_VAR 0 5
62369: ARRAY
62370: PUSH
62371: LD_INT 2
62373: ARRAY
62374: EQUAL
62375: IFFALSE 62451
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
62377: LD_ADDR_EXP 73
62381: PUSH
62382: LD_EXP 73
62386: PPUSH
62387: LD_VAR 0 5
62391: PPUSH
62392: CALL_OW 3
62396: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
62397: LD_ADDR_EXP 73
62401: PUSH
62402: LD_EXP 73
62406: PPUSH
62407: LD_VAR 0 1
62411: PPUSH
62412: CALL_OW 255
62416: PUSH
62417: LD_VAR 0 1
62421: PUSH
62422: LD_VAR 0 2
62426: PUSH
62427: LD_VAR 0 3
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: PPUSH
62438: CALL 39340 0 2
62442: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62443: CALL 62510 0 0
// exit ;
62447: POP
62448: POP
62449: GO 62505
// end ; end ;
62451: GO 62290
62453: POP
62454: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
62455: LD_ADDR_EXP 73
62459: PUSH
62460: LD_EXP 73
62464: PPUSH
62465: LD_VAR 0 1
62469: PPUSH
62470: CALL_OW 255
62474: PUSH
62475: LD_VAR 0 1
62479: PUSH
62480: LD_VAR 0 2
62484: PUSH
62485: LD_VAR 0 3
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: PPUSH
62496: CALL 39340 0 2
62500: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62501: CALL 62510 0 0
// end ;
62505: LD_VAR 0 4
62509: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62510: LD_INT 0
62512: PPUSH
62513: PPUSH
62514: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62515: LD_STRING resetFactoryWaypoint();
62517: PPUSH
62518: CALL_OW 559
// if factoryWaypoints then
62522: LD_EXP 73
62526: IFFALSE 62647
// begin list := factoryWaypoints ;
62528: LD_ADDR_VAR 0 3
62532: PUSH
62533: LD_EXP 73
62537: ST_TO_ADDR
// for i := 1 to list do
62538: LD_ADDR_VAR 0 2
62542: PUSH
62543: DOUBLE
62544: LD_INT 1
62546: DEC
62547: ST_TO_ADDR
62548: LD_VAR 0 3
62552: PUSH
62553: FOR_TO
62554: IFFALSE 62645
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62556: LD_STRING setFactoryWaypointXY(
62558: PUSH
62559: LD_VAR 0 3
62563: PUSH
62564: LD_VAR 0 2
62568: ARRAY
62569: PUSH
62570: LD_INT 1
62572: ARRAY
62573: STR
62574: PUSH
62575: LD_STRING ,
62577: STR
62578: PUSH
62579: LD_VAR 0 3
62583: PUSH
62584: LD_VAR 0 2
62588: ARRAY
62589: PUSH
62590: LD_INT 2
62592: ARRAY
62593: STR
62594: PUSH
62595: LD_STRING ,
62597: STR
62598: PUSH
62599: LD_VAR 0 3
62603: PUSH
62604: LD_VAR 0 2
62608: ARRAY
62609: PUSH
62610: LD_INT 3
62612: ARRAY
62613: STR
62614: PUSH
62615: LD_STRING ,
62617: STR
62618: PUSH
62619: LD_VAR 0 3
62623: PUSH
62624: LD_VAR 0 2
62628: ARRAY
62629: PUSH
62630: LD_INT 4
62632: ARRAY
62633: STR
62634: PUSH
62635: LD_STRING )
62637: STR
62638: PPUSH
62639: CALL_OW 559
62643: GO 62553
62645: POP
62646: POP
// end ; end ;
62647: LD_VAR 0 1
62651: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62652: LD_INT 0
62654: PPUSH
// if HexInfo ( x , y ) = warehouse then
62655: LD_VAR 0 2
62659: PPUSH
62660: LD_VAR 0 3
62664: PPUSH
62665: CALL_OW 428
62669: PUSH
62670: LD_VAR 0 1
62674: EQUAL
62675: IFFALSE 62702
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62677: LD_ADDR_EXP 75
62681: PUSH
62682: LD_EXP 75
62686: PPUSH
62687: LD_VAR 0 1
62691: PPUSH
62692: LD_INT 0
62694: PPUSH
62695: CALL_OW 1
62699: ST_TO_ADDR
62700: GO 62753
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62702: LD_ADDR_EXP 75
62706: PUSH
62707: LD_EXP 75
62711: PPUSH
62712: LD_VAR 0 1
62716: PPUSH
62717: LD_VAR 0 1
62721: PPUSH
62722: CALL_OW 255
62726: PUSH
62727: LD_VAR 0 1
62731: PUSH
62732: LD_VAR 0 2
62736: PUSH
62737: LD_VAR 0 3
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: PPUSH
62748: CALL_OW 1
62752: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62753: CALL 62762 0 0
// end ;
62757: LD_VAR 0 4
62761: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62762: LD_INT 0
62764: PPUSH
62765: PPUSH
62766: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62767: LD_STRING resetWarehouseGatheringPoints();
62769: PPUSH
62770: CALL_OW 559
// if warehouseGatheringPoints then
62774: LD_EXP 75
62778: IFFALSE 62904
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62780: LD_ADDR_VAR 0 3
62784: PUSH
62785: LD_EXP 75
62789: PPUSH
62790: CALL 43274 0 1
62794: ST_TO_ADDR
// for i := 1 to list do
62795: LD_ADDR_VAR 0 2
62799: PUSH
62800: DOUBLE
62801: LD_INT 1
62803: DEC
62804: ST_TO_ADDR
62805: LD_VAR 0 3
62809: PUSH
62810: FOR_TO
62811: IFFALSE 62902
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62813: LD_STRING setWarehouseGatheringPointXY(
62815: PUSH
62816: LD_VAR 0 3
62820: PUSH
62821: LD_VAR 0 2
62825: ARRAY
62826: PUSH
62827: LD_INT 1
62829: ARRAY
62830: STR
62831: PUSH
62832: LD_STRING ,
62834: STR
62835: PUSH
62836: LD_VAR 0 3
62840: PUSH
62841: LD_VAR 0 2
62845: ARRAY
62846: PUSH
62847: LD_INT 2
62849: ARRAY
62850: STR
62851: PUSH
62852: LD_STRING ,
62854: STR
62855: PUSH
62856: LD_VAR 0 3
62860: PUSH
62861: LD_VAR 0 2
62865: ARRAY
62866: PUSH
62867: LD_INT 3
62869: ARRAY
62870: STR
62871: PUSH
62872: LD_STRING ,
62874: STR
62875: PUSH
62876: LD_VAR 0 3
62880: PUSH
62881: LD_VAR 0 2
62885: ARRAY
62886: PUSH
62887: LD_INT 4
62889: ARRAY
62890: STR
62891: PUSH
62892: LD_STRING )
62894: STR
62895: PPUSH
62896: CALL_OW 559
62900: GO 62810
62902: POP
62903: POP
// end ; end ;
62904: LD_VAR 0 1
62908: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
62909: LD_EXP 75
62913: IFFALSE 63608
62915: GO 62917
62917: DISABLE
62918: LD_INT 0
62920: PPUSH
62921: PPUSH
62922: PPUSH
62923: PPUSH
62924: PPUSH
62925: PPUSH
62926: PPUSH
62927: PPUSH
62928: PPUSH
// begin enable ;
62929: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
62930: LD_ADDR_VAR 0 3
62934: PUSH
62935: LD_EXP 75
62939: PPUSH
62940: CALL 43274 0 1
62944: ST_TO_ADDR
// if not list then
62945: LD_VAR 0 3
62949: NOT
62950: IFFALSE 62954
// exit ;
62952: GO 63608
// for i := 1 to list do
62954: LD_ADDR_VAR 0 1
62958: PUSH
62959: DOUBLE
62960: LD_INT 1
62962: DEC
62963: ST_TO_ADDR
62964: LD_VAR 0 3
62968: PUSH
62969: FOR_TO
62970: IFFALSE 63606
// begin depot := list [ i ] [ 2 ] ;
62972: LD_ADDR_VAR 0 8
62976: PUSH
62977: LD_VAR 0 3
62981: PUSH
62982: LD_VAR 0 1
62986: ARRAY
62987: PUSH
62988: LD_INT 2
62990: ARRAY
62991: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
62992: LD_ADDR_VAR 0 5
62996: PUSH
62997: LD_VAR 0 3
63001: PUSH
63002: LD_VAR 0 1
63006: ARRAY
63007: PUSH
63008: LD_INT 1
63010: ARRAY
63011: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
63012: LD_VAR 0 8
63016: PPUSH
63017: CALL_OW 301
63021: IFTRUE 63040
63023: PUSH
63024: LD_VAR 0 5
63028: PUSH
63029: LD_VAR 0 8
63033: PPUSH
63034: CALL_OW 255
63038: NONEQUAL
63039: OR
63040: IFFALSE 63069
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
63042: LD_ADDR_EXP 75
63046: PUSH
63047: LD_EXP 75
63051: PPUSH
63052: LD_VAR 0 8
63056: PPUSH
63057: LD_INT 0
63059: PPUSH
63060: CALL_OW 1
63064: ST_TO_ADDR
// exit ;
63065: POP
63066: POP
63067: GO 63608
// end ; x := list [ i ] [ 3 ] ;
63069: LD_ADDR_VAR 0 6
63073: PUSH
63074: LD_VAR 0 3
63078: PUSH
63079: LD_VAR 0 1
63083: ARRAY
63084: PUSH
63085: LD_INT 3
63087: ARRAY
63088: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
63089: LD_ADDR_VAR 0 7
63093: PUSH
63094: LD_VAR 0 3
63098: PUSH
63099: LD_VAR 0 1
63103: ARRAY
63104: PUSH
63105: LD_INT 4
63107: ARRAY
63108: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
63109: LD_ADDR_VAR 0 9
63113: PUSH
63114: LD_VAR 0 6
63118: PPUSH
63119: LD_VAR 0 7
63123: PPUSH
63124: LD_INT 16
63126: PPUSH
63127: CALL 41848 0 3
63131: ST_TO_ADDR
// if not cratesNearbyPoint then
63132: LD_VAR 0 9
63136: NOT
63137: IFFALSE 63143
// exit ;
63139: POP
63140: POP
63141: GO 63608
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
63143: LD_ADDR_VAR 0 4
63147: PUSH
63148: LD_INT 22
63150: PUSH
63151: LD_VAR 0 5
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 3
63162: PUSH
63163: LD_INT 60
63165: PUSH
63166: EMPTY
63167: LIST
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 91
63175: PUSH
63176: LD_VAR 0 8
63180: PUSH
63181: LD_INT 6
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 2
63191: PUSH
63192: LD_INT 25
63194: PUSH
63195: LD_INT 2
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 25
63204: PUSH
63205: LD_INT 16
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: LIST
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: PPUSH
63223: CALL_OW 69
63227: PUSH
63228: LD_VAR 0 8
63232: PPUSH
63233: CALL_OW 313
63237: PPUSH
63238: LD_INT 3
63240: PUSH
63241: LD_INT 60
63243: PUSH
63244: EMPTY
63245: LIST
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 2
63253: PUSH
63254: LD_INT 25
63256: PUSH
63257: LD_INT 2
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 25
63266: PUSH
63267: LD_INT 16
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: LIST
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PPUSH
63283: CALL_OW 72
63287: UNION
63288: ST_TO_ADDR
// if tmp then
63289: LD_VAR 0 4
63293: IFFALSE 63373
// begin tmp := ShrinkArray ( tmp , 3 ) ;
63295: LD_ADDR_VAR 0 4
63299: PUSH
63300: LD_VAR 0 4
63304: PPUSH
63305: LD_INT 3
63307: PPUSH
63308: CALL 39655 0 2
63312: ST_TO_ADDR
// for j in tmp do
63313: LD_ADDR_VAR 0 2
63317: PUSH
63318: LD_VAR 0 4
63322: PUSH
63323: FOR_IN
63324: IFFALSE 63367
// begin if IsInUnit ( j ) then
63326: LD_VAR 0 2
63330: PPUSH
63331: CALL_OW 310
63335: IFFALSE 63346
// ComExit ( j ) ;
63337: LD_VAR 0 2
63341: PPUSH
63342: CALL 39738 0 1
// AddComCollect ( j , x , y ) ;
63346: LD_VAR 0 2
63350: PPUSH
63351: LD_VAR 0 6
63355: PPUSH
63356: LD_VAR 0 7
63360: PPUSH
63361: CALL_OW 177
// end ;
63365: GO 63323
63367: POP
63368: POP
// exit ;
63369: POP
63370: POP
63371: GO 63608
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
63373: LD_ADDR_VAR 0 4
63377: PUSH
63378: LD_INT 22
63380: PUSH
63381: LD_VAR 0 5
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 91
63392: PUSH
63393: LD_VAR 0 8
63397: PUSH
63398: LD_INT 8
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 2
63408: PUSH
63409: LD_INT 34
63411: PUSH
63412: LD_INT 12
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 34
63421: PUSH
63422: LD_INT 51
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 34
63431: PUSH
63432: LD_INT 32
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 34
63441: PUSH
63442: LD_INT 89
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: LIST
63460: PPUSH
63461: CALL_OW 69
63465: ST_TO_ADDR
// if tmp then
63466: LD_VAR 0 4
63470: IFFALSE 63604
// begin for j in tmp do
63472: LD_ADDR_VAR 0 2
63476: PUSH
63477: LD_VAR 0 4
63481: PUSH
63482: FOR_IN
63483: IFFALSE 63602
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
63485: LD_VAR 0 2
63489: PPUSH
63490: CALL_OW 262
63494: PUSH
63495: LD_INT 3
63497: EQUAL
63498: IFTRUE 63515
63500: PUSH
63501: LD_VAR 0 2
63505: PPUSH
63506: CALL_OW 261
63510: PUSH
63511: LD_INT 20
63513: GREATER
63514: OR
63515: IFFALSE 63529
63517: PUSH
63518: LD_VAR 0 2
63522: PPUSH
63523: CALL_OW 314
63527: NOT
63528: AND
63529: IFFALSE 63559
63531: PUSH
63532: LD_VAR 0 2
63536: PPUSH
63537: CALL_OW 263
63541: PUSH
63542: LD_INT 1
63544: NONEQUAL
63545: IFTRUE 63558
63547: PUSH
63548: LD_VAR 0 2
63552: PPUSH
63553: CALL_OW 311
63557: OR
63558: AND
63559: IFFALSE 63600
// begin ComCollect ( j , x , y ) ;
63561: LD_VAR 0 2
63565: PPUSH
63566: LD_VAR 0 6
63570: PPUSH
63571: LD_VAR 0 7
63575: PPUSH
63576: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
63580: LD_VAR 0 2
63584: PPUSH
63585: LD_VAR 0 8
63589: PPUSH
63590: CALL_OW 172
// exit ;
63594: POP
63595: POP
63596: POP
63597: POP
63598: GO 63608
// end ;
63600: GO 63482
63602: POP
63603: POP
// end ; end ;
63604: GO 62969
63606: POP
63607: POP
// end ; end_of_file end_of_file
63608: PPOPN 9
63610: END
// export function SOS_UnitDestroyed ( un ) ; begin
63611: LD_INT 0
63613: PPUSH
// ComRadiation ( un ) ;
63614: LD_VAR 0 1
63618: PPUSH
63619: CALL 64781 0 1
// end ;
63623: LD_VAR 0 2
63627: RET
// export function SOS_UnitKamikazed ( un ) ; begin
63628: LD_INT 0
63630: PPUSH
// ComRadiation ( un ) ;
63631: LD_VAR 0 1
63635: PPUSH
63636: CALL 64781 0 1
// end ;
63640: LD_VAR 0 2
63644: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
63645: LD_INT 0
63647: PPUSH
// end ;
63648: LD_VAR 0 4
63652: RET
// export function SOS_Command ( cmd ) ; begin
63653: LD_INT 0
63655: PPUSH
// end ;
63656: LD_VAR 0 2
63660: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
63661: LD_INT 0
63663: PPUSH
// end ;
63664: LD_VAR 0 6
63668: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
63669: LD_INT 0
63671: PPUSH
63672: PPUSH
63673: PPUSH
63674: PPUSH
63675: PPUSH
// if not vehicle or not factory then
63676: LD_VAR 0 1
63680: NOT
63681: IFTRUE 63690
63683: PUSH
63684: LD_VAR 0 2
63688: NOT
63689: OR
63690: IFFALSE 63694
// exit ;
63692: GO 64356
// weapon := GetWeapon ( vehicle ) ;
63694: LD_ADDR_VAR 0 7
63698: PUSH
63699: LD_VAR 0 1
63703: PPUSH
63704: CALL_OW 264
63708: ST_TO_ADDR
// if weapon = ar_miner then
63709: LD_VAR 0 7
63713: PUSH
63714: LD_INT 81
63716: EQUAL
63717: IFFALSE 63774
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
63719: LD_ADDR_EXP 84
63723: PUSH
63724: LD_EXP 84
63728: PPUSH
63729: LD_EXP 84
63733: PUSH
63734: LD_INT 1
63736: PLUS
63737: PPUSH
63738: LD_VAR 0 1
63742: PPUSH
63743: CALL_OW 1
63747: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63748: LD_ADDR_EXP 85
63752: PUSH
63753: LD_EXP 85
63757: PPUSH
63758: LD_EXP 85
63762: PUSH
63763: LD_INT 1
63765: PLUS
63766: PPUSH
63767: EMPTY
63768: PPUSH
63769: CALL_OW 1
63773: ST_TO_ADDR
// end ; if not factoryWaypoints then
63774: LD_EXP 73
63778: NOT
63779: IFFALSE 63783
// exit ;
63781: GO 64356
// for i := 1 to Count ( factoryWaypoints ) do
63783: LD_ADDR_VAR 0 4
63787: PUSH
63788: DOUBLE
63789: LD_INT 1
63791: DEC
63792: ST_TO_ADDR
63793: LD_EXP 73
63797: PPUSH
63798: CALL 3364 0 1
63802: PUSH
63803: FOR_TO
63804: IFFALSE 64354
// if factoryWaypoints [ i ] [ 2 ] = factory then
63806: LD_EXP 73
63810: PUSH
63811: LD_VAR 0 4
63815: ARRAY
63816: PUSH
63817: LD_INT 2
63819: ARRAY
63820: PUSH
63821: LD_VAR 0 2
63825: EQUAL
63826: IFFALSE 64352
// begin if GetControl ( vehicle ) = control_manual then
63828: LD_VAR 0 1
63832: PPUSH
63833: CALL_OW 263
63837: PUSH
63838: LD_INT 1
63840: EQUAL
63841: IFFALSE 64205
// begin driver := IsDrivenBy ( vehicle ) ;
63843: LD_ADDR_VAR 0 5
63847: PUSH
63848: LD_VAR 0 1
63852: PPUSH
63853: CALL_OW 311
63857: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
63858: LD_VAR 0 5
63862: PUSH
63863: LD_EXP 74
63867: IN
63868: IFTRUE 63882
63870: PUSH
63871: LD_VAR 0 1
63875: PUSH
63876: LD_EXP 74
63880: IN
63881: OR
63882: IFFALSE 63888
// exit ;
63884: POP
63885: POP
63886: GO 64356
// if not HasTask ( driver ) then
63888: LD_VAR 0 5
63892: PPUSH
63893: CALL_OW 314
63897: NOT
63898: IFFALSE 64203
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
63900: LD_ADDR_EXP 74
63904: PUSH
63905: LD_EXP 74
63909: PPUSH
63910: LD_VAR 0 5
63914: PPUSH
63915: CALL 39340 0 2
63919: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
63920: LD_ADDR_EXP 74
63924: PUSH
63925: LD_EXP 74
63929: PPUSH
63930: LD_VAR 0 1
63934: PPUSH
63935: CALL 39340 0 2
63939: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
63940: LD_ADDR_VAR 0 6
63944: PUSH
63945: LD_EXP 73
63949: PUSH
63950: LD_VAR 0 4
63954: ARRAY
63955: PUSH
63956: LD_INT 3
63958: ARRAY
63959: PPUSH
63960: LD_EXP 73
63964: PUSH
63965: LD_VAR 0 4
63969: ARRAY
63970: PUSH
63971: LD_INT 4
63973: ARRAY
63974: PPUSH
63975: CALL_OW 428
63979: ST_TO_ADDR
// if hex then
63980: LD_VAR 0 6
63984: IFFALSE 64002
// ComMoveUnit ( driver , hex ) else
63986: LD_VAR 0 5
63990: PPUSH
63991: LD_VAR 0 6
63995: PPUSH
63996: CALL_OW 112
64000: GO 64086
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
64002: LD_VAR 0 1
64006: PPUSH
64007: LD_EXP 73
64011: PUSH
64012: LD_VAR 0 4
64016: ARRAY
64017: PUSH
64018: LD_INT 3
64020: ARRAY
64021: PPUSH
64022: LD_EXP 73
64026: PUSH
64027: LD_VAR 0 4
64031: ARRAY
64032: PUSH
64033: LD_INT 4
64035: ARRAY
64036: PPUSH
64037: CALL_OW 297
64041: PUSH
64042: LD_INT 0
64044: GREATER
64045: IFFALSE 64086
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
64047: LD_VAR 0 5
64051: PPUSH
64052: LD_EXP 73
64056: PUSH
64057: LD_VAR 0 4
64061: ARRAY
64062: PUSH
64063: LD_INT 3
64065: ARRAY
64066: PPUSH
64067: LD_EXP 73
64071: PUSH
64072: LD_VAR 0 4
64076: ARRAY
64077: PUSH
64078: LD_INT 4
64080: ARRAY
64081: PPUSH
64082: CALL_OW 111
// AddComExitVehicle ( driver ) ;
64086: LD_VAR 0 5
64090: PPUSH
64091: CALL_OW 181
// if Multiplayer then
64095: LD_OWVAR 4
64099: IFFALSE 64148
// begin repeat wait ( 10 ) ;
64101: LD_INT 10
64103: PPUSH
64104: CALL_OW 67
// until not IsInUnit ( driver ) ;
64108: LD_VAR 0 5
64112: PPUSH
64113: CALL_OW 310
64117: NOT
64118: IFFALSE 64101
// if not HasTask ( driver ) then
64120: LD_VAR 0 5
64124: PPUSH
64125: CALL_OW 314
64129: NOT
64130: IFFALSE 64146
// ComEnterUnit ( driver , factory ) ;
64132: LD_VAR 0 5
64136: PPUSH
64137: LD_VAR 0 2
64141: PPUSH
64142: CALL_OW 120
// end else
64146: GO 64162
// AddComEnterUnit ( driver , factory ) ;
64148: LD_VAR 0 5
64152: PPUSH
64153: LD_VAR 0 2
64157: PPUSH
64158: CALL_OW 180
// wait ( 0 0$1 ) ;
64162: LD_INT 35
64164: PPUSH
64165: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
64169: LD_ADDR_EXP 74
64173: PUSH
64174: LD_EXP 74
64178: PUSH
64179: LD_VAR 0 5
64183: DIFF
64184: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
64185: LD_ADDR_EXP 74
64189: PUSH
64190: LD_EXP 74
64194: PUSH
64195: LD_VAR 0 1
64199: DIFF
64200: ST_TO_ADDR
// break ;
64201: GO 64354
// end ; end else
64203: GO 64352
// if GetControl ( vehicle ) = control_remote then
64205: LD_VAR 0 1
64209: PPUSH
64210: CALL_OW 263
64214: PUSH
64215: LD_INT 2
64217: EQUAL
64218: IFFALSE 64304
// begin wait ( 0 0$2 ) ;
64220: LD_INT 70
64222: PPUSH
64223: CALL_OW 67
// repeat wait ( 10 ) ;
64227: LD_INT 10
64229: PPUSH
64230: CALL_OW 67
// Connect ( vehicle ) ;
64234: LD_VAR 0 1
64238: PPUSH
64239: CALL 9642 0 1
// until IsControledBy ( vehicle ) ;
64243: LD_VAR 0 1
64247: PPUSH
64248: CALL_OW 312
64252: IFFALSE 64227
// wait ( 10 ) ;
64254: LD_INT 10
64256: PPUSH
64257: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
64261: LD_VAR 0 1
64265: PPUSH
64266: LD_EXP 73
64270: PUSH
64271: LD_VAR 0 4
64275: ARRAY
64276: PUSH
64277: LD_INT 3
64279: ARRAY
64280: PPUSH
64281: LD_EXP 73
64285: PUSH
64286: LD_VAR 0 4
64290: ARRAY
64291: PUSH
64292: LD_INT 4
64294: ARRAY
64295: PPUSH
64296: CALL_OW 111
// break ;
64300: GO 64354
// end else
64302: GO 64352
// begin wait ( 0 0$3 ) ;
64304: LD_INT 105
64306: PPUSH
64307: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
64311: LD_VAR 0 1
64315: PPUSH
64316: LD_EXP 73
64320: PUSH
64321: LD_VAR 0 4
64325: ARRAY
64326: PUSH
64327: LD_INT 3
64329: ARRAY
64330: PPUSH
64331: LD_EXP 73
64335: PUSH
64336: LD_VAR 0 4
64340: ARRAY
64341: PUSH
64342: LD_INT 4
64344: ARRAY
64345: PPUSH
64346: CALL_OW 111
// break ;
64350: GO 64354
// end ; end ;
64352: GO 63803
64354: POP
64355: POP
// end ;
64356: LD_VAR 0 3
64360: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
64361: LD_INT 0
64363: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
64364: LD_VAR 0 1
64368: PUSH
64369: LD_INT 250
64371: EQUAL
64372: IFFALSE 64389
64374: PUSH
64375: LD_VAR 0 2
64379: PPUSH
64380: CALL_OW 264
64384: PUSH
64385: LD_INT 81
64387: EQUAL
64388: AND
64389: IFFALSE 64410
// MinerPlaceMine ( unit , x , y ) ;
64391: LD_VAR 0 2
64395: PPUSH
64396: LD_VAR 0 4
64400: PPUSH
64401: LD_VAR 0 5
64405: PPUSH
64406: CALL 67756 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
64410: LD_VAR 0 1
64414: PUSH
64415: LD_INT 251
64417: EQUAL
64418: IFFALSE 64435
64420: PUSH
64421: LD_VAR 0 2
64425: PPUSH
64426: CALL_OW 264
64430: PUSH
64431: LD_INT 81
64433: EQUAL
64434: AND
64435: IFFALSE 64456
// MinerDetonateMine ( unit , x , y ) ;
64437: LD_VAR 0 2
64441: PPUSH
64442: LD_VAR 0 4
64446: PPUSH
64447: LD_VAR 0 5
64451: PPUSH
64452: CALL 68163 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
64456: LD_VAR 0 1
64460: PUSH
64461: LD_INT 252
64463: EQUAL
64464: IFFALSE 64481
64466: PUSH
64467: LD_VAR 0 2
64471: PPUSH
64472: CALL_OW 264
64476: PUSH
64477: LD_INT 81
64479: EQUAL
64480: AND
64481: IFFALSE 64502
// MinerCreateMinefield ( unit , x , y ) ;
64483: LD_VAR 0 2
64487: PPUSH
64488: LD_VAR 0 4
64492: PPUSH
64493: LD_VAR 0 5
64497: PPUSH
64498: CALL 68395 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
64502: LD_VAR 0 1
64506: PUSH
64507: LD_INT 253
64509: EQUAL
64510: IFFALSE 64527
64512: PUSH
64513: LD_VAR 0 2
64517: PPUSH
64518: CALL_OW 257
64522: PUSH
64523: LD_INT 5
64525: EQUAL
64526: AND
64527: IFFALSE 64548
// ComBinocular ( unit , x , y ) ;
64529: LD_VAR 0 2
64533: PPUSH
64534: LD_VAR 0 4
64538: PPUSH
64539: LD_VAR 0 5
64543: PPUSH
64544: CALL 68770 0 3
// if selectedUnit then
64548: LD_VAR 0 3
64552: IFFALSE 64612
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
64554: LD_VAR 0 1
64558: PUSH
64559: LD_INT 254
64561: EQUAL
64562: IFFALSE 64579
64564: PUSH
64565: LD_VAR 0 2
64569: PPUSH
64570: CALL_OW 264
64574: PUSH
64575: LD_INT 99
64577: EQUAL
64578: AND
64579: IFFALSE 64596
64581: PUSH
64582: LD_VAR 0 3
64586: PPUSH
64587: CALL_OW 263
64591: PUSH
64592: LD_INT 3
64594: EQUAL
64595: AND
64596: IFFALSE 64612
// HackDestroyVehicle ( unit , selectedUnit ) ;
64598: LD_VAR 0 2
64602: PPUSH
64603: LD_VAR 0 3
64607: PPUSH
64608: CALL 66946 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
64612: LD_VAR 0 1
64616: PUSH
64617: LD_INT 255
64619: EQUAL
64620: IFFALSE 64644
64622: PUSH
64623: LD_VAR 0 2
64627: PPUSH
64628: CALL_OW 264
64632: PUSH
64633: LD_INT 14
64635: PUSH
64636: LD_INT 53
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: IN
64643: AND
64644: IFFALSE 64662
64646: PUSH
64647: LD_VAR 0 4
64651: PPUSH
64652: LD_VAR 0 5
64656: PPUSH
64657: CALL_OW 488
64661: AND
64662: IFFALSE 64686
// CutTreeXYR ( unit , x , y , 12 ) ;
64664: LD_VAR 0 2
64668: PPUSH
64669: LD_VAR 0 4
64673: PPUSH
64674: LD_VAR 0 5
64678: PPUSH
64679: LD_INT 12
64681: PPUSH
64682: CALL 64877 0 4
// if cmd = 256 then
64686: LD_VAR 0 1
64690: PUSH
64691: LD_INT 256
64693: EQUAL
64694: IFFALSE 64715
// SetFactoryWaypoint ( unit , x , y ) ;
64696: LD_VAR 0 2
64700: PPUSH
64701: LD_VAR 0 4
64705: PPUSH
64706: LD_VAR 0 5
64710: PPUSH
64711: CALL 62156 0 3
// if cmd = 257 then
64715: LD_VAR 0 1
64719: PUSH
64720: LD_INT 257
64722: EQUAL
64723: IFFALSE 64744
// SetWarehouseGatheringPoint ( unit , x , y ) ;
64725: LD_VAR 0 2
64729: PPUSH
64730: LD_VAR 0 4
64734: PPUSH
64735: LD_VAR 0 5
64739: PPUSH
64740: CALL 62652 0 3
// if cmd = 258 then
64744: LD_VAR 0 1
64748: PUSH
64749: LD_INT 258
64751: EQUAL
64752: IFFALSE 64776
// BurnTreeXYR ( unit , x , y , 8 ) ;
64754: LD_VAR 0 2
64758: PPUSH
64759: LD_VAR 0 4
64763: PPUSH
64764: LD_VAR 0 5
64768: PPUSH
64769: LD_INT 8
64771: PPUSH
64772: CALL 65299 0 4
// end ;
64776: LD_VAR 0 6
64780: RET
// export function ComRadiation ( un ) ; var eff ; begin
64781: LD_INT 0
64783: PPUSH
64784: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
64785: LD_VAR 0 1
64789: PPUSH
64790: CALL_OW 264
64794: PUSH
64795: LD_INT 91
64797: NONEQUAL
64798: IFFALSE 64802
// exit ;
64800: GO 64872
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
64802: LD_INT 68
64804: PPUSH
64805: LD_VAR 0 1
64809: PPUSH
64810: CALL_OW 255
64814: PPUSH
64815: CALL_OW 321
64819: PUSH
64820: LD_INT 2
64822: EQUAL
64823: IFFALSE 64835
// eff := 50 else
64825: LD_ADDR_VAR 0 3
64829: PUSH
64830: LD_INT 50
64832: ST_TO_ADDR
64833: GO 64843
// eff := 25 ;
64835: LD_ADDR_VAR 0 3
64839: PUSH
64840: LD_INT 25
64842: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
64843: LD_VAR 0 1
64847: PPUSH
64848: CALL_OW 250
64852: PPUSH
64853: LD_VAR 0 1
64857: PPUSH
64858: CALL_OW 251
64862: PPUSH
64863: LD_VAR 0 3
64867: PPUSH
64868: CALL_OW 495
// end ;
64872: LD_VAR 0 2
64876: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
64877: LD_INT 0
64879: PPUSH
64880: PPUSH
64881: PPUSH
64882: PPUSH
64883: PPUSH
64884: PPUSH
64885: PPUSH
64886: PPUSH
64887: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
64888: LD_VAR 0 1
64892: PPUSH
64893: CALL_OW 302
64897: NOT
64898: IFTRUE 64917
64900: PUSH
64901: LD_VAR 0 2
64905: PPUSH
64906: LD_VAR 0 3
64910: PPUSH
64911: CALL_OW 488
64915: NOT
64916: OR
64917: IFTRUE 64926
64919: PUSH
64920: LD_VAR 0 4
64924: NOT
64925: OR
64926: IFFALSE 64930
// exit ;
64928: GO 65294
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
64930: LD_VAR 0 1
64934: PPUSH
64935: CALL_OW 437
64939: PPUSH
64940: CALL 3364 0 1
64944: PUSH
64945: LD_INT 10
64947: GREATER
64948: IFFALSE 64952
// exit ;
64950: GO 65294
// list := [ ] ;
64952: LD_ADDR_VAR 0 13
64956: PUSH
64957: EMPTY
64958: ST_TO_ADDR
// if x - r < 0 then
64959: LD_VAR 0 2
64963: PUSH
64964: LD_VAR 0 4
64968: MINUS
64969: PUSH
64970: LD_INT 0
64972: LESS
64973: IFFALSE 64985
// min_x := 0 else
64975: LD_ADDR_VAR 0 7
64979: PUSH
64980: LD_INT 0
64982: ST_TO_ADDR
64983: GO 65001
// min_x := x - r ;
64985: LD_ADDR_VAR 0 7
64989: PUSH
64990: LD_VAR 0 2
64994: PUSH
64995: LD_VAR 0 4
64999: MINUS
65000: ST_TO_ADDR
// if y - r < 0 then
65001: LD_VAR 0 3
65005: PUSH
65006: LD_VAR 0 4
65010: MINUS
65011: PUSH
65012: LD_INT 0
65014: LESS
65015: IFFALSE 65027
// min_y := 0 else
65017: LD_ADDR_VAR 0 8
65021: PUSH
65022: LD_INT 0
65024: ST_TO_ADDR
65025: GO 65043
// min_y := y - r ;
65027: LD_ADDR_VAR 0 8
65031: PUSH
65032: LD_VAR 0 3
65036: PUSH
65037: LD_VAR 0 4
65041: MINUS
65042: ST_TO_ADDR
// max_x := x + r ;
65043: LD_ADDR_VAR 0 9
65047: PUSH
65048: LD_VAR 0 2
65052: PUSH
65053: LD_VAR 0 4
65057: PLUS
65058: ST_TO_ADDR
// max_y := y + r ;
65059: LD_ADDR_VAR 0 10
65063: PUSH
65064: LD_VAR 0 3
65068: PUSH
65069: LD_VAR 0 4
65073: PLUS
65074: ST_TO_ADDR
// for _x = min_x to max_x do
65075: LD_ADDR_VAR 0 11
65079: PUSH
65080: DOUBLE
65081: LD_VAR 0 7
65085: DEC
65086: ST_TO_ADDR
65087: LD_VAR 0 9
65091: PUSH
65092: FOR_TO
65093: IFFALSE 65212
// for _y = min_y to max_y do
65095: LD_ADDR_VAR 0 12
65099: PUSH
65100: DOUBLE
65101: LD_VAR 0 8
65105: DEC
65106: ST_TO_ADDR
65107: LD_VAR 0 10
65111: PUSH
65112: FOR_TO
65113: IFFALSE 65208
// begin if not ValidHex ( _x , _y ) then
65115: LD_VAR 0 11
65119: PPUSH
65120: LD_VAR 0 12
65124: PPUSH
65125: CALL_OW 488
65129: NOT
65130: IFFALSE 65134
// continue ;
65132: GO 65112
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
65134: LD_VAR 0 11
65138: PPUSH
65139: LD_VAR 0 12
65143: PPUSH
65144: CALL_OW 351
65148: IFFALSE 65166
65150: PUSH
65151: LD_VAR 0 11
65155: PPUSH
65156: LD_VAR 0 12
65160: PPUSH
65161: CALL_OW 554
65165: AND
65166: IFFALSE 65206
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
65168: LD_ADDR_VAR 0 13
65172: PUSH
65173: LD_VAR 0 13
65177: PPUSH
65178: LD_VAR 0 13
65182: PUSH
65183: LD_INT 1
65185: PLUS
65186: PPUSH
65187: LD_VAR 0 11
65191: PUSH
65192: LD_VAR 0 12
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PPUSH
65201: CALL_OW 2
65205: ST_TO_ADDR
// end ;
65206: GO 65112
65208: POP
65209: POP
65210: GO 65092
65212: POP
65213: POP
// if not list then
65214: LD_VAR 0 13
65218: NOT
65219: IFFALSE 65223
// exit ;
65221: GO 65294
// for i in list do
65223: LD_ADDR_VAR 0 6
65227: PUSH
65228: LD_VAR 0 13
65232: PUSH
65233: FOR_IN
65234: IFFALSE 65292
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
65236: LD_VAR 0 1
65240: PPUSH
65241: LD_STRING M
65243: PUSH
65244: LD_VAR 0 6
65248: PUSH
65249: LD_INT 1
65251: ARRAY
65252: PUSH
65253: LD_VAR 0 6
65257: PUSH
65258: LD_INT 2
65260: ARRAY
65261: PUSH
65262: LD_INT 0
65264: PUSH
65265: LD_INT 0
65267: PUSH
65268: LD_INT 0
65270: PUSH
65271: LD_INT 0
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: PUSH
65283: EMPTY
65284: LIST
65285: PPUSH
65286: CALL_OW 447
65290: GO 65233
65292: POP
65293: POP
// end ;
65294: LD_VAR 0 5
65298: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
65299: LD_INT 0
65301: PPUSH
65302: PPUSH
65303: PPUSH
65304: PPUSH
65305: PPUSH
65306: PPUSH
65307: PPUSH
65308: PPUSH
65309: PPUSH
65310: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
65311: LD_VAR 0 1
65315: PPUSH
65316: CALL_OW 302
65320: NOT
65321: IFTRUE 65340
65323: PUSH
65324: LD_VAR 0 2
65328: PPUSH
65329: LD_VAR 0 3
65333: PPUSH
65334: CALL_OW 488
65338: NOT
65339: OR
65340: IFTRUE 65349
65342: PUSH
65343: LD_VAR 0 4
65347: NOT
65348: OR
65349: IFFALSE 65353
// exit ;
65351: GO 65892
// if Count ( GetTaskList ( flame ) ) > 10 then
65353: LD_VAR 0 1
65357: PPUSH
65358: CALL_OW 437
65362: PPUSH
65363: CALL 3364 0 1
65367: PUSH
65368: LD_INT 10
65370: GREATER
65371: IFFALSE 65375
// exit ;
65373: GO 65892
// list := [ ] ;
65375: LD_ADDR_VAR 0 13
65379: PUSH
65380: EMPTY
65381: ST_TO_ADDR
// if x - r < 0 then
65382: LD_VAR 0 2
65386: PUSH
65387: LD_VAR 0 4
65391: MINUS
65392: PUSH
65393: LD_INT 0
65395: LESS
65396: IFFALSE 65408
// min_x := 0 else
65398: LD_ADDR_VAR 0 7
65402: PUSH
65403: LD_INT 0
65405: ST_TO_ADDR
65406: GO 65424
// min_x := x - r ;
65408: LD_ADDR_VAR 0 7
65412: PUSH
65413: LD_VAR 0 2
65417: PUSH
65418: LD_VAR 0 4
65422: MINUS
65423: ST_TO_ADDR
// if y - r < 0 then
65424: LD_VAR 0 3
65428: PUSH
65429: LD_VAR 0 4
65433: MINUS
65434: PUSH
65435: LD_INT 0
65437: LESS
65438: IFFALSE 65450
// min_y := 0 else
65440: LD_ADDR_VAR 0 8
65444: PUSH
65445: LD_INT 0
65447: ST_TO_ADDR
65448: GO 65466
// min_y := y - r ;
65450: LD_ADDR_VAR 0 8
65454: PUSH
65455: LD_VAR 0 3
65459: PUSH
65460: LD_VAR 0 4
65464: MINUS
65465: ST_TO_ADDR
// max_x := x + r ;
65466: LD_ADDR_VAR 0 9
65470: PUSH
65471: LD_VAR 0 2
65475: PUSH
65476: LD_VAR 0 4
65480: PLUS
65481: ST_TO_ADDR
// max_y := y + r ;
65482: LD_ADDR_VAR 0 10
65486: PUSH
65487: LD_VAR 0 3
65491: PUSH
65492: LD_VAR 0 4
65496: PLUS
65497: ST_TO_ADDR
// for _x = min_x to max_x do
65498: LD_ADDR_VAR 0 11
65502: PUSH
65503: DOUBLE
65504: LD_VAR 0 7
65508: DEC
65509: ST_TO_ADDR
65510: LD_VAR 0 9
65514: PUSH
65515: FOR_TO
65516: IFFALSE 65635
// for _y = min_y to max_y do
65518: LD_ADDR_VAR 0 12
65522: PUSH
65523: DOUBLE
65524: LD_VAR 0 8
65528: DEC
65529: ST_TO_ADDR
65530: LD_VAR 0 10
65534: PUSH
65535: FOR_TO
65536: IFFALSE 65631
// begin if not ValidHex ( _x , _y ) then
65538: LD_VAR 0 11
65542: PPUSH
65543: LD_VAR 0 12
65547: PPUSH
65548: CALL_OW 488
65552: NOT
65553: IFFALSE 65557
// continue ;
65555: GO 65535
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
65557: LD_VAR 0 11
65561: PPUSH
65562: LD_VAR 0 12
65566: PPUSH
65567: CALL_OW 351
65571: IFFALSE 65589
65573: PUSH
65574: LD_VAR 0 11
65578: PPUSH
65579: LD_VAR 0 12
65583: PPUSH
65584: CALL_OW 554
65588: AND
65589: IFFALSE 65629
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
65591: LD_ADDR_VAR 0 13
65595: PUSH
65596: LD_VAR 0 13
65600: PPUSH
65601: LD_VAR 0 13
65605: PUSH
65606: LD_INT 1
65608: PLUS
65609: PPUSH
65610: LD_VAR 0 11
65614: PUSH
65615: LD_VAR 0 12
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PPUSH
65624: CALL_OW 2
65628: ST_TO_ADDR
// end ;
65629: GO 65535
65631: POP
65632: POP
65633: GO 65515
65635: POP
65636: POP
// if not list then
65637: LD_VAR 0 13
65641: NOT
65642: IFFALSE 65646
// exit ;
65644: GO 65892
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
65646: LD_ADDR_VAR 0 13
65650: PUSH
65651: LD_VAR 0 1
65655: PPUSH
65656: LD_VAR 0 13
65660: PPUSH
65661: LD_INT 1
65663: PPUSH
65664: LD_INT 1
65666: PPUSH
65667: CALL 6770 0 4
65671: ST_TO_ADDR
// ComStop ( flame ) ;
65672: LD_VAR 0 1
65676: PPUSH
65677: CALL_OW 141
// for i in list do
65681: LD_ADDR_VAR 0 6
65685: PUSH
65686: LD_VAR 0 13
65690: PUSH
65691: FOR_IN
65692: IFFALSE 65723
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
65694: LD_VAR 0 1
65698: PPUSH
65699: LD_VAR 0 6
65703: PUSH
65704: LD_INT 1
65706: ARRAY
65707: PPUSH
65708: LD_VAR 0 6
65712: PUSH
65713: LD_INT 2
65715: ARRAY
65716: PPUSH
65717: CALL_OW 176
65721: GO 65691
65723: POP
65724: POP
// repeat wait ( 0 0$1 ) ;
65725: LD_INT 35
65727: PPUSH
65728: CALL_OW 67
// task := GetTaskList ( flame ) ;
65732: LD_ADDR_VAR 0 14
65736: PUSH
65737: LD_VAR 0 1
65741: PPUSH
65742: CALL_OW 437
65746: ST_TO_ADDR
// if not task then
65747: LD_VAR 0 14
65751: NOT
65752: IFFALSE 65756
// exit ;
65754: GO 65892
// if task [ 1 ] [ 1 ] <> | then
65756: LD_VAR 0 14
65760: PUSH
65761: LD_INT 1
65763: ARRAY
65764: PUSH
65765: LD_INT 1
65767: ARRAY
65768: PUSH
65769: LD_STRING |
65771: NONEQUAL
65772: IFFALSE 65776
// exit ;
65774: GO 65892
// _x := task [ 1 ] [ 2 ] ;
65776: LD_ADDR_VAR 0 11
65780: PUSH
65781: LD_VAR 0 14
65785: PUSH
65786: LD_INT 1
65788: ARRAY
65789: PUSH
65790: LD_INT 2
65792: ARRAY
65793: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
65794: LD_ADDR_VAR 0 12
65798: PUSH
65799: LD_VAR 0 14
65803: PUSH
65804: LD_INT 1
65806: ARRAY
65807: PUSH
65808: LD_INT 3
65810: ARRAY
65811: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
65812: LD_VAR 0 11
65816: PPUSH
65817: LD_VAR 0 12
65821: PPUSH
65822: CALL_OW 351
65826: NOT
65827: IFTRUE 65846
65829: PUSH
65830: LD_VAR 0 11
65834: PPUSH
65835: LD_VAR 0 12
65839: PPUSH
65840: CALL_OW 554
65844: NOT
65845: OR
65846: IFFALSE 65880
// begin task := Delete ( task , 1 ) ;
65848: LD_ADDR_VAR 0 14
65852: PUSH
65853: LD_VAR 0 14
65857: PPUSH
65858: LD_INT 1
65860: PPUSH
65861: CALL_OW 3
65865: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
65866: LD_VAR 0 1
65870: PPUSH
65871: LD_VAR 0 14
65875: PPUSH
65876: CALL_OW 446
// end ; until not HasTask ( flame ) ;
65880: LD_VAR 0 1
65884: PPUSH
65885: CALL_OW 314
65889: NOT
65890: IFFALSE 65725
// end ;
65892: LD_VAR 0 5
65896: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
65897: LD_EXP 77
65901: NOT
65902: IFFALSE 65952
65904: GO 65906
65906: DISABLE
// begin initHack := true ;
65907: LD_ADDR_EXP 77
65911: PUSH
65912: LD_INT 1
65914: ST_TO_ADDR
// hackTanks := [ ] ;
65915: LD_ADDR_EXP 78
65919: PUSH
65920: EMPTY
65921: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
65922: LD_ADDR_EXP 79
65926: PUSH
65927: EMPTY
65928: ST_TO_ADDR
// hackLimit := 3 ;
65929: LD_ADDR_EXP 80
65933: PUSH
65934: LD_INT 3
65936: ST_TO_ADDR
// hackDist := 12 ;
65937: LD_ADDR_EXP 81
65941: PUSH
65942: LD_INT 12
65944: ST_TO_ADDR
// hackCounter := [ ] ;
65945: LD_ADDR_EXP 82
65949: PUSH
65950: EMPTY
65951: ST_TO_ADDR
// end ;
65952: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
65953: LD_EXP 77
65957: IFFALSE 65975
65959: PUSH
65960: LD_INT 34
65962: PUSH
65963: LD_INT 99
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PPUSH
65970: CALL_OW 69
65974: AND
65975: IFFALSE 66228
65977: GO 65979
65979: DISABLE
65980: LD_INT 0
65982: PPUSH
65983: PPUSH
// begin enable ;
65984: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
65985: LD_ADDR_VAR 0 1
65989: PUSH
65990: LD_INT 34
65992: PUSH
65993: LD_INT 99
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PPUSH
66000: CALL_OW 69
66004: PUSH
66005: FOR_IN
66006: IFFALSE 66226
// begin if not i in hackTanks then
66008: LD_VAR 0 1
66012: PUSH
66013: LD_EXP 78
66017: IN
66018: NOT
66019: IFFALSE 66102
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
66021: LD_ADDR_EXP 78
66025: PUSH
66026: LD_EXP 78
66030: PPUSH
66031: LD_EXP 78
66035: PUSH
66036: LD_INT 1
66038: PLUS
66039: PPUSH
66040: LD_VAR 0 1
66044: PPUSH
66045: CALL_OW 1
66049: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
66050: LD_ADDR_EXP 79
66054: PUSH
66055: LD_EXP 79
66059: PPUSH
66060: LD_EXP 79
66064: PUSH
66065: LD_INT 1
66067: PLUS
66068: PPUSH
66069: EMPTY
66070: PPUSH
66071: CALL_OW 1
66075: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
66076: LD_ADDR_EXP 82
66080: PUSH
66081: LD_EXP 82
66085: PPUSH
66086: LD_EXP 82
66090: PUSH
66091: LD_INT 1
66093: PLUS
66094: PPUSH
66095: EMPTY
66096: PPUSH
66097: CALL_OW 1
66101: ST_TO_ADDR
// end ; if not IsOk ( i ) then
66102: LD_VAR 0 1
66106: PPUSH
66107: CALL_OW 302
66111: NOT
66112: IFFALSE 66125
// begin HackUnlinkAll ( i ) ;
66114: LD_VAR 0 1
66118: PPUSH
66119: CALL 66231 0 1
// continue ;
66123: GO 66005
// end ; HackCheckCapturedStatus ( i ) ;
66125: LD_VAR 0 1
66129: PPUSH
66130: CALL 66676 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
66134: LD_ADDR_VAR 0 2
66138: PUSH
66139: LD_INT 81
66141: PUSH
66142: LD_VAR 0 1
66146: PPUSH
66147: CALL_OW 255
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 33
66158: PUSH
66159: LD_INT 3
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 91
66168: PUSH
66169: LD_VAR 0 1
66173: PUSH
66174: LD_EXP 81
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 50
66186: PUSH
66187: EMPTY
66188: LIST
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: PPUSH
66196: CALL_OW 69
66200: ST_TO_ADDR
// if not tmp then
66201: LD_VAR 0 2
66205: NOT
66206: IFFALSE 66210
// continue ;
66208: GO 66005
// HackLink ( i , tmp ) ;
66210: LD_VAR 0 1
66214: PPUSH
66215: LD_VAR 0 2
66219: PPUSH
66220: CALL 66367 0 2
// end ;
66224: GO 66005
66226: POP
66227: POP
// end ;
66228: PPOPN 2
66230: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
66231: LD_INT 0
66233: PPUSH
66234: PPUSH
66235: PPUSH
// if not hack in hackTanks then
66236: LD_VAR 0 1
66240: PUSH
66241: LD_EXP 78
66245: IN
66246: NOT
66247: IFFALSE 66251
// exit ;
66249: GO 66362
// index := GetElementIndex ( hackTanks , hack ) ;
66251: LD_ADDR_VAR 0 4
66255: PUSH
66256: LD_EXP 78
66260: PPUSH
66261: LD_VAR 0 1
66265: PPUSH
66266: CALL 6065 0 2
66270: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
66271: LD_EXP 79
66275: PUSH
66276: LD_VAR 0 4
66280: ARRAY
66281: IFFALSE 66362
// begin for i in hackTanksCaptured [ index ] do
66283: LD_ADDR_VAR 0 3
66287: PUSH
66288: LD_EXP 79
66292: PUSH
66293: LD_VAR 0 4
66297: ARRAY
66298: PUSH
66299: FOR_IN
66300: IFFALSE 66326
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
66302: LD_VAR 0 3
66306: PUSH
66307: LD_INT 1
66309: ARRAY
66310: PPUSH
66311: LD_VAR 0 3
66315: PUSH
66316: LD_INT 2
66318: ARRAY
66319: PPUSH
66320: CALL_OW 235
66324: GO 66299
66326: POP
66327: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
66328: LD_ADDR_EXP 79
66332: PUSH
66333: LD_EXP 79
66337: PPUSH
66338: LD_VAR 0 4
66342: PPUSH
66343: EMPTY
66344: PPUSH
66345: CALL_OW 1
66349: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
66350: LD_VAR 0 1
66354: PPUSH
66355: LD_INT 0
66357: PPUSH
66358: CALL_OW 505
// end ; end ;
66362: LD_VAR 0 2
66366: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
66367: LD_INT 0
66369: PPUSH
66370: PPUSH
66371: PPUSH
// if not hack in hackTanks or not vehicles then
66372: LD_VAR 0 1
66376: PUSH
66377: LD_EXP 78
66381: IN
66382: NOT
66383: IFTRUE 66392
66385: PUSH
66386: LD_VAR 0 2
66390: NOT
66391: OR
66392: IFFALSE 66396
// exit ;
66394: GO 66671
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
66396: LD_ADDR_VAR 0 2
66400: PUSH
66401: LD_VAR 0 1
66405: PPUSH
66406: LD_VAR 0 2
66410: PPUSH
66411: LD_INT 1
66413: PPUSH
66414: LD_INT 1
66416: PPUSH
66417: CALL 6717 0 4
66421: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
66422: LD_ADDR_VAR 0 5
66426: PUSH
66427: LD_EXP 78
66431: PPUSH
66432: LD_VAR 0 1
66436: PPUSH
66437: CALL 6065 0 2
66441: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
66442: LD_EXP 79
66446: PUSH
66447: LD_VAR 0 5
66451: ARRAY
66452: PUSH
66453: LD_EXP 80
66457: LESS
66458: IFFALSE 66647
// begin for i := 1 to vehicles do
66460: LD_ADDR_VAR 0 4
66464: PUSH
66465: DOUBLE
66466: LD_INT 1
66468: DEC
66469: ST_TO_ADDR
66470: LD_VAR 0 2
66474: PUSH
66475: FOR_TO
66476: IFFALSE 66645
// begin if hackTanksCaptured [ index ] = hackLimit then
66478: LD_EXP 79
66482: PUSH
66483: LD_VAR 0 5
66487: ARRAY
66488: PUSH
66489: LD_EXP 80
66493: EQUAL
66494: IFFALSE 66498
// break ;
66496: GO 66645
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
66498: LD_ADDR_EXP 82
66502: PUSH
66503: LD_EXP 82
66507: PPUSH
66508: LD_VAR 0 5
66512: PPUSH
66513: LD_EXP 82
66517: PUSH
66518: LD_VAR 0 5
66522: ARRAY
66523: PUSH
66524: LD_INT 1
66526: PLUS
66527: PPUSH
66528: CALL_OW 1
66532: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
66533: LD_ADDR_EXP 79
66537: PUSH
66538: LD_EXP 79
66542: PPUSH
66543: LD_VAR 0 5
66547: PUSH
66548: LD_EXP 79
66552: PUSH
66553: LD_VAR 0 5
66557: ARRAY
66558: PUSH
66559: LD_INT 1
66561: PLUS
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PPUSH
66567: LD_VAR 0 2
66571: PUSH
66572: LD_VAR 0 4
66576: ARRAY
66577: PUSH
66578: LD_VAR 0 2
66582: PUSH
66583: LD_VAR 0 4
66587: ARRAY
66588: PPUSH
66589: CALL_OW 255
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PPUSH
66598: CALL 6282 0 3
66602: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
66603: LD_VAR 0 2
66607: PUSH
66608: LD_VAR 0 4
66612: ARRAY
66613: PPUSH
66614: LD_VAR 0 1
66618: PPUSH
66619: CALL_OW 255
66623: PPUSH
66624: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
66628: LD_VAR 0 2
66632: PUSH
66633: LD_VAR 0 4
66637: ARRAY
66638: PPUSH
66639: CALL_OW 141
// end ;
66643: GO 66475
66645: POP
66646: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66647: LD_VAR 0 1
66651: PPUSH
66652: LD_EXP 79
66656: PUSH
66657: LD_VAR 0 5
66661: ARRAY
66662: PUSH
66663: LD_INT 0
66665: PLUS
66666: PPUSH
66667: CALL_OW 505
// end ;
66671: LD_VAR 0 3
66675: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
66676: LD_INT 0
66678: PPUSH
66679: PPUSH
66680: PPUSH
66681: PPUSH
// if not hack in hackTanks then
66682: LD_VAR 0 1
66686: PUSH
66687: LD_EXP 78
66691: IN
66692: NOT
66693: IFFALSE 66697
// exit ;
66695: GO 66941
// index := GetElementIndex ( hackTanks , hack ) ;
66697: LD_ADDR_VAR 0 4
66701: PUSH
66702: LD_EXP 78
66706: PPUSH
66707: LD_VAR 0 1
66711: PPUSH
66712: CALL 6065 0 2
66716: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
66717: LD_ADDR_VAR 0 3
66721: PUSH
66722: DOUBLE
66723: LD_EXP 79
66727: PUSH
66728: LD_VAR 0 4
66732: ARRAY
66733: INC
66734: ST_TO_ADDR
66735: LD_INT 1
66737: PUSH
66738: FOR_DOWNTO
66739: IFFALSE 66915
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
66741: LD_ADDR_VAR 0 5
66745: PUSH
66746: LD_EXP 79
66750: PUSH
66751: LD_VAR 0 4
66755: ARRAY
66756: PUSH
66757: LD_VAR 0 3
66761: ARRAY
66762: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
66763: LD_VAR 0 5
66767: PUSH
66768: LD_INT 1
66770: ARRAY
66771: PPUSH
66772: CALL_OW 302
66776: NOT
66777: IFTRUE 66805
66779: PUSH
66780: LD_VAR 0 5
66784: PUSH
66785: LD_INT 1
66787: ARRAY
66788: PPUSH
66789: CALL_OW 255
66793: PUSH
66794: LD_VAR 0 1
66798: PPUSH
66799: CALL_OW 255
66803: NONEQUAL
66804: OR
66805: IFFALSE 66913
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
66807: LD_VAR 0 5
66811: PUSH
66812: LD_INT 1
66814: ARRAY
66815: PPUSH
66816: CALL_OW 305
66820: IFFALSE 66848
66822: PUSH
66823: LD_VAR 0 5
66827: PUSH
66828: LD_INT 1
66830: ARRAY
66831: PPUSH
66832: CALL_OW 255
66836: PUSH
66837: LD_VAR 0 1
66841: PPUSH
66842: CALL_OW 255
66846: EQUAL
66847: AND
66848: IFFALSE 66872
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
66850: LD_VAR 0 5
66854: PUSH
66855: LD_INT 1
66857: ARRAY
66858: PPUSH
66859: LD_VAR 0 5
66863: PUSH
66864: LD_INT 2
66866: ARRAY
66867: PPUSH
66868: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
66872: LD_ADDR_EXP 79
66876: PUSH
66877: LD_EXP 79
66881: PPUSH
66882: LD_VAR 0 4
66886: PPUSH
66887: LD_EXP 79
66891: PUSH
66892: LD_VAR 0 4
66896: ARRAY
66897: PPUSH
66898: LD_VAR 0 3
66902: PPUSH
66903: CALL_OW 3
66907: PPUSH
66908: CALL_OW 1
66912: ST_TO_ADDR
// end ; end ;
66913: GO 66738
66915: POP
66916: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66917: LD_VAR 0 1
66921: PPUSH
66922: LD_EXP 79
66926: PUSH
66927: LD_VAR 0 4
66931: ARRAY
66932: PUSH
66933: LD_INT 0
66935: PLUS
66936: PPUSH
66937: CALL_OW 505
// end ;
66941: LD_VAR 0 2
66945: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
66946: LD_INT 0
66948: PPUSH
66949: PPUSH
66950: PPUSH
66951: PPUSH
// if not hack in hackTanks then
66952: LD_VAR 0 1
66956: PUSH
66957: LD_EXP 78
66961: IN
66962: NOT
66963: IFFALSE 66967
// exit ;
66965: GO 67052
// index := GetElementIndex ( hackTanks , hack ) ;
66967: LD_ADDR_VAR 0 5
66971: PUSH
66972: LD_EXP 78
66976: PPUSH
66977: LD_VAR 0 1
66981: PPUSH
66982: CALL 6065 0 2
66986: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
66987: LD_ADDR_VAR 0 4
66991: PUSH
66992: DOUBLE
66993: LD_INT 1
66995: DEC
66996: ST_TO_ADDR
66997: LD_EXP 79
67001: PUSH
67002: LD_VAR 0 5
67006: ARRAY
67007: PUSH
67008: FOR_TO
67009: IFFALSE 67050
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
67011: LD_EXP 79
67015: PUSH
67016: LD_VAR 0 5
67020: ARRAY
67021: PUSH
67022: LD_VAR 0 4
67026: ARRAY
67027: PUSH
67028: LD_INT 1
67030: ARRAY
67031: PUSH
67032: LD_VAR 0 2
67036: EQUAL
67037: IFFALSE 67048
// KillUnit ( vehicle ) ;
67039: LD_VAR 0 2
67043: PPUSH
67044: CALL_OW 66
67048: GO 67008
67050: POP
67051: POP
// end ;
67052: LD_VAR 0 3
67056: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
67057: LD_EXP 83
67061: NOT
67062: IFFALSE 67195
67064: GO 67066
67066: DISABLE
67067: LD_INT 0
67069: PPUSH
// begin initMiner := true ;
67070: LD_ADDR_EXP 83
67074: PUSH
67075: LD_INT 1
67077: ST_TO_ADDR
// minersList := [ ] ;
67078: LD_ADDR_EXP 84
67082: PUSH
67083: EMPTY
67084: ST_TO_ADDR
// minerMinesList := [ ] ;
67085: LD_ADDR_EXP 85
67089: PUSH
67090: EMPTY
67091: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
67092: LD_ADDR_EXP 86
67096: PUSH
67097: LD_INT 10
67099: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
67100: LD_ADDR_VAR 0 1
67104: PUSH
67105: LD_INT 34
67107: PUSH
67108: LD_INT 81
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PPUSH
67115: CALL_OW 69
67119: PUSH
67120: FOR_IN
67121: IFFALSE 67193
// begin if not i in minersList then
67123: LD_VAR 0 1
67127: PUSH
67128: LD_EXP 84
67132: IN
67133: NOT
67134: IFFALSE 67191
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
67136: LD_ADDR_EXP 84
67140: PUSH
67141: LD_EXP 84
67145: PPUSH
67146: LD_EXP 84
67150: PUSH
67151: LD_INT 1
67153: PLUS
67154: PPUSH
67155: LD_VAR 0 1
67159: PPUSH
67160: CALL_OW 1
67164: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
67165: LD_ADDR_EXP 85
67169: PUSH
67170: LD_EXP 85
67174: PPUSH
67175: LD_EXP 85
67179: PUSH
67180: LD_INT 1
67182: PLUS
67183: PPUSH
67184: EMPTY
67185: PPUSH
67186: CALL_OW 1
67190: ST_TO_ADDR
// end end ;
67191: GO 67120
67193: POP
67194: POP
// end ;
67195: PPOPN 1
67197: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
67198: LD_EXP 83
67202: IFFALSE 67233
67204: PUSH
67205: LD_EXP 85
67209: PPUSH
67210: CALL 3364 0 1
67214: IFTRUE 67232
67216: PUSH
67217: LD_INT 34
67219: PUSH
67220: LD_INT 81
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PPUSH
67227: CALL_OW 69
67231: OR
67232: AND
67233: IFFALSE 67753
67235: GO 67237
67237: DISABLE
67238: LD_INT 0
67240: PPUSH
67241: PPUSH
67242: PPUSH
67243: PPUSH
// begin enable ;
67244: ENABLE
// for i := minerMinesList downto 1 do
67245: LD_ADDR_VAR 0 1
67249: PUSH
67250: DOUBLE
67251: LD_EXP 85
67255: INC
67256: ST_TO_ADDR
67257: LD_INT 1
67259: PUSH
67260: FOR_DOWNTO
67261: IFFALSE 67751
// begin side := GetSide ( minersList [ i ] ) ;
67263: LD_ADDR_VAR 0 3
67267: PUSH
67268: LD_EXP 84
67272: PUSH
67273: LD_VAR 0 1
67277: ARRAY
67278: PPUSH
67279: CALL_OW 255
67283: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
67284: LD_EXP 84
67288: PUSH
67289: LD_VAR 0 1
67293: ARRAY
67294: PPUSH
67295: CALL_OW 300
67299: IFFALSE 67320
67301: PUSH
67302: LD_VAR 0 3
67306: PUSH
67307: LD_OWVAR 2
67311: PUSH
67312: LD_INT 9
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: IN
67319: AND
67320: IFFALSE 67353
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
67322: LD_EXP 84
67326: PUSH
67327: LD_VAR 0 1
67331: ARRAY
67332: PPUSH
67333: LD_EXP 85
67337: PUSH
67338: LD_VAR 0 1
67342: ARRAY
67343: PPUSH
67344: CALL 3364 0 1
67348: PPUSH
67349: CALL_OW 505
// if not minerMinesList [ i ] then
67353: LD_EXP 85
67357: PUSH
67358: LD_VAR 0 1
67362: ARRAY
67363: NOT
67364: IFFALSE 67368
// continue ;
67366: GO 67260
// for j := minerMinesList [ i ] downto 1 do
67368: LD_ADDR_VAR 0 2
67372: PUSH
67373: DOUBLE
67374: LD_EXP 85
67378: PUSH
67379: LD_VAR 0 1
67383: ARRAY
67384: INC
67385: ST_TO_ADDR
67386: LD_INT 1
67388: PUSH
67389: FOR_DOWNTO
67390: IFFALSE 67747
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
67392: LD_EXP 84
67396: PUSH
67397: LD_VAR 0 1
67401: ARRAY
67402: PPUSH
67403: CALL_OW 301
67407: IFTRUE 67427
67409: PUSH
67410: LD_EXP 84
67414: PUSH
67415: LD_VAR 0 1
67419: ARRAY
67420: PPUSH
67421: CALL_OW 305
67425: NOT
67426: OR
67427: IFFALSE 67518
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
67429: LD_EXP 85
67433: PUSH
67434: LD_VAR 0 1
67438: ARRAY
67439: PUSH
67440: LD_VAR 0 2
67444: ARRAY
67445: PUSH
67446: LD_INT 1
67448: ARRAY
67449: PPUSH
67450: LD_EXP 85
67454: PUSH
67455: LD_VAR 0 1
67459: ARRAY
67460: PUSH
67461: LD_VAR 0 2
67465: ARRAY
67466: PUSH
67467: LD_INT 2
67469: ARRAY
67470: PPUSH
67471: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
67475: LD_ADDR_EXP 85
67479: PUSH
67480: LD_EXP 85
67484: PPUSH
67485: LD_VAR 0 1
67489: PPUSH
67490: LD_EXP 85
67494: PUSH
67495: LD_VAR 0 1
67499: ARRAY
67500: PPUSH
67501: LD_VAR 0 2
67505: PPUSH
67506: CALL_OW 3
67510: PPUSH
67511: CALL_OW 1
67515: ST_TO_ADDR
// continue ;
67516: GO 67389
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
67518: LD_ADDR_VAR 0 4
67522: PUSH
67523: LD_EXP 85
67527: PUSH
67528: LD_VAR 0 1
67532: ARRAY
67533: PUSH
67534: LD_VAR 0 2
67538: ARRAY
67539: PUSH
67540: LD_INT 1
67542: ARRAY
67543: PPUSH
67544: LD_EXP 85
67548: PUSH
67549: LD_VAR 0 1
67553: ARRAY
67554: PUSH
67555: LD_VAR 0 2
67559: ARRAY
67560: PUSH
67561: LD_INT 2
67563: ARRAY
67564: PPUSH
67565: CALL_OW 428
67569: ST_TO_ADDR
// if not tmp then
67570: LD_VAR 0 4
67574: NOT
67575: IFFALSE 67579
// continue ;
67577: GO 67389
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
67579: LD_VAR 0 4
67583: PUSH
67584: LD_INT 81
67586: PUSH
67587: LD_VAR 0 3
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PPUSH
67596: CALL_OW 69
67600: IN
67601: IFFALSE 67651
67603: PUSH
67604: LD_EXP 85
67608: PUSH
67609: LD_VAR 0 1
67613: ARRAY
67614: PUSH
67615: LD_VAR 0 2
67619: ARRAY
67620: PUSH
67621: LD_INT 1
67623: ARRAY
67624: PPUSH
67625: LD_EXP 85
67629: PUSH
67630: LD_VAR 0 1
67634: ARRAY
67635: PUSH
67636: LD_VAR 0 2
67640: ARRAY
67641: PUSH
67642: LD_INT 2
67644: ARRAY
67645: PPUSH
67646: CALL_OW 458
67650: AND
67651: IFFALSE 67745
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
67653: LD_EXP 85
67657: PUSH
67658: LD_VAR 0 1
67662: ARRAY
67663: PUSH
67664: LD_VAR 0 2
67668: ARRAY
67669: PUSH
67670: LD_INT 1
67672: ARRAY
67673: PPUSH
67674: LD_EXP 85
67678: PUSH
67679: LD_VAR 0 1
67683: ARRAY
67684: PUSH
67685: LD_VAR 0 2
67689: ARRAY
67690: PUSH
67691: LD_INT 2
67693: ARRAY
67694: PPUSH
67695: LD_VAR 0 3
67699: PPUSH
67700: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
67704: LD_ADDR_EXP 85
67708: PUSH
67709: LD_EXP 85
67713: PPUSH
67714: LD_VAR 0 1
67718: PPUSH
67719: LD_EXP 85
67723: PUSH
67724: LD_VAR 0 1
67728: ARRAY
67729: PPUSH
67730: LD_VAR 0 2
67734: PPUSH
67735: CALL_OW 3
67739: PPUSH
67740: CALL_OW 1
67744: ST_TO_ADDR
// end ; end ;
67745: GO 67389
67747: POP
67748: POP
// end ;
67749: GO 67260
67751: POP
67752: POP
// end ;
67753: PPOPN 4
67755: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
67756: LD_INT 0
67758: PPUSH
67759: PPUSH
67760: PPUSH
67761: PPUSH
// result := false ;
67762: LD_ADDR_VAR 0 4
67766: PUSH
67767: LD_INT 0
67769: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
67770: LD_VAR 0 1
67774: PPUSH
67775: CALL_OW 264
67779: PUSH
67780: LD_INT 81
67782: EQUAL
67783: NOT
67784: IFFALSE 67788
// exit ;
67786: GO 68158
// side := GetSide ( unit ) ;
67788: LD_ADDR_VAR 0 6
67792: PUSH
67793: LD_VAR 0 1
67797: PPUSH
67798: CALL_OW 255
67802: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
67803: LD_ADDR_VAR 0 5
67807: PUSH
67808: LD_EXP 84
67812: PPUSH
67813: LD_VAR 0 1
67817: PPUSH
67818: CALL 6065 0 2
67822: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
67823: LD_EXP 85
67827: PUSH
67828: LD_VAR 0 5
67832: ARRAY
67833: PUSH
67834: LD_EXP 86
67838: GREATEREQUAL
67839: IFFALSE 67843
// exit ;
67841: GO 68158
// ComMoveXY ( unit , x , y ) ;
67843: LD_VAR 0 1
67847: PPUSH
67848: LD_VAR 0 2
67852: PPUSH
67853: LD_VAR 0 3
67857: PPUSH
67858: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67862: LD_INT 35
67864: PPUSH
67865: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
67869: LD_VAR 0 1
67873: PPUSH
67874: LD_VAR 0 2
67878: PPUSH
67879: LD_VAR 0 3
67883: PPUSH
67884: CALL 38121 0 3
67888: NOT
67889: IFFALSE 67902
67891: PUSH
67892: LD_VAR 0 1
67896: PPUSH
67897: CALL_OW 314
67901: AND
67902: IFFALSE 67906
// exit ;
67904: GO 68158
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
67906: LD_VAR 0 2
67910: PPUSH
67911: LD_VAR 0 3
67915: PPUSH
67916: CALL_OW 428
67920: PUSH
67921: LD_VAR 0 1
67925: EQUAL
67926: IFFALSE 67940
67928: PUSH
67929: LD_VAR 0 1
67933: PPUSH
67934: CALL_OW 314
67938: NOT
67939: AND
67940: IFFALSE 67862
// if MineAtPos ( x , y ) then
67942: LD_VAR 0 2
67946: PPUSH
67947: LD_VAR 0 3
67951: PPUSH
67952: CALL_OW 458
67956: IFFALSE 67960
// exit ;
67958: GO 68158
// if your_side = side then
67960: LD_OWVAR 2
67964: PUSH
67965: LD_VAR 0 6
67969: EQUAL
67970: IFFALSE 67989
// PlaySoundXY ( x , y , PlantMine ) ;
67972: LD_VAR 0 2
67976: PPUSH
67977: LD_VAR 0 3
67981: PPUSH
67982: LD_STRING PlantMine
67984: PPUSH
67985: CALL_OW 366
// repeat wait ( 1 ) ;
67989: LD_INT 1
67991: PPUSH
67992: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
67996: LD_VAR 0 2
68000: PPUSH
68001: LD_VAR 0 3
68005: PPUSH
68006: LD_VAR 0 6
68010: PPUSH
68011: LD_INT 0
68013: PPUSH
68014: CALL_OW 454
68018: IFFALSE 67989
// if MineAtPos ( x , y ) then
68020: LD_VAR 0 2
68024: PPUSH
68025: LD_VAR 0 3
68029: PPUSH
68030: CALL_OW 458
68034: IFFALSE 68150
// begin for i in minerMinesList [ index ] do
68036: LD_ADDR_VAR 0 7
68040: PUSH
68041: LD_EXP 85
68045: PUSH
68046: LD_VAR 0 5
68050: ARRAY
68051: PUSH
68052: FOR_IN
68053: IFFALSE 68095
// if i [ 1 ] = x and i [ 2 ] = y then
68055: LD_VAR 0 7
68059: PUSH
68060: LD_INT 1
68062: ARRAY
68063: PUSH
68064: LD_VAR 0 2
68068: EQUAL
68069: IFFALSE 68087
68071: PUSH
68072: LD_VAR 0 7
68076: PUSH
68077: LD_INT 2
68079: ARRAY
68080: PUSH
68081: LD_VAR 0 3
68085: EQUAL
68086: AND
68087: IFFALSE 68093
// exit ;
68089: POP
68090: POP
68091: GO 68158
68093: GO 68052
68095: POP
68096: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
68097: LD_ADDR_EXP 85
68101: PUSH
68102: LD_EXP 85
68106: PPUSH
68107: LD_VAR 0 5
68111: PUSH
68112: LD_EXP 85
68116: PUSH
68117: LD_VAR 0 5
68121: ARRAY
68122: PUSH
68123: LD_INT 1
68125: PLUS
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PPUSH
68131: LD_VAR 0 2
68135: PUSH
68136: LD_VAR 0 3
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PPUSH
68145: CALL 6282 0 3
68149: ST_TO_ADDR
// end ; result := true ;
68150: LD_ADDR_VAR 0 4
68154: PUSH
68155: LD_INT 1
68157: ST_TO_ADDR
// end ;
68158: LD_VAR 0 4
68162: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
68163: LD_INT 0
68165: PPUSH
68166: PPUSH
68167: PPUSH
// if not unit in minersList then
68168: LD_VAR 0 1
68172: PUSH
68173: LD_EXP 84
68177: IN
68178: NOT
68179: IFFALSE 68183
// exit ;
68181: GO 68390
// index := GetElementIndex ( minersList , unit ) ;
68183: LD_ADDR_VAR 0 6
68187: PUSH
68188: LD_EXP 84
68192: PPUSH
68193: LD_VAR 0 1
68197: PPUSH
68198: CALL 6065 0 2
68202: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
68203: LD_ADDR_VAR 0 5
68207: PUSH
68208: DOUBLE
68209: LD_EXP 85
68213: PUSH
68214: LD_VAR 0 6
68218: ARRAY
68219: INC
68220: ST_TO_ADDR
68221: LD_INT 1
68223: PUSH
68224: FOR_DOWNTO
68225: IFFALSE 68388
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
68227: LD_EXP 85
68231: PUSH
68232: LD_VAR 0 6
68236: ARRAY
68237: PUSH
68238: LD_VAR 0 5
68242: ARRAY
68243: PUSH
68244: LD_INT 1
68246: ARRAY
68247: PPUSH
68248: LD_EXP 85
68252: PUSH
68253: LD_VAR 0 6
68257: ARRAY
68258: PUSH
68259: LD_VAR 0 5
68263: ARRAY
68264: PUSH
68265: LD_INT 2
68267: ARRAY
68268: PPUSH
68269: LD_VAR 0 2
68273: PPUSH
68274: LD_VAR 0 3
68278: PPUSH
68279: CALL_OW 298
68283: PUSH
68284: LD_INT 6
68286: LESS
68287: IFFALSE 68386
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68289: LD_EXP 85
68293: PUSH
68294: LD_VAR 0 6
68298: ARRAY
68299: PUSH
68300: LD_VAR 0 5
68304: ARRAY
68305: PUSH
68306: LD_INT 1
68308: ARRAY
68309: PPUSH
68310: LD_EXP 85
68314: PUSH
68315: LD_VAR 0 6
68319: ARRAY
68320: PUSH
68321: LD_VAR 0 5
68325: ARRAY
68326: PUSH
68327: LD_INT 2
68329: ARRAY
68330: PPUSH
68331: LD_VAR 0 1
68335: PPUSH
68336: CALL_OW 255
68340: PPUSH
68341: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68345: LD_ADDR_EXP 85
68349: PUSH
68350: LD_EXP 85
68354: PPUSH
68355: LD_VAR 0 6
68359: PPUSH
68360: LD_EXP 85
68364: PUSH
68365: LD_VAR 0 6
68369: ARRAY
68370: PPUSH
68371: LD_VAR 0 5
68375: PPUSH
68376: CALL_OW 3
68380: PPUSH
68381: CALL_OW 1
68385: ST_TO_ADDR
// end ; end ;
68386: GO 68224
68388: POP
68389: POP
// end ;
68390: LD_VAR 0 4
68394: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
68395: LD_INT 0
68397: PPUSH
68398: PPUSH
68399: PPUSH
68400: PPUSH
68401: PPUSH
68402: PPUSH
68403: PPUSH
68404: PPUSH
68405: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
68406: LD_VAR 0 1
68410: PPUSH
68411: CALL_OW 264
68415: PUSH
68416: LD_INT 81
68418: EQUAL
68419: NOT
68420: IFTRUE 68435
68422: PUSH
68423: LD_VAR 0 1
68427: PUSH
68428: LD_EXP 84
68432: IN
68433: NOT
68434: OR
68435: IFFALSE 68439
// exit ;
68437: GO 68765
// index := GetElementIndex ( minersList , unit ) ;
68439: LD_ADDR_VAR 0 6
68443: PUSH
68444: LD_EXP 84
68448: PPUSH
68449: LD_VAR 0 1
68453: PPUSH
68454: CALL 6065 0 2
68458: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
68459: LD_ADDR_VAR 0 8
68463: PUSH
68464: LD_EXP 86
68468: PUSH
68469: LD_EXP 85
68473: PUSH
68474: LD_VAR 0 6
68478: ARRAY
68479: MINUS
68480: ST_TO_ADDR
// if not minesFreeAmount then
68481: LD_VAR 0 8
68485: NOT
68486: IFFALSE 68490
// exit ;
68488: GO 68765
// tmp := [ ] ;
68490: LD_ADDR_VAR 0 7
68494: PUSH
68495: EMPTY
68496: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
68497: LD_ADDR_VAR 0 5
68501: PUSH
68502: DOUBLE
68503: LD_INT 1
68505: DEC
68506: ST_TO_ADDR
68507: LD_VAR 0 8
68511: PUSH
68512: FOR_TO
68513: IFFALSE 68712
// begin _d := rand ( 0 , 5 ) ;
68515: LD_ADDR_VAR 0 11
68519: PUSH
68520: LD_INT 0
68522: PPUSH
68523: LD_INT 5
68525: PPUSH
68526: CALL_OW 12
68530: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
68531: LD_ADDR_VAR 0 12
68535: PUSH
68536: LD_INT 2
68538: PPUSH
68539: LD_INT 6
68541: PPUSH
68542: CALL_OW 12
68546: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
68547: LD_ADDR_VAR 0 9
68551: PUSH
68552: LD_VAR 0 2
68556: PPUSH
68557: LD_VAR 0 11
68561: PPUSH
68562: LD_VAR 0 12
68566: PPUSH
68567: CALL_OW 272
68571: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
68572: LD_ADDR_VAR 0 10
68576: PUSH
68577: LD_VAR 0 3
68581: PPUSH
68582: LD_VAR 0 11
68586: PPUSH
68587: LD_VAR 0 12
68591: PPUSH
68592: CALL_OW 273
68596: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
68597: LD_VAR 0 9
68601: PPUSH
68602: LD_VAR 0 10
68606: PPUSH
68607: CALL_OW 488
68611: IFFALSE 68635
68613: PUSH
68614: LD_VAR 0 9
68618: PUSH
68619: LD_VAR 0 10
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_VAR 0 7
68632: IN
68633: NOT
68634: AND
68635: IFFALSE 68654
68637: PUSH
68638: LD_VAR 0 9
68642: PPUSH
68643: LD_VAR 0 10
68647: PPUSH
68648: CALL_OW 458
68652: NOT
68653: AND
68654: IFFALSE 68696
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
68656: LD_ADDR_VAR 0 7
68660: PUSH
68661: LD_VAR 0 7
68665: PPUSH
68666: LD_VAR 0 7
68670: PUSH
68671: LD_INT 1
68673: PLUS
68674: PPUSH
68675: LD_VAR 0 9
68679: PUSH
68680: LD_VAR 0 10
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PPUSH
68689: CALL_OW 1
68693: ST_TO_ADDR
68694: GO 68710
// i := i - 1 ;
68696: LD_ADDR_VAR 0 5
68700: PUSH
68701: LD_VAR 0 5
68705: PUSH
68706: LD_INT 1
68708: MINUS
68709: ST_TO_ADDR
// end ;
68710: GO 68512
68712: POP
68713: POP
// for i in tmp do
68714: LD_ADDR_VAR 0 5
68718: PUSH
68719: LD_VAR 0 7
68723: PUSH
68724: FOR_IN
68725: IFFALSE 68763
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
68727: LD_VAR 0 1
68731: PPUSH
68732: LD_VAR 0 5
68736: PUSH
68737: LD_INT 1
68739: ARRAY
68740: PPUSH
68741: LD_VAR 0 5
68745: PUSH
68746: LD_INT 2
68748: ARRAY
68749: PPUSH
68750: CALL 67756 0 3
68754: NOT
68755: IFFALSE 68761
// exit ;
68757: POP
68758: POP
68759: GO 68765
68761: GO 68724
68763: POP
68764: POP
// end ;
68765: LD_VAR 0 4
68769: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
68770: LD_INT 0
68772: PPUSH
68773: PPUSH
68774: PPUSH
68775: PPUSH
68776: PPUSH
68777: PPUSH
68778: PPUSH
68779: PPUSH
68780: PPUSH
// if GetClass ( unit ) <> class_sniper then
68781: LD_VAR 0 1
68785: PPUSH
68786: CALL_OW 257
68790: PUSH
68791: LD_INT 5
68793: NONEQUAL
68794: IFFALSE 68798
// exit ;
68796: GO 69268
// dist := 8 ;
68798: LD_ADDR_VAR 0 5
68802: PUSH
68803: LD_INT 8
68805: ST_TO_ADDR
// viewRange := 12 ;
68806: LD_ADDR_VAR 0 8
68810: PUSH
68811: LD_INT 12
68813: ST_TO_ADDR
// side := GetSide ( unit ) ;
68814: LD_ADDR_VAR 0 6
68818: PUSH
68819: LD_VAR 0 1
68823: PPUSH
68824: CALL_OW 255
68828: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
68829: LD_INT 61
68831: PPUSH
68832: LD_VAR 0 6
68836: PPUSH
68837: CALL_OW 321
68841: PUSH
68842: LD_INT 2
68844: EQUAL
68845: IFFALSE 68855
// viewRange := 16 ;
68847: LD_ADDR_VAR 0 8
68851: PUSH
68852: LD_INT 16
68854: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
68855: LD_VAR 0 1
68859: PPUSH
68860: LD_VAR 0 2
68864: PPUSH
68865: LD_VAR 0 3
68869: PPUSH
68870: CALL_OW 297
68874: PUSH
68875: LD_VAR 0 5
68879: GREATER
68880: IFFALSE 68959
// begin ComMoveXY ( unit , x , y ) ;
68882: LD_VAR 0 1
68886: PPUSH
68887: LD_VAR 0 2
68891: PPUSH
68892: LD_VAR 0 3
68896: PPUSH
68897: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68901: LD_INT 35
68903: PPUSH
68904: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
68908: LD_VAR 0 1
68912: PPUSH
68913: LD_VAR 0 2
68917: PPUSH
68918: LD_VAR 0 3
68922: PPUSH
68923: CALL 38121 0 3
68927: NOT
68928: IFFALSE 68932
// exit ;
68930: GO 69268
// until GetDistUnitXY ( unit , x , y ) < dist ;
68932: LD_VAR 0 1
68936: PPUSH
68937: LD_VAR 0 2
68941: PPUSH
68942: LD_VAR 0 3
68946: PPUSH
68947: CALL_OW 297
68951: PUSH
68952: LD_VAR 0 5
68956: LESS
68957: IFFALSE 68901
// end ; ComTurnXY ( unit , x , y ) ;
68959: LD_VAR 0 1
68963: PPUSH
68964: LD_VAR 0 2
68968: PPUSH
68969: LD_VAR 0 3
68973: PPUSH
68974: CALL_OW 118
// repeat if Multiplayer then
68978: LD_OWVAR 4
68982: IFFALSE 68993
// wait ( 35 ) else
68984: LD_INT 35
68986: PPUSH
68987: CALL_OW 67
68991: GO 69000
// wait ( 5 ) ;
68993: LD_INT 5
68995: PPUSH
68996: CALL_OW 67
// _d := GetDir ( unit ) ;
69000: LD_ADDR_VAR 0 11
69004: PUSH
69005: LD_VAR 0 1
69009: PPUSH
69010: CALL_OW 254
69014: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
69015: LD_ADDR_VAR 0 7
69019: PUSH
69020: LD_VAR 0 1
69024: PPUSH
69025: CALL_OW 250
69029: PPUSH
69030: LD_VAR 0 1
69034: PPUSH
69035: CALL_OW 251
69039: PPUSH
69040: LD_VAR 0 2
69044: PPUSH
69045: LD_VAR 0 3
69049: PPUSH
69050: CALL 40757 0 4
69054: ST_TO_ADDR
// until dir = _d ;
69055: LD_VAR 0 7
69059: PUSH
69060: LD_VAR 0 11
69064: EQUAL
69065: IFFALSE 68978
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
69067: LD_ADDR_VAR 0 9
69071: PUSH
69072: LD_VAR 0 1
69076: PPUSH
69077: CALL_OW 250
69081: PPUSH
69082: LD_VAR 0 7
69086: PPUSH
69087: LD_VAR 0 5
69091: PPUSH
69092: CALL_OW 272
69096: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
69097: LD_ADDR_VAR 0 10
69101: PUSH
69102: LD_VAR 0 1
69106: PPUSH
69107: CALL_OW 251
69111: PPUSH
69112: LD_VAR 0 7
69116: PPUSH
69117: LD_VAR 0 5
69121: PPUSH
69122: CALL_OW 273
69126: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69127: LD_VAR 0 9
69131: PPUSH
69132: LD_VAR 0 10
69136: PPUSH
69137: CALL_OW 488
69141: NOT
69142: IFFALSE 69146
// exit ;
69144: GO 69268
// ComAnimCustom ( unit , 1 ) ;
69146: LD_VAR 0 1
69150: PPUSH
69151: LD_INT 1
69153: PPUSH
69154: CALL_OW 592
// p := 0 ;
69158: LD_ADDR_VAR 0 12
69162: PUSH
69163: LD_INT 0
69165: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
69166: LD_VAR 0 9
69170: PPUSH
69171: LD_VAR 0 10
69175: PPUSH
69176: LD_VAR 0 6
69180: PPUSH
69181: LD_VAR 0 8
69185: PPUSH
69186: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
69190: LD_INT 35
69192: PPUSH
69193: CALL_OW 67
// p := Inc ( p ) ;
69197: LD_ADDR_VAR 0 12
69201: PUSH
69202: LD_VAR 0 12
69206: PPUSH
69207: CALL 40713 0 1
69211: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
69212: LD_VAR 0 12
69216: PUSH
69217: LD_INT 3
69219: EQUAL
69220: IFTRUE 69234
69222: PUSH
69223: LD_VAR 0 1
69227: PPUSH
69228: CALL_OW 302
69232: NOT
69233: OR
69234: IFTRUE 69247
69236: PUSH
69237: LD_VAR 0 1
69241: PPUSH
69242: CALL_OW 301
69246: OR
69247: IFFALSE 69190
// RemoveSeeing ( _x , _y , side ) ;
69249: LD_VAR 0 9
69253: PPUSH
69254: LD_VAR 0 10
69258: PPUSH
69259: LD_VAR 0 6
69263: PPUSH
69264: CALL_OW 331
// end ;
69268: LD_VAR 0 4
69272: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
69273: LD_INT 0
69275: PPUSH
69276: PPUSH
69277: PPUSH
69278: PPUSH
69279: PPUSH
69280: PPUSH
69281: PPUSH
69282: PPUSH
69283: PPUSH
69284: PPUSH
69285: PPUSH
// if not unit then
69286: LD_VAR 0 1
69290: NOT
69291: IFFALSE 69295
// exit ;
69293: GO 69566
// side := GetSide ( unit ) ;
69295: LD_ADDR_VAR 0 3
69299: PUSH
69300: LD_VAR 0 1
69304: PPUSH
69305: CALL_OW 255
69309: ST_TO_ADDR
// x := GetX ( unit ) ;
69310: LD_ADDR_VAR 0 5
69314: PUSH
69315: LD_VAR 0 1
69319: PPUSH
69320: CALL_OW 250
69324: ST_TO_ADDR
// y := GetY ( unit ) ;
69325: LD_ADDR_VAR 0 6
69329: PUSH
69330: LD_VAR 0 1
69334: PPUSH
69335: CALL_OW 251
69339: ST_TO_ADDR
// r := 8 ;
69340: LD_ADDR_VAR 0 4
69344: PUSH
69345: LD_INT 8
69347: ST_TO_ADDR
// if x - r < 0 then
69348: LD_VAR 0 5
69352: PUSH
69353: LD_VAR 0 4
69357: MINUS
69358: PUSH
69359: LD_INT 0
69361: LESS
69362: IFFALSE 69374
// min_x := 0 else
69364: LD_ADDR_VAR 0 7
69368: PUSH
69369: LD_INT 0
69371: ST_TO_ADDR
69372: GO 69390
// min_x := x - r ;
69374: LD_ADDR_VAR 0 7
69378: PUSH
69379: LD_VAR 0 5
69383: PUSH
69384: LD_VAR 0 4
69388: MINUS
69389: ST_TO_ADDR
// if y - r < 0 then
69390: LD_VAR 0 6
69394: PUSH
69395: LD_VAR 0 4
69399: MINUS
69400: PUSH
69401: LD_INT 0
69403: LESS
69404: IFFALSE 69416
// min_y := 0 else
69406: LD_ADDR_VAR 0 8
69410: PUSH
69411: LD_INT 0
69413: ST_TO_ADDR
69414: GO 69432
// min_y := y - r ;
69416: LD_ADDR_VAR 0 8
69420: PUSH
69421: LD_VAR 0 6
69425: PUSH
69426: LD_VAR 0 4
69430: MINUS
69431: ST_TO_ADDR
// max_x := x + r ;
69432: LD_ADDR_VAR 0 9
69436: PUSH
69437: LD_VAR 0 5
69441: PUSH
69442: LD_VAR 0 4
69446: PLUS
69447: ST_TO_ADDR
// max_y := y + r ;
69448: LD_ADDR_VAR 0 10
69452: PUSH
69453: LD_VAR 0 6
69457: PUSH
69458: LD_VAR 0 4
69462: PLUS
69463: ST_TO_ADDR
// for _x = min_x to max_x do
69464: LD_ADDR_VAR 0 11
69468: PUSH
69469: DOUBLE
69470: LD_VAR 0 7
69474: DEC
69475: ST_TO_ADDR
69476: LD_VAR 0 9
69480: PUSH
69481: FOR_TO
69482: IFFALSE 69564
// for _y = min_y to max_y do
69484: LD_ADDR_VAR 0 12
69488: PUSH
69489: DOUBLE
69490: LD_VAR 0 8
69494: DEC
69495: ST_TO_ADDR
69496: LD_VAR 0 10
69500: PUSH
69501: FOR_TO
69502: IFFALSE 69560
// begin if not ValidHex ( _x , _y ) then
69504: LD_VAR 0 11
69508: PPUSH
69509: LD_VAR 0 12
69513: PPUSH
69514: CALL_OW 488
69518: NOT
69519: IFFALSE 69523
// continue ;
69521: GO 69501
// if MineAtPos ( _x , _y ) then
69523: LD_VAR 0 11
69527: PPUSH
69528: LD_VAR 0 12
69532: PPUSH
69533: CALL_OW 458
69537: IFFALSE 69558
// ViewMineAtPos ( _x , _y , side ) ;
69539: LD_VAR 0 11
69543: PPUSH
69544: LD_VAR 0 12
69548: PPUSH
69549: LD_VAR 0 3
69553: PPUSH
69554: CALL_OW 457
// end ;
69558: GO 69501
69560: POP
69561: POP
69562: GO 69481
69564: POP
69565: POP
// end ;
69566: LD_VAR 0 2
69570: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
69571: LD_INT 0
69573: PPUSH
69574: PPUSH
69575: PPUSH
69576: PPUSH
69577: PPUSH
69578: PPUSH
69579: PPUSH
// if not units then
69580: LD_VAR 0 1
69584: NOT
69585: IFFALSE 69589
// exit ;
69587: GO 70053
// scaners := [ ] ;
69589: LD_ADDR_VAR 0 6
69593: PUSH
69594: EMPTY
69595: ST_TO_ADDR
// for i in units do
69596: LD_ADDR_VAR 0 3
69600: PUSH
69601: LD_VAR 0 1
69605: PUSH
69606: FOR_IN
69607: IFFALSE 69764
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
69609: LD_VAR 0 3
69613: PPUSH
69614: CALL_OW 264
69618: PUSH
69619: LD_INT 11
69621: NONEQUAL
69622: IFTRUE 69636
69624: PUSH
69625: LD_VAR 0 3
69629: PPUSH
69630: CALL_OW 302
69634: NOT
69635: OR
69636: IFTRUE 69653
69638: PUSH
69639: LD_VAR 0 3
69643: PPUSH
69644: CALL_OW 110
69648: PUSH
69649: LD_INT 502
69651: EQUAL
69652: OR
69653: IFFALSE 69657
// continue ;
69655: GO 69606
// ComStop ( i ) ;
69657: LD_VAR 0 3
69661: PPUSH
69662: CALL_OW 141
// x := GetX ( i ) ;
69666: LD_ADDR_VAR 0 4
69670: PUSH
69671: LD_VAR 0 3
69675: PPUSH
69676: CALL_OW 250
69680: ST_TO_ADDR
// y := GetY ( i ) ;
69681: LD_ADDR_VAR 0 5
69685: PUSH
69686: LD_VAR 0 3
69690: PPUSH
69691: CALL_OW 251
69695: ST_TO_ADDR
// if GetSide ( i ) = your_side then
69696: LD_VAR 0 3
69700: PPUSH
69701: CALL_OW 255
69705: PUSH
69706: LD_OWVAR 2
69710: EQUAL
69711: IFFALSE 69730
// PlaySoundXY ( x , y , mineDetector ) ;
69713: LD_VAR 0 4
69717: PPUSH
69718: LD_VAR 0 5
69722: PPUSH
69723: LD_STRING mineDetector
69725: PPUSH
69726: CALL_OW 366
// scaners := Join ( scaners , i ) ;
69730: LD_ADDR_VAR 0 6
69734: PUSH
69735: LD_VAR 0 6
69739: PPUSH
69740: LD_VAR 0 3
69744: PPUSH
69745: CALL 39340 0 2
69749: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
69750: LD_VAR 0 3
69754: PPUSH
69755: LD_INT 502
69757: PPUSH
69758: CALL_OW 109
// end ;
69762: GO 69606
69764: POP
69765: POP
// if not scaners then
69766: LD_VAR 0 6
69770: NOT
69771: IFFALSE 69775
// exit ;
69773: GO 70053
// wait ( 3 ) ;
69775: LD_INT 3
69777: PPUSH
69778: CALL_OW 67
// timer := 6 ;
69782: LD_ADDR_VAR 0 7
69786: PUSH
69787: LD_INT 6
69789: ST_TO_ADDR
// repeat for i in scaners do
69790: LD_ADDR_VAR 0 3
69794: PUSH
69795: LD_VAR 0 6
69799: PUSH
69800: FOR_IN
69801: IFFALSE 69951
// begin side := GetSide ( i ) ;
69803: LD_ADDR_VAR 0 8
69807: PUSH
69808: LD_VAR 0 3
69812: PPUSH
69813: CALL_OW 255
69817: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
69818: LD_VAR 0 3
69822: PPUSH
69823: CALL_OW 302
69827: NOT
69828: IFTRUE 69841
69830: PUSH
69831: LD_VAR 0 3
69835: PPUSH
69836: CALL_OW 314
69840: OR
69841: IFTRUE 69872
69843: PUSH
69844: LD_VAR 0 3
69848: PPUSH
69849: CALL_OW 263
69853: PUSH
69854: LD_INT 1
69856: EQUAL
69857: IFFALSE 69871
69859: PUSH
69860: LD_VAR 0 3
69864: PPUSH
69865: CALL_OW 311
69869: NOT
69870: AND
69871: OR
69872: IFFALSE 69916
// begin SetUnitDisplayNumber ( i , 0 ) ;
69874: LD_VAR 0 3
69878: PPUSH
69879: LD_INT 0
69881: PPUSH
69882: CALL_OW 505
// SetTag ( i , 0 ) ;
69886: LD_VAR 0 3
69890: PPUSH
69891: LD_INT 0
69893: PPUSH
69894: CALL_OW 109
// scaners := scaners diff i ;
69898: LD_ADDR_VAR 0 6
69902: PUSH
69903: LD_VAR 0 6
69907: PUSH
69908: LD_VAR 0 3
69912: DIFF
69913: ST_TO_ADDR
// continue ;
69914: GO 69800
// end ; if side in [ your_side , 9 ] then
69916: LD_VAR 0 8
69920: PUSH
69921: LD_OWVAR 2
69925: PUSH
69926: LD_INT 9
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: IN
69933: IFFALSE 69949
// SetUnitDisplayNumber ( i , timer ) ;
69935: LD_VAR 0 3
69939: PPUSH
69940: LD_VAR 0 7
69944: PPUSH
69945: CALL_OW 505
// end ;
69949: GO 69800
69951: POP
69952: POP
// if not scaners then
69953: LD_VAR 0 6
69957: NOT
69958: IFFALSE 69962
// exit ;
69960: GO 70053
// timer := Dec ( timer ) ;
69962: LD_ADDR_VAR 0 7
69966: PUSH
69967: LD_VAR 0 7
69971: PPUSH
69972: CALL 40735 0 1
69976: ST_TO_ADDR
// wait ( 0 0$1 ) ;
69977: LD_INT 35
69979: PPUSH
69980: CALL_OW 67
// until timer = 0 ;
69984: LD_VAR 0 7
69988: PUSH
69989: LD_INT 0
69991: EQUAL
69992: IFFALSE 69790
// if not scaners then
69994: LD_VAR 0 6
69998: NOT
69999: IFFALSE 70003
// exit ;
70001: GO 70053
// for i in scaners do
70003: LD_ADDR_VAR 0 3
70007: PUSH
70008: LD_VAR 0 6
70012: PUSH
70013: FOR_IN
70014: IFFALSE 70051
// begin SetUnitDisplayNumber ( i , 0 ) ;
70016: LD_VAR 0 3
70020: PPUSH
70021: LD_INT 0
70023: PPUSH
70024: CALL_OW 505
// SetTag ( i , 0 ) ;
70028: LD_VAR 0 3
70032: PPUSH
70033: LD_INT 0
70035: PPUSH
70036: CALL_OW 109
// RevealDetectorMine ( i ) ;
70040: LD_VAR 0 3
70044: PPUSH
70045: CALL 69273 0 1
// end ;
70049: GO 70013
70051: POP
70052: POP
// end ;
70053: LD_VAR 0 2
70057: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
70058: LD_INT 0
70060: PPUSH
// if p1 = mine_detector_mode then
70061: LD_VAR 0 2
70065: PUSH
70066: LD_INT 103
70068: EQUAL
70069: IFFALSE 70080
// DetectMine ( units ) ;
70071: LD_VAR 0 1
70075: PPUSH
70076: CALL 69571 0 1
// end ; end_of_file
70080: LD_VAR 0 7
70084: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70085: LD_VAR 0 1
70089: PUSH
70090: LD_INT 200
70092: DOUBLE
70093: GREATEREQUAL
70094: IFFALSE 70102
70096: LD_INT 299
70098: DOUBLE
70099: LESSEQUAL
70100: IFTRUE 70104
70102: GO 70136
70104: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70105: LD_VAR 0 1
70109: PPUSH
70110: LD_VAR 0 2
70114: PPUSH
70115: LD_VAR 0 3
70119: PPUSH
70120: LD_VAR 0 4
70124: PPUSH
70125: LD_VAR 0 5
70129: PPUSH
70130: CALL 64361 0 5
70134: GO 70213
70136: LD_INT 300
70138: DOUBLE
70139: GREATEREQUAL
70140: IFFALSE 70148
70142: LD_INT 399
70144: DOUBLE
70145: LESSEQUAL
70146: IFTRUE 70150
70148: GO 70212
70150: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70151: LD_VAR 0 1
70155: PPUSH
70156: LD_VAR 0 2
70160: PPUSH
70161: LD_VAR 0 3
70165: PPUSH
70166: LD_VAR 0 4
70170: PPUSH
70171: LD_VAR 0 5
70175: PPUSH
70176: LD_VAR 0 6
70180: PPUSH
70181: LD_VAR 0 7
70185: PPUSH
70186: LD_VAR 0 8
70190: PPUSH
70191: LD_VAR 0 9
70195: PPUSH
70196: LD_VAR 0 10
70200: PPUSH
70201: LD_VAR 0 11
70205: PPUSH
70206: CALL 60164 0 11
70210: GO 70213
70212: POP
// end ;
70213: PPOPN 11
70215: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70216: LD_VAR 0 1
70220: PPUSH
70221: LD_VAR 0 2
70225: PPUSH
70226: LD_VAR 0 3
70230: PPUSH
70231: LD_VAR 0 4
70235: PPUSH
70236: LD_VAR 0 5
70240: PPUSH
70241: CALL 63661 0 5
// end ;
70245: PPOPN 5
70247: END
