// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 110 0 0
// PrepareNature ( 4 , 4 , 12 , 4 , 4 , 1 , 4 , natArea , watArea ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 12
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 4
  22: PPUSH
  23: LD_INT 1
  25: PPUSH
  26: LD_INT 4
  28: PPUSH
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: CALL 33245 0 9
// if gameType = 1 then
  39: LD_EXP 2
  43: PUSH
  44: LD_INT 1
  46: EQUAL
  47: IFFALSE 109
// InitEcoMode ( [ 189 , 97 ] , [ [ 215 , 93 ] , [ 204 , 126 ] ] , [ attacksArea1 , attacksArea2 , attacksArea3 , attacksArea4 , attacksArea5 ] ) ;
  49: LD_INT 189
  51: PUSH
  52: LD_INT 97
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: PPUSH
  59: LD_INT 215
  61: PUSH
  62: LD_INT 93
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: PUSH
  69: LD_INT 204
  71: PUSH
  72: LD_INT 126
  74: PUSH
  75: EMPTY
  76: LIST
  77: LIST
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PPUSH
  83: LD_INT 2
  85: PUSH
  86: LD_INT 3
  88: PUSH
  89: LD_INT 4
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 6
  97: PUSH
  98: EMPTY
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: PPUSH
 105: CALL 38110 0 3
// end ;
 109: END
// export debug , gameType ; function Init ; begin
 110: LD_INT 0
 112: PPUSH
// debug := false ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// if debug then
 121: LD_EXP 1
 125: IFFALSE 137
// gameType := 1 else
 127: LD_ADDR_EXP 2
 131: PUSH
 132: LD_INT 1
 134: ST_TO_ADDR
 135: GO 154
// gameType := GetMultiplayerSetting ( 50 ) + 1 ;
 137: LD_ADDR_EXP 2
 141: PUSH
 142: LD_INT 50
 144: PPUSH
 145: CALL_OW 426
 149: PUSH
 150: LD_INT 1
 152: PLUS
 153: ST_TO_ADDR
// end ; end_of_file
 154: LD_VAR 0 1
 158: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
 159: LD_INT 0
 161: PPUSH
// ar_miner := 81 ;
 162: LD_ADDR_EXP 10
 166: PUSH
 167: LD_INT 81
 169: ST_TO_ADDR
// ar_crane := 88 ;
 170: LD_ADDR_EXP 9
 174: PUSH
 175: LD_INT 88
 177: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
 178: LD_ADDR_EXP 4
 182: PUSH
 183: LD_INT 89
 185: ST_TO_ADDR
// us_hack := 99 ;
 186: LD_ADDR_EXP 5
 190: PUSH
 191: LD_INT 99
 193: ST_TO_ADDR
// us_artillery := 97 ;
 194: LD_ADDR_EXP 6
 198: PUSH
 199: LD_INT 97
 201: ST_TO_ADDR
// ar_bio_bomb := 91 ;
 202: LD_ADDR_EXP 7
 206: PUSH
 207: LD_INT 91
 209: ST_TO_ADDR
// ar_mortar := 92 ;
 210: LD_ADDR_EXP 8
 214: PUSH
 215: LD_INT 92
 217: ST_TO_ADDR
// ru_radar := 98 ;
 218: LD_ADDR_EXP 3
 222: PUSH
 223: LD_INT 98
 225: ST_TO_ADDR
// tech_Artillery := 80 ;
 226: LD_ADDR_EXP 11
 230: PUSH
 231: LD_INT 80
 233: ST_TO_ADDR
// tech_RadMat := 81 ;
 234: LD_ADDR_EXP 12
 238: PUSH
 239: LD_INT 81
 241: ST_TO_ADDR
// tech_BasicTools := 82 ;
 242: LD_ADDR_EXP 13
 246: PUSH
 247: LD_INT 82
 249: ST_TO_ADDR
// tech_Cargo := 83 ;
 250: LD_ADDR_EXP 14
 254: PUSH
 255: LD_INT 83
 257: ST_TO_ADDR
// tech_Track := 84 ;
 258: LD_ADDR_EXP 15
 262: PUSH
 263: LD_INT 84
 265: ST_TO_ADDR
// tech_Crane := 85 ;
 266: LD_ADDR_EXP 16
 270: PUSH
 271: LD_INT 85
 273: ST_TO_ADDR
// tech_Bulldozer := 86 ;
 274: LD_ADDR_EXP 17
 278: PUSH
 279: LD_INT 86
 281: ST_TO_ADDR
// tech_Hovercraft := 87 ;
 282: LD_ADDR_EXP 18
 286: PUSH
 287: LD_INT 87
 289: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
 290: LD_ADDR_EXP 19
 294: PUSH
 295: LD_INT 88
 297: ST_TO_ADDR
// class_mastodont := 31 ;
 298: LD_ADDR_EXP 20
 302: PUSH
 303: LD_INT 31
 305: ST_TO_ADDR
// class_horse := 21 ;
 306: LD_ADDR_EXP 21
 310: PUSH
 311: LD_INT 21
 313: ST_TO_ADDR
// end ;
 314: LD_VAR 0 1
 318: RET
// every 1 do
 319: GO 321
 321: DISABLE
// InitGlobalVariables ; end_of_file
 322: CALL 159 0 0
 326: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 327: LD_INT 0
 329: PPUSH
 330: PPUSH
// if exist_mode then
 331: LD_VAR 0 2
 335: IFFALSE 360
// unit := CreateCharacter ( prefix & ident ) else
 337: LD_ADDR_VAR 0 5
 341: PUSH
 342: LD_VAR 0 3
 346: PUSH
 347: LD_VAR 0 1
 351: STR
 352: PPUSH
 353: CALL_OW 34
 357: ST_TO_ADDR
 358: GO 375
// unit := NewCharacter ( ident ) ;
 360: LD_ADDR_VAR 0 5
 364: PUSH
 365: LD_VAR 0 1
 369: PPUSH
 370: CALL_OW 25
 374: ST_TO_ADDR
// result := unit ;
 375: LD_ADDR_VAR 0 4
 379: PUSH
 380: LD_VAR 0 5
 384: ST_TO_ADDR
// end ;
 385: LD_VAR 0 4
 389: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 390: LD_INT 0
 392: PPUSH
 393: PPUSH
// if not side or not nation then
 394: LD_VAR 0 1
 398: NOT
 399: PUSH
 400: LD_VAR 0 2
 404: NOT
 405: OR
 406: IFFALSE 410
// exit ;
 408: GO 1174
// case nation of nation_american :
 410: LD_VAR 0 2
 414: PUSH
 415: LD_INT 1
 417: DOUBLE
 418: EQUAL
 419: IFTRUE 423
 421: GO 637
 423: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 424: LD_ADDR_VAR 0 4
 428: PUSH
 429: LD_INT 35
 431: PUSH
 432: LD_INT 45
 434: PUSH
 435: LD_INT 46
 437: PUSH
 438: LD_INT 47
 440: PUSH
 441: LD_INT 82
 443: PUSH
 444: LD_INT 83
 446: PUSH
 447: LD_INT 84
 449: PUSH
 450: LD_INT 85
 452: PUSH
 453: LD_INT 86
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: LD_INT 2
 461: PUSH
 462: LD_INT 6
 464: PUSH
 465: LD_INT 15
 467: PUSH
 468: LD_INT 16
 470: PUSH
 471: LD_INT 7
 473: PUSH
 474: LD_INT 12
 476: PUSH
 477: LD_INT 13
 479: PUSH
 480: LD_INT 10
 482: PUSH
 483: LD_INT 14
 485: PUSH
 486: LD_INT 20
 488: PUSH
 489: LD_INT 21
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_INT 25
 497: PUSH
 498: LD_INT 32
 500: PUSH
 501: LD_INT 27
 503: PUSH
 504: LD_INT 36
 506: PUSH
 507: LD_INT 69
 509: PUSH
 510: LD_INT 39
 512: PUSH
 513: LD_INT 34
 515: PUSH
 516: LD_INT 40
 518: PUSH
 519: LD_INT 48
 521: PUSH
 522: LD_INT 49
 524: PUSH
 525: LD_INT 50
 527: PUSH
 528: LD_INT 51
 530: PUSH
 531: LD_INT 52
 533: PUSH
 534: LD_INT 53
 536: PUSH
 537: LD_INT 54
 539: PUSH
 540: LD_INT 55
 542: PUSH
 543: LD_INT 56
 545: PUSH
 546: LD_INT 57
 548: PUSH
 549: LD_INT 58
 551: PUSH
 552: LD_INT 59
 554: PUSH
 555: LD_INT 60
 557: PUSH
 558: LD_INT 61
 560: PUSH
 561: LD_INT 62
 563: PUSH
 564: LD_INT 80
 566: PUSH
 567: LD_INT 82
 569: PUSH
 570: LD_INT 83
 572: PUSH
 573: LD_INT 84
 575: PUSH
 576: LD_INT 85
 578: PUSH
 579: LD_INT 86
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: LIST
 594: LIST
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: LIST
 601: LIST
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: ST_TO_ADDR
 635: GO 1098
 637: LD_INT 2
 639: DOUBLE
 640: EQUAL
 641: IFTRUE 645
 643: GO 867
 645: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
 646: LD_ADDR_VAR 0 4
 650: PUSH
 651: LD_INT 35
 653: PUSH
 654: LD_INT 45
 656: PUSH
 657: LD_INT 46
 659: PUSH
 660: LD_INT 47
 662: PUSH
 663: LD_INT 82
 665: PUSH
 666: LD_INT 83
 668: PUSH
 669: LD_INT 84
 671: PUSH
 672: LD_INT 85
 674: PUSH
 675: LD_INT 87
 677: PUSH
 678: LD_INT 70
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: LD_INT 11
 686: PUSH
 687: LD_INT 3
 689: PUSH
 690: LD_INT 4
 692: PUSH
 693: LD_INT 5
 695: PUSH
 696: LD_INT 6
 698: PUSH
 699: LD_INT 15
 701: PUSH
 702: LD_INT 18
 704: PUSH
 705: LD_INT 7
 707: PUSH
 708: LD_INT 17
 710: PUSH
 711: LD_INT 8
 713: PUSH
 714: LD_INT 20
 716: PUSH
 717: LD_INT 21
 719: PUSH
 720: LD_INT 22
 722: PUSH
 723: LD_INT 72
 725: PUSH
 726: LD_INT 26
 728: PUSH
 729: LD_INT 69
 731: PUSH
 732: LD_INT 39
 734: PUSH
 735: LD_INT 40
 737: PUSH
 738: LD_INT 41
 740: PUSH
 741: LD_INT 42
 743: PUSH
 744: LD_INT 43
 746: PUSH
 747: LD_INT 48
 749: PUSH
 750: LD_INT 49
 752: PUSH
 753: LD_INT 50
 755: PUSH
 756: LD_INT 51
 758: PUSH
 759: LD_INT 52
 761: PUSH
 762: LD_INT 53
 764: PUSH
 765: LD_INT 54
 767: PUSH
 768: LD_INT 55
 770: PUSH
 771: LD_INT 56
 773: PUSH
 774: LD_INT 60
 776: PUSH
 777: LD_INT 61
 779: PUSH
 780: LD_INT 62
 782: PUSH
 783: LD_INT 66
 785: PUSH
 786: LD_INT 67
 788: PUSH
 789: LD_INT 68
 791: PUSH
 792: LD_INT 81
 794: PUSH
 795: LD_INT 82
 797: PUSH
 798: LD_INT 83
 800: PUSH
 801: LD_INT 84
 803: PUSH
 804: LD_INT 85
 806: PUSH
 807: LD_INT 87
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: LIST
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: LIST
 843: LIST
 844: LIST
 845: LIST
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: LIST
 852: LIST
 853: LIST
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: ST_TO_ADDR
 865: GO 1098
 867: LD_INT 3
 869: DOUBLE
 870: EQUAL
 871: IFTRUE 875
 873: GO 1097
 875: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
 876: LD_ADDR_VAR 0 4
 880: PUSH
 881: LD_INT 46
 883: PUSH
 884: LD_INT 47
 886: PUSH
 887: LD_INT 1
 889: PUSH
 890: LD_INT 2
 892: PUSH
 893: LD_INT 82
 895: PUSH
 896: LD_INT 83
 898: PUSH
 899: LD_INT 84
 901: PUSH
 902: LD_INT 85
 904: PUSH
 905: LD_INT 86
 907: PUSH
 908: LD_INT 11
 910: PUSH
 911: LD_INT 9
 913: PUSH
 914: LD_INT 20
 916: PUSH
 917: LD_INT 19
 919: PUSH
 920: LD_INT 21
 922: PUSH
 923: LD_INT 24
 925: PUSH
 926: LD_INT 22
 928: PUSH
 929: LD_INT 25
 931: PUSH
 932: LD_INT 28
 934: PUSH
 935: LD_INT 29
 937: PUSH
 938: LD_INT 30
 940: PUSH
 941: LD_INT 31
 943: PUSH
 944: LD_INT 37
 946: PUSH
 947: LD_INT 38
 949: PUSH
 950: LD_INT 32
 952: PUSH
 953: LD_INT 27
 955: PUSH
 956: LD_INT 33
 958: PUSH
 959: LD_INT 69
 961: PUSH
 962: LD_INT 39
 964: PUSH
 965: LD_INT 34
 967: PUSH
 968: LD_INT 40
 970: PUSH
 971: LD_INT 71
 973: PUSH
 974: LD_INT 23
 976: PUSH
 977: LD_INT 44
 979: PUSH
 980: LD_INT 48
 982: PUSH
 983: LD_INT 49
 985: PUSH
 986: LD_INT 50
 988: PUSH
 989: LD_INT 51
 991: PUSH
 992: LD_INT 52
 994: PUSH
 995: LD_INT 53
 997: PUSH
 998: LD_INT 54
1000: PUSH
1001: LD_INT 55
1003: PUSH
1004: LD_INT 56
1006: PUSH
1007: LD_INT 57
1009: PUSH
1010: LD_INT 58
1012: PUSH
1013: LD_INT 59
1015: PUSH
1016: LD_INT 63
1018: PUSH
1019: LD_INT 64
1021: PUSH
1022: LD_INT 65
1024: PUSH
1025: LD_INT 82
1027: PUSH
1028: LD_INT 83
1030: PUSH
1031: LD_INT 84
1033: PUSH
1034: LD_INT 85
1036: PUSH
1037: LD_INT 86
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: ST_TO_ADDR
1095: GO 1098
1097: POP
// if state > - 1 and state < 3 then
1098: LD_VAR 0 3
1102: PUSH
1103: LD_INT 1
1105: NEG
1106: GREATER
1107: PUSH
1108: LD_VAR 0 3
1112: PUSH
1113: LD_INT 3
1115: LESS
1116: AND
1117: IFFALSE 1174
// for i in result do
1119: LD_ADDR_VAR 0 5
1123: PUSH
1124: LD_VAR 0 4
1128: PUSH
1129: FOR_IN
1130: IFFALSE 1172
// if GetTech ( i , side ) <> state then
1132: LD_VAR 0 5
1136: PPUSH
1137: LD_VAR 0 1
1141: PPUSH
1142: CALL_OW 321
1146: PUSH
1147: LD_VAR 0 3
1151: NONEQUAL
1152: IFFALSE 1170
// result := result diff i ;
1154: LD_ADDR_VAR 0 4
1158: PUSH
1159: LD_VAR 0 4
1163: PUSH
1164: LD_VAR 0 5
1168: DIFF
1169: ST_TO_ADDR
1170: GO 1129
1172: POP
1173: POP
// end ;
1174: LD_VAR 0 4
1178: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1179: LD_INT 0
1181: PPUSH
1182: PPUSH
1183: PPUSH
// result := true ;
1184: LD_ADDR_VAR 0 3
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1192: LD_ADDR_VAR 0 5
1196: PUSH
1197: LD_VAR 0 2
1201: PPUSH
1202: CALL_OW 480
1206: ST_TO_ADDR
// if not tmp then
1207: LD_VAR 0 5
1211: NOT
1212: IFFALSE 1216
// exit ;
1214: GO 1265
// for i in tmp do
1216: LD_ADDR_VAR 0 4
1220: PUSH
1221: LD_VAR 0 5
1225: PUSH
1226: FOR_IN
1227: IFFALSE 1263
// if GetTech ( i , side ) <> state_researched then
1229: LD_VAR 0 4
1233: PPUSH
1234: LD_VAR 0 1
1238: PPUSH
1239: CALL_OW 321
1243: PUSH
1244: LD_INT 2
1246: NONEQUAL
1247: IFFALSE 1261
// begin result := false ;
1249: LD_ADDR_VAR 0 3
1253: PUSH
1254: LD_INT 0
1256: ST_TO_ADDR
// exit ;
1257: POP
1258: POP
1259: GO 1265
// end ;
1261: GO 1226
1263: POP
1264: POP
// end ;
1265: LD_VAR 0 3
1269: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1270: LD_INT 0
1272: PPUSH
1273: PPUSH
1274: PPUSH
1275: PPUSH
1276: PPUSH
1277: PPUSH
1278: PPUSH
1279: PPUSH
1280: PPUSH
1281: PPUSH
1282: PPUSH
1283: PPUSH
1284: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1285: LD_VAR 0 1
1289: NOT
1290: PUSH
1291: LD_VAR 0 1
1295: PPUSH
1296: CALL_OW 257
1300: PUSH
1301: LD_INT 9
1303: NONEQUAL
1304: OR
1305: IFFALSE 1309
// exit ;
1307: GO 1882
// side := GetSide ( unit ) ;
1309: LD_ADDR_VAR 0 9
1313: PUSH
1314: LD_VAR 0 1
1318: PPUSH
1319: CALL_OW 255
1323: ST_TO_ADDR
// tech_space := tech_spacanom ;
1324: LD_ADDR_VAR 0 12
1328: PUSH
1329: LD_INT 29
1331: ST_TO_ADDR
// tech_time := tech_taurad ;
1332: LD_ADDR_VAR 0 13
1336: PUSH
1337: LD_INT 28
1339: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1340: LD_ADDR_VAR 0 11
1344: PUSH
1345: LD_VAR 0 1
1349: PPUSH
1350: CALL_OW 310
1354: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1355: LD_VAR 0 11
1359: PPUSH
1360: CALL_OW 247
1364: PUSH
1365: LD_INT 2
1367: EQUAL
1368: IFFALSE 1372
// exit ;
1370: GO 1882
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1372: LD_ADDR_VAR 0 8
1376: PUSH
1377: LD_INT 81
1379: PUSH
1380: LD_VAR 0 9
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 21
1394: PUSH
1395: LD_INT 3
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 69
1414: ST_TO_ADDR
// if not tmp then
1415: LD_VAR 0 8
1419: NOT
1420: IFFALSE 1424
// exit ;
1422: GO 1882
// if in_unit then
1424: LD_VAR 0 11
1428: IFFALSE 1452
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1430: LD_ADDR_VAR 0 10
1434: PUSH
1435: LD_VAR 0 8
1439: PPUSH
1440: LD_VAR 0 11
1444: PPUSH
1445: CALL_OW 74
1449: ST_TO_ADDR
1450: GO 1472
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1452: LD_ADDR_VAR 0 10
1456: PUSH
1457: LD_VAR 0 8
1461: PPUSH
1462: LD_VAR 0 1
1466: PPUSH
1467: CALL_OW 74
1471: ST_TO_ADDR
// if not enemy then
1472: LD_VAR 0 10
1476: NOT
1477: IFFALSE 1481
// exit ;
1479: GO 1882
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1481: LD_VAR 0 11
1485: PUSH
1486: LD_VAR 0 11
1490: PPUSH
1491: LD_VAR 0 10
1495: PPUSH
1496: CALL_OW 296
1500: PUSH
1501: LD_INT 13
1503: GREATER
1504: AND
1505: PUSH
1506: LD_VAR 0 1
1510: PPUSH
1511: LD_VAR 0 10
1515: PPUSH
1516: CALL_OW 296
1520: PUSH
1521: LD_INT 12
1523: GREATER
1524: OR
1525: IFFALSE 1529
// exit ;
1527: GO 1882
// missile := [ 1 ] ;
1529: LD_ADDR_VAR 0 14
1533: PUSH
1534: LD_INT 1
1536: PUSH
1537: EMPTY
1538: LIST
1539: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1540: LD_VAR 0 9
1544: PPUSH
1545: LD_VAR 0 12
1549: PPUSH
1550: CALL_OW 325
1554: IFFALSE 1583
// missile := Insert ( missile , missile + 1 , 2 ) ;
1556: LD_ADDR_VAR 0 14
1560: PUSH
1561: LD_VAR 0 14
1565: PPUSH
1566: LD_VAR 0 14
1570: PUSH
1571: LD_INT 1
1573: PLUS
1574: PPUSH
1575: LD_INT 2
1577: PPUSH
1578: CALL_OW 2
1582: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1583: LD_VAR 0 9
1587: PPUSH
1588: LD_VAR 0 13
1592: PPUSH
1593: CALL_OW 325
1597: PUSH
1598: LD_VAR 0 10
1602: PPUSH
1603: CALL_OW 255
1607: PPUSH
1608: LD_VAR 0 13
1612: PPUSH
1613: CALL_OW 325
1617: NOT
1618: AND
1619: IFFALSE 1648
// missile := Insert ( missile , missile + 1 , 3 ) ;
1621: LD_ADDR_VAR 0 14
1625: PUSH
1626: LD_VAR 0 14
1630: PPUSH
1631: LD_VAR 0 14
1635: PUSH
1636: LD_INT 1
1638: PLUS
1639: PPUSH
1640: LD_INT 3
1642: PPUSH
1643: CALL_OW 2
1647: ST_TO_ADDR
// if missile < 2 then
1648: LD_VAR 0 14
1652: PUSH
1653: LD_INT 2
1655: LESS
1656: IFFALSE 1660
// exit ;
1658: GO 1882
// x := GetX ( enemy ) ;
1660: LD_ADDR_VAR 0 4
1664: PUSH
1665: LD_VAR 0 10
1669: PPUSH
1670: CALL_OW 250
1674: ST_TO_ADDR
// y := GetY ( enemy ) ;
1675: LD_ADDR_VAR 0 5
1679: PUSH
1680: LD_VAR 0 10
1684: PPUSH
1685: CALL_OW 251
1689: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1690: LD_ADDR_VAR 0 6
1694: PUSH
1695: LD_VAR 0 4
1699: PUSH
1700: LD_INT 1
1702: NEG
1703: PPUSH
1704: LD_INT 1
1706: PPUSH
1707: CALL_OW 12
1711: PLUS
1712: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1713: LD_ADDR_VAR 0 7
1717: PUSH
1718: LD_VAR 0 5
1722: PUSH
1723: LD_INT 1
1725: NEG
1726: PPUSH
1727: LD_INT 1
1729: PPUSH
1730: CALL_OW 12
1734: PLUS
1735: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1736: LD_VAR 0 6
1740: PPUSH
1741: LD_VAR 0 7
1745: PPUSH
1746: CALL_OW 488
1750: NOT
1751: IFFALSE 1773
// begin _x := x ;
1753: LD_ADDR_VAR 0 6
1757: PUSH
1758: LD_VAR 0 4
1762: ST_TO_ADDR
// _y := y ;
1763: LD_ADDR_VAR 0 7
1767: PUSH
1768: LD_VAR 0 5
1772: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1773: LD_ADDR_VAR 0 3
1777: PUSH
1778: LD_INT 1
1780: PPUSH
1781: LD_VAR 0 14
1785: PPUSH
1786: CALL_OW 12
1790: ST_TO_ADDR
// case i of 1 :
1791: LD_VAR 0 3
1795: PUSH
1796: LD_INT 1
1798: DOUBLE
1799: EQUAL
1800: IFTRUE 1804
1802: GO 1821
1804: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1805: LD_VAR 0 1
1809: PPUSH
1810: LD_VAR 0 10
1814: PPUSH
1815: CALL_OW 115
1819: GO 1882
1821: LD_INT 2
1823: DOUBLE
1824: EQUAL
1825: IFTRUE 1829
1827: GO 1851
1829: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1830: LD_VAR 0 1
1834: PPUSH
1835: LD_VAR 0 6
1839: PPUSH
1840: LD_VAR 0 7
1844: PPUSH
1845: CALL_OW 153
1849: GO 1882
1851: LD_INT 3
1853: DOUBLE
1854: EQUAL
1855: IFTRUE 1859
1857: GO 1881
1859: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1860: LD_VAR 0 1
1864: PPUSH
1865: LD_VAR 0 6
1869: PPUSH
1870: LD_VAR 0 7
1874: PPUSH
1875: CALL_OW 154
1879: GO 1882
1881: POP
// end ;
1882: LD_VAR 0 2
1886: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1887: LD_INT 0
1889: PPUSH
1890: PPUSH
1891: PPUSH
1892: PPUSH
1893: PPUSH
1894: PPUSH
// if not unit or not building then
1895: LD_VAR 0 1
1899: NOT
1900: PUSH
1901: LD_VAR 0 2
1905: NOT
1906: OR
1907: IFFALSE 1911
// exit ;
1909: GO 2069
// x := GetX ( building ) ;
1911: LD_ADDR_VAR 0 5
1915: PUSH
1916: LD_VAR 0 2
1920: PPUSH
1921: CALL_OW 250
1925: ST_TO_ADDR
// y := GetY ( building ) ;
1926: LD_ADDR_VAR 0 6
1930: PUSH
1931: LD_VAR 0 2
1935: PPUSH
1936: CALL_OW 251
1940: ST_TO_ADDR
// for i = 0 to 5 do
1941: LD_ADDR_VAR 0 4
1945: PUSH
1946: DOUBLE
1947: LD_INT 0
1949: DEC
1950: ST_TO_ADDR
1951: LD_INT 5
1953: PUSH
1954: FOR_TO
1955: IFFALSE 2067
// begin _x := ShiftX ( x , i , 3 ) ;
1957: LD_ADDR_VAR 0 7
1961: PUSH
1962: LD_VAR 0 5
1966: PPUSH
1967: LD_VAR 0 4
1971: PPUSH
1972: LD_INT 3
1974: PPUSH
1975: CALL_OW 272
1979: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
1980: LD_ADDR_VAR 0 8
1984: PUSH
1985: LD_VAR 0 6
1989: PPUSH
1990: LD_VAR 0 4
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: CALL_OW 273
2002: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2003: LD_VAR 0 7
2007: PPUSH
2008: LD_VAR 0 8
2012: PPUSH
2013: CALL_OW 488
2017: NOT
2018: IFFALSE 2022
// continue ;
2020: GO 1954
// if HexInfo ( _x , _y ) = 0 then
2022: LD_VAR 0 7
2026: PPUSH
2027: LD_VAR 0 8
2031: PPUSH
2032: CALL_OW 428
2036: PUSH
2037: LD_INT 0
2039: EQUAL
2040: IFFALSE 2065
// begin ComMoveXY ( unit , _x , _y ) ;
2042: LD_VAR 0 1
2046: PPUSH
2047: LD_VAR 0 7
2051: PPUSH
2052: LD_VAR 0 8
2056: PPUSH
2057: CALL_OW 111
// exit ;
2061: POP
2062: POP
2063: GO 2069
// end ; end ;
2065: GO 1954
2067: POP
2068: POP
// end ;
2069: LD_VAR 0 3
2073: RET
// export function ScanBase ( side , base_area ) ; begin
2074: LD_INT 0
2076: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2077: LD_ADDR_VAR 0 3
2081: PUSH
2082: LD_VAR 0 2
2086: PPUSH
2087: LD_INT 81
2089: PUSH
2090: LD_VAR 0 1
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PPUSH
2099: CALL_OW 70
2103: ST_TO_ADDR
// end ;
2104: LD_VAR 0 3
2108: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
// result := false ;
2115: LD_ADDR_VAR 0 2
2119: PUSH
2120: LD_INT 0
2122: ST_TO_ADDR
// side := GetSide ( unit ) ;
2123: LD_ADDR_VAR 0 3
2127: PUSH
2128: LD_VAR 0 1
2132: PPUSH
2133: CALL_OW 255
2137: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2138: LD_ADDR_VAR 0 4
2142: PUSH
2143: LD_VAR 0 1
2147: PPUSH
2148: CALL_OW 248
2152: ST_TO_ADDR
// case nat of 1 :
2153: LD_VAR 0 4
2157: PUSH
2158: LD_INT 1
2160: DOUBLE
2161: EQUAL
2162: IFTRUE 2166
2164: GO 2177
2166: POP
// tech := tech_lassight ; 2 :
2167: LD_ADDR_VAR 0 5
2171: PUSH
2172: LD_INT 12
2174: ST_TO_ADDR
2175: GO 2216
2177: LD_INT 2
2179: DOUBLE
2180: EQUAL
2181: IFTRUE 2185
2183: GO 2196
2185: POP
// tech := tech_mortar ; 3 :
2186: LD_ADDR_VAR 0 5
2190: PUSH
2191: LD_INT 41
2193: ST_TO_ADDR
2194: GO 2216
2196: LD_INT 3
2198: DOUBLE
2199: EQUAL
2200: IFTRUE 2204
2202: GO 2215
2204: POP
// tech := tech_bazooka ; end ;
2205: LD_ADDR_VAR 0 5
2209: PUSH
2210: LD_INT 44
2212: ST_TO_ADDR
2213: GO 2216
2215: POP
// if Researched ( side , tech ) then
2216: LD_VAR 0 3
2220: PPUSH
2221: LD_VAR 0 5
2225: PPUSH
2226: CALL_OW 325
2230: IFFALSE 2257
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: LD_INT 5
2239: PUSH
2240: LD_INT 8
2242: PUSH
2243: LD_INT 9
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: LIST
2250: PUSH
2251: LD_VAR 0 4
2255: ARRAY
2256: ST_TO_ADDR
// end ;
2257: LD_VAR 0 2
2261: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2262: LD_INT 0
2264: PPUSH
2265: PPUSH
2266: PPUSH
// if not mines then
2267: LD_VAR 0 2
2271: NOT
2272: IFFALSE 2276
// exit ;
2274: GO 2420
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2276: LD_ADDR_VAR 0 5
2280: PUSH
2281: LD_INT 81
2283: PUSH
2284: LD_VAR 0 1
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: PUSH
2293: LD_INT 3
2295: PUSH
2296: LD_INT 21
2298: PUSH
2299: LD_INT 3
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 69
2318: ST_TO_ADDR
// for i in mines do
2319: LD_ADDR_VAR 0 4
2323: PUSH
2324: LD_VAR 0 2
2328: PUSH
2329: FOR_IN
2330: IFFALSE 2418
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2332: LD_VAR 0 4
2336: PUSH
2337: LD_INT 1
2339: ARRAY
2340: PPUSH
2341: LD_VAR 0 4
2345: PUSH
2346: LD_INT 2
2348: ARRAY
2349: PPUSH
2350: CALL_OW 458
2354: NOT
2355: IFFALSE 2359
// continue ;
2357: GO 2329
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2359: LD_VAR 0 4
2363: PUSH
2364: LD_INT 1
2366: ARRAY
2367: PPUSH
2368: LD_VAR 0 4
2372: PUSH
2373: LD_INT 2
2375: ARRAY
2376: PPUSH
2377: CALL_OW 428
2381: PUSH
2382: LD_VAR 0 5
2386: IN
2387: IFFALSE 2416
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2389: LD_VAR 0 4
2393: PUSH
2394: LD_INT 1
2396: ARRAY
2397: PPUSH
2398: LD_VAR 0 4
2402: PUSH
2403: LD_INT 2
2405: ARRAY
2406: PPUSH
2407: LD_VAR 0 1
2411: PPUSH
2412: CALL_OW 456
// end ;
2416: GO 2329
2418: POP
2419: POP
// end ;
2420: LD_VAR 0 3
2424: RET
// export function Count ( array ) ; var i ; begin
2425: LD_INT 0
2427: PPUSH
2428: PPUSH
// result := 0 ;
2429: LD_ADDR_VAR 0 2
2433: PUSH
2434: LD_INT 0
2436: ST_TO_ADDR
// for i in array do
2437: LD_ADDR_VAR 0 3
2441: PUSH
2442: LD_VAR 0 1
2446: PUSH
2447: FOR_IN
2448: IFFALSE 2472
// if i then
2450: LD_VAR 0 3
2454: IFFALSE 2470
// result := result + 1 ;
2456: LD_ADDR_VAR 0 2
2460: PUSH
2461: LD_VAR 0 2
2465: PUSH
2466: LD_INT 1
2468: PLUS
2469: ST_TO_ADDR
2470: GO 2447
2472: POP
2473: POP
// end ;
2474: LD_VAR 0 2
2478: RET
// export function IsEmpty ( building ) ; begin
2479: LD_INT 0
2481: PPUSH
// if not building then
2482: LD_VAR 0 1
2486: NOT
2487: IFFALSE 2491
// exit ;
2489: GO 2534
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2491: LD_ADDR_VAR 0 2
2495: PUSH
2496: LD_VAR 0 1
2500: PUSH
2501: LD_INT 22
2503: PUSH
2504: LD_VAR 0 1
2508: PPUSH
2509: CALL_OW 255
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: PUSH
2518: LD_INT 58
2520: PUSH
2521: EMPTY
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: PPUSH
2528: CALL_OW 69
2532: IN
2533: ST_TO_ADDR
// end ;
2534: LD_VAR 0 2
2538: RET
// export function IsNotFull ( building ) ; begin
2539: LD_INT 0
2541: PPUSH
// if not building then
2542: LD_VAR 0 1
2546: NOT
2547: IFFALSE 2551
// exit ;
2549: GO 2570
// result := UnitsInside ( building ) < 6 ;
2551: LD_ADDR_VAR 0 2
2555: PUSH
2556: LD_VAR 0 1
2560: PPUSH
2561: CALL_OW 313
2565: PUSH
2566: LD_INT 6
2568: LESS
2569: ST_TO_ADDR
// end ;
2570: LD_VAR 0 2
2574: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2575: LD_INT 0
2577: PPUSH
2578: PPUSH
2579: PPUSH
2580: PPUSH
// tmp := [ ] ;
2581: LD_ADDR_VAR 0 3
2585: PUSH
2586: EMPTY
2587: ST_TO_ADDR
// list := [ ] ;
2588: LD_ADDR_VAR 0 5
2592: PUSH
2593: EMPTY
2594: ST_TO_ADDR
// for i = 16 to 25 do
2595: LD_ADDR_VAR 0 4
2599: PUSH
2600: DOUBLE
2601: LD_INT 16
2603: DEC
2604: ST_TO_ADDR
2605: LD_INT 25
2607: PUSH
2608: FOR_TO
2609: IFFALSE 2682
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2611: LD_ADDR_VAR 0 3
2615: PUSH
2616: LD_VAR 0 3
2620: PUSH
2621: LD_INT 22
2623: PUSH
2624: LD_VAR 0 1
2628: PPUSH
2629: CALL_OW 255
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: PUSH
2638: LD_INT 91
2640: PUSH
2641: LD_VAR 0 1
2645: PUSH
2646: LD_INT 6
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_INT 30
2656: PUSH
2657: LD_VAR 0 4
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: LIST
2670: PUSH
2671: EMPTY
2672: LIST
2673: PPUSH
2674: CALL_OW 69
2678: ADD
2679: ST_TO_ADDR
2680: GO 2608
2682: POP
2683: POP
// for i = 1 to tmp do
2684: LD_ADDR_VAR 0 4
2688: PUSH
2689: DOUBLE
2690: LD_INT 1
2692: DEC
2693: ST_TO_ADDR
2694: LD_VAR 0 3
2698: PUSH
2699: FOR_TO
2700: IFFALSE 2788
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2702: LD_ADDR_VAR 0 5
2706: PUSH
2707: LD_VAR 0 5
2711: PUSH
2712: LD_VAR 0 3
2716: PUSH
2717: LD_VAR 0 4
2721: ARRAY
2722: PPUSH
2723: CALL_OW 266
2727: PUSH
2728: LD_VAR 0 3
2732: PUSH
2733: LD_VAR 0 4
2737: ARRAY
2738: PPUSH
2739: CALL_OW 250
2743: PUSH
2744: LD_VAR 0 3
2748: PUSH
2749: LD_VAR 0 4
2753: ARRAY
2754: PPUSH
2755: CALL_OW 251
2759: PUSH
2760: LD_VAR 0 3
2764: PUSH
2765: LD_VAR 0 4
2769: ARRAY
2770: PPUSH
2771: CALL_OW 254
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: PUSH
2782: EMPTY
2783: LIST
2784: ADD
2785: ST_TO_ADDR
2786: GO 2699
2788: POP
2789: POP
// result := list ;
2790: LD_ADDR_VAR 0 2
2794: PUSH
2795: LD_VAR 0 5
2799: ST_TO_ADDR
// end ;
2800: LD_VAR 0 2
2804: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
2813: PPUSH
// if not factory then
2814: LD_VAR 0 1
2818: NOT
2819: IFFALSE 2823
// exit ;
2821: GO 3416
// if control = control_apeman then
2823: LD_VAR 0 4
2827: PUSH
2828: LD_INT 5
2830: EQUAL
2831: IFFALSE 2940
// begin tmp := UnitsInside ( factory ) ;
2833: LD_ADDR_VAR 0 8
2837: PUSH
2838: LD_VAR 0 1
2842: PPUSH
2843: CALL_OW 313
2847: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2848: LD_VAR 0 8
2852: PPUSH
2853: LD_INT 25
2855: PUSH
2856: LD_INT 12
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: PPUSH
2863: CALL_OW 72
2867: NOT
2868: IFFALSE 2878
// control := control_manual ;
2870: LD_ADDR_VAR 0 4
2874: PUSH
2875: LD_INT 1
2877: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2878: LD_ADDR_VAR 0 8
2882: PUSH
2883: LD_VAR 0 1
2887: PPUSH
2888: CALL 2575 0 1
2892: ST_TO_ADDR
// if tmp then
2893: LD_VAR 0 8
2897: IFFALSE 2940
// begin for i in tmp do
2899: LD_ADDR_VAR 0 7
2903: PUSH
2904: LD_VAR 0 8
2908: PUSH
2909: FOR_IN
2910: IFFALSE 2938
// if i [ 1 ] = b_ext_radio then
2912: LD_VAR 0 7
2916: PUSH
2917: LD_INT 1
2919: ARRAY
2920: PUSH
2921: LD_INT 22
2923: EQUAL
2924: IFFALSE 2936
// begin control := control_remote ;
2926: LD_ADDR_VAR 0 4
2930: PUSH
2931: LD_INT 2
2933: ST_TO_ADDR
// break ;
2934: GO 2938
// end ;
2936: GO 2909
2938: POP
2939: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
2940: LD_VAR 0 1
2944: PPUSH
2945: LD_VAR 0 2
2949: PPUSH
2950: LD_VAR 0 3
2954: PPUSH
2955: LD_VAR 0 4
2959: PPUSH
2960: LD_VAR 0 5
2964: PPUSH
2965: CALL_OW 448
2969: IFFALSE 3004
// begin result := [ chassis , engine , control , weapon ] ;
2971: LD_ADDR_VAR 0 6
2975: PUSH
2976: LD_VAR 0 2
2980: PUSH
2981: LD_VAR 0 3
2985: PUSH
2986: LD_VAR 0 4
2990: PUSH
2991: LD_VAR 0 5
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// exit ;
3002: GO 3416
// end ; _chassis := AvailableChassisList ( factory ) ;
3004: LD_ADDR_VAR 0 9
3008: PUSH
3009: LD_VAR 0 1
3013: PPUSH
3014: CALL_OW 475
3018: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3019: LD_ADDR_VAR 0 11
3023: PUSH
3024: LD_VAR 0 1
3028: PPUSH
3029: CALL_OW 476
3033: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3034: LD_ADDR_VAR 0 12
3038: PUSH
3039: LD_VAR 0 1
3043: PPUSH
3044: CALL_OW 477
3048: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3049: LD_ADDR_VAR 0 10
3053: PUSH
3054: LD_VAR 0 1
3058: PPUSH
3059: CALL_OW 478
3063: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3064: LD_VAR 0 9
3068: NOT
3069: PUSH
3070: LD_VAR 0 11
3074: NOT
3075: OR
3076: PUSH
3077: LD_VAR 0 12
3081: NOT
3082: OR
3083: PUSH
3084: LD_VAR 0 10
3088: NOT
3089: OR
3090: IFFALSE 3125
// begin result := [ chassis , engine , control , weapon ] ;
3092: LD_ADDR_VAR 0 6
3096: PUSH
3097: LD_VAR 0 2
3101: PUSH
3102: LD_VAR 0 3
3106: PUSH
3107: LD_VAR 0 4
3111: PUSH
3112: LD_VAR 0 5
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: ST_TO_ADDR
// exit ;
3123: GO 3416
// end ; if not chassis in _chassis then
3125: LD_VAR 0 2
3129: PUSH
3130: LD_VAR 0 9
3134: IN
3135: NOT
3136: IFFALSE 3162
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3138: LD_ADDR_VAR 0 2
3142: PUSH
3143: LD_VAR 0 9
3147: PUSH
3148: LD_INT 1
3150: PPUSH
3151: LD_VAR 0 9
3155: PPUSH
3156: CALL_OW 12
3160: ARRAY
3161: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3162: LD_VAR 0 2
3166: PPUSH
3167: LD_VAR 0 3
3171: PPUSH
3172: CALL 3421 0 2
3176: NOT
3177: IFFALSE 3236
// repeat engine := _engine [ 1 ] ;
3179: LD_ADDR_VAR 0 3
3183: PUSH
3184: LD_VAR 0 11
3188: PUSH
3189: LD_INT 1
3191: ARRAY
3192: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3193: LD_ADDR_VAR 0 11
3197: PUSH
3198: LD_VAR 0 11
3202: PPUSH
3203: LD_INT 1
3205: PPUSH
3206: CALL_OW 3
3210: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3211: LD_VAR 0 2
3215: PPUSH
3216: LD_VAR 0 3
3220: PPUSH
3221: CALL 3421 0 2
3225: PUSH
3226: LD_VAR 0 11
3230: PUSH
3231: EMPTY
3232: EQUAL
3233: OR
3234: IFFALSE 3179
// if not control in _control then
3236: LD_VAR 0 4
3240: PUSH
3241: LD_VAR 0 12
3245: IN
3246: NOT
3247: IFFALSE 3273
// control := _control [ rand ( 1 , _control ) ] ;
3249: LD_ADDR_VAR 0 4
3253: PUSH
3254: LD_VAR 0 12
3258: PUSH
3259: LD_INT 1
3261: PPUSH
3262: LD_VAR 0 12
3266: PPUSH
3267: CALL_OW 12
3271: ARRAY
3272: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3273: LD_VAR 0 2
3277: PPUSH
3278: LD_VAR 0 5
3282: PPUSH
3283: CALL 3641 0 2
3287: NOT
3288: IFFALSE 3347
// repeat weapon := _weapon [ 1 ] ;
3290: LD_ADDR_VAR 0 5
3294: PUSH
3295: LD_VAR 0 10
3299: PUSH
3300: LD_INT 1
3302: ARRAY
3303: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3304: LD_ADDR_VAR 0 10
3308: PUSH
3309: LD_VAR 0 10
3313: PPUSH
3314: LD_INT 1
3316: PPUSH
3317: CALL_OW 3
3321: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3322: LD_VAR 0 2
3326: PPUSH
3327: LD_VAR 0 5
3331: PPUSH
3332: CALL 3641 0 2
3336: PUSH
3337: LD_VAR 0 10
3341: PUSH
3342: EMPTY
3343: EQUAL
3344: OR
3345: IFFALSE 3290
// result := [ ] ;
3347: LD_ADDR_VAR 0 6
3351: PUSH
3352: EMPTY
3353: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3354: LD_VAR 0 1
3358: PPUSH
3359: LD_VAR 0 2
3363: PPUSH
3364: LD_VAR 0 3
3368: PPUSH
3369: LD_VAR 0 4
3373: PPUSH
3374: LD_VAR 0 5
3378: PPUSH
3379: CALL_OW 448
3383: IFFALSE 3416
// result := [ chassis , engine , control , weapon ] ;
3385: LD_ADDR_VAR 0 6
3389: PUSH
3390: LD_VAR 0 2
3394: PUSH
3395: LD_VAR 0 3
3399: PUSH
3400: LD_VAR 0 4
3404: PUSH
3405: LD_VAR 0 5
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: ST_TO_ADDR
// end ;
3416: LD_VAR 0 6
3420: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3421: LD_INT 0
3423: PPUSH
// if not chassis or not engine then
3424: LD_VAR 0 1
3428: NOT
3429: PUSH
3430: LD_VAR 0 2
3434: NOT
3435: OR
3436: IFFALSE 3440
// exit ;
3438: GO 3636
// case engine of engine_solar :
3440: LD_VAR 0 2
3444: PUSH
3445: LD_INT 2
3447: DOUBLE
3448: EQUAL
3449: IFTRUE 3453
3451: GO 3491
3453: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3454: LD_ADDR_VAR 0 3
3458: PUSH
3459: LD_INT 11
3461: PUSH
3462: LD_INT 12
3464: PUSH
3465: LD_INT 13
3467: PUSH
3468: LD_INT 14
3470: PUSH
3471: LD_INT 1
3473: PUSH
3474: LD_INT 2
3476: PUSH
3477: LD_INT 3
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: ST_TO_ADDR
3489: GO 3620
3491: LD_INT 1
3493: DOUBLE
3494: EQUAL
3495: IFTRUE 3499
3497: GO 3561
3499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3500: LD_ADDR_VAR 0 3
3504: PUSH
3505: LD_INT 11
3507: PUSH
3508: LD_INT 12
3510: PUSH
3511: LD_INT 13
3513: PUSH
3514: LD_INT 14
3516: PUSH
3517: LD_INT 1
3519: PUSH
3520: LD_INT 2
3522: PUSH
3523: LD_INT 3
3525: PUSH
3526: LD_INT 4
3528: PUSH
3529: LD_INT 5
3531: PUSH
3532: LD_INT 21
3534: PUSH
3535: LD_INT 23
3537: PUSH
3538: LD_INT 22
3540: PUSH
3541: LD_INT 24
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: ST_TO_ADDR
3559: GO 3620
3561: LD_INT 3
3563: DOUBLE
3564: EQUAL
3565: IFTRUE 3569
3567: GO 3619
3569: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3570: LD_ADDR_VAR 0 3
3574: PUSH
3575: LD_INT 13
3577: PUSH
3578: LD_INT 14
3580: PUSH
3581: LD_INT 2
3583: PUSH
3584: LD_INT 3
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: LD_INT 5
3592: PUSH
3593: LD_INT 21
3595: PUSH
3596: LD_INT 22
3598: PUSH
3599: LD_INT 23
3601: PUSH
3602: LD_INT 24
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: ST_TO_ADDR
3617: GO 3620
3619: POP
// result := ( chassis in result ) ;
3620: LD_ADDR_VAR 0 3
3624: PUSH
3625: LD_VAR 0 1
3629: PUSH
3630: LD_VAR 0 3
3634: IN
3635: ST_TO_ADDR
// end ;
3636: LD_VAR 0 3
3640: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3641: LD_INT 0
3643: PPUSH
// if not chassis or not weapon then
3644: LD_VAR 0 1
3648: NOT
3649: PUSH
3650: LD_VAR 0 2
3654: NOT
3655: OR
3656: IFFALSE 3660
// exit ;
3658: GO 4686
// case weapon of us_machine_gun :
3660: LD_VAR 0 2
3664: PUSH
3665: LD_INT 2
3667: DOUBLE
3668: EQUAL
3669: IFTRUE 3673
3671: GO 3703
3673: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_INT 1
3681: PUSH
3682: LD_INT 2
3684: PUSH
3685: LD_INT 3
3687: PUSH
3688: LD_INT 4
3690: PUSH
3691: LD_INT 5
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: ST_TO_ADDR
3701: GO 4670
3703: LD_INT 3
3705: DOUBLE
3706: EQUAL
3707: IFTRUE 3711
3709: GO 3741
3711: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3712: LD_ADDR_VAR 0 3
3716: PUSH
3717: LD_INT 1
3719: PUSH
3720: LD_INT 2
3722: PUSH
3723: LD_INT 3
3725: PUSH
3726: LD_INT 4
3728: PUSH
3729: LD_INT 5
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: ST_TO_ADDR
3739: GO 4670
3741: LD_INT 11
3743: DOUBLE
3744: EQUAL
3745: IFTRUE 3749
3747: GO 3779
3749: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3750: LD_ADDR_VAR 0 3
3754: PUSH
3755: LD_INT 1
3757: PUSH
3758: LD_INT 2
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: LD_INT 4
3766: PUSH
3767: LD_INT 5
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: ST_TO_ADDR
3777: GO 4670
3779: LD_INT 4
3781: DOUBLE
3782: EQUAL
3783: IFTRUE 3787
3785: GO 3813
3787: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3788: LD_ADDR_VAR 0 3
3792: PUSH
3793: LD_INT 2
3795: PUSH
3796: LD_INT 3
3798: PUSH
3799: LD_INT 4
3801: PUSH
3802: LD_INT 5
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: ST_TO_ADDR
3811: GO 4670
3813: LD_INT 5
3815: DOUBLE
3816: EQUAL
3817: IFTRUE 3821
3819: GO 3847
3821: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3822: LD_ADDR_VAR 0 3
3826: PUSH
3827: LD_INT 2
3829: PUSH
3830: LD_INT 3
3832: PUSH
3833: LD_INT 4
3835: PUSH
3836: LD_INT 5
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: ST_TO_ADDR
3845: GO 4670
3847: LD_INT 9
3849: DOUBLE
3850: EQUAL
3851: IFTRUE 3855
3853: GO 3881
3855: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3856: LD_ADDR_VAR 0 3
3860: PUSH
3861: LD_INT 2
3863: PUSH
3864: LD_INT 3
3866: PUSH
3867: LD_INT 4
3869: PUSH
3870: LD_INT 5
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: ST_TO_ADDR
3879: GO 4670
3881: LD_INT 7
3883: DOUBLE
3884: EQUAL
3885: IFTRUE 3889
3887: GO 3915
3889: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
3890: LD_ADDR_VAR 0 3
3894: PUSH
3895: LD_INT 2
3897: PUSH
3898: LD_INT 3
3900: PUSH
3901: LD_INT 4
3903: PUSH
3904: LD_INT 5
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: ST_TO_ADDR
3913: GO 4670
3915: LD_INT 12
3917: DOUBLE
3918: EQUAL
3919: IFTRUE 3923
3921: GO 3949
3923: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
3924: LD_ADDR_VAR 0 3
3928: PUSH
3929: LD_INT 2
3931: PUSH
3932: LD_INT 3
3934: PUSH
3935: LD_INT 4
3937: PUSH
3938: LD_INT 5
3940: PUSH
3941: EMPTY
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: ST_TO_ADDR
3947: GO 4670
3949: LD_INT 13
3951: DOUBLE
3952: EQUAL
3953: IFTRUE 3957
3955: GO 3983
3957: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
3958: LD_ADDR_VAR 0 3
3962: PUSH
3963: LD_INT 2
3965: PUSH
3966: LD_INT 3
3968: PUSH
3969: LD_INT 4
3971: PUSH
3972: LD_INT 5
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: ST_TO_ADDR
3981: GO 4670
3983: LD_INT 14
3985: DOUBLE
3986: EQUAL
3987: IFTRUE 3991
3989: GO 4009
3991: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
3992: LD_ADDR_VAR 0 3
3996: PUSH
3997: LD_INT 4
3999: PUSH
4000: LD_INT 5
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: ST_TO_ADDR
4007: GO 4670
4009: LD_INT 6
4011: DOUBLE
4012: EQUAL
4013: IFTRUE 4017
4015: GO 4035
4017: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4018: LD_ADDR_VAR 0 3
4022: PUSH
4023: LD_INT 4
4025: PUSH
4026: LD_INT 5
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: ST_TO_ADDR
4033: GO 4670
4035: LD_INT 10
4037: DOUBLE
4038: EQUAL
4039: IFTRUE 4043
4041: GO 4061
4043: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4044: LD_ADDR_VAR 0 3
4048: PUSH
4049: LD_INT 4
4051: PUSH
4052: LD_INT 5
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: ST_TO_ADDR
4059: GO 4670
4061: LD_INT 22
4063: DOUBLE
4064: EQUAL
4065: IFTRUE 4069
4067: GO 4095
4069: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4070: LD_ADDR_VAR 0 3
4074: PUSH
4075: LD_INT 11
4077: PUSH
4078: LD_INT 12
4080: PUSH
4081: LD_INT 13
4083: PUSH
4084: LD_INT 14
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: ST_TO_ADDR
4093: GO 4670
4095: LD_INT 23
4097: DOUBLE
4098: EQUAL
4099: IFTRUE 4103
4101: GO 4129
4103: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4104: LD_ADDR_VAR 0 3
4108: PUSH
4109: LD_INT 11
4111: PUSH
4112: LD_INT 12
4114: PUSH
4115: LD_INT 13
4117: PUSH
4118: LD_INT 14
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: ST_TO_ADDR
4127: GO 4670
4129: LD_INT 24
4131: DOUBLE
4132: EQUAL
4133: IFTRUE 4137
4135: GO 4163
4137: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4138: LD_ADDR_VAR 0 3
4142: PUSH
4143: LD_INT 11
4145: PUSH
4146: LD_INT 12
4148: PUSH
4149: LD_INT 13
4151: PUSH
4152: LD_INT 14
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: ST_TO_ADDR
4161: GO 4670
4163: LD_INT 30
4165: DOUBLE
4166: EQUAL
4167: IFTRUE 4171
4169: GO 4197
4171: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4172: LD_ADDR_VAR 0 3
4176: PUSH
4177: LD_INT 11
4179: PUSH
4180: LD_INT 12
4182: PUSH
4183: LD_INT 13
4185: PUSH
4186: LD_INT 14
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: ST_TO_ADDR
4195: GO 4670
4197: LD_INT 25
4199: DOUBLE
4200: EQUAL
4201: IFTRUE 4205
4203: GO 4223
4205: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4206: LD_ADDR_VAR 0 3
4210: PUSH
4211: LD_INT 13
4213: PUSH
4214: LD_INT 14
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: ST_TO_ADDR
4221: GO 4670
4223: LD_INT 27
4225: DOUBLE
4226: EQUAL
4227: IFTRUE 4231
4229: GO 4249
4231: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4232: LD_ADDR_VAR 0 3
4236: PUSH
4237: LD_INT 13
4239: PUSH
4240: LD_INT 14
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: ST_TO_ADDR
4247: GO 4670
4249: LD_INT 28
4251: DOUBLE
4252: EQUAL
4253: IFTRUE 4257
4255: GO 4275
4257: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4258: LD_ADDR_VAR 0 3
4262: PUSH
4263: LD_INT 13
4265: PUSH
4266: LD_INT 14
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: ST_TO_ADDR
4273: GO 4670
4275: LD_INT 29
4277: DOUBLE
4278: EQUAL
4279: IFTRUE 4283
4281: GO 4301
4283: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4284: LD_ADDR_VAR 0 3
4288: PUSH
4289: LD_INT 13
4291: PUSH
4292: LD_INT 14
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: ST_TO_ADDR
4299: GO 4670
4301: LD_INT 31
4303: DOUBLE
4304: EQUAL
4305: IFTRUE 4309
4307: GO 4327
4309: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4310: LD_ADDR_VAR 0 3
4314: PUSH
4315: LD_INT 13
4317: PUSH
4318: LD_INT 14
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: ST_TO_ADDR
4325: GO 4670
4327: LD_INT 26
4329: DOUBLE
4330: EQUAL
4331: IFTRUE 4335
4333: GO 4353
4335: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4336: LD_ADDR_VAR 0 3
4340: PUSH
4341: LD_INT 13
4343: PUSH
4344: LD_INT 14
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: ST_TO_ADDR
4351: GO 4670
4353: LD_INT 42
4355: DOUBLE
4356: EQUAL
4357: IFTRUE 4361
4359: GO 4387
4361: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4362: LD_ADDR_VAR 0 3
4366: PUSH
4367: LD_INT 21
4369: PUSH
4370: LD_INT 22
4372: PUSH
4373: LD_INT 23
4375: PUSH
4376: LD_INT 24
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: ST_TO_ADDR
4385: GO 4670
4387: LD_INT 43
4389: DOUBLE
4390: EQUAL
4391: IFTRUE 4395
4393: GO 4421
4395: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4396: LD_ADDR_VAR 0 3
4400: PUSH
4401: LD_INT 21
4403: PUSH
4404: LD_INT 22
4406: PUSH
4407: LD_INT 23
4409: PUSH
4410: LD_INT 24
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: ST_TO_ADDR
4419: GO 4670
4421: LD_INT 44
4423: DOUBLE
4424: EQUAL
4425: IFTRUE 4429
4427: GO 4455
4429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4430: LD_ADDR_VAR 0 3
4434: PUSH
4435: LD_INT 21
4437: PUSH
4438: LD_INT 22
4440: PUSH
4441: LD_INT 23
4443: PUSH
4444: LD_INT 24
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: ST_TO_ADDR
4453: GO 4670
4455: LD_INT 45
4457: DOUBLE
4458: EQUAL
4459: IFTRUE 4463
4461: GO 4489
4463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4464: LD_ADDR_VAR 0 3
4468: PUSH
4469: LD_INT 21
4471: PUSH
4472: LD_INT 22
4474: PUSH
4475: LD_INT 23
4477: PUSH
4478: LD_INT 24
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: ST_TO_ADDR
4487: GO 4670
4489: LD_INT 49
4491: DOUBLE
4492: EQUAL
4493: IFTRUE 4497
4495: GO 4523
4497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4498: LD_ADDR_VAR 0 3
4502: PUSH
4503: LD_INT 21
4505: PUSH
4506: LD_INT 22
4508: PUSH
4509: LD_INT 23
4511: PUSH
4512: LD_INT 24
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: ST_TO_ADDR
4521: GO 4670
4523: LD_INT 51
4525: DOUBLE
4526: EQUAL
4527: IFTRUE 4531
4529: GO 4557
4531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4532: LD_ADDR_VAR 0 3
4536: PUSH
4537: LD_INT 21
4539: PUSH
4540: LD_INT 22
4542: PUSH
4543: LD_INT 23
4545: PUSH
4546: LD_INT 24
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: ST_TO_ADDR
4555: GO 4670
4557: LD_INT 52
4559: DOUBLE
4560: EQUAL
4561: IFTRUE 4565
4563: GO 4591
4565: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4566: LD_ADDR_VAR 0 3
4570: PUSH
4571: LD_INT 21
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 23
4579: PUSH
4580: LD_INT 24
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: ST_TO_ADDR
4589: GO 4670
4591: LD_INT 53
4593: DOUBLE
4594: EQUAL
4595: IFTRUE 4599
4597: GO 4617
4599: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4600: LD_ADDR_VAR 0 3
4604: PUSH
4605: LD_INT 23
4607: PUSH
4608: LD_INT 24
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: ST_TO_ADDR
4615: GO 4670
4617: LD_INT 46
4619: DOUBLE
4620: EQUAL
4621: IFTRUE 4625
4623: GO 4643
4625: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4626: LD_ADDR_VAR 0 3
4630: PUSH
4631: LD_INT 23
4633: PUSH
4634: LD_INT 24
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: ST_TO_ADDR
4641: GO 4670
4643: LD_INT 47
4645: DOUBLE
4646: EQUAL
4647: IFTRUE 4651
4649: GO 4669
4651: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4652: LD_ADDR_VAR 0 3
4656: PUSH
4657: LD_INT 23
4659: PUSH
4660: LD_INT 24
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: ST_TO_ADDR
4667: GO 4670
4669: POP
// result := ( chassis in result ) ;
4670: LD_ADDR_VAR 0 3
4674: PUSH
4675: LD_VAR 0 1
4679: PUSH
4680: LD_VAR 0 3
4684: IN
4685: ST_TO_ADDR
// end ;
4686: LD_VAR 0 3
4690: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
4696: PPUSH
4697: PPUSH
4698: PPUSH
4699: PPUSH
// result := array ;
4700: LD_ADDR_VAR 0 5
4704: PUSH
4705: LD_VAR 0 1
4709: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4710: LD_VAR 0 1
4714: NOT
4715: PUSH
4716: LD_VAR 0 2
4720: NOT
4721: OR
4722: PUSH
4723: LD_VAR 0 3
4727: NOT
4728: OR
4729: PUSH
4730: LD_VAR 0 2
4734: PUSH
4735: LD_VAR 0 1
4739: GREATER
4740: OR
4741: PUSH
4742: LD_VAR 0 3
4746: PUSH
4747: LD_VAR 0 1
4751: GREATER
4752: OR
4753: IFFALSE 4757
// exit ;
4755: GO 5053
// if direction then
4757: LD_VAR 0 4
4761: IFFALSE 4825
// begin d := 1 ;
4763: LD_ADDR_VAR 0 9
4767: PUSH
4768: LD_INT 1
4770: ST_TO_ADDR
// if i_from > i_to then
4771: LD_VAR 0 2
4775: PUSH
4776: LD_VAR 0 3
4780: GREATER
4781: IFFALSE 4807
// length := ( array - i_from ) + i_to else
4783: LD_ADDR_VAR 0 11
4787: PUSH
4788: LD_VAR 0 1
4792: PUSH
4793: LD_VAR 0 2
4797: MINUS
4798: PUSH
4799: LD_VAR 0 3
4803: PLUS
4804: ST_TO_ADDR
4805: GO 4823
// length := i_to - i_from ;
4807: LD_ADDR_VAR 0 11
4811: PUSH
4812: LD_VAR 0 3
4816: PUSH
4817: LD_VAR 0 2
4821: MINUS
4822: ST_TO_ADDR
// end else
4823: GO 4886
// begin d := - 1 ;
4825: LD_ADDR_VAR 0 9
4829: PUSH
4830: LD_INT 1
4832: NEG
4833: ST_TO_ADDR
// if i_from > i_to then
4834: LD_VAR 0 2
4838: PUSH
4839: LD_VAR 0 3
4843: GREATER
4844: IFFALSE 4864
// length := i_from - i_to else
4846: LD_ADDR_VAR 0 11
4850: PUSH
4851: LD_VAR 0 2
4855: PUSH
4856: LD_VAR 0 3
4860: MINUS
4861: ST_TO_ADDR
4862: GO 4886
// length := ( array - i_to ) + i_from ;
4864: LD_ADDR_VAR 0 11
4868: PUSH
4869: LD_VAR 0 1
4873: PUSH
4874: LD_VAR 0 3
4878: MINUS
4879: PUSH
4880: LD_VAR 0 2
4884: PLUS
4885: ST_TO_ADDR
// end ; if not length then
4886: LD_VAR 0 11
4890: NOT
4891: IFFALSE 4895
// exit ;
4893: GO 5053
// tmp := array ;
4895: LD_ADDR_VAR 0 10
4899: PUSH
4900: LD_VAR 0 1
4904: ST_TO_ADDR
// for i = 1 to length do
4905: LD_ADDR_VAR 0 6
4909: PUSH
4910: DOUBLE
4911: LD_INT 1
4913: DEC
4914: ST_TO_ADDR
4915: LD_VAR 0 11
4919: PUSH
4920: FOR_TO
4921: IFFALSE 5041
// begin for j = 1 to array do
4923: LD_ADDR_VAR 0 7
4927: PUSH
4928: DOUBLE
4929: LD_INT 1
4931: DEC
4932: ST_TO_ADDR
4933: LD_VAR 0 1
4937: PUSH
4938: FOR_TO
4939: IFFALSE 5027
// begin k := j + d ;
4941: LD_ADDR_VAR 0 8
4945: PUSH
4946: LD_VAR 0 7
4950: PUSH
4951: LD_VAR 0 9
4955: PLUS
4956: ST_TO_ADDR
// if k > array then
4957: LD_VAR 0 8
4961: PUSH
4962: LD_VAR 0 1
4966: GREATER
4967: IFFALSE 4977
// k := 1 ;
4969: LD_ADDR_VAR 0 8
4973: PUSH
4974: LD_INT 1
4976: ST_TO_ADDR
// if not k then
4977: LD_VAR 0 8
4981: NOT
4982: IFFALSE 4994
// k := array ;
4984: LD_ADDR_VAR 0 8
4988: PUSH
4989: LD_VAR 0 1
4993: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
4994: LD_ADDR_VAR 0 10
4998: PUSH
4999: LD_VAR 0 10
5003: PPUSH
5004: LD_VAR 0 8
5008: PPUSH
5009: LD_VAR 0 1
5013: PUSH
5014: LD_VAR 0 7
5018: ARRAY
5019: PPUSH
5020: CALL_OW 1
5024: ST_TO_ADDR
// end ;
5025: GO 4938
5027: POP
5028: POP
// array := tmp ;
5029: LD_ADDR_VAR 0 1
5033: PUSH
5034: LD_VAR 0 10
5038: ST_TO_ADDR
// end ;
5039: GO 4920
5041: POP
5042: POP
// result := array ;
5043: LD_ADDR_VAR 0 5
5047: PUSH
5048: LD_VAR 0 1
5052: ST_TO_ADDR
// end ;
5053: LD_VAR 0 5
5057: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5058: LD_INT 0
5060: PPUSH
5061: PPUSH
// result := 0 ;
5062: LD_ADDR_VAR 0 3
5066: PUSH
5067: LD_INT 0
5069: ST_TO_ADDR
// if not array or not value in array then
5070: LD_VAR 0 1
5074: NOT
5075: PUSH
5076: LD_VAR 0 2
5080: PUSH
5081: LD_VAR 0 1
5085: IN
5086: NOT
5087: OR
5088: IFFALSE 5092
// exit ;
5090: GO 5146
// for i = 1 to array do
5092: LD_ADDR_VAR 0 4
5096: PUSH
5097: DOUBLE
5098: LD_INT 1
5100: DEC
5101: ST_TO_ADDR
5102: LD_VAR 0 1
5106: PUSH
5107: FOR_TO
5108: IFFALSE 5144
// if value = array [ i ] then
5110: LD_VAR 0 2
5114: PUSH
5115: LD_VAR 0 1
5119: PUSH
5120: LD_VAR 0 4
5124: ARRAY
5125: EQUAL
5126: IFFALSE 5142
// begin result := i ;
5128: LD_ADDR_VAR 0 3
5132: PUSH
5133: LD_VAR 0 4
5137: ST_TO_ADDR
// exit ;
5138: POP
5139: POP
5140: GO 5146
// end ;
5142: GO 5107
5144: POP
5145: POP
// end ;
5146: LD_VAR 0 3
5150: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5151: LD_INT 0
5153: PPUSH
// vc_chassis := chassis ;
5154: LD_ADDR_OWVAR 37
5158: PUSH
5159: LD_VAR 0 1
5163: ST_TO_ADDR
// vc_engine := engine ;
5164: LD_ADDR_OWVAR 39
5168: PUSH
5169: LD_VAR 0 2
5173: ST_TO_ADDR
// vc_control := control ;
5174: LD_ADDR_OWVAR 38
5178: PUSH
5179: LD_VAR 0 3
5183: ST_TO_ADDR
// vc_weapon := weapon ;
5184: LD_ADDR_OWVAR 40
5188: PUSH
5189: LD_VAR 0 4
5193: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5194: LD_ADDR_OWVAR 41
5198: PUSH
5199: LD_VAR 0 5
5203: ST_TO_ADDR
// end ;
5204: LD_VAR 0 6
5208: RET
// export function WantPlant ( unit ) ; var task ; begin
5209: LD_INT 0
5211: PPUSH
5212: PPUSH
// result := false ;
5213: LD_ADDR_VAR 0 2
5217: PUSH
5218: LD_INT 0
5220: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5221: LD_ADDR_VAR 0 3
5225: PUSH
5226: LD_VAR 0 1
5230: PPUSH
5231: CALL_OW 437
5235: ST_TO_ADDR
// if task then
5236: LD_VAR 0 3
5240: IFFALSE 5268
// if task [ 1 ] [ 1 ] = p then
5242: LD_VAR 0 3
5246: PUSH
5247: LD_INT 1
5249: ARRAY
5250: PUSH
5251: LD_INT 1
5253: ARRAY
5254: PUSH
5255: LD_STRING p
5257: EQUAL
5258: IFFALSE 5268
// result := true ;
5260: LD_ADDR_VAR 0 2
5264: PUSH
5265: LD_INT 1
5267: ST_TO_ADDR
// end ;
5268: LD_VAR 0 2
5272: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5273: LD_INT 0
5275: PPUSH
5276: PPUSH
5277: PPUSH
5278: PPUSH
// if pos < 1 then
5279: LD_VAR 0 2
5283: PUSH
5284: LD_INT 1
5286: LESS
5287: IFFALSE 5291
// exit ;
5289: GO 5594
// if pos = 1 then
5291: LD_VAR 0 2
5295: PUSH
5296: LD_INT 1
5298: EQUAL
5299: IFFALSE 5332
// result := Replace ( arr , pos [ 1 ] , value ) else
5301: LD_ADDR_VAR 0 4
5305: PUSH
5306: LD_VAR 0 1
5310: PPUSH
5311: LD_VAR 0 2
5315: PUSH
5316: LD_INT 1
5318: ARRAY
5319: PPUSH
5320: LD_VAR 0 3
5324: PPUSH
5325: CALL_OW 1
5329: ST_TO_ADDR
5330: GO 5594
// begin tmp := arr ;
5332: LD_ADDR_VAR 0 6
5336: PUSH
5337: LD_VAR 0 1
5341: ST_TO_ADDR
// s_arr := [ tmp ] ;
5342: LD_ADDR_VAR 0 7
5346: PUSH
5347: LD_VAR 0 6
5351: PUSH
5352: EMPTY
5353: LIST
5354: ST_TO_ADDR
// for i = 1 to pos - 1 do
5355: LD_ADDR_VAR 0 5
5359: PUSH
5360: DOUBLE
5361: LD_INT 1
5363: DEC
5364: ST_TO_ADDR
5365: LD_VAR 0 2
5369: PUSH
5370: LD_INT 1
5372: MINUS
5373: PUSH
5374: FOR_TO
5375: IFFALSE 5420
// begin tmp := tmp [ pos [ i ] ] ;
5377: LD_ADDR_VAR 0 6
5381: PUSH
5382: LD_VAR 0 6
5386: PUSH
5387: LD_VAR 0 2
5391: PUSH
5392: LD_VAR 0 5
5396: ARRAY
5397: ARRAY
5398: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5399: LD_ADDR_VAR 0 7
5403: PUSH
5404: LD_VAR 0 7
5408: PUSH
5409: LD_VAR 0 6
5413: PUSH
5414: EMPTY
5415: LIST
5416: ADD
5417: ST_TO_ADDR
// end ;
5418: GO 5374
5420: POP
5421: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5422: LD_ADDR_VAR 0 6
5426: PUSH
5427: LD_VAR 0 6
5431: PPUSH
5432: LD_VAR 0 2
5436: PUSH
5437: LD_VAR 0 2
5441: ARRAY
5442: PPUSH
5443: LD_VAR 0 3
5447: PPUSH
5448: CALL_OW 1
5452: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5453: LD_ADDR_VAR 0 7
5457: PUSH
5458: LD_VAR 0 7
5462: PPUSH
5463: LD_VAR 0 7
5467: PPUSH
5468: LD_VAR 0 6
5472: PPUSH
5473: CALL_OW 1
5477: ST_TO_ADDR
// for i = s_arr downto 2 do
5478: LD_ADDR_VAR 0 5
5482: PUSH
5483: DOUBLE
5484: LD_VAR 0 7
5488: INC
5489: ST_TO_ADDR
5490: LD_INT 2
5492: PUSH
5493: FOR_DOWNTO
5494: IFFALSE 5578
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5496: LD_ADDR_VAR 0 6
5500: PUSH
5501: LD_VAR 0 7
5505: PUSH
5506: LD_VAR 0 5
5510: PUSH
5511: LD_INT 1
5513: MINUS
5514: ARRAY
5515: PPUSH
5516: LD_VAR 0 2
5520: PUSH
5521: LD_VAR 0 5
5525: PUSH
5526: LD_INT 1
5528: MINUS
5529: ARRAY
5530: PPUSH
5531: LD_VAR 0 7
5535: PUSH
5536: LD_VAR 0 5
5540: ARRAY
5541: PPUSH
5542: CALL_OW 1
5546: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5547: LD_ADDR_VAR 0 7
5551: PUSH
5552: LD_VAR 0 7
5556: PPUSH
5557: LD_VAR 0 5
5561: PUSH
5562: LD_INT 1
5564: MINUS
5565: PPUSH
5566: LD_VAR 0 6
5570: PPUSH
5571: CALL_OW 1
5575: ST_TO_ADDR
// end ;
5576: GO 5493
5578: POP
5579: POP
// result := s_arr [ 1 ] ;
5580: LD_ADDR_VAR 0 4
5584: PUSH
5585: LD_VAR 0 7
5589: PUSH
5590: LD_INT 1
5592: ARRAY
5593: ST_TO_ADDR
// end ; end ;
5594: LD_VAR 0 4
5598: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5599: LD_INT 0
5601: PPUSH
5602: PPUSH
// if not list then
5603: LD_VAR 0 1
5607: NOT
5608: IFFALSE 5612
// exit ;
5610: GO 5703
// i := list [ pos1 ] ;
5612: LD_ADDR_VAR 0 5
5616: PUSH
5617: LD_VAR 0 1
5621: PUSH
5622: LD_VAR 0 2
5626: ARRAY
5627: ST_TO_ADDR
// if not i then
5628: LD_VAR 0 5
5632: NOT
5633: IFFALSE 5637
// exit ;
5635: GO 5703
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5637: LD_ADDR_VAR 0 1
5641: PUSH
5642: LD_VAR 0 1
5646: PPUSH
5647: LD_VAR 0 2
5651: PPUSH
5652: LD_VAR 0 1
5656: PUSH
5657: LD_VAR 0 3
5661: ARRAY
5662: PPUSH
5663: CALL_OW 1
5667: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5668: LD_ADDR_VAR 0 1
5672: PUSH
5673: LD_VAR 0 1
5677: PPUSH
5678: LD_VAR 0 3
5682: PPUSH
5683: LD_VAR 0 5
5687: PPUSH
5688: CALL_OW 1
5692: ST_TO_ADDR
// result := list ;
5693: LD_ADDR_VAR 0 4
5697: PUSH
5698: LD_VAR 0 1
5702: ST_TO_ADDR
// end ;
5703: LD_VAR 0 4
5707: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5708: LD_INT 0
5710: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5711: LD_ADDR_VAR 0 5
5715: PUSH
5716: LD_VAR 0 1
5720: PPUSH
5721: CALL_OW 250
5725: PPUSH
5726: LD_VAR 0 1
5730: PPUSH
5731: CALL_OW 251
5735: PPUSH
5736: LD_VAR 0 2
5740: PPUSH
5741: LD_VAR 0 3
5745: PPUSH
5746: LD_VAR 0 4
5750: PPUSH
5751: CALL 5761 0 5
5755: ST_TO_ADDR
// end ;
5756: LD_VAR 0 5
5760: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
5761: LD_INT 0
5763: PPUSH
5764: PPUSH
5765: PPUSH
5766: PPUSH
// if not list then
5767: LD_VAR 0 3
5771: NOT
5772: IFFALSE 5776
// exit ;
5774: GO 6164
// result := [ ] ;
5776: LD_ADDR_VAR 0 6
5780: PUSH
5781: EMPTY
5782: ST_TO_ADDR
// for i in list do
5783: LD_ADDR_VAR 0 7
5787: PUSH
5788: LD_VAR 0 3
5792: PUSH
5793: FOR_IN
5794: IFFALSE 5996
// begin tmp := GetDistUnitXY ( i , x , y ) ;
5796: LD_ADDR_VAR 0 9
5800: PUSH
5801: LD_VAR 0 7
5805: PPUSH
5806: LD_VAR 0 1
5810: PPUSH
5811: LD_VAR 0 2
5815: PPUSH
5816: CALL_OW 297
5820: ST_TO_ADDR
// if not result then
5821: LD_VAR 0 6
5825: NOT
5826: IFFALSE 5852
// result := [ [ i , tmp ] ] else
5828: LD_ADDR_VAR 0 6
5832: PUSH
5833: LD_VAR 0 7
5837: PUSH
5838: LD_VAR 0 9
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: EMPTY
5848: LIST
5849: ST_TO_ADDR
5850: GO 5994
// begin if result [ result ] [ 2 ] < tmp then
5852: LD_VAR 0 6
5856: PUSH
5857: LD_VAR 0 6
5861: ARRAY
5862: PUSH
5863: LD_INT 2
5865: ARRAY
5866: PUSH
5867: LD_VAR 0 9
5871: LESS
5872: IFFALSE 5914
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
5874: LD_ADDR_VAR 0 6
5878: PUSH
5879: LD_VAR 0 6
5883: PPUSH
5884: LD_VAR 0 6
5888: PUSH
5889: LD_INT 1
5891: PLUS
5892: PPUSH
5893: LD_VAR 0 7
5897: PUSH
5898: LD_VAR 0 9
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PPUSH
5907: CALL_OW 2
5911: ST_TO_ADDR
5912: GO 5994
// for j = 1 to result do
5914: LD_ADDR_VAR 0 8
5918: PUSH
5919: DOUBLE
5920: LD_INT 1
5922: DEC
5923: ST_TO_ADDR
5924: LD_VAR 0 6
5928: PUSH
5929: FOR_TO
5930: IFFALSE 5992
// begin if tmp < result [ j ] [ 2 ] then
5932: LD_VAR 0 9
5936: PUSH
5937: LD_VAR 0 6
5941: PUSH
5942: LD_VAR 0 8
5946: ARRAY
5947: PUSH
5948: LD_INT 2
5950: ARRAY
5951: LESS
5952: IFFALSE 5990
// begin result := Insert ( result , j , [ i , tmp ] ) ;
5954: LD_ADDR_VAR 0 6
5958: PUSH
5959: LD_VAR 0 6
5963: PPUSH
5964: LD_VAR 0 8
5968: PPUSH
5969: LD_VAR 0 7
5973: PUSH
5974: LD_VAR 0 9
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: PPUSH
5983: CALL_OW 2
5987: ST_TO_ADDR
// break ;
5988: GO 5992
// end ; end ;
5990: GO 5929
5992: POP
5993: POP
// end ; end ;
5994: GO 5793
5996: POP
5997: POP
// if result and not asc then
5998: LD_VAR 0 6
6002: PUSH
6003: LD_VAR 0 4
6007: NOT
6008: AND
6009: IFFALSE 6084
// begin tmp := result ;
6011: LD_ADDR_VAR 0 9
6015: PUSH
6016: LD_VAR 0 6
6020: ST_TO_ADDR
// for i = tmp downto 1 do
6021: LD_ADDR_VAR 0 7
6025: PUSH
6026: DOUBLE
6027: LD_VAR 0 9
6031: INC
6032: ST_TO_ADDR
6033: LD_INT 1
6035: PUSH
6036: FOR_DOWNTO
6037: IFFALSE 6082
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6039: LD_ADDR_VAR 0 6
6043: PUSH
6044: LD_VAR 0 6
6048: PPUSH
6049: LD_VAR 0 9
6053: PUSH
6054: LD_VAR 0 7
6058: MINUS
6059: PUSH
6060: LD_INT 1
6062: PLUS
6063: PPUSH
6064: LD_VAR 0 9
6068: PUSH
6069: LD_VAR 0 7
6073: ARRAY
6074: PPUSH
6075: CALL_OW 1
6079: ST_TO_ADDR
6080: GO 6036
6082: POP
6083: POP
// end ; tmp := [ ] ;
6084: LD_ADDR_VAR 0 9
6088: PUSH
6089: EMPTY
6090: ST_TO_ADDR
// if mode then
6091: LD_VAR 0 5
6095: IFFALSE 6164
// begin for i = 1 to result do
6097: LD_ADDR_VAR 0 7
6101: PUSH
6102: DOUBLE
6103: LD_INT 1
6105: DEC
6106: ST_TO_ADDR
6107: LD_VAR 0 6
6111: PUSH
6112: FOR_TO
6113: IFFALSE 6152
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6115: LD_ADDR_VAR 0 9
6119: PUSH
6120: LD_VAR 0 9
6124: PPUSH
6125: LD_VAR 0 7
6129: PPUSH
6130: LD_VAR 0 6
6134: PUSH
6135: LD_VAR 0 7
6139: ARRAY
6140: PUSH
6141: LD_INT 1
6143: ARRAY
6144: PPUSH
6145: CALL_OW 1
6149: ST_TO_ADDR
6150: GO 6112
6152: POP
6153: POP
// result := tmp ;
6154: LD_ADDR_VAR 0 6
6158: PUSH
6159: LD_VAR 0 9
6163: ST_TO_ADDR
// end ; end ;
6164: LD_VAR 0 6
6168: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6169: LD_INT 0
6171: PPUSH
6172: PPUSH
6173: PPUSH
6174: PPUSH
6175: PPUSH
6176: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6177: LD_ADDR_VAR 0 5
6181: PUSH
6182: LD_INT 0
6184: PUSH
6185: LD_INT 0
6187: PUSH
6188: LD_INT 0
6190: PUSH
6191: EMPTY
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: ST_TO_ADDR
// if not x or not y then
6199: LD_VAR 0 2
6203: NOT
6204: PUSH
6205: LD_VAR 0 3
6209: NOT
6210: OR
6211: IFFALSE 6215
// exit ;
6213: GO 7861
// if not range then
6215: LD_VAR 0 4
6219: NOT
6220: IFFALSE 6230
// range := 10 ;
6222: LD_ADDR_VAR 0 4
6226: PUSH
6227: LD_INT 10
6229: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6230: LD_ADDR_VAR 0 8
6234: PUSH
6235: LD_INT 81
6237: PUSH
6238: LD_VAR 0 1
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 92
6249: PUSH
6250: LD_VAR 0 2
6254: PUSH
6255: LD_VAR 0 3
6259: PUSH
6260: LD_VAR 0 4
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 3
6273: PUSH
6274: LD_INT 21
6276: PUSH
6277: LD_INT 3
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: LIST
6292: PPUSH
6293: CALL_OW 69
6297: ST_TO_ADDR
// if not tmp then
6298: LD_VAR 0 8
6302: NOT
6303: IFFALSE 6307
// exit ;
6305: GO 7861
// for i in tmp do
6307: LD_ADDR_VAR 0 6
6311: PUSH
6312: LD_VAR 0 8
6316: PUSH
6317: FOR_IN
6318: IFFALSE 7836
// begin points := [ 0 , 0 , 0 ] ;
6320: LD_ADDR_VAR 0 9
6324: PUSH
6325: LD_INT 0
6327: PUSH
6328: LD_INT 0
6330: PUSH
6331: LD_INT 0
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: LIST
6338: ST_TO_ADDR
// bpoints := 1 ;
6339: LD_ADDR_VAR 0 10
6343: PUSH
6344: LD_INT 1
6346: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6347: LD_VAR 0 6
6351: PPUSH
6352: CALL_OW 247
6356: PUSH
6357: LD_INT 1
6359: DOUBLE
6360: EQUAL
6361: IFTRUE 6365
6363: GO 6943
6365: POP
// begin if GetClass ( i ) = 1 then
6366: LD_VAR 0 6
6370: PPUSH
6371: CALL_OW 257
6375: PUSH
6376: LD_INT 1
6378: EQUAL
6379: IFFALSE 6400
// points := [ 10 , 5 , 3 ] ;
6381: LD_ADDR_VAR 0 9
6385: PUSH
6386: LD_INT 10
6388: PUSH
6389: LD_INT 5
6391: PUSH
6392: LD_INT 3
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6400: LD_VAR 0 6
6404: PPUSH
6405: CALL_OW 257
6409: PUSH
6410: LD_INT 2
6412: PUSH
6413: LD_INT 3
6415: PUSH
6416: LD_INT 4
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: IN
6424: IFFALSE 6445
// points := [ 3 , 2 , 1 ] ;
6426: LD_ADDR_VAR 0 9
6430: PUSH
6431: LD_INT 3
6433: PUSH
6434: LD_INT 2
6436: PUSH
6437: LD_INT 1
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6445: LD_VAR 0 6
6449: PPUSH
6450: CALL_OW 257
6454: PUSH
6455: LD_INT 5
6457: EQUAL
6458: IFFALSE 6479
// points := [ 130 , 5 , 2 ] ;
6460: LD_ADDR_VAR 0 9
6464: PUSH
6465: LD_INT 130
6467: PUSH
6468: LD_INT 5
6470: PUSH
6471: LD_INT 2
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: LIST
6478: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6479: LD_VAR 0 6
6483: PPUSH
6484: CALL_OW 257
6488: PUSH
6489: LD_INT 8
6491: EQUAL
6492: IFFALSE 6513
// points := [ 35 , 35 , 30 ] ;
6494: LD_ADDR_VAR 0 9
6498: PUSH
6499: LD_INT 35
6501: PUSH
6502: LD_INT 35
6504: PUSH
6505: LD_INT 30
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6513: LD_VAR 0 6
6517: PPUSH
6518: CALL_OW 257
6522: PUSH
6523: LD_INT 9
6525: EQUAL
6526: IFFALSE 6547
// points := [ 20 , 55 , 40 ] ;
6528: LD_ADDR_VAR 0 9
6532: PUSH
6533: LD_INT 20
6535: PUSH
6536: LD_INT 55
6538: PUSH
6539: LD_INT 40
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: LIST
6546: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6547: LD_VAR 0 6
6551: PPUSH
6552: CALL_OW 257
6556: PUSH
6557: LD_INT 12
6559: PUSH
6560: LD_INT 16
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: IN
6567: IFFALSE 6588
// points := [ 5 , 3 , 2 ] ;
6569: LD_ADDR_VAR 0 9
6573: PUSH
6574: LD_INT 5
6576: PUSH
6577: LD_INT 3
6579: PUSH
6580: LD_INT 2
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: LIST
6587: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6588: LD_VAR 0 6
6592: PPUSH
6593: CALL_OW 257
6597: PUSH
6598: LD_INT 17
6600: EQUAL
6601: IFFALSE 6622
// points := [ 100 , 50 , 75 ] ;
6603: LD_ADDR_VAR 0 9
6607: PUSH
6608: LD_INT 100
6610: PUSH
6611: LD_INT 50
6613: PUSH
6614: LD_INT 75
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: LIST
6621: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6622: LD_VAR 0 6
6626: PPUSH
6627: CALL_OW 257
6631: PUSH
6632: LD_INT 15
6634: EQUAL
6635: IFFALSE 6656
// points := [ 10 , 5 , 3 ] ;
6637: LD_ADDR_VAR 0 9
6641: PUSH
6642: LD_INT 10
6644: PUSH
6645: LD_INT 5
6647: PUSH
6648: LD_INT 3
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: LIST
6655: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6656: LD_VAR 0 6
6660: PPUSH
6661: CALL_OW 257
6665: PUSH
6666: LD_INT 14
6668: EQUAL
6669: IFFALSE 6690
// points := [ 10 , 0 , 0 ] ;
6671: LD_ADDR_VAR 0 9
6675: PUSH
6676: LD_INT 10
6678: PUSH
6679: LD_INT 0
6681: PUSH
6682: LD_INT 0
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: LIST
6689: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6690: LD_VAR 0 6
6694: PPUSH
6695: CALL_OW 257
6699: PUSH
6700: LD_INT 11
6702: EQUAL
6703: IFFALSE 6724
// points := [ 30 , 10 , 5 ] ;
6705: LD_ADDR_VAR 0 9
6709: PUSH
6710: LD_INT 30
6712: PUSH
6713: LD_INT 10
6715: PUSH
6716: LD_INT 5
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6724: LD_VAR 0 1
6728: PPUSH
6729: LD_INT 5
6731: PPUSH
6732: CALL_OW 321
6736: PUSH
6737: LD_INT 2
6739: EQUAL
6740: IFFALSE 6757
// bpoints := bpoints * 1.8 ;
6742: LD_ADDR_VAR 0 10
6746: PUSH
6747: LD_VAR 0 10
6751: PUSH
6752: LD_REAL  1.80000000000000E+0000
6755: MUL
6756: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
6757: LD_VAR 0 6
6761: PPUSH
6762: CALL_OW 257
6766: PUSH
6767: LD_INT 1
6769: PUSH
6770: LD_INT 2
6772: PUSH
6773: LD_INT 3
6775: PUSH
6776: LD_INT 4
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: IN
6785: PUSH
6786: LD_VAR 0 1
6790: PPUSH
6791: LD_INT 51
6793: PPUSH
6794: CALL_OW 321
6798: PUSH
6799: LD_INT 2
6801: EQUAL
6802: AND
6803: IFFALSE 6820
// bpoints := bpoints * 1.2 ;
6805: LD_ADDR_VAR 0 10
6809: PUSH
6810: LD_VAR 0 10
6814: PUSH
6815: LD_REAL  1.20000000000000E+0000
6818: MUL
6819: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
6820: LD_VAR 0 6
6824: PPUSH
6825: CALL_OW 257
6829: PUSH
6830: LD_INT 5
6832: PUSH
6833: LD_INT 7
6835: PUSH
6836: LD_INT 9
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: LIST
6843: IN
6844: PUSH
6845: LD_VAR 0 1
6849: PPUSH
6850: LD_INT 52
6852: PPUSH
6853: CALL_OW 321
6857: PUSH
6858: LD_INT 2
6860: EQUAL
6861: AND
6862: IFFALSE 6879
// bpoints := bpoints * 1.5 ;
6864: LD_ADDR_VAR 0 10
6868: PUSH
6869: LD_VAR 0 10
6873: PUSH
6874: LD_REAL  1.50000000000000E+0000
6877: MUL
6878: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
6879: LD_VAR 0 1
6883: PPUSH
6884: LD_INT 66
6886: PPUSH
6887: CALL_OW 321
6891: PUSH
6892: LD_INT 2
6894: EQUAL
6895: IFFALSE 6912
// bpoints := bpoints * 1.1 ;
6897: LD_ADDR_VAR 0 10
6901: PUSH
6902: LD_VAR 0 10
6906: PUSH
6907: LD_REAL  1.10000000000000E+0000
6910: MUL
6911: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
6912: LD_ADDR_VAR 0 10
6916: PUSH
6917: LD_VAR 0 10
6921: PUSH
6922: LD_VAR 0 6
6926: PPUSH
6927: LD_INT 1
6929: PPUSH
6930: CALL_OW 259
6934: PUSH
6935: LD_REAL  1.15000000000000E+0000
6938: MUL
6939: MUL
6940: ST_TO_ADDR
// end ; unit_vehicle :
6941: GO 7765
6943: LD_INT 2
6945: DOUBLE
6946: EQUAL
6947: IFTRUE 6951
6949: GO 7753
6951: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
6952: LD_VAR 0 6
6956: PPUSH
6957: CALL_OW 264
6961: PUSH
6962: LD_INT 2
6964: PUSH
6965: LD_INT 42
6967: PUSH
6968: LD_INT 24
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: LIST
6975: IN
6976: IFFALSE 6997
// points := [ 25 , 5 , 3 ] ;
6978: LD_ADDR_VAR 0 9
6982: PUSH
6983: LD_INT 25
6985: PUSH
6986: LD_INT 5
6988: PUSH
6989: LD_INT 3
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
6997: LD_VAR 0 6
7001: PPUSH
7002: CALL_OW 264
7006: PUSH
7007: LD_INT 4
7009: PUSH
7010: LD_INT 43
7012: PUSH
7013: LD_INT 25
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: IN
7021: IFFALSE 7042
// points := [ 40 , 15 , 5 ] ;
7023: LD_ADDR_VAR 0 9
7027: PUSH
7028: LD_INT 40
7030: PUSH
7031: LD_INT 15
7033: PUSH
7034: LD_INT 5
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7042: LD_VAR 0 6
7046: PPUSH
7047: CALL_OW 264
7051: PUSH
7052: LD_INT 3
7054: PUSH
7055: LD_INT 23
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: IN
7062: IFFALSE 7083
// points := [ 7 , 25 , 8 ] ;
7064: LD_ADDR_VAR 0 9
7068: PUSH
7069: LD_INT 7
7071: PUSH
7072: LD_INT 25
7074: PUSH
7075: LD_INT 8
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: LIST
7082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7083: LD_VAR 0 6
7087: PPUSH
7088: CALL_OW 264
7092: PUSH
7093: LD_INT 5
7095: PUSH
7096: LD_INT 27
7098: PUSH
7099: LD_INT 44
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: LIST
7106: IN
7107: IFFALSE 7128
// points := [ 14 , 50 , 16 ] ;
7109: LD_ADDR_VAR 0 9
7113: PUSH
7114: LD_INT 14
7116: PUSH
7117: LD_INT 50
7119: PUSH
7120: LD_INT 16
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7128: LD_VAR 0 6
7132: PPUSH
7133: CALL_OW 264
7137: PUSH
7138: LD_INT 6
7140: PUSH
7141: LD_INT 46
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: IN
7148: IFFALSE 7169
// points := [ 32 , 120 , 70 ] ;
7150: LD_ADDR_VAR 0 9
7154: PUSH
7155: LD_INT 32
7157: PUSH
7158: LD_INT 120
7160: PUSH
7161: LD_INT 70
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: LIST
7168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
7169: LD_VAR 0 6
7173: PPUSH
7174: CALL_OW 264
7178: PUSH
7179: LD_INT 7
7181: PUSH
7182: LD_INT 28
7184: PUSH
7185: LD_INT 45
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: LIST
7192: IN
7193: IFFALSE 7214
// points := [ 35 , 20 , 45 ] ;
7195: LD_ADDR_VAR 0 9
7199: PUSH
7200: LD_INT 35
7202: PUSH
7203: LD_INT 20
7205: PUSH
7206: LD_INT 45
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7214: LD_VAR 0 6
7218: PPUSH
7219: CALL_OW 264
7223: PUSH
7224: LD_INT 47
7226: PUSH
7227: EMPTY
7228: LIST
7229: IN
7230: IFFALSE 7251
// points := [ 67 , 45 , 75 ] ;
7232: LD_ADDR_VAR 0 9
7236: PUSH
7237: LD_INT 67
7239: PUSH
7240: LD_INT 45
7242: PUSH
7243: LD_INT 75
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7251: LD_VAR 0 6
7255: PPUSH
7256: CALL_OW 264
7260: PUSH
7261: LD_INT 26
7263: PUSH
7264: EMPTY
7265: LIST
7266: IN
7267: IFFALSE 7288
// points := [ 120 , 30 , 80 ] ;
7269: LD_ADDR_VAR 0 9
7273: PUSH
7274: LD_INT 120
7276: PUSH
7277: LD_INT 30
7279: PUSH
7280: LD_INT 80
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: LIST
7287: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7288: LD_VAR 0 6
7292: PPUSH
7293: CALL_OW 264
7297: PUSH
7298: LD_INT 22
7300: PUSH
7301: EMPTY
7302: LIST
7303: IN
7304: IFFALSE 7325
// points := [ 40 , 1 , 1 ] ;
7306: LD_ADDR_VAR 0 9
7310: PUSH
7311: LD_INT 40
7313: PUSH
7314: LD_INT 1
7316: PUSH
7317: LD_INT 1
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: LIST
7324: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7325: LD_VAR 0 6
7329: PPUSH
7330: CALL_OW 264
7334: PUSH
7335: LD_INT 29
7337: PUSH
7338: EMPTY
7339: LIST
7340: IN
7341: IFFALSE 7362
// points := [ 70 , 200 , 400 ] ;
7343: LD_ADDR_VAR 0 9
7347: PUSH
7348: LD_INT 70
7350: PUSH
7351: LD_INT 200
7353: PUSH
7354: LD_INT 400
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: LIST
7361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7362: LD_VAR 0 6
7366: PPUSH
7367: CALL_OW 264
7371: PUSH
7372: LD_INT 14
7374: PUSH
7375: LD_INT 53
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: IN
7382: IFFALSE 7403
// points := [ 40 , 10 , 20 ] ;
7384: LD_ADDR_VAR 0 9
7388: PUSH
7389: LD_INT 40
7391: PUSH
7392: LD_INT 10
7394: PUSH
7395: LD_INT 20
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: LIST
7402: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7403: LD_VAR 0 6
7407: PPUSH
7408: CALL_OW 264
7412: PUSH
7413: LD_INT 9
7415: PUSH
7416: EMPTY
7417: LIST
7418: IN
7419: IFFALSE 7440
// points := [ 5 , 70 , 20 ] ;
7421: LD_ADDR_VAR 0 9
7425: PUSH
7426: LD_INT 5
7428: PUSH
7429: LD_INT 70
7431: PUSH
7432: LD_INT 20
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: LIST
7439: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7440: LD_VAR 0 6
7444: PPUSH
7445: CALL_OW 264
7449: PUSH
7450: LD_INT 10
7452: PUSH
7453: EMPTY
7454: LIST
7455: IN
7456: IFFALSE 7477
// points := [ 35 , 110 , 70 ] ;
7458: LD_ADDR_VAR 0 9
7462: PUSH
7463: LD_INT 35
7465: PUSH
7466: LD_INT 110
7468: PUSH
7469: LD_INT 70
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7477: LD_VAR 0 6
7481: PPUSH
7482: CALL_OW 265
7486: PUSH
7487: LD_INT 25
7489: EQUAL
7490: IFFALSE 7511
// points := [ 80 , 65 , 100 ] ;
7492: LD_ADDR_VAR 0 9
7496: PUSH
7497: LD_INT 80
7499: PUSH
7500: LD_INT 65
7502: PUSH
7503: LD_INT 100
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: LIST
7510: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7511: LD_VAR 0 6
7515: PPUSH
7516: CALL_OW 263
7520: PUSH
7521: LD_INT 1
7523: EQUAL
7524: IFFALSE 7559
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7526: LD_ADDR_VAR 0 10
7530: PUSH
7531: LD_VAR 0 10
7535: PUSH
7536: LD_VAR 0 6
7540: PPUSH
7541: CALL_OW 311
7545: PPUSH
7546: LD_INT 3
7548: PPUSH
7549: CALL_OW 259
7553: PUSH
7554: LD_INT 4
7556: MUL
7557: MUL
7558: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7559: LD_VAR 0 6
7563: PPUSH
7564: CALL_OW 263
7568: PUSH
7569: LD_INT 2
7571: EQUAL
7572: IFFALSE 7623
// begin j := IsControledBy ( i ) ;
7574: LD_ADDR_VAR 0 7
7578: PUSH
7579: LD_VAR 0 6
7583: PPUSH
7584: CALL_OW 312
7588: ST_TO_ADDR
// if j then
7589: LD_VAR 0 7
7593: IFFALSE 7623
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7595: LD_ADDR_VAR 0 10
7599: PUSH
7600: LD_VAR 0 10
7604: PUSH
7605: LD_VAR 0 7
7609: PPUSH
7610: LD_INT 3
7612: PPUSH
7613: CALL_OW 259
7617: PUSH
7618: LD_INT 3
7620: MUL
7621: MUL
7622: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7623: LD_VAR 0 6
7627: PPUSH
7628: CALL_OW 264
7632: PUSH
7633: LD_INT 5
7635: PUSH
7636: LD_INT 6
7638: PUSH
7639: LD_INT 46
7641: PUSH
7642: LD_INT 44
7644: PUSH
7645: LD_INT 47
7647: PUSH
7648: LD_INT 45
7650: PUSH
7651: LD_INT 28
7653: PUSH
7654: LD_INT 7
7656: PUSH
7657: LD_INT 27
7659: PUSH
7660: LD_INT 29
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: IN
7675: PUSH
7676: LD_VAR 0 1
7680: PPUSH
7681: LD_INT 52
7683: PPUSH
7684: CALL_OW 321
7688: PUSH
7689: LD_INT 2
7691: EQUAL
7692: AND
7693: IFFALSE 7710
// bpoints := bpoints * 1.2 ;
7695: LD_ADDR_VAR 0 10
7699: PUSH
7700: LD_VAR 0 10
7704: PUSH
7705: LD_REAL  1.20000000000000E+0000
7708: MUL
7709: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7710: LD_VAR 0 6
7714: PPUSH
7715: CALL_OW 264
7719: PUSH
7720: LD_INT 6
7722: PUSH
7723: LD_INT 46
7725: PUSH
7726: LD_INT 47
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: LIST
7733: IN
7734: IFFALSE 7751
// bpoints := bpoints * 1.2 ;
7736: LD_ADDR_VAR 0 10
7740: PUSH
7741: LD_VAR 0 10
7745: PUSH
7746: LD_REAL  1.20000000000000E+0000
7749: MUL
7750: ST_TO_ADDR
// end ; unit_building :
7751: GO 7765
7753: LD_INT 3
7755: DOUBLE
7756: EQUAL
7757: IFTRUE 7761
7759: GO 7764
7761: POP
// ; end ;
7762: GO 7765
7764: POP
// for j = 1 to 3 do
7765: LD_ADDR_VAR 0 7
7769: PUSH
7770: DOUBLE
7771: LD_INT 1
7773: DEC
7774: ST_TO_ADDR
7775: LD_INT 3
7777: PUSH
7778: FOR_TO
7779: IFFALSE 7832
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
7781: LD_ADDR_VAR 0 5
7785: PUSH
7786: LD_VAR 0 5
7790: PPUSH
7791: LD_VAR 0 7
7795: PPUSH
7796: LD_VAR 0 5
7800: PUSH
7801: LD_VAR 0 7
7805: ARRAY
7806: PUSH
7807: LD_VAR 0 9
7811: PUSH
7812: LD_VAR 0 7
7816: ARRAY
7817: PUSH
7818: LD_VAR 0 10
7822: MUL
7823: PLUS
7824: PPUSH
7825: CALL_OW 1
7829: ST_TO_ADDR
7830: GO 7778
7832: POP
7833: POP
// end ;
7834: GO 6317
7836: POP
7837: POP
// result := Replace ( result , 4 , tmp ) ;
7838: LD_ADDR_VAR 0 5
7842: PUSH
7843: LD_VAR 0 5
7847: PPUSH
7848: LD_INT 4
7850: PPUSH
7851: LD_VAR 0 8
7855: PPUSH
7856: CALL_OW 1
7860: ST_TO_ADDR
// end ;
7861: LD_VAR 0 5
7865: RET
// export function DangerAtRange ( unit , range ) ; begin
7866: LD_INT 0
7868: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
7869: LD_ADDR_VAR 0 3
7873: PUSH
7874: LD_VAR 0 1
7878: PPUSH
7879: CALL_OW 255
7883: PPUSH
7884: LD_VAR 0 1
7888: PPUSH
7889: CALL_OW 250
7893: PPUSH
7894: LD_VAR 0 1
7898: PPUSH
7899: CALL_OW 251
7903: PPUSH
7904: LD_VAR 0 2
7908: PPUSH
7909: CALL 6169 0 4
7913: ST_TO_ADDR
// end ;
7914: LD_VAR 0 3
7918: RET
// export function DangerInArea ( side , area ) ; begin
7919: LD_INT 0
7921: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7922: LD_ADDR_VAR 0 3
7926: PUSH
7927: LD_VAR 0 2
7931: PPUSH
7932: LD_INT 81
7934: PUSH
7935: LD_VAR 0 1
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: PPUSH
7944: CALL_OW 70
7948: ST_TO_ADDR
// end ;
7949: LD_VAR 0 3
7953: RET
// export function IsExtension ( b ) ; begin
7954: LD_INT 0
7956: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: LD_VAR 0 1
7966: PUSH
7967: LD_INT 23
7969: PUSH
7970: LD_INT 20
7972: PUSH
7973: LD_INT 22
7975: PUSH
7976: LD_INT 17
7978: PUSH
7979: LD_INT 24
7981: PUSH
7982: LD_INT 21
7984: PUSH
7985: LD_INT 19
7987: PUSH
7988: LD_INT 16
7990: PUSH
7991: LD_INT 25
7993: PUSH
7994: LD_INT 18
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: IN
8009: ST_TO_ADDR
// end ;
8010: LD_VAR 0 2
8014: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8015: LD_INT 0
8017: PPUSH
8018: PPUSH
8019: PPUSH
// result := [ ] ;
8020: LD_ADDR_VAR 0 4
8024: PUSH
8025: EMPTY
8026: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8027: LD_ADDR_VAR 0 5
8031: PUSH
8032: LD_VAR 0 2
8036: PPUSH
8037: LD_INT 21
8039: PUSH
8040: LD_INT 3
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PPUSH
8047: CALL_OW 70
8051: ST_TO_ADDR
// if not tmp then
8052: LD_VAR 0 5
8056: NOT
8057: IFFALSE 8061
// exit ;
8059: GO 8125
// if checkLink then
8061: LD_VAR 0 3
8065: IFFALSE 8115
// begin for i in tmp do
8067: LD_ADDR_VAR 0 6
8071: PUSH
8072: LD_VAR 0 5
8076: PUSH
8077: FOR_IN
8078: IFFALSE 8113
// if GetBase ( i ) <> base then
8080: LD_VAR 0 6
8084: PPUSH
8085: CALL_OW 274
8089: PUSH
8090: LD_VAR 0 1
8094: NONEQUAL
8095: IFFALSE 8111
// ComLinkToBase ( base , i ) ;
8097: LD_VAR 0 1
8101: PPUSH
8102: LD_VAR 0 6
8106: PPUSH
8107: CALL_OW 169
8111: GO 8077
8113: POP
8114: POP
// end ; result := tmp ;
8115: LD_ADDR_VAR 0 4
8119: PUSH
8120: LD_VAR 0 5
8124: ST_TO_ADDR
// end ;
8125: LD_VAR 0 4
8129: RET
// export function ComComplete ( units , b ) ; var i ; begin
8130: LD_INT 0
8132: PPUSH
8133: PPUSH
// if not units then
8134: LD_VAR 0 1
8138: NOT
8139: IFFALSE 8143
// exit ;
8141: GO 8233
// for i in units do
8143: LD_ADDR_VAR 0 4
8147: PUSH
8148: LD_VAR 0 1
8152: PUSH
8153: FOR_IN
8154: IFFALSE 8231
// if BuildingStatus ( b ) = bs_build then
8156: LD_VAR 0 2
8160: PPUSH
8161: CALL_OW 461
8165: PUSH
8166: LD_INT 1
8168: EQUAL
8169: IFFALSE 8229
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8171: LD_VAR 0 4
8175: PPUSH
8176: LD_STRING h
8178: PUSH
8179: LD_VAR 0 2
8183: PPUSH
8184: CALL_OW 250
8188: PUSH
8189: LD_VAR 0 2
8193: PPUSH
8194: CALL_OW 251
8198: PUSH
8199: LD_VAR 0 2
8203: PUSH
8204: LD_INT 0
8206: PUSH
8207: LD_INT 0
8209: PUSH
8210: LD_INT 0
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: PUSH
8222: EMPTY
8223: LIST
8224: PPUSH
8225: CALL_OW 446
8229: GO 8153
8231: POP
8232: POP
// end ;
8233: LD_VAR 0 3
8237: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8238: LD_INT 0
8240: PPUSH
8241: PPUSH
8242: PPUSH
8243: PPUSH
8244: PPUSH
8245: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
8246: LD_VAR 0 1
8250: NOT
8251: PUSH
8252: LD_VAR 0 1
8256: PPUSH
8257: CALL_OW 263
8261: PUSH
8262: LD_INT 2
8264: EQUAL
8265: NOT
8266: OR
8267: IFFALSE 8271
// exit ;
8269: GO 8587
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8271: LD_ADDR_VAR 0 6
8275: PUSH
8276: LD_INT 22
8278: PUSH
8279: LD_VAR 0 1
8283: PPUSH
8284: CALL_OW 255
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: LD_INT 2
8295: PUSH
8296: LD_INT 30
8298: PUSH
8299: LD_INT 36
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: PUSH
8306: LD_INT 34
8308: PUSH
8309: LD_INT 31
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PPUSH
8325: CALL_OW 69
8329: ST_TO_ADDR
// if not tmp then
8330: LD_VAR 0 6
8334: NOT
8335: IFFALSE 8339
// exit ;
8337: GO 8587
// result := [ ] ;
8339: LD_ADDR_VAR 0 2
8343: PUSH
8344: EMPTY
8345: ST_TO_ADDR
// for i in tmp do
8346: LD_ADDR_VAR 0 3
8350: PUSH
8351: LD_VAR 0 6
8355: PUSH
8356: FOR_IN
8357: IFFALSE 8428
// begin t := UnitsInside ( i ) ;
8359: LD_ADDR_VAR 0 4
8363: PUSH
8364: LD_VAR 0 3
8368: PPUSH
8369: CALL_OW 313
8373: ST_TO_ADDR
// if t then
8374: LD_VAR 0 4
8378: IFFALSE 8426
// for j in t do
8380: LD_ADDR_VAR 0 7
8384: PUSH
8385: LD_VAR 0 4
8389: PUSH
8390: FOR_IN
8391: IFFALSE 8424
// result := Insert ( result , result + 1 , j ) ;
8393: LD_ADDR_VAR 0 2
8397: PUSH
8398: LD_VAR 0 2
8402: PPUSH
8403: LD_VAR 0 2
8407: PUSH
8408: LD_INT 1
8410: PLUS
8411: PPUSH
8412: LD_VAR 0 7
8416: PPUSH
8417: CALL_OW 2
8421: ST_TO_ADDR
8422: GO 8390
8424: POP
8425: POP
// end ;
8426: GO 8356
8428: POP
8429: POP
// if not result then
8430: LD_VAR 0 2
8434: NOT
8435: IFFALSE 8439
// exit ;
8437: GO 8587
// mech := result [ 1 ] ;
8439: LD_ADDR_VAR 0 5
8443: PUSH
8444: LD_VAR 0 2
8448: PUSH
8449: LD_INT 1
8451: ARRAY
8452: ST_TO_ADDR
// if result > 1 then
8453: LD_VAR 0 2
8457: PUSH
8458: LD_INT 1
8460: GREATER
8461: IFFALSE 8573
// for i = 2 to result do
8463: LD_ADDR_VAR 0 3
8467: PUSH
8468: DOUBLE
8469: LD_INT 2
8471: DEC
8472: ST_TO_ADDR
8473: LD_VAR 0 2
8477: PUSH
8478: FOR_TO
8479: IFFALSE 8571
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8481: LD_ADDR_VAR 0 4
8485: PUSH
8486: LD_VAR 0 2
8490: PUSH
8491: LD_VAR 0 3
8495: ARRAY
8496: PPUSH
8497: LD_INT 3
8499: PPUSH
8500: CALL_OW 259
8504: PUSH
8505: LD_VAR 0 2
8509: PUSH
8510: LD_VAR 0 3
8514: ARRAY
8515: PPUSH
8516: CALL_OW 432
8520: MINUS
8521: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8522: LD_VAR 0 4
8526: PUSH
8527: LD_VAR 0 5
8531: PPUSH
8532: LD_INT 3
8534: PPUSH
8535: CALL_OW 259
8539: PUSH
8540: LD_VAR 0 5
8544: PPUSH
8545: CALL_OW 432
8549: MINUS
8550: GREATEREQUAL
8551: IFFALSE 8569
// mech := result [ i ] ;
8553: LD_ADDR_VAR 0 5
8557: PUSH
8558: LD_VAR 0 2
8562: PUSH
8563: LD_VAR 0 3
8567: ARRAY
8568: ST_TO_ADDR
// end ;
8569: GO 8478
8571: POP
8572: POP
// ComLinkTo ( vehicle , mech ) ;
8573: LD_VAR 0 1
8577: PPUSH
8578: LD_VAR 0 5
8582: PPUSH
8583: CALL_OW 135
// end ;
8587: LD_VAR 0 2
8591: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8592: LD_INT 0
8594: PPUSH
8595: PPUSH
8596: PPUSH
8597: PPUSH
8598: PPUSH
8599: PPUSH
8600: PPUSH
8601: PPUSH
8602: PPUSH
8603: PPUSH
8604: PPUSH
8605: PPUSH
8606: PPUSH
// result := [ ] ;
8607: LD_ADDR_VAR 0 7
8611: PUSH
8612: EMPTY
8613: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8614: LD_VAR 0 1
8618: PPUSH
8619: CALL_OW 266
8623: PUSH
8624: LD_INT 0
8626: PUSH
8627: LD_INT 1
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: IN
8634: NOT
8635: IFFALSE 8639
// exit ;
8637: GO 10273
// if name then
8639: LD_VAR 0 3
8643: IFFALSE 8659
// SetBName ( base_dep , name ) ;
8645: LD_VAR 0 1
8649: PPUSH
8650: LD_VAR 0 3
8654: PPUSH
8655: CALL_OW 500
// base := GetBase ( base_dep ) ;
8659: LD_ADDR_VAR 0 15
8663: PUSH
8664: LD_VAR 0 1
8668: PPUSH
8669: CALL_OW 274
8673: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8674: LD_ADDR_VAR 0 16
8678: PUSH
8679: LD_VAR 0 1
8683: PPUSH
8684: CALL_OW 255
8688: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8689: LD_ADDR_VAR 0 17
8693: PUSH
8694: LD_VAR 0 1
8698: PPUSH
8699: CALL_OW 248
8703: ST_TO_ADDR
// if sources then
8704: LD_VAR 0 5
8708: IFFALSE 8755
// for i = 1 to 3 do
8710: LD_ADDR_VAR 0 8
8714: PUSH
8715: DOUBLE
8716: LD_INT 1
8718: DEC
8719: ST_TO_ADDR
8720: LD_INT 3
8722: PUSH
8723: FOR_TO
8724: IFFALSE 8753
// AddResourceType ( base , i , sources [ i ] ) ;
8726: LD_VAR 0 15
8730: PPUSH
8731: LD_VAR 0 8
8735: PPUSH
8736: LD_VAR 0 5
8740: PUSH
8741: LD_VAR 0 8
8745: ARRAY
8746: PPUSH
8747: CALL_OW 276
8751: GO 8723
8753: POP
8754: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
8755: LD_ADDR_VAR 0 18
8759: PUSH
8760: LD_VAR 0 15
8764: PPUSH
8765: LD_VAR 0 2
8769: PPUSH
8770: LD_INT 1
8772: PPUSH
8773: CALL 8015 0 3
8777: ST_TO_ADDR
// InitHc ;
8778: CALL_OW 19
// InitUc ;
8782: CALL_OW 18
// uc_side := side ;
8786: LD_ADDR_OWVAR 20
8790: PUSH
8791: LD_VAR 0 16
8795: ST_TO_ADDR
// uc_nation := nation ;
8796: LD_ADDR_OWVAR 21
8800: PUSH
8801: LD_VAR 0 17
8805: ST_TO_ADDR
// if buildings then
8806: LD_VAR 0 18
8810: IFFALSE 10132
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
8812: LD_ADDR_VAR 0 19
8816: PUSH
8817: LD_VAR 0 18
8821: PPUSH
8822: LD_INT 2
8824: PUSH
8825: LD_INT 30
8827: PUSH
8828: LD_INT 29
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: LD_INT 30
8837: PUSH
8838: LD_INT 30
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 72
8854: ST_TO_ADDR
// if tmp then
8855: LD_VAR 0 19
8859: IFFALSE 8907
// for i in tmp do
8861: LD_ADDR_VAR 0 8
8865: PUSH
8866: LD_VAR 0 19
8870: PUSH
8871: FOR_IN
8872: IFFALSE 8905
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
8874: LD_VAR 0 8
8878: PPUSH
8879: CALL_OW 250
8883: PPUSH
8884: LD_VAR 0 8
8888: PPUSH
8889: CALL_OW 251
8893: PPUSH
8894: LD_VAR 0 16
8898: PPUSH
8899: CALL_OW 441
8903: GO 8871
8905: POP
8906: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
8907: LD_VAR 0 18
8911: PPUSH
8912: LD_INT 2
8914: PUSH
8915: LD_INT 30
8917: PUSH
8918: LD_INT 32
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: PUSH
8925: LD_INT 30
8927: PUSH
8928: LD_INT 33
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: LIST
8939: PPUSH
8940: CALL_OW 72
8944: IFFALSE 9032
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
8946: LD_ADDR_VAR 0 8
8950: PUSH
8951: LD_VAR 0 18
8955: PPUSH
8956: LD_INT 2
8958: PUSH
8959: LD_INT 30
8961: PUSH
8962: LD_INT 32
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: LD_INT 30
8971: PUSH
8972: LD_INT 33
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: PPUSH
8984: CALL_OW 72
8988: PUSH
8989: FOR_IN
8990: IFFALSE 9030
// begin if not GetBWeapon ( i ) then
8992: LD_VAR 0 8
8996: PPUSH
8997: CALL_OW 269
9001: NOT
9002: IFFALSE 9028
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9004: LD_VAR 0 8
9008: PPUSH
9009: LD_VAR 0 8
9013: PPUSH
9014: LD_VAR 0 2
9018: PPUSH
9019: CALL 10278 0 2
9023: PPUSH
9024: CALL_OW 431
// end ;
9028: GO 8989
9030: POP
9031: POP
// end ; for i = 1 to personel do
9032: LD_ADDR_VAR 0 8
9036: PUSH
9037: DOUBLE
9038: LD_INT 1
9040: DEC
9041: ST_TO_ADDR
9042: LD_VAR 0 6
9046: PUSH
9047: FOR_TO
9048: IFFALSE 10112
// begin if i > 4 then
9050: LD_VAR 0 8
9054: PUSH
9055: LD_INT 4
9057: GREATER
9058: IFFALSE 9062
// break ;
9060: GO 10112
// case i of 1 :
9062: LD_VAR 0 8
9066: PUSH
9067: LD_INT 1
9069: DOUBLE
9070: EQUAL
9071: IFTRUE 9075
9073: GO 9155
9075: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9076: LD_ADDR_VAR 0 12
9080: PUSH
9081: LD_VAR 0 18
9085: PPUSH
9086: LD_INT 22
9088: PUSH
9089: LD_VAR 0 16
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: PUSH
9098: LD_INT 58
9100: PUSH
9101: EMPTY
9102: LIST
9103: PUSH
9104: LD_INT 2
9106: PUSH
9107: LD_INT 30
9109: PUSH
9110: LD_INT 32
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: LD_INT 30
9119: PUSH
9120: LD_INT 4
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: LD_INT 30
9129: PUSH
9130: LD_INT 5
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: PPUSH
9148: CALL_OW 72
9152: ST_TO_ADDR
9153: GO 9377
9155: LD_INT 2
9157: DOUBLE
9158: EQUAL
9159: IFTRUE 9163
9161: GO 9225
9163: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9164: LD_ADDR_VAR 0 12
9168: PUSH
9169: LD_VAR 0 18
9173: PPUSH
9174: LD_INT 22
9176: PUSH
9177: LD_VAR 0 16
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: PUSH
9186: LD_INT 2
9188: PUSH
9189: LD_INT 30
9191: PUSH
9192: LD_INT 0
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: LD_INT 30
9201: PUSH
9202: LD_INT 1
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: LIST
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PPUSH
9218: CALL_OW 72
9222: ST_TO_ADDR
9223: GO 9377
9225: LD_INT 3
9227: DOUBLE
9228: EQUAL
9229: IFTRUE 9233
9231: GO 9295
9233: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9234: LD_ADDR_VAR 0 12
9238: PUSH
9239: LD_VAR 0 18
9243: PPUSH
9244: LD_INT 22
9246: PUSH
9247: LD_VAR 0 16
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: LD_INT 2
9258: PUSH
9259: LD_INT 30
9261: PUSH
9262: LD_INT 2
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 30
9271: PUSH
9272: LD_INT 3
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: LIST
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PPUSH
9288: CALL_OW 72
9292: ST_TO_ADDR
9293: GO 9377
9295: LD_INT 4
9297: DOUBLE
9298: EQUAL
9299: IFTRUE 9303
9301: GO 9376
9303: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9304: LD_ADDR_VAR 0 12
9308: PUSH
9309: LD_VAR 0 18
9313: PPUSH
9314: LD_INT 22
9316: PUSH
9317: LD_VAR 0 16
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: LD_INT 2
9328: PUSH
9329: LD_INT 30
9331: PUSH
9332: LD_INT 6
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 30
9341: PUSH
9342: LD_INT 7
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: LD_INT 30
9351: PUSH
9352: LD_INT 8
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PPUSH
9369: CALL_OW 72
9373: ST_TO_ADDR
9374: GO 9377
9376: POP
// if i = 1 then
9377: LD_VAR 0 8
9381: PUSH
9382: LD_INT 1
9384: EQUAL
9385: IFFALSE 9496
// begin tmp := [ ] ;
9387: LD_ADDR_VAR 0 19
9391: PUSH
9392: EMPTY
9393: ST_TO_ADDR
// for j in f do
9394: LD_ADDR_VAR 0 9
9398: PUSH
9399: LD_VAR 0 12
9403: PUSH
9404: FOR_IN
9405: IFFALSE 9478
// if GetBType ( j ) = b_bunker then
9407: LD_VAR 0 9
9411: PPUSH
9412: CALL_OW 266
9416: PUSH
9417: LD_INT 32
9419: EQUAL
9420: IFFALSE 9447
// tmp := Insert ( tmp , 1 , j ) else
9422: LD_ADDR_VAR 0 19
9426: PUSH
9427: LD_VAR 0 19
9431: PPUSH
9432: LD_INT 1
9434: PPUSH
9435: LD_VAR 0 9
9439: PPUSH
9440: CALL_OW 2
9444: ST_TO_ADDR
9445: GO 9476
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9447: LD_ADDR_VAR 0 19
9451: PUSH
9452: LD_VAR 0 19
9456: PPUSH
9457: LD_VAR 0 19
9461: PUSH
9462: LD_INT 1
9464: PLUS
9465: PPUSH
9466: LD_VAR 0 9
9470: PPUSH
9471: CALL_OW 2
9475: ST_TO_ADDR
9476: GO 9404
9478: POP
9479: POP
// if tmp then
9480: LD_VAR 0 19
9484: IFFALSE 9496
// f := tmp ;
9486: LD_ADDR_VAR 0 12
9490: PUSH
9491: LD_VAR 0 19
9495: ST_TO_ADDR
// end ; x := personel [ i ] ;
9496: LD_ADDR_VAR 0 13
9500: PUSH
9501: LD_VAR 0 6
9505: PUSH
9506: LD_VAR 0 8
9510: ARRAY
9511: ST_TO_ADDR
// if x = - 1 then
9512: LD_VAR 0 13
9516: PUSH
9517: LD_INT 1
9519: NEG
9520: EQUAL
9521: IFFALSE 9730
// begin for j in f do
9523: LD_ADDR_VAR 0 9
9527: PUSH
9528: LD_VAR 0 12
9532: PUSH
9533: FOR_IN
9534: IFFALSE 9726
// repeat InitHc ;
9536: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9540: LD_VAR 0 9
9544: PPUSH
9545: CALL_OW 266
9549: PUSH
9550: LD_INT 5
9552: EQUAL
9553: IFFALSE 9623
// begin if UnitsInside ( j ) < 3 then
9555: LD_VAR 0 9
9559: PPUSH
9560: CALL_OW 313
9564: PUSH
9565: LD_INT 3
9567: LESS
9568: IFFALSE 9604
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9570: LD_INT 0
9572: PPUSH
9573: LD_INT 5
9575: PUSH
9576: LD_INT 8
9578: PUSH
9579: LD_INT 9
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: PUSH
9587: LD_VAR 0 17
9591: ARRAY
9592: PPUSH
9593: LD_VAR 0 4
9597: PPUSH
9598: CALL_OW 380
9602: GO 9621
// PrepareHuman ( false , i , skill ) ;
9604: LD_INT 0
9606: PPUSH
9607: LD_VAR 0 8
9611: PPUSH
9612: LD_VAR 0 4
9616: PPUSH
9617: CALL_OW 380
// end else
9621: GO 9640
// PrepareHuman ( false , i , skill ) ;
9623: LD_INT 0
9625: PPUSH
9626: LD_VAR 0 8
9630: PPUSH
9631: LD_VAR 0 4
9635: PPUSH
9636: CALL_OW 380
// un := CreateHuman ;
9640: LD_ADDR_VAR 0 14
9644: PUSH
9645: CALL_OW 44
9649: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9650: LD_ADDR_VAR 0 7
9654: PUSH
9655: LD_VAR 0 7
9659: PPUSH
9660: LD_INT 1
9662: PPUSH
9663: LD_VAR 0 14
9667: PPUSH
9668: CALL_OW 2
9672: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9673: LD_VAR 0 14
9677: PPUSH
9678: LD_VAR 0 9
9682: PPUSH
9683: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9687: LD_VAR 0 9
9691: PPUSH
9692: CALL_OW 313
9696: PUSH
9697: LD_INT 6
9699: EQUAL
9700: PUSH
9701: LD_VAR 0 9
9705: PPUSH
9706: CALL_OW 266
9710: PUSH
9711: LD_INT 32
9713: PUSH
9714: LD_INT 31
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: IN
9721: OR
9722: IFFALSE 9536
9724: GO 9533
9726: POP
9727: POP
// end else
9728: GO 10110
// for j = 1 to x do
9730: LD_ADDR_VAR 0 9
9734: PUSH
9735: DOUBLE
9736: LD_INT 1
9738: DEC
9739: ST_TO_ADDR
9740: LD_VAR 0 13
9744: PUSH
9745: FOR_TO
9746: IFFALSE 10108
// begin InitHc ;
9748: CALL_OW 19
// if not f then
9752: LD_VAR 0 12
9756: NOT
9757: IFFALSE 9846
// begin PrepareHuman ( false , i , skill ) ;
9759: LD_INT 0
9761: PPUSH
9762: LD_VAR 0 8
9766: PPUSH
9767: LD_VAR 0 4
9771: PPUSH
9772: CALL_OW 380
// un := CreateHuman ;
9776: LD_ADDR_VAR 0 14
9780: PUSH
9781: CALL_OW 44
9785: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9786: LD_ADDR_VAR 0 7
9790: PUSH
9791: LD_VAR 0 7
9795: PPUSH
9796: LD_INT 1
9798: PPUSH
9799: LD_VAR 0 14
9803: PPUSH
9804: CALL_OW 2
9808: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
9809: LD_VAR 0 14
9813: PPUSH
9814: LD_VAR 0 1
9818: PPUSH
9819: CALL_OW 250
9823: PPUSH
9824: LD_VAR 0 1
9828: PPUSH
9829: CALL_OW 251
9833: PPUSH
9834: LD_INT 10
9836: PPUSH
9837: LD_INT 0
9839: PPUSH
9840: CALL_OW 50
// continue ;
9844: GO 9745
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
9846: LD_VAR 0 12
9850: PUSH
9851: LD_INT 1
9853: ARRAY
9854: PPUSH
9855: CALL_OW 313
9859: PUSH
9860: LD_VAR 0 12
9864: PUSH
9865: LD_INT 1
9867: ARRAY
9868: PPUSH
9869: CALL_OW 266
9873: PUSH
9874: LD_INT 32
9876: PUSH
9877: LD_INT 31
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: IN
9884: AND
9885: PUSH
9886: LD_VAR 0 12
9890: PUSH
9891: LD_INT 1
9893: ARRAY
9894: PPUSH
9895: CALL_OW 313
9899: PUSH
9900: LD_INT 6
9902: EQUAL
9903: OR
9904: IFFALSE 9924
// f := Delete ( f , 1 ) ;
9906: LD_ADDR_VAR 0 12
9910: PUSH
9911: LD_VAR 0 12
9915: PPUSH
9916: LD_INT 1
9918: PPUSH
9919: CALL_OW 3
9923: ST_TO_ADDR
// if not f then
9924: LD_VAR 0 12
9928: NOT
9929: IFFALSE 9947
// begin x := x + 2 ;
9931: LD_ADDR_VAR 0 13
9935: PUSH
9936: LD_VAR 0 13
9940: PUSH
9941: LD_INT 2
9943: PLUS
9944: ST_TO_ADDR
// continue ;
9945: GO 9745
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
9947: LD_VAR 0 12
9951: PUSH
9952: LD_INT 1
9954: ARRAY
9955: PPUSH
9956: CALL_OW 266
9960: PUSH
9961: LD_INT 5
9963: EQUAL
9964: IFFALSE 10038
// begin if UnitsInside ( f [ 1 ] ) < 3 then
9966: LD_VAR 0 12
9970: PUSH
9971: LD_INT 1
9973: ARRAY
9974: PPUSH
9975: CALL_OW 313
9979: PUSH
9980: LD_INT 3
9982: LESS
9983: IFFALSE 10019
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9985: LD_INT 0
9987: PPUSH
9988: LD_INT 5
9990: PUSH
9991: LD_INT 8
9993: PUSH
9994: LD_INT 9
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: PUSH
10002: LD_VAR 0 17
10006: ARRAY
10007: PPUSH
10008: LD_VAR 0 4
10012: PPUSH
10013: CALL_OW 380
10017: GO 10036
// PrepareHuman ( false , i , skill ) ;
10019: LD_INT 0
10021: PPUSH
10022: LD_VAR 0 8
10026: PPUSH
10027: LD_VAR 0 4
10031: PPUSH
10032: CALL_OW 380
// end else
10036: GO 10055
// PrepareHuman ( false , i , skill ) ;
10038: LD_INT 0
10040: PPUSH
10041: LD_VAR 0 8
10045: PPUSH
10046: LD_VAR 0 4
10050: PPUSH
10051: CALL_OW 380
// un := CreateHuman ;
10055: LD_ADDR_VAR 0 14
10059: PUSH
10060: CALL_OW 44
10064: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10065: LD_ADDR_VAR 0 7
10069: PUSH
10070: LD_VAR 0 7
10074: PPUSH
10075: LD_INT 1
10077: PPUSH
10078: LD_VAR 0 14
10082: PPUSH
10083: CALL_OW 2
10087: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10088: LD_VAR 0 14
10092: PPUSH
10093: LD_VAR 0 12
10097: PUSH
10098: LD_INT 1
10100: ARRAY
10101: PPUSH
10102: CALL_OW 52
// end ;
10106: GO 9745
10108: POP
10109: POP
// end ;
10110: GO 9047
10112: POP
10113: POP
// result := result ^ buildings ;
10114: LD_ADDR_VAR 0 7
10118: PUSH
10119: LD_VAR 0 7
10123: PUSH
10124: LD_VAR 0 18
10128: ADD
10129: ST_TO_ADDR
// end else
10130: GO 10273
// begin for i = 1 to personel do
10132: LD_ADDR_VAR 0 8
10136: PUSH
10137: DOUBLE
10138: LD_INT 1
10140: DEC
10141: ST_TO_ADDR
10142: LD_VAR 0 6
10146: PUSH
10147: FOR_TO
10148: IFFALSE 10271
// begin if i > 4 then
10150: LD_VAR 0 8
10154: PUSH
10155: LD_INT 4
10157: GREATER
10158: IFFALSE 10162
// break ;
10160: GO 10271
// x := personel [ i ] ;
10162: LD_ADDR_VAR 0 13
10166: PUSH
10167: LD_VAR 0 6
10171: PUSH
10172: LD_VAR 0 8
10176: ARRAY
10177: ST_TO_ADDR
// if x = - 1 then
10178: LD_VAR 0 13
10182: PUSH
10183: LD_INT 1
10185: NEG
10186: EQUAL
10187: IFFALSE 10191
// continue ;
10189: GO 10147
// PrepareHuman ( false , i , skill ) ;
10191: LD_INT 0
10193: PPUSH
10194: LD_VAR 0 8
10198: PPUSH
10199: LD_VAR 0 4
10203: PPUSH
10204: CALL_OW 380
// un := CreateHuman ;
10208: LD_ADDR_VAR 0 14
10212: PUSH
10213: CALL_OW 44
10217: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10218: LD_VAR 0 14
10222: PPUSH
10223: LD_VAR 0 1
10227: PPUSH
10228: CALL_OW 250
10232: PPUSH
10233: LD_VAR 0 1
10237: PPUSH
10238: CALL_OW 251
10242: PPUSH
10243: LD_INT 10
10245: PPUSH
10246: LD_INT 0
10248: PPUSH
10249: CALL_OW 50
// result := result ^ un ;
10253: LD_ADDR_VAR 0 7
10257: PUSH
10258: LD_VAR 0 7
10262: PUSH
10263: LD_VAR 0 14
10267: ADD
10268: ST_TO_ADDR
// end ;
10269: GO 10147
10271: POP
10272: POP
// end ; end ;
10273: LD_VAR 0 7
10277: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10278: LD_INT 0
10280: PPUSH
10281: PPUSH
10282: PPUSH
10283: PPUSH
10284: PPUSH
10285: PPUSH
10286: PPUSH
10287: PPUSH
10288: PPUSH
10289: PPUSH
10290: PPUSH
10291: PPUSH
10292: PPUSH
10293: PPUSH
10294: PPUSH
10295: PPUSH
// result := false ;
10296: LD_ADDR_VAR 0 3
10300: PUSH
10301: LD_INT 0
10303: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10304: LD_VAR 0 1
10308: NOT
10309: PUSH
10310: LD_VAR 0 1
10314: PPUSH
10315: CALL_OW 266
10319: PUSH
10320: LD_INT 32
10322: PUSH
10323: LD_INT 33
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: IN
10330: NOT
10331: OR
10332: IFFALSE 10336
// exit ;
10334: GO 11445
// nat := GetNation ( tower ) ;
10336: LD_ADDR_VAR 0 12
10340: PUSH
10341: LD_VAR 0 1
10345: PPUSH
10346: CALL_OW 248
10350: ST_TO_ADDR
// side := GetSide ( tower ) ;
10351: LD_ADDR_VAR 0 16
10355: PUSH
10356: LD_VAR 0 1
10360: PPUSH
10361: CALL_OW 255
10365: ST_TO_ADDR
// x := GetX ( tower ) ;
10366: LD_ADDR_VAR 0 10
10370: PUSH
10371: LD_VAR 0 1
10375: PPUSH
10376: CALL_OW 250
10380: ST_TO_ADDR
// y := GetY ( tower ) ;
10381: LD_ADDR_VAR 0 11
10385: PUSH
10386: LD_VAR 0 1
10390: PPUSH
10391: CALL_OW 251
10395: ST_TO_ADDR
// if not x or not y then
10396: LD_VAR 0 10
10400: NOT
10401: PUSH
10402: LD_VAR 0 11
10406: NOT
10407: OR
10408: IFFALSE 10412
// exit ;
10410: GO 11445
// weapon := 0 ;
10412: LD_ADDR_VAR 0 18
10416: PUSH
10417: LD_INT 0
10419: ST_TO_ADDR
// fac_list := [ ] ;
10420: LD_ADDR_VAR 0 17
10424: PUSH
10425: EMPTY
10426: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10427: LD_ADDR_VAR 0 6
10431: PUSH
10432: LD_VAR 0 1
10436: PPUSH
10437: CALL_OW 274
10441: PPUSH
10442: LD_VAR 0 2
10446: PPUSH
10447: LD_INT 0
10449: PPUSH
10450: CALL 8015 0 3
10454: PPUSH
10455: LD_INT 30
10457: PUSH
10458: LD_INT 3
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 72
10469: ST_TO_ADDR
// if not factories then
10470: LD_VAR 0 6
10474: NOT
10475: IFFALSE 10479
// exit ;
10477: GO 11445
// for i in factories do
10479: LD_ADDR_VAR 0 8
10483: PUSH
10484: LD_VAR 0 6
10488: PUSH
10489: FOR_IN
10490: IFFALSE 10515
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10492: LD_ADDR_VAR 0 17
10496: PUSH
10497: LD_VAR 0 17
10501: PUSH
10502: LD_VAR 0 8
10506: PPUSH
10507: CALL_OW 478
10511: UNION
10512: ST_TO_ADDR
10513: GO 10489
10515: POP
10516: POP
// if not fac_list then
10517: LD_VAR 0 17
10521: NOT
10522: IFFALSE 10526
// exit ;
10524: GO 11445
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10526: LD_ADDR_VAR 0 5
10530: PUSH
10531: LD_INT 4
10533: PUSH
10534: LD_INT 5
10536: PUSH
10537: LD_INT 9
10539: PUSH
10540: LD_INT 10
10542: PUSH
10543: LD_INT 6
10545: PUSH
10546: LD_INT 7
10548: PUSH
10549: LD_INT 11
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 27
10563: PUSH
10564: LD_INT 28
10566: PUSH
10567: LD_INT 26
10569: PUSH
10570: LD_INT 30
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: PUSH
10579: LD_INT 43
10581: PUSH
10582: LD_INT 44
10584: PUSH
10585: LD_INT 46
10587: PUSH
10588: LD_INT 45
10590: PUSH
10591: LD_INT 47
10593: PUSH
10594: LD_INT 49
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: LIST
10609: PUSH
10610: LD_VAR 0 12
10614: ARRAY
10615: ST_TO_ADDR
// list := list isect fac_list ;
10616: LD_ADDR_VAR 0 5
10620: PUSH
10621: LD_VAR 0 5
10625: PUSH
10626: LD_VAR 0 17
10630: ISECT
10631: ST_TO_ADDR
// if not list then
10632: LD_VAR 0 5
10636: NOT
10637: IFFALSE 10641
// exit ;
10639: GO 11445
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10641: LD_VAR 0 12
10645: PUSH
10646: LD_INT 3
10648: EQUAL
10649: PUSH
10650: LD_INT 49
10652: PUSH
10653: LD_VAR 0 5
10657: IN
10658: AND
10659: PUSH
10660: LD_INT 31
10662: PPUSH
10663: LD_VAR 0 16
10667: PPUSH
10668: CALL_OW 321
10672: PUSH
10673: LD_INT 2
10675: EQUAL
10676: AND
10677: IFFALSE 10737
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10679: LD_INT 22
10681: PUSH
10682: LD_VAR 0 16
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PUSH
10691: LD_INT 35
10693: PUSH
10694: LD_INT 49
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: PUSH
10701: LD_INT 91
10703: PUSH
10704: LD_VAR 0 1
10708: PUSH
10709: LD_INT 10
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: PPUSH
10722: CALL_OW 69
10726: NOT
10727: IFFALSE 10737
// weapon := ru_time_lapser ;
10729: LD_ADDR_VAR 0 18
10733: PUSH
10734: LD_INT 49
10736: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
10737: LD_VAR 0 12
10741: PUSH
10742: LD_INT 1
10744: PUSH
10745: LD_INT 2
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: IN
10752: PUSH
10753: LD_INT 11
10755: PUSH
10756: LD_VAR 0 5
10760: IN
10761: PUSH
10762: LD_INT 30
10764: PUSH
10765: LD_VAR 0 5
10769: IN
10770: OR
10771: AND
10772: PUSH
10773: LD_INT 6
10775: PPUSH
10776: LD_VAR 0 16
10780: PPUSH
10781: CALL_OW 321
10785: PUSH
10786: LD_INT 2
10788: EQUAL
10789: AND
10790: IFFALSE 10955
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
10792: LD_INT 22
10794: PUSH
10795: LD_VAR 0 16
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: LD_INT 2
10806: PUSH
10807: LD_INT 35
10809: PUSH
10810: LD_INT 11
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: LD_INT 35
10819: PUSH
10820: LD_INT 30
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 91
10834: PUSH
10835: LD_VAR 0 1
10839: PUSH
10840: LD_INT 18
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: LIST
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: LIST
10852: PPUSH
10853: CALL_OW 69
10857: NOT
10858: PUSH
10859: LD_INT 22
10861: PUSH
10862: LD_VAR 0 16
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PUSH
10871: LD_INT 2
10873: PUSH
10874: LD_INT 30
10876: PUSH
10877: LD_INT 32
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: PUSH
10884: LD_INT 30
10886: PUSH
10887: LD_INT 33
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 91
10901: PUSH
10902: LD_VAR 0 1
10906: PUSH
10907: LD_INT 12
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: LIST
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: LIST
10919: PUSH
10920: EMPTY
10921: LIST
10922: PPUSH
10923: CALL_OW 69
10927: PUSH
10928: LD_INT 2
10930: GREATER
10931: AND
10932: IFFALSE 10955
// weapon := [ us_radar , ar_radar ] [ nat ] ;
10934: LD_ADDR_VAR 0 18
10938: PUSH
10939: LD_INT 11
10941: PUSH
10942: LD_INT 30
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: LD_VAR 0 12
10953: ARRAY
10954: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
10955: LD_VAR 0 18
10959: NOT
10960: PUSH
10961: LD_INT 40
10963: PPUSH
10964: LD_VAR 0 16
10968: PPUSH
10969: CALL_OW 321
10973: PUSH
10974: LD_INT 2
10976: EQUAL
10977: AND
10978: PUSH
10979: LD_INT 7
10981: PUSH
10982: LD_VAR 0 5
10986: IN
10987: PUSH
10988: LD_INT 28
10990: PUSH
10991: LD_VAR 0 5
10995: IN
10996: OR
10997: PUSH
10998: LD_INT 45
11000: PUSH
11001: LD_VAR 0 5
11005: IN
11006: OR
11007: AND
11008: IFFALSE 11262
// begin hex := GetHexInfo ( x , y ) ;
11010: LD_ADDR_VAR 0 4
11014: PUSH
11015: LD_VAR 0 10
11019: PPUSH
11020: LD_VAR 0 11
11024: PPUSH
11025: CALL_OW 546
11029: ST_TO_ADDR
// if hex [ 1 ] then
11030: LD_VAR 0 4
11034: PUSH
11035: LD_INT 1
11037: ARRAY
11038: IFFALSE 11042
// exit ;
11040: GO 11445
// height := hex [ 2 ] ;
11042: LD_ADDR_VAR 0 15
11046: PUSH
11047: LD_VAR 0 4
11051: PUSH
11052: LD_INT 2
11054: ARRAY
11055: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11056: LD_ADDR_VAR 0 14
11060: PUSH
11061: LD_INT 0
11063: PUSH
11064: LD_INT 2
11066: PUSH
11067: LD_INT 3
11069: PUSH
11070: LD_INT 5
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: ST_TO_ADDR
// for i in tmp do
11079: LD_ADDR_VAR 0 8
11083: PUSH
11084: LD_VAR 0 14
11088: PUSH
11089: FOR_IN
11090: IFFALSE 11260
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11092: LD_ADDR_VAR 0 9
11096: PUSH
11097: LD_VAR 0 10
11101: PPUSH
11102: LD_VAR 0 8
11106: PPUSH
11107: LD_INT 5
11109: PPUSH
11110: CALL_OW 272
11114: PUSH
11115: LD_VAR 0 11
11119: PPUSH
11120: LD_VAR 0 8
11124: PPUSH
11125: LD_INT 5
11127: PPUSH
11128: CALL_OW 273
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11137: LD_VAR 0 9
11141: PUSH
11142: LD_INT 1
11144: ARRAY
11145: PPUSH
11146: LD_VAR 0 9
11150: PUSH
11151: LD_INT 2
11153: ARRAY
11154: PPUSH
11155: CALL_OW 488
11159: IFFALSE 11258
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11161: LD_ADDR_VAR 0 4
11165: PUSH
11166: LD_VAR 0 9
11170: PUSH
11171: LD_INT 1
11173: ARRAY
11174: PPUSH
11175: LD_VAR 0 9
11179: PUSH
11180: LD_INT 2
11182: ARRAY
11183: PPUSH
11184: CALL_OW 546
11188: ST_TO_ADDR
// if hex [ 1 ] then
11189: LD_VAR 0 4
11193: PUSH
11194: LD_INT 1
11196: ARRAY
11197: IFFALSE 11201
// continue ;
11199: GO 11089
// h := hex [ 2 ] ;
11201: LD_ADDR_VAR 0 13
11205: PUSH
11206: LD_VAR 0 4
11210: PUSH
11211: LD_INT 2
11213: ARRAY
11214: ST_TO_ADDR
// if h + 7 < height then
11215: LD_VAR 0 13
11219: PUSH
11220: LD_INT 7
11222: PLUS
11223: PUSH
11224: LD_VAR 0 15
11228: LESS
11229: IFFALSE 11258
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11231: LD_ADDR_VAR 0 18
11235: PUSH
11236: LD_INT 7
11238: PUSH
11239: LD_INT 28
11241: PUSH
11242: LD_INT 45
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: PUSH
11250: LD_VAR 0 12
11254: ARRAY
11255: ST_TO_ADDR
// break ;
11256: GO 11260
// end ; end ; end ;
11258: GO 11089
11260: POP
11261: POP
// end ; if not weapon then
11262: LD_VAR 0 18
11266: NOT
11267: IFFALSE 11327
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11269: LD_ADDR_VAR 0 5
11273: PUSH
11274: LD_VAR 0 5
11278: PUSH
11279: LD_INT 11
11281: PUSH
11282: LD_INT 30
11284: PUSH
11285: LD_INT 49
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: LIST
11292: DIFF
11293: ST_TO_ADDR
// if not list then
11294: LD_VAR 0 5
11298: NOT
11299: IFFALSE 11303
// exit ;
11301: GO 11445
// weapon := list [ rand ( 1 , list ) ] ;
11303: LD_ADDR_VAR 0 18
11307: PUSH
11308: LD_VAR 0 5
11312: PUSH
11313: LD_INT 1
11315: PPUSH
11316: LD_VAR 0 5
11320: PPUSH
11321: CALL_OW 12
11325: ARRAY
11326: ST_TO_ADDR
// end ; if weapon then
11327: LD_VAR 0 18
11331: IFFALSE 11445
// begin tmp := CostOfWeapon ( weapon ) ;
11333: LD_ADDR_VAR 0 14
11337: PUSH
11338: LD_VAR 0 18
11342: PPUSH
11343: CALL_OW 451
11347: ST_TO_ADDR
// j := GetBase ( tower ) ;
11348: LD_ADDR_VAR 0 9
11352: PUSH
11353: LD_VAR 0 1
11357: PPUSH
11358: CALL_OW 274
11362: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11363: LD_VAR 0 9
11367: PPUSH
11368: LD_INT 1
11370: PPUSH
11371: CALL_OW 275
11375: PUSH
11376: LD_VAR 0 14
11380: PUSH
11381: LD_INT 1
11383: ARRAY
11384: GREATEREQUAL
11385: PUSH
11386: LD_VAR 0 9
11390: PPUSH
11391: LD_INT 2
11393: PPUSH
11394: CALL_OW 275
11398: PUSH
11399: LD_VAR 0 14
11403: PUSH
11404: LD_INT 2
11406: ARRAY
11407: GREATEREQUAL
11408: AND
11409: PUSH
11410: LD_VAR 0 9
11414: PPUSH
11415: LD_INT 3
11417: PPUSH
11418: CALL_OW 275
11422: PUSH
11423: LD_VAR 0 14
11427: PUSH
11428: LD_INT 3
11430: ARRAY
11431: GREATEREQUAL
11432: AND
11433: IFFALSE 11445
// result := weapon ;
11435: LD_ADDR_VAR 0 3
11439: PUSH
11440: LD_VAR 0 18
11444: ST_TO_ADDR
// end ; end ;
11445: LD_VAR 0 3
11449: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11450: LD_INT 0
11452: PPUSH
11453: PPUSH
// result := true ;
11454: LD_ADDR_VAR 0 3
11458: PUSH
11459: LD_INT 1
11461: ST_TO_ADDR
// if array1 = array2 then
11462: LD_VAR 0 1
11466: PUSH
11467: LD_VAR 0 2
11471: EQUAL
11472: IFFALSE 11532
// begin for i = 1 to array1 do
11474: LD_ADDR_VAR 0 4
11478: PUSH
11479: DOUBLE
11480: LD_INT 1
11482: DEC
11483: ST_TO_ADDR
11484: LD_VAR 0 1
11488: PUSH
11489: FOR_TO
11490: IFFALSE 11528
// if array1 [ i ] <> array2 [ i ] then
11492: LD_VAR 0 1
11496: PUSH
11497: LD_VAR 0 4
11501: ARRAY
11502: PUSH
11503: LD_VAR 0 2
11507: PUSH
11508: LD_VAR 0 4
11512: ARRAY
11513: NONEQUAL
11514: IFFALSE 11526
// begin result := false ;
11516: LD_ADDR_VAR 0 3
11520: PUSH
11521: LD_INT 0
11523: ST_TO_ADDR
// break ;
11524: GO 11528
// end ;
11526: GO 11489
11528: POP
11529: POP
// end else
11530: GO 11540
// result := false ;
11532: LD_ADDR_VAR 0 3
11536: PUSH
11537: LD_INT 0
11539: ST_TO_ADDR
// end ;
11540: LD_VAR 0 3
11544: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11545: LD_INT 0
11547: PPUSH
11548: PPUSH
// if not array1 or not array2 then
11549: LD_VAR 0 1
11553: NOT
11554: PUSH
11555: LD_VAR 0 2
11559: NOT
11560: OR
11561: IFFALSE 11565
// exit ;
11563: GO 11629
// result := true ;
11565: LD_ADDR_VAR 0 3
11569: PUSH
11570: LD_INT 1
11572: ST_TO_ADDR
// for i = 1 to array1 do
11573: LD_ADDR_VAR 0 4
11577: PUSH
11578: DOUBLE
11579: LD_INT 1
11581: DEC
11582: ST_TO_ADDR
11583: LD_VAR 0 1
11587: PUSH
11588: FOR_TO
11589: IFFALSE 11627
// if array1 [ i ] <> array2 [ i ] then
11591: LD_VAR 0 1
11595: PUSH
11596: LD_VAR 0 4
11600: ARRAY
11601: PUSH
11602: LD_VAR 0 2
11606: PUSH
11607: LD_VAR 0 4
11611: ARRAY
11612: NONEQUAL
11613: IFFALSE 11625
// begin result := false ;
11615: LD_ADDR_VAR 0 3
11619: PUSH
11620: LD_INT 0
11622: ST_TO_ADDR
// break ;
11623: GO 11627
// end ;
11625: GO 11588
11627: POP
11628: POP
// end ;
11629: LD_VAR 0 3
11633: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11634: LD_INT 0
11636: PPUSH
11637: PPUSH
11638: PPUSH
// pom := GetBase ( fac ) ;
11639: LD_ADDR_VAR 0 5
11643: PUSH
11644: LD_VAR 0 1
11648: PPUSH
11649: CALL_OW 274
11653: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11654: LD_ADDR_VAR 0 4
11658: PUSH
11659: LD_VAR 0 2
11663: PUSH
11664: LD_INT 1
11666: ARRAY
11667: PPUSH
11668: LD_VAR 0 2
11672: PUSH
11673: LD_INT 2
11675: ARRAY
11676: PPUSH
11677: LD_VAR 0 2
11681: PUSH
11682: LD_INT 3
11684: ARRAY
11685: PPUSH
11686: LD_VAR 0 2
11690: PUSH
11691: LD_INT 4
11693: ARRAY
11694: PPUSH
11695: CALL_OW 449
11699: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11700: LD_ADDR_VAR 0 3
11704: PUSH
11705: LD_VAR 0 5
11709: PPUSH
11710: LD_INT 1
11712: PPUSH
11713: CALL_OW 275
11717: PUSH
11718: LD_VAR 0 4
11722: PUSH
11723: LD_INT 1
11725: ARRAY
11726: GREATEREQUAL
11727: PUSH
11728: LD_VAR 0 5
11732: PPUSH
11733: LD_INT 2
11735: PPUSH
11736: CALL_OW 275
11740: PUSH
11741: LD_VAR 0 4
11745: PUSH
11746: LD_INT 2
11748: ARRAY
11749: GREATEREQUAL
11750: AND
11751: PUSH
11752: LD_VAR 0 5
11756: PPUSH
11757: LD_INT 3
11759: PPUSH
11760: CALL_OW 275
11764: PUSH
11765: LD_VAR 0 4
11769: PUSH
11770: LD_INT 3
11772: ARRAY
11773: GREATEREQUAL
11774: AND
11775: ST_TO_ADDR
// end ;
11776: LD_VAR 0 3
11780: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
11781: LD_INT 0
11783: PPUSH
11784: PPUSH
11785: PPUSH
11786: PPUSH
// pom := GetBase ( building ) ;
11787: LD_ADDR_VAR 0 3
11791: PUSH
11792: LD_VAR 0 1
11796: PPUSH
11797: CALL_OW 274
11801: ST_TO_ADDR
// if not pom then
11802: LD_VAR 0 3
11806: NOT
11807: IFFALSE 11811
// exit ;
11809: GO 11981
// btype := GetBType ( building ) ;
11811: LD_ADDR_VAR 0 5
11815: PUSH
11816: LD_VAR 0 1
11820: PPUSH
11821: CALL_OW 266
11825: ST_TO_ADDR
// if btype = b_armoury then
11826: LD_VAR 0 5
11830: PUSH
11831: LD_INT 4
11833: EQUAL
11834: IFFALSE 11844
// btype := b_barracks ;
11836: LD_ADDR_VAR 0 5
11840: PUSH
11841: LD_INT 5
11843: ST_TO_ADDR
// if btype = b_depot then
11844: LD_VAR 0 5
11848: PUSH
11849: LD_INT 0
11851: EQUAL
11852: IFFALSE 11862
// btype := b_warehouse ;
11854: LD_ADDR_VAR 0 5
11858: PUSH
11859: LD_INT 1
11861: ST_TO_ADDR
// if btype = b_workshop then
11862: LD_VAR 0 5
11866: PUSH
11867: LD_INT 2
11869: EQUAL
11870: IFFALSE 11880
// btype := b_factory ;
11872: LD_ADDR_VAR 0 5
11876: PUSH
11877: LD_INT 3
11879: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11880: LD_ADDR_VAR 0 4
11884: PUSH
11885: LD_VAR 0 5
11889: PPUSH
11890: LD_VAR 0 1
11894: PPUSH
11895: CALL_OW 248
11899: PPUSH
11900: CALL_OW 450
11904: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11905: LD_ADDR_VAR 0 2
11909: PUSH
11910: LD_VAR 0 3
11914: PPUSH
11915: LD_INT 1
11917: PPUSH
11918: CALL_OW 275
11922: PUSH
11923: LD_VAR 0 4
11927: PUSH
11928: LD_INT 1
11930: ARRAY
11931: GREATEREQUAL
11932: PUSH
11933: LD_VAR 0 3
11937: PPUSH
11938: LD_INT 2
11940: PPUSH
11941: CALL_OW 275
11945: PUSH
11946: LD_VAR 0 4
11950: PUSH
11951: LD_INT 2
11953: ARRAY
11954: GREATEREQUAL
11955: AND
11956: PUSH
11957: LD_VAR 0 3
11961: PPUSH
11962: LD_INT 3
11964: PPUSH
11965: CALL_OW 275
11969: PUSH
11970: LD_VAR 0 4
11974: PUSH
11975: LD_INT 3
11977: ARRAY
11978: GREATEREQUAL
11979: AND
11980: ST_TO_ADDR
// end ;
11981: LD_VAR 0 2
11985: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
11986: LD_INT 0
11988: PPUSH
11989: PPUSH
11990: PPUSH
// pom := GetBase ( building ) ;
11991: LD_ADDR_VAR 0 4
11995: PUSH
11996: LD_VAR 0 1
12000: PPUSH
12001: CALL_OW 274
12005: ST_TO_ADDR
// if not pom then
12006: LD_VAR 0 4
12010: NOT
12011: IFFALSE 12015
// exit ;
12013: GO 12116
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12015: LD_ADDR_VAR 0 5
12019: PUSH
12020: LD_VAR 0 2
12024: PPUSH
12025: LD_VAR 0 1
12029: PPUSH
12030: CALL_OW 248
12034: PPUSH
12035: CALL_OW 450
12039: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12040: LD_ADDR_VAR 0 3
12044: PUSH
12045: LD_VAR 0 4
12049: PPUSH
12050: LD_INT 1
12052: PPUSH
12053: CALL_OW 275
12057: PUSH
12058: LD_VAR 0 5
12062: PUSH
12063: LD_INT 1
12065: ARRAY
12066: GREATEREQUAL
12067: PUSH
12068: LD_VAR 0 4
12072: PPUSH
12073: LD_INT 2
12075: PPUSH
12076: CALL_OW 275
12080: PUSH
12081: LD_VAR 0 5
12085: PUSH
12086: LD_INT 2
12088: ARRAY
12089: GREATEREQUAL
12090: AND
12091: PUSH
12092: LD_VAR 0 4
12096: PPUSH
12097: LD_INT 3
12099: PPUSH
12100: CALL_OW 275
12104: PUSH
12105: LD_VAR 0 5
12109: PUSH
12110: LD_INT 3
12112: ARRAY
12113: GREATEREQUAL
12114: AND
12115: ST_TO_ADDR
// end ;
12116: LD_VAR 0 3
12120: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12121: LD_INT 0
12123: PPUSH
12124: PPUSH
12125: PPUSH
12126: PPUSH
12127: PPUSH
12128: PPUSH
12129: PPUSH
12130: PPUSH
12131: PPUSH
12132: PPUSH
12133: PPUSH
// result := false ;
12134: LD_ADDR_VAR 0 8
12138: PUSH
12139: LD_INT 0
12141: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12142: LD_VAR 0 5
12146: NOT
12147: PUSH
12148: LD_VAR 0 1
12152: NOT
12153: OR
12154: PUSH
12155: LD_VAR 0 2
12159: NOT
12160: OR
12161: PUSH
12162: LD_VAR 0 3
12166: NOT
12167: OR
12168: IFFALSE 12172
// exit ;
12170: GO 12986
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12172: LD_ADDR_VAR 0 14
12176: PUSH
12177: LD_VAR 0 1
12181: PPUSH
12182: LD_VAR 0 2
12186: PPUSH
12187: LD_VAR 0 3
12191: PPUSH
12192: LD_VAR 0 4
12196: PPUSH
12197: LD_VAR 0 5
12201: PUSH
12202: LD_INT 1
12204: ARRAY
12205: PPUSH
12206: CALL_OW 248
12210: PPUSH
12211: LD_INT 0
12213: PPUSH
12214: CALL 13823 0 6
12218: ST_TO_ADDR
// if not hexes then
12219: LD_VAR 0 14
12223: NOT
12224: IFFALSE 12228
// exit ;
12226: GO 12986
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12228: LD_ADDR_VAR 0 17
12232: PUSH
12233: LD_VAR 0 5
12237: PPUSH
12238: LD_INT 22
12240: PUSH
12241: LD_VAR 0 13
12245: PPUSH
12246: CALL_OW 255
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: LD_INT 2
12257: PUSH
12258: LD_INT 30
12260: PUSH
12261: LD_INT 0
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 30
12270: PUSH
12271: LD_INT 1
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: LIST
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PPUSH
12287: CALL_OW 72
12291: ST_TO_ADDR
// for i = 1 to hexes do
12292: LD_ADDR_VAR 0 9
12296: PUSH
12297: DOUBLE
12298: LD_INT 1
12300: DEC
12301: ST_TO_ADDR
12302: LD_VAR 0 14
12306: PUSH
12307: FOR_TO
12308: IFFALSE 12984
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12310: LD_ADDR_VAR 0 13
12314: PUSH
12315: LD_VAR 0 14
12319: PUSH
12320: LD_VAR 0 9
12324: ARRAY
12325: PUSH
12326: LD_INT 1
12328: ARRAY
12329: PPUSH
12330: LD_VAR 0 14
12334: PUSH
12335: LD_VAR 0 9
12339: ARRAY
12340: PUSH
12341: LD_INT 2
12343: ARRAY
12344: PPUSH
12345: CALL_OW 428
12349: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12350: LD_VAR 0 14
12354: PUSH
12355: LD_VAR 0 9
12359: ARRAY
12360: PUSH
12361: LD_INT 1
12363: ARRAY
12364: PPUSH
12365: LD_VAR 0 14
12369: PUSH
12370: LD_VAR 0 9
12374: ARRAY
12375: PUSH
12376: LD_INT 2
12378: ARRAY
12379: PPUSH
12380: CALL_OW 351
12384: PUSH
12385: LD_VAR 0 14
12389: PUSH
12390: LD_VAR 0 9
12394: ARRAY
12395: PUSH
12396: LD_INT 1
12398: ARRAY
12399: PPUSH
12400: LD_VAR 0 14
12404: PUSH
12405: LD_VAR 0 9
12409: ARRAY
12410: PUSH
12411: LD_INT 2
12413: ARRAY
12414: PPUSH
12415: CALL_OW 488
12419: NOT
12420: OR
12421: PUSH
12422: LD_VAR 0 13
12426: PPUSH
12427: CALL_OW 247
12431: PUSH
12432: LD_INT 3
12434: EQUAL
12435: OR
12436: IFFALSE 12442
// exit ;
12438: POP
12439: POP
12440: GO 12986
// if not tmp then
12442: LD_VAR 0 13
12446: NOT
12447: IFFALSE 12451
// continue ;
12449: GO 12307
// result := true ;
12451: LD_ADDR_VAR 0 8
12455: PUSH
12456: LD_INT 1
12458: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12459: LD_VAR 0 6
12463: PUSH
12464: LD_VAR 0 13
12468: PPUSH
12469: CALL_OW 247
12473: PUSH
12474: LD_INT 2
12476: EQUAL
12477: AND
12478: PUSH
12479: LD_VAR 0 13
12483: PPUSH
12484: CALL_OW 263
12488: PUSH
12489: LD_INT 1
12491: EQUAL
12492: AND
12493: IFFALSE 12657
// begin if IsDrivenBy ( tmp ) then
12495: LD_VAR 0 13
12499: PPUSH
12500: CALL_OW 311
12504: IFFALSE 12508
// continue ;
12506: GO 12307
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12508: LD_VAR 0 6
12512: PPUSH
12513: LD_INT 3
12515: PUSH
12516: LD_INT 60
12518: PUSH
12519: EMPTY
12520: LIST
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 3
12528: PUSH
12529: LD_INT 55
12531: PUSH
12532: EMPTY
12533: LIST
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PPUSH
12543: CALL_OW 72
12547: IFFALSE 12655
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12549: LD_ADDR_VAR 0 18
12553: PUSH
12554: LD_VAR 0 6
12558: PPUSH
12559: LD_INT 3
12561: PUSH
12562: LD_INT 60
12564: PUSH
12565: EMPTY
12566: LIST
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 3
12574: PUSH
12575: LD_INT 55
12577: PUSH
12578: EMPTY
12579: LIST
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PPUSH
12589: CALL_OW 72
12593: PUSH
12594: LD_INT 1
12596: ARRAY
12597: ST_TO_ADDR
// if IsInUnit ( driver ) then
12598: LD_VAR 0 18
12602: PPUSH
12603: CALL_OW 310
12607: IFFALSE 12618
// ComExit ( driver ) ;
12609: LD_VAR 0 18
12613: PPUSH
12614: CALL 37007 0 1
// AddComEnterUnit ( driver , tmp ) ;
12618: LD_VAR 0 18
12622: PPUSH
12623: LD_VAR 0 13
12627: PPUSH
12628: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12632: LD_VAR 0 18
12636: PPUSH
12637: LD_VAR 0 7
12641: PPUSH
12642: CALL_OW 173
// AddComExitVehicle ( driver ) ;
12646: LD_VAR 0 18
12650: PPUSH
12651: CALL_OW 181
// end ; continue ;
12655: GO 12307
// end ; if not cleaners or not tmp in cleaners then
12657: LD_VAR 0 6
12661: NOT
12662: PUSH
12663: LD_VAR 0 13
12667: PUSH
12668: LD_VAR 0 6
12672: IN
12673: NOT
12674: OR
12675: IFFALSE 12982
// begin if dep then
12677: LD_VAR 0 17
12681: IFFALSE 12817
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
12683: LD_ADDR_VAR 0 16
12687: PUSH
12688: LD_VAR 0 17
12692: PUSH
12693: LD_INT 1
12695: ARRAY
12696: PPUSH
12697: CALL_OW 250
12701: PPUSH
12702: LD_VAR 0 17
12706: PUSH
12707: LD_INT 1
12709: ARRAY
12710: PPUSH
12711: CALL_OW 254
12715: PPUSH
12716: LD_INT 5
12718: PPUSH
12719: CALL_OW 272
12723: PUSH
12724: LD_VAR 0 17
12728: PUSH
12729: LD_INT 1
12731: ARRAY
12732: PPUSH
12733: CALL_OW 251
12737: PPUSH
12738: LD_VAR 0 17
12742: PUSH
12743: LD_INT 1
12745: ARRAY
12746: PPUSH
12747: CALL_OW 254
12751: PPUSH
12752: LD_INT 5
12754: PPUSH
12755: CALL_OW 273
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
12764: LD_VAR 0 16
12768: PUSH
12769: LD_INT 1
12771: ARRAY
12772: PPUSH
12773: LD_VAR 0 16
12777: PUSH
12778: LD_INT 2
12780: ARRAY
12781: PPUSH
12782: CALL_OW 488
12786: IFFALSE 12817
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
12788: LD_VAR 0 13
12792: PPUSH
12793: LD_VAR 0 16
12797: PUSH
12798: LD_INT 1
12800: ARRAY
12801: PPUSH
12802: LD_VAR 0 16
12806: PUSH
12807: LD_INT 2
12809: ARRAY
12810: PPUSH
12811: CALL_OW 111
// continue ;
12815: GO 12307
// end ; end ; r := GetDir ( tmp ) ;
12817: LD_ADDR_VAR 0 15
12821: PUSH
12822: LD_VAR 0 13
12826: PPUSH
12827: CALL_OW 254
12831: ST_TO_ADDR
// if r = 5 then
12832: LD_VAR 0 15
12836: PUSH
12837: LD_INT 5
12839: EQUAL
12840: IFFALSE 12850
// r := 0 ;
12842: LD_ADDR_VAR 0 15
12846: PUSH
12847: LD_INT 0
12849: ST_TO_ADDR
// for j = r to 5 do
12850: LD_ADDR_VAR 0 10
12854: PUSH
12855: DOUBLE
12856: LD_VAR 0 15
12860: DEC
12861: ST_TO_ADDR
12862: LD_INT 5
12864: PUSH
12865: FOR_TO
12866: IFFALSE 12980
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
12868: LD_ADDR_VAR 0 11
12872: PUSH
12873: LD_VAR 0 13
12877: PPUSH
12878: CALL_OW 250
12882: PPUSH
12883: LD_VAR 0 10
12887: PPUSH
12888: LD_INT 2
12890: PPUSH
12891: CALL_OW 272
12895: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
12896: LD_ADDR_VAR 0 12
12900: PUSH
12901: LD_VAR 0 13
12905: PPUSH
12906: CALL_OW 251
12910: PPUSH
12911: LD_VAR 0 10
12915: PPUSH
12916: LD_INT 2
12918: PPUSH
12919: CALL_OW 273
12923: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
12924: LD_VAR 0 11
12928: PPUSH
12929: LD_VAR 0 12
12933: PPUSH
12934: CALL_OW 488
12938: PUSH
12939: LD_VAR 0 11
12943: PPUSH
12944: LD_VAR 0 12
12948: PPUSH
12949: CALL_OW 428
12953: NOT
12954: AND
12955: IFFALSE 12978
// begin ComMoveXY ( tmp , _x , _y ) ;
12957: LD_VAR 0 13
12961: PPUSH
12962: LD_VAR 0 11
12966: PPUSH
12967: LD_VAR 0 12
12971: PPUSH
12972: CALL_OW 111
// break ;
12976: GO 12980
// end ; end ;
12978: GO 12865
12980: POP
12981: POP
// end ; end ;
12982: GO 12307
12984: POP
12985: POP
// end ;
12986: LD_VAR 0 8
12990: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
12991: LD_INT 0
12993: PPUSH
12994: PPUSH
12995: PPUSH
12996: PPUSH
12997: PPUSH
12998: PPUSH
12999: PPUSH
13000: PPUSH
13001: PPUSH
13002: PPUSH
// result := false ;
13003: LD_ADDR_VAR 0 6
13007: PUSH
13008: LD_INT 0
13010: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13011: LD_VAR 0 1
13015: NOT
13016: PUSH
13017: LD_VAR 0 1
13021: PPUSH
13022: CALL_OW 266
13026: PUSH
13027: LD_INT 0
13029: PUSH
13030: LD_INT 1
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: IN
13037: NOT
13038: OR
13039: PUSH
13040: LD_VAR 0 2
13044: NOT
13045: OR
13046: PUSH
13047: LD_VAR 0 5
13051: PUSH
13052: LD_INT 0
13054: PUSH
13055: LD_INT 1
13057: PUSH
13058: LD_INT 2
13060: PUSH
13061: LD_INT 3
13063: PUSH
13064: LD_INT 4
13066: PUSH
13067: LD_INT 5
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: IN
13078: NOT
13079: OR
13080: PUSH
13081: LD_VAR 0 3
13085: PPUSH
13086: LD_VAR 0 4
13090: PPUSH
13091: CALL_OW 488
13095: NOT
13096: OR
13097: IFFALSE 13101
// exit ;
13099: GO 13818
// pom := GetBase ( depot ) ;
13101: LD_ADDR_VAR 0 10
13105: PUSH
13106: LD_VAR 0 1
13110: PPUSH
13111: CALL_OW 274
13115: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13116: LD_ADDR_VAR 0 11
13120: PUSH
13121: LD_VAR 0 2
13125: PPUSH
13126: LD_VAR 0 1
13130: PPUSH
13131: CALL_OW 248
13135: PPUSH
13136: CALL_OW 450
13140: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13141: LD_VAR 0 10
13145: PPUSH
13146: LD_INT 1
13148: PPUSH
13149: CALL_OW 275
13153: PUSH
13154: LD_VAR 0 11
13158: PUSH
13159: LD_INT 1
13161: ARRAY
13162: GREATEREQUAL
13163: PUSH
13164: LD_VAR 0 10
13168: PPUSH
13169: LD_INT 2
13171: PPUSH
13172: CALL_OW 275
13176: PUSH
13177: LD_VAR 0 11
13181: PUSH
13182: LD_INT 2
13184: ARRAY
13185: GREATEREQUAL
13186: AND
13187: PUSH
13188: LD_VAR 0 10
13192: PPUSH
13193: LD_INT 3
13195: PPUSH
13196: CALL_OW 275
13200: PUSH
13201: LD_VAR 0 11
13205: PUSH
13206: LD_INT 3
13208: ARRAY
13209: GREATEREQUAL
13210: AND
13211: NOT
13212: IFFALSE 13216
// exit ;
13214: GO 13818
// if GetBType ( depot ) = b_depot then
13216: LD_VAR 0 1
13220: PPUSH
13221: CALL_OW 266
13225: PUSH
13226: LD_INT 0
13228: EQUAL
13229: IFFALSE 13241
// dist := 28 else
13231: LD_ADDR_VAR 0 14
13235: PUSH
13236: LD_INT 28
13238: ST_TO_ADDR
13239: GO 13249
// dist := 36 ;
13241: LD_ADDR_VAR 0 14
13245: PUSH
13246: LD_INT 36
13248: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
13249: LD_VAR 0 1
13253: PPUSH
13254: LD_VAR 0 3
13258: PPUSH
13259: LD_VAR 0 4
13263: PPUSH
13264: CALL_OW 297
13268: PUSH
13269: LD_VAR 0 14
13273: GREATER
13274: IFFALSE 13278
// exit ;
13276: GO 13818
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
13278: LD_ADDR_VAR 0 12
13282: PUSH
13283: LD_VAR 0 2
13287: PPUSH
13288: LD_VAR 0 3
13292: PPUSH
13293: LD_VAR 0 4
13297: PPUSH
13298: LD_VAR 0 5
13302: PPUSH
13303: LD_VAR 0 1
13307: PPUSH
13308: CALL_OW 248
13312: PPUSH
13313: LD_INT 0
13315: PPUSH
13316: CALL 13823 0 6
13320: ST_TO_ADDR
// if not hexes then
13321: LD_VAR 0 12
13325: NOT
13326: IFFALSE 13330
// exit ;
13328: GO 13818
// hex := GetHexInfo ( x , y ) ;
13330: LD_ADDR_VAR 0 15
13334: PUSH
13335: LD_VAR 0 3
13339: PPUSH
13340: LD_VAR 0 4
13344: PPUSH
13345: CALL_OW 546
13349: ST_TO_ADDR
// if hex [ 1 ] then
13350: LD_VAR 0 15
13354: PUSH
13355: LD_INT 1
13357: ARRAY
13358: IFFALSE 13362
// exit ;
13360: GO 13818
// height := hex [ 2 ] ;
13362: LD_ADDR_VAR 0 13
13366: PUSH
13367: LD_VAR 0 15
13371: PUSH
13372: LD_INT 2
13374: ARRAY
13375: ST_TO_ADDR
// for i = 1 to hexes do
13376: LD_ADDR_VAR 0 7
13380: PUSH
13381: DOUBLE
13382: LD_INT 1
13384: DEC
13385: ST_TO_ADDR
13386: LD_VAR 0 12
13390: PUSH
13391: FOR_TO
13392: IFFALSE 13722
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
13394: LD_VAR 0 12
13398: PUSH
13399: LD_VAR 0 7
13403: ARRAY
13404: PUSH
13405: LD_INT 1
13407: ARRAY
13408: PPUSH
13409: LD_VAR 0 12
13413: PUSH
13414: LD_VAR 0 7
13418: ARRAY
13419: PUSH
13420: LD_INT 2
13422: ARRAY
13423: PPUSH
13424: CALL_OW 488
13428: NOT
13429: PUSH
13430: LD_VAR 0 12
13434: PUSH
13435: LD_VAR 0 7
13439: ARRAY
13440: PUSH
13441: LD_INT 1
13443: ARRAY
13444: PPUSH
13445: LD_VAR 0 12
13449: PUSH
13450: LD_VAR 0 7
13454: ARRAY
13455: PUSH
13456: LD_INT 2
13458: ARRAY
13459: PPUSH
13460: CALL_OW 428
13464: PUSH
13465: LD_INT 0
13467: GREATER
13468: OR
13469: PUSH
13470: LD_VAR 0 12
13474: PUSH
13475: LD_VAR 0 7
13479: ARRAY
13480: PUSH
13481: LD_INT 1
13483: ARRAY
13484: PPUSH
13485: LD_VAR 0 12
13489: PUSH
13490: LD_VAR 0 7
13494: ARRAY
13495: PUSH
13496: LD_INT 2
13498: ARRAY
13499: PPUSH
13500: CALL_OW 351
13504: OR
13505: IFFALSE 13511
// exit ;
13507: POP
13508: POP
13509: GO 13818
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13511: LD_ADDR_VAR 0 8
13515: PUSH
13516: LD_VAR 0 12
13520: PUSH
13521: LD_VAR 0 7
13525: ARRAY
13526: PUSH
13527: LD_INT 1
13529: ARRAY
13530: PPUSH
13531: LD_VAR 0 12
13535: PUSH
13536: LD_VAR 0 7
13540: ARRAY
13541: PUSH
13542: LD_INT 2
13544: ARRAY
13545: PPUSH
13546: CALL_OW 546
13550: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
13551: LD_VAR 0 8
13555: PUSH
13556: LD_INT 1
13558: ARRAY
13559: PUSH
13560: LD_VAR 0 8
13564: PUSH
13565: LD_INT 2
13567: ARRAY
13568: PUSH
13569: LD_VAR 0 13
13573: PUSH
13574: LD_INT 2
13576: PLUS
13577: GREATER
13578: OR
13579: PUSH
13580: LD_VAR 0 8
13584: PUSH
13585: LD_INT 2
13587: ARRAY
13588: PUSH
13589: LD_VAR 0 13
13593: PUSH
13594: LD_INT 2
13596: MINUS
13597: LESS
13598: OR
13599: PUSH
13600: LD_VAR 0 8
13604: PUSH
13605: LD_INT 3
13607: ARRAY
13608: PUSH
13609: LD_INT 0
13611: PUSH
13612: LD_INT 8
13614: PUSH
13615: LD_INT 9
13617: PUSH
13618: LD_INT 10
13620: PUSH
13621: LD_INT 11
13623: PUSH
13624: LD_INT 12
13626: PUSH
13627: LD_INT 13
13629: PUSH
13630: LD_INT 16
13632: PUSH
13633: LD_INT 17
13635: PUSH
13636: LD_INT 18
13638: PUSH
13639: LD_INT 19
13641: PUSH
13642: LD_INT 20
13644: PUSH
13645: LD_INT 21
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: IN
13663: NOT
13664: OR
13665: PUSH
13666: LD_VAR 0 8
13670: PUSH
13671: LD_INT 5
13673: ARRAY
13674: NOT
13675: OR
13676: PUSH
13677: LD_VAR 0 8
13681: PUSH
13682: LD_INT 6
13684: ARRAY
13685: PUSH
13686: LD_INT 1
13688: PUSH
13689: LD_INT 2
13691: PUSH
13692: LD_INT 7
13694: PUSH
13695: LD_INT 9
13697: PUSH
13698: LD_INT 10
13700: PUSH
13701: LD_INT 11
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: IN
13712: NOT
13713: OR
13714: IFFALSE 13720
// exit ;
13716: POP
13717: POP
13718: GO 13818
// end ;
13720: GO 13391
13722: POP
13723: POP
// side := GetSide ( depot ) ;
13724: LD_ADDR_VAR 0 9
13728: PUSH
13729: LD_VAR 0 1
13733: PPUSH
13734: CALL_OW 255
13738: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
13739: LD_VAR 0 9
13743: PPUSH
13744: LD_VAR 0 3
13748: PPUSH
13749: LD_VAR 0 4
13753: PPUSH
13754: LD_INT 20
13756: PPUSH
13757: CALL 6169 0 4
13761: PUSH
13762: LD_INT 4
13764: ARRAY
13765: IFFALSE 13769
// exit ;
13767: GO 13818
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
13769: LD_VAR 0 2
13773: PUSH
13774: LD_INT 29
13776: PUSH
13777: LD_INT 30
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: IN
13784: PUSH
13785: LD_VAR 0 3
13789: PPUSH
13790: LD_VAR 0 4
13794: PPUSH
13795: LD_VAR 0 9
13799: PPUSH
13800: CALL_OW 440
13804: NOT
13805: AND
13806: IFFALSE 13810
// exit ;
13808: GO 13818
// result := true ;
13810: LD_ADDR_VAR 0 6
13814: PUSH
13815: LD_INT 1
13817: ST_TO_ADDR
// end ;
13818: LD_VAR 0 6
13822: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
13823: LD_INT 0
13825: PPUSH
13826: PPUSH
13827: PPUSH
13828: PPUSH
13829: PPUSH
13830: PPUSH
13831: PPUSH
13832: PPUSH
13833: PPUSH
13834: PPUSH
13835: PPUSH
13836: PPUSH
13837: PPUSH
13838: PPUSH
13839: PPUSH
13840: PPUSH
13841: PPUSH
13842: PPUSH
13843: PPUSH
13844: PPUSH
13845: PPUSH
13846: PPUSH
13847: PPUSH
13848: PPUSH
13849: PPUSH
13850: PPUSH
13851: PPUSH
13852: PPUSH
13853: PPUSH
13854: PPUSH
13855: PPUSH
13856: PPUSH
13857: PPUSH
13858: PPUSH
13859: PPUSH
13860: PPUSH
13861: PPUSH
13862: PPUSH
13863: PPUSH
13864: PPUSH
13865: PPUSH
13866: PPUSH
13867: PPUSH
13868: PPUSH
13869: PPUSH
13870: PPUSH
13871: PPUSH
13872: PPUSH
13873: PPUSH
13874: PPUSH
13875: PPUSH
13876: PPUSH
13877: PPUSH
13878: PPUSH
13879: PPUSH
13880: PPUSH
13881: PPUSH
13882: PPUSH
// result = [ ] ;
13883: LD_ADDR_VAR 0 7
13887: PUSH
13888: EMPTY
13889: ST_TO_ADDR
// temp_list = [ ] ;
13890: LD_ADDR_VAR 0 9
13894: PUSH
13895: EMPTY
13896: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
13897: LD_VAR 0 4
13901: PUSH
13902: LD_INT 0
13904: PUSH
13905: LD_INT 1
13907: PUSH
13908: LD_INT 2
13910: PUSH
13911: LD_INT 3
13913: PUSH
13914: LD_INT 4
13916: PUSH
13917: LD_INT 5
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: IN
13928: NOT
13929: PUSH
13930: LD_VAR 0 1
13934: PUSH
13935: LD_INT 0
13937: PUSH
13938: LD_INT 1
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: IN
13945: PUSH
13946: LD_VAR 0 5
13950: PUSH
13951: LD_INT 1
13953: PUSH
13954: LD_INT 2
13956: PUSH
13957: LD_INT 3
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: LIST
13964: IN
13965: NOT
13966: AND
13967: OR
13968: IFFALSE 13972
// exit ;
13970: GO 32363
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
13972: LD_VAR 0 1
13976: PUSH
13977: LD_INT 6
13979: PUSH
13980: LD_INT 7
13982: PUSH
13983: LD_INT 8
13985: PUSH
13986: LD_INT 13
13988: PUSH
13989: LD_INT 12
13991: PUSH
13992: LD_INT 15
13994: PUSH
13995: LD_INT 11
13997: PUSH
13998: LD_INT 14
14000: PUSH
14001: LD_INT 10
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: IN
14015: IFFALSE 14025
// btype = b_lab ;
14017: LD_ADDR_VAR 0 1
14021: PUSH
14022: LD_INT 6
14024: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14025: LD_VAR 0 6
14029: PUSH
14030: LD_INT 0
14032: PUSH
14033: LD_INT 1
14035: PUSH
14036: LD_INT 2
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: LIST
14043: IN
14044: NOT
14045: PUSH
14046: LD_VAR 0 1
14050: PUSH
14051: LD_INT 0
14053: PUSH
14054: LD_INT 1
14056: PUSH
14057: LD_INT 2
14059: PUSH
14060: LD_INT 3
14062: PUSH
14063: LD_INT 6
14065: PUSH
14066: LD_INT 36
14068: PUSH
14069: LD_INT 4
14071: PUSH
14072: LD_INT 5
14074: PUSH
14075: LD_INT 31
14077: PUSH
14078: LD_INT 32
14080: PUSH
14081: LD_INT 33
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: IN
14097: NOT
14098: PUSH
14099: LD_VAR 0 6
14103: PUSH
14104: LD_INT 1
14106: EQUAL
14107: AND
14108: OR
14109: PUSH
14110: LD_VAR 0 1
14114: PUSH
14115: LD_INT 2
14117: PUSH
14118: LD_INT 3
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: IN
14125: NOT
14126: PUSH
14127: LD_VAR 0 6
14131: PUSH
14132: LD_INT 2
14134: EQUAL
14135: AND
14136: OR
14137: IFFALSE 14147
// mode = 0 ;
14139: LD_ADDR_VAR 0 6
14143: PUSH
14144: LD_INT 0
14146: ST_TO_ADDR
// case mode of 0 :
14147: LD_VAR 0 6
14151: PUSH
14152: LD_INT 0
14154: DOUBLE
14155: EQUAL
14156: IFTRUE 14160
14158: GO 25613
14160: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14161: LD_ADDR_VAR 0 11
14165: PUSH
14166: LD_INT 0
14168: PUSH
14169: LD_INT 0
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: LD_INT 0
14178: PUSH
14179: LD_INT 1
14181: NEG
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 1
14189: PUSH
14190: LD_INT 0
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 1
14199: PUSH
14200: LD_INT 1
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 0
14209: PUSH
14210: LD_INT 1
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 1
14219: NEG
14220: PUSH
14221: LD_INT 0
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PUSH
14228: LD_INT 1
14230: NEG
14231: PUSH
14232: LD_INT 1
14234: NEG
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PUSH
14240: LD_INT 1
14242: NEG
14243: PUSH
14244: LD_INT 2
14246: NEG
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: LD_INT 0
14254: PUSH
14255: LD_INT 2
14257: NEG
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: LD_INT 1
14265: PUSH
14266: LD_INT 1
14268: NEG
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: LD_INT 1
14276: PUSH
14277: LD_INT 2
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PUSH
14284: LD_INT 0
14286: PUSH
14287: LD_INT 2
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PUSH
14294: LD_INT 1
14296: NEG
14297: PUSH
14298: LD_INT 1
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: LD_INT 1
14307: PUSH
14308: LD_INT 3
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PUSH
14315: LD_INT 0
14317: PUSH
14318: LD_INT 3
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 1
14327: NEG
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
14354: LD_ADDR_VAR 0 12
14358: PUSH
14359: LD_INT 0
14361: PUSH
14362: LD_INT 0
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PUSH
14369: LD_INT 0
14371: PUSH
14372: LD_INT 1
14374: NEG
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 1
14382: PUSH
14383: LD_INT 0
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 1
14392: PUSH
14393: LD_INT 1
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 0
14402: PUSH
14403: LD_INT 1
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: LD_INT 1
14412: NEG
14413: PUSH
14414: LD_INT 0
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: LD_INT 1
14423: NEG
14424: PUSH
14425: LD_INT 1
14427: NEG
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 1
14435: PUSH
14436: LD_INT 1
14438: NEG
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: LD_INT 2
14446: PUSH
14447: LD_INT 0
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: LD_INT 1
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 1
14466: NEG
14467: PUSH
14468: LD_INT 1
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: LD_INT 2
14477: NEG
14478: PUSH
14479: LD_INT 0
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: PUSH
14486: LD_INT 2
14488: NEG
14489: PUSH
14490: LD_INT 1
14492: NEG
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: LD_INT 2
14500: NEG
14501: PUSH
14502: LD_INT 1
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: LD_INT 3
14511: NEG
14512: PUSH
14513: LD_INT 0
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 3
14522: NEG
14523: PUSH
14524: LD_INT 1
14526: NEG
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
14550: LD_ADDR_VAR 0 13
14554: PUSH
14555: LD_INT 0
14557: PUSH
14558: LD_INT 0
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: LD_INT 0
14567: PUSH
14568: LD_INT 1
14570: NEG
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: LD_INT 1
14578: PUSH
14579: LD_INT 0
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: PUSH
14586: LD_INT 1
14588: PUSH
14589: LD_INT 1
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: LD_INT 0
14598: PUSH
14599: LD_INT 1
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 1
14608: NEG
14609: PUSH
14610: LD_INT 0
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: PUSH
14617: LD_INT 1
14619: NEG
14620: PUSH
14621: LD_INT 1
14623: NEG
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: LD_INT 1
14631: NEG
14632: PUSH
14633: LD_INT 2
14635: NEG
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 2
14643: PUSH
14644: LD_INT 1
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: LD_INT 2
14653: PUSH
14654: LD_INT 2
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: LD_INT 1
14663: PUSH
14664: LD_INT 2
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PUSH
14671: LD_INT 2
14673: NEG
14674: PUSH
14675: LD_INT 1
14677: NEG
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PUSH
14683: LD_INT 2
14685: NEG
14686: PUSH
14687: LD_INT 2
14689: NEG
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PUSH
14695: LD_INT 2
14697: NEG
14698: PUSH
14699: LD_INT 3
14701: NEG
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: LD_INT 3
14709: NEG
14710: PUSH
14711: LD_INT 2
14713: NEG
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PUSH
14719: LD_INT 3
14721: NEG
14722: PUSH
14723: LD_INT 3
14725: NEG
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
14749: LD_ADDR_VAR 0 14
14753: PUSH
14754: LD_INT 0
14756: PUSH
14757: LD_INT 0
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: LD_INT 0
14766: PUSH
14767: LD_INT 1
14769: NEG
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: LD_INT 1
14777: PUSH
14778: LD_INT 0
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 1
14787: PUSH
14788: LD_INT 1
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 0
14797: PUSH
14798: LD_INT 1
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: LD_INT 1
14807: NEG
14808: PUSH
14809: LD_INT 0
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 1
14818: NEG
14819: PUSH
14820: LD_INT 1
14822: NEG
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: PUSH
14828: LD_INT 1
14830: NEG
14831: PUSH
14832: LD_INT 2
14834: NEG
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: LD_INT 0
14842: PUSH
14843: LD_INT 2
14845: NEG
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: LD_INT 1
14853: PUSH
14854: LD_INT 1
14856: NEG
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PUSH
14862: LD_INT 1
14864: PUSH
14865: LD_INT 2
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 0
14874: PUSH
14875: LD_INT 2
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 1
14884: NEG
14885: PUSH
14886: LD_INT 1
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: LD_INT 1
14895: NEG
14896: PUSH
14897: LD_INT 3
14899: NEG
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PUSH
14905: LD_INT 0
14907: PUSH
14908: LD_INT 3
14910: NEG
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: PUSH
14916: LD_INT 1
14918: PUSH
14919: LD_INT 2
14921: NEG
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
14945: LD_ADDR_VAR 0 15
14949: PUSH
14950: LD_INT 0
14952: PUSH
14953: LD_INT 0
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PUSH
14960: LD_INT 0
14962: PUSH
14963: LD_INT 1
14965: NEG
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PUSH
14971: LD_INT 1
14973: PUSH
14974: LD_INT 0
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: LD_INT 1
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: LD_INT 0
14993: PUSH
14994: LD_INT 1
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 1
15003: NEG
15004: PUSH
15005: LD_INT 0
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 1
15014: NEG
15015: PUSH
15016: LD_INT 1
15018: NEG
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 1
15026: PUSH
15027: LD_INT 1
15029: NEG
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: LD_INT 2
15037: PUSH
15038: LD_INT 0
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PUSH
15045: LD_INT 2
15047: PUSH
15048: LD_INT 1
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 1
15057: NEG
15058: PUSH
15059: LD_INT 1
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: LD_INT 2
15068: NEG
15069: PUSH
15070: LD_INT 0
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: LD_INT 2
15079: NEG
15080: PUSH
15081: LD_INT 1
15083: NEG
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: LD_INT 2
15091: PUSH
15092: LD_INT 1
15094: NEG
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 3
15102: PUSH
15103: LD_INT 0
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 3
15112: PUSH
15113: LD_INT 1
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15138: LD_ADDR_VAR 0 16
15142: PUSH
15143: LD_INT 0
15145: PUSH
15146: LD_INT 0
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 0
15155: PUSH
15156: LD_INT 1
15158: NEG
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 1
15166: PUSH
15167: LD_INT 0
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 1
15176: PUSH
15177: LD_INT 1
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: LD_INT 0
15186: PUSH
15187: LD_INT 1
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 1
15196: NEG
15197: PUSH
15198: LD_INT 0
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: LD_INT 1
15207: NEG
15208: PUSH
15209: LD_INT 1
15211: NEG
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PUSH
15217: LD_INT 1
15219: NEG
15220: PUSH
15221: LD_INT 2
15223: NEG
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 2
15231: PUSH
15232: LD_INT 1
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PUSH
15239: LD_INT 2
15241: PUSH
15242: LD_INT 2
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: LD_INT 1
15251: PUSH
15252: LD_INT 2
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: LD_INT 2
15261: NEG
15262: PUSH
15263: LD_INT 1
15265: NEG
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PUSH
15271: LD_INT 2
15273: NEG
15274: PUSH
15275: LD_INT 2
15277: NEG
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: LD_INT 3
15285: PUSH
15286: LD_INT 2
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: LD_INT 3
15295: PUSH
15296: LD_INT 3
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 2
15305: PUSH
15306: LD_INT 3
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15331: LD_ADDR_VAR 0 17
15335: PUSH
15336: LD_INT 0
15338: PUSH
15339: LD_INT 0
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 0
15348: PUSH
15349: LD_INT 1
15351: NEG
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 1
15359: PUSH
15360: LD_INT 0
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 1
15369: PUSH
15370: LD_INT 1
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: LD_INT 0
15379: PUSH
15380: LD_INT 1
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: LD_INT 1
15389: NEG
15390: PUSH
15391: LD_INT 0
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 1
15400: NEG
15401: PUSH
15402: LD_INT 1
15404: NEG
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: LD_INT 1
15412: NEG
15413: PUSH
15414: LD_INT 2
15416: NEG
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: LD_INT 0
15424: PUSH
15425: LD_INT 2
15427: NEG
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 1
15435: PUSH
15436: LD_INT 1
15438: NEG
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 2
15446: PUSH
15447: LD_INT 0
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 2
15456: PUSH
15457: LD_INT 1
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 2
15466: PUSH
15467: LD_INT 2
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 1
15476: PUSH
15477: LD_INT 2
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: LD_INT 0
15486: PUSH
15487: LD_INT 2
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: LD_INT 1
15496: NEG
15497: PUSH
15498: LD_INT 1
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: LD_INT 2
15507: NEG
15508: PUSH
15509: LD_INT 0
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 2
15518: NEG
15519: PUSH
15520: LD_INT 1
15522: NEG
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 2
15530: NEG
15531: PUSH
15532: LD_INT 2
15534: NEG
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15561: LD_ADDR_VAR 0 18
15565: PUSH
15566: LD_INT 0
15568: PUSH
15569: LD_INT 0
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 0
15578: PUSH
15579: LD_INT 1
15581: NEG
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 1
15589: PUSH
15590: LD_INT 0
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 1
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 0
15609: PUSH
15610: LD_INT 1
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: LD_INT 1
15619: NEG
15620: PUSH
15621: LD_INT 0
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: LD_INT 1
15630: NEG
15631: PUSH
15632: LD_INT 1
15634: NEG
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 1
15642: NEG
15643: PUSH
15644: LD_INT 2
15646: NEG
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: LD_INT 0
15654: PUSH
15655: LD_INT 2
15657: NEG
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: LD_INT 1
15665: PUSH
15666: LD_INT 1
15668: NEG
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 2
15676: PUSH
15677: LD_INT 0
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 2
15686: PUSH
15687: LD_INT 1
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 2
15696: PUSH
15697: LD_INT 2
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 1
15706: PUSH
15707: LD_INT 2
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 0
15716: PUSH
15717: LD_INT 2
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 1
15726: NEG
15727: PUSH
15728: LD_INT 1
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 2
15737: NEG
15738: PUSH
15739: LD_INT 0
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 2
15748: NEG
15749: PUSH
15750: LD_INT 1
15752: NEG
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: LD_INT 2
15760: NEG
15761: PUSH
15762: LD_INT 2
15764: NEG
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15791: LD_ADDR_VAR 0 19
15795: PUSH
15796: LD_INT 0
15798: PUSH
15799: LD_INT 0
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 0
15808: PUSH
15809: LD_INT 1
15811: NEG
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: LD_INT 1
15819: PUSH
15820: LD_INT 0
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 1
15829: PUSH
15830: LD_INT 1
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: LD_INT 0
15839: PUSH
15840: LD_INT 1
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 1
15849: NEG
15850: PUSH
15851: LD_INT 0
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: PUSH
15858: LD_INT 1
15860: NEG
15861: PUSH
15862: LD_INT 1
15864: NEG
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 1
15872: NEG
15873: PUSH
15874: LD_INT 2
15876: NEG
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PUSH
15882: LD_INT 0
15884: PUSH
15885: LD_INT 2
15887: NEG
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 1
15895: PUSH
15896: LD_INT 1
15898: NEG
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 2
15906: PUSH
15907: LD_INT 0
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 2
15916: PUSH
15917: LD_INT 1
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 2
15926: PUSH
15927: LD_INT 2
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 1
15936: PUSH
15937: LD_INT 2
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 0
15946: PUSH
15947: LD_INT 2
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 1
15956: NEG
15957: PUSH
15958: LD_INT 1
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 2
15967: NEG
15968: PUSH
15969: LD_INT 0
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: LD_INT 2
15978: NEG
15979: PUSH
15980: LD_INT 1
15982: NEG
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: LD_INT 2
15990: NEG
15991: PUSH
15992: LD_INT 2
15994: NEG
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16021: LD_ADDR_VAR 0 20
16025: PUSH
16026: LD_INT 0
16028: PUSH
16029: LD_INT 0
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 0
16038: PUSH
16039: LD_INT 1
16041: NEG
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 1
16049: PUSH
16050: LD_INT 0
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: LD_INT 1
16059: PUSH
16060: LD_INT 1
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 0
16069: PUSH
16070: LD_INT 1
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 1
16079: NEG
16080: PUSH
16081: LD_INT 0
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: LD_INT 1
16090: NEG
16091: PUSH
16092: LD_INT 1
16094: NEG
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 1
16102: NEG
16103: PUSH
16104: LD_INT 2
16106: NEG
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 0
16114: PUSH
16115: LD_INT 2
16117: NEG
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: PUSH
16123: LD_INT 1
16125: PUSH
16126: LD_INT 1
16128: NEG
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 2
16136: PUSH
16137: LD_INT 0
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 2
16146: PUSH
16147: LD_INT 1
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 2
16156: PUSH
16157: LD_INT 2
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 1
16166: PUSH
16167: LD_INT 2
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: LD_INT 0
16176: PUSH
16177: LD_INT 2
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 1
16186: NEG
16187: PUSH
16188: LD_INT 1
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 2
16197: NEG
16198: PUSH
16199: LD_INT 0
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 2
16208: NEG
16209: PUSH
16210: LD_INT 1
16212: NEG
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 2
16220: NEG
16221: PUSH
16222: LD_INT 2
16224: NEG
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16251: LD_ADDR_VAR 0 21
16255: PUSH
16256: LD_INT 0
16258: PUSH
16259: LD_INT 0
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 0
16268: PUSH
16269: LD_INT 1
16271: NEG
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 1
16279: PUSH
16280: LD_INT 0
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: LD_INT 1
16289: PUSH
16290: LD_INT 1
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: LD_INT 0
16299: PUSH
16300: LD_INT 1
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 1
16309: NEG
16310: PUSH
16311: LD_INT 0
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PUSH
16318: LD_INT 1
16320: NEG
16321: PUSH
16322: LD_INT 1
16324: NEG
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 1
16332: NEG
16333: PUSH
16334: LD_INT 2
16336: NEG
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: LD_INT 0
16344: PUSH
16345: LD_INT 2
16347: NEG
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: LD_INT 1
16355: PUSH
16356: LD_INT 1
16358: NEG
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: PUSH
16364: LD_INT 2
16366: PUSH
16367: LD_INT 0
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: LD_INT 2
16376: PUSH
16377: LD_INT 1
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 2
16386: PUSH
16387: LD_INT 2
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 1
16396: PUSH
16397: LD_INT 2
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 0
16406: PUSH
16407: LD_INT 2
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: PUSH
16414: LD_INT 1
16416: NEG
16417: PUSH
16418: LD_INT 1
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 2
16427: NEG
16428: PUSH
16429: LD_INT 0
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 2
16438: NEG
16439: PUSH
16440: LD_INT 1
16442: NEG
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 2
16450: NEG
16451: PUSH
16452: LD_INT 2
16454: NEG
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16481: LD_ADDR_VAR 0 22
16485: PUSH
16486: LD_INT 0
16488: PUSH
16489: LD_INT 0
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 0
16498: PUSH
16499: LD_INT 1
16501: NEG
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 1
16509: PUSH
16510: LD_INT 0
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 1
16519: PUSH
16520: LD_INT 1
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 0
16529: PUSH
16530: LD_INT 1
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 1
16539: NEG
16540: PUSH
16541: LD_INT 0
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: LD_INT 1
16550: NEG
16551: PUSH
16552: LD_INT 1
16554: NEG
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 1
16562: NEG
16563: PUSH
16564: LD_INT 2
16566: NEG
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: PUSH
16572: LD_INT 0
16574: PUSH
16575: LD_INT 2
16577: NEG
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 1
16585: PUSH
16586: LD_INT 1
16588: NEG
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: LD_INT 2
16596: PUSH
16597: LD_INT 0
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 2
16606: PUSH
16607: LD_INT 1
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 2
16616: PUSH
16617: LD_INT 2
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 1
16626: PUSH
16627: LD_INT 2
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 0
16636: PUSH
16637: LD_INT 2
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PUSH
16644: LD_INT 1
16646: NEG
16647: PUSH
16648: LD_INT 1
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 2
16657: NEG
16658: PUSH
16659: LD_INT 0
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 2
16668: NEG
16669: PUSH
16670: LD_INT 1
16672: NEG
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: LD_INT 2
16680: NEG
16681: PUSH
16682: LD_INT 2
16684: NEG
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
16711: LD_ADDR_VAR 0 23
16715: PUSH
16716: LD_INT 0
16718: PUSH
16719: LD_INT 0
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 0
16728: PUSH
16729: LD_INT 1
16731: NEG
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 1
16739: PUSH
16740: LD_INT 0
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 1
16749: PUSH
16750: LD_INT 1
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 0
16759: PUSH
16760: LD_INT 1
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 1
16769: NEG
16770: PUSH
16771: LD_INT 0
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 1
16780: NEG
16781: PUSH
16782: LD_INT 1
16784: NEG
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 1
16792: NEG
16793: PUSH
16794: LD_INT 2
16796: NEG
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 0
16804: PUSH
16805: LD_INT 2
16807: NEG
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 1
16815: PUSH
16816: LD_INT 1
16818: NEG
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: LD_INT 2
16826: PUSH
16827: LD_INT 0
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: LD_INT 2
16836: PUSH
16837: LD_INT 1
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: LD_INT 2
16846: PUSH
16847: LD_INT 2
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 1
16856: PUSH
16857: LD_INT 2
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 0
16866: PUSH
16867: LD_INT 2
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 1
16876: NEG
16877: PUSH
16878: LD_INT 1
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: PUSH
16885: LD_INT 2
16887: NEG
16888: PUSH
16889: LD_INT 0
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 2
16898: NEG
16899: PUSH
16900: LD_INT 1
16902: NEG
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 2
16910: NEG
16911: PUSH
16912: LD_INT 2
16914: NEG
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 2
16922: NEG
16923: PUSH
16924: LD_INT 3
16926: NEG
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 1
16934: NEG
16935: PUSH
16936: LD_INT 3
16938: NEG
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 1
16946: PUSH
16947: LD_INT 2
16949: NEG
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 2
16957: PUSH
16958: LD_INT 1
16960: NEG
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
16991: LD_ADDR_VAR 0 24
16995: PUSH
16996: LD_INT 0
16998: PUSH
16999: LD_INT 0
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 0
17008: PUSH
17009: LD_INT 1
17011: NEG
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 1
17019: PUSH
17020: LD_INT 0
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 1
17029: PUSH
17030: LD_INT 1
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 0
17039: PUSH
17040: LD_INT 1
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 1
17049: NEG
17050: PUSH
17051: LD_INT 0
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 1
17060: NEG
17061: PUSH
17062: LD_INT 1
17064: NEG
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: LD_INT 1
17072: NEG
17073: PUSH
17074: LD_INT 2
17076: NEG
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: LD_INT 0
17084: PUSH
17085: LD_INT 2
17087: NEG
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: LD_INT 1
17095: PUSH
17096: LD_INT 1
17098: NEG
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 2
17106: PUSH
17107: LD_INT 0
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 2
17116: PUSH
17117: LD_INT 1
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 2
17126: PUSH
17127: LD_INT 2
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 1
17136: PUSH
17137: LD_INT 2
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 0
17146: PUSH
17147: LD_INT 2
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 1
17156: NEG
17157: PUSH
17158: LD_INT 1
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 2
17167: NEG
17168: PUSH
17169: LD_INT 0
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: PUSH
17176: LD_INT 2
17178: NEG
17179: PUSH
17180: LD_INT 1
17182: NEG
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 2
17190: NEG
17191: PUSH
17192: LD_INT 2
17194: NEG
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: LD_INT 2
17205: NEG
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 2
17213: PUSH
17214: LD_INT 1
17216: NEG
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 3
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 3
17234: PUSH
17235: LD_INT 2
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
17267: LD_ADDR_VAR 0 25
17271: PUSH
17272: LD_INT 0
17274: PUSH
17275: LD_INT 0
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: LD_INT 0
17284: PUSH
17285: LD_INT 1
17287: NEG
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 1
17295: PUSH
17296: LD_INT 0
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 1
17305: PUSH
17306: LD_INT 1
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_INT 0
17315: PUSH
17316: LD_INT 1
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 1
17325: NEG
17326: PUSH
17327: LD_INT 0
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 1
17336: NEG
17337: PUSH
17338: LD_INT 1
17340: NEG
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: LD_INT 1
17348: NEG
17349: PUSH
17350: LD_INT 2
17352: NEG
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 0
17360: PUSH
17361: LD_INT 2
17363: NEG
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PUSH
17369: LD_INT 1
17371: PUSH
17372: LD_INT 1
17374: NEG
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 2
17382: PUSH
17383: LD_INT 0
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: LD_INT 2
17392: PUSH
17393: LD_INT 1
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: LD_INT 2
17402: PUSH
17403: LD_INT 2
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 1
17412: PUSH
17413: LD_INT 2
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 0
17422: PUSH
17423: LD_INT 2
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 1
17432: NEG
17433: PUSH
17434: LD_INT 1
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 2
17443: NEG
17444: PUSH
17445: LD_INT 0
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 2
17454: NEG
17455: PUSH
17456: LD_INT 1
17458: NEG
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 2
17466: NEG
17467: PUSH
17468: LD_INT 2
17470: NEG
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 3
17478: PUSH
17479: LD_INT 1
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 3
17488: PUSH
17489: LD_INT 2
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 2
17498: PUSH
17499: LD_INT 3
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: LD_INT 1
17508: PUSH
17509: LD_INT 3
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
17541: LD_ADDR_VAR 0 26
17545: PUSH
17546: LD_INT 0
17548: PUSH
17549: LD_INT 0
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 0
17558: PUSH
17559: LD_INT 1
17561: NEG
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: LD_INT 0
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 1
17579: PUSH
17580: LD_INT 1
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 0
17589: PUSH
17590: LD_INT 1
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 1
17599: NEG
17600: PUSH
17601: LD_INT 0
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 1
17610: NEG
17611: PUSH
17612: LD_INT 1
17614: NEG
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 1
17622: NEG
17623: PUSH
17624: LD_INT 2
17626: NEG
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 0
17634: PUSH
17635: LD_INT 2
17637: NEG
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 1
17645: PUSH
17646: LD_INT 1
17648: NEG
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 2
17656: PUSH
17657: LD_INT 0
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 2
17666: PUSH
17667: LD_INT 1
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 2
17676: PUSH
17677: LD_INT 2
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: LD_INT 1
17686: PUSH
17687: LD_INT 2
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 0
17696: PUSH
17697: LD_INT 2
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 1
17706: NEG
17707: PUSH
17708: LD_INT 1
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 2
17717: NEG
17718: PUSH
17719: LD_INT 0
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 2
17728: NEG
17729: PUSH
17730: LD_INT 1
17732: NEG
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 2
17740: NEG
17741: PUSH
17742: LD_INT 2
17744: NEG
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 2
17752: PUSH
17753: LD_INT 3
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 1
17762: PUSH
17763: LD_INT 3
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 1
17772: NEG
17773: PUSH
17774: LD_INT 2
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 2
17783: NEG
17784: PUSH
17785: LD_INT 1
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
17817: LD_ADDR_VAR 0 27
17821: PUSH
17822: LD_INT 0
17824: PUSH
17825: LD_INT 0
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 0
17834: PUSH
17835: LD_INT 1
17837: NEG
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 1
17845: PUSH
17846: LD_INT 0
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 1
17855: PUSH
17856: LD_INT 1
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 0
17865: PUSH
17866: LD_INT 1
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 1
17875: NEG
17876: PUSH
17877: LD_INT 0
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 1
17886: NEG
17887: PUSH
17888: LD_INT 1
17890: NEG
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 1
17898: NEG
17899: PUSH
17900: LD_INT 2
17902: NEG
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 0
17910: PUSH
17911: LD_INT 2
17913: NEG
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 1
17921: PUSH
17922: LD_INT 1
17924: NEG
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 2
17932: PUSH
17933: LD_INT 0
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 2
17942: PUSH
17943: LD_INT 1
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 2
17952: PUSH
17953: LD_INT 2
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 1
17962: PUSH
17963: LD_INT 2
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 0
17972: PUSH
17973: LD_INT 2
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 1
17982: NEG
17983: PUSH
17984: LD_INT 1
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 2
17993: NEG
17994: PUSH
17995: LD_INT 0
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 2
18004: NEG
18005: PUSH
18006: LD_INT 1
18008: NEG
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 2
18016: NEG
18017: PUSH
18018: LD_INT 2
18020: NEG
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PUSH
18026: LD_INT 1
18028: NEG
18029: PUSH
18030: LD_INT 2
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 2
18039: NEG
18040: PUSH
18041: LD_INT 1
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 3
18050: NEG
18051: PUSH
18052: LD_INT 1
18054: NEG
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 3
18062: NEG
18063: PUSH
18064: LD_INT 2
18066: NEG
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18097: LD_ADDR_VAR 0 28
18101: PUSH
18102: LD_INT 0
18104: PUSH
18105: LD_INT 0
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 0
18114: PUSH
18115: LD_INT 1
18117: NEG
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 1
18125: PUSH
18126: LD_INT 0
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: LD_INT 1
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 0
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 1
18155: NEG
18156: PUSH
18157: LD_INT 0
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 1
18166: NEG
18167: PUSH
18168: LD_INT 1
18170: NEG
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 1
18178: NEG
18179: PUSH
18180: LD_INT 2
18182: NEG
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 0
18190: PUSH
18191: LD_INT 2
18193: NEG
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: LD_INT 1
18204: NEG
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 2
18212: PUSH
18213: LD_INT 0
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 2
18222: PUSH
18223: LD_INT 1
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 2
18232: PUSH
18233: LD_INT 2
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 1
18242: PUSH
18243: LD_INT 2
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 0
18252: PUSH
18253: LD_INT 2
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 1
18262: NEG
18263: PUSH
18264: LD_INT 1
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 2
18273: NEG
18274: PUSH
18275: LD_INT 0
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 2
18284: NEG
18285: PUSH
18286: LD_INT 1
18288: NEG
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 2
18296: NEG
18297: PUSH
18298: LD_INT 2
18300: NEG
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 2
18308: NEG
18309: PUSH
18310: LD_INT 3
18312: NEG
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 1
18320: NEG
18321: PUSH
18322: LD_INT 3
18324: NEG
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 3
18332: NEG
18333: PUSH
18334: LD_INT 1
18336: NEG
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 3
18344: NEG
18345: PUSH
18346: LD_INT 2
18348: NEG
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18379: LD_ADDR_VAR 0 29
18383: PUSH
18384: LD_INT 0
18386: PUSH
18387: LD_INT 0
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 0
18396: PUSH
18397: LD_INT 1
18399: NEG
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 1
18407: PUSH
18408: LD_INT 0
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: LD_INT 1
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 0
18427: PUSH
18428: LD_INT 1
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 1
18437: NEG
18438: PUSH
18439: LD_INT 0
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 1
18448: NEG
18449: PUSH
18450: LD_INT 1
18452: NEG
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 1
18460: NEG
18461: PUSH
18462: LD_INT 2
18464: NEG
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: LD_INT 0
18472: PUSH
18473: LD_INT 2
18475: NEG
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 1
18483: PUSH
18484: LD_INT 1
18486: NEG
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 2
18494: PUSH
18495: LD_INT 0
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 2
18504: PUSH
18505: LD_INT 1
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 1
18514: PUSH
18515: LD_INT 2
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 0
18524: PUSH
18525: LD_INT 2
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 1
18534: NEG
18535: PUSH
18536: LD_INT 1
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 2
18545: NEG
18546: PUSH
18547: LD_INT 1
18549: NEG
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 2
18557: NEG
18558: PUSH
18559: LD_INT 2
18561: NEG
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 2
18569: NEG
18570: PUSH
18571: LD_INT 3
18573: NEG
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 2
18581: PUSH
18582: LD_INT 1
18584: NEG
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 3
18592: PUSH
18593: LD_INT 1
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 1
18602: PUSH
18603: LD_INT 3
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 1
18612: NEG
18613: PUSH
18614: LD_INT 2
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 3
18623: NEG
18624: PUSH
18625: LD_INT 2
18627: NEG
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
18658: LD_ADDR_VAR 0 30
18662: PUSH
18663: LD_INT 0
18665: PUSH
18666: LD_INT 0
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 0
18675: PUSH
18676: LD_INT 1
18678: NEG
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 1
18686: PUSH
18687: LD_INT 0
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 1
18696: PUSH
18697: LD_INT 1
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 0
18706: PUSH
18707: LD_INT 1
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 1
18716: NEG
18717: PUSH
18718: LD_INT 0
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 1
18727: NEG
18728: PUSH
18729: LD_INT 1
18731: NEG
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 1
18739: NEG
18740: PUSH
18741: LD_INT 2
18743: NEG
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 0
18751: PUSH
18752: LD_INT 2
18754: NEG
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: LD_INT 1
18765: NEG
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 2
18773: PUSH
18774: LD_INT 0
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 2
18783: PUSH
18784: LD_INT 1
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 2
18793: PUSH
18794: LD_INT 2
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 1
18803: PUSH
18804: LD_INT 2
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 1
18813: NEG
18814: PUSH
18815: LD_INT 1
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: LD_INT 2
18824: NEG
18825: PUSH
18826: LD_INT 0
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 2
18835: NEG
18836: PUSH
18837: LD_INT 1
18839: NEG
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 1
18847: NEG
18848: PUSH
18849: LD_INT 3
18851: NEG
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 1
18859: PUSH
18860: LD_INT 2
18862: NEG
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 3
18870: PUSH
18871: LD_INT 2
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 2
18880: PUSH
18881: LD_INT 3
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 2
18890: NEG
18891: PUSH
18892: LD_INT 1
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 3
18901: NEG
18902: PUSH
18903: LD_INT 1
18905: NEG
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18936: LD_ADDR_VAR 0 31
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: LD_INT 0
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 0
18953: PUSH
18954: LD_INT 1
18956: NEG
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: PUSH
18965: LD_INT 0
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: LD_INT 1
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 0
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 1
18994: NEG
18995: PUSH
18996: LD_INT 0
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 1
19005: NEG
19006: PUSH
19007: LD_INT 1
19009: NEG
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 1
19017: NEG
19018: PUSH
19019: LD_INT 2
19021: NEG
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: LD_INT 1
19032: NEG
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 2
19040: PUSH
19041: LD_INT 0
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: LD_INT 1
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 2
19060: PUSH
19061: LD_INT 2
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 1
19070: PUSH
19071: LD_INT 2
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 0
19080: PUSH
19081: LD_INT 2
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 1
19090: NEG
19091: PUSH
19092: LD_INT 1
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 2
19101: NEG
19102: PUSH
19103: LD_INT 1
19105: NEG
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 2
19113: NEG
19114: PUSH
19115: LD_INT 2
19117: NEG
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 2
19125: NEG
19126: PUSH
19127: LD_INT 3
19129: NEG
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 2
19137: PUSH
19138: LD_INT 1
19140: NEG
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 3
19148: PUSH
19149: LD_INT 1
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 1
19158: PUSH
19159: LD_INT 3
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 1
19168: NEG
19169: PUSH
19170: LD_INT 2
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 3
19179: NEG
19180: PUSH
19181: LD_INT 2
19183: NEG
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19214: LD_ADDR_VAR 0 32
19218: PUSH
19219: LD_INT 0
19221: PUSH
19222: LD_INT 0
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 0
19231: PUSH
19232: LD_INT 1
19234: NEG
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 1
19242: PUSH
19243: LD_INT 0
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 1
19252: PUSH
19253: LD_INT 1
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 0
19262: PUSH
19263: LD_INT 1
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 1
19272: NEG
19273: PUSH
19274: LD_INT 0
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 1
19283: NEG
19284: PUSH
19285: LD_INT 1
19287: NEG
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 1
19295: NEG
19296: PUSH
19297: LD_INT 2
19299: NEG
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 0
19307: PUSH
19308: LD_INT 2
19310: NEG
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 1
19318: PUSH
19319: LD_INT 1
19321: NEG
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 2
19329: PUSH
19330: LD_INT 1
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 2
19339: PUSH
19340: LD_INT 2
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 1
19349: PUSH
19350: LD_INT 2
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 0
19359: PUSH
19360: LD_INT 2
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: LD_INT 1
19369: NEG
19370: PUSH
19371: LD_INT 1
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 2
19380: NEG
19381: PUSH
19382: LD_INT 0
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 2
19391: NEG
19392: PUSH
19393: LD_INT 1
19395: NEG
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 1
19403: NEG
19404: PUSH
19405: LD_INT 3
19407: NEG
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 1
19415: PUSH
19416: LD_INT 2
19418: NEG
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 3
19426: PUSH
19427: LD_INT 2
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 2
19436: PUSH
19437: LD_INT 3
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 2
19446: NEG
19447: PUSH
19448: LD_INT 1
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 3
19457: NEG
19458: PUSH
19459: LD_INT 1
19461: NEG
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19492: LD_ADDR_VAR 0 33
19496: PUSH
19497: LD_INT 0
19499: PUSH
19500: LD_INT 0
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 0
19509: PUSH
19510: LD_INT 1
19512: NEG
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 1
19520: PUSH
19521: LD_INT 0
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 1
19530: PUSH
19531: LD_INT 1
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 0
19540: PUSH
19541: LD_INT 1
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 1
19550: NEG
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 1
19561: NEG
19562: PUSH
19563: LD_INT 1
19565: NEG
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 1
19573: NEG
19574: PUSH
19575: LD_INT 2
19577: NEG
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 1
19585: PUSH
19586: LD_INT 1
19588: NEG
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 2
19596: PUSH
19597: LD_INT 0
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 2
19606: PUSH
19607: LD_INT 1
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 1
19616: PUSH
19617: LD_INT 2
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 0
19626: PUSH
19627: LD_INT 2
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 1
19636: NEG
19637: PUSH
19638: LD_INT 1
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 2
19647: NEG
19648: PUSH
19649: LD_INT 0
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 2
19658: NEG
19659: PUSH
19660: LD_INT 1
19662: NEG
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 2
19670: NEG
19671: PUSH
19672: LD_INT 2
19674: NEG
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 2
19682: NEG
19683: PUSH
19684: LD_INT 3
19686: NEG
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 2
19694: PUSH
19695: LD_INT 1
19697: NEG
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 3
19705: PUSH
19706: LD_INT 1
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 1
19715: PUSH
19716: LD_INT 3
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 1
19725: NEG
19726: PUSH
19727: LD_INT 2
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 3
19736: NEG
19737: PUSH
19738: LD_INT 2
19740: NEG
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19771: LD_ADDR_VAR 0 34
19775: PUSH
19776: LD_INT 0
19778: PUSH
19779: LD_INT 0
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 0
19788: PUSH
19789: LD_INT 1
19791: NEG
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 1
19799: PUSH
19800: LD_INT 0
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 1
19809: PUSH
19810: LD_INT 1
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: LD_INT 0
19819: PUSH
19820: LD_INT 1
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 1
19829: NEG
19830: PUSH
19831: LD_INT 0
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 1
19840: NEG
19841: PUSH
19842: LD_INT 1
19844: NEG
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 1
19852: NEG
19853: PUSH
19854: LD_INT 2
19856: NEG
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 0
19864: PUSH
19865: LD_INT 2
19867: NEG
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 1
19875: PUSH
19876: LD_INT 1
19878: NEG
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 2
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 2
19896: PUSH
19897: LD_INT 2
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: LD_INT 2
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 1
19916: NEG
19917: PUSH
19918: LD_INT 1
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 2
19927: NEG
19928: PUSH
19929: LD_INT 0
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 2
19938: NEG
19939: PUSH
19940: LD_INT 1
19942: NEG
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 2
19950: NEG
19951: PUSH
19952: LD_INT 2
19954: NEG
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 1
19962: NEG
19963: PUSH
19964: LD_INT 3
19966: NEG
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 1
19974: PUSH
19975: LD_INT 2
19977: NEG
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 3
19985: PUSH
19986: LD_INT 2
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 2
19995: PUSH
19996: LD_INT 3
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 2
20005: NEG
20006: PUSH
20007: LD_INT 1
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 3
20016: NEG
20017: PUSH
20018: LD_INT 1
20020: NEG
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20051: LD_ADDR_VAR 0 35
20055: PUSH
20056: LD_INT 0
20058: PUSH
20059: LD_INT 0
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 0
20068: PUSH
20069: LD_INT 1
20071: NEG
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 1
20079: PUSH
20080: LD_INT 0
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 0
20099: PUSH
20100: LD_INT 1
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 1
20109: NEG
20110: PUSH
20111: LD_INT 0
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 1
20120: NEG
20121: PUSH
20122: LD_INT 1
20124: NEG
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 2
20132: PUSH
20133: LD_INT 1
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 2
20142: NEG
20143: PUSH
20144: LD_INT 1
20146: NEG
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20163: LD_ADDR_VAR 0 36
20167: PUSH
20168: LD_INT 0
20170: PUSH
20171: LD_INT 0
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 0
20180: PUSH
20181: LD_INT 1
20183: NEG
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 1
20191: PUSH
20192: LD_INT 0
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: LD_INT 1
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 0
20211: PUSH
20212: LD_INT 1
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 1
20221: NEG
20222: PUSH
20223: LD_INT 0
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 1
20232: NEG
20233: PUSH
20234: LD_INT 1
20236: NEG
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 1
20244: NEG
20245: PUSH
20246: LD_INT 2
20248: NEG
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 1
20256: PUSH
20257: LD_INT 2
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20275: LD_ADDR_VAR 0 37
20279: PUSH
20280: LD_INT 0
20282: PUSH
20283: LD_INT 0
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 0
20292: PUSH
20293: LD_INT 1
20295: NEG
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 1
20303: PUSH
20304: LD_INT 0
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 1
20313: PUSH
20314: LD_INT 1
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 0
20323: PUSH
20324: LD_INT 1
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 1
20333: NEG
20334: PUSH
20335: LD_INT 0
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 1
20344: NEG
20345: PUSH
20346: LD_INT 1
20348: NEG
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 1
20356: PUSH
20357: LD_INT 1
20359: NEG
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 1
20367: NEG
20368: PUSH
20369: LD_INT 1
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20387: LD_ADDR_VAR 0 38
20391: PUSH
20392: LD_INT 0
20394: PUSH
20395: LD_INT 0
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: LD_INT 1
20407: NEG
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 1
20415: PUSH
20416: LD_INT 0
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 1
20425: PUSH
20426: LD_INT 1
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 1
20445: NEG
20446: PUSH
20447: LD_INT 0
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 1
20456: NEG
20457: PUSH
20458: LD_INT 1
20460: NEG
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 2
20468: PUSH
20469: LD_INT 1
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 2
20478: NEG
20479: PUSH
20480: LD_INT 1
20482: NEG
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20499: LD_ADDR_VAR 0 39
20503: PUSH
20504: LD_INT 0
20506: PUSH
20507: LD_INT 0
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 0
20516: PUSH
20517: LD_INT 1
20519: NEG
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 1
20527: PUSH
20528: LD_INT 0
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 1
20537: PUSH
20538: LD_INT 1
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 0
20547: PUSH
20548: LD_INT 1
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 1
20557: NEG
20558: PUSH
20559: LD_INT 0
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 1
20568: NEG
20569: PUSH
20570: LD_INT 1
20572: NEG
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 1
20580: NEG
20581: PUSH
20582: LD_INT 2
20584: NEG
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: LD_INT 2
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20611: LD_ADDR_VAR 0 40
20615: PUSH
20616: LD_INT 0
20618: PUSH
20619: LD_INT 0
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 0
20628: PUSH
20629: LD_INT 1
20631: NEG
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 1
20639: PUSH
20640: LD_INT 0
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 1
20649: PUSH
20650: LD_INT 1
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 0
20659: PUSH
20660: LD_INT 1
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 1
20669: NEG
20670: PUSH
20671: LD_INT 0
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PUSH
20678: LD_INT 1
20680: NEG
20681: PUSH
20682: LD_INT 1
20684: NEG
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 1
20692: PUSH
20693: LD_INT 1
20695: NEG
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 1
20703: NEG
20704: PUSH
20705: LD_INT 1
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20723: LD_ADDR_VAR 0 41
20727: PUSH
20728: LD_INT 0
20730: PUSH
20731: LD_INT 0
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: LD_INT 1
20743: NEG
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 1
20751: PUSH
20752: LD_INT 0
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: LD_INT 1
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 0
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 1
20781: NEG
20782: PUSH
20783: LD_INT 0
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 1
20792: NEG
20793: PUSH
20794: LD_INT 1
20796: NEG
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 1
20804: NEG
20805: PUSH
20806: LD_INT 2
20808: NEG
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 1
20816: PUSH
20817: LD_INT 1
20819: NEG
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 2
20827: PUSH
20828: LD_INT 0
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 2
20837: PUSH
20838: LD_INT 1
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 2
20847: PUSH
20848: LD_INT 2
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 1
20857: PUSH
20858: LD_INT 2
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 1
20867: NEG
20868: PUSH
20869: LD_INT 1
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 2
20878: NEG
20879: PUSH
20880: LD_INT 0
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 2
20889: NEG
20890: PUSH
20891: LD_INT 1
20893: NEG
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 2
20901: NEG
20902: PUSH
20903: LD_INT 2
20905: NEG
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 2
20913: NEG
20914: PUSH
20915: LD_INT 3
20917: NEG
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 2
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 3
20936: PUSH
20937: LD_INT 0
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 3
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 3
20956: PUSH
20957: LD_INT 2
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 3
20966: PUSH
20967: LD_INT 3
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 2
20976: PUSH
20977: LD_INT 3
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 2
20986: NEG
20987: PUSH
20988: LD_INT 1
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 3
20997: NEG
20998: PUSH
20999: LD_INT 0
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 3
21008: NEG
21009: PUSH
21010: LD_INT 1
21012: NEG
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 3
21020: NEG
21021: PUSH
21022: LD_INT 2
21024: NEG
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 3
21032: NEG
21033: PUSH
21034: LD_INT 3
21036: NEG
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21073: LD_ADDR_VAR 0 42
21077: PUSH
21078: LD_INT 0
21080: PUSH
21081: LD_INT 0
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 0
21090: PUSH
21091: LD_INT 1
21093: NEG
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 1
21101: PUSH
21102: LD_INT 0
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 1
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 0
21121: PUSH
21122: LD_INT 1
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 1
21131: NEG
21132: PUSH
21133: LD_INT 0
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 1
21142: NEG
21143: PUSH
21144: LD_INT 1
21146: NEG
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 1
21154: NEG
21155: PUSH
21156: LD_INT 2
21158: NEG
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: LD_INT 0
21166: PUSH
21167: LD_INT 2
21169: NEG
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 1
21177: PUSH
21178: LD_INT 1
21180: NEG
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 2
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 2
21198: PUSH
21199: LD_INT 2
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 1
21208: PUSH
21209: LD_INT 2
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 0
21218: PUSH
21219: LD_INT 2
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 1
21228: NEG
21229: PUSH
21230: LD_INT 1
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 2
21239: NEG
21240: PUSH
21241: LD_INT 1
21243: NEG
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 2
21251: NEG
21252: PUSH
21253: LD_INT 2
21255: NEG
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 2
21263: NEG
21264: PUSH
21265: LD_INT 3
21267: NEG
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 1
21275: NEG
21276: PUSH
21277: LD_INT 3
21279: NEG
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 0
21287: PUSH
21288: LD_INT 3
21290: NEG
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 1
21298: PUSH
21299: LD_INT 2
21301: NEG
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 3
21309: PUSH
21310: LD_INT 2
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 3
21319: PUSH
21320: LD_INT 3
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 2
21329: PUSH
21330: LD_INT 3
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 1
21339: PUSH
21340: LD_INT 3
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 0
21349: PUSH
21350: LD_INT 3
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 1
21359: NEG
21360: PUSH
21361: LD_INT 2
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 3
21370: NEG
21371: PUSH
21372: LD_INT 2
21374: NEG
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 3
21382: NEG
21383: PUSH
21384: LD_INT 3
21386: NEG
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21423: LD_ADDR_VAR 0 43
21427: PUSH
21428: LD_INT 0
21430: PUSH
21431: LD_INT 0
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 0
21440: PUSH
21441: LD_INT 1
21443: NEG
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 1
21451: PUSH
21452: LD_INT 0
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 1
21461: PUSH
21462: LD_INT 1
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: LD_INT 1
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 1
21481: NEG
21482: PUSH
21483: LD_INT 0
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 1
21492: NEG
21493: PUSH
21494: LD_INT 1
21496: NEG
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 1
21504: NEG
21505: PUSH
21506: LD_INT 2
21508: NEG
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 0
21516: PUSH
21517: LD_INT 2
21519: NEG
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 1
21527: PUSH
21528: LD_INT 1
21530: NEG
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 2
21538: PUSH
21539: LD_INT 0
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: LD_INT 1
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 1
21558: PUSH
21559: LD_INT 2
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 0
21568: PUSH
21569: LD_INT 2
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 1
21578: NEG
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 2
21589: NEG
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 2
21600: NEG
21601: PUSH
21602: LD_INT 1
21604: NEG
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 1
21612: NEG
21613: PUSH
21614: LD_INT 3
21616: NEG
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 0
21624: PUSH
21625: LD_INT 3
21627: NEG
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 1
21635: PUSH
21636: LD_INT 2
21638: NEG
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 2
21646: PUSH
21647: LD_INT 1
21649: NEG
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 3
21657: PUSH
21658: LD_INT 0
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 3
21667: PUSH
21668: LD_INT 1
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 1
21677: PUSH
21678: LD_INT 3
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 0
21687: PUSH
21688: LD_INT 3
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 1
21697: NEG
21698: PUSH
21699: LD_INT 2
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 2
21708: NEG
21709: PUSH
21710: LD_INT 1
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 3
21719: NEG
21720: PUSH
21721: LD_INT 0
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 3
21730: NEG
21731: PUSH
21732: LD_INT 1
21734: NEG
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21771: LD_ADDR_VAR 0 44
21775: PUSH
21776: LD_INT 0
21778: PUSH
21779: LD_INT 0
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 0
21788: PUSH
21789: LD_INT 1
21791: NEG
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 1
21799: PUSH
21800: LD_INT 0
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 1
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 0
21819: PUSH
21820: LD_INT 1
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 1
21829: NEG
21830: PUSH
21831: LD_INT 0
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 1
21840: NEG
21841: PUSH
21842: LD_INT 1
21844: NEG
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 1
21852: NEG
21853: PUSH
21854: LD_INT 2
21856: NEG
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 1
21864: PUSH
21865: LD_INT 1
21867: NEG
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 2
21875: PUSH
21876: LD_INT 0
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 2
21885: PUSH
21886: LD_INT 1
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 2
21895: PUSH
21896: LD_INT 2
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 1
21905: PUSH
21906: LD_INT 2
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 1
21915: NEG
21916: PUSH
21917: LD_INT 1
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 2
21926: NEG
21927: PUSH
21928: LD_INT 0
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 2
21937: NEG
21938: PUSH
21939: LD_INT 1
21941: NEG
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 2
21949: NEG
21950: PUSH
21951: LD_INT 2
21953: NEG
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 2
21961: NEG
21962: PUSH
21963: LD_INT 3
21965: NEG
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 2
21973: PUSH
21974: LD_INT 1
21976: NEG
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 3
21984: PUSH
21985: LD_INT 0
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 3
21994: PUSH
21995: LD_INT 1
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 3
22004: PUSH
22005: LD_INT 2
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 3
22014: PUSH
22015: LD_INT 3
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 2
22024: PUSH
22025: LD_INT 3
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 2
22034: NEG
22035: PUSH
22036: LD_INT 1
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 3
22045: NEG
22046: PUSH
22047: LD_INT 0
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 3
22056: NEG
22057: PUSH
22058: LD_INT 1
22060: NEG
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 3
22068: NEG
22069: PUSH
22070: LD_INT 2
22072: NEG
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 3
22080: NEG
22081: PUSH
22082: LD_INT 3
22084: NEG
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22121: LD_ADDR_VAR 0 45
22125: PUSH
22126: LD_INT 0
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 0
22138: PUSH
22139: LD_INT 1
22141: NEG
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 1
22149: PUSH
22150: LD_INT 0
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: LD_INT 1
22159: PUSH
22160: LD_INT 1
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 0
22169: PUSH
22170: LD_INT 1
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 1
22179: NEG
22180: PUSH
22181: LD_INT 0
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 1
22190: NEG
22191: PUSH
22192: LD_INT 1
22194: NEG
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 1
22202: NEG
22203: PUSH
22204: LD_INT 2
22206: NEG
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 0
22214: PUSH
22215: LD_INT 2
22217: NEG
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 1
22225: PUSH
22226: LD_INT 1
22228: NEG
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 2
22236: PUSH
22237: LD_INT 1
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 2
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 1
22256: PUSH
22257: LD_INT 2
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 0
22266: PUSH
22267: LD_INT 2
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 1
22276: NEG
22277: PUSH
22278: LD_INT 1
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 2
22287: NEG
22288: PUSH
22289: LD_INT 1
22291: NEG
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 2
22299: NEG
22300: PUSH
22301: LD_INT 2
22303: NEG
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 2
22311: NEG
22312: PUSH
22313: LD_INT 3
22315: NEG
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 1
22323: NEG
22324: PUSH
22325: LD_INT 3
22327: NEG
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 0
22335: PUSH
22336: LD_INT 3
22338: NEG
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: LD_INT 2
22349: NEG
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 3
22357: PUSH
22358: LD_INT 2
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 3
22367: PUSH
22368: LD_INT 3
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 2
22377: PUSH
22378: LD_INT 3
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 1
22387: PUSH
22388: LD_INT 3
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 0
22397: PUSH
22398: LD_INT 3
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 1
22407: NEG
22408: PUSH
22409: LD_INT 2
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 3
22418: NEG
22419: PUSH
22420: LD_INT 2
22422: NEG
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 3
22430: NEG
22431: PUSH
22432: LD_INT 3
22434: NEG
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22471: LD_ADDR_VAR 0 46
22475: PUSH
22476: LD_INT 0
22478: PUSH
22479: LD_INT 0
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 0
22488: PUSH
22489: LD_INT 1
22491: NEG
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 1
22499: PUSH
22500: LD_INT 0
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 1
22509: PUSH
22510: LD_INT 1
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 0
22519: PUSH
22520: LD_INT 1
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 1
22529: NEG
22530: PUSH
22531: LD_INT 0
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 1
22540: NEG
22541: PUSH
22542: LD_INT 1
22544: NEG
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: LD_INT 2
22556: NEG
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 0
22564: PUSH
22565: LD_INT 2
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: LD_INT 1
22578: NEG
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 2
22586: PUSH
22587: LD_INT 0
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 2
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 1
22606: PUSH
22607: LD_INT 2
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 0
22616: PUSH
22617: LD_INT 2
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 1
22626: NEG
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 2
22637: NEG
22638: PUSH
22639: LD_INT 0
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 2
22648: NEG
22649: PUSH
22650: LD_INT 1
22652: NEG
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 1
22660: NEG
22661: PUSH
22662: LD_INT 3
22664: NEG
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 0
22672: PUSH
22673: LD_INT 3
22675: NEG
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: PUSH
22684: LD_INT 2
22686: NEG
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 2
22694: PUSH
22695: LD_INT 1
22697: NEG
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 3
22705: PUSH
22706: LD_INT 0
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 3
22715: PUSH
22716: LD_INT 1
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 1
22725: PUSH
22726: LD_INT 3
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: LD_INT 0
22735: PUSH
22736: LD_INT 3
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 1
22745: NEG
22746: PUSH
22747: LD_INT 2
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 2
22756: NEG
22757: PUSH
22758: LD_INT 1
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 3
22767: NEG
22768: PUSH
22769: LD_INT 0
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 3
22778: NEG
22779: PUSH
22780: LD_INT 1
22782: NEG
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22819: LD_ADDR_VAR 0 47
22823: PUSH
22824: LD_INT 0
22826: PUSH
22827: LD_INT 0
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 0
22836: PUSH
22837: LD_INT 1
22839: NEG
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 1
22847: PUSH
22848: LD_INT 0
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 1
22857: PUSH
22858: LD_INT 1
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 0
22867: PUSH
22868: LD_INT 1
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 1
22877: NEG
22878: PUSH
22879: LD_INT 0
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 1
22888: NEG
22889: PUSH
22890: LD_INT 1
22892: NEG
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 1
22900: NEG
22901: PUSH
22902: LD_INT 2
22904: NEG
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 0
22912: PUSH
22913: LD_INT 2
22915: NEG
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 1
22923: PUSH
22924: LD_INT 1
22926: NEG
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 2
22934: NEG
22935: PUSH
22936: LD_INT 1
22938: NEG
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 2
22946: NEG
22947: PUSH
22948: LD_INT 2
22950: NEG
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
22970: LD_ADDR_VAR 0 48
22974: PUSH
22975: LD_INT 0
22977: PUSH
22978: LD_INT 0
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 0
22987: PUSH
22988: LD_INT 1
22990: NEG
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 1
22998: PUSH
22999: LD_INT 0
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 1
23008: PUSH
23009: LD_INT 1
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 0
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 1
23028: NEG
23029: PUSH
23030: LD_INT 0
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 1
23039: NEG
23040: PUSH
23041: LD_INT 1
23043: NEG
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 1
23051: NEG
23052: PUSH
23053: LD_INT 2
23055: NEG
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 0
23063: PUSH
23064: LD_INT 2
23066: NEG
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: LD_INT 1
23077: NEG
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 2
23085: PUSH
23086: LD_INT 0
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 2
23095: PUSH
23096: LD_INT 1
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23117: LD_ADDR_VAR 0 49
23121: PUSH
23122: LD_INT 0
23124: PUSH
23125: LD_INT 0
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 0
23134: PUSH
23135: LD_INT 1
23137: NEG
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: LD_INT 0
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 1
23155: PUSH
23156: LD_INT 1
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 0
23165: PUSH
23166: LD_INT 1
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 1
23175: NEG
23176: PUSH
23177: LD_INT 0
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 1
23186: NEG
23187: PUSH
23188: LD_INT 1
23190: NEG
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 1
23198: PUSH
23199: LD_INT 1
23201: NEG
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 2
23209: PUSH
23210: LD_INT 0
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 2
23219: PUSH
23220: LD_INT 1
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 2
23229: PUSH
23230: LD_INT 2
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: LD_INT 2
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23261: LD_ADDR_VAR 0 50
23265: PUSH
23266: LD_INT 0
23268: PUSH
23269: LD_INT 0
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 0
23278: PUSH
23279: LD_INT 1
23281: NEG
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: LD_INT 0
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 1
23299: PUSH
23300: LD_INT 1
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 0
23309: PUSH
23310: LD_INT 1
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 1
23319: NEG
23320: PUSH
23321: LD_INT 0
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 1
23330: NEG
23331: PUSH
23332: LD_INT 1
23334: NEG
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 2
23342: PUSH
23343: LD_INT 1
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 2
23352: PUSH
23353: LD_INT 2
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: LD_INT 2
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 0
23372: PUSH
23373: LD_INT 2
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 1
23382: NEG
23383: PUSH
23384: LD_INT 1
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23405: LD_ADDR_VAR 0 51
23409: PUSH
23410: LD_INT 0
23412: PUSH
23413: LD_INT 0
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 0
23422: PUSH
23423: LD_INT 1
23425: NEG
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 1
23433: PUSH
23434: LD_INT 0
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 1
23443: PUSH
23444: LD_INT 1
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 0
23453: PUSH
23454: LD_INT 1
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 1
23463: NEG
23464: PUSH
23465: LD_INT 0
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 1
23474: NEG
23475: PUSH
23476: LD_INT 1
23478: NEG
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: LD_INT 2
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 0
23496: PUSH
23497: LD_INT 2
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 1
23506: NEG
23507: PUSH
23508: LD_INT 1
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 2
23517: NEG
23518: PUSH
23519: LD_INT 0
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 2
23528: NEG
23529: PUSH
23530: LD_INT 1
23532: NEG
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23552: LD_ADDR_VAR 0 52
23556: PUSH
23557: LD_INT 0
23559: PUSH
23560: LD_INT 0
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 0
23569: PUSH
23570: LD_INT 1
23572: NEG
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 1
23580: PUSH
23581: LD_INT 0
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 1
23590: PUSH
23591: LD_INT 1
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: LD_INT 1
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 1
23610: NEG
23611: PUSH
23612: LD_INT 0
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 1
23621: NEG
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 1
23633: NEG
23634: PUSH
23635: LD_INT 2
23637: NEG
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 1
23645: NEG
23646: PUSH
23647: LD_INT 1
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 2
23656: NEG
23657: PUSH
23658: LD_INT 0
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 2
23667: NEG
23668: PUSH
23669: LD_INT 1
23671: NEG
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 2
23679: NEG
23680: PUSH
23681: LD_INT 2
23683: NEG
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23703: LD_ADDR_VAR 0 53
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: LD_INT 0
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 0
23720: PUSH
23721: LD_INT 1
23723: NEG
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: LD_INT 0
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: LD_INT 1
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 0
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 1
23761: NEG
23762: PUSH
23763: LD_INT 0
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 1
23772: NEG
23773: PUSH
23774: LD_INT 1
23776: NEG
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: NEG
23785: PUSH
23786: LD_INT 2
23788: NEG
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 0
23796: PUSH
23797: LD_INT 2
23799: NEG
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 1
23807: PUSH
23808: LD_INT 1
23810: NEG
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 2
23818: PUSH
23819: LD_INT 0
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 2
23828: PUSH
23829: LD_INT 1
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 2
23838: PUSH
23839: LD_INT 2
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: LD_INT 2
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 0
23858: PUSH
23859: LD_INT 2
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 1
23868: NEG
23869: PUSH
23870: LD_INT 1
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 2
23879: NEG
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 2
23890: NEG
23891: PUSH
23892: LD_INT 1
23894: NEG
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 2
23902: NEG
23903: PUSH
23904: LD_INT 2
23906: NEG
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23933: LD_ADDR_VAR 0 54
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: LD_INT 0
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 0
23950: PUSH
23951: LD_INT 1
23953: NEG
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 1
23961: PUSH
23962: LD_INT 0
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 1
23971: PUSH
23972: LD_INT 1
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: LD_INT 0
23981: PUSH
23982: LD_INT 1
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 1
23991: NEG
23992: PUSH
23993: LD_INT 0
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 1
24002: NEG
24003: PUSH
24004: LD_INT 1
24006: NEG
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 1
24014: NEG
24015: PUSH
24016: LD_INT 2
24018: NEG
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 0
24026: PUSH
24027: LD_INT 2
24029: NEG
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 1
24037: PUSH
24038: LD_INT 1
24040: NEG
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 2
24048: PUSH
24049: LD_INT 0
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 2
24058: PUSH
24059: LD_INT 1
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 2
24068: PUSH
24069: LD_INT 2
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 1
24078: PUSH
24079: LD_INT 2
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 0
24088: PUSH
24089: LD_INT 2
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 1
24098: NEG
24099: PUSH
24100: LD_INT 1
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 2
24109: NEG
24110: PUSH
24111: LD_INT 0
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 2
24120: NEG
24121: PUSH
24122: LD_INT 1
24124: NEG
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 2
24132: NEG
24133: PUSH
24134: LD_INT 2
24136: NEG
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24163: LD_ADDR_VAR 0 55
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: LD_INT 0
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 0
24180: PUSH
24181: LD_INT 1
24183: NEG
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 1
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 0
24211: PUSH
24212: LD_INT 1
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 1
24221: NEG
24222: PUSH
24223: LD_INT 0
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 1
24232: NEG
24233: PUSH
24234: LD_INT 1
24236: NEG
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: NEG
24245: PUSH
24246: LD_INT 2
24248: NEG
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 0
24256: PUSH
24257: LD_INT 2
24259: NEG
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: LD_INT 1
24270: NEG
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 2
24278: PUSH
24279: LD_INT 0
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: LD_INT 1
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 2
24298: PUSH
24299: LD_INT 2
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: LD_INT 2
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 0
24318: PUSH
24319: LD_INT 2
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 1
24328: NEG
24329: PUSH
24330: LD_INT 1
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 2
24339: NEG
24340: PUSH
24341: LD_INT 0
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 2
24350: NEG
24351: PUSH
24352: LD_INT 1
24354: NEG
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 2
24362: NEG
24363: PUSH
24364: LD_INT 2
24366: NEG
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24393: LD_ADDR_VAR 0 56
24397: PUSH
24398: LD_INT 0
24400: PUSH
24401: LD_INT 0
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 0
24410: PUSH
24411: LD_INT 1
24413: NEG
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 1
24421: PUSH
24422: LD_INT 0
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 1
24431: PUSH
24432: LD_INT 1
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 0
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 1
24451: NEG
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 1
24462: NEG
24463: PUSH
24464: LD_INT 1
24466: NEG
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 1
24474: NEG
24475: PUSH
24476: LD_INT 2
24478: NEG
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 0
24486: PUSH
24487: LD_INT 2
24489: NEG
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: LD_INT 1
24500: NEG
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 2
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 2
24518: PUSH
24519: LD_INT 1
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 2
24528: PUSH
24529: LD_INT 2
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 1
24538: PUSH
24539: LD_INT 2
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 0
24548: PUSH
24549: LD_INT 2
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 1
24558: NEG
24559: PUSH
24560: LD_INT 1
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 2
24569: NEG
24570: PUSH
24571: LD_INT 0
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 2
24580: NEG
24581: PUSH
24582: LD_INT 1
24584: NEG
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 2
24592: NEG
24593: PUSH
24594: LD_INT 2
24596: NEG
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24623: LD_ADDR_VAR 0 57
24627: PUSH
24628: LD_INT 0
24630: PUSH
24631: LD_INT 0
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 0
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: LD_INT 0
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 1
24661: PUSH
24662: LD_INT 1
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 0
24671: PUSH
24672: LD_INT 1
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 1
24681: NEG
24682: PUSH
24683: LD_INT 0
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 1
24692: NEG
24693: PUSH
24694: LD_INT 1
24696: NEG
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 1
24704: NEG
24705: PUSH
24706: LD_INT 2
24708: NEG
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 0
24716: PUSH
24717: LD_INT 2
24719: NEG
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 1
24727: PUSH
24728: LD_INT 1
24730: NEG
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 2
24738: PUSH
24739: LD_INT 0
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 2
24748: PUSH
24749: LD_INT 1
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 2
24758: PUSH
24759: LD_INT 2
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 1
24768: PUSH
24769: LD_INT 2
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 0
24778: PUSH
24779: LD_INT 2
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 1
24788: NEG
24789: PUSH
24790: LD_INT 1
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 2
24799: NEG
24800: PUSH
24801: LD_INT 0
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 2
24810: NEG
24811: PUSH
24812: LD_INT 1
24814: NEG
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 2
24822: NEG
24823: PUSH
24824: LD_INT 2
24826: NEG
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24853: LD_ADDR_VAR 0 58
24857: PUSH
24858: LD_INT 0
24860: PUSH
24861: LD_INT 0
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: LD_INT 1
24873: NEG
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 1
24881: PUSH
24882: LD_INT 0
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 1
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 0
24901: PUSH
24902: LD_INT 1
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 1
24911: NEG
24912: PUSH
24913: LD_INT 0
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 1
24922: NEG
24923: PUSH
24924: LD_INT 1
24926: NEG
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 1
24934: NEG
24935: PUSH
24936: LD_INT 2
24938: NEG
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 0
24946: PUSH
24947: LD_INT 2
24949: NEG
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 1
24957: PUSH
24958: LD_INT 1
24960: NEG
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 2
24968: PUSH
24969: LD_INT 0
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 2
24978: PUSH
24979: LD_INT 1
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 2
24988: PUSH
24989: LD_INT 2
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 1
24998: PUSH
24999: LD_INT 2
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 0
25008: PUSH
25009: LD_INT 2
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 1
25018: NEG
25019: PUSH
25020: LD_INT 1
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 2
25029: NEG
25030: PUSH
25031: LD_INT 0
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 2
25040: NEG
25041: PUSH
25042: LD_INT 1
25044: NEG
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 2
25052: NEG
25053: PUSH
25054: LD_INT 2
25056: NEG
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25083: LD_ADDR_VAR 0 59
25087: PUSH
25088: LD_INT 0
25090: PUSH
25091: LD_INT 0
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: LD_INT 1
25103: NEG
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 1
25111: PUSH
25112: LD_INT 0
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 1
25121: PUSH
25122: LD_INT 1
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 0
25131: PUSH
25132: LD_INT 1
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 1
25141: NEG
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 1
25152: NEG
25153: PUSH
25154: LD_INT 1
25156: NEG
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25171: LD_ADDR_VAR 0 60
25175: PUSH
25176: LD_INT 0
25178: PUSH
25179: LD_INT 0
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 0
25188: PUSH
25189: LD_INT 1
25191: NEG
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 1
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 0
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: LD_INT 0
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 1
25240: NEG
25241: PUSH
25242: LD_INT 1
25244: NEG
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25259: LD_ADDR_VAR 0 61
25263: PUSH
25264: LD_INT 0
25266: PUSH
25267: LD_INT 0
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 0
25276: PUSH
25277: LD_INT 1
25279: NEG
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 1
25287: PUSH
25288: LD_INT 0
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 1
25297: PUSH
25298: LD_INT 1
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 0
25307: PUSH
25308: LD_INT 1
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 1
25317: NEG
25318: PUSH
25319: LD_INT 0
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 1
25328: NEG
25329: PUSH
25330: LD_INT 1
25332: NEG
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25347: LD_ADDR_VAR 0 62
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: LD_INT 1
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: LD_INT 0
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: LD_INT 1
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 0
25395: PUSH
25396: LD_INT 1
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: NEG
25406: PUSH
25407: LD_INT 0
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 1
25416: NEG
25417: PUSH
25418: LD_INT 1
25420: NEG
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25435: LD_ADDR_VAR 0 63
25439: PUSH
25440: LD_INT 0
25442: PUSH
25443: LD_INT 0
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 0
25452: PUSH
25453: LD_INT 1
25455: NEG
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: LD_INT 0
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: LD_INT 1
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: LD_INT 1
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: LD_INT 0
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 1
25504: NEG
25505: PUSH
25506: LD_INT 1
25508: NEG
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25523: LD_ADDR_VAR 0 64
25527: PUSH
25528: LD_INT 0
25530: PUSH
25531: LD_INT 0
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 0
25540: PUSH
25541: LD_INT 1
25543: NEG
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 1
25551: PUSH
25552: LD_INT 0
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: LD_INT 1
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 0
25571: PUSH
25572: LD_INT 1
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 1
25581: NEG
25582: PUSH
25583: LD_INT 0
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 1
25592: NEG
25593: PUSH
25594: LD_INT 1
25596: NEG
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: ST_TO_ADDR
// end ; 1 :
25611: GO 31508
25613: LD_INT 1
25615: DOUBLE
25616: EQUAL
25617: IFTRUE 25621
25619: GO 28244
25621: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25622: LD_ADDR_VAR 0 11
25626: PUSH
25627: LD_INT 1
25629: NEG
25630: PUSH
25631: LD_INT 3
25633: NEG
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 0
25641: PUSH
25642: LD_INT 3
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: LD_INT 2
25655: NEG
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: LIST
25665: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25666: LD_ADDR_VAR 0 12
25670: PUSH
25671: LD_INT 2
25673: PUSH
25674: LD_INT 1
25676: NEG
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 3
25684: PUSH
25685: LD_INT 0
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 3
25694: PUSH
25695: LD_INT 1
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: LIST
25706: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25707: LD_ADDR_VAR 0 13
25711: PUSH
25712: LD_INT 3
25714: PUSH
25715: LD_INT 2
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 3
25724: PUSH
25725: LD_INT 3
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 2
25734: PUSH
25735: LD_INT 3
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: LIST
25746: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25747: LD_ADDR_VAR 0 14
25751: PUSH
25752: LD_INT 1
25754: PUSH
25755: LD_INT 3
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 0
25764: PUSH
25765: LD_INT 3
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 1
25774: NEG
25775: PUSH
25776: LD_INT 2
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: LIST
25787: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25788: LD_ADDR_VAR 0 15
25792: PUSH
25793: LD_INT 2
25795: NEG
25796: PUSH
25797: LD_INT 1
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 3
25806: NEG
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 3
25817: NEG
25818: PUSH
25819: LD_INT 1
25821: NEG
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: LIST
25831: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25832: LD_ADDR_VAR 0 16
25836: PUSH
25837: LD_INT 2
25839: NEG
25840: PUSH
25841: LD_INT 3
25843: NEG
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 3
25851: NEG
25852: PUSH
25853: LD_INT 2
25855: NEG
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 3
25863: NEG
25864: PUSH
25865: LD_INT 3
25867: NEG
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: LIST
25877: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25878: LD_ADDR_VAR 0 17
25882: PUSH
25883: LD_INT 1
25885: NEG
25886: PUSH
25887: LD_INT 3
25889: NEG
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: LD_INT 3
25900: NEG
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 1
25908: PUSH
25909: LD_INT 2
25911: NEG
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: LIST
25921: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25922: LD_ADDR_VAR 0 18
25926: PUSH
25927: LD_INT 2
25929: PUSH
25930: LD_INT 1
25932: NEG
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 3
25940: PUSH
25941: LD_INT 0
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 3
25950: PUSH
25951: LD_INT 1
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: LIST
25962: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25963: LD_ADDR_VAR 0 19
25967: PUSH
25968: LD_INT 3
25970: PUSH
25971: LD_INT 2
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 3
25980: PUSH
25981: LD_INT 3
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 2
25990: PUSH
25991: LD_INT 3
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: LIST
26002: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26003: LD_ADDR_VAR 0 20
26007: PUSH
26008: LD_INT 1
26010: PUSH
26011: LD_INT 3
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 0
26020: PUSH
26021: LD_INT 3
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 1
26030: NEG
26031: PUSH
26032: LD_INT 2
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: LIST
26043: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26044: LD_ADDR_VAR 0 21
26048: PUSH
26049: LD_INT 2
26051: NEG
26052: PUSH
26053: LD_INT 1
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 3
26062: NEG
26063: PUSH
26064: LD_INT 0
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 3
26073: NEG
26074: PUSH
26075: LD_INT 1
26077: NEG
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: LIST
26087: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26088: LD_ADDR_VAR 0 22
26092: PUSH
26093: LD_INT 2
26095: NEG
26096: PUSH
26097: LD_INT 3
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 3
26107: NEG
26108: PUSH
26109: LD_INT 2
26111: NEG
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 3
26119: NEG
26120: PUSH
26121: LD_INT 3
26123: NEG
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: LIST
26133: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26134: LD_ADDR_VAR 0 23
26138: PUSH
26139: LD_INT 0
26141: PUSH
26142: LD_INT 3
26144: NEG
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 1
26152: NEG
26153: PUSH
26154: LD_INT 4
26156: NEG
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: LD_INT 3
26167: NEG
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: LIST
26177: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26178: LD_ADDR_VAR 0 24
26182: PUSH
26183: LD_INT 3
26185: PUSH
26186: LD_INT 0
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 3
26195: PUSH
26196: LD_INT 1
26198: NEG
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 4
26206: PUSH
26207: LD_INT 1
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: LIST
26218: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26219: LD_ADDR_VAR 0 25
26223: PUSH
26224: LD_INT 3
26226: PUSH
26227: LD_INT 3
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 4
26236: PUSH
26237: LD_INT 3
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 3
26246: PUSH
26247: LD_INT 4
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: LIST
26258: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
26259: LD_ADDR_VAR 0 26
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: LD_INT 3
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 1
26276: PUSH
26277: LD_INT 4
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 1
26286: NEG
26287: PUSH
26288: LD_INT 3
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: LIST
26299: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
26300: LD_ADDR_VAR 0 27
26304: PUSH
26305: LD_INT 3
26307: NEG
26308: PUSH
26309: LD_INT 0
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 3
26318: NEG
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 4
26329: NEG
26330: PUSH
26331: LD_INT 1
26333: NEG
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: LIST
26343: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
26344: LD_ADDR_VAR 0 28
26348: PUSH
26349: LD_INT 3
26351: NEG
26352: PUSH
26353: LD_INT 3
26355: NEG
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 3
26363: NEG
26364: PUSH
26365: LD_INT 4
26367: NEG
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 4
26375: NEG
26376: PUSH
26377: LD_INT 3
26379: NEG
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: LIST
26389: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
26390: LD_ADDR_VAR 0 29
26394: PUSH
26395: LD_INT 1
26397: NEG
26398: PUSH
26399: LD_INT 3
26401: NEG
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 0
26409: PUSH
26410: LD_INT 3
26412: NEG
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: LD_INT 2
26423: NEG
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 1
26431: NEG
26432: PUSH
26433: LD_INT 4
26435: NEG
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 0
26443: PUSH
26444: LD_INT 4
26446: NEG
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 1
26454: PUSH
26455: LD_INT 3
26457: NEG
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 1
26465: NEG
26466: PUSH
26467: LD_INT 5
26469: NEG
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 0
26477: PUSH
26478: LD_INT 5
26480: NEG
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: LD_INT 4
26491: NEG
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: NEG
26500: PUSH
26501: LD_INT 6
26503: NEG
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 0
26511: PUSH
26512: LD_INT 6
26514: NEG
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: LD_INT 5
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
26545: LD_ADDR_VAR 0 30
26549: PUSH
26550: LD_INT 2
26552: PUSH
26553: LD_INT 1
26555: NEG
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 3
26563: PUSH
26564: LD_INT 0
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 3
26573: PUSH
26574: LD_INT 1
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 3
26583: PUSH
26584: LD_INT 1
26586: NEG
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 4
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 4
26604: PUSH
26605: LD_INT 1
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 4
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 5
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 5
26635: PUSH
26636: LD_INT 1
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 5
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 6
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 6
26666: PUSH
26667: LD_INT 1
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
26688: LD_ADDR_VAR 0 31
26692: PUSH
26693: LD_INT 3
26695: PUSH
26696: LD_INT 2
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 3
26705: PUSH
26706: LD_INT 3
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 2
26715: PUSH
26716: LD_INT 3
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 4
26725: PUSH
26726: LD_INT 3
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 4
26735: PUSH
26736: LD_INT 4
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 3
26745: PUSH
26746: LD_INT 4
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 5
26755: PUSH
26756: LD_INT 4
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 5
26765: PUSH
26766: LD_INT 5
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 4
26775: PUSH
26776: LD_INT 5
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 6
26785: PUSH
26786: LD_INT 5
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 6
26795: PUSH
26796: LD_INT 6
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 5
26805: PUSH
26806: LD_INT 6
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
26827: LD_ADDR_VAR 0 32
26831: PUSH
26832: LD_INT 1
26834: PUSH
26835: LD_INT 3
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: LD_INT 3
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 1
26854: NEG
26855: PUSH
26856: LD_INT 2
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: LD_INT 4
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 0
26875: PUSH
26876: LD_INT 4
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 1
26885: NEG
26886: PUSH
26887: LD_INT 3
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 1
26896: PUSH
26897: LD_INT 5
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 0
26906: PUSH
26907: LD_INT 5
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 1
26916: NEG
26917: PUSH
26918: LD_INT 4
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 1
26927: PUSH
26928: LD_INT 6
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: LD_INT 6
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: LD_INT 5
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
26970: LD_ADDR_VAR 0 33
26974: PUSH
26975: LD_INT 2
26977: NEG
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 3
26988: NEG
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 3
26999: NEG
27000: PUSH
27001: LD_INT 1
27003: NEG
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 3
27011: NEG
27012: PUSH
27013: LD_INT 1
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 4
27022: NEG
27023: PUSH
27024: LD_INT 0
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 4
27033: NEG
27034: PUSH
27035: LD_INT 1
27037: NEG
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 4
27045: NEG
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 5
27056: NEG
27057: PUSH
27058: LD_INT 0
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 5
27067: NEG
27068: PUSH
27069: LD_INT 1
27071: NEG
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 5
27079: NEG
27080: PUSH
27081: LD_INT 1
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 6
27090: NEG
27091: PUSH
27092: LD_INT 0
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 6
27101: NEG
27102: PUSH
27103: LD_INT 1
27105: NEG
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27125: LD_ADDR_VAR 0 34
27129: PUSH
27130: LD_INT 2
27132: NEG
27133: PUSH
27134: LD_INT 3
27136: NEG
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 3
27144: NEG
27145: PUSH
27146: LD_INT 2
27148: NEG
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 3
27156: NEG
27157: PUSH
27158: LD_INT 3
27160: NEG
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 3
27168: NEG
27169: PUSH
27170: LD_INT 4
27172: NEG
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 4
27180: NEG
27181: PUSH
27182: LD_INT 3
27184: NEG
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 4
27192: NEG
27193: PUSH
27194: LD_INT 4
27196: NEG
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 4
27204: NEG
27205: PUSH
27206: LD_INT 5
27208: NEG
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 5
27216: NEG
27217: PUSH
27218: LD_INT 4
27220: NEG
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 5
27228: NEG
27229: PUSH
27230: LD_INT 5
27232: NEG
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 5
27240: NEG
27241: PUSH
27242: LD_INT 6
27244: NEG
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 6
27252: NEG
27253: PUSH
27254: LD_INT 5
27256: NEG
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 6
27264: NEG
27265: PUSH
27266: LD_INT 6
27268: NEG
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
27288: LD_ADDR_VAR 0 41
27292: PUSH
27293: LD_INT 0
27295: PUSH
27296: LD_INT 2
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 1
27306: NEG
27307: PUSH
27308: LD_INT 3
27310: NEG
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 1
27318: PUSH
27319: LD_INT 2
27321: NEG
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: LIST
27331: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
27332: LD_ADDR_VAR 0 42
27336: PUSH
27337: LD_INT 2
27339: PUSH
27340: LD_INT 0
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 2
27349: PUSH
27350: LD_INT 1
27352: NEG
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 3
27360: PUSH
27361: LD_INT 1
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: LIST
27372: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
27373: LD_ADDR_VAR 0 43
27377: PUSH
27378: LD_INT 2
27380: PUSH
27381: LD_INT 2
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 3
27390: PUSH
27391: LD_INT 2
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 2
27400: PUSH
27401: LD_INT 3
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: LIST
27412: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
27413: LD_ADDR_VAR 0 44
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: LD_INT 2
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 1
27430: PUSH
27431: LD_INT 3
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 1
27440: NEG
27441: PUSH
27442: LD_INT 2
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: LIST
27453: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27454: LD_ADDR_VAR 0 45
27458: PUSH
27459: LD_INT 2
27461: NEG
27462: PUSH
27463: LD_INT 0
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 2
27472: NEG
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 3
27483: NEG
27484: PUSH
27485: LD_INT 1
27487: NEG
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: LIST
27497: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
27498: LD_ADDR_VAR 0 46
27502: PUSH
27503: LD_INT 2
27505: NEG
27506: PUSH
27507: LD_INT 2
27509: NEG
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 2
27517: NEG
27518: PUSH
27519: LD_INT 3
27521: NEG
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 3
27529: NEG
27530: PUSH
27531: LD_INT 2
27533: NEG
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: LIST
27543: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
27544: LD_ADDR_VAR 0 47
27548: PUSH
27549: LD_INT 2
27551: NEG
27552: PUSH
27553: LD_INT 3
27555: NEG
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: LD_INT 3
27567: NEG
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27577: LD_ADDR_VAR 0 48
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: LD_INT 2
27587: NEG
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 2
27595: PUSH
27596: LD_INT 1
27598: NEG
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
27608: LD_ADDR_VAR 0 49
27612: PUSH
27613: LD_INT 3
27615: PUSH
27616: LD_INT 1
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 3
27625: PUSH
27626: LD_INT 2
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
27637: LD_ADDR_VAR 0 50
27641: PUSH
27642: LD_INT 2
27644: PUSH
27645: LD_INT 3
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 1
27654: PUSH
27655: LD_INT 3
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27666: LD_ADDR_VAR 0 51
27670: PUSH
27671: LD_INT 1
27673: NEG
27674: PUSH
27675: LD_INT 2
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 2
27684: NEG
27685: PUSH
27686: LD_INT 1
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27697: LD_ADDR_VAR 0 52
27701: PUSH
27702: LD_INT 3
27704: NEG
27705: PUSH
27706: LD_INT 1
27708: NEG
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 3
27716: NEG
27717: PUSH
27718: LD_INT 2
27720: NEG
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27730: LD_ADDR_VAR 0 53
27734: PUSH
27735: LD_INT 1
27737: NEG
27738: PUSH
27739: LD_INT 3
27741: NEG
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 0
27749: PUSH
27750: LD_INT 3
27752: NEG
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: LD_INT 2
27763: NEG
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: LIST
27773: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27774: LD_ADDR_VAR 0 54
27778: PUSH
27779: LD_INT 2
27781: PUSH
27782: LD_INT 1
27784: NEG
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 3
27792: PUSH
27793: LD_INT 0
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 3
27802: PUSH
27803: LD_INT 1
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: LIST
27814: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27815: LD_ADDR_VAR 0 55
27819: PUSH
27820: LD_INT 3
27822: PUSH
27823: LD_INT 2
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 3
27832: PUSH
27833: LD_INT 3
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 2
27842: PUSH
27843: LD_INT 3
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: LIST
27854: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27855: LD_ADDR_VAR 0 56
27859: PUSH
27860: LD_INT 1
27862: PUSH
27863: LD_INT 3
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 0
27872: PUSH
27873: LD_INT 3
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 1
27882: NEG
27883: PUSH
27884: LD_INT 2
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: LIST
27895: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27896: LD_ADDR_VAR 0 57
27900: PUSH
27901: LD_INT 2
27903: NEG
27904: PUSH
27905: LD_INT 1
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 3
27914: NEG
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 3
27925: NEG
27926: PUSH
27927: LD_INT 1
27929: NEG
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: LIST
27939: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27940: LD_ADDR_VAR 0 58
27944: PUSH
27945: LD_INT 2
27947: NEG
27948: PUSH
27949: LD_INT 3
27951: NEG
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 3
27959: NEG
27960: PUSH
27961: LD_INT 2
27963: NEG
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 3
27971: NEG
27972: PUSH
27973: LD_INT 3
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: LIST
27985: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
27986: LD_ADDR_VAR 0 59
27990: PUSH
27991: LD_INT 1
27993: NEG
27994: PUSH
27995: LD_INT 2
27997: NEG
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 0
28005: PUSH
28006: LD_INT 2
28008: NEG
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 1
28016: PUSH
28017: LD_INT 1
28019: NEG
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: LIST
28029: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28030: LD_ADDR_VAR 0 60
28034: PUSH
28035: LD_INT 1
28037: PUSH
28038: LD_INT 1
28040: NEG
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 2
28048: PUSH
28049: LD_INT 0
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 2
28058: PUSH
28059: LD_INT 1
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: LIST
28070: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28071: LD_ADDR_VAR 0 61
28075: PUSH
28076: LD_INT 2
28078: PUSH
28079: LD_INT 1
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 2
28088: PUSH
28089: LD_INT 2
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 1
28098: PUSH
28099: LD_INT 2
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: LIST
28110: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28111: LD_ADDR_VAR 0 62
28115: PUSH
28116: LD_INT 1
28118: PUSH
28119: LD_INT 2
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 1
28138: NEG
28139: PUSH
28140: LD_INT 1
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: LIST
28151: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28152: LD_ADDR_VAR 0 63
28156: PUSH
28157: LD_INT 1
28159: NEG
28160: PUSH
28161: LD_INT 1
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 2
28170: NEG
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 2
28181: NEG
28182: PUSH
28183: LD_INT 1
28185: NEG
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: LIST
28195: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28196: LD_ADDR_VAR 0 64
28200: PUSH
28201: LD_INT 1
28203: NEG
28204: PUSH
28205: LD_INT 2
28207: NEG
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 2
28215: NEG
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 2
28227: NEG
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: LIST
28241: ST_TO_ADDR
// end ; 2 :
28242: GO 31508
28244: LD_INT 2
28246: DOUBLE
28247: EQUAL
28248: IFTRUE 28252
28250: GO 31507
28252: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
28253: LD_ADDR_VAR 0 29
28257: PUSH
28258: LD_INT 4
28260: PUSH
28261: LD_INT 0
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 4
28270: PUSH
28271: LD_INT 1
28273: NEG
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 5
28281: PUSH
28282: LD_INT 0
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 5
28291: PUSH
28292: LD_INT 1
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 4
28301: PUSH
28302: LD_INT 1
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 3
28311: PUSH
28312: LD_INT 0
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 3
28321: PUSH
28322: LD_INT 1
28324: NEG
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 3
28332: PUSH
28333: LD_INT 2
28335: NEG
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 5
28343: PUSH
28344: LD_INT 2
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 3
28353: PUSH
28354: LD_INT 3
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 3
28363: PUSH
28364: LD_INT 2
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 4
28373: PUSH
28374: LD_INT 3
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 4
28383: PUSH
28384: LD_INT 4
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 3
28393: PUSH
28394: LD_INT 4
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 2
28403: PUSH
28404: LD_INT 3
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 2
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 4
28423: PUSH
28424: LD_INT 2
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 2
28433: PUSH
28434: LD_INT 4
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 0
28443: PUSH
28444: LD_INT 4
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: LD_INT 3
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: LD_INT 4
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 1
28473: PUSH
28474: LD_INT 5
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 0
28483: PUSH
28484: LD_INT 5
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 1
28493: NEG
28494: PUSH
28495: LD_INT 4
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 1
28504: NEG
28505: PUSH
28506: LD_INT 3
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 2
28515: PUSH
28516: LD_INT 5
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 2
28525: NEG
28526: PUSH
28527: LD_INT 3
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 3
28536: NEG
28537: PUSH
28538: LD_INT 0
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 3
28547: NEG
28548: PUSH
28549: LD_INT 1
28551: NEG
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 2
28559: NEG
28560: PUSH
28561: LD_INT 0
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 2
28570: NEG
28571: PUSH
28572: LD_INT 1
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 3
28581: NEG
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 4
28592: NEG
28593: PUSH
28594: LD_INT 0
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 4
28603: NEG
28604: PUSH
28605: LD_INT 1
28607: NEG
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 4
28615: NEG
28616: PUSH
28617: LD_INT 2
28619: NEG
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 2
28627: NEG
28628: PUSH
28629: LD_INT 2
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 4
28638: NEG
28639: PUSH
28640: LD_INT 4
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 4
28650: NEG
28651: PUSH
28652: LD_INT 5
28654: NEG
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 3
28662: NEG
28663: PUSH
28664: LD_INT 4
28666: NEG
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 3
28674: NEG
28675: PUSH
28676: LD_INT 3
28678: NEG
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 4
28686: NEG
28687: PUSH
28688: LD_INT 3
28690: NEG
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 5
28698: NEG
28699: PUSH
28700: LD_INT 4
28702: NEG
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 5
28710: NEG
28711: PUSH
28712: LD_INT 5
28714: NEG
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 3
28722: NEG
28723: PUSH
28724: LD_INT 5
28726: NEG
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 5
28734: NEG
28735: PUSH
28736: LD_INT 3
28738: NEG
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
28791: LD_ADDR_VAR 0 30
28795: PUSH
28796: LD_INT 4
28798: PUSH
28799: LD_INT 4
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 4
28808: PUSH
28809: LD_INT 3
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 5
28818: PUSH
28819: LD_INT 4
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 5
28828: PUSH
28829: LD_INT 5
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 4
28838: PUSH
28839: LD_INT 5
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 3
28848: PUSH
28849: LD_INT 4
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 3
28858: PUSH
28859: LD_INT 3
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 5
28868: PUSH
28869: LD_INT 3
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 3
28878: PUSH
28879: LD_INT 5
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: LD_INT 3
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: LD_INT 2
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: LD_INT 3
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 1
28918: PUSH
28919: LD_INT 4
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 0
28928: PUSH
28929: LD_INT 4
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: LD_INT 3
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 1
28949: NEG
28950: PUSH
28951: LD_INT 2
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 2
28960: PUSH
28961: LD_INT 4
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 2
28970: NEG
28971: PUSH
28972: LD_INT 2
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 4
28981: NEG
28982: PUSH
28983: LD_INT 0
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 4
28992: NEG
28993: PUSH
28994: LD_INT 1
28996: NEG
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 3
29004: NEG
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 3
29015: NEG
29016: PUSH
29017: LD_INT 1
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 4
29026: NEG
29027: PUSH
29028: LD_INT 1
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 5
29037: NEG
29038: PUSH
29039: LD_INT 0
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 5
29048: NEG
29049: PUSH
29050: LD_INT 1
29052: NEG
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 5
29060: NEG
29061: PUSH
29062: LD_INT 2
29064: NEG
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 3
29072: NEG
29073: PUSH
29074: LD_INT 2
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 3
29083: NEG
29084: PUSH
29085: LD_INT 3
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 3
29095: NEG
29096: PUSH
29097: LD_INT 4
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 2
29107: NEG
29108: PUSH
29109: LD_INT 3
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 2
29119: NEG
29120: PUSH
29121: LD_INT 2
29123: NEG
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 3
29131: NEG
29132: PUSH
29133: LD_INT 2
29135: NEG
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 4
29143: NEG
29144: PUSH
29145: LD_INT 3
29147: NEG
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 4
29155: NEG
29156: PUSH
29157: LD_INT 4
29159: NEG
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 2
29167: NEG
29168: PUSH
29169: LD_INT 4
29171: NEG
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 4
29179: NEG
29180: PUSH
29181: LD_INT 2
29183: NEG
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 0
29191: PUSH
29192: LD_INT 4
29194: NEG
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 0
29202: PUSH
29203: LD_INT 5
29205: NEG
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 1
29213: PUSH
29214: LD_INT 4
29216: NEG
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: LD_INT 3
29227: NEG
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 0
29235: PUSH
29236: LD_INT 3
29238: NEG
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: LD_INT 4
29250: NEG
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 1
29258: NEG
29259: PUSH
29260: LD_INT 5
29262: NEG
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 2
29270: PUSH
29271: LD_INT 3
29273: NEG
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 2
29281: NEG
29282: PUSH
29283: LD_INT 5
29285: NEG
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
29338: LD_ADDR_VAR 0 31
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: LD_INT 4
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 0
29355: PUSH
29356: LD_INT 3
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: LD_INT 4
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 1
29375: PUSH
29376: LD_INT 5
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 0
29385: PUSH
29386: LD_INT 5
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 1
29395: NEG
29396: PUSH
29397: LD_INT 4
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 1
29406: NEG
29407: PUSH
29408: LD_INT 3
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 2
29417: PUSH
29418: LD_INT 5
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 2
29427: NEG
29428: PUSH
29429: LD_INT 3
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 3
29438: NEG
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 3
29449: NEG
29450: PUSH
29451: LD_INT 1
29453: NEG
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 2
29461: NEG
29462: PUSH
29463: LD_INT 0
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 2
29472: NEG
29473: PUSH
29474: LD_INT 1
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 3
29483: NEG
29484: PUSH
29485: LD_INT 1
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 4
29494: NEG
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 4
29505: NEG
29506: PUSH
29507: LD_INT 1
29509: NEG
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 4
29517: NEG
29518: PUSH
29519: LD_INT 2
29521: NEG
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 2
29529: NEG
29530: PUSH
29531: LD_INT 2
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 4
29540: NEG
29541: PUSH
29542: LD_INT 4
29544: NEG
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 4
29552: NEG
29553: PUSH
29554: LD_INT 5
29556: NEG
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 3
29564: NEG
29565: PUSH
29566: LD_INT 4
29568: NEG
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 3
29576: NEG
29577: PUSH
29578: LD_INT 3
29580: NEG
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 4
29588: NEG
29589: PUSH
29590: LD_INT 3
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 5
29600: NEG
29601: PUSH
29602: LD_INT 4
29604: NEG
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 5
29612: NEG
29613: PUSH
29614: LD_INT 5
29616: NEG
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 3
29624: NEG
29625: PUSH
29626: LD_INT 5
29628: NEG
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 5
29636: NEG
29637: PUSH
29638: LD_INT 3
29640: NEG
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: LD_INT 3
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 0
29659: PUSH
29660: LD_INT 4
29662: NEG
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 1
29670: PUSH
29671: LD_INT 3
29673: NEG
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 1
29681: PUSH
29682: LD_INT 2
29684: NEG
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: LD_INT 2
29695: NEG
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 1
29703: NEG
29704: PUSH
29705: LD_INT 3
29707: NEG
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 1
29715: NEG
29716: PUSH
29717: LD_INT 4
29719: NEG
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 2
29727: PUSH
29728: LD_INT 2
29730: NEG
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 2
29738: NEG
29739: PUSH
29740: LD_INT 4
29742: NEG
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 4
29750: PUSH
29751: LD_INT 0
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 4
29760: PUSH
29761: LD_INT 1
29763: NEG
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 5
29771: PUSH
29772: LD_INT 0
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 5
29781: PUSH
29782: LD_INT 1
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 4
29791: PUSH
29792: LD_INT 1
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 3
29801: PUSH
29802: LD_INT 0
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 3
29811: PUSH
29812: LD_INT 1
29814: NEG
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 3
29822: PUSH
29823: LD_INT 2
29825: NEG
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 5
29833: PUSH
29834: LD_INT 2
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
29888: LD_ADDR_VAR 0 32
29892: PUSH
29893: LD_INT 4
29895: NEG
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 4
29906: NEG
29907: PUSH
29908: LD_INT 1
29910: NEG
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 3
29918: NEG
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 3
29929: NEG
29930: PUSH
29931: LD_INT 1
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 4
29940: NEG
29941: PUSH
29942: LD_INT 1
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 5
29951: NEG
29952: PUSH
29953: LD_INT 0
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 5
29962: NEG
29963: PUSH
29964: LD_INT 1
29966: NEG
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 5
29974: NEG
29975: PUSH
29976: LD_INT 2
29978: NEG
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 3
29986: NEG
29987: PUSH
29988: LD_INT 2
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 3
29997: NEG
29998: PUSH
29999: LD_INT 3
30001: NEG
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 3
30009: NEG
30010: PUSH
30011: LD_INT 4
30013: NEG
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 2
30021: NEG
30022: PUSH
30023: LD_INT 3
30025: NEG
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 2
30033: NEG
30034: PUSH
30035: LD_INT 2
30037: NEG
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 3
30045: NEG
30046: PUSH
30047: LD_INT 2
30049: NEG
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 4
30057: NEG
30058: PUSH
30059: LD_INT 3
30061: NEG
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 4
30069: NEG
30070: PUSH
30071: LD_INT 4
30073: NEG
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 2
30081: NEG
30082: PUSH
30083: LD_INT 4
30085: NEG
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 4
30093: NEG
30094: PUSH
30095: LD_INT 2
30097: NEG
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 0
30105: PUSH
30106: LD_INT 4
30108: NEG
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 0
30116: PUSH
30117: LD_INT 5
30119: NEG
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: LD_INT 4
30130: NEG
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 1
30138: PUSH
30139: LD_INT 3
30141: NEG
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 0
30149: PUSH
30150: LD_INT 3
30152: NEG
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 1
30160: NEG
30161: PUSH
30162: LD_INT 4
30164: NEG
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 1
30172: NEG
30173: PUSH
30174: LD_INT 5
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 2
30184: PUSH
30185: LD_INT 3
30187: NEG
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 2
30195: NEG
30196: PUSH
30197: LD_INT 5
30199: NEG
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 3
30207: PUSH
30208: LD_INT 0
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 3
30217: PUSH
30218: LD_INT 1
30220: NEG
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 4
30228: PUSH
30229: LD_INT 0
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 4
30238: PUSH
30239: LD_INT 1
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 3
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 2
30258: PUSH
30259: LD_INT 0
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 2
30268: PUSH
30269: LD_INT 1
30271: NEG
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 2
30279: PUSH
30280: LD_INT 2
30282: NEG
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 4
30290: PUSH
30291: LD_INT 2
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 4
30300: PUSH
30301: LD_INT 4
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 4
30310: PUSH
30311: LD_INT 3
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 5
30320: PUSH
30321: LD_INT 4
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 5
30330: PUSH
30331: LD_INT 5
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 4
30340: PUSH
30341: LD_INT 5
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 3
30350: PUSH
30351: LD_INT 4
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 3
30360: PUSH
30361: LD_INT 3
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 5
30370: PUSH
30371: LD_INT 3
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 3
30380: PUSH
30381: LD_INT 5
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
30435: LD_ADDR_VAR 0 33
30439: PUSH
30440: LD_INT 4
30442: NEG
30443: PUSH
30444: LD_INT 4
30446: NEG
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 4
30454: NEG
30455: PUSH
30456: LD_INT 5
30458: NEG
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 3
30466: NEG
30467: PUSH
30468: LD_INT 4
30470: NEG
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 3
30478: NEG
30479: PUSH
30480: LD_INT 3
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 4
30490: NEG
30491: PUSH
30492: LD_INT 3
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 5
30502: NEG
30503: PUSH
30504: LD_INT 4
30506: NEG
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 5
30514: NEG
30515: PUSH
30516: LD_INT 5
30518: NEG
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 3
30526: NEG
30527: PUSH
30528: LD_INT 5
30530: NEG
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 5
30538: NEG
30539: PUSH
30540: LD_INT 3
30542: NEG
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 0
30550: PUSH
30551: LD_INT 3
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 0
30561: PUSH
30562: LD_INT 4
30564: NEG
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: LD_INT 3
30575: NEG
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 1
30583: PUSH
30584: LD_INT 2
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: LD_INT 2
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 1
30605: NEG
30606: PUSH
30607: LD_INT 3
30609: NEG
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 1
30617: NEG
30618: PUSH
30619: LD_INT 4
30621: NEG
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 2
30629: PUSH
30630: LD_INT 2
30632: NEG
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 2
30640: NEG
30641: PUSH
30642: LD_INT 4
30644: NEG
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 4
30652: PUSH
30653: LD_INT 0
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 4
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 5
30673: PUSH
30674: LD_INT 0
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 5
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 4
30693: PUSH
30694: LD_INT 1
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 3
30703: PUSH
30704: LD_INT 0
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 3
30713: PUSH
30714: LD_INT 1
30716: NEG
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 3
30724: PUSH
30725: LD_INT 2
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 5
30735: PUSH
30736: LD_INT 2
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 3
30745: PUSH
30746: LD_INT 3
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 3
30755: PUSH
30756: LD_INT 2
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 4
30765: PUSH
30766: LD_INT 3
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 4
30775: PUSH
30776: LD_INT 4
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 3
30785: PUSH
30786: LD_INT 4
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 2
30795: PUSH
30796: LD_INT 3
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 2
30805: PUSH
30806: LD_INT 2
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 4
30815: PUSH
30816: LD_INT 2
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 2
30825: PUSH
30826: LD_INT 4
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: LD_INT 4
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 0
30845: PUSH
30846: LD_INT 3
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: LD_INT 4
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: LD_INT 5
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 0
30875: PUSH
30876: LD_INT 5
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 1
30885: NEG
30886: PUSH
30887: LD_INT 4
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 1
30896: NEG
30897: PUSH
30898: LD_INT 3
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 2
30907: PUSH
30908: LD_INT 5
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 2
30917: NEG
30918: PUSH
30919: LD_INT 3
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
30973: LD_ADDR_VAR 0 34
30977: PUSH
30978: LD_INT 0
30980: PUSH
30981: LD_INT 4
30983: NEG
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 0
30991: PUSH
30992: LD_INT 5
30994: NEG
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 1
31002: PUSH
31003: LD_INT 4
31005: NEG
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 1
31013: PUSH
31014: LD_INT 3
31016: NEG
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 0
31024: PUSH
31025: LD_INT 3
31027: NEG
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 1
31035: NEG
31036: PUSH
31037: LD_INT 4
31039: NEG
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 1
31047: NEG
31048: PUSH
31049: LD_INT 5
31051: NEG
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 2
31059: PUSH
31060: LD_INT 3
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 2
31070: NEG
31071: PUSH
31072: LD_INT 5
31074: NEG
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 3
31082: PUSH
31083: LD_INT 0
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 3
31092: PUSH
31093: LD_INT 1
31095: NEG
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 4
31103: PUSH
31104: LD_INT 0
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 4
31113: PUSH
31114: LD_INT 1
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 3
31123: PUSH
31124: LD_INT 1
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 2
31133: PUSH
31134: LD_INT 0
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 2
31143: PUSH
31144: LD_INT 1
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 2
31154: PUSH
31155: LD_INT 2
31157: NEG
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 4
31165: PUSH
31166: LD_INT 2
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 4
31175: PUSH
31176: LD_INT 4
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 4
31185: PUSH
31186: LD_INT 3
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 5
31195: PUSH
31196: LD_INT 4
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 5
31205: PUSH
31206: LD_INT 5
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 4
31215: PUSH
31216: LD_INT 5
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 3
31225: PUSH
31226: LD_INT 4
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 3
31235: PUSH
31236: LD_INT 3
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 5
31245: PUSH
31246: LD_INT 3
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 3
31255: PUSH
31256: LD_INT 5
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: LD_INT 3
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 0
31275: PUSH
31276: LD_INT 2
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 1
31285: PUSH
31286: LD_INT 3
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: LD_INT 4
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 0
31305: PUSH
31306: LD_INT 4
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 1
31315: NEG
31316: PUSH
31317: LD_INT 3
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 1
31326: NEG
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 2
31337: PUSH
31338: LD_INT 4
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 2
31347: NEG
31348: PUSH
31349: LD_INT 2
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 4
31358: NEG
31359: PUSH
31360: LD_INT 0
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 4
31369: NEG
31370: PUSH
31371: LD_INT 1
31373: NEG
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 3
31381: NEG
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 3
31392: NEG
31393: PUSH
31394: LD_INT 1
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 4
31403: NEG
31404: PUSH
31405: LD_INT 1
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 5
31414: NEG
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 5
31425: NEG
31426: PUSH
31427: LD_INT 1
31429: NEG
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 5
31437: NEG
31438: PUSH
31439: LD_INT 2
31441: NEG
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 3
31449: NEG
31450: PUSH
31451: LD_INT 2
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: ST_TO_ADDR
// end ; end ;
31505: GO 31508
31507: POP
// case btype of b_depot , b_warehouse :
31508: LD_VAR 0 1
31512: PUSH
31513: LD_INT 0
31515: DOUBLE
31516: EQUAL
31517: IFTRUE 31527
31519: LD_INT 1
31521: DOUBLE
31522: EQUAL
31523: IFTRUE 31527
31525: GO 31728
31527: POP
// case nation of nation_american :
31528: LD_VAR 0 5
31532: PUSH
31533: LD_INT 1
31535: DOUBLE
31536: EQUAL
31537: IFTRUE 31541
31539: GO 31597
31541: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
31542: LD_ADDR_VAR 0 9
31546: PUSH
31547: LD_VAR 0 11
31551: PUSH
31552: LD_VAR 0 12
31556: PUSH
31557: LD_VAR 0 13
31561: PUSH
31562: LD_VAR 0 14
31566: PUSH
31567: LD_VAR 0 15
31571: PUSH
31572: LD_VAR 0 16
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: PUSH
31585: LD_VAR 0 4
31589: PUSH
31590: LD_INT 1
31592: PLUS
31593: ARRAY
31594: ST_TO_ADDR
31595: GO 31726
31597: LD_INT 2
31599: DOUBLE
31600: EQUAL
31601: IFTRUE 31605
31603: GO 31661
31605: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
31606: LD_ADDR_VAR 0 9
31610: PUSH
31611: LD_VAR 0 17
31615: PUSH
31616: LD_VAR 0 18
31620: PUSH
31621: LD_VAR 0 19
31625: PUSH
31626: LD_VAR 0 20
31630: PUSH
31631: LD_VAR 0 21
31635: PUSH
31636: LD_VAR 0 22
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: PUSH
31649: LD_VAR 0 4
31653: PUSH
31654: LD_INT 1
31656: PLUS
31657: ARRAY
31658: ST_TO_ADDR
31659: GO 31726
31661: LD_INT 3
31663: DOUBLE
31664: EQUAL
31665: IFTRUE 31669
31667: GO 31725
31669: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
31670: LD_ADDR_VAR 0 9
31674: PUSH
31675: LD_VAR 0 23
31679: PUSH
31680: LD_VAR 0 24
31684: PUSH
31685: LD_VAR 0 25
31689: PUSH
31690: LD_VAR 0 26
31694: PUSH
31695: LD_VAR 0 27
31699: PUSH
31700: LD_VAR 0 28
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: PUSH
31713: LD_VAR 0 4
31717: PUSH
31718: LD_INT 1
31720: PLUS
31721: ARRAY
31722: ST_TO_ADDR
31723: GO 31726
31725: POP
31726: GO 32281
31728: LD_INT 2
31730: DOUBLE
31731: EQUAL
31732: IFTRUE 31742
31734: LD_INT 3
31736: DOUBLE
31737: EQUAL
31738: IFTRUE 31742
31740: GO 31798
31742: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
31743: LD_ADDR_VAR 0 9
31747: PUSH
31748: LD_VAR 0 29
31752: PUSH
31753: LD_VAR 0 30
31757: PUSH
31758: LD_VAR 0 31
31762: PUSH
31763: LD_VAR 0 32
31767: PUSH
31768: LD_VAR 0 33
31772: PUSH
31773: LD_VAR 0 34
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: PUSH
31786: LD_VAR 0 4
31790: PUSH
31791: LD_INT 1
31793: PLUS
31794: ARRAY
31795: ST_TO_ADDR
31796: GO 32281
31798: LD_INT 16
31800: DOUBLE
31801: EQUAL
31802: IFTRUE 31860
31804: LD_INT 17
31806: DOUBLE
31807: EQUAL
31808: IFTRUE 31860
31810: LD_INT 18
31812: DOUBLE
31813: EQUAL
31814: IFTRUE 31860
31816: LD_INT 19
31818: DOUBLE
31819: EQUAL
31820: IFTRUE 31860
31822: LD_INT 22
31824: DOUBLE
31825: EQUAL
31826: IFTRUE 31860
31828: LD_INT 20
31830: DOUBLE
31831: EQUAL
31832: IFTRUE 31860
31834: LD_INT 21
31836: DOUBLE
31837: EQUAL
31838: IFTRUE 31860
31840: LD_INT 23
31842: DOUBLE
31843: EQUAL
31844: IFTRUE 31860
31846: LD_INT 24
31848: DOUBLE
31849: EQUAL
31850: IFTRUE 31860
31852: LD_INT 25
31854: DOUBLE
31855: EQUAL
31856: IFTRUE 31860
31858: GO 31916
31860: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
31861: LD_ADDR_VAR 0 9
31865: PUSH
31866: LD_VAR 0 35
31870: PUSH
31871: LD_VAR 0 36
31875: PUSH
31876: LD_VAR 0 37
31880: PUSH
31881: LD_VAR 0 38
31885: PUSH
31886: LD_VAR 0 39
31890: PUSH
31891: LD_VAR 0 40
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: PUSH
31904: LD_VAR 0 4
31908: PUSH
31909: LD_INT 1
31911: PLUS
31912: ARRAY
31913: ST_TO_ADDR
31914: GO 32281
31916: LD_INT 6
31918: DOUBLE
31919: EQUAL
31920: IFTRUE 31972
31922: LD_INT 7
31924: DOUBLE
31925: EQUAL
31926: IFTRUE 31972
31928: LD_INT 8
31930: DOUBLE
31931: EQUAL
31932: IFTRUE 31972
31934: LD_INT 13
31936: DOUBLE
31937: EQUAL
31938: IFTRUE 31972
31940: LD_INT 12
31942: DOUBLE
31943: EQUAL
31944: IFTRUE 31972
31946: LD_INT 15
31948: DOUBLE
31949: EQUAL
31950: IFTRUE 31972
31952: LD_INT 11
31954: DOUBLE
31955: EQUAL
31956: IFTRUE 31972
31958: LD_INT 14
31960: DOUBLE
31961: EQUAL
31962: IFTRUE 31972
31964: LD_INT 10
31966: DOUBLE
31967: EQUAL
31968: IFTRUE 31972
31970: GO 32028
31972: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
31973: LD_ADDR_VAR 0 9
31977: PUSH
31978: LD_VAR 0 41
31982: PUSH
31983: LD_VAR 0 42
31987: PUSH
31988: LD_VAR 0 43
31992: PUSH
31993: LD_VAR 0 44
31997: PUSH
31998: LD_VAR 0 45
32002: PUSH
32003: LD_VAR 0 46
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: PUSH
32016: LD_VAR 0 4
32020: PUSH
32021: LD_INT 1
32023: PLUS
32024: ARRAY
32025: ST_TO_ADDR
32026: GO 32281
32028: LD_INT 36
32030: DOUBLE
32031: EQUAL
32032: IFTRUE 32036
32034: GO 32092
32036: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32037: LD_ADDR_VAR 0 9
32041: PUSH
32042: LD_VAR 0 47
32046: PUSH
32047: LD_VAR 0 48
32051: PUSH
32052: LD_VAR 0 49
32056: PUSH
32057: LD_VAR 0 50
32061: PUSH
32062: LD_VAR 0 51
32066: PUSH
32067: LD_VAR 0 52
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: PUSH
32080: LD_VAR 0 4
32084: PUSH
32085: LD_INT 1
32087: PLUS
32088: ARRAY
32089: ST_TO_ADDR
32090: GO 32281
32092: LD_INT 4
32094: DOUBLE
32095: EQUAL
32096: IFTRUE 32118
32098: LD_INT 5
32100: DOUBLE
32101: EQUAL
32102: IFTRUE 32118
32104: LD_INT 34
32106: DOUBLE
32107: EQUAL
32108: IFTRUE 32118
32110: LD_INT 37
32112: DOUBLE
32113: EQUAL
32114: IFTRUE 32118
32116: GO 32174
32118: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32119: LD_ADDR_VAR 0 9
32123: PUSH
32124: LD_VAR 0 53
32128: PUSH
32129: LD_VAR 0 54
32133: PUSH
32134: LD_VAR 0 55
32138: PUSH
32139: LD_VAR 0 56
32143: PUSH
32144: LD_VAR 0 57
32148: PUSH
32149: LD_VAR 0 58
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: PUSH
32162: LD_VAR 0 4
32166: PUSH
32167: LD_INT 1
32169: PLUS
32170: ARRAY
32171: ST_TO_ADDR
32172: GO 32281
32174: LD_INT 31
32176: DOUBLE
32177: EQUAL
32178: IFTRUE 32224
32180: LD_INT 32
32182: DOUBLE
32183: EQUAL
32184: IFTRUE 32224
32186: LD_INT 33
32188: DOUBLE
32189: EQUAL
32190: IFTRUE 32224
32192: LD_INT 27
32194: DOUBLE
32195: EQUAL
32196: IFTRUE 32224
32198: LD_INT 26
32200: DOUBLE
32201: EQUAL
32202: IFTRUE 32224
32204: LD_INT 28
32206: DOUBLE
32207: EQUAL
32208: IFTRUE 32224
32210: LD_INT 29
32212: DOUBLE
32213: EQUAL
32214: IFTRUE 32224
32216: LD_INT 30
32218: DOUBLE
32219: EQUAL
32220: IFTRUE 32224
32222: GO 32280
32224: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
32225: LD_ADDR_VAR 0 9
32229: PUSH
32230: LD_VAR 0 59
32234: PUSH
32235: LD_VAR 0 60
32239: PUSH
32240: LD_VAR 0 61
32244: PUSH
32245: LD_VAR 0 62
32249: PUSH
32250: LD_VAR 0 63
32254: PUSH
32255: LD_VAR 0 64
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: PUSH
32268: LD_VAR 0 4
32272: PUSH
32273: LD_INT 1
32275: PLUS
32276: ARRAY
32277: ST_TO_ADDR
32278: GO 32281
32280: POP
// temp_list2 = [ ] ;
32281: LD_ADDR_VAR 0 10
32285: PUSH
32286: EMPTY
32287: ST_TO_ADDR
// for i in temp_list do
32288: LD_ADDR_VAR 0 8
32292: PUSH
32293: LD_VAR 0 9
32297: PUSH
32298: FOR_IN
32299: IFFALSE 32351
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
32301: LD_ADDR_VAR 0 10
32305: PUSH
32306: LD_VAR 0 10
32310: PUSH
32311: LD_VAR 0 8
32315: PUSH
32316: LD_INT 1
32318: ARRAY
32319: PUSH
32320: LD_VAR 0 2
32324: PLUS
32325: PUSH
32326: LD_VAR 0 8
32330: PUSH
32331: LD_INT 2
32333: ARRAY
32334: PUSH
32335: LD_VAR 0 3
32339: PLUS
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: EMPTY
32346: LIST
32347: ADD
32348: ST_TO_ADDR
32349: GO 32298
32351: POP
32352: POP
// result = temp_list2 ;
32353: LD_ADDR_VAR 0 7
32357: PUSH
32358: LD_VAR 0 10
32362: ST_TO_ADDR
// end ;
32363: LD_VAR 0 7
32367: RET
// export function EnemyInRange ( unit , dist ) ; begin
32368: LD_INT 0
32370: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
32371: LD_ADDR_VAR 0 3
32375: PUSH
32376: LD_VAR 0 1
32380: PPUSH
32381: CALL_OW 255
32385: PPUSH
32386: LD_VAR 0 1
32390: PPUSH
32391: CALL_OW 250
32395: PPUSH
32396: LD_VAR 0 1
32400: PPUSH
32401: CALL_OW 251
32405: PPUSH
32406: LD_VAR 0 2
32410: PPUSH
32411: CALL 6169 0 4
32415: PUSH
32416: LD_INT 4
32418: ARRAY
32419: ST_TO_ADDR
// end ;
32420: LD_VAR 0 3
32424: RET
// export function PlayerSeeMe ( unit ) ; begin
32425: LD_INT 0
32427: PPUSH
// result := See ( your_side , unit ) ;
32428: LD_ADDR_VAR 0 2
32432: PUSH
32433: LD_OWVAR 2
32437: PPUSH
32438: LD_VAR 0 1
32442: PPUSH
32443: CALL_OW 292
32447: ST_TO_ADDR
// end ;
32448: LD_VAR 0 2
32452: RET
// export function ReverseDir ( unit ) ; begin
32453: LD_INT 0
32455: PPUSH
// if not unit then
32456: LD_VAR 0 1
32460: NOT
32461: IFFALSE 32465
// exit ;
32463: GO 32488
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
32465: LD_ADDR_VAR 0 2
32469: PUSH
32470: LD_VAR 0 1
32474: PPUSH
32475: CALL_OW 254
32479: PUSH
32480: LD_INT 3
32482: PLUS
32483: PUSH
32484: LD_INT 6
32486: MOD
32487: ST_TO_ADDR
// end ;
32488: LD_VAR 0 2
32492: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
32493: LD_INT 0
32495: PPUSH
32496: PPUSH
32497: PPUSH
32498: PPUSH
32499: PPUSH
// if not hexes then
32500: LD_VAR 0 2
32504: NOT
32505: IFFALSE 32509
// exit ;
32507: GO 32657
// dist := 9999 ;
32509: LD_ADDR_VAR 0 5
32513: PUSH
32514: LD_INT 9999
32516: ST_TO_ADDR
// for i = 1 to hexes do
32517: LD_ADDR_VAR 0 4
32521: PUSH
32522: DOUBLE
32523: LD_INT 1
32525: DEC
32526: ST_TO_ADDR
32527: LD_VAR 0 2
32531: PUSH
32532: FOR_TO
32533: IFFALSE 32645
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
32535: LD_VAR 0 1
32539: PPUSH
32540: LD_VAR 0 2
32544: PUSH
32545: LD_VAR 0 4
32549: ARRAY
32550: PUSH
32551: LD_INT 1
32553: ARRAY
32554: PPUSH
32555: LD_VAR 0 2
32559: PUSH
32560: LD_VAR 0 4
32564: ARRAY
32565: PUSH
32566: LD_INT 2
32568: ARRAY
32569: PPUSH
32570: CALL_OW 297
32574: PUSH
32575: LD_VAR 0 5
32579: LESS
32580: IFFALSE 32643
// begin hex := hexes [ i ] ;
32582: LD_ADDR_VAR 0 7
32586: PUSH
32587: LD_VAR 0 2
32591: PUSH
32592: LD_VAR 0 4
32596: ARRAY
32597: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32598: LD_ADDR_VAR 0 5
32602: PUSH
32603: LD_VAR 0 1
32607: PPUSH
32608: LD_VAR 0 2
32612: PUSH
32613: LD_VAR 0 4
32617: ARRAY
32618: PUSH
32619: LD_INT 1
32621: ARRAY
32622: PPUSH
32623: LD_VAR 0 2
32627: PUSH
32628: LD_VAR 0 4
32632: ARRAY
32633: PUSH
32634: LD_INT 2
32636: ARRAY
32637: PPUSH
32638: CALL_OW 297
32642: ST_TO_ADDR
// end ; end ;
32643: GO 32532
32645: POP
32646: POP
// result := hex ;
32647: LD_ADDR_VAR 0 3
32651: PUSH
32652: LD_VAR 0 7
32656: ST_TO_ADDR
// end ;
32657: LD_VAR 0 3
32661: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
32662: LD_INT 0
32664: PPUSH
32665: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
32666: LD_VAR 0 1
32670: NOT
32671: PUSH
32672: LD_VAR 0 1
32676: PUSH
32677: LD_INT 21
32679: PUSH
32680: LD_INT 2
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 23
32689: PUSH
32690: LD_INT 2
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PPUSH
32701: CALL_OW 69
32705: IN
32706: NOT
32707: OR
32708: IFFALSE 32712
// exit ;
32710: GO 32759
// for i = 1 to 3 do
32712: LD_ADDR_VAR 0 3
32716: PUSH
32717: DOUBLE
32718: LD_INT 1
32720: DEC
32721: ST_TO_ADDR
32722: LD_INT 3
32724: PUSH
32725: FOR_TO
32726: IFFALSE 32757
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
32728: LD_VAR 0 1
32732: PPUSH
32733: CALL_OW 250
32737: PPUSH
32738: LD_VAR 0 1
32742: PPUSH
32743: CALL_OW 251
32747: PPUSH
32748: LD_INT 1
32750: PPUSH
32751: CALL_OW 453
32755: GO 32725
32757: POP
32758: POP
// end ;
32759: LD_VAR 0 2
32763: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
32764: LD_INT 0
32766: PPUSH
32767: PPUSH
32768: PPUSH
32769: PPUSH
32770: PPUSH
32771: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
32772: LD_VAR 0 1
32776: NOT
32777: PUSH
32778: LD_VAR 0 2
32782: NOT
32783: OR
32784: PUSH
32785: LD_VAR 0 1
32789: PPUSH
32790: CALL_OW 314
32794: OR
32795: IFFALSE 32799
// exit ;
32797: GO 33240
// x := GetX ( enemy_unit ) ;
32799: LD_ADDR_VAR 0 7
32803: PUSH
32804: LD_VAR 0 2
32808: PPUSH
32809: CALL_OW 250
32813: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
32814: LD_ADDR_VAR 0 8
32818: PUSH
32819: LD_VAR 0 2
32823: PPUSH
32824: CALL_OW 251
32828: ST_TO_ADDR
// if not x or not y then
32829: LD_VAR 0 7
32833: NOT
32834: PUSH
32835: LD_VAR 0 8
32839: NOT
32840: OR
32841: IFFALSE 32845
// exit ;
32843: GO 33240
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
32845: LD_ADDR_VAR 0 6
32849: PUSH
32850: LD_VAR 0 7
32854: PPUSH
32855: LD_INT 0
32857: PPUSH
32858: LD_INT 4
32860: PPUSH
32861: CALL_OW 272
32865: PUSH
32866: LD_VAR 0 8
32870: PPUSH
32871: LD_INT 0
32873: PPUSH
32874: LD_INT 4
32876: PPUSH
32877: CALL_OW 273
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_VAR 0 7
32890: PPUSH
32891: LD_INT 1
32893: PPUSH
32894: LD_INT 4
32896: PPUSH
32897: CALL_OW 272
32901: PUSH
32902: LD_VAR 0 8
32906: PPUSH
32907: LD_INT 1
32909: PPUSH
32910: LD_INT 4
32912: PPUSH
32913: CALL_OW 273
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_VAR 0 7
32926: PPUSH
32927: LD_INT 2
32929: PPUSH
32930: LD_INT 4
32932: PPUSH
32933: CALL_OW 272
32937: PUSH
32938: LD_VAR 0 8
32942: PPUSH
32943: LD_INT 2
32945: PPUSH
32946: LD_INT 4
32948: PPUSH
32949: CALL_OW 273
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_VAR 0 7
32962: PPUSH
32963: LD_INT 3
32965: PPUSH
32966: LD_INT 4
32968: PPUSH
32969: CALL_OW 272
32973: PUSH
32974: LD_VAR 0 8
32978: PPUSH
32979: LD_INT 3
32981: PPUSH
32982: LD_INT 4
32984: PPUSH
32985: CALL_OW 273
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_VAR 0 7
32998: PPUSH
32999: LD_INT 4
33001: PPUSH
33002: LD_INT 4
33004: PPUSH
33005: CALL_OW 272
33009: PUSH
33010: LD_VAR 0 8
33014: PPUSH
33015: LD_INT 4
33017: PPUSH
33018: LD_INT 4
33020: PPUSH
33021: CALL_OW 273
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_VAR 0 7
33034: PPUSH
33035: LD_INT 5
33037: PPUSH
33038: LD_INT 4
33040: PPUSH
33041: CALL_OW 272
33045: PUSH
33046: LD_VAR 0 8
33050: PPUSH
33051: LD_INT 5
33053: PPUSH
33054: LD_INT 4
33056: PPUSH
33057: CALL_OW 273
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: ST_TO_ADDR
// for i = tmp downto 1 do
33074: LD_ADDR_VAR 0 4
33078: PUSH
33079: DOUBLE
33080: LD_VAR 0 6
33084: INC
33085: ST_TO_ADDR
33086: LD_INT 1
33088: PUSH
33089: FOR_DOWNTO
33090: IFFALSE 33191
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33092: LD_VAR 0 6
33096: PUSH
33097: LD_VAR 0 4
33101: ARRAY
33102: PUSH
33103: LD_INT 1
33105: ARRAY
33106: PPUSH
33107: LD_VAR 0 6
33111: PUSH
33112: LD_VAR 0 4
33116: ARRAY
33117: PUSH
33118: LD_INT 2
33120: ARRAY
33121: PPUSH
33122: CALL_OW 488
33126: NOT
33127: PUSH
33128: LD_VAR 0 6
33132: PUSH
33133: LD_VAR 0 4
33137: ARRAY
33138: PUSH
33139: LD_INT 1
33141: ARRAY
33142: PPUSH
33143: LD_VAR 0 6
33147: PUSH
33148: LD_VAR 0 4
33152: ARRAY
33153: PUSH
33154: LD_INT 2
33156: ARRAY
33157: PPUSH
33158: CALL_OW 428
33162: PUSH
33163: LD_INT 0
33165: NONEQUAL
33166: OR
33167: IFFALSE 33189
// tmp := Delete ( tmp , i ) ;
33169: LD_ADDR_VAR 0 6
33173: PUSH
33174: LD_VAR 0 6
33178: PPUSH
33179: LD_VAR 0 4
33183: PPUSH
33184: CALL_OW 3
33188: ST_TO_ADDR
33189: GO 33089
33191: POP
33192: POP
// j := GetClosestHex ( unit , tmp ) ;
33193: LD_ADDR_VAR 0 5
33197: PUSH
33198: LD_VAR 0 1
33202: PPUSH
33203: LD_VAR 0 6
33207: PPUSH
33208: CALL 32493 0 2
33212: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
33213: LD_VAR 0 1
33217: PPUSH
33218: LD_VAR 0 5
33222: PUSH
33223: LD_INT 1
33225: ARRAY
33226: PPUSH
33227: LD_VAR 0 5
33231: PUSH
33232: LD_INT 2
33234: ARRAY
33235: PPUSH
33236: CALL_OW 111
// end ;
33240: LD_VAR 0 3
33244: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
33245: LD_INT 0
33247: PPUSH
33248: PPUSH
33249: PPUSH
// uc_side = 0 ;
33250: LD_ADDR_OWVAR 20
33254: PUSH
33255: LD_INT 0
33257: ST_TO_ADDR
// uc_nation = 0 ;
33258: LD_ADDR_OWVAR 21
33262: PUSH
33263: LD_INT 0
33265: ST_TO_ADDR
// InitHc_All ( ) ;
33266: CALL_OW 584
// InitVc ;
33270: CALL_OW 20
// if mastodonts then
33274: LD_VAR 0 6
33278: IFFALSE 33345
// for i = 1 to mastodonts do
33280: LD_ADDR_VAR 0 11
33284: PUSH
33285: DOUBLE
33286: LD_INT 1
33288: DEC
33289: ST_TO_ADDR
33290: LD_VAR 0 6
33294: PUSH
33295: FOR_TO
33296: IFFALSE 33343
// begin vc_chassis := 31 ;
33298: LD_ADDR_OWVAR 37
33302: PUSH
33303: LD_INT 31
33305: ST_TO_ADDR
// vc_control := control_rider ;
33306: LD_ADDR_OWVAR 38
33310: PUSH
33311: LD_INT 4
33313: ST_TO_ADDR
// animal := CreateVehicle ;
33314: LD_ADDR_VAR 0 12
33318: PUSH
33319: CALL_OW 45
33323: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33324: LD_VAR 0 12
33328: PPUSH
33329: LD_VAR 0 8
33333: PPUSH
33334: LD_INT 0
33336: PPUSH
33337: CALL 35533 0 3
// end ;
33341: GO 33295
33343: POP
33344: POP
// if horses then
33345: LD_VAR 0 5
33349: IFFALSE 33416
// for i = 1 to horses do
33351: LD_ADDR_VAR 0 11
33355: PUSH
33356: DOUBLE
33357: LD_INT 1
33359: DEC
33360: ST_TO_ADDR
33361: LD_VAR 0 5
33365: PUSH
33366: FOR_TO
33367: IFFALSE 33414
// begin hc_class := 21 ;
33369: LD_ADDR_OWVAR 28
33373: PUSH
33374: LD_INT 21
33376: ST_TO_ADDR
// hc_gallery :=  ;
33377: LD_ADDR_OWVAR 33
33381: PUSH
33382: LD_STRING 
33384: ST_TO_ADDR
// animal := CreateHuman ;
33385: LD_ADDR_VAR 0 12
33389: PUSH
33390: CALL_OW 44
33394: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33395: LD_VAR 0 12
33399: PPUSH
33400: LD_VAR 0 8
33404: PPUSH
33405: LD_INT 0
33407: PPUSH
33408: CALL 35533 0 3
// end ;
33412: GO 33366
33414: POP
33415: POP
// if birds then
33416: LD_VAR 0 1
33420: IFFALSE 33487
// for i = 1 to birds do
33422: LD_ADDR_VAR 0 11
33426: PUSH
33427: DOUBLE
33428: LD_INT 1
33430: DEC
33431: ST_TO_ADDR
33432: LD_VAR 0 1
33436: PUSH
33437: FOR_TO
33438: IFFALSE 33485
// begin hc_class = 18 ;
33440: LD_ADDR_OWVAR 28
33444: PUSH
33445: LD_INT 18
33447: ST_TO_ADDR
// hc_gallery =  ;
33448: LD_ADDR_OWVAR 33
33452: PUSH
33453: LD_STRING 
33455: ST_TO_ADDR
// animal := CreateHuman ;
33456: LD_ADDR_VAR 0 12
33460: PUSH
33461: CALL_OW 44
33465: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33466: LD_VAR 0 12
33470: PPUSH
33471: LD_VAR 0 8
33475: PPUSH
33476: LD_INT 0
33478: PPUSH
33479: CALL 35533 0 3
// end ;
33483: GO 33437
33485: POP
33486: POP
// if tigers then
33487: LD_VAR 0 2
33491: IFFALSE 33575
// for i = 1 to tigers do
33493: LD_ADDR_VAR 0 11
33497: PUSH
33498: DOUBLE
33499: LD_INT 1
33501: DEC
33502: ST_TO_ADDR
33503: LD_VAR 0 2
33507: PUSH
33508: FOR_TO
33509: IFFALSE 33573
// begin hc_class = class_tiger ;
33511: LD_ADDR_OWVAR 28
33515: PUSH
33516: LD_INT 14
33518: ST_TO_ADDR
// hc_gallery =  ;
33519: LD_ADDR_OWVAR 33
33523: PUSH
33524: LD_STRING 
33526: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
33527: LD_ADDR_OWVAR 35
33531: PUSH
33532: LD_INT 7
33534: NEG
33535: PPUSH
33536: LD_INT 7
33538: PPUSH
33539: CALL_OW 12
33543: ST_TO_ADDR
// animal := CreateHuman ;
33544: LD_ADDR_VAR 0 12
33548: PUSH
33549: CALL_OW 44
33553: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33554: LD_VAR 0 12
33558: PPUSH
33559: LD_VAR 0 8
33563: PPUSH
33564: LD_INT 0
33566: PPUSH
33567: CALL 35533 0 3
// end ;
33571: GO 33508
33573: POP
33574: POP
// if apemans then
33575: LD_VAR 0 3
33579: IFFALSE 33702
// for i = 1 to apemans do
33581: LD_ADDR_VAR 0 11
33585: PUSH
33586: DOUBLE
33587: LD_INT 1
33589: DEC
33590: ST_TO_ADDR
33591: LD_VAR 0 3
33595: PUSH
33596: FOR_TO
33597: IFFALSE 33700
// begin hc_class = class_apeman ;
33599: LD_ADDR_OWVAR 28
33603: PUSH
33604: LD_INT 12
33606: ST_TO_ADDR
// hc_gallery =  ;
33607: LD_ADDR_OWVAR 33
33611: PUSH
33612: LD_STRING 
33614: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
33615: LD_ADDR_OWVAR 35
33619: PUSH
33620: LD_INT 5
33622: NEG
33623: PPUSH
33624: LD_INT 5
33626: PPUSH
33627: CALL_OW 12
33631: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
33632: LD_ADDR_OWVAR 31
33636: PUSH
33637: LD_INT 1
33639: PPUSH
33640: LD_INT 3
33642: PPUSH
33643: CALL_OW 12
33647: PUSH
33648: LD_INT 1
33650: PPUSH
33651: LD_INT 3
33653: PPUSH
33654: CALL_OW 12
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: LD_INT 0
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: ST_TO_ADDR
// animal := CreateHuman ;
33671: LD_ADDR_VAR 0 12
33675: PUSH
33676: CALL_OW 44
33680: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33681: LD_VAR 0 12
33685: PPUSH
33686: LD_VAR 0 8
33690: PPUSH
33691: LD_INT 0
33693: PPUSH
33694: CALL 35533 0 3
// end ;
33698: GO 33596
33700: POP
33701: POP
// if enchidnas then
33702: LD_VAR 0 4
33706: IFFALSE 33773
// for i = 1 to enchidnas do
33708: LD_ADDR_VAR 0 11
33712: PUSH
33713: DOUBLE
33714: LD_INT 1
33716: DEC
33717: ST_TO_ADDR
33718: LD_VAR 0 4
33722: PUSH
33723: FOR_TO
33724: IFFALSE 33771
// begin hc_class = 13 ;
33726: LD_ADDR_OWVAR 28
33730: PUSH
33731: LD_INT 13
33733: ST_TO_ADDR
// hc_gallery =  ;
33734: LD_ADDR_OWVAR 33
33738: PUSH
33739: LD_STRING 
33741: ST_TO_ADDR
// animal := CreateHuman ;
33742: LD_ADDR_VAR 0 12
33746: PUSH
33747: CALL_OW 44
33751: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33752: LD_VAR 0 12
33756: PPUSH
33757: LD_VAR 0 8
33761: PPUSH
33762: LD_INT 0
33764: PPUSH
33765: CALL 35533 0 3
// end ;
33769: GO 33723
33771: POP
33772: POP
// if fishes then
33773: LD_VAR 0 7
33777: IFFALSE 33844
// for i = 1 to fishes do
33779: LD_ADDR_VAR 0 11
33783: PUSH
33784: DOUBLE
33785: LD_INT 1
33787: DEC
33788: ST_TO_ADDR
33789: LD_VAR 0 7
33793: PUSH
33794: FOR_TO
33795: IFFALSE 33842
// begin hc_class = 20 ;
33797: LD_ADDR_OWVAR 28
33801: PUSH
33802: LD_INT 20
33804: ST_TO_ADDR
// hc_gallery =  ;
33805: LD_ADDR_OWVAR 33
33809: PUSH
33810: LD_STRING 
33812: ST_TO_ADDR
// animal := CreateHuman ;
33813: LD_ADDR_VAR 0 12
33817: PUSH
33818: CALL_OW 44
33822: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
33823: LD_VAR 0 12
33827: PPUSH
33828: LD_VAR 0 9
33832: PPUSH
33833: LD_INT 0
33835: PPUSH
33836: CALL 35533 0 3
// end ;
33840: GO 33794
33842: POP
33843: POP
// end ;
33844: LD_VAR 0 10
33848: RET
// export function WantHeal ( sci , unit ) ; begin
33849: LD_INT 0
33851: PPUSH
// if GetTaskList ( sci ) > 0 then
33852: LD_VAR 0 1
33856: PPUSH
33857: CALL_OW 437
33861: PUSH
33862: LD_INT 0
33864: GREATER
33865: IFFALSE 33935
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
33867: LD_VAR 0 1
33871: PPUSH
33872: CALL_OW 437
33876: PUSH
33877: LD_INT 1
33879: ARRAY
33880: PUSH
33881: LD_INT 1
33883: ARRAY
33884: PUSH
33885: LD_STRING l
33887: EQUAL
33888: PUSH
33889: LD_VAR 0 1
33893: PPUSH
33894: CALL_OW 437
33898: PUSH
33899: LD_INT 1
33901: ARRAY
33902: PUSH
33903: LD_INT 4
33905: ARRAY
33906: PUSH
33907: LD_VAR 0 2
33911: EQUAL
33912: AND
33913: IFFALSE 33925
// result := true else
33915: LD_ADDR_VAR 0 3
33919: PUSH
33920: LD_INT 1
33922: ST_TO_ADDR
33923: GO 33933
// result := false ;
33925: LD_ADDR_VAR 0 3
33929: PUSH
33930: LD_INT 0
33932: ST_TO_ADDR
// end else
33933: GO 33943
// result := false ;
33935: LD_ADDR_VAR 0 3
33939: PUSH
33940: LD_INT 0
33942: ST_TO_ADDR
// end ;
33943: LD_VAR 0 3
33947: RET
// export function HealTarget ( sci ) ; begin
33948: LD_INT 0
33950: PPUSH
// if not sci then
33951: LD_VAR 0 1
33955: NOT
33956: IFFALSE 33960
// exit ;
33958: GO 34025
// result := 0 ;
33960: LD_ADDR_VAR 0 2
33964: PUSH
33965: LD_INT 0
33967: ST_TO_ADDR
// if GetTaskList ( sci ) then
33968: LD_VAR 0 1
33972: PPUSH
33973: CALL_OW 437
33977: IFFALSE 34025
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
33979: LD_VAR 0 1
33983: PPUSH
33984: CALL_OW 437
33988: PUSH
33989: LD_INT 1
33991: ARRAY
33992: PUSH
33993: LD_INT 1
33995: ARRAY
33996: PUSH
33997: LD_STRING l
33999: EQUAL
34000: IFFALSE 34025
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
34002: LD_ADDR_VAR 0 2
34006: PUSH
34007: LD_VAR 0 1
34011: PPUSH
34012: CALL_OW 437
34016: PUSH
34017: LD_INT 1
34019: ARRAY
34020: PUSH
34021: LD_INT 4
34023: ARRAY
34024: ST_TO_ADDR
// end ;
34025: LD_VAR 0 2
34029: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
34030: LD_INT 0
34032: PPUSH
34033: PPUSH
34034: PPUSH
34035: PPUSH
// if not base_units then
34036: LD_VAR 0 1
34040: NOT
34041: IFFALSE 34045
// exit ;
34043: GO 34132
// result := false ;
34045: LD_ADDR_VAR 0 2
34049: PUSH
34050: LD_INT 0
34052: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
34053: LD_ADDR_VAR 0 5
34057: PUSH
34058: LD_VAR 0 1
34062: PPUSH
34063: LD_INT 21
34065: PUSH
34066: LD_INT 3
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PPUSH
34073: CALL_OW 72
34077: ST_TO_ADDR
// if not tmp then
34078: LD_VAR 0 5
34082: NOT
34083: IFFALSE 34087
// exit ;
34085: GO 34132
// for i in tmp do
34087: LD_ADDR_VAR 0 3
34091: PUSH
34092: LD_VAR 0 5
34096: PUSH
34097: FOR_IN
34098: IFFALSE 34130
// begin result := EnemyInRange ( i , 22 ) ;
34100: LD_ADDR_VAR 0 2
34104: PUSH
34105: LD_VAR 0 3
34109: PPUSH
34110: LD_INT 22
34112: PPUSH
34113: CALL 32368 0 2
34117: ST_TO_ADDR
// if result then
34118: LD_VAR 0 2
34122: IFFALSE 34128
// exit ;
34124: POP
34125: POP
34126: GO 34132
// end ;
34128: GO 34097
34130: POP
34131: POP
// end ;
34132: LD_VAR 0 2
34136: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
34137: LD_INT 0
34139: PPUSH
34140: PPUSH
// if not units then
34141: LD_VAR 0 1
34145: NOT
34146: IFFALSE 34150
// exit ;
34148: GO 34220
// result := [ ] ;
34150: LD_ADDR_VAR 0 3
34154: PUSH
34155: EMPTY
34156: ST_TO_ADDR
// for i in units do
34157: LD_ADDR_VAR 0 4
34161: PUSH
34162: LD_VAR 0 1
34166: PUSH
34167: FOR_IN
34168: IFFALSE 34218
// if GetTag ( i ) = tag then
34170: LD_VAR 0 4
34174: PPUSH
34175: CALL_OW 110
34179: PUSH
34180: LD_VAR 0 2
34184: EQUAL
34185: IFFALSE 34216
// result := Insert ( result , result + 1 , i ) ;
34187: LD_ADDR_VAR 0 3
34191: PUSH
34192: LD_VAR 0 3
34196: PPUSH
34197: LD_VAR 0 3
34201: PUSH
34202: LD_INT 1
34204: PLUS
34205: PPUSH
34206: LD_VAR 0 4
34210: PPUSH
34211: CALL_OW 2
34215: ST_TO_ADDR
34216: GO 34167
34218: POP
34219: POP
// end ;
34220: LD_VAR 0 3
34224: RET
// export function IsDriver ( un ) ; begin
34225: LD_INT 0
34227: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
34228: LD_ADDR_VAR 0 2
34232: PUSH
34233: LD_VAR 0 1
34237: PUSH
34238: LD_INT 55
34240: PUSH
34241: EMPTY
34242: LIST
34243: PPUSH
34244: CALL_OW 69
34248: IN
34249: ST_TO_ADDR
// end ;
34250: LD_VAR 0 2
34254: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
34255: LD_INT 0
34257: PPUSH
34258: PPUSH
// list := [ ] ;
34259: LD_ADDR_VAR 0 5
34263: PUSH
34264: EMPTY
34265: ST_TO_ADDR
// case d of 0 :
34266: LD_VAR 0 3
34270: PUSH
34271: LD_INT 0
34273: DOUBLE
34274: EQUAL
34275: IFTRUE 34279
34277: GO 34412
34279: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
34280: LD_ADDR_VAR 0 5
34284: PUSH
34285: LD_VAR 0 1
34289: PUSH
34290: LD_INT 4
34292: MINUS
34293: PUSH
34294: LD_VAR 0 2
34298: PUSH
34299: LD_INT 4
34301: MINUS
34302: PUSH
34303: LD_INT 2
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: LIST
34310: PUSH
34311: LD_VAR 0 1
34315: PUSH
34316: LD_INT 3
34318: MINUS
34319: PUSH
34320: LD_VAR 0 2
34324: PUSH
34325: LD_INT 1
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: LIST
34332: PUSH
34333: LD_VAR 0 1
34337: PUSH
34338: LD_INT 4
34340: PLUS
34341: PUSH
34342: LD_VAR 0 2
34346: PUSH
34347: LD_INT 4
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: LIST
34354: PUSH
34355: LD_VAR 0 1
34359: PUSH
34360: LD_INT 3
34362: PLUS
34363: PUSH
34364: LD_VAR 0 2
34368: PUSH
34369: LD_INT 3
34371: PLUS
34372: PUSH
34373: LD_INT 5
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: LIST
34380: PUSH
34381: LD_VAR 0 1
34385: PUSH
34386: LD_VAR 0 2
34390: PUSH
34391: LD_INT 4
34393: PLUS
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: LIST
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: ST_TO_ADDR
// end ; 1 :
34410: GO 35110
34412: LD_INT 1
34414: DOUBLE
34415: EQUAL
34416: IFTRUE 34420
34418: GO 34553
34420: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
34421: LD_ADDR_VAR 0 5
34425: PUSH
34426: LD_VAR 0 1
34430: PUSH
34431: LD_VAR 0 2
34435: PUSH
34436: LD_INT 4
34438: MINUS
34439: PUSH
34440: LD_INT 3
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: LIST
34447: PUSH
34448: LD_VAR 0 1
34452: PUSH
34453: LD_INT 3
34455: MINUS
34456: PUSH
34457: LD_VAR 0 2
34461: PUSH
34462: LD_INT 3
34464: MINUS
34465: PUSH
34466: LD_INT 2
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: LIST
34473: PUSH
34474: LD_VAR 0 1
34478: PUSH
34479: LD_INT 4
34481: MINUS
34482: PUSH
34483: LD_VAR 0 2
34487: PUSH
34488: LD_INT 1
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: LIST
34495: PUSH
34496: LD_VAR 0 1
34500: PUSH
34501: LD_VAR 0 2
34505: PUSH
34506: LD_INT 3
34508: PLUS
34509: PUSH
34510: LD_INT 0
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: LIST
34517: PUSH
34518: LD_VAR 0 1
34522: PUSH
34523: LD_INT 4
34525: PLUS
34526: PUSH
34527: LD_VAR 0 2
34531: PUSH
34532: LD_INT 4
34534: PLUS
34535: PUSH
34536: LD_INT 5
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: LIST
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: ST_TO_ADDR
// end ; 2 :
34551: GO 35110
34553: LD_INT 2
34555: DOUBLE
34556: EQUAL
34557: IFTRUE 34561
34559: GO 34690
34561: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
34562: LD_ADDR_VAR 0 5
34566: PUSH
34567: LD_VAR 0 1
34571: PUSH
34572: LD_VAR 0 2
34576: PUSH
34577: LD_INT 3
34579: MINUS
34580: PUSH
34581: LD_INT 3
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: PUSH
34589: LD_VAR 0 1
34593: PUSH
34594: LD_INT 4
34596: PLUS
34597: PUSH
34598: LD_VAR 0 2
34602: PUSH
34603: LD_INT 4
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: LIST
34610: PUSH
34611: LD_VAR 0 1
34615: PUSH
34616: LD_VAR 0 2
34620: PUSH
34621: LD_INT 4
34623: PLUS
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: PUSH
34633: LD_VAR 0 1
34637: PUSH
34638: LD_INT 3
34640: MINUS
34641: PUSH
34642: LD_VAR 0 2
34646: PUSH
34647: LD_INT 1
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: LIST
34654: PUSH
34655: LD_VAR 0 1
34659: PUSH
34660: LD_INT 4
34662: MINUS
34663: PUSH
34664: LD_VAR 0 2
34668: PUSH
34669: LD_INT 4
34671: MINUS
34672: PUSH
34673: LD_INT 2
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: LIST
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: ST_TO_ADDR
// end ; 3 :
34688: GO 35110
34690: LD_INT 3
34692: DOUBLE
34693: EQUAL
34694: IFTRUE 34698
34696: GO 34831
34698: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
34699: LD_ADDR_VAR 0 5
34703: PUSH
34704: LD_VAR 0 1
34708: PUSH
34709: LD_INT 3
34711: PLUS
34712: PUSH
34713: LD_VAR 0 2
34717: PUSH
34718: LD_INT 4
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: LIST
34725: PUSH
34726: LD_VAR 0 1
34730: PUSH
34731: LD_INT 4
34733: PLUS
34734: PUSH
34735: LD_VAR 0 2
34739: PUSH
34740: LD_INT 4
34742: PLUS
34743: PUSH
34744: LD_INT 5
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: LIST
34751: PUSH
34752: LD_VAR 0 1
34756: PUSH
34757: LD_INT 4
34759: MINUS
34760: PUSH
34761: LD_VAR 0 2
34765: PUSH
34766: LD_INT 1
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: LIST
34773: PUSH
34774: LD_VAR 0 1
34778: PUSH
34779: LD_VAR 0 2
34783: PUSH
34784: LD_INT 4
34786: MINUS
34787: PUSH
34788: LD_INT 3
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: LIST
34795: PUSH
34796: LD_VAR 0 1
34800: PUSH
34801: LD_INT 3
34803: MINUS
34804: PUSH
34805: LD_VAR 0 2
34809: PUSH
34810: LD_INT 3
34812: MINUS
34813: PUSH
34814: LD_INT 2
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: ST_TO_ADDR
// end ; 4 :
34829: GO 35110
34831: LD_INT 4
34833: DOUBLE
34834: EQUAL
34835: IFTRUE 34839
34837: GO 34972
34839: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
34840: LD_ADDR_VAR 0 5
34844: PUSH
34845: LD_VAR 0 1
34849: PUSH
34850: LD_VAR 0 2
34854: PUSH
34855: LD_INT 4
34857: PLUS
34858: PUSH
34859: LD_INT 0
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: LIST
34866: PUSH
34867: LD_VAR 0 1
34871: PUSH
34872: LD_INT 3
34874: PLUS
34875: PUSH
34876: LD_VAR 0 2
34880: PUSH
34881: LD_INT 3
34883: PLUS
34884: PUSH
34885: LD_INT 5
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: PUSH
34893: LD_VAR 0 1
34897: PUSH
34898: LD_INT 4
34900: PLUS
34901: PUSH
34902: LD_VAR 0 2
34906: PUSH
34907: LD_INT 4
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: LIST
34914: PUSH
34915: LD_VAR 0 1
34919: PUSH
34920: LD_VAR 0 2
34924: PUSH
34925: LD_INT 3
34927: MINUS
34928: PUSH
34929: LD_INT 3
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: LIST
34936: PUSH
34937: LD_VAR 0 1
34941: PUSH
34942: LD_INT 4
34944: MINUS
34945: PUSH
34946: LD_VAR 0 2
34950: PUSH
34951: LD_INT 4
34953: MINUS
34954: PUSH
34955: LD_INT 2
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: LIST
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: ST_TO_ADDR
// end ; 5 :
34970: GO 35110
34972: LD_INT 5
34974: DOUBLE
34975: EQUAL
34976: IFTRUE 34980
34978: GO 35109
34980: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
34981: LD_ADDR_VAR 0 5
34985: PUSH
34986: LD_VAR 0 1
34990: PUSH
34991: LD_INT 4
34993: MINUS
34994: PUSH
34995: LD_VAR 0 2
34999: PUSH
35000: LD_INT 1
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: LIST
35007: PUSH
35008: LD_VAR 0 1
35012: PUSH
35013: LD_VAR 0 2
35017: PUSH
35018: LD_INT 4
35020: MINUS
35021: PUSH
35022: LD_INT 3
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: LIST
35029: PUSH
35030: LD_VAR 0 1
35034: PUSH
35035: LD_INT 4
35037: PLUS
35038: PUSH
35039: LD_VAR 0 2
35043: PUSH
35044: LD_INT 4
35046: PLUS
35047: PUSH
35048: LD_INT 5
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: LIST
35055: PUSH
35056: LD_VAR 0 1
35060: PUSH
35061: LD_INT 3
35063: PLUS
35064: PUSH
35065: LD_VAR 0 2
35069: PUSH
35070: LD_INT 4
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: LIST
35077: PUSH
35078: LD_VAR 0 1
35082: PUSH
35083: LD_VAR 0 2
35087: PUSH
35088: LD_INT 3
35090: PLUS
35091: PUSH
35092: LD_INT 0
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: LIST
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: ST_TO_ADDR
// end ; end ;
35107: GO 35110
35109: POP
// result := list ;
35110: LD_ADDR_VAR 0 4
35114: PUSH
35115: LD_VAR 0 5
35119: ST_TO_ADDR
// end ;
35120: LD_VAR 0 4
35124: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
35125: LD_INT 0
35127: PPUSH
35128: PPUSH
35129: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
35130: LD_VAR 0 1
35134: NOT
35135: PUSH
35136: LD_VAR 0 2
35140: PUSH
35141: LD_INT 1
35143: PUSH
35144: LD_INT 2
35146: PUSH
35147: LD_INT 3
35149: PUSH
35150: LD_INT 4
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: IN
35159: NOT
35160: OR
35161: IFFALSE 35165
// exit ;
35163: GO 35257
// tmp := [ ] ;
35165: LD_ADDR_VAR 0 5
35169: PUSH
35170: EMPTY
35171: ST_TO_ADDR
// for i in units do
35172: LD_ADDR_VAR 0 4
35176: PUSH
35177: LD_VAR 0 1
35181: PUSH
35182: FOR_IN
35183: IFFALSE 35226
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
35185: LD_ADDR_VAR 0 5
35189: PUSH
35190: LD_VAR 0 5
35194: PPUSH
35195: LD_VAR 0 5
35199: PUSH
35200: LD_INT 1
35202: PLUS
35203: PPUSH
35204: LD_VAR 0 4
35208: PPUSH
35209: LD_VAR 0 2
35213: PPUSH
35214: CALL_OW 259
35218: PPUSH
35219: CALL_OW 2
35223: ST_TO_ADDR
35224: GO 35182
35226: POP
35227: POP
// if not tmp then
35228: LD_VAR 0 5
35232: NOT
35233: IFFALSE 35237
// exit ;
35235: GO 35257
// result := SortListByListDesc ( units , tmp ) ;
35237: LD_ADDR_VAR 0 3
35241: PUSH
35242: LD_VAR 0 1
35246: PPUSH
35247: LD_VAR 0 5
35251: PPUSH
35252: CALL_OW 77
35256: ST_TO_ADDR
// end ;
35257: LD_VAR 0 3
35261: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
35262: LD_INT 0
35264: PPUSH
35265: PPUSH
35266: PPUSH
// result := false ;
35267: LD_ADDR_VAR 0 3
35271: PUSH
35272: LD_INT 0
35274: ST_TO_ADDR
// x := GetX ( building ) ;
35275: LD_ADDR_VAR 0 4
35279: PUSH
35280: LD_VAR 0 2
35284: PPUSH
35285: CALL_OW 250
35289: ST_TO_ADDR
// y := GetY ( building ) ;
35290: LD_ADDR_VAR 0 5
35294: PUSH
35295: LD_VAR 0 2
35299: PPUSH
35300: CALL_OW 251
35304: ST_TO_ADDR
// if not building or not x or not y then
35305: LD_VAR 0 2
35309: NOT
35310: PUSH
35311: LD_VAR 0 4
35315: NOT
35316: OR
35317: PUSH
35318: LD_VAR 0 5
35322: NOT
35323: OR
35324: IFFALSE 35328
// exit ;
35326: GO 35420
// if GetTaskList ( unit ) then
35328: LD_VAR 0 1
35332: PPUSH
35333: CALL_OW 437
35337: IFFALSE 35420
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
35339: LD_STRING e
35341: PUSH
35342: LD_VAR 0 1
35346: PPUSH
35347: CALL_OW 437
35351: PUSH
35352: LD_INT 1
35354: ARRAY
35355: PUSH
35356: LD_INT 1
35358: ARRAY
35359: EQUAL
35360: PUSH
35361: LD_VAR 0 4
35365: PUSH
35366: LD_VAR 0 1
35370: PPUSH
35371: CALL_OW 437
35375: PUSH
35376: LD_INT 1
35378: ARRAY
35379: PUSH
35380: LD_INT 2
35382: ARRAY
35383: EQUAL
35384: AND
35385: PUSH
35386: LD_VAR 0 5
35390: PUSH
35391: LD_VAR 0 1
35395: PPUSH
35396: CALL_OW 437
35400: PUSH
35401: LD_INT 1
35403: ARRAY
35404: PUSH
35405: LD_INT 3
35407: ARRAY
35408: EQUAL
35409: AND
35410: IFFALSE 35420
// result := true end ;
35412: LD_ADDR_VAR 0 3
35416: PUSH
35417: LD_INT 1
35419: ST_TO_ADDR
// end ;
35420: LD_VAR 0 3
35424: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
35425: LD_INT 0
35427: PPUSH
// result := false ;
35428: LD_ADDR_VAR 0 4
35432: PUSH
35433: LD_INT 0
35435: ST_TO_ADDR
// if GetTaskList ( unit ) then
35436: LD_VAR 0 1
35440: PPUSH
35441: CALL_OW 437
35445: IFFALSE 35528
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
35447: LD_STRING M
35449: PUSH
35450: LD_VAR 0 1
35454: PPUSH
35455: CALL_OW 437
35459: PUSH
35460: LD_INT 1
35462: ARRAY
35463: PUSH
35464: LD_INT 1
35466: ARRAY
35467: EQUAL
35468: PUSH
35469: LD_VAR 0 2
35473: PUSH
35474: LD_VAR 0 1
35478: PPUSH
35479: CALL_OW 437
35483: PUSH
35484: LD_INT 1
35486: ARRAY
35487: PUSH
35488: LD_INT 2
35490: ARRAY
35491: EQUAL
35492: AND
35493: PUSH
35494: LD_VAR 0 3
35498: PUSH
35499: LD_VAR 0 1
35503: PPUSH
35504: CALL_OW 437
35508: PUSH
35509: LD_INT 1
35511: ARRAY
35512: PUSH
35513: LD_INT 3
35515: ARRAY
35516: EQUAL
35517: AND
35518: IFFALSE 35528
// result := true ;
35520: LD_ADDR_VAR 0 4
35524: PUSH
35525: LD_INT 1
35527: ST_TO_ADDR
// end ; end ;
35528: LD_VAR 0 4
35532: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
35533: LD_INT 0
35535: PPUSH
35536: PPUSH
35537: PPUSH
35538: PPUSH
// if not unit or not area then
35539: LD_VAR 0 1
35543: NOT
35544: PUSH
35545: LD_VAR 0 2
35549: NOT
35550: OR
35551: IFFALSE 35555
// exit ;
35553: GO 35719
// tmp := AreaToList ( area , i ) ;
35555: LD_ADDR_VAR 0 6
35559: PUSH
35560: LD_VAR 0 2
35564: PPUSH
35565: LD_VAR 0 5
35569: PPUSH
35570: CALL_OW 517
35574: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
35575: LD_ADDR_VAR 0 5
35579: PUSH
35580: DOUBLE
35581: LD_INT 1
35583: DEC
35584: ST_TO_ADDR
35585: LD_VAR 0 6
35589: PUSH
35590: LD_INT 1
35592: ARRAY
35593: PUSH
35594: FOR_TO
35595: IFFALSE 35717
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
35597: LD_ADDR_VAR 0 7
35601: PUSH
35602: LD_VAR 0 6
35606: PUSH
35607: LD_INT 1
35609: ARRAY
35610: PUSH
35611: LD_VAR 0 5
35615: ARRAY
35616: PUSH
35617: LD_VAR 0 6
35621: PUSH
35622: LD_INT 2
35624: ARRAY
35625: PUSH
35626: LD_VAR 0 5
35630: ARRAY
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
35636: LD_VAR 0 7
35640: PUSH
35641: LD_INT 1
35643: ARRAY
35644: PPUSH
35645: LD_VAR 0 7
35649: PUSH
35650: LD_INT 2
35652: ARRAY
35653: PPUSH
35654: CALL_OW 428
35658: PUSH
35659: LD_INT 0
35661: EQUAL
35662: IFFALSE 35715
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
35664: LD_VAR 0 1
35668: PPUSH
35669: LD_VAR 0 7
35673: PUSH
35674: LD_INT 1
35676: ARRAY
35677: PPUSH
35678: LD_VAR 0 7
35682: PUSH
35683: LD_INT 2
35685: ARRAY
35686: PPUSH
35687: LD_VAR 0 3
35691: PPUSH
35692: CALL_OW 48
// result := IsPlaced ( unit ) ;
35696: LD_ADDR_VAR 0 4
35700: PUSH
35701: LD_VAR 0 1
35705: PPUSH
35706: CALL_OW 305
35710: ST_TO_ADDR
// exit ;
35711: POP
35712: POP
35713: GO 35719
// end ; end ;
35715: GO 35594
35717: POP
35718: POP
// end ;
35719: LD_VAR 0 4
35723: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
35724: LD_INT 0
35726: PPUSH
35727: PPUSH
35728: PPUSH
// if not side or side > 8 then
35729: LD_VAR 0 1
35733: NOT
35734: PUSH
35735: LD_VAR 0 1
35739: PUSH
35740: LD_INT 8
35742: GREATER
35743: OR
35744: IFFALSE 35748
// exit ;
35746: GO 35935
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
35748: LD_ADDR_VAR 0 4
35752: PUSH
35753: LD_INT 22
35755: PUSH
35756: LD_VAR 0 1
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 21
35767: PUSH
35768: LD_INT 3
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PPUSH
35779: CALL_OW 69
35783: ST_TO_ADDR
// if not tmp then
35784: LD_VAR 0 4
35788: NOT
35789: IFFALSE 35793
// exit ;
35791: GO 35935
// enable_addtolog := true ;
35793: LD_ADDR_OWVAR 81
35797: PUSH
35798: LD_INT 1
35800: ST_TO_ADDR
// AddToLog ( [ ) ;
35801: LD_STRING [
35803: PPUSH
35804: CALL_OW 561
// for i in tmp do
35808: LD_ADDR_VAR 0 3
35812: PUSH
35813: LD_VAR 0 4
35817: PUSH
35818: FOR_IN
35819: IFFALSE 35926
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
35821: LD_STRING [
35823: PUSH
35824: LD_VAR 0 3
35828: PPUSH
35829: CALL_OW 266
35833: STR
35834: PUSH
35835: LD_STRING , 
35837: STR
35838: PUSH
35839: LD_VAR 0 3
35843: PPUSH
35844: CALL_OW 250
35848: STR
35849: PUSH
35850: LD_STRING , 
35852: STR
35853: PUSH
35854: LD_VAR 0 3
35858: PPUSH
35859: CALL_OW 251
35863: STR
35864: PUSH
35865: LD_STRING , 
35867: STR
35868: PUSH
35869: LD_VAR 0 3
35873: PPUSH
35874: CALL_OW 254
35878: STR
35879: PUSH
35880: LD_STRING , 
35882: STR
35883: PUSH
35884: LD_VAR 0 3
35888: PPUSH
35889: LD_INT 1
35891: PPUSH
35892: CALL_OW 268
35896: STR
35897: PUSH
35898: LD_STRING , 
35900: STR
35901: PUSH
35902: LD_VAR 0 3
35906: PPUSH
35907: LD_INT 2
35909: PPUSH
35910: CALL_OW 268
35914: STR
35915: PUSH
35916: LD_STRING ],
35918: STR
35919: PPUSH
35920: CALL_OW 561
// end ;
35924: GO 35818
35926: POP
35927: POP
// AddToLog ( ]; ) ;
35928: LD_STRING ];
35930: PPUSH
35931: CALL_OW 561
// end ;
35935: LD_VAR 0 2
35939: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
35940: LD_INT 0
35942: PPUSH
35943: PPUSH
35944: PPUSH
35945: PPUSH
35946: PPUSH
// if not area or not rate or not max then
35947: LD_VAR 0 1
35951: NOT
35952: PUSH
35953: LD_VAR 0 2
35957: NOT
35958: OR
35959: PUSH
35960: LD_VAR 0 4
35964: NOT
35965: OR
35966: IFFALSE 35970
// exit ;
35968: GO 36162
// while 1 do
35970: LD_INT 1
35972: IFFALSE 36162
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
35974: LD_ADDR_VAR 0 9
35978: PUSH
35979: LD_VAR 0 1
35983: PPUSH
35984: LD_INT 1
35986: PPUSH
35987: CALL_OW 287
35991: PUSH
35992: LD_INT 10
35994: MUL
35995: ST_TO_ADDR
// r := rate / 10 ;
35996: LD_ADDR_VAR 0 7
36000: PUSH
36001: LD_VAR 0 2
36005: PUSH
36006: LD_INT 10
36008: DIVREAL
36009: ST_TO_ADDR
// time := 1 1$00 ;
36010: LD_ADDR_VAR 0 8
36014: PUSH
36015: LD_INT 2100
36017: ST_TO_ADDR
// if amount < min then
36018: LD_VAR 0 9
36022: PUSH
36023: LD_VAR 0 3
36027: LESS
36028: IFFALSE 36046
// r := r * 2 else
36030: LD_ADDR_VAR 0 7
36034: PUSH
36035: LD_VAR 0 7
36039: PUSH
36040: LD_INT 2
36042: MUL
36043: ST_TO_ADDR
36044: GO 36072
// if amount > max then
36046: LD_VAR 0 9
36050: PUSH
36051: LD_VAR 0 4
36055: GREATER
36056: IFFALSE 36072
// r := r / 2 ;
36058: LD_ADDR_VAR 0 7
36062: PUSH
36063: LD_VAR 0 7
36067: PUSH
36068: LD_INT 2
36070: DIVREAL
36071: ST_TO_ADDR
// time := time / r ;
36072: LD_ADDR_VAR 0 8
36076: PUSH
36077: LD_VAR 0 8
36081: PUSH
36082: LD_VAR 0 7
36086: DIVREAL
36087: ST_TO_ADDR
// if time < 0 then
36088: LD_VAR 0 8
36092: PUSH
36093: LD_INT 0
36095: LESS
36096: IFFALSE 36113
// time := time * - 1 ;
36098: LD_ADDR_VAR 0 8
36102: PUSH
36103: LD_VAR 0 8
36107: PUSH
36108: LD_INT 1
36110: NEG
36111: MUL
36112: ST_TO_ADDR
// wait ( time ) ;
36113: LD_VAR 0 8
36117: PPUSH
36118: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
36122: LD_INT 35
36124: PPUSH
36125: LD_INT 875
36127: PPUSH
36128: CALL_OW 12
36132: PPUSH
36133: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
36137: LD_INT 1
36139: PPUSH
36140: LD_INT 5
36142: PPUSH
36143: CALL_OW 12
36147: PPUSH
36148: LD_VAR 0 1
36152: PPUSH
36153: LD_INT 1
36155: PPUSH
36156: CALL_OW 55
// end ;
36160: GO 35970
// end ;
36162: LD_VAR 0 5
36166: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
36167: LD_INT 0
36169: PPUSH
36170: PPUSH
36171: PPUSH
36172: PPUSH
36173: PPUSH
36174: PPUSH
36175: PPUSH
36176: PPUSH
// if not turrets or not factories then
36177: LD_VAR 0 1
36181: NOT
36182: PUSH
36183: LD_VAR 0 2
36187: NOT
36188: OR
36189: IFFALSE 36193
// exit ;
36191: GO 36500
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
36193: LD_ADDR_VAR 0 10
36197: PUSH
36198: LD_INT 5
36200: PUSH
36201: LD_INT 6
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 2
36210: PUSH
36211: LD_INT 4
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 3
36220: PUSH
36221: LD_INT 5
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 24
36235: PUSH
36236: LD_INT 25
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 23
36245: PUSH
36246: LD_INT 27
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 42
36259: PUSH
36260: LD_INT 43
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 44
36269: PUSH
36270: LD_INT 46
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 45
36279: PUSH
36280: LD_INT 47
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: LIST
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: LIST
36296: ST_TO_ADDR
// result := [ ] ;
36297: LD_ADDR_VAR 0 3
36301: PUSH
36302: EMPTY
36303: ST_TO_ADDR
// for i in turrets do
36304: LD_ADDR_VAR 0 4
36308: PUSH
36309: LD_VAR 0 1
36313: PUSH
36314: FOR_IN
36315: IFFALSE 36498
// begin nat := GetNation ( i ) ;
36317: LD_ADDR_VAR 0 7
36321: PUSH
36322: LD_VAR 0 4
36326: PPUSH
36327: CALL_OW 248
36331: ST_TO_ADDR
// weapon := 0 ;
36332: LD_ADDR_VAR 0 8
36336: PUSH
36337: LD_INT 0
36339: ST_TO_ADDR
// if not nat then
36340: LD_VAR 0 7
36344: NOT
36345: IFFALSE 36349
// continue ;
36347: GO 36314
// for j in list [ nat ] do
36349: LD_ADDR_VAR 0 5
36353: PUSH
36354: LD_VAR 0 10
36358: PUSH
36359: LD_VAR 0 7
36363: ARRAY
36364: PUSH
36365: FOR_IN
36366: IFFALSE 36407
// if GetBWeapon ( i ) = j [ 1 ] then
36368: LD_VAR 0 4
36372: PPUSH
36373: CALL_OW 269
36377: PUSH
36378: LD_VAR 0 5
36382: PUSH
36383: LD_INT 1
36385: ARRAY
36386: EQUAL
36387: IFFALSE 36405
// begin weapon := j [ 2 ] ;
36389: LD_ADDR_VAR 0 8
36393: PUSH
36394: LD_VAR 0 5
36398: PUSH
36399: LD_INT 2
36401: ARRAY
36402: ST_TO_ADDR
// break ;
36403: GO 36407
// end ;
36405: GO 36365
36407: POP
36408: POP
// if not weapon then
36409: LD_VAR 0 8
36413: NOT
36414: IFFALSE 36418
// continue ;
36416: GO 36314
// for k in factories do
36418: LD_ADDR_VAR 0 6
36422: PUSH
36423: LD_VAR 0 2
36427: PUSH
36428: FOR_IN
36429: IFFALSE 36494
// begin weapons := AvailableWeaponList ( k ) ;
36431: LD_ADDR_VAR 0 9
36435: PUSH
36436: LD_VAR 0 6
36440: PPUSH
36441: CALL_OW 478
36445: ST_TO_ADDR
// if not weapons then
36446: LD_VAR 0 9
36450: NOT
36451: IFFALSE 36455
// continue ;
36453: GO 36428
// if weapon in weapons then
36455: LD_VAR 0 8
36459: PUSH
36460: LD_VAR 0 9
36464: IN
36465: IFFALSE 36492
// begin result := [ i , weapon ] ;
36467: LD_ADDR_VAR 0 3
36471: PUSH
36472: LD_VAR 0 4
36476: PUSH
36477: LD_VAR 0 8
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: ST_TO_ADDR
// exit ;
36486: POP
36487: POP
36488: POP
36489: POP
36490: GO 36500
// end ; end ;
36492: GO 36428
36494: POP
36495: POP
// end ;
36496: GO 36314
36498: POP
36499: POP
// end ;
36500: LD_VAR 0 3
36504: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
36505: LD_INT 0
36507: PPUSH
// if not side or side > 8 then
36508: LD_VAR 0 3
36512: NOT
36513: PUSH
36514: LD_VAR 0 3
36518: PUSH
36519: LD_INT 8
36521: GREATER
36522: OR
36523: IFFALSE 36527
// exit ;
36525: GO 36586
// if not range then
36527: LD_VAR 0 4
36531: NOT
36532: IFFALSE 36543
// range := - 12 ;
36534: LD_ADDR_VAR 0 4
36538: PUSH
36539: LD_INT 12
36541: NEG
36542: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
36543: LD_VAR 0 1
36547: PPUSH
36548: LD_VAR 0 2
36552: PPUSH
36553: LD_VAR 0 3
36557: PPUSH
36558: LD_VAR 0 4
36562: PPUSH
36563: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
36567: LD_VAR 0 1
36571: PPUSH
36572: LD_VAR 0 2
36576: PPUSH
36577: LD_VAR 0 3
36581: PPUSH
36582: CALL_OW 331
// end ;
36586: LD_VAR 0 5
36590: RET
// export function Video ( mode ) ; begin
36591: LD_INT 0
36593: PPUSH
// ingame_video = mode ;
36594: LD_ADDR_OWVAR 52
36598: PUSH
36599: LD_VAR 0 1
36603: ST_TO_ADDR
// interface_hidden = mode ;
36604: LD_ADDR_OWVAR 54
36608: PUSH
36609: LD_VAR 0 1
36613: ST_TO_ADDR
// end ;
36614: LD_VAR 0 2
36618: RET
// export function Join ( array , element ) ; begin
36619: LD_INT 0
36621: PPUSH
// result := Replace ( array , array + 1 , element ) ;
36622: LD_ADDR_VAR 0 3
36626: PUSH
36627: LD_VAR 0 1
36631: PPUSH
36632: LD_VAR 0 1
36636: PUSH
36637: LD_INT 1
36639: PLUS
36640: PPUSH
36641: LD_VAR 0 2
36645: PPUSH
36646: CALL_OW 1
36650: ST_TO_ADDR
// end ;
36651: LD_VAR 0 3
36655: RET
// export function JoinUnion ( array , element ) ; begin
36656: LD_INT 0
36658: PPUSH
// result := array union element ;
36659: LD_ADDR_VAR 0 3
36663: PUSH
36664: LD_VAR 0 1
36668: PUSH
36669: LD_VAR 0 2
36673: UNION
36674: ST_TO_ADDR
// end ;
36675: LD_VAR 0 3
36679: RET
// export function GetBehemoths ( side ) ; begin
36680: LD_INT 0
36682: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
36683: LD_ADDR_VAR 0 2
36687: PUSH
36688: LD_INT 22
36690: PUSH
36691: LD_VAR 0 1
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 31
36702: PUSH
36703: LD_INT 25
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PPUSH
36714: CALL_OW 69
36718: ST_TO_ADDR
// end ;
36719: LD_VAR 0 2
36723: RET
// export function Shuffle ( array ) ; var i , index ; begin
36724: LD_INT 0
36726: PPUSH
36727: PPUSH
36728: PPUSH
// result := [ ] ;
36729: LD_ADDR_VAR 0 2
36733: PUSH
36734: EMPTY
36735: ST_TO_ADDR
// if not array then
36736: LD_VAR 0 1
36740: NOT
36741: IFFALSE 36745
// exit ;
36743: GO 36844
// Randomize ;
36745: CALL_OW 10
// for i = array downto 1 do
36749: LD_ADDR_VAR 0 3
36753: PUSH
36754: DOUBLE
36755: LD_VAR 0 1
36759: INC
36760: ST_TO_ADDR
36761: LD_INT 1
36763: PUSH
36764: FOR_DOWNTO
36765: IFFALSE 36842
// begin index := rand ( 1 , array ) ;
36767: LD_ADDR_VAR 0 4
36771: PUSH
36772: LD_INT 1
36774: PPUSH
36775: LD_VAR 0 1
36779: PPUSH
36780: CALL_OW 12
36784: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
36785: LD_ADDR_VAR 0 2
36789: PUSH
36790: LD_VAR 0 2
36794: PPUSH
36795: LD_VAR 0 2
36799: PUSH
36800: LD_INT 1
36802: PLUS
36803: PPUSH
36804: LD_VAR 0 1
36808: PUSH
36809: LD_VAR 0 4
36813: ARRAY
36814: PPUSH
36815: CALL_OW 2
36819: ST_TO_ADDR
// array := Delete ( array , index ) ;
36820: LD_ADDR_VAR 0 1
36824: PUSH
36825: LD_VAR 0 1
36829: PPUSH
36830: LD_VAR 0 4
36834: PPUSH
36835: CALL_OW 3
36839: ST_TO_ADDR
// end ;
36840: GO 36764
36842: POP
36843: POP
// end ;
36844: LD_VAR 0 2
36848: RET
// export function GetBaseMaterials ( base ) ; begin
36849: LD_INT 0
36851: PPUSH
// result := [ 0 , 0 , 0 ] ;
36852: LD_ADDR_VAR 0 2
36856: PUSH
36857: LD_INT 0
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: LD_INT 0
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: LIST
36870: ST_TO_ADDR
// if not base then
36871: LD_VAR 0 1
36875: NOT
36876: IFFALSE 36880
// exit ;
36878: GO 36929
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
36880: LD_ADDR_VAR 0 2
36884: PUSH
36885: LD_VAR 0 1
36889: PPUSH
36890: LD_INT 1
36892: PPUSH
36893: CALL_OW 275
36897: PUSH
36898: LD_VAR 0 1
36902: PPUSH
36903: LD_INT 2
36905: PPUSH
36906: CALL_OW 275
36910: PUSH
36911: LD_VAR 0 1
36915: PPUSH
36916: LD_INT 3
36918: PPUSH
36919: CALL_OW 275
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: LIST
36928: ST_TO_ADDR
// end ;
36929: LD_VAR 0 2
36933: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
36934: LD_INT 0
36936: PPUSH
36937: PPUSH
// result := array ;
36938: LD_ADDR_VAR 0 3
36942: PUSH
36943: LD_VAR 0 1
36947: ST_TO_ADDR
// if size > 0 then
36948: LD_VAR 0 2
36952: PUSH
36953: LD_INT 0
36955: GREATER
36956: IFFALSE 37002
// for i := array downto size do
36958: LD_ADDR_VAR 0 4
36962: PUSH
36963: DOUBLE
36964: LD_VAR 0 1
36968: INC
36969: ST_TO_ADDR
36970: LD_VAR 0 2
36974: PUSH
36975: FOR_DOWNTO
36976: IFFALSE 37000
// result := Delete ( result , result ) ;
36978: LD_ADDR_VAR 0 3
36982: PUSH
36983: LD_VAR 0 3
36987: PPUSH
36988: LD_VAR 0 3
36992: PPUSH
36993: CALL_OW 3
36997: ST_TO_ADDR
36998: GO 36975
37000: POP
37001: POP
// end ;
37002: LD_VAR 0 3
37006: RET
// export function ComExit ( unit ) ; var tmp ; begin
37007: LD_INT 0
37009: PPUSH
37010: PPUSH
// if not IsInUnit ( unit ) then
37011: LD_VAR 0 1
37015: PPUSH
37016: CALL_OW 310
37020: NOT
37021: IFFALSE 37025
// exit ;
37023: GO 37085
// tmp := IsInUnit ( unit ) ;
37025: LD_ADDR_VAR 0 3
37029: PUSH
37030: LD_VAR 0 1
37034: PPUSH
37035: CALL_OW 310
37039: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
37040: LD_VAR 0 3
37044: PPUSH
37045: CALL_OW 247
37049: PUSH
37050: LD_INT 2
37052: EQUAL
37053: IFFALSE 37066
// ComExitVehicle ( unit ) else
37055: LD_VAR 0 1
37059: PPUSH
37060: CALL_OW 121
37064: GO 37075
// ComExitBuilding ( unit ) ;
37066: LD_VAR 0 1
37070: PPUSH
37071: CALL_OW 122
// result := tmp ;
37075: LD_ADDR_VAR 0 2
37079: PUSH
37080: LD_VAR 0 3
37084: ST_TO_ADDR
// end ;
37085: LD_VAR 0 2
37089: RET
// export function ComExitAll ( units ) ; var i ; begin
37090: LD_INT 0
37092: PPUSH
37093: PPUSH
// if not units then
37094: LD_VAR 0 1
37098: NOT
37099: IFFALSE 37103
// exit ;
37101: GO 37129
// for i in units do
37103: LD_ADDR_VAR 0 3
37107: PUSH
37108: LD_VAR 0 1
37112: PUSH
37113: FOR_IN
37114: IFFALSE 37127
// ComExit ( i ) ;
37116: LD_VAR 0 3
37120: PPUSH
37121: CALL 37007 0 1
37125: GO 37113
37127: POP
37128: POP
// end ;
37129: LD_VAR 0 2
37133: RET
// export function ResetHc ; begin
37134: LD_INT 0
37136: PPUSH
// InitHc ;
37137: CALL_OW 19
// hc_importance := 0 ;
37141: LD_ADDR_OWVAR 32
37145: PUSH
37146: LD_INT 0
37148: ST_TO_ADDR
// end ;
37149: LD_VAR 0 1
37153: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
37154: LD_INT 0
37156: PPUSH
37157: PPUSH
37158: PPUSH
// _x := ( x1 + x2 ) div 2 ;
37159: LD_ADDR_VAR 0 6
37163: PUSH
37164: LD_VAR 0 1
37168: PUSH
37169: LD_VAR 0 3
37173: PLUS
37174: PUSH
37175: LD_INT 2
37177: DIV
37178: ST_TO_ADDR
// if _x < 0 then
37179: LD_VAR 0 6
37183: PUSH
37184: LD_INT 0
37186: LESS
37187: IFFALSE 37204
// _x := _x * - 1 ;
37189: LD_ADDR_VAR 0 6
37193: PUSH
37194: LD_VAR 0 6
37198: PUSH
37199: LD_INT 1
37201: NEG
37202: MUL
37203: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
37204: LD_ADDR_VAR 0 7
37208: PUSH
37209: LD_VAR 0 2
37213: PUSH
37214: LD_VAR 0 4
37218: PLUS
37219: PUSH
37220: LD_INT 2
37222: DIV
37223: ST_TO_ADDR
// if _y < 0 then
37224: LD_VAR 0 7
37228: PUSH
37229: LD_INT 0
37231: LESS
37232: IFFALSE 37249
// _y := _y * - 1 ;
37234: LD_ADDR_VAR 0 7
37238: PUSH
37239: LD_VAR 0 7
37243: PUSH
37244: LD_INT 1
37246: NEG
37247: MUL
37248: ST_TO_ADDR
// result := [ _x , _y ] ;
37249: LD_ADDR_VAR 0 5
37253: PUSH
37254: LD_VAR 0 6
37258: PUSH
37259: LD_VAR 0 7
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: ST_TO_ADDR
// end ;
37268: LD_VAR 0 5
37272: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
37273: LD_INT 0
37275: PPUSH
37276: PPUSH
37277: PPUSH
37278: PPUSH
// task := GetTaskList ( unit ) ;
37279: LD_ADDR_VAR 0 7
37283: PUSH
37284: LD_VAR 0 1
37288: PPUSH
37289: CALL_OW 437
37293: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
37294: LD_VAR 0 7
37298: NOT
37299: PUSH
37300: LD_VAR 0 1
37304: PPUSH
37305: LD_VAR 0 2
37309: PPUSH
37310: CALL_OW 308
37314: NOT
37315: AND
37316: IFFALSE 37320
// exit ;
37318: GO 37438
// if IsInArea ( unit , area ) then
37320: LD_VAR 0 1
37324: PPUSH
37325: LD_VAR 0 2
37329: PPUSH
37330: CALL_OW 308
37334: IFFALSE 37352
// begin ComMoveToArea ( unit , goAway ) ;
37336: LD_VAR 0 1
37340: PPUSH
37341: LD_VAR 0 3
37345: PPUSH
37346: CALL_OW 113
// exit ;
37350: GO 37438
// end ; if task [ 1 ] [ 1 ] <> M then
37352: LD_VAR 0 7
37356: PUSH
37357: LD_INT 1
37359: ARRAY
37360: PUSH
37361: LD_INT 1
37363: ARRAY
37364: PUSH
37365: LD_STRING M
37367: NONEQUAL
37368: IFFALSE 37372
// exit ;
37370: GO 37438
// x := task [ 1 ] [ 2 ] ;
37372: LD_ADDR_VAR 0 5
37376: PUSH
37377: LD_VAR 0 7
37381: PUSH
37382: LD_INT 1
37384: ARRAY
37385: PUSH
37386: LD_INT 2
37388: ARRAY
37389: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
37390: LD_ADDR_VAR 0 6
37394: PUSH
37395: LD_VAR 0 7
37399: PUSH
37400: LD_INT 1
37402: ARRAY
37403: PUSH
37404: LD_INT 3
37406: ARRAY
37407: ST_TO_ADDR
// if InArea ( x , y , area ) then
37408: LD_VAR 0 5
37412: PPUSH
37413: LD_VAR 0 6
37417: PPUSH
37418: LD_VAR 0 2
37422: PPUSH
37423: CALL_OW 309
37427: IFFALSE 37438
// ComStop ( unit ) ;
37429: LD_VAR 0 1
37433: PPUSH
37434: CALL_OW 141
// end ;
37438: LD_VAR 0 4
37442: RET
// export function Abs ( value ) ; begin
37443: LD_INT 0
37445: PPUSH
// result := value ;
37446: LD_ADDR_VAR 0 2
37450: PUSH
37451: LD_VAR 0 1
37455: ST_TO_ADDR
// if value < 0 then
37456: LD_VAR 0 1
37460: PUSH
37461: LD_INT 0
37463: LESS
37464: IFFALSE 37481
// result := value * - 1 ;
37466: LD_ADDR_VAR 0 2
37470: PUSH
37471: LD_VAR 0 1
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: MUL
37480: ST_TO_ADDR
// end ;
37481: LD_VAR 0 2
37485: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
37486: LD_INT 0
37488: PPUSH
37489: PPUSH
37490: PPUSH
37491: PPUSH
37492: PPUSH
37493: PPUSH
37494: PPUSH
37495: PPUSH
// if not unit or not building then
37496: LD_VAR 0 1
37500: NOT
37501: PUSH
37502: LD_VAR 0 2
37506: NOT
37507: OR
37508: IFFALSE 37512
// exit ;
37510: GO 37738
// x := GetX ( building ) ;
37512: LD_ADDR_VAR 0 4
37516: PUSH
37517: LD_VAR 0 2
37521: PPUSH
37522: CALL_OW 250
37526: ST_TO_ADDR
// y := GetY ( building ) ;
37527: LD_ADDR_VAR 0 6
37531: PUSH
37532: LD_VAR 0 2
37536: PPUSH
37537: CALL_OW 251
37541: ST_TO_ADDR
// d := GetDir ( building ) ;
37542: LD_ADDR_VAR 0 8
37546: PUSH
37547: LD_VAR 0 2
37551: PPUSH
37552: CALL_OW 254
37556: ST_TO_ADDR
// r := 4 ;
37557: LD_ADDR_VAR 0 9
37561: PUSH
37562: LD_INT 4
37564: ST_TO_ADDR
// for i := 1 to 5 do
37565: LD_ADDR_VAR 0 10
37569: PUSH
37570: DOUBLE
37571: LD_INT 1
37573: DEC
37574: ST_TO_ADDR
37575: LD_INT 5
37577: PUSH
37578: FOR_TO
37579: IFFALSE 37736
// begin _x := ShiftX ( x , d , r + i ) ;
37581: LD_ADDR_VAR 0 5
37585: PUSH
37586: LD_VAR 0 4
37590: PPUSH
37591: LD_VAR 0 8
37595: PPUSH
37596: LD_VAR 0 9
37600: PUSH
37601: LD_VAR 0 10
37605: PLUS
37606: PPUSH
37607: CALL_OW 272
37611: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
37612: LD_ADDR_VAR 0 7
37616: PUSH
37617: LD_VAR 0 6
37621: PPUSH
37622: LD_VAR 0 8
37626: PPUSH
37627: LD_VAR 0 9
37631: PUSH
37632: LD_VAR 0 10
37636: PLUS
37637: PPUSH
37638: CALL_OW 273
37642: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
37643: LD_VAR 0 5
37647: PPUSH
37648: LD_VAR 0 7
37652: PPUSH
37653: CALL_OW 488
37657: PUSH
37658: LD_VAR 0 5
37662: PPUSH
37663: LD_VAR 0 7
37667: PPUSH
37668: CALL_OW 428
37672: PPUSH
37673: CALL_OW 247
37677: PUSH
37678: LD_INT 3
37680: PUSH
37681: LD_INT 2
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: IN
37688: NOT
37689: AND
37690: IFFALSE 37734
// begin ComMoveXY ( unit , _x , _y ) ;
37692: LD_VAR 0 1
37696: PPUSH
37697: LD_VAR 0 5
37701: PPUSH
37702: LD_VAR 0 7
37706: PPUSH
37707: CALL_OW 111
// result := [ _x , _y ] ;
37711: LD_ADDR_VAR 0 3
37715: PUSH
37716: LD_VAR 0 5
37720: PUSH
37721: LD_VAR 0 7
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: ST_TO_ADDR
// exit ;
37730: POP
37731: POP
37732: GO 37738
// end ; end ;
37734: GO 37578
37736: POP
37737: POP
// end ;
37738: LD_VAR 0 3
37742: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
37743: LD_INT 0
37745: PPUSH
37746: PPUSH
37747: PPUSH
// result := 0 ;
37748: LD_ADDR_VAR 0 3
37752: PUSH
37753: LD_INT 0
37755: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
37756: LD_VAR 0 1
37760: PUSH
37761: LD_INT 0
37763: LESS
37764: PUSH
37765: LD_VAR 0 1
37769: PUSH
37770: LD_INT 8
37772: GREATER
37773: OR
37774: PUSH
37775: LD_VAR 0 2
37779: PUSH
37780: LD_INT 0
37782: LESS
37783: OR
37784: PUSH
37785: LD_VAR 0 2
37789: PUSH
37790: LD_INT 8
37792: GREATER
37793: OR
37794: IFFALSE 37798
// exit ;
37796: GO 37873
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
37798: LD_ADDR_VAR 0 4
37802: PUSH
37803: LD_INT 22
37805: PUSH
37806: LD_VAR 0 2
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PPUSH
37815: CALL_OW 69
37819: PUSH
37820: FOR_IN
37821: IFFALSE 37871
// begin un := UnitShoot ( i ) ;
37823: LD_ADDR_VAR 0 5
37827: PUSH
37828: LD_VAR 0 4
37832: PPUSH
37833: CALL_OW 504
37837: ST_TO_ADDR
// if GetSide ( un ) = side1 then
37838: LD_VAR 0 5
37842: PPUSH
37843: CALL_OW 255
37847: PUSH
37848: LD_VAR 0 1
37852: EQUAL
37853: IFFALSE 37869
// begin result := un ;
37855: LD_ADDR_VAR 0 3
37859: PUSH
37860: LD_VAR 0 5
37864: ST_TO_ADDR
// exit ;
37865: POP
37866: POP
37867: GO 37873
// end ; end ;
37869: GO 37820
37871: POP
37872: POP
// end ;
37873: LD_VAR 0 3
37877: RET
// export function GetCargoBay ( units ) ; begin
37878: LD_INT 0
37880: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
37881: LD_ADDR_VAR 0 2
37885: PUSH
37886: LD_VAR 0 1
37890: PPUSH
37891: LD_INT 2
37893: PUSH
37894: LD_INT 34
37896: PUSH
37897: LD_INT 12
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 34
37906: PUSH
37907: LD_INT 51
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 34
37916: PUSH
37917: LD_INT 32
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 34
37926: PUSH
37927: LD_EXP 4
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: PPUSH
37943: CALL_OW 72
37947: ST_TO_ADDR
// end ;
37948: LD_VAR 0 2
37952: RET
// export function Negate ( value ) ; begin
37953: LD_INT 0
37955: PPUSH
// result := not value ;
37956: LD_ADDR_VAR 0 2
37960: PUSH
37961: LD_VAR 0 1
37965: NOT
37966: ST_TO_ADDR
// end ;
37967: LD_VAR 0 2
37971: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
37972: LD_INT 0
37974: PPUSH
// if x1 = x2 then
37975: LD_VAR 0 1
37979: PUSH
37980: LD_VAR 0 3
37984: EQUAL
37985: IFFALSE 38019
// begin if y1 > y2 then
37987: LD_VAR 0 2
37991: PUSH
37992: LD_VAR 0 4
37996: GREATER
37997: IFFALSE 38009
// result := 0 else
37999: LD_ADDR_VAR 0 5
38003: PUSH
38004: LD_INT 0
38006: ST_TO_ADDR
38007: GO 38017
// result := 3 ;
38009: LD_ADDR_VAR 0 5
38013: PUSH
38014: LD_INT 3
38016: ST_TO_ADDR
// exit ;
38017: GO 38105
// end ; if y1 = y2 then
38019: LD_VAR 0 2
38023: PUSH
38024: LD_VAR 0 4
38028: EQUAL
38029: IFFALSE 38063
// begin if x1 > x2 then
38031: LD_VAR 0 1
38035: PUSH
38036: LD_VAR 0 3
38040: GREATER
38041: IFFALSE 38053
// result := 1 else
38043: LD_ADDR_VAR 0 5
38047: PUSH
38048: LD_INT 1
38050: ST_TO_ADDR
38051: GO 38061
// result := 4 ;
38053: LD_ADDR_VAR 0 5
38057: PUSH
38058: LD_INT 4
38060: ST_TO_ADDR
// exit ;
38061: GO 38105
// end ; if x1 > x2 and y1 > y2 then
38063: LD_VAR 0 1
38067: PUSH
38068: LD_VAR 0 3
38072: GREATER
38073: PUSH
38074: LD_VAR 0 2
38078: PUSH
38079: LD_VAR 0 4
38083: GREATER
38084: AND
38085: IFFALSE 38097
// result := 2 else
38087: LD_ADDR_VAR 0 5
38091: PUSH
38092: LD_INT 2
38094: ST_TO_ADDR
38095: GO 38105
// result := 5 ;
38097: LD_ADDR_VAR 0 5
38101: PUSH
38102: LD_INT 5
38104: ST_TO_ADDR
// end ; end_of_file
38105: LD_VAR 0 5
38109: RET
// export ecoSide , ecoNation , ecoPeopleAmount , ecoStartPoint , ecoCratesDrop , ecoCratesDropXY , ecoCratesDropAllow , ecoAttacksAllow , ecoEventsAllow , ecoAttacksArea , ecoEventsList ; export function InitEcoMode ( startPoint , cratesDropXY , attacksArea ) ; var i , tmp , side , nation , peopleAmount , resourcesAmount ; begin
38110: LD_INT 0
38112: PPUSH
38113: PPUSH
38114: PPUSH
38115: PPUSH
38116: PPUSH
38117: PPUSH
38118: PPUSH
// ecoStartPoint := startPoint ;
38119: LD_ADDR_EXP 25
38123: PUSH
38124: LD_VAR 0 1
38128: ST_TO_ADDR
// CenterNowOnXY ( ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
38129: LD_EXP 25
38133: PUSH
38134: LD_INT 1
38136: ARRAY
38137: PPUSH
38138: LD_EXP 25
38142: PUSH
38143: LD_INT 2
38145: ARRAY
38146: PPUSH
38147: CALL_OW 86
// ToLua ( initEcoPanel(); ) ;
38151: LD_STRING initEcoPanel();
38153: PPUSH
38154: CALL_OW 559
// ecoCratesDropXY := cratesDropXY ;
38158: LD_ADDR_EXP 27
38162: PUSH
38163: LD_VAR 0 2
38167: ST_TO_ADDR
// ecoAttacksArea := attacksArea ;
38168: LD_ADDR_EXP 31
38172: PUSH
38173: LD_VAR 0 3
38177: ST_TO_ADDR
// if debug then
38178: LD_EXP 1
38182: IFFALSE 38226
// begin side := 1 ;
38184: LD_ADDR_VAR 0 7
38188: PUSH
38189: LD_INT 1
38191: ST_TO_ADDR
// nation := 1 ;
38192: LD_ADDR_VAR 0 8
38196: PUSH
38197: LD_INT 1
38199: ST_TO_ADDR
// peopleAmount := 15 ;
38200: LD_ADDR_VAR 0 9
38204: PUSH
38205: LD_INT 15
38207: ST_TO_ADDR
// resourcesAmount := 2 ;
38208: LD_ADDR_VAR 0 10
38212: PUSH
38213: LD_INT 2
38215: ST_TO_ADDR
// ecoCratesDrop := 3 ;
38216: LD_ADDR_EXP 26
38220: PUSH
38221: LD_INT 3
38223: ST_TO_ADDR
// end else
38224: GO 38322
// begin side := GetMultiplayerSetting ( 0 ) ;
38226: LD_ADDR_VAR 0 7
38230: PUSH
38231: LD_INT 0
38233: PPUSH
38234: CALL_OW 426
38238: ST_TO_ADDR
// nation := GetMultiplayerSetting ( 1 ) ;
38239: LD_ADDR_VAR 0 8
38243: PUSH
38244: LD_INT 1
38246: PPUSH
38247: CALL_OW 426
38251: ST_TO_ADDR
// peopleAmount := [ 6 , 9 , 12 , 15 , 18 , 21 , 24 ] [ GetMultiplayerSetting ( 2 ) ] ;
38252: LD_ADDR_VAR 0 9
38256: PUSH
38257: LD_INT 6
38259: PUSH
38260: LD_INT 9
38262: PUSH
38263: LD_INT 12
38265: PUSH
38266: LD_INT 15
38268: PUSH
38269: LD_INT 18
38271: PUSH
38272: LD_INT 21
38274: PUSH
38275: LD_INT 24
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 2
38289: PPUSH
38290: CALL_OW 426
38294: ARRAY
38295: ST_TO_ADDR
// resourcesAmount := GetMultiplayerSetting ( 3 ) ;
38296: LD_ADDR_VAR 0 10
38300: PUSH
38301: LD_INT 3
38303: PPUSH
38304: CALL_OW 426
38308: ST_TO_ADDR
// ecoCratesDrop := GetMultiplayerSetting ( 4 ) ;
38309: LD_ADDR_EXP 26
38313: PUSH
38314: LD_INT 4
38316: PPUSH
38317: CALL_OW 426
38321: ST_TO_ADDR
// end ; ecoCratesDropAllow := true ;
38322: LD_ADDR_EXP 28
38326: PUSH
38327: LD_INT 1
38329: ST_TO_ADDR
// ecoEventsAllow := false ;
38330: LD_ADDR_EXP 30
38334: PUSH
38335: LD_INT 0
38337: ST_TO_ADDR
// ecoAttacksAllow := false ;
38338: LD_ADDR_EXP 29
38342: PUSH
38343: LD_INT 0
38345: ST_TO_ADDR
// ecoSide := side ;
38346: LD_ADDR_EXP 22
38350: PUSH
38351: LD_VAR 0 7
38355: ST_TO_ADDR
// your_side := side ;
38356: LD_ADDR_OWVAR 2
38360: PUSH
38361: LD_VAR 0 7
38365: ST_TO_ADDR
// ChangeSideFog ( 1 , side ) ;
38366: LD_INT 1
38368: PPUSH
38369: LD_VAR 0 7
38373: PPUSH
38374: CALL_OW 343
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
38378: LD_INT 1
38380: PPUSH
38381: LD_INT 1
38383: PPUSH
38384: LD_VAR 0 7
38388: PPUSH
38389: LD_INT 32793
38391: NEG
38392: PPUSH
38393: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
38397: LD_INT 1
38399: PPUSH
38400: LD_INT 1
38402: PPUSH
38403: LD_VAR 0 7
38407: PPUSH
38408: CALL_OW 331
// ecoNation := nation ;
38412: LD_ADDR_EXP 23
38416: PUSH
38417: LD_VAR 0 8
38421: ST_TO_ADDR
// ecoPeopleAmount := peopleAmount ;
38422: LD_ADDR_EXP 24
38426: PUSH
38427: LD_VAR 0 9
38431: ST_TO_ADDR
// for i = 1 to resourcesAmount * 5 do
38432: LD_ADDR_VAR 0 5
38436: PUSH
38437: DOUBLE
38438: LD_INT 1
38440: DEC
38441: ST_TO_ADDR
38442: LD_VAR 0 10
38446: PUSH
38447: LD_INT 5
38449: MUL
38450: PUSH
38451: FOR_TO
38452: IFFALSE 38490
// CreateResourcesXYR ( mat_cans , 5 , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 6 , false ) ;
38454: LD_INT 1
38456: PPUSH
38457: LD_INT 5
38459: PPUSH
38460: LD_EXP 25
38464: PUSH
38465: LD_INT 1
38467: ARRAY
38468: PPUSH
38469: LD_EXP 25
38473: PUSH
38474: LD_INT 2
38476: ARRAY
38477: PPUSH
38478: LD_INT 6
38480: PPUSH
38481: LD_INT 0
38483: PPUSH
38484: CALL_OW 60
38488: GO 38451
38490: POP
38491: POP
// uc_side := side ;
38492: LD_ADDR_OWVAR 20
38496: PUSH
38497: LD_VAR 0 7
38501: ST_TO_ADDR
// uc_nation := nation ;
38502: LD_ADDR_OWVAR 21
38506: PUSH
38507: LD_VAR 0 8
38511: ST_TO_ADDR
// hc_importance := 100 ;
38512: LD_ADDR_OWVAR 32
38516: PUSH
38517: LD_INT 100
38519: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
38520: LD_INT 0
38522: PPUSH
38523: LD_INT 1
38525: PPUSH
38526: LD_INT 4
38528: PPUSH
38529: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
38533: CALL_OW 44
38537: PPUSH
38538: LD_EXP 25
38542: PUSH
38543: LD_INT 1
38545: ARRAY
38546: PPUSH
38547: LD_EXP 25
38551: PUSH
38552: LD_INT 2
38554: ARRAY
38555: PPUSH
38556: LD_INT 12
38558: PPUSH
38559: LD_INT 0
38561: PPUSH
38562: CALL_OW 50
// InitHc_All ( ) ;
38566: CALL_OW 584
// for i = 1 to peopleAmount - 1 do
38570: LD_ADDR_VAR 0 5
38574: PUSH
38575: DOUBLE
38576: LD_INT 1
38578: DEC
38579: ST_TO_ADDR
38580: LD_VAR 0 9
38584: PUSH
38585: LD_INT 1
38587: MINUS
38588: PUSH
38589: FOR_TO
38590: IFFALSE 38685
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
38592: LD_INT 0
38594: PPUSH
38595: LD_VAR 0 5
38599: PUSH
38600: LD_INT 4
38602: MOD
38603: PUSH
38604: LD_INT 1
38606: PLUS
38607: PPUSH
38608: LD_INT 3
38610: PPUSH
38611: CALL_OW 380
// tmp := Replace ( tmp , tmp + 1 , CreateHuman ) ;
38615: LD_ADDR_VAR 0 6
38619: PUSH
38620: LD_VAR 0 6
38624: PPUSH
38625: LD_VAR 0 6
38629: PUSH
38630: LD_INT 1
38632: PLUS
38633: PPUSH
38634: CALL_OW 44
38638: PPUSH
38639: CALL_OW 1
38643: ST_TO_ADDR
// PlaceUnitXYR ( tmp [ tmp ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
38644: LD_VAR 0 6
38648: PUSH
38649: LD_VAR 0 6
38653: ARRAY
38654: PPUSH
38655: LD_EXP 25
38659: PUSH
38660: LD_INT 1
38662: ARRAY
38663: PPUSH
38664: LD_EXP 25
38668: PUSH
38669: LD_INT 2
38671: ARRAY
38672: PPUSH
38673: LD_INT 12
38675: PPUSH
38676: LD_INT 0
38678: PPUSH
38679: CALL_OW 50
// end ;
38683: GO 38589
38685: POP
38686: POP
// end ;
38687: LD_VAR 0 4
38691: RET
// every 0 0$1 trigger ecoCratesDrop and ecoCratesDropXY do var time , xy ;
38692: LD_EXP 26
38696: PUSH
38697: LD_EXP 27
38701: AND
38702: IFFALSE 38855
38704: GO 38706
38706: DISABLE
38707: LD_INT 0
38709: PPUSH
38710: PPUSH
// begin time := [ 0 0$30 , 0 0$20 , 0 0$10 ] [ ecoCratesDrop ] ;
38711: LD_ADDR_VAR 0 1
38715: PUSH
38716: LD_INT 1050
38718: PUSH
38719: LD_INT 700
38721: PUSH
38722: LD_INT 350
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: LIST
38729: PUSH
38730: LD_EXP 26
38734: ARRAY
38735: ST_TO_ADDR
// while true do
38736: LD_INT 1
38738: IFFALSE 38855
// begin wait ( time ) ;
38740: LD_VAR 0 1
38744: PPUSH
38745: CALL_OW 67
// if not ecoCratesDropAllow then
38749: LD_EXP 28
38753: NOT
38754: IFFALSE 38758
// continue ;
38756: GO 38736
// time := time + 0 0$3 ;
38758: LD_ADDR_VAR 0 1
38762: PUSH
38763: LD_VAR 0 1
38767: PUSH
38768: LD_INT 105
38770: PLUS
38771: ST_TO_ADDR
// if time > 1 1$00 then
38772: LD_VAR 0 1
38776: PUSH
38777: LD_INT 2100
38779: GREATER
38780: IFFALSE 38790
// time := 0 0$30 ;
38782: LD_ADDR_VAR 0 1
38786: PUSH
38787: LD_INT 1050
38789: ST_TO_ADDR
// xy := ecoCratesDropXY [ rand ( 1 , ecoCratesDropXY ) ] ;
38790: LD_ADDR_VAR 0 2
38794: PUSH
38795: LD_EXP 27
38799: PUSH
38800: LD_INT 1
38802: PPUSH
38803: LD_EXP 27
38807: PPUSH
38808: CALL_OW 12
38812: ARRAY
38813: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , xy [ 1 ] , xy [ 2 ] , 6 , true ) ;
38814: LD_INT 1
38816: PPUSH
38817: LD_INT 5
38819: PPUSH
38820: CALL_OW 12
38824: PPUSH
38825: LD_VAR 0 2
38829: PUSH
38830: LD_INT 1
38832: ARRAY
38833: PPUSH
38834: LD_VAR 0 2
38838: PUSH
38839: LD_INT 2
38841: ARRAY
38842: PPUSH
38843: LD_INT 6
38845: PPUSH
38846: LD_INT 1
38848: PPUSH
38849: CALL_OW 56
// end ;
38853: GO 38736
// end ;
38855: PPOPN 2
38857: END
// every 0 0$1 trigger ecoAttacksArea and ecoAttacksAllow do var time , area , tmp , i , veh , dir , enemySide ;
38858: LD_EXP 31
38862: PUSH
38863: LD_EXP 29
38867: AND
38868: IFFALSE 39456
38870: GO 38872
38872: DISABLE
38873: LD_INT 0
38875: PPUSH
38876: PPUSH
38877: PPUSH
38878: PPUSH
38879: PPUSH
38880: PPUSH
38881: PPUSH
// begin time := 5 5$00 ;
38882: LD_ADDR_VAR 0 1
38886: PUSH
38887: LD_INT 10500
38889: ST_TO_ADDR
// enemySide := [ 3 , 9 ] [ rand ( 1 , 2 ) ] ;
38890: LD_ADDR_VAR 0 7
38894: PUSH
38895: LD_INT 3
38897: PUSH
38898: LD_INT 9
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 1
38907: PPUSH
38908: LD_INT 2
38910: PPUSH
38911: CALL_OW 12
38915: ARRAY
38916: ST_TO_ADDR
// if ecoSide = enemySide then
38917: LD_EXP 22
38921: PUSH
38922: LD_VAR 0 7
38926: EQUAL
38927: IFFALSE 38937
// enemySide := 1 ;
38929: LD_ADDR_VAR 0 7
38933: PUSH
38934: LD_INT 1
38936: ST_TO_ADDR
// while true do
38937: LD_INT 1
38939: IFFALSE 39456
// begin wait ( time ) ;
38941: LD_VAR 0 1
38945: PPUSH
38946: CALL_OW 67
// if not ecoAttacksAllow then
38950: LD_EXP 29
38954: NOT
38955: IFFALSE 38959
// continue ;
38957: GO 38937
// area := ecoAttacksArea [ rand ( 1 , ecoAttacksArea ) ] ;
38959: LD_ADDR_VAR 0 2
38963: PUSH
38964: LD_EXP 31
38968: PUSH
38969: LD_INT 1
38971: PPUSH
38972: LD_EXP 31
38976: PPUSH
38977: CALL_OW 12
38981: ARRAY
38982: ST_TO_ADDR
// tmp := AreaToList ( area , 0 ) ;
38983: LD_ADDR_VAR 0 3
38987: PUSH
38988: LD_VAR 0 2
38992: PPUSH
38993: LD_INT 0
38995: PPUSH
38996: CALL_OW 517
39000: ST_TO_ADDR
// dir := GetDirFromHex ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
39001: LD_ADDR_VAR 0 6
39005: PUSH
39006: LD_VAR 0 3
39010: PUSH
39011: LD_INT 1
39013: ARRAY
39014: PUSH
39015: LD_INT 1
39017: ARRAY
39018: PPUSH
39019: LD_VAR 0 3
39023: PUSH
39024: LD_INT 2
39026: ARRAY
39027: PUSH
39028: LD_INT 1
39030: ARRAY
39031: PPUSH
39032: LD_EXP 25
39036: PUSH
39037: LD_INT 1
39039: ARRAY
39040: PPUSH
39041: LD_EXP 25
39045: PUSH
39046: LD_INT 2
39048: ARRAY
39049: PPUSH
39050: CALL 37972 0 4
39054: ST_TO_ADDR
// tmp := [ ] ;
39055: LD_ADDR_VAR 0 3
39059: PUSH
39060: EMPTY
39061: ST_TO_ADDR
// for i := 1 to 6 do
39062: LD_ADDR_VAR 0 4
39066: PUSH
39067: DOUBLE
39068: LD_INT 1
39070: DEC
39071: ST_TO_ADDR
39072: LD_INT 6
39074: PUSH
39075: FOR_TO
39076: IFFALSE 39333
// begin uc_side := enemySide ;
39078: LD_ADDR_OWVAR 20
39082: PUSH
39083: LD_VAR 0 7
39087: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
39088: LD_ADDR_OWVAR 21
39092: PUSH
39093: LD_INT 1
39095: PPUSH
39096: LD_INT 3
39098: PPUSH
39099: CALL_OW 12
39103: ST_TO_ADDR
// case uc_nation of 1 :
39104: LD_OWVAR 21
39108: PUSH
39109: LD_INT 1
39111: DOUBLE
39112: EQUAL
39113: IFTRUE 39117
39115: GO 39158
39117: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ; 2 :
39118: LD_INT 5
39120: PPUSH
39121: LD_INT 3
39123: PPUSH
39124: LD_INT 3
39126: PPUSH
39127: LD_INT 6
39129: PUSH
39130: LD_INT 7
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 1
39139: PPUSH
39140: LD_INT 2
39142: PPUSH
39143: CALL_OW 12
39147: ARRAY
39148: PPUSH
39149: LD_INT 100
39151: PPUSH
39152: CALL 5151 0 5
39156: GO 39261
39158: LD_INT 2
39160: DOUBLE
39161: EQUAL
39162: IFTRUE 39166
39164: GO 39211
39166: POP
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] , 100 ) ; 3 :
39167: LD_INT 14
39169: PPUSH
39170: LD_INT 3
39172: PPUSH
39173: LD_INT 5
39175: PPUSH
39176: LD_INT 27
39178: PUSH
39179: LD_INT 28
39181: PUSH
39182: LD_INT 29
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 1
39192: PPUSH
39193: LD_INT 3
39195: PPUSH
39196: CALL_OW 12
39200: ARRAY
39201: PPUSH
39202: LD_INT 100
39204: PPUSH
39205: CALL 5151 0 5
39209: GO 39261
39211: LD_INT 3
39213: DOUBLE
39214: EQUAL
39215: IFTRUE 39219
39217: GO 39260
39219: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket ] [ rand ( 1 , 2 ) ] , 100 ) ; end ;
39220: LD_INT 24
39222: PPUSH
39223: LD_INT 3
39225: PPUSH
39226: LD_INT 3
39228: PPUSH
39229: LD_INT 46
39231: PUSH
39232: LD_INT 47
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 1
39241: PPUSH
39242: LD_INT 2
39244: PPUSH
39245: CALL_OW 12
39249: ARRAY
39250: PPUSH
39251: LD_INT 100
39253: PPUSH
39254: CALL 5151 0 5
39258: GO 39261
39260: POP
// veh := CreateVehicle ;
39261: LD_ADDR_VAR 0 5
39265: PUSH
39266: CALL_OW 45
39270: ST_TO_ADDR
// SetDir ( veh , dir ) ;
39271: LD_VAR 0 5
39275: PPUSH
39276: LD_VAR 0 6
39280: PPUSH
39281: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
39285: LD_VAR 0 5
39289: PPUSH
39290: LD_VAR 0 2
39294: PPUSH
39295: LD_INT 0
39297: PPUSH
39298: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
39302: LD_ADDR_VAR 0 3
39306: PUSH
39307: LD_VAR 0 3
39311: PPUSH
39312: LD_VAR 0 3
39316: PUSH
39317: LD_INT 1
39319: PLUS
39320: PPUSH
39321: LD_VAR 0 5
39325: PPUSH
39326: CALL_OW 1
39330: ST_TO_ADDR
// end ;
39331: GO 39075
39333: POP
39334: POP
// if tmp then
39335: LD_VAR 0 3
39339: IFFALSE 39454
// begin repeat wait ( 0 0$2 ) ;
39341: LD_INT 70
39343: PPUSH
39344: CALL_OW 67
// for i in tmp do
39348: LD_ADDR_VAR 0 4
39352: PUSH
39353: LD_VAR 0 3
39357: PUSH
39358: FOR_IN
39359: IFFALSE 39445
// begin if IsDead ( i ) or GetSide ( i ) <> enemySide then
39361: LD_VAR 0 4
39365: PPUSH
39366: CALL_OW 301
39370: PUSH
39371: LD_VAR 0 4
39375: PPUSH
39376: CALL_OW 255
39380: PUSH
39381: LD_VAR 0 7
39385: NONEQUAL
39386: OR
39387: IFFALSE 39407
// tmp := tmp diff i else
39389: LD_ADDR_VAR 0 3
39393: PUSH
39394: LD_VAR 0 3
39398: PUSH
39399: LD_VAR 0 4
39403: DIFF
39404: ST_TO_ADDR
39405: GO 39443
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , ecoSide ] ) , i ) ) ;
39407: LD_VAR 0 4
39411: PPUSH
39412: LD_INT 22
39414: PUSH
39415: LD_EXP 22
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PPUSH
39424: CALL_OW 69
39428: PPUSH
39429: LD_VAR 0 4
39433: PPUSH
39434: CALL_OW 74
39438: PPUSH
39439: CALL_OW 115
// end ;
39443: GO 39358
39445: POP
39446: POP
// until not tmp ;
39447: LD_VAR 0 3
39451: NOT
39452: IFFALSE 39341
// end ; end ;
39454: GO 38937
// end ;
39456: PPOPN 7
39458: END
// every 0 0$1 trigger ecoEventsAllow do var time , xy ;
39459: LD_EXP 30
39463: IFFALSE 39516
39465: GO 39467
39467: DISABLE
39468: LD_INT 0
39470: PPUSH
39471: PPUSH
// begin time := rand ( 1 1$00 , 10 10$00 ) ;
39472: LD_ADDR_VAR 0 1
39476: PUSH
39477: LD_INT 2100
39479: PPUSH
39480: LD_INT 21000
39482: PPUSH
39483: CALL_OW 12
39487: ST_TO_ADDR
// while true do
39488: LD_INT 1
39490: IFFALSE 39516
// begin wait ( time ) ;
39492: LD_VAR 0 1
39496: PPUSH
39497: CALL_OW 67
// if not ecoEventsAllow then
39501: LD_EXP 30
39505: NOT
39506: IFFALSE 39510
// continue ;
39508: GO 39488
// EcoEvent ( ) ;
39510: CALL 39519 0 0
// end ;
39514: GO 39488
// end ;
39516: PPOPN 2
39518: END
// export function EcoEvent ( ) ; var event , tmp , i ; begin
39519: LD_INT 0
39521: PPUSH
39522: PPUSH
39523: PPUSH
39524: PPUSH
// event := rand ( 1 , 5 ) ;
39525: LD_ADDR_VAR 0 2
39529: PUSH
39530: LD_INT 1
39532: PPUSH
39533: LD_INT 5
39535: PPUSH
39536: CALL_OW 12
39540: ST_TO_ADDR
// case event of 1 :
39541: LD_VAR 0 2
39545: PUSH
39546: LD_INT 1
39548: DOUBLE
39549: EQUAL
39550: IFTRUE 39554
39552: GO 39640
39554: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_building ] ) diff FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
39555: LD_ADDR_VAR 0 3
39559: PUSH
39560: LD_INT 21
39562: PUSH
39563: LD_INT 3
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PPUSH
39570: CALL_OW 69
39574: PUSH
39575: LD_INT 2
39577: PUSH
39578: LD_INT 30
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 30
39590: PUSH
39591: LD_INT 1
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: LIST
39602: PPUSH
39603: CALL_OW 69
39607: DIFF
39608: ST_TO_ADDR
// if tmp then
39609: LD_VAR 0 3
39613: IFFALSE 39638
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
39615: LD_VAR 0 3
39619: PUSH
39620: LD_INT 1
39622: PPUSH
39623: LD_VAR 0 3
39627: PPUSH
39628: CALL_OW 12
39632: ARRAY
39633: PPUSH
39634: CALL_OW 65
// end ; 2 :
39638: GO 39839
39640: LD_INT 2
39642: DOUBLE
39643: EQUAL
39644: IFTRUE 39648
39646: GO 39704
39648: POP
// begin uc_side := ecoSide ;
39649: LD_ADDR_OWVAR 20
39653: PUSH
39654: LD_EXP 22
39658: ST_TO_ADDR
// uc_nation := ecoNation ;
39659: LD_ADDR_OWVAR 21
39663: PUSH
39664: LD_EXP 23
39668: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 8 ) ;
39669: LD_INT 0
39671: PPUSH
39672: LD_INT 1
39674: PPUSH
39675: LD_INT 4
39677: PPUSH
39678: CALL_OW 12
39682: PPUSH
39683: LD_INT 8
39685: PPUSH
39686: CALL_OW 380
// PlaceUnitAnyWhere ( CreateHuman , true ) ;
39690: CALL_OW 44
39694: PPUSH
39695: LD_INT 1
39697: PPUSH
39698: CALL_OW 51
// end ; 3 :
39702: GO 39839
39704: LD_INT 3
39706: DOUBLE
39707: EQUAL
39708: IFTRUE 39712
39710: GO 39764
39712: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_vehicle ] ) ;
39713: LD_ADDR_VAR 0 3
39717: PUSH
39718: LD_INT 21
39720: PUSH
39721: LD_INT 2
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PPUSH
39728: CALL_OW 69
39732: ST_TO_ADDR
// if tmp then
39733: LD_VAR 0 3
39737: IFFALSE 39762
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
39739: LD_VAR 0 3
39743: PUSH
39744: LD_INT 1
39746: PPUSH
39747: LD_VAR 0 3
39751: PPUSH
39752: CALL_OW 12
39756: ARRAY
39757: PPUSH
39758: CALL_OW 65
// end ; 4 :
39762: GO 39839
39764: LD_INT 4
39766: DOUBLE
39767: EQUAL
39768: IFTRUE 39772
39770: GO 39827
39772: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_human ] ) ;
39773: LD_ADDR_VAR 0 3
39777: PUSH
39778: LD_INT 21
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PPUSH
39788: CALL_OW 69
39792: ST_TO_ADDR
// if tmp then
39793: LD_VAR 0 3
39797: IFFALSE 39825
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 190 ) ;
39799: LD_VAR 0 3
39803: PUSH
39804: LD_INT 1
39806: PPUSH
39807: LD_VAR 0 3
39811: PPUSH
39812: CALL_OW 12
39816: ARRAY
39817: PPUSH
39818: LD_INT 190
39820: PPUSH
39821: CALL_OW 234
// end ; 5 :
39825: GO 39839
39827: LD_INT 5
39829: DOUBLE
39830: EQUAL
39831: IFTRUE 39835
39833: GO 39838
39835: POP
// begin end ; end ;
39836: GO 39839
39838: POP
// end ;
39839: LD_VAR 0 1
39843: RET
// export function EcoEnableAllTechs ( ) ; var i ; begin
39844: LD_INT 0
39846: PPUSH
39847: PPUSH
// for i := 1 to 100 do
39848: LD_ADDR_VAR 0 2
39852: PUSH
39853: DOUBLE
39854: LD_INT 1
39856: DEC
39857: ST_TO_ADDR
39858: LD_INT 100
39860: PUSH
39861: FOR_TO
39862: IFFALSE 39883
// SetTech ( i , ecoSide , state_researched ) ;
39864: LD_VAR 0 2
39868: PPUSH
39869: LD_EXP 22
39873: PPUSH
39874: LD_INT 2
39876: PPUSH
39877: CALL_OW 322
39881: GO 39861
39883: POP
39884: POP
// end ;
39885: LD_VAR 0 1
39889: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
39890: LD_VAR 0 2
39894: PUSH
39895: LD_INT 102
39897: EQUAL
39898: IFFALSE 40090
// begin case p3 of 1 :
39900: LD_VAR 0 3
39904: PUSH
39905: LD_INT 1
39907: DOUBLE
39908: EQUAL
39909: IFTRUE 39913
39911: GO 39931
39913: POP
// ecoEventsAllow := Negate ( ecoEventsAllow ) ; 2 :
39914: LD_ADDR_EXP 30
39918: PUSH
39919: LD_EXP 30
39923: PPUSH
39924: CALL 37953 0 1
39928: ST_TO_ADDR
39929: GO 40088
39931: LD_INT 2
39933: DOUBLE
39934: EQUAL
39935: IFTRUE 39939
39937: GO 39957
39939: POP
// ecoAttacksAllow := Negate ( ecoAttacksAllow ) ; 3 :
39940: LD_ADDR_EXP 29
39944: PUSH
39945: LD_EXP 29
39949: PPUSH
39950: CALL 37953 0 1
39954: ST_TO_ADDR
39955: GO 40088
39957: LD_INT 3
39959: DOUBLE
39960: EQUAL
39961: IFTRUE 39965
39963: GO 39983
39965: POP
// ecoCratesDropAllow := Negate ( ecoCratesDropAllow ) ; 4 :
39966: LD_ADDR_EXP 28
39970: PUSH
39971: LD_EXP 28
39975: PPUSH
39976: CALL 37953 0 1
39980: ST_TO_ADDR
39981: GO 40088
39983: LD_INT 4
39985: DOUBLE
39986: EQUAL
39987: IFTRUE 39991
39989: GO 39998
39991: POP
// EcoEnableAllTechs ( ) ; 5 .. 8 :
39992: CALL 39844 0 0
39996: GO 40088
39998: LD_INT 5
40000: DOUBLE
40001: GREATEREQUAL
40002: IFFALSE 40010
40004: LD_INT 8
40006: DOUBLE
40007: LESSEQUAL
40008: IFTRUE 40012
40010: GO 40087
40012: POP
// begin uc_side := ecoSide ;
40013: LD_ADDR_OWVAR 20
40017: PUSH
40018: LD_EXP 22
40022: ST_TO_ADDR
// uc_nation := ecoNation ;
40023: LD_ADDR_OWVAR 21
40027: PUSH
40028: LD_EXP 23
40032: ST_TO_ADDR
// PrepareHuman ( false , p3 - 4 , 4 ) ;
40033: LD_INT 0
40035: PPUSH
40036: LD_VAR 0 3
40040: PUSH
40041: LD_INT 4
40043: MINUS
40044: PPUSH
40045: LD_INT 4
40047: PPUSH
40048: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , true ) ;
40052: CALL_OW 44
40056: PPUSH
40057: LD_EXP 25
40061: PUSH
40062: LD_INT 1
40064: ARRAY
40065: PPUSH
40066: LD_EXP 25
40070: PUSH
40071: LD_INT 2
40073: ARRAY
40074: PPUSH
40075: LD_INT 12
40077: PPUSH
40078: LD_INT 1
40080: PPUSH
40081: CALL_OW 50
// end ; end ;
40085: GO 40088
40087: POP
// end else
40088: GO 40124
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
40090: LD_VAR 0 1
40094: PPUSH
40095: LD_VAR 0 2
40099: PPUSH
40100: LD_VAR 0 3
40104: PPUSH
40105: LD_VAR 0 4
40109: PPUSH
40110: LD_VAR 0 5
40114: PPUSH
40115: LD_VAR 0 6
40119: PPUSH
40120: CALL 40127 0 6
// end ; end_of_file
40124: PPOPN 6
40126: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
40127: LD_INT 0
40129: PPUSH
// if p2 = 100 then
40130: LD_VAR 0 2
40134: PUSH
40135: LD_INT 100
40137: EQUAL
40138: IFFALSE 41087
// begin if not StreamModeActive then
40140: LD_EXP 33
40144: NOT
40145: IFFALSE 40155
// StreamModeActive := true ;
40147: LD_ADDR_EXP 33
40151: PUSH
40152: LD_INT 1
40154: ST_TO_ADDR
// if p3 = 0 then
40155: LD_VAR 0 3
40159: PUSH
40160: LD_INT 0
40162: EQUAL
40163: IFFALSE 40169
// InitStreamMode ;
40165: CALL 41247 0 0
// if p3 = 1 then
40169: LD_VAR 0 3
40173: PUSH
40174: LD_INT 1
40176: EQUAL
40177: IFFALSE 40187
// sRocket := true ;
40179: LD_ADDR_EXP 38
40183: PUSH
40184: LD_INT 1
40186: ST_TO_ADDR
// if p3 = 2 then
40187: LD_VAR 0 3
40191: PUSH
40192: LD_INT 2
40194: EQUAL
40195: IFFALSE 40205
// sSpeed := true ;
40197: LD_ADDR_EXP 37
40201: PUSH
40202: LD_INT 1
40204: ST_TO_ADDR
// if p3 = 3 then
40205: LD_VAR 0 3
40209: PUSH
40210: LD_INT 3
40212: EQUAL
40213: IFFALSE 40223
// sEngine := true ;
40215: LD_ADDR_EXP 39
40219: PUSH
40220: LD_INT 1
40222: ST_TO_ADDR
// if p3 = 4 then
40223: LD_VAR 0 3
40227: PUSH
40228: LD_INT 4
40230: EQUAL
40231: IFFALSE 40241
// sSpec := true ;
40233: LD_ADDR_EXP 36
40237: PUSH
40238: LD_INT 1
40240: ST_TO_ADDR
// if p3 = 5 then
40241: LD_VAR 0 3
40245: PUSH
40246: LD_INT 5
40248: EQUAL
40249: IFFALSE 40259
// sLevel := true ;
40251: LD_ADDR_EXP 40
40255: PUSH
40256: LD_INT 1
40258: ST_TO_ADDR
// if p3 = 6 then
40259: LD_VAR 0 3
40263: PUSH
40264: LD_INT 6
40266: EQUAL
40267: IFFALSE 40277
// sArmoury := true ;
40269: LD_ADDR_EXP 41
40273: PUSH
40274: LD_INT 1
40276: ST_TO_ADDR
// if p3 = 7 then
40277: LD_VAR 0 3
40281: PUSH
40282: LD_INT 7
40284: EQUAL
40285: IFFALSE 40295
// sRadar := true ;
40287: LD_ADDR_EXP 42
40291: PUSH
40292: LD_INT 1
40294: ST_TO_ADDR
// if p3 = 8 then
40295: LD_VAR 0 3
40299: PUSH
40300: LD_INT 8
40302: EQUAL
40303: IFFALSE 40313
// sBunker := true ;
40305: LD_ADDR_EXP 43
40309: PUSH
40310: LD_INT 1
40312: ST_TO_ADDR
// if p3 = 9 then
40313: LD_VAR 0 3
40317: PUSH
40318: LD_INT 9
40320: EQUAL
40321: IFFALSE 40331
// sHack := true ;
40323: LD_ADDR_EXP 44
40327: PUSH
40328: LD_INT 1
40330: ST_TO_ADDR
// if p3 = 10 then
40331: LD_VAR 0 3
40335: PUSH
40336: LD_INT 10
40338: EQUAL
40339: IFFALSE 40349
// sFire := true ;
40341: LD_ADDR_EXP 45
40345: PUSH
40346: LD_INT 1
40348: ST_TO_ADDR
// if p3 = 11 then
40349: LD_VAR 0 3
40353: PUSH
40354: LD_INT 11
40356: EQUAL
40357: IFFALSE 40367
// sRefresh := true ;
40359: LD_ADDR_EXP 46
40363: PUSH
40364: LD_INT 1
40366: ST_TO_ADDR
// if p3 = 12 then
40367: LD_VAR 0 3
40371: PUSH
40372: LD_INT 12
40374: EQUAL
40375: IFFALSE 40385
// sExp := true ;
40377: LD_ADDR_EXP 47
40381: PUSH
40382: LD_INT 1
40384: ST_TO_ADDR
// if p3 = 13 then
40385: LD_VAR 0 3
40389: PUSH
40390: LD_INT 13
40392: EQUAL
40393: IFFALSE 40403
// sDepot := true ;
40395: LD_ADDR_EXP 48
40399: PUSH
40400: LD_INT 1
40402: ST_TO_ADDR
// if p3 = 14 then
40403: LD_VAR 0 3
40407: PUSH
40408: LD_INT 14
40410: EQUAL
40411: IFFALSE 40421
// sFlag := true ;
40413: LD_ADDR_EXP 49
40417: PUSH
40418: LD_INT 1
40420: ST_TO_ADDR
// if p3 = 15 then
40421: LD_VAR 0 3
40425: PUSH
40426: LD_INT 15
40428: EQUAL
40429: IFFALSE 40439
// sKamikadze := true ;
40431: LD_ADDR_EXP 57
40435: PUSH
40436: LD_INT 1
40438: ST_TO_ADDR
// if p3 = 16 then
40439: LD_VAR 0 3
40443: PUSH
40444: LD_INT 16
40446: EQUAL
40447: IFFALSE 40457
// sTroll := true ;
40449: LD_ADDR_EXP 58
40453: PUSH
40454: LD_INT 1
40456: ST_TO_ADDR
// if p3 = 17 then
40457: LD_VAR 0 3
40461: PUSH
40462: LD_INT 17
40464: EQUAL
40465: IFFALSE 40475
// sSlow := true ;
40467: LD_ADDR_EXP 59
40471: PUSH
40472: LD_INT 1
40474: ST_TO_ADDR
// if p3 = 18 then
40475: LD_VAR 0 3
40479: PUSH
40480: LD_INT 18
40482: EQUAL
40483: IFFALSE 40493
// sLack := true ;
40485: LD_ADDR_EXP 60
40489: PUSH
40490: LD_INT 1
40492: ST_TO_ADDR
// if p3 = 19 then
40493: LD_VAR 0 3
40497: PUSH
40498: LD_INT 19
40500: EQUAL
40501: IFFALSE 40511
// sTank := true ;
40503: LD_ADDR_EXP 62
40507: PUSH
40508: LD_INT 1
40510: ST_TO_ADDR
// if p3 = 20 then
40511: LD_VAR 0 3
40515: PUSH
40516: LD_INT 20
40518: EQUAL
40519: IFFALSE 40529
// sRemote := true ;
40521: LD_ADDR_EXP 63
40525: PUSH
40526: LD_INT 1
40528: ST_TO_ADDR
// if p3 = 21 then
40529: LD_VAR 0 3
40533: PUSH
40534: LD_INT 21
40536: EQUAL
40537: IFFALSE 40547
// sPowell := true ;
40539: LD_ADDR_EXP 64
40543: PUSH
40544: LD_INT 1
40546: ST_TO_ADDR
// if p3 = 22 then
40547: LD_VAR 0 3
40551: PUSH
40552: LD_INT 22
40554: EQUAL
40555: IFFALSE 40565
// sTeleport := true ;
40557: LD_ADDR_EXP 67
40561: PUSH
40562: LD_INT 1
40564: ST_TO_ADDR
// if p3 = 23 then
40565: LD_VAR 0 3
40569: PUSH
40570: LD_INT 23
40572: EQUAL
40573: IFFALSE 40583
// sOilTower := true ;
40575: LD_ADDR_EXP 69
40579: PUSH
40580: LD_INT 1
40582: ST_TO_ADDR
// if p3 = 24 then
40583: LD_VAR 0 3
40587: PUSH
40588: LD_INT 24
40590: EQUAL
40591: IFFALSE 40601
// sShovel := true ;
40593: LD_ADDR_EXP 70
40597: PUSH
40598: LD_INT 1
40600: ST_TO_ADDR
// if p3 = 25 then
40601: LD_VAR 0 3
40605: PUSH
40606: LD_INT 25
40608: EQUAL
40609: IFFALSE 40619
// sSheik := true ;
40611: LD_ADDR_EXP 71
40615: PUSH
40616: LD_INT 1
40618: ST_TO_ADDR
// if p3 = 26 then
40619: LD_VAR 0 3
40623: PUSH
40624: LD_INT 26
40626: EQUAL
40627: IFFALSE 40637
// sEarthquake := true ;
40629: LD_ADDR_EXP 73
40633: PUSH
40634: LD_INT 1
40636: ST_TO_ADDR
// if p3 = 27 then
40637: LD_VAR 0 3
40641: PUSH
40642: LD_INT 27
40644: EQUAL
40645: IFFALSE 40655
// sAI := true ;
40647: LD_ADDR_EXP 74
40651: PUSH
40652: LD_INT 1
40654: ST_TO_ADDR
// if p3 = 28 then
40655: LD_VAR 0 3
40659: PUSH
40660: LD_INT 28
40662: EQUAL
40663: IFFALSE 40673
// sCargo := true ;
40665: LD_ADDR_EXP 77
40669: PUSH
40670: LD_INT 1
40672: ST_TO_ADDR
// if p3 = 29 then
40673: LD_VAR 0 3
40677: PUSH
40678: LD_INT 29
40680: EQUAL
40681: IFFALSE 40691
// sDLaser := true ;
40683: LD_ADDR_EXP 78
40687: PUSH
40688: LD_INT 1
40690: ST_TO_ADDR
// if p3 = 30 then
40691: LD_VAR 0 3
40695: PUSH
40696: LD_INT 30
40698: EQUAL
40699: IFFALSE 40709
// sExchange := true ;
40701: LD_ADDR_EXP 79
40705: PUSH
40706: LD_INT 1
40708: ST_TO_ADDR
// if p3 = 31 then
40709: LD_VAR 0 3
40713: PUSH
40714: LD_INT 31
40716: EQUAL
40717: IFFALSE 40727
// sFac := true ;
40719: LD_ADDR_EXP 80
40723: PUSH
40724: LD_INT 1
40726: ST_TO_ADDR
// if p3 = 32 then
40727: LD_VAR 0 3
40731: PUSH
40732: LD_INT 32
40734: EQUAL
40735: IFFALSE 40745
// sPower := true ;
40737: LD_ADDR_EXP 81
40741: PUSH
40742: LD_INT 1
40744: ST_TO_ADDR
// if p3 = 33 then
40745: LD_VAR 0 3
40749: PUSH
40750: LD_INT 33
40752: EQUAL
40753: IFFALSE 40763
// sRandom := true ;
40755: LD_ADDR_EXP 82
40759: PUSH
40760: LD_INT 1
40762: ST_TO_ADDR
// if p3 = 34 then
40763: LD_VAR 0 3
40767: PUSH
40768: LD_INT 34
40770: EQUAL
40771: IFFALSE 40781
// sShield := true ;
40773: LD_ADDR_EXP 83
40777: PUSH
40778: LD_INT 1
40780: ST_TO_ADDR
// if p3 = 35 then
40781: LD_VAR 0 3
40785: PUSH
40786: LD_INT 35
40788: EQUAL
40789: IFFALSE 40799
// sTime := true ;
40791: LD_ADDR_EXP 84
40795: PUSH
40796: LD_INT 1
40798: ST_TO_ADDR
// if p3 = 36 then
40799: LD_VAR 0 3
40803: PUSH
40804: LD_INT 36
40806: EQUAL
40807: IFFALSE 40817
// sTools := true ;
40809: LD_ADDR_EXP 85
40813: PUSH
40814: LD_INT 1
40816: ST_TO_ADDR
// if p3 = 101 then
40817: LD_VAR 0 3
40821: PUSH
40822: LD_INT 101
40824: EQUAL
40825: IFFALSE 40835
// sSold := true ;
40827: LD_ADDR_EXP 50
40831: PUSH
40832: LD_INT 1
40834: ST_TO_ADDR
// if p3 = 102 then
40835: LD_VAR 0 3
40839: PUSH
40840: LD_INT 102
40842: EQUAL
40843: IFFALSE 40853
// sDiff := true ;
40845: LD_ADDR_EXP 51
40849: PUSH
40850: LD_INT 1
40852: ST_TO_ADDR
// if p3 = 103 then
40853: LD_VAR 0 3
40857: PUSH
40858: LD_INT 103
40860: EQUAL
40861: IFFALSE 40871
// sFog := true ;
40863: LD_ADDR_EXP 54
40867: PUSH
40868: LD_INT 1
40870: ST_TO_ADDR
// if p3 = 104 then
40871: LD_VAR 0 3
40875: PUSH
40876: LD_INT 104
40878: EQUAL
40879: IFFALSE 40889
// sReset := true ;
40881: LD_ADDR_EXP 55
40885: PUSH
40886: LD_INT 1
40888: ST_TO_ADDR
// if p3 = 105 then
40889: LD_VAR 0 3
40893: PUSH
40894: LD_INT 105
40896: EQUAL
40897: IFFALSE 40907
// sSun := true ;
40899: LD_ADDR_EXP 56
40903: PUSH
40904: LD_INT 1
40906: ST_TO_ADDR
// if p3 = 106 then
40907: LD_VAR 0 3
40911: PUSH
40912: LD_INT 106
40914: EQUAL
40915: IFFALSE 40925
// sTiger := true ;
40917: LD_ADDR_EXP 52
40921: PUSH
40922: LD_INT 1
40924: ST_TO_ADDR
// if p3 = 107 then
40925: LD_VAR 0 3
40929: PUSH
40930: LD_INT 107
40932: EQUAL
40933: IFFALSE 40943
// sBomb := true ;
40935: LD_ADDR_EXP 53
40939: PUSH
40940: LD_INT 1
40942: ST_TO_ADDR
// if p3 = 108 then
40943: LD_VAR 0 3
40947: PUSH
40948: LD_INT 108
40950: EQUAL
40951: IFFALSE 40961
// sWound := true ;
40953: LD_ADDR_EXP 61
40957: PUSH
40958: LD_INT 1
40960: ST_TO_ADDR
// if p3 = 109 then
40961: LD_VAR 0 3
40965: PUSH
40966: LD_INT 109
40968: EQUAL
40969: IFFALSE 40979
// sBetray := true ;
40971: LD_ADDR_EXP 65
40975: PUSH
40976: LD_INT 1
40978: ST_TO_ADDR
// if p3 = 110 then
40979: LD_VAR 0 3
40983: PUSH
40984: LD_INT 110
40986: EQUAL
40987: IFFALSE 40997
// sContamin := true ;
40989: LD_ADDR_EXP 66
40993: PUSH
40994: LD_INT 1
40996: ST_TO_ADDR
// if p3 = 111 then
40997: LD_VAR 0 3
41001: PUSH
41002: LD_INT 111
41004: EQUAL
41005: IFFALSE 41015
// sOil := true ;
41007: LD_ADDR_EXP 68
41011: PUSH
41012: LD_INT 1
41014: ST_TO_ADDR
// if p3 = 112 then
41015: LD_VAR 0 3
41019: PUSH
41020: LD_INT 112
41022: EQUAL
41023: IFFALSE 41033
// sStu := true ;
41025: LD_ADDR_EXP 72
41029: PUSH
41030: LD_INT 1
41032: ST_TO_ADDR
// if p3 = 113 then
41033: LD_VAR 0 3
41037: PUSH
41038: LD_INT 113
41040: EQUAL
41041: IFFALSE 41051
// sBazooka := true ;
41043: LD_ADDR_EXP 75
41047: PUSH
41048: LD_INT 1
41050: ST_TO_ADDR
// if p3 = 114 then
41051: LD_VAR 0 3
41055: PUSH
41056: LD_INT 114
41058: EQUAL
41059: IFFALSE 41069
// sMortar := true ;
41061: LD_ADDR_EXP 76
41065: PUSH
41066: LD_INT 1
41068: ST_TO_ADDR
// if p3 = 115 then
41069: LD_VAR 0 3
41073: PUSH
41074: LD_INT 115
41076: EQUAL
41077: IFFALSE 41087
// sRanger := true ;
41079: LD_ADDR_EXP 86
41083: PUSH
41084: LD_INT 1
41086: ST_TO_ADDR
// end ; if p2 = 101 then
41087: LD_VAR 0 2
41091: PUSH
41092: LD_INT 101
41094: EQUAL
41095: IFFALSE 41223
// begin case p3 of 1 :
41097: LD_VAR 0 3
41101: PUSH
41102: LD_INT 1
41104: DOUBLE
41105: EQUAL
41106: IFTRUE 41110
41108: GO 41117
41110: POP
// hHackUnlimitedResources ; 2 :
41111: CALL 52260 0 0
41115: GO 41223
41117: LD_INT 2
41119: DOUBLE
41120: EQUAL
41121: IFTRUE 41125
41123: GO 41132
41125: POP
// hHackSetLevel10 ; 3 :
41126: CALL 52393 0 0
41130: GO 41223
41132: LD_INT 3
41134: DOUBLE
41135: EQUAL
41136: IFTRUE 41140
41138: GO 41147
41140: POP
// hHackSetLevel10YourUnits ; 4 :
41141: CALL 52478 0 0
41145: GO 41223
41147: LD_INT 4
41149: DOUBLE
41150: EQUAL
41151: IFTRUE 41155
41153: GO 41162
41155: POP
// hHackInvincible ; 5 :
41156: CALL 52926 0 0
41160: GO 41223
41162: LD_INT 5
41164: DOUBLE
41165: EQUAL
41166: IFTRUE 41170
41168: GO 41177
41170: POP
// hHackInvisible ; 6 :
41171: CALL 53037 0 0
41175: GO 41223
41177: LD_INT 6
41179: DOUBLE
41180: EQUAL
41181: IFTRUE 41185
41183: GO 41192
41185: POP
// hHackChangeYourSide ; 7 :
41186: CALL 53094 0 0
41190: GO 41223
41192: LD_INT 7
41194: DOUBLE
41195: EQUAL
41196: IFTRUE 41200
41198: GO 41207
41200: POP
// hHackChangeUnitSide ; 8 :
41201: CALL 53136 0 0
41205: GO 41223
41207: LD_INT 8
41209: DOUBLE
41210: EQUAL
41211: IFTRUE 41215
41213: GO 41222
41215: POP
// hHackFog ; end ;
41216: CALL 53237 0 0
41220: GO 41223
41222: POP
// end ; end ;
41223: LD_VAR 0 7
41227: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
41228: GO 41230
41230: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
41231: LD_STRING initStreamRollete();
41233: PPUSH
41234: CALL_OW 559
// InitStreamMode ;
41238: CALL 41247 0 0
// DefineStreamItems ( ) ;
41242: CALL 41687 0 0
// end ;
41246: END
// function InitStreamMode ; begin
41247: LD_INT 0
41249: PPUSH
// streamModeActive := false ;
41250: LD_ADDR_EXP 33
41254: PUSH
41255: LD_INT 0
41257: ST_TO_ADDR
// normalCounter := 36 ;
41258: LD_ADDR_EXP 34
41262: PUSH
41263: LD_INT 36
41265: ST_TO_ADDR
// hardcoreCounter := 16 ;
41266: LD_ADDR_EXP 35
41270: PUSH
41271: LD_INT 16
41273: ST_TO_ADDR
// sRocket := false ;
41274: LD_ADDR_EXP 38
41278: PUSH
41279: LD_INT 0
41281: ST_TO_ADDR
// sSpeed := false ;
41282: LD_ADDR_EXP 37
41286: PUSH
41287: LD_INT 0
41289: ST_TO_ADDR
// sEngine := false ;
41290: LD_ADDR_EXP 39
41294: PUSH
41295: LD_INT 0
41297: ST_TO_ADDR
// sSpec := false ;
41298: LD_ADDR_EXP 36
41302: PUSH
41303: LD_INT 0
41305: ST_TO_ADDR
// sLevel := false ;
41306: LD_ADDR_EXP 40
41310: PUSH
41311: LD_INT 0
41313: ST_TO_ADDR
// sArmoury := false ;
41314: LD_ADDR_EXP 41
41318: PUSH
41319: LD_INT 0
41321: ST_TO_ADDR
// sRadar := false ;
41322: LD_ADDR_EXP 42
41326: PUSH
41327: LD_INT 0
41329: ST_TO_ADDR
// sBunker := false ;
41330: LD_ADDR_EXP 43
41334: PUSH
41335: LD_INT 0
41337: ST_TO_ADDR
// sHack := false ;
41338: LD_ADDR_EXP 44
41342: PUSH
41343: LD_INT 0
41345: ST_TO_ADDR
// sFire := false ;
41346: LD_ADDR_EXP 45
41350: PUSH
41351: LD_INT 0
41353: ST_TO_ADDR
// sRefresh := false ;
41354: LD_ADDR_EXP 46
41358: PUSH
41359: LD_INT 0
41361: ST_TO_ADDR
// sExp := false ;
41362: LD_ADDR_EXP 47
41366: PUSH
41367: LD_INT 0
41369: ST_TO_ADDR
// sDepot := false ;
41370: LD_ADDR_EXP 48
41374: PUSH
41375: LD_INT 0
41377: ST_TO_ADDR
// sFlag := false ;
41378: LD_ADDR_EXP 49
41382: PUSH
41383: LD_INT 0
41385: ST_TO_ADDR
// sKamikadze := false ;
41386: LD_ADDR_EXP 57
41390: PUSH
41391: LD_INT 0
41393: ST_TO_ADDR
// sTroll := false ;
41394: LD_ADDR_EXP 58
41398: PUSH
41399: LD_INT 0
41401: ST_TO_ADDR
// sSlow := false ;
41402: LD_ADDR_EXP 59
41406: PUSH
41407: LD_INT 0
41409: ST_TO_ADDR
// sLack := false ;
41410: LD_ADDR_EXP 60
41414: PUSH
41415: LD_INT 0
41417: ST_TO_ADDR
// sTank := false ;
41418: LD_ADDR_EXP 62
41422: PUSH
41423: LD_INT 0
41425: ST_TO_ADDR
// sRemote := false ;
41426: LD_ADDR_EXP 63
41430: PUSH
41431: LD_INT 0
41433: ST_TO_ADDR
// sPowell := false ;
41434: LD_ADDR_EXP 64
41438: PUSH
41439: LD_INT 0
41441: ST_TO_ADDR
// sTeleport := false ;
41442: LD_ADDR_EXP 67
41446: PUSH
41447: LD_INT 0
41449: ST_TO_ADDR
// sOilTower := false ;
41450: LD_ADDR_EXP 69
41454: PUSH
41455: LD_INT 0
41457: ST_TO_ADDR
// sShovel := false ;
41458: LD_ADDR_EXP 70
41462: PUSH
41463: LD_INT 0
41465: ST_TO_ADDR
// sSheik := false ;
41466: LD_ADDR_EXP 71
41470: PUSH
41471: LD_INT 0
41473: ST_TO_ADDR
// sEarthquake := false ;
41474: LD_ADDR_EXP 73
41478: PUSH
41479: LD_INT 0
41481: ST_TO_ADDR
// sAI := false ;
41482: LD_ADDR_EXP 74
41486: PUSH
41487: LD_INT 0
41489: ST_TO_ADDR
// sCargo := false ;
41490: LD_ADDR_EXP 77
41494: PUSH
41495: LD_INT 0
41497: ST_TO_ADDR
// sDLaser := false ;
41498: LD_ADDR_EXP 78
41502: PUSH
41503: LD_INT 0
41505: ST_TO_ADDR
// sExchange := false ;
41506: LD_ADDR_EXP 79
41510: PUSH
41511: LD_INT 0
41513: ST_TO_ADDR
// sFac := false ;
41514: LD_ADDR_EXP 80
41518: PUSH
41519: LD_INT 0
41521: ST_TO_ADDR
// sPower := false ;
41522: LD_ADDR_EXP 81
41526: PUSH
41527: LD_INT 0
41529: ST_TO_ADDR
// sRandom := false ;
41530: LD_ADDR_EXP 82
41534: PUSH
41535: LD_INT 0
41537: ST_TO_ADDR
// sShield := false ;
41538: LD_ADDR_EXP 83
41542: PUSH
41543: LD_INT 0
41545: ST_TO_ADDR
// sTime := false ;
41546: LD_ADDR_EXP 84
41550: PUSH
41551: LD_INT 0
41553: ST_TO_ADDR
// sTools := false ;
41554: LD_ADDR_EXP 85
41558: PUSH
41559: LD_INT 0
41561: ST_TO_ADDR
// sSold := false ;
41562: LD_ADDR_EXP 50
41566: PUSH
41567: LD_INT 0
41569: ST_TO_ADDR
// sDiff := false ;
41570: LD_ADDR_EXP 51
41574: PUSH
41575: LD_INT 0
41577: ST_TO_ADDR
// sFog := false ;
41578: LD_ADDR_EXP 54
41582: PUSH
41583: LD_INT 0
41585: ST_TO_ADDR
// sReset := false ;
41586: LD_ADDR_EXP 55
41590: PUSH
41591: LD_INT 0
41593: ST_TO_ADDR
// sSun := false ;
41594: LD_ADDR_EXP 56
41598: PUSH
41599: LD_INT 0
41601: ST_TO_ADDR
// sTiger := false ;
41602: LD_ADDR_EXP 52
41606: PUSH
41607: LD_INT 0
41609: ST_TO_ADDR
// sBomb := false ;
41610: LD_ADDR_EXP 53
41614: PUSH
41615: LD_INT 0
41617: ST_TO_ADDR
// sWound := false ;
41618: LD_ADDR_EXP 61
41622: PUSH
41623: LD_INT 0
41625: ST_TO_ADDR
// sBetray := false ;
41626: LD_ADDR_EXP 65
41630: PUSH
41631: LD_INT 0
41633: ST_TO_ADDR
// sContamin := false ;
41634: LD_ADDR_EXP 66
41638: PUSH
41639: LD_INT 0
41641: ST_TO_ADDR
// sOil := false ;
41642: LD_ADDR_EXP 68
41646: PUSH
41647: LD_INT 0
41649: ST_TO_ADDR
// sStu := false ;
41650: LD_ADDR_EXP 72
41654: PUSH
41655: LD_INT 0
41657: ST_TO_ADDR
// sBazooka := false ;
41658: LD_ADDR_EXP 75
41662: PUSH
41663: LD_INT 0
41665: ST_TO_ADDR
// sMortar := false ;
41666: LD_ADDR_EXP 76
41670: PUSH
41671: LD_INT 0
41673: ST_TO_ADDR
// sRanger := false ;
41674: LD_ADDR_EXP 86
41678: PUSH
41679: LD_INT 0
41681: ST_TO_ADDR
// end ;
41682: LD_VAR 0 1
41686: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
41687: LD_INT 0
41689: PPUSH
41690: PPUSH
41691: PPUSH
41692: PPUSH
41693: PPUSH
// result := [ ] ;
41694: LD_ADDR_VAR 0 1
41698: PUSH
41699: EMPTY
41700: ST_TO_ADDR
// if campaign_id = 1 then
41701: LD_OWVAR 69
41705: PUSH
41706: LD_INT 1
41708: EQUAL
41709: IFFALSE 44647
// begin case mission_number of 1 :
41711: LD_OWVAR 70
41715: PUSH
41716: LD_INT 1
41718: DOUBLE
41719: EQUAL
41720: IFTRUE 41724
41722: GO 41788
41724: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
41725: LD_ADDR_VAR 0 1
41729: PUSH
41730: LD_INT 2
41732: PUSH
41733: LD_INT 4
41735: PUSH
41736: LD_INT 11
41738: PUSH
41739: LD_INT 12
41741: PUSH
41742: LD_INT 15
41744: PUSH
41745: LD_INT 16
41747: PUSH
41748: LD_INT 22
41750: PUSH
41751: LD_INT 23
41753: PUSH
41754: LD_INT 26
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 101
41770: PUSH
41771: LD_INT 102
41773: PUSH
41774: LD_INT 106
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: LIST
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: ST_TO_ADDR
41786: GO 44645
41788: LD_INT 2
41790: DOUBLE
41791: EQUAL
41792: IFTRUE 41796
41794: GO 41868
41796: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
41797: LD_ADDR_VAR 0 1
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: LD_INT 4
41807: PUSH
41808: LD_INT 11
41810: PUSH
41811: LD_INT 12
41813: PUSH
41814: LD_INT 15
41816: PUSH
41817: LD_INT 16
41819: PUSH
41820: LD_INT 22
41822: PUSH
41823: LD_INT 23
41825: PUSH
41826: LD_INT 26
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 101
41842: PUSH
41843: LD_INT 102
41845: PUSH
41846: LD_INT 105
41848: PUSH
41849: LD_INT 106
41851: PUSH
41852: LD_INT 108
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: ST_TO_ADDR
41866: GO 44645
41868: LD_INT 3
41870: DOUBLE
41871: EQUAL
41872: IFTRUE 41876
41874: GO 41952
41876: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
41877: LD_ADDR_VAR 0 1
41881: PUSH
41882: LD_INT 2
41884: PUSH
41885: LD_INT 4
41887: PUSH
41888: LD_INT 5
41890: PUSH
41891: LD_INT 11
41893: PUSH
41894: LD_INT 12
41896: PUSH
41897: LD_INT 15
41899: PUSH
41900: LD_INT 16
41902: PUSH
41903: LD_INT 22
41905: PUSH
41906: LD_INT 26
41908: PUSH
41909: LD_INT 36
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 101
41926: PUSH
41927: LD_INT 102
41929: PUSH
41930: LD_INT 105
41932: PUSH
41933: LD_INT 106
41935: PUSH
41936: LD_INT 108
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: ST_TO_ADDR
41950: GO 44645
41952: LD_INT 4
41954: DOUBLE
41955: EQUAL
41956: IFTRUE 41960
41958: GO 42044
41960: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
41961: LD_ADDR_VAR 0 1
41965: PUSH
41966: LD_INT 2
41968: PUSH
41969: LD_INT 4
41971: PUSH
41972: LD_INT 5
41974: PUSH
41975: LD_INT 8
41977: PUSH
41978: LD_INT 11
41980: PUSH
41981: LD_INT 12
41983: PUSH
41984: LD_INT 15
41986: PUSH
41987: LD_INT 16
41989: PUSH
41990: LD_INT 22
41992: PUSH
41993: LD_INT 23
41995: PUSH
41996: LD_INT 26
41998: PUSH
41999: LD_INT 36
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 101
42018: PUSH
42019: LD_INT 102
42021: PUSH
42022: LD_INT 105
42024: PUSH
42025: LD_INT 106
42027: PUSH
42028: LD_INT 108
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: ST_TO_ADDR
42042: GO 44645
42044: LD_INT 5
42046: DOUBLE
42047: EQUAL
42048: IFTRUE 42052
42050: GO 42152
42052: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
42053: LD_ADDR_VAR 0 1
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: LD_INT 4
42063: PUSH
42064: LD_INT 5
42066: PUSH
42067: LD_INT 6
42069: PUSH
42070: LD_INT 8
42072: PUSH
42073: LD_INT 11
42075: PUSH
42076: LD_INT 12
42078: PUSH
42079: LD_INT 15
42081: PUSH
42082: LD_INT 16
42084: PUSH
42085: LD_INT 22
42087: PUSH
42088: LD_INT 23
42090: PUSH
42091: LD_INT 25
42093: PUSH
42094: LD_INT 26
42096: PUSH
42097: LD_INT 36
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 101
42118: PUSH
42119: LD_INT 102
42121: PUSH
42122: LD_INT 105
42124: PUSH
42125: LD_INT 106
42127: PUSH
42128: LD_INT 108
42130: PUSH
42131: LD_INT 109
42133: PUSH
42134: LD_INT 112
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: ST_TO_ADDR
42150: GO 44645
42152: LD_INT 6
42154: DOUBLE
42155: EQUAL
42156: IFTRUE 42160
42158: GO 42280
42160: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
42161: LD_ADDR_VAR 0 1
42165: PUSH
42166: LD_INT 2
42168: PUSH
42169: LD_INT 4
42171: PUSH
42172: LD_INT 5
42174: PUSH
42175: LD_INT 6
42177: PUSH
42178: LD_INT 8
42180: PUSH
42181: LD_INT 11
42183: PUSH
42184: LD_INT 12
42186: PUSH
42187: LD_INT 15
42189: PUSH
42190: LD_INT 16
42192: PUSH
42193: LD_INT 20
42195: PUSH
42196: LD_INT 21
42198: PUSH
42199: LD_INT 22
42201: PUSH
42202: LD_INT 23
42204: PUSH
42205: LD_INT 25
42207: PUSH
42208: LD_INT 26
42210: PUSH
42211: LD_INT 30
42213: PUSH
42214: LD_INT 31
42216: PUSH
42217: LD_INT 32
42219: PUSH
42220: LD_INT 36
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 101
42246: PUSH
42247: LD_INT 102
42249: PUSH
42250: LD_INT 105
42252: PUSH
42253: LD_INT 106
42255: PUSH
42256: LD_INT 108
42258: PUSH
42259: LD_INT 109
42261: PUSH
42262: LD_INT 112
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: ST_TO_ADDR
42278: GO 44645
42280: LD_INT 7
42282: DOUBLE
42283: EQUAL
42284: IFTRUE 42288
42286: GO 42388
42288: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
42289: LD_ADDR_VAR 0 1
42293: PUSH
42294: LD_INT 2
42296: PUSH
42297: LD_INT 4
42299: PUSH
42300: LD_INT 5
42302: PUSH
42303: LD_INT 7
42305: PUSH
42306: LD_INT 11
42308: PUSH
42309: LD_INT 12
42311: PUSH
42312: LD_INT 15
42314: PUSH
42315: LD_INT 16
42317: PUSH
42318: LD_INT 20
42320: PUSH
42321: LD_INT 21
42323: PUSH
42324: LD_INT 22
42326: PUSH
42327: LD_INT 23
42329: PUSH
42330: LD_INT 25
42332: PUSH
42333: LD_INT 26
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 101
42354: PUSH
42355: LD_INT 102
42357: PUSH
42358: LD_INT 103
42360: PUSH
42361: LD_INT 105
42363: PUSH
42364: LD_INT 106
42366: PUSH
42367: LD_INT 108
42369: PUSH
42370: LD_INT 112
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: ST_TO_ADDR
42386: GO 44645
42388: LD_INT 8
42390: DOUBLE
42391: EQUAL
42392: IFTRUE 42396
42394: GO 42524
42396: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
42397: LD_ADDR_VAR 0 1
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: LD_INT 4
42407: PUSH
42408: LD_INT 5
42410: PUSH
42411: LD_INT 6
42413: PUSH
42414: LD_INT 7
42416: PUSH
42417: LD_INT 8
42419: PUSH
42420: LD_INT 11
42422: PUSH
42423: LD_INT 12
42425: PUSH
42426: LD_INT 15
42428: PUSH
42429: LD_INT 16
42431: PUSH
42432: LD_INT 20
42434: PUSH
42435: LD_INT 21
42437: PUSH
42438: LD_INT 22
42440: PUSH
42441: LD_INT 23
42443: PUSH
42444: LD_INT 25
42446: PUSH
42447: LD_INT 26
42449: PUSH
42450: LD_INT 30
42452: PUSH
42453: LD_INT 31
42455: PUSH
42456: LD_INT 32
42458: PUSH
42459: LD_INT 36
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 101
42486: PUSH
42487: LD_INT 102
42489: PUSH
42490: LD_INT 103
42492: PUSH
42493: LD_INT 105
42495: PUSH
42496: LD_INT 106
42498: PUSH
42499: LD_INT 108
42501: PUSH
42502: LD_INT 109
42504: PUSH
42505: LD_INT 112
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: ST_TO_ADDR
42522: GO 44645
42524: LD_INT 9
42526: DOUBLE
42527: EQUAL
42528: IFTRUE 42532
42530: GO 42668
42532: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
42533: LD_ADDR_VAR 0 1
42537: PUSH
42538: LD_INT 2
42540: PUSH
42541: LD_INT 4
42543: PUSH
42544: LD_INT 5
42546: PUSH
42547: LD_INT 6
42549: PUSH
42550: LD_INT 7
42552: PUSH
42553: LD_INT 8
42555: PUSH
42556: LD_INT 11
42558: PUSH
42559: LD_INT 12
42561: PUSH
42562: LD_INT 15
42564: PUSH
42565: LD_INT 16
42567: PUSH
42568: LD_INT 20
42570: PUSH
42571: LD_INT 21
42573: PUSH
42574: LD_INT 22
42576: PUSH
42577: LD_INT 23
42579: PUSH
42580: LD_INT 25
42582: PUSH
42583: LD_INT 26
42585: PUSH
42586: LD_INT 28
42588: PUSH
42589: LD_INT 30
42591: PUSH
42592: LD_INT 31
42594: PUSH
42595: LD_INT 32
42597: PUSH
42598: LD_INT 36
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 101
42626: PUSH
42627: LD_INT 102
42629: PUSH
42630: LD_INT 103
42632: PUSH
42633: LD_INT 105
42635: PUSH
42636: LD_INT 106
42638: PUSH
42639: LD_INT 108
42641: PUSH
42642: LD_INT 109
42644: PUSH
42645: LD_INT 112
42647: PUSH
42648: LD_INT 114
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: ST_TO_ADDR
42666: GO 44645
42668: LD_INT 10
42670: DOUBLE
42671: EQUAL
42672: IFTRUE 42676
42674: GO 42860
42676: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
42677: LD_ADDR_VAR 0 1
42681: PUSH
42682: LD_INT 2
42684: PUSH
42685: LD_INT 4
42687: PUSH
42688: LD_INT 5
42690: PUSH
42691: LD_INT 6
42693: PUSH
42694: LD_INT 7
42696: PUSH
42697: LD_INT 8
42699: PUSH
42700: LD_INT 9
42702: PUSH
42703: LD_INT 10
42705: PUSH
42706: LD_INT 11
42708: PUSH
42709: LD_INT 12
42711: PUSH
42712: LD_INT 13
42714: PUSH
42715: LD_INT 14
42717: PUSH
42718: LD_INT 15
42720: PUSH
42721: LD_INT 16
42723: PUSH
42724: LD_INT 17
42726: PUSH
42727: LD_INT 18
42729: PUSH
42730: LD_INT 19
42732: PUSH
42733: LD_INT 20
42735: PUSH
42736: LD_INT 21
42738: PUSH
42739: LD_INT 22
42741: PUSH
42742: LD_INT 23
42744: PUSH
42745: LD_INT 24
42747: PUSH
42748: LD_INT 25
42750: PUSH
42751: LD_INT 26
42753: PUSH
42754: LD_INT 28
42756: PUSH
42757: LD_INT 30
42759: PUSH
42760: LD_INT 31
42762: PUSH
42763: LD_INT 32
42765: PUSH
42766: LD_INT 36
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 101
42802: PUSH
42803: LD_INT 102
42805: PUSH
42806: LD_INT 103
42808: PUSH
42809: LD_INT 104
42811: PUSH
42812: LD_INT 105
42814: PUSH
42815: LD_INT 106
42817: PUSH
42818: LD_INT 107
42820: PUSH
42821: LD_INT 108
42823: PUSH
42824: LD_INT 109
42826: PUSH
42827: LD_INT 110
42829: PUSH
42830: LD_INT 111
42832: PUSH
42833: LD_INT 112
42835: PUSH
42836: LD_INT 114
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: ST_TO_ADDR
42858: GO 44645
42860: LD_INT 11
42862: DOUBLE
42863: EQUAL
42864: IFTRUE 42868
42866: GO 43060
42868: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
42869: LD_ADDR_VAR 0 1
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: LD_INT 3
42879: PUSH
42880: LD_INT 4
42882: PUSH
42883: LD_INT 5
42885: PUSH
42886: LD_INT 6
42888: PUSH
42889: LD_INT 7
42891: PUSH
42892: LD_INT 8
42894: PUSH
42895: LD_INT 9
42897: PUSH
42898: LD_INT 10
42900: PUSH
42901: LD_INT 11
42903: PUSH
42904: LD_INT 12
42906: PUSH
42907: LD_INT 13
42909: PUSH
42910: LD_INT 14
42912: PUSH
42913: LD_INT 15
42915: PUSH
42916: LD_INT 16
42918: PUSH
42919: LD_INT 17
42921: PUSH
42922: LD_INT 18
42924: PUSH
42925: LD_INT 19
42927: PUSH
42928: LD_INT 20
42930: PUSH
42931: LD_INT 21
42933: PUSH
42934: LD_INT 22
42936: PUSH
42937: LD_INT 23
42939: PUSH
42940: LD_INT 24
42942: PUSH
42943: LD_INT 25
42945: PUSH
42946: LD_INT 26
42948: PUSH
42949: LD_INT 28
42951: PUSH
42952: LD_INT 30
42954: PUSH
42955: LD_INT 31
42957: PUSH
42958: LD_INT 32
42960: PUSH
42961: LD_INT 34
42963: PUSH
42964: LD_INT 36
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 101
43002: PUSH
43003: LD_INT 102
43005: PUSH
43006: LD_INT 103
43008: PUSH
43009: LD_INT 104
43011: PUSH
43012: LD_INT 105
43014: PUSH
43015: LD_INT 106
43017: PUSH
43018: LD_INT 107
43020: PUSH
43021: LD_INT 108
43023: PUSH
43024: LD_INT 109
43026: PUSH
43027: LD_INT 110
43029: PUSH
43030: LD_INT 111
43032: PUSH
43033: LD_INT 112
43035: PUSH
43036: LD_INT 114
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: ST_TO_ADDR
43058: GO 44645
43060: LD_INT 12
43062: DOUBLE
43063: EQUAL
43064: IFTRUE 43068
43066: GO 43276
43068: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
43069: LD_ADDR_VAR 0 1
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: LD_INT 2
43079: PUSH
43080: LD_INT 3
43082: PUSH
43083: LD_INT 4
43085: PUSH
43086: LD_INT 5
43088: PUSH
43089: LD_INT 6
43091: PUSH
43092: LD_INT 7
43094: PUSH
43095: LD_INT 8
43097: PUSH
43098: LD_INT 9
43100: PUSH
43101: LD_INT 10
43103: PUSH
43104: LD_INT 11
43106: PUSH
43107: LD_INT 12
43109: PUSH
43110: LD_INT 13
43112: PUSH
43113: LD_INT 14
43115: PUSH
43116: LD_INT 15
43118: PUSH
43119: LD_INT 16
43121: PUSH
43122: LD_INT 17
43124: PUSH
43125: LD_INT 18
43127: PUSH
43128: LD_INT 19
43130: PUSH
43131: LD_INT 20
43133: PUSH
43134: LD_INT 21
43136: PUSH
43137: LD_INT 22
43139: PUSH
43140: LD_INT 23
43142: PUSH
43143: LD_INT 24
43145: PUSH
43146: LD_INT 25
43148: PUSH
43149: LD_INT 26
43151: PUSH
43152: LD_INT 27
43154: PUSH
43155: LD_INT 28
43157: PUSH
43158: LD_INT 30
43160: PUSH
43161: LD_INT 31
43163: PUSH
43164: LD_INT 32
43166: PUSH
43167: LD_INT 33
43169: PUSH
43170: LD_INT 34
43172: PUSH
43173: LD_INT 36
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 101
43214: PUSH
43215: LD_INT 102
43217: PUSH
43218: LD_INT 103
43220: PUSH
43221: LD_INT 104
43223: PUSH
43224: LD_INT 105
43226: PUSH
43227: LD_INT 106
43229: PUSH
43230: LD_INT 107
43232: PUSH
43233: LD_INT 108
43235: PUSH
43236: LD_INT 109
43238: PUSH
43239: LD_INT 110
43241: PUSH
43242: LD_INT 111
43244: PUSH
43245: LD_INT 112
43247: PUSH
43248: LD_INT 113
43250: PUSH
43251: LD_INT 114
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: ST_TO_ADDR
43274: GO 44645
43276: LD_INT 13
43278: DOUBLE
43279: EQUAL
43280: IFTRUE 43284
43282: GO 43480
43284: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
43285: LD_ADDR_VAR 0 1
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: LD_INT 3
43298: PUSH
43299: LD_INT 4
43301: PUSH
43302: LD_INT 5
43304: PUSH
43305: LD_INT 8
43307: PUSH
43308: LD_INT 9
43310: PUSH
43311: LD_INT 10
43313: PUSH
43314: LD_INT 11
43316: PUSH
43317: LD_INT 12
43319: PUSH
43320: LD_INT 14
43322: PUSH
43323: LD_INT 15
43325: PUSH
43326: LD_INT 16
43328: PUSH
43329: LD_INT 17
43331: PUSH
43332: LD_INT 18
43334: PUSH
43335: LD_INT 19
43337: PUSH
43338: LD_INT 20
43340: PUSH
43341: LD_INT 21
43343: PUSH
43344: LD_INT 22
43346: PUSH
43347: LD_INT 23
43349: PUSH
43350: LD_INT 24
43352: PUSH
43353: LD_INT 25
43355: PUSH
43356: LD_INT 26
43358: PUSH
43359: LD_INT 27
43361: PUSH
43362: LD_INT 28
43364: PUSH
43365: LD_INT 30
43367: PUSH
43368: LD_INT 31
43370: PUSH
43371: LD_INT 32
43373: PUSH
43374: LD_INT 33
43376: PUSH
43377: LD_INT 34
43379: PUSH
43380: LD_INT 36
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 101
43418: PUSH
43419: LD_INT 102
43421: PUSH
43422: LD_INT 103
43424: PUSH
43425: LD_INT 104
43427: PUSH
43428: LD_INT 105
43430: PUSH
43431: LD_INT 106
43433: PUSH
43434: LD_INT 107
43436: PUSH
43437: LD_INT 108
43439: PUSH
43440: LD_INT 109
43442: PUSH
43443: LD_INT 110
43445: PUSH
43446: LD_INT 111
43448: PUSH
43449: LD_INT 112
43451: PUSH
43452: LD_INT 113
43454: PUSH
43455: LD_INT 114
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: ST_TO_ADDR
43478: GO 44645
43480: LD_INT 14
43482: DOUBLE
43483: EQUAL
43484: IFTRUE 43488
43486: GO 43700
43488: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
43489: LD_ADDR_VAR 0 1
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: LD_INT 2
43499: PUSH
43500: LD_INT 3
43502: PUSH
43503: LD_INT 4
43505: PUSH
43506: LD_INT 5
43508: PUSH
43509: LD_INT 6
43511: PUSH
43512: LD_INT 7
43514: PUSH
43515: LD_INT 8
43517: PUSH
43518: LD_INT 9
43520: PUSH
43521: LD_INT 10
43523: PUSH
43524: LD_INT 11
43526: PUSH
43527: LD_INT 12
43529: PUSH
43530: LD_INT 13
43532: PUSH
43533: LD_INT 14
43535: PUSH
43536: LD_INT 15
43538: PUSH
43539: LD_INT 16
43541: PUSH
43542: LD_INT 17
43544: PUSH
43545: LD_INT 18
43547: PUSH
43548: LD_INT 19
43550: PUSH
43551: LD_INT 20
43553: PUSH
43554: LD_INT 21
43556: PUSH
43557: LD_INT 22
43559: PUSH
43560: LD_INT 23
43562: PUSH
43563: LD_INT 24
43565: PUSH
43566: LD_INT 25
43568: PUSH
43569: LD_INT 26
43571: PUSH
43572: LD_INT 27
43574: PUSH
43575: LD_INT 28
43577: PUSH
43578: LD_INT 29
43580: PUSH
43581: LD_INT 30
43583: PUSH
43584: LD_INT 31
43586: PUSH
43587: LD_INT 32
43589: PUSH
43590: LD_INT 33
43592: PUSH
43593: LD_INT 34
43595: PUSH
43596: LD_INT 36
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 101
43638: PUSH
43639: LD_INT 102
43641: PUSH
43642: LD_INT 103
43644: PUSH
43645: LD_INT 104
43647: PUSH
43648: LD_INT 105
43650: PUSH
43651: LD_INT 106
43653: PUSH
43654: LD_INT 107
43656: PUSH
43657: LD_INT 108
43659: PUSH
43660: LD_INT 109
43662: PUSH
43663: LD_INT 110
43665: PUSH
43666: LD_INT 111
43668: PUSH
43669: LD_INT 112
43671: PUSH
43672: LD_INT 113
43674: PUSH
43675: LD_INT 114
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: ST_TO_ADDR
43698: GO 44645
43700: LD_INT 15
43702: DOUBLE
43703: EQUAL
43704: IFTRUE 43708
43706: GO 43920
43708: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
43709: LD_ADDR_VAR 0 1
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: LD_INT 2
43719: PUSH
43720: LD_INT 3
43722: PUSH
43723: LD_INT 4
43725: PUSH
43726: LD_INT 5
43728: PUSH
43729: LD_INT 6
43731: PUSH
43732: LD_INT 7
43734: PUSH
43735: LD_INT 8
43737: PUSH
43738: LD_INT 9
43740: PUSH
43741: LD_INT 10
43743: PUSH
43744: LD_INT 11
43746: PUSH
43747: LD_INT 12
43749: PUSH
43750: LD_INT 13
43752: PUSH
43753: LD_INT 14
43755: PUSH
43756: LD_INT 15
43758: PUSH
43759: LD_INT 16
43761: PUSH
43762: LD_INT 17
43764: PUSH
43765: LD_INT 18
43767: PUSH
43768: LD_INT 19
43770: PUSH
43771: LD_INT 20
43773: PUSH
43774: LD_INT 21
43776: PUSH
43777: LD_INT 22
43779: PUSH
43780: LD_INT 23
43782: PUSH
43783: LD_INT 24
43785: PUSH
43786: LD_INT 25
43788: PUSH
43789: LD_INT 26
43791: PUSH
43792: LD_INT 27
43794: PUSH
43795: LD_INT 28
43797: PUSH
43798: LD_INT 29
43800: PUSH
43801: LD_INT 30
43803: PUSH
43804: LD_INT 31
43806: PUSH
43807: LD_INT 32
43809: PUSH
43810: LD_INT 33
43812: PUSH
43813: LD_INT 34
43815: PUSH
43816: LD_INT 36
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 101
43858: PUSH
43859: LD_INT 102
43861: PUSH
43862: LD_INT 103
43864: PUSH
43865: LD_INT 104
43867: PUSH
43868: LD_INT 105
43870: PUSH
43871: LD_INT 106
43873: PUSH
43874: LD_INT 107
43876: PUSH
43877: LD_INT 108
43879: PUSH
43880: LD_INT 109
43882: PUSH
43883: LD_INT 110
43885: PUSH
43886: LD_INT 111
43888: PUSH
43889: LD_INT 112
43891: PUSH
43892: LD_INT 113
43894: PUSH
43895: LD_INT 114
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: ST_TO_ADDR
43918: GO 44645
43920: LD_INT 16
43922: DOUBLE
43923: EQUAL
43924: IFTRUE 43928
43926: GO 44052
43928: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
43929: LD_ADDR_VAR 0 1
43933: PUSH
43934: LD_INT 2
43936: PUSH
43937: LD_INT 4
43939: PUSH
43940: LD_INT 5
43942: PUSH
43943: LD_INT 7
43945: PUSH
43946: LD_INT 11
43948: PUSH
43949: LD_INT 12
43951: PUSH
43952: LD_INT 15
43954: PUSH
43955: LD_INT 16
43957: PUSH
43958: LD_INT 20
43960: PUSH
43961: LD_INT 21
43963: PUSH
43964: LD_INT 22
43966: PUSH
43967: LD_INT 23
43969: PUSH
43970: LD_INT 25
43972: PUSH
43973: LD_INT 26
43975: PUSH
43976: LD_INT 30
43978: PUSH
43979: LD_INT 31
43981: PUSH
43982: LD_INT 32
43984: PUSH
43985: LD_INT 33
43987: PUSH
43988: LD_INT 34
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 101
44014: PUSH
44015: LD_INT 102
44017: PUSH
44018: LD_INT 103
44020: PUSH
44021: LD_INT 106
44023: PUSH
44024: LD_INT 108
44026: PUSH
44027: LD_INT 112
44029: PUSH
44030: LD_INT 113
44032: PUSH
44033: LD_INT 114
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: ST_TO_ADDR
44050: GO 44645
44052: LD_INT 17
44054: DOUBLE
44055: EQUAL
44056: IFTRUE 44060
44058: GO 44272
44060: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
44061: LD_ADDR_VAR 0 1
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: LD_INT 3
44074: PUSH
44075: LD_INT 4
44077: PUSH
44078: LD_INT 5
44080: PUSH
44081: LD_INT 6
44083: PUSH
44084: LD_INT 7
44086: PUSH
44087: LD_INT 8
44089: PUSH
44090: LD_INT 9
44092: PUSH
44093: LD_INT 10
44095: PUSH
44096: LD_INT 11
44098: PUSH
44099: LD_INT 12
44101: PUSH
44102: LD_INT 13
44104: PUSH
44105: LD_INT 14
44107: PUSH
44108: LD_INT 15
44110: PUSH
44111: LD_INT 16
44113: PUSH
44114: LD_INT 17
44116: PUSH
44117: LD_INT 18
44119: PUSH
44120: LD_INT 19
44122: PUSH
44123: LD_INT 20
44125: PUSH
44126: LD_INT 21
44128: PUSH
44129: LD_INT 22
44131: PUSH
44132: LD_INT 23
44134: PUSH
44135: LD_INT 24
44137: PUSH
44138: LD_INT 25
44140: PUSH
44141: LD_INT 26
44143: PUSH
44144: LD_INT 27
44146: PUSH
44147: LD_INT 28
44149: PUSH
44150: LD_INT 29
44152: PUSH
44153: LD_INT 30
44155: PUSH
44156: LD_INT 31
44158: PUSH
44159: LD_INT 32
44161: PUSH
44162: LD_INT 33
44164: PUSH
44165: LD_INT 34
44167: PUSH
44168: LD_INT 36
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 101
44210: PUSH
44211: LD_INT 102
44213: PUSH
44214: LD_INT 103
44216: PUSH
44217: LD_INT 104
44219: PUSH
44220: LD_INT 105
44222: PUSH
44223: LD_INT 106
44225: PUSH
44226: LD_INT 107
44228: PUSH
44229: LD_INT 108
44231: PUSH
44232: LD_INT 109
44234: PUSH
44235: LD_INT 110
44237: PUSH
44238: LD_INT 111
44240: PUSH
44241: LD_INT 112
44243: PUSH
44244: LD_INT 113
44246: PUSH
44247: LD_INT 114
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: ST_TO_ADDR
44270: GO 44645
44272: LD_INT 18
44274: DOUBLE
44275: EQUAL
44276: IFTRUE 44280
44278: GO 44416
44280: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
44281: LD_ADDR_VAR 0 1
44285: PUSH
44286: LD_INT 2
44288: PUSH
44289: LD_INT 4
44291: PUSH
44292: LD_INT 5
44294: PUSH
44295: LD_INT 7
44297: PUSH
44298: LD_INT 11
44300: PUSH
44301: LD_INT 12
44303: PUSH
44304: LD_INT 15
44306: PUSH
44307: LD_INT 16
44309: PUSH
44310: LD_INT 20
44312: PUSH
44313: LD_INT 21
44315: PUSH
44316: LD_INT 22
44318: PUSH
44319: LD_INT 23
44321: PUSH
44322: LD_INT 25
44324: PUSH
44325: LD_INT 26
44327: PUSH
44328: LD_INT 30
44330: PUSH
44331: LD_INT 31
44333: PUSH
44334: LD_INT 32
44336: PUSH
44337: LD_INT 33
44339: PUSH
44340: LD_INT 34
44342: PUSH
44343: LD_INT 35
44345: PUSH
44346: LD_INT 36
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 101
44374: PUSH
44375: LD_INT 102
44377: PUSH
44378: LD_INT 103
44380: PUSH
44381: LD_INT 106
44383: PUSH
44384: LD_INT 108
44386: PUSH
44387: LD_INT 112
44389: PUSH
44390: LD_INT 113
44392: PUSH
44393: LD_INT 114
44395: PUSH
44396: LD_INT 115
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: ST_TO_ADDR
44414: GO 44645
44416: LD_INT 19
44418: DOUBLE
44419: EQUAL
44420: IFTRUE 44424
44422: GO 44644
44424: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
44425: LD_ADDR_VAR 0 1
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: LD_INT 3
44438: PUSH
44439: LD_INT 4
44441: PUSH
44442: LD_INT 5
44444: PUSH
44445: LD_INT 6
44447: PUSH
44448: LD_INT 7
44450: PUSH
44451: LD_INT 8
44453: PUSH
44454: LD_INT 9
44456: PUSH
44457: LD_INT 10
44459: PUSH
44460: LD_INT 11
44462: PUSH
44463: LD_INT 12
44465: PUSH
44466: LD_INT 13
44468: PUSH
44469: LD_INT 14
44471: PUSH
44472: LD_INT 15
44474: PUSH
44475: LD_INT 16
44477: PUSH
44478: LD_INT 17
44480: PUSH
44481: LD_INT 18
44483: PUSH
44484: LD_INT 19
44486: PUSH
44487: LD_INT 20
44489: PUSH
44490: LD_INT 21
44492: PUSH
44493: LD_INT 22
44495: PUSH
44496: LD_INT 23
44498: PUSH
44499: LD_INT 24
44501: PUSH
44502: LD_INT 25
44504: PUSH
44505: LD_INT 26
44507: PUSH
44508: LD_INT 27
44510: PUSH
44511: LD_INT 28
44513: PUSH
44514: LD_INT 29
44516: PUSH
44517: LD_INT 30
44519: PUSH
44520: LD_INT 31
44522: PUSH
44523: LD_INT 32
44525: PUSH
44526: LD_INT 33
44528: PUSH
44529: LD_INT 34
44531: PUSH
44532: LD_INT 35
44534: PUSH
44535: LD_INT 36
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 101
44578: PUSH
44579: LD_INT 102
44581: PUSH
44582: LD_INT 103
44584: PUSH
44585: LD_INT 104
44587: PUSH
44588: LD_INT 105
44590: PUSH
44591: LD_INT 106
44593: PUSH
44594: LD_INT 107
44596: PUSH
44597: LD_INT 108
44599: PUSH
44600: LD_INT 109
44602: PUSH
44603: LD_INT 110
44605: PUSH
44606: LD_INT 111
44608: PUSH
44609: LD_INT 112
44611: PUSH
44612: LD_INT 113
44614: PUSH
44615: LD_INT 114
44617: PUSH
44618: LD_INT 115
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: ST_TO_ADDR
44642: GO 44645
44644: POP
// end else
44645: GO 44864
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
44647: LD_ADDR_VAR 0 1
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: LD_INT 3
44660: PUSH
44661: LD_INT 4
44663: PUSH
44664: LD_INT 5
44666: PUSH
44667: LD_INT 6
44669: PUSH
44670: LD_INT 7
44672: PUSH
44673: LD_INT 8
44675: PUSH
44676: LD_INT 9
44678: PUSH
44679: LD_INT 10
44681: PUSH
44682: LD_INT 11
44684: PUSH
44685: LD_INT 12
44687: PUSH
44688: LD_INT 13
44690: PUSH
44691: LD_INT 14
44693: PUSH
44694: LD_INT 15
44696: PUSH
44697: LD_INT 16
44699: PUSH
44700: LD_INT 17
44702: PUSH
44703: LD_INT 18
44705: PUSH
44706: LD_INT 19
44708: PUSH
44709: LD_INT 20
44711: PUSH
44712: LD_INT 21
44714: PUSH
44715: LD_INT 22
44717: PUSH
44718: LD_INT 23
44720: PUSH
44721: LD_INT 24
44723: PUSH
44724: LD_INT 25
44726: PUSH
44727: LD_INT 26
44729: PUSH
44730: LD_INT 27
44732: PUSH
44733: LD_INT 28
44735: PUSH
44736: LD_INT 29
44738: PUSH
44739: LD_INT 30
44741: PUSH
44742: LD_INT 31
44744: PUSH
44745: LD_INT 32
44747: PUSH
44748: LD_INT 33
44750: PUSH
44751: LD_INT 34
44753: PUSH
44754: LD_INT 35
44756: PUSH
44757: LD_INT 36
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 101
44800: PUSH
44801: LD_INT 102
44803: PUSH
44804: LD_INT 103
44806: PUSH
44807: LD_INT 104
44809: PUSH
44810: LD_INT 105
44812: PUSH
44813: LD_INT 106
44815: PUSH
44816: LD_INT 107
44818: PUSH
44819: LD_INT 108
44821: PUSH
44822: LD_INT 109
44824: PUSH
44825: LD_INT 110
44827: PUSH
44828: LD_INT 111
44830: PUSH
44831: LD_INT 112
44833: PUSH
44834: LD_INT 113
44836: PUSH
44837: LD_INT 114
44839: PUSH
44840: LD_INT 115
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: ST_TO_ADDR
// if result then
44864: LD_VAR 0 1
44868: IFFALSE 45157
// begin normal :=  ;
44870: LD_ADDR_VAR 0 3
44874: PUSH
44875: LD_STRING 
44877: ST_TO_ADDR
// hardcore :=  ;
44878: LD_ADDR_VAR 0 4
44882: PUSH
44883: LD_STRING 
44885: ST_TO_ADDR
// for i = 1 to normalCounter do
44886: LD_ADDR_VAR 0 5
44890: PUSH
44891: DOUBLE
44892: LD_INT 1
44894: DEC
44895: ST_TO_ADDR
44896: LD_EXP 34
44900: PUSH
44901: FOR_TO
44902: IFFALSE 45003
// begin tmp := 0 ;
44904: LD_ADDR_VAR 0 2
44908: PUSH
44909: LD_STRING 0
44911: ST_TO_ADDR
// if result [ 1 ] then
44912: LD_VAR 0 1
44916: PUSH
44917: LD_INT 1
44919: ARRAY
44920: IFFALSE 44985
// if result [ 1 ] [ 1 ] = i then
44922: LD_VAR 0 1
44926: PUSH
44927: LD_INT 1
44929: ARRAY
44930: PUSH
44931: LD_INT 1
44933: ARRAY
44934: PUSH
44935: LD_VAR 0 5
44939: EQUAL
44940: IFFALSE 44985
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
44942: LD_ADDR_VAR 0 1
44946: PUSH
44947: LD_VAR 0 1
44951: PPUSH
44952: LD_INT 1
44954: PPUSH
44955: LD_VAR 0 1
44959: PUSH
44960: LD_INT 1
44962: ARRAY
44963: PPUSH
44964: LD_INT 1
44966: PPUSH
44967: CALL_OW 3
44971: PPUSH
44972: CALL_OW 1
44976: ST_TO_ADDR
// tmp := 1 ;
44977: LD_ADDR_VAR 0 2
44981: PUSH
44982: LD_STRING 1
44984: ST_TO_ADDR
// end ; normal := normal & tmp ;
44985: LD_ADDR_VAR 0 3
44989: PUSH
44990: LD_VAR 0 3
44994: PUSH
44995: LD_VAR 0 2
44999: STR
45000: ST_TO_ADDR
// end ;
45001: GO 44901
45003: POP
45004: POP
// for i = 1 to hardcoreCounter do
45005: LD_ADDR_VAR 0 5
45009: PUSH
45010: DOUBLE
45011: LD_INT 1
45013: DEC
45014: ST_TO_ADDR
45015: LD_EXP 35
45019: PUSH
45020: FOR_TO
45021: IFFALSE 45126
// begin tmp := 0 ;
45023: LD_ADDR_VAR 0 2
45027: PUSH
45028: LD_STRING 0
45030: ST_TO_ADDR
// if result [ 2 ] then
45031: LD_VAR 0 1
45035: PUSH
45036: LD_INT 2
45038: ARRAY
45039: IFFALSE 45108
// if result [ 2 ] [ 1 ] = 100 + i then
45041: LD_VAR 0 1
45045: PUSH
45046: LD_INT 2
45048: ARRAY
45049: PUSH
45050: LD_INT 1
45052: ARRAY
45053: PUSH
45054: LD_INT 100
45056: PUSH
45057: LD_VAR 0 5
45061: PLUS
45062: EQUAL
45063: IFFALSE 45108
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
45065: LD_ADDR_VAR 0 1
45069: PUSH
45070: LD_VAR 0 1
45074: PPUSH
45075: LD_INT 2
45077: PPUSH
45078: LD_VAR 0 1
45082: PUSH
45083: LD_INT 2
45085: ARRAY
45086: PPUSH
45087: LD_INT 1
45089: PPUSH
45090: CALL_OW 3
45094: PPUSH
45095: CALL_OW 1
45099: ST_TO_ADDR
// tmp := 1 ;
45100: LD_ADDR_VAR 0 2
45104: PUSH
45105: LD_STRING 1
45107: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
45108: LD_ADDR_VAR 0 4
45112: PUSH
45113: LD_VAR 0 4
45117: PUSH
45118: LD_VAR 0 2
45122: STR
45123: ST_TO_ADDR
// end ;
45124: GO 45020
45126: POP
45127: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
45128: LD_STRING getStreamItemsFromMission("
45130: PUSH
45131: LD_VAR 0 3
45135: STR
45136: PUSH
45137: LD_STRING ","
45139: STR
45140: PUSH
45141: LD_VAR 0 4
45145: STR
45146: PUSH
45147: LD_STRING ")
45149: STR
45150: PPUSH
45151: CALL_OW 559
// end else
45155: GO 45164
// ToLua ( getStreamItemsFromMission("","") ) ;
45157: LD_STRING getStreamItemsFromMission("","")
45159: PPUSH
45160: CALL_OW 559
// end ;
45164: LD_VAR 0 1
45168: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
45169: LD_EXP 33
45173: PUSH
45174: LD_EXP 38
45178: AND
45179: IFFALSE 45303
45181: GO 45183
45183: DISABLE
45184: LD_INT 0
45186: PPUSH
45187: PPUSH
// begin enable ;
45188: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
45189: LD_ADDR_VAR 0 2
45193: PUSH
45194: LD_INT 22
45196: PUSH
45197: LD_OWVAR 2
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: LD_INT 34
45211: PUSH
45212: LD_INT 7
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 34
45221: PUSH
45222: LD_INT 45
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 34
45231: PUSH
45232: LD_INT 28
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 34
45241: PUSH
45242: LD_INT 47
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PPUSH
45260: CALL_OW 69
45264: ST_TO_ADDR
// if not tmp then
45265: LD_VAR 0 2
45269: NOT
45270: IFFALSE 45274
// exit ;
45272: GO 45303
// for i in tmp do
45274: LD_ADDR_VAR 0 1
45278: PUSH
45279: LD_VAR 0 2
45283: PUSH
45284: FOR_IN
45285: IFFALSE 45301
// begin SetLives ( i , 0 ) ;
45287: LD_VAR 0 1
45291: PPUSH
45292: LD_INT 0
45294: PPUSH
45295: CALL_OW 234
// end ;
45299: GO 45284
45301: POP
45302: POP
// end ;
45303: PPOPN 2
45305: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
45306: LD_EXP 33
45310: PUSH
45311: LD_EXP 39
45315: AND
45316: IFFALSE 45400
45318: GO 45320
45320: DISABLE
45321: LD_INT 0
45323: PPUSH
45324: PPUSH
// begin enable ;
45325: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
45326: LD_ADDR_VAR 0 2
45330: PUSH
45331: LD_INT 22
45333: PUSH
45334: LD_OWVAR 2
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 32
45345: PUSH
45346: LD_INT 3
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PPUSH
45357: CALL_OW 69
45361: ST_TO_ADDR
// if not tmp then
45362: LD_VAR 0 2
45366: NOT
45367: IFFALSE 45371
// exit ;
45369: GO 45400
// for i in tmp do
45371: LD_ADDR_VAR 0 1
45375: PUSH
45376: LD_VAR 0 2
45380: PUSH
45381: FOR_IN
45382: IFFALSE 45398
// begin SetLives ( i , 0 ) ;
45384: LD_VAR 0 1
45388: PPUSH
45389: LD_INT 0
45391: PPUSH
45392: CALL_OW 234
// end ;
45396: GO 45381
45398: POP
45399: POP
// end ;
45400: PPOPN 2
45402: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
45403: LD_EXP 33
45407: PUSH
45408: LD_EXP 36
45412: AND
45413: IFFALSE 45506
45415: GO 45417
45417: DISABLE
45418: LD_INT 0
45420: PPUSH
// begin enable ;
45421: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
45422: LD_ADDR_VAR 0 1
45426: PUSH
45427: LD_INT 22
45429: PUSH
45430: LD_OWVAR 2
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: LD_INT 25
45444: PUSH
45445: LD_INT 5
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 25
45454: PUSH
45455: LD_INT 9
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 25
45464: PUSH
45465: LD_INT 8
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PPUSH
45482: CALL_OW 69
45486: PUSH
45487: FOR_IN
45488: IFFALSE 45504
// begin SetClass ( i , 1 ) ;
45490: LD_VAR 0 1
45494: PPUSH
45495: LD_INT 1
45497: PPUSH
45498: CALL_OW 336
// end ;
45502: GO 45487
45504: POP
45505: POP
// end ;
45506: PPOPN 1
45508: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
45509: LD_EXP 33
45513: PUSH
45514: LD_EXP 37
45518: AND
45519: PUSH
45520: LD_OWVAR 65
45524: PUSH
45525: LD_INT 7
45527: LESS
45528: AND
45529: IFFALSE 45543
45531: GO 45533
45533: DISABLE
// begin enable ;
45534: ENABLE
// game_speed := 7 ;
45535: LD_ADDR_OWVAR 65
45539: PUSH
45540: LD_INT 7
45542: ST_TO_ADDR
// end ;
45543: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
45544: LD_EXP 33
45548: PUSH
45549: LD_EXP 40
45553: AND
45554: IFFALSE 45756
45556: GO 45558
45558: DISABLE
45559: LD_INT 0
45561: PPUSH
45562: PPUSH
45563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
45564: LD_ADDR_VAR 0 3
45568: PUSH
45569: LD_INT 81
45571: PUSH
45572: LD_OWVAR 2
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 21
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PPUSH
45595: CALL_OW 69
45599: ST_TO_ADDR
// if not tmp then
45600: LD_VAR 0 3
45604: NOT
45605: IFFALSE 45609
// exit ;
45607: GO 45756
// if tmp > 5 then
45609: LD_VAR 0 3
45613: PUSH
45614: LD_INT 5
45616: GREATER
45617: IFFALSE 45629
// k := 5 else
45619: LD_ADDR_VAR 0 2
45623: PUSH
45624: LD_INT 5
45626: ST_TO_ADDR
45627: GO 45639
// k := tmp ;
45629: LD_ADDR_VAR 0 2
45633: PUSH
45634: LD_VAR 0 3
45638: ST_TO_ADDR
// for i := 1 to k do
45639: LD_ADDR_VAR 0 1
45643: PUSH
45644: DOUBLE
45645: LD_INT 1
45647: DEC
45648: ST_TO_ADDR
45649: LD_VAR 0 2
45653: PUSH
45654: FOR_TO
45655: IFFALSE 45754
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
45657: LD_VAR 0 3
45661: PUSH
45662: LD_VAR 0 1
45666: ARRAY
45667: PPUSH
45668: LD_VAR 0 1
45672: PUSH
45673: LD_INT 4
45675: MOD
45676: PUSH
45677: LD_INT 1
45679: PLUS
45680: PPUSH
45681: CALL_OW 259
45685: PUSH
45686: LD_INT 10
45688: LESS
45689: IFFALSE 45752
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
45691: LD_VAR 0 3
45695: PUSH
45696: LD_VAR 0 1
45700: ARRAY
45701: PPUSH
45702: LD_VAR 0 1
45706: PUSH
45707: LD_INT 4
45709: MOD
45710: PUSH
45711: LD_INT 1
45713: PLUS
45714: PPUSH
45715: LD_VAR 0 3
45719: PUSH
45720: LD_VAR 0 1
45724: ARRAY
45725: PPUSH
45726: LD_VAR 0 1
45730: PUSH
45731: LD_INT 4
45733: MOD
45734: PUSH
45735: LD_INT 1
45737: PLUS
45738: PPUSH
45739: CALL_OW 259
45743: PUSH
45744: LD_INT 1
45746: PLUS
45747: PPUSH
45748: CALL_OW 237
45752: GO 45654
45754: POP
45755: POP
// end ;
45756: PPOPN 3
45758: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
45759: LD_EXP 33
45763: PUSH
45764: LD_EXP 41
45768: AND
45769: IFFALSE 45789
45771: GO 45773
45773: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
45774: LD_INT 4
45776: PPUSH
45777: LD_OWVAR 2
45781: PPUSH
45782: LD_INT 0
45784: PPUSH
45785: CALL_OW 324
45789: END
// every 0 0$1 trigger StreamModeActive and sShovel do
45790: LD_EXP 33
45794: PUSH
45795: LD_EXP 70
45799: AND
45800: IFFALSE 45820
45802: GO 45804
45804: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
45805: LD_INT 19
45807: PPUSH
45808: LD_OWVAR 2
45812: PPUSH
45813: LD_INT 0
45815: PPUSH
45816: CALL_OW 324
45820: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
45821: LD_EXP 33
45825: PUSH
45826: LD_EXP 42
45830: AND
45831: IFFALSE 45933
45833: GO 45835
45835: DISABLE
45836: LD_INT 0
45838: PPUSH
45839: PPUSH
// begin enable ;
45840: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
45841: LD_ADDR_VAR 0 2
45845: PUSH
45846: LD_INT 22
45848: PUSH
45849: LD_OWVAR 2
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 2
45860: PUSH
45861: LD_INT 34
45863: PUSH
45864: LD_INT 11
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 34
45873: PUSH
45874: LD_INT 30
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: LIST
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PPUSH
45890: CALL_OW 69
45894: ST_TO_ADDR
// if not tmp then
45895: LD_VAR 0 2
45899: NOT
45900: IFFALSE 45904
// exit ;
45902: GO 45933
// for i in tmp do
45904: LD_ADDR_VAR 0 1
45908: PUSH
45909: LD_VAR 0 2
45913: PUSH
45914: FOR_IN
45915: IFFALSE 45931
// begin SetLives ( i , 0 ) ;
45917: LD_VAR 0 1
45921: PPUSH
45922: LD_INT 0
45924: PPUSH
45925: CALL_OW 234
// end ;
45929: GO 45914
45931: POP
45932: POP
// end ;
45933: PPOPN 2
45935: END
// every 0 0$1 trigger StreamModeActive and sBunker do
45936: LD_EXP 33
45940: PUSH
45941: LD_EXP 43
45945: AND
45946: IFFALSE 45966
45948: GO 45950
45950: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
45951: LD_INT 32
45953: PPUSH
45954: LD_OWVAR 2
45958: PPUSH
45959: LD_INT 0
45961: PPUSH
45962: CALL_OW 324
45966: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
45967: LD_EXP 33
45971: PUSH
45972: LD_EXP 44
45976: AND
45977: IFFALSE 46158
45979: GO 45981
45981: DISABLE
45982: LD_INT 0
45984: PPUSH
45985: PPUSH
45986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
45987: LD_ADDR_VAR 0 2
45991: PUSH
45992: LD_INT 22
45994: PUSH
45995: LD_OWVAR 2
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 33
46006: PUSH
46007: LD_INT 3
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PPUSH
46018: CALL_OW 69
46022: ST_TO_ADDR
// if not tmp then
46023: LD_VAR 0 2
46027: NOT
46028: IFFALSE 46032
// exit ;
46030: GO 46158
// side := 0 ;
46032: LD_ADDR_VAR 0 3
46036: PUSH
46037: LD_INT 0
46039: ST_TO_ADDR
// for i := 1 to 8 do
46040: LD_ADDR_VAR 0 1
46044: PUSH
46045: DOUBLE
46046: LD_INT 1
46048: DEC
46049: ST_TO_ADDR
46050: LD_INT 8
46052: PUSH
46053: FOR_TO
46054: IFFALSE 46102
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
46056: LD_OWVAR 2
46060: PUSH
46061: LD_VAR 0 1
46065: NONEQUAL
46066: PUSH
46067: LD_OWVAR 2
46071: PPUSH
46072: LD_VAR 0 1
46076: PPUSH
46077: CALL_OW 81
46081: PUSH
46082: LD_INT 2
46084: EQUAL
46085: AND
46086: IFFALSE 46100
// begin side := i ;
46088: LD_ADDR_VAR 0 3
46092: PUSH
46093: LD_VAR 0 1
46097: ST_TO_ADDR
// break ;
46098: GO 46102
// end ;
46100: GO 46053
46102: POP
46103: POP
// if not side then
46104: LD_VAR 0 3
46108: NOT
46109: IFFALSE 46113
// exit ;
46111: GO 46158
// for i := 1 to tmp do
46113: LD_ADDR_VAR 0 1
46117: PUSH
46118: DOUBLE
46119: LD_INT 1
46121: DEC
46122: ST_TO_ADDR
46123: LD_VAR 0 2
46127: PUSH
46128: FOR_TO
46129: IFFALSE 46156
// if Prob ( 60 ) then
46131: LD_INT 60
46133: PPUSH
46134: CALL_OW 13
46138: IFFALSE 46154
// SetSide ( i , side ) ;
46140: LD_VAR 0 1
46144: PPUSH
46145: LD_VAR 0 3
46149: PPUSH
46150: CALL_OW 235
46154: GO 46128
46156: POP
46157: POP
// end ;
46158: PPOPN 3
46160: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
46161: LD_EXP 33
46165: PUSH
46166: LD_EXP 46
46170: AND
46171: IFFALSE 46290
46173: GO 46175
46175: DISABLE
46176: LD_INT 0
46178: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
46179: LD_ADDR_VAR 0 1
46183: PUSH
46184: LD_INT 22
46186: PUSH
46187: LD_OWVAR 2
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 21
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 3
46208: PUSH
46209: LD_INT 23
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: LIST
46227: PPUSH
46228: CALL_OW 69
46232: PUSH
46233: FOR_IN
46234: IFFALSE 46288
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
46236: LD_VAR 0 1
46240: PPUSH
46241: CALL_OW 257
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: LD_INT 3
46254: PUSH
46255: LD_INT 4
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: IN
46264: IFFALSE 46286
// SetClass ( un , rand ( 1 , 4 ) ) ;
46266: LD_VAR 0 1
46270: PPUSH
46271: LD_INT 1
46273: PPUSH
46274: LD_INT 4
46276: PPUSH
46277: CALL_OW 12
46281: PPUSH
46282: CALL_OW 336
46286: GO 46233
46288: POP
46289: POP
// end ;
46290: PPOPN 1
46292: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
46293: LD_EXP 33
46297: PUSH
46298: LD_EXP 45
46302: AND
46303: IFFALSE 46382
46305: GO 46307
46307: DISABLE
46308: LD_INT 0
46310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
46311: LD_ADDR_VAR 0 1
46315: PUSH
46316: LD_INT 22
46318: PUSH
46319: LD_OWVAR 2
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 21
46330: PUSH
46331: LD_INT 3
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PPUSH
46342: CALL_OW 69
46346: ST_TO_ADDR
// if not tmp then
46347: LD_VAR 0 1
46351: NOT
46352: IFFALSE 46356
// exit ;
46354: GO 46382
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
46356: LD_VAR 0 1
46360: PUSH
46361: LD_INT 1
46363: PPUSH
46364: LD_VAR 0 1
46368: PPUSH
46369: CALL_OW 12
46373: ARRAY
46374: PPUSH
46375: LD_INT 100
46377: PPUSH
46378: CALL_OW 234
// end ;
46382: PPOPN 1
46384: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
46385: LD_EXP 33
46389: PUSH
46390: LD_EXP 47
46394: AND
46395: IFFALSE 46493
46397: GO 46399
46399: DISABLE
46400: LD_INT 0
46402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
46403: LD_ADDR_VAR 0 1
46407: PUSH
46408: LD_INT 22
46410: PUSH
46411: LD_OWVAR 2
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 21
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PPUSH
46434: CALL_OW 69
46438: ST_TO_ADDR
// if not tmp then
46439: LD_VAR 0 1
46443: NOT
46444: IFFALSE 46448
// exit ;
46446: GO 46493
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
46448: LD_VAR 0 1
46452: PUSH
46453: LD_INT 1
46455: PPUSH
46456: LD_VAR 0 1
46460: PPUSH
46461: CALL_OW 12
46465: ARRAY
46466: PPUSH
46467: LD_INT 1
46469: PPUSH
46470: LD_INT 4
46472: PPUSH
46473: CALL_OW 12
46477: PPUSH
46478: LD_INT 3000
46480: PPUSH
46481: LD_INT 9000
46483: PPUSH
46484: CALL_OW 12
46488: PPUSH
46489: CALL_OW 492
// end ;
46493: PPOPN 1
46495: END
// every 0 0$1 trigger StreamModeActive and sDepot do
46496: LD_EXP 33
46500: PUSH
46501: LD_EXP 48
46505: AND
46506: IFFALSE 46526
46508: GO 46510
46510: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
46511: LD_INT 1
46513: PPUSH
46514: LD_OWVAR 2
46518: PPUSH
46519: LD_INT 0
46521: PPUSH
46522: CALL_OW 324
46526: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
46527: LD_EXP 33
46531: PUSH
46532: LD_EXP 49
46536: AND
46537: IFFALSE 46620
46539: GO 46541
46541: DISABLE
46542: LD_INT 0
46544: PPUSH
46545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
46546: LD_ADDR_VAR 0 2
46550: PUSH
46551: LD_INT 22
46553: PUSH
46554: LD_OWVAR 2
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 21
46565: PUSH
46566: LD_INT 3
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PPUSH
46577: CALL_OW 69
46581: ST_TO_ADDR
// if not tmp then
46582: LD_VAR 0 2
46586: NOT
46587: IFFALSE 46591
// exit ;
46589: GO 46620
// for i in tmp do
46591: LD_ADDR_VAR 0 1
46595: PUSH
46596: LD_VAR 0 2
46600: PUSH
46601: FOR_IN
46602: IFFALSE 46618
// SetBLevel ( i , 10 ) ;
46604: LD_VAR 0 1
46608: PPUSH
46609: LD_INT 10
46611: PPUSH
46612: CALL_OW 241
46616: GO 46601
46618: POP
46619: POP
// end ;
46620: PPOPN 2
46622: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
46623: LD_EXP 33
46627: PUSH
46628: LD_EXP 50
46632: AND
46633: IFFALSE 46744
46635: GO 46637
46637: DISABLE
46638: LD_INT 0
46640: PPUSH
46641: PPUSH
46642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
46643: LD_ADDR_VAR 0 3
46647: PUSH
46648: LD_INT 22
46650: PUSH
46651: LD_OWVAR 2
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 25
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PPUSH
46674: CALL_OW 69
46678: ST_TO_ADDR
// if not tmp then
46679: LD_VAR 0 3
46683: NOT
46684: IFFALSE 46688
// exit ;
46686: GO 46744
// un := tmp [ rand ( 1 , tmp ) ] ;
46688: LD_ADDR_VAR 0 2
46692: PUSH
46693: LD_VAR 0 3
46697: PUSH
46698: LD_INT 1
46700: PPUSH
46701: LD_VAR 0 3
46705: PPUSH
46706: CALL_OW 12
46710: ARRAY
46711: ST_TO_ADDR
// if Crawls ( un ) then
46712: LD_VAR 0 2
46716: PPUSH
46717: CALL_OW 318
46721: IFFALSE 46732
// ComWalk ( un ) ;
46723: LD_VAR 0 2
46727: PPUSH
46728: CALL_OW 138
// SetClass ( un , class_sniper ) ;
46732: LD_VAR 0 2
46736: PPUSH
46737: LD_INT 5
46739: PPUSH
46740: CALL_OW 336
// end ;
46744: PPOPN 3
46746: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
46747: LD_EXP 33
46751: PUSH
46752: LD_EXP 51
46756: AND
46757: PUSH
46758: LD_OWVAR 67
46762: PUSH
46763: LD_INT 3
46765: LESS
46766: AND
46767: IFFALSE 46786
46769: GO 46771
46771: DISABLE
// Difficulty := Difficulty + 1 ;
46772: LD_ADDR_OWVAR 67
46776: PUSH
46777: LD_OWVAR 67
46781: PUSH
46782: LD_INT 1
46784: PLUS
46785: ST_TO_ADDR
46786: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
46787: LD_EXP 33
46791: PUSH
46792: LD_EXP 52
46796: AND
46797: IFFALSE 46900
46799: GO 46801
46801: DISABLE
46802: LD_INT 0
46804: PPUSH
// begin for i := 1 to 5 do
46805: LD_ADDR_VAR 0 1
46809: PUSH
46810: DOUBLE
46811: LD_INT 1
46813: DEC
46814: ST_TO_ADDR
46815: LD_INT 5
46817: PUSH
46818: FOR_TO
46819: IFFALSE 46898
// begin uc_nation := nation_nature ;
46821: LD_ADDR_OWVAR 21
46825: PUSH
46826: LD_INT 0
46828: ST_TO_ADDR
// uc_side := 0 ;
46829: LD_ADDR_OWVAR 20
46833: PUSH
46834: LD_INT 0
46836: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
46837: LD_ADDR_OWVAR 29
46841: PUSH
46842: LD_INT 12
46844: PUSH
46845: LD_INT 12
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: ST_TO_ADDR
// hc_agressivity := 20 ;
46852: LD_ADDR_OWVAR 35
46856: PUSH
46857: LD_INT 20
46859: ST_TO_ADDR
// hc_class := class_tiger ;
46860: LD_ADDR_OWVAR 28
46864: PUSH
46865: LD_INT 14
46867: ST_TO_ADDR
// hc_gallery :=  ;
46868: LD_ADDR_OWVAR 33
46872: PUSH
46873: LD_STRING 
46875: ST_TO_ADDR
// hc_name :=  ;
46876: LD_ADDR_OWVAR 26
46880: PUSH
46881: LD_STRING 
46883: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
46884: CALL_OW 44
46888: PPUSH
46889: LD_INT 0
46891: PPUSH
46892: CALL_OW 51
// end ;
46896: GO 46818
46898: POP
46899: POP
// end ;
46900: PPOPN 1
46902: END
// every 0 0$1 trigger StreamModeActive and sBomb do
46903: LD_EXP 33
46907: PUSH
46908: LD_EXP 53
46912: AND
46913: IFFALSE 46922
46915: GO 46917
46917: DISABLE
// StreamSibBomb ;
46918: CALL 46923 0 0
46922: END
// export function StreamSibBomb ; var i , x , y ; begin
46923: LD_INT 0
46925: PPUSH
46926: PPUSH
46927: PPUSH
46928: PPUSH
// result := false ;
46929: LD_ADDR_VAR 0 1
46933: PUSH
46934: LD_INT 0
46936: ST_TO_ADDR
// for i := 1 to 16 do
46937: LD_ADDR_VAR 0 2
46941: PUSH
46942: DOUBLE
46943: LD_INT 1
46945: DEC
46946: ST_TO_ADDR
46947: LD_INT 16
46949: PUSH
46950: FOR_TO
46951: IFFALSE 47150
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
46953: LD_ADDR_VAR 0 3
46957: PUSH
46958: LD_INT 10
46960: PUSH
46961: LD_INT 20
46963: PUSH
46964: LD_INT 30
46966: PUSH
46967: LD_INT 40
46969: PUSH
46970: LD_INT 50
46972: PUSH
46973: LD_INT 60
46975: PUSH
46976: LD_INT 70
46978: PUSH
46979: LD_INT 80
46981: PUSH
46982: LD_INT 90
46984: PUSH
46985: LD_INT 100
46987: PUSH
46988: LD_INT 110
46990: PUSH
46991: LD_INT 120
46993: PUSH
46994: LD_INT 130
46996: PUSH
46997: LD_INT 140
46999: PUSH
47000: LD_INT 150
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: PPUSH
47023: LD_INT 15
47025: PPUSH
47026: CALL_OW 12
47030: ARRAY
47031: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
47032: LD_ADDR_VAR 0 4
47036: PUSH
47037: LD_INT 10
47039: PUSH
47040: LD_INT 20
47042: PUSH
47043: LD_INT 30
47045: PUSH
47046: LD_INT 40
47048: PUSH
47049: LD_INT 50
47051: PUSH
47052: LD_INT 60
47054: PUSH
47055: LD_INT 70
47057: PUSH
47058: LD_INT 80
47060: PUSH
47061: LD_INT 90
47063: PUSH
47064: LD_INT 100
47066: PUSH
47067: LD_INT 110
47069: PUSH
47070: LD_INT 120
47072: PUSH
47073: LD_INT 130
47075: PUSH
47076: LD_INT 140
47078: PUSH
47079: LD_INT 150
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: PPUSH
47102: LD_INT 15
47104: PPUSH
47105: CALL_OW 12
47109: ARRAY
47110: ST_TO_ADDR
// if ValidHex ( x , y ) then
47111: LD_VAR 0 3
47115: PPUSH
47116: LD_VAR 0 4
47120: PPUSH
47121: CALL_OW 488
47125: IFFALSE 47148
// begin result := [ x , y ] ;
47127: LD_ADDR_VAR 0 1
47131: PUSH
47132: LD_VAR 0 3
47136: PUSH
47137: LD_VAR 0 4
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: ST_TO_ADDR
// break ;
47146: GO 47150
// end ; end ;
47148: GO 46950
47150: POP
47151: POP
// if result then
47152: LD_VAR 0 1
47156: IFFALSE 47216
// begin ToLua ( playSibBomb() ) ;
47158: LD_STRING playSibBomb()
47160: PPUSH
47161: CALL_OW 559
// wait ( 0 0$14 ) ;
47165: LD_INT 490
47167: PPUSH
47168: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
47172: LD_VAR 0 1
47176: PUSH
47177: LD_INT 1
47179: ARRAY
47180: PPUSH
47181: LD_VAR 0 1
47185: PUSH
47186: LD_INT 2
47188: ARRAY
47189: PPUSH
47190: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
47194: LD_VAR 0 1
47198: PUSH
47199: LD_INT 1
47201: ARRAY
47202: PPUSH
47203: LD_VAR 0 1
47207: PUSH
47208: LD_INT 2
47210: ARRAY
47211: PPUSH
47212: CALL_OW 429
// end ; end ;
47216: LD_VAR 0 1
47220: RET
// every 0 0$1 trigger StreamModeActive and sReset do
47221: LD_EXP 33
47225: PUSH
47226: LD_EXP 55
47230: AND
47231: IFFALSE 47243
47233: GO 47235
47235: DISABLE
// YouLost (  ) ;
47236: LD_STRING 
47238: PPUSH
47239: CALL_OW 104
47243: END
// every 0 0$1 trigger StreamModeActive and sFog do
47244: LD_EXP 33
47248: PUSH
47249: LD_EXP 54
47253: AND
47254: IFFALSE 47268
47256: GO 47258
47258: DISABLE
// FogOff ( your_side ) ;
47259: LD_OWVAR 2
47263: PPUSH
47264: CALL_OW 344
47268: END
// every 0 0$1 trigger StreamModeActive and sSun do
47269: LD_EXP 33
47273: PUSH
47274: LD_EXP 56
47278: AND
47279: IFFALSE 47307
47281: GO 47283
47283: DISABLE
// begin solar_recharge_percent := 0 ;
47284: LD_ADDR_OWVAR 79
47288: PUSH
47289: LD_INT 0
47291: ST_TO_ADDR
// wait ( 5 5$00 ) ;
47292: LD_INT 10500
47294: PPUSH
47295: CALL_OW 67
// solar_recharge_percent := 100 ;
47299: LD_ADDR_OWVAR 79
47303: PUSH
47304: LD_INT 100
47306: ST_TO_ADDR
// end ;
47307: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
47308: LD_EXP 33
47312: PUSH
47313: LD_EXP 57
47317: AND
47318: IFFALSE 47557
47320: GO 47322
47322: DISABLE
47323: LD_INT 0
47325: PPUSH
47326: PPUSH
47327: PPUSH
// begin tmp := [ ] ;
47328: LD_ADDR_VAR 0 3
47332: PUSH
47333: EMPTY
47334: ST_TO_ADDR
// for i := 1 to 6 do
47335: LD_ADDR_VAR 0 1
47339: PUSH
47340: DOUBLE
47341: LD_INT 1
47343: DEC
47344: ST_TO_ADDR
47345: LD_INT 6
47347: PUSH
47348: FOR_TO
47349: IFFALSE 47454
// begin uc_nation := nation_nature ;
47351: LD_ADDR_OWVAR 21
47355: PUSH
47356: LD_INT 0
47358: ST_TO_ADDR
// uc_side := 0 ;
47359: LD_ADDR_OWVAR 20
47363: PUSH
47364: LD_INT 0
47366: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
47367: LD_ADDR_OWVAR 29
47371: PUSH
47372: LD_INT 12
47374: PUSH
47375: LD_INT 12
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: ST_TO_ADDR
// hc_agressivity := 20 ;
47382: LD_ADDR_OWVAR 35
47386: PUSH
47387: LD_INT 20
47389: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
47390: LD_ADDR_OWVAR 28
47394: PUSH
47395: LD_INT 17
47397: ST_TO_ADDR
// hc_gallery :=  ;
47398: LD_ADDR_OWVAR 33
47402: PUSH
47403: LD_STRING 
47405: ST_TO_ADDR
// hc_name :=  ;
47406: LD_ADDR_OWVAR 26
47410: PUSH
47411: LD_STRING 
47413: ST_TO_ADDR
// un := CreateHuman ;
47414: LD_ADDR_VAR 0 2
47418: PUSH
47419: CALL_OW 44
47423: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
47424: LD_VAR 0 2
47428: PPUSH
47429: LD_INT 1
47431: PPUSH
47432: CALL_OW 51
// tmp := tmp ^ un ;
47436: LD_ADDR_VAR 0 3
47440: PUSH
47441: LD_VAR 0 3
47445: PUSH
47446: LD_VAR 0 2
47450: ADD
47451: ST_TO_ADDR
// end ;
47452: GO 47348
47454: POP
47455: POP
// repeat wait ( 0 0$1 ) ;
47456: LD_INT 35
47458: PPUSH
47459: CALL_OW 67
// for un in tmp do
47463: LD_ADDR_VAR 0 2
47467: PUSH
47468: LD_VAR 0 3
47472: PUSH
47473: FOR_IN
47474: IFFALSE 47548
// begin if IsDead ( un ) then
47476: LD_VAR 0 2
47480: PPUSH
47481: CALL_OW 301
47485: IFFALSE 47505
// begin tmp := tmp diff un ;
47487: LD_ADDR_VAR 0 3
47491: PUSH
47492: LD_VAR 0 3
47496: PUSH
47497: LD_VAR 0 2
47501: DIFF
47502: ST_TO_ADDR
// continue ;
47503: GO 47473
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
47505: LD_VAR 0 2
47509: PPUSH
47510: LD_INT 3
47512: PUSH
47513: LD_INT 22
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PPUSH
47527: CALL_OW 69
47531: PPUSH
47532: LD_VAR 0 2
47536: PPUSH
47537: CALL_OW 74
47541: PPUSH
47542: CALL_OW 115
// end ;
47546: GO 47473
47548: POP
47549: POP
// until not tmp ;
47550: LD_VAR 0 3
47554: NOT
47555: IFFALSE 47456
// end ;
47557: PPOPN 3
47559: END
// every 0 0$1 trigger StreamModeActive and sTroll do
47560: LD_EXP 33
47564: PUSH
47565: LD_EXP 58
47569: AND
47570: IFFALSE 47624
47572: GO 47574
47574: DISABLE
// begin ToLua ( displayTroll(); ) ;
47575: LD_STRING displayTroll();
47577: PPUSH
47578: CALL_OW 559
// wait ( 3 3$00 ) ;
47582: LD_INT 6300
47584: PPUSH
47585: CALL_OW 67
// ToLua ( hideTroll(); ) ;
47589: LD_STRING hideTroll();
47591: PPUSH
47592: CALL_OW 559
// wait ( 1 1$00 ) ;
47596: LD_INT 2100
47598: PPUSH
47599: CALL_OW 67
// ToLua ( displayTroll(); ) ;
47603: LD_STRING displayTroll();
47605: PPUSH
47606: CALL_OW 559
// wait ( 1 1$00 ) ;
47610: LD_INT 2100
47612: PPUSH
47613: CALL_OW 67
// ToLua ( hideTroll(); ) ;
47617: LD_STRING hideTroll();
47619: PPUSH
47620: CALL_OW 559
// end ;
47624: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
47625: LD_EXP 33
47629: PUSH
47630: LD_EXP 59
47634: AND
47635: IFFALSE 47698
47637: GO 47639
47639: DISABLE
47640: LD_INT 0
47642: PPUSH
// begin p := 0 ;
47643: LD_ADDR_VAR 0 1
47647: PUSH
47648: LD_INT 0
47650: ST_TO_ADDR
// repeat game_speed := 1 ;
47651: LD_ADDR_OWVAR 65
47655: PUSH
47656: LD_INT 1
47658: ST_TO_ADDR
// wait ( 0 0$1 ) ;
47659: LD_INT 35
47661: PPUSH
47662: CALL_OW 67
// p := p + 1 ;
47666: LD_ADDR_VAR 0 1
47670: PUSH
47671: LD_VAR 0 1
47675: PUSH
47676: LD_INT 1
47678: PLUS
47679: ST_TO_ADDR
// until p >= 60 ;
47680: LD_VAR 0 1
47684: PUSH
47685: LD_INT 60
47687: GREATEREQUAL
47688: IFFALSE 47651
// game_speed := 4 ;
47690: LD_ADDR_OWVAR 65
47694: PUSH
47695: LD_INT 4
47697: ST_TO_ADDR
// end ;
47698: PPOPN 1
47700: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
47701: LD_EXP 33
47705: PUSH
47706: LD_EXP 60
47710: AND
47711: IFFALSE 47857
47713: GO 47715
47715: DISABLE
47716: LD_INT 0
47718: PPUSH
47719: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47720: LD_ADDR_VAR 0 1
47724: PUSH
47725: LD_INT 22
47727: PUSH
47728: LD_OWVAR 2
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: LD_INT 30
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 30
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: LIST
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PPUSH
47769: CALL_OW 69
47773: ST_TO_ADDR
// if not depot then
47774: LD_VAR 0 1
47778: NOT
47779: IFFALSE 47783
// exit ;
47781: GO 47857
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
47783: LD_ADDR_VAR 0 2
47787: PUSH
47788: LD_VAR 0 1
47792: PUSH
47793: LD_INT 1
47795: PPUSH
47796: LD_VAR 0 1
47800: PPUSH
47801: CALL_OW 12
47805: ARRAY
47806: PPUSH
47807: CALL_OW 274
47811: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
47812: LD_VAR 0 2
47816: PPUSH
47817: LD_INT 1
47819: PPUSH
47820: LD_INT 0
47822: PPUSH
47823: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
47827: LD_VAR 0 2
47831: PPUSH
47832: LD_INT 2
47834: PPUSH
47835: LD_INT 0
47837: PPUSH
47838: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
47842: LD_VAR 0 2
47846: PPUSH
47847: LD_INT 3
47849: PPUSH
47850: LD_INT 0
47852: PPUSH
47853: CALL_OW 277
// end ;
47857: PPOPN 2
47859: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
47860: LD_EXP 33
47864: PUSH
47865: LD_EXP 61
47869: AND
47870: IFFALSE 47967
47872: GO 47874
47874: DISABLE
47875: LD_INT 0
47877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
47878: LD_ADDR_VAR 0 1
47882: PUSH
47883: LD_INT 22
47885: PUSH
47886: LD_OWVAR 2
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 21
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 3
47907: PUSH
47908: LD_INT 23
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: LIST
47926: PPUSH
47927: CALL_OW 69
47931: ST_TO_ADDR
// if not tmp then
47932: LD_VAR 0 1
47936: NOT
47937: IFFALSE 47941
// exit ;
47939: GO 47967
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
47941: LD_VAR 0 1
47945: PUSH
47946: LD_INT 1
47948: PPUSH
47949: LD_VAR 0 1
47953: PPUSH
47954: CALL_OW 12
47958: ARRAY
47959: PPUSH
47960: LD_INT 200
47962: PPUSH
47963: CALL_OW 234
// end ;
47967: PPOPN 1
47969: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
47970: LD_EXP 33
47974: PUSH
47975: LD_EXP 62
47979: AND
47980: IFFALSE 48059
47982: GO 47984
47984: DISABLE
47985: LD_INT 0
47987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
47988: LD_ADDR_VAR 0 1
47992: PUSH
47993: LD_INT 22
47995: PUSH
47996: LD_OWVAR 2
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 21
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PPUSH
48019: CALL_OW 69
48023: ST_TO_ADDR
// if not tmp then
48024: LD_VAR 0 1
48028: NOT
48029: IFFALSE 48033
// exit ;
48031: GO 48059
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
48033: LD_VAR 0 1
48037: PUSH
48038: LD_INT 1
48040: PPUSH
48041: LD_VAR 0 1
48045: PPUSH
48046: CALL_OW 12
48050: ARRAY
48051: PPUSH
48052: LD_INT 60
48054: PPUSH
48055: CALL_OW 234
// end ;
48059: PPOPN 1
48061: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
48062: LD_EXP 33
48066: PUSH
48067: LD_EXP 63
48071: AND
48072: IFFALSE 48171
48074: GO 48076
48076: DISABLE
48077: LD_INT 0
48079: PPUSH
48080: PPUSH
// begin enable ;
48081: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
48082: LD_ADDR_VAR 0 1
48086: PUSH
48087: LD_INT 22
48089: PUSH
48090: LD_OWVAR 2
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 61
48101: PUSH
48102: EMPTY
48103: LIST
48104: PUSH
48105: LD_INT 33
48107: PUSH
48108: LD_INT 2
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: LIST
48119: PPUSH
48120: CALL_OW 69
48124: ST_TO_ADDR
// if not tmp then
48125: LD_VAR 0 1
48129: NOT
48130: IFFALSE 48134
// exit ;
48132: GO 48171
// for i in tmp do
48134: LD_ADDR_VAR 0 2
48138: PUSH
48139: LD_VAR 0 1
48143: PUSH
48144: FOR_IN
48145: IFFALSE 48169
// if IsControledBy ( i ) then
48147: LD_VAR 0 2
48151: PPUSH
48152: CALL_OW 312
48156: IFFALSE 48167
// ComUnlink ( i ) ;
48158: LD_VAR 0 2
48162: PPUSH
48163: CALL_OW 136
48167: GO 48144
48169: POP
48170: POP
// end ;
48171: PPOPN 2
48173: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
48174: LD_EXP 33
48178: PUSH
48179: LD_EXP 64
48183: AND
48184: IFFALSE 48324
48186: GO 48188
48188: DISABLE
48189: LD_INT 0
48191: PPUSH
48192: PPUSH
// begin ToLua ( displayPowell(); ) ;
48193: LD_STRING displayPowell();
48195: PPUSH
48196: CALL_OW 559
// uc_side := 0 ;
48200: LD_ADDR_OWVAR 20
48204: PUSH
48205: LD_INT 0
48207: ST_TO_ADDR
// uc_nation := 2 ;
48208: LD_ADDR_OWVAR 21
48212: PUSH
48213: LD_INT 2
48215: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
48216: LD_ADDR_OWVAR 37
48220: PUSH
48221: LD_INT 14
48223: ST_TO_ADDR
// vc_engine := engine_siberite ;
48224: LD_ADDR_OWVAR 39
48228: PUSH
48229: LD_INT 3
48231: ST_TO_ADDR
// vc_control := control_apeman ;
48232: LD_ADDR_OWVAR 38
48236: PUSH
48237: LD_INT 5
48239: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
48240: LD_ADDR_OWVAR 40
48244: PUSH
48245: LD_INT 29
48247: ST_TO_ADDR
// un := CreateVehicle ;
48248: LD_ADDR_VAR 0 2
48252: PUSH
48253: CALL_OW 45
48257: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
48258: LD_VAR 0 2
48262: PPUSH
48263: LD_INT 1
48265: PPUSH
48266: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
48270: LD_INT 35
48272: PPUSH
48273: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
48277: LD_VAR 0 2
48281: PPUSH
48282: LD_INT 22
48284: PUSH
48285: LD_OWVAR 2
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PPUSH
48294: CALL_OW 69
48298: PPUSH
48299: LD_VAR 0 2
48303: PPUSH
48304: CALL_OW 74
48308: PPUSH
48309: CALL_OW 115
// until IsDead ( un ) ;
48313: LD_VAR 0 2
48317: PPUSH
48318: CALL_OW 301
48322: IFFALSE 48270
// end ;
48324: PPOPN 2
48326: END
// every 0 0$1 trigger StreamModeActive and sStu do
48327: LD_EXP 33
48331: PUSH
48332: LD_EXP 72
48336: AND
48337: IFFALSE 48353
48339: GO 48341
48341: DISABLE
// begin ToLua ( displayStucuk(); ) ;
48342: LD_STRING displayStucuk();
48344: PPUSH
48345: CALL_OW 559
// ResetFog ;
48349: CALL_OW 335
// end ;
48353: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
48354: LD_EXP 33
48358: PUSH
48359: LD_EXP 65
48363: AND
48364: IFFALSE 48505
48366: GO 48368
48368: DISABLE
48369: LD_INT 0
48371: PPUSH
48372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
48373: LD_ADDR_VAR 0 2
48377: PUSH
48378: LD_INT 22
48380: PUSH
48381: LD_OWVAR 2
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 21
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PPUSH
48404: CALL_OW 69
48408: ST_TO_ADDR
// if not tmp then
48409: LD_VAR 0 2
48413: NOT
48414: IFFALSE 48418
// exit ;
48416: GO 48505
// un := tmp [ rand ( 1 , tmp ) ] ;
48418: LD_ADDR_VAR 0 1
48422: PUSH
48423: LD_VAR 0 2
48427: PUSH
48428: LD_INT 1
48430: PPUSH
48431: LD_VAR 0 2
48435: PPUSH
48436: CALL_OW 12
48440: ARRAY
48441: ST_TO_ADDR
// SetSide ( un , 0 ) ;
48442: LD_VAR 0 1
48446: PPUSH
48447: LD_INT 0
48449: PPUSH
48450: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
48454: LD_VAR 0 1
48458: PPUSH
48459: LD_OWVAR 3
48463: PUSH
48464: LD_VAR 0 1
48468: DIFF
48469: PPUSH
48470: LD_VAR 0 1
48474: PPUSH
48475: CALL_OW 74
48479: PPUSH
48480: CALL_OW 115
// wait ( 0 0$20 ) ;
48484: LD_INT 700
48486: PPUSH
48487: CALL_OW 67
// SetSide ( un , your_side ) ;
48491: LD_VAR 0 1
48495: PPUSH
48496: LD_OWVAR 2
48500: PPUSH
48501: CALL_OW 235
// end ;
48505: PPOPN 2
48507: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
48508: LD_EXP 33
48512: PUSH
48513: LD_EXP 66
48517: AND
48518: IFFALSE 48624
48520: GO 48522
48522: DISABLE
48523: LD_INT 0
48525: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48526: LD_ADDR_VAR 0 1
48530: PUSH
48531: LD_INT 22
48533: PUSH
48534: LD_OWVAR 2
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: LD_INT 30
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 30
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: LIST
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PPUSH
48575: CALL_OW 69
48579: ST_TO_ADDR
// if not depot then
48580: LD_VAR 0 1
48584: NOT
48585: IFFALSE 48589
// exit ;
48587: GO 48624
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
48589: LD_VAR 0 1
48593: PUSH
48594: LD_INT 1
48596: ARRAY
48597: PPUSH
48598: CALL_OW 250
48602: PPUSH
48603: LD_VAR 0 1
48607: PUSH
48608: LD_INT 1
48610: ARRAY
48611: PPUSH
48612: CALL_OW 251
48616: PPUSH
48617: LD_INT 70
48619: PPUSH
48620: CALL_OW 495
// end ;
48624: PPOPN 1
48626: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
48627: LD_EXP 33
48631: PUSH
48632: LD_EXP 67
48636: AND
48637: IFFALSE 48848
48639: GO 48641
48641: DISABLE
48642: LD_INT 0
48644: PPUSH
48645: PPUSH
48646: PPUSH
48647: PPUSH
48648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
48649: LD_ADDR_VAR 0 5
48653: PUSH
48654: LD_INT 22
48656: PUSH
48657: LD_OWVAR 2
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 21
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PPUSH
48680: CALL_OW 69
48684: ST_TO_ADDR
// if not tmp then
48685: LD_VAR 0 5
48689: NOT
48690: IFFALSE 48694
// exit ;
48692: GO 48848
// for i in tmp do
48694: LD_ADDR_VAR 0 1
48698: PUSH
48699: LD_VAR 0 5
48703: PUSH
48704: FOR_IN
48705: IFFALSE 48846
// begin d := rand ( 0 , 5 ) ;
48707: LD_ADDR_VAR 0 4
48711: PUSH
48712: LD_INT 0
48714: PPUSH
48715: LD_INT 5
48717: PPUSH
48718: CALL_OW 12
48722: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
48723: LD_ADDR_VAR 0 2
48727: PUSH
48728: LD_VAR 0 1
48732: PPUSH
48733: CALL_OW 250
48737: PPUSH
48738: LD_VAR 0 4
48742: PPUSH
48743: LD_INT 3
48745: PPUSH
48746: LD_INT 12
48748: PPUSH
48749: CALL_OW 12
48753: PPUSH
48754: CALL_OW 272
48758: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
48759: LD_ADDR_VAR 0 3
48763: PUSH
48764: LD_VAR 0 1
48768: PPUSH
48769: CALL_OW 251
48773: PPUSH
48774: LD_VAR 0 4
48778: PPUSH
48779: LD_INT 3
48781: PPUSH
48782: LD_INT 12
48784: PPUSH
48785: CALL_OW 12
48789: PPUSH
48790: CALL_OW 273
48794: ST_TO_ADDR
// if ValidHex ( x , y ) then
48795: LD_VAR 0 2
48799: PPUSH
48800: LD_VAR 0 3
48804: PPUSH
48805: CALL_OW 488
48809: IFFALSE 48844
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
48811: LD_VAR 0 1
48815: PPUSH
48816: LD_VAR 0 2
48820: PPUSH
48821: LD_VAR 0 3
48825: PPUSH
48826: LD_INT 3
48828: PPUSH
48829: LD_INT 6
48831: PPUSH
48832: CALL_OW 12
48836: PPUSH
48837: LD_INT 1
48839: PPUSH
48840: CALL_OW 483
// end ;
48844: GO 48704
48846: POP
48847: POP
// end ;
48848: PPOPN 5
48850: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
48851: LD_EXP 33
48855: PUSH
48856: LD_EXP 68
48860: AND
48861: IFFALSE 48955
48863: GO 48865
48865: DISABLE
48866: LD_INT 0
48868: PPUSH
48869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
48870: LD_ADDR_VAR 0 2
48874: PUSH
48875: LD_INT 22
48877: PUSH
48878: LD_OWVAR 2
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 32
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 21
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: LIST
48911: PPUSH
48912: CALL_OW 69
48916: ST_TO_ADDR
// if not tmp then
48917: LD_VAR 0 2
48921: NOT
48922: IFFALSE 48926
// exit ;
48924: GO 48955
// for i in tmp do
48926: LD_ADDR_VAR 0 1
48930: PUSH
48931: LD_VAR 0 2
48935: PUSH
48936: FOR_IN
48937: IFFALSE 48953
// SetFuel ( i , 0 ) ;
48939: LD_VAR 0 1
48943: PPUSH
48944: LD_INT 0
48946: PPUSH
48947: CALL_OW 240
48951: GO 48936
48953: POP
48954: POP
// end ;
48955: PPOPN 2
48957: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
48958: LD_EXP 33
48962: PUSH
48963: LD_EXP 69
48967: AND
48968: IFFALSE 49034
48970: GO 48972
48972: DISABLE
48973: LD_INT 0
48975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
48976: LD_ADDR_VAR 0 1
48980: PUSH
48981: LD_INT 22
48983: PUSH
48984: LD_OWVAR 2
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 30
48995: PUSH
48996: LD_INT 29
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PPUSH
49007: CALL_OW 69
49011: ST_TO_ADDR
// if not tmp then
49012: LD_VAR 0 1
49016: NOT
49017: IFFALSE 49021
// exit ;
49019: GO 49034
// DestroyUnit ( tmp [ 1 ] ) ;
49021: LD_VAR 0 1
49025: PUSH
49026: LD_INT 1
49028: ARRAY
49029: PPUSH
49030: CALL_OW 65
// end ;
49034: PPOPN 1
49036: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
49037: LD_EXP 33
49041: PUSH
49042: LD_EXP 71
49046: AND
49047: IFFALSE 49176
49049: GO 49051
49051: DISABLE
49052: LD_INT 0
49054: PPUSH
// begin uc_side := 0 ;
49055: LD_ADDR_OWVAR 20
49059: PUSH
49060: LD_INT 0
49062: ST_TO_ADDR
// uc_nation := nation_arabian ;
49063: LD_ADDR_OWVAR 21
49067: PUSH
49068: LD_INT 2
49070: ST_TO_ADDR
// hc_gallery :=  ;
49071: LD_ADDR_OWVAR 33
49075: PUSH
49076: LD_STRING 
49078: ST_TO_ADDR
// hc_name :=  ;
49079: LD_ADDR_OWVAR 26
49083: PUSH
49084: LD_STRING 
49086: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
49087: LD_INT 1
49089: PPUSH
49090: LD_INT 11
49092: PPUSH
49093: LD_INT 10
49095: PPUSH
49096: CALL_OW 380
// un := CreateHuman ;
49100: LD_ADDR_VAR 0 1
49104: PUSH
49105: CALL_OW 44
49109: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
49110: LD_VAR 0 1
49114: PPUSH
49115: LD_INT 1
49117: PPUSH
49118: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
49122: LD_INT 35
49124: PPUSH
49125: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
49129: LD_VAR 0 1
49133: PPUSH
49134: LD_INT 22
49136: PUSH
49137: LD_OWVAR 2
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PPUSH
49146: CALL_OW 69
49150: PPUSH
49151: LD_VAR 0 1
49155: PPUSH
49156: CALL_OW 74
49160: PPUSH
49161: CALL_OW 115
// until IsDead ( un ) ;
49165: LD_VAR 0 1
49169: PPUSH
49170: CALL_OW 301
49174: IFFALSE 49122
// end ;
49176: PPOPN 1
49178: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
49179: LD_EXP 33
49183: PUSH
49184: LD_EXP 73
49188: AND
49189: IFFALSE 49201
49191: GO 49193
49193: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
49194: LD_STRING earthquake(getX(game), 0, 32)
49196: PPUSH
49197: CALL_OW 559
49201: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
49202: LD_EXP 33
49206: PUSH
49207: LD_EXP 74
49211: AND
49212: IFFALSE 49303
49214: GO 49216
49216: DISABLE
49217: LD_INT 0
49219: PPUSH
// begin enable ;
49220: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
49221: LD_ADDR_VAR 0 1
49225: PUSH
49226: LD_INT 22
49228: PUSH
49229: LD_OWVAR 2
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 21
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 33
49250: PUSH
49251: LD_INT 3
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: LIST
49262: PPUSH
49263: CALL_OW 69
49267: ST_TO_ADDR
// if not tmp then
49268: LD_VAR 0 1
49272: NOT
49273: IFFALSE 49277
// exit ;
49275: GO 49303
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
49277: LD_VAR 0 1
49281: PUSH
49282: LD_INT 1
49284: PPUSH
49285: LD_VAR 0 1
49289: PPUSH
49290: CALL_OW 12
49294: ARRAY
49295: PPUSH
49296: LD_INT 1
49298: PPUSH
49299: CALL_OW 234
// end ;
49303: PPOPN 1
49305: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
49306: LD_EXP 33
49310: PUSH
49311: LD_EXP 75
49315: AND
49316: IFFALSE 49457
49318: GO 49320
49320: DISABLE
49321: LD_INT 0
49323: PPUSH
49324: PPUSH
49325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
49326: LD_ADDR_VAR 0 3
49330: PUSH
49331: LD_INT 22
49333: PUSH
49334: LD_OWVAR 2
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 25
49345: PUSH
49346: LD_INT 1
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PPUSH
49357: CALL_OW 69
49361: ST_TO_ADDR
// if not tmp then
49362: LD_VAR 0 3
49366: NOT
49367: IFFALSE 49371
// exit ;
49369: GO 49457
// un := tmp [ rand ( 1 , tmp ) ] ;
49371: LD_ADDR_VAR 0 2
49375: PUSH
49376: LD_VAR 0 3
49380: PUSH
49381: LD_INT 1
49383: PPUSH
49384: LD_VAR 0 3
49388: PPUSH
49389: CALL_OW 12
49393: ARRAY
49394: ST_TO_ADDR
// if Crawls ( un ) then
49395: LD_VAR 0 2
49399: PPUSH
49400: CALL_OW 318
49404: IFFALSE 49415
// ComWalk ( un ) ;
49406: LD_VAR 0 2
49410: PPUSH
49411: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
49415: LD_VAR 0 2
49419: PPUSH
49420: LD_INT 9
49422: PPUSH
49423: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
49427: LD_INT 28
49429: PPUSH
49430: LD_OWVAR 2
49434: PPUSH
49435: LD_INT 2
49437: PPUSH
49438: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
49442: LD_INT 29
49444: PPUSH
49445: LD_OWVAR 2
49449: PPUSH
49450: LD_INT 2
49452: PPUSH
49453: CALL_OW 322
// end ;
49457: PPOPN 3
49459: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
49460: LD_EXP 33
49464: PUSH
49465: LD_EXP 76
49469: AND
49470: IFFALSE 49581
49472: GO 49474
49474: DISABLE
49475: LD_INT 0
49477: PPUSH
49478: PPUSH
49479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
49480: LD_ADDR_VAR 0 3
49484: PUSH
49485: LD_INT 22
49487: PUSH
49488: LD_OWVAR 2
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 25
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PPUSH
49511: CALL_OW 69
49515: ST_TO_ADDR
// if not tmp then
49516: LD_VAR 0 3
49520: NOT
49521: IFFALSE 49525
// exit ;
49523: GO 49581
// un := tmp [ rand ( 1 , tmp ) ] ;
49525: LD_ADDR_VAR 0 2
49529: PUSH
49530: LD_VAR 0 3
49534: PUSH
49535: LD_INT 1
49537: PPUSH
49538: LD_VAR 0 3
49542: PPUSH
49543: CALL_OW 12
49547: ARRAY
49548: ST_TO_ADDR
// if Crawls ( un ) then
49549: LD_VAR 0 2
49553: PPUSH
49554: CALL_OW 318
49558: IFFALSE 49569
// ComWalk ( un ) ;
49560: LD_VAR 0 2
49564: PPUSH
49565: CALL_OW 138
// SetClass ( un , class_mortar ) ;
49569: LD_VAR 0 2
49573: PPUSH
49574: LD_INT 8
49576: PPUSH
49577: CALL_OW 336
// end ;
49581: PPOPN 3
49583: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
49584: LD_EXP 33
49588: PUSH
49589: LD_EXP 77
49593: AND
49594: IFFALSE 49738
49596: GO 49598
49598: DISABLE
49599: LD_INT 0
49601: PPUSH
49602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
49603: LD_ADDR_VAR 0 2
49607: PUSH
49608: LD_INT 22
49610: PUSH
49611: LD_OWVAR 2
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 21
49622: PUSH
49623: LD_INT 2
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 34
49635: PUSH
49636: LD_INT 12
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 34
49645: PUSH
49646: LD_INT 51
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 34
49655: PUSH
49656: LD_INT 32
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: LIST
49673: PPUSH
49674: CALL_OW 69
49678: ST_TO_ADDR
// if not tmp then
49679: LD_VAR 0 2
49683: NOT
49684: IFFALSE 49688
// exit ;
49686: GO 49738
// for i in tmp do
49688: LD_ADDR_VAR 0 1
49692: PUSH
49693: LD_VAR 0 2
49697: PUSH
49698: FOR_IN
49699: IFFALSE 49736
// if GetCargo ( i , mat_artifact ) = 0 then
49701: LD_VAR 0 1
49705: PPUSH
49706: LD_INT 4
49708: PPUSH
49709: CALL_OW 289
49713: PUSH
49714: LD_INT 0
49716: EQUAL
49717: IFFALSE 49734
// SetCargo ( i , mat_siberit , 100 ) ;
49719: LD_VAR 0 1
49723: PPUSH
49724: LD_INT 3
49726: PPUSH
49727: LD_INT 100
49729: PPUSH
49730: CALL_OW 290
49734: GO 49698
49736: POP
49737: POP
// end ;
49738: PPOPN 2
49740: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
49741: LD_EXP 33
49745: PUSH
49746: LD_EXP 78
49750: AND
49751: IFFALSE 49934
49753: GO 49755
49755: DISABLE
49756: LD_INT 0
49758: PPUSH
49759: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
49760: LD_ADDR_VAR 0 2
49764: PUSH
49765: LD_INT 22
49767: PUSH
49768: LD_OWVAR 2
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PPUSH
49777: CALL_OW 69
49781: ST_TO_ADDR
// if not tmp then
49782: LD_VAR 0 2
49786: NOT
49787: IFFALSE 49791
// exit ;
49789: GO 49934
// for i := 1 to 2 do
49791: LD_ADDR_VAR 0 1
49795: PUSH
49796: DOUBLE
49797: LD_INT 1
49799: DEC
49800: ST_TO_ADDR
49801: LD_INT 2
49803: PUSH
49804: FOR_TO
49805: IFFALSE 49932
// begin uc_side := your_side ;
49807: LD_ADDR_OWVAR 20
49811: PUSH
49812: LD_OWVAR 2
49816: ST_TO_ADDR
// uc_nation := nation_american ;
49817: LD_ADDR_OWVAR 21
49821: PUSH
49822: LD_INT 1
49824: ST_TO_ADDR
// vc_chassis := us_morphling ;
49825: LD_ADDR_OWVAR 37
49829: PUSH
49830: LD_INT 5
49832: ST_TO_ADDR
// vc_engine := engine_siberite ;
49833: LD_ADDR_OWVAR 39
49837: PUSH
49838: LD_INT 3
49840: ST_TO_ADDR
// vc_control := control_computer ;
49841: LD_ADDR_OWVAR 38
49845: PUSH
49846: LD_INT 3
49848: ST_TO_ADDR
// vc_weapon := us_double_laser ;
49849: LD_ADDR_OWVAR 40
49853: PUSH
49854: LD_INT 10
49856: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
49857: LD_VAR 0 2
49861: PUSH
49862: LD_INT 1
49864: ARRAY
49865: PPUSH
49866: CALL_OW 310
49870: NOT
49871: IFFALSE 49918
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
49873: CALL_OW 45
49877: PPUSH
49878: LD_VAR 0 2
49882: PUSH
49883: LD_INT 1
49885: ARRAY
49886: PPUSH
49887: CALL_OW 250
49891: PPUSH
49892: LD_VAR 0 2
49896: PUSH
49897: LD_INT 1
49899: ARRAY
49900: PPUSH
49901: CALL_OW 251
49905: PPUSH
49906: LD_INT 12
49908: PPUSH
49909: LD_INT 1
49911: PPUSH
49912: CALL_OW 50
49916: GO 49930
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
49918: CALL_OW 45
49922: PPUSH
49923: LD_INT 1
49925: PPUSH
49926: CALL_OW 51
// end ;
49930: GO 49804
49932: POP
49933: POP
// end ;
49934: PPOPN 2
49936: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
49937: LD_EXP 33
49941: PUSH
49942: LD_EXP 79
49946: AND
49947: IFFALSE 50169
49949: GO 49951
49951: DISABLE
49952: LD_INT 0
49954: PPUSH
49955: PPUSH
49956: PPUSH
49957: PPUSH
49958: PPUSH
49959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
49960: LD_ADDR_VAR 0 6
49964: PUSH
49965: LD_INT 22
49967: PUSH
49968: LD_OWVAR 2
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 21
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 3
49989: PUSH
49990: LD_INT 23
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: LIST
50008: PPUSH
50009: CALL_OW 69
50013: ST_TO_ADDR
// if not tmp then
50014: LD_VAR 0 6
50018: NOT
50019: IFFALSE 50023
// exit ;
50021: GO 50169
// s1 := rand ( 1 , 4 ) ;
50023: LD_ADDR_VAR 0 2
50027: PUSH
50028: LD_INT 1
50030: PPUSH
50031: LD_INT 4
50033: PPUSH
50034: CALL_OW 12
50038: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
50039: LD_ADDR_VAR 0 4
50043: PUSH
50044: LD_VAR 0 6
50048: PUSH
50049: LD_INT 1
50051: ARRAY
50052: PPUSH
50053: LD_VAR 0 2
50057: PPUSH
50058: CALL_OW 259
50062: ST_TO_ADDR
// if s1 = 1 then
50063: LD_VAR 0 2
50067: PUSH
50068: LD_INT 1
50070: EQUAL
50071: IFFALSE 50091
// s2 := rand ( 2 , 4 ) else
50073: LD_ADDR_VAR 0 3
50077: PUSH
50078: LD_INT 2
50080: PPUSH
50081: LD_INT 4
50083: PPUSH
50084: CALL_OW 12
50088: ST_TO_ADDR
50089: GO 50099
// s2 := 1 ;
50091: LD_ADDR_VAR 0 3
50095: PUSH
50096: LD_INT 1
50098: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
50099: LD_ADDR_VAR 0 5
50103: PUSH
50104: LD_VAR 0 6
50108: PUSH
50109: LD_INT 1
50111: ARRAY
50112: PPUSH
50113: LD_VAR 0 3
50117: PPUSH
50118: CALL_OW 259
50122: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
50123: LD_VAR 0 6
50127: PUSH
50128: LD_INT 1
50130: ARRAY
50131: PPUSH
50132: LD_VAR 0 2
50136: PPUSH
50137: LD_VAR 0 5
50141: PPUSH
50142: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
50146: LD_VAR 0 6
50150: PUSH
50151: LD_INT 1
50153: ARRAY
50154: PPUSH
50155: LD_VAR 0 3
50159: PPUSH
50160: LD_VAR 0 4
50164: PPUSH
50165: CALL_OW 237
// end ;
50169: PPOPN 6
50171: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
50172: LD_EXP 33
50176: PUSH
50177: LD_EXP 80
50181: AND
50182: IFFALSE 50261
50184: GO 50186
50186: DISABLE
50187: LD_INT 0
50189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
50190: LD_ADDR_VAR 0 1
50194: PUSH
50195: LD_INT 22
50197: PUSH
50198: LD_OWVAR 2
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 30
50209: PUSH
50210: LD_INT 3
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PPUSH
50221: CALL_OW 69
50225: ST_TO_ADDR
// if not tmp then
50226: LD_VAR 0 1
50230: NOT
50231: IFFALSE 50235
// exit ;
50233: GO 50261
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
50235: LD_VAR 0 1
50239: PUSH
50240: LD_INT 1
50242: PPUSH
50243: LD_VAR 0 1
50247: PPUSH
50248: CALL_OW 12
50252: ARRAY
50253: PPUSH
50254: LD_INT 1
50256: PPUSH
50257: CALL_OW 234
// end ;
50261: PPOPN 1
50263: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
50264: LD_EXP 33
50268: PUSH
50269: LD_EXP 81
50273: AND
50274: IFFALSE 50386
50276: GO 50278
50278: DISABLE
50279: LD_INT 0
50281: PPUSH
50282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
50283: LD_ADDR_VAR 0 2
50287: PUSH
50288: LD_INT 22
50290: PUSH
50291: LD_OWVAR 2
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: LD_INT 30
50305: PUSH
50306: LD_INT 27
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 30
50315: PUSH
50316: LD_INT 26
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 30
50325: PUSH
50326: LD_INT 28
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PPUSH
50343: CALL_OW 69
50347: ST_TO_ADDR
// if not tmp then
50348: LD_VAR 0 2
50352: NOT
50353: IFFALSE 50357
// exit ;
50355: GO 50386
// for i in tmp do
50357: LD_ADDR_VAR 0 1
50361: PUSH
50362: LD_VAR 0 2
50366: PUSH
50367: FOR_IN
50368: IFFALSE 50384
// SetLives ( i , 1 ) ;
50370: LD_VAR 0 1
50374: PPUSH
50375: LD_INT 1
50377: PPUSH
50378: CALL_OW 234
50382: GO 50367
50384: POP
50385: POP
// end ;
50386: PPOPN 2
50388: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
50389: LD_EXP 33
50393: PUSH
50394: LD_EXP 82
50398: AND
50399: IFFALSE 50673
50401: GO 50403
50403: DISABLE
50404: LD_INT 0
50406: PPUSH
50407: PPUSH
50408: PPUSH
// begin i := rand ( 1 , 7 ) ;
50409: LD_ADDR_VAR 0 1
50413: PUSH
50414: LD_INT 1
50416: PPUSH
50417: LD_INT 7
50419: PPUSH
50420: CALL_OW 12
50424: ST_TO_ADDR
// case i of 1 :
50425: LD_VAR 0 1
50429: PUSH
50430: LD_INT 1
50432: DOUBLE
50433: EQUAL
50434: IFTRUE 50438
50436: GO 50448
50438: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
50439: LD_STRING earthquake(getX(game), 0, 32)
50441: PPUSH
50442: CALL_OW 559
50446: GO 50673
50448: LD_INT 2
50450: DOUBLE
50451: EQUAL
50452: IFTRUE 50456
50454: GO 50470
50456: POP
// begin ToLua ( displayStucuk(); ) ;
50457: LD_STRING displayStucuk();
50459: PPUSH
50460: CALL_OW 559
// ResetFog ;
50464: CALL_OW 335
// end ; 3 :
50468: GO 50673
50470: LD_INT 3
50472: DOUBLE
50473: EQUAL
50474: IFTRUE 50478
50476: GO 50582
50478: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
50479: LD_ADDR_VAR 0 2
50483: PUSH
50484: LD_INT 22
50486: PUSH
50487: LD_OWVAR 2
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 25
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PPUSH
50510: CALL_OW 69
50514: ST_TO_ADDR
// if not tmp then
50515: LD_VAR 0 2
50519: NOT
50520: IFFALSE 50524
// exit ;
50522: GO 50673
// un := tmp [ rand ( 1 , tmp ) ] ;
50524: LD_ADDR_VAR 0 3
50528: PUSH
50529: LD_VAR 0 2
50533: PUSH
50534: LD_INT 1
50536: PPUSH
50537: LD_VAR 0 2
50541: PPUSH
50542: CALL_OW 12
50546: ARRAY
50547: ST_TO_ADDR
// if Crawls ( un ) then
50548: LD_VAR 0 3
50552: PPUSH
50553: CALL_OW 318
50557: IFFALSE 50568
// ComWalk ( un ) ;
50559: LD_VAR 0 3
50563: PPUSH
50564: CALL_OW 138
// SetClass ( un , class_mortar ) ;
50568: LD_VAR 0 3
50572: PPUSH
50573: LD_INT 8
50575: PPUSH
50576: CALL_OW 336
// end ; 4 :
50580: GO 50673
50582: LD_INT 4
50584: DOUBLE
50585: EQUAL
50586: IFTRUE 50590
50588: GO 50651
50590: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
50591: LD_ADDR_VAR 0 2
50595: PUSH
50596: LD_INT 22
50598: PUSH
50599: LD_OWVAR 2
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 30
50610: PUSH
50611: LD_INT 29
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PPUSH
50622: CALL_OW 69
50626: ST_TO_ADDR
// if not tmp then
50627: LD_VAR 0 2
50631: NOT
50632: IFFALSE 50636
// exit ;
50634: GO 50673
// DestroyUnit ( tmp [ 1 ] ) ;
50636: LD_VAR 0 2
50640: PUSH
50641: LD_INT 1
50643: ARRAY
50644: PPUSH
50645: CALL_OW 65
// end ; 5 .. 7 :
50649: GO 50673
50651: LD_INT 5
50653: DOUBLE
50654: GREATEREQUAL
50655: IFFALSE 50663
50657: LD_INT 7
50659: DOUBLE
50660: LESSEQUAL
50661: IFTRUE 50665
50663: GO 50672
50665: POP
// StreamSibBomb ; end ;
50666: CALL 46923 0 0
50670: GO 50673
50672: POP
// end ;
50673: PPOPN 3
50675: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
50676: LD_EXP 33
50680: PUSH
50681: LD_EXP 83
50685: AND
50686: IFFALSE 50842
50688: GO 50690
50690: DISABLE
50691: LD_INT 0
50693: PPUSH
50694: PPUSH
50695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
50696: LD_ADDR_VAR 0 2
50700: PUSH
50701: LD_INT 81
50703: PUSH
50704: LD_OWVAR 2
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: LD_INT 21
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 21
50728: PUSH
50729: LD_INT 2
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: LIST
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PPUSH
50745: CALL_OW 69
50749: ST_TO_ADDR
// if not tmp then
50750: LD_VAR 0 2
50754: NOT
50755: IFFALSE 50759
// exit ;
50757: GO 50842
// p := 0 ;
50759: LD_ADDR_VAR 0 3
50763: PUSH
50764: LD_INT 0
50766: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50767: LD_INT 35
50769: PPUSH
50770: CALL_OW 67
// p := p + 1 ;
50774: LD_ADDR_VAR 0 3
50778: PUSH
50779: LD_VAR 0 3
50783: PUSH
50784: LD_INT 1
50786: PLUS
50787: ST_TO_ADDR
// for i in tmp do
50788: LD_ADDR_VAR 0 1
50792: PUSH
50793: LD_VAR 0 2
50797: PUSH
50798: FOR_IN
50799: IFFALSE 50830
// if GetLives ( i ) < 1000 then
50801: LD_VAR 0 1
50805: PPUSH
50806: CALL_OW 256
50810: PUSH
50811: LD_INT 1000
50813: LESS
50814: IFFALSE 50828
// SetLives ( i , 1000 ) ;
50816: LD_VAR 0 1
50820: PPUSH
50821: LD_INT 1000
50823: PPUSH
50824: CALL_OW 234
50828: GO 50798
50830: POP
50831: POP
// until p > 20 ;
50832: LD_VAR 0 3
50836: PUSH
50837: LD_INT 20
50839: GREATER
50840: IFFALSE 50767
// end ;
50842: PPOPN 3
50844: END
// every 0 0$1 trigger StreamModeActive and sTime do
50845: LD_EXP 33
50849: PUSH
50850: LD_EXP 84
50854: AND
50855: IFFALSE 50890
50857: GO 50859
50859: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
50860: LD_INT 28
50862: PPUSH
50863: LD_OWVAR 2
50867: PPUSH
50868: LD_INT 2
50870: PPUSH
50871: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
50875: LD_INT 30
50877: PPUSH
50878: LD_OWVAR 2
50882: PPUSH
50883: LD_INT 2
50885: PPUSH
50886: CALL_OW 322
// end ;
50890: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
50891: LD_EXP 33
50895: PUSH
50896: LD_EXP 85
50900: AND
50901: IFFALSE 51022
50903: GO 50905
50905: DISABLE
50906: LD_INT 0
50908: PPUSH
50909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
50910: LD_ADDR_VAR 0 2
50914: PUSH
50915: LD_INT 22
50917: PUSH
50918: LD_OWVAR 2
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 21
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 3
50939: PUSH
50940: LD_INT 23
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: LIST
50958: PPUSH
50959: CALL_OW 69
50963: ST_TO_ADDR
// if not tmp then
50964: LD_VAR 0 2
50968: NOT
50969: IFFALSE 50973
// exit ;
50971: GO 51022
// for i in tmp do
50973: LD_ADDR_VAR 0 1
50977: PUSH
50978: LD_VAR 0 2
50982: PUSH
50983: FOR_IN
50984: IFFALSE 51020
// begin if Crawls ( i ) then
50986: LD_VAR 0 1
50990: PPUSH
50991: CALL_OW 318
50995: IFFALSE 51006
// ComWalk ( i ) ;
50997: LD_VAR 0 1
51001: PPUSH
51002: CALL_OW 138
// SetClass ( i , 2 ) ;
51006: LD_VAR 0 1
51010: PPUSH
51011: LD_INT 2
51013: PPUSH
51014: CALL_OW 336
// end ;
51018: GO 50983
51020: POP
51021: POP
// end ;
51022: PPOPN 2
51024: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
51025: LD_EXP 33
51029: PUSH
51030: LD_EXP 86
51034: AND
51035: IFFALSE 51316
51037: GO 51039
51039: DISABLE
51040: LD_INT 0
51042: PPUSH
51043: PPUSH
51044: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
51045: LD_OWVAR 2
51049: PPUSH
51050: LD_INT 9
51052: PPUSH
51053: LD_INT 1
51055: PPUSH
51056: LD_INT 1
51058: PPUSH
51059: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
51063: LD_INT 9
51065: PPUSH
51066: LD_OWVAR 2
51070: PPUSH
51071: CALL_OW 343
// uc_side := 9 ;
51075: LD_ADDR_OWVAR 20
51079: PUSH
51080: LD_INT 9
51082: ST_TO_ADDR
// uc_nation := 2 ;
51083: LD_ADDR_OWVAR 21
51087: PUSH
51088: LD_INT 2
51090: ST_TO_ADDR
// hc_name := Dark Warrior ;
51091: LD_ADDR_OWVAR 26
51095: PUSH
51096: LD_STRING Dark Warrior
51098: ST_TO_ADDR
// hc_gallery :=  ;
51099: LD_ADDR_OWVAR 33
51103: PUSH
51104: LD_STRING 
51106: ST_TO_ADDR
// hc_noskilllimit := true ;
51107: LD_ADDR_OWVAR 76
51111: PUSH
51112: LD_INT 1
51114: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
51115: LD_ADDR_OWVAR 31
51119: PUSH
51120: LD_INT 30
51122: PUSH
51123: LD_INT 30
51125: PUSH
51126: LD_INT 30
51128: PUSH
51129: LD_INT 30
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: ST_TO_ADDR
// un := CreateHuman ;
51138: LD_ADDR_VAR 0 3
51142: PUSH
51143: CALL_OW 44
51147: ST_TO_ADDR
// hc_noskilllimit := false ;
51148: LD_ADDR_OWVAR 76
51152: PUSH
51153: LD_INT 0
51155: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
51156: LD_VAR 0 3
51160: PPUSH
51161: LD_INT 1
51163: PPUSH
51164: CALL_OW 51
// p := 0 ;
51168: LD_ADDR_VAR 0 2
51172: PUSH
51173: LD_INT 0
51175: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
51176: LD_INT 35
51178: PPUSH
51179: CALL_OW 67
// p := p + 1 ;
51183: LD_ADDR_VAR 0 2
51187: PUSH
51188: LD_VAR 0 2
51192: PUSH
51193: LD_INT 1
51195: PLUS
51196: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
51197: LD_VAR 0 3
51201: PPUSH
51202: CALL_OW 256
51206: PUSH
51207: LD_INT 1000
51209: LESS
51210: IFFALSE 51224
// SetLives ( un , 1000 ) ;
51212: LD_VAR 0 3
51216: PPUSH
51217: LD_INT 1000
51219: PPUSH
51220: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
51224: LD_VAR 0 3
51228: PPUSH
51229: LD_INT 81
51231: PUSH
51232: LD_OWVAR 2
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 91
51243: PUSH
51244: LD_VAR 0 3
51248: PUSH
51249: LD_INT 30
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: LIST
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PPUSH
51261: CALL_OW 69
51265: PPUSH
51266: LD_VAR 0 3
51270: PPUSH
51271: CALL_OW 74
51275: PPUSH
51276: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
51280: LD_VAR 0 2
51284: PUSH
51285: LD_INT 60
51287: GREATER
51288: PUSH
51289: LD_VAR 0 3
51293: PPUSH
51294: CALL_OW 301
51298: OR
51299: IFFALSE 51176
// if un then
51301: LD_VAR 0 3
51305: IFFALSE 51316
// RemoveUnit ( un ) ;
51307: LD_VAR 0 3
51311: PPUSH
51312: CALL_OW 64
// end ;
51316: PPOPN 3
51318: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
51319: LD_INT 0
51321: PPUSH
// case cmd of 301 :
51322: LD_VAR 0 1
51326: PUSH
51327: LD_INT 301
51329: DOUBLE
51330: EQUAL
51331: IFTRUE 51335
51333: GO 51367
51335: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
51336: LD_VAR 0 6
51340: PPUSH
51341: LD_VAR 0 7
51345: PPUSH
51346: LD_VAR 0 8
51350: PPUSH
51351: LD_VAR 0 4
51355: PPUSH
51356: LD_VAR 0 5
51360: PPUSH
51361: CALL 52568 0 5
51365: GO 51488
51367: LD_INT 302
51369: DOUBLE
51370: EQUAL
51371: IFTRUE 51375
51373: GO 51412
51375: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
51376: LD_VAR 0 6
51380: PPUSH
51381: LD_VAR 0 7
51385: PPUSH
51386: LD_VAR 0 8
51390: PPUSH
51391: LD_VAR 0 9
51395: PPUSH
51396: LD_VAR 0 4
51400: PPUSH
51401: LD_VAR 0 5
51405: PPUSH
51406: CALL 52659 0 6
51410: GO 51488
51412: LD_INT 303
51414: DOUBLE
51415: EQUAL
51416: IFTRUE 51420
51418: GO 51457
51420: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
51421: LD_VAR 0 6
51425: PPUSH
51426: LD_VAR 0 7
51430: PPUSH
51431: LD_VAR 0 8
51435: PPUSH
51436: LD_VAR 0 9
51440: PPUSH
51441: LD_VAR 0 4
51445: PPUSH
51446: LD_VAR 0 5
51450: PPUSH
51451: CALL 51493 0 6
51455: GO 51488
51457: LD_INT 304
51459: DOUBLE
51460: EQUAL
51461: IFTRUE 51465
51463: GO 51487
51465: POP
// hHackTeleport ( unit , x , y ) ; end ;
51466: LD_VAR 0 2
51470: PPUSH
51471: LD_VAR 0 4
51475: PPUSH
51476: LD_VAR 0 5
51480: PPUSH
51481: CALL 53252 0 3
51485: GO 51488
51487: POP
// end ;
51488: LD_VAR 0 12
51492: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
51493: LD_INT 0
51495: PPUSH
51496: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
51497: LD_VAR 0 1
51501: PUSH
51502: LD_INT 1
51504: LESS
51505: PUSH
51506: LD_VAR 0 1
51510: PUSH
51511: LD_INT 3
51513: GREATER
51514: OR
51515: PUSH
51516: LD_VAR 0 5
51520: PPUSH
51521: LD_VAR 0 6
51525: PPUSH
51526: CALL_OW 428
51530: OR
51531: IFFALSE 51535
// exit ;
51533: GO 52255
// uc_side := your_side ;
51535: LD_ADDR_OWVAR 20
51539: PUSH
51540: LD_OWVAR 2
51544: ST_TO_ADDR
// uc_nation := nation ;
51545: LD_ADDR_OWVAR 21
51549: PUSH
51550: LD_VAR 0 1
51554: ST_TO_ADDR
// bc_level = 1 ;
51555: LD_ADDR_OWVAR 43
51559: PUSH
51560: LD_INT 1
51562: ST_TO_ADDR
// case btype of 1 :
51563: LD_VAR 0 2
51567: PUSH
51568: LD_INT 1
51570: DOUBLE
51571: EQUAL
51572: IFTRUE 51576
51574: GO 51587
51576: POP
// bc_type := b_depot ; 2 :
51577: LD_ADDR_OWVAR 42
51581: PUSH
51582: LD_INT 0
51584: ST_TO_ADDR
51585: GO 52199
51587: LD_INT 2
51589: DOUBLE
51590: EQUAL
51591: IFTRUE 51595
51593: GO 51606
51595: POP
// bc_type := b_warehouse ; 3 :
51596: LD_ADDR_OWVAR 42
51600: PUSH
51601: LD_INT 1
51603: ST_TO_ADDR
51604: GO 52199
51606: LD_INT 3
51608: DOUBLE
51609: EQUAL
51610: IFTRUE 51614
51612: GO 51625
51614: POP
// bc_type := b_lab ; 4 .. 9 :
51615: LD_ADDR_OWVAR 42
51619: PUSH
51620: LD_INT 6
51622: ST_TO_ADDR
51623: GO 52199
51625: LD_INT 4
51627: DOUBLE
51628: GREATEREQUAL
51629: IFFALSE 51637
51631: LD_INT 9
51633: DOUBLE
51634: LESSEQUAL
51635: IFTRUE 51639
51637: GO 51691
51639: POP
// begin bc_type := b_lab_half ;
51640: LD_ADDR_OWVAR 42
51644: PUSH
51645: LD_INT 7
51647: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
51648: LD_ADDR_OWVAR 44
51652: PUSH
51653: LD_INT 10
51655: PUSH
51656: LD_INT 11
51658: PUSH
51659: LD_INT 12
51661: PUSH
51662: LD_INT 15
51664: PUSH
51665: LD_INT 14
51667: PUSH
51668: LD_INT 13
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: PUSH
51679: LD_VAR 0 2
51683: PUSH
51684: LD_INT 3
51686: MINUS
51687: ARRAY
51688: ST_TO_ADDR
// end ; 10 .. 13 :
51689: GO 52199
51691: LD_INT 10
51693: DOUBLE
51694: GREATEREQUAL
51695: IFFALSE 51703
51697: LD_INT 13
51699: DOUBLE
51700: LESSEQUAL
51701: IFTRUE 51705
51703: GO 51782
51705: POP
// begin bc_type := b_lab_full ;
51706: LD_ADDR_OWVAR 42
51710: PUSH
51711: LD_INT 8
51713: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
51714: LD_ADDR_OWVAR 44
51718: PUSH
51719: LD_INT 10
51721: PUSH
51722: LD_INT 12
51724: PUSH
51725: LD_INT 14
51727: PUSH
51728: LD_INT 13
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: PUSH
51737: LD_VAR 0 2
51741: PUSH
51742: LD_INT 9
51744: MINUS
51745: ARRAY
51746: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
51747: LD_ADDR_OWVAR 45
51751: PUSH
51752: LD_INT 11
51754: PUSH
51755: LD_INT 15
51757: PUSH
51758: LD_INT 12
51760: PUSH
51761: LD_INT 15
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: PUSH
51770: LD_VAR 0 2
51774: PUSH
51775: LD_INT 9
51777: MINUS
51778: ARRAY
51779: ST_TO_ADDR
// end ; 14 :
51780: GO 52199
51782: LD_INT 14
51784: DOUBLE
51785: EQUAL
51786: IFTRUE 51790
51788: GO 51801
51790: POP
// bc_type := b_workshop ; 15 :
51791: LD_ADDR_OWVAR 42
51795: PUSH
51796: LD_INT 2
51798: ST_TO_ADDR
51799: GO 52199
51801: LD_INT 15
51803: DOUBLE
51804: EQUAL
51805: IFTRUE 51809
51807: GO 51820
51809: POP
// bc_type := b_factory ; 16 :
51810: LD_ADDR_OWVAR 42
51814: PUSH
51815: LD_INT 3
51817: ST_TO_ADDR
51818: GO 52199
51820: LD_INT 16
51822: DOUBLE
51823: EQUAL
51824: IFTRUE 51828
51826: GO 51839
51828: POP
// bc_type := b_ext_gun ; 17 :
51829: LD_ADDR_OWVAR 42
51833: PUSH
51834: LD_INT 17
51836: ST_TO_ADDR
51837: GO 52199
51839: LD_INT 17
51841: DOUBLE
51842: EQUAL
51843: IFTRUE 51847
51845: GO 51875
51847: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
51848: LD_ADDR_OWVAR 42
51852: PUSH
51853: LD_INT 19
51855: PUSH
51856: LD_INT 23
51858: PUSH
51859: LD_INT 19
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: LIST
51866: PUSH
51867: LD_VAR 0 1
51871: ARRAY
51872: ST_TO_ADDR
51873: GO 52199
51875: LD_INT 18
51877: DOUBLE
51878: EQUAL
51879: IFTRUE 51883
51881: GO 51894
51883: POP
// bc_type := b_ext_radar ; 19 :
51884: LD_ADDR_OWVAR 42
51888: PUSH
51889: LD_INT 20
51891: ST_TO_ADDR
51892: GO 52199
51894: LD_INT 19
51896: DOUBLE
51897: EQUAL
51898: IFTRUE 51902
51900: GO 51913
51902: POP
// bc_type := b_ext_radio ; 20 :
51903: LD_ADDR_OWVAR 42
51907: PUSH
51908: LD_INT 22
51910: ST_TO_ADDR
51911: GO 52199
51913: LD_INT 20
51915: DOUBLE
51916: EQUAL
51917: IFTRUE 51921
51919: GO 51932
51921: POP
// bc_type := b_ext_siberium ; 21 :
51922: LD_ADDR_OWVAR 42
51926: PUSH
51927: LD_INT 21
51929: ST_TO_ADDR
51930: GO 52199
51932: LD_INT 21
51934: DOUBLE
51935: EQUAL
51936: IFTRUE 51940
51938: GO 51951
51940: POP
// bc_type := b_ext_computer ; 22 :
51941: LD_ADDR_OWVAR 42
51945: PUSH
51946: LD_INT 24
51948: ST_TO_ADDR
51949: GO 52199
51951: LD_INT 22
51953: DOUBLE
51954: EQUAL
51955: IFTRUE 51959
51957: GO 51970
51959: POP
// bc_type := b_ext_track ; 23 :
51960: LD_ADDR_OWVAR 42
51964: PUSH
51965: LD_INT 16
51967: ST_TO_ADDR
51968: GO 52199
51970: LD_INT 23
51972: DOUBLE
51973: EQUAL
51974: IFTRUE 51978
51976: GO 51989
51978: POP
// bc_type := b_ext_laser ; 24 :
51979: LD_ADDR_OWVAR 42
51983: PUSH
51984: LD_INT 25
51986: ST_TO_ADDR
51987: GO 52199
51989: LD_INT 24
51991: DOUBLE
51992: EQUAL
51993: IFTRUE 51997
51995: GO 52008
51997: POP
// bc_type := b_control_tower ; 25 :
51998: LD_ADDR_OWVAR 42
52002: PUSH
52003: LD_INT 36
52005: ST_TO_ADDR
52006: GO 52199
52008: LD_INT 25
52010: DOUBLE
52011: EQUAL
52012: IFTRUE 52016
52014: GO 52027
52016: POP
// bc_type := b_breastwork ; 26 :
52017: LD_ADDR_OWVAR 42
52021: PUSH
52022: LD_INT 31
52024: ST_TO_ADDR
52025: GO 52199
52027: LD_INT 26
52029: DOUBLE
52030: EQUAL
52031: IFTRUE 52035
52033: GO 52046
52035: POP
// bc_type := b_bunker ; 27 :
52036: LD_ADDR_OWVAR 42
52040: PUSH
52041: LD_INT 32
52043: ST_TO_ADDR
52044: GO 52199
52046: LD_INT 27
52048: DOUBLE
52049: EQUAL
52050: IFTRUE 52054
52052: GO 52065
52054: POP
// bc_type := b_turret ; 28 :
52055: LD_ADDR_OWVAR 42
52059: PUSH
52060: LD_INT 33
52062: ST_TO_ADDR
52063: GO 52199
52065: LD_INT 28
52067: DOUBLE
52068: EQUAL
52069: IFTRUE 52073
52071: GO 52084
52073: POP
// bc_type := b_armoury ; 29 :
52074: LD_ADDR_OWVAR 42
52078: PUSH
52079: LD_INT 4
52081: ST_TO_ADDR
52082: GO 52199
52084: LD_INT 29
52086: DOUBLE
52087: EQUAL
52088: IFTRUE 52092
52090: GO 52103
52092: POP
// bc_type := b_barracks ; 30 :
52093: LD_ADDR_OWVAR 42
52097: PUSH
52098: LD_INT 5
52100: ST_TO_ADDR
52101: GO 52199
52103: LD_INT 30
52105: DOUBLE
52106: EQUAL
52107: IFTRUE 52111
52109: GO 52122
52111: POP
// bc_type := b_solar_power ; 31 :
52112: LD_ADDR_OWVAR 42
52116: PUSH
52117: LD_INT 27
52119: ST_TO_ADDR
52120: GO 52199
52122: LD_INT 31
52124: DOUBLE
52125: EQUAL
52126: IFTRUE 52130
52128: GO 52141
52130: POP
// bc_type := b_oil_power ; 32 :
52131: LD_ADDR_OWVAR 42
52135: PUSH
52136: LD_INT 26
52138: ST_TO_ADDR
52139: GO 52199
52141: LD_INT 32
52143: DOUBLE
52144: EQUAL
52145: IFTRUE 52149
52147: GO 52160
52149: POP
// bc_type := b_siberite_power ; 33 :
52150: LD_ADDR_OWVAR 42
52154: PUSH
52155: LD_INT 28
52157: ST_TO_ADDR
52158: GO 52199
52160: LD_INT 33
52162: DOUBLE
52163: EQUAL
52164: IFTRUE 52168
52166: GO 52179
52168: POP
// bc_type := b_oil_mine ; 34 :
52169: LD_ADDR_OWVAR 42
52173: PUSH
52174: LD_INT 29
52176: ST_TO_ADDR
52177: GO 52199
52179: LD_INT 34
52181: DOUBLE
52182: EQUAL
52183: IFTRUE 52187
52185: GO 52198
52187: POP
// bc_type := b_siberite_mine ; end ;
52188: LD_ADDR_OWVAR 42
52192: PUSH
52193: LD_INT 30
52195: ST_TO_ADDR
52196: GO 52199
52198: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
52199: LD_ADDR_VAR 0 8
52203: PUSH
52204: LD_VAR 0 5
52208: PPUSH
52209: LD_VAR 0 6
52213: PPUSH
52214: LD_VAR 0 3
52218: PPUSH
52219: CALL_OW 47
52223: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
52224: LD_OWVAR 42
52228: PUSH
52229: LD_INT 32
52231: PUSH
52232: LD_INT 33
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: IN
52239: IFFALSE 52255
// PlaceWeaponTurret ( b , weapon ) ;
52241: LD_VAR 0 8
52245: PPUSH
52246: LD_VAR 0 4
52250: PPUSH
52251: CALL_OW 431
// end ;
52255: LD_VAR 0 7
52259: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
52260: LD_INT 0
52262: PPUSH
52263: PPUSH
52264: PPUSH
52265: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52266: LD_ADDR_VAR 0 4
52270: PUSH
52271: LD_INT 22
52273: PUSH
52274: LD_OWVAR 2
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: LD_INT 30
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 30
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: LIST
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PPUSH
52315: CALL_OW 69
52319: ST_TO_ADDR
// if not tmp then
52320: LD_VAR 0 4
52324: NOT
52325: IFFALSE 52329
// exit ;
52327: GO 52388
// for i in tmp do
52329: LD_ADDR_VAR 0 2
52333: PUSH
52334: LD_VAR 0 4
52338: PUSH
52339: FOR_IN
52340: IFFALSE 52386
// for j = 1 to 3 do
52342: LD_ADDR_VAR 0 3
52346: PUSH
52347: DOUBLE
52348: LD_INT 1
52350: DEC
52351: ST_TO_ADDR
52352: LD_INT 3
52354: PUSH
52355: FOR_TO
52356: IFFALSE 52382
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
52358: LD_VAR 0 2
52362: PPUSH
52363: CALL_OW 274
52367: PPUSH
52368: LD_VAR 0 3
52372: PPUSH
52373: LD_INT 99999
52375: PPUSH
52376: CALL_OW 277
52380: GO 52355
52382: POP
52383: POP
52384: GO 52339
52386: POP
52387: POP
// end ;
52388: LD_VAR 0 1
52392: RET
// export function hHackSetLevel10 ; var i , j ; begin
52393: LD_INT 0
52395: PPUSH
52396: PPUSH
52397: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
52398: LD_ADDR_VAR 0 2
52402: PUSH
52403: LD_INT 21
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PPUSH
52413: CALL_OW 69
52417: PUSH
52418: FOR_IN
52419: IFFALSE 52471
// if IsSelected ( i ) then
52421: LD_VAR 0 2
52425: PPUSH
52426: CALL_OW 306
52430: IFFALSE 52469
// begin for j := 1 to 4 do
52432: LD_ADDR_VAR 0 3
52436: PUSH
52437: DOUBLE
52438: LD_INT 1
52440: DEC
52441: ST_TO_ADDR
52442: LD_INT 4
52444: PUSH
52445: FOR_TO
52446: IFFALSE 52467
// SetSkill ( i , j , 10 ) ;
52448: LD_VAR 0 2
52452: PPUSH
52453: LD_VAR 0 3
52457: PPUSH
52458: LD_INT 10
52460: PPUSH
52461: CALL_OW 237
52465: GO 52445
52467: POP
52468: POP
// end ;
52469: GO 52418
52471: POP
52472: POP
// end ;
52473: LD_VAR 0 1
52477: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
52478: LD_INT 0
52480: PPUSH
52481: PPUSH
52482: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
52483: LD_ADDR_VAR 0 2
52487: PUSH
52488: LD_INT 22
52490: PUSH
52491: LD_OWVAR 2
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 21
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PPUSH
52514: CALL_OW 69
52518: PUSH
52519: FOR_IN
52520: IFFALSE 52561
// begin for j := 1 to 4 do
52522: LD_ADDR_VAR 0 3
52526: PUSH
52527: DOUBLE
52528: LD_INT 1
52530: DEC
52531: ST_TO_ADDR
52532: LD_INT 4
52534: PUSH
52535: FOR_TO
52536: IFFALSE 52557
// SetSkill ( i , j , 10 ) ;
52538: LD_VAR 0 2
52542: PPUSH
52543: LD_VAR 0 3
52547: PPUSH
52548: LD_INT 10
52550: PPUSH
52551: CALL_OW 237
52555: GO 52535
52557: POP
52558: POP
// end ;
52559: GO 52519
52561: POP
52562: POP
// end ;
52563: LD_VAR 0 1
52567: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
52568: LD_INT 0
52570: PPUSH
// uc_side := your_side ;
52571: LD_ADDR_OWVAR 20
52575: PUSH
52576: LD_OWVAR 2
52580: ST_TO_ADDR
// uc_nation := nation ;
52581: LD_ADDR_OWVAR 21
52585: PUSH
52586: LD_VAR 0 1
52590: ST_TO_ADDR
// InitHc ;
52591: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
52595: LD_INT 0
52597: PPUSH
52598: LD_VAR 0 2
52602: PPUSH
52603: LD_VAR 0 3
52607: PPUSH
52608: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
52612: LD_VAR 0 4
52616: PPUSH
52617: LD_VAR 0 5
52621: PPUSH
52622: CALL_OW 428
52626: PUSH
52627: LD_INT 0
52629: EQUAL
52630: IFFALSE 52654
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
52632: CALL_OW 44
52636: PPUSH
52637: LD_VAR 0 4
52641: PPUSH
52642: LD_VAR 0 5
52646: PPUSH
52647: LD_INT 1
52649: PPUSH
52650: CALL_OW 48
// end ;
52654: LD_VAR 0 6
52658: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
52659: LD_INT 0
52661: PPUSH
52662: PPUSH
// uc_side := your_side ;
52663: LD_ADDR_OWVAR 20
52667: PUSH
52668: LD_OWVAR 2
52672: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
52673: LD_VAR 0 1
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: LD_INT 2
52683: PUSH
52684: LD_INT 3
52686: PUSH
52687: LD_INT 4
52689: PUSH
52690: LD_INT 5
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: IN
52700: IFFALSE 52712
// uc_nation := nation_american else
52702: LD_ADDR_OWVAR 21
52706: PUSH
52707: LD_INT 1
52709: ST_TO_ADDR
52710: GO 52755
// if chassis in [ 11 , 12 , 13 , 14 ] then
52712: LD_VAR 0 1
52716: PUSH
52717: LD_INT 11
52719: PUSH
52720: LD_INT 12
52722: PUSH
52723: LD_INT 13
52725: PUSH
52726: LD_INT 14
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: IN
52735: IFFALSE 52747
// uc_nation := nation_arabian else
52737: LD_ADDR_OWVAR 21
52741: PUSH
52742: LD_INT 2
52744: ST_TO_ADDR
52745: GO 52755
// uc_nation := nation_russian ;
52747: LD_ADDR_OWVAR 21
52751: PUSH
52752: LD_INT 3
52754: ST_TO_ADDR
// vc_chassis := chassis ;
52755: LD_ADDR_OWVAR 37
52759: PUSH
52760: LD_VAR 0 1
52764: ST_TO_ADDR
// vc_engine := engine ;
52765: LD_ADDR_OWVAR 39
52769: PUSH
52770: LD_VAR 0 2
52774: ST_TO_ADDR
// vc_control := control ;
52775: LD_ADDR_OWVAR 38
52779: PUSH
52780: LD_VAR 0 3
52784: ST_TO_ADDR
// vc_weapon := weapon ;
52785: LD_ADDR_OWVAR 40
52789: PUSH
52790: LD_VAR 0 4
52794: ST_TO_ADDR
// un := CreateVehicle ;
52795: LD_ADDR_VAR 0 8
52799: PUSH
52800: CALL_OW 45
52804: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
52805: LD_VAR 0 8
52809: PPUSH
52810: LD_INT 0
52812: PPUSH
52813: LD_INT 5
52815: PPUSH
52816: CALL_OW 12
52820: PPUSH
52821: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
52825: LD_VAR 0 8
52829: PPUSH
52830: LD_VAR 0 5
52834: PPUSH
52835: LD_VAR 0 6
52839: PPUSH
52840: LD_INT 1
52842: PPUSH
52843: CALL_OW 48
// end ;
52847: LD_VAR 0 7
52851: RET
// export hInvincible ; every 1 do
52852: GO 52854
52854: DISABLE
// hInvincible := [ ] ;
52855: LD_ADDR_EXP 87
52859: PUSH
52860: EMPTY
52861: ST_TO_ADDR
52862: END
// every 10 do var i ;
52863: GO 52865
52865: DISABLE
52866: LD_INT 0
52868: PPUSH
// begin enable ;
52869: ENABLE
// if not hInvincible then
52870: LD_EXP 87
52874: NOT
52875: IFFALSE 52879
// exit ;
52877: GO 52923
// for i in hInvincible do
52879: LD_ADDR_VAR 0 1
52883: PUSH
52884: LD_EXP 87
52888: PUSH
52889: FOR_IN
52890: IFFALSE 52921
// if GetLives ( i ) < 1000 then
52892: LD_VAR 0 1
52896: PPUSH
52897: CALL_OW 256
52901: PUSH
52902: LD_INT 1000
52904: LESS
52905: IFFALSE 52919
// SetLives ( i , 1000 ) ;
52907: LD_VAR 0 1
52911: PPUSH
52912: LD_INT 1000
52914: PPUSH
52915: CALL_OW 234
52919: GO 52889
52921: POP
52922: POP
// end ;
52923: PPOPN 1
52925: END
// export function hHackInvincible ; var i ; begin
52926: LD_INT 0
52928: PPUSH
52929: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
52930: LD_ADDR_VAR 0 2
52934: PUSH
52935: LD_INT 2
52937: PUSH
52938: LD_INT 21
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 21
52950: PUSH
52951: LD_INT 2
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: LIST
52962: PPUSH
52963: CALL_OW 69
52967: PUSH
52968: FOR_IN
52969: IFFALSE 53030
// if IsSelected ( i ) then
52971: LD_VAR 0 2
52975: PPUSH
52976: CALL_OW 306
52980: IFFALSE 53028
// begin if i in hInvincible then
52982: LD_VAR 0 2
52986: PUSH
52987: LD_EXP 87
52991: IN
52992: IFFALSE 53012
// hInvincible := hInvincible diff i else
52994: LD_ADDR_EXP 87
52998: PUSH
52999: LD_EXP 87
53003: PUSH
53004: LD_VAR 0 2
53008: DIFF
53009: ST_TO_ADDR
53010: GO 53028
// hInvincible := hInvincible union i ;
53012: LD_ADDR_EXP 87
53016: PUSH
53017: LD_EXP 87
53021: PUSH
53022: LD_VAR 0 2
53026: UNION
53027: ST_TO_ADDR
// end ;
53028: GO 52968
53030: POP
53031: POP
// end ;
53032: LD_VAR 0 1
53036: RET
// export function hHackInvisible ; var i , j ; begin
53037: LD_INT 0
53039: PPUSH
53040: PPUSH
53041: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
53042: LD_ADDR_VAR 0 2
53046: PUSH
53047: LD_INT 21
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PPUSH
53057: CALL_OW 69
53061: PUSH
53062: FOR_IN
53063: IFFALSE 53087
// if IsSelected ( i ) then
53065: LD_VAR 0 2
53069: PPUSH
53070: CALL_OW 306
53074: IFFALSE 53085
// ComForceInvisible ( i ) ;
53076: LD_VAR 0 2
53080: PPUSH
53081: CALL_OW 496
53085: GO 53062
53087: POP
53088: POP
// end ;
53089: LD_VAR 0 1
53093: RET
// export function hHackChangeYourSide ; begin
53094: LD_INT 0
53096: PPUSH
// if your_side = 8 then
53097: LD_OWVAR 2
53101: PUSH
53102: LD_INT 8
53104: EQUAL
53105: IFFALSE 53117
// your_side := 0 else
53107: LD_ADDR_OWVAR 2
53111: PUSH
53112: LD_INT 0
53114: ST_TO_ADDR
53115: GO 53131
// your_side := your_side + 1 ;
53117: LD_ADDR_OWVAR 2
53121: PUSH
53122: LD_OWVAR 2
53126: PUSH
53127: LD_INT 1
53129: PLUS
53130: ST_TO_ADDR
// end ;
53131: LD_VAR 0 1
53135: RET
// export function hHackChangeUnitSide ; var i , j ; begin
53136: LD_INT 0
53138: PPUSH
53139: PPUSH
53140: PPUSH
// for i in all_units do
53141: LD_ADDR_VAR 0 2
53145: PUSH
53146: LD_OWVAR 3
53150: PUSH
53151: FOR_IN
53152: IFFALSE 53230
// if IsSelected ( i ) then
53154: LD_VAR 0 2
53158: PPUSH
53159: CALL_OW 306
53163: IFFALSE 53228
// begin j := GetSide ( i ) ;
53165: LD_ADDR_VAR 0 3
53169: PUSH
53170: LD_VAR 0 2
53174: PPUSH
53175: CALL_OW 255
53179: ST_TO_ADDR
// if j = 8 then
53180: LD_VAR 0 3
53184: PUSH
53185: LD_INT 8
53187: EQUAL
53188: IFFALSE 53200
// j := 0 else
53190: LD_ADDR_VAR 0 3
53194: PUSH
53195: LD_INT 0
53197: ST_TO_ADDR
53198: GO 53214
// j := j + 1 ;
53200: LD_ADDR_VAR 0 3
53204: PUSH
53205: LD_VAR 0 3
53209: PUSH
53210: LD_INT 1
53212: PLUS
53213: ST_TO_ADDR
// SetSide ( i , j ) ;
53214: LD_VAR 0 2
53218: PPUSH
53219: LD_VAR 0 3
53223: PPUSH
53224: CALL_OW 235
// end ;
53228: GO 53151
53230: POP
53231: POP
// end ;
53232: LD_VAR 0 1
53236: RET
// export function hHackFog ; begin
53237: LD_INT 0
53239: PPUSH
// FogOff ( true ) ;
53240: LD_INT 1
53242: PPUSH
53243: CALL_OW 344
// end ;
53247: LD_VAR 0 1
53251: RET
// export function hHackTeleport ( unit , x , y ) ; begin
53252: LD_INT 0
53254: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
53255: LD_VAR 0 1
53259: PPUSH
53260: LD_VAR 0 2
53264: PPUSH
53265: LD_VAR 0 3
53269: PPUSH
53270: LD_INT 1
53272: PPUSH
53273: LD_INT 1
53275: PPUSH
53276: CALL_OW 483
// CenterOnXY ( x , y ) ;
53280: LD_VAR 0 2
53284: PPUSH
53285: LD_VAR 0 3
53289: PPUSH
53290: CALL_OW 84
// end ; end_of_file end_of_file
53294: LD_VAR 0 4
53298: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
53299: LD_INT 0
53301: PPUSH
53302: PPUSH
53303: PPUSH
53304: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
53305: LD_VAR 0 1
53309: PPUSH
53310: CALL_OW 264
53314: PUSH
53315: LD_EXP 7
53319: EQUAL
53320: IFFALSE 53392
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
53322: LD_INT 68
53324: PPUSH
53325: LD_VAR 0 1
53329: PPUSH
53330: CALL_OW 255
53334: PPUSH
53335: CALL_OW 321
53339: PUSH
53340: LD_INT 2
53342: EQUAL
53343: IFFALSE 53355
// eff := 70 else
53345: LD_ADDR_VAR 0 4
53349: PUSH
53350: LD_INT 70
53352: ST_TO_ADDR
53353: GO 53363
// eff := 30 ;
53355: LD_ADDR_VAR 0 4
53359: PUSH
53360: LD_INT 30
53362: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
53363: LD_VAR 0 1
53367: PPUSH
53368: CALL_OW 250
53372: PPUSH
53373: LD_VAR 0 1
53377: PPUSH
53378: CALL_OW 251
53382: PPUSH
53383: LD_VAR 0 4
53387: PPUSH
53388: CALL_OW 495
// end ; end ;
53392: LD_VAR 0 2
53396: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53397: LD_INT 0
53399: PPUSH
// end ;
53400: LD_VAR 0 4
53404: RET
// export function SOS_Command ( cmd ) ; begin
53405: LD_INT 0
53407: PPUSH
// end ;
53408: LD_VAR 0 2
53412: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53413: LD_INT 0
53415: PPUSH
// if cmd = 121 then
53416: LD_VAR 0 1
53420: PUSH
53421: LD_INT 121
53423: EQUAL
53424: IFFALSE 53426
// end ;
53426: LD_VAR 0 6
53430: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
53431: LD_INT 0
53433: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
53434: LD_VAR 0 1
53438: PUSH
53439: LD_INT 250
53441: EQUAL
53442: PUSH
53443: LD_VAR 0 2
53447: PPUSH
53448: CALL_OW 264
53452: PUSH
53453: LD_EXP 10
53457: EQUAL
53458: AND
53459: IFFALSE 53480
// MinerPlaceMine ( unit , x , y ) ;
53461: LD_VAR 0 2
53465: PPUSH
53466: LD_VAR 0 4
53470: PPUSH
53471: LD_VAR 0 5
53475: PPUSH
53476: CALL 55829 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
53480: LD_VAR 0 1
53484: PUSH
53485: LD_INT 251
53487: EQUAL
53488: PUSH
53489: LD_VAR 0 2
53493: PPUSH
53494: CALL_OW 264
53498: PUSH
53499: LD_EXP 10
53503: EQUAL
53504: AND
53505: IFFALSE 53526
// MinerDetonateMine ( unit , x , y ) ;
53507: LD_VAR 0 2
53511: PPUSH
53512: LD_VAR 0 4
53516: PPUSH
53517: LD_VAR 0 5
53521: PPUSH
53522: CALL 56106 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
53526: LD_VAR 0 1
53530: PUSH
53531: LD_INT 252
53533: EQUAL
53534: PUSH
53535: LD_VAR 0 2
53539: PPUSH
53540: CALL_OW 264
53544: PUSH
53545: LD_EXP 10
53549: EQUAL
53550: AND
53551: IFFALSE 53572
// MinerCreateMinefield ( unit , x , y ) ;
53553: LD_VAR 0 2
53557: PPUSH
53558: LD_VAR 0 4
53562: PPUSH
53563: LD_VAR 0 5
53567: PPUSH
53568: CALL 56523 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
53572: LD_VAR 0 1
53576: PUSH
53577: LD_INT 253
53579: EQUAL
53580: PUSH
53581: LD_VAR 0 2
53585: PPUSH
53586: CALL_OW 257
53590: PUSH
53591: LD_INT 5
53593: EQUAL
53594: AND
53595: IFFALSE 53616
// ComBinocular ( unit , x , y ) ;
53597: LD_VAR 0 2
53601: PPUSH
53602: LD_VAR 0 4
53606: PPUSH
53607: LD_VAR 0 5
53611: PPUSH
53612: CALL 56894 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
53616: LD_VAR 0 1
53620: PUSH
53621: LD_INT 254
53623: EQUAL
53624: PUSH
53625: LD_VAR 0 2
53629: PPUSH
53630: CALL_OW 264
53634: PUSH
53635: LD_EXP 5
53639: EQUAL
53640: AND
53641: PUSH
53642: LD_VAR 0 3
53646: PPUSH
53647: CALL_OW 263
53651: PUSH
53652: LD_INT 3
53654: EQUAL
53655: AND
53656: IFFALSE 53672
// HackDestroyVehicle ( unit , selectedUnit ) ;
53658: LD_VAR 0 2
53662: PPUSH
53663: LD_VAR 0 3
53667: PPUSH
53668: CALL 55189 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
53672: LD_VAR 0 1
53676: PUSH
53677: LD_INT 255
53679: EQUAL
53680: PUSH
53681: LD_VAR 0 2
53685: PPUSH
53686: CALL_OW 264
53690: PUSH
53691: LD_INT 14
53693: PUSH
53694: LD_INT 53
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: IN
53701: AND
53702: PUSH
53703: LD_VAR 0 4
53707: PPUSH
53708: LD_VAR 0 5
53712: PPUSH
53713: CALL_OW 488
53717: AND
53718: IFFALSE 53742
// CutTreeXYR ( unit , x , y , 12 ) ;
53720: LD_VAR 0 2
53724: PPUSH
53725: LD_VAR 0 4
53729: PPUSH
53730: LD_VAR 0 5
53734: PPUSH
53735: LD_INT 12
53737: PPUSH
53738: CALL 53755 0 4
// end ;
53742: LD_VAR 0 6
53746: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
53747: LD_INT 0
53749: PPUSH
// end ;
53750: LD_VAR 0 4
53754: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
53755: LD_INT 0
53757: PPUSH
53758: PPUSH
53759: PPUSH
53760: PPUSH
53761: PPUSH
53762: PPUSH
53763: PPUSH
53764: PPUSH
53765: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
53766: LD_VAR 0 1
53770: NOT
53771: PUSH
53772: LD_VAR 0 2
53776: PPUSH
53777: LD_VAR 0 3
53781: PPUSH
53782: CALL_OW 488
53786: NOT
53787: OR
53788: PUSH
53789: LD_VAR 0 4
53793: NOT
53794: OR
53795: IFFALSE 53799
// exit ;
53797: GO 54139
// list := [ ] ;
53799: LD_ADDR_VAR 0 13
53803: PUSH
53804: EMPTY
53805: ST_TO_ADDR
// if x - r < 0 then
53806: LD_VAR 0 2
53810: PUSH
53811: LD_VAR 0 4
53815: MINUS
53816: PUSH
53817: LD_INT 0
53819: LESS
53820: IFFALSE 53832
// min_x := 0 else
53822: LD_ADDR_VAR 0 7
53826: PUSH
53827: LD_INT 0
53829: ST_TO_ADDR
53830: GO 53848
// min_x := x - r ;
53832: LD_ADDR_VAR 0 7
53836: PUSH
53837: LD_VAR 0 2
53841: PUSH
53842: LD_VAR 0 4
53846: MINUS
53847: ST_TO_ADDR
// if y - r < 0 then
53848: LD_VAR 0 3
53852: PUSH
53853: LD_VAR 0 4
53857: MINUS
53858: PUSH
53859: LD_INT 0
53861: LESS
53862: IFFALSE 53874
// min_y := 0 else
53864: LD_ADDR_VAR 0 8
53868: PUSH
53869: LD_INT 0
53871: ST_TO_ADDR
53872: GO 53890
// min_y := y - r ;
53874: LD_ADDR_VAR 0 8
53878: PUSH
53879: LD_VAR 0 3
53883: PUSH
53884: LD_VAR 0 4
53888: MINUS
53889: ST_TO_ADDR
// max_x := x + r ;
53890: LD_ADDR_VAR 0 9
53894: PUSH
53895: LD_VAR 0 2
53899: PUSH
53900: LD_VAR 0 4
53904: PLUS
53905: ST_TO_ADDR
// max_y := y + r ;
53906: LD_ADDR_VAR 0 10
53910: PUSH
53911: LD_VAR 0 3
53915: PUSH
53916: LD_VAR 0 4
53920: PLUS
53921: ST_TO_ADDR
// for _x = min_x to max_x do
53922: LD_ADDR_VAR 0 11
53926: PUSH
53927: DOUBLE
53928: LD_VAR 0 7
53932: DEC
53933: ST_TO_ADDR
53934: LD_VAR 0 9
53938: PUSH
53939: FOR_TO
53940: IFFALSE 54057
// for _y = min_y to max_y do
53942: LD_ADDR_VAR 0 12
53946: PUSH
53947: DOUBLE
53948: LD_VAR 0 8
53952: DEC
53953: ST_TO_ADDR
53954: LD_VAR 0 10
53958: PUSH
53959: FOR_TO
53960: IFFALSE 54053
// begin if not ValidHex ( _x , _y ) then
53962: LD_VAR 0 11
53966: PPUSH
53967: LD_VAR 0 12
53971: PPUSH
53972: CALL_OW 488
53976: NOT
53977: IFFALSE 53981
// continue ;
53979: GO 53959
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53981: LD_VAR 0 11
53985: PPUSH
53986: LD_VAR 0 12
53990: PPUSH
53991: CALL_OW 351
53995: PUSH
53996: LD_VAR 0 11
54000: PPUSH
54001: LD_VAR 0 12
54005: PPUSH
54006: CALL_OW 554
54010: AND
54011: IFFALSE 54051
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
54013: LD_ADDR_VAR 0 13
54017: PUSH
54018: LD_VAR 0 13
54022: PPUSH
54023: LD_VAR 0 13
54027: PUSH
54028: LD_INT 1
54030: PLUS
54031: PPUSH
54032: LD_VAR 0 11
54036: PUSH
54037: LD_VAR 0 12
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PPUSH
54046: CALL_OW 2
54050: ST_TO_ADDR
// end ;
54051: GO 53959
54053: POP
54054: POP
54055: GO 53939
54057: POP
54058: POP
// if not list then
54059: LD_VAR 0 13
54063: NOT
54064: IFFALSE 54068
// exit ;
54066: GO 54139
// for i in list do
54068: LD_ADDR_VAR 0 6
54072: PUSH
54073: LD_VAR 0 13
54077: PUSH
54078: FOR_IN
54079: IFFALSE 54137
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
54081: LD_VAR 0 1
54085: PPUSH
54086: LD_STRING M
54088: PUSH
54089: LD_VAR 0 6
54093: PUSH
54094: LD_INT 1
54096: ARRAY
54097: PUSH
54098: LD_VAR 0 6
54102: PUSH
54103: LD_INT 2
54105: ARRAY
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: PPUSH
54131: CALL_OW 447
54135: GO 54078
54137: POP
54138: POP
// end ;
54139: LD_VAR 0 5
54143: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
54144: LD_EXP 90
54148: NOT
54149: IFFALSE 54199
54151: GO 54153
54153: DISABLE
// begin initHack := true ;
54154: LD_ADDR_EXP 90
54158: PUSH
54159: LD_INT 1
54161: ST_TO_ADDR
// hackTanks := [ ] ;
54162: LD_ADDR_EXP 91
54166: PUSH
54167: EMPTY
54168: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
54169: LD_ADDR_EXP 92
54173: PUSH
54174: EMPTY
54175: ST_TO_ADDR
// hackLimit := 3 ;
54176: LD_ADDR_EXP 93
54180: PUSH
54181: LD_INT 3
54183: ST_TO_ADDR
// hackDist := 12 ;
54184: LD_ADDR_EXP 94
54188: PUSH
54189: LD_INT 12
54191: ST_TO_ADDR
// hackCounter := [ ] ;
54192: LD_ADDR_EXP 95
54196: PUSH
54197: EMPTY
54198: ST_TO_ADDR
// end ;
54199: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
54200: LD_EXP 90
54204: PUSH
54205: LD_INT 34
54207: PUSH
54208: LD_EXP 5
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PPUSH
54217: CALL_OW 69
54221: AND
54222: IFFALSE 54477
54224: GO 54226
54226: DISABLE
54227: LD_INT 0
54229: PPUSH
54230: PPUSH
// begin enable ;
54231: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
54232: LD_ADDR_VAR 0 1
54236: PUSH
54237: LD_INT 34
54239: PUSH
54240: LD_EXP 5
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PPUSH
54249: CALL_OW 69
54253: PUSH
54254: FOR_IN
54255: IFFALSE 54475
// begin if not i in hackTanks then
54257: LD_VAR 0 1
54261: PUSH
54262: LD_EXP 91
54266: IN
54267: NOT
54268: IFFALSE 54351
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
54270: LD_ADDR_EXP 91
54274: PUSH
54275: LD_EXP 91
54279: PPUSH
54280: LD_EXP 91
54284: PUSH
54285: LD_INT 1
54287: PLUS
54288: PPUSH
54289: LD_VAR 0 1
54293: PPUSH
54294: CALL_OW 1
54298: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
54299: LD_ADDR_EXP 92
54303: PUSH
54304: LD_EXP 92
54308: PPUSH
54309: LD_EXP 92
54313: PUSH
54314: LD_INT 1
54316: PLUS
54317: PPUSH
54318: EMPTY
54319: PPUSH
54320: CALL_OW 1
54324: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
54325: LD_ADDR_EXP 95
54329: PUSH
54330: LD_EXP 95
54334: PPUSH
54335: LD_EXP 95
54339: PUSH
54340: LD_INT 1
54342: PLUS
54343: PPUSH
54344: EMPTY
54345: PPUSH
54346: CALL_OW 1
54350: ST_TO_ADDR
// end ; if not IsOk ( i ) then
54351: LD_VAR 0 1
54355: PPUSH
54356: CALL_OW 302
54360: NOT
54361: IFFALSE 54374
// begin HackUnlinkAll ( i ) ;
54363: LD_VAR 0 1
54367: PPUSH
54368: CALL 54480 0 1
// continue ;
54372: GO 54254
// end ; HackCheckCapturedStatus ( i ) ;
54374: LD_VAR 0 1
54378: PPUSH
54379: CALL 54923 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
54383: LD_ADDR_VAR 0 2
54387: PUSH
54388: LD_INT 81
54390: PUSH
54391: LD_VAR 0 1
54395: PPUSH
54396: CALL_OW 255
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 33
54407: PUSH
54408: LD_INT 3
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 91
54417: PUSH
54418: LD_VAR 0 1
54422: PUSH
54423: LD_EXP 94
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 50
54435: PUSH
54436: EMPTY
54437: LIST
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: PPUSH
54445: CALL_OW 69
54449: ST_TO_ADDR
// if not tmp then
54450: LD_VAR 0 2
54454: NOT
54455: IFFALSE 54459
// continue ;
54457: GO 54254
// HackLink ( i , tmp ) ;
54459: LD_VAR 0 1
54463: PPUSH
54464: LD_VAR 0 2
54468: PPUSH
54469: CALL 54616 0 2
// end ;
54473: GO 54254
54475: POP
54476: POP
// end ;
54477: PPOPN 2
54479: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
54480: LD_INT 0
54482: PPUSH
54483: PPUSH
54484: PPUSH
// if not hack in hackTanks then
54485: LD_VAR 0 1
54489: PUSH
54490: LD_EXP 91
54494: IN
54495: NOT
54496: IFFALSE 54500
// exit ;
54498: GO 54611
// index := GetElementIndex ( hackTanks , hack ) ;
54500: LD_ADDR_VAR 0 4
54504: PUSH
54505: LD_EXP 91
54509: PPUSH
54510: LD_VAR 0 1
54514: PPUSH
54515: CALL 5058 0 2
54519: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
54520: LD_EXP 92
54524: PUSH
54525: LD_VAR 0 4
54529: ARRAY
54530: IFFALSE 54611
// begin for i in hackTanksCaptured [ index ] do
54532: LD_ADDR_VAR 0 3
54536: PUSH
54537: LD_EXP 92
54541: PUSH
54542: LD_VAR 0 4
54546: ARRAY
54547: PUSH
54548: FOR_IN
54549: IFFALSE 54575
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
54551: LD_VAR 0 3
54555: PUSH
54556: LD_INT 1
54558: ARRAY
54559: PPUSH
54560: LD_VAR 0 3
54564: PUSH
54565: LD_INT 2
54567: ARRAY
54568: PPUSH
54569: CALL_OW 235
54573: GO 54548
54575: POP
54576: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
54577: LD_ADDR_EXP 92
54581: PUSH
54582: LD_EXP 92
54586: PPUSH
54587: LD_VAR 0 4
54591: PPUSH
54592: EMPTY
54593: PPUSH
54594: CALL_OW 1
54598: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
54599: LD_VAR 0 1
54603: PPUSH
54604: LD_INT 0
54606: PPUSH
54607: CALL_OW 505
// end ; end ;
54611: LD_VAR 0 2
54615: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
54616: LD_INT 0
54618: PPUSH
54619: PPUSH
54620: PPUSH
// if not hack in hackTanks or not vehicles then
54621: LD_VAR 0 1
54625: PUSH
54626: LD_EXP 91
54630: IN
54631: NOT
54632: PUSH
54633: LD_VAR 0 2
54637: NOT
54638: OR
54639: IFFALSE 54643
// exit ;
54641: GO 54918
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
54643: LD_ADDR_VAR 0 2
54647: PUSH
54648: LD_VAR 0 1
54652: PPUSH
54653: LD_VAR 0 2
54657: PPUSH
54658: LD_INT 1
54660: PPUSH
54661: LD_INT 1
54663: PPUSH
54664: CALL 5708 0 4
54668: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
54669: LD_ADDR_VAR 0 5
54673: PUSH
54674: LD_EXP 91
54678: PPUSH
54679: LD_VAR 0 1
54683: PPUSH
54684: CALL 5058 0 2
54688: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
54689: LD_EXP 92
54693: PUSH
54694: LD_VAR 0 5
54698: ARRAY
54699: PUSH
54700: LD_EXP 93
54704: LESS
54705: IFFALSE 54894
// begin for i := 1 to vehicles do
54707: LD_ADDR_VAR 0 4
54711: PUSH
54712: DOUBLE
54713: LD_INT 1
54715: DEC
54716: ST_TO_ADDR
54717: LD_VAR 0 2
54721: PUSH
54722: FOR_TO
54723: IFFALSE 54892
// begin if hackTanksCaptured [ index ] = hackLimit then
54725: LD_EXP 92
54729: PUSH
54730: LD_VAR 0 5
54734: ARRAY
54735: PUSH
54736: LD_EXP 93
54740: EQUAL
54741: IFFALSE 54745
// break ;
54743: GO 54892
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
54745: LD_ADDR_EXP 95
54749: PUSH
54750: LD_EXP 95
54754: PPUSH
54755: LD_VAR 0 5
54759: PPUSH
54760: LD_EXP 95
54764: PUSH
54765: LD_VAR 0 5
54769: ARRAY
54770: PUSH
54771: LD_INT 1
54773: PLUS
54774: PPUSH
54775: CALL_OW 1
54779: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
54780: LD_ADDR_EXP 92
54784: PUSH
54785: LD_EXP 92
54789: PPUSH
54790: LD_VAR 0 5
54794: PUSH
54795: LD_EXP 92
54799: PUSH
54800: LD_VAR 0 5
54804: ARRAY
54805: PUSH
54806: LD_INT 1
54808: PLUS
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PPUSH
54814: LD_VAR 0 2
54818: PUSH
54819: LD_VAR 0 4
54823: ARRAY
54824: PUSH
54825: LD_VAR 0 2
54829: PUSH
54830: LD_VAR 0 4
54834: ARRAY
54835: PPUSH
54836: CALL_OW 255
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PPUSH
54845: CALL 5273 0 3
54849: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
54850: LD_VAR 0 2
54854: PUSH
54855: LD_VAR 0 4
54859: ARRAY
54860: PPUSH
54861: LD_VAR 0 1
54865: PPUSH
54866: CALL_OW 255
54870: PPUSH
54871: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
54875: LD_VAR 0 2
54879: PUSH
54880: LD_VAR 0 4
54884: ARRAY
54885: PPUSH
54886: CALL_OW 141
// end ;
54890: GO 54722
54892: POP
54893: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
54894: LD_VAR 0 1
54898: PPUSH
54899: LD_EXP 92
54903: PUSH
54904: LD_VAR 0 5
54908: ARRAY
54909: PUSH
54910: LD_INT 0
54912: PLUS
54913: PPUSH
54914: CALL_OW 505
// end ;
54918: LD_VAR 0 3
54922: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
54923: LD_INT 0
54925: PPUSH
54926: PPUSH
54927: PPUSH
54928: PPUSH
// if not hack in hackTanks then
54929: LD_VAR 0 1
54933: PUSH
54934: LD_EXP 91
54938: IN
54939: NOT
54940: IFFALSE 54944
// exit ;
54942: GO 55184
// index := GetElementIndex ( hackTanks , hack ) ;
54944: LD_ADDR_VAR 0 4
54948: PUSH
54949: LD_EXP 91
54953: PPUSH
54954: LD_VAR 0 1
54958: PPUSH
54959: CALL 5058 0 2
54963: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
54964: LD_ADDR_VAR 0 3
54968: PUSH
54969: DOUBLE
54970: LD_EXP 92
54974: PUSH
54975: LD_VAR 0 4
54979: ARRAY
54980: INC
54981: ST_TO_ADDR
54982: LD_INT 1
54984: PUSH
54985: FOR_DOWNTO
54986: IFFALSE 55158
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
54988: LD_ADDR_VAR 0 5
54992: PUSH
54993: LD_EXP 92
54997: PUSH
54998: LD_VAR 0 4
55002: ARRAY
55003: PUSH
55004: LD_VAR 0 3
55008: ARRAY
55009: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
55010: LD_VAR 0 5
55014: PUSH
55015: LD_INT 1
55017: ARRAY
55018: PPUSH
55019: CALL_OW 302
55023: NOT
55024: PUSH
55025: LD_VAR 0 5
55029: PUSH
55030: LD_INT 1
55032: ARRAY
55033: PPUSH
55034: CALL_OW 255
55038: PUSH
55039: LD_VAR 0 1
55043: PPUSH
55044: CALL_OW 255
55048: NONEQUAL
55049: OR
55050: IFFALSE 55156
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
55052: LD_VAR 0 5
55056: PUSH
55057: LD_INT 1
55059: ARRAY
55060: PPUSH
55061: CALL_OW 305
55065: PUSH
55066: LD_VAR 0 5
55070: PUSH
55071: LD_INT 1
55073: ARRAY
55074: PPUSH
55075: CALL_OW 255
55079: PUSH
55080: LD_VAR 0 1
55084: PPUSH
55085: CALL_OW 255
55089: EQUAL
55090: AND
55091: IFFALSE 55115
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
55093: LD_VAR 0 5
55097: PUSH
55098: LD_INT 1
55100: ARRAY
55101: PPUSH
55102: LD_VAR 0 5
55106: PUSH
55107: LD_INT 2
55109: ARRAY
55110: PPUSH
55111: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
55115: LD_ADDR_EXP 92
55119: PUSH
55120: LD_EXP 92
55124: PPUSH
55125: LD_VAR 0 4
55129: PPUSH
55130: LD_EXP 92
55134: PUSH
55135: LD_VAR 0 4
55139: ARRAY
55140: PPUSH
55141: LD_VAR 0 3
55145: PPUSH
55146: CALL_OW 3
55150: PPUSH
55151: CALL_OW 1
55155: ST_TO_ADDR
// end ; end ;
55156: GO 54985
55158: POP
55159: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55160: LD_VAR 0 1
55164: PPUSH
55165: LD_EXP 92
55169: PUSH
55170: LD_VAR 0 4
55174: ARRAY
55175: PUSH
55176: LD_INT 0
55178: PLUS
55179: PPUSH
55180: CALL_OW 505
// end ;
55184: LD_VAR 0 2
55188: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
55189: LD_INT 0
55191: PPUSH
55192: PPUSH
55193: PPUSH
55194: PPUSH
// if not hack in hackTanks then
55195: LD_VAR 0 1
55199: PUSH
55200: LD_EXP 91
55204: IN
55205: NOT
55206: IFFALSE 55210
// exit ;
55208: GO 55295
// index := GetElementIndex ( hackTanks , hack ) ;
55210: LD_ADDR_VAR 0 5
55214: PUSH
55215: LD_EXP 91
55219: PPUSH
55220: LD_VAR 0 1
55224: PPUSH
55225: CALL 5058 0 2
55229: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
55230: LD_ADDR_VAR 0 4
55234: PUSH
55235: DOUBLE
55236: LD_INT 1
55238: DEC
55239: ST_TO_ADDR
55240: LD_EXP 92
55244: PUSH
55245: LD_VAR 0 5
55249: ARRAY
55250: PUSH
55251: FOR_TO
55252: IFFALSE 55293
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
55254: LD_EXP 92
55258: PUSH
55259: LD_VAR 0 5
55263: ARRAY
55264: PUSH
55265: LD_VAR 0 4
55269: ARRAY
55270: PUSH
55271: LD_INT 1
55273: ARRAY
55274: PUSH
55275: LD_VAR 0 2
55279: EQUAL
55280: IFFALSE 55291
// KillUnit ( vehicle ) ;
55282: LD_VAR 0 2
55286: PPUSH
55287: CALL_OW 66
55291: GO 55251
55293: POP
55294: POP
// end ;
55295: LD_VAR 0 3
55299: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
55300: LD_EXP 96
55304: NOT
55305: IFFALSE 55340
55307: GO 55309
55309: DISABLE
// begin initMiner := true ;
55310: LD_ADDR_EXP 96
55314: PUSH
55315: LD_INT 1
55317: ST_TO_ADDR
// minersList := [ ] ;
55318: LD_ADDR_EXP 97
55322: PUSH
55323: EMPTY
55324: ST_TO_ADDR
// minerMinesList := [ ] ;
55325: LD_ADDR_EXP 98
55329: PUSH
55330: EMPTY
55331: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
55332: LD_ADDR_EXP 99
55336: PUSH
55337: LD_INT 5
55339: ST_TO_ADDR
// end ;
55340: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
55341: LD_EXP 96
55345: PUSH
55346: LD_INT 34
55348: PUSH
55349: LD_EXP 10
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PPUSH
55358: CALL_OW 69
55362: AND
55363: IFFALSE 55826
55365: GO 55367
55367: DISABLE
55368: LD_INT 0
55370: PPUSH
55371: PPUSH
55372: PPUSH
55373: PPUSH
// begin enable ;
55374: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
55375: LD_ADDR_VAR 0 1
55379: PUSH
55380: LD_INT 34
55382: PUSH
55383: LD_EXP 10
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PPUSH
55392: CALL_OW 69
55396: PUSH
55397: FOR_IN
55398: IFFALSE 55470
// begin if not i in minersList then
55400: LD_VAR 0 1
55404: PUSH
55405: LD_EXP 97
55409: IN
55410: NOT
55411: IFFALSE 55468
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
55413: LD_ADDR_EXP 97
55417: PUSH
55418: LD_EXP 97
55422: PPUSH
55423: LD_EXP 97
55427: PUSH
55428: LD_INT 1
55430: PLUS
55431: PPUSH
55432: LD_VAR 0 1
55436: PPUSH
55437: CALL_OW 1
55441: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55442: LD_ADDR_EXP 98
55446: PUSH
55447: LD_EXP 98
55451: PPUSH
55452: LD_EXP 98
55456: PUSH
55457: LD_INT 1
55459: PLUS
55460: PPUSH
55461: EMPTY
55462: PPUSH
55463: CALL_OW 1
55467: ST_TO_ADDR
// end end ;
55468: GO 55397
55470: POP
55471: POP
// for i := minerMinesList downto 1 do
55472: LD_ADDR_VAR 0 1
55476: PUSH
55477: DOUBLE
55478: LD_EXP 98
55482: INC
55483: ST_TO_ADDR
55484: LD_INT 1
55486: PUSH
55487: FOR_DOWNTO
55488: IFFALSE 55824
// begin if IsLive ( minersList [ i ] ) then
55490: LD_EXP 97
55494: PUSH
55495: LD_VAR 0 1
55499: ARRAY
55500: PPUSH
55501: CALL_OW 300
55505: IFFALSE 55533
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
55507: LD_EXP 97
55511: PUSH
55512: LD_VAR 0 1
55516: ARRAY
55517: PPUSH
55518: LD_EXP 98
55522: PUSH
55523: LD_VAR 0 1
55527: ARRAY
55528: PPUSH
55529: CALL_OW 505
// if not minerMinesList [ i ] then
55533: LD_EXP 98
55537: PUSH
55538: LD_VAR 0 1
55542: ARRAY
55543: NOT
55544: IFFALSE 55548
// continue ;
55546: GO 55487
// for j := minerMinesList [ i ] downto 1 do
55548: LD_ADDR_VAR 0 2
55552: PUSH
55553: DOUBLE
55554: LD_EXP 98
55558: PUSH
55559: LD_VAR 0 1
55563: ARRAY
55564: INC
55565: ST_TO_ADDR
55566: LD_INT 1
55568: PUSH
55569: FOR_DOWNTO
55570: IFFALSE 55820
// begin side := GetSide ( minersList [ i ] ) ;
55572: LD_ADDR_VAR 0 3
55576: PUSH
55577: LD_EXP 97
55581: PUSH
55582: LD_VAR 0 1
55586: ARRAY
55587: PPUSH
55588: CALL_OW 255
55592: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
55593: LD_ADDR_VAR 0 4
55597: PUSH
55598: LD_EXP 98
55602: PUSH
55603: LD_VAR 0 1
55607: ARRAY
55608: PUSH
55609: LD_VAR 0 2
55613: ARRAY
55614: PUSH
55615: LD_INT 1
55617: ARRAY
55618: PPUSH
55619: LD_EXP 98
55623: PUSH
55624: LD_VAR 0 1
55628: ARRAY
55629: PUSH
55630: LD_VAR 0 2
55634: ARRAY
55635: PUSH
55636: LD_INT 2
55638: ARRAY
55639: PPUSH
55640: CALL_OW 428
55644: ST_TO_ADDR
// if not tmp then
55645: LD_VAR 0 4
55649: NOT
55650: IFFALSE 55654
// continue ;
55652: GO 55569
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
55654: LD_VAR 0 4
55658: PUSH
55659: LD_INT 81
55661: PUSH
55662: LD_VAR 0 3
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PPUSH
55671: CALL_OW 69
55675: IN
55676: PUSH
55677: LD_EXP 98
55681: PUSH
55682: LD_VAR 0 1
55686: ARRAY
55687: PUSH
55688: LD_VAR 0 2
55692: ARRAY
55693: PUSH
55694: LD_INT 1
55696: ARRAY
55697: PPUSH
55698: LD_EXP 98
55702: PUSH
55703: LD_VAR 0 1
55707: ARRAY
55708: PUSH
55709: LD_VAR 0 2
55713: ARRAY
55714: PUSH
55715: LD_INT 2
55717: ARRAY
55718: PPUSH
55719: CALL_OW 458
55723: AND
55724: IFFALSE 55818
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
55726: LD_EXP 98
55730: PUSH
55731: LD_VAR 0 1
55735: ARRAY
55736: PUSH
55737: LD_VAR 0 2
55741: ARRAY
55742: PUSH
55743: LD_INT 1
55745: ARRAY
55746: PPUSH
55747: LD_EXP 98
55751: PUSH
55752: LD_VAR 0 1
55756: ARRAY
55757: PUSH
55758: LD_VAR 0 2
55762: ARRAY
55763: PUSH
55764: LD_INT 2
55766: ARRAY
55767: PPUSH
55768: LD_VAR 0 3
55772: PPUSH
55773: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
55777: LD_ADDR_EXP 98
55781: PUSH
55782: LD_EXP 98
55786: PPUSH
55787: LD_VAR 0 1
55791: PPUSH
55792: LD_EXP 98
55796: PUSH
55797: LD_VAR 0 1
55801: ARRAY
55802: PPUSH
55803: LD_VAR 0 2
55807: PPUSH
55808: CALL_OW 3
55812: PPUSH
55813: CALL_OW 1
55817: ST_TO_ADDR
// end ; end ;
55818: GO 55569
55820: POP
55821: POP
// end ;
55822: GO 55487
55824: POP
55825: POP
// end ;
55826: PPOPN 4
55828: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
55829: LD_INT 0
55831: PPUSH
55832: PPUSH
// result := false ;
55833: LD_ADDR_VAR 0 4
55837: PUSH
55838: LD_INT 0
55840: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
55841: LD_VAR 0 1
55845: PPUSH
55846: CALL_OW 264
55850: PUSH
55851: LD_EXP 10
55855: EQUAL
55856: NOT
55857: IFFALSE 55861
// exit ;
55859: GO 56101
// index := GetElementIndex ( minersList , unit ) ;
55861: LD_ADDR_VAR 0 5
55865: PUSH
55866: LD_EXP 97
55870: PPUSH
55871: LD_VAR 0 1
55875: PPUSH
55876: CALL 5058 0 2
55880: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
55881: LD_EXP 98
55885: PUSH
55886: LD_VAR 0 5
55890: ARRAY
55891: PUSH
55892: LD_EXP 99
55896: GREATEREQUAL
55897: IFFALSE 55901
// exit ;
55899: GO 56101
// ComMoveXY ( unit , x , y ) ;
55901: LD_VAR 0 1
55905: PPUSH
55906: LD_VAR 0 2
55910: PPUSH
55911: LD_VAR 0 3
55915: PPUSH
55916: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
55920: LD_INT 35
55922: PPUSH
55923: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
55927: LD_VAR 0 1
55931: PPUSH
55932: LD_VAR 0 2
55936: PPUSH
55937: LD_VAR 0 3
55941: PPUSH
55942: CALL 35425 0 3
55946: NOT
55947: PUSH
55948: LD_VAR 0 1
55952: PPUSH
55953: CALL_OW 314
55957: AND
55958: IFFALSE 55962
// exit ;
55960: GO 56101
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
55962: LD_VAR 0 2
55966: PPUSH
55967: LD_VAR 0 3
55971: PPUSH
55972: CALL_OW 428
55976: PUSH
55977: LD_VAR 0 1
55981: EQUAL
55982: PUSH
55983: LD_VAR 0 1
55987: PPUSH
55988: CALL_OW 314
55992: NOT
55993: AND
55994: IFFALSE 55920
// PlaySoundXY ( x , y , PlantMine ) ;
55996: LD_VAR 0 2
56000: PPUSH
56001: LD_VAR 0 3
56005: PPUSH
56006: LD_STRING PlantMine
56008: PPUSH
56009: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
56013: LD_VAR 0 2
56017: PPUSH
56018: LD_VAR 0 3
56022: PPUSH
56023: LD_VAR 0 1
56027: PPUSH
56028: CALL_OW 255
56032: PPUSH
56033: LD_INT 0
56035: PPUSH
56036: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
56040: LD_ADDR_EXP 98
56044: PUSH
56045: LD_EXP 98
56049: PPUSH
56050: LD_VAR 0 5
56054: PUSH
56055: LD_EXP 98
56059: PUSH
56060: LD_VAR 0 5
56064: ARRAY
56065: PUSH
56066: LD_INT 1
56068: PLUS
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PPUSH
56074: LD_VAR 0 2
56078: PUSH
56079: LD_VAR 0 3
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PPUSH
56088: CALL 5273 0 3
56092: ST_TO_ADDR
// result := true ;
56093: LD_ADDR_VAR 0 4
56097: PUSH
56098: LD_INT 1
56100: ST_TO_ADDR
// end ;
56101: LD_VAR 0 4
56105: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
56106: LD_INT 0
56108: PPUSH
56109: PPUSH
56110: PPUSH
// if not unit in minersList then
56111: LD_VAR 0 1
56115: PUSH
56116: LD_EXP 97
56120: IN
56121: NOT
56122: IFFALSE 56126
// exit ;
56124: GO 56518
// index := GetElementIndex ( minersList , unit ) ;
56126: LD_ADDR_VAR 0 6
56130: PUSH
56131: LD_EXP 97
56135: PPUSH
56136: LD_VAR 0 1
56140: PPUSH
56141: CALL 5058 0 2
56145: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
56146: LD_ADDR_VAR 0 5
56150: PUSH
56151: DOUBLE
56152: LD_EXP 98
56156: PUSH
56157: LD_VAR 0 6
56161: ARRAY
56162: INC
56163: ST_TO_ADDR
56164: LD_INT 1
56166: PUSH
56167: FOR_DOWNTO
56168: IFFALSE 56329
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
56170: LD_EXP 98
56174: PUSH
56175: LD_VAR 0 6
56179: ARRAY
56180: PUSH
56181: LD_VAR 0 5
56185: ARRAY
56186: PUSH
56187: LD_INT 1
56189: ARRAY
56190: PUSH
56191: LD_VAR 0 2
56195: EQUAL
56196: PUSH
56197: LD_EXP 98
56201: PUSH
56202: LD_VAR 0 6
56206: ARRAY
56207: PUSH
56208: LD_VAR 0 5
56212: ARRAY
56213: PUSH
56214: LD_INT 2
56216: ARRAY
56217: PUSH
56218: LD_VAR 0 3
56222: EQUAL
56223: AND
56224: IFFALSE 56327
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56226: LD_EXP 98
56230: PUSH
56231: LD_VAR 0 6
56235: ARRAY
56236: PUSH
56237: LD_VAR 0 5
56241: ARRAY
56242: PUSH
56243: LD_INT 1
56245: ARRAY
56246: PPUSH
56247: LD_EXP 98
56251: PUSH
56252: LD_VAR 0 6
56256: ARRAY
56257: PUSH
56258: LD_VAR 0 5
56262: ARRAY
56263: PUSH
56264: LD_INT 2
56266: ARRAY
56267: PPUSH
56268: LD_VAR 0 1
56272: PPUSH
56273: CALL_OW 255
56277: PPUSH
56278: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56282: LD_ADDR_EXP 98
56286: PUSH
56287: LD_EXP 98
56291: PPUSH
56292: LD_VAR 0 6
56296: PPUSH
56297: LD_EXP 98
56301: PUSH
56302: LD_VAR 0 6
56306: ARRAY
56307: PPUSH
56308: LD_VAR 0 5
56312: PPUSH
56313: CALL_OW 3
56317: PPUSH
56318: CALL_OW 1
56322: ST_TO_ADDR
// exit ;
56323: POP
56324: POP
56325: GO 56518
// end ; end ;
56327: GO 56167
56329: POP
56330: POP
// for i := minerMinesList [ index ] downto 1 do
56331: LD_ADDR_VAR 0 5
56335: PUSH
56336: DOUBLE
56337: LD_EXP 98
56341: PUSH
56342: LD_VAR 0 6
56346: ARRAY
56347: INC
56348: ST_TO_ADDR
56349: LD_INT 1
56351: PUSH
56352: FOR_DOWNTO
56353: IFFALSE 56516
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
56355: LD_EXP 98
56359: PUSH
56360: LD_VAR 0 6
56364: ARRAY
56365: PUSH
56366: LD_VAR 0 5
56370: ARRAY
56371: PUSH
56372: LD_INT 1
56374: ARRAY
56375: PPUSH
56376: LD_EXP 98
56380: PUSH
56381: LD_VAR 0 6
56385: ARRAY
56386: PUSH
56387: LD_VAR 0 5
56391: ARRAY
56392: PUSH
56393: LD_INT 2
56395: ARRAY
56396: PPUSH
56397: LD_VAR 0 2
56401: PPUSH
56402: LD_VAR 0 3
56406: PPUSH
56407: CALL_OW 298
56411: PUSH
56412: LD_INT 6
56414: LESS
56415: IFFALSE 56514
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56417: LD_EXP 98
56421: PUSH
56422: LD_VAR 0 6
56426: ARRAY
56427: PUSH
56428: LD_VAR 0 5
56432: ARRAY
56433: PUSH
56434: LD_INT 1
56436: ARRAY
56437: PPUSH
56438: LD_EXP 98
56442: PUSH
56443: LD_VAR 0 6
56447: ARRAY
56448: PUSH
56449: LD_VAR 0 5
56453: ARRAY
56454: PUSH
56455: LD_INT 2
56457: ARRAY
56458: PPUSH
56459: LD_VAR 0 1
56463: PPUSH
56464: CALL_OW 255
56468: PPUSH
56469: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56473: LD_ADDR_EXP 98
56477: PUSH
56478: LD_EXP 98
56482: PPUSH
56483: LD_VAR 0 6
56487: PPUSH
56488: LD_EXP 98
56492: PUSH
56493: LD_VAR 0 6
56497: ARRAY
56498: PPUSH
56499: LD_VAR 0 5
56503: PPUSH
56504: CALL_OW 3
56508: PPUSH
56509: CALL_OW 1
56513: ST_TO_ADDR
// end ; end ;
56514: GO 56352
56516: POP
56517: POP
// end ;
56518: LD_VAR 0 4
56522: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
56523: LD_INT 0
56525: PPUSH
56526: PPUSH
56527: PPUSH
56528: PPUSH
56529: PPUSH
56530: PPUSH
56531: PPUSH
56532: PPUSH
56533: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
56534: LD_VAR 0 1
56538: PPUSH
56539: CALL_OW 264
56543: PUSH
56544: LD_EXP 10
56548: EQUAL
56549: NOT
56550: PUSH
56551: LD_VAR 0 1
56555: PUSH
56556: LD_EXP 97
56560: IN
56561: NOT
56562: OR
56563: IFFALSE 56567
// exit ;
56565: GO 56889
// index := GetElementIndex ( minersList , unit ) ;
56567: LD_ADDR_VAR 0 6
56571: PUSH
56572: LD_EXP 97
56576: PPUSH
56577: LD_VAR 0 1
56581: PPUSH
56582: CALL 5058 0 2
56586: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
56587: LD_ADDR_VAR 0 8
56591: PUSH
56592: LD_EXP 99
56596: PUSH
56597: LD_EXP 98
56601: PUSH
56602: LD_VAR 0 6
56606: ARRAY
56607: MINUS
56608: ST_TO_ADDR
// if not minesFreeAmount then
56609: LD_VAR 0 8
56613: NOT
56614: IFFALSE 56618
// exit ;
56616: GO 56889
// tmp := [ ] ;
56618: LD_ADDR_VAR 0 7
56622: PUSH
56623: EMPTY
56624: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
56625: LD_ADDR_VAR 0 5
56629: PUSH
56630: DOUBLE
56631: LD_INT 1
56633: DEC
56634: ST_TO_ADDR
56635: LD_VAR 0 8
56639: PUSH
56640: FOR_TO
56641: IFFALSE 56836
// begin _d := rand ( 0 , 5 ) ;
56643: LD_ADDR_VAR 0 11
56647: PUSH
56648: LD_INT 0
56650: PPUSH
56651: LD_INT 5
56653: PPUSH
56654: CALL_OW 12
56658: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
56659: LD_ADDR_VAR 0 12
56663: PUSH
56664: LD_INT 2
56666: PPUSH
56667: LD_INT 6
56669: PPUSH
56670: CALL_OW 12
56674: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
56675: LD_ADDR_VAR 0 9
56679: PUSH
56680: LD_VAR 0 2
56684: PPUSH
56685: LD_VAR 0 11
56689: PPUSH
56690: LD_VAR 0 12
56694: PPUSH
56695: CALL_OW 272
56699: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
56700: LD_ADDR_VAR 0 10
56704: PUSH
56705: LD_VAR 0 3
56709: PPUSH
56710: LD_VAR 0 11
56714: PPUSH
56715: LD_VAR 0 12
56719: PPUSH
56720: CALL_OW 273
56724: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
56725: LD_VAR 0 9
56729: PPUSH
56730: LD_VAR 0 10
56734: PPUSH
56735: CALL_OW 488
56739: PUSH
56740: LD_VAR 0 9
56744: PUSH
56745: LD_VAR 0 10
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_VAR 0 7
56758: IN
56759: NOT
56760: AND
56761: PUSH
56762: LD_VAR 0 9
56766: PPUSH
56767: LD_VAR 0 10
56771: PPUSH
56772: CALL_OW 458
56776: NOT
56777: AND
56778: IFFALSE 56820
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
56780: LD_ADDR_VAR 0 7
56784: PUSH
56785: LD_VAR 0 7
56789: PPUSH
56790: LD_VAR 0 7
56794: PUSH
56795: LD_INT 1
56797: PLUS
56798: PPUSH
56799: LD_VAR 0 9
56803: PUSH
56804: LD_VAR 0 10
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PPUSH
56813: CALL_OW 1
56817: ST_TO_ADDR
56818: GO 56834
// i := i - 1 ;
56820: LD_ADDR_VAR 0 5
56824: PUSH
56825: LD_VAR 0 5
56829: PUSH
56830: LD_INT 1
56832: MINUS
56833: ST_TO_ADDR
// end ;
56834: GO 56640
56836: POP
56837: POP
// for i in tmp do
56838: LD_ADDR_VAR 0 5
56842: PUSH
56843: LD_VAR 0 7
56847: PUSH
56848: FOR_IN
56849: IFFALSE 56887
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
56851: LD_VAR 0 1
56855: PPUSH
56856: LD_VAR 0 5
56860: PUSH
56861: LD_INT 1
56863: ARRAY
56864: PPUSH
56865: LD_VAR 0 5
56869: PUSH
56870: LD_INT 2
56872: ARRAY
56873: PPUSH
56874: CALL 55829 0 3
56878: NOT
56879: IFFALSE 56885
// exit ;
56881: POP
56882: POP
56883: GO 56889
56885: GO 56848
56887: POP
56888: POP
// end ;
56889: LD_VAR 0 4
56893: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
56894: LD_INT 0
56896: PPUSH
56897: PPUSH
56898: PPUSH
56899: PPUSH
56900: PPUSH
56901: PPUSH
56902: PPUSH
// if not GetClass ( unit ) = class_sniper then
56903: LD_VAR 0 1
56907: PPUSH
56908: CALL_OW 257
56912: PUSH
56913: LD_INT 5
56915: EQUAL
56916: NOT
56917: IFFALSE 56921
// exit ;
56919: GO 57309
// dist := 8 ;
56921: LD_ADDR_VAR 0 5
56925: PUSH
56926: LD_INT 8
56928: ST_TO_ADDR
// viewRange := 12 ;
56929: LD_ADDR_VAR 0 7
56933: PUSH
56934: LD_INT 12
56936: ST_TO_ADDR
// side := GetSide ( unit ) ;
56937: LD_ADDR_VAR 0 6
56941: PUSH
56942: LD_VAR 0 1
56946: PPUSH
56947: CALL_OW 255
56951: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
56952: LD_INT 61
56954: PPUSH
56955: LD_VAR 0 6
56959: PPUSH
56960: CALL_OW 321
56964: PUSH
56965: LD_INT 2
56967: EQUAL
56968: IFFALSE 56978
// viewRange := 16 ;
56970: LD_ADDR_VAR 0 7
56974: PUSH
56975: LD_INT 16
56977: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
56978: LD_VAR 0 1
56982: PPUSH
56983: LD_VAR 0 2
56987: PPUSH
56988: LD_VAR 0 3
56992: PPUSH
56993: CALL_OW 297
56997: PUSH
56998: LD_VAR 0 5
57002: GREATER
57003: IFFALSE 57082
// begin ComMoveXY ( unit , x , y ) ;
57005: LD_VAR 0 1
57009: PPUSH
57010: LD_VAR 0 2
57014: PPUSH
57015: LD_VAR 0 3
57019: PPUSH
57020: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57024: LD_INT 35
57026: PPUSH
57027: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
57031: LD_VAR 0 1
57035: PPUSH
57036: LD_VAR 0 2
57040: PPUSH
57041: LD_VAR 0 3
57045: PPUSH
57046: CALL 35425 0 3
57050: NOT
57051: IFFALSE 57055
// exit ;
57053: GO 57309
// until GetDistUnitXY ( unit , x , y ) < dist ;
57055: LD_VAR 0 1
57059: PPUSH
57060: LD_VAR 0 2
57064: PPUSH
57065: LD_VAR 0 3
57069: PPUSH
57070: CALL_OW 297
57074: PUSH
57075: LD_VAR 0 5
57079: LESS
57080: IFFALSE 57024
// end ; ComTurnXY ( unit , x , y ) ;
57082: LD_VAR 0 1
57086: PPUSH
57087: LD_VAR 0 2
57091: PPUSH
57092: LD_VAR 0 3
57096: PPUSH
57097: CALL_OW 118
// wait ( 5 ) ;
57101: LD_INT 5
57103: PPUSH
57104: CALL_OW 67
// _d := GetDir ( unit ) ;
57108: LD_ADDR_VAR 0 10
57112: PUSH
57113: LD_VAR 0 1
57117: PPUSH
57118: CALL_OW 254
57122: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
57123: LD_ADDR_VAR 0 8
57127: PUSH
57128: LD_VAR 0 1
57132: PPUSH
57133: CALL_OW 250
57137: PPUSH
57138: LD_VAR 0 10
57142: PPUSH
57143: LD_VAR 0 5
57147: PPUSH
57148: CALL_OW 272
57152: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
57153: LD_ADDR_VAR 0 9
57157: PUSH
57158: LD_VAR 0 1
57162: PPUSH
57163: CALL_OW 251
57167: PPUSH
57168: LD_VAR 0 10
57172: PPUSH
57173: LD_VAR 0 5
57177: PPUSH
57178: CALL_OW 273
57182: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57183: LD_VAR 0 8
57187: PPUSH
57188: LD_VAR 0 9
57192: PPUSH
57193: CALL_OW 488
57197: NOT
57198: IFFALSE 57202
// exit ;
57200: GO 57309
// ComAnimCustom ( unit , 1 ) ;
57202: LD_VAR 0 1
57206: PPUSH
57207: LD_INT 1
57209: PPUSH
57210: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
57214: LD_VAR 0 8
57218: PPUSH
57219: LD_VAR 0 9
57223: PPUSH
57224: LD_VAR 0 6
57228: PPUSH
57229: LD_VAR 0 7
57233: PPUSH
57234: CALL_OW 330
// repeat wait ( 1 ) ;
57238: LD_INT 1
57240: PPUSH
57241: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
57245: LD_VAR 0 1
57249: PPUSH
57250: CALL_OW 316
57254: PUSH
57255: LD_VAR 0 1
57259: PPUSH
57260: CALL_OW 314
57264: OR
57265: PUSH
57266: LD_VAR 0 1
57270: PPUSH
57271: CALL_OW 302
57275: NOT
57276: OR
57277: PUSH
57278: LD_VAR 0 1
57282: PPUSH
57283: CALL_OW 301
57287: OR
57288: IFFALSE 57238
// RemoveSeeing ( _x , _y , side ) ;
57290: LD_VAR 0 8
57294: PPUSH
57295: LD_VAR 0 9
57299: PPUSH
57300: LD_VAR 0 6
57304: PPUSH
57305: CALL_OW 331
// end ; end_of_file
57309: LD_VAR 0 4
57313: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
57314: LD_VAR 0 1
57318: PUSH
57319: LD_INT 200
57321: DOUBLE
57322: GREATEREQUAL
57323: IFFALSE 57331
57325: LD_INT 299
57327: DOUBLE
57328: LESSEQUAL
57329: IFTRUE 57333
57331: GO 57365
57333: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
57334: LD_VAR 0 1
57338: PPUSH
57339: LD_VAR 0 2
57343: PPUSH
57344: LD_VAR 0 3
57348: PPUSH
57349: LD_VAR 0 4
57353: PPUSH
57354: LD_VAR 0 5
57358: PPUSH
57359: CALL 53431 0 5
57363: GO 57442
57365: LD_INT 300
57367: DOUBLE
57368: GREATEREQUAL
57369: IFFALSE 57377
57371: LD_INT 399
57373: DOUBLE
57374: LESSEQUAL
57375: IFTRUE 57379
57377: GO 57441
57379: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
57380: LD_VAR 0 1
57384: PPUSH
57385: LD_VAR 0 2
57389: PPUSH
57390: LD_VAR 0 3
57394: PPUSH
57395: LD_VAR 0 4
57399: PPUSH
57400: LD_VAR 0 5
57404: PPUSH
57405: LD_VAR 0 6
57409: PPUSH
57410: LD_VAR 0 7
57414: PPUSH
57415: LD_VAR 0 8
57419: PPUSH
57420: LD_VAR 0 9
57424: PPUSH
57425: LD_VAR 0 10
57429: PPUSH
57430: LD_VAR 0 11
57434: PPUSH
57435: CALL 51319 0 11
57439: GO 57442
57441: POP
// end ;
57442: PPOPN 11
57444: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
57445: LD_VAR 0 1
57449: PPUSH
57450: LD_VAR 0 2
57454: PPUSH
57455: LD_VAR 0 3
57459: PPUSH
57460: LD_VAR 0 4
57464: PPUSH
57465: LD_VAR 0 5
57469: PPUSH
57470: CALL 53413 0 5
// end ;
57474: PPOPN 5
57476: END
