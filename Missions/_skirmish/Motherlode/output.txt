// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 116 0 0
// PrepareNature ( 4 , 4 , 12 , 4 , 4 , 1 , 4 , natArea , watArea ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 12
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 4
  22: PPUSH
  23: LD_INT 1
  25: PPUSH
  26: LD_INT 4
  28: PPUSH
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: CALL 35383 0 9
// if gameType = 1 then
  39: LD_EXP 2
  43: PUSH
  44: LD_INT 1
  46: EQUAL
  47: IFFALSE 111
// InitEcoMode ( [ 189 , 97 ] , [ [ 215 , 93 ] , [ 204 , 126 ] ] , [ attacksArea1 , attacksArea2 , attacksArea3 , attacksArea4 , attacksArea5 ] ) else
  49: LD_INT 189
  51: PUSH
  52: LD_INT 97
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: PPUSH
  59: LD_INT 215
  61: PUSH
  62: LD_INT 93
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: PUSH
  69: LD_INT 204
  71: PUSH
  72: LD_INT 126
  74: PUSH
  75: EMPTY
  76: LIST
  77: LIST
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PPUSH
  83: LD_INT 2
  85: PUSH
  86: LD_INT 3
  88: PUSH
  89: LD_INT 4
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 6
  97: PUSH
  98: EMPTY
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: PPUSH
 105: CALL 42516 0 3
 109: GO 115
// InitDefendMode ( ) ;
 111: CALL 165 0 0
// end ;
 115: END
// export debug , gameType ; function Init ; begin
 116: LD_INT 0
 118: PPUSH
// debug := 0 ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// if debug then
 127: LD_EXP 1
 131: IFFALSE 143
// gameType := 1 else
 133: LD_ADDR_EXP 2
 137: PUSH
 138: LD_INT 1
 140: ST_TO_ADDR
 141: GO 160
// gameType := GetMultiplayerSetting ( 50 ) + 1 ;
 143: LD_ADDR_EXP 2
 147: PUSH
 148: LD_INT 50
 150: PPUSH
 151: CALL_OW 426
 155: PUSH
 156: LD_INT 1
 158: PLUS
 159: ST_TO_ADDR
// end ; end_of_file
 160: LD_VAR 0 1
 164: RET
// export function InitDefendMode ( ) ; var buildingsList ; begin
 165: LD_INT 0
 167: PPUSH
 168: PPUSH
// buildingsList := [ [ 91 , 182 , 59 , 3 , 0 , 0 , 45 ] , [ 90 , 185 , 60 , 3 , 0 , 0 , 46 ] , [ 90 , 188 , 62 , 3 , 0 , 0 , 43 ] , [ 73 , 178 , 64 , 2 , 0 , 0 , 0 ] , [ 75 , 182 , 65 , 3 , 0 , 0 , 0 ] , [ 76 , 179 , 68 , 1 , 0 , 0 , 0 ] , [ 69 , 182 , 68 , 2 , 0 , 0 , 0 ] , [ 71 , 186 , 68 , 4 , 0 , 0 , 0 ] , [ 72 , 182 , 72 , 0 , 0 , 0 , 0 ] , [ 91 , 169 , 73 , 1 , 0 , 0 , 46 ] , [ 67 , 209 , 79 , 4 , 0 , 0 , 0 ] , [ 88 , 204 , 87 , 3 , 0 , 0 , 0 ] , [ 91 , 169 , 88 , 1 , 0 , 0 , 43 ] , [ 91 , 169 , 91 , 1 , 0 , 0 , 45 ] , [ 86 , 192 , 92 , 4 , 0 , 0 , 0 ] , [ 88 , 207 , 93 , 2 , 0 , 0 , 0 ] , [ 65 , 194 , 96 , 4 , 0 , 0 , 0 ] , [ 90 , 224 , 96 , 4 , 0 , 0 , 45 ] , [ 86 , 196 , 100 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 100 , 4 , 0 , 0 , 46 ] , [ 88 , 211 , 101 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 103 , 4 , 0 , 0 , 45 ] , [ 67 , 172 , 105 , 1 , 0 , 0 , 0 ] , [ 86 , 185 , 105 , 0 , 0 , 0 , 0 ] , [ 86 , 188 , 107 , 5 , 0 , 0 , 0 ] , [ 86 , 186 , 108 , 3 , 0 , 0 , 0 ] , [ 91 , 172 , 109 , 1 , 0 , 0 , 45 ] , [ 90 , 227 , 119 , 5 , 0 , 0 , 46 ] , [ 91 , 225 , 120 , 5 , 0 , 0 , 45 ] , [ 67 , 226 , 135 , 5 , 0 , 0 , 0 ] ] ;
 169: LD_ADDR_VAR 0 2
 173: PUSH
 174: LD_INT 91
 176: PUSH
 177: LD_INT 182
 179: PUSH
 180: LD_INT 59
 182: PUSH
 183: LD_INT 3
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 45
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 90
 206: PUSH
 207: LD_INT 185
 209: PUSH
 210: LD_INT 60
 212: PUSH
 213: LD_INT 3
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 46
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: PUSH
 234: LD_INT 90
 236: PUSH
 237: LD_INT 188
 239: PUSH
 240: LD_INT 62
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 0
 251: PUSH
 252: LD_INT 43
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 73
 266: PUSH
 267: LD_INT 178
 269: PUSH
 270: LD_INT 64
 272: PUSH
 273: LD_INT 2
 275: PUSH
 276: LD_INT 0
 278: PUSH
 279: LD_INT 0
 281: PUSH
 282: LD_INT 0
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 75
 296: PUSH
 297: LD_INT 182
 299: PUSH
 300: LD_INT 65
 302: PUSH
 303: LD_INT 3
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: LD_INT 0
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: PUSH
 324: LD_INT 76
 326: PUSH
 327: LD_INT 179
 329: PUSH
 330: LD_INT 68
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 0
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 69
 356: PUSH
 357: LD_INT 182
 359: PUSH
 360: LD_INT 68
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 71
 386: PUSH
 387: LD_INT 186
 389: PUSH
 390: LD_INT 68
 392: PUSH
 393: LD_INT 4
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: LD_INT 72
 416: PUSH
 417: LD_INT 182
 419: PUSH
 420: LD_INT 72
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: LD_INT 0
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: PUSH
 444: LD_INT 91
 446: PUSH
 447: LD_INT 169
 449: PUSH
 450: LD_INT 73
 452: PUSH
 453: LD_INT 1
 455: PUSH
 456: LD_INT 0
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 46
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 67
 476: PUSH
 477: LD_INT 209
 479: PUSH
 480: LD_INT 79
 482: PUSH
 483: LD_INT 4
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 88
 506: PUSH
 507: LD_INT 204
 509: PUSH
 510: LD_INT 87
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: LD_INT 0
 518: PUSH
 519: LD_INT 0
 521: PUSH
 522: LD_INT 0
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 91
 536: PUSH
 537: LD_INT 169
 539: PUSH
 540: LD_INT 88
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 0
 551: PUSH
 552: LD_INT 43
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 91
 566: PUSH
 567: LD_INT 169
 569: PUSH
 570: LD_INT 91
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 0
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: LD_INT 45
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 86
 596: PUSH
 597: LD_INT 192
 599: PUSH
 600: LD_INT 92
 602: PUSH
 603: LD_INT 4
 605: PUSH
 606: LD_INT 0
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: LD_INT 0
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_INT 88
 626: PUSH
 627: LD_INT 207
 629: PUSH
 630: LD_INT 93
 632: PUSH
 633: LD_INT 2
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 65
 656: PUSH
 657: LD_INT 194
 659: PUSH
 660: LD_INT 96
 662: PUSH
 663: LD_INT 4
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 90
 686: PUSH
 687: LD_INT 224
 689: PUSH
 690: LD_INT 96
 692: PUSH
 693: LD_INT 4
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 45
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: PUSH
 714: LD_INT 86
 716: PUSH
 717: LD_INT 196
 719: PUSH
 720: LD_INT 100
 722: PUSH
 723: LD_INT 4
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 91
 746: PUSH
 747: LD_INT 228
 749: PUSH
 750: LD_INT 100
 752: PUSH
 753: LD_INT 4
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: LD_INT 0
 761: PUSH
 762: LD_INT 46
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 88
 776: PUSH
 777: LD_INT 211
 779: PUSH
 780: LD_INT 101
 782: PUSH
 783: LD_INT 4
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 0
 791: PUSH
 792: LD_INT 0
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 91
 806: PUSH
 807: LD_INT 228
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 4
 815: PUSH
 816: LD_INT 0
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 45
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 67
 836: PUSH
 837: LD_INT 172
 839: PUSH
 840: LD_INT 105
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 0
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 86
 866: PUSH
 867: LD_INT 185
 869: PUSH
 870: LD_INT 105
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: LD_INT 0
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 86
 896: PUSH
 897: LD_INT 188
 899: PUSH
 900: LD_INT 107
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: LD_INT 0
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 86
 926: PUSH
 927: LD_INT 186
 929: PUSH
 930: LD_INT 108
 932: PUSH
 933: LD_INT 3
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 91
 956: PUSH
 957: LD_INT 172
 959: PUSH
 960: LD_INT 109
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 0
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 45
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 227
 989: PUSH
 990: LD_INT 119
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 0
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 46
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 91
1016: PUSH
1017: LD_INT 225
1019: PUSH
1020: LD_INT 120
1022: PUSH
1023: LD_INT 5
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: LD_INT 45
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_INT 67
1046: PUSH
1047: LD_INT 226
1049: PUSH
1050: LD_INT 135
1052: PUSH
1053: LD_INT 5
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: ST_TO_ADDR
// end ; end_of_file
1106: LD_VAR 0 1
1110: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
1111: LD_VAR 0 1
1115: PPUSH
1116: LD_VAR 0 2
1120: PPUSH
1121: CALL 61032 0 2
// end ;
1125: PPOPN 2
1127: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
1128: LD_VAR 0 1
1132: PPUSH
1133: CALL 60910 0 1
// end ; end_of_file
1137: PPOPN 1
1139: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
1140: LD_INT 0
1142: PPUSH
// ar_miner := 81 ;
1143: LD_ADDR_EXP 10
1147: PUSH
1148: LD_INT 81
1150: ST_TO_ADDR
// ar_crane := 88 ;
1151: LD_ADDR_EXP 9
1155: PUSH
1156: LD_INT 88
1158: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
1159: LD_ADDR_EXP 4
1163: PUSH
1164: LD_INT 89
1166: ST_TO_ADDR
// us_hack := 99 ;
1167: LD_ADDR_EXP 5
1171: PUSH
1172: LD_INT 99
1174: ST_TO_ADDR
// us_artillery := 97 ;
1175: LD_ADDR_EXP 6
1179: PUSH
1180: LD_INT 97
1182: ST_TO_ADDR
// ar_bio_bomb := 91 ;
1183: LD_ADDR_EXP 7
1187: PUSH
1188: LD_INT 91
1190: ST_TO_ADDR
// ar_mortar := 92 ;
1191: LD_ADDR_EXP 8
1195: PUSH
1196: LD_INT 92
1198: ST_TO_ADDR
// ru_flamethrower := 93 ;
1199: LD_ADDR_EXP 11
1203: PUSH
1204: LD_INT 93
1206: ST_TO_ADDR
// ru_radar := 98 ;
1207: LD_ADDR_EXP 3
1211: PUSH
1212: LD_INT 98
1214: ST_TO_ADDR
// tech_Artillery := 80 ;
1215: LD_ADDR_EXP 12
1219: PUSH
1220: LD_INT 80
1222: ST_TO_ADDR
// tech_RadMat := 81 ;
1223: LD_ADDR_EXP 13
1227: PUSH
1228: LD_INT 81
1230: ST_TO_ADDR
// tech_BasicTools := 82 ;
1231: LD_ADDR_EXP 14
1235: PUSH
1236: LD_INT 82
1238: ST_TO_ADDR
// tech_Cargo := 83 ;
1239: LD_ADDR_EXP 15
1243: PUSH
1244: LD_INT 83
1246: ST_TO_ADDR
// tech_Track := 84 ;
1247: LD_ADDR_EXP 16
1251: PUSH
1252: LD_INT 84
1254: ST_TO_ADDR
// tech_Crane := 85 ;
1255: LD_ADDR_EXP 17
1259: PUSH
1260: LD_INT 85
1262: ST_TO_ADDR
// tech_Bulldozer := 86 ;
1263: LD_ADDR_EXP 18
1267: PUSH
1268: LD_INT 86
1270: ST_TO_ADDR
// tech_Hovercraft := 87 ;
1271: LD_ADDR_EXP 19
1275: PUSH
1276: LD_INT 87
1278: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
1279: LD_ADDR_EXP 20
1283: PUSH
1284: LD_INT 88
1286: ST_TO_ADDR
// end ;
1287: LD_VAR 0 1
1291: RET
// every 1 do
1292: GO 1294
1294: DISABLE
// InitGlobalVariables ; end_of_file
1295: CALL 1140 0 0
1299: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1300: LD_INT 0
1302: PPUSH
1303: PPUSH
// if exist_mode then
1304: LD_VAR 0 2
1308: IFFALSE 1333
// unit := CreateCharacter ( prefix & ident ) else
1310: LD_ADDR_VAR 0 5
1314: PUSH
1315: LD_VAR 0 3
1319: PUSH
1320: LD_VAR 0 1
1324: STR
1325: PPUSH
1326: CALL_OW 34
1330: ST_TO_ADDR
1331: GO 1348
// unit := NewCharacter ( ident ) ;
1333: LD_ADDR_VAR 0 5
1337: PUSH
1338: LD_VAR 0 1
1342: PPUSH
1343: CALL_OW 25
1347: ST_TO_ADDR
// result := unit ;
1348: LD_ADDR_VAR 0 4
1352: PUSH
1353: LD_VAR 0 5
1357: ST_TO_ADDR
// end ;
1358: LD_VAR 0 4
1362: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1363: LD_INT 0
1365: PPUSH
1366: PPUSH
// if not side or not nation then
1367: LD_VAR 0 1
1371: NOT
1372: PUSH
1373: LD_VAR 0 2
1377: NOT
1378: OR
1379: IFFALSE 1383
// exit ;
1381: GO 2151
// case nation of nation_american :
1383: LD_VAR 0 2
1387: PUSH
1388: LD_INT 1
1390: DOUBLE
1391: EQUAL
1392: IFTRUE 1396
1394: GO 1610
1396: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1397: LD_ADDR_VAR 0 4
1401: PUSH
1402: LD_INT 35
1404: PUSH
1405: LD_INT 45
1407: PUSH
1408: LD_INT 46
1410: PUSH
1411: LD_INT 47
1413: PUSH
1414: LD_INT 82
1416: PUSH
1417: LD_INT 83
1419: PUSH
1420: LD_INT 84
1422: PUSH
1423: LD_INT 85
1425: PUSH
1426: LD_INT 86
1428: PUSH
1429: LD_INT 1
1431: PUSH
1432: LD_INT 2
1434: PUSH
1435: LD_INT 6
1437: PUSH
1438: LD_INT 15
1440: PUSH
1441: LD_INT 16
1443: PUSH
1444: LD_INT 7
1446: PUSH
1447: LD_INT 12
1449: PUSH
1450: LD_INT 13
1452: PUSH
1453: LD_INT 10
1455: PUSH
1456: LD_INT 14
1458: PUSH
1459: LD_INT 20
1461: PUSH
1462: LD_INT 21
1464: PUSH
1465: LD_INT 22
1467: PUSH
1468: LD_INT 25
1470: PUSH
1471: LD_INT 32
1473: PUSH
1474: LD_INT 27
1476: PUSH
1477: LD_INT 36
1479: PUSH
1480: LD_INT 69
1482: PUSH
1483: LD_INT 39
1485: PUSH
1486: LD_INT 34
1488: PUSH
1489: LD_INT 40
1491: PUSH
1492: LD_INT 48
1494: PUSH
1495: LD_INT 49
1497: PUSH
1498: LD_INT 50
1500: PUSH
1501: LD_INT 51
1503: PUSH
1504: LD_INT 52
1506: PUSH
1507: LD_INT 53
1509: PUSH
1510: LD_INT 54
1512: PUSH
1513: LD_INT 55
1515: PUSH
1516: LD_INT 56
1518: PUSH
1519: LD_INT 57
1521: PUSH
1522: LD_INT 58
1524: PUSH
1525: LD_INT 59
1527: PUSH
1528: LD_INT 60
1530: PUSH
1531: LD_INT 61
1533: PUSH
1534: LD_INT 62
1536: PUSH
1537: LD_INT 80
1539: PUSH
1540: LD_INT 82
1542: PUSH
1543: LD_INT 83
1545: PUSH
1546: LD_INT 84
1548: PUSH
1549: LD_INT 85
1551: PUSH
1552: LD_INT 86
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: ST_TO_ADDR
1608: GO 2075
1610: LD_INT 2
1612: DOUBLE
1613: EQUAL
1614: IFTRUE 1618
1616: GO 1844
1618: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1619: LD_ADDR_VAR 0 4
1623: PUSH
1624: LD_INT 35
1626: PUSH
1627: LD_INT 45
1629: PUSH
1630: LD_INT 46
1632: PUSH
1633: LD_INT 47
1635: PUSH
1636: LD_INT 82
1638: PUSH
1639: LD_INT 83
1641: PUSH
1642: LD_INT 84
1644: PUSH
1645: LD_INT 85
1647: PUSH
1648: LD_INT 87
1650: PUSH
1651: LD_INT 70
1653: PUSH
1654: LD_INT 1
1656: PUSH
1657: LD_INT 11
1659: PUSH
1660: LD_INT 3
1662: PUSH
1663: LD_INT 4
1665: PUSH
1666: LD_INT 5
1668: PUSH
1669: LD_INT 6
1671: PUSH
1672: LD_INT 15
1674: PUSH
1675: LD_INT 18
1677: PUSH
1678: LD_INT 7
1680: PUSH
1681: LD_INT 17
1683: PUSH
1684: LD_INT 8
1686: PUSH
1687: LD_INT 20
1689: PUSH
1690: LD_INT 21
1692: PUSH
1693: LD_INT 22
1695: PUSH
1696: LD_INT 72
1698: PUSH
1699: LD_INT 26
1701: PUSH
1702: LD_INT 69
1704: PUSH
1705: LD_INT 39
1707: PUSH
1708: LD_INT 40
1710: PUSH
1711: LD_INT 41
1713: PUSH
1714: LD_INT 42
1716: PUSH
1717: LD_INT 43
1719: PUSH
1720: LD_INT 48
1722: PUSH
1723: LD_INT 49
1725: PUSH
1726: LD_INT 50
1728: PUSH
1729: LD_INT 51
1731: PUSH
1732: LD_INT 52
1734: PUSH
1735: LD_INT 53
1737: PUSH
1738: LD_INT 54
1740: PUSH
1741: LD_INT 55
1743: PUSH
1744: LD_INT 56
1746: PUSH
1747: LD_INT 60
1749: PUSH
1750: LD_INT 61
1752: PUSH
1753: LD_INT 62
1755: PUSH
1756: LD_INT 66
1758: PUSH
1759: LD_INT 67
1761: PUSH
1762: LD_INT 68
1764: PUSH
1765: LD_INT 81
1767: PUSH
1768: LD_INT 82
1770: PUSH
1771: LD_INT 83
1773: PUSH
1774: LD_INT 84
1776: PUSH
1777: LD_INT 85
1779: PUSH
1780: LD_INT 87
1782: PUSH
1783: LD_INT 88
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: ST_TO_ADDR
1842: GO 2075
1844: LD_INT 3
1846: DOUBLE
1847: EQUAL
1848: IFTRUE 1852
1850: GO 2074
1852: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1853: LD_ADDR_VAR 0 4
1857: PUSH
1858: LD_INT 46
1860: PUSH
1861: LD_INT 47
1863: PUSH
1864: LD_INT 1
1866: PUSH
1867: LD_INT 2
1869: PUSH
1870: LD_INT 82
1872: PUSH
1873: LD_INT 83
1875: PUSH
1876: LD_INT 84
1878: PUSH
1879: LD_INT 85
1881: PUSH
1882: LD_INT 86
1884: PUSH
1885: LD_INT 11
1887: PUSH
1888: LD_INT 9
1890: PUSH
1891: LD_INT 20
1893: PUSH
1894: LD_INT 19
1896: PUSH
1897: LD_INT 21
1899: PUSH
1900: LD_INT 24
1902: PUSH
1903: LD_INT 22
1905: PUSH
1906: LD_INT 25
1908: PUSH
1909: LD_INT 28
1911: PUSH
1912: LD_INT 29
1914: PUSH
1915: LD_INT 30
1917: PUSH
1918: LD_INT 31
1920: PUSH
1921: LD_INT 37
1923: PUSH
1924: LD_INT 38
1926: PUSH
1927: LD_INT 32
1929: PUSH
1930: LD_INT 27
1932: PUSH
1933: LD_INT 33
1935: PUSH
1936: LD_INT 69
1938: PUSH
1939: LD_INT 39
1941: PUSH
1942: LD_INT 34
1944: PUSH
1945: LD_INT 40
1947: PUSH
1948: LD_INT 71
1950: PUSH
1951: LD_INT 23
1953: PUSH
1954: LD_INT 44
1956: PUSH
1957: LD_INT 48
1959: PUSH
1960: LD_INT 49
1962: PUSH
1963: LD_INT 50
1965: PUSH
1966: LD_INT 51
1968: PUSH
1969: LD_INT 52
1971: PUSH
1972: LD_INT 53
1974: PUSH
1975: LD_INT 54
1977: PUSH
1978: LD_INT 55
1980: PUSH
1981: LD_INT 56
1983: PUSH
1984: LD_INT 57
1986: PUSH
1987: LD_INT 58
1989: PUSH
1990: LD_INT 59
1992: PUSH
1993: LD_INT 63
1995: PUSH
1996: LD_INT 64
1998: PUSH
1999: LD_INT 65
2001: PUSH
2002: LD_INT 82
2004: PUSH
2005: LD_INT 83
2007: PUSH
2008: LD_INT 84
2010: PUSH
2011: LD_INT 85
2013: PUSH
2014: LD_INT 86
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: ST_TO_ADDR
2072: GO 2075
2074: POP
// if state > - 1 and state < 3 then
2075: LD_VAR 0 3
2079: PUSH
2080: LD_INT 1
2082: NEG
2083: GREATER
2084: PUSH
2085: LD_VAR 0 3
2089: PUSH
2090: LD_INT 3
2092: LESS
2093: AND
2094: IFFALSE 2151
// for i in result do
2096: LD_ADDR_VAR 0 5
2100: PUSH
2101: LD_VAR 0 4
2105: PUSH
2106: FOR_IN
2107: IFFALSE 2149
// if GetTech ( i , side ) <> state then
2109: LD_VAR 0 5
2113: PPUSH
2114: LD_VAR 0 1
2118: PPUSH
2119: CALL_OW 321
2123: PUSH
2124: LD_VAR 0 3
2128: NONEQUAL
2129: IFFALSE 2147
// result := result diff i ;
2131: LD_ADDR_VAR 0 4
2135: PUSH
2136: LD_VAR 0 4
2140: PUSH
2141: LD_VAR 0 5
2145: DIFF
2146: ST_TO_ADDR
2147: GO 2106
2149: POP
2150: POP
// end ;
2151: LD_VAR 0 4
2155: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2156: LD_INT 0
2158: PPUSH
2159: PPUSH
2160: PPUSH
// result := true ;
2161: LD_ADDR_VAR 0 3
2165: PUSH
2166: LD_INT 1
2168: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2169: LD_ADDR_VAR 0 5
2173: PUSH
2174: LD_VAR 0 2
2178: PPUSH
2179: CALL_OW 480
2183: ST_TO_ADDR
// if not tmp then
2184: LD_VAR 0 5
2188: NOT
2189: IFFALSE 2193
// exit ;
2191: GO 2242
// for i in tmp do
2193: LD_ADDR_VAR 0 4
2197: PUSH
2198: LD_VAR 0 5
2202: PUSH
2203: FOR_IN
2204: IFFALSE 2240
// if GetTech ( i , side ) <> state_researched then
2206: LD_VAR 0 4
2210: PPUSH
2211: LD_VAR 0 1
2215: PPUSH
2216: CALL_OW 321
2220: PUSH
2221: LD_INT 2
2223: NONEQUAL
2224: IFFALSE 2238
// begin result := false ;
2226: LD_ADDR_VAR 0 3
2230: PUSH
2231: LD_INT 0
2233: ST_TO_ADDR
// exit ;
2234: POP
2235: POP
2236: GO 2242
// end ;
2238: GO 2203
2240: POP
2241: POP
// end ;
2242: LD_VAR 0 3
2246: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2247: LD_INT 0
2249: PPUSH
2250: PPUSH
2251: PPUSH
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
2256: PPUSH
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
2261: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2262: LD_VAR 0 1
2266: NOT
2267: PUSH
2268: LD_VAR 0 1
2272: PPUSH
2273: CALL_OW 257
2277: PUSH
2278: LD_INT 9
2280: NONEQUAL
2281: OR
2282: IFFALSE 2286
// exit ;
2284: GO 2859
// side := GetSide ( unit ) ;
2286: LD_ADDR_VAR 0 9
2290: PUSH
2291: LD_VAR 0 1
2295: PPUSH
2296: CALL_OW 255
2300: ST_TO_ADDR
// tech_space := tech_spacanom ;
2301: LD_ADDR_VAR 0 12
2305: PUSH
2306: LD_INT 29
2308: ST_TO_ADDR
// tech_time := tech_taurad ;
2309: LD_ADDR_VAR 0 13
2313: PUSH
2314: LD_INT 28
2316: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2317: LD_ADDR_VAR 0 11
2321: PUSH
2322: LD_VAR 0 1
2326: PPUSH
2327: CALL_OW 310
2331: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2332: LD_VAR 0 11
2336: PPUSH
2337: CALL_OW 247
2341: PUSH
2342: LD_INT 2
2344: EQUAL
2345: IFFALSE 2349
// exit ;
2347: GO 2859
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2349: LD_ADDR_VAR 0 8
2353: PUSH
2354: LD_INT 81
2356: PUSH
2357: LD_VAR 0 9
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PUSH
2366: LD_INT 3
2368: PUSH
2369: LD_INT 21
2371: PUSH
2372: LD_INT 3
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: PUSH
2383: EMPTY
2384: LIST
2385: LIST
2386: PPUSH
2387: CALL_OW 69
2391: ST_TO_ADDR
// if not tmp then
2392: LD_VAR 0 8
2396: NOT
2397: IFFALSE 2401
// exit ;
2399: GO 2859
// if in_unit then
2401: LD_VAR 0 11
2405: IFFALSE 2429
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2407: LD_ADDR_VAR 0 10
2411: PUSH
2412: LD_VAR 0 8
2416: PPUSH
2417: LD_VAR 0 11
2421: PPUSH
2422: CALL_OW 74
2426: ST_TO_ADDR
2427: GO 2449
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2429: LD_ADDR_VAR 0 10
2433: PUSH
2434: LD_VAR 0 8
2438: PPUSH
2439: LD_VAR 0 1
2443: PPUSH
2444: CALL_OW 74
2448: ST_TO_ADDR
// if not enemy then
2449: LD_VAR 0 10
2453: NOT
2454: IFFALSE 2458
// exit ;
2456: GO 2859
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2458: LD_VAR 0 11
2462: PUSH
2463: LD_VAR 0 11
2467: PPUSH
2468: LD_VAR 0 10
2472: PPUSH
2473: CALL_OW 296
2477: PUSH
2478: LD_INT 13
2480: GREATER
2481: AND
2482: PUSH
2483: LD_VAR 0 1
2487: PPUSH
2488: LD_VAR 0 10
2492: PPUSH
2493: CALL_OW 296
2497: PUSH
2498: LD_INT 12
2500: GREATER
2501: OR
2502: IFFALSE 2506
// exit ;
2504: GO 2859
// missile := [ 1 ] ;
2506: LD_ADDR_VAR 0 14
2510: PUSH
2511: LD_INT 1
2513: PUSH
2514: EMPTY
2515: LIST
2516: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2517: LD_VAR 0 9
2521: PPUSH
2522: LD_VAR 0 12
2526: PPUSH
2527: CALL_OW 325
2531: IFFALSE 2560
// missile := Replace ( missile , missile + 1 , 2 ) ;
2533: LD_ADDR_VAR 0 14
2537: PUSH
2538: LD_VAR 0 14
2542: PPUSH
2543: LD_VAR 0 14
2547: PUSH
2548: LD_INT 1
2550: PLUS
2551: PPUSH
2552: LD_INT 2
2554: PPUSH
2555: CALL_OW 1
2559: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2560: LD_VAR 0 9
2564: PPUSH
2565: LD_VAR 0 13
2569: PPUSH
2570: CALL_OW 325
2574: PUSH
2575: LD_VAR 0 10
2579: PPUSH
2580: CALL_OW 255
2584: PPUSH
2585: LD_VAR 0 13
2589: PPUSH
2590: CALL_OW 325
2594: NOT
2595: AND
2596: IFFALSE 2625
// missile := Replace ( missile , missile + 1 , 3 ) ;
2598: LD_ADDR_VAR 0 14
2602: PUSH
2603: LD_VAR 0 14
2607: PPUSH
2608: LD_VAR 0 14
2612: PUSH
2613: LD_INT 1
2615: PLUS
2616: PPUSH
2617: LD_INT 3
2619: PPUSH
2620: CALL_OW 1
2624: ST_TO_ADDR
// if missile < 2 then
2625: LD_VAR 0 14
2629: PUSH
2630: LD_INT 2
2632: LESS
2633: IFFALSE 2637
// exit ;
2635: GO 2859
// x := GetX ( enemy ) ;
2637: LD_ADDR_VAR 0 4
2641: PUSH
2642: LD_VAR 0 10
2646: PPUSH
2647: CALL_OW 250
2651: ST_TO_ADDR
// y := GetY ( enemy ) ;
2652: LD_ADDR_VAR 0 5
2656: PUSH
2657: LD_VAR 0 10
2661: PPUSH
2662: CALL_OW 251
2666: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2667: LD_ADDR_VAR 0 6
2671: PUSH
2672: LD_VAR 0 4
2676: PUSH
2677: LD_INT 1
2679: NEG
2680: PPUSH
2681: LD_INT 1
2683: PPUSH
2684: CALL_OW 12
2688: PLUS
2689: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2690: LD_ADDR_VAR 0 7
2694: PUSH
2695: LD_VAR 0 5
2699: PUSH
2700: LD_INT 1
2702: NEG
2703: PPUSH
2704: LD_INT 1
2706: PPUSH
2707: CALL_OW 12
2711: PLUS
2712: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2713: LD_VAR 0 6
2717: PPUSH
2718: LD_VAR 0 7
2722: PPUSH
2723: CALL_OW 488
2727: NOT
2728: IFFALSE 2750
// begin _x := x ;
2730: LD_ADDR_VAR 0 6
2734: PUSH
2735: LD_VAR 0 4
2739: ST_TO_ADDR
// _y := y ;
2740: LD_ADDR_VAR 0 7
2744: PUSH
2745: LD_VAR 0 5
2749: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2750: LD_ADDR_VAR 0 3
2754: PUSH
2755: LD_INT 1
2757: PPUSH
2758: LD_VAR 0 14
2762: PPUSH
2763: CALL_OW 12
2767: ST_TO_ADDR
// case i of 1 :
2768: LD_VAR 0 3
2772: PUSH
2773: LD_INT 1
2775: DOUBLE
2776: EQUAL
2777: IFTRUE 2781
2779: GO 2798
2781: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2782: LD_VAR 0 1
2786: PPUSH
2787: LD_VAR 0 10
2791: PPUSH
2792: CALL_OW 115
2796: GO 2859
2798: LD_INT 2
2800: DOUBLE
2801: EQUAL
2802: IFTRUE 2806
2804: GO 2828
2806: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2807: LD_VAR 0 1
2811: PPUSH
2812: LD_VAR 0 6
2816: PPUSH
2817: LD_VAR 0 7
2821: PPUSH
2822: CALL_OW 153
2826: GO 2859
2828: LD_INT 3
2830: DOUBLE
2831: EQUAL
2832: IFTRUE 2836
2834: GO 2858
2836: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2837: LD_VAR 0 1
2841: PPUSH
2842: LD_VAR 0 6
2846: PPUSH
2847: LD_VAR 0 7
2851: PPUSH
2852: CALL_OW 154
2856: GO 2859
2858: POP
// end ;
2859: LD_VAR 0 2
2863: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2864: LD_INT 0
2866: PPUSH
2867: PPUSH
2868: PPUSH
2869: PPUSH
2870: PPUSH
2871: PPUSH
// if not unit or not building then
2872: LD_VAR 0 1
2876: NOT
2877: PUSH
2878: LD_VAR 0 2
2882: NOT
2883: OR
2884: IFFALSE 2888
// exit ;
2886: GO 3046
// x := GetX ( building ) ;
2888: LD_ADDR_VAR 0 5
2892: PUSH
2893: LD_VAR 0 2
2897: PPUSH
2898: CALL_OW 250
2902: ST_TO_ADDR
// y := GetY ( building ) ;
2903: LD_ADDR_VAR 0 6
2907: PUSH
2908: LD_VAR 0 2
2912: PPUSH
2913: CALL_OW 251
2917: ST_TO_ADDR
// for i = 0 to 5 do
2918: LD_ADDR_VAR 0 4
2922: PUSH
2923: DOUBLE
2924: LD_INT 0
2926: DEC
2927: ST_TO_ADDR
2928: LD_INT 5
2930: PUSH
2931: FOR_TO
2932: IFFALSE 3044
// begin _x := ShiftX ( x , i , 3 ) ;
2934: LD_ADDR_VAR 0 7
2938: PUSH
2939: LD_VAR 0 5
2943: PPUSH
2944: LD_VAR 0 4
2948: PPUSH
2949: LD_INT 3
2951: PPUSH
2952: CALL_OW 272
2956: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2957: LD_ADDR_VAR 0 8
2961: PUSH
2962: LD_VAR 0 6
2966: PPUSH
2967: LD_VAR 0 4
2971: PPUSH
2972: LD_INT 3
2974: PPUSH
2975: CALL_OW 273
2979: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2980: LD_VAR 0 7
2984: PPUSH
2985: LD_VAR 0 8
2989: PPUSH
2990: CALL_OW 488
2994: NOT
2995: IFFALSE 2999
// continue ;
2997: GO 2931
// if HexInfo ( _x , _y ) = 0 then
2999: LD_VAR 0 7
3003: PPUSH
3004: LD_VAR 0 8
3008: PPUSH
3009: CALL_OW 428
3013: PUSH
3014: LD_INT 0
3016: EQUAL
3017: IFFALSE 3042
// begin ComMoveXY ( unit , _x , _y ) ;
3019: LD_VAR 0 1
3023: PPUSH
3024: LD_VAR 0 7
3028: PPUSH
3029: LD_VAR 0 8
3033: PPUSH
3034: CALL_OW 111
// exit ;
3038: POP
3039: POP
3040: GO 3046
// end ; end ;
3042: GO 2931
3044: POP
3045: POP
// end ;
3046: LD_VAR 0 3
3050: RET
// export function ScanBase ( side , base_area ) ; begin
3051: LD_INT 0
3053: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3054: LD_ADDR_VAR 0 3
3058: PUSH
3059: LD_VAR 0 2
3063: PPUSH
3064: LD_INT 81
3066: PUSH
3067: LD_VAR 0 1
3071: PUSH
3072: EMPTY
3073: LIST
3074: LIST
3075: PPUSH
3076: CALL_OW 70
3080: ST_TO_ADDR
// end ;
3081: LD_VAR 0 3
3085: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3086: LD_INT 0
3088: PPUSH
3089: PPUSH
3090: PPUSH
3091: PPUSH
// result := false ;
3092: LD_ADDR_VAR 0 2
3096: PUSH
3097: LD_INT 0
3099: ST_TO_ADDR
// side := GetSide ( unit ) ;
3100: LD_ADDR_VAR 0 3
3104: PUSH
3105: LD_VAR 0 1
3109: PPUSH
3110: CALL_OW 255
3114: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3115: LD_ADDR_VAR 0 4
3119: PUSH
3120: LD_VAR 0 1
3124: PPUSH
3125: CALL_OW 248
3129: ST_TO_ADDR
// case nat of 1 :
3130: LD_VAR 0 4
3134: PUSH
3135: LD_INT 1
3137: DOUBLE
3138: EQUAL
3139: IFTRUE 3143
3141: GO 3154
3143: POP
// tech := tech_lassight ; 2 :
3144: LD_ADDR_VAR 0 5
3148: PUSH
3149: LD_INT 12
3151: ST_TO_ADDR
3152: GO 3193
3154: LD_INT 2
3156: DOUBLE
3157: EQUAL
3158: IFTRUE 3162
3160: GO 3173
3162: POP
// tech := tech_mortar ; 3 :
3163: LD_ADDR_VAR 0 5
3167: PUSH
3168: LD_INT 41
3170: ST_TO_ADDR
3171: GO 3193
3173: LD_INT 3
3175: DOUBLE
3176: EQUAL
3177: IFTRUE 3181
3179: GO 3192
3181: POP
// tech := tech_bazooka ; end ;
3182: LD_ADDR_VAR 0 5
3186: PUSH
3187: LD_INT 44
3189: ST_TO_ADDR
3190: GO 3193
3192: POP
// if Researched ( side , tech ) then
3193: LD_VAR 0 3
3197: PPUSH
3198: LD_VAR 0 5
3202: PPUSH
3203: CALL_OW 325
3207: IFFALSE 3234
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3209: LD_ADDR_VAR 0 2
3213: PUSH
3214: LD_INT 5
3216: PUSH
3217: LD_INT 8
3219: PUSH
3220: LD_INT 9
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: LIST
3227: PUSH
3228: LD_VAR 0 4
3232: ARRAY
3233: ST_TO_ADDR
// end ;
3234: LD_VAR 0 2
3238: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3239: LD_INT 0
3241: PPUSH
3242: PPUSH
3243: PPUSH
// if not mines then
3244: LD_VAR 0 2
3248: NOT
3249: IFFALSE 3253
// exit ;
3251: GO 3397
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3253: LD_ADDR_VAR 0 5
3257: PUSH
3258: LD_INT 81
3260: PUSH
3261: LD_VAR 0 1
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: LD_INT 3
3272: PUSH
3273: LD_INT 21
3275: PUSH
3276: LD_INT 3
3278: PUSH
3279: EMPTY
3280: LIST
3281: LIST
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: CALL_OW 69
3295: ST_TO_ADDR
// for i in mines do
3296: LD_ADDR_VAR 0 4
3300: PUSH
3301: LD_VAR 0 2
3305: PUSH
3306: FOR_IN
3307: IFFALSE 3395
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3309: LD_VAR 0 4
3313: PUSH
3314: LD_INT 1
3316: ARRAY
3317: PPUSH
3318: LD_VAR 0 4
3322: PUSH
3323: LD_INT 2
3325: ARRAY
3326: PPUSH
3327: CALL_OW 458
3331: NOT
3332: IFFALSE 3336
// continue ;
3334: GO 3306
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3336: LD_VAR 0 4
3340: PUSH
3341: LD_INT 1
3343: ARRAY
3344: PPUSH
3345: LD_VAR 0 4
3349: PUSH
3350: LD_INT 2
3352: ARRAY
3353: PPUSH
3354: CALL_OW 428
3358: PUSH
3359: LD_VAR 0 5
3363: IN
3364: IFFALSE 3393
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3366: LD_VAR 0 4
3370: PUSH
3371: LD_INT 1
3373: ARRAY
3374: PPUSH
3375: LD_VAR 0 4
3379: PUSH
3380: LD_INT 2
3382: ARRAY
3383: PPUSH
3384: LD_VAR 0 1
3388: PPUSH
3389: CALL_OW 456
// end ;
3393: GO 3306
3395: POP
3396: POP
// end ;
3397: LD_VAR 0 3
3401: RET
// export function Count ( array ) ; var i ; begin
3402: LD_INT 0
3404: PPUSH
3405: PPUSH
// result := 0 ;
3406: LD_ADDR_VAR 0 2
3410: PUSH
3411: LD_INT 0
3413: ST_TO_ADDR
// for i in array do
3414: LD_ADDR_VAR 0 3
3418: PUSH
3419: LD_VAR 0 1
3423: PUSH
3424: FOR_IN
3425: IFFALSE 3449
// if i then
3427: LD_VAR 0 3
3431: IFFALSE 3447
// result := result + 1 ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 2
3442: PUSH
3443: LD_INT 1
3445: PLUS
3446: ST_TO_ADDR
3447: GO 3424
3449: POP
3450: POP
// end ;
3451: LD_VAR 0 2
3455: RET
// export function IsEmpty ( building ) ; begin
3456: LD_INT 0
3458: PPUSH
// if not building then
3459: LD_VAR 0 1
3463: NOT
3464: IFFALSE 3468
// exit ;
3466: GO 3511
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3468: LD_ADDR_VAR 0 2
3472: PUSH
3473: LD_VAR 0 1
3477: PUSH
3478: LD_INT 22
3480: PUSH
3481: LD_VAR 0 1
3485: PPUSH
3486: CALL_OW 255
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: PUSH
3495: LD_INT 58
3497: PUSH
3498: EMPTY
3499: LIST
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: IN
3510: ST_TO_ADDR
// end ;
3511: LD_VAR 0 2
3515: RET
// export function IsNotFull ( building ) ; var places ; begin
3516: LD_INT 0
3518: PPUSH
3519: PPUSH
// if not building then
3520: LD_VAR 0 1
3524: NOT
3525: IFFALSE 3529
// exit ;
3527: GO 3700
// result := false ;
3529: LD_ADDR_VAR 0 2
3533: PUSH
3534: LD_INT 0
3536: ST_TO_ADDR
// places := 0 ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: LD_INT 0
3544: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
3545: LD_VAR 0 1
3549: PPUSH
3550: CALL_OW 266
3554: PUSH
3555: LD_INT 0
3557: DOUBLE
3558: EQUAL
3559: IFTRUE 3617
3561: LD_INT 1
3563: DOUBLE
3564: EQUAL
3565: IFTRUE 3617
3567: LD_INT 6
3569: DOUBLE
3570: EQUAL
3571: IFTRUE 3617
3573: LD_INT 7
3575: DOUBLE
3576: EQUAL
3577: IFTRUE 3617
3579: LD_INT 8
3581: DOUBLE
3582: EQUAL
3583: IFTRUE 3617
3585: LD_INT 4
3587: DOUBLE
3588: EQUAL
3589: IFTRUE 3617
3591: LD_INT 5
3593: DOUBLE
3594: EQUAL
3595: IFTRUE 3617
3597: LD_INT 2
3599: DOUBLE
3600: EQUAL
3601: IFTRUE 3617
3603: LD_INT 3
3605: DOUBLE
3606: EQUAL
3607: IFTRUE 3617
3609: LD_INT 35
3611: DOUBLE
3612: EQUAL
3613: IFTRUE 3617
3615: GO 3628
3617: POP
// places := 6 ; b_bunker , b_breastwork :
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: LD_INT 6
3625: ST_TO_ADDR
3626: GO 3673
3628: LD_INT 32
3630: DOUBLE
3631: EQUAL
3632: IFTRUE 3642
3634: LD_INT 31
3636: DOUBLE
3637: EQUAL
3638: IFTRUE 3642
3640: GO 3653
3642: POP
// places := 1 ; b_control_tower :
3643: LD_ADDR_VAR 0 3
3647: PUSH
3648: LD_INT 1
3650: ST_TO_ADDR
3651: GO 3673
3653: LD_INT 36
3655: DOUBLE
3656: EQUAL
3657: IFTRUE 3661
3659: GO 3672
3661: POP
// places := 3 ; end ;
3662: LD_ADDR_VAR 0 3
3666: PUSH
3667: LD_INT 3
3669: ST_TO_ADDR
3670: GO 3673
3672: POP
// if places then
3673: LD_VAR 0 3
3677: IFFALSE 3700
// result := UnitsInside ( building ) < places ;
3679: LD_ADDR_VAR 0 2
3683: PUSH
3684: LD_VAR 0 1
3688: PPUSH
3689: CALL_OW 313
3693: PUSH
3694: LD_VAR 0 3
3698: LESS
3699: ST_TO_ADDR
// end ;
3700: LD_VAR 0 2
3704: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3705: LD_INT 0
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
// tmp := [ ] ;
3711: LD_ADDR_VAR 0 3
3715: PUSH
3716: EMPTY
3717: ST_TO_ADDR
// list := [ ] ;
3718: LD_ADDR_VAR 0 5
3722: PUSH
3723: EMPTY
3724: ST_TO_ADDR
// for i = 16 to 25 do
3725: LD_ADDR_VAR 0 4
3729: PUSH
3730: DOUBLE
3731: LD_INT 16
3733: DEC
3734: ST_TO_ADDR
3735: LD_INT 25
3737: PUSH
3738: FOR_TO
3739: IFFALSE 3812
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: LD_VAR 0 3
3750: PUSH
3751: LD_INT 22
3753: PUSH
3754: LD_VAR 0 1
3758: PPUSH
3759: CALL_OW 255
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PUSH
3768: LD_INT 91
3770: PUSH
3771: LD_VAR 0 1
3775: PUSH
3776: LD_INT 6
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 30
3786: PUSH
3787: LD_VAR 0 4
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: EMPTY
3802: LIST
3803: PPUSH
3804: CALL_OW 69
3808: ADD
3809: ST_TO_ADDR
3810: GO 3738
3812: POP
3813: POP
// for i = 1 to tmp do
3814: LD_ADDR_VAR 0 4
3818: PUSH
3819: DOUBLE
3820: LD_INT 1
3822: DEC
3823: ST_TO_ADDR
3824: LD_VAR 0 3
3828: PUSH
3829: FOR_TO
3830: IFFALSE 3918
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3832: LD_ADDR_VAR 0 5
3836: PUSH
3837: LD_VAR 0 5
3841: PUSH
3842: LD_VAR 0 3
3846: PUSH
3847: LD_VAR 0 4
3851: ARRAY
3852: PPUSH
3853: CALL_OW 266
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_VAR 0 4
3867: ARRAY
3868: PPUSH
3869: CALL_OW 250
3873: PUSH
3874: LD_VAR 0 3
3878: PUSH
3879: LD_VAR 0 4
3883: ARRAY
3884: PPUSH
3885: CALL_OW 251
3889: PUSH
3890: LD_VAR 0 3
3894: PUSH
3895: LD_VAR 0 4
3899: ARRAY
3900: PPUSH
3901: CALL_OW 254
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: PUSH
3912: EMPTY
3913: LIST
3914: ADD
3915: ST_TO_ADDR
3916: GO 3829
3918: POP
3919: POP
// result := list ;
3920: LD_ADDR_VAR 0 2
3924: PUSH
3925: LD_VAR 0 5
3929: ST_TO_ADDR
// end ;
3930: LD_VAR 0 2
3934: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3935: LD_INT 0
3937: PPUSH
3938: PPUSH
3939: PPUSH
3940: PPUSH
3941: PPUSH
3942: PPUSH
3943: PPUSH
// if not factory then
3944: LD_VAR 0 1
3948: NOT
3949: IFFALSE 3953
// exit ;
3951: GO 4546
// if control = control_apeman then
3953: LD_VAR 0 4
3957: PUSH
3958: LD_INT 5
3960: EQUAL
3961: IFFALSE 4070
// begin tmp := UnitsInside ( factory ) ;
3963: LD_ADDR_VAR 0 8
3967: PUSH
3968: LD_VAR 0 1
3972: PPUSH
3973: CALL_OW 313
3977: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3978: LD_VAR 0 8
3982: PPUSH
3983: LD_INT 25
3985: PUSH
3986: LD_INT 12
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PPUSH
3993: CALL_OW 72
3997: NOT
3998: IFFALSE 4008
// control := control_manual ;
4000: LD_ADDR_VAR 0 4
4004: PUSH
4005: LD_INT 1
4007: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4008: LD_ADDR_VAR 0 8
4012: PUSH
4013: LD_VAR 0 1
4017: PPUSH
4018: CALL 3705 0 1
4022: ST_TO_ADDR
// if tmp then
4023: LD_VAR 0 8
4027: IFFALSE 4070
// begin for i in tmp do
4029: LD_ADDR_VAR 0 7
4033: PUSH
4034: LD_VAR 0 8
4038: PUSH
4039: FOR_IN
4040: IFFALSE 4068
// if i [ 1 ] = b_ext_radio then
4042: LD_VAR 0 7
4046: PUSH
4047: LD_INT 1
4049: ARRAY
4050: PUSH
4051: LD_INT 22
4053: EQUAL
4054: IFFALSE 4066
// begin control := control_remote ;
4056: LD_ADDR_VAR 0 4
4060: PUSH
4061: LD_INT 2
4063: ST_TO_ADDR
// break ;
4064: GO 4068
// end ;
4066: GO 4039
4068: POP
4069: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4070: LD_VAR 0 1
4074: PPUSH
4075: LD_VAR 0 2
4079: PPUSH
4080: LD_VAR 0 3
4084: PPUSH
4085: LD_VAR 0 4
4089: PPUSH
4090: LD_VAR 0 5
4094: PPUSH
4095: CALL_OW 448
4099: IFFALSE 4134
// begin result := [ chassis , engine , control , weapon ] ;
4101: LD_ADDR_VAR 0 6
4105: PUSH
4106: LD_VAR 0 2
4110: PUSH
4111: LD_VAR 0 3
4115: PUSH
4116: LD_VAR 0 4
4120: PUSH
4121: LD_VAR 0 5
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: ST_TO_ADDR
// exit ;
4132: GO 4546
// end ; _chassis := AvailableChassisList ( factory ) ;
4134: LD_ADDR_VAR 0 9
4138: PUSH
4139: LD_VAR 0 1
4143: PPUSH
4144: CALL_OW 475
4148: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4149: LD_ADDR_VAR 0 11
4153: PUSH
4154: LD_VAR 0 1
4158: PPUSH
4159: CALL_OW 476
4163: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4164: LD_ADDR_VAR 0 12
4168: PUSH
4169: LD_VAR 0 1
4173: PPUSH
4174: CALL_OW 477
4178: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4179: LD_ADDR_VAR 0 10
4183: PUSH
4184: LD_VAR 0 1
4188: PPUSH
4189: CALL_OW 478
4193: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4194: LD_VAR 0 9
4198: NOT
4199: PUSH
4200: LD_VAR 0 11
4204: NOT
4205: OR
4206: PUSH
4207: LD_VAR 0 12
4211: NOT
4212: OR
4213: PUSH
4214: LD_VAR 0 10
4218: NOT
4219: OR
4220: IFFALSE 4255
// begin result := [ chassis , engine , control , weapon ] ;
4222: LD_ADDR_VAR 0 6
4226: PUSH
4227: LD_VAR 0 2
4231: PUSH
4232: LD_VAR 0 3
4236: PUSH
4237: LD_VAR 0 4
4241: PUSH
4242: LD_VAR 0 5
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: ST_TO_ADDR
// exit ;
4253: GO 4546
// end ; if not chassis in _chassis then
4255: LD_VAR 0 2
4259: PUSH
4260: LD_VAR 0 9
4264: IN
4265: NOT
4266: IFFALSE 4292
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4268: LD_ADDR_VAR 0 2
4272: PUSH
4273: LD_VAR 0 9
4277: PUSH
4278: LD_INT 1
4280: PPUSH
4281: LD_VAR 0 9
4285: PPUSH
4286: CALL_OW 12
4290: ARRAY
4291: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4292: LD_VAR 0 2
4296: PPUSH
4297: LD_VAR 0 3
4301: PPUSH
4302: CALL 4551 0 2
4306: NOT
4307: IFFALSE 4366
// repeat engine := _engine [ 1 ] ;
4309: LD_ADDR_VAR 0 3
4313: PUSH
4314: LD_VAR 0 11
4318: PUSH
4319: LD_INT 1
4321: ARRAY
4322: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4323: LD_ADDR_VAR 0 11
4327: PUSH
4328: LD_VAR 0 11
4332: PPUSH
4333: LD_INT 1
4335: PPUSH
4336: CALL_OW 3
4340: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4341: LD_VAR 0 2
4345: PPUSH
4346: LD_VAR 0 3
4350: PPUSH
4351: CALL 4551 0 2
4355: PUSH
4356: LD_VAR 0 11
4360: PUSH
4361: EMPTY
4362: EQUAL
4363: OR
4364: IFFALSE 4309
// if not control in _control then
4366: LD_VAR 0 4
4370: PUSH
4371: LD_VAR 0 12
4375: IN
4376: NOT
4377: IFFALSE 4403
// control := _control [ rand ( 1 , _control ) ] ;
4379: LD_ADDR_VAR 0 4
4383: PUSH
4384: LD_VAR 0 12
4388: PUSH
4389: LD_INT 1
4391: PPUSH
4392: LD_VAR 0 12
4396: PPUSH
4397: CALL_OW 12
4401: ARRAY
4402: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4403: LD_VAR 0 2
4407: PPUSH
4408: LD_VAR 0 5
4412: PPUSH
4413: CALL 4771 0 2
4417: NOT
4418: IFFALSE 4477
// repeat weapon := _weapon [ 1 ] ;
4420: LD_ADDR_VAR 0 5
4424: PUSH
4425: LD_VAR 0 10
4429: PUSH
4430: LD_INT 1
4432: ARRAY
4433: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4434: LD_ADDR_VAR 0 10
4438: PUSH
4439: LD_VAR 0 10
4443: PPUSH
4444: LD_INT 1
4446: PPUSH
4447: CALL_OW 3
4451: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4452: LD_VAR 0 2
4456: PPUSH
4457: LD_VAR 0 5
4461: PPUSH
4462: CALL 4771 0 2
4466: PUSH
4467: LD_VAR 0 10
4471: PUSH
4472: EMPTY
4473: EQUAL
4474: OR
4475: IFFALSE 4420
// result := [ ] ;
4477: LD_ADDR_VAR 0 6
4481: PUSH
4482: EMPTY
4483: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_VAR 0 2
4493: PPUSH
4494: LD_VAR 0 3
4498: PPUSH
4499: LD_VAR 0 4
4503: PPUSH
4504: LD_VAR 0 5
4508: PPUSH
4509: CALL_OW 448
4513: IFFALSE 4546
// result := [ chassis , engine , control , weapon ] ;
4515: LD_ADDR_VAR 0 6
4519: PUSH
4520: LD_VAR 0 2
4524: PUSH
4525: LD_VAR 0 3
4529: PUSH
4530: LD_VAR 0 4
4534: PUSH
4535: LD_VAR 0 5
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: ST_TO_ADDR
// end ;
4546: LD_VAR 0 6
4550: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4551: LD_INT 0
4553: PPUSH
// if not chassis or not engine then
4554: LD_VAR 0 1
4558: NOT
4559: PUSH
4560: LD_VAR 0 2
4564: NOT
4565: OR
4566: IFFALSE 4570
// exit ;
4568: GO 4766
// case engine of engine_solar :
4570: LD_VAR 0 2
4574: PUSH
4575: LD_INT 2
4577: DOUBLE
4578: EQUAL
4579: IFTRUE 4583
4581: GO 4621
4583: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4584: LD_ADDR_VAR 0 3
4588: PUSH
4589: LD_INT 11
4591: PUSH
4592: LD_INT 12
4594: PUSH
4595: LD_INT 13
4597: PUSH
4598: LD_INT 14
4600: PUSH
4601: LD_INT 1
4603: PUSH
4604: LD_INT 2
4606: PUSH
4607: LD_INT 3
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: ST_TO_ADDR
4619: GO 4750
4621: LD_INT 1
4623: DOUBLE
4624: EQUAL
4625: IFTRUE 4629
4627: GO 4691
4629: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4630: LD_ADDR_VAR 0 3
4634: PUSH
4635: LD_INT 11
4637: PUSH
4638: LD_INT 12
4640: PUSH
4641: LD_INT 13
4643: PUSH
4644: LD_INT 14
4646: PUSH
4647: LD_INT 1
4649: PUSH
4650: LD_INT 2
4652: PUSH
4653: LD_INT 3
4655: PUSH
4656: LD_INT 4
4658: PUSH
4659: LD_INT 5
4661: PUSH
4662: LD_INT 21
4664: PUSH
4665: LD_INT 23
4667: PUSH
4668: LD_INT 22
4670: PUSH
4671: LD_INT 24
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: ST_TO_ADDR
4689: GO 4750
4691: LD_INT 3
4693: DOUBLE
4694: EQUAL
4695: IFTRUE 4699
4697: GO 4749
4699: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4700: LD_ADDR_VAR 0 3
4704: PUSH
4705: LD_INT 13
4707: PUSH
4708: LD_INT 14
4710: PUSH
4711: LD_INT 2
4713: PUSH
4714: LD_INT 3
4716: PUSH
4717: LD_INT 4
4719: PUSH
4720: LD_INT 5
4722: PUSH
4723: LD_INT 21
4725: PUSH
4726: LD_INT 22
4728: PUSH
4729: LD_INT 23
4731: PUSH
4732: LD_INT 24
4734: PUSH
4735: EMPTY
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: ST_TO_ADDR
4747: GO 4750
4749: POP
// result := ( chassis in result ) ;
4750: LD_ADDR_VAR 0 3
4754: PUSH
4755: LD_VAR 0 1
4759: PUSH
4760: LD_VAR 0 3
4764: IN
4765: ST_TO_ADDR
// end ;
4766: LD_VAR 0 3
4770: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4771: LD_INT 0
4773: PPUSH
// if not chassis or not weapon then
4774: LD_VAR 0 1
4778: NOT
4779: PUSH
4780: LD_VAR 0 2
4784: NOT
4785: OR
4786: IFFALSE 4790
// exit ;
4788: GO 5852
// case weapon of us_machine_gun :
4790: LD_VAR 0 2
4794: PUSH
4795: LD_INT 2
4797: DOUBLE
4798: EQUAL
4799: IFTRUE 4803
4801: GO 4833
4803: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4804: LD_ADDR_VAR 0 3
4808: PUSH
4809: LD_INT 1
4811: PUSH
4812: LD_INT 2
4814: PUSH
4815: LD_INT 3
4817: PUSH
4818: LD_INT 4
4820: PUSH
4821: LD_INT 5
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: ST_TO_ADDR
4831: GO 5836
4833: LD_INT 3
4835: DOUBLE
4836: EQUAL
4837: IFTRUE 4841
4839: GO 4871
4841: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4842: LD_ADDR_VAR 0 3
4846: PUSH
4847: LD_INT 1
4849: PUSH
4850: LD_INT 2
4852: PUSH
4853: LD_INT 3
4855: PUSH
4856: LD_INT 4
4858: PUSH
4859: LD_INT 5
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: ST_TO_ADDR
4869: GO 5836
4871: LD_INT 11
4873: DOUBLE
4874: EQUAL
4875: IFTRUE 4879
4877: GO 4909
4879: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4880: LD_ADDR_VAR 0 3
4884: PUSH
4885: LD_INT 1
4887: PUSH
4888: LD_INT 2
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: LD_INT 4
4896: PUSH
4897: LD_INT 5
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: ST_TO_ADDR
4907: GO 5836
4909: LD_INT 4
4911: DOUBLE
4912: EQUAL
4913: IFTRUE 4917
4915: GO 4943
4917: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4918: LD_ADDR_VAR 0 3
4922: PUSH
4923: LD_INT 2
4925: PUSH
4926: LD_INT 3
4928: PUSH
4929: LD_INT 4
4931: PUSH
4932: LD_INT 5
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: ST_TO_ADDR
4941: GO 5836
4943: LD_INT 5
4945: DOUBLE
4946: EQUAL
4947: IFTRUE 4951
4949: GO 4977
4951: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4952: LD_ADDR_VAR 0 3
4956: PUSH
4957: LD_INT 2
4959: PUSH
4960: LD_INT 3
4962: PUSH
4963: LD_INT 4
4965: PUSH
4966: LD_INT 5
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: ST_TO_ADDR
4975: GO 5836
4977: LD_INT 9
4979: DOUBLE
4980: EQUAL
4981: IFTRUE 4985
4983: GO 5011
4985: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4986: LD_ADDR_VAR 0 3
4990: PUSH
4991: LD_INT 2
4993: PUSH
4994: LD_INT 3
4996: PUSH
4997: LD_INT 4
4999: PUSH
5000: LD_INT 5
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: ST_TO_ADDR
5009: GO 5836
5011: LD_INT 7
5013: DOUBLE
5014: EQUAL
5015: IFTRUE 5019
5017: GO 5045
5019: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5020: LD_ADDR_VAR 0 3
5024: PUSH
5025: LD_INT 2
5027: PUSH
5028: LD_INT 3
5030: PUSH
5031: LD_INT 4
5033: PUSH
5034: LD_INT 5
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: ST_TO_ADDR
5043: GO 5836
5045: LD_INT 12
5047: DOUBLE
5048: EQUAL
5049: IFTRUE 5053
5051: GO 5079
5053: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5054: LD_ADDR_VAR 0 3
5058: PUSH
5059: LD_INT 2
5061: PUSH
5062: LD_INT 3
5064: PUSH
5065: LD_INT 4
5067: PUSH
5068: LD_INT 5
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: ST_TO_ADDR
5077: GO 5836
5079: LD_INT 13
5081: DOUBLE
5082: EQUAL
5083: IFTRUE 5087
5085: GO 5113
5087: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5088: LD_ADDR_VAR 0 3
5092: PUSH
5093: LD_INT 2
5095: PUSH
5096: LD_INT 3
5098: PUSH
5099: LD_INT 4
5101: PUSH
5102: LD_INT 5
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: ST_TO_ADDR
5111: GO 5836
5113: LD_INT 14
5115: DOUBLE
5116: EQUAL
5117: IFTRUE 5121
5119: GO 5139
5121: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5122: LD_ADDR_VAR 0 3
5126: PUSH
5127: LD_INT 4
5129: PUSH
5130: LD_INT 5
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: ST_TO_ADDR
5137: GO 5836
5139: LD_INT 6
5141: DOUBLE
5142: EQUAL
5143: IFTRUE 5147
5145: GO 5165
5147: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5148: LD_ADDR_VAR 0 3
5152: PUSH
5153: LD_INT 4
5155: PUSH
5156: LD_INT 5
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: ST_TO_ADDR
5163: GO 5836
5165: LD_INT 10
5167: DOUBLE
5168: EQUAL
5169: IFTRUE 5173
5171: GO 5191
5173: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5174: LD_ADDR_VAR 0 3
5178: PUSH
5179: LD_INT 4
5181: PUSH
5182: LD_INT 5
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: ST_TO_ADDR
5189: GO 5836
5191: LD_INT 22
5193: DOUBLE
5194: EQUAL
5195: IFTRUE 5199
5197: GO 5225
5199: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5200: LD_ADDR_VAR 0 3
5204: PUSH
5205: LD_INT 11
5207: PUSH
5208: LD_INT 12
5210: PUSH
5211: LD_INT 13
5213: PUSH
5214: LD_INT 14
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: ST_TO_ADDR
5223: GO 5836
5225: LD_INT 23
5227: DOUBLE
5228: EQUAL
5229: IFTRUE 5233
5231: GO 5259
5233: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5234: LD_ADDR_VAR 0 3
5238: PUSH
5239: LD_INT 11
5241: PUSH
5242: LD_INT 12
5244: PUSH
5245: LD_INT 13
5247: PUSH
5248: LD_INT 14
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: ST_TO_ADDR
5257: GO 5836
5259: LD_INT 24
5261: DOUBLE
5262: EQUAL
5263: IFTRUE 5267
5265: GO 5293
5267: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5268: LD_ADDR_VAR 0 3
5272: PUSH
5273: LD_INT 11
5275: PUSH
5276: LD_INT 12
5278: PUSH
5279: LD_INT 13
5281: PUSH
5282: LD_INT 14
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: ST_TO_ADDR
5291: GO 5836
5293: LD_INT 30
5295: DOUBLE
5296: EQUAL
5297: IFTRUE 5301
5299: GO 5327
5301: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5302: LD_ADDR_VAR 0 3
5306: PUSH
5307: LD_INT 11
5309: PUSH
5310: LD_INT 12
5312: PUSH
5313: LD_INT 13
5315: PUSH
5316: LD_INT 14
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: ST_TO_ADDR
5325: GO 5836
5327: LD_INT 25
5329: DOUBLE
5330: EQUAL
5331: IFTRUE 5335
5333: GO 5353
5335: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5336: LD_ADDR_VAR 0 3
5340: PUSH
5341: LD_INT 13
5343: PUSH
5344: LD_INT 14
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: ST_TO_ADDR
5351: GO 5836
5353: LD_INT 27
5355: DOUBLE
5356: EQUAL
5357: IFTRUE 5361
5359: GO 5379
5361: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5362: LD_ADDR_VAR 0 3
5366: PUSH
5367: LD_INT 13
5369: PUSH
5370: LD_INT 14
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: ST_TO_ADDR
5377: GO 5836
5379: LD_EXP 8
5383: DOUBLE
5384: EQUAL
5385: IFTRUE 5389
5387: GO 5415
5389: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5390: LD_ADDR_VAR 0 3
5394: PUSH
5395: LD_INT 11
5397: PUSH
5398: LD_INT 12
5400: PUSH
5401: LD_INT 13
5403: PUSH
5404: LD_INT 14
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: ST_TO_ADDR
5413: GO 5836
5415: LD_INT 28
5417: DOUBLE
5418: EQUAL
5419: IFTRUE 5423
5421: GO 5441
5423: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5424: LD_ADDR_VAR 0 3
5428: PUSH
5429: LD_INT 13
5431: PUSH
5432: LD_INT 14
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: ST_TO_ADDR
5439: GO 5836
5441: LD_INT 29
5443: DOUBLE
5444: EQUAL
5445: IFTRUE 5449
5447: GO 5467
5449: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5450: LD_ADDR_VAR 0 3
5454: PUSH
5455: LD_INT 13
5457: PUSH
5458: LD_INT 14
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: ST_TO_ADDR
5465: GO 5836
5467: LD_INT 31
5469: DOUBLE
5470: EQUAL
5471: IFTRUE 5475
5473: GO 5493
5475: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5476: LD_ADDR_VAR 0 3
5480: PUSH
5481: LD_INT 13
5483: PUSH
5484: LD_INT 14
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: ST_TO_ADDR
5491: GO 5836
5493: LD_INT 26
5495: DOUBLE
5496: EQUAL
5497: IFTRUE 5501
5499: GO 5519
5501: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5502: LD_ADDR_VAR 0 3
5506: PUSH
5507: LD_INT 13
5509: PUSH
5510: LD_INT 14
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: ST_TO_ADDR
5517: GO 5836
5519: LD_INT 42
5521: DOUBLE
5522: EQUAL
5523: IFTRUE 5527
5525: GO 5553
5527: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5528: LD_ADDR_VAR 0 3
5532: PUSH
5533: LD_INT 21
5535: PUSH
5536: LD_INT 22
5538: PUSH
5539: LD_INT 23
5541: PUSH
5542: LD_INT 24
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: ST_TO_ADDR
5551: GO 5836
5553: LD_INT 43
5555: DOUBLE
5556: EQUAL
5557: IFTRUE 5561
5559: GO 5587
5561: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5562: LD_ADDR_VAR 0 3
5566: PUSH
5567: LD_INT 21
5569: PUSH
5570: LD_INT 22
5572: PUSH
5573: LD_INT 23
5575: PUSH
5576: LD_INT 24
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: ST_TO_ADDR
5585: GO 5836
5587: LD_INT 44
5589: DOUBLE
5590: EQUAL
5591: IFTRUE 5595
5593: GO 5621
5595: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5596: LD_ADDR_VAR 0 3
5600: PUSH
5601: LD_INT 21
5603: PUSH
5604: LD_INT 22
5606: PUSH
5607: LD_INT 23
5609: PUSH
5610: LD_INT 24
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: ST_TO_ADDR
5619: GO 5836
5621: LD_INT 45
5623: DOUBLE
5624: EQUAL
5625: IFTRUE 5629
5627: GO 5655
5629: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5630: LD_ADDR_VAR 0 3
5634: PUSH
5635: LD_INT 21
5637: PUSH
5638: LD_INT 22
5640: PUSH
5641: LD_INT 23
5643: PUSH
5644: LD_INT 24
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: ST_TO_ADDR
5653: GO 5836
5655: LD_INT 49
5657: DOUBLE
5658: EQUAL
5659: IFTRUE 5663
5661: GO 5689
5663: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5664: LD_ADDR_VAR 0 3
5668: PUSH
5669: LD_INT 21
5671: PUSH
5672: LD_INT 22
5674: PUSH
5675: LD_INT 23
5677: PUSH
5678: LD_INT 24
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: ST_TO_ADDR
5687: GO 5836
5689: LD_INT 51
5691: DOUBLE
5692: EQUAL
5693: IFTRUE 5697
5695: GO 5723
5697: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5698: LD_ADDR_VAR 0 3
5702: PUSH
5703: LD_INT 21
5705: PUSH
5706: LD_INT 22
5708: PUSH
5709: LD_INT 23
5711: PUSH
5712: LD_INT 24
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: ST_TO_ADDR
5721: GO 5836
5723: LD_INT 52
5725: DOUBLE
5726: EQUAL
5727: IFTRUE 5731
5729: GO 5757
5731: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5732: LD_ADDR_VAR 0 3
5736: PUSH
5737: LD_INT 21
5739: PUSH
5740: LD_INT 22
5742: PUSH
5743: LD_INT 23
5745: PUSH
5746: LD_INT 24
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: ST_TO_ADDR
5755: GO 5836
5757: LD_INT 53
5759: DOUBLE
5760: EQUAL
5761: IFTRUE 5765
5763: GO 5783
5765: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5766: LD_ADDR_VAR 0 3
5770: PUSH
5771: LD_INT 23
5773: PUSH
5774: LD_INT 24
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: ST_TO_ADDR
5781: GO 5836
5783: LD_INT 46
5785: DOUBLE
5786: EQUAL
5787: IFTRUE 5791
5789: GO 5809
5791: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5792: LD_ADDR_VAR 0 3
5796: PUSH
5797: LD_INT 23
5799: PUSH
5800: LD_INT 24
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: ST_TO_ADDR
5807: GO 5836
5809: LD_INT 47
5811: DOUBLE
5812: EQUAL
5813: IFTRUE 5817
5815: GO 5835
5817: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5818: LD_ADDR_VAR 0 3
5822: PUSH
5823: LD_INT 23
5825: PUSH
5826: LD_INT 24
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: ST_TO_ADDR
5833: GO 5836
5835: POP
// result := ( chassis in result ) ;
5836: LD_ADDR_VAR 0 3
5840: PUSH
5841: LD_VAR 0 1
5845: PUSH
5846: LD_VAR 0 3
5850: IN
5851: ST_TO_ADDR
// end ;
5852: LD_VAR 0 3
5856: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5857: LD_INT 0
5859: PPUSH
5860: PPUSH
5861: PPUSH
5862: PPUSH
5863: PPUSH
5864: PPUSH
5865: PPUSH
// result := array ;
5866: LD_ADDR_VAR 0 5
5870: PUSH
5871: LD_VAR 0 1
5875: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5876: LD_VAR 0 1
5880: NOT
5881: PUSH
5882: LD_VAR 0 2
5886: NOT
5887: OR
5888: PUSH
5889: LD_VAR 0 3
5893: NOT
5894: OR
5895: PUSH
5896: LD_VAR 0 2
5900: PUSH
5901: LD_VAR 0 1
5905: GREATER
5906: OR
5907: PUSH
5908: LD_VAR 0 3
5912: PUSH
5913: LD_VAR 0 1
5917: GREATER
5918: OR
5919: IFFALSE 5923
// exit ;
5921: GO 6219
// if direction then
5923: LD_VAR 0 4
5927: IFFALSE 5991
// begin d := 1 ;
5929: LD_ADDR_VAR 0 9
5933: PUSH
5934: LD_INT 1
5936: ST_TO_ADDR
// if i_from > i_to then
5937: LD_VAR 0 2
5941: PUSH
5942: LD_VAR 0 3
5946: GREATER
5947: IFFALSE 5973
// length := ( array - i_from ) + i_to else
5949: LD_ADDR_VAR 0 11
5953: PUSH
5954: LD_VAR 0 1
5958: PUSH
5959: LD_VAR 0 2
5963: MINUS
5964: PUSH
5965: LD_VAR 0 3
5969: PLUS
5970: ST_TO_ADDR
5971: GO 5989
// length := i_to - i_from ;
5973: LD_ADDR_VAR 0 11
5977: PUSH
5978: LD_VAR 0 3
5982: PUSH
5983: LD_VAR 0 2
5987: MINUS
5988: ST_TO_ADDR
// end else
5989: GO 6052
// begin d := - 1 ;
5991: LD_ADDR_VAR 0 9
5995: PUSH
5996: LD_INT 1
5998: NEG
5999: ST_TO_ADDR
// if i_from > i_to then
6000: LD_VAR 0 2
6004: PUSH
6005: LD_VAR 0 3
6009: GREATER
6010: IFFALSE 6030
// length := i_from - i_to else
6012: LD_ADDR_VAR 0 11
6016: PUSH
6017: LD_VAR 0 2
6021: PUSH
6022: LD_VAR 0 3
6026: MINUS
6027: ST_TO_ADDR
6028: GO 6052
// length := ( array - i_to ) + i_from ;
6030: LD_ADDR_VAR 0 11
6034: PUSH
6035: LD_VAR 0 1
6039: PUSH
6040: LD_VAR 0 3
6044: MINUS
6045: PUSH
6046: LD_VAR 0 2
6050: PLUS
6051: ST_TO_ADDR
// end ; if not length then
6052: LD_VAR 0 11
6056: NOT
6057: IFFALSE 6061
// exit ;
6059: GO 6219
// tmp := array ;
6061: LD_ADDR_VAR 0 10
6065: PUSH
6066: LD_VAR 0 1
6070: ST_TO_ADDR
// for i = 1 to length do
6071: LD_ADDR_VAR 0 6
6075: PUSH
6076: DOUBLE
6077: LD_INT 1
6079: DEC
6080: ST_TO_ADDR
6081: LD_VAR 0 11
6085: PUSH
6086: FOR_TO
6087: IFFALSE 6207
// begin for j = 1 to array do
6089: LD_ADDR_VAR 0 7
6093: PUSH
6094: DOUBLE
6095: LD_INT 1
6097: DEC
6098: ST_TO_ADDR
6099: LD_VAR 0 1
6103: PUSH
6104: FOR_TO
6105: IFFALSE 6193
// begin k := j + d ;
6107: LD_ADDR_VAR 0 8
6111: PUSH
6112: LD_VAR 0 7
6116: PUSH
6117: LD_VAR 0 9
6121: PLUS
6122: ST_TO_ADDR
// if k > array then
6123: LD_VAR 0 8
6127: PUSH
6128: LD_VAR 0 1
6132: GREATER
6133: IFFALSE 6143
// k := 1 ;
6135: LD_ADDR_VAR 0 8
6139: PUSH
6140: LD_INT 1
6142: ST_TO_ADDR
// if not k then
6143: LD_VAR 0 8
6147: NOT
6148: IFFALSE 6160
// k := array ;
6150: LD_ADDR_VAR 0 8
6154: PUSH
6155: LD_VAR 0 1
6159: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6160: LD_ADDR_VAR 0 10
6164: PUSH
6165: LD_VAR 0 10
6169: PPUSH
6170: LD_VAR 0 8
6174: PPUSH
6175: LD_VAR 0 1
6179: PUSH
6180: LD_VAR 0 7
6184: ARRAY
6185: PPUSH
6186: CALL_OW 1
6190: ST_TO_ADDR
// end ;
6191: GO 6104
6193: POP
6194: POP
// array := tmp ;
6195: LD_ADDR_VAR 0 1
6199: PUSH
6200: LD_VAR 0 10
6204: ST_TO_ADDR
// end ;
6205: GO 6086
6207: POP
6208: POP
// result := array ;
6209: LD_ADDR_VAR 0 5
6213: PUSH
6214: LD_VAR 0 1
6218: ST_TO_ADDR
// end ;
6219: LD_VAR 0 5
6223: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6224: LD_INT 0
6226: PPUSH
6227: PPUSH
// result := 0 ;
6228: LD_ADDR_VAR 0 3
6232: PUSH
6233: LD_INT 0
6235: ST_TO_ADDR
// if not array or not value in array then
6236: LD_VAR 0 1
6240: NOT
6241: PUSH
6242: LD_VAR 0 2
6246: PUSH
6247: LD_VAR 0 1
6251: IN
6252: NOT
6253: OR
6254: IFFALSE 6258
// exit ;
6256: GO 6312
// for i = 1 to array do
6258: LD_ADDR_VAR 0 4
6262: PUSH
6263: DOUBLE
6264: LD_INT 1
6266: DEC
6267: ST_TO_ADDR
6268: LD_VAR 0 1
6272: PUSH
6273: FOR_TO
6274: IFFALSE 6310
// if value = array [ i ] then
6276: LD_VAR 0 2
6280: PUSH
6281: LD_VAR 0 1
6285: PUSH
6286: LD_VAR 0 4
6290: ARRAY
6291: EQUAL
6292: IFFALSE 6308
// begin result := i ;
6294: LD_ADDR_VAR 0 3
6298: PUSH
6299: LD_VAR 0 4
6303: ST_TO_ADDR
// exit ;
6304: POP
6305: POP
6306: GO 6312
// end ;
6308: GO 6273
6310: POP
6311: POP
// end ;
6312: LD_VAR 0 3
6316: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6317: LD_INT 0
6319: PPUSH
// vc_chassis := chassis ;
6320: LD_ADDR_OWVAR 37
6324: PUSH
6325: LD_VAR 0 1
6329: ST_TO_ADDR
// vc_engine := engine ;
6330: LD_ADDR_OWVAR 39
6334: PUSH
6335: LD_VAR 0 2
6339: ST_TO_ADDR
// vc_control := control ;
6340: LD_ADDR_OWVAR 38
6344: PUSH
6345: LD_VAR 0 3
6349: ST_TO_ADDR
// vc_weapon := weapon ;
6350: LD_ADDR_OWVAR 40
6354: PUSH
6355: LD_VAR 0 4
6359: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6360: LD_ADDR_OWVAR 41
6364: PUSH
6365: LD_VAR 0 5
6369: ST_TO_ADDR
// end ;
6370: LD_VAR 0 6
6374: RET
// export function WantPlant ( unit ) ; var task ; begin
6375: LD_INT 0
6377: PPUSH
6378: PPUSH
// result := false ;
6379: LD_ADDR_VAR 0 2
6383: PUSH
6384: LD_INT 0
6386: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6387: LD_ADDR_VAR 0 3
6391: PUSH
6392: LD_VAR 0 1
6396: PPUSH
6397: CALL_OW 437
6401: ST_TO_ADDR
// if task then
6402: LD_VAR 0 3
6406: IFFALSE 6434
// if task [ 1 ] [ 1 ] = p then
6408: LD_VAR 0 3
6412: PUSH
6413: LD_INT 1
6415: ARRAY
6416: PUSH
6417: LD_INT 1
6419: ARRAY
6420: PUSH
6421: LD_STRING p
6423: EQUAL
6424: IFFALSE 6434
// result := true ;
6426: LD_ADDR_VAR 0 2
6430: PUSH
6431: LD_INT 1
6433: ST_TO_ADDR
// end ;
6434: LD_VAR 0 2
6438: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6439: LD_INT 0
6441: PPUSH
6442: PPUSH
6443: PPUSH
6444: PPUSH
// if pos < 1 then
6445: LD_VAR 0 2
6449: PUSH
6450: LD_INT 1
6452: LESS
6453: IFFALSE 6457
// exit ;
6455: GO 6760
// if pos = 1 then
6457: LD_VAR 0 2
6461: PUSH
6462: LD_INT 1
6464: EQUAL
6465: IFFALSE 6498
// result := Replace ( arr , pos [ 1 ] , value ) else
6467: LD_ADDR_VAR 0 4
6471: PUSH
6472: LD_VAR 0 1
6476: PPUSH
6477: LD_VAR 0 2
6481: PUSH
6482: LD_INT 1
6484: ARRAY
6485: PPUSH
6486: LD_VAR 0 3
6490: PPUSH
6491: CALL_OW 1
6495: ST_TO_ADDR
6496: GO 6760
// begin tmp := arr ;
6498: LD_ADDR_VAR 0 6
6502: PUSH
6503: LD_VAR 0 1
6507: ST_TO_ADDR
// s_arr := [ tmp ] ;
6508: LD_ADDR_VAR 0 7
6512: PUSH
6513: LD_VAR 0 6
6517: PUSH
6518: EMPTY
6519: LIST
6520: ST_TO_ADDR
// for i = 1 to pos - 1 do
6521: LD_ADDR_VAR 0 5
6525: PUSH
6526: DOUBLE
6527: LD_INT 1
6529: DEC
6530: ST_TO_ADDR
6531: LD_VAR 0 2
6535: PUSH
6536: LD_INT 1
6538: MINUS
6539: PUSH
6540: FOR_TO
6541: IFFALSE 6586
// begin tmp := tmp [ pos [ i ] ] ;
6543: LD_ADDR_VAR 0 6
6547: PUSH
6548: LD_VAR 0 6
6552: PUSH
6553: LD_VAR 0 2
6557: PUSH
6558: LD_VAR 0 5
6562: ARRAY
6563: ARRAY
6564: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6565: LD_ADDR_VAR 0 7
6569: PUSH
6570: LD_VAR 0 7
6574: PUSH
6575: LD_VAR 0 6
6579: PUSH
6580: EMPTY
6581: LIST
6582: ADD
6583: ST_TO_ADDR
// end ;
6584: GO 6540
6586: POP
6587: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6588: LD_ADDR_VAR 0 6
6592: PUSH
6593: LD_VAR 0 6
6597: PPUSH
6598: LD_VAR 0 2
6602: PUSH
6603: LD_VAR 0 2
6607: ARRAY
6608: PPUSH
6609: LD_VAR 0 3
6613: PPUSH
6614: CALL_OW 1
6618: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6619: LD_ADDR_VAR 0 7
6623: PUSH
6624: LD_VAR 0 7
6628: PPUSH
6629: LD_VAR 0 7
6633: PPUSH
6634: LD_VAR 0 6
6638: PPUSH
6639: CALL_OW 1
6643: ST_TO_ADDR
// for i = s_arr downto 2 do
6644: LD_ADDR_VAR 0 5
6648: PUSH
6649: DOUBLE
6650: LD_VAR 0 7
6654: INC
6655: ST_TO_ADDR
6656: LD_INT 2
6658: PUSH
6659: FOR_DOWNTO
6660: IFFALSE 6744
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6662: LD_ADDR_VAR 0 6
6666: PUSH
6667: LD_VAR 0 7
6671: PUSH
6672: LD_VAR 0 5
6676: PUSH
6677: LD_INT 1
6679: MINUS
6680: ARRAY
6681: PPUSH
6682: LD_VAR 0 2
6686: PUSH
6687: LD_VAR 0 5
6691: PUSH
6692: LD_INT 1
6694: MINUS
6695: ARRAY
6696: PPUSH
6697: LD_VAR 0 7
6701: PUSH
6702: LD_VAR 0 5
6706: ARRAY
6707: PPUSH
6708: CALL_OW 1
6712: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6713: LD_ADDR_VAR 0 7
6717: PUSH
6718: LD_VAR 0 7
6722: PPUSH
6723: LD_VAR 0 5
6727: PUSH
6728: LD_INT 1
6730: MINUS
6731: PPUSH
6732: LD_VAR 0 6
6736: PPUSH
6737: CALL_OW 1
6741: ST_TO_ADDR
// end ;
6742: GO 6659
6744: POP
6745: POP
// result := s_arr [ 1 ] ;
6746: LD_ADDR_VAR 0 4
6750: PUSH
6751: LD_VAR 0 7
6755: PUSH
6756: LD_INT 1
6758: ARRAY
6759: ST_TO_ADDR
// end ; end ;
6760: LD_VAR 0 4
6764: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6765: LD_INT 0
6767: PPUSH
6768: PPUSH
// if not list then
6769: LD_VAR 0 1
6773: NOT
6774: IFFALSE 6778
// exit ;
6776: GO 6869
// i := list [ pos1 ] ;
6778: LD_ADDR_VAR 0 5
6782: PUSH
6783: LD_VAR 0 1
6787: PUSH
6788: LD_VAR 0 2
6792: ARRAY
6793: ST_TO_ADDR
// if not i then
6794: LD_VAR 0 5
6798: NOT
6799: IFFALSE 6803
// exit ;
6801: GO 6869
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6803: LD_ADDR_VAR 0 1
6807: PUSH
6808: LD_VAR 0 1
6812: PPUSH
6813: LD_VAR 0 2
6817: PPUSH
6818: LD_VAR 0 1
6822: PUSH
6823: LD_VAR 0 3
6827: ARRAY
6828: PPUSH
6829: CALL_OW 1
6833: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6834: LD_ADDR_VAR 0 1
6838: PUSH
6839: LD_VAR 0 1
6843: PPUSH
6844: LD_VAR 0 3
6848: PPUSH
6849: LD_VAR 0 5
6853: PPUSH
6854: CALL_OW 1
6858: ST_TO_ADDR
// result := list ;
6859: LD_ADDR_VAR 0 4
6863: PUSH
6864: LD_VAR 0 1
6868: ST_TO_ADDR
// end ;
6869: LD_VAR 0 4
6873: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6874: LD_INT 0
6876: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6877: LD_ADDR_VAR 0 5
6881: PUSH
6882: LD_VAR 0 1
6886: PPUSH
6887: CALL_OW 250
6891: PPUSH
6892: LD_VAR 0 1
6896: PPUSH
6897: CALL_OW 251
6901: PPUSH
6902: LD_VAR 0 2
6906: PPUSH
6907: LD_VAR 0 3
6911: PPUSH
6912: LD_VAR 0 4
6916: PPUSH
6917: CALL 6927 0 5
6921: ST_TO_ADDR
// end ;
6922: LD_VAR 0 5
6926: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6927: LD_INT 0
6929: PPUSH
6930: PPUSH
6931: PPUSH
6932: PPUSH
// if not list then
6933: LD_VAR 0 3
6937: NOT
6938: IFFALSE 6942
// exit ;
6940: GO 7330
// result := [ ] ;
6942: LD_ADDR_VAR 0 6
6946: PUSH
6947: EMPTY
6948: ST_TO_ADDR
// for i in list do
6949: LD_ADDR_VAR 0 7
6953: PUSH
6954: LD_VAR 0 3
6958: PUSH
6959: FOR_IN
6960: IFFALSE 7162
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6962: LD_ADDR_VAR 0 9
6966: PUSH
6967: LD_VAR 0 7
6971: PPUSH
6972: LD_VAR 0 1
6976: PPUSH
6977: LD_VAR 0 2
6981: PPUSH
6982: CALL_OW 297
6986: ST_TO_ADDR
// if not result then
6987: LD_VAR 0 6
6991: NOT
6992: IFFALSE 7018
// result := [ [ i , tmp ] ] else
6994: LD_ADDR_VAR 0 6
6998: PUSH
6999: LD_VAR 0 7
7003: PUSH
7004: LD_VAR 0 9
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: ST_TO_ADDR
7016: GO 7160
// begin if result [ result ] [ 2 ] < tmp then
7018: LD_VAR 0 6
7022: PUSH
7023: LD_VAR 0 6
7027: ARRAY
7028: PUSH
7029: LD_INT 2
7031: ARRAY
7032: PUSH
7033: LD_VAR 0 9
7037: LESS
7038: IFFALSE 7080
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7040: LD_ADDR_VAR 0 6
7044: PUSH
7045: LD_VAR 0 6
7049: PPUSH
7050: LD_VAR 0 6
7054: PUSH
7055: LD_INT 1
7057: PLUS
7058: PPUSH
7059: LD_VAR 0 7
7063: PUSH
7064: LD_VAR 0 9
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: PPUSH
7073: CALL_OW 2
7077: ST_TO_ADDR
7078: GO 7160
// for j = 1 to result do
7080: LD_ADDR_VAR 0 8
7084: PUSH
7085: DOUBLE
7086: LD_INT 1
7088: DEC
7089: ST_TO_ADDR
7090: LD_VAR 0 6
7094: PUSH
7095: FOR_TO
7096: IFFALSE 7158
// begin if tmp < result [ j ] [ 2 ] then
7098: LD_VAR 0 9
7102: PUSH
7103: LD_VAR 0 6
7107: PUSH
7108: LD_VAR 0 8
7112: ARRAY
7113: PUSH
7114: LD_INT 2
7116: ARRAY
7117: LESS
7118: IFFALSE 7156
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7120: LD_ADDR_VAR 0 6
7124: PUSH
7125: LD_VAR 0 6
7129: PPUSH
7130: LD_VAR 0 8
7134: PPUSH
7135: LD_VAR 0 7
7139: PUSH
7140: LD_VAR 0 9
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PPUSH
7149: CALL_OW 2
7153: ST_TO_ADDR
// break ;
7154: GO 7158
// end ; end ;
7156: GO 7095
7158: POP
7159: POP
// end ; end ;
7160: GO 6959
7162: POP
7163: POP
// if result and not asc then
7164: LD_VAR 0 6
7168: PUSH
7169: LD_VAR 0 4
7173: NOT
7174: AND
7175: IFFALSE 7250
// begin tmp := result ;
7177: LD_ADDR_VAR 0 9
7181: PUSH
7182: LD_VAR 0 6
7186: ST_TO_ADDR
// for i = tmp downto 1 do
7187: LD_ADDR_VAR 0 7
7191: PUSH
7192: DOUBLE
7193: LD_VAR 0 9
7197: INC
7198: ST_TO_ADDR
7199: LD_INT 1
7201: PUSH
7202: FOR_DOWNTO
7203: IFFALSE 7248
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7205: LD_ADDR_VAR 0 6
7209: PUSH
7210: LD_VAR 0 6
7214: PPUSH
7215: LD_VAR 0 9
7219: PUSH
7220: LD_VAR 0 7
7224: MINUS
7225: PUSH
7226: LD_INT 1
7228: PLUS
7229: PPUSH
7230: LD_VAR 0 9
7234: PUSH
7235: LD_VAR 0 7
7239: ARRAY
7240: PPUSH
7241: CALL_OW 1
7245: ST_TO_ADDR
7246: GO 7202
7248: POP
7249: POP
// end ; tmp := [ ] ;
7250: LD_ADDR_VAR 0 9
7254: PUSH
7255: EMPTY
7256: ST_TO_ADDR
// if mode then
7257: LD_VAR 0 5
7261: IFFALSE 7330
// begin for i = 1 to result do
7263: LD_ADDR_VAR 0 7
7267: PUSH
7268: DOUBLE
7269: LD_INT 1
7271: DEC
7272: ST_TO_ADDR
7273: LD_VAR 0 6
7277: PUSH
7278: FOR_TO
7279: IFFALSE 7318
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7281: LD_ADDR_VAR 0 9
7285: PUSH
7286: LD_VAR 0 9
7290: PPUSH
7291: LD_VAR 0 7
7295: PPUSH
7296: LD_VAR 0 6
7300: PUSH
7301: LD_VAR 0 7
7305: ARRAY
7306: PUSH
7307: LD_INT 1
7309: ARRAY
7310: PPUSH
7311: CALL_OW 1
7315: ST_TO_ADDR
7316: GO 7278
7318: POP
7319: POP
// result := tmp ;
7320: LD_ADDR_VAR 0 6
7324: PUSH
7325: LD_VAR 0 9
7329: ST_TO_ADDR
// end ; end ;
7330: LD_VAR 0 6
7334: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7335: LD_INT 0
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
7341: PPUSH
7342: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7343: LD_ADDR_VAR 0 5
7347: PUSH
7348: LD_INT 0
7350: PUSH
7351: LD_INT 0
7353: PUSH
7354: LD_INT 0
7356: PUSH
7357: EMPTY
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: ST_TO_ADDR
// if not x or not y then
7365: LD_VAR 0 2
7369: NOT
7370: PUSH
7371: LD_VAR 0 3
7375: NOT
7376: OR
7377: IFFALSE 7381
// exit ;
7379: GO 9033
// if not range then
7381: LD_VAR 0 4
7385: NOT
7386: IFFALSE 7396
// range := 10 ;
7388: LD_ADDR_VAR 0 4
7392: PUSH
7393: LD_INT 10
7395: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7396: LD_ADDR_VAR 0 8
7400: PUSH
7401: LD_INT 81
7403: PUSH
7404: LD_VAR 0 1
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 92
7415: PUSH
7416: LD_VAR 0 2
7420: PUSH
7421: LD_VAR 0 3
7425: PUSH
7426: LD_VAR 0 4
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 3
7439: PUSH
7440: LD_INT 21
7442: PUSH
7443: LD_INT 3
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: PPUSH
7459: CALL_OW 69
7463: ST_TO_ADDR
// if not tmp then
7464: LD_VAR 0 8
7468: NOT
7469: IFFALSE 7473
// exit ;
7471: GO 9033
// for i in tmp do
7473: LD_ADDR_VAR 0 6
7477: PUSH
7478: LD_VAR 0 8
7482: PUSH
7483: FOR_IN
7484: IFFALSE 9008
// begin points := [ 0 , 0 , 0 ] ;
7486: LD_ADDR_VAR 0 9
7490: PUSH
7491: LD_INT 0
7493: PUSH
7494: LD_INT 0
7496: PUSH
7497: LD_INT 0
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: LIST
7504: ST_TO_ADDR
// bpoints := 1 ;
7505: LD_ADDR_VAR 0 10
7509: PUSH
7510: LD_INT 1
7512: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7513: LD_VAR 0 6
7517: PPUSH
7518: CALL_OW 247
7522: PUSH
7523: LD_INT 1
7525: DOUBLE
7526: EQUAL
7527: IFTRUE 7531
7529: GO 8109
7531: POP
// begin if GetClass ( i ) = 1 then
7532: LD_VAR 0 6
7536: PPUSH
7537: CALL_OW 257
7541: PUSH
7542: LD_INT 1
7544: EQUAL
7545: IFFALSE 7566
// points := [ 10 , 5 , 3 ] ;
7547: LD_ADDR_VAR 0 9
7551: PUSH
7552: LD_INT 10
7554: PUSH
7555: LD_INT 5
7557: PUSH
7558: LD_INT 3
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7566: LD_VAR 0 6
7570: PPUSH
7571: CALL_OW 257
7575: PUSH
7576: LD_INT 2
7578: PUSH
7579: LD_INT 3
7581: PUSH
7582: LD_INT 4
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: LIST
7589: IN
7590: IFFALSE 7611
// points := [ 3 , 2 , 1 ] ;
7592: LD_ADDR_VAR 0 9
7596: PUSH
7597: LD_INT 3
7599: PUSH
7600: LD_INT 2
7602: PUSH
7603: LD_INT 1
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: LIST
7610: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7611: LD_VAR 0 6
7615: PPUSH
7616: CALL_OW 257
7620: PUSH
7621: LD_INT 5
7623: EQUAL
7624: IFFALSE 7645
// points := [ 130 , 5 , 2 ] ;
7626: LD_ADDR_VAR 0 9
7630: PUSH
7631: LD_INT 130
7633: PUSH
7634: LD_INT 5
7636: PUSH
7637: LD_INT 2
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7645: LD_VAR 0 6
7649: PPUSH
7650: CALL_OW 257
7654: PUSH
7655: LD_INT 8
7657: EQUAL
7658: IFFALSE 7679
// points := [ 35 , 35 , 30 ] ;
7660: LD_ADDR_VAR 0 9
7664: PUSH
7665: LD_INT 35
7667: PUSH
7668: LD_INT 35
7670: PUSH
7671: LD_INT 30
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: LIST
7678: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7679: LD_VAR 0 6
7683: PPUSH
7684: CALL_OW 257
7688: PUSH
7689: LD_INT 9
7691: EQUAL
7692: IFFALSE 7713
// points := [ 20 , 55 , 40 ] ;
7694: LD_ADDR_VAR 0 9
7698: PUSH
7699: LD_INT 20
7701: PUSH
7702: LD_INT 55
7704: PUSH
7705: LD_INT 40
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: LIST
7712: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7713: LD_VAR 0 6
7717: PPUSH
7718: CALL_OW 257
7722: PUSH
7723: LD_INT 12
7725: PUSH
7726: LD_INT 16
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: IN
7733: IFFALSE 7754
// points := [ 5 , 3 , 2 ] ;
7735: LD_ADDR_VAR 0 9
7739: PUSH
7740: LD_INT 5
7742: PUSH
7743: LD_INT 3
7745: PUSH
7746: LD_INT 2
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: LIST
7753: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7754: LD_VAR 0 6
7758: PPUSH
7759: CALL_OW 257
7763: PUSH
7764: LD_INT 17
7766: EQUAL
7767: IFFALSE 7788
// points := [ 100 , 50 , 75 ] ;
7769: LD_ADDR_VAR 0 9
7773: PUSH
7774: LD_INT 100
7776: PUSH
7777: LD_INT 50
7779: PUSH
7780: LD_INT 75
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: LIST
7787: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7788: LD_VAR 0 6
7792: PPUSH
7793: CALL_OW 257
7797: PUSH
7798: LD_INT 15
7800: EQUAL
7801: IFFALSE 7822
// points := [ 10 , 5 , 3 ] ;
7803: LD_ADDR_VAR 0 9
7807: PUSH
7808: LD_INT 10
7810: PUSH
7811: LD_INT 5
7813: PUSH
7814: LD_INT 3
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: LIST
7821: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7822: LD_VAR 0 6
7826: PPUSH
7827: CALL_OW 257
7831: PUSH
7832: LD_INT 14
7834: EQUAL
7835: IFFALSE 7856
// points := [ 10 , 0 , 0 ] ;
7837: LD_ADDR_VAR 0 9
7841: PUSH
7842: LD_INT 10
7844: PUSH
7845: LD_INT 0
7847: PUSH
7848: LD_INT 0
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7856: LD_VAR 0 6
7860: PPUSH
7861: CALL_OW 257
7865: PUSH
7866: LD_INT 11
7868: EQUAL
7869: IFFALSE 7890
// points := [ 30 , 10 , 5 ] ;
7871: LD_ADDR_VAR 0 9
7875: PUSH
7876: LD_INT 30
7878: PUSH
7879: LD_INT 10
7881: PUSH
7882: LD_INT 5
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: LIST
7889: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7890: LD_VAR 0 1
7894: PPUSH
7895: LD_INT 5
7897: PPUSH
7898: CALL_OW 321
7902: PUSH
7903: LD_INT 2
7905: EQUAL
7906: IFFALSE 7923
// bpoints := bpoints * 1.8 ;
7908: LD_ADDR_VAR 0 10
7912: PUSH
7913: LD_VAR 0 10
7917: PUSH
7918: LD_REAL  1.80000000000000E+0000
7921: MUL
7922: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7923: LD_VAR 0 6
7927: PPUSH
7928: CALL_OW 257
7932: PUSH
7933: LD_INT 1
7935: PUSH
7936: LD_INT 2
7938: PUSH
7939: LD_INT 3
7941: PUSH
7942: LD_INT 4
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: IN
7951: PUSH
7952: LD_VAR 0 1
7956: PPUSH
7957: LD_INT 51
7959: PPUSH
7960: CALL_OW 321
7964: PUSH
7965: LD_INT 2
7967: EQUAL
7968: AND
7969: IFFALSE 7986
// bpoints := bpoints * 1.2 ;
7971: LD_ADDR_VAR 0 10
7975: PUSH
7976: LD_VAR 0 10
7980: PUSH
7981: LD_REAL  1.20000000000000E+0000
7984: MUL
7985: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7986: LD_VAR 0 6
7990: PPUSH
7991: CALL_OW 257
7995: PUSH
7996: LD_INT 5
7998: PUSH
7999: LD_INT 7
8001: PUSH
8002: LD_INT 9
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: LIST
8009: IN
8010: PUSH
8011: LD_VAR 0 1
8015: PPUSH
8016: LD_INT 52
8018: PPUSH
8019: CALL_OW 321
8023: PUSH
8024: LD_INT 2
8026: EQUAL
8027: AND
8028: IFFALSE 8045
// bpoints := bpoints * 1.5 ;
8030: LD_ADDR_VAR 0 10
8034: PUSH
8035: LD_VAR 0 10
8039: PUSH
8040: LD_REAL  1.50000000000000E+0000
8043: MUL
8044: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8045: LD_VAR 0 1
8049: PPUSH
8050: LD_INT 66
8052: PPUSH
8053: CALL_OW 321
8057: PUSH
8058: LD_INT 2
8060: EQUAL
8061: IFFALSE 8078
// bpoints := bpoints * 1.1 ;
8063: LD_ADDR_VAR 0 10
8067: PUSH
8068: LD_VAR 0 10
8072: PUSH
8073: LD_REAL  1.10000000000000E+0000
8076: MUL
8077: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8078: LD_ADDR_VAR 0 10
8082: PUSH
8083: LD_VAR 0 10
8087: PUSH
8088: LD_VAR 0 6
8092: PPUSH
8093: LD_INT 1
8095: PPUSH
8096: CALL_OW 259
8100: PUSH
8101: LD_REAL  1.15000000000000E+0000
8104: MUL
8105: MUL
8106: ST_TO_ADDR
// end ; unit_vehicle :
8107: GO 8937
8109: LD_INT 2
8111: DOUBLE
8112: EQUAL
8113: IFTRUE 8117
8115: GO 8925
8117: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8118: LD_VAR 0 6
8122: PPUSH
8123: CALL_OW 264
8127: PUSH
8128: LD_INT 2
8130: PUSH
8131: LD_INT 42
8133: PUSH
8134: LD_INT 24
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: LIST
8141: IN
8142: IFFALSE 8163
// points := [ 25 , 5 , 3 ] ;
8144: LD_ADDR_VAR 0 9
8148: PUSH
8149: LD_INT 25
8151: PUSH
8152: LD_INT 5
8154: PUSH
8155: LD_INT 3
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: LIST
8162: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8163: LD_VAR 0 6
8167: PPUSH
8168: CALL_OW 264
8172: PUSH
8173: LD_INT 4
8175: PUSH
8176: LD_INT 43
8178: PUSH
8179: LD_INT 25
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: LIST
8186: IN
8187: IFFALSE 8208
// points := [ 40 , 15 , 5 ] ;
8189: LD_ADDR_VAR 0 9
8193: PUSH
8194: LD_INT 40
8196: PUSH
8197: LD_INT 15
8199: PUSH
8200: LD_INT 5
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8208: LD_VAR 0 6
8212: PPUSH
8213: CALL_OW 264
8217: PUSH
8218: LD_INT 3
8220: PUSH
8221: LD_INT 23
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: IN
8228: IFFALSE 8249
// points := [ 7 , 25 , 8 ] ;
8230: LD_ADDR_VAR 0 9
8234: PUSH
8235: LD_INT 7
8237: PUSH
8238: LD_INT 25
8240: PUSH
8241: LD_INT 8
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: LIST
8248: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8249: LD_VAR 0 6
8253: PPUSH
8254: CALL_OW 264
8258: PUSH
8259: LD_INT 5
8261: PUSH
8262: LD_INT 27
8264: PUSH
8265: LD_INT 44
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: LIST
8272: IN
8273: IFFALSE 8294
// points := [ 14 , 50 , 16 ] ;
8275: LD_ADDR_VAR 0 9
8279: PUSH
8280: LD_INT 14
8282: PUSH
8283: LD_INT 50
8285: PUSH
8286: LD_INT 16
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8294: LD_VAR 0 6
8298: PPUSH
8299: CALL_OW 264
8303: PUSH
8304: LD_INT 6
8306: PUSH
8307: LD_INT 46
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: IN
8314: IFFALSE 8335
// points := [ 32 , 120 , 70 ] ;
8316: LD_ADDR_VAR 0 9
8320: PUSH
8321: LD_INT 32
8323: PUSH
8324: LD_INT 120
8326: PUSH
8327: LD_INT 70
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: LIST
8334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8335: LD_VAR 0 6
8339: PPUSH
8340: CALL_OW 264
8344: PUSH
8345: LD_INT 7
8347: PUSH
8348: LD_INT 28
8350: PUSH
8351: LD_INT 45
8353: PUSH
8354: LD_EXP 8
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: IN
8365: IFFALSE 8386
// points := [ 35 , 20 , 45 ] ;
8367: LD_ADDR_VAR 0 9
8371: PUSH
8372: LD_INT 35
8374: PUSH
8375: LD_INT 20
8377: PUSH
8378: LD_INT 45
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8386: LD_VAR 0 6
8390: PPUSH
8391: CALL_OW 264
8395: PUSH
8396: LD_INT 47
8398: PUSH
8399: EMPTY
8400: LIST
8401: IN
8402: IFFALSE 8423
// points := [ 67 , 45 , 75 ] ;
8404: LD_ADDR_VAR 0 9
8408: PUSH
8409: LD_INT 67
8411: PUSH
8412: LD_INT 45
8414: PUSH
8415: LD_INT 75
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: LIST
8422: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8423: LD_VAR 0 6
8427: PPUSH
8428: CALL_OW 264
8432: PUSH
8433: LD_INT 26
8435: PUSH
8436: EMPTY
8437: LIST
8438: IN
8439: IFFALSE 8460
// points := [ 120 , 30 , 80 ] ;
8441: LD_ADDR_VAR 0 9
8445: PUSH
8446: LD_INT 120
8448: PUSH
8449: LD_INT 30
8451: PUSH
8452: LD_INT 80
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: LIST
8459: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8460: LD_VAR 0 6
8464: PPUSH
8465: CALL_OW 264
8469: PUSH
8470: LD_INT 22
8472: PUSH
8473: EMPTY
8474: LIST
8475: IN
8476: IFFALSE 8497
// points := [ 40 , 1 , 1 ] ;
8478: LD_ADDR_VAR 0 9
8482: PUSH
8483: LD_INT 40
8485: PUSH
8486: LD_INT 1
8488: PUSH
8489: LD_INT 1
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: LIST
8496: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8497: LD_VAR 0 6
8501: PPUSH
8502: CALL_OW 264
8506: PUSH
8507: LD_INT 29
8509: PUSH
8510: EMPTY
8511: LIST
8512: IN
8513: IFFALSE 8534
// points := [ 70 , 200 , 400 ] ;
8515: LD_ADDR_VAR 0 9
8519: PUSH
8520: LD_INT 70
8522: PUSH
8523: LD_INT 200
8525: PUSH
8526: LD_INT 400
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: LIST
8533: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8534: LD_VAR 0 6
8538: PPUSH
8539: CALL_OW 264
8543: PUSH
8544: LD_INT 14
8546: PUSH
8547: LD_INT 53
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: IN
8554: IFFALSE 8575
// points := [ 40 , 10 , 20 ] ;
8556: LD_ADDR_VAR 0 9
8560: PUSH
8561: LD_INT 40
8563: PUSH
8564: LD_INT 10
8566: PUSH
8567: LD_INT 20
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8575: LD_VAR 0 6
8579: PPUSH
8580: CALL_OW 264
8584: PUSH
8585: LD_INT 9
8587: PUSH
8588: EMPTY
8589: LIST
8590: IN
8591: IFFALSE 8612
// points := [ 5 , 70 , 20 ] ;
8593: LD_ADDR_VAR 0 9
8597: PUSH
8598: LD_INT 5
8600: PUSH
8601: LD_INT 70
8603: PUSH
8604: LD_INT 20
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: LIST
8611: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8612: LD_VAR 0 6
8616: PPUSH
8617: CALL_OW 264
8621: PUSH
8622: LD_INT 10
8624: PUSH
8625: EMPTY
8626: LIST
8627: IN
8628: IFFALSE 8649
// points := [ 35 , 110 , 70 ] ;
8630: LD_ADDR_VAR 0 9
8634: PUSH
8635: LD_INT 35
8637: PUSH
8638: LD_INT 110
8640: PUSH
8641: LD_INT 70
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: LIST
8648: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8649: LD_VAR 0 6
8653: PPUSH
8654: CALL_OW 265
8658: PUSH
8659: LD_INT 25
8661: EQUAL
8662: IFFALSE 8683
// points := [ 80 , 65 , 100 ] ;
8664: LD_ADDR_VAR 0 9
8668: PUSH
8669: LD_INT 80
8671: PUSH
8672: LD_INT 65
8674: PUSH
8675: LD_INT 100
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: LIST
8682: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8683: LD_VAR 0 6
8687: PPUSH
8688: CALL_OW 263
8692: PUSH
8693: LD_INT 1
8695: EQUAL
8696: IFFALSE 8731
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8698: LD_ADDR_VAR 0 10
8702: PUSH
8703: LD_VAR 0 10
8707: PUSH
8708: LD_VAR 0 6
8712: PPUSH
8713: CALL_OW 311
8717: PPUSH
8718: LD_INT 3
8720: PPUSH
8721: CALL_OW 259
8725: PUSH
8726: LD_INT 4
8728: MUL
8729: MUL
8730: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8731: LD_VAR 0 6
8735: PPUSH
8736: CALL_OW 263
8740: PUSH
8741: LD_INT 2
8743: EQUAL
8744: IFFALSE 8795
// begin j := IsControledBy ( i ) ;
8746: LD_ADDR_VAR 0 7
8750: PUSH
8751: LD_VAR 0 6
8755: PPUSH
8756: CALL_OW 312
8760: ST_TO_ADDR
// if j then
8761: LD_VAR 0 7
8765: IFFALSE 8795
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8767: LD_ADDR_VAR 0 10
8771: PUSH
8772: LD_VAR 0 10
8776: PUSH
8777: LD_VAR 0 7
8781: PPUSH
8782: LD_INT 3
8784: PPUSH
8785: CALL_OW 259
8789: PUSH
8790: LD_INT 3
8792: MUL
8793: MUL
8794: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8795: LD_VAR 0 6
8799: PPUSH
8800: CALL_OW 264
8804: PUSH
8805: LD_INT 5
8807: PUSH
8808: LD_INT 6
8810: PUSH
8811: LD_INT 46
8813: PUSH
8814: LD_INT 44
8816: PUSH
8817: LD_INT 47
8819: PUSH
8820: LD_INT 45
8822: PUSH
8823: LD_INT 28
8825: PUSH
8826: LD_INT 7
8828: PUSH
8829: LD_INT 27
8831: PUSH
8832: LD_INT 29
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: IN
8847: PUSH
8848: LD_VAR 0 1
8852: PPUSH
8853: LD_INT 52
8855: PPUSH
8856: CALL_OW 321
8860: PUSH
8861: LD_INT 2
8863: EQUAL
8864: AND
8865: IFFALSE 8882
// bpoints := bpoints * 1.2 ;
8867: LD_ADDR_VAR 0 10
8871: PUSH
8872: LD_VAR 0 10
8876: PUSH
8877: LD_REAL  1.20000000000000E+0000
8880: MUL
8881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8882: LD_VAR 0 6
8886: PPUSH
8887: CALL_OW 264
8891: PUSH
8892: LD_INT 6
8894: PUSH
8895: LD_INT 46
8897: PUSH
8898: LD_INT 47
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: IN
8906: IFFALSE 8923
// bpoints := bpoints * 1.2 ;
8908: LD_ADDR_VAR 0 10
8912: PUSH
8913: LD_VAR 0 10
8917: PUSH
8918: LD_REAL  1.20000000000000E+0000
8921: MUL
8922: ST_TO_ADDR
// end ; unit_building :
8923: GO 8937
8925: LD_INT 3
8927: DOUBLE
8928: EQUAL
8929: IFTRUE 8933
8931: GO 8936
8933: POP
// ; end ;
8934: GO 8937
8936: POP
// for j = 1 to 3 do
8937: LD_ADDR_VAR 0 7
8941: PUSH
8942: DOUBLE
8943: LD_INT 1
8945: DEC
8946: ST_TO_ADDR
8947: LD_INT 3
8949: PUSH
8950: FOR_TO
8951: IFFALSE 9004
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8953: LD_ADDR_VAR 0 5
8957: PUSH
8958: LD_VAR 0 5
8962: PPUSH
8963: LD_VAR 0 7
8967: PPUSH
8968: LD_VAR 0 5
8972: PUSH
8973: LD_VAR 0 7
8977: ARRAY
8978: PUSH
8979: LD_VAR 0 9
8983: PUSH
8984: LD_VAR 0 7
8988: ARRAY
8989: PUSH
8990: LD_VAR 0 10
8994: MUL
8995: PLUS
8996: PPUSH
8997: CALL_OW 1
9001: ST_TO_ADDR
9002: GO 8950
9004: POP
9005: POP
// end ;
9006: GO 7483
9008: POP
9009: POP
// result := Replace ( result , 4 , tmp ) ;
9010: LD_ADDR_VAR 0 5
9014: PUSH
9015: LD_VAR 0 5
9019: PPUSH
9020: LD_INT 4
9022: PPUSH
9023: LD_VAR 0 8
9027: PPUSH
9028: CALL_OW 1
9032: ST_TO_ADDR
// end ;
9033: LD_VAR 0 5
9037: RET
// export function DangerAtRange ( unit , range ) ; begin
9038: LD_INT 0
9040: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9041: LD_ADDR_VAR 0 3
9045: PUSH
9046: LD_VAR 0 1
9050: PPUSH
9051: CALL_OW 255
9055: PPUSH
9056: LD_VAR 0 1
9060: PPUSH
9061: CALL_OW 250
9065: PPUSH
9066: LD_VAR 0 1
9070: PPUSH
9071: CALL_OW 251
9075: PPUSH
9076: LD_VAR 0 2
9080: PPUSH
9081: CALL 7335 0 4
9085: ST_TO_ADDR
// end ;
9086: LD_VAR 0 3
9090: RET
// export function DangerInArea ( side , area ) ; begin
9091: LD_INT 0
9093: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9094: LD_ADDR_VAR 0 3
9098: PUSH
9099: LD_VAR 0 2
9103: PPUSH
9104: LD_INT 81
9106: PUSH
9107: LD_VAR 0 1
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PPUSH
9116: CALL_OW 70
9120: ST_TO_ADDR
// end ;
9121: LD_VAR 0 3
9125: RET
// export function IsExtension ( b ) ; begin
9126: LD_INT 0
9128: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9129: LD_ADDR_VAR 0 2
9133: PUSH
9134: LD_VAR 0 1
9138: PUSH
9139: LD_INT 23
9141: PUSH
9142: LD_INT 20
9144: PUSH
9145: LD_INT 22
9147: PUSH
9148: LD_INT 17
9150: PUSH
9151: LD_INT 24
9153: PUSH
9154: LD_INT 21
9156: PUSH
9157: LD_INT 19
9159: PUSH
9160: LD_INT 16
9162: PUSH
9163: LD_INT 25
9165: PUSH
9166: LD_INT 18
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: IN
9181: ST_TO_ADDR
// end ;
9182: LD_VAR 0 2
9186: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9187: LD_INT 0
9189: PPUSH
9190: PPUSH
9191: PPUSH
// result := [ ] ;
9192: LD_ADDR_VAR 0 4
9196: PUSH
9197: EMPTY
9198: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9199: LD_ADDR_VAR 0 5
9203: PUSH
9204: LD_VAR 0 2
9208: PPUSH
9209: LD_INT 21
9211: PUSH
9212: LD_INT 3
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: PPUSH
9219: CALL_OW 70
9223: ST_TO_ADDR
// if not tmp then
9224: LD_VAR 0 5
9228: NOT
9229: IFFALSE 9233
// exit ;
9231: GO 9297
// if checkLink then
9233: LD_VAR 0 3
9237: IFFALSE 9287
// begin for i in tmp do
9239: LD_ADDR_VAR 0 6
9243: PUSH
9244: LD_VAR 0 5
9248: PUSH
9249: FOR_IN
9250: IFFALSE 9285
// if GetBase ( i ) <> base then
9252: LD_VAR 0 6
9256: PPUSH
9257: CALL_OW 274
9261: PUSH
9262: LD_VAR 0 1
9266: NONEQUAL
9267: IFFALSE 9283
// ComLinkToBase ( base , i ) ;
9269: LD_VAR 0 1
9273: PPUSH
9274: LD_VAR 0 6
9278: PPUSH
9279: CALL_OW 169
9283: GO 9249
9285: POP
9286: POP
// end ; result := tmp ;
9287: LD_ADDR_VAR 0 4
9291: PUSH
9292: LD_VAR 0 5
9296: ST_TO_ADDR
// end ;
9297: LD_VAR 0 4
9301: RET
// export function ComComplete ( units , b ) ; var i ; begin
9302: LD_INT 0
9304: PPUSH
9305: PPUSH
// if not units then
9306: LD_VAR 0 1
9310: NOT
9311: IFFALSE 9315
// exit ;
9313: GO 9405
// for i in units do
9315: LD_ADDR_VAR 0 4
9319: PUSH
9320: LD_VAR 0 1
9324: PUSH
9325: FOR_IN
9326: IFFALSE 9403
// if BuildingStatus ( b ) = bs_build then
9328: LD_VAR 0 2
9332: PPUSH
9333: CALL_OW 461
9337: PUSH
9338: LD_INT 1
9340: EQUAL
9341: IFFALSE 9401
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9343: LD_VAR 0 4
9347: PPUSH
9348: LD_STRING h
9350: PUSH
9351: LD_VAR 0 2
9355: PPUSH
9356: CALL_OW 250
9360: PUSH
9361: LD_VAR 0 2
9365: PPUSH
9366: CALL_OW 251
9370: PUSH
9371: LD_VAR 0 2
9375: PUSH
9376: LD_INT 0
9378: PUSH
9379: LD_INT 0
9381: PUSH
9382: LD_INT 0
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: PUSH
9394: EMPTY
9395: LIST
9396: PPUSH
9397: CALL_OW 446
9401: GO 9325
9403: POP
9404: POP
// end ;
9405: LD_VAR 0 3
9409: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9410: LD_INT 0
9412: PPUSH
9413: PPUSH
9414: PPUSH
9415: PPUSH
9416: PPUSH
9417: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9418: LD_VAR 0 1
9422: NOT
9423: PUSH
9424: LD_VAR 0 1
9428: PPUSH
9429: CALL_OW 263
9433: PUSH
9434: LD_INT 2
9436: NONEQUAL
9437: OR
9438: IFFALSE 9442
// exit ;
9440: GO 9758
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9442: LD_ADDR_VAR 0 6
9446: PUSH
9447: LD_INT 22
9449: PUSH
9450: LD_VAR 0 1
9454: PPUSH
9455: CALL_OW 255
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: PUSH
9464: LD_INT 2
9466: PUSH
9467: LD_INT 30
9469: PUSH
9470: LD_INT 36
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 34
9479: PUSH
9480: LD_INT 31
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: LIST
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: PPUSH
9496: CALL_OW 69
9500: ST_TO_ADDR
// if not tmp then
9501: LD_VAR 0 6
9505: NOT
9506: IFFALSE 9510
// exit ;
9508: GO 9758
// result := [ ] ;
9510: LD_ADDR_VAR 0 2
9514: PUSH
9515: EMPTY
9516: ST_TO_ADDR
// for i in tmp do
9517: LD_ADDR_VAR 0 3
9521: PUSH
9522: LD_VAR 0 6
9526: PUSH
9527: FOR_IN
9528: IFFALSE 9599
// begin t := UnitsInside ( i ) ;
9530: LD_ADDR_VAR 0 4
9534: PUSH
9535: LD_VAR 0 3
9539: PPUSH
9540: CALL_OW 313
9544: ST_TO_ADDR
// if t then
9545: LD_VAR 0 4
9549: IFFALSE 9597
// for j in t do
9551: LD_ADDR_VAR 0 7
9555: PUSH
9556: LD_VAR 0 4
9560: PUSH
9561: FOR_IN
9562: IFFALSE 9595
// result := Replace ( result , result + 1 , j ) ;
9564: LD_ADDR_VAR 0 2
9568: PUSH
9569: LD_VAR 0 2
9573: PPUSH
9574: LD_VAR 0 2
9578: PUSH
9579: LD_INT 1
9581: PLUS
9582: PPUSH
9583: LD_VAR 0 7
9587: PPUSH
9588: CALL_OW 1
9592: ST_TO_ADDR
9593: GO 9561
9595: POP
9596: POP
// end ;
9597: GO 9527
9599: POP
9600: POP
// if not result then
9601: LD_VAR 0 2
9605: NOT
9606: IFFALSE 9610
// exit ;
9608: GO 9758
// mech := result [ 1 ] ;
9610: LD_ADDR_VAR 0 5
9614: PUSH
9615: LD_VAR 0 2
9619: PUSH
9620: LD_INT 1
9622: ARRAY
9623: ST_TO_ADDR
// if result > 1 then
9624: LD_VAR 0 2
9628: PUSH
9629: LD_INT 1
9631: GREATER
9632: IFFALSE 9744
// begin for i = 2 to result do
9634: LD_ADDR_VAR 0 3
9638: PUSH
9639: DOUBLE
9640: LD_INT 2
9642: DEC
9643: ST_TO_ADDR
9644: LD_VAR 0 2
9648: PUSH
9649: FOR_TO
9650: IFFALSE 9742
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9652: LD_ADDR_VAR 0 4
9656: PUSH
9657: LD_VAR 0 2
9661: PUSH
9662: LD_VAR 0 3
9666: ARRAY
9667: PPUSH
9668: LD_INT 3
9670: PPUSH
9671: CALL_OW 259
9675: PUSH
9676: LD_VAR 0 2
9680: PUSH
9681: LD_VAR 0 3
9685: ARRAY
9686: PPUSH
9687: CALL_OW 432
9691: MINUS
9692: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9693: LD_VAR 0 4
9697: PUSH
9698: LD_VAR 0 5
9702: PPUSH
9703: LD_INT 3
9705: PPUSH
9706: CALL_OW 259
9710: PUSH
9711: LD_VAR 0 5
9715: PPUSH
9716: CALL_OW 432
9720: MINUS
9721: GREATEREQUAL
9722: IFFALSE 9740
// mech := result [ i ] ;
9724: LD_ADDR_VAR 0 5
9728: PUSH
9729: LD_VAR 0 2
9733: PUSH
9734: LD_VAR 0 3
9738: ARRAY
9739: ST_TO_ADDR
// end ;
9740: GO 9649
9742: POP
9743: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9744: LD_VAR 0 1
9748: PPUSH
9749: LD_VAR 0 5
9753: PPUSH
9754: CALL_OW 135
// end ;
9758: LD_VAR 0 2
9762: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9763: LD_INT 0
9765: PPUSH
9766: PPUSH
9767: PPUSH
9768: PPUSH
9769: PPUSH
9770: PPUSH
9771: PPUSH
9772: PPUSH
9773: PPUSH
9774: PPUSH
9775: PPUSH
9776: PPUSH
9777: PPUSH
// result := [ ] ;
9778: LD_ADDR_VAR 0 7
9782: PUSH
9783: EMPTY
9784: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9785: LD_VAR 0 1
9789: PPUSH
9790: CALL_OW 266
9794: PUSH
9795: LD_INT 0
9797: PUSH
9798: LD_INT 1
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: IN
9805: NOT
9806: IFFALSE 9810
// exit ;
9808: GO 11444
// if name then
9810: LD_VAR 0 3
9814: IFFALSE 9830
// SetBName ( base_dep , name ) ;
9816: LD_VAR 0 1
9820: PPUSH
9821: LD_VAR 0 3
9825: PPUSH
9826: CALL_OW 500
// base := GetBase ( base_dep ) ;
9830: LD_ADDR_VAR 0 15
9834: PUSH
9835: LD_VAR 0 1
9839: PPUSH
9840: CALL_OW 274
9844: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9845: LD_ADDR_VAR 0 16
9849: PUSH
9850: LD_VAR 0 1
9854: PPUSH
9855: CALL_OW 255
9859: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9860: LD_ADDR_VAR 0 17
9864: PUSH
9865: LD_VAR 0 1
9869: PPUSH
9870: CALL_OW 248
9874: ST_TO_ADDR
// if sources then
9875: LD_VAR 0 5
9879: IFFALSE 9926
// for i = 1 to 3 do
9881: LD_ADDR_VAR 0 8
9885: PUSH
9886: DOUBLE
9887: LD_INT 1
9889: DEC
9890: ST_TO_ADDR
9891: LD_INT 3
9893: PUSH
9894: FOR_TO
9895: IFFALSE 9924
// AddResourceType ( base , i , sources [ i ] ) ;
9897: LD_VAR 0 15
9901: PPUSH
9902: LD_VAR 0 8
9906: PPUSH
9907: LD_VAR 0 5
9911: PUSH
9912: LD_VAR 0 8
9916: ARRAY
9917: PPUSH
9918: CALL_OW 276
9922: GO 9894
9924: POP
9925: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9926: LD_ADDR_VAR 0 18
9930: PUSH
9931: LD_VAR 0 15
9935: PPUSH
9936: LD_VAR 0 2
9940: PPUSH
9941: LD_INT 1
9943: PPUSH
9944: CALL 9187 0 3
9948: ST_TO_ADDR
// InitHc ;
9949: CALL_OW 19
// InitUc ;
9953: CALL_OW 18
// uc_side := side ;
9957: LD_ADDR_OWVAR 20
9961: PUSH
9962: LD_VAR 0 16
9966: ST_TO_ADDR
// uc_nation := nation ;
9967: LD_ADDR_OWVAR 21
9971: PUSH
9972: LD_VAR 0 17
9976: ST_TO_ADDR
// if buildings then
9977: LD_VAR 0 18
9981: IFFALSE 11303
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9983: LD_ADDR_VAR 0 19
9987: PUSH
9988: LD_VAR 0 18
9992: PPUSH
9993: LD_INT 2
9995: PUSH
9996: LD_INT 30
9998: PUSH
9999: LD_INT 29
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 30
10008: PUSH
10009: LD_INT 30
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: PPUSH
10021: CALL_OW 72
10025: ST_TO_ADDR
// if tmp then
10026: LD_VAR 0 19
10030: IFFALSE 10078
// for i in tmp do
10032: LD_ADDR_VAR 0 8
10036: PUSH
10037: LD_VAR 0 19
10041: PUSH
10042: FOR_IN
10043: IFFALSE 10076
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10045: LD_VAR 0 8
10049: PPUSH
10050: CALL_OW 250
10054: PPUSH
10055: LD_VAR 0 8
10059: PPUSH
10060: CALL_OW 251
10064: PPUSH
10065: LD_VAR 0 16
10069: PPUSH
10070: CALL_OW 441
10074: GO 10042
10076: POP
10077: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10078: LD_VAR 0 18
10082: PPUSH
10083: LD_INT 2
10085: PUSH
10086: LD_INT 30
10088: PUSH
10089: LD_INT 32
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 30
10098: PUSH
10099: LD_INT 33
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: LIST
10110: PPUSH
10111: CALL_OW 72
10115: IFFALSE 10203
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10117: LD_ADDR_VAR 0 8
10121: PUSH
10122: LD_VAR 0 18
10126: PPUSH
10127: LD_INT 2
10129: PUSH
10130: LD_INT 30
10132: PUSH
10133: LD_INT 32
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: LD_INT 30
10142: PUSH
10143: LD_INT 33
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: LIST
10154: PPUSH
10155: CALL_OW 72
10159: PUSH
10160: FOR_IN
10161: IFFALSE 10201
// begin if not GetBWeapon ( i ) then
10163: LD_VAR 0 8
10167: PPUSH
10168: CALL_OW 269
10172: NOT
10173: IFFALSE 10199
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10175: LD_VAR 0 8
10179: PPUSH
10180: LD_VAR 0 8
10184: PPUSH
10185: LD_VAR 0 2
10189: PPUSH
10190: CALL 11449 0 2
10194: PPUSH
10195: CALL_OW 431
// end ;
10199: GO 10160
10201: POP
10202: POP
// end ; for i = 1 to personel do
10203: LD_ADDR_VAR 0 8
10207: PUSH
10208: DOUBLE
10209: LD_INT 1
10211: DEC
10212: ST_TO_ADDR
10213: LD_VAR 0 6
10217: PUSH
10218: FOR_TO
10219: IFFALSE 11283
// begin if i > 4 then
10221: LD_VAR 0 8
10225: PUSH
10226: LD_INT 4
10228: GREATER
10229: IFFALSE 10233
// break ;
10231: GO 11283
// case i of 1 :
10233: LD_VAR 0 8
10237: PUSH
10238: LD_INT 1
10240: DOUBLE
10241: EQUAL
10242: IFTRUE 10246
10244: GO 10326
10246: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10247: LD_ADDR_VAR 0 12
10251: PUSH
10252: LD_VAR 0 18
10256: PPUSH
10257: LD_INT 22
10259: PUSH
10260: LD_VAR 0 16
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: LD_INT 58
10271: PUSH
10272: EMPTY
10273: LIST
10274: PUSH
10275: LD_INT 2
10277: PUSH
10278: LD_INT 30
10280: PUSH
10281: LD_INT 32
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: LD_INT 30
10290: PUSH
10291: LD_INT 4
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 30
10300: PUSH
10301: LD_INT 5
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: LIST
10318: PPUSH
10319: CALL_OW 72
10323: ST_TO_ADDR
10324: GO 10548
10326: LD_INT 2
10328: DOUBLE
10329: EQUAL
10330: IFTRUE 10334
10332: GO 10396
10334: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10335: LD_ADDR_VAR 0 12
10339: PUSH
10340: LD_VAR 0 18
10344: PPUSH
10345: LD_INT 22
10347: PUSH
10348: LD_VAR 0 16
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: LD_INT 2
10359: PUSH
10360: LD_INT 30
10362: PUSH
10363: LD_INT 0
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: LD_INT 30
10372: PUSH
10373: LD_INT 1
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: LIST
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PPUSH
10389: CALL_OW 72
10393: ST_TO_ADDR
10394: GO 10548
10396: LD_INT 3
10398: DOUBLE
10399: EQUAL
10400: IFTRUE 10404
10402: GO 10466
10404: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10405: LD_ADDR_VAR 0 12
10409: PUSH
10410: LD_VAR 0 18
10414: PPUSH
10415: LD_INT 22
10417: PUSH
10418: LD_VAR 0 16
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: LD_INT 2
10429: PUSH
10430: LD_INT 30
10432: PUSH
10433: LD_INT 2
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PUSH
10440: LD_INT 30
10442: PUSH
10443: LD_INT 3
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: LIST
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PPUSH
10459: CALL_OW 72
10463: ST_TO_ADDR
10464: GO 10548
10466: LD_INT 4
10468: DOUBLE
10469: EQUAL
10470: IFTRUE 10474
10472: GO 10547
10474: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10475: LD_ADDR_VAR 0 12
10479: PUSH
10480: LD_VAR 0 18
10484: PPUSH
10485: LD_INT 22
10487: PUSH
10488: LD_VAR 0 16
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: LD_INT 2
10499: PUSH
10500: LD_INT 30
10502: PUSH
10503: LD_INT 6
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 30
10512: PUSH
10513: LD_INT 7
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: LD_INT 30
10522: PUSH
10523: LD_INT 8
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PPUSH
10540: CALL_OW 72
10544: ST_TO_ADDR
10545: GO 10548
10547: POP
// if i = 1 then
10548: LD_VAR 0 8
10552: PUSH
10553: LD_INT 1
10555: EQUAL
10556: IFFALSE 10667
// begin tmp := [ ] ;
10558: LD_ADDR_VAR 0 19
10562: PUSH
10563: EMPTY
10564: ST_TO_ADDR
// for j in f do
10565: LD_ADDR_VAR 0 9
10569: PUSH
10570: LD_VAR 0 12
10574: PUSH
10575: FOR_IN
10576: IFFALSE 10649
// if GetBType ( j ) = b_bunker then
10578: LD_VAR 0 9
10582: PPUSH
10583: CALL_OW 266
10587: PUSH
10588: LD_INT 32
10590: EQUAL
10591: IFFALSE 10618
// tmp := Insert ( tmp , 1 , j ) else
10593: LD_ADDR_VAR 0 19
10597: PUSH
10598: LD_VAR 0 19
10602: PPUSH
10603: LD_INT 1
10605: PPUSH
10606: LD_VAR 0 9
10610: PPUSH
10611: CALL_OW 2
10615: ST_TO_ADDR
10616: GO 10647
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10618: LD_ADDR_VAR 0 19
10622: PUSH
10623: LD_VAR 0 19
10627: PPUSH
10628: LD_VAR 0 19
10632: PUSH
10633: LD_INT 1
10635: PLUS
10636: PPUSH
10637: LD_VAR 0 9
10641: PPUSH
10642: CALL_OW 2
10646: ST_TO_ADDR
10647: GO 10575
10649: POP
10650: POP
// if tmp then
10651: LD_VAR 0 19
10655: IFFALSE 10667
// f := tmp ;
10657: LD_ADDR_VAR 0 12
10661: PUSH
10662: LD_VAR 0 19
10666: ST_TO_ADDR
// end ; x := personel [ i ] ;
10667: LD_ADDR_VAR 0 13
10671: PUSH
10672: LD_VAR 0 6
10676: PUSH
10677: LD_VAR 0 8
10681: ARRAY
10682: ST_TO_ADDR
// if x = - 1 then
10683: LD_VAR 0 13
10687: PUSH
10688: LD_INT 1
10690: NEG
10691: EQUAL
10692: IFFALSE 10901
// begin for j in f do
10694: LD_ADDR_VAR 0 9
10698: PUSH
10699: LD_VAR 0 12
10703: PUSH
10704: FOR_IN
10705: IFFALSE 10897
// repeat InitHc ;
10707: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10711: LD_VAR 0 9
10715: PPUSH
10716: CALL_OW 266
10720: PUSH
10721: LD_INT 5
10723: EQUAL
10724: IFFALSE 10794
// begin if UnitsInside ( j ) < 3 then
10726: LD_VAR 0 9
10730: PPUSH
10731: CALL_OW 313
10735: PUSH
10736: LD_INT 3
10738: LESS
10739: IFFALSE 10775
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10741: LD_INT 0
10743: PPUSH
10744: LD_INT 5
10746: PUSH
10747: LD_INT 8
10749: PUSH
10750: LD_INT 9
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: LIST
10757: PUSH
10758: LD_VAR 0 17
10762: ARRAY
10763: PPUSH
10764: LD_VAR 0 4
10768: PPUSH
10769: CALL_OW 380
10773: GO 10792
// PrepareHuman ( false , i , skill ) ;
10775: LD_INT 0
10777: PPUSH
10778: LD_VAR 0 8
10782: PPUSH
10783: LD_VAR 0 4
10787: PPUSH
10788: CALL_OW 380
// end else
10792: GO 10811
// PrepareHuman ( false , i , skill ) ;
10794: LD_INT 0
10796: PPUSH
10797: LD_VAR 0 8
10801: PPUSH
10802: LD_VAR 0 4
10806: PPUSH
10807: CALL_OW 380
// un := CreateHuman ;
10811: LD_ADDR_VAR 0 14
10815: PUSH
10816: CALL_OW 44
10820: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10821: LD_ADDR_VAR 0 7
10825: PUSH
10826: LD_VAR 0 7
10830: PPUSH
10831: LD_INT 1
10833: PPUSH
10834: LD_VAR 0 14
10838: PPUSH
10839: CALL_OW 2
10843: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10844: LD_VAR 0 14
10848: PPUSH
10849: LD_VAR 0 9
10853: PPUSH
10854: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10858: LD_VAR 0 9
10862: PPUSH
10863: CALL_OW 313
10867: PUSH
10868: LD_INT 6
10870: EQUAL
10871: PUSH
10872: LD_VAR 0 9
10876: PPUSH
10877: CALL_OW 266
10881: PUSH
10882: LD_INT 32
10884: PUSH
10885: LD_INT 31
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: IN
10892: OR
10893: IFFALSE 10707
10895: GO 10704
10897: POP
10898: POP
// end else
10899: GO 11281
// for j = 1 to x do
10901: LD_ADDR_VAR 0 9
10905: PUSH
10906: DOUBLE
10907: LD_INT 1
10909: DEC
10910: ST_TO_ADDR
10911: LD_VAR 0 13
10915: PUSH
10916: FOR_TO
10917: IFFALSE 11279
// begin InitHc ;
10919: CALL_OW 19
// if not f then
10923: LD_VAR 0 12
10927: NOT
10928: IFFALSE 11017
// begin PrepareHuman ( false , i , skill ) ;
10930: LD_INT 0
10932: PPUSH
10933: LD_VAR 0 8
10937: PPUSH
10938: LD_VAR 0 4
10942: PPUSH
10943: CALL_OW 380
// un := CreateHuman ;
10947: LD_ADDR_VAR 0 14
10951: PUSH
10952: CALL_OW 44
10956: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10957: LD_ADDR_VAR 0 7
10961: PUSH
10962: LD_VAR 0 7
10966: PPUSH
10967: LD_INT 1
10969: PPUSH
10970: LD_VAR 0 14
10974: PPUSH
10975: CALL_OW 2
10979: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10980: LD_VAR 0 14
10984: PPUSH
10985: LD_VAR 0 1
10989: PPUSH
10990: CALL_OW 250
10994: PPUSH
10995: LD_VAR 0 1
10999: PPUSH
11000: CALL_OW 251
11004: PPUSH
11005: LD_INT 10
11007: PPUSH
11008: LD_INT 0
11010: PPUSH
11011: CALL_OW 50
// continue ;
11015: GO 10916
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11017: LD_VAR 0 12
11021: PUSH
11022: LD_INT 1
11024: ARRAY
11025: PPUSH
11026: CALL_OW 313
11030: PUSH
11031: LD_VAR 0 12
11035: PUSH
11036: LD_INT 1
11038: ARRAY
11039: PPUSH
11040: CALL_OW 266
11044: PUSH
11045: LD_INT 32
11047: PUSH
11048: LD_INT 31
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: IN
11055: AND
11056: PUSH
11057: LD_VAR 0 12
11061: PUSH
11062: LD_INT 1
11064: ARRAY
11065: PPUSH
11066: CALL_OW 313
11070: PUSH
11071: LD_INT 6
11073: EQUAL
11074: OR
11075: IFFALSE 11095
// f := Delete ( f , 1 ) ;
11077: LD_ADDR_VAR 0 12
11081: PUSH
11082: LD_VAR 0 12
11086: PPUSH
11087: LD_INT 1
11089: PPUSH
11090: CALL_OW 3
11094: ST_TO_ADDR
// if not f then
11095: LD_VAR 0 12
11099: NOT
11100: IFFALSE 11118
// begin x := x + 2 ;
11102: LD_ADDR_VAR 0 13
11106: PUSH
11107: LD_VAR 0 13
11111: PUSH
11112: LD_INT 2
11114: PLUS
11115: ST_TO_ADDR
// continue ;
11116: GO 10916
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11118: LD_VAR 0 12
11122: PUSH
11123: LD_INT 1
11125: ARRAY
11126: PPUSH
11127: CALL_OW 266
11131: PUSH
11132: LD_INT 5
11134: EQUAL
11135: IFFALSE 11209
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11137: LD_VAR 0 12
11141: PUSH
11142: LD_INT 1
11144: ARRAY
11145: PPUSH
11146: CALL_OW 313
11150: PUSH
11151: LD_INT 3
11153: LESS
11154: IFFALSE 11190
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11156: LD_INT 0
11158: PPUSH
11159: LD_INT 5
11161: PUSH
11162: LD_INT 8
11164: PUSH
11165: LD_INT 9
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: LIST
11172: PUSH
11173: LD_VAR 0 17
11177: ARRAY
11178: PPUSH
11179: LD_VAR 0 4
11183: PPUSH
11184: CALL_OW 380
11188: GO 11207
// PrepareHuman ( false , i , skill ) ;
11190: LD_INT 0
11192: PPUSH
11193: LD_VAR 0 8
11197: PPUSH
11198: LD_VAR 0 4
11202: PPUSH
11203: CALL_OW 380
// end else
11207: GO 11226
// PrepareHuman ( false , i , skill ) ;
11209: LD_INT 0
11211: PPUSH
11212: LD_VAR 0 8
11216: PPUSH
11217: LD_VAR 0 4
11221: PPUSH
11222: CALL_OW 380
// un := CreateHuman ;
11226: LD_ADDR_VAR 0 14
11230: PUSH
11231: CALL_OW 44
11235: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11236: LD_ADDR_VAR 0 7
11240: PUSH
11241: LD_VAR 0 7
11245: PPUSH
11246: LD_INT 1
11248: PPUSH
11249: LD_VAR 0 14
11253: PPUSH
11254: CALL_OW 2
11258: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11259: LD_VAR 0 14
11263: PPUSH
11264: LD_VAR 0 12
11268: PUSH
11269: LD_INT 1
11271: ARRAY
11272: PPUSH
11273: CALL_OW 52
// end ;
11277: GO 10916
11279: POP
11280: POP
// end ;
11281: GO 10218
11283: POP
11284: POP
// result := result ^ buildings ;
11285: LD_ADDR_VAR 0 7
11289: PUSH
11290: LD_VAR 0 7
11294: PUSH
11295: LD_VAR 0 18
11299: ADD
11300: ST_TO_ADDR
// end else
11301: GO 11444
// begin for i = 1 to personel do
11303: LD_ADDR_VAR 0 8
11307: PUSH
11308: DOUBLE
11309: LD_INT 1
11311: DEC
11312: ST_TO_ADDR
11313: LD_VAR 0 6
11317: PUSH
11318: FOR_TO
11319: IFFALSE 11442
// begin if i > 4 then
11321: LD_VAR 0 8
11325: PUSH
11326: LD_INT 4
11328: GREATER
11329: IFFALSE 11333
// break ;
11331: GO 11442
// x := personel [ i ] ;
11333: LD_ADDR_VAR 0 13
11337: PUSH
11338: LD_VAR 0 6
11342: PUSH
11343: LD_VAR 0 8
11347: ARRAY
11348: ST_TO_ADDR
// if x = - 1 then
11349: LD_VAR 0 13
11353: PUSH
11354: LD_INT 1
11356: NEG
11357: EQUAL
11358: IFFALSE 11362
// continue ;
11360: GO 11318
// PrepareHuman ( false , i , skill ) ;
11362: LD_INT 0
11364: PPUSH
11365: LD_VAR 0 8
11369: PPUSH
11370: LD_VAR 0 4
11374: PPUSH
11375: CALL_OW 380
// un := CreateHuman ;
11379: LD_ADDR_VAR 0 14
11383: PUSH
11384: CALL_OW 44
11388: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11389: LD_VAR 0 14
11393: PPUSH
11394: LD_VAR 0 1
11398: PPUSH
11399: CALL_OW 250
11403: PPUSH
11404: LD_VAR 0 1
11408: PPUSH
11409: CALL_OW 251
11413: PPUSH
11414: LD_INT 10
11416: PPUSH
11417: LD_INT 0
11419: PPUSH
11420: CALL_OW 50
// result := result ^ un ;
11424: LD_ADDR_VAR 0 7
11428: PUSH
11429: LD_VAR 0 7
11433: PUSH
11434: LD_VAR 0 14
11438: ADD
11439: ST_TO_ADDR
// end ;
11440: GO 11318
11442: POP
11443: POP
// end ; end ;
11444: LD_VAR 0 7
11448: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11449: LD_INT 0
11451: PPUSH
11452: PPUSH
11453: PPUSH
11454: PPUSH
11455: PPUSH
11456: PPUSH
11457: PPUSH
11458: PPUSH
11459: PPUSH
11460: PPUSH
11461: PPUSH
11462: PPUSH
11463: PPUSH
11464: PPUSH
11465: PPUSH
11466: PPUSH
// result := false ;
11467: LD_ADDR_VAR 0 3
11471: PUSH
11472: LD_INT 0
11474: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11475: LD_VAR 0 1
11479: NOT
11480: PUSH
11481: LD_VAR 0 1
11485: PPUSH
11486: CALL_OW 266
11490: PUSH
11491: LD_INT 32
11493: PUSH
11494: LD_INT 33
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: IN
11501: NOT
11502: OR
11503: IFFALSE 11507
// exit ;
11505: GO 12616
// nat := GetNation ( tower ) ;
11507: LD_ADDR_VAR 0 12
11511: PUSH
11512: LD_VAR 0 1
11516: PPUSH
11517: CALL_OW 248
11521: ST_TO_ADDR
// side := GetSide ( tower ) ;
11522: LD_ADDR_VAR 0 16
11526: PUSH
11527: LD_VAR 0 1
11531: PPUSH
11532: CALL_OW 255
11536: ST_TO_ADDR
// x := GetX ( tower ) ;
11537: LD_ADDR_VAR 0 10
11541: PUSH
11542: LD_VAR 0 1
11546: PPUSH
11547: CALL_OW 250
11551: ST_TO_ADDR
// y := GetY ( tower ) ;
11552: LD_ADDR_VAR 0 11
11556: PUSH
11557: LD_VAR 0 1
11561: PPUSH
11562: CALL_OW 251
11566: ST_TO_ADDR
// if not x or not y then
11567: LD_VAR 0 10
11571: NOT
11572: PUSH
11573: LD_VAR 0 11
11577: NOT
11578: OR
11579: IFFALSE 11583
// exit ;
11581: GO 12616
// weapon := 0 ;
11583: LD_ADDR_VAR 0 18
11587: PUSH
11588: LD_INT 0
11590: ST_TO_ADDR
// fac_list := [ ] ;
11591: LD_ADDR_VAR 0 17
11595: PUSH
11596: EMPTY
11597: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11598: LD_ADDR_VAR 0 6
11602: PUSH
11603: LD_VAR 0 1
11607: PPUSH
11608: CALL_OW 274
11612: PPUSH
11613: LD_VAR 0 2
11617: PPUSH
11618: LD_INT 0
11620: PPUSH
11621: CALL 9187 0 3
11625: PPUSH
11626: LD_INT 30
11628: PUSH
11629: LD_INT 3
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PPUSH
11636: CALL_OW 72
11640: ST_TO_ADDR
// if not factories then
11641: LD_VAR 0 6
11645: NOT
11646: IFFALSE 11650
// exit ;
11648: GO 12616
// for i in factories do
11650: LD_ADDR_VAR 0 8
11654: PUSH
11655: LD_VAR 0 6
11659: PUSH
11660: FOR_IN
11661: IFFALSE 11686
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11663: LD_ADDR_VAR 0 17
11667: PUSH
11668: LD_VAR 0 17
11672: PUSH
11673: LD_VAR 0 8
11677: PPUSH
11678: CALL_OW 478
11682: UNION
11683: ST_TO_ADDR
11684: GO 11660
11686: POP
11687: POP
// if not fac_list then
11688: LD_VAR 0 17
11692: NOT
11693: IFFALSE 11697
// exit ;
11695: GO 12616
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11697: LD_ADDR_VAR 0 5
11701: PUSH
11702: LD_INT 4
11704: PUSH
11705: LD_INT 5
11707: PUSH
11708: LD_INT 9
11710: PUSH
11711: LD_INT 10
11713: PUSH
11714: LD_INT 6
11716: PUSH
11717: LD_INT 7
11719: PUSH
11720: LD_INT 11
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: PUSH
11732: LD_INT 27
11734: PUSH
11735: LD_INT 28
11737: PUSH
11738: LD_INT 26
11740: PUSH
11741: LD_INT 30
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: PUSH
11750: LD_INT 43
11752: PUSH
11753: LD_INT 44
11755: PUSH
11756: LD_INT 46
11758: PUSH
11759: LD_INT 45
11761: PUSH
11762: LD_INT 47
11764: PUSH
11765: LD_INT 49
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: LIST
11780: PUSH
11781: LD_VAR 0 12
11785: ARRAY
11786: ST_TO_ADDR
// list := list isect fac_list ;
11787: LD_ADDR_VAR 0 5
11791: PUSH
11792: LD_VAR 0 5
11796: PUSH
11797: LD_VAR 0 17
11801: ISECT
11802: ST_TO_ADDR
// if not list then
11803: LD_VAR 0 5
11807: NOT
11808: IFFALSE 11812
// exit ;
11810: GO 12616
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11812: LD_VAR 0 12
11816: PUSH
11817: LD_INT 3
11819: EQUAL
11820: PUSH
11821: LD_INT 49
11823: PUSH
11824: LD_VAR 0 5
11828: IN
11829: AND
11830: PUSH
11831: LD_INT 31
11833: PPUSH
11834: LD_VAR 0 16
11838: PPUSH
11839: CALL_OW 321
11843: PUSH
11844: LD_INT 2
11846: EQUAL
11847: AND
11848: IFFALSE 11908
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11850: LD_INT 22
11852: PUSH
11853: LD_VAR 0 16
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 35
11864: PUSH
11865: LD_INT 49
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: LD_INT 91
11874: PUSH
11875: LD_VAR 0 1
11879: PUSH
11880: LD_INT 10
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: LIST
11892: PPUSH
11893: CALL_OW 69
11897: NOT
11898: IFFALSE 11908
// weapon := ru_time_lapser ;
11900: LD_ADDR_VAR 0 18
11904: PUSH
11905: LD_INT 49
11907: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11908: LD_VAR 0 12
11912: PUSH
11913: LD_INT 1
11915: PUSH
11916: LD_INT 2
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: IN
11923: PUSH
11924: LD_INT 11
11926: PUSH
11927: LD_VAR 0 5
11931: IN
11932: PUSH
11933: LD_INT 30
11935: PUSH
11936: LD_VAR 0 5
11940: IN
11941: OR
11942: AND
11943: PUSH
11944: LD_INT 6
11946: PPUSH
11947: LD_VAR 0 16
11951: PPUSH
11952: CALL_OW 321
11956: PUSH
11957: LD_INT 2
11959: EQUAL
11960: AND
11961: IFFALSE 12126
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11963: LD_INT 22
11965: PUSH
11966: LD_VAR 0 16
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 2
11977: PUSH
11978: LD_INT 35
11980: PUSH
11981: LD_INT 11
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 35
11990: PUSH
11991: LD_INT 30
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 91
12005: PUSH
12006: LD_VAR 0 1
12010: PUSH
12011: LD_INT 18
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 69
12028: NOT
12029: PUSH
12030: LD_INT 22
12032: PUSH
12033: LD_VAR 0 16
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 2
12044: PUSH
12045: LD_INT 30
12047: PUSH
12048: LD_INT 32
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: PUSH
12055: LD_INT 30
12057: PUSH
12058: LD_INT 33
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: LIST
12069: PUSH
12070: LD_INT 91
12072: PUSH
12073: LD_VAR 0 1
12077: PUSH
12078: LD_INT 12
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: LIST
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: PPUSH
12094: CALL_OW 69
12098: PUSH
12099: LD_INT 2
12101: GREATER
12102: AND
12103: IFFALSE 12126
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12105: LD_ADDR_VAR 0 18
12109: PUSH
12110: LD_INT 11
12112: PUSH
12113: LD_INT 30
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: LD_VAR 0 12
12124: ARRAY
12125: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12126: LD_VAR 0 18
12130: NOT
12131: PUSH
12132: LD_INT 40
12134: PPUSH
12135: LD_VAR 0 16
12139: PPUSH
12140: CALL_OW 321
12144: PUSH
12145: LD_INT 2
12147: EQUAL
12148: AND
12149: PUSH
12150: LD_INT 7
12152: PUSH
12153: LD_VAR 0 5
12157: IN
12158: PUSH
12159: LD_INT 28
12161: PUSH
12162: LD_VAR 0 5
12166: IN
12167: OR
12168: PUSH
12169: LD_INT 45
12171: PUSH
12172: LD_VAR 0 5
12176: IN
12177: OR
12178: AND
12179: IFFALSE 12433
// begin hex := GetHexInfo ( x , y ) ;
12181: LD_ADDR_VAR 0 4
12185: PUSH
12186: LD_VAR 0 10
12190: PPUSH
12191: LD_VAR 0 11
12195: PPUSH
12196: CALL_OW 546
12200: ST_TO_ADDR
// if hex [ 1 ] then
12201: LD_VAR 0 4
12205: PUSH
12206: LD_INT 1
12208: ARRAY
12209: IFFALSE 12213
// exit ;
12211: GO 12616
// height := hex [ 2 ] ;
12213: LD_ADDR_VAR 0 15
12217: PUSH
12218: LD_VAR 0 4
12222: PUSH
12223: LD_INT 2
12225: ARRAY
12226: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12227: LD_ADDR_VAR 0 14
12231: PUSH
12232: LD_INT 0
12234: PUSH
12235: LD_INT 2
12237: PUSH
12238: LD_INT 3
12240: PUSH
12241: LD_INT 5
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: ST_TO_ADDR
// for i in tmp do
12250: LD_ADDR_VAR 0 8
12254: PUSH
12255: LD_VAR 0 14
12259: PUSH
12260: FOR_IN
12261: IFFALSE 12431
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12263: LD_ADDR_VAR 0 9
12267: PUSH
12268: LD_VAR 0 10
12272: PPUSH
12273: LD_VAR 0 8
12277: PPUSH
12278: LD_INT 5
12280: PPUSH
12281: CALL_OW 272
12285: PUSH
12286: LD_VAR 0 11
12290: PPUSH
12291: LD_VAR 0 8
12295: PPUSH
12296: LD_INT 5
12298: PPUSH
12299: CALL_OW 273
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12308: LD_VAR 0 9
12312: PUSH
12313: LD_INT 1
12315: ARRAY
12316: PPUSH
12317: LD_VAR 0 9
12321: PUSH
12322: LD_INT 2
12324: ARRAY
12325: PPUSH
12326: CALL_OW 488
12330: IFFALSE 12429
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12332: LD_ADDR_VAR 0 4
12336: PUSH
12337: LD_VAR 0 9
12341: PUSH
12342: LD_INT 1
12344: ARRAY
12345: PPUSH
12346: LD_VAR 0 9
12350: PUSH
12351: LD_INT 2
12353: ARRAY
12354: PPUSH
12355: CALL_OW 546
12359: ST_TO_ADDR
// if hex [ 1 ] then
12360: LD_VAR 0 4
12364: PUSH
12365: LD_INT 1
12367: ARRAY
12368: IFFALSE 12372
// continue ;
12370: GO 12260
// h := hex [ 2 ] ;
12372: LD_ADDR_VAR 0 13
12376: PUSH
12377: LD_VAR 0 4
12381: PUSH
12382: LD_INT 2
12384: ARRAY
12385: ST_TO_ADDR
// if h + 7 < height then
12386: LD_VAR 0 13
12390: PUSH
12391: LD_INT 7
12393: PLUS
12394: PUSH
12395: LD_VAR 0 15
12399: LESS
12400: IFFALSE 12429
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12402: LD_ADDR_VAR 0 18
12406: PUSH
12407: LD_INT 7
12409: PUSH
12410: LD_INT 28
12412: PUSH
12413: LD_INT 45
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: LIST
12420: PUSH
12421: LD_VAR 0 12
12425: ARRAY
12426: ST_TO_ADDR
// break ;
12427: GO 12431
// end ; end ; end ;
12429: GO 12260
12431: POP
12432: POP
// end ; if not weapon then
12433: LD_VAR 0 18
12437: NOT
12438: IFFALSE 12498
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12440: LD_ADDR_VAR 0 5
12444: PUSH
12445: LD_VAR 0 5
12449: PUSH
12450: LD_INT 11
12452: PUSH
12453: LD_INT 30
12455: PUSH
12456: LD_INT 49
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: LIST
12463: DIFF
12464: ST_TO_ADDR
// if not list then
12465: LD_VAR 0 5
12469: NOT
12470: IFFALSE 12474
// exit ;
12472: GO 12616
// weapon := list [ rand ( 1 , list ) ] ;
12474: LD_ADDR_VAR 0 18
12478: PUSH
12479: LD_VAR 0 5
12483: PUSH
12484: LD_INT 1
12486: PPUSH
12487: LD_VAR 0 5
12491: PPUSH
12492: CALL_OW 12
12496: ARRAY
12497: ST_TO_ADDR
// end ; if weapon then
12498: LD_VAR 0 18
12502: IFFALSE 12616
// begin tmp := CostOfWeapon ( weapon ) ;
12504: LD_ADDR_VAR 0 14
12508: PUSH
12509: LD_VAR 0 18
12513: PPUSH
12514: CALL_OW 451
12518: ST_TO_ADDR
// j := GetBase ( tower ) ;
12519: LD_ADDR_VAR 0 9
12523: PUSH
12524: LD_VAR 0 1
12528: PPUSH
12529: CALL_OW 274
12533: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12534: LD_VAR 0 9
12538: PPUSH
12539: LD_INT 1
12541: PPUSH
12542: CALL_OW 275
12546: PUSH
12547: LD_VAR 0 14
12551: PUSH
12552: LD_INT 1
12554: ARRAY
12555: GREATEREQUAL
12556: PUSH
12557: LD_VAR 0 9
12561: PPUSH
12562: LD_INT 2
12564: PPUSH
12565: CALL_OW 275
12569: PUSH
12570: LD_VAR 0 14
12574: PUSH
12575: LD_INT 2
12577: ARRAY
12578: GREATEREQUAL
12579: AND
12580: PUSH
12581: LD_VAR 0 9
12585: PPUSH
12586: LD_INT 3
12588: PPUSH
12589: CALL_OW 275
12593: PUSH
12594: LD_VAR 0 14
12598: PUSH
12599: LD_INT 3
12601: ARRAY
12602: GREATEREQUAL
12603: AND
12604: IFFALSE 12616
// result := weapon ;
12606: LD_ADDR_VAR 0 3
12610: PUSH
12611: LD_VAR 0 18
12615: ST_TO_ADDR
// end ; end ;
12616: LD_VAR 0 3
12620: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12621: LD_INT 0
12623: PPUSH
12624: PPUSH
// result := true ;
12625: LD_ADDR_VAR 0 3
12629: PUSH
12630: LD_INT 1
12632: ST_TO_ADDR
// if array1 = array2 then
12633: LD_VAR 0 1
12637: PUSH
12638: LD_VAR 0 2
12642: EQUAL
12643: IFFALSE 12703
// begin for i = 1 to array1 do
12645: LD_ADDR_VAR 0 4
12649: PUSH
12650: DOUBLE
12651: LD_INT 1
12653: DEC
12654: ST_TO_ADDR
12655: LD_VAR 0 1
12659: PUSH
12660: FOR_TO
12661: IFFALSE 12699
// if array1 [ i ] <> array2 [ i ] then
12663: LD_VAR 0 1
12667: PUSH
12668: LD_VAR 0 4
12672: ARRAY
12673: PUSH
12674: LD_VAR 0 2
12678: PUSH
12679: LD_VAR 0 4
12683: ARRAY
12684: NONEQUAL
12685: IFFALSE 12697
// begin result := false ;
12687: LD_ADDR_VAR 0 3
12691: PUSH
12692: LD_INT 0
12694: ST_TO_ADDR
// break ;
12695: GO 12699
// end ;
12697: GO 12660
12699: POP
12700: POP
// end else
12701: GO 12711
// result := false ;
12703: LD_ADDR_VAR 0 3
12707: PUSH
12708: LD_INT 0
12710: ST_TO_ADDR
// end ;
12711: LD_VAR 0 3
12715: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12716: LD_INT 0
12718: PPUSH
12719: PPUSH
// if not array1 or not array2 then
12720: LD_VAR 0 1
12724: NOT
12725: PUSH
12726: LD_VAR 0 2
12730: NOT
12731: OR
12732: IFFALSE 12736
// exit ;
12734: GO 12800
// result := true ;
12736: LD_ADDR_VAR 0 3
12740: PUSH
12741: LD_INT 1
12743: ST_TO_ADDR
// for i = 1 to array1 do
12744: LD_ADDR_VAR 0 4
12748: PUSH
12749: DOUBLE
12750: LD_INT 1
12752: DEC
12753: ST_TO_ADDR
12754: LD_VAR 0 1
12758: PUSH
12759: FOR_TO
12760: IFFALSE 12798
// if array1 [ i ] <> array2 [ i ] then
12762: LD_VAR 0 1
12766: PUSH
12767: LD_VAR 0 4
12771: ARRAY
12772: PUSH
12773: LD_VAR 0 2
12777: PUSH
12778: LD_VAR 0 4
12782: ARRAY
12783: NONEQUAL
12784: IFFALSE 12796
// begin result := false ;
12786: LD_ADDR_VAR 0 3
12790: PUSH
12791: LD_INT 0
12793: ST_TO_ADDR
// break ;
12794: GO 12798
// end ;
12796: GO 12759
12798: POP
12799: POP
// end ;
12800: LD_VAR 0 3
12804: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12805: LD_INT 0
12807: PPUSH
12808: PPUSH
12809: PPUSH
// pom := GetBase ( fac ) ;
12810: LD_ADDR_VAR 0 5
12814: PUSH
12815: LD_VAR 0 1
12819: PPUSH
12820: CALL_OW 274
12824: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12825: LD_ADDR_VAR 0 4
12829: PUSH
12830: LD_VAR 0 2
12834: PUSH
12835: LD_INT 1
12837: ARRAY
12838: PPUSH
12839: LD_VAR 0 2
12843: PUSH
12844: LD_INT 2
12846: ARRAY
12847: PPUSH
12848: LD_VAR 0 2
12852: PUSH
12853: LD_INT 3
12855: ARRAY
12856: PPUSH
12857: LD_VAR 0 2
12861: PUSH
12862: LD_INT 4
12864: ARRAY
12865: PPUSH
12866: CALL_OW 449
12870: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12871: LD_ADDR_VAR 0 3
12875: PUSH
12876: LD_VAR 0 5
12880: PPUSH
12881: LD_INT 1
12883: PPUSH
12884: CALL_OW 275
12888: PUSH
12889: LD_VAR 0 4
12893: PUSH
12894: LD_INT 1
12896: ARRAY
12897: GREATEREQUAL
12898: PUSH
12899: LD_VAR 0 5
12903: PPUSH
12904: LD_INT 2
12906: PPUSH
12907: CALL_OW 275
12911: PUSH
12912: LD_VAR 0 4
12916: PUSH
12917: LD_INT 2
12919: ARRAY
12920: GREATEREQUAL
12921: AND
12922: PUSH
12923: LD_VAR 0 5
12927: PPUSH
12928: LD_INT 3
12930: PPUSH
12931: CALL_OW 275
12935: PUSH
12936: LD_VAR 0 4
12940: PUSH
12941: LD_INT 3
12943: ARRAY
12944: GREATEREQUAL
12945: AND
12946: ST_TO_ADDR
// end ;
12947: LD_VAR 0 3
12951: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12952: LD_INT 0
12954: PPUSH
12955: PPUSH
12956: PPUSH
12957: PPUSH
// pom := GetBase ( building ) ;
12958: LD_ADDR_VAR 0 3
12962: PUSH
12963: LD_VAR 0 1
12967: PPUSH
12968: CALL_OW 274
12972: ST_TO_ADDR
// if not pom then
12973: LD_VAR 0 3
12977: NOT
12978: IFFALSE 12982
// exit ;
12980: GO 13152
// btype := GetBType ( building ) ;
12982: LD_ADDR_VAR 0 5
12986: PUSH
12987: LD_VAR 0 1
12991: PPUSH
12992: CALL_OW 266
12996: ST_TO_ADDR
// if btype = b_armoury then
12997: LD_VAR 0 5
13001: PUSH
13002: LD_INT 4
13004: EQUAL
13005: IFFALSE 13015
// btype := b_barracks ;
13007: LD_ADDR_VAR 0 5
13011: PUSH
13012: LD_INT 5
13014: ST_TO_ADDR
// if btype = b_depot then
13015: LD_VAR 0 5
13019: PUSH
13020: LD_INT 0
13022: EQUAL
13023: IFFALSE 13033
// btype := b_warehouse ;
13025: LD_ADDR_VAR 0 5
13029: PUSH
13030: LD_INT 1
13032: ST_TO_ADDR
// if btype = b_workshop then
13033: LD_VAR 0 5
13037: PUSH
13038: LD_INT 2
13040: EQUAL
13041: IFFALSE 13051
// btype := b_factory ;
13043: LD_ADDR_VAR 0 5
13047: PUSH
13048: LD_INT 3
13050: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13051: LD_ADDR_VAR 0 4
13055: PUSH
13056: LD_VAR 0 5
13060: PPUSH
13061: LD_VAR 0 1
13065: PPUSH
13066: CALL_OW 248
13070: PPUSH
13071: CALL_OW 450
13075: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13076: LD_ADDR_VAR 0 2
13080: PUSH
13081: LD_VAR 0 3
13085: PPUSH
13086: LD_INT 1
13088: PPUSH
13089: CALL_OW 275
13093: PUSH
13094: LD_VAR 0 4
13098: PUSH
13099: LD_INT 1
13101: ARRAY
13102: GREATEREQUAL
13103: PUSH
13104: LD_VAR 0 3
13108: PPUSH
13109: LD_INT 2
13111: PPUSH
13112: CALL_OW 275
13116: PUSH
13117: LD_VAR 0 4
13121: PUSH
13122: LD_INT 2
13124: ARRAY
13125: GREATEREQUAL
13126: AND
13127: PUSH
13128: LD_VAR 0 3
13132: PPUSH
13133: LD_INT 3
13135: PPUSH
13136: CALL_OW 275
13140: PUSH
13141: LD_VAR 0 4
13145: PUSH
13146: LD_INT 3
13148: ARRAY
13149: GREATEREQUAL
13150: AND
13151: ST_TO_ADDR
// end ;
13152: LD_VAR 0 2
13156: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13157: LD_INT 0
13159: PPUSH
13160: PPUSH
13161: PPUSH
// pom := GetBase ( building ) ;
13162: LD_ADDR_VAR 0 4
13166: PUSH
13167: LD_VAR 0 1
13171: PPUSH
13172: CALL_OW 274
13176: ST_TO_ADDR
// if not pom then
13177: LD_VAR 0 4
13181: NOT
13182: IFFALSE 13186
// exit ;
13184: GO 13287
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13186: LD_ADDR_VAR 0 5
13190: PUSH
13191: LD_VAR 0 2
13195: PPUSH
13196: LD_VAR 0 1
13200: PPUSH
13201: CALL_OW 248
13205: PPUSH
13206: CALL_OW 450
13210: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13211: LD_ADDR_VAR 0 3
13215: PUSH
13216: LD_VAR 0 4
13220: PPUSH
13221: LD_INT 1
13223: PPUSH
13224: CALL_OW 275
13228: PUSH
13229: LD_VAR 0 5
13233: PUSH
13234: LD_INT 1
13236: ARRAY
13237: GREATEREQUAL
13238: PUSH
13239: LD_VAR 0 4
13243: PPUSH
13244: LD_INT 2
13246: PPUSH
13247: CALL_OW 275
13251: PUSH
13252: LD_VAR 0 5
13256: PUSH
13257: LD_INT 2
13259: ARRAY
13260: GREATEREQUAL
13261: AND
13262: PUSH
13263: LD_VAR 0 4
13267: PPUSH
13268: LD_INT 3
13270: PPUSH
13271: CALL_OW 275
13275: PUSH
13276: LD_VAR 0 5
13280: PUSH
13281: LD_INT 3
13283: ARRAY
13284: GREATEREQUAL
13285: AND
13286: ST_TO_ADDR
// end ;
13287: LD_VAR 0 3
13291: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13292: LD_INT 0
13294: PPUSH
13295: PPUSH
13296: PPUSH
13297: PPUSH
13298: PPUSH
13299: PPUSH
13300: PPUSH
13301: PPUSH
13302: PPUSH
13303: PPUSH
13304: PPUSH
// result := false ;
13305: LD_ADDR_VAR 0 8
13309: PUSH
13310: LD_INT 0
13312: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13313: LD_VAR 0 5
13317: NOT
13318: PUSH
13319: LD_VAR 0 1
13323: NOT
13324: OR
13325: PUSH
13326: LD_VAR 0 2
13330: NOT
13331: OR
13332: PUSH
13333: LD_VAR 0 3
13337: NOT
13338: OR
13339: IFFALSE 13343
// exit ;
13341: GO 14157
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13343: LD_ADDR_VAR 0 14
13347: PUSH
13348: LD_VAR 0 1
13352: PPUSH
13353: LD_VAR 0 2
13357: PPUSH
13358: LD_VAR 0 3
13362: PPUSH
13363: LD_VAR 0 4
13367: PPUSH
13368: LD_VAR 0 5
13372: PUSH
13373: LD_INT 1
13375: ARRAY
13376: PPUSH
13377: CALL_OW 248
13381: PPUSH
13382: LD_INT 0
13384: PPUSH
13385: CALL 15394 0 6
13389: ST_TO_ADDR
// if not hexes then
13390: LD_VAR 0 14
13394: NOT
13395: IFFALSE 13399
// exit ;
13397: GO 14157
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13399: LD_ADDR_VAR 0 17
13403: PUSH
13404: LD_VAR 0 5
13408: PPUSH
13409: LD_INT 22
13411: PUSH
13412: LD_VAR 0 13
13416: PPUSH
13417: CALL_OW 255
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: LD_INT 2
13428: PUSH
13429: LD_INT 30
13431: PUSH
13432: LD_INT 0
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 30
13441: PUSH
13442: LD_INT 1
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: LIST
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PPUSH
13458: CALL_OW 72
13462: ST_TO_ADDR
// for i = 1 to hexes do
13463: LD_ADDR_VAR 0 9
13467: PUSH
13468: DOUBLE
13469: LD_INT 1
13471: DEC
13472: ST_TO_ADDR
13473: LD_VAR 0 14
13477: PUSH
13478: FOR_TO
13479: IFFALSE 14155
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13481: LD_ADDR_VAR 0 13
13485: PUSH
13486: LD_VAR 0 14
13490: PUSH
13491: LD_VAR 0 9
13495: ARRAY
13496: PUSH
13497: LD_INT 1
13499: ARRAY
13500: PPUSH
13501: LD_VAR 0 14
13505: PUSH
13506: LD_VAR 0 9
13510: ARRAY
13511: PUSH
13512: LD_INT 2
13514: ARRAY
13515: PPUSH
13516: CALL_OW 428
13520: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13521: LD_VAR 0 14
13525: PUSH
13526: LD_VAR 0 9
13530: ARRAY
13531: PUSH
13532: LD_INT 1
13534: ARRAY
13535: PPUSH
13536: LD_VAR 0 14
13540: PUSH
13541: LD_VAR 0 9
13545: ARRAY
13546: PUSH
13547: LD_INT 2
13549: ARRAY
13550: PPUSH
13551: CALL_OW 351
13555: PUSH
13556: LD_VAR 0 14
13560: PUSH
13561: LD_VAR 0 9
13565: ARRAY
13566: PUSH
13567: LD_INT 1
13569: ARRAY
13570: PPUSH
13571: LD_VAR 0 14
13575: PUSH
13576: LD_VAR 0 9
13580: ARRAY
13581: PUSH
13582: LD_INT 2
13584: ARRAY
13585: PPUSH
13586: CALL_OW 488
13590: NOT
13591: OR
13592: PUSH
13593: LD_VAR 0 13
13597: PPUSH
13598: CALL_OW 247
13602: PUSH
13603: LD_INT 3
13605: EQUAL
13606: OR
13607: IFFALSE 13613
// exit ;
13609: POP
13610: POP
13611: GO 14157
// if not tmp then
13613: LD_VAR 0 13
13617: NOT
13618: IFFALSE 13622
// continue ;
13620: GO 13478
// result := true ;
13622: LD_ADDR_VAR 0 8
13626: PUSH
13627: LD_INT 1
13629: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13630: LD_VAR 0 6
13634: PUSH
13635: LD_VAR 0 13
13639: PPUSH
13640: CALL_OW 247
13644: PUSH
13645: LD_INT 2
13647: EQUAL
13648: AND
13649: PUSH
13650: LD_VAR 0 13
13654: PPUSH
13655: CALL_OW 263
13659: PUSH
13660: LD_INT 1
13662: EQUAL
13663: AND
13664: IFFALSE 13828
// begin if IsDrivenBy ( tmp ) then
13666: LD_VAR 0 13
13670: PPUSH
13671: CALL_OW 311
13675: IFFALSE 13679
// continue ;
13677: GO 13478
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13679: LD_VAR 0 6
13683: PPUSH
13684: LD_INT 3
13686: PUSH
13687: LD_INT 60
13689: PUSH
13690: EMPTY
13691: LIST
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PUSH
13697: LD_INT 3
13699: PUSH
13700: LD_INT 55
13702: PUSH
13703: EMPTY
13704: LIST
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: PPUSH
13714: CALL_OW 72
13718: IFFALSE 13826
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13720: LD_ADDR_VAR 0 18
13724: PUSH
13725: LD_VAR 0 6
13729: PPUSH
13730: LD_INT 3
13732: PUSH
13733: LD_INT 60
13735: PUSH
13736: EMPTY
13737: LIST
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 3
13745: PUSH
13746: LD_INT 55
13748: PUSH
13749: EMPTY
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PPUSH
13760: CALL_OW 72
13764: PUSH
13765: LD_INT 1
13767: ARRAY
13768: ST_TO_ADDR
// if IsInUnit ( driver ) then
13769: LD_VAR 0 18
13773: PPUSH
13774: CALL_OW 310
13778: IFFALSE 13789
// ComExit ( driver ) ;
13780: LD_VAR 0 18
13784: PPUSH
13785: CALL 39099 0 1
// AddComEnterUnit ( driver , tmp ) ;
13789: LD_VAR 0 18
13793: PPUSH
13794: LD_VAR 0 13
13798: PPUSH
13799: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13803: LD_VAR 0 18
13807: PPUSH
13808: LD_VAR 0 7
13812: PPUSH
13813: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13817: LD_VAR 0 18
13821: PPUSH
13822: CALL_OW 181
// end ; continue ;
13826: GO 13478
// end ; if not cleaners or not tmp in cleaners then
13828: LD_VAR 0 6
13832: NOT
13833: PUSH
13834: LD_VAR 0 13
13838: PUSH
13839: LD_VAR 0 6
13843: IN
13844: NOT
13845: OR
13846: IFFALSE 14153
// begin if dep then
13848: LD_VAR 0 17
13852: IFFALSE 13988
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13854: LD_ADDR_VAR 0 16
13858: PUSH
13859: LD_VAR 0 17
13863: PUSH
13864: LD_INT 1
13866: ARRAY
13867: PPUSH
13868: CALL_OW 250
13872: PPUSH
13873: LD_VAR 0 17
13877: PUSH
13878: LD_INT 1
13880: ARRAY
13881: PPUSH
13882: CALL_OW 254
13886: PPUSH
13887: LD_INT 5
13889: PPUSH
13890: CALL_OW 272
13894: PUSH
13895: LD_VAR 0 17
13899: PUSH
13900: LD_INT 1
13902: ARRAY
13903: PPUSH
13904: CALL_OW 251
13908: PPUSH
13909: LD_VAR 0 17
13913: PUSH
13914: LD_INT 1
13916: ARRAY
13917: PPUSH
13918: CALL_OW 254
13922: PPUSH
13923: LD_INT 5
13925: PPUSH
13926: CALL_OW 273
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13935: LD_VAR 0 16
13939: PUSH
13940: LD_INT 1
13942: ARRAY
13943: PPUSH
13944: LD_VAR 0 16
13948: PUSH
13949: LD_INT 2
13951: ARRAY
13952: PPUSH
13953: CALL_OW 488
13957: IFFALSE 13988
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13959: LD_VAR 0 13
13963: PPUSH
13964: LD_VAR 0 16
13968: PUSH
13969: LD_INT 1
13971: ARRAY
13972: PPUSH
13973: LD_VAR 0 16
13977: PUSH
13978: LD_INT 2
13980: ARRAY
13981: PPUSH
13982: CALL_OW 111
// continue ;
13986: GO 13478
// end ; end ; r := GetDir ( tmp ) ;
13988: LD_ADDR_VAR 0 15
13992: PUSH
13993: LD_VAR 0 13
13997: PPUSH
13998: CALL_OW 254
14002: ST_TO_ADDR
// if r = 5 then
14003: LD_VAR 0 15
14007: PUSH
14008: LD_INT 5
14010: EQUAL
14011: IFFALSE 14021
// r := 0 ;
14013: LD_ADDR_VAR 0 15
14017: PUSH
14018: LD_INT 0
14020: ST_TO_ADDR
// for j = r to 5 do
14021: LD_ADDR_VAR 0 10
14025: PUSH
14026: DOUBLE
14027: LD_VAR 0 15
14031: DEC
14032: ST_TO_ADDR
14033: LD_INT 5
14035: PUSH
14036: FOR_TO
14037: IFFALSE 14151
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14039: LD_ADDR_VAR 0 11
14043: PUSH
14044: LD_VAR 0 13
14048: PPUSH
14049: CALL_OW 250
14053: PPUSH
14054: LD_VAR 0 10
14058: PPUSH
14059: LD_INT 2
14061: PPUSH
14062: CALL_OW 272
14066: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14067: LD_ADDR_VAR 0 12
14071: PUSH
14072: LD_VAR 0 13
14076: PPUSH
14077: CALL_OW 251
14081: PPUSH
14082: LD_VAR 0 10
14086: PPUSH
14087: LD_INT 2
14089: PPUSH
14090: CALL_OW 273
14094: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14095: LD_VAR 0 11
14099: PPUSH
14100: LD_VAR 0 12
14104: PPUSH
14105: CALL_OW 488
14109: PUSH
14110: LD_VAR 0 11
14114: PPUSH
14115: LD_VAR 0 12
14119: PPUSH
14120: CALL_OW 428
14124: NOT
14125: AND
14126: IFFALSE 14149
// begin ComMoveXY ( tmp , _x , _y ) ;
14128: LD_VAR 0 13
14132: PPUSH
14133: LD_VAR 0 11
14137: PPUSH
14138: LD_VAR 0 12
14142: PPUSH
14143: CALL_OW 111
// break ;
14147: GO 14151
// end ; end ;
14149: GO 14036
14151: POP
14152: POP
// end ; end ;
14153: GO 13478
14155: POP
14156: POP
// end ;
14157: LD_VAR 0 8
14161: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14162: LD_INT 0
14164: PPUSH
// result := true ;
14165: LD_ADDR_VAR 0 3
14169: PUSH
14170: LD_INT 1
14172: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14173: LD_VAR 0 2
14177: PUSH
14178: LD_INT 24
14180: DOUBLE
14181: EQUAL
14182: IFTRUE 14192
14184: LD_INT 33
14186: DOUBLE
14187: EQUAL
14188: IFTRUE 14192
14190: GO 14217
14192: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14193: LD_ADDR_VAR 0 3
14197: PUSH
14198: LD_INT 32
14200: PPUSH
14201: LD_VAR 0 1
14205: PPUSH
14206: CALL_OW 321
14210: PUSH
14211: LD_INT 2
14213: EQUAL
14214: ST_TO_ADDR
14215: GO 14537
14217: LD_INT 20
14219: DOUBLE
14220: EQUAL
14221: IFTRUE 14225
14223: GO 14250
14225: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14226: LD_ADDR_VAR 0 3
14230: PUSH
14231: LD_INT 6
14233: PPUSH
14234: LD_VAR 0 1
14238: PPUSH
14239: CALL_OW 321
14243: PUSH
14244: LD_INT 2
14246: EQUAL
14247: ST_TO_ADDR
14248: GO 14537
14250: LD_INT 22
14252: DOUBLE
14253: EQUAL
14254: IFTRUE 14264
14256: LD_INT 36
14258: DOUBLE
14259: EQUAL
14260: IFTRUE 14264
14262: GO 14289
14264: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14265: LD_ADDR_VAR 0 3
14269: PUSH
14270: LD_INT 15
14272: PPUSH
14273: LD_VAR 0 1
14277: PPUSH
14278: CALL_OW 321
14282: PUSH
14283: LD_INT 2
14285: EQUAL
14286: ST_TO_ADDR
14287: GO 14537
14289: LD_INT 30
14291: DOUBLE
14292: EQUAL
14293: IFTRUE 14297
14295: GO 14322
14297: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14298: LD_ADDR_VAR 0 3
14302: PUSH
14303: LD_INT 20
14305: PPUSH
14306: LD_VAR 0 1
14310: PPUSH
14311: CALL_OW 321
14315: PUSH
14316: LD_INT 2
14318: EQUAL
14319: ST_TO_ADDR
14320: GO 14537
14322: LD_INT 28
14324: DOUBLE
14325: EQUAL
14326: IFTRUE 14336
14328: LD_INT 21
14330: DOUBLE
14331: EQUAL
14332: IFTRUE 14336
14334: GO 14361
14336: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14337: LD_ADDR_VAR 0 3
14341: PUSH
14342: LD_INT 21
14344: PPUSH
14345: LD_VAR 0 1
14349: PPUSH
14350: CALL_OW 321
14354: PUSH
14355: LD_INT 2
14357: EQUAL
14358: ST_TO_ADDR
14359: GO 14537
14361: LD_INT 16
14363: DOUBLE
14364: EQUAL
14365: IFTRUE 14369
14367: GO 14396
14369: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14370: LD_ADDR_VAR 0 3
14374: PUSH
14375: LD_EXP 16
14379: PPUSH
14380: LD_VAR 0 1
14384: PPUSH
14385: CALL_OW 321
14389: PUSH
14390: LD_INT 2
14392: EQUAL
14393: ST_TO_ADDR
14394: GO 14537
14396: LD_INT 19
14398: DOUBLE
14399: EQUAL
14400: IFTRUE 14410
14402: LD_INT 23
14404: DOUBLE
14405: EQUAL
14406: IFTRUE 14410
14408: GO 14437
14410: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14411: LD_ADDR_VAR 0 3
14415: PUSH
14416: LD_EXP 15
14420: PPUSH
14421: LD_VAR 0 1
14425: PPUSH
14426: CALL_OW 321
14430: PUSH
14431: LD_INT 2
14433: EQUAL
14434: ST_TO_ADDR
14435: GO 14537
14437: LD_INT 17
14439: DOUBLE
14440: EQUAL
14441: IFTRUE 14445
14443: GO 14470
14445: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14446: LD_ADDR_VAR 0 3
14450: PUSH
14451: LD_INT 39
14453: PPUSH
14454: LD_VAR 0 1
14458: PPUSH
14459: CALL_OW 321
14463: PUSH
14464: LD_INT 2
14466: EQUAL
14467: ST_TO_ADDR
14468: GO 14537
14470: LD_INT 18
14472: DOUBLE
14473: EQUAL
14474: IFTRUE 14478
14476: GO 14503
14478: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14479: LD_ADDR_VAR 0 3
14483: PUSH
14484: LD_INT 40
14486: PPUSH
14487: LD_VAR 0 1
14491: PPUSH
14492: CALL_OW 321
14496: PUSH
14497: LD_INT 2
14499: EQUAL
14500: ST_TO_ADDR
14501: GO 14537
14503: LD_INT 27
14505: DOUBLE
14506: EQUAL
14507: IFTRUE 14511
14509: GO 14536
14511: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14512: LD_ADDR_VAR 0 3
14516: PUSH
14517: LD_INT 35
14519: PPUSH
14520: LD_VAR 0 1
14524: PPUSH
14525: CALL_OW 321
14529: PUSH
14530: LD_INT 2
14532: EQUAL
14533: ST_TO_ADDR
14534: GO 14537
14536: POP
// end ;
14537: LD_VAR 0 3
14541: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14542: LD_INT 0
14544: PPUSH
14545: PPUSH
14546: PPUSH
14547: PPUSH
14548: PPUSH
14549: PPUSH
14550: PPUSH
14551: PPUSH
14552: PPUSH
14553: PPUSH
14554: PPUSH
// result := false ;
14555: LD_ADDR_VAR 0 6
14559: PUSH
14560: LD_INT 0
14562: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14563: LD_VAR 0 1
14567: NOT
14568: PUSH
14569: LD_VAR 0 1
14573: PPUSH
14574: CALL_OW 266
14578: PUSH
14579: LD_INT 0
14581: PUSH
14582: LD_INT 1
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: IN
14589: NOT
14590: OR
14591: PUSH
14592: LD_VAR 0 2
14596: NOT
14597: OR
14598: PUSH
14599: LD_VAR 0 5
14603: PUSH
14604: LD_INT 0
14606: PUSH
14607: LD_INT 1
14609: PUSH
14610: LD_INT 2
14612: PUSH
14613: LD_INT 3
14615: PUSH
14616: LD_INT 4
14618: PUSH
14619: LD_INT 5
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: IN
14630: NOT
14631: OR
14632: PUSH
14633: LD_VAR 0 3
14637: PPUSH
14638: LD_VAR 0 4
14642: PPUSH
14643: CALL_OW 488
14647: NOT
14648: OR
14649: IFFALSE 14653
// exit ;
14651: GO 15389
// side := GetSide ( depot ) ;
14653: LD_ADDR_VAR 0 9
14657: PUSH
14658: LD_VAR 0 1
14662: PPUSH
14663: CALL_OW 255
14667: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14668: LD_VAR 0 9
14672: PPUSH
14673: LD_VAR 0 2
14677: PPUSH
14678: CALL 14162 0 2
14682: NOT
14683: IFFALSE 14687
// exit ;
14685: GO 15389
// pom := GetBase ( depot ) ;
14687: LD_ADDR_VAR 0 10
14691: PUSH
14692: LD_VAR 0 1
14696: PPUSH
14697: CALL_OW 274
14701: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14702: LD_ADDR_VAR 0 11
14706: PUSH
14707: LD_VAR 0 2
14711: PPUSH
14712: LD_VAR 0 1
14716: PPUSH
14717: CALL_OW 248
14721: PPUSH
14722: CALL_OW 450
14726: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14727: LD_VAR 0 10
14731: PPUSH
14732: LD_INT 1
14734: PPUSH
14735: CALL_OW 275
14739: PUSH
14740: LD_VAR 0 11
14744: PUSH
14745: LD_INT 1
14747: ARRAY
14748: GREATEREQUAL
14749: PUSH
14750: LD_VAR 0 10
14754: PPUSH
14755: LD_INT 2
14757: PPUSH
14758: CALL_OW 275
14762: PUSH
14763: LD_VAR 0 11
14767: PUSH
14768: LD_INT 2
14770: ARRAY
14771: GREATEREQUAL
14772: AND
14773: PUSH
14774: LD_VAR 0 10
14778: PPUSH
14779: LD_INT 3
14781: PPUSH
14782: CALL_OW 275
14786: PUSH
14787: LD_VAR 0 11
14791: PUSH
14792: LD_INT 3
14794: ARRAY
14795: GREATEREQUAL
14796: AND
14797: NOT
14798: IFFALSE 14802
// exit ;
14800: GO 15389
// if GetBType ( depot ) = b_depot then
14802: LD_VAR 0 1
14806: PPUSH
14807: CALL_OW 266
14811: PUSH
14812: LD_INT 0
14814: EQUAL
14815: IFFALSE 14827
// dist := 28 else
14817: LD_ADDR_VAR 0 14
14821: PUSH
14822: LD_INT 28
14824: ST_TO_ADDR
14825: GO 14835
// dist := 36 ;
14827: LD_ADDR_VAR 0 14
14831: PUSH
14832: LD_INT 36
14834: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14835: LD_VAR 0 1
14839: PPUSH
14840: LD_VAR 0 3
14844: PPUSH
14845: LD_VAR 0 4
14849: PPUSH
14850: CALL_OW 297
14854: PUSH
14855: LD_VAR 0 14
14859: GREATER
14860: IFFALSE 14864
// exit ;
14862: GO 15389
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14864: LD_ADDR_VAR 0 12
14868: PUSH
14869: LD_VAR 0 2
14873: PPUSH
14874: LD_VAR 0 3
14878: PPUSH
14879: LD_VAR 0 4
14883: PPUSH
14884: LD_VAR 0 5
14888: PPUSH
14889: LD_VAR 0 1
14893: PPUSH
14894: CALL_OW 248
14898: PPUSH
14899: LD_INT 0
14901: PPUSH
14902: CALL 15394 0 6
14906: ST_TO_ADDR
// if not hexes then
14907: LD_VAR 0 12
14911: NOT
14912: IFFALSE 14916
// exit ;
14914: GO 15389
// hex := GetHexInfo ( x , y ) ;
14916: LD_ADDR_VAR 0 15
14920: PUSH
14921: LD_VAR 0 3
14925: PPUSH
14926: LD_VAR 0 4
14930: PPUSH
14931: CALL_OW 546
14935: ST_TO_ADDR
// if hex [ 1 ] then
14936: LD_VAR 0 15
14940: PUSH
14941: LD_INT 1
14943: ARRAY
14944: IFFALSE 14948
// exit ;
14946: GO 15389
// height := hex [ 2 ] ;
14948: LD_ADDR_VAR 0 13
14952: PUSH
14953: LD_VAR 0 15
14957: PUSH
14958: LD_INT 2
14960: ARRAY
14961: ST_TO_ADDR
// for i = 1 to hexes do
14962: LD_ADDR_VAR 0 7
14966: PUSH
14967: DOUBLE
14968: LD_INT 1
14970: DEC
14971: ST_TO_ADDR
14972: LD_VAR 0 12
14976: PUSH
14977: FOR_TO
14978: IFFALSE 15308
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14980: LD_VAR 0 12
14984: PUSH
14985: LD_VAR 0 7
14989: ARRAY
14990: PUSH
14991: LD_INT 1
14993: ARRAY
14994: PPUSH
14995: LD_VAR 0 12
14999: PUSH
15000: LD_VAR 0 7
15004: ARRAY
15005: PUSH
15006: LD_INT 2
15008: ARRAY
15009: PPUSH
15010: CALL_OW 488
15014: NOT
15015: PUSH
15016: LD_VAR 0 12
15020: PUSH
15021: LD_VAR 0 7
15025: ARRAY
15026: PUSH
15027: LD_INT 1
15029: ARRAY
15030: PPUSH
15031: LD_VAR 0 12
15035: PUSH
15036: LD_VAR 0 7
15040: ARRAY
15041: PUSH
15042: LD_INT 2
15044: ARRAY
15045: PPUSH
15046: CALL_OW 428
15050: PUSH
15051: LD_INT 0
15053: GREATER
15054: OR
15055: PUSH
15056: LD_VAR 0 12
15060: PUSH
15061: LD_VAR 0 7
15065: ARRAY
15066: PUSH
15067: LD_INT 1
15069: ARRAY
15070: PPUSH
15071: LD_VAR 0 12
15075: PUSH
15076: LD_VAR 0 7
15080: ARRAY
15081: PUSH
15082: LD_INT 2
15084: ARRAY
15085: PPUSH
15086: CALL_OW 351
15090: OR
15091: IFFALSE 15097
// exit ;
15093: POP
15094: POP
15095: GO 15389
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15097: LD_ADDR_VAR 0 8
15101: PUSH
15102: LD_VAR 0 12
15106: PUSH
15107: LD_VAR 0 7
15111: ARRAY
15112: PUSH
15113: LD_INT 1
15115: ARRAY
15116: PPUSH
15117: LD_VAR 0 12
15121: PUSH
15122: LD_VAR 0 7
15126: ARRAY
15127: PUSH
15128: LD_INT 2
15130: ARRAY
15131: PPUSH
15132: CALL_OW 546
15136: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15137: LD_VAR 0 8
15141: PUSH
15142: LD_INT 1
15144: ARRAY
15145: PUSH
15146: LD_VAR 0 8
15150: PUSH
15151: LD_INT 2
15153: ARRAY
15154: PUSH
15155: LD_VAR 0 13
15159: PUSH
15160: LD_INT 2
15162: PLUS
15163: GREATER
15164: OR
15165: PUSH
15166: LD_VAR 0 8
15170: PUSH
15171: LD_INT 2
15173: ARRAY
15174: PUSH
15175: LD_VAR 0 13
15179: PUSH
15180: LD_INT 2
15182: MINUS
15183: LESS
15184: OR
15185: PUSH
15186: LD_VAR 0 8
15190: PUSH
15191: LD_INT 3
15193: ARRAY
15194: PUSH
15195: LD_INT 0
15197: PUSH
15198: LD_INT 8
15200: PUSH
15201: LD_INT 9
15203: PUSH
15204: LD_INT 10
15206: PUSH
15207: LD_INT 11
15209: PUSH
15210: LD_INT 12
15212: PUSH
15213: LD_INT 13
15215: PUSH
15216: LD_INT 16
15218: PUSH
15219: LD_INT 17
15221: PUSH
15222: LD_INT 18
15224: PUSH
15225: LD_INT 19
15227: PUSH
15228: LD_INT 20
15230: PUSH
15231: LD_INT 21
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: IN
15249: NOT
15250: OR
15251: PUSH
15252: LD_VAR 0 8
15256: PUSH
15257: LD_INT 5
15259: ARRAY
15260: NOT
15261: OR
15262: PUSH
15263: LD_VAR 0 8
15267: PUSH
15268: LD_INT 6
15270: ARRAY
15271: PUSH
15272: LD_INT 1
15274: PUSH
15275: LD_INT 2
15277: PUSH
15278: LD_INT 7
15280: PUSH
15281: LD_INT 9
15283: PUSH
15284: LD_INT 10
15286: PUSH
15287: LD_INT 11
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: IN
15298: NOT
15299: OR
15300: IFFALSE 15306
// exit ;
15302: POP
15303: POP
15304: GO 15389
// end ;
15306: GO 14977
15308: POP
15309: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15310: LD_VAR 0 9
15314: PPUSH
15315: LD_VAR 0 3
15319: PPUSH
15320: LD_VAR 0 4
15324: PPUSH
15325: LD_INT 20
15327: PPUSH
15328: CALL 7335 0 4
15332: PUSH
15333: LD_INT 4
15335: ARRAY
15336: IFFALSE 15340
// exit ;
15338: GO 15389
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15340: LD_VAR 0 2
15344: PUSH
15345: LD_INT 29
15347: PUSH
15348: LD_INT 30
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: IN
15355: PUSH
15356: LD_VAR 0 3
15360: PPUSH
15361: LD_VAR 0 4
15365: PPUSH
15366: LD_VAR 0 9
15370: PPUSH
15371: CALL_OW 440
15375: NOT
15376: AND
15377: IFFALSE 15381
// exit ;
15379: GO 15389
// result := true ;
15381: LD_ADDR_VAR 0 6
15385: PUSH
15386: LD_INT 1
15388: ST_TO_ADDR
// end ;
15389: LD_VAR 0 6
15393: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15394: LD_INT 0
15396: PPUSH
15397: PPUSH
15398: PPUSH
15399: PPUSH
15400: PPUSH
15401: PPUSH
15402: PPUSH
15403: PPUSH
15404: PPUSH
15405: PPUSH
15406: PPUSH
15407: PPUSH
15408: PPUSH
15409: PPUSH
15410: PPUSH
15411: PPUSH
15412: PPUSH
15413: PPUSH
15414: PPUSH
15415: PPUSH
15416: PPUSH
15417: PPUSH
15418: PPUSH
15419: PPUSH
15420: PPUSH
15421: PPUSH
15422: PPUSH
15423: PPUSH
15424: PPUSH
15425: PPUSH
15426: PPUSH
15427: PPUSH
15428: PPUSH
15429: PPUSH
15430: PPUSH
15431: PPUSH
15432: PPUSH
15433: PPUSH
15434: PPUSH
15435: PPUSH
15436: PPUSH
15437: PPUSH
15438: PPUSH
15439: PPUSH
15440: PPUSH
15441: PPUSH
15442: PPUSH
15443: PPUSH
15444: PPUSH
15445: PPUSH
15446: PPUSH
15447: PPUSH
15448: PPUSH
15449: PPUSH
15450: PPUSH
15451: PPUSH
15452: PPUSH
15453: PPUSH
// result = [ ] ;
15454: LD_ADDR_VAR 0 7
15458: PUSH
15459: EMPTY
15460: ST_TO_ADDR
// temp_list = [ ] ;
15461: LD_ADDR_VAR 0 9
15465: PUSH
15466: EMPTY
15467: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15468: LD_VAR 0 4
15472: PUSH
15473: LD_INT 0
15475: PUSH
15476: LD_INT 1
15478: PUSH
15479: LD_INT 2
15481: PUSH
15482: LD_INT 3
15484: PUSH
15485: LD_INT 4
15487: PUSH
15488: LD_INT 5
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: IN
15499: NOT
15500: PUSH
15501: LD_VAR 0 1
15505: PUSH
15506: LD_INT 0
15508: PUSH
15509: LD_INT 1
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: IN
15516: PUSH
15517: LD_VAR 0 5
15521: PUSH
15522: LD_INT 1
15524: PUSH
15525: LD_INT 2
15527: PUSH
15528: LD_INT 3
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: IN
15536: NOT
15537: AND
15538: OR
15539: IFFALSE 15543
// exit ;
15541: GO 33934
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15543: LD_VAR 0 1
15547: PUSH
15548: LD_INT 6
15550: PUSH
15551: LD_INT 7
15553: PUSH
15554: LD_INT 8
15556: PUSH
15557: LD_INT 13
15559: PUSH
15560: LD_INT 12
15562: PUSH
15563: LD_INT 15
15565: PUSH
15566: LD_INT 11
15568: PUSH
15569: LD_INT 14
15571: PUSH
15572: LD_INT 10
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: IN
15586: IFFALSE 15596
// btype = b_lab ;
15588: LD_ADDR_VAR 0 1
15592: PUSH
15593: LD_INT 6
15595: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15596: LD_VAR 0 6
15600: PUSH
15601: LD_INT 0
15603: PUSH
15604: LD_INT 1
15606: PUSH
15607: LD_INT 2
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: IN
15615: NOT
15616: PUSH
15617: LD_VAR 0 1
15621: PUSH
15622: LD_INT 0
15624: PUSH
15625: LD_INT 1
15627: PUSH
15628: LD_INT 2
15630: PUSH
15631: LD_INT 3
15633: PUSH
15634: LD_INT 6
15636: PUSH
15637: LD_INT 36
15639: PUSH
15640: LD_INT 4
15642: PUSH
15643: LD_INT 5
15645: PUSH
15646: LD_INT 31
15648: PUSH
15649: LD_INT 32
15651: PUSH
15652: LD_INT 33
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: IN
15668: NOT
15669: PUSH
15670: LD_VAR 0 6
15674: PUSH
15675: LD_INT 1
15677: EQUAL
15678: AND
15679: OR
15680: PUSH
15681: LD_VAR 0 1
15685: PUSH
15686: LD_INT 2
15688: PUSH
15689: LD_INT 3
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: IN
15696: NOT
15697: PUSH
15698: LD_VAR 0 6
15702: PUSH
15703: LD_INT 2
15705: EQUAL
15706: AND
15707: OR
15708: IFFALSE 15718
// mode = 0 ;
15710: LD_ADDR_VAR 0 6
15714: PUSH
15715: LD_INT 0
15717: ST_TO_ADDR
// case mode of 0 :
15718: LD_VAR 0 6
15722: PUSH
15723: LD_INT 0
15725: DOUBLE
15726: EQUAL
15727: IFTRUE 15731
15729: GO 27184
15731: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15732: LD_ADDR_VAR 0 11
15736: PUSH
15737: LD_INT 0
15739: PUSH
15740: LD_INT 0
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: LD_INT 0
15749: PUSH
15750: LD_INT 1
15752: NEG
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: LD_INT 1
15760: PUSH
15761: LD_INT 0
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 1
15770: PUSH
15771: LD_INT 1
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 0
15780: PUSH
15781: LD_INT 1
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 1
15790: NEG
15791: PUSH
15792: LD_INT 0
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 1
15801: NEG
15802: PUSH
15803: LD_INT 1
15805: NEG
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: LD_INT 1
15813: NEG
15814: PUSH
15815: LD_INT 2
15817: NEG
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: LD_INT 0
15825: PUSH
15826: LD_INT 2
15828: NEG
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 1
15836: PUSH
15837: LD_INT 1
15839: NEG
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PUSH
15845: LD_INT 1
15847: PUSH
15848: LD_INT 2
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PUSH
15855: LD_INT 0
15857: PUSH
15858: LD_INT 2
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: PUSH
15865: LD_INT 1
15867: NEG
15868: PUSH
15869: LD_INT 1
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: LD_INT 1
15878: PUSH
15879: LD_INT 3
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PUSH
15886: LD_INT 0
15888: PUSH
15889: LD_INT 3
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 1
15898: NEG
15899: PUSH
15900: LD_INT 2
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15925: LD_ADDR_VAR 0 12
15929: PUSH
15930: LD_INT 0
15932: PUSH
15933: LD_INT 0
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 0
15942: PUSH
15943: LD_INT 1
15945: NEG
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: LD_INT 1
15953: PUSH
15954: LD_INT 0
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 1
15963: PUSH
15964: LD_INT 1
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: LD_INT 0
15973: PUSH
15974: LD_INT 1
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 1
15983: NEG
15984: PUSH
15985: LD_INT 0
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: LD_INT 1
15994: NEG
15995: PUSH
15996: LD_INT 1
15998: NEG
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 1
16006: PUSH
16007: LD_INT 1
16009: NEG
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 2
16017: PUSH
16018: LD_INT 0
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 2
16027: PUSH
16028: LD_INT 1
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 1
16037: NEG
16038: PUSH
16039: LD_INT 1
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: LD_INT 2
16048: NEG
16049: PUSH
16050: LD_INT 0
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: LD_INT 2
16059: NEG
16060: PUSH
16061: LD_INT 1
16063: NEG
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: LD_INT 2
16071: NEG
16072: PUSH
16073: LD_INT 1
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 3
16082: NEG
16083: PUSH
16084: LD_INT 0
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: PUSH
16091: LD_INT 3
16093: NEG
16094: PUSH
16095: LD_INT 1
16097: NEG
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16121: LD_ADDR_VAR 0 13
16125: PUSH
16126: LD_INT 0
16128: PUSH
16129: LD_INT 0
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PUSH
16136: LD_INT 0
16138: PUSH
16139: LD_INT 1
16141: NEG
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: PUSH
16147: LD_INT 1
16149: PUSH
16150: LD_INT 0
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 1
16159: PUSH
16160: LD_INT 1
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 0
16169: PUSH
16170: LD_INT 1
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 1
16179: NEG
16180: PUSH
16181: LD_INT 0
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: LD_INT 1
16190: NEG
16191: PUSH
16192: LD_INT 1
16194: NEG
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PUSH
16200: LD_INT 1
16202: NEG
16203: PUSH
16204: LD_INT 2
16206: NEG
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PUSH
16212: LD_INT 2
16214: PUSH
16215: LD_INT 1
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PUSH
16222: LD_INT 2
16224: PUSH
16225: LD_INT 2
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: LD_INT 2
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 2
16244: NEG
16245: PUSH
16246: LD_INT 1
16248: NEG
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 2
16256: NEG
16257: PUSH
16258: LD_INT 2
16260: NEG
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 2
16268: NEG
16269: PUSH
16270: LD_INT 3
16272: NEG
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: PUSH
16278: LD_INT 3
16280: NEG
16281: PUSH
16282: LD_INT 2
16284: NEG
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 3
16292: NEG
16293: PUSH
16294: LD_INT 3
16296: NEG
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16320: LD_ADDR_VAR 0 14
16324: PUSH
16325: LD_INT 0
16327: PUSH
16328: LD_INT 0
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 0
16337: PUSH
16338: LD_INT 1
16340: NEG
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 1
16348: PUSH
16349: LD_INT 0
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: LD_INT 1
16358: PUSH
16359: LD_INT 1
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 0
16368: PUSH
16369: LD_INT 1
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 1
16378: NEG
16379: PUSH
16380: LD_INT 0
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 1
16389: NEG
16390: PUSH
16391: LD_INT 1
16393: NEG
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 1
16401: NEG
16402: PUSH
16403: LD_INT 2
16405: NEG
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 0
16413: PUSH
16414: LD_INT 2
16416: NEG
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 1
16424: PUSH
16425: LD_INT 1
16427: NEG
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: LD_INT 1
16435: PUSH
16436: LD_INT 2
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 0
16445: PUSH
16446: LD_INT 2
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 1
16455: NEG
16456: PUSH
16457: LD_INT 1
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 1
16466: NEG
16467: PUSH
16468: LD_INT 3
16470: NEG
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 0
16478: PUSH
16479: LD_INT 3
16481: NEG
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 1
16489: PUSH
16490: LD_INT 2
16492: NEG
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16516: LD_ADDR_VAR 0 15
16520: PUSH
16521: LD_INT 0
16523: PUSH
16524: LD_INT 0
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 0
16533: PUSH
16534: LD_INT 1
16536: NEG
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 1
16544: PUSH
16545: LD_INT 0
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 1
16554: PUSH
16555: LD_INT 1
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: LD_INT 0
16564: PUSH
16565: LD_INT 1
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: PUSH
16572: LD_INT 1
16574: NEG
16575: PUSH
16576: LD_INT 0
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 1
16585: NEG
16586: PUSH
16587: LD_INT 1
16589: NEG
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 1
16597: PUSH
16598: LD_INT 1
16600: NEG
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 2
16608: PUSH
16609: LD_INT 0
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: LD_INT 2
16618: PUSH
16619: LD_INT 1
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 1
16628: NEG
16629: PUSH
16630: LD_INT 1
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 2
16639: NEG
16640: PUSH
16641: LD_INT 0
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: LD_INT 2
16650: NEG
16651: PUSH
16652: LD_INT 1
16654: NEG
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 2
16662: PUSH
16663: LD_INT 1
16665: NEG
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PUSH
16671: LD_INT 3
16673: PUSH
16674: LD_INT 0
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PUSH
16681: LD_INT 3
16683: PUSH
16684: LD_INT 1
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16709: LD_ADDR_VAR 0 16
16713: PUSH
16714: LD_INT 0
16716: PUSH
16717: LD_INT 0
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 0
16726: PUSH
16727: LD_INT 1
16729: NEG
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: PUSH
16735: LD_INT 1
16737: PUSH
16738: LD_INT 0
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PUSH
16745: LD_INT 1
16747: PUSH
16748: LD_INT 1
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 0
16757: PUSH
16758: LD_INT 1
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 1
16767: NEG
16768: PUSH
16769: LD_INT 0
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 1
16778: NEG
16779: PUSH
16780: LD_INT 1
16782: NEG
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: LD_INT 1
16790: NEG
16791: PUSH
16792: LD_INT 2
16794: NEG
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: LD_INT 2
16802: PUSH
16803: LD_INT 1
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 2
16812: PUSH
16813: LD_INT 2
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 1
16822: PUSH
16823: LD_INT 2
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 2
16832: NEG
16833: PUSH
16834: LD_INT 1
16836: NEG
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 2
16844: NEG
16845: PUSH
16846: LD_INT 2
16848: NEG
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 3
16856: PUSH
16857: LD_INT 2
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 3
16866: PUSH
16867: LD_INT 3
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 2
16876: PUSH
16877: LD_INT 3
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16902: LD_ADDR_VAR 0 17
16906: PUSH
16907: LD_INT 0
16909: PUSH
16910: LD_INT 0
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 0
16919: PUSH
16920: LD_INT 1
16922: NEG
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 1
16930: PUSH
16931: LD_INT 0
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 1
16940: PUSH
16941: LD_INT 1
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 0
16950: PUSH
16951: LD_INT 1
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 1
16960: NEG
16961: PUSH
16962: LD_INT 0
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 1
16971: NEG
16972: PUSH
16973: LD_INT 1
16975: NEG
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 1
16983: NEG
16984: PUSH
16985: LD_INT 2
16987: NEG
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 0
16995: PUSH
16996: LD_INT 2
16998: NEG
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 1
17006: PUSH
17007: LD_INT 1
17009: NEG
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: LD_INT 2
17017: PUSH
17018: LD_INT 0
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: LD_INT 2
17027: PUSH
17028: LD_INT 1
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PUSH
17035: LD_INT 2
17037: PUSH
17038: LD_INT 2
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: LD_INT 1
17047: PUSH
17048: LD_INT 2
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 0
17057: PUSH
17058: LD_INT 2
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 1
17067: NEG
17068: PUSH
17069: LD_INT 1
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 2
17078: NEG
17079: PUSH
17080: LD_INT 0
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 2
17089: NEG
17090: PUSH
17091: LD_INT 1
17093: NEG
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 2
17101: NEG
17102: PUSH
17103: LD_INT 2
17105: NEG
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17132: LD_ADDR_VAR 0 18
17136: PUSH
17137: LD_INT 0
17139: PUSH
17140: LD_INT 0
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 0
17149: PUSH
17150: LD_INT 1
17152: NEG
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 1
17160: PUSH
17161: LD_INT 0
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 1
17170: PUSH
17171: LD_INT 1
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 0
17180: PUSH
17181: LD_INT 1
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 1
17190: NEG
17191: PUSH
17192: LD_INT 0
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 1
17201: NEG
17202: PUSH
17203: LD_INT 1
17205: NEG
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 1
17213: NEG
17214: PUSH
17215: LD_INT 2
17217: NEG
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 0
17225: PUSH
17226: LD_INT 2
17228: NEG
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 1
17236: PUSH
17237: LD_INT 1
17239: NEG
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 2
17247: PUSH
17248: LD_INT 0
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 2
17257: PUSH
17258: LD_INT 1
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: LD_INT 2
17267: PUSH
17268: LD_INT 2
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 1
17277: PUSH
17278: LD_INT 2
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 0
17287: PUSH
17288: LD_INT 2
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 1
17297: NEG
17298: PUSH
17299: LD_INT 1
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: LD_INT 2
17308: NEG
17309: PUSH
17310: LD_INT 0
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 2
17319: NEG
17320: PUSH
17321: LD_INT 1
17323: NEG
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 2
17331: NEG
17332: PUSH
17333: LD_INT 2
17335: NEG
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17362: LD_ADDR_VAR 0 19
17366: PUSH
17367: LD_INT 0
17369: PUSH
17370: LD_INT 0
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 0
17379: PUSH
17380: LD_INT 1
17382: NEG
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 1
17390: PUSH
17391: LD_INT 0
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 1
17400: PUSH
17401: LD_INT 1
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PUSH
17408: LD_INT 0
17410: PUSH
17411: LD_INT 1
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: LD_INT 1
17420: NEG
17421: PUSH
17422: LD_INT 0
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 1
17431: NEG
17432: PUSH
17433: LD_INT 1
17435: NEG
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 1
17443: NEG
17444: PUSH
17445: LD_INT 2
17447: NEG
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 0
17455: PUSH
17456: LD_INT 2
17458: NEG
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 1
17466: PUSH
17467: LD_INT 1
17469: NEG
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 2
17477: PUSH
17478: LD_INT 0
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 2
17487: PUSH
17488: LD_INT 1
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: LD_INT 2
17497: PUSH
17498: LD_INT 2
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 1
17507: PUSH
17508: LD_INT 2
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 0
17517: PUSH
17518: LD_INT 2
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 1
17527: NEG
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 2
17538: NEG
17539: PUSH
17540: LD_INT 0
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 2
17549: NEG
17550: PUSH
17551: LD_INT 1
17553: NEG
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 2
17561: NEG
17562: PUSH
17563: LD_INT 2
17565: NEG
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17592: LD_ADDR_VAR 0 20
17596: PUSH
17597: LD_INT 0
17599: PUSH
17600: LD_INT 0
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 0
17609: PUSH
17610: LD_INT 1
17612: NEG
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 1
17620: PUSH
17621: LD_INT 0
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 1
17630: PUSH
17631: LD_INT 1
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 0
17640: PUSH
17641: LD_INT 1
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: LD_INT 1
17650: NEG
17651: PUSH
17652: LD_INT 0
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 1
17661: NEG
17662: PUSH
17663: LD_INT 1
17665: NEG
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 1
17673: NEG
17674: PUSH
17675: LD_INT 2
17677: NEG
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 0
17685: PUSH
17686: LD_INT 2
17688: NEG
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 1
17696: PUSH
17697: LD_INT 1
17699: NEG
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 2
17707: PUSH
17708: LD_INT 0
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 2
17717: PUSH
17718: LD_INT 1
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: LD_INT 2
17727: PUSH
17728: LD_INT 2
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 1
17737: PUSH
17738: LD_INT 2
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: LD_INT 0
17747: PUSH
17748: LD_INT 2
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: LD_INT 1
17757: NEG
17758: PUSH
17759: LD_INT 1
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: LD_INT 2
17768: NEG
17769: PUSH
17770: LD_INT 0
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 2
17779: NEG
17780: PUSH
17781: LD_INT 1
17783: NEG
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 2
17791: NEG
17792: PUSH
17793: LD_INT 2
17795: NEG
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17822: LD_ADDR_VAR 0 21
17826: PUSH
17827: LD_INT 0
17829: PUSH
17830: LD_INT 0
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PUSH
17837: LD_INT 0
17839: PUSH
17840: LD_INT 1
17842: NEG
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 1
17850: PUSH
17851: LD_INT 0
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 1
17860: PUSH
17861: LD_INT 1
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 0
17870: PUSH
17871: LD_INT 1
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 1
17880: NEG
17881: PUSH
17882: LD_INT 0
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 1
17891: NEG
17892: PUSH
17893: LD_INT 1
17895: NEG
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PUSH
17901: LD_INT 1
17903: NEG
17904: PUSH
17905: LD_INT 2
17907: NEG
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: LD_INT 0
17915: PUSH
17916: LD_INT 2
17918: NEG
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 1
17926: PUSH
17927: LD_INT 1
17929: NEG
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 2
17937: PUSH
17938: LD_INT 0
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 2
17947: PUSH
17948: LD_INT 1
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 2
17957: PUSH
17958: LD_INT 2
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 1
17967: PUSH
17968: LD_INT 2
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 0
17977: PUSH
17978: LD_INT 2
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 1
17987: NEG
17988: PUSH
17989: LD_INT 1
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 2
17998: NEG
17999: PUSH
18000: LD_INT 0
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 2
18009: NEG
18010: PUSH
18011: LD_INT 1
18013: NEG
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 2
18021: NEG
18022: PUSH
18023: LD_INT 2
18025: NEG
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18052: LD_ADDR_VAR 0 22
18056: PUSH
18057: LD_INT 0
18059: PUSH
18060: LD_INT 0
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: LD_INT 0
18069: PUSH
18070: LD_INT 1
18072: NEG
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 1
18080: PUSH
18081: LD_INT 0
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 1
18090: PUSH
18091: LD_INT 1
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 0
18100: PUSH
18101: LD_INT 1
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 1
18110: NEG
18111: PUSH
18112: LD_INT 0
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 1
18121: NEG
18122: PUSH
18123: LD_INT 1
18125: NEG
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 1
18133: NEG
18134: PUSH
18135: LD_INT 2
18137: NEG
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 0
18145: PUSH
18146: LD_INT 2
18148: NEG
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 1
18156: PUSH
18157: LD_INT 1
18159: NEG
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 2
18167: PUSH
18168: LD_INT 0
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 2
18177: PUSH
18178: LD_INT 1
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 2
18187: PUSH
18188: LD_INT 2
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 1
18197: PUSH
18198: LD_INT 2
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 0
18207: PUSH
18208: LD_INT 2
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: LD_INT 1
18217: NEG
18218: PUSH
18219: LD_INT 1
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 2
18228: NEG
18229: PUSH
18230: LD_INT 0
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 2
18239: NEG
18240: PUSH
18241: LD_INT 1
18243: NEG
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 2
18251: NEG
18252: PUSH
18253: LD_INT 2
18255: NEG
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18282: LD_ADDR_VAR 0 23
18286: PUSH
18287: LD_INT 0
18289: PUSH
18290: LD_INT 0
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: LD_INT 0
18299: PUSH
18300: LD_INT 1
18302: NEG
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 1
18310: PUSH
18311: LD_INT 0
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 1
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 0
18330: PUSH
18331: LD_INT 1
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 1
18340: NEG
18341: PUSH
18342: LD_INT 0
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 1
18351: NEG
18352: PUSH
18353: LD_INT 1
18355: NEG
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 1
18363: NEG
18364: PUSH
18365: LD_INT 2
18367: NEG
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 0
18375: PUSH
18376: LD_INT 2
18378: NEG
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: LD_INT 1
18386: PUSH
18387: LD_INT 1
18389: NEG
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 2
18397: PUSH
18398: LD_INT 0
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 2
18407: PUSH
18408: LD_INT 1
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 2
18417: PUSH
18418: LD_INT 2
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: LD_INT 2
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 0
18437: PUSH
18438: LD_INT 2
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 1
18447: NEG
18448: PUSH
18449: LD_INT 1
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 2
18458: NEG
18459: PUSH
18460: LD_INT 0
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 2
18469: NEG
18470: PUSH
18471: LD_INT 1
18473: NEG
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: LD_INT 2
18481: NEG
18482: PUSH
18483: LD_INT 2
18485: NEG
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 2
18493: NEG
18494: PUSH
18495: LD_INT 3
18497: NEG
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 1
18505: NEG
18506: PUSH
18507: LD_INT 3
18509: NEG
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 1
18517: PUSH
18518: LD_INT 2
18520: NEG
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 2
18528: PUSH
18529: LD_INT 1
18531: NEG
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18562: LD_ADDR_VAR 0 24
18566: PUSH
18567: LD_INT 0
18569: PUSH
18570: LD_INT 0
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 0
18579: PUSH
18580: LD_INT 1
18582: NEG
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 1
18590: PUSH
18591: LD_INT 0
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: LD_INT 1
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 0
18610: PUSH
18611: LD_INT 1
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 1
18620: NEG
18621: PUSH
18622: LD_INT 0
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 1
18631: NEG
18632: PUSH
18633: LD_INT 1
18635: NEG
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 1
18643: NEG
18644: PUSH
18645: LD_INT 2
18647: NEG
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 0
18655: PUSH
18656: LD_INT 2
18658: NEG
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 1
18666: PUSH
18667: LD_INT 1
18669: NEG
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 2
18677: PUSH
18678: LD_INT 0
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 2
18687: PUSH
18688: LD_INT 1
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 2
18697: PUSH
18698: LD_INT 2
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: LD_INT 2
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 0
18717: PUSH
18718: LD_INT 2
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 1
18727: NEG
18728: PUSH
18729: LD_INT 1
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 2
18738: NEG
18739: PUSH
18740: LD_INT 0
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 2
18749: NEG
18750: PUSH
18751: LD_INT 1
18753: NEG
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 2
18761: NEG
18762: PUSH
18763: LD_INT 2
18765: NEG
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 1
18773: PUSH
18774: LD_INT 2
18776: NEG
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 2
18784: PUSH
18785: LD_INT 1
18787: NEG
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 3
18795: PUSH
18796: LD_INT 1
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 3
18805: PUSH
18806: LD_INT 2
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18838: LD_ADDR_VAR 0 25
18842: PUSH
18843: LD_INT 0
18845: PUSH
18846: LD_INT 0
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 0
18855: PUSH
18856: LD_INT 1
18858: NEG
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 1
18866: PUSH
18867: LD_INT 0
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 1
18876: PUSH
18877: LD_INT 1
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 0
18886: PUSH
18887: LD_INT 1
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 1
18896: NEG
18897: PUSH
18898: LD_INT 0
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 1
18907: NEG
18908: PUSH
18909: LD_INT 1
18911: NEG
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 1
18919: NEG
18920: PUSH
18921: LD_INT 2
18923: NEG
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 0
18931: PUSH
18932: LD_INT 2
18934: NEG
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 1
18942: PUSH
18943: LD_INT 1
18945: NEG
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 2
18953: PUSH
18954: LD_INT 0
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 2
18963: PUSH
18964: LD_INT 1
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 2
18973: PUSH
18974: LD_INT 2
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 1
18983: PUSH
18984: LD_INT 2
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 0
18993: PUSH
18994: LD_INT 2
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 1
19003: NEG
19004: PUSH
19005: LD_INT 1
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 2
19014: NEG
19015: PUSH
19016: LD_INT 0
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 2
19025: NEG
19026: PUSH
19027: LD_INT 1
19029: NEG
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 2
19037: NEG
19038: PUSH
19039: LD_INT 2
19041: NEG
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 3
19049: PUSH
19050: LD_INT 1
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 3
19059: PUSH
19060: LD_INT 2
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 2
19069: PUSH
19070: LD_INT 3
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 1
19079: PUSH
19080: LD_INT 3
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19112: LD_ADDR_VAR 0 26
19116: PUSH
19117: LD_INT 0
19119: PUSH
19120: LD_INT 0
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 0
19129: PUSH
19130: LD_INT 1
19132: NEG
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 1
19140: PUSH
19141: LD_INT 0
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 1
19150: PUSH
19151: LD_INT 1
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 0
19160: PUSH
19161: LD_INT 1
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 1
19170: NEG
19171: PUSH
19172: LD_INT 0
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 1
19181: NEG
19182: PUSH
19183: LD_INT 1
19185: NEG
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 1
19193: NEG
19194: PUSH
19195: LD_INT 2
19197: NEG
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 0
19205: PUSH
19206: LD_INT 2
19208: NEG
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 1
19216: PUSH
19217: LD_INT 1
19219: NEG
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 2
19227: PUSH
19228: LD_INT 0
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 2
19237: PUSH
19238: LD_INT 1
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 2
19247: PUSH
19248: LD_INT 2
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 1
19257: PUSH
19258: LD_INT 2
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 0
19267: PUSH
19268: LD_INT 2
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 1
19277: NEG
19278: PUSH
19279: LD_INT 1
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 2
19288: NEG
19289: PUSH
19290: LD_INT 0
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 2
19299: NEG
19300: PUSH
19301: LD_INT 1
19303: NEG
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 2
19311: NEG
19312: PUSH
19313: LD_INT 2
19315: NEG
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 2
19323: PUSH
19324: LD_INT 3
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 1
19333: PUSH
19334: LD_INT 3
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 1
19343: NEG
19344: PUSH
19345: LD_INT 2
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 2
19354: NEG
19355: PUSH
19356: LD_INT 1
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19388: LD_ADDR_VAR 0 27
19392: PUSH
19393: LD_INT 0
19395: PUSH
19396: LD_INT 0
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: LD_INT 1
19408: NEG
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 1
19416: PUSH
19417: LD_INT 0
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: PUSH
19427: LD_INT 1
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 0
19436: PUSH
19437: LD_INT 1
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 1
19446: NEG
19447: PUSH
19448: LD_INT 0
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 1
19457: NEG
19458: PUSH
19459: LD_INT 1
19461: NEG
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 1
19469: NEG
19470: PUSH
19471: LD_INT 2
19473: NEG
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 0
19481: PUSH
19482: LD_INT 2
19484: NEG
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: LD_INT 1
19495: NEG
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 2
19503: PUSH
19504: LD_INT 0
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 2
19513: PUSH
19514: LD_INT 1
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 2
19523: PUSH
19524: LD_INT 2
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 1
19533: PUSH
19534: LD_INT 2
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 0
19543: PUSH
19544: LD_INT 2
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 1
19553: NEG
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 2
19564: NEG
19565: PUSH
19566: LD_INT 0
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 2
19575: NEG
19576: PUSH
19577: LD_INT 1
19579: NEG
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: NEG
19588: PUSH
19589: LD_INT 2
19591: NEG
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 1
19599: NEG
19600: PUSH
19601: LD_INT 2
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 2
19610: NEG
19611: PUSH
19612: LD_INT 1
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 3
19621: NEG
19622: PUSH
19623: LD_INT 1
19625: NEG
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 3
19633: NEG
19634: PUSH
19635: LD_INT 2
19637: NEG
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19668: LD_ADDR_VAR 0 28
19672: PUSH
19673: LD_INT 0
19675: PUSH
19676: LD_INT 0
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 0
19685: PUSH
19686: LD_INT 1
19688: NEG
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 1
19696: PUSH
19697: LD_INT 0
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: LD_INT 1
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 0
19716: PUSH
19717: LD_INT 1
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 1
19726: NEG
19727: PUSH
19728: LD_INT 0
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 1
19737: NEG
19738: PUSH
19739: LD_INT 1
19741: NEG
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 1
19749: NEG
19750: PUSH
19751: LD_INT 2
19753: NEG
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 0
19761: PUSH
19762: LD_INT 2
19764: NEG
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 1
19772: PUSH
19773: LD_INT 1
19775: NEG
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 2
19783: PUSH
19784: LD_INT 0
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 2
19793: PUSH
19794: LD_INT 1
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: LD_INT 2
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 1
19813: PUSH
19814: LD_INT 2
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 0
19823: PUSH
19824: LD_INT 2
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 1
19833: NEG
19834: PUSH
19835: LD_INT 1
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 2
19844: NEG
19845: PUSH
19846: LD_INT 0
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 2
19855: NEG
19856: PUSH
19857: LD_INT 1
19859: NEG
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 2
19867: NEG
19868: PUSH
19869: LD_INT 2
19871: NEG
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 2
19879: NEG
19880: PUSH
19881: LD_INT 3
19883: NEG
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 1
19891: NEG
19892: PUSH
19893: LD_INT 3
19895: NEG
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 3
19903: NEG
19904: PUSH
19905: LD_INT 1
19907: NEG
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 3
19915: NEG
19916: PUSH
19917: LD_INT 2
19919: NEG
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19950: LD_ADDR_VAR 0 29
19954: PUSH
19955: LD_INT 0
19957: PUSH
19958: LD_INT 0
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 0
19967: PUSH
19968: LD_INT 1
19970: NEG
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 1
19978: PUSH
19979: LD_INT 0
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PUSH
19986: LD_INT 1
19988: PUSH
19989: LD_INT 1
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 0
19998: PUSH
19999: LD_INT 1
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 1
20008: NEG
20009: PUSH
20010: LD_INT 0
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 1
20019: NEG
20020: PUSH
20021: LD_INT 1
20023: NEG
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 1
20031: NEG
20032: PUSH
20033: LD_INT 2
20035: NEG
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 0
20043: PUSH
20044: LD_INT 2
20046: NEG
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 1
20054: PUSH
20055: LD_INT 1
20057: NEG
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 2
20065: PUSH
20066: LD_INT 0
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 2
20075: PUSH
20076: LD_INT 1
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 1
20085: PUSH
20086: LD_INT 2
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 0
20095: PUSH
20096: LD_INT 2
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 1
20105: NEG
20106: PUSH
20107: LD_INT 1
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 2
20116: NEG
20117: PUSH
20118: LD_INT 1
20120: NEG
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 2
20128: NEG
20129: PUSH
20130: LD_INT 2
20132: NEG
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 2
20140: NEG
20141: PUSH
20142: LD_INT 3
20144: NEG
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 2
20152: PUSH
20153: LD_INT 1
20155: NEG
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 3
20163: PUSH
20164: LD_INT 1
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: LD_INT 3
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 1
20183: NEG
20184: PUSH
20185: LD_INT 2
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 3
20194: NEG
20195: PUSH
20196: LD_INT 2
20198: NEG
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20229: LD_ADDR_VAR 0 30
20233: PUSH
20234: LD_INT 0
20236: PUSH
20237: LD_INT 0
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 0
20246: PUSH
20247: LD_INT 1
20249: NEG
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 1
20257: PUSH
20258: LD_INT 0
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 1
20267: PUSH
20268: LD_INT 1
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 1
20287: NEG
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 1
20298: NEG
20299: PUSH
20300: LD_INT 1
20302: NEG
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 1
20310: NEG
20311: PUSH
20312: LD_INT 2
20314: NEG
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: LD_INT 2
20325: NEG
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 1
20333: PUSH
20334: LD_INT 1
20336: NEG
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 2
20344: PUSH
20345: LD_INT 0
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 2
20354: PUSH
20355: LD_INT 1
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 2
20364: PUSH
20365: LD_INT 2
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 1
20374: PUSH
20375: LD_INT 2
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 1
20384: NEG
20385: PUSH
20386: LD_INT 1
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 2
20395: NEG
20396: PUSH
20397: LD_INT 0
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 2
20406: NEG
20407: PUSH
20408: LD_INT 1
20410: NEG
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 1
20418: NEG
20419: PUSH
20420: LD_INT 3
20422: NEG
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 1
20430: PUSH
20431: LD_INT 2
20433: NEG
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 3
20441: PUSH
20442: LD_INT 2
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 2
20451: PUSH
20452: LD_INT 3
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 2
20461: NEG
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 3
20472: NEG
20473: PUSH
20474: LD_INT 1
20476: NEG
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20507: LD_ADDR_VAR 0 31
20511: PUSH
20512: LD_INT 0
20514: PUSH
20515: LD_INT 0
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 0
20524: PUSH
20525: LD_INT 1
20527: NEG
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 1
20535: PUSH
20536: LD_INT 0
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: LD_INT 1
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: LD_INT 1
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 1
20565: NEG
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 1
20576: NEG
20577: PUSH
20578: LD_INT 1
20580: NEG
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 1
20588: NEG
20589: PUSH
20590: LD_INT 2
20592: NEG
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: LD_INT 1
20603: NEG
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 2
20611: PUSH
20612: LD_INT 0
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 2
20621: PUSH
20622: LD_INT 1
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 2
20631: PUSH
20632: LD_INT 2
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 1
20641: PUSH
20642: LD_INT 2
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 0
20651: PUSH
20652: LD_INT 2
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 1
20661: NEG
20662: PUSH
20663: LD_INT 1
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 2
20672: NEG
20673: PUSH
20674: LD_INT 1
20676: NEG
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 2
20684: NEG
20685: PUSH
20686: LD_INT 2
20688: NEG
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 2
20696: NEG
20697: PUSH
20698: LD_INT 3
20700: NEG
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 2
20708: PUSH
20709: LD_INT 1
20711: NEG
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 3
20719: PUSH
20720: LD_INT 1
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 1
20729: PUSH
20730: LD_INT 3
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 1
20739: NEG
20740: PUSH
20741: LD_INT 2
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 3
20750: NEG
20751: PUSH
20752: LD_INT 2
20754: NEG
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20785: LD_ADDR_VAR 0 32
20789: PUSH
20790: LD_INT 0
20792: PUSH
20793: LD_INT 0
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 0
20802: PUSH
20803: LD_INT 1
20805: NEG
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: LD_INT 0
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 1
20823: PUSH
20824: LD_INT 1
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 0
20833: PUSH
20834: LD_INT 1
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 1
20843: NEG
20844: PUSH
20845: LD_INT 0
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 1
20854: NEG
20855: PUSH
20856: LD_INT 1
20858: NEG
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 1
20866: NEG
20867: PUSH
20868: LD_INT 2
20870: NEG
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 0
20878: PUSH
20879: LD_INT 2
20881: NEG
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 1
20889: PUSH
20890: LD_INT 1
20892: NEG
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: LD_INT 2
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 1
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 0
20930: PUSH
20931: LD_INT 2
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 1
20940: NEG
20941: PUSH
20942: LD_INT 1
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 2
20951: NEG
20952: PUSH
20953: LD_INT 0
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 2
20962: NEG
20963: PUSH
20964: LD_INT 1
20966: NEG
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 1
20974: NEG
20975: PUSH
20976: LD_INT 3
20978: NEG
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 1
20986: PUSH
20987: LD_INT 2
20989: NEG
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 3
20997: PUSH
20998: LD_INT 2
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 2
21007: PUSH
21008: LD_INT 3
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 2
21017: NEG
21018: PUSH
21019: LD_INT 1
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 3
21028: NEG
21029: PUSH
21030: LD_INT 1
21032: NEG
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21063: LD_ADDR_VAR 0 33
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: LD_INT 0
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 0
21080: PUSH
21081: LD_INT 1
21083: NEG
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 1
21091: PUSH
21092: LD_INT 0
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 1
21101: PUSH
21102: LD_INT 1
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 0
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 1
21121: NEG
21122: PUSH
21123: LD_INT 0
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 1
21132: NEG
21133: PUSH
21134: LD_INT 1
21136: NEG
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 1
21144: NEG
21145: PUSH
21146: LD_INT 2
21148: NEG
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 1
21156: PUSH
21157: LD_INT 1
21159: NEG
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 2
21167: PUSH
21168: LD_INT 0
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 2
21177: PUSH
21178: LD_INT 1
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 1
21187: PUSH
21188: LD_INT 2
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 0
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 1
21207: NEG
21208: PUSH
21209: LD_INT 1
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 2
21218: NEG
21219: PUSH
21220: LD_INT 0
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 2
21229: NEG
21230: PUSH
21231: LD_INT 1
21233: NEG
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 2
21241: NEG
21242: PUSH
21243: LD_INT 2
21245: NEG
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 2
21253: NEG
21254: PUSH
21255: LD_INT 3
21257: NEG
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 2
21265: PUSH
21266: LD_INT 1
21268: NEG
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 3
21276: PUSH
21277: LD_INT 1
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 1
21286: PUSH
21287: LD_INT 3
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 1
21296: NEG
21297: PUSH
21298: LD_INT 2
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 3
21307: NEG
21308: PUSH
21309: LD_INT 2
21311: NEG
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21342: LD_ADDR_VAR 0 34
21346: PUSH
21347: LD_INT 0
21349: PUSH
21350: LD_INT 0
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 0
21359: PUSH
21360: LD_INT 1
21362: NEG
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 1
21370: PUSH
21371: LD_INT 0
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: LD_INT 1
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 0
21390: PUSH
21391: LD_INT 1
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 1
21400: NEG
21401: PUSH
21402: LD_INT 0
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 1
21411: NEG
21412: PUSH
21413: LD_INT 1
21415: NEG
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 1
21423: NEG
21424: PUSH
21425: LD_INT 2
21427: NEG
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 0
21435: PUSH
21436: LD_INT 2
21438: NEG
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 1
21446: PUSH
21447: LD_INT 1
21449: NEG
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 2
21457: PUSH
21458: LD_INT 1
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 2
21467: PUSH
21468: LD_INT 2
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 1
21477: PUSH
21478: LD_INT 2
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 1
21487: NEG
21488: PUSH
21489: LD_INT 1
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 2
21498: NEG
21499: PUSH
21500: LD_INT 0
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 2
21509: NEG
21510: PUSH
21511: LD_INT 1
21513: NEG
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 2
21521: NEG
21522: PUSH
21523: LD_INT 2
21525: NEG
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 1
21533: NEG
21534: PUSH
21535: LD_INT 3
21537: NEG
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 1
21545: PUSH
21546: LD_INT 2
21548: NEG
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 3
21556: PUSH
21557: LD_INT 2
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 2
21566: PUSH
21567: LD_INT 3
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 2
21576: NEG
21577: PUSH
21578: LD_INT 1
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 3
21587: NEG
21588: PUSH
21589: LD_INT 1
21591: NEG
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21622: LD_ADDR_VAR 0 35
21626: PUSH
21627: LD_INT 0
21629: PUSH
21630: LD_INT 0
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 0
21639: PUSH
21640: LD_INT 1
21642: NEG
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 1
21650: PUSH
21651: LD_INT 0
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 1
21660: PUSH
21661: LD_INT 1
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 0
21670: PUSH
21671: LD_INT 1
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 1
21680: NEG
21681: PUSH
21682: LD_INT 0
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 1
21691: NEG
21692: PUSH
21693: LD_INT 1
21695: NEG
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 2
21703: PUSH
21704: LD_INT 1
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 2
21713: NEG
21714: PUSH
21715: LD_INT 1
21717: NEG
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21734: LD_ADDR_VAR 0 36
21738: PUSH
21739: LD_INT 0
21741: PUSH
21742: LD_INT 0
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 0
21751: PUSH
21752: LD_INT 1
21754: NEG
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 1
21762: PUSH
21763: LD_INT 0
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 1
21772: PUSH
21773: LD_INT 1
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 0
21782: PUSH
21783: LD_INT 1
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 1
21792: NEG
21793: PUSH
21794: LD_INT 0
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 1
21803: NEG
21804: PUSH
21805: LD_INT 1
21807: NEG
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 1
21815: NEG
21816: PUSH
21817: LD_INT 2
21819: NEG
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 1
21827: PUSH
21828: LD_INT 2
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21846: LD_ADDR_VAR 0 37
21850: PUSH
21851: LD_INT 0
21853: PUSH
21854: LD_INT 0
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 0
21863: PUSH
21864: LD_INT 1
21866: NEG
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 1
21874: PUSH
21875: LD_INT 0
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 1
21884: PUSH
21885: LD_INT 1
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 0
21894: PUSH
21895: LD_INT 1
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: NEG
21905: PUSH
21906: LD_INT 0
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 1
21915: NEG
21916: PUSH
21917: LD_INT 1
21919: NEG
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 1
21927: PUSH
21928: LD_INT 1
21930: NEG
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 1
21938: NEG
21939: PUSH
21940: LD_INT 1
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21958: LD_ADDR_VAR 0 38
21962: PUSH
21963: LD_INT 0
21965: PUSH
21966: LD_INT 0
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 0
21975: PUSH
21976: LD_INT 1
21978: NEG
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 1
21986: PUSH
21987: LD_INT 0
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 1
21996: PUSH
21997: LD_INT 1
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 0
22006: PUSH
22007: LD_INT 1
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: LD_INT 1
22016: NEG
22017: PUSH
22018: LD_INT 0
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 1
22027: NEG
22028: PUSH
22029: LD_INT 1
22031: NEG
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 2
22039: PUSH
22040: LD_INT 1
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 2
22049: NEG
22050: PUSH
22051: LD_INT 1
22053: NEG
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22070: LD_ADDR_VAR 0 39
22074: PUSH
22075: LD_INT 0
22077: PUSH
22078: LD_INT 0
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 0
22087: PUSH
22088: LD_INT 1
22090: NEG
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 1
22098: PUSH
22099: LD_INT 0
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 1
22108: PUSH
22109: LD_INT 1
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 0
22118: PUSH
22119: LD_INT 1
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 1
22128: NEG
22129: PUSH
22130: LD_INT 0
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 1
22139: NEG
22140: PUSH
22141: LD_INT 1
22143: NEG
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 1
22151: NEG
22152: PUSH
22153: LD_INT 2
22155: NEG
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 1
22163: PUSH
22164: LD_INT 2
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22182: LD_ADDR_VAR 0 40
22186: PUSH
22187: LD_INT 0
22189: PUSH
22190: LD_INT 0
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 0
22199: PUSH
22200: LD_INT 1
22202: NEG
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 1
22210: PUSH
22211: LD_INT 0
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 1
22220: PUSH
22221: LD_INT 1
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 1
22240: NEG
22241: PUSH
22242: LD_INT 0
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 1
22251: NEG
22252: PUSH
22253: LD_INT 1
22255: NEG
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 1
22263: PUSH
22264: LD_INT 1
22266: NEG
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 1
22274: NEG
22275: PUSH
22276: LD_INT 1
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22294: LD_ADDR_VAR 0 41
22298: PUSH
22299: LD_INT 0
22301: PUSH
22302: LD_INT 0
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 0
22311: PUSH
22312: LD_INT 1
22314: NEG
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 1
22322: PUSH
22323: LD_INT 0
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 1
22332: PUSH
22333: LD_INT 1
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 0
22342: PUSH
22343: LD_INT 1
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 1
22352: NEG
22353: PUSH
22354: LD_INT 0
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 1
22363: NEG
22364: PUSH
22365: LD_INT 1
22367: NEG
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 1
22375: NEG
22376: PUSH
22377: LD_INT 2
22379: NEG
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 1
22387: PUSH
22388: LD_INT 1
22390: NEG
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 2
22398: PUSH
22399: LD_INT 0
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 2
22408: PUSH
22409: LD_INT 1
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 2
22418: PUSH
22419: LD_INT 2
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 1
22428: PUSH
22429: LD_INT 2
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 1
22438: NEG
22439: PUSH
22440: LD_INT 1
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 2
22449: NEG
22450: PUSH
22451: LD_INT 0
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 2
22460: NEG
22461: PUSH
22462: LD_INT 1
22464: NEG
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 2
22472: NEG
22473: PUSH
22474: LD_INT 2
22476: NEG
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 2
22484: NEG
22485: PUSH
22486: LD_INT 3
22488: NEG
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 2
22496: PUSH
22497: LD_INT 1
22499: NEG
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 3
22507: PUSH
22508: LD_INT 0
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 3
22517: PUSH
22518: LD_INT 1
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 3
22527: PUSH
22528: LD_INT 2
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 3
22537: PUSH
22538: LD_INT 3
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 2
22547: PUSH
22548: LD_INT 3
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 2
22557: NEG
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 3
22568: NEG
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 3
22579: NEG
22580: PUSH
22581: LD_INT 1
22583: NEG
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 3
22591: NEG
22592: PUSH
22593: LD_INT 2
22595: NEG
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 3
22603: NEG
22604: PUSH
22605: LD_INT 3
22607: NEG
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22644: LD_ADDR_VAR 0 42
22648: PUSH
22649: LD_INT 0
22651: PUSH
22652: LD_INT 0
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 0
22661: PUSH
22662: LD_INT 1
22664: NEG
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 1
22672: PUSH
22673: LD_INT 0
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 1
22682: PUSH
22683: LD_INT 1
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 0
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 1
22702: NEG
22703: PUSH
22704: LD_INT 0
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 1
22713: NEG
22714: PUSH
22715: LD_INT 1
22717: NEG
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 1
22725: NEG
22726: PUSH
22727: LD_INT 2
22729: NEG
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 0
22737: PUSH
22738: LD_INT 2
22740: NEG
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 1
22748: PUSH
22749: LD_INT 1
22751: NEG
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 2
22759: PUSH
22760: LD_INT 1
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 2
22769: PUSH
22770: LD_INT 2
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 1
22779: PUSH
22780: LD_INT 2
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 0
22789: PUSH
22790: LD_INT 2
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 1
22799: NEG
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 2
22810: NEG
22811: PUSH
22812: LD_INT 1
22814: NEG
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 2
22822: NEG
22823: PUSH
22824: LD_INT 2
22826: NEG
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 2
22834: NEG
22835: PUSH
22836: LD_INT 3
22838: NEG
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 1
22846: NEG
22847: PUSH
22848: LD_INT 3
22850: NEG
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 0
22858: PUSH
22859: LD_INT 3
22861: NEG
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 1
22869: PUSH
22870: LD_INT 2
22872: NEG
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 3
22880: PUSH
22881: LD_INT 2
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 3
22890: PUSH
22891: LD_INT 3
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 2
22900: PUSH
22901: LD_INT 3
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: LD_INT 3
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 0
22920: PUSH
22921: LD_INT 3
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 1
22930: NEG
22931: PUSH
22932: LD_INT 2
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 3
22941: NEG
22942: PUSH
22943: LD_INT 2
22945: NEG
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 3
22953: NEG
22954: PUSH
22955: LD_INT 3
22957: NEG
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22994: LD_ADDR_VAR 0 43
22998: PUSH
22999: LD_INT 0
23001: PUSH
23002: LD_INT 0
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 0
23011: PUSH
23012: LD_INT 1
23014: NEG
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: LD_INT 0
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 1
23032: PUSH
23033: LD_INT 1
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 0
23042: PUSH
23043: LD_INT 1
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 1
23052: NEG
23053: PUSH
23054: LD_INT 0
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 1
23063: NEG
23064: PUSH
23065: LD_INT 1
23067: NEG
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 1
23075: NEG
23076: PUSH
23077: LD_INT 2
23079: NEG
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 0
23087: PUSH
23088: LD_INT 2
23090: NEG
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 1
23098: PUSH
23099: LD_INT 1
23101: NEG
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 2
23109: PUSH
23110: LD_INT 0
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 2
23119: PUSH
23120: LD_INT 1
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 1
23129: PUSH
23130: LD_INT 2
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 0
23139: PUSH
23140: LD_INT 2
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 1
23149: NEG
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 2
23160: NEG
23161: PUSH
23162: LD_INT 0
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 2
23171: NEG
23172: PUSH
23173: LD_INT 1
23175: NEG
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 1
23183: NEG
23184: PUSH
23185: LD_INT 3
23187: NEG
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 0
23195: PUSH
23196: LD_INT 3
23198: NEG
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 1
23206: PUSH
23207: LD_INT 2
23209: NEG
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 2
23217: PUSH
23218: LD_INT 1
23220: NEG
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 3
23228: PUSH
23229: LD_INT 0
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 3
23238: PUSH
23239: LD_INT 1
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 1
23248: PUSH
23249: LD_INT 3
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 0
23258: PUSH
23259: LD_INT 3
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 1
23268: NEG
23269: PUSH
23270: LD_INT 2
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 2
23279: NEG
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 3
23290: NEG
23291: PUSH
23292: LD_INT 0
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 3
23301: NEG
23302: PUSH
23303: LD_INT 1
23305: NEG
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23342: LD_ADDR_VAR 0 44
23346: PUSH
23347: LD_INT 0
23349: PUSH
23350: LD_INT 0
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 0
23359: PUSH
23360: LD_INT 1
23362: NEG
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: LD_INT 0
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 1
23380: PUSH
23381: LD_INT 1
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 0
23390: PUSH
23391: LD_INT 1
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 1
23400: NEG
23401: PUSH
23402: LD_INT 0
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 1
23411: NEG
23412: PUSH
23413: LD_INT 1
23415: NEG
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 1
23423: NEG
23424: PUSH
23425: LD_INT 2
23427: NEG
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 1
23435: PUSH
23436: LD_INT 1
23438: NEG
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: LD_INT 0
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 2
23456: PUSH
23457: LD_INT 1
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 2
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: LD_INT 2
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 1
23486: NEG
23487: PUSH
23488: LD_INT 1
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 2
23497: NEG
23498: PUSH
23499: LD_INT 0
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 2
23508: NEG
23509: PUSH
23510: LD_INT 1
23512: NEG
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 2
23520: NEG
23521: PUSH
23522: LD_INT 2
23524: NEG
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 2
23532: NEG
23533: PUSH
23534: LD_INT 3
23536: NEG
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 2
23544: PUSH
23545: LD_INT 1
23547: NEG
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 3
23555: PUSH
23556: LD_INT 0
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 3
23565: PUSH
23566: LD_INT 1
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 3
23575: PUSH
23576: LD_INT 2
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 3
23585: PUSH
23586: LD_INT 3
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 2
23595: PUSH
23596: LD_INT 3
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 2
23605: NEG
23606: PUSH
23607: LD_INT 1
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 3
23616: NEG
23617: PUSH
23618: LD_INT 0
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 3
23627: NEG
23628: PUSH
23629: LD_INT 1
23631: NEG
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 3
23639: NEG
23640: PUSH
23641: LD_INT 2
23643: NEG
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 3
23651: NEG
23652: PUSH
23653: LD_INT 3
23655: NEG
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23692: LD_ADDR_VAR 0 45
23696: PUSH
23697: LD_INT 0
23699: PUSH
23700: LD_INT 0
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 0
23709: PUSH
23710: LD_INT 1
23712: NEG
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 1
23720: PUSH
23721: LD_INT 0
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 1
23730: PUSH
23731: LD_INT 1
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 0
23740: PUSH
23741: LD_INT 1
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 1
23750: NEG
23751: PUSH
23752: LD_INT 0
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 1
23761: NEG
23762: PUSH
23763: LD_INT 1
23765: NEG
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 1
23773: NEG
23774: PUSH
23775: LD_INT 2
23777: NEG
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 0
23785: PUSH
23786: LD_INT 2
23788: NEG
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 1
23796: PUSH
23797: LD_INT 1
23799: NEG
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 2
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 2
23817: PUSH
23818: LD_INT 2
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 1
23827: PUSH
23828: LD_INT 2
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 0
23837: PUSH
23838: LD_INT 2
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 1
23847: NEG
23848: PUSH
23849: LD_INT 1
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 2
23858: NEG
23859: PUSH
23860: LD_INT 1
23862: NEG
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 2
23870: NEG
23871: PUSH
23872: LD_INT 2
23874: NEG
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 2
23882: NEG
23883: PUSH
23884: LD_INT 3
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 1
23894: NEG
23895: PUSH
23896: LD_INT 3
23898: NEG
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 0
23906: PUSH
23907: LD_INT 3
23909: NEG
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: LD_INT 2
23920: NEG
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 3
23928: PUSH
23929: LD_INT 2
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 3
23938: PUSH
23939: LD_INT 3
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 2
23948: PUSH
23949: LD_INT 3
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 1
23958: PUSH
23959: LD_INT 3
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 0
23968: PUSH
23969: LD_INT 3
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 1
23978: NEG
23979: PUSH
23980: LD_INT 2
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 3
23989: NEG
23990: PUSH
23991: LD_INT 2
23993: NEG
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: LD_INT 3
24001: NEG
24002: PUSH
24003: LD_INT 3
24005: NEG
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24042: LD_ADDR_VAR 0 46
24046: PUSH
24047: LD_INT 0
24049: PUSH
24050: LD_INT 0
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: LD_INT 1
24062: NEG
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: PUSH
24071: LD_INT 0
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 1
24100: NEG
24101: PUSH
24102: LD_INT 0
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: LD_INT 1
24115: NEG
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: NEG
24124: PUSH
24125: LD_INT 2
24127: NEG
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 0
24135: PUSH
24136: LD_INT 2
24138: NEG
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: LD_INT 1
24149: NEG
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 2
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 2
24167: PUSH
24168: LD_INT 1
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 1
24177: PUSH
24178: LD_INT 2
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: LD_INT 2
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 1
24197: NEG
24198: PUSH
24199: LD_INT 1
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 2
24208: NEG
24209: PUSH
24210: LD_INT 0
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 2
24219: NEG
24220: PUSH
24221: LD_INT 1
24223: NEG
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 1
24231: NEG
24232: PUSH
24233: LD_INT 3
24235: NEG
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 0
24243: PUSH
24244: LD_INT 3
24246: NEG
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 1
24254: PUSH
24255: LD_INT 2
24257: NEG
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 2
24265: PUSH
24266: LD_INT 1
24268: NEG
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 3
24276: PUSH
24277: LD_INT 0
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 3
24286: PUSH
24287: LD_INT 1
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 1
24296: PUSH
24297: LD_INT 3
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 0
24306: PUSH
24307: LD_INT 3
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 1
24316: NEG
24317: PUSH
24318: LD_INT 2
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 2
24327: NEG
24328: PUSH
24329: LD_INT 1
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 3
24338: NEG
24339: PUSH
24340: LD_INT 0
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 3
24349: NEG
24350: PUSH
24351: LD_INT 1
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24390: LD_ADDR_VAR 0 47
24394: PUSH
24395: LD_INT 0
24397: PUSH
24398: LD_INT 0
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 0
24407: PUSH
24408: LD_INT 1
24410: NEG
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 1
24428: PUSH
24429: LD_INT 1
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: LD_INT 1
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 1
24448: NEG
24449: PUSH
24450: LD_INT 0
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 1
24459: NEG
24460: PUSH
24461: LD_INT 1
24463: NEG
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 1
24471: NEG
24472: PUSH
24473: LD_INT 2
24475: NEG
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 0
24483: PUSH
24484: LD_INT 2
24486: NEG
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: LD_INT 1
24497: NEG
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 2
24505: NEG
24506: PUSH
24507: LD_INT 1
24509: NEG
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 2
24517: NEG
24518: PUSH
24519: LD_INT 2
24521: NEG
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24541: LD_ADDR_VAR 0 48
24545: PUSH
24546: LD_INT 0
24548: PUSH
24549: LD_INT 0
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 0
24558: PUSH
24559: LD_INT 1
24561: NEG
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 1
24569: PUSH
24570: LD_INT 0
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 1
24579: PUSH
24580: LD_INT 1
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 0
24589: PUSH
24590: LD_INT 1
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 1
24599: NEG
24600: PUSH
24601: LD_INT 0
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 1
24610: NEG
24611: PUSH
24612: LD_INT 1
24614: NEG
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 1
24622: NEG
24623: PUSH
24624: LD_INT 2
24626: NEG
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 0
24634: PUSH
24635: LD_INT 2
24637: NEG
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 1
24645: PUSH
24646: LD_INT 1
24648: NEG
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 2
24656: PUSH
24657: LD_INT 0
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 2
24666: PUSH
24667: LD_INT 1
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24688: LD_ADDR_VAR 0 49
24692: PUSH
24693: LD_INT 0
24695: PUSH
24696: LD_INT 0
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 0
24705: PUSH
24706: LD_INT 1
24708: NEG
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: LD_INT 0
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: LD_INT 1
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 0
24736: PUSH
24737: LD_INT 1
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 1
24746: NEG
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 1
24757: NEG
24758: PUSH
24759: LD_INT 1
24761: NEG
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: LD_INT 1
24772: NEG
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 2
24780: PUSH
24781: LD_INT 0
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 2
24790: PUSH
24791: LD_INT 1
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 2
24800: PUSH
24801: LD_INT 2
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: PUSH
24811: LD_INT 2
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24832: LD_ADDR_VAR 0 50
24836: PUSH
24837: LD_INT 0
24839: PUSH
24840: LD_INT 0
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 0
24849: PUSH
24850: LD_INT 1
24852: NEG
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 1
24860: PUSH
24861: LD_INT 0
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 1
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 0
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: NEG
24891: PUSH
24892: LD_INT 0
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 1
24901: NEG
24902: PUSH
24903: LD_INT 1
24905: NEG
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 2
24913: PUSH
24914: LD_INT 1
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 2
24923: PUSH
24924: LD_INT 2
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 1
24933: PUSH
24934: LD_INT 2
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: LD_INT 2
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 1
24953: NEG
24954: PUSH
24955: LD_INT 1
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24976: LD_ADDR_VAR 0 51
24980: PUSH
24981: LD_INT 0
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 0
24993: PUSH
24994: LD_INT 1
24996: NEG
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 1
25004: PUSH
25005: LD_INT 0
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: LD_INT 1
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 0
25024: PUSH
25025: LD_INT 1
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 1
25034: NEG
25035: PUSH
25036: LD_INT 0
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: LD_INT 1
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 1
25057: PUSH
25058: LD_INT 2
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 0
25067: PUSH
25068: LD_INT 2
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 1
25077: NEG
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 2
25088: NEG
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 2
25099: NEG
25100: PUSH
25101: LD_INT 1
25103: NEG
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25123: LD_ADDR_VAR 0 52
25127: PUSH
25128: LD_INT 0
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 0
25140: PUSH
25141: LD_INT 1
25143: NEG
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 1
25151: PUSH
25152: LD_INT 0
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 1
25161: PUSH
25162: LD_INT 1
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: LD_INT 1
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 1
25181: NEG
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 1
25192: NEG
25193: PUSH
25194: LD_INT 1
25196: NEG
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 1
25204: NEG
25205: PUSH
25206: LD_INT 2
25208: NEG
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 1
25216: NEG
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 2
25227: NEG
25228: PUSH
25229: LD_INT 0
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 2
25238: NEG
25239: PUSH
25240: LD_INT 1
25242: NEG
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 2
25250: NEG
25251: PUSH
25252: LD_INT 2
25254: NEG
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25274: LD_ADDR_VAR 0 53
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: LD_INT 0
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 0
25291: PUSH
25292: LD_INT 1
25294: NEG
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 1
25302: PUSH
25303: LD_INT 0
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: LD_INT 1
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: LD_INT 1
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 1
25332: NEG
25333: PUSH
25334: LD_INT 0
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 1
25343: NEG
25344: PUSH
25345: LD_INT 1
25347: NEG
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 1
25355: NEG
25356: PUSH
25357: LD_INT 2
25359: NEG
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 0
25367: PUSH
25368: LD_INT 2
25370: NEG
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 1
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 2
25389: PUSH
25390: LD_INT 0
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 2
25399: PUSH
25400: LD_INT 1
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 2
25409: PUSH
25410: LD_INT 2
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 1
25419: PUSH
25420: LD_INT 2
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: LD_INT 2
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 1
25439: NEG
25440: PUSH
25441: LD_INT 1
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 2
25450: NEG
25451: PUSH
25452: LD_INT 0
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 2
25461: NEG
25462: PUSH
25463: LD_INT 1
25465: NEG
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 2
25473: NEG
25474: PUSH
25475: LD_INT 2
25477: NEG
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25504: LD_ADDR_VAR 0 54
25508: PUSH
25509: LD_INT 0
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: LD_INT 1
25524: NEG
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 0
25552: PUSH
25553: LD_INT 1
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 1
25562: NEG
25563: PUSH
25564: LD_INT 0
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 1
25573: NEG
25574: PUSH
25575: LD_INT 1
25577: NEG
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 1
25585: NEG
25586: PUSH
25587: LD_INT 2
25589: NEG
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 0
25597: PUSH
25598: LD_INT 2
25600: NEG
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 1
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 2
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 2
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 2
25639: PUSH
25640: LD_INT 2
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 1
25649: PUSH
25650: LD_INT 2
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: LD_INT 2
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 1
25669: NEG
25670: PUSH
25671: LD_INT 1
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 2
25680: NEG
25681: PUSH
25682: LD_INT 0
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 2
25691: NEG
25692: PUSH
25693: LD_INT 1
25695: NEG
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 2
25703: NEG
25704: PUSH
25705: LD_INT 2
25707: NEG
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25734: LD_ADDR_VAR 0 55
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: LD_INT 0
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: LD_INT 1
25754: NEG
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: LD_INT 0
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 1
25792: NEG
25793: PUSH
25794: LD_INT 0
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 1
25803: NEG
25804: PUSH
25805: LD_INT 1
25807: NEG
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: LD_INT 2
25819: NEG
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 0
25827: PUSH
25828: LD_INT 2
25830: NEG
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 1
25838: PUSH
25839: LD_INT 1
25841: NEG
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 2
25849: PUSH
25850: LD_INT 0
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 2
25859: PUSH
25860: LD_INT 1
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 2
25869: PUSH
25870: LD_INT 2
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 1
25879: PUSH
25880: LD_INT 2
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: LD_INT 2
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 1
25899: NEG
25900: PUSH
25901: LD_INT 1
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 2
25910: NEG
25911: PUSH
25912: LD_INT 0
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 2
25921: NEG
25922: PUSH
25923: LD_INT 1
25925: NEG
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 2
25933: NEG
25934: PUSH
25935: LD_INT 2
25937: NEG
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25964: LD_ADDR_VAR 0 56
25968: PUSH
25969: LD_INT 0
25971: PUSH
25972: LD_INT 0
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 0
25981: PUSH
25982: LD_INT 1
25984: NEG
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 1
25992: PUSH
25993: LD_INT 0
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 1
26002: PUSH
26003: LD_INT 1
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 0
26012: PUSH
26013: LD_INT 1
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 1
26022: NEG
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PUSH
26035: LD_INT 1
26037: NEG
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 1
26045: NEG
26046: PUSH
26047: LD_INT 2
26049: NEG
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 0
26057: PUSH
26058: LD_INT 2
26060: NEG
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: LD_INT 1
26071: NEG
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 2
26079: PUSH
26080: LD_INT 0
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 2
26089: PUSH
26090: LD_INT 1
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 2
26099: PUSH
26100: LD_INT 2
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 1
26109: PUSH
26110: LD_INT 2
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: LD_INT 2
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 1
26129: NEG
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 2
26140: NEG
26141: PUSH
26142: LD_INT 0
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 2
26151: NEG
26152: PUSH
26153: LD_INT 1
26155: NEG
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 2
26163: NEG
26164: PUSH
26165: LD_INT 2
26167: NEG
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26194: LD_ADDR_VAR 0 57
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: LD_INT 0
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 0
26211: PUSH
26212: LD_INT 1
26214: NEG
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 1
26222: PUSH
26223: LD_INT 0
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 1
26232: PUSH
26233: LD_INT 1
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 0
26242: PUSH
26243: LD_INT 1
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 1
26252: NEG
26253: PUSH
26254: LD_INT 0
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 1
26263: NEG
26264: PUSH
26265: LD_INT 1
26267: NEG
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: LD_INT 2
26279: NEG
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 0
26287: PUSH
26288: LD_INT 2
26290: NEG
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 1
26298: PUSH
26299: LD_INT 1
26301: NEG
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 2
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 2
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 2
26329: PUSH
26330: LD_INT 2
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 1
26339: PUSH
26340: LD_INT 2
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 0
26349: PUSH
26350: LD_INT 2
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 1
26359: NEG
26360: PUSH
26361: LD_INT 1
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 2
26370: NEG
26371: PUSH
26372: LD_INT 0
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 2
26381: NEG
26382: PUSH
26383: LD_INT 1
26385: NEG
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 2
26393: NEG
26394: PUSH
26395: LD_INT 2
26397: NEG
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26424: LD_ADDR_VAR 0 58
26428: PUSH
26429: LD_INT 0
26431: PUSH
26432: LD_INT 0
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 0
26441: PUSH
26442: LD_INT 1
26444: NEG
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 1
26452: PUSH
26453: LD_INT 0
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 1
26462: PUSH
26463: LD_INT 1
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: LD_INT 1
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 1
26482: NEG
26483: PUSH
26484: LD_INT 0
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 1
26493: NEG
26494: PUSH
26495: LD_INT 1
26497: NEG
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 1
26505: NEG
26506: PUSH
26507: LD_INT 2
26509: NEG
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 0
26517: PUSH
26518: LD_INT 2
26520: NEG
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 1
26528: PUSH
26529: LD_INT 1
26531: NEG
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 2
26539: PUSH
26540: LD_INT 0
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 2
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 2
26559: PUSH
26560: LD_INT 2
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 1
26569: PUSH
26570: LD_INT 2
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 0
26579: PUSH
26580: LD_INT 2
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 1
26589: NEG
26590: PUSH
26591: LD_INT 1
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 2
26600: NEG
26601: PUSH
26602: LD_INT 0
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 2
26611: NEG
26612: PUSH
26613: LD_INT 1
26615: NEG
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 2
26623: NEG
26624: PUSH
26625: LD_INT 2
26627: NEG
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26654: LD_ADDR_VAR 0 59
26658: PUSH
26659: LD_INT 0
26661: PUSH
26662: LD_INT 0
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 0
26671: PUSH
26672: LD_INT 1
26674: NEG
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 1
26682: PUSH
26683: LD_INT 0
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 1
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: LD_INT 1
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 1
26712: NEG
26713: PUSH
26714: LD_INT 0
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 1
26723: NEG
26724: PUSH
26725: LD_INT 1
26727: NEG
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26742: LD_ADDR_VAR 0 60
26746: PUSH
26747: LD_INT 0
26749: PUSH
26750: LD_INT 0
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: LD_INT 1
26762: NEG
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 1
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: LD_INT 1
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: NEG
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 1
26811: NEG
26812: PUSH
26813: LD_INT 1
26815: NEG
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26830: LD_ADDR_VAR 0 61
26834: PUSH
26835: LD_INT 0
26837: PUSH
26838: LD_INT 0
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 0
26847: PUSH
26848: LD_INT 1
26850: NEG
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 1
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 1
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 0
26878: PUSH
26879: LD_INT 1
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 1
26888: NEG
26889: PUSH
26890: LD_INT 0
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: NEG
26900: PUSH
26901: LD_INT 1
26903: NEG
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26918: LD_ADDR_VAR 0 62
26922: PUSH
26923: LD_INT 0
26925: PUSH
26926: LD_INT 0
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 0
26935: PUSH
26936: LD_INT 1
26938: NEG
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 1
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 1
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 0
26966: PUSH
26967: LD_INT 1
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 1
26976: NEG
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 1
26987: NEG
26988: PUSH
26989: LD_INT 1
26991: NEG
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27006: LD_ADDR_VAR 0 63
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: LD_INT 1
27026: NEG
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: PUSH
27045: LD_INT 1
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 1
27064: NEG
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 1
27075: NEG
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27094: LD_ADDR_VAR 0 64
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: LD_INT 0
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: LD_INT 1
27114: NEG
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 1
27132: PUSH
27133: LD_INT 1
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 0
27142: PUSH
27143: LD_INT 1
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 1
27152: NEG
27153: PUSH
27154: LD_INT 0
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 1
27163: NEG
27164: PUSH
27165: LD_INT 1
27167: NEG
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: ST_TO_ADDR
// end ; 1 :
27182: GO 33079
27184: LD_INT 1
27186: DOUBLE
27187: EQUAL
27188: IFTRUE 27192
27190: GO 29815
27192: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27193: LD_ADDR_VAR 0 11
27197: PUSH
27198: LD_INT 1
27200: NEG
27201: PUSH
27202: LD_INT 3
27204: NEG
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: LD_INT 3
27215: NEG
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: LD_INT 2
27226: NEG
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: LIST
27236: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27237: LD_ADDR_VAR 0 12
27241: PUSH
27242: LD_INT 2
27244: PUSH
27245: LD_INT 1
27247: NEG
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 3
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 3
27265: PUSH
27266: LD_INT 1
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: LIST
27277: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27278: LD_ADDR_VAR 0 13
27282: PUSH
27283: LD_INT 3
27285: PUSH
27286: LD_INT 2
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 3
27295: PUSH
27296: LD_INT 3
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 2
27305: PUSH
27306: LD_INT 3
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: LIST
27317: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27318: LD_ADDR_VAR 0 14
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: LD_INT 3
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 0
27335: PUSH
27336: LD_INT 3
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 1
27345: NEG
27346: PUSH
27347: LD_INT 2
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: LIST
27358: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27359: LD_ADDR_VAR 0 15
27363: PUSH
27364: LD_INT 2
27366: NEG
27367: PUSH
27368: LD_INT 1
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 3
27377: NEG
27378: PUSH
27379: LD_INT 0
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 3
27388: NEG
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: LIST
27402: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27403: LD_ADDR_VAR 0 16
27407: PUSH
27408: LD_INT 2
27410: NEG
27411: PUSH
27412: LD_INT 3
27414: NEG
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 3
27422: NEG
27423: PUSH
27424: LD_INT 2
27426: NEG
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 3
27434: NEG
27435: PUSH
27436: LD_INT 3
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: LIST
27448: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27449: LD_ADDR_VAR 0 17
27453: PUSH
27454: LD_INT 1
27456: NEG
27457: PUSH
27458: LD_INT 3
27460: NEG
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 0
27468: PUSH
27469: LD_INT 3
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: PUSH
27480: LD_INT 2
27482: NEG
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: LIST
27492: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27493: LD_ADDR_VAR 0 18
27497: PUSH
27498: LD_INT 2
27500: PUSH
27501: LD_INT 1
27503: NEG
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 3
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 3
27521: PUSH
27522: LD_INT 1
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: LIST
27533: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27534: LD_ADDR_VAR 0 19
27538: PUSH
27539: LD_INT 3
27541: PUSH
27542: LD_INT 2
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 3
27551: PUSH
27552: LD_INT 3
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 2
27561: PUSH
27562: LD_INT 3
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: LIST
27573: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27574: LD_ADDR_VAR 0 20
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: LD_INT 3
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: LD_INT 3
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 1
27601: NEG
27602: PUSH
27603: LD_INT 2
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: LIST
27614: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27615: LD_ADDR_VAR 0 21
27619: PUSH
27620: LD_INT 2
27622: NEG
27623: PUSH
27624: LD_INT 1
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 3
27633: NEG
27634: PUSH
27635: LD_INT 0
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 3
27644: NEG
27645: PUSH
27646: LD_INT 1
27648: NEG
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: LIST
27658: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27659: LD_ADDR_VAR 0 22
27663: PUSH
27664: LD_INT 2
27666: NEG
27667: PUSH
27668: LD_INT 3
27670: NEG
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 3
27678: NEG
27679: PUSH
27680: LD_INT 2
27682: NEG
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 3
27690: NEG
27691: PUSH
27692: LD_INT 3
27694: NEG
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: LIST
27704: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27705: LD_ADDR_VAR 0 23
27709: PUSH
27710: LD_INT 0
27712: PUSH
27713: LD_INT 3
27715: NEG
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 1
27723: NEG
27724: PUSH
27725: LD_INT 4
27727: NEG
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 1
27735: PUSH
27736: LD_INT 3
27738: NEG
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: LIST
27748: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27749: LD_ADDR_VAR 0 24
27753: PUSH
27754: LD_INT 3
27756: PUSH
27757: LD_INT 0
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 3
27766: PUSH
27767: LD_INT 1
27769: NEG
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 4
27777: PUSH
27778: LD_INT 1
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: LIST
27789: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27790: LD_ADDR_VAR 0 25
27794: PUSH
27795: LD_INT 3
27797: PUSH
27798: LD_INT 3
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 4
27807: PUSH
27808: LD_INT 3
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 3
27817: PUSH
27818: LD_INT 4
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: LIST
27829: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27830: LD_ADDR_VAR 0 26
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: LD_INT 3
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 1
27847: PUSH
27848: LD_INT 4
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: LD_INT 3
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: LIST
27870: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27871: LD_ADDR_VAR 0 27
27875: PUSH
27876: LD_INT 3
27878: NEG
27879: PUSH
27880: LD_INT 0
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 3
27889: NEG
27890: PUSH
27891: LD_INT 1
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 4
27900: NEG
27901: PUSH
27902: LD_INT 1
27904: NEG
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: LIST
27914: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27915: LD_ADDR_VAR 0 28
27919: PUSH
27920: LD_INT 3
27922: NEG
27923: PUSH
27924: LD_INT 3
27926: NEG
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 3
27934: NEG
27935: PUSH
27936: LD_INT 4
27938: NEG
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 4
27946: NEG
27947: PUSH
27948: LD_INT 3
27950: NEG
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: LIST
27960: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27961: LD_ADDR_VAR 0 29
27965: PUSH
27966: LD_INT 1
27968: NEG
27969: PUSH
27970: LD_INT 3
27972: NEG
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 0
27980: PUSH
27981: LD_INT 3
27983: NEG
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 1
27991: PUSH
27992: LD_INT 2
27994: NEG
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 1
28002: NEG
28003: PUSH
28004: LD_INT 4
28006: NEG
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: LD_INT 4
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 1
28025: PUSH
28026: LD_INT 3
28028: NEG
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 1
28036: NEG
28037: PUSH
28038: LD_INT 5
28040: NEG
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 0
28048: PUSH
28049: LD_INT 5
28051: NEG
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 1
28059: PUSH
28060: LD_INT 4
28062: NEG
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 1
28070: NEG
28071: PUSH
28072: LD_INT 6
28074: NEG
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 0
28082: PUSH
28083: LD_INT 6
28085: NEG
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: PUSH
28094: LD_INT 5
28096: NEG
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28116: LD_ADDR_VAR 0 30
28120: PUSH
28121: LD_INT 2
28123: PUSH
28124: LD_INT 1
28126: NEG
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 3
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 3
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 3
28154: PUSH
28155: LD_INT 1
28157: NEG
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 4
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 4
28175: PUSH
28176: LD_INT 1
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 4
28185: PUSH
28186: LD_INT 1
28188: NEG
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 5
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 5
28206: PUSH
28207: LD_INT 1
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 5
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 6
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 6
28237: PUSH
28238: LD_INT 1
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28259: LD_ADDR_VAR 0 31
28263: PUSH
28264: LD_INT 3
28266: PUSH
28267: LD_INT 2
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 3
28276: PUSH
28277: LD_INT 3
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 2
28286: PUSH
28287: LD_INT 3
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 4
28296: PUSH
28297: LD_INT 3
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 4
28306: PUSH
28307: LD_INT 4
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 3
28316: PUSH
28317: LD_INT 4
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 5
28326: PUSH
28327: LD_INT 4
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 5
28336: PUSH
28337: LD_INT 5
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 4
28346: PUSH
28347: LD_INT 5
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 6
28356: PUSH
28357: LD_INT 5
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 6
28366: PUSH
28367: LD_INT 6
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 5
28376: PUSH
28377: LD_INT 6
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28398: LD_ADDR_VAR 0 32
28402: PUSH
28403: LD_INT 1
28405: PUSH
28406: LD_INT 3
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 0
28415: PUSH
28416: LD_INT 3
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 1
28425: NEG
28426: PUSH
28427: LD_INT 2
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 1
28436: PUSH
28437: LD_INT 4
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 0
28446: PUSH
28447: LD_INT 4
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 1
28456: NEG
28457: PUSH
28458: LD_INT 3
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: LD_INT 5
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 0
28477: PUSH
28478: LD_INT 5
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 1
28487: NEG
28488: PUSH
28489: LD_INT 4
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 1
28498: PUSH
28499: LD_INT 6
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 0
28508: PUSH
28509: LD_INT 6
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 1
28518: NEG
28519: PUSH
28520: LD_INT 5
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28541: LD_ADDR_VAR 0 33
28545: PUSH
28546: LD_INT 2
28548: NEG
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 3
28559: NEG
28560: PUSH
28561: LD_INT 0
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 3
28570: NEG
28571: PUSH
28572: LD_INT 1
28574: NEG
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 3
28582: NEG
28583: PUSH
28584: LD_INT 1
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 4
28593: NEG
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 4
28604: NEG
28605: PUSH
28606: LD_INT 1
28608: NEG
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 4
28616: NEG
28617: PUSH
28618: LD_INT 1
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 5
28627: NEG
28628: PUSH
28629: LD_INT 0
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 5
28638: NEG
28639: PUSH
28640: LD_INT 1
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 5
28650: NEG
28651: PUSH
28652: LD_INT 1
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 6
28661: NEG
28662: PUSH
28663: LD_INT 0
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 6
28672: NEG
28673: PUSH
28674: LD_INT 1
28676: NEG
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28696: LD_ADDR_VAR 0 34
28700: PUSH
28701: LD_INT 2
28703: NEG
28704: PUSH
28705: LD_INT 3
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 3
28715: NEG
28716: PUSH
28717: LD_INT 2
28719: NEG
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 3
28727: NEG
28728: PUSH
28729: LD_INT 3
28731: NEG
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 3
28739: NEG
28740: PUSH
28741: LD_INT 4
28743: NEG
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 4
28751: NEG
28752: PUSH
28753: LD_INT 3
28755: NEG
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 4
28763: NEG
28764: PUSH
28765: LD_INT 4
28767: NEG
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 4
28775: NEG
28776: PUSH
28777: LD_INT 5
28779: NEG
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 5
28787: NEG
28788: PUSH
28789: LD_INT 4
28791: NEG
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 5
28799: NEG
28800: PUSH
28801: LD_INT 5
28803: NEG
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 5
28811: NEG
28812: PUSH
28813: LD_INT 6
28815: NEG
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 6
28823: NEG
28824: PUSH
28825: LD_INT 5
28827: NEG
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 6
28835: NEG
28836: PUSH
28837: LD_INT 6
28839: NEG
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28859: LD_ADDR_VAR 0 41
28863: PUSH
28864: LD_INT 0
28866: PUSH
28867: LD_INT 2
28869: NEG
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 1
28877: NEG
28878: PUSH
28879: LD_INT 3
28881: NEG
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 1
28889: PUSH
28890: LD_INT 2
28892: NEG
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: LIST
28902: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28903: LD_ADDR_VAR 0 42
28907: PUSH
28908: LD_INT 2
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 2
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 3
28931: PUSH
28932: LD_INT 1
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: LIST
28943: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28944: LD_ADDR_VAR 0 43
28948: PUSH
28949: LD_INT 2
28951: PUSH
28952: LD_INT 2
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 3
28961: PUSH
28962: LD_INT 2
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 2
28971: PUSH
28972: LD_INT 3
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: LIST
28983: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28984: LD_ADDR_VAR 0 44
28988: PUSH
28989: LD_INT 0
28991: PUSH
28992: LD_INT 2
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 1
29001: PUSH
29002: LD_INT 3
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 1
29011: NEG
29012: PUSH
29013: LD_INT 2
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: LIST
29024: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29025: LD_ADDR_VAR 0 45
29029: PUSH
29030: LD_INT 2
29032: NEG
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 2
29043: NEG
29044: PUSH
29045: LD_INT 1
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 3
29054: NEG
29055: PUSH
29056: LD_INT 1
29058: NEG
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: LIST
29068: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29069: LD_ADDR_VAR 0 46
29073: PUSH
29074: LD_INT 2
29076: NEG
29077: PUSH
29078: LD_INT 2
29080: NEG
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 2
29088: NEG
29089: PUSH
29090: LD_INT 3
29092: NEG
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 3
29100: NEG
29101: PUSH
29102: LD_INT 2
29104: NEG
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: LIST
29114: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29115: LD_ADDR_VAR 0 47
29119: PUSH
29120: LD_INT 2
29122: NEG
29123: PUSH
29124: LD_INT 3
29126: NEG
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: LD_INT 3
29138: NEG
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29148: LD_ADDR_VAR 0 48
29152: PUSH
29153: LD_INT 1
29155: PUSH
29156: LD_INT 2
29158: NEG
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 2
29166: PUSH
29167: LD_INT 1
29169: NEG
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29179: LD_ADDR_VAR 0 49
29183: PUSH
29184: LD_INT 3
29186: PUSH
29187: LD_INT 1
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 3
29196: PUSH
29197: LD_INT 2
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29208: LD_ADDR_VAR 0 50
29212: PUSH
29213: LD_INT 2
29215: PUSH
29216: LD_INT 3
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 1
29225: PUSH
29226: LD_INT 3
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29237: LD_ADDR_VAR 0 51
29241: PUSH
29242: LD_INT 1
29244: NEG
29245: PUSH
29246: LD_INT 2
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 2
29255: NEG
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29268: LD_ADDR_VAR 0 52
29272: PUSH
29273: LD_INT 3
29275: NEG
29276: PUSH
29277: LD_INT 1
29279: NEG
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 3
29287: NEG
29288: PUSH
29289: LD_INT 2
29291: NEG
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29301: LD_ADDR_VAR 0 53
29305: PUSH
29306: LD_INT 1
29308: NEG
29309: PUSH
29310: LD_INT 3
29312: NEG
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 0
29320: PUSH
29321: LD_INT 3
29323: NEG
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 1
29331: PUSH
29332: LD_INT 2
29334: NEG
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: LIST
29344: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29345: LD_ADDR_VAR 0 54
29349: PUSH
29350: LD_INT 2
29352: PUSH
29353: LD_INT 1
29355: NEG
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 3
29363: PUSH
29364: LD_INT 0
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 3
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: LIST
29385: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29386: LD_ADDR_VAR 0 55
29390: PUSH
29391: LD_INT 3
29393: PUSH
29394: LD_INT 2
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 3
29403: PUSH
29404: LD_INT 3
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 2
29413: PUSH
29414: LD_INT 3
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: LIST
29425: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29426: LD_ADDR_VAR 0 56
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: LD_INT 3
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: LD_INT 3
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 1
29453: NEG
29454: PUSH
29455: LD_INT 2
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: LIST
29466: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29467: LD_ADDR_VAR 0 57
29471: PUSH
29472: LD_INT 2
29474: NEG
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 3
29485: NEG
29486: PUSH
29487: LD_INT 0
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 3
29496: NEG
29497: PUSH
29498: LD_INT 1
29500: NEG
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: LIST
29510: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29511: LD_ADDR_VAR 0 58
29515: PUSH
29516: LD_INT 2
29518: NEG
29519: PUSH
29520: LD_INT 3
29522: NEG
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 3
29530: NEG
29531: PUSH
29532: LD_INT 2
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 3
29542: NEG
29543: PUSH
29544: LD_INT 3
29546: NEG
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: LIST
29556: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29557: LD_ADDR_VAR 0 59
29561: PUSH
29562: LD_INT 1
29564: NEG
29565: PUSH
29566: LD_INT 2
29568: NEG
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 0
29576: PUSH
29577: LD_INT 2
29579: NEG
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 1
29587: PUSH
29588: LD_INT 1
29590: NEG
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: LIST
29600: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29601: LD_ADDR_VAR 0 60
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: LD_INT 1
29611: NEG
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 2
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 2
29629: PUSH
29630: LD_INT 1
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: LIST
29641: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29642: LD_ADDR_VAR 0 61
29646: PUSH
29647: LD_INT 2
29649: PUSH
29650: LD_INT 1
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 2
29659: PUSH
29660: LD_INT 2
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 1
29669: PUSH
29670: LD_INT 2
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: LIST
29681: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29682: LD_ADDR_VAR 0 62
29686: PUSH
29687: LD_INT 1
29689: PUSH
29690: LD_INT 2
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: LD_INT 2
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 1
29709: NEG
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: LIST
29722: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29723: LD_ADDR_VAR 0 63
29727: PUSH
29728: LD_INT 1
29730: NEG
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 2
29741: NEG
29742: PUSH
29743: LD_INT 0
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 2
29752: NEG
29753: PUSH
29754: LD_INT 1
29756: NEG
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: LIST
29766: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29767: LD_ADDR_VAR 0 64
29771: PUSH
29772: LD_INT 1
29774: NEG
29775: PUSH
29776: LD_INT 2
29778: NEG
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 2
29786: NEG
29787: PUSH
29788: LD_INT 1
29790: NEG
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 2
29798: NEG
29799: PUSH
29800: LD_INT 2
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: LIST
29812: ST_TO_ADDR
// end ; 2 :
29813: GO 33079
29815: LD_INT 2
29817: DOUBLE
29818: EQUAL
29819: IFTRUE 29823
29821: GO 33078
29823: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29824: LD_ADDR_VAR 0 29
29828: PUSH
29829: LD_INT 4
29831: PUSH
29832: LD_INT 0
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 4
29841: PUSH
29842: LD_INT 1
29844: NEG
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 5
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 5
29862: PUSH
29863: LD_INT 1
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 4
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: LD_INT 0
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 3
29892: PUSH
29893: LD_INT 1
29895: NEG
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 3
29903: PUSH
29904: LD_INT 2
29906: NEG
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 5
29914: PUSH
29915: LD_INT 2
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 3
29924: PUSH
29925: LD_INT 3
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 3
29934: PUSH
29935: LD_INT 2
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 4
29944: PUSH
29945: LD_INT 3
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 4
29954: PUSH
29955: LD_INT 4
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 3
29964: PUSH
29965: LD_INT 4
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 2
29974: PUSH
29975: LD_INT 3
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 2
29984: PUSH
29985: LD_INT 2
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 4
29994: PUSH
29995: LD_INT 2
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: LD_INT 4
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 0
30014: PUSH
30015: LD_INT 4
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 0
30024: PUSH
30025: LD_INT 3
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 1
30034: PUSH
30035: LD_INT 4
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 1
30044: PUSH
30045: LD_INT 5
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: LD_INT 5
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 1
30064: NEG
30065: PUSH
30066: LD_INT 4
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 1
30075: NEG
30076: PUSH
30077: LD_INT 3
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 2
30086: PUSH
30087: LD_INT 5
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 2
30096: NEG
30097: PUSH
30098: LD_INT 3
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 3
30107: NEG
30108: PUSH
30109: LD_INT 0
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 3
30118: NEG
30119: PUSH
30120: LD_INT 1
30122: NEG
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 2
30130: NEG
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 2
30141: NEG
30142: PUSH
30143: LD_INT 1
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 3
30152: NEG
30153: PUSH
30154: LD_INT 1
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 4
30163: NEG
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 4
30174: NEG
30175: PUSH
30176: LD_INT 1
30178: NEG
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 4
30186: NEG
30187: PUSH
30188: LD_INT 2
30190: NEG
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 2
30198: NEG
30199: PUSH
30200: LD_INT 2
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 4
30209: NEG
30210: PUSH
30211: LD_INT 4
30213: NEG
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 4
30221: NEG
30222: PUSH
30223: LD_INT 5
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 3
30233: NEG
30234: PUSH
30235: LD_INT 4
30237: NEG
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 3
30245: NEG
30246: PUSH
30247: LD_INT 3
30249: NEG
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 4
30257: NEG
30258: PUSH
30259: LD_INT 3
30261: NEG
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 5
30269: NEG
30270: PUSH
30271: LD_INT 4
30273: NEG
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 5
30281: NEG
30282: PUSH
30283: LD_INT 5
30285: NEG
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 3
30293: NEG
30294: PUSH
30295: LD_INT 5
30297: NEG
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 5
30305: NEG
30306: PUSH
30307: LD_INT 3
30309: NEG
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30362: LD_ADDR_VAR 0 30
30366: PUSH
30367: LD_INT 4
30369: PUSH
30370: LD_INT 4
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 4
30379: PUSH
30380: LD_INT 3
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 5
30389: PUSH
30390: LD_INT 4
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 5
30399: PUSH
30400: LD_INT 5
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 4
30409: PUSH
30410: LD_INT 5
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 3
30419: PUSH
30420: LD_INT 4
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 3
30429: PUSH
30430: LD_INT 3
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 5
30439: PUSH
30440: LD_INT 3
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 3
30449: PUSH
30450: LD_INT 5
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: LD_INT 3
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: LD_INT 2
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 1
30479: PUSH
30480: LD_INT 3
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: LD_INT 4
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 0
30499: PUSH
30500: LD_INT 4
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 1
30509: NEG
30510: PUSH
30511: LD_INT 3
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 1
30520: NEG
30521: PUSH
30522: LD_INT 2
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 2
30531: PUSH
30532: LD_INT 4
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 2
30541: NEG
30542: PUSH
30543: LD_INT 2
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 4
30552: NEG
30553: PUSH
30554: LD_INT 0
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 4
30563: NEG
30564: PUSH
30565: LD_INT 1
30567: NEG
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 3
30575: NEG
30576: PUSH
30577: LD_INT 0
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 3
30586: NEG
30587: PUSH
30588: LD_INT 1
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 4
30597: NEG
30598: PUSH
30599: LD_INT 1
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 5
30608: NEG
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 5
30619: NEG
30620: PUSH
30621: LD_INT 1
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 5
30631: NEG
30632: PUSH
30633: LD_INT 2
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 3
30643: NEG
30644: PUSH
30645: LD_INT 2
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 3
30654: NEG
30655: PUSH
30656: LD_INT 3
30658: NEG
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 3
30666: NEG
30667: PUSH
30668: LD_INT 4
30670: NEG
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 2
30678: NEG
30679: PUSH
30680: LD_INT 3
30682: NEG
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 2
30690: NEG
30691: PUSH
30692: LD_INT 2
30694: NEG
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 3
30702: NEG
30703: PUSH
30704: LD_INT 2
30706: NEG
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 4
30714: NEG
30715: PUSH
30716: LD_INT 3
30718: NEG
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 4
30726: NEG
30727: PUSH
30728: LD_INT 4
30730: NEG
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 2
30738: NEG
30739: PUSH
30740: LD_INT 4
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 4
30750: NEG
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 0
30762: PUSH
30763: LD_INT 4
30765: NEG
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 0
30773: PUSH
30774: LD_INT 5
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 1
30784: PUSH
30785: LD_INT 4
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 1
30795: PUSH
30796: LD_INT 3
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 0
30806: PUSH
30807: LD_INT 3
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 1
30817: NEG
30818: PUSH
30819: LD_INT 4
30821: NEG
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 1
30829: NEG
30830: PUSH
30831: LD_INT 5
30833: NEG
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 2
30841: PUSH
30842: LD_INT 3
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 2
30852: NEG
30853: PUSH
30854: LD_INT 5
30856: NEG
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30909: LD_ADDR_VAR 0 31
30913: PUSH
30914: LD_INT 0
30916: PUSH
30917: LD_INT 4
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 0
30926: PUSH
30927: LD_INT 3
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: LD_INT 4
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: LD_INT 5
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: LD_INT 5
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 1
30966: NEG
30967: PUSH
30968: LD_INT 4
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: NEG
30978: PUSH
30979: LD_INT 3
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 2
30988: PUSH
30989: LD_INT 5
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 2
30998: NEG
30999: PUSH
31000: LD_INT 3
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 3
31009: NEG
31010: PUSH
31011: LD_INT 0
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 3
31020: NEG
31021: PUSH
31022: LD_INT 1
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 2
31032: NEG
31033: PUSH
31034: LD_INT 0
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 2
31043: NEG
31044: PUSH
31045: LD_INT 1
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 3
31054: NEG
31055: PUSH
31056: LD_INT 1
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 4
31065: NEG
31066: PUSH
31067: LD_INT 0
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 4
31076: NEG
31077: PUSH
31078: LD_INT 1
31080: NEG
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 4
31088: NEG
31089: PUSH
31090: LD_INT 2
31092: NEG
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 2
31100: NEG
31101: PUSH
31102: LD_INT 2
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 4
31111: NEG
31112: PUSH
31113: LD_INT 4
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 4
31123: NEG
31124: PUSH
31125: LD_INT 5
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 3
31135: NEG
31136: PUSH
31137: LD_INT 4
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 3
31147: NEG
31148: PUSH
31149: LD_INT 3
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 4
31159: NEG
31160: PUSH
31161: LD_INT 3
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 5
31171: NEG
31172: PUSH
31173: LD_INT 4
31175: NEG
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 5
31183: NEG
31184: PUSH
31185: LD_INT 5
31187: NEG
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 3
31195: NEG
31196: PUSH
31197: LD_INT 5
31199: NEG
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 5
31207: NEG
31208: PUSH
31209: LD_INT 3
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 0
31219: PUSH
31220: LD_INT 3
31222: NEG
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: LD_INT 4
31233: NEG
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 1
31241: PUSH
31242: LD_INT 3
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 1
31252: PUSH
31253: LD_INT 2
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: LD_INT 2
31266: NEG
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 1
31274: NEG
31275: PUSH
31276: LD_INT 3
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: NEG
31287: PUSH
31288: LD_INT 4
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 2
31298: PUSH
31299: LD_INT 2
31301: NEG
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 2
31309: NEG
31310: PUSH
31311: LD_INT 4
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 4
31321: PUSH
31322: LD_INT 0
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 4
31331: PUSH
31332: LD_INT 1
31334: NEG
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 5
31342: PUSH
31343: LD_INT 0
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 5
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 4
31362: PUSH
31363: LD_INT 1
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 3
31372: PUSH
31373: LD_INT 0
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 3
31382: PUSH
31383: LD_INT 1
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 3
31393: PUSH
31394: LD_INT 2
31396: NEG
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 5
31404: PUSH
31405: LD_INT 2
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31459: LD_ADDR_VAR 0 32
31463: PUSH
31464: LD_INT 4
31466: NEG
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 4
31477: NEG
31478: PUSH
31479: LD_INT 1
31481: NEG
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 3
31489: NEG
31490: PUSH
31491: LD_INT 0
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 3
31500: NEG
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 4
31511: NEG
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 5
31522: NEG
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 5
31533: NEG
31534: PUSH
31535: LD_INT 1
31537: NEG
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 5
31545: NEG
31546: PUSH
31547: LD_INT 2
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 3
31557: NEG
31558: PUSH
31559: LD_INT 2
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 3
31568: NEG
31569: PUSH
31570: LD_INT 3
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 3
31580: NEG
31581: PUSH
31582: LD_INT 4
31584: NEG
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: LD_INT 3
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 2
31604: NEG
31605: PUSH
31606: LD_INT 2
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 3
31616: NEG
31617: PUSH
31618: LD_INT 2
31620: NEG
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 4
31628: NEG
31629: PUSH
31630: LD_INT 3
31632: NEG
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 4
31640: NEG
31641: PUSH
31642: LD_INT 4
31644: NEG
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 2
31652: NEG
31653: PUSH
31654: LD_INT 4
31656: NEG
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 4
31664: NEG
31665: PUSH
31666: LD_INT 2
31668: NEG
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: LD_INT 4
31679: NEG
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 0
31687: PUSH
31688: LD_INT 5
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 1
31698: PUSH
31699: LD_INT 4
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: PUSH
31710: LD_INT 3
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 0
31720: PUSH
31721: LD_INT 3
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 1
31731: NEG
31732: PUSH
31733: LD_INT 4
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 1
31743: NEG
31744: PUSH
31745: LD_INT 5
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 2
31755: PUSH
31756: LD_INT 3
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 2
31766: NEG
31767: PUSH
31768: LD_INT 5
31770: NEG
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 3
31778: PUSH
31779: LD_INT 0
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 3
31788: PUSH
31789: LD_INT 1
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 4
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 4
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 3
31819: PUSH
31820: LD_INT 1
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 2
31829: PUSH
31830: LD_INT 0
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 2
31839: PUSH
31840: LD_INT 1
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: LD_INT 2
31853: NEG
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 4
31861: PUSH
31862: LD_INT 2
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 4
31871: PUSH
31872: LD_INT 4
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 4
31881: PUSH
31882: LD_INT 3
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 5
31891: PUSH
31892: LD_INT 4
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 5
31901: PUSH
31902: LD_INT 5
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 4
31911: PUSH
31912: LD_INT 5
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 3
31921: PUSH
31922: LD_INT 4
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 3
31931: PUSH
31932: LD_INT 3
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 5
31941: PUSH
31942: LD_INT 3
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 3
31951: PUSH
31952: LD_INT 5
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32006: LD_ADDR_VAR 0 33
32010: PUSH
32011: LD_INT 4
32013: NEG
32014: PUSH
32015: LD_INT 4
32017: NEG
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 4
32025: NEG
32026: PUSH
32027: LD_INT 5
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 3
32037: NEG
32038: PUSH
32039: LD_INT 4
32041: NEG
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 3
32049: NEG
32050: PUSH
32051: LD_INT 3
32053: NEG
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 4
32061: NEG
32062: PUSH
32063: LD_INT 3
32065: NEG
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 5
32073: NEG
32074: PUSH
32075: LD_INT 4
32077: NEG
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 5
32085: NEG
32086: PUSH
32087: LD_INT 5
32089: NEG
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 3
32097: NEG
32098: PUSH
32099: LD_INT 5
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 5
32109: NEG
32110: PUSH
32111: LD_INT 3
32113: NEG
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 0
32121: PUSH
32122: LD_INT 3
32124: NEG
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 0
32132: PUSH
32133: LD_INT 4
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: LD_INT 3
32146: NEG
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 1
32154: PUSH
32155: LD_INT 2
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 0
32165: PUSH
32166: LD_INT 2
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 1
32176: NEG
32177: PUSH
32178: LD_INT 3
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 1
32188: NEG
32189: PUSH
32190: LD_INT 4
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 2
32200: PUSH
32201: LD_INT 2
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 2
32211: NEG
32212: PUSH
32213: LD_INT 4
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 4
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 4
32233: PUSH
32234: LD_INT 1
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 5
32244: PUSH
32245: LD_INT 0
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 5
32254: PUSH
32255: LD_INT 1
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 4
32264: PUSH
32265: LD_INT 1
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 3
32274: PUSH
32275: LD_INT 0
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 3
32284: PUSH
32285: LD_INT 1
32287: NEG
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 3
32295: PUSH
32296: LD_INT 2
32298: NEG
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 5
32306: PUSH
32307: LD_INT 2
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 3
32316: PUSH
32317: LD_INT 3
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 3
32326: PUSH
32327: LD_INT 2
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 4
32336: PUSH
32337: LD_INT 3
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 4
32346: PUSH
32347: LD_INT 4
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 3
32356: PUSH
32357: LD_INT 4
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 2
32366: PUSH
32367: LD_INT 3
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 2
32376: PUSH
32377: LD_INT 2
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 4
32386: PUSH
32387: LD_INT 2
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 2
32396: PUSH
32397: LD_INT 4
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 0
32406: PUSH
32407: LD_INT 4
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 0
32416: PUSH
32417: LD_INT 3
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: LD_INT 4
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: LD_INT 5
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 0
32446: PUSH
32447: LD_INT 5
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 1
32456: NEG
32457: PUSH
32458: LD_INT 4
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: NEG
32468: PUSH
32469: LD_INT 3
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 2
32478: PUSH
32479: LD_INT 5
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 2
32488: NEG
32489: PUSH
32490: LD_INT 3
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32544: LD_ADDR_VAR 0 34
32548: PUSH
32549: LD_INT 0
32551: PUSH
32552: LD_INT 4
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: LD_INT 5
32565: NEG
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 1
32573: PUSH
32574: LD_INT 4
32576: NEG
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 1
32584: PUSH
32585: LD_INT 3
32587: NEG
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 0
32595: PUSH
32596: LD_INT 3
32598: NEG
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 1
32606: NEG
32607: PUSH
32608: LD_INT 4
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 1
32618: NEG
32619: PUSH
32620: LD_INT 5
32622: NEG
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 2
32630: PUSH
32631: LD_INT 3
32633: NEG
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 2
32641: NEG
32642: PUSH
32643: LD_INT 5
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 3
32653: PUSH
32654: LD_INT 0
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 3
32663: PUSH
32664: LD_INT 1
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 4
32674: PUSH
32675: LD_INT 0
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 4
32684: PUSH
32685: LD_INT 1
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 3
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 2
32704: PUSH
32705: LD_INT 0
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 2
32714: PUSH
32715: LD_INT 1
32717: NEG
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 2
32725: PUSH
32726: LD_INT 2
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 4
32736: PUSH
32737: LD_INT 2
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 4
32746: PUSH
32747: LD_INT 4
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 4
32756: PUSH
32757: LD_INT 3
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 5
32766: PUSH
32767: LD_INT 4
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 5
32776: PUSH
32777: LD_INT 5
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 4
32786: PUSH
32787: LD_INT 5
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 3
32796: PUSH
32797: LD_INT 4
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 3
32806: PUSH
32807: LD_INT 3
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 5
32816: PUSH
32817: LD_INT 3
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 3
32826: PUSH
32827: LD_INT 5
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 0
32836: PUSH
32837: LD_INT 3
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: LD_INT 2
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 1
32856: PUSH
32857: LD_INT 3
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: LD_INT 4
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 0
32876: PUSH
32877: LD_INT 4
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 1
32886: NEG
32887: PUSH
32888: LD_INT 3
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 1
32897: NEG
32898: PUSH
32899: LD_INT 2
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 2
32908: PUSH
32909: LD_INT 4
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 2
32918: NEG
32919: PUSH
32920: LD_INT 2
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 4
32929: NEG
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 4
32940: NEG
32941: PUSH
32942: LD_INT 1
32944: NEG
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 3
32952: NEG
32953: PUSH
32954: LD_INT 0
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 3
32963: NEG
32964: PUSH
32965: LD_INT 1
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 4
32974: NEG
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 5
32985: NEG
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 5
32996: NEG
32997: PUSH
32998: LD_INT 1
33000: NEG
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 5
33008: NEG
33009: PUSH
33010: LD_INT 2
33012: NEG
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 3
33020: NEG
33021: PUSH
33022: LD_INT 2
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: ST_TO_ADDR
// end ; end ;
33076: GO 33079
33078: POP
// case btype of b_depot , b_warehouse :
33079: LD_VAR 0 1
33083: PUSH
33084: LD_INT 0
33086: DOUBLE
33087: EQUAL
33088: IFTRUE 33098
33090: LD_INT 1
33092: DOUBLE
33093: EQUAL
33094: IFTRUE 33098
33096: GO 33299
33098: POP
// case nation of nation_american :
33099: LD_VAR 0 5
33103: PUSH
33104: LD_INT 1
33106: DOUBLE
33107: EQUAL
33108: IFTRUE 33112
33110: GO 33168
33112: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33113: LD_ADDR_VAR 0 9
33117: PUSH
33118: LD_VAR 0 11
33122: PUSH
33123: LD_VAR 0 12
33127: PUSH
33128: LD_VAR 0 13
33132: PUSH
33133: LD_VAR 0 14
33137: PUSH
33138: LD_VAR 0 15
33142: PUSH
33143: LD_VAR 0 16
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: PUSH
33156: LD_VAR 0 4
33160: PUSH
33161: LD_INT 1
33163: PLUS
33164: ARRAY
33165: ST_TO_ADDR
33166: GO 33297
33168: LD_INT 2
33170: DOUBLE
33171: EQUAL
33172: IFTRUE 33176
33174: GO 33232
33176: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33177: LD_ADDR_VAR 0 9
33181: PUSH
33182: LD_VAR 0 17
33186: PUSH
33187: LD_VAR 0 18
33191: PUSH
33192: LD_VAR 0 19
33196: PUSH
33197: LD_VAR 0 20
33201: PUSH
33202: LD_VAR 0 21
33206: PUSH
33207: LD_VAR 0 22
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: PUSH
33220: LD_VAR 0 4
33224: PUSH
33225: LD_INT 1
33227: PLUS
33228: ARRAY
33229: ST_TO_ADDR
33230: GO 33297
33232: LD_INT 3
33234: DOUBLE
33235: EQUAL
33236: IFTRUE 33240
33238: GO 33296
33240: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33241: LD_ADDR_VAR 0 9
33245: PUSH
33246: LD_VAR 0 23
33250: PUSH
33251: LD_VAR 0 24
33255: PUSH
33256: LD_VAR 0 25
33260: PUSH
33261: LD_VAR 0 26
33265: PUSH
33266: LD_VAR 0 27
33270: PUSH
33271: LD_VAR 0 28
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: PUSH
33284: LD_VAR 0 4
33288: PUSH
33289: LD_INT 1
33291: PLUS
33292: ARRAY
33293: ST_TO_ADDR
33294: GO 33297
33296: POP
33297: GO 33852
33299: LD_INT 2
33301: DOUBLE
33302: EQUAL
33303: IFTRUE 33313
33305: LD_INT 3
33307: DOUBLE
33308: EQUAL
33309: IFTRUE 33313
33311: GO 33369
33313: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33314: LD_ADDR_VAR 0 9
33318: PUSH
33319: LD_VAR 0 29
33323: PUSH
33324: LD_VAR 0 30
33328: PUSH
33329: LD_VAR 0 31
33333: PUSH
33334: LD_VAR 0 32
33338: PUSH
33339: LD_VAR 0 33
33343: PUSH
33344: LD_VAR 0 34
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: PUSH
33357: LD_VAR 0 4
33361: PUSH
33362: LD_INT 1
33364: PLUS
33365: ARRAY
33366: ST_TO_ADDR
33367: GO 33852
33369: LD_INT 16
33371: DOUBLE
33372: EQUAL
33373: IFTRUE 33431
33375: LD_INT 17
33377: DOUBLE
33378: EQUAL
33379: IFTRUE 33431
33381: LD_INT 18
33383: DOUBLE
33384: EQUAL
33385: IFTRUE 33431
33387: LD_INT 19
33389: DOUBLE
33390: EQUAL
33391: IFTRUE 33431
33393: LD_INT 22
33395: DOUBLE
33396: EQUAL
33397: IFTRUE 33431
33399: LD_INT 20
33401: DOUBLE
33402: EQUAL
33403: IFTRUE 33431
33405: LD_INT 21
33407: DOUBLE
33408: EQUAL
33409: IFTRUE 33431
33411: LD_INT 23
33413: DOUBLE
33414: EQUAL
33415: IFTRUE 33431
33417: LD_INT 24
33419: DOUBLE
33420: EQUAL
33421: IFTRUE 33431
33423: LD_INT 25
33425: DOUBLE
33426: EQUAL
33427: IFTRUE 33431
33429: GO 33487
33431: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33432: LD_ADDR_VAR 0 9
33436: PUSH
33437: LD_VAR 0 35
33441: PUSH
33442: LD_VAR 0 36
33446: PUSH
33447: LD_VAR 0 37
33451: PUSH
33452: LD_VAR 0 38
33456: PUSH
33457: LD_VAR 0 39
33461: PUSH
33462: LD_VAR 0 40
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: PUSH
33475: LD_VAR 0 4
33479: PUSH
33480: LD_INT 1
33482: PLUS
33483: ARRAY
33484: ST_TO_ADDR
33485: GO 33852
33487: LD_INT 6
33489: DOUBLE
33490: EQUAL
33491: IFTRUE 33543
33493: LD_INT 7
33495: DOUBLE
33496: EQUAL
33497: IFTRUE 33543
33499: LD_INT 8
33501: DOUBLE
33502: EQUAL
33503: IFTRUE 33543
33505: LD_INT 13
33507: DOUBLE
33508: EQUAL
33509: IFTRUE 33543
33511: LD_INT 12
33513: DOUBLE
33514: EQUAL
33515: IFTRUE 33543
33517: LD_INT 15
33519: DOUBLE
33520: EQUAL
33521: IFTRUE 33543
33523: LD_INT 11
33525: DOUBLE
33526: EQUAL
33527: IFTRUE 33543
33529: LD_INT 14
33531: DOUBLE
33532: EQUAL
33533: IFTRUE 33543
33535: LD_INT 10
33537: DOUBLE
33538: EQUAL
33539: IFTRUE 33543
33541: GO 33599
33543: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33544: LD_ADDR_VAR 0 9
33548: PUSH
33549: LD_VAR 0 41
33553: PUSH
33554: LD_VAR 0 42
33558: PUSH
33559: LD_VAR 0 43
33563: PUSH
33564: LD_VAR 0 44
33568: PUSH
33569: LD_VAR 0 45
33573: PUSH
33574: LD_VAR 0 46
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: PUSH
33587: LD_VAR 0 4
33591: PUSH
33592: LD_INT 1
33594: PLUS
33595: ARRAY
33596: ST_TO_ADDR
33597: GO 33852
33599: LD_INT 36
33601: DOUBLE
33602: EQUAL
33603: IFTRUE 33607
33605: GO 33663
33607: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33608: LD_ADDR_VAR 0 9
33612: PUSH
33613: LD_VAR 0 47
33617: PUSH
33618: LD_VAR 0 48
33622: PUSH
33623: LD_VAR 0 49
33627: PUSH
33628: LD_VAR 0 50
33632: PUSH
33633: LD_VAR 0 51
33637: PUSH
33638: LD_VAR 0 52
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: PUSH
33651: LD_VAR 0 4
33655: PUSH
33656: LD_INT 1
33658: PLUS
33659: ARRAY
33660: ST_TO_ADDR
33661: GO 33852
33663: LD_INT 4
33665: DOUBLE
33666: EQUAL
33667: IFTRUE 33689
33669: LD_INT 5
33671: DOUBLE
33672: EQUAL
33673: IFTRUE 33689
33675: LD_INT 34
33677: DOUBLE
33678: EQUAL
33679: IFTRUE 33689
33681: LD_INT 37
33683: DOUBLE
33684: EQUAL
33685: IFTRUE 33689
33687: GO 33745
33689: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33690: LD_ADDR_VAR 0 9
33694: PUSH
33695: LD_VAR 0 53
33699: PUSH
33700: LD_VAR 0 54
33704: PUSH
33705: LD_VAR 0 55
33709: PUSH
33710: LD_VAR 0 56
33714: PUSH
33715: LD_VAR 0 57
33719: PUSH
33720: LD_VAR 0 58
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: PUSH
33733: LD_VAR 0 4
33737: PUSH
33738: LD_INT 1
33740: PLUS
33741: ARRAY
33742: ST_TO_ADDR
33743: GO 33852
33745: LD_INT 31
33747: DOUBLE
33748: EQUAL
33749: IFTRUE 33795
33751: LD_INT 32
33753: DOUBLE
33754: EQUAL
33755: IFTRUE 33795
33757: LD_INT 33
33759: DOUBLE
33760: EQUAL
33761: IFTRUE 33795
33763: LD_INT 27
33765: DOUBLE
33766: EQUAL
33767: IFTRUE 33795
33769: LD_INT 26
33771: DOUBLE
33772: EQUAL
33773: IFTRUE 33795
33775: LD_INT 28
33777: DOUBLE
33778: EQUAL
33779: IFTRUE 33795
33781: LD_INT 29
33783: DOUBLE
33784: EQUAL
33785: IFTRUE 33795
33787: LD_INT 30
33789: DOUBLE
33790: EQUAL
33791: IFTRUE 33795
33793: GO 33851
33795: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33796: LD_ADDR_VAR 0 9
33800: PUSH
33801: LD_VAR 0 59
33805: PUSH
33806: LD_VAR 0 60
33810: PUSH
33811: LD_VAR 0 61
33815: PUSH
33816: LD_VAR 0 62
33820: PUSH
33821: LD_VAR 0 63
33825: PUSH
33826: LD_VAR 0 64
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: PUSH
33839: LD_VAR 0 4
33843: PUSH
33844: LD_INT 1
33846: PLUS
33847: ARRAY
33848: ST_TO_ADDR
33849: GO 33852
33851: POP
// temp_list2 = [ ] ;
33852: LD_ADDR_VAR 0 10
33856: PUSH
33857: EMPTY
33858: ST_TO_ADDR
// for i in temp_list do
33859: LD_ADDR_VAR 0 8
33863: PUSH
33864: LD_VAR 0 9
33868: PUSH
33869: FOR_IN
33870: IFFALSE 33922
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33872: LD_ADDR_VAR 0 10
33876: PUSH
33877: LD_VAR 0 10
33881: PUSH
33882: LD_VAR 0 8
33886: PUSH
33887: LD_INT 1
33889: ARRAY
33890: PUSH
33891: LD_VAR 0 2
33895: PLUS
33896: PUSH
33897: LD_VAR 0 8
33901: PUSH
33902: LD_INT 2
33904: ARRAY
33905: PUSH
33906: LD_VAR 0 3
33910: PLUS
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: EMPTY
33917: LIST
33918: ADD
33919: ST_TO_ADDR
33920: GO 33869
33922: POP
33923: POP
// result = temp_list2 ;
33924: LD_ADDR_VAR 0 7
33928: PUSH
33929: LD_VAR 0 10
33933: ST_TO_ADDR
// end ;
33934: LD_VAR 0 7
33938: RET
// export function EnemyInRange ( unit , dist ) ; begin
33939: LD_INT 0
33941: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33942: LD_ADDR_VAR 0 3
33946: PUSH
33947: LD_VAR 0 1
33951: PPUSH
33952: CALL_OW 255
33956: PPUSH
33957: LD_VAR 0 1
33961: PPUSH
33962: CALL_OW 250
33966: PPUSH
33967: LD_VAR 0 1
33971: PPUSH
33972: CALL_OW 251
33976: PPUSH
33977: LD_VAR 0 2
33981: PPUSH
33982: CALL 7335 0 4
33986: PUSH
33987: LD_INT 4
33989: ARRAY
33990: ST_TO_ADDR
// end ;
33991: LD_VAR 0 3
33995: RET
// export function PlayerSeeMe ( unit ) ; begin
33996: LD_INT 0
33998: PPUSH
// result := See ( your_side , unit ) ;
33999: LD_ADDR_VAR 0 2
34003: PUSH
34004: LD_OWVAR 2
34008: PPUSH
34009: LD_VAR 0 1
34013: PPUSH
34014: CALL_OW 292
34018: ST_TO_ADDR
// end ;
34019: LD_VAR 0 2
34023: RET
// export function ReverseDir ( unit ) ; begin
34024: LD_INT 0
34026: PPUSH
// if not unit then
34027: LD_VAR 0 1
34031: NOT
34032: IFFALSE 34036
// exit ;
34034: GO 34059
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34036: LD_ADDR_VAR 0 2
34040: PUSH
34041: LD_VAR 0 1
34045: PPUSH
34046: CALL_OW 254
34050: PUSH
34051: LD_INT 3
34053: PLUS
34054: PUSH
34055: LD_INT 6
34057: MOD
34058: ST_TO_ADDR
// end ;
34059: LD_VAR 0 2
34063: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
34064: LD_INT 0
34066: PPUSH
34067: PPUSH
34068: PPUSH
34069: PPUSH
34070: PPUSH
// if not hexes then
34071: LD_VAR 0 2
34075: NOT
34076: IFFALSE 34080
// exit ;
34078: GO 34228
// dist := 9999 ;
34080: LD_ADDR_VAR 0 5
34084: PUSH
34085: LD_INT 9999
34087: ST_TO_ADDR
// for i = 1 to hexes do
34088: LD_ADDR_VAR 0 4
34092: PUSH
34093: DOUBLE
34094: LD_INT 1
34096: DEC
34097: ST_TO_ADDR
34098: LD_VAR 0 2
34102: PUSH
34103: FOR_TO
34104: IFFALSE 34216
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
34106: LD_VAR 0 1
34110: PPUSH
34111: LD_VAR 0 2
34115: PUSH
34116: LD_VAR 0 4
34120: ARRAY
34121: PUSH
34122: LD_INT 1
34124: ARRAY
34125: PPUSH
34126: LD_VAR 0 2
34130: PUSH
34131: LD_VAR 0 4
34135: ARRAY
34136: PUSH
34137: LD_INT 2
34139: ARRAY
34140: PPUSH
34141: CALL_OW 297
34145: PUSH
34146: LD_VAR 0 5
34150: LESS
34151: IFFALSE 34214
// begin hex := hexes [ i ] ;
34153: LD_ADDR_VAR 0 7
34157: PUSH
34158: LD_VAR 0 2
34162: PUSH
34163: LD_VAR 0 4
34167: ARRAY
34168: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34169: LD_ADDR_VAR 0 5
34173: PUSH
34174: LD_VAR 0 1
34178: PPUSH
34179: LD_VAR 0 2
34183: PUSH
34184: LD_VAR 0 4
34188: ARRAY
34189: PUSH
34190: LD_INT 1
34192: ARRAY
34193: PPUSH
34194: LD_VAR 0 2
34198: PUSH
34199: LD_VAR 0 4
34203: ARRAY
34204: PUSH
34205: LD_INT 2
34207: ARRAY
34208: PPUSH
34209: CALL_OW 297
34213: ST_TO_ADDR
// end ; end ;
34214: GO 34103
34216: POP
34217: POP
// result := hex ;
34218: LD_ADDR_VAR 0 3
34222: PUSH
34223: LD_VAR 0 7
34227: ST_TO_ADDR
// end ;
34228: LD_VAR 0 3
34232: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34233: LD_INT 0
34235: PPUSH
34236: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34237: LD_VAR 0 1
34241: NOT
34242: PUSH
34243: LD_VAR 0 1
34247: PUSH
34248: LD_INT 21
34250: PUSH
34251: LD_INT 2
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 23
34260: PUSH
34261: LD_INT 2
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PPUSH
34272: CALL_OW 69
34276: IN
34277: NOT
34278: OR
34279: IFFALSE 34283
// exit ;
34281: GO 34330
// for i = 1 to 3 do
34283: LD_ADDR_VAR 0 3
34287: PUSH
34288: DOUBLE
34289: LD_INT 1
34291: DEC
34292: ST_TO_ADDR
34293: LD_INT 3
34295: PUSH
34296: FOR_TO
34297: IFFALSE 34328
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34299: LD_VAR 0 1
34303: PPUSH
34304: CALL_OW 250
34308: PPUSH
34309: LD_VAR 0 1
34313: PPUSH
34314: CALL_OW 251
34318: PPUSH
34319: LD_INT 1
34321: PPUSH
34322: CALL_OW 453
34326: GO 34296
34328: POP
34329: POP
// end ;
34330: LD_VAR 0 2
34334: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34335: LD_INT 0
34337: PPUSH
34338: PPUSH
34339: PPUSH
34340: PPUSH
34341: PPUSH
34342: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34343: LD_VAR 0 1
34347: NOT
34348: PUSH
34349: LD_VAR 0 2
34353: NOT
34354: OR
34355: PUSH
34356: LD_VAR 0 1
34360: PPUSH
34361: CALL_OW 314
34365: OR
34366: IFFALSE 34370
// exit ;
34368: GO 34811
// x := GetX ( enemy_unit ) ;
34370: LD_ADDR_VAR 0 7
34374: PUSH
34375: LD_VAR 0 2
34379: PPUSH
34380: CALL_OW 250
34384: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34385: LD_ADDR_VAR 0 8
34389: PUSH
34390: LD_VAR 0 2
34394: PPUSH
34395: CALL_OW 251
34399: ST_TO_ADDR
// if not x or not y then
34400: LD_VAR 0 7
34404: NOT
34405: PUSH
34406: LD_VAR 0 8
34410: NOT
34411: OR
34412: IFFALSE 34416
// exit ;
34414: GO 34811
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34416: LD_ADDR_VAR 0 6
34420: PUSH
34421: LD_VAR 0 7
34425: PPUSH
34426: LD_INT 0
34428: PPUSH
34429: LD_INT 4
34431: PPUSH
34432: CALL_OW 272
34436: PUSH
34437: LD_VAR 0 8
34441: PPUSH
34442: LD_INT 0
34444: PPUSH
34445: LD_INT 4
34447: PPUSH
34448: CALL_OW 273
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_VAR 0 7
34461: PPUSH
34462: LD_INT 1
34464: PPUSH
34465: LD_INT 4
34467: PPUSH
34468: CALL_OW 272
34472: PUSH
34473: LD_VAR 0 8
34477: PPUSH
34478: LD_INT 1
34480: PPUSH
34481: LD_INT 4
34483: PPUSH
34484: CALL_OW 273
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_VAR 0 7
34497: PPUSH
34498: LD_INT 2
34500: PPUSH
34501: LD_INT 4
34503: PPUSH
34504: CALL_OW 272
34508: PUSH
34509: LD_VAR 0 8
34513: PPUSH
34514: LD_INT 2
34516: PPUSH
34517: LD_INT 4
34519: PPUSH
34520: CALL_OW 273
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_VAR 0 7
34533: PPUSH
34534: LD_INT 3
34536: PPUSH
34537: LD_INT 4
34539: PPUSH
34540: CALL_OW 272
34544: PUSH
34545: LD_VAR 0 8
34549: PPUSH
34550: LD_INT 3
34552: PPUSH
34553: LD_INT 4
34555: PPUSH
34556: CALL_OW 273
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_VAR 0 7
34569: PPUSH
34570: LD_INT 4
34572: PPUSH
34573: LD_INT 4
34575: PPUSH
34576: CALL_OW 272
34580: PUSH
34581: LD_VAR 0 8
34585: PPUSH
34586: LD_INT 4
34588: PPUSH
34589: LD_INT 4
34591: PPUSH
34592: CALL_OW 273
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_VAR 0 7
34605: PPUSH
34606: LD_INT 5
34608: PPUSH
34609: LD_INT 4
34611: PPUSH
34612: CALL_OW 272
34616: PUSH
34617: LD_VAR 0 8
34621: PPUSH
34622: LD_INT 5
34624: PPUSH
34625: LD_INT 4
34627: PPUSH
34628: CALL_OW 273
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: ST_TO_ADDR
// for i = tmp downto 1 do
34645: LD_ADDR_VAR 0 4
34649: PUSH
34650: DOUBLE
34651: LD_VAR 0 6
34655: INC
34656: ST_TO_ADDR
34657: LD_INT 1
34659: PUSH
34660: FOR_DOWNTO
34661: IFFALSE 34762
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34663: LD_VAR 0 6
34667: PUSH
34668: LD_VAR 0 4
34672: ARRAY
34673: PUSH
34674: LD_INT 1
34676: ARRAY
34677: PPUSH
34678: LD_VAR 0 6
34682: PUSH
34683: LD_VAR 0 4
34687: ARRAY
34688: PUSH
34689: LD_INT 2
34691: ARRAY
34692: PPUSH
34693: CALL_OW 488
34697: NOT
34698: PUSH
34699: LD_VAR 0 6
34703: PUSH
34704: LD_VAR 0 4
34708: ARRAY
34709: PUSH
34710: LD_INT 1
34712: ARRAY
34713: PPUSH
34714: LD_VAR 0 6
34718: PUSH
34719: LD_VAR 0 4
34723: ARRAY
34724: PUSH
34725: LD_INT 2
34727: ARRAY
34728: PPUSH
34729: CALL_OW 428
34733: PUSH
34734: LD_INT 0
34736: NONEQUAL
34737: OR
34738: IFFALSE 34760
// tmp := Delete ( tmp , i ) ;
34740: LD_ADDR_VAR 0 6
34744: PUSH
34745: LD_VAR 0 6
34749: PPUSH
34750: LD_VAR 0 4
34754: PPUSH
34755: CALL_OW 3
34759: ST_TO_ADDR
34760: GO 34660
34762: POP
34763: POP
// j := GetClosestHex ( unit , tmp ) ;
34764: LD_ADDR_VAR 0 5
34768: PUSH
34769: LD_VAR 0 1
34773: PPUSH
34774: LD_VAR 0 6
34778: PPUSH
34779: CALL 34064 0 2
34783: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34784: LD_VAR 0 1
34788: PPUSH
34789: LD_VAR 0 5
34793: PUSH
34794: LD_INT 1
34796: ARRAY
34797: PPUSH
34798: LD_VAR 0 5
34802: PUSH
34803: LD_INT 2
34805: ARRAY
34806: PPUSH
34807: CALL_OW 111
// end ;
34811: LD_VAR 0 3
34815: RET
// export function PrepareApemanSoldier ( ) ; begin
34816: LD_INT 0
34818: PPUSH
// uc_nation := 0 ;
34819: LD_ADDR_OWVAR 21
34823: PUSH
34824: LD_INT 0
34826: ST_TO_ADDR
// hc_sex := sex_male ;
34827: LD_ADDR_OWVAR 27
34831: PUSH
34832: LD_INT 1
34834: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34835: LD_ADDR_OWVAR 28
34839: PUSH
34840: LD_INT 15
34842: ST_TO_ADDR
// hc_gallery :=  ;
34843: LD_ADDR_OWVAR 33
34847: PUSH
34848: LD_STRING 
34850: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34851: LD_ADDR_OWVAR 31
34855: PUSH
34856: LD_INT 0
34858: PPUSH
34859: LD_INT 3
34861: PPUSH
34862: CALL_OW 12
34866: PUSH
34867: LD_INT 0
34869: PPUSH
34870: LD_INT 3
34872: PPUSH
34873: CALL_OW 12
34877: PUSH
34878: LD_INT 0
34880: PUSH
34881: LD_INT 0
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: ST_TO_ADDR
// end ;
34890: LD_VAR 0 1
34894: RET
// export function PrepareApemanEngineer ( ) ; begin
34895: LD_INT 0
34897: PPUSH
// uc_nation := 0 ;
34898: LD_ADDR_OWVAR 21
34902: PUSH
34903: LD_INT 0
34905: ST_TO_ADDR
// hc_sex := sex_male ;
34906: LD_ADDR_OWVAR 27
34910: PUSH
34911: LD_INT 1
34913: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34914: LD_ADDR_OWVAR 28
34918: PUSH
34919: LD_INT 16
34921: ST_TO_ADDR
// hc_gallery :=  ;
34922: LD_ADDR_OWVAR 33
34926: PUSH
34927: LD_STRING 
34929: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34930: LD_ADDR_OWVAR 31
34934: PUSH
34935: LD_INT 0
34937: PPUSH
34938: LD_INT 3
34940: PPUSH
34941: CALL_OW 12
34945: PUSH
34946: LD_INT 0
34948: PPUSH
34949: LD_INT 3
34951: PPUSH
34952: CALL_OW 12
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: LD_INT 0
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: ST_TO_ADDR
// end ;
34969: LD_VAR 0 1
34973: RET
// export function PrepareApeman ( agressivity ) ; begin
34974: LD_INT 0
34976: PPUSH
// uc_side := 0 ;
34977: LD_ADDR_OWVAR 20
34981: PUSH
34982: LD_INT 0
34984: ST_TO_ADDR
// uc_nation := 0 ;
34985: LD_ADDR_OWVAR 21
34989: PUSH
34990: LD_INT 0
34992: ST_TO_ADDR
// hc_sex := sex_male ;
34993: LD_ADDR_OWVAR 27
34997: PUSH
34998: LD_INT 1
35000: ST_TO_ADDR
// hc_class := class_apeman ;
35001: LD_ADDR_OWVAR 28
35005: PUSH
35006: LD_INT 12
35008: ST_TO_ADDR
// hc_gallery :=  ;
35009: LD_ADDR_OWVAR 33
35013: PUSH
35014: LD_STRING 
35016: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35017: LD_ADDR_OWVAR 35
35021: PUSH
35022: LD_VAR 0 1
35026: NEG
35027: PPUSH
35028: LD_VAR 0 1
35032: PPUSH
35033: CALL_OW 12
35037: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35038: LD_ADDR_OWVAR 31
35042: PUSH
35043: LD_INT 0
35045: PPUSH
35046: LD_INT 3
35048: PPUSH
35049: CALL_OW 12
35053: PUSH
35054: LD_INT 0
35056: PPUSH
35057: LD_INT 3
35059: PPUSH
35060: CALL_OW 12
35064: PUSH
35065: LD_INT 0
35067: PUSH
35068: LD_INT 0
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: ST_TO_ADDR
// end ;
35077: LD_VAR 0 2
35081: RET
// export function PrepareTiger ( agressivity ) ; begin
35082: LD_INT 0
35084: PPUSH
// uc_side := 0 ;
35085: LD_ADDR_OWVAR 20
35089: PUSH
35090: LD_INT 0
35092: ST_TO_ADDR
// uc_nation := 0 ;
35093: LD_ADDR_OWVAR 21
35097: PUSH
35098: LD_INT 0
35100: ST_TO_ADDR
// hc_class := class_tiger ;
35101: LD_ADDR_OWVAR 28
35105: PUSH
35106: LD_INT 14
35108: ST_TO_ADDR
// hc_gallery :=  ;
35109: LD_ADDR_OWVAR 33
35113: PUSH
35114: LD_STRING 
35116: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35117: LD_ADDR_OWVAR 35
35121: PUSH
35122: LD_VAR 0 1
35126: NEG
35127: PPUSH
35128: LD_VAR 0 1
35132: PPUSH
35133: CALL_OW 12
35137: ST_TO_ADDR
// end ;
35138: LD_VAR 0 2
35142: RET
// export function PrepareEnchidna ( ) ; begin
35143: LD_INT 0
35145: PPUSH
// uc_side := 0 ;
35146: LD_ADDR_OWVAR 20
35150: PUSH
35151: LD_INT 0
35153: ST_TO_ADDR
// uc_nation := 0 ;
35154: LD_ADDR_OWVAR 21
35158: PUSH
35159: LD_INT 0
35161: ST_TO_ADDR
// hc_class := class_baggie ;
35162: LD_ADDR_OWVAR 28
35166: PUSH
35167: LD_INT 13
35169: ST_TO_ADDR
// hc_gallery :=  ;
35170: LD_ADDR_OWVAR 33
35174: PUSH
35175: LD_STRING 
35177: ST_TO_ADDR
// end ;
35178: LD_VAR 0 1
35182: RET
// export function PrepareFrog ( ) ; begin
35183: LD_INT 0
35185: PPUSH
// uc_side := 0 ;
35186: LD_ADDR_OWVAR 20
35190: PUSH
35191: LD_INT 0
35193: ST_TO_ADDR
// uc_nation := 0 ;
35194: LD_ADDR_OWVAR 21
35198: PUSH
35199: LD_INT 0
35201: ST_TO_ADDR
// hc_class := class_frog ;
35202: LD_ADDR_OWVAR 28
35206: PUSH
35207: LD_INT 19
35209: ST_TO_ADDR
// hc_gallery :=  ;
35210: LD_ADDR_OWVAR 33
35214: PUSH
35215: LD_STRING 
35217: ST_TO_ADDR
// end ;
35218: LD_VAR 0 1
35222: RET
// export function PrepareFish ( ) ; begin
35223: LD_INT 0
35225: PPUSH
// uc_side := 0 ;
35226: LD_ADDR_OWVAR 20
35230: PUSH
35231: LD_INT 0
35233: ST_TO_ADDR
// uc_nation := 0 ;
35234: LD_ADDR_OWVAR 21
35238: PUSH
35239: LD_INT 0
35241: ST_TO_ADDR
// hc_class := class_fish ;
35242: LD_ADDR_OWVAR 28
35246: PUSH
35247: LD_INT 20
35249: ST_TO_ADDR
// hc_gallery :=  ;
35250: LD_ADDR_OWVAR 33
35254: PUSH
35255: LD_STRING 
35257: ST_TO_ADDR
// end ;
35258: LD_VAR 0 1
35262: RET
// export function PrepareBird ( ) ; begin
35263: LD_INT 0
35265: PPUSH
// uc_side := 0 ;
35266: LD_ADDR_OWVAR 20
35270: PUSH
35271: LD_INT 0
35273: ST_TO_ADDR
// uc_nation := 0 ;
35274: LD_ADDR_OWVAR 21
35278: PUSH
35279: LD_INT 0
35281: ST_TO_ADDR
// hc_class := class_phororhacos ;
35282: LD_ADDR_OWVAR 28
35286: PUSH
35287: LD_INT 18
35289: ST_TO_ADDR
// hc_gallery :=  ;
35290: LD_ADDR_OWVAR 33
35294: PUSH
35295: LD_STRING 
35297: ST_TO_ADDR
// end ;
35298: LD_VAR 0 1
35302: RET
// export function PrepareHorse ( ) ; begin
35303: LD_INT 0
35305: PPUSH
// uc_side := 0 ;
35306: LD_ADDR_OWVAR 20
35310: PUSH
35311: LD_INT 0
35313: ST_TO_ADDR
// uc_nation := 0 ;
35314: LD_ADDR_OWVAR 21
35318: PUSH
35319: LD_INT 0
35321: ST_TO_ADDR
// hc_class := class_horse ;
35322: LD_ADDR_OWVAR 28
35326: PUSH
35327: LD_INT 21
35329: ST_TO_ADDR
// hc_gallery :=  ;
35330: LD_ADDR_OWVAR 33
35334: PUSH
35335: LD_STRING 
35337: ST_TO_ADDR
// end ;
35338: LD_VAR 0 1
35342: RET
// export function PrepareMastodont ( ) ; begin
35343: LD_INT 0
35345: PPUSH
// uc_side := 0 ;
35346: LD_ADDR_OWVAR 20
35350: PUSH
35351: LD_INT 0
35353: ST_TO_ADDR
// uc_nation := 0 ;
35354: LD_ADDR_OWVAR 21
35358: PUSH
35359: LD_INT 0
35361: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35362: LD_ADDR_OWVAR 37
35366: PUSH
35367: LD_INT 31
35369: ST_TO_ADDR
// vc_control := control_rider ;
35370: LD_ADDR_OWVAR 38
35374: PUSH
35375: LD_INT 4
35377: ST_TO_ADDR
// end ;
35378: LD_VAR 0 1
35382: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35383: LD_INT 0
35385: PPUSH
35386: PPUSH
35387: PPUSH
// uc_side = 0 ;
35388: LD_ADDR_OWVAR 20
35392: PUSH
35393: LD_INT 0
35395: ST_TO_ADDR
// uc_nation = 0 ;
35396: LD_ADDR_OWVAR 21
35400: PUSH
35401: LD_INT 0
35403: ST_TO_ADDR
// InitHc_All ( ) ;
35404: CALL_OW 584
// InitVc ;
35408: CALL_OW 20
// if mastodonts then
35412: LD_VAR 0 6
35416: IFFALSE 35483
// for i = 1 to mastodonts do
35418: LD_ADDR_VAR 0 11
35422: PUSH
35423: DOUBLE
35424: LD_INT 1
35426: DEC
35427: ST_TO_ADDR
35428: LD_VAR 0 6
35432: PUSH
35433: FOR_TO
35434: IFFALSE 35481
// begin vc_chassis := 31 ;
35436: LD_ADDR_OWVAR 37
35440: PUSH
35441: LD_INT 31
35443: ST_TO_ADDR
// vc_control := control_rider ;
35444: LD_ADDR_OWVAR 38
35448: PUSH
35449: LD_INT 4
35451: ST_TO_ADDR
// animal := CreateVehicle ;
35452: LD_ADDR_VAR 0 12
35456: PUSH
35457: CALL_OW 45
35461: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35462: LD_VAR 0 12
35466: PPUSH
35467: LD_VAR 0 8
35471: PPUSH
35472: LD_INT 0
35474: PPUSH
35475: CALL 37618 0 3
// end ;
35479: GO 35433
35481: POP
35482: POP
// if horses then
35483: LD_VAR 0 5
35487: IFFALSE 35554
// for i = 1 to horses do
35489: LD_ADDR_VAR 0 11
35493: PUSH
35494: DOUBLE
35495: LD_INT 1
35497: DEC
35498: ST_TO_ADDR
35499: LD_VAR 0 5
35503: PUSH
35504: FOR_TO
35505: IFFALSE 35552
// begin hc_class := 21 ;
35507: LD_ADDR_OWVAR 28
35511: PUSH
35512: LD_INT 21
35514: ST_TO_ADDR
// hc_gallery :=  ;
35515: LD_ADDR_OWVAR 33
35519: PUSH
35520: LD_STRING 
35522: ST_TO_ADDR
// animal := CreateHuman ;
35523: LD_ADDR_VAR 0 12
35527: PUSH
35528: CALL_OW 44
35532: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35533: LD_VAR 0 12
35537: PPUSH
35538: LD_VAR 0 8
35542: PPUSH
35543: LD_INT 0
35545: PPUSH
35546: CALL 37618 0 3
// end ;
35550: GO 35504
35552: POP
35553: POP
// if birds then
35554: LD_VAR 0 1
35558: IFFALSE 35625
// for i = 1 to birds do
35560: LD_ADDR_VAR 0 11
35564: PUSH
35565: DOUBLE
35566: LD_INT 1
35568: DEC
35569: ST_TO_ADDR
35570: LD_VAR 0 1
35574: PUSH
35575: FOR_TO
35576: IFFALSE 35623
// begin hc_class = 18 ;
35578: LD_ADDR_OWVAR 28
35582: PUSH
35583: LD_INT 18
35585: ST_TO_ADDR
// hc_gallery =  ;
35586: LD_ADDR_OWVAR 33
35590: PUSH
35591: LD_STRING 
35593: ST_TO_ADDR
// animal := CreateHuman ;
35594: LD_ADDR_VAR 0 12
35598: PUSH
35599: CALL_OW 44
35603: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35604: LD_VAR 0 12
35608: PPUSH
35609: LD_VAR 0 8
35613: PPUSH
35614: LD_INT 0
35616: PPUSH
35617: CALL 37618 0 3
// end ;
35621: GO 35575
35623: POP
35624: POP
// if tigers then
35625: LD_VAR 0 2
35629: IFFALSE 35713
// for i = 1 to tigers do
35631: LD_ADDR_VAR 0 11
35635: PUSH
35636: DOUBLE
35637: LD_INT 1
35639: DEC
35640: ST_TO_ADDR
35641: LD_VAR 0 2
35645: PUSH
35646: FOR_TO
35647: IFFALSE 35711
// begin hc_class = class_tiger ;
35649: LD_ADDR_OWVAR 28
35653: PUSH
35654: LD_INT 14
35656: ST_TO_ADDR
// hc_gallery =  ;
35657: LD_ADDR_OWVAR 33
35661: PUSH
35662: LD_STRING 
35664: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35665: LD_ADDR_OWVAR 35
35669: PUSH
35670: LD_INT 7
35672: NEG
35673: PPUSH
35674: LD_INT 7
35676: PPUSH
35677: CALL_OW 12
35681: ST_TO_ADDR
// animal := CreateHuman ;
35682: LD_ADDR_VAR 0 12
35686: PUSH
35687: CALL_OW 44
35691: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35692: LD_VAR 0 12
35696: PPUSH
35697: LD_VAR 0 8
35701: PPUSH
35702: LD_INT 0
35704: PPUSH
35705: CALL 37618 0 3
// end ;
35709: GO 35646
35711: POP
35712: POP
// if apemans then
35713: LD_VAR 0 3
35717: IFFALSE 35840
// for i = 1 to apemans do
35719: LD_ADDR_VAR 0 11
35723: PUSH
35724: DOUBLE
35725: LD_INT 1
35727: DEC
35728: ST_TO_ADDR
35729: LD_VAR 0 3
35733: PUSH
35734: FOR_TO
35735: IFFALSE 35838
// begin hc_class = class_apeman ;
35737: LD_ADDR_OWVAR 28
35741: PUSH
35742: LD_INT 12
35744: ST_TO_ADDR
// hc_gallery =  ;
35745: LD_ADDR_OWVAR 33
35749: PUSH
35750: LD_STRING 
35752: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35753: LD_ADDR_OWVAR 35
35757: PUSH
35758: LD_INT 2
35760: NEG
35761: PPUSH
35762: LD_INT 2
35764: PPUSH
35765: CALL_OW 12
35769: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35770: LD_ADDR_OWVAR 31
35774: PUSH
35775: LD_INT 1
35777: PPUSH
35778: LD_INT 3
35780: PPUSH
35781: CALL_OW 12
35785: PUSH
35786: LD_INT 1
35788: PPUSH
35789: LD_INT 3
35791: PPUSH
35792: CALL_OW 12
35796: PUSH
35797: LD_INT 0
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: ST_TO_ADDR
// animal := CreateHuman ;
35809: LD_ADDR_VAR 0 12
35813: PUSH
35814: CALL_OW 44
35818: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35819: LD_VAR 0 12
35823: PPUSH
35824: LD_VAR 0 8
35828: PPUSH
35829: LD_INT 0
35831: PPUSH
35832: CALL 37618 0 3
// end ;
35836: GO 35734
35838: POP
35839: POP
// if enchidnas then
35840: LD_VAR 0 4
35844: IFFALSE 35911
// for i = 1 to enchidnas do
35846: LD_ADDR_VAR 0 11
35850: PUSH
35851: DOUBLE
35852: LD_INT 1
35854: DEC
35855: ST_TO_ADDR
35856: LD_VAR 0 4
35860: PUSH
35861: FOR_TO
35862: IFFALSE 35909
// begin hc_class = 13 ;
35864: LD_ADDR_OWVAR 28
35868: PUSH
35869: LD_INT 13
35871: ST_TO_ADDR
// hc_gallery =  ;
35872: LD_ADDR_OWVAR 33
35876: PUSH
35877: LD_STRING 
35879: ST_TO_ADDR
// animal := CreateHuman ;
35880: LD_ADDR_VAR 0 12
35884: PUSH
35885: CALL_OW 44
35889: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35890: LD_VAR 0 12
35894: PPUSH
35895: LD_VAR 0 8
35899: PPUSH
35900: LD_INT 0
35902: PPUSH
35903: CALL 37618 0 3
// end ;
35907: GO 35861
35909: POP
35910: POP
// if fishes then
35911: LD_VAR 0 7
35915: IFFALSE 35982
// for i = 1 to fishes do
35917: LD_ADDR_VAR 0 11
35921: PUSH
35922: DOUBLE
35923: LD_INT 1
35925: DEC
35926: ST_TO_ADDR
35927: LD_VAR 0 7
35931: PUSH
35932: FOR_TO
35933: IFFALSE 35980
// begin hc_class = 20 ;
35935: LD_ADDR_OWVAR 28
35939: PUSH
35940: LD_INT 20
35942: ST_TO_ADDR
// hc_gallery =  ;
35943: LD_ADDR_OWVAR 33
35947: PUSH
35948: LD_STRING 
35950: ST_TO_ADDR
// animal := CreateHuman ;
35951: LD_ADDR_VAR 0 12
35955: PUSH
35956: CALL_OW 44
35960: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35961: LD_VAR 0 12
35965: PPUSH
35966: LD_VAR 0 9
35970: PPUSH
35971: LD_INT 0
35973: PPUSH
35974: CALL 37618 0 3
// end ;
35978: GO 35932
35980: POP
35981: POP
// end ;
35982: LD_VAR 0 10
35986: RET
// export function WantHeal ( sci , unit ) ; begin
35987: LD_INT 0
35989: PPUSH
// if GetTaskList ( sci ) > 0 then
35990: LD_VAR 0 1
35994: PPUSH
35995: CALL_OW 437
35999: PUSH
36000: LD_INT 0
36002: GREATER
36003: IFFALSE 36073
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36005: LD_VAR 0 1
36009: PPUSH
36010: CALL_OW 437
36014: PUSH
36015: LD_INT 1
36017: ARRAY
36018: PUSH
36019: LD_INT 1
36021: ARRAY
36022: PUSH
36023: LD_STRING l
36025: EQUAL
36026: PUSH
36027: LD_VAR 0 1
36031: PPUSH
36032: CALL_OW 437
36036: PUSH
36037: LD_INT 1
36039: ARRAY
36040: PUSH
36041: LD_INT 4
36043: ARRAY
36044: PUSH
36045: LD_VAR 0 2
36049: EQUAL
36050: AND
36051: IFFALSE 36063
// result := true else
36053: LD_ADDR_VAR 0 3
36057: PUSH
36058: LD_INT 1
36060: ST_TO_ADDR
36061: GO 36071
// result := false ;
36063: LD_ADDR_VAR 0 3
36067: PUSH
36068: LD_INT 0
36070: ST_TO_ADDR
// end else
36071: GO 36081
// result := false ;
36073: LD_ADDR_VAR 0 3
36077: PUSH
36078: LD_INT 0
36080: ST_TO_ADDR
// end ;
36081: LD_VAR 0 3
36085: RET
// export function HealTarget ( sci ) ; begin
36086: LD_INT 0
36088: PPUSH
// if not sci then
36089: LD_VAR 0 1
36093: NOT
36094: IFFALSE 36098
// exit ;
36096: GO 36163
// result := 0 ;
36098: LD_ADDR_VAR 0 2
36102: PUSH
36103: LD_INT 0
36105: ST_TO_ADDR
// if GetTaskList ( sci ) then
36106: LD_VAR 0 1
36110: PPUSH
36111: CALL_OW 437
36115: IFFALSE 36163
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36117: LD_VAR 0 1
36121: PPUSH
36122: CALL_OW 437
36126: PUSH
36127: LD_INT 1
36129: ARRAY
36130: PUSH
36131: LD_INT 1
36133: ARRAY
36134: PUSH
36135: LD_STRING l
36137: EQUAL
36138: IFFALSE 36163
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36140: LD_ADDR_VAR 0 2
36144: PUSH
36145: LD_VAR 0 1
36149: PPUSH
36150: CALL_OW 437
36154: PUSH
36155: LD_INT 1
36157: ARRAY
36158: PUSH
36159: LD_INT 4
36161: ARRAY
36162: ST_TO_ADDR
// end ;
36163: LD_VAR 0 2
36167: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36168: LD_INT 0
36170: PPUSH
36171: PPUSH
36172: PPUSH
36173: PPUSH
// if not base_units then
36174: LD_VAR 0 1
36178: NOT
36179: IFFALSE 36183
// exit ;
36181: GO 36270
// result := false ;
36183: LD_ADDR_VAR 0 2
36187: PUSH
36188: LD_INT 0
36190: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36191: LD_ADDR_VAR 0 5
36195: PUSH
36196: LD_VAR 0 1
36200: PPUSH
36201: LD_INT 21
36203: PUSH
36204: LD_INT 3
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PPUSH
36211: CALL_OW 72
36215: ST_TO_ADDR
// if not tmp then
36216: LD_VAR 0 5
36220: NOT
36221: IFFALSE 36225
// exit ;
36223: GO 36270
// for i in tmp do
36225: LD_ADDR_VAR 0 3
36229: PUSH
36230: LD_VAR 0 5
36234: PUSH
36235: FOR_IN
36236: IFFALSE 36268
// begin result := EnemyInRange ( i , 22 ) ;
36238: LD_ADDR_VAR 0 2
36242: PUSH
36243: LD_VAR 0 3
36247: PPUSH
36248: LD_INT 22
36250: PPUSH
36251: CALL 33939 0 2
36255: ST_TO_ADDR
// if result then
36256: LD_VAR 0 2
36260: IFFALSE 36266
// exit ;
36262: POP
36263: POP
36264: GO 36270
// end ;
36266: GO 36235
36268: POP
36269: POP
// end ;
36270: LD_VAR 0 2
36274: RET
// export function FilterByTag ( units , tag ) ; begin
36275: LD_INT 0
36277: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36278: LD_ADDR_VAR 0 3
36282: PUSH
36283: LD_VAR 0 1
36287: PPUSH
36288: LD_INT 120
36290: PUSH
36291: LD_VAR 0 2
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PPUSH
36300: CALL_OW 72
36304: ST_TO_ADDR
// end ;
36305: LD_VAR 0 3
36309: RET
// export function IsDriver ( un ) ; begin
36310: LD_INT 0
36312: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36313: LD_ADDR_VAR 0 2
36317: PUSH
36318: LD_VAR 0 1
36322: PUSH
36323: LD_INT 55
36325: PUSH
36326: EMPTY
36327: LIST
36328: PPUSH
36329: CALL_OW 69
36333: IN
36334: ST_TO_ADDR
// end ;
36335: LD_VAR 0 2
36339: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36340: LD_INT 0
36342: PPUSH
36343: PPUSH
// list := [ ] ;
36344: LD_ADDR_VAR 0 5
36348: PUSH
36349: EMPTY
36350: ST_TO_ADDR
// case d of 0 :
36351: LD_VAR 0 3
36355: PUSH
36356: LD_INT 0
36358: DOUBLE
36359: EQUAL
36360: IFTRUE 36364
36362: GO 36497
36364: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36365: LD_ADDR_VAR 0 5
36369: PUSH
36370: LD_VAR 0 1
36374: PUSH
36375: LD_INT 4
36377: MINUS
36378: PUSH
36379: LD_VAR 0 2
36383: PUSH
36384: LD_INT 4
36386: MINUS
36387: PUSH
36388: LD_INT 2
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: LIST
36395: PUSH
36396: LD_VAR 0 1
36400: PUSH
36401: LD_INT 3
36403: MINUS
36404: PUSH
36405: LD_VAR 0 2
36409: PUSH
36410: LD_INT 1
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: PUSH
36418: LD_VAR 0 1
36422: PUSH
36423: LD_INT 4
36425: PLUS
36426: PUSH
36427: LD_VAR 0 2
36431: PUSH
36432: LD_INT 4
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: LIST
36439: PUSH
36440: LD_VAR 0 1
36444: PUSH
36445: LD_INT 3
36447: PLUS
36448: PUSH
36449: LD_VAR 0 2
36453: PUSH
36454: LD_INT 3
36456: PLUS
36457: PUSH
36458: LD_INT 5
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: PUSH
36466: LD_VAR 0 1
36470: PUSH
36471: LD_VAR 0 2
36475: PUSH
36476: LD_INT 4
36478: PLUS
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: LIST
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: ST_TO_ADDR
// end ; 1 :
36495: GO 37195
36497: LD_INT 1
36499: DOUBLE
36500: EQUAL
36501: IFTRUE 36505
36503: GO 36638
36505: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36506: LD_ADDR_VAR 0 5
36510: PUSH
36511: LD_VAR 0 1
36515: PUSH
36516: LD_VAR 0 2
36520: PUSH
36521: LD_INT 4
36523: MINUS
36524: PUSH
36525: LD_INT 3
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: LIST
36532: PUSH
36533: LD_VAR 0 1
36537: PUSH
36538: LD_INT 3
36540: MINUS
36541: PUSH
36542: LD_VAR 0 2
36546: PUSH
36547: LD_INT 3
36549: MINUS
36550: PUSH
36551: LD_INT 2
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: LIST
36558: PUSH
36559: LD_VAR 0 1
36563: PUSH
36564: LD_INT 4
36566: MINUS
36567: PUSH
36568: LD_VAR 0 2
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: LIST
36580: PUSH
36581: LD_VAR 0 1
36585: PUSH
36586: LD_VAR 0 2
36590: PUSH
36591: LD_INT 3
36593: PLUS
36594: PUSH
36595: LD_INT 0
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: LIST
36602: PUSH
36603: LD_VAR 0 1
36607: PUSH
36608: LD_INT 4
36610: PLUS
36611: PUSH
36612: LD_VAR 0 2
36616: PUSH
36617: LD_INT 4
36619: PLUS
36620: PUSH
36621: LD_INT 5
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: LIST
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: ST_TO_ADDR
// end ; 2 :
36636: GO 37195
36638: LD_INT 2
36640: DOUBLE
36641: EQUAL
36642: IFTRUE 36646
36644: GO 36775
36646: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36647: LD_ADDR_VAR 0 5
36651: PUSH
36652: LD_VAR 0 1
36656: PUSH
36657: LD_VAR 0 2
36661: PUSH
36662: LD_INT 3
36664: MINUS
36665: PUSH
36666: LD_INT 3
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: PUSH
36674: LD_VAR 0 1
36678: PUSH
36679: LD_INT 4
36681: PLUS
36682: PUSH
36683: LD_VAR 0 2
36687: PUSH
36688: LD_INT 4
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: LIST
36695: PUSH
36696: LD_VAR 0 1
36700: PUSH
36701: LD_VAR 0 2
36705: PUSH
36706: LD_INT 4
36708: PLUS
36709: PUSH
36710: LD_INT 0
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: PUSH
36718: LD_VAR 0 1
36722: PUSH
36723: LD_INT 3
36725: MINUS
36726: PUSH
36727: LD_VAR 0 2
36731: PUSH
36732: LD_INT 1
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: LIST
36739: PUSH
36740: LD_VAR 0 1
36744: PUSH
36745: LD_INT 4
36747: MINUS
36748: PUSH
36749: LD_VAR 0 2
36753: PUSH
36754: LD_INT 4
36756: MINUS
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: LIST
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: ST_TO_ADDR
// end ; 3 :
36773: GO 37195
36775: LD_INT 3
36777: DOUBLE
36778: EQUAL
36779: IFTRUE 36783
36781: GO 36916
36783: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36784: LD_ADDR_VAR 0 5
36788: PUSH
36789: LD_VAR 0 1
36793: PUSH
36794: LD_INT 3
36796: PLUS
36797: PUSH
36798: LD_VAR 0 2
36802: PUSH
36803: LD_INT 4
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: LIST
36810: PUSH
36811: LD_VAR 0 1
36815: PUSH
36816: LD_INT 4
36818: PLUS
36819: PUSH
36820: LD_VAR 0 2
36824: PUSH
36825: LD_INT 4
36827: PLUS
36828: PUSH
36829: LD_INT 5
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: LIST
36836: PUSH
36837: LD_VAR 0 1
36841: PUSH
36842: LD_INT 4
36844: MINUS
36845: PUSH
36846: LD_VAR 0 2
36850: PUSH
36851: LD_INT 1
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: LIST
36858: PUSH
36859: LD_VAR 0 1
36863: PUSH
36864: LD_VAR 0 2
36868: PUSH
36869: LD_INT 4
36871: MINUS
36872: PUSH
36873: LD_INT 3
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: LIST
36880: PUSH
36881: LD_VAR 0 1
36885: PUSH
36886: LD_INT 3
36888: MINUS
36889: PUSH
36890: LD_VAR 0 2
36894: PUSH
36895: LD_INT 3
36897: MINUS
36898: PUSH
36899: LD_INT 2
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: LIST
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: ST_TO_ADDR
// end ; 4 :
36914: GO 37195
36916: LD_INT 4
36918: DOUBLE
36919: EQUAL
36920: IFTRUE 36924
36922: GO 37057
36924: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36925: LD_ADDR_VAR 0 5
36929: PUSH
36930: LD_VAR 0 1
36934: PUSH
36935: LD_VAR 0 2
36939: PUSH
36940: LD_INT 4
36942: PLUS
36943: PUSH
36944: LD_INT 0
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: LIST
36951: PUSH
36952: LD_VAR 0 1
36956: PUSH
36957: LD_INT 3
36959: PLUS
36960: PUSH
36961: LD_VAR 0 2
36965: PUSH
36966: LD_INT 3
36968: PLUS
36969: PUSH
36970: LD_INT 5
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: LIST
36977: PUSH
36978: LD_VAR 0 1
36982: PUSH
36983: LD_INT 4
36985: PLUS
36986: PUSH
36987: LD_VAR 0 2
36991: PUSH
36992: LD_INT 4
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: LIST
36999: PUSH
37000: LD_VAR 0 1
37004: PUSH
37005: LD_VAR 0 2
37009: PUSH
37010: LD_INT 3
37012: MINUS
37013: PUSH
37014: LD_INT 3
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: LIST
37021: PUSH
37022: LD_VAR 0 1
37026: PUSH
37027: LD_INT 4
37029: MINUS
37030: PUSH
37031: LD_VAR 0 2
37035: PUSH
37036: LD_INT 4
37038: MINUS
37039: PUSH
37040: LD_INT 2
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: LIST
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: ST_TO_ADDR
// end ; 5 :
37055: GO 37195
37057: LD_INT 5
37059: DOUBLE
37060: EQUAL
37061: IFTRUE 37065
37063: GO 37194
37065: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37066: LD_ADDR_VAR 0 5
37070: PUSH
37071: LD_VAR 0 1
37075: PUSH
37076: LD_INT 4
37078: MINUS
37079: PUSH
37080: LD_VAR 0 2
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: LIST
37092: PUSH
37093: LD_VAR 0 1
37097: PUSH
37098: LD_VAR 0 2
37102: PUSH
37103: LD_INT 4
37105: MINUS
37106: PUSH
37107: LD_INT 3
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: LIST
37114: PUSH
37115: LD_VAR 0 1
37119: PUSH
37120: LD_INT 4
37122: PLUS
37123: PUSH
37124: LD_VAR 0 2
37128: PUSH
37129: LD_INT 4
37131: PLUS
37132: PUSH
37133: LD_INT 5
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: PUSH
37141: LD_VAR 0 1
37145: PUSH
37146: LD_INT 3
37148: PLUS
37149: PUSH
37150: LD_VAR 0 2
37154: PUSH
37155: LD_INT 4
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: LIST
37162: PUSH
37163: LD_VAR 0 1
37167: PUSH
37168: LD_VAR 0 2
37172: PUSH
37173: LD_INT 3
37175: PLUS
37176: PUSH
37177: LD_INT 0
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: LIST
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: ST_TO_ADDR
// end ; end ;
37192: GO 37195
37194: POP
// result := list ;
37195: LD_ADDR_VAR 0 4
37199: PUSH
37200: LD_VAR 0 5
37204: ST_TO_ADDR
// end ;
37205: LD_VAR 0 4
37209: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37210: LD_INT 0
37212: PPUSH
37213: PPUSH
37214: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37215: LD_VAR 0 1
37219: NOT
37220: PUSH
37221: LD_VAR 0 2
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: LD_INT 2
37231: PUSH
37232: LD_INT 3
37234: PUSH
37235: LD_INT 4
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: IN
37244: NOT
37245: OR
37246: IFFALSE 37250
// exit ;
37248: GO 37342
// tmp := [ ] ;
37250: LD_ADDR_VAR 0 5
37254: PUSH
37255: EMPTY
37256: ST_TO_ADDR
// for i in units do
37257: LD_ADDR_VAR 0 4
37261: PUSH
37262: LD_VAR 0 1
37266: PUSH
37267: FOR_IN
37268: IFFALSE 37311
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
37270: LD_ADDR_VAR 0 5
37274: PUSH
37275: LD_VAR 0 5
37279: PPUSH
37280: LD_VAR 0 5
37284: PUSH
37285: LD_INT 1
37287: PLUS
37288: PPUSH
37289: LD_VAR 0 4
37293: PPUSH
37294: LD_VAR 0 2
37298: PPUSH
37299: CALL_OW 259
37303: PPUSH
37304: CALL_OW 2
37308: ST_TO_ADDR
37309: GO 37267
37311: POP
37312: POP
// if not tmp then
37313: LD_VAR 0 5
37317: NOT
37318: IFFALSE 37322
// exit ;
37320: GO 37342
// result := SortListByListDesc ( units , tmp ) ;
37322: LD_ADDR_VAR 0 3
37326: PUSH
37327: LD_VAR 0 1
37331: PPUSH
37332: LD_VAR 0 5
37336: PPUSH
37337: CALL_OW 77
37341: ST_TO_ADDR
// end ;
37342: LD_VAR 0 3
37346: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37347: LD_INT 0
37349: PPUSH
37350: PPUSH
37351: PPUSH
// result := false ;
37352: LD_ADDR_VAR 0 3
37356: PUSH
37357: LD_INT 0
37359: ST_TO_ADDR
// x := GetX ( building ) ;
37360: LD_ADDR_VAR 0 4
37364: PUSH
37365: LD_VAR 0 2
37369: PPUSH
37370: CALL_OW 250
37374: ST_TO_ADDR
// y := GetY ( building ) ;
37375: LD_ADDR_VAR 0 5
37379: PUSH
37380: LD_VAR 0 2
37384: PPUSH
37385: CALL_OW 251
37389: ST_TO_ADDR
// if not building or not x or not y then
37390: LD_VAR 0 2
37394: NOT
37395: PUSH
37396: LD_VAR 0 4
37400: NOT
37401: OR
37402: PUSH
37403: LD_VAR 0 5
37407: NOT
37408: OR
37409: IFFALSE 37413
// exit ;
37411: GO 37505
// if GetTaskList ( unit ) then
37413: LD_VAR 0 1
37417: PPUSH
37418: CALL_OW 437
37422: IFFALSE 37505
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37424: LD_STRING e
37426: PUSH
37427: LD_VAR 0 1
37431: PPUSH
37432: CALL_OW 437
37436: PUSH
37437: LD_INT 1
37439: ARRAY
37440: PUSH
37441: LD_INT 1
37443: ARRAY
37444: EQUAL
37445: PUSH
37446: LD_VAR 0 4
37450: PUSH
37451: LD_VAR 0 1
37455: PPUSH
37456: CALL_OW 437
37460: PUSH
37461: LD_INT 1
37463: ARRAY
37464: PUSH
37465: LD_INT 2
37467: ARRAY
37468: EQUAL
37469: AND
37470: PUSH
37471: LD_VAR 0 5
37475: PUSH
37476: LD_VAR 0 1
37480: PPUSH
37481: CALL_OW 437
37485: PUSH
37486: LD_INT 1
37488: ARRAY
37489: PUSH
37490: LD_INT 3
37492: ARRAY
37493: EQUAL
37494: AND
37495: IFFALSE 37505
// result := true end ;
37497: LD_ADDR_VAR 0 3
37501: PUSH
37502: LD_INT 1
37504: ST_TO_ADDR
// end ;
37505: LD_VAR 0 3
37509: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37510: LD_INT 0
37512: PPUSH
// result := false ;
37513: LD_ADDR_VAR 0 4
37517: PUSH
37518: LD_INT 0
37520: ST_TO_ADDR
// if GetTaskList ( unit ) then
37521: LD_VAR 0 1
37525: PPUSH
37526: CALL_OW 437
37530: IFFALSE 37613
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37532: LD_STRING M
37534: PUSH
37535: LD_VAR 0 1
37539: PPUSH
37540: CALL_OW 437
37544: PUSH
37545: LD_INT 1
37547: ARRAY
37548: PUSH
37549: LD_INT 1
37551: ARRAY
37552: EQUAL
37553: PUSH
37554: LD_VAR 0 2
37558: PUSH
37559: LD_VAR 0 1
37563: PPUSH
37564: CALL_OW 437
37568: PUSH
37569: LD_INT 1
37571: ARRAY
37572: PUSH
37573: LD_INT 2
37575: ARRAY
37576: EQUAL
37577: AND
37578: PUSH
37579: LD_VAR 0 3
37583: PUSH
37584: LD_VAR 0 1
37588: PPUSH
37589: CALL_OW 437
37593: PUSH
37594: LD_INT 1
37596: ARRAY
37597: PUSH
37598: LD_INT 3
37600: ARRAY
37601: EQUAL
37602: AND
37603: IFFALSE 37613
// result := true ;
37605: LD_ADDR_VAR 0 4
37609: PUSH
37610: LD_INT 1
37612: ST_TO_ADDR
// end ; end ;
37613: LD_VAR 0 4
37617: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37618: LD_INT 0
37620: PPUSH
37621: PPUSH
37622: PPUSH
37623: PPUSH
// if not unit or not area then
37624: LD_VAR 0 1
37628: NOT
37629: PUSH
37630: LD_VAR 0 2
37634: NOT
37635: OR
37636: IFFALSE 37640
// exit ;
37638: GO 37804
// tmp := AreaToList ( area , i ) ;
37640: LD_ADDR_VAR 0 6
37644: PUSH
37645: LD_VAR 0 2
37649: PPUSH
37650: LD_VAR 0 5
37654: PPUSH
37655: CALL_OW 517
37659: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37660: LD_ADDR_VAR 0 5
37664: PUSH
37665: DOUBLE
37666: LD_INT 1
37668: DEC
37669: ST_TO_ADDR
37670: LD_VAR 0 6
37674: PUSH
37675: LD_INT 1
37677: ARRAY
37678: PUSH
37679: FOR_TO
37680: IFFALSE 37802
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37682: LD_ADDR_VAR 0 7
37686: PUSH
37687: LD_VAR 0 6
37691: PUSH
37692: LD_INT 1
37694: ARRAY
37695: PUSH
37696: LD_VAR 0 5
37700: ARRAY
37701: PUSH
37702: LD_VAR 0 6
37706: PUSH
37707: LD_INT 2
37709: ARRAY
37710: PUSH
37711: LD_VAR 0 5
37715: ARRAY
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
37721: LD_VAR 0 7
37725: PUSH
37726: LD_INT 1
37728: ARRAY
37729: PPUSH
37730: LD_VAR 0 7
37734: PUSH
37735: LD_INT 2
37737: ARRAY
37738: PPUSH
37739: CALL_OW 428
37743: PUSH
37744: LD_INT 0
37746: EQUAL
37747: IFFALSE 37800
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37749: LD_VAR 0 1
37753: PPUSH
37754: LD_VAR 0 7
37758: PUSH
37759: LD_INT 1
37761: ARRAY
37762: PPUSH
37763: LD_VAR 0 7
37767: PUSH
37768: LD_INT 2
37770: ARRAY
37771: PPUSH
37772: LD_VAR 0 3
37776: PPUSH
37777: CALL_OW 48
// result := IsPlaced ( unit ) ;
37781: LD_ADDR_VAR 0 4
37785: PUSH
37786: LD_VAR 0 1
37790: PPUSH
37791: CALL_OW 305
37795: ST_TO_ADDR
// exit ;
37796: POP
37797: POP
37798: GO 37804
// end ; end ;
37800: GO 37679
37802: POP
37803: POP
// end ;
37804: LD_VAR 0 4
37808: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37809: LD_INT 0
37811: PPUSH
37812: PPUSH
37813: PPUSH
// if not side or side > 8 then
37814: LD_VAR 0 1
37818: NOT
37819: PUSH
37820: LD_VAR 0 1
37824: PUSH
37825: LD_INT 8
37827: GREATER
37828: OR
37829: IFFALSE 37833
// exit ;
37831: GO 38020
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37833: LD_ADDR_VAR 0 4
37837: PUSH
37838: LD_INT 22
37840: PUSH
37841: LD_VAR 0 1
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 21
37852: PUSH
37853: LD_INT 3
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PPUSH
37864: CALL_OW 69
37868: ST_TO_ADDR
// if not tmp then
37869: LD_VAR 0 4
37873: NOT
37874: IFFALSE 37878
// exit ;
37876: GO 38020
// enable_addtolog := true ;
37878: LD_ADDR_OWVAR 81
37882: PUSH
37883: LD_INT 1
37885: ST_TO_ADDR
// AddToLog ( [ ) ;
37886: LD_STRING [
37888: PPUSH
37889: CALL_OW 561
// for i in tmp do
37893: LD_ADDR_VAR 0 3
37897: PUSH
37898: LD_VAR 0 4
37902: PUSH
37903: FOR_IN
37904: IFFALSE 38011
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37906: LD_STRING [
37908: PUSH
37909: LD_VAR 0 3
37913: PPUSH
37914: CALL_OW 266
37918: STR
37919: PUSH
37920: LD_STRING , 
37922: STR
37923: PUSH
37924: LD_VAR 0 3
37928: PPUSH
37929: CALL_OW 250
37933: STR
37934: PUSH
37935: LD_STRING , 
37937: STR
37938: PUSH
37939: LD_VAR 0 3
37943: PPUSH
37944: CALL_OW 251
37948: STR
37949: PUSH
37950: LD_STRING , 
37952: STR
37953: PUSH
37954: LD_VAR 0 3
37958: PPUSH
37959: CALL_OW 254
37963: STR
37964: PUSH
37965: LD_STRING , 
37967: STR
37968: PUSH
37969: LD_VAR 0 3
37973: PPUSH
37974: LD_INT 1
37976: PPUSH
37977: CALL_OW 268
37981: STR
37982: PUSH
37983: LD_STRING , 
37985: STR
37986: PUSH
37987: LD_VAR 0 3
37991: PPUSH
37992: LD_INT 2
37994: PPUSH
37995: CALL_OW 268
37999: STR
38000: PUSH
38001: LD_STRING ],
38003: STR
38004: PPUSH
38005: CALL_OW 561
// end ;
38009: GO 37903
38011: POP
38012: POP
// AddToLog ( ]; ) ;
38013: LD_STRING ];
38015: PPUSH
38016: CALL_OW 561
// end ;
38020: LD_VAR 0 2
38024: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38025: LD_INT 0
38027: PPUSH
38028: PPUSH
38029: PPUSH
38030: PPUSH
38031: PPUSH
// if not area or not rate or not max then
38032: LD_VAR 0 1
38036: NOT
38037: PUSH
38038: LD_VAR 0 2
38042: NOT
38043: OR
38044: PUSH
38045: LD_VAR 0 4
38049: NOT
38050: OR
38051: IFFALSE 38055
// exit ;
38053: GO 38244
// while 1 do
38055: LD_INT 1
38057: IFFALSE 38244
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38059: LD_ADDR_VAR 0 9
38063: PUSH
38064: LD_VAR 0 1
38068: PPUSH
38069: LD_INT 1
38071: PPUSH
38072: CALL_OW 287
38076: PUSH
38077: LD_INT 10
38079: MUL
38080: ST_TO_ADDR
// r := rate / 10 ;
38081: LD_ADDR_VAR 0 7
38085: PUSH
38086: LD_VAR 0 2
38090: PUSH
38091: LD_INT 10
38093: DIVREAL
38094: ST_TO_ADDR
// time := 1 1$00 ;
38095: LD_ADDR_VAR 0 8
38099: PUSH
38100: LD_INT 2100
38102: ST_TO_ADDR
// if amount < min then
38103: LD_VAR 0 9
38107: PUSH
38108: LD_VAR 0 3
38112: LESS
38113: IFFALSE 38131
// r := r * 2 else
38115: LD_ADDR_VAR 0 7
38119: PUSH
38120: LD_VAR 0 7
38124: PUSH
38125: LD_INT 2
38127: MUL
38128: ST_TO_ADDR
38129: GO 38157
// if amount > max then
38131: LD_VAR 0 9
38135: PUSH
38136: LD_VAR 0 4
38140: GREATER
38141: IFFALSE 38157
// r := r / 2 ;
38143: LD_ADDR_VAR 0 7
38147: PUSH
38148: LD_VAR 0 7
38152: PUSH
38153: LD_INT 2
38155: DIVREAL
38156: ST_TO_ADDR
// time := time / r ;
38157: LD_ADDR_VAR 0 8
38161: PUSH
38162: LD_VAR 0 8
38166: PUSH
38167: LD_VAR 0 7
38171: DIVREAL
38172: ST_TO_ADDR
// if time < 0 then
38173: LD_VAR 0 8
38177: PUSH
38178: LD_INT 0
38180: LESS
38181: IFFALSE 38198
// time := time * - 1 ;
38183: LD_ADDR_VAR 0 8
38187: PUSH
38188: LD_VAR 0 8
38192: PUSH
38193: LD_INT 1
38195: NEG
38196: MUL
38197: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38198: LD_VAR 0 8
38202: PUSH
38203: LD_INT 35
38205: PPUSH
38206: LD_INT 875
38208: PPUSH
38209: CALL_OW 12
38213: PLUS
38214: PPUSH
38215: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38219: LD_INT 1
38221: PPUSH
38222: LD_INT 5
38224: PPUSH
38225: CALL_OW 12
38229: PPUSH
38230: LD_VAR 0 1
38234: PPUSH
38235: LD_INT 1
38237: PPUSH
38238: CALL_OW 55
// end ;
38242: GO 38055
// end ;
38244: LD_VAR 0 5
38248: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38249: LD_INT 0
38251: PPUSH
38252: PPUSH
38253: PPUSH
38254: PPUSH
38255: PPUSH
38256: PPUSH
38257: PPUSH
38258: PPUSH
// if not turrets or not factories then
38259: LD_VAR 0 1
38263: NOT
38264: PUSH
38265: LD_VAR 0 2
38269: NOT
38270: OR
38271: IFFALSE 38275
// exit ;
38273: GO 38582
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38275: LD_ADDR_VAR 0 10
38279: PUSH
38280: LD_INT 5
38282: PUSH
38283: LD_INT 6
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 2
38292: PUSH
38293: LD_INT 4
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 3
38302: PUSH
38303: LD_INT 5
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 24
38317: PUSH
38318: LD_INT 25
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 23
38327: PUSH
38328: LD_INT 27
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 42
38341: PUSH
38342: LD_INT 43
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 44
38351: PUSH
38352: LD_INT 46
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 45
38361: PUSH
38362: LD_INT 47
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: LIST
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: LIST
38378: ST_TO_ADDR
// result := [ ] ;
38379: LD_ADDR_VAR 0 3
38383: PUSH
38384: EMPTY
38385: ST_TO_ADDR
// for i in turrets do
38386: LD_ADDR_VAR 0 4
38390: PUSH
38391: LD_VAR 0 1
38395: PUSH
38396: FOR_IN
38397: IFFALSE 38580
// begin nat := GetNation ( i ) ;
38399: LD_ADDR_VAR 0 7
38403: PUSH
38404: LD_VAR 0 4
38408: PPUSH
38409: CALL_OW 248
38413: ST_TO_ADDR
// weapon := 0 ;
38414: LD_ADDR_VAR 0 8
38418: PUSH
38419: LD_INT 0
38421: ST_TO_ADDR
// if not nat then
38422: LD_VAR 0 7
38426: NOT
38427: IFFALSE 38431
// continue ;
38429: GO 38396
// for j in list [ nat ] do
38431: LD_ADDR_VAR 0 5
38435: PUSH
38436: LD_VAR 0 10
38440: PUSH
38441: LD_VAR 0 7
38445: ARRAY
38446: PUSH
38447: FOR_IN
38448: IFFALSE 38489
// if GetBWeapon ( i ) = j [ 1 ] then
38450: LD_VAR 0 4
38454: PPUSH
38455: CALL_OW 269
38459: PUSH
38460: LD_VAR 0 5
38464: PUSH
38465: LD_INT 1
38467: ARRAY
38468: EQUAL
38469: IFFALSE 38487
// begin weapon := j [ 2 ] ;
38471: LD_ADDR_VAR 0 8
38475: PUSH
38476: LD_VAR 0 5
38480: PUSH
38481: LD_INT 2
38483: ARRAY
38484: ST_TO_ADDR
// break ;
38485: GO 38489
// end ;
38487: GO 38447
38489: POP
38490: POP
// if not weapon then
38491: LD_VAR 0 8
38495: NOT
38496: IFFALSE 38500
// continue ;
38498: GO 38396
// for k in factories do
38500: LD_ADDR_VAR 0 6
38504: PUSH
38505: LD_VAR 0 2
38509: PUSH
38510: FOR_IN
38511: IFFALSE 38576
// begin weapons := AvailableWeaponList ( k ) ;
38513: LD_ADDR_VAR 0 9
38517: PUSH
38518: LD_VAR 0 6
38522: PPUSH
38523: CALL_OW 478
38527: ST_TO_ADDR
// if not weapons then
38528: LD_VAR 0 9
38532: NOT
38533: IFFALSE 38537
// continue ;
38535: GO 38510
// if weapon in weapons then
38537: LD_VAR 0 8
38541: PUSH
38542: LD_VAR 0 9
38546: IN
38547: IFFALSE 38574
// begin result := [ i , weapon ] ;
38549: LD_ADDR_VAR 0 3
38553: PUSH
38554: LD_VAR 0 4
38558: PUSH
38559: LD_VAR 0 8
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: ST_TO_ADDR
// exit ;
38568: POP
38569: POP
38570: POP
38571: POP
38572: GO 38582
// end ; end ;
38574: GO 38510
38576: POP
38577: POP
// end ;
38578: GO 38396
38580: POP
38581: POP
// end ;
38582: LD_VAR 0 3
38586: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38587: LD_INT 0
38589: PPUSH
// if not side or side > 8 then
38590: LD_VAR 0 3
38594: NOT
38595: PUSH
38596: LD_VAR 0 3
38600: PUSH
38601: LD_INT 8
38603: GREATER
38604: OR
38605: IFFALSE 38609
// exit ;
38607: GO 38668
// if not range then
38609: LD_VAR 0 4
38613: NOT
38614: IFFALSE 38625
// range := - 12 ;
38616: LD_ADDR_VAR 0 4
38620: PUSH
38621: LD_INT 12
38623: NEG
38624: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38625: LD_VAR 0 1
38629: PPUSH
38630: LD_VAR 0 2
38634: PPUSH
38635: LD_VAR 0 3
38639: PPUSH
38640: LD_VAR 0 4
38644: PPUSH
38645: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38649: LD_VAR 0 1
38653: PPUSH
38654: LD_VAR 0 2
38658: PPUSH
38659: LD_VAR 0 3
38663: PPUSH
38664: CALL_OW 331
// end ;
38668: LD_VAR 0 5
38672: RET
// export function Video ( mode ) ; begin
38673: LD_INT 0
38675: PPUSH
// ingame_video = mode ;
38676: LD_ADDR_OWVAR 52
38680: PUSH
38681: LD_VAR 0 1
38685: ST_TO_ADDR
// interface_hidden = mode ;
38686: LD_ADDR_OWVAR 54
38690: PUSH
38691: LD_VAR 0 1
38695: ST_TO_ADDR
// end ;
38696: LD_VAR 0 2
38700: RET
// export function Join ( array , element ) ; begin
38701: LD_INT 0
38703: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38704: LD_ADDR_VAR 0 3
38708: PUSH
38709: LD_VAR 0 1
38713: PPUSH
38714: LD_VAR 0 1
38718: PUSH
38719: LD_INT 1
38721: PLUS
38722: PPUSH
38723: LD_VAR 0 2
38727: PPUSH
38728: CALL_OW 1
38732: ST_TO_ADDR
// end ;
38733: LD_VAR 0 3
38737: RET
// export function JoinUnion ( array , element ) ; begin
38738: LD_INT 0
38740: PPUSH
// result := array union element ;
38741: LD_ADDR_VAR 0 3
38745: PUSH
38746: LD_VAR 0 1
38750: PUSH
38751: LD_VAR 0 2
38755: UNION
38756: ST_TO_ADDR
// end ;
38757: LD_VAR 0 3
38761: RET
// export function GetBehemoths ( side ) ; begin
38762: LD_INT 0
38764: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38765: LD_ADDR_VAR 0 2
38769: PUSH
38770: LD_INT 22
38772: PUSH
38773: LD_VAR 0 1
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 31
38784: PUSH
38785: LD_INT 25
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PPUSH
38796: CALL_OW 69
38800: ST_TO_ADDR
// end ;
38801: LD_VAR 0 2
38805: RET
// export function Shuffle ( array ) ; var i , index ; begin
38806: LD_INT 0
38808: PPUSH
38809: PPUSH
38810: PPUSH
// result := [ ] ;
38811: LD_ADDR_VAR 0 2
38815: PUSH
38816: EMPTY
38817: ST_TO_ADDR
// if not array then
38818: LD_VAR 0 1
38822: NOT
38823: IFFALSE 38827
// exit ;
38825: GO 38926
// Randomize ;
38827: CALL_OW 10
// for i = array downto 1 do
38831: LD_ADDR_VAR 0 3
38835: PUSH
38836: DOUBLE
38837: LD_VAR 0 1
38841: INC
38842: ST_TO_ADDR
38843: LD_INT 1
38845: PUSH
38846: FOR_DOWNTO
38847: IFFALSE 38924
// begin index := rand ( 1 , array ) ;
38849: LD_ADDR_VAR 0 4
38853: PUSH
38854: LD_INT 1
38856: PPUSH
38857: LD_VAR 0 1
38861: PPUSH
38862: CALL_OW 12
38866: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38867: LD_ADDR_VAR 0 2
38871: PUSH
38872: LD_VAR 0 2
38876: PPUSH
38877: LD_VAR 0 2
38881: PUSH
38882: LD_INT 1
38884: PLUS
38885: PPUSH
38886: LD_VAR 0 1
38890: PUSH
38891: LD_VAR 0 4
38895: ARRAY
38896: PPUSH
38897: CALL_OW 2
38901: ST_TO_ADDR
// array := Delete ( array , index ) ;
38902: LD_ADDR_VAR 0 1
38906: PUSH
38907: LD_VAR 0 1
38911: PPUSH
38912: LD_VAR 0 4
38916: PPUSH
38917: CALL_OW 3
38921: ST_TO_ADDR
// end ;
38922: GO 38846
38924: POP
38925: POP
// end ;
38926: LD_VAR 0 2
38930: RET
// export function GetBaseMaterials ( base ) ; begin
38931: LD_INT 0
38933: PPUSH
// result := [ 0 , 0 , 0 ] ;
38934: LD_ADDR_VAR 0 2
38938: PUSH
38939: LD_INT 0
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: LIST
38952: ST_TO_ADDR
// if not base then
38953: LD_VAR 0 1
38957: NOT
38958: IFFALSE 38962
// exit ;
38960: GO 39011
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38962: LD_ADDR_VAR 0 2
38966: PUSH
38967: LD_VAR 0 1
38971: PPUSH
38972: LD_INT 1
38974: PPUSH
38975: CALL_OW 275
38979: PUSH
38980: LD_VAR 0 1
38984: PPUSH
38985: LD_INT 2
38987: PPUSH
38988: CALL_OW 275
38992: PUSH
38993: LD_VAR 0 1
38997: PPUSH
38998: LD_INT 3
39000: PPUSH
39001: CALL_OW 275
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: ST_TO_ADDR
// end ;
39011: LD_VAR 0 2
39015: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39016: LD_INT 0
39018: PPUSH
39019: PPUSH
// result := array ;
39020: LD_ADDR_VAR 0 3
39024: PUSH
39025: LD_VAR 0 1
39029: ST_TO_ADDR
// if size >= result then
39030: LD_VAR 0 2
39034: PUSH
39035: LD_VAR 0 3
39039: GREATEREQUAL
39040: IFFALSE 39044
// exit ;
39042: GO 39094
// if size then
39044: LD_VAR 0 2
39048: IFFALSE 39094
// for i := array downto size do
39050: LD_ADDR_VAR 0 4
39054: PUSH
39055: DOUBLE
39056: LD_VAR 0 1
39060: INC
39061: ST_TO_ADDR
39062: LD_VAR 0 2
39066: PUSH
39067: FOR_DOWNTO
39068: IFFALSE 39092
// result := Delete ( result , result ) ;
39070: LD_ADDR_VAR 0 3
39074: PUSH
39075: LD_VAR 0 3
39079: PPUSH
39080: LD_VAR 0 3
39084: PPUSH
39085: CALL_OW 3
39089: ST_TO_ADDR
39090: GO 39067
39092: POP
39093: POP
// end ;
39094: LD_VAR 0 3
39098: RET
// export function ComExit ( unit ) ; var tmp ; begin
39099: LD_INT 0
39101: PPUSH
39102: PPUSH
// if not IsInUnit ( unit ) then
39103: LD_VAR 0 1
39107: PPUSH
39108: CALL_OW 310
39112: NOT
39113: IFFALSE 39117
// exit ;
39115: GO 39177
// tmp := IsInUnit ( unit ) ;
39117: LD_ADDR_VAR 0 3
39121: PUSH
39122: LD_VAR 0 1
39126: PPUSH
39127: CALL_OW 310
39131: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39132: LD_VAR 0 3
39136: PPUSH
39137: CALL_OW 247
39141: PUSH
39142: LD_INT 2
39144: EQUAL
39145: IFFALSE 39158
// ComExitVehicle ( unit ) else
39147: LD_VAR 0 1
39151: PPUSH
39152: CALL_OW 121
39156: GO 39167
// ComExitBuilding ( unit ) ;
39158: LD_VAR 0 1
39162: PPUSH
39163: CALL_OW 122
// result := tmp ;
39167: LD_ADDR_VAR 0 2
39171: PUSH
39172: LD_VAR 0 3
39176: ST_TO_ADDR
// end ;
39177: LD_VAR 0 2
39181: RET
// export function ComExitAll ( units ) ; var i ; begin
39182: LD_INT 0
39184: PPUSH
39185: PPUSH
// if not units then
39186: LD_VAR 0 1
39190: NOT
39191: IFFALSE 39195
// exit ;
39193: GO 39221
// for i in units do
39195: LD_ADDR_VAR 0 3
39199: PUSH
39200: LD_VAR 0 1
39204: PUSH
39205: FOR_IN
39206: IFFALSE 39219
// ComExit ( i ) ;
39208: LD_VAR 0 3
39212: PPUSH
39213: CALL 39099 0 1
39217: GO 39205
39219: POP
39220: POP
// end ;
39221: LD_VAR 0 2
39225: RET
// export function ResetHc ; begin
39226: LD_INT 0
39228: PPUSH
// InitHc ;
39229: CALL_OW 19
// hc_importance := 0 ;
39233: LD_ADDR_OWVAR 32
39237: PUSH
39238: LD_INT 0
39240: ST_TO_ADDR
// end ;
39241: LD_VAR 0 1
39245: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39246: LD_INT 0
39248: PPUSH
39249: PPUSH
39250: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39251: LD_ADDR_VAR 0 6
39255: PUSH
39256: LD_VAR 0 1
39260: PUSH
39261: LD_VAR 0 3
39265: PLUS
39266: PUSH
39267: LD_INT 2
39269: DIV
39270: ST_TO_ADDR
// if _x < 0 then
39271: LD_VAR 0 6
39275: PUSH
39276: LD_INT 0
39278: LESS
39279: IFFALSE 39296
// _x := _x * - 1 ;
39281: LD_ADDR_VAR 0 6
39285: PUSH
39286: LD_VAR 0 6
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: MUL
39295: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39296: LD_ADDR_VAR 0 7
39300: PUSH
39301: LD_VAR 0 2
39305: PUSH
39306: LD_VAR 0 4
39310: PLUS
39311: PUSH
39312: LD_INT 2
39314: DIV
39315: ST_TO_ADDR
// if _y < 0 then
39316: LD_VAR 0 7
39320: PUSH
39321: LD_INT 0
39323: LESS
39324: IFFALSE 39341
// _y := _y * - 1 ;
39326: LD_ADDR_VAR 0 7
39330: PUSH
39331: LD_VAR 0 7
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: MUL
39340: ST_TO_ADDR
// result := [ _x , _y ] ;
39341: LD_ADDR_VAR 0 5
39345: PUSH
39346: LD_VAR 0 6
39350: PUSH
39351: LD_VAR 0 7
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: ST_TO_ADDR
// end ;
39360: LD_VAR 0 5
39364: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39365: LD_INT 0
39367: PPUSH
39368: PPUSH
39369: PPUSH
39370: PPUSH
// task := GetTaskList ( unit ) ;
39371: LD_ADDR_VAR 0 7
39375: PUSH
39376: LD_VAR 0 1
39380: PPUSH
39381: CALL_OW 437
39385: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39386: LD_VAR 0 7
39390: NOT
39391: PUSH
39392: LD_VAR 0 1
39396: PPUSH
39397: LD_VAR 0 2
39401: PPUSH
39402: CALL_OW 308
39406: NOT
39407: AND
39408: IFFALSE 39412
// exit ;
39410: GO 39530
// if IsInArea ( unit , area ) then
39412: LD_VAR 0 1
39416: PPUSH
39417: LD_VAR 0 2
39421: PPUSH
39422: CALL_OW 308
39426: IFFALSE 39444
// begin ComMoveToArea ( unit , goAway ) ;
39428: LD_VAR 0 1
39432: PPUSH
39433: LD_VAR 0 3
39437: PPUSH
39438: CALL_OW 113
// exit ;
39442: GO 39530
// end ; if task [ 1 ] [ 1 ] <> M then
39444: LD_VAR 0 7
39448: PUSH
39449: LD_INT 1
39451: ARRAY
39452: PUSH
39453: LD_INT 1
39455: ARRAY
39456: PUSH
39457: LD_STRING M
39459: NONEQUAL
39460: IFFALSE 39464
// exit ;
39462: GO 39530
// x := task [ 1 ] [ 2 ] ;
39464: LD_ADDR_VAR 0 5
39468: PUSH
39469: LD_VAR 0 7
39473: PUSH
39474: LD_INT 1
39476: ARRAY
39477: PUSH
39478: LD_INT 2
39480: ARRAY
39481: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39482: LD_ADDR_VAR 0 6
39486: PUSH
39487: LD_VAR 0 7
39491: PUSH
39492: LD_INT 1
39494: ARRAY
39495: PUSH
39496: LD_INT 3
39498: ARRAY
39499: ST_TO_ADDR
// if InArea ( x , y , area ) then
39500: LD_VAR 0 5
39504: PPUSH
39505: LD_VAR 0 6
39509: PPUSH
39510: LD_VAR 0 2
39514: PPUSH
39515: CALL_OW 309
39519: IFFALSE 39530
// ComStop ( unit ) ;
39521: LD_VAR 0 1
39525: PPUSH
39526: CALL_OW 141
// end ;
39530: LD_VAR 0 4
39534: RET
// export function Abs ( value ) ; begin
39535: LD_INT 0
39537: PPUSH
// result := value ;
39538: LD_ADDR_VAR 0 2
39542: PUSH
39543: LD_VAR 0 1
39547: ST_TO_ADDR
// if value < 0 then
39548: LD_VAR 0 1
39552: PUSH
39553: LD_INT 0
39555: LESS
39556: IFFALSE 39573
// result := value * - 1 ;
39558: LD_ADDR_VAR 0 2
39562: PUSH
39563: LD_VAR 0 1
39567: PUSH
39568: LD_INT 1
39570: NEG
39571: MUL
39572: ST_TO_ADDR
// end ;
39573: LD_VAR 0 2
39577: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39578: LD_INT 0
39580: PPUSH
39581: PPUSH
39582: PPUSH
39583: PPUSH
39584: PPUSH
39585: PPUSH
39586: PPUSH
39587: PPUSH
// if not unit or not building then
39588: LD_VAR 0 1
39592: NOT
39593: PUSH
39594: LD_VAR 0 2
39598: NOT
39599: OR
39600: IFFALSE 39604
// exit ;
39602: GO 39830
// x := GetX ( building ) ;
39604: LD_ADDR_VAR 0 4
39608: PUSH
39609: LD_VAR 0 2
39613: PPUSH
39614: CALL_OW 250
39618: ST_TO_ADDR
// y := GetY ( building ) ;
39619: LD_ADDR_VAR 0 6
39623: PUSH
39624: LD_VAR 0 2
39628: PPUSH
39629: CALL_OW 251
39633: ST_TO_ADDR
// d := GetDir ( building ) ;
39634: LD_ADDR_VAR 0 8
39638: PUSH
39639: LD_VAR 0 2
39643: PPUSH
39644: CALL_OW 254
39648: ST_TO_ADDR
// r := 4 ;
39649: LD_ADDR_VAR 0 9
39653: PUSH
39654: LD_INT 4
39656: ST_TO_ADDR
// for i := 1 to 5 do
39657: LD_ADDR_VAR 0 10
39661: PUSH
39662: DOUBLE
39663: LD_INT 1
39665: DEC
39666: ST_TO_ADDR
39667: LD_INT 5
39669: PUSH
39670: FOR_TO
39671: IFFALSE 39828
// begin _x := ShiftX ( x , d , r + i ) ;
39673: LD_ADDR_VAR 0 5
39677: PUSH
39678: LD_VAR 0 4
39682: PPUSH
39683: LD_VAR 0 8
39687: PPUSH
39688: LD_VAR 0 9
39692: PUSH
39693: LD_VAR 0 10
39697: PLUS
39698: PPUSH
39699: CALL_OW 272
39703: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39704: LD_ADDR_VAR 0 7
39708: PUSH
39709: LD_VAR 0 6
39713: PPUSH
39714: LD_VAR 0 8
39718: PPUSH
39719: LD_VAR 0 9
39723: PUSH
39724: LD_VAR 0 10
39728: PLUS
39729: PPUSH
39730: CALL_OW 273
39734: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39735: LD_VAR 0 5
39739: PPUSH
39740: LD_VAR 0 7
39744: PPUSH
39745: CALL_OW 488
39749: PUSH
39750: LD_VAR 0 5
39754: PPUSH
39755: LD_VAR 0 7
39759: PPUSH
39760: CALL_OW 428
39764: PPUSH
39765: CALL_OW 247
39769: PUSH
39770: LD_INT 3
39772: PUSH
39773: LD_INT 2
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: IN
39780: NOT
39781: AND
39782: IFFALSE 39826
// begin ComMoveXY ( unit , _x , _y ) ;
39784: LD_VAR 0 1
39788: PPUSH
39789: LD_VAR 0 5
39793: PPUSH
39794: LD_VAR 0 7
39798: PPUSH
39799: CALL_OW 111
// result := [ _x , _y ] ;
39803: LD_ADDR_VAR 0 3
39807: PUSH
39808: LD_VAR 0 5
39812: PUSH
39813: LD_VAR 0 7
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: ST_TO_ADDR
// exit ;
39822: POP
39823: POP
39824: GO 39830
// end ; end ;
39826: GO 39670
39828: POP
39829: POP
// end ;
39830: LD_VAR 0 3
39834: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39835: LD_INT 0
39837: PPUSH
39838: PPUSH
39839: PPUSH
// result := 0 ;
39840: LD_ADDR_VAR 0 3
39844: PUSH
39845: LD_INT 0
39847: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39848: LD_VAR 0 1
39852: PUSH
39853: LD_INT 0
39855: LESS
39856: PUSH
39857: LD_VAR 0 1
39861: PUSH
39862: LD_INT 8
39864: GREATER
39865: OR
39866: PUSH
39867: LD_VAR 0 2
39871: PUSH
39872: LD_INT 0
39874: LESS
39875: OR
39876: PUSH
39877: LD_VAR 0 2
39881: PUSH
39882: LD_INT 8
39884: GREATER
39885: OR
39886: IFFALSE 39890
// exit ;
39888: GO 39965
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39890: LD_ADDR_VAR 0 4
39894: PUSH
39895: LD_INT 22
39897: PUSH
39898: LD_VAR 0 2
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PPUSH
39907: CALL_OW 69
39911: PUSH
39912: FOR_IN
39913: IFFALSE 39963
// begin un := UnitShoot ( i ) ;
39915: LD_ADDR_VAR 0 5
39919: PUSH
39920: LD_VAR 0 4
39924: PPUSH
39925: CALL_OW 504
39929: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39930: LD_VAR 0 5
39934: PPUSH
39935: CALL_OW 255
39939: PUSH
39940: LD_VAR 0 1
39944: EQUAL
39945: IFFALSE 39961
// begin result := un ;
39947: LD_ADDR_VAR 0 3
39951: PUSH
39952: LD_VAR 0 5
39956: ST_TO_ADDR
// exit ;
39957: POP
39958: POP
39959: GO 39965
// end ; end ;
39961: GO 39912
39963: POP
39964: POP
// end ;
39965: LD_VAR 0 3
39969: RET
// export function GetCargoBay ( units ) ; begin
39970: LD_INT 0
39972: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39973: LD_ADDR_VAR 0 2
39977: PUSH
39978: LD_VAR 0 1
39982: PPUSH
39983: LD_INT 2
39985: PUSH
39986: LD_INT 34
39988: PUSH
39989: LD_INT 12
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 34
39998: PUSH
39999: LD_INT 51
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 34
40008: PUSH
40009: LD_INT 32
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 34
40018: PUSH
40019: LD_EXP 4
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: PPUSH
40035: CALL_OW 72
40039: ST_TO_ADDR
// end ;
40040: LD_VAR 0 2
40044: RET
// export function Negate ( value ) ; begin
40045: LD_INT 0
40047: PPUSH
// result := not value ;
40048: LD_ADDR_VAR 0 2
40052: PUSH
40053: LD_VAR 0 1
40057: NOT
40058: ST_TO_ADDR
// end ;
40059: LD_VAR 0 2
40063: RET
// export function Inc ( value ) ; begin
40064: LD_INT 0
40066: PPUSH
// result := value + 1 ;
40067: LD_ADDR_VAR 0 2
40071: PUSH
40072: LD_VAR 0 1
40076: PUSH
40077: LD_INT 1
40079: PLUS
40080: ST_TO_ADDR
// end ;
40081: LD_VAR 0 2
40085: RET
// export function Dec ( value ) ; begin
40086: LD_INT 0
40088: PPUSH
// result := value - 1 ;
40089: LD_ADDR_VAR 0 2
40093: PUSH
40094: LD_VAR 0 1
40098: PUSH
40099: LD_INT 1
40101: MINUS
40102: ST_TO_ADDR
// end ;
40103: LD_VAR 0 2
40107: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40108: LD_INT 0
40110: PPUSH
40111: PPUSH
40112: PPUSH
40113: PPUSH
40114: PPUSH
40115: PPUSH
40116: PPUSH
40117: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40118: LD_VAR 0 1
40122: PPUSH
40123: LD_VAR 0 2
40127: PPUSH
40128: CALL_OW 488
40132: NOT
40133: PUSH
40134: LD_VAR 0 3
40138: PPUSH
40139: LD_VAR 0 4
40143: PPUSH
40144: CALL_OW 488
40148: NOT
40149: OR
40150: IFFALSE 40163
// begin result := - 1 ;
40152: LD_ADDR_VAR 0 5
40156: PUSH
40157: LD_INT 1
40159: NEG
40160: ST_TO_ADDR
// exit ;
40161: GO 40398
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40163: LD_ADDR_VAR 0 12
40167: PUSH
40168: LD_VAR 0 1
40172: PPUSH
40173: LD_VAR 0 2
40177: PPUSH
40178: LD_VAR 0 3
40182: PPUSH
40183: LD_VAR 0 4
40187: PPUSH
40188: CALL 39246 0 4
40192: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40193: LD_ADDR_VAR 0 11
40197: PUSH
40198: LD_VAR 0 1
40202: PPUSH
40203: LD_VAR 0 2
40207: PPUSH
40208: LD_VAR 0 12
40212: PUSH
40213: LD_INT 1
40215: ARRAY
40216: PPUSH
40217: LD_VAR 0 12
40221: PUSH
40222: LD_INT 2
40224: ARRAY
40225: PPUSH
40226: CALL_OW 298
40230: ST_TO_ADDR
// distance := 9999 ;
40231: LD_ADDR_VAR 0 10
40235: PUSH
40236: LD_INT 9999
40238: ST_TO_ADDR
// for i := 0 to 5 do
40239: LD_ADDR_VAR 0 6
40243: PUSH
40244: DOUBLE
40245: LD_INT 0
40247: DEC
40248: ST_TO_ADDR
40249: LD_INT 5
40251: PUSH
40252: FOR_TO
40253: IFFALSE 40396
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40255: LD_ADDR_VAR 0 7
40259: PUSH
40260: LD_VAR 0 1
40264: PPUSH
40265: LD_VAR 0 6
40269: PPUSH
40270: LD_VAR 0 11
40274: PPUSH
40275: CALL_OW 272
40279: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40280: LD_ADDR_VAR 0 8
40284: PUSH
40285: LD_VAR 0 2
40289: PPUSH
40290: LD_VAR 0 6
40294: PPUSH
40295: LD_VAR 0 11
40299: PPUSH
40300: CALL_OW 273
40304: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40305: LD_VAR 0 7
40309: PPUSH
40310: LD_VAR 0 8
40314: PPUSH
40315: CALL_OW 488
40319: NOT
40320: IFFALSE 40324
// continue ;
40322: GO 40252
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40324: LD_ADDR_VAR 0 9
40328: PUSH
40329: LD_VAR 0 12
40333: PUSH
40334: LD_INT 1
40336: ARRAY
40337: PPUSH
40338: LD_VAR 0 12
40342: PUSH
40343: LD_INT 2
40345: ARRAY
40346: PPUSH
40347: LD_VAR 0 7
40351: PPUSH
40352: LD_VAR 0 8
40356: PPUSH
40357: CALL_OW 298
40361: ST_TO_ADDR
// if tmp < distance then
40362: LD_VAR 0 9
40366: PUSH
40367: LD_VAR 0 10
40371: LESS
40372: IFFALSE 40394
// begin result := i ;
40374: LD_ADDR_VAR 0 5
40378: PUSH
40379: LD_VAR 0 6
40383: ST_TO_ADDR
// distance := tmp ;
40384: LD_ADDR_VAR 0 10
40388: PUSH
40389: LD_VAR 0 9
40393: ST_TO_ADDR
// end ; end ;
40394: GO 40252
40396: POP
40397: POP
// end ;
40398: LD_VAR 0 5
40402: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40403: LD_INT 0
40405: PPUSH
40406: PPUSH
// if not driver or not IsInUnit ( driver ) then
40407: LD_VAR 0 1
40411: NOT
40412: PUSH
40413: LD_VAR 0 1
40417: PPUSH
40418: CALL_OW 310
40422: NOT
40423: OR
40424: IFFALSE 40428
// exit ;
40426: GO 40518
// vehicle := IsInUnit ( driver ) ;
40428: LD_ADDR_VAR 0 3
40432: PUSH
40433: LD_VAR 0 1
40437: PPUSH
40438: CALL_OW 310
40442: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40443: LD_VAR 0 1
40447: PPUSH
40448: LD_STRING \
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: PUSH
40478: LD_STRING E
40480: PUSH
40481: LD_INT 0
40483: PUSH
40484: LD_INT 0
40486: PUSH
40487: LD_VAR 0 3
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PPUSH
40514: CALL_OW 446
// end ;
40518: LD_VAR 0 2
40522: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40523: LD_INT 0
40525: PPUSH
40526: PPUSH
// if not driver or not IsInUnit ( driver ) then
40527: LD_VAR 0 1
40531: NOT
40532: PUSH
40533: LD_VAR 0 1
40537: PPUSH
40538: CALL_OW 310
40542: NOT
40543: OR
40544: IFFALSE 40548
// exit ;
40546: GO 40638
// vehicle := IsInUnit ( driver ) ;
40548: LD_ADDR_VAR 0 3
40552: PUSH
40553: LD_VAR 0 1
40557: PPUSH
40558: CALL_OW 310
40562: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40563: LD_VAR 0 1
40567: PPUSH
40568: LD_STRING \
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: PUSH
40598: LD_STRING E
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: LD_VAR 0 3
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PPUSH
40634: CALL_OW 447
// end ;
40638: LD_VAR 0 2
40642: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40643: LD_INT 0
40645: PPUSH
40646: PPUSH
40647: PPUSH
// tmp := [ ] ;
40648: LD_ADDR_VAR 0 5
40652: PUSH
40653: EMPTY
40654: ST_TO_ADDR
// for i in units do
40655: LD_ADDR_VAR 0 4
40659: PUSH
40660: LD_VAR 0 1
40664: PUSH
40665: FOR_IN
40666: IFFALSE 40704
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40668: LD_ADDR_VAR 0 5
40672: PUSH
40673: LD_VAR 0 5
40677: PPUSH
40678: LD_VAR 0 5
40682: PUSH
40683: LD_INT 1
40685: PLUS
40686: PPUSH
40687: LD_VAR 0 4
40691: PPUSH
40692: CALL_OW 256
40696: PPUSH
40697: CALL_OW 2
40701: ST_TO_ADDR
40702: GO 40665
40704: POP
40705: POP
// if not tmp then
40706: LD_VAR 0 5
40710: NOT
40711: IFFALSE 40715
// exit ;
40713: GO 40763
// if asc then
40715: LD_VAR 0 2
40719: IFFALSE 40743
// result := SortListByListAsc ( units , tmp ) else
40721: LD_ADDR_VAR 0 3
40725: PUSH
40726: LD_VAR 0 1
40730: PPUSH
40731: LD_VAR 0 5
40735: PPUSH
40736: CALL_OW 76
40740: ST_TO_ADDR
40741: GO 40763
// result := SortListByListDesc ( units , tmp ) ;
40743: LD_ADDR_VAR 0 3
40747: PUSH
40748: LD_VAR 0 1
40752: PPUSH
40753: LD_VAR 0 5
40757: PPUSH
40758: CALL_OW 77
40762: ST_TO_ADDR
// end ;
40763: LD_VAR 0 3
40767: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40768: LD_INT 0
40770: PPUSH
40771: PPUSH
// task := GetTaskList ( mech ) ;
40772: LD_ADDR_VAR 0 4
40776: PUSH
40777: LD_VAR 0 1
40781: PPUSH
40782: CALL_OW 437
40786: ST_TO_ADDR
// if not task then
40787: LD_VAR 0 4
40791: NOT
40792: IFFALSE 40796
// exit ;
40794: GO 40838
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40796: LD_ADDR_VAR 0 3
40800: PUSH
40801: LD_VAR 0 4
40805: PUSH
40806: LD_INT 1
40808: ARRAY
40809: PUSH
40810: LD_INT 1
40812: ARRAY
40813: PUSH
40814: LD_STRING r
40816: EQUAL
40817: PUSH
40818: LD_VAR 0 4
40822: PUSH
40823: LD_INT 1
40825: ARRAY
40826: PUSH
40827: LD_INT 4
40829: ARRAY
40830: PUSH
40831: LD_VAR 0 2
40835: EQUAL
40836: AND
40837: ST_TO_ADDR
// end ;
40838: LD_VAR 0 3
40842: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40843: LD_INT 0
40845: PPUSH
// SetDir ( unit , d ) ;
40846: LD_VAR 0 1
40850: PPUSH
40851: LD_VAR 0 4
40855: PPUSH
40856: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40860: LD_VAR 0 1
40864: PPUSH
40865: LD_VAR 0 2
40869: PPUSH
40870: LD_VAR 0 3
40874: PPUSH
40875: LD_VAR 0 5
40879: PPUSH
40880: CALL_OW 48
// end ;
40884: LD_VAR 0 6
40888: RET
// export function ToNaturalNumber ( number ) ; begin
40889: LD_INT 0
40891: PPUSH
// result := number div 1 ;
40892: LD_ADDR_VAR 0 2
40896: PUSH
40897: LD_VAR 0 1
40901: PUSH
40902: LD_INT 1
40904: DIV
40905: ST_TO_ADDR
// if number < 0 then
40906: LD_VAR 0 1
40910: PUSH
40911: LD_INT 0
40913: LESS
40914: IFFALSE 40924
// result := 0 ;
40916: LD_ADDR_VAR 0 2
40920: PUSH
40921: LD_INT 0
40923: ST_TO_ADDR
// end ;
40924: LD_VAR 0 2
40928: RET
// export function SortByClass ( units , class ) ; var un ; begin
40929: LD_INT 0
40931: PPUSH
40932: PPUSH
// if not units or not class then
40933: LD_VAR 0 1
40937: NOT
40938: PUSH
40939: LD_VAR 0 2
40943: NOT
40944: OR
40945: IFFALSE 40949
// exit ;
40947: GO 41044
// result := [ ] ;
40949: LD_ADDR_VAR 0 3
40953: PUSH
40954: EMPTY
40955: ST_TO_ADDR
// for un in units do
40956: LD_ADDR_VAR 0 4
40960: PUSH
40961: LD_VAR 0 1
40965: PUSH
40966: FOR_IN
40967: IFFALSE 41042
// if GetClass ( un ) = class then
40969: LD_VAR 0 4
40973: PPUSH
40974: CALL_OW 257
40978: PUSH
40979: LD_VAR 0 2
40983: EQUAL
40984: IFFALSE 41011
// result := Insert ( result , 1 , un ) else
40986: LD_ADDR_VAR 0 3
40990: PUSH
40991: LD_VAR 0 3
40995: PPUSH
40996: LD_INT 1
40998: PPUSH
40999: LD_VAR 0 4
41003: PPUSH
41004: CALL_OW 2
41008: ST_TO_ADDR
41009: GO 41040
// result := Replace ( result , result + 1 , un ) ;
41011: LD_ADDR_VAR 0 3
41015: PUSH
41016: LD_VAR 0 3
41020: PPUSH
41021: LD_VAR 0 3
41025: PUSH
41026: LD_INT 1
41028: PLUS
41029: PPUSH
41030: LD_VAR 0 4
41034: PPUSH
41035: CALL_OW 1
41039: ST_TO_ADDR
41040: GO 40966
41042: POP
41043: POP
// end ;
41044: LD_VAR 0 3
41048: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41049: LD_INT 0
41051: PPUSH
41052: PPUSH
41053: PPUSH
41054: PPUSH
41055: PPUSH
41056: PPUSH
41057: PPUSH
// result := [ ] ;
41058: LD_ADDR_VAR 0 4
41062: PUSH
41063: EMPTY
41064: ST_TO_ADDR
// if x - r < 0 then
41065: LD_VAR 0 1
41069: PUSH
41070: LD_VAR 0 3
41074: MINUS
41075: PUSH
41076: LD_INT 0
41078: LESS
41079: IFFALSE 41091
// min_x := 0 else
41081: LD_ADDR_VAR 0 8
41085: PUSH
41086: LD_INT 0
41088: ST_TO_ADDR
41089: GO 41107
// min_x := x - r ;
41091: LD_ADDR_VAR 0 8
41095: PUSH
41096: LD_VAR 0 1
41100: PUSH
41101: LD_VAR 0 3
41105: MINUS
41106: ST_TO_ADDR
// if y - r < 0 then
41107: LD_VAR 0 2
41111: PUSH
41112: LD_VAR 0 3
41116: MINUS
41117: PUSH
41118: LD_INT 0
41120: LESS
41121: IFFALSE 41133
// min_y := 0 else
41123: LD_ADDR_VAR 0 7
41127: PUSH
41128: LD_INT 0
41130: ST_TO_ADDR
41131: GO 41149
// min_y := y - r ;
41133: LD_ADDR_VAR 0 7
41137: PUSH
41138: LD_VAR 0 2
41142: PUSH
41143: LD_VAR 0 3
41147: MINUS
41148: ST_TO_ADDR
// max_x := x + r ;
41149: LD_ADDR_VAR 0 9
41153: PUSH
41154: LD_VAR 0 1
41158: PUSH
41159: LD_VAR 0 3
41163: PLUS
41164: ST_TO_ADDR
// max_y := y + r ;
41165: LD_ADDR_VAR 0 10
41169: PUSH
41170: LD_VAR 0 2
41174: PUSH
41175: LD_VAR 0 3
41179: PLUS
41180: ST_TO_ADDR
// for _x = min_x to max_x do
41181: LD_ADDR_VAR 0 5
41185: PUSH
41186: DOUBLE
41187: LD_VAR 0 8
41191: DEC
41192: ST_TO_ADDR
41193: LD_VAR 0 9
41197: PUSH
41198: FOR_TO
41199: IFFALSE 41300
// for _y = min_y to max_y do
41201: LD_ADDR_VAR 0 6
41205: PUSH
41206: DOUBLE
41207: LD_VAR 0 7
41211: DEC
41212: ST_TO_ADDR
41213: LD_VAR 0 10
41217: PUSH
41218: FOR_TO
41219: IFFALSE 41296
// begin if not ValidHex ( _x , _y ) then
41221: LD_VAR 0 5
41225: PPUSH
41226: LD_VAR 0 6
41230: PPUSH
41231: CALL_OW 488
41235: NOT
41236: IFFALSE 41240
// continue ;
41238: GO 41218
// if GetResourceTypeXY ( _x , _y ) then
41240: LD_VAR 0 5
41244: PPUSH
41245: LD_VAR 0 6
41249: PPUSH
41250: CALL_OW 283
41254: IFFALSE 41294
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41256: LD_ADDR_VAR 0 4
41260: PUSH
41261: LD_VAR 0 4
41265: PPUSH
41266: LD_VAR 0 4
41270: PUSH
41271: LD_INT 1
41273: PLUS
41274: PPUSH
41275: LD_VAR 0 5
41279: PUSH
41280: LD_VAR 0 6
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PPUSH
41289: CALL_OW 1
41293: ST_TO_ADDR
// end ;
41294: GO 41218
41296: POP
41297: POP
41298: GO 41198
41300: POP
41301: POP
// end ;
41302: LD_VAR 0 4
41306: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41307: LD_INT 0
41309: PPUSH
41310: PPUSH
41311: PPUSH
41312: PPUSH
41313: PPUSH
41314: PPUSH
41315: PPUSH
41316: PPUSH
// if not units then
41317: LD_VAR 0 1
41321: NOT
41322: IFFALSE 41326
// exit ;
41324: GO 41852
// result := UnitFilter ( units , [ f_ok ] ) ;
41326: LD_ADDR_VAR 0 3
41330: PUSH
41331: LD_VAR 0 1
41335: PPUSH
41336: LD_INT 50
41338: PUSH
41339: EMPTY
41340: LIST
41341: PPUSH
41342: CALL_OW 72
41346: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41347: LD_ADDR_VAR 0 8
41351: PUSH
41352: LD_VAR 0 1
41356: PUSH
41357: LD_INT 1
41359: ARRAY
41360: PPUSH
41361: CALL_OW 255
41365: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41366: LD_ADDR_VAR 0 10
41370: PUSH
41371: LD_INT 29
41373: PUSH
41374: LD_EXP 7
41378: PUSH
41379: LD_INT 49
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: LIST
41386: ST_TO_ADDR
// if not result then
41387: LD_VAR 0 3
41391: NOT
41392: IFFALSE 41396
// exit ;
41394: GO 41852
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41396: LD_ADDR_VAR 0 5
41400: PUSH
41401: LD_INT 81
41403: PUSH
41404: LD_VAR 0 8
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PPUSH
41413: CALL_OW 69
41417: ST_TO_ADDR
// for i in result do
41418: LD_ADDR_VAR 0 4
41422: PUSH
41423: LD_VAR 0 3
41427: PUSH
41428: FOR_IN
41429: IFFALSE 41850
// begin tag := GetTag ( i ) + 1 ;
41431: LD_ADDR_VAR 0 9
41435: PUSH
41436: LD_VAR 0 4
41440: PPUSH
41441: CALL_OW 110
41445: PUSH
41446: LD_INT 1
41448: PLUS
41449: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41450: LD_ADDR_VAR 0 7
41454: PUSH
41455: LD_VAR 0 4
41459: PPUSH
41460: CALL_OW 250
41464: PPUSH
41465: LD_VAR 0 4
41469: PPUSH
41470: CALL_OW 251
41474: PPUSH
41475: LD_INT 6
41477: PPUSH
41478: CALL 41049 0 3
41482: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41483: LD_VAR 0 4
41487: PPUSH
41488: CALL_OW 247
41492: PUSH
41493: LD_INT 2
41495: EQUAL
41496: PUSH
41497: LD_VAR 0 7
41501: AND
41502: PUSH
41503: LD_VAR 0 4
41507: PPUSH
41508: CALL_OW 264
41512: PUSH
41513: LD_VAR 0 10
41517: IN
41518: NOT
41519: AND
41520: IFFALSE 41559
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41522: LD_VAR 0 4
41526: PPUSH
41527: LD_VAR 0 7
41531: PUSH
41532: LD_INT 1
41534: ARRAY
41535: PUSH
41536: LD_INT 1
41538: ARRAY
41539: PPUSH
41540: LD_VAR 0 7
41544: PUSH
41545: LD_INT 1
41547: ARRAY
41548: PUSH
41549: LD_INT 2
41551: ARRAY
41552: PPUSH
41553: CALL_OW 116
41557: GO 41848
// if path > tag then
41559: LD_VAR 0 2
41563: PUSH
41564: LD_VAR 0 9
41568: GREATER
41569: IFFALSE 41777
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41571: LD_ADDR_VAR 0 6
41575: PUSH
41576: LD_VAR 0 5
41580: PPUSH
41581: LD_INT 91
41583: PUSH
41584: LD_VAR 0 4
41588: PUSH
41589: LD_INT 8
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: LIST
41596: PPUSH
41597: CALL_OW 72
41601: ST_TO_ADDR
// if nearEnemy then
41602: LD_VAR 0 6
41606: IFFALSE 41675
// begin if GetWeapon ( i ) = ru_time_lapser then
41608: LD_VAR 0 4
41612: PPUSH
41613: CALL_OW 264
41617: PUSH
41618: LD_INT 49
41620: EQUAL
41621: IFFALSE 41649
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41623: LD_VAR 0 4
41627: PPUSH
41628: LD_VAR 0 6
41632: PPUSH
41633: LD_VAR 0 4
41637: PPUSH
41638: CALL_OW 74
41642: PPUSH
41643: CALL_OW 112
41647: GO 41673
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41649: LD_VAR 0 4
41653: PPUSH
41654: LD_VAR 0 6
41658: PPUSH
41659: LD_VAR 0 4
41663: PPUSH
41664: CALL_OW 74
41668: PPUSH
41669: CALL_OW 115
// end else
41673: GO 41775
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41675: LD_VAR 0 4
41679: PPUSH
41680: LD_VAR 0 2
41684: PUSH
41685: LD_VAR 0 9
41689: ARRAY
41690: PUSH
41691: LD_INT 1
41693: ARRAY
41694: PPUSH
41695: LD_VAR 0 2
41699: PUSH
41700: LD_VAR 0 9
41704: ARRAY
41705: PUSH
41706: LD_INT 2
41708: ARRAY
41709: PPUSH
41710: CALL_OW 297
41714: PUSH
41715: LD_INT 6
41717: GREATER
41718: IFFALSE 41761
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41720: LD_VAR 0 4
41724: PPUSH
41725: LD_VAR 0 2
41729: PUSH
41730: LD_VAR 0 9
41734: ARRAY
41735: PUSH
41736: LD_INT 1
41738: ARRAY
41739: PPUSH
41740: LD_VAR 0 2
41744: PUSH
41745: LD_VAR 0 9
41749: ARRAY
41750: PUSH
41751: LD_INT 2
41753: ARRAY
41754: PPUSH
41755: CALL_OW 114
41759: GO 41775
// SetTag ( i , tag ) ;
41761: LD_VAR 0 4
41765: PPUSH
41766: LD_VAR 0 9
41770: PPUSH
41771: CALL_OW 109
// end else
41775: GO 41848
// if enemy then
41777: LD_VAR 0 5
41781: IFFALSE 41848
// begin if GetWeapon ( i ) = ru_time_lapser then
41783: LD_VAR 0 4
41787: PPUSH
41788: CALL_OW 264
41792: PUSH
41793: LD_INT 49
41795: EQUAL
41796: IFFALSE 41824
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41798: LD_VAR 0 4
41802: PPUSH
41803: LD_VAR 0 5
41807: PPUSH
41808: LD_VAR 0 4
41812: PPUSH
41813: CALL_OW 74
41817: PPUSH
41818: CALL_OW 112
41822: GO 41848
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41824: LD_VAR 0 4
41828: PPUSH
41829: LD_VAR 0 5
41833: PPUSH
41834: LD_VAR 0 4
41838: PPUSH
41839: CALL_OW 74
41843: PPUSH
41844: CALL_OW 115
// end ; end ;
41848: GO 41428
41850: POP
41851: POP
// end ;
41852: LD_VAR 0 3
41856: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41857: LD_INT 0
41859: PPUSH
41860: PPUSH
41861: PPUSH
// if not unit or IsInUnit ( unit ) then
41862: LD_VAR 0 1
41866: NOT
41867: PUSH
41868: LD_VAR 0 1
41872: PPUSH
41873: CALL_OW 310
41877: OR
41878: IFFALSE 41882
// exit ;
41880: GO 41973
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41882: LD_ADDR_VAR 0 4
41886: PUSH
41887: LD_VAR 0 1
41891: PPUSH
41892: CALL_OW 250
41896: PPUSH
41897: LD_VAR 0 2
41901: PPUSH
41902: LD_INT 1
41904: PPUSH
41905: CALL_OW 272
41909: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41910: LD_ADDR_VAR 0 5
41914: PUSH
41915: LD_VAR 0 1
41919: PPUSH
41920: CALL_OW 251
41924: PPUSH
41925: LD_VAR 0 2
41929: PPUSH
41930: LD_INT 1
41932: PPUSH
41933: CALL_OW 273
41937: ST_TO_ADDR
// if ValidHex ( x , y ) then
41938: LD_VAR 0 4
41942: PPUSH
41943: LD_VAR 0 5
41947: PPUSH
41948: CALL_OW 488
41952: IFFALSE 41973
// ComTurnXY ( unit , x , y ) ;
41954: LD_VAR 0 1
41958: PPUSH
41959: LD_VAR 0 4
41963: PPUSH
41964: LD_VAR 0 5
41968: PPUSH
41969: CALL_OW 118
// end ;
41973: LD_VAR 0 3
41977: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41978: LD_INT 0
41980: PPUSH
41981: PPUSH
// result := false ;
41982: LD_ADDR_VAR 0 3
41986: PUSH
41987: LD_INT 0
41989: ST_TO_ADDR
// if not units then
41990: LD_VAR 0 2
41994: NOT
41995: IFFALSE 41999
// exit ;
41997: GO 42044
// for i in units do
41999: LD_ADDR_VAR 0 4
42003: PUSH
42004: LD_VAR 0 2
42008: PUSH
42009: FOR_IN
42010: IFFALSE 42042
// if See ( side , i ) then
42012: LD_VAR 0 1
42016: PPUSH
42017: LD_VAR 0 4
42021: PPUSH
42022: CALL_OW 292
42026: IFFALSE 42040
// begin result := true ;
42028: LD_ADDR_VAR 0 3
42032: PUSH
42033: LD_INT 1
42035: ST_TO_ADDR
// exit ;
42036: POP
42037: POP
42038: GO 42044
// end ;
42040: GO 42009
42042: POP
42043: POP
// end ;
42044: LD_VAR 0 3
42048: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42049: LD_INT 0
42051: PPUSH
42052: PPUSH
42053: PPUSH
42054: PPUSH
// if not unit or not points then
42055: LD_VAR 0 1
42059: NOT
42060: PUSH
42061: LD_VAR 0 2
42065: NOT
42066: OR
42067: IFFALSE 42071
// exit ;
42069: GO 42161
// dist := 99999 ;
42071: LD_ADDR_VAR 0 5
42075: PUSH
42076: LD_INT 99999
42078: ST_TO_ADDR
// for i in points do
42079: LD_ADDR_VAR 0 4
42083: PUSH
42084: LD_VAR 0 2
42088: PUSH
42089: FOR_IN
42090: IFFALSE 42159
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42092: LD_ADDR_VAR 0 6
42096: PUSH
42097: LD_VAR 0 1
42101: PPUSH
42102: LD_VAR 0 4
42106: PUSH
42107: LD_INT 1
42109: ARRAY
42110: PPUSH
42111: LD_VAR 0 4
42115: PUSH
42116: LD_INT 2
42118: ARRAY
42119: PPUSH
42120: CALL_OW 297
42124: ST_TO_ADDR
// if tmpDist < dist then
42125: LD_VAR 0 6
42129: PUSH
42130: LD_VAR 0 5
42134: LESS
42135: IFFALSE 42157
// begin result := i ;
42137: LD_ADDR_VAR 0 3
42141: PUSH
42142: LD_VAR 0 4
42146: ST_TO_ADDR
// dist := tmpDist ;
42147: LD_ADDR_VAR 0 5
42151: PUSH
42152: LD_VAR 0 6
42156: ST_TO_ADDR
// end ; end ;
42157: GO 42089
42159: POP
42160: POP
// end ;
42161: LD_VAR 0 3
42165: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42166: LD_INT 0
42168: PPUSH
// uc_side := side ;
42169: LD_ADDR_OWVAR 20
42173: PUSH
42174: LD_VAR 0 1
42178: ST_TO_ADDR
// uc_nation := 3 ;
42179: LD_ADDR_OWVAR 21
42183: PUSH
42184: LD_INT 3
42186: ST_TO_ADDR
// vc_chassis := 25 ;
42187: LD_ADDR_OWVAR 37
42191: PUSH
42192: LD_INT 25
42194: ST_TO_ADDR
// vc_engine := engine_siberite ;
42195: LD_ADDR_OWVAR 39
42199: PUSH
42200: LD_INT 3
42202: ST_TO_ADDR
// vc_control := control_computer ;
42203: LD_ADDR_OWVAR 38
42207: PUSH
42208: LD_INT 3
42210: ST_TO_ADDR
// vc_weapon := 59 ;
42211: LD_ADDR_OWVAR 40
42215: PUSH
42216: LD_INT 59
42218: ST_TO_ADDR
// result := CreateVehicle ;
42219: LD_ADDR_VAR 0 5
42223: PUSH
42224: CALL_OW 45
42228: ST_TO_ADDR
// SetDir ( result , d ) ;
42229: LD_VAR 0 5
42233: PPUSH
42234: LD_VAR 0 4
42238: PPUSH
42239: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42243: LD_VAR 0 5
42247: PPUSH
42248: LD_VAR 0 2
42252: PPUSH
42253: LD_VAR 0 3
42257: PPUSH
42258: LD_INT 0
42260: PPUSH
42261: CALL_OW 48
// end ;
42265: LD_VAR 0 5
42269: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42270: LD_INT 0
42272: PPUSH
42273: PPUSH
42274: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42275: LD_ADDR_VAR 0 2
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42298: LD_VAR 0 1
42302: NOT
42303: PUSH
42304: LD_VAR 0 1
42308: PPUSH
42309: CALL_OW 264
42313: PUSH
42314: LD_INT 12
42316: PUSH
42317: LD_INT 51
42319: PUSH
42320: LD_INT 32
42322: PUSH
42323: LD_EXP 4
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: IN
42334: NOT
42335: OR
42336: IFFALSE 42340
// exit ;
42338: GO 42438
// for i := 1 to 3 do
42340: LD_ADDR_VAR 0 3
42344: PUSH
42345: DOUBLE
42346: LD_INT 1
42348: DEC
42349: ST_TO_ADDR
42350: LD_INT 3
42352: PUSH
42353: FOR_TO
42354: IFFALSE 42436
// begin tmp := GetCargo ( cargo , i ) ;
42356: LD_ADDR_VAR 0 4
42360: PUSH
42361: LD_VAR 0 1
42365: PPUSH
42366: LD_VAR 0 3
42370: PPUSH
42371: CALL_OW 289
42375: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42376: LD_ADDR_VAR 0 2
42380: PUSH
42381: LD_VAR 0 2
42385: PPUSH
42386: LD_VAR 0 3
42390: PPUSH
42391: LD_VAR 0 4
42395: PPUSH
42396: CALL_OW 1
42400: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42401: LD_ADDR_VAR 0 2
42405: PUSH
42406: LD_VAR 0 2
42410: PPUSH
42411: LD_INT 4
42413: PPUSH
42414: LD_VAR 0 2
42418: PUSH
42419: LD_INT 4
42421: ARRAY
42422: PUSH
42423: LD_VAR 0 4
42427: PLUS
42428: PPUSH
42429: CALL_OW 1
42433: ST_TO_ADDR
// end ;
42434: GO 42353
42436: POP
42437: POP
// end ;
42438: LD_VAR 0 2
42442: RET
// export function Length ( array ) ; begin
42443: LD_INT 0
42445: PPUSH
// result := array + 0 ;
42446: LD_ADDR_VAR 0 2
42450: PUSH
42451: LD_VAR 0 1
42455: PUSH
42456: LD_INT 0
42458: PLUS
42459: ST_TO_ADDR
// end ;
42460: LD_VAR 0 2
42464: RET
// export function PrepareArray ( array ) ; begin
42465: LD_INT 0
42467: PPUSH
// result := array diff 0 ;
42468: LD_ADDR_VAR 0 2
42472: PUSH
42473: LD_VAR 0 1
42477: PUSH
42478: LD_INT 0
42480: DIFF
42481: ST_TO_ADDR
// if not result [ 1 ] then
42482: LD_VAR 0 2
42486: PUSH
42487: LD_INT 1
42489: ARRAY
42490: NOT
42491: IFFALSE 42511
// result := Delete ( result , 1 ) ;
42493: LD_ADDR_VAR 0 2
42497: PUSH
42498: LD_VAR 0 2
42502: PPUSH
42503: LD_INT 1
42505: PPUSH
42506: CALL_OW 3
42510: ST_TO_ADDR
// end ; end_of_file
42511: LD_VAR 0 2
42515: RET
// export ecoSide , ecoNation , ecoPeopleAmount , ecoStartPoint , ecoCratesDrop , ecoCratesDropXY , ecoCratesDropAllow , ecoAttacksAllow , ecoEventsAllow , ecoAttacksArea , ecoEventsList ; export function InitEcoMode ( startPoint , cratesDropXY , attacksArea ) ; var i , tmp , side , nation , peopleAmount , resourcesAmount ; begin
42516: LD_INT 0
42518: PPUSH
42519: PPUSH
42520: PPUSH
42521: PPUSH
42522: PPUSH
42523: PPUSH
42524: PPUSH
// ecoStartPoint := startPoint ;
42525: LD_ADDR_EXP 24
42529: PUSH
42530: LD_VAR 0 1
42534: ST_TO_ADDR
// CenterNowOnXY ( ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
42535: LD_EXP 24
42539: PUSH
42540: LD_INT 1
42542: ARRAY
42543: PPUSH
42544: LD_EXP 24
42548: PUSH
42549: LD_INT 2
42551: ARRAY
42552: PPUSH
42553: CALL_OW 86
// ecoCratesDropXY := cratesDropXY ;
42557: LD_ADDR_EXP 26
42561: PUSH
42562: LD_VAR 0 2
42566: ST_TO_ADDR
// ecoAttacksArea := attacksArea ;
42567: LD_ADDR_EXP 30
42571: PUSH
42572: LD_VAR 0 3
42576: ST_TO_ADDR
// if debug then
42577: LD_EXP 1
42581: IFFALSE 42625
// begin side := 1 ;
42583: LD_ADDR_VAR 0 7
42587: PUSH
42588: LD_INT 1
42590: ST_TO_ADDR
// nation := 1 ;
42591: LD_ADDR_VAR 0 8
42595: PUSH
42596: LD_INT 1
42598: ST_TO_ADDR
// peopleAmount := 15 ;
42599: LD_ADDR_VAR 0 9
42603: PUSH
42604: LD_INT 15
42606: ST_TO_ADDR
// resourcesAmount := 2 ;
42607: LD_ADDR_VAR 0 10
42611: PUSH
42612: LD_INT 2
42614: ST_TO_ADDR
// ecoCratesDrop := 3 ;
42615: LD_ADDR_EXP 25
42619: PUSH
42620: LD_INT 3
42622: ST_TO_ADDR
// end else
42623: GO 42721
// begin side := GetMultiplayerSetting ( 0 ) ;
42625: LD_ADDR_VAR 0 7
42629: PUSH
42630: LD_INT 0
42632: PPUSH
42633: CALL_OW 426
42637: ST_TO_ADDR
// nation := GetMultiplayerSetting ( 1 ) ;
42638: LD_ADDR_VAR 0 8
42642: PUSH
42643: LD_INT 1
42645: PPUSH
42646: CALL_OW 426
42650: ST_TO_ADDR
// peopleAmount := [ 6 , 9 , 12 , 15 , 18 , 21 , 24 ] [ GetMultiplayerSetting ( 2 ) ] ;
42651: LD_ADDR_VAR 0 9
42655: PUSH
42656: LD_INT 6
42658: PUSH
42659: LD_INT 9
42661: PUSH
42662: LD_INT 12
42664: PUSH
42665: LD_INT 15
42667: PUSH
42668: LD_INT 18
42670: PUSH
42671: LD_INT 21
42673: PUSH
42674: LD_INT 24
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 2
42688: PPUSH
42689: CALL_OW 426
42693: ARRAY
42694: ST_TO_ADDR
// resourcesAmount := GetMultiplayerSetting ( 3 ) ;
42695: LD_ADDR_VAR 0 10
42699: PUSH
42700: LD_INT 3
42702: PPUSH
42703: CALL_OW 426
42707: ST_TO_ADDR
// ecoCratesDrop := GetMultiplayerSetting ( 4 ) ;
42708: LD_ADDR_EXP 25
42712: PUSH
42713: LD_INT 4
42715: PPUSH
42716: CALL_OW 426
42720: ST_TO_ADDR
// end ; ecoCratesDropAllow := true ;
42721: LD_ADDR_EXP 27
42725: PUSH
42726: LD_INT 1
42728: ST_TO_ADDR
// ecoEventsAllow := false ;
42729: LD_ADDR_EXP 29
42733: PUSH
42734: LD_INT 0
42736: ST_TO_ADDR
// ecoAttacksAllow := false ;
42737: LD_ADDR_EXP 28
42741: PUSH
42742: LD_INT 0
42744: ST_TO_ADDR
// ecoSide := side ;
42745: LD_ADDR_EXP 21
42749: PUSH
42750: LD_VAR 0 7
42754: ST_TO_ADDR
// your_side := side ;
42755: LD_ADDR_OWVAR 2
42759: PUSH
42760: LD_VAR 0 7
42764: ST_TO_ADDR
// ChangeSideFog ( 1 , side ) ;
42765: LD_INT 1
42767: PPUSH
42768: LD_VAR 0 7
42772: PPUSH
42773: CALL_OW 343
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
42777: LD_INT 1
42779: PPUSH
42780: LD_INT 1
42782: PPUSH
42783: LD_VAR 0 7
42787: PPUSH
42788: LD_INT 32793
42790: NEG
42791: PPUSH
42792: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
42796: LD_INT 1
42798: PPUSH
42799: LD_INT 1
42801: PPUSH
42802: LD_VAR 0 7
42806: PPUSH
42807: CALL_OW 331
// ecoNation := nation ;
42811: LD_ADDR_EXP 22
42815: PUSH
42816: LD_VAR 0 8
42820: ST_TO_ADDR
// ecoPeopleAmount := peopleAmount ;
42821: LD_ADDR_EXP 23
42825: PUSH
42826: LD_VAR 0 9
42830: ST_TO_ADDR
// for i = 1 to resourcesAmount * 5 do
42831: LD_ADDR_VAR 0 5
42835: PUSH
42836: DOUBLE
42837: LD_INT 1
42839: DEC
42840: ST_TO_ADDR
42841: LD_VAR 0 10
42845: PUSH
42846: LD_INT 5
42848: MUL
42849: PUSH
42850: FOR_TO
42851: IFFALSE 42889
// CreateResourcesXYR ( mat_cans , 5 , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 6 , false ) ;
42853: LD_INT 1
42855: PPUSH
42856: LD_INT 5
42858: PPUSH
42859: LD_EXP 24
42863: PUSH
42864: LD_INT 1
42866: ARRAY
42867: PPUSH
42868: LD_EXP 24
42872: PUSH
42873: LD_INT 2
42875: ARRAY
42876: PPUSH
42877: LD_INT 6
42879: PPUSH
42880: LD_INT 0
42882: PPUSH
42883: CALL_OW 60
42887: GO 42850
42889: POP
42890: POP
// uc_side := side ;
42891: LD_ADDR_OWVAR 20
42895: PUSH
42896: LD_VAR 0 7
42900: ST_TO_ADDR
// uc_nation := nation ;
42901: LD_ADDR_OWVAR 21
42905: PUSH
42906: LD_VAR 0 8
42910: ST_TO_ADDR
// hc_importance := 100 ;
42911: LD_ADDR_OWVAR 32
42915: PUSH
42916: LD_INT 100
42918: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
42919: LD_INT 0
42921: PPUSH
42922: LD_INT 1
42924: PPUSH
42925: LD_INT 4
42927: PPUSH
42928: CALL_OW 380
// if side = 1 and nation = 1 then
42932: LD_VAR 0 7
42936: PUSH
42937: LD_INT 1
42939: EQUAL
42940: PUSH
42941: LD_VAR 0 8
42945: PUSH
42946: LD_INT 1
42948: EQUAL
42949: AND
42950: IFFALSE 42984
// begin hc_name := John Macmilan ;
42952: LD_ADDR_OWVAR 26
42956: PUSH
42957: LD_STRING John Macmilan
42959: ST_TO_ADDR
// hc_gallery := us ;
42960: LD_ADDR_OWVAR 33
42964: PUSH
42965: LD_STRING us
42967: ST_TO_ADDR
// hc_face_number := 5 ;
42968: LD_ADDR_OWVAR 34
42972: PUSH
42973: LD_INT 5
42975: ST_TO_ADDR
// hc_sex := sex_male ;
42976: LD_ADDR_OWVAR 27
42980: PUSH
42981: LD_INT 1
42983: ST_TO_ADDR
// end ; if side = 2 and nation = 2 then
42984: LD_VAR 0 7
42988: PUSH
42989: LD_INT 2
42991: EQUAL
42992: PUSH
42993: LD_VAR 0 8
42997: PUSH
42998: LD_INT 2
43000: EQUAL
43001: AND
43002: IFFALSE 43036
// begin hc_name := Heike Steyer ;
43004: LD_ADDR_OWVAR 26
43008: PUSH
43009: LD_STRING Heike Steyer
43011: ST_TO_ADDR
// hc_gallery := sandar ;
43012: LD_ADDR_OWVAR 33
43016: PUSH
43017: LD_STRING sandar
43019: ST_TO_ADDR
// hc_face_number := 14 ;
43020: LD_ADDR_OWVAR 34
43024: PUSH
43025: LD_INT 14
43027: ST_TO_ADDR
// hc_sex := sex_female ;
43028: LD_ADDR_OWVAR 27
43032: PUSH
43033: LD_INT 2
43035: ST_TO_ADDR
// end ; if side = 6 and nation = 3 then
43036: LD_VAR 0 7
43040: PUSH
43041: LD_INT 6
43043: EQUAL
43044: PUSH
43045: LD_VAR 0 8
43049: PUSH
43050: LD_INT 3
43052: EQUAL
43053: AND
43054: IFFALSE 43101
// begin PrepareHuman ( false , 3 , 4 ) ;
43056: LD_INT 0
43058: PPUSH
43059: LD_INT 3
43061: PPUSH
43062: LD_INT 4
43064: PPUSH
43065: CALL_OW 380
// hc_name := Yuri I. Burlak ;
43069: LD_ADDR_OWVAR 26
43073: PUSH
43074: LD_STRING Yuri I. Burlak
43076: ST_TO_ADDR
// hc_gallery := ru ;
43077: LD_ADDR_OWVAR 33
43081: PUSH
43082: LD_STRING ru
43084: ST_TO_ADDR
// hc_face_number := 1 ;
43085: LD_ADDR_OWVAR 34
43089: PUSH
43090: LD_INT 1
43092: ST_TO_ADDR
// hc_sex := sex_male ;
43093: LD_ADDR_OWVAR 27
43097: PUSH
43098: LD_INT 1
43100: ST_TO_ADDR
// end ; if side = 4 and nation = 1 then
43101: LD_VAR 0 7
43105: PUSH
43106: LD_INT 4
43108: EQUAL
43109: PUSH
43110: LD_VAR 0 8
43114: PUSH
43115: LD_INT 1
43117: EQUAL
43118: AND
43119: IFFALSE 43153
// begin hc_name := Arthur Powell ;
43121: LD_ADDR_OWVAR 26
43125: PUSH
43126: LD_STRING Arthur Powell
43128: ST_TO_ADDR
// hc_gallery := us ;
43129: LD_ADDR_OWVAR 33
43133: PUSH
43134: LD_STRING us
43136: ST_TO_ADDR
// hc_face_number := 7 ;
43137: LD_ADDR_OWVAR 34
43141: PUSH
43142: LD_INT 7
43144: ST_TO_ADDR
// hc_sex := sex_male ;
43145: LD_ADDR_OWVAR 27
43149: PUSH
43150: LD_INT 1
43152: ST_TO_ADDR
// end ; if side = 3 and nation = 3 then
43153: LD_VAR 0 7
43157: PUSH
43158: LD_INT 3
43160: EQUAL
43161: PUSH
43162: LD_VAR 0 8
43166: PUSH
43167: LD_INT 3
43169: EQUAL
43170: AND
43171: IFFALSE 43205
// begin hc_name := Mjr. Platonov ;
43173: LD_ADDR_OWVAR 26
43177: PUSH
43178: LD_STRING Mjr. Platonov
43180: ST_TO_ADDR
// hc_gallery := ru ;
43181: LD_ADDR_OWVAR 33
43185: PUSH
43186: LD_STRING ru
43188: ST_TO_ADDR
// hc_face_number := 60 ;
43189: LD_ADDR_OWVAR 34
43193: PUSH
43194: LD_INT 60
43196: ST_TO_ADDR
// hc_sex := sex_male ;
43197: LD_ADDR_OWVAR 27
43201: PUSH
43202: LD_INT 1
43204: ST_TO_ADDR
// end ; if side = 7 and nation = 1 then
43205: LD_VAR 0 7
43209: PUSH
43210: LD_INT 7
43212: EQUAL
43213: PUSH
43214: LD_VAR 0 8
43218: PUSH
43219: LD_INT 1
43221: EQUAL
43222: AND
43223: IFFALSE 43270
// begin PrepareHuman ( false , 4 , 4 ) ;
43225: LD_INT 0
43227: PPUSH
43228: LD_INT 4
43230: PPUSH
43231: LD_INT 4
43233: PPUSH
43234: CALL_OW 380
// hc_name := Peter Roth ;
43238: LD_ADDR_OWVAR 26
43242: PUSH
43243: LD_STRING Peter Roth
43245: ST_TO_ADDR
// hc_gallery := us ;
43246: LD_ADDR_OWVAR 33
43250: PUSH
43251: LD_STRING us
43253: ST_TO_ADDR
// hc_face_number := 22 ;
43254: LD_ADDR_OWVAR 34
43258: PUSH
43259: LD_INT 22
43261: ST_TO_ADDR
// hc_sex := sex_male ;
43262: LD_ADDR_OWVAR 27
43266: PUSH
43267: LD_INT 1
43269: ST_TO_ADDR
// end ; if side = 7 and nation = 3 then
43270: LD_VAR 0 7
43274: PUSH
43275: LD_INT 7
43277: EQUAL
43278: PUSH
43279: LD_VAR 0 8
43283: PUSH
43284: LD_INT 3
43286: EQUAL
43287: AND
43288: IFFALSE 43335
// begin PrepareHuman ( false , 4 , 4 ) ;
43290: LD_INT 0
43292: PPUSH
43293: LD_INT 4
43295: PPUSH
43296: LD_INT 4
43298: PPUSH
43299: CALL_OW 380
// hc_name := Prof. Gossudarov ;
43303: LD_ADDR_OWVAR 26
43307: PUSH
43308: LD_STRING Prof. Gossudarov
43310: ST_TO_ADDR
// hc_gallery := ru ;
43311: LD_ADDR_OWVAR 33
43315: PUSH
43316: LD_STRING ru
43318: ST_TO_ADDR
// hc_face_number := 61 ;
43319: LD_ADDR_OWVAR 34
43323: PUSH
43324: LD_INT 61
43326: ST_TO_ADDR
// hc_sex := sex_male ;
43327: LD_ADDR_OWVAR 27
43331: PUSH
43332: LD_INT 1
43334: ST_TO_ADDR
// end ; if side = 8 and nation = 1 then
43335: LD_VAR 0 7
43339: PUSH
43340: LD_INT 8
43342: EQUAL
43343: PUSH
43344: LD_VAR 0 8
43348: PUSH
43349: LD_INT 1
43351: EQUAL
43352: AND
43353: IFFALSE 43387
// begin hc_name := Ron Harisson ;
43355: LD_ADDR_OWVAR 26
43359: PUSH
43360: LD_STRING Ron Harisson
43362: ST_TO_ADDR
// hc_gallery := us ;
43363: LD_ADDR_OWVAR 33
43367: PUSH
43368: LD_STRING us
43370: ST_TO_ADDR
// hc_face_number := 6 ;
43371: LD_ADDR_OWVAR 34
43375: PUSH
43376: LD_INT 6
43378: ST_TO_ADDR
// hc_sex := sex_male ;
43379: LD_ADDR_OWVAR 27
43383: PUSH
43384: LD_INT 1
43386: ST_TO_ADDR
// end ; if side = 8 and nation = 2 then
43387: LD_VAR 0 7
43391: PUSH
43392: LD_INT 8
43394: EQUAL
43395: PUSH
43396: LD_VAR 0 8
43400: PUSH
43401: LD_INT 2
43403: EQUAL
43404: AND
43405: IFFALSE 43439
// begin hc_name := Louis Schulz ;
43407: LD_ADDR_OWVAR 26
43411: PUSH
43412: LD_STRING Louis Schulz
43414: ST_TO_ADDR
// hc_gallery := sandar ;
43415: LD_ADDR_OWVAR 33
43419: PUSH
43420: LD_STRING sandar
43422: ST_TO_ADDR
// hc_face_number := 1 ;
43423: LD_ADDR_OWVAR 34
43427: PUSH
43428: LD_INT 1
43430: ST_TO_ADDR
// hc_sex := sex_male ;
43431: LD_ADDR_OWVAR 27
43435: PUSH
43436: LD_INT 1
43438: ST_TO_ADDR
// end ; PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
43439: CALL_OW 44
43443: PPUSH
43444: LD_EXP 24
43448: PUSH
43449: LD_INT 1
43451: ARRAY
43452: PPUSH
43453: LD_EXP 24
43457: PUSH
43458: LD_INT 2
43460: ARRAY
43461: PPUSH
43462: LD_INT 12
43464: PPUSH
43465: LD_INT 0
43467: PPUSH
43468: CALL_OW 50
// InitHc_All ( ) ;
43472: CALL_OW 584
// for i = 1 to peopleAmount - 1 do
43476: LD_ADDR_VAR 0 5
43480: PUSH
43481: DOUBLE
43482: LD_INT 1
43484: DEC
43485: ST_TO_ADDR
43486: LD_VAR 0 9
43490: PUSH
43491: LD_INT 1
43493: MINUS
43494: PUSH
43495: FOR_TO
43496: IFFALSE 43591
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
43498: LD_INT 0
43500: PPUSH
43501: LD_VAR 0 5
43505: PUSH
43506: LD_INT 4
43508: MOD
43509: PUSH
43510: LD_INT 1
43512: PLUS
43513: PPUSH
43514: LD_INT 3
43516: PPUSH
43517: CALL_OW 380
// tmp := Replace ( tmp , tmp + 1 , CreateHuman ) ;
43521: LD_ADDR_VAR 0 6
43525: PUSH
43526: LD_VAR 0 6
43530: PPUSH
43531: LD_VAR 0 6
43535: PUSH
43536: LD_INT 1
43538: PLUS
43539: PPUSH
43540: CALL_OW 44
43544: PPUSH
43545: CALL_OW 1
43549: ST_TO_ADDR
// PlaceUnitXYR ( tmp [ tmp ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
43550: LD_VAR 0 6
43554: PUSH
43555: LD_VAR 0 6
43559: ARRAY
43560: PPUSH
43561: LD_EXP 24
43565: PUSH
43566: LD_INT 1
43568: ARRAY
43569: PPUSH
43570: LD_EXP 24
43574: PUSH
43575: LD_INT 2
43577: ARRAY
43578: PPUSH
43579: LD_INT 12
43581: PPUSH
43582: LD_INT 0
43584: PPUSH
43585: CALL_OW 50
// end ;
43589: GO 43495
43591: POP
43592: POP
// end ;
43593: LD_VAR 0 4
43597: RET
// every 0 0$1 trigger ecoCratesDrop and ecoCratesDropXY do var time , xy ;
43598: LD_EXP 25
43602: PUSH
43603: LD_EXP 26
43607: AND
43608: IFFALSE 43778
43610: GO 43612
43612: DISABLE
43613: LD_INT 0
43615: PPUSH
43616: PPUSH
// begin time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
43617: LD_ADDR_VAR 0 1
43621: PUSH
43622: LD_INT 700
43624: PUSH
43625: LD_INT 350
43627: PUSH
43628: LD_INT 175
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: LIST
43635: PUSH
43636: LD_EXP 25
43640: ARRAY
43641: ST_TO_ADDR
// while true do
43642: LD_INT 1
43644: IFFALSE 43778
// begin wait ( time ) ;
43646: LD_VAR 0 1
43650: PPUSH
43651: CALL_OW 67
// if not ecoCratesDropAllow then
43655: LD_EXP 27
43659: NOT
43660: IFFALSE 43664
// continue ;
43662: GO 43642
// time := time + 0 0$2 ;
43664: LD_ADDR_VAR 0 1
43668: PUSH
43669: LD_VAR 0 1
43673: PUSH
43674: LD_INT 70
43676: PLUS
43677: ST_TO_ADDR
// if time > 0 0$40 then
43678: LD_VAR 0 1
43682: PUSH
43683: LD_INT 1400
43685: GREATER
43686: IFFALSE 43713
// time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
43688: LD_ADDR_VAR 0 1
43692: PUSH
43693: LD_INT 700
43695: PUSH
43696: LD_INT 350
43698: PUSH
43699: LD_INT 175
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: LIST
43706: PUSH
43707: LD_EXP 25
43711: ARRAY
43712: ST_TO_ADDR
// xy := ecoCratesDropXY [ rand ( 1 , ecoCratesDropXY ) ] ;
43713: LD_ADDR_VAR 0 2
43717: PUSH
43718: LD_EXP 26
43722: PUSH
43723: LD_INT 1
43725: PPUSH
43726: LD_EXP 26
43730: PPUSH
43731: CALL_OW 12
43735: ARRAY
43736: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , xy [ 1 ] , xy [ 2 ] , 14 , true ) ;
43737: LD_INT 1
43739: PPUSH
43740: LD_INT 5
43742: PPUSH
43743: CALL_OW 12
43747: PPUSH
43748: LD_VAR 0 2
43752: PUSH
43753: LD_INT 1
43755: ARRAY
43756: PPUSH
43757: LD_VAR 0 2
43761: PUSH
43762: LD_INT 2
43764: ARRAY
43765: PPUSH
43766: LD_INT 14
43768: PPUSH
43769: LD_INT 1
43771: PPUSH
43772: CALL_OW 56
// end ;
43776: GO 43642
// end ;
43778: PPOPN 2
43780: END
// every 0 0$1 trigger ecoAttacksArea and ecoAttacksAllow do var time , area , tmp , i , xy , veh , dir , enemySide , waveBonus ;
43781: LD_EXP 30
43785: PUSH
43786: LD_EXP 28
43790: AND
43791: IFFALSE 44555
43793: GO 43795
43795: DISABLE
43796: LD_INT 0
43798: PPUSH
43799: PPUSH
43800: PPUSH
43801: PPUSH
43802: PPUSH
43803: PPUSH
43804: PPUSH
43805: PPUSH
43806: PPUSH
// begin time := 3 3$00 ;
43807: LD_ADDR_VAR 0 1
43811: PUSH
43812: LD_INT 6300
43814: ST_TO_ADDR
// enemySide := [ 3 , 9 ] [ rand ( 1 , 2 ) ] ;
43815: LD_ADDR_VAR 0 8
43819: PUSH
43820: LD_INT 3
43822: PUSH
43823: LD_INT 9
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: PPUSH
43833: LD_INT 2
43835: PPUSH
43836: CALL_OW 12
43840: ARRAY
43841: ST_TO_ADDR
// waveBonus := 0 ;
43842: LD_ADDR_VAR 0 9
43846: PUSH
43847: LD_INT 0
43849: ST_TO_ADDR
// if ecoSide = enemySide then
43850: LD_EXP 21
43854: PUSH
43855: LD_VAR 0 8
43859: EQUAL
43860: IFFALSE 43870
// enemySide := 1 ;
43862: LD_ADDR_VAR 0 8
43866: PUSH
43867: LD_INT 1
43869: ST_TO_ADDR
// while true do
43870: LD_INT 1
43872: IFFALSE 44555
// begin wait ( time ) ;
43874: LD_VAR 0 1
43878: PPUSH
43879: CALL_OW 67
// if not ecoAttacksAllow then
43883: LD_EXP 28
43887: NOT
43888: IFFALSE 43892
// continue ;
43890: GO 43870
// waveBonus := waveBonus + 2 ;
43892: LD_ADDR_VAR 0 9
43896: PUSH
43897: LD_VAR 0 9
43901: PUSH
43902: LD_INT 2
43904: PLUS
43905: ST_TO_ADDR
// if waveBonus > 20 then
43906: LD_VAR 0 9
43910: PUSH
43911: LD_INT 20
43913: GREATER
43914: IFFALSE 43924
// waveBonus := 20 ;
43916: LD_ADDR_VAR 0 9
43920: PUSH
43921: LD_INT 20
43923: ST_TO_ADDR
// area := ecoAttacksArea [ rand ( 1 , ecoAttacksArea ) ] ;
43924: LD_ADDR_VAR 0 2
43928: PUSH
43929: LD_EXP 30
43933: PUSH
43934: LD_INT 1
43936: PPUSH
43937: LD_EXP 30
43941: PPUSH
43942: CALL_OW 12
43946: ARRAY
43947: ST_TO_ADDR
// tmp := AreaToList ( area , 0 ) ;
43948: LD_ADDR_VAR 0 3
43952: PUSH
43953: LD_VAR 0 2
43957: PPUSH
43958: LD_INT 0
43960: PPUSH
43961: CALL_OW 517
43965: ST_TO_ADDR
// dir := GetDirFromHex ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
43966: LD_ADDR_VAR 0 7
43970: PUSH
43971: LD_VAR 0 3
43975: PUSH
43976: LD_INT 1
43978: ARRAY
43979: PUSH
43980: LD_INT 1
43982: ARRAY
43983: PPUSH
43984: LD_VAR 0 3
43988: PUSH
43989: LD_INT 2
43991: ARRAY
43992: PUSH
43993: LD_INT 1
43995: ARRAY
43996: PPUSH
43997: LD_EXP 24
44001: PUSH
44002: LD_INT 1
44004: ARRAY
44005: PPUSH
44006: LD_EXP 24
44010: PUSH
44011: LD_INT 2
44013: ARRAY
44014: PPUSH
44015: CALL 40108 0 4
44019: ST_TO_ADDR
// xy := PointBetweenXY ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
44020: LD_ADDR_VAR 0 5
44024: PUSH
44025: LD_VAR 0 3
44029: PUSH
44030: LD_INT 1
44032: ARRAY
44033: PUSH
44034: LD_INT 1
44036: ARRAY
44037: PPUSH
44038: LD_VAR 0 3
44042: PUSH
44043: LD_INT 2
44045: ARRAY
44046: PUSH
44047: LD_INT 1
44049: ARRAY
44050: PPUSH
44051: LD_EXP 24
44055: PUSH
44056: LD_INT 1
44058: ARRAY
44059: PPUSH
44060: LD_EXP 24
44064: PUSH
44065: LD_INT 2
44067: ARRAY
44068: PPUSH
44069: CALL 39246 0 4
44073: ST_TO_ADDR
// tmp := [ ] ;
44074: LD_ADDR_VAR 0 3
44078: PUSH
44079: EMPTY
44080: ST_TO_ADDR
// for i := 1 to 6 + waveBonus do
44081: LD_ADDR_VAR 0 4
44085: PUSH
44086: DOUBLE
44087: LD_INT 1
44089: DEC
44090: ST_TO_ADDR
44091: LD_INT 6
44093: PUSH
44094: LD_VAR 0 9
44098: PLUS
44099: PUSH
44100: FOR_TO
44101: IFFALSE 44420
// begin uc_side := enemySide ;
44103: LD_ADDR_OWVAR 20
44107: PUSH
44108: LD_VAR 0 8
44112: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
44113: LD_ADDR_OWVAR 21
44117: PUSH
44118: LD_INT 1
44120: PPUSH
44121: LD_INT 3
44123: PPUSH
44124: CALL_OW 12
44128: ST_TO_ADDR
// case uc_nation of 1 :
44129: LD_OWVAR 21
44133: PUSH
44134: LD_INT 1
44136: DOUBLE
44137: EQUAL
44138: IFTRUE 44142
44140: GO 44183
44142: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ; 2 :
44143: LD_INT 5
44145: PPUSH
44146: LD_INT 3
44148: PPUSH
44149: LD_INT 3
44151: PPUSH
44152: LD_INT 6
44154: PUSH
44155: LD_INT 7
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: PPUSH
44165: LD_INT 2
44167: PPUSH
44168: CALL_OW 12
44172: ARRAY
44173: PPUSH
44174: LD_INT 100
44176: PPUSH
44177: CALL 6317 0 5
44181: GO 44286
44183: LD_INT 2
44185: DOUBLE
44186: EQUAL
44187: IFTRUE 44191
44189: GO 44236
44191: POP
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] , 100 ) ; 3 :
44192: LD_INT 14
44194: PPUSH
44195: LD_INT 3
44197: PPUSH
44198: LD_INT 5
44200: PPUSH
44201: LD_INT 27
44203: PUSH
44204: LD_INT 28
44206: PUSH
44207: LD_INT 29
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: PPUSH
44218: LD_INT 3
44220: PPUSH
44221: CALL_OW 12
44225: ARRAY
44226: PPUSH
44227: LD_INT 100
44229: PPUSH
44230: CALL 6317 0 5
44234: GO 44286
44236: LD_INT 3
44238: DOUBLE
44239: EQUAL
44240: IFTRUE 44244
44242: GO 44285
44244: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket ] [ rand ( 1 , 2 ) ] , 100 ) ; end ;
44245: LD_INT 24
44247: PPUSH
44248: LD_INT 3
44250: PPUSH
44251: LD_INT 3
44253: PPUSH
44254: LD_INT 46
44256: PUSH
44257: LD_INT 47
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: PPUSH
44267: LD_INT 2
44269: PPUSH
44270: CALL_OW 12
44274: ARRAY
44275: PPUSH
44276: LD_INT 100
44278: PPUSH
44279: CALL 6317 0 5
44283: GO 44286
44285: POP
// veh := CreateVehicle ;
44286: LD_ADDR_VAR 0 6
44290: PUSH
44291: CALL_OW 45
44295: ST_TO_ADDR
// SetDir ( veh , dir ) ;
44296: LD_VAR 0 6
44300: PPUSH
44301: LD_VAR 0 7
44305: PPUSH
44306: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
44310: LD_VAR 0 6
44314: PPUSH
44315: LD_VAR 0 2
44319: PPUSH
44320: LD_INT 0
44322: PPUSH
44323: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
44327: LD_ADDR_VAR 0 3
44331: PUSH
44332: LD_VAR 0 3
44336: PPUSH
44337: LD_VAR 0 3
44341: PUSH
44342: LD_INT 1
44344: PLUS
44345: PPUSH
44346: LD_VAR 0 6
44350: PPUSH
44351: CALL_OW 1
44355: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) = 0 then
44356: LD_VAR 0 5
44360: PUSH
44361: LD_INT 1
44363: ARRAY
44364: PPUSH
44365: LD_VAR 0 5
44369: PUSH
44370: LD_INT 2
44372: ARRAY
44373: PPUSH
44374: CALL_OW 428
44378: PUSH
44379: LD_INT 0
44381: EQUAL
44382: IFFALSE 44411
// ComMoveXY ( veh , xy [ 1 ] , xy [ 2 ] ) ;
44384: LD_VAR 0 6
44388: PPUSH
44389: LD_VAR 0 5
44393: PUSH
44394: LD_INT 1
44396: ARRAY
44397: PPUSH
44398: LD_VAR 0 5
44402: PUSH
44403: LD_INT 2
44405: ARRAY
44406: PPUSH
44407: CALL_OW 111
// wait ( 0 0$0.5 ) ;
44411: LD_INT 18
44413: PPUSH
44414: CALL_OW 67
// end ;
44418: GO 44100
44420: POP
44421: POP
// if tmp then
44422: LD_VAR 0 3
44426: IFFALSE 44553
// begin repeat wait ( 0 0$2 ) ;
44428: LD_INT 70
44430: PPUSH
44431: CALL_OW 67
// for i in tmp do
44435: LD_ADDR_VAR 0 4
44439: PUSH
44440: LD_VAR 0 3
44444: PUSH
44445: FOR_IN
44446: IFFALSE 44544
// begin if IsDead ( i ) or not IsPlaced ( i ) or GetSide ( i ) <> enemySide then
44448: LD_VAR 0 4
44452: PPUSH
44453: CALL_OW 301
44457: PUSH
44458: LD_VAR 0 4
44462: PPUSH
44463: CALL_OW 305
44467: NOT
44468: OR
44469: PUSH
44470: LD_VAR 0 4
44474: PPUSH
44475: CALL_OW 255
44479: PUSH
44480: LD_VAR 0 8
44484: NONEQUAL
44485: OR
44486: IFFALSE 44506
// tmp := tmp diff i else
44488: LD_ADDR_VAR 0 3
44492: PUSH
44493: LD_VAR 0 3
44497: PUSH
44498: LD_VAR 0 4
44502: DIFF
44503: ST_TO_ADDR
44504: GO 44542
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , ecoSide ] ) , i ) ) ;
44506: LD_VAR 0 4
44510: PPUSH
44511: LD_INT 22
44513: PUSH
44514: LD_EXP 21
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PPUSH
44523: CALL_OW 69
44527: PPUSH
44528: LD_VAR 0 4
44532: PPUSH
44533: CALL_OW 74
44537: PPUSH
44538: CALL_OW 115
// end ;
44542: GO 44445
44544: POP
44545: POP
// until not tmp ;
44546: LD_VAR 0 3
44550: NOT
44551: IFFALSE 44428
// end ; end ;
44553: GO 43870
// end ;
44555: PPOPN 9
44557: END
// every 0 0$1 trigger ecoEventsAllow do var time , xy ;
44558: LD_EXP 29
44562: IFFALSE 44615
44564: GO 44566
44566: DISABLE
44567: LD_INT 0
44569: PPUSH
44570: PPUSH
// begin time := rand ( 1 1$00 , 10 10$00 ) ;
44571: LD_ADDR_VAR 0 1
44575: PUSH
44576: LD_INT 2100
44578: PPUSH
44579: LD_INT 21000
44581: PPUSH
44582: CALL_OW 12
44586: ST_TO_ADDR
// while true do
44587: LD_INT 1
44589: IFFALSE 44615
// begin wait ( time ) ;
44591: LD_VAR 0 1
44595: PPUSH
44596: CALL_OW 67
// if not ecoEventsAllow then
44600: LD_EXP 29
44604: NOT
44605: IFFALSE 44609
// continue ;
44607: GO 44587
// EcoEvent ( ) ;
44609: CALL 44618 0 0
// end ;
44613: GO 44587
// end ;
44615: PPOPN 2
44617: END
// export function EcoEvent ( ) ; var event , tmp , i ; begin
44618: LD_INT 0
44620: PPUSH
44621: PPUSH
44622: PPUSH
44623: PPUSH
// event := rand ( 1 , 5 ) ;
44624: LD_ADDR_VAR 0 2
44628: PUSH
44629: LD_INT 1
44631: PPUSH
44632: LD_INT 5
44634: PPUSH
44635: CALL_OW 12
44639: ST_TO_ADDR
// case event of 1 :
44640: LD_VAR 0 2
44644: PUSH
44645: LD_INT 1
44647: DOUBLE
44648: EQUAL
44649: IFTRUE 44653
44651: GO 44739
44653: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_building ] ) diff FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
44654: LD_ADDR_VAR 0 3
44658: PUSH
44659: LD_INT 21
44661: PUSH
44662: LD_INT 3
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PPUSH
44669: CALL_OW 69
44673: PUSH
44674: LD_INT 2
44676: PUSH
44677: LD_INT 30
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 30
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: LIST
44701: PPUSH
44702: CALL_OW 69
44706: DIFF
44707: ST_TO_ADDR
// if tmp then
44708: LD_VAR 0 3
44712: IFFALSE 44737
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
44714: LD_VAR 0 3
44718: PUSH
44719: LD_INT 1
44721: PPUSH
44722: LD_VAR 0 3
44726: PPUSH
44727: CALL_OW 12
44731: ARRAY
44732: PPUSH
44733: CALL_OW 65
// end ; 2 :
44737: GO 44938
44739: LD_INT 2
44741: DOUBLE
44742: EQUAL
44743: IFTRUE 44747
44745: GO 44803
44747: POP
// begin uc_side := ecoSide ;
44748: LD_ADDR_OWVAR 20
44752: PUSH
44753: LD_EXP 21
44757: ST_TO_ADDR
// uc_nation := ecoNation ;
44758: LD_ADDR_OWVAR 21
44762: PUSH
44763: LD_EXP 22
44767: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 8 ) ;
44768: LD_INT 0
44770: PPUSH
44771: LD_INT 1
44773: PPUSH
44774: LD_INT 4
44776: PPUSH
44777: CALL_OW 12
44781: PPUSH
44782: LD_INT 8
44784: PPUSH
44785: CALL_OW 380
// PlaceUnitAnyWhere ( CreateHuman , true ) ;
44789: CALL_OW 44
44793: PPUSH
44794: LD_INT 1
44796: PPUSH
44797: CALL_OW 51
// end ; 3 :
44801: GO 44938
44803: LD_INT 3
44805: DOUBLE
44806: EQUAL
44807: IFTRUE 44811
44809: GO 44863
44811: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_vehicle ] ) ;
44812: LD_ADDR_VAR 0 3
44816: PUSH
44817: LD_INT 21
44819: PUSH
44820: LD_INT 2
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PPUSH
44827: CALL_OW 69
44831: ST_TO_ADDR
// if tmp then
44832: LD_VAR 0 3
44836: IFFALSE 44861
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
44838: LD_VAR 0 3
44842: PUSH
44843: LD_INT 1
44845: PPUSH
44846: LD_VAR 0 3
44850: PPUSH
44851: CALL_OW 12
44855: ARRAY
44856: PPUSH
44857: CALL_OW 65
// end ; 4 :
44861: GO 44938
44863: LD_INT 4
44865: DOUBLE
44866: EQUAL
44867: IFTRUE 44871
44869: GO 44926
44871: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_human ] ) ;
44872: LD_ADDR_VAR 0 3
44876: PUSH
44877: LD_INT 21
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PPUSH
44887: CALL_OW 69
44891: ST_TO_ADDR
// if tmp then
44892: LD_VAR 0 3
44896: IFFALSE 44924
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 190 ) ;
44898: LD_VAR 0 3
44902: PUSH
44903: LD_INT 1
44905: PPUSH
44906: LD_VAR 0 3
44910: PPUSH
44911: CALL_OW 12
44915: ARRAY
44916: PPUSH
44917: LD_INT 190
44919: PPUSH
44920: CALL_OW 234
// end ; 5 :
44924: GO 44938
44926: LD_INT 5
44928: DOUBLE
44929: EQUAL
44930: IFTRUE 44934
44932: GO 44937
44934: POP
// begin end ; end ;
44935: GO 44938
44937: POP
// end ;
44938: LD_VAR 0 1
44942: RET
// export function EcoEnableAllTechs ( ) ; var i ; begin
44943: LD_INT 0
44945: PPUSH
44946: PPUSH
// for i := 1 to 100 do
44947: LD_ADDR_VAR 0 2
44951: PUSH
44952: DOUBLE
44953: LD_INT 1
44955: DEC
44956: ST_TO_ADDR
44957: LD_INT 100
44959: PUSH
44960: FOR_TO
44961: IFFALSE 44982
// SetTech ( i , ecoSide , state_researched ) ;
44963: LD_VAR 0 2
44967: PPUSH
44968: LD_EXP 21
44972: PPUSH
44973: LD_INT 2
44975: PPUSH
44976: CALL_OW 322
44980: GO 44960
44982: POP
44983: POP
// end ;
44984: LD_VAR 0 1
44988: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
44989: LD_VAR 0 2
44993: PUSH
44994: LD_INT 102
44996: EQUAL
44997: IFFALSE 45189
// begin case p3 of 1 :
44999: LD_VAR 0 3
45003: PUSH
45004: LD_INT 1
45006: DOUBLE
45007: EQUAL
45008: IFTRUE 45012
45010: GO 45030
45012: POP
// ecoEventsAllow := Negate ( ecoEventsAllow ) ; 2 :
45013: LD_ADDR_EXP 29
45017: PUSH
45018: LD_EXP 29
45022: PPUSH
45023: CALL 40045 0 1
45027: ST_TO_ADDR
45028: GO 45187
45030: LD_INT 2
45032: DOUBLE
45033: EQUAL
45034: IFTRUE 45038
45036: GO 45056
45038: POP
// ecoAttacksAllow := Negate ( ecoAttacksAllow ) ; 3 :
45039: LD_ADDR_EXP 28
45043: PUSH
45044: LD_EXP 28
45048: PPUSH
45049: CALL 40045 0 1
45053: ST_TO_ADDR
45054: GO 45187
45056: LD_INT 3
45058: DOUBLE
45059: EQUAL
45060: IFTRUE 45064
45062: GO 45082
45064: POP
// ecoCratesDropAllow := Negate ( ecoCratesDropAllow ) ; 4 :
45065: LD_ADDR_EXP 27
45069: PUSH
45070: LD_EXP 27
45074: PPUSH
45075: CALL 40045 0 1
45079: ST_TO_ADDR
45080: GO 45187
45082: LD_INT 4
45084: DOUBLE
45085: EQUAL
45086: IFTRUE 45090
45088: GO 45097
45090: POP
// EcoEnableAllTechs ( ) ; 5 .. 8 :
45091: CALL 44943 0 0
45095: GO 45187
45097: LD_INT 5
45099: DOUBLE
45100: GREATEREQUAL
45101: IFFALSE 45109
45103: LD_INT 8
45105: DOUBLE
45106: LESSEQUAL
45107: IFTRUE 45111
45109: GO 45186
45111: POP
// begin uc_side := ecoSide ;
45112: LD_ADDR_OWVAR 20
45116: PUSH
45117: LD_EXP 21
45121: ST_TO_ADDR
// uc_nation := ecoNation ;
45122: LD_ADDR_OWVAR 21
45126: PUSH
45127: LD_EXP 22
45131: ST_TO_ADDR
// PrepareHuman ( false , p3 - 4 , 4 ) ;
45132: LD_INT 0
45134: PPUSH
45135: LD_VAR 0 3
45139: PUSH
45140: LD_INT 4
45142: MINUS
45143: PPUSH
45144: LD_INT 4
45146: PPUSH
45147: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , true ) ;
45151: CALL_OW 44
45155: PPUSH
45156: LD_EXP 24
45160: PUSH
45161: LD_INT 1
45163: ARRAY
45164: PPUSH
45165: LD_EXP 24
45169: PUSH
45170: LD_INT 2
45172: ARRAY
45173: PPUSH
45174: LD_INT 12
45176: PPUSH
45177: LD_INT 1
45179: PPUSH
45180: CALL_OW 50
// end ; end ;
45184: GO 45187
45186: POP
// end else
45187: GO 45223
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
45189: LD_VAR 0 1
45193: PPUSH
45194: LD_VAR 0 2
45198: PPUSH
45199: LD_VAR 0 3
45203: PPUSH
45204: LD_VAR 0 4
45208: PPUSH
45209: LD_VAR 0 5
45213: PPUSH
45214: LD_VAR 0 6
45218: PPUSH
45219: CALL 45310 0 6
// end ;
45223: PPOPN 6
45225: END
// on MapStart ( p ) do begin if gameType = 1 then
45226: LD_EXP 2
45230: PUSH
45231: LD_INT 1
45233: EQUAL
45234: IFFALSE 45245
// ToLua ( SKIRMISH_GAME_TYPE = 1 ) else
45236: LD_STRING SKIRMISH_GAME_TYPE = 1
45238: PPUSH
45239: CALL_OW 559
45243: GO 45252
// ToLua ( SKIRMISH_GAME_TYPE = 0 ) ;
45245: LD_STRING SKIRMISH_GAME_TYPE = 0
45247: PPUSH
45248: CALL_OW 559
// SOS_MapStart ( ) ;
45252: CALL 45281 0 0
// end ; end_of_file
45256: PPOPN 1
45258: END
// every 0 0$1 do
45259: GO 45261
45261: DISABLE
// begin enable ;
45262: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
45263: LD_STRING updateTimer(
45265: PUSH
45266: LD_OWVAR 1
45270: STR
45271: PUSH
45272: LD_STRING );
45274: STR
45275: PPUSH
45276: CALL_OW 559
// end ;
45280: END
// export function SOS_MapStart ( ) ; begin
45281: LD_INT 0
45283: PPUSH
// if streamModeActive then
45284: LD_EXP 32
45288: IFFALSE 45297
// DefineStreamItems ( true ) ;
45290: LD_INT 1
45292: PPUSH
45293: CALL 46951 0 1
// UpdateFactoryWaypoints ( ) ;
45297: CALL 59812 0 0
// UpdateWarehouseGatheringPoints ( ) ;
45301: CALL 60069 0 0
// end ;
45305: LD_VAR 0 1
45309: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
45310: LD_INT 0
45312: PPUSH
// if p2 = 100 then
45313: LD_VAR 0 2
45317: PUSH
45318: LD_INT 100
45320: EQUAL
45321: IFFALSE 46324
// begin if not StreamModeActive then
45323: LD_EXP 32
45327: NOT
45328: IFFALSE 45338
// StreamModeActive := true ;
45330: LD_ADDR_EXP 32
45334: PUSH
45335: LD_INT 1
45337: ST_TO_ADDR
// if p3 = 0 then
45338: LD_VAR 0 3
45342: PUSH
45343: LD_INT 0
45345: EQUAL
45346: IFFALSE 45352
// InitStreamMode ;
45348: CALL 46487 0 0
// if p3 = 1 then
45352: LD_VAR 0 3
45356: PUSH
45357: LD_INT 1
45359: EQUAL
45360: IFFALSE 45370
// sRocket := true ;
45362: LD_ADDR_EXP 37
45366: PUSH
45367: LD_INT 1
45369: ST_TO_ADDR
// if p3 = 2 then
45370: LD_VAR 0 3
45374: PUSH
45375: LD_INT 2
45377: EQUAL
45378: IFFALSE 45388
// sSpeed := true ;
45380: LD_ADDR_EXP 36
45384: PUSH
45385: LD_INT 1
45387: ST_TO_ADDR
// if p3 = 3 then
45388: LD_VAR 0 3
45392: PUSH
45393: LD_INT 3
45395: EQUAL
45396: IFFALSE 45406
// sEngine := true ;
45398: LD_ADDR_EXP 38
45402: PUSH
45403: LD_INT 1
45405: ST_TO_ADDR
// if p3 = 4 then
45406: LD_VAR 0 3
45410: PUSH
45411: LD_INT 4
45413: EQUAL
45414: IFFALSE 45424
// sSpec := true ;
45416: LD_ADDR_EXP 35
45420: PUSH
45421: LD_INT 1
45423: ST_TO_ADDR
// if p3 = 5 then
45424: LD_VAR 0 3
45428: PUSH
45429: LD_INT 5
45431: EQUAL
45432: IFFALSE 45442
// sLevel := true ;
45434: LD_ADDR_EXP 39
45438: PUSH
45439: LD_INT 1
45441: ST_TO_ADDR
// if p3 = 6 then
45442: LD_VAR 0 3
45446: PUSH
45447: LD_INT 6
45449: EQUAL
45450: IFFALSE 45460
// sArmoury := true ;
45452: LD_ADDR_EXP 40
45456: PUSH
45457: LD_INT 1
45459: ST_TO_ADDR
// if p3 = 7 then
45460: LD_VAR 0 3
45464: PUSH
45465: LD_INT 7
45467: EQUAL
45468: IFFALSE 45478
// sRadar := true ;
45470: LD_ADDR_EXP 41
45474: PUSH
45475: LD_INT 1
45477: ST_TO_ADDR
// if p3 = 8 then
45478: LD_VAR 0 3
45482: PUSH
45483: LD_INT 8
45485: EQUAL
45486: IFFALSE 45496
// sBunker := true ;
45488: LD_ADDR_EXP 42
45492: PUSH
45493: LD_INT 1
45495: ST_TO_ADDR
// if p3 = 9 then
45496: LD_VAR 0 3
45500: PUSH
45501: LD_INT 9
45503: EQUAL
45504: IFFALSE 45514
// sHack := true ;
45506: LD_ADDR_EXP 43
45510: PUSH
45511: LD_INT 1
45513: ST_TO_ADDR
// if p3 = 10 then
45514: LD_VAR 0 3
45518: PUSH
45519: LD_INT 10
45521: EQUAL
45522: IFFALSE 45532
// sFire := true ;
45524: LD_ADDR_EXP 44
45528: PUSH
45529: LD_INT 1
45531: ST_TO_ADDR
// if p3 = 11 then
45532: LD_VAR 0 3
45536: PUSH
45537: LD_INT 11
45539: EQUAL
45540: IFFALSE 45550
// sRefresh := true ;
45542: LD_ADDR_EXP 45
45546: PUSH
45547: LD_INT 1
45549: ST_TO_ADDR
// if p3 = 12 then
45550: LD_VAR 0 3
45554: PUSH
45555: LD_INT 12
45557: EQUAL
45558: IFFALSE 45568
// sExp := true ;
45560: LD_ADDR_EXP 46
45564: PUSH
45565: LD_INT 1
45567: ST_TO_ADDR
// if p3 = 13 then
45568: LD_VAR 0 3
45572: PUSH
45573: LD_INT 13
45575: EQUAL
45576: IFFALSE 45586
// sDepot := true ;
45578: LD_ADDR_EXP 47
45582: PUSH
45583: LD_INT 1
45585: ST_TO_ADDR
// if p3 = 14 then
45586: LD_VAR 0 3
45590: PUSH
45591: LD_INT 14
45593: EQUAL
45594: IFFALSE 45604
// sFlag := true ;
45596: LD_ADDR_EXP 48
45600: PUSH
45601: LD_INT 1
45603: ST_TO_ADDR
// if p3 = 15 then
45604: LD_VAR 0 3
45608: PUSH
45609: LD_INT 15
45611: EQUAL
45612: IFFALSE 45622
// sKamikadze := true ;
45614: LD_ADDR_EXP 56
45618: PUSH
45619: LD_INT 1
45621: ST_TO_ADDR
// if p3 = 16 then
45622: LD_VAR 0 3
45626: PUSH
45627: LD_INT 16
45629: EQUAL
45630: IFFALSE 45640
// sTroll := true ;
45632: LD_ADDR_EXP 57
45636: PUSH
45637: LD_INT 1
45639: ST_TO_ADDR
// if p3 = 17 then
45640: LD_VAR 0 3
45644: PUSH
45645: LD_INT 17
45647: EQUAL
45648: IFFALSE 45658
// sSlow := true ;
45650: LD_ADDR_EXP 58
45654: PUSH
45655: LD_INT 1
45657: ST_TO_ADDR
// if p3 = 18 then
45658: LD_VAR 0 3
45662: PUSH
45663: LD_INT 18
45665: EQUAL
45666: IFFALSE 45676
// sLack := true ;
45668: LD_ADDR_EXP 59
45672: PUSH
45673: LD_INT 1
45675: ST_TO_ADDR
// if p3 = 19 then
45676: LD_VAR 0 3
45680: PUSH
45681: LD_INT 19
45683: EQUAL
45684: IFFALSE 45694
// sTank := true ;
45686: LD_ADDR_EXP 61
45690: PUSH
45691: LD_INT 1
45693: ST_TO_ADDR
// if p3 = 20 then
45694: LD_VAR 0 3
45698: PUSH
45699: LD_INT 20
45701: EQUAL
45702: IFFALSE 45712
// sRemote := true ;
45704: LD_ADDR_EXP 62
45708: PUSH
45709: LD_INT 1
45711: ST_TO_ADDR
// if p3 = 21 then
45712: LD_VAR 0 3
45716: PUSH
45717: LD_INT 21
45719: EQUAL
45720: IFFALSE 45730
// sPowell := true ;
45722: LD_ADDR_EXP 63
45726: PUSH
45727: LD_INT 1
45729: ST_TO_ADDR
// if p3 = 22 then
45730: LD_VAR 0 3
45734: PUSH
45735: LD_INT 22
45737: EQUAL
45738: IFFALSE 45748
// sTeleport := true ;
45740: LD_ADDR_EXP 66
45744: PUSH
45745: LD_INT 1
45747: ST_TO_ADDR
// if p3 = 23 then
45748: LD_VAR 0 3
45752: PUSH
45753: LD_INT 23
45755: EQUAL
45756: IFFALSE 45766
// sOilTower := true ;
45758: LD_ADDR_EXP 68
45762: PUSH
45763: LD_INT 1
45765: ST_TO_ADDR
// if p3 = 24 then
45766: LD_VAR 0 3
45770: PUSH
45771: LD_INT 24
45773: EQUAL
45774: IFFALSE 45784
// sShovel := true ;
45776: LD_ADDR_EXP 69
45780: PUSH
45781: LD_INT 1
45783: ST_TO_ADDR
// if p3 = 25 then
45784: LD_VAR 0 3
45788: PUSH
45789: LD_INT 25
45791: EQUAL
45792: IFFALSE 45802
// sSheik := true ;
45794: LD_ADDR_EXP 70
45798: PUSH
45799: LD_INT 1
45801: ST_TO_ADDR
// if p3 = 26 then
45802: LD_VAR 0 3
45806: PUSH
45807: LD_INT 26
45809: EQUAL
45810: IFFALSE 45820
// sEarthquake := true ;
45812: LD_ADDR_EXP 72
45816: PUSH
45817: LD_INT 1
45819: ST_TO_ADDR
// if p3 = 27 then
45820: LD_VAR 0 3
45824: PUSH
45825: LD_INT 27
45827: EQUAL
45828: IFFALSE 45838
// sAI := true ;
45830: LD_ADDR_EXP 73
45834: PUSH
45835: LD_INT 1
45837: ST_TO_ADDR
// if p3 = 28 then
45838: LD_VAR 0 3
45842: PUSH
45843: LD_INT 28
45845: EQUAL
45846: IFFALSE 45856
// sCargo := true ;
45848: LD_ADDR_EXP 76
45852: PUSH
45853: LD_INT 1
45855: ST_TO_ADDR
// if p3 = 29 then
45856: LD_VAR 0 3
45860: PUSH
45861: LD_INT 29
45863: EQUAL
45864: IFFALSE 45874
// sDLaser := true ;
45866: LD_ADDR_EXP 77
45870: PUSH
45871: LD_INT 1
45873: ST_TO_ADDR
// if p3 = 30 then
45874: LD_VAR 0 3
45878: PUSH
45879: LD_INT 30
45881: EQUAL
45882: IFFALSE 45892
// sExchange := true ;
45884: LD_ADDR_EXP 78
45888: PUSH
45889: LD_INT 1
45891: ST_TO_ADDR
// if p3 = 31 then
45892: LD_VAR 0 3
45896: PUSH
45897: LD_INT 31
45899: EQUAL
45900: IFFALSE 45910
// sFac := true ;
45902: LD_ADDR_EXP 79
45906: PUSH
45907: LD_INT 1
45909: ST_TO_ADDR
// if p3 = 32 then
45910: LD_VAR 0 3
45914: PUSH
45915: LD_INT 32
45917: EQUAL
45918: IFFALSE 45928
// sPower := true ;
45920: LD_ADDR_EXP 80
45924: PUSH
45925: LD_INT 1
45927: ST_TO_ADDR
// if p3 = 33 then
45928: LD_VAR 0 3
45932: PUSH
45933: LD_INT 33
45935: EQUAL
45936: IFFALSE 45946
// sRandom := true ;
45938: LD_ADDR_EXP 81
45942: PUSH
45943: LD_INT 1
45945: ST_TO_ADDR
// if p3 = 34 then
45946: LD_VAR 0 3
45950: PUSH
45951: LD_INT 34
45953: EQUAL
45954: IFFALSE 45964
// sShield := true ;
45956: LD_ADDR_EXP 82
45960: PUSH
45961: LD_INT 1
45963: ST_TO_ADDR
// if p3 = 35 then
45964: LD_VAR 0 3
45968: PUSH
45969: LD_INT 35
45971: EQUAL
45972: IFFALSE 45982
// sTime := true ;
45974: LD_ADDR_EXP 83
45978: PUSH
45979: LD_INT 1
45981: ST_TO_ADDR
// if p3 = 36 then
45982: LD_VAR 0 3
45986: PUSH
45987: LD_INT 36
45989: EQUAL
45990: IFFALSE 46000
// sTools := true ;
45992: LD_ADDR_EXP 84
45996: PUSH
45997: LD_INT 1
45999: ST_TO_ADDR
// if p3 = 101 then
46000: LD_VAR 0 3
46004: PUSH
46005: LD_INT 101
46007: EQUAL
46008: IFFALSE 46018
// sSold := true ;
46010: LD_ADDR_EXP 49
46014: PUSH
46015: LD_INT 1
46017: ST_TO_ADDR
// if p3 = 102 then
46018: LD_VAR 0 3
46022: PUSH
46023: LD_INT 102
46025: EQUAL
46026: IFFALSE 46036
// sDiff := true ;
46028: LD_ADDR_EXP 50
46032: PUSH
46033: LD_INT 1
46035: ST_TO_ADDR
// if p3 = 103 then
46036: LD_VAR 0 3
46040: PUSH
46041: LD_INT 103
46043: EQUAL
46044: IFFALSE 46054
// sFog := true ;
46046: LD_ADDR_EXP 53
46050: PUSH
46051: LD_INT 1
46053: ST_TO_ADDR
// if p3 = 104 then
46054: LD_VAR 0 3
46058: PUSH
46059: LD_INT 104
46061: EQUAL
46062: IFFALSE 46072
// sReset := true ;
46064: LD_ADDR_EXP 54
46068: PUSH
46069: LD_INT 1
46071: ST_TO_ADDR
// if p3 = 105 then
46072: LD_VAR 0 3
46076: PUSH
46077: LD_INT 105
46079: EQUAL
46080: IFFALSE 46090
// sSun := true ;
46082: LD_ADDR_EXP 55
46086: PUSH
46087: LD_INT 1
46089: ST_TO_ADDR
// if p3 = 106 then
46090: LD_VAR 0 3
46094: PUSH
46095: LD_INT 106
46097: EQUAL
46098: IFFALSE 46108
// sTiger := true ;
46100: LD_ADDR_EXP 51
46104: PUSH
46105: LD_INT 1
46107: ST_TO_ADDR
// if p3 = 107 then
46108: LD_VAR 0 3
46112: PUSH
46113: LD_INT 107
46115: EQUAL
46116: IFFALSE 46126
// sBomb := true ;
46118: LD_ADDR_EXP 52
46122: PUSH
46123: LD_INT 1
46125: ST_TO_ADDR
// if p3 = 108 then
46126: LD_VAR 0 3
46130: PUSH
46131: LD_INT 108
46133: EQUAL
46134: IFFALSE 46144
// sWound := true ;
46136: LD_ADDR_EXP 60
46140: PUSH
46141: LD_INT 1
46143: ST_TO_ADDR
// if p3 = 109 then
46144: LD_VAR 0 3
46148: PUSH
46149: LD_INT 109
46151: EQUAL
46152: IFFALSE 46162
// sBetray := true ;
46154: LD_ADDR_EXP 64
46158: PUSH
46159: LD_INT 1
46161: ST_TO_ADDR
// if p3 = 110 then
46162: LD_VAR 0 3
46166: PUSH
46167: LD_INT 110
46169: EQUAL
46170: IFFALSE 46180
// sContamin := true ;
46172: LD_ADDR_EXP 65
46176: PUSH
46177: LD_INT 1
46179: ST_TO_ADDR
// if p3 = 111 then
46180: LD_VAR 0 3
46184: PUSH
46185: LD_INT 111
46187: EQUAL
46188: IFFALSE 46198
// sOil := true ;
46190: LD_ADDR_EXP 67
46194: PUSH
46195: LD_INT 1
46197: ST_TO_ADDR
// if p3 = 112 then
46198: LD_VAR 0 3
46202: PUSH
46203: LD_INT 112
46205: EQUAL
46206: IFFALSE 46216
// sStu := true ;
46208: LD_ADDR_EXP 71
46212: PUSH
46213: LD_INT 1
46215: ST_TO_ADDR
// if p3 = 113 then
46216: LD_VAR 0 3
46220: PUSH
46221: LD_INT 113
46223: EQUAL
46224: IFFALSE 46234
// sBazooka := true ;
46226: LD_ADDR_EXP 74
46230: PUSH
46231: LD_INT 1
46233: ST_TO_ADDR
// if p3 = 114 then
46234: LD_VAR 0 3
46238: PUSH
46239: LD_INT 114
46241: EQUAL
46242: IFFALSE 46252
// sMortar := true ;
46244: LD_ADDR_EXP 75
46248: PUSH
46249: LD_INT 1
46251: ST_TO_ADDR
// if p3 = 115 then
46252: LD_VAR 0 3
46256: PUSH
46257: LD_INT 115
46259: EQUAL
46260: IFFALSE 46270
// sRanger := true ;
46262: LD_ADDR_EXP 85
46266: PUSH
46267: LD_INT 1
46269: ST_TO_ADDR
// if p3 = 116 then
46270: LD_VAR 0 3
46274: PUSH
46275: LD_INT 116
46277: EQUAL
46278: IFFALSE 46288
// sComputer := true ;
46280: LD_ADDR_EXP 86
46284: PUSH
46285: LD_INT 1
46287: ST_TO_ADDR
// if p3 = 117 then
46288: LD_VAR 0 3
46292: PUSH
46293: LD_INT 117
46295: EQUAL
46296: IFFALSE 46306
// s30 := true ;
46298: LD_ADDR_EXP 87
46302: PUSH
46303: LD_INT 1
46305: ST_TO_ADDR
// if p3 = 118 then
46306: LD_VAR 0 3
46310: PUSH
46311: LD_INT 118
46313: EQUAL
46314: IFFALSE 46324
// s60 := true ;
46316: LD_ADDR_EXP 88
46320: PUSH
46321: LD_INT 1
46323: ST_TO_ADDR
// end ; if p2 = 101 then
46324: LD_VAR 0 2
46328: PUSH
46329: LD_INT 101
46331: EQUAL
46332: IFFALSE 46460
// begin case p3 of 1 :
46334: LD_VAR 0 3
46338: PUSH
46339: LD_INT 1
46341: DOUBLE
46342: EQUAL
46343: IFTRUE 46347
46345: GO 46354
46347: POP
// hHackUnlimitedResources ; 2 :
46348: CALL 58558 0 0
46352: GO 46460
46354: LD_INT 2
46356: DOUBLE
46357: EQUAL
46358: IFTRUE 46362
46360: GO 46369
46362: POP
// hHackSetLevel10 ; 3 :
46363: CALL 58691 0 0
46367: GO 46460
46369: LD_INT 3
46371: DOUBLE
46372: EQUAL
46373: IFTRUE 46377
46375: GO 46384
46377: POP
// hHackSetLevel10YourUnits ; 4 :
46378: CALL 58776 0 0
46382: GO 46460
46384: LD_INT 4
46386: DOUBLE
46387: EQUAL
46388: IFTRUE 46392
46390: GO 46399
46392: POP
// hHackInvincible ; 5 :
46393: CALL 59224 0 0
46397: GO 46460
46399: LD_INT 5
46401: DOUBLE
46402: EQUAL
46403: IFTRUE 46407
46405: GO 46414
46407: POP
// hHackInvisible ; 6 :
46408: CALL 59335 0 0
46412: GO 46460
46414: LD_INT 6
46416: DOUBLE
46417: EQUAL
46418: IFTRUE 46422
46420: GO 46429
46422: POP
// hHackChangeYourSide ; 7 :
46423: CALL 59392 0 0
46427: GO 46460
46429: LD_INT 7
46431: DOUBLE
46432: EQUAL
46433: IFTRUE 46437
46435: GO 46444
46437: POP
// hHackChangeUnitSide ; 8 :
46438: CALL 59434 0 0
46442: GO 46460
46444: LD_INT 8
46446: DOUBLE
46447: EQUAL
46448: IFTRUE 46452
46450: GO 46459
46452: POP
// hHackFog ; end ;
46453: CALL 59535 0 0
46457: GO 46460
46459: POP
// end ; end ;
46460: LD_VAR 0 7
46464: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
46465: GO 46467
46467: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
46468: LD_STRING initStreamRollete();
46470: PPUSH
46471: CALL_OW 559
// InitStreamMode ;
46475: CALL 46487 0 0
// DefineStreamItems ( false ) ;
46479: LD_INT 0
46481: PPUSH
46482: CALL 46951 0 1
// end ;
46486: END
// function InitStreamMode ; begin
46487: LD_INT 0
46489: PPUSH
// streamModeActive := false ;
46490: LD_ADDR_EXP 32
46494: PUSH
46495: LD_INT 0
46497: ST_TO_ADDR
// normalCounter := 36 ;
46498: LD_ADDR_EXP 33
46502: PUSH
46503: LD_INT 36
46505: ST_TO_ADDR
// hardcoreCounter := 18 ;
46506: LD_ADDR_EXP 34
46510: PUSH
46511: LD_INT 18
46513: ST_TO_ADDR
// sRocket := false ;
46514: LD_ADDR_EXP 37
46518: PUSH
46519: LD_INT 0
46521: ST_TO_ADDR
// sSpeed := false ;
46522: LD_ADDR_EXP 36
46526: PUSH
46527: LD_INT 0
46529: ST_TO_ADDR
// sEngine := false ;
46530: LD_ADDR_EXP 38
46534: PUSH
46535: LD_INT 0
46537: ST_TO_ADDR
// sSpec := false ;
46538: LD_ADDR_EXP 35
46542: PUSH
46543: LD_INT 0
46545: ST_TO_ADDR
// sLevel := false ;
46546: LD_ADDR_EXP 39
46550: PUSH
46551: LD_INT 0
46553: ST_TO_ADDR
// sArmoury := false ;
46554: LD_ADDR_EXP 40
46558: PUSH
46559: LD_INT 0
46561: ST_TO_ADDR
// sRadar := false ;
46562: LD_ADDR_EXP 41
46566: PUSH
46567: LD_INT 0
46569: ST_TO_ADDR
// sBunker := false ;
46570: LD_ADDR_EXP 42
46574: PUSH
46575: LD_INT 0
46577: ST_TO_ADDR
// sHack := false ;
46578: LD_ADDR_EXP 43
46582: PUSH
46583: LD_INT 0
46585: ST_TO_ADDR
// sFire := false ;
46586: LD_ADDR_EXP 44
46590: PUSH
46591: LD_INT 0
46593: ST_TO_ADDR
// sRefresh := false ;
46594: LD_ADDR_EXP 45
46598: PUSH
46599: LD_INT 0
46601: ST_TO_ADDR
// sExp := false ;
46602: LD_ADDR_EXP 46
46606: PUSH
46607: LD_INT 0
46609: ST_TO_ADDR
// sDepot := false ;
46610: LD_ADDR_EXP 47
46614: PUSH
46615: LD_INT 0
46617: ST_TO_ADDR
// sFlag := false ;
46618: LD_ADDR_EXP 48
46622: PUSH
46623: LD_INT 0
46625: ST_TO_ADDR
// sKamikadze := false ;
46626: LD_ADDR_EXP 56
46630: PUSH
46631: LD_INT 0
46633: ST_TO_ADDR
// sTroll := false ;
46634: LD_ADDR_EXP 57
46638: PUSH
46639: LD_INT 0
46641: ST_TO_ADDR
// sSlow := false ;
46642: LD_ADDR_EXP 58
46646: PUSH
46647: LD_INT 0
46649: ST_TO_ADDR
// sLack := false ;
46650: LD_ADDR_EXP 59
46654: PUSH
46655: LD_INT 0
46657: ST_TO_ADDR
// sTank := false ;
46658: LD_ADDR_EXP 61
46662: PUSH
46663: LD_INT 0
46665: ST_TO_ADDR
// sRemote := false ;
46666: LD_ADDR_EXP 62
46670: PUSH
46671: LD_INT 0
46673: ST_TO_ADDR
// sPowell := false ;
46674: LD_ADDR_EXP 63
46678: PUSH
46679: LD_INT 0
46681: ST_TO_ADDR
// sTeleport := false ;
46682: LD_ADDR_EXP 66
46686: PUSH
46687: LD_INT 0
46689: ST_TO_ADDR
// sOilTower := false ;
46690: LD_ADDR_EXP 68
46694: PUSH
46695: LD_INT 0
46697: ST_TO_ADDR
// sShovel := false ;
46698: LD_ADDR_EXP 69
46702: PUSH
46703: LD_INT 0
46705: ST_TO_ADDR
// sSheik := false ;
46706: LD_ADDR_EXP 70
46710: PUSH
46711: LD_INT 0
46713: ST_TO_ADDR
// sEarthquake := false ;
46714: LD_ADDR_EXP 72
46718: PUSH
46719: LD_INT 0
46721: ST_TO_ADDR
// sAI := false ;
46722: LD_ADDR_EXP 73
46726: PUSH
46727: LD_INT 0
46729: ST_TO_ADDR
// sCargo := false ;
46730: LD_ADDR_EXP 76
46734: PUSH
46735: LD_INT 0
46737: ST_TO_ADDR
// sDLaser := false ;
46738: LD_ADDR_EXP 77
46742: PUSH
46743: LD_INT 0
46745: ST_TO_ADDR
// sExchange := false ;
46746: LD_ADDR_EXP 78
46750: PUSH
46751: LD_INT 0
46753: ST_TO_ADDR
// sFac := false ;
46754: LD_ADDR_EXP 79
46758: PUSH
46759: LD_INT 0
46761: ST_TO_ADDR
// sPower := false ;
46762: LD_ADDR_EXP 80
46766: PUSH
46767: LD_INT 0
46769: ST_TO_ADDR
// sRandom := false ;
46770: LD_ADDR_EXP 81
46774: PUSH
46775: LD_INT 0
46777: ST_TO_ADDR
// sShield := false ;
46778: LD_ADDR_EXP 82
46782: PUSH
46783: LD_INT 0
46785: ST_TO_ADDR
// sTime := false ;
46786: LD_ADDR_EXP 83
46790: PUSH
46791: LD_INT 0
46793: ST_TO_ADDR
// sTools := false ;
46794: LD_ADDR_EXP 84
46798: PUSH
46799: LD_INT 0
46801: ST_TO_ADDR
// sSold := false ;
46802: LD_ADDR_EXP 49
46806: PUSH
46807: LD_INT 0
46809: ST_TO_ADDR
// sDiff := false ;
46810: LD_ADDR_EXP 50
46814: PUSH
46815: LD_INT 0
46817: ST_TO_ADDR
// sFog := false ;
46818: LD_ADDR_EXP 53
46822: PUSH
46823: LD_INT 0
46825: ST_TO_ADDR
// sReset := false ;
46826: LD_ADDR_EXP 54
46830: PUSH
46831: LD_INT 0
46833: ST_TO_ADDR
// sSun := false ;
46834: LD_ADDR_EXP 55
46838: PUSH
46839: LD_INT 0
46841: ST_TO_ADDR
// sTiger := false ;
46842: LD_ADDR_EXP 51
46846: PUSH
46847: LD_INT 0
46849: ST_TO_ADDR
// sBomb := false ;
46850: LD_ADDR_EXP 52
46854: PUSH
46855: LD_INT 0
46857: ST_TO_ADDR
// sWound := false ;
46858: LD_ADDR_EXP 60
46862: PUSH
46863: LD_INT 0
46865: ST_TO_ADDR
// sBetray := false ;
46866: LD_ADDR_EXP 64
46870: PUSH
46871: LD_INT 0
46873: ST_TO_ADDR
// sContamin := false ;
46874: LD_ADDR_EXP 65
46878: PUSH
46879: LD_INT 0
46881: ST_TO_ADDR
// sOil := false ;
46882: LD_ADDR_EXP 67
46886: PUSH
46887: LD_INT 0
46889: ST_TO_ADDR
// sStu := false ;
46890: LD_ADDR_EXP 71
46894: PUSH
46895: LD_INT 0
46897: ST_TO_ADDR
// sBazooka := false ;
46898: LD_ADDR_EXP 74
46902: PUSH
46903: LD_INT 0
46905: ST_TO_ADDR
// sMortar := false ;
46906: LD_ADDR_EXP 75
46910: PUSH
46911: LD_INT 0
46913: ST_TO_ADDR
// sRanger := false ;
46914: LD_ADDR_EXP 85
46918: PUSH
46919: LD_INT 0
46921: ST_TO_ADDR
// sComputer := false ;
46922: LD_ADDR_EXP 86
46926: PUSH
46927: LD_INT 0
46929: ST_TO_ADDR
// s30 := false ;
46930: LD_ADDR_EXP 87
46934: PUSH
46935: LD_INT 0
46937: ST_TO_ADDR
// s60 := false ;
46938: LD_ADDR_EXP 88
46942: PUSH
46943: LD_INT 0
46945: ST_TO_ADDR
// end ;
46946: LD_VAR 0 1
46950: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
46951: LD_INT 0
46953: PPUSH
46954: PPUSH
46955: PPUSH
46956: PPUSH
46957: PPUSH
46958: PPUSH
46959: PPUSH
// result := [ ] ;
46960: LD_ADDR_VAR 0 2
46964: PUSH
46965: EMPTY
46966: ST_TO_ADDR
// if campaign_id = 1 then
46967: LD_OWVAR 69
46971: PUSH
46972: LD_INT 1
46974: EQUAL
46975: IFFALSE 50141
// begin case mission_number of 1 :
46977: LD_OWVAR 70
46981: PUSH
46982: LD_INT 1
46984: DOUBLE
46985: EQUAL
46986: IFTRUE 46990
46988: GO 47066
46990: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
46991: LD_ADDR_VAR 0 2
46995: PUSH
46996: LD_INT 2
46998: PUSH
46999: LD_INT 4
47001: PUSH
47002: LD_INT 11
47004: PUSH
47005: LD_INT 12
47007: PUSH
47008: LD_INT 15
47010: PUSH
47011: LD_INT 16
47013: PUSH
47014: LD_INT 22
47016: PUSH
47017: LD_INT 23
47019: PUSH
47020: LD_INT 26
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 101
47036: PUSH
47037: LD_INT 102
47039: PUSH
47040: LD_INT 106
47042: PUSH
47043: LD_INT 116
47045: PUSH
47046: LD_INT 117
47048: PUSH
47049: LD_INT 118
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: ST_TO_ADDR
47064: GO 50139
47066: LD_INT 2
47068: DOUBLE
47069: EQUAL
47070: IFTRUE 47074
47072: GO 47158
47074: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
47075: LD_ADDR_VAR 0 2
47079: PUSH
47080: LD_INT 2
47082: PUSH
47083: LD_INT 4
47085: PUSH
47086: LD_INT 11
47088: PUSH
47089: LD_INT 12
47091: PUSH
47092: LD_INT 15
47094: PUSH
47095: LD_INT 16
47097: PUSH
47098: LD_INT 22
47100: PUSH
47101: LD_INT 23
47103: PUSH
47104: LD_INT 26
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 101
47120: PUSH
47121: LD_INT 102
47123: PUSH
47124: LD_INT 105
47126: PUSH
47127: LD_INT 106
47129: PUSH
47130: LD_INT 108
47132: PUSH
47133: LD_INT 116
47135: PUSH
47136: LD_INT 117
47138: PUSH
47139: LD_INT 118
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: ST_TO_ADDR
47156: GO 50139
47158: LD_INT 3
47160: DOUBLE
47161: EQUAL
47162: IFTRUE 47166
47164: GO 47254
47166: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
47167: LD_ADDR_VAR 0 2
47171: PUSH
47172: LD_INT 2
47174: PUSH
47175: LD_INT 4
47177: PUSH
47178: LD_INT 5
47180: PUSH
47181: LD_INT 11
47183: PUSH
47184: LD_INT 12
47186: PUSH
47187: LD_INT 15
47189: PUSH
47190: LD_INT 16
47192: PUSH
47193: LD_INT 22
47195: PUSH
47196: LD_INT 26
47198: PUSH
47199: LD_INT 36
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 101
47216: PUSH
47217: LD_INT 102
47219: PUSH
47220: LD_INT 105
47222: PUSH
47223: LD_INT 106
47225: PUSH
47226: LD_INT 108
47228: PUSH
47229: LD_INT 116
47231: PUSH
47232: LD_INT 117
47234: PUSH
47235: LD_INT 118
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: ST_TO_ADDR
47252: GO 50139
47254: LD_INT 4
47256: DOUBLE
47257: EQUAL
47258: IFTRUE 47262
47260: GO 47358
47262: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
47263: LD_ADDR_VAR 0 2
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: LD_INT 4
47273: PUSH
47274: LD_INT 5
47276: PUSH
47277: LD_INT 8
47279: PUSH
47280: LD_INT 11
47282: PUSH
47283: LD_INT 12
47285: PUSH
47286: LD_INT 15
47288: PUSH
47289: LD_INT 16
47291: PUSH
47292: LD_INT 22
47294: PUSH
47295: LD_INT 23
47297: PUSH
47298: LD_INT 26
47300: PUSH
47301: LD_INT 36
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 101
47320: PUSH
47321: LD_INT 102
47323: PUSH
47324: LD_INT 105
47326: PUSH
47327: LD_INT 106
47329: PUSH
47330: LD_INT 108
47332: PUSH
47333: LD_INT 116
47335: PUSH
47336: LD_INT 117
47338: PUSH
47339: LD_INT 118
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: ST_TO_ADDR
47356: GO 50139
47358: LD_INT 5
47360: DOUBLE
47361: EQUAL
47362: IFTRUE 47366
47364: GO 47478
47366: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
47367: LD_ADDR_VAR 0 2
47371: PUSH
47372: LD_INT 2
47374: PUSH
47375: LD_INT 4
47377: PUSH
47378: LD_INT 5
47380: PUSH
47381: LD_INT 6
47383: PUSH
47384: LD_INT 8
47386: PUSH
47387: LD_INT 11
47389: PUSH
47390: LD_INT 12
47392: PUSH
47393: LD_INT 15
47395: PUSH
47396: LD_INT 16
47398: PUSH
47399: LD_INT 22
47401: PUSH
47402: LD_INT 23
47404: PUSH
47405: LD_INT 25
47407: PUSH
47408: LD_INT 26
47410: PUSH
47411: LD_INT 36
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 101
47432: PUSH
47433: LD_INT 102
47435: PUSH
47436: LD_INT 105
47438: PUSH
47439: LD_INT 106
47441: PUSH
47442: LD_INT 108
47444: PUSH
47445: LD_INT 109
47447: PUSH
47448: LD_INT 112
47450: PUSH
47451: LD_INT 116
47453: PUSH
47454: LD_INT 117
47456: PUSH
47457: LD_INT 118
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: ST_TO_ADDR
47476: GO 50139
47478: LD_INT 6
47480: DOUBLE
47481: EQUAL
47482: IFTRUE 47486
47484: GO 47618
47486: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
47487: LD_ADDR_VAR 0 2
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: LD_INT 4
47497: PUSH
47498: LD_INT 5
47500: PUSH
47501: LD_INT 6
47503: PUSH
47504: LD_INT 8
47506: PUSH
47507: LD_INT 11
47509: PUSH
47510: LD_INT 12
47512: PUSH
47513: LD_INT 15
47515: PUSH
47516: LD_INT 16
47518: PUSH
47519: LD_INT 20
47521: PUSH
47522: LD_INT 21
47524: PUSH
47525: LD_INT 22
47527: PUSH
47528: LD_INT 23
47530: PUSH
47531: LD_INT 25
47533: PUSH
47534: LD_INT 26
47536: PUSH
47537: LD_INT 30
47539: PUSH
47540: LD_INT 31
47542: PUSH
47543: LD_INT 32
47545: PUSH
47546: LD_INT 36
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 101
47572: PUSH
47573: LD_INT 102
47575: PUSH
47576: LD_INT 105
47578: PUSH
47579: LD_INT 106
47581: PUSH
47582: LD_INT 108
47584: PUSH
47585: LD_INT 109
47587: PUSH
47588: LD_INT 112
47590: PUSH
47591: LD_INT 116
47593: PUSH
47594: LD_INT 117
47596: PUSH
47597: LD_INT 118
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: ST_TO_ADDR
47616: GO 50139
47618: LD_INT 7
47620: DOUBLE
47621: EQUAL
47622: IFTRUE 47626
47624: GO 47738
47626: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
47627: LD_ADDR_VAR 0 2
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: LD_INT 4
47637: PUSH
47638: LD_INT 5
47640: PUSH
47641: LD_INT 7
47643: PUSH
47644: LD_INT 11
47646: PUSH
47647: LD_INT 12
47649: PUSH
47650: LD_INT 15
47652: PUSH
47653: LD_INT 16
47655: PUSH
47656: LD_INT 20
47658: PUSH
47659: LD_INT 21
47661: PUSH
47662: LD_INT 22
47664: PUSH
47665: LD_INT 23
47667: PUSH
47668: LD_INT 25
47670: PUSH
47671: LD_INT 26
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 101
47692: PUSH
47693: LD_INT 102
47695: PUSH
47696: LD_INT 103
47698: PUSH
47699: LD_INT 105
47701: PUSH
47702: LD_INT 106
47704: PUSH
47705: LD_INT 108
47707: PUSH
47708: LD_INT 112
47710: PUSH
47711: LD_INT 116
47713: PUSH
47714: LD_INT 117
47716: PUSH
47717: LD_INT 118
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: ST_TO_ADDR
47736: GO 50139
47738: LD_INT 8
47740: DOUBLE
47741: EQUAL
47742: IFTRUE 47746
47744: GO 47886
47746: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
47747: LD_ADDR_VAR 0 2
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: LD_INT 4
47757: PUSH
47758: LD_INT 5
47760: PUSH
47761: LD_INT 6
47763: PUSH
47764: LD_INT 7
47766: PUSH
47767: LD_INT 8
47769: PUSH
47770: LD_INT 11
47772: PUSH
47773: LD_INT 12
47775: PUSH
47776: LD_INT 15
47778: PUSH
47779: LD_INT 16
47781: PUSH
47782: LD_INT 20
47784: PUSH
47785: LD_INT 21
47787: PUSH
47788: LD_INT 22
47790: PUSH
47791: LD_INT 23
47793: PUSH
47794: LD_INT 25
47796: PUSH
47797: LD_INT 26
47799: PUSH
47800: LD_INT 30
47802: PUSH
47803: LD_INT 31
47805: PUSH
47806: LD_INT 32
47808: PUSH
47809: LD_INT 36
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 101
47836: PUSH
47837: LD_INT 102
47839: PUSH
47840: LD_INT 103
47842: PUSH
47843: LD_INT 105
47845: PUSH
47846: LD_INT 106
47848: PUSH
47849: LD_INT 108
47851: PUSH
47852: LD_INT 109
47854: PUSH
47855: LD_INT 112
47857: PUSH
47858: LD_INT 116
47860: PUSH
47861: LD_INT 117
47863: PUSH
47864: LD_INT 118
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: ST_TO_ADDR
47884: GO 50139
47886: LD_INT 9
47888: DOUBLE
47889: EQUAL
47890: IFTRUE 47894
47892: GO 48042
47894: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
47895: LD_ADDR_VAR 0 2
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: LD_INT 4
47905: PUSH
47906: LD_INT 5
47908: PUSH
47909: LD_INT 6
47911: PUSH
47912: LD_INT 7
47914: PUSH
47915: LD_INT 8
47917: PUSH
47918: LD_INT 11
47920: PUSH
47921: LD_INT 12
47923: PUSH
47924: LD_INT 15
47926: PUSH
47927: LD_INT 16
47929: PUSH
47930: LD_INT 20
47932: PUSH
47933: LD_INT 21
47935: PUSH
47936: LD_INT 22
47938: PUSH
47939: LD_INT 23
47941: PUSH
47942: LD_INT 25
47944: PUSH
47945: LD_INT 26
47947: PUSH
47948: LD_INT 28
47950: PUSH
47951: LD_INT 30
47953: PUSH
47954: LD_INT 31
47956: PUSH
47957: LD_INT 32
47959: PUSH
47960: LD_INT 36
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 101
47988: PUSH
47989: LD_INT 102
47991: PUSH
47992: LD_INT 103
47994: PUSH
47995: LD_INT 105
47997: PUSH
47998: LD_INT 106
48000: PUSH
48001: LD_INT 108
48003: PUSH
48004: LD_INT 109
48006: PUSH
48007: LD_INT 112
48009: PUSH
48010: LD_INT 114
48012: PUSH
48013: LD_INT 116
48015: PUSH
48016: LD_INT 117
48018: PUSH
48019: LD_INT 118
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: ST_TO_ADDR
48040: GO 50139
48042: LD_INT 10
48044: DOUBLE
48045: EQUAL
48046: IFTRUE 48050
48048: GO 48246
48050: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
48051: LD_ADDR_VAR 0 2
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: LD_INT 4
48061: PUSH
48062: LD_INT 5
48064: PUSH
48065: LD_INT 6
48067: PUSH
48068: LD_INT 7
48070: PUSH
48071: LD_INT 8
48073: PUSH
48074: LD_INT 9
48076: PUSH
48077: LD_INT 10
48079: PUSH
48080: LD_INT 11
48082: PUSH
48083: LD_INT 12
48085: PUSH
48086: LD_INT 13
48088: PUSH
48089: LD_INT 14
48091: PUSH
48092: LD_INT 15
48094: PUSH
48095: LD_INT 16
48097: PUSH
48098: LD_INT 17
48100: PUSH
48101: LD_INT 18
48103: PUSH
48104: LD_INT 19
48106: PUSH
48107: LD_INT 20
48109: PUSH
48110: LD_INT 21
48112: PUSH
48113: LD_INT 22
48115: PUSH
48116: LD_INT 23
48118: PUSH
48119: LD_INT 24
48121: PUSH
48122: LD_INT 25
48124: PUSH
48125: LD_INT 26
48127: PUSH
48128: LD_INT 28
48130: PUSH
48131: LD_INT 30
48133: PUSH
48134: LD_INT 31
48136: PUSH
48137: LD_INT 32
48139: PUSH
48140: LD_INT 36
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 101
48176: PUSH
48177: LD_INT 102
48179: PUSH
48180: LD_INT 103
48182: PUSH
48183: LD_INT 104
48185: PUSH
48186: LD_INT 105
48188: PUSH
48189: LD_INT 106
48191: PUSH
48192: LD_INT 107
48194: PUSH
48195: LD_INT 108
48197: PUSH
48198: LD_INT 109
48200: PUSH
48201: LD_INT 110
48203: PUSH
48204: LD_INT 111
48206: PUSH
48207: LD_INT 112
48209: PUSH
48210: LD_INT 114
48212: PUSH
48213: LD_INT 116
48215: PUSH
48216: LD_INT 117
48218: PUSH
48219: LD_INT 118
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: ST_TO_ADDR
48244: GO 50139
48246: LD_INT 11
48248: DOUBLE
48249: EQUAL
48250: IFTRUE 48254
48252: GO 48458
48254: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
48255: LD_ADDR_VAR 0 2
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: LD_INT 3
48265: PUSH
48266: LD_INT 4
48268: PUSH
48269: LD_INT 5
48271: PUSH
48272: LD_INT 6
48274: PUSH
48275: LD_INT 7
48277: PUSH
48278: LD_INT 8
48280: PUSH
48281: LD_INT 9
48283: PUSH
48284: LD_INT 10
48286: PUSH
48287: LD_INT 11
48289: PUSH
48290: LD_INT 12
48292: PUSH
48293: LD_INT 13
48295: PUSH
48296: LD_INT 14
48298: PUSH
48299: LD_INT 15
48301: PUSH
48302: LD_INT 16
48304: PUSH
48305: LD_INT 17
48307: PUSH
48308: LD_INT 18
48310: PUSH
48311: LD_INT 19
48313: PUSH
48314: LD_INT 20
48316: PUSH
48317: LD_INT 21
48319: PUSH
48320: LD_INT 22
48322: PUSH
48323: LD_INT 23
48325: PUSH
48326: LD_INT 24
48328: PUSH
48329: LD_INT 25
48331: PUSH
48332: LD_INT 26
48334: PUSH
48335: LD_INT 28
48337: PUSH
48338: LD_INT 30
48340: PUSH
48341: LD_INT 31
48343: PUSH
48344: LD_INT 32
48346: PUSH
48347: LD_INT 34
48349: PUSH
48350: LD_INT 36
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 101
48388: PUSH
48389: LD_INT 102
48391: PUSH
48392: LD_INT 103
48394: PUSH
48395: LD_INT 104
48397: PUSH
48398: LD_INT 105
48400: PUSH
48401: LD_INT 106
48403: PUSH
48404: LD_INT 107
48406: PUSH
48407: LD_INT 108
48409: PUSH
48410: LD_INT 109
48412: PUSH
48413: LD_INT 110
48415: PUSH
48416: LD_INT 111
48418: PUSH
48419: LD_INT 112
48421: PUSH
48422: LD_INT 114
48424: PUSH
48425: LD_INT 116
48427: PUSH
48428: LD_INT 117
48430: PUSH
48431: LD_INT 118
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: ST_TO_ADDR
48456: GO 50139
48458: LD_INT 12
48460: DOUBLE
48461: EQUAL
48462: IFTRUE 48466
48464: GO 48686
48466: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
48467: LD_ADDR_VAR 0 2
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: LD_INT 3
48480: PUSH
48481: LD_INT 4
48483: PUSH
48484: LD_INT 5
48486: PUSH
48487: LD_INT 6
48489: PUSH
48490: LD_INT 7
48492: PUSH
48493: LD_INT 8
48495: PUSH
48496: LD_INT 9
48498: PUSH
48499: LD_INT 10
48501: PUSH
48502: LD_INT 11
48504: PUSH
48505: LD_INT 12
48507: PUSH
48508: LD_INT 13
48510: PUSH
48511: LD_INT 14
48513: PUSH
48514: LD_INT 15
48516: PUSH
48517: LD_INT 16
48519: PUSH
48520: LD_INT 17
48522: PUSH
48523: LD_INT 18
48525: PUSH
48526: LD_INT 19
48528: PUSH
48529: LD_INT 20
48531: PUSH
48532: LD_INT 21
48534: PUSH
48535: LD_INT 22
48537: PUSH
48538: LD_INT 23
48540: PUSH
48541: LD_INT 24
48543: PUSH
48544: LD_INT 25
48546: PUSH
48547: LD_INT 26
48549: PUSH
48550: LD_INT 27
48552: PUSH
48553: LD_INT 28
48555: PUSH
48556: LD_INT 30
48558: PUSH
48559: LD_INT 31
48561: PUSH
48562: LD_INT 32
48564: PUSH
48565: LD_INT 33
48567: PUSH
48568: LD_INT 34
48570: PUSH
48571: LD_INT 36
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 101
48612: PUSH
48613: LD_INT 102
48615: PUSH
48616: LD_INT 103
48618: PUSH
48619: LD_INT 104
48621: PUSH
48622: LD_INT 105
48624: PUSH
48625: LD_INT 106
48627: PUSH
48628: LD_INT 107
48630: PUSH
48631: LD_INT 108
48633: PUSH
48634: LD_INT 109
48636: PUSH
48637: LD_INT 110
48639: PUSH
48640: LD_INT 111
48642: PUSH
48643: LD_INT 112
48645: PUSH
48646: LD_INT 113
48648: PUSH
48649: LD_INT 114
48651: PUSH
48652: LD_INT 116
48654: PUSH
48655: LD_INT 117
48657: PUSH
48658: LD_INT 118
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: ST_TO_ADDR
48684: GO 50139
48686: LD_INT 13
48688: DOUBLE
48689: EQUAL
48690: IFTRUE 48694
48692: GO 48902
48694: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
48695: LD_ADDR_VAR 0 2
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: LD_INT 3
48708: PUSH
48709: LD_INT 4
48711: PUSH
48712: LD_INT 5
48714: PUSH
48715: LD_INT 8
48717: PUSH
48718: LD_INT 9
48720: PUSH
48721: LD_INT 10
48723: PUSH
48724: LD_INT 11
48726: PUSH
48727: LD_INT 12
48729: PUSH
48730: LD_INT 14
48732: PUSH
48733: LD_INT 15
48735: PUSH
48736: LD_INT 16
48738: PUSH
48739: LD_INT 17
48741: PUSH
48742: LD_INT 18
48744: PUSH
48745: LD_INT 19
48747: PUSH
48748: LD_INT 20
48750: PUSH
48751: LD_INT 21
48753: PUSH
48754: LD_INT 22
48756: PUSH
48757: LD_INT 23
48759: PUSH
48760: LD_INT 24
48762: PUSH
48763: LD_INT 25
48765: PUSH
48766: LD_INT 26
48768: PUSH
48769: LD_INT 27
48771: PUSH
48772: LD_INT 28
48774: PUSH
48775: LD_INT 30
48777: PUSH
48778: LD_INT 31
48780: PUSH
48781: LD_INT 32
48783: PUSH
48784: LD_INT 33
48786: PUSH
48787: LD_INT 34
48789: PUSH
48790: LD_INT 36
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 101
48828: PUSH
48829: LD_INT 102
48831: PUSH
48832: LD_INT 103
48834: PUSH
48835: LD_INT 104
48837: PUSH
48838: LD_INT 105
48840: PUSH
48841: LD_INT 106
48843: PUSH
48844: LD_INT 107
48846: PUSH
48847: LD_INT 108
48849: PUSH
48850: LD_INT 109
48852: PUSH
48853: LD_INT 110
48855: PUSH
48856: LD_INT 111
48858: PUSH
48859: LD_INT 112
48861: PUSH
48862: LD_INT 113
48864: PUSH
48865: LD_INT 114
48867: PUSH
48868: LD_INT 116
48870: PUSH
48871: LD_INT 117
48873: PUSH
48874: LD_INT 118
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: ST_TO_ADDR
48900: GO 50139
48902: LD_INT 14
48904: DOUBLE
48905: EQUAL
48906: IFTRUE 48910
48908: GO 49134
48910: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
48911: LD_ADDR_VAR 0 2
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: LD_INT 3
48924: PUSH
48925: LD_INT 4
48927: PUSH
48928: LD_INT 5
48930: PUSH
48931: LD_INT 6
48933: PUSH
48934: LD_INT 7
48936: PUSH
48937: LD_INT 8
48939: PUSH
48940: LD_INT 9
48942: PUSH
48943: LD_INT 10
48945: PUSH
48946: LD_INT 11
48948: PUSH
48949: LD_INT 12
48951: PUSH
48952: LD_INT 13
48954: PUSH
48955: LD_INT 14
48957: PUSH
48958: LD_INT 15
48960: PUSH
48961: LD_INT 16
48963: PUSH
48964: LD_INT 17
48966: PUSH
48967: LD_INT 18
48969: PUSH
48970: LD_INT 19
48972: PUSH
48973: LD_INT 20
48975: PUSH
48976: LD_INT 21
48978: PUSH
48979: LD_INT 22
48981: PUSH
48982: LD_INT 23
48984: PUSH
48985: LD_INT 24
48987: PUSH
48988: LD_INT 25
48990: PUSH
48991: LD_INT 26
48993: PUSH
48994: LD_INT 27
48996: PUSH
48997: LD_INT 28
48999: PUSH
49000: LD_INT 29
49002: PUSH
49003: LD_INT 30
49005: PUSH
49006: LD_INT 31
49008: PUSH
49009: LD_INT 32
49011: PUSH
49012: LD_INT 33
49014: PUSH
49015: LD_INT 34
49017: PUSH
49018: LD_INT 36
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 101
49060: PUSH
49061: LD_INT 102
49063: PUSH
49064: LD_INT 103
49066: PUSH
49067: LD_INT 104
49069: PUSH
49070: LD_INT 105
49072: PUSH
49073: LD_INT 106
49075: PUSH
49076: LD_INT 107
49078: PUSH
49079: LD_INT 108
49081: PUSH
49082: LD_INT 109
49084: PUSH
49085: LD_INT 110
49087: PUSH
49088: LD_INT 111
49090: PUSH
49091: LD_INT 112
49093: PUSH
49094: LD_INT 113
49096: PUSH
49097: LD_INT 114
49099: PUSH
49100: LD_INT 116
49102: PUSH
49103: LD_INT 117
49105: PUSH
49106: LD_INT 118
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: ST_TO_ADDR
49132: GO 50139
49134: LD_INT 15
49136: DOUBLE
49137: EQUAL
49138: IFTRUE 49142
49140: GO 49366
49142: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
49143: LD_ADDR_VAR 0 2
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: LD_INT 2
49153: PUSH
49154: LD_INT 3
49156: PUSH
49157: LD_INT 4
49159: PUSH
49160: LD_INT 5
49162: PUSH
49163: LD_INT 6
49165: PUSH
49166: LD_INT 7
49168: PUSH
49169: LD_INT 8
49171: PUSH
49172: LD_INT 9
49174: PUSH
49175: LD_INT 10
49177: PUSH
49178: LD_INT 11
49180: PUSH
49181: LD_INT 12
49183: PUSH
49184: LD_INT 13
49186: PUSH
49187: LD_INT 14
49189: PUSH
49190: LD_INT 15
49192: PUSH
49193: LD_INT 16
49195: PUSH
49196: LD_INT 17
49198: PUSH
49199: LD_INT 18
49201: PUSH
49202: LD_INT 19
49204: PUSH
49205: LD_INT 20
49207: PUSH
49208: LD_INT 21
49210: PUSH
49211: LD_INT 22
49213: PUSH
49214: LD_INT 23
49216: PUSH
49217: LD_INT 24
49219: PUSH
49220: LD_INT 25
49222: PUSH
49223: LD_INT 26
49225: PUSH
49226: LD_INT 27
49228: PUSH
49229: LD_INT 28
49231: PUSH
49232: LD_INT 29
49234: PUSH
49235: LD_INT 30
49237: PUSH
49238: LD_INT 31
49240: PUSH
49241: LD_INT 32
49243: PUSH
49244: LD_INT 33
49246: PUSH
49247: LD_INT 34
49249: PUSH
49250: LD_INT 36
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 101
49292: PUSH
49293: LD_INT 102
49295: PUSH
49296: LD_INT 103
49298: PUSH
49299: LD_INT 104
49301: PUSH
49302: LD_INT 105
49304: PUSH
49305: LD_INT 106
49307: PUSH
49308: LD_INT 107
49310: PUSH
49311: LD_INT 108
49313: PUSH
49314: LD_INT 109
49316: PUSH
49317: LD_INT 110
49319: PUSH
49320: LD_INT 111
49322: PUSH
49323: LD_INT 112
49325: PUSH
49326: LD_INT 113
49328: PUSH
49329: LD_INT 114
49331: PUSH
49332: LD_INT 116
49334: PUSH
49335: LD_INT 117
49337: PUSH
49338: LD_INT 118
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: ST_TO_ADDR
49364: GO 50139
49366: LD_INT 16
49368: DOUBLE
49369: EQUAL
49370: IFTRUE 49374
49372: GO 49510
49374: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
49375: LD_ADDR_VAR 0 2
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: LD_INT 4
49385: PUSH
49386: LD_INT 5
49388: PUSH
49389: LD_INT 7
49391: PUSH
49392: LD_INT 11
49394: PUSH
49395: LD_INT 12
49397: PUSH
49398: LD_INT 15
49400: PUSH
49401: LD_INT 16
49403: PUSH
49404: LD_INT 20
49406: PUSH
49407: LD_INT 21
49409: PUSH
49410: LD_INT 22
49412: PUSH
49413: LD_INT 23
49415: PUSH
49416: LD_INT 25
49418: PUSH
49419: LD_INT 26
49421: PUSH
49422: LD_INT 30
49424: PUSH
49425: LD_INT 31
49427: PUSH
49428: LD_INT 32
49430: PUSH
49431: LD_INT 33
49433: PUSH
49434: LD_INT 34
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 101
49460: PUSH
49461: LD_INT 102
49463: PUSH
49464: LD_INT 103
49466: PUSH
49467: LD_INT 106
49469: PUSH
49470: LD_INT 108
49472: PUSH
49473: LD_INT 112
49475: PUSH
49476: LD_INT 113
49478: PUSH
49479: LD_INT 114
49481: PUSH
49482: LD_INT 116
49484: PUSH
49485: LD_INT 117
49487: PUSH
49488: LD_INT 118
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: ST_TO_ADDR
49508: GO 50139
49510: LD_INT 17
49512: DOUBLE
49513: EQUAL
49514: IFTRUE 49518
49516: GO 49742
49518: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
49519: LD_ADDR_VAR 0 2
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: LD_INT 2
49529: PUSH
49530: LD_INT 3
49532: PUSH
49533: LD_INT 4
49535: PUSH
49536: LD_INT 5
49538: PUSH
49539: LD_INT 6
49541: PUSH
49542: LD_INT 7
49544: PUSH
49545: LD_INT 8
49547: PUSH
49548: LD_INT 9
49550: PUSH
49551: LD_INT 10
49553: PUSH
49554: LD_INT 11
49556: PUSH
49557: LD_INT 12
49559: PUSH
49560: LD_INT 13
49562: PUSH
49563: LD_INT 14
49565: PUSH
49566: LD_INT 15
49568: PUSH
49569: LD_INT 16
49571: PUSH
49572: LD_INT 17
49574: PUSH
49575: LD_INT 18
49577: PUSH
49578: LD_INT 19
49580: PUSH
49581: LD_INT 20
49583: PUSH
49584: LD_INT 21
49586: PUSH
49587: LD_INT 22
49589: PUSH
49590: LD_INT 23
49592: PUSH
49593: LD_INT 24
49595: PUSH
49596: LD_INT 25
49598: PUSH
49599: LD_INT 26
49601: PUSH
49602: LD_INT 27
49604: PUSH
49605: LD_INT 28
49607: PUSH
49608: LD_INT 29
49610: PUSH
49611: LD_INT 30
49613: PUSH
49614: LD_INT 31
49616: PUSH
49617: LD_INT 32
49619: PUSH
49620: LD_INT 33
49622: PUSH
49623: LD_INT 34
49625: PUSH
49626: LD_INT 36
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 101
49668: PUSH
49669: LD_INT 102
49671: PUSH
49672: LD_INT 103
49674: PUSH
49675: LD_INT 104
49677: PUSH
49678: LD_INT 105
49680: PUSH
49681: LD_INT 106
49683: PUSH
49684: LD_INT 107
49686: PUSH
49687: LD_INT 108
49689: PUSH
49690: LD_INT 109
49692: PUSH
49693: LD_INT 110
49695: PUSH
49696: LD_INT 111
49698: PUSH
49699: LD_INT 112
49701: PUSH
49702: LD_INT 113
49704: PUSH
49705: LD_INT 114
49707: PUSH
49708: LD_INT 116
49710: PUSH
49711: LD_INT 117
49713: PUSH
49714: LD_INT 118
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: ST_TO_ADDR
49740: GO 50139
49742: LD_INT 18
49744: DOUBLE
49745: EQUAL
49746: IFTRUE 49750
49748: GO 49898
49750: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
49751: LD_ADDR_VAR 0 2
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: LD_INT 4
49761: PUSH
49762: LD_INT 5
49764: PUSH
49765: LD_INT 7
49767: PUSH
49768: LD_INT 11
49770: PUSH
49771: LD_INT 12
49773: PUSH
49774: LD_INT 15
49776: PUSH
49777: LD_INT 16
49779: PUSH
49780: LD_INT 20
49782: PUSH
49783: LD_INT 21
49785: PUSH
49786: LD_INT 22
49788: PUSH
49789: LD_INT 23
49791: PUSH
49792: LD_INT 25
49794: PUSH
49795: LD_INT 26
49797: PUSH
49798: LD_INT 30
49800: PUSH
49801: LD_INT 31
49803: PUSH
49804: LD_INT 32
49806: PUSH
49807: LD_INT 33
49809: PUSH
49810: LD_INT 34
49812: PUSH
49813: LD_INT 35
49815: PUSH
49816: LD_INT 36
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 101
49844: PUSH
49845: LD_INT 102
49847: PUSH
49848: LD_INT 103
49850: PUSH
49851: LD_INT 106
49853: PUSH
49854: LD_INT 108
49856: PUSH
49857: LD_INT 112
49859: PUSH
49860: LD_INT 113
49862: PUSH
49863: LD_INT 114
49865: PUSH
49866: LD_INT 115
49868: PUSH
49869: LD_INT 116
49871: PUSH
49872: LD_INT 117
49874: PUSH
49875: LD_INT 118
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: ST_TO_ADDR
49896: GO 50139
49898: LD_INT 19
49900: DOUBLE
49901: EQUAL
49902: IFTRUE 49906
49904: GO 50138
49906: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
49907: LD_ADDR_VAR 0 2
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: LD_INT 2
49917: PUSH
49918: LD_INT 3
49920: PUSH
49921: LD_INT 4
49923: PUSH
49924: LD_INT 5
49926: PUSH
49927: LD_INT 6
49929: PUSH
49930: LD_INT 7
49932: PUSH
49933: LD_INT 8
49935: PUSH
49936: LD_INT 9
49938: PUSH
49939: LD_INT 10
49941: PUSH
49942: LD_INT 11
49944: PUSH
49945: LD_INT 12
49947: PUSH
49948: LD_INT 13
49950: PUSH
49951: LD_INT 14
49953: PUSH
49954: LD_INT 15
49956: PUSH
49957: LD_INT 16
49959: PUSH
49960: LD_INT 17
49962: PUSH
49963: LD_INT 18
49965: PUSH
49966: LD_INT 19
49968: PUSH
49969: LD_INT 20
49971: PUSH
49972: LD_INT 21
49974: PUSH
49975: LD_INT 22
49977: PUSH
49978: LD_INT 23
49980: PUSH
49981: LD_INT 24
49983: PUSH
49984: LD_INT 25
49986: PUSH
49987: LD_INT 26
49989: PUSH
49990: LD_INT 27
49992: PUSH
49993: LD_INT 28
49995: PUSH
49996: LD_INT 29
49998: PUSH
49999: LD_INT 30
50001: PUSH
50002: LD_INT 31
50004: PUSH
50005: LD_INT 32
50007: PUSH
50008: LD_INT 33
50010: PUSH
50011: LD_INT 34
50013: PUSH
50014: LD_INT 35
50016: PUSH
50017: LD_INT 36
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 101
50060: PUSH
50061: LD_INT 102
50063: PUSH
50064: LD_INT 103
50066: PUSH
50067: LD_INT 104
50069: PUSH
50070: LD_INT 105
50072: PUSH
50073: LD_INT 106
50075: PUSH
50076: LD_INT 107
50078: PUSH
50079: LD_INT 108
50081: PUSH
50082: LD_INT 109
50084: PUSH
50085: LD_INT 110
50087: PUSH
50088: LD_INT 111
50090: PUSH
50091: LD_INT 112
50093: PUSH
50094: LD_INT 113
50096: PUSH
50097: LD_INT 114
50099: PUSH
50100: LD_INT 115
50102: PUSH
50103: LD_INT 116
50105: PUSH
50106: LD_INT 117
50108: PUSH
50109: LD_INT 118
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: ST_TO_ADDR
50136: GO 50139
50138: POP
// end else
50139: GO 50370
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
50141: LD_ADDR_VAR 0 2
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: LD_INT 3
50154: PUSH
50155: LD_INT 4
50157: PUSH
50158: LD_INT 5
50160: PUSH
50161: LD_INT 6
50163: PUSH
50164: LD_INT 7
50166: PUSH
50167: LD_INT 8
50169: PUSH
50170: LD_INT 9
50172: PUSH
50173: LD_INT 10
50175: PUSH
50176: LD_INT 11
50178: PUSH
50179: LD_INT 12
50181: PUSH
50182: LD_INT 13
50184: PUSH
50185: LD_INT 14
50187: PUSH
50188: LD_INT 15
50190: PUSH
50191: LD_INT 16
50193: PUSH
50194: LD_INT 17
50196: PUSH
50197: LD_INT 18
50199: PUSH
50200: LD_INT 19
50202: PUSH
50203: LD_INT 20
50205: PUSH
50206: LD_INT 21
50208: PUSH
50209: LD_INT 22
50211: PUSH
50212: LD_INT 23
50214: PUSH
50215: LD_INT 24
50217: PUSH
50218: LD_INT 25
50220: PUSH
50221: LD_INT 26
50223: PUSH
50224: LD_INT 27
50226: PUSH
50227: LD_INT 28
50229: PUSH
50230: LD_INT 29
50232: PUSH
50233: LD_INT 30
50235: PUSH
50236: LD_INT 31
50238: PUSH
50239: LD_INT 32
50241: PUSH
50242: LD_INT 33
50244: PUSH
50245: LD_INT 34
50247: PUSH
50248: LD_INT 35
50250: PUSH
50251: LD_INT 36
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 101
50294: PUSH
50295: LD_INT 102
50297: PUSH
50298: LD_INT 103
50300: PUSH
50301: LD_INT 104
50303: PUSH
50304: LD_INT 105
50306: PUSH
50307: LD_INT 106
50309: PUSH
50310: LD_INT 107
50312: PUSH
50313: LD_INT 108
50315: PUSH
50316: LD_INT 109
50318: PUSH
50319: LD_INT 110
50321: PUSH
50322: LD_INT 111
50324: PUSH
50325: LD_INT 112
50327: PUSH
50328: LD_INT 113
50330: PUSH
50331: LD_INT 114
50333: PUSH
50334: LD_INT 115
50336: PUSH
50337: LD_INT 116
50339: PUSH
50340: LD_INT 117
50342: PUSH
50343: LD_INT 118
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: ST_TO_ADDR
// if result then
50370: LD_VAR 0 2
50374: IFFALSE 51160
// begin normal :=  ;
50376: LD_ADDR_VAR 0 5
50380: PUSH
50381: LD_STRING 
50383: ST_TO_ADDR
// hardcore :=  ;
50384: LD_ADDR_VAR 0 6
50388: PUSH
50389: LD_STRING 
50391: ST_TO_ADDR
// active :=  ;
50392: LD_ADDR_VAR 0 7
50396: PUSH
50397: LD_STRING 
50399: ST_TO_ADDR
// for i = 1 to normalCounter do
50400: LD_ADDR_VAR 0 8
50404: PUSH
50405: DOUBLE
50406: LD_INT 1
50408: DEC
50409: ST_TO_ADDR
50410: LD_EXP 33
50414: PUSH
50415: FOR_TO
50416: IFFALSE 50517
// begin tmp := 0 ;
50418: LD_ADDR_VAR 0 3
50422: PUSH
50423: LD_STRING 0
50425: ST_TO_ADDR
// if result [ 1 ] then
50426: LD_VAR 0 2
50430: PUSH
50431: LD_INT 1
50433: ARRAY
50434: IFFALSE 50499
// if result [ 1 ] [ 1 ] = i then
50436: LD_VAR 0 2
50440: PUSH
50441: LD_INT 1
50443: ARRAY
50444: PUSH
50445: LD_INT 1
50447: ARRAY
50448: PUSH
50449: LD_VAR 0 8
50453: EQUAL
50454: IFFALSE 50499
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
50456: LD_ADDR_VAR 0 2
50460: PUSH
50461: LD_VAR 0 2
50465: PPUSH
50466: LD_INT 1
50468: PPUSH
50469: LD_VAR 0 2
50473: PUSH
50474: LD_INT 1
50476: ARRAY
50477: PPUSH
50478: LD_INT 1
50480: PPUSH
50481: CALL_OW 3
50485: PPUSH
50486: CALL_OW 1
50490: ST_TO_ADDR
// tmp := 1 ;
50491: LD_ADDR_VAR 0 3
50495: PUSH
50496: LD_STRING 1
50498: ST_TO_ADDR
// end ; normal := normal & tmp ;
50499: LD_ADDR_VAR 0 5
50503: PUSH
50504: LD_VAR 0 5
50508: PUSH
50509: LD_VAR 0 3
50513: STR
50514: ST_TO_ADDR
// end ;
50515: GO 50415
50517: POP
50518: POP
// for i = 1 to hardcoreCounter do
50519: LD_ADDR_VAR 0 8
50523: PUSH
50524: DOUBLE
50525: LD_INT 1
50527: DEC
50528: ST_TO_ADDR
50529: LD_EXP 34
50533: PUSH
50534: FOR_TO
50535: IFFALSE 50640
// begin tmp := 0 ;
50537: LD_ADDR_VAR 0 3
50541: PUSH
50542: LD_STRING 0
50544: ST_TO_ADDR
// if result [ 2 ] then
50545: LD_VAR 0 2
50549: PUSH
50550: LD_INT 2
50552: ARRAY
50553: IFFALSE 50622
// if result [ 2 ] [ 1 ] = 100 + i then
50555: LD_VAR 0 2
50559: PUSH
50560: LD_INT 2
50562: ARRAY
50563: PUSH
50564: LD_INT 1
50566: ARRAY
50567: PUSH
50568: LD_INT 100
50570: PUSH
50571: LD_VAR 0 8
50575: PLUS
50576: EQUAL
50577: IFFALSE 50622
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
50579: LD_ADDR_VAR 0 2
50583: PUSH
50584: LD_VAR 0 2
50588: PPUSH
50589: LD_INT 2
50591: PPUSH
50592: LD_VAR 0 2
50596: PUSH
50597: LD_INT 2
50599: ARRAY
50600: PPUSH
50601: LD_INT 1
50603: PPUSH
50604: CALL_OW 3
50608: PPUSH
50609: CALL_OW 1
50613: ST_TO_ADDR
// tmp := 1 ;
50614: LD_ADDR_VAR 0 3
50618: PUSH
50619: LD_STRING 1
50621: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
50622: LD_ADDR_VAR 0 6
50626: PUSH
50627: LD_VAR 0 6
50631: PUSH
50632: LD_VAR 0 3
50636: STR
50637: ST_TO_ADDR
// end ;
50638: GO 50534
50640: POP
50641: POP
// if isGameLoad then
50642: LD_VAR 0 1
50646: IFFALSE 51121
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
50648: LD_ADDR_VAR 0 4
50652: PUSH
50653: LD_EXP 37
50657: PUSH
50658: LD_EXP 36
50662: PUSH
50663: LD_EXP 38
50667: PUSH
50668: LD_EXP 35
50672: PUSH
50673: LD_EXP 39
50677: PUSH
50678: LD_EXP 40
50682: PUSH
50683: LD_EXP 41
50687: PUSH
50688: LD_EXP 42
50692: PUSH
50693: LD_EXP 43
50697: PUSH
50698: LD_EXP 44
50702: PUSH
50703: LD_EXP 45
50707: PUSH
50708: LD_EXP 46
50712: PUSH
50713: LD_EXP 47
50717: PUSH
50718: LD_EXP 48
50722: PUSH
50723: LD_EXP 56
50727: PUSH
50728: LD_EXP 57
50732: PUSH
50733: LD_EXP 58
50737: PUSH
50738: LD_EXP 59
50742: PUSH
50743: LD_EXP 61
50747: PUSH
50748: LD_EXP 62
50752: PUSH
50753: LD_EXP 63
50757: PUSH
50758: LD_EXP 66
50762: PUSH
50763: LD_EXP 68
50767: PUSH
50768: LD_EXP 69
50772: PUSH
50773: LD_EXP 70
50777: PUSH
50778: LD_EXP 72
50782: PUSH
50783: LD_EXP 73
50787: PUSH
50788: LD_EXP 76
50792: PUSH
50793: LD_EXP 77
50797: PUSH
50798: LD_EXP 78
50802: PUSH
50803: LD_EXP 79
50807: PUSH
50808: LD_EXP 80
50812: PUSH
50813: LD_EXP 81
50817: PUSH
50818: LD_EXP 82
50822: PUSH
50823: LD_EXP 83
50827: PUSH
50828: LD_EXP 84
50832: PUSH
50833: LD_EXP 49
50837: PUSH
50838: LD_EXP 50
50842: PUSH
50843: LD_EXP 53
50847: PUSH
50848: LD_EXP 54
50852: PUSH
50853: LD_EXP 55
50857: PUSH
50858: LD_EXP 51
50862: PUSH
50863: LD_EXP 52
50867: PUSH
50868: LD_EXP 60
50872: PUSH
50873: LD_EXP 64
50877: PUSH
50878: LD_EXP 65
50882: PUSH
50883: LD_EXP 67
50887: PUSH
50888: LD_EXP 71
50892: PUSH
50893: LD_EXP 74
50897: PUSH
50898: LD_EXP 75
50902: PUSH
50903: LD_EXP 85
50907: PUSH
50908: LD_EXP 86
50912: PUSH
50913: LD_EXP 87
50917: PUSH
50918: LD_EXP 88
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: ST_TO_ADDR
// tmp :=  ;
50979: LD_ADDR_VAR 0 3
50983: PUSH
50984: LD_STRING 
50986: ST_TO_ADDR
// for i = 1 to normalCounter do
50987: LD_ADDR_VAR 0 8
50991: PUSH
50992: DOUBLE
50993: LD_INT 1
50995: DEC
50996: ST_TO_ADDR
50997: LD_EXP 33
51001: PUSH
51002: FOR_TO
51003: IFFALSE 51039
// begin if flags [ i ] then
51005: LD_VAR 0 4
51009: PUSH
51010: LD_VAR 0 8
51014: ARRAY
51015: IFFALSE 51037
// tmp := tmp & i & ; ;
51017: LD_ADDR_VAR 0 3
51021: PUSH
51022: LD_VAR 0 3
51026: PUSH
51027: LD_VAR 0 8
51031: STR
51032: PUSH
51033: LD_STRING ;
51035: STR
51036: ST_TO_ADDR
// end ;
51037: GO 51002
51039: POP
51040: POP
// for i = 1 to hardcoreCounter do
51041: LD_ADDR_VAR 0 8
51045: PUSH
51046: DOUBLE
51047: LD_INT 1
51049: DEC
51050: ST_TO_ADDR
51051: LD_EXP 34
51055: PUSH
51056: FOR_TO
51057: IFFALSE 51103
// begin if flags [ normalCounter + i ] then
51059: LD_VAR 0 4
51063: PUSH
51064: LD_EXP 33
51068: PUSH
51069: LD_VAR 0 8
51073: PLUS
51074: ARRAY
51075: IFFALSE 51101
// tmp := tmp & ( 100 + i ) & ; ;
51077: LD_ADDR_VAR 0 3
51081: PUSH
51082: LD_VAR 0 3
51086: PUSH
51087: LD_INT 100
51089: PUSH
51090: LD_VAR 0 8
51094: PLUS
51095: STR
51096: PUSH
51097: LD_STRING ;
51099: STR
51100: ST_TO_ADDR
// end ;
51101: GO 51056
51103: POP
51104: POP
// if tmp then
51105: LD_VAR 0 3
51109: IFFALSE 51121
// active := tmp ;
51111: LD_ADDR_VAR 0 7
51115: PUSH
51116: LD_VAR 0 3
51120: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
51121: LD_STRING getStreamItemsFromMission("
51123: PUSH
51124: LD_VAR 0 5
51128: STR
51129: PUSH
51130: LD_STRING ","
51132: STR
51133: PUSH
51134: LD_VAR 0 6
51138: STR
51139: PUSH
51140: LD_STRING ","
51142: STR
51143: PUSH
51144: LD_VAR 0 7
51148: STR
51149: PUSH
51150: LD_STRING ")
51152: STR
51153: PPUSH
51154: CALL_OW 559
// end else
51158: GO 51167
// ToLua ( getStreamItemsFromMission("","","") ) ;
51160: LD_STRING getStreamItemsFromMission("","","")
51162: PPUSH
51163: CALL_OW 559
// end ;
51167: LD_VAR 0 2
51171: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
51172: LD_EXP 32
51176: PUSH
51177: LD_EXP 37
51181: AND
51182: IFFALSE 51306
51184: GO 51186
51186: DISABLE
51187: LD_INT 0
51189: PPUSH
51190: PPUSH
// begin enable ;
51191: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
51192: LD_ADDR_VAR 0 2
51196: PUSH
51197: LD_INT 22
51199: PUSH
51200: LD_OWVAR 2
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: LD_INT 34
51214: PUSH
51215: LD_INT 7
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 34
51224: PUSH
51225: LD_INT 45
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 34
51234: PUSH
51235: LD_INT 28
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 34
51244: PUSH
51245: LD_INT 47
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PPUSH
51263: CALL_OW 69
51267: ST_TO_ADDR
// if not tmp then
51268: LD_VAR 0 2
51272: NOT
51273: IFFALSE 51277
// exit ;
51275: GO 51306
// for i in tmp do
51277: LD_ADDR_VAR 0 1
51281: PUSH
51282: LD_VAR 0 2
51286: PUSH
51287: FOR_IN
51288: IFFALSE 51304
// begin SetLives ( i , 0 ) ;
51290: LD_VAR 0 1
51294: PPUSH
51295: LD_INT 0
51297: PPUSH
51298: CALL_OW 234
// end ;
51302: GO 51287
51304: POP
51305: POP
// end ;
51306: PPOPN 2
51308: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
51309: LD_EXP 32
51313: PUSH
51314: LD_EXP 38
51318: AND
51319: IFFALSE 51403
51321: GO 51323
51323: DISABLE
51324: LD_INT 0
51326: PPUSH
51327: PPUSH
// begin enable ;
51328: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
51329: LD_ADDR_VAR 0 2
51333: PUSH
51334: LD_INT 22
51336: PUSH
51337: LD_OWVAR 2
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 32
51348: PUSH
51349: LD_INT 3
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PPUSH
51360: CALL_OW 69
51364: ST_TO_ADDR
// if not tmp then
51365: LD_VAR 0 2
51369: NOT
51370: IFFALSE 51374
// exit ;
51372: GO 51403
// for i in tmp do
51374: LD_ADDR_VAR 0 1
51378: PUSH
51379: LD_VAR 0 2
51383: PUSH
51384: FOR_IN
51385: IFFALSE 51401
// begin SetLives ( i , 0 ) ;
51387: LD_VAR 0 1
51391: PPUSH
51392: LD_INT 0
51394: PPUSH
51395: CALL_OW 234
// end ;
51399: GO 51384
51401: POP
51402: POP
// end ;
51403: PPOPN 2
51405: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
51406: LD_EXP 32
51410: PUSH
51411: LD_EXP 35
51415: AND
51416: IFFALSE 51509
51418: GO 51420
51420: DISABLE
51421: LD_INT 0
51423: PPUSH
// begin enable ;
51424: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
51425: LD_ADDR_VAR 0 1
51429: PUSH
51430: LD_INT 22
51432: PUSH
51433: LD_OWVAR 2
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 2
51444: PUSH
51445: LD_INT 25
51447: PUSH
51448: LD_INT 5
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 25
51457: PUSH
51458: LD_INT 9
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 25
51467: PUSH
51468: LD_INT 8
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PPUSH
51485: CALL_OW 69
51489: PUSH
51490: FOR_IN
51491: IFFALSE 51507
// begin SetClass ( i , 1 ) ;
51493: LD_VAR 0 1
51497: PPUSH
51498: LD_INT 1
51500: PPUSH
51501: CALL_OW 336
// end ;
51505: GO 51490
51507: POP
51508: POP
// end ;
51509: PPOPN 1
51511: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
51512: LD_EXP 32
51516: PUSH
51517: LD_EXP 36
51521: AND
51522: PUSH
51523: LD_OWVAR 65
51527: PUSH
51528: LD_INT 7
51530: LESS
51531: AND
51532: IFFALSE 51546
51534: GO 51536
51536: DISABLE
// begin enable ;
51537: ENABLE
// game_speed := 7 ;
51538: LD_ADDR_OWVAR 65
51542: PUSH
51543: LD_INT 7
51545: ST_TO_ADDR
// end ;
51546: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
51547: LD_EXP 32
51551: PUSH
51552: LD_EXP 39
51556: AND
51557: IFFALSE 51759
51559: GO 51561
51561: DISABLE
51562: LD_INT 0
51564: PPUSH
51565: PPUSH
51566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
51567: LD_ADDR_VAR 0 3
51571: PUSH
51572: LD_INT 81
51574: PUSH
51575: LD_OWVAR 2
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 21
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PPUSH
51598: CALL_OW 69
51602: ST_TO_ADDR
// if not tmp then
51603: LD_VAR 0 3
51607: NOT
51608: IFFALSE 51612
// exit ;
51610: GO 51759
// if tmp > 5 then
51612: LD_VAR 0 3
51616: PUSH
51617: LD_INT 5
51619: GREATER
51620: IFFALSE 51632
// k := 5 else
51622: LD_ADDR_VAR 0 2
51626: PUSH
51627: LD_INT 5
51629: ST_TO_ADDR
51630: GO 51642
// k := tmp ;
51632: LD_ADDR_VAR 0 2
51636: PUSH
51637: LD_VAR 0 3
51641: ST_TO_ADDR
// for i := 1 to k do
51642: LD_ADDR_VAR 0 1
51646: PUSH
51647: DOUBLE
51648: LD_INT 1
51650: DEC
51651: ST_TO_ADDR
51652: LD_VAR 0 2
51656: PUSH
51657: FOR_TO
51658: IFFALSE 51757
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
51660: LD_VAR 0 3
51664: PUSH
51665: LD_VAR 0 1
51669: ARRAY
51670: PPUSH
51671: LD_VAR 0 1
51675: PUSH
51676: LD_INT 4
51678: MOD
51679: PUSH
51680: LD_INT 1
51682: PLUS
51683: PPUSH
51684: CALL_OW 259
51688: PUSH
51689: LD_INT 10
51691: LESS
51692: IFFALSE 51755
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
51694: LD_VAR 0 3
51698: PUSH
51699: LD_VAR 0 1
51703: ARRAY
51704: PPUSH
51705: LD_VAR 0 1
51709: PUSH
51710: LD_INT 4
51712: MOD
51713: PUSH
51714: LD_INT 1
51716: PLUS
51717: PPUSH
51718: LD_VAR 0 3
51722: PUSH
51723: LD_VAR 0 1
51727: ARRAY
51728: PPUSH
51729: LD_VAR 0 1
51733: PUSH
51734: LD_INT 4
51736: MOD
51737: PUSH
51738: LD_INT 1
51740: PLUS
51741: PPUSH
51742: CALL_OW 259
51746: PUSH
51747: LD_INT 1
51749: PLUS
51750: PPUSH
51751: CALL_OW 237
51755: GO 51657
51757: POP
51758: POP
// end ;
51759: PPOPN 3
51761: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
51762: LD_EXP 32
51766: PUSH
51767: LD_EXP 40
51771: AND
51772: IFFALSE 51792
51774: GO 51776
51776: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
51777: LD_INT 4
51779: PPUSH
51780: LD_OWVAR 2
51784: PPUSH
51785: LD_INT 0
51787: PPUSH
51788: CALL_OW 324
51792: END
// every 0 0$1 trigger StreamModeActive and sShovel do
51793: LD_EXP 32
51797: PUSH
51798: LD_EXP 69
51802: AND
51803: IFFALSE 51823
51805: GO 51807
51807: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
51808: LD_INT 19
51810: PPUSH
51811: LD_OWVAR 2
51815: PPUSH
51816: LD_INT 0
51818: PPUSH
51819: CALL_OW 324
51823: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
51824: LD_EXP 32
51828: PUSH
51829: LD_EXP 41
51833: AND
51834: IFFALSE 51936
51836: GO 51838
51838: DISABLE
51839: LD_INT 0
51841: PPUSH
51842: PPUSH
// begin enable ;
51843: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
51844: LD_ADDR_VAR 0 2
51848: PUSH
51849: LD_INT 22
51851: PUSH
51852: LD_OWVAR 2
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 2
51863: PUSH
51864: LD_INT 34
51866: PUSH
51867: LD_INT 11
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 34
51876: PUSH
51877: LD_INT 30
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: LIST
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PPUSH
51893: CALL_OW 69
51897: ST_TO_ADDR
// if not tmp then
51898: LD_VAR 0 2
51902: NOT
51903: IFFALSE 51907
// exit ;
51905: GO 51936
// for i in tmp do
51907: LD_ADDR_VAR 0 1
51911: PUSH
51912: LD_VAR 0 2
51916: PUSH
51917: FOR_IN
51918: IFFALSE 51934
// begin SetLives ( i , 0 ) ;
51920: LD_VAR 0 1
51924: PPUSH
51925: LD_INT 0
51927: PPUSH
51928: CALL_OW 234
// end ;
51932: GO 51917
51934: POP
51935: POP
// end ;
51936: PPOPN 2
51938: END
// every 0 0$1 trigger StreamModeActive and sBunker do
51939: LD_EXP 32
51943: PUSH
51944: LD_EXP 42
51948: AND
51949: IFFALSE 51969
51951: GO 51953
51953: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
51954: LD_INT 32
51956: PPUSH
51957: LD_OWVAR 2
51961: PPUSH
51962: LD_INT 0
51964: PPUSH
51965: CALL_OW 324
51969: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
51970: LD_EXP 32
51974: PUSH
51975: LD_EXP 43
51979: AND
51980: IFFALSE 52161
51982: GO 51984
51984: DISABLE
51985: LD_INT 0
51987: PPUSH
51988: PPUSH
51989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
51990: LD_ADDR_VAR 0 2
51994: PUSH
51995: LD_INT 22
51997: PUSH
51998: LD_OWVAR 2
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 33
52009: PUSH
52010: LD_INT 3
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PPUSH
52021: CALL_OW 69
52025: ST_TO_ADDR
// if not tmp then
52026: LD_VAR 0 2
52030: NOT
52031: IFFALSE 52035
// exit ;
52033: GO 52161
// side := 0 ;
52035: LD_ADDR_VAR 0 3
52039: PUSH
52040: LD_INT 0
52042: ST_TO_ADDR
// for i := 1 to 8 do
52043: LD_ADDR_VAR 0 1
52047: PUSH
52048: DOUBLE
52049: LD_INT 1
52051: DEC
52052: ST_TO_ADDR
52053: LD_INT 8
52055: PUSH
52056: FOR_TO
52057: IFFALSE 52105
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
52059: LD_OWVAR 2
52063: PUSH
52064: LD_VAR 0 1
52068: NONEQUAL
52069: PUSH
52070: LD_OWVAR 2
52074: PPUSH
52075: LD_VAR 0 1
52079: PPUSH
52080: CALL_OW 81
52084: PUSH
52085: LD_INT 2
52087: EQUAL
52088: AND
52089: IFFALSE 52103
// begin side := i ;
52091: LD_ADDR_VAR 0 3
52095: PUSH
52096: LD_VAR 0 1
52100: ST_TO_ADDR
// break ;
52101: GO 52105
// end ;
52103: GO 52056
52105: POP
52106: POP
// if not side then
52107: LD_VAR 0 3
52111: NOT
52112: IFFALSE 52116
// exit ;
52114: GO 52161
// for i := 1 to tmp do
52116: LD_ADDR_VAR 0 1
52120: PUSH
52121: DOUBLE
52122: LD_INT 1
52124: DEC
52125: ST_TO_ADDR
52126: LD_VAR 0 2
52130: PUSH
52131: FOR_TO
52132: IFFALSE 52159
// if Prob ( 60 ) then
52134: LD_INT 60
52136: PPUSH
52137: CALL_OW 13
52141: IFFALSE 52157
// SetSide ( i , side ) ;
52143: LD_VAR 0 1
52147: PPUSH
52148: LD_VAR 0 3
52152: PPUSH
52153: CALL_OW 235
52157: GO 52131
52159: POP
52160: POP
// end ;
52161: PPOPN 3
52163: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
52164: LD_EXP 32
52168: PUSH
52169: LD_EXP 45
52173: AND
52174: IFFALSE 52293
52176: GO 52178
52178: DISABLE
52179: LD_INT 0
52181: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
52182: LD_ADDR_VAR 0 1
52186: PUSH
52187: LD_INT 22
52189: PUSH
52190: LD_OWVAR 2
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 21
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 3
52211: PUSH
52212: LD_INT 23
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: LIST
52230: PPUSH
52231: CALL_OW 69
52235: PUSH
52236: FOR_IN
52237: IFFALSE 52291
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
52239: LD_VAR 0 1
52243: PPUSH
52244: CALL_OW 257
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: LD_INT 3
52257: PUSH
52258: LD_INT 4
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: IN
52267: IFFALSE 52289
// SetClass ( un , rand ( 1 , 4 ) ) ;
52269: LD_VAR 0 1
52273: PPUSH
52274: LD_INT 1
52276: PPUSH
52277: LD_INT 4
52279: PPUSH
52280: CALL_OW 12
52284: PPUSH
52285: CALL_OW 336
52289: GO 52236
52291: POP
52292: POP
// end ;
52293: PPOPN 1
52295: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
52296: LD_EXP 32
52300: PUSH
52301: LD_EXP 44
52305: AND
52306: IFFALSE 52385
52308: GO 52310
52310: DISABLE
52311: LD_INT 0
52313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52314: LD_ADDR_VAR 0 1
52318: PUSH
52319: LD_INT 22
52321: PUSH
52322: LD_OWVAR 2
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 21
52333: PUSH
52334: LD_INT 3
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PPUSH
52345: CALL_OW 69
52349: ST_TO_ADDR
// if not tmp then
52350: LD_VAR 0 1
52354: NOT
52355: IFFALSE 52359
// exit ;
52357: GO 52385
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
52359: LD_VAR 0 1
52363: PUSH
52364: LD_INT 1
52366: PPUSH
52367: LD_VAR 0 1
52371: PPUSH
52372: CALL_OW 12
52376: ARRAY
52377: PPUSH
52378: LD_INT 100
52380: PPUSH
52381: CALL_OW 234
// end ;
52385: PPOPN 1
52387: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
52388: LD_EXP 32
52392: PUSH
52393: LD_EXP 46
52397: AND
52398: IFFALSE 52496
52400: GO 52402
52402: DISABLE
52403: LD_INT 0
52405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52406: LD_ADDR_VAR 0 1
52410: PUSH
52411: LD_INT 22
52413: PUSH
52414: LD_OWVAR 2
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 21
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PPUSH
52437: CALL_OW 69
52441: ST_TO_ADDR
// if not tmp then
52442: LD_VAR 0 1
52446: NOT
52447: IFFALSE 52451
// exit ;
52449: GO 52496
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
52451: LD_VAR 0 1
52455: PUSH
52456: LD_INT 1
52458: PPUSH
52459: LD_VAR 0 1
52463: PPUSH
52464: CALL_OW 12
52468: ARRAY
52469: PPUSH
52470: LD_INT 1
52472: PPUSH
52473: LD_INT 4
52475: PPUSH
52476: CALL_OW 12
52480: PPUSH
52481: LD_INT 3000
52483: PPUSH
52484: LD_INT 9000
52486: PPUSH
52487: CALL_OW 12
52491: PPUSH
52492: CALL_OW 492
// end ;
52496: PPOPN 1
52498: END
// every 0 0$1 trigger StreamModeActive and sDepot do
52499: LD_EXP 32
52503: PUSH
52504: LD_EXP 47
52508: AND
52509: IFFALSE 52529
52511: GO 52513
52513: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
52514: LD_INT 1
52516: PPUSH
52517: LD_OWVAR 2
52521: PPUSH
52522: LD_INT 0
52524: PPUSH
52525: CALL_OW 324
52529: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
52530: LD_EXP 32
52534: PUSH
52535: LD_EXP 48
52539: AND
52540: IFFALSE 52623
52542: GO 52544
52544: DISABLE
52545: LD_INT 0
52547: PPUSH
52548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52549: LD_ADDR_VAR 0 2
52553: PUSH
52554: LD_INT 22
52556: PUSH
52557: LD_OWVAR 2
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 21
52568: PUSH
52569: LD_INT 3
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PPUSH
52580: CALL_OW 69
52584: ST_TO_ADDR
// if not tmp then
52585: LD_VAR 0 2
52589: NOT
52590: IFFALSE 52594
// exit ;
52592: GO 52623
// for i in tmp do
52594: LD_ADDR_VAR 0 1
52598: PUSH
52599: LD_VAR 0 2
52603: PUSH
52604: FOR_IN
52605: IFFALSE 52621
// SetBLevel ( i , 10 ) ;
52607: LD_VAR 0 1
52611: PPUSH
52612: LD_INT 10
52614: PPUSH
52615: CALL_OW 241
52619: GO 52604
52621: POP
52622: POP
// end ;
52623: PPOPN 2
52625: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
52626: LD_EXP 32
52630: PUSH
52631: LD_EXP 49
52635: AND
52636: IFFALSE 52747
52638: GO 52640
52640: DISABLE
52641: LD_INT 0
52643: PPUSH
52644: PPUSH
52645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52646: LD_ADDR_VAR 0 3
52650: PUSH
52651: LD_INT 22
52653: PUSH
52654: LD_OWVAR 2
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 25
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PPUSH
52677: CALL_OW 69
52681: ST_TO_ADDR
// if not tmp then
52682: LD_VAR 0 3
52686: NOT
52687: IFFALSE 52691
// exit ;
52689: GO 52747
// un := tmp [ rand ( 1 , tmp ) ] ;
52691: LD_ADDR_VAR 0 2
52695: PUSH
52696: LD_VAR 0 3
52700: PUSH
52701: LD_INT 1
52703: PPUSH
52704: LD_VAR 0 3
52708: PPUSH
52709: CALL_OW 12
52713: ARRAY
52714: ST_TO_ADDR
// if Crawls ( un ) then
52715: LD_VAR 0 2
52719: PPUSH
52720: CALL_OW 318
52724: IFFALSE 52735
// ComWalk ( un ) ;
52726: LD_VAR 0 2
52730: PPUSH
52731: CALL_OW 138
// SetClass ( un , class_sniper ) ;
52735: LD_VAR 0 2
52739: PPUSH
52740: LD_INT 5
52742: PPUSH
52743: CALL_OW 336
// end ;
52747: PPOPN 3
52749: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
52750: LD_EXP 32
52754: PUSH
52755: LD_EXP 50
52759: AND
52760: PUSH
52761: LD_OWVAR 67
52765: PUSH
52766: LD_INT 4
52768: LESS
52769: AND
52770: IFFALSE 52789
52772: GO 52774
52774: DISABLE
// begin Difficulty := Difficulty + 1 ;
52775: LD_ADDR_OWVAR 67
52779: PUSH
52780: LD_OWVAR 67
52784: PUSH
52785: LD_INT 1
52787: PLUS
52788: ST_TO_ADDR
// end ;
52789: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
52790: LD_EXP 32
52794: PUSH
52795: LD_EXP 51
52799: AND
52800: IFFALSE 52903
52802: GO 52804
52804: DISABLE
52805: LD_INT 0
52807: PPUSH
// begin for i := 1 to 5 do
52808: LD_ADDR_VAR 0 1
52812: PUSH
52813: DOUBLE
52814: LD_INT 1
52816: DEC
52817: ST_TO_ADDR
52818: LD_INT 5
52820: PUSH
52821: FOR_TO
52822: IFFALSE 52901
// begin uc_nation := nation_nature ;
52824: LD_ADDR_OWVAR 21
52828: PUSH
52829: LD_INT 0
52831: ST_TO_ADDR
// uc_side := 0 ;
52832: LD_ADDR_OWVAR 20
52836: PUSH
52837: LD_INT 0
52839: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
52840: LD_ADDR_OWVAR 29
52844: PUSH
52845: LD_INT 12
52847: PUSH
52848: LD_INT 12
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: ST_TO_ADDR
// hc_agressivity := 20 ;
52855: LD_ADDR_OWVAR 35
52859: PUSH
52860: LD_INT 20
52862: ST_TO_ADDR
// hc_class := class_tiger ;
52863: LD_ADDR_OWVAR 28
52867: PUSH
52868: LD_INT 14
52870: ST_TO_ADDR
// hc_gallery :=  ;
52871: LD_ADDR_OWVAR 33
52875: PUSH
52876: LD_STRING 
52878: ST_TO_ADDR
// hc_name :=  ;
52879: LD_ADDR_OWVAR 26
52883: PUSH
52884: LD_STRING 
52886: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
52887: CALL_OW 44
52891: PPUSH
52892: LD_INT 0
52894: PPUSH
52895: CALL_OW 51
// end ;
52899: GO 52821
52901: POP
52902: POP
// end ;
52903: PPOPN 1
52905: END
// every 0 0$1 trigger StreamModeActive and sBomb do
52906: LD_EXP 32
52910: PUSH
52911: LD_EXP 52
52915: AND
52916: IFFALSE 52925
52918: GO 52920
52920: DISABLE
// StreamSibBomb ;
52921: CALL 52926 0 0
52925: END
// export function StreamSibBomb ; var i , x , y ; begin
52926: LD_INT 0
52928: PPUSH
52929: PPUSH
52930: PPUSH
52931: PPUSH
// result := false ;
52932: LD_ADDR_VAR 0 1
52936: PUSH
52937: LD_INT 0
52939: ST_TO_ADDR
// for i := 1 to 16 do
52940: LD_ADDR_VAR 0 2
52944: PUSH
52945: DOUBLE
52946: LD_INT 1
52948: DEC
52949: ST_TO_ADDR
52950: LD_INT 16
52952: PUSH
52953: FOR_TO
52954: IFFALSE 53153
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
52956: LD_ADDR_VAR 0 3
52960: PUSH
52961: LD_INT 10
52963: PUSH
52964: LD_INT 20
52966: PUSH
52967: LD_INT 30
52969: PUSH
52970: LD_INT 40
52972: PUSH
52973: LD_INT 50
52975: PUSH
52976: LD_INT 60
52978: PUSH
52979: LD_INT 70
52981: PUSH
52982: LD_INT 80
52984: PUSH
52985: LD_INT 90
52987: PUSH
52988: LD_INT 100
52990: PUSH
52991: LD_INT 110
52993: PUSH
52994: LD_INT 120
52996: PUSH
52997: LD_INT 130
52999: PUSH
53000: LD_INT 140
53002: PUSH
53003: LD_INT 150
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: PPUSH
53026: LD_INT 15
53028: PPUSH
53029: CALL_OW 12
53033: ARRAY
53034: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53035: LD_ADDR_VAR 0 4
53039: PUSH
53040: LD_INT 10
53042: PUSH
53043: LD_INT 20
53045: PUSH
53046: LD_INT 30
53048: PUSH
53049: LD_INT 40
53051: PUSH
53052: LD_INT 50
53054: PUSH
53055: LD_INT 60
53057: PUSH
53058: LD_INT 70
53060: PUSH
53061: LD_INT 80
53063: PUSH
53064: LD_INT 90
53066: PUSH
53067: LD_INT 100
53069: PUSH
53070: LD_INT 110
53072: PUSH
53073: LD_INT 120
53075: PUSH
53076: LD_INT 130
53078: PUSH
53079: LD_INT 140
53081: PUSH
53082: LD_INT 150
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PPUSH
53105: LD_INT 15
53107: PPUSH
53108: CALL_OW 12
53112: ARRAY
53113: ST_TO_ADDR
// if ValidHex ( x , y ) then
53114: LD_VAR 0 3
53118: PPUSH
53119: LD_VAR 0 4
53123: PPUSH
53124: CALL_OW 488
53128: IFFALSE 53151
// begin result := [ x , y ] ;
53130: LD_ADDR_VAR 0 1
53134: PUSH
53135: LD_VAR 0 3
53139: PUSH
53140: LD_VAR 0 4
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: ST_TO_ADDR
// break ;
53149: GO 53153
// end ; end ;
53151: GO 52953
53153: POP
53154: POP
// if result then
53155: LD_VAR 0 1
53159: IFFALSE 53219
// begin ToLua ( playSibBomb() ) ;
53161: LD_STRING playSibBomb()
53163: PPUSH
53164: CALL_OW 559
// wait ( 0 0$14 ) ;
53168: LD_INT 490
53170: PPUSH
53171: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
53175: LD_VAR 0 1
53179: PUSH
53180: LD_INT 1
53182: ARRAY
53183: PPUSH
53184: LD_VAR 0 1
53188: PUSH
53189: LD_INT 2
53191: ARRAY
53192: PPUSH
53193: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
53197: LD_VAR 0 1
53201: PUSH
53202: LD_INT 1
53204: ARRAY
53205: PPUSH
53206: LD_VAR 0 1
53210: PUSH
53211: LD_INT 2
53213: ARRAY
53214: PPUSH
53215: CALL_OW 429
// end ; end ;
53219: LD_VAR 0 1
53223: RET
// every 0 0$1 trigger StreamModeActive and sReset do
53224: LD_EXP 32
53228: PUSH
53229: LD_EXP 54
53233: AND
53234: IFFALSE 53246
53236: GO 53238
53238: DISABLE
// YouLost (  ) ;
53239: LD_STRING 
53241: PPUSH
53242: CALL_OW 104
53246: END
// every 0 0$1 trigger StreamModeActive and sFog do
53247: LD_EXP 32
53251: PUSH
53252: LD_EXP 53
53256: AND
53257: IFFALSE 53271
53259: GO 53261
53261: DISABLE
// FogOff ( your_side ) ;
53262: LD_OWVAR 2
53266: PPUSH
53267: CALL_OW 344
53271: END
// every 0 0$1 trigger StreamModeActive and sSun do
53272: LD_EXP 32
53276: PUSH
53277: LD_EXP 55
53281: AND
53282: IFFALSE 53310
53284: GO 53286
53286: DISABLE
// begin solar_recharge_percent := 0 ;
53287: LD_ADDR_OWVAR 79
53291: PUSH
53292: LD_INT 0
53294: ST_TO_ADDR
// wait ( 5 5$00 ) ;
53295: LD_INT 10500
53297: PPUSH
53298: CALL_OW 67
// solar_recharge_percent := 100 ;
53302: LD_ADDR_OWVAR 79
53306: PUSH
53307: LD_INT 100
53309: ST_TO_ADDR
// end ;
53310: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
53311: LD_EXP 32
53315: PUSH
53316: LD_EXP 56
53320: AND
53321: IFFALSE 53560
53323: GO 53325
53325: DISABLE
53326: LD_INT 0
53328: PPUSH
53329: PPUSH
53330: PPUSH
// begin tmp := [ ] ;
53331: LD_ADDR_VAR 0 3
53335: PUSH
53336: EMPTY
53337: ST_TO_ADDR
// for i := 1 to 6 do
53338: LD_ADDR_VAR 0 1
53342: PUSH
53343: DOUBLE
53344: LD_INT 1
53346: DEC
53347: ST_TO_ADDR
53348: LD_INT 6
53350: PUSH
53351: FOR_TO
53352: IFFALSE 53457
// begin uc_nation := nation_nature ;
53354: LD_ADDR_OWVAR 21
53358: PUSH
53359: LD_INT 0
53361: ST_TO_ADDR
// uc_side := 0 ;
53362: LD_ADDR_OWVAR 20
53366: PUSH
53367: LD_INT 0
53369: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53370: LD_ADDR_OWVAR 29
53374: PUSH
53375: LD_INT 12
53377: PUSH
53378: LD_INT 12
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: ST_TO_ADDR
// hc_agressivity := 20 ;
53385: LD_ADDR_OWVAR 35
53389: PUSH
53390: LD_INT 20
53392: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
53393: LD_ADDR_OWVAR 28
53397: PUSH
53398: LD_INT 17
53400: ST_TO_ADDR
// hc_gallery :=  ;
53401: LD_ADDR_OWVAR 33
53405: PUSH
53406: LD_STRING 
53408: ST_TO_ADDR
// hc_name :=  ;
53409: LD_ADDR_OWVAR 26
53413: PUSH
53414: LD_STRING 
53416: ST_TO_ADDR
// un := CreateHuman ;
53417: LD_ADDR_VAR 0 2
53421: PUSH
53422: CALL_OW 44
53426: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
53427: LD_VAR 0 2
53431: PPUSH
53432: LD_INT 1
53434: PPUSH
53435: CALL_OW 51
// tmp := tmp ^ un ;
53439: LD_ADDR_VAR 0 3
53443: PUSH
53444: LD_VAR 0 3
53448: PUSH
53449: LD_VAR 0 2
53453: ADD
53454: ST_TO_ADDR
// end ;
53455: GO 53351
53457: POP
53458: POP
// repeat wait ( 0 0$1 ) ;
53459: LD_INT 35
53461: PPUSH
53462: CALL_OW 67
// for un in tmp do
53466: LD_ADDR_VAR 0 2
53470: PUSH
53471: LD_VAR 0 3
53475: PUSH
53476: FOR_IN
53477: IFFALSE 53551
// begin if IsDead ( un ) then
53479: LD_VAR 0 2
53483: PPUSH
53484: CALL_OW 301
53488: IFFALSE 53508
// begin tmp := tmp diff un ;
53490: LD_ADDR_VAR 0 3
53494: PUSH
53495: LD_VAR 0 3
53499: PUSH
53500: LD_VAR 0 2
53504: DIFF
53505: ST_TO_ADDR
// continue ;
53506: GO 53476
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
53508: LD_VAR 0 2
53512: PPUSH
53513: LD_INT 3
53515: PUSH
53516: LD_INT 22
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PPUSH
53530: CALL_OW 69
53534: PPUSH
53535: LD_VAR 0 2
53539: PPUSH
53540: CALL_OW 74
53544: PPUSH
53545: CALL_OW 115
// end ;
53549: GO 53476
53551: POP
53552: POP
// until not tmp ;
53553: LD_VAR 0 3
53557: NOT
53558: IFFALSE 53459
// end ;
53560: PPOPN 3
53562: END
// every 0 0$1 trigger StreamModeActive and sTroll do
53563: LD_EXP 32
53567: PUSH
53568: LD_EXP 57
53572: AND
53573: IFFALSE 53627
53575: GO 53577
53577: DISABLE
// begin ToLua ( displayTroll(); ) ;
53578: LD_STRING displayTroll();
53580: PPUSH
53581: CALL_OW 559
// wait ( 3 3$00 ) ;
53585: LD_INT 6300
53587: PPUSH
53588: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53592: LD_STRING hideTroll();
53594: PPUSH
53595: CALL_OW 559
// wait ( 1 1$00 ) ;
53599: LD_INT 2100
53601: PPUSH
53602: CALL_OW 67
// ToLua ( displayTroll(); ) ;
53606: LD_STRING displayTroll();
53608: PPUSH
53609: CALL_OW 559
// wait ( 1 1$00 ) ;
53613: LD_INT 2100
53615: PPUSH
53616: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53620: LD_STRING hideTroll();
53622: PPUSH
53623: CALL_OW 559
// end ;
53627: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
53628: LD_EXP 32
53632: PUSH
53633: LD_EXP 58
53637: AND
53638: IFFALSE 53701
53640: GO 53642
53642: DISABLE
53643: LD_INT 0
53645: PPUSH
// begin p := 0 ;
53646: LD_ADDR_VAR 0 1
53650: PUSH
53651: LD_INT 0
53653: ST_TO_ADDR
// repeat game_speed := 1 ;
53654: LD_ADDR_OWVAR 65
53658: PUSH
53659: LD_INT 1
53661: ST_TO_ADDR
// wait ( 0 0$1 ) ;
53662: LD_INT 35
53664: PPUSH
53665: CALL_OW 67
// p := p + 1 ;
53669: LD_ADDR_VAR 0 1
53673: PUSH
53674: LD_VAR 0 1
53678: PUSH
53679: LD_INT 1
53681: PLUS
53682: ST_TO_ADDR
// until p >= 60 ;
53683: LD_VAR 0 1
53687: PUSH
53688: LD_INT 60
53690: GREATEREQUAL
53691: IFFALSE 53654
// game_speed := 4 ;
53693: LD_ADDR_OWVAR 65
53697: PUSH
53698: LD_INT 4
53700: ST_TO_ADDR
// end ;
53701: PPOPN 1
53703: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
53704: LD_EXP 32
53708: PUSH
53709: LD_EXP 59
53713: AND
53714: IFFALSE 53860
53716: GO 53718
53718: DISABLE
53719: LD_INT 0
53721: PPUSH
53722: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53723: LD_ADDR_VAR 0 1
53727: PUSH
53728: LD_INT 22
53730: PUSH
53731: LD_OWVAR 2
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: LD_INT 30
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 30
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: LIST
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PPUSH
53772: CALL_OW 69
53776: ST_TO_ADDR
// if not depot then
53777: LD_VAR 0 1
53781: NOT
53782: IFFALSE 53786
// exit ;
53784: GO 53860
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
53786: LD_ADDR_VAR 0 2
53790: PUSH
53791: LD_VAR 0 1
53795: PUSH
53796: LD_INT 1
53798: PPUSH
53799: LD_VAR 0 1
53803: PPUSH
53804: CALL_OW 12
53808: ARRAY
53809: PPUSH
53810: CALL_OW 274
53814: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
53815: LD_VAR 0 2
53819: PPUSH
53820: LD_INT 1
53822: PPUSH
53823: LD_INT 0
53825: PPUSH
53826: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
53830: LD_VAR 0 2
53834: PPUSH
53835: LD_INT 2
53837: PPUSH
53838: LD_INT 0
53840: PPUSH
53841: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
53845: LD_VAR 0 2
53849: PPUSH
53850: LD_INT 3
53852: PPUSH
53853: LD_INT 0
53855: PPUSH
53856: CALL_OW 277
// end ;
53860: PPOPN 2
53862: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
53863: LD_EXP 32
53867: PUSH
53868: LD_EXP 60
53872: AND
53873: IFFALSE 53970
53875: GO 53877
53877: DISABLE
53878: LD_INT 0
53880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53881: LD_ADDR_VAR 0 1
53885: PUSH
53886: LD_INT 22
53888: PUSH
53889: LD_OWVAR 2
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 21
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 3
53910: PUSH
53911: LD_INT 23
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: LIST
53929: PPUSH
53930: CALL_OW 69
53934: ST_TO_ADDR
// if not tmp then
53935: LD_VAR 0 1
53939: NOT
53940: IFFALSE 53944
// exit ;
53942: GO 53970
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
53944: LD_VAR 0 1
53948: PUSH
53949: LD_INT 1
53951: PPUSH
53952: LD_VAR 0 1
53956: PPUSH
53957: CALL_OW 12
53961: ARRAY
53962: PPUSH
53963: LD_INT 200
53965: PPUSH
53966: CALL_OW 234
// end ;
53970: PPOPN 1
53972: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
53973: LD_EXP 32
53977: PUSH
53978: LD_EXP 61
53982: AND
53983: IFFALSE 54062
53985: GO 53987
53987: DISABLE
53988: LD_INT 0
53990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
53991: LD_ADDR_VAR 0 1
53995: PUSH
53996: LD_INT 22
53998: PUSH
53999: LD_OWVAR 2
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 21
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PPUSH
54022: CALL_OW 69
54026: ST_TO_ADDR
// if not tmp then
54027: LD_VAR 0 1
54031: NOT
54032: IFFALSE 54036
// exit ;
54034: GO 54062
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
54036: LD_VAR 0 1
54040: PUSH
54041: LD_INT 1
54043: PPUSH
54044: LD_VAR 0 1
54048: PPUSH
54049: CALL_OW 12
54053: ARRAY
54054: PPUSH
54055: LD_INT 60
54057: PPUSH
54058: CALL_OW 234
// end ;
54062: PPOPN 1
54064: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
54065: LD_EXP 32
54069: PUSH
54070: LD_EXP 62
54074: AND
54075: IFFALSE 54174
54077: GO 54079
54079: DISABLE
54080: LD_INT 0
54082: PPUSH
54083: PPUSH
// begin enable ;
54084: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
54085: LD_ADDR_VAR 0 1
54089: PUSH
54090: LD_INT 22
54092: PUSH
54093: LD_OWVAR 2
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 61
54104: PUSH
54105: EMPTY
54106: LIST
54107: PUSH
54108: LD_INT 33
54110: PUSH
54111: LD_INT 2
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: LIST
54122: PPUSH
54123: CALL_OW 69
54127: ST_TO_ADDR
// if not tmp then
54128: LD_VAR 0 1
54132: NOT
54133: IFFALSE 54137
// exit ;
54135: GO 54174
// for i in tmp do
54137: LD_ADDR_VAR 0 2
54141: PUSH
54142: LD_VAR 0 1
54146: PUSH
54147: FOR_IN
54148: IFFALSE 54172
// if IsControledBy ( i ) then
54150: LD_VAR 0 2
54154: PPUSH
54155: CALL_OW 312
54159: IFFALSE 54170
// ComUnlink ( i ) ;
54161: LD_VAR 0 2
54165: PPUSH
54166: CALL_OW 136
54170: GO 54147
54172: POP
54173: POP
// end ;
54174: PPOPN 2
54176: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
54177: LD_EXP 32
54181: PUSH
54182: LD_EXP 63
54186: AND
54187: IFFALSE 54327
54189: GO 54191
54191: DISABLE
54192: LD_INT 0
54194: PPUSH
54195: PPUSH
// begin ToLua ( displayPowell(); ) ;
54196: LD_STRING displayPowell();
54198: PPUSH
54199: CALL_OW 559
// uc_side := 0 ;
54203: LD_ADDR_OWVAR 20
54207: PUSH
54208: LD_INT 0
54210: ST_TO_ADDR
// uc_nation := 2 ;
54211: LD_ADDR_OWVAR 21
54215: PUSH
54216: LD_INT 2
54218: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
54219: LD_ADDR_OWVAR 37
54223: PUSH
54224: LD_INT 14
54226: ST_TO_ADDR
// vc_engine := engine_siberite ;
54227: LD_ADDR_OWVAR 39
54231: PUSH
54232: LD_INT 3
54234: ST_TO_ADDR
// vc_control := control_apeman ;
54235: LD_ADDR_OWVAR 38
54239: PUSH
54240: LD_INT 5
54242: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
54243: LD_ADDR_OWVAR 40
54247: PUSH
54248: LD_INT 29
54250: ST_TO_ADDR
// un := CreateVehicle ;
54251: LD_ADDR_VAR 0 2
54255: PUSH
54256: CALL_OW 45
54260: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54261: LD_VAR 0 2
54265: PPUSH
54266: LD_INT 1
54268: PPUSH
54269: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54273: LD_INT 35
54275: PPUSH
54276: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54280: LD_VAR 0 2
54284: PPUSH
54285: LD_INT 22
54287: PUSH
54288: LD_OWVAR 2
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PPUSH
54297: CALL_OW 69
54301: PPUSH
54302: LD_VAR 0 2
54306: PPUSH
54307: CALL_OW 74
54311: PPUSH
54312: CALL_OW 115
// until IsDead ( un ) ;
54316: LD_VAR 0 2
54320: PPUSH
54321: CALL_OW 301
54325: IFFALSE 54273
// end ;
54327: PPOPN 2
54329: END
// every 0 0$1 trigger StreamModeActive and sStu do
54330: LD_EXP 32
54334: PUSH
54335: LD_EXP 71
54339: AND
54340: IFFALSE 54356
54342: GO 54344
54344: DISABLE
// begin ToLua ( displayStucuk(); ) ;
54345: LD_STRING displayStucuk();
54347: PPUSH
54348: CALL_OW 559
// ResetFog ;
54352: CALL_OW 335
// end ;
54356: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
54357: LD_EXP 32
54361: PUSH
54362: LD_EXP 64
54366: AND
54367: IFFALSE 54508
54369: GO 54371
54371: DISABLE
54372: LD_INT 0
54374: PPUSH
54375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54376: LD_ADDR_VAR 0 2
54380: PUSH
54381: LD_INT 22
54383: PUSH
54384: LD_OWVAR 2
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 21
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PPUSH
54407: CALL_OW 69
54411: ST_TO_ADDR
// if not tmp then
54412: LD_VAR 0 2
54416: NOT
54417: IFFALSE 54421
// exit ;
54419: GO 54508
// un := tmp [ rand ( 1 , tmp ) ] ;
54421: LD_ADDR_VAR 0 1
54425: PUSH
54426: LD_VAR 0 2
54430: PUSH
54431: LD_INT 1
54433: PPUSH
54434: LD_VAR 0 2
54438: PPUSH
54439: CALL_OW 12
54443: ARRAY
54444: ST_TO_ADDR
// SetSide ( un , 0 ) ;
54445: LD_VAR 0 1
54449: PPUSH
54450: LD_INT 0
54452: PPUSH
54453: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
54457: LD_VAR 0 1
54461: PPUSH
54462: LD_OWVAR 3
54466: PUSH
54467: LD_VAR 0 1
54471: DIFF
54472: PPUSH
54473: LD_VAR 0 1
54477: PPUSH
54478: CALL_OW 74
54482: PPUSH
54483: CALL_OW 115
// wait ( 0 0$20 ) ;
54487: LD_INT 700
54489: PPUSH
54490: CALL_OW 67
// SetSide ( un , your_side ) ;
54494: LD_VAR 0 1
54498: PPUSH
54499: LD_OWVAR 2
54503: PPUSH
54504: CALL_OW 235
// end ;
54508: PPOPN 2
54510: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
54511: LD_EXP 32
54515: PUSH
54516: LD_EXP 65
54520: AND
54521: IFFALSE 54627
54523: GO 54525
54525: DISABLE
54526: LD_INT 0
54528: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54529: LD_ADDR_VAR 0 1
54533: PUSH
54534: LD_INT 22
54536: PUSH
54537: LD_OWVAR 2
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 2
54548: PUSH
54549: LD_INT 30
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 30
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: LIST
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PPUSH
54578: CALL_OW 69
54582: ST_TO_ADDR
// if not depot then
54583: LD_VAR 0 1
54587: NOT
54588: IFFALSE 54592
// exit ;
54590: GO 54627
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
54592: LD_VAR 0 1
54596: PUSH
54597: LD_INT 1
54599: ARRAY
54600: PPUSH
54601: CALL_OW 250
54605: PPUSH
54606: LD_VAR 0 1
54610: PUSH
54611: LD_INT 1
54613: ARRAY
54614: PPUSH
54615: CALL_OW 251
54619: PPUSH
54620: LD_INT 70
54622: PPUSH
54623: CALL_OW 495
// end ;
54627: PPOPN 1
54629: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
54630: LD_EXP 32
54634: PUSH
54635: LD_EXP 66
54639: AND
54640: IFFALSE 54851
54642: GO 54644
54644: DISABLE
54645: LD_INT 0
54647: PPUSH
54648: PPUSH
54649: PPUSH
54650: PPUSH
54651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54652: LD_ADDR_VAR 0 5
54656: PUSH
54657: LD_INT 22
54659: PUSH
54660: LD_OWVAR 2
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 21
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PPUSH
54683: CALL_OW 69
54687: ST_TO_ADDR
// if not tmp then
54688: LD_VAR 0 5
54692: NOT
54693: IFFALSE 54697
// exit ;
54695: GO 54851
// for i in tmp do
54697: LD_ADDR_VAR 0 1
54701: PUSH
54702: LD_VAR 0 5
54706: PUSH
54707: FOR_IN
54708: IFFALSE 54849
// begin d := rand ( 0 , 5 ) ;
54710: LD_ADDR_VAR 0 4
54714: PUSH
54715: LD_INT 0
54717: PPUSH
54718: LD_INT 5
54720: PPUSH
54721: CALL_OW 12
54725: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
54726: LD_ADDR_VAR 0 2
54730: PUSH
54731: LD_VAR 0 1
54735: PPUSH
54736: CALL_OW 250
54740: PPUSH
54741: LD_VAR 0 4
54745: PPUSH
54746: LD_INT 3
54748: PPUSH
54749: LD_INT 12
54751: PPUSH
54752: CALL_OW 12
54756: PPUSH
54757: CALL_OW 272
54761: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
54762: LD_ADDR_VAR 0 3
54766: PUSH
54767: LD_VAR 0 1
54771: PPUSH
54772: CALL_OW 251
54776: PPUSH
54777: LD_VAR 0 4
54781: PPUSH
54782: LD_INT 3
54784: PPUSH
54785: LD_INT 12
54787: PPUSH
54788: CALL_OW 12
54792: PPUSH
54793: CALL_OW 273
54797: ST_TO_ADDR
// if ValidHex ( x , y ) then
54798: LD_VAR 0 2
54802: PPUSH
54803: LD_VAR 0 3
54807: PPUSH
54808: CALL_OW 488
54812: IFFALSE 54847
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
54814: LD_VAR 0 1
54818: PPUSH
54819: LD_VAR 0 2
54823: PPUSH
54824: LD_VAR 0 3
54828: PPUSH
54829: LD_INT 3
54831: PPUSH
54832: LD_INT 6
54834: PPUSH
54835: CALL_OW 12
54839: PPUSH
54840: LD_INT 1
54842: PPUSH
54843: CALL_OW 483
// end ;
54847: GO 54707
54849: POP
54850: POP
// end ;
54851: PPOPN 5
54853: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
54854: LD_EXP 32
54858: PUSH
54859: LD_EXP 67
54863: AND
54864: IFFALSE 54958
54866: GO 54868
54868: DISABLE
54869: LD_INT 0
54871: PPUSH
54872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
54873: LD_ADDR_VAR 0 2
54877: PUSH
54878: LD_INT 22
54880: PUSH
54881: LD_OWVAR 2
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 32
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 21
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: LIST
54914: PPUSH
54915: CALL_OW 69
54919: ST_TO_ADDR
// if not tmp then
54920: LD_VAR 0 2
54924: NOT
54925: IFFALSE 54929
// exit ;
54927: GO 54958
// for i in tmp do
54929: LD_ADDR_VAR 0 1
54933: PUSH
54934: LD_VAR 0 2
54938: PUSH
54939: FOR_IN
54940: IFFALSE 54956
// SetFuel ( i , 0 ) ;
54942: LD_VAR 0 1
54946: PPUSH
54947: LD_INT 0
54949: PPUSH
54950: CALL_OW 240
54954: GO 54939
54956: POP
54957: POP
// end ;
54958: PPOPN 2
54960: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
54961: LD_EXP 32
54965: PUSH
54966: LD_EXP 68
54970: AND
54971: IFFALSE 55037
54973: GO 54975
54975: DISABLE
54976: LD_INT 0
54978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
54979: LD_ADDR_VAR 0 1
54983: PUSH
54984: LD_INT 22
54986: PUSH
54987: LD_OWVAR 2
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 30
54998: PUSH
54999: LD_INT 29
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PPUSH
55010: CALL_OW 69
55014: ST_TO_ADDR
// if not tmp then
55015: LD_VAR 0 1
55019: NOT
55020: IFFALSE 55024
// exit ;
55022: GO 55037
// DestroyUnit ( tmp [ 1 ] ) ;
55024: LD_VAR 0 1
55028: PUSH
55029: LD_INT 1
55031: ARRAY
55032: PPUSH
55033: CALL_OW 65
// end ;
55037: PPOPN 1
55039: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
55040: LD_EXP 32
55044: PUSH
55045: LD_EXP 70
55049: AND
55050: IFFALSE 55179
55052: GO 55054
55054: DISABLE
55055: LD_INT 0
55057: PPUSH
// begin uc_side := 0 ;
55058: LD_ADDR_OWVAR 20
55062: PUSH
55063: LD_INT 0
55065: ST_TO_ADDR
// uc_nation := nation_arabian ;
55066: LD_ADDR_OWVAR 21
55070: PUSH
55071: LD_INT 2
55073: ST_TO_ADDR
// hc_gallery :=  ;
55074: LD_ADDR_OWVAR 33
55078: PUSH
55079: LD_STRING 
55081: ST_TO_ADDR
// hc_name :=  ;
55082: LD_ADDR_OWVAR 26
55086: PUSH
55087: LD_STRING 
55089: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
55090: LD_INT 1
55092: PPUSH
55093: LD_INT 11
55095: PPUSH
55096: LD_INT 10
55098: PPUSH
55099: CALL_OW 380
// un := CreateHuman ;
55103: LD_ADDR_VAR 0 1
55107: PUSH
55108: CALL_OW 44
55112: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55113: LD_VAR 0 1
55117: PPUSH
55118: LD_INT 1
55120: PPUSH
55121: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55125: LD_INT 35
55127: PPUSH
55128: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55132: LD_VAR 0 1
55136: PPUSH
55137: LD_INT 22
55139: PUSH
55140: LD_OWVAR 2
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PPUSH
55149: CALL_OW 69
55153: PPUSH
55154: LD_VAR 0 1
55158: PPUSH
55159: CALL_OW 74
55163: PPUSH
55164: CALL_OW 115
// until IsDead ( un ) ;
55168: LD_VAR 0 1
55172: PPUSH
55173: CALL_OW 301
55177: IFFALSE 55125
// end ;
55179: PPOPN 1
55181: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
55182: LD_EXP 32
55186: PUSH
55187: LD_EXP 72
55191: AND
55192: IFFALSE 55204
55194: GO 55196
55196: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
55197: LD_STRING earthquake(getX(game), 0, 32)
55199: PPUSH
55200: CALL_OW 559
55204: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
55205: LD_EXP 32
55209: PUSH
55210: LD_EXP 73
55214: AND
55215: IFFALSE 55306
55217: GO 55219
55219: DISABLE
55220: LD_INT 0
55222: PPUSH
// begin enable ;
55223: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
55224: LD_ADDR_VAR 0 1
55228: PUSH
55229: LD_INT 22
55231: PUSH
55232: LD_OWVAR 2
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 21
55243: PUSH
55244: LD_INT 2
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 33
55253: PUSH
55254: LD_INT 3
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: LIST
55265: PPUSH
55266: CALL_OW 69
55270: ST_TO_ADDR
// if not tmp then
55271: LD_VAR 0 1
55275: NOT
55276: IFFALSE 55280
// exit ;
55278: GO 55306
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55280: LD_VAR 0 1
55284: PUSH
55285: LD_INT 1
55287: PPUSH
55288: LD_VAR 0 1
55292: PPUSH
55293: CALL_OW 12
55297: ARRAY
55298: PPUSH
55299: LD_INT 1
55301: PPUSH
55302: CALL_OW 234
// end ;
55306: PPOPN 1
55308: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
55309: LD_EXP 32
55313: PUSH
55314: LD_EXP 74
55318: AND
55319: IFFALSE 55460
55321: GO 55323
55323: DISABLE
55324: LD_INT 0
55326: PPUSH
55327: PPUSH
55328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55329: LD_ADDR_VAR 0 3
55333: PUSH
55334: LD_INT 22
55336: PUSH
55337: LD_OWVAR 2
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 25
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PPUSH
55360: CALL_OW 69
55364: ST_TO_ADDR
// if not tmp then
55365: LD_VAR 0 3
55369: NOT
55370: IFFALSE 55374
// exit ;
55372: GO 55460
// un := tmp [ rand ( 1 , tmp ) ] ;
55374: LD_ADDR_VAR 0 2
55378: PUSH
55379: LD_VAR 0 3
55383: PUSH
55384: LD_INT 1
55386: PPUSH
55387: LD_VAR 0 3
55391: PPUSH
55392: CALL_OW 12
55396: ARRAY
55397: ST_TO_ADDR
// if Crawls ( un ) then
55398: LD_VAR 0 2
55402: PPUSH
55403: CALL_OW 318
55407: IFFALSE 55418
// ComWalk ( un ) ;
55409: LD_VAR 0 2
55413: PPUSH
55414: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
55418: LD_VAR 0 2
55422: PPUSH
55423: LD_INT 9
55425: PPUSH
55426: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
55430: LD_INT 28
55432: PPUSH
55433: LD_OWVAR 2
55437: PPUSH
55438: LD_INT 2
55440: PPUSH
55441: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
55445: LD_INT 29
55447: PPUSH
55448: LD_OWVAR 2
55452: PPUSH
55453: LD_INT 2
55455: PPUSH
55456: CALL_OW 322
// end ;
55460: PPOPN 3
55462: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
55463: LD_EXP 32
55467: PUSH
55468: LD_EXP 75
55472: AND
55473: IFFALSE 55584
55475: GO 55477
55477: DISABLE
55478: LD_INT 0
55480: PPUSH
55481: PPUSH
55482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55483: LD_ADDR_VAR 0 3
55487: PUSH
55488: LD_INT 22
55490: PUSH
55491: LD_OWVAR 2
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 25
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PPUSH
55514: CALL_OW 69
55518: ST_TO_ADDR
// if not tmp then
55519: LD_VAR 0 3
55523: NOT
55524: IFFALSE 55528
// exit ;
55526: GO 55584
// un := tmp [ rand ( 1 , tmp ) ] ;
55528: LD_ADDR_VAR 0 2
55532: PUSH
55533: LD_VAR 0 3
55537: PUSH
55538: LD_INT 1
55540: PPUSH
55541: LD_VAR 0 3
55545: PPUSH
55546: CALL_OW 12
55550: ARRAY
55551: ST_TO_ADDR
// if Crawls ( un ) then
55552: LD_VAR 0 2
55556: PPUSH
55557: CALL_OW 318
55561: IFFALSE 55572
// ComWalk ( un ) ;
55563: LD_VAR 0 2
55567: PPUSH
55568: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55572: LD_VAR 0 2
55576: PPUSH
55577: LD_INT 8
55579: PPUSH
55580: CALL_OW 336
// end ;
55584: PPOPN 3
55586: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
55587: LD_EXP 32
55591: PUSH
55592: LD_EXP 76
55596: AND
55597: IFFALSE 55741
55599: GO 55601
55601: DISABLE
55602: LD_INT 0
55604: PPUSH
55605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
55606: LD_ADDR_VAR 0 2
55610: PUSH
55611: LD_INT 22
55613: PUSH
55614: LD_OWVAR 2
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 21
55625: PUSH
55626: LD_INT 2
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 2
55635: PUSH
55636: LD_INT 34
55638: PUSH
55639: LD_INT 12
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 34
55648: PUSH
55649: LD_INT 51
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 34
55658: PUSH
55659: LD_INT 32
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: LIST
55676: PPUSH
55677: CALL_OW 69
55681: ST_TO_ADDR
// if not tmp then
55682: LD_VAR 0 2
55686: NOT
55687: IFFALSE 55691
// exit ;
55689: GO 55741
// for i in tmp do
55691: LD_ADDR_VAR 0 1
55695: PUSH
55696: LD_VAR 0 2
55700: PUSH
55701: FOR_IN
55702: IFFALSE 55739
// if GetCargo ( i , mat_artifact ) = 0 then
55704: LD_VAR 0 1
55708: PPUSH
55709: LD_INT 4
55711: PPUSH
55712: CALL_OW 289
55716: PUSH
55717: LD_INT 0
55719: EQUAL
55720: IFFALSE 55737
// SetCargo ( i , mat_siberit , 100 ) ;
55722: LD_VAR 0 1
55726: PPUSH
55727: LD_INT 3
55729: PPUSH
55730: LD_INT 100
55732: PPUSH
55733: CALL_OW 290
55737: GO 55701
55739: POP
55740: POP
// end ;
55741: PPOPN 2
55743: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
55744: LD_EXP 32
55748: PUSH
55749: LD_EXP 77
55753: AND
55754: IFFALSE 55937
55756: GO 55758
55758: DISABLE
55759: LD_INT 0
55761: PPUSH
55762: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
55763: LD_ADDR_VAR 0 2
55767: PUSH
55768: LD_INT 22
55770: PUSH
55771: LD_OWVAR 2
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PPUSH
55780: CALL_OW 69
55784: ST_TO_ADDR
// if not tmp then
55785: LD_VAR 0 2
55789: NOT
55790: IFFALSE 55794
// exit ;
55792: GO 55937
// for i := 1 to 2 do
55794: LD_ADDR_VAR 0 1
55798: PUSH
55799: DOUBLE
55800: LD_INT 1
55802: DEC
55803: ST_TO_ADDR
55804: LD_INT 2
55806: PUSH
55807: FOR_TO
55808: IFFALSE 55935
// begin uc_side := your_side ;
55810: LD_ADDR_OWVAR 20
55814: PUSH
55815: LD_OWVAR 2
55819: ST_TO_ADDR
// uc_nation := nation_american ;
55820: LD_ADDR_OWVAR 21
55824: PUSH
55825: LD_INT 1
55827: ST_TO_ADDR
// vc_chassis := us_morphling ;
55828: LD_ADDR_OWVAR 37
55832: PUSH
55833: LD_INT 5
55835: ST_TO_ADDR
// vc_engine := engine_siberite ;
55836: LD_ADDR_OWVAR 39
55840: PUSH
55841: LD_INT 3
55843: ST_TO_ADDR
// vc_control := control_computer ;
55844: LD_ADDR_OWVAR 38
55848: PUSH
55849: LD_INT 3
55851: ST_TO_ADDR
// vc_weapon := us_double_laser ;
55852: LD_ADDR_OWVAR 40
55856: PUSH
55857: LD_INT 10
55859: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
55860: LD_VAR 0 2
55864: PUSH
55865: LD_INT 1
55867: ARRAY
55868: PPUSH
55869: CALL_OW 310
55873: NOT
55874: IFFALSE 55921
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
55876: CALL_OW 45
55880: PPUSH
55881: LD_VAR 0 2
55885: PUSH
55886: LD_INT 1
55888: ARRAY
55889: PPUSH
55890: CALL_OW 250
55894: PPUSH
55895: LD_VAR 0 2
55899: PUSH
55900: LD_INT 1
55902: ARRAY
55903: PPUSH
55904: CALL_OW 251
55908: PPUSH
55909: LD_INT 12
55911: PPUSH
55912: LD_INT 1
55914: PPUSH
55915: CALL_OW 50
55919: GO 55933
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
55921: CALL_OW 45
55925: PPUSH
55926: LD_INT 1
55928: PPUSH
55929: CALL_OW 51
// end ;
55933: GO 55807
55935: POP
55936: POP
// end ;
55937: PPOPN 2
55939: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
55940: LD_EXP 32
55944: PUSH
55945: LD_EXP 78
55949: AND
55950: IFFALSE 56172
55952: GO 55954
55954: DISABLE
55955: LD_INT 0
55957: PPUSH
55958: PPUSH
55959: PPUSH
55960: PPUSH
55961: PPUSH
55962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55963: LD_ADDR_VAR 0 6
55967: PUSH
55968: LD_INT 22
55970: PUSH
55971: LD_OWVAR 2
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 21
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 3
55992: PUSH
55993: LD_INT 23
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: LIST
56011: PPUSH
56012: CALL_OW 69
56016: ST_TO_ADDR
// if not tmp then
56017: LD_VAR 0 6
56021: NOT
56022: IFFALSE 56026
// exit ;
56024: GO 56172
// s1 := rand ( 1 , 4 ) ;
56026: LD_ADDR_VAR 0 2
56030: PUSH
56031: LD_INT 1
56033: PPUSH
56034: LD_INT 4
56036: PPUSH
56037: CALL_OW 12
56041: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
56042: LD_ADDR_VAR 0 4
56046: PUSH
56047: LD_VAR 0 6
56051: PUSH
56052: LD_INT 1
56054: ARRAY
56055: PPUSH
56056: LD_VAR 0 2
56060: PPUSH
56061: CALL_OW 259
56065: ST_TO_ADDR
// if s1 = 1 then
56066: LD_VAR 0 2
56070: PUSH
56071: LD_INT 1
56073: EQUAL
56074: IFFALSE 56094
// s2 := rand ( 2 , 4 ) else
56076: LD_ADDR_VAR 0 3
56080: PUSH
56081: LD_INT 2
56083: PPUSH
56084: LD_INT 4
56086: PPUSH
56087: CALL_OW 12
56091: ST_TO_ADDR
56092: GO 56102
// s2 := 1 ;
56094: LD_ADDR_VAR 0 3
56098: PUSH
56099: LD_INT 1
56101: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
56102: LD_ADDR_VAR 0 5
56106: PUSH
56107: LD_VAR 0 6
56111: PUSH
56112: LD_INT 1
56114: ARRAY
56115: PPUSH
56116: LD_VAR 0 3
56120: PPUSH
56121: CALL_OW 259
56125: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
56126: LD_VAR 0 6
56130: PUSH
56131: LD_INT 1
56133: ARRAY
56134: PPUSH
56135: LD_VAR 0 2
56139: PPUSH
56140: LD_VAR 0 5
56144: PPUSH
56145: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
56149: LD_VAR 0 6
56153: PUSH
56154: LD_INT 1
56156: ARRAY
56157: PPUSH
56158: LD_VAR 0 3
56162: PPUSH
56163: LD_VAR 0 4
56167: PPUSH
56168: CALL_OW 237
// end ;
56172: PPOPN 6
56174: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
56175: LD_EXP 32
56179: PUSH
56180: LD_EXP 79
56184: AND
56185: IFFALSE 56264
56187: GO 56189
56189: DISABLE
56190: LD_INT 0
56192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
56193: LD_ADDR_VAR 0 1
56197: PUSH
56198: LD_INT 22
56200: PUSH
56201: LD_OWVAR 2
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 30
56212: PUSH
56213: LD_INT 3
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PPUSH
56224: CALL_OW 69
56228: ST_TO_ADDR
// if not tmp then
56229: LD_VAR 0 1
56233: NOT
56234: IFFALSE 56238
// exit ;
56236: GO 56264
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56238: LD_VAR 0 1
56242: PUSH
56243: LD_INT 1
56245: PPUSH
56246: LD_VAR 0 1
56250: PPUSH
56251: CALL_OW 12
56255: ARRAY
56256: PPUSH
56257: LD_INT 1
56259: PPUSH
56260: CALL_OW 234
// end ;
56264: PPOPN 1
56266: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
56267: LD_EXP 32
56271: PUSH
56272: LD_EXP 80
56276: AND
56277: IFFALSE 56389
56279: GO 56281
56281: DISABLE
56282: LD_INT 0
56284: PPUSH
56285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
56286: LD_ADDR_VAR 0 2
56290: PUSH
56291: LD_INT 22
56293: PUSH
56294: LD_OWVAR 2
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: PUSH
56306: LD_INT 30
56308: PUSH
56309: LD_INT 27
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 30
56318: PUSH
56319: LD_INT 26
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 30
56328: PUSH
56329: LD_INT 28
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PPUSH
56346: CALL_OW 69
56350: ST_TO_ADDR
// if not tmp then
56351: LD_VAR 0 2
56355: NOT
56356: IFFALSE 56360
// exit ;
56358: GO 56389
// for i in tmp do
56360: LD_ADDR_VAR 0 1
56364: PUSH
56365: LD_VAR 0 2
56369: PUSH
56370: FOR_IN
56371: IFFALSE 56387
// SetLives ( i , 1 ) ;
56373: LD_VAR 0 1
56377: PPUSH
56378: LD_INT 1
56380: PPUSH
56381: CALL_OW 234
56385: GO 56370
56387: POP
56388: POP
// end ;
56389: PPOPN 2
56391: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
56392: LD_EXP 32
56396: PUSH
56397: LD_EXP 81
56401: AND
56402: IFFALSE 56689
56404: GO 56406
56406: DISABLE
56407: LD_INT 0
56409: PPUSH
56410: PPUSH
56411: PPUSH
// begin i := rand ( 1 , 7 ) ;
56412: LD_ADDR_VAR 0 1
56416: PUSH
56417: LD_INT 1
56419: PPUSH
56420: LD_INT 7
56422: PPUSH
56423: CALL_OW 12
56427: ST_TO_ADDR
// case i of 1 :
56428: LD_VAR 0 1
56432: PUSH
56433: LD_INT 1
56435: DOUBLE
56436: EQUAL
56437: IFTRUE 56441
56439: GO 56451
56441: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
56442: LD_STRING earthquake(getX(game), 0, 32)
56444: PPUSH
56445: CALL_OW 559
56449: GO 56689
56451: LD_INT 2
56453: DOUBLE
56454: EQUAL
56455: IFTRUE 56459
56457: GO 56473
56459: POP
// begin ToLua ( displayStucuk(); ) ;
56460: LD_STRING displayStucuk();
56462: PPUSH
56463: CALL_OW 559
// ResetFog ;
56467: CALL_OW 335
// end ; 3 :
56471: GO 56689
56473: LD_INT 3
56475: DOUBLE
56476: EQUAL
56477: IFTRUE 56481
56479: GO 56585
56481: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56482: LD_ADDR_VAR 0 2
56486: PUSH
56487: LD_INT 22
56489: PUSH
56490: LD_OWVAR 2
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 25
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PPUSH
56513: CALL_OW 69
56517: ST_TO_ADDR
// if not tmp then
56518: LD_VAR 0 2
56522: NOT
56523: IFFALSE 56527
// exit ;
56525: GO 56689
// un := tmp [ rand ( 1 , tmp ) ] ;
56527: LD_ADDR_VAR 0 3
56531: PUSH
56532: LD_VAR 0 2
56536: PUSH
56537: LD_INT 1
56539: PPUSH
56540: LD_VAR 0 2
56544: PPUSH
56545: CALL_OW 12
56549: ARRAY
56550: ST_TO_ADDR
// if Crawls ( un ) then
56551: LD_VAR 0 3
56555: PPUSH
56556: CALL_OW 318
56560: IFFALSE 56571
// ComWalk ( un ) ;
56562: LD_VAR 0 3
56566: PPUSH
56567: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56571: LD_VAR 0 3
56575: PPUSH
56576: LD_INT 8
56578: PPUSH
56579: CALL_OW 336
// end ; 4 :
56583: GO 56689
56585: LD_INT 4
56587: DOUBLE
56588: EQUAL
56589: IFTRUE 56593
56591: GO 56667
56593: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56594: LD_ADDR_VAR 0 2
56598: PUSH
56599: LD_INT 22
56601: PUSH
56602: LD_OWVAR 2
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 30
56613: PUSH
56614: LD_INT 29
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PPUSH
56625: CALL_OW 69
56629: ST_TO_ADDR
// if not tmp then
56630: LD_VAR 0 2
56634: NOT
56635: IFFALSE 56639
// exit ;
56637: GO 56689
// CenterNowOnUnits ( tmp [ 1 ] ) ;
56639: LD_VAR 0 2
56643: PUSH
56644: LD_INT 1
56646: ARRAY
56647: PPUSH
56648: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
56652: LD_VAR 0 2
56656: PUSH
56657: LD_INT 1
56659: ARRAY
56660: PPUSH
56661: CALL_OW 65
// end ; 5 .. 7 :
56665: GO 56689
56667: LD_INT 5
56669: DOUBLE
56670: GREATEREQUAL
56671: IFFALSE 56679
56673: LD_INT 7
56675: DOUBLE
56676: LESSEQUAL
56677: IFTRUE 56681
56679: GO 56688
56681: POP
// StreamSibBomb ; end ;
56682: CALL 52926 0 0
56686: GO 56689
56688: POP
// end ;
56689: PPOPN 3
56691: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
56692: LD_EXP 32
56696: PUSH
56697: LD_EXP 82
56701: AND
56702: IFFALSE 56858
56704: GO 56706
56706: DISABLE
56707: LD_INT 0
56709: PPUSH
56710: PPUSH
56711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
56712: LD_ADDR_VAR 0 2
56716: PUSH
56717: LD_INT 81
56719: PUSH
56720: LD_OWVAR 2
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 2
56731: PUSH
56732: LD_INT 21
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 21
56744: PUSH
56745: LD_INT 2
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: LIST
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PPUSH
56761: CALL_OW 69
56765: ST_TO_ADDR
// if not tmp then
56766: LD_VAR 0 2
56770: NOT
56771: IFFALSE 56775
// exit ;
56773: GO 56858
// p := 0 ;
56775: LD_ADDR_VAR 0 3
56779: PUSH
56780: LD_INT 0
56782: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56783: LD_INT 35
56785: PPUSH
56786: CALL_OW 67
// p := p + 1 ;
56790: LD_ADDR_VAR 0 3
56794: PUSH
56795: LD_VAR 0 3
56799: PUSH
56800: LD_INT 1
56802: PLUS
56803: ST_TO_ADDR
// for i in tmp do
56804: LD_ADDR_VAR 0 1
56808: PUSH
56809: LD_VAR 0 2
56813: PUSH
56814: FOR_IN
56815: IFFALSE 56846
// if GetLives ( i ) < 1000 then
56817: LD_VAR 0 1
56821: PPUSH
56822: CALL_OW 256
56826: PUSH
56827: LD_INT 1000
56829: LESS
56830: IFFALSE 56844
// SetLives ( i , 1000 ) ;
56832: LD_VAR 0 1
56836: PPUSH
56837: LD_INT 1000
56839: PPUSH
56840: CALL_OW 234
56844: GO 56814
56846: POP
56847: POP
// until p > 20 ;
56848: LD_VAR 0 3
56852: PUSH
56853: LD_INT 20
56855: GREATER
56856: IFFALSE 56783
// end ;
56858: PPOPN 3
56860: END
// every 0 0$1 trigger StreamModeActive and sTime do
56861: LD_EXP 32
56865: PUSH
56866: LD_EXP 83
56870: AND
56871: IFFALSE 56906
56873: GO 56875
56875: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
56876: LD_INT 28
56878: PPUSH
56879: LD_OWVAR 2
56883: PPUSH
56884: LD_INT 2
56886: PPUSH
56887: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
56891: LD_INT 30
56893: PPUSH
56894: LD_OWVAR 2
56898: PPUSH
56899: LD_INT 2
56901: PPUSH
56902: CALL_OW 322
// end ;
56906: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
56907: LD_EXP 32
56911: PUSH
56912: LD_EXP 84
56916: AND
56917: IFFALSE 57038
56919: GO 56921
56921: DISABLE
56922: LD_INT 0
56924: PPUSH
56925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56926: LD_ADDR_VAR 0 2
56930: PUSH
56931: LD_INT 22
56933: PUSH
56934: LD_OWVAR 2
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 21
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 3
56955: PUSH
56956: LD_INT 23
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: LIST
56974: PPUSH
56975: CALL_OW 69
56979: ST_TO_ADDR
// if not tmp then
56980: LD_VAR 0 2
56984: NOT
56985: IFFALSE 56989
// exit ;
56987: GO 57038
// for i in tmp do
56989: LD_ADDR_VAR 0 1
56993: PUSH
56994: LD_VAR 0 2
56998: PUSH
56999: FOR_IN
57000: IFFALSE 57036
// begin if Crawls ( i ) then
57002: LD_VAR 0 1
57006: PPUSH
57007: CALL_OW 318
57011: IFFALSE 57022
// ComWalk ( i ) ;
57013: LD_VAR 0 1
57017: PPUSH
57018: CALL_OW 138
// SetClass ( i , 2 ) ;
57022: LD_VAR 0 1
57026: PPUSH
57027: LD_INT 2
57029: PPUSH
57030: CALL_OW 336
// end ;
57034: GO 56999
57036: POP
57037: POP
// end ;
57038: PPOPN 2
57040: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
57041: LD_EXP 32
57045: PUSH
57046: LD_EXP 85
57050: AND
57051: IFFALSE 57339
57053: GO 57055
57055: DISABLE
57056: LD_INT 0
57058: PPUSH
57059: PPUSH
57060: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
57061: LD_OWVAR 2
57065: PPUSH
57066: LD_INT 9
57068: PPUSH
57069: LD_INT 1
57071: PPUSH
57072: LD_INT 1
57074: PPUSH
57075: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
57079: LD_INT 9
57081: PPUSH
57082: LD_OWVAR 2
57086: PPUSH
57087: CALL_OW 343
// uc_side := 9 ;
57091: LD_ADDR_OWVAR 20
57095: PUSH
57096: LD_INT 9
57098: ST_TO_ADDR
// uc_nation := 2 ;
57099: LD_ADDR_OWVAR 21
57103: PUSH
57104: LD_INT 2
57106: ST_TO_ADDR
// hc_name := Dark Warrior ;
57107: LD_ADDR_OWVAR 26
57111: PUSH
57112: LD_STRING Dark Warrior
57114: ST_TO_ADDR
// hc_gallery :=  ;
57115: LD_ADDR_OWVAR 33
57119: PUSH
57120: LD_STRING 
57122: ST_TO_ADDR
// hc_noskilllimit := true ;
57123: LD_ADDR_OWVAR 76
57127: PUSH
57128: LD_INT 1
57130: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
57131: LD_ADDR_OWVAR 31
57135: PUSH
57136: LD_INT 30
57138: PUSH
57139: LD_INT 30
57141: PUSH
57142: LD_INT 30
57144: PUSH
57145: LD_INT 30
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: ST_TO_ADDR
// un := CreateHuman ;
57154: LD_ADDR_VAR 0 3
57158: PUSH
57159: CALL_OW 44
57163: ST_TO_ADDR
// hc_noskilllimit := false ;
57164: LD_ADDR_OWVAR 76
57168: PUSH
57169: LD_INT 0
57171: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57172: LD_VAR 0 3
57176: PPUSH
57177: LD_INT 1
57179: PPUSH
57180: CALL_OW 51
// ToLua ( playRanger() ) ;
57184: LD_STRING playRanger()
57186: PPUSH
57187: CALL_OW 559
// p := 0 ;
57191: LD_ADDR_VAR 0 2
57195: PUSH
57196: LD_INT 0
57198: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57199: LD_INT 35
57201: PPUSH
57202: CALL_OW 67
// p := p + 1 ;
57206: LD_ADDR_VAR 0 2
57210: PUSH
57211: LD_VAR 0 2
57215: PUSH
57216: LD_INT 1
57218: PLUS
57219: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
57220: LD_VAR 0 3
57224: PPUSH
57225: CALL_OW 256
57229: PUSH
57230: LD_INT 1000
57232: LESS
57233: IFFALSE 57247
// SetLives ( un , 1000 ) ;
57235: LD_VAR 0 3
57239: PPUSH
57240: LD_INT 1000
57242: PPUSH
57243: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
57247: LD_VAR 0 3
57251: PPUSH
57252: LD_INT 81
57254: PUSH
57255: LD_OWVAR 2
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 91
57266: PUSH
57267: LD_VAR 0 3
57271: PUSH
57272: LD_INT 30
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: LIST
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PPUSH
57284: CALL_OW 69
57288: PPUSH
57289: LD_VAR 0 3
57293: PPUSH
57294: CALL_OW 74
57298: PPUSH
57299: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
57303: LD_VAR 0 2
57307: PUSH
57308: LD_INT 80
57310: GREATER
57311: PUSH
57312: LD_VAR 0 3
57316: PPUSH
57317: CALL_OW 301
57321: OR
57322: IFFALSE 57199
// if un then
57324: LD_VAR 0 3
57328: IFFALSE 57339
// RemoveUnit ( un ) ;
57330: LD_VAR 0 3
57334: PPUSH
57335: CALL_OW 64
// end ;
57339: PPOPN 3
57341: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
57342: LD_EXP 86
57346: IFFALSE 57462
57348: GO 57350
57350: DISABLE
57351: LD_INT 0
57353: PPUSH
57354: PPUSH
57355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57356: LD_ADDR_VAR 0 2
57360: PUSH
57361: LD_INT 81
57363: PUSH
57364: LD_OWVAR 2
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 21
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PPUSH
57387: CALL_OW 69
57391: ST_TO_ADDR
// ToLua ( playComputer() ) ;
57392: LD_STRING playComputer()
57394: PPUSH
57395: CALL_OW 559
// if not tmp then
57399: LD_VAR 0 2
57403: NOT
57404: IFFALSE 57408
// exit ;
57406: GO 57462
// for i in tmp do
57408: LD_ADDR_VAR 0 1
57412: PUSH
57413: LD_VAR 0 2
57417: PUSH
57418: FOR_IN
57419: IFFALSE 57460
// for j := 1 to 4 do
57421: LD_ADDR_VAR 0 3
57425: PUSH
57426: DOUBLE
57427: LD_INT 1
57429: DEC
57430: ST_TO_ADDR
57431: LD_INT 4
57433: PUSH
57434: FOR_TO
57435: IFFALSE 57456
// SetSkill ( i , j , 10 ) ;
57437: LD_VAR 0 1
57441: PPUSH
57442: LD_VAR 0 3
57446: PPUSH
57447: LD_INT 10
57449: PPUSH
57450: CALL_OW 237
57454: GO 57434
57456: POP
57457: POP
57458: GO 57418
57460: POP
57461: POP
// end ;
57462: PPOPN 3
57464: END
// every 0 0$1 trigger s30 do var i , tmp ;
57465: LD_EXP 87
57469: IFFALSE 57538
57471: GO 57473
57473: DISABLE
57474: LD_INT 0
57476: PPUSH
57477: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57478: LD_ADDR_VAR 0 2
57482: PUSH
57483: LD_INT 22
57485: PUSH
57486: LD_OWVAR 2
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PPUSH
57495: CALL_OW 69
57499: ST_TO_ADDR
// if not tmp then
57500: LD_VAR 0 2
57504: NOT
57505: IFFALSE 57509
// exit ;
57507: GO 57538
// for i in tmp do
57509: LD_ADDR_VAR 0 1
57513: PUSH
57514: LD_VAR 0 2
57518: PUSH
57519: FOR_IN
57520: IFFALSE 57536
// SetLives ( i , 300 ) ;
57522: LD_VAR 0 1
57526: PPUSH
57527: LD_INT 300
57529: PPUSH
57530: CALL_OW 234
57534: GO 57519
57536: POP
57537: POP
// end ;
57538: PPOPN 2
57540: END
// every 0 0$1 trigger s60 do var i , tmp ;
57541: LD_EXP 88
57545: IFFALSE 57614
57547: GO 57549
57549: DISABLE
57550: LD_INT 0
57552: PPUSH
57553: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57554: LD_ADDR_VAR 0 2
57558: PUSH
57559: LD_INT 22
57561: PUSH
57562: LD_OWVAR 2
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PPUSH
57571: CALL_OW 69
57575: ST_TO_ADDR
// if not tmp then
57576: LD_VAR 0 2
57580: NOT
57581: IFFALSE 57585
// exit ;
57583: GO 57614
// for i in tmp do
57585: LD_ADDR_VAR 0 1
57589: PUSH
57590: LD_VAR 0 2
57594: PUSH
57595: FOR_IN
57596: IFFALSE 57612
// SetLives ( i , 600 ) ;
57598: LD_VAR 0 1
57602: PPUSH
57603: LD_INT 600
57605: PPUSH
57606: CALL_OW 234
57610: GO 57595
57612: POP
57613: POP
// end ;
57614: PPOPN 2
57616: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57617: LD_INT 0
57619: PPUSH
// case cmd of 301 :
57620: LD_VAR 0 1
57624: PUSH
57625: LD_INT 301
57627: DOUBLE
57628: EQUAL
57629: IFTRUE 57633
57631: GO 57665
57633: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
57634: LD_VAR 0 6
57638: PPUSH
57639: LD_VAR 0 7
57643: PPUSH
57644: LD_VAR 0 8
57648: PPUSH
57649: LD_VAR 0 4
57653: PPUSH
57654: LD_VAR 0 5
57658: PPUSH
57659: CALL 58866 0 5
57663: GO 57786
57665: LD_INT 302
57667: DOUBLE
57668: EQUAL
57669: IFTRUE 57673
57671: GO 57710
57673: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
57674: LD_VAR 0 6
57678: PPUSH
57679: LD_VAR 0 7
57683: PPUSH
57684: LD_VAR 0 8
57688: PPUSH
57689: LD_VAR 0 9
57693: PPUSH
57694: LD_VAR 0 4
57698: PPUSH
57699: LD_VAR 0 5
57703: PPUSH
57704: CALL 58957 0 6
57708: GO 57786
57710: LD_INT 303
57712: DOUBLE
57713: EQUAL
57714: IFTRUE 57718
57716: GO 57755
57718: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
57719: LD_VAR 0 6
57723: PPUSH
57724: LD_VAR 0 7
57728: PPUSH
57729: LD_VAR 0 8
57733: PPUSH
57734: LD_VAR 0 9
57738: PPUSH
57739: LD_VAR 0 4
57743: PPUSH
57744: LD_VAR 0 5
57748: PPUSH
57749: CALL 57791 0 6
57753: GO 57786
57755: LD_INT 304
57757: DOUBLE
57758: EQUAL
57759: IFTRUE 57763
57761: GO 57785
57763: POP
// hHackTeleport ( unit , x , y ) ; end ;
57764: LD_VAR 0 2
57768: PPUSH
57769: LD_VAR 0 4
57773: PPUSH
57774: LD_VAR 0 5
57778: PPUSH
57779: CALL 59550 0 3
57783: GO 57786
57785: POP
// end ;
57786: LD_VAR 0 12
57790: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
57791: LD_INT 0
57793: PPUSH
57794: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
57795: LD_VAR 0 1
57799: PUSH
57800: LD_INT 1
57802: LESS
57803: PUSH
57804: LD_VAR 0 1
57808: PUSH
57809: LD_INT 3
57811: GREATER
57812: OR
57813: PUSH
57814: LD_VAR 0 5
57818: PPUSH
57819: LD_VAR 0 6
57823: PPUSH
57824: CALL_OW 428
57828: OR
57829: IFFALSE 57833
// exit ;
57831: GO 58553
// uc_side := your_side ;
57833: LD_ADDR_OWVAR 20
57837: PUSH
57838: LD_OWVAR 2
57842: ST_TO_ADDR
// uc_nation := nation ;
57843: LD_ADDR_OWVAR 21
57847: PUSH
57848: LD_VAR 0 1
57852: ST_TO_ADDR
// bc_level = 1 ;
57853: LD_ADDR_OWVAR 43
57857: PUSH
57858: LD_INT 1
57860: ST_TO_ADDR
// case btype of 1 :
57861: LD_VAR 0 2
57865: PUSH
57866: LD_INT 1
57868: DOUBLE
57869: EQUAL
57870: IFTRUE 57874
57872: GO 57885
57874: POP
// bc_type := b_depot ; 2 :
57875: LD_ADDR_OWVAR 42
57879: PUSH
57880: LD_INT 0
57882: ST_TO_ADDR
57883: GO 58497
57885: LD_INT 2
57887: DOUBLE
57888: EQUAL
57889: IFTRUE 57893
57891: GO 57904
57893: POP
// bc_type := b_warehouse ; 3 :
57894: LD_ADDR_OWVAR 42
57898: PUSH
57899: LD_INT 1
57901: ST_TO_ADDR
57902: GO 58497
57904: LD_INT 3
57906: DOUBLE
57907: EQUAL
57908: IFTRUE 57912
57910: GO 57923
57912: POP
// bc_type := b_lab ; 4 .. 9 :
57913: LD_ADDR_OWVAR 42
57917: PUSH
57918: LD_INT 6
57920: ST_TO_ADDR
57921: GO 58497
57923: LD_INT 4
57925: DOUBLE
57926: GREATEREQUAL
57927: IFFALSE 57935
57929: LD_INT 9
57931: DOUBLE
57932: LESSEQUAL
57933: IFTRUE 57937
57935: GO 57989
57937: POP
// begin bc_type := b_lab_half ;
57938: LD_ADDR_OWVAR 42
57942: PUSH
57943: LD_INT 7
57945: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
57946: LD_ADDR_OWVAR 44
57950: PUSH
57951: LD_INT 10
57953: PUSH
57954: LD_INT 11
57956: PUSH
57957: LD_INT 12
57959: PUSH
57960: LD_INT 15
57962: PUSH
57963: LD_INT 14
57965: PUSH
57966: LD_INT 13
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: PUSH
57977: LD_VAR 0 2
57981: PUSH
57982: LD_INT 3
57984: MINUS
57985: ARRAY
57986: ST_TO_ADDR
// end ; 10 .. 13 :
57987: GO 58497
57989: LD_INT 10
57991: DOUBLE
57992: GREATEREQUAL
57993: IFFALSE 58001
57995: LD_INT 13
57997: DOUBLE
57998: LESSEQUAL
57999: IFTRUE 58003
58001: GO 58080
58003: POP
// begin bc_type := b_lab_full ;
58004: LD_ADDR_OWVAR 42
58008: PUSH
58009: LD_INT 8
58011: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
58012: LD_ADDR_OWVAR 44
58016: PUSH
58017: LD_INT 10
58019: PUSH
58020: LD_INT 12
58022: PUSH
58023: LD_INT 14
58025: PUSH
58026: LD_INT 13
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: PUSH
58035: LD_VAR 0 2
58039: PUSH
58040: LD_INT 9
58042: MINUS
58043: ARRAY
58044: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
58045: LD_ADDR_OWVAR 45
58049: PUSH
58050: LD_INT 11
58052: PUSH
58053: LD_INT 15
58055: PUSH
58056: LD_INT 12
58058: PUSH
58059: LD_INT 15
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: PUSH
58068: LD_VAR 0 2
58072: PUSH
58073: LD_INT 9
58075: MINUS
58076: ARRAY
58077: ST_TO_ADDR
// end ; 14 :
58078: GO 58497
58080: LD_INT 14
58082: DOUBLE
58083: EQUAL
58084: IFTRUE 58088
58086: GO 58099
58088: POP
// bc_type := b_workshop ; 15 :
58089: LD_ADDR_OWVAR 42
58093: PUSH
58094: LD_INT 2
58096: ST_TO_ADDR
58097: GO 58497
58099: LD_INT 15
58101: DOUBLE
58102: EQUAL
58103: IFTRUE 58107
58105: GO 58118
58107: POP
// bc_type := b_factory ; 16 :
58108: LD_ADDR_OWVAR 42
58112: PUSH
58113: LD_INT 3
58115: ST_TO_ADDR
58116: GO 58497
58118: LD_INT 16
58120: DOUBLE
58121: EQUAL
58122: IFTRUE 58126
58124: GO 58137
58126: POP
// bc_type := b_ext_gun ; 17 :
58127: LD_ADDR_OWVAR 42
58131: PUSH
58132: LD_INT 17
58134: ST_TO_ADDR
58135: GO 58497
58137: LD_INT 17
58139: DOUBLE
58140: EQUAL
58141: IFTRUE 58145
58143: GO 58173
58145: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
58146: LD_ADDR_OWVAR 42
58150: PUSH
58151: LD_INT 19
58153: PUSH
58154: LD_INT 23
58156: PUSH
58157: LD_INT 19
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: LIST
58164: PUSH
58165: LD_VAR 0 1
58169: ARRAY
58170: ST_TO_ADDR
58171: GO 58497
58173: LD_INT 18
58175: DOUBLE
58176: EQUAL
58177: IFTRUE 58181
58179: GO 58192
58181: POP
// bc_type := b_ext_radar ; 19 :
58182: LD_ADDR_OWVAR 42
58186: PUSH
58187: LD_INT 20
58189: ST_TO_ADDR
58190: GO 58497
58192: LD_INT 19
58194: DOUBLE
58195: EQUAL
58196: IFTRUE 58200
58198: GO 58211
58200: POP
// bc_type := b_ext_radio ; 20 :
58201: LD_ADDR_OWVAR 42
58205: PUSH
58206: LD_INT 22
58208: ST_TO_ADDR
58209: GO 58497
58211: LD_INT 20
58213: DOUBLE
58214: EQUAL
58215: IFTRUE 58219
58217: GO 58230
58219: POP
// bc_type := b_ext_siberium ; 21 :
58220: LD_ADDR_OWVAR 42
58224: PUSH
58225: LD_INT 21
58227: ST_TO_ADDR
58228: GO 58497
58230: LD_INT 21
58232: DOUBLE
58233: EQUAL
58234: IFTRUE 58238
58236: GO 58249
58238: POP
// bc_type := b_ext_computer ; 22 :
58239: LD_ADDR_OWVAR 42
58243: PUSH
58244: LD_INT 24
58246: ST_TO_ADDR
58247: GO 58497
58249: LD_INT 22
58251: DOUBLE
58252: EQUAL
58253: IFTRUE 58257
58255: GO 58268
58257: POP
// bc_type := b_ext_track ; 23 :
58258: LD_ADDR_OWVAR 42
58262: PUSH
58263: LD_INT 16
58265: ST_TO_ADDR
58266: GO 58497
58268: LD_INT 23
58270: DOUBLE
58271: EQUAL
58272: IFTRUE 58276
58274: GO 58287
58276: POP
// bc_type := b_ext_laser ; 24 :
58277: LD_ADDR_OWVAR 42
58281: PUSH
58282: LD_INT 25
58284: ST_TO_ADDR
58285: GO 58497
58287: LD_INT 24
58289: DOUBLE
58290: EQUAL
58291: IFTRUE 58295
58293: GO 58306
58295: POP
// bc_type := b_control_tower ; 25 :
58296: LD_ADDR_OWVAR 42
58300: PUSH
58301: LD_INT 36
58303: ST_TO_ADDR
58304: GO 58497
58306: LD_INT 25
58308: DOUBLE
58309: EQUAL
58310: IFTRUE 58314
58312: GO 58325
58314: POP
// bc_type := b_breastwork ; 26 :
58315: LD_ADDR_OWVAR 42
58319: PUSH
58320: LD_INT 31
58322: ST_TO_ADDR
58323: GO 58497
58325: LD_INT 26
58327: DOUBLE
58328: EQUAL
58329: IFTRUE 58333
58331: GO 58344
58333: POP
// bc_type := b_bunker ; 27 :
58334: LD_ADDR_OWVAR 42
58338: PUSH
58339: LD_INT 32
58341: ST_TO_ADDR
58342: GO 58497
58344: LD_INT 27
58346: DOUBLE
58347: EQUAL
58348: IFTRUE 58352
58350: GO 58363
58352: POP
// bc_type := b_turret ; 28 :
58353: LD_ADDR_OWVAR 42
58357: PUSH
58358: LD_INT 33
58360: ST_TO_ADDR
58361: GO 58497
58363: LD_INT 28
58365: DOUBLE
58366: EQUAL
58367: IFTRUE 58371
58369: GO 58382
58371: POP
// bc_type := b_armoury ; 29 :
58372: LD_ADDR_OWVAR 42
58376: PUSH
58377: LD_INT 4
58379: ST_TO_ADDR
58380: GO 58497
58382: LD_INT 29
58384: DOUBLE
58385: EQUAL
58386: IFTRUE 58390
58388: GO 58401
58390: POP
// bc_type := b_barracks ; 30 :
58391: LD_ADDR_OWVAR 42
58395: PUSH
58396: LD_INT 5
58398: ST_TO_ADDR
58399: GO 58497
58401: LD_INT 30
58403: DOUBLE
58404: EQUAL
58405: IFTRUE 58409
58407: GO 58420
58409: POP
// bc_type := b_solar_power ; 31 :
58410: LD_ADDR_OWVAR 42
58414: PUSH
58415: LD_INT 27
58417: ST_TO_ADDR
58418: GO 58497
58420: LD_INT 31
58422: DOUBLE
58423: EQUAL
58424: IFTRUE 58428
58426: GO 58439
58428: POP
// bc_type := b_oil_power ; 32 :
58429: LD_ADDR_OWVAR 42
58433: PUSH
58434: LD_INT 26
58436: ST_TO_ADDR
58437: GO 58497
58439: LD_INT 32
58441: DOUBLE
58442: EQUAL
58443: IFTRUE 58447
58445: GO 58458
58447: POP
// bc_type := b_siberite_power ; 33 :
58448: LD_ADDR_OWVAR 42
58452: PUSH
58453: LD_INT 28
58455: ST_TO_ADDR
58456: GO 58497
58458: LD_INT 33
58460: DOUBLE
58461: EQUAL
58462: IFTRUE 58466
58464: GO 58477
58466: POP
// bc_type := b_oil_mine ; 34 :
58467: LD_ADDR_OWVAR 42
58471: PUSH
58472: LD_INT 29
58474: ST_TO_ADDR
58475: GO 58497
58477: LD_INT 34
58479: DOUBLE
58480: EQUAL
58481: IFTRUE 58485
58483: GO 58496
58485: POP
// bc_type := b_siberite_mine ; end ;
58486: LD_ADDR_OWVAR 42
58490: PUSH
58491: LD_INT 30
58493: ST_TO_ADDR
58494: GO 58497
58496: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
58497: LD_ADDR_VAR 0 8
58501: PUSH
58502: LD_VAR 0 5
58506: PPUSH
58507: LD_VAR 0 6
58511: PPUSH
58512: LD_VAR 0 3
58516: PPUSH
58517: CALL_OW 47
58521: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
58522: LD_OWVAR 42
58526: PUSH
58527: LD_INT 32
58529: PUSH
58530: LD_INT 33
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: IN
58537: IFFALSE 58553
// PlaceWeaponTurret ( b , weapon ) ;
58539: LD_VAR 0 8
58543: PPUSH
58544: LD_VAR 0 4
58548: PPUSH
58549: CALL_OW 431
// end ;
58553: LD_VAR 0 7
58557: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
58558: LD_INT 0
58560: PPUSH
58561: PPUSH
58562: PPUSH
58563: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58564: LD_ADDR_VAR 0 4
58568: PUSH
58569: LD_INT 22
58571: PUSH
58572: LD_OWVAR 2
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: LD_INT 30
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 30
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: LIST
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PPUSH
58613: CALL_OW 69
58617: ST_TO_ADDR
// if not tmp then
58618: LD_VAR 0 4
58622: NOT
58623: IFFALSE 58627
// exit ;
58625: GO 58686
// for i in tmp do
58627: LD_ADDR_VAR 0 2
58631: PUSH
58632: LD_VAR 0 4
58636: PUSH
58637: FOR_IN
58638: IFFALSE 58684
// for j = 1 to 3 do
58640: LD_ADDR_VAR 0 3
58644: PUSH
58645: DOUBLE
58646: LD_INT 1
58648: DEC
58649: ST_TO_ADDR
58650: LD_INT 3
58652: PUSH
58653: FOR_TO
58654: IFFALSE 58680
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
58656: LD_VAR 0 2
58660: PPUSH
58661: CALL_OW 274
58665: PPUSH
58666: LD_VAR 0 3
58670: PPUSH
58671: LD_INT 99999
58673: PPUSH
58674: CALL_OW 277
58678: GO 58653
58680: POP
58681: POP
58682: GO 58637
58684: POP
58685: POP
// end ;
58686: LD_VAR 0 1
58690: RET
// export function hHackSetLevel10 ; var i , j ; begin
58691: LD_INT 0
58693: PPUSH
58694: PPUSH
58695: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58696: LD_ADDR_VAR 0 2
58700: PUSH
58701: LD_INT 21
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PPUSH
58711: CALL_OW 69
58715: PUSH
58716: FOR_IN
58717: IFFALSE 58769
// if IsSelected ( i ) then
58719: LD_VAR 0 2
58723: PPUSH
58724: CALL_OW 306
58728: IFFALSE 58767
// begin for j := 1 to 4 do
58730: LD_ADDR_VAR 0 3
58734: PUSH
58735: DOUBLE
58736: LD_INT 1
58738: DEC
58739: ST_TO_ADDR
58740: LD_INT 4
58742: PUSH
58743: FOR_TO
58744: IFFALSE 58765
// SetSkill ( i , j , 10 ) ;
58746: LD_VAR 0 2
58750: PPUSH
58751: LD_VAR 0 3
58755: PPUSH
58756: LD_INT 10
58758: PPUSH
58759: CALL_OW 237
58763: GO 58743
58765: POP
58766: POP
// end ;
58767: GO 58716
58769: POP
58770: POP
// end ;
58771: LD_VAR 0 1
58775: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
58776: LD_INT 0
58778: PPUSH
58779: PPUSH
58780: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
58781: LD_ADDR_VAR 0 2
58785: PUSH
58786: LD_INT 22
58788: PUSH
58789: LD_OWVAR 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 21
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PPUSH
58812: CALL_OW 69
58816: PUSH
58817: FOR_IN
58818: IFFALSE 58859
// begin for j := 1 to 4 do
58820: LD_ADDR_VAR 0 3
58824: PUSH
58825: DOUBLE
58826: LD_INT 1
58828: DEC
58829: ST_TO_ADDR
58830: LD_INT 4
58832: PUSH
58833: FOR_TO
58834: IFFALSE 58855
// SetSkill ( i , j , 10 ) ;
58836: LD_VAR 0 2
58840: PPUSH
58841: LD_VAR 0 3
58845: PPUSH
58846: LD_INT 10
58848: PPUSH
58849: CALL_OW 237
58853: GO 58833
58855: POP
58856: POP
// end ;
58857: GO 58817
58859: POP
58860: POP
// end ;
58861: LD_VAR 0 1
58865: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
58866: LD_INT 0
58868: PPUSH
// uc_side := your_side ;
58869: LD_ADDR_OWVAR 20
58873: PUSH
58874: LD_OWVAR 2
58878: ST_TO_ADDR
// uc_nation := nation ;
58879: LD_ADDR_OWVAR 21
58883: PUSH
58884: LD_VAR 0 1
58888: ST_TO_ADDR
// InitHc ;
58889: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
58893: LD_INT 0
58895: PPUSH
58896: LD_VAR 0 2
58900: PPUSH
58901: LD_VAR 0 3
58905: PPUSH
58906: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
58910: LD_VAR 0 4
58914: PPUSH
58915: LD_VAR 0 5
58919: PPUSH
58920: CALL_OW 428
58924: PUSH
58925: LD_INT 0
58927: EQUAL
58928: IFFALSE 58952
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
58930: CALL_OW 44
58934: PPUSH
58935: LD_VAR 0 4
58939: PPUSH
58940: LD_VAR 0 5
58944: PPUSH
58945: LD_INT 1
58947: PPUSH
58948: CALL_OW 48
// end ;
58952: LD_VAR 0 6
58956: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
58957: LD_INT 0
58959: PPUSH
58960: PPUSH
// uc_side := your_side ;
58961: LD_ADDR_OWVAR 20
58965: PUSH
58966: LD_OWVAR 2
58970: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
58971: LD_VAR 0 1
58975: PUSH
58976: LD_INT 1
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: LD_INT 3
58984: PUSH
58985: LD_INT 4
58987: PUSH
58988: LD_INT 5
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: IN
58998: IFFALSE 59010
// uc_nation := nation_american else
59000: LD_ADDR_OWVAR 21
59004: PUSH
59005: LD_INT 1
59007: ST_TO_ADDR
59008: GO 59053
// if chassis in [ 11 , 12 , 13 , 14 ] then
59010: LD_VAR 0 1
59014: PUSH
59015: LD_INT 11
59017: PUSH
59018: LD_INT 12
59020: PUSH
59021: LD_INT 13
59023: PUSH
59024: LD_INT 14
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: IN
59033: IFFALSE 59045
// uc_nation := nation_arabian else
59035: LD_ADDR_OWVAR 21
59039: PUSH
59040: LD_INT 2
59042: ST_TO_ADDR
59043: GO 59053
// uc_nation := nation_russian ;
59045: LD_ADDR_OWVAR 21
59049: PUSH
59050: LD_INT 3
59052: ST_TO_ADDR
// vc_chassis := chassis ;
59053: LD_ADDR_OWVAR 37
59057: PUSH
59058: LD_VAR 0 1
59062: ST_TO_ADDR
// vc_engine := engine ;
59063: LD_ADDR_OWVAR 39
59067: PUSH
59068: LD_VAR 0 2
59072: ST_TO_ADDR
// vc_control := control ;
59073: LD_ADDR_OWVAR 38
59077: PUSH
59078: LD_VAR 0 3
59082: ST_TO_ADDR
// vc_weapon := weapon ;
59083: LD_ADDR_OWVAR 40
59087: PUSH
59088: LD_VAR 0 4
59092: ST_TO_ADDR
// un := CreateVehicle ;
59093: LD_ADDR_VAR 0 8
59097: PUSH
59098: CALL_OW 45
59102: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
59103: LD_VAR 0 8
59107: PPUSH
59108: LD_INT 0
59110: PPUSH
59111: LD_INT 5
59113: PPUSH
59114: CALL_OW 12
59118: PPUSH
59119: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
59123: LD_VAR 0 8
59127: PPUSH
59128: LD_VAR 0 5
59132: PPUSH
59133: LD_VAR 0 6
59137: PPUSH
59138: LD_INT 1
59140: PPUSH
59141: CALL_OW 48
// end ;
59145: LD_VAR 0 7
59149: RET
// export hInvincible ; every 1 do
59150: GO 59152
59152: DISABLE
// hInvincible := [ ] ;
59153: LD_ADDR_EXP 89
59157: PUSH
59158: EMPTY
59159: ST_TO_ADDR
59160: END
// every 10 do var i ;
59161: GO 59163
59163: DISABLE
59164: LD_INT 0
59166: PPUSH
// begin enable ;
59167: ENABLE
// if not hInvincible then
59168: LD_EXP 89
59172: NOT
59173: IFFALSE 59177
// exit ;
59175: GO 59221
// for i in hInvincible do
59177: LD_ADDR_VAR 0 1
59181: PUSH
59182: LD_EXP 89
59186: PUSH
59187: FOR_IN
59188: IFFALSE 59219
// if GetLives ( i ) < 1000 then
59190: LD_VAR 0 1
59194: PPUSH
59195: CALL_OW 256
59199: PUSH
59200: LD_INT 1000
59202: LESS
59203: IFFALSE 59217
// SetLives ( i , 1000 ) ;
59205: LD_VAR 0 1
59209: PPUSH
59210: LD_INT 1000
59212: PPUSH
59213: CALL_OW 234
59217: GO 59187
59219: POP
59220: POP
// end ;
59221: PPOPN 1
59223: END
// export function hHackInvincible ; var i ; begin
59224: LD_INT 0
59226: PPUSH
59227: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
59228: LD_ADDR_VAR 0 2
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: LD_INT 21
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 21
59248: PUSH
59249: LD_INT 2
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: LIST
59260: PPUSH
59261: CALL_OW 69
59265: PUSH
59266: FOR_IN
59267: IFFALSE 59328
// if IsSelected ( i ) then
59269: LD_VAR 0 2
59273: PPUSH
59274: CALL_OW 306
59278: IFFALSE 59326
// begin if i in hInvincible then
59280: LD_VAR 0 2
59284: PUSH
59285: LD_EXP 89
59289: IN
59290: IFFALSE 59310
// hInvincible := hInvincible diff i else
59292: LD_ADDR_EXP 89
59296: PUSH
59297: LD_EXP 89
59301: PUSH
59302: LD_VAR 0 2
59306: DIFF
59307: ST_TO_ADDR
59308: GO 59326
// hInvincible := hInvincible union i ;
59310: LD_ADDR_EXP 89
59314: PUSH
59315: LD_EXP 89
59319: PUSH
59320: LD_VAR 0 2
59324: UNION
59325: ST_TO_ADDR
// end ;
59326: GO 59266
59328: POP
59329: POP
// end ;
59330: LD_VAR 0 1
59334: RET
// export function hHackInvisible ; var i , j ; begin
59335: LD_INT 0
59337: PPUSH
59338: PPUSH
59339: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59340: LD_ADDR_VAR 0 2
59344: PUSH
59345: LD_INT 21
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PPUSH
59355: CALL_OW 69
59359: PUSH
59360: FOR_IN
59361: IFFALSE 59385
// if IsSelected ( i ) then
59363: LD_VAR 0 2
59367: PPUSH
59368: CALL_OW 306
59372: IFFALSE 59383
// ComForceInvisible ( i ) ;
59374: LD_VAR 0 2
59378: PPUSH
59379: CALL_OW 496
59383: GO 59360
59385: POP
59386: POP
// end ;
59387: LD_VAR 0 1
59391: RET
// export function hHackChangeYourSide ; begin
59392: LD_INT 0
59394: PPUSH
// if your_side = 8 then
59395: LD_OWVAR 2
59399: PUSH
59400: LD_INT 8
59402: EQUAL
59403: IFFALSE 59415
// your_side := 0 else
59405: LD_ADDR_OWVAR 2
59409: PUSH
59410: LD_INT 0
59412: ST_TO_ADDR
59413: GO 59429
// your_side := your_side + 1 ;
59415: LD_ADDR_OWVAR 2
59419: PUSH
59420: LD_OWVAR 2
59424: PUSH
59425: LD_INT 1
59427: PLUS
59428: ST_TO_ADDR
// end ;
59429: LD_VAR 0 1
59433: RET
// export function hHackChangeUnitSide ; var i , j ; begin
59434: LD_INT 0
59436: PPUSH
59437: PPUSH
59438: PPUSH
// for i in all_units do
59439: LD_ADDR_VAR 0 2
59443: PUSH
59444: LD_OWVAR 3
59448: PUSH
59449: FOR_IN
59450: IFFALSE 59528
// if IsSelected ( i ) then
59452: LD_VAR 0 2
59456: PPUSH
59457: CALL_OW 306
59461: IFFALSE 59526
// begin j := GetSide ( i ) ;
59463: LD_ADDR_VAR 0 3
59467: PUSH
59468: LD_VAR 0 2
59472: PPUSH
59473: CALL_OW 255
59477: ST_TO_ADDR
// if j = 8 then
59478: LD_VAR 0 3
59482: PUSH
59483: LD_INT 8
59485: EQUAL
59486: IFFALSE 59498
// j := 0 else
59488: LD_ADDR_VAR 0 3
59492: PUSH
59493: LD_INT 0
59495: ST_TO_ADDR
59496: GO 59512
// j := j + 1 ;
59498: LD_ADDR_VAR 0 3
59502: PUSH
59503: LD_VAR 0 3
59507: PUSH
59508: LD_INT 1
59510: PLUS
59511: ST_TO_ADDR
// SetSide ( i , j ) ;
59512: LD_VAR 0 2
59516: PPUSH
59517: LD_VAR 0 3
59521: PPUSH
59522: CALL_OW 235
// end ;
59526: GO 59449
59528: POP
59529: POP
// end ;
59530: LD_VAR 0 1
59534: RET
// export function hHackFog ; begin
59535: LD_INT 0
59537: PPUSH
// FogOff ( true ) ;
59538: LD_INT 1
59540: PPUSH
59541: CALL_OW 344
// end ;
59545: LD_VAR 0 1
59549: RET
// export function hHackTeleport ( unit , x , y ) ; begin
59550: LD_INT 0
59552: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
59553: LD_VAR 0 1
59557: PPUSH
59558: LD_VAR 0 2
59562: PPUSH
59563: LD_VAR 0 3
59567: PPUSH
59568: LD_INT 1
59570: PPUSH
59571: LD_INT 1
59573: PPUSH
59574: CALL_OW 483
// CenterOnXY ( x , y ) ;
59578: LD_VAR 0 2
59582: PPUSH
59583: LD_VAR 0 3
59587: PPUSH
59588: CALL_OW 84
// end ;
59592: LD_VAR 0 4
59596: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59597: LD_INT 0
59599: PPUSH
59600: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59601: LD_VAR 0 1
59605: NOT
59606: PUSH
59607: LD_VAR 0 2
59611: PPUSH
59612: LD_VAR 0 3
59616: PPUSH
59617: CALL_OW 488
59621: NOT
59622: OR
59623: PUSH
59624: LD_VAR 0 1
59628: PPUSH
59629: CALL_OW 266
59633: PUSH
59634: LD_INT 3
59636: NONEQUAL
59637: PUSH
59638: LD_VAR 0 1
59642: PPUSH
59643: CALL_OW 247
59647: PUSH
59648: LD_INT 1
59650: EQUAL
59651: NOT
59652: AND
59653: OR
59654: IFFALSE 59658
// exit ;
59656: GO 59807
// if GetType ( factory ) = unit_human then
59658: LD_VAR 0 1
59662: PPUSH
59663: CALL_OW 247
59667: PUSH
59668: LD_INT 1
59670: EQUAL
59671: IFFALSE 59688
// factory := IsInUnit ( factory ) ;
59673: LD_ADDR_VAR 0 1
59677: PUSH
59678: LD_VAR 0 1
59682: PPUSH
59683: CALL_OW 310
59687: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59688: LD_VAR 0 1
59692: PPUSH
59693: CALL_OW 266
59697: PUSH
59698: LD_INT 3
59700: NONEQUAL
59701: IFFALSE 59705
// exit ;
59703: GO 59807
// if HexInfo ( x , y ) = factory then
59705: LD_VAR 0 2
59709: PPUSH
59710: LD_VAR 0 3
59714: PPUSH
59715: CALL_OW 428
59719: PUSH
59720: LD_VAR 0 1
59724: EQUAL
59725: IFFALSE 59752
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
59727: LD_ADDR_EXP 90
59731: PUSH
59732: LD_EXP 90
59736: PPUSH
59737: LD_VAR 0 1
59741: PPUSH
59742: LD_INT 0
59744: PPUSH
59745: CALL_OW 1
59749: ST_TO_ADDR
59750: GO 59803
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
59752: LD_ADDR_EXP 90
59756: PUSH
59757: LD_EXP 90
59761: PPUSH
59762: LD_VAR 0 1
59766: PPUSH
59767: LD_VAR 0 1
59771: PPUSH
59772: CALL_OW 255
59776: PUSH
59777: LD_VAR 0 1
59781: PUSH
59782: LD_VAR 0 2
59786: PUSH
59787: LD_VAR 0 3
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: PPUSH
59798: CALL_OW 1
59802: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59803: CALL 59812 0 0
// end ;
59807: LD_VAR 0 4
59811: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59812: LD_INT 0
59814: PPUSH
59815: PPUSH
59816: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59817: LD_STRING resetFactoryWaypoint();
59819: PPUSH
59820: CALL_OW 559
// if factoryWaypoints then
59824: LD_EXP 90
59828: IFFALSE 59954
// begin list := PrepareArray ( factoryWaypoints ) ;
59830: LD_ADDR_VAR 0 3
59834: PUSH
59835: LD_EXP 90
59839: PPUSH
59840: CALL 42465 0 1
59844: ST_TO_ADDR
// for i := 1 to list do
59845: LD_ADDR_VAR 0 2
59849: PUSH
59850: DOUBLE
59851: LD_INT 1
59853: DEC
59854: ST_TO_ADDR
59855: LD_VAR 0 3
59859: PUSH
59860: FOR_TO
59861: IFFALSE 59952
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59863: LD_STRING setFactoryWaypointXY(
59865: PUSH
59866: LD_VAR 0 3
59870: PUSH
59871: LD_VAR 0 2
59875: ARRAY
59876: PUSH
59877: LD_INT 1
59879: ARRAY
59880: STR
59881: PUSH
59882: LD_STRING ,
59884: STR
59885: PUSH
59886: LD_VAR 0 3
59890: PUSH
59891: LD_VAR 0 2
59895: ARRAY
59896: PUSH
59897: LD_INT 2
59899: ARRAY
59900: STR
59901: PUSH
59902: LD_STRING ,
59904: STR
59905: PUSH
59906: LD_VAR 0 3
59910: PUSH
59911: LD_VAR 0 2
59915: ARRAY
59916: PUSH
59917: LD_INT 3
59919: ARRAY
59920: STR
59921: PUSH
59922: LD_STRING ,
59924: STR
59925: PUSH
59926: LD_VAR 0 3
59930: PUSH
59931: LD_VAR 0 2
59935: ARRAY
59936: PUSH
59937: LD_INT 4
59939: ARRAY
59940: STR
59941: PUSH
59942: LD_STRING )
59944: STR
59945: PPUSH
59946: CALL_OW 559
59950: GO 59860
59952: POP
59953: POP
// end ; end ;
59954: LD_VAR 0 1
59958: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59959: LD_INT 0
59961: PPUSH
// if HexInfo ( x , y ) = warehouse then
59962: LD_VAR 0 2
59966: PPUSH
59967: LD_VAR 0 3
59971: PPUSH
59972: CALL_OW 428
59976: PUSH
59977: LD_VAR 0 1
59981: EQUAL
59982: IFFALSE 60009
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59984: LD_ADDR_EXP 91
59988: PUSH
59989: LD_EXP 91
59993: PPUSH
59994: LD_VAR 0 1
59998: PPUSH
59999: LD_INT 0
60001: PPUSH
60002: CALL_OW 1
60006: ST_TO_ADDR
60007: GO 60060
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60009: LD_ADDR_EXP 91
60013: PUSH
60014: LD_EXP 91
60018: PPUSH
60019: LD_VAR 0 1
60023: PPUSH
60024: LD_VAR 0 1
60028: PPUSH
60029: CALL_OW 255
60033: PUSH
60034: LD_VAR 0 1
60038: PUSH
60039: LD_VAR 0 2
60043: PUSH
60044: LD_VAR 0 3
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: PPUSH
60055: CALL_OW 1
60059: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60060: CALL 60069 0 0
// end ;
60064: LD_VAR 0 4
60068: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60069: LD_INT 0
60071: PPUSH
60072: PPUSH
60073: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60074: LD_STRING resetWarehouseGatheringPoints();
60076: PPUSH
60077: CALL_OW 559
// if warehouseGatheringPoints then
60081: LD_EXP 91
60085: IFFALSE 60211
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60087: LD_ADDR_VAR 0 3
60091: PUSH
60092: LD_EXP 91
60096: PPUSH
60097: CALL 42465 0 1
60101: ST_TO_ADDR
// for i := 1 to list do
60102: LD_ADDR_VAR 0 2
60106: PUSH
60107: DOUBLE
60108: LD_INT 1
60110: DEC
60111: ST_TO_ADDR
60112: LD_VAR 0 3
60116: PUSH
60117: FOR_TO
60118: IFFALSE 60209
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60120: LD_STRING setWarehouseGatheringPointXY(
60122: PUSH
60123: LD_VAR 0 3
60127: PUSH
60128: LD_VAR 0 2
60132: ARRAY
60133: PUSH
60134: LD_INT 1
60136: ARRAY
60137: STR
60138: PUSH
60139: LD_STRING ,
60141: STR
60142: PUSH
60143: LD_VAR 0 3
60147: PUSH
60148: LD_VAR 0 2
60152: ARRAY
60153: PUSH
60154: LD_INT 2
60156: ARRAY
60157: STR
60158: PUSH
60159: LD_STRING ,
60161: STR
60162: PUSH
60163: LD_VAR 0 3
60167: PUSH
60168: LD_VAR 0 2
60172: ARRAY
60173: PUSH
60174: LD_INT 3
60176: ARRAY
60177: STR
60178: PUSH
60179: LD_STRING ,
60181: STR
60182: PUSH
60183: LD_VAR 0 3
60187: PUSH
60188: LD_VAR 0 2
60192: ARRAY
60193: PUSH
60194: LD_INT 4
60196: ARRAY
60197: STR
60198: PUSH
60199: LD_STRING )
60201: STR
60202: PPUSH
60203: CALL_OW 559
60207: GO 60117
60209: POP
60210: POP
// end ; end ;
60211: LD_VAR 0 1
60215: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
60216: LD_EXP 91
60220: IFFALSE 60907
60222: GO 60224
60224: DISABLE
60225: LD_INT 0
60227: PPUSH
60228: PPUSH
60229: PPUSH
60230: PPUSH
60231: PPUSH
60232: PPUSH
60233: PPUSH
60234: PPUSH
60235: PPUSH
// begin enable ;
60236: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
60237: LD_ADDR_VAR 0 3
60241: PUSH
60242: LD_EXP 91
60246: PPUSH
60247: CALL 42465 0 1
60251: ST_TO_ADDR
// if not list then
60252: LD_VAR 0 3
60256: NOT
60257: IFFALSE 60261
// exit ;
60259: GO 60907
// for i := 1 to list do
60261: LD_ADDR_VAR 0 1
60265: PUSH
60266: DOUBLE
60267: LD_INT 1
60269: DEC
60270: ST_TO_ADDR
60271: LD_VAR 0 3
60275: PUSH
60276: FOR_TO
60277: IFFALSE 60905
// begin depot := list [ i ] [ 2 ] ;
60279: LD_ADDR_VAR 0 8
60283: PUSH
60284: LD_VAR 0 3
60288: PUSH
60289: LD_VAR 0 1
60293: ARRAY
60294: PUSH
60295: LD_INT 2
60297: ARRAY
60298: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
60299: LD_ADDR_VAR 0 5
60303: PUSH
60304: LD_VAR 0 3
60308: PUSH
60309: LD_VAR 0 1
60313: ARRAY
60314: PUSH
60315: LD_INT 1
60317: ARRAY
60318: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
60319: LD_VAR 0 8
60323: PPUSH
60324: CALL_OW 301
60328: PUSH
60329: LD_VAR 0 5
60333: PUSH
60334: LD_VAR 0 8
60338: PPUSH
60339: CALL_OW 255
60343: NONEQUAL
60344: OR
60345: IFFALSE 60374
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
60347: LD_ADDR_EXP 91
60351: PUSH
60352: LD_EXP 91
60356: PPUSH
60357: LD_VAR 0 8
60361: PPUSH
60362: LD_INT 0
60364: PPUSH
60365: CALL_OW 1
60369: ST_TO_ADDR
// exit ;
60370: POP
60371: POP
60372: GO 60907
// end ; x := list [ i ] [ 3 ] ;
60374: LD_ADDR_VAR 0 6
60378: PUSH
60379: LD_VAR 0 3
60383: PUSH
60384: LD_VAR 0 1
60388: ARRAY
60389: PUSH
60390: LD_INT 3
60392: ARRAY
60393: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
60394: LD_ADDR_VAR 0 7
60398: PUSH
60399: LD_VAR 0 3
60403: PUSH
60404: LD_VAR 0 1
60408: ARRAY
60409: PUSH
60410: LD_INT 4
60412: ARRAY
60413: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
60414: LD_ADDR_VAR 0 9
60418: PUSH
60419: LD_VAR 0 6
60423: PPUSH
60424: LD_VAR 0 7
60428: PPUSH
60429: LD_INT 16
60431: PPUSH
60432: CALL 41049 0 3
60436: ST_TO_ADDR
// if not cratesNearbyPoint then
60437: LD_VAR 0 9
60441: NOT
60442: IFFALSE 60448
// exit ;
60444: POP
60445: POP
60446: GO 60907
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
60448: LD_ADDR_VAR 0 4
60452: PUSH
60453: LD_INT 22
60455: PUSH
60456: LD_VAR 0 5
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 3
60467: PUSH
60468: LD_INT 60
60470: PUSH
60471: EMPTY
60472: LIST
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 91
60480: PUSH
60481: LD_VAR 0 8
60485: PUSH
60486: LD_INT 6
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 2
60496: PUSH
60497: LD_INT 25
60499: PUSH
60500: LD_INT 2
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 25
60509: PUSH
60510: LD_INT 16
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: LIST
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: PPUSH
60528: CALL_OW 69
60532: PUSH
60533: LD_VAR 0 8
60537: PPUSH
60538: CALL_OW 313
60542: PPUSH
60543: LD_INT 3
60545: PUSH
60546: LD_INT 60
60548: PUSH
60549: EMPTY
60550: LIST
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 2
60558: PUSH
60559: LD_INT 25
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 25
60571: PUSH
60572: LD_INT 16
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: LIST
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PPUSH
60588: CALL_OW 72
60592: UNION
60593: ST_TO_ADDR
// if tmp then
60594: LD_VAR 0 4
60598: IFFALSE 60678
// begin tmp := ShrinkArray ( tmp , 3 ) ;
60600: LD_ADDR_VAR 0 4
60604: PUSH
60605: LD_VAR 0 4
60609: PPUSH
60610: LD_INT 3
60612: PPUSH
60613: CALL 39016 0 2
60617: ST_TO_ADDR
// for j in tmp do
60618: LD_ADDR_VAR 0 2
60622: PUSH
60623: LD_VAR 0 4
60627: PUSH
60628: FOR_IN
60629: IFFALSE 60672
// begin if IsInUnit ( j ) then
60631: LD_VAR 0 2
60635: PPUSH
60636: CALL_OW 310
60640: IFFALSE 60651
// ComExit ( j ) ;
60642: LD_VAR 0 2
60646: PPUSH
60647: CALL 39099 0 1
// AddComCollect ( j , x , y ) ;
60651: LD_VAR 0 2
60655: PPUSH
60656: LD_VAR 0 6
60660: PPUSH
60661: LD_VAR 0 7
60665: PPUSH
60666: CALL_OW 177
// end ;
60670: GO 60628
60672: POP
60673: POP
// exit ;
60674: POP
60675: POP
60676: GO 60907
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
60678: LD_ADDR_VAR 0 4
60682: PUSH
60683: LD_INT 22
60685: PUSH
60686: LD_VAR 0 5
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 91
60697: PUSH
60698: LD_VAR 0 8
60702: PUSH
60703: LD_INT 8
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: LD_INT 34
60716: PUSH
60717: LD_INT 12
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 34
60726: PUSH
60727: LD_INT 51
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 34
60736: PUSH
60737: LD_INT 32
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 34
60746: PUSH
60747: LD_EXP 4
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: LIST
60767: PPUSH
60768: CALL_OW 69
60772: ST_TO_ADDR
// if tmp then
60773: LD_VAR 0 4
60777: IFFALSE 60903
// begin for j in tmp do
60779: LD_ADDR_VAR 0 2
60783: PUSH
60784: LD_VAR 0 4
60788: PUSH
60789: FOR_IN
60790: IFFALSE 60901
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
60792: LD_VAR 0 2
60796: PPUSH
60797: CALL_OW 262
60801: PUSH
60802: LD_INT 3
60804: EQUAL
60805: PUSH
60806: LD_VAR 0 2
60810: PPUSH
60811: CALL_OW 261
60815: PUSH
60816: LD_INT 20
60818: GREATER
60819: OR
60820: PUSH
60821: LD_VAR 0 2
60825: PPUSH
60826: CALL_OW 314
60830: NOT
60831: AND
60832: PUSH
60833: LD_VAR 0 2
60837: PPUSH
60838: CALL_OW 263
60842: PUSH
60843: LD_INT 1
60845: NONEQUAL
60846: PUSH
60847: LD_VAR 0 2
60851: PPUSH
60852: CALL_OW 311
60856: OR
60857: AND
60858: IFFALSE 60899
// begin ComCollect ( j , x , y ) ;
60860: LD_VAR 0 2
60864: PPUSH
60865: LD_VAR 0 6
60869: PPUSH
60870: LD_VAR 0 7
60874: PPUSH
60875: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
60879: LD_VAR 0 2
60883: PPUSH
60884: LD_VAR 0 8
60888: PPUSH
60889: CALL_OW 172
// exit ;
60893: POP
60894: POP
60895: POP
60896: POP
60897: GO 60907
// end ;
60899: GO 60789
60901: POP
60902: POP
// end ; end ;
60903: GO 60276
60905: POP
60906: POP
// end ; end_of_file end_of_file
60907: PPOPN 9
60909: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
60910: LD_INT 0
60912: PPUSH
60913: PPUSH
60914: PPUSH
60915: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
60916: LD_VAR 0 1
60920: PPUSH
60921: CALL_OW 264
60925: PUSH
60926: LD_EXP 7
60930: EQUAL
60931: IFFALSE 61003
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60933: LD_INT 68
60935: PPUSH
60936: LD_VAR 0 1
60940: PPUSH
60941: CALL_OW 255
60945: PPUSH
60946: CALL_OW 321
60950: PUSH
60951: LD_INT 2
60953: EQUAL
60954: IFFALSE 60966
// eff := 70 else
60956: LD_ADDR_VAR 0 4
60960: PUSH
60961: LD_INT 70
60963: ST_TO_ADDR
60964: GO 60974
// eff := 30 ;
60966: LD_ADDR_VAR 0 4
60970: PUSH
60971: LD_INT 30
60973: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60974: LD_VAR 0 1
60978: PPUSH
60979: CALL_OW 250
60983: PPUSH
60984: LD_VAR 0 1
60988: PPUSH
60989: CALL_OW 251
60993: PPUSH
60994: LD_VAR 0 4
60998: PPUSH
60999: CALL_OW 495
// end ; end ;
61003: LD_VAR 0 2
61007: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
61008: LD_INT 0
61010: PPUSH
// end ;
61011: LD_VAR 0 4
61015: RET
// export function SOS_Command ( cmd ) ; begin
61016: LD_INT 0
61018: PPUSH
// end ;
61019: LD_VAR 0 2
61023: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
61024: LD_INT 0
61026: PPUSH
// end ;
61027: LD_VAR 0 6
61031: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
61032: LD_INT 0
61034: PPUSH
61035: PPUSH
// if not vehicle or not factory then
61036: LD_VAR 0 1
61040: NOT
61041: PUSH
61042: LD_VAR 0 2
61046: NOT
61047: OR
61048: IFFALSE 61052
// exit ;
61050: GO 61283
// if factoryWaypoints >= factory then
61052: LD_EXP 90
61056: PUSH
61057: LD_VAR 0 2
61061: GREATEREQUAL
61062: IFFALSE 61283
// if factoryWaypoints [ factory ] then
61064: LD_EXP 90
61068: PUSH
61069: LD_VAR 0 2
61073: ARRAY
61074: IFFALSE 61283
// begin if GetControl ( vehicle ) = control_manual then
61076: LD_VAR 0 1
61080: PPUSH
61081: CALL_OW 263
61085: PUSH
61086: LD_INT 1
61088: EQUAL
61089: IFFALSE 61170
// begin driver := IsDrivenBy ( vehicle ) ;
61091: LD_ADDR_VAR 0 4
61095: PUSH
61096: LD_VAR 0 1
61100: PPUSH
61101: CALL_OW 311
61105: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61106: LD_VAR 0 4
61110: PPUSH
61111: LD_EXP 90
61115: PUSH
61116: LD_VAR 0 2
61120: ARRAY
61121: PUSH
61122: LD_INT 3
61124: ARRAY
61125: PPUSH
61126: LD_EXP 90
61130: PUSH
61131: LD_VAR 0 2
61135: ARRAY
61136: PUSH
61137: LD_INT 4
61139: ARRAY
61140: PPUSH
61141: CALL_OW 171
// AddComExitVehicle ( driver ) ;
61145: LD_VAR 0 4
61149: PPUSH
61150: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
61154: LD_VAR 0 4
61158: PPUSH
61159: LD_VAR 0 2
61163: PPUSH
61164: CALL_OW 180
// end else
61168: GO 61283
// if GetControl ( vehicle ) = control_remote then
61170: LD_VAR 0 1
61174: PPUSH
61175: CALL_OW 263
61179: PUSH
61180: LD_INT 2
61182: EQUAL
61183: IFFALSE 61244
// begin wait ( 0 0$2 ) ;
61185: LD_INT 70
61187: PPUSH
61188: CALL_OW 67
// if Connect ( vehicle ) then
61192: LD_VAR 0 1
61196: PPUSH
61197: CALL 9410 0 1
61201: IFFALSE 61242
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61203: LD_VAR 0 1
61207: PPUSH
61208: LD_EXP 90
61212: PUSH
61213: LD_VAR 0 2
61217: ARRAY
61218: PUSH
61219: LD_INT 3
61221: ARRAY
61222: PPUSH
61223: LD_EXP 90
61227: PUSH
61228: LD_VAR 0 2
61232: ARRAY
61233: PUSH
61234: LD_INT 4
61236: ARRAY
61237: PPUSH
61238: CALL_OW 171
// end else
61242: GO 61283
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61244: LD_VAR 0 1
61248: PPUSH
61249: LD_EXP 90
61253: PUSH
61254: LD_VAR 0 2
61258: ARRAY
61259: PUSH
61260: LD_INT 3
61262: ARRAY
61263: PPUSH
61264: LD_EXP 90
61268: PUSH
61269: LD_VAR 0 2
61273: ARRAY
61274: PUSH
61275: LD_INT 4
61277: ARRAY
61278: PPUSH
61279: CALL_OW 171
// end ; end ;
61283: LD_VAR 0 3
61287: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
61288: LD_INT 0
61290: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
61291: LD_VAR 0 1
61295: PUSH
61296: LD_INT 250
61298: EQUAL
61299: PUSH
61300: LD_VAR 0 2
61304: PPUSH
61305: CALL_OW 264
61309: PUSH
61310: LD_EXP 10
61314: EQUAL
61315: AND
61316: IFFALSE 61337
// MinerPlaceMine ( unit , x , y ) ;
61318: LD_VAR 0 2
61322: PPUSH
61323: LD_VAR 0 4
61327: PPUSH
61328: LD_VAR 0 5
61332: PPUSH
61333: CALL 63736 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
61337: LD_VAR 0 1
61341: PUSH
61342: LD_INT 251
61344: EQUAL
61345: PUSH
61346: LD_VAR 0 2
61350: PPUSH
61351: CALL_OW 264
61355: PUSH
61356: LD_EXP 10
61360: EQUAL
61361: AND
61362: IFFALSE 61383
// MinerDetonateMine ( unit , x , y ) ;
61364: LD_VAR 0 2
61368: PPUSH
61369: LD_VAR 0 4
61373: PPUSH
61374: LD_VAR 0 5
61378: PPUSH
61379: CALL 64013 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
61383: LD_VAR 0 1
61387: PUSH
61388: LD_INT 252
61390: EQUAL
61391: PUSH
61392: LD_VAR 0 2
61396: PPUSH
61397: CALL_OW 264
61401: PUSH
61402: LD_EXP 10
61406: EQUAL
61407: AND
61408: IFFALSE 61429
// MinerCreateMinefield ( unit , x , y ) ;
61410: LD_VAR 0 2
61414: PPUSH
61415: LD_VAR 0 4
61419: PPUSH
61420: LD_VAR 0 5
61424: PPUSH
61425: CALL 64430 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
61429: LD_VAR 0 1
61433: PUSH
61434: LD_INT 253
61436: EQUAL
61437: PUSH
61438: LD_VAR 0 2
61442: PPUSH
61443: CALL_OW 257
61447: PUSH
61448: LD_INT 5
61450: EQUAL
61451: AND
61452: IFFALSE 61473
// ComBinocular ( unit , x , y ) ;
61454: LD_VAR 0 2
61458: PPUSH
61459: LD_VAR 0 4
61463: PPUSH
61464: LD_VAR 0 5
61468: PPUSH
61469: CALL 64801 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
61473: LD_VAR 0 1
61477: PUSH
61478: LD_INT 254
61480: EQUAL
61481: PUSH
61482: LD_VAR 0 2
61486: PPUSH
61487: CALL_OW 264
61491: PUSH
61492: LD_EXP 5
61496: EQUAL
61497: AND
61498: PUSH
61499: LD_VAR 0 3
61503: PPUSH
61504: CALL_OW 263
61508: PUSH
61509: LD_INT 3
61511: EQUAL
61512: AND
61513: IFFALSE 61529
// HackDestroyVehicle ( unit , selectedUnit ) ;
61515: LD_VAR 0 2
61519: PPUSH
61520: LD_VAR 0 3
61524: PPUSH
61525: CALL 63096 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61529: LD_VAR 0 1
61533: PUSH
61534: LD_INT 255
61536: EQUAL
61537: PUSH
61538: LD_VAR 0 2
61542: PPUSH
61543: CALL_OW 264
61547: PUSH
61548: LD_INT 14
61550: PUSH
61551: LD_INT 53
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: IN
61558: AND
61559: PUSH
61560: LD_VAR 0 4
61564: PPUSH
61565: LD_VAR 0 5
61569: PPUSH
61570: CALL_OW 488
61574: AND
61575: IFFALSE 61599
// CutTreeXYR ( unit , x , y , 12 ) ;
61577: LD_VAR 0 2
61581: PPUSH
61582: LD_VAR 0 4
61586: PPUSH
61587: LD_VAR 0 5
61591: PPUSH
61592: LD_INT 12
61594: PPUSH
61595: CALL 61662 0 4
// if cmd = 256 then
61599: LD_VAR 0 1
61603: PUSH
61604: LD_INT 256
61606: EQUAL
61607: IFFALSE 61628
// SetFactoryWaypoint ( unit , x , y ) ;
61609: LD_VAR 0 2
61613: PPUSH
61614: LD_VAR 0 4
61618: PPUSH
61619: LD_VAR 0 5
61623: PPUSH
61624: CALL 59597 0 3
// if cmd = 257 then
61628: LD_VAR 0 1
61632: PUSH
61633: LD_INT 257
61635: EQUAL
61636: IFFALSE 61657
// SetWarehouseGatheringPoint ( unit , x , y ) ;
61638: LD_VAR 0 2
61642: PPUSH
61643: LD_VAR 0 4
61647: PPUSH
61648: LD_VAR 0 5
61652: PPUSH
61653: CALL 59959 0 3
// end ;
61657: LD_VAR 0 6
61661: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61662: LD_INT 0
61664: PPUSH
61665: PPUSH
61666: PPUSH
61667: PPUSH
61668: PPUSH
61669: PPUSH
61670: PPUSH
61671: PPUSH
61672: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
61673: LD_VAR 0 1
61677: NOT
61678: PUSH
61679: LD_VAR 0 2
61683: PPUSH
61684: LD_VAR 0 3
61688: PPUSH
61689: CALL_OW 488
61693: NOT
61694: OR
61695: PUSH
61696: LD_VAR 0 4
61700: NOT
61701: OR
61702: IFFALSE 61706
// exit ;
61704: GO 62046
// list := [ ] ;
61706: LD_ADDR_VAR 0 13
61710: PUSH
61711: EMPTY
61712: ST_TO_ADDR
// if x - r < 0 then
61713: LD_VAR 0 2
61717: PUSH
61718: LD_VAR 0 4
61722: MINUS
61723: PUSH
61724: LD_INT 0
61726: LESS
61727: IFFALSE 61739
// min_x := 0 else
61729: LD_ADDR_VAR 0 7
61733: PUSH
61734: LD_INT 0
61736: ST_TO_ADDR
61737: GO 61755
// min_x := x - r ;
61739: LD_ADDR_VAR 0 7
61743: PUSH
61744: LD_VAR 0 2
61748: PUSH
61749: LD_VAR 0 4
61753: MINUS
61754: ST_TO_ADDR
// if y - r < 0 then
61755: LD_VAR 0 3
61759: PUSH
61760: LD_VAR 0 4
61764: MINUS
61765: PUSH
61766: LD_INT 0
61768: LESS
61769: IFFALSE 61781
// min_y := 0 else
61771: LD_ADDR_VAR 0 8
61775: PUSH
61776: LD_INT 0
61778: ST_TO_ADDR
61779: GO 61797
// min_y := y - r ;
61781: LD_ADDR_VAR 0 8
61785: PUSH
61786: LD_VAR 0 3
61790: PUSH
61791: LD_VAR 0 4
61795: MINUS
61796: ST_TO_ADDR
// max_x := x + r ;
61797: LD_ADDR_VAR 0 9
61801: PUSH
61802: LD_VAR 0 2
61806: PUSH
61807: LD_VAR 0 4
61811: PLUS
61812: ST_TO_ADDR
// max_y := y + r ;
61813: LD_ADDR_VAR 0 10
61817: PUSH
61818: LD_VAR 0 3
61822: PUSH
61823: LD_VAR 0 4
61827: PLUS
61828: ST_TO_ADDR
// for _x = min_x to max_x do
61829: LD_ADDR_VAR 0 11
61833: PUSH
61834: DOUBLE
61835: LD_VAR 0 7
61839: DEC
61840: ST_TO_ADDR
61841: LD_VAR 0 9
61845: PUSH
61846: FOR_TO
61847: IFFALSE 61964
// for _y = min_y to max_y do
61849: LD_ADDR_VAR 0 12
61853: PUSH
61854: DOUBLE
61855: LD_VAR 0 8
61859: DEC
61860: ST_TO_ADDR
61861: LD_VAR 0 10
61865: PUSH
61866: FOR_TO
61867: IFFALSE 61960
// begin if not ValidHex ( _x , _y ) then
61869: LD_VAR 0 11
61873: PPUSH
61874: LD_VAR 0 12
61878: PPUSH
61879: CALL_OW 488
61883: NOT
61884: IFFALSE 61888
// continue ;
61886: GO 61866
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61888: LD_VAR 0 11
61892: PPUSH
61893: LD_VAR 0 12
61897: PPUSH
61898: CALL_OW 351
61902: PUSH
61903: LD_VAR 0 11
61907: PPUSH
61908: LD_VAR 0 12
61912: PPUSH
61913: CALL_OW 554
61917: AND
61918: IFFALSE 61958
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61920: LD_ADDR_VAR 0 13
61924: PUSH
61925: LD_VAR 0 13
61929: PPUSH
61930: LD_VAR 0 13
61934: PUSH
61935: LD_INT 1
61937: PLUS
61938: PPUSH
61939: LD_VAR 0 11
61943: PUSH
61944: LD_VAR 0 12
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PPUSH
61953: CALL_OW 2
61957: ST_TO_ADDR
// end ;
61958: GO 61866
61960: POP
61961: POP
61962: GO 61846
61964: POP
61965: POP
// if not list then
61966: LD_VAR 0 13
61970: NOT
61971: IFFALSE 61975
// exit ;
61973: GO 62046
// for i in list do
61975: LD_ADDR_VAR 0 6
61979: PUSH
61980: LD_VAR 0 13
61984: PUSH
61985: FOR_IN
61986: IFFALSE 62044
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
61988: LD_VAR 0 1
61992: PPUSH
61993: LD_STRING M
61995: PUSH
61996: LD_VAR 0 6
62000: PUSH
62001: LD_INT 1
62003: ARRAY
62004: PUSH
62005: LD_VAR 0 6
62009: PUSH
62010: LD_INT 2
62012: ARRAY
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: LD_INT 0
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: PUSH
62035: EMPTY
62036: LIST
62037: PPUSH
62038: CALL_OW 447
62042: GO 61985
62044: POP
62045: POP
// end ;
62046: LD_VAR 0 5
62050: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
62051: LD_EXP 93
62055: NOT
62056: IFFALSE 62106
62058: GO 62060
62060: DISABLE
// begin initHack := true ;
62061: LD_ADDR_EXP 93
62065: PUSH
62066: LD_INT 1
62068: ST_TO_ADDR
// hackTanks := [ ] ;
62069: LD_ADDR_EXP 94
62073: PUSH
62074: EMPTY
62075: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
62076: LD_ADDR_EXP 95
62080: PUSH
62081: EMPTY
62082: ST_TO_ADDR
// hackLimit := 3 ;
62083: LD_ADDR_EXP 96
62087: PUSH
62088: LD_INT 3
62090: ST_TO_ADDR
// hackDist := 12 ;
62091: LD_ADDR_EXP 97
62095: PUSH
62096: LD_INT 12
62098: ST_TO_ADDR
// hackCounter := [ ] ;
62099: LD_ADDR_EXP 98
62103: PUSH
62104: EMPTY
62105: ST_TO_ADDR
// end ;
62106: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
62107: LD_EXP 93
62111: PUSH
62112: LD_INT 34
62114: PUSH
62115: LD_EXP 5
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PPUSH
62124: CALL_OW 69
62128: AND
62129: IFFALSE 62384
62131: GO 62133
62133: DISABLE
62134: LD_INT 0
62136: PPUSH
62137: PPUSH
// begin enable ;
62138: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
62139: LD_ADDR_VAR 0 1
62143: PUSH
62144: LD_INT 34
62146: PUSH
62147: LD_EXP 5
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PPUSH
62156: CALL_OW 69
62160: PUSH
62161: FOR_IN
62162: IFFALSE 62382
// begin if not i in hackTanks then
62164: LD_VAR 0 1
62168: PUSH
62169: LD_EXP 94
62173: IN
62174: NOT
62175: IFFALSE 62258
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62177: LD_ADDR_EXP 94
62181: PUSH
62182: LD_EXP 94
62186: PPUSH
62187: LD_EXP 94
62191: PUSH
62192: LD_INT 1
62194: PLUS
62195: PPUSH
62196: LD_VAR 0 1
62200: PPUSH
62201: CALL_OW 1
62205: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62206: LD_ADDR_EXP 95
62210: PUSH
62211: LD_EXP 95
62215: PPUSH
62216: LD_EXP 95
62220: PUSH
62221: LD_INT 1
62223: PLUS
62224: PPUSH
62225: EMPTY
62226: PPUSH
62227: CALL_OW 1
62231: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62232: LD_ADDR_EXP 98
62236: PUSH
62237: LD_EXP 98
62241: PPUSH
62242: LD_EXP 98
62246: PUSH
62247: LD_INT 1
62249: PLUS
62250: PPUSH
62251: EMPTY
62252: PPUSH
62253: CALL_OW 1
62257: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62258: LD_VAR 0 1
62262: PPUSH
62263: CALL_OW 302
62267: NOT
62268: IFFALSE 62281
// begin HackUnlinkAll ( i ) ;
62270: LD_VAR 0 1
62274: PPUSH
62275: CALL 62387 0 1
// continue ;
62279: GO 62161
// end ; HackCheckCapturedStatus ( i ) ;
62281: LD_VAR 0 1
62285: PPUSH
62286: CALL 62830 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62290: LD_ADDR_VAR 0 2
62294: PUSH
62295: LD_INT 81
62297: PUSH
62298: LD_VAR 0 1
62302: PPUSH
62303: CALL_OW 255
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 33
62314: PUSH
62315: LD_INT 3
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 91
62324: PUSH
62325: LD_VAR 0 1
62329: PUSH
62330: LD_EXP 97
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 50
62342: PUSH
62343: EMPTY
62344: LIST
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: PPUSH
62352: CALL_OW 69
62356: ST_TO_ADDR
// if not tmp then
62357: LD_VAR 0 2
62361: NOT
62362: IFFALSE 62366
// continue ;
62364: GO 62161
// HackLink ( i , tmp ) ;
62366: LD_VAR 0 1
62370: PPUSH
62371: LD_VAR 0 2
62375: PPUSH
62376: CALL 62523 0 2
// end ;
62380: GO 62161
62382: POP
62383: POP
// end ;
62384: PPOPN 2
62386: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62387: LD_INT 0
62389: PPUSH
62390: PPUSH
62391: PPUSH
// if not hack in hackTanks then
62392: LD_VAR 0 1
62396: PUSH
62397: LD_EXP 94
62401: IN
62402: NOT
62403: IFFALSE 62407
// exit ;
62405: GO 62518
// index := GetElementIndex ( hackTanks , hack ) ;
62407: LD_ADDR_VAR 0 4
62411: PUSH
62412: LD_EXP 94
62416: PPUSH
62417: LD_VAR 0 1
62421: PPUSH
62422: CALL 6224 0 2
62426: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62427: LD_EXP 95
62431: PUSH
62432: LD_VAR 0 4
62436: ARRAY
62437: IFFALSE 62518
// begin for i in hackTanksCaptured [ index ] do
62439: LD_ADDR_VAR 0 3
62443: PUSH
62444: LD_EXP 95
62448: PUSH
62449: LD_VAR 0 4
62453: ARRAY
62454: PUSH
62455: FOR_IN
62456: IFFALSE 62482
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62458: LD_VAR 0 3
62462: PUSH
62463: LD_INT 1
62465: ARRAY
62466: PPUSH
62467: LD_VAR 0 3
62471: PUSH
62472: LD_INT 2
62474: ARRAY
62475: PPUSH
62476: CALL_OW 235
62480: GO 62455
62482: POP
62483: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62484: LD_ADDR_EXP 95
62488: PUSH
62489: LD_EXP 95
62493: PPUSH
62494: LD_VAR 0 4
62498: PPUSH
62499: EMPTY
62500: PPUSH
62501: CALL_OW 1
62505: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62506: LD_VAR 0 1
62510: PPUSH
62511: LD_INT 0
62513: PPUSH
62514: CALL_OW 505
// end ; end ;
62518: LD_VAR 0 2
62522: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62523: LD_INT 0
62525: PPUSH
62526: PPUSH
62527: PPUSH
// if not hack in hackTanks or not vehicles then
62528: LD_VAR 0 1
62532: PUSH
62533: LD_EXP 94
62537: IN
62538: NOT
62539: PUSH
62540: LD_VAR 0 2
62544: NOT
62545: OR
62546: IFFALSE 62550
// exit ;
62548: GO 62825
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62550: LD_ADDR_VAR 0 2
62554: PUSH
62555: LD_VAR 0 1
62559: PPUSH
62560: LD_VAR 0 2
62564: PPUSH
62565: LD_INT 1
62567: PPUSH
62568: LD_INT 1
62570: PPUSH
62571: CALL 6874 0 4
62575: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62576: LD_ADDR_VAR 0 5
62580: PUSH
62581: LD_EXP 94
62585: PPUSH
62586: LD_VAR 0 1
62590: PPUSH
62591: CALL 6224 0 2
62595: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62596: LD_EXP 95
62600: PUSH
62601: LD_VAR 0 5
62605: ARRAY
62606: PUSH
62607: LD_EXP 96
62611: LESS
62612: IFFALSE 62801
// begin for i := 1 to vehicles do
62614: LD_ADDR_VAR 0 4
62618: PUSH
62619: DOUBLE
62620: LD_INT 1
62622: DEC
62623: ST_TO_ADDR
62624: LD_VAR 0 2
62628: PUSH
62629: FOR_TO
62630: IFFALSE 62799
// begin if hackTanksCaptured [ index ] = hackLimit then
62632: LD_EXP 95
62636: PUSH
62637: LD_VAR 0 5
62641: ARRAY
62642: PUSH
62643: LD_EXP 96
62647: EQUAL
62648: IFFALSE 62652
// break ;
62650: GO 62799
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62652: LD_ADDR_EXP 98
62656: PUSH
62657: LD_EXP 98
62661: PPUSH
62662: LD_VAR 0 5
62666: PPUSH
62667: LD_EXP 98
62671: PUSH
62672: LD_VAR 0 5
62676: ARRAY
62677: PUSH
62678: LD_INT 1
62680: PLUS
62681: PPUSH
62682: CALL_OW 1
62686: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62687: LD_ADDR_EXP 95
62691: PUSH
62692: LD_EXP 95
62696: PPUSH
62697: LD_VAR 0 5
62701: PUSH
62702: LD_EXP 95
62706: PUSH
62707: LD_VAR 0 5
62711: ARRAY
62712: PUSH
62713: LD_INT 1
62715: PLUS
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PPUSH
62721: LD_VAR 0 2
62725: PUSH
62726: LD_VAR 0 4
62730: ARRAY
62731: PUSH
62732: LD_VAR 0 2
62736: PUSH
62737: LD_VAR 0 4
62741: ARRAY
62742: PPUSH
62743: CALL_OW 255
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PPUSH
62752: CALL 6439 0 3
62756: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62757: LD_VAR 0 2
62761: PUSH
62762: LD_VAR 0 4
62766: ARRAY
62767: PPUSH
62768: LD_VAR 0 1
62772: PPUSH
62773: CALL_OW 255
62777: PPUSH
62778: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62782: LD_VAR 0 2
62786: PUSH
62787: LD_VAR 0 4
62791: ARRAY
62792: PPUSH
62793: CALL_OW 141
// end ;
62797: GO 62629
62799: POP
62800: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62801: LD_VAR 0 1
62805: PPUSH
62806: LD_EXP 95
62810: PUSH
62811: LD_VAR 0 5
62815: ARRAY
62816: PUSH
62817: LD_INT 0
62819: PLUS
62820: PPUSH
62821: CALL_OW 505
// end ;
62825: LD_VAR 0 3
62829: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62830: LD_INT 0
62832: PPUSH
62833: PPUSH
62834: PPUSH
62835: PPUSH
// if not hack in hackTanks then
62836: LD_VAR 0 1
62840: PUSH
62841: LD_EXP 94
62845: IN
62846: NOT
62847: IFFALSE 62851
// exit ;
62849: GO 63091
// index := GetElementIndex ( hackTanks , hack ) ;
62851: LD_ADDR_VAR 0 4
62855: PUSH
62856: LD_EXP 94
62860: PPUSH
62861: LD_VAR 0 1
62865: PPUSH
62866: CALL 6224 0 2
62870: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62871: LD_ADDR_VAR 0 3
62875: PUSH
62876: DOUBLE
62877: LD_EXP 95
62881: PUSH
62882: LD_VAR 0 4
62886: ARRAY
62887: INC
62888: ST_TO_ADDR
62889: LD_INT 1
62891: PUSH
62892: FOR_DOWNTO
62893: IFFALSE 63065
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62895: LD_ADDR_VAR 0 5
62899: PUSH
62900: LD_EXP 95
62904: PUSH
62905: LD_VAR 0 4
62909: ARRAY
62910: PUSH
62911: LD_VAR 0 3
62915: ARRAY
62916: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62917: LD_VAR 0 5
62921: PUSH
62922: LD_INT 1
62924: ARRAY
62925: PPUSH
62926: CALL_OW 302
62930: NOT
62931: PUSH
62932: LD_VAR 0 5
62936: PUSH
62937: LD_INT 1
62939: ARRAY
62940: PPUSH
62941: CALL_OW 255
62945: PUSH
62946: LD_VAR 0 1
62950: PPUSH
62951: CALL_OW 255
62955: NONEQUAL
62956: OR
62957: IFFALSE 63063
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62959: LD_VAR 0 5
62963: PUSH
62964: LD_INT 1
62966: ARRAY
62967: PPUSH
62968: CALL_OW 305
62972: PUSH
62973: LD_VAR 0 5
62977: PUSH
62978: LD_INT 1
62980: ARRAY
62981: PPUSH
62982: CALL_OW 255
62986: PUSH
62987: LD_VAR 0 1
62991: PPUSH
62992: CALL_OW 255
62996: EQUAL
62997: AND
62998: IFFALSE 63022
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
63000: LD_VAR 0 5
63004: PUSH
63005: LD_INT 1
63007: ARRAY
63008: PPUSH
63009: LD_VAR 0 5
63013: PUSH
63014: LD_INT 2
63016: ARRAY
63017: PPUSH
63018: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
63022: LD_ADDR_EXP 95
63026: PUSH
63027: LD_EXP 95
63031: PPUSH
63032: LD_VAR 0 4
63036: PPUSH
63037: LD_EXP 95
63041: PUSH
63042: LD_VAR 0 4
63046: ARRAY
63047: PPUSH
63048: LD_VAR 0 3
63052: PPUSH
63053: CALL_OW 3
63057: PPUSH
63058: CALL_OW 1
63062: ST_TO_ADDR
// end ; end ;
63063: GO 62892
63065: POP
63066: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63067: LD_VAR 0 1
63071: PPUSH
63072: LD_EXP 95
63076: PUSH
63077: LD_VAR 0 4
63081: ARRAY
63082: PUSH
63083: LD_INT 0
63085: PLUS
63086: PPUSH
63087: CALL_OW 505
// end ;
63091: LD_VAR 0 2
63095: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
63096: LD_INT 0
63098: PPUSH
63099: PPUSH
63100: PPUSH
63101: PPUSH
// if not hack in hackTanks then
63102: LD_VAR 0 1
63106: PUSH
63107: LD_EXP 94
63111: IN
63112: NOT
63113: IFFALSE 63117
// exit ;
63115: GO 63202
// index := GetElementIndex ( hackTanks , hack ) ;
63117: LD_ADDR_VAR 0 5
63121: PUSH
63122: LD_EXP 94
63126: PPUSH
63127: LD_VAR 0 1
63131: PPUSH
63132: CALL 6224 0 2
63136: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
63137: LD_ADDR_VAR 0 4
63141: PUSH
63142: DOUBLE
63143: LD_INT 1
63145: DEC
63146: ST_TO_ADDR
63147: LD_EXP 95
63151: PUSH
63152: LD_VAR 0 5
63156: ARRAY
63157: PUSH
63158: FOR_TO
63159: IFFALSE 63200
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
63161: LD_EXP 95
63165: PUSH
63166: LD_VAR 0 5
63170: ARRAY
63171: PUSH
63172: LD_VAR 0 4
63176: ARRAY
63177: PUSH
63178: LD_INT 1
63180: ARRAY
63181: PUSH
63182: LD_VAR 0 2
63186: EQUAL
63187: IFFALSE 63198
// KillUnit ( vehicle ) ;
63189: LD_VAR 0 2
63193: PPUSH
63194: CALL_OW 66
63198: GO 63158
63200: POP
63201: POP
// end ;
63202: LD_VAR 0 3
63206: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
63207: LD_EXP 99
63211: NOT
63212: IFFALSE 63247
63214: GO 63216
63216: DISABLE
// begin initMiner := true ;
63217: LD_ADDR_EXP 99
63221: PUSH
63222: LD_INT 1
63224: ST_TO_ADDR
// minersList := [ ] ;
63225: LD_ADDR_EXP 100
63229: PUSH
63230: EMPTY
63231: ST_TO_ADDR
// minerMinesList := [ ] ;
63232: LD_ADDR_EXP 101
63236: PUSH
63237: EMPTY
63238: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
63239: LD_ADDR_EXP 102
63243: PUSH
63244: LD_INT 5
63246: ST_TO_ADDR
// end ;
63247: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
63248: LD_EXP 99
63252: PUSH
63253: LD_INT 34
63255: PUSH
63256: LD_EXP 10
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PPUSH
63265: CALL_OW 69
63269: AND
63270: IFFALSE 63733
63272: GO 63274
63274: DISABLE
63275: LD_INT 0
63277: PPUSH
63278: PPUSH
63279: PPUSH
63280: PPUSH
// begin enable ;
63281: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63282: LD_ADDR_VAR 0 1
63286: PUSH
63287: LD_INT 34
63289: PUSH
63290: LD_EXP 10
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PPUSH
63299: CALL_OW 69
63303: PUSH
63304: FOR_IN
63305: IFFALSE 63377
// begin if not i in minersList then
63307: LD_VAR 0 1
63311: PUSH
63312: LD_EXP 100
63316: IN
63317: NOT
63318: IFFALSE 63375
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63320: LD_ADDR_EXP 100
63324: PUSH
63325: LD_EXP 100
63329: PPUSH
63330: LD_EXP 100
63334: PUSH
63335: LD_INT 1
63337: PLUS
63338: PPUSH
63339: LD_VAR 0 1
63343: PPUSH
63344: CALL_OW 1
63348: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63349: LD_ADDR_EXP 101
63353: PUSH
63354: LD_EXP 101
63358: PPUSH
63359: LD_EXP 101
63363: PUSH
63364: LD_INT 1
63366: PLUS
63367: PPUSH
63368: EMPTY
63369: PPUSH
63370: CALL_OW 1
63374: ST_TO_ADDR
// end end ;
63375: GO 63304
63377: POP
63378: POP
// for i := minerMinesList downto 1 do
63379: LD_ADDR_VAR 0 1
63383: PUSH
63384: DOUBLE
63385: LD_EXP 101
63389: INC
63390: ST_TO_ADDR
63391: LD_INT 1
63393: PUSH
63394: FOR_DOWNTO
63395: IFFALSE 63731
// begin if IsLive ( minersList [ i ] ) then
63397: LD_EXP 100
63401: PUSH
63402: LD_VAR 0 1
63406: ARRAY
63407: PPUSH
63408: CALL_OW 300
63412: IFFALSE 63440
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
63414: LD_EXP 100
63418: PUSH
63419: LD_VAR 0 1
63423: ARRAY
63424: PPUSH
63425: LD_EXP 101
63429: PUSH
63430: LD_VAR 0 1
63434: ARRAY
63435: PPUSH
63436: CALL_OW 505
// if not minerMinesList [ i ] then
63440: LD_EXP 101
63444: PUSH
63445: LD_VAR 0 1
63449: ARRAY
63450: NOT
63451: IFFALSE 63455
// continue ;
63453: GO 63394
// for j := minerMinesList [ i ] downto 1 do
63455: LD_ADDR_VAR 0 2
63459: PUSH
63460: DOUBLE
63461: LD_EXP 101
63465: PUSH
63466: LD_VAR 0 1
63470: ARRAY
63471: INC
63472: ST_TO_ADDR
63473: LD_INT 1
63475: PUSH
63476: FOR_DOWNTO
63477: IFFALSE 63727
// begin side := GetSide ( minersList [ i ] ) ;
63479: LD_ADDR_VAR 0 3
63483: PUSH
63484: LD_EXP 100
63488: PUSH
63489: LD_VAR 0 1
63493: ARRAY
63494: PPUSH
63495: CALL_OW 255
63499: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63500: LD_ADDR_VAR 0 4
63504: PUSH
63505: LD_EXP 101
63509: PUSH
63510: LD_VAR 0 1
63514: ARRAY
63515: PUSH
63516: LD_VAR 0 2
63520: ARRAY
63521: PUSH
63522: LD_INT 1
63524: ARRAY
63525: PPUSH
63526: LD_EXP 101
63530: PUSH
63531: LD_VAR 0 1
63535: ARRAY
63536: PUSH
63537: LD_VAR 0 2
63541: ARRAY
63542: PUSH
63543: LD_INT 2
63545: ARRAY
63546: PPUSH
63547: CALL_OW 428
63551: ST_TO_ADDR
// if not tmp then
63552: LD_VAR 0 4
63556: NOT
63557: IFFALSE 63561
// continue ;
63559: GO 63476
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63561: LD_VAR 0 4
63565: PUSH
63566: LD_INT 81
63568: PUSH
63569: LD_VAR 0 3
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PPUSH
63578: CALL_OW 69
63582: IN
63583: PUSH
63584: LD_EXP 101
63588: PUSH
63589: LD_VAR 0 1
63593: ARRAY
63594: PUSH
63595: LD_VAR 0 2
63599: ARRAY
63600: PUSH
63601: LD_INT 1
63603: ARRAY
63604: PPUSH
63605: LD_EXP 101
63609: PUSH
63610: LD_VAR 0 1
63614: ARRAY
63615: PUSH
63616: LD_VAR 0 2
63620: ARRAY
63621: PUSH
63622: LD_INT 2
63624: ARRAY
63625: PPUSH
63626: CALL_OW 458
63630: AND
63631: IFFALSE 63725
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63633: LD_EXP 101
63637: PUSH
63638: LD_VAR 0 1
63642: ARRAY
63643: PUSH
63644: LD_VAR 0 2
63648: ARRAY
63649: PUSH
63650: LD_INT 1
63652: ARRAY
63653: PPUSH
63654: LD_EXP 101
63658: PUSH
63659: LD_VAR 0 1
63663: ARRAY
63664: PUSH
63665: LD_VAR 0 2
63669: ARRAY
63670: PUSH
63671: LD_INT 2
63673: ARRAY
63674: PPUSH
63675: LD_VAR 0 3
63679: PPUSH
63680: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63684: LD_ADDR_EXP 101
63688: PUSH
63689: LD_EXP 101
63693: PPUSH
63694: LD_VAR 0 1
63698: PPUSH
63699: LD_EXP 101
63703: PUSH
63704: LD_VAR 0 1
63708: ARRAY
63709: PPUSH
63710: LD_VAR 0 2
63714: PPUSH
63715: CALL_OW 3
63719: PPUSH
63720: CALL_OW 1
63724: ST_TO_ADDR
// end ; end ;
63725: GO 63476
63727: POP
63728: POP
// end ;
63729: GO 63394
63731: POP
63732: POP
// end ;
63733: PPOPN 4
63735: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
63736: LD_INT 0
63738: PPUSH
63739: PPUSH
// result := false ;
63740: LD_ADDR_VAR 0 4
63744: PUSH
63745: LD_INT 0
63747: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63748: LD_VAR 0 1
63752: PPUSH
63753: CALL_OW 264
63757: PUSH
63758: LD_EXP 10
63762: EQUAL
63763: NOT
63764: IFFALSE 63768
// exit ;
63766: GO 64008
// index := GetElementIndex ( minersList , unit ) ;
63768: LD_ADDR_VAR 0 5
63772: PUSH
63773: LD_EXP 100
63777: PPUSH
63778: LD_VAR 0 1
63782: PPUSH
63783: CALL 6224 0 2
63787: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63788: LD_EXP 101
63792: PUSH
63793: LD_VAR 0 5
63797: ARRAY
63798: PUSH
63799: LD_EXP 102
63803: GREATEREQUAL
63804: IFFALSE 63808
// exit ;
63806: GO 64008
// ComMoveXY ( unit , x , y ) ;
63808: LD_VAR 0 1
63812: PPUSH
63813: LD_VAR 0 2
63817: PPUSH
63818: LD_VAR 0 3
63822: PPUSH
63823: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63827: LD_INT 35
63829: PPUSH
63830: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63834: LD_VAR 0 1
63838: PPUSH
63839: LD_VAR 0 2
63843: PPUSH
63844: LD_VAR 0 3
63848: PPUSH
63849: CALL 37510 0 3
63853: NOT
63854: PUSH
63855: LD_VAR 0 1
63859: PPUSH
63860: CALL_OW 314
63864: AND
63865: IFFALSE 63869
// exit ;
63867: GO 64008
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63869: LD_VAR 0 2
63873: PPUSH
63874: LD_VAR 0 3
63878: PPUSH
63879: CALL_OW 428
63883: PUSH
63884: LD_VAR 0 1
63888: EQUAL
63889: PUSH
63890: LD_VAR 0 1
63894: PPUSH
63895: CALL_OW 314
63899: NOT
63900: AND
63901: IFFALSE 63827
// PlaySoundXY ( x , y , PlantMine ) ;
63903: LD_VAR 0 2
63907: PPUSH
63908: LD_VAR 0 3
63912: PPUSH
63913: LD_STRING PlantMine
63915: PPUSH
63916: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
63920: LD_VAR 0 2
63924: PPUSH
63925: LD_VAR 0 3
63929: PPUSH
63930: LD_VAR 0 1
63934: PPUSH
63935: CALL_OW 255
63939: PPUSH
63940: LD_INT 0
63942: PPUSH
63943: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63947: LD_ADDR_EXP 101
63951: PUSH
63952: LD_EXP 101
63956: PPUSH
63957: LD_VAR 0 5
63961: PUSH
63962: LD_EXP 101
63966: PUSH
63967: LD_VAR 0 5
63971: ARRAY
63972: PUSH
63973: LD_INT 1
63975: PLUS
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PPUSH
63981: LD_VAR 0 2
63985: PUSH
63986: LD_VAR 0 3
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PPUSH
63995: CALL 6439 0 3
63999: ST_TO_ADDR
// result := true ;
64000: LD_ADDR_VAR 0 4
64004: PUSH
64005: LD_INT 1
64007: ST_TO_ADDR
// end ;
64008: LD_VAR 0 4
64012: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
64013: LD_INT 0
64015: PPUSH
64016: PPUSH
64017: PPUSH
// if not unit in minersList then
64018: LD_VAR 0 1
64022: PUSH
64023: LD_EXP 100
64027: IN
64028: NOT
64029: IFFALSE 64033
// exit ;
64031: GO 64425
// index := GetElementIndex ( minersList , unit ) ;
64033: LD_ADDR_VAR 0 6
64037: PUSH
64038: LD_EXP 100
64042: PPUSH
64043: LD_VAR 0 1
64047: PPUSH
64048: CALL 6224 0 2
64052: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
64053: LD_ADDR_VAR 0 5
64057: PUSH
64058: DOUBLE
64059: LD_EXP 101
64063: PUSH
64064: LD_VAR 0 6
64068: ARRAY
64069: INC
64070: ST_TO_ADDR
64071: LD_INT 1
64073: PUSH
64074: FOR_DOWNTO
64075: IFFALSE 64236
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
64077: LD_EXP 101
64081: PUSH
64082: LD_VAR 0 6
64086: ARRAY
64087: PUSH
64088: LD_VAR 0 5
64092: ARRAY
64093: PUSH
64094: LD_INT 1
64096: ARRAY
64097: PUSH
64098: LD_VAR 0 2
64102: EQUAL
64103: PUSH
64104: LD_EXP 101
64108: PUSH
64109: LD_VAR 0 6
64113: ARRAY
64114: PUSH
64115: LD_VAR 0 5
64119: ARRAY
64120: PUSH
64121: LD_INT 2
64123: ARRAY
64124: PUSH
64125: LD_VAR 0 3
64129: EQUAL
64130: AND
64131: IFFALSE 64234
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64133: LD_EXP 101
64137: PUSH
64138: LD_VAR 0 6
64142: ARRAY
64143: PUSH
64144: LD_VAR 0 5
64148: ARRAY
64149: PUSH
64150: LD_INT 1
64152: ARRAY
64153: PPUSH
64154: LD_EXP 101
64158: PUSH
64159: LD_VAR 0 6
64163: ARRAY
64164: PUSH
64165: LD_VAR 0 5
64169: ARRAY
64170: PUSH
64171: LD_INT 2
64173: ARRAY
64174: PPUSH
64175: LD_VAR 0 1
64179: PPUSH
64180: CALL_OW 255
64184: PPUSH
64185: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64189: LD_ADDR_EXP 101
64193: PUSH
64194: LD_EXP 101
64198: PPUSH
64199: LD_VAR 0 6
64203: PPUSH
64204: LD_EXP 101
64208: PUSH
64209: LD_VAR 0 6
64213: ARRAY
64214: PPUSH
64215: LD_VAR 0 5
64219: PPUSH
64220: CALL_OW 3
64224: PPUSH
64225: CALL_OW 1
64229: ST_TO_ADDR
// exit ;
64230: POP
64231: POP
64232: GO 64425
// end ; end ;
64234: GO 64074
64236: POP
64237: POP
// for i := minerMinesList [ index ] downto 1 do
64238: LD_ADDR_VAR 0 5
64242: PUSH
64243: DOUBLE
64244: LD_EXP 101
64248: PUSH
64249: LD_VAR 0 6
64253: ARRAY
64254: INC
64255: ST_TO_ADDR
64256: LD_INT 1
64258: PUSH
64259: FOR_DOWNTO
64260: IFFALSE 64423
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64262: LD_EXP 101
64266: PUSH
64267: LD_VAR 0 6
64271: ARRAY
64272: PUSH
64273: LD_VAR 0 5
64277: ARRAY
64278: PUSH
64279: LD_INT 1
64281: ARRAY
64282: PPUSH
64283: LD_EXP 101
64287: PUSH
64288: LD_VAR 0 6
64292: ARRAY
64293: PUSH
64294: LD_VAR 0 5
64298: ARRAY
64299: PUSH
64300: LD_INT 2
64302: ARRAY
64303: PPUSH
64304: LD_VAR 0 2
64308: PPUSH
64309: LD_VAR 0 3
64313: PPUSH
64314: CALL_OW 298
64318: PUSH
64319: LD_INT 6
64321: LESS
64322: IFFALSE 64421
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64324: LD_EXP 101
64328: PUSH
64329: LD_VAR 0 6
64333: ARRAY
64334: PUSH
64335: LD_VAR 0 5
64339: ARRAY
64340: PUSH
64341: LD_INT 1
64343: ARRAY
64344: PPUSH
64345: LD_EXP 101
64349: PUSH
64350: LD_VAR 0 6
64354: ARRAY
64355: PUSH
64356: LD_VAR 0 5
64360: ARRAY
64361: PUSH
64362: LD_INT 2
64364: ARRAY
64365: PPUSH
64366: LD_VAR 0 1
64370: PPUSH
64371: CALL_OW 255
64375: PPUSH
64376: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64380: LD_ADDR_EXP 101
64384: PUSH
64385: LD_EXP 101
64389: PPUSH
64390: LD_VAR 0 6
64394: PPUSH
64395: LD_EXP 101
64399: PUSH
64400: LD_VAR 0 6
64404: ARRAY
64405: PPUSH
64406: LD_VAR 0 5
64410: PPUSH
64411: CALL_OW 3
64415: PPUSH
64416: CALL_OW 1
64420: ST_TO_ADDR
// end ; end ;
64421: GO 64259
64423: POP
64424: POP
// end ;
64425: LD_VAR 0 4
64429: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64430: LD_INT 0
64432: PPUSH
64433: PPUSH
64434: PPUSH
64435: PPUSH
64436: PPUSH
64437: PPUSH
64438: PPUSH
64439: PPUSH
64440: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64441: LD_VAR 0 1
64445: PPUSH
64446: CALL_OW 264
64450: PUSH
64451: LD_EXP 10
64455: EQUAL
64456: NOT
64457: PUSH
64458: LD_VAR 0 1
64462: PUSH
64463: LD_EXP 100
64467: IN
64468: NOT
64469: OR
64470: IFFALSE 64474
// exit ;
64472: GO 64796
// index := GetElementIndex ( minersList , unit ) ;
64474: LD_ADDR_VAR 0 6
64478: PUSH
64479: LD_EXP 100
64483: PPUSH
64484: LD_VAR 0 1
64488: PPUSH
64489: CALL 6224 0 2
64493: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64494: LD_ADDR_VAR 0 8
64498: PUSH
64499: LD_EXP 102
64503: PUSH
64504: LD_EXP 101
64508: PUSH
64509: LD_VAR 0 6
64513: ARRAY
64514: MINUS
64515: ST_TO_ADDR
// if not minesFreeAmount then
64516: LD_VAR 0 8
64520: NOT
64521: IFFALSE 64525
// exit ;
64523: GO 64796
// tmp := [ ] ;
64525: LD_ADDR_VAR 0 7
64529: PUSH
64530: EMPTY
64531: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64532: LD_ADDR_VAR 0 5
64536: PUSH
64537: DOUBLE
64538: LD_INT 1
64540: DEC
64541: ST_TO_ADDR
64542: LD_VAR 0 8
64546: PUSH
64547: FOR_TO
64548: IFFALSE 64743
// begin _d := rand ( 0 , 5 ) ;
64550: LD_ADDR_VAR 0 11
64554: PUSH
64555: LD_INT 0
64557: PPUSH
64558: LD_INT 5
64560: PPUSH
64561: CALL_OW 12
64565: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64566: LD_ADDR_VAR 0 12
64570: PUSH
64571: LD_INT 2
64573: PPUSH
64574: LD_INT 6
64576: PPUSH
64577: CALL_OW 12
64581: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64582: LD_ADDR_VAR 0 9
64586: PUSH
64587: LD_VAR 0 2
64591: PPUSH
64592: LD_VAR 0 11
64596: PPUSH
64597: LD_VAR 0 12
64601: PPUSH
64602: CALL_OW 272
64606: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64607: LD_ADDR_VAR 0 10
64611: PUSH
64612: LD_VAR 0 3
64616: PPUSH
64617: LD_VAR 0 11
64621: PPUSH
64622: LD_VAR 0 12
64626: PPUSH
64627: CALL_OW 273
64631: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64632: LD_VAR 0 9
64636: PPUSH
64637: LD_VAR 0 10
64641: PPUSH
64642: CALL_OW 488
64646: PUSH
64647: LD_VAR 0 9
64651: PUSH
64652: LD_VAR 0 10
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_VAR 0 7
64665: IN
64666: NOT
64667: AND
64668: PUSH
64669: LD_VAR 0 9
64673: PPUSH
64674: LD_VAR 0 10
64678: PPUSH
64679: CALL_OW 458
64683: NOT
64684: AND
64685: IFFALSE 64727
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64687: LD_ADDR_VAR 0 7
64691: PUSH
64692: LD_VAR 0 7
64696: PPUSH
64697: LD_VAR 0 7
64701: PUSH
64702: LD_INT 1
64704: PLUS
64705: PPUSH
64706: LD_VAR 0 9
64710: PUSH
64711: LD_VAR 0 10
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PPUSH
64720: CALL_OW 1
64724: ST_TO_ADDR
64725: GO 64741
// i := i - 1 ;
64727: LD_ADDR_VAR 0 5
64731: PUSH
64732: LD_VAR 0 5
64736: PUSH
64737: LD_INT 1
64739: MINUS
64740: ST_TO_ADDR
// end ;
64741: GO 64547
64743: POP
64744: POP
// for i in tmp do
64745: LD_ADDR_VAR 0 5
64749: PUSH
64750: LD_VAR 0 7
64754: PUSH
64755: FOR_IN
64756: IFFALSE 64794
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64758: LD_VAR 0 1
64762: PPUSH
64763: LD_VAR 0 5
64767: PUSH
64768: LD_INT 1
64770: ARRAY
64771: PPUSH
64772: LD_VAR 0 5
64776: PUSH
64777: LD_INT 2
64779: ARRAY
64780: PPUSH
64781: CALL 63736 0 3
64785: NOT
64786: IFFALSE 64792
// exit ;
64788: POP
64789: POP
64790: GO 64796
64792: GO 64755
64794: POP
64795: POP
// end ;
64796: LD_VAR 0 4
64800: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
64801: LD_INT 0
64803: PPUSH
64804: PPUSH
64805: PPUSH
64806: PPUSH
64807: PPUSH
64808: PPUSH
64809: PPUSH
// if not GetClass ( unit ) = class_sniper then
64810: LD_VAR 0 1
64814: PPUSH
64815: CALL_OW 257
64819: PUSH
64820: LD_INT 5
64822: EQUAL
64823: NOT
64824: IFFALSE 64828
// exit ;
64826: GO 65216
// dist := 8 ;
64828: LD_ADDR_VAR 0 5
64832: PUSH
64833: LD_INT 8
64835: ST_TO_ADDR
// viewRange := 12 ;
64836: LD_ADDR_VAR 0 7
64840: PUSH
64841: LD_INT 12
64843: ST_TO_ADDR
// side := GetSide ( unit ) ;
64844: LD_ADDR_VAR 0 6
64848: PUSH
64849: LD_VAR 0 1
64853: PPUSH
64854: CALL_OW 255
64858: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64859: LD_INT 61
64861: PPUSH
64862: LD_VAR 0 6
64866: PPUSH
64867: CALL_OW 321
64871: PUSH
64872: LD_INT 2
64874: EQUAL
64875: IFFALSE 64885
// viewRange := 16 ;
64877: LD_ADDR_VAR 0 7
64881: PUSH
64882: LD_INT 16
64884: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64885: LD_VAR 0 1
64889: PPUSH
64890: LD_VAR 0 2
64894: PPUSH
64895: LD_VAR 0 3
64899: PPUSH
64900: CALL_OW 297
64904: PUSH
64905: LD_VAR 0 5
64909: GREATER
64910: IFFALSE 64989
// begin ComMoveXY ( unit , x , y ) ;
64912: LD_VAR 0 1
64916: PPUSH
64917: LD_VAR 0 2
64921: PPUSH
64922: LD_VAR 0 3
64926: PPUSH
64927: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64931: LD_INT 35
64933: PPUSH
64934: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64938: LD_VAR 0 1
64942: PPUSH
64943: LD_VAR 0 2
64947: PPUSH
64948: LD_VAR 0 3
64952: PPUSH
64953: CALL 37510 0 3
64957: NOT
64958: IFFALSE 64962
// exit ;
64960: GO 65216
// until GetDistUnitXY ( unit , x , y ) < dist ;
64962: LD_VAR 0 1
64966: PPUSH
64967: LD_VAR 0 2
64971: PPUSH
64972: LD_VAR 0 3
64976: PPUSH
64977: CALL_OW 297
64981: PUSH
64982: LD_VAR 0 5
64986: LESS
64987: IFFALSE 64931
// end ; ComTurnXY ( unit , x , y ) ;
64989: LD_VAR 0 1
64993: PPUSH
64994: LD_VAR 0 2
64998: PPUSH
64999: LD_VAR 0 3
65003: PPUSH
65004: CALL_OW 118
// wait ( 5 ) ;
65008: LD_INT 5
65010: PPUSH
65011: CALL_OW 67
// _d := GetDir ( unit ) ;
65015: LD_ADDR_VAR 0 10
65019: PUSH
65020: LD_VAR 0 1
65024: PPUSH
65025: CALL_OW 254
65029: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
65030: LD_ADDR_VAR 0 8
65034: PUSH
65035: LD_VAR 0 1
65039: PPUSH
65040: CALL_OW 250
65044: PPUSH
65045: LD_VAR 0 10
65049: PPUSH
65050: LD_VAR 0 5
65054: PPUSH
65055: CALL_OW 272
65059: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
65060: LD_ADDR_VAR 0 9
65064: PUSH
65065: LD_VAR 0 1
65069: PPUSH
65070: CALL_OW 251
65074: PPUSH
65075: LD_VAR 0 10
65079: PPUSH
65080: LD_VAR 0 5
65084: PPUSH
65085: CALL_OW 273
65089: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65090: LD_VAR 0 8
65094: PPUSH
65095: LD_VAR 0 9
65099: PPUSH
65100: CALL_OW 488
65104: NOT
65105: IFFALSE 65109
// exit ;
65107: GO 65216
// ComAnimCustom ( unit , 1 ) ;
65109: LD_VAR 0 1
65113: PPUSH
65114: LD_INT 1
65116: PPUSH
65117: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
65121: LD_VAR 0 8
65125: PPUSH
65126: LD_VAR 0 9
65130: PPUSH
65131: LD_VAR 0 6
65135: PPUSH
65136: LD_VAR 0 7
65140: PPUSH
65141: CALL_OW 330
// repeat wait ( 1 ) ;
65145: LD_INT 1
65147: PPUSH
65148: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
65152: LD_VAR 0 1
65156: PPUSH
65157: CALL_OW 316
65161: PUSH
65162: LD_VAR 0 1
65166: PPUSH
65167: CALL_OW 314
65171: OR
65172: PUSH
65173: LD_VAR 0 1
65177: PPUSH
65178: CALL_OW 302
65182: NOT
65183: OR
65184: PUSH
65185: LD_VAR 0 1
65189: PPUSH
65190: CALL_OW 301
65194: OR
65195: IFFALSE 65145
// RemoveSeeing ( _x , _y , side ) ;
65197: LD_VAR 0 8
65201: PPUSH
65202: LD_VAR 0 9
65206: PPUSH
65207: LD_VAR 0 6
65211: PPUSH
65212: CALL_OW 331
// end ; end_of_file
65216: LD_VAR 0 4
65220: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65221: LD_VAR 0 1
65225: PUSH
65226: LD_INT 200
65228: DOUBLE
65229: GREATEREQUAL
65230: IFFALSE 65238
65232: LD_INT 299
65234: DOUBLE
65235: LESSEQUAL
65236: IFTRUE 65240
65238: GO 65272
65240: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65241: LD_VAR 0 1
65245: PPUSH
65246: LD_VAR 0 2
65250: PPUSH
65251: LD_VAR 0 3
65255: PPUSH
65256: LD_VAR 0 4
65260: PPUSH
65261: LD_VAR 0 5
65265: PPUSH
65266: CALL 61288 0 5
65270: GO 65349
65272: LD_INT 300
65274: DOUBLE
65275: GREATEREQUAL
65276: IFFALSE 65284
65278: LD_INT 399
65280: DOUBLE
65281: LESSEQUAL
65282: IFTRUE 65286
65284: GO 65348
65286: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65287: LD_VAR 0 1
65291: PPUSH
65292: LD_VAR 0 2
65296: PPUSH
65297: LD_VAR 0 3
65301: PPUSH
65302: LD_VAR 0 4
65306: PPUSH
65307: LD_VAR 0 5
65311: PPUSH
65312: LD_VAR 0 6
65316: PPUSH
65317: LD_VAR 0 7
65321: PPUSH
65322: LD_VAR 0 8
65326: PPUSH
65327: LD_VAR 0 9
65331: PPUSH
65332: LD_VAR 0 10
65336: PPUSH
65337: LD_VAR 0 11
65341: PPUSH
65342: CALL 57617 0 11
65346: GO 65349
65348: POP
// end ;
65349: PPOPN 11
65351: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65352: LD_VAR 0 1
65356: PPUSH
65357: LD_VAR 0 2
65361: PPUSH
65362: LD_VAR 0 3
65366: PPUSH
65367: LD_VAR 0 4
65371: PPUSH
65372: LD_VAR 0 5
65376: PPUSH
65377: CALL 61024 0 5
// end ;
65381: PPOPN 5
65383: END
