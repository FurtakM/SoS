// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 116 0 0
// PrepareNature ( 4 , 4 , 12 , 4 , 4 , 1 , 4 , natArea , watArea ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 12
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 4
  22: PPUSH
  23: LD_INT 1
  25: PPUSH
  26: LD_INT 4
  28: PPUSH
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: CALL 35151 0 9
// if gameType = 1 then
  39: LD_EXP 2
  43: PUSH
  44: LD_INT 1
  46: EQUAL
  47: IFFALSE 111
// InitEcoMode ( [ 189 , 97 ] , [ [ 215 , 93 ] , [ 204 , 126 ] ] , [ attacksArea1 , attacksArea2 , attacksArea3 , attacksArea4 , attacksArea5 ] ) else
  49: LD_INT 189
  51: PUSH
  52: LD_INT 97
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: PPUSH
  59: LD_INT 215
  61: PUSH
  62: LD_INT 93
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: PUSH
  69: LD_INT 204
  71: PUSH
  72: LD_INT 126
  74: PUSH
  75: EMPTY
  76: LIST
  77: LIST
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PPUSH
  83: LD_INT 2
  85: PUSH
  86: LD_INT 3
  88: PUSH
  89: LD_INT 4
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 6
  97: PUSH
  98: EMPTY
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: PPUSH
 105: CALL 42683 0 3
 109: GO 115
// InitDefendMode ( ) ;
 111: CALL 165 0 0
// end ;
 115: END
// export debug , gameType ; function Init ; begin
 116: LD_INT 0
 118: PPUSH
// debug := 0 ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// if debug then
 127: LD_EXP 1
 131: IFFALSE 143
// gameType := 1 else
 133: LD_ADDR_EXP 2
 137: PUSH
 138: LD_INT 1
 140: ST_TO_ADDR
 141: GO 160
// gameType := GetMultiplayerSetting ( 50 ) + 1 ;
 143: LD_ADDR_EXP 2
 147: PUSH
 148: LD_INT 50
 150: PPUSH
 151: CALL_OW 426
 155: PUSH
 156: LD_INT 1
 158: PLUS
 159: ST_TO_ADDR
// end ; end_of_file
 160: LD_VAR 0 1
 164: RET
// export function InitDefendMode ( ) ; var buildingsList ; begin
 165: LD_INT 0
 167: PPUSH
 168: PPUSH
// buildingsList := [ [ 91 , 182 , 59 , 3 , 0 , 0 , 45 ] , [ 90 , 185 , 60 , 3 , 0 , 0 , 46 ] , [ 90 , 188 , 62 , 3 , 0 , 0 , 43 ] , [ 73 , 178 , 64 , 2 , 0 , 0 , 0 ] , [ 75 , 182 , 65 , 3 , 0 , 0 , 0 ] , [ 76 , 179 , 68 , 1 , 0 , 0 , 0 ] , [ 69 , 182 , 68 , 2 , 0 , 0 , 0 ] , [ 71 , 186 , 68 , 4 , 0 , 0 , 0 ] , [ 72 , 182 , 72 , 0 , 0 , 0 , 0 ] , [ 91 , 169 , 73 , 1 , 0 , 0 , 46 ] , [ 67 , 209 , 79 , 4 , 0 , 0 , 0 ] , [ 88 , 204 , 87 , 3 , 0 , 0 , 0 ] , [ 91 , 169 , 88 , 1 , 0 , 0 , 43 ] , [ 91 , 169 , 91 , 1 , 0 , 0 , 45 ] , [ 86 , 192 , 92 , 4 , 0 , 0 , 0 ] , [ 88 , 207 , 93 , 2 , 0 , 0 , 0 ] , [ 65 , 194 , 96 , 4 , 0 , 0 , 0 ] , [ 90 , 224 , 96 , 4 , 0 , 0 , 45 ] , [ 86 , 196 , 100 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 100 , 4 , 0 , 0 , 46 ] , [ 88 , 211 , 101 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 103 , 4 , 0 , 0 , 45 ] , [ 67 , 172 , 105 , 1 , 0 , 0 , 0 ] , [ 86 , 185 , 105 , 0 , 0 , 0 , 0 ] , [ 86 , 188 , 107 , 5 , 0 , 0 , 0 ] , [ 86 , 186 , 108 , 3 , 0 , 0 , 0 ] , [ 91 , 172 , 109 , 1 , 0 , 0 , 45 ] , [ 90 , 227 , 119 , 5 , 0 , 0 , 46 ] , [ 91 , 225 , 120 , 5 , 0 , 0 , 45 ] , [ 67 , 226 , 135 , 5 , 0 , 0 , 0 ] ] ;
 169: LD_ADDR_VAR 0 2
 173: PUSH
 174: LD_INT 91
 176: PUSH
 177: LD_INT 182
 179: PUSH
 180: LD_INT 59
 182: PUSH
 183: LD_INT 3
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 45
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 90
 206: PUSH
 207: LD_INT 185
 209: PUSH
 210: LD_INT 60
 212: PUSH
 213: LD_INT 3
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 46
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: PUSH
 234: LD_INT 90
 236: PUSH
 237: LD_INT 188
 239: PUSH
 240: LD_INT 62
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 0
 251: PUSH
 252: LD_INT 43
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 73
 266: PUSH
 267: LD_INT 178
 269: PUSH
 270: LD_INT 64
 272: PUSH
 273: LD_INT 2
 275: PUSH
 276: LD_INT 0
 278: PUSH
 279: LD_INT 0
 281: PUSH
 282: LD_INT 0
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 75
 296: PUSH
 297: LD_INT 182
 299: PUSH
 300: LD_INT 65
 302: PUSH
 303: LD_INT 3
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: LD_INT 0
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: PUSH
 324: LD_INT 76
 326: PUSH
 327: LD_INT 179
 329: PUSH
 330: LD_INT 68
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 0
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 69
 356: PUSH
 357: LD_INT 182
 359: PUSH
 360: LD_INT 68
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 71
 386: PUSH
 387: LD_INT 186
 389: PUSH
 390: LD_INT 68
 392: PUSH
 393: LD_INT 4
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: LD_INT 72
 416: PUSH
 417: LD_INT 182
 419: PUSH
 420: LD_INT 72
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: LD_INT 0
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: PUSH
 444: LD_INT 91
 446: PUSH
 447: LD_INT 169
 449: PUSH
 450: LD_INT 73
 452: PUSH
 453: LD_INT 1
 455: PUSH
 456: LD_INT 0
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 46
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 67
 476: PUSH
 477: LD_INT 209
 479: PUSH
 480: LD_INT 79
 482: PUSH
 483: LD_INT 4
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 88
 506: PUSH
 507: LD_INT 204
 509: PUSH
 510: LD_INT 87
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: LD_INT 0
 518: PUSH
 519: LD_INT 0
 521: PUSH
 522: LD_INT 0
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 91
 536: PUSH
 537: LD_INT 169
 539: PUSH
 540: LD_INT 88
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 0
 551: PUSH
 552: LD_INT 43
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 91
 566: PUSH
 567: LD_INT 169
 569: PUSH
 570: LD_INT 91
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 0
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: LD_INT 45
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 86
 596: PUSH
 597: LD_INT 192
 599: PUSH
 600: LD_INT 92
 602: PUSH
 603: LD_INT 4
 605: PUSH
 606: LD_INT 0
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: LD_INT 0
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_INT 88
 626: PUSH
 627: LD_INT 207
 629: PUSH
 630: LD_INT 93
 632: PUSH
 633: LD_INT 2
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 65
 656: PUSH
 657: LD_INT 194
 659: PUSH
 660: LD_INT 96
 662: PUSH
 663: LD_INT 4
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 90
 686: PUSH
 687: LD_INT 224
 689: PUSH
 690: LD_INT 96
 692: PUSH
 693: LD_INT 4
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 45
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: PUSH
 714: LD_INT 86
 716: PUSH
 717: LD_INT 196
 719: PUSH
 720: LD_INT 100
 722: PUSH
 723: LD_INT 4
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 91
 746: PUSH
 747: LD_INT 228
 749: PUSH
 750: LD_INT 100
 752: PUSH
 753: LD_INT 4
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: LD_INT 0
 761: PUSH
 762: LD_INT 46
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 88
 776: PUSH
 777: LD_INT 211
 779: PUSH
 780: LD_INT 101
 782: PUSH
 783: LD_INT 4
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 0
 791: PUSH
 792: LD_INT 0
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 91
 806: PUSH
 807: LD_INT 228
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 4
 815: PUSH
 816: LD_INT 0
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 45
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 67
 836: PUSH
 837: LD_INT 172
 839: PUSH
 840: LD_INT 105
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 0
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 86
 866: PUSH
 867: LD_INT 185
 869: PUSH
 870: LD_INT 105
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: LD_INT 0
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 86
 896: PUSH
 897: LD_INT 188
 899: PUSH
 900: LD_INT 107
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: LD_INT 0
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 86
 926: PUSH
 927: LD_INT 186
 929: PUSH
 930: LD_INT 108
 932: PUSH
 933: LD_INT 3
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 91
 956: PUSH
 957: LD_INT 172
 959: PUSH
 960: LD_INT 109
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 0
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 45
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 227
 989: PUSH
 990: LD_INT 119
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 0
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 46
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 91
1016: PUSH
1017: LD_INT 225
1019: PUSH
1020: LD_INT 120
1022: PUSH
1023: LD_INT 5
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: LD_INT 45
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_INT 67
1046: PUSH
1047: LD_INT 226
1049: PUSH
1050: LD_INT 135
1052: PUSH
1053: LD_INT 5
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: ST_TO_ADDR
// end ; end_of_file
1106: LD_VAR 0 1
1110: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
1111: LD_VAR 0 1
1115: PPUSH
1116: LD_VAR 0 2
1120: PPUSH
1121: CALL 61408 0 2
// end ;
1125: PPOPN 2
1127: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
1128: LD_VAR 0 1
1132: PPUSH
1133: CALL 61288 0 1
// end ; end_of_file
1137: PPOPN 1
1139: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1140: LD_INT 0
1142: PPUSH
1143: PPUSH
// if exist_mode then
1144: LD_VAR 0 2
1148: IFFALSE 1173
// unit := CreateCharacter ( prefix & ident ) else
1150: LD_ADDR_VAR 0 5
1154: PUSH
1155: LD_VAR 0 3
1159: PUSH
1160: LD_VAR 0 1
1164: STR
1165: PPUSH
1166: CALL_OW 34
1170: ST_TO_ADDR
1171: GO 1188
// unit := NewCharacter ( ident ) ;
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_VAR 0 1
1182: PPUSH
1183: CALL_OW 25
1187: ST_TO_ADDR
// result := unit ;
1188: LD_ADDR_VAR 0 4
1192: PUSH
1193: LD_VAR 0 5
1197: ST_TO_ADDR
// end ;
1198: LD_VAR 0 4
1202: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1203: LD_INT 0
1205: PPUSH
1206: PPUSH
// if not side or not nation then
1207: LD_VAR 0 1
1211: NOT
1212: PUSH
1213: LD_VAR 0 2
1217: NOT
1218: OR
1219: IFFALSE 1223
// exit ;
1221: GO 1991
// case nation of nation_american :
1223: LD_VAR 0 2
1227: PUSH
1228: LD_INT 1
1230: DOUBLE
1231: EQUAL
1232: IFTRUE 1236
1234: GO 1450
1236: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1237: LD_ADDR_VAR 0 4
1241: PUSH
1242: LD_INT 35
1244: PUSH
1245: LD_INT 45
1247: PUSH
1248: LD_INT 46
1250: PUSH
1251: LD_INT 47
1253: PUSH
1254: LD_INT 82
1256: PUSH
1257: LD_INT 83
1259: PUSH
1260: LD_INT 84
1262: PUSH
1263: LD_INT 85
1265: PUSH
1266: LD_INT 86
1268: PUSH
1269: LD_INT 1
1271: PUSH
1272: LD_INT 2
1274: PUSH
1275: LD_INT 6
1277: PUSH
1278: LD_INT 15
1280: PUSH
1281: LD_INT 16
1283: PUSH
1284: LD_INT 7
1286: PUSH
1287: LD_INT 12
1289: PUSH
1290: LD_INT 13
1292: PUSH
1293: LD_INT 10
1295: PUSH
1296: LD_INT 14
1298: PUSH
1299: LD_INT 20
1301: PUSH
1302: LD_INT 21
1304: PUSH
1305: LD_INT 22
1307: PUSH
1308: LD_INT 25
1310: PUSH
1311: LD_INT 32
1313: PUSH
1314: LD_INT 27
1316: PUSH
1317: LD_INT 36
1319: PUSH
1320: LD_INT 69
1322: PUSH
1323: LD_INT 39
1325: PUSH
1326: LD_INT 34
1328: PUSH
1329: LD_INT 40
1331: PUSH
1332: LD_INT 48
1334: PUSH
1335: LD_INT 49
1337: PUSH
1338: LD_INT 50
1340: PUSH
1341: LD_INT 51
1343: PUSH
1344: LD_INT 52
1346: PUSH
1347: LD_INT 53
1349: PUSH
1350: LD_INT 54
1352: PUSH
1353: LD_INT 55
1355: PUSH
1356: LD_INT 56
1358: PUSH
1359: LD_INT 57
1361: PUSH
1362: LD_INT 58
1364: PUSH
1365: LD_INT 59
1367: PUSH
1368: LD_INT 60
1370: PUSH
1371: LD_INT 61
1373: PUSH
1374: LD_INT 62
1376: PUSH
1377: LD_INT 80
1379: PUSH
1380: LD_INT 82
1382: PUSH
1383: LD_INT 83
1385: PUSH
1386: LD_INT 84
1388: PUSH
1389: LD_INT 85
1391: PUSH
1392: LD_INT 86
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
1448: GO 1915
1450: LD_INT 2
1452: DOUBLE
1453: EQUAL
1454: IFTRUE 1458
1456: GO 1684
1458: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: LD_INT 35
1466: PUSH
1467: LD_INT 45
1469: PUSH
1470: LD_INT 46
1472: PUSH
1473: LD_INT 47
1475: PUSH
1476: LD_INT 82
1478: PUSH
1479: LD_INT 83
1481: PUSH
1482: LD_INT 84
1484: PUSH
1485: LD_INT 85
1487: PUSH
1488: LD_INT 87
1490: PUSH
1491: LD_INT 70
1493: PUSH
1494: LD_INT 1
1496: PUSH
1497: LD_INT 11
1499: PUSH
1500: LD_INT 3
1502: PUSH
1503: LD_INT 4
1505: PUSH
1506: LD_INT 5
1508: PUSH
1509: LD_INT 6
1511: PUSH
1512: LD_INT 15
1514: PUSH
1515: LD_INT 18
1517: PUSH
1518: LD_INT 7
1520: PUSH
1521: LD_INT 17
1523: PUSH
1524: LD_INT 8
1526: PUSH
1527: LD_INT 20
1529: PUSH
1530: LD_INT 21
1532: PUSH
1533: LD_INT 22
1535: PUSH
1536: LD_INT 72
1538: PUSH
1539: LD_INT 26
1541: PUSH
1542: LD_INT 69
1544: PUSH
1545: LD_INT 39
1547: PUSH
1548: LD_INT 40
1550: PUSH
1551: LD_INT 41
1553: PUSH
1554: LD_INT 42
1556: PUSH
1557: LD_INT 43
1559: PUSH
1560: LD_INT 48
1562: PUSH
1563: LD_INT 49
1565: PUSH
1566: LD_INT 50
1568: PUSH
1569: LD_INT 51
1571: PUSH
1572: LD_INT 52
1574: PUSH
1575: LD_INT 53
1577: PUSH
1578: LD_INT 54
1580: PUSH
1581: LD_INT 55
1583: PUSH
1584: LD_INT 56
1586: PUSH
1587: LD_INT 60
1589: PUSH
1590: LD_INT 61
1592: PUSH
1593: LD_INT 62
1595: PUSH
1596: LD_INT 66
1598: PUSH
1599: LD_INT 67
1601: PUSH
1602: LD_INT 68
1604: PUSH
1605: LD_INT 81
1607: PUSH
1608: LD_INT 82
1610: PUSH
1611: LD_INT 83
1613: PUSH
1614: LD_INT 84
1616: PUSH
1617: LD_INT 85
1619: PUSH
1620: LD_INT 87
1622: PUSH
1623: LD_INT 88
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: ST_TO_ADDR
1682: GO 1915
1684: LD_INT 3
1686: DOUBLE
1687: EQUAL
1688: IFTRUE 1692
1690: GO 1914
1692: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1693: LD_ADDR_VAR 0 4
1697: PUSH
1698: LD_INT 46
1700: PUSH
1701: LD_INT 47
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 2
1709: PUSH
1710: LD_INT 82
1712: PUSH
1713: LD_INT 83
1715: PUSH
1716: LD_INT 84
1718: PUSH
1719: LD_INT 85
1721: PUSH
1722: LD_INT 86
1724: PUSH
1725: LD_INT 11
1727: PUSH
1728: LD_INT 9
1730: PUSH
1731: LD_INT 20
1733: PUSH
1734: LD_INT 19
1736: PUSH
1737: LD_INT 21
1739: PUSH
1740: LD_INT 24
1742: PUSH
1743: LD_INT 22
1745: PUSH
1746: LD_INT 25
1748: PUSH
1749: LD_INT 28
1751: PUSH
1752: LD_INT 29
1754: PUSH
1755: LD_INT 30
1757: PUSH
1758: LD_INT 31
1760: PUSH
1761: LD_INT 37
1763: PUSH
1764: LD_INT 38
1766: PUSH
1767: LD_INT 32
1769: PUSH
1770: LD_INT 27
1772: PUSH
1773: LD_INT 33
1775: PUSH
1776: LD_INT 69
1778: PUSH
1779: LD_INT 39
1781: PUSH
1782: LD_INT 34
1784: PUSH
1785: LD_INT 40
1787: PUSH
1788: LD_INT 71
1790: PUSH
1791: LD_INT 23
1793: PUSH
1794: LD_INT 44
1796: PUSH
1797: LD_INT 48
1799: PUSH
1800: LD_INT 49
1802: PUSH
1803: LD_INT 50
1805: PUSH
1806: LD_INT 51
1808: PUSH
1809: LD_INT 52
1811: PUSH
1812: LD_INT 53
1814: PUSH
1815: LD_INT 54
1817: PUSH
1818: LD_INT 55
1820: PUSH
1821: LD_INT 56
1823: PUSH
1824: LD_INT 57
1826: PUSH
1827: LD_INT 58
1829: PUSH
1830: LD_INT 59
1832: PUSH
1833: LD_INT 63
1835: PUSH
1836: LD_INT 64
1838: PUSH
1839: LD_INT 65
1841: PUSH
1842: LD_INT 82
1844: PUSH
1845: LD_INT 83
1847: PUSH
1848: LD_INT 84
1850: PUSH
1851: LD_INT 85
1853: PUSH
1854: LD_INT 86
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
1912: GO 1915
1914: POP
// if state > - 1 and state < 3 then
1915: LD_VAR 0 3
1919: PUSH
1920: LD_INT 1
1922: NEG
1923: GREATER
1924: PUSH
1925: LD_VAR 0 3
1929: PUSH
1930: LD_INT 3
1932: LESS
1933: AND
1934: IFFALSE 1991
// for i in result do
1936: LD_ADDR_VAR 0 5
1940: PUSH
1941: LD_VAR 0 4
1945: PUSH
1946: FOR_IN
1947: IFFALSE 1989
// if GetTech ( i , side ) <> state then
1949: LD_VAR 0 5
1953: PPUSH
1954: LD_VAR 0 1
1958: PPUSH
1959: CALL_OW 321
1963: PUSH
1964: LD_VAR 0 3
1968: NONEQUAL
1969: IFFALSE 1987
// result := result diff i ;
1971: LD_ADDR_VAR 0 4
1975: PUSH
1976: LD_VAR 0 4
1980: PUSH
1981: LD_VAR 0 5
1985: DIFF
1986: ST_TO_ADDR
1987: GO 1946
1989: POP
1990: POP
// end ;
1991: LD_VAR 0 4
1995: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1996: LD_INT 0
1998: PPUSH
1999: PPUSH
2000: PPUSH
// result := true ;
2001: LD_ADDR_VAR 0 3
2005: PUSH
2006: LD_INT 1
2008: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2009: LD_ADDR_VAR 0 5
2013: PUSH
2014: LD_VAR 0 2
2018: PPUSH
2019: CALL_OW 480
2023: ST_TO_ADDR
// if not tmp then
2024: LD_VAR 0 5
2028: NOT
2029: IFFALSE 2033
// exit ;
2031: GO 2082
// for i in tmp do
2033: LD_ADDR_VAR 0 4
2037: PUSH
2038: LD_VAR 0 5
2042: PUSH
2043: FOR_IN
2044: IFFALSE 2080
// if GetTech ( i , side ) <> state_researched then
2046: LD_VAR 0 4
2050: PPUSH
2051: LD_VAR 0 1
2055: PPUSH
2056: CALL_OW 321
2060: PUSH
2061: LD_INT 2
2063: NONEQUAL
2064: IFFALSE 2078
// begin result := false ;
2066: LD_ADDR_VAR 0 3
2070: PUSH
2071: LD_INT 0
2073: ST_TO_ADDR
// exit ;
2074: POP
2075: POP
2076: GO 2082
// end ;
2078: GO 2043
2080: POP
2081: POP
// end ;
2082: LD_VAR 0 3
2086: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2087: LD_INT 0
2089: PPUSH
2090: PPUSH
2091: PPUSH
2092: PPUSH
2093: PPUSH
2094: PPUSH
2095: PPUSH
2096: PPUSH
2097: PPUSH
2098: PPUSH
2099: PPUSH
2100: PPUSH
2101: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2102: LD_VAR 0 1
2106: NOT
2107: PUSH
2108: LD_VAR 0 1
2112: PPUSH
2113: CALL_OW 257
2117: PUSH
2118: LD_INT 9
2120: NONEQUAL
2121: OR
2122: IFFALSE 2126
// exit ;
2124: GO 2699
// side := GetSide ( unit ) ;
2126: LD_ADDR_VAR 0 9
2130: PUSH
2131: LD_VAR 0 1
2135: PPUSH
2136: CALL_OW 255
2140: ST_TO_ADDR
// tech_space := tech_spacanom ;
2141: LD_ADDR_VAR 0 12
2145: PUSH
2146: LD_INT 29
2148: ST_TO_ADDR
// tech_time := tech_taurad ;
2149: LD_ADDR_VAR 0 13
2153: PUSH
2154: LD_INT 28
2156: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2157: LD_ADDR_VAR 0 11
2161: PUSH
2162: LD_VAR 0 1
2166: PPUSH
2167: CALL_OW 310
2171: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2172: LD_VAR 0 11
2176: PPUSH
2177: CALL_OW 247
2181: PUSH
2182: LD_INT 2
2184: EQUAL
2185: IFFALSE 2189
// exit ;
2187: GO 2699
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2189: LD_ADDR_VAR 0 8
2193: PUSH
2194: LD_INT 81
2196: PUSH
2197: LD_VAR 0 9
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 3
2208: PUSH
2209: LD_INT 21
2211: PUSH
2212: LD_INT 3
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PPUSH
2227: CALL_OW 69
2231: ST_TO_ADDR
// if not tmp then
2232: LD_VAR 0 8
2236: NOT
2237: IFFALSE 2241
// exit ;
2239: GO 2699
// if in_unit then
2241: LD_VAR 0 11
2245: IFFALSE 2269
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2247: LD_ADDR_VAR 0 10
2251: PUSH
2252: LD_VAR 0 8
2256: PPUSH
2257: LD_VAR 0 11
2261: PPUSH
2262: CALL_OW 74
2266: ST_TO_ADDR
2267: GO 2289
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2269: LD_ADDR_VAR 0 10
2273: PUSH
2274: LD_VAR 0 8
2278: PPUSH
2279: LD_VAR 0 1
2283: PPUSH
2284: CALL_OW 74
2288: ST_TO_ADDR
// if not enemy then
2289: LD_VAR 0 10
2293: NOT
2294: IFFALSE 2298
// exit ;
2296: GO 2699
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2298: LD_VAR 0 11
2302: PUSH
2303: LD_VAR 0 11
2307: PPUSH
2308: LD_VAR 0 10
2312: PPUSH
2313: CALL_OW 296
2317: PUSH
2318: LD_INT 13
2320: GREATER
2321: AND
2322: PUSH
2323: LD_VAR 0 1
2327: PPUSH
2328: LD_VAR 0 10
2332: PPUSH
2333: CALL_OW 296
2337: PUSH
2338: LD_INT 12
2340: GREATER
2341: OR
2342: IFFALSE 2346
// exit ;
2344: GO 2699
// missile := [ 1 ] ;
2346: LD_ADDR_VAR 0 14
2350: PUSH
2351: LD_INT 1
2353: PUSH
2354: EMPTY
2355: LIST
2356: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2357: LD_VAR 0 9
2361: PPUSH
2362: LD_VAR 0 12
2366: PPUSH
2367: CALL_OW 325
2371: IFFALSE 2400
// missile := Replace ( missile , missile + 1 , 2 ) ;
2373: LD_ADDR_VAR 0 14
2377: PUSH
2378: LD_VAR 0 14
2382: PPUSH
2383: LD_VAR 0 14
2387: PUSH
2388: LD_INT 1
2390: PLUS
2391: PPUSH
2392: LD_INT 2
2394: PPUSH
2395: CALL_OW 1
2399: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2400: LD_VAR 0 9
2404: PPUSH
2405: LD_VAR 0 13
2409: PPUSH
2410: CALL_OW 325
2414: PUSH
2415: LD_VAR 0 10
2419: PPUSH
2420: CALL_OW 255
2424: PPUSH
2425: LD_VAR 0 13
2429: PPUSH
2430: CALL_OW 325
2434: NOT
2435: AND
2436: IFFALSE 2465
// missile := Replace ( missile , missile + 1 , 3 ) ;
2438: LD_ADDR_VAR 0 14
2442: PUSH
2443: LD_VAR 0 14
2447: PPUSH
2448: LD_VAR 0 14
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: LD_INT 3
2459: PPUSH
2460: CALL_OW 1
2464: ST_TO_ADDR
// if missile < 2 then
2465: LD_VAR 0 14
2469: PUSH
2470: LD_INT 2
2472: LESS
2473: IFFALSE 2477
// exit ;
2475: GO 2699
// x := GetX ( enemy ) ;
2477: LD_ADDR_VAR 0 4
2481: PUSH
2482: LD_VAR 0 10
2486: PPUSH
2487: CALL_OW 250
2491: ST_TO_ADDR
// y := GetY ( enemy ) ;
2492: LD_ADDR_VAR 0 5
2496: PUSH
2497: LD_VAR 0 10
2501: PPUSH
2502: CALL_OW 251
2506: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2507: LD_ADDR_VAR 0 6
2511: PUSH
2512: LD_VAR 0 4
2516: PUSH
2517: LD_INT 1
2519: NEG
2520: PPUSH
2521: LD_INT 1
2523: PPUSH
2524: CALL_OW 12
2528: PLUS
2529: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2530: LD_ADDR_VAR 0 7
2534: PUSH
2535: LD_VAR 0 5
2539: PUSH
2540: LD_INT 1
2542: NEG
2543: PPUSH
2544: LD_INT 1
2546: PPUSH
2547: CALL_OW 12
2551: PLUS
2552: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2553: LD_VAR 0 6
2557: PPUSH
2558: LD_VAR 0 7
2562: PPUSH
2563: CALL_OW 488
2567: NOT
2568: IFFALSE 2590
// begin _x := x ;
2570: LD_ADDR_VAR 0 6
2574: PUSH
2575: LD_VAR 0 4
2579: ST_TO_ADDR
// _y := y ;
2580: LD_ADDR_VAR 0 7
2584: PUSH
2585: LD_VAR 0 5
2589: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2590: LD_ADDR_VAR 0 3
2594: PUSH
2595: LD_INT 1
2597: PPUSH
2598: LD_VAR 0 14
2602: PPUSH
2603: CALL_OW 12
2607: ST_TO_ADDR
// case i of 1 :
2608: LD_VAR 0 3
2612: PUSH
2613: LD_INT 1
2615: DOUBLE
2616: EQUAL
2617: IFTRUE 2621
2619: GO 2638
2621: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2622: LD_VAR 0 1
2626: PPUSH
2627: LD_VAR 0 10
2631: PPUSH
2632: CALL_OW 115
2636: GO 2699
2638: LD_INT 2
2640: DOUBLE
2641: EQUAL
2642: IFTRUE 2646
2644: GO 2668
2646: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2647: LD_VAR 0 1
2651: PPUSH
2652: LD_VAR 0 6
2656: PPUSH
2657: LD_VAR 0 7
2661: PPUSH
2662: CALL_OW 153
2666: GO 2699
2668: LD_INT 3
2670: DOUBLE
2671: EQUAL
2672: IFTRUE 2676
2674: GO 2698
2676: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2677: LD_VAR 0 1
2681: PPUSH
2682: LD_VAR 0 6
2686: PPUSH
2687: LD_VAR 0 7
2691: PPUSH
2692: CALL_OW 154
2696: GO 2699
2698: POP
// end ;
2699: LD_VAR 0 2
2703: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2704: LD_INT 0
2706: PPUSH
2707: PPUSH
2708: PPUSH
2709: PPUSH
2710: PPUSH
2711: PPUSH
// if not unit or not building then
2712: LD_VAR 0 1
2716: NOT
2717: PUSH
2718: LD_VAR 0 2
2722: NOT
2723: OR
2724: IFFALSE 2728
// exit ;
2726: GO 2886
// x := GetX ( building ) ;
2728: LD_ADDR_VAR 0 5
2732: PUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: CALL_OW 250
2742: ST_TO_ADDR
// y := GetY ( building ) ;
2743: LD_ADDR_VAR 0 6
2747: PUSH
2748: LD_VAR 0 2
2752: PPUSH
2753: CALL_OW 251
2757: ST_TO_ADDR
// for i = 0 to 5 do
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: DOUBLE
2764: LD_INT 0
2766: DEC
2767: ST_TO_ADDR
2768: LD_INT 5
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2884
// begin _x := ShiftX ( x , i , 3 ) ;
2774: LD_ADDR_VAR 0 7
2778: PUSH
2779: LD_VAR 0 5
2783: PPUSH
2784: LD_VAR 0 4
2788: PPUSH
2789: LD_INT 3
2791: PPUSH
2792: CALL_OW 272
2796: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2797: LD_ADDR_VAR 0 8
2801: PUSH
2802: LD_VAR 0 6
2806: PPUSH
2807: LD_VAR 0 4
2811: PPUSH
2812: LD_INT 3
2814: PPUSH
2815: CALL_OW 273
2819: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2820: LD_VAR 0 7
2824: PPUSH
2825: LD_VAR 0 8
2829: PPUSH
2830: CALL_OW 488
2834: NOT
2835: IFFALSE 2839
// continue ;
2837: GO 2771
// if HexInfo ( _x , _y ) = 0 then
2839: LD_VAR 0 7
2843: PPUSH
2844: LD_VAR 0 8
2848: PPUSH
2849: CALL_OW 428
2853: PUSH
2854: LD_INT 0
2856: EQUAL
2857: IFFALSE 2882
// begin ComMoveXY ( unit , _x , _y ) ;
2859: LD_VAR 0 1
2863: PPUSH
2864: LD_VAR 0 7
2868: PPUSH
2869: LD_VAR 0 8
2873: PPUSH
2874: CALL_OW 111
// exit ;
2878: POP
2879: POP
2880: GO 2886
// end ; end ;
2882: GO 2771
2884: POP
2885: POP
// end ;
2886: LD_VAR 0 3
2890: RET
// export function ScanBase ( side , base_area ) ; begin
2891: LD_INT 0
2893: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_VAR 0 2
2903: PPUSH
2904: LD_INT 81
2906: PUSH
2907: LD_VAR 0 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PPUSH
2916: CALL_OW 70
2920: ST_TO_ADDR
// end ;
2921: LD_VAR 0 3
2925: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2926: LD_INT 0
2928: PPUSH
2929: PPUSH
2930: PPUSH
2931: PPUSH
// result := false ;
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: LD_INT 0
2939: ST_TO_ADDR
// side := GetSide ( unit ) ;
2940: LD_ADDR_VAR 0 3
2944: PUSH
2945: LD_VAR 0 1
2949: PPUSH
2950: CALL_OW 255
2954: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2955: LD_ADDR_VAR 0 4
2959: PUSH
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 248
2969: ST_TO_ADDR
// case nat of 1 :
2970: LD_VAR 0 4
2974: PUSH
2975: LD_INT 1
2977: DOUBLE
2978: EQUAL
2979: IFTRUE 2983
2981: GO 2994
2983: POP
// tech := tech_lassight ; 2 :
2984: LD_ADDR_VAR 0 5
2988: PUSH
2989: LD_INT 12
2991: ST_TO_ADDR
2992: GO 3033
2994: LD_INT 2
2996: DOUBLE
2997: EQUAL
2998: IFTRUE 3002
3000: GO 3013
3002: POP
// tech := tech_mortar ; 3 :
3003: LD_ADDR_VAR 0 5
3007: PUSH
3008: LD_INT 41
3010: ST_TO_ADDR
3011: GO 3033
3013: LD_INT 3
3015: DOUBLE
3016: EQUAL
3017: IFTRUE 3021
3019: GO 3032
3021: POP
// tech := tech_bazooka ; end ;
3022: LD_ADDR_VAR 0 5
3026: PUSH
3027: LD_INT 44
3029: ST_TO_ADDR
3030: GO 3033
3032: POP
// if Researched ( side , tech ) then
3033: LD_VAR 0 3
3037: PPUSH
3038: LD_VAR 0 5
3042: PPUSH
3043: CALL_OW 325
3047: IFFALSE 3074
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3049: LD_ADDR_VAR 0 2
3053: PUSH
3054: LD_INT 5
3056: PUSH
3057: LD_INT 8
3059: PUSH
3060: LD_INT 9
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: LIST
3067: PUSH
3068: LD_VAR 0 4
3072: ARRAY
3073: ST_TO_ADDR
// end ;
3074: LD_VAR 0 2
3078: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// if not mines then
3084: LD_VAR 0 2
3088: NOT
3089: IFFALSE 3093
// exit ;
3091: GO 3237
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3093: LD_ADDR_VAR 0 5
3097: PUSH
3098: LD_INT 81
3100: PUSH
3101: LD_VAR 0 1
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: PUSH
3110: LD_INT 3
3112: PUSH
3113: LD_INT 21
3115: PUSH
3116: LD_INT 3
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: ST_TO_ADDR
// for i in mines do
3136: LD_ADDR_VAR 0 4
3140: PUSH
3141: LD_VAR 0 2
3145: PUSH
3146: FOR_IN
3147: IFFALSE 3235
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3149: LD_VAR 0 4
3153: PUSH
3154: LD_INT 1
3156: ARRAY
3157: PPUSH
3158: LD_VAR 0 4
3162: PUSH
3163: LD_INT 2
3165: ARRAY
3166: PPUSH
3167: CALL_OW 458
3171: NOT
3172: IFFALSE 3176
// continue ;
3174: GO 3146
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3176: LD_VAR 0 4
3180: PUSH
3181: LD_INT 1
3183: ARRAY
3184: PPUSH
3185: LD_VAR 0 4
3189: PUSH
3190: LD_INT 2
3192: ARRAY
3193: PPUSH
3194: CALL_OW 428
3198: PUSH
3199: LD_VAR 0 5
3203: IN
3204: IFFALSE 3233
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3206: LD_VAR 0 4
3210: PUSH
3211: LD_INT 1
3213: ARRAY
3214: PPUSH
3215: LD_VAR 0 4
3219: PUSH
3220: LD_INT 2
3222: ARRAY
3223: PPUSH
3224: LD_VAR 0 1
3228: PPUSH
3229: CALL_OW 456
// end ;
3233: GO 3146
3235: POP
3236: POP
// end ;
3237: LD_VAR 0 3
3241: RET
// export function Count ( array ) ; begin
3242: LD_INT 0
3244: PPUSH
// result := array + 0 ;
3245: LD_ADDR_VAR 0 2
3249: PUSH
3250: LD_VAR 0 1
3254: PUSH
3255: LD_INT 0
3257: PLUS
3258: ST_TO_ADDR
// end ;
3259: LD_VAR 0 2
3263: RET
// export function IsEmpty ( building ) ; begin
3264: LD_INT 0
3266: PPUSH
// if not building then
3267: LD_VAR 0 1
3271: NOT
3272: IFFALSE 3276
// exit ;
3274: GO 3319
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3276: LD_ADDR_VAR 0 2
3280: PUSH
3281: LD_VAR 0 1
3285: PUSH
3286: LD_INT 22
3288: PUSH
3289: LD_VAR 0 1
3293: PPUSH
3294: CALL_OW 255
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: PUSH
3303: LD_INT 58
3305: PUSH
3306: EMPTY
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PPUSH
3313: CALL_OW 69
3317: IN
3318: ST_TO_ADDR
// end ;
3319: LD_VAR 0 2
3323: RET
// export function IsNotFull ( building ) ; var places ; begin
3324: LD_INT 0
3326: PPUSH
3327: PPUSH
// if not building then
3328: LD_VAR 0 1
3332: NOT
3333: IFFALSE 3337
// exit ;
3335: GO 3365
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: LD_VAR 0 1
3346: PPUSH
3347: LD_INT 3
3349: PUSH
3350: LD_INT 62
3352: PUSH
3353: EMPTY
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PPUSH
3360: CALL_OW 72
3364: ST_TO_ADDR
// end ;
3365: LD_VAR 0 2
3369: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3370: LD_INT 0
3372: PPUSH
3373: PPUSH
3374: PPUSH
3375: PPUSH
// tmp := [ ] ;
3376: LD_ADDR_VAR 0 3
3380: PUSH
3381: EMPTY
3382: ST_TO_ADDR
// list := [ ] ;
3383: LD_ADDR_VAR 0 5
3387: PUSH
3388: EMPTY
3389: ST_TO_ADDR
// for i = 16 to 25 do
3390: LD_ADDR_VAR 0 4
3394: PUSH
3395: DOUBLE
3396: LD_INT 16
3398: DEC
3399: ST_TO_ADDR
3400: LD_INT 25
3402: PUSH
3403: FOR_TO
3404: IFFALSE 3477
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3406: LD_ADDR_VAR 0 3
3410: PUSH
3411: LD_VAR 0 3
3415: PUSH
3416: LD_INT 22
3418: PUSH
3419: LD_VAR 0 1
3423: PPUSH
3424: CALL_OW 255
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: PUSH
3433: LD_INT 91
3435: PUSH
3436: LD_VAR 0 1
3440: PUSH
3441: LD_INT 6
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 30
3451: PUSH
3452: LD_VAR 0 4
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: LIST
3465: PUSH
3466: EMPTY
3467: LIST
3468: PPUSH
3469: CALL_OW 69
3473: ADD
3474: ST_TO_ADDR
3475: GO 3403
3477: POP
3478: POP
// for i = 1 to tmp do
3479: LD_ADDR_VAR 0 4
3483: PUSH
3484: DOUBLE
3485: LD_INT 1
3487: DEC
3488: ST_TO_ADDR
3489: LD_VAR 0 3
3493: PUSH
3494: FOR_TO
3495: IFFALSE 3583
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3497: LD_ADDR_VAR 0 5
3501: PUSH
3502: LD_VAR 0 5
3506: PUSH
3507: LD_VAR 0 3
3511: PUSH
3512: LD_VAR 0 4
3516: ARRAY
3517: PPUSH
3518: CALL_OW 266
3522: PUSH
3523: LD_VAR 0 3
3527: PUSH
3528: LD_VAR 0 4
3532: ARRAY
3533: PPUSH
3534: CALL_OW 250
3538: PUSH
3539: LD_VAR 0 3
3543: PUSH
3544: LD_VAR 0 4
3548: ARRAY
3549: PPUSH
3550: CALL_OW 251
3554: PUSH
3555: LD_VAR 0 3
3559: PUSH
3560: LD_VAR 0 4
3564: ARRAY
3565: PPUSH
3566: CALL_OW 254
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: PUSH
3577: EMPTY
3578: LIST
3579: ADD
3580: ST_TO_ADDR
3581: GO 3494
3583: POP
3584: POP
// result := list ;
3585: LD_ADDR_VAR 0 2
3589: PUSH
3590: LD_VAR 0 5
3594: ST_TO_ADDR
// end ;
3595: LD_VAR 0 2
3599: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3600: LD_INT 0
3602: PPUSH
3603: PPUSH
3604: PPUSH
3605: PPUSH
3606: PPUSH
3607: PPUSH
3608: PPUSH
// if not factory then
3609: LD_VAR 0 1
3613: NOT
3614: IFFALSE 3618
// exit ;
3616: GO 4211
// if control = control_apeman then
3618: LD_VAR 0 4
3622: PUSH
3623: LD_INT 5
3625: EQUAL
3626: IFFALSE 3735
// begin tmp := UnitsInside ( factory ) ;
3628: LD_ADDR_VAR 0 8
3632: PUSH
3633: LD_VAR 0 1
3637: PPUSH
3638: CALL_OW 313
3642: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3643: LD_VAR 0 8
3647: PPUSH
3648: LD_INT 25
3650: PUSH
3651: LD_INT 12
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: PPUSH
3658: CALL_OW 72
3662: NOT
3663: IFFALSE 3673
// control := control_manual ;
3665: LD_ADDR_VAR 0 4
3669: PUSH
3670: LD_INT 1
3672: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3673: LD_ADDR_VAR 0 8
3677: PUSH
3678: LD_VAR 0 1
3682: PPUSH
3683: CALL 3370 0 1
3687: ST_TO_ADDR
// if tmp then
3688: LD_VAR 0 8
3692: IFFALSE 3735
// begin for i in tmp do
3694: LD_ADDR_VAR 0 7
3698: PUSH
3699: LD_VAR 0 8
3703: PUSH
3704: FOR_IN
3705: IFFALSE 3733
// if i [ 1 ] = b_ext_radio then
3707: LD_VAR 0 7
3711: PUSH
3712: LD_INT 1
3714: ARRAY
3715: PUSH
3716: LD_INT 22
3718: EQUAL
3719: IFFALSE 3731
// begin control := control_remote ;
3721: LD_ADDR_VAR 0 4
3725: PUSH
3726: LD_INT 2
3728: ST_TO_ADDR
// break ;
3729: GO 3733
// end ;
3731: GO 3704
3733: POP
3734: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3735: LD_VAR 0 1
3739: PPUSH
3740: LD_VAR 0 2
3744: PPUSH
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_VAR 0 4
3754: PPUSH
3755: LD_VAR 0 5
3759: PPUSH
3760: CALL_OW 448
3764: IFFALSE 3799
// begin result := [ chassis , engine , control , weapon ] ;
3766: LD_ADDR_VAR 0 6
3770: PUSH
3771: LD_VAR 0 2
3775: PUSH
3776: LD_VAR 0 3
3780: PUSH
3781: LD_VAR 0 4
3785: PUSH
3786: LD_VAR 0 5
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: ST_TO_ADDR
// exit ;
3797: GO 4211
// end ; _chassis := AvailableChassisList ( factory ) ;
3799: LD_ADDR_VAR 0 9
3803: PUSH
3804: LD_VAR 0 1
3808: PPUSH
3809: CALL_OW 475
3813: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3814: LD_ADDR_VAR 0 11
3818: PUSH
3819: LD_VAR 0 1
3823: PPUSH
3824: CALL_OW 476
3828: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3829: LD_ADDR_VAR 0 12
3833: PUSH
3834: LD_VAR 0 1
3838: PPUSH
3839: CALL_OW 477
3843: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3844: LD_ADDR_VAR 0 10
3848: PUSH
3849: LD_VAR 0 1
3853: PPUSH
3854: CALL_OW 478
3858: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3859: LD_VAR 0 9
3863: NOT
3864: PUSH
3865: LD_VAR 0 11
3869: NOT
3870: OR
3871: PUSH
3872: LD_VAR 0 12
3876: NOT
3877: OR
3878: PUSH
3879: LD_VAR 0 10
3883: NOT
3884: OR
3885: IFFALSE 3920
// begin result := [ chassis , engine , control , weapon ] ;
3887: LD_ADDR_VAR 0 6
3891: PUSH
3892: LD_VAR 0 2
3896: PUSH
3897: LD_VAR 0 3
3901: PUSH
3902: LD_VAR 0 4
3906: PUSH
3907: LD_VAR 0 5
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: ST_TO_ADDR
// exit ;
3918: GO 4211
// end ; if not chassis in _chassis then
3920: LD_VAR 0 2
3924: PUSH
3925: LD_VAR 0 9
3929: IN
3930: NOT
3931: IFFALSE 3957
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3933: LD_ADDR_VAR 0 2
3937: PUSH
3938: LD_VAR 0 9
3942: PUSH
3943: LD_INT 1
3945: PPUSH
3946: LD_VAR 0 9
3950: PPUSH
3951: CALL_OW 12
3955: ARRAY
3956: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3957: LD_VAR 0 2
3961: PPUSH
3962: LD_VAR 0 3
3966: PPUSH
3967: CALL 4216 0 2
3971: NOT
3972: IFFALSE 4031
// repeat engine := _engine [ 1 ] ;
3974: LD_ADDR_VAR 0 3
3978: PUSH
3979: LD_VAR 0 11
3983: PUSH
3984: LD_INT 1
3986: ARRAY
3987: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3988: LD_ADDR_VAR 0 11
3992: PUSH
3993: LD_VAR 0 11
3997: PPUSH
3998: LD_INT 1
4000: PPUSH
4001: CALL_OW 3
4005: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4006: LD_VAR 0 2
4010: PPUSH
4011: LD_VAR 0 3
4015: PPUSH
4016: CALL 4216 0 2
4020: PUSH
4021: LD_VAR 0 11
4025: PUSH
4026: EMPTY
4027: EQUAL
4028: OR
4029: IFFALSE 3974
// if not control in _control then
4031: LD_VAR 0 4
4035: PUSH
4036: LD_VAR 0 12
4040: IN
4041: NOT
4042: IFFALSE 4068
// control := _control [ rand ( 1 , _control ) ] ;
4044: LD_ADDR_VAR 0 4
4048: PUSH
4049: LD_VAR 0 12
4053: PUSH
4054: LD_INT 1
4056: PPUSH
4057: LD_VAR 0 12
4061: PPUSH
4062: CALL_OW 12
4066: ARRAY
4067: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_VAR 0 5
4077: PPUSH
4078: CALL 4436 0 2
4082: NOT
4083: IFFALSE 4142
// repeat weapon := _weapon [ 1 ] ;
4085: LD_ADDR_VAR 0 5
4089: PUSH
4090: LD_VAR 0 10
4094: PUSH
4095: LD_INT 1
4097: ARRAY
4098: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4099: LD_ADDR_VAR 0 10
4103: PUSH
4104: LD_VAR 0 10
4108: PPUSH
4109: LD_INT 1
4111: PPUSH
4112: CALL_OW 3
4116: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4117: LD_VAR 0 2
4121: PPUSH
4122: LD_VAR 0 5
4126: PPUSH
4127: CALL 4436 0 2
4131: PUSH
4132: LD_VAR 0 10
4136: PUSH
4137: EMPTY
4138: EQUAL
4139: OR
4140: IFFALSE 4085
// result := [ ] ;
4142: LD_ADDR_VAR 0 6
4146: PUSH
4147: EMPTY
4148: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4149: LD_VAR 0 1
4153: PPUSH
4154: LD_VAR 0 2
4158: PPUSH
4159: LD_VAR 0 3
4163: PPUSH
4164: LD_VAR 0 4
4168: PPUSH
4169: LD_VAR 0 5
4173: PPUSH
4174: CALL_OW 448
4178: IFFALSE 4211
// result := [ chassis , engine , control , weapon ] ;
4180: LD_ADDR_VAR 0 6
4184: PUSH
4185: LD_VAR 0 2
4189: PUSH
4190: LD_VAR 0 3
4194: PUSH
4195: LD_VAR 0 4
4199: PUSH
4200: LD_VAR 0 5
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: ST_TO_ADDR
// end ;
4211: LD_VAR 0 6
4215: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4216: LD_INT 0
4218: PPUSH
// if not chassis or not engine then
4219: LD_VAR 0 1
4223: NOT
4224: PUSH
4225: LD_VAR 0 2
4229: NOT
4230: OR
4231: IFFALSE 4235
// exit ;
4233: GO 4431
// case engine of engine_solar :
4235: LD_VAR 0 2
4239: PUSH
4240: LD_INT 2
4242: DOUBLE
4243: EQUAL
4244: IFTRUE 4248
4246: GO 4286
4248: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4249: LD_ADDR_VAR 0 3
4253: PUSH
4254: LD_INT 11
4256: PUSH
4257: LD_INT 12
4259: PUSH
4260: LD_INT 13
4262: PUSH
4263: LD_INT 14
4265: PUSH
4266: LD_INT 1
4268: PUSH
4269: LD_INT 2
4271: PUSH
4272: LD_INT 3
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: ST_TO_ADDR
4284: GO 4415
4286: LD_INT 1
4288: DOUBLE
4289: EQUAL
4290: IFTRUE 4294
4292: GO 4356
4294: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4295: LD_ADDR_VAR 0 3
4299: PUSH
4300: LD_INT 11
4302: PUSH
4303: LD_INT 12
4305: PUSH
4306: LD_INT 13
4308: PUSH
4309: LD_INT 14
4311: PUSH
4312: LD_INT 1
4314: PUSH
4315: LD_INT 2
4317: PUSH
4318: LD_INT 3
4320: PUSH
4321: LD_INT 4
4323: PUSH
4324: LD_INT 5
4326: PUSH
4327: LD_INT 21
4329: PUSH
4330: LD_INT 23
4332: PUSH
4333: LD_INT 22
4335: PUSH
4336: LD_INT 24
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: ST_TO_ADDR
4354: GO 4415
4356: LD_INT 3
4358: DOUBLE
4359: EQUAL
4360: IFTRUE 4364
4362: GO 4414
4364: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4365: LD_ADDR_VAR 0 3
4369: PUSH
4370: LD_INT 13
4372: PUSH
4373: LD_INT 14
4375: PUSH
4376: LD_INT 2
4378: PUSH
4379: LD_INT 3
4381: PUSH
4382: LD_INT 4
4384: PUSH
4385: LD_INT 5
4387: PUSH
4388: LD_INT 21
4390: PUSH
4391: LD_INT 22
4393: PUSH
4394: LD_INT 23
4396: PUSH
4397: LD_INT 24
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: ST_TO_ADDR
4412: GO 4415
4414: POP
// result := ( chassis in result ) ;
4415: LD_ADDR_VAR 0 3
4419: PUSH
4420: LD_VAR 0 1
4424: PUSH
4425: LD_VAR 0 3
4429: IN
4430: ST_TO_ADDR
// end ;
4431: LD_VAR 0 3
4435: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4436: LD_INT 0
4438: PPUSH
// if not chassis or not weapon then
4439: LD_VAR 0 1
4443: NOT
4444: PUSH
4445: LD_VAR 0 2
4449: NOT
4450: OR
4451: IFFALSE 4455
// exit ;
4453: GO 5515
// case weapon of us_machine_gun :
4455: LD_VAR 0 2
4459: PUSH
4460: LD_INT 2
4462: DOUBLE
4463: EQUAL
4464: IFTRUE 4468
4466: GO 4498
4468: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4469: LD_ADDR_VAR 0 3
4473: PUSH
4474: LD_INT 1
4476: PUSH
4477: LD_INT 2
4479: PUSH
4480: LD_INT 3
4482: PUSH
4483: LD_INT 4
4485: PUSH
4486: LD_INT 5
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
4496: GO 5499
4498: LD_INT 3
4500: DOUBLE
4501: EQUAL
4502: IFTRUE 4506
4504: GO 4536
4506: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4507: LD_ADDR_VAR 0 3
4511: PUSH
4512: LD_INT 1
4514: PUSH
4515: LD_INT 2
4517: PUSH
4518: LD_INT 3
4520: PUSH
4521: LD_INT 4
4523: PUSH
4524: LD_INT 5
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: ST_TO_ADDR
4534: GO 5499
4536: LD_INT 11
4538: DOUBLE
4539: EQUAL
4540: IFTRUE 4544
4542: GO 4574
4544: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4545: LD_ADDR_VAR 0 3
4549: PUSH
4550: LD_INT 1
4552: PUSH
4553: LD_INT 2
4555: PUSH
4556: LD_INT 3
4558: PUSH
4559: LD_INT 4
4561: PUSH
4562: LD_INT 5
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: ST_TO_ADDR
4572: GO 5499
4574: LD_INT 4
4576: DOUBLE
4577: EQUAL
4578: IFTRUE 4582
4580: GO 4608
4582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4583: LD_ADDR_VAR 0 3
4587: PUSH
4588: LD_INT 2
4590: PUSH
4591: LD_INT 3
4593: PUSH
4594: LD_INT 4
4596: PUSH
4597: LD_INT 5
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: ST_TO_ADDR
4606: GO 5499
4608: LD_INT 5
4610: DOUBLE
4611: EQUAL
4612: IFTRUE 4616
4614: GO 4642
4616: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: LD_INT 2
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: LD_INT 4
4630: PUSH
4631: LD_INT 5
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
4640: GO 5499
4642: LD_INT 9
4644: DOUBLE
4645: EQUAL
4646: IFTRUE 4650
4648: GO 4676
4650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: LD_INT 2
4658: PUSH
4659: LD_INT 3
4661: PUSH
4662: LD_INT 4
4664: PUSH
4665: LD_INT 5
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: ST_TO_ADDR
4674: GO 5499
4676: LD_INT 7
4678: DOUBLE
4679: EQUAL
4680: IFTRUE 4684
4682: GO 4710
4684: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4685: LD_ADDR_VAR 0 3
4689: PUSH
4690: LD_INT 2
4692: PUSH
4693: LD_INT 3
4695: PUSH
4696: LD_INT 4
4698: PUSH
4699: LD_INT 5
4701: PUSH
4702: EMPTY
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: ST_TO_ADDR
4708: GO 5499
4710: LD_INT 12
4712: DOUBLE
4713: EQUAL
4714: IFTRUE 4718
4716: GO 4744
4718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4719: LD_ADDR_VAR 0 3
4723: PUSH
4724: LD_INT 2
4726: PUSH
4727: LD_INT 3
4729: PUSH
4730: LD_INT 4
4732: PUSH
4733: LD_INT 5
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: ST_TO_ADDR
4742: GO 5499
4744: LD_INT 13
4746: DOUBLE
4747: EQUAL
4748: IFTRUE 4752
4750: GO 4778
4752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4753: LD_ADDR_VAR 0 3
4757: PUSH
4758: LD_INT 2
4760: PUSH
4761: LD_INT 3
4763: PUSH
4764: LD_INT 4
4766: PUSH
4767: LD_INT 5
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: ST_TO_ADDR
4776: GO 5499
4778: LD_INT 14
4780: DOUBLE
4781: EQUAL
4782: IFTRUE 4786
4784: GO 4804
4786: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4787: LD_ADDR_VAR 0 3
4791: PUSH
4792: LD_INT 4
4794: PUSH
4795: LD_INT 5
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: ST_TO_ADDR
4802: GO 5499
4804: LD_INT 6
4806: DOUBLE
4807: EQUAL
4808: IFTRUE 4812
4810: GO 4830
4812: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4813: LD_ADDR_VAR 0 3
4817: PUSH
4818: LD_INT 4
4820: PUSH
4821: LD_INT 5
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: ST_TO_ADDR
4828: GO 5499
4830: LD_INT 10
4832: DOUBLE
4833: EQUAL
4834: IFTRUE 4838
4836: GO 4856
4838: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4839: LD_ADDR_VAR 0 3
4843: PUSH
4844: LD_INT 4
4846: PUSH
4847: LD_INT 5
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: ST_TO_ADDR
4854: GO 5499
4856: LD_INT 22
4858: DOUBLE
4859: EQUAL
4860: IFTRUE 4864
4862: GO 4890
4864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4865: LD_ADDR_VAR 0 3
4869: PUSH
4870: LD_INT 11
4872: PUSH
4873: LD_INT 12
4875: PUSH
4876: LD_INT 13
4878: PUSH
4879: LD_INT 14
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: ST_TO_ADDR
4888: GO 5499
4890: LD_INT 23
4892: DOUBLE
4893: EQUAL
4894: IFTRUE 4898
4896: GO 4924
4898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4899: LD_ADDR_VAR 0 3
4903: PUSH
4904: LD_INT 11
4906: PUSH
4907: LD_INT 12
4909: PUSH
4910: LD_INT 13
4912: PUSH
4913: LD_INT 14
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: ST_TO_ADDR
4922: GO 5499
4924: LD_INT 24
4926: DOUBLE
4927: EQUAL
4928: IFTRUE 4932
4930: GO 4958
4932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4933: LD_ADDR_VAR 0 3
4937: PUSH
4938: LD_INT 11
4940: PUSH
4941: LD_INT 12
4943: PUSH
4944: LD_INT 13
4946: PUSH
4947: LD_INT 14
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: ST_TO_ADDR
4956: GO 5499
4958: LD_INT 30
4960: DOUBLE
4961: EQUAL
4962: IFTRUE 4966
4964: GO 4992
4966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4967: LD_ADDR_VAR 0 3
4971: PUSH
4972: LD_INT 11
4974: PUSH
4975: LD_INT 12
4977: PUSH
4978: LD_INT 13
4980: PUSH
4981: LD_INT 14
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: ST_TO_ADDR
4990: GO 5499
4992: LD_INT 25
4994: DOUBLE
4995: EQUAL
4996: IFTRUE 5000
4998: GO 5018
5000: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5001: LD_ADDR_VAR 0 3
5005: PUSH
5006: LD_INT 13
5008: PUSH
5009: LD_INT 14
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: ST_TO_ADDR
5016: GO 5499
5018: LD_INT 27
5020: DOUBLE
5021: EQUAL
5022: IFTRUE 5026
5024: GO 5044
5026: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5027: LD_ADDR_VAR 0 3
5031: PUSH
5032: LD_INT 13
5034: PUSH
5035: LD_INT 14
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: ST_TO_ADDR
5042: GO 5499
5044: LD_INT 92
5046: DOUBLE
5047: EQUAL
5048: IFTRUE 5052
5050: GO 5078
5052: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5053: LD_ADDR_VAR 0 3
5057: PUSH
5058: LD_INT 11
5060: PUSH
5061: LD_INT 12
5063: PUSH
5064: LD_INT 13
5066: PUSH
5067: LD_INT 14
5069: PUSH
5070: EMPTY
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: ST_TO_ADDR
5076: GO 5499
5078: LD_INT 28
5080: DOUBLE
5081: EQUAL
5082: IFTRUE 5086
5084: GO 5104
5086: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5087: LD_ADDR_VAR 0 3
5091: PUSH
5092: LD_INT 13
5094: PUSH
5095: LD_INT 14
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: ST_TO_ADDR
5102: GO 5499
5104: LD_INT 29
5106: DOUBLE
5107: EQUAL
5108: IFTRUE 5112
5110: GO 5130
5112: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5113: LD_ADDR_VAR 0 3
5117: PUSH
5118: LD_INT 13
5120: PUSH
5121: LD_INT 14
5123: PUSH
5124: EMPTY
5125: LIST
5126: LIST
5127: ST_TO_ADDR
5128: GO 5499
5130: LD_INT 31
5132: DOUBLE
5133: EQUAL
5134: IFTRUE 5138
5136: GO 5156
5138: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5139: LD_ADDR_VAR 0 3
5143: PUSH
5144: LD_INT 13
5146: PUSH
5147: LD_INT 14
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: ST_TO_ADDR
5154: GO 5499
5156: LD_INT 26
5158: DOUBLE
5159: EQUAL
5160: IFTRUE 5164
5162: GO 5182
5164: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5165: LD_ADDR_VAR 0 3
5169: PUSH
5170: LD_INT 13
5172: PUSH
5173: LD_INT 14
5175: PUSH
5176: EMPTY
5177: LIST
5178: LIST
5179: ST_TO_ADDR
5180: GO 5499
5182: LD_INT 42
5184: DOUBLE
5185: EQUAL
5186: IFTRUE 5190
5188: GO 5216
5190: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5191: LD_ADDR_VAR 0 3
5195: PUSH
5196: LD_INT 21
5198: PUSH
5199: LD_INT 22
5201: PUSH
5202: LD_INT 23
5204: PUSH
5205: LD_INT 24
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: ST_TO_ADDR
5214: GO 5499
5216: LD_INT 43
5218: DOUBLE
5219: EQUAL
5220: IFTRUE 5224
5222: GO 5250
5224: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: LD_INT 21
5232: PUSH
5233: LD_INT 22
5235: PUSH
5236: LD_INT 23
5238: PUSH
5239: LD_INT 24
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: ST_TO_ADDR
5248: GO 5499
5250: LD_INT 44
5252: DOUBLE
5253: EQUAL
5254: IFTRUE 5258
5256: GO 5284
5258: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5259: LD_ADDR_VAR 0 3
5263: PUSH
5264: LD_INT 21
5266: PUSH
5267: LD_INT 22
5269: PUSH
5270: LD_INT 23
5272: PUSH
5273: LD_INT 24
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: ST_TO_ADDR
5282: GO 5499
5284: LD_INT 45
5286: DOUBLE
5287: EQUAL
5288: IFTRUE 5292
5290: GO 5318
5292: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5293: LD_ADDR_VAR 0 3
5297: PUSH
5298: LD_INT 21
5300: PUSH
5301: LD_INT 22
5303: PUSH
5304: LD_INT 23
5306: PUSH
5307: LD_INT 24
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: ST_TO_ADDR
5316: GO 5499
5318: LD_INT 49
5320: DOUBLE
5321: EQUAL
5322: IFTRUE 5326
5324: GO 5352
5326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5327: LD_ADDR_VAR 0 3
5331: PUSH
5332: LD_INT 21
5334: PUSH
5335: LD_INT 22
5337: PUSH
5338: LD_INT 23
5340: PUSH
5341: LD_INT 24
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: ST_TO_ADDR
5350: GO 5499
5352: LD_INT 51
5354: DOUBLE
5355: EQUAL
5356: IFTRUE 5360
5358: GO 5386
5360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5361: LD_ADDR_VAR 0 3
5365: PUSH
5366: LD_INT 21
5368: PUSH
5369: LD_INT 22
5371: PUSH
5372: LD_INT 23
5374: PUSH
5375: LD_INT 24
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: ST_TO_ADDR
5384: GO 5499
5386: LD_INT 52
5388: DOUBLE
5389: EQUAL
5390: IFTRUE 5394
5392: GO 5420
5394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5395: LD_ADDR_VAR 0 3
5399: PUSH
5400: LD_INT 21
5402: PUSH
5403: LD_INT 22
5405: PUSH
5406: LD_INT 23
5408: PUSH
5409: LD_INT 24
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: ST_TO_ADDR
5418: GO 5499
5420: LD_INT 53
5422: DOUBLE
5423: EQUAL
5424: IFTRUE 5428
5426: GO 5446
5428: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5429: LD_ADDR_VAR 0 3
5433: PUSH
5434: LD_INT 23
5436: PUSH
5437: LD_INT 24
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: ST_TO_ADDR
5444: GO 5499
5446: LD_INT 46
5448: DOUBLE
5449: EQUAL
5450: IFTRUE 5454
5452: GO 5472
5454: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5455: LD_ADDR_VAR 0 3
5459: PUSH
5460: LD_INT 23
5462: PUSH
5463: LD_INT 24
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: ST_TO_ADDR
5470: GO 5499
5472: LD_INT 47
5474: DOUBLE
5475: EQUAL
5476: IFTRUE 5480
5478: GO 5498
5480: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5481: LD_ADDR_VAR 0 3
5485: PUSH
5486: LD_INT 23
5488: PUSH
5489: LD_INT 24
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: ST_TO_ADDR
5496: GO 5499
5498: POP
// result := ( chassis in result ) ;
5499: LD_ADDR_VAR 0 3
5503: PUSH
5504: LD_VAR 0 1
5508: PUSH
5509: LD_VAR 0 3
5513: IN
5514: ST_TO_ADDR
// end ;
5515: LD_VAR 0 3
5519: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5520: LD_INT 0
5522: PPUSH
5523: PPUSH
5524: PPUSH
5525: PPUSH
5526: PPUSH
5527: PPUSH
5528: PPUSH
// result := array ;
5529: LD_ADDR_VAR 0 5
5533: PUSH
5534: LD_VAR 0 1
5538: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5539: LD_VAR 0 1
5543: NOT
5544: PUSH
5545: LD_VAR 0 2
5549: NOT
5550: OR
5551: PUSH
5552: LD_VAR 0 3
5556: NOT
5557: OR
5558: PUSH
5559: LD_VAR 0 2
5563: PUSH
5564: LD_VAR 0 1
5568: GREATER
5569: OR
5570: PUSH
5571: LD_VAR 0 3
5575: PUSH
5576: LD_VAR 0 1
5580: GREATER
5581: OR
5582: IFFALSE 5586
// exit ;
5584: GO 5882
// if direction then
5586: LD_VAR 0 4
5590: IFFALSE 5654
// begin d := 1 ;
5592: LD_ADDR_VAR 0 9
5596: PUSH
5597: LD_INT 1
5599: ST_TO_ADDR
// if i_from > i_to then
5600: LD_VAR 0 2
5604: PUSH
5605: LD_VAR 0 3
5609: GREATER
5610: IFFALSE 5636
// length := ( array - i_from ) + i_to else
5612: LD_ADDR_VAR 0 11
5616: PUSH
5617: LD_VAR 0 1
5621: PUSH
5622: LD_VAR 0 2
5626: MINUS
5627: PUSH
5628: LD_VAR 0 3
5632: PLUS
5633: ST_TO_ADDR
5634: GO 5652
// length := i_to - i_from ;
5636: LD_ADDR_VAR 0 11
5640: PUSH
5641: LD_VAR 0 3
5645: PUSH
5646: LD_VAR 0 2
5650: MINUS
5651: ST_TO_ADDR
// end else
5652: GO 5715
// begin d := - 1 ;
5654: LD_ADDR_VAR 0 9
5658: PUSH
5659: LD_INT 1
5661: NEG
5662: ST_TO_ADDR
// if i_from > i_to then
5663: LD_VAR 0 2
5667: PUSH
5668: LD_VAR 0 3
5672: GREATER
5673: IFFALSE 5693
// length := i_from - i_to else
5675: LD_ADDR_VAR 0 11
5679: PUSH
5680: LD_VAR 0 2
5684: PUSH
5685: LD_VAR 0 3
5689: MINUS
5690: ST_TO_ADDR
5691: GO 5715
// length := ( array - i_to ) + i_from ;
5693: LD_ADDR_VAR 0 11
5697: PUSH
5698: LD_VAR 0 1
5702: PUSH
5703: LD_VAR 0 3
5707: MINUS
5708: PUSH
5709: LD_VAR 0 2
5713: PLUS
5714: ST_TO_ADDR
// end ; if not length then
5715: LD_VAR 0 11
5719: NOT
5720: IFFALSE 5724
// exit ;
5722: GO 5882
// tmp := array ;
5724: LD_ADDR_VAR 0 10
5728: PUSH
5729: LD_VAR 0 1
5733: ST_TO_ADDR
// for i = 1 to length do
5734: LD_ADDR_VAR 0 6
5738: PUSH
5739: DOUBLE
5740: LD_INT 1
5742: DEC
5743: ST_TO_ADDR
5744: LD_VAR 0 11
5748: PUSH
5749: FOR_TO
5750: IFFALSE 5870
// begin for j = 1 to array do
5752: LD_ADDR_VAR 0 7
5756: PUSH
5757: DOUBLE
5758: LD_INT 1
5760: DEC
5761: ST_TO_ADDR
5762: LD_VAR 0 1
5766: PUSH
5767: FOR_TO
5768: IFFALSE 5856
// begin k := j + d ;
5770: LD_ADDR_VAR 0 8
5774: PUSH
5775: LD_VAR 0 7
5779: PUSH
5780: LD_VAR 0 9
5784: PLUS
5785: ST_TO_ADDR
// if k > array then
5786: LD_VAR 0 8
5790: PUSH
5791: LD_VAR 0 1
5795: GREATER
5796: IFFALSE 5806
// k := 1 ;
5798: LD_ADDR_VAR 0 8
5802: PUSH
5803: LD_INT 1
5805: ST_TO_ADDR
// if not k then
5806: LD_VAR 0 8
5810: NOT
5811: IFFALSE 5823
// k := array ;
5813: LD_ADDR_VAR 0 8
5817: PUSH
5818: LD_VAR 0 1
5822: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5823: LD_ADDR_VAR 0 10
5827: PUSH
5828: LD_VAR 0 10
5832: PPUSH
5833: LD_VAR 0 8
5837: PPUSH
5838: LD_VAR 0 1
5842: PUSH
5843: LD_VAR 0 7
5847: ARRAY
5848: PPUSH
5849: CALL_OW 1
5853: ST_TO_ADDR
// end ;
5854: GO 5767
5856: POP
5857: POP
// array := tmp ;
5858: LD_ADDR_VAR 0 1
5862: PUSH
5863: LD_VAR 0 10
5867: ST_TO_ADDR
// end ;
5868: GO 5749
5870: POP
5871: POP
// result := array ;
5872: LD_ADDR_VAR 0 5
5876: PUSH
5877: LD_VAR 0 1
5881: ST_TO_ADDR
// end ;
5882: LD_VAR 0 5
5886: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5887: LD_INT 0
5889: PPUSH
5890: PPUSH
// result := 0 ;
5891: LD_ADDR_VAR 0 3
5895: PUSH
5896: LD_INT 0
5898: ST_TO_ADDR
// if not array or not value in array then
5899: LD_VAR 0 1
5903: NOT
5904: PUSH
5905: LD_VAR 0 2
5909: PUSH
5910: LD_VAR 0 1
5914: IN
5915: NOT
5916: OR
5917: IFFALSE 5921
// exit ;
5919: GO 5975
// for i = 1 to array do
5921: LD_ADDR_VAR 0 4
5925: PUSH
5926: DOUBLE
5927: LD_INT 1
5929: DEC
5930: ST_TO_ADDR
5931: LD_VAR 0 1
5935: PUSH
5936: FOR_TO
5937: IFFALSE 5973
// if value = array [ i ] then
5939: LD_VAR 0 2
5943: PUSH
5944: LD_VAR 0 1
5948: PUSH
5949: LD_VAR 0 4
5953: ARRAY
5954: EQUAL
5955: IFFALSE 5971
// begin result := i ;
5957: LD_ADDR_VAR 0 3
5961: PUSH
5962: LD_VAR 0 4
5966: ST_TO_ADDR
// exit ;
5967: POP
5968: POP
5969: GO 5975
// end ;
5971: GO 5936
5973: POP
5974: POP
// end ;
5975: LD_VAR 0 3
5979: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5980: LD_INT 0
5982: PPUSH
// vc_chassis := chassis ;
5983: LD_ADDR_OWVAR 37
5987: PUSH
5988: LD_VAR 0 1
5992: ST_TO_ADDR
// vc_engine := engine ;
5993: LD_ADDR_OWVAR 39
5997: PUSH
5998: LD_VAR 0 2
6002: ST_TO_ADDR
// vc_control := control ;
6003: LD_ADDR_OWVAR 38
6007: PUSH
6008: LD_VAR 0 3
6012: ST_TO_ADDR
// vc_weapon := weapon ;
6013: LD_ADDR_OWVAR 40
6017: PUSH
6018: LD_VAR 0 4
6022: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6023: LD_ADDR_OWVAR 41
6027: PUSH
6028: LD_VAR 0 5
6032: ST_TO_ADDR
// end ;
6033: LD_VAR 0 6
6037: RET
// export function WantPlant ( unit ) ; var task ; begin
6038: LD_INT 0
6040: PPUSH
6041: PPUSH
// result := false ;
6042: LD_ADDR_VAR 0 2
6046: PUSH
6047: LD_INT 0
6049: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6050: LD_ADDR_VAR 0 3
6054: PUSH
6055: LD_VAR 0 1
6059: PPUSH
6060: CALL_OW 437
6064: ST_TO_ADDR
// if task then
6065: LD_VAR 0 3
6069: IFFALSE 6097
// if task [ 1 ] [ 1 ] = p then
6071: LD_VAR 0 3
6075: PUSH
6076: LD_INT 1
6078: ARRAY
6079: PUSH
6080: LD_INT 1
6082: ARRAY
6083: PUSH
6084: LD_STRING p
6086: EQUAL
6087: IFFALSE 6097
// result := true ;
6089: LD_ADDR_VAR 0 2
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// end ;
6097: LD_VAR 0 2
6101: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6102: LD_INT 0
6104: PPUSH
6105: PPUSH
6106: PPUSH
6107: PPUSH
// if pos < 1 then
6108: LD_VAR 0 2
6112: PUSH
6113: LD_INT 1
6115: LESS
6116: IFFALSE 6120
// exit ;
6118: GO 6423
// if pos = 1 then
6120: LD_VAR 0 2
6124: PUSH
6125: LD_INT 1
6127: EQUAL
6128: IFFALSE 6161
// result := Replace ( arr , pos [ 1 ] , value ) else
6130: LD_ADDR_VAR 0 4
6134: PUSH
6135: LD_VAR 0 1
6139: PPUSH
6140: LD_VAR 0 2
6144: PUSH
6145: LD_INT 1
6147: ARRAY
6148: PPUSH
6149: LD_VAR 0 3
6153: PPUSH
6154: CALL_OW 1
6158: ST_TO_ADDR
6159: GO 6423
// begin tmp := arr ;
6161: LD_ADDR_VAR 0 6
6165: PUSH
6166: LD_VAR 0 1
6170: ST_TO_ADDR
// s_arr := [ tmp ] ;
6171: LD_ADDR_VAR 0 7
6175: PUSH
6176: LD_VAR 0 6
6180: PUSH
6181: EMPTY
6182: LIST
6183: ST_TO_ADDR
// for i = 1 to pos - 1 do
6184: LD_ADDR_VAR 0 5
6188: PUSH
6189: DOUBLE
6190: LD_INT 1
6192: DEC
6193: ST_TO_ADDR
6194: LD_VAR 0 2
6198: PUSH
6199: LD_INT 1
6201: MINUS
6202: PUSH
6203: FOR_TO
6204: IFFALSE 6249
// begin tmp := tmp [ pos [ i ] ] ;
6206: LD_ADDR_VAR 0 6
6210: PUSH
6211: LD_VAR 0 6
6215: PUSH
6216: LD_VAR 0 2
6220: PUSH
6221: LD_VAR 0 5
6225: ARRAY
6226: ARRAY
6227: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6228: LD_ADDR_VAR 0 7
6232: PUSH
6233: LD_VAR 0 7
6237: PUSH
6238: LD_VAR 0 6
6242: PUSH
6243: EMPTY
6244: LIST
6245: ADD
6246: ST_TO_ADDR
// end ;
6247: GO 6203
6249: POP
6250: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6251: LD_ADDR_VAR 0 6
6255: PUSH
6256: LD_VAR 0 6
6260: PPUSH
6261: LD_VAR 0 2
6265: PUSH
6266: LD_VAR 0 2
6270: ARRAY
6271: PPUSH
6272: LD_VAR 0 3
6276: PPUSH
6277: CALL_OW 1
6281: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6282: LD_ADDR_VAR 0 7
6286: PUSH
6287: LD_VAR 0 7
6291: PPUSH
6292: LD_VAR 0 7
6296: PPUSH
6297: LD_VAR 0 6
6301: PPUSH
6302: CALL_OW 1
6306: ST_TO_ADDR
// for i = s_arr downto 2 do
6307: LD_ADDR_VAR 0 5
6311: PUSH
6312: DOUBLE
6313: LD_VAR 0 7
6317: INC
6318: ST_TO_ADDR
6319: LD_INT 2
6321: PUSH
6322: FOR_DOWNTO
6323: IFFALSE 6407
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6325: LD_ADDR_VAR 0 6
6329: PUSH
6330: LD_VAR 0 7
6334: PUSH
6335: LD_VAR 0 5
6339: PUSH
6340: LD_INT 1
6342: MINUS
6343: ARRAY
6344: PPUSH
6345: LD_VAR 0 2
6349: PUSH
6350: LD_VAR 0 5
6354: PUSH
6355: LD_INT 1
6357: MINUS
6358: ARRAY
6359: PPUSH
6360: LD_VAR 0 7
6364: PUSH
6365: LD_VAR 0 5
6369: ARRAY
6370: PPUSH
6371: CALL_OW 1
6375: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6376: LD_ADDR_VAR 0 7
6380: PUSH
6381: LD_VAR 0 7
6385: PPUSH
6386: LD_VAR 0 5
6390: PUSH
6391: LD_INT 1
6393: MINUS
6394: PPUSH
6395: LD_VAR 0 6
6399: PPUSH
6400: CALL_OW 1
6404: ST_TO_ADDR
// end ;
6405: GO 6322
6407: POP
6408: POP
// result := s_arr [ 1 ] ;
6409: LD_ADDR_VAR 0 4
6413: PUSH
6414: LD_VAR 0 7
6418: PUSH
6419: LD_INT 1
6421: ARRAY
6422: ST_TO_ADDR
// end ; end ;
6423: LD_VAR 0 4
6427: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6428: LD_INT 0
6430: PPUSH
6431: PPUSH
// if not list then
6432: LD_VAR 0 1
6436: NOT
6437: IFFALSE 6441
// exit ;
6439: GO 6532
// i := list [ pos1 ] ;
6441: LD_ADDR_VAR 0 5
6445: PUSH
6446: LD_VAR 0 1
6450: PUSH
6451: LD_VAR 0 2
6455: ARRAY
6456: ST_TO_ADDR
// if not i then
6457: LD_VAR 0 5
6461: NOT
6462: IFFALSE 6466
// exit ;
6464: GO 6532
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6466: LD_ADDR_VAR 0 1
6470: PUSH
6471: LD_VAR 0 1
6475: PPUSH
6476: LD_VAR 0 2
6480: PPUSH
6481: LD_VAR 0 1
6485: PUSH
6486: LD_VAR 0 3
6490: ARRAY
6491: PPUSH
6492: CALL_OW 1
6496: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6497: LD_ADDR_VAR 0 1
6501: PUSH
6502: LD_VAR 0 1
6506: PPUSH
6507: LD_VAR 0 3
6511: PPUSH
6512: LD_VAR 0 5
6516: PPUSH
6517: CALL_OW 1
6521: ST_TO_ADDR
// result := list ;
6522: LD_ADDR_VAR 0 4
6526: PUSH
6527: LD_VAR 0 1
6531: ST_TO_ADDR
// end ;
6532: LD_VAR 0 4
6536: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6537: LD_INT 0
6539: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6540: LD_ADDR_VAR 0 5
6544: PUSH
6545: LD_VAR 0 1
6549: PPUSH
6550: CALL_OW 250
6554: PPUSH
6555: LD_VAR 0 1
6559: PPUSH
6560: CALL_OW 251
6564: PPUSH
6565: LD_VAR 0 2
6569: PPUSH
6570: LD_VAR 0 3
6574: PPUSH
6575: LD_VAR 0 4
6579: PPUSH
6580: CALL 6590 0 5
6584: ST_TO_ADDR
// end ;
6585: LD_VAR 0 5
6589: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6590: LD_INT 0
6592: PPUSH
6593: PPUSH
6594: PPUSH
6595: PPUSH
// if not list then
6596: LD_VAR 0 3
6600: NOT
6601: IFFALSE 6605
// exit ;
6603: GO 6993
// result := [ ] ;
6605: LD_ADDR_VAR 0 6
6609: PUSH
6610: EMPTY
6611: ST_TO_ADDR
// for i in list do
6612: LD_ADDR_VAR 0 7
6616: PUSH
6617: LD_VAR 0 3
6621: PUSH
6622: FOR_IN
6623: IFFALSE 6825
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6625: LD_ADDR_VAR 0 9
6629: PUSH
6630: LD_VAR 0 7
6634: PPUSH
6635: LD_VAR 0 1
6639: PPUSH
6640: LD_VAR 0 2
6644: PPUSH
6645: CALL_OW 297
6649: ST_TO_ADDR
// if not result then
6650: LD_VAR 0 6
6654: NOT
6655: IFFALSE 6681
// result := [ [ i , tmp ] ] else
6657: LD_ADDR_VAR 0 6
6661: PUSH
6662: LD_VAR 0 7
6666: PUSH
6667: LD_VAR 0 9
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: EMPTY
6677: LIST
6678: ST_TO_ADDR
6679: GO 6823
// begin if result [ result ] [ 2 ] < tmp then
6681: LD_VAR 0 6
6685: PUSH
6686: LD_VAR 0 6
6690: ARRAY
6691: PUSH
6692: LD_INT 2
6694: ARRAY
6695: PUSH
6696: LD_VAR 0 9
6700: LESS
6701: IFFALSE 6743
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6703: LD_ADDR_VAR 0 6
6707: PUSH
6708: LD_VAR 0 6
6712: PPUSH
6713: LD_VAR 0 6
6717: PUSH
6718: LD_INT 1
6720: PLUS
6721: PPUSH
6722: LD_VAR 0 7
6726: PUSH
6727: LD_VAR 0 9
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PPUSH
6736: CALL_OW 2
6740: ST_TO_ADDR
6741: GO 6823
// for j = 1 to result do
6743: LD_ADDR_VAR 0 8
6747: PUSH
6748: DOUBLE
6749: LD_INT 1
6751: DEC
6752: ST_TO_ADDR
6753: LD_VAR 0 6
6757: PUSH
6758: FOR_TO
6759: IFFALSE 6821
// begin if tmp < result [ j ] [ 2 ] then
6761: LD_VAR 0 9
6765: PUSH
6766: LD_VAR 0 6
6770: PUSH
6771: LD_VAR 0 8
6775: ARRAY
6776: PUSH
6777: LD_INT 2
6779: ARRAY
6780: LESS
6781: IFFALSE 6819
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6783: LD_ADDR_VAR 0 6
6787: PUSH
6788: LD_VAR 0 6
6792: PPUSH
6793: LD_VAR 0 8
6797: PPUSH
6798: LD_VAR 0 7
6802: PUSH
6803: LD_VAR 0 9
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PPUSH
6812: CALL_OW 2
6816: ST_TO_ADDR
// break ;
6817: GO 6821
// end ; end ;
6819: GO 6758
6821: POP
6822: POP
// end ; end ;
6823: GO 6622
6825: POP
6826: POP
// if result and not asc then
6827: LD_VAR 0 6
6831: PUSH
6832: LD_VAR 0 4
6836: NOT
6837: AND
6838: IFFALSE 6913
// begin tmp := result ;
6840: LD_ADDR_VAR 0 9
6844: PUSH
6845: LD_VAR 0 6
6849: ST_TO_ADDR
// for i = tmp downto 1 do
6850: LD_ADDR_VAR 0 7
6854: PUSH
6855: DOUBLE
6856: LD_VAR 0 9
6860: INC
6861: ST_TO_ADDR
6862: LD_INT 1
6864: PUSH
6865: FOR_DOWNTO
6866: IFFALSE 6911
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6868: LD_ADDR_VAR 0 6
6872: PUSH
6873: LD_VAR 0 6
6877: PPUSH
6878: LD_VAR 0 9
6882: PUSH
6883: LD_VAR 0 7
6887: MINUS
6888: PUSH
6889: LD_INT 1
6891: PLUS
6892: PPUSH
6893: LD_VAR 0 9
6897: PUSH
6898: LD_VAR 0 7
6902: ARRAY
6903: PPUSH
6904: CALL_OW 1
6908: ST_TO_ADDR
6909: GO 6865
6911: POP
6912: POP
// end ; tmp := [ ] ;
6913: LD_ADDR_VAR 0 9
6917: PUSH
6918: EMPTY
6919: ST_TO_ADDR
// if mode then
6920: LD_VAR 0 5
6924: IFFALSE 6993
// begin for i = 1 to result do
6926: LD_ADDR_VAR 0 7
6930: PUSH
6931: DOUBLE
6932: LD_INT 1
6934: DEC
6935: ST_TO_ADDR
6936: LD_VAR 0 6
6940: PUSH
6941: FOR_TO
6942: IFFALSE 6981
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6944: LD_ADDR_VAR 0 9
6948: PUSH
6949: LD_VAR 0 9
6953: PPUSH
6954: LD_VAR 0 7
6958: PPUSH
6959: LD_VAR 0 6
6963: PUSH
6964: LD_VAR 0 7
6968: ARRAY
6969: PUSH
6970: LD_INT 1
6972: ARRAY
6973: PPUSH
6974: CALL_OW 1
6978: ST_TO_ADDR
6979: GO 6941
6981: POP
6982: POP
// result := tmp ;
6983: LD_ADDR_VAR 0 6
6987: PUSH
6988: LD_VAR 0 9
6992: ST_TO_ADDR
// end ; end ;
6993: LD_VAR 0 6
6997: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6998: LD_INT 0
7000: PPUSH
7001: PPUSH
7002: PPUSH
7003: PPUSH
7004: PPUSH
7005: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7006: LD_ADDR_VAR 0 5
7010: PUSH
7011: LD_INT 0
7013: PUSH
7014: LD_INT 0
7016: PUSH
7017: LD_INT 0
7019: PUSH
7020: EMPTY
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: ST_TO_ADDR
// if not x or not y then
7028: LD_VAR 0 2
7032: NOT
7033: PUSH
7034: LD_VAR 0 3
7038: NOT
7039: OR
7040: IFFALSE 7044
// exit ;
7042: GO 8694
// if not range then
7044: LD_VAR 0 4
7048: NOT
7049: IFFALSE 7059
// range := 10 ;
7051: LD_ADDR_VAR 0 4
7055: PUSH
7056: LD_INT 10
7058: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7059: LD_ADDR_VAR 0 8
7063: PUSH
7064: LD_INT 81
7066: PUSH
7067: LD_VAR 0 1
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 92
7078: PUSH
7079: LD_VAR 0 2
7083: PUSH
7084: LD_VAR 0 3
7088: PUSH
7089: LD_VAR 0 4
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 3
7102: PUSH
7103: LD_INT 21
7105: PUSH
7106: LD_INT 3
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: LIST
7121: PPUSH
7122: CALL_OW 69
7126: ST_TO_ADDR
// if not tmp then
7127: LD_VAR 0 8
7131: NOT
7132: IFFALSE 7136
// exit ;
7134: GO 8694
// for i in tmp do
7136: LD_ADDR_VAR 0 6
7140: PUSH
7141: LD_VAR 0 8
7145: PUSH
7146: FOR_IN
7147: IFFALSE 8669
// begin points := [ 0 , 0 , 0 ] ;
7149: LD_ADDR_VAR 0 9
7153: PUSH
7154: LD_INT 0
7156: PUSH
7157: LD_INT 0
7159: PUSH
7160: LD_INT 0
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: LIST
7167: ST_TO_ADDR
// bpoints := 1 ;
7168: LD_ADDR_VAR 0 10
7172: PUSH
7173: LD_INT 1
7175: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7176: LD_VAR 0 6
7180: PPUSH
7181: CALL_OW 247
7185: PUSH
7186: LD_INT 1
7188: DOUBLE
7189: EQUAL
7190: IFTRUE 7194
7192: GO 7772
7194: POP
// begin if GetClass ( i ) = 1 then
7195: LD_VAR 0 6
7199: PPUSH
7200: CALL_OW 257
7204: PUSH
7205: LD_INT 1
7207: EQUAL
7208: IFFALSE 7229
// points := [ 10 , 5 , 3 ] ;
7210: LD_ADDR_VAR 0 9
7214: PUSH
7215: LD_INT 10
7217: PUSH
7218: LD_INT 5
7220: PUSH
7221: LD_INT 3
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7229: LD_VAR 0 6
7233: PPUSH
7234: CALL_OW 257
7238: PUSH
7239: LD_INT 2
7241: PUSH
7242: LD_INT 3
7244: PUSH
7245: LD_INT 4
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: IN
7253: IFFALSE 7274
// points := [ 3 , 2 , 1 ] ;
7255: LD_ADDR_VAR 0 9
7259: PUSH
7260: LD_INT 3
7262: PUSH
7263: LD_INT 2
7265: PUSH
7266: LD_INT 1
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: LIST
7273: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7274: LD_VAR 0 6
7278: PPUSH
7279: CALL_OW 257
7283: PUSH
7284: LD_INT 5
7286: EQUAL
7287: IFFALSE 7308
// points := [ 130 , 5 , 2 ] ;
7289: LD_ADDR_VAR 0 9
7293: PUSH
7294: LD_INT 130
7296: PUSH
7297: LD_INT 5
7299: PUSH
7300: LD_INT 2
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: LIST
7307: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7308: LD_VAR 0 6
7312: PPUSH
7313: CALL_OW 257
7317: PUSH
7318: LD_INT 8
7320: EQUAL
7321: IFFALSE 7342
// points := [ 35 , 35 , 30 ] ;
7323: LD_ADDR_VAR 0 9
7327: PUSH
7328: LD_INT 35
7330: PUSH
7331: LD_INT 35
7333: PUSH
7334: LD_INT 30
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: LIST
7341: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7342: LD_VAR 0 6
7346: PPUSH
7347: CALL_OW 257
7351: PUSH
7352: LD_INT 9
7354: EQUAL
7355: IFFALSE 7376
// points := [ 20 , 55 , 40 ] ;
7357: LD_ADDR_VAR 0 9
7361: PUSH
7362: LD_INT 20
7364: PUSH
7365: LD_INT 55
7367: PUSH
7368: LD_INT 40
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: LIST
7375: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7376: LD_VAR 0 6
7380: PPUSH
7381: CALL_OW 257
7385: PUSH
7386: LD_INT 12
7388: PUSH
7389: LD_INT 16
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: IN
7396: IFFALSE 7417
// points := [ 5 , 3 , 2 ] ;
7398: LD_ADDR_VAR 0 9
7402: PUSH
7403: LD_INT 5
7405: PUSH
7406: LD_INT 3
7408: PUSH
7409: LD_INT 2
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7417: LD_VAR 0 6
7421: PPUSH
7422: CALL_OW 257
7426: PUSH
7427: LD_INT 17
7429: EQUAL
7430: IFFALSE 7451
// points := [ 100 , 50 , 75 ] ;
7432: LD_ADDR_VAR 0 9
7436: PUSH
7437: LD_INT 100
7439: PUSH
7440: LD_INT 50
7442: PUSH
7443: LD_INT 75
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7451: LD_VAR 0 6
7455: PPUSH
7456: CALL_OW 257
7460: PUSH
7461: LD_INT 15
7463: EQUAL
7464: IFFALSE 7485
// points := [ 10 , 5 , 3 ] ;
7466: LD_ADDR_VAR 0 9
7470: PUSH
7471: LD_INT 10
7473: PUSH
7474: LD_INT 5
7476: PUSH
7477: LD_INT 3
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: LIST
7484: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7485: LD_VAR 0 6
7489: PPUSH
7490: CALL_OW 257
7494: PUSH
7495: LD_INT 14
7497: EQUAL
7498: IFFALSE 7519
// points := [ 10 , 0 , 0 ] ;
7500: LD_ADDR_VAR 0 9
7504: PUSH
7505: LD_INT 10
7507: PUSH
7508: LD_INT 0
7510: PUSH
7511: LD_INT 0
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7519: LD_VAR 0 6
7523: PPUSH
7524: CALL_OW 257
7528: PUSH
7529: LD_INT 11
7531: EQUAL
7532: IFFALSE 7553
// points := [ 30 , 10 , 5 ] ;
7534: LD_ADDR_VAR 0 9
7538: PUSH
7539: LD_INT 30
7541: PUSH
7542: LD_INT 10
7544: PUSH
7545: LD_INT 5
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7553: LD_VAR 0 1
7557: PPUSH
7558: LD_INT 5
7560: PPUSH
7561: CALL_OW 321
7565: PUSH
7566: LD_INT 2
7568: EQUAL
7569: IFFALSE 7586
// bpoints := bpoints * 1.8 ;
7571: LD_ADDR_VAR 0 10
7575: PUSH
7576: LD_VAR 0 10
7580: PUSH
7581: LD_REAL  1.80000000000000E+0000
7584: MUL
7585: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7586: LD_VAR 0 6
7590: PPUSH
7591: CALL_OW 257
7595: PUSH
7596: LD_INT 1
7598: PUSH
7599: LD_INT 2
7601: PUSH
7602: LD_INT 3
7604: PUSH
7605: LD_INT 4
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: IN
7614: PUSH
7615: LD_VAR 0 1
7619: PPUSH
7620: LD_INT 51
7622: PPUSH
7623: CALL_OW 321
7627: PUSH
7628: LD_INT 2
7630: EQUAL
7631: AND
7632: IFFALSE 7649
// bpoints := bpoints * 1.2 ;
7634: LD_ADDR_VAR 0 10
7638: PUSH
7639: LD_VAR 0 10
7643: PUSH
7644: LD_REAL  1.20000000000000E+0000
7647: MUL
7648: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7649: LD_VAR 0 6
7653: PPUSH
7654: CALL_OW 257
7658: PUSH
7659: LD_INT 5
7661: PUSH
7662: LD_INT 7
7664: PUSH
7665: LD_INT 9
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: LIST
7672: IN
7673: PUSH
7674: LD_VAR 0 1
7678: PPUSH
7679: LD_INT 52
7681: PPUSH
7682: CALL_OW 321
7686: PUSH
7687: LD_INT 2
7689: EQUAL
7690: AND
7691: IFFALSE 7708
// bpoints := bpoints * 1.5 ;
7693: LD_ADDR_VAR 0 10
7697: PUSH
7698: LD_VAR 0 10
7702: PUSH
7703: LD_REAL  1.50000000000000E+0000
7706: MUL
7707: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7708: LD_VAR 0 1
7712: PPUSH
7713: LD_INT 66
7715: PPUSH
7716: CALL_OW 321
7720: PUSH
7721: LD_INT 2
7723: EQUAL
7724: IFFALSE 7741
// bpoints := bpoints * 1.1 ;
7726: LD_ADDR_VAR 0 10
7730: PUSH
7731: LD_VAR 0 10
7735: PUSH
7736: LD_REAL  1.10000000000000E+0000
7739: MUL
7740: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7741: LD_ADDR_VAR 0 10
7745: PUSH
7746: LD_VAR 0 10
7750: PUSH
7751: LD_VAR 0 6
7755: PPUSH
7756: LD_INT 1
7758: PPUSH
7759: CALL_OW 259
7763: PUSH
7764: LD_REAL  1.15000000000000E+0000
7767: MUL
7768: MUL
7769: ST_TO_ADDR
// end ; unit_vehicle :
7770: GO 8598
7772: LD_INT 2
7774: DOUBLE
7775: EQUAL
7776: IFTRUE 7780
7778: GO 8586
7780: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7781: LD_VAR 0 6
7785: PPUSH
7786: CALL_OW 264
7790: PUSH
7791: LD_INT 2
7793: PUSH
7794: LD_INT 42
7796: PUSH
7797: LD_INT 24
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: IN
7805: IFFALSE 7826
// points := [ 25 , 5 , 3 ] ;
7807: LD_ADDR_VAR 0 9
7811: PUSH
7812: LD_INT 25
7814: PUSH
7815: LD_INT 5
7817: PUSH
7818: LD_INT 3
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: LIST
7825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7826: LD_VAR 0 6
7830: PPUSH
7831: CALL_OW 264
7835: PUSH
7836: LD_INT 4
7838: PUSH
7839: LD_INT 43
7841: PUSH
7842: LD_INT 25
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: IN
7850: IFFALSE 7871
// points := [ 40 , 15 , 5 ] ;
7852: LD_ADDR_VAR 0 9
7856: PUSH
7857: LD_INT 40
7859: PUSH
7860: LD_INT 15
7862: PUSH
7863: LD_INT 5
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: LIST
7870: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7871: LD_VAR 0 6
7875: PPUSH
7876: CALL_OW 264
7880: PUSH
7881: LD_INT 3
7883: PUSH
7884: LD_INT 23
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: IN
7891: IFFALSE 7912
// points := [ 7 , 25 , 8 ] ;
7893: LD_ADDR_VAR 0 9
7897: PUSH
7898: LD_INT 7
7900: PUSH
7901: LD_INT 25
7903: PUSH
7904: LD_INT 8
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: LIST
7911: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7912: LD_VAR 0 6
7916: PPUSH
7917: CALL_OW 264
7921: PUSH
7922: LD_INT 5
7924: PUSH
7925: LD_INT 27
7927: PUSH
7928: LD_INT 44
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: LIST
7935: IN
7936: IFFALSE 7957
// points := [ 14 , 50 , 16 ] ;
7938: LD_ADDR_VAR 0 9
7942: PUSH
7943: LD_INT 14
7945: PUSH
7946: LD_INT 50
7948: PUSH
7949: LD_INT 16
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: LIST
7956: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7957: LD_VAR 0 6
7961: PPUSH
7962: CALL_OW 264
7966: PUSH
7967: LD_INT 6
7969: PUSH
7970: LD_INT 46
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: IN
7977: IFFALSE 7998
// points := [ 32 , 120 , 70 ] ;
7979: LD_ADDR_VAR 0 9
7983: PUSH
7984: LD_INT 32
7986: PUSH
7987: LD_INT 120
7989: PUSH
7990: LD_INT 70
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7998: LD_VAR 0 6
8002: PPUSH
8003: CALL_OW 264
8007: PUSH
8008: LD_INT 7
8010: PUSH
8011: LD_INT 28
8013: PUSH
8014: LD_INT 45
8016: PUSH
8017: LD_INT 92
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: IN
8026: IFFALSE 8047
// points := [ 35 , 20 , 45 ] ;
8028: LD_ADDR_VAR 0 9
8032: PUSH
8033: LD_INT 35
8035: PUSH
8036: LD_INT 20
8038: PUSH
8039: LD_INT 45
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8047: LD_VAR 0 6
8051: PPUSH
8052: CALL_OW 264
8056: PUSH
8057: LD_INT 47
8059: PUSH
8060: EMPTY
8061: LIST
8062: IN
8063: IFFALSE 8084
// points := [ 67 , 45 , 75 ] ;
8065: LD_ADDR_VAR 0 9
8069: PUSH
8070: LD_INT 67
8072: PUSH
8073: LD_INT 45
8075: PUSH
8076: LD_INT 75
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: LIST
8083: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8084: LD_VAR 0 6
8088: PPUSH
8089: CALL_OW 264
8093: PUSH
8094: LD_INT 26
8096: PUSH
8097: EMPTY
8098: LIST
8099: IN
8100: IFFALSE 8121
// points := [ 120 , 30 , 80 ] ;
8102: LD_ADDR_VAR 0 9
8106: PUSH
8107: LD_INT 120
8109: PUSH
8110: LD_INT 30
8112: PUSH
8113: LD_INT 80
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8121: LD_VAR 0 6
8125: PPUSH
8126: CALL_OW 264
8130: PUSH
8131: LD_INT 22
8133: PUSH
8134: EMPTY
8135: LIST
8136: IN
8137: IFFALSE 8158
// points := [ 40 , 1 , 1 ] ;
8139: LD_ADDR_VAR 0 9
8143: PUSH
8144: LD_INT 40
8146: PUSH
8147: LD_INT 1
8149: PUSH
8150: LD_INT 1
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8158: LD_VAR 0 6
8162: PPUSH
8163: CALL_OW 264
8167: PUSH
8168: LD_INT 29
8170: PUSH
8171: EMPTY
8172: LIST
8173: IN
8174: IFFALSE 8195
// points := [ 70 , 200 , 400 ] ;
8176: LD_ADDR_VAR 0 9
8180: PUSH
8181: LD_INT 70
8183: PUSH
8184: LD_INT 200
8186: PUSH
8187: LD_INT 400
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8195: LD_VAR 0 6
8199: PPUSH
8200: CALL_OW 264
8204: PUSH
8205: LD_INT 14
8207: PUSH
8208: LD_INT 53
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: IN
8215: IFFALSE 8236
// points := [ 40 , 10 , 20 ] ;
8217: LD_ADDR_VAR 0 9
8221: PUSH
8222: LD_INT 40
8224: PUSH
8225: LD_INT 10
8227: PUSH
8228: LD_INT 20
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: LIST
8235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8236: LD_VAR 0 6
8240: PPUSH
8241: CALL_OW 264
8245: PUSH
8246: LD_INT 9
8248: PUSH
8249: EMPTY
8250: LIST
8251: IN
8252: IFFALSE 8273
// points := [ 5 , 70 , 20 ] ;
8254: LD_ADDR_VAR 0 9
8258: PUSH
8259: LD_INT 5
8261: PUSH
8262: LD_INT 70
8264: PUSH
8265: LD_INT 20
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: LIST
8272: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8273: LD_VAR 0 6
8277: PPUSH
8278: CALL_OW 264
8282: PUSH
8283: LD_INT 10
8285: PUSH
8286: EMPTY
8287: LIST
8288: IN
8289: IFFALSE 8310
// points := [ 35 , 110 , 70 ] ;
8291: LD_ADDR_VAR 0 9
8295: PUSH
8296: LD_INT 35
8298: PUSH
8299: LD_INT 110
8301: PUSH
8302: LD_INT 70
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8310: LD_VAR 0 6
8314: PPUSH
8315: CALL_OW 265
8319: PUSH
8320: LD_INT 25
8322: EQUAL
8323: IFFALSE 8344
// points := [ 80 , 65 , 100 ] ;
8325: LD_ADDR_VAR 0 9
8329: PUSH
8330: LD_INT 80
8332: PUSH
8333: LD_INT 65
8335: PUSH
8336: LD_INT 100
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: LIST
8343: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8344: LD_VAR 0 6
8348: PPUSH
8349: CALL_OW 263
8353: PUSH
8354: LD_INT 1
8356: EQUAL
8357: IFFALSE 8392
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8359: LD_ADDR_VAR 0 10
8363: PUSH
8364: LD_VAR 0 10
8368: PUSH
8369: LD_VAR 0 6
8373: PPUSH
8374: CALL_OW 311
8378: PPUSH
8379: LD_INT 3
8381: PPUSH
8382: CALL_OW 259
8386: PUSH
8387: LD_INT 4
8389: MUL
8390: MUL
8391: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8392: LD_VAR 0 6
8396: PPUSH
8397: CALL_OW 263
8401: PUSH
8402: LD_INT 2
8404: EQUAL
8405: IFFALSE 8456
// begin j := IsControledBy ( i ) ;
8407: LD_ADDR_VAR 0 7
8411: PUSH
8412: LD_VAR 0 6
8416: PPUSH
8417: CALL_OW 312
8421: ST_TO_ADDR
// if j then
8422: LD_VAR 0 7
8426: IFFALSE 8456
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8428: LD_ADDR_VAR 0 10
8432: PUSH
8433: LD_VAR 0 10
8437: PUSH
8438: LD_VAR 0 7
8442: PPUSH
8443: LD_INT 3
8445: PPUSH
8446: CALL_OW 259
8450: PUSH
8451: LD_INT 3
8453: MUL
8454: MUL
8455: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8456: LD_VAR 0 6
8460: PPUSH
8461: CALL_OW 264
8465: PUSH
8466: LD_INT 5
8468: PUSH
8469: LD_INT 6
8471: PUSH
8472: LD_INT 46
8474: PUSH
8475: LD_INT 44
8477: PUSH
8478: LD_INT 47
8480: PUSH
8481: LD_INT 45
8483: PUSH
8484: LD_INT 28
8486: PUSH
8487: LD_INT 7
8489: PUSH
8490: LD_INT 27
8492: PUSH
8493: LD_INT 29
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: IN
8508: PUSH
8509: LD_VAR 0 1
8513: PPUSH
8514: LD_INT 52
8516: PPUSH
8517: CALL_OW 321
8521: PUSH
8522: LD_INT 2
8524: EQUAL
8525: AND
8526: IFFALSE 8543
// bpoints := bpoints * 1.2 ;
8528: LD_ADDR_VAR 0 10
8532: PUSH
8533: LD_VAR 0 10
8537: PUSH
8538: LD_REAL  1.20000000000000E+0000
8541: MUL
8542: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8543: LD_VAR 0 6
8547: PPUSH
8548: CALL_OW 264
8552: PUSH
8553: LD_INT 6
8555: PUSH
8556: LD_INT 46
8558: PUSH
8559: LD_INT 47
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: IN
8567: IFFALSE 8584
// bpoints := bpoints * 1.2 ;
8569: LD_ADDR_VAR 0 10
8573: PUSH
8574: LD_VAR 0 10
8578: PUSH
8579: LD_REAL  1.20000000000000E+0000
8582: MUL
8583: ST_TO_ADDR
// end ; unit_building :
8584: GO 8598
8586: LD_INT 3
8588: DOUBLE
8589: EQUAL
8590: IFTRUE 8594
8592: GO 8597
8594: POP
// ; end ;
8595: GO 8598
8597: POP
// for j = 1 to 3 do
8598: LD_ADDR_VAR 0 7
8602: PUSH
8603: DOUBLE
8604: LD_INT 1
8606: DEC
8607: ST_TO_ADDR
8608: LD_INT 3
8610: PUSH
8611: FOR_TO
8612: IFFALSE 8665
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8614: LD_ADDR_VAR 0 5
8618: PUSH
8619: LD_VAR 0 5
8623: PPUSH
8624: LD_VAR 0 7
8628: PPUSH
8629: LD_VAR 0 5
8633: PUSH
8634: LD_VAR 0 7
8638: ARRAY
8639: PUSH
8640: LD_VAR 0 9
8644: PUSH
8645: LD_VAR 0 7
8649: ARRAY
8650: PUSH
8651: LD_VAR 0 10
8655: MUL
8656: PLUS
8657: PPUSH
8658: CALL_OW 1
8662: ST_TO_ADDR
8663: GO 8611
8665: POP
8666: POP
// end ;
8667: GO 7146
8669: POP
8670: POP
// result := Replace ( result , 4 , tmp ) ;
8671: LD_ADDR_VAR 0 5
8675: PUSH
8676: LD_VAR 0 5
8680: PPUSH
8681: LD_INT 4
8683: PPUSH
8684: LD_VAR 0 8
8688: PPUSH
8689: CALL_OW 1
8693: ST_TO_ADDR
// end ;
8694: LD_VAR 0 5
8698: RET
// export function DangerAtRange ( unit , range ) ; begin
8699: LD_INT 0
8701: PPUSH
// if not unit then
8702: LD_VAR 0 1
8706: NOT
8707: IFFALSE 8711
// exit ;
8709: GO 8756
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8711: LD_ADDR_VAR 0 3
8715: PUSH
8716: LD_VAR 0 1
8720: PPUSH
8721: CALL_OW 255
8725: PPUSH
8726: LD_VAR 0 1
8730: PPUSH
8731: CALL_OW 250
8735: PPUSH
8736: LD_VAR 0 1
8740: PPUSH
8741: CALL_OW 251
8745: PPUSH
8746: LD_VAR 0 2
8750: PPUSH
8751: CALL 6998 0 4
8755: ST_TO_ADDR
// end ;
8756: LD_VAR 0 3
8760: RET
// export function DangerInArea ( side , area ) ; begin
8761: LD_INT 0
8763: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8764: LD_ADDR_VAR 0 3
8768: PUSH
8769: LD_VAR 0 2
8773: PPUSH
8774: LD_INT 81
8776: PUSH
8777: LD_VAR 0 1
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PPUSH
8786: CALL_OW 70
8790: ST_TO_ADDR
// end ;
8791: LD_VAR 0 3
8795: RET
// export function IsExtension ( b ) ; begin
8796: LD_INT 0
8798: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8799: LD_ADDR_VAR 0 2
8803: PUSH
8804: LD_VAR 0 1
8808: PUSH
8809: LD_INT 23
8811: PUSH
8812: LD_INT 20
8814: PUSH
8815: LD_INT 22
8817: PUSH
8818: LD_INT 17
8820: PUSH
8821: LD_INT 24
8823: PUSH
8824: LD_INT 21
8826: PUSH
8827: LD_INT 19
8829: PUSH
8830: LD_INT 16
8832: PUSH
8833: LD_INT 25
8835: PUSH
8836: LD_INT 18
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: IN
8851: ST_TO_ADDR
// end ;
8852: LD_VAR 0 2
8856: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8857: LD_INT 0
8859: PPUSH
8860: PPUSH
8861: PPUSH
// result := [ ] ;
8862: LD_ADDR_VAR 0 4
8866: PUSH
8867: EMPTY
8868: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8869: LD_ADDR_VAR 0 5
8873: PUSH
8874: LD_VAR 0 2
8878: PPUSH
8879: LD_INT 21
8881: PUSH
8882: LD_INT 3
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PPUSH
8889: CALL_OW 70
8893: ST_TO_ADDR
// if not tmp then
8894: LD_VAR 0 5
8898: NOT
8899: IFFALSE 8903
// exit ;
8901: GO 8967
// if checkLink then
8903: LD_VAR 0 3
8907: IFFALSE 8957
// begin for i in tmp do
8909: LD_ADDR_VAR 0 6
8913: PUSH
8914: LD_VAR 0 5
8918: PUSH
8919: FOR_IN
8920: IFFALSE 8955
// if GetBase ( i ) <> base then
8922: LD_VAR 0 6
8926: PPUSH
8927: CALL_OW 274
8931: PUSH
8932: LD_VAR 0 1
8936: NONEQUAL
8937: IFFALSE 8953
// ComLinkToBase ( base , i ) ;
8939: LD_VAR 0 1
8943: PPUSH
8944: LD_VAR 0 6
8948: PPUSH
8949: CALL_OW 169
8953: GO 8919
8955: POP
8956: POP
// end ; result := tmp ;
8957: LD_ADDR_VAR 0 4
8961: PUSH
8962: LD_VAR 0 5
8966: ST_TO_ADDR
// end ;
8967: LD_VAR 0 4
8971: RET
// export function ComComplete ( units , b ) ; var i ; begin
8972: LD_INT 0
8974: PPUSH
8975: PPUSH
// if not units then
8976: LD_VAR 0 1
8980: NOT
8981: IFFALSE 8985
// exit ;
8983: GO 9075
// for i in units do
8985: LD_ADDR_VAR 0 4
8989: PUSH
8990: LD_VAR 0 1
8994: PUSH
8995: FOR_IN
8996: IFFALSE 9073
// if BuildingStatus ( b ) = bs_build then
8998: LD_VAR 0 2
9002: PPUSH
9003: CALL_OW 461
9007: PUSH
9008: LD_INT 1
9010: EQUAL
9011: IFFALSE 9071
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9013: LD_VAR 0 4
9017: PPUSH
9018: LD_STRING h
9020: PUSH
9021: LD_VAR 0 2
9025: PPUSH
9026: CALL_OW 250
9030: PUSH
9031: LD_VAR 0 2
9035: PPUSH
9036: CALL_OW 251
9040: PUSH
9041: LD_VAR 0 2
9045: PUSH
9046: LD_INT 0
9048: PUSH
9049: LD_INT 0
9051: PUSH
9052: LD_INT 0
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: PPUSH
9067: CALL_OW 446
9071: GO 8995
9073: POP
9074: POP
// end ;
9075: LD_VAR 0 3
9079: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9080: LD_INT 0
9082: PPUSH
9083: PPUSH
9084: PPUSH
9085: PPUSH
9086: PPUSH
9087: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9088: LD_VAR 0 1
9092: NOT
9093: PUSH
9094: LD_VAR 0 1
9098: PPUSH
9099: CALL_OW 263
9103: PUSH
9104: LD_INT 2
9106: NONEQUAL
9107: OR
9108: IFFALSE 9112
// exit ;
9110: GO 9428
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9112: LD_ADDR_VAR 0 6
9116: PUSH
9117: LD_INT 22
9119: PUSH
9120: LD_VAR 0 1
9124: PPUSH
9125: CALL_OW 255
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PUSH
9134: LD_INT 2
9136: PUSH
9137: LD_INT 30
9139: PUSH
9140: LD_INT 36
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: PUSH
9147: LD_INT 34
9149: PUSH
9150: LD_INT 31
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: LIST
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: PPUSH
9166: CALL_OW 69
9170: ST_TO_ADDR
// if not tmp then
9171: LD_VAR 0 6
9175: NOT
9176: IFFALSE 9180
// exit ;
9178: GO 9428
// result := [ ] ;
9180: LD_ADDR_VAR 0 2
9184: PUSH
9185: EMPTY
9186: ST_TO_ADDR
// for i in tmp do
9187: LD_ADDR_VAR 0 3
9191: PUSH
9192: LD_VAR 0 6
9196: PUSH
9197: FOR_IN
9198: IFFALSE 9269
// begin t := UnitsInside ( i ) ;
9200: LD_ADDR_VAR 0 4
9204: PUSH
9205: LD_VAR 0 3
9209: PPUSH
9210: CALL_OW 313
9214: ST_TO_ADDR
// if t then
9215: LD_VAR 0 4
9219: IFFALSE 9267
// for j in t do
9221: LD_ADDR_VAR 0 7
9225: PUSH
9226: LD_VAR 0 4
9230: PUSH
9231: FOR_IN
9232: IFFALSE 9265
// result := Replace ( result , result + 1 , j ) ;
9234: LD_ADDR_VAR 0 2
9238: PUSH
9239: LD_VAR 0 2
9243: PPUSH
9244: LD_VAR 0 2
9248: PUSH
9249: LD_INT 1
9251: PLUS
9252: PPUSH
9253: LD_VAR 0 7
9257: PPUSH
9258: CALL_OW 1
9262: ST_TO_ADDR
9263: GO 9231
9265: POP
9266: POP
// end ;
9267: GO 9197
9269: POP
9270: POP
// if not result then
9271: LD_VAR 0 2
9275: NOT
9276: IFFALSE 9280
// exit ;
9278: GO 9428
// mech := result [ 1 ] ;
9280: LD_ADDR_VAR 0 5
9284: PUSH
9285: LD_VAR 0 2
9289: PUSH
9290: LD_INT 1
9292: ARRAY
9293: ST_TO_ADDR
// if result > 1 then
9294: LD_VAR 0 2
9298: PUSH
9299: LD_INT 1
9301: GREATER
9302: IFFALSE 9414
// begin for i = 2 to result do
9304: LD_ADDR_VAR 0 3
9308: PUSH
9309: DOUBLE
9310: LD_INT 2
9312: DEC
9313: ST_TO_ADDR
9314: LD_VAR 0 2
9318: PUSH
9319: FOR_TO
9320: IFFALSE 9412
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9322: LD_ADDR_VAR 0 4
9326: PUSH
9327: LD_VAR 0 2
9331: PUSH
9332: LD_VAR 0 3
9336: ARRAY
9337: PPUSH
9338: LD_INT 3
9340: PPUSH
9341: CALL_OW 259
9345: PUSH
9346: LD_VAR 0 2
9350: PUSH
9351: LD_VAR 0 3
9355: ARRAY
9356: PPUSH
9357: CALL_OW 432
9361: MINUS
9362: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9363: LD_VAR 0 4
9367: PUSH
9368: LD_VAR 0 5
9372: PPUSH
9373: LD_INT 3
9375: PPUSH
9376: CALL_OW 259
9380: PUSH
9381: LD_VAR 0 5
9385: PPUSH
9386: CALL_OW 432
9390: MINUS
9391: GREATEREQUAL
9392: IFFALSE 9410
// mech := result [ i ] ;
9394: LD_ADDR_VAR 0 5
9398: PUSH
9399: LD_VAR 0 2
9403: PUSH
9404: LD_VAR 0 3
9408: ARRAY
9409: ST_TO_ADDR
// end ;
9410: GO 9319
9412: POP
9413: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9414: LD_VAR 0 1
9418: PPUSH
9419: LD_VAR 0 5
9423: PPUSH
9424: CALL_OW 135
// end ;
9428: LD_VAR 0 2
9432: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9433: LD_INT 0
9435: PPUSH
9436: PPUSH
9437: PPUSH
9438: PPUSH
9439: PPUSH
9440: PPUSH
9441: PPUSH
9442: PPUSH
9443: PPUSH
9444: PPUSH
9445: PPUSH
9446: PPUSH
9447: PPUSH
// result := [ ] ;
9448: LD_ADDR_VAR 0 7
9452: PUSH
9453: EMPTY
9454: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9455: LD_VAR 0 1
9459: PPUSH
9460: CALL_OW 266
9464: PUSH
9465: LD_INT 0
9467: PUSH
9468: LD_INT 1
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: IN
9475: NOT
9476: IFFALSE 9480
// exit ;
9478: GO 11114
// if name then
9480: LD_VAR 0 3
9484: IFFALSE 9500
// SetBName ( base_dep , name ) ;
9486: LD_VAR 0 1
9490: PPUSH
9491: LD_VAR 0 3
9495: PPUSH
9496: CALL_OW 500
// base := GetBase ( base_dep ) ;
9500: LD_ADDR_VAR 0 15
9504: PUSH
9505: LD_VAR 0 1
9509: PPUSH
9510: CALL_OW 274
9514: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9515: LD_ADDR_VAR 0 16
9519: PUSH
9520: LD_VAR 0 1
9524: PPUSH
9525: CALL_OW 255
9529: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9530: LD_ADDR_VAR 0 17
9534: PUSH
9535: LD_VAR 0 1
9539: PPUSH
9540: CALL_OW 248
9544: ST_TO_ADDR
// if sources then
9545: LD_VAR 0 5
9549: IFFALSE 9596
// for i = 1 to 3 do
9551: LD_ADDR_VAR 0 8
9555: PUSH
9556: DOUBLE
9557: LD_INT 1
9559: DEC
9560: ST_TO_ADDR
9561: LD_INT 3
9563: PUSH
9564: FOR_TO
9565: IFFALSE 9594
// AddResourceType ( base , i , sources [ i ] ) ;
9567: LD_VAR 0 15
9571: PPUSH
9572: LD_VAR 0 8
9576: PPUSH
9577: LD_VAR 0 5
9581: PUSH
9582: LD_VAR 0 8
9586: ARRAY
9587: PPUSH
9588: CALL_OW 276
9592: GO 9564
9594: POP
9595: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9596: LD_ADDR_VAR 0 18
9600: PUSH
9601: LD_VAR 0 15
9605: PPUSH
9606: LD_VAR 0 2
9610: PPUSH
9611: LD_INT 1
9613: PPUSH
9614: CALL 8857 0 3
9618: ST_TO_ADDR
// InitHc ;
9619: CALL_OW 19
// InitUc ;
9623: CALL_OW 18
// uc_side := side ;
9627: LD_ADDR_OWVAR 20
9631: PUSH
9632: LD_VAR 0 16
9636: ST_TO_ADDR
// uc_nation := nation ;
9637: LD_ADDR_OWVAR 21
9641: PUSH
9642: LD_VAR 0 17
9646: ST_TO_ADDR
// if buildings then
9647: LD_VAR 0 18
9651: IFFALSE 10973
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9653: LD_ADDR_VAR 0 19
9657: PUSH
9658: LD_VAR 0 18
9662: PPUSH
9663: LD_INT 2
9665: PUSH
9666: LD_INT 30
9668: PUSH
9669: LD_INT 29
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PUSH
9676: LD_INT 30
9678: PUSH
9679: LD_INT 30
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: LIST
9690: PPUSH
9691: CALL_OW 72
9695: ST_TO_ADDR
// if tmp then
9696: LD_VAR 0 19
9700: IFFALSE 9748
// for i in tmp do
9702: LD_ADDR_VAR 0 8
9706: PUSH
9707: LD_VAR 0 19
9711: PUSH
9712: FOR_IN
9713: IFFALSE 9746
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9715: LD_VAR 0 8
9719: PPUSH
9720: CALL_OW 250
9724: PPUSH
9725: LD_VAR 0 8
9729: PPUSH
9730: CALL_OW 251
9734: PPUSH
9735: LD_VAR 0 16
9739: PPUSH
9740: CALL_OW 441
9744: GO 9712
9746: POP
9747: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9748: LD_VAR 0 18
9752: PPUSH
9753: LD_INT 2
9755: PUSH
9756: LD_INT 30
9758: PUSH
9759: LD_INT 32
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 30
9768: PUSH
9769: LD_INT 33
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: PPUSH
9781: CALL_OW 72
9785: IFFALSE 9873
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9787: LD_ADDR_VAR 0 8
9791: PUSH
9792: LD_VAR 0 18
9796: PPUSH
9797: LD_INT 2
9799: PUSH
9800: LD_INT 30
9802: PUSH
9803: LD_INT 32
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: PUSH
9810: LD_INT 30
9812: PUSH
9813: LD_INT 33
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: PPUSH
9825: CALL_OW 72
9829: PUSH
9830: FOR_IN
9831: IFFALSE 9871
// begin if not GetBWeapon ( i ) then
9833: LD_VAR 0 8
9837: PPUSH
9838: CALL_OW 269
9842: NOT
9843: IFFALSE 9869
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9845: LD_VAR 0 8
9849: PPUSH
9850: LD_VAR 0 8
9854: PPUSH
9855: LD_VAR 0 2
9859: PPUSH
9860: CALL 11119 0 2
9864: PPUSH
9865: CALL_OW 431
// end ;
9869: GO 9830
9871: POP
9872: POP
// end ; for i = 1 to personel do
9873: LD_ADDR_VAR 0 8
9877: PUSH
9878: DOUBLE
9879: LD_INT 1
9881: DEC
9882: ST_TO_ADDR
9883: LD_VAR 0 6
9887: PUSH
9888: FOR_TO
9889: IFFALSE 10953
// begin if i > 4 then
9891: LD_VAR 0 8
9895: PUSH
9896: LD_INT 4
9898: GREATER
9899: IFFALSE 9903
// break ;
9901: GO 10953
// case i of 1 :
9903: LD_VAR 0 8
9907: PUSH
9908: LD_INT 1
9910: DOUBLE
9911: EQUAL
9912: IFTRUE 9916
9914: GO 9996
9916: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9917: LD_ADDR_VAR 0 12
9921: PUSH
9922: LD_VAR 0 18
9926: PPUSH
9927: LD_INT 22
9929: PUSH
9930: LD_VAR 0 16
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: PUSH
9939: LD_INT 58
9941: PUSH
9942: EMPTY
9943: LIST
9944: PUSH
9945: LD_INT 2
9947: PUSH
9948: LD_INT 30
9950: PUSH
9951: LD_INT 32
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: LD_INT 30
9960: PUSH
9961: LD_INT 4
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PUSH
9968: LD_INT 30
9970: PUSH
9971: LD_INT 5
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: PPUSH
9989: CALL_OW 72
9993: ST_TO_ADDR
9994: GO 10218
9996: LD_INT 2
9998: DOUBLE
9999: EQUAL
10000: IFTRUE 10004
10002: GO 10066
10004: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10005: LD_ADDR_VAR 0 12
10009: PUSH
10010: LD_VAR 0 18
10014: PPUSH
10015: LD_INT 22
10017: PUSH
10018: LD_VAR 0 16
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 2
10029: PUSH
10030: LD_INT 30
10032: PUSH
10033: LD_INT 0
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 30
10042: PUSH
10043: LD_INT 1
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: LIST
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PPUSH
10059: CALL_OW 72
10063: ST_TO_ADDR
10064: GO 10218
10066: LD_INT 3
10068: DOUBLE
10069: EQUAL
10070: IFTRUE 10074
10072: GO 10136
10074: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10075: LD_ADDR_VAR 0 12
10079: PUSH
10080: LD_VAR 0 18
10084: PPUSH
10085: LD_INT 22
10087: PUSH
10088: LD_VAR 0 16
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: PUSH
10097: LD_INT 2
10099: PUSH
10100: LD_INT 30
10102: PUSH
10103: LD_INT 2
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: LD_INT 30
10112: PUSH
10113: LD_INT 3
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: LIST
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PPUSH
10129: CALL_OW 72
10133: ST_TO_ADDR
10134: GO 10218
10136: LD_INT 4
10138: DOUBLE
10139: EQUAL
10140: IFTRUE 10144
10142: GO 10217
10144: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10145: LD_ADDR_VAR 0 12
10149: PUSH
10150: LD_VAR 0 18
10154: PPUSH
10155: LD_INT 22
10157: PUSH
10158: LD_VAR 0 16
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: LD_INT 2
10169: PUSH
10170: LD_INT 30
10172: PUSH
10173: LD_INT 6
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 30
10182: PUSH
10183: LD_INT 7
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: LD_INT 30
10192: PUSH
10193: LD_INT 8
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PPUSH
10210: CALL_OW 72
10214: ST_TO_ADDR
10215: GO 10218
10217: POP
// if i = 1 then
10218: LD_VAR 0 8
10222: PUSH
10223: LD_INT 1
10225: EQUAL
10226: IFFALSE 10337
// begin tmp := [ ] ;
10228: LD_ADDR_VAR 0 19
10232: PUSH
10233: EMPTY
10234: ST_TO_ADDR
// for j in f do
10235: LD_ADDR_VAR 0 9
10239: PUSH
10240: LD_VAR 0 12
10244: PUSH
10245: FOR_IN
10246: IFFALSE 10319
// if GetBType ( j ) = b_bunker then
10248: LD_VAR 0 9
10252: PPUSH
10253: CALL_OW 266
10257: PUSH
10258: LD_INT 32
10260: EQUAL
10261: IFFALSE 10288
// tmp := Insert ( tmp , 1 , j ) else
10263: LD_ADDR_VAR 0 19
10267: PUSH
10268: LD_VAR 0 19
10272: PPUSH
10273: LD_INT 1
10275: PPUSH
10276: LD_VAR 0 9
10280: PPUSH
10281: CALL_OW 2
10285: ST_TO_ADDR
10286: GO 10317
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10288: LD_ADDR_VAR 0 19
10292: PUSH
10293: LD_VAR 0 19
10297: PPUSH
10298: LD_VAR 0 19
10302: PUSH
10303: LD_INT 1
10305: PLUS
10306: PPUSH
10307: LD_VAR 0 9
10311: PPUSH
10312: CALL_OW 2
10316: ST_TO_ADDR
10317: GO 10245
10319: POP
10320: POP
// if tmp then
10321: LD_VAR 0 19
10325: IFFALSE 10337
// f := tmp ;
10327: LD_ADDR_VAR 0 12
10331: PUSH
10332: LD_VAR 0 19
10336: ST_TO_ADDR
// end ; x := personel [ i ] ;
10337: LD_ADDR_VAR 0 13
10341: PUSH
10342: LD_VAR 0 6
10346: PUSH
10347: LD_VAR 0 8
10351: ARRAY
10352: ST_TO_ADDR
// if x = - 1 then
10353: LD_VAR 0 13
10357: PUSH
10358: LD_INT 1
10360: NEG
10361: EQUAL
10362: IFFALSE 10571
// begin for j in f do
10364: LD_ADDR_VAR 0 9
10368: PUSH
10369: LD_VAR 0 12
10373: PUSH
10374: FOR_IN
10375: IFFALSE 10567
// repeat InitHc ;
10377: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10381: LD_VAR 0 9
10385: PPUSH
10386: CALL_OW 266
10390: PUSH
10391: LD_INT 5
10393: EQUAL
10394: IFFALSE 10464
// begin if UnitsInside ( j ) < 3 then
10396: LD_VAR 0 9
10400: PPUSH
10401: CALL_OW 313
10405: PUSH
10406: LD_INT 3
10408: LESS
10409: IFFALSE 10445
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10411: LD_INT 0
10413: PPUSH
10414: LD_INT 5
10416: PUSH
10417: LD_INT 8
10419: PUSH
10420: LD_INT 9
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: LIST
10427: PUSH
10428: LD_VAR 0 17
10432: ARRAY
10433: PPUSH
10434: LD_VAR 0 4
10438: PPUSH
10439: CALL_OW 380
10443: GO 10462
// PrepareHuman ( false , i , skill ) ;
10445: LD_INT 0
10447: PPUSH
10448: LD_VAR 0 8
10452: PPUSH
10453: LD_VAR 0 4
10457: PPUSH
10458: CALL_OW 380
// end else
10462: GO 10481
// PrepareHuman ( false , i , skill ) ;
10464: LD_INT 0
10466: PPUSH
10467: LD_VAR 0 8
10471: PPUSH
10472: LD_VAR 0 4
10476: PPUSH
10477: CALL_OW 380
// un := CreateHuman ;
10481: LD_ADDR_VAR 0 14
10485: PUSH
10486: CALL_OW 44
10490: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10491: LD_ADDR_VAR 0 7
10495: PUSH
10496: LD_VAR 0 7
10500: PPUSH
10501: LD_INT 1
10503: PPUSH
10504: LD_VAR 0 14
10508: PPUSH
10509: CALL_OW 2
10513: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10514: LD_VAR 0 14
10518: PPUSH
10519: LD_VAR 0 9
10523: PPUSH
10524: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10528: LD_VAR 0 9
10532: PPUSH
10533: CALL_OW 313
10537: PUSH
10538: LD_INT 6
10540: EQUAL
10541: PUSH
10542: LD_VAR 0 9
10546: PPUSH
10547: CALL_OW 266
10551: PUSH
10552: LD_INT 32
10554: PUSH
10555: LD_INT 31
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: IN
10562: OR
10563: IFFALSE 10377
10565: GO 10374
10567: POP
10568: POP
// end else
10569: GO 10951
// for j = 1 to x do
10571: LD_ADDR_VAR 0 9
10575: PUSH
10576: DOUBLE
10577: LD_INT 1
10579: DEC
10580: ST_TO_ADDR
10581: LD_VAR 0 13
10585: PUSH
10586: FOR_TO
10587: IFFALSE 10949
// begin InitHc ;
10589: CALL_OW 19
// if not f then
10593: LD_VAR 0 12
10597: NOT
10598: IFFALSE 10687
// begin PrepareHuman ( false , i , skill ) ;
10600: LD_INT 0
10602: PPUSH
10603: LD_VAR 0 8
10607: PPUSH
10608: LD_VAR 0 4
10612: PPUSH
10613: CALL_OW 380
// un := CreateHuman ;
10617: LD_ADDR_VAR 0 14
10621: PUSH
10622: CALL_OW 44
10626: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10627: LD_ADDR_VAR 0 7
10631: PUSH
10632: LD_VAR 0 7
10636: PPUSH
10637: LD_INT 1
10639: PPUSH
10640: LD_VAR 0 14
10644: PPUSH
10645: CALL_OW 2
10649: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10650: LD_VAR 0 14
10654: PPUSH
10655: LD_VAR 0 1
10659: PPUSH
10660: CALL_OW 250
10664: PPUSH
10665: LD_VAR 0 1
10669: PPUSH
10670: CALL_OW 251
10674: PPUSH
10675: LD_INT 10
10677: PPUSH
10678: LD_INT 0
10680: PPUSH
10681: CALL_OW 50
// continue ;
10685: GO 10586
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10687: LD_VAR 0 12
10691: PUSH
10692: LD_INT 1
10694: ARRAY
10695: PPUSH
10696: CALL_OW 313
10700: PUSH
10701: LD_VAR 0 12
10705: PUSH
10706: LD_INT 1
10708: ARRAY
10709: PPUSH
10710: CALL_OW 266
10714: PUSH
10715: LD_INT 32
10717: PUSH
10718: LD_INT 31
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: IN
10725: AND
10726: PUSH
10727: LD_VAR 0 12
10731: PUSH
10732: LD_INT 1
10734: ARRAY
10735: PPUSH
10736: CALL_OW 313
10740: PUSH
10741: LD_INT 6
10743: EQUAL
10744: OR
10745: IFFALSE 10765
// f := Delete ( f , 1 ) ;
10747: LD_ADDR_VAR 0 12
10751: PUSH
10752: LD_VAR 0 12
10756: PPUSH
10757: LD_INT 1
10759: PPUSH
10760: CALL_OW 3
10764: ST_TO_ADDR
// if not f then
10765: LD_VAR 0 12
10769: NOT
10770: IFFALSE 10788
// begin x := x + 2 ;
10772: LD_ADDR_VAR 0 13
10776: PUSH
10777: LD_VAR 0 13
10781: PUSH
10782: LD_INT 2
10784: PLUS
10785: ST_TO_ADDR
// continue ;
10786: GO 10586
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10788: LD_VAR 0 12
10792: PUSH
10793: LD_INT 1
10795: ARRAY
10796: PPUSH
10797: CALL_OW 266
10801: PUSH
10802: LD_INT 5
10804: EQUAL
10805: IFFALSE 10879
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10807: LD_VAR 0 12
10811: PUSH
10812: LD_INT 1
10814: ARRAY
10815: PPUSH
10816: CALL_OW 313
10820: PUSH
10821: LD_INT 3
10823: LESS
10824: IFFALSE 10860
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10826: LD_INT 0
10828: PPUSH
10829: LD_INT 5
10831: PUSH
10832: LD_INT 8
10834: PUSH
10835: LD_INT 9
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: LIST
10842: PUSH
10843: LD_VAR 0 17
10847: ARRAY
10848: PPUSH
10849: LD_VAR 0 4
10853: PPUSH
10854: CALL_OW 380
10858: GO 10877
// PrepareHuman ( false , i , skill ) ;
10860: LD_INT 0
10862: PPUSH
10863: LD_VAR 0 8
10867: PPUSH
10868: LD_VAR 0 4
10872: PPUSH
10873: CALL_OW 380
// end else
10877: GO 10896
// PrepareHuman ( false , i , skill ) ;
10879: LD_INT 0
10881: PPUSH
10882: LD_VAR 0 8
10886: PPUSH
10887: LD_VAR 0 4
10891: PPUSH
10892: CALL_OW 380
// un := CreateHuman ;
10896: LD_ADDR_VAR 0 14
10900: PUSH
10901: CALL_OW 44
10905: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10906: LD_ADDR_VAR 0 7
10910: PUSH
10911: LD_VAR 0 7
10915: PPUSH
10916: LD_INT 1
10918: PPUSH
10919: LD_VAR 0 14
10923: PPUSH
10924: CALL_OW 2
10928: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10929: LD_VAR 0 14
10933: PPUSH
10934: LD_VAR 0 12
10938: PUSH
10939: LD_INT 1
10941: ARRAY
10942: PPUSH
10943: CALL_OW 52
// end ;
10947: GO 10586
10949: POP
10950: POP
// end ;
10951: GO 9888
10953: POP
10954: POP
// result := result ^ buildings ;
10955: LD_ADDR_VAR 0 7
10959: PUSH
10960: LD_VAR 0 7
10964: PUSH
10965: LD_VAR 0 18
10969: ADD
10970: ST_TO_ADDR
// end else
10971: GO 11114
// begin for i = 1 to personel do
10973: LD_ADDR_VAR 0 8
10977: PUSH
10978: DOUBLE
10979: LD_INT 1
10981: DEC
10982: ST_TO_ADDR
10983: LD_VAR 0 6
10987: PUSH
10988: FOR_TO
10989: IFFALSE 11112
// begin if i > 4 then
10991: LD_VAR 0 8
10995: PUSH
10996: LD_INT 4
10998: GREATER
10999: IFFALSE 11003
// break ;
11001: GO 11112
// x := personel [ i ] ;
11003: LD_ADDR_VAR 0 13
11007: PUSH
11008: LD_VAR 0 6
11012: PUSH
11013: LD_VAR 0 8
11017: ARRAY
11018: ST_TO_ADDR
// if x = - 1 then
11019: LD_VAR 0 13
11023: PUSH
11024: LD_INT 1
11026: NEG
11027: EQUAL
11028: IFFALSE 11032
// continue ;
11030: GO 10988
// PrepareHuman ( false , i , skill ) ;
11032: LD_INT 0
11034: PPUSH
11035: LD_VAR 0 8
11039: PPUSH
11040: LD_VAR 0 4
11044: PPUSH
11045: CALL_OW 380
// un := CreateHuman ;
11049: LD_ADDR_VAR 0 14
11053: PUSH
11054: CALL_OW 44
11058: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11059: LD_VAR 0 14
11063: PPUSH
11064: LD_VAR 0 1
11068: PPUSH
11069: CALL_OW 250
11073: PPUSH
11074: LD_VAR 0 1
11078: PPUSH
11079: CALL_OW 251
11083: PPUSH
11084: LD_INT 10
11086: PPUSH
11087: LD_INT 0
11089: PPUSH
11090: CALL_OW 50
// result := result ^ un ;
11094: LD_ADDR_VAR 0 7
11098: PUSH
11099: LD_VAR 0 7
11103: PUSH
11104: LD_VAR 0 14
11108: ADD
11109: ST_TO_ADDR
// end ;
11110: GO 10988
11112: POP
11113: POP
// end ; end ;
11114: LD_VAR 0 7
11118: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11119: LD_INT 0
11121: PPUSH
11122: PPUSH
11123: PPUSH
11124: PPUSH
11125: PPUSH
11126: PPUSH
11127: PPUSH
11128: PPUSH
11129: PPUSH
11130: PPUSH
11131: PPUSH
11132: PPUSH
11133: PPUSH
11134: PPUSH
11135: PPUSH
11136: PPUSH
// result := false ;
11137: LD_ADDR_VAR 0 3
11141: PUSH
11142: LD_INT 0
11144: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11145: LD_VAR 0 1
11149: NOT
11150: PUSH
11151: LD_VAR 0 1
11155: PPUSH
11156: CALL_OW 266
11160: PUSH
11161: LD_INT 32
11163: PUSH
11164: LD_INT 33
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: IN
11171: NOT
11172: OR
11173: IFFALSE 11177
// exit ;
11175: GO 12286
// nat := GetNation ( tower ) ;
11177: LD_ADDR_VAR 0 12
11181: PUSH
11182: LD_VAR 0 1
11186: PPUSH
11187: CALL_OW 248
11191: ST_TO_ADDR
// side := GetSide ( tower ) ;
11192: LD_ADDR_VAR 0 16
11196: PUSH
11197: LD_VAR 0 1
11201: PPUSH
11202: CALL_OW 255
11206: ST_TO_ADDR
// x := GetX ( tower ) ;
11207: LD_ADDR_VAR 0 10
11211: PUSH
11212: LD_VAR 0 1
11216: PPUSH
11217: CALL_OW 250
11221: ST_TO_ADDR
// y := GetY ( tower ) ;
11222: LD_ADDR_VAR 0 11
11226: PUSH
11227: LD_VAR 0 1
11231: PPUSH
11232: CALL_OW 251
11236: ST_TO_ADDR
// if not x or not y then
11237: LD_VAR 0 10
11241: NOT
11242: PUSH
11243: LD_VAR 0 11
11247: NOT
11248: OR
11249: IFFALSE 11253
// exit ;
11251: GO 12286
// weapon := 0 ;
11253: LD_ADDR_VAR 0 18
11257: PUSH
11258: LD_INT 0
11260: ST_TO_ADDR
// fac_list := [ ] ;
11261: LD_ADDR_VAR 0 17
11265: PUSH
11266: EMPTY
11267: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11268: LD_ADDR_VAR 0 6
11272: PUSH
11273: LD_VAR 0 1
11277: PPUSH
11278: CALL_OW 274
11282: PPUSH
11283: LD_VAR 0 2
11287: PPUSH
11288: LD_INT 0
11290: PPUSH
11291: CALL 8857 0 3
11295: PPUSH
11296: LD_INT 30
11298: PUSH
11299: LD_INT 3
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PPUSH
11306: CALL_OW 72
11310: ST_TO_ADDR
// if not factories then
11311: LD_VAR 0 6
11315: NOT
11316: IFFALSE 11320
// exit ;
11318: GO 12286
// for i in factories do
11320: LD_ADDR_VAR 0 8
11324: PUSH
11325: LD_VAR 0 6
11329: PUSH
11330: FOR_IN
11331: IFFALSE 11356
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11333: LD_ADDR_VAR 0 17
11337: PUSH
11338: LD_VAR 0 17
11342: PUSH
11343: LD_VAR 0 8
11347: PPUSH
11348: CALL_OW 478
11352: UNION
11353: ST_TO_ADDR
11354: GO 11330
11356: POP
11357: POP
// if not fac_list then
11358: LD_VAR 0 17
11362: NOT
11363: IFFALSE 11367
// exit ;
11365: GO 12286
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11367: LD_ADDR_VAR 0 5
11371: PUSH
11372: LD_INT 4
11374: PUSH
11375: LD_INT 5
11377: PUSH
11378: LD_INT 9
11380: PUSH
11381: LD_INT 10
11383: PUSH
11384: LD_INT 6
11386: PUSH
11387: LD_INT 7
11389: PUSH
11390: LD_INT 11
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 27
11404: PUSH
11405: LD_INT 28
11407: PUSH
11408: LD_INT 26
11410: PUSH
11411: LD_INT 30
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 43
11422: PUSH
11423: LD_INT 44
11425: PUSH
11426: LD_INT 46
11428: PUSH
11429: LD_INT 45
11431: PUSH
11432: LD_INT 47
11434: PUSH
11435: LD_INT 49
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: LIST
11450: PUSH
11451: LD_VAR 0 12
11455: ARRAY
11456: ST_TO_ADDR
// list := list isect fac_list ;
11457: LD_ADDR_VAR 0 5
11461: PUSH
11462: LD_VAR 0 5
11466: PUSH
11467: LD_VAR 0 17
11471: ISECT
11472: ST_TO_ADDR
// if not list then
11473: LD_VAR 0 5
11477: NOT
11478: IFFALSE 11482
// exit ;
11480: GO 12286
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11482: LD_VAR 0 12
11486: PUSH
11487: LD_INT 3
11489: EQUAL
11490: PUSH
11491: LD_INT 49
11493: PUSH
11494: LD_VAR 0 5
11498: IN
11499: AND
11500: PUSH
11501: LD_INT 31
11503: PPUSH
11504: LD_VAR 0 16
11508: PPUSH
11509: CALL_OW 321
11513: PUSH
11514: LD_INT 2
11516: EQUAL
11517: AND
11518: IFFALSE 11578
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11520: LD_INT 22
11522: PUSH
11523: LD_VAR 0 16
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: LD_INT 35
11534: PUSH
11535: LD_INT 49
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: PUSH
11542: LD_INT 91
11544: PUSH
11545: LD_VAR 0 1
11549: PUSH
11550: LD_INT 10
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: LIST
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: LIST
11562: PPUSH
11563: CALL_OW 69
11567: NOT
11568: IFFALSE 11578
// weapon := ru_time_lapser ;
11570: LD_ADDR_VAR 0 18
11574: PUSH
11575: LD_INT 49
11577: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11578: LD_VAR 0 12
11582: PUSH
11583: LD_INT 1
11585: PUSH
11586: LD_INT 2
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: IN
11593: PUSH
11594: LD_INT 11
11596: PUSH
11597: LD_VAR 0 5
11601: IN
11602: PUSH
11603: LD_INT 30
11605: PUSH
11606: LD_VAR 0 5
11610: IN
11611: OR
11612: AND
11613: PUSH
11614: LD_INT 6
11616: PPUSH
11617: LD_VAR 0 16
11621: PPUSH
11622: CALL_OW 321
11626: PUSH
11627: LD_INT 2
11629: EQUAL
11630: AND
11631: IFFALSE 11796
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11633: LD_INT 22
11635: PUSH
11636: LD_VAR 0 16
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PUSH
11645: LD_INT 2
11647: PUSH
11648: LD_INT 35
11650: PUSH
11651: LD_INT 11
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 35
11660: PUSH
11661: LD_INT 30
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 91
11675: PUSH
11676: LD_VAR 0 1
11680: PUSH
11681: LD_INT 18
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: LIST
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: LIST
11693: PPUSH
11694: CALL_OW 69
11698: NOT
11699: PUSH
11700: LD_INT 22
11702: PUSH
11703: LD_VAR 0 16
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PUSH
11712: LD_INT 2
11714: PUSH
11715: LD_INT 30
11717: PUSH
11718: LD_INT 32
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PUSH
11725: LD_INT 30
11727: PUSH
11728: LD_INT 33
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 91
11742: PUSH
11743: LD_VAR 0 1
11747: PUSH
11748: LD_INT 12
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: LIST
11760: PUSH
11761: EMPTY
11762: LIST
11763: PPUSH
11764: CALL_OW 69
11768: PUSH
11769: LD_INT 2
11771: GREATER
11772: AND
11773: IFFALSE 11796
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11775: LD_ADDR_VAR 0 18
11779: PUSH
11780: LD_INT 11
11782: PUSH
11783: LD_INT 30
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: LD_VAR 0 12
11794: ARRAY
11795: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11796: LD_VAR 0 18
11800: NOT
11801: PUSH
11802: LD_INT 40
11804: PPUSH
11805: LD_VAR 0 16
11809: PPUSH
11810: CALL_OW 321
11814: PUSH
11815: LD_INT 2
11817: EQUAL
11818: AND
11819: PUSH
11820: LD_INT 7
11822: PUSH
11823: LD_VAR 0 5
11827: IN
11828: PUSH
11829: LD_INT 28
11831: PUSH
11832: LD_VAR 0 5
11836: IN
11837: OR
11838: PUSH
11839: LD_INT 45
11841: PUSH
11842: LD_VAR 0 5
11846: IN
11847: OR
11848: AND
11849: IFFALSE 12103
// begin hex := GetHexInfo ( x , y ) ;
11851: LD_ADDR_VAR 0 4
11855: PUSH
11856: LD_VAR 0 10
11860: PPUSH
11861: LD_VAR 0 11
11865: PPUSH
11866: CALL_OW 546
11870: ST_TO_ADDR
// if hex [ 1 ] then
11871: LD_VAR 0 4
11875: PUSH
11876: LD_INT 1
11878: ARRAY
11879: IFFALSE 11883
// exit ;
11881: GO 12286
// height := hex [ 2 ] ;
11883: LD_ADDR_VAR 0 15
11887: PUSH
11888: LD_VAR 0 4
11892: PUSH
11893: LD_INT 2
11895: ARRAY
11896: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11897: LD_ADDR_VAR 0 14
11901: PUSH
11902: LD_INT 0
11904: PUSH
11905: LD_INT 2
11907: PUSH
11908: LD_INT 3
11910: PUSH
11911: LD_INT 5
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: ST_TO_ADDR
// for i in tmp do
11920: LD_ADDR_VAR 0 8
11924: PUSH
11925: LD_VAR 0 14
11929: PUSH
11930: FOR_IN
11931: IFFALSE 12101
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11933: LD_ADDR_VAR 0 9
11937: PUSH
11938: LD_VAR 0 10
11942: PPUSH
11943: LD_VAR 0 8
11947: PPUSH
11948: LD_INT 5
11950: PPUSH
11951: CALL_OW 272
11955: PUSH
11956: LD_VAR 0 11
11960: PPUSH
11961: LD_VAR 0 8
11965: PPUSH
11966: LD_INT 5
11968: PPUSH
11969: CALL_OW 273
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11978: LD_VAR 0 9
11982: PUSH
11983: LD_INT 1
11985: ARRAY
11986: PPUSH
11987: LD_VAR 0 9
11991: PUSH
11992: LD_INT 2
11994: ARRAY
11995: PPUSH
11996: CALL_OW 488
12000: IFFALSE 12099
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12002: LD_ADDR_VAR 0 4
12006: PUSH
12007: LD_VAR 0 9
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: LD_VAR 0 9
12020: PUSH
12021: LD_INT 2
12023: ARRAY
12024: PPUSH
12025: CALL_OW 546
12029: ST_TO_ADDR
// if hex [ 1 ] then
12030: LD_VAR 0 4
12034: PUSH
12035: LD_INT 1
12037: ARRAY
12038: IFFALSE 12042
// continue ;
12040: GO 11930
// h := hex [ 2 ] ;
12042: LD_ADDR_VAR 0 13
12046: PUSH
12047: LD_VAR 0 4
12051: PUSH
12052: LD_INT 2
12054: ARRAY
12055: ST_TO_ADDR
// if h + 7 < height then
12056: LD_VAR 0 13
12060: PUSH
12061: LD_INT 7
12063: PLUS
12064: PUSH
12065: LD_VAR 0 15
12069: LESS
12070: IFFALSE 12099
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12072: LD_ADDR_VAR 0 18
12076: PUSH
12077: LD_INT 7
12079: PUSH
12080: LD_INT 28
12082: PUSH
12083: LD_INT 45
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: PUSH
12091: LD_VAR 0 12
12095: ARRAY
12096: ST_TO_ADDR
// break ;
12097: GO 12101
// end ; end ; end ;
12099: GO 11930
12101: POP
12102: POP
// end ; if not weapon then
12103: LD_VAR 0 18
12107: NOT
12108: IFFALSE 12168
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12110: LD_ADDR_VAR 0 5
12114: PUSH
12115: LD_VAR 0 5
12119: PUSH
12120: LD_INT 11
12122: PUSH
12123: LD_INT 30
12125: PUSH
12126: LD_INT 49
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: DIFF
12134: ST_TO_ADDR
// if not list then
12135: LD_VAR 0 5
12139: NOT
12140: IFFALSE 12144
// exit ;
12142: GO 12286
// weapon := list [ rand ( 1 , list ) ] ;
12144: LD_ADDR_VAR 0 18
12148: PUSH
12149: LD_VAR 0 5
12153: PUSH
12154: LD_INT 1
12156: PPUSH
12157: LD_VAR 0 5
12161: PPUSH
12162: CALL_OW 12
12166: ARRAY
12167: ST_TO_ADDR
// end ; if weapon then
12168: LD_VAR 0 18
12172: IFFALSE 12286
// begin tmp := CostOfWeapon ( weapon ) ;
12174: LD_ADDR_VAR 0 14
12178: PUSH
12179: LD_VAR 0 18
12183: PPUSH
12184: CALL_OW 451
12188: ST_TO_ADDR
// j := GetBase ( tower ) ;
12189: LD_ADDR_VAR 0 9
12193: PUSH
12194: LD_VAR 0 1
12198: PPUSH
12199: CALL_OW 274
12203: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12204: LD_VAR 0 9
12208: PPUSH
12209: LD_INT 1
12211: PPUSH
12212: CALL_OW 275
12216: PUSH
12217: LD_VAR 0 14
12221: PUSH
12222: LD_INT 1
12224: ARRAY
12225: GREATEREQUAL
12226: PUSH
12227: LD_VAR 0 9
12231: PPUSH
12232: LD_INT 2
12234: PPUSH
12235: CALL_OW 275
12239: PUSH
12240: LD_VAR 0 14
12244: PUSH
12245: LD_INT 2
12247: ARRAY
12248: GREATEREQUAL
12249: AND
12250: PUSH
12251: LD_VAR 0 9
12255: PPUSH
12256: LD_INT 3
12258: PPUSH
12259: CALL_OW 275
12263: PUSH
12264: LD_VAR 0 14
12268: PUSH
12269: LD_INT 3
12271: ARRAY
12272: GREATEREQUAL
12273: AND
12274: IFFALSE 12286
// result := weapon ;
12276: LD_ADDR_VAR 0 3
12280: PUSH
12281: LD_VAR 0 18
12285: ST_TO_ADDR
// end ; end ;
12286: LD_VAR 0 3
12290: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12291: LD_INT 0
12293: PPUSH
12294: PPUSH
// result := true ;
12295: LD_ADDR_VAR 0 3
12299: PUSH
12300: LD_INT 1
12302: ST_TO_ADDR
// if array1 = array2 then
12303: LD_VAR 0 1
12307: PUSH
12308: LD_VAR 0 2
12312: EQUAL
12313: IFFALSE 12373
// begin for i = 1 to array1 do
12315: LD_ADDR_VAR 0 4
12319: PUSH
12320: DOUBLE
12321: LD_INT 1
12323: DEC
12324: ST_TO_ADDR
12325: LD_VAR 0 1
12329: PUSH
12330: FOR_TO
12331: IFFALSE 12369
// if array1 [ i ] <> array2 [ i ] then
12333: LD_VAR 0 1
12337: PUSH
12338: LD_VAR 0 4
12342: ARRAY
12343: PUSH
12344: LD_VAR 0 2
12348: PUSH
12349: LD_VAR 0 4
12353: ARRAY
12354: NONEQUAL
12355: IFFALSE 12367
// begin result := false ;
12357: LD_ADDR_VAR 0 3
12361: PUSH
12362: LD_INT 0
12364: ST_TO_ADDR
// break ;
12365: GO 12369
// end ;
12367: GO 12330
12369: POP
12370: POP
// end else
12371: GO 12381
// result := false ;
12373: LD_ADDR_VAR 0 3
12377: PUSH
12378: LD_INT 0
12380: ST_TO_ADDR
// end ;
12381: LD_VAR 0 3
12385: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12386: LD_INT 0
12388: PPUSH
12389: PPUSH
// if not array1 or not array2 then
12390: LD_VAR 0 1
12394: NOT
12395: PUSH
12396: LD_VAR 0 2
12400: NOT
12401: OR
12402: IFFALSE 12406
// exit ;
12404: GO 12470
// result := true ;
12406: LD_ADDR_VAR 0 3
12410: PUSH
12411: LD_INT 1
12413: ST_TO_ADDR
// for i = 1 to array1 do
12414: LD_ADDR_VAR 0 4
12418: PUSH
12419: DOUBLE
12420: LD_INT 1
12422: DEC
12423: ST_TO_ADDR
12424: LD_VAR 0 1
12428: PUSH
12429: FOR_TO
12430: IFFALSE 12468
// if array1 [ i ] <> array2 [ i ] then
12432: LD_VAR 0 1
12436: PUSH
12437: LD_VAR 0 4
12441: ARRAY
12442: PUSH
12443: LD_VAR 0 2
12447: PUSH
12448: LD_VAR 0 4
12452: ARRAY
12453: NONEQUAL
12454: IFFALSE 12466
// begin result := false ;
12456: LD_ADDR_VAR 0 3
12460: PUSH
12461: LD_INT 0
12463: ST_TO_ADDR
// break ;
12464: GO 12468
// end ;
12466: GO 12429
12468: POP
12469: POP
// end ;
12470: LD_VAR 0 3
12474: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12475: LD_INT 0
12477: PPUSH
12478: PPUSH
12479: PPUSH
// pom := GetBase ( fac ) ;
12480: LD_ADDR_VAR 0 5
12484: PUSH
12485: LD_VAR 0 1
12489: PPUSH
12490: CALL_OW 274
12494: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12495: LD_ADDR_VAR 0 4
12499: PUSH
12500: LD_VAR 0 2
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PPUSH
12509: LD_VAR 0 2
12513: PUSH
12514: LD_INT 2
12516: ARRAY
12517: PPUSH
12518: LD_VAR 0 2
12522: PUSH
12523: LD_INT 3
12525: ARRAY
12526: PPUSH
12527: LD_VAR 0 2
12531: PUSH
12532: LD_INT 4
12534: ARRAY
12535: PPUSH
12536: CALL_OW 449
12540: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12541: LD_ADDR_VAR 0 3
12545: PUSH
12546: LD_VAR 0 5
12550: PPUSH
12551: LD_INT 1
12553: PPUSH
12554: CALL_OW 275
12558: PUSH
12559: LD_VAR 0 4
12563: PUSH
12564: LD_INT 1
12566: ARRAY
12567: GREATEREQUAL
12568: PUSH
12569: LD_VAR 0 5
12573: PPUSH
12574: LD_INT 2
12576: PPUSH
12577: CALL_OW 275
12581: PUSH
12582: LD_VAR 0 4
12586: PUSH
12587: LD_INT 2
12589: ARRAY
12590: GREATEREQUAL
12591: AND
12592: PUSH
12593: LD_VAR 0 5
12597: PPUSH
12598: LD_INT 3
12600: PPUSH
12601: CALL_OW 275
12605: PUSH
12606: LD_VAR 0 4
12610: PUSH
12611: LD_INT 3
12613: ARRAY
12614: GREATEREQUAL
12615: AND
12616: ST_TO_ADDR
// end ;
12617: LD_VAR 0 3
12621: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12622: LD_INT 0
12624: PPUSH
12625: PPUSH
12626: PPUSH
12627: PPUSH
// pom := GetBase ( building ) ;
12628: LD_ADDR_VAR 0 3
12632: PUSH
12633: LD_VAR 0 1
12637: PPUSH
12638: CALL_OW 274
12642: ST_TO_ADDR
// if not pom then
12643: LD_VAR 0 3
12647: NOT
12648: IFFALSE 12652
// exit ;
12650: GO 12822
// btype := GetBType ( building ) ;
12652: LD_ADDR_VAR 0 5
12656: PUSH
12657: LD_VAR 0 1
12661: PPUSH
12662: CALL_OW 266
12666: ST_TO_ADDR
// if btype = b_armoury then
12667: LD_VAR 0 5
12671: PUSH
12672: LD_INT 4
12674: EQUAL
12675: IFFALSE 12685
// btype := b_barracks ;
12677: LD_ADDR_VAR 0 5
12681: PUSH
12682: LD_INT 5
12684: ST_TO_ADDR
// if btype = b_depot then
12685: LD_VAR 0 5
12689: PUSH
12690: LD_INT 0
12692: EQUAL
12693: IFFALSE 12703
// btype := b_warehouse ;
12695: LD_ADDR_VAR 0 5
12699: PUSH
12700: LD_INT 1
12702: ST_TO_ADDR
// if btype = b_workshop then
12703: LD_VAR 0 5
12707: PUSH
12708: LD_INT 2
12710: EQUAL
12711: IFFALSE 12721
// btype := b_factory ;
12713: LD_ADDR_VAR 0 5
12717: PUSH
12718: LD_INT 3
12720: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12721: LD_ADDR_VAR 0 4
12725: PUSH
12726: LD_VAR 0 5
12730: PPUSH
12731: LD_VAR 0 1
12735: PPUSH
12736: CALL_OW 248
12740: PPUSH
12741: CALL_OW 450
12745: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12746: LD_ADDR_VAR 0 2
12750: PUSH
12751: LD_VAR 0 3
12755: PPUSH
12756: LD_INT 1
12758: PPUSH
12759: CALL_OW 275
12763: PUSH
12764: LD_VAR 0 4
12768: PUSH
12769: LD_INT 1
12771: ARRAY
12772: GREATEREQUAL
12773: PUSH
12774: LD_VAR 0 3
12778: PPUSH
12779: LD_INT 2
12781: PPUSH
12782: CALL_OW 275
12786: PUSH
12787: LD_VAR 0 4
12791: PUSH
12792: LD_INT 2
12794: ARRAY
12795: GREATEREQUAL
12796: AND
12797: PUSH
12798: LD_VAR 0 3
12802: PPUSH
12803: LD_INT 3
12805: PPUSH
12806: CALL_OW 275
12810: PUSH
12811: LD_VAR 0 4
12815: PUSH
12816: LD_INT 3
12818: ARRAY
12819: GREATEREQUAL
12820: AND
12821: ST_TO_ADDR
// end ;
12822: LD_VAR 0 2
12826: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12827: LD_INT 0
12829: PPUSH
12830: PPUSH
12831: PPUSH
// pom := GetBase ( building ) ;
12832: LD_ADDR_VAR 0 4
12836: PUSH
12837: LD_VAR 0 1
12841: PPUSH
12842: CALL_OW 274
12846: ST_TO_ADDR
// if not pom then
12847: LD_VAR 0 4
12851: NOT
12852: IFFALSE 12856
// exit ;
12854: GO 12957
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12856: LD_ADDR_VAR 0 5
12860: PUSH
12861: LD_VAR 0 2
12865: PPUSH
12866: LD_VAR 0 1
12870: PPUSH
12871: CALL_OW 248
12875: PPUSH
12876: CALL_OW 450
12880: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12881: LD_ADDR_VAR 0 3
12885: PUSH
12886: LD_VAR 0 4
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: CALL_OW 275
12898: PUSH
12899: LD_VAR 0 5
12903: PUSH
12904: LD_INT 1
12906: ARRAY
12907: GREATEREQUAL
12908: PUSH
12909: LD_VAR 0 4
12913: PPUSH
12914: LD_INT 2
12916: PPUSH
12917: CALL_OW 275
12921: PUSH
12922: LD_VAR 0 5
12926: PUSH
12927: LD_INT 2
12929: ARRAY
12930: GREATEREQUAL
12931: AND
12932: PUSH
12933: LD_VAR 0 4
12937: PPUSH
12938: LD_INT 3
12940: PPUSH
12941: CALL_OW 275
12945: PUSH
12946: LD_VAR 0 5
12950: PUSH
12951: LD_INT 3
12953: ARRAY
12954: GREATEREQUAL
12955: AND
12956: ST_TO_ADDR
// end ;
12957: LD_VAR 0 3
12961: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12962: LD_INT 0
12964: PPUSH
12965: PPUSH
12966: PPUSH
12967: PPUSH
12968: PPUSH
12969: PPUSH
12970: PPUSH
12971: PPUSH
12972: PPUSH
12973: PPUSH
12974: PPUSH
// result := false ;
12975: LD_ADDR_VAR 0 8
12979: PUSH
12980: LD_INT 0
12982: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12983: LD_VAR 0 5
12987: NOT
12988: PUSH
12989: LD_VAR 0 1
12993: NOT
12994: OR
12995: PUSH
12996: LD_VAR 0 2
13000: NOT
13001: OR
13002: PUSH
13003: LD_VAR 0 3
13007: NOT
13008: OR
13009: IFFALSE 13013
// exit ;
13011: GO 13827
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13013: LD_ADDR_VAR 0 14
13017: PUSH
13018: LD_VAR 0 1
13022: PPUSH
13023: LD_VAR 0 2
13027: PPUSH
13028: LD_VAR 0 3
13032: PPUSH
13033: LD_VAR 0 4
13037: PPUSH
13038: LD_VAR 0 5
13042: PUSH
13043: LD_INT 1
13045: ARRAY
13046: PPUSH
13047: CALL_OW 248
13051: PPUSH
13052: LD_INT 0
13054: PPUSH
13055: CALL 15080 0 6
13059: ST_TO_ADDR
// if not hexes then
13060: LD_VAR 0 14
13064: NOT
13065: IFFALSE 13069
// exit ;
13067: GO 13827
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13069: LD_ADDR_VAR 0 17
13073: PUSH
13074: LD_VAR 0 5
13078: PPUSH
13079: LD_INT 22
13081: PUSH
13082: LD_VAR 0 13
13086: PPUSH
13087: CALL_OW 255
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PUSH
13096: LD_INT 2
13098: PUSH
13099: LD_INT 30
13101: PUSH
13102: LD_INT 0
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 30
13111: PUSH
13112: LD_INT 1
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PPUSH
13128: CALL_OW 72
13132: ST_TO_ADDR
// for i = 1 to hexes do
13133: LD_ADDR_VAR 0 9
13137: PUSH
13138: DOUBLE
13139: LD_INT 1
13141: DEC
13142: ST_TO_ADDR
13143: LD_VAR 0 14
13147: PUSH
13148: FOR_TO
13149: IFFALSE 13825
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13151: LD_ADDR_VAR 0 13
13155: PUSH
13156: LD_VAR 0 14
13160: PUSH
13161: LD_VAR 0 9
13165: ARRAY
13166: PUSH
13167: LD_INT 1
13169: ARRAY
13170: PPUSH
13171: LD_VAR 0 14
13175: PUSH
13176: LD_VAR 0 9
13180: ARRAY
13181: PUSH
13182: LD_INT 2
13184: ARRAY
13185: PPUSH
13186: CALL_OW 428
13190: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13191: LD_VAR 0 14
13195: PUSH
13196: LD_VAR 0 9
13200: ARRAY
13201: PUSH
13202: LD_INT 1
13204: ARRAY
13205: PPUSH
13206: LD_VAR 0 14
13210: PUSH
13211: LD_VAR 0 9
13215: ARRAY
13216: PUSH
13217: LD_INT 2
13219: ARRAY
13220: PPUSH
13221: CALL_OW 351
13225: PUSH
13226: LD_VAR 0 14
13230: PUSH
13231: LD_VAR 0 9
13235: ARRAY
13236: PUSH
13237: LD_INT 1
13239: ARRAY
13240: PPUSH
13241: LD_VAR 0 14
13245: PUSH
13246: LD_VAR 0 9
13250: ARRAY
13251: PUSH
13252: LD_INT 2
13254: ARRAY
13255: PPUSH
13256: CALL_OW 488
13260: NOT
13261: OR
13262: PUSH
13263: LD_VAR 0 13
13267: PPUSH
13268: CALL_OW 247
13272: PUSH
13273: LD_INT 3
13275: EQUAL
13276: OR
13277: IFFALSE 13283
// exit ;
13279: POP
13280: POP
13281: GO 13827
// if not tmp then
13283: LD_VAR 0 13
13287: NOT
13288: IFFALSE 13292
// continue ;
13290: GO 13148
// result := true ;
13292: LD_ADDR_VAR 0 8
13296: PUSH
13297: LD_INT 1
13299: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13300: LD_VAR 0 6
13304: PUSH
13305: LD_VAR 0 13
13309: PPUSH
13310: CALL_OW 247
13314: PUSH
13315: LD_INT 2
13317: EQUAL
13318: AND
13319: PUSH
13320: LD_VAR 0 13
13324: PPUSH
13325: CALL_OW 263
13329: PUSH
13330: LD_INT 1
13332: EQUAL
13333: AND
13334: IFFALSE 13498
// begin if IsDrivenBy ( tmp ) then
13336: LD_VAR 0 13
13340: PPUSH
13341: CALL_OW 311
13345: IFFALSE 13349
// continue ;
13347: GO 13148
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13349: LD_VAR 0 6
13353: PPUSH
13354: LD_INT 3
13356: PUSH
13357: LD_INT 60
13359: PUSH
13360: EMPTY
13361: LIST
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 3
13369: PUSH
13370: LD_INT 55
13372: PUSH
13373: EMPTY
13374: LIST
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PPUSH
13384: CALL_OW 72
13388: IFFALSE 13496
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13390: LD_ADDR_VAR 0 18
13394: PUSH
13395: LD_VAR 0 6
13399: PPUSH
13400: LD_INT 3
13402: PUSH
13403: LD_INT 60
13405: PUSH
13406: EMPTY
13407: LIST
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 3
13415: PUSH
13416: LD_INT 55
13418: PUSH
13419: EMPTY
13420: LIST
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PPUSH
13430: CALL_OW 72
13434: PUSH
13435: LD_INT 1
13437: ARRAY
13438: ST_TO_ADDR
// if IsInUnit ( driver ) then
13439: LD_VAR 0 18
13443: PPUSH
13444: CALL_OW 310
13448: IFFALSE 13459
// ComExit ( driver ) ;
13450: LD_VAR 0 18
13454: PPUSH
13455: CALL 38859 0 1
// AddComEnterUnit ( driver , tmp ) ;
13459: LD_VAR 0 18
13463: PPUSH
13464: LD_VAR 0 13
13468: PPUSH
13469: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13473: LD_VAR 0 18
13477: PPUSH
13478: LD_VAR 0 7
13482: PPUSH
13483: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13487: LD_VAR 0 18
13491: PPUSH
13492: CALL_OW 181
// end ; continue ;
13496: GO 13148
// end ; if not cleaners or not tmp in cleaners then
13498: LD_VAR 0 6
13502: NOT
13503: PUSH
13504: LD_VAR 0 13
13508: PUSH
13509: LD_VAR 0 6
13513: IN
13514: NOT
13515: OR
13516: IFFALSE 13823
// begin if dep then
13518: LD_VAR 0 17
13522: IFFALSE 13658
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13524: LD_ADDR_VAR 0 16
13528: PUSH
13529: LD_VAR 0 17
13533: PUSH
13534: LD_INT 1
13536: ARRAY
13537: PPUSH
13538: CALL_OW 250
13542: PPUSH
13543: LD_VAR 0 17
13547: PUSH
13548: LD_INT 1
13550: ARRAY
13551: PPUSH
13552: CALL_OW 254
13556: PPUSH
13557: LD_INT 5
13559: PPUSH
13560: CALL_OW 272
13564: PUSH
13565: LD_VAR 0 17
13569: PUSH
13570: LD_INT 1
13572: ARRAY
13573: PPUSH
13574: CALL_OW 251
13578: PPUSH
13579: LD_VAR 0 17
13583: PUSH
13584: LD_INT 1
13586: ARRAY
13587: PPUSH
13588: CALL_OW 254
13592: PPUSH
13593: LD_INT 5
13595: PPUSH
13596: CALL_OW 273
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13605: LD_VAR 0 16
13609: PUSH
13610: LD_INT 1
13612: ARRAY
13613: PPUSH
13614: LD_VAR 0 16
13618: PUSH
13619: LD_INT 2
13621: ARRAY
13622: PPUSH
13623: CALL_OW 488
13627: IFFALSE 13658
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13629: LD_VAR 0 13
13633: PPUSH
13634: LD_VAR 0 16
13638: PUSH
13639: LD_INT 1
13641: ARRAY
13642: PPUSH
13643: LD_VAR 0 16
13647: PUSH
13648: LD_INT 2
13650: ARRAY
13651: PPUSH
13652: CALL_OW 111
// continue ;
13656: GO 13148
// end ; end ; r := GetDir ( tmp ) ;
13658: LD_ADDR_VAR 0 15
13662: PUSH
13663: LD_VAR 0 13
13667: PPUSH
13668: CALL_OW 254
13672: ST_TO_ADDR
// if r = 5 then
13673: LD_VAR 0 15
13677: PUSH
13678: LD_INT 5
13680: EQUAL
13681: IFFALSE 13691
// r := 0 ;
13683: LD_ADDR_VAR 0 15
13687: PUSH
13688: LD_INT 0
13690: ST_TO_ADDR
// for j = r to 5 do
13691: LD_ADDR_VAR 0 10
13695: PUSH
13696: DOUBLE
13697: LD_VAR 0 15
13701: DEC
13702: ST_TO_ADDR
13703: LD_INT 5
13705: PUSH
13706: FOR_TO
13707: IFFALSE 13821
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13709: LD_ADDR_VAR 0 11
13713: PUSH
13714: LD_VAR 0 13
13718: PPUSH
13719: CALL_OW 250
13723: PPUSH
13724: LD_VAR 0 10
13728: PPUSH
13729: LD_INT 2
13731: PPUSH
13732: CALL_OW 272
13736: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13737: LD_ADDR_VAR 0 12
13741: PUSH
13742: LD_VAR 0 13
13746: PPUSH
13747: CALL_OW 251
13751: PPUSH
13752: LD_VAR 0 10
13756: PPUSH
13757: LD_INT 2
13759: PPUSH
13760: CALL_OW 273
13764: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13765: LD_VAR 0 11
13769: PPUSH
13770: LD_VAR 0 12
13774: PPUSH
13775: CALL_OW 488
13779: PUSH
13780: LD_VAR 0 11
13784: PPUSH
13785: LD_VAR 0 12
13789: PPUSH
13790: CALL_OW 428
13794: NOT
13795: AND
13796: IFFALSE 13819
// begin ComMoveXY ( tmp , _x , _y ) ;
13798: LD_VAR 0 13
13802: PPUSH
13803: LD_VAR 0 11
13807: PPUSH
13808: LD_VAR 0 12
13812: PPUSH
13813: CALL_OW 111
// break ;
13817: GO 13821
// end ; end ;
13819: GO 13706
13821: POP
13822: POP
// end ; end ;
13823: GO 13148
13825: POP
13826: POP
// end ;
13827: LD_VAR 0 8
13831: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13832: LD_INT 0
13834: PPUSH
// result := true ;
13835: LD_ADDR_VAR 0 3
13839: PUSH
13840: LD_INT 1
13842: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13843: LD_VAR 0 2
13847: PUSH
13848: LD_INT 24
13850: DOUBLE
13851: EQUAL
13852: IFTRUE 13862
13854: LD_INT 33
13856: DOUBLE
13857: EQUAL
13858: IFTRUE 13862
13860: GO 13887
13862: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13863: LD_ADDR_VAR 0 3
13867: PUSH
13868: LD_INT 32
13870: PPUSH
13871: LD_VAR 0 1
13875: PPUSH
13876: CALL_OW 321
13880: PUSH
13881: LD_INT 2
13883: EQUAL
13884: ST_TO_ADDR
13885: GO 14203
13887: LD_INT 20
13889: DOUBLE
13890: EQUAL
13891: IFTRUE 13895
13893: GO 13920
13895: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13896: LD_ADDR_VAR 0 3
13900: PUSH
13901: LD_INT 6
13903: PPUSH
13904: LD_VAR 0 1
13908: PPUSH
13909: CALL_OW 321
13913: PUSH
13914: LD_INT 2
13916: EQUAL
13917: ST_TO_ADDR
13918: GO 14203
13920: LD_INT 22
13922: DOUBLE
13923: EQUAL
13924: IFTRUE 13934
13926: LD_INT 36
13928: DOUBLE
13929: EQUAL
13930: IFTRUE 13934
13932: GO 13959
13934: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13935: LD_ADDR_VAR 0 3
13939: PUSH
13940: LD_INT 15
13942: PPUSH
13943: LD_VAR 0 1
13947: PPUSH
13948: CALL_OW 321
13952: PUSH
13953: LD_INT 2
13955: EQUAL
13956: ST_TO_ADDR
13957: GO 14203
13959: LD_INT 30
13961: DOUBLE
13962: EQUAL
13963: IFTRUE 13967
13965: GO 13992
13967: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13968: LD_ADDR_VAR 0 3
13972: PUSH
13973: LD_INT 20
13975: PPUSH
13976: LD_VAR 0 1
13980: PPUSH
13981: CALL_OW 321
13985: PUSH
13986: LD_INT 2
13988: EQUAL
13989: ST_TO_ADDR
13990: GO 14203
13992: LD_INT 28
13994: DOUBLE
13995: EQUAL
13996: IFTRUE 14006
13998: LD_INT 21
14000: DOUBLE
14001: EQUAL
14002: IFTRUE 14006
14004: GO 14031
14006: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14007: LD_ADDR_VAR 0 3
14011: PUSH
14012: LD_INT 21
14014: PPUSH
14015: LD_VAR 0 1
14019: PPUSH
14020: CALL_OW 321
14024: PUSH
14025: LD_INT 2
14027: EQUAL
14028: ST_TO_ADDR
14029: GO 14203
14031: LD_INT 16
14033: DOUBLE
14034: EQUAL
14035: IFTRUE 14039
14037: GO 14064
14039: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14040: LD_ADDR_VAR 0 3
14044: PUSH
14045: LD_INT 84
14047: PPUSH
14048: LD_VAR 0 1
14052: PPUSH
14053: CALL_OW 321
14057: PUSH
14058: LD_INT 2
14060: EQUAL
14061: ST_TO_ADDR
14062: GO 14203
14064: LD_INT 19
14066: DOUBLE
14067: EQUAL
14068: IFTRUE 14078
14070: LD_INT 23
14072: DOUBLE
14073: EQUAL
14074: IFTRUE 14078
14076: GO 14103
14078: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14079: LD_ADDR_VAR 0 3
14083: PUSH
14084: LD_INT 83
14086: PPUSH
14087: LD_VAR 0 1
14091: PPUSH
14092: CALL_OW 321
14096: PUSH
14097: LD_INT 2
14099: EQUAL
14100: ST_TO_ADDR
14101: GO 14203
14103: LD_INT 17
14105: DOUBLE
14106: EQUAL
14107: IFTRUE 14111
14109: GO 14136
14111: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14112: LD_ADDR_VAR 0 3
14116: PUSH
14117: LD_INT 39
14119: PPUSH
14120: LD_VAR 0 1
14124: PPUSH
14125: CALL_OW 321
14129: PUSH
14130: LD_INT 2
14132: EQUAL
14133: ST_TO_ADDR
14134: GO 14203
14136: LD_INT 18
14138: DOUBLE
14139: EQUAL
14140: IFTRUE 14144
14142: GO 14169
14144: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14145: LD_ADDR_VAR 0 3
14149: PUSH
14150: LD_INT 40
14152: PPUSH
14153: LD_VAR 0 1
14157: PPUSH
14158: CALL_OW 321
14162: PUSH
14163: LD_INT 2
14165: EQUAL
14166: ST_TO_ADDR
14167: GO 14203
14169: LD_INT 27
14171: DOUBLE
14172: EQUAL
14173: IFTRUE 14177
14175: GO 14202
14177: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14178: LD_ADDR_VAR 0 3
14182: PUSH
14183: LD_INT 35
14185: PPUSH
14186: LD_VAR 0 1
14190: PPUSH
14191: CALL_OW 321
14195: PUSH
14196: LD_INT 2
14198: EQUAL
14199: ST_TO_ADDR
14200: GO 14203
14202: POP
// end ;
14203: LD_VAR 0 3
14207: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14208: LD_INT 0
14210: PPUSH
14211: PPUSH
14212: PPUSH
14213: PPUSH
14214: PPUSH
14215: PPUSH
14216: PPUSH
14217: PPUSH
14218: PPUSH
14219: PPUSH
14220: PPUSH
// result := false ;
14221: LD_ADDR_VAR 0 6
14225: PUSH
14226: LD_INT 0
14228: ST_TO_ADDR
// if btype = b_depot then
14229: LD_VAR 0 2
14233: PUSH
14234: LD_INT 0
14236: EQUAL
14237: IFFALSE 14249
// begin result := true ;
14239: LD_ADDR_VAR 0 6
14243: PUSH
14244: LD_INT 1
14246: ST_TO_ADDR
// exit ;
14247: GO 15075
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14249: LD_VAR 0 1
14253: NOT
14254: PUSH
14255: LD_VAR 0 1
14259: PPUSH
14260: CALL_OW 266
14264: PUSH
14265: LD_INT 0
14267: PUSH
14268: LD_INT 1
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: IN
14275: NOT
14276: OR
14277: PUSH
14278: LD_VAR 0 2
14282: NOT
14283: OR
14284: PUSH
14285: LD_VAR 0 5
14289: PUSH
14290: LD_INT 0
14292: PUSH
14293: LD_INT 1
14295: PUSH
14296: LD_INT 2
14298: PUSH
14299: LD_INT 3
14301: PUSH
14302: LD_INT 4
14304: PUSH
14305: LD_INT 5
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: IN
14316: NOT
14317: OR
14318: PUSH
14319: LD_VAR 0 3
14323: PPUSH
14324: LD_VAR 0 4
14328: PPUSH
14329: CALL_OW 488
14333: NOT
14334: OR
14335: IFFALSE 14339
// exit ;
14337: GO 15075
// side := GetSide ( depot ) ;
14339: LD_ADDR_VAR 0 9
14343: PUSH
14344: LD_VAR 0 1
14348: PPUSH
14349: CALL_OW 255
14353: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14354: LD_VAR 0 9
14358: PPUSH
14359: LD_VAR 0 2
14363: PPUSH
14364: CALL 13832 0 2
14368: NOT
14369: IFFALSE 14373
// exit ;
14371: GO 15075
// pom := GetBase ( depot ) ;
14373: LD_ADDR_VAR 0 10
14377: PUSH
14378: LD_VAR 0 1
14382: PPUSH
14383: CALL_OW 274
14387: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14388: LD_ADDR_VAR 0 11
14392: PUSH
14393: LD_VAR 0 2
14397: PPUSH
14398: LD_VAR 0 1
14402: PPUSH
14403: CALL_OW 248
14407: PPUSH
14408: CALL_OW 450
14412: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14413: LD_VAR 0 10
14417: PPUSH
14418: LD_INT 1
14420: PPUSH
14421: CALL_OW 275
14425: PUSH
14426: LD_VAR 0 11
14430: PUSH
14431: LD_INT 1
14433: ARRAY
14434: GREATEREQUAL
14435: PUSH
14436: LD_VAR 0 10
14440: PPUSH
14441: LD_INT 2
14443: PPUSH
14444: CALL_OW 275
14448: PUSH
14449: LD_VAR 0 11
14453: PUSH
14454: LD_INT 2
14456: ARRAY
14457: GREATEREQUAL
14458: AND
14459: PUSH
14460: LD_VAR 0 10
14464: PPUSH
14465: LD_INT 3
14467: PPUSH
14468: CALL_OW 275
14472: PUSH
14473: LD_VAR 0 11
14477: PUSH
14478: LD_INT 3
14480: ARRAY
14481: GREATEREQUAL
14482: AND
14483: NOT
14484: IFFALSE 14488
// exit ;
14486: GO 15075
// if GetBType ( depot ) = b_depot then
14488: LD_VAR 0 1
14492: PPUSH
14493: CALL_OW 266
14497: PUSH
14498: LD_INT 0
14500: EQUAL
14501: IFFALSE 14513
// dist := 28 else
14503: LD_ADDR_VAR 0 14
14507: PUSH
14508: LD_INT 28
14510: ST_TO_ADDR
14511: GO 14521
// dist := 36 ;
14513: LD_ADDR_VAR 0 14
14517: PUSH
14518: LD_INT 36
14520: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14521: LD_VAR 0 1
14525: PPUSH
14526: LD_VAR 0 3
14530: PPUSH
14531: LD_VAR 0 4
14535: PPUSH
14536: CALL_OW 297
14540: PUSH
14541: LD_VAR 0 14
14545: GREATER
14546: IFFALSE 14550
// exit ;
14548: GO 15075
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14550: LD_ADDR_VAR 0 12
14554: PUSH
14555: LD_VAR 0 2
14559: PPUSH
14560: LD_VAR 0 3
14564: PPUSH
14565: LD_VAR 0 4
14569: PPUSH
14570: LD_VAR 0 5
14574: PPUSH
14575: LD_VAR 0 1
14579: PPUSH
14580: CALL_OW 248
14584: PPUSH
14585: LD_INT 0
14587: PPUSH
14588: CALL 15080 0 6
14592: ST_TO_ADDR
// if not hexes then
14593: LD_VAR 0 12
14597: NOT
14598: IFFALSE 14602
// exit ;
14600: GO 15075
// hex := GetHexInfo ( x , y ) ;
14602: LD_ADDR_VAR 0 15
14606: PUSH
14607: LD_VAR 0 3
14611: PPUSH
14612: LD_VAR 0 4
14616: PPUSH
14617: CALL_OW 546
14621: ST_TO_ADDR
// if hex [ 1 ] then
14622: LD_VAR 0 15
14626: PUSH
14627: LD_INT 1
14629: ARRAY
14630: IFFALSE 14634
// exit ;
14632: GO 15075
// height := hex [ 2 ] ;
14634: LD_ADDR_VAR 0 13
14638: PUSH
14639: LD_VAR 0 15
14643: PUSH
14644: LD_INT 2
14646: ARRAY
14647: ST_TO_ADDR
// for i = 1 to hexes do
14648: LD_ADDR_VAR 0 7
14652: PUSH
14653: DOUBLE
14654: LD_INT 1
14656: DEC
14657: ST_TO_ADDR
14658: LD_VAR 0 12
14662: PUSH
14663: FOR_TO
14664: IFFALSE 14994
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14666: LD_VAR 0 12
14670: PUSH
14671: LD_VAR 0 7
14675: ARRAY
14676: PUSH
14677: LD_INT 1
14679: ARRAY
14680: PPUSH
14681: LD_VAR 0 12
14685: PUSH
14686: LD_VAR 0 7
14690: ARRAY
14691: PUSH
14692: LD_INT 2
14694: ARRAY
14695: PPUSH
14696: CALL_OW 488
14700: NOT
14701: PUSH
14702: LD_VAR 0 12
14706: PUSH
14707: LD_VAR 0 7
14711: ARRAY
14712: PUSH
14713: LD_INT 1
14715: ARRAY
14716: PPUSH
14717: LD_VAR 0 12
14721: PUSH
14722: LD_VAR 0 7
14726: ARRAY
14727: PUSH
14728: LD_INT 2
14730: ARRAY
14731: PPUSH
14732: CALL_OW 428
14736: PUSH
14737: LD_INT 0
14739: GREATER
14740: OR
14741: PUSH
14742: LD_VAR 0 12
14746: PUSH
14747: LD_VAR 0 7
14751: ARRAY
14752: PUSH
14753: LD_INT 1
14755: ARRAY
14756: PPUSH
14757: LD_VAR 0 12
14761: PUSH
14762: LD_VAR 0 7
14766: ARRAY
14767: PUSH
14768: LD_INT 2
14770: ARRAY
14771: PPUSH
14772: CALL_OW 351
14776: OR
14777: IFFALSE 14783
// exit ;
14779: POP
14780: POP
14781: GO 15075
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14783: LD_ADDR_VAR 0 8
14787: PUSH
14788: LD_VAR 0 12
14792: PUSH
14793: LD_VAR 0 7
14797: ARRAY
14798: PUSH
14799: LD_INT 1
14801: ARRAY
14802: PPUSH
14803: LD_VAR 0 12
14807: PUSH
14808: LD_VAR 0 7
14812: ARRAY
14813: PUSH
14814: LD_INT 2
14816: ARRAY
14817: PPUSH
14818: CALL_OW 546
14822: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14823: LD_VAR 0 8
14827: PUSH
14828: LD_INT 1
14830: ARRAY
14831: PUSH
14832: LD_VAR 0 8
14836: PUSH
14837: LD_INT 2
14839: ARRAY
14840: PUSH
14841: LD_VAR 0 13
14845: PUSH
14846: LD_INT 2
14848: PLUS
14849: GREATER
14850: OR
14851: PUSH
14852: LD_VAR 0 8
14856: PUSH
14857: LD_INT 2
14859: ARRAY
14860: PUSH
14861: LD_VAR 0 13
14865: PUSH
14866: LD_INT 2
14868: MINUS
14869: LESS
14870: OR
14871: PUSH
14872: LD_VAR 0 8
14876: PUSH
14877: LD_INT 3
14879: ARRAY
14880: PUSH
14881: LD_INT 0
14883: PUSH
14884: LD_INT 8
14886: PUSH
14887: LD_INT 9
14889: PUSH
14890: LD_INT 10
14892: PUSH
14893: LD_INT 11
14895: PUSH
14896: LD_INT 12
14898: PUSH
14899: LD_INT 13
14901: PUSH
14902: LD_INT 16
14904: PUSH
14905: LD_INT 17
14907: PUSH
14908: LD_INT 18
14910: PUSH
14911: LD_INT 19
14913: PUSH
14914: LD_INT 20
14916: PUSH
14917: LD_INT 21
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: IN
14935: NOT
14936: OR
14937: PUSH
14938: LD_VAR 0 8
14942: PUSH
14943: LD_INT 5
14945: ARRAY
14946: NOT
14947: OR
14948: PUSH
14949: LD_VAR 0 8
14953: PUSH
14954: LD_INT 6
14956: ARRAY
14957: PUSH
14958: LD_INT 1
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: LD_INT 7
14966: PUSH
14967: LD_INT 9
14969: PUSH
14970: LD_INT 10
14972: PUSH
14973: LD_INT 11
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: IN
14984: NOT
14985: OR
14986: IFFALSE 14992
// exit ;
14988: POP
14989: POP
14990: GO 15075
// end ;
14992: GO 14663
14994: POP
14995: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14996: LD_VAR 0 9
15000: PPUSH
15001: LD_VAR 0 3
15005: PPUSH
15006: LD_VAR 0 4
15010: PPUSH
15011: LD_INT 20
15013: PPUSH
15014: CALL 6998 0 4
15018: PUSH
15019: LD_INT 4
15021: ARRAY
15022: IFFALSE 15026
// exit ;
15024: GO 15075
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15026: LD_VAR 0 2
15030: PUSH
15031: LD_INT 29
15033: PUSH
15034: LD_INT 30
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: IN
15041: PUSH
15042: LD_VAR 0 3
15046: PPUSH
15047: LD_VAR 0 4
15051: PPUSH
15052: LD_VAR 0 9
15056: PPUSH
15057: CALL_OW 440
15061: NOT
15062: AND
15063: IFFALSE 15067
// exit ;
15065: GO 15075
// result := true ;
15067: LD_ADDR_VAR 0 6
15071: PUSH
15072: LD_INT 1
15074: ST_TO_ADDR
// end ;
15075: LD_VAR 0 6
15079: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15080: LD_INT 0
15082: PPUSH
15083: PPUSH
15084: PPUSH
15085: PPUSH
15086: PPUSH
15087: PPUSH
15088: PPUSH
15089: PPUSH
15090: PPUSH
15091: PPUSH
15092: PPUSH
15093: PPUSH
15094: PPUSH
15095: PPUSH
15096: PPUSH
15097: PPUSH
15098: PPUSH
15099: PPUSH
15100: PPUSH
15101: PPUSH
15102: PPUSH
15103: PPUSH
15104: PPUSH
15105: PPUSH
15106: PPUSH
15107: PPUSH
15108: PPUSH
15109: PPUSH
15110: PPUSH
15111: PPUSH
15112: PPUSH
15113: PPUSH
15114: PPUSH
15115: PPUSH
15116: PPUSH
15117: PPUSH
15118: PPUSH
15119: PPUSH
15120: PPUSH
15121: PPUSH
15122: PPUSH
15123: PPUSH
15124: PPUSH
15125: PPUSH
15126: PPUSH
15127: PPUSH
15128: PPUSH
15129: PPUSH
15130: PPUSH
15131: PPUSH
15132: PPUSH
15133: PPUSH
15134: PPUSH
15135: PPUSH
15136: PPUSH
15137: PPUSH
15138: PPUSH
15139: PPUSH
// result = [ ] ;
15140: LD_ADDR_VAR 0 7
15144: PUSH
15145: EMPTY
15146: ST_TO_ADDR
// temp_list = [ ] ;
15147: LD_ADDR_VAR 0 9
15151: PUSH
15152: EMPTY
15153: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15154: LD_VAR 0 4
15158: PUSH
15159: LD_INT 0
15161: PUSH
15162: LD_INT 1
15164: PUSH
15165: LD_INT 2
15167: PUSH
15168: LD_INT 3
15170: PUSH
15171: LD_INT 4
15173: PUSH
15174: LD_INT 5
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: IN
15185: NOT
15186: PUSH
15187: LD_VAR 0 1
15191: PUSH
15192: LD_INT 0
15194: PUSH
15195: LD_INT 1
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: IN
15202: PUSH
15203: LD_VAR 0 5
15207: PUSH
15208: LD_INT 1
15210: PUSH
15211: LD_INT 2
15213: PUSH
15214: LD_INT 3
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: LIST
15221: IN
15222: NOT
15223: AND
15224: OR
15225: IFFALSE 15229
// exit ;
15227: GO 33620
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15229: LD_VAR 0 1
15233: PUSH
15234: LD_INT 6
15236: PUSH
15237: LD_INT 7
15239: PUSH
15240: LD_INT 8
15242: PUSH
15243: LD_INT 13
15245: PUSH
15246: LD_INT 12
15248: PUSH
15249: LD_INT 15
15251: PUSH
15252: LD_INT 11
15254: PUSH
15255: LD_INT 14
15257: PUSH
15258: LD_INT 10
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: IN
15272: IFFALSE 15282
// btype = b_lab ;
15274: LD_ADDR_VAR 0 1
15278: PUSH
15279: LD_INT 6
15281: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15282: LD_VAR 0 6
15286: PUSH
15287: LD_INT 0
15289: PUSH
15290: LD_INT 1
15292: PUSH
15293: LD_INT 2
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: LIST
15300: IN
15301: NOT
15302: PUSH
15303: LD_VAR 0 1
15307: PUSH
15308: LD_INT 0
15310: PUSH
15311: LD_INT 1
15313: PUSH
15314: LD_INT 2
15316: PUSH
15317: LD_INT 3
15319: PUSH
15320: LD_INT 6
15322: PUSH
15323: LD_INT 36
15325: PUSH
15326: LD_INT 4
15328: PUSH
15329: LD_INT 5
15331: PUSH
15332: LD_INT 31
15334: PUSH
15335: LD_INT 32
15337: PUSH
15338: LD_INT 33
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: IN
15354: NOT
15355: PUSH
15356: LD_VAR 0 6
15360: PUSH
15361: LD_INT 1
15363: EQUAL
15364: AND
15365: OR
15366: PUSH
15367: LD_VAR 0 1
15371: PUSH
15372: LD_INT 2
15374: PUSH
15375: LD_INT 3
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: IN
15382: NOT
15383: PUSH
15384: LD_VAR 0 6
15388: PUSH
15389: LD_INT 2
15391: EQUAL
15392: AND
15393: OR
15394: IFFALSE 15404
// mode = 0 ;
15396: LD_ADDR_VAR 0 6
15400: PUSH
15401: LD_INT 0
15403: ST_TO_ADDR
// case mode of 0 :
15404: LD_VAR 0 6
15408: PUSH
15409: LD_INT 0
15411: DOUBLE
15412: EQUAL
15413: IFTRUE 15417
15415: GO 26870
15417: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15418: LD_ADDR_VAR 0 11
15422: PUSH
15423: LD_INT 0
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 0
15435: PUSH
15436: LD_INT 1
15438: NEG
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 1
15446: PUSH
15447: LD_INT 0
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 1
15456: PUSH
15457: LD_INT 1
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 0
15466: PUSH
15467: LD_INT 1
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 1
15476: NEG
15477: PUSH
15478: LD_INT 0
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 1
15487: NEG
15488: PUSH
15489: LD_INT 1
15491: NEG
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 1
15499: NEG
15500: PUSH
15501: LD_INT 2
15503: NEG
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 0
15511: PUSH
15512: LD_INT 2
15514: NEG
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 1
15522: PUSH
15523: LD_INT 1
15525: NEG
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 1
15533: PUSH
15534: LD_INT 2
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 0
15543: PUSH
15544: LD_INT 2
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: PUSH
15551: LD_INT 1
15553: NEG
15554: PUSH
15555: LD_INT 1
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 1
15564: PUSH
15565: LD_INT 3
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 0
15574: PUSH
15575: LD_INT 3
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: LD_INT 1
15584: NEG
15585: PUSH
15586: LD_INT 2
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15611: LD_ADDR_VAR 0 12
15615: PUSH
15616: LD_INT 0
15618: PUSH
15619: LD_INT 0
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 0
15628: PUSH
15629: LD_INT 1
15631: NEG
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 1
15639: PUSH
15640: LD_INT 0
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 1
15649: PUSH
15650: LD_INT 1
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 0
15659: PUSH
15660: LD_INT 1
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: LD_INT 1
15669: NEG
15670: PUSH
15671: LD_INT 0
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: LD_INT 1
15680: NEG
15681: PUSH
15682: LD_INT 1
15684: NEG
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: LD_INT 1
15692: PUSH
15693: LD_INT 1
15695: NEG
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 2
15703: PUSH
15704: LD_INT 0
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 2
15713: PUSH
15714: LD_INT 1
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: LD_INT 1
15723: NEG
15724: PUSH
15725: LD_INT 1
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: LD_INT 2
15734: NEG
15735: PUSH
15736: LD_INT 0
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PUSH
15743: LD_INT 2
15745: NEG
15746: PUSH
15747: LD_INT 1
15749: NEG
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: LD_INT 2
15757: NEG
15758: PUSH
15759: LD_INT 1
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: PUSH
15766: LD_INT 3
15768: NEG
15769: PUSH
15770: LD_INT 0
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PUSH
15777: LD_INT 3
15779: NEG
15780: PUSH
15781: LD_INT 1
15783: NEG
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15807: LD_ADDR_VAR 0 13
15811: PUSH
15812: LD_INT 0
15814: PUSH
15815: LD_INT 0
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 0
15824: PUSH
15825: LD_INT 1
15827: NEG
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 1
15835: PUSH
15836: LD_INT 0
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 1
15845: PUSH
15846: LD_INT 1
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: LD_INT 0
15855: PUSH
15856: LD_INT 1
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PUSH
15863: LD_INT 1
15865: NEG
15866: PUSH
15867: LD_INT 0
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: LD_INT 1
15876: NEG
15877: PUSH
15878: LD_INT 1
15880: NEG
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PUSH
15886: LD_INT 1
15888: NEG
15889: PUSH
15890: LD_INT 2
15892: NEG
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 2
15900: PUSH
15901: LD_INT 1
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 2
15910: PUSH
15911: LD_INT 2
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 1
15920: PUSH
15921: LD_INT 2
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 2
15930: NEG
15931: PUSH
15932: LD_INT 1
15934: NEG
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 2
15942: NEG
15943: PUSH
15944: LD_INT 2
15946: NEG
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: LD_INT 2
15954: NEG
15955: PUSH
15956: LD_INT 3
15958: NEG
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 3
15966: NEG
15967: PUSH
15968: LD_INT 2
15970: NEG
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: LD_INT 3
15978: NEG
15979: PUSH
15980: LD_INT 3
15982: NEG
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16006: LD_ADDR_VAR 0 14
16010: PUSH
16011: LD_INT 0
16013: PUSH
16014: LD_INT 0
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 0
16023: PUSH
16024: LD_INT 1
16026: NEG
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 1
16034: PUSH
16035: LD_INT 0
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 1
16044: PUSH
16045: LD_INT 1
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: LD_INT 0
16054: PUSH
16055: LD_INT 1
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: LD_INT 1
16064: NEG
16065: PUSH
16066: LD_INT 0
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: LD_INT 1
16075: NEG
16076: PUSH
16077: LD_INT 1
16079: NEG
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PUSH
16085: LD_INT 1
16087: NEG
16088: PUSH
16089: LD_INT 2
16091: NEG
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: LD_INT 0
16099: PUSH
16100: LD_INT 2
16102: NEG
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 1
16110: PUSH
16111: LD_INT 1
16113: NEG
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: PUSH
16119: LD_INT 1
16121: PUSH
16122: LD_INT 2
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: LD_INT 0
16131: PUSH
16132: LD_INT 2
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 1
16141: NEG
16142: PUSH
16143: LD_INT 1
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 1
16152: NEG
16153: PUSH
16154: LD_INT 3
16156: NEG
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: LD_INT 0
16164: PUSH
16165: LD_INT 3
16167: NEG
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: LD_INT 1
16175: PUSH
16176: LD_INT 2
16178: NEG
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16202: LD_ADDR_VAR 0 15
16206: PUSH
16207: LD_INT 0
16209: PUSH
16210: LD_INT 0
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 0
16219: PUSH
16220: LD_INT 1
16222: NEG
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: LD_INT 1
16230: PUSH
16231: LD_INT 0
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: LD_INT 1
16240: PUSH
16241: LD_INT 1
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 0
16250: PUSH
16251: LD_INT 1
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: LD_INT 1
16260: NEG
16261: PUSH
16262: LD_INT 0
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 1
16271: NEG
16272: PUSH
16273: LD_INT 1
16275: NEG
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: LD_INT 1
16283: PUSH
16284: LD_INT 1
16286: NEG
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PUSH
16292: LD_INT 2
16294: PUSH
16295: LD_INT 0
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 2
16304: PUSH
16305: LD_INT 1
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 1
16314: NEG
16315: PUSH
16316: LD_INT 1
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 2
16325: NEG
16326: PUSH
16327: LD_INT 0
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 2
16336: NEG
16337: PUSH
16338: LD_INT 1
16340: NEG
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 2
16348: PUSH
16349: LD_INT 1
16351: NEG
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 3
16359: PUSH
16360: LD_INT 0
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 3
16369: PUSH
16370: LD_INT 1
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16395: LD_ADDR_VAR 0 16
16399: PUSH
16400: LD_INT 0
16402: PUSH
16403: LD_INT 0
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: LD_INT 0
16412: PUSH
16413: LD_INT 1
16415: NEG
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 1
16423: PUSH
16424: LD_INT 0
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 1
16433: PUSH
16434: LD_INT 1
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 0
16443: PUSH
16444: LD_INT 1
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PUSH
16451: LD_INT 1
16453: NEG
16454: PUSH
16455: LD_INT 0
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 1
16464: NEG
16465: PUSH
16466: LD_INT 1
16468: NEG
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 1
16476: NEG
16477: PUSH
16478: LD_INT 2
16480: NEG
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 2
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 2
16498: PUSH
16499: LD_INT 2
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 1
16508: PUSH
16509: LD_INT 2
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 2
16518: NEG
16519: PUSH
16520: LD_INT 1
16522: NEG
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: LD_INT 2
16530: NEG
16531: PUSH
16532: LD_INT 2
16534: NEG
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 3
16542: PUSH
16543: LD_INT 2
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 3
16552: PUSH
16553: LD_INT 3
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 2
16562: PUSH
16563: LD_INT 3
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16588: LD_ADDR_VAR 0 17
16592: PUSH
16593: LD_INT 0
16595: PUSH
16596: LD_INT 0
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: LD_INT 0
16605: PUSH
16606: LD_INT 1
16608: NEG
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 1
16616: PUSH
16617: LD_INT 0
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 1
16626: PUSH
16627: LD_INT 1
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 0
16636: PUSH
16637: LD_INT 1
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PUSH
16644: LD_INT 1
16646: NEG
16647: PUSH
16648: LD_INT 0
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 1
16657: NEG
16658: PUSH
16659: LD_INT 1
16661: NEG
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 1
16669: NEG
16670: PUSH
16671: LD_INT 2
16673: NEG
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 0
16681: PUSH
16682: LD_INT 2
16684: NEG
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 1
16692: PUSH
16693: LD_INT 1
16695: NEG
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 2
16703: PUSH
16704: LD_INT 0
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 2
16713: PUSH
16714: LD_INT 1
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: LD_INT 2
16723: PUSH
16724: LD_INT 2
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 1
16733: PUSH
16734: LD_INT 2
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: LD_INT 0
16743: PUSH
16744: LD_INT 2
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 1
16753: NEG
16754: PUSH
16755: LD_INT 1
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 2
16764: NEG
16765: PUSH
16766: LD_INT 0
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 2
16775: NEG
16776: PUSH
16777: LD_INT 1
16779: NEG
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 2
16787: NEG
16788: PUSH
16789: LD_INT 2
16791: NEG
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16818: LD_ADDR_VAR 0 18
16822: PUSH
16823: LD_INT 0
16825: PUSH
16826: LD_INT 0
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: LD_INT 0
16835: PUSH
16836: LD_INT 1
16838: NEG
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: LD_INT 1
16846: PUSH
16847: LD_INT 0
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 1
16856: PUSH
16857: LD_INT 1
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 0
16866: PUSH
16867: LD_INT 1
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 1
16876: NEG
16877: PUSH
16878: LD_INT 0
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: PUSH
16885: LD_INT 1
16887: NEG
16888: PUSH
16889: LD_INT 1
16891: NEG
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 1
16899: NEG
16900: PUSH
16901: LD_INT 2
16903: NEG
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 0
16911: PUSH
16912: LD_INT 2
16914: NEG
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 1
16922: PUSH
16923: LD_INT 1
16925: NEG
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 2
16933: PUSH
16934: LD_INT 0
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 2
16943: PUSH
16944: LD_INT 1
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 2
16953: PUSH
16954: LD_INT 2
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: LD_INT 1
16963: PUSH
16964: LD_INT 2
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 0
16973: PUSH
16974: LD_INT 2
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 1
16983: NEG
16984: PUSH
16985: LD_INT 1
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: LD_INT 2
16994: NEG
16995: PUSH
16996: LD_INT 0
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 2
17005: NEG
17006: PUSH
17007: LD_INT 1
17009: NEG
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: LD_INT 2
17017: NEG
17018: PUSH
17019: LD_INT 2
17021: NEG
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17048: LD_ADDR_VAR 0 19
17052: PUSH
17053: LD_INT 0
17055: PUSH
17056: LD_INT 0
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 0
17065: PUSH
17066: LD_INT 1
17068: NEG
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 1
17076: PUSH
17077: LD_INT 0
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 1
17086: PUSH
17087: LD_INT 1
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 0
17096: PUSH
17097: LD_INT 1
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 1
17106: NEG
17107: PUSH
17108: LD_INT 0
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 1
17117: NEG
17118: PUSH
17119: LD_INT 1
17121: NEG
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 1
17129: NEG
17130: PUSH
17131: LD_INT 2
17133: NEG
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: LD_INT 0
17141: PUSH
17142: LD_INT 2
17144: NEG
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 1
17152: PUSH
17153: LD_INT 1
17155: NEG
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 2
17163: PUSH
17164: LD_INT 0
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 2
17173: PUSH
17174: LD_INT 1
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 2
17183: PUSH
17184: LD_INT 2
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 1
17193: PUSH
17194: LD_INT 2
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 0
17203: PUSH
17204: LD_INT 2
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 1
17213: NEG
17214: PUSH
17215: LD_INT 1
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 2
17224: NEG
17225: PUSH
17226: LD_INT 0
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 2
17235: NEG
17236: PUSH
17237: LD_INT 1
17239: NEG
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 2
17247: NEG
17248: PUSH
17249: LD_INT 2
17251: NEG
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17278: LD_ADDR_VAR 0 20
17282: PUSH
17283: LD_INT 0
17285: PUSH
17286: LD_INT 0
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 0
17295: PUSH
17296: LD_INT 1
17298: NEG
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 1
17306: PUSH
17307: LD_INT 0
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 1
17316: PUSH
17317: LD_INT 1
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 0
17326: PUSH
17327: LD_INT 1
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 1
17336: NEG
17337: PUSH
17338: LD_INT 0
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: LD_INT 1
17347: NEG
17348: PUSH
17349: LD_INT 1
17351: NEG
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 1
17359: NEG
17360: PUSH
17361: LD_INT 2
17363: NEG
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PUSH
17369: LD_INT 0
17371: PUSH
17372: LD_INT 2
17374: NEG
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 1
17382: PUSH
17383: LD_INT 1
17385: NEG
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 2
17393: PUSH
17394: LD_INT 0
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 2
17403: PUSH
17404: LD_INT 1
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: LD_INT 2
17413: PUSH
17414: LD_INT 2
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 1
17423: PUSH
17424: LD_INT 2
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 0
17433: PUSH
17434: LD_INT 2
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 1
17443: NEG
17444: PUSH
17445: LD_INT 1
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 2
17454: NEG
17455: PUSH
17456: LD_INT 0
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 2
17465: NEG
17466: PUSH
17467: LD_INT 1
17469: NEG
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 2
17477: NEG
17478: PUSH
17479: LD_INT 2
17481: NEG
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17508: LD_ADDR_VAR 0 21
17512: PUSH
17513: LD_INT 0
17515: PUSH
17516: LD_INT 0
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 0
17525: PUSH
17526: LD_INT 1
17528: NEG
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 1
17536: PUSH
17537: LD_INT 0
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 1
17546: PUSH
17547: LD_INT 1
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 0
17556: PUSH
17557: LD_INT 1
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 1
17566: NEG
17567: PUSH
17568: LD_INT 0
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 1
17577: NEG
17578: PUSH
17579: LD_INT 1
17581: NEG
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 1
17589: NEG
17590: PUSH
17591: LD_INT 2
17593: NEG
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PUSH
17599: LD_INT 0
17601: PUSH
17602: LD_INT 2
17604: NEG
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 1
17612: PUSH
17613: LD_INT 1
17615: NEG
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 2
17623: PUSH
17624: LD_INT 0
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: LD_INT 2
17633: PUSH
17634: LD_INT 1
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: LD_INT 2
17643: PUSH
17644: LD_INT 2
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 1
17653: PUSH
17654: LD_INT 2
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 0
17663: PUSH
17664: LD_INT 2
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 1
17673: NEG
17674: PUSH
17675: LD_INT 1
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 2
17684: NEG
17685: PUSH
17686: LD_INT 0
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 2
17695: NEG
17696: PUSH
17697: LD_INT 1
17699: NEG
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 2
17707: NEG
17708: PUSH
17709: LD_INT 2
17711: NEG
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17738: LD_ADDR_VAR 0 22
17742: PUSH
17743: LD_INT 0
17745: PUSH
17746: LD_INT 0
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 0
17755: PUSH
17756: LD_INT 1
17758: NEG
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 1
17766: PUSH
17767: LD_INT 0
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 1
17776: PUSH
17777: LD_INT 1
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: LD_INT 0
17786: PUSH
17787: LD_INT 1
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 1
17796: NEG
17797: PUSH
17798: LD_INT 0
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 1
17807: NEG
17808: PUSH
17809: LD_INT 1
17811: NEG
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: LD_INT 1
17819: NEG
17820: PUSH
17821: LD_INT 2
17823: NEG
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PUSH
17829: LD_INT 0
17831: PUSH
17832: LD_INT 2
17834: NEG
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 1
17842: PUSH
17843: LD_INT 1
17845: NEG
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 2
17853: PUSH
17854: LD_INT 0
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 2
17863: PUSH
17864: LD_INT 1
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 2
17873: PUSH
17874: LD_INT 2
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 1
17883: PUSH
17884: LD_INT 2
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: LD_INT 0
17893: PUSH
17894: LD_INT 2
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PUSH
17901: LD_INT 1
17903: NEG
17904: PUSH
17905: LD_INT 1
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: LD_INT 2
17914: NEG
17915: PUSH
17916: LD_INT 0
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 2
17925: NEG
17926: PUSH
17927: LD_INT 1
17929: NEG
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 2
17937: NEG
17938: PUSH
17939: LD_INT 2
17941: NEG
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17968: LD_ADDR_VAR 0 23
17972: PUSH
17973: LD_INT 0
17975: PUSH
17976: LD_INT 0
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 0
17985: PUSH
17986: LD_INT 1
17988: NEG
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 1
17996: PUSH
17997: LD_INT 0
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 1
18006: PUSH
18007: LD_INT 1
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 0
18016: PUSH
18017: LD_INT 1
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 1
18026: NEG
18027: PUSH
18028: LD_INT 0
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: LD_INT 1
18037: NEG
18038: PUSH
18039: LD_INT 1
18041: NEG
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 1
18049: NEG
18050: PUSH
18051: LD_INT 2
18053: NEG
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 0
18061: PUSH
18062: LD_INT 2
18064: NEG
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 1
18072: PUSH
18073: LD_INT 1
18075: NEG
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 2
18083: PUSH
18084: LD_INT 0
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 2
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 2
18103: PUSH
18104: LD_INT 2
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 1
18113: PUSH
18114: LD_INT 2
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 0
18123: PUSH
18124: LD_INT 2
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 1
18133: NEG
18134: PUSH
18135: LD_INT 1
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 2
18144: NEG
18145: PUSH
18146: LD_INT 0
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 2
18155: NEG
18156: PUSH
18157: LD_INT 1
18159: NEG
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 2
18167: NEG
18168: PUSH
18169: LD_INT 2
18171: NEG
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 2
18179: NEG
18180: PUSH
18181: LD_INT 3
18183: NEG
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 1
18191: NEG
18192: PUSH
18193: LD_INT 3
18195: NEG
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: LD_INT 2
18206: NEG
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 2
18214: PUSH
18215: LD_INT 1
18217: NEG
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18248: LD_ADDR_VAR 0 24
18252: PUSH
18253: LD_INT 0
18255: PUSH
18256: LD_INT 0
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 0
18265: PUSH
18266: LD_INT 1
18268: NEG
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 1
18276: PUSH
18277: LD_INT 0
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 1
18286: PUSH
18287: LD_INT 1
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 0
18296: PUSH
18297: LD_INT 1
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 1
18306: NEG
18307: PUSH
18308: LD_INT 0
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 1
18317: NEG
18318: PUSH
18319: LD_INT 1
18321: NEG
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 1
18329: NEG
18330: PUSH
18331: LD_INT 2
18333: NEG
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: LD_INT 0
18341: PUSH
18342: LD_INT 2
18344: NEG
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: LD_INT 1
18355: NEG
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 2
18363: PUSH
18364: LD_INT 0
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 2
18373: PUSH
18374: LD_INT 1
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 2
18383: PUSH
18384: LD_INT 2
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 1
18393: PUSH
18394: LD_INT 2
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 0
18403: PUSH
18404: LD_INT 2
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 1
18413: NEG
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 2
18424: NEG
18425: PUSH
18426: LD_INT 0
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 2
18435: NEG
18436: PUSH
18437: LD_INT 1
18439: NEG
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 2
18447: NEG
18448: PUSH
18449: LD_INT 2
18451: NEG
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: LD_INT 2
18462: NEG
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 2
18470: PUSH
18471: LD_INT 1
18473: NEG
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: LD_INT 3
18481: PUSH
18482: LD_INT 1
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 3
18491: PUSH
18492: LD_INT 2
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18524: LD_ADDR_VAR 0 25
18528: PUSH
18529: LD_INT 0
18531: PUSH
18532: LD_INT 0
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 0
18541: PUSH
18542: LD_INT 1
18544: NEG
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 1
18552: PUSH
18553: LD_INT 0
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 1
18562: PUSH
18563: LD_INT 1
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 0
18572: PUSH
18573: LD_INT 1
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 1
18582: NEG
18583: PUSH
18584: LD_INT 0
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 1
18593: NEG
18594: PUSH
18595: LD_INT 1
18597: NEG
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 1
18605: NEG
18606: PUSH
18607: LD_INT 2
18609: NEG
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 0
18617: PUSH
18618: LD_INT 2
18620: NEG
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 1
18628: PUSH
18629: LD_INT 1
18631: NEG
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 2
18639: PUSH
18640: LD_INT 0
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 2
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 2
18659: PUSH
18660: LD_INT 2
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 1
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 0
18679: PUSH
18680: LD_INT 2
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 1
18689: NEG
18690: PUSH
18691: LD_INT 1
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 2
18700: NEG
18701: PUSH
18702: LD_INT 0
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 2
18711: NEG
18712: PUSH
18713: LD_INT 1
18715: NEG
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 2
18723: NEG
18724: PUSH
18725: LD_INT 2
18727: NEG
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 3
18735: PUSH
18736: LD_INT 1
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 3
18745: PUSH
18746: LD_INT 2
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 2
18755: PUSH
18756: LD_INT 3
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 1
18765: PUSH
18766: LD_INT 3
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18798: LD_ADDR_VAR 0 26
18802: PUSH
18803: LD_INT 0
18805: PUSH
18806: LD_INT 0
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 0
18815: PUSH
18816: LD_INT 1
18818: NEG
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 1
18826: PUSH
18827: LD_INT 0
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 1
18836: PUSH
18837: LD_INT 1
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 0
18846: PUSH
18847: LD_INT 1
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 1
18856: NEG
18857: PUSH
18858: LD_INT 0
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 1
18867: NEG
18868: PUSH
18869: LD_INT 1
18871: NEG
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 1
18879: NEG
18880: PUSH
18881: LD_INT 2
18883: NEG
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 0
18891: PUSH
18892: LD_INT 2
18894: NEG
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 1
18902: PUSH
18903: LD_INT 1
18905: NEG
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 2
18913: PUSH
18914: LD_INT 0
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 2
18923: PUSH
18924: LD_INT 1
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 2
18933: PUSH
18934: LD_INT 2
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 1
18943: PUSH
18944: LD_INT 2
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 0
18953: PUSH
18954: LD_INT 2
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 1
18963: NEG
18964: PUSH
18965: LD_INT 1
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 2
18974: NEG
18975: PUSH
18976: LD_INT 0
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 2
18985: NEG
18986: PUSH
18987: LD_INT 1
18989: NEG
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 2
18997: NEG
18998: PUSH
18999: LD_INT 2
19001: NEG
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 2
19009: PUSH
19010: LD_INT 3
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 1
19019: PUSH
19020: LD_INT 3
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 1
19029: NEG
19030: PUSH
19031: LD_INT 2
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 2
19040: NEG
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19074: LD_ADDR_VAR 0 27
19078: PUSH
19079: LD_INT 0
19081: PUSH
19082: LD_INT 0
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 0
19091: PUSH
19092: LD_INT 1
19094: NEG
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 1
19102: PUSH
19103: LD_INT 0
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 1
19112: PUSH
19113: LD_INT 1
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 0
19122: PUSH
19123: LD_INT 1
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 1
19132: NEG
19133: PUSH
19134: LD_INT 0
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 1
19143: NEG
19144: PUSH
19145: LD_INT 1
19147: NEG
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 1
19155: NEG
19156: PUSH
19157: LD_INT 2
19159: NEG
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 0
19167: PUSH
19168: LD_INT 2
19170: NEG
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 1
19178: PUSH
19179: LD_INT 1
19181: NEG
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 2
19189: PUSH
19190: LD_INT 0
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 2
19199: PUSH
19200: LD_INT 1
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 2
19209: PUSH
19210: LD_INT 2
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 1
19219: PUSH
19220: LD_INT 2
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 0
19229: PUSH
19230: LD_INT 2
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 1
19239: NEG
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 2
19250: NEG
19251: PUSH
19252: LD_INT 0
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 2
19261: NEG
19262: PUSH
19263: LD_INT 1
19265: NEG
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 2
19273: NEG
19274: PUSH
19275: LD_INT 2
19277: NEG
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 1
19285: NEG
19286: PUSH
19287: LD_INT 2
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 2
19296: NEG
19297: PUSH
19298: LD_INT 1
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 3
19307: NEG
19308: PUSH
19309: LD_INT 1
19311: NEG
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 3
19319: NEG
19320: PUSH
19321: LD_INT 2
19323: NEG
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19354: LD_ADDR_VAR 0 28
19358: PUSH
19359: LD_INT 0
19361: PUSH
19362: LD_INT 0
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 0
19371: PUSH
19372: LD_INT 1
19374: NEG
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 1
19382: PUSH
19383: LD_INT 0
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 1
19392: PUSH
19393: LD_INT 1
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 0
19402: PUSH
19403: LD_INT 1
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 1
19412: NEG
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 1
19423: NEG
19424: PUSH
19425: LD_INT 1
19427: NEG
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 1
19435: NEG
19436: PUSH
19437: LD_INT 2
19439: NEG
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 0
19447: PUSH
19448: LD_INT 2
19450: NEG
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 1
19458: PUSH
19459: LD_INT 1
19461: NEG
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 2
19469: PUSH
19470: LD_INT 0
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 2
19479: PUSH
19480: LD_INT 1
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 2
19489: PUSH
19490: LD_INT 2
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 1
19499: PUSH
19500: LD_INT 2
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 0
19509: PUSH
19510: LD_INT 2
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 1
19519: NEG
19520: PUSH
19521: LD_INT 1
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 2
19530: NEG
19531: PUSH
19532: LD_INT 0
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 2
19541: NEG
19542: PUSH
19543: LD_INT 1
19545: NEG
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 2
19553: NEG
19554: PUSH
19555: LD_INT 2
19557: NEG
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 2
19565: NEG
19566: PUSH
19567: LD_INT 3
19569: NEG
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 1
19577: NEG
19578: PUSH
19579: LD_INT 3
19581: NEG
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 3
19589: NEG
19590: PUSH
19591: LD_INT 1
19593: NEG
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 3
19601: NEG
19602: PUSH
19603: LD_INT 2
19605: NEG
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19636: LD_ADDR_VAR 0 29
19640: PUSH
19641: LD_INT 0
19643: PUSH
19644: LD_INT 0
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 0
19653: PUSH
19654: LD_INT 1
19656: NEG
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 1
19664: PUSH
19665: LD_INT 0
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 1
19674: PUSH
19675: LD_INT 1
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 0
19684: PUSH
19685: LD_INT 1
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 1
19694: NEG
19695: PUSH
19696: LD_INT 0
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 1
19705: NEG
19706: PUSH
19707: LD_INT 1
19709: NEG
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 1
19717: NEG
19718: PUSH
19719: LD_INT 2
19721: NEG
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 0
19729: PUSH
19730: LD_INT 2
19732: NEG
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 1
19740: PUSH
19741: LD_INT 1
19743: NEG
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 2
19751: PUSH
19752: LD_INT 0
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 2
19761: PUSH
19762: LD_INT 1
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 1
19771: PUSH
19772: LD_INT 2
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 0
19781: PUSH
19782: LD_INT 2
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 1
19791: NEG
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 2
19802: NEG
19803: PUSH
19804: LD_INT 1
19806: NEG
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 2
19814: NEG
19815: PUSH
19816: LD_INT 2
19818: NEG
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 2
19826: NEG
19827: PUSH
19828: LD_INT 3
19830: NEG
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 2
19838: PUSH
19839: LD_INT 1
19841: NEG
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 3
19849: PUSH
19850: LD_INT 1
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 1
19859: PUSH
19860: LD_INT 3
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 1
19869: NEG
19870: PUSH
19871: LD_INT 2
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 3
19880: NEG
19881: PUSH
19882: LD_INT 2
19884: NEG
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19915: LD_ADDR_VAR 0 30
19919: PUSH
19920: LD_INT 0
19922: PUSH
19923: LD_INT 0
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 0
19932: PUSH
19933: LD_INT 1
19935: NEG
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: LD_INT 0
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 1
19953: PUSH
19954: LD_INT 1
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 0
19963: PUSH
19964: LD_INT 1
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 1
19973: NEG
19974: PUSH
19975: LD_INT 0
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 1
19984: NEG
19985: PUSH
19986: LD_INT 1
19988: NEG
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 1
19996: NEG
19997: PUSH
19998: LD_INT 2
20000: NEG
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 0
20008: PUSH
20009: LD_INT 2
20011: NEG
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 1
20019: PUSH
20020: LD_INT 1
20022: NEG
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 2
20030: PUSH
20031: LD_INT 0
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 2
20040: PUSH
20041: LD_INT 1
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 2
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 1
20060: PUSH
20061: LD_INT 2
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 1
20070: NEG
20071: PUSH
20072: LD_INT 1
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 2
20081: NEG
20082: PUSH
20083: LD_INT 0
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 2
20092: NEG
20093: PUSH
20094: LD_INT 1
20096: NEG
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 1
20104: NEG
20105: PUSH
20106: LD_INT 3
20108: NEG
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 1
20116: PUSH
20117: LD_INT 2
20119: NEG
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 3
20127: PUSH
20128: LD_INT 2
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 2
20137: PUSH
20138: LD_INT 3
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 2
20147: NEG
20148: PUSH
20149: LD_INT 1
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 3
20158: NEG
20159: PUSH
20160: LD_INT 1
20162: NEG
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20193: LD_ADDR_VAR 0 31
20197: PUSH
20198: LD_INT 0
20200: PUSH
20201: LD_INT 0
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 0
20210: PUSH
20211: LD_INT 1
20213: NEG
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 1
20221: PUSH
20222: LD_INT 0
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 1
20231: PUSH
20232: LD_INT 1
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 0
20241: PUSH
20242: LD_INT 1
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 1
20251: NEG
20252: PUSH
20253: LD_INT 0
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 1
20262: NEG
20263: PUSH
20264: LD_INT 1
20266: NEG
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 1
20274: NEG
20275: PUSH
20276: LD_INT 2
20278: NEG
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 1
20286: PUSH
20287: LD_INT 1
20289: NEG
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 2
20297: PUSH
20298: LD_INT 0
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 2
20307: PUSH
20308: LD_INT 1
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 2
20317: PUSH
20318: LD_INT 2
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 1
20327: PUSH
20328: LD_INT 2
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 0
20337: PUSH
20338: LD_INT 2
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 1
20347: NEG
20348: PUSH
20349: LD_INT 1
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 2
20358: NEG
20359: PUSH
20360: LD_INT 1
20362: NEG
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 2
20370: NEG
20371: PUSH
20372: LD_INT 2
20374: NEG
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 2
20382: NEG
20383: PUSH
20384: LD_INT 3
20386: NEG
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 2
20394: PUSH
20395: LD_INT 1
20397: NEG
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 3
20405: PUSH
20406: LD_INT 1
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 1
20415: PUSH
20416: LD_INT 3
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 1
20425: NEG
20426: PUSH
20427: LD_INT 2
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: LD_INT 3
20436: NEG
20437: PUSH
20438: LD_INT 2
20440: NEG
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20471: LD_ADDR_VAR 0 32
20475: PUSH
20476: LD_INT 0
20478: PUSH
20479: LD_INT 0
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 0
20488: PUSH
20489: LD_INT 1
20491: NEG
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 1
20499: PUSH
20500: LD_INT 0
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 1
20509: PUSH
20510: LD_INT 1
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 0
20519: PUSH
20520: LD_INT 1
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 1
20529: NEG
20530: PUSH
20531: LD_INT 0
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 1
20540: NEG
20541: PUSH
20542: LD_INT 1
20544: NEG
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 1
20552: NEG
20553: PUSH
20554: LD_INT 2
20556: NEG
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 0
20564: PUSH
20565: LD_INT 2
20567: NEG
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 1
20575: PUSH
20576: LD_INT 1
20578: NEG
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 2
20586: PUSH
20587: LD_INT 1
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 2
20596: PUSH
20597: LD_INT 2
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 1
20606: PUSH
20607: LD_INT 2
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 0
20616: PUSH
20617: LD_INT 2
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 1
20626: NEG
20627: PUSH
20628: LD_INT 1
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 2
20637: NEG
20638: PUSH
20639: LD_INT 0
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 2
20648: NEG
20649: PUSH
20650: LD_INT 1
20652: NEG
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 1
20660: NEG
20661: PUSH
20662: LD_INT 3
20664: NEG
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: LD_INT 2
20675: NEG
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 3
20683: PUSH
20684: LD_INT 2
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 2
20693: PUSH
20694: LD_INT 3
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 2
20703: NEG
20704: PUSH
20705: LD_INT 1
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 3
20714: NEG
20715: PUSH
20716: LD_INT 1
20718: NEG
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20749: LD_ADDR_VAR 0 33
20753: PUSH
20754: LD_INT 0
20756: PUSH
20757: LD_INT 0
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 0
20766: PUSH
20767: LD_INT 1
20769: NEG
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 1
20777: PUSH
20778: LD_INT 0
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 1
20787: PUSH
20788: LD_INT 1
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 0
20797: PUSH
20798: LD_INT 1
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 1
20807: NEG
20808: PUSH
20809: LD_INT 0
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: NEG
20819: PUSH
20820: LD_INT 1
20822: NEG
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 1
20830: NEG
20831: PUSH
20832: LD_INT 2
20834: NEG
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: LD_INT 1
20845: NEG
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 2
20853: PUSH
20854: LD_INT 0
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 2
20863: PUSH
20864: LD_INT 1
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 1
20873: PUSH
20874: LD_INT 2
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 0
20883: PUSH
20884: LD_INT 2
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 1
20893: NEG
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 2
20904: NEG
20905: PUSH
20906: LD_INT 0
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 2
20915: NEG
20916: PUSH
20917: LD_INT 1
20919: NEG
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 2
20927: NEG
20928: PUSH
20929: LD_INT 2
20931: NEG
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 2
20939: NEG
20940: PUSH
20941: LD_INT 3
20943: NEG
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 2
20951: PUSH
20952: LD_INT 1
20954: NEG
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 3
20962: PUSH
20963: LD_INT 1
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 1
20972: PUSH
20973: LD_INT 3
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 1
20982: NEG
20983: PUSH
20984: LD_INT 2
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 3
20993: NEG
20994: PUSH
20995: LD_INT 2
20997: NEG
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21028: LD_ADDR_VAR 0 34
21032: PUSH
21033: LD_INT 0
21035: PUSH
21036: LD_INT 0
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 0
21045: PUSH
21046: LD_INT 1
21048: NEG
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 1
21056: PUSH
21057: LD_INT 0
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 1
21066: PUSH
21067: LD_INT 1
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 0
21076: PUSH
21077: LD_INT 1
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 1
21086: NEG
21087: PUSH
21088: LD_INT 0
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 1
21097: NEG
21098: PUSH
21099: LD_INT 1
21101: NEG
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 1
21109: NEG
21110: PUSH
21111: LD_INT 2
21113: NEG
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 0
21121: PUSH
21122: LD_INT 2
21124: NEG
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 1
21132: PUSH
21133: LD_INT 1
21135: NEG
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 2
21143: PUSH
21144: LD_INT 1
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 2
21153: PUSH
21154: LD_INT 2
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 1
21163: PUSH
21164: LD_INT 2
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 1
21173: NEG
21174: PUSH
21175: LD_INT 1
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 2
21184: NEG
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 2
21195: NEG
21196: PUSH
21197: LD_INT 1
21199: NEG
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 2
21207: NEG
21208: PUSH
21209: LD_INT 2
21211: NEG
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 1
21219: NEG
21220: PUSH
21221: LD_INT 3
21223: NEG
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 1
21231: PUSH
21232: LD_INT 2
21234: NEG
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 3
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 2
21252: PUSH
21253: LD_INT 3
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 2
21262: NEG
21263: PUSH
21264: LD_INT 1
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 3
21273: NEG
21274: PUSH
21275: LD_INT 1
21277: NEG
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21308: LD_ADDR_VAR 0 35
21312: PUSH
21313: LD_INT 0
21315: PUSH
21316: LD_INT 0
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 0
21325: PUSH
21326: LD_INT 1
21328: NEG
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: LD_INT 0
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 1
21346: PUSH
21347: LD_INT 1
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 0
21356: PUSH
21357: LD_INT 1
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 1
21366: NEG
21367: PUSH
21368: LD_INT 0
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 1
21377: NEG
21378: PUSH
21379: LD_INT 1
21381: NEG
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 2
21389: PUSH
21390: LD_INT 1
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 2
21399: NEG
21400: PUSH
21401: LD_INT 1
21403: NEG
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21420: LD_ADDR_VAR 0 36
21424: PUSH
21425: LD_INT 0
21427: PUSH
21428: LD_INT 0
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 0
21437: PUSH
21438: LD_INT 1
21440: NEG
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 1
21448: PUSH
21449: LD_INT 0
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 1
21458: PUSH
21459: LD_INT 1
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 0
21468: PUSH
21469: LD_INT 1
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 1
21478: NEG
21479: PUSH
21480: LD_INT 0
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 1
21489: NEG
21490: PUSH
21491: LD_INT 1
21493: NEG
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 1
21501: NEG
21502: PUSH
21503: LD_INT 2
21505: NEG
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 1
21513: PUSH
21514: LD_INT 2
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21532: LD_ADDR_VAR 0 37
21536: PUSH
21537: LD_INT 0
21539: PUSH
21540: LD_INT 0
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 0
21549: PUSH
21550: LD_INT 1
21552: NEG
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 1
21560: PUSH
21561: LD_INT 0
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 1
21570: PUSH
21571: LD_INT 1
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 0
21580: PUSH
21581: LD_INT 1
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 1
21590: NEG
21591: PUSH
21592: LD_INT 0
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 1
21601: NEG
21602: PUSH
21603: LD_INT 1
21605: NEG
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 1
21613: PUSH
21614: LD_INT 1
21616: NEG
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: NEG
21625: PUSH
21626: LD_INT 1
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21644: LD_ADDR_VAR 0 38
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: LD_INT 0
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 0
21661: PUSH
21662: LD_INT 1
21664: NEG
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 1
21672: PUSH
21673: LD_INT 0
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 1
21682: PUSH
21683: LD_INT 1
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 0
21692: PUSH
21693: LD_INT 1
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 1
21702: NEG
21703: PUSH
21704: LD_INT 0
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 1
21713: NEG
21714: PUSH
21715: LD_INT 1
21717: NEG
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 2
21725: PUSH
21726: LD_INT 1
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 2
21735: NEG
21736: PUSH
21737: LD_INT 1
21739: NEG
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21756: LD_ADDR_VAR 0 39
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: LD_INT 0
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 0
21773: PUSH
21774: LD_INT 1
21776: NEG
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 1
21784: PUSH
21785: LD_INT 0
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 1
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 0
21804: PUSH
21805: LD_INT 1
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 1
21814: NEG
21815: PUSH
21816: LD_INT 0
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 1
21825: NEG
21826: PUSH
21827: LD_INT 1
21829: NEG
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 1
21837: NEG
21838: PUSH
21839: LD_INT 2
21841: NEG
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 1
21849: PUSH
21850: LD_INT 2
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21868: LD_ADDR_VAR 0 40
21872: PUSH
21873: LD_INT 0
21875: PUSH
21876: LD_INT 0
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 0
21885: PUSH
21886: LD_INT 1
21888: NEG
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 1
21896: PUSH
21897: LD_INT 0
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 1
21906: PUSH
21907: LD_INT 1
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 0
21916: PUSH
21917: LD_INT 1
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 1
21926: NEG
21927: PUSH
21928: LD_INT 0
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 1
21937: NEG
21938: PUSH
21939: LD_INT 1
21941: NEG
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: LD_INT 1
21952: NEG
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 1
21960: NEG
21961: PUSH
21962: LD_INT 1
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21980: LD_ADDR_VAR 0 41
21984: PUSH
21985: LD_INT 0
21987: PUSH
21988: LD_INT 0
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 0
21997: PUSH
21998: LD_INT 1
22000: NEG
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 1
22008: PUSH
22009: LD_INT 0
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 1
22018: PUSH
22019: LD_INT 1
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 0
22028: PUSH
22029: LD_INT 1
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 1
22038: NEG
22039: PUSH
22040: LD_INT 0
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 1
22049: NEG
22050: PUSH
22051: LD_INT 1
22053: NEG
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 1
22061: NEG
22062: PUSH
22063: LD_INT 2
22065: NEG
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 1
22073: PUSH
22074: LD_INT 1
22076: NEG
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 2
22084: PUSH
22085: LD_INT 0
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 2
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 2
22104: PUSH
22105: LD_INT 2
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: LD_INT 2
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 1
22124: NEG
22125: PUSH
22126: LD_INT 1
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 2
22135: NEG
22136: PUSH
22137: LD_INT 0
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 2
22146: NEG
22147: PUSH
22148: LD_INT 1
22150: NEG
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 2
22158: NEG
22159: PUSH
22160: LD_INT 2
22162: NEG
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 2
22170: NEG
22171: PUSH
22172: LD_INT 3
22174: NEG
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 2
22182: PUSH
22183: LD_INT 1
22185: NEG
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 3
22193: PUSH
22194: LD_INT 0
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 3
22203: PUSH
22204: LD_INT 1
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 3
22213: PUSH
22214: LD_INT 2
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 3
22223: PUSH
22224: LD_INT 3
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 2
22233: PUSH
22234: LD_INT 3
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 2
22243: NEG
22244: PUSH
22245: LD_INT 1
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 3
22254: NEG
22255: PUSH
22256: LD_INT 0
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 3
22265: NEG
22266: PUSH
22267: LD_INT 1
22269: NEG
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 3
22277: NEG
22278: PUSH
22279: LD_INT 2
22281: NEG
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 3
22289: NEG
22290: PUSH
22291: LD_INT 3
22293: NEG
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22330: LD_ADDR_VAR 0 42
22334: PUSH
22335: LD_INT 0
22337: PUSH
22338: LD_INT 0
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 0
22347: PUSH
22348: LD_INT 1
22350: NEG
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 1
22358: PUSH
22359: LD_INT 0
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 1
22368: PUSH
22369: LD_INT 1
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 0
22378: PUSH
22379: LD_INT 1
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 1
22388: NEG
22389: PUSH
22390: LD_INT 0
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 1
22399: NEG
22400: PUSH
22401: LD_INT 1
22403: NEG
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 1
22411: NEG
22412: PUSH
22413: LD_INT 2
22415: NEG
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 0
22423: PUSH
22424: LD_INT 2
22426: NEG
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 1
22434: PUSH
22435: LD_INT 1
22437: NEG
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 2
22445: PUSH
22446: LD_INT 1
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 2
22455: PUSH
22456: LD_INT 2
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 1
22465: PUSH
22466: LD_INT 2
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 0
22475: PUSH
22476: LD_INT 2
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 1
22485: NEG
22486: PUSH
22487: LD_INT 1
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 2
22496: NEG
22497: PUSH
22498: LD_INT 1
22500: NEG
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 2
22508: NEG
22509: PUSH
22510: LD_INT 2
22512: NEG
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 2
22520: NEG
22521: PUSH
22522: LD_INT 3
22524: NEG
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 1
22532: NEG
22533: PUSH
22534: LD_INT 3
22536: NEG
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 0
22544: PUSH
22545: LD_INT 3
22547: NEG
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 1
22555: PUSH
22556: LD_INT 2
22558: NEG
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 3
22566: PUSH
22567: LD_INT 2
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 3
22576: PUSH
22577: LD_INT 3
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 2
22586: PUSH
22587: LD_INT 3
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 1
22596: PUSH
22597: LD_INT 3
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 0
22606: PUSH
22607: LD_INT 3
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 1
22616: NEG
22617: PUSH
22618: LD_INT 2
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 3
22627: NEG
22628: PUSH
22629: LD_INT 2
22631: NEG
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 3
22639: NEG
22640: PUSH
22641: LD_INT 3
22643: NEG
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22680: LD_ADDR_VAR 0 43
22684: PUSH
22685: LD_INT 0
22687: PUSH
22688: LD_INT 0
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 0
22697: PUSH
22698: LD_INT 1
22700: NEG
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 1
22708: PUSH
22709: LD_INT 0
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 1
22718: PUSH
22719: LD_INT 1
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 0
22728: PUSH
22729: LD_INT 1
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 1
22738: NEG
22739: PUSH
22740: LD_INT 0
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 1
22749: NEG
22750: PUSH
22751: LD_INT 1
22753: NEG
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 1
22761: NEG
22762: PUSH
22763: LD_INT 2
22765: NEG
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 0
22773: PUSH
22774: LD_INT 2
22776: NEG
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 1
22784: PUSH
22785: LD_INT 1
22787: NEG
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 2
22795: PUSH
22796: LD_INT 0
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 2
22805: PUSH
22806: LD_INT 1
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 1
22815: PUSH
22816: LD_INT 2
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 0
22825: PUSH
22826: LD_INT 2
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 1
22835: NEG
22836: PUSH
22837: LD_INT 1
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 2
22846: NEG
22847: PUSH
22848: LD_INT 0
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 2
22857: NEG
22858: PUSH
22859: LD_INT 1
22861: NEG
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 1
22869: NEG
22870: PUSH
22871: LD_INT 3
22873: NEG
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 0
22881: PUSH
22882: LD_INT 3
22884: NEG
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 1
22892: PUSH
22893: LD_INT 2
22895: NEG
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 2
22903: PUSH
22904: LD_INT 1
22906: NEG
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 3
22914: PUSH
22915: LD_INT 0
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 3
22924: PUSH
22925: LD_INT 1
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 1
22934: PUSH
22935: LD_INT 3
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 0
22944: PUSH
22945: LD_INT 3
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 1
22954: NEG
22955: PUSH
22956: LD_INT 2
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 2
22965: NEG
22966: PUSH
22967: LD_INT 1
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 3
22976: NEG
22977: PUSH
22978: LD_INT 0
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 3
22987: NEG
22988: PUSH
22989: LD_INT 1
22991: NEG
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23028: LD_ADDR_VAR 0 44
23032: PUSH
23033: LD_INT 0
23035: PUSH
23036: LD_INT 0
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 0
23045: PUSH
23046: LD_INT 1
23048: NEG
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 1
23056: PUSH
23057: LD_INT 0
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 1
23066: PUSH
23067: LD_INT 1
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 0
23076: PUSH
23077: LD_INT 1
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 1
23086: NEG
23087: PUSH
23088: LD_INT 0
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 1
23097: NEG
23098: PUSH
23099: LD_INT 1
23101: NEG
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 1
23109: NEG
23110: PUSH
23111: LD_INT 2
23113: NEG
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 1
23121: PUSH
23122: LD_INT 1
23124: NEG
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 2
23132: PUSH
23133: LD_INT 0
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 2
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 2
23152: PUSH
23153: LD_INT 2
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 1
23162: PUSH
23163: LD_INT 2
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 1
23172: NEG
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 2
23183: NEG
23184: PUSH
23185: LD_INT 0
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 2
23194: NEG
23195: PUSH
23196: LD_INT 1
23198: NEG
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 2
23206: NEG
23207: PUSH
23208: LD_INT 2
23210: NEG
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 2
23218: NEG
23219: PUSH
23220: LD_INT 3
23222: NEG
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 2
23230: PUSH
23231: LD_INT 1
23233: NEG
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 3
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 3
23251: PUSH
23252: LD_INT 1
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 3
23261: PUSH
23262: LD_INT 2
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 3
23271: PUSH
23272: LD_INT 3
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 2
23281: PUSH
23282: LD_INT 3
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 2
23291: NEG
23292: PUSH
23293: LD_INT 1
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 3
23302: NEG
23303: PUSH
23304: LD_INT 0
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 3
23313: NEG
23314: PUSH
23315: LD_INT 1
23317: NEG
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 3
23325: NEG
23326: PUSH
23327: LD_INT 2
23329: NEG
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 3
23337: NEG
23338: PUSH
23339: LD_INT 3
23341: NEG
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23378: LD_ADDR_VAR 0 45
23382: PUSH
23383: LD_INT 0
23385: PUSH
23386: LD_INT 0
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 0
23395: PUSH
23396: LD_INT 1
23398: NEG
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: LD_INT 0
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: LD_INT 1
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 0
23426: PUSH
23427: LD_INT 1
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 1
23436: NEG
23437: PUSH
23438: LD_INT 0
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 1
23447: NEG
23448: PUSH
23449: LD_INT 1
23451: NEG
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 1
23459: NEG
23460: PUSH
23461: LD_INT 2
23463: NEG
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 0
23471: PUSH
23472: LD_INT 2
23474: NEG
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 1
23482: PUSH
23483: LD_INT 1
23485: NEG
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 2
23493: PUSH
23494: LD_INT 1
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 2
23503: PUSH
23504: LD_INT 2
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: LD_INT 2
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 0
23523: PUSH
23524: LD_INT 2
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 1
23533: NEG
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 2
23544: NEG
23545: PUSH
23546: LD_INT 1
23548: NEG
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 2
23556: NEG
23557: PUSH
23558: LD_INT 2
23560: NEG
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 2
23568: NEG
23569: PUSH
23570: LD_INT 3
23572: NEG
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 1
23580: NEG
23581: PUSH
23582: LD_INT 3
23584: NEG
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: LD_INT 3
23595: NEG
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 1
23603: PUSH
23604: LD_INT 2
23606: NEG
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 3
23614: PUSH
23615: LD_INT 2
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 3
23624: PUSH
23625: LD_INT 3
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 2
23634: PUSH
23635: LD_INT 3
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 1
23644: PUSH
23645: LD_INT 3
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 0
23654: PUSH
23655: LD_INT 3
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 1
23664: NEG
23665: PUSH
23666: LD_INT 2
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 3
23675: NEG
23676: PUSH
23677: LD_INT 2
23679: NEG
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 3
23687: NEG
23688: PUSH
23689: LD_INT 3
23691: NEG
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23728: LD_ADDR_VAR 0 46
23732: PUSH
23733: LD_INT 0
23735: PUSH
23736: LD_INT 0
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 0
23745: PUSH
23746: LD_INT 1
23748: NEG
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 1
23756: PUSH
23757: LD_INT 0
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 1
23766: PUSH
23767: LD_INT 1
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PUSH
23774: LD_INT 0
23776: PUSH
23777: LD_INT 1
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 1
23786: NEG
23787: PUSH
23788: LD_INT 0
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 1
23797: NEG
23798: PUSH
23799: LD_INT 1
23801: NEG
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 1
23809: NEG
23810: PUSH
23811: LD_INT 2
23813: NEG
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 0
23821: PUSH
23822: LD_INT 2
23824: NEG
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 1
23832: PUSH
23833: LD_INT 1
23835: NEG
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 2
23843: PUSH
23844: LD_INT 0
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 2
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 1
23863: PUSH
23864: LD_INT 2
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: LD_INT 2
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 1
23883: NEG
23884: PUSH
23885: LD_INT 1
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 2
23894: NEG
23895: PUSH
23896: LD_INT 0
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 2
23905: NEG
23906: PUSH
23907: LD_INT 1
23909: NEG
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 1
23917: NEG
23918: PUSH
23919: LD_INT 3
23921: NEG
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 0
23929: PUSH
23930: LD_INT 3
23932: NEG
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 1
23940: PUSH
23941: LD_INT 2
23943: NEG
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 2
23951: PUSH
23952: LD_INT 1
23954: NEG
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 3
23962: PUSH
23963: LD_INT 0
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 3
23972: PUSH
23973: LD_INT 1
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 1
23982: PUSH
23983: LD_INT 3
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: LD_INT 3
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 1
24002: NEG
24003: PUSH
24004: LD_INT 2
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 2
24013: NEG
24014: PUSH
24015: LD_INT 1
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 3
24024: NEG
24025: PUSH
24026: LD_INT 0
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 3
24035: NEG
24036: PUSH
24037: LD_INT 1
24039: NEG
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24076: LD_ADDR_VAR 0 47
24080: PUSH
24081: LD_INT 0
24083: PUSH
24084: LD_INT 0
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 0
24093: PUSH
24094: LD_INT 1
24096: NEG
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 1
24114: PUSH
24115: LD_INT 1
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 0
24124: PUSH
24125: LD_INT 1
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 1
24134: NEG
24135: PUSH
24136: LD_INT 0
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 1
24145: NEG
24146: PUSH
24147: LD_INT 1
24149: NEG
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 1
24157: NEG
24158: PUSH
24159: LD_INT 2
24161: NEG
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 0
24169: PUSH
24170: LD_INT 2
24172: NEG
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 1
24180: PUSH
24181: LD_INT 1
24183: NEG
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 2
24191: NEG
24192: PUSH
24193: LD_INT 1
24195: NEG
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 2
24203: NEG
24204: PUSH
24205: LD_INT 2
24207: NEG
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24227: LD_ADDR_VAR 0 48
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: LD_INT 0
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 0
24244: PUSH
24245: LD_INT 1
24247: NEG
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: LD_INT 0
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 1
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 0
24275: PUSH
24276: LD_INT 1
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 1
24285: NEG
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 1
24296: NEG
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: NEG
24309: PUSH
24310: LD_INT 2
24312: NEG
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 0
24320: PUSH
24321: LD_INT 2
24323: NEG
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 1
24331: PUSH
24332: LD_INT 1
24334: NEG
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 2
24342: PUSH
24343: LD_INT 0
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: LD_INT 1
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24374: LD_ADDR_VAR 0 49
24378: PUSH
24379: LD_INT 0
24381: PUSH
24382: LD_INT 0
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 0
24391: PUSH
24392: LD_INT 1
24394: NEG
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 1
24402: PUSH
24403: LD_INT 0
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: LD_INT 1
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 0
24422: PUSH
24423: LD_INT 1
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 1
24432: NEG
24433: PUSH
24434: LD_INT 0
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 1
24443: NEG
24444: PUSH
24445: LD_INT 1
24447: NEG
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 1
24455: PUSH
24456: LD_INT 1
24458: NEG
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 2
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 2
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 2
24486: PUSH
24487: LD_INT 2
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: LD_INT 2
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24518: LD_ADDR_VAR 0 50
24522: PUSH
24523: LD_INT 0
24525: PUSH
24526: LD_INT 0
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 0
24535: PUSH
24536: LD_INT 1
24538: NEG
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: LD_INT 0
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 1
24556: PUSH
24557: LD_INT 1
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 0
24566: PUSH
24567: LD_INT 1
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 1
24576: NEG
24577: PUSH
24578: LD_INT 0
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 1
24587: NEG
24588: PUSH
24589: LD_INT 1
24591: NEG
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: LD_INT 1
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 2
24609: PUSH
24610: LD_INT 2
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 1
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 0
24629: PUSH
24630: LD_INT 2
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 1
24639: NEG
24640: PUSH
24641: LD_INT 1
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24662: LD_ADDR_VAR 0 51
24666: PUSH
24667: LD_INT 0
24669: PUSH
24670: LD_INT 0
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 0
24679: PUSH
24680: LD_INT 1
24682: NEG
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 1
24690: PUSH
24691: LD_INT 0
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 1
24700: PUSH
24701: LD_INT 1
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 0
24710: PUSH
24711: LD_INT 1
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 1
24720: NEG
24721: PUSH
24722: LD_INT 0
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 1
24731: NEG
24732: PUSH
24733: LD_INT 1
24735: NEG
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 1
24743: PUSH
24744: LD_INT 2
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 0
24753: PUSH
24754: LD_INT 2
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 1
24763: NEG
24764: PUSH
24765: LD_INT 1
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 2
24774: NEG
24775: PUSH
24776: LD_INT 0
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 2
24785: NEG
24786: PUSH
24787: LD_INT 1
24789: NEG
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24809: LD_ADDR_VAR 0 52
24813: PUSH
24814: LD_INT 0
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 0
24826: PUSH
24827: LD_INT 1
24829: NEG
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: LD_INT 0
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: LD_INT 1
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 0
24857: PUSH
24858: LD_INT 1
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 1
24867: NEG
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: NEG
24879: PUSH
24880: LD_INT 1
24882: NEG
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: NEG
24891: PUSH
24892: LD_INT 2
24894: NEG
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 1
24902: NEG
24903: PUSH
24904: LD_INT 1
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 2
24913: NEG
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 2
24924: NEG
24925: PUSH
24926: LD_INT 1
24928: NEG
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 2
24936: NEG
24937: PUSH
24938: LD_INT 2
24940: NEG
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24960: LD_ADDR_VAR 0 53
24964: PUSH
24965: LD_INT 0
24967: PUSH
24968: LD_INT 0
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 0
24977: PUSH
24978: LD_INT 1
24980: NEG
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 1
24988: PUSH
24989: LD_INT 0
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 1
24998: PUSH
24999: LD_INT 1
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 0
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 1
25018: NEG
25019: PUSH
25020: LD_INT 0
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 1
25029: NEG
25030: PUSH
25031: LD_INT 1
25033: NEG
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 1
25041: NEG
25042: PUSH
25043: LD_INT 2
25045: NEG
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 0
25053: PUSH
25054: LD_INT 2
25056: NEG
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: PUSH
25065: LD_INT 1
25067: NEG
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 2
25075: PUSH
25076: LD_INT 0
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 2
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 2
25095: PUSH
25096: LD_INT 2
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: LD_INT 2
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 1
25125: NEG
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 2
25136: NEG
25137: PUSH
25138: LD_INT 0
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 2
25147: NEG
25148: PUSH
25149: LD_INT 1
25151: NEG
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 2
25159: NEG
25160: PUSH
25161: LD_INT 2
25163: NEG
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25190: LD_ADDR_VAR 0 54
25194: PUSH
25195: LD_INT 0
25197: PUSH
25198: LD_INT 0
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: LD_INT 1
25210: NEG
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: LD_INT 0
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 1
25228: PUSH
25229: LD_INT 1
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 0
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 1
25248: NEG
25249: PUSH
25250: LD_INT 0
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 1
25259: NEG
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 1
25271: NEG
25272: PUSH
25273: LD_INT 2
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 0
25283: PUSH
25284: LD_INT 2
25286: NEG
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: LD_INT 1
25297: NEG
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 2
25305: PUSH
25306: LD_INT 0
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 2
25315: PUSH
25316: LD_INT 1
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 2
25325: PUSH
25326: LD_INT 2
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: LD_INT 2
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: LD_INT 2
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 1
25355: NEG
25356: PUSH
25357: LD_INT 1
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 2
25366: NEG
25367: PUSH
25368: LD_INT 0
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 2
25377: NEG
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 2
25389: NEG
25390: PUSH
25391: LD_INT 2
25393: NEG
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25420: LD_ADDR_VAR 0 55
25424: PUSH
25425: LD_INT 0
25427: PUSH
25428: LD_INT 0
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: LD_INT 1
25440: NEG
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: LD_INT 0
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 1
25458: PUSH
25459: LD_INT 1
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 0
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 1
25478: NEG
25479: PUSH
25480: LD_INT 0
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 1
25489: NEG
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: LD_INT 2
25505: NEG
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 0
25513: PUSH
25514: LD_INT 2
25516: NEG
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 1
25524: PUSH
25525: LD_INT 1
25527: NEG
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 2
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 2
25545: PUSH
25546: LD_INT 1
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 2
25555: PUSH
25556: LD_INT 2
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 1
25565: PUSH
25566: LD_INT 2
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 0
25575: PUSH
25576: LD_INT 2
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 1
25585: NEG
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 2
25596: NEG
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 2
25607: NEG
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 2
25619: NEG
25620: PUSH
25621: LD_INT 2
25623: NEG
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25650: LD_ADDR_VAR 0 56
25654: PUSH
25655: LD_INT 0
25657: PUSH
25658: LD_INT 0
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: LD_INT 1
25670: NEG
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 1
25678: PUSH
25679: LD_INT 0
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 1
25688: PUSH
25689: LD_INT 1
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 0
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 1
25708: NEG
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 1
25719: NEG
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: LD_INT 2
25735: NEG
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 0
25743: PUSH
25744: LD_INT 2
25746: NEG
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 2
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 2
25775: PUSH
25776: LD_INT 1
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 2
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 1
25795: PUSH
25796: LD_INT 2
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 0
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: LD_INT 1
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 2
25826: NEG
25827: PUSH
25828: LD_INT 0
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 2
25837: NEG
25838: PUSH
25839: LD_INT 1
25841: NEG
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 2
25849: NEG
25850: PUSH
25851: LD_INT 2
25853: NEG
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25880: LD_ADDR_VAR 0 57
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: LD_INT 0
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: LD_INT 1
25900: NEG
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 1
25908: PUSH
25909: LD_INT 0
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: LD_INT 1
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 0
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: NEG
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 1
25949: NEG
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 1
25961: NEG
25962: PUSH
25963: LD_INT 2
25965: NEG
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 0
25973: PUSH
25974: LD_INT 2
25976: NEG
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 1
25984: PUSH
25985: LD_INT 1
25987: NEG
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 2
25995: PUSH
25996: LD_INT 0
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 2
26005: PUSH
26006: LD_INT 1
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 2
26015: PUSH
26016: LD_INT 2
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 1
26025: PUSH
26026: LD_INT 2
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 0
26035: PUSH
26036: LD_INT 2
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 1
26045: NEG
26046: PUSH
26047: LD_INT 1
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 2
26056: NEG
26057: PUSH
26058: LD_INT 0
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 2
26067: NEG
26068: PUSH
26069: LD_INT 1
26071: NEG
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 2
26079: NEG
26080: PUSH
26081: LD_INT 2
26083: NEG
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26110: LD_ADDR_VAR 0 58
26114: PUSH
26115: LD_INT 0
26117: PUSH
26118: LD_INT 0
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 0
26127: PUSH
26128: LD_INT 1
26130: NEG
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: LD_INT 0
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: LD_INT 1
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 0
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 1
26168: NEG
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 1
26179: NEG
26180: PUSH
26181: LD_INT 1
26183: NEG
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: LD_INT 2
26195: NEG
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: LD_INT 2
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 1
26214: PUSH
26215: LD_INT 1
26217: NEG
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 2
26225: PUSH
26226: LD_INT 0
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: LD_INT 1
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 2
26245: PUSH
26246: LD_INT 2
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 0
26265: PUSH
26266: LD_INT 2
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: LD_INT 1
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 2
26286: NEG
26287: PUSH
26288: LD_INT 0
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 2
26297: NEG
26298: PUSH
26299: LD_INT 1
26301: NEG
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 2
26309: NEG
26310: PUSH
26311: LD_INT 2
26313: NEG
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26340: LD_ADDR_VAR 0 59
26344: PUSH
26345: LD_INT 0
26347: PUSH
26348: LD_INT 0
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 0
26357: PUSH
26358: LD_INT 1
26360: NEG
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 1
26368: PUSH
26369: LD_INT 0
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: LD_INT 1
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 0
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: NEG
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 1
26409: NEG
26410: PUSH
26411: LD_INT 1
26413: NEG
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26428: LD_ADDR_VAR 0 60
26432: PUSH
26433: LD_INT 0
26435: PUSH
26436: LD_INT 0
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: LD_INT 1
26448: NEG
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 1
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: LD_INT 1
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 0
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 1
26486: NEG
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 1
26497: NEG
26498: PUSH
26499: LD_INT 1
26501: NEG
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26516: LD_ADDR_VAR 0 61
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 0
26533: PUSH
26534: LD_INT 1
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 1
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: LD_INT 1
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: LD_INT 1
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 1
26574: NEG
26575: PUSH
26576: LD_INT 0
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 1
26585: NEG
26586: PUSH
26587: LD_INT 1
26589: NEG
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26604: LD_ADDR_VAR 0 62
26608: PUSH
26609: LD_INT 0
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 0
26621: PUSH
26622: LD_INT 1
26624: NEG
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 1
26632: PUSH
26633: LD_INT 0
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: LD_INT 1
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 0
26652: PUSH
26653: LD_INT 1
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 1
26662: NEG
26663: PUSH
26664: LD_INT 0
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 1
26673: NEG
26674: PUSH
26675: LD_INT 1
26677: NEG
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26692: LD_ADDR_VAR 0 63
26696: PUSH
26697: LD_INT 0
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 0
26709: PUSH
26710: LD_INT 1
26712: NEG
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 1
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 1
26730: PUSH
26731: LD_INT 1
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 0
26740: PUSH
26741: LD_INT 1
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 1
26750: NEG
26751: PUSH
26752: LD_INT 0
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 1
26761: NEG
26762: PUSH
26763: LD_INT 1
26765: NEG
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26780: LD_ADDR_VAR 0 64
26784: PUSH
26785: LD_INT 0
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 0
26797: PUSH
26798: LD_INT 1
26800: NEG
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 1
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: LD_INT 1
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 1
26838: NEG
26839: PUSH
26840: LD_INT 0
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 1
26849: NEG
26850: PUSH
26851: LD_INT 1
26853: NEG
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: ST_TO_ADDR
// end ; 1 :
26868: GO 32765
26870: LD_INT 1
26872: DOUBLE
26873: EQUAL
26874: IFTRUE 26878
26876: GO 29501
26878: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26879: LD_ADDR_VAR 0 11
26883: PUSH
26884: LD_INT 1
26886: NEG
26887: PUSH
26888: LD_INT 3
26890: NEG
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: LD_INT 3
26901: NEG
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 1
26909: PUSH
26910: LD_INT 2
26912: NEG
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: LIST
26922: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26923: LD_ADDR_VAR 0 12
26927: PUSH
26928: LD_INT 2
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 3
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 3
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: LIST
26963: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26964: LD_ADDR_VAR 0 13
26968: PUSH
26969: LD_INT 3
26971: PUSH
26972: LD_INT 2
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 3
26981: PUSH
26982: LD_INT 3
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 2
26991: PUSH
26992: LD_INT 3
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: LIST
27003: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27004: LD_ADDR_VAR 0 14
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: LD_INT 3
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: LD_INT 3
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 1
27031: NEG
27032: PUSH
27033: LD_INT 2
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: LIST
27044: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27045: LD_ADDR_VAR 0 15
27049: PUSH
27050: LD_INT 2
27052: NEG
27053: PUSH
27054: LD_INT 1
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 3
27063: NEG
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 3
27074: NEG
27075: PUSH
27076: LD_INT 1
27078: NEG
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: LIST
27088: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27089: LD_ADDR_VAR 0 16
27093: PUSH
27094: LD_INT 2
27096: NEG
27097: PUSH
27098: LD_INT 3
27100: NEG
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 3
27108: NEG
27109: PUSH
27110: LD_INT 2
27112: NEG
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 3
27120: NEG
27121: PUSH
27122: LD_INT 3
27124: NEG
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: LIST
27134: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27135: LD_ADDR_VAR 0 17
27139: PUSH
27140: LD_INT 1
27142: NEG
27143: PUSH
27144: LD_INT 3
27146: NEG
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 0
27154: PUSH
27155: LD_INT 3
27157: NEG
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: LD_INT 2
27168: NEG
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: LIST
27178: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27179: LD_ADDR_VAR 0 18
27183: PUSH
27184: LD_INT 2
27186: PUSH
27187: LD_INT 1
27189: NEG
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 3
27197: PUSH
27198: LD_INT 0
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 3
27207: PUSH
27208: LD_INT 1
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: LIST
27219: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27220: LD_ADDR_VAR 0 19
27224: PUSH
27225: LD_INT 3
27227: PUSH
27228: LD_INT 2
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 3
27237: PUSH
27238: LD_INT 3
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 2
27247: PUSH
27248: LD_INT 3
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: LIST
27259: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27260: LD_ADDR_VAR 0 20
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: LD_INT 3
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 0
27277: PUSH
27278: LD_INT 3
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 1
27287: NEG
27288: PUSH
27289: LD_INT 2
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: LIST
27300: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27301: LD_ADDR_VAR 0 21
27305: PUSH
27306: LD_INT 2
27308: NEG
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 3
27319: NEG
27320: PUSH
27321: LD_INT 0
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 3
27330: NEG
27331: PUSH
27332: LD_INT 1
27334: NEG
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: LIST
27344: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27345: LD_ADDR_VAR 0 22
27349: PUSH
27350: LD_INT 2
27352: NEG
27353: PUSH
27354: LD_INT 3
27356: NEG
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 3
27364: NEG
27365: PUSH
27366: LD_INT 2
27368: NEG
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 3
27376: NEG
27377: PUSH
27378: LD_INT 3
27380: NEG
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: LIST
27390: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27391: LD_ADDR_VAR 0 23
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: LD_INT 3
27401: NEG
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 1
27409: NEG
27410: PUSH
27411: LD_INT 4
27413: NEG
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 1
27421: PUSH
27422: LD_INT 3
27424: NEG
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: LIST
27434: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27435: LD_ADDR_VAR 0 24
27439: PUSH
27440: LD_INT 3
27442: PUSH
27443: LD_INT 0
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 3
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 4
27463: PUSH
27464: LD_INT 1
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: LIST
27475: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27476: LD_ADDR_VAR 0 25
27480: PUSH
27481: LD_INT 3
27483: PUSH
27484: LD_INT 3
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 4
27493: PUSH
27494: LD_INT 3
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 3
27503: PUSH
27504: LD_INT 4
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: LIST
27515: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27516: LD_ADDR_VAR 0 26
27520: PUSH
27521: LD_INT 0
27523: PUSH
27524: LD_INT 3
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 1
27533: PUSH
27534: LD_INT 4
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 1
27543: NEG
27544: PUSH
27545: LD_INT 3
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: LIST
27556: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27557: LD_ADDR_VAR 0 27
27561: PUSH
27562: LD_INT 3
27564: NEG
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 3
27575: NEG
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 4
27586: NEG
27587: PUSH
27588: LD_INT 1
27590: NEG
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: LIST
27600: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27601: LD_ADDR_VAR 0 28
27605: PUSH
27606: LD_INT 3
27608: NEG
27609: PUSH
27610: LD_INT 3
27612: NEG
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 3
27620: NEG
27621: PUSH
27622: LD_INT 4
27624: NEG
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 4
27632: NEG
27633: PUSH
27634: LD_INT 3
27636: NEG
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: LIST
27646: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27647: LD_ADDR_VAR 0 29
27651: PUSH
27652: LD_INT 1
27654: NEG
27655: PUSH
27656: LD_INT 3
27658: NEG
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 0
27666: PUSH
27667: LD_INT 3
27669: NEG
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 1
27677: PUSH
27678: LD_INT 2
27680: NEG
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 1
27688: NEG
27689: PUSH
27690: LD_INT 4
27692: NEG
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: LD_INT 4
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: LD_INT 3
27714: NEG
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 1
27722: NEG
27723: PUSH
27724: LD_INT 5
27726: NEG
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 0
27734: PUSH
27735: LD_INT 5
27737: NEG
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: LD_INT 4
27748: NEG
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 1
27756: NEG
27757: PUSH
27758: LD_INT 6
27760: NEG
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 0
27768: PUSH
27769: LD_INT 6
27771: NEG
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: LD_INT 5
27782: NEG
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27802: LD_ADDR_VAR 0 30
27806: PUSH
27807: LD_INT 2
27809: PUSH
27810: LD_INT 1
27812: NEG
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 3
27820: PUSH
27821: LD_INT 0
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 3
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 3
27840: PUSH
27841: LD_INT 1
27843: NEG
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 4
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 4
27861: PUSH
27862: LD_INT 1
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 4
27871: PUSH
27872: LD_INT 1
27874: NEG
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 5
27882: PUSH
27883: LD_INT 0
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 5
27892: PUSH
27893: LD_INT 1
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 5
27902: PUSH
27903: LD_INT 1
27905: NEG
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 6
27913: PUSH
27914: LD_INT 0
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 6
27923: PUSH
27924: LD_INT 1
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27945: LD_ADDR_VAR 0 31
27949: PUSH
27950: LD_INT 3
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 3
27962: PUSH
27963: LD_INT 3
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 2
27972: PUSH
27973: LD_INT 3
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 4
27982: PUSH
27983: LD_INT 3
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 4
27992: PUSH
27993: LD_INT 4
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 3
28002: PUSH
28003: LD_INT 4
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 5
28012: PUSH
28013: LD_INT 4
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 5
28022: PUSH
28023: LD_INT 5
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 4
28032: PUSH
28033: LD_INT 5
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 6
28042: PUSH
28043: LD_INT 5
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 6
28052: PUSH
28053: LD_INT 6
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 5
28062: PUSH
28063: LD_INT 6
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28084: LD_ADDR_VAR 0 32
28088: PUSH
28089: LD_INT 1
28091: PUSH
28092: LD_INT 3
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: LD_INT 3
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 1
28111: NEG
28112: PUSH
28113: LD_INT 2
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 1
28122: PUSH
28123: LD_INT 4
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: LD_INT 4
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 1
28142: NEG
28143: PUSH
28144: LD_INT 3
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 1
28153: PUSH
28154: LD_INT 5
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 0
28163: PUSH
28164: LD_INT 5
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 1
28173: NEG
28174: PUSH
28175: LD_INT 4
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 1
28184: PUSH
28185: LD_INT 6
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: LD_INT 6
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 1
28204: NEG
28205: PUSH
28206: LD_INT 5
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28227: LD_ADDR_VAR 0 33
28231: PUSH
28232: LD_INT 2
28234: NEG
28235: PUSH
28236: LD_INT 1
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 3
28245: NEG
28246: PUSH
28247: LD_INT 0
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 3
28256: NEG
28257: PUSH
28258: LD_INT 1
28260: NEG
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 3
28268: NEG
28269: PUSH
28270: LD_INT 1
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 4
28279: NEG
28280: PUSH
28281: LD_INT 0
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 4
28290: NEG
28291: PUSH
28292: LD_INT 1
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 4
28302: NEG
28303: PUSH
28304: LD_INT 1
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 5
28313: NEG
28314: PUSH
28315: LD_INT 0
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 5
28324: NEG
28325: PUSH
28326: LD_INT 1
28328: NEG
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 5
28336: NEG
28337: PUSH
28338: LD_INT 1
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 6
28347: NEG
28348: PUSH
28349: LD_INT 0
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 6
28358: NEG
28359: PUSH
28360: LD_INT 1
28362: NEG
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28382: LD_ADDR_VAR 0 34
28386: PUSH
28387: LD_INT 2
28389: NEG
28390: PUSH
28391: LD_INT 3
28393: NEG
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 3
28401: NEG
28402: PUSH
28403: LD_INT 2
28405: NEG
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 3
28413: NEG
28414: PUSH
28415: LD_INT 3
28417: NEG
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 3
28425: NEG
28426: PUSH
28427: LD_INT 4
28429: NEG
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 4
28437: NEG
28438: PUSH
28439: LD_INT 3
28441: NEG
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 4
28449: NEG
28450: PUSH
28451: LD_INT 4
28453: NEG
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 4
28461: NEG
28462: PUSH
28463: LD_INT 5
28465: NEG
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 5
28473: NEG
28474: PUSH
28475: LD_INT 4
28477: NEG
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 5
28485: NEG
28486: PUSH
28487: LD_INT 5
28489: NEG
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 5
28497: NEG
28498: PUSH
28499: LD_INT 6
28501: NEG
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 6
28509: NEG
28510: PUSH
28511: LD_INT 5
28513: NEG
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 6
28521: NEG
28522: PUSH
28523: LD_INT 6
28525: NEG
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28545: LD_ADDR_VAR 0 41
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: LD_INT 2
28555: NEG
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: NEG
28564: PUSH
28565: LD_INT 3
28567: NEG
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: LD_INT 2
28578: NEG
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: LIST
28588: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28589: LD_ADDR_VAR 0 42
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: LD_INT 0
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 2
28606: PUSH
28607: LD_INT 1
28609: NEG
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 3
28617: PUSH
28618: LD_INT 1
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: LIST
28629: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28630: LD_ADDR_VAR 0 43
28634: PUSH
28635: LD_INT 2
28637: PUSH
28638: LD_INT 2
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 3
28647: PUSH
28648: LD_INT 2
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 2
28657: PUSH
28658: LD_INT 3
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: LIST
28669: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28670: LD_ADDR_VAR 0 44
28674: PUSH
28675: LD_INT 0
28677: PUSH
28678: LD_INT 2
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: LD_INT 3
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 1
28697: NEG
28698: PUSH
28699: LD_INT 2
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: LIST
28710: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28711: LD_ADDR_VAR 0 45
28715: PUSH
28716: LD_INT 2
28718: NEG
28719: PUSH
28720: LD_INT 0
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 2
28729: NEG
28730: PUSH
28731: LD_INT 1
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 3
28740: NEG
28741: PUSH
28742: LD_INT 1
28744: NEG
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: LIST
28754: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28755: LD_ADDR_VAR 0 46
28759: PUSH
28760: LD_INT 2
28762: NEG
28763: PUSH
28764: LD_INT 2
28766: NEG
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 2
28774: NEG
28775: PUSH
28776: LD_INT 3
28778: NEG
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 3
28786: NEG
28787: PUSH
28788: LD_INT 2
28790: NEG
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: LIST
28800: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28801: LD_ADDR_VAR 0 47
28805: PUSH
28806: LD_INT 2
28808: NEG
28809: PUSH
28810: LD_INT 3
28812: NEG
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 1
28820: NEG
28821: PUSH
28822: LD_INT 3
28824: NEG
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28834: LD_ADDR_VAR 0 48
28838: PUSH
28839: LD_INT 1
28841: PUSH
28842: LD_INT 2
28844: NEG
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 2
28852: PUSH
28853: LD_INT 1
28855: NEG
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28865: LD_ADDR_VAR 0 49
28869: PUSH
28870: LD_INT 3
28872: PUSH
28873: LD_INT 1
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 3
28882: PUSH
28883: LD_INT 2
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28894: LD_ADDR_VAR 0 50
28898: PUSH
28899: LD_INT 2
28901: PUSH
28902: LD_INT 3
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 1
28911: PUSH
28912: LD_INT 3
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28923: LD_ADDR_VAR 0 51
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: LD_INT 2
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 2
28941: NEG
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28954: LD_ADDR_VAR 0 52
28958: PUSH
28959: LD_INT 3
28961: NEG
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 3
28973: NEG
28974: PUSH
28975: LD_INT 2
28977: NEG
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28987: LD_ADDR_VAR 0 53
28991: PUSH
28992: LD_INT 1
28994: NEG
28995: PUSH
28996: LD_INT 3
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 0
29006: PUSH
29007: LD_INT 3
29009: NEG
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 1
29017: PUSH
29018: LD_INT 2
29020: NEG
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: LIST
29030: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29031: LD_ADDR_VAR 0 54
29035: PUSH
29036: LD_INT 2
29038: PUSH
29039: LD_INT 1
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 3
29049: PUSH
29050: LD_INT 0
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 3
29059: PUSH
29060: LD_INT 1
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: LIST
29071: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29072: LD_ADDR_VAR 0 55
29076: PUSH
29077: LD_INT 3
29079: PUSH
29080: LD_INT 2
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 3
29089: PUSH
29090: LD_INT 3
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 2
29099: PUSH
29100: LD_INT 3
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: LIST
29111: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29112: LD_ADDR_VAR 0 56
29116: PUSH
29117: LD_INT 1
29119: PUSH
29120: LD_INT 3
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 0
29129: PUSH
29130: LD_INT 3
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 1
29139: NEG
29140: PUSH
29141: LD_INT 2
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: LIST
29152: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29153: LD_ADDR_VAR 0 57
29157: PUSH
29158: LD_INT 2
29160: NEG
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 3
29171: NEG
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 3
29182: NEG
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: LIST
29196: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29197: LD_ADDR_VAR 0 58
29201: PUSH
29202: LD_INT 2
29204: NEG
29205: PUSH
29206: LD_INT 3
29208: NEG
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 3
29216: NEG
29217: PUSH
29218: LD_INT 2
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 3
29228: NEG
29229: PUSH
29230: LD_INT 3
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: LIST
29242: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29243: LD_ADDR_VAR 0 59
29247: PUSH
29248: LD_INT 1
29250: NEG
29251: PUSH
29252: LD_INT 2
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 0
29262: PUSH
29263: LD_INT 2
29265: NEG
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: LD_INT 1
29276: NEG
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: LIST
29286: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29287: LD_ADDR_VAR 0 60
29291: PUSH
29292: LD_INT 1
29294: PUSH
29295: LD_INT 1
29297: NEG
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 2
29305: PUSH
29306: LD_INT 0
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 2
29315: PUSH
29316: LD_INT 1
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: LIST
29327: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29328: LD_ADDR_VAR 0 61
29332: PUSH
29333: LD_INT 2
29335: PUSH
29336: LD_INT 1
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 2
29345: PUSH
29346: LD_INT 2
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: LD_INT 2
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: LIST
29367: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29368: LD_ADDR_VAR 0 62
29372: PUSH
29373: LD_INT 1
29375: PUSH
29376: LD_INT 2
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 0
29385: PUSH
29386: LD_INT 2
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 1
29395: NEG
29396: PUSH
29397: LD_INT 1
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: LIST
29408: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29409: LD_ADDR_VAR 0 63
29413: PUSH
29414: LD_INT 1
29416: NEG
29417: PUSH
29418: LD_INT 1
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 2
29427: NEG
29428: PUSH
29429: LD_INT 0
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 2
29438: NEG
29439: PUSH
29440: LD_INT 1
29442: NEG
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: LIST
29452: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29453: LD_ADDR_VAR 0 64
29457: PUSH
29458: LD_INT 1
29460: NEG
29461: PUSH
29462: LD_INT 2
29464: NEG
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 2
29472: NEG
29473: PUSH
29474: LD_INT 1
29476: NEG
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 2
29484: NEG
29485: PUSH
29486: LD_INT 2
29488: NEG
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: LIST
29498: ST_TO_ADDR
// end ; 2 :
29499: GO 32765
29501: LD_INT 2
29503: DOUBLE
29504: EQUAL
29505: IFTRUE 29509
29507: GO 32764
29509: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29510: LD_ADDR_VAR 0 29
29514: PUSH
29515: LD_INT 4
29517: PUSH
29518: LD_INT 0
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 4
29527: PUSH
29528: LD_INT 1
29530: NEG
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 5
29538: PUSH
29539: LD_INT 0
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 5
29548: PUSH
29549: LD_INT 1
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 4
29558: PUSH
29559: LD_INT 1
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 3
29568: PUSH
29569: LD_INT 0
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 3
29578: PUSH
29579: LD_INT 1
29581: NEG
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 3
29589: PUSH
29590: LD_INT 2
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 5
29600: PUSH
29601: LD_INT 2
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 3
29610: PUSH
29611: LD_INT 3
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 3
29620: PUSH
29621: LD_INT 2
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 4
29630: PUSH
29631: LD_INT 3
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 4
29640: PUSH
29641: LD_INT 4
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 3
29650: PUSH
29651: LD_INT 4
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 2
29660: PUSH
29661: LD_INT 3
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 2
29670: PUSH
29671: LD_INT 2
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 4
29680: PUSH
29681: LD_INT 2
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 2
29690: PUSH
29691: LD_INT 4
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 0
29700: PUSH
29701: LD_INT 4
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 0
29710: PUSH
29711: LD_INT 3
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: LD_INT 4
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 1
29730: PUSH
29731: LD_INT 5
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 0
29740: PUSH
29741: LD_INT 5
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 1
29750: NEG
29751: PUSH
29752: LD_INT 4
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 1
29761: NEG
29762: PUSH
29763: LD_INT 3
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 2
29772: PUSH
29773: LD_INT 5
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 2
29782: NEG
29783: PUSH
29784: LD_INT 3
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 3
29793: NEG
29794: PUSH
29795: LD_INT 0
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 3
29804: NEG
29805: PUSH
29806: LD_INT 1
29808: NEG
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 2
29816: NEG
29817: PUSH
29818: LD_INT 0
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 2
29827: NEG
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 3
29838: NEG
29839: PUSH
29840: LD_INT 1
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 4
29849: NEG
29850: PUSH
29851: LD_INT 0
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 4
29860: NEG
29861: PUSH
29862: LD_INT 1
29864: NEG
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 4
29872: NEG
29873: PUSH
29874: LD_INT 2
29876: NEG
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 2
29884: NEG
29885: PUSH
29886: LD_INT 2
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 4
29895: NEG
29896: PUSH
29897: LD_INT 4
29899: NEG
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 4
29907: NEG
29908: PUSH
29909: LD_INT 5
29911: NEG
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 3
29919: NEG
29920: PUSH
29921: LD_INT 4
29923: NEG
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 3
29931: NEG
29932: PUSH
29933: LD_INT 3
29935: NEG
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 4
29943: NEG
29944: PUSH
29945: LD_INT 3
29947: NEG
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 5
29955: NEG
29956: PUSH
29957: LD_INT 4
29959: NEG
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 5
29967: NEG
29968: PUSH
29969: LD_INT 5
29971: NEG
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 3
29979: NEG
29980: PUSH
29981: LD_INT 5
29983: NEG
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 5
29991: NEG
29992: PUSH
29993: LD_INT 3
29995: NEG
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30048: LD_ADDR_VAR 0 30
30052: PUSH
30053: LD_INT 4
30055: PUSH
30056: LD_INT 4
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 4
30065: PUSH
30066: LD_INT 3
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 5
30075: PUSH
30076: LD_INT 4
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 5
30085: PUSH
30086: LD_INT 5
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 4
30095: PUSH
30096: LD_INT 5
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 3
30105: PUSH
30106: LD_INT 4
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 3
30115: PUSH
30116: LD_INT 3
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 5
30125: PUSH
30126: LD_INT 3
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 3
30135: PUSH
30136: LD_INT 5
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 0
30145: PUSH
30146: LD_INT 3
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 0
30155: PUSH
30156: LD_INT 2
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 1
30165: PUSH
30166: LD_INT 3
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 1
30175: PUSH
30176: LD_INT 4
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 0
30185: PUSH
30186: LD_INT 4
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 1
30195: NEG
30196: PUSH
30197: LD_INT 3
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 1
30206: NEG
30207: PUSH
30208: LD_INT 2
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 2
30217: PUSH
30218: LD_INT 4
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 2
30227: NEG
30228: PUSH
30229: LD_INT 2
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 4
30238: NEG
30239: PUSH
30240: LD_INT 0
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 4
30249: NEG
30250: PUSH
30251: LD_INT 1
30253: NEG
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 3
30261: NEG
30262: PUSH
30263: LD_INT 0
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 3
30272: NEG
30273: PUSH
30274: LD_INT 1
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 4
30283: NEG
30284: PUSH
30285: LD_INT 1
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 5
30294: NEG
30295: PUSH
30296: LD_INT 0
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 5
30305: NEG
30306: PUSH
30307: LD_INT 1
30309: NEG
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 5
30317: NEG
30318: PUSH
30319: LD_INT 2
30321: NEG
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 3
30329: NEG
30330: PUSH
30331: LD_INT 2
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 3
30340: NEG
30341: PUSH
30342: LD_INT 3
30344: NEG
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 3
30352: NEG
30353: PUSH
30354: LD_INT 4
30356: NEG
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 2
30364: NEG
30365: PUSH
30366: LD_INT 3
30368: NEG
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 2
30376: NEG
30377: PUSH
30378: LD_INT 2
30380: NEG
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 3
30388: NEG
30389: PUSH
30390: LD_INT 2
30392: NEG
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 4
30400: NEG
30401: PUSH
30402: LD_INT 3
30404: NEG
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 4
30412: NEG
30413: PUSH
30414: LD_INT 4
30416: NEG
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 2
30424: NEG
30425: PUSH
30426: LD_INT 4
30428: NEG
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 4
30436: NEG
30437: PUSH
30438: LD_INT 2
30440: NEG
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 0
30448: PUSH
30449: LD_INT 4
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: LD_INT 5
30462: NEG
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 1
30470: PUSH
30471: LD_INT 4
30473: NEG
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: LD_INT 3
30484: NEG
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 0
30492: PUSH
30493: LD_INT 3
30495: NEG
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 1
30503: NEG
30504: PUSH
30505: LD_INT 4
30507: NEG
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 1
30515: NEG
30516: PUSH
30517: LD_INT 5
30519: NEG
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 2
30527: PUSH
30528: LD_INT 3
30530: NEG
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 2
30538: NEG
30539: PUSH
30540: LD_INT 5
30542: NEG
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30595: LD_ADDR_VAR 0 31
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: LD_INT 4
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: LD_INT 3
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: PUSH
30623: LD_INT 4
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 1
30632: PUSH
30633: LD_INT 5
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: LD_INT 5
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: PUSH
30654: LD_INT 4
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 1
30663: NEG
30664: PUSH
30665: LD_INT 3
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 2
30674: PUSH
30675: LD_INT 5
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 2
30684: NEG
30685: PUSH
30686: LD_INT 3
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 3
30695: NEG
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 3
30706: NEG
30707: PUSH
30708: LD_INT 1
30710: NEG
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 2
30718: NEG
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 2
30729: NEG
30730: PUSH
30731: LD_INT 1
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 3
30740: NEG
30741: PUSH
30742: LD_INT 1
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 4
30751: NEG
30752: PUSH
30753: LD_INT 0
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 4
30762: NEG
30763: PUSH
30764: LD_INT 1
30766: NEG
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 4
30774: NEG
30775: PUSH
30776: LD_INT 2
30778: NEG
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 2
30786: NEG
30787: PUSH
30788: LD_INT 2
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 4
30797: NEG
30798: PUSH
30799: LD_INT 4
30801: NEG
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 4
30809: NEG
30810: PUSH
30811: LD_INT 5
30813: NEG
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 3
30821: NEG
30822: PUSH
30823: LD_INT 4
30825: NEG
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 3
30833: NEG
30834: PUSH
30835: LD_INT 3
30837: NEG
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 4
30845: NEG
30846: PUSH
30847: LD_INT 3
30849: NEG
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 5
30857: NEG
30858: PUSH
30859: LD_INT 4
30861: NEG
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 5
30869: NEG
30870: PUSH
30871: LD_INT 5
30873: NEG
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 3
30881: NEG
30882: PUSH
30883: LD_INT 5
30885: NEG
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 5
30893: NEG
30894: PUSH
30895: LD_INT 3
30897: NEG
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: LD_INT 3
30908: NEG
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 0
30916: PUSH
30917: LD_INT 4
30919: NEG
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 1
30927: PUSH
30928: LD_INT 3
30930: NEG
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 1
30938: PUSH
30939: LD_INT 2
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: LD_INT 2
30952: NEG
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 1
30960: NEG
30961: PUSH
30962: LD_INT 3
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 1
30972: NEG
30973: PUSH
30974: LD_INT 4
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 2
30984: PUSH
30985: LD_INT 2
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 2
30995: NEG
30996: PUSH
30997: LD_INT 4
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 4
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 4
31017: PUSH
31018: LD_INT 1
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 5
31028: PUSH
31029: LD_INT 0
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 5
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 4
31048: PUSH
31049: LD_INT 1
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 3
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 3
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 3
31079: PUSH
31080: LD_INT 2
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 5
31090: PUSH
31091: LD_INT 2
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31145: LD_ADDR_VAR 0 32
31149: PUSH
31150: LD_INT 4
31152: NEG
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 4
31163: NEG
31164: PUSH
31165: LD_INT 1
31167: NEG
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 3
31175: NEG
31176: PUSH
31177: LD_INT 0
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 3
31186: NEG
31187: PUSH
31188: LD_INT 1
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 4
31197: NEG
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 5
31208: NEG
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 5
31219: NEG
31220: PUSH
31221: LD_INT 1
31223: NEG
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 5
31231: NEG
31232: PUSH
31233: LD_INT 2
31235: NEG
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 3
31243: NEG
31244: PUSH
31245: LD_INT 2
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 3
31254: NEG
31255: PUSH
31256: LD_INT 3
31258: NEG
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 3
31266: NEG
31267: PUSH
31268: LD_INT 4
31270: NEG
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 2
31278: NEG
31279: PUSH
31280: LD_INT 3
31282: NEG
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 2
31290: NEG
31291: PUSH
31292: LD_INT 2
31294: NEG
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 3
31302: NEG
31303: PUSH
31304: LD_INT 2
31306: NEG
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 4
31314: NEG
31315: PUSH
31316: LD_INT 3
31318: NEG
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 4
31326: NEG
31327: PUSH
31328: LD_INT 4
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 2
31338: NEG
31339: PUSH
31340: LD_INT 4
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 4
31350: NEG
31351: PUSH
31352: LD_INT 2
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 0
31362: PUSH
31363: LD_INT 4
31365: NEG
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 0
31373: PUSH
31374: LD_INT 5
31376: NEG
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 1
31384: PUSH
31385: LD_INT 4
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 1
31395: PUSH
31396: LD_INT 3
31398: NEG
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: LD_INT 3
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: NEG
31418: PUSH
31419: LD_INT 4
31421: NEG
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 1
31429: NEG
31430: PUSH
31431: LD_INT 5
31433: NEG
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 2
31441: PUSH
31442: LD_INT 3
31444: NEG
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 2
31452: NEG
31453: PUSH
31454: LD_INT 5
31456: NEG
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 3
31464: PUSH
31465: LD_INT 0
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 3
31474: PUSH
31475: LD_INT 1
31477: NEG
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 4
31485: PUSH
31486: LD_INT 0
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 4
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 3
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 2
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 2
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 2
31536: PUSH
31537: LD_INT 2
31539: NEG
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 4
31547: PUSH
31548: LD_INT 2
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 4
31557: PUSH
31558: LD_INT 4
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 4
31567: PUSH
31568: LD_INT 3
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 5
31577: PUSH
31578: LD_INT 4
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 5
31587: PUSH
31588: LD_INT 5
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 4
31597: PUSH
31598: LD_INT 5
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 3
31607: PUSH
31608: LD_INT 4
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 3
31617: PUSH
31618: LD_INT 3
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 5
31627: PUSH
31628: LD_INT 3
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 3
31637: PUSH
31638: LD_INT 5
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31692: LD_ADDR_VAR 0 33
31696: PUSH
31697: LD_INT 4
31699: NEG
31700: PUSH
31701: LD_INT 4
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 4
31711: NEG
31712: PUSH
31713: LD_INT 5
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 3
31723: NEG
31724: PUSH
31725: LD_INT 4
31727: NEG
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 3
31735: NEG
31736: PUSH
31737: LD_INT 3
31739: NEG
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 4
31747: NEG
31748: PUSH
31749: LD_INT 3
31751: NEG
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 5
31759: NEG
31760: PUSH
31761: LD_INT 4
31763: NEG
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 5
31771: NEG
31772: PUSH
31773: LD_INT 5
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 3
31783: NEG
31784: PUSH
31785: LD_INT 5
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 5
31795: NEG
31796: PUSH
31797: LD_INT 3
31799: NEG
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 0
31807: PUSH
31808: LD_INT 3
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: LD_INT 4
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: PUSH
31830: LD_INT 3
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: LD_INT 2
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: LD_INT 2
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: NEG
31863: PUSH
31864: LD_INT 3
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 1
31874: NEG
31875: PUSH
31876: LD_INT 4
31878: NEG
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: LD_INT 2
31889: NEG
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 2
31897: NEG
31898: PUSH
31899: LD_INT 4
31901: NEG
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 4
31909: PUSH
31910: LD_INT 0
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 4
31919: PUSH
31920: LD_INT 1
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 5
31930: PUSH
31931: LD_INT 0
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 5
31940: PUSH
31941: LD_INT 1
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 4
31950: PUSH
31951: LD_INT 1
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 3
31960: PUSH
31961: LD_INT 0
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 3
31970: PUSH
31971: LD_INT 1
31973: NEG
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 3
31981: PUSH
31982: LD_INT 2
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 5
31992: PUSH
31993: LD_INT 2
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 3
32002: PUSH
32003: LD_INT 3
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 3
32012: PUSH
32013: LD_INT 2
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 4
32022: PUSH
32023: LD_INT 3
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 4
32032: PUSH
32033: LD_INT 4
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 3
32042: PUSH
32043: LD_INT 4
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 2
32052: PUSH
32053: LD_INT 3
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: LD_INT 2
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 4
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: LD_INT 4
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: LD_INT 4
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 0
32102: PUSH
32103: LD_INT 3
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 1
32112: PUSH
32113: LD_INT 4
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 1
32122: PUSH
32123: LD_INT 5
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 0
32132: PUSH
32133: LD_INT 5
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 1
32142: NEG
32143: PUSH
32144: LD_INT 4
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 1
32153: NEG
32154: PUSH
32155: LD_INT 3
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 2
32164: PUSH
32165: LD_INT 5
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 2
32174: NEG
32175: PUSH
32176: LD_INT 3
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32230: LD_ADDR_VAR 0 34
32234: PUSH
32235: LD_INT 0
32237: PUSH
32238: LD_INT 4
32240: NEG
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: LD_INT 5
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: LD_INT 4
32262: NEG
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 1
32270: PUSH
32271: LD_INT 3
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 0
32281: PUSH
32282: LD_INT 3
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 1
32292: NEG
32293: PUSH
32294: LD_INT 4
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 1
32304: NEG
32305: PUSH
32306: LD_INT 5
32308: NEG
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 2
32316: PUSH
32317: LD_INT 3
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: NEG
32328: PUSH
32329: LD_INT 5
32331: NEG
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 3
32339: PUSH
32340: LD_INT 0
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 3
32349: PUSH
32350: LD_INT 1
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 4
32360: PUSH
32361: LD_INT 0
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 4
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 3
32380: PUSH
32381: LD_INT 1
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 2
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 2
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 2
32411: PUSH
32412: LD_INT 2
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 4
32422: PUSH
32423: LD_INT 2
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 4
32432: PUSH
32433: LD_INT 4
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 4
32442: PUSH
32443: LD_INT 3
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 5
32452: PUSH
32453: LD_INT 4
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 5
32462: PUSH
32463: LD_INT 5
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 4
32472: PUSH
32473: LD_INT 5
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 3
32482: PUSH
32483: LD_INT 4
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 3
32492: PUSH
32493: LD_INT 3
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 5
32502: PUSH
32503: LD_INT 3
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 3
32512: PUSH
32513: LD_INT 5
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: LD_INT 3
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 0
32532: PUSH
32533: LD_INT 2
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 1
32542: PUSH
32543: LD_INT 3
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: LD_INT 4
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: LD_INT 4
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: LD_INT 3
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 1
32583: NEG
32584: PUSH
32585: LD_INT 2
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 2
32594: PUSH
32595: LD_INT 4
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 2
32604: NEG
32605: PUSH
32606: LD_INT 2
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 4
32615: NEG
32616: PUSH
32617: LD_INT 0
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 4
32626: NEG
32627: PUSH
32628: LD_INT 1
32630: NEG
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 3
32638: NEG
32639: PUSH
32640: LD_INT 0
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 3
32649: NEG
32650: PUSH
32651: LD_INT 1
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 4
32660: NEG
32661: PUSH
32662: LD_INT 1
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 5
32671: NEG
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 5
32682: NEG
32683: PUSH
32684: LD_INT 1
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 5
32694: NEG
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 3
32706: NEG
32707: PUSH
32708: LD_INT 2
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: ST_TO_ADDR
// end ; end ;
32762: GO 32765
32764: POP
// case btype of b_depot , b_warehouse :
32765: LD_VAR 0 1
32769: PUSH
32770: LD_INT 0
32772: DOUBLE
32773: EQUAL
32774: IFTRUE 32784
32776: LD_INT 1
32778: DOUBLE
32779: EQUAL
32780: IFTRUE 32784
32782: GO 32985
32784: POP
// case nation of nation_american :
32785: LD_VAR 0 5
32789: PUSH
32790: LD_INT 1
32792: DOUBLE
32793: EQUAL
32794: IFTRUE 32798
32796: GO 32854
32798: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32799: LD_ADDR_VAR 0 9
32803: PUSH
32804: LD_VAR 0 11
32808: PUSH
32809: LD_VAR 0 12
32813: PUSH
32814: LD_VAR 0 13
32818: PUSH
32819: LD_VAR 0 14
32823: PUSH
32824: LD_VAR 0 15
32828: PUSH
32829: LD_VAR 0 16
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: PUSH
32842: LD_VAR 0 4
32846: PUSH
32847: LD_INT 1
32849: PLUS
32850: ARRAY
32851: ST_TO_ADDR
32852: GO 32983
32854: LD_INT 2
32856: DOUBLE
32857: EQUAL
32858: IFTRUE 32862
32860: GO 32918
32862: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32863: LD_ADDR_VAR 0 9
32867: PUSH
32868: LD_VAR 0 17
32872: PUSH
32873: LD_VAR 0 18
32877: PUSH
32878: LD_VAR 0 19
32882: PUSH
32883: LD_VAR 0 20
32887: PUSH
32888: LD_VAR 0 21
32892: PUSH
32893: LD_VAR 0 22
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: PUSH
32906: LD_VAR 0 4
32910: PUSH
32911: LD_INT 1
32913: PLUS
32914: ARRAY
32915: ST_TO_ADDR
32916: GO 32983
32918: LD_INT 3
32920: DOUBLE
32921: EQUAL
32922: IFTRUE 32926
32924: GO 32982
32926: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32927: LD_ADDR_VAR 0 9
32931: PUSH
32932: LD_VAR 0 23
32936: PUSH
32937: LD_VAR 0 24
32941: PUSH
32942: LD_VAR 0 25
32946: PUSH
32947: LD_VAR 0 26
32951: PUSH
32952: LD_VAR 0 27
32956: PUSH
32957: LD_VAR 0 28
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: PUSH
32970: LD_VAR 0 4
32974: PUSH
32975: LD_INT 1
32977: PLUS
32978: ARRAY
32979: ST_TO_ADDR
32980: GO 32983
32982: POP
32983: GO 33538
32985: LD_INT 2
32987: DOUBLE
32988: EQUAL
32989: IFTRUE 32999
32991: LD_INT 3
32993: DOUBLE
32994: EQUAL
32995: IFTRUE 32999
32997: GO 33055
32999: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33000: LD_ADDR_VAR 0 9
33004: PUSH
33005: LD_VAR 0 29
33009: PUSH
33010: LD_VAR 0 30
33014: PUSH
33015: LD_VAR 0 31
33019: PUSH
33020: LD_VAR 0 32
33024: PUSH
33025: LD_VAR 0 33
33029: PUSH
33030: LD_VAR 0 34
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: PUSH
33043: LD_VAR 0 4
33047: PUSH
33048: LD_INT 1
33050: PLUS
33051: ARRAY
33052: ST_TO_ADDR
33053: GO 33538
33055: LD_INT 16
33057: DOUBLE
33058: EQUAL
33059: IFTRUE 33117
33061: LD_INT 17
33063: DOUBLE
33064: EQUAL
33065: IFTRUE 33117
33067: LD_INT 18
33069: DOUBLE
33070: EQUAL
33071: IFTRUE 33117
33073: LD_INT 19
33075: DOUBLE
33076: EQUAL
33077: IFTRUE 33117
33079: LD_INT 22
33081: DOUBLE
33082: EQUAL
33083: IFTRUE 33117
33085: LD_INT 20
33087: DOUBLE
33088: EQUAL
33089: IFTRUE 33117
33091: LD_INT 21
33093: DOUBLE
33094: EQUAL
33095: IFTRUE 33117
33097: LD_INT 23
33099: DOUBLE
33100: EQUAL
33101: IFTRUE 33117
33103: LD_INT 24
33105: DOUBLE
33106: EQUAL
33107: IFTRUE 33117
33109: LD_INT 25
33111: DOUBLE
33112: EQUAL
33113: IFTRUE 33117
33115: GO 33173
33117: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33118: LD_ADDR_VAR 0 9
33122: PUSH
33123: LD_VAR 0 35
33127: PUSH
33128: LD_VAR 0 36
33132: PUSH
33133: LD_VAR 0 37
33137: PUSH
33138: LD_VAR 0 38
33142: PUSH
33143: LD_VAR 0 39
33147: PUSH
33148: LD_VAR 0 40
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: PUSH
33161: LD_VAR 0 4
33165: PUSH
33166: LD_INT 1
33168: PLUS
33169: ARRAY
33170: ST_TO_ADDR
33171: GO 33538
33173: LD_INT 6
33175: DOUBLE
33176: EQUAL
33177: IFTRUE 33229
33179: LD_INT 7
33181: DOUBLE
33182: EQUAL
33183: IFTRUE 33229
33185: LD_INT 8
33187: DOUBLE
33188: EQUAL
33189: IFTRUE 33229
33191: LD_INT 13
33193: DOUBLE
33194: EQUAL
33195: IFTRUE 33229
33197: LD_INT 12
33199: DOUBLE
33200: EQUAL
33201: IFTRUE 33229
33203: LD_INT 15
33205: DOUBLE
33206: EQUAL
33207: IFTRUE 33229
33209: LD_INT 11
33211: DOUBLE
33212: EQUAL
33213: IFTRUE 33229
33215: LD_INT 14
33217: DOUBLE
33218: EQUAL
33219: IFTRUE 33229
33221: LD_INT 10
33223: DOUBLE
33224: EQUAL
33225: IFTRUE 33229
33227: GO 33285
33229: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33230: LD_ADDR_VAR 0 9
33234: PUSH
33235: LD_VAR 0 41
33239: PUSH
33240: LD_VAR 0 42
33244: PUSH
33245: LD_VAR 0 43
33249: PUSH
33250: LD_VAR 0 44
33254: PUSH
33255: LD_VAR 0 45
33259: PUSH
33260: LD_VAR 0 46
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: PUSH
33273: LD_VAR 0 4
33277: PUSH
33278: LD_INT 1
33280: PLUS
33281: ARRAY
33282: ST_TO_ADDR
33283: GO 33538
33285: LD_INT 36
33287: DOUBLE
33288: EQUAL
33289: IFTRUE 33293
33291: GO 33349
33293: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33294: LD_ADDR_VAR 0 9
33298: PUSH
33299: LD_VAR 0 47
33303: PUSH
33304: LD_VAR 0 48
33308: PUSH
33309: LD_VAR 0 49
33313: PUSH
33314: LD_VAR 0 50
33318: PUSH
33319: LD_VAR 0 51
33323: PUSH
33324: LD_VAR 0 52
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: PUSH
33337: LD_VAR 0 4
33341: PUSH
33342: LD_INT 1
33344: PLUS
33345: ARRAY
33346: ST_TO_ADDR
33347: GO 33538
33349: LD_INT 4
33351: DOUBLE
33352: EQUAL
33353: IFTRUE 33375
33355: LD_INT 5
33357: DOUBLE
33358: EQUAL
33359: IFTRUE 33375
33361: LD_INT 34
33363: DOUBLE
33364: EQUAL
33365: IFTRUE 33375
33367: LD_INT 37
33369: DOUBLE
33370: EQUAL
33371: IFTRUE 33375
33373: GO 33431
33375: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33376: LD_ADDR_VAR 0 9
33380: PUSH
33381: LD_VAR 0 53
33385: PUSH
33386: LD_VAR 0 54
33390: PUSH
33391: LD_VAR 0 55
33395: PUSH
33396: LD_VAR 0 56
33400: PUSH
33401: LD_VAR 0 57
33405: PUSH
33406: LD_VAR 0 58
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: PUSH
33419: LD_VAR 0 4
33423: PUSH
33424: LD_INT 1
33426: PLUS
33427: ARRAY
33428: ST_TO_ADDR
33429: GO 33538
33431: LD_INT 31
33433: DOUBLE
33434: EQUAL
33435: IFTRUE 33481
33437: LD_INT 32
33439: DOUBLE
33440: EQUAL
33441: IFTRUE 33481
33443: LD_INT 33
33445: DOUBLE
33446: EQUAL
33447: IFTRUE 33481
33449: LD_INT 27
33451: DOUBLE
33452: EQUAL
33453: IFTRUE 33481
33455: LD_INT 26
33457: DOUBLE
33458: EQUAL
33459: IFTRUE 33481
33461: LD_INT 28
33463: DOUBLE
33464: EQUAL
33465: IFTRUE 33481
33467: LD_INT 29
33469: DOUBLE
33470: EQUAL
33471: IFTRUE 33481
33473: LD_INT 30
33475: DOUBLE
33476: EQUAL
33477: IFTRUE 33481
33479: GO 33537
33481: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33482: LD_ADDR_VAR 0 9
33486: PUSH
33487: LD_VAR 0 59
33491: PUSH
33492: LD_VAR 0 60
33496: PUSH
33497: LD_VAR 0 61
33501: PUSH
33502: LD_VAR 0 62
33506: PUSH
33507: LD_VAR 0 63
33511: PUSH
33512: LD_VAR 0 64
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: PUSH
33525: LD_VAR 0 4
33529: PUSH
33530: LD_INT 1
33532: PLUS
33533: ARRAY
33534: ST_TO_ADDR
33535: GO 33538
33537: POP
// temp_list2 = [ ] ;
33538: LD_ADDR_VAR 0 10
33542: PUSH
33543: EMPTY
33544: ST_TO_ADDR
// for i in temp_list do
33545: LD_ADDR_VAR 0 8
33549: PUSH
33550: LD_VAR 0 9
33554: PUSH
33555: FOR_IN
33556: IFFALSE 33608
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33558: LD_ADDR_VAR 0 10
33562: PUSH
33563: LD_VAR 0 10
33567: PUSH
33568: LD_VAR 0 8
33572: PUSH
33573: LD_INT 1
33575: ARRAY
33576: PUSH
33577: LD_VAR 0 2
33581: PLUS
33582: PUSH
33583: LD_VAR 0 8
33587: PUSH
33588: LD_INT 2
33590: ARRAY
33591: PUSH
33592: LD_VAR 0 3
33596: PLUS
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: EMPTY
33603: LIST
33604: ADD
33605: ST_TO_ADDR
33606: GO 33555
33608: POP
33609: POP
// result = temp_list2 ;
33610: LD_ADDR_VAR 0 7
33614: PUSH
33615: LD_VAR 0 10
33619: ST_TO_ADDR
// end ;
33620: LD_VAR 0 7
33624: RET
// export function EnemyInRange ( unit , dist ) ; begin
33625: LD_INT 0
33627: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33628: LD_ADDR_VAR 0 3
33632: PUSH
33633: LD_VAR 0 1
33637: PPUSH
33638: CALL_OW 255
33642: PPUSH
33643: LD_VAR 0 1
33647: PPUSH
33648: CALL_OW 250
33652: PPUSH
33653: LD_VAR 0 1
33657: PPUSH
33658: CALL_OW 251
33662: PPUSH
33663: LD_VAR 0 2
33667: PPUSH
33668: CALL 6998 0 4
33672: PUSH
33673: LD_INT 4
33675: ARRAY
33676: ST_TO_ADDR
// end ;
33677: LD_VAR 0 3
33681: RET
// export function PlayerSeeMe ( unit ) ; begin
33682: LD_INT 0
33684: PPUSH
// result := See ( your_side , unit ) ;
33685: LD_ADDR_VAR 0 2
33689: PUSH
33690: LD_OWVAR 2
33694: PPUSH
33695: LD_VAR 0 1
33699: PPUSH
33700: CALL_OW 292
33704: ST_TO_ADDR
// end ;
33705: LD_VAR 0 2
33709: RET
// export function ReverseDir ( unit ) ; begin
33710: LD_INT 0
33712: PPUSH
// if not unit then
33713: LD_VAR 0 1
33717: NOT
33718: IFFALSE 33722
// exit ;
33720: GO 33745
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33722: LD_ADDR_VAR 0 2
33726: PUSH
33727: LD_VAR 0 1
33731: PPUSH
33732: CALL_OW 254
33736: PUSH
33737: LD_INT 3
33739: PLUS
33740: PUSH
33741: LD_INT 6
33743: MOD
33744: ST_TO_ADDR
// end ;
33745: LD_VAR 0 2
33749: RET
// export function ReverseArray ( array ) ; var i ; begin
33750: LD_INT 0
33752: PPUSH
33753: PPUSH
// if not array then
33754: LD_VAR 0 1
33758: NOT
33759: IFFALSE 33763
// exit ;
33761: GO 33818
// result := [ ] ;
33763: LD_ADDR_VAR 0 2
33767: PUSH
33768: EMPTY
33769: ST_TO_ADDR
// for i := array downto 1 do
33770: LD_ADDR_VAR 0 3
33774: PUSH
33775: DOUBLE
33776: LD_VAR 0 1
33780: INC
33781: ST_TO_ADDR
33782: LD_INT 1
33784: PUSH
33785: FOR_DOWNTO
33786: IFFALSE 33816
// result := Join ( result , array [ i ] ) ;
33788: LD_ADDR_VAR 0 2
33792: PUSH
33793: LD_VAR 0 2
33797: PPUSH
33798: LD_VAR 0 1
33802: PUSH
33803: LD_VAR 0 3
33807: ARRAY
33808: PPUSH
33809: CALL 38461 0 2
33813: ST_TO_ADDR
33814: GO 33785
33816: POP
33817: POP
// end ;
33818: LD_VAR 0 2
33822: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33823: LD_INT 0
33825: PPUSH
33826: PPUSH
33827: PPUSH
33828: PPUSH
33829: PPUSH
33830: PPUSH
// if not unit or not hexes then
33831: LD_VAR 0 1
33835: NOT
33836: PUSH
33837: LD_VAR 0 2
33841: NOT
33842: OR
33843: IFFALSE 33847
// exit ;
33845: GO 33970
// dist := 9999 ;
33847: LD_ADDR_VAR 0 5
33851: PUSH
33852: LD_INT 9999
33854: ST_TO_ADDR
// for i = 1 to hexes do
33855: LD_ADDR_VAR 0 4
33859: PUSH
33860: DOUBLE
33861: LD_INT 1
33863: DEC
33864: ST_TO_ADDR
33865: LD_VAR 0 2
33869: PUSH
33870: FOR_TO
33871: IFFALSE 33958
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33873: LD_ADDR_VAR 0 6
33877: PUSH
33878: LD_VAR 0 1
33882: PPUSH
33883: LD_VAR 0 2
33887: PUSH
33888: LD_VAR 0 4
33892: ARRAY
33893: PUSH
33894: LD_INT 1
33896: ARRAY
33897: PPUSH
33898: LD_VAR 0 2
33902: PUSH
33903: LD_VAR 0 4
33907: ARRAY
33908: PUSH
33909: LD_INT 2
33911: ARRAY
33912: PPUSH
33913: CALL_OW 297
33917: ST_TO_ADDR
// if tdist < dist then
33918: LD_VAR 0 6
33922: PUSH
33923: LD_VAR 0 5
33927: LESS
33928: IFFALSE 33956
// begin hex := hexes [ i ] ;
33930: LD_ADDR_VAR 0 8
33934: PUSH
33935: LD_VAR 0 2
33939: PUSH
33940: LD_VAR 0 4
33944: ARRAY
33945: ST_TO_ADDR
// dist := tdist ;
33946: LD_ADDR_VAR 0 5
33950: PUSH
33951: LD_VAR 0 6
33955: ST_TO_ADDR
// end ; end ;
33956: GO 33870
33958: POP
33959: POP
// result := hex ;
33960: LD_ADDR_VAR 0 3
33964: PUSH
33965: LD_VAR 0 8
33969: ST_TO_ADDR
// end ;
33970: LD_VAR 0 3
33974: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33975: LD_INT 0
33977: PPUSH
33978: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33979: LD_VAR 0 1
33983: NOT
33984: PUSH
33985: LD_VAR 0 1
33989: PUSH
33990: LD_INT 21
33992: PUSH
33993: LD_INT 2
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 23
34002: PUSH
34003: LD_INT 2
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PPUSH
34014: CALL_OW 69
34018: IN
34019: NOT
34020: OR
34021: IFFALSE 34025
// exit ;
34023: GO 34072
// for i = 1 to 3 do
34025: LD_ADDR_VAR 0 3
34029: PUSH
34030: DOUBLE
34031: LD_INT 1
34033: DEC
34034: ST_TO_ADDR
34035: LD_INT 3
34037: PUSH
34038: FOR_TO
34039: IFFALSE 34070
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34041: LD_VAR 0 1
34045: PPUSH
34046: CALL_OW 250
34050: PPUSH
34051: LD_VAR 0 1
34055: PPUSH
34056: CALL_OW 251
34060: PPUSH
34061: LD_INT 1
34063: PPUSH
34064: CALL_OW 453
34068: GO 34038
34070: POP
34071: POP
// end ;
34072: LD_VAR 0 2
34076: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34077: LD_INT 0
34079: PPUSH
34080: PPUSH
34081: PPUSH
34082: PPUSH
34083: PPUSH
34084: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34085: LD_VAR 0 1
34089: NOT
34090: PUSH
34091: LD_VAR 0 2
34095: NOT
34096: OR
34097: PUSH
34098: LD_VAR 0 1
34102: PPUSH
34103: CALL_OW 314
34107: OR
34108: IFFALSE 34112
// exit ;
34110: GO 34579
// if GetLives ( i ) < 250 then
34112: LD_VAR 0 4
34116: PPUSH
34117: CALL_OW 256
34121: PUSH
34122: LD_INT 250
34124: LESS
34125: IFFALSE 34138
// begin ComAutodestruct ( i ) ;
34127: LD_VAR 0 4
34131: PPUSH
34132: CALL 33975 0 1
// exit ;
34136: GO 34579
// end ; x := GetX ( enemy_unit ) ;
34138: LD_ADDR_VAR 0 7
34142: PUSH
34143: LD_VAR 0 2
34147: PPUSH
34148: CALL_OW 250
34152: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34153: LD_ADDR_VAR 0 8
34157: PUSH
34158: LD_VAR 0 2
34162: PPUSH
34163: CALL_OW 251
34167: ST_TO_ADDR
// if not x or not y then
34168: LD_VAR 0 7
34172: NOT
34173: PUSH
34174: LD_VAR 0 8
34178: NOT
34179: OR
34180: IFFALSE 34184
// exit ;
34182: GO 34579
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34184: LD_ADDR_VAR 0 6
34188: PUSH
34189: LD_VAR 0 7
34193: PPUSH
34194: LD_INT 0
34196: PPUSH
34197: LD_INT 4
34199: PPUSH
34200: CALL_OW 272
34204: PUSH
34205: LD_VAR 0 8
34209: PPUSH
34210: LD_INT 0
34212: PPUSH
34213: LD_INT 4
34215: PPUSH
34216: CALL_OW 273
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_VAR 0 7
34229: PPUSH
34230: LD_INT 1
34232: PPUSH
34233: LD_INT 4
34235: PPUSH
34236: CALL_OW 272
34240: PUSH
34241: LD_VAR 0 8
34245: PPUSH
34246: LD_INT 1
34248: PPUSH
34249: LD_INT 4
34251: PPUSH
34252: CALL_OW 273
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_VAR 0 7
34265: PPUSH
34266: LD_INT 2
34268: PPUSH
34269: LD_INT 4
34271: PPUSH
34272: CALL_OW 272
34276: PUSH
34277: LD_VAR 0 8
34281: PPUSH
34282: LD_INT 2
34284: PPUSH
34285: LD_INT 4
34287: PPUSH
34288: CALL_OW 273
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_VAR 0 7
34301: PPUSH
34302: LD_INT 3
34304: PPUSH
34305: LD_INT 4
34307: PPUSH
34308: CALL_OW 272
34312: PUSH
34313: LD_VAR 0 8
34317: PPUSH
34318: LD_INT 3
34320: PPUSH
34321: LD_INT 4
34323: PPUSH
34324: CALL_OW 273
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_VAR 0 7
34337: PPUSH
34338: LD_INT 4
34340: PPUSH
34341: LD_INT 4
34343: PPUSH
34344: CALL_OW 272
34348: PUSH
34349: LD_VAR 0 8
34353: PPUSH
34354: LD_INT 4
34356: PPUSH
34357: LD_INT 4
34359: PPUSH
34360: CALL_OW 273
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_VAR 0 7
34373: PPUSH
34374: LD_INT 5
34376: PPUSH
34377: LD_INT 4
34379: PPUSH
34380: CALL_OW 272
34384: PUSH
34385: LD_VAR 0 8
34389: PPUSH
34390: LD_INT 5
34392: PPUSH
34393: LD_INT 4
34395: PPUSH
34396: CALL_OW 273
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: ST_TO_ADDR
// for i = tmp downto 1 do
34413: LD_ADDR_VAR 0 4
34417: PUSH
34418: DOUBLE
34419: LD_VAR 0 6
34423: INC
34424: ST_TO_ADDR
34425: LD_INT 1
34427: PUSH
34428: FOR_DOWNTO
34429: IFFALSE 34530
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34431: LD_VAR 0 6
34435: PUSH
34436: LD_VAR 0 4
34440: ARRAY
34441: PUSH
34442: LD_INT 1
34444: ARRAY
34445: PPUSH
34446: LD_VAR 0 6
34450: PUSH
34451: LD_VAR 0 4
34455: ARRAY
34456: PUSH
34457: LD_INT 2
34459: ARRAY
34460: PPUSH
34461: CALL_OW 488
34465: NOT
34466: PUSH
34467: LD_VAR 0 6
34471: PUSH
34472: LD_VAR 0 4
34476: ARRAY
34477: PUSH
34478: LD_INT 1
34480: ARRAY
34481: PPUSH
34482: LD_VAR 0 6
34486: PUSH
34487: LD_VAR 0 4
34491: ARRAY
34492: PUSH
34493: LD_INT 2
34495: ARRAY
34496: PPUSH
34497: CALL_OW 428
34501: PUSH
34502: LD_INT 0
34504: NONEQUAL
34505: OR
34506: IFFALSE 34528
// tmp := Delete ( tmp , i ) ;
34508: LD_ADDR_VAR 0 6
34512: PUSH
34513: LD_VAR 0 6
34517: PPUSH
34518: LD_VAR 0 4
34522: PPUSH
34523: CALL_OW 3
34527: ST_TO_ADDR
34528: GO 34428
34530: POP
34531: POP
// j := GetClosestHex ( unit , tmp ) ;
34532: LD_ADDR_VAR 0 5
34536: PUSH
34537: LD_VAR 0 1
34541: PPUSH
34542: LD_VAR 0 6
34546: PPUSH
34547: CALL 33823 0 2
34551: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34552: LD_VAR 0 1
34556: PPUSH
34557: LD_VAR 0 5
34561: PUSH
34562: LD_INT 1
34564: ARRAY
34565: PPUSH
34566: LD_VAR 0 5
34570: PUSH
34571: LD_INT 2
34573: ARRAY
34574: PPUSH
34575: CALL_OW 111
// end ;
34579: LD_VAR 0 3
34583: RET
// export function PrepareApemanSoldier ( ) ; begin
34584: LD_INT 0
34586: PPUSH
// uc_nation := 0 ;
34587: LD_ADDR_OWVAR 21
34591: PUSH
34592: LD_INT 0
34594: ST_TO_ADDR
// hc_sex := sex_male ;
34595: LD_ADDR_OWVAR 27
34599: PUSH
34600: LD_INT 1
34602: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34603: LD_ADDR_OWVAR 28
34607: PUSH
34608: LD_INT 15
34610: ST_TO_ADDR
// hc_gallery :=  ;
34611: LD_ADDR_OWVAR 33
34615: PUSH
34616: LD_STRING 
34618: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34619: LD_ADDR_OWVAR 31
34623: PUSH
34624: LD_INT 0
34626: PPUSH
34627: LD_INT 3
34629: PPUSH
34630: CALL_OW 12
34634: PUSH
34635: LD_INT 0
34637: PPUSH
34638: LD_INT 3
34640: PPUSH
34641: CALL_OW 12
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: ST_TO_ADDR
// end ;
34658: LD_VAR 0 1
34662: RET
// export function PrepareApemanEngineer ( ) ; begin
34663: LD_INT 0
34665: PPUSH
// uc_nation := 0 ;
34666: LD_ADDR_OWVAR 21
34670: PUSH
34671: LD_INT 0
34673: ST_TO_ADDR
// hc_sex := sex_male ;
34674: LD_ADDR_OWVAR 27
34678: PUSH
34679: LD_INT 1
34681: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34682: LD_ADDR_OWVAR 28
34686: PUSH
34687: LD_INT 16
34689: ST_TO_ADDR
// hc_gallery :=  ;
34690: LD_ADDR_OWVAR 33
34694: PUSH
34695: LD_STRING 
34697: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34698: LD_ADDR_OWVAR 31
34702: PUSH
34703: LD_INT 0
34705: PPUSH
34706: LD_INT 3
34708: PPUSH
34709: CALL_OW 12
34713: PUSH
34714: LD_INT 0
34716: PPUSH
34717: LD_INT 3
34719: PPUSH
34720: CALL_OW 12
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: ST_TO_ADDR
// end ;
34737: LD_VAR 0 1
34741: RET
// export function PrepareApeman ( agressivity ) ; begin
34742: LD_INT 0
34744: PPUSH
// uc_side := 0 ;
34745: LD_ADDR_OWVAR 20
34749: PUSH
34750: LD_INT 0
34752: ST_TO_ADDR
// uc_nation := 0 ;
34753: LD_ADDR_OWVAR 21
34757: PUSH
34758: LD_INT 0
34760: ST_TO_ADDR
// hc_sex := sex_male ;
34761: LD_ADDR_OWVAR 27
34765: PUSH
34766: LD_INT 1
34768: ST_TO_ADDR
// hc_class := class_apeman ;
34769: LD_ADDR_OWVAR 28
34773: PUSH
34774: LD_INT 12
34776: ST_TO_ADDR
// hc_gallery :=  ;
34777: LD_ADDR_OWVAR 33
34781: PUSH
34782: LD_STRING 
34784: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34785: LD_ADDR_OWVAR 35
34789: PUSH
34790: LD_VAR 0 1
34794: NEG
34795: PPUSH
34796: LD_VAR 0 1
34800: PPUSH
34801: CALL_OW 12
34805: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34806: LD_ADDR_OWVAR 31
34810: PUSH
34811: LD_INT 0
34813: PPUSH
34814: LD_INT 3
34816: PPUSH
34817: CALL_OW 12
34821: PUSH
34822: LD_INT 0
34824: PPUSH
34825: LD_INT 3
34827: PPUSH
34828: CALL_OW 12
34832: PUSH
34833: LD_INT 0
34835: PUSH
34836: LD_INT 0
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: ST_TO_ADDR
// end ;
34845: LD_VAR 0 2
34849: RET
// export function PrepareTiger ( agressivity ) ; begin
34850: LD_INT 0
34852: PPUSH
// uc_side := 0 ;
34853: LD_ADDR_OWVAR 20
34857: PUSH
34858: LD_INT 0
34860: ST_TO_ADDR
// uc_nation := 0 ;
34861: LD_ADDR_OWVAR 21
34865: PUSH
34866: LD_INT 0
34868: ST_TO_ADDR
// hc_class := class_tiger ;
34869: LD_ADDR_OWVAR 28
34873: PUSH
34874: LD_INT 14
34876: ST_TO_ADDR
// hc_gallery :=  ;
34877: LD_ADDR_OWVAR 33
34881: PUSH
34882: LD_STRING 
34884: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34885: LD_ADDR_OWVAR 35
34889: PUSH
34890: LD_VAR 0 1
34894: NEG
34895: PPUSH
34896: LD_VAR 0 1
34900: PPUSH
34901: CALL_OW 12
34905: ST_TO_ADDR
// end ;
34906: LD_VAR 0 2
34910: RET
// export function PrepareEnchidna ( ) ; begin
34911: LD_INT 0
34913: PPUSH
// uc_side := 0 ;
34914: LD_ADDR_OWVAR 20
34918: PUSH
34919: LD_INT 0
34921: ST_TO_ADDR
// uc_nation := 0 ;
34922: LD_ADDR_OWVAR 21
34926: PUSH
34927: LD_INT 0
34929: ST_TO_ADDR
// hc_class := class_baggie ;
34930: LD_ADDR_OWVAR 28
34934: PUSH
34935: LD_INT 13
34937: ST_TO_ADDR
// hc_gallery :=  ;
34938: LD_ADDR_OWVAR 33
34942: PUSH
34943: LD_STRING 
34945: ST_TO_ADDR
// end ;
34946: LD_VAR 0 1
34950: RET
// export function PrepareFrog ( ) ; begin
34951: LD_INT 0
34953: PPUSH
// uc_side := 0 ;
34954: LD_ADDR_OWVAR 20
34958: PUSH
34959: LD_INT 0
34961: ST_TO_ADDR
// uc_nation := 0 ;
34962: LD_ADDR_OWVAR 21
34966: PUSH
34967: LD_INT 0
34969: ST_TO_ADDR
// hc_class := class_frog ;
34970: LD_ADDR_OWVAR 28
34974: PUSH
34975: LD_INT 19
34977: ST_TO_ADDR
// hc_gallery :=  ;
34978: LD_ADDR_OWVAR 33
34982: PUSH
34983: LD_STRING 
34985: ST_TO_ADDR
// end ;
34986: LD_VAR 0 1
34990: RET
// export function PrepareFish ( ) ; begin
34991: LD_INT 0
34993: PPUSH
// uc_side := 0 ;
34994: LD_ADDR_OWVAR 20
34998: PUSH
34999: LD_INT 0
35001: ST_TO_ADDR
// uc_nation := 0 ;
35002: LD_ADDR_OWVAR 21
35006: PUSH
35007: LD_INT 0
35009: ST_TO_ADDR
// hc_class := class_fish ;
35010: LD_ADDR_OWVAR 28
35014: PUSH
35015: LD_INT 20
35017: ST_TO_ADDR
// hc_gallery :=  ;
35018: LD_ADDR_OWVAR 33
35022: PUSH
35023: LD_STRING 
35025: ST_TO_ADDR
// end ;
35026: LD_VAR 0 1
35030: RET
// export function PrepareBird ( ) ; begin
35031: LD_INT 0
35033: PPUSH
// uc_side := 0 ;
35034: LD_ADDR_OWVAR 20
35038: PUSH
35039: LD_INT 0
35041: ST_TO_ADDR
// uc_nation := 0 ;
35042: LD_ADDR_OWVAR 21
35046: PUSH
35047: LD_INT 0
35049: ST_TO_ADDR
// hc_class := class_phororhacos ;
35050: LD_ADDR_OWVAR 28
35054: PUSH
35055: LD_INT 18
35057: ST_TO_ADDR
// hc_gallery :=  ;
35058: LD_ADDR_OWVAR 33
35062: PUSH
35063: LD_STRING 
35065: ST_TO_ADDR
// end ;
35066: LD_VAR 0 1
35070: RET
// export function PrepareHorse ( ) ; begin
35071: LD_INT 0
35073: PPUSH
// uc_side := 0 ;
35074: LD_ADDR_OWVAR 20
35078: PUSH
35079: LD_INT 0
35081: ST_TO_ADDR
// uc_nation := 0 ;
35082: LD_ADDR_OWVAR 21
35086: PUSH
35087: LD_INT 0
35089: ST_TO_ADDR
// hc_class := class_horse ;
35090: LD_ADDR_OWVAR 28
35094: PUSH
35095: LD_INT 21
35097: ST_TO_ADDR
// hc_gallery :=  ;
35098: LD_ADDR_OWVAR 33
35102: PUSH
35103: LD_STRING 
35105: ST_TO_ADDR
// end ;
35106: LD_VAR 0 1
35110: RET
// export function PrepareMastodont ( ) ; begin
35111: LD_INT 0
35113: PPUSH
// uc_side := 0 ;
35114: LD_ADDR_OWVAR 20
35118: PUSH
35119: LD_INT 0
35121: ST_TO_ADDR
// uc_nation := 0 ;
35122: LD_ADDR_OWVAR 21
35126: PUSH
35127: LD_INT 0
35129: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35130: LD_ADDR_OWVAR 37
35134: PUSH
35135: LD_INT 31
35137: ST_TO_ADDR
// vc_control := control_rider ;
35138: LD_ADDR_OWVAR 38
35142: PUSH
35143: LD_INT 4
35145: ST_TO_ADDR
// end ;
35146: LD_VAR 0 1
35150: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35151: LD_INT 0
35153: PPUSH
35154: PPUSH
35155: PPUSH
// uc_side = 0 ;
35156: LD_ADDR_OWVAR 20
35160: PUSH
35161: LD_INT 0
35163: ST_TO_ADDR
// uc_nation = 0 ;
35164: LD_ADDR_OWVAR 21
35168: PUSH
35169: LD_INT 0
35171: ST_TO_ADDR
// InitHc_All ( ) ;
35172: CALL_OW 584
// InitVc ;
35176: CALL_OW 20
// if mastodonts then
35180: LD_VAR 0 6
35184: IFFALSE 35251
// for i = 1 to mastodonts do
35186: LD_ADDR_VAR 0 11
35190: PUSH
35191: DOUBLE
35192: LD_INT 1
35194: DEC
35195: ST_TO_ADDR
35196: LD_VAR 0 6
35200: PUSH
35201: FOR_TO
35202: IFFALSE 35249
// begin vc_chassis := 31 ;
35204: LD_ADDR_OWVAR 37
35208: PUSH
35209: LD_INT 31
35211: ST_TO_ADDR
// vc_control := control_rider ;
35212: LD_ADDR_OWVAR 38
35216: PUSH
35217: LD_INT 4
35219: ST_TO_ADDR
// animal := CreateVehicle ;
35220: LD_ADDR_VAR 0 12
35224: PUSH
35225: CALL_OW 45
35229: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35230: LD_VAR 0 12
35234: PPUSH
35235: LD_VAR 0 8
35239: PPUSH
35240: LD_INT 0
35242: PPUSH
35243: CALL 37379 0 3
// end ;
35247: GO 35201
35249: POP
35250: POP
// if horses then
35251: LD_VAR 0 5
35255: IFFALSE 35322
// for i = 1 to horses do
35257: LD_ADDR_VAR 0 11
35261: PUSH
35262: DOUBLE
35263: LD_INT 1
35265: DEC
35266: ST_TO_ADDR
35267: LD_VAR 0 5
35271: PUSH
35272: FOR_TO
35273: IFFALSE 35320
// begin hc_class := 21 ;
35275: LD_ADDR_OWVAR 28
35279: PUSH
35280: LD_INT 21
35282: ST_TO_ADDR
// hc_gallery :=  ;
35283: LD_ADDR_OWVAR 33
35287: PUSH
35288: LD_STRING 
35290: ST_TO_ADDR
// animal := CreateHuman ;
35291: LD_ADDR_VAR 0 12
35295: PUSH
35296: CALL_OW 44
35300: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35301: LD_VAR 0 12
35305: PPUSH
35306: LD_VAR 0 8
35310: PPUSH
35311: LD_INT 0
35313: PPUSH
35314: CALL 37379 0 3
// end ;
35318: GO 35272
35320: POP
35321: POP
// if birds then
35322: LD_VAR 0 1
35326: IFFALSE 35393
// for i = 1 to birds do
35328: LD_ADDR_VAR 0 11
35332: PUSH
35333: DOUBLE
35334: LD_INT 1
35336: DEC
35337: ST_TO_ADDR
35338: LD_VAR 0 1
35342: PUSH
35343: FOR_TO
35344: IFFALSE 35391
// begin hc_class := 18 ;
35346: LD_ADDR_OWVAR 28
35350: PUSH
35351: LD_INT 18
35353: ST_TO_ADDR
// hc_gallery =  ;
35354: LD_ADDR_OWVAR 33
35358: PUSH
35359: LD_STRING 
35361: ST_TO_ADDR
// animal := CreateHuman ;
35362: LD_ADDR_VAR 0 12
35366: PUSH
35367: CALL_OW 44
35371: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35372: LD_VAR 0 12
35376: PPUSH
35377: LD_VAR 0 8
35381: PPUSH
35382: LD_INT 0
35384: PPUSH
35385: CALL 37379 0 3
// end ;
35389: GO 35343
35391: POP
35392: POP
// if tigers then
35393: LD_VAR 0 2
35397: IFFALSE 35481
// for i = 1 to tigers do
35399: LD_ADDR_VAR 0 11
35403: PUSH
35404: DOUBLE
35405: LD_INT 1
35407: DEC
35408: ST_TO_ADDR
35409: LD_VAR 0 2
35413: PUSH
35414: FOR_TO
35415: IFFALSE 35479
// begin hc_class = class_tiger ;
35417: LD_ADDR_OWVAR 28
35421: PUSH
35422: LD_INT 14
35424: ST_TO_ADDR
// hc_gallery =  ;
35425: LD_ADDR_OWVAR 33
35429: PUSH
35430: LD_STRING 
35432: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35433: LD_ADDR_OWVAR 35
35437: PUSH
35438: LD_INT 7
35440: NEG
35441: PPUSH
35442: LD_INT 7
35444: PPUSH
35445: CALL_OW 12
35449: ST_TO_ADDR
// animal := CreateHuman ;
35450: LD_ADDR_VAR 0 12
35454: PUSH
35455: CALL_OW 44
35459: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35460: LD_VAR 0 12
35464: PPUSH
35465: LD_VAR 0 8
35469: PPUSH
35470: LD_INT 0
35472: PPUSH
35473: CALL 37379 0 3
// end ;
35477: GO 35414
35479: POP
35480: POP
// if apemans then
35481: LD_VAR 0 3
35485: IFFALSE 35608
// for i = 1 to apemans do
35487: LD_ADDR_VAR 0 11
35491: PUSH
35492: DOUBLE
35493: LD_INT 1
35495: DEC
35496: ST_TO_ADDR
35497: LD_VAR 0 3
35501: PUSH
35502: FOR_TO
35503: IFFALSE 35606
// begin hc_class = class_apeman ;
35505: LD_ADDR_OWVAR 28
35509: PUSH
35510: LD_INT 12
35512: ST_TO_ADDR
// hc_gallery =  ;
35513: LD_ADDR_OWVAR 33
35517: PUSH
35518: LD_STRING 
35520: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35521: LD_ADDR_OWVAR 35
35525: PUSH
35526: LD_INT 2
35528: NEG
35529: PPUSH
35530: LD_INT 2
35532: PPUSH
35533: CALL_OW 12
35537: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35538: LD_ADDR_OWVAR 31
35542: PUSH
35543: LD_INT 1
35545: PPUSH
35546: LD_INT 3
35548: PPUSH
35549: CALL_OW 12
35553: PUSH
35554: LD_INT 1
35556: PPUSH
35557: LD_INT 3
35559: PPUSH
35560: CALL_OW 12
35564: PUSH
35565: LD_INT 0
35567: PUSH
35568: LD_INT 0
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: ST_TO_ADDR
// animal := CreateHuman ;
35577: LD_ADDR_VAR 0 12
35581: PUSH
35582: CALL_OW 44
35586: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35587: LD_VAR 0 12
35591: PPUSH
35592: LD_VAR 0 8
35596: PPUSH
35597: LD_INT 0
35599: PPUSH
35600: CALL 37379 0 3
// end ;
35604: GO 35502
35606: POP
35607: POP
// if enchidnas then
35608: LD_VAR 0 4
35612: IFFALSE 35679
// for i = 1 to enchidnas do
35614: LD_ADDR_VAR 0 11
35618: PUSH
35619: DOUBLE
35620: LD_INT 1
35622: DEC
35623: ST_TO_ADDR
35624: LD_VAR 0 4
35628: PUSH
35629: FOR_TO
35630: IFFALSE 35677
// begin hc_class = 13 ;
35632: LD_ADDR_OWVAR 28
35636: PUSH
35637: LD_INT 13
35639: ST_TO_ADDR
// hc_gallery =  ;
35640: LD_ADDR_OWVAR 33
35644: PUSH
35645: LD_STRING 
35647: ST_TO_ADDR
// animal := CreateHuman ;
35648: LD_ADDR_VAR 0 12
35652: PUSH
35653: CALL_OW 44
35657: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35658: LD_VAR 0 12
35662: PPUSH
35663: LD_VAR 0 8
35667: PPUSH
35668: LD_INT 0
35670: PPUSH
35671: CALL 37379 0 3
// end ;
35675: GO 35629
35677: POP
35678: POP
// if fishes then
35679: LD_VAR 0 7
35683: IFFALSE 35750
// for i = 1 to fishes do
35685: LD_ADDR_VAR 0 11
35689: PUSH
35690: DOUBLE
35691: LD_INT 1
35693: DEC
35694: ST_TO_ADDR
35695: LD_VAR 0 7
35699: PUSH
35700: FOR_TO
35701: IFFALSE 35748
// begin hc_class = 20 ;
35703: LD_ADDR_OWVAR 28
35707: PUSH
35708: LD_INT 20
35710: ST_TO_ADDR
// hc_gallery =  ;
35711: LD_ADDR_OWVAR 33
35715: PUSH
35716: LD_STRING 
35718: ST_TO_ADDR
// animal := CreateHuman ;
35719: LD_ADDR_VAR 0 12
35723: PUSH
35724: CALL_OW 44
35728: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35729: LD_VAR 0 12
35733: PPUSH
35734: LD_VAR 0 9
35738: PPUSH
35739: LD_INT 0
35741: PPUSH
35742: CALL 37379 0 3
// end ;
35746: GO 35700
35748: POP
35749: POP
// end ;
35750: LD_VAR 0 10
35754: RET
// export function WantHeal ( sci , unit ) ; begin
35755: LD_INT 0
35757: PPUSH
// if GetTaskList ( sci ) > 0 then
35758: LD_VAR 0 1
35762: PPUSH
35763: CALL_OW 437
35767: PUSH
35768: LD_INT 0
35770: GREATER
35771: IFFALSE 35841
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35773: LD_VAR 0 1
35777: PPUSH
35778: CALL_OW 437
35782: PUSH
35783: LD_INT 1
35785: ARRAY
35786: PUSH
35787: LD_INT 1
35789: ARRAY
35790: PUSH
35791: LD_STRING l
35793: EQUAL
35794: PUSH
35795: LD_VAR 0 1
35799: PPUSH
35800: CALL_OW 437
35804: PUSH
35805: LD_INT 1
35807: ARRAY
35808: PUSH
35809: LD_INT 4
35811: ARRAY
35812: PUSH
35813: LD_VAR 0 2
35817: EQUAL
35818: AND
35819: IFFALSE 35831
// result := true else
35821: LD_ADDR_VAR 0 3
35825: PUSH
35826: LD_INT 1
35828: ST_TO_ADDR
35829: GO 35839
// result := false ;
35831: LD_ADDR_VAR 0 3
35835: PUSH
35836: LD_INT 0
35838: ST_TO_ADDR
// end else
35839: GO 35849
// result := false ;
35841: LD_ADDR_VAR 0 3
35845: PUSH
35846: LD_INT 0
35848: ST_TO_ADDR
// end ;
35849: LD_VAR 0 3
35853: RET
// export function HealTarget ( sci ) ; begin
35854: LD_INT 0
35856: PPUSH
// if not sci then
35857: LD_VAR 0 1
35861: NOT
35862: IFFALSE 35866
// exit ;
35864: GO 35931
// result := 0 ;
35866: LD_ADDR_VAR 0 2
35870: PUSH
35871: LD_INT 0
35873: ST_TO_ADDR
// if GetTaskList ( sci ) then
35874: LD_VAR 0 1
35878: PPUSH
35879: CALL_OW 437
35883: IFFALSE 35931
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35885: LD_VAR 0 1
35889: PPUSH
35890: CALL_OW 437
35894: PUSH
35895: LD_INT 1
35897: ARRAY
35898: PUSH
35899: LD_INT 1
35901: ARRAY
35902: PUSH
35903: LD_STRING l
35905: EQUAL
35906: IFFALSE 35931
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35908: LD_ADDR_VAR 0 2
35912: PUSH
35913: LD_VAR 0 1
35917: PPUSH
35918: CALL_OW 437
35922: PUSH
35923: LD_INT 1
35925: ARRAY
35926: PUSH
35927: LD_INT 4
35929: ARRAY
35930: ST_TO_ADDR
// end ;
35931: LD_VAR 0 2
35935: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35936: LD_INT 0
35938: PPUSH
35939: PPUSH
35940: PPUSH
35941: PPUSH
// if not base_units then
35942: LD_VAR 0 1
35946: NOT
35947: IFFALSE 35951
// exit ;
35949: GO 36038
// result := false ;
35951: LD_ADDR_VAR 0 2
35955: PUSH
35956: LD_INT 0
35958: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35959: LD_ADDR_VAR 0 5
35963: PUSH
35964: LD_VAR 0 1
35968: PPUSH
35969: LD_INT 21
35971: PUSH
35972: LD_INT 3
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PPUSH
35979: CALL_OW 72
35983: ST_TO_ADDR
// if not tmp then
35984: LD_VAR 0 5
35988: NOT
35989: IFFALSE 35993
// exit ;
35991: GO 36038
// for i in tmp do
35993: LD_ADDR_VAR 0 3
35997: PUSH
35998: LD_VAR 0 5
36002: PUSH
36003: FOR_IN
36004: IFFALSE 36036
// begin result := EnemyInRange ( i , 22 ) ;
36006: LD_ADDR_VAR 0 2
36010: PUSH
36011: LD_VAR 0 3
36015: PPUSH
36016: LD_INT 22
36018: PPUSH
36019: CALL 33625 0 2
36023: ST_TO_ADDR
// if result then
36024: LD_VAR 0 2
36028: IFFALSE 36034
// exit ;
36030: POP
36031: POP
36032: GO 36038
// end ;
36034: GO 36003
36036: POP
36037: POP
// end ;
36038: LD_VAR 0 2
36042: RET
// export function FilterByTag ( units , tag ) ; begin
36043: LD_INT 0
36045: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36046: LD_ADDR_VAR 0 3
36050: PUSH
36051: LD_VAR 0 1
36055: PPUSH
36056: LD_INT 120
36058: PUSH
36059: LD_VAR 0 2
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PPUSH
36068: CALL_OW 72
36072: ST_TO_ADDR
// end ;
36073: LD_VAR 0 3
36077: RET
// export function IsDriver ( un ) ; begin
36078: LD_INT 0
36080: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36081: LD_ADDR_VAR 0 2
36085: PUSH
36086: LD_VAR 0 1
36090: PUSH
36091: LD_INT 55
36093: PUSH
36094: EMPTY
36095: LIST
36096: PPUSH
36097: CALL_OW 69
36101: IN
36102: ST_TO_ADDR
// end ;
36103: LD_VAR 0 2
36107: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36108: LD_INT 0
36110: PPUSH
36111: PPUSH
// list := [ ] ;
36112: LD_ADDR_VAR 0 5
36116: PUSH
36117: EMPTY
36118: ST_TO_ADDR
// case d of 0 :
36119: LD_VAR 0 3
36123: PUSH
36124: LD_INT 0
36126: DOUBLE
36127: EQUAL
36128: IFTRUE 36132
36130: GO 36265
36132: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36133: LD_ADDR_VAR 0 5
36137: PUSH
36138: LD_VAR 0 1
36142: PUSH
36143: LD_INT 4
36145: MINUS
36146: PUSH
36147: LD_VAR 0 2
36151: PUSH
36152: LD_INT 4
36154: MINUS
36155: PUSH
36156: LD_INT 2
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: LIST
36163: PUSH
36164: LD_VAR 0 1
36168: PUSH
36169: LD_INT 3
36171: MINUS
36172: PUSH
36173: LD_VAR 0 2
36177: PUSH
36178: LD_INT 1
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: PUSH
36186: LD_VAR 0 1
36190: PUSH
36191: LD_INT 4
36193: PLUS
36194: PUSH
36195: LD_VAR 0 2
36199: PUSH
36200: LD_INT 4
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: LIST
36207: PUSH
36208: LD_VAR 0 1
36212: PUSH
36213: LD_INT 3
36215: PLUS
36216: PUSH
36217: LD_VAR 0 2
36221: PUSH
36222: LD_INT 3
36224: PLUS
36225: PUSH
36226: LD_INT 5
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: LIST
36233: PUSH
36234: LD_VAR 0 1
36238: PUSH
36239: LD_VAR 0 2
36243: PUSH
36244: LD_INT 4
36246: PLUS
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: LIST
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: ST_TO_ADDR
// end ; 1 :
36263: GO 36963
36265: LD_INT 1
36267: DOUBLE
36268: EQUAL
36269: IFTRUE 36273
36271: GO 36406
36273: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36274: LD_ADDR_VAR 0 5
36278: PUSH
36279: LD_VAR 0 1
36283: PUSH
36284: LD_VAR 0 2
36288: PUSH
36289: LD_INT 4
36291: MINUS
36292: PUSH
36293: LD_INT 3
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: LIST
36300: PUSH
36301: LD_VAR 0 1
36305: PUSH
36306: LD_INT 3
36308: MINUS
36309: PUSH
36310: LD_VAR 0 2
36314: PUSH
36315: LD_INT 3
36317: MINUS
36318: PUSH
36319: LD_INT 2
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: LIST
36326: PUSH
36327: LD_VAR 0 1
36331: PUSH
36332: LD_INT 4
36334: MINUS
36335: PUSH
36336: LD_VAR 0 2
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: LIST
36348: PUSH
36349: LD_VAR 0 1
36353: PUSH
36354: LD_VAR 0 2
36358: PUSH
36359: LD_INT 3
36361: PLUS
36362: PUSH
36363: LD_INT 0
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: LIST
36370: PUSH
36371: LD_VAR 0 1
36375: PUSH
36376: LD_INT 4
36378: PLUS
36379: PUSH
36380: LD_VAR 0 2
36384: PUSH
36385: LD_INT 4
36387: PLUS
36388: PUSH
36389: LD_INT 5
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: LIST
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: ST_TO_ADDR
// end ; 2 :
36404: GO 36963
36406: LD_INT 2
36408: DOUBLE
36409: EQUAL
36410: IFTRUE 36414
36412: GO 36543
36414: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36415: LD_ADDR_VAR 0 5
36419: PUSH
36420: LD_VAR 0 1
36424: PUSH
36425: LD_VAR 0 2
36429: PUSH
36430: LD_INT 3
36432: MINUS
36433: PUSH
36434: LD_INT 3
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: LIST
36441: PUSH
36442: LD_VAR 0 1
36446: PUSH
36447: LD_INT 4
36449: PLUS
36450: PUSH
36451: LD_VAR 0 2
36455: PUSH
36456: LD_INT 4
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: LIST
36463: PUSH
36464: LD_VAR 0 1
36468: PUSH
36469: LD_VAR 0 2
36473: PUSH
36474: LD_INT 4
36476: PLUS
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: PUSH
36486: LD_VAR 0 1
36490: PUSH
36491: LD_INT 3
36493: MINUS
36494: PUSH
36495: LD_VAR 0 2
36499: PUSH
36500: LD_INT 1
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: LIST
36507: PUSH
36508: LD_VAR 0 1
36512: PUSH
36513: LD_INT 4
36515: MINUS
36516: PUSH
36517: LD_VAR 0 2
36521: PUSH
36522: LD_INT 4
36524: MINUS
36525: PUSH
36526: LD_INT 2
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: LIST
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: ST_TO_ADDR
// end ; 3 :
36541: GO 36963
36543: LD_INT 3
36545: DOUBLE
36546: EQUAL
36547: IFTRUE 36551
36549: GO 36684
36551: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36552: LD_ADDR_VAR 0 5
36556: PUSH
36557: LD_VAR 0 1
36561: PUSH
36562: LD_INT 3
36564: PLUS
36565: PUSH
36566: LD_VAR 0 2
36570: PUSH
36571: LD_INT 4
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: LIST
36578: PUSH
36579: LD_VAR 0 1
36583: PUSH
36584: LD_INT 4
36586: PLUS
36587: PUSH
36588: LD_VAR 0 2
36592: PUSH
36593: LD_INT 4
36595: PLUS
36596: PUSH
36597: LD_INT 5
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: LIST
36604: PUSH
36605: LD_VAR 0 1
36609: PUSH
36610: LD_INT 4
36612: MINUS
36613: PUSH
36614: LD_VAR 0 2
36618: PUSH
36619: LD_INT 1
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: LIST
36626: PUSH
36627: LD_VAR 0 1
36631: PUSH
36632: LD_VAR 0 2
36636: PUSH
36637: LD_INT 4
36639: MINUS
36640: PUSH
36641: LD_INT 3
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: LIST
36648: PUSH
36649: LD_VAR 0 1
36653: PUSH
36654: LD_INT 3
36656: MINUS
36657: PUSH
36658: LD_VAR 0 2
36662: PUSH
36663: LD_INT 3
36665: MINUS
36666: PUSH
36667: LD_INT 2
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: LIST
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: ST_TO_ADDR
// end ; 4 :
36682: GO 36963
36684: LD_INT 4
36686: DOUBLE
36687: EQUAL
36688: IFTRUE 36692
36690: GO 36825
36692: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36693: LD_ADDR_VAR 0 5
36697: PUSH
36698: LD_VAR 0 1
36702: PUSH
36703: LD_VAR 0 2
36707: PUSH
36708: LD_INT 4
36710: PLUS
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: LIST
36719: PUSH
36720: LD_VAR 0 1
36724: PUSH
36725: LD_INT 3
36727: PLUS
36728: PUSH
36729: LD_VAR 0 2
36733: PUSH
36734: LD_INT 3
36736: PLUS
36737: PUSH
36738: LD_INT 5
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: LIST
36745: PUSH
36746: LD_VAR 0 1
36750: PUSH
36751: LD_INT 4
36753: PLUS
36754: PUSH
36755: LD_VAR 0 2
36759: PUSH
36760: LD_INT 4
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: LIST
36767: PUSH
36768: LD_VAR 0 1
36772: PUSH
36773: LD_VAR 0 2
36777: PUSH
36778: LD_INT 3
36780: MINUS
36781: PUSH
36782: LD_INT 3
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: LIST
36789: PUSH
36790: LD_VAR 0 1
36794: PUSH
36795: LD_INT 4
36797: MINUS
36798: PUSH
36799: LD_VAR 0 2
36803: PUSH
36804: LD_INT 4
36806: MINUS
36807: PUSH
36808: LD_INT 2
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: LIST
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: ST_TO_ADDR
// end ; 5 :
36823: GO 36963
36825: LD_INT 5
36827: DOUBLE
36828: EQUAL
36829: IFTRUE 36833
36831: GO 36962
36833: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36834: LD_ADDR_VAR 0 5
36838: PUSH
36839: LD_VAR 0 1
36843: PUSH
36844: LD_INT 4
36846: MINUS
36847: PUSH
36848: LD_VAR 0 2
36852: PUSH
36853: LD_INT 1
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: LIST
36860: PUSH
36861: LD_VAR 0 1
36865: PUSH
36866: LD_VAR 0 2
36870: PUSH
36871: LD_INT 4
36873: MINUS
36874: PUSH
36875: LD_INT 3
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: LIST
36882: PUSH
36883: LD_VAR 0 1
36887: PUSH
36888: LD_INT 4
36890: PLUS
36891: PUSH
36892: LD_VAR 0 2
36896: PUSH
36897: LD_INT 4
36899: PLUS
36900: PUSH
36901: LD_INT 5
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: LIST
36908: PUSH
36909: LD_VAR 0 1
36913: PUSH
36914: LD_INT 3
36916: PLUS
36917: PUSH
36918: LD_VAR 0 2
36922: PUSH
36923: LD_INT 4
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: LIST
36930: PUSH
36931: LD_VAR 0 1
36935: PUSH
36936: LD_VAR 0 2
36940: PUSH
36941: LD_INT 3
36943: PLUS
36944: PUSH
36945: LD_INT 0
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: LIST
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: ST_TO_ADDR
// end ; end ;
36960: GO 36963
36962: POP
// result := list ;
36963: LD_ADDR_VAR 0 4
36967: PUSH
36968: LD_VAR 0 5
36972: ST_TO_ADDR
// end ;
36973: LD_VAR 0 4
36977: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36978: LD_INT 0
36980: PPUSH
36981: PPUSH
36982: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36983: LD_VAR 0 1
36987: NOT
36988: PUSH
36989: LD_VAR 0 2
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: LD_INT 2
36999: PUSH
37000: LD_INT 3
37002: PUSH
37003: LD_INT 4
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: IN
37012: NOT
37013: OR
37014: IFFALSE 37018
// exit ;
37016: GO 37101
// tmp := [ ] ;
37018: LD_ADDR_VAR 0 5
37022: PUSH
37023: EMPTY
37024: ST_TO_ADDR
// for i in units do
37025: LD_ADDR_VAR 0 4
37029: PUSH
37030: LD_VAR 0 1
37034: PUSH
37035: FOR_IN
37036: IFFALSE 37070
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37038: LD_ADDR_VAR 0 5
37042: PUSH
37043: LD_VAR 0 5
37047: PPUSH
37048: LD_VAR 0 4
37052: PPUSH
37053: LD_VAR 0 2
37057: PPUSH
37058: CALL_OW 259
37062: PPUSH
37063: CALL 38461 0 2
37067: ST_TO_ADDR
37068: GO 37035
37070: POP
37071: POP
// if not tmp then
37072: LD_VAR 0 5
37076: NOT
37077: IFFALSE 37081
// exit ;
37079: GO 37101
// result := SortListByListDesc ( units , tmp ) ;
37081: LD_ADDR_VAR 0 3
37085: PUSH
37086: LD_VAR 0 1
37090: PPUSH
37091: LD_VAR 0 5
37095: PPUSH
37096: CALL_OW 77
37100: ST_TO_ADDR
// end ;
37101: LD_VAR 0 3
37105: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37106: LD_INT 0
37108: PPUSH
37109: PPUSH
37110: PPUSH
// result := false ;
37111: LD_ADDR_VAR 0 3
37115: PUSH
37116: LD_INT 0
37118: ST_TO_ADDR
// if not building then
37119: LD_VAR 0 2
37123: NOT
37124: IFFALSE 37128
// exit ;
37126: GO 37266
// x := GetX ( building ) ;
37128: LD_ADDR_VAR 0 4
37132: PUSH
37133: LD_VAR 0 2
37137: PPUSH
37138: CALL_OW 250
37142: ST_TO_ADDR
// y := GetY ( building ) ;
37143: LD_ADDR_VAR 0 5
37147: PUSH
37148: LD_VAR 0 2
37152: PPUSH
37153: CALL_OW 251
37157: ST_TO_ADDR
// if not x or not y then
37158: LD_VAR 0 4
37162: NOT
37163: PUSH
37164: LD_VAR 0 5
37168: NOT
37169: OR
37170: IFFALSE 37174
// exit ;
37172: GO 37266
// if GetTaskList ( unit ) then
37174: LD_VAR 0 1
37178: PPUSH
37179: CALL_OW 437
37183: IFFALSE 37266
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37185: LD_STRING e
37187: PUSH
37188: LD_VAR 0 1
37192: PPUSH
37193: CALL_OW 437
37197: PUSH
37198: LD_INT 1
37200: ARRAY
37201: PUSH
37202: LD_INT 1
37204: ARRAY
37205: EQUAL
37206: PUSH
37207: LD_VAR 0 4
37211: PUSH
37212: LD_VAR 0 1
37216: PPUSH
37217: CALL_OW 437
37221: PUSH
37222: LD_INT 1
37224: ARRAY
37225: PUSH
37226: LD_INT 2
37228: ARRAY
37229: EQUAL
37230: AND
37231: PUSH
37232: LD_VAR 0 5
37236: PUSH
37237: LD_VAR 0 1
37241: PPUSH
37242: CALL_OW 437
37246: PUSH
37247: LD_INT 1
37249: ARRAY
37250: PUSH
37251: LD_INT 3
37253: ARRAY
37254: EQUAL
37255: AND
37256: IFFALSE 37266
// result := true end ;
37258: LD_ADDR_VAR 0 3
37262: PUSH
37263: LD_INT 1
37265: ST_TO_ADDR
// end ;
37266: LD_VAR 0 3
37270: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37271: LD_INT 0
37273: PPUSH
// result := false ;
37274: LD_ADDR_VAR 0 4
37278: PUSH
37279: LD_INT 0
37281: ST_TO_ADDR
// if GetTaskList ( unit ) then
37282: LD_VAR 0 1
37286: PPUSH
37287: CALL_OW 437
37291: IFFALSE 37374
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37293: LD_STRING M
37295: PUSH
37296: LD_VAR 0 1
37300: PPUSH
37301: CALL_OW 437
37305: PUSH
37306: LD_INT 1
37308: ARRAY
37309: PUSH
37310: LD_INT 1
37312: ARRAY
37313: EQUAL
37314: PUSH
37315: LD_VAR 0 2
37319: PUSH
37320: LD_VAR 0 1
37324: PPUSH
37325: CALL_OW 437
37329: PUSH
37330: LD_INT 1
37332: ARRAY
37333: PUSH
37334: LD_INT 2
37336: ARRAY
37337: EQUAL
37338: AND
37339: PUSH
37340: LD_VAR 0 3
37344: PUSH
37345: LD_VAR 0 1
37349: PPUSH
37350: CALL_OW 437
37354: PUSH
37355: LD_INT 1
37357: ARRAY
37358: PUSH
37359: LD_INT 3
37361: ARRAY
37362: EQUAL
37363: AND
37364: IFFALSE 37374
// result := true ;
37366: LD_ADDR_VAR 0 4
37370: PUSH
37371: LD_INT 1
37373: ST_TO_ADDR
// end ; end ;
37374: LD_VAR 0 4
37378: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37379: LD_INT 0
37381: PPUSH
37382: PPUSH
37383: PPUSH
37384: PPUSH
// if not unit or not area then
37385: LD_VAR 0 1
37389: NOT
37390: PUSH
37391: LD_VAR 0 2
37395: NOT
37396: OR
37397: IFFALSE 37401
// exit ;
37399: GO 37564
// tmp := AreaToList ( area , i ) ;
37401: LD_ADDR_VAR 0 6
37405: PUSH
37406: LD_VAR 0 2
37410: PPUSH
37411: LD_VAR 0 5
37415: PPUSH
37416: CALL_OW 517
37420: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37421: LD_ADDR_VAR 0 5
37425: PUSH
37426: DOUBLE
37427: LD_INT 1
37429: DEC
37430: ST_TO_ADDR
37431: LD_VAR 0 6
37435: PUSH
37436: LD_INT 1
37438: ARRAY
37439: PUSH
37440: FOR_TO
37441: IFFALSE 37562
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37443: LD_ADDR_VAR 0 7
37447: PUSH
37448: LD_VAR 0 6
37452: PUSH
37453: LD_INT 1
37455: ARRAY
37456: PUSH
37457: LD_VAR 0 5
37461: ARRAY
37462: PUSH
37463: LD_VAR 0 6
37467: PUSH
37468: LD_INT 2
37470: ARRAY
37471: PUSH
37472: LD_VAR 0 5
37476: ARRAY
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
37482: LD_INT 92
37484: PUSH
37485: LD_VAR 0 7
37489: PUSH
37490: LD_INT 1
37492: ARRAY
37493: PUSH
37494: LD_VAR 0 7
37498: PUSH
37499: LD_INT 2
37501: ARRAY
37502: PUSH
37503: LD_INT 3
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: PPUSH
37512: CALL_OW 69
37516: PUSH
37517: LD_INT 0
37519: EQUAL
37520: IFFALSE 37560
// begin PlaceUnitArea ( unit , area , mode ) ;
37522: LD_VAR 0 1
37526: PPUSH
37527: LD_VAR 0 2
37531: PPUSH
37532: LD_VAR 0 3
37536: PPUSH
37537: CALL_OW 49
// result := IsPlaced ( unit ) ;
37541: LD_ADDR_VAR 0 4
37545: PUSH
37546: LD_VAR 0 1
37550: PPUSH
37551: CALL_OW 305
37555: ST_TO_ADDR
// exit ;
37556: POP
37557: POP
37558: GO 37564
// end ; end ;
37560: GO 37440
37562: POP
37563: POP
// end ;
37564: LD_VAR 0 4
37568: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37569: LD_INT 0
37571: PPUSH
37572: PPUSH
37573: PPUSH
// if not side or side > 8 then
37574: LD_VAR 0 1
37578: NOT
37579: PUSH
37580: LD_VAR 0 1
37584: PUSH
37585: LD_INT 8
37587: GREATER
37588: OR
37589: IFFALSE 37593
// exit ;
37591: GO 37780
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37593: LD_ADDR_VAR 0 4
37597: PUSH
37598: LD_INT 22
37600: PUSH
37601: LD_VAR 0 1
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 21
37612: PUSH
37613: LD_INT 3
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PPUSH
37624: CALL_OW 69
37628: ST_TO_ADDR
// if not tmp then
37629: LD_VAR 0 4
37633: NOT
37634: IFFALSE 37638
// exit ;
37636: GO 37780
// enable_addtolog := true ;
37638: LD_ADDR_OWVAR 81
37642: PUSH
37643: LD_INT 1
37645: ST_TO_ADDR
// AddToLog ( [ ) ;
37646: LD_STRING [
37648: PPUSH
37649: CALL_OW 561
// for i in tmp do
37653: LD_ADDR_VAR 0 3
37657: PUSH
37658: LD_VAR 0 4
37662: PUSH
37663: FOR_IN
37664: IFFALSE 37771
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37666: LD_STRING [
37668: PUSH
37669: LD_VAR 0 3
37673: PPUSH
37674: CALL_OW 266
37678: STR
37679: PUSH
37680: LD_STRING , 
37682: STR
37683: PUSH
37684: LD_VAR 0 3
37688: PPUSH
37689: CALL_OW 250
37693: STR
37694: PUSH
37695: LD_STRING , 
37697: STR
37698: PUSH
37699: LD_VAR 0 3
37703: PPUSH
37704: CALL_OW 251
37708: STR
37709: PUSH
37710: LD_STRING , 
37712: STR
37713: PUSH
37714: LD_VAR 0 3
37718: PPUSH
37719: CALL_OW 254
37723: STR
37724: PUSH
37725: LD_STRING , 
37727: STR
37728: PUSH
37729: LD_VAR 0 3
37733: PPUSH
37734: LD_INT 1
37736: PPUSH
37737: CALL_OW 268
37741: STR
37742: PUSH
37743: LD_STRING , 
37745: STR
37746: PUSH
37747: LD_VAR 0 3
37751: PPUSH
37752: LD_INT 2
37754: PPUSH
37755: CALL_OW 268
37759: STR
37760: PUSH
37761: LD_STRING ],
37763: STR
37764: PPUSH
37765: CALL_OW 561
// end ;
37769: GO 37663
37771: POP
37772: POP
// AddToLog ( ]; ) ;
37773: LD_STRING ];
37775: PPUSH
37776: CALL_OW 561
// end ;
37780: LD_VAR 0 2
37784: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37785: LD_INT 0
37787: PPUSH
37788: PPUSH
37789: PPUSH
37790: PPUSH
37791: PPUSH
// if not area or not rate or not max then
37792: LD_VAR 0 1
37796: NOT
37797: PUSH
37798: LD_VAR 0 2
37802: NOT
37803: OR
37804: PUSH
37805: LD_VAR 0 4
37809: NOT
37810: OR
37811: IFFALSE 37815
// exit ;
37813: GO 38004
// while 1 do
37815: LD_INT 1
37817: IFFALSE 38004
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37819: LD_ADDR_VAR 0 9
37823: PUSH
37824: LD_VAR 0 1
37828: PPUSH
37829: LD_INT 1
37831: PPUSH
37832: CALL_OW 287
37836: PUSH
37837: LD_INT 10
37839: MUL
37840: ST_TO_ADDR
// r := rate / 10 ;
37841: LD_ADDR_VAR 0 7
37845: PUSH
37846: LD_VAR 0 2
37850: PUSH
37851: LD_INT 10
37853: DIVREAL
37854: ST_TO_ADDR
// time := 1 1$00 ;
37855: LD_ADDR_VAR 0 8
37859: PUSH
37860: LD_INT 2100
37862: ST_TO_ADDR
// if amount < min then
37863: LD_VAR 0 9
37867: PUSH
37868: LD_VAR 0 3
37872: LESS
37873: IFFALSE 37891
// r := r * 2 else
37875: LD_ADDR_VAR 0 7
37879: PUSH
37880: LD_VAR 0 7
37884: PUSH
37885: LD_INT 2
37887: MUL
37888: ST_TO_ADDR
37889: GO 37917
// if amount > max then
37891: LD_VAR 0 9
37895: PUSH
37896: LD_VAR 0 4
37900: GREATER
37901: IFFALSE 37917
// r := r / 2 ;
37903: LD_ADDR_VAR 0 7
37907: PUSH
37908: LD_VAR 0 7
37912: PUSH
37913: LD_INT 2
37915: DIVREAL
37916: ST_TO_ADDR
// time := time / r ;
37917: LD_ADDR_VAR 0 8
37921: PUSH
37922: LD_VAR 0 8
37926: PUSH
37927: LD_VAR 0 7
37931: DIVREAL
37932: ST_TO_ADDR
// if time < 0 then
37933: LD_VAR 0 8
37937: PUSH
37938: LD_INT 0
37940: LESS
37941: IFFALSE 37958
// time := time * - 1 ;
37943: LD_ADDR_VAR 0 8
37947: PUSH
37948: LD_VAR 0 8
37952: PUSH
37953: LD_INT 1
37955: NEG
37956: MUL
37957: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37958: LD_VAR 0 8
37962: PUSH
37963: LD_INT 35
37965: PPUSH
37966: LD_INT 875
37968: PPUSH
37969: CALL_OW 12
37973: PLUS
37974: PPUSH
37975: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37979: LD_INT 1
37981: PPUSH
37982: LD_INT 5
37984: PPUSH
37985: CALL_OW 12
37989: PPUSH
37990: LD_VAR 0 1
37994: PPUSH
37995: LD_INT 1
37997: PPUSH
37998: CALL_OW 55
// end ;
38002: GO 37815
// end ;
38004: LD_VAR 0 5
38008: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38009: LD_INT 0
38011: PPUSH
38012: PPUSH
38013: PPUSH
38014: PPUSH
38015: PPUSH
38016: PPUSH
38017: PPUSH
38018: PPUSH
// if not turrets or not factories then
38019: LD_VAR 0 1
38023: NOT
38024: PUSH
38025: LD_VAR 0 2
38029: NOT
38030: OR
38031: IFFALSE 38035
// exit ;
38033: GO 38342
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38035: LD_ADDR_VAR 0 10
38039: PUSH
38040: LD_INT 5
38042: PUSH
38043: LD_INT 6
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 2
38052: PUSH
38053: LD_INT 4
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 3
38062: PUSH
38063: LD_INT 5
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 24
38077: PUSH
38078: LD_INT 25
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 23
38087: PUSH
38088: LD_INT 27
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 42
38101: PUSH
38102: LD_INT 43
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 44
38111: PUSH
38112: LD_INT 46
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 45
38121: PUSH
38122: LD_INT 47
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: LIST
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: LIST
38138: ST_TO_ADDR
// result := [ ] ;
38139: LD_ADDR_VAR 0 3
38143: PUSH
38144: EMPTY
38145: ST_TO_ADDR
// for i in turrets do
38146: LD_ADDR_VAR 0 4
38150: PUSH
38151: LD_VAR 0 1
38155: PUSH
38156: FOR_IN
38157: IFFALSE 38340
// begin nat := GetNation ( i ) ;
38159: LD_ADDR_VAR 0 7
38163: PUSH
38164: LD_VAR 0 4
38168: PPUSH
38169: CALL_OW 248
38173: ST_TO_ADDR
// weapon := 0 ;
38174: LD_ADDR_VAR 0 8
38178: PUSH
38179: LD_INT 0
38181: ST_TO_ADDR
// if not nat then
38182: LD_VAR 0 7
38186: NOT
38187: IFFALSE 38191
// continue ;
38189: GO 38156
// for j in list [ nat ] do
38191: LD_ADDR_VAR 0 5
38195: PUSH
38196: LD_VAR 0 10
38200: PUSH
38201: LD_VAR 0 7
38205: ARRAY
38206: PUSH
38207: FOR_IN
38208: IFFALSE 38249
// if GetBWeapon ( i ) = j [ 1 ] then
38210: LD_VAR 0 4
38214: PPUSH
38215: CALL_OW 269
38219: PUSH
38220: LD_VAR 0 5
38224: PUSH
38225: LD_INT 1
38227: ARRAY
38228: EQUAL
38229: IFFALSE 38247
// begin weapon := j [ 2 ] ;
38231: LD_ADDR_VAR 0 8
38235: PUSH
38236: LD_VAR 0 5
38240: PUSH
38241: LD_INT 2
38243: ARRAY
38244: ST_TO_ADDR
// break ;
38245: GO 38249
// end ;
38247: GO 38207
38249: POP
38250: POP
// if not weapon then
38251: LD_VAR 0 8
38255: NOT
38256: IFFALSE 38260
// continue ;
38258: GO 38156
// for k in factories do
38260: LD_ADDR_VAR 0 6
38264: PUSH
38265: LD_VAR 0 2
38269: PUSH
38270: FOR_IN
38271: IFFALSE 38336
// begin weapons := AvailableWeaponList ( k ) ;
38273: LD_ADDR_VAR 0 9
38277: PUSH
38278: LD_VAR 0 6
38282: PPUSH
38283: CALL_OW 478
38287: ST_TO_ADDR
// if not weapons then
38288: LD_VAR 0 9
38292: NOT
38293: IFFALSE 38297
// continue ;
38295: GO 38270
// if weapon in weapons then
38297: LD_VAR 0 8
38301: PUSH
38302: LD_VAR 0 9
38306: IN
38307: IFFALSE 38334
// begin result := [ i , weapon ] ;
38309: LD_ADDR_VAR 0 3
38313: PUSH
38314: LD_VAR 0 4
38318: PUSH
38319: LD_VAR 0 8
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: ST_TO_ADDR
// exit ;
38328: POP
38329: POP
38330: POP
38331: POP
38332: GO 38342
// end ; end ;
38334: GO 38270
38336: POP
38337: POP
// end ;
38338: GO 38156
38340: POP
38341: POP
// end ;
38342: LD_VAR 0 3
38346: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38347: LD_INT 0
38349: PPUSH
// if not side or side > 8 then
38350: LD_VAR 0 3
38354: NOT
38355: PUSH
38356: LD_VAR 0 3
38360: PUSH
38361: LD_INT 8
38363: GREATER
38364: OR
38365: IFFALSE 38369
// exit ;
38367: GO 38428
// if not range then
38369: LD_VAR 0 4
38373: NOT
38374: IFFALSE 38385
// range := - 12 ;
38376: LD_ADDR_VAR 0 4
38380: PUSH
38381: LD_INT 12
38383: NEG
38384: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38385: LD_VAR 0 1
38389: PPUSH
38390: LD_VAR 0 2
38394: PPUSH
38395: LD_VAR 0 3
38399: PPUSH
38400: LD_VAR 0 4
38404: PPUSH
38405: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38409: LD_VAR 0 1
38413: PPUSH
38414: LD_VAR 0 2
38418: PPUSH
38419: LD_VAR 0 3
38423: PPUSH
38424: CALL_OW 331
// end ;
38428: LD_VAR 0 5
38432: RET
// export function Video ( mode ) ; begin
38433: LD_INT 0
38435: PPUSH
// ingame_video = mode ;
38436: LD_ADDR_OWVAR 52
38440: PUSH
38441: LD_VAR 0 1
38445: ST_TO_ADDR
// interface_hidden = mode ;
38446: LD_ADDR_OWVAR 54
38450: PUSH
38451: LD_VAR 0 1
38455: ST_TO_ADDR
// end ;
38456: LD_VAR 0 2
38460: RET
// export function Join ( array , element ) ; begin
38461: LD_INT 0
38463: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38464: LD_ADDR_VAR 0 3
38468: PUSH
38469: LD_VAR 0 1
38473: PPUSH
38474: LD_VAR 0 1
38478: PUSH
38479: LD_INT 1
38481: PLUS
38482: PPUSH
38483: LD_VAR 0 2
38487: PPUSH
38488: CALL_OW 1
38492: ST_TO_ADDR
// end ;
38493: LD_VAR 0 3
38497: RET
// export function JoinUnion ( array , element ) ; begin
38498: LD_INT 0
38500: PPUSH
// result := array union element ;
38501: LD_ADDR_VAR 0 3
38505: PUSH
38506: LD_VAR 0 1
38510: PUSH
38511: LD_VAR 0 2
38515: UNION
38516: ST_TO_ADDR
// end ;
38517: LD_VAR 0 3
38521: RET
// export function GetBehemoths ( side ) ; begin
38522: LD_INT 0
38524: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38525: LD_ADDR_VAR 0 2
38529: PUSH
38530: LD_INT 22
38532: PUSH
38533: LD_VAR 0 1
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 31
38544: PUSH
38545: LD_INT 25
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PPUSH
38556: CALL_OW 69
38560: ST_TO_ADDR
// end ;
38561: LD_VAR 0 2
38565: RET
// export function Shuffle ( array ) ; var i , index ; begin
38566: LD_INT 0
38568: PPUSH
38569: PPUSH
38570: PPUSH
// result := [ ] ;
38571: LD_ADDR_VAR 0 2
38575: PUSH
38576: EMPTY
38577: ST_TO_ADDR
// if not array then
38578: LD_VAR 0 1
38582: NOT
38583: IFFALSE 38587
// exit ;
38585: GO 38686
// Randomize ;
38587: CALL_OW 10
// for i = array downto 1 do
38591: LD_ADDR_VAR 0 3
38595: PUSH
38596: DOUBLE
38597: LD_VAR 0 1
38601: INC
38602: ST_TO_ADDR
38603: LD_INT 1
38605: PUSH
38606: FOR_DOWNTO
38607: IFFALSE 38684
// begin index := rand ( 1 , array ) ;
38609: LD_ADDR_VAR 0 4
38613: PUSH
38614: LD_INT 1
38616: PPUSH
38617: LD_VAR 0 1
38621: PPUSH
38622: CALL_OW 12
38626: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38627: LD_ADDR_VAR 0 2
38631: PUSH
38632: LD_VAR 0 2
38636: PPUSH
38637: LD_VAR 0 2
38641: PUSH
38642: LD_INT 1
38644: PLUS
38645: PPUSH
38646: LD_VAR 0 1
38650: PUSH
38651: LD_VAR 0 4
38655: ARRAY
38656: PPUSH
38657: CALL_OW 2
38661: ST_TO_ADDR
// array := Delete ( array , index ) ;
38662: LD_ADDR_VAR 0 1
38666: PUSH
38667: LD_VAR 0 1
38671: PPUSH
38672: LD_VAR 0 4
38676: PPUSH
38677: CALL_OW 3
38681: ST_TO_ADDR
// end ;
38682: GO 38606
38684: POP
38685: POP
// end ;
38686: LD_VAR 0 2
38690: RET
// export function GetBaseMaterials ( base ) ; begin
38691: LD_INT 0
38693: PPUSH
// result := [ 0 , 0 , 0 ] ;
38694: LD_ADDR_VAR 0 2
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: LD_INT 0
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: LIST
38712: ST_TO_ADDR
// if not base then
38713: LD_VAR 0 1
38717: NOT
38718: IFFALSE 38722
// exit ;
38720: GO 38771
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38722: LD_ADDR_VAR 0 2
38726: PUSH
38727: LD_VAR 0 1
38731: PPUSH
38732: LD_INT 1
38734: PPUSH
38735: CALL_OW 275
38739: PUSH
38740: LD_VAR 0 1
38744: PPUSH
38745: LD_INT 2
38747: PPUSH
38748: CALL_OW 275
38752: PUSH
38753: LD_VAR 0 1
38757: PPUSH
38758: LD_INT 3
38760: PPUSH
38761: CALL_OW 275
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: LIST
38770: ST_TO_ADDR
// end ;
38771: LD_VAR 0 2
38775: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38776: LD_INT 0
38778: PPUSH
38779: PPUSH
// result := array ;
38780: LD_ADDR_VAR 0 3
38784: PUSH
38785: LD_VAR 0 1
38789: ST_TO_ADDR
// if size >= result then
38790: LD_VAR 0 2
38794: PUSH
38795: LD_VAR 0 3
38799: GREATEREQUAL
38800: IFFALSE 38804
// exit ;
38802: GO 38854
// if size then
38804: LD_VAR 0 2
38808: IFFALSE 38854
// for i := array downto size do
38810: LD_ADDR_VAR 0 4
38814: PUSH
38815: DOUBLE
38816: LD_VAR 0 1
38820: INC
38821: ST_TO_ADDR
38822: LD_VAR 0 2
38826: PUSH
38827: FOR_DOWNTO
38828: IFFALSE 38852
// result := Delete ( result , result ) ;
38830: LD_ADDR_VAR 0 3
38834: PUSH
38835: LD_VAR 0 3
38839: PPUSH
38840: LD_VAR 0 3
38844: PPUSH
38845: CALL_OW 3
38849: ST_TO_ADDR
38850: GO 38827
38852: POP
38853: POP
// end ;
38854: LD_VAR 0 3
38858: RET
// export function ComExit ( unit ) ; var tmp ; begin
38859: LD_INT 0
38861: PPUSH
38862: PPUSH
// if not IsInUnit ( unit ) then
38863: LD_VAR 0 1
38867: PPUSH
38868: CALL_OW 310
38872: NOT
38873: IFFALSE 38877
// exit ;
38875: GO 38937
// tmp := IsInUnit ( unit ) ;
38877: LD_ADDR_VAR 0 3
38881: PUSH
38882: LD_VAR 0 1
38886: PPUSH
38887: CALL_OW 310
38891: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38892: LD_VAR 0 3
38896: PPUSH
38897: CALL_OW 247
38901: PUSH
38902: LD_INT 2
38904: EQUAL
38905: IFFALSE 38918
// ComExitVehicle ( unit ) else
38907: LD_VAR 0 1
38911: PPUSH
38912: CALL_OW 121
38916: GO 38927
// ComExitBuilding ( unit ) ;
38918: LD_VAR 0 1
38922: PPUSH
38923: CALL_OW 122
// result := tmp ;
38927: LD_ADDR_VAR 0 2
38931: PUSH
38932: LD_VAR 0 3
38936: ST_TO_ADDR
// end ;
38937: LD_VAR 0 2
38941: RET
// export function ComExitAll ( units ) ; var i ; begin
38942: LD_INT 0
38944: PPUSH
38945: PPUSH
// if not units then
38946: LD_VAR 0 1
38950: NOT
38951: IFFALSE 38955
// exit ;
38953: GO 38981
// for i in units do
38955: LD_ADDR_VAR 0 3
38959: PUSH
38960: LD_VAR 0 1
38964: PUSH
38965: FOR_IN
38966: IFFALSE 38979
// ComExit ( i ) ;
38968: LD_VAR 0 3
38972: PPUSH
38973: CALL 38859 0 1
38977: GO 38965
38979: POP
38980: POP
// end ;
38981: LD_VAR 0 2
38985: RET
// export function ResetHc ; begin
38986: LD_INT 0
38988: PPUSH
// InitHc ;
38989: CALL_OW 19
// hc_importance := 0 ;
38993: LD_ADDR_OWVAR 32
38997: PUSH
38998: LD_INT 0
39000: ST_TO_ADDR
// end ;
39001: LD_VAR 0 1
39005: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39006: LD_INT 0
39008: PPUSH
39009: PPUSH
39010: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39011: LD_ADDR_VAR 0 6
39015: PUSH
39016: LD_VAR 0 1
39020: PUSH
39021: LD_VAR 0 3
39025: PLUS
39026: PUSH
39027: LD_INT 2
39029: DIV
39030: ST_TO_ADDR
// if _x < 0 then
39031: LD_VAR 0 6
39035: PUSH
39036: LD_INT 0
39038: LESS
39039: IFFALSE 39056
// _x := _x * - 1 ;
39041: LD_ADDR_VAR 0 6
39045: PUSH
39046: LD_VAR 0 6
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: MUL
39055: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39056: LD_ADDR_VAR 0 7
39060: PUSH
39061: LD_VAR 0 2
39065: PUSH
39066: LD_VAR 0 4
39070: PLUS
39071: PUSH
39072: LD_INT 2
39074: DIV
39075: ST_TO_ADDR
// if _y < 0 then
39076: LD_VAR 0 7
39080: PUSH
39081: LD_INT 0
39083: LESS
39084: IFFALSE 39101
// _y := _y * - 1 ;
39086: LD_ADDR_VAR 0 7
39090: PUSH
39091: LD_VAR 0 7
39095: PUSH
39096: LD_INT 1
39098: NEG
39099: MUL
39100: ST_TO_ADDR
// result := [ _x , _y ] ;
39101: LD_ADDR_VAR 0 5
39105: PUSH
39106: LD_VAR 0 6
39110: PUSH
39111: LD_VAR 0 7
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: ST_TO_ADDR
// end ;
39120: LD_VAR 0 5
39124: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39125: LD_INT 0
39127: PPUSH
39128: PPUSH
39129: PPUSH
39130: PPUSH
// task := GetTaskList ( unit ) ;
39131: LD_ADDR_VAR 0 7
39135: PUSH
39136: LD_VAR 0 1
39140: PPUSH
39141: CALL_OW 437
39145: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39146: LD_VAR 0 7
39150: NOT
39151: PUSH
39152: LD_VAR 0 1
39156: PPUSH
39157: LD_VAR 0 2
39161: PPUSH
39162: CALL_OW 308
39166: NOT
39167: AND
39168: IFFALSE 39172
// exit ;
39170: GO 39290
// if IsInArea ( unit , area ) then
39172: LD_VAR 0 1
39176: PPUSH
39177: LD_VAR 0 2
39181: PPUSH
39182: CALL_OW 308
39186: IFFALSE 39204
// begin ComMoveToArea ( unit , goAway ) ;
39188: LD_VAR 0 1
39192: PPUSH
39193: LD_VAR 0 3
39197: PPUSH
39198: CALL_OW 113
// exit ;
39202: GO 39290
// end ; if task [ 1 ] [ 1 ] <> M then
39204: LD_VAR 0 7
39208: PUSH
39209: LD_INT 1
39211: ARRAY
39212: PUSH
39213: LD_INT 1
39215: ARRAY
39216: PUSH
39217: LD_STRING M
39219: NONEQUAL
39220: IFFALSE 39224
// exit ;
39222: GO 39290
// x := task [ 1 ] [ 2 ] ;
39224: LD_ADDR_VAR 0 5
39228: PUSH
39229: LD_VAR 0 7
39233: PUSH
39234: LD_INT 1
39236: ARRAY
39237: PUSH
39238: LD_INT 2
39240: ARRAY
39241: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39242: LD_ADDR_VAR 0 6
39246: PUSH
39247: LD_VAR 0 7
39251: PUSH
39252: LD_INT 1
39254: ARRAY
39255: PUSH
39256: LD_INT 3
39258: ARRAY
39259: ST_TO_ADDR
// if InArea ( x , y , area ) then
39260: LD_VAR 0 5
39264: PPUSH
39265: LD_VAR 0 6
39269: PPUSH
39270: LD_VAR 0 2
39274: PPUSH
39275: CALL_OW 309
39279: IFFALSE 39290
// ComStop ( unit ) ;
39281: LD_VAR 0 1
39285: PPUSH
39286: CALL_OW 141
// end ;
39290: LD_VAR 0 4
39294: RET
// export function Abs ( value ) ; begin
39295: LD_INT 0
39297: PPUSH
// result := value ;
39298: LD_ADDR_VAR 0 2
39302: PUSH
39303: LD_VAR 0 1
39307: ST_TO_ADDR
// if value < 0 then
39308: LD_VAR 0 1
39312: PUSH
39313: LD_INT 0
39315: LESS
39316: IFFALSE 39333
// result := value * - 1 ;
39318: LD_ADDR_VAR 0 2
39322: PUSH
39323: LD_VAR 0 1
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: MUL
39332: ST_TO_ADDR
// end ;
39333: LD_VAR 0 2
39337: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39338: LD_INT 0
39340: PPUSH
39341: PPUSH
39342: PPUSH
39343: PPUSH
39344: PPUSH
39345: PPUSH
39346: PPUSH
39347: PPUSH
// if not unit or not building then
39348: LD_VAR 0 1
39352: NOT
39353: PUSH
39354: LD_VAR 0 2
39358: NOT
39359: OR
39360: IFFALSE 39364
// exit ;
39362: GO 39590
// x := GetX ( building ) ;
39364: LD_ADDR_VAR 0 4
39368: PUSH
39369: LD_VAR 0 2
39373: PPUSH
39374: CALL_OW 250
39378: ST_TO_ADDR
// y := GetY ( building ) ;
39379: LD_ADDR_VAR 0 6
39383: PUSH
39384: LD_VAR 0 2
39388: PPUSH
39389: CALL_OW 251
39393: ST_TO_ADDR
// d := GetDir ( building ) ;
39394: LD_ADDR_VAR 0 8
39398: PUSH
39399: LD_VAR 0 2
39403: PPUSH
39404: CALL_OW 254
39408: ST_TO_ADDR
// r := 4 ;
39409: LD_ADDR_VAR 0 9
39413: PUSH
39414: LD_INT 4
39416: ST_TO_ADDR
// for i := 1 to 5 do
39417: LD_ADDR_VAR 0 10
39421: PUSH
39422: DOUBLE
39423: LD_INT 1
39425: DEC
39426: ST_TO_ADDR
39427: LD_INT 5
39429: PUSH
39430: FOR_TO
39431: IFFALSE 39588
// begin _x := ShiftX ( x , d , r + i ) ;
39433: LD_ADDR_VAR 0 5
39437: PUSH
39438: LD_VAR 0 4
39442: PPUSH
39443: LD_VAR 0 8
39447: PPUSH
39448: LD_VAR 0 9
39452: PUSH
39453: LD_VAR 0 10
39457: PLUS
39458: PPUSH
39459: CALL_OW 272
39463: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39464: LD_ADDR_VAR 0 7
39468: PUSH
39469: LD_VAR 0 6
39473: PPUSH
39474: LD_VAR 0 8
39478: PPUSH
39479: LD_VAR 0 9
39483: PUSH
39484: LD_VAR 0 10
39488: PLUS
39489: PPUSH
39490: CALL_OW 273
39494: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39495: LD_VAR 0 5
39499: PPUSH
39500: LD_VAR 0 7
39504: PPUSH
39505: CALL_OW 488
39509: PUSH
39510: LD_VAR 0 5
39514: PPUSH
39515: LD_VAR 0 7
39519: PPUSH
39520: CALL_OW 428
39524: PPUSH
39525: CALL_OW 247
39529: PUSH
39530: LD_INT 3
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: IN
39540: NOT
39541: AND
39542: IFFALSE 39586
// begin ComMoveXY ( unit , _x , _y ) ;
39544: LD_VAR 0 1
39548: PPUSH
39549: LD_VAR 0 5
39553: PPUSH
39554: LD_VAR 0 7
39558: PPUSH
39559: CALL_OW 111
// result := [ _x , _y ] ;
39563: LD_ADDR_VAR 0 3
39567: PUSH
39568: LD_VAR 0 5
39572: PUSH
39573: LD_VAR 0 7
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: ST_TO_ADDR
// exit ;
39582: POP
39583: POP
39584: GO 39590
// end ; end ;
39586: GO 39430
39588: POP
39589: POP
// end ;
39590: LD_VAR 0 3
39594: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39595: LD_INT 0
39597: PPUSH
39598: PPUSH
39599: PPUSH
// result := 0 ;
39600: LD_ADDR_VAR 0 3
39604: PUSH
39605: LD_INT 0
39607: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39608: LD_VAR 0 1
39612: PUSH
39613: LD_INT 0
39615: LESS
39616: PUSH
39617: LD_VAR 0 1
39621: PUSH
39622: LD_INT 8
39624: GREATER
39625: OR
39626: PUSH
39627: LD_VAR 0 2
39631: PUSH
39632: LD_INT 0
39634: LESS
39635: OR
39636: PUSH
39637: LD_VAR 0 2
39641: PUSH
39642: LD_INT 8
39644: GREATER
39645: OR
39646: IFFALSE 39650
// exit ;
39648: GO 39725
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39650: LD_ADDR_VAR 0 4
39654: PUSH
39655: LD_INT 22
39657: PUSH
39658: LD_VAR 0 2
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PPUSH
39667: CALL_OW 69
39671: PUSH
39672: FOR_IN
39673: IFFALSE 39723
// begin un := UnitShoot ( i ) ;
39675: LD_ADDR_VAR 0 5
39679: PUSH
39680: LD_VAR 0 4
39684: PPUSH
39685: CALL_OW 504
39689: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39690: LD_VAR 0 5
39694: PPUSH
39695: CALL_OW 255
39699: PUSH
39700: LD_VAR 0 1
39704: EQUAL
39705: IFFALSE 39721
// begin result := un ;
39707: LD_ADDR_VAR 0 3
39711: PUSH
39712: LD_VAR 0 5
39716: ST_TO_ADDR
// exit ;
39717: POP
39718: POP
39719: GO 39725
// end ; end ;
39721: GO 39672
39723: POP
39724: POP
// end ;
39725: LD_VAR 0 3
39729: RET
// export function GetCargoBay ( units ) ; begin
39730: LD_INT 0
39732: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39733: LD_ADDR_VAR 0 2
39737: PUSH
39738: LD_VAR 0 1
39742: PPUSH
39743: LD_INT 2
39745: PUSH
39746: LD_INT 34
39748: PUSH
39749: LD_INT 12
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 34
39758: PUSH
39759: LD_INT 51
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 34
39768: PUSH
39769: LD_INT 32
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 34
39778: PUSH
39779: LD_INT 89
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: PPUSH
39793: CALL_OW 72
39797: ST_TO_ADDR
// end ;
39798: LD_VAR 0 2
39802: RET
// export function Negate ( value ) ; begin
39803: LD_INT 0
39805: PPUSH
// result := not value ;
39806: LD_ADDR_VAR 0 2
39810: PUSH
39811: LD_VAR 0 1
39815: NOT
39816: ST_TO_ADDR
// end ;
39817: LD_VAR 0 2
39821: RET
// export function Inc ( value ) ; begin
39822: LD_INT 0
39824: PPUSH
// result := value + 1 ;
39825: LD_ADDR_VAR 0 2
39829: PUSH
39830: LD_VAR 0 1
39834: PUSH
39835: LD_INT 1
39837: PLUS
39838: ST_TO_ADDR
// end ;
39839: LD_VAR 0 2
39843: RET
// export function Dec ( value ) ; begin
39844: LD_INT 0
39846: PPUSH
// result := value - 1 ;
39847: LD_ADDR_VAR 0 2
39851: PUSH
39852: LD_VAR 0 1
39856: PUSH
39857: LD_INT 1
39859: MINUS
39860: ST_TO_ADDR
// end ;
39861: LD_VAR 0 2
39865: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39866: LD_INT 0
39868: PPUSH
39869: PPUSH
39870: PPUSH
39871: PPUSH
39872: PPUSH
39873: PPUSH
39874: PPUSH
39875: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39876: LD_VAR 0 1
39880: PPUSH
39881: LD_VAR 0 2
39885: PPUSH
39886: CALL_OW 488
39890: NOT
39891: PUSH
39892: LD_VAR 0 3
39896: PPUSH
39897: LD_VAR 0 4
39901: PPUSH
39902: CALL_OW 488
39906: NOT
39907: OR
39908: IFFALSE 39921
// begin result := - 1 ;
39910: LD_ADDR_VAR 0 5
39914: PUSH
39915: LD_INT 1
39917: NEG
39918: ST_TO_ADDR
// exit ;
39919: GO 40156
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39921: LD_ADDR_VAR 0 12
39925: PUSH
39926: LD_VAR 0 1
39930: PPUSH
39931: LD_VAR 0 2
39935: PPUSH
39936: LD_VAR 0 3
39940: PPUSH
39941: LD_VAR 0 4
39945: PPUSH
39946: CALL 39006 0 4
39950: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39951: LD_ADDR_VAR 0 11
39955: PUSH
39956: LD_VAR 0 1
39960: PPUSH
39961: LD_VAR 0 2
39965: PPUSH
39966: LD_VAR 0 12
39970: PUSH
39971: LD_INT 1
39973: ARRAY
39974: PPUSH
39975: LD_VAR 0 12
39979: PUSH
39980: LD_INT 2
39982: ARRAY
39983: PPUSH
39984: CALL_OW 298
39988: ST_TO_ADDR
// distance := 9999 ;
39989: LD_ADDR_VAR 0 10
39993: PUSH
39994: LD_INT 9999
39996: ST_TO_ADDR
// for i := 0 to 5 do
39997: LD_ADDR_VAR 0 6
40001: PUSH
40002: DOUBLE
40003: LD_INT 0
40005: DEC
40006: ST_TO_ADDR
40007: LD_INT 5
40009: PUSH
40010: FOR_TO
40011: IFFALSE 40154
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40013: LD_ADDR_VAR 0 7
40017: PUSH
40018: LD_VAR 0 1
40022: PPUSH
40023: LD_VAR 0 6
40027: PPUSH
40028: LD_VAR 0 11
40032: PPUSH
40033: CALL_OW 272
40037: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40038: LD_ADDR_VAR 0 8
40042: PUSH
40043: LD_VAR 0 2
40047: PPUSH
40048: LD_VAR 0 6
40052: PPUSH
40053: LD_VAR 0 11
40057: PPUSH
40058: CALL_OW 273
40062: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40063: LD_VAR 0 7
40067: PPUSH
40068: LD_VAR 0 8
40072: PPUSH
40073: CALL_OW 488
40077: NOT
40078: IFFALSE 40082
// continue ;
40080: GO 40010
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40082: LD_ADDR_VAR 0 9
40086: PUSH
40087: LD_VAR 0 12
40091: PUSH
40092: LD_INT 1
40094: ARRAY
40095: PPUSH
40096: LD_VAR 0 12
40100: PUSH
40101: LD_INT 2
40103: ARRAY
40104: PPUSH
40105: LD_VAR 0 7
40109: PPUSH
40110: LD_VAR 0 8
40114: PPUSH
40115: CALL_OW 298
40119: ST_TO_ADDR
// if tmp < distance then
40120: LD_VAR 0 9
40124: PUSH
40125: LD_VAR 0 10
40129: LESS
40130: IFFALSE 40152
// begin result := i ;
40132: LD_ADDR_VAR 0 5
40136: PUSH
40137: LD_VAR 0 6
40141: ST_TO_ADDR
// distance := tmp ;
40142: LD_ADDR_VAR 0 10
40146: PUSH
40147: LD_VAR 0 9
40151: ST_TO_ADDR
// end ; end ;
40152: GO 40010
40154: POP
40155: POP
// end ;
40156: LD_VAR 0 5
40160: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40161: LD_INT 0
40163: PPUSH
40164: PPUSH
// if not driver or not IsInUnit ( driver ) then
40165: LD_VAR 0 1
40169: NOT
40170: PUSH
40171: LD_VAR 0 1
40175: PPUSH
40176: CALL_OW 310
40180: NOT
40181: OR
40182: IFFALSE 40186
// exit ;
40184: GO 40276
// vehicle := IsInUnit ( driver ) ;
40186: LD_ADDR_VAR 0 3
40190: PUSH
40191: LD_VAR 0 1
40195: PPUSH
40196: CALL_OW 310
40200: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40201: LD_VAR 0 1
40205: PPUSH
40206: LD_STRING \
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: PUSH
40236: LD_STRING E
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: LD_VAR 0 3
40249: PUSH
40250: LD_INT 0
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PPUSH
40272: CALL_OW 446
// end ;
40276: LD_VAR 0 2
40280: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40281: LD_INT 0
40283: PPUSH
40284: PPUSH
// if not driver or not IsInUnit ( driver ) then
40285: LD_VAR 0 1
40289: NOT
40290: PUSH
40291: LD_VAR 0 1
40295: PPUSH
40296: CALL_OW 310
40300: NOT
40301: OR
40302: IFFALSE 40306
// exit ;
40304: GO 40396
// vehicle := IsInUnit ( driver ) ;
40306: LD_ADDR_VAR 0 3
40310: PUSH
40311: LD_VAR 0 1
40315: PPUSH
40316: CALL_OW 310
40320: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40321: LD_VAR 0 1
40325: PPUSH
40326: LD_STRING \
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: PUSH
40356: LD_STRING E
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: LD_VAR 0 3
40369: PUSH
40370: LD_INT 0
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PPUSH
40392: CALL_OW 447
// end ;
40396: LD_VAR 0 2
40400: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40401: LD_INT 0
40403: PPUSH
40404: PPUSH
40405: PPUSH
// tmp := [ ] ;
40406: LD_ADDR_VAR 0 5
40410: PUSH
40411: EMPTY
40412: ST_TO_ADDR
// for i in units do
40413: LD_ADDR_VAR 0 4
40417: PUSH
40418: LD_VAR 0 1
40422: PUSH
40423: FOR_IN
40424: IFFALSE 40462
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40426: LD_ADDR_VAR 0 5
40430: PUSH
40431: LD_VAR 0 5
40435: PPUSH
40436: LD_VAR 0 5
40440: PUSH
40441: LD_INT 1
40443: PLUS
40444: PPUSH
40445: LD_VAR 0 4
40449: PPUSH
40450: CALL_OW 256
40454: PPUSH
40455: CALL_OW 2
40459: ST_TO_ADDR
40460: GO 40423
40462: POP
40463: POP
// if not tmp then
40464: LD_VAR 0 5
40468: NOT
40469: IFFALSE 40473
// exit ;
40471: GO 40521
// if asc then
40473: LD_VAR 0 2
40477: IFFALSE 40501
// result := SortListByListAsc ( units , tmp ) else
40479: LD_ADDR_VAR 0 3
40483: PUSH
40484: LD_VAR 0 1
40488: PPUSH
40489: LD_VAR 0 5
40493: PPUSH
40494: CALL_OW 76
40498: ST_TO_ADDR
40499: GO 40521
// result := SortListByListDesc ( units , tmp ) ;
40501: LD_ADDR_VAR 0 3
40505: PUSH
40506: LD_VAR 0 1
40510: PPUSH
40511: LD_VAR 0 5
40515: PPUSH
40516: CALL_OW 77
40520: ST_TO_ADDR
// end ;
40521: LD_VAR 0 3
40525: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40526: LD_INT 0
40528: PPUSH
40529: PPUSH
// task := GetTaskList ( mech ) ;
40530: LD_ADDR_VAR 0 4
40534: PUSH
40535: LD_VAR 0 1
40539: PPUSH
40540: CALL_OW 437
40544: ST_TO_ADDR
// if not task then
40545: LD_VAR 0 4
40549: NOT
40550: IFFALSE 40554
// exit ;
40552: GO 40596
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40554: LD_ADDR_VAR 0 3
40558: PUSH
40559: LD_VAR 0 4
40563: PUSH
40564: LD_INT 1
40566: ARRAY
40567: PUSH
40568: LD_INT 1
40570: ARRAY
40571: PUSH
40572: LD_STRING r
40574: EQUAL
40575: PUSH
40576: LD_VAR 0 4
40580: PUSH
40581: LD_INT 1
40583: ARRAY
40584: PUSH
40585: LD_INT 4
40587: ARRAY
40588: PUSH
40589: LD_VAR 0 2
40593: EQUAL
40594: AND
40595: ST_TO_ADDR
// end ;
40596: LD_VAR 0 3
40600: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40601: LD_INT 0
40603: PPUSH
// SetDir ( unit , d ) ;
40604: LD_VAR 0 1
40608: PPUSH
40609: LD_VAR 0 4
40613: PPUSH
40614: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40618: LD_VAR 0 1
40622: PPUSH
40623: LD_VAR 0 2
40627: PPUSH
40628: LD_VAR 0 3
40632: PPUSH
40633: LD_VAR 0 5
40637: PPUSH
40638: CALL_OW 48
// end ;
40642: LD_VAR 0 6
40646: RET
// export function ToNaturalNumber ( number ) ; begin
40647: LD_INT 0
40649: PPUSH
// result := number div 1 ;
40650: LD_ADDR_VAR 0 2
40654: PUSH
40655: LD_VAR 0 1
40659: PUSH
40660: LD_INT 1
40662: DIV
40663: ST_TO_ADDR
// if number < 0 then
40664: LD_VAR 0 1
40668: PUSH
40669: LD_INT 0
40671: LESS
40672: IFFALSE 40682
// result := 0 ;
40674: LD_ADDR_VAR 0 2
40678: PUSH
40679: LD_INT 0
40681: ST_TO_ADDR
// end ;
40682: LD_VAR 0 2
40686: RET
// export function SortByClass ( units , class ) ; var un ; begin
40687: LD_INT 0
40689: PPUSH
40690: PPUSH
// if not units or not class then
40691: LD_VAR 0 1
40695: NOT
40696: PUSH
40697: LD_VAR 0 2
40701: NOT
40702: OR
40703: IFFALSE 40707
// exit ;
40705: GO 40802
// result := [ ] ;
40707: LD_ADDR_VAR 0 3
40711: PUSH
40712: EMPTY
40713: ST_TO_ADDR
// for un in units do
40714: LD_ADDR_VAR 0 4
40718: PUSH
40719: LD_VAR 0 1
40723: PUSH
40724: FOR_IN
40725: IFFALSE 40800
// if GetClass ( un ) = class then
40727: LD_VAR 0 4
40731: PPUSH
40732: CALL_OW 257
40736: PUSH
40737: LD_VAR 0 2
40741: EQUAL
40742: IFFALSE 40769
// result := Insert ( result , 1 , un ) else
40744: LD_ADDR_VAR 0 3
40748: PUSH
40749: LD_VAR 0 3
40753: PPUSH
40754: LD_INT 1
40756: PPUSH
40757: LD_VAR 0 4
40761: PPUSH
40762: CALL_OW 2
40766: ST_TO_ADDR
40767: GO 40798
// result := Replace ( result , result + 1 , un ) ;
40769: LD_ADDR_VAR 0 3
40773: PUSH
40774: LD_VAR 0 3
40778: PPUSH
40779: LD_VAR 0 3
40783: PUSH
40784: LD_INT 1
40786: PLUS
40787: PPUSH
40788: LD_VAR 0 4
40792: PPUSH
40793: CALL_OW 1
40797: ST_TO_ADDR
40798: GO 40724
40800: POP
40801: POP
// end ;
40802: LD_VAR 0 3
40806: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40807: LD_INT 0
40809: PPUSH
40810: PPUSH
40811: PPUSH
40812: PPUSH
40813: PPUSH
40814: PPUSH
40815: PPUSH
// result := [ ] ;
40816: LD_ADDR_VAR 0 4
40820: PUSH
40821: EMPTY
40822: ST_TO_ADDR
// if x - r < 0 then
40823: LD_VAR 0 1
40827: PUSH
40828: LD_VAR 0 3
40832: MINUS
40833: PUSH
40834: LD_INT 0
40836: LESS
40837: IFFALSE 40849
// min_x := 0 else
40839: LD_ADDR_VAR 0 8
40843: PUSH
40844: LD_INT 0
40846: ST_TO_ADDR
40847: GO 40865
// min_x := x - r ;
40849: LD_ADDR_VAR 0 8
40853: PUSH
40854: LD_VAR 0 1
40858: PUSH
40859: LD_VAR 0 3
40863: MINUS
40864: ST_TO_ADDR
// if y - r < 0 then
40865: LD_VAR 0 2
40869: PUSH
40870: LD_VAR 0 3
40874: MINUS
40875: PUSH
40876: LD_INT 0
40878: LESS
40879: IFFALSE 40891
// min_y := 0 else
40881: LD_ADDR_VAR 0 7
40885: PUSH
40886: LD_INT 0
40888: ST_TO_ADDR
40889: GO 40907
// min_y := y - r ;
40891: LD_ADDR_VAR 0 7
40895: PUSH
40896: LD_VAR 0 2
40900: PUSH
40901: LD_VAR 0 3
40905: MINUS
40906: ST_TO_ADDR
// max_x := x + r ;
40907: LD_ADDR_VAR 0 9
40911: PUSH
40912: LD_VAR 0 1
40916: PUSH
40917: LD_VAR 0 3
40921: PLUS
40922: ST_TO_ADDR
// max_y := y + r ;
40923: LD_ADDR_VAR 0 10
40927: PUSH
40928: LD_VAR 0 2
40932: PUSH
40933: LD_VAR 0 3
40937: PLUS
40938: ST_TO_ADDR
// for _x = min_x to max_x do
40939: LD_ADDR_VAR 0 5
40943: PUSH
40944: DOUBLE
40945: LD_VAR 0 8
40949: DEC
40950: ST_TO_ADDR
40951: LD_VAR 0 9
40955: PUSH
40956: FOR_TO
40957: IFFALSE 41058
// for _y = min_y to max_y do
40959: LD_ADDR_VAR 0 6
40963: PUSH
40964: DOUBLE
40965: LD_VAR 0 7
40969: DEC
40970: ST_TO_ADDR
40971: LD_VAR 0 10
40975: PUSH
40976: FOR_TO
40977: IFFALSE 41054
// begin if not ValidHex ( _x , _y ) then
40979: LD_VAR 0 5
40983: PPUSH
40984: LD_VAR 0 6
40988: PPUSH
40989: CALL_OW 488
40993: NOT
40994: IFFALSE 40998
// continue ;
40996: GO 40976
// if GetResourceTypeXY ( _x , _y ) then
40998: LD_VAR 0 5
41002: PPUSH
41003: LD_VAR 0 6
41007: PPUSH
41008: CALL_OW 283
41012: IFFALSE 41052
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41014: LD_ADDR_VAR 0 4
41018: PUSH
41019: LD_VAR 0 4
41023: PPUSH
41024: LD_VAR 0 4
41028: PUSH
41029: LD_INT 1
41031: PLUS
41032: PPUSH
41033: LD_VAR 0 5
41037: PUSH
41038: LD_VAR 0 6
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PPUSH
41047: CALL_OW 1
41051: ST_TO_ADDR
// end ;
41052: GO 40976
41054: POP
41055: POP
41056: GO 40956
41058: POP
41059: POP
// end ;
41060: LD_VAR 0 4
41064: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41065: LD_INT 0
41067: PPUSH
41068: PPUSH
41069: PPUSH
41070: PPUSH
41071: PPUSH
41072: PPUSH
41073: PPUSH
41074: PPUSH
// if not units then
41075: LD_VAR 0 1
41079: NOT
41080: IFFALSE 41084
// exit ;
41082: GO 41608
// result := UnitFilter ( units , [ f_ok ] ) ;
41084: LD_ADDR_VAR 0 3
41088: PUSH
41089: LD_VAR 0 1
41093: PPUSH
41094: LD_INT 50
41096: PUSH
41097: EMPTY
41098: LIST
41099: PPUSH
41100: CALL_OW 72
41104: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41105: LD_ADDR_VAR 0 8
41109: PUSH
41110: LD_VAR 0 1
41114: PUSH
41115: LD_INT 1
41117: ARRAY
41118: PPUSH
41119: CALL_OW 255
41123: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41124: LD_ADDR_VAR 0 10
41128: PUSH
41129: LD_INT 29
41131: PUSH
41132: LD_INT 91
41134: PUSH
41135: LD_INT 49
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: LIST
41142: ST_TO_ADDR
// if not result then
41143: LD_VAR 0 3
41147: NOT
41148: IFFALSE 41152
// exit ;
41150: GO 41608
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41152: LD_ADDR_VAR 0 5
41156: PUSH
41157: LD_INT 81
41159: PUSH
41160: LD_VAR 0 8
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PPUSH
41169: CALL_OW 69
41173: ST_TO_ADDR
// for i in result do
41174: LD_ADDR_VAR 0 4
41178: PUSH
41179: LD_VAR 0 3
41183: PUSH
41184: FOR_IN
41185: IFFALSE 41606
// begin tag := GetTag ( i ) + 1 ;
41187: LD_ADDR_VAR 0 9
41191: PUSH
41192: LD_VAR 0 4
41196: PPUSH
41197: CALL_OW 110
41201: PUSH
41202: LD_INT 1
41204: PLUS
41205: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41206: LD_ADDR_VAR 0 7
41210: PUSH
41211: LD_VAR 0 4
41215: PPUSH
41216: CALL_OW 250
41220: PPUSH
41221: LD_VAR 0 4
41225: PPUSH
41226: CALL_OW 251
41230: PPUSH
41231: LD_INT 6
41233: PPUSH
41234: CALL 40807 0 3
41238: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41239: LD_VAR 0 4
41243: PPUSH
41244: CALL_OW 247
41248: PUSH
41249: LD_INT 2
41251: EQUAL
41252: PUSH
41253: LD_VAR 0 7
41257: AND
41258: PUSH
41259: LD_VAR 0 4
41263: PPUSH
41264: CALL_OW 264
41268: PUSH
41269: LD_VAR 0 10
41273: IN
41274: NOT
41275: AND
41276: IFFALSE 41315
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41278: LD_VAR 0 4
41282: PPUSH
41283: LD_VAR 0 7
41287: PUSH
41288: LD_INT 1
41290: ARRAY
41291: PUSH
41292: LD_INT 1
41294: ARRAY
41295: PPUSH
41296: LD_VAR 0 7
41300: PUSH
41301: LD_INT 1
41303: ARRAY
41304: PUSH
41305: LD_INT 2
41307: ARRAY
41308: PPUSH
41309: CALL_OW 116
41313: GO 41604
// if path > tag then
41315: LD_VAR 0 2
41319: PUSH
41320: LD_VAR 0 9
41324: GREATER
41325: IFFALSE 41533
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41327: LD_ADDR_VAR 0 6
41331: PUSH
41332: LD_VAR 0 5
41336: PPUSH
41337: LD_INT 91
41339: PUSH
41340: LD_VAR 0 4
41344: PUSH
41345: LD_INT 8
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: LIST
41352: PPUSH
41353: CALL_OW 72
41357: ST_TO_ADDR
// if nearEnemy then
41358: LD_VAR 0 6
41362: IFFALSE 41431
// begin if GetWeapon ( i ) = ru_time_lapser then
41364: LD_VAR 0 4
41368: PPUSH
41369: CALL_OW 264
41373: PUSH
41374: LD_INT 49
41376: EQUAL
41377: IFFALSE 41405
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41379: LD_VAR 0 4
41383: PPUSH
41384: LD_VAR 0 6
41388: PPUSH
41389: LD_VAR 0 4
41393: PPUSH
41394: CALL_OW 74
41398: PPUSH
41399: CALL_OW 112
41403: GO 41429
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41405: LD_VAR 0 4
41409: PPUSH
41410: LD_VAR 0 6
41414: PPUSH
41415: LD_VAR 0 4
41419: PPUSH
41420: CALL_OW 74
41424: PPUSH
41425: CALL 42533 0 2
// end else
41429: GO 41531
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41431: LD_VAR 0 4
41435: PPUSH
41436: LD_VAR 0 2
41440: PUSH
41441: LD_VAR 0 9
41445: ARRAY
41446: PUSH
41447: LD_INT 1
41449: ARRAY
41450: PPUSH
41451: LD_VAR 0 2
41455: PUSH
41456: LD_VAR 0 9
41460: ARRAY
41461: PUSH
41462: LD_INT 2
41464: ARRAY
41465: PPUSH
41466: CALL_OW 297
41470: PUSH
41471: LD_INT 6
41473: GREATER
41474: IFFALSE 41517
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41476: LD_VAR 0 4
41480: PPUSH
41481: LD_VAR 0 2
41485: PUSH
41486: LD_VAR 0 9
41490: ARRAY
41491: PUSH
41492: LD_INT 1
41494: ARRAY
41495: PPUSH
41496: LD_VAR 0 2
41500: PUSH
41501: LD_VAR 0 9
41505: ARRAY
41506: PUSH
41507: LD_INT 2
41509: ARRAY
41510: PPUSH
41511: CALL_OW 114
41515: GO 41531
// SetTag ( i , tag ) ;
41517: LD_VAR 0 4
41521: PPUSH
41522: LD_VAR 0 9
41526: PPUSH
41527: CALL_OW 109
// end else
41531: GO 41604
// if enemy then
41533: LD_VAR 0 5
41537: IFFALSE 41604
// begin if GetWeapon ( i ) = ru_time_lapser then
41539: LD_VAR 0 4
41543: PPUSH
41544: CALL_OW 264
41548: PUSH
41549: LD_INT 49
41551: EQUAL
41552: IFFALSE 41580
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41554: LD_VAR 0 4
41558: PPUSH
41559: LD_VAR 0 5
41563: PPUSH
41564: LD_VAR 0 4
41568: PPUSH
41569: CALL_OW 74
41573: PPUSH
41574: CALL_OW 112
41578: GO 41604
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41580: LD_VAR 0 4
41584: PPUSH
41585: LD_VAR 0 5
41589: PPUSH
41590: LD_VAR 0 4
41594: PPUSH
41595: CALL_OW 74
41599: PPUSH
41600: CALL 42533 0 2
// end ; end ;
41604: GO 41184
41606: POP
41607: POP
// end ;
41608: LD_VAR 0 3
41612: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41613: LD_INT 0
41615: PPUSH
41616: PPUSH
41617: PPUSH
// if not unit or IsInUnit ( unit ) then
41618: LD_VAR 0 1
41622: NOT
41623: PUSH
41624: LD_VAR 0 1
41628: PPUSH
41629: CALL_OW 310
41633: OR
41634: IFFALSE 41638
// exit ;
41636: GO 41729
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41638: LD_ADDR_VAR 0 4
41642: PUSH
41643: LD_VAR 0 1
41647: PPUSH
41648: CALL_OW 250
41652: PPUSH
41653: LD_VAR 0 2
41657: PPUSH
41658: LD_INT 1
41660: PPUSH
41661: CALL_OW 272
41665: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41666: LD_ADDR_VAR 0 5
41670: PUSH
41671: LD_VAR 0 1
41675: PPUSH
41676: CALL_OW 251
41680: PPUSH
41681: LD_VAR 0 2
41685: PPUSH
41686: LD_INT 1
41688: PPUSH
41689: CALL_OW 273
41693: ST_TO_ADDR
// if ValidHex ( x , y ) then
41694: LD_VAR 0 4
41698: PPUSH
41699: LD_VAR 0 5
41703: PPUSH
41704: CALL_OW 488
41708: IFFALSE 41729
// ComTurnXY ( unit , x , y ) ;
41710: LD_VAR 0 1
41714: PPUSH
41715: LD_VAR 0 4
41719: PPUSH
41720: LD_VAR 0 5
41724: PPUSH
41725: CALL_OW 118
// end ;
41729: LD_VAR 0 3
41733: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41734: LD_INT 0
41736: PPUSH
41737: PPUSH
// result := false ;
41738: LD_ADDR_VAR 0 3
41742: PUSH
41743: LD_INT 0
41745: ST_TO_ADDR
// if not units then
41746: LD_VAR 0 2
41750: NOT
41751: IFFALSE 41755
// exit ;
41753: GO 41800
// for i in units do
41755: LD_ADDR_VAR 0 4
41759: PUSH
41760: LD_VAR 0 2
41764: PUSH
41765: FOR_IN
41766: IFFALSE 41798
// if See ( side , i ) then
41768: LD_VAR 0 1
41772: PPUSH
41773: LD_VAR 0 4
41777: PPUSH
41778: CALL_OW 292
41782: IFFALSE 41796
// begin result := true ;
41784: LD_ADDR_VAR 0 3
41788: PUSH
41789: LD_INT 1
41791: ST_TO_ADDR
// exit ;
41792: POP
41793: POP
41794: GO 41800
// end ;
41796: GO 41765
41798: POP
41799: POP
// end ;
41800: LD_VAR 0 3
41804: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41805: LD_INT 0
41807: PPUSH
41808: PPUSH
41809: PPUSH
41810: PPUSH
// if not unit or not points then
41811: LD_VAR 0 1
41815: NOT
41816: PUSH
41817: LD_VAR 0 2
41821: NOT
41822: OR
41823: IFFALSE 41827
// exit ;
41825: GO 41917
// dist := 99999 ;
41827: LD_ADDR_VAR 0 5
41831: PUSH
41832: LD_INT 99999
41834: ST_TO_ADDR
// for i in points do
41835: LD_ADDR_VAR 0 4
41839: PUSH
41840: LD_VAR 0 2
41844: PUSH
41845: FOR_IN
41846: IFFALSE 41915
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41848: LD_ADDR_VAR 0 6
41852: PUSH
41853: LD_VAR 0 1
41857: PPUSH
41858: LD_VAR 0 4
41862: PUSH
41863: LD_INT 1
41865: ARRAY
41866: PPUSH
41867: LD_VAR 0 4
41871: PUSH
41872: LD_INT 2
41874: ARRAY
41875: PPUSH
41876: CALL_OW 297
41880: ST_TO_ADDR
// if tmpDist < dist then
41881: LD_VAR 0 6
41885: PUSH
41886: LD_VAR 0 5
41890: LESS
41891: IFFALSE 41913
// begin result := i ;
41893: LD_ADDR_VAR 0 3
41897: PUSH
41898: LD_VAR 0 4
41902: ST_TO_ADDR
// dist := tmpDist ;
41903: LD_ADDR_VAR 0 5
41907: PUSH
41908: LD_VAR 0 6
41912: ST_TO_ADDR
// end ; end ;
41913: GO 41845
41915: POP
41916: POP
// end ;
41917: LD_VAR 0 3
41921: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41922: LD_INT 0
41924: PPUSH
// uc_side := side ;
41925: LD_ADDR_OWVAR 20
41929: PUSH
41930: LD_VAR 0 1
41934: ST_TO_ADDR
// uc_nation := 3 ;
41935: LD_ADDR_OWVAR 21
41939: PUSH
41940: LD_INT 3
41942: ST_TO_ADDR
// vc_chassis := 25 ;
41943: LD_ADDR_OWVAR 37
41947: PUSH
41948: LD_INT 25
41950: ST_TO_ADDR
// vc_engine := engine_siberite ;
41951: LD_ADDR_OWVAR 39
41955: PUSH
41956: LD_INT 3
41958: ST_TO_ADDR
// vc_control := control_computer ;
41959: LD_ADDR_OWVAR 38
41963: PUSH
41964: LD_INT 3
41966: ST_TO_ADDR
// vc_weapon := 59 ;
41967: LD_ADDR_OWVAR 40
41971: PUSH
41972: LD_INT 59
41974: ST_TO_ADDR
// result := CreateVehicle ;
41975: LD_ADDR_VAR 0 5
41979: PUSH
41980: CALL_OW 45
41984: ST_TO_ADDR
// SetDir ( result , d ) ;
41985: LD_VAR 0 5
41989: PPUSH
41990: LD_VAR 0 4
41994: PPUSH
41995: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41999: LD_VAR 0 5
42003: PPUSH
42004: LD_VAR 0 2
42008: PPUSH
42009: LD_VAR 0 3
42013: PPUSH
42014: LD_INT 0
42016: PPUSH
42017: CALL_OW 48
// end ;
42021: LD_VAR 0 5
42025: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42026: LD_INT 0
42028: PPUSH
42029: PPUSH
42030: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42031: LD_ADDR_VAR 0 2
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42054: LD_VAR 0 1
42058: NOT
42059: PUSH
42060: LD_VAR 0 1
42064: PPUSH
42065: CALL_OW 264
42069: PUSH
42070: LD_INT 12
42072: PUSH
42073: LD_INT 51
42075: PUSH
42076: LD_INT 32
42078: PUSH
42079: LD_INT 89
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: IN
42088: NOT
42089: OR
42090: IFFALSE 42094
// exit ;
42092: GO 42192
// for i := 1 to 3 do
42094: LD_ADDR_VAR 0 3
42098: PUSH
42099: DOUBLE
42100: LD_INT 1
42102: DEC
42103: ST_TO_ADDR
42104: LD_INT 3
42106: PUSH
42107: FOR_TO
42108: IFFALSE 42190
// begin tmp := GetCargo ( cargo , i ) ;
42110: LD_ADDR_VAR 0 4
42114: PUSH
42115: LD_VAR 0 1
42119: PPUSH
42120: LD_VAR 0 3
42124: PPUSH
42125: CALL_OW 289
42129: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42130: LD_ADDR_VAR 0 2
42134: PUSH
42135: LD_VAR 0 2
42139: PPUSH
42140: LD_VAR 0 3
42144: PPUSH
42145: LD_VAR 0 4
42149: PPUSH
42150: CALL_OW 1
42154: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42155: LD_ADDR_VAR 0 2
42159: PUSH
42160: LD_VAR 0 2
42164: PPUSH
42165: LD_INT 4
42167: PPUSH
42168: LD_VAR 0 2
42172: PUSH
42173: LD_INT 4
42175: ARRAY
42176: PUSH
42177: LD_VAR 0 4
42181: PLUS
42182: PPUSH
42183: CALL_OW 1
42187: ST_TO_ADDR
// end ;
42188: GO 42107
42190: POP
42191: POP
// end ;
42192: LD_VAR 0 2
42196: RET
// export function Length ( array ) ; begin
42197: LD_INT 0
42199: PPUSH
// result := array + 0 ;
42200: LD_ADDR_VAR 0 2
42204: PUSH
42205: LD_VAR 0 1
42209: PUSH
42210: LD_INT 0
42212: PLUS
42213: ST_TO_ADDR
// end ;
42214: LD_VAR 0 2
42218: RET
// export function PrepareArray ( array ) ; begin
42219: LD_INT 0
42221: PPUSH
// result := array diff 0 ;
42222: LD_ADDR_VAR 0 2
42226: PUSH
42227: LD_VAR 0 1
42231: PUSH
42232: LD_INT 0
42234: DIFF
42235: ST_TO_ADDR
// if not result [ 1 ] then
42236: LD_VAR 0 2
42240: PUSH
42241: LD_INT 1
42243: ARRAY
42244: NOT
42245: IFFALSE 42265
// result := Delete ( result , 1 ) ;
42247: LD_ADDR_VAR 0 2
42251: PUSH
42252: LD_VAR 0 2
42256: PPUSH
42257: LD_INT 1
42259: PPUSH
42260: CALL_OW 3
42264: ST_TO_ADDR
// end ;
42265: LD_VAR 0 2
42269: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42270: LD_INT 0
42272: PPUSH
42273: PPUSH
42274: PPUSH
42275: PPUSH
// sibRocketRange := 25 ;
42276: LD_ADDR_VAR 0 6
42280: PUSH
42281: LD_INT 25
42283: ST_TO_ADDR
// result := false ;
42284: LD_ADDR_VAR 0 4
42288: PUSH
42289: LD_INT 0
42291: ST_TO_ADDR
// for i := 0 to 5 do
42292: LD_ADDR_VAR 0 5
42296: PUSH
42297: DOUBLE
42298: LD_INT 0
42300: DEC
42301: ST_TO_ADDR
42302: LD_INT 5
42304: PUSH
42305: FOR_TO
42306: IFFALSE 42373
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42308: LD_VAR 0 1
42312: PPUSH
42313: LD_VAR 0 5
42317: PPUSH
42318: LD_VAR 0 6
42322: PPUSH
42323: CALL_OW 272
42327: PPUSH
42328: LD_VAR 0 2
42332: PPUSH
42333: LD_VAR 0 5
42337: PPUSH
42338: LD_VAR 0 6
42342: PPUSH
42343: CALL_OW 273
42347: PPUSH
42348: LD_VAR 0 3
42352: PPUSH
42353: CALL_OW 309
42357: IFFALSE 42371
// begin result := true ;
42359: LD_ADDR_VAR 0 4
42363: PUSH
42364: LD_INT 1
42366: ST_TO_ADDR
// exit ;
42367: POP
42368: POP
42369: GO 42375
// end ;
42371: GO 42305
42373: POP
42374: POP
// end ;
42375: LD_VAR 0 4
42379: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42380: LD_INT 0
42382: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42383: LD_VAR 0 1
42387: PPUSH
42388: LD_VAR 0 2
42392: PPUSH
42393: LD_INT 0
42395: PPUSH
42396: LD_INT 0
42398: PPUSH
42399: LD_INT 1
42401: PPUSH
42402: LD_INT 0
42404: PPUSH
42405: CALL_OW 587
// end ;
42409: LD_VAR 0 3
42413: RET
// export function CenterOnNow ( unit ) ; begin
42414: LD_INT 0
42416: PPUSH
// result := IsInUnit ( unit ) ;
42417: LD_ADDR_VAR 0 2
42421: PUSH
42422: LD_VAR 0 1
42426: PPUSH
42427: CALL_OW 310
42431: ST_TO_ADDR
// if not result then
42432: LD_VAR 0 2
42436: NOT
42437: IFFALSE 42449
// result := unit ;
42439: LD_ADDR_VAR 0 2
42443: PUSH
42444: LD_VAR 0 1
42448: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42449: LD_VAR 0 1
42453: PPUSH
42454: CALL_OW 87
// end ;
42458: LD_VAR 0 2
42462: RET
// export function ComMoveHex ( unit , hex ) ; begin
42463: LD_INT 0
42465: PPUSH
// if not hex then
42466: LD_VAR 0 2
42470: NOT
42471: IFFALSE 42475
// exit ;
42473: GO 42528
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42475: LD_VAR 0 2
42479: PUSH
42480: LD_INT 1
42482: ARRAY
42483: PPUSH
42484: LD_VAR 0 2
42488: PUSH
42489: LD_INT 2
42491: ARRAY
42492: PPUSH
42493: CALL_OW 428
42497: IFFALSE 42501
// exit ;
42499: GO 42528
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
42501: LD_VAR 0 1
42505: PPUSH
42506: LD_VAR 0 2
42510: PUSH
42511: LD_INT 1
42513: ARRAY
42514: PPUSH
42515: LD_VAR 0 2
42519: PUSH
42520: LD_INT 2
42522: ARRAY
42523: PPUSH
42524: CALL_OW 111
// end ;
42528: LD_VAR 0 3
42532: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
42533: LD_INT 0
42535: PPUSH
42536: PPUSH
42537: PPUSH
// if not unit or not enemy then
42538: LD_VAR 0 1
42542: NOT
42543: PUSH
42544: LD_VAR 0 2
42548: NOT
42549: OR
42550: IFFALSE 42554
// exit ;
42552: GO 42678
// x := GetX ( enemy ) ;
42554: LD_ADDR_VAR 0 4
42558: PUSH
42559: LD_VAR 0 2
42563: PPUSH
42564: CALL_OW 250
42568: ST_TO_ADDR
// y := GetY ( enemy ) ;
42569: LD_ADDR_VAR 0 5
42573: PUSH
42574: LD_VAR 0 2
42578: PPUSH
42579: CALL_OW 251
42583: ST_TO_ADDR
// if ValidHex ( x , y ) then
42584: LD_VAR 0 4
42588: PPUSH
42589: LD_VAR 0 5
42593: PPUSH
42594: CALL_OW 488
42598: IFFALSE 42678
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
42600: LD_VAR 0 2
42604: PPUSH
42605: CALL_OW 247
42609: PUSH
42610: LD_INT 3
42612: PUSH
42613: LD_INT 2
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: IN
42620: PUSH
42621: LD_VAR 0 1
42625: PPUSH
42626: CALL_OW 255
42630: PPUSH
42631: LD_VAR 0 2
42635: PPUSH
42636: CALL_OW 292
42640: AND
42641: IFFALSE 42659
// ComAttackUnit ( unit , enemy ) else
42643: LD_VAR 0 1
42647: PPUSH
42648: LD_VAR 0 2
42652: PPUSH
42653: CALL_OW 115
42657: GO 42678
// ComAgressiveMove ( unit , x , y ) ;
42659: LD_VAR 0 1
42663: PPUSH
42664: LD_VAR 0 4
42668: PPUSH
42669: LD_VAR 0 5
42673: PPUSH
42674: CALL_OW 114
// end ; end_of_file
42678: LD_VAR 0 3
42682: RET
// export ecoSide , ecoNation , ecoPeopleAmount , ecoStartPoint , ecoCratesDrop , ecoCratesDropXY , ecoCratesDropAllow , ecoAttacksAllow , ecoEventsAllow , ecoAttacksArea , ecoEventsList ; export function InitEcoMode ( startPoint , cratesDropXY , attacksArea ) ; var i , tmp , side , nation , peopleAmount , resourcesAmount ; begin
42683: LD_INT 0
42685: PPUSH
42686: PPUSH
42687: PPUSH
42688: PPUSH
42689: PPUSH
42690: PPUSH
42691: PPUSH
// ecoStartPoint := startPoint ;
42692: LD_ADDR_EXP 6
42696: PUSH
42697: LD_VAR 0 1
42701: ST_TO_ADDR
// CenterNowOnXY ( ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
42702: LD_EXP 6
42706: PUSH
42707: LD_INT 1
42709: ARRAY
42710: PPUSH
42711: LD_EXP 6
42715: PUSH
42716: LD_INT 2
42718: ARRAY
42719: PPUSH
42720: CALL_OW 86
// ecoCratesDropXY := cratesDropXY ;
42724: LD_ADDR_EXP 8
42728: PUSH
42729: LD_VAR 0 2
42733: ST_TO_ADDR
// ecoAttacksArea := attacksArea ;
42734: LD_ADDR_EXP 12
42738: PUSH
42739: LD_VAR 0 3
42743: ST_TO_ADDR
// if debug then
42744: LD_EXP 1
42748: IFFALSE 42792
// begin side := 1 ;
42750: LD_ADDR_VAR 0 7
42754: PUSH
42755: LD_INT 1
42757: ST_TO_ADDR
// nation := 1 ;
42758: LD_ADDR_VAR 0 8
42762: PUSH
42763: LD_INT 1
42765: ST_TO_ADDR
// peopleAmount := 15 ;
42766: LD_ADDR_VAR 0 9
42770: PUSH
42771: LD_INT 15
42773: ST_TO_ADDR
// resourcesAmount := 2 ;
42774: LD_ADDR_VAR 0 10
42778: PUSH
42779: LD_INT 2
42781: ST_TO_ADDR
// ecoCratesDrop := 3 ;
42782: LD_ADDR_EXP 7
42786: PUSH
42787: LD_INT 3
42789: ST_TO_ADDR
// end else
42790: GO 42888
// begin side := GetMultiplayerSetting ( 0 ) ;
42792: LD_ADDR_VAR 0 7
42796: PUSH
42797: LD_INT 0
42799: PPUSH
42800: CALL_OW 426
42804: ST_TO_ADDR
// nation := GetMultiplayerSetting ( 1 ) ;
42805: LD_ADDR_VAR 0 8
42809: PUSH
42810: LD_INT 1
42812: PPUSH
42813: CALL_OW 426
42817: ST_TO_ADDR
// peopleAmount := [ 6 , 9 , 12 , 15 , 18 , 21 , 24 ] [ GetMultiplayerSetting ( 2 ) ] ;
42818: LD_ADDR_VAR 0 9
42822: PUSH
42823: LD_INT 6
42825: PUSH
42826: LD_INT 9
42828: PUSH
42829: LD_INT 12
42831: PUSH
42832: LD_INT 15
42834: PUSH
42835: LD_INT 18
42837: PUSH
42838: LD_INT 21
42840: PUSH
42841: LD_INT 24
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 2
42855: PPUSH
42856: CALL_OW 426
42860: ARRAY
42861: ST_TO_ADDR
// resourcesAmount := GetMultiplayerSetting ( 3 ) ;
42862: LD_ADDR_VAR 0 10
42866: PUSH
42867: LD_INT 3
42869: PPUSH
42870: CALL_OW 426
42874: ST_TO_ADDR
// ecoCratesDrop := GetMultiplayerSetting ( 4 ) ;
42875: LD_ADDR_EXP 7
42879: PUSH
42880: LD_INT 4
42882: PPUSH
42883: CALL_OW 426
42887: ST_TO_ADDR
// end ; ecoCratesDropAllow := true ;
42888: LD_ADDR_EXP 9
42892: PUSH
42893: LD_INT 1
42895: ST_TO_ADDR
// ecoEventsAllow := false ;
42896: LD_ADDR_EXP 11
42900: PUSH
42901: LD_INT 0
42903: ST_TO_ADDR
// ecoAttacksAllow := false ;
42904: LD_ADDR_EXP 10
42908: PUSH
42909: LD_INT 0
42911: ST_TO_ADDR
// ecoSide := side ;
42912: LD_ADDR_EXP 3
42916: PUSH
42917: LD_VAR 0 7
42921: ST_TO_ADDR
// your_side := side ;
42922: LD_ADDR_OWVAR 2
42926: PUSH
42927: LD_VAR 0 7
42931: ST_TO_ADDR
// ChangeSideFog ( 1 , side ) ;
42932: LD_INT 1
42934: PPUSH
42935: LD_VAR 0 7
42939: PPUSH
42940: CALL_OW 343
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
42944: LD_INT 1
42946: PPUSH
42947: LD_INT 1
42949: PPUSH
42950: LD_VAR 0 7
42954: PPUSH
42955: LD_INT 32793
42957: NEG
42958: PPUSH
42959: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
42963: LD_INT 1
42965: PPUSH
42966: LD_INT 1
42968: PPUSH
42969: LD_VAR 0 7
42973: PPUSH
42974: CALL_OW 331
// ecoNation := nation ;
42978: LD_ADDR_EXP 4
42982: PUSH
42983: LD_VAR 0 8
42987: ST_TO_ADDR
// ecoPeopleAmount := peopleAmount ;
42988: LD_ADDR_EXP 5
42992: PUSH
42993: LD_VAR 0 9
42997: ST_TO_ADDR
// for i = 1 to resourcesAmount * 5 do
42998: LD_ADDR_VAR 0 5
43002: PUSH
43003: DOUBLE
43004: LD_INT 1
43006: DEC
43007: ST_TO_ADDR
43008: LD_VAR 0 10
43012: PUSH
43013: LD_INT 5
43015: MUL
43016: PUSH
43017: FOR_TO
43018: IFFALSE 43056
// CreateResourcesXYR ( mat_cans , 5 , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 6 , false ) ;
43020: LD_INT 1
43022: PPUSH
43023: LD_INT 5
43025: PPUSH
43026: LD_EXP 6
43030: PUSH
43031: LD_INT 1
43033: ARRAY
43034: PPUSH
43035: LD_EXP 6
43039: PUSH
43040: LD_INT 2
43042: ARRAY
43043: PPUSH
43044: LD_INT 6
43046: PPUSH
43047: LD_INT 0
43049: PPUSH
43050: CALL_OW 60
43054: GO 43017
43056: POP
43057: POP
// uc_side := side ;
43058: LD_ADDR_OWVAR 20
43062: PUSH
43063: LD_VAR 0 7
43067: ST_TO_ADDR
// uc_nation := nation ;
43068: LD_ADDR_OWVAR 21
43072: PUSH
43073: LD_VAR 0 8
43077: ST_TO_ADDR
// hc_importance := 100 ;
43078: LD_ADDR_OWVAR 32
43082: PUSH
43083: LD_INT 100
43085: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
43086: LD_INT 0
43088: PPUSH
43089: LD_INT 1
43091: PPUSH
43092: LD_INT 4
43094: PPUSH
43095: CALL_OW 380
// if side = 1 and nation = 1 then
43099: LD_VAR 0 7
43103: PUSH
43104: LD_INT 1
43106: EQUAL
43107: PUSH
43108: LD_VAR 0 8
43112: PUSH
43113: LD_INT 1
43115: EQUAL
43116: AND
43117: IFFALSE 43151
// begin hc_name := John Macmilan ;
43119: LD_ADDR_OWVAR 26
43123: PUSH
43124: LD_STRING John Macmilan
43126: ST_TO_ADDR
// hc_gallery := us ;
43127: LD_ADDR_OWVAR 33
43131: PUSH
43132: LD_STRING us
43134: ST_TO_ADDR
// hc_face_number := 5 ;
43135: LD_ADDR_OWVAR 34
43139: PUSH
43140: LD_INT 5
43142: ST_TO_ADDR
// hc_sex := sex_male ;
43143: LD_ADDR_OWVAR 27
43147: PUSH
43148: LD_INT 1
43150: ST_TO_ADDR
// end ; if side = 2 and nation = 2 then
43151: LD_VAR 0 7
43155: PUSH
43156: LD_INT 2
43158: EQUAL
43159: PUSH
43160: LD_VAR 0 8
43164: PUSH
43165: LD_INT 2
43167: EQUAL
43168: AND
43169: IFFALSE 43203
// begin hc_name := Heike Steyer ;
43171: LD_ADDR_OWVAR 26
43175: PUSH
43176: LD_STRING Heike Steyer
43178: ST_TO_ADDR
// hc_gallery := sandar ;
43179: LD_ADDR_OWVAR 33
43183: PUSH
43184: LD_STRING sandar
43186: ST_TO_ADDR
// hc_face_number := 14 ;
43187: LD_ADDR_OWVAR 34
43191: PUSH
43192: LD_INT 14
43194: ST_TO_ADDR
// hc_sex := sex_female ;
43195: LD_ADDR_OWVAR 27
43199: PUSH
43200: LD_INT 2
43202: ST_TO_ADDR
// end ; if side = 5 and nation = 2 then
43203: LD_VAR 0 7
43207: PUSH
43208: LD_INT 5
43210: EQUAL
43211: PUSH
43212: LD_VAR 0 8
43216: PUSH
43217: LD_INT 2
43219: EQUAL
43220: AND
43221: IFFALSE 43263
// begin hc_name := Omar Ali ;
43223: LD_ADDR_OWVAR 26
43227: PUSH
43228: LD_STRING Omar Ali
43230: ST_TO_ADDR
// hc_gallery := sandar ;
43231: LD_ADDR_OWVAR 33
43235: PUSH
43236: LD_STRING sandar
43238: ST_TO_ADDR
// hc_face_number := 6 ;
43239: LD_ADDR_OWVAR 34
43243: PUSH
43244: LD_INT 6
43246: ST_TO_ADDR
// hc_sex := sex_male ;
43247: LD_ADDR_OWVAR 27
43251: PUSH
43252: LD_INT 1
43254: ST_TO_ADDR
// hc_class := class_desert_warior ;
43255: LD_ADDR_OWVAR 28
43259: PUSH
43260: LD_INT 11
43262: ST_TO_ADDR
// end ; if side = 6 and nation = 3 then
43263: LD_VAR 0 7
43267: PUSH
43268: LD_INT 6
43270: EQUAL
43271: PUSH
43272: LD_VAR 0 8
43276: PUSH
43277: LD_INT 3
43279: EQUAL
43280: AND
43281: IFFALSE 43328
// begin PrepareHuman ( false , 3 , 4 ) ;
43283: LD_INT 0
43285: PPUSH
43286: LD_INT 3
43288: PPUSH
43289: LD_INT 4
43291: PPUSH
43292: CALL_OW 380
// hc_name := Yuri I. Burlak ;
43296: LD_ADDR_OWVAR 26
43300: PUSH
43301: LD_STRING Yuri I. Burlak
43303: ST_TO_ADDR
// hc_gallery := ru ;
43304: LD_ADDR_OWVAR 33
43308: PUSH
43309: LD_STRING ru
43311: ST_TO_ADDR
// hc_face_number := 1 ;
43312: LD_ADDR_OWVAR 34
43316: PUSH
43317: LD_INT 1
43319: ST_TO_ADDR
// hc_sex := sex_male ;
43320: LD_ADDR_OWVAR 27
43324: PUSH
43325: LD_INT 1
43327: ST_TO_ADDR
// end ; if side = 4 and nation = 1 then
43328: LD_VAR 0 7
43332: PUSH
43333: LD_INT 4
43335: EQUAL
43336: PUSH
43337: LD_VAR 0 8
43341: PUSH
43342: LD_INT 1
43344: EQUAL
43345: AND
43346: IFFALSE 43380
// begin hc_name := Arthur Powell ;
43348: LD_ADDR_OWVAR 26
43352: PUSH
43353: LD_STRING Arthur Powell
43355: ST_TO_ADDR
// hc_gallery := us ;
43356: LD_ADDR_OWVAR 33
43360: PUSH
43361: LD_STRING us
43363: ST_TO_ADDR
// hc_face_number := 7 ;
43364: LD_ADDR_OWVAR 34
43368: PUSH
43369: LD_INT 7
43371: ST_TO_ADDR
// hc_sex := sex_male ;
43372: LD_ADDR_OWVAR 27
43376: PUSH
43377: LD_INT 1
43379: ST_TO_ADDR
// end ; if side = 3 and nation = 3 then
43380: LD_VAR 0 7
43384: PUSH
43385: LD_INT 3
43387: EQUAL
43388: PUSH
43389: LD_VAR 0 8
43393: PUSH
43394: LD_INT 3
43396: EQUAL
43397: AND
43398: IFFALSE 43432
// begin hc_name := Mjr. Platonov ;
43400: LD_ADDR_OWVAR 26
43404: PUSH
43405: LD_STRING Mjr. Platonov
43407: ST_TO_ADDR
// hc_gallery := ru ;
43408: LD_ADDR_OWVAR 33
43412: PUSH
43413: LD_STRING ru
43415: ST_TO_ADDR
// hc_face_number := 60 ;
43416: LD_ADDR_OWVAR 34
43420: PUSH
43421: LD_INT 60
43423: ST_TO_ADDR
// hc_sex := sex_male ;
43424: LD_ADDR_OWVAR 27
43428: PUSH
43429: LD_INT 1
43431: ST_TO_ADDR
// end ; if side = 7 and nation = 1 then
43432: LD_VAR 0 7
43436: PUSH
43437: LD_INT 7
43439: EQUAL
43440: PUSH
43441: LD_VAR 0 8
43445: PUSH
43446: LD_INT 1
43448: EQUAL
43449: AND
43450: IFFALSE 43497
// begin PrepareHuman ( false , 4 , 4 ) ;
43452: LD_INT 0
43454: PPUSH
43455: LD_INT 4
43457: PPUSH
43458: LD_INT 4
43460: PPUSH
43461: CALL_OW 380
// hc_name := Peter Roth ;
43465: LD_ADDR_OWVAR 26
43469: PUSH
43470: LD_STRING Peter Roth
43472: ST_TO_ADDR
// hc_gallery := us ;
43473: LD_ADDR_OWVAR 33
43477: PUSH
43478: LD_STRING us
43480: ST_TO_ADDR
// hc_face_number := 22 ;
43481: LD_ADDR_OWVAR 34
43485: PUSH
43486: LD_INT 22
43488: ST_TO_ADDR
// hc_sex := sex_male ;
43489: LD_ADDR_OWVAR 27
43493: PUSH
43494: LD_INT 1
43496: ST_TO_ADDR
// end ; if side = 7 and nation = 3 then
43497: LD_VAR 0 7
43501: PUSH
43502: LD_INT 7
43504: EQUAL
43505: PUSH
43506: LD_VAR 0 8
43510: PUSH
43511: LD_INT 3
43513: EQUAL
43514: AND
43515: IFFALSE 43562
// begin PrepareHuman ( false , 4 , 4 ) ;
43517: LD_INT 0
43519: PPUSH
43520: LD_INT 4
43522: PPUSH
43523: LD_INT 4
43525: PPUSH
43526: CALL_OW 380
// hc_name := Prof. Gossudarov ;
43530: LD_ADDR_OWVAR 26
43534: PUSH
43535: LD_STRING Prof. Gossudarov
43537: ST_TO_ADDR
// hc_gallery := ru ;
43538: LD_ADDR_OWVAR 33
43542: PUSH
43543: LD_STRING ru
43545: ST_TO_ADDR
// hc_face_number := 61 ;
43546: LD_ADDR_OWVAR 34
43550: PUSH
43551: LD_INT 61
43553: ST_TO_ADDR
// hc_sex := sex_male ;
43554: LD_ADDR_OWVAR 27
43558: PUSH
43559: LD_INT 1
43561: ST_TO_ADDR
// end ; if side = 8 and nation = 1 then
43562: LD_VAR 0 7
43566: PUSH
43567: LD_INT 8
43569: EQUAL
43570: PUSH
43571: LD_VAR 0 8
43575: PUSH
43576: LD_INT 1
43578: EQUAL
43579: AND
43580: IFFALSE 43614
// begin hc_name := Ron Harisson ;
43582: LD_ADDR_OWVAR 26
43586: PUSH
43587: LD_STRING Ron Harisson
43589: ST_TO_ADDR
// hc_gallery := us ;
43590: LD_ADDR_OWVAR 33
43594: PUSH
43595: LD_STRING us
43597: ST_TO_ADDR
// hc_face_number := 6 ;
43598: LD_ADDR_OWVAR 34
43602: PUSH
43603: LD_INT 6
43605: ST_TO_ADDR
// hc_sex := sex_male ;
43606: LD_ADDR_OWVAR 27
43610: PUSH
43611: LD_INT 1
43613: ST_TO_ADDR
// end ; if side = 8 and nation = 2 then
43614: LD_VAR 0 7
43618: PUSH
43619: LD_INT 8
43621: EQUAL
43622: PUSH
43623: LD_VAR 0 8
43627: PUSH
43628: LD_INT 2
43630: EQUAL
43631: AND
43632: IFFALSE 43666
// begin hc_name := Louis Schulz ;
43634: LD_ADDR_OWVAR 26
43638: PUSH
43639: LD_STRING Louis Schulz
43641: ST_TO_ADDR
// hc_gallery := sandar ;
43642: LD_ADDR_OWVAR 33
43646: PUSH
43647: LD_STRING sandar
43649: ST_TO_ADDR
// hc_face_number := 1 ;
43650: LD_ADDR_OWVAR 34
43654: PUSH
43655: LD_INT 1
43657: ST_TO_ADDR
// hc_sex := sex_male ;
43658: LD_ADDR_OWVAR 27
43662: PUSH
43663: LD_INT 1
43665: ST_TO_ADDR
// end ; PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
43666: CALL_OW 44
43670: PPUSH
43671: LD_EXP 6
43675: PUSH
43676: LD_INT 1
43678: ARRAY
43679: PPUSH
43680: LD_EXP 6
43684: PUSH
43685: LD_INT 2
43687: ARRAY
43688: PPUSH
43689: LD_INT 12
43691: PPUSH
43692: LD_INT 0
43694: PPUSH
43695: CALL_OW 50
// InitHc_All ( ) ;
43699: CALL_OW 584
// for i = 1 to peopleAmount - 1 do
43703: LD_ADDR_VAR 0 5
43707: PUSH
43708: DOUBLE
43709: LD_INT 1
43711: DEC
43712: ST_TO_ADDR
43713: LD_VAR 0 9
43717: PUSH
43718: LD_INT 1
43720: MINUS
43721: PUSH
43722: FOR_TO
43723: IFFALSE 43818
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
43725: LD_INT 0
43727: PPUSH
43728: LD_VAR 0 5
43732: PUSH
43733: LD_INT 4
43735: MOD
43736: PUSH
43737: LD_INT 1
43739: PLUS
43740: PPUSH
43741: LD_INT 3
43743: PPUSH
43744: CALL_OW 380
// tmp := Replace ( tmp , tmp + 1 , CreateHuman ) ;
43748: LD_ADDR_VAR 0 6
43752: PUSH
43753: LD_VAR 0 6
43757: PPUSH
43758: LD_VAR 0 6
43762: PUSH
43763: LD_INT 1
43765: PLUS
43766: PPUSH
43767: CALL_OW 44
43771: PPUSH
43772: CALL_OW 1
43776: ST_TO_ADDR
// PlaceUnitXYR ( tmp [ tmp ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
43777: LD_VAR 0 6
43781: PUSH
43782: LD_VAR 0 6
43786: ARRAY
43787: PPUSH
43788: LD_EXP 6
43792: PUSH
43793: LD_INT 1
43795: ARRAY
43796: PPUSH
43797: LD_EXP 6
43801: PUSH
43802: LD_INT 2
43804: ARRAY
43805: PPUSH
43806: LD_INT 12
43808: PPUSH
43809: LD_INT 0
43811: PPUSH
43812: CALL_OW 50
// end ;
43816: GO 43722
43818: POP
43819: POP
// end ;
43820: LD_VAR 0 4
43824: RET
// every 0 0$1 trigger ecoCratesDrop and ecoCratesDropXY do var time , xy ;
43825: LD_EXP 7
43829: PUSH
43830: LD_EXP 8
43834: AND
43835: IFFALSE 44005
43837: GO 43839
43839: DISABLE
43840: LD_INT 0
43842: PPUSH
43843: PPUSH
// begin time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
43844: LD_ADDR_VAR 0 1
43848: PUSH
43849: LD_INT 700
43851: PUSH
43852: LD_INT 350
43854: PUSH
43855: LD_INT 175
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: LIST
43862: PUSH
43863: LD_EXP 7
43867: ARRAY
43868: ST_TO_ADDR
// while true do
43869: LD_INT 1
43871: IFFALSE 44005
// begin wait ( time ) ;
43873: LD_VAR 0 1
43877: PPUSH
43878: CALL_OW 67
// if not ecoCratesDropAllow then
43882: LD_EXP 9
43886: NOT
43887: IFFALSE 43891
// continue ;
43889: GO 43869
// time := time + 0 0$2 ;
43891: LD_ADDR_VAR 0 1
43895: PUSH
43896: LD_VAR 0 1
43900: PUSH
43901: LD_INT 70
43903: PLUS
43904: ST_TO_ADDR
// if time > 0 0$40 then
43905: LD_VAR 0 1
43909: PUSH
43910: LD_INT 1400
43912: GREATER
43913: IFFALSE 43940
// time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
43915: LD_ADDR_VAR 0 1
43919: PUSH
43920: LD_INT 700
43922: PUSH
43923: LD_INT 350
43925: PUSH
43926: LD_INT 175
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: LIST
43933: PUSH
43934: LD_EXP 7
43938: ARRAY
43939: ST_TO_ADDR
// xy := ecoCratesDropXY [ rand ( 1 , ecoCratesDropXY ) ] ;
43940: LD_ADDR_VAR 0 2
43944: PUSH
43945: LD_EXP 8
43949: PUSH
43950: LD_INT 1
43952: PPUSH
43953: LD_EXP 8
43957: PPUSH
43958: CALL_OW 12
43962: ARRAY
43963: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , xy [ 1 ] , xy [ 2 ] , 14 , true ) ;
43964: LD_INT 1
43966: PPUSH
43967: LD_INT 5
43969: PPUSH
43970: CALL_OW 12
43974: PPUSH
43975: LD_VAR 0 2
43979: PUSH
43980: LD_INT 1
43982: ARRAY
43983: PPUSH
43984: LD_VAR 0 2
43988: PUSH
43989: LD_INT 2
43991: ARRAY
43992: PPUSH
43993: LD_INT 14
43995: PPUSH
43996: LD_INT 1
43998: PPUSH
43999: CALL_OW 56
// end ;
44003: GO 43869
// end ;
44005: PPOPN 2
44007: END
// every 0 0$1 trigger ecoAttacksArea and ecoAttacksAllow do var time , area , tmp , i , xy , veh , dir , enemySide , waveBonus ;
44008: LD_EXP 12
44012: PUSH
44013: LD_EXP 10
44017: AND
44018: IFFALSE 44782
44020: GO 44022
44022: DISABLE
44023: LD_INT 0
44025: PPUSH
44026: PPUSH
44027: PPUSH
44028: PPUSH
44029: PPUSH
44030: PPUSH
44031: PPUSH
44032: PPUSH
44033: PPUSH
// begin time := 3 3$00 ;
44034: LD_ADDR_VAR 0 1
44038: PUSH
44039: LD_INT 6300
44041: ST_TO_ADDR
// enemySide := [ 3 , 9 ] [ rand ( 1 , 2 ) ] ;
44042: LD_ADDR_VAR 0 8
44046: PUSH
44047: LD_INT 3
44049: PUSH
44050: LD_INT 9
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: PPUSH
44060: LD_INT 2
44062: PPUSH
44063: CALL_OW 12
44067: ARRAY
44068: ST_TO_ADDR
// waveBonus := 0 ;
44069: LD_ADDR_VAR 0 9
44073: PUSH
44074: LD_INT 0
44076: ST_TO_ADDR
// if ecoSide = enemySide then
44077: LD_EXP 3
44081: PUSH
44082: LD_VAR 0 8
44086: EQUAL
44087: IFFALSE 44097
// enemySide := 1 ;
44089: LD_ADDR_VAR 0 8
44093: PUSH
44094: LD_INT 1
44096: ST_TO_ADDR
// while true do
44097: LD_INT 1
44099: IFFALSE 44782
// begin wait ( time ) ;
44101: LD_VAR 0 1
44105: PPUSH
44106: CALL_OW 67
// if not ecoAttacksAllow then
44110: LD_EXP 10
44114: NOT
44115: IFFALSE 44119
// continue ;
44117: GO 44097
// waveBonus := waveBonus + 2 ;
44119: LD_ADDR_VAR 0 9
44123: PUSH
44124: LD_VAR 0 9
44128: PUSH
44129: LD_INT 2
44131: PLUS
44132: ST_TO_ADDR
// if waveBonus > 20 then
44133: LD_VAR 0 9
44137: PUSH
44138: LD_INT 20
44140: GREATER
44141: IFFALSE 44151
// waveBonus := 20 ;
44143: LD_ADDR_VAR 0 9
44147: PUSH
44148: LD_INT 20
44150: ST_TO_ADDR
// area := ecoAttacksArea [ rand ( 1 , ecoAttacksArea ) ] ;
44151: LD_ADDR_VAR 0 2
44155: PUSH
44156: LD_EXP 12
44160: PUSH
44161: LD_INT 1
44163: PPUSH
44164: LD_EXP 12
44168: PPUSH
44169: CALL_OW 12
44173: ARRAY
44174: ST_TO_ADDR
// tmp := AreaToList ( area , 0 ) ;
44175: LD_ADDR_VAR 0 3
44179: PUSH
44180: LD_VAR 0 2
44184: PPUSH
44185: LD_INT 0
44187: PPUSH
44188: CALL_OW 517
44192: ST_TO_ADDR
// dir := GetDirFromHex ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
44193: LD_ADDR_VAR 0 7
44197: PUSH
44198: LD_VAR 0 3
44202: PUSH
44203: LD_INT 1
44205: ARRAY
44206: PUSH
44207: LD_INT 1
44209: ARRAY
44210: PPUSH
44211: LD_VAR 0 3
44215: PUSH
44216: LD_INT 2
44218: ARRAY
44219: PUSH
44220: LD_INT 1
44222: ARRAY
44223: PPUSH
44224: LD_EXP 6
44228: PUSH
44229: LD_INT 1
44231: ARRAY
44232: PPUSH
44233: LD_EXP 6
44237: PUSH
44238: LD_INT 2
44240: ARRAY
44241: PPUSH
44242: CALL 39866 0 4
44246: ST_TO_ADDR
// xy := PointBetweenXY ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
44247: LD_ADDR_VAR 0 5
44251: PUSH
44252: LD_VAR 0 3
44256: PUSH
44257: LD_INT 1
44259: ARRAY
44260: PUSH
44261: LD_INT 1
44263: ARRAY
44264: PPUSH
44265: LD_VAR 0 3
44269: PUSH
44270: LD_INT 2
44272: ARRAY
44273: PUSH
44274: LD_INT 1
44276: ARRAY
44277: PPUSH
44278: LD_EXP 6
44282: PUSH
44283: LD_INT 1
44285: ARRAY
44286: PPUSH
44287: LD_EXP 6
44291: PUSH
44292: LD_INT 2
44294: ARRAY
44295: PPUSH
44296: CALL 39006 0 4
44300: ST_TO_ADDR
// tmp := [ ] ;
44301: LD_ADDR_VAR 0 3
44305: PUSH
44306: EMPTY
44307: ST_TO_ADDR
// for i := 1 to 6 + waveBonus do
44308: LD_ADDR_VAR 0 4
44312: PUSH
44313: DOUBLE
44314: LD_INT 1
44316: DEC
44317: ST_TO_ADDR
44318: LD_INT 6
44320: PUSH
44321: LD_VAR 0 9
44325: PLUS
44326: PUSH
44327: FOR_TO
44328: IFFALSE 44647
// begin uc_side := enemySide ;
44330: LD_ADDR_OWVAR 20
44334: PUSH
44335: LD_VAR 0 8
44339: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
44340: LD_ADDR_OWVAR 21
44344: PUSH
44345: LD_INT 1
44347: PPUSH
44348: LD_INT 3
44350: PPUSH
44351: CALL_OW 12
44355: ST_TO_ADDR
// case uc_nation of 1 :
44356: LD_OWVAR 21
44360: PUSH
44361: LD_INT 1
44363: DOUBLE
44364: EQUAL
44365: IFTRUE 44369
44367: GO 44410
44369: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ; 2 :
44370: LD_INT 5
44372: PPUSH
44373: LD_INT 3
44375: PPUSH
44376: LD_INT 3
44378: PPUSH
44379: LD_INT 6
44381: PUSH
44382: LD_INT 7
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PPUSH
44392: LD_INT 2
44394: PPUSH
44395: CALL_OW 12
44399: ARRAY
44400: PPUSH
44401: LD_INT 100
44403: PPUSH
44404: CALL 5980 0 5
44408: GO 44513
44410: LD_INT 2
44412: DOUBLE
44413: EQUAL
44414: IFTRUE 44418
44416: GO 44463
44418: POP
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] , 100 ) ; 3 :
44419: LD_INT 14
44421: PPUSH
44422: LD_INT 3
44424: PPUSH
44425: LD_INT 5
44427: PPUSH
44428: LD_INT 27
44430: PUSH
44431: LD_INT 28
44433: PUSH
44434: LD_INT 29
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: PPUSH
44445: LD_INT 3
44447: PPUSH
44448: CALL_OW 12
44452: ARRAY
44453: PPUSH
44454: LD_INT 100
44456: PPUSH
44457: CALL 5980 0 5
44461: GO 44513
44463: LD_INT 3
44465: DOUBLE
44466: EQUAL
44467: IFTRUE 44471
44469: GO 44512
44471: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket ] [ rand ( 1 , 2 ) ] , 100 ) ; end ;
44472: LD_INT 24
44474: PPUSH
44475: LD_INT 3
44477: PPUSH
44478: LD_INT 3
44480: PPUSH
44481: LD_INT 46
44483: PUSH
44484: LD_INT 47
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: PPUSH
44494: LD_INT 2
44496: PPUSH
44497: CALL_OW 12
44501: ARRAY
44502: PPUSH
44503: LD_INT 100
44505: PPUSH
44506: CALL 5980 0 5
44510: GO 44513
44512: POP
// veh := CreateVehicle ;
44513: LD_ADDR_VAR 0 6
44517: PUSH
44518: CALL_OW 45
44522: ST_TO_ADDR
// SetDir ( veh , dir ) ;
44523: LD_VAR 0 6
44527: PPUSH
44528: LD_VAR 0 7
44532: PPUSH
44533: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
44537: LD_VAR 0 6
44541: PPUSH
44542: LD_VAR 0 2
44546: PPUSH
44547: LD_INT 0
44549: PPUSH
44550: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
44554: LD_ADDR_VAR 0 3
44558: PUSH
44559: LD_VAR 0 3
44563: PPUSH
44564: LD_VAR 0 3
44568: PUSH
44569: LD_INT 1
44571: PLUS
44572: PPUSH
44573: LD_VAR 0 6
44577: PPUSH
44578: CALL_OW 1
44582: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) = 0 then
44583: LD_VAR 0 5
44587: PUSH
44588: LD_INT 1
44590: ARRAY
44591: PPUSH
44592: LD_VAR 0 5
44596: PUSH
44597: LD_INT 2
44599: ARRAY
44600: PPUSH
44601: CALL_OW 428
44605: PUSH
44606: LD_INT 0
44608: EQUAL
44609: IFFALSE 44638
// ComMoveXY ( veh , xy [ 1 ] , xy [ 2 ] ) ;
44611: LD_VAR 0 6
44615: PPUSH
44616: LD_VAR 0 5
44620: PUSH
44621: LD_INT 1
44623: ARRAY
44624: PPUSH
44625: LD_VAR 0 5
44629: PUSH
44630: LD_INT 2
44632: ARRAY
44633: PPUSH
44634: CALL_OW 111
// wait ( 0 0$0.5 ) ;
44638: LD_INT 18
44640: PPUSH
44641: CALL_OW 67
// end ;
44645: GO 44327
44647: POP
44648: POP
// if tmp then
44649: LD_VAR 0 3
44653: IFFALSE 44780
// begin repeat wait ( 0 0$2 ) ;
44655: LD_INT 70
44657: PPUSH
44658: CALL_OW 67
// for i in tmp do
44662: LD_ADDR_VAR 0 4
44666: PUSH
44667: LD_VAR 0 3
44671: PUSH
44672: FOR_IN
44673: IFFALSE 44771
// begin if IsDead ( i ) or not IsPlaced ( i ) or GetSide ( i ) <> enemySide then
44675: LD_VAR 0 4
44679: PPUSH
44680: CALL_OW 301
44684: PUSH
44685: LD_VAR 0 4
44689: PPUSH
44690: CALL_OW 305
44694: NOT
44695: OR
44696: PUSH
44697: LD_VAR 0 4
44701: PPUSH
44702: CALL_OW 255
44706: PUSH
44707: LD_VAR 0 8
44711: NONEQUAL
44712: OR
44713: IFFALSE 44733
// tmp := tmp diff i else
44715: LD_ADDR_VAR 0 3
44719: PUSH
44720: LD_VAR 0 3
44724: PUSH
44725: LD_VAR 0 4
44729: DIFF
44730: ST_TO_ADDR
44731: GO 44769
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , ecoSide ] ) , i ) ) ;
44733: LD_VAR 0 4
44737: PPUSH
44738: LD_INT 22
44740: PUSH
44741: LD_EXP 3
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PPUSH
44750: CALL_OW 69
44754: PPUSH
44755: LD_VAR 0 4
44759: PPUSH
44760: CALL_OW 74
44764: PPUSH
44765: CALL_OW 115
// end ;
44769: GO 44672
44771: POP
44772: POP
// until not tmp ;
44773: LD_VAR 0 3
44777: NOT
44778: IFFALSE 44655
// end ; end ;
44780: GO 44097
// end ;
44782: PPOPN 9
44784: END
// every 0 0$1 trigger ecoEventsAllow do var time , xy ;
44785: LD_EXP 11
44789: IFFALSE 44842
44791: GO 44793
44793: DISABLE
44794: LD_INT 0
44796: PPUSH
44797: PPUSH
// begin time := rand ( 1 1$00 , 10 10$00 ) ;
44798: LD_ADDR_VAR 0 1
44802: PUSH
44803: LD_INT 2100
44805: PPUSH
44806: LD_INT 21000
44808: PPUSH
44809: CALL_OW 12
44813: ST_TO_ADDR
// while true do
44814: LD_INT 1
44816: IFFALSE 44842
// begin wait ( time ) ;
44818: LD_VAR 0 1
44822: PPUSH
44823: CALL_OW 67
// if not ecoEventsAllow then
44827: LD_EXP 11
44831: NOT
44832: IFFALSE 44836
// continue ;
44834: GO 44814
// EcoEvent ( ) ;
44836: CALL 44845 0 0
// end ;
44840: GO 44814
// end ;
44842: PPOPN 2
44844: END
// export function EcoEvent ( ) ; var event , tmp , i ; begin
44845: LD_INT 0
44847: PPUSH
44848: PPUSH
44849: PPUSH
44850: PPUSH
// event := rand ( 1 , 5 ) ;
44851: LD_ADDR_VAR 0 2
44855: PUSH
44856: LD_INT 1
44858: PPUSH
44859: LD_INT 5
44861: PPUSH
44862: CALL_OW 12
44866: ST_TO_ADDR
// case event of 1 :
44867: LD_VAR 0 2
44871: PUSH
44872: LD_INT 1
44874: DOUBLE
44875: EQUAL
44876: IFTRUE 44880
44878: GO 44966
44880: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_building ] ) diff FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
44881: LD_ADDR_VAR 0 3
44885: PUSH
44886: LD_INT 21
44888: PUSH
44889: LD_INT 3
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PPUSH
44896: CALL_OW 69
44900: PUSH
44901: LD_INT 2
44903: PUSH
44904: LD_INT 30
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 30
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: LIST
44928: PPUSH
44929: CALL_OW 69
44933: DIFF
44934: ST_TO_ADDR
// if tmp then
44935: LD_VAR 0 3
44939: IFFALSE 44964
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
44941: LD_VAR 0 3
44945: PUSH
44946: LD_INT 1
44948: PPUSH
44949: LD_VAR 0 3
44953: PPUSH
44954: CALL_OW 12
44958: ARRAY
44959: PPUSH
44960: CALL_OW 65
// end ; 2 :
44964: GO 45165
44966: LD_INT 2
44968: DOUBLE
44969: EQUAL
44970: IFTRUE 44974
44972: GO 45030
44974: POP
// begin uc_side := ecoSide ;
44975: LD_ADDR_OWVAR 20
44979: PUSH
44980: LD_EXP 3
44984: ST_TO_ADDR
// uc_nation := ecoNation ;
44985: LD_ADDR_OWVAR 21
44989: PUSH
44990: LD_EXP 4
44994: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 8 ) ;
44995: LD_INT 0
44997: PPUSH
44998: LD_INT 1
45000: PPUSH
45001: LD_INT 4
45003: PPUSH
45004: CALL_OW 12
45008: PPUSH
45009: LD_INT 8
45011: PPUSH
45012: CALL_OW 380
// PlaceUnitAnyWhere ( CreateHuman , true ) ;
45016: CALL_OW 44
45020: PPUSH
45021: LD_INT 1
45023: PPUSH
45024: CALL_OW 51
// end ; 3 :
45028: GO 45165
45030: LD_INT 3
45032: DOUBLE
45033: EQUAL
45034: IFTRUE 45038
45036: GO 45090
45038: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_vehicle ] ) ;
45039: LD_ADDR_VAR 0 3
45043: PUSH
45044: LD_INT 21
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PPUSH
45054: CALL_OW 69
45058: ST_TO_ADDR
// if tmp then
45059: LD_VAR 0 3
45063: IFFALSE 45088
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
45065: LD_VAR 0 3
45069: PUSH
45070: LD_INT 1
45072: PPUSH
45073: LD_VAR 0 3
45077: PPUSH
45078: CALL_OW 12
45082: ARRAY
45083: PPUSH
45084: CALL_OW 65
// end ; 4 :
45088: GO 45165
45090: LD_INT 4
45092: DOUBLE
45093: EQUAL
45094: IFTRUE 45098
45096: GO 45153
45098: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_human ] ) ;
45099: LD_ADDR_VAR 0 3
45103: PUSH
45104: LD_INT 21
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PPUSH
45114: CALL_OW 69
45118: ST_TO_ADDR
// if tmp then
45119: LD_VAR 0 3
45123: IFFALSE 45151
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 190 ) ;
45125: LD_VAR 0 3
45129: PUSH
45130: LD_INT 1
45132: PPUSH
45133: LD_VAR 0 3
45137: PPUSH
45138: CALL_OW 12
45142: ARRAY
45143: PPUSH
45144: LD_INT 190
45146: PPUSH
45147: CALL_OW 234
// end ; 5 :
45151: GO 45165
45153: LD_INT 5
45155: DOUBLE
45156: EQUAL
45157: IFTRUE 45161
45159: GO 45164
45161: POP
// begin end ; end ;
45162: GO 45165
45164: POP
// end ;
45165: LD_VAR 0 1
45169: RET
// export function EcoEnableAllTechs ( ) ; var i ; begin
45170: LD_INT 0
45172: PPUSH
45173: PPUSH
// for i := 1 to 100 do
45174: LD_ADDR_VAR 0 2
45178: PUSH
45179: DOUBLE
45180: LD_INT 1
45182: DEC
45183: ST_TO_ADDR
45184: LD_INT 100
45186: PUSH
45187: FOR_TO
45188: IFFALSE 45209
// SetTech ( i , ecoSide , state_researched ) ;
45190: LD_VAR 0 2
45194: PPUSH
45195: LD_EXP 3
45199: PPUSH
45200: LD_INT 2
45202: PPUSH
45203: CALL_OW 322
45207: GO 45187
45209: POP
45210: POP
// end ;
45211: LD_VAR 0 1
45215: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
45216: LD_VAR 0 2
45220: PUSH
45221: LD_INT 102
45223: EQUAL
45224: IFFALSE 45416
// begin case p3 of 1 :
45226: LD_VAR 0 3
45230: PUSH
45231: LD_INT 1
45233: DOUBLE
45234: EQUAL
45235: IFTRUE 45239
45237: GO 45257
45239: POP
// ecoEventsAllow := Negate ( ecoEventsAllow ) ; 2 :
45240: LD_ADDR_EXP 11
45244: PUSH
45245: LD_EXP 11
45249: PPUSH
45250: CALL 39803 0 1
45254: ST_TO_ADDR
45255: GO 45414
45257: LD_INT 2
45259: DOUBLE
45260: EQUAL
45261: IFTRUE 45265
45263: GO 45283
45265: POP
// ecoAttacksAllow := Negate ( ecoAttacksAllow ) ; 3 :
45266: LD_ADDR_EXP 10
45270: PUSH
45271: LD_EXP 10
45275: PPUSH
45276: CALL 39803 0 1
45280: ST_TO_ADDR
45281: GO 45414
45283: LD_INT 3
45285: DOUBLE
45286: EQUAL
45287: IFTRUE 45291
45289: GO 45309
45291: POP
// ecoCratesDropAllow := Negate ( ecoCratesDropAllow ) ; 4 :
45292: LD_ADDR_EXP 9
45296: PUSH
45297: LD_EXP 9
45301: PPUSH
45302: CALL 39803 0 1
45306: ST_TO_ADDR
45307: GO 45414
45309: LD_INT 4
45311: DOUBLE
45312: EQUAL
45313: IFTRUE 45317
45315: GO 45324
45317: POP
// EcoEnableAllTechs ( ) ; 5 .. 8 :
45318: CALL 45170 0 0
45322: GO 45414
45324: LD_INT 5
45326: DOUBLE
45327: GREATEREQUAL
45328: IFFALSE 45336
45330: LD_INT 8
45332: DOUBLE
45333: LESSEQUAL
45334: IFTRUE 45338
45336: GO 45413
45338: POP
// begin uc_side := ecoSide ;
45339: LD_ADDR_OWVAR 20
45343: PUSH
45344: LD_EXP 3
45348: ST_TO_ADDR
// uc_nation := ecoNation ;
45349: LD_ADDR_OWVAR 21
45353: PUSH
45354: LD_EXP 4
45358: ST_TO_ADDR
// PrepareHuman ( false , p3 - 4 , 4 ) ;
45359: LD_INT 0
45361: PPUSH
45362: LD_VAR 0 3
45366: PUSH
45367: LD_INT 4
45369: MINUS
45370: PPUSH
45371: LD_INT 4
45373: PPUSH
45374: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , true ) ;
45378: CALL_OW 44
45382: PPUSH
45383: LD_EXP 6
45387: PUSH
45388: LD_INT 1
45390: ARRAY
45391: PPUSH
45392: LD_EXP 6
45396: PUSH
45397: LD_INT 2
45399: ARRAY
45400: PPUSH
45401: LD_INT 12
45403: PPUSH
45404: LD_INT 1
45406: PPUSH
45407: CALL_OW 50
// end ; end ;
45411: GO 45414
45413: POP
// end else
45414: GO 45450
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
45416: LD_VAR 0 1
45420: PPUSH
45421: LD_VAR 0 2
45425: PPUSH
45426: LD_VAR 0 3
45430: PPUSH
45431: LD_VAR 0 4
45435: PPUSH
45436: LD_VAR 0 5
45440: PPUSH
45441: LD_VAR 0 6
45445: PPUSH
45446: CALL 45641 0 6
// end ;
45450: PPOPN 6
45452: END
// on MapStart ( p ) do begin if gameType = 1 then
45453: LD_EXP 2
45457: PUSH
45458: LD_INT 1
45460: EQUAL
45461: IFFALSE 45472
// ToLua ( SKIRMISH_GAME_TYPE = 1 ) else
45463: LD_STRING SKIRMISH_GAME_TYPE = 1
45465: PPUSH
45466: CALL_OW 559
45470: GO 45479
// ToLua ( SKIRMISH_GAME_TYPE = 0 ) ;
45472: LD_STRING SKIRMISH_GAME_TYPE = 0
45474: PPUSH
45475: CALL_OW 559
// SOS_MapStart ( ) ;
45479: CALL 45545 0 0
// end ; end_of_file
45483: PPOPN 1
45485: END
// export globalGameSaveCounter ; every 0 0$1 do
45486: GO 45488
45488: DISABLE
// begin enable ;
45489: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
45490: LD_STRING updateTimer(
45492: PUSH
45493: LD_OWVAR 1
45497: STR
45498: PUSH
45499: LD_STRING );
45501: STR
45502: PPUSH
45503: CALL_OW 559
// end ;
45507: END
// every 0 0$1 do
45508: GO 45510
45510: DISABLE
// begin globalGameSaveCounter := 0 ;
45511: LD_ADDR_EXP 14
45515: PUSH
45516: LD_INT 0
45518: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
45519: LD_STRING setGameSaveCounter(0)
45521: PPUSH
45522: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
45526: LD_STRING initStreamRollete();
45528: PPUSH
45529: CALL_OW 559
// InitStreamMode ;
45533: CALL 46859 0 0
// DefineStreamItems ( false ) ;
45537: LD_INT 0
45539: PPUSH
45540: CALL 47323 0 1
// end ;
45544: END
// export function SOS_MapStart ( ) ; begin
45545: LD_INT 0
45547: PPUSH
// if streamModeActive then
45548: LD_EXP 15
45552: IFFALSE 45561
// DefineStreamItems ( true ) ;
45554: LD_INT 1
45556: PPUSH
45557: CALL 47323 0 1
// UpdateLuaVariables ( ) ;
45561: CALL 45578 0 0
// UpdateFactoryWaypoints ( ) ;
45565: CALL 60192 0 0
// UpdateWarehouseGatheringPoints ( ) ;
45569: CALL 60449 0 0
// end ;
45573: LD_VAR 0 1
45577: RET
// function UpdateLuaVariables ( ) ; begin
45578: LD_INT 0
45580: PPUSH
// if globalGameSaveCounter then
45581: LD_EXP 14
45585: IFFALSE 45619
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
45587: LD_ADDR_EXP 14
45591: PUSH
45592: LD_EXP 14
45596: PPUSH
45597: CALL 39822 0 1
45601: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
45602: LD_STRING setGameSaveCounter(
45604: PUSH
45605: LD_EXP 14
45609: STR
45610: PUSH
45611: LD_STRING )
45613: STR
45614: PPUSH
45615: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
45619: LD_STRING setGameDifficulty(
45621: PUSH
45622: LD_OWVAR 67
45626: STR
45627: PUSH
45628: LD_STRING )
45630: STR
45631: PPUSH
45632: CALL_OW 559
// end ;
45636: LD_VAR 0 1
45640: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
45641: LD_INT 0
45643: PPUSH
// if p2 = stream_mode then
45644: LD_VAR 0 2
45648: PUSH
45649: LD_INT 100
45651: EQUAL
45652: IFFALSE 46655
// begin if not StreamModeActive then
45654: LD_EXP 15
45658: NOT
45659: IFFALSE 45669
// StreamModeActive := true ;
45661: LD_ADDR_EXP 15
45665: PUSH
45666: LD_INT 1
45668: ST_TO_ADDR
// if p3 = 0 then
45669: LD_VAR 0 3
45673: PUSH
45674: LD_INT 0
45676: EQUAL
45677: IFFALSE 45683
// InitStreamMode ;
45679: CALL 46859 0 0
// if p3 = 1 then
45683: LD_VAR 0 3
45687: PUSH
45688: LD_INT 1
45690: EQUAL
45691: IFFALSE 45701
// sRocket := true ;
45693: LD_ADDR_EXP 20
45697: PUSH
45698: LD_INT 1
45700: ST_TO_ADDR
// if p3 = 2 then
45701: LD_VAR 0 3
45705: PUSH
45706: LD_INT 2
45708: EQUAL
45709: IFFALSE 45719
// sSpeed := true ;
45711: LD_ADDR_EXP 19
45715: PUSH
45716: LD_INT 1
45718: ST_TO_ADDR
// if p3 = 3 then
45719: LD_VAR 0 3
45723: PUSH
45724: LD_INT 3
45726: EQUAL
45727: IFFALSE 45737
// sEngine := true ;
45729: LD_ADDR_EXP 21
45733: PUSH
45734: LD_INT 1
45736: ST_TO_ADDR
// if p3 = 4 then
45737: LD_VAR 0 3
45741: PUSH
45742: LD_INT 4
45744: EQUAL
45745: IFFALSE 45755
// sSpec := true ;
45747: LD_ADDR_EXP 18
45751: PUSH
45752: LD_INT 1
45754: ST_TO_ADDR
// if p3 = 5 then
45755: LD_VAR 0 3
45759: PUSH
45760: LD_INT 5
45762: EQUAL
45763: IFFALSE 45773
// sLevel := true ;
45765: LD_ADDR_EXP 22
45769: PUSH
45770: LD_INT 1
45772: ST_TO_ADDR
// if p3 = 6 then
45773: LD_VAR 0 3
45777: PUSH
45778: LD_INT 6
45780: EQUAL
45781: IFFALSE 45791
// sArmoury := true ;
45783: LD_ADDR_EXP 23
45787: PUSH
45788: LD_INT 1
45790: ST_TO_ADDR
// if p3 = 7 then
45791: LD_VAR 0 3
45795: PUSH
45796: LD_INT 7
45798: EQUAL
45799: IFFALSE 45809
// sRadar := true ;
45801: LD_ADDR_EXP 24
45805: PUSH
45806: LD_INT 1
45808: ST_TO_ADDR
// if p3 = 8 then
45809: LD_VAR 0 3
45813: PUSH
45814: LD_INT 8
45816: EQUAL
45817: IFFALSE 45827
// sBunker := true ;
45819: LD_ADDR_EXP 25
45823: PUSH
45824: LD_INT 1
45826: ST_TO_ADDR
// if p3 = 9 then
45827: LD_VAR 0 3
45831: PUSH
45832: LD_INT 9
45834: EQUAL
45835: IFFALSE 45845
// sHack := true ;
45837: LD_ADDR_EXP 26
45841: PUSH
45842: LD_INT 1
45844: ST_TO_ADDR
// if p3 = 10 then
45845: LD_VAR 0 3
45849: PUSH
45850: LD_INT 10
45852: EQUAL
45853: IFFALSE 45863
// sFire := true ;
45855: LD_ADDR_EXP 27
45859: PUSH
45860: LD_INT 1
45862: ST_TO_ADDR
// if p3 = 11 then
45863: LD_VAR 0 3
45867: PUSH
45868: LD_INT 11
45870: EQUAL
45871: IFFALSE 45881
// sRefresh := true ;
45873: LD_ADDR_EXP 28
45877: PUSH
45878: LD_INT 1
45880: ST_TO_ADDR
// if p3 = 12 then
45881: LD_VAR 0 3
45885: PUSH
45886: LD_INT 12
45888: EQUAL
45889: IFFALSE 45899
// sExp := true ;
45891: LD_ADDR_EXP 29
45895: PUSH
45896: LD_INT 1
45898: ST_TO_ADDR
// if p3 = 13 then
45899: LD_VAR 0 3
45903: PUSH
45904: LD_INT 13
45906: EQUAL
45907: IFFALSE 45917
// sDepot := true ;
45909: LD_ADDR_EXP 30
45913: PUSH
45914: LD_INT 1
45916: ST_TO_ADDR
// if p3 = 14 then
45917: LD_VAR 0 3
45921: PUSH
45922: LD_INT 14
45924: EQUAL
45925: IFFALSE 45935
// sFlag := true ;
45927: LD_ADDR_EXP 31
45931: PUSH
45932: LD_INT 1
45934: ST_TO_ADDR
// if p3 = 15 then
45935: LD_VAR 0 3
45939: PUSH
45940: LD_INT 15
45942: EQUAL
45943: IFFALSE 45953
// sKamikadze := true ;
45945: LD_ADDR_EXP 39
45949: PUSH
45950: LD_INT 1
45952: ST_TO_ADDR
// if p3 = 16 then
45953: LD_VAR 0 3
45957: PUSH
45958: LD_INT 16
45960: EQUAL
45961: IFFALSE 45971
// sTroll := true ;
45963: LD_ADDR_EXP 40
45967: PUSH
45968: LD_INT 1
45970: ST_TO_ADDR
// if p3 = 17 then
45971: LD_VAR 0 3
45975: PUSH
45976: LD_INT 17
45978: EQUAL
45979: IFFALSE 45989
// sSlow := true ;
45981: LD_ADDR_EXP 41
45985: PUSH
45986: LD_INT 1
45988: ST_TO_ADDR
// if p3 = 18 then
45989: LD_VAR 0 3
45993: PUSH
45994: LD_INT 18
45996: EQUAL
45997: IFFALSE 46007
// sLack := true ;
45999: LD_ADDR_EXP 42
46003: PUSH
46004: LD_INT 1
46006: ST_TO_ADDR
// if p3 = 19 then
46007: LD_VAR 0 3
46011: PUSH
46012: LD_INT 19
46014: EQUAL
46015: IFFALSE 46025
// sTank := true ;
46017: LD_ADDR_EXP 44
46021: PUSH
46022: LD_INT 1
46024: ST_TO_ADDR
// if p3 = 20 then
46025: LD_VAR 0 3
46029: PUSH
46030: LD_INT 20
46032: EQUAL
46033: IFFALSE 46043
// sRemote := true ;
46035: LD_ADDR_EXP 45
46039: PUSH
46040: LD_INT 1
46042: ST_TO_ADDR
// if p3 = 21 then
46043: LD_VAR 0 3
46047: PUSH
46048: LD_INT 21
46050: EQUAL
46051: IFFALSE 46061
// sPowell := true ;
46053: LD_ADDR_EXP 46
46057: PUSH
46058: LD_INT 1
46060: ST_TO_ADDR
// if p3 = 22 then
46061: LD_VAR 0 3
46065: PUSH
46066: LD_INT 22
46068: EQUAL
46069: IFFALSE 46079
// sTeleport := true ;
46071: LD_ADDR_EXP 49
46075: PUSH
46076: LD_INT 1
46078: ST_TO_ADDR
// if p3 = 23 then
46079: LD_VAR 0 3
46083: PUSH
46084: LD_INT 23
46086: EQUAL
46087: IFFALSE 46097
// sOilTower := true ;
46089: LD_ADDR_EXP 51
46093: PUSH
46094: LD_INT 1
46096: ST_TO_ADDR
// if p3 = 24 then
46097: LD_VAR 0 3
46101: PUSH
46102: LD_INT 24
46104: EQUAL
46105: IFFALSE 46115
// sShovel := true ;
46107: LD_ADDR_EXP 52
46111: PUSH
46112: LD_INT 1
46114: ST_TO_ADDR
// if p3 = 25 then
46115: LD_VAR 0 3
46119: PUSH
46120: LD_INT 25
46122: EQUAL
46123: IFFALSE 46133
// sSheik := true ;
46125: LD_ADDR_EXP 53
46129: PUSH
46130: LD_INT 1
46132: ST_TO_ADDR
// if p3 = 26 then
46133: LD_VAR 0 3
46137: PUSH
46138: LD_INT 26
46140: EQUAL
46141: IFFALSE 46151
// sEarthquake := true ;
46143: LD_ADDR_EXP 55
46147: PUSH
46148: LD_INT 1
46150: ST_TO_ADDR
// if p3 = 27 then
46151: LD_VAR 0 3
46155: PUSH
46156: LD_INT 27
46158: EQUAL
46159: IFFALSE 46169
// sAI := true ;
46161: LD_ADDR_EXP 56
46165: PUSH
46166: LD_INT 1
46168: ST_TO_ADDR
// if p3 = 28 then
46169: LD_VAR 0 3
46173: PUSH
46174: LD_INT 28
46176: EQUAL
46177: IFFALSE 46187
// sCargo := true ;
46179: LD_ADDR_EXP 59
46183: PUSH
46184: LD_INT 1
46186: ST_TO_ADDR
// if p3 = 29 then
46187: LD_VAR 0 3
46191: PUSH
46192: LD_INT 29
46194: EQUAL
46195: IFFALSE 46205
// sDLaser := true ;
46197: LD_ADDR_EXP 60
46201: PUSH
46202: LD_INT 1
46204: ST_TO_ADDR
// if p3 = 30 then
46205: LD_VAR 0 3
46209: PUSH
46210: LD_INT 30
46212: EQUAL
46213: IFFALSE 46223
// sExchange := true ;
46215: LD_ADDR_EXP 61
46219: PUSH
46220: LD_INT 1
46222: ST_TO_ADDR
// if p3 = 31 then
46223: LD_VAR 0 3
46227: PUSH
46228: LD_INT 31
46230: EQUAL
46231: IFFALSE 46241
// sFac := true ;
46233: LD_ADDR_EXP 62
46237: PUSH
46238: LD_INT 1
46240: ST_TO_ADDR
// if p3 = 32 then
46241: LD_VAR 0 3
46245: PUSH
46246: LD_INT 32
46248: EQUAL
46249: IFFALSE 46259
// sPower := true ;
46251: LD_ADDR_EXP 63
46255: PUSH
46256: LD_INT 1
46258: ST_TO_ADDR
// if p3 = 33 then
46259: LD_VAR 0 3
46263: PUSH
46264: LD_INT 33
46266: EQUAL
46267: IFFALSE 46277
// sRandom := true ;
46269: LD_ADDR_EXP 64
46273: PUSH
46274: LD_INT 1
46276: ST_TO_ADDR
// if p3 = 34 then
46277: LD_VAR 0 3
46281: PUSH
46282: LD_INT 34
46284: EQUAL
46285: IFFALSE 46295
// sShield := true ;
46287: LD_ADDR_EXP 65
46291: PUSH
46292: LD_INT 1
46294: ST_TO_ADDR
// if p3 = 35 then
46295: LD_VAR 0 3
46299: PUSH
46300: LD_INT 35
46302: EQUAL
46303: IFFALSE 46313
// sTime := true ;
46305: LD_ADDR_EXP 66
46309: PUSH
46310: LD_INT 1
46312: ST_TO_ADDR
// if p3 = 36 then
46313: LD_VAR 0 3
46317: PUSH
46318: LD_INT 36
46320: EQUAL
46321: IFFALSE 46331
// sTools := true ;
46323: LD_ADDR_EXP 67
46327: PUSH
46328: LD_INT 1
46330: ST_TO_ADDR
// if p3 = 101 then
46331: LD_VAR 0 3
46335: PUSH
46336: LD_INT 101
46338: EQUAL
46339: IFFALSE 46349
// sSold := true ;
46341: LD_ADDR_EXP 32
46345: PUSH
46346: LD_INT 1
46348: ST_TO_ADDR
// if p3 = 102 then
46349: LD_VAR 0 3
46353: PUSH
46354: LD_INT 102
46356: EQUAL
46357: IFFALSE 46367
// sDiff := true ;
46359: LD_ADDR_EXP 33
46363: PUSH
46364: LD_INT 1
46366: ST_TO_ADDR
// if p3 = 103 then
46367: LD_VAR 0 3
46371: PUSH
46372: LD_INT 103
46374: EQUAL
46375: IFFALSE 46385
// sFog := true ;
46377: LD_ADDR_EXP 36
46381: PUSH
46382: LD_INT 1
46384: ST_TO_ADDR
// if p3 = 104 then
46385: LD_VAR 0 3
46389: PUSH
46390: LD_INT 104
46392: EQUAL
46393: IFFALSE 46403
// sReset := true ;
46395: LD_ADDR_EXP 37
46399: PUSH
46400: LD_INT 1
46402: ST_TO_ADDR
// if p3 = 105 then
46403: LD_VAR 0 3
46407: PUSH
46408: LD_INT 105
46410: EQUAL
46411: IFFALSE 46421
// sSun := true ;
46413: LD_ADDR_EXP 38
46417: PUSH
46418: LD_INT 1
46420: ST_TO_ADDR
// if p3 = 106 then
46421: LD_VAR 0 3
46425: PUSH
46426: LD_INT 106
46428: EQUAL
46429: IFFALSE 46439
// sTiger := true ;
46431: LD_ADDR_EXP 34
46435: PUSH
46436: LD_INT 1
46438: ST_TO_ADDR
// if p3 = 107 then
46439: LD_VAR 0 3
46443: PUSH
46444: LD_INT 107
46446: EQUAL
46447: IFFALSE 46457
// sBomb := true ;
46449: LD_ADDR_EXP 35
46453: PUSH
46454: LD_INT 1
46456: ST_TO_ADDR
// if p3 = 108 then
46457: LD_VAR 0 3
46461: PUSH
46462: LD_INT 108
46464: EQUAL
46465: IFFALSE 46475
// sWound := true ;
46467: LD_ADDR_EXP 43
46471: PUSH
46472: LD_INT 1
46474: ST_TO_ADDR
// if p3 = 109 then
46475: LD_VAR 0 3
46479: PUSH
46480: LD_INT 109
46482: EQUAL
46483: IFFALSE 46493
// sBetray := true ;
46485: LD_ADDR_EXP 47
46489: PUSH
46490: LD_INT 1
46492: ST_TO_ADDR
// if p3 = 110 then
46493: LD_VAR 0 3
46497: PUSH
46498: LD_INT 110
46500: EQUAL
46501: IFFALSE 46511
// sContamin := true ;
46503: LD_ADDR_EXP 48
46507: PUSH
46508: LD_INT 1
46510: ST_TO_ADDR
// if p3 = 111 then
46511: LD_VAR 0 3
46515: PUSH
46516: LD_INT 111
46518: EQUAL
46519: IFFALSE 46529
// sOil := true ;
46521: LD_ADDR_EXP 50
46525: PUSH
46526: LD_INT 1
46528: ST_TO_ADDR
// if p3 = 112 then
46529: LD_VAR 0 3
46533: PUSH
46534: LD_INT 112
46536: EQUAL
46537: IFFALSE 46547
// sStu := true ;
46539: LD_ADDR_EXP 54
46543: PUSH
46544: LD_INT 1
46546: ST_TO_ADDR
// if p3 = 113 then
46547: LD_VAR 0 3
46551: PUSH
46552: LD_INT 113
46554: EQUAL
46555: IFFALSE 46565
// sBazooka := true ;
46557: LD_ADDR_EXP 57
46561: PUSH
46562: LD_INT 1
46564: ST_TO_ADDR
// if p3 = 114 then
46565: LD_VAR 0 3
46569: PUSH
46570: LD_INT 114
46572: EQUAL
46573: IFFALSE 46583
// sMortar := true ;
46575: LD_ADDR_EXP 58
46579: PUSH
46580: LD_INT 1
46582: ST_TO_ADDR
// if p3 = 115 then
46583: LD_VAR 0 3
46587: PUSH
46588: LD_INT 115
46590: EQUAL
46591: IFFALSE 46601
// sRanger := true ;
46593: LD_ADDR_EXP 68
46597: PUSH
46598: LD_INT 1
46600: ST_TO_ADDR
// if p3 = 116 then
46601: LD_VAR 0 3
46605: PUSH
46606: LD_INT 116
46608: EQUAL
46609: IFFALSE 46619
// sComputer := true ;
46611: LD_ADDR_EXP 69
46615: PUSH
46616: LD_INT 1
46618: ST_TO_ADDR
// if p3 = 117 then
46619: LD_VAR 0 3
46623: PUSH
46624: LD_INT 117
46626: EQUAL
46627: IFFALSE 46637
// s30 := true ;
46629: LD_ADDR_EXP 70
46633: PUSH
46634: LD_INT 1
46636: ST_TO_ADDR
// if p3 = 118 then
46637: LD_VAR 0 3
46641: PUSH
46642: LD_INT 118
46644: EQUAL
46645: IFFALSE 46655
// s60 := true ;
46647: LD_ADDR_EXP 71
46651: PUSH
46652: LD_INT 1
46654: ST_TO_ADDR
// end ; if p2 = hack_mode then
46655: LD_VAR 0 2
46659: PUSH
46660: LD_INT 101
46662: EQUAL
46663: IFFALSE 46791
// begin case p3 of 1 :
46665: LD_VAR 0 3
46669: PUSH
46670: LD_INT 1
46672: DOUBLE
46673: EQUAL
46674: IFTRUE 46678
46676: GO 46685
46678: POP
// hHackUnlimitedResources ; 2 :
46679: CALL 58938 0 0
46683: GO 46791
46685: LD_INT 2
46687: DOUBLE
46688: EQUAL
46689: IFTRUE 46693
46691: GO 46700
46693: POP
// hHackSetLevel10 ; 3 :
46694: CALL 59071 0 0
46698: GO 46791
46700: LD_INT 3
46702: DOUBLE
46703: EQUAL
46704: IFTRUE 46708
46706: GO 46715
46708: POP
// hHackSetLevel10YourUnits ; 4 :
46709: CALL 59156 0 0
46713: GO 46791
46715: LD_INT 4
46717: DOUBLE
46718: EQUAL
46719: IFTRUE 46723
46721: GO 46730
46723: POP
// hHackInvincible ; 5 :
46724: CALL 59604 0 0
46728: GO 46791
46730: LD_INT 5
46732: DOUBLE
46733: EQUAL
46734: IFTRUE 46738
46736: GO 46745
46738: POP
// hHackInvisible ; 6 :
46739: CALL 59715 0 0
46743: GO 46791
46745: LD_INT 6
46747: DOUBLE
46748: EQUAL
46749: IFTRUE 46753
46751: GO 46760
46753: POP
// hHackChangeYourSide ; 7 :
46754: CALL 59772 0 0
46758: GO 46791
46760: LD_INT 7
46762: DOUBLE
46763: EQUAL
46764: IFTRUE 46768
46766: GO 46775
46768: POP
// hHackChangeUnitSide ; 8 :
46769: CALL 59814 0 0
46773: GO 46791
46775: LD_INT 8
46777: DOUBLE
46778: EQUAL
46779: IFTRUE 46783
46781: GO 46790
46783: POP
// hHackFog ; end ;
46784: CALL 59915 0 0
46788: GO 46791
46790: POP
// end ; if p2 = game_save_mode then
46791: LD_VAR 0 2
46795: PUSH
46796: LD_INT 102
46798: EQUAL
46799: IFFALSE 46854
// begin if p3 = 1 then
46801: LD_VAR 0 3
46805: PUSH
46806: LD_INT 1
46808: EQUAL
46809: IFFALSE 46821
// globalGameSaveCounter := p4 ;
46811: LD_ADDR_EXP 14
46815: PUSH
46816: LD_VAR 0 4
46820: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
46821: LD_VAR 0 3
46825: PUSH
46826: LD_INT 2
46828: EQUAL
46829: PUSH
46830: LD_EXP 14
46834: AND
46835: IFFALSE 46854
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
46837: LD_STRING setGameSaveCounter(
46839: PUSH
46840: LD_EXP 14
46844: STR
46845: PUSH
46846: LD_STRING )
46848: STR
46849: PPUSH
46850: CALL_OW 559
// end ; end ;
46854: LD_VAR 0 7
46858: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
46859: LD_INT 0
46861: PPUSH
// streamModeActive := false ;
46862: LD_ADDR_EXP 15
46866: PUSH
46867: LD_INT 0
46869: ST_TO_ADDR
// normalCounter := 36 ;
46870: LD_ADDR_EXP 16
46874: PUSH
46875: LD_INT 36
46877: ST_TO_ADDR
// hardcoreCounter := 18 ;
46878: LD_ADDR_EXP 17
46882: PUSH
46883: LD_INT 18
46885: ST_TO_ADDR
// sRocket := false ;
46886: LD_ADDR_EXP 20
46890: PUSH
46891: LD_INT 0
46893: ST_TO_ADDR
// sSpeed := false ;
46894: LD_ADDR_EXP 19
46898: PUSH
46899: LD_INT 0
46901: ST_TO_ADDR
// sEngine := false ;
46902: LD_ADDR_EXP 21
46906: PUSH
46907: LD_INT 0
46909: ST_TO_ADDR
// sSpec := false ;
46910: LD_ADDR_EXP 18
46914: PUSH
46915: LD_INT 0
46917: ST_TO_ADDR
// sLevel := false ;
46918: LD_ADDR_EXP 22
46922: PUSH
46923: LD_INT 0
46925: ST_TO_ADDR
// sArmoury := false ;
46926: LD_ADDR_EXP 23
46930: PUSH
46931: LD_INT 0
46933: ST_TO_ADDR
// sRadar := false ;
46934: LD_ADDR_EXP 24
46938: PUSH
46939: LD_INT 0
46941: ST_TO_ADDR
// sBunker := false ;
46942: LD_ADDR_EXP 25
46946: PUSH
46947: LD_INT 0
46949: ST_TO_ADDR
// sHack := false ;
46950: LD_ADDR_EXP 26
46954: PUSH
46955: LD_INT 0
46957: ST_TO_ADDR
// sFire := false ;
46958: LD_ADDR_EXP 27
46962: PUSH
46963: LD_INT 0
46965: ST_TO_ADDR
// sRefresh := false ;
46966: LD_ADDR_EXP 28
46970: PUSH
46971: LD_INT 0
46973: ST_TO_ADDR
// sExp := false ;
46974: LD_ADDR_EXP 29
46978: PUSH
46979: LD_INT 0
46981: ST_TO_ADDR
// sDepot := false ;
46982: LD_ADDR_EXP 30
46986: PUSH
46987: LD_INT 0
46989: ST_TO_ADDR
// sFlag := false ;
46990: LD_ADDR_EXP 31
46994: PUSH
46995: LD_INT 0
46997: ST_TO_ADDR
// sKamikadze := false ;
46998: LD_ADDR_EXP 39
47002: PUSH
47003: LD_INT 0
47005: ST_TO_ADDR
// sTroll := false ;
47006: LD_ADDR_EXP 40
47010: PUSH
47011: LD_INT 0
47013: ST_TO_ADDR
// sSlow := false ;
47014: LD_ADDR_EXP 41
47018: PUSH
47019: LD_INT 0
47021: ST_TO_ADDR
// sLack := false ;
47022: LD_ADDR_EXP 42
47026: PUSH
47027: LD_INT 0
47029: ST_TO_ADDR
// sTank := false ;
47030: LD_ADDR_EXP 44
47034: PUSH
47035: LD_INT 0
47037: ST_TO_ADDR
// sRemote := false ;
47038: LD_ADDR_EXP 45
47042: PUSH
47043: LD_INT 0
47045: ST_TO_ADDR
// sPowell := false ;
47046: LD_ADDR_EXP 46
47050: PUSH
47051: LD_INT 0
47053: ST_TO_ADDR
// sTeleport := false ;
47054: LD_ADDR_EXP 49
47058: PUSH
47059: LD_INT 0
47061: ST_TO_ADDR
// sOilTower := false ;
47062: LD_ADDR_EXP 51
47066: PUSH
47067: LD_INT 0
47069: ST_TO_ADDR
// sShovel := false ;
47070: LD_ADDR_EXP 52
47074: PUSH
47075: LD_INT 0
47077: ST_TO_ADDR
// sSheik := false ;
47078: LD_ADDR_EXP 53
47082: PUSH
47083: LD_INT 0
47085: ST_TO_ADDR
// sEarthquake := false ;
47086: LD_ADDR_EXP 55
47090: PUSH
47091: LD_INT 0
47093: ST_TO_ADDR
// sAI := false ;
47094: LD_ADDR_EXP 56
47098: PUSH
47099: LD_INT 0
47101: ST_TO_ADDR
// sCargo := false ;
47102: LD_ADDR_EXP 59
47106: PUSH
47107: LD_INT 0
47109: ST_TO_ADDR
// sDLaser := false ;
47110: LD_ADDR_EXP 60
47114: PUSH
47115: LD_INT 0
47117: ST_TO_ADDR
// sExchange := false ;
47118: LD_ADDR_EXP 61
47122: PUSH
47123: LD_INT 0
47125: ST_TO_ADDR
// sFac := false ;
47126: LD_ADDR_EXP 62
47130: PUSH
47131: LD_INT 0
47133: ST_TO_ADDR
// sPower := false ;
47134: LD_ADDR_EXP 63
47138: PUSH
47139: LD_INT 0
47141: ST_TO_ADDR
// sRandom := false ;
47142: LD_ADDR_EXP 64
47146: PUSH
47147: LD_INT 0
47149: ST_TO_ADDR
// sShield := false ;
47150: LD_ADDR_EXP 65
47154: PUSH
47155: LD_INT 0
47157: ST_TO_ADDR
// sTime := false ;
47158: LD_ADDR_EXP 66
47162: PUSH
47163: LD_INT 0
47165: ST_TO_ADDR
// sTools := false ;
47166: LD_ADDR_EXP 67
47170: PUSH
47171: LD_INT 0
47173: ST_TO_ADDR
// sSold := false ;
47174: LD_ADDR_EXP 32
47178: PUSH
47179: LD_INT 0
47181: ST_TO_ADDR
// sDiff := false ;
47182: LD_ADDR_EXP 33
47186: PUSH
47187: LD_INT 0
47189: ST_TO_ADDR
// sFog := false ;
47190: LD_ADDR_EXP 36
47194: PUSH
47195: LD_INT 0
47197: ST_TO_ADDR
// sReset := false ;
47198: LD_ADDR_EXP 37
47202: PUSH
47203: LD_INT 0
47205: ST_TO_ADDR
// sSun := false ;
47206: LD_ADDR_EXP 38
47210: PUSH
47211: LD_INT 0
47213: ST_TO_ADDR
// sTiger := false ;
47214: LD_ADDR_EXP 34
47218: PUSH
47219: LD_INT 0
47221: ST_TO_ADDR
// sBomb := false ;
47222: LD_ADDR_EXP 35
47226: PUSH
47227: LD_INT 0
47229: ST_TO_ADDR
// sWound := false ;
47230: LD_ADDR_EXP 43
47234: PUSH
47235: LD_INT 0
47237: ST_TO_ADDR
// sBetray := false ;
47238: LD_ADDR_EXP 47
47242: PUSH
47243: LD_INT 0
47245: ST_TO_ADDR
// sContamin := false ;
47246: LD_ADDR_EXP 48
47250: PUSH
47251: LD_INT 0
47253: ST_TO_ADDR
// sOil := false ;
47254: LD_ADDR_EXP 50
47258: PUSH
47259: LD_INT 0
47261: ST_TO_ADDR
// sStu := false ;
47262: LD_ADDR_EXP 54
47266: PUSH
47267: LD_INT 0
47269: ST_TO_ADDR
// sBazooka := false ;
47270: LD_ADDR_EXP 57
47274: PUSH
47275: LD_INT 0
47277: ST_TO_ADDR
// sMortar := false ;
47278: LD_ADDR_EXP 58
47282: PUSH
47283: LD_INT 0
47285: ST_TO_ADDR
// sRanger := false ;
47286: LD_ADDR_EXP 68
47290: PUSH
47291: LD_INT 0
47293: ST_TO_ADDR
// sComputer := false ;
47294: LD_ADDR_EXP 69
47298: PUSH
47299: LD_INT 0
47301: ST_TO_ADDR
// s30 := false ;
47302: LD_ADDR_EXP 70
47306: PUSH
47307: LD_INT 0
47309: ST_TO_ADDR
// s60 := false ;
47310: LD_ADDR_EXP 71
47314: PUSH
47315: LD_INT 0
47317: ST_TO_ADDR
// end ;
47318: LD_VAR 0 1
47322: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
47323: LD_INT 0
47325: PPUSH
47326: PPUSH
47327: PPUSH
47328: PPUSH
47329: PPUSH
47330: PPUSH
47331: PPUSH
// result := [ ] ;
47332: LD_ADDR_VAR 0 2
47336: PUSH
47337: EMPTY
47338: ST_TO_ADDR
// if campaign_id = 1 then
47339: LD_OWVAR 69
47343: PUSH
47344: LD_INT 1
47346: EQUAL
47347: IFFALSE 50513
// begin case mission_number of 1 :
47349: LD_OWVAR 70
47353: PUSH
47354: LD_INT 1
47356: DOUBLE
47357: EQUAL
47358: IFTRUE 47362
47360: GO 47438
47362: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
47363: LD_ADDR_VAR 0 2
47367: PUSH
47368: LD_INT 2
47370: PUSH
47371: LD_INT 4
47373: PUSH
47374: LD_INT 11
47376: PUSH
47377: LD_INT 12
47379: PUSH
47380: LD_INT 15
47382: PUSH
47383: LD_INT 16
47385: PUSH
47386: LD_INT 22
47388: PUSH
47389: LD_INT 23
47391: PUSH
47392: LD_INT 26
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 101
47408: PUSH
47409: LD_INT 102
47411: PUSH
47412: LD_INT 106
47414: PUSH
47415: LD_INT 116
47417: PUSH
47418: LD_INT 117
47420: PUSH
47421: LD_INT 118
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: ST_TO_ADDR
47436: GO 50511
47438: LD_INT 2
47440: DOUBLE
47441: EQUAL
47442: IFTRUE 47446
47444: GO 47530
47446: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
47447: LD_ADDR_VAR 0 2
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: LD_INT 4
47457: PUSH
47458: LD_INT 11
47460: PUSH
47461: LD_INT 12
47463: PUSH
47464: LD_INT 15
47466: PUSH
47467: LD_INT 16
47469: PUSH
47470: LD_INT 22
47472: PUSH
47473: LD_INT 23
47475: PUSH
47476: LD_INT 26
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 101
47492: PUSH
47493: LD_INT 102
47495: PUSH
47496: LD_INT 105
47498: PUSH
47499: LD_INT 106
47501: PUSH
47502: LD_INT 108
47504: PUSH
47505: LD_INT 116
47507: PUSH
47508: LD_INT 117
47510: PUSH
47511: LD_INT 118
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: ST_TO_ADDR
47528: GO 50511
47530: LD_INT 3
47532: DOUBLE
47533: EQUAL
47534: IFTRUE 47538
47536: GO 47626
47538: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
47539: LD_ADDR_VAR 0 2
47543: PUSH
47544: LD_INT 2
47546: PUSH
47547: LD_INT 4
47549: PUSH
47550: LD_INT 5
47552: PUSH
47553: LD_INT 11
47555: PUSH
47556: LD_INT 12
47558: PUSH
47559: LD_INT 15
47561: PUSH
47562: LD_INT 16
47564: PUSH
47565: LD_INT 22
47567: PUSH
47568: LD_INT 26
47570: PUSH
47571: LD_INT 36
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 101
47588: PUSH
47589: LD_INT 102
47591: PUSH
47592: LD_INT 105
47594: PUSH
47595: LD_INT 106
47597: PUSH
47598: LD_INT 108
47600: PUSH
47601: LD_INT 116
47603: PUSH
47604: LD_INT 117
47606: PUSH
47607: LD_INT 118
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: ST_TO_ADDR
47624: GO 50511
47626: LD_INT 4
47628: DOUBLE
47629: EQUAL
47630: IFTRUE 47634
47632: GO 47730
47634: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
47635: LD_ADDR_VAR 0 2
47639: PUSH
47640: LD_INT 2
47642: PUSH
47643: LD_INT 4
47645: PUSH
47646: LD_INT 5
47648: PUSH
47649: LD_INT 8
47651: PUSH
47652: LD_INT 11
47654: PUSH
47655: LD_INT 12
47657: PUSH
47658: LD_INT 15
47660: PUSH
47661: LD_INT 16
47663: PUSH
47664: LD_INT 22
47666: PUSH
47667: LD_INT 23
47669: PUSH
47670: LD_INT 26
47672: PUSH
47673: LD_INT 36
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 101
47692: PUSH
47693: LD_INT 102
47695: PUSH
47696: LD_INT 105
47698: PUSH
47699: LD_INT 106
47701: PUSH
47702: LD_INT 108
47704: PUSH
47705: LD_INT 116
47707: PUSH
47708: LD_INT 117
47710: PUSH
47711: LD_INT 118
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: ST_TO_ADDR
47728: GO 50511
47730: LD_INT 5
47732: DOUBLE
47733: EQUAL
47734: IFTRUE 47738
47736: GO 47850
47738: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
47739: LD_ADDR_VAR 0 2
47743: PUSH
47744: LD_INT 2
47746: PUSH
47747: LD_INT 4
47749: PUSH
47750: LD_INT 5
47752: PUSH
47753: LD_INT 6
47755: PUSH
47756: LD_INT 8
47758: PUSH
47759: LD_INT 11
47761: PUSH
47762: LD_INT 12
47764: PUSH
47765: LD_INT 15
47767: PUSH
47768: LD_INT 16
47770: PUSH
47771: LD_INT 22
47773: PUSH
47774: LD_INT 23
47776: PUSH
47777: LD_INT 25
47779: PUSH
47780: LD_INT 26
47782: PUSH
47783: LD_INT 36
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 101
47804: PUSH
47805: LD_INT 102
47807: PUSH
47808: LD_INT 105
47810: PUSH
47811: LD_INT 106
47813: PUSH
47814: LD_INT 108
47816: PUSH
47817: LD_INT 109
47819: PUSH
47820: LD_INT 112
47822: PUSH
47823: LD_INT 116
47825: PUSH
47826: LD_INT 117
47828: PUSH
47829: LD_INT 118
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: ST_TO_ADDR
47848: GO 50511
47850: LD_INT 6
47852: DOUBLE
47853: EQUAL
47854: IFTRUE 47858
47856: GO 47990
47858: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
47859: LD_ADDR_VAR 0 2
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: LD_INT 4
47869: PUSH
47870: LD_INT 5
47872: PUSH
47873: LD_INT 6
47875: PUSH
47876: LD_INT 8
47878: PUSH
47879: LD_INT 11
47881: PUSH
47882: LD_INT 12
47884: PUSH
47885: LD_INT 15
47887: PUSH
47888: LD_INT 16
47890: PUSH
47891: LD_INT 20
47893: PUSH
47894: LD_INT 21
47896: PUSH
47897: LD_INT 22
47899: PUSH
47900: LD_INT 23
47902: PUSH
47903: LD_INT 25
47905: PUSH
47906: LD_INT 26
47908: PUSH
47909: LD_INT 30
47911: PUSH
47912: LD_INT 31
47914: PUSH
47915: LD_INT 32
47917: PUSH
47918: LD_INT 36
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 101
47944: PUSH
47945: LD_INT 102
47947: PUSH
47948: LD_INT 105
47950: PUSH
47951: LD_INT 106
47953: PUSH
47954: LD_INT 108
47956: PUSH
47957: LD_INT 109
47959: PUSH
47960: LD_INT 112
47962: PUSH
47963: LD_INT 116
47965: PUSH
47966: LD_INT 117
47968: PUSH
47969: LD_INT 118
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: ST_TO_ADDR
47988: GO 50511
47990: LD_INT 7
47992: DOUBLE
47993: EQUAL
47994: IFTRUE 47998
47996: GO 48110
47998: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
47999: LD_ADDR_VAR 0 2
48003: PUSH
48004: LD_INT 2
48006: PUSH
48007: LD_INT 4
48009: PUSH
48010: LD_INT 5
48012: PUSH
48013: LD_INT 7
48015: PUSH
48016: LD_INT 11
48018: PUSH
48019: LD_INT 12
48021: PUSH
48022: LD_INT 15
48024: PUSH
48025: LD_INT 16
48027: PUSH
48028: LD_INT 20
48030: PUSH
48031: LD_INT 21
48033: PUSH
48034: LD_INT 22
48036: PUSH
48037: LD_INT 23
48039: PUSH
48040: LD_INT 25
48042: PUSH
48043: LD_INT 26
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 101
48064: PUSH
48065: LD_INT 102
48067: PUSH
48068: LD_INT 103
48070: PUSH
48071: LD_INT 105
48073: PUSH
48074: LD_INT 106
48076: PUSH
48077: LD_INT 108
48079: PUSH
48080: LD_INT 112
48082: PUSH
48083: LD_INT 116
48085: PUSH
48086: LD_INT 117
48088: PUSH
48089: LD_INT 118
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: ST_TO_ADDR
48108: GO 50511
48110: LD_INT 8
48112: DOUBLE
48113: EQUAL
48114: IFTRUE 48118
48116: GO 48258
48118: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
48119: LD_ADDR_VAR 0 2
48123: PUSH
48124: LD_INT 2
48126: PUSH
48127: LD_INT 4
48129: PUSH
48130: LD_INT 5
48132: PUSH
48133: LD_INT 6
48135: PUSH
48136: LD_INT 7
48138: PUSH
48139: LD_INT 8
48141: PUSH
48142: LD_INT 11
48144: PUSH
48145: LD_INT 12
48147: PUSH
48148: LD_INT 15
48150: PUSH
48151: LD_INT 16
48153: PUSH
48154: LD_INT 20
48156: PUSH
48157: LD_INT 21
48159: PUSH
48160: LD_INT 22
48162: PUSH
48163: LD_INT 23
48165: PUSH
48166: LD_INT 25
48168: PUSH
48169: LD_INT 26
48171: PUSH
48172: LD_INT 30
48174: PUSH
48175: LD_INT 31
48177: PUSH
48178: LD_INT 32
48180: PUSH
48181: LD_INT 36
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 101
48208: PUSH
48209: LD_INT 102
48211: PUSH
48212: LD_INT 103
48214: PUSH
48215: LD_INT 105
48217: PUSH
48218: LD_INT 106
48220: PUSH
48221: LD_INT 108
48223: PUSH
48224: LD_INT 109
48226: PUSH
48227: LD_INT 112
48229: PUSH
48230: LD_INT 116
48232: PUSH
48233: LD_INT 117
48235: PUSH
48236: LD_INT 118
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: ST_TO_ADDR
48256: GO 50511
48258: LD_INT 9
48260: DOUBLE
48261: EQUAL
48262: IFTRUE 48266
48264: GO 48414
48266: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
48267: LD_ADDR_VAR 0 2
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: LD_INT 4
48277: PUSH
48278: LD_INT 5
48280: PUSH
48281: LD_INT 6
48283: PUSH
48284: LD_INT 7
48286: PUSH
48287: LD_INT 8
48289: PUSH
48290: LD_INT 11
48292: PUSH
48293: LD_INT 12
48295: PUSH
48296: LD_INT 15
48298: PUSH
48299: LD_INT 16
48301: PUSH
48302: LD_INT 20
48304: PUSH
48305: LD_INT 21
48307: PUSH
48308: LD_INT 22
48310: PUSH
48311: LD_INT 23
48313: PUSH
48314: LD_INT 25
48316: PUSH
48317: LD_INT 26
48319: PUSH
48320: LD_INT 28
48322: PUSH
48323: LD_INT 30
48325: PUSH
48326: LD_INT 31
48328: PUSH
48329: LD_INT 32
48331: PUSH
48332: LD_INT 36
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 101
48360: PUSH
48361: LD_INT 102
48363: PUSH
48364: LD_INT 103
48366: PUSH
48367: LD_INT 105
48369: PUSH
48370: LD_INT 106
48372: PUSH
48373: LD_INT 108
48375: PUSH
48376: LD_INT 109
48378: PUSH
48379: LD_INT 112
48381: PUSH
48382: LD_INT 114
48384: PUSH
48385: LD_INT 116
48387: PUSH
48388: LD_INT 117
48390: PUSH
48391: LD_INT 118
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: ST_TO_ADDR
48412: GO 50511
48414: LD_INT 10
48416: DOUBLE
48417: EQUAL
48418: IFTRUE 48422
48420: GO 48618
48422: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
48423: LD_ADDR_VAR 0 2
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: LD_INT 4
48433: PUSH
48434: LD_INT 5
48436: PUSH
48437: LD_INT 6
48439: PUSH
48440: LD_INT 7
48442: PUSH
48443: LD_INT 8
48445: PUSH
48446: LD_INT 9
48448: PUSH
48449: LD_INT 10
48451: PUSH
48452: LD_INT 11
48454: PUSH
48455: LD_INT 12
48457: PUSH
48458: LD_INT 13
48460: PUSH
48461: LD_INT 14
48463: PUSH
48464: LD_INT 15
48466: PUSH
48467: LD_INT 16
48469: PUSH
48470: LD_INT 17
48472: PUSH
48473: LD_INT 18
48475: PUSH
48476: LD_INT 19
48478: PUSH
48479: LD_INT 20
48481: PUSH
48482: LD_INT 21
48484: PUSH
48485: LD_INT 22
48487: PUSH
48488: LD_INT 23
48490: PUSH
48491: LD_INT 24
48493: PUSH
48494: LD_INT 25
48496: PUSH
48497: LD_INT 26
48499: PUSH
48500: LD_INT 28
48502: PUSH
48503: LD_INT 30
48505: PUSH
48506: LD_INT 31
48508: PUSH
48509: LD_INT 32
48511: PUSH
48512: LD_INT 36
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 101
48548: PUSH
48549: LD_INT 102
48551: PUSH
48552: LD_INT 103
48554: PUSH
48555: LD_INT 104
48557: PUSH
48558: LD_INT 105
48560: PUSH
48561: LD_INT 106
48563: PUSH
48564: LD_INT 107
48566: PUSH
48567: LD_INT 108
48569: PUSH
48570: LD_INT 109
48572: PUSH
48573: LD_INT 110
48575: PUSH
48576: LD_INT 111
48578: PUSH
48579: LD_INT 112
48581: PUSH
48582: LD_INT 114
48584: PUSH
48585: LD_INT 116
48587: PUSH
48588: LD_INT 117
48590: PUSH
48591: LD_INT 118
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: ST_TO_ADDR
48616: GO 50511
48618: LD_INT 11
48620: DOUBLE
48621: EQUAL
48622: IFTRUE 48626
48624: GO 48830
48626: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
48627: LD_ADDR_VAR 0 2
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: LD_INT 3
48637: PUSH
48638: LD_INT 4
48640: PUSH
48641: LD_INT 5
48643: PUSH
48644: LD_INT 6
48646: PUSH
48647: LD_INT 7
48649: PUSH
48650: LD_INT 8
48652: PUSH
48653: LD_INT 9
48655: PUSH
48656: LD_INT 10
48658: PUSH
48659: LD_INT 11
48661: PUSH
48662: LD_INT 12
48664: PUSH
48665: LD_INT 13
48667: PUSH
48668: LD_INT 14
48670: PUSH
48671: LD_INT 15
48673: PUSH
48674: LD_INT 16
48676: PUSH
48677: LD_INT 17
48679: PUSH
48680: LD_INT 18
48682: PUSH
48683: LD_INT 19
48685: PUSH
48686: LD_INT 20
48688: PUSH
48689: LD_INT 21
48691: PUSH
48692: LD_INT 22
48694: PUSH
48695: LD_INT 23
48697: PUSH
48698: LD_INT 24
48700: PUSH
48701: LD_INT 25
48703: PUSH
48704: LD_INT 26
48706: PUSH
48707: LD_INT 28
48709: PUSH
48710: LD_INT 30
48712: PUSH
48713: LD_INT 31
48715: PUSH
48716: LD_INT 32
48718: PUSH
48719: LD_INT 34
48721: PUSH
48722: LD_INT 36
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 101
48760: PUSH
48761: LD_INT 102
48763: PUSH
48764: LD_INT 103
48766: PUSH
48767: LD_INT 104
48769: PUSH
48770: LD_INT 105
48772: PUSH
48773: LD_INT 106
48775: PUSH
48776: LD_INT 107
48778: PUSH
48779: LD_INT 108
48781: PUSH
48782: LD_INT 109
48784: PUSH
48785: LD_INT 110
48787: PUSH
48788: LD_INT 111
48790: PUSH
48791: LD_INT 112
48793: PUSH
48794: LD_INT 114
48796: PUSH
48797: LD_INT 116
48799: PUSH
48800: LD_INT 117
48802: PUSH
48803: LD_INT 118
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: ST_TO_ADDR
48828: GO 50511
48830: LD_INT 12
48832: DOUBLE
48833: EQUAL
48834: IFTRUE 48838
48836: GO 49058
48838: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
48839: LD_ADDR_VAR 0 2
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: LD_INT 3
48852: PUSH
48853: LD_INT 4
48855: PUSH
48856: LD_INT 5
48858: PUSH
48859: LD_INT 6
48861: PUSH
48862: LD_INT 7
48864: PUSH
48865: LD_INT 8
48867: PUSH
48868: LD_INT 9
48870: PUSH
48871: LD_INT 10
48873: PUSH
48874: LD_INT 11
48876: PUSH
48877: LD_INT 12
48879: PUSH
48880: LD_INT 13
48882: PUSH
48883: LD_INT 14
48885: PUSH
48886: LD_INT 15
48888: PUSH
48889: LD_INT 16
48891: PUSH
48892: LD_INT 17
48894: PUSH
48895: LD_INT 18
48897: PUSH
48898: LD_INT 19
48900: PUSH
48901: LD_INT 20
48903: PUSH
48904: LD_INT 21
48906: PUSH
48907: LD_INT 22
48909: PUSH
48910: LD_INT 23
48912: PUSH
48913: LD_INT 24
48915: PUSH
48916: LD_INT 25
48918: PUSH
48919: LD_INT 26
48921: PUSH
48922: LD_INT 27
48924: PUSH
48925: LD_INT 28
48927: PUSH
48928: LD_INT 30
48930: PUSH
48931: LD_INT 31
48933: PUSH
48934: LD_INT 32
48936: PUSH
48937: LD_INT 33
48939: PUSH
48940: LD_INT 34
48942: PUSH
48943: LD_INT 36
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 101
48984: PUSH
48985: LD_INT 102
48987: PUSH
48988: LD_INT 103
48990: PUSH
48991: LD_INT 104
48993: PUSH
48994: LD_INT 105
48996: PUSH
48997: LD_INT 106
48999: PUSH
49000: LD_INT 107
49002: PUSH
49003: LD_INT 108
49005: PUSH
49006: LD_INT 109
49008: PUSH
49009: LD_INT 110
49011: PUSH
49012: LD_INT 111
49014: PUSH
49015: LD_INT 112
49017: PUSH
49018: LD_INT 113
49020: PUSH
49021: LD_INT 114
49023: PUSH
49024: LD_INT 116
49026: PUSH
49027: LD_INT 117
49029: PUSH
49030: LD_INT 118
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: ST_TO_ADDR
49056: GO 50511
49058: LD_INT 13
49060: DOUBLE
49061: EQUAL
49062: IFTRUE 49066
49064: GO 49274
49066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
49067: LD_ADDR_VAR 0 2
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: LD_INT 3
49080: PUSH
49081: LD_INT 4
49083: PUSH
49084: LD_INT 5
49086: PUSH
49087: LD_INT 8
49089: PUSH
49090: LD_INT 9
49092: PUSH
49093: LD_INT 10
49095: PUSH
49096: LD_INT 11
49098: PUSH
49099: LD_INT 12
49101: PUSH
49102: LD_INT 14
49104: PUSH
49105: LD_INT 15
49107: PUSH
49108: LD_INT 16
49110: PUSH
49111: LD_INT 17
49113: PUSH
49114: LD_INT 18
49116: PUSH
49117: LD_INT 19
49119: PUSH
49120: LD_INT 20
49122: PUSH
49123: LD_INT 21
49125: PUSH
49126: LD_INT 22
49128: PUSH
49129: LD_INT 23
49131: PUSH
49132: LD_INT 24
49134: PUSH
49135: LD_INT 25
49137: PUSH
49138: LD_INT 26
49140: PUSH
49141: LD_INT 27
49143: PUSH
49144: LD_INT 28
49146: PUSH
49147: LD_INT 30
49149: PUSH
49150: LD_INT 31
49152: PUSH
49153: LD_INT 32
49155: PUSH
49156: LD_INT 33
49158: PUSH
49159: LD_INT 34
49161: PUSH
49162: LD_INT 36
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 101
49200: PUSH
49201: LD_INT 102
49203: PUSH
49204: LD_INT 103
49206: PUSH
49207: LD_INT 104
49209: PUSH
49210: LD_INT 105
49212: PUSH
49213: LD_INT 106
49215: PUSH
49216: LD_INT 107
49218: PUSH
49219: LD_INT 108
49221: PUSH
49222: LD_INT 109
49224: PUSH
49225: LD_INT 110
49227: PUSH
49228: LD_INT 111
49230: PUSH
49231: LD_INT 112
49233: PUSH
49234: LD_INT 113
49236: PUSH
49237: LD_INT 114
49239: PUSH
49240: LD_INT 116
49242: PUSH
49243: LD_INT 117
49245: PUSH
49246: LD_INT 118
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: ST_TO_ADDR
49272: GO 50511
49274: LD_INT 14
49276: DOUBLE
49277: EQUAL
49278: IFTRUE 49282
49280: GO 49506
49282: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
49283: LD_ADDR_VAR 0 2
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: LD_INT 2
49293: PUSH
49294: LD_INT 3
49296: PUSH
49297: LD_INT 4
49299: PUSH
49300: LD_INT 5
49302: PUSH
49303: LD_INT 6
49305: PUSH
49306: LD_INT 7
49308: PUSH
49309: LD_INT 8
49311: PUSH
49312: LD_INT 9
49314: PUSH
49315: LD_INT 10
49317: PUSH
49318: LD_INT 11
49320: PUSH
49321: LD_INT 12
49323: PUSH
49324: LD_INT 13
49326: PUSH
49327: LD_INT 14
49329: PUSH
49330: LD_INT 15
49332: PUSH
49333: LD_INT 16
49335: PUSH
49336: LD_INT 17
49338: PUSH
49339: LD_INT 18
49341: PUSH
49342: LD_INT 19
49344: PUSH
49345: LD_INT 20
49347: PUSH
49348: LD_INT 21
49350: PUSH
49351: LD_INT 22
49353: PUSH
49354: LD_INT 23
49356: PUSH
49357: LD_INT 24
49359: PUSH
49360: LD_INT 25
49362: PUSH
49363: LD_INT 26
49365: PUSH
49366: LD_INT 27
49368: PUSH
49369: LD_INT 28
49371: PUSH
49372: LD_INT 29
49374: PUSH
49375: LD_INT 30
49377: PUSH
49378: LD_INT 31
49380: PUSH
49381: LD_INT 32
49383: PUSH
49384: LD_INT 33
49386: PUSH
49387: LD_INT 34
49389: PUSH
49390: LD_INT 36
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 101
49432: PUSH
49433: LD_INT 102
49435: PUSH
49436: LD_INT 103
49438: PUSH
49439: LD_INT 104
49441: PUSH
49442: LD_INT 105
49444: PUSH
49445: LD_INT 106
49447: PUSH
49448: LD_INT 107
49450: PUSH
49451: LD_INT 108
49453: PUSH
49454: LD_INT 109
49456: PUSH
49457: LD_INT 110
49459: PUSH
49460: LD_INT 111
49462: PUSH
49463: LD_INT 112
49465: PUSH
49466: LD_INT 113
49468: PUSH
49469: LD_INT 114
49471: PUSH
49472: LD_INT 116
49474: PUSH
49475: LD_INT 117
49477: PUSH
49478: LD_INT 118
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: ST_TO_ADDR
49504: GO 50511
49506: LD_INT 15
49508: DOUBLE
49509: EQUAL
49510: IFTRUE 49514
49512: GO 49738
49514: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
49515: LD_ADDR_VAR 0 2
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: LD_INT 3
49528: PUSH
49529: LD_INT 4
49531: PUSH
49532: LD_INT 5
49534: PUSH
49535: LD_INT 6
49537: PUSH
49538: LD_INT 7
49540: PUSH
49541: LD_INT 8
49543: PUSH
49544: LD_INT 9
49546: PUSH
49547: LD_INT 10
49549: PUSH
49550: LD_INT 11
49552: PUSH
49553: LD_INT 12
49555: PUSH
49556: LD_INT 13
49558: PUSH
49559: LD_INT 14
49561: PUSH
49562: LD_INT 15
49564: PUSH
49565: LD_INT 16
49567: PUSH
49568: LD_INT 17
49570: PUSH
49571: LD_INT 18
49573: PUSH
49574: LD_INT 19
49576: PUSH
49577: LD_INT 20
49579: PUSH
49580: LD_INT 21
49582: PUSH
49583: LD_INT 22
49585: PUSH
49586: LD_INT 23
49588: PUSH
49589: LD_INT 24
49591: PUSH
49592: LD_INT 25
49594: PUSH
49595: LD_INT 26
49597: PUSH
49598: LD_INT 27
49600: PUSH
49601: LD_INT 28
49603: PUSH
49604: LD_INT 29
49606: PUSH
49607: LD_INT 30
49609: PUSH
49610: LD_INT 31
49612: PUSH
49613: LD_INT 32
49615: PUSH
49616: LD_INT 33
49618: PUSH
49619: LD_INT 34
49621: PUSH
49622: LD_INT 36
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 101
49664: PUSH
49665: LD_INT 102
49667: PUSH
49668: LD_INT 103
49670: PUSH
49671: LD_INT 104
49673: PUSH
49674: LD_INT 105
49676: PUSH
49677: LD_INT 106
49679: PUSH
49680: LD_INT 107
49682: PUSH
49683: LD_INT 108
49685: PUSH
49686: LD_INT 109
49688: PUSH
49689: LD_INT 110
49691: PUSH
49692: LD_INT 111
49694: PUSH
49695: LD_INT 112
49697: PUSH
49698: LD_INT 113
49700: PUSH
49701: LD_INT 114
49703: PUSH
49704: LD_INT 116
49706: PUSH
49707: LD_INT 117
49709: PUSH
49710: LD_INT 118
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: ST_TO_ADDR
49736: GO 50511
49738: LD_INT 16
49740: DOUBLE
49741: EQUAL
49742: IFTRUE 49746
49744: GO 49882
49746: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
49747: LD_ADDR_VAR 0 2
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: LD_INT 4
49757: PUSH
49758: LD_INT 5
49760: PUSH
49761: LD_INT 7
49763: PUSH
49764: LD_INT 11
49766: PUSH
49767: LD_INT 12
49769: PUSH
49770: LD_INT 15
49772: PUSH
49773: LD_INT 16
49775: PUSH
49776: LD_INT 20
49778: PUSH
49779: LD_INT 21
49781: PUSH
49782: LD_INT 22
49784: PUSH
49785: LD_INT 23
49787: PUSH
49788: LD_INT 25
49790: PUSH
49791: LD_INT 26
49793: PUSH
49794: LD_INT 30
49796: PUSH
49797: LD_INT 31
49799: PUSH
49800: LD_INT 32
49802: PUSH
49803: LD_INT 33
49805: PUSH
49806: LD_INT 34
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 101
49832: PUSH
49833: LD_INT 102
49835: PUSH
49836: LD_INT 103
49838: PUSH
49839: LD_INT 106
49841: PUSH
49842: LD_INT 108
49844: PUSH
49845: LD_INT 112
49847: PUSH
49848: LD_INT 113
49850: PUSH
49851: LD_INT 114
49853: PUSH
49854: LD_INT 116
49856: PUSH
49857: LD_INT 117
49859: PUSH
49860: LD_INT 118
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: ST_TO_ADDR
49880: GO 50511
49882: LD_INT 17
49884: DOUBLE
49885: EQUAL
49886: IFTRUE 49890
49888: GO 50114
49890: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
49891: LD_ADDR_VAR 0 2
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 2
49901: PUSH
49902: LD_INT 3
49904: PUSH
49905: LD_INT 4
49907: PUSH
49908: LD_INT 5
49910: PUSH
49911: LD_INT 6
49913: PUSH
49914: LD_INT 7
49916: PUSH
49917: LD_INT 8
49919: PUSH
49920: LD_INT 9
49922: PUSH
49923: LD_INT 10
49925: PUSH
49926: LD_INT 11
49928: PUSH
49929: LD_INT 12
49931: PUSH
49932: LD_INT 13
49934: PUSH
49935: LD_INT 14
49937: PUSH
49938: LD_INT 15
49940: PUSH
49941: LD_INT 16
49943: PUSH
49944: LD_INT 17
49946: PUSH
49947: LD_INT 18
49949: PUSH
49950: LD_INT 19
49952: PUSH
49953: LD_INT 20
49955: PUSH
49956: LD_INT 21
49958: PUSH
49959: LD_INT 22
49961: PUSH
49962: LD_INT 23
49964: PUSH
49965: LD_INT 24
49967: PUSH
49968: LD_INT 25
49970: PUSH
49971: LD_INT 26
49973: PUSH
49974: LD_INT 27
49976: PUSH
49977: LD_INT 28
49979: PUSH
49980: LD_INT 29
49982: PUSH
49983: LD_INT 30
49985: PUSH
49986: LD_INT 31
49988: PUSH
49989: LD_INT 32
49991: PUSH
49992: LD_INT 33
49994: PUSH
49995: LD_INT 34
49997: PUSH
49998: LD_INT 36
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 101
50040: PUSH
50041: LD_INT 102
50043: PUSH
50044: LD_INT 103
50046: PUSH
50047: LD_INT 104
50049: PUSH
50050: LD_INT 105
50052: PUSH
50053: LD_INT 106
50055: PUSH
50056: LD_INT 107
50058: PUSH
50059: LD_INT 108
50061: PUSH
50062: LD_INT 109
50064: PUSH
50065: LD_INT 110
50067: PUSH
50068: LD_INT 111
50070: PUSH
50071: LD_INT 112
50073: PUSH
50074: LD_INT 113
50076: PUSH
50077: LD_INT 114
50079: PUSH
50080: LD_INT 116
50082: PUSH
50083: LD_INT 117
50085: PUSH
50086: LD_INT 118
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: ST_TO_ADDR
50112: GO 50511
50114: LD_INT 18
50116: DOUBLE
50117: EQUAL
50118: IFTRUE 50122
50120: GO 50270
50122: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
50123: LD_ADDR_VAR 0 2
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: LD_INT 4
50133: PUSH
50134: LD_INT 5
50136: PUSH
50137: LD_INT 7
50139: PUSH
50140: LD_INT 11
50142: PUSH
50143: LD_INT 12
50145: PUSH
50146: LD_INT 15
50148: PUSH
50149: LD_INT 16
50151: PUSH
50152: LD_INT 20
50154: PUSH
50155: LD_INT 21
50157: PUSH
50158: LD_INT 22
50160: PUSH
50161: LD_INT 23
50163: PUSH
50164: LD_INT 25
50166: PUSH
50167: LD_INT 26
50169: PUSH
50170: LD_INT 30
50172: PUSH
50173: LD_INT 31
50175: PUSH
50176: LD_INT 32
50178: PUSH
50179: LD_INT 33
50181: PUSH
50182: LD_INT 34
50184: PUSH
50185: LD_INT 35
50187: PUSH
50188: LD_INT 36
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 101
50216: PUSH
50217: LD_INT 102
50219: PUSH
50220: LD_INT 103
50222: PUSH
50223: LD_INT 106
50225: PUSH
50226: LD_INT 108
50228: PUSH
50229: LD_INT 112
50231: PUSH
50232: LD_INT 113
50234: PUSH
50235: LD_INT 114
50237: PUSH
50238: LD_INT 115
50240: PUSH
50241: LD_INT 116
50243: PUSH
50244: LD_INT 117
50246: PUSH
50247: LD_INT 118
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: ST_TO_ADDR
50268: GO 50511
50270: LD_INT 19
50272: DOUBLE
50273: EQUAL
50274: IFTRUE 50278
50276: GO 50510
50278: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
50279: LD_ADDR_VAR 0 2
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: LD_INT 2
50289: PUSH
50290: LD_INT 3
50292: PUSH
50293: LD_INT 4
50295: PUSH
50296: LD_INT 5
50298: PUSH
50299: LD_INT 6
50301: PUSH
50302: LD_INT 7
50304: PUSH
50305: LD_INT 8
50307: PUSH
50308: LD_INT 9
50310: PUSH
50311: LD_INT 10
50313: PUSH
50314: LD_INT 11
50316: PUSH
50317: LD_INT 12
50319: PUSH
50320: LD_INT 13
50322: PUSH
50323: LD_INT 14
50325: PUSH
50326: LD_INT 15
50328: PUSH
50329: LD_INT 16
50331: PUSH
50332: LD_INT 17
50334: PUSH
50335: LD_INT 18
50337: PUSH
50338: LD_INT 19
50340: PUSH
50341: LD_INT 20
50343: PUSH
50344: LD_INT 21
50346: PUSH
50347: LD_INT 22
50349: PUSH
50350: LD_INT 23
50352: PUSH
50353: LD_INT 24
50355: PUSH
50356: LD_INT 25
50358: PUSH
50359: LD_INT 26
50361: PUSH
50362: LD_INT 27
50364: PUSH
50365: LD_INT 28
50367: PUSH
50368: LD_INT 29
50370: PUSH
50371: LD_INT 30
50373: PUSH
50374: LD_INT 31
50376: PUSH
50377: LD_INT 32
50379: PUSH
50380: LD_INT 33
50382: PUSH
50383: LD_INT 34
50385: PUSH
50386: LD_INT 35
50388: PUSH
50389: LD_INT 36
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 101
50432: PUSH
50433: LD_INT 102
50435: PUSH
50436: LD_INT 103
50438: PUSH
50439: LD_INT 104
50441: PUSH
50442: LD_INT 105
50444: PUSH
50445: LD_INT 106
50447: PUSH
50448: LD_INT 107
50450: PUSH
50451: LD_INT 108
50453: PUSH
50454: LD_INT 109
50456: PUSH
50457: LD_INT 110
50459: PUSH
50460: LD_INT 111
50462: PUSH
50463: LD_INT 112
50465: PUSH
50466: LD_INT 113
50468: PUSH
50469: LD_INT 114
50471: PUSH
50472: LD_INT 115
50474: PUSH
50475: LD_INT 116
50477: PUSH
50478: LD_INT 117
50480: PUSH
50481: LD_INT 118
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: ST_TO_ADDR
50508: GO 50511
50510: POP
// end else
50511: GO 50742
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
50513: LD_ADDR_VAR 0 2
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: LD_INT 2
50523: PUSH
50524: LD_INT 3
50526: PUSH
50527: LD_INT 4
50529: PUSH
50530: LD_INT 5
50532: PUSH
50533: LD_INT 6
50535: PUSH
50536: LD_INT 7
50538: PUSH
50539: LD_INT 8
50541: PUSH
50542: LD_INT 9
50544: PUSH
50545: LD_INT 10
50547: PUSH
50548: LD_INT 11
50550: PUSH
50551: LD_INT 12
50553: PUSH
50554: LD_INT 13
50556: PUSH
50557: LD_INT 14
50559: PUSH
50560: LD_INT 15
50562: PUSH
50563: LD_INT 16
50565: PUSH
50566: LD_INT 17
50568: PUSH
50569: LD_INT 18
50571: PUSH
50572: LD_INT 19
50574: PUSH
50575: LD_INT 20
50577: PUSH
50578: LD_INT 21
50580: PUSH
50581: LD_INT 22
50583: PUSH
50584: LD_INT 23
50586: PUSH
50587: LD_INT 24
50589: PUSH
50590: LD_INT 25
50592: PUSH
50593: LD_INT 26
50595: PUSH
50596: LD_INT 27
50598: PUSH
50599: LD_INT 28
50601: PUSH
50602: LD_INT 29
50604: PUSH
50605: LD_INT 30
50607: PUSH
50608: LD_INT 31
50610: PUSH
50611: LD_INT 32
50613: PUSH
50614: LD_INT 33
50616: PUSH
50617: LD_INT 34
50619: PUSH
50620: LD_INT 35
50622: PUSH
50623: LD_INT 36
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 101
50666: PUSH
50667: LD_INT 102
50669: PUSH
50670: LD_INT 103
50672: PUSH
50673: LD_INT 104
50675: PUSH
50676: LD_INT 105
50678: PUSH
50679: LD_INT 106
50681: PUSH
50682: LD_INT 107
50684: PUSH
50685: LD_INT 108
50687: PUSH
50688: LD_INT 109
50690: PUSH
50691: LD_INT 110
50693: PUSH
50694: LD_INT 111
50696: PUSH
50697: LD_INT 112
50699: PUSH
50700: LD_INT 113
50702: PUSH
50703: LD_INT 114
50705: PUSH
50706: LD_INT 115
50708: PUSH
50709: LD_INT 116
50711: PUSH
50712: LD_INT 117
50714: PUSH
50715: LD_INT 118
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: ST_TO_ADDR
// if result then
50742: LD_VAR 0 2
50746: IFFALSE 51532
// begin normal :=  ;
50748: LD_ADDR_VAR 0 5
50752: PUSH
50753: LD_STRING 
50755: ST_TO_ADDR
// hardcore :=  ;
50756: LD_ADDR_VAR 0 6
50760: PUSH
50761: LD_STRING 
50763: ST_TO_ADDR
// active :=  ;
50764: LD_ADDR_VAR 0 7
50768: PUSH
50769: LD_STRING 
50771: ST_TO_ADDR
// for i = 1 to normalCounter do
50772: LD_ADDR_VAR 0 8
50776: PUSH
50777: DOUBLE
50778: LD_INT 1
50780: DEC
50781: ST_TO_ADDR
50782: LD_EXP 16
50786: PUSH
50787: FOR_TO
50788: IFFALSE 50889
// begin tmp := 0 ;
50790: LD_ADDR_VAR 0 3
50794: PUSH
50795: LD_STRING 0
50797: ST_TO_ADDR
// if result [ 1 ] then
50798: LD_VAR 0 2
50802: PUSH
50803: LD_INT 1
50805: ARRAY
50806: IFFALSE 50871
// if result [ 1 ] [ 1 ] = i then
50808: LD_VAR 0 2
50812: PUSH
50813: LD_INT 1
50815: ARRAY
50816: PUSH
50817: LD_INT 1
50819: ARRAY
50820: PUSH
50821: LD_VAR 0 8
50825: EQUAL
50826: IFFALSE 50871
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
50828: LD_ADDR_VAR 0 2
50832: PUSH
50833: LD_VAR 0 2
50837: PPUSH
50838: LD_INT 1
50840: PPUSH
50841: LD_VAR 0 2
50845: PUSH
50846: LD_INT 1
50848: ARRAY
50849: PPUSH
50850: LD_INT 1
50852: PPUSH
50853: CALL_OW 3
50857: PPUSH
50858: CALL_OW 1
50862: ST_TO_ADDR
// tmp := 1 ;
50863: LD_ADDR_VAR 0 3
50867: PUSH
50868: LD_STRING 1
50870: ST_TO_ADDR
// end ; normal := normal & tmp ;
50871: LD_ADDR_VAR 0 5
50875: PUSH
50876: LD_VAR 0 5
50880: PUSH
50881: LD_VAR 0 3
50885: STR
50886: ST_TO_ADDR
// end ;
50887: GO 50787
50889: POP
50890: POP
// for i = 1 to hardcoreCounter do
50891: LD_ADDR_VAR 0 8
50895: PUSH
50896: DOUBLE
50897: LD_INT 1
50899: DEC
50900: ST_TO_ADDR
50901: LD_EXP 17
50905: PUSH
50906: FOR_TO
50907: IFFALSE 51012
// begin tmp := 0 ;
50909: LD_ADDR_VAR 0 3
50913: PUSH
50914: LD_STRING 0
50916: ST_TO_ADDR
// if result [ 2 ] then
50917: LD_VAR 0 2
50921: PUSH
50922: LD_INT 2
50924: ARRAY
50925: IFFALSE 50994
// if result [ 2 ] [ 1 ] = 100 + i then
50927: LD_VAR 0 2
50931: PUSH
50932: LD_INT 2
50934: ARRAY
50935: PUSH
50936: LD_INT 1
50938: ARRAY
50939: PUSH
50940: LD_INT 100
50942: PUSH
50943: LD_VAR 0 8
50947: PLUS
50948: EQUAL
50949: IFFALSE 50994
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
50951: LD_ADDR_VAR 0 2
50955: PUSH
50956: LD_VAR 0 2
50960: PPUSH
50961: LD_INT 2
50963: PPUSH
50964: LD_VAR 0 2
50968: PUSH
50969: LD_INT 2
50971: ARRAY
50972: PPUSH
50973: LD_INT 1
50975: PPUSH
50976: CALL_OW 3
50980: PPUSH
50981: CALL_OW 1
50985: ST_TO_ADDR
// tmp := 1 ;
50986: LD_ADDR_VAR 0 3
50990: PUSH
50991: LD_STRING 1
50993: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
50994: LD_ADDR_VAR 0 6
50998: PUSH
50999: LD_VAR 0 6
51003: PUSH
51004: LD_VAR 0 3
51008: STR
51009: ST_TO_ADDR
// end ;
51010: GO 50906
51012: POP
51013: POP
// if isGameLoad then
51014: LD_VAR 0 1
51018: IFFALSE 51493
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
51020: LD_ADDR_VAR 0 4
51024: PUSH
51025: LD_EXP 20
51029: PUSH
51030: LD_EXP 19
51034: PUSH
51035: LD_EXP 21
51039: PUSH
51040: LD_EXP 18
51044: PUSH
51045: LD_EXP 22
51049: PUSH
51050: LD_EXP 23
51054: PUSH
51055: LD_EXP 24
51059: PUSH
51060: LD_EXP 25
51064: PUSH
51065: LD_EXP 26
51069: PUSH
51070: LD_EXP 27
51074: PUSH
51075: LD_EXP 28
51079: PUSH
51080: LD_EXP 29
51084: PUSH
51085: LD_EXP 30
51089: PUSH
51090: LD_EXP 31
51094: PUSH
51095: LD_EXP 39
51099: PUSH
51100: LD_EXP 40
51104: PUSH
51105: LD_EXP 41
51109: PUSH
51110: LD_EXP 42
51114: PUSH
51115: LD_EXP 44
51119: PUSH
51120: LD_EXP 45
51124: PUSH
51125: LD_EXP 46
51129: PUSH
51130: LD_EXP 49
51134: PUSH
51135: LD_EXP 51
51139: PUSH
51140: LD_EXP 52
51144: PUSH
51145: LD_EXP 53
51149: PUSH
51150: LD_EXP 55
51154: PUSH
51155: LD_EXP 56
51159: PUSH
51160: LD_EXP 59
51164: PUSH
51165: LD_EXP 60
51169: PUSH
51170: LD_EXP 61
51174: PUSH
51175: LD_EXP 62
51179: PUSH
51180: LD_EXP 63
51184: PUSH
51185: LD_EXP 64
51189: PUSH
51190: LD_EXP 65
51194: PUSH
51195: LD_EXP 66
51199: PUSH
51200: LD_EXP 67
51204: PUSH
51205: LD_EXP 32
51209: PUSH
51210: LD_EXP 33
51214: PUSH
51215: LD_EXP 36
51219: PUSH
51220: LD_EXP 37
51224: PUSH
51225: LD_EXP 38
51229: PUSH
51230: LD_EXP 34
51234: PUSH
51235: LD_EXP 35
51239: PUSH
51240: LD_EXP 43
51244: PUSH
51245: LD_EXP 47
51249: PUSH
51250: LD_EXP 48
51254: PUSH
51255: LD_EXP 50
51259: PUSH
51260: LD_EXP 54
51264: PUSH
51265: LD_EXP 57
51269: PUSH
51270: LD_EXP 58
51274: PUSH
51275: LD_EXP 68
51279: PUSH
51280: LD_EXP 69
51284: PUSH
51285: LD_EXP 70
51289: PUSH
51290: LD_EXP 71
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: ST_TO_ADDR
// tmp :=  ;
51351: LD_ADDR_VAR 0 3
51355: PUSH
51356: LD_STRING 
51358: ST_TO_ADDR
// for i = 1 to normalCounter do
51359: LD_ADDR_VAR 0 8
51363: PUSH
51364: DOUBLE
51365: LD_INT 1
51367: DEC
51368: ST_TO_ADDR
51369: LD_EXP 16
51373: PUSH
51374: FOR_TO
51375: IFFALSE 51411
// begin if flags [ i ] then
51377: LD_VAR 0 4
51381: PUSH
51382: LD_VAR 0 8
51386: ARRAY
51387: IFFALSE 51409
// tmp := tmp & i & ; ;
51389: LD_ADDR_VAR 0 3
51393: PUSH
51394: LD_VAR 0 3
51398: PUSH
51399: LD_VAR 0 8
51403: STR
51404: PUSH
51405: LD_STRING ;
51407: STR
51408: ST_TO_ADDR
// end ;
51409: GO 51374
51411: POP
51412: POP
// for i = 1 to hardcoreCounter do
51413: LD_ADDR_VAR 0 8
51417: PUSH
51418: DOUBLE
51419: LD_INT 1
51421: DEC
51422: ST_TO_ADDR
51423: LD_EXP 17
51427: PUSH
51428: FOR_TO
51429: IFFALSE 51475
// begin if flags [ normalCounter + i ] then
51431: LD_VAR 0 4
51435: PUSH
51436: LD_EXP 16
51440: PUSH
51441: LD_VAR 0 8
51445: PLUS
51446: ARRAY
51447: IFFALSE 51473
// tmp := tmp & ( 100 + i ) & ; ;
51449: LD_ADDR_VAR 0 3
51453: PUSH
51454: LD_VAR 0 3
51458: PUSH
51459: LD_INT 100
51461: PUSH
51462: LD_VAR 0 8
51466: PLUS
51467: STR
51468: PUSH
51469: LD_STRING ;
51471: STR
51472: ST_TO_ADDR
// end ;
51473: GO 51428
51475: POP
51476: POP
// if tmp then
51477: LD_VAR 0 3
51481: IFFALSE 51493
// active := tmp ;
51483: LD_ADDR_VAR 0 7
51487: PUSH
51488: LD_VAR 0 3
51492: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
51493: LD_STRING getStreamItemsFromMission("
51495: PUSH
51496: LD_VAR 0 5
51500: STR
51501: PUSH
51502: LD_STRING ","
51504: STR
51505: PUSH
51506: LD_VAR 0 6
51510: STR
51511: PUSH
51512: LD_STRING ","
51514: STR
51515: PUSH
51516: LD_VAR 0 7
51520: STR
51521: PUSH
51522: LD_STRING ")
51524: STR
51525: PPUSH
51526: CALL_OW 559
// end else
51530: GO 51539
// ToLua ( getStreamItemsFromMission("","","") ) ;
51532: LD_STRING getStreamItemsFromMission("","","")
51534: PPUSH
51535: CALL_OW 559
// end ;
51539: LD_VAR 0 2
51543: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
51544: LD_EXP 15
51548: PUSH
51549: LD_EXP 20
51553: AND
51554: IFFALSE 51678
51556: GO 51558
51558: DISABLE
51559: LD_INT 0
51561: PPUSH
51562: PPUSH
// begin enable ;
51563: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
51564: LD_ADDR_VAR 0 2
51568: PUSH
51569: LD_INT 22
51571: PUSH
51572: LD_OWVAR 2
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 2
51583: PUSH
51584: LD_INT 34
51586: PUSH
51587: LD_INT 7
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 34
51596: PUSH
51597: LD_INT 45
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 34
51606: PUSH
51607: LD_INT 28
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 34
51616: PUSH
51617: LD_INT 47
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PPUSH
51635: CALL_OW 69
51639: ST_TO_ADDR
// if not tmp then
51640: LD_VAR 0 2
51644: NOT
51645: IFFALSE 51649
// exit ;
51647: GO 51678
// for i in tmp do
51649: LD_ADDR_VAR 0 1
51653: PUSH
51654: LD_VAR 0 2
51658: PUSH
51659: FOR_IN
51660: IFFALSE 51676
// begin SetLives ( i , 0 ) ;
51662: LD_VAR 0 1
51666: PPUSH
51667: LD_INT 0
51669: PPUSH
51670: CALL_OW 234
// end ;
51674: GO 51659
51676: POP
51677: POP
// end ;
51678: PPOPN 2
51680: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
51681: LD_EXP 15
51685: PUSH
51686: LD_EXP 21
51690: AND
51691: IFFALSE 51775
51693: GO 51695
51695: DISABLE
51696: LD_INT 0
51698: PPUSH
51699: PPUSH
// begin enable ;
51700: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
51701: LD_ADDR_VAR 0 2
51705: PUSH
51706: LD_INT 22
51708: PUSH
51709: LD_OWVAR 2
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 32
51720: PUSH
51721: LD_INT 3
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PPUSH
51732: CALL_OW 69
51736: ST_TO_ADDR
// if not tmp then
51737: LD_VAR 0 2
51741: NOT
51742: IFFALSE 51746
// exit ;
51744: GO 51775
// for i in tmp do
51746: LD_ADDR_VAR 0 1
51750: PUSH
51751: LD_VAR 0 2
51755: PUSH
51756: FOR_IN
51757: IFFALSE 51773
// begin SetLives ( i , 0 ) ;
51759: LD_VAR 0 1
51763: PPUSH
51764: LD_INT 0
51766: PPUSH
51767: CALL_OW 234
// end ;
51771: GO 51756
51773: POP
51774: POP
// end ;
51775: PPOPN 2
51777: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
51778: LD_EXP 15
51782: PUSH
51783: LD_EXP 18
51787: AND
51788: IFFALSE 51881
51790: GO 51792
51792: DISABLE
51793: LD_INT 0
51795: PPUSH
// begin enable ;
51796: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
51797: LD_ADDR_VAR 0 1
51801: PUSH
51802: LD_INT 22
51804: PUSH
51805: LD_OWVAR 2
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: LD_INT 25
51819: PUSH
51820: LD_INT 5
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 25
51829: PUSH
51830: LD_INT 9
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 25
51839: PUSH
51840: LD_INT 8
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PPUSH
51857: CALL_OW 69
51861: PUSH
51862: FOR_IN
51863: IFFALSE 51879
// begin SetClass ( i , 1 ) ;
51865: LD_VAR 0 1
51869: PPUSH
51870: LD_INT 1
51872: PPUSH
51873: CALL_OW 336
// end ;
51877: GO 51862
51879: POP
51880: POP
// end ;
51881: PPOPN 1
51883: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
51884: LD_EXP 15
51888: PUSH
51889: LD_EXP 19
51893: AND
51894: PUSH
51895: LD_OWVAR 65
51899: PUSH
51900: LD_INT 7
51902: LESS
51903: AND
51904: IFFALSE 51918
51906: GO 51908
51908: DISABLE
// begin enable ;
51909: ENABLE
// game_speed := 7 ;
51910: LD_ADDR_OWVAR 65
51914: PUSH
51915: LD_INT 7
51917: ST_TO_ADDR
// end ;
51918: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
51919: LD_EXP 15
51923: PUSH
51924: LD_EXP 22
51928: AND
51929: IFFALSE 52131
51931: GO 51933
51933: DISABLE
51934: LD_INT 0
51936: PPUSH
51937: PPUSH
51938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
51939: LD_ADDR_VAR 0 3
51943: PUSH
51944: LD_INT 81
51946: PUSH
51947: LD_OWVAR 2
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 21
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PPUSH
51970: CALL_OW 69
51974: ST_TO_ADDR
// if not tmp then
51975: LD_VAR 0 3
51979: NOT
51980: IFFALSE 51984
// exit ;
51982: GO 52131
// if tmp > 5 then
51984: LD_VAR 0 3
51988: PUSH
51989: LD_INT 5
51991: GREATER
51992: IFFALSE 52004
// k := 5 else
51994: LD_ADDR_VAR 0 2
51998: PUSH
51999: LD_INT 5
52001: ST_TO_ADDR
52002: GO 52014
// k := tmp ;
52004: LD_ADDR_VAR 0 2
52008: PUSH
52009: LD_VAR 0 3
52013: ST_TO_ADDR
// for i := 1 to k do
52014: LD_ADDR_VAR 0 1
52018: PUSH
52019: DOUBLE
52020: LD_INT 1
52022: DEC
52023: ST_TO_ADDR
52024: LD_VAR 0 2
52028: PUSH
52029: FOR_TO
52030: IFFALSE 52129
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
52032: LD_VAR 0 3
52036: PUSH
52037: LD_VAR 0 1
52041: ARRAY
52042: PPUSH
52043: LD_VAR 0 1
52047: PUSH
52048: LD_INT 4
52050: MOD
52051: PUSH
52052: LD_INT 1
52054: PLUS
52055: PPUSH
52056: CALL_OW 259
52060: PUSH
52061: LD_INT 10
52063: LESS
52064: IFFALSE 52127
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
52066: LD_VAR 0 3
52070: PUSH
52071: LD_VAR 0 1
52075: ARRAY
52076: PPUSH
52077: LD_VAR 0 1
52081: PUSH
52082: LD_INT 4
52084: MOD
52085: PUSH
52086: LD_INT 1
52088: PLUS
52089: PPUSH
52090: LD_VAR 0 3
52094: PUSH
52095: LD_VAR 0 1
52099: ARRAY
52100: PPUSH
52101: LD_VAR 0 1
52105: PUSH
52106: LD_INT 4
52108: MOD
52109: PUSH
52110: LD_INT 1
52112: PLUS
52113: PPUSH
52114: CALL_OW 259
52118: PUSH
52119: LD_INT 1
52121: PLUS
52122: PPUSH
52123: CALL_OW 237
52127: GO 52029
52129: POP
52130: POP
// end ;
52131: PPOPN 3
52133: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
52134: LD_EXP 15
52138: PUSH
52139: LD_EXP 23
52143: AND
52144: IFFALSE 52164
52146: GO 52148
52148: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
52149: LD_INT 4
52151: PPUSH
52152: LD_OWVAR 2
52156: PPUSH
52157: LD_INT 0
52159: PPUSH
52160: CALL_OW 324
52164: END
// every 0 0$1 trigger StreamModeActive and sShovel do
52165: LD_EXP 15
52169: PUSH
52170: LD_EXP 52
52174: AND
52175: IFFALSE 52195
52177: GO 52179
52179: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
52180: LD_INT 19
52182: PPUSH
52183: LD_OWVAR 2
52187: PPUSH
52188: LD_INT 0
52190: PPUSH
52191: CALL_OW 324
52195: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
52196: LD_EXP 15
52200: PUSH
52201: LD_EXP 24
52205: AND
52206: IFFALSE 52308
52208: GO 52210
52210: DISABLE
52211: LD_INT 0
52213: PPUSH
52214: PPUSH
// begin enable ;
52215: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
52216: LD_ADDR_VAR 0 2
52220: PUSH
52221: LD_INT 22
52223: PUSH
52224: LD_OWVAR 2
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 2
52235: PUSH
52236: LD_INT 34
52238: PUSH
52239: LD_INT 11
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 34
52248: PUSH
52249: LD_INT 30
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: LIST
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PPUSH
52265: CALL_OW 69
52269: ST_TO_ADDR
// if not tmp then
52270: LD_VAR 0 2
52274: NOT
52275: IFFALSE 52279
// exit ;
52277: GO 52308
// for i in tmp do
52279: LD_ADDR_VAR 0 1
52283: PUSH
52284: LD_VAR 0 2
52288: PUSH
52289: FOR_IN
52290: IFFALSE 52306
// begin SetLives ( i , 0 ) ;
52292: LD_VAR 0 1
52296: PPUSH
52297: LD_INT 0
52299: PPUSH
52300: CALL_OW 234
// end ;
52304: GO 52289
52306: POP
52307: POP
// end ;
52308: PPOPN 2
52310: END
// every 0 0$1 trigger StreamModeActive and sBunker do
52311: LD_EXP 15
52315: PUSH
52316: LD_EXP 25
52320: AND
52321: IFFALSE 52341
52323: GO 52325
52325: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
52326: LD_INT 32
52328: PPUSH
52329: LD_OWVAR 2
52333: PPUSH
52334: LD_INT 0
52336: PPUSH
52337: CALL_OW 324
52341: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
52342: LD_EXP 15
52346: PUSH
52347: LD_EXP 26
52351: AND
52352: IFFALSE 52533
52354: GO 52356
52356: DISABLE
52357: LD_INT 0
52359: PPUSH
52360: PPUSH
52361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
52362: LD_ADDR_VAR 0 2
52366: PUSH
52367: LD_INT 22
52369: PUSH
52370: LD_OWVAR 2
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 33
52381: PUSH
52382: LD_INT 3
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PPUSH
52393: CALL_OW 69
52397: ST_TO_ADDR
// if not tmp then
52398: LD_VAR 0 2
52402: NOT
52403: IFFALSE 52407
// exit ;
52405: GO 52533
// side := 0 ;
52407: LD_ADDR_VAR 0 3
52411: PUSH
52412: LD_INT 0
52414: ST_TO_ADDR
// for i := 1 to 8 do
52415: LD_ADDR_VAR 0 1
52419: PUSH
52420: DOUBLE
52421: LD_INT 1
52423: DEC
52424: ST_TO_ADDR
52425: LD_INT 8
52427: PUSH
52428: FOR_TO
52429: IFFALSE 52477
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
52431: LD_OWVAR 2
52435: PUSH
52436: LD_VAR 0 1
52440: NONEQUAL
52441: PUSH
52442: LD_OWVAR 2
52446: PPUSH
52447: LD_VAR 0 1
52451: PPUSH
52452: CALL_OW 81
52456: PUSH
52457: LD_INT 2
52459: EQUAL
52460: AND
52461: IFFALSE 52475
// begin side := i ;
52463: LD_ADDR_VAR 0 3
52467: PUSH
52468: LD_VAR 0 1
52472: ST_TO_ADDR
// break ;
52473: GO 52477
// end ;
52475: GO 52428
52477: POP
52478: POP
// if not side then
52479: LD_VAR 0 3
52483: NOT
52484: IFFALSE 52488
// exit ;
52486: GO 52533
// for i := 1 to tmp do
52488: LD_ADDR_VAR 0 1
52492: PUSH
52493: DOUBLE
52494: LD_INT 1
52496: DEC
52497: ST_TO_ADDR
52498: LD_VAR 0 2
52502: PUSH
52503: FOR_TO
52504: IFFALSE 52531
// if Prob ( 60 ) then
52506: LD_INT 60
52508: PPUSH
52509: CALL_OW 13
52513: IFFALSE 52529
// SetSide ( i , side ) ;
52515: LD_VAR 0 1
52519: PPUSH
52520: LD_VAR 0 3
52524: PPUSH
52525: CALL_OW 235
52529: GO 52503
52531: POP
52532: POP
// end ;
52533: PPOPN 3
52535: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
52536: LD_EXP 15
52540: PUSH
52541: LD_EXP 28
52545: AND
52546: IFFALSE 52665
52548: GO 52550
52550: DISABLE
52551: LD_INT 0
52553: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
52554: LD_ADDR_VAR 0 1
52558: PUSH
52559: LD_INT 22
52561: PUSH
52562: LD_OWVAR 2
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 21
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 3
52583: PUSH
52584: LD_INT 23
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: LIST
52602: PPUSH
52603: CALL_OW 69
52607: PUSH
52608: FOR_IN
52609: IFFALSE 52663
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
52611: LD_VAR 0 1
52615: PPUSH
52616: CALL_OW 257
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: LD_INT 2
52626: PUSH
52627: LD_INT 3
52629: PUSH
52630: LD_INT 4
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: IN
52639: IFFALSE 52661
// SetClass ( un , rand ( 1 , 4 ) ) ;
52641: LD_VAR 0 1
52645: PPUSH
52646: LD_INT 1
52648: PPUSH
52649: LD_INT 4
52651: PPUSH
52652: CALL_OW 12
52656: PPUSH
52657: CALL_OW 336
52661: GO 52608
52663: POP
52664: POP
// end ;
52665: PPOPN 1
52667: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
52668: LD_EXP 15
52672: PUSH
52673: LD_EXP 27
52677: AND
52678: IFFALSE 52757
52680: GO 52682
52682: DISABLE
52683: LD_INT 0
52685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52686: LD_ADDR_VAR 0 1
52690: PUSH
52691: LD_INT 22
52693: PUSH
52694: LD_OWVAR 2
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 21
52705: PUSH
52706: LD_INT 3
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PPUSH
52717: CALL_OW 69
52721: ST_TO_ADDR
// if not tmp then
52722: LD_VAR 0 1
52726: NOT
52727: IFFALSE 52731
// exit ;
52729: GO 52757
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
52731: LD_VAR 0 1
52735: PUSH
52736: LD_INT 1
52738: PPUSH
52739: LD_VAR 0 1
52743: PPUSH
52744: CALL_OW 12
52748: ARRAY
52749: PPUSH
52750: LD_INT 100
52752: PPUSH
52753: CALL_OW 234
// end ;
52757: PPOPN 1
52759: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
52760: LD_EXP 15
52764: PUSH
52765: LD_EXP 29
52769: AND
52770: IFFALSE 52868
52772: GO 52774
52774: DISABLE
52775: LD_INT 0
52777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52778: LD_ADDR_VAR 0 1
52782: PUSH
52783: LD_INT 22
52785: PUSH
52786: LD_OWVAR 2
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 21
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PPUSH
52809: CALL_OW 69
52813: ST_TO_ADDR
// if not tmp then
52814: LD_VAR 0 1
52818: NOT
52819: IFFALSE 52823
// exit ;
52821: GO 52868
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
52823: LD_VAR 0 1
52827: PUSH
52828: LD_INT 1
52830: PPUSH
52831: LD_VAR 0 1
52835: PPUSH
52836: CALL_OW 12
52840: ARRAY
52841: PPUSH
52842: LD_INT 1
52844: PPUSH
52845: LD_INT 4
52847: PPUSH
52848: CALL_OW 12
52852: PPUSH
52853: LD_INT 3000
52855: PPUSH
52856: LD_INT 9000
52858: PPUSH
52859: CALL_OW 12
52863: PPUSH
52864: CALL_OW 492
// end ;
52868: PPOPN 1
52870: END
// every 0 0$1 trigger StreamModeActive and sDepot do
52871: LD_EXP 15
52875: PUSH
52876: LD_EXP 30
52880: AND
52881: IFFALSE 52901
52883: GO 52885
52885: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
52886: LD_INT 1
52888: PPUSH
52889: LD_OWVAR 2
52893: PPUSH
52894: LD_INT 0
52896: PPUSH
52897: CALL_OW 324
52901: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
52902: LD_EXP 15
52906: PUSH
52907: LD_EXP 31
52911: AND
52912: IFFALSE 52995
52914: GO 52916
52916: DISABLE
52917: LD_INT 0
52919: PPUSH
52920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52921: LD_ADDR_VAR 0 2
52925: PUSH
52926: LD_INT 22
52928: PUSH
52929: LD_OWVAR 2
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 21
52940: PUSH
52941: LD_INT 3
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PPUSH
52952: CALL_OW 69
52956: ST_TO_ADDR
// if not tmp then
52957: LD_VAR 0 2
52961: NOT
52962: IFFALSE 52966
// exit ;
52964: GO 52995
// for i in tmp do
52966: LD_ADDR_VAR 0 1
52970: PUSH
52971: LD_VAR 0 2
52975: PUSH
52976: FOR_IN
52977: IFFALSE 52993
// SetBLevel ( i , 10 ) ;
52979: LD_VAR 0 1
52983: PPUSH
52984: LD_INT 10
52986: PPUSH
52987: CALL_OW 241
52991: GO 52976
52993: POP
52994: POP
// end ;
52995: PPOPN 2
52997: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
52998: LD_EXP 15
53002: PUSH
53003: LD_EXP 32
53007: AND
53008: IFFALSE 53119
53010: GO 53012
53012: DISABLE
53013: LD_INT 0
53015: PPUSH
53016: PPUSH
53017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53018: LD_ADDR_VAR 0 3
53022: PUSH
53023: LD_INT 22
53025: PUSH
53026: LD_OWVAR 2
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 25
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PPUSH
53049: CALL_OW 69
53053: ST_TO_ADDR
// if not tmp then
53054: LD_VAR 0 3
53058: NOT
53059: IFFALSE 53063
// exit ;
53061: GO 53119
// un := tmp [ rand ( 1 , tmp ) ] ;
53063: LD_ADDR_VAR 0 2
53067: PUSH
53068: LD_VAR 0 3
53072: PUSH
53073: LD_INT 1
53075: PPUSH
53076: LD_VAR 0 3
53080: PPUSH
53081: CALL_OW 12
53085: ARRAY
53086: ST_TO_ADDR
// if Crawls ( un ) then
53087: LD_VAR 0 2
53091: PPUSH
53092: CALL_OW 318
53096: IFFALSE 53107
// ComWalk ( un ) ;
53098: LD_VAR 0 2
53102: PPUSH
53103: CALL_OW 138
// SetClass ( un , class_sniper ) ;
53107: LD_VAR 0 2
53111: PPUSH
53112: LD_INT 5
53114: PPUSH
53115: CALL_OW 336
// end ;
53119: PPOPN 3
53121: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
53122: LD_EXP 15
53126: PUSH
53127: LD_EXP 33
53131: AND
53132: PUSH
53133: LD_OWVAR 67
53137: PUSH
53138: LD_INT 4
53140: LESS
53141: AND
53142: IFFALSE 53161
53144: GO 53146
53146: DISABLE
// begin Difficulty := Difficulty + 1 ;
53147: LD_ADDR_OWVAR 67
53151: PUSH
53152: LD_OWVAR 67
53156: PUSH
53157: LD_INT 1
53159: PLUS
53160: ST_TO_ADDR
// end ;
53161: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
53162: LD_EXP 15
53166: PUSH
53167: LD_EXP 34
53171: AND
53172: IFFALSE 53275
53174: GO 53176
53176: DISABLE
53177: LD_INT 0
53179: PPUSH
// begin for i := 1 to 5 do
53180: LD_ADDR_VAR 0 1
53184: PUSH
53185: DOUBLE
53186: LD_INT 1
53188: DEC
53189: ST_TO_ADDR
53190: LD_INT 5
53192: PUSH
53193: FOR_TO
53194: IFFALSE 53273
// begin uc_nation := nation_nature ;
53196: LD_ADDR_OWVAR 21
53200: PUSH
53201: LD_INT 0
53203: ST_TO_ADDR
// uc_side := 0 ;
53204: LD_ADDR_OWVAR 20
53208: PUSH
53209: LD_INT 0
53211: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53212: LD_ADDR_OWVAR 29
53216: PUSH
53217: LD_INT 12
53219: PUSH
53220: LD_INT 12
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: ST_TO_ADDR
// hc_agressivity := 20 ;
53227: LD_ADDR_OWVAR 35
53231: PUSH
53232: LD_INT 20
53234: ST_TO_ADDR
// hc_class := class_tiger ;
53235: LD_ADDR_OWVAR 28
53239: PUSH
53240: LD_INT 14
53242: ST_TO_ADDR
// hc_gallery :=  ;
53243: LD_ADDR_OWVAR 33
53247: PUSH
53248: LD_STRING 
53250: ST_TO_ADDR
// hc_name :=  ;
53251: LD_ADDR_OWVAR 26
53255: PUSH
53256: LD_STRING 
53258: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
53259: CALL_OW 44
53263: PPUSH
53264: LD_INT 0
53266: PPUSH
53267: CALL_OW 51
// end ;
53271: GO 53193
53273: POP
53274: POP
// end ;
53275: PPOPN 1
53277: END
// every 0 0$1 trigger StreamModeActive and sBomb do
53278: LD_EXP 15
53282: PUSH
53283: LD_EXP 35
53287: AND
53288: IFFALSE 53297
53290: GO 53292
53292: DISABLE
// StreamSibBomb ;
53293: CALL 53298 0 0
53297: END
// export function StreamSibBomb ; var i , x , y ; begin
53298: LD_INT 0
53300: PPUSH
53301: PPUSH
53302: PPUSH
53303: PPUSH
// result := false ;
53304: LD_ADDR_VAR 0 1
53308: PUSH
53309: LD_INT 0
53311: ST_TO_ADDR
// for i := 1 to 16 do
53312: LD_ADDR_VAR 0 2
53316: PUSH
53317: DOUBLE
53318: LD_INT 1
53320: DEC
53321: ST_TO_ADDR
53322: LD_INT 16
53324: PUSH
53325: FOR_TO
53326: IFFALSE 53525
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53328: LD_ADDR_VAR 0 3
53332: PUSH
53333: LD_INT 10
53335: PUSH
53336: LD_INT 20
53338: PUSH
53339: LD_INT 30
53341: PUSH
53342: LD_INT 40
53344: PUSH
53345: LD_INT 50
53347: PUSH
53348: LD_INT 60
53350: PUSH
53351: LD_INT 70
53353: PUSH
53354: LD_INT 80
53356: PUSH
53357: LD_INT 90
53359: PUSH
53360: LD_INT 100
53362: PUSH
53363: LD_INT 110
53365: PUSH
53366: LD_INT 120
53368: PUSH
53369: LD_INT 130
53371: PUSH
53372: LD_INT 140
53374: PUSH
53375: LD_INT 150
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: PPUSH
53398: LD_INT 15
53400: PPUSH
53401: CALL_OW 12
53405: ARRAY
53406: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53407: LD_ADDR_VAR 0 4
53411: PUSH
53412: LD_INT 10
53414: PUSH
53415: LD_INT 20
53417: PUSH
53418: LD_INT 30
53420: PUSH
53421: LD_INT 40
53423: PUSH
53424: LD_INT 50
53426: PUSH
53427: LD_INT 60
53429: PUSH
53430: LD_INT 70
53432: PUSH
53433: LD_INT 80
53435: PUSH
53436: LD_INT 90
53438: PUSH
53439: LD_INT 100
53441: PUSH
53442: LD_INT 110
53444: PUSH
53445: LD_INT 120
53447: PUSH
53448: LD_INT 130
53450: PUSH
53451: LD_INT 140
53453: PUSH
53454: LD_INT 150
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: PPUSH
53477: LD_INT 15
53479: PPUSH
53480: CALL_OW 12
53484: ARRAY
53485: ST_TO_ADDR
// if ValidHex ( x , y ) then
53486: LD_VAR 0 3
53490: PPUSH
53491: LD_VAR 0 4
53495: PPUSH
53496: CALL_OW 488
53500: IFFALSE 53523
// begin result := [ x , y ] ;
53502: LD_ADDR_VAR 0 1
53506: PUSH
53507: LD_VAR 0 3
53511: PUSH
53512: LD_VAR 0 4
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: ST_TO_ADDR
// break ;
53521: GO 53525
// end ; end ;
53523: GO 53325
53525: POP
53526: POP
// if result then
53527: LD_VAR 0 1
53531: IFFALSE 53591
// begin ToLua ( playSibBomb() ) ;
53533: LD_STRING playSibBomb()
53535: PPUSH
53536: CALL_OW 559
// wait ( 0 0$14 ) ;
53540: LD_INT 490
53542: PPUSH
53543: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
53547: LD_VAR 0 1
53551: PUSH
53552: LD_INT 1
53554: ARRAY
53555: PPUSH
53556: LD_VAR 0 1
53560: PUSH
53561: LD_INT 2
53563: ARRAY
53564: PPUSH
53565: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
53569: LD_VAR 0 1
53573: PUSH
53574: LD_INT 1
53576: ARRAY
53577: PPUSH
53578: LD_VAR 0 1
53582: PUSH
53583: LD_INT 2
53585: ARRAY
53586: PPUSH
53587: CALL_OW 429
// end ; end ;
53591: LD_VAR 0 1
53595: RET
// every 0 0$1 trigger StreamModeActive and sReset do
53596: LD_EXP 15
53600: PUSH
53601: LD_EXP 37
53605: AND
53606: IFFALSE 53618
53608: GO 53610
53610: DISABLE
// YouLost (  ) ;
53611: LD_STRING 
53613: PPUSH
53614: CALL_OW 104
53618: END
// every 0 0$1 trigger StreamModeActive and sFog do
53619: LD_EXP 15
53623: PUSH
53624: LD_EXP 36
53628: AND
53629: IFFALSE 53643
53631: GO 53633
53633: DISABLE
// FogOff ( your_side ) ;
53634: LD_OWVAR 2
53638: PPUSH
53639: CALL_OW 344
53643: END
// every 0 0$1 trigger StreamModeActive and sSun do
53644: LD_EXP 15
53648: PUSH
53649: LD_EXP 38
53653: AND
53654: IFFALSE 53682
53656: GO 53658
53658: DISABLE
// begin solar_recharge_percent := 0 ;
53659: LD_ADDR_OWVAR 79
53663: PUSH
53664: LD_INT 0
53666: ST_TO_ADDR
// wait ( 5 5$00 ) ;
53667: LD_INT 10500
53669: PPUSH
53670: CALL_OW 67
// solar_recharge_percent := 100 ;
53674: LD_ADDR_OWVAR 79
53678: PUSH
53679: LD_INT 100
53681: ST_TO_ADDR
// end ;
53682: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
53683: LD_EXP 15
53687: PUSH
53688: LD_EXP 39
53692: AND
53693: IFFALSE 53932
53695: GO 53697
53697: DISABLE
53698: LD_INT 0
53700: PPUSH
53701: PPUSH
53702: PPUSH
// begin tmp := [ ] ;
53703: LD_ADDR_VAR 0 3
53707: PUSH
53708: EMPTY
53709: ST_TO_ADDR
// for i := 1 to 6 do
53710: LD_ADDR_VAR 0 1
53714: PUSH
53715: DOUBLE
53716: LD_INT 1
53718: DEC
53719: ST_TO_ADDR
53720: LD_INT 6
53722: PUSH
53723: FOR_TO
53724: IFFALSE 53829
// begin uc_nation := nation_nature ;
53726: LD_ADDR_OWVAR 21
53730: PUSH
53731: LD_INT 0
53733: ST_TO_ADDR
// uc_side := 0 ;
53734: LD_ADDR_OWVAR 20
53738: PUSH
53739: LD_INT 0
53741: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53742: LD_ADDR_OWVAR 29
53746: PUSH
53747: LD_INT 12
53749: PUSH
53750: LD_INT 12
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: ST_TO_ADDR
// hc_agressivity := 20 ;
53757: LD_ADDR_OWVAR 35
53761: PUSH
53762: LD_INT 20
53764: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
53765: LD_ADDR_OWVAR 28
53769: PUSH
53770: LD_INT 17
53772: ST_TO_ADDR
// hc_gallery :=  ;
53773: LD_ADDR_OWVAR 33
53777: PUSH
53778: LD_STRING 
53780: ST_TO_ADDR
// hc_name :=  ;
53781: LD_ADDR_OWVAR 26
53785: PUSH
53786: LD_STRING 
53788: ST_TO_ADDR
// un := CreateHuman ;
53789: LD_ADDR_VAR 0 2
53793: PUSH
53794: CALL_OW 44
53798: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
53799: LD_VAR 0 2
53803: PPUSH
53804: LD_INT 1
53806: PPUSH
53807: CALL_OW 51
// tmp := tmp ^ un ;
53811: LD_ADDR_VAR 0 3
53815: PUSH
53816: LD_VAR 0 3
53820: PUSH
53821: LD_VAR 0 2
53825: ADD
53826: ST_TO_ADDR
// end ;
53827: GO 53723
53829: POP
53830: POP
// repeat wait ( 0 0$1 ) ;
53831: LD_INT 35
53833: PPUSH
53834: CALL_OW 67
// for un in tmp do
53838: LD_ADDR_VAR 0 2
53842: PUSH
53843: LD_VAR 0 3
53847: PUSH
53848: FOR_IN
53849: IFFALSE 53923
// begin if IsDead ( un ) then
53851: LD_VAR 0 2
53855: PPUSH
53856: CALL_OW 301
53860: IFFALSE 53880
// begin tmp := tmp diff un ;
53862: LD_ADDR_VAR 0 3
53866: PUSH
53867: LD_VAR 0 3
53871: PUSH
53872: LD_VAR 0 2
53876: DIFF
53877: ST_TO_ADDR
// continue ;
53878: GO 53848
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
53880: LD_VAR 0 2
53884: PPUSH
53885: LD_INT 3
53887: PUSH
53888: LD_INT 22
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PPUSH
53902: CALL_OW 69
53906: PPUSH
53907: LD_VAR 0 2
53911: PPUSH
53912: CALL_OW 74
53916: PPUSH
53917: CALL_OW 115
// end ;
53921: GO 53848
53923: POP
53924: POP
// until not tmp ;
53925: LD_VAR 0 3
53929: NOT
53930: IFFALSE 53831
// end ;
53932: PPOPN 3
53934: END
// every 0 0$1 trigger StreamModeActive and sTroll do
53935: LD_EXP 15
53939: PUSH
53940: LD_EXP 40
53944: AND
53945: IFFALSE 53999
53947: GO 53949
53949: DISABLE
// begin ToLua ( displayTroll(); ) ;
53950: LD_STRING displayTroll();
53952: PPUSH
53953: CALL_OW 559
// wait ( 3 3$00 ) ;
53957: LD_INT 6300
53959: PPUSH
53960: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53964: LD_STRING hideTroll();
53966: PPUSH
53967: CALL_OW 559
// wait ( 1 1$00 ) ;
53971: LD_INT 2100
53973: PPUSH
53974: CALL_OW 67
// ToLua ( displayTroll(); ) ;
53978: LD_STRING displayTroll();
53980: PPUSH
53981: CALL_OW 559
// wait ( 1 1$00 ) ;
53985: LD_INT 2100
53987: PPUSH
53988: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53992: LD_STRING hideTroll();
53994: PPUSH
53995: CALL_OW 559
// end ;
53999: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
54000: LD_EXP 15
54004: PUSH
54005: LD_EXP 41
54009: AND
54010: IFFALSE 54073
54012: GO 54014
54014: DISABLE
54015: LD_INT 0
54017: PPUSH
// begin p := 0 ;
54018: LD_ADDR_VAR 0 1
54022: PUSH
54023: LD_INT 0
54025: ST_TO_ADDR
// repeat game_speed := 1 ;
54026: LD_ADDR_OWVAR 65
54030: PUSH
54031: LD_INT 1
54033: ST_TO_ADDR
// wait ( 0 0$1 ) ;
54034: LD_INT 35
54036: PPUSH
54037: CALL_OW 67
// p := p + 1 ;
54041: LD_ADDR_VAR 0 1
54045: PUSH
54046: LD_VAR 0 1
54050: PUSH
54051: LD_INT 1
54053: PLUS
54054: ST_TO_ADDR
// until p >= 60 ;
54055: LD_VAR 0 1
54059: PUSH
54060: LD_INT 60
54062: GREATEREQUAL
54063: IFFALSE 54026
// game_speed := 4 ;
54065: LD_ADDR_OWVAR 65
54069: PUSH
54070: LD_INT 4
54072: ST_TO_ADDR
// end ;
54073: PPOPN 1
54075: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
54076: LD_EXP 15
54080: PUSH
54081: LD_EXP 42
54085: AND
54086: IFFALSE 54232
54088: GO 54090
54090: DISABLE
54091: LD_INT 0
54093: PPUSH
54094: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54095: LD_ADDR_VAR 0 1
54099: PUSH
54100: LD_INT 22
54102: PUSH
54103: LD_OWVAR 2
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: LD_INT 30
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 30
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: LIST
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PPUSH
54144: CALL_OW 69
54148: ST_TO_ADDR
// if not depot then
54149: LD_VAR 0 1
54153: NOT
54154: IFFALSE 54158
// exit ;
54156: GO 54232
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
54158: LD_ADDR_VAR 0 2
54162: PUSH
54163: LD_VAR 0 1
54167: PUSH
54168: LD_INT 1
54170: PPUSH
54171: LD_VAR 0 1
54175: PPUSH
54176: CALL_OW 12
54180: ARRAY
54181: PPUSH
54182: CALL_OW 274
54186: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
54187: LD_VAR 0 2
54191: PPUSH
54192: LD_INT 1
54194: PPUSH
54195: LD_INT 0
54197: PPUSH
54198: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
54202: LD_VAR 0 2
54206: PPUSH
54207: LD_INT 2
54209: PPUSH
54210: LD_INT 0
54212: PPUSH
54213: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
54217: LD_VAR 0 2
54221: PPUSH
54222: LD_INT 3
54224: PPUSH
54225: LD_INT 0
54227: PPUSH
54228: CALL_OW 277
// end ;
54232: PPOPN 2
54234: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
54235: LD_EXP 15
54239: PUSH
54240: LD_EXP 43
54244: AND
54245: IFFALSE 54342
54247: GO 54249
54249: DISABLE
54250: LD_INT 0
54252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54253: LD_ADDR_VAR 0 1
54257: PUSH
54258: LD_INT 22
54260: PUSH
54261: LD_OWVAR 2
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 21
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 3
54282: PUSH
54283: LD_INT 23
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: LIST
54301: PPUSH
54302: CALL_OW 69
54306: ST_TO_ADDR
// if not tmp then
54307: LD_VAR 0 1
54311: NOT
54312: IFFALSE 54316
// exit ;
54314: GO 54342
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
54316: LD_VAR 0 1
54320: PUSH
54321: LD_INT 1
54323: PPUSH
54324: LD_VAR 0 1
54328: PPUSH
54329: CALL_OW 12
54333: ARRAY
54334: PPUSH
54335: LD_INT 200
54337: PPUSH
54338: CALL_OW 234
// end ;
54342: PPOPN 1
54344: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
54345: LD_EXP 15
54349: PUSH
54350: LD_EXP 44
54354: AND
54355: IFFALSE 54434
54357: GO 54359
54359: DISABLE
54360: LD_INT 0
54362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
54363: LD_ADDR_VAR 0 1
54367: PUSH
54368: LD_INT 22
54370: PUSH
54371: LD_OWVAR 2
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 21
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PPUSH
54394: CALL_OW 69
54398: ST_TO_ADDR
// if not tmp then
54399: LD_VAR 0 1
54403: NOT
54404: IFFALSE 54408
// exit ;
54406: GO 54434
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
54408: LD_VAR 0 1
54412: PUSH
54413: LD_INT 1
54415: PPUSH
54416: LD_VAR 0 1
54420: PPUSH
54421: CALL_OW 12
54425: ARRAY
54426: PPUSH
54427: LD_INT 60
54429: PPUSH
54430: CALL_OW 234
// end ;
54434: PPOPN 1
54436: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
54437: LD_EXP 15
54441: PUSH
54442: LD_EXP 45
54446: AND
54447: IFFALSE 54546
54449: GO 54451
54451: DISABLE
54452: LD_INT 0
54454: PPUSH
54455: PPUSH
// begin enable ;
54456: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
54457: LD_ADDR_VAR 0 1
54461: PUSH
54462: LD_INT 22
54464: PUSH
54465: LD_OWVAR 2
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 61
54476: PUSH
54477: EMPTY
54478: LIST
54479: PUSH
54480: LD_INT 33
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: LIST
54494: PPUSH
54495: CALL_OW 69
54499: ST_TO_ADDR
// if not tmp then
54500: LD_VAR 0 1
54504: NOT
54505: IFFALSE 54509
// exit ;
54507: GO 54546
// for i in tmp do
54509: LD_ADDR_VAR 0 2
54513: PUSH
54514: LD_VAR 0 1
54518: PUSH
54519: FOR_IN
54520: IFFALSE 54544
// if IsControledBy ( i ) then
54522: LD_VAR 0 2
54526: PPUSH
54527: CALL_OW 312
54531: IFFALSE 54542
// ComUnlink ( i ) ;
54533: LD_VAR 0 2
54537: PPUSH
54538: CALL_OW 136
54542: GO 54519
54544: POP
54545: POP
// end ;
54546: PPOPN 2
54548: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
54549: LD_EXP 15
54553: PUSH
54554: LD_EXP 46
54558: AND
54559: IFFALSE 54699
54561: GO 54563
54563: DISABLE
54564: LD_INT 0
54566: PPUSH
54567: PPUSH
// begin ToLua ( displayPowell(); ) ;
54568: LD_STRING displayPowell();
54570: PPUSH
54571: CALL_OW 559
// uc_side := 0 ;
54575: LD_ADDR_OWVAR 20
54579: PUSH
54580: LD_INT 0
54582: ST_TO_ADDR
// uc_nation := 2 ;
54583: LD_ADDR_OWVAR 21
54587: PUSH
54588: LD_INT 2
54590: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
54591: LD_ADDR_OWVAR 37
54595: PUSH
54596: LD_INT 14
54598: ST_TO_ADDR
// vc_engine := engine_siberite ;
54599: LD_ADDR_OWVAR 39
54603: PUSH
54604: LD_INT 3
54606: ST_TO_ADDR
// vc_control := control_apeman ;
54607: LD_ADDR_OWVAR 38
54611: PUSH
54612: LD_INT 5
54614: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
54615: LD_ADDR_OWVAR 40
54619: PUSH
54620: LD_INT 29
54622: ST_TO_ADDR
// un := CreateVehicle ;
54623: LD_ADDR_VAR 0 2
54627: PUSH
54628: CALL_OW 45
54632: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54633: LD_VAR 0 2
54637: PPUSH
54638: LD_INT 1
54640: PPUSH
54641: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54645: LD_INT 35
54647: PPUSH
54648: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54652: LD_VAR 0 2
54656: PPUSH
54657: LD_INT 22
54659: PUSH
54660: LD_OWVAR 2
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PPUSH
54669: CALL_OW 69
54673: PPUSH
54674: LD_VAR 0 2
54678: PPUSH
54679: CALL_OW 74
54683: PPUSH
54684: CALL_OW 115
// until IsDead ( un ) ;
54688: LD_VAR 0 2
54692: PPUSH
54693: CALL_OW 301
54697: IFFALSE 54645
// end ;
54699: PPOPN 2
54701: END
// every 0 0$1 trigger StreamModeActive and sStu do
54702: LD_EXP 15
54706: PUSH
54707: LD_EXP 54
54711: AND
54712: IFFALSE 54728
54714: GO 54716
54716: DISABLE
// begin ToLua ( displayStucuk(); ) ;
54717: LD_STRING displayStucuk();
54719: PPUSH
54720: CALL_OW 559
// ResetFog ;
54724: CALL_OW 335
// end ;
54728: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
54729: LD_EXP 15
54733: PUSH
54734: LD_EXP 47
54738: AND
54739: IFFALSE 54880
54741: GO 54743
54743: DISABLE
54744: LD_INT 0
54746: PPUSH
54747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54748: LD_ADDR_VAR 0 2
54752: PUSH
54753: LD_INT 22
54755: PUSH
54756: LD_OWVAR 2
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 21
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PPUSH
54779: CALL_OW 69
54783: ST_TO_ADDR
// if not tmp then
54784: LD_VAR 0 2
54788: NOT
54789: IFFALSE 54793
// exit ;
54791: GO 54880
// un := tmp [ rand ( 1 , tmp ) ] ;
54793: LD_ADDR_VAR 0 1
54797: PUSH
54798: LD_VAR 0 2
54802: PUSH
54803: LD_INT 1
54805: PPUSH
54806: LD_VAR 0 2
54810: PPUSH
54811: CALL_OW 12
54815: ARRAY
54816: ST_TO_ADDR
// SetSide ( un , 0 ) ;
54817: LD_VAR 0 1
54821: PPUSH
54822: LD_INT 0
54824: PPUSH
54825: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
54829: LD_VAR 0 1
54833: PPUSH
54834: LD_OWVAR 3
54838: PUSH
54839: LD_VAR 0 1
54843: DIFF
54844: PPUSH
54845: LD_VAR 0 1
54849: PPUSH
54850: CALL_OW 74
54854: PPUSH
54855: CALL_OW 115
// wait ( 0 0$20 ) ;
54859: LD_INT 700
54861: PPUSH
54862: CALL_OW 67
// SetSide ( un , your_side ) ;
54866: LD_VAR 0 1
54870: PPUSH
54871: LD_OWVAR 2
54875: PPUSH
54876: CALL_OW 235
// end ;
54880: PPOPN 2
54882: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
54883: LD_EXP 15
54887: PUSH
54888: LD_EXP 48
54892: AND
54893: IFFALSE 54999
54895: GO 54897
54897: DISABLE
54898: LD_INT 0
54900: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54901: LD_ADDR_VAR 0 1
54905: PUSH
54906: LD_INT 22
54908: PUSH
54909: LD_OWVAR 2
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 2
54920: PUSH
54921: LD_INT 30
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 30
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: LIST
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PPUSH
54950: CALL_OW 69
54954: ST_TO_ADDR
// if not depot then
54955: LD_VAR 0 1
54959: NOT
54960: IFFALSE 54964
// exit ;
54962: GO 54999
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
54964: LD_VAR 0 1
54968: PUSH
54969: LD_INT 1
54971: ARRAY
54972: PPUSH
54973: CALL_OW 250
54977: PPUSH
54978: LD_VAR 0 1
54982: PUSH
54983: LD_INT 1
54985: ARRAY
54986: PPUSH
54987: CALL_OW 251
54991: PPUSH
54992: LD_INT 70
54994: PPUSH
54995: CALL_OW 495
// end ;
54999: PPOPN 1
55001: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
55002: LD_EXP 15
55006: PUSH
55007: LD_EXP 49
55011: AND
55012: IFFALSE 55223
55014: GO 55016
55016: DISABLE
55017: LD_INT 0
55019: PPUSH
55020: PPUSH
55021: PPUSH
55022: PPUSH
55023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55024: LD_ADDR_VAR 0 5
55028: PUSH
55029: LD_INT 22
55031: PUSH
55032: LD_OWVAR 2
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 21
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PPUSH
55055: CALL_OW 69
55059: ST_TO_ADDR
// if not tmp then
55060: LD_VAR 0 5
55064: NOT
55065: IFFALSE 55069
// exit ;
55067: GO 55223
// for i in tmp do
55069: LD_ADDR_VAR 0 1
55073: PUSH
55074: LD_VAR 0 5
55078: PUSH
55079: FOR_IN
55080: IFFALSE 55221
// begin d := rand ( 0 , 5 ) ;
55082: LD_ADDR_VAR 0 4
55086: PUSH
55087: LD_INT 0
55089: PPUSH
55090: LD_INT 5
55092: PPUSH
55093: CALL_OW 12
55097: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
55098: LD_ADDR_VAR 0 2
55102: PUSH
55103: LD_VAR 0 1
55107: PPUSH
55108: CALL_OW 250
55112: PPUSH
55113: LD_VAR 0 4
55117: PPUSH
55118: LD_INT 3
55120: PPUSH
55121: LD_INT 12
55123: PPUSH
55124: CALL_OW 12
55128: PPUSH
55129: CALL_OW 272
55133: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
55134: LD_ADDR_VAR 0 3
55138: PUSH
55139: LD_VAR 0 1
55143: PPUSH
55144: CALL_OW 251
55148: PPUSH
55149: LD_VAR 0 4
55153: PPUSH
55154: LD_INT 3
55156: PPUSH
55157: LD_INT 12
55159: PPUSH
55160: CALL_OW 12
55164: PPUSH
55165: CALL_OW 273
55169: ST_TO_ADDR
// if ValidHex ( x , y ) then
55170: LD_VAR 0 2
55174: PPUSH
55175: LD_VAR 0 3
55179: PPUSH
55180: CALL_OW 488
55184: IFFALSE 55219
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
55186: LD_VAR 0 1
55190: PPUSH
55191: LD_VAR 0 2
55195: PPUSH
55196: LD_VAR 0 3
55200: PPUSH
55201: LD_INT 3
55203: PPUSH
55204: LD_INT 6
55206: PPUSH
55207: CALL_OW 12
55211: PPUSH
55212: LD_INT 1
55214: PPUSH
55215: CALL_OW 483
// end ;
55219: GO 55079
55221: POP
55222: POP
// end ;
55223: PPOPN 5
55225: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
55226: LD_EXP 15
55230: PUSH
55231: LD_EXP 50
55235: AND
55236: IFFALSE 55330
55238: GO 55240
55240: DISABLE
55241: LD_INT 0
55243: PPUSH
55244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
55245: LD_ADDR_VAR 0 2
55249: PUSH
55250: LD_INT 22
55252: PUSH
55253: LD_OWVAR 2
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 32
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 21
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: LIST
55286: PPUSH
55287: CALL_OW 69
55291: ST_TO_ADDR
// if not tmp then
55292: LD_VAR 0 2
55296: NOT
55297: IFFALSE 55301
// exit ;
55299: GO 55330
// for i in tmp do
55301: LD_ADDR_VAR 0 1
55305: PUSH
55306: LD_VAR 0 2
55310: PUSH
55311: FOR_IN
55312: IFFALSE 55328
// SetFuel ( i , 0 ) ;
55314: LD_VAR 0 1
55318: PPUSH
55319: LD_INT 0
55321: PPUSH
55322: CALL_OW 240
55326: GO 55311
55328: POP
55329: POP
// end ;
55330: PPOPN 2
55332: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
55333: LD_EXP 15
55337: PUSH
55338: LD_EXP 51
55342: AND
55343: IFFALSE 55409
55345: GO 55347
55347: DISABLE
55348: LD_INT 0
55350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
55351: LD_ADDR_VAR 0 1
55355: PUSH
55356: LD_INT 22
55358: PUSH
55359: LD_OWVAR 2
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 30
55370: PUSH
55371: LD_INT 29
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PPUSH
55382: CALL_OW 69
55386: ST_TO_ADDR
// if not tmp then
55387: LD_VAR 0 1
55391: NOT
55392: IFFALSE 55396
// exit ;
55394: GO 55409
// DestroyUnit ( tmp [ 1 ] ) ;
55396: LD_VAR 0 1
55400: PUSH
55401: LD_INT 1
55403: ARRAY
55404: PPUSH
55405: CALL_OW 65
// end ;
55409: PPOPN 1
55411: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
55412: LD_EXP 15
55416: PUSH
55417: LD_EXP 53
55421: AND
55422: IFFALSE 55551
55424: GO 55426
55426: DISABLE
55427: LD_INT 0
55429: PPUSH
// begin uc_side := 0 ;
55430: LD_ADDR_OWVAR 20
55434: PUSH
55435: LD_INT 0
55437: ST_TO_ADDR
// uc_nation := nation_arabian ;
55438: LD_ADDR_OWVAR 21
55442: PUSH
55443: LD_INT 2
55445: ST_TO_ADDR
// hc_gallery :=  ;
55446: LD_ADDR_OWVAR 33
55450: PUSH
55451: LD_STRING 
55453: ST_TO_ADDR
// hc_name :=  ;
55454: LD_ADDR_OWVAR 26
55458: PUSH
55459: LD_STRING 
55461: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
55462: LD_INT 1
55464: PPUSH
55465: LD_INT 11
55467: PPUSH
55468: LD_INT 10
55470: PPUSH
55471: CALL_OW 380
// un := CreateHuman ;
55475: LD_ADDR_VAR 0 1
55479: PUSH
55480: CALL_OW 44
55484: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55485: LD_VAR 0 1
55489: PPUSH
55490: LD_INT 1
55492: PPUSH
55493: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55497: LD_INT 35
55499: PPUSH
55500: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55504: LD_VAR 0 1
55508: PPUSH
55509: LD_INT 22
55511: PUSH
55512: LD_OWVAR 2
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PPUSH
55521: CALL_OW 69
55525: PPUSH
55526: LD_VAR 0 1
55530: PPUSH
55531: CALL_OW 74
55535: PPUSH
55536: CALL_OW 115
// until IsDead ( un ) ;
55540: LD_VAR 0 1
55544: PPUSH
55545: CALL_OW 301
55549: IFFALSE 55497
// end ;
55551: PPOPN 1
55553: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
55554: LD_EXP 15
55558: PUSH
55559: LD_EXP 55
55563: AND
55564: IFFALSE 55576
55566: GO 55568
55568: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
55569: LD_STRING earthquake(getX(game), 0, 32)
55571: PPUSH
55572: CALL_OW 559
55576: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
55577: LD_EXP 15
55581: PUSH
55582: LD_EXP 56
55586: AND
55587: IFFALSE 55678
55589: GO 55591
55591: DISABLE
55592: LD_INT 0
55594: PPUSH
// begin enable ;
55595: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
55596: LD_ADDR_VAR 0 1
55600: PUSH
55601: LD_INT 22
55603: PUSH
55604: LD_OWVAR 2
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 21
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 33
55625: PUSH
55626: LD_INT 3
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: LIST
55637: PPUSH
55638: CALL_OW 69
55642: ST_TO_ADDR
// if not tmp then
55643: LD_VAR 0 1
55647: NOT
55648: IFFALSE 55652
// exit ;
55650: GO 55678
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55652: LD_VAR 0 1
55656: PUSH
55657: LD_INT 1
55659: PPUSH
55660: LD_VAR 0 1
55664: PPUSH
55665: CALL_OW 12
55669: ARRAY
55670: PPUSH
55671: LD_INT 1
55673: PPUSH
55674: CALL_OW 234
// end ;
55678: PPOPN 1
55680: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
55681: LD_EXP 15
55685: PUSH
55686: LD_EXP 57
55690: AND
55691: IFFALSE 55832
55693: GO 55695
55695: DISABLE
55696: LD_INT 0
55698: PPUSH
55699: PPUSH
55700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55701: LD_ADDR_VAR 0 3
55705: PUSH
55706: LD_INT 22
55708: PUSH
55709: LD_OWVAR 2
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 25
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PPUSH
55732: CALL_OW 69
55736: ST_TO_ADDR
// if not tmp then
55737: LD_VAR 0 3
55741: NOT
55742: IFFALSE 55746
// exit ;
55744: GO 55832
// un := tmp [ rand ( 1 , tmp ) ] ;
55746: LD_ADDR_VAR 0 2
55750: PUSH
55751: LD_VAR 0 3
55755: PUSH
55756: LD_INT 1
55758: PPUSH
55759: LD_VAR 0 3
55763: PPUSH
55764: CALL_OW 12
55768: ARRAY
55769: ST_TO_ADDR
// if Crawls ( un ) then
55770: LD_VAR 0 2
55774: PPUSH
55775: CALL_OW 318
55779: IFFALSE 55790
// ComWalk ( un ) ;
55781: LD_VAR 0 2
55785: PPUSH
55786: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
55790: LD_VAR 0 2
55794: PPUSH
55795: LD_INT 9
55797: PPUSH
55798: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
55802: LD_INT 28
55804: PPUSH
55805: LD_OWVAR 2
55809: PPUSH
55810: LD_INT 2
55812: PPUSH
55813: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
55817: LD_INT 29
55819: PPUSH
55820: LD_OWVAR 2
55824: PPUSH
55825: LD_INT 2
55827: PPUSH
55828: CALL_OW 322
// end ;
55832: PPOPN 3
55834: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
55835: LD_EXP 15
55839: PUSH
55840: LD_EXP 58
55844: AND
55845: IFFALSE 55956
55847: GO 55849
55849: DISABLE
55850: LD_INT 0
55852: PPUSH
55853: PPUSH
55854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55855: LD_ADDR_VAR 0 3
55859: PUSH
55860: LD_INT 22
55862: PUSH
55863: LD_OWVAR 2
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 25
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PPUSH
55886: CALL_OW 69
55890: ST_TO_ADDR
// if not tmp then
55891: LD_VAR 0 3
55895: NOT
55896: IFFALSE 55900
// exit ;
55898: GO 55956
// un := tmp [ rand ( 1 , tmp ) ] ;
55900: LD_ADDR_VAR 0 2
55904: PUSH
55905: LD_VAR 0 3
55909: PUSH
55910: LD_INT 1
55912: PPUSH
55913: LD_VAR 0 3
55917: PPUSH
55918: CALL_OW 12
55922: ARRAY
55923: ST_TO_ADDR
// if Crawls ( un ) then
55924: LD_VAR 0 2
55928: PPUSH
55929: CALL_OW 318
55933: IFFALSE 55944
// ComWalk ( un ) ;
55935: LD_VAR 0 2
55939: PPUSH
55940: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55944: LD_VAR 0 2
55948: PPUSH
55949: LD_INT 8
55951: PPUSH
55952: CALL_OW 336
// end ;
55956: PPOPN 3
55958: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
55959: LD_EXP 15
55963: PUSH
55964: LD_EXP 59
55968: AND
55969: IFFALSE 56113
55971: GO 55973
55973: DISABLE
55974: LD_INT 0
55976: PPUSH
55977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
55978: LD_ADDR_VAR 0 2
55982: PUSH
55983: LD_INT 22
55985: PUSH
55986: LD_OWVAR 2
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 21
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 2
56007: PUSH
56008: LD_INT 34
56010: PUSH
56011: LD_INT 12
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 34
56020: PUSH
56021: LD_INT 51
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 34
56030: PUSH
56031: LD_INT 32
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: LIST
56048: PPUSH
56049: CALL_OW 69
56053: ST_TO_ADDR
// if not tmp then
56054: LD_VAR 0 2
56058: NOT
56059: IFFALSE 56063
// exit ;
56061: GO 56113
// for i in tmp do
56063: LD_ADDR_VAR 0 1
56067: PUSH
56068: LD_VAR 0 2
56072: PUSH
56073: FOR_IN
56074: IFFALSE 56111
// if GetCargo ( i , mat_artifact ) = 0 then
56076: LD_VAR 0 1
56080: PPUSH
56081: LD_INT 4
56083: PPUSH
56084: CALL_OW 289
56088: PUSH
56089: LD_INT 0
56091: EQUAL
56092: IFFALSE 56109
// SetCargo ( i , mat_siberit , 100 ) ;
56094: LD_VAR 0 1
56098: PPUSH
56099: LD_INT 3
56101: PPUSH
56102: LD_INT 100
56104: PPUSH
56105: CALL_OW 290
56109: GO 56073
56111: POP
56112: POP
// end ;
56113: PPOPN 2
56115: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
56116: LD_EXP 15
56120: PUSH
56121: LD_EXP 60
56125: AND
56126: IFFALSE 56309
56128: GO 56130
56130: DISABLE
56131: LD_INT 0
56133: PPUSH
56134: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56135: LD_ADDR_VAR 0 2
56139: PUSH
56140: LD_INT 22
56142: PUSH
56143: LD_OWVAR 2
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PPUSH
56152: CALL_OW 69
56156: ST_TO_ADDR
// if not tmp then
56157: LD_VAR 0 2
56161: NOT
56162: IFFALSE 56166
// exit ;
56164: GO 56309
// for i := 1 to 2 do
56166: LD_ADDR_VAR 0 1
56170: PUSH
56171: DOUBLE
56172: LD_INT 1
56174: DEC
56175: ST_TO_ADDR
56176: LD_INT 2
56178: PUSH
56179: FOR_TO
56180: IFFALSE 56307
// begin uc_side := your_side ;
56182: LD_ADDR_OWVAR 20
56186: PUSH
56187: LD_OWVAR 2
56191: ST_TO_ADDR
// uc_nation := nation_american ;
56192: LD_ADDR_OWVAR 21
56196: PUSH
56197: LD_INT 1
56199: ST_TO_ADDR
// vc_chassis := us_morphling ;
56200: LD_ADDR_OWVAR 37
56204: PUSH
56205: LD_INT 5
56207: ST_TO_ADDR
// vc_engine := engine_siberite ;
56208: LD_ADDR_OWVAR 39
56212: PUSH
56213: LD_INT 3
56215: ST_TO_ADDR
// vc_control := control_computer ;
56216: LD_ADDR_OWVAR 38
56220: PUSH
56221: LD_INT 3
56223: ST_TO_ADDR
// vc_weapon := us_double_laser ;
56224: LD_ADDR_OWVAR 40
56228: PUSH
56229: LD_INT 10
56231: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
56232: LD_VAR 0 2
56236: PUSH
56237: LD_INT 1
56239: ARRAY
56240: PPUSH
56241: CALL_OW 310
56245: NOT
56246: IFFALSE 56293
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
56248: CALL_OW 45
56252: PPUSH
56253: LD_VAR 0 2
56257: PUSH
56258: LD_INT 1
56260: ARRAY
56261: PPUSH
56262: CALL_OW 250
56266: PPUSH
56267: LD_VAR 0 2
56271: PUSH
56272: LD_INT 1
56274: ARRAY
56275: PPUSH
56276: CALL_OW 251
56280: PPUSH
56281: LD_INT 12
56283: PPUSH
56284: LD_INT 1
56286: PPUSH
56287: CALL_OW 50
56291: GO 56305
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
56293: CALL_OW 45
56297: PPUSH
56298: LD_INT 1
56300: PPUSH
56301: CALL_OW 51
// end ;
56305: GO 56179
56307: POP
56308: POP
// end ;
56309: PPOPN 2
56311: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
56312: LD_EXP 15
56316: PUSH
56317: LD_EXP 61
56321: AND
56322: IFFALSE 56544
56324: GO 56326
56326: DISABLE
56327: LD_INT 0
56329: PPUSH
56330: PPUSH
56331: PPUSH
56332: PPUSH
56333: PPUSH
56334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56335: LD_ADDR_VAR 0 6
56339: PUSH
56340: LD_INT 22
56342: PUSH
56343: LD_OWVAR 2
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 21
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 3
56364: PUSH
56365: LD_INT 23
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: LIST
56383: PPUSH
56384: CALL_OW 69
56388: ST_TO_ADDR
// if not tmp then
56389: LD_VAR 0 6
56393: NOT
56394: IFFALSE 56398
// exit ;
56396: GO 56544
// s1 := rand ( 1 , 4 ) ;
56398: LD_ADDR_VAR 0 2
56402: PUSH
56403: LD_INT 1
56405: PPUSH
56406: LD_INT 4
56408: PPUSH
56409: CALL_OW 12
56413: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
56414: LD_ADDR_VAR 0 4
56418: PUSH
56419: LD_VAR 0 6
56423: PUSH
56424: LD_INT 1
56426: ARRAY
56427: PPUSH
56428: LD_VAR 0 2
56432: PPUSH
56433: CALL_OW 259
56437: ST_TO_ADDR
// if s1 = 1 then
56438: LD_VAR 0 2
56442: PUSH
56443: LD_INT 1
56445: EQUAL
56446: IFFALSE 56466
// s2 := rand ( 2 , 4 ) else
56448: LD_ADDR_VAR 0 3
56452: PUSH
56453: LD_INT 2
56455: PPUSH
56456: LD_INT 4
56458: PPUSH
56459: CALL_OW 12
56463: ST_TO_ADDR
56464: GO 56474
// s2 := 1 ;
56466: LD_ADDR_VAR 0 3
56470: PUSH
56471: LD_INT 1
56473: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
56474: LD_ADDR_VAR 0 5
56478: PUSH
56479: LD_VAR 0 6
56483: PUSH
56484: LD_INT 1
56486: ARRAY
56487: PPUSH
56488: LD_VAR 0 3
56492: PPUSH
56493: CALL_OW 259
56497: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
56498: LD_VAR 0 6
56502: PUSH
56503: LD_INT 1
56505: ARRAY
56506: PPUSH
56507: LD_VAR 0 2
56511: PPUSH
56512: LD_VAR 0 5
56516: PPUSH
56517: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
56521: LD_VAR 0 6
56525: PUSH
56526: LD_INT 1
56528: ARRAY
56529: PPUSH
56530: LD_VAR 0 3
56534: PPUSH
56535: LD_VAR 0 4
56539: PPUSH
56540: CALL_OW 237
// end ;
56544: PPOPN 6
56546: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
56547: LD_EXP 15
56551: PUSH
56552: LD_EXP 62
56556: AND
56557: IFFALSE 56636
56559: GO 56561
56561: DISABLE
56562: LD_INT 0
56564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
56565: LD_ADDR_VAR 0 1
56569: PUSH
56570: LD_INT 22
56572: PUSH
56573: LD_OWVAR 2
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 30
56584: PUSH
56585: LD_INT 3
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PPUSH
56596: CALL_OW 69
56600: ST_TO_ADDR
// if not tmp then
56601: LD_VAR 0 1
56605: NOT
56606: IFFALSE 56610
// exit ;
56608: GO 56636
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56610: LD_VAR 0 1
56614: PUSH
56615: LD_INT 1
56617: PPUSH
56618: LD_VAR 0 1
56622: PPUSH
56623: CALL_OW 12
56627: ARRAY
56628: PPUSH
56629: LD_INT 1
56631: PPUSH
56632: CALL_OW 234
// end ;
56636: PPOPN 1
56638: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
56639: LD_EXP 15
56643: PUSH
56644: LD_EXP 63
56648: AND
56649: IFFALSE 56761
56651: GO 56653
56653: DISABLE
56654: LD_INT 0
56656: PPUSH
56657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
56658: LD_ADDR_VAR 0 2
56662: PUSH
56663: LD_INT 22
56665: PUSH
56666: LD_OWVAR 2
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: LD_INT 30
56680: PUSH
56681: LD_INT 27
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 30
56690: PUSH
56691: LD_INT 26
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 30
56700: PUSH
56701: LD_INT 28
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PPUSH
56718: CALL_OW 69
56722: ST_TO_ADDR
// if not tmp then
56723: LD_VAR 0 2
56727: NOT
56728: IFFALSE 56732
// exit ;
56730: GO 56761
// for i in tmp do
56732: LD_ADDR_VAR 0 1
56736: PUSH
56737: LD_VAR 0 2
56741: PUSH
56742: FOR_IN
56743: IFFALSE 56759
// SetLives ( i , 1 ) ;
56745: LD_VAR 0 1
56749: PPUSH
56750: LD_INT 1
56752: PPUSH
56753: CALL_OW 234
56757: GO 56742
56759: POP
56760: POP
// end ;
56761: PPOPN 2
56763: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
56764: LD_EXP 15
56768: PUSH
56769: LD_EXP 64
56773: AND
56774: IFFALSE 57061
56776: GO 56778
56778: DISABLE
56779: LD_INT 0
56781: PPUSH
56782: PPUSH
56783: PPUSH
// begin i := rand ( 1 , 7 ) ;
56784: LD_ADDR_VAR 0 1
56788: PUSH
56789: LD_INT 1
56791: PPUSH
56792: LD_INT 7
56794: PPUSH
56795: CALL_OW 12
56799: ST_TO_ADDR
// case i of 1 :
56800: LD_VAR 0 1
56804: PUSH
56805: LD_INT 1
56807: DOUBLE
56808: EQUAL
56809: IFTRUE 56813
56811: GO 56823
56813: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
56814: LD_STRING earthquake(getX(game), 0, 32)
56816: PPUSH
56817: CALL_OW 559
56821: GO 57061
56823: LD_INT 2
56825: DOUBLE
56826: EQUAL
56827: IFTRUE 56831
56829: GO 56845
56831: POP
// begin ToLua ( displayStucuk(); ) ;
56832: LD_STRING displayStucuk();
56834: PPUSH
56835: CALL_OW 559
// ResetFog ;
56839: CALL_OW 335
// end ; 3 :
56843: GO 57061
56845: LD_INT 3
56847: DOUBLE
56848: EQUAL
56849: IFTRUE 56853
56851: GO 56957
56853: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56854: LD_ADDR_VAR 0 2
56858: PUSH
56859: LD_INT 22
56861: PUSH
56862: LD_OWVAR 2
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 25
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PPUSH
56885: CALL_OW 69
56889: ST_TO_ADDR
// if not tmp then
56890: LD_VAR 0 2
56894: NOT
56895: IFFALSE 56899
// exit ;
56897: GO 57061
// un := tmp [ rand ( 1 , tmp ) ] ;
56899: LD_ADDR_VAR 0 3
56903: PUSH
56904: LD_VAR 0 2
56908: PUSH
56909: LD_INT 1
56911: PPUSH
56912: LD_VAR 0 2
56916: PPUSH
56917: CALL_OW 12
56921: ARRAY
56922: ST_TO_ADDR
// if Crawls ( un ) then
56923: LD_VAR 0 3
56927: PPUSH
56928: CALL_OW 318
56932: IFFALSE 56943
// ComWalk ( un ) ;
56934: LD_VAR 0 3
56938: PPUSH
56939: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56943: LD_VAR 0 3
56947: PPUSH
56948: LD_INT 8
56950: PPUSH
56951: CALL_OW 336
// end ; 4 :
56955: GO 57061
56957: LD_INT 4
56959: DOUBLE
56960: EQUAL
56961: IFTRUE 56965
56963: GO 57039
56965: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56966: LD_ADDR_VAR 0 2
56970: PUSH
56971: LD_INT 22
56973: PUSH
56974: LD_OWVAR 2
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 30
56985: PUSH
56986: LD_INT 29
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PPUSH
56997: CALL_OW 69
57001: ST_TO_ADDR
// if not tmp then
57002: LD_VAR 0 2
57006: NOT
57007: IFFALSE 57011
// exit ;
57009: GO 57061
// CenterNowOnUnits ( tmp [ 1 ] ) ;
57011: LD_VAR 0 2
57015: PUSH
57016: LD_INT 1
57018: ARRAY
57019: PPUSH
57020: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
57024: LD_VAR 0 2
57028: PUSH
57029: LD_INT 1
57031: ARRAY
57032: PPUSH
57033: CALL_OW 65
// end ; 5 .. 7 :
57037: GO 57061
57039: LD_INT 5
57041: DOUBLE
57042: GREATEREQUAL
57043: IFFALSE 57051
57045: LD_INT 7
57047: DOUBLE
57048: LESSEQUAL
57049: IFTRUE 57053
57051: GO 57060
57053: POP
// StreamSibBomb ; end ;
57054: CALL 53298 0 0
57058: GO 57061
57060: POP
// end ;
57061: PPOPN 3
57063: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
57064: LD_EXP 15
57068: PUSH
57069: LD_EXP 65
57073: AND
57074: IFFALSE 57230
57076: GO 57078
57078: DISABLE
57079: LD_INT 0
57081: PPUSH
57082: PPUSH
57083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
57084: LD_ADDR_VAR 0 2
57088: PUSH
57089: LD_INT 81
57091: PUSH
57092: LD_OWVAR 2
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: LD_INT 21
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 21
57116: PUSH
57117: LD_INT 2
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: LIST
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PPUSH
57133: CALL_OW 69
57137: ST_TO_ADDR
// if not tmp then
57138: LD_VAR 0 2
57142: NOT
57143: IFFALSE 57147
// exit ;
57145: GO 57230
// p := 0 ;
57147: LD_ADDR_VAR 0 3
57151: PUSH
57152: LD_INT 0
57154: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57155: LD_INT 35
57157: PPUSH
57158: CALL_OW 67
// p := p + 1 ;
57162: LD_ADDR_VAR 0 3
57166: PUSH
57167: LD_VAR 0 3
57171: PUSH
57172: LD_INT 1
57174: PLUS
57175: ST_TO_ADDR
// for i in tmp do
57176: LD_ADDR_VAR 0 1
57180: PUSH
57181: LD_VAR 0 2
57185: PUSH
57186: FOR_IN
57187: IFFALSE 57218
// if GetLives ( i ) < 1000 then
57189: LD_VAR 0 1
57193: PPUSH
57194: CALL_OW 256
57198: PUSH
57199: LD_INT 1000
57201: LESS
57202: IFFALSE 57216
// SetLives ( i , 1000 ) ;
57204: LD_VAR 0 1
57208: PPUSH
57209: LD_INT 1000
57211: PPUSH
57212: CALL_OW 234
57216: GO 57186
57218: POP
57219: POP
// until p > 20 ;
57220: LD_VAR 0 3
57224: PUSH
57225: LD_INT 20
57227: GREATER
57228: IFFALSE 57155
// end ;
57230: PPOPN 3
57232: END
// every 0 0$1 trigger StreamModeActive and sTime do
57233: LD_EXP 15
57237: PUSH
57238: LD_EXP 66
57242: AND
57243: IFFALSE 57278
57245: GO 57247
57247: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
57248: LD_INT 28
57250: PPUSH
57251: LD_OWVAR 2
57255: PPUSH
57256: LD_INT 2
57258: PPUSH
57259: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
57263: LD_INT 30
57265: PPUSH
57266: LD_OWVAR 2
57270: PPUSH
57271: LD_INT 2
57273: PPUSH
57274: CALL_OW 322
// end ;
57278: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
57279: LD_EXP 15
57283: PUSH
57284: LD_EXP 67
57288: AND
57289: IFFALSE 57410
57291: GO 57293
57293: DISABLE
57294: LD_INT 0
57296: PPUSH
57297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57298: LD_ADDR_VAR 0 2
57302: PUSH
57303: LD_INT 22
57305: PUSH
57306: LD_OWVAR 2
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 21
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 3
57327: PUSH
57328: LD_INT 23
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: LIST
57346: PPUSH
57347: CALL_OW 69
57351: ST_TO_ADDR
// if not tmp then
57352: LD_VAR 0 2
57356: NOT
57357: IFFALSE 57361
// exit ;
57359: GO 57410
// for i in tmp do
57361: LD_ADDR_VAR 0 1
57365: PUSH
57366: LD_VAR 0 2
57370: PUSH
57371: FOR_IN
57372: IFFALSE 57408
// begin if Crawls ( i ) then
57374: LD_VAR 0 1
57378: PPUSH
57379: CALL_OW 318
57383: IFFALSE 57394
// ComWalk ( i ) ;
57385: LD_VAR 0 1
57389: PPUSH
57390: CALL_OW 138
// SetClass ( i , 2 ) ;
57394: LD_VAR 0 1
57398: PPUSH
57399: LD_INT 2
57401: PPUSH
57402: CALL_OW 336
// end ;
57406: GO 57371
57408: POP
57409: POP
// end ;
57410: PPOPN 2
57412: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
57413: LD_EXP 15
57417: PUSH
57418: LD_EXP 68
57422: AND
57423: IFFALSE 57711
57425: GO 57427
57427: DISABLE
57428: LD_INT 0
57430: PPUSH
57431: PPUSH
57432: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
57433: LD_OWVAR 2
57437: PPUSH
57438: LD_INT 9
57440: PPUSH
57441: LD_INT 1
57443: PPUSH
57444: LD_INT 1
57446: PPUSH
57447: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
57451: LD_INT 9
57453: PPUSH
57454: LD_OWVAR 2
57458: PPUSH
57459: CALL_OW 343
// uc_side := 9 ;
57463: LD_ADDR_OWVAR 20
57467: PUSH
57468: LD_INT 9
57470: ST_TO_ADDR
// uc_nation := 2 ;
57471: LD_ADDR_OWVAR 21
57475: PUSH
57476: LD_INT 2
57478: ST_TO_ADDR
// hc_name := Dark Warrior ;
57479: LD_ADDR_OWVAR 26
57483: PUSH
57484: LD_STRING Dark Warrior
57486: ST_TO_ADDR
// hc_gallery :=  ;
57487: LD_ADDR_OWVAR 33
57491: PUSH
57492: LD_STRING 
57494: ST_TO_ADDR
// hc_noskilllimit := true ;
57495: LD_ADDR_OWVAR 76
57499: PUSH
57500: LD_INT 1
57502: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
57503: LD_ADDR_OWVAR 31
57507: PUSH
57508: LD_INT 30
57510: PUSH
57511: LD_INT 30
57513: PUSH
57514: LD_INT 30
57516: PUSH
57517: LD_INT 30
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: ST_TO_ADDR
// un := CreateHuman ;
57526: LD_ADDR_VAR 0 3
57530: PUSH
57531: CALL_OW 44
57535: ST_TO_ADDR
// hc_noskilllimit := false ;
57536: LD_ADDR_OWVAR 76
57540: PUSH
57541: LD_INT 0
57543: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57544: LD_VAR 0 3
57548: PPUSH
57549: LD_INT 1
57551: PPUSH
57552: CALL_OW 51
// ToLua ( playRanger() ) ;
57556: LD_STRING playRanger()
57558: PPUSH
57559: CALL_OW 559
// p := 0 ;
57563: LD_ADDR_VAR 0 2
57567: PUSH
57568: LD_INT 0
57570: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57571: LD_INT 35
57573: PPUSH
57574: CALL_OW 67
// p := p + 1 ;
57578: LD_ADDR_VAR 0 2
57582: PUSH
57583: LD_VAR 0 2
57587: PUSH
57588: LD_INT 1
57590: PLUS
57591: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
57592: LD_VAR 0 3
57596: PPUSH
57597: CALL_OW 256
57601: PUSH
57602: LD_INT 1000
57604: LESS
57605: IFFALSE 57619
// SetLives ( un , 1000 ) ;
57607: LD_VAR 0 3
57611: PPUSH
57612: LD_INT 1000
57614: PPUSH
57615: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
57619: LD_VAR 0 3
57623: PPUSH
57624: LD_INT 81
57626: PUSH
57627: LD_OWVAR 2
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 91
57638: PUSH
57639: LD_VAR 0 3
57643: PUSH
57644: LD_INT 30
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: LIST
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PPUSH
57656: CALL_OW 69
57660: PPUSH
57661: LD_VAR 0 3
57665: PPUSH
57666: CALL_OW 74
57670: PPUSH
57671: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
57675: LD_VAR 0 2
57679: PUSH
57680: LD_INT 80
57682: GREATER
57683: PUSH
57684: LD_VAR 0 3
57688: PPUSH
57689: CALL_OW 301
57693: OR
57694: IFFALSE 57571
// if un then
57696: LD_VAR 0 3
57700: IFFALSE 57711
// RemoveUnit ( un ) ;
57702: LD_VAR 0 3
57706: PPUSH
57707: CALL_OW 64
// end ;
57711: PPOPN 3
57713: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
57714: LD_EXP 69
57718: IFFALSE 57834
57720: GO 57722
57722: DISABLE
57723: LD_INT 0
57725: PPUSH
57726: PPUSH
57727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57728: LD_ADDR_VAR 0 2
57732: PUSH
57733: LD_INT 81
57735: PUSH
57736: LD_OWVAR 2
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 21
57747: PUSH
57748: LD_INT 1
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PPUSH
57759: CALL_OW 69
57763: ST_TO_ADDR
// ToLua ( playComputer() ) ;
57764: LD_STRING playComputer()
57766: PPUSH
57767: CALL_OW 559
// if not tmp then
57771: LD_VAR 0 2
57775: NOT
57776: IFFALSE 57780
// exit ;
57778: GO 57834
// for i in tmp do
57780: LD_ADDR_VAR 0 1
57784: PUSH
57785: LD_VAR 0 2
57789: PUSH
57790: FOR_IN
57791: IFFALSE 57832
// for j := 1 to 4 do
57793: LD_ADDR_VAR 0 3
57797: PUSH
57798: DOUBLE
57799: LD_INT 1
57801: DEC
57802: ST_TO_ADDR
57803: LD_INT 4
57805: PUSH
57806: FOR_TO
57807: IFFALSE 57828
// SetSkill ( i , j , 10 ) ;
57809: LD_VAR 0 1
57813: PPUSH
57814: LD_VAR 0 3
57818: PPUSH
57819: LD_INT 10
57821: PPUSH
57822: CALL_OW 237
57826: GO 57806
57828: POP
57829: POP
57830: GO 57790
57832: POP
57833: POP
// end ;
57834: PPOPN 3
57836: END
// every 0 0$1 trigger s30 do var i , tmp ;
57837: LD_EXP 70
57841: IFFALSE 57910
57843: GO 57845
57845: DISABLE
57846: LD_INT 0
57848: PPUSH
57849: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57850: LD_ADDR_VAR 0 2
57854: PUSH
57855: LD_INT 22
57857: PUSH
57858: LD_OWVAR 2
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PPUSH
57867: CALL_OW 69
57871: ST_TO_ADDR
// if not tmp then
57872: LD_VAR 0 2
57876: NOT
57877: IFFALSE 57881
// exit ;
57879: GO 57910
// for i in tmp do
57881: LD_ADDR_VAR 0 1
57885: PUSH
57886: LD_VAR 0 2
57890: PUSH
57891: FOR_IN
57892: IFFALSE 57908
// SetLives ( i , 300 ) ;
57894: LD_VAR 0 1
57898: PPUSH
57899: LD_INT 300
57901: PPUSH
57902: CALL_OW 234
57906: GO 57891
57908: POP
57909: POP
// end ;
57910: PPOPN 2
57912: END
// every 0 0$1 trigger s60 do var i , tmp ;
57913: LD_EXP 71
57917: IFFALSE 57986
57919: GO 57921
57921: DISABLE
57922: LD_INT 0
57924: PPUSH
57925: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57926: LD_ADDR_VAR 0 2
57930: PUSH
57931: LD_INT 22
57933: PUSH
57934: LD_OWVAR 2
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PPUSH
57943: CALL_OW 69
57947: ST_TO_ADDR
// if not tmp then
57948: LD_VAR 0 2
57952: NOT
57953: IFFALSE 57957
// exit ;
57955: GO 57986
// for i in tmp do
57957: LD_ADDR_VAR 0 1
57961: PUSH
57962: LD_VAR 0 2
57966: PUSH
57967: FOR_IN
57968: IFFALSE 57984
// SetLives ( i , 600 ) ;
57970: LD_VAR 0 1
57974: PPUSH
57975: LD_INT 600
57977: PPUSH
57978: CALL_OW 234
57982: GO 57967
57984: POP
57985: POP
// end ;
57986: PPOPN 2
57988: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57989: LD_INT 0
57991: PPUSH
// case cmd of 301 :
57992: LD_VAR 0 1
57996: PUSH
57997: LD_INT 301
57999: DOUBLE
58000: EQUAL
58001: IFTRUE 58005
58003: GO 58037
58005: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
58006: LD_VAR 0 6
58010: PPUSH
58011: LD_VAR 0 7
58015: PPUSH
58016: LD_VAR 0 8
58020: PPUSH
58021: LD_VAR 0 4
58025: PPUSH
58026: LD_VAR 0 5
58030: PPUSH
58031: CALL 59246 0 5
58035: GO 58158
58037: LD_INT 302
58039: DOUBLE
58040: EQUAL
58041: IFTRUE 58045
58043: GO 58082
58045: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
58046: LD_VAR 0 6
58050: PPUSH
58051: LD_VAR 0 7
58055: PPUSH
58056: LD_VAR 0 8
58060: PPUSH
58061: LD_VAR 0 9
58065: PPUSH
58066: LD_VAR 0 4
58070: PPUSH
58071: LD_VAR 0 5
58075: PPUSH
58076: CALL 59337 0 6
58080: GO 58158
58082: LD_INT 303
58084: DOUBLE
58085: EQUAL
58086: IFTRUE 58090
58088: GO 58127
58090: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
58091: LD_VAR 0 6
58095: PPUSH
58096: LD_VAR 0 7
58100: PPUSH
58101: LD_VAR 0 8
58105: PPUSH
58106: LD_VAR 0 9
58110: PPUSH
58111: LD_VAR 0 4
58115: PPUSH
58116: LD_VAR 0 5
58120: PPUSH
58121: CALL 58163 0 6
58125: GO 58158
58127: LD_INT 304
58129: DOUBLE
58130: EQUAL
58131: IFTRUE 58135
58133: GO 58157
58135: POP
// hHackTeleport ( unit , x , y ) ; end ;
58136: LD_VAR 0 2
58140: PPUSH
58141: LD_VAR 0 4
58145: PPUSH
58146: LD_VAR 0 5
58150: PPUSH
58151: CALL 59930 0 3
58155: GO 58158
58157: POP
// end ;
58158: LD_VAR 0 12
58162: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
58163: LD_INT 0
58165: PPUSH
58166: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
58167: LD_VAR 0 1
58171: PUSH
58172: LD_INT 1
58174: LESS
58175: PUSH
58176: LD_VAR 0 1
58180: PUSH
58181: LD_INT 3
58183: GREATER
58184: OR
58185: PUSH
58186: LD_VAR 0 5
58190: PPUSH
58191: LD_VAR 0 6
58195: PPUSH
58196: CALL_OW 428
58200: OR
58201: IFFALSE 58205
// exit ;
58203: GO 58933
// uc_side := your_side ;
58205: LD_ADDR_OWVAR 20
58209: PUSH
58210: LD_OWVAR 2
58214: ST_TO_ADDR
// uc_nation := nation ;
58215: LD_ADDR_OWVAR 21
58219: PUSH
58220: LD_VAR 0 1
58224: ST_TO_ADDR
// bc_level = 1 ;
58225: LD_ADDR_OWVAR 43
58229: PUSH
58230: LD_INT 1
58232: ST_TO_ADDR
// case btype of 1 :
58233: LD_VAR 0 2
58237: PUSH
58238: LD_INT 1
58240: DOUBLE
58241: EQUAL
58242: IFTRUE 58246
58244: GO 58257
58246: POP
// bc_type := b_depot ; 2 :
58247: LD_ADDR_OWVAR 42
58251: PUSH
58252: LD_INT 0
58254: ST_TO_ADDR
58255: GO 58877
58257: LD_INT 2
58259: DOUBLE
58260: EQUAL
58261: IFTRUE 58265
58263: GO 58276
58265: POP
// bc_type := b_warehouse ; 3 :
58266: LD_ADDR_OWVAR 42
58270: PUSH
58271: LD_INT 1
58273: ST_TO_ADDR
58274: GO 58877
58276: LD_INT 3
58278: DOUBLE
58279: EQUAL
58280: IFTRUE 58284
58282: GO 58295
58284: POP
// bc_type := b_lab ; 4 .. 9 :
58285: LD_ADDR_OWVAR 42
58289: PUSH
58290: LD_INT 6
58292: ST_TO_ADDR
58293: GO 58877
58295: LD_INT 4
58297: DOUBLE
58298: GREATEREQUAL
58299: IFFALSE 58307
58301: LD_INT 9
58303: DOUBLE
58304: LESSEQUAL
58305: IFTRUE 58309
58307: GO 58369
58309: POP
// begin bc_type := b_lab_half ;
58310: LD_ADDR_OWVAR 42
58314: PUSH
58315: LD_INT 7
58317: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
58318: LD_ADDR_OWVAR 44
58322: PUSH
58323: LD_INT 10
58325: PUSH
58326: LD_INT 11
58328: PUSH
58329: LD_INT 12
58331: PUSH
58332: LD_INT 15
58334: PUSH
58335: LD_INT 14
58337: PUSH
58338: LD_INT 13
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: PUSH
58349: LD_VAR 0 2
58353: PUSH
58354: LD_INT 3
58356: MINUS
58357: ARRAY
58358: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
58359: LD_ADDR_OWVAR 45
58363: PUSH
58364: LD_INT 9
58366: ST_TO_ADDR
// end ; 10 .. 13 :
58367: GO 58877
58369: LD_INT 10
58371: DOUBLE
58372: GREATEREQUAL
58373: IFFALSE 58381
58375: LD_INT 13
58377: DOUBLE
58378: LESSEQUAL
58379: IFTRUE 58383
58381: GO 58460
58383: POP
// begin bc_type := b_lab_full ;
58384: LD_ADDR_OWVAR 42
58388: PUSH
58389: LD_INT 8
58391: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
58392: LD_ADDR_OWVAR 44
58396: PUSH
58397: LD_INT 10
58399: PUSH
58400: LD_INT 12
58402: PUSH
58403: LD_INT 14
58405: PUSH
58406: LD_INT 13
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: PUSH
58415: LD_VAR 0 2
58419: PUSH
58420: LD_INT 9
58422: MINUS
58423: ARRAY
58424: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
58425: LD_ADDR_OWVAR 45
58429: PUSH
58430: LD_INT 11
58432: PUSH
58433: LD_INT 15
58435: PUSH
58436: LD_INT 12
58438: PUSH
58439: LD_INT 15
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: PUSH
58448: LD_VAR 0 2
58452: PUSH
58453: LD_INT 9
58455: MINUS
58456: ARRAY
58457: ST_TO_ADDR
// end ; 14 :
58458: GO 58877
58460: LD_INT 14
58462: DOUBLE
58463: EQUAL
58464: IFTRUE 58468
58466: GO 58479
58468: POP
// bc_type := b_workshop ; 15 :
58469: LD_ADDR_OWVAR 42
58473: PUSH
58474: LD_INT 2
58476: ST_TO_ADDR
58477: GO 58877
58479: LD_INT 15
58481: DOUBLE
58482: EQUAL
58483: IFTRUE 58487
58485: GO 58498
58487: POP
// bc_type := b_factory ; 16 :
58488: LD_ADDR_OWVAR 42
58492: PUSH
58493: LD_INT 3
58495: ST_TO_ADDR
58496: GO 58877
58498: LD_INT 16
58500: DOUBLE
58501: EQUAL
58502: IFTRUE 58506
58504: GO 58517
58506: POP
// bc_type := b_ext_gun ; 17 :
58507: LD_ADDR_OWVAR 42
58511: PUSH
58512: LD_INT 17
58514: ST_TO_ADDR
58515: GO 58877
58517: LD_INT 17
58519: DOUBLE
58520: EQUAL
58521: IFTRUE 58525
58523: GO 58553
58525: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
58526: LD_ADDR_OWVAR 42
58530: PUSH
58531: LD_INT 19
58533: PUSH
58534: LD_INT 23
58536: PUSH
58537: LD_INT 19
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: LIST
58544: PUSH
58545: LD_VAR 0 1
58549: ARRAY
58550: ST_TO_ADDR
58551: GO 58877
58553: LD_INT 18
58555: DOUBLE
58556: EQUAL
58557: IFTRUE 58561
58559: GO 58572
58561: POP
// bc_type := b_ext_radar ; 19 :
58562: LD_ADDR_OWVAR 42
58566: PUSH
58567: LD_INT 20
58569: ST_TO_ADDR
58570: GO 58877
58572: LD_INT 19
58574: DOUBLE
58575: EQUAL
58576: IFTRUE 58580
58578: GO 58591
58580: POP
// bc_type := b_ext_radio ; 20 :
58581: LD_ADDR_OWVAR 42
58585: PUSH
58586: LD_INT 22
58588: ST_TO_ADDR
58589: GO 58877
58591: LD_INT 20
58593: DOUBLE
58594: EQUAL
58595: IFTRUE 58599
58597: GO 58610
58599: POP
// bc_type := b_ext_siberium ; 21 :
58600: LD_ADDR_OWVAR 42
58604: PUSH
58605: LD_INT 21
58607: ST_TO_ADDR
58608: GO 58877
58610: LD_INT 21
58612: DOUBLE
58613: EQUAL
58614: IFTRUE 58618
58616: GO 58629
58618: POP
// bc_type := b_ext_computer ; 22 :
58619: LD_ADDR_OWVAR 42
58623: PUSH
58624: LD_INT 24
58626: ST_TO_ADDR
58627: GO 58877
58629: LD_INT 22
58631: DOUBLE
58632: EQUAL
58633: IFTRUE 58637
58635: GO 58648
58637: POP
// bc_type := b_ext_track ; 23 :
58638: LD_ADDR_OWVAR 42
58642: PUSH
58643: LD_INT 16
58645: ST_TO_ADDR
58646: GO 58877
58648: LD_INT 23
58650: DOUBLE
58651: EQUAL
58652: IFTRUE 58656
58654: GO 58667
58656: POP
// bc_type := b_ext_laser ; 24 :
58657: LD_ADDR_OWVAR 42
58661: PUSH
58662: LD_INT 25
58664: ST_TO_ADDR
58665: GO 58877
58667: LD_INT 24
58669: DOUBLE
58670: EQUAL
58671: IFTRUE 58675
58673: GO 58686
58675: POP
// bc_type := b_control_tower ; 25 :
58676: LD_ADDR_OWVAR 42
58680: PUSH
58681: LD_INT 36
58683: ST_TO_ADDR
58684: GO 58877
58686: LD_INT 25
58688: DOUBLE
58689: EQUAL
58690: IFTRUE 58694
58692: GO 58705
58694: POP
// bc_type := b_breastwork ; 26 :
58695: LD_ADDR_OWVAR 42
58699: PUSH
58700: LD_INT 31
58702: ST_TO_ADDR
58703: GO 58877
58705: LD_INT 26
58707: DOUBLE
58708: EQUAL
58709: IFTRUE 58713
58711: GO 58724
58713: POP
// bc_type := b_bunker ; 27 :
58714: LD_ADDR_OWVAR 42
58718: PUSH
58719: LD_INT 32
58721: ST_TO_ADDR
58722: GO 58877
58724: LD_INT 27
58726: DOUBLE
58727: EQUAL
58728: IFTRUE 58732
58730: GO 58743
58732: POP
// bc_type := b_turret ; 28 :
58733: LD_ADDR_OWVAR 42
58737: PUSH
58738: LD_INT 33
58740: ST_TO_ADDR
58741: GO 58877
58743: LD_INT 28
58745: DOUBLE
58746: EQUAL
58747: IFTRUE 58751
58749: GO 58762
58751: POP
// bc_type := b_armoury ; 29 :
58752: LD_ADDR_OWVAR 42
58756: PUSH
58757: LD_INT 4
58759: ST_TO_ADDR
58760: GO 58877
58762: LD_INT 29
58764: DOUBLE
58765: EQUAL
58766: IFTRUE 58770
58768: GO 58781
58770: POP
// bc_type := b_barracks ; 30 :
58771: LD_ADDR_OWVAR 42
58775: PUSH
58776: LD_INT 5
58778: ST_TO_ADDR
58779: GO 58877
58781: LD_INT 30
58783: DOUBLE
58784: EQUAL
58785: IFTRUE 58789
58787: GO 58800
58789: POP
// bc_type := b_solar_power ; 31 :
58790: LD_ADDR_OWVAR 42
58794: PUSH
58795: LD_INT 27
58797: ST_TO_ADDR
58798: GO 58877
58800: LD_INT 31
58802: DOUBLE
58803: EQUAL
58804: IFTRUE 58808
58806: GO 58819
58808: POP
// bc_type := b_oil_power ; 32 :
58809: LD_ADDR_OWVAR 42
58813: PUSH
58814: LD_INT 26
58816: ST_TO_ADDR
58817: GO 58877
58819: LD_INT 32
58821: DOUBLE
58822: EQUAL
58823: IFTRUE 58827
58825: GO 58838
58827: POP
// bc_type := b_siberite_power ; 33 :
58828: LD_ADDR_OWVAR 42
58832: PUSH
58833: LD_INT 28
58835: ST_TO_ADDR
58836: GO 58877
58838: LD_INT 33
58840: DOUBLE
58841: EQUAL
58842: IFTRUE 58846
58844: GO 58857
58846: POP
// bc_type := b_oil_mine ; 34 :
58847: LD_ADDR_OWVAR 42
58851: PUSH
58852: LD_INT 29
58854: ST_TO_ADDR
58855: GO 58877
58857: LD_INT 34
58859: DOUBLE
58860: EQUAL
58861: IFTRUE 58865
58863: GO 58876
58865: POP
// bc_type := b_siberite_mine ; end ;
58866: LD_ADDR_OWVAR 42
58870: PUSH
58871: LD_INT 30
58873: ST_TO_ADDR
58874: GO 58877
58876: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
58877: LD_ADDR_VAR 0 8
58881: PUSH
58882: LD_VAR 0 5
58886: PPUSH
58887: LD_VAR 0 6
58891: PPUSH
58892: LD_VAR 0 3
58896: PPUSH
58897: CALL_OW 47
58901: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
58902: LD_OWVAR 42
58906: PUSH
58907: LD_INT 32
58909: PUSH
58910: LD_INT 33
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: IN
58917: IFFALSE 58933
// PlaceWeaponTurret ( b , weapon ) ;
58919: LD_VAR 0 8
58923: PPUSH
58924: LD_VAR 0 4
58928: PPUSH
58929: CALL_OW 431
// end ;
58933: LD_VAR 0 7
58937: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
58938: LD_INT 0
58940: PPUSH
58941: PPUSH
58942: PPUSH
58943: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58944: LD_ADDR_VAR 0 4
58948: PUSH
58949: LD_INT 22
58951: PUSH
58952: LD_OWVAR 2
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 2
58963: PUSH
58964: LD_INT 30
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 30
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: LIST
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PPUSH
58993: CALL_OW 69
58997: ST_TO_ADDR
// if not tmp then
58998: LD_VAR 0 4
59002: NOT
59003: IFFALSE 59007
// exit ;
59005: GO 59066
// for i in tmp do
59007: LD_ADDR_VAR 0 2
59011: PUSH
59012: LD_VAR 0 4
59016: PUSH
59017: FOR_IN
59018: IFFALSE 59064
// for j = 1 to 3 do
59020: LD_ADDR_VAR 0 3
59024: PUSH
59025: DOUBLE
59026: LD_INT 1
59028: DEC
59029: ST_TO_ADDR
59030: LD_INT 3
59032: PUSH
59033: FOR_TO
59034: IFFALSE 59060
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
59036: LD_VAR 0 2
59040: PPUSH
59041: CALL_OW 274
59045: PPUSH
59046: LD_VAR 0 3
59050: PPUSH
59051: LD_INT 99999
59053: PPUSH
59054: CALL_OW 277
59058: GO 59033
59060: POP
59061: POP
59062: GO 59017
59064: POP
59065: POP
// end ;
59066: LD_VAR 0 1
59070: RET
// export function hHackSetLevel10 ; var i , j ; begin
59071: LD_INT 0
59073: PPUSH
59074: PPUSH
59075: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59076: LD_ADDR_VAR 0 2
59080: PUSH
59081: LD_INT 21
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PPUSH
59091: CALL_OW 69
59095: PUSH
59096: FOR_IN
59097: IFFALSE 59149
// if IsSelected ( i ) then
59099: LD_VAR 0 2
59103: PPUSH
59104: CALL_OW 306
59108: IFFALSE 59147
// begin for j := 1 to 4 do
59110: LD_ADDR_VAR 0 3
59114: PUSH
59115: DOUBLE
59116: LD_INT 1
59118: DEC
59119: ST_TO_ADDR
59120: LD_INT 4
59122: PUSH
59123: FOR_TO
59124: IFFALSE 59145
// SetSkill ( i , j , 10 ) ;
59126: LD_VAR 0 2
59130: PPUSH
59131: LD_VAR 0 3
59135: PPUSH
59136: LD_INT 10
59138: PPUSH
59139: CALL_OW 237
59143: GO 59123
59145: POP
59146: POP
// end ;
59147: GO 59096
59149: POP
59150: POP
// end ;
59151: LD_VAR 0 1
59155: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
59156: LD_INT 0
59158: PPUSH
59159: PPUSH
59160: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
59161: LD_ADDR_VAR 0 2
59165: PUSH
59166: LD_INT 22
59168: PUSH
59169: LD_OWVAR 2
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 21
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PPUSH
59192: CALL_OW 69
59196: PUSH
59197: FOR_IN
59198: IFFALSE 59239
// begin for j := 1 to 4 do
59200: LD_ADDR_VAR 0 3
59204: PUSH
59205: DOUBLE
59206: LD_INT 1
59208: DEC
59209: ST_TO_ADDR
59210: LD_INT 4
59212: PUSH
59213: FOR_TO
59214: IFFALSE 59235
// SetSkill ( i , j , 10 ) ;
59216: LD_VAR 0 2
59220: PPUSH
59221: LD_VAR 0 3
59225: PPUSH
59226: LD_INT 10
59228: PPUSH
59229: CALL_OW 237
59233: GO 59213
59235: POP
59236: POP
// end ;
59237: GO 59197
59239: POP
59240: POP
// end ;
59241: LD_VAR 0 1
59245: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
59246: LD_INT 0
59248: PPUSH
// uc_side := your_side ;
59249: LD_ADDR_OWVAR 20
59253: PUSH
59254: LD_OWVAR 2
59258: ST_TO_ADDR
// uc_nation := nation ;
59259: LD_ADDR_OWVAR 21
59263: PUSH
59264: LD_VAR 0 1
59268: ST_TO_ADDR
// InitHc ;
59269: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
59273: LD_INT 0
59275: PPUSH
59276: LD_VAR 0 2
59280: PPUSH
59281: LD_VAR 0 3
59285: PPUSH
59286: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
59290: LD_VAR 0 4
59294: PPUSH
59295: LD_VAR 0 5
59299: PPUSH
59300: CALL_OW 428
59304: PUSH
59305: LD_INT 0
59307: EQUAL
59308: IFFALSE 59332
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
59310: CALL_OW 44
59314: PPUSH
59315: LD_VAR 0 4
59319: PPUSH
59320: LD_VAR 0 5
59324: PPUSH
59325: LD_INT 1
59327: PPUSH
59328: CALL_OW 48
// end ;
59332: LD_VAR 0 6
59336: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
59337: LD_INT 0
59339: PPUSH
59340: PPUSH
// uc_side := your_side ;
59341: LD_ADDR_OWVAR 20
59345: PUSH
59346: LD_OWVAR 2
59350: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
59351: LD_VAR 0 1
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: LD_INT 2
59361: PUSH
59362: LD_INT 3
59364: PUSH
59365: LD_INT 4
59367: PUSH
59368: LD_INT 5
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: IN
59378: IFFALSE 59390
// uc_nation := nation_american else
59380: LD_ADDR_OWVAR 21
59384: PUSH
59385: LD_INT 1
59387: ST_TO_ADDR
59388: GO 59433
// if chassis in [ 11 , 12 , 13 , 14 ] then
59390: LD_VAR 0 1
59394: PUSH
59395: LD_INT 11
59397: PUSH
59398: LD_INT 12
59400: PUSH
59401: LD_INT 13
59403: PUSH
59404: LD_INT 14
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: IN
59413: IFFALSE 59425
// uc_nation := nation_arabian else
59415: LD_ADDR_OWVAR 21
59419: PUSH
59420: LD_INT 2
59422: ST_TO_ADDR
59423: GO 59433
// uc_nation := nation_russian ;
59425: LD_ADDR_OWVAR 21
59429: PUSH
59430: LD_INT 3
59432: ST_TO_ADDR
// vc_chassis := chassis ;
59433: LD_ADDR_OWVAR 37
59437: PUSH
59438: LD_VAR 0 1
59442: ST_TO_ADDR
// vc_engine := engine ;
59443: LD_ADDR_OWVAR 39
59447: PUSH
59448: LD_VAR 0 2
59452: ST_TO_ADDR
// vc_control := control ;
59453: LD_ADDR_OWVAR 38
59457: PUSH
59458: LD_VAR 0 3
59462: ST_TO_ADDR
// vc_weapon := weapon ;
59463: LD_ADDR_OWVAR 40
59467: PUSH
59468: LD_VAR 0 4
59472: ST_TO_ADDR
// un := CreateVehicle ;
59473: LD_ADDR_VAR 0 8
59477: PUSH
59478: CALL_OW 45
59482: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
59483: LD_VAR 0 8
59487: PPUSH
59488: LD_INT 0
59490: PPUSH
59491: LD_INT 5
59493: PPUSH
59494: CALL_OW 12
59498: PPUSH
59499: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
59503: LD_VAR 0 8
59507: PPUSH
59508: LD_VAR 0 5
59512: PPUSH
59513: LD_VAR 0 6
59517: PPUSH
59518: LD_INT 1
59520: PPUSH
59521: CALL_OW 48
// end ;
59525: LD_VAR 0 7
59529: RET
// export hInvincible ; every 1 do
59530: GO 59532
59532: DISABLE
// hInvincible := [ ] ;
59533: LD_ADDR_EXP 72
59537: PUSH
59538: EMPTY
59539: ST_TO_ADDR
59540: END
// every 10 do var i ;
59541: GO 59543
59543: DISABLE
59544: LD_INT 0
59546: PPUSH
// begin enable ;
59547: ENABLE
// if not hInvincible then
59548: LD_EXP 72
59552: NOT
59553: IFFALSE 59557
// exit ;
59555: GO 59601
// for i in hInvincible do
59557: LD_ADDR_VAR 0 1
59561: PUSH
59562: LD_EXP 72
59566: PUSH
59567: FOR_IN
59568: IFFALSE 59599
// if GetLives ( i ) < 1000 then
59570: LD_VAR 0 1
59574: PPUSH
59575: CALL_OW 256
59579: PUSH
59580: LD_INT 1000
59582: LESS
59583: IFFALSE 59597
// SetLives ( i , 1000 ) ;
59585: LD_VAR 0 1
59589: PPUSH
59590: LD_INT 1000
59592: PPUSH
59593: CALL_OW 234
59597: GO 59567
59599: POP
59600: POP
// end ;
59601: PPOPN 1
59603: END
// export function hHackInvincible ; var i ; begin
59604: LD_INT 0
59606: PPUSH
59607: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
59608: LD_ADDR_VAR 0 2
59612: PUSH
59613: LD_INT 2
59615: PUSH
59616: LD_INT 21
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 21
59628: PUSH
59629: LD_INT 2
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: LIST
59640: PPUSH
59641: CALL_OW 69
59645: PUSH
59646: FOR_IN
59647: IFFALSE 59708
// if IsSelected ( i ) then
59649: LD_VAR 0 2
59653: PPUSH
59654: CALL_OW 306
59658: IFFALSE 59706
// begin if i in hInvincible then
59660: LD_VAR 0 2
59664: PUSH
59665: LD_EXP 72
59669: IN
59670: IFFALSE 59690
// hInvincible := hInvincible diff i else
59672: LD_ADDR_EXP 72
59676: PUSH
59677: LD_EXP 72
59681: PUSH
59682: LD_VAR 0 2
59686: DIFF
59687: ST_TO_ADDR
59688: GO 59706
// hInvincible := hInvincible union i ;
59690: LD_ADDR_EXP 72
59694: PUSH
59695: LD_EXP 72
59699: PUSH
59700: LD_VAR 0 2
59704: UNION
59705: ST_TO_ADDR
// end ;
59706: GO 59646
59708: POP
59709: POP
// end ;
59710: LD_VAR 0 1
59714: RET
// export function hHackInvisible ; var i , j ; begin
59715: LD_INT 0
59717: PPUSH
59718: PPUSH
59719: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59720: LD_ADDR_VAR 0 2
59724: PUSH
59725: LD_INT 21
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PPUSH
59735: CALL_OW 69
59739: PUSH
59740: FOR_IN
59741: IFFALSE 59765
// if IsSelected ( i ) then
59743: LD_VAR 0 2
59747: PPUSH
59748: CALL_OW 306
59752: IFFALSE 59763
// ComForceInvisible ( i ) ;
59754: LD_VAR 0 2
59758: PPUSH
59759: CALL_OW 496
59763: GO 59740
59765: POP
59766: POP
// end ;
59767: LD_VAR 0 1
59771: RET
// export function hHackChangeYourSide ; begin
59772: LD_INT 0
59774: PPUSH
// if your_side = 8 then
59775: LD_OWVAR 2
59779: PUSH
59780: LD_INT 8
59782: EQUAL
59783: IFFALSE 59795
// your_side := 0 else
59785: LD_ADDR_OWVAR 2
59789: PUSH
59790: LD_INT 0
59792: ST_TO_ADDR
59793: GO 59809
// your_side := your_side + 1 ;
59795: LD_ADDR_OWVAR 2
59799: PUSH
59800: LD_OWVAR 2
59804: PUSH
59805: LD_INT 1
59807: PLUS
59808: ST_TO_ADDR
// end ;
59809: LD_VAR 0 1
59813: RET
// export function hHackChangeUnitSide ; var i , j ; begin
59814: LD_INT 0
59816: PPUSH
59817: PPUSH
59818: PPUSH
// for i in all_units do
59819: LD_ADDR_VAR 0 2
59823: PUSH
59824: LD_OWVAR 3
59828: PUSH
59829: FOR_IN
59830: IFFALSE 59908
// if IsSelected ( i ) then
59832: LD_VAR 0 2
59836: PPUSH
59837: CALL_OW 306
59841: IFFALSE 59906
// begin j := GetSide ( i ) ;
59843: LD_ADDR_VAR 0 3
59847: PUSH
59848: LD_VAR 0 2
59852: PPUSH
59853: CALL_OW 255
59857: ST_TO_ADDR
// if j = 8 then
59858: LD_VAR 0 3
59862: PUSH
59863: LD_INT 8
59865: EQUAL
59866: IFFALSE 59878
// j := 0 else
59868: LD_ADDR_VAR 0 3
59872: PUSH
59873: LD_INT 0
59875: ST_TO_ADDR
59876: GO 59892
// j := j + 1 ;
59878: LD_ADDR_VAR 0 3
59882: PUSH
59883: LD_VAR 0 3
59887: PUSH
59888: LD_INT 1
59890: PLUS
59891: ST_TO_ADDR
// SetSide ( i , j ) ;
59892: LD_VAR 0 2
59896: PPUSH
59897: LD_VAR 0 3
59901: PPUSH
59902: CALL_OW 235
// end ;
59906: GO 59829
59908: POP
59909: POP
// end ;
59910: LD_VAR 0 1
59914: RET
// export function hHackFog ; begin
59915: LD_INT 0
59917: PPUSH
// FogOff ( true ) ;
59918: LD_INT 1
59920: PPUSH
59921: CALL_OW 344
// end ;
59925: LD_VAR 0 1
59929: RET
// export function hHackTeleport ( unit , x , y ) ; begin
59930: LD_INT 0
59932: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
59933: LD_VAR 0 1
59937: PPUSH
59938: LD_VAR 0 2
59942: PPUSH
59943: LD_VAR 0 3
59947: PPUSH
59948: LD_INT 1
59950: PPUSH
59951: LD_INT 1
59953: PPUSH
59954: CALL_OW 483
// CenterOnXY ( x , y ) ;
59958: LD_VAR 0 2
59962: PPUSH
59963: LD_VAR 0 3
59967: PPUSH
59968: CALL_OW 84
// end ;
59972: LD_VAR 0 4
59976: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59977: LD_INT 0
59979: PPUSH
59980: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59981: LD_VAR 0 1
59985: NOT
59986: PUSH
59987: LD_VAR 0 2
59991: PPUSH
59992: LD_VAR 0 3
59996: PPUSH
59997: CALL_OW 488
60001: NOT
60002: OR
60003: PUSH
60004: LD_VAR 0 1
60008: PPUSH
60009: CALL_OW 266
60013: PUSH
60014: LD_INT 3
60016: NONEQUAL
60017: PUSH
60018: LD_VAR 0 1
60022: PPUSH
60023: CALL_OW 247
60027: PUSH
60028: LD_INT 1
60030: EQUAL
60031: NOT
60032: AND
60033: OR
60034: IFFALSE 60038
// exit ;
60036: GO 60187
// if GetType ( factory ) = unit_human then
60038: LD_VAR 0 1
60042: PPUSH
60043: CALL_OW 247
60047: PUSH
60048: LD_INT 1
60050: EQUAL
60051: IFFALSE 60068
// factory := IsInUnit ( factory ) ;
60053: LD_ADDR_VAR 0 1
60057: PUSH
60058: LD_VAR 0 1
60062: PPUSH
60063: CALL_OW 310
60067: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60068: LD_VAR 0 1
60072: PPUSH
60073: CALL_OW 266
60077: PUSH
60078: LD_INT 3
60080: NONEQUAL
60081: IFFALSE 60085
// exit ;
60083: GO 60187
// if HexInfo ( x , y ) = factory then
60085: LD_VAR 0 2
60089: PPUSH
60090: LD_VAR 0 3
60094: PPUSH
60095: CALL_OW 428
60099: PUSH
60100: LD_VAR 0 1
60104: EQUAL
60105: IFFALSE 60132
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
60107: LD_ADDR_EXP 73
60111: PUSH
60112: LD_EXP 73
60116: PPUSH
60117: LD_VAR 0 1
60121: PPUSH
60122: LD_INT 0
60124: PPUSH
60125: CALL_OW 1
60129: ST_TO_ADDR
60130: GO 60183
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
60132: LD_ADDR_EXP 73
60136: PUSH
60137: LD_EXP 73
60141: PPUSH
60142: LD_VAR 0 1
60146: PPUSH
60147: LD_VAR 0 1
60151: PPUSH
60152: CALL_OW 255
60156: PUSH
60157: LD_VAR 0 1
60161: PUSH
60162: LD_VAR 0 2
60166: PUSH
60167: LD_VAR 0 3
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: PPUSH
60178: CALL_OW 1
60182: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60183: CALL 60192 0 0
// end ;
60187: LD_VAR 0 4
60191: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
60192: LD_INT 0
60194: PPUSH
60195: PPUSH
60196: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60197: LD_STRING resetFactoryWaypoint();
60199: PPUSH
60200: CALL_OW 559
// if factoryWaypoints then
60204: LD_EXP 73
60208: IFFALSE 60334
// begin list := PrepareArray ( factoryWaypoints ) ;
60210: LD_ADDR_VAR 0 3
60214: PUSH
60215: LD_EXP 73
60219: PPUSH
60220: CALL 42219 0 1
60224: ST_TO_ADDR
// for i := 1 to list do
60225: LD_ADDR_VAR 0 2
60229: PUSH
60230: DOUBLE
60231: LD_INT 1
60233: DEC
60234: ST_TO_ADDR
60235: LD_VAR 0 3
60239: PUSH
60240: FOR_TO
60241: IFFALSE 60332
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60243: LD_STRING setFactoryWaypointXY(
60245: PUSH
60246: LD_VAR 0 3
60250: PUSH
60251: LD_VAR 0 2
60255: ARRAY
60256: PUSH
60257: LD_INT 1
60259: ARRAY
60260: STR
60261: PUSH
60262: LD_STRING ,
60264: STR
60265: PUSH
60266: LD_VAR 0 3
60270: PUSH
60271: LD_VAR 0 2
60275: ARRAY
60276: PUSH
60277: LD_INT 2
60279: ARRAY
60280: STR
60281: PUSH
60282: LD_STRING ,
60284: STR
60285: PUSH
60286: LD_VAR 0 3
60290: PUSH
60291: LD_VAR 0 2
60295: ARRAY
60296: PUSH
60297: LD_INT 3
60299: ARRAY
60300: STR
60301: PUSH
60302: LD_STRING ,
60304: STR
60305: PUSH
60306: LD_VAR 0 3
60310: PUSH
60311: LD_VAR 0 2
60315: ARRAY
60316: PUSH
60317: LD_INT 4
60319: ARRAY
60320: STR
60321: PUSH
60322: LD_STRING )
60324: STR
60325: PPUSH
60326: CALL_OW 559
60330: GO 60240
60332: POP
60333: POP
// end ; end ;
60334: LD_VAR 0 1
60338: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
60339: LD_INT 0
60341: PPUSH
// if HexInfo ( x , y ) = warehouse then
60342: LD_VAR 0 2
60346: PPUSH
60347: LD_VAR 0 3
60351: PPUSH
60352: CALL_OW 428
60356: PUSH
60357: LD_VAR 0 1
60361: EQUAL
60362: IFFALSE 60389
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60364: LD_ADDR_EXP 74
60368: PUSH
60369: LD_EXP 74
60373: PPUSH
60374: LD_VAR 0 1
60378: PPUSH
60379: LD_INT 0
60381: PPUSH
60382: CALL_OW 1
60386: ST_TO_ADDR
60387: GO 60440
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60389: LD_ADDR_EXP 74
60393: PUSH
60394: LD_EXP 74
60398: PPUSH
60399: LD_VAR 0 1
60403: PPUSH
60404: LD_VAR 0 1
60408: PPUSH
60409: CALL_OW 255
60413: PUSH
60414: LD_VAR 0 1
60418: PUSH
60419: LD_VAR 0 2
60423: PUSH
60424: LD_VAR 0 3
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: PPUSH
60435: CALL_OW 1
60439: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60440: CALL 60449 0 0
// end ;
60444: LD_VAR 0 4
60448: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60449: LD_INT 0
60451: PPUSH
60452: PPUSH
60453: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60454: LD_STRING resetWarehouseGatheringPoints();
60456: PPUSH
60457: CALL_OW 559
// if warehouseGatheringPoints then
60461: LD_EXP 74
60465: IFFALSE 60591
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60467: LD_ADDR_VAR 0 3
60471: PUSH
60472: LD_EXP 74
60476: PPUSH
60477: CALL 42219 0 1
60481: ST_TO_ADDR
// for i := 1 to list do
60482: LD_ADDR_VAR 0 2
60486: PUSH
60487: DOUBLE
60488: LD_INT 1
60490: DEC
60491: ST_TO_ADDR
60492: LD_VAR 0 3
60496: PUSH
60497: FOR_TO
60498: IFFALSE 60589
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60500: LD_STRING setWarehouseGatheringPointXY(
60502: PUSH
60503: LD_VAR 0 3
60507: PUSH
60508: LD_VAR 0 2
60512: ARRAY
60513: PUSH
60514: LD_INT 1
60516: ARRAY
60517: STR
60518: PUSH
60519: LD_STRING ,
60521: STR
60522: PUSH
60523: LD_VAR 0 3
60527: PUSH
60528: LD_VAR 0 2
60532: ARRAY
60533: PUSH
60534: LD_INT 2
60536: ARRAY
60537: STR
60538: PUSH
60539: LD_STRING ,
60541: STR
60542: PUSH
60543: LD_VAR 0 3
60547: PUSH
60548: LD_VAR 0 2
60552: ARRAY
60553: PUSH
60554: LD_INT 3
60556: ARRAY
60557: STR
60558: PUSH
60559: LD_STRING ,
60561: STR
60562: PUSH
60563: LD_VAR 0 3
60567: PUSH
60568: LD_VAR 0 2
60572: ARRAY
60573: PUSH
60574: LD_INT 4
60576: ARRAY
60577: STR
60578: PUSH
60579: LD_STRING )
60581: STR
60582: PPUSH
60583: CALL_OW 559
60587: GO 60497
60589: POP
60590: POP
// end ; end ;
60591: LD_VAR 0 1
60595: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
60596: LD_EXP 74
60600: IFFALSE 61285
60602: GO 60604
60604: DISABLE
60605: LD_INT 0
60607: PPUSH
60608: PPUSH
60609: PPUSH
60610: PPUSH
60611: PPUSH
60612: PPUSH
60613: PPUSH
60614: PPUSH
60615: PPUSH
// begin enable ;
60616: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
60617: LD_ADDR_VAR 0 3
60621: PUSH
60622: LD_EXP 74
60626: PPUSH
60627: CALL 42219 0 1
60631: ST_TO_ADDR
// if not list then
60632: LD_VAR 0 3
60636: NOT
60637: IFFALSE 60641
// exit ;
60639: GO 61285
// for i := 1 to list do
60641: LD_ADDR_VAR 0 1
60645: PUSH
60646: DOUBLE
60647: LD_INT 1
60649: DEC
60650: ST_TO_ADDR
60651: LD_VAR 0 3
60655: PUSH
60656: FOR_TO
60657: IFFALSE 61283
// begin depot := list [ i ] [ 2 ] ;
60659: LD_ADDR_VAR 0 8
60663: PUSH
60664: LD_VAR 0 3
60668: PUSH
60669: LD_VAR 0 1
60673: ARRAY
60674: PUSH
60675: LD_INT 2
60677: ARRAY
60678: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
60679: LD_ADDR_VAR 0 5
60683: PUSH
60684: LD_VAR 0 3
60688: PUSH
60689: LD_VAR 0 1
60693: ARRAY
60694: PUSH
60695: LD_INT 1
60697: ARRAY
60698: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
60699: LD_VAR 0 8
60703: PPUSH
60704: CALL_OW 301
60708: PUSH
60709: LD_VAR 0 5
60713: PUSH
60714: LD_VAR 0 8
60718: PPUSH
60719: CALL_OW 255
60723: NONEQUAL
60724: OR
60725: IFFALSE 60754
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
60727: LD_ADDR_EXP 74
60731: PUSH
60732: LD_EXP 74
60736: PPUSH
60737: LD_VAR 0 8
60741: PPUSH
60742: LD_INT 0
60744: PPUSH
60745: CALL_OW 1
60749: ST_TO_ADDR
// exit ;
60750: POP
60751: POP
60752: GO 61285
// end ; x := list [ i ] [ 3 ] ;
60754: LD_ADDR_VAR 0 6
60758: PUSH
60759: LD_VAR 0 3
60763: PUSH
60764: LD_VAR 0 1
60768: ARRAY
60769: PUSH
60770: LD_INT 3
60772: ARRAY
60773: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
60774: LD_ADDR_VAR 0 7
60778: PUSH
60779: LD_VAR 0 3
60783: PUSH
60784: LD_VAR 0 1
60788: ARRAY
60789: PUSH
60790: LD_INT 4
60792: ARRAY
60793: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
60794: LD_ADDR_VAR 0 9
60798: PUSH
60799: LD_VAR 0 6
60803: PPUSH
60804: LD_VAR 0 7
60808: PPUSH
60809: LD_INT 16
60811: PPUSH
60812: CALL 40807 0 3
60816: ST_TO_ADDR
// if not cratesNearbyPoint then
60817: LD_VAR 0 9
60821: NOT
60822: IFFALSE 60828
// exit ;
60824: POP
60825: POP
60826: GO 61285
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
60828: LD_ADDR_VAR 0 4
60832: PUSH
60833: LD_INT 22
60835: PUSH
60836: LD_VAR 0 5
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 3
60847: PUSH
60848: LD_INT 60
60850: PUSH
60851: EMPTY
60852: LIST
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 91
60860: PUSH
60861: LD_VAR 0 8
60865: PUSH
60866: LD_INT 6
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: LD_INT 25
60879: PUSH
60880: LD_INT 2
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 25
60889: PUSH
60890: LD_INT 16
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: LIST
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: PPUSH
60908: CALL_OW 69
60912: PUSH
60913: LD_VAR 0 8
60917: PPUSH
60918: CALL_OW 313
60922: PPUSH
60923: LD_INT 3
60925: PUSH
60926: LD_INT 60
60928: PUSH
60929: EMPTY
60930: LIST
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 2
60938: PUSH
60939: LD_INT 25
60941: PUSH
60942: LD_INT 2
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 25
60951: PUSH
60952: LD_INT 16
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: LIST
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PPUSH
60968: CALL_OW 72
60972: UNION
60973: ST_TO_ADDR
// if tmp then
60974: LD_VAR 0 4
60978: IFFALSE 61058
// begin tmp := ShrinkArray ( tmp , 3 ) ;
60980: LD_ADDR_VAR 0 4
60984: PUSH
60985: LD_VAR 0 4
60989: PPUSH
60990: LD_INT 3
60992: PPUSH
60993: CALL 38776 0 2
60997: ST_TO_ADDR
// for j in tmp do
60998: LD_ADDR_VAR 0 2
61002: PUSH
61003: LD_VAR 0 4
61007: PUSH
61008: FOR_IN
61009: IFFALSE 61052
// begin if IsInUnit ( j ) then
61011: LD_VAR 0 2
61015: PPUSH
61016: CALL_OW 310
61020: IFFALSE 61031
// ComExit ( j ) ;
61022: LD_VAR 0 2
61026: PPUSH
61027: CALL 38859 0 1
// AddComCollect ( j , x , y ) ;
61031: LD_VAR 0 2
61035: PPUSH
61036: LD_VAR 0 6
61040: PPUSH
61041: LD_VAR 0 7
61045: PPUSH
61046: CALL_OW 177
// end ;
61050: GO 61008
61052: POP
61053: POP
// exit ;
61054: POP
61055: POP
61056: GO 61285
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
61058: LD_ADDR_VAR 0 4
61062: PUSH
61063: LD_INT 22
61065: PUSH
61066: LD_VAR 0 5
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 91
61077: PUSH
61078: LD_VAR 0 8
61082: PUSH
61083: LD_INT 8
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: LD_INT 34
61096: PUSH
61097: LD_INT 12
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 34
61106: PUSH
61107: LD_INT 51
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 34
61116: PUSH
61117: LD_INT 32
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 34
61126: PUSH
61127: LD_INT 89
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: LIST
61145: PPUSH
61146: CALL_OW 69
61150: ST_TO_ADDR
// if tmp then
61151: LD_VAR 0 4
61155: IFFALSE 61281
// begin for j in tmp do
61157: LD_ADDR_VAR 0 2
61161: PUSH
61162: LD_VAR 0 4
61166: PUSH
61167: FOR_IN
61168: IFFALSE 61279
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
61170: LD_VAR 0 2
61174: PPUSH
61175: CALL_OW 262
61179: PUSH
61180: LD_INT 3
61182: EQUAL
61183: PUSH
61184: LD_VAR 0 2
61188: PPUSH
61189: CALL_OW 261
61193: PUSH
61194: LD_INT 20
61196: GREATER
61197: OR
61198: PUSH
61199: LD_VAR 0 2
61203: PPUSH
61204: CALL_OW 314
61208: NOT
61209: AND
61210: PUSH
61211: LD_VAR 0 2
61215: PPUSH
61216: CALL_OW 263
61220: PUSH
61221: LD_INT 1
61223: NONEQUAL
61224: PUSH
61225: LD_VAR 0 2
61229: PPUSH
61230: CALL_OW 311
61234: OR
61235: AND
61236: IFFALSE 61277
// begin ComCollect ( j , x , y ) ;
61238: LD_VAR 0 2
61242: PPUSH
61243: LD_VAR 0 6
61247: PPUSH
61248: LD_VAR 0 7
61252: PPUSH
61253: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
61257: LD_VAR 0 2
61261: PPUSH
61262: LD_VAR 0 8
61266: PPUSH
61267: CALL_OW 172
// exit ;
61271: POP
61272: POP
61273: POP
61274: POP
61275: GO 61285
// end ;
61277: GO 61167
61279: POP
61280: POP
// end ; end ;
61281: GO 60656
61283: POP
61284: POP
// end ; end_of_file end_of_file
61285: PPOPN 9
61287: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
61288: LD_INT 0
61290: PPUSH
61291: PPUSH
61292: PPUSH
61293: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
61294: LD_VAR 0 1
61298: PPUSH
61299: CALL_OW 264
61303: PUSH
61304: LD_INT 91
61306: EQUAL
61307: IFFALSE 61379
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
61309: LD_INT 68
61311: PPUSH
61312: LD_VAR 0 1
61316: PPUSH
61317: CALL_OW 255
61321: PPUSH
61322: CALL_OW 321
61326: PUSH
61327: LD_INT 2
61329: EQUAL
61330: IFFALSE 61342
// eff := 70 else
61332: LD_ADDR_VAR 0 4
61336: PUSH
61337: LD_INT 70
61339: ST_TO_ADDR
61340: GO 61350
// eff := 30 ;
61342: LD_ADDR_VAR 0 4
61346: PUSH
61347: LD_INT 30
61349: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
61350: LD_VAR 0 1
61354: PPUSH
61355: CALL_OW 250
61359: PPUSH
61360: LD_VAR 0 1
61364: PPUSH
61365: CALL_OW 251
61369: PPUSH
61370: LD_VAR 0 4
61374: PPUSH
61375: CALL_OW 495
// end ; end ;
61379: LD_VAR 0 2
61383: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
61384: LD_INT 0
61386: PPUSH
// end ;
61387: LD_VAR 0 4
61391: RET
// export function SOS_Command ( cmd ) ; begin
61392: LD_INT 0
61394: PPUSH
// end ;
61395: LD_VAR 0 2
61399: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
61400: LD_INT 0
61402: PPUSH
// end ;
61403: LD_VAR 0 6
61407: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
61408: LD_INT 0
61410: PPUSH
61411: PPUSH
// if not vehicle or not factory then
61412: LD_VAR 0 1
61416: NOT
61417: PUSH
61418: LD_VAR 0 2
61422: NOT
61423: OR
61424: IFFALSE 61428
// exit ;
61426: GO 61659
// if factoryWaypoints >= factory then
61428: LD_EXP 73
61432: PUSH
61433: LD_VAR 0 2
61437: GREATEREQUAL
61438: IFFALSE 61659
// if factoryWaypoints [ factory ] then
61440: LD_EXP 73
61444: PUSH
61445: LD_VAR 0 2
61449: ARRAY
61450: IFFALSE 61659
// begin if GetControl ( vehicle ) = control_manual then
61452: LD_VAR 0 1
61456: PPUSH
61457: CALL_OW 263
61461: PUSH
61462: LD_INT 1
61464: EQUAL
61465: IFFALSE 61546
// begin driver := IsDrivenBy ( vehicle ) ;
61467: LD_ADDR_VAR 0 4
61471: PUSH
61472: LD_VAR 0 1
61476: PPUSH
61477: CALL_OW 311
61481: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61482: LD_VAR 0 4
61486: PPUSH
61487: LD_EXP 73
61491: PUSH
61492: LD_VAR 0 2
61496: ARRAY
61497: PUSH
61498: LD_INT 3
61500: ARRAY
61501: PPUSH
61502: LD_EXP 73
61506: PUSH
61507: LD_VAR 0 2
61511: ARRAY
61512: PUSH
61513: LD_INT 4
61515: ARRAY
61516: PPUSH
61517: CALL_OW 171
// AddComExitVehicle ( driver ) ;
61521: LD_VAR 0 4
61525: PPUSH
61526: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
61530: LD_VAR 0 4
61534: PPUSH
61535: LD_VAR 0 2
61539: PPUSH
61540: CALL_OW 180
// end else
61544: GO 61659
// if GetControl ( vehicle ) = control_remote then
61546: LD_VAR 0 1
61550: PPUSH
61551: CALL_OW 263
61555: PUSH
61556: LD_INT 2
61558: EQUAL
61559: IFFALSE 61620
// begin wait ( 0 0$2 ) ;
61561: LD_INT 70
61563: PPUSH
61564: CALL_OW 67
// if Connect ( vehicle ) then
61568: LD_VAR 0 1
61572: PPUSH
61573: CALL 9080 0 1
61577: IFFALSE 61618
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61579: LD_VAR 0 1
61583: PPUSH
61584: LD_EXP 73
61588: PUSH
61589: LD_VAR 0 2
61593: ARRAY
61594: PUSH
61595: LD_INT 3
61597: ARRAY
61598: PPUSH
61599: LD_EXP 73
61603: PUSH
61604: LD_VAR 0 2
61608: ARRAY
61609: PUSH
61610: LD_INT 4
61612: ARRAY
61613: PPUSH
61614: CALL_OW 171
// end else
61618: GO 61659
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61620: LD_VAR 0 1
61624: PPUSH
61625: LD_EXP 73
61629: PUSH
61630: LD_VAR 0 2
61634: ARRAY
61635: PUSH
61636: LD_INT 3
61638: ARRAY
61639: PPUSH
61640: LD_EXP 73
61644: PUSH
61645: LD_VAR 0 2
61649: ARRAY
61650: PUSH
61651: LD_INT 4
61653: ARRAY
61654: PPUSH
61655: CALL_OW 171
// end ; end ;
61659: LD_VAR 0 3
61663: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
61664: LD_INT 0
61666: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
61667: LD_VAR 0 1
61671: PUSH
61672: LD_INT 250
61674: EQUAL
61675: PUSH
61676: LD_VAR 0 2
61680: PPUSH
61681: CALL_OW 264
61685: PUSH
61686: LD_INT 81
61688: EQUAL
61689: AND
61690: IFFALSE 61711
// MinerPlaceMine ( unit , x , y ) ;
61692: LD_VAR 0 2
61696: PPUSH
61697: LD_VAR 0 4
61701: PPUSH
61702: LD_VAR 0 5
61706: PPUSH
61707: CALL 64096 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
61711: LD_VAR 0 1
61715: PUSH
61716: LD_INT 251
61718: EQUAL
61719: PUSH
61720: LD_VAR 0 2
61724: PPUSH
61725: CALL_OW 264
61729: PUSH
61730: LD_INT 81
61732: EQUAL
61733: AND
61734: IFFALSE 61755
// MinerDetonateMine ( unit , x , y ) ;
61736: LD_VAR 0 2
61740: PPUSH
61741: LD_VAR 0 4
61745: PPUSH
61746: LD_VAR 0 5
61750: PPUSH
61751: CALL 64371 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
61755: LD_VAR 0 1
61759: PUSH
61760: LD_INT 252
61762: EQUAL
61763: PUSH
61764: LD_VAR 0 2
61768: PPUSH
61769: CALL_OW 264
61773: PUSH
61774: LD_INT 81
61776: EQUAL
61777: AND
61778: IFFALSE 61799
// MinerCreateMinefield ( unit , x , y ) ;
61780: LD_VAR 0 2
61784: PPUSH
61785: LD_VAR 0 4
61789: PPUSH
61790: LD_VAR 0 5
61794: PPUSH
61795: CALL 64788 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
61799: LD_VAR 0 1
61803: PUSH
61804: LD_INT 253
61806: EQUAL
61807: PUSH
61808: LD_VAR 0 2
61812: PPUSH
61813: CALL_OW 257
61817: PUSH
61818: LD_INT 5
61820: EQUAL
61821: AND
61822: IFFALSE 61843
// ComBinocular ( unit , x , y ) ;
61824: LD_VAR 0 2
61828: PPUSH
61829: LD_VAR 0 4
61833: PPUSH
61834: LD_VAR 0 5
61838: PPUSH
61839: CALL 65157 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
61843: LD_VAR 0 1
61847: PUSH
61848: LD_INT 254
61850: EQUAL
61851: PUSH
61852: LD_VAR 0 2
61856: PPUSH
61857: CALL_OW 264
61861: PUSH
61862: LD_INT 99
61864: EQUAL
61865: AND
61866: PUSH
61867: LD_VAR 0 3
61871: PPUSH
61872: CALL_OW 263
61876: PUSH
61877: LD_INT 3
61879: EQUAL
61880: AND
61881: IFFALSE 61897
// HackDestroyVehicle ( unit , selectedUnit ) ;
61883: LD_VAR 0 2
61887: PPUSH
61888: LD_VAR 0 3
61892: PPUSH
61893: CALL 63460 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61897: LD_VAR 0 1
61901: PUSH
61902: LD_INT 255
61904: EQUAL
61905: PUSH
61906: LD_VAR 0 2
61910: PPUSH
61911: CALL_OW 264
61915: PUSH
61916: LD_INT 14
61918: PUSH
61919: LD_INT 53
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: IN
61926: AND
61927: PUSH
61928: LD_VAR 0 4
61932: PPUSH
61933: LD_VAR 0 5
61937: PPUSH
61938: CALL_OW 488
61942: AND
61943: IFFALSE 61967
// CutTreeXYR ( unit , x , y , 12 ) ;
61945: LD_VAR 0 2
61949: PPUSH
61950: LD_VAR 0 4
61954: PPUSH
61955: LD_VAR 0 5
61959: PPUSH
61960: LD_INT 12
61962: PPUSH
61963: CALL 62030 0 4
// if cmd = 256 then
61967: LD_VAR 0 1
61971: PUSH
61972: LD_INT 256
61974: EQUAL
61975: IFFALSE 61996
// SetFactoryWaypoint ( unit , x , y ) ;
61977: LD_VAR 0 2
61981: PPUSH
61982: LD_VAR 0 4
61986: PPUSH
61987: LD_VAR 0 5
61991: PPUSH
61992: CALL 59977 0 3
// if cmd = 257 then
61996: LD_VAR 0 1
62000: PUSH
62001: LD_INT 257
62003: EQUAL
62004: IFFALSE 62025
// SetWarehouseGatheringPoint ( unit , x , y ) ;
62006: LD_VAR 0 2
62010: PPUSH
62011: LD_VAR 0 4
62015: PPUSH
62016: LD_VAR 0 5
62020: PPUSH
62021: CALL 60339 0 3
// end ;
62025: LD_VAR 0 6
62029: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
62030: LD_INT 0
62032: PPUSH
62033: PPUSH
62034: PPUSH
62035: PPUSH
62036: PPUSH
62037: PPUSH
62038: PPUSH
62039: PPUSH
62040: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
62041: LD_VAR 0 1
62045: NOT
62046: PUSH
62047: LD_VAR 0 2
62051: PPUSH
62052: LD_VAR 0 3
62056: PPUSH
62057: CALL_OW 488
62061: NOT
62062: OR
62063: PUSH
62064: LD_VAR 0 4
62068: NOT
62069: OR
62070: IFFALSE 62074
// exit ;
62072: GO 62414
// list := [ ] ;
62074: LD_ADDR_VAR 0 13
62078: PUSH
62079: EMPTY
62080: ST_TO_ADDR
// if x - r < 0 then
62081: LD_VAR 0 2
62085: PUSH
62086: LD_VAR 0 4
62090: MINUS
62091: PUSH
62092: LD_INT 0
62094: LESS
62095: IFFALSE 62107
// min_x := 0 else
62097: LD_ADDR_VAR 0 7
62101: PUSH
62102: LD_INT 0
62104: ST_TO_ADDR
62105: GO 62123
// min_x := x - r ;
62107: LD_ADDR_VAR 0 7
62111: PUSH
62112: LD_VAR 0 2
62116: PUSH
62117: LD_VAR 0 4
62121: MINUS
62122: ST_TO_ADDR
// if y - r < 0 then
62123: LD_VAR 0 3
62127: PUSH
62128: LD_VAR 0 4
62132: MINUS
62133: PUSH
62134: LD_INT 0
62136: LESS
62137: IFFALSE 62149
// min_y := 0 else
62139: LD_ADDR_VAR 0 8
62143: PUSH
62144: LD_INT 0
62146: ST_TO_ADDR
62147: GO 62165
// min_y := y - r ;
62149: LD_ADDR_VAR 0 8
62153: PUSH
62154: LD_VAR 0 3
62158: PUSH
62159: LD_VAR 0 4
62163: MINUS
62164: ST_TO_ADDR
// max_x := x + r ;
62165: LD_ADDR_VAR 0 9
62169: PUSH
62170: LD_VAR 0 2
62174: PUSH
62175: LD_VAR 0 4
62179: PLUS
62180: ST_TO_ADDR
// max_y := y + r ;
62181: LD_ADDR_VAR 0 10
62185: PUSH
62186: LD_VAR 0 3
62190: PUSH
62191: LD_VAR 0 4
62195: PLUS
62196: ST_TO_ADDR
// for _x = min_x to max_x do
62197: LD_ADDR_VAR 0 11
62201: PUSH
62202: DOUBLE
62203: LD_VAR 0 7
62207: DEC
62208: ST_TO_ADDR
62209: LD_VAR 0 9
62213: PUSH
62214: FOR_TO
62215: IFFALSE 62332
// for _y = min_y to max_y do
62217: LD_ADDR_VAR 0 12
62221: PUSH
62222: DOUBLE
62223: LD_VAR 0 8
62227: DEC
62228: ST_TO_ADDR
62229: LD_VAR 0 10
62233: PUSH
62234: FOR_TO
62235: IFFALSE 62328
// begin if not ValidHex ( _x , _y ) then
62237: LD_VAR 0 11
62241: PPUSH
62242: LD_VAR 0 12
62246: PPUSH
62247: CALL_OW 488
62251: NOT
62252: IFFALSE 62256
// continue ;
62254: GO 62234
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
62256: LD_VAR 0 11
62260: PPUSH
62261: LD_VAR 0 12
62265: PPUSH
62266: CALL_OW 351
62270: PUSH
62271: LD_VAR 0 11
62275: PPUSH
62276: LD_VAR 0 12
62280: PPUSH
62281: CALL_OW 554
62285: AND
62286: IFFALSE 62326
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62288: LD_ADDR_VAR 0 13
62292: PUSH
62293: LD_VAR 0 13
62297: PPUSH
62298: LD_VAR 0 13
62302: PUSH
62303: LD_INT 1
62305: PLUS
62306: PPUSH
62307: LD_VAR 0 11
62311: PUSH
62312: LD_VAR 0 12
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PPUSH
62321: CALL_OW 2
62325: ST_TO_ADDR
// end ;
62326: GO 62234
62328: POP
62329: POP
62330: GO 62214
62332: POP
62333: POP
// if not list then
62334: LD_VAR 0 13
62338: NOT
62339: IFFALSE 62343
// exit ;
62341: GO 62414
// for i in list do
62343: LD_ADDR_VAR 0 6
62347: PUSH
62348: LD_VAR 0 13
62352: PUSH
62353: FOR_IN
62354: IFFALSE 62412
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
62356: LD_VAR 0 1
62360: PPUSH
62361: LD_STRING M
62363: PUSH
62364: LD_VAR 0 6
62368: PUSH
62369: LD_INT 1
62371: ARRAY
62372: PUSH
62373: LD_VAR 0 6
62377: PUSH
62378: LD_INT 2
62380: ARRAY
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: LD_INT 0
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: PUSH
62403: EMPTY
62404: LIST
62405: PPUSH
62406: CALL_OW 447
62410: GO 62353
62412: POP
62413: POP
// end ;
62414: LD_VAR 0 5
62418: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
62419: LD_EXP 76
62423: NOT
62424: IFFALSE 62474
62426: GO 62428
62428: DISABLE
// begin initHack := true ;
62429: LD_ADDR_EXP 76
62433: PUSH
62434: LD_INT 1
62436: ST_TO_ADDR
// hackTanks := [ ] ;
62437: LD_ADDR_EXP 77
62441: PUSH
62442: EMPTY
62443: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
62444: LD_ADDR_EXP 78
62448: PUSH
62449: EMPTY
62450: ST_TO_ADDR
// hackLimit := 3 ;
62451: LD_ADDR_EXP 79
62455: PUSH
62456: LD_INT 3
62458: ST_TO_ADDR
// hackDist := 12 ;
62459: LD_ADDR_EXP 80
62463: PUSH
62464: LD_INT 12
62466: ST_TO_ADDR
// hackCounter := [ ] ;
62467: LD_ADDR_EXP 81
62471: PUSH
62472: EMPTY
62473: ST_TO_ADDR
// end ;
62474: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
62475: LD_EXP 76
62479: PUSH
62480: LD_INT 34
62482: PUSH
62483: LD_INT 99
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PPUSH
62490: CALL_OW 69
62494: AND
62495: IFFALSE 62748
62497: GO 62499
62499: DISABLE
62500: LD_INT 0
62502: PPUSH
62503: PPUSH
// begin enable ;
62504: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
62505: LD_ADDR_VAR 0 1
62509: PUSH
62510: LD_INT 34
62512: PUSH
62513: LD_INT 99
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PPUSH
62520: CALL_OW 69
62524: PUSH
62525: FOR_IN
62526: IFFALSE 62746
// begin if not i in hackTanks then
62528: LD_VAR 0 1
62532: PUSH
62533: LD_EXP 77
62537: IN
62538: NOT
62539: IFFALSE 62622
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62541: LD_ADDR_EXP 77
62545: PUSH
62546: LD_EXP 77
62550: PPUSH
62551: LD_EXP 77
62555: PUSH
62556: LD_INT 1
62558: PLUS
62559: PPUSH
62560: LD_VAR 0 1
62564: PPUSH
62565: CALL_OW 1
62569: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62570: LD_ADDR_EXP 78
62574: PUSH
62575: LD_EXP 78
62579: PPUSH
62580: LD_EXP 78
62584: PUSH
62585: LD_INT 1
62587: PLUS
62588: PPUSH
62589: EMPTY
62590: PPUSH
62591: CALL_OW 1
62595: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62596: LD_ADDR_EXP 81
62600: PUSH
62601: LD_EXP 81
62605: PPUSH
62606: LD_EXP 81
62610: PUSH
62611: LD_INT 1
62613: PLUS
62614: PPUSH
62615: EMPTY
62616: PPUSH
62617: CALL_OW 1
62621: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62622: LD_VAR 0 1
62626: PPUSH
62627: CALL_OW 302
62631: NOT
62632: IFFALSE 62645
// begin HackUnlinkAll ( i ) ;
62634: LD_VAR 0 1
62638: PPUSH
62639: CALL 62751 0 1
// continue ;
62643: GO 62525
// end ; HackCheckCapturedStatus ( i ) ;
62645: LD_VAR 0 1
62649: PPUSH
62650: CALL 63194 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62654: LD_ADDR_VAR 0 2
62658: PUSH
62659: LD_INT 81
62661: PUSH
62662: LD_VAR 0 1
62666: PPUSH
62667: CALL_OW 255
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 33
62678: PUSH
62679: LD_INT 3
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 91
62688: PUSH
62689: LD_VAR 0 1
62693: PUSH
62694: LD_EXP 80
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 50
62706: PUSH
62707: EMPTY
62708: LIST
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: PPUSH
62716: CALL_OW 69
62720: ST_TO_ADDR
// if not tmp then
62721: LD_VAR 0 2
62725: NOT
62726: IFFALSE 62730
// continue ;
62728: GO 62525
// HackLink ( i , tmp ) ;
62730: LD_VAR 0 1
62734: PPUSH
62735: LD_VAR 0 2
62739: PPUSH
62740: CALL 62887 0 2
// end ;
62744: GO 62525
62746: POP
62747: POP
// end ;
62748: PPOPN 2
62750: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62751: LD_INT 0
62753: PPUSH
62754: PPUSH
62755: PPUSH
// if not hack in hackTanks then
62756: LD_VAR 0 1
62760: PUSH
62761: LD_EXP 77
62765: IN
62766: NOT
62767: IFFALSE 62771
// exit ;
62769: GO 62882
// index := GetElementIndex ( hackTanks , hack ) ;
62771: LD_ADDR_VAR 0 4
62775: PUSH
62776: LD_EXP 77
62780: PPUSH
62781: LD_VAR 0 1
62785: PPUSH
62786: CALL 5887 0 2
62790: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62791: LD_EXP 78
62795: PUSH
62796: LD_VAR 0 4
62800: ARRAY
62801: IFFALSE 62882
// begin for i in hackTanksCaptured [ index ] do
62803: LD_ADDR_VAR 0 3
62807: PUSH
62808: LD_EXP 78
62812: PUSH
62813: LD_VAR 0 4
62817: ARRAY
62818: PUSH
62819: FOR_IN
62820: IFFALSE 62846
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62822: LD_VAR 0 3
62826: PUSH
62827: LD_INT 1
62829: ARRAY
62830: PPUSH
62831: LD_VAR 0 3
62835: PUSH
62836: LD_INT 2
62838: ARRAY
62839: PPUSH
62840: CALL_OW 235
62844: GO 62819
62846: POP
62847: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62848: LD_ADDR_EXP 78
62852: PUSH
62853: LD_EXP 78
62857: PPUSH
62858: LD_VAR 0 4
62862: PPUSH
62863: EMPTY
62864: PPUSH
62865: CALL_OW 1
62869: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62870: LD_VAR 0 1
62874: PPUSH
62875: LD_INT 0
62877: PPUSH
62878: CALL_OW 505
// end ; end ;
62882: LD_VAR 0 2
62886: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62887: LD_INT 0
62889: PPUSH
62890: PPUSH
62891: PPUSH
// if not hack in hackTanks or not vehicles then
62892: LD_VAR 0 1
62896: PUSH
62897: LD_EXP 77
62901: IN
62902: NOT
62903: PUSH
62904: LD_VAR 0 2
62908: NOT
62909: OR
62910: IFFALSE 62914
// exit ;
62912: GO 63189
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62914: LD_ADDR_VAR 0 2
62918: PUSH
62919: LD_VAR 0 1
62923: PPUSH
62924: LD_VAR 0 2
62928: PPUSH
62929: LD_INT 1
62931: PPUSH
62932: LD_INT 1
62934: PPUSH
62935: CALL 6537 0 4
62939: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62940: LD_ADDR_VAR 0 5
62944: PUSH
62945: LD_EXP 77
62949: PPUSH
62950: LD_VAR 0 1
62954: PPUSH
62955: CALL 5887 0 2
62959: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62960: LD_EXP 78
62964: PUSH
62965: LD_VAR 0 5
62969: ARRAY
62970: PUSH
62971: LD_EXP 79
62975: LESS
62976: IFFALSE 63165
// begin for i := 1 to vehicles do
62978: LD_ADDR_VAR 0 4
62982: PUSH
62983: DOUBLE
62984: LD_INT 1
62986: DEC
62987: ST_TO_ADDR
62988: LD_VAR 0 2
62992: PUSH
62993: FOR_TO
62994: IFFALSE 63163
// begin if hackTanksCaptured [ index ] = hackLimit then
62996: LD_EXP 78
63000: PUSH
63001: LD_VAR 0 5
63005: ARRAY
63006: PUSH
63007: LD_EXP 79
63011: EQUAL
63012: IFFALSE 63016
// break ;
63014: GO 63163
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
63016: LD_ADDR_EXP 81
63020: PUSH
63021: LD_EXP 81
63025: PPUSH
63026: LD_VAR 0 5
63030: PPUSH
63031: LD_EXP 81
63035: PUSH
63036: LD_VAR 0 5
63040: ARRAY
63041: PUSH
63042: LD_INT 1
63044: PLUS
63045: PPUSH
63046: CALL_OW 1
63050: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
63051: LD_ADDR_EXP 78
63055: PUSH
63056: LD_EXP 78
63060: PPUSH
63061: LD_VAR 0 5
63065: PUSH
63066: LD_EXP 78
63070: PUSH
63071: LD_VAR 0 5
63075: ARRAY
63076: PUSH
63077: LD_INT 1
63079: PLUS
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PPUSH
63085: LD_VAR 0 2
63089: PUSH
63090: LD_VAR 0 4
63094: ARRAY
63095: PUSH
63096: LD_VAR 0 2
63100: PUSH
63101: LD_VAR 0 4
63105: ARRAY
63106: PPUSH
63107: CALL_OW 255
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PPUSH
63116: CALL 6102 0 3
63120: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
63121: LD_VAR 0 2
63125: PUSH
63126: LD_VAR 0 4
63130: ARRAY
63131: PPUSH
63132: LD_VAR 0 1
63136: PPUSH
63137: CALL_OW 255
63141: PPUSH
63142: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
63146: LD_VAR 0 2
63150: PUSH
63151: LD_VAR 0 4
63155: ARRAY
63156: PPUSH
63157: CALL_OW 141
// end ;
63161: GO 62993
63163: POP
63164: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63165: LD_VAR 0 1
63169: PPUSH
63170: LD_EXP 78
63174: PUSH
63175: LD_VAR 0 5
63179: ARRAY
63180: PUSH
63181: LD_INT 0
63183: PLUS
63184: PPUSH
63185: CALL_OW 505
// end ;
63189: LD_VAR 0 3
63193: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
63194: LD_INT 0
63196: PPUSH
63197: PPUSH
63198: PPUSH
63199: PPUSH
// if not hack in hackTanks then
63200: LD_VAR 0 1
63204: PUSH
63205: LD_EXP 77
63209: IN
63210: NOT
63211: IFFALSE 63215
// exit ;
63213: GO 63455
// index := GetElementIndex ( hackTanks , hack ) ;
63215: LD_ADDR_VAR 0 4
63219: PUSH
63220: LD_EXP 77
63224: PPUSH
63225: LD_VAR 0 1
63229: PPUSH
63230: CALL 5887 0 2
63234: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
63235: LD_ADDR_VAR 0 3
63239: PUSH
63240: DOUBLE
63241: LD_EXP 78
63245: PUSH
63246: LD_VAR 0 4
63250: ARRAY
63251: INC
63252: ST_TO_ADDR
63253: LD_INT 1
63255: PUSH
63256: FOR_DOWNTO
63257: IFFALSE 63429
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
63259: LD_ADDR_VAR 0 5
63263: PUSH
63264: LD_EXP 78
63268: PUSH
63269: LD_VAR 0 4
63273: ARRAY
63274: PUSH
63275: LD_VAR 0 3
63279: ARRAY
63280: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
63281: LD_VAR 0 5
63285: PUSH
63286: LD_INT 1
63288: ARRAY
63289: PPUSH
63290: CALL_OW 302
63294: NOT
63295: PUSH
63296: LD_VAR 0 5
63300: PUSH
63301: LD_INT 1
63303: ARRAY
63304: PPUSH
63305: CALL_OW 255
63309: PUSH
63310: LD_VAR 0 1
63314: PPUSH
63315: CALL_OW 255
63319: NONEQUAL
63320: OR
63321: IFFALSE 63427
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
63323: LD_VAR 0 5
63327: PUSH
63328: LD_INT 1
63330: ARRAY
63331: PPUSH
63332: CALL_OW 305
63336: PUSH
63337: LD_VAR 0 5
63341: PUSH
63342: LD_INT 1
63344: ARRAY
63345: PPUSH
63346: CALL_OW 255
63350: PUSH
63351: LD_VAR 0 1
63355: PPUSH
63356: CALL_OW 255
63360: EQUAL
63361: AND
63362: IFFALSE 63386
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
63364: LD_VAR 0 5
63368: PUSH
63369: LD_INT 1
63371: ARRAY
63372: PPUSH
63373: LD_VAR 0 5
63377: PUSH
63378: LD_INT 2
63380: ARRAY
63381: PPUSH
63382: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
63386: LD_ADDR_EXP 78
63390: PUSH
63391: LD_EXP 78
63395: PPUSH
63396: LD_VAR 0 4
63400: PPUSH
63401: LD_EXP 78
63405: PUSH
63406: LD_VAR 0 4
63410: ARRAY
63411: PPUSH
63412: LD_VAR 0 3
63416: PPUSH
63417: CALL_OW 3
63421: PPUSH
63422: CALL_OW 1
63426: ST_TO_ADDR
// end ; end ;
63427: GO 63256
63429: POP
63430: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63431: LD_VAR 0 1
63435: PPUSH
63436: LD_EXP 78
63440: PUSH
63441: LD_VAR 0 4
63445: ARRAY
63446: PUSH
63447: LD_INT 0
63449: PLUS
63450: PPUSH
63451: CALL_OW 505
// end ;
63455: LD_VAR 0 2
63459: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
63460: LD_INT 0
63462: PPUSH
63463: PPUSH
63464: PPUSH
63465: PPUSH
// if not hack in hackTanks then
63466: LD_VAR 0 1
63470: PUSH
63471: LD_EXP 77
63475: IN
63476: NOT
63477: IFFALSE 63481
// exit ;
63479: GO 63566
// index := GetElementIndex ( hackTanks , hack ) ;
63481: LD_ADDR_VAR 0 5
63485: PUSH
63486: LD_EXP 77
63490: PPUSH
63491: LD_VAR 0 1
63495: PPUSH
63496: CALL 5887 0 2
63500: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
63501: LD_ADDR_VAR 0 4
63505: PUSH
63506: DOUBLE
63507: LD_INT 1
63509: DEC
63510: ST_TO_ADDR
63511: LD_EXP 78
63515: PUSH
63516: LD_VAR 0 5
63520: ARRAY
63521: PUSH
63522: FOR_TO
63523: IFFALSE 63564
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
63525: LD_EXP 78
63529: PUSH
63530: LD_VAR 0 5
63534: ARRAY
63535: PUSH
63536: LD_VAR 0 4
63540: ARRAY
63541: PUSH
63542: LD_INT 1
63544: ARRAY
63545: PUSH
63546: LD_VAR 0 2
63550: EQUAL
63551: IFFALSE 63562
// KillUnit ( vehicle ) ;
63553: LD_VAR 0 2
63557: PPUSH
63558: CALL_OW 66
63562: GO 63522
63564: POP
63565: POP
// end ;
63566: LD_VAR 0 3
63570: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
63571: LD_EXP 82
63575: NOT
63576: IFFALSE 63611
63578: GO 63580
63580: DISABLE
// begin initMiner := true ;
63581: LD_ADDR_EXP 82
63585: PUSH
63586: LD_INT 1
63588: ST_TO_ADDR
// minersList := [ ] ;
63589: LD_ADDR_EXP 83
63593: PUSH
63594: EMPTY
63595: ST_TO_ADDR
// minerMinesList := [ ] ;
63596: LD_ADDR_EXP 84
63600: PUSH
63601: EMPTY
63602: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
63603: LD_ADDR_EXP 85
63607: PUSH
63608: LD_INT 5
63610: ST_TO_ADDR
// end ;
63611: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
63612: LD_EXP 82
63616: PUSH
63617: LD_INT 34
63619: PUSH
63620: LD_INT 81
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PPUSH
63627: CALL_OW 69
63631: AND
63632: IFFALSE 64093
63634: GO 63636
63636: DISABLE
63637: LD_INT 0
63639: PPUSH
63640: PPUSH
63641: PPUSH
63642: PPUSH
// begin enable ;
63643: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63644: LD_ADDR_VAR 0 1
63648: PUSH
63649: LD_INT 34
63651: PUSH
63652: LD_INT 81
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PPUSH
63659: CALL_OW 69
63663: PUSH
63664: FOR_IN
63665: IFFALSE 63737
// begin if not i in minersList then
63667: LD_VAR 0 1
63671: PUSH
63672: LD_EXP 83
63676: IN
63677: NOT
63678: IFFALSE 63735
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63680: LD_ADDR_EXP 83
63684: PUSH
63685: LD_EXP 83
63689: PPUSH
63690: LD_EXP 83
63694: PUSH
63695: LD_INT 1
63697: PLUS
63698: PPUSH
63699: LD_VAR 0 1
63703: PPUSH
63704: CALL_OW 1
63708: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63709: LD_ADDR_EXP 84
63713: PUSH
63714: LD_EXP 84
63718: PPUSH
63719: LD_EXP 84
63723: PUSH
63724: LD_INT 1
63726: PLUS
63727: PPUSH
63728: EMPTY
63729: PPUSH
63730: CALL_OW 1
63734: ST_TO_ADDR
// end end ;
63735: GO 63664
63737: POP
63738: POP
// for i := minerMinesList downto 1 do
63739: LD_ADDR_VAR 0 1
63743: PUSH
63744: DOUBLE
63745: LD_EXP 84
63749: INC
63750: ST_TO_ADDR
63751: LD_INT 1
63753: PUSH
63754: FOR_DOWNTO
63755: IFFALSE 64091
// begin if IsLive ( minersList [ i ] ) then
63757: LD_EXP 83
63761: PUSH
63762: LD_VAR 0 1
63766: ARRAY
63767: PPUSH
63768: CALL_OW 300
63772: IFFALSE 63800
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
63774: LD_EXP 83
63778: PUSH
63779: LD_VAR 0 1
63783: ARRAY
63784: PPUSH
63785: LD_EXP 84
63789: PUSH
63790: LD_VAR 0 1
63794: ARRAY
63795: PPUSH
63796: CALL_OW 505
// if not minerMinesList [ i ] then
63800: LD_EXP 84
63804: PUSH
63805: LD_VAR 0 1
63809: ARRAY
63810: NOT
63811: IFFALSE 63815
// continue ;
63813: GO 63754
// for j := minerMinesList [ i ] downto 1 do
63815: LD_ADDR_VAR 0 2
63819: PUSH
63820: DOUBLE
63821: LD_EXP 84
63825: PUSH
63826: LD_VAR 0 1
63830: ARRAY
63831: INC
63832: ST_TO_ADDR
63833: LD_INT 1
63835: PUSH
63836: FOR_DOWNTO
63837: IFFALSE 64087
// begin side := GetSide ( minersList [ i ] ) ;
63839: LD_ADDR_VAR 0 3
63843: PUSH
63844: LD_EXP 83
63848: PUSH
63849: LD_VAR 0 1
63853: ARRAY
63854: PPUSH
63855: CALL_OW 255
63859: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63860: LD_ADDR_VAR 0 4
63864: PUSH
63865: LD_EXP 84
63869: PUSH
63870: LD_VAR 0 1
63874: ARRAY
63875: PUSH
63876: LD_VAR 0 2
63880: ARRAY
63881: PUSH
63882: LD_INT 1
63884: ARRAY
63885: PPUSH
63886: LD_EXP 84
63890: PUSH
63891: LD_VAR 0 1
63895: ARRAY
63896: PUSH
63897: LD_VAR 0 2
63901: ARRAY
63902: PUSH
63903: LD_INT 2
63905: ARRAY
63906: PPUSH
63907: CALL_OW 428
63911: ST_TO_ADDR
// if not tmp then
63912: LD_VAR 0 4
63916: NOT
63917: IFFALSE 63921
// continue ;
63919: GO 63836
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63921: LD_VAR 0 4
63925: PUSH
63926: LD_INT 81
63928: PUSH
63929: LD_VAR 0 3
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PPUSH
63938: CALL_OW 69
63942: IN
63943: PUSH
63944: LD_EXP 84
63948: PUSH
63949: LD_VAR 0 1
63953: ARRAY
63954: PUSH
63955: LD_VAR 0 2
63959: ARRAY
63960: PUSH
63961: LD_INT 1
63963: ARRAY
63964: PPUSH
63965: LD_EXP 84
63969: PUSH
63970: LD_VAR 0 1
63974: ARRAY
63975: PUSH
63976: LD_VAR 0 2
63980: ARRAY
63981: PUSH
63982: LD_INT 2
63984: ARRAY
63985: PPUSH
63986: CALL_OW 458
63990: AND
63991: IFFALSE 64085
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63993: LD_EXP 84
63997: PUSH
63998: LD_VAR 0 1
64002: ARRAY
64003: PUSH
64004: LD_VAR 0 2
64008: ARRAY
64009: PUSH
64010: LD_INT 1
64012: ARRAY
64013: PPUSH
64014: LD_EXP 84
64018: PUSH
64019: LD_VAR 0 1
64023: ARRAY
64024: PUSH
64025: LD_VAR 0 2
64029: ARRAY
64030: PUSH
64031: LD_INT 2
64033: ARRAY
64034: PPUSH
64035: LD_VAR 0 3
64039: PPUSH
64040: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64044: LD_ADDR_EXP 84
64048: PUSH
64049: LD_EXP 84
64053: PPUSH
64054: LD_VAR 0 1
64058: PPUSH
64059: LD_EXP 84
64063: PUSH
64064: LD_VAR 0 1
64068: ARRAY
64069: PPUSH
64070: LD_VAR 0 2
64074: PPUSH
64075: CALL_OW 3
64079: PPUSH
64080: CALL_OW 1
64084: ST_TO_ADDR
// end ; end ;
64085: GO 63836
64087: POP
64088: POP
// end ;
64089: GO 63754
64091: POP
64092: POP
// end ;
64093: PPOPN 4
64095: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
64096: LD_INT 0
64098: PPUSH
64099: PPUSH
// result := false ;
64100: LD_ADDR_VAR 0 4
64104: PUSH
64105: LD_INT 0
64107: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
64108: LD_VAR 0 1
64112: PPUSH
64113: CALL_OW 264
64117: PUSH
64118: LD_INT 81
64120: EQUAL
64121: NOT
64122: IFFALSE 64126
// exit ;
64124: GO 64366
// index := GetElementIndex ( minersList , unit ) ;
64126: LD_ADDR_VAR 0 5
64130: PUSH
64131: LD_EXP 83
64135: PPUSH
64136: LD_VAR 0 1
64140: PPUSH
64141: CALL 5887 0 2
64145: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
64146: LD_EXP 84
64150: PUSH
64151: LD_VAR 0 5
64155: ARRAY
64156: PUSH
64157: LD_EXP 85
64161: GREATEREQUAL
64162: IFFALSE 64166
// exit ;
64164: GO 64366
// ComMoveXY ( unit , x , y ) ;
64166: LD_VAR 0 1
64170: PPUSH
64171: LD_VAR 0 2
64175: PPUSH
64176: LD_VAR 0 3
64180: PPUSH
64181: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64185: LD_INT 35
64187: PPUSH
64188: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
64192: LD_VAR 0 1
64196: PPUSH
64197: LD_VAR 0 2
64201: PPUSH
64202: LD_VAR 0 3
64206: PPUSH
64207: CALL 37271 0 3
64211: NOT
64212: PUSH
64213: LD_VAR 0 1
64217: PPUSH
64218: CALL_OW 314
64222: AND
64223: IFFALSE 64227
// exit ;
64225: GO 64366
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
64227: LD_VAR 0 2
64231: PPUSH
64232: LD_VAR 0 3
64236: PPUSH
64237: CALL_OW 428
64241: PUSH
64242: LD_VAR 0 1
64246: EQUAL
64247: PUSH
64248: LD_VAR 0 1
64252: PPUSH
64253: CALL_OW 314
64257: NOT
64258: AND
64259: IFFALSE 64185
// PlaySoundXY ( x , y , PlantMine ) ;
64261: LD_VAR 0 2
64265: PPUSH
64266: LD_VAR 0 3
64270: PPUSH
64271: LD_STRING PlantMine
64273: PPUSH
64274: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
64278: LD_VAR 0 2
64282: PPUSH
64283: LD_VAR 0 3
64287: PPUSH
64288: LD_VAR 0 1
64292: PPUSH
64293: CALL_OW 255
64297: PPUSH
64298: LD_INT 0
64300: PPUSH
64301: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
64305: LD_ADDR_EXP 84
64309: PUSH
64310: LD_EXP 84
64314: PPUSH
64315: LD_VAR 0 5
64319: PUSH
64320: LD_EXP 84
64324: PUSH
64325: LD_VAR 0 5
64329: ARRAY
64330: PUSH
64331: LD_INT 1
64333: PLUS
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PPUSH
64339: LD_VAR 0 2
64343: PUSH
64344: LD_VAR 0 3
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PPUSH
64353: CALL 6102 0 3
64357: ST_TO_ADDR
// result := true ;
64358: LD_ADDR_VAR 0 4
64362: PUSH
64363: LD_INT 1
64365: ST_TO_ADDR
// end ;
64366: LD_VAR 0 4
64370: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
64371: LD_INT 0
64373: PPUSH
64374: PPUSH
64375: PPUSH
// if not unit in minersList then
64376: LD_VAR 0 1
64380: PUSH
64381: LD_EXP 83
64385: IN
64386: NOT
64387: IFFALSE 64391
// exit ;
64389: GO 64783
// index := GetElementIndex ( minersList , unit ) ;
64391: LD_ADDR_VAR 0 6
64395: PUSH
64396: LD_EXP 83
64400: PPUSH
64401: LD_VAR 0 1
64405: PPUSH
64406: CALL 5887 0 2
64410: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
64411: LD_ADDR_VAR 0 5
64415: PUSH
64416: DOUBLE
64417: LD_EXP 84
64421: PUSH
64422: LD_VAR 0 6
64426: ARRAY
64427: INC
64428: ST_TO_ADDR
64429: LD_INT 1
64431: PUSH
64432: FOR_DOWNTO
64433: IFFALSE 64594
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
64435: LD_EXP 84
64439: PUSH
64440: LD_VAR 0 6
64444: ARRAY
64445: PUSH
64446: LD_VAR 0 5
64450: ARRAY
64451: PUSH
64452: LD_INT 1
64454: ARRAY
64455: PUSH
64456: LD_VAR 0 2
64460: EQUAL
64461: PUSH
64462: LD_EXP 84
64466: PUSH
64467: LD_VAR 0 6
64471: ARRAY
64472: PUSH
64473: LD_VAR 0 5
64477: ARRAY
64478: PUSH
64479: LD_INT 2
64481: ARRAY
64482: PUSH
64483: LD_VAR 0 3
64487: EQUAL
64488: AND
64489: IFFALSE 64592
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64491: LD_EXP 84
64495: PUSH
64496: LD_VAR 0 6
64500: ARRAY
64501: PUSH
64502: LD_VAR 0 5
64506: ARRAY
64507: PUSH
64508: LD_INT 1
64510: ARRAY
64511: PPUSH
64512: LD_EXP 84
64516: PUSH
64517: LD_VAR 0 6
64521: ARRAY
64522: PUSH
64523: LD_VAR 0 5
64527: ARRAY
64528: PUSH
64529: LD_INT 2
64531: ARRAY
64532: PPUSH
64533: LD_VAR 0 1
64537: PPUSH
64538: CALL_OW 255
64542: PPUSH
64543: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64547: LD_ADDR_EXP 84
64551: PUSH
64552: LD_EXP 84
64556: PPUSH
64557: LD_VAR 0 6
64561: PPUSH
64562: LD_EXP 84
64566: PUSH
64567: LD_VAR 0 6
64571: ARRAY
64572: PPUSH
64573: LD_VAR 0 5
64577: PPUSH
64578: CALL_OW 3
64582: PPUSH
64583: CALL_OW 1
64587: ST_TO_ADDR
// exit ;
64588: POP
64589: POP
64590: GO 64783
// end ; end ;
64592: GO 64432
64594: POP
64595: POP
// for i := minerMinesList [ index ] downto 1 do
64596: LD_ADDR_VAR 0 5
64600: PUSH
64601: DOUBLE
64602: LD_EXP 84
64606: PUSH
64607: LD_VAR 0 6
64611: ARRAY
64612: INC
64613: ST_TO_ADDR
64614: LD_INT 1
64616: PUSH
64617: FOR_DOWNTO
64618: IFFALSE 64781
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64620: LD_EXP 84
64624: PUSH
64625: LD_VAR 0 6
64629: ARRAY
64630: PUSH
64631: LD_VAR 0 5
64635: ARRAY
64636: PUSH
64637: LD_INT 1
64639: ARRAY
64640: PPUSH
64641: LD_EXP 84
64645: PUSH
64646: LD_VAR 0 6
64650: ARRAY
64651: PUSH
64652: LD_VAR 0 5
64656: ARRAY
64657: PUSH
64658: LD_INT 2
64660: ARRAY
64661: PPUSH
64662: LD_VAR 0 2
64666: PPUSH
64667: LD_VAR 0 3
64671: PPUSH
64672: CALL_OW 298
64676: PUSH
64677: LD_INT 6
64679: LESS
64680: IFFALSE 64779
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64682: LD_EXP 84
64686: PUSH
64687: LD_VAR 0 6
64691: ARRAY
64692: PUSH
64693: LD_VAR 0 5
64697: ARRAY
64698: PUSH
64699: LD_INT 1
64701: ARRAY
64702: PPUSH
64703: LD_EXP 84
64707: PUSH
64708: LD_VAR 0 6
64712: ARRAY
64713: PUSH
64714: LD_VAR 0 5
64718: ARRAY
64719: PUSH
64720: LD_INT 2
64722: ARRAY
64723: PPUSH
64724: LD_VAR 0 1
64728: PPUSH
64729: CALL_OW 255
64733: PPUSH
64734: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64738: LD_ADDR_EXP 84
64742: PUSH
64743: LD_EXP 84
64747: PPUSH
64748: LD_VAR 0 6
64752: PPUSH
64753: LD_EXP 84
64757: PUSH
64758: LD_VAR 0 6
64762: ARRAY
64763: PPUSH
64764: LD_VAR 0 5
64768: PPUSH
64769: CALL_OW 3
64773: PPUSH
64774: CALL_OW 1
64778: ST_TO_ADDR
// end ; end ;
64779: GO 64617
64781: POP
64782: POP
// end ;
64783: LD_VAR 0 4
64787: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64788: LD_INT 0
64790: PPUSH
64791: PPUSH
64792: PPUSH
64793: PPUSH
64794: PPUSH
64795: PPUSH
64796: PPUSH
64797: PPUSH
64798: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64799: LD_VAR 0 1
64803: PPUSH
64804: CALL_OW 264
64808: PUSH
64809: LD_INT 81
64811: EQUAL
64812: NOT
64813: PUSH
64814: LD_VAR 0 1
64818: PUSH
64819: LD_EXP 83
64823: IN
64824: NOT
64825: OR
64826: IFFALSE 64830
// exit ;
64828: GO 65152
// index := GetElementIndex ( minersList , unit ) ;
64830: LD_ADDR_VAR 0 6
64834: PUSH
64835: LD_EXP 83
64839: PPUSH
64840: LD_VAR 0 1
64844: PPUSH
64845: CALL 5887 0 2
64849: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64850: LD_ADDR_VAR 0 8
64854: PUSH
64855: LD_EXP 85
64859: PUSH
64860: LD_EXP 84
64864: PUSH
64865: LD_VAR 0 6
64869: ARRAY
64870: MINUS
64871: ST_TO_ADDR
// if not minesFreeAmount then
64872: LD_VAR 0 8
64876: NOT
64877: IFFALSE 64881
// exit ;
64879: GO 65152
// tmp := [ ] ;
64881: LD_ADDR_VAR 0 7
64885: PUSH
64886: EMPTY
64887: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64888: LD_ADDR_VAR 0 5
64892: PUSH
64893: DOUBLE
64894: LD_INT 1
64896: DEC
64897: ST_TO_ADDR
64898: LD_VAR 0 8
64902: PUSH
64903: FOR_TO
64904: IFFALSE 65099
// begin _d := rand ( 0 , 5 ) ;
64906: LD_ADDR_VAR 0 11
64910: PUSH
64911: LD_INT 0
64913: PPUSH
64914: LD_INT 5
64916: PPUSH
64917: CALL_OW 12
64921: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64922: LD_ADDR_VAR 0 12
64926: PUSH
64927: LD_INT 2
64929: PPUSH
64930: LD_INT 6
64932: PPUSH
64933: CALL_OW 12
64937: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64938: LD_ADDR_VAR 0 9
64942: PUSH
64943: LD_VAR 0 2
64947: PPUSH
64948: LD_VAR 0 11
64952: PPUSH
64953: LD_VAR 0 12
64957: PPUSH
64958: CALL_OW 272
64962: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64963: LD_ADDR_VAR 0 10
64967: PUSH
64968: LD_VAR 0 3
64972: PPUSH
64973: LD_VAR 0 11
64977: PPUSH
64978: LD_VAR 0 12
64982: PPUSH
64983: CALL_OW 273
64987: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64988: LD_VAR 0 9
64992: PPUSH
64993: LD_VAR 0 10
64997: PPUSH
64998: CALL_OW 488
65002: PUSH
65003: LD_VAR 0 9
65007: PUSH
65008: LD_VAR 0 10
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_VAR 0 7
65021: IN
65022: NOT
65023: AND
65024: PUSH
65025: LD_VAR 0 9
65029: PPUSH
65030: LD_VAR 0 10
65034: PPUSH
65035: CALL_OW 458
65039: NOT
65040: AND
65041: IFFALSE 65083
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
65043: LD_ADDR_VAR 0 7
65047: PUSH
65048: LD_VAR 0 7
65052: PPUSH
65053: LD_VAR 0 7
65057: PUSH
65058: LD_INT 1
65060: PLUS
65061: PPUSH
65062: LD_VAR 0 9
65066: PUSH
65067: LD_VAR 0 10
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PPUSH
65076: CALL_OW 1
65080: ST_TO_ADDR
65081: GO 65097
// i := i - 1 ;
65083: LD_ADDR_VAR 0 5
65087: PUSH
65088: LD_VAR 0 5
65092: PUSH
65093: LD_INT 1
65095: MINUS
65096: ST_TO_ADDR
// end ;
65097: GO 64903
65099: POP
65100: POP
// for i in tmp do
65101: LD_ADDR_VAR 0 5
65105: PUSH
65106: LD_VAR 0 7
65110: PUSH
65111: FOR_IN
65112: IFFALSE 65150
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
65114: LD_VAR 0 1
65118: PPUSH
65119: LD_VAR 0 5
65123: PUSH
65124: LD_INT 1
65126: ARRAY
65127: PPUSH
65128: LD_VAR 0 5
65132: PUSH
65133: LD_INT 2
65135: ARRAY
65136: PPUSH
65137: CALL 64096 0 3
65141: NOT
65142: IFFALSE 65148
// exit ;
65144: POP
65145: POP
65146: GO 65152
65148: GO 65111
65150: POP
65151: POP
// end ;
65152: LD_VAR 0 4
65156: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
65157: LD_INT 0
65159: PPUSH
65160: PPUSH
65161: PPUSH
65162: PPUSH
65163: PPUSH
65164: PPUSH
65165: PPUSH
// if not GetClass ( unit ) = class_sniper then
65166: LD_VAR 0 1
65170: PPUSH
65171: CALL_OW 257
65175: PUSH
65176: LD_INT 5
65178: EQUAL
65179: NOT
65180: IFFALSE 65184
// exit ;
65182: GO 65572
// dist := 8 ;
65184: LD_ADDR_VAR 0 5
65188: PUSH
65189: LD_INT 8
65191: ST_TO_ADDR
// viewRange := 12 ;
65192: LD_ADDR_VAR 0 7
65196: PUSH
65197: LD_INT 12
65199: ST_TO_ADDR
// side := GetSide ( unit ) ;
65200: LD_ADDR_VAR 0 6
65204: PUSH
65205: LD_VAR 0 1
65209: PPUSH
65210: CALL_OW 255
65214: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
65215: LD_INT 61
65217: PPUSH
65218: LD_VAR 0 6
65222: PPUSH
65223: CALL_OW 321
65227: PUSH
65228: LD_INT 2
65230: EQUAL
65231: IFFALSE 65241
// viewRange := 16 ;
65233: LD_ADDR_VAR 0 7
65237: PUSH
65238: LD_INT 16
65240: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
65241: LD_VAR 0 1
65245: PPUSH
65246: LD_VAR 0 2
65250: PPUSH
65251: LD_VAR 0 3
65255: PPUSH
65256: CALL_OW 297
65260: PUSH
65261: LD_VAR 0 5
65265: GREATER
65266: IFFALSE 65345
// begin ComMoveXY ( unit , x , y ) ;
65268: LD_VAR 0 1
65272: PPUSH
65273: LD_VAR 0 2
65277: PPUSH
65278: LD_VAR 0 3
65282: PPUSH
65283: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65287: LD_INT 35
65289: PPUSH
65290: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
65294: LD_VAR 0 1
65298: PPUSH
65299: LD_VAR 0 2
65303: PPUSH
65304: LD_VAR 0 3
65308: PPUSH
65309: CALL 37271 0 3
65313: NOT
65314: IFFALSE 65318
// exit ;
65316: GO 65572
// until GetDistUnitXY ( unit , x , y ) < dist ;
65318: LD_VAR 0 1
65322: PPUSH
65323: LD_VAR 0 2
65327: PPUSH
65328: LD_VAR 0 3
65332: PPUSH
65333: CALL_OW 297
65337: PUSH
65338: LD_VAR 0 5
65342: LESS
65343: IFFALSE 65287
// end ; ComTurnXY ( unit , x , y ) ;
65345: LD_VAR 0 1
65349: PPUSH
65350: LD_VAR 0 2
65354: PPUSH
65355: LD_VAR 0 3
65359: PPUSH
65360: CALL_OW 118
// wait ( 5 ) ;
65364: LD_INT 5
65366: PPUSH
65367: CALL_OW 67
// _d := GetDir ( unit ) ;
65371: LD_ADDR_VAR 0 10
65375: PUSH
65376: LD_VAR 0 1
65380: PPUSH
65381: CALL_OW 254
65385: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
65386: LD_ADDR_VAR 0 8
65390: PUSH
65391: LD_VAR 0 1
65395: PPUSH
65396: CALL_OW 250
65400: PPUSH
65401: LD_VAR 0 10
65405: PPUSH
65406: LD_VAR 0 5
65410: PPUSH
65411: CALL_OW 272
65415: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
65416: LD_ADDR_VAR 0 9
65420: PUSH
65421: LD_VAR 0 1
65425: PPUSH
65426: CALL_OW 251
65430: PPUSH
65431: LD_VAR 0 10
65435: PPUSH
65436: LD_VAR 0 5
65440: PPUSH
65441: CALL_OW 273
65445: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65446: LD_VAR 0 8
65450: PPUSH
65451: LD_VAR 0 9
65455: PPUSH
65456: CALL_OW 488
65460: NOT
65461: IFFALSE 65465
// exit ;
65463: GO 65572
// ComAnimCustom ( unit , 1 ) ;
65465: LD_VAR 0 1
65469: PPUSH
65470: LD_INT 1
65472: PPUSH
65473: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
65477: LD_VAR 0 8
65481: PPUSH
65482: LD_VAR 0 9
65486: PPUSH
65487: LD_VAR 0 6
65491: PPUSH
65492: LD_VAR 0 7
65496: PPUSH
65497: CALL_OW 330
// repeat wait ( 1 ) ;
65501: LD_INT 1
65503: PPUSH
65504: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
65508: LD_VAR 0 1
65512: PPUSH
65513: CALL_OW 316
65517: PUSH
65518: LD_VAR 0 1
65522: PPUSH
65523: CALL_OW 314
65527: OR
65528: PUSH
65529: LD_VAR 0 1
65533: PPUSH
65534: CALL_OW 302
65538: NOT
65539: OR
65540: PUSH
65541: LD_VAR 0 1
65545: PPUSH
65546: CALL_OW 301
65550: OR
65551: IFFALSE 65501
// RemoveSeeing ( _x , _y , side ) ;
65553: LD_VAR 0 8
65557: PPUSH
65558: LD_VAR 0 9
65562: PPUSH
65563: LD_VAR 0 6
65567: PPUSH
65568: CALL_OW 331
// end ; end_of_file
65572: LD_VAR 0 4
65576: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65577: LD_VAR 0 1
65581: PUSH
65582: LD_INT 200
65584: DOUBLE
65585: GREATEREQUAL
65586: IFFALSE 65594
65588: LD_INT 299
65590: DOUBLE
65591: LESSEQUAL
65592: IFTRUE 65596
65594: GO 65628
65596: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65597: LD_VAR 0 1
65601: PPUSH
65602: LD_VAR 0 2
65606: PPUSH
65607: LD_VAR 0 3
65611: PPUSH
65612: LD_VAR 0 4
65616: PPUSH
65617: LD_VAR 0 5
65621: PPUSH
65622: CALL 61664 0 5
65626: GO 65705
65628: LD_INT 300
65630: DOUBLE
65631: GREATEREQUAL
65632: IFFALSE 65640
65634: LD_INT 399
65636: DOUBLE
65637: LESSEQUAL
65638: IFTRUE 65642
65640: GO 65704
65642: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65643: LD_VAR 0 1
65647: PPUSH
65648: LD_VAR 0 2
65652: PPUSH
65653: LD_VAR 0 3
65657: PPUSH
65658: LD_VAR 0 4
65662: PPUSH
65663: LD_VAR 0 5
65667: PPUSH
65668: LD_VAR 0 6
65672: PPUSH
65673: LD_VAR 0 7
65677: PPUSH
65678: LD_VAR 0 8
65682: PPUSH
65683: LD_VAR 0 9
65687: PPUSH
65688: LD_VAR 0 10
65692: PPUSH
65693: LD_VAR 0 11
65697: PPUSH
65698: CALL 57989 0 11
65702: GO 65705
65704: POP
// end ;
65705: PPOPN 11
65707: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65708: LD_VAR 0 1
65712: PPUSH
65713: LD_VAR 0 2
65717: PPUSH
65718: LD_VAR 0 3
65722: PPUSH
65723: LD_VAR 0 4
65727: PPUSH
65728: LD_VAR 0 5
65732: PPUSH
65733: CALL 61400 0 5
// end ;
65737: PPOPN 5
65739: END
