// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 116 0 0
// PrepareNature ( 4 , 4 , 12 , 4 , 4 , 1 , 4 , natArea , watArea ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_INT 4
  13: PPUSH
  14: LD_INT 12
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 4
  22: PPUSH
  23: LD_INT 1
  25: PPUSH
  26: LD_INT 4
  28: PPUSH
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 7
  34: PPUSH
  35: CALL 35519 0 9
// if gameType = 1 then
  39: LD_EXP 2
  43: PUSH
  44: LD_INT 1
  46: EQUAL
  47: IFFALSE 111
// InitEcoMode ( [ 189 , 97 ] , [ [ 215 , 93 ] , [ 204 , 126 ] ] , [ attacksArea1 , attacksArea2 , attacksArea3 , attacksArea4 , attacksArea5 ] ) else
  49: LD_INT 189
  51: PUSH
  52: LD_INT 97
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: PPUSH
  59: LD_INT 215
  61: PUSH
  62: LD_INT 93
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: PUSH
  69: LD_INT 204
  71: PUSH
  72: LD_INT 126
  74: PUSH
  75: EMPTY
  76: LIST
  77: LIST
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PPUSH
  83: LD_INT 2
  85: PUSH
  86: LD_INT 3
  88: PUSH
  89: LD_INT 4
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: LD_INT 6
  97: PUSH
  98: EMPTY
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: PPUSH
 105: CALL 43064 0 3
 109: GO 115
// InitDefendMode ( ) ;
 111: CALL 165 0 0
// end ;
 115: END
// export debug , gameType ; function Init ; begin
 116: LD_INT 0
 118: PPUSH
// debug := 0 ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// if debug then
 127: LD_EXP 1
 131: IFFALSE 143
// gameType := 1 else
 133: LD_ADDR_EXP 2
 137: PUSH
 138: LD_INT 1
 140: ST_TO_ADDR
 141: GO 160
// gameType := GetMultiplayerSetting ( 50 ) + 1 ;
 143: LD_ADDR_EXP 2
 147: PUSH
 148: LD_INT 50
 150: PPUSH
 151: CALL_OW 426
 155: PUSH
 156: LD_INT 1
 158: PLUS
 159: ST_TO_ADDR
// end ; end_of_file
 160: LD_VAR 0 1
 164: RET
// export function InitDefendMode ( ) ; var buildingsList ; begin
 165: LD_INT 0
 167: PPUSH
 168: PPUSH
// buildingsList := [ [ 91 , 182 , 59 , 3 , 0 , 0 , 45 ] , [ 90 , 185 , 60 , 3 , 0 , 0 , 46 ] , [ 90 , 188 , 62 , 3 , 0 , 0 , 43 ] , [ 73 , 178 , 64 , 2 , 0 , 0 , 0 ] , [ 75 , 182 , 65 , 3 , 0 , 0 , 0 ] , [ 76 , 179 , 68 , 1 , 0 , 0 , 0 ] , [ 69 , 182 , 68 , 2 , 0 , 0 , 0 ] , [ 71 , 186 , 68 , 4 , 0 , 0 , 0 ] , [ 72 , 182 , 72 , 0 , 0 , 0 , 0 ] , [ 91 , 169 , 73 , 1 , 0 , 0 , 46 ] , [ 67 , 209 , 79 , 4 , 0 , 0 , 0 ] , [ 88 , 204 , 87 , 3 , 0 , 0 , 0 ] , [ 91 , 169 , 88 , 1 , 0 , 0 , 43 ] , [ 91 , 169 , 91 , 1 , 0 , 0 , 45 ] , [ 86 , 192 , 92 , 4 , 0 , 0 , 0 ] , [ 88 , 207 , 93 , 2 , 0 , 0 , 0 ] , [ 65 , 194 , 96 , 4 , 0 , 0 , 0 ] , [ 90 , 224 , 96 , 4 , 0 , 0 , 45 ] , [ 86 , 196 , 100 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 100 , 4 , 0 , 0 , 46 ] , [ 88 , 211 , 101 , 4 , 0 , 0 , 0 ] , [ 91 , 228 , 103 , 4 , 0 , 0 , 45 ] , [ 67 , 172 , 105 , 1 , 0 , 0 , 0 ] , [ 86 , 185 , 105 , 0 , 0 , 0 , 0 ] , [ 86 , 188 , 107 , 5 , 0 , 0 , 0 ] , [ 86 , 186 , 108 , 3 , 0 , 0 , 0 ] , [ 91 , 172 , 109 , 1 , 0 , 0 , 45 ] , [ 90 , 227 , 119 , 5 , 0 , 0 , 46 ] , [ 91 , 225 , 120 , 5 , 0 , 0 , 45 ] , [ 67 , 226 , 135 , 5 , 0 , 0 , 0 ] ] ;
 169: LD_ADDR_VAR 0 2
 173: PUSH
 174: LD_INT 91
 176: PUSH
 177: LD_INT 182
 179: PUSH
 180: LD_INT 59
 182: PUSH
 183: LD_INT 3
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 45
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 90
 206: PUSH
 207: LD_INT 185
 209: PUSH
 210: LD_INT 60
 212: PUSH
 213: LD_INT 3
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: LD_INT 46
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: LIST
 233: PUSH
 234: LD_INT 90
 236: PUSH
 237: LD_INT 188
 239: PUSH
 240: LD_INT 62
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 0
 251: PUSH
 252: LD_INT 43
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 73
 266: PUSH
 267: LD_INT 178
 269: PUSH
 270: LD_INT 64
 272: PUSH
 273: LD_INT 2
 275: PUSH
 276: LD_INT 0
 278: PUSH
 279: LD_INT 0
 281: PUSH
 282: LD_INT 0
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 75
 296: PUSH
 297: LD_INT 182
 299: PUSH
 300: LD_INT 65
 302: PUSH
 303: LD_INT 3
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: LD_INT 0
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: PUSH
 324: LD_INT 76
 326: PUSH
 327: LD_INT 179
 329: PUSH
 330: LD_INT 68
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 0
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 69
 356: PUSH
 357: LD_INT 182
 359: PUSH
 360: LD_INT 68
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 71
 386: PUSH
 387: LD_INT 186
 389: PUSH
 390: LD_INT 68
 392: PUSH
 393: LD_INT 4
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: LD_INT 72
 416: PUSH
 417: LD_INT 182
 419: PUSH
 420: LD_INT 72
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: LD_INT 0
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: PUSH
 444: LD_INT 91
 446: PUSH
 447: LD_INT 169
 449: PUSH
 450: LD_INT 73
 452: PUSH
 453: LD_INT 1
 455: PUSH
 456: LD_INT 0
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 46
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 67
 476: PUSH
 477: LD_INT 209
 479: PUSH
 480: LD_INT 79
 482: PUSH
 483: LD_INT 4
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 88
 506: PUSH
 507: LD_INT 204
 509: PUSH
 510: LD_INT 87
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: LD_INT 0
 518: PUSH
 519: LD_INT 0
 521: PUSH
 522: LD_INT 0
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 91
 536: PUSH
 537: LD_INT 169
 539: PUSH
 540: LD_INT 88
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 0
 551: PUSH
 552: LD_INT 43
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 91
 566: PUSH
 567: LD_INT 169
 569: PUSH
 570: LD_INT 91
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 0
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: LD_INT 45
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: LD_INT 86
 596: PUSH
 597: LD_INT 192
 599: PUSH
 600: LD_INT 92
 602: PUSH
 603: LD_INT 4
 605: PUSH
 606: LD_INT 0
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: LD_INT 0
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_INT 88
 626: PUSH
 627: LD_INT 207
 629: PUSH
 630: LD_INT 93
 632: PUSH
 633: LD_INT 2
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 65
 656: PUSH
 657: LD_INT 194
 659: PUSH
 660: LD_INT 96
 662: PUSH
 663: LD_INT 4
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 90
 686: PUSH
 687: LD_INT 224
 689: PUSH
 690: LD_INT 96
 692: PUSH
 693: LD_INT 4
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 45
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: PUSH
 714: LD_INT 86
 716: PUSH
 717: LD_INT 196
 719: PUSH
 720: LD_INT 100
 722: PUSH
 723: LD_INT 4
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 91
 746: PUSH
 747: LD_INT 228
 749: PUSH
 750: LD_INT 100
 752: PUSH
 753: LD_INT 4
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: LD_INT 0
 761: PUSH
 762: LD_INT 46
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 88
 776: PUSH
 777: LD_INT 211
 779: PUSH
 780: LD_INT 101
 782: PUSH
 783: LD_INT 4
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 0
 791: PUSH
 792: LD_INT 0
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 91
 806: PUSH
 807: LD_INT 228
 809: PUSH
 810: LD_INT 103
 812: PUSH
 813: LD_INT 4
 815: PUSH
 816: LD_INT 0
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 45
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 67
 836: PUSH
 837: LD_INT 172
 839: PUSH
 840: LD_INT 105
 842: PUSH
 843: LD_INT 1
 845: PUSH
 846: LD_INT 0
 848: PUSH
 849: LD_INT 0
 851: PUSH
 852: LD_INT 0
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 86
 866: PUSH
 867: LD_INT 185
 869: PUSH
 870: LD_INT 105
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: LD_INT 0
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 86
 896: PUSH
 897: LD_INT 188
 899: PUSH
 900: LD_INT 107
 902: PUSH
 903: LD_INT 5
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: LD_INT 0
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 86
 926: PUSH
 927: LD_INT 186
 929: PUSH
 930: LD_INT 108
 932: PUSH
 933: LD_INT 3
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 91
 956: PUSH
 957: LD_INT 172
 959: PUSH
 960: LD_INT 109
 962: PUSH
 963: LD_INT 1
 965: PUSH
 966: LD_INT 0
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 45
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 90
 986: PUSH
 987: LD_INT 227
 989: PUSH
 990: LD_INT 119
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 0
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 46
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 91
1016: PUSH
1017: LD_INT 225
1019: PUSH
1020: LD_INT 120
1022: PUSH
1023: LD_INT 5
1025: PUSH
1026: LD_INT 0
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: LD_INT 45
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_INT 67
1046: PUSH
1047: LD_INT 226
1049: PUSH
1050: LD_INT 135
1052: PUSH
1053: LD_INT 5
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: ST_TO_ADDR
// end ; end_of_file
1106: LD_VAR 0 1
1110: RET
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
1111: LD_VAR 0 1
1115: PPUSH
1116: LD_VAR 0 2
1120: PPUSH
1121: CALL 61789 0 2
// end ;
1125: PPOPN 2
1127: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
1128: LD_VAR 0 1
1132: PPUSH
1133: CALL 61669 0 1
// end ; end_of_file
1137: PPOPN 1
1139: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1140: LD_INT 0
1142: PPUSH
1143: PPUSH
// if exist_mode then
1144: LD_VAR 0 2
1148: IFFALSE 1173
// unit := CreateCharacter ( prefix & ident ) else
1150: LD_ADDR_VAR 0 5
1154: PUSH
1155: LD_VAR 0 3
1159: PUSH
1160: LD_VAR 0 1
1164: STR
1165: PPUSH
1166: CALL_OW 34
1170: ST_TO_ADDR
1171: GO 1188
// unit := NewCharacter ( ident ) ;
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_VAR 0 1
1182: PPUSH
1183: CALL_OW 25
1187: ST_TO_ADDR
// result := unit ;
1188: LD_ADDR_VAR 0 4
1192: PUSH
1193: LD_VAR 0 5
1197: ST_TO_ADDR
// end ;
1198: LD_VAR 0 4
1202: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1203: LD_INT 0
1205: PPUSH
1206: PPUSH
// if not side or not nation then
1207: LD_VAR 0 1
1211: NOT
1212: PUSH
1213: LD_VAR 0 2
1217: NOT
1218: OR
1219: IFFALSE 1223
// exit ;
1221: GO 1991
// case nation of nation_american :
1223: LD_VAR 0 2
1227: PUSH
1228: LD_INT 1
1230: DOUBLE
1231: EQUAL
1232: IFTRUE 1236
1234: GO 1450
1236: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1237: LD_ADDR_VAR 0 4
1241: PUSH
1242: LD_INT 35
1244: PUSH
1245: LD_INT 45
1247: PUSH
1248: LD_INT 46
1250: PUSH
1251: LD_INT 47
1253: PUSH
1254: LD_INT 82
1256: PUSH
1257: LD_INT 83
1259: PUSH
1260: LD_INT 84
1262: PUSH
1263: LD_INT 85
1265: PUSH
1266: LD_INT 86
1268: PUSH
1269: LD_INT 1
1271: PUSH
1272: LD_INT 2
1274: PUSH
1275: LD_INT 6
1277: PUSH
1278: LD_INT 15
1280: PUSH
1281: LD_INT 16
1283: PUSH
1284: LD_INT 7
1286: PUSH
1287: LD_INT 12
1289: PUSH
1290: LD_INT 13
1292: PUSH
1293: LD_INT 10
1295: PUSH
1296: LD_INT 14
1298: PUSH
1299: LD_INT 20
1301: PUSH
1302: LD_INT 21
1304: PUSH
1305: LD_INT 22
1307: PUSH
1308: LD_INT 25
1310: PUSH
1311: LD_INT 32
1313: PUSH
1314: LD_INT 27
1316: PUSH
1317: LD_INT 36
1319: PUSH
1320: LD_INT 69
1322: PUSH
1323: LD_INT 39
1325: PUSH
1326: LD_INT 34
1328: PUSH
1329: LD_INT 40
1331: PUSH
1332: LD_INT 48
1334: PUSH
1335: LD_INT 49
1337: PUSH
1338: LD_INT 50
1340: PUSH
1341: LD_INT 51
1343: PUSH
1344: LD_INT 52
1346: PUSH
1347: LD_INT 53
1349: PUSH
1350: LD_INT 54
1352: PUSH
1353: LD_INT 55
1355: PUSH
1356: LD_INT 56
1358: PUSH
1359: LD_INT 57
1361: PUSH
1362: LD_INT 58
1364: PUSH
1365: LD_INT 59
1367: PUSH
1368: LD_INT 60
1370: PUSH
1371: LD_INT 61
1373: PUSH
1374: LD_INT 62
1376: PUSH
1377: LD_INT 80
1379: PUSH
1380: LD_INT 82
1382: PUSH
1383: LD_INT 83
1385: PUSH
1386: LD_INT 84
1388: PUSH
1389: LD_INT 85
1391: PUSH
1392: LD_INT 86
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
1448: GO 1915
1450: LD_INT 2
1452: DOUBLE
1453: EQUAL
1454: IFTRUE 1458
1456: GO 1684
1458: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: LD_INT 35
1466: PUSH
1467: LD_INT 45
1469: PUSH
1470: LD_INT 46
1472: PUSH
1473: LD_INT 47
1475: PUSH
1476: LD_INT 82
1478: PUSH
1479: LD_INT 83
1481: PUSH
1482: LD_INT 84
1484: PUSH
1485: LD_INT 85
1487: PUSH
1488: LD_INT 87
1490: PUSH
1491: LD_INT 70
1493: PUSH
1494: LD_INT 1
1496: PUSH
1497: LD_INT 11
1499: PUSH
1500: LD_INT 3
1502: PUSH
1503: LD_INT 4
1505: PUSH
1506: LD_INT 5
1508: PUSH
1509: LD_INT 6
1511: PUSH
1512: LD_INT 15
1514: PUSH
1515: LD_INT 18
1517: PUSH
1518: LD_INT 7
1520: PUSH
1521: LD_INT 17
1523: PUSH
1524: LD_INT 8
1526: PUSH
1527: LD_INT 20
1529: PUSH
1530: LD_INT 21
1532: PUSH
1533: LD_INT 22
1535: PUSH
1536: LD_INT 72
1538: PUSH
1539: LD_INT 26
1541: PUSH
1542: LD_INT 69
1544: PUSH
1545: LD_INT 39
1547: PUSH
1548: LD_INT 40
1550: PUSH
1551: LD_INT 41
1553: PUSH
1554: LD_INT 42
1556: PUSH
1557: LD_INT 43
1559: PUSH
1560: LD_INT 48
1562: PUSH
1563: LD_INT 49
1565: PUSH
1566: LD_INT 50
1568: PUSH
1569: LD_INT 51
1571: PUSH
1572: LD_INT 52
1574: PUSH
1575: LD_INT 53
1577: PUSH
1578: LD_INT 54
1580: PUSH
1581: LD_INT 55
1583: PUSH
1584: LD_INT 56
1586: PUSH
1587: LD_INT 60
1589: PUSH
1590: LD_INT 61
1592: PUSH
1593: LD_INT 62
1595: PUSH
1596: LD_INT 66
1598: PUSH
1599: LD_INT 67
1601: PUSH
1602: LD_INT 68
1604: PUSH
1605: LD_INT 81
1607: PUSH
1608: LD_INT 82
1610: PUSH
1611: LD_INT 83
1613: PUSH
1614: LD_INT 84
1616: PUSH
1617: LD_INT 85
1619: PUSH
1620: LD_INT 87
1622: PUSH
1623: LD_INT 88
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: ST_TO_ADDR
1682: GO 1915
1684: LD_INT 3
1686: DOUBLE
1687: EQUAL
1688: IFTRUE 1692
1690: GO 1914
1692: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1693: LD_ADDR_VAR 0 4
1697: PUSH
1698: LD_INT 46
1700: PUSH
1701: LD_INT 47
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 2
1709: PUSH
1710: LD_INT 82
1712: PUSH
1713: LD_INT 83
1715: PUSH
1716: LD_INT 84
1718: PUSH
1719: LD_INT 85
1721: PUSH
1722: LD_INT 86
1724: PUSH
1725: LD_INT 11
1727: PUSH
1728: LD_INT 9
1730: PUSH
1731: LD_INT 20
1733: PUSH
1734: LD_INT 19
1736: PUSH
1737: LD_INT 21
1739: PUSH
1740: LD_INT 24
1742: PUSH
1743: LD_INT 22
1745: PUSH
1746: LD_INT 25
1748: PUSH
1749: LD_INT 28
1751: PUSH
1752: LD_INT 29
1754: PUSH
1755: LD_INT 30
1757: PUSH
1758: LD_INT 31
1760: PUSH
1761: LD_INT 37
1763: PUSH
1764: LD_INT 38
1766: PUSH
1767: LD_INT 32
1769: PUSH
1770: LD_INT 27
1772: PUSH
1773: LD_INT 33
1775: PUSH
1776: LD_INT 69
1778: PUSH
1779: LD_INT 39
1781: PUSH
1782: LD_INT 34
1784: PUSH
1785: LD_INT 40
1787: PUSH
1788: LD_INT 71
1790: PUSH
1791: LD_INT 23
1793: PUSH
1794: LD_INT 44
1796: PUSH
1797: LD_INT 48
1799: PUSH
1800: LD_INT 49
1802: PUSH
1803: LD_INT 50
1805: PUSH
1806: LD_INT 51
1808: PUSH
1809: LD_INT 52
1811: PUSH
1812: LD_INT 53
1814: PUSH
1815: LD_INT 54
1817: PUSH
1818: LD_INT 55
1820: PUSH
1821: LD_INT 56
1823: PUSH
1824: LD_INT 57
1826: PUSH
1827: LD_INT 58
1829: PUSH
1830: LD_INT 59
1832: PUSH
1833: LD_INT 63
1835: PUSH
1836: LD_INT 64
1838: PUSH
1839: LD_INT 65
1841: PUSH
1842: LD_INT 82
1844: PUSH
1845: LD_INT 83
1847: PUSH
1848: LD_INT 84
1850: PUSH
1851: LD_INT 85
1853: PUSH
1854: LD_INT 86
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
1912: GO 1915
1914: POP
// if state > - 1 and state < 3 then
1915: LD_VAR 0 3
1919: PUSH
1920: LD_INT 1
1922: NEG
1923: GREATER
1924: PUSH
1925: LD_VAR 0 3
1929: PUSH
1930: LD_INT 3
1932: LESS
1933: AND
1934: IFFALSE 1991
// for i in result do
1936: LD_ADDR_VAR 0 5
1940: PUSH
1941: LD_VAR 0 4
1945: PUSH
1946: FOR_IN
1947: IFFALSE 1989
// if GetTech ( i , side ) <> state then
1949: LD_VAR 0 5
1953: PPUSH
1954: LD_VAR 0 1
1958: PPUSH
1959: CALL_OW 321
1963: PUSH
1964: LD_VAR 0 3
1968: NONEQUAL
1969: IFFALSE 1987
// result := result diff i ;
1971: LD_ADDR_VAR 0 4
1975: PUSH
1976: LD_VAR 0 4
1980: PUSH
1981: LD_VAR 0 5
1985: DIFF
1986: ST_TO_ADDR
1987: GO 1946
1989: POP
1990: POP
// end ;
1991: LD_VAR 0 4
1995: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1996: LD_INT 0
1998: PPUSH
1999: PPUSH
2000: PPUSH
// result := true ;
2001: LD_ADDR_VAR 0 3
2005: PUSH
2006: LD_INT 1
2008: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2009: LD_ADDR_VAR 0 5
2013: PUSH
2014: LD_VAR 0 2
2018: PPUSH
2019: CALL_OW 480
2023: ST_TO_ADDR
// if not tmp then
2024: LD_VAR 0 5
2028: NOT
2029: IFFALSE 2033
// exit ;
2031: GO 2082
// for i in tmp do
2033: LD_ADDR_VAR 0 4
2037: PUSH
2038: LD_VAR 0 5
2042: PUSH
2043: FOR_IN
2044: IFFALSE 2080
// if GetTech ( i , side ) <> state_researched then
2046: LD_VAR 0 4
2050: PPUSH
2051: LD_VAR 0 1
2055: PPUSH
2056: CALL_OW 321
2060: PUSH
2061: LD_INT 2
2063: NONEQUAL
2064: IFFALSE 2078
// begin result := false ;
2066: LD_ADDR_VAR 0 3
2070: PUSH
2071: LD_INT 0
2073: ST_TO_ADDR
// exit ;
2074: POP
2075: POP
2076: GO 2082
// end ;
2078: GO 2043
2080: POP
2081: POP
// end ;
2082: LD_VAR 0 3
2086: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2087: LD_INT 0
2089: PPUSH
2090: PPUSH
2091: PPUSH
2092: PPUSH
2093: PPUSH
2094: PPUSH
2095: PPUSH
2096: PPUSH
2097: PPUSH
2098: PPUSH
2099: PPUSH
2100: PPUSH
2101: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2102: LD_VAR 0 1
2106: NOT
2107: PUSH
2108: LD_VAR 0 1
2112: PPUSH
2113: CALL_OW 257
2117: PUSH
2118: LD_INT 9
2120: NONEQUAL
2121: OR
2122: IFFALSE 2126
// exit ;
2124: GO 2699
// side := GetSide ( unit ) ;
2126: LD_ADDR_VAR 0 9
2130: PUSH
2131: LD_VAR 0 1
2135: PPUSH
2136: CALL_OW 255
2140: ST_TO_ADDR
// tech_space := tech_spacanom ;
2141: LD_ADDR_VAR 0 12
2145: PUSH
2146: LD_INT 29
2148: ST_TO_ADDR
// tech_time := tech_taurad ;
2149: LD_ADDR_VAR 0 13
2153: PUSH
2154: LD_INT 28
2156: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2157: LD_ADDR_VAR 0 11
2161: PUSH
2162: LD_VAR 0 1
2166: PPUSH
2167: CALL_OW 310
2171: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2172: LD_VAR 0 11
2176: PPUSH
2177: CALL_OW 247
2181: PUSH
2182: LD_INT 2
2184: EQUAL
2185: IFFALSE 2189
// exit ;
2187: GO 2699
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2189: LD_ADDR_VAR 0 8
2193: PUSH
2194: LD_INT 81
2196: PUSH
2197: LD_VAR 0 9
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 3
2208: PUSH
2209: LD_INT 21
2211: PUSH
2212: LD_INT 3
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PPUSH
2227: CALL_OW 69
2231: ST_TO_ADDR
// if not tmp then
2232: LD_VAR 0 8
2236: NOT
2237: IFFALSE 2241
// exit ;
2239: GO 2699
// if in_unit then
2241: LD_VAR 0 11
2245: IFFALSE 2269
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2247: LD_ADDR_VAR 0 10
2251: PUSH
2252: LD_VAR 0 8
2256: PPUSH
2257: LD_VAR 0 11
2261: PPUSH
2262: CALL_OW 74
2266: ST_TO_ADDR
2267: GO 2289
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2269: LD_ADDR_VAR 0 10
2273: PUSH
2274: LD_VAR 0 8
2278: PPUSH
2279: LD_VAR 0 1
2283: PPUSH
2284: CALL_OW 74
2288: ST_TO_ADDR
// if not enemy then
2289: LD_VAR 0 10
2293: NOT
2294: IFFALSE 2298
// exit ;
2296: GO 2699
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2298: LD_VAR 0 11
2302: PUSH
2303: LD_VAR 0 11
2307: PPUSH
2308: LD_VAR 0 10
2312: PPUSH
2313: CALL_OW 296
2317: PUSH
2318: LD_INT 13
2320: GREATER
2321: AND
2322: PUSH
2323: LD_VAR 0 1
2327: PPUSH
2328: LD_VAR 0 10
2332: PPUSH
2333: CALL_OW 296
2337: PUSH
2338: LD_INT 12
2340: GREATER
2341: OR
2342: IFFALSE 2346
// exit ;
2344: GO 2699
// missile := [ 1 ] ;
2346: LD_ADDR_VAR 0 14
2350: PUSH
2351: LD_INT 1
2353: PUSH
2354: EMPTY
2355: LIST
2356: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2357: LD_VAR 0 9
2361: PPUSH
2362: LD_VAR 0 12
2366: PPUSH
2367: CALL_OW 325
2371: IFFALSE 2400
// missile := Replace ( missile , missile + 1 , 2 ) ;
2373: LD_ADDR_VAR 0 14
2377: PUSH
2378: LD_VAR 0 14
2382: PPUSH
2383: LD_VAR 0 14
2387: PUSH
2388: LD_INT 1
2390: PLUS
2391: PPUSH
2392: LD_INT 2
2394: PPUSH
2395: CALL_OW 1
2399: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2400: LD_VAR 0 9
2404: PPUSH
2405: LD_VAR 0 13
2409: PPUSH
2410: CALL_OW 325
2414: PUSH
2415: LD_VAR 0 10
2419: PPUSH
2420: CALL_OW 255
2424: PPUSH
2425: LD_VAR 0 13
2429: PPUSH
2430: CALL_OW 325
2434: NOT
2435: AND
2436: IFFALSE 2465
// missile := Replace ( missile , missile + 1 , 3 ) ;
2438: LD_ADDR_VAR 0 14
2442: PUSH
2443: LD_VAR 0 14
2447: PPUSH
2448: LD_VAR 0 14
2452: PUSH
2453: LD_INT 1
2455: PLUS
2456: PPUSH
2457: LD_INT 3
2459: PPUSH
2460: CALL_OW 1
2464: ST_TO_ADDR
// if missile < 2 then
2465: LD_VAR 0 14
2469: PUSH
2470: LD_INT 2
2472: LESS
2473: IFFALSE 2477
// exit ;
2475: GO 2699
// x := GetX ( enemy ) ;
2477: LD_ADDR_VAR 0 4
2481: PUSH
2482: LD_VAR 0 10
2486: PPUSH
2487: CALL_OW 250
2491: ST_TO_ADDR
// y := GetY ( enemy ) ;
2492: LD_ADDR_VAR 0 5
2496: PUSH
2497: LD_VAR 0 10
2501: PPUSH
2502: CALL_OW 251
2506: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2507: LD_ADDR_VAR 0 6
2511: PUSH
2512: LD_VAR 0 4
2516: PUSH
2517: LD_INT 1
2519: NEG
2520: PPUSH
2521: LD_INT 1
2523: PPUSH
2524: CALL_OW 12
2528: PLUS
2529: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2530: LD_ADDR_VAR 0 7
2534: PUSH
2535: LD_VAR 0 5
2539: PUSH
2540: LD_INT 1
2542: NEG
2543: PPUSH
2544: LD_INT 1
2546: PPUSH
2547: CALL_OW 12
2551: PLUS
2552: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2553: LD_VAR 0 6
2557: PPUSH
2558: LD_VAR 0 7
2562: PPUSH
2563: CALL_OW 488
2567: NOT
2568: IFFALSE 2590
// begin _x := x ;
2570: LD_ADDR_VAR 0 6
2574: PUSH
2575: LD_VAR 0 4
2579: ST_TO_ADDR
// _y := y ;
2580: LD_ADDR_VAR 0 7
2584: PUSH
2585: LD_VAR 0 5
2589: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2590: LD_ADDR_VAR 0 3
2594: PUSH
2595: LD_INT 1
2597: PPUSH
2598: LD_VAR 0 14
2602: PPUSH
2603: CALL_OW 12
2607: ST_TO_ADDR
// case i of 1 :
2608: LD_VAR 0 3
2612: PUSH
2613: LD_INT 1
2615: DOUBLE
2616: EQUAL
2617: IFTRUE 2621
2619: GO 2638
2621: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2622: LD_VAR 0 1
2626: PPUSH
2627: LD_VAR 0 10
2631: PPUSH
2632: CALL_OW 115
2636: GO 2699
2638: LD_INT 2
2640: DOUBLE
2641: EQUAL
2642: IFTRUE 2646
2644: GO 2668
2646: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2647: LD_VAR 0 1
2651: PPUSH
2652: LD_VAR 0 6
2656: PPUSH
2657: LD_VAR 0 7
2661: PPUSH
2662: CALL_OW 153
2666: GO 2699
2668: LD_INT 3
2670: DOUBLE
2671: EQUAL
2672: IFTRUE 2676
2674: GO 2698
2676: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2677: LD_VAR 0 1
2681: PPUSH
2682: LD_VAR 0 6
2686: PPUSH
2687: LD_VAR 0 7
2691: PPUSH
2692: CALL_OW 154
2696: GO 2699
2698: POP
// end ;
2699: LD_VAR 0 2
2703: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2704: LD_INT 0
2706: PPUSH
2707: PPUSH
2708: PPUSH
2709: PPUSH
2710: PPUSH
2711: PPUSH
// if not unit or not building then
2712: LD_VAR 0 1
2716: NOT
2717: PUSH
2718: LD_VAR 0 2
2722: NOT
2723: OR
2724: IFFALSE 2728
// exit ;
2726: GO 2886
// x := GetX ( building ) ;
2728: LD_ADDR_VAR 0 5
2732: PUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: CALL_OW 250
2742: ST_TO_ADDR
// y := GetY ( building ) ;
2743: LD_ADDR_VAR 0 6
2747: PUSH
2748: LD_VAR 0 2
2752: PPUSH
2753: CALL_OW 251
2757: ST_TO_ADDR
// for i = 0 to 5 do
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: DOUBLE
2764: LD_INT 0
2766: DEC
2767: ST_TO_ADDR
2768: LD_INT 5
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2884
// begin _x := ShiftX ( x , i , 3 ) ;
2774: LD_ADDR_VAR 0 7
2778: PUSH
2779: LD_VAR 0 5
2783: PPUSH
2784: LD_VAR 0 4
2788: PPUSH
2789: LD_INT 3
2791: PPUSH
2792: CALL_OW 272
2796: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2797: LD_ADDR_VAR 0 8
2801: PUSH
2802: LD_VAR 0 6
2806: PPUSH
2807: LD_VAR 0 4
2811: PPUSH
2812: LD_INT 3
2814: PPUSH
2815: CALL_OW 273
2819: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2820: LD_VAR 0 7
2824: PPUSH
2825: LD_VAR 0 8
2829: PPUSH
2830: CALL_OW 488
2834: NOT
2835: IFFALSE 2839
// continue ;
2837: GO 2771
// if HexInfo ( _x , _y ) = 0 then
2839: LD_VAR 0 7
2843: PPUSH
2844: LD_VAR 0 8
2848: PPUSH
2849: CALL_OW 428
2853: PUSH
2854: LD_INT 0
2856: EQUAL
2857: IFFALSE 2882
// begin ComMoveXY ( unit , _x , _y ) ;
2859: LD_VAR 0 1
2863: PPUSH
2864: LD_VAR 0 7
2868: PPUSH
2869: LD_VAR 0 8
2873: PPUSH
2874: CALL_OW 111
// exit ;
2878: POP
2879: POP
2880: GO 2886
// end ; end ;
2882: GO 2771
2884: POP
2885: POP
// end ;
2886: LD_VAR 0 3
2890: RET
// export function ScanBase ( side , base_area ) ; begin
2891: LD_INT 0
2893: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_VAR 0 2
2903: PPUSH
2904: LD_INT 81
2906: PUSH
2907: LD_VAR 0 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PPUSH
2916: CALL_OW 70
2920: ST_TO_ADDR
// end ;
2921: LD_VAR 0 3
2925: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2926: LD_INT 0
2928: PPUSH
2929: PPUSH
2930: PPUSH
2931: PPUSH
// result := false ;
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: LD_INT 0
2939: ST_TO_ADDR
// side := GetSide ( unit ) ;
2940: LD_ADDR_VAR 0 3
2944: PUSH
2945: LD_VAR 0 1
2949: PPUSH
2950: CALL_OW 255
2954: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2955: LD_ADDR_VAR 0 4
2959: PUSH
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 248
2969: ST_TO_ADDR
// case nat of 1 :
2970: LD_VAR 0 4
2974: PUSH
2975: LD_INT 1
2977: DOUBLE
2978: EQUAL
2979: IFTRUE 2983
2981: GO 2994
2983: POP
// tech := tech_lassight ; 2 :
2984: LD_ADDR_VAR 0 5
2988: PUSH
2989: LD_INT 12
2991: ST_TO_ADDR
2992: GO 3033
2994: LD_INT 2
2996: DOUBLE
2997: EQUAL
2998: IFTRUE 3002
3000: GO 3013
3002: POP
// tech := tech_mortar ; 3 :
3003: LD_ADDR_VAR 0 5
3007: PUSH
3008: LD_INT 41
3010: ST_TO_ADDR
3011: GO 3033
3013: LD_INT 3
3015: DOUBLE
3016: EQUAL
3017: IFTRUE 3021
3019: GO 3032
3021: POP
// tech := tech_bazooka ; end ;
3022: LD_ADDR_VAR 0 5
3026: PUSH
3027: LD_INT 44
3029: ST_TO_ADDR
3030: GO 3033
3032: POP
// if Researched ( side , tech ) then
3033: LD_VAR 0 3
3037: PPUSH
3038: LD_VAR 0 5
3042: PPUSH
3043: CALL_OW 325
3047: IFFALSE 3074
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3049: LD_ADDR_VAR 0 2
3053: PUSH
3054: LD_INT 5
3056: PUSH
3057: LD_INT 8
3059: PUSH
3060: LD_INT 9
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: LIST
3067: PUSH
3068: LD_VAR 0 4
3072: ARRAY
3073: ST_TO_ADDR
// end ;
3074: LD_VAR 0 2
3078: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// if not mines then
3084: LD_VAR 0 2
3088: NOT
3089: IFFALSE 3093
// exit ;
3091: GO 3237
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3093: LD_ADDR_VAR 0 5
3097: PUSH
3098: LD_INT 81
3100: PUSH
3101: LD_VAR 0 1
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: PUSH
3110: LD_INT 3
3112: PUSH
3113: LD_INT 21
3115: PUSH
3116: LD_INT 3
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: ST_TO_ADDR
// for i in mines do
3136: LD_ADDR_VAR 0 4
3140: PUSH
3141: LD_VAR 0 2
3145: PUSH
3146: FOR_IN
3147: IFFALSE 3235
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3149: LD_VAR 0 4
3153: PUSH
3154: LD_INT 1
3156: ARRAY
3157: PPUSH
3158: LD_VAR 0 4
3162: PUSH
3163: LD_INT 2
3165: ARRAY
3166: PPUSH
3167: CALL_OW 458
3171: NOT
3172: IFFALSE 3176
// continue ;
3174: GO 3146
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3176: LD_VAR 0 4
3180: PUSH
3181: LD_INT 1
3183: ARRAY
3184: PPUSH
3185: LD_VAR 0 4
3189: PUSH
3190: LD_INT 2
3192: ARRAY
3193: PPUSH
3194: CALL_OW 428
3198: PUSH
3199: LD_VAR 0 5
3203: IN
3204: IFFALSE 3233
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3206: LD_VAR 0 4
3210: PUSH
3211: LD_INT 1
3213: ARRAY
3214: PPUSH
3215: LD_VAR 0 4
3219: PUSH
3220: LD_INT 2
3222: ARRAY
3223: PPUSH
3224: LD_VAR 0 1
3228: PPUSH
3229: CALL_OW 456
// end ;
3233: GO 3146
3235: POP
3236: POP
// end ;
3237: LD_VAR 0 3
3241: RET
// export function Count ( array ) ; begin
3242: LD_INT 0
3244: PPUSH
// result := array + 0 ;
3245: LD_ADDR_VAR 0 2
3249: PUSH
3250: LD_VAR 0 1
3254: PUSH
3255: LD_INT 0
3257: PLUS
3258: ST_TO_ADDR
// end ;
3259: LD_VAR 0 2
3263: RET
// export function IsEmpty ( building ) ; begin
3264: LD_INT 0
3266: PPUSH
// if not building then
3267: LD_VAR 0 1
3271: NOT
3272: IFFALSE 3276
// exit ;
3274: GO 3319
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3276: LD_ADDR_VAR 0 2
3280: PUSH
3281: LD_VAR 0 1
3285: PUSH
3286: LD_INT 22
3288: PUSH
3289: LD_VAR 0 1
3293: PPUSH
3294: CALL_OW 255
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: PUSH
3303: LD_INT 58
3305: PUSH
3306: EMPTY
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PPUSH
3313: CALL_OW 69
3317: IN
3318: ST_TO_ADDR
// end ;
3319: LD_VAR 0 2
3323: RET
// export function IsNotFull ( building ) ; var places ; begin
3324: LD_INT 0
3326: PPUSH
3327: PPUSH
// if not building then
3328: LD_VAR 0 1
3332: NOT
3333: IFFALSE 3337
// exit ;
3335: GO 3365
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: LD_VAR 0 1
3346: PPUSH
3347: LD_INT 3
3349: PUSH
3350: LD_INT 62
3352: PUSH
3353: EMPTY
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PPUSH
3360: CALL_OW 72
3364: ST_TO_ADDR
// end ;
3365: LD_VAR 0 2
3369: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3370: LD_INT 0
3372: PPUSH
3373: PPUSH
3374: PPUSH
3375: PPUSH
// tmp := [ ] ;
3376: LD_ADDR_VAR 0 3
3380: PUSH
3381: EMPTY
3382: ST_TO_ADDR
// list := [ ] ;
3383: LD_ADDR_VAR 0 5
3387: PUSH
3388: EMPTY
3389: ST_TO_ADDR
// for i = 16 to 25 do
3390: LD_ADDR_VAR 0 4
3394: PUSH
3395: DOUBLE
3396: LD_INT 16
3398: DEC
3399: ST_TO_ADDR
3400: LD_INT 25
3402: PUSH
3403: FOR_TO
3404: IFFALSE 3477
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3406: LD_ADDR_VAR 0 3
3410: PUSH
3411: LD_VAR 0 3
3415: PUSH
3416: LD_INT 22
3418: PUSH
3419: LD_VAR 0 1
3423: PPUSH
3424: CALL_OW 255
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: PUSH
3433: LD_INT 91
3435: PUSH
3436: LD_VAR 0 1
3440: PUSH
3441: LD_INT 6
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 30
3451: PUSH
3452: LD_VAR 0 4
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: LIST
3465: PUSH
3466: EMPTY
3467: LIST
3468: PPUSH
3469: CALL_OW 69
3473: ADD
3474: ST_TO_ADDR
3475: GO 3403
3477: POP
3478: POP
// for i = 1 to tmp do
3479: LD_ADDR_VAR 0 4
3483: PUSH
3484: DOUBLE
3485: LD_INT 1
3487: DEC
3488: ST_TO_ADDR
3489: LD_VAR 0 3
3493: PUSH
3494: FOR_TO
3495: IFFALSE 3583
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3497: LD_ADDR_VAR 0 5
3501: PUSH
3502: LD_VAR 0 5
3506: PUSH
3507: LD_VAR 0 3
3511: PUSH
3512: LD_VAR 0 4
3516: ARRAY
3517: PPUSH
3518: CALL_OW 266
3522: PUSH
3523: LD_VAR 0 3
3527: PUSH
3528: LD_VAR 0 4
3532: ARRAY
3533: PPUSH
3534: CALL_OW 250
3538: PUSH
3539: LD_VAR 0 3
3543: PUSH
3544: LD_VAR 0 4
3548: ARRAY
3549: PPUSH
3550: CALL_OW 251
3554: PUSH
3555: LD_VAR 0 3
3559: PUSH
3560: LD_VAR 0 4
3564: ARRAY
3565: PPUSH
3566: CALL_OW 254
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: PUSH
3577: EMPTY
3578: LIST
3579: ADD
3580: ST_TO_ADDR
3581: GO 3494
3583: POP
3584: POP
// result := list ;
3585: LD_ADDR_VAR 0 2
3589: PUSH
3590: LD_VAR 0 5
3594: ST_TO_ADDR
// end ;
3595: LD_VAR 0 2
3599: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3600: LD_INT 0
3602: PPUSH
3603: PPUSH
3604: PPUSH
3605: PPUSH
3606: PPUSH
3607: PPUSH
3608: PPUSH
// if not factory then
3609: LD_VAR 0 1
3613: NOT
3614: IFFALSE 3618
// exit ;
3616: GO 4211
// if control = control_apeman then
3618: LD_VAR 0 4
3622: PUSH
3623: LD_INT 5
3625: EQUAL
3626: IFFALSE 3735
// begin tmp := UnitsInside ( factory ) ;
3628: LD_ADDR_VAR 0 8
3632: PUSH
3633: LD_VAR 0 1
3637: PPUSH
3638: CALL_OW 313
3642: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3643: LD_VAR 0 8
3647: PPUSH
3648: LD_INT 25
3650: PUSH
3651: LD_INT 12
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: PPUSH
3658: CALL_OW 72
3662: NOT
3663: IFFALSE 3673
// control := control_manual ;
3665: LD_ADDR_VAR 0 4
3669: PUSH
3670: LD_INT 1
3672: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3673: LD_ADDR_VAR 0 8
3677: PUSH
3678: LD_VAR 0 1
3682: PPUSH
3683: CALL 3370 0 1
3687: ST_TO_ADDR
// if tmp then
3688: LD_VAR 0 8
3692: IFFALSE 3735
// begin for i in tmp do
3694: LD_ADDR_VAR 0 7
3698: PUSH
3699: LD_VAR 0 8
3703: PUSH
3704: FOR_IN
3705: IFFALSE 3733
// if i [ 1 ] = b_ext_radio then
3707: LD_VAR 0 7
3711: PUSH
3712: LD_INT 1
3714: ARRAY
3715: PUSH
3716: LD_INT 22
3718: EQUAL
3719: IFFALSE 3731
// begin control := control_remote ;
3721: LD_ADDR_VAR 0 4
3725: PUSH
3726: LD_INT 2
3728: ST_TO_ADDR
// break ;
3729: GO 3733
// end ;
3731: GO 3704
3733: POP
3734: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3735: LD_VAR 0 1
3739: PPUSH
3740: LD_VAR 0 2
3744: PPUSH
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_VAR 0 4
3754: PPUSH
3755: LD_VAR 0 5
3759: PPUSH
3760: CALL_OW 448
3764: IFFALSE 3799
// begin result := [ chassis , engine , control , weapon ] ;
3766: LD_ADDR_VAR 0 6
3770: PUSH
3771: LD_VAR 0 2
3775: PUSH
3776: LD_VAR 0 3
3780: PUSH
3781: LD_VAR 0 4
3785: PUSH
3786: LD_VAR 0 5
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: ST_TO_ADDR
// exit ;
3797: GO 4211
// end ; _chassis := AvailableChassisList ( factory ) ;
3799: LD_ADDR_VAR 0 9
3803: PUSH
3804: LD_VAR 0 1
3808: PPUSH
3809: CALL_OW 475
3813: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3814: LD_ADDR_VAR 0 11
3818: PUSH
3819: LD_VAR 0 1
3823: PPUSH
3824: CALL_OW 476
3828: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3829: LD_ADDR_VAR 0 12
3833: PUSH
3834: LD_VAR 0 1
3838: PPUSH
3839: CALL_OW 477
3843: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3844: LD_ADDR_VAR 0 10
3848: PUSH
3849: LD_VAR 0 1
3853: PPUSH
3854: CALL_OW 478
3858: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3859: LD_VAR 0 9
3863: NOT
3864: PUSH
3865: LD_VAR 0 11
3869: NOT
3870: OR
3871: PUSH
3872: LD_VAR 0 12
3876: NOT
3877: OR
3878: PUSH
3879: LD_VAR 0 10
3883: NOT
3884: OR
3885: IFFALSE 3920
// begin result := [ chassis , engine , control , weapon ] ;
3887: LD_ADDR_VAR 0 6
3891: PUSH
3892: LD_VAR 0 2
3896: PUSH
3897: LD_VAR 0 3
3901: PUSH
3902: LD_VAR 0 4
3906: PUSH
3907: LD_VAR 0 5
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: ST_TO_ADDR
// exit ;
3918: GO 4211
// end ; if not chassis in _chassis then
3920: LD_VAR 0 2
3924: PUSH
3925: LD_VAR 0 9
3929: IN
3930: NOT
3931: IFFALSE 3957
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3933: LD_ADDR_VAR 0 2
3937: PUSH
3938: LD_VAR 0 9
3942: PUSH
3943: LD_INT 1
3945: PPUSH
3946: LD_VAR 0 9
3950: PPUSH
3951: CALL_OW 12
3955: ARRAY
3956: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3957: LD_VAR 0 2
3961: PPUSH
3962: LD_VAR 0 3
3966: PPUSH
3967: CALL 4216 0 2
3971: NOT
3972: IFFALSE 4031
// repeat engine := _engine [ 1 ] ;
3974: LD_ADDR_VAR 0 3
3978: PUSH
3979: LD_VAR 0 11
3983: PUSH
3984: LD_INT 1
3986: ARRAY
3987: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3988: LD_ADDR_VAR 0 11
3992: PUSH
3993: LD_VAR 0 11
3997: PPUSH
3998: LD_INT 1
4000: PPUSH
4001: CALL_OW 3
4005: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4006: LD_VAR 0 2
4010: PPUSH
4011: LD_VAR 0 3
4015: PPUSH
4016: CALL 4216 0 2
4020: PUSH
4021: LD_VAR 0 11
4025: PUSH
4026: EMPTY
4027: EQUAL
4028: OR
4029: IFFALSE 3974
// if not control in _control then
4031: LD_VAR 0 4
4035: PUSH
4036: LD_VAR 0 12
4040: IN
4041: NOT
4042: IFFALSE 4068
// control := _control [ rand ( 1 , _control ) ] ;
4044: LD_ADDR_VAR 0 4
4048: PUSH
4049: LD_VAR 0 12
4053: PUSH
4054: LD_INT 1
4056: PPUSH
4057: LD_VAR 0 12
4061: PPUSH
4062: CALL_OW 12
4066: ARRAY
4067: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_VAR 0 5
4077: PPUSH
4078: CALL 4436 0 2
4082: NOT
4083: IFFALSE 4142
// repeat weapon := _weapon [ 1 ] ;
4085: LD_ADDR_VAR 0 5
4089: PUSH
4090: LD_VAR 0 10
4094: PUSH
4095: LD_INT 1
4097: ARRAY
4098: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4099: LD_ADDR_VAR 0 10
4103: PUSH
4104: LD_VAR 0 10
4108: PPUSH
4109: LD_INT 1
4111: PPUSH
4112: CALL_OW 3
4116: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4117: LD_VAR 0 2
4121: PPUSH
4122: LD_VAR 0 5
4126: PPUSH
4127: CALL 4436 0 2
4131: PUSH
4132: LD_VAR 0 10
4136: PUSH
4137: EMPTY
4138: EQUAL
4139: OR
4140: IFFALSE 4085
// result := [ ] ;
4142: LD_ADDR_VAR 0 6
4146: PUSH
4147: EMPTY
4148: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4149: LD_VAR 0 1
4153: PPUSH
4154: LD_VAR 0 2
4158: PPUSH
4159: LD_VAR 0 3
4163: PPUSH
4164: LD_VAR 0 4
4168: PPUSH
4169: LD_VAR 0 5
4173: PPUSH
4174: CALL_OW 448
4178: IFFALSE 4211
// result := [ chassis , engine , control , weapon ] ;
4180: LD_ADDR_VAR 0 6
4184: PUSH
4185: LD_VAR 0 2
4189: PUSH
4190: LD_VAR 0 3
4194: PUSH
4195: LD_VAR 0 4
4199: PUSH
4200: LD_VAR 0 5
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: ST_TO_ADDR
// end ;
4211: LD_VAR 0 6
4215: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4216: LD_INT 0
4218: PPUSH
// if not chassis or not engine then
4219: LD_VAR 0 1
4223: NOT
4224: PUSH
4225: LD_VAR 0 2
4229: NOT
4230: OR
4231: IFFALSE 4235
// exit ;
4233: GO 4431
// case engine of engine_solar :
4235: LD_VAR 0 2
4239: PUSH
4240: LD_INT 2
4242: DOUBLE
4243: EQUAL
4244: IFTRUE 4248
4246: GO 4286
4248: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4249: LD_ADDR_VAR 0 3
4253: PUSH
4254: LD_INT 11
4256: PUSH
4257: LD_INT 12
4259: PUSH
4260: LD_INT 13
4262: PUSH
4263: LD_INT 14
4265: PUSH
4266: LD_INT 1
4268: PUSH
4269: LD_INT 2
4271: PUSH
4272: LD_INT 3
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: ST_TO_ADDR
4284: GO 4415
4286: LD_INT 1
4288: DOUBLE
4289: EQUAL
4290: IFTRUE 4294
4292: GO 4356
4294: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4295: LD_ADDR_VAR 0 3
4299: PUSH
4300: LD_INT 11
4302: PUSH
4303: LD_INT 12
4305: PUSH
4306: LD_INT 13
4308: PUSH
4309: LD_INT 14
4311: PUSH
4312: LD_INT 1
4314: PUSH
4315: LD_INT 2
4317: PUSH
4318: LD_INT 3
4320: PUSH
4321: LD_INT 4
4323: PUSH
4324: LD_INT 5
4326: PUSH
4327: LD_INT 21
4329: PUSH
4330: LD_INT 23
4332: PUSH
4333: LD_INT 22
4335: PUSH
4336: LD_INT 24
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: ST_TO_ADDR
4354: GO 4415
4356: LD_INT 3
4358: DOUBLE
4359: EQUAL
4360: IFTRUE 4364
4362: GO 4414
4364: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4365: LD_ADDR_VAR 0 3
4369: PUSH
4370: LD_INT 13
4372: PUSH
4373: LD_INT 14
4375: PUSH
4376: LD_INT 2
4378: PUSH
4379: LD_INT 3
4381: PUSH
4382: LD_INT 4
4384: PUSH
4385: LD_INT 5
4387: PUSH
4388: LD_INT 21
4390: PUSH
4391: LD_INT 22
4393: PUSH
4394: LD_INT 23
4396: PUSH
4397: LD_INT 24
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: ST_TO_ADDR
4412: GO 4415
4414: POP
// result := ( chassis in result ) ;
4415: LD_ADDR_VAR 0 3
4419: PUSH
4420: LD_VAR 0 1
4424: PUSH
4425: LD_VAR 0 3
4429: IN
4430: ST_TO_ADDR
// end ;
4431: LD_VAR 0 3
4435: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4436: LD_INT 0
4438: PPUSH
// if not chassis or not weapon then
4439: LD_VAR 0 1
4443: NOT
4444: PUSH
4445: LD_VAR 0 2
4449: NOT
4450: OR
4451: IFFALSE 4455
// exit ;
4453: GO 5515
// case weapon of us_machine_gun :
4455: LD_VAR 0 2
4459: PUSH
4460: LD_INT 2
4462: DOUBLE
4463: EQUAL
4464: IFTRUE 4468
4466: GO 4498
4468: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4469: LD_ADDR_VAR 0 3
4473: PUSH
4474: LD_INT 1
4476: PUSH
4477: LD_INT 2
4479: PUSH
4480: LD_INT 3
4482: PUSH
4483: LD_INT 4
4485: PUSH
4486: LD_INT 5
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: ST_TO_ADDR
4496: GO 5499
4498: LD_INT 3
4500: DOUBLE
4501: EQUAL
4502: IFTRUE 4506
4504: GO 4536
4506: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4507: LD_ADDR_VAR 0 3
4511: PUSH
4512: LD_INT 1
4514: PUSH
4515: LD_INT 2
4517: PUSH
4518: LD_INT 3
4520: PUSH
4521: LD_INT 4
4523: PUSH
4524: LD_INT 5
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: ST_TO_ADDR
4534: GO 5499
4536: LD_INT 11
4538: DOUBLE
4539: EQUAL
4540: IFTRUE 4544
4542: GO 4574
4544: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4545: LD_ADDR_VAR 0 3
4549: PUSH
4550: LD_INT 1
4552: PUSH
4553: LD_INT 2
4555: PUSH
4556: LD_INT 3
4558: PUSH
4559: LD_INT 4
4561: PUSH
4562: LD_INT 5
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: ST_TO_ADDR
4572: GO 5499
4574: LD_INT 4
4576: DOUBLE
4577: EQUAL
4578: IFTRUE 4582
4580: GO 4608
4582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4583: LD_ADDR_VAR 0 3
4587: PUSH
4588: LD_INT 2
4590: PUSH
4591: LD_INT 3
4593: PUSH
4594: LD_INT 4
4596: PUSH
4597: LD_INT 5
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: ST_TO_ADDR
4606: GO 5499
4608: LD_INT 5
4610: DOUBLE
4611: EQUAL
4612: IFTRUE 4616
4614: GO 4642
4616: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: LD_INT 2
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: LD_INT 4
4630: PUSH
4631: LD_INT 5
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
4640: GO 5499
4642: LD_INT 9
4644: DOUBLE
4645: EQUAL
4646: IFTRUE 4650
4648: GO 4676
4650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: LD_INT 2
4658: PUSH
4659: LD_INT 3
4661: PUSH
4662: LD_INT 4
4664: PUSH
4665: LD_INT 5
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: ST_TO_ADDR
4674: GO 5499
4676: LD_INT 7
4678: DOUBLE
4679: EQUAL
4680: IFTRUE 4684
4682: GO 4710
4684: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4685: LD_ADDR_VAR 0 3
4689: PUSH
4690: LD_INT 2
4692: PUSH
4693: LD_INT 3
4695: PUSH
4696: LD_INT 4
4698: PUSH
4699: LD_INT 5
4701: PUSH
4702: EMPTY
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: ST_TO_ADDR
4708: GO 5499
4710: LD_INT 12
4712: DOUBLE
4713: EQUAL
4714: IFTRUE 4718
4716: GO 4744
4718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4719: LD_ADDR_VAR 0 3
4723: PUSH
4724: LD_INT 2
4726: PUSH
4727: LD_INT 3
4729: PUSH
4730: LD_INT 4
4732: PUSH
4733: LD_INT 5
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: ST_TO_ADDR
4742: GO 5499
4744: LD_INT 13
4746: DOUBLE
4747: EQUAL
4748: IFTRUE 4752
4750: GO 4778
4752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4753: LD_ADDR_VAR 0 3
4757: PUSH
4758: LD_INT 2
4760: PUSH
4761: LD_INT 3
4763: PUSH
4764: LD_INT 4
4766: PUSH
4767: LD_INT 5
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: ST_TO_ADDR
4776: GO 5499
4778: LD_INT 14
4780: DOUBLE
4781: EQUAL
4782: IFTRUE 4786
4784: GO 4804
4786: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4787: LD_ADDR_VAR 0 3
4791: PUSH
4792: LD_INT 4
4794: PUSH
4795: LD_INT 5
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: ST_TO_ADDR
4802: GO 5499
4804: LD_INT 6
4806: DOUBLE
4807: EQUAL
4808: IFTRUE 4812
4810: GO 4830
4812: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4813: LD_ADDR_VAR 0 3
4817: PUSH
4818: LD_INT 4
4820: PUSH
4821: LD_INT 5
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: ST_TO_ADDR
4828: GO 5499
4830: LD_INT 10
4832: DOUBLE
4833: EQUAL
4834: IFTRUE 4838
4836: GO 4856
4838: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4839: LD_ADDR_VAR 0 3
4843: PUSH
4844: LD_INT 4
4846: PUSH
4847: LD_INT 5
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: ST_TO_ADDR
4854: GO 5499
4856: LD_INT 22
4858: DOUBLE
4859: EQUAL
4860: IFTRUE 4864
4862: GO 4890
4864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4865: LD_ADDR_VAR 0 3
4869: PUSH
4870: LD_INT 11
4872: PUSH
4873: LD_INT 12
4875: PUSH
4876: LD_INT 13
4878: PUSH
4879: LD_INT 14
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: ST_TO_ADDR
4888: GO 5499
4890: LD_INT 23
4892: DOUBLE
4893: EQUAL
4894: IFTRUE 4898
4896: GO 4924
4898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4899: LD_ADDR_VAR 0 3
4903: PUSH
4904: LD_INT 11
4906: PUSH
4907: LD_INT 12
4909: PUSH
4910: LD_INT 13
4912: PUSH
4913: LD_INT 14
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: ST_TO_ADDR
4922: GO 5499
4924: LD_INT 24
4926: DOUBLE
4927: EQUAL
4928: IFTRUE 4932
4930: GO 4958
4932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4933: LD_ADDR_VAR 0 3
4937: PUSH
4938: LD_INT 11
4940: PUSH
4941: LD_INT 12
4943: PUSH
4944: LD_INT 13
4946: PUSH
4947: LD_INT 14
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: ST_TO_ADDR
4956: GO 5499
4958: LD_INT 30
4960: DOUBLE
4961: EQUAL
4962: IFTRUE 4966
4964: GO 4992
4966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4967: LD_ADDR_VAR 0 3
4971: PUSH
4972: LD_INT 11
4974: PUSH
4975: LD_INT 12
4977: PUSH
4978: LD_INT 13
4980: PUSH
4981: LD_INT 14
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: ST_TO_ADDR
4990: GO 5499
4992: LD_INT 25
4994: DOUBLE
4995: EQUAL
4996: IFTRUE 5000
4998: GO 5018
5000: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5001: LD_ADDR_VAR 0 3
5005: PUSH
5006: LD_INT 13
5008: PUSH
5009: LD_INT 14
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: ST_TO_ADDR
5016: GO 5499
5018: LD_INT 27
5020: DOUBLE
5021: EQUAL
5022: IFTRUE 5026
5024: GO 5044
5026: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5027: LD_ADDR_VAR 0 3
5031: PUSH
5032: LD_INT 13
5034: PUSH
5035: LD_INT 14
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: ST_TO_ADDR
5042: GO 5499
5044: LD_INT 92
5046: DOUBLE
5047: EQUAL
5048: IFTRUE 5052
5050: GO 5078
5052: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5053: LD_ADDR_VAR 0 3
5057: PUSH
5058: LD_INT 11
5060: PUSH
5061: LD_INT 12
5063: PUSH
5064: LD_INT 13
5066: PUSH
5067: LD_INT 14
5069: PUSH
5070: EMPTY
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: ST_TO_ADDR
5076: GO 5499
5078: LD_INT 28
5080: DOUBLE
5081: EQUAL
5082: IFTRUE 5086
5084: GO 5104
5086: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5087: LD_ADDR_VAR 0 3
5091: PUSH
5092: LD_INT 13
5094: PUSH
5095: LD_INT 14
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: ST_TO_ADDR
5102: GO 5499
5104: LD_INT 29
5106: DOUBLE
5107: EQUAL
5108: IFTRUE 5112
5110: GO 5130
5112: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5113: LD_ADDR_VAR 0 3
5117: PUSH
5118: LD_INT 13
5120: PUSH
5121: LD_INT 14
5123: PUSH
5124: EMPTY
5125: LIST
5126: LIST
5127: ST_TO_ADDR
5128: GO 5499
5130: LD_INT 31
5132: DOUBLE
5133: EQUAL
5134: IFTRUE 5138
5136: GO 5156
5138: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5139: LD_ADDR_VAR 0 3
5143: PUSH
5144: LD_INT 13
5146: PUSH
5147: LD_INT 14
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: ST_TO_ADDR
5154: GO 5499
5156: LD_INT 26
5158: DOUBLE
5159: EQUAL
5160: IFTRUE 5164
5162: GO 5182
5164: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5165: LD_ADDR_VAR 0 3
5169: PUSH
5170: LD_INT 13
5172: PUSH
5173: LD_INT 14
5175: PUSH
5176: EMPTY
5177: LIST
5178: LIST
5179: ST_TO_ADDR
5180: GO 5499
5182: LD_INT 42
5184: DOUBLE
5185: EQUAL
5186: IFTRUE 5190
5188: GO 5216
5190: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5191: LD_ADDR_VAR 0 3
5195: PUSH
5196: LD_INT 21
5198: PUSH
5199: LD_INT 22
5201: PUSH
5202: LD_INT 23
5204: PUSH
5205: LD_INT 24
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: ST_TO_ADDR
5214: GO 5499
5216: LD_INT 43
5218: DOUBLE
5219: EQUAL
5220: IFTRUE 5224
5222: GO 5250
5224: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: LD_INT 21
5232: PUSH
5233: LD_INT 22
5235: PUSH
5236: LD_INT 23
5238: PUSH
5239: LD_INT 24
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: ST_TO_ADDR
5248: GO 5499
5250: LD_INT 44
5252: DOUBLE
5253: EQUAL
5254: IFTRUE 5258
5256: GO 5284
5258: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5259: LD_ADDR_VAR 0 3
5263: PUSH
5264: LD_INT 21
5266: PUSH
5267: LD_INT 22
5269: PUSH
5270: LD_INT 23
5272: PUSH
5273: LD_INT 24
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: ST_TO_ADDR
5282: GO 5499
5284: LD_INT 45
5286: DOUBLE
5287: EQUAL
5288: IFTRUE 5292
5290: GO 5318
5292: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5293: LD_ADDR_VAR 0 3
5297: PUSH
5298: LD_INT 21
5300: PUSH
5301: LD_INT 22
5303: PUSH
5304: LD_INT 23
5306: PUSH
5307: LD_INT 24
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: ST_TO_ADDR
5316: GO 5499
5318: LD_INT 49
5320: DOUBLE
5321: EQUAL
5322: IFTRUE 5326
5324: GO 5352
5326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5327: LD_ADDR_VAR 0 3
5331: PUSH
5332: LD_INT 21
5334: PUSH
5335: LD_INT 22
5337: PUSH
5338: LD_INT 23
5340: PUSH
5341: LD_INT 24
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: ST_TO_ADDR
5350: GO 5499
5352: LD_INT 51
5354: DOUBLE
5355: EQUAL
5356: IFTRUE 5360
5358: GO 5386
5360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5361: LD_ADDR_VAR 0 3
5365: PUSH
5366: LD_INT 21
5368: PUSH
5369: LD_INT 22
5371: PUSH
5372: LD_INT 23
5374: PUSH
5375: LD_INT 24
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: ST_TO_ADDR
5384: GO 5499
5386: LD_INT 52
5388: DOUBLE
5389: EQUAL
5390: IFTRUE 5394
5392: GO 5420
5394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5395: LD_ADDR_VAR 0 3
5399: PUSH
5400: LD_INT 21
5402: PUSH
5403: LD_INT 22
5405: PUSH
5406: LD_INT 23
5408: PUSH
5409: LD_INT 24
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: ST_TO_ADDR
5418: GO 5499
5420: LD_INT 53
5422: DOUBLE
5423: EQUAL
5424: IFTRUE 5428
5426: GO 5446
5428: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5429: LD_ADDR_VAR 0 3
5433: PUSH
5434: LD_INT 23
5436: PUSH
5437: LD_INT 24
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: ST_TO_ADDR
5444: GO 5499
5446: LD_INT 46
5448: DOUBLE
5449: EQUAL
5450: IFTRUE 5454
5452: GO 5472
5454: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5455: LD_ADDR_VAR 0 3
5459: PUSH
5460: LD_INT 23
5462: PUSH
5463: LD_INT 24
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: ST_TO_ADDR
5470: GO 5499
5472: LD_INT 47
5474: DOUBLE
5475: EQUAL
5476: IFTRUE 5480
5478: GO 5498
5480: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5481: LD_ADDR_VAR 0 3
5485: PUSH
5486: LD_INT 23
5488: PUSH
5489: LD_INT 24
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: ST_TO_ADDR
5496: GO 5499
5498: POP
// result := ( chassis in result ) ;
5499: LD_ADDR_VAR 0 3
5503: PUSH
5504: LD_VAR 0 1
5508: PUSH
5509: LD_VAR 0 3
5513: IN
5514: ST_TO_ADDR
// end ;
5515: LD_VAR 0 3
5519: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5520: LD_INT 0
5522: PPUSH
5523: PPUSH
5524: PPUSH
5525: PPUSH
5526: PPUSH
5527: PPUSH
5528: PPUSH
// result := array ;
5529: LD_ADDR_VAR 0 5
5533: PUSH
5534: LD_VAR 0 1
5538: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5539: LD_VAR 0 1
5543: NOT
5544: PUSH
5545: LD_VAR 0 2
5549: NOT
5550: OR
5551: PUSH
5552: LD_VAR 0 3
5556: NOT
5557: OR
5558: PUSH
5559: LD_VAR 0 2
5563: PUSH
5564: LD_VAR 0 1
5568: GREATER
5569: OR
5570: PUSH
5571: LD_VAR 0 3
5575: PUSH
5576: LD_VAR 0 1
5580: GREATER
5581: OR
5582: IFFALSE 5586
// exit ;
5584: GO 5882
// if direction then
5586: LD_VAR 0 4
5590: IFFALSE 5654
// begin d := 1 ;
5592: LD_ADDR_VAR 0 9
5596: PUSH
5597: LD_INT 1
5599: ST_TO_ADDR
// if i_from > i_to then
5600: LD_VAR 0 2
5604: PUSH
5605: LD_VAR 0 3
5609: GREATER
5610: IFFALSE 5636
// length := ( array - i_from ) + i_to else
5612: LD_ADDR_VAR 0 11
5616: PUSH
5617: LD_VAR 0 1
5621: PUSH
5622: LD_VAR 0 2
5626: MINUS
5627: PUSH
5628: LD_VAR 0 3
5632: PLUS
5633: ST_TO_ADDR
5634: GO 5652
// length := i_to - i_from ;
5636: LD_ADDR_VAR 0 11
5640: PUSH
5641: LD_VAR 0 3
5645: PUSH
5646: LD_VAR 0 2
5650: MINUS
5651: ST_TO_ADDR
// end else
5652: GO 5715
// begin d := - 1 ;
5654: LD_ADDR_VAR 0 9
5658: PUSH
5659: LD_INT 1
5661: NEG
5662: ST_TO_ADDR
// if i_from > i_to then
5663: LD_VAR 0 2
5667: PUSH
5668: LD_VAR 0 3
5672: GREATER
5673: IFFALSE 5693
// length := i_from - i_to else
5675: LD_ADDR_VAR 0 11
5679: PUSH
5680: LD_VAR 0 2
5684: PUSH
5685: LD_VAR 0 3
5689: MINUS
5690: ST_TO_ADDR
5691: GO 5715
// length := ( array - i_to ) + i_from ;
5693: LD_ADDR_VAR 0 11
5697: PUSH
5698: LD_VAR 0 1
5702: PUSH
5703: LD_VAR 0 3
5707: MINUS
5708: PUSH
5709: LD_VAR 0 2
5713: PLUS
5714: ST_TO_ADDR
// end ; if not length then
5715: LD_VAR 0 11
5719: NOT
5720: IFFALSE 5724
// exit ;
5722: GO 5882
// tmp := array ;
5724: LD_ADDR_VAR 0 10
5728: PUSH
5729: LD_VAR 0 1
5733: ST_TO_ADDR
// for i = 1 to length do
5734: LD_ADDR_VAR 0 6
5738: PUSH
5739: DOUBLE
5740: LD_INT 1
5742: DEC
5743: ST_TO_ADDR
5744: LD_VAR 0 11
5748: PUSH
5749: FOR_TO
5750: IFFALSE 5870
// begin for j = 1 to array do
5752: LD_ADDR_VAR 0 7
5756: PUSH
5757: DOUBLE
5758: LD_INT 1
5760: DEC
5761: ST_TO_ADDR
5762: LD_VAR 0 1
5766: PUSH
5767: FOR_TO
5768: IFFALSE 5856
// begin k := j + d ;
5770: LD_ADDR_VAR 0 8
5774: PUSH
5775: LD_VAR 0 7
5779: PUSH
5780: LD_VAR 0 9
5784: PLUS
5785: ST_TO_ADDR
// if k > array then
5786: LD_VAR 0 8
5790: PUSH
5791: LD_VAR 0 1
5795: GREATER
5796: IFFALSE 5806
// k := 1 ;
5798: LD_ADDR_VAR 0 8
5802: PUSH
5803: LD_INT 1
5805: ST_TO_ADDR
// if not k then
5806: LD_VAR 0 8
5810: NOT
5811: IFFALSE 5823
// k := array ;
5813: LD_ADDR_VAR 0 8
5817: PUSH
5818: LD_VAR 0 1
5822: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5823: LD_ADDR_VAR 0 10
5827: PUSH
5828: LD_VAR 0 10
5832: PPUSH
5833: LD_VAR 0 8
5837: PPUSH
5838: LD_VAR 0 1
5842: PUSH
5843: LD_VAR 0 7
5847: ARRAY
5848: PPUSH
5849: CALL_OW 1
5853: ST_TO_ADDR
// end ;
5854: GO 5767
5856: POP
5857: POP
// array := tmp ;
5858: LD_ADDR_VAR 0 1
5862: PUSH
5863: LD_VAR 0 10
5867: ST_TO_ADDR
// end ;
5868: GO 5749
5870: POP
5871: POP
// result := array ;
5872: LD_ADDR_VAR 0 5
5876: PUSH
5877: LD_VAR 0 1
5881: ST_TO_ADDR
// end ;
5882: LD_VAR 0 5
5886: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5887: LD_INT 0
5889: PPUSH
5890: PPUSH
// result := 0 ;
5891: LD_ADDR_VAR 0 3
5895: PUSH
5896: LD_INT 0
5898: ST_TO_ADDR
// if not array or not value in array then
5899: LD_VAR 0 1
5903: NOT
5904: PUSH
5905: LD_VAR 0 2
5909: PUSH
5910: LD_VAR 0 1
5914: IN
5915: NOT
5916: OR
5917: IFFALSE 5921
// exit ;
5919: GO 5975
// for i = 1 to array do
5921: LD_ADDR_VAR 0 4
5925: PUSH
5926: DOUBLE
5927: LD_INT 1
5929: DEC
5930: ST_TO_ADDR
5931: LD_VAR 0 1
5935: PUSH
5936: FOR_TO
5937: IFFALSE 5973
// if value = array [ i ] then
5939: LD_VAR 0 2
5943: PUSH
5944: LD_VAR 0 1
5948: PUSH
5949: LD_VAR 0 4
5953: ARRAY
5954: EQUAL
5955: IFFALSE 5971
// begin result := i ;
5957: LD_ADDR_VAR 0 3
5961: PUSH
5962: LD_VAR 0 4
5966: ST_TO_ADDR
// exit ;
5967: POP
5968: POP
5969: GO 5975
// end ;
5971: GO 5936
5973: POP
5974: POP
// end ;
5975: LD_VAR 0 3
5979: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5980: LD_INT 0
5982: PPUSH
// vc_chassis := chassis ;
5983: LD_ADDR_OWVAR 37
5987: PUSH
5988: LD_VAR 0 1
5992: ST_TO_ADDR
// vc_engine := engine ;
5993: LD_ADDR_OWVAR 39
5997: PUSH
5998: LD_VAR 0 2
6002: ST_TO_ADDR
// vc_control := control ;
6003: LD_ADDR_OWVAR 38
6007: PUSH
6008: LD_VAR 0 3
6012: ST_TO_ADDR
// vc_weapon := weapon ;
6013: LD_ADDR_OWVAR 40
6017: PUSH
6018: LD_VAR 0 4
6022: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6023: LD_ADDR_OWVAR 41
6027: PUSH
6028: LD_VAR 0 5
6032: ST_TO_ADDR
// end ;
6033: LD_VAR 0 6
6037: RET
// export function WantPlant ( unit ) ; var task ; begin
6038: LD_INT 0
6040: PPUSH
6041: PPUSH
// result := false ;
6042: LD_ADDR_VAR 0 2
6046: PUSH
6047: LD_INT 0
6049: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6050: LD_ADDR_VAR 0 3
6054: PUSH
6055: LD_VAR 0 1
6059: PPUSH
6060: CALL_OW 437
6064: ST_TO_ADDR
// if task then
6065: LD_VAR 0 3
6069: IFFALSE 6097
// if task [ 1 ] [ 1 ] = p then
6071: LD_VAR 0 3
6075: PUSH
6076: LD_INT 1
6078: ARRAY
6079: PUSH
6080: LD_INT 1
6082: ARRAY
6083: PUSH
6084: LD_STRING p
6086: EQUAL
6087: IFFALSE 6097
// result := true ;
6089: LD_ADDR_VAR 0 2
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// end ;
6097: LD_VAR 0 2
6101: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6102: LD_INT 0
6104: PPUSH
6105: PPUSH
6106: PPUSH
6107: PPUSH
// if pos < 1 then
6108: LD_VAR 0 2
6112: PUSH
6113: LD_INT 1
6115: LESS
6116: IFFALSE 6120
// exit ;
6118: GO 6423
// if pos = 1 then
6120: LD_VAR 0 2
6124: PUSH
6125: LD_INT 1
6127: EQUAL
6128: IFFALSE 6161
// result := Replace ( arr , pos [ 1 ] , value ) else
6130: LD_ADDR_VAR 0 4
6134: PUSH
6135: LD_VAR 0 1
6139: PPUSH
6140: LD_VAR 0 2
6144: PUSH
6145: LD_INT 1
6147: ARRAY
6148: PPUSH
6149: LD_VAR 0 3
6153: PPUSH
6154: CALL_OW 1
6158: ST_TO_ADDR
6159: GO 6423
// begin tmp := arr ;
6161: LD_ADDR_VAR 0 6
6165: PUSH
6166: LD_VAR 0 1
6170: ST_TO_ADDR
// s_arr := [ tmp ] ;
6171: LD_ADDR_VAR 0 7
6175: PUSH
6176: LD_VAR 0 6
6180: PUSH
6181: EMPTY
6182: LIST
6183: ST_TO_ADDR
// for i = 1 to pos - 1 do
6184: LD_ADDR_VAR 0 5
6188: PUSH
6189: DOUBLE
6190: LD_INT 1
6192: DEC
6193: ST_TO_ADDR
6194: LD_VAR 0 2
6198: PUSH
6199: LD_INT 1
6201: MINUS
6202: PUSH
6203: FOR_TO
6204: IFFALSE 6249
// begin tmp := tmp [ pos [ i ] ] ;
6206: LD_ADDR_VAR 0 6
6210: PUSH
6211: LD_VAR 0 6
6215: PUSH
6216: LD_VAR 0 2
6220: PUSH
6221: LD_VAR 0 5
6225: ARRAY
6226: ARRAY
6227: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6228: LD_ADDR_VAR 0 7
6232: PUSH
6233: LD_VAR 0 7
6237: PUSH
6238: LD_VAR 0 6
6242: PUSH
6243: EMPTY
6244: LIST
6245: ADD
6246: ST_TO_ADDR
// end ;
6247: GO 6203
6249: POP
6250: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6251: LD_ADDR_VAR 0 6
6255: PUSH
6256: LD_VAR 0 6
6260: PPUSH
6261: LD_VAR 0 2
6265: PUSH
6266: LD_VAR 0 2
6270: ARRAY
6271: PPUSH
6272: LD_VAR 0 3
6276: PPUSH
6277: CALL_OW 1
6281: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6282: LD_ADDR_VAR 0 7
6286: PUSH
6287: LD_VAR 0 7
6291: PPUSH
6292: LD_VAR 0 7
6296: PPUSH
6297: LD_VAR 0 6
6301: PPUSH
6302: CALL_OW 1
6306: ST_TO_ADDR
// for i = s_arr downto 2 do
6307: LD_ADDR_VAR 0 5
6311: PUSH
6312: DOUBLE
6313: LD_VAR 0 7
6317: INC
6318: ST_TO_ADDR
6319: LD_INT 2
6321: PUSH
6322: FOR_DOWNTO
6323: IFFALSE 6407
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6325: LD_ADDR_VAR 0 6
6329: PUSH
6330: LD_VAR 0 7
6334: PUSH
6335: LD_VAR 0 5
6339: PUSH
6340: LD_INT 1
6342: MINUS
6343: ARRAY
6344: PPUSH
6345: LD_VAR 0 2
6349: PUSH
6350: LD_VAR 0 5
6354: PUSH
6355: LD_INT 1
6357: MINUS
6358: ARRAY
6359: PPUSH
6360: LD_VAR 0 7
6364: PUSH
6365: LD_VAR 0 5
6369: ARRAY
6370: PPUSH
6371: CALL_OW 1
6375: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6376: LD_ADDR_VAR 0 7
6380: PUSH
6381: LD_VAR 0 7
6385: PPUSH
6386: LD_VAR 0 5
6390: PUSH
6391: LD_INT 1
6393: MINUS
6394: PPUSH
6395: LD_VAR 0 6
6399: PPUSH
6400: CALL_OW 1
6404: ST_TO_ADDR
// end ;
6405: GO 6322
6407: POP
6408: POP
// result := s_arr [ 1 ] ;
6409: LD_ADDR_VAR 0 4
6413: PUSH
6414: LD_VAR 0 7
6418: PUSH
6419: LD_INT 1
6421: ARRAY
6422: ST_TO_ADDR
// end ; end ;
6423: LD_VAR 0 4
6427: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6428: LD_INT 0
6430: PPUSH
6431: PPUSH
// if not list then
6432: LD_VAR 0 1
6436: NOT
6437: IFFALSE 6441
// exit ;
6439: GO 6532
// i := list [ pos1 ] ;
6441: LD_ADDR_VAR 0 5
6445: PUSH
6446: LD_VAR 0 1
6450: PUSH
6451: LD_VAR 0 2
6455: ARRAY
6456: ST_TO_ADDR
// if not i then
6457: LD_VAR 0 5
6461: NOT
6462: IFFALSE 6466
// exit ;
6464: GO 6532
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6466: LD_ADDR_VAR 0 1
6470: PUSH
6471: LD_VAR 0 1
6475: PPUSH
6476: LD_VAR 0 2
6480: PPUSH
6481: LD_VAR 0 1
6485: PUSH
6486: LD_VAR 0 3
6490: ARRAY
6491: PPUSH
6492: CALL_OW 1
6496: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6497: LD_ADDR_VAR 0 1
6501: PUSH
6502: LD_VAR 0 1
6506: PPUSH
6507: LD_VAR 0 3
6511: PPUSH
6512: LD_VAR 0 5
6516: PPUSH
6517: CALL_OW 1
6521: ST_TO_ADDR
// result := list ;
6522: LD_ADDR_VAR 0 4
6526: PUSH
6527: LD_VAR 0 1
6531: ST_TO_ADDR
// end ;
6532: LD_VAR 0 4
6536: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6537: LD_INT 0
6539: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6540: LD_ADDR_VAR 0 5
6544: PUSH
6545: LD_VAR 0 1
6549: PPUSH
6550: CALL_OW 250
6554: PPUSH
6555: LD_VAR 0 1
6559: PPUSH
6560: CALL_OW 251
6564: PPUSH
6565: LD_VAR 0 2
6569: PPUSH
6570: LD_VAR 0 3
6574: PPUSH
6575: LD_VAR 0 4
6579: PPUSH
6580: CALL 6958 0 5
6584: ST_TO_ADDR
// end ;
6585: LD_VAR 0 5
6589: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6590: LD_INT 0
6592: PPUSH
6593: PPUSH
6594: PPUSH
6595: PPUSH
// if not list or not unit then
6596: LD_VAR 0 2
6600: NOT
6601: PUSH
6602: LD_VAR 0 1
6606: NOT
6607: OR
6608: IFFALSE 6612
// exit ;
6610: GO 6953
// result := [ ] ;
6612: LD_ADDR_VAR 0 5
6616: PUSH
6617: EMPTY
6618: ST_TO_ADDR
// for i in list do
6619: LD_ADDR_VAR 0 6
6623: PUSH
6624: LD_VAR 0 2
6628: PUSH
6629: FOR_IN
6630: IFFALSE 6848
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6632: LD_ADDR_VAR 0 8
6636: PUSH
6637: LD_VAR 0 1
6641: PPUSH
6642: LD_VAR 0 6
6646: PUSH
6647: LD_INT 1
6649: ARRAY
6650: PPUSH
6651: LD_VAR 0 6
6655: PUSH
6656: LD_INT 2
6658: ARRAY
6659: PPUSH
6660: CALL_OW 297
6664: ST_TO_ADDR
// if not Count ( result ) then
6665: LD_VAR 0 5
6669: PPUSH
6670: CALL 3242 0 1
6674: NOT
6675: IFFALSE 6708
// begin result := Join ( result , [ i , tmp ] ) ;
6677: LD_ADDR_VAR 0 5
6681: PUSH
6682: LD_VAR 0 5
6686: PPUSH
6687: LD_VAR 0 6
6691: PUSH
6692: LD_VAR 0 8
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: PPUSH
6701: CALL 38842 0 2
6705: ST_TO_ADDR
// continue ;
6706: GO 6629
// end ; if result [ result ] [ 2 ] <= tmp then
6708: LD_VAR 0 5
6712: PUSH
6713: LD_VAR 0 5
6717: ARRAY
6718: PUSH
6719: LD_INT 2
6721: ARRAY
6722: PUSH
6723: LD_VAR 0 8
6727: LESSEQUAL
6728: IFFALSE 6761
// result := Join ( result , [ i , tmp ] ) else
6730: LD_ADDR_VAR 0 5
6734: PUSH
6735: LD_VAR 0 5
6739: PPUSH
6740: LD_VAR 0 6
6744: PUSH
6745: LD_VAR 0 8
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: PPUSH
6754: CALL 38842 0 2
6758: ST_TO_ADDR
6759: GO 6846
// begin for j := 1 to Count ( result ) do
6761: LD_ADDR_VAR 0 7
6765: PUSH
6766: DOUBLE
6767: LD_INT 1
6769: DEC
6770: ST_TO_ADDR
6771: LD_VAR 0 5
6775: PPUSH
6776: CALL 3242 0 1
6780: PUSH
6781: FOR_TO
6782: IFFALSE 6844
// begin if tmp < result [ j ] [ 2 ] then
6784: LD_VAR 0 8
6788: PUSH
6789: LD_VAR 0 5
6793: PUSH
6794: LD_VAR 0 7
6798: ARRAY
6799: PUSH
6800: LD_INT 2
6802: ARRAY
6803: LESS
6804: IFFALSE 6842
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6806: LD_ADDR_VAR 0 5
6810: PUSH
6811: LD_VAR 0 5
6815: PPUSH
6816: LD_VAR 0 7
6820: PPUSH
6821: LD_VAR 0 6
6825: PUSH
6826: LD_VAR 0 8
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PPUSH
6835: CALL_OW 2
6839: ST_TO_ADDR
// break ;
6840: GO 6844
// end ; end ;
6842: GO 6781
6844: POP
6845: POP
// end ; end ;
6846: GO 6629
6848: POP
6849: POP
// if result and not asc then
6850: LD_VAR 0 5
6854: PUSH
6855: LD_VAR 0 3
6859: NOT
6860: AND
6861: IFFALSE 6878
// result := ReverseArray ( result ) ;
6863: LD_ADDR_VAR 0 5
6867: PUSH
6868: LD_VAR 0 5
6872: PPUSH
6873: CALL 34118 0 1
6877: ST_TO_ADDR
// tmp := [ ] ;
6878: LD_ADDR_VAR 0 8
6882: PUSH
6883: EMPTY
6884: ST_TO_ADDR
// if mode then
6885: LD_VAR 0 4
6889: IFFALSE 6953
// begin for i := 1 to result do
6891: LD_ADDR_VAR 0 6
6895: PUSH
6896: DOUBLE
6897: LD_INT 1
6899: DEC
6900: ST_TO_ADDR
6901: LD_VAR 0 5
6905: PUSH
6906: FOR_TO
6907: IFFALSE 6941
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
6909: LD_ADDR_VAR 0 8
6913: PUSH
6914: LD_VAR 0 8
6918: PPUSH
6919: LD_VAR 0 5
6923: PUSH
6924: LD_VAR 0 6
6928: ARRAY
6929: PUSH
6930: LD_INT 1
6932: ARRAY
6933: PPUSH
6934: CALL 38842 0 2
6938: ST_TO_ADDR
6939: GO 6906
6941: POP
6942: POP
// result := tmp ;
6943: LD_ADDR_VAR 0 5
6947: PUSH
6948: LD_VAR 0 8
6952: ST_TO_ADDR
// end ; end ;
6953: LD_VAR 0 5
6957: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6958: LD_INT 0
6960: PPUSH
6961: PPUSH
6962: PPUSH
6963: PPUSH
// if not list then
6964: LD_VAR 0 3
6968: NOT
6969: IFFALSE 6973
// exit ;
6971: GO 7361
// result := [ ] ;
6973: LD_ADDR_VAR 0 6
6977: PUSH
6978: EMPTY
6979: ST_TO_ADDR
// for i in list do
6980: LD_ADDR_VAR 0 7
6984: PUSH
6985: LD_VAR 0 3
6989: PUSH
6990: FOR_IN
6991: IFFALSE 7193
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6993: LD_ADDR_VAR 0 9
6997: PUSH
6998: LD_VAR 0 7
7002: PPUSH
7003: LD_VAR 0 1
7007: PPUSH
7008: LD_VAR 0 2
7012: PPUSH
7013: CALL_OW 297
7017: ST_TO_ADDR
// if not result then
7018: LD_VAR 0 6
7022: NOT
7023: IFFALSE 7049
// result := [ [ i , tmp ] ] else
7025: LD_ADDR_VAR 0 6
7029: PUSH
7030: LD_VAR 0 7
7034: PUSH
7035: LD_VAR 0 9
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: EMPTY
7045: LIST
7046: ST_TO_ADDR
7047: GO 7191
// begin if result [ result ] [ 2 ] < tmp then
7049: LD_VAR 0 6
7053: PUSH
7054: LD_VAR 0 6
7058: ARRAY
7059: PUSH
7060: LD_INT 2
7062: ARRAY
7063: PUSH
7064: LD_VAR 0 9
7068: LESS
7069: IFFALSE 7111
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7071: LD_ADDR_VAR 0 6
7075: PUSH
7076: LD_VAR 0 6
7080: PPUSH
7081: LD_VAR 0 6
7085: PUSH
7086: LD_INT 1
7088: PLUS
7089: PPUSH
7090: LD_VAR 0 7
7094: PUSH
7095: LD_VAR 0 9
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PPUSH
7104: CALL_OW 2
7108: ST_TO_ADDR
7109: GO 7191
// for j = 1 to result do
7111: LD_ADDR_VAR 0 8
7115: PUSH
7116: DOUBLE
7117: LD_INT 1
7119: DEC
7120: ST_TO_ADDR
7121: LD_VAR 0 6
7125: PUSH
7126: FOR_TO
7127: IFFALSE 7189
// begin if tmp < result [ j ] [ 2 ] then
7129: LD_VAR 0 9
7133: PUSH
7134: LD_VAR 0 6
7138: PUSH
7139: LD_VAR 0 8
7143: ARRAY
7144: PUSH
7145: LD_INT 2
7147: ARRAY
7148: LESS
7149: IFFALSE 7187
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7151: LD_ADDR_VAR 0 6
7155: PUSH
7156: LD_VAR 0 6
7160: PPUSH
7161: LD_VAR 0 8
7165: PPUSH
7166: LD_VAR 0 7
7170: PUSH
7171: LD_VAR 0 9
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PPUSH
7180: CALL_OW 2
7184: ST_TO_ADDR
// break ;
7185: GO 7189
// end ; end ;
7187: GO 7126
7189: POP
7190: POP
// end ; end ;
7191: GO 6990
7193: POP
7194: POP
// if result and not asc then
7195: LD_VAR 0 6
7199: PUSH
7200: LD_VAR 0 4
7204: NOT
7205: AND
7206: IFFALSE 7281
// begin tmp := result ;
7208: LD_ADDR_VAR 0 9
7212: PUSH
7213: LD_VAR 0 6
7217: ST_TO_ADDR
// for i = tmp downto 1 do
7218: LD_ADDR_VAR 0 7
7222: PUSH
7223: DOUBLE
7224: LD_VAR 0 9
7228: INC
7229: ST_TO_ADDR
7230: LD_INT 1
7232: PUSH
7233: FOR_DOWNTO
7234: IFFALSE 7279
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7236: LD_ADDR_VAR 0 6
7240: PUSH
7241: LD_VAR 0 6
7245: PPUSH
7246: LD_VAR 0 9
7250: PUSH
7251: LD_VAR 0 7
7255: MINUS
7256: PUSH
7257: LD_INT 1
7259: PLUS
7260: PPUSH
7261: LD_VAR 0 9
7265: PUSH
7266: LD_VAR 0 7
7270: ARRAY
7271: PPUSH
7272: CALL_OW 1
7276: ST_TO_ADDR
7277: GO 7233
7279: POP
7280: POP
// end ; tmp := [ ] ;
7281: LD_ADDR_VAR 0 9
7285: PUSH
7286: EMPTY
7287: ST_TO_ADDR
// if mode then
7288: LD_VAR 0 5
7292: IFFALSE 7361
// begin for i = 1 to result do
7294: LD_ADDR_VAR 0 7
7298: PUSH
7299: DOUBLE
7300: LD_INT 1
7302: DEC
7303: ST_TO_ADDR
7304: LD_VAR 0 6
7308: PUSH
7309: FOR_TO
7310: IFFALSE 7349
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7312: LD_ADDR_VAR 0 9
7316: PUSH
7317: LD_VAR 0 9
7321: PPUSH
7322: LD_VAR 0 7
7326: PPUSH
7327: LD_VAR 0 6
7331: PUSH
7332: LD_VAR 0 7
7336: ARRAY
7337: PUSH
7338: LD_INT 1
7340: ARRAY
7341: PPUSH
7342: CALL_OW 1
7346: ST_TO_ADDR
7347: GO 7309
7349: POP
7350: POP
// result := tmp ;
7351: LD_ADDR_VAR 0 6
7355: PUSH
7356: LD_VAR 0 9
7360: ST_TO_ADDR
// end ; end ;
7361: LD_VAR 0 6
7365: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7366: LD_INT 0
7368: PPUSH
7369: PPUSH
7370: PPUSH
7371: PPUSH
7372: PPUSH
7373: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7374: LD_ADDR_VAR 0 5
7378: PUSH
7379: LD_INT 0
7381: PUSH
7382: LD_INT 0
7384: PUSH
7385: LD_INT 0
7387: PUSH
7388: EMPTY
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: ST_TO_ADDR
// if not x or not y then
7396: LD_VAR 0 2
7400: NOT
7401: PUSH
7402: LD_VAR 0 3
7406: NOT
7407: OR
7408: IFFALSE 7412
// exit ;
7410: GO 9062
// if not range then
7412: LD_VAR 0 4
7416: NOT
7417: IFFALSE 7427
// range := 10 ;
7419: LD_ADDR_VAR 0 4
7423: PUSH
7424: LD_INT 10
7426: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7427: LD_ADDR_VAR 0 8
7431: PUSH
7432: LD_INT 81
7434: PUSH
7435: LD_VAR 0 1
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PUSH
7444: LD_INT 92
7446: PUSH
7447: LD_VAR 0 2
7451: PUSH
7452: LD_VAR 0 3
7456: PUSH
7457: LD_VAR 0 4
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: LD_INT 21
7473: PUSH
7474: LD_INT 3
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: LIST
7489: PPUSH
7490: CALL_OW 69
7494: ST_TO_ADDR
// if not tmp then
7495: LD_VAR 0 8
7499: NOT
7500: IFFALSE 7504
// exit ;
7502: GO 9062
// for i in tmp do
7504: LD_ADDR_VAR 0 6
7508: PUSH
7509: LD_VAR 0 8
7513: PUSH
7514: FOR_IN
7515: IFFALSE 9037
// begin points := [ 0 , 0 , 0 ] ;
7517: LD_ADDR_VAR 0 9
7521: PUSH
7522: LD_INT 0
7524: PUSH
7525: LD_INT 0
7527: PUSH
7528: LD_INT 0
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: LIST
7535: ST_TO_ADDR
// bpoints := 1 ;
7536: LD_ADDR_VAR 0 10
7540: PUSH
7541: LD_INT 1
7543: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7544: LD_VAR 0 6
7548: PPUSH
7549: CALL_OW 247
7553: PUSH
7554: LD_INT 1
7556: DOUBLE
7557: EQUAL
7558: IFTRUE 7562
7560: GO 8140
7562: POP
// begin if GetClass ( i ) = 1 then
7563: LD_VAR 0 6
7567: PPUSH
7568: CALL_OW 257
7572: PUSH
7573: LD_INT 1
7575: EQUAL
7576: IFFALSE 7597
// points := [ 10 , 5 , 3 ] ;
7578: LD_ADDR_VAR 0 9
7582: PUSH
7583: LD_INT 10
7585: PUSH
7586: LD_INT 5
7588: PUSH
7589: LD_INT 3
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: LIST
7596: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7597: LD_VAR 0 6
7601: PPUSH
7602: CALL_OW 257
7606: PUSH
7607: LD_INT 2
7609: PUSH
7610: LD_INT 3
7612: PUSH
7613: LD_INT 4
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: IN
7621: IFFALSE 7642
// points := [ 3 , 2 , 1 ] ;
7623: LD_ADDR_VAR 0 9
7627: PUSH
7628: LD_INT 3
7630: PUSH
7631: LD_INT 2
7633: PUSH
7634: LD_INT 1
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7642: LD_VAR 0 6
7646: PPUSH
7647: CALL_OW 257
7651: PUSH
7652: LD_INT 5
7654: EQUAL
7655: IFFALSE 7676
// points := [ 130 , 5 , 2 ] ;
7657: LD_ADDR_VAR 0 9
7661: PUSH
7662: LD_INT 130
7664: PUSH
7665: LD_INT 5
7667: PUSH
7668: LD_INT 2
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: LIST
7675: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7676: LD_VAR 0 6
7680: PPUSH
7681: CALL_OW 257
7685: PUSH
7686: LD_INT 8
7688: EQUAL
7689: IFFALSE 7710
// points := [ 35 , 35 , 30 ] ;
7691: LD_ADDR_VAR 0 9
7695: PUSH
7696: LD_INT 35
7698: PUSH
7699: LD_INT 35
7701: PUSH
7702: LD_INT 30
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: LIST
7709: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7710: LD_VAR 0 6
7714: PPUSH
7715: CALL_OW 257
7719: PUSH
7720: LD_INT 9
7722: EQUAL
7723: IFFALSE 7744
// points := [ 20 , 55 , 40 ] ;
7725: LD_ADDR_VAR 0 9
7729: PUSH
7730: LD_INT 20
7732: PUSH
7733: LD_INT 55
7735: PUSH
7736: LD_INT 40
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: LIST
7743: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7744: LD_VAR 0 6
7748: PPUSH
7749: CALL_OW 257
7753: PUSH
7754: LD_INT 12
7756: PUSH
7757: LD_INT 16
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: IN
7764: IFFALSE 7785
// points := [ 5 , 3 , 2 ] ;
7766: LD_ADDR_VAR 0 9
7770: PUSH
7771: LD_INT 5
7773: PUSH
7774: LD_INT 3
7776: PUSH
7777: LD_INT 2
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: LIST
7784: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7785: LD_VAR 0 6
7789: PPUSH
7790: CALL_OW 257
7794: PUSH
7795: LD_INT 17
7797: EQUAL
7798: IFFALSE 7819
// points := [ 100 , 50 , 75 ] ;
7800: LD_ADDR_VAR 0 9
7804: PUSH
7805: LD_INT 100
7807: PUSH
7808: LD_INT 50
7810: PUSH
7811: LD_INT 75
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7819: LD_VAR 0 6
7823: PPUSH
7824: CALL_OW 257
7828: PUSH
7829: LD_INT 15
7831: EQUAL
7832: IFFALSE 7853
// points := [ 10 , 5 , 3 ] ;
7834: LD_ADDR_VAR 0 9
7838: PUSH
7839: LD_INT 10
7841: PUSH
7842: LD_INT 5
7844: PUSH
7845: LD_INT 3
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7853: LD_VAR 0 6
7857: PPUSH
7858: CALL_OW 257
7862: PUSH
7863: LD_INT 14
7865: EQUAL
7866: IFFALSE 7887
// points := [ 10 , 0 , 0 ] ;
7868: LD_ADDR_VAR 0 9
7872: PUSH
7873: LD_INT 10
7875: PUSH
7876: LD_INT 0
7878: PUSH
7879: LD_INT 0
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7887: LD_VAR 0 6
7891: PPUSH
7892: CALL_OW 257
7896: PUSH
7897: LD_INT 11
7899: EQUAL
7900: IFFALSE 7921
// points := [ 30 , 10 , 5 ] ;
7902: LD_ADDR_VAR 0 9
7906: PUSH
7907: LD_INT 30
7909: PUSH
7910: LD_INT 10
7912: PUSH
7913: LD_INT 5
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: LIST
7920: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7921: LD_VAR 0 1
7925: PPUSH
7926: LD_INT 5
7928: PPUSH
7929: CALL_OW 321
7933: PUSH
7934: LD_INT 2
7936: EQUAL
7937: IFFALSE 7954
// bpoints := bpoints * 1.8 ;
7939: LD_ADDR_VAR 0 10
7943: PUSH
7944: LD_VAR 0 10
7948: PUSH
7949: LD_REAL  1.80000000000000E+0000
7952: MUL
7953: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7954: LD_VAR 0 6
7958: PPUSH
7959: CALL_OW 257
7963: PUSH
7964: LD_INT 1
7966: PUSH
7967: LD_INT 2
7969: PUSH
7970: LD_INT 3
7972: PUSH
7973: LD_INT 4
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: IN
7982: PUSH
7983: LD_VAR 0 1
7987: PPUSH
7988: LD_INT 51
7990: PPUSH
7991: CALL_OW 321
7995: PUSH
7996: LD_INT 2
7998: EQUAL
7999: AND
8000: IFFALSE 8017
// bpoints := bpoints * 1.2 ;
8002: LD_ADDR_VAR 0 10
8006: PUSH
8007: LD_VAR 0 10
8011: PUSH
8012: LD_REAL  1.20000000000000E+0000
8015: MUL
8016: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8017: LD_VAR 0 6
8021: PPUSH
8022: CALL_OW 257
8026: PUSH
8027: LD_INT 5
8029: PUSH
8030: LD_INT 7
8032: PUSH
8033: LD_INT 9
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: LIST
8040: IN
8041: PUSH
8042: LD_VAR 0 1
8046: PPUSH
8047: LD_INT 52
8049: PPUSH
8050: CALL_OW 321
8054: PUSH
8055: LD_INT 2
8057: EQUAL
8058: AND
8059: IFFALSE 8076
// bpoints := bpoints * 1.5 ;
8061: LD_ADDR_VAR 0 10
8065: PUSH
8066: LD_VAR 0 10
8070: PUSH
8071: LD_REAL  1.50000000000000E+0000
8074: MUL
8075: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8076: LD_VAR 0 1
8080: PPUSH
8081: LD_INT 66
8083: PPUSH
8084: CALL_OW 321
8088: PUSH
8089: LD_INT 2
8091: EQUAL
8092: IFFALSE 8109
// bpoints := bpoints * 1.1 ;
8094: LD_ADDR_VAR 0 10
8098: PUSH
8099: LD_VAR 0 10
8103: PUSH
8104: LD_REAL  1.10000000000000E+0000
8107: MUL
8108: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8109: LD_ADDR_VAR 0 10
8113: PUSH
8114: LD_VAR 0 10
8118: PUSH
8119: LD_VAR 0 6
8123: PPUSH
8124: LD_INT 1
8126: PPUSH
8127: CALL_OW 259
8131: PUSH
8132: LD_REAL  1.15000000000000E+0000
8135: MUL
8136: MUL
8137: ST_TO_ADDR
// end ; unit_vehicle :
8138: GO 8966
8140: LD_INT 2
8142: DOUBLE
8143: EQUAL
8144: IFTRUE 8148
8146: GO 8954
8148: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8149: LD_VAR 0 6
8153: PPUSH
8154: CALL_OW 264
8158: PUSH
8159: LD_INT 2
8161: PUSH
8162: LD_INT 42
8164: PUSH
8165: LD_INT 24
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: IN
8173: IFFALSE 8194
// points := [ 25 , 5 , 3 ] ;
8175: LD_ADDR_VAR 0 9
8179: PUSH
8180: LD_INT 25
8182: PUSH
8183: LD_INT 5
8185: PUSH
8186: LD_INT 3
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: LIST
8193: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8194: LD_VAR 0 6
8198: PPUSH
8199: CALL_OW 264
8203: PUSH
8204: LD_INT 4
8206: PUSH
8207: LD_INT 43
8209: PUSH
8210: LD_INT 25
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: IN
8218: IFFALSE 8239
// points := [ 40 , 15 , 5 ] ;
8220: LD_ADDR_VAR 0 9
8224: PUSH
8225: LD_INT 40
8227: PUSH
8228: LD_INT 15
8230: PUSH
8231: LD_INT 5
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: LIST
8238: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8239: LD_VAR 0 6
8243: PPUSH
8244: CALL_OW 264
8248: PUSH
8249: LD_INT 3
8251: PUSH
8252: LD_INT 23
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: IN
8259: IFFALSE 8280
// points := [ 7 , 25 , 8 ] ;
8261: LD_ADDR_VAR 0 9
8265: PUSH
8266: LD_INT 7
8268: PUSH
8269: LD_INT 25
8271: PUSH
8272: LD_INT 8
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: LIST
8279: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8280: LD_VAR 0 6
8284: PPUSH
8285: CALL_OW 264
8289: PUSH
8290: LD_INT 5
8292: PUSH
8293: LD_INT 27
8295: PUSH
8296: LD_INT 44
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: LIST
8303: IN
8304: IFFALSE 8325
// points := [ 14 , 50 , 16 ] ;
8306: LD_ADDR_VAR 0 9
8310: PUSH
8311: LD_INT 14
8313: PUSH
8314: LD_INT 50
8316: PUSH
8317: LD_INT 16
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: LIST
8324: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8325: LD_VAR 0 6
8329: PPUSH
8330: CALL_OW 264
8334: PUSH
8335: LD_INT 6
8337: PUSH
8338: LD_INT 46
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: IN
8345: IFFALSE 8366
// points := [ 32 , 120 , 70 ] ;
8347: LD_ADDR_VAR 0 9
8351: PUSH
8352: LD_INT 32
8354: PUSH
8355: LD_INT 120
8357: PUSH
8358: LD_INT 70
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: LIST
8365: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8366: LD_VAR 0 6
8370: PPUSH
8371: CALL_OW 264
8375: PUSH
8376: LD_INT 7
8378: PUSH
8379: LD_INT 28
8381: PUSH
8382: LD_INT 45
8384: PUSH
8385: LD_INT 92
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: IN
8394: IFFALSE 8415
// points := [ 35 , 20 , 45 ] ;
8396: LD_ADDR_VAR 0 9
8400: PUSH
8401: LD_INT 35
8403: PUSH
8404: LD_INT 20
8406: PUSH
8407: LD_INT 45
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: LIST
8414: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8415: LD_VAR 0 6
8419: PPUSH
8420: CALL_OW 264
8424: PUSH
8425: LD_INT 47
8427: PUSH
8428: EMPTY
8429: LIST
8430: IN
8431: IFFALSE 8452
// points := [ 67 , 45 , 75 ] ;
8433: LD_ADDR_VAR 0 9
8437: PUSH
8438: LD_INT 67
8440: PUSH
8441: LD_INT 45
8443: PUSH
8444: LD_INT 75
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: LIST
8451: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8452: LD_VAR 0 6
8456: PPUSH
8457: CALL_OW 264
8461: PUSH
8462: LD_INT 26
8464: PUSH
8465: EMPTY
8466: LIST
8467: IN
8468: IFFALSE 8489
// points := [ 120 , 30 , 80 ] ;
8470: LD_ADDR_VAR 0 9
8474: PUSH
8475: LD_INT 120
8477: PUSH
8478: LD_INT 30
8480: PUSH
8481: LD_INT 80
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8489: LD_VAR 0 6
8493: PPUSH
8494: CALL_OW 264
8498: PUSH
8499: LD_INT 22
8501: PUSH
8502: EMPTY
8503: LIST
8504: IN
8505: IFFALSE 8526
// points := [ 40 , 1 , 1 ] ;
8507: LD_ADDR_VAR 0 9
8511: PUSH
8512: LD_INT 40
8514: PUSH
8515: LD_INT 1
8517: PUSH
8518: LD_INT 1
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8526: LD_VAR 0 6
8530: PPUSH
8531: CALL_OW 264
8535: PUSH
8536: LD_INT 29
8538: PUSH
8539: EMPTY
8540: LIST
8541: IN
8542: IFFALSE 8563
// points := [ 70 , 200 , 400 ] ;
8544: LD_ADDR_VAR 0 9
8548: PUSH
8549: LD_INT 70
8551: PUSH
8552: LD_INT 200
8554: PUSH
8555: LD_INT 400
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: LIST
8562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8563: LD_VAR 0 6
8567: PPUSH
8568: CALL_OW 264
8572: PUSH
8573: LD_INT 14
8575: PUSH
8576: LD_INT 53
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: IN
8583: IFFALSE 8604
// points := [ 40 , 10 , 20 ] ;
8585: LD_ADDR_VAR 0 9
8589: PUSH
8590: LD_INT 40
8592: PUSH
8593: LD_INT 10
8595: PUSH
8596: LD_INT 20
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: LIST
8603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8604: LD_VAR 0 6
8608: PPUSH
8609: CALL_OW 264
8613: PUSH
8614: LD_INT 9
8616: PUSH
8617: EMPTY
8618: LIST
8619: IN
8620: IFFALSE 8641
// points := [ 5 , 70 , 20 ] ;
8622: LD_ADDR_VAR 0 9
8626: PUSH
8627: LD_INT 5
8629: PUSH
8630: LD_INT 70
8632: PUSH
8633: LD_INT 20
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: LIST
8640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8641: LD_VAR 0 6
8645: PPUSH
8646: CALL_OW 264
8650: PUSH
8651: LD_INT 10
8653: PUSH
8654: EMPTY
8655: LIST
8656: IN
8657: IFFALSE 8678
// points := [ 35 , 110 , 70 ] ;
8659: LD_ADDR_VAR 0 9
8663: PUSH
8664: LD_INT 35
8666: PUSH
8667: LD_INT 110
8669: PUSH
8670: LD_INT 70
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: LIST
8677: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8678: LD_VAR 0 6
8682: PPUSH
8683: CALL_OW 265
8687: PUSH
8688: LD_INT 25
8690: EQUAL
8691: IFFALSE 8712
// points := [ 80 , 65 , 100 ] ;
8693: LD_ADDR_VAR 0 9
8697: PUSH
8698: LD_INT 80
8700: PUSH
8701: LD_INT 65
8703: PUSH
8704: LD_INT 100
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: LIST
8711: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8712: LD_VAR 0 6
8716: PPUSH
8717: CALL_OW 263
8721: PUSH
8722: LD_INT 1
8724: EQUAL
8725: IFFALSE 8760
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8727: LD_ADDR_VAR 0 10
8731: PUSH
8732: LD_VAR 0 10
8736: PUSH
8737: LD_VAR 0 6
8741: PPUSH
8742: CALL_OW 311
8746: PPUSH
8747: LD_INT 3
8749: PPUSH
8750: CALL_OW 259
8754: PUSH
8755: LD_INT 4
8757: MUL
8758: MUL
8759: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8760: LD_VAR 0 6
8764: PPUSH
8765: CALL_OW 263
8769: PUSH
8770: LD_INT 2
8772: EQUAL
8773: IFFALSE 8824
// begin j := IsControledBy ( i ) ;
8775: LD_ADDR_VAR 0 7
8779: PUSH
8780: LD_VAR 0 6
8784: PPUSH
8785: CALL_OW 312
8789: ST_TO_ADDR
// if j then
8790: LD_VAR 0 7
8794: IFFALSE 8824
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8796: LD_ADDR_VAR 0 10
8800: PUSH
8801: LD_VAR 0 10
8805: PUSH
8806: LD_VAR 0 7
8810: PPUSH
8811: LD_INT 3
8813: PPUSH
8814: CALL_OW 259
8818: PUSH
8819: LD_INT 3
8821: MUL
8822: MUL
8823: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8824: LD_VAR 0 6
8828: PPUSH
8829: CALL_OW 264
8833: PUSH
8834: LD_INT 5
8836: PUSH
8837: LD_INT 6
8839: PUSH
8840: LD_INT 46
8842: PUSH
8843: LD_INT 44
8845: PUSH
8846: LD_INT 47
8848: PUSH
8849: LD_INT 45
8851: PUSH
8852: LD_INT 28
8854: PUSH
8855: LD_INT 7
8857: PUSH
8858: LD_INT 27
8860: PUSH
8861: LD_INT 29
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: IN
8876: PUSH
8877: LD_VAR 0 1
8881: PPUSH
8882: LD_INT 52
8884: PPUSH
8885: CALL_OW 321
8889: PUSH
8890: LD_INT 2
8892: EQUAL
8893: AND
8894: IFFALSE 8911
// bpoints := bpoints * 1.2 ;
8896: LD_ADDR_VAR 0 10
8900: PUSH
8901: LD_VAR 0 10
8905: PUSH
8906: LD_REAL  1.20000000000000E+0000
8909: MUL
8910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8911: LD_VAR 0 6
8915: PPUSH
8916: CALL_OW 264
8920: PUSH
8921: LD_INT 6
8923: PUSH
8924: LD_INT 46
8926: PUSH
8927: LD_INT 47
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: LIST
8934: IN
8935: IFFALSE 8952
// bpoints := bpoints * 1.2 ;
8937: LD_ADDR_VAR 0 10
8941: PUSH
8942: LD_VAR 0 10
8946: PUSH
8947: LD_REAL  1.20000000000000E+0000
8950: MUL
8951: ST_TO_ADDR
// end ; unit_building :
8952: GO 8966
8954: LD_INT 3
8956: DOUBLE
8957: EQUAL
8958: IFTRUE 8962
8960: GO 8965
8962: POP
// ; end ;
8963: GO 8966
8965: POP
// for j = 1 to 3 do
8966: LD_ADDR_VAR 0 7
8970: PUSH
8971: DOUBLE
8972: LD_INT 1
8974: DEC
8975: ST_TO_ADDR
8976: LD_INT 3
8978: PUSH
8979: FOR_TO
8980: IFFALSE 9033
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8982: LD_ADDR_VAR 0 5
8986: PUSH
8987: LD_VAR 0 5
8991: PPUSH
8992: LD_VAR 0 7
8996: PPUSH
8997: LD_VAR 0 5
9001: PUSH
9002: LD_VAR 0 7
9006: ARRAY
9007: PUSH
9008: LD_VAR 0 9
9012: PUSH
9013: LD_VAR 0 7
9017: ARRAY
9018: PUSH
9019: LD_VAR 0 10
9023: MUL
9024: PLUS
9025: PPUSH
9026: CALL_OW 1
9030: ST_TO_ADDR
9031: GO 8979
9033: POP
9034: POP
// end ;
9035: GO 7514
9037: POP
9038: POP
// result := Replace ( result , 4 , tmp ) ;
9039: LD_ADDR_VAR 0 5
9043: PUSH
9044: LD_VAR 0 5
9048: PPUSH
9049: LD_INT 4
9051: PPUSH
9052: LD_VAR 0 8
9056: PPUSH
9057: CALL_OW 1
9061: ST_TO_ADDR
// end ;
9062: LD_VAR 0 5
9066: RET
// export function DangerAtRange ( unit , range ) ; begin
9067: LD_INT 0
9069: PPUSH
// if not unit then
9070: LD_VAR 0 1
9074: NOT
9075: IFFALSE 9079
// exit ;
9077: GO 9124
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9079: LD_ADDR_VAR 0 3
9083: PUSH
9084: LD_VAR 0 1
9088: PPUSH
9089: CALL_OW 255
9093: PPUSH
9094: LD_VAR 0 1
9098: PPUSH
9099: CALL_OW 250
9103: PPUSH
9104: LD_VAR 0 1
9108: PPUSH
9109: CALL_OW 251
9113: PPUSH
9114: LD_VAR 0 2
9118: PPUSH
9119: CALL 7366 0 4
9123: ST_TO_ADDR
// end ;
9124: LD_VAR 0 3
9128: RET
// export function DangerInArea ( side , area ) ; begin
9129: LD_INT 0
9131: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9132: LD_ADDR_VAR 0 3
9136: PUSH
9137: LD_VAR 0 2
9141: PPUSH
9142: LD_INT 81
9144: PUSH
9145: LD_VAR 0 1
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PPUSH
9154: CALL_OW 70
9158: ST_TO_ADDR
// end ;
9159: LD_VAR 0 3
9163: RET
// export function IsExtension ( b ) ; begin
9164: LD_INT 0
9166: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9167: LD_ADDR_VAR 0 2
9171: PUSH
9172: LD_VAR 0 1
9176: PUSH
9177: LD_INT 23
9179: PUSH
9180: LD_INT 20
9182: PUSH
9183: LD_INT 22
9185: PUSH
9186: LD_INT 17
9188: PUSH
9189: LD_INT 24
9191: PUSH
9192: LD_INT 21
9194: PUSH
9195: LD_INT 19
9197: PUSH
9198: LD_INT 16
9200: PUSH
9201: LD_INT 25
9203: PUSH
9204: LD_INT 18
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: IN
9219: ST_TO_ADDR
// end ;
9220: LD_VAR 0 2
9224: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9225: LD_INT 0
9227: PPUSH
9228: PPUSH
9229: PPUSH
// result := [ ] ;
9230: LD_ADDR_VAR 0 4
9234: PUSH
9235: EMPTY
9236: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9237: LD_ADDR_VAR 0 5
9241: PUSH
9242: LD_VAR 0 2
9246: PPUSH
9247: LD_INT 21
9249: PUSH
9250: LD_INT 3
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 70
9261: ST_TO_ADDR
// if not tmp then
9262: LD_VAR 0 5
9266: NOT
9267: IFFALSE 9271
// exit ;
9269: GO 9335
// if checkLink then
9271: LD_VAR 0 3
9275: IFFALSE 9325
// begin for i in tmp do
9277: LD_ADDR_VAR 0 6
9281: PUSH
9282: LD_VAR 0 5
9286: PUSH
9287: FOR_IN
9288: IFFALSE 9323
// if GetBase ( i ) <> base then
9290: LD_VAR 0 6
9294: PPUSH
9295: CALL_OW 274
9299: PUSH
9300: LD_VAR 0 1
9304: NONEQUAL
9305: IFFALSE 9321
// ComLinkToBase ( base , i ) ;
9307: LD_VAR 0 1
9311: PPUSH
9312: LD_VAR 0 6
9316: PPUSH
9317: CALL_OW 169
9321: GO 9287
9323: POP
9324: POP
// end ; result := tmp ;
9325: LD_ADDR_VAR 0 4
9329: PUSH
9330: LD_VAR 0 5
9334: ST_TO_ADDR
// end ;
9335: LD_VAR 0 4
9339: RET
// export function ComComplete ( units , b ) ; var i ; begin
9340: LD_INT 0
9342: PPUSH
9343: PPUSH
// if not units then
9344: LD_VAR 0 1
9348: NOT
9349: IFFALSE 9353
// exit ;
9351: GO 9443
// for i in units do
9353: LD_ADDR_VAR 0 4
9357: PUSH
9358: LD_VAR 0 1
9362: PUSH
9363: FOR_IN
9364: IFFALSE 9441
// if BuildingStatus ( b ) = bs_build then
9366: LD_VAR 0 2
9370: PPUSH
9371: CALL_OW 461
9375: PUSH
9376: LD_INT 1
9378: EQUAL
9379: IFFALSE 9439
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9381: LD_VAR 0 4
9385: PPUSH
9386: LD_STRING h
9388: PUSH
9389: LD_VAR 0 2
9393: PPUSH
9394: CALL_OW 250
9398: PUSH
9399: LD_VAR 0 2
9403: PPUSH
9404: CALL_OW 251
9408: PUSH
9409: LD_VAR 0 2
9413: PUSH
9414: LD_INT 0
9416: PUSH
9417: LD_INT 0
9419: PUSH
9420: LD_INT 0
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: PUSH
9432: EMPTY
9433: LIST
9434: PPUSH
9435: CALL_OW 446
9439: GO 9363
9441: POP
9442: POP
// end ;
9443: LD_VAR 0 3
9447: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9448: LD_INT 0
9450: PPUSH
9451: PPUSH
9452: PPUSH
9453: PPUSH
9454: PPUSH
9455: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9456: LD_VAR 0 1
9460: NOT
9461: PUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: CALL_OW 263
9471: PUSH
9472: LD_INT 2
9474: NONEQUAL
9475: OR
9476: IFFALSE 9480
// exit ;
9478: GO 9796
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9480: LD_ADDR_VAR 0 6
9484: PUSH
9485: LD_INT 22
9487: PUSH
9488: LD_VAR 0 1
9492: PPUSH
9493: CALL_OW 255
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PUSH
9502: LD_INT 2
9504: PUSH
9505: LD_INT 30
9507: PUSH
9508: LD_INT 36
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: PUSH
9515: LD_INT 34
9517: PUSH
9518: LD_INT 31
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: CALL_OW 69
9538: ST_TO_ADDR
// if not tmp then
9539: LD_VAR 0 6
9543: NOT
9544: IFFALSE 9548
// exit ;
9546: GO 9796
// result := [ ] ;
9548: LD_ADDR_VAR 0 2
9552: PUSH
9553: EMPTY
9554: ST_TO_ADDR
// for i in tmp do
9555: LD_ADDR_VAR 0 3
9559: PUSH
9560: LD_VAR 0 6
9564: PUSH
9565: FOR_IN
9566: IFFALSE 9637
// begin t := UnitsInside ( i ) ;
9568: LD_ADDR_VAR 0 4
9572: PUSH
9573: LD_VAR 0 3
9577: PPUSH
9578: CALL_OW 313
9582: ST_TO_ADDR
// if t then
9583: LD_VAR 0 4
9587: IFFALSE 9635
// for j in t do
9589: LD_ADDR_VAR 0 7
9593: PUSH
9594: LD_VAR 0 4
9598: PUSH
9599: FOR_IN
9600: IFFALSE 9633
// result := Replace ( result , result + 1 , j ) ;
9602: LD_ADDR_VAR 0 2
9606: PUSH
9607: LD_VAR 0 2
9611: PPUSH
9612: LD_VAR 0 2
9616: PUSH
9617: LD_INT 1
9619: PLUS
9620: PPUSH
9621: LD_VAR 0 7
9625: PPUSH
9626: CALL_OW 1
9630: ST_TO_ADDR
9631: GO 9599
9633: POP
9634: POP
// end ;
9635: GO 9565
9637: POP
9638: POP
// if not result then
9639: LD_VAR 0 2
9643: NOT
9644: IFFALSE 9648
// exit ;
9646: GO 9796
// mech := result [ 1 ] ;
9648: LD_ADDR_VAR 0 5
9652: PUSH
9653: LD_VAR 0 2
9657: PUSH
9658: LD_INT 1
9660: ARRAY
9661: ST_TO_ADDR
// if result > 1 then
9662: LD_VAR 0 2
9666: PUSH
9667: LD_INT 1
9669: GREATER
9670: IFFALSE 9782
// begin for i = 2 to result do
9672: LD_ADDR_VAR 0 3
9676: PUSH
9677: DOUBLE
9678: LD_INT 2
9680: DEC
9681: ST_TO_ADDR
9682: LD_VAR 0 2
9686: PUSH
9687: FOR_TO
9688: IFFALSE 9780
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9690: LD_ADDR_VAR 0 4
9694: PUSH
9695: LD_VAR 0 2
9699: PUSH
9700: LD_VAR 0 3
9704: ARRAY
9705: PPUSH
9706: LD_INT 3
9708: PPUSH
9709: CALL_OW 259
9713: PUSH
9714: LD_VAR 0 2
9718: PUSH
9719: LD_VAR 0 3
9723: ARRAY
9724: PPUSH
9725: CALL_OW 432
9729: MINUS
9730: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9731: LD_VAR 0 4
9735: PUSH
9736: LD_VAR 0 5
9740: PPUSH
9741: LD_INT 3
9743: PPUSH
9744: CALL_OW 259
9748: PUSH
9749: LD_VAR 0 5
9753: PPUSH
9754: CALL_OW 432
9758: MINUS
9759: GREATEREQUAL
9760: IFFALSE 9778
// mech := result [ i ] ;
9762: LD_ADDR_VAR 0 5
9766: PUSH
9767: LD_VAR 0 2
9771: PUSH
9772: LD_VAR 0 3
9776: ARRAY
9777: ST_TO_ADDR
// end ;
9778: GO 9687
9780: POP
9781: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9782: LD_VAR 0 1
9786: PPUSH
9787: LD_VAR 0 5
9791: PPUSH
9792: CALL_OW 135
// end ;
9796: LD_VAR 0 2
9800: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9801: LD_INT 0
9803: PPUSH
9804: PPUSH
9805: PPUSH
9806: PPUSH
9807: PPUSH
9808: PPUSH
9809: PPUSH
9810: PPUSH
9811: PPUSH
9812: PPUSH
9813: PPUSH
9814: PPUSH
9815: PPUSH
// result := [ ] ;
9816: LD_ADDR_VAR 0 7
9820: PUSH
9821: EMPTY
9822: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9823: LD_VAR 0 1
9827: PPUSH
9828: CALL_OW 266
9832: PUSH
9833: LD_INT 0
9835: PUSH
9836: LD_INT 1
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: IN
9843: NOT
9844: IFFALSE 9848
// exit ;
9846: GO 11482
// if name then
9848: LD_VAR 0 3
9852: IFFALSE 9868
// SetBName ( base_dep , name ) ;
9854: LD_VAR 0 1
9858: PPUSH
9859: LD_VAR 0 3
9863: PPUSH
9864: CALL_OW 500
// base := GetBase ( base_dep ) ;
9868: LD_ADDR_VAR 0 15
9872: PUSH
9873: LD_VAR 0 1
9877: PPUSH
9878: CALL_OW 274
9882: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9883: LD_ADDR_VAR 0 16
9887: PUSH
9888: LD_VAR 0 1
9892: PPUSH
9893: CALL_OW 255
9897: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9898: LD_ADDR_VAR 0 17
9902: PUSH
9903: LD_VAR 0 1
9907: PPUSH
9908: CALL_OW 248
9912: ST_TO_ADDR
// if sources then
9913: LD_VAR 0 5
9917: IFFALSE 9964
// for i = 1 to 3 do
9919: LD_ADDR_VAR 0 8
9923: PUSH
9924: DOUBLE
9925: LD_INT 1
9927: DEC
9928: ST_TO_ADDR
9929: LD_INT 3
9931: PUSH
9932: FOR_TO
9933: IFFALSE 9962
// AddResourceType ( base , i , sources [ i ] ) ;
9935: LD_VAR 0 15
9939: PPUSH
9940: LD_VAR 0 8
9944: PPUSH
9945: LD_VAR 0 5
9949: PUSH
9950: LD_VAR 0 8
9954: ARRAY
9955: PPUSH
9956: CALL_OW 276
9960: GO 9932
9962: POP
9963: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9964: LD_ADDR_VAR 0 18
9968: PUSH
9969: LD_VAR 0 15
9973: PPUSH
9974: LD_VAR 0 2
9978: PPUSH
9979: LD_INT 1
9981: PPUSH
9982: CALL 9225 0 3
9986: ST_TO_ADDR
// InitHc ;
9987: CALL_OW 19
// InitUc ;
9991: CALL_OW 18
// uc_side := side ;
9995: LD_ADDR_OWVAR 20
9999: PUSH
10000: LD_VAR 0 16
10004: ST_TO_ADDR
// uc_nation := nation ;
10005: LD_ADDR_OWVAR 21
10009: PUSH
10010: LD_VAR 0 17
10014: ST_TO_ADDR
// if buildings then
10015: LD_VAR 0 18
10019: IFFALSE 11341
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10021: LD_ADDR_VAR 0 19
10025: PUSH
10026: LD_VAR 0 18
10030: PPUSH
10031: LD_INT 2
10033: PUSH
10034: LD_INT 30
10036: PUSH
10037: LD_INT 29
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: LD_INT 30
10046: PUSH
10047: LD_INT 30
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: LIST
10058: PPUSH
10059: CALL_OW 72
10063: ST_TO_ADDR
// if tmp then
10064: LD_VAR 0 19
10068: IFFALSE 10116
// for i in tmp do
10070: LD_ADDR_VAR 0 8
10074: PUSH
10075: LD_VAR 0 19
10079: PUSH
10080: FOR_IN
10081: IFFALSE 10114
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10083: LD_VAR 0 8
10087: PPUSH
10088: CALL_OW 250
10092: PPUSH
10093: LD_VAR 0 8
10097: PPUSH
10098: CALL_OW 251
10102: PPUSH
10103: LD_VAR 0 16
10107: PPUSH
10108: CALL_OW 441
10112: GO 10080
10114: POP
10115: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10116: LD_VAR 0 18
10120: PPUSH
10121: LD_INT 2
10123: PUSH
10124: LD_INT 30
10126: PUSH
10127: LD_INT 32
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: LD_INT 30
10136: PUSH
10137: LD_INT 33
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: LIST
10148: PPUSH
10149: CALL_OW 72
10153: IFFALSE 10241
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10155: LD_ADDR_VAR 0 8
10159: PUSH
10160: LD_VAR 0 18
10164: PPUSH
10165: LD_INT 2
10167: PUSH
10168: LD_INT 30
10170: PUSH
10171: LD_INT 32
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: LD_INT 30
10180: PUSH
10181: LD_INT 33
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: PPUSH
10193: CALL_OW 72
10197: PUSH
10198: FOR_IN
10199: IFFALSE 10239
// begin if not GetBWeapon ( i ) then
10201: LD_VAR 0 8
10205: PPUSH
10206: CALL_OW 269
10210: NOT
10211: IFFALSE 10237
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10213: LD_VAR 0 8
10217: PPUSH
10218: LD_VAR 0 8
10222: PPUSH
10223: LD_VAR 0 2
10227: PPUSH
10228: CALL 11487 0 2
10232: PPUSH
10233: CALL_OW 431
// end ;
10237: GO 10198
10239: POP
10240: POP
// end ; for i = 1 to personel do
10241: LD_ADDR_VAR 0 8
10245: PUSH
10246: DOUBLE
10247: LD_INT 1
10249: DEC
10250: ST_TO_ADDR
10251: LD_VAR 0 6
10255: PUSH
10256: FOR_TO
10257: IFFALSE 11321
// begin if i > 4 then
10259: LD_VAR 0 8
10263: PUSH
10264: LD_INT 4
10266: GREATER
10267: IFFALSE 10271
// break ;
10269: GO 11321
// case i of 1 :
10271: LD_VAR 0 8
10275: PUSH
10276: LD_INT 1
10278: DOUBLE
10279: EQUAL
10280: IFTRUE 10284
10282: GO 10364
10284: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10285: LD_ADDR_VAR 0 12
10289: PUSH
10290: LD_VAR 0 18
10294: PPUSH
10295: LD_INT 22
10297: PUSH
10298: LD_VAR 0 16
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 58
10309: PUSH
10310: EMPTY
10311: LIST
10312: PUSH
10313: LD_INT 2
10315: PUSH
10316: LD_INT 30
10318: PUSH
10319: LD_INT 32
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 30
10328: PUSH
10329: LD_INT 4
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: LD_INT 30
10338: PUSH
10339: LD_INT 5
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 72
10361: ST_TO_ADDR
10362: GO 10586
10364: LD_INT 2
10366: DOUBLE
10367: EQUAL
10368: IFTRUE 10372
10370: GO 10434
10372: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10373: LD_ADDR_VAR 0 12
10377: PUSH
10378: LD_VAR 0 18
10382: PPUSH
10383: LD_INT 22
10385: PUSH
10386: LD_VAR 0 16
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PUSH
10395: LD_INT 2
10397: PUSH
10398: LD_INT 30
10400: PUSH
10401: LD_INT 0
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: LD_INT 30
10410: PUSH
10411: LD_INT 1
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PPUSH
10427: CALL_OW 72
10431: ST_TO_ADDR
10432: GO 10586
10434: LD_INT 3
10436: DOUBLE
10437: EQUAL
10438: IFTRUE 10442
10440: GO 10504
10442: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10443: LD_ADDR_VAR 0 12
10447: PUSH
10448: LD_VAR 0 18
10452: PPUSH
10453: LD_INT 22
10455: PUSH
10456: LD_VAR 0 16
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PUSH
10465: LD_INT 2
10467: PUSH
10468: LD_INT 30
10470: PUSH
10471: LD_INT 2
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: LD_INT 30
10480: PUSH
10481: LD_INT 3
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: LIST
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PPUSH
10497: CALL_OW 72
10501: ST_TO_ADDR
10502: GO 10586
10504: LD_INT 4
10506: DOUBLE
10507: EQUAL
10508: IFTRUE 10512
10510: GO 10585
10512: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10513: LD_ADDR_VAR 0 12
10517: PUSH
10518: LD_VAR 0 18
10522: PPUSH
10523: LD_INT 22
10525: PUSH
10526: LD_VAR 0 16
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 2
10537: PUSH
10538: LD_INT 30
10540: PUSH
10541: LD_INT 6
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 30
10550: PUSH
10551: LD_INT 7
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 30
10560: PUSH
10561: LD_INT 8
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PPUSH
10578: CALL_OW 72
10582: ST_TO_ADDR
10583: GO 10586
10585: POP
// if i = 1 then
10586: LD_VAR 0 8
10590: PUSH
10591: LD_INT 1
10593: EQUAL
10594: IFFALSE 10705
// begin tmp := [ ] ;
10596: LD_ADDR_VAR 0 19
10600: PUSH
10601: EMPTY
10602: ST_TO_ADDR
// for j in f do
10603: LD_ADDR_VAR 0 9
10607: PUSH
10608: LD_VAR 0 12
10612: PUSH
10613: FOR_IN
10614: IFFALSE 10687
// if GetBType ( j ) = b_bunker then
10616: LD_VAR 0 9
10620: PPUSH
10621: CALL_OW 266
10625: PUSH
10626: LD_INT 32
10628: EQUAL
10629: IFFALSE 10656
// tmp := Insert ( tmp , 1 , j ) else
10631: LD_ADDR_VAR 0 19
10635: PUSH
10636: LD_VAR 0 19
10640: PPUSH
10641: LD_INT 1
10643: PPUSH
10644: LD_VAR 0 9
10648: PPUSH
10649: CALL_OW 2
10653: ST_TO_ADDR
10654: GO 10685
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10656: LD_ADDR_VAR 0 19
10660: PUSH
10661: LD_VAR 0 19
10665: PPUSH
10666: LD_VAR 0 19
10670: PUSH
10671: LD_INT 1
10673: PLUS
10674: PPUSH
10675: LD_VAR 0 9
10679: PPUSH
10680: CALL_OW 2
10684: ST_TO_ADDR
10685: GO 10613
10687: POP
10688: POP
// if tmp then
10689: LD_VAR 0 19
10693: IFFALSE 10705
// f := tmp ;
10695: LD_ADDR_VAR 0 12
10699: PUSH
10700: LD_VAR 0 19
10704: ST_TO_ADDR
// end ; x := personel [ i ] ;
10705: LD_ADDR_VAR 0 13
10709: PUSH
10710: LD_VAR 0 6
10714: PUSH
10715: LD_VAR 0 8
10719: ARRAY
10720: ST_TO_ADDR
// if x = - 1 then
10721: LD_VAR 0 13
10725: PUSH
10726: LD_INT 1
10728: NEG
10729: EQUAL
10730: IFFALSE 10939
// begin for j in f do
10732: LD_ADDR_VAR 0 9
10736: PUSH
10737: LD_VAR 0 12
10741: PUSH
10742: FOR_IN
10743: IFFALSE 10935
// repeat InitHc ;
10745: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10749: LD_VAR 0 9
10753: PPUSH
10754: CALL_OW 266
10758: PUSH
10759: LD_INT 5
10761: EQUAL
10762: IFFALSE 10832
// begin if UnitsInside ( j ) < 3 then
10764: LD_VAR 0 9
10768: PPUSH
10769: CALL_OW 313
10773: PUSH
10774: LD_INT 3
10776: LESS
10777: IFFALSE 10813
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10779: LD_INT 0
10781: PPUSH
10782: LD_INT 5
10784: PUSH
10785: LD_INT 8
10787: PUSH
10788: LD_INT 9
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: PUSH
10796: LD_VAR 0 17
10800: ARRAY
10801: PPUSH
10802: LD_VAR 0 4
10806: PPUSH
10807: CALL_OW 380
10811: GO 10830
// PrepareHuman ( false , i , skill ) ;
10813: LD_INT 0
10815: PPUSH
10816: LD_VAR 0 8
10820: PPUSH
10821: LD_VAR 0 4
10825: PPUSH
10826: CALL_OW 380
// end else
10830: GO 10849
// PrepareHuman ( false , i , skill ) ;
10832: LD_INT 0
10834: PPUSH
10835: LD_VAR 0 8
10839: PPUSH
10840: LD_VAR 0 4
10844: PPUSH
10845: CALL_OW 380
// un := CreateHuman ;
10849: LD_ADDR_VAR 0 14
10853: PUSH
10854: CALL_OW 44
10858: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10859: LD_ADDR_VAR 0 7
10863: PUSH
10864: LD_VAR 0 7
10868: PPUSH
10869: LD_INT 1
10871: PPUSH
10872: LD_VAR 0 14
10876: PPUSH
10877: CALL_OW 2
10881: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10882: LD_VAR 0 14
10886: PPUSH
10887: LD_VAR 0 9
10891: PPUSH
10892: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10896: LD_VAR 0 9
10900: PPUSH
10901: CALL_OW 313
10905: PUSH
10906: LD_INT 6
10908: EQUAL
10909: PUSH
10910: LD_VAR 0 9
10914: PPUSH
10915: CALL_OW 266
10919: PUSH
10920: LD_INT 32
10922: PUSH
10923: LD_INT 31
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: IN
10930: OR
10931: IFFALSE 10745
10933: GO 10742
10935: POP
10936: POP
// end else
10937: GO 11319
// for j = 1 to x do
10939: LD_ADDR_VAR 0 9
10943: PUSH
10944: DOUBLE
10945: LD_INT 1
10947: DEC
10948: ST_TO_ADDR
10949: LD_VAR 0 13
10953: PUSH
10954: FOR_TO
10955: IFFALSE 11317
// begin InitHc ;
10957: CALL_OW 19
// if not f then
10961: LD_VAR 0 12
10965: NOT
10966: IFFALSE 11055
// begin PrepareHuman ( false , i , skill ) ;
10968: LD_INT 0
10970: PPUSH
10971: LD_VAR 0 8
10975: PPUSH
10976: LD_VAR 0 4
10980: PPUSH
10981: CALL_OW 380
// un := CreateHuman ;
10985: LD_ADDR_VAR 0 14
10989: PUSH
10990: CALL_OW 44
10994: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10995: LD_ADDR_VAR 0 7
10999: PUSH
11000: LD_VAR 0 7
11004: PPUSH
11005: LD_INT 1
11007: PPUSH
11008: LD_VAR 0 14
11012: PPUSH
11013: CALL_OW 2
11017: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11018: LD_VAR 0 14
11022: PPUSH
11023: LD_VAR 0 1
11027: PPUSH
11028: CALL_OW 250
11032: PPUSH
11033: LD_VAR 0 1
11037: PPUSH
11038: CALL_OW 251
11042: PPUSH
11043: LD_INT 10
11045: PPUSH
11046: LD_INT 0
11048: PPUSH
11049: CALL_OW 50
// continue ;
11053: GO 10954
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11055: LD_VAR 0 12
11059: PUSH
11060: LD_INT 1
11062: ARRAY
11063: PPUSH
11064: CALL_OW 313
11068: PUSH
11069: LD_VAR 0 12
11073: PUSH
11074: LD_INT 1
11076: ARRAY
11077: PPUSH
11078: CALL_OW 266
11082: PUSH
11083: LD_INT 32
11085: PUSH
11086: LD_INT 31
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: IN
11093: AND
11094: PUSH
11095: LD_VAR 0 12
11099: PUSH
11100: LD_INT 1
11102: ARRAY
11103: PPUSH
11104: CALL_OW 313
11108: PUSH
11109: LD_INT 6
11111: EQUAL
11112: OR
11113: IFFALSE 11133
// f := Delete ( f , 1 ) ;
11115: LD_ADDR_VAR 0 12
11119: PUSH
11120: LD_VAR 0 12
11124: PPUSH
11125: LD_INT 1
11127: PPUSH
11128: CALL_OW 3
11132: ST_TO_ADDR
// if not f then
11133: LD_VAR 0 12
11137: NOT
11138: IFFALSE 11156
// begin x := x + 2 ;
11140: LD_ADDR_VAR 0 13
11144: PUSH
11145: LD_VAR 0 13
11149: PUSH
11150: LD_INT 2
11152: PLUS
11153: ST_TO_ADDR
// continue ;
11154: GO 10954
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11156: LD_VAR 0 12
11160: PUSH
11161: LD_INT 1
11163: ARRAY
11164: PPUSH
11165: CALL_OW 266
11169: PUSH
11170: LD_INT 5
11172: EQUAL
11173: IFFALSE 11247
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11175: LD_VAR 0 12
11179: PUSH
11180: LD_INT 1
11182: ARRAY
11183: PPUSH
11184: CALL_OW 313
11188: PUSH
11189: LD_INT 3
11191: LESS
11192: IFFALSE 11228
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11194: LD_INT 0
11196: PPUSH
11197: LD_INT 5
11199: PUSH
11200: LD_INT 8
11202: PUSH
11203: LD_INT 9
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: LIST
11210: PUSH
11211: LD_VAR 0 17
11215: ARRAY
11216: PPUSH
11217: LD_VAR 0 4
11221: PPUSH
11222: CALL_OW 380
11226: GO 11245
// PrepareHuman ( false , i , skill ) ;
11228: LD_INT 0
11230: PPUSH
11231: LD_VAR 0 8
11235: PPUSH
11236: LD_VAR 0 4
11240: PPUSH
11241: CALL_OW 380
// end else
11245: GO 11264
// PrepareHuman ( false , i , skill ) ;
11247: LD_INT 0
11249: PPUSH
11250: LD_VAR 0 8
11254: PPUSH
11255: LD_VAR 0 4
11259: PPUSH
11260: CALL_OW 380
// un := CreateHuman ;
11264: LD_ADDR_VAR 0 14
11268: PUSH
11269: CALL_OW 44
11273: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11274: LD_ADDR_VAR 0 7
11278: PUSH
11279: LD_VAR 0 7
11283: PPUSH
11284: LD_INT 1
11286: PPUSH
11287: LD_VAR 0 14
11291: PPUSH
11292: CALL_OW 2
11296: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11297: LD_VAR 0 14
11301: PPUSH
11302: LD_VAR 0 12
11306: PUSH
11307: LD_INT 1
11309: ARRAY
11310: PPUSH
11311: CALL_OW 52
// end ;
11315: GO 10954
11317: POP
11318: POP
// end ;
11319: GO 10256
11321: POP
11322: POP
// result := result ^ buildings ;
11323: LD_ADDR_VAR 0 7
11327: PUSH
11328: LD_VAR 0 7
11332: PUSH
11333: LD_VAR 0 18
11337: ADD
11338: ST_TO_ADDR
// end else
11339: GO 11482
// begin for i = 1 to personel do
11341: LD_ADDR_VAR 0 8
11345: PUSH
11346: DOUBLE
11347: LD_INT 1
11349: DEC
11350: ST_TO_ADDR
11351: LD_VAR 0 6
11355: PUSH
11356: FOR_TO
11357: IFFALSE 11480
// begin if i > 4 then
11359: LD_VAR 0 8
11363: PUSH
11364: LD_INT 4
11366: GREATER
11367: IFFALSE 11371
// break ;
11369: GO 11480
// x := personel [ i ] ;
11371: LD_ADDR_VAR 0 13
11375: PUSH
11376: LD_VAR 0 6
11380: PUSH
11381: LD_VAR 0 8
11385: ARRAY
11386: ST_TO_ADDR
// if x = - 1 then
11387: LD_VAR 0 13
11391: PUSH
11392: LD_INT 1
11394: NEG
11395: EQUAL
11396: IFFALSE 11400
// continue ;
11398: GO 11356
// PrepareHuman ( false , i , skill ) ;
11400: LD_INT 0
11402: PPUSH
11403: LD_VAR 0 8
11407: PPUSH
11408: LD_VAR 0 4
11412: PPUSH
11413: CALL_OW 380
// un := CreateHuman ;
11417: LD_ADDR_VAR 0 14
11421: PUSH
11422: CALL_OW 44
11426: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11427: LD_VAR 0 14
11431: PPUSH
11432: LD_VAR 0 1
11436: PPUSH
11437: CALL_OW 250
11441: PPUSH
11442: LD_VAR 0 1
11446: PPUSH
11447: CALL_OW 251
11451: PPUSH
11452: LD_INT 10
11454: PPUSH
11455: LD_INT 0
11457: PPUSH
11458: CALL_OW 50
// result := result ^ un ;
11462: LD_ADDR_VAR 0 7
11466: PUSH
11467: LD_VAR 0 7
11471: PUSH
11472: LD_VAR 0 14
11476: ADD
11477: ST_TO_ADDR
// end ;
11478: GO 11356
11480: POP
11481: POP
// end ; end ;
11482: LD_VAR 0 7
11486: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11487: LD_INT 0
11489: PPUSH
11490: PPUSH
11491: PPUSH
11492: PPUSH
11493: PPUSH
11494: PPUSH
11495: PPUSH
11496: PPUSH
11497: PPUSH
11498: PPUSH
11499: PPUSH
11500: PPUSH
11501: PPUSH
11502: PPUSH
11503: PPUSH
11504: PPUSH
// result := false ;
11505: LD_ADDR_VAR 0 3
11509: PUSH
11510: LD_INT 0
11512: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11513: LD_VAR 0 1
11517: NOT
11518: PUSH
11519: LD_VAR 0 1
11523: PPUSH
11524: CALL_OW 266
11528: PUSH
11529: LD_INT 32
11531: PUSH
11532: LD_INT 33
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: IN
11539: NOT
11540: OR
11541: IFFALSE 11545
// exit ;
11543: GO 12654
// nat := GetNation ( tower ) ;
11545: LD_ADDR_VAR 0 12
11549: PUSH
11550: LD_VAR 0 1
11554: PPUSH
11555: CALL_OW 248
11559: ST_TO_ADDR
// side := GetSide ( tower ) ;
11560: LD_ADDR_VAR 0 16
11564: PUSH
11565: LD_VAR 0 1
11569: PPUSH
11570: CALL_OW 255
11574: ST_TO_ADDR
// x := GetX ( tower ) ;
11575: LD_ADDR_VAR 0 10
11579: PUSH
11580: LD_VAR 0 1
11584: PPUSH
11585: CALL_OW 250
11589: ST_TO_ADDR
// y := GetY ( tower ) ;
11590: LD_ADDR_VAR 0 11
11594: PUSH
11595: LD_VAR 0 1
11599: PPUSH
11600: CALL_OW 251
11604: ST_TO_ADDR
// if not x or not y then
11605: LD_VAR 0 10
11609: NOT
11610: PUSH
11611: LD_VAR 0 11
11615: NOT
11616: OR
11617: IFFALSE 11621
// exit ;
11619: GO 12654
// weapon := 0 ;
11621: LD_ADDR_VAR 0 18
11625: PUSH
11626: LD_INT 0
11628: ST_TO_ADDR
// fac_list := [ ] ;
11629: LD_ADDR_VAR 0 17
11633: PUSH
11634: EMPTY
11635: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11636: LD_ADDR_VAR 0 6
11640: PUSH
11641: LD_VAR 0 1
11645: PPUSH
11646: CALL_OW 274
11650: PPUSH
11651: LD_VAR 0 2
11655: PPUSH
11656: LD_INT 0
11658: PPUSH
11659: CALL 9225 0 3
11663: PPUSH
11664: LD_INT 30
11666: PUSH
11667: LD_INT 3
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PPUSH
11674: CALL_OW 72
11678: ST_TO_ADDR
// if not factories then
11679: LD_VAR 0 6
11683: NOT
11684: IFFALSE 11688
// exit ;
11686: GO 12654
// for i in factories do
11688: LD_ADDR_VAR 0 8
11692: PUSH
11693: LD_VAR 0 6
11697: PUSH
11698: FOR_IN
11699: IFFALSE 11724
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11701: LD_ADDR_VAR 0 17
11705: PUSH
11706: LD_VAR 0 17
11710: PUSH
11711: LD_VAR 0 8
11715: PPUSH
11716: CALL_OW 478
11720: UNION
11721: ST_TO_ADDR
11722: GO 11698
11724: POP
11725: POP
// if not fac_list then
11726: LD_VAR 0 17
11730: NOT
11731: IFFALSE 11735
// exit ;
11733: GO 12654
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11735: LD_ADDR_VAR 0 5
11739: PUSH
11740: LD_INT 4
11742: PUSH
11743: LD_INT 5
11745: PUSH
11746: LD_INT 9
11748: PUSH
11749: LD_INT 10
11751: PUSH
11752: LD_INT 6
11754: PUSH
11755: LD_INT 7
11757: PUSH
11758: LD_INT 11
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: PUSH
11770: LD_INT 27
11772: PUSH
11773: LD_INT 28
11775: PUSH
11776: LD_INT 26
11778: PUSH
11779: LD_INT 30
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: PUSH
11788: LD_INT 43
11790: PUSH
11791: LD_INT 44
11793: PUSH
11794: LD_INT 46
11796: PUSH
11797: LD_INT 45
11799: PUSH
11800: LD_INT 47
11802: PUSH
11803: LD_INT 49
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: LIST
11818: PUSH
11819: LD_VAR 0 12
11823: ARRAY
11824: ST_TO_ADDR
// list := list isect fac_list ;
11825: LD_ADDR_VAR 0 5
11829: PUSH
11830: LD_VAR 0 5
11834: PUSH
11835: LD_VAR 0 17
11839: ISECT
11840: ST_TO_ADDR
// if not list then
11841: LD_VAR 0 5
11845: NOT
11846: IFFALSE 11850
// exit ;
11848: GO 12654
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11850: LD_VAR 0 12
11854: PUSH
11855: LD_INT 3
11857: EQUAL
11858: PUSH
11859: LD_INT 49
11861: PUSH
11862: LD_VAR 0 5
11866: IN
11867: AND
11868: PUSH
11869: LD_INT 31
11871: PPUSH
11872: LD_VAR 0 16
11876: PPUSH
11877: CALL_OW 321
11881: PUSH
11882: LD_INT 2
11884: EQUAL
11885: AND
11886: IFFALSE 11946
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11888: LD_INT 22
11890: PUSH
11891: LD_VAR 0 16
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 35
11902: PUSH
11903: LD_INT 49
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: LD_INT 91
11912: PUSH
11913: LD_VAR 0 1
11917: PUSH
11918: LD_INT 10
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: LIST
11930: PPUSH
11931: CALL_OW 69
11935: NOT
11936: IFFALSE 11946
// weapon := ru_time_lapser ;
11938: LD_ADDR_VAR 0 18
11942: PUSH
11943: LD_INT 49
11945: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11946: LD_VAR 0 12
11950: PUSH
11951: LD_INT 1
11953: PUSH
11954: LD_INT 2
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: IN
11961: PUSH
11962: LD_INT 11
11964: PUSH
11965: LD_VAR 0 5
11969: IN
11970: PUSH
11971: LD_INT 30
11973: PUSH
11974: LD_VAR 0 5
11978: IN
11979: OR
11980: AND
11981: PUSH
11982: LD_INT 6
11984: PPUSH
11985: LD_VAR 0 16
11989: PPUSH
11990: CALL_OW 321
11994: PUSH
11995: LD_INT 2
11997: EQUAL
11998: AND
11999: IFFALSE 12164
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12001: LD_INT 22
12003: PUSH
12004: LD_VAR 0 16
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 2
12015: PUSH
12016: LD_INT 35
12018: PUSH
12019: LD_INT 11
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 35
12028: PUSH
12029: LD_INT 30
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: LIST
12040: PUSH
12041: LD_INT 91
12043: PUSH
12044: LD_VAR 0 1
12048: PUSH
12049: LD_INT 18
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: LIST
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: PPUSH
12062: CALL_OW 69
12066: NOT
12067: PUSH
12068: LD_INT 22
12070: PUSH
12071: LD_VAR 0 16
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: LD_INT 2
12082: PUSH
12083: LD_INT 30
12085: PUSH
12086: LD_INT 32
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: LD_INT 30
12095: PUSH
12096: LD_INT 33
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 91
12110: PUSH
12111: LD_VAR 0 1
12115: PUSH
12116: LD_INT 12
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: LIST
12128: PUSH
12129: EMPTY
12130: LIST
12131: PPUSH
12132: CALL_OW 69
12136: PUSH
12137: LD_INT 2
12139: GREATER
12140: AND
12141: IFFALSE 12164
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12143: LD_ADDR_VAR 0 18
12147: PUSH
12148: LD_INT 11
12150: PUSH
12151: LD_INT 30
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_VAR 0 12
12162: ARRAY
12163: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12164: LD_VAR 0 18
12168: NOT
12169: PUSH
12170: LD_INT 40
12172: PPUSH
12173: LD_VAR 0 16
12177: PPUSH
12178: CALL_OW 321
12182: PUSH
12183: LD_INT 2
12185: EQUAL
12186: AND
12187: PUSH
12188: LD_INT 7
12190: PUSH
12191: LD_VAR 0 5
12195: IN
12196: PUSH
12197: LD_INT 28
12199: PUSH
12200: LD_VAR 0 5
12204: IN
12205: OR
12206: PUSH
12207: LD_INT 45
12209: PUSH
12210: LD_VAR 0 5
12214: IN
12215: OR
12216: AND
12217: IFFALSE 12471
// begin hex := GetHexInfo ( x , y ) ;
12219: LD_ADDR_VAR 0 4
12223: PUSH
12224: LD_VAR 0 10
12228: PPUSH
12229: LD_VAR 0 11
12233: PPUSH
12234: CALL_OW 546
12238: ST_TO_ADDR
// if hex [ 1 ] then
12239: LD_VAR 0 4
12243: PUSH
12244: LD_INT 1
12246: ARRAY
12247: IFFALSE 12251
// exit ;
12249: GO 12654
// height := hex [ 2 ] ;
12251: LD_ADDR_VAR 0 15
12255: PUSH
12256: LD_VAR 0 4
12260: PUSH
12261: LD_INT 2
12263: ARRAY
12264: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12265: LD_ADDR_VAR 0 14
12269: PUSH
12270: LD_INT 0
12272: PUSH
12273: LD_INT 2
12275: PUSH
12276: LD_INT 3
12278: PUSH
12279: LD_INT 5
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: ST_TO_ADDR
// for i in tmp do
12288: LD_ADDR_VAR 0 8
12292: PUSH
12293: LD_VAR 0 14
12297: PUSH
12298: FOR_IN
12299: IFFALSE 12469
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12301: LD_ADDR_VAR 0 9
12305: PUSH
12306: LD_VAR 0 10
12310: PPUSH
12311: LD_VAR 0 8
12315: PPUSH
12316: LD_INT 5
12318: PPUSH
12319: CALL_OW 272
12323: PUSH
12324: LD_VAR 0 11
12328: PPUSH
12329: LD_VAR 0 8
12333: PPUSH
12334: LD_INT 5
12336: PPUSH
12337: CALL_OW 273
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12346: LD_VAR 0 9
12350: PUSH
12351: LD_INT 1
12353: ARRAY
12354: PPUSH
12355: LD_VAR 0 9
12359: PUSH
12360: LD_INT 2
12362: ARRAY
12363: PPUSH
12364: CALL_OW 488
12368: IFFALSE 12467
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12370: LD_ADDR_VAR 0 4
12374: PUSH
12375: LD_VAR 0 9
12379: PUSH
12380: LD_INT 1
12382: ARRAY
12383: PPUSH
12384: LD_VAR 0 9
12388: PUSH
12389: LD_INT 2
12391: ARRAY
12392: PPUSH
12393: CALL_OW 546
12397: ST_TO_ADDR
// if hex [ 1 ] then
12398: LD_VAR 0 4
12402: PUSH
12403: LD_INT 1
12405: ARRAY
12406: IFFALSE 12410
// continue ;
12408: GO 12298
// h := hex [ 2 ] ;
12410: LD_ADDR_VAR 0 13
12414: PUSH
12415: LD_VAR 0 4
12419: PUSH
12420: LD_INT 2
12422: ARRAY
12423: ST_TO_ADDR
// if h + 7 < height then
12424: LD_VAR 0 13
12428: PUSH
12429: LD_INT 7
12431: PLUS
12432: PUSH
12433: LD_VAR 0 15
12437: LESS
12438: IFFALSE 12467
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12440: LD_ADDR_VAR 0 18
12444: PUSH
12445: LD_INT 7
12447: PUSH
12448: LD_INT 28
12450: PUSH
12451: LD_INT 45
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: LIST
12458: PUSH
12459: LD_VAR 0 12
12463: ARRAY
12464: ST_TO_ADDR
// break ;
12465: GO 12469
// end ; end ; end ;
12467: GO 12298
12469: POP
12470: POP
// end ; if not weapon then
12471: LD_VAR 0 18
12475: NOT
12476: IFFALSE 12536
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12478: LD_ADDR_VAR 0 5
12482: PUSH
12483: LD_VAR 0 5
12487: PUSH
12488: LD_INT 11
12490: PUSH
12491: LD_INT 30
12493: PUSH
12494: LD_INT 49
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: LIST
12501: DIFF
12502: ST_TO_ADDR
// if not list then
12503: LD_VAR 0 5
12507: NOT
12508: IFFALSE 12512
// exit ;
12510: GO 12654
// weapon := list [ rand ( 1 , list ) ] ;
12512: LD_ADDR_VAR 0 18
12516: PUSH
12517: LD_VAR 0 5
12521: PUSH
12522: LD_INT 1
12524: PPUSH
12525: LD_VAR 0 5
12529: PPUSH
12530: CALL_OW 12
12534: ARRAY
12535: ST_TO_ADDR
// end ; if weapon then
12536: LD_VAR 0 18
12540: IFFALSE 12654
// begin tmp := CostOfWeapon ( weapon ) ;
12542: LD_ADDR_VAR 0 14
12546: PUSH
12547: LD_VAR 0 18
12551: PPUSH
12552: CALL_OW 451
12556: ST_TO_ADDR
// j := GetBase ( tower ) ;
12557: LD_ADDR_VAR 0 9
12561: PUSH
12562: LD_VAR 0 1
12566: PPUSH
12567: CALL_OW 274
12571: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12572: LD_VAR 0 9
12576: PPUSH
12577: LD_INT 1
12579: PPUSH
12580: CALL_OW 275
12584: PUSH
12585: LD_VAR 0 14
12589: PUSH
12590: LD_INT 1
12592: ARRAY
12593: GREATEREQUAL
12594: PUSH
12595: LD_VAR 0 9
12599: PPUSH
12600: LD_INT 2
12602: PPUSH
12603: CALL_OW 275
12607: PUSH
12608: LD_VAR 0 14
12612: PUSH
12613: LD_INT 2
12615: ARRAY
12616: GREATEREQUAL
12617: AND
12618: PUSH
12619: LD_VAR 0 9
12623: PPUSH
12624: LD_INT 3
12626: PPUSH
12627: CALL_OW 275
12631: PUSH
12632: LD_VAR 0 14
12636: PUSH
12637: LD_INT 3
12639: ARRAY
12640: GREATEREQUAL
12641: AND
12642: IFFALSE 12654
// result := weapon ;
12644: LD_ADDR_VAR 0 3
12648: PUSH
12649: LD_VAR 0 18
12653: ST_TO_ADDR
// end ; end ;
12654: LD_VAR 0 3
12658: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12659: LD_INT 0
12661: PPUSH
12662: PPUSH
// result := true ;
12663: LD_ADDR_VAR 0 3
12667: PUSH
12668: LD_INT 1
12670: ST_TO_ADDR
// if array1 = array2 then
12671: LD_VAR 0 1
12675: PUSH
12676: LD_VAR 0 2
12680: EQUAL
12681: IFFALSE 12741
// begin for i = 1 to array1 do
12683: LD_ADDR_VAR 0 4
12687: PUSH
12688: DOUBLE
12689: LD_INT 1
12691: DEC
12692: ST_TO_ADDR
12693: LD_VAR 0 1
12697: PUSH
12698: FOR_TO
12699: IFFALSE 12737
// if array1 [ i ] <> array2 [ i ] then
12701: LD_VAR 0 1
12705: PUSH
12706: LD_VAR 0 4
12710: ARRAY
12711: PUSH
12712: LD_VAR 0 2
12716: PUSH
12717: LD_VAR 0 4
12721: ARRAY
12722: NONEQUAL
12723: IFFALSE 12735
// begin result := false ;
12725: LD_ADDR_VAR 0 3
12729: PUSH
12730: LD_INT 0
12732: ST_TO_ADDR
// break ;
12733: GO 12737
// end ;
12735: GO 12698
12737: POP
12738: POP
// end else
12739: GO 12749
// result := false ;
12741: LD_ADDR_VAR 0 3
12745: PUSH
12746: LD_INT 0
12748: ST_TO_ADDR
// end ;
12749: LD_VAR 0 3
12753: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12754: LD_INT 0
12756: PPUSH
12757: PPUSH
// if not array1 or not array2 then
12758: LD_VAR 0 1
12762: NOT
12763: PUSH
12764: LD_VAR 0 2
12768: NOT
12769: OR
12770: IFFALSE 12774
// exit ;
12772: GO 12838
// result := true ;
12774: LD_ADDR_VAR 0 3
12778: PUSH
12779: LD_INT 1
12781: ST_TO_ADDR
// for i = 1 to array1 do
12782: LD_ADDR_VAR 0 4
12786: PUSH
12787: DOUBLE
12788: LD_INT 1
12790: DEC
12791: ST_TO_ADDR
12792: LD_VAR 0 1
12796: PUSH
12797: FOR_TO
12798: IFFALSE 12836
// if array1 [ i ] <> array2 [ i ] then
12800: LD_VAR 0 1
12804: PUSH
12805: LD_VAR 0 4
12809: ARRAY
12810: PUSH
12811: LD_VAR 0 2
12815: PUSH
12816: LD_VAR 0 4
12820: ARRAY
12821: NONEQUAL
12822: IFFALSE 12834
// begin result := false ;
12824: LD_ADDR_VAR 0 3
12828: PUSH
12829: LD_INT 0
12831: ST_TO_ADDR
// break ;
12832: GO 12836
// end ;
12834: GO 12797
12836: POP
12837: POP
// end ;
12838: LD_VAR 0 3
12842: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12843: LD_INT 0
12845: PPUSH
12846: PPUSH
12847: PPUSH
// pom := GetBase ( fac ) ;
12848: LD_ADDR_VAR 0 5
12852: PUSH
12853: LD_VAR 0 1
12857: PPUSH
12858: CALL_OW 274
12862: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12863: LD_ADDR_VAR 0 4
12867: PUSH
12868: LD_VAR 0 2
12872: PUSH
12873: LD_INT 1
12875: ARRAY
12876: PPUSH
12877: LD_VAR 0 2
12881: PUSH
12882: LD_INT 2
12884: ARRAY
12885: PPUSH
12886: LD_VAR 0 2
12890: PUSH
12891: LD_INT 3
12893: ARRAY
12894: PPUSH
12895: LD_VAR 0 2
12899: PUSH
12900: LD_INT 4
12902: ARRAY
12903: PPUSH
12904: CALL_OW 449
12908: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12909: LD_ADDR_VAR 0 3
12913: PUSH
12914: LD_VAR 0 5
12918: PPUSH
12919: LD_INT 1
12921: PPUSH
12922: CALL_OW 275
12926: PUSH
12927: LD_VAR 0 4
12931: PUSH
12932: LD_INT 1
12934: ARRAY
12935: GREATEREQUAL
12936: PUSH
12937: LD_VAR 0 5
12941: PPUSH
12942: LD_INT 2
12944: PPUSH
12945: CALL_OW 275
12949: PUSH
12950: LD_VAR 0 4
12954: PUSH
12955: LD_INT 2
12957: ARRAY
12958: GREATEREQUAL
12959: AND
12960: PUSH
12961: LD_VAR 0 5
12965: PPUSH
12966: LD_INT 3
12968: PPUSH
12969: CALL_OW 275
12973: PUSH
12974: LD_VAR 0 4
12978: PUSH
12979: LD_INT 3
12981: ARRAY
12982: GREATEREQUAL
12983: AND
12984: ST_TO_ADDR
// end ;
12985: LD_VAR 0 3
12989: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12990: LD_INT 0
12992: PPUSH
12993: PPUSH
12994: PPUSH
12995: PPUSH
// pom := GetBase ( building ) ;
12996: LD_ADDR_VAR 0 3
13000: PUSH
13001: LD_VAR 0 1
13005: PPUSH
13006: CALL_OW 274
13010: ST_TO_ADDR
// if not pom then
13011: LD_VAR 0 3
13015: NOT
13016: IFFALSE 13020
// exit ;
13018: GO 13190
// btype := GetBType ( building ) ;
13020: LD_ADDR_VAR 0 5
13024: PUSH
13025: LD_VAR 0 1
13029: PPUSH
13030: CALL_OW 266
13034: ST_TO_ADDR
// if btype = b_armoury then
13035: LD_VAR 0 5
13039: PUSH
13040: LD_INT 4
13042: EQUAL
13043: IFFALSE 13053
// btype := b_barracks ;
13045: LD_ADDR_VAR 0 5
13049: PUSH
13050: LD_INT 5
13052: ST_TO_ADDR
// if btype = b_depot then
13053: LD_VAR 0 5
13057: PUSH
13058: LD_INT 0
13060: EQUAL
13061: IFFALSE 13071
// btype := b_warehouse ;
13063: LD_ADDR_VAR 0 5
13067: PUSH
13068: LD_INT 1
13070: ST_TO_ADDR
// if btype = b_workshop then
13071: LD_VAR 0 5
13075: PUSH
13076: LD_INT 2
13078: EQUAL
13079: IFFALSE 13089
// btype := b_factory ;
13081: LD_ADDR_VAR 0 5
13085: PUSH
13086: LD_INT 3
13088: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13089: LD_ADDR_VAR 0 4
13093: PUSH
13094: LD_VAR 0 5
13098: PPUSH
13099: LD_VAR 0 1
13103: PPUSH
13104: CALL_OW 248
13108: PPUSH
13109: CALL_OW 450
13113: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13114: LD_ADDR_VAR 0 2
13118: PUSH
13119: LD_VAR 0 3
13123: PPUSH
13124: LD_INT 1
13126: PPUSH
13127: CALL_OW 275
13131: PUSH
13132: LD_VAR 0 4
13136: PUSH
13137: LD_INT 1
13139: ARRAY
13140: GREATEREQUAL
13141: PUSH
13142: LD_VAR 0 3
13146: PPUSH
13147: LD_INT 2
13149: PPUSH
13150: CALL_OW 275
13154: PUSH
13155: LD_VAR 0 4
13159: PUSH
13160: LD_INT 2
13162: ARRAY
13163: GREATEREQUAL
13164: AND
13165: PUSH
13166: LD_VAR 0 3
13170: PPUSH
13171: LD_INT 3
13173: PPUSH
13174: CALL_OW 275
13178: PUSH
13179: LD_VAR 0 4
13183: PUSH
13184: LD_INT 3
13186: ARRAY
13187: GREATEREQUAL
13188: AND
13189: ST_TO_ADDR
// end ;
13190: LD_VAR 0 2
13194: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13195: LD_INT 0
13197: PPUSH
13198: PPUSH
13199: PPUSH
// pom := GetBase ( building ) ;
13200: LD_ADDR_VAR 0 4
13204: PUSH
13205: LD_VAR 0 1
13209: PPUSH
13210: CALL_OW 274
13214: ST_TO_ADDR
// if not pom then
13215: LD_VAR 0 4
13219: NOT
13220: IFFALSE 13224
// exit ;
13222: GO 13325
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13224: LD_ADDR_VAR 0 5
13228: PUSH
13229: LD_VAR 0 2
13233: PPUSH
13234: LD_VAR 0 1
13238: PPUSH
13239: CALL_OW 248
13243: PPUSH
13244: CALL_OW 450
13248: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13249: LD_ADDR_VAR 0 3
13253: PUSH
13254: LD_VAR 0 4
13258: PPUSH
13259: LD_INT 1
13261: PPUSH
13262: CALL_OW 275
13266: PUSH
13267: LD_VAR 0 5
13271: PUSH
13272: LD_INT 1
13274: ARRAY
13275: GREATEREQUAL
13276: PUSH
13277: LD_VAR 0 4
13281: PPUSH
13282: LD_INT 2
13284: PPUSH
13285: CALL_OW 275
13289: PUSH
13290: LD_VAR 0 5
13294: PUSH
13295: LD_INT 2
13297: ARRAY
13298: GREATEREQUAL
13299: AND
13300: PUSH
13301: LD_VAR 0 4
13305: PPUSH
13306: LD_INT 3
13308: PPUSH
13309: CALL_OW 275
13313: PUSH
13314: LD_VAR 0 5
13318: PUSH
13319: LD_INT 3
13321: ARRAY
13322: GREATEREQUAL
13323: AND
13324: ST_TO_ADDR
// end ;
13325: LD_VAR 0 3
13329: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13330: LD_INT 0
13332: PPUSH
13333: PPUSH
13334: PPUSH
13335: PPUSH
13336: PPUSH
13337: PPUSH
13338: PPUSH
13339: PPUSH
13340: PPUSH
13341: PPUSH
13342: PPUSH
// result := false ;
13343: LD_ADDR_VAR 0 8
13347: PUSH
13348: LD_INT 0
13350: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13351: LD_VAR 0 5
13355: NOT
13356: PUSH
13357: LD_VAR 0 1
13361: NOT
13362: OR
13363: PUSH
13364: LD_VAR 0 2
13368: NOT
13369: OR
13370: PUSH
13371: LD_VAR 0 3
13375: NOT
13376: OR
13377: IFFALSE 13381
// exit ;
13379: GO 14195
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13381: LD_ADDR_VAR 0 14
13385: PUSH
13386: LD_VAR 0 1
13390: PPUSH
13391: LD_VAR 0 2
13395: PPUSH
13396: LD_VAR 0 3
13400: PPUSH
13401: LD_VAR 0 4
13405: PPUSH
13406: LD_VAR 0 5
13410: PUSH
13411: LD_INT 1
13413: ARRAY
13414: PPUSH
13415: CALL_OW 248
13419: PPUSH
13420: LD_INT 0
13422: PPUSH
13423: CALL 15448 0 6
13427: ST_TO_ADDR
// if not hexes then
13428: LD_VAR 0 14
13432: NOT
13433: IFFALSE 13437
// exit ;
13435: GO 14195
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13437: LD_ADDR_VAR 0 17
13441: PUSH
13442: LD_VAR 0 5
13446: PPUSH
13447: LD_INT 22
13449: PUSH
13450: LD_VAR 0 13
13454: PPUSH
13455: CALL_OW 255
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 2
13466: PUSH
13467: LD_INT 30
13469: PUSH
13470: LD_INT 0
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 30
13479: PUSH
13480: LD_INT 1
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PPUSH
13496: CALL_OW 72
13500: ST_TO_ADDR
// for i = 1 to hexes do
13501: LD_ADDR_VAR 0 9
13505: PUSH
13506: DOUBLE
13507: LD_INT 1
13509: DEC
13510: ST_TO_ADDR
13511: LD_VAR 0 14
13515: PUSH
13516: FOR_TO
13517: IFFALSE 14193
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13519: LD_ADDR_VAR 0 13
13523: PUSH
13524: LD_VAR 0 14
13528: PUSH
13529: LD_VAR 0 9
13533: ARRAY
13534: PUSH
13535: LD_INT 1
13537: ARRAY
13538: PPUSH
13539: LD_VAR 0 14
13543: PUSH
13544: LD_VAR 0 9
13548: ARRAY
13549: PUSH
13550: LD_INT 2
13552: ARRAY
13553: PPUSH
13554: CALL_OW 428
13558: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13559: LD_VAR 0 14
13563: PUSH
13564: LD_VAR 0 9
13568: ARRAY
13569: PUSH
13570: LD_INT 1
13572: ARRAY
13573: PPUSH
13574: LD_VAR 0 14
13578: PUSH
13579: LD_VAR 0 9
13583: ARRAY
13584: PUSH
13585: LD_INT 2
13587: ARRAY
13588: PPUSH
13589: CALL_OW 351
13593: PUSH
13594: LD_VAR 0 14
13598: PUSH
13599: LD_VAR 0 9
13603: ARRAY
13604: PUSH
13605: LD_INT 1
13607: ARRAY
13608: PPUSH
13609: LD_VAR 0 14
13613: PUSH
13614: LD_VAR 0 9
13618: ARRAY
13619: PUSH
13620: LD_INT 2
13622: ARRAY
13623: PPUSH
13624: CALL_OW 488
13628: NOT
13629: OR
13630: PUSH
13631: LD_VAR 0 13
13635: PPUSH
13636: CALL_OW 247
13640: PUSH
13641: LD_INT 3
13643: EQUAL
13644: OR
13645: IFFALSE 13651
// exit ;
13647: POP
13648: POP
13649: GO 14195
// if not tmp then
13651: LD_VAR 0 13
13655: NOT
13656: IFFALSE 13660
// continue ;
13658: GO 13516
// result := true ;
13660: LD_ADDR_VAR 0 8
13664: PUSH
13665: LD_INT 1
13667: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13668: LD_VAR 0 6
13672: PUSH
13673: LD_VAR 0 13
13677: PPUSH
13678: CALL_OW 247
13682: PUSH
13683: LD_INT 2
13685: EQUAL
13686: AND
13687: PUSH
13688: LD_VAR 0 13
13692: PPUSH
13693: CALL_OW 263
13697: PUSH
13698: LD_INT 1
13700: EQUAL
13701: AND
13702: IFFALSE 13866
// begin if IsDrivenBy ( tmp ) then
13704: LD_VAR 0 13
13708: PPUSH
13709: CALL_OW 311
13713: IFFALSE 13717
// continue ;
13715: GO 13516
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13717: LD_VAR 0 6
13721: PPUSH
13722: LD_INT 3
13724: PUSH
13725: LD_INT 60
13727: PUSH
13728: EMPTY
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 3
13737: PUSH
13738: LD_INT 55
13740: PUSH
13741: EMPTY
13742: LIST
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PPUSH
13752: CALL_OW 72
13756: IFFALSE 13864
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13758: LD_ADDR_VAR 0 18
13762: PUSH
13763: LD_VAR 0 6
13767: PPUSH
13768: LD_INT 3
13770: PUSH
13771: LD_INT 60
13773: PUSH
13774: EMPTY
13775: LIST
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PUSH
13781: LD_INT 3
13783: PUSH
13784: LD_INT 55
13786: PUSH
13787: EMPTY
13788: LIST
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PPUSH
13798: CALL_OW 72
13802: PUSH
13803: LD_INT 1
13805: ARRAY
13806: ST_TO_ADDR
// if IsInUnit ( driver ) then
13807: LD_VAR 0 18
13811: PPUSH
13812: CALL_OW 310
13816: IFFALSE 13827
// ComExit ( driver ) ;
13818: LD_VAR 0 18
13822: PPUSH
13823: CALL 39240 0 1
// AddComEnterUnit ( driver , tmp ) ;
13827: LD_VAR 0 18
13831: PPUSH
13832: LD_VAR 0 13
13836: PPUSH
13837: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13841: LD_VAR 0 18
13845: PPUSH
13846: LD_VAR 0 7
13850: PPUSH
13851: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13855: LD_VAR 0 18
13859: PPUSH
13860: CALL_OW 181
// end ; continue ;
13864: GO 13516
// end ; if not cleaners or not tmp in cleaners then
13866: LD_VAR 0 6
13870: NOT
13871: PUSH
13872: LD_VAR 0 13
13876: PUSH
13877: LD_VAR 0 6
13881: IN
13882: NOT
13883: OR
13884: IFFALSE 14191
// begin if dep then
13886: LD_VAR 0 17
13890: IFFALSE 14026
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13892: LD_ADDR_VAR 0 16
13896: PUSH
13897: LD_VAR 0 17
13901: PUSH
13902: LD_INT 1
13904: ARRAY
13905: PPUSH
13906: CALL_OW 250
13910: PPUSH
13911: LD_VAR 0 17
13915: PUSH
13916: LD_INT 1
13918: ARRAY
13919: PPUSH
13920: CALL_OW 254
13924: PPUSH
13925: LD_INT 5
13927: PPUSH
13928: CALL_OW 272
13932: PUSH
13933: LD_VAR 0 17
13937: PUSH
13938: LD_INT 1
13940: ARRAY
13941: PPUSH
13942: CALL_OW 251
13946: PPUSH
13947: LD_VAR 0 17
13951: PUSH
13952: LD_INT 1
13954: ARRAY
13955: PPUSH
13956: CALL_OW 254
13960: PPUSH
13961: LD_INT 5
13963: PPUSH
13964: CALL_OW 273
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13973: LD_VAR 0 16
13977: PUSH
13978: LD_INT 1
13980: ARRAY
13981: PPUSH
13982: LD_VAR 0 16
13986: PUSH
13987: LD_INT 2
13989: ARRAY
13990: PPUSH
13991: CALL_OW 488
13995: IFFALSE 14026
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13997: LD_VAR 0 13
14001: PPUSH
14002: LD_VAR 0 16
14006: PUSH
14007: LD_INT 1
14009: ARRAY
14010: PPUSH
14011: LD_VAR 0 16
14015: PUSH
14016: LD_INT 2
14018: ARRAY
14019: PPUSH
14020: CALL_OW 111
// continue ;
14024: GO 13516
// end ; end ; r := GetDir ( tmp ) ;
14026: LD_ADDR_VAR 0 15
14030: PUSH
14031: LD_VAR 0 13
14035: PPUSH
14036: CALL_OW 254
14040: ST_TO_ADDR
// if r = 5 then
14041: LD_VAR 0 15
14045: PUSH
14046: LD_INT 5
14048: EQUAL
14049: IFFALSE 14059
// r := 0 ;
14051: LD_ADDR_VAR 0 15
14055: PUSH
14056: LD_INT 0
14058: ST_TO_ADDR
// for j = r to 5 do
14059: LD_ADDR_VAR 0 10
14063: PUSH
14064: DOUBLE
14065: LD_VAR 0 15
14069: DEC
14070: ST_TO_ADDR
14071: LD_INT 5
14073: PUSH
14074: FOR_TO
14075: IFFALSE 14189
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14077: LD_ADDR_VAR 0 11
14081: PUSH
14082: LD_VAR 0 13
14086: PPUSH
14087: CALL_OW 250
14091: PPUSH
14092: LD_VAR 0 10
14096: PPUSH
14097: LD_INT 2
14099: PPUSH
14100: CALL_OW 272
14104: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14105: LD_ADDR_VAR 0 12
14109: PUSH
14110: LD_VAR 0 13
14114: PPUSH
14115: CALL_OW 251
14119: PPUSH
14120: LD_VAR 0 10
14124: PPUSH
14125: LD_INT 2
14127: PPUSH
14128: CALL_OW 273
14132: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14133: LD_VAR 0 11
14137: PPUSH
14138: LD_VAR 0 12
14142: PPUSH
14143: CALL_OW 488
14147: PUSH
14148: LD_VAR 0 11
14152: PPUSH
14153: LD_VAR 0 12
14157: PPUSH
14158: CALL_OW 428
14162: NOT
14163: AND
14164: IFFALSE 14187
// begin ComMoveXY ( tmp , _x , _y ) ;
14166: LD_VAR 0 13
14170: PPUSH
14171: LD_VAR 0 11
14175: PPUSH
14176: LD_VAR 0 12
14180: PPUSH
14181: CALL_OW 111
// break ;
14185: GO 14189
// end ; end ;
14187: GO 14074
14189: POP
14190: POP
// end ; end ;
14191: GO 13516
14193: POP
14194: POP
// end ;
14195: LD_VAR 0 8
14199: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14200: LD_INT 0
14202: PPUSH
// result := true ;
14203: LD_ADDR_VAR 0 3
14207: PUSH
14208: LD_INT 1
14210: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14211: LD_VAR 0 2
14215: PUSH
14216: LD_INT 24
14218: DOUBLE
14219: EQUAL
14220: IFTRUE 14230
14222: LD_INT 33
14224: DOUBLE
14225: EQUAL
14226: IFTRUE 14230
14228: GO 14255
14230: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14231: LD_ADDR_VAR 0 3
14235: PUSH
14236: LD_INT 32
14238: PPUSH
14239: LD_VAR 0 1
14243: PPUSH
14244: CALL_OW 321
14248: PUSH
14249: LD_INT 2
14251: EQUAL
14252: ST_TO_ADDR
14253: GO 14571
14255: LD_INT 20
14257: DOUBLE
14258: EQUAL
14259: IFTRUE 14263
14261: GO 14288
14263: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14264: LD_ADDR_VAR 0 3
14268: PUSH
14269: LD_INT 6
14271: PPUSH
14272: LD_VAR 0 1
14276: PPUSH
14277: CALL_OW 321
14281: PUSH
14282: LD_INT 2
14284: EQUAL
14285: ST_TO_ADDR
14286: GO 14571
14288: LD_INT 22
14290: DOUBLE
14291: EQUAL
14292: IFTRUE 14302
14294: LD_INT 36
14296: DOUBLE
14297: EQUAL
14298: IFTRUE 14302
14300: GO 14327
14302: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14303: LD_ADDR_VAR 0 3
14307: PUSH
14308: LD_INT 15
14310: PPUSH
14311: LD_VAR 0 1
14315: PPUSH
14316: CALL_OW 321
14320: PUSH
14321: LD_INT 2
14323: EQUAL
14324: ST_TO_ADDR
14325: GO 14571
14327: LD_INT 30
14329: DOUBLE
14330: EQUAL
14331: IFTRUE 14335
14333: GO 14360
14335: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14336: LD_ADDR_VAR 0 3
14340: PUSH
14341: LD_INT 20
14343: PPUSH
14344: LD_VAR 0 1
14348: PPUSH
14349: CALL_OW 321
14353: PUSH
14354: LD_INT 2
14356: EQUAL
14357: ST_TO_ADDR
14358: GO 14571
14360: LD_INT 28
14362: DOUBLE
14363: EQUAL
14364: IFTRUE 14374
14366: LD_INT 21
14368: DOUBLE
14369: EQUAL
14370: IFTRUE 14374
14372: GO 14399
14374: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14375: LD_ADDR_VAR 0 3
14379: PUSH
14380: LD_INT 21
14382: PPUSH
14383: LD_VAR 0 1
14387: PPUSH
14388: CALL_OW 321
14392: PUSH
14393: LD_INT 2
14395: EQUAL
14396: ST_TO_ADDR
14397: GO 14571
14399: LD_INT 16
14401: DOUBLE
14402: EQUAL
14403: IFTRUE 14407
14405: GO 14432
14407: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14408: LD_ADDR_VAR 0 3
14412: PUSH
14413: LD_INT 84
14415: PPUSH
14416: LD_VAR 0 1
14420: PPUSH
14421: CALL_OW 321
14425: PUSH
14426: LD_INT 2
14428: EQUAL
14429: ST_TO_ADDR
14430: GO 14571
14432: LD_INT 19
14434: DOUBLE
14435: EQUAL
14436: IFTRUE 14446
14438: LD_INT 23
14440: DOUBLE
14441: EQUAL
14442: IFTRUE 14446
14444: GO 14471
14446: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14447: LD_ADDR_VAR 0 3
14451: PUSH
14452: LD_INT 83
14454: PPUSH
14455: LD_VAR 0 1
14459: PPUSH
14460: CALL_OW 321
14464: PUSH
14465: LD_INT 2
14467: EQUAL
14468: ST_TO_ADDR
14469: GO 14571
14471: LD_INT 17
14473: DOUBLE
14474: EQUAL
14475: IFTRUE 14479
14477: GO 14504
14479: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14480: LD_ADDR_VAR 0 3
14484: PUSH
14485: LD_INT 39
14487: PPUSH
14488: LD_VAR 0 1
14492: PPUSH
14493: CALL_OW 321
14497: PUSH
14498: LD_INT 2
14500: EQUAL
14501: ST_TO_ADDR
14502: GO 14571
14504: LD_INT 18
14506: DOUBLE
14507: EQUAL
14508: IFTRUE 14512
14510: GO 14537
14512: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14513: LD_ADDR_VAR 0 3
14517: PUSH
14518: LD_INT 40
14520: PPUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 321
14530: PUSH
14531: LD_INT 2
14533: EQUAL
14534: ST_TO_ADDR
14535: GO 14571
14537: LD_INT 27
14539: DOUBLE
14540: EQUAL
14541: IFTRUE 14545
14543: GO 14570
14545: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14546: LD_ADDR_VAR 0 3
14550: PUSH
14551: LD_INT 35
14553: PPUSH
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL_OW 321
14563: PUSH
14564: LD_INT 2
14566: EQUAL
14567: ST_TO_ADDR
14568: GO 14571
14570: POP
// end ;
14571: LD_VAR 0 3
14575: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14576: LD_INT 0
14578: PPUSH
14579: PPUSH
14580: PPUSH
14581: PPUSH
14582: PPUSH
14583: PPUSH
14584: PPUSH
14585: PPUSH
14586: PPUSH
14587: PPUSH
14588: PPUSH
// result := false ;
14589: LD_ADDR_VAR 0 6
14593: PUSH
14594: LD_INT 0
14596: ST_TO_ADDR
// if btype = b_depot then
14597: LD_VAR 0 2
14601: PUSH
14602: LD_INT 0
14604: EQUAL
14605: IFFALSE 14617
// begin result := true ;
14607: LD_ADDR_VAR 0 6
14611: PUSH
14612: LD_INT 1
14614: ST_TO_ADDR
// exit ;
14615: GO 15443
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14617: LD_VAR 0 1
14621: NOT
14622: PUSH
14623: LD_VAR 0 1
14627: PPUSH
14628: CALL_OW 266
14632: PUSH
14633: LD_INT 0
14635: PUSH
14636: LD_INT 1
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: IN
14643: NOT
14644: OR
14645: PUSH
14646: LD_VAR 0 2
14650: NOT
14651: OR
14652: PUSH
14653: LD_VAR 0 5
14657: PUSH
14658: LD_INT 0
14660: PUSH
14661: LD_INT 1
14663: PUSH
14664: LD_INT 2
14666: PUSH
14667: LD_INT 3
14669: PUSH
14670: LD_INT 4
14672: PUSH
14673: LD_INT 5
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: IN
14684: NOT
14685: OR
14686: PUSH
14687: LD_VAR 0 3
14691: PPUSH
14692: LD_VAR 0 4
14696: PPUSH
14697: CALL_OW 488
14701: NOT
14702: OR
14703: IFFALSE 14707
// exit ;
14705: GO 15443
// side := GetSide ( depot ) ;
14707: LD_ADDR_VAR 0 9
14711: PUSH
14712: LD_VAR 0 1
14716: PPUSH
14717: CALL_OW 255
14721: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14722: LD_VAR 0 9
14726: PPUSH
14727: LD_VAR 0 2
14731: PPUSH
14732: CALL 14200 0 2
14736: NOT
14737: IFFALSE 14741
// exit ;
14739: GO 15443
// pom := GetBase ( depot ) ;
14741: LD_ADDR_VAR 0 10
14745: PUSH
14746: LD_VAR 0 1
14750: PPUSH
14751: CALL_OW 274
14755: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14756: LD_ADDR_VAR 0 11
14760: PUSH
14761: LD_VAR 0 2
14765: PPUSH
14766: LD_VAR 0 1
14770: PPUSH
14771: CALL_OW 248
14775: PPUSH
14776: CALL_OW 450
14780: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14781: LD_VAR 0 10
14785: PPUSH
14786: LD_INT 1
14788: PPUSH
14789: CALL_OW 275
14793: PUSH
14794: LD_VAR 0 11
14798: PUSH
14799: LD_INT 1
14801: ARRAY
14802: GREATEREQUAL
14803: PUSH
14804: LD_VAR 0 10
14808: PPUSH
14809: LD_INT 2
14811: PPUSH
14812: CALL_OW 275
14816: PUSH
14817: LD_VAR 0 11
14821: PUSH
14822: LD_INT 2
14824: ARRAY
14825: GREATEREQUAL
14826: AND
14827: PUSH
14828: LD_VAR 0 10
14832: PPUSH
14833: LD_INT 3
14835: PPUSH
14836: CALL_OW 275
14840: PUSH
14841: LD_VAR 0 11
14845: PUSH
14846: LD_INT 3
14848: ARRAY
14849: GREATEREQUAL
14850: AND
14851: NOT
14852: IFFALSE 14856
// exit ;
14854: GO 15443
// if GetBType ( depot ) = b_depot then
14856: LD_VAR 0 1
14860: PPUSH
14861: CALL_OW 266
14865: PUSH
14866: LD_INT 0
14868: EQUAL
14869: IFFALSE 14881
// dist := 28 else
14871: LD_ADDR_VAR 0 14
14875: PUSH
14876: LD_INT 28
14878: ST_TO_ADDR
14879: GO 14889
// dist := 36 ;
14881: LD_ADDR_VAR 0 14
14885: PUSH
14886: LD_INT 36
14888: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14889: LD_VAR 0 1
14893: PPUSH
14894: LD_VAR 0 3
14898: PPUSH
14899: LD_VAR 0 4
14903: PPUSH
14904: CALL_OW 297
14908: PUSH
14909: LD_VAR 0 14
14913: GREATER
14914: IFFALSE 14918
// exit ;
14916: GO 15443
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14918: LD_ADDR_VAR 0 12
14922: PUSH
14923: LD_VAR 0 2
14927: PPUSH
14928: LD_VAR 0 3
14932: PPUSH
14933: LD_VAR 0 4
14937: PPUSH
14938: LD_VAR 0 5
14942: PPUSH
14943: LD_VAR 0 1
14947: PPUSH
14948: CALL_OW 248
14952: PPUSH
14953: LD_INT 0
14955: PPUSH
14956: CALL 15448 0 6
14960: ST_TO_ADDR
// if not hexes then
14961: LD_VAR 0 12
14965: NOT
14966: IFFALSE 14970
// exit ;
14968: GO 15443
// hex := GetHexInfo ( x , y ) ;
14970: LD_ADDR_VAR 0 15
14974: PUSH
14975: LD_VAR 0 3
14979: PPUSH
14980: LD_VAR 0 4
14984: PPUSH
14985: CALL_OW 546
14989: ST_TO_ADDR
// if hex [ 1 ] then
14990: LD_VAR 0 15
14994: PUSH
14995: LD_INT 1
14997: ARRAY
14998: IFFALSE 15002
// exit ;
15000: GO 15443
// height := hex [ 2 ] ;
15002: LD_ADDR_VAR 0 13
15006: PUSH
15007: LD_VAR 0 15
15011: PUSH
15012: LD_INT 2
15014: ARRAY
15015: ST_TO_ADDR
// for i = 1 to hexes do
15016: LD_ADDR_VAR 0 7
15020: PUSH
15021: DOUBLE
15022: LD_INT 1
15024: DEC
15025: ST_TO_ADDR
15026: LD_VAR 0 12
15030: PUSH
15031: FOR_TO
15032: IFFALSE 15362
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15034: LD_VAR 0 12
15038: PUSH
15039: LD_VAR 0 7
15043: ARRAY
15044: PUSH
15045: LD_INT 1
15047: ARRAY
15048: PPUSH
15049: LD_VAR 0 12
15053: PUSH
15054: LD_VAR 0 7
15058: ARRAY
15059: PUSH
15060: LD_INT 2
15062: ARRAY
15063: PPUSH
15064: CALL_OW 488
15068: NOT
15069: PUSH
15070: LD_VAR 0 12
15074: PUSH
15075: LD_VAR 0 7
15079: ARRAY
15080: PUSH
15081: LD_INT 1
15083: ARRAY
15084: PPUSH
15085: LD_VAR 0 12
15089: PUSH
15090: LD_VAR 0 7
15094: ARRAY
15095: PUSH
15096: LD_INT 2
15098: ARRAY
15099: PPUSH
15100: CALL_OW 428
15104: PUSH
15105: LD_INT 0
15107: GREATER
15108: OR
15109: PUSH
15110: LD_VAR 0 12
15114: PUSH
15115: LD_VAR 0 7
15119: ARRAY
15120: PUSH
15121: LD_INT 1
15123: ARRAY
15124: PPUSH
15125: LD_VAR 0 12
15129: PUSH
15130: LD_VAR 0 7
15134: ARRAY
15135: PUSH
15136: LD_INT 2
15138: ARRAY
15139: PPUSH
15140: CALL_OW 351
15144: OR
15145: IFFALSE 15151
// exit ;
15147: POP
15148: POP
15149: GO 15443
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15151: LD_ADDR_VAR 0 8
15155: PUSH
15156: LD_VAR 0 12
15160: PUSH
15161: LD_VAR 0 7
15165: ARRAY
15166: PUSH
15167: LD_INT 1
15169: ARRAY
15170: PPUSH
15171: LD_VAR 0 12
15175: PUSH
15176: LD_VAR 0 7
15180: ARRAY
15181: PUSH
15182: LD_INT 2
15184: ARRAY
15185: PPUSH
15186: CALL_OW 546
15190: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15191: LD_VAR 0 8
15195: PUSH
15196: LD_INT 1
15198: ARRAY
15199: PUSH
15200: LD_VAR 0 8
15204: PUSH
15205: LD_INT 2
15207: ARRAY
15208: PUSH
15209: LD_VAR 0 13
15213: PUSH
15214: LD_INT 2
15216: PLUS
15217: GREATER
15218: OR
15219: PUSH
15220: LD_VAR 0 8
15224: PUSH
15225: LD_INT 2
15227: ARRAY
15228: PUSH
15229: LD_VAR 0 13
15233: PUSH
15234: LD_INT 2
15236: MINUS
15237: LESS
15238: OR
15239: PUSH
15240: LD_VAR 0 8
15244: PUSH
15245: LD_INT 3
15247: ARRAY
15248: PUSH
15249: LD_INT 0
15251: PUSH
15252: LD_INT 8
15254: PUSH
15255: LD_INT 9
15257: PUSH
15258: LD_INT 10
15260: PUSH
15261: LD_INT 11
15263: PUSH
15264: LD_INT 12
15266: PUSH
15267: LD_INT 13
15269: PUSH
15270: LD_INT 16
15272: PUSH
15273: LD_INT 17
15275: PUSH
15276: LD_INT 18
15278: PUSH
15279: LD_INT 19
15281: PUSH
15282: LD_INT 20
15284: PUSH
15285: LD_INT 21
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: IN
15303: NOT
15304: OR
15305: PUSH
15306: LD_VAR 0 8
15310: PUSH
15311: LD_INT 5
15313: ARRAY
15314: NOT
15315: OR
15316: PUSH
15317: LD_VAR 0 8
15321: PUSH
15322: LD_INT 6
15324: ARRAY
15325: PUSH
15326: LD_INT 1
15328: PUSH
15329: LD_INT 2
15331: PUSH
15332: LD_INT 7
15334: PUSH
15335: LD_INT 9
15337: PUSH
15338: LD_INT 10
15340: PUSH
15341: LD_INT 11
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: IN
15352: NOT
15353: OR
15354: IFFALSE 15360
// exit ;
15356: POP
15357: POP
15358: GO 15443
// end ;
15360: GO 15031
15362: POP
15363: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15364: LD_VAR 0 9
15368: PPUSH
15369: LD_VAR 0 3
15373: PPUSH
15374: LD_VAR 0 4
15378: PPUSH
15379: LD_INT 20
15381: PPUSH
15382: CALL 7366 0 4
15386: PUSH
15387: LD_INT 4
15389: ARRAY
15390: IFFALSE 15394
// exit ;
15392: GO 15443
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15394: LD_VAR 0 2
15398: PUSH
15399: LD_INT 29
15401: PUSH
15402: LD_INT 30
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: IN
15409: PUSH
15410: LD_VAR 0 3
15414: PPUSH
15415: LD_VAR 0 4
15419: PPUSH
15420: LD_VAR 0 9
15424: PPUSH
15425: CALL_OW 440
15429: NOT
15430: AND
15431: IFFALSE 15435
// exit ;
15433: GO 15443
// result := true ;
15435: LD_ADDR_VAR 0 6
15439: PUSH
15440: LD_INT 1
15442: ST_TO_ADDR
// end ;
15443: LD_VAR 0 6
15447: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15448: LD_INT 0
15450: PPUSH
15451: PPUSH
15452: PPUSH
15453: PPUSH
15454: PPUSH
15455: PPUSH
15456: PPUSH
15457: PPUSH
15458: PPUSH
15459: PPUSH
15460: PPUSH
15461: PPUSH
15462: PPUSH
15463: PPUSH
15464: PPUSH
15465: PPUSH
15466: PPUSH
15467: PPUSH
15468: PPUSH
15469: PPUSH
15470: PPUSH
15471: PPUSH
15472: PPUSH
15473: PPUSH
15474: PPUSH
15475: PPUSH
15476: PPUSH
15477: PPUSH
15478: PPUSH
15479: PPUSH
15480: PPUSH
15481: PPUSH
15482: PPUSH
15483: PPUSH
15484: PPUSH
15485: PPUSH
15486: PPUSH
15487: PPUSH
15488: PPUSH
15489: PPUSH
15490: PPUSH
15491: PPUSH
15492: PPUSH
15493: PPUSH
15494: PPUSH
15495: PPUSH
15496: PPUSH
15497: PPUSH
15498: PPUSH
15499: PPUSH
15500: PPUSH
15501: PPUSH
15502: PPUSH
15503: PPUSH
15504: PPUSH
15505: PPUSH
15506: PPUSH
15507: PPUSH
// result = [ ] ;
15508: LD_ADDR_VAR 0 7
15512: PUSH
15513: EMPTY
15514: ST_TO_ADDR
// temp_list = [ ] ;
15515: LD_ADDR_VAR 0 9
15519: PUSH
15520: EMPTY
15521: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15522: LD_VAR 0 4
15526: PUSH
15527: LD_INT 0
15529: PUSH
15530: LD_INT 1
15532: PUSH
15533: LD_INT 2
15535: PUSH
15536: LD_INT 3
15538: PUSH
15539: LD_INT 4
15541: PUSH
15542: LD_INT 5
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: IN
15553: NOT
15554: PUSH
15555: LD_VAR 0 1
15559: PUSH
15560: LD_INT 0
15562: PUSH
15563: LD_INT 1
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: IN
15570: PUSH
15571: LD_VAR 0 5
15575: PUSH
15576: LD_INT 1
15578: PUSH
15579: LD_INT 2
15581: PUSH
15582: LD_INT 3
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: LIST
15589: IN
15590: NOT
15591: AND
15592: OR
15593: IFFALSE 15597
// exit ;
15595: GO 33988
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15597: LD_VAR 0 1
15601: PUSH
15602: LD_INT 6
15604: PUSH
15605: LD_INT 7
15607: PUSH
15608: LD_INT 8
15610: PUSH
15611: LD_INT 13
15613: PUSH
15614: LD_INT 12
15616: PUSH
15617: LD_INT 15
15619: PUSH
15620: LD_INT 11
15622: PUSH
15623: LD_INT 14
15625: PUSH
15626: LD_INT 10
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: IN
15640: IFFALSE 15650
// btype = b_lab ;
15642: LD_ADDR_VAR 0 1
15646: PUSH
15647: LD_INT 6
15649: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15650: LD_VAR 0 6
15654: PUSH
15655: LD_INT 0
15657: PUSH
15658: LD_INT 1
15660: PUSH
15661: LD_INT 2
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: LIST
15668: IN
15669: NOT
15670: PUSH
15671: LD_VAR 0 1
15675: PUSH
15676: LD_INT 0
15678: PUSH
15679: LD_INT 1
15681: PUSH
15682: LD_INT 2
15684: PUSH
15685: LD_INT 3
15687: PUSH
15688: LD_INT 6
15690: PUSH
15691: LD_INT 36
15693: PUSH
15694: LD_INT 4
15696: PUSH
15697: LD_INT 5
15699: PUSH
15700: LD_INT 31
15702: PUSH
15703: LD_INT 32
15705: PUSH
15706: LD_INT 33
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: IN
15722: NOT
15723: PUSH
15724: LD_VAR 0 6
15728: PUSH
15729: LD_INT 1
15731: EQUAL
15732: AND
15733: OR
15734: PUSH
15735: LD_VAR 0 1
15739: PUSH
15740: LD_INT 2
15742: PUSH
15743: LD_INT 3
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: IN
15750: NOT
15751: PUSH
15752: LD_VAR 0 6
15756: PUSH
15757: LD_INT 2
15759: EQUAL
15760: AND
15761: OR
15762: IFFALSE 15772
// mode = 0 ;
15764: LD_ADDR_VAR 0 6
15768: PUSH
15769: LD_INT 0
15771: ST_TO_ADDR
// case mode of 0 :
15772: LD_VAR 0 6
15776: PUSH
15777: LD_INT 0
15779: DOUBLE
15780: EQUAL
15781: IFTRUE 15785
15783: GO 27238
15785: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15786: LD_ADDR_VAR 0 11
15790: PUSH
15791: LD_INT 0
15793: PUSH
15794: LD_INT 0
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 0
15803: PUSH
15804: LD_INT 1
15806: NEG
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 1
15814: PUSH
15815: LD_INT 0
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 1
15824: PUSH
15825: LD_INT 1
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 0
15834: PUSH
15835: LD_INT 1
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: LD_INT 1
15844: NEG
15845: PUSH
15846: LD_INT 0
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: LD_INT 1
15855: NEG
15856: PUSH
15857: LD_INT 1
15859: NEG
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: PUSH
15865: LD_INT 1
15867: NEG
15868: PUSH
15869: LD_INT 2
15871: NEG
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: LD_INT 0
15879: PUSH
15880: LD_INT 2
15882: NEG
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 1
15890: PUSH
15891: LD_INT 1
15893: NEG
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: PUSH
15899: LD_INT 1
15901: PUSH
15902: LD_INT 2
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PUSH
15909: LD_INT 0
15911: PUSH
15912: LD_INT 2
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: LD_INT 1
15921: NEG
15922: PUSH
15923: LD_INT 1
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 1
15932: PUSH
15933: LD_INT 3
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 0
15942: PUSH
15943: LD_INT 3
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 1
15952: NEG
15953: PUSH
15954: LD_INT 2
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15979: LD_ADDR_VAR 0 12
15983: PUSH
15984: LD_INT 0
15986: PUSH
15987: LD_INT 0
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 0
15996: PUSH
15997: LD_INT 1
15999: NEG
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: LD_INT 1
16007: PUSH
16008: LD_INT 0
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 1
16017: PUSH
16018: LD_INT 1
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 0
16027: PUSH
16028: LD_INT 1
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 1
16037: NEG
16038: PUSH
16039: LD_INT 0
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: LD_INT 1
16048: NEG
16049: PUSH
16050: LD_INT 1
16052: NEG
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: LD_INT 1
16060: PUSH
16061: LD_INT 1
16063: NEG
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: LD_INT 2
16071: PUSH
16072: LD_INT 0
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: LD_INT 2
16081: PUSH
16082: LD_INT 1
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 1
16091: NEG
16092: PUSH
16093: LD_INT 1
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 2
16102: NEG
16103: PUSH
16104: LD_INT 0
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 2
16113: NEG
16114: PUSH
16115: LD_INT 1
16117: NEG
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: PUSH
16123: LD_INT 2
16125: NEG
16126: PUSH
16127: LD_INT 1
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 3
16136: NEG
16137: PUSH
16138: LD_INT 0
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: LD_INT 3
16147: NEG
16148: PUSH
16149: LD_INT 1
16151: NEG
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16175: LD_ADDR_VAR 0 13
16179: PUSH
16180: LD_INT 0
16182: PUSH
16183: LD_INT 0
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 0
16192: PUSH
16193: LD_INT 1
16195: NEG
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 1
16203: PUSH
16204: LD_INT 0
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 1
16213: PUSH
16214: LD_INT 1
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 0
16223: PUSH
16224: LD_INT 1
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 1
16233: NEG
16234: PUSH
16235: LD_INT 0
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 1
16244: NEG
16245: PUSH
16246: LD_INT 1
16248: NEG
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 1
16256: NEG
16257: PUSH
16258: LD_INT 2
16260: NEG
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 2
16268: PUSH
16269: LD_INT 1
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 2
16278: PUSH
16279: LD_INT 2
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: LD_INT 1
16288: PUSH
16289: LD_INT 2
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 2
16298: NEG
16299: PUSH
16300: LD_INT 1
16302: NEG
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: LD_INT 2
16310: NEG
16311: PUSH
16312: LD_INT 2
16314: NEG
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 2
16322: NEG
16323: PUSH
16324: LD_INT 3
16326: NEG
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 3
16334: NEG
16335: PUSH
16336: LD_INT 2
16338: NEG
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: LD_INT 3
16346: NEG
16347: PUSH
16348: LD_INT 3
16350: NEG
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16374: LD_ADDR_VAR 0 14
16378: PUSH
16379: LD_INT 0
16381: PUSH
16382: LD_INT 0
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 0
16391: PUSH
16392: LD_INT 1
16394: NEG
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 1
16402: PUSH
16403: LD_INT 0
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: LD_INT 1
16412: PUSH
16413: LD_INT 1
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: LD_INT 0
16422: PUSH
16423: LD_INT 1
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: PUSH
16430: LD_INT 1
16432: NEG
16433: PUSH
16434: LD_INT 0
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 1
16443: NEG
16444: PUSH
16445: LD_INT 1
16447: NEG
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 1
16455: NEG
16456: PUSH
16457: LD_INT 2
16459: NEG
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 0
16467: PUSH
16468: LD_INT 2
16470: NEG
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 1
16478: PUSH
16479: LD_INT 1
16481: NEG
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 1
16489: PUSH
16490: LD_INT 2
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: LD_INT 0
16499: PUSH
16500: LD_INT 2
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 1
16509: NEG
16510: PUSH
16511: LD_INT 1
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 1
16520: NEG
16521: PUSH
16522: LD_INT 3
16524: NEG
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 0
16532: PUSH
16533: LD_INT 3
16535: NEG
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: LD_INT 2
16546: NEG
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16570: LD_ADDR_VAR 0 15
16574: PUSH
16575: LD_INT 0
16577: PUSH
16578: LD_INT 0
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: LD_INT 0
16587: PUSH
16588: LD_INT 1
16590: NEG
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 1
16598: PUSH
16599: LD_INT 0
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 1
16608: PUSH
16609: LD_INT 1
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: LD_INT 0
16618: PUSH
16619: LD_INT 1
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 1
16628: NEG
16629: PUSH
16630: LD_INT 0
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 1
16639: NEG
16640: PUSH
16641: LD_INT 1
16643: NEG
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 1
16651: PUSH
16652: LD_INT 1
16654: NEG
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 2
16662: PUSH
16663: LD_INT 0
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 2
16672: PUSH
16673: LD_INT 1
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 1
16682: NEG
16683: PUSH
16684: LD_INT 1
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 2
16693: NEG
16694: PUSH
16695: LD_INT 0
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 2
16704: NEG
16705: PUSH
16706: LD_INT 1
16708: NEG
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 2
16716: PUSH
16717: LD_INT 1
16719: NEG
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: LD_INT 3
16727: PUSH
16728: LD_INT 0
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: PUSH
16735: LD_INT 3
16737: PUSH
16738: LD_INT 1
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16763: LD_ADDR_VAR 0 16
16767: PUSH
16768: LD_INT 0
16770: PUSH
16771: LD_INT 0
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 0
16780: PUSH
16781: LD_INT 1
16783: NEG
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: LD_INT 1
16791: PUSH
16792: LD_INT 0
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: LD_INT 1
16801: PUSH
16802: LD_INT 1
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 0
16811: PUSH
16812: LD_INT 1
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: LD_INT 1
16821: NEG
16822: PUSH
16823: LD_INT 0
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 1
16832: NEG
16833: PUSH
16834: LD_INT 1
16836: NEG
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 1
16844: NEG
16845: PUSH
16846: LD_INT 2
16848: NEG
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 2
16856: PUSH
16857: LD_INT 1
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 2
16866: PUSH
16867: LD_INT 2
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 1
16876: PUSH
16877: LD_INT 2
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 2
16886: NEG
16887: PUSH
16888: LD_INT 1
16890: NEG
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 2
16898: NEG
16899: PUSH
16900: LD_INT 2
16902: NEG
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 3
16910: PUSH
16911: LD_INT 2
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: LD_INT 3
16920: PUSH
16921: LD_INT 3
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 2
16930: PUSH
16931: LD_INT 3
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16956: LD_ADDR_VAR 0 17
16960: PUSH
16961: LD_INT 0
16963: PUSH
16964: LD_INT 0
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 0
16973: PUSH
16974: LD_INT 1
16976: NEG
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 1
16984: PUSH
16985: LD_INT 0
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: LD_INT 1
16994: PUSH
16995: LD_INT 1
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 0
17004: PUSH
17005: LD_INT 1
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: LD_INT 1
17014: NEG
17015: PUSH
17016: LD_INT 0
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 1
17025: NEG
17026: PUSH
17027: LD_INT 1
17029: NEG
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PUSH
17035: LD_INT 1
17037: NEG
17038: PUSH
17039: LD_INT 2
17041: NEG
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 0
17049: PUSH
17050: LD_INT 2
17052: NEG
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 1
17060: PUSH
17061: LD_INT 1
17063: NEG
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PUSH
17069: LD_INT 2
17071: PUSH
17072: LD_INT 0
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 2
17081: PUSH
17082: LD_INT 1
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 2
17091: PUSH
17092: LD_INT 2
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 1
17101: PUSH
17102: LD_INT 2
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 0
17111: PUSH
17112: LD_INT 2
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 1
17121: NEG
17122: PUSH
17123: LD_INT 1
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 2
17132: NEG
17133: PUSH
17134: LD_INT 0
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 2
17143: NEG
17144: PUSH
17145: LD_INT 1
17147: NEG
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: LD_INT 2
17155: NEG
17156: PUSH
17157: LD_INT 2
17159: NEG
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17186: LD_ADDR_VAR 0 18
17190: PUSH
17191: LD_INT 0
17193: PUSH
17194: LD_INT 0
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: LD_INT 0
17203: PUSH
17204: LD_INT 1
17206: NEG
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 1
17214: PUSH
17215: LD_INT 0
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 1
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 0
17234: PUSH
17235: LD_INT 1
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 1
17244: NEG
17245: PUSH
17246: LD_INT 0
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 1
17255: NEG
17256: PUSH
17257: LD_INT 1
17259: NEG
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: LD_INT 1
17267: NEG
17268: PUSH
17269: LD_INT 2
17271: NEG
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 0
17279: PUSH
17280: LD_INT 2
17282: NEG
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: LD_INT 1
17293: NEG
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 2
17301: PUSH
17302: LD_INT 0
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 2
17311: PUSH
17312: LD_INT 1
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 2
17321: PUSH
17322: LD_INT 2
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 1
17331: PUSH
17332: LD_INT 2
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PUSH
17339: LD_INT 0
17341: PUSH
17342: LD_INT 2
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 1
17351: NEG
17352: PUSH
17353: LD_INT 1
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 2
17362: NEG
17363: PUSH
17364: LD_INT 0
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 2
17373: NEG
17374: PUSH
17375: LD_INT 1
17377: NEG
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 2
17385: NEG
17386: PUSH
17387: LD_INT 2
17389: NEG
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17416: LD_ADDR_VAR 0 19
17420: PUSH
17421: LD_INT 0
17423: PUSH
17424: LD_INT 0
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 0
17433: PUSH
17434: LD_INT 1
17436: NEG
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 1
17444: PUSH
17445: LD_INT 0
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 1
17454: PUSH
17455: LD_INT 1
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 0
17464: PUSH
17465: LD_INT 1
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 1
17474: NEG
17475: PUSH
17476: LD_INT 0
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 1
17485: NEG
17486: PUSH
17487: LD_INT 1
17489: NEG
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: LD_INT 1
17497: NEG
17498: PUSH
17499: LD_INT 2
17501: NEG
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 0
17509: PUSH
17510: LD_INT 2
17512: NEG
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 1
17520: PUSH
17521: LD_INT 1
17523: NEG
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 2
17531: PUSH
17532: LD_INT 0
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 2
17541: PUSH
17542: LD_INT 1
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 2
17551: PUSH
17552: LD_INT 2
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 1
17561: PUSH
17562: LD_INT 2
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 0
17571: PUSH
17572: LD_INT 2
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 1
17581: NEG
17582: PUSH
17583: LD_INT 1
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 2
17592: NEG
17593: PUSH
17594: LD_INT 0
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 2
17603: NEG
17604: PUSH
17605: LD_INT 1
17607: NEG
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PUSH
17613: LD_INT 2
17615: NEG
17616: PUSH
17617: LD_INT 2
17619: NEG
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17646: LD_ADDR_VAR 0 20
17650: PUSH
17651: LD_INT 0
17653: PUSH
17654: LD_INT 0
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 0
17663: PUSH
17664: LD_INT 1
17666: NEG
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 1
17674: PUSH
17675: LD_INT 0
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 1
17684: PUSH
17685: LD_INT 1
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 0
17694: PUSH
17695: LD_INT 1
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 1
17704: NEG
17705: PUSH
17706: LD_INT 0
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 1
17715: NEG
17716: PUSH
17717: LD_INT 1
17719: NEG
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: LD_INT 1
17727: NEG
17728: PUSH
17729: LD_INT 2
17731: NEG
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 0
17739: PUSH
17740: LD_INT 2
17742: NEG
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 1
17750: PUSH
17751: LD_INT 1
17753: NEG
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 2
17761: PUSH
17762: LD_INT 0
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 2
17771: PUSH
17772: LD_INT 1
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 2
17781: PUSH
17782: LD_INT 2
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 1
17791: PUSH
17792: LD_INT 2
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 0
17801: PUSH
17802: LD_INT 2
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 1
17811: NEG
17812: PUSH
17813: LD_INT 1
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 2
17822: NEG
17823: PUSH
17824: LD_INT 0
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 2
17833: NEG
17834: PUSH
17835: LD_INT 1
17837: NEG
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 2
17845: NEG
17846: PUSH
17847: LD_INT 2
17849: NEG
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17876: LD_ADDR_VAR 0 21
17880: PUSH
17881: LD_INT 0
17883: PUSH
17884: LD_INT 0
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: LD_INT 0
17893: PUSH
17894: LD_INT 1
17896: NEG
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 1
17904: PUSH
17905: LD_INT 0
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: LD_INT 1
17914: PUSH
17915: LD_INT 1
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 0
17924: PUSH
17925: LD_INT 1
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 1
17934: NEG
17935: PUSH
17936: LD_INT 0
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 1
17945: NEG
17946: PUSH
17947: LD_INT 1
17949: NEG
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 1
17957: NEG
17958: PUSH
17959: LD_INT 2
17961: NEG
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 0
17969: PUSH
17970: LD_INT 2
17972: NEG
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 1
17980: PUSH
17981: LD_INT 1
17983: NEG
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 2
17991: PUSH
17992: LD_INT 0
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 2
18001: PUSH
18002: LD_INT 1
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 2
18011: PUSH
18012: LD_INT 2
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 1
18021: PUSH
18022: LD_INT 2
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 0
18031: PUSH
18032: LD_INT 2
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 1
18041: NEG
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 2
18052: NEG
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 2
18063: NEG
18064: PUSH
18065: LD_INT 1
18067: NEG
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 2
18075: NEG
18076: PUSH
18077: LD_INT 2
18079: NEG
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18106: LD_ADDR_VAR 0 22
18110: PUSH
18111: LD_INT 0
18113: PUSH
18114: LD_INT 0
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 0
18123: PUSH
18124: LD_INT 1
18126: NEG
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 1
18134: PUSH
18135: LD_INT 0
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 1
18144: PUSH
18145: LD_INT 1
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 0
18154: PUSH
18155: LD_INT 1
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 1
18164: NEG
18165: PUSH
18166: LD_INT 0
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 1
18175: NEG
18176: PUSH
18177: LD_INT 1
18179: NEG
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 1
18187: NEG
18188: PUSH
18189: LD_INT 2
18191: NEG
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 0
18199: PUSH
18200: LD_INT 2
18202: NEG
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 1
18210: PUSH
18211: LD_INT 1
18213: NEG
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 2
18221: PUSH
18222: LD_INT 0
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 2
18231: PUSH
18232: LD_INT 1
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 2
18241: PUSH
18242: LD_INT 2
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 1
18251: PUSH
18252: LD_INT 2
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 0
18261: PUSH
18262: LD_INT 2
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: LD_INT 1
18271: NEG
18272: PUSH
18273: LD_INT 1
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 2
18282: NEG
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 2
18293: NEG
18294: PUSH
18295: LD_INT 1
18297: NEG
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 2
18305: NEG
18306: PUSH
18307: LD_INT 2
18309: NEG
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18336: LD_ADDR_VAR 0 23
18340: PUSH
18341: LD_INT 0
18343: PUSH
18344: LD_INT 0
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 0
18353: PUSH
18354: LD_INT 1
18356: NEG
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 1
18364: PUSH
18365: LD_INT 0
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 1
18374: PUSH
18375: LD_INT 1
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 0
18384: PUSH
18385: LD_INT 1
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 1
18394: NEG
18395: PUSH
18396: LD_INT 0
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 1
18405: NEG
18406: PUSH
18407: LD_INT 1
18409: NEG
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 1
18417: NEG
18418: PUSH
18419: LD_INT 2
18421: NEG
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 0
18429: PUSH
18430: LD_INT 2
18432: NEG
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 1
18440: PUSH
18441: LD_INT 1
18443: NEG
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 2
18451: PUSH
18452: LD_INT 0
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 2
18461: PUSH
18462: LD_INT 1
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 2
18471: PUSH
18472: LD_INT 2
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: LD_INT 1
18481: PUSH
18482: LD_INT 2
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 0
18491: PUSH
18492: LD_INT 2
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 1
18501: NEG
18502: PUSH
18503: LD_INT 1
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 2
18512: NEG
18513: PUSH
18514: LD_INT 0
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 2
18523: NEG
18524: PUSH
18525: LD_INT 1
18527: NEG
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 2
18535: NEG
18536: PUSH
18537: LD_INT 2
18539: NEG
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 2
18547: NEG
18548: PUSH
18549: LD_INT 3
18551: NEG
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 1
18559: NEG
18560: PUSH
18561: LD_INT 3
18563: NEG
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 1
18571: PUSH
18572: LD_INT 2
18574: NEG
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 2
18582: PUSH
18583: LD_INT 1
18585: NEG
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18616: LD_ADDR_VAR 0 24
18620: PUSH
18621: LD_INT 0
18623: PUSH
18624: LD_INT 0
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 0
18633: PUSH
18634: LD_INT 1
18636: NEG
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 1
18644: PUSH
18645: LD_INT 0
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 1
18654: PUSH
18655: LD_INT 1
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 0
18664: PUSH
18665: LD_INT 1
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 1
18674: NEG
18675: PUSH
18676: LD_INT 0
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 1
18685: NEG
18686: PUSH
18687: LD_INT 1
18689: NEG
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 1
18697: NEG
18698: PUSH
18699: LD_INT 2
18701: NEG
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 0
18709: PUSH
18710: LD_INT 2
18712: NEG
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 1
18720: PUSH
18721: LD_INT 1
18723: NEG
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 2
18731: PUSH
18732: LD_INT 0
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 2
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 2
18751: PUSH
18752: LD_INT 2
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 1
18761: PUSH
18762: LD_INT 2
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 0
18771: PUSH
18772: LD_INT 2
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 1
18781: NEG
18782: PUSH
18783: LD_INT 1
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 2
18792: NEG
18793: PUSH
18794: LD_INT 0
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 2
18803: NEG
18804: PUSH
18805: LD_INT 1
18807: NEG
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 2
18815: NEG
18816: PUSH
18817: LD_INT 2
18819: NEG
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 1
18827: PUSH
18828: LD_INT 2
18830: NEG
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 2
18838: PUSH
18839: LD_INT 1
18841: NEG
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 3
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 3
18859: PUSH
18860: LD_INT 2
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18892: LD_ADDR_VAR 0 25
18896: PUSH
18897: LD_INT 0
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 0
18909: PUSH
18910: LD_INT 1
18912: NEG
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 1
18920: PUSH
18921: LD_INT 0
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 1
18930: PUSH
18931: LD_INT 1
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 0
18940: PUSH
18941: LD_INT 1
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 1
18950: NEG
18951: PUSH
18952: LD_INT 0
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 1
18961: NEG
18962: PUSH
18963: LD_INT 1
18965: NEG
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 1
18973: NEG
18974: PUSH
18975: LD_INT 2
18977: NEG
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 0
18985: PUSH
18986: LD_INT 2
18988: NEG
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: PUSH
18997: LD_INT 1
18999: NEG
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 2
19007: PUSH
19008: LD_INT 0
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 2
19017: PUSH
19018: LD_INT 1
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 2
19027: PUSH
19028: LD_INT 2
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: LD_INT 2
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 0
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 1
19057: NEG
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 2
19068: NEG
19069: PUSH
19070: LD_INT 0
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 2
19079: NEG
19080: PUSH
19081: LD_INT 1
19083: NEG
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 2
19091: NEG
19092: PUSH
19093: LD_INT 2
19095: NEG
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 3
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 3
19113: PUSH
19114: LD_INT 2
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 2
19123: PUSH
19124: LD_INT 3
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 1
19133: PUSH
19134: LD_INT 3
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19166: LD_ADDR_VAR 0 26
19170: PUSH
19171: LD_INT 0
19173: PUSH
19174: LD_INT 0
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 0
19183: PUSH
19184: LD_INT 1
19186: NEG
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: LD_INT 0
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 1
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 0
19214: PUSH
19215: LD_INT 1
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 1
19224: NEG
19225: PUSH
19226: LD_INT 0
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 1
19235: NEG
19236: PUSH
19237: LD_INT 1
19239: NEG
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 1
19247: NEG
19248: PUSH
19249: LD_INT 2
19251: NEG
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 0
19259: PUSH
19260: LD_INT 2
19262: NEG
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 1
19270: PUSH
19271: LD_INT 1
19273: NEG
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 2
19281: PUSH
19282: LD_INT 0
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 2
19291: PUSH
19292: LD_INT 1
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 2
19301: PUSH
19302: LD_INT 2
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 1
19311: PUSH
19312: LD_INT 2
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 0
19321: PUSH
19322: LD_INT 2
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 1
19331: NEG
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 2
19342: NEG
19343: PUSH
19344: LD_INT 0
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 2
19353: NEG
19354: PUSH
19355: LD_INT 1
19357: NEG
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 2
19365: NEG
19366: PUSH
19367: LD_INT 2
19369: NEG
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 2
19377: PUSH
19378: LD_INT 3
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 1
19387: PUSH
19388: LD_INT 3
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 1
19397: NEG
19398: PUSH
19399: LD_INT 2
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 2
19408: NEG
19409: PUSH
19410: LD_INT 1
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19442: LD_ADDR_VAR 0 27
19446: PUSH
19447: LD_INT 0
19449: PUSH
19450: LD_INT 0
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 0
19459: PUSH
19460: LD_INT 1
19462: NEG
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: LD_INT 0
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 1
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 0
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 1
19500: NEG
19501: PUSH
19502: LD_INT 0
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 1
19511: NEG
19512: PUSH
19513: LD_INT 1
19515: NEG
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 1
19523: NEG
19524: PUSH
19525: LD_INT 2
19527: NEG
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 0
19535: PUSH
19536: LD_INT 2
19538: NEG
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 1
19546: PUSH
19547: LD_INT 1
19549: NEG
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: LD_INT 0
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: LD_INT 1
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 2
19577: PUSH
19578: LD_INT 2
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 1
19587: PUSH
19588: LD_INT 2
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 0
19597: PUSH
19598: LD_INT 2
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 1
19607: NEG
19608: PUSH
19609: LD_INT 1
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 2
19618: NEG
19619: PUSH
19620: LD_INT 0
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: NEG
19630: PUSH
19631: LD_INT 1
19633: NEG
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 2
19641: NEG
19642: PUSH
19643: LD_INT 2
19645: NEG
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 1
19653: NEG
19654: PUSH
19655: LD_INT 2
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 2
19664: NEG
19665: PUSH
19666: LD_INT 1
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 3
19675: NEG
19676: PUSH
19677: LD_INT 1
19679: NEG
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 3
19687: NEG
19688: PUSH
19689: LD_INT 2
19691: NEG
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19722: LD_ADDR_VAR 0 28
19726: PUSH
19727: LD_INT 0
19729: PUSH
19730: LD_INT 0
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 0
19739: PUSH
19740: LD_INT 1
19742: NEG
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 1
19750: PUSH
19751: LD_INT 0
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 1
19760: PUSH
19761: LD_INT 1
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 0
19770: PUSH
19771: LD_INT 1
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 1
19780: NEG
19781: PUSH
19782: LD_INT 0
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 1
19791: NEG
19792: PUSH
19793: LD_INT 1
19795: NEG
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 1
19803: NEG
19804: PUSH
19805: LD_INT 2
19807: NEG
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 0
19815: PUSH
19816: LD_INT 2
19818: NEG
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 1
19826: PUSH
19827: LD_INT 1
19829: NEG
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 2
19837: PUSH
19838: LD_INT 0
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 2
19847: PUSH
19848: LD_INT 1
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 2
19857: PUSH
19858: LD_INT 2
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 1
19867: PUSH
19868: LD_INT 2
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 0
19877: PUSH
19878: LD_INT 2
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 1
19887: NEG
19888: PUSH
19889: LD_INT 1
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 2
19898: NEG
19899: PUSH
19900: LD_INT 0
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 2
19909: NEG
19910: PUSH
19911: LD_INT 1
19913: NEG
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 2
19921: NEG
19922: PUSH
19923: LD_INT 2
19925: NEG
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 2
19933: NEG
19934: PUSH
19935: LD_INT 3
19937: NEG
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 1
19945: NEG
19946: PUSH
19947: LD_INT 3
19949: NEG
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 3
19957: NEG
19958: PUSH
19959: LD_INT 1
19961: NEG
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: LD_INT 3
19969: NEG
19970: PUSH
19971: LD_INT 2
19973: NEG
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20004: LD_ADDR_VAR 0 29
20008: PUSH
20009: LD_INT 0
20011: PUSH
20012: LD_INT 0
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 0
20021: PUSH
20022: LD_INT 1
20024: NEG
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 1
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 1
20042: PUSH
20043: LD_INT 1
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 0
20052: PUSH
20053: LD_INT 1
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 1
20062: NEG
20063: PUSH
20064: LD_INT 0
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 1
20073: NEG
20074: PUSH
20075: LD_INT 1
20077: NEG
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 1
20085: NEG
20086: PUSH
20087: LD_INT 2
20089: NEG
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 0
20097: PUSH
20098: LD_INT 2
20100: NEG
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: LD_INT 1
20108: PUSH
20109: LD_INT 1
20111: NEG
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 2
20119: PUSH
20120: LD_INT 0
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 2
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 1
20139: PUSH
20140: LD_INT 2
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 0
20149: PUSH
20150: LD_INT 2
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: NEG
20160: PUSH
20161: LD_INT 1
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 2
20170: NEG
20171: PUSH
20172: LD_INT 1
20174: NEG
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 2
20182: NEG
20183: PUSH
20184: LD_INT 2
20186: NEG
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 2
20194: NEG
20195: PUSH
20196: LD_INT 3
20198: NEG
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 2
20206: PUSH
20207: LD_INT 1
20209: NEG
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 3
20217: PUSH
20218: LD_INT 1
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 1
20227: PUSH
20228: LD_INT 3
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 1
20237: NEG
20238: PUSH
20239: LD_INT 2
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 3
20248: NEG
20249: PUSH
20250: LD_INT 2
20252: NEG
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20283: LD_ADDR_VAR 0 30
20287: PUSH
20288: LD_INT 0
20290: PUSH
20291: LD_INT 0
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 0
20300: PUSH
20301: LD_INT 1
20303: NEG
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 1
20311: PUSH
20312: LD_INT 0
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 1
20321: PUSH
20322: LD_INT 1
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 0
20331: PUSH
20332: LD_INT 1
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 1
20341: NEG
20342: PUSH
20343: LD_INT 0
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 1
20352: NEG
20353: PUSH
20354: LD_INT 1
20356: NEG
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 1
20364: NEG
20365: PUSH
20366: LD_INT 2
20368: NEG
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 0
20376: PUSH
20377: LD_INT 2
20379: NEG
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 1
20387: PUSH
20388: LD_INT 1
20390: NEG
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 2
20398: PUSH
20399: LD_INT 0
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 2
20408: PUSH
20409: LD_INT 1
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 2
20418: PUSH
20419: LD_INT 2
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 1
20428: PUSH
20429: LD_INT 2
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 1
20438: NEG
20439: PUSH
20440: LD_INT 1
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 2
20449: NEG
20450: PUSH
20451: LD_INT 0
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 2
20460: NEG
20461: PUSH
20462: LD_INT 1
20464: NEG
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 1
20472: NEG
20473: PUSH
20474: LD_INT 3
20476: NEG
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 1
20484: PUSH
20485: LD_INT 2
20487: NEG
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 3
20495: PUSH
20496: LD_INT 2
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 2
20505: PUSH
20506: LD_INT 3
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 2
20515: NEG
20516: PUSH
20517: LD_INT 1
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 3
20526: NEG
20527: PUSH
20528: LD_INT 1
20530: NEG
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20561: LD_ADDR_VAR 0 31
20565: PUSH
20566: LD_INT 0
20568: PUSH
20569: LD_INT 0
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 0
20578: PUSH
20579: LD_INT 1
20581: NEG
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 1
20589: PUSH
20590: LD_INT 0
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 1
20599: PUSH
20600: LD_INT 1
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 0
20609: PUSH
20610: LD_INT 1
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 1
20619: NEG
20620: PUSH
20621: LD_INT 0
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 1
20630: NEG
20631: PUSH
20632: LD_INT 1
20634: NEG
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 1
20642: NEG
20643: PUSH
20644: LD_INT 2
20646: NEG
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 1
20654: PUSH
20655: LD_INT 1
20657: NEG
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 2
20665: PUSH
20666: LD_INT 0
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 2
20675: PUSH
20676: LD_INT 1
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 2
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 1
20695: PUSH
20696: LD_INT 2
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 0
20705: PUSH
20706: LD_INT 2
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: NEG
20716: PUSH
20717: LD_INT 1
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 2
20726: NEG
20727: PUSH
20728: LD_INT 1
20730: NEG
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 2
20738: NEG
20739: PUSH
20740: LD_INT 2
20742: NEG
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 2
20750: NEG
20751: PUSH
20752: LD_INT 3
20754: NEG
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 2
20762: PUSH
20763: LD_INT 1
20765: NEG
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 3
20773: PUSH
20774: LD_INT 1
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 1
20783: PUSH
20784: LD_INT 3
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 1
20793: NEG
20794: PUSH
20795: LD_INT 2
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 3
20804: NEG
20805: PUSH
20806: LD_INT 2
20808: NEG
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20839: LD_ADDR_VAR 0 32
20843: PUSH
20844: LD_INT 0
20846: PUSH
20847: LD_INT 0
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 0
20856: PUSH
20857: LD_INT 1
20859: NEG
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 1
20867: PUSH
20868: LD_INT 0
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 1
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 0
20887: PUSH
20888: LD_INT 1
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 1
20897: NEG
20898: PUSH
20899: LD_INT 0
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 1
20908: NEG
20909: PUSH
20910: LD_INT 1
20912: NEG
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 1
20920: NEG
20921: PUSH
20922: LD_INT 2
20924: NEG
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 0
20932: PUSH
20933: LD_INT 2
20935: NEG
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 1
20943: PUSH
20944: LD_INT 1
20946: NEG
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 2
20954: PUSH
20955: LD_INT 1
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 2
20964: PUSH
20965: LD_INT 2
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 1
20974: PUSH
20975: LD_INT 2
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 0
20984: PUSH
20985: LD_INT 2
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 1
20994: NEG
20995: PUSH
20996: LD_INT 1
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 2
21005: NEG
21006: PUSH
21007: LD_INT 0
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 2
21016: NEG
21017: PUSH
21018: LD_INT 1
21020: NEG
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: LD_INT 3
21032: NEG
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 1
21040: PUSH
21041: LD_INT 2
21043: NEG
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 3
21051: PUSH
21052: LD_INT 2
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 2
21061: PUSH
21062: LD_INT 3
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 2
21071: NEG
21072: PUSH
21073: LD_INT 1
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 3
21082: NEG
21083: PUSH
21084: LD_INT 1
21086: NEG
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21117: LD_ADDR_VAR 0 33
21121: PUSH
21122: LD_INT 0
21124: PUSH
21125: LD_INT 0
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 0
21134: PUSH
21135: LD_INT 1
21137: NEG
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 1
21145: PUSH
21146: LD_INT 0
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 1
21155: PUSH
21156: LD_INT 1
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 0
21165: PUSH
21166: LD_INT 1
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 1
21175: NEG
21176: PUSH
21177: LD_INT 0
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 1
21186: NEG
21187: PUSH
21188: LD_INT 1
21190: NEG
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 1
21198: NEG
21199: PUSH
21200: LD_INT 2
21202: NEG
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 1
21210: PUSH
21211: LD_INT 1
21213: NEG
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 2
21221: PUSH
21222: LD_INT 0
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 2
21231: PUSH
21232: LD_INT 1
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 1
21241: PUSH
21242: LD_INT 2
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 0
21251: PUSH
21252: LD_INT 2
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 1
21261: NEG
21262: PUSH
21263: LD_INT 1
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 2
21272: NEG
21273: PUSH
21274: LD_INT 0
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 2
21283: NEG
21284: PUSH
21285: LD_INT 1
21287: NEG
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 2
21295: NEG
21296: PUSH
21297: LD_INT 2
21299: NEG
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 2
21307: NEG
21308: PUSH
21309: LD_INT 3
21311: NEG
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 2
21319: PUSH
21320: LD_INT 1
21322: NEG
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 3
21330: PUSH
21331: LD_INT 1
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 1
21340: PUSH
21341: LD_INT 3
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 1
21350: NEG
21351: PUSH
21352: LD_INT 2
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 3
21361: NEG
21362: PUSH
21363: LD_INT 2
21365: NEG
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21396: LD_ADDR_VAR 0 34
21400: PUSH
21401: LD_INT 0
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 0
21413: PUSH
21414: LD_INT 1
21416: NEG
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 1
21424: PUSH
21425: LD_INT 0
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 1
21434: PUSH
21435: LD_INT 1
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 0
21444: PUSH
21445: LD_INT 1
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 1
21454: NEG
21455: PUSH
21456: LD_INT 0
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 1
21465: NEG
21466: PUSH
21467: LD_INT 1
21469: NEG
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 1
21477: NEG
21478: PUSH
21479: LD_INT 2
21481: NEG
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 0
21489: PUSH
21490: LD_INT 2
21492: NEG
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 1
21500: PUSH
21501: LD_INT 1
21503: NEG
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 2
21511: PUSH
21512: LD_INT 1
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 2
21521: PUSH
21522: LD_INT 2
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 1
21531: PUSH
21532: LD_INT 2
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 1
21541: NEG
21542: PUSH
21543: LD_INT 1
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 2
21552: NEG
21553: PUSH
21554: LD_INT 0
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 2
21563: NEG
21564: PUSH
21565: LD_INT 1
21567: NEG
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 2
21575: NEG
21576: PUSH
21577: LD_INT 2
21579: NEG
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 1
21587: NEG
21588: PUSH
21589: LD_INT 3
21591: NEG
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 1
21599: PUSH
21600: LD_INT 2
21602: NEG
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 3
21610: PUSH
21611: LD_INT 2
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 2
21620: PUSH
21621: LD_INT 3
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 2
21630: NEG
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 3
21641: NEG
21642: PUSH
21643: LD_INT 1
21645: NEG
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21676: LD_ADDR_VAR 0 35
21680: PUSH
21681: LD_INT 0
21683: PUSH
21684: LD_INT 0
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 0
21693: PUSH
21694: LD_INT 1
21696: NEG
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: LD_INT 0
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 0
21724: PUSH
21725: LD_INT 1
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 1
21734: NEG
21735: PUSH
21736: LD_INT 0
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: LD_INT 1
21749: NEG
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 2
21757: PUSH
21758: LD_INT 1
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 2
21767: NEG
21768: PUSH
21769: LD_INT 1
21771: NEG
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21788: LD_ADDR_VAR 0 36
21792: PUSH
21793: LD_INT 0
21795: PUSH
21796: LD_INT 0
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 0
21805: PUSH
21806: LD_INT 1
21808: NEG
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 1
21816: PUSH
21817: LD_INT 0
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 1
21826: PUSH
21827: LD_INT 1
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 0
21836: PUSH
21837: LD_INT 1
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 1
21846: NEG
21847: PUSH
21848: LD_INT 0
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 1
21857: NEG
21858: PUSH
21859: LD_INT 1
21861: NEG
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 1
21869: NEG
21870: PUSH
21871: LD_INT 2
21873: NEG
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 1
21881: PUSH
21882: LD_INT 2
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21900: LD_ADDR_VAR 0 37
21904: PUSH
21905: LD_INT 0
21907: PUSH
21908: LD_INT 0
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 0
21917: PUSH
21918: LD_INT 1
21920: NEG
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_INT 1
21928: PUSH
21929: LD_INT 0
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 1
21938: PUSH
21939: LD_INT 1
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 0
21948: PUSH
21949: LD_INT 1
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 1
21958: NEG
21959: PUSH
21960: LD_INT 0
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 1
21969: NEG
21970: PUSH
21971: LD_INT 1
21973: NEG
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 1
21981: PUSH
21982: LD_INT 1
21984: NEG
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 1
21992: NEG
21993: PUSH
21994: LD_INT 1
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22012: LD_ADDR_VAR 0 38
22016: PUSH
22017: LD_INT 0
22019: PUSH
22020: LD_INT 0
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 0
22029: PUSH
22030: LD_INT 1
22032: NEG
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 1
22040: PUSH
22041: LD_INT 0
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 1
22050: PUSH
22051: LD_INT 1
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 0
22060: PUSH
22061: LD_INT 1
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 1
22070: NEG
22071: PUSH
22072: LD_INT 0
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 1
22081: NEG
22082: PUSH
22083: LD_INT 1
22085: NEG
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 2
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 2
22103: NEG
22104: PUSH
22105: LD_INT 1
22107: NEG
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22124: LD_ADDR_VAR 0 39
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: LD_INT 0
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 0
22141: PUSH
22142: LD_INT 1
22144: NEG
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: LD_INT 0
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 1
22162: PUSH
22163: LD_INT 1
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 0
22172: PUSH
22173: LD_INT 1
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 1
22182: NEG
22183: PUSH
22184: LD_INT 0
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 1
22193: NEG
22194: PUSH
22195: LD_INT 1
22197: NEG
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 1
22205: NEG
22206: PUSH
22207: LD_INT 2
22209: NEG
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 1
22217: PUSH
22218: LD_INT 2
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22236: LD_ADDR_VAR 0 40
22240: PUSH
22241: LD_INT 0
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 0
22253: PUSH
22254: LD_INT 1
22256: NEG
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 1
22264: PUSH
22265: LD_INT 0
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 1
22274: PUSH
22275: LD_INT 1
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 0
22284: PUSH
22285: LD_INT 1
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 1
22294: NEG
22295: PUSH
22296: LD_INT 0
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 1
22305: NEG
22306: PUSH
22307: LD_INT 1
22309: NEG
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 1
22317: PUSH
22318: LD_INT 1
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: LD_INT 1
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22348: LD_ADDR_VAR 0 41
22352: PUSH
22353: LD_INT 0
22355: PUSH
22356: LD_INT 0
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 0
22365: PUSH
22366: LD_INT 1
22368: NEG
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 1
22376: PUSH
22377: LD_INT 0
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 1
22386: PUSH
22387: LD_INT 1
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 0
22396: PUSH
22397: LD_INT 1
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 1
22406: NEG
22407: PUSH
22408: LD_INT 0
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 1
22417: NEG
22418: PUSH
22419: LD_INT 1
22421: NEG
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 1
22429: NEG
22430: PUSH
22431: LD_INT 2
22433: NEG
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: LD_INT 1
22444: NEG
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 2
22452: PUSH
22453: LD_INT 0
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: LD_INT 1
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 2
22472: PUSH
22473: LD_INT 2
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: LD_INT 2
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 1
22492: NEG
22493: PUSH
22494: LD_INT 1
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 2
22503: NEG
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 2
22514: NEG
22515: PUSH
22516: LD_INT 1
22518: NEG
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 2
22526: NEG
22527: PUSH
22528: LD_INT 2
22530: NEG
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 2
22538: NEG
22539: PUSH
22540: LD_INT 3
22542: NEG
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 2
22550: PUSH
22551: LD_INT 1
22553: NEG
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 3
22561: PUSH
22562: LD_INT 0
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 3
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 3
22581: PUSH
22582: LD_INT 2
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 3
22591: PUSH
22592: LD_INT 3
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 2
22601: PUSH
22602: LD_INT 3
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 2
22611: NEG
22612: PUSH
22613: LD_INT 1
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 3
22622: NEG
22623: PUSH
22624: LD_INT 0
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 3
22633: NEG
22634: PUSH
22635: LD_INT 1
22637: NEG
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 3
22645: NEG
22646: PUSH
22647: LD_INT 2
22649: NEG
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 3
22657: NEG
22658: PUSH
22659: LD_INT 3
22661: NEG
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22698: LD_ADDR_VAR 0 42
22702: PUSH
22703: LD_INT 0
22705: PUSH
22706: LD_INT 0
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 0
22715: PUSH
22716: LD_INT 1
22718: NEG
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 1
22726: PUSH
22727: LD_INT 0
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 1
22736: PUSH
22737: LD_INT 1
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 0
22746: PUSH
22747: LD_INT 1
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 1
22756: NEG
22757: PUSH
22758: LD_INT 0
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 1
22767: NEG
22768: PUSH
22769: LD_INT 1
22771: NEG
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 1
22779: NEG
22780: PUSH
22781: LD_INT 2
22783: NEG
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 0
22791: PUSH
22792: LD_INT 2
22794: NEG
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 1
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 2
22813: PUSH
22814: LD_INT 1
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 2
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 1
22833: PUSH
22834: LD_INT 2
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 0
22843: PUSH
22844: LD_INT 2
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 1
22853: NEG
22854: PUSH
22855: LD_INT 1
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 2
22864: NEG
22865: PUSH
22866: LD_INT 1
22868: NEG
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 2
22876: NEG
22877: PUSH
22878: LD_INT 2
22880: NEG
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 2
22888: NEG
22889: PUSH
22890: LD_INT 3
22892: NEG
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 1
22900: NEG
22901: PUSH
22902: LD_INT 3
22904: NEG
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 0
22912: PUSH
22913: LD_INT 3
22915: NEG
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 1
22923: PUSH
22924: LD_INT 2
22926: NEG
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 3
22934: PUSH
22935: LD_INT 2
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 3
22944: PUSH
22945: LD_INT 3
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 2
22954: PUSH
22955: LD_INT 3
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 1
22964: PUSH
22965: LD_INT 3
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 0
22974: PUSH
22975: LD_INT 3
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 1
22984: NEG
22985: PUSH
22986: LD_INT 2
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 3
22995: NEG
22996: PUSH
22997: LD_INT 2
22999: NEG
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 3
23007: NEG
23008: PUSH
23009: LD_INT 3
23011: NEG
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23048: LD_ADDR_VAR 0 43
23052: PUSH
23053: LD_INT 0
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 0
23065: PUSH
23066: LD_INT 1
23068: NEG
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 1
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 1
23086: PUSH
23087: LD_INT 1
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 0
23096: PUSH
23097: LD_INT 1
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 1
23106: NEG
23107: PUSH
23108: LD_INT 0
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 1
23117: NEG
23118: PUSH
23119: LD_INT 1
23121: NEG
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 1
23129: NEG
23130: PUSH
23131: LD_INT 2
23133: NEG
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 0
23141: PUSH
23142: LD_INT 2
23144: NEG
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: LD_INT 1
23155: NEG
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 2
23163: PUSH
23164: LD_INT 0
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 2
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 1
23183: PUSH
23184: LD_INT 2
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 0
23193: PUSH
23194: LD_INT 2
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 1
23203: NEG
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 2
23214: NEG
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 2
23225: NEG
23226: PUSH
23227: LD_INT 1
23229: NEG
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 1
23237: NEG
23238: PUSH
23239: LD_INT 3
23241: NEG
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 0
23249: PUSH
23250: LD_INT 3
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: LD_INT 2
23263: NEG
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 2
23271: PUSH
23272: LD_INT 1
23274: NEG
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 3
23282: PUSH
23283: LD_INT 0
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 3
23292: PUSH
23293: LD_INT 1
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 1
23302: PUSH
23303: LD_INT 3
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 0
23312: PUSH
23313: LD_INT 3
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 1
23322: NEG
23323: PUSH
23324: LD_INT 2
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 2
23333: NEG
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 3
23344: NEG
23345: PUSH
23346: LD_INT 0
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 3
23355: NEG
23356: PUSH
23357: LD_INT 1
23359: NEG
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23396: LD_ADDR_VAR 0 44
23400: PUSH
23401: LD_INT 0
23403: PUSH
23404: LD_INT 0
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 0
23413: PUSH
23414: LD_INT 1
23416: NEG
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 1
23424: PUSH
23425: LD_INT 0
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 1
23434: PUSH
23435: LD_INT 1
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 0
23444: PUSH
23445: LD_INT 1
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 1
23454: NEG
23455: PUSH
23456: LD_INT 0
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 1
23465: NEG
23466: PUSH
23467: LD_INT 1
23469: NEG
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 1
23477: NEG
23478: PUSH
23479: LD_INT 2
23481: NEG
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 1
23489: PUSH
23490: LD_INT 1
23492: NEG
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 2
23500: PUSH
23501: LD_INT 0
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 2
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 2
23520: PUSH
23521: LD_INT 2
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 1
23530: PUSH
23531: LD_INT 2
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 1
23540: NEG
23541: PUSH
23542: LD_INT 1
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 2
23551: NEG
23552: PUSH
23553: LD_INT 0
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 2
23562: NEG
23563: PUSH
23564: LD_INT 1
23566: NEG
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 2
23574: NEG
23575: PUSH
23576: LD_INT 2
23578: NEG
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 2
23586: NEG
23587: PUSH
23588: LD_INT 3
23590: NEG
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 2
23598: PUSH
23599: LD_INT 1
23601: NEG
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 3
23609: PUSH
23610: LD_INT 0
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 3
23619: PUSH
23620: LD_INT 1
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 3
23629: PUSH
23630: LD_INT 2
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 3
23639: PUSH
23640: LD_INT 3
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 2
23649: PUSH
23650: LD_INT 3
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 2
23659: NEG
23660: PUSH
23661: LD_INT 1
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 3
23670: NEG
23671: PUSH
23672: LD_INT 0
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 3
23681: NEG
23682: PUSH
23683: LD_INT 1
23685: NEG
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 3
23693: NEG
23694: PUSH
23695: LD_INT 2
23697: NEG
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 3
23705: NEG
23706: PUSH
23707: LD_INT 3
23709: NEG
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23746: LD_ADDR_VAR 0 45
23750: PUSH
23751: LD_INT 0
23753: PUSH
23754: LD_INT 0
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 0
23763: PUSH
23764: LD_INT 1
23766: NEG
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 1
23774: PUSH
23775: LD_INT 0
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: PUSH
23785: LD_INT 1
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 0
23794: PUSH
23795: LD_INT 1
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 1
23804: NEG
23805: PUSH
23806: LD_INT 0
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 1
23815: NEG
23816: PUSH
23817: LD_INT 1
23819: NEG
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 1
23827: NEG
23828: PUSH
23829: LD_INT 2
23831: NEG
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 0
23839: PUSH
23840: LD_INT 2
23842: NEG
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: PUSH
23851: LD_INT 1
23853: NEG
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 2
23861: PUSH
23862: LD_INT 1
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 2
23871: PUSH
23872: LD_INT 2
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 1
23881: PUSH
23882: LD_INT 2
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 0
23891: PUSH
23892: LD_INT 2
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 1
23901: NEG
23902: PUSH
23903: LD_INT 1
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 2
23912: NEG
23913: PUSH
23914: LD_INT 1
23916: NEG
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 2
23924: NEG
23925: PUSH
23926: LD_INT 2
23928: NEG
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 2
23936: NEG
23937: PUSH
23938: LD_INT 3
23940: NEG
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 1
23948: NEG
23949: PUSH
23950: LD_INT 3
23952: NEG
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 0
23960: PUSH
23961: LD_INT 3
23963: NEG
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 1
23971: PUSH
23972: LD_INT 2
23974: NEG
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 3
23982: PUSH
23983: LD_INT 2
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 3
23992: PUSH
23993: LD_INT 3
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 2
24002: PUSH
24003: LD_INT 3
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 1
24012: PUSH
24013: LD_INT 3
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 0
24022: PUSH
24023: LD_INT 3
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 1
24032: NEG
24033: PUSH
24034: LD_INT 2
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: LD_INT 3
24043: NEG
24044: PUSH
24045: LD_INT 2
24047: NEG
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 3
24055: NEG
24056: PUSH
24057: LD_INT 3
24059: NEG
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24096: LD_ADDR_VAR 0 46
24100: PUSH
24101: LD_INT 0
24103: PUSH
24104: LD_INT 0
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 0
24113: PUSH
24114: LD_INT 1
24116: NEG
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 1
24124: PUSH
24125: LD_INT 0
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 1
24134: PUSH
24135: LD_INT 1
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 0
24144: PUSH
24145: LD_INT 1
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 1
24154: NEG
24155: PUSH
24156: LD_INT 0
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 1
24165: NEG
24166: PUSH
24167: LD_INT 1
24169: NEG
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 1
24177: NEG
24178: PUSH
24179: LD_INT 2
24181: NEG
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 0
24189: PUSH
24190: LD_INT 2
24192: NEG
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 1
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 2
24211: PUSH
24212: LD_INT 0
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 2
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 1
24231: PUSH
24232: LD_INT 2
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 0
24241: PUSH
24242: LD_INT 2
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 1
24251: NEG
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 2
24262: NEG
24263: PUSH
24264: LD_INT 0
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 2
24273: NEG
24274: PUSH
24275: LD_INT 1
24277: NEG
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 1
24285: NEG
24286: PUSH
24287: LD_INT 3
24289: NEG
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 0
24297: PUSH
24298: LD_INT 3
24300: NEG
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: LD_INT 2
24311: NEG
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 2
24319: PUSH
24320: LD_INT 1
24322: NEG
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 3
24330: PUSH
24331: LD_INT 0
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 3
24340: PUSH
24341: LD_INT 1
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 1
24350: PUSH
24351: LD_INT 3
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: LD_INT 3
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 1
24370: NEG
24371: PUSH
24372: LD_INT 2
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 2
24381: NEG
24382: PUSH
24383: LD_INT 1
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 3
24392: NEG
24393: PUSH
24394: LD_INT 0
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 3
24403: NEG
24404: PUSH
24405: LD_INT 1
24407: NEG
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24444: LD_ADDR_VAR 0 47
24448: PUSH
24449: LD_INT 0
24451: PUSH
24452: LD_INT 0
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 0
24461: PUSH
24462: LD_INT 1
24464: NEG
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 1
24472: PUSH
24473: LD_INT 0
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 1
24482: PUSH
24483: LD_INT 1
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 0
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 1
24502: NEG
24503: PUSH
24504: LD_INT 0
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 1
24513: NEG
24514: PUSH
24515: LD_INT 1
24517: NEG
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: LD_INT 2
24529: NEG
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 0
24537: PUSH
24538: LD_INT 2
24540: NEG
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 1
24548: PUSH
24549: LD_INT 1
24551: NEG
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 2
24559: NEG
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 2
24571: NEG
24572: PUSH
24573: LD_INT 2
24575: NEG
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24595: LD_ADDR_VAR 0 48
24599: PUSH
24600: LD_INT 0
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 0
24612: PUSH
24613: LD_INT 1
24615: NEG
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 1
24623: PUSH
24624: LD_INT 0
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 1
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 0
24643: PUSH
24644: LD_INT 1
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 1
24653: NEG
24654: PUSH
24655: LD_INT 0
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 1
24664: NEG
24665: PUSH
24666: LD_INT 1
24668: NEG
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 1
24676: NEG
24677: PUSH
24678: LD_INT 2
24680: NEG
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: LD_INT 2
24691: NEG
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 1
24699: PUSH
24700: LD_INT 1
24702: NEG
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 2
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 2
24720: PUSH
24721: LD_INT 1
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24742: LD_ADDR_VAR 0 49
24746: PUSH
24747: LD_INT 0
24749: PUSH
24750: LD_INT 0
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 0
24759: PUSH
24760: LD_INT 1
24762: NEG
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 1
24770: PUSH
24771: LD_INT 0
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 0
24790: PUSH
24791: LD_INT 1
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 1
24800: NEG
24801: PUSH
24802: LD_INT 0
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 1
24811: NEG
24812: PUSH
24813: LD_INT 1
24815: NEG
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 1
24823: PUSH
24824: LD_INT 1
24826: NEG
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 2
24834: PUSH
24835: LD_INT 0
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 2
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 2
24854: PUSH
24855: LD_INT 2
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 1
24864: PUSH
24865: LD_INT 2
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24886: LD_ADDR_VAR 0 50
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: LD_INT 1
24906: NEG
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 1
24924: PUSH
24925: LD_INT 1
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 0
24934: PUSH
24935: LD_INT 1
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 1
24944: NEG
24945: PUSH
24946: LD_INT 0
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 1
24955: NEG
24956: PUSH
24957: LD_INT 1
24959: NEG
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 2
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 2
24977: PUSH
24978: LD_INT 2
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: LD_INT 2
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 0
24997: PUSH
24998: LD_INT 2
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 1
25007: NEG
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25030: LD_ADDR_VAR 0 51
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: LD_INT 0
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 0
25047: PUSH
25048: LD_INT 1
25050: NEG
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: PUSH
25059: LD_INT 0
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 0
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 1
25088: NEG
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: NEG
25100: PUSH
25101: LD_INT 1
25103: NEG
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 1
25111: PUSH
25112: LD_INT 2
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: LD_INT 2
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 1
25131: NEG
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 2
25142: NEG
25143: PUSH
25144: LD_INT 0
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 2
25153: NEG
25154: PUSH
25155: LD_INT 1
25157: NEG
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25177: LD_ADDR_VAR 0 52
25181: PUSH
25182: LD_INT 0
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 0
25194: PUSH
25195: LD_INT 1
25197: NEG
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 1
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 0
25225: PUSH
25226: LD_INT 1
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 1
25235: NEG
25236: PUSH
25237: LD_INT 0
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 1
25246: NEG
25247: PUSH
25248: LD_INT 1
25250: NEG
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 1
25258: NEG
25259: PUSH
25260: LD_INT 2
25262: NEG
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 1
25270: NEG
25271: PUSH
25272: LD_INT 1
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 2
25281: NEG
25282: PUSH
25283: LD_INT 0
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 2
25292: NEG
25293: PUSH
25294: LD_INT 1
25296: NEG
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 2
25304: NEG
25305: PUSH
25306: LD_INT 2
25308: NEG
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25328: LD_ADDR_VAR 0 53
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: LD_INT 0
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: LD_INT 1
25348: NEG
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 1
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: PUSH
25367: LD_INT 1
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 0
25376: PUSH
25377: LD_INT 1
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 1
25386: NEG
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 1
25397: NEG
25398: PUSH
25399: LD_INT 1
25401: NEG
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 1
25409: NEG
25410: PUSH
25411: LD_INT 2
25413: NEG
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: LD_INT 2
25424: NEG
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 1
25432: PUSH
25433: LD_INT 1
25435: NEG
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 2
25443: PUSH
25444: LD_INT 0
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 2
25453: PUSH
25454: LD_INT 1
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 2
25463: PUSH
25464: LD_INT 2
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: LD_INT 2
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: LD_INT 2
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: LD_INT 1
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 2
25504: NEG
25505: PUSH
25506: LD_INT 0
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 2
25515: NEG
25516: PUSH
25517: LD_INT 1
25519: NEG
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 2
25527: NEG
25528: PUSH
25529: LD_INT 2
25531: NEG
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25558: LD_ADDR_VAR 0 54
25562: PUSH
25563: LD_INT 0
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 0
25575: PUSH
25576: LD_INT 1
25578: NEG
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 1
25586: PUSH
25587: LD_INT 0
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 0
25606: PUSH
25607: LD_INT 1
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 1
25616: NEG
25617: PUSH
25618: LD_INT 0
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 1
25627: NEG
25628: PUSH
25629: LD_INT 1
25631: NEG
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: LD_INT 2
25643: NEG
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 0
25651: PUSH
25652: LD_INT 2
25654: NEG
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 1
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 2
25673: PUSH
25674: LD_INT 0
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 2
25683: PUSH
25684: LD_INT 1
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 2
25693: PUSH
25694: LD_INT 2
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: LD_INT 2
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 0
25713: PUSH
25714: LD_INT 2
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 2
25734: NEG
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 2
25745: NEG
25746: PUSH
25747: LD_INT 1
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 2
25757: NEG
25758: PUSH
25759: LD_INT 2
25761: NEG
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25788: LD_ADDR_VAR 0 55
25792: PUSH
25793: LD_INT 0
25795: PUSH
25796: LD_INT 0
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 0
25805: PUSH
25806: LD_INT 1
25808: NEG
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 1
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 1
25826: PUSH
25827: LD_INT 1
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 0
25836: PUSH
25837: LD_INT 1
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 1
25846: NEG
25847: PUSH
25848: LD_INT 0
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 1
25857: NEG
25858: PUSH
25859: LD_INT 1
25861: NEG
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: LD_INT 2
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 0
25881: PUSH
25882: LD_INT 2
25884: NEG
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: LD_INT 1
25895: NEG
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 2
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 2
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 2
25923: PUSH
25924: LD_INT 2
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 1
25933: PUSH
25934: LD_INT 2
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 0
25943: PUSH
25944: LD_INT 2
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: LD_INT 1
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 2
25964: NEG
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 2
25975: NEG
25976: PUSH
25977: LD_INT 1
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 2
25987: NEG
25988: PUSH
25989: LD_INT 2
25991: NEG
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26018: LD_ADDR_VAR 0 56
26022: PUSH
26023: LD_INT 0
26025: PUSH
26026: LD_INT 0
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 0
26035: PUSH
26036: LD_INT 1
26038: NEG
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 1
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 1
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 0
26066: PUSH
26067: LD_INT 1
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 1
26076: NEG
26077: PUSH
26078: LD_INT 0
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 1
26087: NEG
26088: PUSH
26089: LD_INT 1
26091: NEG
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: PUSH
26101: LD_INT 2
26103: NEG
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: LD_INT 2
26114: NEG
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: PUSH
26123: LD_INT 1
26125: NEG
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 2
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 2
26143: PUSH
26144: LD_INT 1
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 2
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: LD_INT 2
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 0
26173: PUSH
26174: LD_INT 2
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 1
26183: NEG
26184: PUSH
26185: LD_INT 1
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 2
26194: NEG
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 2
26205: NEG
26206: PUSH
26207: LD_INT 1
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 2
26217: NEG
26218: PUSH
26219: LD_INT 2
26221: NEG
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26248: LD_ADDR_VAR 0 57
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 0
26265: PUSH
26266: LD_INT 1
26268: NEG
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 1
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 1
26286: PUSH
26287: LD_INT 1
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 0
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 1
26306: NEG
26307: PUSH
26308: LD_INT 0
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 1
26317: NEG
26318: PUSH
26319: LD_INT 1
26321: NEG
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: LD_INT 2
26333: NEG
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 0
26341: PUSH
26342: LD_INT 2
26344: NEG
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 1
26352: PUSH
26353: LD_INT 1
26355: NEG
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 2
26363: PUSH
26364: LD_INT 0
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 2
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 2
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 1
26393: PUSH
26394: LD_INT 2
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 0
26403: PUSH
26404: LD_INT 2
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 1
26413: NEG
26414: PUSH
26415: LD_INT 1
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 2
26424: NEG
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 2
26435: NEG
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 2
26447: NEG
26448: PUSH
26449: LD_INT 2
26451: NEG
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26478: LD_ADDR_VAR 0 58
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 0
26495: PUSH
26496: LD_INT 1
26498: NEG
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 1
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 1
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: LD_INT 1
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 1
26536: NEG
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 1
26547: NEG
26548: PUSH
26549: LD_INT 1
26551: NEG
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 1
26559: NEG
26560: PUSH
26561: LD_INT 2
26563: NEG
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: LD_INT 2
26574: NEG
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 1
26582: PUSH
26583: LD_INT 1
26585: NEG
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 2
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 2
26603: PUSH
26604: LD_INT 1
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 2
26613: PUSH
26614: LD_INT 2
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 1
26623: PUSH
26624: LD_INT 2
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 0
26633: PUSH
26634: LD_INT 2
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: NEG
26644: PUSH
26645: LD_INT 1
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 2
26654: NEG
26655: PUSH
26656: LD_INT 0
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 2
26665: NEG
26666: PUSH
26667: LD_INT 1
26669: NEG
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 2
26677: NEG
26678: PUSH
26679: LD_INT 2
26681: NEG
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26708: LD_ADDR_VAR 0 59
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: LD_INT 0
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: LD_INT 1
26728: NEG
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 1
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 1
26746: PUSH
26747: LD_INT 1
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: LD_INT 1
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 1
26766: NEG
26767: PUSH
26768: LD_INT 0
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 1
26777: NEG
26778: PUSH
26779: LD_INT 1
26781: NEG
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26796: LD_ADDR_VAR 0 60
26800: PUSH
26801: LD_INT 0
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: LD_INT 1
26816: NEG
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 1
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: LD_INT 1
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 1
26854: NEG
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 1
26865: NEG
26866: PUSH
26867: LD_INT 1
26869: NEG
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26884: LD_ADDR_VAR 0 61
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: LD_INT 0
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: LD_INT 1
26904: NEG
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: LD_INT 0
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: LD_INT 1
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 1
26942: NEG
26943: PUSH
26944: LD_INT 0
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 1
26953: NEG
26954: PUSH
26955: LD_INT 1
26957: NEG
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26972: LD_ADDR_VAR 0 62
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 0
26989: PUSH
26990: LD_INT 1
26992: NEG
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: LD_INT 1
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 0
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: NEG
27031: PUSH
27032: LD_INT 0
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 1
27041: NEG
27042: PUSH
27043: LD_INT 1
27045: NEG
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27060: LD_ADDR_VAR 0 63
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 0
27077: PUSH
27078: LD_INT 1
27080: NEG
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 1
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: NEG
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: NEG
27130: PUSH
27131: LD_INT 1
27133: NEG
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27148: LD_ADDR_VAR 0 64
27152: PUSH
27153: LD_INT 0
27155: PUSH
27156: LD_INT 0
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 0
27165: PUSH
27166: LD_INT 1
27168: NEG
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 1
27176: PUSH
27177: LD_INT 0
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 1
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 0
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 1
27206: NEG
27207: PUSH
27208: LD_INT 0
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 1
27217: NEG
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: ST_TO_ADDR
// end ; 1 :
27236: GO 33133
27238: LD_INT 1
27240: DOUBLE
27241: EQUAL
27242: IFTRUE 27246
27244: GO 29869
27246: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27247: LD_ADDR_VAR 0 11
27251: PUSH
27252: LD_INT 1
27254: NEG
27255: PUSH
27256: LD_INT 3
27258: NEG
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 0
27266: PUSH
27267: LD_INT 3
27269: NEG
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: LD_INT 2
27280: NEG
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: LIST
27290: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27291: LD_ADDR_VAR 0 12
27295: PUSH
27296: LD_INT 2
27298: PUSH
27299: LD_INT 1
27301: NEG
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 3
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 3
27319: PUSH
27320: LD_INT 1
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: LIST
27331: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27332: LD_ADDR_VAR 0 13
27336: PUSH
27337: LD_INT 3
27339: PUSH
27340: LD_INT 2
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 3
27349: PUSH
27350: LD_INT 3
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 2
27359: PUSH
27360: LD_INT 3
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: LIST
27371: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27372: LD_ADDR_VAR 0 14
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: LD_INT 3
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: LD_INT 3
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 1
27399: NEG
27400: PUSH
27401: LD_INT 2
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: LIST
27412: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27413: LD_ADDR_VAR 0 15
27417: PUSH
27418: LD_INT 2
27420: NEG
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 3
27431: NEG
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 3
27442: NEG
27443: PUSH
27444: LD_INT 1
27446: NEG
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: LIST
27456: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27457: LD_ADDR_VAR 0 16
27461: PUSH
27462: LD_INT 2
27464: NEG
27465: PUSH
27466: LD_INT 3
27468: NEG
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 3
27476: NEG
27477: PUSH
27478: LD_INT 2
27480: NEG
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 3
27488: NEG
27489: PUSH
27490: LD_INT 3
27492: NEG
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: LIST
27502: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27503: LD_ADDR_VAR 0 17
27507: PUSH
27508: LD_INT 1
27510: NEG
27511: PUSH
27512: LD_INT 3
27514: NEG
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: LD_INT 3
27525: NEG
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 1
27533: PUSH
27534: LD_INT 2
27536: NEG
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: LIST
27546: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27547: LD_ADDR_VAR 0 18
27551: PUSH
27552: LD_INT 2
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 3
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 3
27575: PUSH
27576: LD_INT 1
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: LIST
27587: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27588: LD_ADDR_VAR 0 19
27592: PUSH
27593: LD_INT 3
27595: PUSH
27596: LD_INT 2
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 3
27605: PUSH
27606: LD_INT 3
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: LD_INT 3
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27628: LD_ADDR_VAR 0 20
27632: PUSH
27633: LD_INT 1
27635: PUSH
27636: LD_INT 3
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 0
27645: PUSH
27646: LD_INT 3
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 1
27655: NEG
27656: PUSH
27657: LD_INT 2
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: LIST
27668: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27669: LD_ADDR_VAR 0 21
27673: PUSH
27674: LD_INT 2
27676: NEG
27677: PUSH
27678: LD_INT 1
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 3
27687: NEG
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 3
27698: NEG
27699: PUSH
27700: LD_INT 1
27702: NEG
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: LIST
27712: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27713: LD_ADDR_VAR 0 22
27717: PUSH
27718: LD_INT 2
27720: NEG
27721: PUSH
27722: LD_INT 3
27724: NEG
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 3
27732: NEG
27733: PUSH
27734: LD_INT 2
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 3
27744: NEG
27745: PUSH
27746: LD_INT 3
27748: NEG
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: LIST
27758: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27759: LD_ADDR_VAR 0 23
27763: PUSH
27764: LD_INT 0
27766: PUSH
27767: LD_INT 3
27769: NEG
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 1
27777: NEG
27778: PUSH
27779: LD_INT 4
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: PUSH
27790: LD_INT 3
27792: NEG
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: LIST
27802: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27803: LD_ADDR_VAR 0 24
27807: PUSH
27808: LD_INT 3
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 3
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 4
27831: PUSH
27832: LD_INT 1
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: LIST
27843: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27844: LD_ADDR_VAR 0 25
27848: PUSH
27849: LD_INT 3
27851: PUSH
27852: LD_INT 3
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 4
27861: PUSH
27862: LD_INT 3
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 3
27871: PUSH
27872: LD_INT 4
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: LIST
27883: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27884: LD_ADDR_VAR 0 26
27888: PUSH
27889: LD_INT 0
27891: PUSH
27892: LD_INT 3
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 1
27901: PUSH
27902: LD_INT 4
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: LD_INT 3
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27925: LD_ADDR_VAR 0 27
27929: PUSH
27930: LD_INT 3
27932: NEG
27933: PUSH
27934: LD_INT 0
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 3
27943: NEG
27944: PUSH
27945: LD_INT 1
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 4
27954: NEG
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: LIST
27968: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27969: LD_ADDR_VAR 0 28
27973: PUSH
27974: LD_INT 3
27976: NEG
27977: PUSH
27978: LD_INT 3
27980: NEG
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 3
27988: NEG
27989: PUSH
27990: LD_INT 4
27992: NEG
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 4
28000: NEG
28001: PUSH
28002: LD_INT 3
28004: NEG
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: LIST
28014: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28015: LD_ADDR_VAR 0 29
28019: PUSH
28020: LD_INT 1
28022: NEG
28023: PUSH
28024: LD_INT 3
28026: NEG
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 0
28034: PUSH
28035: LD_INT 3
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 1
28045: PUSH
28046: LD_INT 2
28048: NEG
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 1
28056: NEG
28057: PUSH
28058: LD_INT 4
28060: NEG
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 0
28068: PUSH
28069: LD_INT 4
28071: NEG
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 1
28079: PUSH
28080: LD_INT 3
28082: NEG
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 1
28090: NEG
28091: PUSH
28092: LD_INT 5
28094: NEG
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: LD_INT 5
28105: NEG
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 1
28113: PUSH
28114: LD_INT 4
28116: NEG
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: NEG
28125: PUSH
28126: LD_INT 6
28128: NEG
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 0
28136: PUSH
28137: LD_INT 6
28139: NEG
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: LD_INT 5
28150: NEG
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28170: LD_ADDR_VAR 0 30
28174: PUSH
28175: LD_INT 2
28177: PUSH
28178: LD_INT 1
28180: NEG
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 3
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 3
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 3
28208: PUSH
28209: LD_INT 1
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 4
28219: PUSH
28220: LD_INT 0
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 4
28229: PUSH
28230: LD_INT 1
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 4
28239: PUSH
28240: LD_INT 1
28242: NEG
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 5
28250: PUSH
28251: LD_INT 0
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 5
28260: PUSH
28261: LD_INT 1
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 5
28270: PUSH
28271: LD_INT 1
28273: NEG
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 6
28281: PUSH
28282: LD_INT 0
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 6
28291: PUSH
28292: LD_INT 1
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28313: LD_ADDR_VAR 0 31
28317: PUSH
28318: LD_INT 3
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 3
28330: PUSH
28331: LD_INT 3
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 2
28340: PUSH
28341: LD_INT 3
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 4
28350: PUSH
28351: LD_INT 3
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 4
28360: PUSH
28361: LD_INT 4
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 3
28370: PUSH
28371: LD_INT 4
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 5
28380: PUSH
28381: LD_INT 4
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 5
28390: PUSH
28391: LD_INT 5
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 4
28400: PUSH
28401: LD_INT 5
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 6
28410: PUSH
28411: LD_INT 5
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 6
28420: PUSH
28421: LD_INT 6
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 5
28430: PUSH
28431: LD_INT 6
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28452: LD_ADDR_VAR 0 32
28456: PUSH
28457: LD_INT 1
28459: PUSH
28460: LD_INT 3
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 0
28469: PUSH
28470: LD_INT 3
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 1
28479: NEG
28480: PUSH
28481: LD_INT 2
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 1
28490: PUSH
28491: LD_INT 4
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 0
28500: PUSH
28501: LD_INT 4
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 1
28510: NEG
28511: PUSH
28512: LD_INT 3
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 1
28521: PUSH
28522: LD_INT 5
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: LD_INT 5
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 1
28541: NEG
28542: PUSH
28543: LD_INT 4
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: LD_INT 6
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: LD_INT 6
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 1
28572: NEG
28573: PUSH
28574: LD_INT 5
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28595: LD_ADDR_VAR 0 33
28599: PUSH
28600: LD_INT 2
28602: NEG
28603: PUSH
28604: LD_INT 1
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 3
28613: NEG
28614: PUSH
28615: LD_INT 0
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 3
28624: NEG
28625: PUSH
28626: LD_INT 1
28628: NEG
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 3
28636: NEG
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 4
28647: NEG
28648: PUSH
28649: LD_INT 0
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 4
28658: NEG
28659: PUSH
28660: LD_INT 1
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 4
28670: NEG
28671: PUSH
28672: LD_INT 1
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 5
28681: NEG
28682: PUSH
28683: LD_INT 0
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 5
28692: NEG
28693: PUSH
28694: LD_INT 1
28696: NEG
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 5
28704: NEG
28705: PUSH
28706: LD_INT 1
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 6
28715: NEG
28716: PUSH
28717: LD_INT 0
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 6
28726: NEG
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28750: LD_ADDR_VAR 0 34
28754: PUSH
28755: LD_INT 2
28757: NEG
28758: PUSH
28759: LD_INT 3
28761: NEG
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 3
28769: NEG
28770: PUSH
28771: LD_INT 2
28773: NEG
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 3
28781: NEG
28782: PUSH
28783: LD_INT 3
28785: NEG
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 3
28793: NEG
28794: PUSH
28795: LD_INT 4
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 4
28805: NEG
28806: PUSH
28807: LD_INT 3
28809: NEG
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 4
28817: NEG
28818: PUSH
28819: LD_INT 4
28821: NEG
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 4
28829: NEG
28830: PUSH
28831: LD_INT 5
28833: NEG
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 5
28841: NEG
28842: PUSH
28843: LD_INT 4
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 5
28853: NEG
28854: PUSH
28855: LD_INT 5
28857: NEG
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 5
28865: NEG
28866: PUSH
28867: LD_INT 6
28869: NEG
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 6
28877: NEG
28878: PUSH
28879: LD_INT 5
28881: NEG
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 6
28889: NEG
28890: PUSH
28891: LD_INT 6
28893: NEG
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28913: LD_ADDR_VAR 0 41
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: LD_INT 2
28923: NEG
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 1
28931: NEG
28932: PUSH
28933: LD_INT 3
28935: NEG
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 1
28943: PUSH
28944: LD_INT 2
28946: NEG
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: LIST
28956: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28957: LD_ADDR_VAR 0 42
28961: PUSH
28962: LD_INT 2
28964: PUSH
28965: LD_INT 0
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 2
28974: PUSH
28975: LD_INT 1
28977: NEG
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 3
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: LIST
28997: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28998: LD_ADDR_VAR 0 43
29002: PUSH
29003: LD_INT 2
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 3
29015: PUSH
29016: LD_INT 2
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 2
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: LIST
29037: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29038: LD_ADDR_VAR 0 44
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: LD_INT 2
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 1
29055: PUSH
29056: LD_INT 3
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 1
29065: NEG
29066: PUSH
29067: LD_INT 2
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: LIST
29078: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29079: LD_ADDR_VAR 0 45
29083: PUSH
29084: LD_INT 2
29086: NEG
29087: PUSH
29088: LD_INT 0
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 2
29097: NEG
29098: PUSH
29099: LD_INT 1
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 3
29108: NEG
29109: PUSH
29110: LD_INT 1
29112: NEG
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: LIST
29122: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29123: LD_ADDR_VAR 0 46
29127: PUSH
29128: LD_INT 2
29130: NEG
29131: PUSH
29132: LD_INT 2
29134: NEG
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 2
29142: NEG
29143: PUSH
29144: LD_INT 3
29146: NEG
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 3
29154: NEG
29155: PUSH
29156: LD_INT 2
29158: NEG
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: LIST
29168: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29169: LD_ADDR_VAR 0 47
29173: PUSH
29174: LD_INT 2
29176: NEG
29177: PUSH
29178: LD_INT 3
29180: NEG
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 1
29188: NEG
29189: PUSH
29190: LD_INT 3
29192: NEG
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29202: LD_ADDR_VAR 0 48
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: LD_INT 2
29212: NEG
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 2
29220: PUSH
29221: LD_INT 1
29223: NEG
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29233: LD_ADDR_VAR 0 49
29237: PUSH
29238: LD_INT 3
29240: PUSH
29241: LD_INT 1
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 3
29250: PUSH
29251: LD_INT 2
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29262: LD_ADDR_VAR 0 50
29266: PUSH
29267: LD_INT 2
29269: PUSH
29270: LD_INT 3
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 1
29279: PUSH
29280: LD_INT 3
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29291: LD_ADDR_VAR 0 51
29295: PUSH
29296: LD_INT 1
29298: NEG
29299: PUSH
29300: LD_INT 2
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 2
29309: NEG
29310: PUSH
29311: LD_INT 1
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29322: LD_ADDR_VAR 0 52
29326: PUSH
29327: LD_INT 3
29329: NEG
29330: PUSH
29331: LD_INT 1
29333: NEG
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 3
29341: NEG
29342: PUSH
29343: LD_INT 2
29345: NEG
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29355: LD_ADDR_VAR 0 53
29359: PUSH
29360: LD_INT 1
29362: NEG
29363: PUSH
29364: LD_INT 3
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: LD_INT 3
29377: NEG
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: LD_INT 2
29388: NEG
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: LIST
29398: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29399: LD_ADDR_VAR 0 54
29403: PUSH
29404: LD_INT 2
29406: PUSH
29407: LD_INT 1
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 3
29417: PUSH
29418: LD_INT 0
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 3
29427: PUSH
29428: LD_INT 1
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: LIST
29439: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29440: LD_ADDR_VAR 0 55
29444: PUSH
29445: LD_INT 3
29447: PUSH
29448: LD_INT 2
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 3
29457: PUSH
29458: LD_INT 3
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 2
29467: PUSH
29468: LD_INT 3
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: LIST
29479: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29480: LD_ADDR_VAR 0 56
29484: PUSH
29485: LD_INT 1
29487: PUSH
29488: LD_INT 3
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 0
29497: PUSH
29498: LD_INT 3
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 1
29507: NEG
29508: PUSH
29509: LD_INT 2
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: LIST
29520: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29521: LD_ADDR_VAR 0 57
29525: PUSH
29526: LD_INT 2
29528: NEG
29529: PUSH
29530: LD_INT 1
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 3
29539: NEG
29540: PUSH
29541: LD_INT 0
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 3
29550: NEG
29551: PUSH
29552: LD_INT 1
29554: NEG
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: LIST
29564: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29565: LD_ADDR_VAR 0 58
29569: PUSH
29570: LD_INT 2
29572: NEG
29573: PUSH
29574: LD_INT 3
29576: NEG
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 3
29584: NEG
29585: PUSH
29586: LD_INT 2
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 3
29596: NEG
29597: PUSH
29598: LD_INT 3
29600: NEG
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: LIST
29610: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29611: LD_ADDR_VAR 0 59
29615: PUSH
29616: LD_INT 1
29618: NEG
29619: PUSH
29620: LD_INT 2
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 0
29630: PUSH
29631: LD_INT 2
29633: NEG
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 1
29641: PUSH
29642: LD_INT 1
29644: NEG
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: LIST
29654: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29655: LD_ADDR_VAR 0 60
29659: PUSH
29660: LD_INT 1
29662: PUSH
29663: LD_INT 1
29665: NEG
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 2
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 2
29683: PUSH
29684: LD_INT 1
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: LIST
29695: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29696: LD_ADDR_VAR 0 61
29700: PUSH
29701: LD_INT 2
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 2
29713: PUSH
29714: LD_INT 2
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: LD_INT 2
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: LIST
29735: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29736: LD_ADDR_VAR 0 62
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 0
29753: PUSH
29754: LD_INT 2
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 1
29763: NEG
29764: PUSH
29765: LD_INT 1
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: LIST
29776: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29777: LD_ADDR_VAR 0 63
29781: PUSH
29782: LD_INT 1
29784: NEG
29785: PUSH
29786: LD_INT 1
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 2
29795: NEG
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 2
29806: NEG
29807: PUSH
29808: LD_INT 1
29810: NEG
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: LIST
29820: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29821: LD_ADDR_VAR 0 64
29825: PUSH
29826: LD_INT 1
29828: NEG
29829: PUSH
29830: LD_INT 2
29832: NEG
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 2
29840: NEG
29841: PUSH
29842: LD_INT 1
29844: NEG
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 2
29852: NEG
29853: PUSH
29854: LD_INT 2
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: LIST
29866: ST_TO_ADDR
// end ; 2 :
29867: GO 33133
29869: LD_INT 2
29871: DOUBLE
29872: EQUAL
29873: IFTRUE 29877
29875: GO 33132
29877: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29878: LD_ADDR_VAR 0 29
29882: PUSH
29883: LD_INT 4
29885: PUSH
29886: LD_INT 0
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 4
29895: PUSH
29896: LD_INT 1
29898: NEG
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 5
29906: PUSH
29907: LD_INT 0
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 5
29916: PUSH
29917: LD_INT 1
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 4
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 3
29936: PUSH
29937: LD_INT 0
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 3
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 3
29957: PUSH
29958: LD_INT 2
29960: NEG
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 5
29968: PUSH
29969: LD_INT 2
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 3
29978: PUSH
29979: LD_INT 3
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 3
29988: PUSH
29989: LD_INT 2
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 4
29998: PUSH
29999: LD_INT 3
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 4
30008: PUSH
30009: LD_INT 4
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 3
30018: PUSH
30019: LD_INT 4
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 2
30028: PUSH
30029: LD_INT 3
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 2
30038: PUSH
30039: LD_INT 2
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 4
30048: PUSH
30049: LD_INT 2
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 2
30058: PUSH
30059: LD_INT 4
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 0
30068: PUSH
30069: LD_INT 4
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: LD_INT 3
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 1
30088: PUSH
30089: LD_INT 4
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 1
30098: PUSH
30099: LD_INT 5
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 0
30108: PUSH
30109: LD_INT 5
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 1
30118: NEG
30119: PUSH
30120: LD_INT 4
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 1
30129: NEG
30130: PUSH
30131: LD_INT 3
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 2
30140: PUSH
30141: LD_INT 5
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 2
30150: NEG
30151: PUSH
30152: LD_INT 3
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 3
30161: NEG
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 3
30172: NEG
30173: PUSH
30174: LD_INT 1
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 2
30184: NEG
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 2
30195: NEG
30196: PUSH
30197: LD_INT 1
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 3
30206: NEG
30207: PUSH
30208: LD_INT 1
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 4
30217: NEG
30218: PUSH
30219: LD_INT 0
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 4
30228: NEG
30229: PUSH
30230: LD_INT 1
30232: NEG
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 4
30240: NEG
30241: PUSH
30242: LD_INT 2
30244: NEG
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 2
30252: NEG
30253: PUSH
30254: LD_INT 2
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 4
30263: NEG
30264: PUSH
30265: LD_INT 4
30267: NEG
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 4
30275: NEG
30276: PUSH
30277: LD_INT 5
30279: NEG
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 3
30287: NEG
30288: PUSH
30289: LD_INT 4
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 3
30299: NEG
30300: PUSH
30301: LD_INT 3
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 4
30311: NEG
30312: PUSH
30313: LD_INT 3
30315: NEG
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 5
30323: NEG
30324: PUSH
30325: LD_INT 4
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 5
30335: NEG
30336: PUSH
30337: LD_INT 5
30339: NEG
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 3
30347: NEG
30348: PUSH
30349: LD_INT 5
30351: NEG
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 5
30359: NEG
30360: PUSH
30361: LD_INT 3
30363: NEG
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30416: LD_ADDR_VAR 0 30
30420: PUSH
30421: LD_INT 4
30423: PUSH
30424: LD_INT 4
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 4
30433: PUSH
30434: LD_INT 3
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 5
30443: PUSH
30444: LD_INT 4
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 5
30453: PUSH
30454: LD_INT 5
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 4
30463: PUSH
30464: LD_INT 5
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 3
30473: PUSH
30474: LD_INT 4
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 3
30483: PUSH
30484: LD_INT 3
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 5
30493: PUSH
30494: LD_INT 3
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 3
30503: PUSH
30504: LD_INT 5
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 0
30513: PUSH
30514: LD_INT 3
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: LD_INT 2
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 1
30533: PUSH
30534: LD_INT 3
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 1
30543: PUSH
30544: LD_INT 4
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 0
30553: PUSH
30554: LD_INT 4
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 1
30563: NEG
30564: PUSH
30565: LD_INT 3
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 1
30574: NEG
30575: PUSH
30576: LD_INT 2
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 2
30585: PUSH
30586: LD_INT 4
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 2
30595: NEG
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 4
30606: NEG
30607: PUSH
30608: LD_INT 0
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 4
30617: NEG
30618: PUSH
30619: LD_INT 1
30621: NEG
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 3
30629: NEG
30630: PUSH
30631: LD_INT 0
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 3
30640: NEG
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 4
30651: NEG
30652: PUSH
30653: LD_INT 1
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 5
30662: NEG
30663: PUSH
30664: LD_INT 0
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 5
30673: NEG
30674: PUSH
30675: LD_INT 1
30677: NEG
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 5
30685: NEG
30686: PUSH
30687: LD_INT 2
30689: NEG
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 3
30697: NEG
30698: PUSH
30699: LD_INT 2
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 3
30708: NEG
30709: PUSH
30710: LD_INT 3
30712: NEG
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 3
30720: NEG
30721: PUSH
30722: LD_INT 4
30724: NEG
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 2
30732: NEG
30733: PUSH
30734: LD_INT 3
30736: NEG
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 2
30744: NEG
30745: PUSH
30746: LD_INT 2
30748: NEG
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 3
30756: NEG
30757: PUSH
30758: LD_INT 2
30760: NEG
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 4
30768: NEG
30769: PUSH
30770: LD_INT 3
30772: NEG
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 4
30780: NEG
30781: PUSH
30782: LD_INT 4
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 2
30792: NEG
30793: PUSH
30794: LD_INT 4
30796: NEG
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 4
30804: NEG
30805: PUSH
30806: LD_INT 2
30808: NEG
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: LD_INT 4
30819: NEG
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 0
30827: PUSH
30828: LD_INT 5
30830: NEG
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: LD_INT 4
30841: NEG
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 1
30849: PUSH
30850: LD_INT 3
30852: NEG
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: LD_INT 3
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 1
30871: NEG
30872: PUSH
30873: LD_INT 4
30875: NEG
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 1
30883: NEG
30884: PUSH
30885: LD_INT 5
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 2
30895: PUSH
30896: LD_INT 3
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 2
30906: NEG
30907: PUSH
30908: LD_INT 5
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30963: LD_ADDR_VAR 0 31
30967: PUSH
30968: LD_INT 0
30970: PUSH
30971: LD_INT 4
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 0
30980: PUSH
30981: LD_INT 3
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 1
30990: PUSH
30991: LD_INT 4
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 1
31000: PUSH
31001: LD_INT 5
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: LD_INT 5
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 1
31020: NEG
31021: PUSH
31022: LD_INT 4
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 1
31031: NEG
31032: PUSH
31033: LD_INT 3
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 2
31042: PUSH
31043: LD_INT 5
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 2
31052: NEG
31053: PUSH
31054: LD_INT 3
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 3
31063: NEG
31064: PUSH
31065: LD_INT 0
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 3
31074: NEG
31075: PUSH
31076: LD_INT 1
31078: NEG
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 2
31086: NEG
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 2
31097: NEG
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 3
31108: NEG
31109: PUSH
31110: LD_INT 1
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 4
31119: NEG
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 4
31130: NEG
31131: PUSH
31132: LD_INT 1
31134: NEG
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 4
31142: NEG
31143: PUSH
31144: LD_INT 2
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 2
31154: NEG
31155: PUSH
31156: LD_INT 2
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 4
31165: NEG
31166: PUSH
31167: LD_INT 4
31169: NEG
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 4
31177: NEG
31178: PUSH
31179: LD_INT 5
31181: NEG
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 3
31189: NEG
31190: PUSH
31191: LD_INT 4
31193: NEG
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 3
31201: NEG
31202: PUSH
31203: LD_INT 3
31205: NEG
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 4
31213: NEG
31214: PUSH
31215: LD_INT 3
31217: NEG
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 5
31225: NEG
31226: PUSH
31227: LD_INT 4
31229: NEG
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 5
31237: NEG
31238: PUSH
31239: LD_INT 5
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 3
31249: NEG
31250: PUSH
31251: LD_INT 5
31253: NEG
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 5
31261: NEG
31262: PUSH
31263: LD_INT 3
31265: NEG
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 0
31273: PUSH
31274: LD_INT 3
31276: NEG
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 0
31284: PUSH
31285: LD_INT 4
31287: NEG
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: LD_INT 3
31298: NEG
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 1
31306: PUSH
31307: LD_INT 2
31309: NEG
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: LD_INT 2
31320: NEG
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 1
31328: NEG
31329: PUSH
31330: LD_INT 3
31332: NEG
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 1
31340: NEG
31341: PUSH
31342: LD_INT 4
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 2
31352: PUSH
31353: LD_INT 2
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 2
31363: NEG
31364: PUSH
31365: LD_INT 4
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 4
31375: PUSH
31376: LD_INT 0
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 4
31385: PUSH
31386: LD_INT 1
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 5
31396: PUSH
31397: LD_INT 0
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 5
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 4
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 3
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 3
31436: PUSH
31437: LD_INT 1
31439: NEG
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 3
31447: PUSH
31448: LD_INT 2
31450: NEG
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 5
31458: PUSH
31459: LD_INT 2
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31513: LD_ADDR_VAR 0 32
31517: PUSH
31518: LD_INT 4
31520: NEG
31521: PUSH
31522: LD_INT 0
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 4
31531: NEG
31532: PUSH
31533: LD_INT 1
31535: NEG
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 3
31543: NEG
31544: PUSH
31545: LD_INT 0
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 3
31554: NEG
31555: PUSH
31556: LD_INT 1
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 4
31565: NEG
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 5
31576: NEG
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 5
31587: NEG
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 5
31599: NEG
31600: PUSH
31601: LD_INT 2
31603: NEG
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 3
31611: NEG
31612: PUSH
31613: LD_INT 2
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 3
31622: NEG
31623: PUSH
31624: LD_INT 3
31626: NEG
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 3
31634: NEG
31635: PUSH
31636: LD_INT 4
31638: NEG
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 2
31646: NEG
31647: PUSH
31648: LD_INT 3
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 2
31658: NEG
31659: PUSH
31660: LD_INT 2
31662: NEG
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 3
31670: NEG
31671: PUSH
31672: LD_INT 2
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 4
31682: NEG
31683: PUSH
31684: LD_INT 3
31686: NEG
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 4
31694: NEG
31695: PUSH
31696: LD_INT 4
31698: NEG
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 2
31706: NEG
31707: PUSH
31708: LD_INT 4
31710: NEG
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 4
31718: NEG
31719: PUSH
31720: LD_INT 2
31722: NEG
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 0
31730: PUSH
31731: LD_INT 4
31733: NEG
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: LD_INT 5
31744: NEG
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 1
31752: PUSH
31753: LD_INT 4
31755: NEG
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 1
31763: PUSH
31764: LD_INT 3
31766: NEG
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 0
31774: PUSH
31775: LD_INT 3
31777: NEG
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 1
31785: NEG
31786: PUSH
31787: LD_INT 4
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 1
31797: NEG
31798: PUSH
31799: LD_INT 5
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 2
31809: PUSH
31810: LD_INT 3
31812: NEG
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 2
31820: NEG
31821: PUSH
31822: LD_INT 5
31824: NEG
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 3
31832: PUSH
31833: LD_INT 0
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 3
31842: PUSH
31843: LD_INT 1
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 4
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 4
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 3
31873: PUSH
31874: LD_INT 1
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 2
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 2
31904: PUSH
31905: LD_INT 2
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 4
31915: PUSH
31916: LD_INT 2
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 4
31925: PUSH
31926: LD_INT 4
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 4
31935: PUSH
31936: LD_INT 3
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 5
31945: PUSH
31946: LD_INT 4
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 5
31955: PUSH
31956: LD_INT 5
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 4
31965: PUSH
31966: LD_INT 5
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 3
31975: PUSH
31976: LD_INT 4
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 3
31985: PUSH
31986: LD_INT 3
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 5
31995: PUSH
31996: LD_INT 3
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 3
32005: PUSH
32006: LD_INT 5
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32060: LD_ADDR_VAR 0 33
32064: PUSH
32065: LD_INT 4
32067: NEG
32068: PUSH
32069: LD_INT 4
32071: NEG
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 4
32079: NEG
32080: PUSH
32081: LD_INT 5
32083: NEG
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 3
32091: NEG
32092: PUSH
32093: LD_INT 4
32095: NEG
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 3
32103: NEG
32104: PUSH
32105: LD_INT 3
32107: NEG
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 4
32115: NEG
32116: PUSH
32117: LD_INT 3
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 5
32127: NEG
32128: PUSH
32129: LD_INT 4
32131: NEG
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 5
32139: NEG
32140: PUSH
32141: LD_INT 5
32143: NEG
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 3
32151: NEG
32152: PUSH
32153: LD_INT 5
32155: NEG
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 5
32163: NEG
32164: PUSH
32165: LD_INT 3
32167: NEG
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: LD_INT 3
32178: NEG
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: LD_INT 4
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 1
32197: PUSH
32198: LD_INT 3
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: LD_INT 2
32211: NEG
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: LD_INT 2
32222: NEG
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 1
32230: NEG
32231: PUSH
32232: LD_INT 3
32234: NEG
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 1
32242: NEG
32243: PUSH
32244: LD_INT 4
32246: NEG
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 2
32254: PUSH
32255: LD_INT 2
32257: NEG
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 2
32265: NEG
32266: PUSH
32267: LD_INT 4
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 4
32277: PUSH
32278: LD_INT 0
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 4
32287: PUSH
32288: LD_INT 1
32290: NEG
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 5
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 5
32308: PUSH
32309: LD_INT 1
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 4
32318: PUSH
32319: LD_INT 1
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 3
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 3
32338: PUSH
32339: LD_INT 1
32341: NEG
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 3
32349: PUSH
32350: LD_INT 2
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 5
32360: PUSH
32361: LD_INT 2
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 3
32370: PUSH
32371: LD_INT 3
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 3
32380: PUSH
32381: LD_INT 2
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 4
32390: PUSH
32391: LD_INT 3
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 4
32400: PUSH
32401: LD_INT 4
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 3
32410: PUSH
32411: LD_INT 4
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 2
32420: PUSH
32421: LD_INT 3
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 2
32430: PUSH
32431: LD_INT 2
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 4
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: LD_INT 4
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: LD_INT 4
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: LD_INT 3
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: LD_INT 4
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: PUSH
32491: LD_INT 5
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 0
32500: PUSH
32501: LD_INT 5
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: NEG
32511: PUSH
32512: LD_INT 4
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 1
32521: NEG
32522: PUSH
32523: LD_INT 3
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 2
32532: PUSH
32533: LD_INT 5
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 2
32542: NEG
32543: PUSH
32544: LD_INT 3
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32598: LD_ADDR_VAR 0 34
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: LD_INT 4
32608: NEG
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: LD_INT 5
32619: NEG
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 1
32627: PUSH
32628: LD_INT 4
32630: NEG
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 1
32638: PUSH
32639: LD_INT 3
32641: NEG
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: LD_INT 3
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 1
32660: NEG
32661: PUSH
32662: LD_INT 4
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 1
32672: NEG
32673: PUSH
32674: LD_INT 5
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 2
32684: PUSH
32685: LD_INT 3
32687: NEG
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 2
32695: NEG
32696: PUSH
32697: LD_INT 5
32699: NEG
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 3
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 3
32717: PUSH
32718: LD_INT 1
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 4
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 4
32738: PUSH
32739: LD_INT 1
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 3
32748: PUSH
32749: LD_INT 1
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 2
32758: PUSH
32759: LD_INT 0
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 2
32768: PUSH
32769: LD_INT 1
32771: NEG
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 2
32779: PUSH
32780: LD_INT 2
32782: NEG
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 4
32790: PUSH
32791: LD_INT 2
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 4
32800: PUSH
32801: LD_INT 4
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 4
32810: PUSH
32811: LD_INT 3
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 5
32820: PUSH
32821: LD_INT 4
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 5
32830: PUSH
32831: LD_INT 5
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 4
32840: PUSH
32841: LD_INT 5
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 3
32850: PUSH
32851: LD_INT 4
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 3
32860: PUSH
32861: LD_INT 3
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 5
32870: PUSH
32871: LD_INT 3
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 3
32880: PUSH
32881: LD_INT 5
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 0
32890: PUSH
32891: LD_INT 3
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 0
32900: PUSH
32901: LD_INT 2
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 1
32910: PUSH
32911: LD_INT 3
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: LD_INT 4
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: LD_INT 4
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: PUSH
32942: LD_INT 3
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 1
32951: NEG
32952: PUSH
32953: LD_INT 2
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: LD_INT 4
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 2
32972: NEG
32973: PUSH
32974: LD_INT 2
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 4
32983: NEG
32984: PUSH
32985: LD_INT 0
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 4
32994: NEG
32995: PUSH
32996: LD_INT 1
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 3
33006: NEG
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 3
33017: NEG
33018: PUSH
33019: LD_INT 1
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 4
33028: NEG
33029: PUSH
33030: LD_INT 1
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 5
33039: NEG
33040: PUSH
33041: LD_INT 0
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 5
33050: NEG
33051: PUSH
33052: LD_INT 1
33054: NEG
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 5
33062: NEG
33063: PUSH
33064: LD_INT 2
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 3
33074: NEG
33075: PUSH
33076: LD_INT 2
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: ST_TO_ADDR
// end ; end ;
33130: GO 33133
33132: POP
// case btype of b_depot , b_warehouse :
33133: LD_VAR 0 1
33137: PUSH
33138: LD_INT 0
33140: DOUBLE
33141: EQUAL
33142: IFTRUE 33152
33144: LD_INT 1
33146: DOUBLE
33147: EQUAL
33148: IFTRUE 33152
33150: GO 33353
33152: POP
// case nation of nation_american :
33153: LD_VAR 0 5
33157: PUSH
33158: LD_INT 1
33160: DOUBLE
33161: EQUAL
33162: IFTRUE 33166
33164: GO 33222
33166: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33167: LD_ADDR_VAR 0 9
33171: PUSH
33172: LD_VAR 0 11
33176: PUSH
33177: LD_VAR 0 12
33181: PUSH
33182: LD_VAR 0 13
33186: PUSH
33187: LD_VAR 0 14
33191: PUSH
33192: LD_VAR 0 15
33196: PUSH
33197: LD_VAR 0 16
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: PUSH
33210: LD_VAR 0 4
33214: PUSH
33215: LD_INT 1
33217: PLUS
33218: ARRAY
33219: ST_TO_ADDR
33220: GO 33351
33222: LD_INT 2
33224: DOUBLE
33225: EQUAL
33226: IFTRUE 33230
33228: GO 33286
33230: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33231: LD_ADDR_VAR 0 9
33235: PUSH
33236: LD_VAR 0 17
33240: PUSH
33241: LD_VAR 0 18
33245: PUSH
33246: LD_VAR 0 19
33250: PUSH
33251: LD_VAR 0 20
33255: PUSH
33256: LD_VAR 0 21
33260: PUSH
33261: LD_VAR 0 22
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: PUSH
33274: LD_VAR 0 4
33278: PUSH
33279: LD_INT 1
33281: PLUS
33282: ARRAY
33283: ST_TO_ADDR
33284: GO 33351
33286: LD_INT 3
33288: DOUBLE
33289: EQUAL
33290: IFTRUE 33294
33292: GO 33350
33294: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33295: LD_ADDR_VAR 0 9
33299: PUSH
33300: LD_VAR 0 23
33304: PUSH
33305: LD_VAR 0 24
33309: PUSH
33310: LD_VAR 0 25
33314: PUSH
33315: LD_VAR 0 26
33319: PUSH
33320: LD_VAR 0 27
33324: PUSH
33325: LD_VAR 0 28
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: PUSH
33338: LD_VAR 0 4
33342: PUSH
33343: LD_INT 1
33345: PLUS
33346: ARRAY
33347: ST_TO_ADDR
33348: GO 33351
33350: POP
33351: GO 33906
33353: LD_INT 2
33355: DOUBLE
33356: EQUAL
33357: IFTRUE 33367
33359: LD_INT 3
33361: DOUBLE
33362: EQUAL
33363: IFTRUE 33367
33365: GO 33423
33367: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33368: LD_ADDR_VAR 0 9
33372: PUSH
33373: LD_VAR 0 29
33377: PUSH
33378: LD_VAR 0 30
33382: PUSH
33383: LD_VAR 0 31
33387: PUSH
33388: LD_VAR 0 32
33392: PUSH
33393: LD_VAR 0 33
33397: PUSH
33398: LD_VAR 0 34
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: PUSH
33411: LD_VAR 0 4
33415: PUSH
33416: LD_INT 1
33418: PLUS
33419: ARRAY
33420: ST_TO_ADDR
33421: GO 33906
33423: LD_INT 16
33425: DOUBLE
33426: EQUAL
33427: IFTRUE 33485
33429: LD_INT 17
33431: DOUBLE
33432: EQUAL
33433: IFTRUE 33485
33435: LD_INT 18
33437: DOUBLE
33438: EQUAL
33439: IFTRUE 33485
33441: LD_INT 19
33443: DOUBLE
33444: EQUAL
33445: IFTRUE 33485
33447: LD_INT 22
33449: DOUBLE
33450: EQUAL
33451: IFTRUE 33485
33453: LD_INT 20
33455: DOUBLE
33456: EQUAL
33457: IFTRUE 33485
33459: LD_INT 21
33461: DOUBLE
33462: EQUAL
33463: IFTRUE 33485
33465: LD_INT 23
33467: DOUBLE
33468: EQUAL
33469: IFTRUE 33485
33471: LD_INT 24
33473: DOUBLE
33474: EQUAL
33475: IFTRUE 33485
33477: LD_INT 25
33479: DOUBLE
33480: EQUAL
33481: IFTRUE 33485
33483: GO 33541
33485: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33486: LD_ADDR_VAR 0 9
33490: PUSH
33491: LD_VAR 0 35
33495: PUSH
33496: LD_VAR 0 36
33500: PUSH
33501: LD_VAR 0 37
33505: PUSH
33506: LD_VAR 0 38
33510: PUSH
33511: LD_VAR 0 39
33515: PUSH
33516: LD_VAR 0 40
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: PUSH
33529: LD_VAR 0 4
33533: PUSH
33534: LD_INT 1
33536: PLUS
33537: ARRAY
33538: ST_TO_ADDR
33539: GO 33906
33541: LD_INT 6
33543: DOUBLE
33544: EQUAL
33545: IFTRUE 33597
33547: LD_INT 7
33549: DOUBLE
33550: EQUAL
33551: IFTRUE 33597
33553: LD_INT 8
33555: DOUBLE
33556: EQUAL
33557: IFTRUE 33597
33559: LD_INT 13
33561: DOUBLE
33562: EQUAL
33563: IFTRUE 33597
33565: LD_INT 12
33567: DOUBLE
33568: EQUAL
33569: IFTRUE 33597
33571: LD_INT 15
33573: DOUBLE
33574: EQUAL
33575: IFTRUE 33597
33577: LD_INT 11
33579: DOUBLE
33580: EQUAL
33581: IFTRUE 33597
33583: LD_INT 14
33585: DOUBLE
33586: EQUAL
33587: IFTRUE 33597
33589: LD_INT 10
33591: DOUBLE
33592: EQUAL
33593: IFTRUE 33597
33595: GO 33653
33597: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33598: LD_ADDR_VAR 0 9
33602: PUSH
33603: LD_VAR 0 41
33607: PUSH
33608: LD_VAR 0 42
33612: PUSH
33613: LD_VAR 0 43
33617: PUSH
33618: LD_VAR 0 44
33622: PUSH
33623: LD_VAR 0 45
33627: PUSH
33628: LD_VAR 0 46
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: PUSH
33641: LD_VAR 0 4
33645: PUSH
33646: LD_INT 1
33648: PLUS
33649: ARRAY
33650: ST_TO_ADDR
33651: GO 33906
33653: LD_INT 36
33655: DOUBLE
33656: EQUAL
33657: IFTRUE 33661
33659: GO 33717
33661: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33662: LD_ADDR_VAR 0 9
33666: PUSH
33667: LD_VAR 0 47
33671: PUSH
33672: LD_VAR 0 48
33676: PUSH
33677: LD_VAR 0 49
33681: PUSH
33682: LD_VAR 0 50
33686: PUSH
33687: LD_VAR 0 51
33691: PUSH
33692: LD_VAR 0 52
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: PUSH
33705: LD_VAR 0 4
33709: PUSH
33710: LD_INT 1
33712: PLUS
33713: ARRAY
33714: ST_TO_ADDR
33715: GO 33906
33717: LD_INT 4
33719: DOUBLE
33720: EQUAL
33721: IFTRUE 33743
33723: LD_INT 5
33725: DOUBLE
33726: EQUAL
33727: IFTRUE 33743
33729: LD_INT 34
33731: DOUBLE
33732: EQUAL
33733: IFTRUE 33743
33735: LD_INT 37
33737: DOUBLE
33738: EQUAL
33739: IFTRUE 33743
33741: GO 33799
33743: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33744: LD_ADDR_VAR 0 9
33748: PUSH
33749: LD_VAR 0 53
33753: PUSH
33754: LD_VAR 0 54
33758: PUSH
33759: LD_VAR 0 55
33763: PUSH
33764: LD_VAR 0 56
33768: PUSH
33769: LD_VAR 0 57
33773: PUSH
33774: LD_VAR 0 58
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: PUSH
33787: LD_VAR 0 4
33791: PUSH
33792: LD_INT 1
33794: PLUS
33795: ARRAY
33796: ST_TO_ADDR
33797: GO 33906
33799: LD_INT 31
33801: DOUBLE
33802: EQUAL
33803: IFTRUE 33849
33805: LD_INT 32
33807: DOUBLE
33808: EQUAL
33809: IFTRUE 33849
33811: LD_INT 33
33813: DOUBLE
33814: EQUAL
33815: IFTRUE 33849
33817: LD_INT 27
33819: DOUBLE
33820: EQUAL
33821: IFTRUE 33849
33823: LD_INT 26
33825: DOUBLE
33826: EQUAL
33827: IFTRUE 33849
33829: LD_INT 28
33831: DOUBLE
33832: EQUAL
33833: IFTRUE 33849
33835: LD_INT 29
33837: DOUBLE
33838: EQUAL
33839: IFTRUE 33849
33841: LD_INT 30
33843: DOUBLE
33844: EQUAL
33845: IFTRUE 33849
33847: GO 33905
33849: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33850: LD_ADDR_VAR 0 9
33854: PUSH
33855: LD_VAR 0 59
33859: PUSH
33860: LD_VAR 0 60
33864: PUSH
33865: LD_VAR 0 61
33869: PUSH
33870: LD_VAR 0 62
33874: PUSH
33875: LD_VAR 0 63
33879: PUSH
33880: LD_VAR 0 64
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: PUSH
33893: LD_VAR 0 4
33897: PUSH
33898: LD_INT 1
33900: PLUS
33901: ARRAY
33902: ST_TO_ADDR
33903: GO 33906
33905: POP
// temp_list2 = [ ] ;
33906: LD_ADDR_VAR 0 10
33910: PUSH
33911: EMPTY
33912: ST_TO_ADDR
// for i in temp_list do
33913: LD_ADDR_VAR 0 8
33917: PUSH
33918: LD_VAR 0 9
33922: PUSH
33923: FOR_IN
33924: IFFALSE 33976
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33926: LD_ADDR_VAR 0 10
33930: PUSH
33931: LD_VAR 0 10
33935: PUSH
33936: LD_VAR 0 8
33940: PUSH
33941: LD_INT 1
33943: ARRAY
33944: PUSH
33945: LD_VAR 0 2
33949: PLUS
33950: PUSH
33951: LD_VAR 0 8
33955: PUSH
33956: LD_INT 2
33958: ARRAY
33959: PUSH
33960: LD_VAR 0 3
33964: PLUS
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: EMPTY
33971: LIST
33972: ADD
33973: ST_TO_ADDR
33974: GO 33923
33976: POP
33977: POP
// result = temp_list2 ;
33978: LD_ADDR_VAR 0 7
33982: PUSH
33983: LD_VAR 0 10
33987: ST_TO_ADDR
// end ;
33988: LD_VAR 0 7
33992: RET
// export function EnemyInRange ( unit , dist ) ; begin
33993: LD_INT 0
33995: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33996: LD_ADDR_VAR 0 3
34000: PUSH
34001: LD_VAR 0 1
34005: PPUSH
34006: CALL_OW 255
34010: PPUSH
34011: LD_VAR 0 1
34015: PPUSH
34016: CALL_OW 250
34020: PPUSH
34021: LD_VAR 0 1
34025: PPUSH
34026: CALL_OW 251
34030: PPUSH
34031: LD_VAR 0 2
34035: PPUSH
34036: CALL 7366 0 4
34040: PUSH
34041: LD_INT 4
34043: ARRAY
34044: ST_TO_ADDR
// end ;
34045: LD_VAR 0 3
34049: RET
// export function PlayerSeeMe ( unit ) ; begin
34050: LD_INT 0
34052: PPUSH
// result := See ( your_side , unit ) ;
34053: LD_ADDR_VAR 0 2
34057: PUSH
34058: LD_OWVAR 2
34062: PPUSH
34063: LD_VAR 0 1
34067: PPUSH
34068: CALL_OW 292
34072: ST_TO_ADDR
// end ;
34073: LD_VAR 0 2
34077: RET
// export function ReverseDir ( unit ) ; begin
34078: LD_INT 0
34080: PPUSH
// if not unit then
34081: LD_VAR 0 1
34085: NOT
34086: IFFALSE 34090
// exit ;
34088: GO 34113
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34090: LD_ADDR_VAR 0 2
34094: PUSH
34095: LD_VAR 0 1
34099: PPUSH
34100: CALL_OW 254
34104: PUSH
34105: LD_INT 3
34107: PLUS
34108: PUSH
34109: LD_INT 6
34111: MOD
34112: ST_TO_ADDR
// end ;
34113: LD_VAR 0 2
34117: RET
// export function ReverseArray ( array ) ; var i ; begin
34118: LD_INT 0
34120: PPUSH
34121: PPUSH
// if not array then
34122: LD_VAR 0 1
34126: NOT
34127: IFFALSE 34131
// exit ;
34129: GO 34186
// result := [ ] ;
34131: LD_ADDR_VAR 0 2
34135: PUSH
34136: EMPTY
34137: ST_TO_ADDR
// for i := array downto 1 do
34138: LD_ADDR_VAR 0 3
34142: PUSH
34143: DOUBLE
34144: LD_VAR 0 1
34148: INC
34149: ST_TO_ADDR
34150: LD_INT 1
34152: PUSH
34153: FOR_DOWNTO
34154: IFFALSE 34184
// result := Join ( result , array [ i ] ) ;
34156: LD_ADDR_VAR 0 2
34160: PUSH
34161: LD_VAR 0 2
34165: PPUSH
34166: LD_VAR 0 1
34170: PUSH
34171: LD_VAR 0 3
34175: ARRAY
34176: PPUSH
34177: CALL 38842 0 2
34181: ST_TO_ADDR
34182: GO 34153
34184: POP
34185: POP
// end ;
34186: LD_VAR 0 2
34190: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34191: LD_INT 0
34193: PPUSH
34194: PPUSH
34195: PPUSH
34196: PPUSH
34197: PPUSH
34198: PPUSH
// if not unit or not hexes then
34199: LD_VAR 0 1
34203: NOT
34204: PUSH
34205: LD_VAR 0 2
34209: NOT
34210: OR
34211: IFFALSE 34215
// exit ;
34213: GO 34338
// dist := 9999 ;
34215: LD_ADDR_VAR 0 5
34219: PUSH
34220: LD_INT 9999
34222: ST_TO_ADDR
// for i = 1 to hexes do
34223: LD_ADDR_VAR 0 4
34227: PUSH
34228: DOUBLE
34229: LD_INT 1
34231: DEC
34232: ST_TO_ADDR
34233: LD_VAR 0 2
34237: PUSH
34238: FOR_TO
34239: IFFALSE 34326
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34241: LD_ADDR_VAR 0 6
34245: PUSH
34246: LD_VAR 0 1
34250: PPUSH
34251: LD_VAR 0 2
34255: PUSH
34256: LD_VAR 0 4
34260: ARRAY
34261: PUSH
34262: LD_INT 1
34264: ARRAY
34265: PPUSH
34266: LD_VAR 0 2
34270: PUSH
34271: LD_VAR 0 4
34275: ARRAY
34276: PUSH
34277: LD_INT 2
34279: ARRAY
34280: PPUSH
34281: CALL_OW 297
34285: ST_TO_ADDR
// if tdist < dist then
34286: LD_VAR 0 6
34290: PUSH
34291: LD_VAR 0 5
34295: LESS
34296: IFFALSE 34324
// begin hex := hexes [ i ] ;
34298: LD_ADDR_VAR 0 8
34302: PUSH
34303: LD_VAR 0 2
34307: PUSH
34308: LD_VAR 0 4
34312: ARRAY
34313: ST_TO_ADDR
// dist := tdist ;
34314: LD_ADDR_VAR 0 5
34318: PUSH
34319: LD_VAR 0 6
34323: ST_TO_ADDR
// end ; end ;
34324: GO 34238
34326: POP
34327: POP
// result := hex ;
34328: LD_ADDR_VAR 0 3
34332: PUSH
34333: LD_VAR 0 8
34337: ST_TO_ADDR
// end ;
34338: LD_VAR 0 3
34342: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34343: LD_INT 0
34345: PPUSH
34346: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34347: LD_VAR 0 1
34351: NOT
34352: PUSH
34353: LD_VAR 0 1
34357: PUSH
34358: LD_INT 21
34360: PUSH
34361: LD_INT 2
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 23
34370: PUSH
34371: LD_INT 2
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PPUSH
34382: CALL_OW 69
34386: IN
34387: NOT
34388: OR
34389: IFFALSE 34393
// exit ;
34391: GO 34440
// for i = 1 to 3 do
34393: LD_ADDR_VAR 0 3
34397: PUSH
34398: DOUBLE
34399: LD_INT 1
34401: DEC
34402: ST_TO_ADDR
34403: LD_INT 3
34405: PUSH
34406: FOR_TO
34407: IFFALSE 34438
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34409: LD_VAR 0 1
34413: PPUSH
34414: CALL_OW 250
34418: PPUSH
34419: LD_VAR 0 1
34423: PPUSH
34424: CALL_OW 251
34428: PPUSH
34429: LD_INT 1
34431: PPUSH
34432: CALL_OW 453
34436: GO 34406
34438: POP
34439: POP
// end ;
34440: LD_VAR 0 2
34444: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34445: LD_INT 0
34447: PPUSH
34448: PPUSH
34449: PPUSH
34450: PPUSH
34451: PPUSH
34452: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34453: LD_VAR 0 1
34457: NOT
34458: PUSH
34459: LD_VAR 0 2
34463: NOT
34464: OR
34465: PUSH
34466: LD_VAR 0 1
34470: PPUSH
34471: CALL_OW 314
34475: OR
34476: IFFALSE 34480
// exit ;
34478: GO 34947
// if GetLives ( i ) < 250 then
34480: LD_VAR 0 4
34484: PPUSH
34485: CALL_OW 256
34489: PUSH
34490: LD_INT 250
34492: LESS
34493: IFFALSE 34506
// begin ComAutodestruct ( i ) ;
34495: LD_VAR 0 4
34499: PPUSH
34500: CALL 34343 0 1
// exit ;
34504: GO 34947
// end ; x := GetX ( enemy_unit ) ;
34506: LD_ADDR_VAR 0 7
34510: PUSH
34511: LD_VAR 0 2
34515: PPUSH
34516: CALL_OW 250
34520: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34521: LD_ADDR_VAR 0 8
34525: PUSH
34526: LD_VAR 0 2
34530: PPUSH
34531: CALL_OW 251
34535: ST_TO_ADDR
// if not x or not y then
34536: LD_VAR 0 7
34540: NOT
34541: PUSH
34542: LD_VAR 0 8
34546: NOT
34547: OR
34548: IFFALSE 34552
// exit ;
34550: GO 34947
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34552: LD_ADDR_VAR 0 6
34556: PUSH
34557: LD_VAR 0 7
34561: PPUSH
34562: LD_INT 0
34564: PPUSH
34565: LD_INT 4
34567: PPUSH
34568: CALL_OW 272
34572: PUSH
34573: LD_VAR 0 8
34577: PPUSH
34578: LD_INT 0
34580: PPUSH
34581: LD_INT 4
34583: PPUSH
34584: CALL_OW 273
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_VAR 0 7
34597: PPUSH
34598: LD_INT 1
34600: PPUSH
34601: LD_INT 4
34603: PPUSH
34604: CALL_OW 272
34608: PUSH
34609: LD_VAR 0 8
34613: PPUSH
34614: LD_INT 1
34616: PPUSH
34617: LD_INT 4
34619: PPUSH
34620: CALL_OW 273
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_VAR 0 7
34633: PPUSH
34634: LD_INT 2
34636: PPUSH
34637: LD_INT 4
34639: PPUSH
34640: CALL_OW 272
34644: PUSH
34645: LD_VAR 0 8
34649: PPUSH
34650: LD_INT 2
34652: PPUSH
34653: LD_INT 4
34655: PPUSH
34656: CALL_OW 273
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_VAR 0 7
34669: PPUSH
34670: LD_INT 3
34672: PPUSH
34673: LD_INT 4
34675: PPUSH
34676: CALL_OW 272
34680: PUSH
34681: LD_VAR 0 8
34685: PPUSH
34686: LD_INT 3
34688: PPUSH
34689: LD_INT 4
34691: PPUSH
34692: CALL_OW 273
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_VAR 0 7
34705: PPUSH
34706: LD_INT 4
34708: PPUSH
34709: LD_INT 4
34711: PPUSH
34712: CALL_OW 272
34716: PUSH
34717: LD_VAR 0 8
34721: PPUSH
34722: LD_INT 4
34724: PPUSH
34725: LD_INT 4
34727: PPUSH
34728: CALL_OW 273
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_VAR 0 7
34741: PPUSH
34742: LD_INT 5
34744: PPUSH
34745: LD_INT 4
34747: PPUSH
34748: CALL_OW 272
34752: PUSH
34753: LD_VAR 0 8
34757: PPUSH
34758: LD_INT 5
34760: PPUSH
34761: LD_INT 4
34763: PPUSH
34764: CALL_OW 273
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: ST_TO_ADDR
// for i = tmp downto 1 do
34781: LD_ADDR_VAR 0 4
34785: PUSH
34786: DOUBLE
34787: LD_VAR 0 6
34791: INC
34792: ST_TO_ADDR
34793: LD_INT 1
34795: PUSH
34796: FOR_DOWNTO
34797: IFFALSE 34898
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34799: LD_VAR 0 6
34803: PUSH
34804: LD_VAR 0 4
34808: ARRAY
34809: PUSH
34810: LD_INT 1
34812: ARRAY
34813: PPUSH
34814: LD_VAR 0 6
34818: PUSH
34819: LD_VAR 0 4
34823: ARRAY
34824: PUSH
34825: LD_INT 2
34827: ARRAY
34828: PPUSH
34829: CALL_OW 488
34833: NOT
34834: PUSH
34835: LD_VAR 0 6
34839: PUSH
34840: LD_VAR 0 4
34844: ARRAY
34845: PUSH
34846: LD_INT 1
34848: ARRAY
34849: PPUSH
34850: LD_VAR 0 6
34854: PUSH
34855: LD_VAR 0 4
34859: ARRAY
34860: PUSH
34861: LD_INT 2
34863: ARRAY
34864: PPUSH
34865: CALL_OW 428
34869: PUSH
34870: LD_INT 0
34872: NONEQUAL
34873: OR
34874: IFFALSE 34896
// tmp := Delete ( tmp , i ) ;
34876: LD_ADDR_VAR 0 6
34880: PUSH
34881: LD_VAR 0 6
34885: PPUSH
34886: LD_VAR 0 4
34890: PPUSH
34891: CALL_OW 3
34895: ST_TO_ADDR
34896: GO 34796
34898: POP
34899: POP
// j := GetClosestHex ( unit , tmp ) ;
34900: LD_ADDR_VAR 0 5
34904: PUSH
34905: LD_VAR 0 1
34909: PPUSH
34910: LD_VAR 0 6
34914: PPUSH
34915: CALL 34191 0 2
34919: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34920: LD_VAR 0 1
34924: PPUSH
34925: LD_VAR 0 5
34929: PUSH
34930: LD_INT 1
34932: ARRAY
34933: PPUSH
34934: LD_VAR 0 5
34938: PUSH
34939: LD_INT 2
34941: ARRAY
34942: PPUSH
34943: CALL_OW 111
// end ;
34947: LD_VAR 0 3
34951: RET
// export function PrepareApemanSoldier ( ) ; begin
34952: LD_INT 0
34954: PPUSH
// uc_nation := 0 ;
34955: LD_ADDR_OWVAR 21
34959: PUSH
34960: LD_INT 0
34962: ST_TO_ADDR
// hc_sex := sex_male ;
34963: LD_ADDR_OWVAR 27
34967: PUSH
34968: LD_INT 1
34970: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34971: LD_ADDR_OWVAR 28
34975: PUSH
34976: LD_INT 15
34978: ST_TO_ADDR
// hc_gallery :=  ;
34979: LD_ADDR_OWVAR 33
34983: PUSH
34984: LD_STRING 
34986: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34987: LD_ADDR_OWVAR 31
34991: PUSH
34992: LD_INT 0
34994: PPUSH
34995: LD_INT 3
34997: PPUSH
34998: CALL_OW 12
35002: PUSH
35003: LD_INT 0
35005: PPUSH
35006: LD_INT 3
35008: PPUSH
35009: CALL_OW 12
35013: PUSH
35014: LD_INT 0
35016: PUSH
35017: LD_INT 0
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: ST_TO_ADDR
// end ;
35026: LD_VAR 0 1
35030: RET
// export function PrepareApemanEngineer ( ) ; begin
35031: LD_INT 0
35033: PPUSH
// uc_nation := 0 ;
35034: LD_ADDR_OWVAR 21
35038: PUSH
35039: LD_INT 0
35041: ST_TO_ADDR
// hc_sex := sex_male ;
35042: LD_ADDR_OWVAR 27
35046: PUSH
35047: LD_INT 1
35049: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35050: LD_ADDR_OWVAR 28
35054: PUSH
35055: LD_INT 16
35057: ST_TO_ADDR
// hc_gallery :=  ;
35058: LD_ADDR_OWVAR 33
35062: PUSH
35063: LD_STRING 
35065: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35066: LD_ADDR_OWVAR 31
35070: PUSH
35071: LD_INT 0
35073: PPUSH
35074: LD_INT 3
35076: PPUSH
35077: CALL_OW 12
35081: PUSH
35082: LD_INT 0
35084: PPUSH
35085: LD_INT 3
35087: PPUSH
35088: CALL_OW 12
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: ST_TO_ADDR
// end ;
35105: LD_VAR 0 1
35109: RET
// export function PrepareApeman ( agressivity ) ; begin
35110: LD_INT 0
35112: PPUSH
// uc_side := 0 ;
35113: LD_ADDR_OWVAR 20
35117: PUSH
35118: LD_INT 0
35120: ST_TO_ADDR
// uc_nation := 0 ;
35121: LD_ADDR_OWVAR 21
35125: PUSH
35126: LD_INT 0
35128: ST_TO_ADDR
// hc_sex := sex_male ;
35129: LD_ADDR_OWVAR 27
35133: PUSH
35134: LD_INT 1
35136: ST_TO_ADDR
// hc_class := class_apeman ;
35137: LD_ADDR_OWVAR 28
35141: PUSH
35142: LD_INT 12
35144: ST_TO_ADDR
// hc_gallery :=  ;
35145: LD_ADDR_OWVAR 33
35149: PUSH
35150: LD_STRING 
35152: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35153: LD_ADDR_OWVAR 35
35157: PUSH
35158: LD_VAR 0 1
35162: NEG
35163: PPUSH
35164: LD_VAR 0 1
35168: PPUSH
35169: CALL_OW 12
35173: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35174: LD_ADDR_OWVAR 31
35178: PUSH
35179: LD_INT 0
35181: PPUSH
35182: LD_INT 3
35184: PPUSH
35185: CALL_OW 12
35189: PUSH
35190: LD_INT 0
35192: PPUSH
35193: LD_INT 3
35195: PPUSH
35196: CALL_OW 12
35200: PUSH
35201: LD_INT 0
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: ST_TO_ADDR
// end ;
35213: LD_VAR 0 2
35217: RET
// export function PrepareTiger ( agressivity ) ; begin
35218: LD_INT 0
35220: PPUSH
// uc_side := 0 ;
35221: LD_ADDR_OWVAR 20
35225: PUSH
35226: LD_INT 0
35228: ST_TO_ADDR
// uc_nation := 0 ;
35229: LD_ADDR_OWVAR 21
35233: PUSH
35234: LD_INT 0
35236: ST_TO_ADDR
// hc_class := class_tiger ;
35237: LD_ADDR_OWVAR 28
35241: PUSH
35242: LD_INT 14
35244: ST_TO_ADDR
// hc_gallery :=  ;
35245: LD_ADDR_OWVAR 33
35249: PUSH
35250: LD_STRING 
35252: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35253: LD_ADDR_OWVAR 35
35257: PUSH
35258: LD_VAR 0 1
35262: NEG
35263: PPUSH
35264: LD_VAR 0 1
35268: PPUSH
35269: CALL_OW 12
35273: ST_TO_ADDR
// end ;
35274: LD_VAR 0 2
35278: RET
// export function PrepareEnchidna ( ) ; begin
35279: LD_INT 0
35281: PPUSH
// uc_side := 0 ;
35282: LD_ADDR_OWVAR 20
35286: PUSH
35287: LD_INT 0
35289: ST_TO_ADDR
// uc_nation := 0 ;
35290: LD_ADDR_OWVAR 21
35294: PUSH
35295: LD_INT 0
35297: ST_TO_ADDR
// hc_class := class_baggie ;
35298: LD_ADDR_OWVAR 28
35302: PUSH
35303: LD_INT 13
35305: ST_TO_ADDR
// hc_gallery :=  ;
35306: LD_ADDR_OWVAR 33
35310: PUSH
35311: LD_STRING 
35313: ST_TO_ADDR
// end ;
35314: LD_VAR 0 1
35318: RET
// export function PrepareFrog ( ) ; begin
35319: LD_INT 0
35321: PPUSH
// uc_side := 0 ;
35322: LD_ADDR_OWVAR 20
35326: PUSH
35327: LD_INT 0
35329: ST_TO_ADDR
// uc_nation := 0 ;
35330: LD_ADDR_OWVAR 21
35334: PUSH
35335: LD_INT 0
35337: ST_TO_ADDR
// hc_class := class_frog ;
35338: LD_ADDR_OWVAR 28
35342: PUSH
35343: LD_INT 19
35345: ST_TO_ADDR
// hc_gallery :=  ;
35346: LD_ADDR_OWVAR 33
35350: PUSH
35351: LD_STRING 
35353: ST_TO_ADDR
// end ;
35354: LD_VAR 0 1
35358: RET
// export function PrepareFish ( ) ; begin
35359: LD_INT 0
35361: PPUSH
// uc_side := 0 ;
35362: LD_ADDR_OWVAR 20
35366: PUSH
35367: LD_INT 0
35369: ST_TO_ADDR
// uc_nation := 0 ;
35370: LD_ADDR_OWVAR 21
35374: PUSH
35375: LD_INT 0
35377: ST_TO_ADDR
// hc_class := class_fish ;
35378: LD_ADDR_OWVAR 28
35382: PUSH
35383: LD_INT 20
35385: ST_TO_ADDR
// hc_gallery :=  ;
35386: LD_ADDR_OWVAR 33
35390: PUSH
35391: LD_STRING 
35393: ST_TO_ADDR
// end ;
35394: LD_VAR 0 1
35398: RET
// export function PrepareBird ( ) ; begin
35399: LD_INT 0
35401: PPUSH
// uc_side := 0 ;
35402: LD_ADDR_OWVAR 20
35406: PUSH
35407: LD_INT 0
35409: ST_TO_ADDR
// uc_nation := 0 ;
35410: LD_ADDR_OWVAR 21
35414: PUSH
35415: LD_INT 0
35417: ST_TO_ADDR
// hc_class := class_phororhacos ;
35418: LD_ADDR_OWVAR 28
35422: PUSH
35423: LD_INT 18
35425: ST_TO_ADDR
// hc_gallery :=  ;
35426: LD_ADDR_OWVAR 33
35430: PUSH
35431: LD_STRING 
35433: ST_TO_ADDR
// end ;
35434: LD_VAR 0 1
35438: RET
// export function PrepareHorse ( ) ; begin
35439: LD_INT 0
35441: PPUSH
// uc_side := 0 ;
35442: LD_ADDR_OWVAR 20
35446: PUSH
35447: LD_INT 0
35449: ST_TO_ADDR
// uc_nation := 0 ;
35450: LD_ADDR_OWVAR 21
35454: PUSH
35455: LD_INT 0
35457: ST_TO_ADDR
// hc_class := class_horse ;
35458: LD_ADDR_OWVAR 28
35462: PUSH
35463: LD_INT 21
35465: ST_TO_ADDR
// hc_gallery :=  ;
35466: LD_ADDR_OWVAR 33
35470: PUSH
35471: LD_STRING 
35473: ST_TO_ADDR
// end ;
35474: LD_VAR 0 1
35478: RET
// export function PrepareMastodont ( ) ; begin
35479: LD_INT 0
35481: PPUSH
// uc_side := 0 ;
35482: LD_ADDR_OWVAR 20
35486: PUSH
35487: LD_INT 0
35489: ST_TO_ADDR
// uc_nation := 0 ;
35490: LD_ADDR_OWVAR 21
35494: PUSH
35495: LD_INT 0
35497: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35498: LD_ADDR_OWVAR 37
35502: PUSH
35503: LD_INT 31
35505: ST_TO_ADDR
// vc_control := control_rider ;
35506: LD_ADDR_OWVAR 38
35510: PUSH
35511: LD_INT 4
35513: ST_TO_ADDR
// end ;
35514: LD_VAR 0 1
35518: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35519: LD_INT 0
35521: PPUSH
35522: PPUSH
35523: PPUSH
// uc_side = 0 ;
35524: LD_ADDR_OWVAR 20
35528: PUSH
35529: LD_INT 0
35531: ST_TO_ADDR
// uc_nation = 0 ;
35532: LD_ADDR_OWVAR 21
35536: PUSH
35537: LD_INT 0
35539: ST_TO_ADDR
// InitHc_All ( ) ;
35540: CALL_OW 584
// InitVc ;
35544: CALL_OW 20
// if mastodonts then
35548: LD_VAR 0 6
35552: IFFALSE 35619
// for i = 1 to mastodonts do
35554: LD_ADDR_VAR 0 11
35558: PUSH
35559: DOUBLE
35560: LD_INT 1
35562: DEC
35563: ST_TO_ADDR
35564: LD_VAR 0 6
35568: PUSH
35569: FOR_TO
35570: IFFALSE 35617
// begin vc_chassis := 31 ;
35572: LD_ADDR_OWVAR 37
35576: PUSH
35577: LD_INT 31
35579: ST_TO_ADDR
// vc_control := control_rider ;
35580: LD_ADDR_OWVAR 38
35584: PUSH
35585: LD_INT 4
35587: ST_TO_ADDR
// animal := CreateVehicle ;
35588: LD_ADDR_VAR 0 12
35592: PUSH
35593: CALL_OW 45
35597: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35598: LD_VAR 0 12
35602: PPUSH
35603: LD_VAR 0 8
35607: PPUSH
35608: LD_INT 0
35610: PPUSH
35611: CALL 37747 0 3
// end ;
35615: GO 35569
35617: POP
35618: POP
// if horses then
35619: LD_VAR 0 5
35623: IFFALSE 35690
// for i = 1 to horses do
35625: LD_ADDR_VAR 0 11
35629: PUSH
35630: DOUBLE
35631: LD_INT 1
35633: DEC
35634: ST_TO_ADDR
35635: LD_VAR 0 5
35639: PUSH
35640: FOR_TO
35641: IFFALSE 35688
// begin hc_class := 21 ;
35643: LD_ADDR_OWVAR 28
35647: PUSH
35648: LD_INT 21
35650: ST_TO_ADDR
// hc_gallery :=  ;
35651: LD_ADDR_OWVAR 33
35655: PUSH
35656: LD_STRING 
35658: ST_TO_ADDR
// animal := CreateHuman ;
35659: LD_ADDR_VAR 0 12
35663: PUSH
35664: CALL_OW 44
35668: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35669: LD_VAR 0 12
35673: PPUSH
35674: LD_VAR 0 8
35678: PPUSH
35679: LD_INT 0
35681: PPUSH
35682: CALL 37747 0 3
// end ;
35686: GO 35640
35688: POP
35689: POP
// if birds then
35690: LD_VAR 0 1
35694: IFFALSE 35761
// for i = 1 to birds do
35696: LD_ADDR_VAR 0 11
35700: PUSH
35701: DOUBLE
35702: LD_INT 1
35704: DEC
35705: ST_TO_ADDR
35706: LD_VAR 0 1
35710: PUSH
35711: FOR_TO
35712: IFFALSE 35759
// begin hc_class := 18 ;
35714: LD_ADDR_OWVAR 28
35718: PUSH
35719: LD_INT 18
35721: ST_TO_ADDR
// hc_gallery =  ;
35722: LD_ADDR_OWVAR 33
35726: PUSH
35727: LD_STRING 
35729: ST_TO_ADDR
// animal := CreateHuman ;
35730: LD_ADDR_VAR 0 12
35734: PUSH
35735: CALL_OW 44
35739: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35740: LD_VAR 0 12
35744: PPUSH
35745: LD_VAR 0 8
35749: PPUSH
35750: LD_INT 0
35752: PPUSH
35753: CALL 37747 0 3
// end ;
35757: GO 35711
35759: POP
35760: POP
// if tigers then
35761: LD_VAR 0 2
35765: IFFALSE 35849
// for i = 1 to tigers do
35767: LD_ADDR_VAR 0 11
35771: PUSH
35772: DOUBLE
35773: LD_INT 1
35775: DEC
35776: ST_TO_ADDR
35777: LD_VAR 0 2
35781: PUSH
35782: FOR_TO
35783: IFFALSE 35847
// begin hc_class = class_tiger ;
35785: LD_ADDR_OWVAR 28
35789: PUSH
35790: LD_INT 14
35792: ST_TO_ADDR
// hc_gallery =  ;
35793: LD_ADDR_OWVAR 33
35797: PUSH
35798: LD_STRING 
35800: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35801: LD_ADDR_OWVAR 35
35805: PUSH
35806: LD_INT 7
35808: NEG
35809: PPUSH
35810: LD_INT 7
35812: PPUSH
35813: CALL_OW 12
35817: ST_TO_ADDR
// animal := CreateHuman ;
35818: LD_ADDR_VAR 0 12
35822: PUSH
35823: CALL_OW 44
35827: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35828: LD_VAR 0 12
35832: PPUSH
35833: LD_VAR 0 8
35837: PPUSH
35838: LD_INT 0
35840: PPUSH
35841: CALL 37747 0 3
// end ;
35845: GO 35782
35847: POP
35848: POP
// if apemans then
35849: LD_VAR 0 3
35853: IFFALSE 35976
// for i = 1 to apemans do
35855: LD_ADDR_VAR 0 11
35859: PUSH
35860: DOUBLE
35861: LD_INT 1
35863: DEC
35864: ST_TO_ADDR
35865: LD_VAR 0 3
35869: PUSH
35870: FOR_TO
35871: IFFALSE 35974
// begin hc_class = class_apeman ;
35873: LD_ADDR_OWVAR 28
35877: PUSH
35878: LD_INT 12
35880: ST_TO_ADDR
// hc_gallery =  ;
35881: LD_ADDR_OWVAR 33
35885: PUSH
35886: LD_STRING 
35888: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35889: LD_ADDR_OWVAR 35
35893: PUSH
35894: LD_INT 2
35896: NEG
35897: PPUSH
35898: LD_INT 2
35900: PPUSH
35901: CALL_OW 12
35905: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35906: LD_ADDR_OWVAR 31
35910: PUSH
35911: LD_INT 1
35913: PPUSH
35914: LD_INT 3
35916: PPUSH
35917: CALL_OW 12
35921: PUSH
35922: LD_INT 1
35924: PPUSH
35925: LD_INT 3
35927: PPUSH
35928: CALL_OW 12
35932: PUSH
35933: LD_INT 0
35935: PUSH
35936: LD_INT 0
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: ST_TO_ADDR
// animal := CreateHuman ;
35945: LD_ADDR_VAR 0 12
35949: PUSH
35950: CALL_OW 44
35954: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35955: LD_VAR 0 12
35959: PPUSH
35960: LD_VAR 0 8
35964: PPUSH
35965: LD_INT 0
35967: PPUSH
35968: CALL 37747 0 3
// end ;
35972: GO 35870
35974: POP
35975: POP
// if enchidnas then
35976: LD_VAR 0 4
35980: IFFALSE 36047
// for i = 1 to enchidnas do
35982: LD_ADDR_VAR 0 11
35986: PUSH
35987: DOUBLE
35988: LD_INT 1
35990: DEC
35991: ST_TO_ADDR
35992: LD_VAR 0 4
35996: PUSH
35997: FOR_TO
35998: IFFALSE 36045
// begin hc_class = 13 ;
36000: LD_ADDR_OWVAR 28
36004: PUSH
36005: LD_INT 13
36007: ST_TO_ADDR
// hc_gallery =  ;
36008: LD_ADDR_OWVAR 33
36012: PUSH
36013: LD_STRING 
36015: ST_TO_ADDR
// animal := CreateHuman ;
36016: LD_ADDR_VAR 0 12
36020: PUSH
36021: CALL_OW 44
36025: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36026: LD_VAR 0 12
36030: PPUSH
36031: LD_VAR 0 8
36035: PPUSH
36036: LD_INT 0
36038: PPUSH
36039: CALL 37747 0 3
// end ;
36043: GO 35997
36045: POP
36046: POP
// if fishes then
36047: LD_VAR 0 7
36051: IFFALSE 36118
// for i = 1 to fishes do
36053: LD_ADDR_VAR 0 11
36057: PUSH
36058: DOUBLE
36059: LD_INT 1
36061: DEC
36062: ST_TO_ADDR
36063: LD_VAR 0 7
36067: PUSH
36068: FOR_TO
36069: IFFALSE 36116
// begin hc_class = 20 ;
36071: LD_ADDR_OWVAR 28
36075: PUSH
36076: LD_INT 20
36078: ST_TO_ADDR
// hc_gallery =  ;
36079: LD_ADDR_OWVAR 33
36083: PUSH
36084: LD_STRING 
36086: ST_TO_ADDR
// animal := CreateHuman ;
36087: LD_ADDR_VAR 0 12
36091: PUSH
36092: CALL_OW 44
36096: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36097: LD_VAR 0 12
36101: PPUSH
36102: LD_VAR 0 9
36106: PPUSH
36107: LD_INT 0
36109: PPUSH
36110: CALL 37747 0 3
// end ;
36114: GO 36068
36116: POP
36117: POP
// end ;
36118: LD_VAR 0 10
36122: RET
// export function WantHeal ( sci , unit ) ; begin
36123: LD_INT 0
36125: PPUSH
// if GetTaskList ( sci ) > 0 then
36126: LD_VAR 0 1
36130: PPUSH
36131: CALL_OW 437
36135: PUSH
36136: LD_INT 0
36138: GREATER
36139: IFFALSE 36209
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36141: LD_VAR 0 1
36145: PPUSH
36146: CALL_OW 437
36150: PUSH
36151: LD_INT 1
36153: ARRAY
36154: PUSH
36155: LD_INT 1
36157: ARRAY
36158: PUSH
36159: LD_STRING l
36161: EQUAL
36162: PUSH
36163: LD_VAR 0 1
36167: PPUSH
36168: CALL_OW 437
36172: PUSH
36173: LD_INT 1
36175: ARRAY
36176: PUSH
36177: LD_INT 4
36179: ARRAY
36180: PUSH
36181: LD_VAR 0 2
36185: EQUAL
36186: AND
36187: IFFALSE 36199
// result := true else
36189: LD_ADDR_VAR 0 3
36193: PUSH
36194: LD_INT 1
36196: ST_TO_ADDR
36197: GO 36207
// result := false ;
36199: LD_ADDR_VAR 0 3
36203: PUSH
36204: LD_INT 0
36206: ST_TO_ADDR
// end else
36207: GO 36217
// result := false ;
36209: LD_ADDR_VAR 0 3
36213: PUSH
36214: LD_INT 0
36216: ST_TO_ADDR
// end ;
36217: LD_VAR 0 3
36221: RET
// export function HealTarget ( sci ) ; begin
36222: LD_INT 0
36224: PPUSH
// if not sci then
36225: LD_VAR 0 1
36229: NOT
36230: IFFALSE 36234
// exit ;
36232: GO 36299
// result := 0 ;
36234: LD_ADDR_VAR 0 2
36238: PUSH
36239: LD_INT 0
36241: ST_TO_ADDR
// if GetTaskList ( sci ) then
36242: LD_VAR 0 1
36246: PPUSH
36247: CALL_OW 437
36251: IFFALSE 36299
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36253: LD_VAR 0 1
36257: PPUSH
36258: CALL_OW 437
36262: PUSH
36263: LD_INT 1
36265: ARRAY
36266: PUSH
36267: LD_INT 1
36269: ARRAY
36270: PUSH
36271: LD_STRING l
36273: EQUAL
36274: IFFALSE 36299
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36276: LD_ADDR_VAR 0 2
36280: PUSH
36281: LD_VAR 0 1
36285: PPUSH
36286: CALL_OW 437
36290: PUSH
36291: LD_INT 1
36293: ARRAY
36294: PUSH
36295: LD_INT 4
36297: ARRAY
36298: ST_TO_ADDR
// end ;
36299: LD_VAR 0 2
36303: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36304: LD_INT 0
36306: PPUSH
36307: PPUSH
36308: PPUSH
36309: PPUSH
// if not base_units then
36310: LD_VAR 0 1
36314: NOT
36315: IFFALSE 36319
// exit ;
36317: GO 36406
// result := false ;
36319: LD_ADDR_VAR 0 2
36323: PUSH
36324: LD_INT 0
36326: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36327: LD_ADDR_VAR 0 5
36331: PUSH
36332: LD_VAR 0 1
36336: PPUSH
36337: LD_INT 21
36339: PUSH
36340: LD_INT 3
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PPUSH
36347: CALL_OW 72
36351: ST_TO_ADDR
// if not tmp then
36352: LD_VAR 0 5
36356: NOT
36357: IFFALSE 36361
// exit ;
36359: GO 36406
// for i in tmp do
36361: LD_ADDR_VAR 0 3
36365: PUSH
36366: LD_VAR 0 5
36370: PUSH
36371: FOR_IN
36372: IFFALSE 36404
// begin result := EnemyInRange ( i , 22 ) ;
36374: LD_ADDR_VAR 0 2
36378: PUSH
36379: LD_VAR 0 3
36383: PPUSH
36384: LD_INT 22
36386: PPUSH
36387: CALL 33993 0 2
36391: ST_TO_ADDR
// if result then
36392: LD_VAR 0 2
36396: IFFALSE 36402
// exit ;
36398: POP
36399: POP
36400: GO 36406
// end ;
36402: GO 36371
36404: POP
36405: POP
// end ;
36406: LD_VAR 0 2
36410: RET
// export function FilterByTag ( units , tag ) ; begin
36411: LD_INT 0
36413: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36414: LD_ADDR_VAR 0 3
36418: PUSH
36419: LD_VAR 0 1
36423: PPUSH
36424: LD_INT 120
36426: PUSH
36427: LD_VAR 0 2
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PPUSH
36436: CALL_OW 72
36440: ST_TO_ADDR
// end ;
36441: LD_VAR 0 3
36445: RET
// export function IsDriver ( un ) ; begin
36446: LD_INT 0
36448: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36449: LD_ADDR_VAR 0 2
36453: PUSH
36454: LD_VAR 0 1
36458: PUSH
36459: LD_INT 55
36461: PUSH
36462: EMPTY
36463: LIST
36464: PPUSH
36465: CALL_OW 69
36469: IN
36470: ST_TO_ADDR
// end ;
36471: LD_VAR 0 2
36475: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36476: LD_INT 0
36478: PPUSH
36479: PPUSH
// list := [ ] ;
36480: LD_ADDR_VAR 0 5
36484: PUSH
36485: EMPTY
36486: ST_TO_ADDR
// case d of 0 :
36487: LD_VAR 0 3
36491: PUSH
36492: LD_INT 0
36494: DOUBLE
36495: EQUAL
36496: IFTRUE 36500
36498: GO 36633
36500: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36501: LD_ADDR_VAR 0 5
36505: PUSH
36506: LD_VAR 0 1
36510: PUSH
36511: LD_INT 4
36513: MINUS
36514: PUSH
36515: LD_VAR 0 2
36519: PUSH
36520: LD_INT 4
36522: MINUS
36523: PUSH
36524: LD_INT 2
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: LIST
36531: PUSH
36532: LD_VAR 0 1
36536: PUSH
36537: LD_INT 3
36539: MINUS
36540: PUSH
36541: LD_VAR 0 2
36545: PUSH
36546: LD_INT 1
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: LIST
36553: PUSH
36554: LD_VAR 0 1
36558: PUSH
36559: LD_INT 4
36561: PLUS
36562: PUSH
36563: LD_VAR 0 2
36567: PUSH
36568: LD_INT 4
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: LIST
36575: PUSH
36576: LD_VAR 0 1
36580: PUSH
36581: LD_INT 3
36583: PLUS
36584: PUSH
36585: LD_VAR 0 2
36589: PUSH
36590: LD_INT 3
36592: PLUS
36593: PUSH
36594: LD_INT 5
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: LIST
36601: PUSH
36602: LD_VAR 0 1
36606: PUSH
36607: LD_VAR 0 2
36611: PUSH
36612: LD_INT 4
36614: PLUS
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: LIST
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: ST_TO_ADDR
// end ; 1 :
36631: GO 37331
36633: LD_INT 1
36635: DOUBLE
36636: EQUAL
36637: IFTRUE 36641
36639: GO 36774
36641: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36642: LD_ADDR_VAR 0 5
36646: PUSH
36647: LD_VAR 0 1
36651: PUSH
36652: LD_VAR 0 2
36656: PUSH
36657: LD_INT 4
36659: MINUS
36660: PUSH
36661: LD_INT 3
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: LIST
36668: PUSH
36669: LD_VAR 0 1
36673: PUSH
36674: LD_INT 3
36676: MINUS
36677: PUSH
36678: LD_VAR 0 2
36682: PUSH
36683: LD_INT 3
36685: MINUS
36686: PUSH
36687: LD_INT 2
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: LIST
36694: PUSH
36695: LD_VAR 0 1
36699: PUSH
36700: LD_INT 4
36702: MINUS
36703: PUSH
36704: LD_VAR 0 2
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: LIST
36716: PUSH
36717: LD_VAR 0 1
36721: PUSH
36722: LD_VAR 0 2
36726: PUSH
36727: LD_INT 3
36729: PLUS
36730: PUSH
36731: LD_INT 0
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: LIST
36738: PUSH
36739: LD_VAR 0 1
36743: PUSH
36744: LD_INT 4
36746: PLUS
36747: PUSH
36748: LD_VAR 0 2
36752: PUSH
36753: LD_INT 4
36755: PLUS
36756: PUSH
36757: LD_INT 5
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: LIST
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: ST_TO_ADDR
// end ; 2 :
36772: GO 37331
36774: LD_INT 2
36776: DOUBLE
36777: EQUAL
36778: IFTRUE 36782
36780: GO 36911
36782: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36783: LD_ADDR_VAR 0 5
36787: PUSH
36788: LD_VAR 0 1
36792: PUSH
36793: LD_VAR 0 2
36797: PUSH
36798: LD_INT 3
36800: MINUS
36801: PUSH
36802: LD_INT 3
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: LIST
36809: PUSH
36810: LD_VAR 0 1
36814: PUSH
36815: LD_INT 4
36817: PLUS
36818: PUSH
36819: LD_VAR 0 2
36823: PUSH
36824: LD_INT 4
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: PUSH
36832: LD_VAR 0 1
36836: PUSH
36837: LD_VAR 0 2
36841: PUSH
36842: LD_INT 4
36844: PLUS
36845: PUSH
36846: LD_INT 0
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: LIST
36853: PUSH
36854: LD_VAR 0 1
36858: PUSH
36859: LD_INT 3
36861: MINUS
36862: PUSH
36863: LD_VAR 0 2
36867: PUSH
36868: LD_INT 1
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: LIST
36875: PUSH
36876: LD_VAR 0 1
36880: PUSH
36881: LD_INT 4
36883: MINUS
36884: PUSH
36885: LD_VAR 0 2
36889: PUSH
36890: LD_INT 4
36892: MINUS
36893: PUSH
36894: LD_INT 2
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: LIST
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: ST_TO_ADDR
// end ; 3 :
36909: GO 37331
36911: LD_INT 3
36913: DOUBLE
36914: EQUAL
36915: IFTRUE 36919
36917: GO 37052
36919: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36920: LD_ADDR_VAR 0 5
36924: PUSH
36925: LD_VAR 0 1
36929: PUSH
36930: LD_INT 3
36932: PLUS
36933: PUSH
36934: LD_VAR 0 2
36938: PUSH
36939: LD_INT 4
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: LIST
36946: PUSH
36947: LD_VAR 0 1
36951: PUSH
36952: LD_INT 4
36954: PLUS
36955: PUSH
36956: LD_VAR 0 2
36960: PUSH
36961: LD_INT 4
36963: PLUS
36964: PUSH
36965: LD_INT 5
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: LIST
36972: PUSH
36973: LD_VAR 0 1
36977: PUSH
36978: LD_INT 4
36980: MINUS
36981: PUSH
36982: LD_VAR 0 2
36986: PUSH
36987: LD_INT 1
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: LIST
36994: PUSH
36995: LD_VAR 0 1
36999: PUSH
37000: LD_VAR 0 2
37004: PUSH
37005: LD_INT 4
37007: MINUS
37008: PUSH
37009: LD_INT 3
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: LIST
37016: PUSH
37017: LD_VAR 0 1
37021: PUSH
37022: LD_INT 3
37024: MINUS
37025: PUSH
37026: LD_VAR 0 2
37030: PUSH
37031: LD_INT 3
37033: MINUS
37034: PUSH
37035: LD_INT 2
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: LIST
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: ST_TO_ADDR
// end ; 4 :
37050: GO 37331
37052: LD_INT 4
37054: DOUBLE
37055: EQUAL
37056: IFTRUE 37060
37058: GO 37193
37060: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37061: LD_ADDR_VAR 0 5
37065: PUSH
37066: LD_VAR 0 1
37070: PUSH
37071: LD_VAR 0 2
37075: PUSH
37076: LD_INT 4
37078: PLUS
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: LIST
37087: PUSH
37088: LD_VAR 0 1
37092: PUSH
37093: LD_INT 3
37095: PLUS
37096: PUSH
37097: LD_VAR 0 2
37101: PUSH
37102: LD_INT 3
37104: PLUS
37105: PUSH
37106: LD_INT 5
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: LIST
37113: PUSH
37114: LD_VAR 0 1
37118: PUSH
37119: LD_INT 4
37121: PLUS
37122: PUSH
37123: LD_VAR 0 2
37127: PUSH
37128: LD_INT 4
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: PUSH
37136: LD_VAR 0 1
37140: PUSH
37141: LD_VAR 0 2
37145: PUSH
37146: LD_INT 3
37148: MINUS
37149: PUSH
37150: LD_INT 3
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: LIST
37157: PUSH
37158: LD_VAR 0 1
37162: PUSH
37163: LD_INT 4
37165: MINUS
37166: PUSH
37167: LD_VAR 0 2
37171: PUSH
37172: LD_INT 4
37174: MINUS
37175: PUSH
37176: LD_INT 2
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: LIST
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: ST_TO_ADDR
// end ; 5 :
37191: GO 37331
37193: LD_INT 5
37195: DOUBLE
37196: EQUAL
37197: IFTRUE 37201
37199: GO 37330
37201: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37202: LD_ADDR_VAR 0 5
37206: PUSH
37207: LD_VAR 0 1
37211: PUSH
37212: LD_INT 4
37214: MINUS
37215: PUSH
37216: LD_VAR 0 2
37220: PUSH
37221: LD_INT 1
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: LIST
37228: PUSH
37229: LD_VAR 0 1
37233: PUSH
37234: LD_VAR 0 2
37238: PUSH
37239: LD_INT 4
37241: MINUS
37242: PUSH
37243: LD_INT 3
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: LIST
37250: PUSH
37251: LD_VAR 0 1
37255: PUSH
37256: LD_INT 4
37258: PLUS
37259: PUSH
37260: LD_VAR 0 2
37264: PUSH
37265: LD_INT 4
37267: PLUS
37268: PUSH
37269: LD_INT 5
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: LIST
37276: PUSH
37277: LD_VAR 0 1
37281: PUSH
37282: LD_INT 3
37284: PLUS
37285: PUSH
37286: LD_VAR 0 2
37290: PUSH
37291: LD_INT 4
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: LIST
37298: PUSH
37299: LD_VAR 0 1
37303: PUSH
37304: LD_VAR 0 2
37308: PUSH
37309: LD_INT 3
37311: PLUS
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: LIST
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: ST_TO_ADDR
// end ; end ;
37328: GO 37331
37330: POP
// result := list ;
37331: LD_ADDR_VAR 0 4
37335: PUSH
37336: LD_VAR 0 5
37340: ST_TO_ADDR
// end ;
37341: LD_VAR 0 4
37345: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37346: LD_INT 0
37348: PPUSH
37349: PPUSH
37350: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37351: LD_VAR 0 1
37355: NOT
37356: PUSH
37357: LD_VAR 0 2
37361: PUSH
37362: LD_INT 1
37364: PUSH
37365: LD_INT 2
37367: PUSH
37368: LD_INT 3
37370: PUSH
37371: LD_INT 4
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: IN
37380: NOT
37381: OR
37382: IFFALSE 37386
// exit ;
37384: GO 37469
// tmp := [ ] ;
37386: LD_ADDR_VAR 0 5
37390: PUSH
37391: EMPTY
37392: ST_TO_ADDR
// for i in units do
37393: LD_ADDR_VAR 0 4
37397: PUSH
37398: LD_VAR 0 1
37402: PUSH
37403: FOR_IN
37404: IFFALSE 37438
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37406: LD_ADDR_VAR 0 5
37410: PUSH
37411: LD_VAR 0 5
37415: PPUSH
37416: LD_VAR 0 4
37420: PPUSH
37421: LD_VAR 0 2
37425: PPUSH
37426: CALL_OW 259
37430: PPUSH
37431: CALL 38842 0 2
37435: ST_TO_ADDR
37436: GO 37403
37438: POP
37439: POP
// if not tmp then
37440: LD_VAR 0 5
37444: NOT
37445: IFFALSE 37449
// exit ;
37447: GO 37469
// result := SortListByListDesc ( units , tmp ) ;
37449: LD_ADDR_VAR 0 3
37453: PUSH
37454: LD_VAR 0 1
37458: PPUSH
37459: LD_VAR 0 5
37463: PPUSH
37464: CALL_OW 77
37468: ST_TO_ADDR
// end ;
37469: LD_VAR 0 3
37473: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37474: LD_INT 0
37476: PPUSH
37477: PPUSH
37478: PPUSH
// result := false ;
37479: LD_ADDR_VAR 0 3
37483: PUSH
37484: LD_INT 0
37486: ST_TO_ADDR
// if not building then
37487: LD_VAR 0 2
37491: NOT
37492: IFFALSE 37496
// exit ;
37494: GO 37634
// x := GetX ( building ) ;
37496: LD_ADDR_VAR 0 4
37500: PUSH
37501: LD_VAR 0 2
37505: PPUSH
37506: CALL_OW 250
37510: ST_TO_ADDR
// y := GetY ( building ) ;
37511: LD_ADDR_VAR 0 5
37515: PUSH
37516: LD_VAR 0 2
37520: PPUSH
37521: CALL_OW 251
37525: ST_TO_ADDR
// if not x or not y then
37526: LD_VAR 0 4
37530: NOT
37531: PUSH
37532: LD_VAR 0 5
37536: NOT
37537: OR
37538: IFFALSE 37542
// exit ;
37540: GO 37634
// if GetTaskList ( unit ) then
37542: LD_VAR 0 1
37546: PPUSH
37547: CALL_OW 437
37551: IFFALSE 37634
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37553: LD_STRING e
37555: PUSH
37556: LD_VAR 0 1
37560: PPUSH
37561: CALL_OW 437
37565: PUSH
37566: LD_INT 1
37568: ARRAY
37569: PUSH
37570: LD_INT 1
37572: ARRAY
37573: EQUAL
37574: PUSH
37575: LD_VAR 0 4
37579: PUSH
37580: LD_VAR 0 1
37584: PPUSH
37585: CALL_OW 437
37589: PUSH
37590: LD_INT 1
37592: ARRAY
37593: PUSH
37594: LD_INT 2
37596: ARRAY
37597: EQUAL
37598: AND
37599: PUSH
37600: LD_VAR 0 5
37604: PUSH
37605: LD_VAR 0 1
37609: PPUSH
37610: CALL_OW 437
37614: PUSH
37615: LD_INT 1
37617: ARRAY
37618: PUSH
37619: LD_INT 3
37621: ARRAY
37622: EQUAL
37623: AND
37624: IFFALSE 37634
// result := true end ;
37626: LD_ADDR_VAR 0 3
37630: PUSH
37631: LD_INT 1
37633: ST_TO_ADDR
// end ;
37634: LD_VAR 0 3
37638: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37639: LD_INT 0
37641: PPUSH
// result := false ;
37642: LD_ADDR_VAR 0 4
37646: PUSH
37647: LD_INT 0
37649: ST_TO_ADDR
// if GetTaskList ( unit ) then
37650: LD_VAR 0 1
37654: PPUSH
37655: CALL_OW 437
37659: IFFALSE 37742
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37661: LD_STRING M
37663: PUSH
37664: LD_VAR 0 1
37668: PPUSH
37669: CALL_OW 437
37673: PUSH
37674: LD_INT 1
37676: ARRAY
37677: PUSH
37678: LD_INT 1
37680: ARRAY
37681: EQUAL
37682: PUSH
37683: LD_VAR 0 2
37687: PUSH
37688: LD_VAR 0 1
37692: PPUSH
37693: CALL_OW 437
37697: PUSH
37698: LD_INT 1
37700: ARRAY
37701: PUSH
37702: LD_INT 2
37704: ARRAY
37705: EQUAL
37706: AND
37707: PUSH
37708: LD_VAR 0 3
37712: PUSH
37713: LD_VAR 0 1
37717: PPUSH
37718: CALL_OW 437
37722: PUSH
37723: LD_INT 1
37725: ARRAY
37726: PUSH
37727: LD_INT 3
37729: ARRAY
37730: EQUAL
37731: AND
37732: IFFALSE 37742
// result := true ;
37734: LD_ADDR_VAR 0 4
37738: PUSH
37739: LD_INT 1
37741: ST_TO_ADDR
// end ; end ;
37742: LD_VAR 0 4
37746: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37747: LD_INT 0
37749: PPUSH
37750: PPUSH
37751: PPUSH
37752: PPUSH
// if not unit or not area then
37753: LD_VAR 0 1
37757: NOT
37758: PUSH
37759: LD_VAR 0 2
37763: NOT
37764: OR
37765: IFFALSE 37769
// exit ;
37767: GO 37945
// tmp := AreaToList ( area , i ) ;
37769: LD_ADDR_VAR 0 6
37773: PUSH
37774: LD_VAR 0 2
37778: PPUSH
37779: LD_VAR 0 5
37783: PPUSH
37784: CALL_OW 517
37788: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37789: LD_ADDR_VAR 0 5
37793: PUSH
37794: DOUBLE
37795: LD_INT 1
37797: DEC
37798: ST_TO_ADDR
37799: LD_VAR 0 6
37803: PUSH
37804: LD_INT 1
37806: ARRAY
37807: PUSH
37808: FOR_TO
37809: IFFALSE 37943
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37811: LD_ADDR_VAR 0 7
37815: PUSH
37816: LD_VAR 0 6
37820: PUSH
37821: LD_INT 1
37823: ARRAY
37824: PUSH
37825: LD_VAR 0 5
37829: ARRAY
37830: PUSH
37831: LD_VAR 0 6
37835: PUSH
37836: LD_INT 2
37838: ARRAY
37839: PUSH
37840: LD_VAR 0 5
37844: ARRAY
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
37850: LD_INT 92
37852: PUSH
37853: LD_VAR 0 7
37857: PUSH
37858: LD_INT 1
37860: ARRAY
37861: PUSH
37862: LD_VAR 0 7
37866: PUSH
37867: LD_INT 2
37869: ARRAY
37870: PUSH
37871: LD_INT 2
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: PPUSH
37880: CALL_OW 69
37884: PUSH
37885: LD_INT 0
37887: EQUAL
37888: IFFALSE 37941
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37890: LD_VAR 0 1
37894: PPUSH
37895: LD_VAR 0 7
37899: PUSH
37900: LD_INT 1
37902: ARRAY
37903: PPUSH
37904: LD_VAR 0 7
37908: PUSH
37909: LD_INT 2
37911: ARRAY
37912: PPUSH
37913: LD_VAR 0 3
37917: PPUSH
37918: CALL_OW 48
// result := IsPlaced ( unit ) ;
37922: LD_ADDR_VAR 0 4
37926: PUSH
37927: LD_VAR 0 1
37931: PPUSH
37932: CALL_OW 305
37936: ST_TO_ADDR
// exit ;
37937: POP
37938: POP
37939: GO 37945
// end ; end ;
37941: GO 37808
37943: POP
37944: POP
// end ;
37945: LD_VAR 0 4
37949: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37950: LD_INT 0
37952: PPUSH
37953: PPUSH
37954: PPUSH
// if not side or side > 8 then
37955: LD_VAR 0 1
37959: NOT
37960: PUSH
37961: LD_VAR 0 1
37965: PUSH
37966: LD_INT 8
37968: GREATER
37969: OR
37970: IFFALSE 37974
// exit ;
37972: GO 38161
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37974: LD_ADDR_VAR 0 4
37978: PUSH
37979: LD_INT 22
37981: PUSH
37982: LD_VAR 0 1
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 21
37993: PUSH
37994: LD_INT 3
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PPUSH
38005: CALL_OW 69
38009: ST_TO_ADDR
// if not tmp then
38010: LD_VAR 0 4
38014: NOT
38015: IFFALSE 38019
// exit ;
38017: GO 38161
// enable_addtolog := true ;
38019: LD_ADDR_OWVAR 81
38023: PUSH
38024: LD_INT 1
38026: ST_TO_ADDR
// AddToLog ( [ ) ;
38027: LD_STRING [
38029: PPUSH
38030: CALL_OW 561
// for i in tmp do
38034: LD_ADDR_VAR 0 3
38038: PUSH
38039: LD_VAR 0 4
38043: PUSH
38044: FOR_IN
38045: IFFALSE 38152
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38047: LD_STRING [
38049: PUSH
38050: LD_VAR 0 3
38054: PPUSH
38055: CALL_OW 266
38059: STR
38060: PUSH
38061: LD_STRING , 
38063: STR
38064: PUSH
38065: LD_VAR 0 3
38069: PPUSH
38070: CALL_OW 250
38074: STR
38075: PUSH
38076: LD_STRING , 
38078: STR
38079: PUSH
38080: LD_VAR 0 3
38084: PPUSH
38085: CALL_OW 251
38089: STR
38090: PUSH
38091: LD_STRING , 
38093: STR
38094: PUSH
38095: LD_VAR 0 3
38099: PPUSH
38100: CALL_OW 254
38104: STR
38105: PUSH
38106: LD_STRING , 
38108: STR
38109: PUSH
38110: LD_VAR 0 3
38114: PPUSH
38115: LD_INT 1
38117: PPUSH
38118: CALL_OW 268
38122: STR
38123: PUSH
38124: LD_STRING , 
38126: STR
38127: PUSH
38128: LD_VAR 0 3
38132: PPUSH
38133: LD_INT 2
38135: PPUSH
38136: CALL_OW 268
38140: STR
38141: PUSH
38142: LD_STRING ],
38144: STR
38145: PPUSH
38146: CALL_OW 561
// end ;
38150: GO 38044
38152: POP
38153: POP
// AddToLog ( ]; ) ;
38154: LD_STRING ];
38156: PPUSH
38157: CALL_OW 561
// end ;
38161: LD_VAR 0 2
38165: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38166: LD_INT 0
38168: PPUSH
38169: PPUSH
38170: PPUSH
38171: PPUSH
38172: PPUSH
// if not area or not rate or not max then
38173: LD_VAR 0 1
38177: NOT
38178: PUSH
38179: LD_VAR 0 2
38183: NOT
38184: OR
38185: PUSH
38186: LD_VAR 0 4
38190: NOT
38191: OR
38192: IFFALSE 38196
// exit ;
38194: GO 38385
// while 1 do
38196: LD_INT 1
38198: IFFALSE 38385
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38200: LD_ADDR_VAR 0 9
38204: PUSH
38205: LD_VAR 0 1
38209: PPUSH
38210: LD_INT 1
38212: PPUSH
38213: CALL_OW 287
38217: PUSH
38218: LD_INT 10
38220: MUL
38221: ST_TO_ADDR
// r := rate / 10 ;
38222: LD_ADDR_VAR 0 7
38226: PUSH
38227: LD_VAR 0 2
38231: PUSH
38232: LD_INT 10
38234: DIVREAL
38235: ST_TO_ADDR
// time := 1 1$00 ;
38236: LD_ADDR_VAR 0 8
38240: PUSH
38241: LD_INT 2100
38243: ST_TO_ADDR
// if amount < min then
38244: LD_VAR 0 9
38248: PUSH
38249: LD_VAR 0 3
38253: LESS
38254: IFFALSE 38272
// r := r * 2 else
38256: LD_ADDR_VAR 0 7
38260: PUSH
38261: LD_VAR 0 7
38265: PUSH
38266: LD_INT 2
38268: MUL
38269: ST_TO_ADDR
38270: GO 38298
// if amount > max then
38272: LD_VAR 0 9
38276: PUSH
38277: LD_VAR 0 4
38281: GREATER
38282: IFFALSE 38298
// r := r / 2 ;
38284: LD_ADDR_VAR 0 7
38288: PUSH
38289: LD_VAR 0 7
38293: PUSH
38294: LD_INT 2
38296: DIVREAL
38297: ST_TO_ADDR
// time := time / r ;
38298: LD_ADDR_VAR 0 8
38302: PUSH
38303: LD_VAR 0 8
38307: PUSH
38308: LD_VAR 0 7
38312: DIVREAL
38313: ST_TO_ADDR
// if time < 0 then
38314: LD_VAR 0 8
38318: PUSH
38319: LD_INT 0
38321: LESS
38322: IFFALSE 38339
// time := time * - 1 ;
38324: LD_ADDR_VAR 0 8
38328: PUSH
38329: LD_VAR 0 8
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: MUL
38338: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38339: LD_VAR 0 8
38343: PUSH
38344: LD_INT 35
38346: PPUSH
38347: LD_INT 875
38349: PPUSH
38350: CALL_OW 12
38354: PLUS
38355: PPUSH
38356: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38360: LD_INT 1
38362: PPUSH
38363: LD_INT 5
38365: PPUSH
38366: CALL_OW 12
38370: PPUSH
38371: LD_VAR 0 1
38375: PPUSH
38376: LD_INT 1
38378: PPUSH
38379: CALL_OW 55
// end ;
38383: GO 38196
// end ;
38385: LD_VAR 0 5
38389: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38390: LD_INT 0
38392: PPUSH
38393: PPUSH
38394: PPUSH
38395: PPUSH
38396: PPUSH
38397: PPUSH
38398: PPUSH
38399: PPUSH
// if not turrets or not factories then
38400: LD_VAR 0 1
38404: NOT
38405: PUSH
38406: LD_VAR 0 2
38410: NOT
38411: OR
38412: IFFALSE 38416
// exit ;
38414: GO 38723
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38416: LD_ADDR_VAR 0 10
38420: PUSH
38421: LD_INT 5
38423: PUSH
38424: LD_INT 6
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 2
38433: PUSH
38434: LD_INT 4
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 3
38443: PUSH
38444: LD_INT 5
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 24
38458: PUSH
38459: LD_INT 25
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 23
38468: PUSH
38469: LD_INT 27
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 42
38482: PUSH
38483: LD_INT 43
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 44
38492: PUSH
38493: LD_INT 46
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 45
38502: PUSH
38503: LD_INT 47
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: LIST
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: LIST
38519: ST_TO_ADDR
// result := [ ] ;
38520: LD_ADDR_VAR 0 3
38524: PUSH
38525: EMPTY
38526: ST_TO_ADDR
// for i in turrets do
38527: LD_ADDR_VAR 0 4
38531: PUSH
38532: LD_VAR 0 1
38536: PUSH
38537: FOR_IN
38538: IFFALSE 38721
// begin nat := GetNation ( i ) ;
38540: LD_ADDR_VAR 0 7
38544: PUSH
38545: LD_VAR 0 4
38549: PPUSH
38550: CALL_OW 248
38554: ST_TO_ADDR
// weapon := 0 ;
38555: LD_ADDR_VAR 0 8
38559: PUSH
38560: LD_INT 0
38562: ST_TO_ADDR
// if not nat then
38563: LD_VAR 0 7
38567: NOT
38568: IFFALSE 38572
// continue ;
38570: GO 38537
// for j in list [ nat ] do
38572: LD_ADDR_VAR 0 5
38576: PUSH
38577: LD_VAR 0 10
38581: PUSH
38582: LD_VAR 0 7
38586: ARRAY
38587: PUSH
38588: FOR_IN
38589: IFFALSE 38630
// if GetBWeapon ( i ) = j [ 1 ] then
38591: LD_VAR 0 4
38595: PPUSH
38596: CALL_OW 269
38600: PUSH
38601: LD_VAR 0 5
38605: PUSH
38606: LD_INT 1
38608: ARRAY
38609: EQUAL
38610: IFFALSE 38628
// begin weapon := j [ 2 ] ;
38612: LD_ADDR_VAR 0 8
38616: PUSH
38617: LD_VAR 0 5
38621: PUSH
38622: LD_INT 2
38624: ARRAY
38625: ST_TO_ADDR
// break ;
38626: GO 38630
// end ;
38628: GO 38588
38630: POP
38631: POP
// if not weapon then
38632: LD_VAR 0 8
38636: NOT
38637: IFFALSE 38641
// continue ;
38639: GO 38537
// for k in factories do
38641: LD_ADDR_VAR 0 6
38645: PUSH
38646: LD_VAR 0 2
38650: PUSH
38651: FOR_IN
38652: IFFALSE 38717
// begin weapons := AvailableWeaponList ( k ) ;
38654: LD_ADDR_VAR 0 9
38658: PUSH
38659: LD_VAR 0 6
38663: PPUSH
38664: CALL_OW 478
38668: ST_TO_ADDR
// if not weapons then
38669: LD_VAR 0 9
38673: NOT
38674: IFFALSE 38678
// continue ;
38676: GO 38651
// if weapon in weapons then
38678: LD_VAR 0 8
38682: PUSH
38683: LD_VAR 0 9
38687: IN
38688: IFFALSE 38715
// begin result := [ i , weapon ] ;
38690: LD_ADDR_VAR 0 3
38694: PUSH
38695: LD_VAR 0 4
38699: PUSH
38700: LD_VAR 0 8
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: ST_TO_ADDR
// exit ;
38709: POP
38710: POP
38711: POP
38712: POP
38713: GO 38723
// end ; end ;
38715: GO 38651
38717: POP
38718: POP
// end ;
38719: GO 38537
38721: POP
38722: POP
// end ;
38723: LD_VAR 0 3
38727: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38728: LD_INT 0
38730: PPUSH
// if not side or side > 8 then
38731: LD_VAR 0 3
38735: NOT
38736: PUSH
38737: LD_VAR 0 3
38741: PUSH
38742: LD_INT 8
38744: GREATER
38745: OR
38746: IFFALSE 38750
// exit ;
38748: GO 38809
// if not range then
38750: LD_VAR 0 4
38754: NOT
38755: IFFALSE 38766
// range := - 12 ;
38757: LD_ADDR_VAR 0 4
38761: PUSH
38762: LD_INT 12
38764: NEG
38765: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38766: LD_VAR 0 1
38770: PPUSH
38771: LD_VAR 0 2
38775: PPUSH
38776: LD_VAR 0 3
38780: PPUSH
38781: LD_VAR 0 4
38785: PPUSH
38786: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38790: LD_VAR 0 1
38794: PPUSH
38795: LD_VAR 0 2
38799: PPUSH
38800: LD_VAR 0 3
38804: PPUSH
38805: CALL_OW 331
// end ;
38809: LD_VAR 0 5
38813: RET
// export function Video ( mode ) ; begin
38814: LD_INT 0
38816: PPUSH
// ingame_video = mode ;
38817: LD_ADDR_OWVAR 52
38821: PUSH
38822: LD_VAR 0 1
38826: ST_TO_ADDR
// interface_hidden = mode ;
38827: LD_ADDR_OWVAR 54
38831: PUSH
38832: LD_VAR 0 1
38836: ST_TO_ADDR
// end ;
38837: LD_VAR 0 2
38841: RET
// export function Join ( array , element ) ; begin
38842: LD_INT 0
38844: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38845: LD_ADDR_VAR 0 3
38849: PUSH
38850: LD_VAR 0 1
38854: PPUSH
38855: LD_VAR 0 1
38859: PUSH
38860: LD_INT 1
38862: PLUS
38863: PPUSH
38864: LD_VAR 0 2
38868: PPUSH
38869: CALL_OW 1
38873: ST_TO_ADDR
// end ;
38874: LD_VAR 0 3
38878: RET
// export function JoinUnion ( array , element ) ; begin
38879: LD_INT 0
38881: PPUSH
// result := array union element ;
38882: LD_ADDR_VAR 0 3
38886: PUSH
38887: LD_VAR 0 1
38891: PUSH
38892: LD_VAR 0 2
38896: UNION
38897: ST_TO_ADDR
// end ;
38898: LD_VAR 0 3
38902: RET
// export function GetBehemoths ( side ) ; begin
38903: LD_INT 0
38905: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38906: LD_ADDR_VAR 0 2
38910: PUSH
38911: LD_INT 22
38913: PUSH
38914: LD_VAR 0 1
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 31
38925: PUSH
38926: LD_INT 25
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PPUSH
38937: CALL_OW 69
38941: ST_TO_ADDR
// end ;
38942: LD_VAR 0 2
38946: RET
// export function Shuffle ( array ) ; var i , index ; begin
38947: LD_INT 0
38949: PPUSH
38950: PPUSH
38951: PPUSH
// result := [ ] ;
38952: LD_ADDR_VAR 0 2
38956: PUSH
38957: EMPTY
38958: ST_TO_ADDR
// if not array then
38959: LD_VAR 0 1
38963: NOT
38964: IFFALSE 38968
// exit ;
38966: GO 39067
// Randomize ;
38968: CALL_OW 10
// for i = array downto 1 do
38972: LD_ADDR_VAR 0 3
38976: PUSH
38977: DOUBLE
38978: LD_VAR 0 1
38982: INC
38983: ST_TO_ADDR
38984: LD_INT 1
38986: PUSH
38987: FOR_DOWNTO
38988: IFFALSE 39065
// begin index := rand ( 1 , array ) ;
38990: LD_ADDR_VAR 0 4
38994: PUSH
38995: LD_INT 1
38997: PPUSH
38998: LD_VAR 0 1
39002: PPUSH
39003: CALL_OW 12
39007: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39008: LD_ADDR_VAR 0 2
39012: PUSH
39013: LD_VAR 0 2
39017: PPUSH
39018: LD_VAR 0 2
39022: PUSH
39023: LD_INT 1
39025: PLUS
39026: PPUSH
39027: LD_VAR 0 1
39031: PUSH
39032: LD_VAR 0 4
39036: ARRAY
39037: PPUSH
39038: CALL_OW 2
39042: ST_TO_ADDR
// array := Delete ( array , index ) ;
39043: LD_ADDR_VAR 0 1
39047: PUSH
39048: LD_VAR 0 1
39052: PPUSH
39053: LD_VAR 0 4
39057: PPUSH
39058: CALL_OW 3
39062: ST_TO_ADDR
// end ;
39063: GO 38987
39065: POP
39066: POP
// end ;
39067: LD_VAR 0 2
39071: RET
// export function GetBaseMaterials ( base ) ; begin
39072: LD_INT 0
39074: PPUSH
// result := [ 0 , 0 , 0 ] ;
39075: LD_ADDR_VAR 0 2
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: LD_INT 0
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: LIST
39093: ST_TO_ADDR
// if not base then
39094: LD_VAR 0 1
39098: NOT
39099: IFFALSE 39103
// exit ;
39101: GO 39152
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39103: LD_ADDR_VAR 0 2
39107: PUSH
39108: LD_VAR 0 1
39112: PPUSH
39113: LD_INT 1
39115: PPUSH
39116: CALL_OW 275
39120: PUSH
39121: LD_VAR 0 1
39125: PPUSH
39126: LD_INT 2
39128: PPUSH
39129: CALL_OW 275
39133: PUSH
39134: LD_VAR 0 1
39138: PPUSH
39139: LD_INT 3
39141: PPUSH
39142: CALL_OW 275
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: LIST
39151: ST_TO_ADDR
// end ;
39152: LD_VAR 0 2
39156: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39157: LD_INT 0
39159: PPUSH
39160: PPUSH
// result := array ;
39161: LD_ADDR_VAR 0 3
39165: PUSH
39166: LD_VAR 0 1
39170: ST_TO_ADDR
// if size >= result then
39171: LD_VAR 0 2
39175: PUSH
39176: LD_VAR 0 3
39180: GREATEREQUAL
39181: IFFALSE 39185
// exit ;
39183: GO 39235
// if size then
39185: LD_VAR 0 2
39189: IFFALSE 39235
// for i := array downto size do
39191: LD_ADDR_VAR 0 4
39195: PUSH
39196: DOUBLE
39197: LD_VAR 0 1
39201: INC
39202: ST_TO_ADDR
39203: LD_VAR 0 2
39207: PUSH
39208: FOR_DOWNTO
39209: IFFALSE 39233
// result := Delete ( result , result ) ;
39211: LD_ADDR_VAR 0 3
39215: PUSH
39216: LD_VAR 0 3
39220: PPUSH
39221: LD_VAR 0 3
39225: PPUSH
39226: CALL_OW 3
39230: ST_TO_ADDR
39231: GO 39208
39233: POP
39234: POP
// end ;
39235: LD_VAR 0 3
39239: RET
// export function ComExit ( unit ) ; var tmp ; begin
39240: LD_INT 0
39242: PPUSH
39243: PPUSH
// if not IsInUnit ( unit ) then
39244: LD_VAR 0 1
39248: PPUSH
39249: CALL_OW 310
39253: NOT
39254: IFFALSE 39258
// exit ;
39256: GO 39318
// tmp := IsInUnit ( unit ) ;
39258: LD_ADDR_VAR 0 3
39262: PUSH
39263: LD_VAR 0 1
39267: PPUSH
39268: CALL_OW 310
39272: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39273: LD_VAR 0 3
39277: PPUSH
39278: CALL_OW 247
39282: PUSH
39283: LD_INT 2
39285: EQUAL
39286: IFFALSE 39299
// ComExitVehicle ( unit ) else
39288: LD_VAR 0 1
39292: PPUSH
39293: CALL_OW 121
39297: GO 39308
// ComExitBuilding ( unit ) ;
39299: LD_VAR 0 1
39303: PPUSH
39304: CALL_OW 122
// result := tmp ;
39308: LD_ADDR_VAR 0 2
39312: PUSH
39313: LD_VAR 0 3
39317: ST_TO_ADDR
// end ;
39318: LD_VAR 0 2
39322: RET
// export function ComExitAll ( units ) ; var i ; begin
39323: LD_INT 0
39325: PPUSH
39326: PPUSH
// if not units then
39327: LD_VAR 0 1
39331: NOT
39332: IFFALSE 39336
// exit ;
39334: GO 39362
// for i in units do
39336: LD_ADDR_VAR 0 3
39340: PUSH
39341: LD_VAR 0 1
39345: PUSH
39346: FOR_IN
39347: IFFALSE 39360
// ComExit ( i ) ;
39349: LD_VAR 0 3
39353: PPUSH
39354: CALL 39240 0 1
39358: GO 39346
39360: POP
39361: POP
// end ;
39362: LD_VAR 0 2
39366: RET
// export function ResetHc ; begin
39367: LD_INT 0
39369: PPUSH
// InitHc ;
39370: CALL_OW 19
// hc_importance := 0 ;
39374: LD_ADDR_OWVAR 32
39378: PUSH
39379: LD_INT 0
39381: ST_TO_ADDR
// end ;
39382: LD_VAR 0 1
39386: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39387: LD_INT 0
39389: PPUSH
39390: PPUSH
39391: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39392: LD_ADDR_VAR 0 6
39396: PUSH
39397: LD_VAR 0 1
39401: PUSH
39402: LD_VAR 0 3
39406: PLUS
39407: PUSH
39408: LD_INT 2
39410: DIV
39411: ST_TO_ADDR
// if _x < 0 then
39412: LD_VAR 0 6
39416: PUSH
39417: LD_INT 0
39419: LESS
39420: IFFALSE 39437
// _x := _x * - 1 ;
39422: LD_ADDR_VAR 0 6
39426: PUSH
39427: LD_VAR 0 6
39431: PUSH
39432: LD_INT 1
39434: NEG
39435: MUL
39436: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39437: LD_ADDR_VAR 0 7
39441: PUSH
39442: LD_VAR 0 2
39446: PUSH
39447: LD_VAR 0 4
39451: PLUS
39452: PUSH
39453: LD_INT 2
39455: DIV
39456: ST_TO_ADDR
// if _y < 0 then
39457: LD_VAR 0 7
39461: PUSH
39462: LD_INT 0
39464: LESS
39465: IFFALSE 39482
// _y := _y * - 1 ;
39467: LD_ADDR_VAR 0 7
39471: PUSH
39472: LD_VAR 0 7
39476: PUSH
39477: LD_INT 1
39479: NEG
39480: MUL
39481: ST_TO_ADDR
// result := [ _x , _y ] ;
39482: LD_ADDR_VAR 0 5
39486: PUSH
39487: LD_VAR 0 6
39491: PUSH
39492: LD_VAR 0 7
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: ST_TO_ADDR
// end ;
39501: LD_VAR 0 5
39505: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39506: LD_INT 0
39508: PPUSH
39509: PPUSH
39510: PPUSH
39511: PPUSH
// task := GetTaskList ( unit ) ;
39512: LD_ADDR_VAR 0 7
39516: PUSH
39517: LD_VAR 0 1
39521: PPUSH
39522: CALL_OW 437
39526: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39527: LD_VAR 0 7
39531: NOT
39532: PUSH
39533: LD_VAR 0 1
39537: PPUSH
39538: LD_VAR 0 2
39542: PPUSH
39543: CALL_OW 308
39547: NOT
39548: AND
39549: IFFALSE 39553
// exit ;
39551: GO 39671
// if IsInArea ( unit , area ) then
39553: LD_VAR 0 1
39557: PPUSH
39558: LD_VAR 0 2
39562: PPUSH
39563: CALL_OW 308
39567: IFFALSE 39585
// begin ComMoveToArea ( unit , goAway ) ;
39569: LD_VAR 0 1
39573: PPUSH
39574: LD_VAR 0 3
39578: PPUSH
39579: CALL_OW 113
// exit ;
39583: GO 39671
// end ; if task [ 1 ] [ 1 ] <> M then
39585: LD_VAR 0 7
39589: PUSH
39590: LD_INT 1
39592: ARRAY
39593: PUSH
39594: LD_INT 1
39596: ARRAY
39597: PUSH
39598: LD_STRING M
39600: NONEQUAL
39601: IFFALSE 39605
// exit ;
39603: GO 39671
// x := task [ 1 ] [ 2 ] ;
39605: LD_ADDR_VAR 0 5
39609: PUSH
39610: LD_VAR 0 7
39614: PUSH
39615: LD_INT 1
39617: ARRAY
39618: PUSH
39619: LD_INT 2
39621: ARRAY
39622: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39623: LD_ADDR_VAR 0 6
39627: PUSH
39628: LD_VAR 0 7
39632: PUSH
39633: LD_INT 1
39635: ARRAY
39636: PUSH
39637: LD_INT 3
39639: ARRAY
39640: ST_TO_ADDR
// if InArea ( x , y , area ) then
39641: LD_VAR 0 5
39645: PPUSH
39646: LD_VAR 0 6
39650: PPUSH
39651: LD_VAR 0 2
39655: PPUSH
39656: CALL_OW 309
39660: IFFALSE 39671
// ComStop ( unit ) ;
39662: LD_VAR 0 1
39666: PPUSH
39667: CALL_OW 141
// end ;
39671: LD_VAR 0 4
39675: RET
// export function Abs ( value ) ; begin
39676: LD_INT 0
39678: PPUSH
// result := value ;
39679: LD_ADDR_VAR 0 2
39683: PUSH
39684: LD_VAR 0 1
39688: ST_TO_ADDR
// if value < 0 then
39689: LD_VAR 0 1
39693: PUSH
39694: LD_INT 0
39696: LESS
39697: IFFALSE 39714
// result := value * - 1 ;
39699: LD_ADDR_VAR 0 2
39703: PUSH
39704: LD_VAR 0 1
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: MUL
39713: ST_TO_ADDR
// end ;
39714: LD_VAR 0 2
39718: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39719: LD_INT 0
39721: PPUSH
39722: PPUSH
39723: PPUSH
39724: PPUSH
39725: PPUSH
39726: PPUSH
39727: PPUSH
39728: PPUSH
// if not unit or not building then
39729: LD_VAR 0 1
39733: NOT
39734: PUSH
39735: LD_VAR 0 2
39739: NOT
39740: OR
39741: IFFALSE 39745
// exit ;
39743: GO 39971
// x := GetX ( building ) ;
39745: LD_ADDR_VAR 0 4
39749: PUSH
39750: LD_VAR 0 2
39754: PPUSH
39755: CALL_OW 250
39759: ST_TO_ADDR
// y := GetY ( building ) ;
39760: LD_ADDR_VAR 0 6
39764: PUSH
39765: LD_VAR 0 2
39769: PPUSH
39770: CALL_OW 251
39774: ST_TO_ADDR
// d := GetDir ( building ) ;
39775: LD_ADDR_VAR 0 8
39779: PUSH
39780: LD_VAR 0 2
39784: PPUSH
39785: CALL_OW 254
39789: ST_TO_ADDR
// r := 4 ;
39790: LD_ADDR_VAR 0 9
39794: PUSH
39795: LD_INT 4
39797: ST_TO_ADDR
// for i := 1 to 5 do
39798: LD_ADDR_VAR 0 10
39802: PUSH
39803: DOUBLE
39804: LD_INT 1
39806: DEC
39807: ST_TO_ADDR
39808: LD_INT 5
39810: PUSH
39811: FOR_TO
39812: IFFALSE 39969
// begin _x := ShiftX ( x , d , r + i ) ;
39814: LD_ADDR_VAR 0 5
39818: PUSH
39819: LD_VAR 0 4
39823: PPUSH
39824: LD_VAR 0 8
39828: PPUSH
39829: LD_VAR 0 9
39833: PUSH
39834: LD_VAR 0 10
39838: PLUS
39839: PPUSH
39840: CALL_OW 272
39844: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39845: LD_ADDR_VAR 0 7
39849: PUSH
39850: LD_VAR 0 6
39854: PPUSH
39855: LD_VAR 0 8
39859: PPUSH
39860: LD_VAR 0 9
39864: PUSH
39865: LD_VAR 0 10
39869: PLUS
39870: PPUSH
39871: CALL_OW 273
39875: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39876: LD_VAR 0 5
39880: PPUSH
39881: LD_VAR 0 7
39885: PPUSH
39886: CALL_OW 488
39890: PUSH
39891: LD_VAR 0 5
39895: PPUSH
39896: LD_VAR 0 7
39900: PPUSH
39901: CALL_OW 428
39905: PPUSH
39906: CALL_OW 247
39910: PUSH
39911: LD_INT 3
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: IN
39921: NOT
39922: AND
39923: IFFALSE 39967
// begin ComMoveXY ( unit , _x , _y ) ;
39925: LD_VAR 0 1
39929: PPUSH
39930: LD_VAR 0 5
39934: PPUSH
39935: LD_VAR 0 7
39939: PPUSH
39940: CALL_OW 111
// result := [ _x , _y ] ;
39944: LD_ADDR_VAR 0 3
39948: PUSH
39949: LD_VAR 0 5
39953: PUSH
39954: LD_VAR 0 7
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: ST_TO_ADDR
// exit ;
39963: POP
39964: POP
39965: GO 39971
// end ; end ;
39967: GO 39811
39969: POP
39970: POP
// end ;
39971: LD_VAR 0 3
39975: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39976: LD_INT 0
39978: PPUSH
39979: PPUSH
39980: PPUSH
// result := 0 ;
39981: LD_ADDR_VAR 0 3
39985: PUSH
39986: LD_INT 0
39988: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39989: LD_VAR 0 1
39993: PUSH
39994: LD_INT 0
39996: LESS
39997: PUSH
39998: LD_VAR 0 1
40002: PUSH
40003: LD_INT 8
40005: GREATER
40006: OR
40007: PUSH
40008: LD_VAR 0 2
40012: PUSH
40013: LD_INT 0
40015: LESS
40016: OR
40017: PUSH
40018: LD_VAR 0 2
40022: PUSH
40023: LD_INT 8
40025: GREATER
40026: OR
40027: IFFALSE 40031
// exit ;
40029: GO 40106
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40031: LD_ADDR_VAR 0 4
40035: PUSH
40036: LD_INT 22
40038: PUSH
40039: LD_VAR 0 2
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PPUSH
40048: CALL_OW 69
40052: PUSH
40053: FOR_IN
40054: IFFALSE 40104
// begin un := UnitShoot ( i ) ;
40056: LD_ADDR_VAR 0 5
40060: PUSH
40061: LD_VAR 0 4
40065: PPUSH
40066: CALL_OW 504
40070: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40071: LD_VAR 0 5
40075: PPUSH
40076: CALL_OW 255
40080: PUSH
40081: LD_VAR 0 1
40085: EQUAL
40086: IFFALSE 40102
// begin result := un ;
40088: LD_ADDR_VAR 0 3
40092: PUSH
40093: LD_VAR 0 5
40097: ST_TO_ADDR
// exit ;
40098: POP
40099: POP
40100: GO 40106
// end ; end ;
40102: GO 40053
40104: POP
40105: POP
// end ;
40106: LD_VAR 0 3
40110: RET
// export function GetCargoBay ( units ) ; begin
40111: LD_INT 0
40113: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40114: LD_ADDR_VAR 0 2
40118: PUSH
40119: LD_VAR 0 1
40123: PPUSH
40124: LD_INT 2
40126: PUSH
40127: LD_INT 34
40129: PUSH
40130: LD_INT 12
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 34
40139: PUSH
40140: LD_INT 51
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 34
40149: PUSH
40150: LD_INT 32
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 34
40159: PUSH
40160: LD_INT 89
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: PPUSH
40174: CALL_OW 72
40178: ST_TO_ADDR
// end ;
40179: LD_VAR 0 2
40183: RET
// export function Negate ( value ) ; begin
40184: LD_INT 0
40186: PPUSH
// result := not value ;
40187: LD_ADDR_VAR 0 2
40191: PUSH
40192: LD_VAR 0 1
40196: NOT
40197: ST_TO_ADDR
// end ;
40198: LD_VAR 0 2
40202: RET
// export function Inc ( value ) ; begin
40203: LD_INT 0
40205: PPUSH
// result := value + 1 ;
40206: LD_ADDR_VAR 0 2
40210: PUSH
40211: LD_VAR 0 1
40215: PUSH
40216: LD_INT 1
40218: PLUS
40219: ST_TO_ADDR
// end ;
40220: LD_VAR 0 2
40224: RET
// export function Dec ( value ) ; begin
40225: LD_INT 0
40227: PPUSH
// result := value - 1 ;
40228: LD_ADDR_VAR 0 2
40232: PUSH
40233: LD_VAR 0 1
40237: PUSH
40238: LD_INT 1
40240: MINUS
40241: ST_TO_ADDR
// end ;
40242: LD_VAR 0 2
40246: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40247: LD_INT 0
40249: PPUSH
40250: PPUSH
40251: PPUSH
40252: PPUSH
40253: PPUSH
40254: PPUSH
40255: PPUSH
40256: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40257: LD_VAR 0 1
40261: PPUSH
40262: LD_VAR 0 2
40266: PPUSH
40267: CALL_OW 488
40271: NOT
40272: PUSH
40273: LD_VAR 0 3
40277: PPUSH
40278: LD_VAR 0 4
40282: PPUSH
40283: CALL_OW 488
40287: NOT
40288: OR
40289: IFFALSE 40302
// begin result := - 1 ;
40291: LD_ADDR_VAR 0 5
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: ST_TO_ADDR
// exit ;
40300: GO 40537
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40302: LD_ADDR_VAR 0 12
40306: PUSH
40307: LD_VAR 0 1
40311: PPUSH
40312: LD_VAR 0 2
40316: PPUSH
40317: LD_VAR 0 3
40321: PPUSH
40322: LD_VAR 0 4
40326: PPUSH
40327: CALL 39387 0 4
40331: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40332: LD_ADDR_VAR 0 11
40336: PUSH
40337: LD_VAR 0 1
40341: PPUSH
40342: LD_VAR 0 2
40346: PPUSH
40347: LD_VAR 0 12
40351: PUSH
40352: LD_INT 1
40354: ARRAY
40355: PPUSH
40356: LD_VAR 0 12
40360: PUSH
40361: LD_INT 2
40363: ARRAY
40364: PPUSH
40365: CALL_OW 298
40369: ST_TO_ADDR
// distance := 9999 ;
40370: LD_ADDR_VAR 0 10
40374: PUSH
40375: LD_INT 9999
40377: ST_TO_ADDR
// for i := 0 to 5 do
40378: LD_ADDR_VAR 0 6
40382: PUSH
40383: DOUBLE
40384: LD_INT 0
40386: DEC
40387: ST_TO_ADDR
40388: LD_INT 5
40390: PUSH
40391: FOR_TO
40392: IFFALSE 40535
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40394: LD_ADDR_VAR 0 7
40398: PUSH
40399: LD_VAR 0 1
40403: PPUSH
40404: LD_VAR 0 6
40408: PPUSH
40409: LD_VAR 0 11
40413: PPUSH
40414: CALL_OW 272
40418: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40419: LD_ADDR_VAR 0 8
40423: PUSH
40424: LD_VAR 0 2
40428: PPUSH
40429: LD_VAR 0 6
40433: PPUSH
40434: LD_VAR 0 11
40438: PPUSH
40439: CALL_OW 273
40443: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40444: LD_VAR 0 7
40448: PPUSH
40449: LD_VAR 0 8
40453: PPUSH
40454: CALL_OW 488
40458: NOT
40459: IFFALSE 40463
// continue ;
40461: GO 40391
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40463: LD_ADDR_VAR 0 9
40467: PUSH
40468: LD_VAR 0 12
40472: PUSH
40473: LD_INT 1
40475: ARRAY
40476: PPUSH
40477: LD_VAR 0 12
40481: PUSH
40482: LD_INT 2
40484: ARRAY
40485: PPUSH
40486: LD_VAR 0 7
40490: PPUSH
40491: LD_VAR 0 8
40495: PPUSH
40496: CALL_OW 298
40500: ST_TO_ADDR
// if tmp < distance then
40501: LD_VAR 0 9
40505: PUSH
40506: LD_VAR 0 10
40510: LESS
40511: IFFALSE 40533
// begin result := i ;
40513: LD_ADDR_VAR 0 5
40517: PUSH
40518: LD_VAR 0 6
40522: ST_TO_ADDR
// distance := tmp ;
40523: LD_ADDR_VAR 0 10
40527: PUSH
40528: LD_VAR 0 9
40532: ST_TO_ADDR
// end ; end ;
40533: GO 40391
40535: POP
40536: POP
// end ;
40537: LD_VAR 0 5
40541: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40542: LD_INT 0
40544: PPUSH
40545: PPUSH
// if not driver or not IsInUnit ( driver ) then
40546: LD_VAR 0 1
40550: NOT
40551: PUSH
40552: LD_VAR 0 1
40556: PPUSH
40557: CALL_OW 310
40561: NOT
40562: OR
40563: IFFALSE 40567
// exit ;
40565: GO 40657
// vehicle := IsInUnit ( driver ) ;
40567: LD_ADDR_VAR 0 3
40571: PUSH
40572: LD_VAR 0 1
40576: PPUSH
40577: CALL_OW 310
40581: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40582: LD_VAR 0 1
40586: PPUSH
40587: LD_STRING \
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: LD_INT 0
40595: PUSH
40596: LD_INT 0
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: LD_INT 0
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: PUSH
40617: LD_STRING E
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_VAR 0 3
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: LD_INT 0
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PPUSH
40653: CALL_OW 446
// end ;
40657: LD_VAR 0 2
40661: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40662: LD_INT 0
40664: PPUSH
40665: PPUSH
// if not driver or not IsInUnit ( driver ) then
40666: LD_VAR 0 1
40670: NOT
40671: PUSH
40672: LD_VAR 0 1
40676: PPUSH
40677: CALL_OW 310
40681: NOT
40682: OR
40683: IFFALSE 40687
// exit ;
40685: GO 40777
// vehicle := IsInUnit ( driver ) ;
40687: LD_ADDR_VAR 0 3
40691: PUSH
40692: LD_VAR 0 1
40696: PPUSH
40697: CALL_OW 310
40701: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40702: LD_VAR 0 1
40706: PPUSH
40707: LD_STRING \
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: PUSH
40737: LD_STRING E
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: LD_VAR 0 3
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PPUSH
40773: CALL_OW 447
// end ;
40777: LD_VAR 0 2
40781: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40782: LD_INT 0
40784: PPUSH
40785: PPUSH
40786: PPUSH
// tmp := [ ] ;
40787: LD_ADDR_VAR 0 5
40791: PUSH
40792: EMPTY
40793: ST_TO_ADDR
// for i in units do
40794: LD_ADDR_VAR 0 4
40798: PUSH
40799: LD_VAR 0 1
40803: PUSH
40804: FOR_IN
40805: IFFALSE 40843
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40807: LD_ADDR_VAR 0 5
40811: PUSH
40812: LD_VAR 0 5
40816: PPUSH
40817: LD_VAR 0 5
40821: PUSH
40822: LD_INT 1
40824: PLUS
40825: PPUSH
40826: LD_VAR 0 4
40830: PPUSH
40831: CALL_OW 256
40835: PPUSH
40836: CALL_OW 2
40840: ST_TO_ADDR
40841: GO 40804
40843: POP
40844: POP
// if not tmp then
40845: LD_VAR 0 5
40849: NOT
40850: IFFALSE 40854
// exit ;
40852: GO 40902
// if asc then
40854: LD_VAR 0 2
40858: IFFALSE 40882
// result := SortListByListAsc ( units , tmp ) else
40860: LD_ADDR_VAR 0 3
40864: PUSH
40865: LD_VAR 0 1
40869: PPUSH
40870: LD_VAR 0 5
40874: PPUSH
40875: CALL_OW 76
40879: ST_TO_ADDR
40880: GO 40902
// result := SortListByListDesc ( units , tmp ) ;
40882: LD_ADDR_VAR 0 3
40886: PUSH
40887: LD_VAR 0 1
40891: PPUSH
40892: LD_VAR 0 5
40896: PPUSH
40897: CALL_OW 77
40901: ST_TO_ADDR
// end ;
40902: LD_VAR 0 3
40906: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40907: LD_INT 0
40909: PPUSH
40910: PPUSH
// task := GetTaskList ( mech ) ;
40911: LD_ADDR_VAR 0 4
40915: PUSH
40916: LD_VAR 0 1
40920: PPUSH
40921: CALL_OW 437
40925: ST_TO_ADDR
// if not task then
40926: LD_VAR 0 4
40930: NOT
40931: IFFALSE 40935
// exit ;
40933: GO 40977
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40935: LD_ADDR_VAR 0 3
40939: PUSH
40940: LD_VAR 0 4
40944: PUSH
40945: LD_INT 1
40947: ARRAY
40948: PUSH
40949: LD_INT 1
40951: ARRAY
40952: PUSH
40953: LD_STRING r
40955: EQUAL
40956: PUSH
40957: LD_VAR 0 4
40961: PUSH
40962: LD_INT 1
40964: ARRAY
40965: PUSH
40966: LD_INT 4
40968: ARRAY
40969: PUSH
40970: LD_VAR 0 2
40974: EQUAL
40975: AND
40976: ST_TO_ADDR
// end ;
40977: LD_VAR 0 3
40981: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40982: LD_INT 0
40984: PPUSH
// SetDir ( unit , d ) ;
40985: LD_VAR 0 1
40989: PPUSH
40990: LD_VAR 0 4
40994: PPUSH
40995: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40999: LD_VAR 0 1
41003: PPUSH
41004: LD_VAR 0 2
41008: PPUSH
41009: LD_VAR 0 3
41013: PPUSH
41014: LD_VAR 0 5
41018: PPUSH
41019: CALL_OW 48
// end ;
41023: LD_VAR 0 6
41027: RET
// export function ToNaturalNumber ( number ) ; begin
41028: LD_INT 0
41030: PPUSH
// result := number div 1 ;
41031: LD_ADDR_VAR 0 2
41035: PUSH
41036: LD_VAR 0 1
41040: PUSH
41041: LD_INT 1
41043: DIV
41044: ST_TO_ADDR
// if number < 0 then
41045: LD_VAR 0 1
41049: PUSH
41050: LD_INT 0
41052: LESS
41053: IFFALSE 41063
// result := 0 ;
41055: LD_ADDR_VAR 0 2
41059: PUSH
41060: LD_INT 0
41062: ST_TO_ADDR
// end ;
41063: LD_VAR 0 2
41067: RET
// export function SortByClass ( units , class ) ; var un ; begin
41068: LD_INT 0
41070: PPUSH
41071: PPUSH
// if not units or not class then
41072: LD_VAR 0 1
41076: NOT
41077: PUSH
41078: LD_VAR 0 2
41082: NOT
41083: OR
41084: IFFALSE 41088
// exit ;
41086: GO 41183
// result := [ ] ;
41088: LD_ADDR_VAR 0 3
41092: PUSH
41093: EMPTY
41094: ST_TO_ADDR
// for un in units do
41095: LD_ADDR_VAR 0 4
41099: PUSH
41100: LD_VAR 0 1
41104: PUSH
41105: FOR_IN
41106: IFFALSE 41181
// if GetClass ( un ) = class then
41108: LD_VAR 0 4
41112: PPUSH
41113: CALL_OW 257
41117: PUSH
41118: LD_VAR 0 2
41122: EQUAL
41123: IFFALSE 41150
// result := Insert ( result , 1 , un ) else
41125: LD_ADDR_VAR 0 3
41129: PUSH
41130: LD_VAR 0 3
41134: PPUSH
41135: LD_INT 1
41137: PPUSH
41138: LD_VAR 0 4
41142: PPUSH
41143: CALL_OW 2
41147: ST_TO_ADDR
41148: GO 41179
// result := Replace ( result , result + 1 , un ) ;
41150: LD_ADDR_VAR 0 3
41154: PUSH
41155: LD_VAR 0 3
41159: PPUSH
41160: LD_VAR 0 3
41164: PUSH
41165: LD_INT 1
41167: PLUS
41168: PPUSH
41169: LD_VAR 0 4
41173: PPUSH
41174: CALL_OW 1
41178: ST_TO_ADDR
41179: GO 41105
41181: POP
41182: POP
// end ;
41183: LD_VAR 0 3
41187: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41188: LD_INT 0
41190: PPUSH
41191: PPUSH
41192: PPUSH
41193: PPUSH
41194: PPUSH
41195: PPUSH
41196: PPUSH
// result := [ ] ;
41197: LD_ADDR_VAR 0 4
41201: PUSH
41202: EMPTY
41203: ST_TO_ADDR
// if x - r < 0 then
41204: LD_VAR 0 1
41208: PUSH
41209: LD_VAR 0 3
41213: MINUS
41214: PUSH
41215: LD_INT 0
41217: LESS
41218: IFFALSE 41230
// min_x := 0 else
41220: LD_ADDR_VAR 0 8
41224: PUSH
41225: LD_INT 0
41227: ST_TO_ADDR
41228: GO 41246
// min_x := x - r ;
41230: LD_ADDR_VAR 0 8
41234: PUSH
41235: LD_VAR 0 1
41239: PUSH
41240: LD_VAR 0 3
41244: MINUS
41245: ST_TO_ADDR
// if y - r < 0 then
41246: LD_VAR 0 2
41250: PUSH
41251: LD_VAR 0 3
41255: MINUS
41256: PUSH
41257: LD_INT 0
41259: LESS
41260: IFFALSE 41272
// min_y := 0 else
41262: LD_ADDR_VAR 0 7
41266: PUSH
41267: LD_INT 0
41269: ST_TO_ADDR
41270: GO 41288
// min_y := y - r ;
41272: LD_ADDR_VAR 0 7
41276: PUSH
41277: LD_VAR 0 2
41281: PUSH
41282: LD_VAR 0 3
41286: MINUS
41287: ST_TO_ADDR
// max_x := x + r ;
41288: LD_ADDR_VAR 0 9
41292: PUSH
41293: LD_VAR 0 1
41297: PUSH
41298: LD_VAR 0 3
41302: PLUS
41303: ST_TO_ADDR
// max_y := y + r ;
41304: LD_ADDR_VAR 0 10
41308: PUSH
41309: LD_VAR 0 2
41313: PUSH
41314: LD_VAR 0 3
41318: PLUS
41319: ST_TO_ADDR
// for _x = min_x to max_x do
41320: LD_ADDR_VAR 0 5
41324: PUSH
41325: DOUBLE
41326: LD_VAR 0 8
41330: DEC
41331: ST_TO_ADDR
41332: LD_VAR 0 9
41336: PUSH
41337: FOR_TO
41338: IFFALSE 41439
// for _y = min_y to max_y do
41340: LD_ADDR_VAR 0 6
41344: PUSH
41345: DOUBLE
41346: LD_VAR 0 7
41350: DEC
41351: ST_TO_ADDR
41352: LD_VAR 0 10
41356: PUSH
41357: FOR_TO
41358: IFFALSE 41435
// begin if not ValidHex ( _x , _y ) then
41360: LD_VAR 0 5
41364: PPUSH
41365: LD_VAR 0 6
41369: PPUSH
41370: CALL_OW 488
41374: NOT
41375: IFFALSE 41379
// continue ;
41377: GO 41357
// if GetResourceTypeXY ( _x , _y ) then
41379: LD_VAR 0 5
41383: PPUSH
41384: LD_VAR 0 6
41388: PPUSH
41389: CALL_OW 283
41393: IFFALSE 41433
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41395: LD_ADDR_VAR 0 4
41399: PUSH
41400: LD_VAR 0 4
41404: PPUSH
41405: LD_VAR 0 4
41409: PUSH
41410: LD_INT 1
41412: PLUS
41413: PPUSH
41414: LD_VAR 0 5
41418: PUSH
41419: LD_VAR 0 6
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PPUSH
41428: CALL_OW 1
41432: ST_TO_ADDR
// end ;
41433: GO 41357
41435: POP
41436: POP
41437: GO 41337
41439: POP
41440: POP
// end ;
41441: LD_VAR 0 4
41445: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41446: LD_INT 0
41448: PPUSH
41449: PPUSH
41450: PPUSH
41451: PPUSH
41452: PPUSH
41453: PPUSH
41454: PPUSH
41455: PPUSH
// if not units then
41456: LD_VAR 0 1
41460: NOT
41461: IFFALSE 41465
// exit ;
41463: GO 41989
// result := UnitFilter ( units , [ f_ok ] ) ;
41465: LD_ADDR_VAR 0 3
41469: PUSH
41470: LD_VAR 0 1
41474: PPUSH
41475: LD_INT 50
41477: PUSH
41478: EMPTY
41479: LIST
41480: PPUSH
41481: CALL_OW 72
41485: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41486: LD_ADDR_VAR 0 8
41490: PUSH
41491: LD_VAR 0 1
41495: PUSH
41496: LD_INT 1
41498: ARRAY
41499: PPUSH
41500: CALL_OW 255
41504: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41505: LD_ADDR_VAR 0 10
41509: PUSH
41510: LD_INT 29
41512: PUSH
41513: LD_INT 91
41515: PUSH
41516: LD_INT 49
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: LIST
41523: ST_TO_ADDR
// if not result then
41524: LD_VAR 0 3
41528: NOT
41529: IFFALSE 41533
// exit ;
41531: GO 41989
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41533: LD_ADDR_VAR 0 5
41537: PUSH
41538: LD_INT 81
41540: PUSH
41541: LD_VAR 0 8
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PPUSH
41550: CALL_OW 69
41554: ST_TO_ADDR
// for i in result do
41555: LD_ADDR_VAR 0 4
41559: PUSH
41560: LD_VAR 0 3
41564: PUSH
41565: FOR_IN
41566: IFFALSE 41987
// begin tag := GetTag ( i ) + 1 ;
41568: LD_ADDR_VAR 0 9
41572: PUSH
41573: LD_VAR 0 4
41577: PPUSH
41578: CALL_OW 110
41582: PUSH
41583: LD_INT 1
41585: PLUS
41586: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41587: LD_ADDR_VAR 0 7
41591: PUSH
41592: LD_VAR 0 4
41596: PPUSH
41597: CALL_OW 250
41601: PPUSH
41602: LD_VAR 0 4
41606: PPUSH
41607: CALL_OW 251
41611: PPUSH
41612: LD_INT 6
41614: PPUSH
41615: CALL 41188 0 3
41619: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41620: LD_VAR 0 4
41624: PPUSH
41625: CALL_OW 247
41629: PUSH
41630: LD_INT 2
41632: EQUAL
41633: PUSH
41634: LD_VAR 0 7
41638: AND
41639: PUSH
41640: LD_VAR 0 4
41644: PPUSH
41645: CALL_OW 264
41649: PUSH
41650: LD_VAR 0 10
41654: IN
41655: NOT
41656: AND
41657: IFFALSE 41696
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41659: LD_VAR 0 4
41663: PPUSH
41664: LD_VAR 0 7
41668: PUSH
41669: LD_INT 1
41671: ARRAY
41672: PUSH
41673: LD_INT 1
41675: ARRAY
41676: PPUSH
41677: LD_VAR 0 7
41681: PUSH
41682: LD_INT 1
41684: ARRAY
41685: PUSH
41686: LD_INT 2
41688: ARRAY
41689: PPUSH
41690: CALL_OW 116
41694: GO 41985
// if path > tag then
41696: LD_VAR 0 2
41700: PUSH
41701: LD_VAR 0 9
41705: GREATER
41706: IFFALSE 41914
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41708: LD_ADDR_VAR 0 6
41712: PUSH
41713: LD_VAR 0 5
41717: PPUSH
41718: LD_INT 91
41720: PUSH
41721: LD_VAR 0 4
41725: PUSH
41726: LD_INT 8
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: LIST
41733: PPUSH
41734: CALL_OW 72
41738: ST_TO_ADDR
// if nearEnemy then
41739: LD_VAR 0 6
41743: IFFALSE 41812
// begin if GetWeapon ( i ) = ru_time_lapser then
41745: LD_VAR 0 4
41749: PPUSH
41750: CALL_OW 264
41754: PUSH
41755: LD_INT 49
41757: EQUAL
41758: IFFALSE 41786
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41760: LD_VAR 0 4
41764: PPUSH
41765: LD_VAR 0 6
41769: PPUSH
41770: LD_VAR 0 4
41774: PPUSH
41775: CALL_OW 74
41779: PPUSH
41780: CALL_OW 112
41784: GO 41810
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41786: LD_VAR 0 4
41790: PPUSH
41791: LD_VAR 0 6
41795: PPUSH
41796: LD_VAR 0 4
41800: PPUSH
41801: CALL_OW 74
41805: PPUSH
41806: CALL 42914 0 2
// end else
41810: GO 41912
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41812: LD_VAR 0 4
41816: PPUSH
41817: LD_VAR 0 2
41821: PUSH
41822: LD_VAR 0 9
41826: ARRAY
41827: PUSH
41828: LD_INT 1
41830: ARRAY
41831: PPUSH
41832: LD_VAR 0 2
41836: PUSH
41837: LD_VAR 0 9
41841: ARRAY
41842: PUSH
41843: LD_INT 2
41845: ARRAY
41846: PPUSH
41847: CALL_OW 297
41851: PUSH
41852: LD_INT 6
41854: GREATER
41855: IFFALSE 41898
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41857: LD_VAR 0 4
41861: PPUSH
41862: LD_VAR 0 2
41866: PUSH
41867: LD_VAR 0 9
41871: ARRAY
41872: PUSH
41873: LD_INT 1
41875: ARRAY
41876: PPUSH
41877: LD_VAR 0 2
41881: PUSH
41882: LD_VAR 0 9
41886: ARRAY
41887: PUSH
41888: LD_INT 2
41890: ARRAY
41891: PPUSH
41892: CALL_OW 114
41896: GO 41912
// SetTag ( i , tag ) ;
41898: LD_VAR 0 4
41902: PPUSH
41903: LD_VAR 0 9
41907: PPUSH
41908: CALL_OW 109
// end else
41912: GO 41985
// if enemy then
41914: LD_VAR 0 5
41918: IFFALSE 41985
// begin if GetWeapon ( i ) = ru_time_lapser then
41920: LD_VAR 0 4
41924: PPUSH
41925: CALL_OW 264
41929: PUSH
41930: LD_INT 49
41932: EQUAL
41933: IFFALSE 41961
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41935: LD_VAR 0 4
41939: PPUSH
41940: LD_VAR 0 5
41944: PPUSH
41945: LD_VAR 0 4
41949: PPUSH
41950: CALL_OW 74
41954: PPUSH
41955: CALL_OW 112
41959: GO 41985
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41961: LD_VAR 0 4
41965: PPUSH
41966: LD_VAR 0 5
41970: PPUSH
41971: LD_VAR 0 4
41975: PPUSH
41976: CALL_OW 74
41980: PPUSH
41981: CALL 42914 0 2
// end ; end ;
41985: GO 41565
41987: POP
41988: POP
// end ;
41989: LD_VAR 0 3
41993: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41994: LD_INT 0
41996: PPUSH
41997: PPUSH
41998: PPUSH
// if not unit or IsInUnit ( unit ) then
41999: LD_VAR 0 1
42003: NOT
42004: PUSH
42005: LD_VAR 0 1
42009: PPUSH
42010: CALL_OW 310
42014: OR
42015: IFFALSE 42019
// exit ;
42017: GO 42110
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42019: LD_ADDR_VAR 0 4
42023: PUSH
42024: LD_VAR 0 1
42028: PPUSH
42029: CALL_OW 250
42033: PPUSH
42034: LD_VAR 0 2
42038: PPUSH
42039: LD_INT 1
42041: PPUSH
42042: CALL_OW 272
42046: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42047: LD_ADDR_VAR 0 5
42051: PUSH
42052: LD_VAR 0 1
42056: PPUSH
42057: CALL_OW 251
42061: PPUSH
42062: LD_VAR 0 2
42066: PPUSH
42067: LD_INT 1
42069: PPUSH
42070: CALL_OW 273
42074: ST_TO_ADDR
// if ValidHex ( x , y ) then
42075: LD_VAR 0 4
42079: PPUSH
42080: LD_VAR 0 5
42084: PPUSH
42085: CALL_OW 488
42089: IFFALSE 42110
// ComTurnXY ( unit , x , y ) ;
42091: LD_VAR 0 1
42095: PPUSH
42096: LD_VAR 0 4
42100: PPUSH
42101: LD_VAR 0 5
42105: PPUSH
42106: CALL_OW 118
// end ;
42110: LD_VAR 0 3
42114: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42115: LD_INT 0
42117: PPUSH
42118: PPUSH
// result := false ;
42119: LD_ADDR_VAR 0 3
42123: PUSH
42124: LD_INT 0
42126: ST_TO_ADDR
// if not units then
42127: LD_VAR 0 2
42131: NOT
42132: IFFALSE 42136
// exit ;
42134: GO 42181
// for i in units do
42136: LD_ADDR_VAR 0 4
42140: PUSH
42141: LD_VAR 0 2
42145: PUSH
42146: FOR_IN
42147: IFFALSE 42179
// if See ( side , i ) then
42149: LD_VAR 0 1
42153: PPUSH
42154: LD_VAR 0 4
42158: PPUSH
42159: CALL_OW 292
42163: IFFALSE 42177
// begin result := true ;
42165: LD_ADDR_VAR 0 3
42169: PUSH
42170: LD_INT 1
42172: ST_TO_ADDR
// exit ;
42173: POP
42174: POP
42175: GO 42181
// end ;
42177: GO 42146
42179: POP
42180: POP
// end ;
42181: LD_VAR 0 3
42185: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42186: LD_INT 0
42188: PPUSH
42189: PPUSH
42190: PPUSH
42191: PPUSH
// if not unit or not points then
42192: LD_VAR 0 1
42196: NOT
42197: PUSH
42198: LD_VAR 0 2
42202: NOT
42203: OR
42204: IFFALSE 42208
// exit ;
42206: GO 42298
// dist := 99999 ;
42208: LD_ADDR_VAR 0 5
42212: PUSH
42213: LD_INT 99999
42215: ST_TO_ADDR
// for i in points do
42216: LD_ADDR_VAR 0 4
42220: PUSH
42221: LD_VAR 0 2
42225: PUSH
42226: FOR_IN
42227: IFFALSE 42296
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42229: LD_ADDR_VAR 0 6
42233: PUSH
42234: LD_VAR 0 1
42238: PPUSH
42239: LD_VAR 0 4
42243: PUSH
42244: LD_INT 1
42246: ARRAY
42247: PPUSH
42248: LD_VAR 0 4
42252: PUSH
42253: LD_INT 2
42255: ARRAY
42256: PPUSH
42257: CALL_OW 297
42261: ST_TO_ADDR
// if tmpDist < dist then
42262: LD_VAR 0 6
42266: PUSH
42267: LD_VAR 0 5
42271: LESS
42272: IFFALSE 42294
// begin result := i ;
42274: LD_ADDR_VAR 0 3
42278: PUSH
42279: LD_VAR 0 4
42283: ST_TO_ADDR
// dist := tmpDist ;
42284: LD_ADDR_VAR 0 5
42288: PUSH
42289: LD_VAR 0 6
42293: ST_TO_ADDR
// end ; end ;
42294: GO 42226
42296: POP
42297: POP
// end ;
42298: LD_VAR 0 3
42302: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42303: LD_INT 0
42305: PPUSH
// uc_side := side ;
42306: LD_ADDR_OWVAR 20
42310: PUSH
42311: LD_VAR 0 1
42315: ST_TO_ADDR
// uc_nation := 3 ;
42316: LD_ADDR_OWVAR 21
42320: PUSH
42321: LD_INT 3
42323: ST_TO_ADDR
// vc_chassis := 25 ;
42324: LD_ADDR_OWVAR 37
42328: PUSH
42329: LD_INT 25
42331: ST_TO_ADDR
// vc_engine := engine_siberite ;
42332: LD_ADDR_OWVAR 39
42336: PUSH
42337: LD_INT 3
42339: ST_TO_ADDR
// vc_control := control_computer ;
42340: LD_ADDR_OWVAR 38
42344: PUSH
42345: LD_INT 3
42347: ST_TO_ADDR
// vc_weapon := 59 ;
42348: LD_ADDR_OWVAR 40
42352: PUSH
42353: LD_INT 59
42355: ST_TO_ADDR
// result := CreateVehicle ;
42356: LD_ADDR_VAR 0 5
42360: PUSH
42361: CALL_OW 45
42365: ST_TO_ADDR
// SetDir ( result , d ) ;
42366: LD_VAR 0 5
42370: PPUSH
42371: LD_VAR 0 4
42375: PPUSH
42376: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42380: LD_VAR 0 5
42384: PPUSH
42385: LD_VAR 0 2
42389: PPUSH
42390: LD_VAR 0 3
42394: PPUSH
42395: LD_INT 0
42397: PPUSH
42398: CALL_OW 48
// end ;
42402: LD_VAR 0 5
42406: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42407: LD_INT 0
42409: PPUSH
42410: PPUSH
42411: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42412: LD_ADDR_VAR 0 2
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42435: LD_VAR 0 1
42439: NOT
42440: PUSH
42441: LD_VAR 0 1
42445: PPUSH
42446: CALL_OW 264
42450: PUSH
42451: LD_INT 12
42453: PUSH
42454: LD_INT 51
42456: PUSH
42457: LD_INT 32
42459: PUSH
42460: LD_INT 89
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: IN
42469: NOT
42470: OR
42471: IFFALSE 42475
// exit ;
42473: GO 42573
// for i := 1 to 3 do
42475: LD_ADDR_VAR 0 3
42479: PUSH
42480: DOUBLE
42481: LD_INT 1
42483: DEC
42484: ST_TO_ADDR
42485: LD_INT 3
42487: PUSH
42488: FOR_TO
42489: IFFALSE 42571
// begin tmp := GetCargo ( cargo , i ) ;
42491: LD_ADDR_VAR 0 4
42495: PUSH
42496: LD_VAR 0 1
42500: PPUSH
42501: LD_VAR 0 3
42505: PPUSH
42506: CALL_OW 289
42510: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42511: LD_ADDR_VAR 0 2
42515: PUSH
42516: LD_VAR 0 2
42520: PPUSH
42521: LD_VAR 0 3
42525: PPUSH
42526: LD_VAR 0 4
42530: PPUSH
42531: CALL_OW 1
42535: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42536: LD_ADDR_VAR 0 2
42540: PUSH
42541: LD_VAR 0 2
42545: PPUSH
42546: LD_INT 4
42548: PPUSH
42549: LD_VAR 0 2
42553: PUSH
42554: LD_INT 4
42556: ARRAY
42557: PUSH
42558: LD_VAR 0 4
42562: PLUS
42563: PPUSH
42564: CALL_OW 1
42568: ST_TO_ADDR
// end ;
42569: GO 42488
42571: POP
42572: POP
// end ;
42573: LD_VAR 0 2
42577: RET
// export function Length ( array ) ; begin
42578: LD_INT 0
42580: PPUSH
// result := array + 0 ;
42581: LD_ADDR_VAR 0 2
42585: PUSH
42586: LD_VAR 0 1
42590: PUSH
42591: LD_INT 0
42593: PLUS
42594: ST_TO_ADDR
// end ;
42595: LD_VAR 0 2
42599: RET
// export function PrepareArray ( array ) ; begin
42600: LD_INT 0
42602: PPUSH
// result := array diff 0 ;
42603: LD_ADDR_VAR 0 2
42607: PUSH
42608: LD_VAR 0 1
42612: PUSH
42613: LD_INT 0
42615: DIFF
42616: ST_TO_ADDR
// if not result [ 1 ] then
42617: LD_VAR 0 2
42621: PUSH
42622: LD_INT 1
42624: ARRAY
42625: NOT
42626: IFFALSE 42646
// result := Delete ( result , 1 ) ;
42628: LD_ADDR_VAR 0 2
42632: PUSH
42633: LD_VAR 0 2
42637: PPUSH
42638: LD_INT 1
42640: PPUSH
42641: CALL_OW 3
42645: ST_TO_ADDR
// end ;
42646: LD_VAR 0 2
42650: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42651: LD_INT 0
42653: PPUSH
42654: PPUSH
42655: PPUSH
42656: PPUSH
// sibRocketRange := 25 ;
42657: LD_ADDR_VAR 0 6
42661: PUSH
42662: LD_INT 25
42664: ST_TO_ADDR
// result := false ;
42665: LD_ADDR_VAR 0 4
42669: PUSH
42670: LD_INT 0
42672: ST_TO_ADDR
// for i := 0 to 5 do
42673: LD_ADDR_VAR 0 5
42677: PUSH
42678: DOUBLE
42679: LD_INT 0
42681: DEC
42682: ST_TO_ADDR
42683: LD_INT 5
42685: PUSH
42686: FOR_TO
42687: IFFALSE 42754
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42689: LD_VAR 0 1
42693: PPUSH
42694: LD_VAR 0 5
42698: PPUSH
42699: LD_VAR 0 6
42703: PPUSH
42704: CALL_OW 272
42708: PPUSH
42709: LD_VAR 0 2
42713: PPUSH
42714: LD_VAR 0 5
42718: PPUSH
42719: LD_VAR 0 6
42723: PPUSH
42724: CALL_OW 273
42728: PPUSH
42729: LD_VAR 0 3
42733: PPUSH
42734: CALL_OW 309
42738: IFFALSE 42752
// begin result := true ;
42740: LD_ADDR_VAR 0 4
42744: PUSH
42745: LD_INT 1
42747: ST_TO_ADDR
// exit ;
42748: POP
42749: POP
42750: GO 42756
// end ;
42752: GO 42686
42754: POP
42755: POP
// end ;
42756: LD_VAR 0 4
42760: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42761: LD_INT 0
42763: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42764: LD_VAR 0 1
42768: PPUSH
42769: LD_VAR 0 2
42773: PPUSH
42774: LD_INT 0
42776: PPUSH
42777: LD_INT 0
42779: PPUSH
42780: LD_INT 1
42782: PPUSH
42783: LD_INT 0
42785: PPUSH
42786: CALL_OW 587
// end ;
42790: LD_VAR 0 3
42794: RET
// export function CenterOnNow ( unit ) ; begin
42795: LD_INT 0
42797: PPUSH
// result := IsInUnit ( unit ) ;
42798: LD_ADDR_VAR 0 2
42802: PUSH
42803: LD_VAR 0 1
42807: PPUSH
42808: CALL_OW 310
42812: ST_TO_ADDR
// if not result then
42813: LD_VAR 0 2
42817: NOT
42818: IFFALSE 42830
// result := unit ;
42820: LD_ADDR_VAR 0 2
42824: PUSH
42825: LD_VAR 0 1
42829: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42830: LD_VAR 0 1
42834: PPUSH
42835: CALL_OW 87
// end ;
42839: LD_VAR 0 2
42843: RET
// export function ComMoveHex ( unit , hex ) ; begin
42844: LD_INT 0
42846: PPUSH
// if not hex then
42847: LD_VAR 0 2
42851: NOT
42852: IFFALSE 42856
// exit ;
42854: GO 42909
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42856: LD_VAR 0 2
42860: PUSH
42861: LD_INT 1
42863: ARRAY
42864: PPUSH
42865: LD_VAR 0 2
42869: PUSH
42870: LD_INT 2
42872: ARRAY
42873: PPUSH
42874: CALL_OW 428
42878: IFFALSE 42882
// exit ;
42880: GO 42909
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
42882: LD_VAR 0 1
42886: PPUSH
42887: LD_VAR 0 2
42891: PUSH
42892: LD_INT 1
42894: ARRAY
42895: PPUSH
42896: LD_VAR 0 2
42900: PUSH
42901: LD_INT 2
42903: ARRAY
42904: PPUSH
42905: CALL_OW 111
// end ;
42909: LD_VAR 0 3
42913: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
42914: LD_INT 0
42916: PPUSH
42917: PPUSH
42918: PPUSH
// if not unit or not enemy then
42919: LD_VAR 0 1
42923: NOT
42924: PUSH
42925: LD_VAR 0 2
42929: NOT
42930: OR
42931: IFFALSE 42935
// exit ;
42933: GO 43059
// x := GetX ( enemy ) ;
42935: LD_ADDR_VAR 0 4
42939: PUSH
42940: LD_VAR 0 2
42944: PPUSH
42945: CALL_OW 250
42949: ST_TO_ADDR
// y := GetY ( enemy ) ;
42950: LD_ADDR_VAR 0 5
42954: PUSH
42955: LD_VAR 0 2
42959: PPUSH
42960: CALL_OW 251
42964: ST_TO_ADDR
// if ValidHex ( x , y ) then
42965: LD_VAR 0 4
42969: PPUSH
42970: LD_VAR 0 5
42974: PPUSH
42975: CALL_OW 488
42979: IFFALSE 43059
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
42981: LD_VAR 0 2
42985: PPUSH
42986: CALL_OW 247
42990: PUSH
42991: LD_INT 3
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: IN
43001: PUSH
43002: LD_VAR 0 1
43006: PPUSH
43007: CALL_OW 255
43011: PPUSH
43012: LD_VAR 0 2
43016: PPUSH
43017: CALL_OW 292
43021: AND
43022: IFFALSE 43040
// ComAttackUnit ( unit , enemy ) else
43024: LD_VAR 0 1
43028: PPUSH
43029: LD_VAR 0 2
43033: PPUSH
43034: CALL_OW 115
43038: GO 43059
// ComAgressiveMove ( unit , x , y ) ;
43040: LD_VAR 0 1
43044: PPUSH
43045: LD_VAR 0 4
43049: PPUSH
43050: LD_VAR 0 5
43054: PPUSH
43055: CALL_OW 114
// end ; end_of_file
43059: LD_VAR 0 3
43063: RET
// export ecoSide , ecoNation , ecoPeopleAmount , ecoStartPoint , ecoCratesDrop , ecoCratesDropXY , ecoCratesDropAllow , ecoAttacksAllow , ecoEventsAllow , ecoAttacksArea , ecoEventsList ; export function InitEcoMode ( startPoint , cratesDropXY , attacksArea ) ; var i , tmp , side , nation , peopleAmount , resourcesAmount ; begin
43064: LD_INT 0
43066: PPUSH
43067: PPUSH
43068: PPUSH
43069: PPUSH
43070: PPUSH
43071: PPUSH
43072: PPUSH
// ecoStartPoint := startPoint ;
43073: LD_ADDR_EXP 6
43077: PUSH
43078: LD_VAR 0 1
43082: ST_TO_ADDR
// CenterNowOnXY ( ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
43083: LD_EXP 6
43087: PUSH
43088: LD_INT 1
43090: ARRAY
43091: PPUSH
43092: LD_EXP 6
43096: PUSH
43097: LD_INT 2
43099: ARRAY
43100: PPUSH
43101: CALL_OW 86
// ecoCratesDropXY := cratesDropXY ;
43105: LD_ADDR_EXP 8
43109: PUSH
43110: LD_VAR 0 2
43114: ST_TO_ADDR
// ecoAttacksArea := attacksArea ;
43115: LD_ADDR_EXP 12
43119: PUSH
43120: LD_VAR 0 3
43124: ST_TO_ADDR
// if debug then
43125: LD_EXP 1
43129: IFFALSE 43173
// begin side := 1 ;
43131: LD_ADDR_VAR 0 7
43135: PUSH
43136: LD_INT 1
43138: ST_TO_ADDR
// nation := 1 ;
43139: LD_ADDR_VAR 0 8
43143: PUSH
43144: LD_INT 1
43146: ST_TO_ADDR
// peopleAmount := 15 ;
43147: LD_ADDR_VAR 0 9
43151: PUSH
43152: LD_INT 15
43154: ST_TO_ADDR
// resourcesAmount := 2 ;
43155: LD_ADDR_VAR 0 10
43159: PUSH
43160: LD_INT 2
43162: ST_TO_ADDR
// ecoCratesDrop := 3 ;
43163: LD_ADDR_EXP 7
43167: PUSH
43168: LD_INT 3
43170: ST_TO_ADDR
// end else
43171: GO 43269
// begin side := GetMultiplayerSetting ( 0 ) ;
43173: LD_ADDR_VAR 0 7
43177: PUSH
43178: LD_INT 0
43180: PPUSH
43181: CALL_OW 426
43185: ST_TO_ADDR
// nation := GetMultiplayerSetting ( 1 ) ;
43186: LD_ADDR_VAR 0 8
43190: PUSH
43191: LD_INT 1
43193: PPUSH
43194: CALL_OW 426
43198: ST_TO_ADDR
// peopleAmount := [ 6 , 9 , 12 , 15 , 18 , 21 , 24 ] [ GetMultiplayerSetting ( 2 ) ] ;
43199: LD_ADDR_VAR 0 9
43203: PUSH
43204: LD_INT 6
43206: PUSH
43207: LD_INT 9
43209: PUSH
43210: LD_INT 12
43212: PUSH
43213: LD_INT 15
43215: PUSH
43216: LD_INT 18
43218: PUSH
43219: LD_INT 21
43221: PUSH
43222: LD_INT 24
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: PPUSH
43237: CALL_OW 426
43241: ARRAY
43242: ST_TO_ADDR
// resourcesAmount := GetMultiplayerSetting ( 3 ) ;
43243: LD_ADDR_VAR 0 10
43247: PUSH
43248: LD_INT 3
43250: PPUSH
43251: CALL_OW 426
43255: ST_TO_ADDR
// ecoCratesDrop := GetMultiplayerSetting ( 4 ) ;
43256: LD_ADDR_EXP 7
43260: PUSH
43261: LD_INT 4
43263: PPUSH
43264: CALL_OW 426
43268: ST_TO_ADDR
// end ; ecoCratesDropAllow := true ;
43269: LD_ADDR_EXP 9
43273: PUSH
43274: LD_INT 1
43276: ST_TO_ADDR
// ecoEventsAllow := false ;
43277: LD_ADDR_EXP 11
43281: PUSH
43282: LD_INT 0
43284: ST_TO_ADDR
// ecoAttacksAllow := false ;
43285: LD_ADDR_EXP 10
43289: PUSH
43290: LD_INT 0
43292: ST_TO_ADDR
// ecoSide := side ;
43293: LD_ADDR_EXP 3
43297: PUSH
43298: LD_VAR 0 7
43302: ST_TO_ADDR
// your_side := side ;
43303: LD_ADDR_OWVAR 2
43307: PUSH
43308: LD_VAR 0 7
43312: ST_TO_ADDR
// ChangeSideFog ( 1 , side ) ;
43313: LD_INT 1
43315: PPUSH
43316: LD_VAR 0 7
43320: PPUSH
43321: CALL_OW 343
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
43325: LD_INT 1
43327: PPUSH
43328: LD_INT 1
43330: PPUSH
43331: LD_VAR 0 7
43335: PPUSH
43336: LD_INT 32793
43338: NEG
43339: PPUSH
43340: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
43344: LD_INT 1
43346: PPUSH
43347: LD_INT 1
43349: PPUSH
43350: LD_VAR 0 7
43354: PPUSH
43355: CALL_OW 331
// ecoNation := nation ;
43359: LD_ADDR_EXP 4
43363: PUSH
43364: LD_VAR 0 8
43368: ST_TO_ADDR
// ecoPeopleAmount := peopleAmount ;
43369: LD_ADDR_EXP 5
43373: PUSH
43374: LD_VAR 0 9
43378: ST_TO_ADDR
// for i = 1 to resourcesAmount * 5 do
43379: LD_ADDR_VAR 0 5
43383: PUSH
43384: DOUBLE
43385: LD_INT 1
43387: DEC
43388: ST_TO_ADDR
43389: LD_VAR 0 10
43393: PUSH
43394: LD_INT 5
43396: MUL
43397: PUSH
43398: FOR_TO
43399: IFFALSE 43437
// CreateResourcesXYR ( mat_cans , 5 , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 6 , false ) ;
43401: LD_INT 1
43403: PPUSH
43404: LD_INT 5
43406: PPUSH
43407: LD_EXP 6
43411: PUSH
43412: LD_INT 1
43414: ARRAY
43415: PPUSH
43416: LD_EXP 6
43420: PUSH
43421: LD_INT 2
43423: ARRAY
43424: PPUSH
43425: LD_INT 6
43427: PPUSH
43428: LD_INT 0
43430: PPUSH
43431: CALL_OW 60
43435: GO 43398
43437: POP
43438: POP
// uc_side := side ;
43439: LD_ADDR_OWVAR 20
43443: PUSH
43444: LD_VAR 0 7
43448: ST_TO_ADDR
// uc_nation := nation ;
43449: LD_ADDR_OWVAR 21
43453: PUSH
43454: LD_VAR 0 8
43458: ST_TO_ADDR
// hc_importance := 100 ;
43459: LD_ADDR_OWVAR 32
43463: PUSH
43464: LD_INT 100
43466: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
43467: LD_INT 0
43469: PPUSH
43470: LD_INT 1
43472: PPUSH
43473: LD_INT 4
43475: PPUSH
43476: CALL_OW 380
// if side = 1 and nation = 1 then
43480: LD_VAR 0 7
43484: PUSH
43485: LD_INT 1
43487: EQUAL
43488: PUSH
43489: LD_VAR 0 8
43493: PUSH
43494: LD_INT 1
43496: EQUAL
43497: AND
43498: IFFALSE 43532
// begin hc_name := John Macmilan ;
43500: LD_ADDR_OWVAR 26
43504: PUSH
43505: LD_STRING John Macmilan
43507: ST_TO_ADDR
// hc_gallery := us ;
43508: LD_ADDR_OWVAR 33
43512: PUSH
43513: LD_STRING us
43515: ST_TO_ADDR
// hc_face_number := 5 ;
43516: LD_ADDR_OWVAR 34
43520: PUSH
43521: LD_INT 5
43523: ST_TO_ADDR
// hc_sex := sex_male ;
43524: LD_ADDR_OWVAR 27
43528: PUSH
43529: LD_INT 1
43531: ST_TO_ADDR
// end ; if side = 2 and nation = 2 then
43532: LD_VAR 0 7
43536: PUSH
43537: LD_INT 2
43539: EQUAL
43540: PUSH
43541: LD_VAR 0 8
43545: PUSH
43546: LD_INT 2
43548: EQUAL
43549: AND
43550: IFFALSE 43584
// begin hc_name := Heike Steyer ;
43552: LD_ADDR_OWVAR 26
43556: PUSH
43557: LD_STRING Heike Steyer
43559: ST_TO_ADDR
// hc_gallery := sandar ;
43560: LD_ADDR_OWVAR 33
43564: PUSH
43565: LD_STRING sandar
43567: ST_TO_ADDR
// hc_face_number := 14 ;
43568: LD_ADDR_OWVAR 34
43572: PUSH
43573: LD_INT 14
43575: ST_TO_ADDR
// hc_sex := sex_female ;
43576: LD_ADDR_OWVAR 27
43580: PUSH
43581: LD_INT 2
43583: ST_TO_ADDR
// end ; if side = 5 and nation = 2 then
43584: LD_VAR 0 7
43588: PUSH
43589: LD_INT 5
43591: EQUAL
43592: PUSH
43593: LD_VAR 0 8
43597: PUSH
43598: LD_INT 2
43600: EQUAL
43601: AND
43602: IFFALSE 43644
// begin hc_name := Omar Ali ;
43604: LD_ADDR_OWVAR 26
43608: PUSH
43609: LD_STRING Omar Ali
43611: ST_TO_ADDR
// hc_gallery := sandar ;
43612: LD_ADDR_OWVAR 33
43616: PUSH
43617: LD_STRING sandar
43619: ST_TO_ADDR
// hc_face_number := 6 ;
43620: LD_ADDR_OWVAR 34
43624: PUSH
43625: LD_INT 6
43627: ST_TO_ADDR
// hc_sex := sex_male ;
43628: LD_ADDR_OWVAR 27
43632: PUSH
43633: LD_INT 1
43635: ST_TO_ADDR
// hc_class := class_desert_warior ;
43636: LD_ADDR_OWVAR 28
43640: PUSH
43641: LD_INT 11
43643: ST_TO_ADDR
// end ; if side = 6 and nation = 3 then
43644: LD_VAR 0 7
43648: PUSH
43649: LD_INT 6
43651: EQUAL
43652: PUSH
43653: LD_VAR 0 8
43657: PUSH
43658: LD_INT 3
43660: EQUAL
43661: AND
43662: IFFALSE 43709
// begin PrepareHuman ( false , 3 , 4 ) ;
43664: LD_INT 0
43666: PPUSH
43667: LD_INT 3
43669: PPUSH
43670: LD_INT 4
43672: PPUSH
43673: CALL_OW 380
// hc_name := Yuri I. Burlak ;
43677: LD_ADDR_OWVAR 26
43681: PUSH
43682: LD_STRING Yuri I. Burlak
43684: ST_TO_ADDR
// hc_gallery := ru ;
43685: LD_ADDR_OWVAR 33
43689: PUSH
43690: LD_STRING ru
43692: ST_TO_ADDR
// hc_face_number := 1 ;
43693: LD_ADDR_OWVAR 34
43697: PUSH
43698: LD_INT 1
43700: ST_TO_ADDR
// hc_sex := sex_male ;
43701: LD_ADDR_OWVAR 27
43705: PUSH
43706: LD_INT 1
43708: ST_TO_ADDR
// end ; if side = 4 and nation = 1 then
43709: LD_VAR 0 7
43713: PUSH
43714: LD_INT 4
43716: EQUAL
43717: PUSH
43718: LD_VAR 0 8
43722: PUSH
43723: LD_INT 1
43725: EQUAL
43726: AND
43727: IFFALSE 43761
// begin hc_name := Arthur Powell ;
43729: LD_ADDR_OWVAR 26
43733: PUSH
43734: LD_STRING Arthur Powell
43736: ST_TO_ADDR
// hc_gallery := us ;
43737: LD_ADDR_OWVAR 33
43741: PUSH
43742: LD_STRING us
43744: ST_TO_ADDR
// hc_face_number := 7 ;
43745: LD_ADDR_OWVAR 34
43749: PUSH
43750: LD_INT 7
43752: ST_TO_ADDR
// hc_sex := sex_male ;
43753: LD_ADDR_OWVAR 27
43757: PUSH
43758: LD_INT 1
43760: ST_TO_ADDR
// end ; if side = 3 and nation = 3 then
43761: LD_VAR 0 7
43765: PUSH
43766: LD_INT 3
43768: EQUAL
43769: PUSH
43770: LD_VAR 0 8
43774: PUSH
43775: LD_INT 3
43777: EQUAL
43778: AND
43779: IFFALSE 43813
// begin hc_name := Mjr. Platonov ;
43781: LD_ADDR_OWVAR 26
43785: PUSH
43786: LD_STRING Mjr. Platonov
43788: ST_TO_ADDR
// hc_gallery := ru ;
43789: LD_ADDR_OWVAR 33
43793: PUSH
43794: LD_STRING ru
43796: ST_TO_ADDR
// hc_face_number := 60 ;
43797: LD_ADDR_OWVAR 34
43801: PUSH
43802: LD_INT 60
43804: ST_TO_ADDR
// hc_sex := sex_male ;
43805: LD_ADDR_OWVAR 27
43809: PUSH
43810: LD_INT 1
43812: ST_TO_ADDR
// end ; if side = 7 and nation = 1 then
43813: LD_VAR 0 7
43817: PUSH
43818: LD_INT 7
43820: EQUAL
43821: PUSH
43822: LD_VAR 0 8
43826: PUSH
43827: LD_INT 1
43829: EQUAL
43830: AND
43831: IFFALSE 43878
// begin PrepareHuman ( false , 4 , 4 ) ;
43833: LD_INT 0
43835: PPUSH
43836: LD_INT 4
43838: PPUSH
43839: LD_INT 4
43841: PPUSH
43842: CALL_OW 380
// hc_name := Peter Roth ;
43846: LD_ADDR_OWVAR 26
43850: PUSH
43851: LD_STRING Peter Roth
43853: ST_TO_ADDR
// hc_gallery := us ;
43854: LD_ADDR_OWVAR 33
43858: PUSH
43859: LD_STRING us
43861: ST_TO_ADDR
// hc_face_number := 22 ;
43862: LD_ADDR_OWVAR 34
43866: PUSH
43867: LD_INT 22
43869: ST_TO_ADDR
// hc_sex := sex_male ;
43870: LD_ADDR_OWVAR 27
43874: PUSH
43875: LD_INT 1
43877: ST_TO_ADDR
// end ; if side = 7 and nation = 3 then
43878: LD_VAR 0 7
43882: PUSH
43883: LD_INT 7
43885: EQUAL
43886: PUSH
43887: LD_VAR 0 8
43891: PUSH
43892: LD_INT 3
43894: EQUAL
43895: AND
43896: IFFALSE 43943
// begin PrepareHuman ( false , 4 , 4 ) ;
43898: LD_INT 0
43900: PPUSH
43901: LD_INT 4
43903: PPUSH
43904: LD_INT 4
43906: PPUSH
43907: CALL_OW 380
// hc_name := Prof. Gossudarov ;
43911: LD_ADDR_OWVAR 26
43915: PUSH
43916: LD_STRING Prof. Gossudarov
43918: ST_TO_ADDR
// hc_gallery := ru ;
43919: LD_ADDR_OWVAR 33
43923: PUSH
43924: LD_STRING ru
43926: ST_TO_ADDR
// hc_face_number := 61 ;
43927: LD_ADDR_OWVAR 34
43931: PUSH
43932: LD_INT 61
43934: ST_TO_ADDR
// hc_sex := sex_male ;
43935: LD_ADDR_OWVAR 27
43939: PUSH
43940: LD_INT 1
43942: ST_TO_ADDR
// end ; if side = 8 and nation = 1 then
43943: LD_VAR 0 7
43947: PUSH
43948: LD_INT 8
43950: EQUAL
43951: PUSH
43952: LD_VAR 0 8
43956: PUSH
43957: LD_INT 1
43959: EQUAL
43960: AND
43961: IFFALSE 43995
// begin hc_name := Ron Harisson ;
43963: LD_ADDR_OWVAR 26
43967: PUSH
43968: LD_STRING Ron Harisson
43970: ST_TO_ADDR
// hc_gallery := us ;
43971: LD_ADDR_OWVAR 33
43975: PUSH
43976: LD_STRING us
43978: ST_TO_ADDR
// hc_face_number := 6 ;
43979: LD_ADDR_OWVAR 34
43983: PUSH
43984: LD_INT 6
43986: ST_TO_ADDR
// hc_sex := sex_male ;
43987: LD_ADDR_OWVAR 27
43991: PUSH
43992: LD_INT 1
43994: ST_TO_ADDR
// end ; if side = 8 and nation = 2 then
43995: LD_VAR 0 7
43999: PUSH
44000: LD_INT 8
44002: EQUAL
44003: PUSH
44004: LD_VAR 0 8
44008: PUSH
44009: LD_INT 2
44011: EQUAL
44012: AND
44013: IFFALSE 44047
// begin hc_name := Louis Schulz ;
44015: LD_ADDR_OWVAR 26
44019: PUSH
44020: LD_STRING Louis Schulz
44022: ST_TO_ADDR
// hc_gallery := sandar ;
44023: LD_ADDR_OWVAR 33
44027: PUSH
44028: LD_STRING sandar
44030: ST_TO_ADDR
// hc_face_number := 1 ;
44031: LD_ADDR_OWVAR 34
44035: PUSH
44036: LD_INT 1
44038: ST_TO_ADDR
// hc_sex := sex_male ;
44039: LD_ADDR_OWVAR 27
44043: PUSH
44044: LD_INT 1
44046: ST_TO_ADDR
// end ; PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
44047: CALL_OW 44
44051: PPUSH
44052: LD_EXP 6
44056: PUSH
44057: LD_INT 1
44059: ARRAY
44060: PPUSH
44061: LD_EXP 6
44065: PUSH
44066: LD_INT 2
44068: ARRAY
44069: PPUSH
44070: LD_INT 12
44072: PPUSH
44073: LD_INT 0
44075: PPUSH
44076: CALL_OW 50
// InitHc_All ( ) ;
44080: CALL_OW 584
// for i = 1 to peopleAmount - 1 do
44084: LD_ADDR_VAR 0 5
44088: PUSH
44089: DOUBLE
44090: LD_INT 1
44092: DEC
44093: ST_TO_ADDR
44094: LD_VAR 0 9
44098: PUSH
44099: LD_INT 1
44101: MINUS
44102: PUSH
44103: FOR_TO
44104: IFFALSE 44199
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
44106: LD_INT 0
44108: PPUSH
44109: LD_VAR 0 5
44113: PUSH
44114: LD_INT 4
44116: MOD
44117: PUSH
44118: LD_INT 1
44120: PLUS
44121: PPUSH
44122: LD_INT 3
44124: PPUSH
44125: CALL_OW 380
// tmp := Replace ( tmp , tmp + 1 , CreateHuman ) ;
44129: LD_ADDR_VAR 0 6
44133: PUSH
44134: LD_VAR 0 6
44138: PPUSH
44139: LD_VAR 0 6
44143: PUSH
44144: LD_INT 1
44146: PLUS
44147: PPUSH
44148: CALL_OW 44
44152: PPUSH
44153: CALL_OW 1
44157: ST_TO_ADDR
// PlaceUnitXYR ( tmp [ tmp ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , false ) ;
44158: LD_VAR 0 6
44162: PUSH
44163: LD_VAR 0 6
44167: ARRAY
44168: PPUSH
44169: LD_EXP 6
44173: PUSH
44174: LD_INT 1
44176: ARRAY
44177: PPUSH
44178: LD_EXP 6
44182: PUSH
44183: LD_INT 2
44185: ARRAY
44186: PPUSH
44187: LD_INT 12
44189: PPUSH
44190: LD_INT 0
44192: PPUSH
44193: CALL_OW 50
// end ;
44197: GO 44103
44199: POP
44200: POP
// end ;
44201: LD_VAR 0 4
44205: RET
// every 0 0$1 trigger ecoCratesDrop and ecoCratesDropXY do var time , xy ;
44206: LD_EXP 7
44210: PUSH
44211: LD_EXP 8
44215: AND
44216: IFFALSE 44386
44218: GO 44220
44220: DISABLE
44221: LD_INT 0
44223: PPUSH
44224: PPUSH
// begin time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
44225: LD_ADDR_VAR 0 1
44229: PUSH
44230: LD_INT 700
44232: PUSH
44233: LD_INT 350
44235: PUSH
44236: LD_INT 175
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: LIST
44243: PUSH
44244: LD_EXP 7
44248: ARRAY
44249: ST_TO_ADDR
// while true do
44250: LD_INT 1
44252: IFFALSE 44386
// begin wait ( time ) ;
44254: LD_VAR 0 1
44258: PPUSH
44259: CALL_OW 67
// if not ecoCratesDropAllow then
44263: LD_EXP 9
44267: NOT
44268: IFFALSE 44272
// continue ;
44270: GO 44250
// time := time + 0 0$2 ;
44272: LD_ADDR_VAR 0 1
44276: PUSH
44277: LD_VAR 0 1
44281: PUSH
44282: LD_INT 70
44284: PLUS
44285: ST_TO_ADDR
// if time > 0 0$40 then
44286: LD_VAR 0 1
44290: PUSH
44291: LD_INT 1400
44293: GREATER
44294: IFFALSE 44321
// time := [ 0 0$20 , 0 0$10 , 0 0$05 ] [ ecoCratesDrop ] ;
44296: LD_ADDR_VAR 0 1
44300: PUSH
44301: LD_INT 700
44303: PUSH
44304: LD_INT 350
44306: PUSH
44307: LD_INT 175
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: LIST
44314: PUSH
44315: LD_EXP 7
44319: ARRAY
44320: ST_TO_ADDR
// xy := ecoCratesDropXY [ rand ( 1 , ecoCratesDropXY ) ] ;
44321: LD_ADDR_VAR 0 2
44325: PUSH
44326: LD_EXP 8
44330: PUSH
44331: LD_INT 1
44333: PPUSH
44334: LD_EXP 8
44338: PPUSH
44339: CALL_OW 12
44343: ARRAY
44344: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , xy [ 1 ] , xy [ 2 ] , 14 , true ) ;
44345: LD_INT 1
44347: PPUSH
44348: LD_INT 5
44350: PPUSH
44351: CALL_OW 12
44355: PPUSH
44356: LD_VAR 0 2
44360: PUSH
44361: LD_INT 1
44363: ARRAY
44364: PPUSH
44365: LD_VAR 0 2
44369: PUSH
44370: LD_INT 2
44372: ARRAY
44373: PPUSH
44374: LD_INT 14
44376: PPUSH
44377: LD_INT 1
44379: PPUSH
44380: CALL_OW 56
// end ;
44384: GO 44250
// end ;
44386: PPOPN 2
44388: END
// every 0 0$1 trigger ecoAttacksArea and ecoAttacksAllow do var time , area , tmp , i , xy , veh , dir , enemySide , waveBonus ;
44389: LD_EXP 12
44393: PUSH
44394: LD_EXP 10
44398: AND
44399: IFFALSE 45163
44401: GO 44403
44403: DISABLE
44404: LD_INT 0
44406: PPUSH
44407: PPUSH
44408: PPUSH
44409: PPUSH
44410: PPUSH
44411: PPUSH
44412: PPUSH
44413: PPUSH
44414: PPUSH
// begin time := 3 3$00 ;
44415: LD_ADDR_VAR 0 1
44419: PUSH
44420: LD_INT 6300
44422: ST_TO_ADDR
// enemySide := [ 3 , 9 ] [ rand ( 1 , 2 ) ] ;
44423: LD_ADDR_VAR 0 8
44427: PUSH
44428: LD_INT 3
44430: PUSH
44431: LD_INT 9
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: PPUSH
44441: LD_INT 2
44443: PPUSH
44444: CALL_OW 12
44448: ARRAY
44449: ST_TO_ADDR
// waveBonus := 0 ;
44450: LD_ADDR_VAR 0 9
44454: PUSH
44455: LD_INT 0
44457: ST_TO_ADDR
// if ecoSide = enemySide then
44458: LD_EXP 3
44462: PUSH
44463: LD_VAR 0 8
44467: EQUAL
44468: IFFALSE 44478
// enemySide := 1 ;
44470: LD_ADDR_VAR 0 8
44474: PUSH
44475: LD_INT 1
44477: ST_TO_ADDR
// while true do
44478: LD_INT 1
44480: IFFALSE 45163
// begin wait ( time ) ;
44482: LD_VAR 0 1
44486: PPUSH
44487: CALL_OW 67
// if not ecoAttacksAllow then
44491: LD_EXP 10
44495: NOT
44496: IFFALSE 44500
// continue ;
44498: GO 44478
// waveBonus := waveBonus + 2 ;
44500: LD_ADDR_VAR 0 9
44504: PUSH
44505: LD_VAR 0 9
44509: PUSH
44510: LD_INT 2
44512: PLUS
44513: ST_TO_ADDR
// if waveBonus > 20 then
44514: LD_VAR 0 9
44518: PUSH
44519: LD_INT 20
44521: GREATER
44522: IFFALSE 44532
// waveBonus := 20 ;
44524: LD_ADDR_VAR 0 9
44528: PUSH
44529: LD_INT 20
44531: ST_TO_ADDR
// area := ecoAttacksArea [ rand ( 1 , ecoAttacksArea ) ] ;
44532: LD_ADDR_VAR 0 2
44536: PUSH
44537: LD_EXP 12
44541: PUSH
44542: LD_INT 1
44544: PPUSH
44545: LD_EXP 12
44549: PPUSH
44550: CALL_OW 12
44554: ARRAY
44555: ST_TO_ADDR
// tmp := AreaToList ( area , 0 ) ;
44556: LD_ADDR_VAR 0 3
44560: PUSH
44561: LD_VAR 0 2
44565: PPUSH
44566: LD_INT 0
44568: PPUSH
44569: CALL_OW 517
44573: ST_TO_ADDR
// dir := GetDirFromHex ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
44574: LD_ADDR_VAR 0 7
44578: PUSH
44579: LD_VAR 0 3
44583: PUSH
44584: LD_INT 1
44586: ARRAY
44587: PUSH
44588: LD_INT 1
44590: ARRAY
44591: PPUSH
44592: LD_VAR 0 3
44596: PUSH
44597: LD_INT 2
44599: ARRAY
44600: PUSH
44601: LD_INT 1
44603: ARRAY
44604: PPUSH
44605: LD_EXP 6
44609: PUSH
44610: LD_INT 1
44612: ARRAY
44613: PPUSH
44614: LD_EXP 6
44618: PUSH
44619: LD_INT 2
44621: ARRAY
44622: PPUSH
44623: CALL 40247 0 4
44627: ST_TO_ADDR
// xy := PointBetweenXY ( tmp [ 1 ] [ 1 ] , tmp [ 2 ] [ 1 ] , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] ) ;
44628: LD_ADDR_VAR 0 5
44632: PUSH
44633: LD_VAR 0 3
44637: PUSH
44638: LD_INT 1
44640: ARRAY
44641: PUSH
44642: LD_INT 1
44644: ARRAY
44645: PPUSH
44646: LD_VAR 0 3
44650: PUSH
44651: LD_INT 2
44653: ARRAY
44654: PUSH
44655: LD_INT 1
44657: ARRAY
44658: PPUSH
44659: LD_EXP 6
44663: PUSH
44664: LD_INT 1
44666: ARRAY
44667: PPUSH
44668: LD_EXP 6
44672: PUSH
44673: LD_INT 2
44675: ARRAY
44676: PPUSH
44677: CALL 39387 0 4
44681: ST_TO_ADDR
// tmp := [ ] ;
44682: LD_ADDR_VAR 0 3
44686: PUSH
44687: EMPTY
44688: ST_TO_ADDR
// for i := 1 to 6 + waveBonus do
44689: LD_ADDR_VAR 0 4
44693: PUSH
44694: DOUBLE
44695: LD_INT 1
44697: DEC
44698: ST_TO_ADDR
44699: LD_INT 6
44701: PUSH
44702: LD_VAR 0 9
44706: PLUS
44707: PUSH
44708: FOR_TO
44709: IFFALSE 45028
// begin uc_side := enemySide ;
44711: LD_ADDR_OWVAR 20
44715: PUSH
44716: LD_VAR 0 8
44720: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
44721: LD_ADDR_OWVAR 21
44725: PUSH
44726: LD_INT 1
44728: PPUSH
44729: LD_INT 3
44731: PPUSH
44732: CALL_OW 12
44736: ST_TO_ADDR
// case uc_nation of 1 :
44737: LD_OWVAR 21
44741: PUSH
44742: LD_INT 1
44744: DOUBLE
44745: EQUAL
44746: IFTRUE 44750
44748: GO 44791
44750: POP
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , [ us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ; 2 :
44751: LD_INT 5
44753: PPUSH
44754: LD_INT 3
44756: PPUSH
44757: LD_INT 3
44759: PPUSH
44760: LD_INT 6
44762: PUSH
44763: LD_INT 7
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: PPUSH
44773: LD_INT 2
44775: PPUSH
44776: CALL_OW 12
44780: ARRAY
44781: PPUSH
44782: LD_INT 100
44784: PPUSH
44785: CALL 5980 0 5
44789: GO 44894
44791: LD_INT 2
44793: DOUBLE
44794: EQUAL
44795: IFTRUE 44799
44797: GO 44844
44799: POP
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] , 100 ) ; 3 :
44800: LD_INT 14
44802: PPUSH
44803: LD_INT 3
44805: PPUSH
44806: LD_INT 5
44808: PPUSH
44809: LD_INT 27
44811: PUSH
44812: LD_INT 28
44814: PUSH
44815: LD_INT 29
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: PPUSH
44826: LD_INT 3
44828: PPUSH
44829: CALL_OW 12
44833: ARRAY
44834: PPUSH
44835: LD_INT 100
44837: PPUSH
44838: CALL 5980 0 5
44842: GO 44894
44844: LD_INT 3
44846: DOUBLE
44847: EQUAL
44848: IFTRUE 44852
44850: GO 44893
44852: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , [ ru_heavy_gun , ru_rocket ] [ rand ( 1 , 2 ) ] , 100 ) ; end ;
44853: LD_INT 24
44855: PPUSH
44856: LD_INT 3
44858: PPUSH
44859: LD_INT 3
44861: PPUSH
44862: LD_INT 46
44864: PUSH
44865: LD_INT 47
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: PPUSH
44875: LD_INT 2
44877: PPUSH
44878: CALL_OW 12
44882: ARRAY
44883: PPUSH
44884: LD_INT 100
44886: PPUSH
44887: CALL 5980 0 5
44891: GO 44894
44893: POP
// veh := CreateVehicle ;
44894: LD_ADDR_VAR 0 6
44898: PUSH
44899: CALL_OW 45
44903: ST_TO_ADDR
// SetDir ( veh , dir ) ;
44904: LD_VAR 0 6
44908: PPUSH
44909: LD_VAR 0 7
44913: PPUSH
44914: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
44918: LD_VAR 0 6
44922: PPUSH
44923: LD_VAR 0 2
44927: PPUSH
44928: LD_INT 0
44930: PPUSH
44931: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
44935: LD_ADDR_VAR 0 3
44939: PUSH
44940: LD_VAR 0 3
44944: PPUSH
44945: LD_VAR 0 3
44949: PUSH
44950: LD_INT 1
44952: PLUS
44953: PPUSH
44954: LD_VAR 0 6
44958: PPUSH
44959: CALL_OW 1
44963: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) = 0 then
44964: LD_VAR 0 5
44968: PUSH
44969: LD_INT 1
44971: ARRAY
44972: PPUSH
44973: LD_VAR 0 5
44977: PUSH
44978: LD_INT 2
44980: ARRAY
44981: PPUSH
44982: CALL_OW 428
44986: PUSH
44987: LD_INT 0
44989: EQUAL
44990: IFFALSE 45019
// ComMoveXY ( veh , xy [ 1 ] , xy [ 2 ] ) ;
44992: LD_VAR 0 6
44996: PPUSH
44997: LD_VAR 0 5
45001: PUSH
45002: LD_INT 1
45004: ARRAY
45005: PPUSH
45006: LD_VAR 0 5
45010: PUSH
45011: LD_INT 2
45013: ARRAY
45014: PPUSH
45015: CALL_OW 111
// wait ( 0 0$0.5 ) ;
45019: LD_INT 18
45021: PPUSH
45022: CALL_OW 67
// end ;
45026: GO 44708
45028: POP
45029: POP
// if tmp then
45030: LD_VAR 0 3
45034: IFFALSE 45161
// begin repeat wait ( 0 0$2 ) ;
45036: LD_INT 70
45038: PPUSH
45039: CALL_OW 67
// for i in tmp do
45043: LD_ADDR_VAR 0 4
45047: PUSH
45048: LD_VAR 0 3
45052: PUSH
45053: FOR_IN
45054: IFFALSE 45152
// begin if IsDead ( i ) or not IsPlaced ( i ) or GetSide ( i ) <> enemySide then
45056: LD_VAR 0 4
45060: PPUSH
45061: CALL_OW 301
45065: PUSH
45066: LD_VAR 0 4
45070: PPUSH
45071: CALL_OW 305
45075: NOT
45076: OR
45077: PUSH
45078: LD_VAR 0 4
45082: PPUSH
45083: CALL_OW 255
45087: PUSH
45088: LD_VAR 0 8
45092: NONEQUAL
45093: OR
45094: IFFALSE 45114
// tmp := tmp diff i else
45096: LD_ADDR_VAR 0 3
45100: PUSH
45101: LD_VAR 0 3
45105: PUSH
45106: LD_VAR 0 4
45110: DIFF
45111: ST_TO_ADDR
45112: GO 45150
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , ecoSide ] ) , i ) ) ;
45114: LD_VAR 0 4
45118: PPUSH
45119: LD_INT 22
45121: PUSH
45122: LD_EXP 3
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PPUSH
45131: CALL_OW 69
45135: PPUSH
45136: LD_VAR 0 4
45140: PPUSH
45141: CALL_OW 74
45145: PPUSH
45146: CALL_OW 115
// end ;
45150: GO 45053
45152: POP
45153: POP
// until not tmp ;
45154: LD_VAR 0 3
45158: NOT
45159: IFFALSE 45036
// end ; end ;
45161: GO 44478
// end ;
45163: PPOPN 9
45165: END
// every 0 0$1 trigger ecoEventsAllow do var time , xy ;
45166: LD_EXP 11
45170: IFFALSE 45223
45172: GO 45174
45174: DISABLE
45175: LD_INT 0
45177: PPUSH
45178: PPUSH
// begin time := rand ( 1 1$00 , 10 10$00 ) ;
45179: LD_ADDR_VAR 0 1
45183: PUSH
45184: LD_INT 2100
45186: PPUSH
45187: LD_INT 21000
45189: PPUSH
45190: CALL_OW 12
45194: ST_TO_ADDR
// while true do
45195: LD_INT 1
45197: IFFALSE 45223
// begin wait ( time ) ;
45199: LD_VAR 0 1
45203: PPUSH
45204: CALL_OW 67
// if not ecoEventsAllow then
45208: LD_EXP 11
45212: NOT
45213: IFFALSE 45217
// continue ;
45215: GO 45195
// EcoEvent ( ) ;
45217: CALL 45226 0 0
// end ;
45221: GO 45195
// end ;
45223: PPOPN 2
45225: END
// export function EcoEvent ( ) ; var event , tmp , i ; begin
45226: LD_INT 0
45228: PPUSH
45229: PPUSH
45230: PPUSH
45231: PPUSH
// event := rand ( 1 , 5 ) ;
45232: LD_ADDR_VAR 0 2
45236: PUSH
45237: LD_INT 1
45239: PPUSH
45240: LD_INT 5
45242: PPUSH
45243: CALL_OW 12
45247: ST_TO_ADDR
// case event of 1 :
45248: LD_VAR 0 2
45252: PUSH
45253: LD_INT 1
45255: DOUBLE
45256: EQUAL
45257: IFTRUE 45261
45259: GO 45347
45261: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_building ] ) diff FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
45262: LD_ADDR_VAR 0 3
45266: PUSH
45267: LD_INT 21
45269: PUSH
45270: LD_INT 3
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PPUSH
45277: CALL_OW 69
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: LD_INT 30
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 30
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: LIST
45309: PPUSH
45310: CALL_OW 69
45314: DIFF
45315: ST_TO_ADDR
// if tmp then
45316: LD_VAR 0 3
45320: IFFALSE 45345
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
45322: LD_VAR 0 3
45326: PUSH
45327: LD_INT 1
45329: PPUSH
45330: LD_VAR 0 3
45334: PPUSH
45335: CALL_OW 12
45339: ARRAY
45340: PPUSH
45341: CALL_OW 65
// end ; 2 :
45345: GO 45546
45347: LD_INT 2
45349: DOUBLE
45350: EQUAL
45351: IFTRUE 45355
45353: GO 45411
45355: POP
// begin uc_side := ecoSide ;
45356: LD_ADDR_OWVAR 20
45360: PUSH
45361: LD_EXP 3
45365: ST_TO_ADDR
// uc_nation := ecoNation ;
45366: LD_ADDR_OWVAR 21
45370: PUSH
45371: LD_EXP 4
45375: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , 8 ) ;
45376: LD_INT 0
45378: PPUSH
45379: LD_INT 1
45381: PPUSH
45382: LD_INT 4
45384: PPUSH
45385: CALL_OW 12
45389: PPUSH
45390: LD_INT 8
45392: PPUSH
45393: CALL_OW 380
// PlaceUnitAnyWhere ( CreateHuman , true ) ;
45397: CALL_OW 44
45401: PPUSH
45402: LD_INT 1
45404: PPUSH
45405: CALL_OW 51
// end ; 3 :
45409: GO 45546
45411: LD_INT 3
45413: DOUBLE
45414: EQUAL
45415: IFTRUE 45419
45417: GO 45471
45419: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_vehicle ] ) ;
45420: LD_ADDR_VAR 0 3
45424: PUSH
45425: LD_INT 21
45427: PUSH
45428: LD_INT 2
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PPUSH
45435: CALL_OW 69
45439: ST_TO_ADDR
// if tmp then
45440: LD_VAR 0 3
45444: IFFALSE 45469
// DestroyUnit ( tmp [ rand ( 1 , tmp ) ] ) ;
45446: LD_VAR 0 3
45450: PUSH
45451: LD_INT 1
45453: PPUSH
45454: LD_VAR 0 3
45458: PPUSH
45459: CALL_OW 12
45463: ARRAY
45464: PPUSH
45465: CALL_OW 65
// end ; 4 :
45469: GO 45546
45471: LD_INT 4
45473: DOUBLE
45474: EQUAL
45475: IFTRUE 45479
45477: GO 45534
45479: POP
// begin tmp := FilterAllUnits ( [ f_type , unit_human ] ) ;
45480: LD_ADDR_VAR 0 3
45484: PUSH
45485: LD_INT 21
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PPUSH
45495: CALL_OW 69
45499: ST_TO_ADDR
// if tmp then
45500: LD_VAR 0 3
45504: IFFALSE 45532
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 190 ) ;
45506: LD_VAR 0 3
45510: PUSH
45511: LD_INT 1
45513: PPUSH
45514: LD_VAR 0 3
45518: PPUSH
45519: CALL_OW 12
45523: ARRAY
45524: PPUSH
45525: LD_INT 190
45527: PPUSH
45528: CALL_OW 234
// end ; 5 :
45532: GO 45546
45534: LD_INT 5
45536: DOUBLE
45537: EQUAL
45538: IFTRUE 45542
45540: GO 45545
45542: POP
// begin end ; end ;
45543: GO 45546
45545: POP
// end ;
45546: LD_VAR 0 1
45550: RET
// export function EcoEnableAllTechs ( ) ; var i ; begin
45551: LD_INT 0
45553: PPUSH
45554: PPUSH
// for i := 1 to 100 do
45555: LD_ADDR_VAR 0 2
45559: PUSH
45560: DOUBLE
45561: LD_INT 1
45563: DEC
45564: ST_TO_ADDR
45565: LD_INT 100
45567: PUSH
45568: FOR_TO
45569: IFFALSE 45590
// SetTech ( i , ecoSide , state_researched ) ;
45571: LD_VAR 0 2
45575: PPUSH
45576: LD_EXP 3
45580: PPUSH
45581: LD_INT 2
45583: PPUSH
45584: CALL_OW 322
45588: GO 45568
45590: POP
45591: POP
// end ;
45592: LD_VAR 0 1
45596: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
45597: LD_VAR 0 2
45601: PUSH
45602: LD_INT 102
45604: EQUAL
45605: IFFALSE 45797
// begin case p3 of 1 :
45607: LD_VAR 0 3
45611: PUSH
45612: LD_INT 1
45614: DOUBLE
45615: EQUAL
45616: IFTRUE 45620
45618: GO 45638
45620: POP
// ecoEventsAllow := Negate ( ecoEventsAllow ) ; 2 :
45621: LD_ADDR_EXP 11
45625: PUSH
45626: LD_EXP 11
45630: PPUSH
45631: CALL 40184 0 1
45635: ST_TO_ADDR
45636: GO 45795
45638: LD_INT 2
45640: DOUBLE
45641: EQUAL
45642: IFTRUE 45646
45644: GO 45664
45646: POP
// ecoAttacksAllow := Negate ( ecoAttacksAllow ) ; 3 :
45647: LD_ADDR_EXP 10
45651: PUSH
45652: LD_EXP 10
45656: PPUSH
45657: CALL 40184 0 1
45661: ST_TO_ADDR
45662: GO 45795
45664: LD_INT 3
45666: DOUBLE
45667: EQUAL
45668: IFTRUE 45672
45670: GO 45690
45672: POP
// ecoCratesDropAllow := Negate ( ecoCratesDropAllow ) ; 4 :
45673: LD_ADDR_EXP 9
45677: PUSH
45678: LD_EXP 9
45682: PPUSH
45683: CALL 40184 0 1
45687: ST_TO_ADDR
45688: GO 45795
45690: LD_INT 4
45692: DOUBLE
45693: EQUAL
45694: IFTRUE 45698
45696: GO 45705
45698: POP
// EcoEnableAllTechs ( ) ; 5 .. 8 :
45699: CALL 45551 0 0
45703: GO 45795
45705: LD_INT 5
45707: DOUBLE
45708: GREATEREQUAL
45709: IFFALSE 45717
45711: LD_INT 8
45713: DOUBLE
45714: LESSEQUAL
45715: IFTRUE 45719
45717: GO 45794
45719: POP
// begin uc_side := ecoSide ;
45720: LD_ADDR_OWVAR 20
45724: PUSH
45725: LD_EXP 3
45729: ST_TO_ADDR
// uc_nation := ecoNation ;
45730: LD_ADDR_OWVAR 21
45734: PUSH
45735: LD_EXP 4
45739: ST_TO_ADDR
// PrepareHuman ( false , p3 - 4 , 4 ) ;
45740: LD_INT 0
45742: PPUSH
45743: LD_VAR 0 3
45747: PUSH
45748: LD_INT 4
45750: MINUS
45751: PPUSH
45752: LD_INT 4
45754: PPUSH
45755: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , ecoStartPoint [ 1 ] , ecoStartPoint [ 2 ] , 12 , true ) ;
45759: CALL_OW 44
45763: PPUSH
45764: LD_EXP 6
45768: PUSH
45769: LD_INT 1
45771: ARRAY
45772: PPUSH
45773: LD_EXP 6
45777: PUSH
45778: LD_INT 2
45780: ARRAY
45781: PPUSH
45782: LD_INT 12
45784: PPUSH
45785: LD_INT 1
45787: PPUSH
45788: CALL_OW 50
// end ; end ;
45792: GO 45795
45794: POP
// end else
45795: GO 45831
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
45797: LD_VAR 0 1
45801: PPUSH
45802: LD_VAR 0 2
45806: PPUSH
45807: LD_VAR 0 3
45811: PPUSH
45812: LD_VAR 0 4
45816: PPUSH
45817: LD_VAR 0 5
45821: PPUSH
45822: LD_VAR 0 6
45826: PPUSH
45827: CALL 46022 0 6
// end ;
45831: PPOPN 6
45833: END
// on MapStart ( p ) do begin if gameType = 1 then
45834: LD_EXP 2
45838: PUSH
45839: LD_INT 1
45841: EQUAL
45842: IFFALSE 45853
// ToLua ( SKIRMISH_GAME_TYPE = 1 ) else
45844: LD_STRING SKIRMISH_GAME_TYPE = 1
45846: PPUSH
45847: CALL_OW 559
45851: GO 45860
// ToLua ( SKIRMISH_GAME_TYPE = 0 ) ;
45853: LD_STRING SKIRMISH_GAME_TYPE = 0
45855: PPUSH
45856: CALL_OW 559
// SOS_MapStart ( ) ;
45860: CALL 45926 0 0
// end ; end_of_file
45864: PPOPN 1
45866: END
// export globalGameSaveCounter ; every 0 0$1 do
45867: GO 45869
45869: DISABLE
// begin enable ;
45870: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
45871: LD_STRING updateTimer(
45873: PUSH
45874: LD_OWVAR 1
45878: STR
45879: PUSH
45880: LD_STRING );
45882: STR
45883: PPUSH
45884: CALL_OW 559
// end ;
45888: END
// every 0 0$1 do
45889: GO 45891
45891: DISABLE
// begin globalGameSaveCounter := 0 ;
45892: LD_ADDR_EXP 14
45896: PUSH
45897: LD_INT 0
45899: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
45900: LD_STRING setGameSaveCounter(0)
45902: PPUSH
45903: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
45907: LD_STRING initStreamRollete();
45909: PPUSH
45910: CALL_OW 559
// InitStreamMode ;
45914: CALL 47240 0 0
// DefineStreamItems ( false ) ;
45918: LD_INT 0
45920: PPUSH
45921: CALL 47704 0 1
// end ;
45925: END
// export function SOS_MapStart ( ) ; begin
45926: LD_INT 0
45928: PPUSH
// if streamModeActive then
45929: LD_EXP 15
45933: IFFALSE 45942
// DefineStreamItems ( true ) ;
45935: LD_INT 1
45937: PPUSH
45938: CALL 47704 0 1
// UpdateLuaVariables ( ) ;
45942: CALL 45959 0 0
// UpdateFactoryWaypoints ( ) ;
45946: CALL 60573 0 0
// UpdateWarehouseGatheringPoints ( ) ;
45950: CALL 60830 0 0
// end ;
45954: LD_VAR 0 1
45958: RET
// function UpdateLuaVariables ( ) ; begin
45959: LD_INT 0
45961: PPUSH
// if globalGameSaveCounter then
45962: LD_EXP 14
45966: IFFALSE 46000
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
45968: LD_ADDR_EXP 14
45972: PUSH
45973: LD_EXP 14
45977: PPUSH
45978: CALL 40203 0 1
45982: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
45983: LD_STRING setGameSaveCounter(
45985: PUSH
45986: LD_EXP 14
45990: STR
45991: PUSH
45992: LD_STRING )
45994: STR
45995: PPUSH
45996: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
46000: LD_STRING setGameDifficulty(
46002: PUSH
46003: LD_OWVAR 67
46007: STR
46008: PUSH
46009: LD_STRING )
46011: STR
46012: PPUSH
46013: CALL_OW 559
// end ;
46017: LD_VAR 0 1
46021: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46022: LD_INT 0
46024: PPUSH
// if p2 = stream_mode then
46025: LD_VAR 0 2
46029: PUSH
46030: LD_INT 100
46032: EQUAL
46033: IFFALSE 47036
// begin if not StreamModeActive then
46035: LD_EXP 15
46039: NOT
46040: IFFALSE 46050
// StreamModeActive := true ;
46042: LD_ADDR_EXP 15
46046: PUSH
46047: LD_INT 1
46049: ST_TO_ADDR
// if p3 = 0 then
46050: LD_VAR 0 3
46054: PUSH
46055: LD_INT 0
46057: EQUAL
46058: IFFALSE 46064
// InitStreamMode ;
46060: CALL 47240 0 0
// if p3 = 1 then
46064: LD_VAR 0 3
46068: PUSH
46069: LD_INT 1
46071: EQUAL
46072: IFFALSE 46082
// sRocket := true ;
46074: LD_ADDR_EXP 20
46078: PUSH
46079: LD_INT 1
46081: ST_TO_ADDR
// if p3 = 2 then
46082: LD_VAR 0 3
46086: PUSH
46087: LD_INT 2
46089: EQUAL
46090: IFFALSE 46100
// sSpeed := true ;
46092: LD_ADDR_EXP 19
46096: PUSH
46097: LD_INT 1
46099: ST_TO_ADDR
// if p3 = 3 then
46100: LD_VAR 0 3
46104: PUSH
46105: LD_INT 3
46107: EQUAL
46108: IFFALSE 46118
// sEngine := true ;
46110: LD_ADDR_EXP 21
46114: PUSH
46115: LD_INT 1
46117: ST_TO_ADDR
// if p3 = 4 then
46118: LD_VAR 0 3
46122: PUSH
46123: LD_INT 4
46125: EQUAL
46126: IFFALSE 46136
// sSpec := true ;
46128: LD_ADDR_EXP 18
46132: PUSH
46133: LD_INT 1
46135: ST_TO_ADDR
// if p3 = 5 then
46136: LD_VAR 0 3
46140: PUSH
46141: LD_INT 5
46143: EQUAL
46144: IFFALSE 46154
// sLevel := true ;
46146: LD_ADDR_EXP 22
46150: PUSH
46151: LD_INT 1
46153: ST_TO_ADDR
// if p3 = 6 then
46154: LD_VAR 0 3
46158: PUSH
46159: LD_INT 6
46161: EQUAL
46162: IFFALSE 46172
// sArmoury := true ;
46164: LD_ADDR_EXP 23
46168: PUSH
46169: LD_INT 1
46171: ST_TO_ADDR
// if p3 = 7 then
46172: LD_VAR 0 3
46176: PUSH
46177: LD_INT 7
46179: EQUAL
46180: IFFALSE 46190
// sRadar := true ;
46182: LD_ADDR_EXP 24
46186: PUSH
46187: LD_INT 1
46189: ST_TO_ADDR
// if p3 = 8 then
46190: LD_VAR 0 3
46194: PUSH
46195: LD_INT 8
46197: EQUAL
46198: IFFALSE 46208
// sBunker := true ;
46200: LD_ADDR_EXP 25
46204: PUSH
46205: LD_INT 1
46207: ST_TO_ADDR
// if p3 = 9 then
46208: LD_VAR 0 3
46212: PUSH
46213: LD_INT 9
46215: EQUAL
46216: IFFALSE 46226
// sHack := true ;
46218: LD_ADDR_EXP 26
46222: PUSH
46223: LD_INT 1
46225: ST_TO_ADDR
// if p3 = 10 then
46226: LD_VAR 0 3
46230: PUSH
46231: LD_INT 10
46233: EQUAL
46234: IFFALSE 46244
// sFire := true ;
46236: LD_ADDR_EXP 27
46240: PUSH
46241: LD_INT 1
46243: ST_TO_ADDR
// if p3 = 11 then
46244: LD_VAR 0 3
46248: PUSH
46249: LD_INT 11
46251: EQUAL
46252: IFFALSE 46262
// sRefresh := true ;
46254: LD_ADDR_EXP 28
46258: PUSH
46259: LD_INT 1
46261: ST_TO_ADDR
// if p3 = 12 then
46262: LD_VAR 0 3
46266: PUSH
46267: LD_INT 12
46269: EQUAL
46270: IFFALSE 46280
// sExp := true ;
46272: LD_ADDR_EXP 29
46276: PUSH
46277: LD_INT 1
46279: ST_TO_ADDR
// if p3 = 13 then
46280: LD_VAR 0 3
46284: PUSH
46285: LD_INT 13
46287: EQUAL
46288: IFFALSE 46298
// sDepot := true ;
46290: LD_ADDR_EXP 30
46294: PUSH
46295: LD_INT 1
46297: ST_TO_ADDR
// if p3 = 14 then
46298: LD_VAR 0 3
46302: PUSH
46303: LD_INT 14
46305: EQUAL
46306: IFFALSE 46316
// sFlag := true ;
46308: LD_ADDR_EXP 31
46312: PUSH
46313: LD_INT 1
46315: ST_TO_ADDR
// if p3 = 15 then
46316: LD_VAR 0 3
46320: PUSH
46321: LD_INT 15
46323: EQUAL
46324: IFFALSE 46334
// sKamikadze := true ;
46326: LD_ADDR_EXP 39
46330: PUSH
46331: LD_INT 1
46333: ST_TO_ADDR
// if p3 = 16 then
46334: LD_VAR 0 3
46338: PUSH
46339: LD_INT 16
46341: EQUAL
46342: IFFALSE 46352
// sTroll := true ;
46344: LD_ADDR_EXP 40
46348: PUSH
46349: LD_INT 1
46351: ST_TO_ADDR
// if p3 = 17 then
46352: LD_VAR 0 3
46356: PUSH
46357: LD_INT 17
46359: EQUAL
46360: IFFALSE 46370
// sSlow := true ;
46362: LD_ADDR_EXP 41
46366: PUSH
46367: LD_INT 1
46369: ST_TO_ADDR
// if p3 = 18 then
46370: LD_VAR 0 3
46374: PUSH
46375: LD_INT 18
46377: EQUAL
46378: IFFALSE 46388
// sLack := true ;
46380: LD_ADDR_EXP 42
46384: PUSH
46385: LD_INT 1
46387: ST_TO_ADDR
// if p3 = 19 then
46388: LD_VAR 0 3
46392: PUSH
46393: LD_INT 19
46395: EQUAL
46396: IFFALSE 46406
// sTank := true ;
46398: LD_ADDR_EXP 44
46402: PUSH
46403: LD_INT 1
46405: ST_TO_ADDR
// if p3 = 20 then
46406: LD_VAR 0 3
46410: PUSH
46411: LD_INT 20
46413: EQUAL
46414: IFFALSE 46424
// sRemote := true ;
46416: LD_ADDR_EXP 45
46420: PUSH
46421: LD_INT 1
46423: ST_TO_ADDR
// if p3 = 21 then
46424: LD_VAR 0 3
46428: PUSH
46429: LD_INT 21
46431: EQUAL
46432: IFFALSE 46442
// sPowell := true ;
46434: LD_ADDR_EXP 46
46438: PUSH
46439: LD_INT 1
46441: ST_TO_ADDR
// if p3 = 22 then
46442: LD_VAR 0 3
46446: PUSH
46447: LD_INT 22
46449: EQUAL
46450: IFFALSE 46460
// sTeleport := true ;
46452: LD_ADDR_EXP 49
46456: PUSH
46457: LD_INT 1
46459: ST_TO_ADDR
// if p3 = 23 then
46460: LD_VAR 0 3
46464: PUSH
46465: LD_INT 23
46467: EQUAL
46468: IFFALSE 46478
// sOilTower := true ;
46470: LD_ADDR_EXP 51
46474: PUSH
46475: LD_INT 1
46477: ST_TO_ADDR
// if p3 = 24 then
46478: LD_VAR 0 3
46482: PUSH
46483: LD_INT 24
46485: EQUAL
46486: IFFALSE 46496
// sShovel := true ;
46488: LD_ADDR_EXP 52
46492: PUSH
46493: LD_INT 1
46495: ST_TO_ADDR
// if p3 = 25 then
46496: LD_VAR 0 3
46500: PUSH
46501: LD_INT 25
46503: EQUAL
46504: IFFALSE 46514
// sSheik := true ;
46506: LD_ADDR_EXP 53
46510: PUSH
46511: LD_INT 1
46513: ST_TO_ADDR
// if p3 = 26 then
46514: LD_VAR 0 3
46518: PUSH
46519: LD_INT 26
46521: EQUAL
46522: IFFALSE 46532
// sEarthquake := true ;
46524: LD_ADDR_EXP 55
46528: PUSH
46529: LD_INT 1
46531: ST_TO_ADDR
// if p3 = 27 then
46532: LD_VAR 0 3
46536: PUSH
46537: LD_INT 27
46539: EQUAL
46540: IFFALSE 46550
// sAI := true ;
46542: LD_ADDR_EXP 56
46546: PUSH
46547: LD_INT 1
46549: ST_TO_ADDR
// if p3 = 28 then
46550: LD_VAR 0 3
46554: PUSH
46555: LD_INT 28
46557: EQUAL
46558: IFFALSE 46568
// sCargo := true ;
46560: LD_ADDR_EXP 59
46564: PUSH
46565: LD_INT 1
46567: ST_TO_ADDR
// if p3 = 29 then
46568: LD_VAR 0 3
46572: PUSH
46573: LD_INT 29
46575: EQUAL
46576: IFFALSE 46586
// sDLaser := true ;
46578: LD_ADDR_EXP 60
46582: PUSH
46583: LD_INT 1
46585: ST_TO_ADDR
// if p3 = 30 then
46586: LD_VAR 0 3
46590: PUSH
46591: LD_INT 30
46593: EQUAL
46594: IFFALSE 46604
// sExchange := true ;
46596: LD_ADDR_EXP 61
46600: PUSH
46601: LD_INT 1
46603: ST_TO_ADDR
// if p3 = 31 then
46604: LD_VAR 0 3
46608: PUSH
46609: LD_INT 31
46611: EQUAL
46612: IFFALSE 46622
// sFac := true ;
46614: LD_ADDR_EXP 62
46618: PUSH
46619: LD_INT 1
46621: ST_TO_ADDR
// if p3 = 32 then
46622: LD_VAR 0 3
46626: PUSH
46627: LD_INT 32
46629: EQUAL
46630: IFFALSE 46640
// sPower := true ;
46632: LD_ADDR_EXP 63
46636: PUSH
46637: LD_INT 1
46639: ST_TO_ADDR
// if p3 = 33 then
46640: LD_VAR 0 3
46644: PUSH
46645: LD_INT 33
46647: EQUAL
46648: IFFALSE 46658
// sRandom := true ;
46650: LD_ADDR_EXP 64
46654: PUSH
46655: LD_INT 1
46657: ST_TO_ADDR
// if p3 = 34 then
46658: LD_VAR 0 3
46662: PUSH
46663: LD_INT 34
46665: EQUAL
46666: IFFALSE 46676
// sShield := true ;
46668: LD_ADDR_EXP 65
46672: PUSH
46673: LD_INT 1
46675: ST_TO_ADDR
// if p3 = 35 then
46676: LD_VAR 0 3
46680: PUSH
46681: LD_INT 35
46683: EQUAL
46684: IFFALSE 46694
// sTime := true ;
46686: LD_ADDR_EXP 66
46690: PUSH
46691: LD_INT 1
46693: ST_TO_ADDR
// if p3 = 36 then
46694: LD_VAR 0 3
46698: PUSH
46699: LD_INT 36
46701: EQUAL
46702: IFFALSE 46712
// sTools := true ;
46704: LD_ADDR_EXP 67
46708: PUSH
46709: LD_INT 1
46711: ST_TO_ADDR
// if p3 = 101 then
46712: LD_VAR 0 3
46716: PUSH
46717: LD_INT 101
46719: EQUAL
46720: IFFALSE 46730
// sSold := true ;
46722: LD_ADDR_EXP 32
46726: PUSH
46727: LD_INT 1
46729: ST_TO_ADDR
// if p3 = 102 then
46730: LD_VAR 0 3
46734: PUSH
46735: LD_INT 102
46737: EQUAL
46738: IFFALSE 46748
// sDiff := true ;
46740: LD_ADDR_EXP 33
46744: PUSH
46745: LD_INT 1
46747: ST_TO_ADDR
// if p3 = 103 then
46748: LD_VAR 0 3
46752: PUSH
46753: LD_INT 103
46755: EQUAL
46756: IFFALSE 46766
// sFog := true ;
46758: LD_ADDR_EXP 36
46762: PUSH
46763: LD_INT 1
46765: ST_TO_ADDR
// if p3 = 104 then
46766: LD_VAR 0 3
46770: PUSH
46771: LD_INT 104
46773: EQUAL
46774: IFFALSE 46784
// sReset := true ;
46776: LD_ADDR_EXP 37
46780: PUSH
46781: LD_INT 1
46783: ST_TO_ADDR
// if p3 = 105 then
46784: LD_VAR 0 3
46788: PUSH
46789: LD_INT 105
46791: EQUAL
46792: IFFALSE 46802
// sSun := true ;
46794: LD_ADDR_EXP 38
46798: PUSH
46799: LD_INT 1
46801: ST_TO_ADDR
// if p3 = 106 then
46802: LD_VAR 0 3
46806: PUSH
46807: LD_INT 106
46809: EQUAL
46810: IFFALSE 46820
// sTiger := true ;
46812: LD_ADDR_EXP 34
46816: PUSH
46817: LD_INT 1
46819: ST_TO_ADDR
// if p3 = 107 then
46820: LD_VAR 0 3
46824: PUSH
46825: LD_INT 107
46827: EQUAL
46828: IFFALSE 46838
// sBomb := true ;
46830: LD_ADDR_EXP 35
46834: PUSH
46835: LD_INT 1
46837: ST_TO_ADDR
// if p3 = 108 then
46838: LD_VAR 0 3
46842: PUSH
46843: LD_INT 108
46845: EQUAL
46846: IFFALSE 46856
// sWound := true ;
46848: LD_ADDR_EXP 43
46852: PUSH
46853: LD_INT 1
46855: ST_TO_ADDR
// if p3 = 109 then
46856: LD_VAR 0 3
46860: PUSH
46861: LD_INT 109
46863: EQUAL
46864: IFFALSE 46874
// sBetray := true ;
46866: LD_ADDR_EXP 47
46870: PUSH
46871: LD_INT 1
46873: ST_TO_ADDR
// if p3 = 110 then
46874: LD_VAR 0 3
46878: PUSH
46879: LD_INT 110
46881: EQUAL
46882: IFFALSE 46892
// sContamin := true ;
46884: LD_ADDR_EXP 48
46888: PUSH
46889: LD_INT 1
46891: ST_TO_ADDR
// if p3 = 111 then
46892: LD_VAR 0 3
46896: PUSH
46897: LD_INT 111
46899: EQUAL
46900: IFFALSE 46910
// sOil := true ;
46902: LD_ADDR_EXP 50
46906: PUSH
46907: LD_INT 1
46909: ST_TO_ADDR
// if p3 = 112 then
46910: LD_VAR 0 3
46914: PUSH
46915: LD_INT 112
46917: EQUAL
46918: IFFALSE 46928
// sStu := true ;
46920: LD_ADDR_EXP 54
46924: PUSH
46925: LD_INT 1
46927: ST_TO_ADDR
// if p3 = 113 then
46928: LD_VAR 0 3
46932: PUSH
46933: LD_INT 113
46935: EQUAL
46936: IFFALSE 46946
// sBazooka := true ;
46938: LD_ADDR_EXP 57
46942: PUSH
46943: LD_INT 1
46945: ST_TO_ADDR
// if p3 = 114 then
46946: LD_VAR 0 3
46950: PUSH
46951: LD_INT 114
46953: EQUAL
46954: IFFALSE 46964
// sMortar := true ;
46956: LD_ADDR_EXP 58
46960: PUSH
46961: LD_INT 1
46963: ST_TO_ADDR
// if p3 = 115 then
46964: LD_VAR 0 3
46968: PUSH
46969: LD_INT 115
46971: EQUAL
46972: IFFALSE 46982
// sRanger := true ;
46974: LD_ADDR_EXP 68
46978: PUSH
46979: LD_INT 1
46981: ST_TO_ADDR
// if p3 = 116 then
46982: LD_VAR 0 3
46986: PUSH
46987: LD_INT 116
46989: EQUAL
46990: IFFALSE 47000
// sComputer := true ;
46992: LD_ADDR_EXP 69
46996: PUSH
46997: LD_INT 1
46999: ST_TO_ADDR
// if p3 = 117 then
47000: LD_VAR 0 3
47004: PUSH
47005: LD_INT 117
47007: EQUAL
47008: IFFALSE 47018
// s30 := true ;
47010: LD_ADDR_EXP 70
47014: PUSH
47015: LD_INT 1
47017: ST_TO_ADDR
// if p3 = 118 then
47018: LD_VAR 0 3
47022: PUSH
47023: LD_INT 118
47025: EQUAL
47026: IFFALSE 47036
// s60 := true ;
47028: LD_ADDR_EXP 71
47032: PUSH
47033: LD_INT 1
47035: ST_TO_ADDR
// end ; if p2 = hack_mode then
47036: LD_VAR 0 2
47040: PUSH
47041: LD_INT 101
47043: EQUAL
47044: IFFALSE 47172
// begin case p3 of 1 :
47046: LD_VAR 0 3
47050: PUSH
47051: LD_INT 1
47053: DOUBLE
47054: EQUAL
47055: IFTRUE 47059
47057: GO 47066
47059: POP
// hHackUnlimitedResources ; 2 :
47060: CALL 59319 0 0
47064: GO 47172
47066: LD_INT 2
47068: DOUBLE
47069: EQUAL
47070: IFTRUE 47074
47072: GO 47081
47074: POP
// hHackSetLevel10 ; 3 :
47075: CALL 59452 0 0
47079: GO 47172
47081: LD_INT 3
47083: DOUBLE
47084: EQUAL
47085: IFTRUE 47089
47087: GO 47096
47089: POP
// hHackSetLevel10YourUnits ; 4 :
47090: CALL 59537 0 0
47094: GO 47172
47096: LD_INT 4
47098: DOUBLE
47099: EQUAL
47100: IFTRUE 47104
47102: GO 47111
47104: POP
// hHackInvincible ; 5 :
47105: CALL 59985 0 0
47109: GO 47172
47111: LD_INT 5
47113: DOUBLE
47114: EQUAL
47115: IFTRUE 47119
47117: GO 47126
47119: POP
// hHackInvisible ; 6 :
47120: CALL 60096 0 0
47124: GO 47172
47126: LD_INT 6
47128: DOUBLE
47129: EQUAL
47130: IFTRUE 47134
47132: GO 47141
47134: POP
// hHackChangeYourSide ; 7 :
47135: CALL 60153 0 0
47139: GO 47172
47141: LD_INT 7
47143: DOUBLE
47144: EQUAL
47145: IFTRUE 47149
47147: GO 47156
47149: POP
// hHackChangeUnitSide ; 8 :
47150: CALL 60195 0 0
47154: GO 47172
47156: LD_INT 8
47158: DOUBLE
47159: EQUAL
47160: IFTRUE 47164
47162: GO 47171
47164: POP
// hHackFog ; end ;
47165: CALL 60296 0 0
47169: GO 47172
47171: POP
// end ; if p2 = game_save_mode then
47172: LD_VAR 0 2
47176: PUSH
47177: LD_INT 102
47179: EQUAL
47180: IFFALSE 47235
// begin if p3 = 1 then
47182: LD_VAR 0 3
47186: PUSH
47187: LD_INT 1
47189: EQUAL
47190: IFFALSE 47202
// globalGameSaveCounter := p4 ;
47192: LD_ADDR_EXP 14
47196: PUSH
47197: LD_VAR 0 4
47201: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
47202: LD_VAR 0 3
47206: PUSH
47207: LD_INT 2
47209: EQUAL
47210: PUSH
47211: LD_EXP 14
47215: AND
47216: IFFALSE 47235
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
47218: LD_STRING setGameSaveCounter(
47220: PUSH
47221: LD_EXP 14
47225: STR
47226: PUSH
47227: LD_STRING )
47229: STR
47230: PPUSH
47231: CALL_OW 559
// end ; end ;
47235: LD_VAR 0 7
47239: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
47240: LD_INT 0
47242: PPUSH
// streamModeActive := false ;
47243: LD_ADDR_EXP 15
47247: PUSH
47248: LD_INT 0
47250: ST_TO_ADDR
// normalCounter := 36 ;
47251: LD_ADDR_EXP 16
47255: PUSH
47256: LD_INT 36
47258: ST_TO_ADDR
// hardcoreCounter := 18 ;
47259: LD_ADDR_EXP 17
47263: PUSH
47264: LD_INT 18
47266: ST_TO_ADDR
// sRocket := false ;
47267: LD_ADDR_EXP 20
47271: PUSH
47272: LD_INT 0
47274: ST_TO_ADDR
// sSpeed := false ;
47275: LD_ADDR_EXP 19
47279: PUSH
47280: LD_INT 0
47282: ST_TO_ADDR
// sEngine := false ;
47283: LD_ADDR_EXP 21
47287: PUSH
47288: LD_INT 0
47290: ST_TO_ADDR
// sSpec := false ;
47291: LD_ADDR_EXP 18
47295: PUSH
47296: LD_INT 0
47298: ST_TO_ADDR
// sLevel := false ;
47299: LD_ADDR_EXP 22
47303: PUSH
47304: LD_INT 0
47306: ST_TO_ADDR
// sArmoury := false ;
47307: LD_ADDR_EXP 23
47311: PUSH
47312: LD_INT 0
47314: ST_TO_ADDR
// sRadar := false ;
47315: LD_ADDR_EXP 24
47319: PUSH
47320: LD_INT 0
47322: ST_TO_ADDR
// sBunker := false ;
47323: LD_ADDR_EXP 25
47327: PUSH
47328: LD_INT 0
47330: ST_TO_ADDR
// sHack := false ;
47331: LD_ADDR_EXP 26
47335: PUSH
47336: LD_INT 0
47338: ST_TO_ADDR
// sFire := false ;
47339: LD_ADDR_EXP 27
47343: PUSH
47344: LD_INT 0
47346: ST_TO_ADDR
// sRefresh := false ;
47347: LD_ADDR_EXP 28
47351: PUSH
47352: LD_INT 0
47354: ST_TO_ADDR
// sExp := false ;
47355: LD_ADDR_EXP 29
47359: PUSH
47360: LD_INT 0
47362: ST_TO_ADDR
// sDepot := false ;
47363: LD_ADDR_EXP 30
47367: PUSH
47368: LD_INT 0
47370: ST_TO_ADDR
// sFlag := false ;
47371: LD_ADDR_EXP 31
47375: PUSH
47376: LD_INT 0
47378: ST_TO_ADDR
// sKamikadze := false ;
47379: LD_ADDR_EXP 39
47383: PUSH
47384: LD_INT 0
47386: ST_TO_ADDR
// sTroll := false ;
47387: LD_ADDR_EXP 40
47391: PUSH
47392: LD_INT 0
47394: ST_TO_ADDR
// sSlow := false ;
47395: LD_ADDR_EXP 41
47399: PUSH
47400: LD_INT 0
47402: ST_TO_ADDR
// sLack := false ;
47403: LD_ADDR_EXP 42
47407: PUSH
47408: LD_INT 0
47410: ST_TO_ADDR
// sTank := false ;
47411: LD_ADDR_EXP 44
47415: PUSH
47416: LD_INT 0
47418: ST_TO_ADDR
// sRemote := false ;
47419: LD_ADDR_EXP 45
47423: PUSH
47424: LD_INT 0
47426: ST_TO_ADDR
// sPowell := false ;
47427: LD_ADDR_EXP 46
47431: PUSH
47432: LD_INT 0
47434: ST_TO_ADDR
// sTeleport := false ;
47435: LD_ADDR_EXP 49
47439: PUSH
47440: LD_INT 0
47442: ST_TO_ADDR
// sOilTower := false ;
47443: LD_ADDR_EXP 51
47447: PUSH
47448: LD_INT 0
47450: ST_TO_ADDR
// sShovel := false ;
47451: LD_ADDR_EXP 52
47455: PUSH
47456: LD_INT 0
47458: ST_TO_ADDR
// sSheik := false ;
47459: LD_ADDR_EXP 53
47463: PUSH
47464: LD_INT 0
47466: ST_TO_ADDR
// sEarthquake := false ;
47467: LD_ADDR_EXP 55
47471: PUSH
47472: LD_INT 0
47474: ST_TO_ADDR
// sAI := false ;
47475: LD_ADDR_EXP 56
47479: PUSH
47480: LD_INT 0
47482: ST_TO_ADDR
// sCargo := false ;
47483: LD_ADDR_EXP 59
47487: PUSH
47488: LD_INT 0
47490: ST_TO_ADDR
// sDLaser := false ;
47491: LD_ADDR_EXP 60
47495: PUSH
47496: LD_INT 0
47498: ST_TO_ADDR
// sExchange := false ;
47499: LD_ADDR_EXP 61
47503: PUSH
47504: LD_INT 0
47506: ST_TO_ADDR
// sFac := false ;
47507: LD_ADDR_EXP 62
47511: PUSH
47512: LD_INT 0
47514: ST_TO_ADDR
// sPower := false ;
47515: LD_ADDR_EXP 63
47519: PUSH
47520: LD_INT 0
47522: ST_TO_ADDR
// sRandom := false ;
47523: LD_ADDR_EXP 64
47527: PUSH
47528: LD_INT 0
47530: ST_TO_ADDR
// sShield := false ;
47531: LD_ADDR_EXP 65
47535: PUSH
47536: LD_INT 0
47538: ST_TO_ADDR
// sTime := false ;
47539: LD_ADDR_EXP 66
47543: PUSH
47544: LD_INT 0
47546: ST_TO_ADDR
// sTools := false ;
47547: LD_ADDR_EXP 67
47551: PUSH
47552: LD_INT 0
47554: ST_TO_ADDR
// sSold := false ;
47555: LD_ADDR_EXP 32
47559: PUSH
47560: LD_INT 0
47562: ST_TO_ADDR
// sDiff := false ;
47563: LD_ADDR_EXP 33
47567: PUSH
47568: LD_INT 0
47570: ST_TO_ADDR
// sFog := false ;
47571: LD_ADDR_EXP 36
47575: PUSH
47576: LD_INT 0
47578: ST_TO_ADDR
// sReset := false ;
47579: LD_ADDR_EXP 37
47583: PUSH
47584: LD_INT 0
47586: ST_TO_ADDR
// sSun := false ;
47587: LD_ADDR_EXP 38
47591: PUSH
47592: LD_INT 0
47594: ST_TO_ADDR
// sTiger := false ;
47595: LD_ADDR_EXP 34
47599: PUSH
47600: LD_INT 0
47602: ST_TO_ADDR
// sBomb := false ;
47603: LD_ADDR_EXP 35
47607: PUSH
47608: LD_INT 0
47610: ST_TO_ADDR
// sWound := false ;
47611: LD_ADDR_EXP 43
47615: PUSH
47616: LD_INT 0
47618: ST_TO_ADDR
// sBetray := false ;
47619: LD_ADDR_EXP 47
47623: PUSH
47624: LD_INT 0
47626: ST_TO_ADDR
// sContamin := false ;
47627: LD_ADDR_EXP 48
47631: PUSH
47632: LD_INT 0
47634: ST_TO_ADDR
// sOil := false ;
47635: LD_ADDR_EXP 50
47639: PUSH
47640: LD_INT 0
47642: ST_TO_ADDR
// sStu := false ;
47643: LD_ADDR_EXP 54
47647: PUSH
47648: LD_INT 0
47650: ST_TO_ADDR
// sBazooka := false ;
47651: LD_ADDR_EXP 57
47655: PUSH
47656: LD_INT 0
47658: ST_TO_ADDR
// sMortar := false ;
47659: LD_ADDR_EXP 58
47663: PUSH
47664: LD_INT 0
47666: ST_TO_ADDR
// sRanger := false ;
47667: LD_ADDR_EXP 68
47671: PUSH
47672: LD_INT 0
47674: ST_TO_ADDR
// sComputer := false ;
47675: LD_ADDR_EXP 69
47679: PUSH
47680: LD_INT 0
47682: ST_TO_ADDR
// s30 := false ;
47683: LD_ADDR_EXP 70
47687: PUSH
47688: LD_INT 0
47690: ST_TO_ADDR
// s60 := false ;
47691: LD_ADDR_EXP 71
47695: PUSH
47696: LD_INT 0
47698: ST_TO_ADDR
// end ;
47699: LD_VAR 0 1
47703: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
47704: LD_INT 0
47706: PPUSH
47707: PPUSH
47708: PPUSH
47709: PPUSH
47710: PPUSH
47711: PPUSH
47712: PPUSH
// result := [ ] ;
47713: LD_ADDR_VAR 0 2
47717: PUSH
47718: EMPTY
47719: ST_TO_ADDR
// if campaign_id = 1 then
47720: LD_OWVAR 69
47724: PUSH
47725: LD_INT 1
47727: EQUAL
47728: IFFALSE 50894
// begin case mission_number of 1 :
47730: LD_OWVAR 70
47734: PUSH
47735: LD_INT 1
47737: DOUBLE
47738: EQUAL
47739: IFTRUE 47743
47741: GO 47819
47743: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
47744: LD_ADDR_VAR 0 2
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: LD_INT 4
47754: PUSH
47755: LD_INT 11
47757: PUSH
47758: LD_INT 12
47760: PUSH
47761: LD_INT 15
47763: PUSH
47764: LD_INT 16
47766: PUSH
47767: LD_INT 22
47769: PUSH
47770: LD_INT 23
47772: PUSH
47773: LD_INT 26
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 101
47789: PUSH
47790: LD_INT 102
47792: PUSH
47793: LD_INT 106
47795: PUSH
47796: LD_INT 116
47798: PUSH
47799: LD_INT 117
47801: PUSH
47802: LD_INT 118
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: ST_TO_ADDR
47817: GO 50892
47819: LD_INT 2
47821: DOUBLE
47822: EQUAL
47823: IFTRUE 47827
47825: GO 47911
47827: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
47828: LD_ADDR_VAR 0 2
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: LD_INT 4
47838: PUSH
47839: LD_INT 11
47841: PUSH
47842: LD_INT 12
47844: PUSH
47845: LD_INT 15
47847: PUSH
47848: LD_INT 16
47850: PUSH
47851: LD_INT 22
47853: PUSH
47854: LD_INT 23
47856: PUSH
47857: LD_INT 26
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 101
47873: PUSH
47874: LD_INT 102
47876: PUSH
47877: LD_INT 105
47879: PUSH
47880: LD_INT 106
47882: PUSH
47883: LD_INT 108
47885: PUSH
47886: LD_INT 116
47888: PUSH
47889: LD_INT 117
47891: PUSH
47892: LD_INT 118
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: ST_TO_ADDR
47909: GO 50892
47911: LD_INT 3
47913: DOUBLE
47914: EQUAL
47915: IFTRUE 47919
47917: GO 48007
47919: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
47920: LD_ADDR_VAR 0 2
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: LD_INT 4
47930: PUSH
47931: LD_INT 5
47933: PUSH
47934: LD_INT 11
47936: PUSH
47937: LD_INT 12
47939: PUSH
47940: LD_INT 15
47942: PUSH
47943: LD_INT 16
47945: PUSH
47946: LD_INT 22
47948: PUSH
47949: LD_INT 26
47951: PUSH
47952: LD_INT 36
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 101
47969: PUSH
47970: LD_INT 102
47972: PUSH
47973: LD_INT 105
47975: PUSH
47976: LD_INT 106
47978: PUSH
47979: LD_INT 108
47981: PUSH
47982: LD_INT 116
47984: PUSH
47985: LD_INT 117
47987: PUSH
47988: LD_INT 118
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: ST_TO_ADDR
48005: GO 50892
48007: LD_INT 4
48009: DOUBLE
48010: EQUAL
48011: IFTRUE 48015
48013: GO 48111
48015: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
48016: LD_ADDR_VAR 0 2
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: LD_INT 4
48026: PUSH
48027: LD_INT 5
48029: PUSH
48030: LD_INT 8
48032: PUSH
48033: LD_INT 11
48035: PUSH
48036: LD_INT 12
48038: PUSH
48039: LD_INT 15
48041: PUSH
48042: LD_INT 16
48044: PUSH
48045: LD_INT 22
48047: PUSH
48048: LD_INT 23
48050: PUSH
48051: LD_INT 26
48053: PUSH
48054: LD_INT 36
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 101
48073: PUSH
48074: LD_INT 102
48076: PUSH
48077: LD_INT 105
48079: PUSH
48080: LD_INT 106
48082: PUSH
48083: LD_INT 108
48085: PUSH
48086: LD_INT 116
48088: PUSH
48089: LD_INT 117
48091: PUSH
48092: LD_INT 118
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: ST_TO_ADDR
48109: GO 50892
48111: LD_INT 5
48113: DOUBLE
48114: EQUAL
48115: IFTRUE 48119
48117: GO 48231
48119: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
48120: LD_ADDR_VAR 0 2
48124: PUSH
48125: LD_INT 2
48127: PUSH
48128: LD_INT 4
48130: PUSH
48131: LD_INT 5
48133: PUSH
48134: LD_INT 6
48136: PUSH
48137: LD_INT 8
48139: PUSH
48140: LD_INT 11
48142: PUSH
48143: LD_INT 12
48145: PUSH
48146: LD_INT 15
48148: PUSH
48149: LD_INT 16
48151: PUSH
48152: LD_INT 22
48154: PUSH
48155: LD_INT 23
48157: PUSH
48158: LD_INT 25
48160: PUSH
48161: LD_INT 26
48163: PUSH
48164: LD_INT 36
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 101
48185: PUSH
48186: LD_INT 102
48188: PUSH
48189: LD_INT 105
48191: PUSH
48192: LD_INT 106
48194: PUSH
48195: LD_INT 108
48197: PUSH
48198: LD_INT 109
48200: PUSH
48201: LD_INT 112
48203: PUSH
48204: LD_INT 116
48206: PUSH
48207: LD_INT 117
48209: PUSH
48210: LD_INT 118
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: ST_TO_ADDR
48229: GO 50892
48231: LD_INT 6
48233: DOUBLE
48234: EQUAL
48235: IFTRUE 48239
48237: GO 48371
48239: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
48240: LD_ADDR_VAR 0 2
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: LD_INT 4
48250: PUSH
48251: LD_INT 5
48253: PUSH
48254: LD_INT 6
48256: PUSH
48257: LD_INT 8
48259: PUSH
48260: LD_INT 11
48262: PUSH
48263: LD_INT 12
48265: PUSH
48266: LD_INT 15
48268: PUSH
48269: LD_INT 16
48271: PUSH
48272: LD_INT 20
48274: PUSH
48275: LD_INT 21
48277: PUSH
48278: LD_INT 22
48280: PUSH
48281: LD_INT 23
48283: PUSH
48284: LD_INT 25
48286: PUSH
48287: LD_INT 26
48289: PUSH
48290: LD_INT 30
48292: PUSH
48293: LD_INT 31
48295: PUSH
48296: LD_INT 32
48298: PUSH
48299: LD_INT 36
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 101
48325: PUSH
48326: LD_INT 102
48328: PUSH
48329: LD_INT 105
48331: PUSH
48332: LD_INT 106
48334: PUSH
48335: LD_INT 108
48337: PUSH
48338: LD_INT 109
48340: PUSH
48341: LD_INT 112
48343: PUSH
48344: LD_INT 116
48346: PUSH
48347: LD_INT 117
48349: PUSH
48350: LD_INT 118
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: ST_TO_ADDR
48369: GO 50892
48371: LD_INT 7
48373: DOUBLE
48374: EQUAL
48375: IFTRUE 48379
48377: GO 48491
48379: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
48380: LD_ADDR_VAR 0 2
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: LD_INT 4
48390: PUSH
48391: LD_INT 5
48393: PUSH
48394: LD_INT 7
48396: PUSH
48397: LD_INT 11
48399: PUSH
48400: LD_INT 12
48402: PUSH
48403: LD_INT 15
48405: PUSH
48406: LD_INT 16
48408: PUSH
48409: LD_INT 20
48411: PUSH
48412: LD_INT 21
48414: PUSH
48415: LD_INT 22
48417: PUSH
48418: LD_INT 23
48420: PUSH
48421: LD_INT 25
48423: PUSH
48424: LD_INT 26
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 101
48445: PUSH
48446: LD_INT 102
48448: PUSH
48449: LD_INT 103
48451: PUSH
48452: LD_INT 105
48454: PUSH
48455: LD_INT 106
48457: PUSH
48458: LD_INT 108
48460: PUSH
48461: LD_INT 112
48463: PUSH
48464: LD_INT 116
48466: PUSH
48467: LD_INT 117
48469: PUSH
48470: LD_INT 118
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: ST_TO_ADDR
48489: GO 50892
48491: LD_INT 8
48493: DOUBLE
48494: EQUAL
48495: IFTRUE 48499
48497: GO 48639
48499: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
48500: LD_ADDR_VAR 0 2
48504: PUSH
48505: LD_INT 2
48507: PUSH
48508: LD_INT 4
48510: PUSH
48511: LD_INT 5
48513: PUSH
48514: LD_INT 6
48516: PUSH
48517: LD_INT 7
48519: PUSH
48520: LD_INT 8
48522: PUSH
48523: LD_INT 11
48525: PUSH
48526: LD_INT 12
48528: PUSH
48529: LD_INT 15
48531: PUSH
48532: LD_INT 16
48534: PUSH
48535: LD_INT 20
48537: PUSH
48538: LD_INT 21
48540: PUSH
48541: LD_INT 22
48543: PUSH
48544: LD_INT 23
48546: PUSH
48547: LD_INT 25
48549: PUSH
48550: LD_INT 26
48552: PUSH
48553: LD_INT 30
48555: PUSH
48556: LD_INT 31
48558: PUSH
48559: LD_INT 32
48561: PUSH
48562: LD_INT 36
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 101
48589: PUSH
48590: LD_INT 102
48592: PUSH
48593: LD_INT 103
48595: PUSH
48596: LD_INT 105
48598: PUSH
48599: LD_INT 106
48601: PUSH
48602: LD_INT 108
48604: PUSH
48605: LD_INT 109
48607: PUSH
48608: LD_INT 112
48610: PUSH
48611: LD_INT 116
48613: PUSH
48614: LD_INT 117
48616: PUSH
48617: LD_INT 118
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: ST_TO_ADDR
48637: GO 50892
48639: LD_INT 9
48641: DOUBLE
48642: EQUAL
48643: IFTRUE 48647
48645: GO 48795
48647: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
48648: LD_ADDR_VAR 0 2
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: LD_INT 4
48658: PUSH
48659: LD_INT 5
48661: PUSH
48662: LD_INT 6
48664: PUSH
48665: LD_INT 7
48667: PUSH
48668: LD_INT 8
48670: PUSH
48671: LD_INT 11
48673: PUSH
48674: LD_INT 12
48676: PUSH
48677: LD_INT 15
48679: PUSH
48680: LD_INT 16
48682: PUSH
48683: LD_INT 20
48685: PUSH
48686: LD_INT 21
48688: PUSH
48689: LD_INT 22
48691: PUSH
48692: LD_INT 23
48694: PUSH
48695: LD_INT 25
48697: PUSH
48698: LD_INT 26
48700: PUSH
48701: LD_INT 28
48703: PUSH
48704: LD_INT 30
48706: PUSH
48707: LD_INT 31
48709: PUSH
48710: LD_INT 32
48712: PUSH
48713: LD_INT 36
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 101
48741: PUSH
48742: LD_INT 102
48744: PUSH
48745: LD_INT 103
48747: PUSH
48748: LD_INT 105
48750: PUSH
48751: LD_INT 106
48753: PUSH
48754: LD_INT 108
48756: PUSH
48757: LD_INT 109
48759: PUSH
48760: LD_INT 112
48762: PUSH
48763: LD_INT 114
48765: PUSH
48766: LD_INT 116
48768: PUSH
48769: LD_INT 117
48771: PUSH
48772: LD_INT 118
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: ST_TO_ADDR
48793: GO 50892
48795: LD_INT 10
48797: DOUBLE
48798: EQUAL
48799: IFTRUE 48803
48801: GO 48999
48803: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
48804: LD_ADDR_VAR 0 2
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: LD_INT 4
48814: PUSH
48815: LD_INT 5
48817: PUSH
48818: LD_INT 6
48820: PUSH
48821: LD_INT 7
48823: PUSH
48824: LD_INT 8
48826: PUSH
48827: LD_INT 9
48829: PUSH
48830: LD_INT 10
48832: PUSH
48833: LD_INT 11
48835: PUSH
48836: LD_INT 12
48838: PUSH
48839: LD_INT 13
48841: PUSH
48842: LD_INT 14
48844: PUSH
48845: LD_INT 15
48847: PUSH
48848: LD_INT 16
48850: PUSH
48851: LD_INT 17
48853: PUSH
48854: LD_INT 18
48856: PUSH
48857: LD_INT 19
48859: PUSH
48860: LD_INT 20
48862: PUSH
48863: LD_INT 21
48865: PUSH
48866: LD_INT 22
48868: PUSH
48869: LD_INT 23
48871: PUSH
48872: LD_INT 24
48874: PUSH
48875: LD_INT 25
48877: PUSH
48878: LD_INT 26
48880: PUSH
48881: LD_INT 28
48883: PUSH
48884: LD_INT 30
48886: PUSH
48887: LD_INT 31
48889: PUSH
48890: LD_INT 32
48892: PUSH
48893: LD_INT 36
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 101
48929: PUSH
48930: LD_INT 102
48932: PUSH
48933: LD_INT 103
48935: PUSH
48936: LD_INT 104
48938: PUSH
48939: LD_INT 105
48941: PUSH
48942: LD_INT 106
48944: PUSH
48945: LD_INT 107
48947: PUSH
48948: LD_INT 108
48950: PUSH
48951: LD_INT 109
48953: PUSH
48954: LD_INT 110
48956: PUSH
48957: LD_INT 111
48959: PUSH
48960: LD_INT 112
48962: PUSH
48963: LD_INT 114
48965: PUSH
48966: LD_INT 116
48968: PUSH
48969: LD_INT 117
48971: PUSH
48972: LD_INT 118
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: ST_TO_ADDR
48997: GO 50892
48999: LD_INT 11
49001: DOUBLE
49002: EQUAL
49003: IFTRUE 49007
49005: GO 49211
49007: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
49008: LD_ADDR_VAR 0 2
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: LD_INT 3
49018: PUSH
49019: LD_INT 4
49021: PUSH
49022: LD_INT 5
49024: PUSH
49025: LD_INT 6
49027: PUSH
49028: LD_INT 7
49030: PUSH
49031: LD_INT 8
49033: PUSH
49034: LD_INT 9
49036: PUSH
49037: LD_INT 10
49039: PUSH
49040: LD_INT 11
49042: PUSH
49043: LD_INT 12
49045: PUSH
49046: LD_INT 13
49048: PUSH
49049: LD_INT 14
49051: PUSH
49052: LD_INT 15
49054: PUSH
49055: LD_INT 16
49057: PUSH
49058: LD_INT 17
49060: PUSH
49061: LD_INT 18
49063: PUSH
49064: LD_INT 19
49066: PUSH
49067: LD_INT 20
49069: PUSH
49070: LD_INT 21
49072: PUSH
49073: LD_INT 22
49075: PUSH
49076: LD_INT 23
49078: PUSH
49079: LD_INT 24
49081: PUSH
49082: LD_INT 25
49084: PUSH
49085: LD_INT 26
49087: PUSH
49088: LD_INT 28
49090: PUSH
49091: LD_INT 30
49093: PUSH
49094: LD_INT 31
49096: PUSH
49097: LD_INT 32
49099: PUSH
49100: LD_INT 34
49102: PUSH
49103: LD_INT 36
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 101
49141: PUSH
49142: LD_INT 102
49144: PUSH
49145: LD_INT 103
49147: PUSH
49148: LD_INT 104
49150: PUSH
49151: LD_INT 105
49153: PUSH
49154: LD_INT 106
49156: PUSH
49157: LD_INT 107
49159: PUSH
49160: LD_INT 108
49162: PUSH
49163: LD_INT 109
49165: PUSH
49166: LD_INT 110
49168: PUSH
49169: LD_INT 111
49171: PUSH
49172: LD_INT 112
49174: PUSH
49175: LD_INT 114
49177: PUSH
49178: LD_INT 116
49180: PUSH
49181: LD_INT 117
49183: PUSH
49184: LD_INT 118
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: ST_TO_ADDR
49209: GO 50892
49211: LD_INT 12
49213: DOUBLE
49214: EQUAL
49215: IFTRUE 49219
49217: GO 49439
49219: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
49220: LD_ADDR_VAR 0 2
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: LD_INT 3
49233: PUSH
49234: LD_INT 4
49236: PUSH
49237: LD_INT 5
49239: PUSH
49240: LD_INT 6
49242: PUSH
49243: LD_INT 7
49245: PUSH
49246: LD_INT 8
49248: PUSH
49249: LD_INT 9
49251: PUSH
49252: LD_INT 10
49254: PUSH
49255: LD_INT 11
49257: PUSH
49258: LD_INT 12
49260: PUSH
49261: LD_INT 13
49263: PUSH
49264: LD_INT 14
49266: PUSH
49267: LD_INT 15
49269: PUSH
49270: LD_INT 16
49272: PUSH
49273: LD_INT 17
49275: PUSH
49276: LD_INT 18
49278: PUSH
49279: LD_INT 19
49281: PUSH
49282: LD_INT 20
49284: PUSH
49285: LD_INT 21
49287: PUSH
49288: LD_INT 22
49290: PUSH
49291: LD_INT 23
49293: PUSH
49294: LD_INT 24
49296: PUSH
49297: LD_INT 25
49299: PUSH
49300: LD_INT 26
49302: PUSH
49303: LD_INT 27
49305: PUSH
49306: LD_INT 28
49308: PUSH
49309: LD_INT 30
49311: PUSH
49312: LD_INT 31
49314: PUSH
49315: LD_INT 32
49317: PUSH
49318: LD_INT 33
49320: PUSH
49321: LD_INT 34
49323: PUSH
49324: LD_INT 36
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 101
49365: PUSH
49366: LD_INT 102
49368: PUSH
49369: LD_INT 103
49371: PUSH
49372: LD_INT 104
49374: PUSH
49375: LD_INT 105
49377: PUSH
49378: LD_INT 106
49380: PUSH
49381: LD_INT 107
49383: PUSH
49384: LD_INT 108
49386: PUSH
49387: LD_INT 109
49389: PUSH
49390: LD_INT 110
49392: PUSH
49393: LD_INT 111
49395: PUSH
49396: LD_INT 112
49398: PUSH
49399: LD_INT 113
49401: PUSH
49402: LD_INT 114
49404: PUSH
49405: LD_INT 116
49407: PUSH
49408: LD_INT 117
49410: PUSH
49411: LD_INT 118
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: ST_TO_ADDR
49437: GO 50892
49439: LD_INT 13
49441: DOUBLE
49442: EQUAL
49443: IFTRUE 49447
49445: GO 49655
49447: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
49448: LD_ADDR_VAR 0 2
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: LD_INT 2
49458: PUSH
49459: LD_INT 3
49461: PUSH
49462: LD_INT 4
49464: PUSH
49465: LD_INT 5
49467: PUSH
49468: LD_INT 8
49470: PUSH
49471: LD_INT 9
49473: PUSH
49474: LD_INT 10
49476: PUSH
49477: LD_INT 11
49479: PUSH
49480: LD_INT 12
49482: PUSH
49483: LD_INT 14
49485: PUSH
49486: LD_INT 15
49488: PUSH
49489: LD_INT 16
49491: PUSH
49492: LD_INT 17
49494: PUSH
49495: LD_INT 18
49497: PUSH
49498: LD_INT 19
49500: PUSH
49501: LD_INT 20
49503: PUSH
49504: LD_INT 21
49506: PUSH
49507: LD_INT 22
49509: PUSH
49510: LD_INT 23
49512: PUSH
49513: LD_INT 24
49515: PUSH
49516: LD_INT 25
49518: PUSH
49519: LD_INT 26
49521: PUSH
49522: LD_INT 27
49524: PUSH
49525: LD_INT 28
49527: PUSH
49528: LD_INT 30
49530: PUSH
49531: LD_INT 31
49533: PUSH
49534: LD_INT 32
49536: PUSH
49537: LD_INT 33
49539: PUSH
49540: LD_INT 34
49542: PUSH
49543: LD_INT 36
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 101
49581: PUSH
49582: LD_INT 102
49584: PUSH
49585: LD_INT 103
49587: PUSH
49588: LD_INT 104
49590: PUSH
49591: LD_INT 105
49593: PUSH
49594: LD_INT 106
49596: PUSH
49597: LD_INT 107
49599: PUSH
49600: LD_INT 108
49602: PUSH
49603: LD_INT 109
49605: PUSH
49606: LD_INT 110
49608: PUSH
49609: LD_INT 111
49611: PUSH
49612: LD_INT 112
49614: PUSH
49615: LD_INT 113
49617: PUSH
49618: LD_INT 114
49620: PUSH
49621: LD_INT 116
49623: PUSH
49624: LD_INT 117
49626: PUSH
49627: LD_INT 118
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: ST_TO_ADDR
49653: GO 50892
49655: LD_INT 14
49657: DOUBLE
49658: EQUAL
49659: IFTRUE 49663
49661: GO 49887
49663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
49664: LD_ADDR_VAR 0 2
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: LD_INT 3
49677: PUSH
49678: LD_INT 4
49680: PUSH
49681: LD_INT 5
49683: PUSH
49684: LD_INT 6
49686: PUSH
49687: LD_INT 7
49689: PUSH
49690: LD_INT 8
49692: PUSH
49693: LD_INT 9
49695: PUSH
49696: LD_INT 10
49698: PUSH
49699: LD_INT 11
49701: PUSH
49702: LD_INT 12
49704: PUSH
49705: LD_INT 13
49707: PUSH
49708: LD_INT 14
49710: PUSH
49711: LD_INT 15
49713: PUSH
49714: LD_INT 16
49716: PUSH
49717: LD_INT 17
49719: PUSH
49720: LD_INT 18
49722: PUSH
49723: LD_INT 19
49725: PUSH
49726: LD_INT 20
49728: PUSH
49729: LD_INT 21
49731: PUSH
49732: LD_INT 22
49734: PUSH
49735: LD_INT 23
49737: PUSH
49738: LD_INT 24
49740: PUSH
49741: LD_INT 25
49743: PUSH
49744: LD_INT 26
49746: PUSH
49747: LD_INT 27
49749: PUSH
49750: LD_INT 28
49752: PUSH
49753: LD_INT 29
49755: PUSH
49756: LD_INT 30
49758: PUSH
49759: LD_INT 31
49761: PUSH
49762: LD_INT 32
49764: PUSH
49765: LD_INT 33
49767: PUSH
49768: LD_INT 34
49770: PUSH
49771: LD_INT 36
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 101
49813: PUSH
49814: LD_INT 102
49816: PUSH
49817: LD_INT 103
49819: PUSH
49820: LD_INT 104
49822: PUSH
49823: LD_INT 105
49825: PUSH
49826: LD_INT 106
49828: PUSH
49829: LD_INT 107
49831: PUSH
49832: LD_INT 108
49834: PUSH
49835: LD_INT 109
49837: PUSH
49838: LD_INT 110
49840: PUSH
49841: LD_INT 111
49843: PUSH
49844: LD_INT 112
49846: PUSH
49847: LD_INT 113
49849: PUSH
49850: LD_INT 114
49852: PUSH
49853: LD_INT 116
49855: PUSH
49856: LD_INT 117
49858: PUSH
49859: LD_INT 118
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: ST_TO_ADDR
49885: GO 50892
49887: LD_INT 15
49889: DOUBLE
49890: EQUAL
49891: IFTRUE 49895
49893: GO 50119
49895: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
49896: LD_ADDR_VAR 0 2
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: LD_INT 3
49909: PUSH
49910: LD_INT 4
49912: PUSH
49913: LD_INT 5
49915: PUSH
49916: LD_INT 6
49918: PUSH
49919: LD_INT 7
49921: PUSH
49922: LD_INT 8
49924: PUSH
49925: LD_INT 9
49927: PUSH
49928: LD_INT 10
49930: PUSH
49931: LD_INT 11
49933: PUSH
49934: LD_INT 12
49936: PUSH
49937: LD_INT 13
49939: PUSH
49940: LD_INT 14
49942: PUSH
49943: LD_INT 15
49945: PUSH
49946: LD_INT 16
49948: PUSH
49949: LD_INT 17
49951: PUSH
49952: LD_INT 18
49954: PUSH
49955: LD_INT 19
49957: PUSH
49958: LD_INT 20
49960: PUSH
49961: LD_INT 21
49963: PUSH
49964: LD_INT 22
49966: PUSH
49967: LD_INT 23
49969: PUSH
49970: LD_INT 24
49972: PUSH
49973: LD_INT 25
49975: PUSH
49976: LD_INT 26
49978: PUSH
49979: LD_INT 27
49981: PUSH
49982: LD_INT 28
49984: PUSH
49985: LD_INT 29
49987: PUSH
49988: LD_INT 30
49990: PUSH
49991: LD_INT 31
49993: PUSH
49994: LD_INT 32
49996: PUSH
49997: LD_INT 33
49999: PUSH
50000: LD_INT 34
50002: PUSH
50003: LD_INT 36
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 101
50045: PUSH
50046: LD_INT 102
50048: PUSH
50049: LD_INT 103
50051: PUSH
50052: LD_INT 104
50054: PUSH
50055: LD_INT 105
50057: PUSH
50058: LD_INT 106
50060: PUSH
50061: LD_INT 107
50063: PUSH
50064: LD_INT 108
50066: PUSH
50067: LD_INT 109
50069: PUSH
50070: LD_INT 110
50072: PUSH
50073: LD_INT 111
50075: PUSH
50076: LD_INT 112
50078: PUSH
50079: LD_INT 113
50081: PUSH
50082: LD_INT 114
50084: PUSH
50085: LD_INT 116
50087: PUSH
50088: LD_INT 117
50090: PUSH
50091: LD_INT 118
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: ST_TO_ADDR
50117: GO 50892
50119: LD_INT 16
50121: DOUBLE
50122: EQUAL
50123: IFTRUE 50127
50125: GO 50263
50127: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
50128: LD_ADDR_VAR 0 2
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: LD_INT 4
50138: PUSH
50139: LD_INT 5
50141: PUSH
50142: LD_INT 7
50144: PUSH
50145: LD_INT 11
50147: PUSH
50148: LD_INT 12
50150: PUSH
50151: LD_INT 15
50153: PUSH
50154: LD_INT 16
50156: PUSH
50157: LD_INT 20
50159: PUSH
50160: LD_INT 21
50162: PUSH
50163: LD_INT 22
50165: PUSH
50166: LD_INT 23
50168: PUSH
50169: LD_INT 25
50171: PUSH
50172: LD_INT 26
50174: PUSH
50175: LD_INT 30
50177: PUSH
50178: LD_INT 31
50180: PUSH
50181: LD_INT 32
50183: PUSH
50184: LD_INT 33
50186: PUSH
50187: LD_INT 34
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 101
50213: PUSH
50214: LD_INT 102
50216: PUSH
50217: LD_INT 103
50219: PUSH
50220: LD_INT 106
50222: PUSH
50223: LD_INT 108
50225: PUSH
50226: LD_INT 112
50228: PUSH
50229: LD_INT 113
50231: PUSH
50232: LD_INT 114
50234: PUSH
50235: LD_INT 116
50237: PUSH
50238: LD_INT 117
50240: PUSH
50241: LD_INT 118
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: ST_TO_ADDR
50261: GO 50892
50263: LD_INT 17
50265: DOUBLE
50266: EQUAL
50267: IFTRUE 50271
50269: GO 50495
50271: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
50272: LD_ADDR_VAR 0 2
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 3
50285: PUSH
50286: LD_INT 4
50288: PUSH
50289: LD_INT 5
50291: PUSH
50292: LD_INT 6
50294: PUSH
50295: LD_INT 7
50297: PUSH
50298: LD_INT 8
50300: PUSH
50301: LD_INT 9
50303: PUSH
50304: LD_INT 10
50306: PUSH
50307: LD_INT 11
50309: PUSH
50310: LD_INT 12
50312: PUSH
50313: LD_INT 13
50315: PUSH
50316: LD_INT 14
50318: PUSH
50319: LD_INT 15
50321: PUSH
50322: LD_INT 16
50324: PUSH
50325: LD_INT 17
50327: PUSH
50328: LD_INT 18
50330: PUSH
50331: LD_INT 19
50333: PUSH
50334: LD_INT 20
50336: PUSH
50337: LD_INT 21
50339: PUSH
50340: LD_INT 22
50342: PUSH
50343: LD_INT 23
50345: PUSH
50346: LD_INT 24
50348: PUSH
50349: LD_INT 25
50351: PUSH
50352: LD_INT 26
50354: PUSH
50355: LD_INT 27
50357: PUSH
50358: LD_INT 28
50360: PUSH
50361: LD_INT 29
50363: PUSH
50364: LD_INT 30
50366: PUSH
50367: LD_INT 31
50369: PUSH
50370: LD_INT 32
50372: PUSH
50373: LD_INT 33
50375: PUSH
50376: LD_INT 34
50378: PUSH
50379: LD_INT 36
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 101
50421: PUSH
50422: LD_INT 102
50424: PUSH
50425: LD_INT 103
50427: PUSH
50428: LD_INT 104
50430: PUSH
50431: LD_INT 105
50433: PUSH
50434: LD_INT 106
50436: PUSH
50437: LD_INT 107
50439: PUSH
50440: LD_INT 108
50442: PUSH
50443: LD_INT 109
50445: PUSH
50446: LD_INT 110
50448: PUSH
50449: LD_INT 111
50451: PUSH
50452: LD_INT 112
50454: PUSH
50455: LD_INT 113
50457: PUSH
50458: LD_INT 114
50460: PUSH
50461: LD_INT 116
50463: PUSH
50464: LD_INT 117
50466: PUSH
50467: LD_INT 118
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: ST_TO_ADDR
50493: GO 50892
50495: LD_INT 18
50497: DOUBLE
50498: EQUAL
50499: IFTRUE 50503
50501: GO 50651
50503: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
50504: LD_ADDR_VAR 0 2
50508: PUSH
50509: LD_INT 2
50511: PUSH
50512: LD_INT 4
50514: PUSH
50515: LD_INT 5
50517: PUSH
50518: LD_INT 7
50520: PUSH
50521: LD_INT 11
50523: PUSH
50524: LD_INT 12
50526: PUSH
50527: LD_INT 15
50529: PUSH
50530: LD_INT 16
50532: PUSH
50533: LD_INT 20
50535: PUSH
50536: LD_INT 21
50538: PUSH
50539: LD_INT 22
50541: PUSH
50542: LD_INT 23
50544: PUSH
50545: LD_INT 25
50547: PUSH
50548: LD_INT 26
50550: PUSH
50551: LD_INT 30
50553: PUSH
50554: LD_INT 31
50556: PUSH
50557: LD_INT 32
50559: PUSH
50560: LD_INT 33
50562: PUSH
50563: LD_INT 34
50565: PUSH
50566: LD_INT 35
50568: PUSH
50569: LD_INT 36
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 101
50597: PUSH
50598: LD_INT 102
50600: PUSH
50601: LD_INT 103
50603: PUSH
50604: LD_INT 106
50606: PUSH
50607: LD_INT 108
50609: PUSH
50610: LD_INT 112
50612: PUSH
50613: LD_INT 113
50615: PUSH
50616: LD_INT 114
50618: PUSH
50619: LD_INT 115
50621: PUSH
50622: LD_INT 116
50624: PUSH
50625: LD_INT 117
50627: PUSH
50628: LD_INT 118
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: ST_TO_ADDR
50649: GO 50892
50651: LD_INT 19
50653: DOUBLE
50654: EQUAL
50655: IFTRUE 50659
50657: GO 50891
50659: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
50660: LD_ADDR_VAR 0 2
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: LD_INT 3
50673: PUSH
50674: LD_INT 4
50676: PUSH
50677: LD_INT 5
50679: PUSH
50680: LD_INT 6
50682: PUSH
50683: LD_INT 7
50685: PUSH
50686: LD_INT 8
50688: PUSH
50689: LD_INT 9
50691: PUSH
50692: LD_INT 10
50694: PUSH
50695: LD_INT 11
50697: PUSH
50698: LD_INT 12
50700: PUSH
50701: LD_INT 13
50703: PUSH
50704: LD_INT 14
50706: PUSH
50707: LD_INT 15
50709: PUSH
50710: LD_INT 16
50712: PUSH
50713: LD_INT 17
50715: PUSH
50716: LD_INT 18
50718: PUSH
50719: LD_INT 19
50721: PUSH
50722: LD_INT 20
50724: PUSH
50725: LD_INT 21
50727: PUSH
50728: LD_INT 22
50730: PUSH
50731: LD_INT 23
50733: PUSH
50734: LD_INT 24
50736: PUSH
50737: LD_INT 25
50739: PUSH
50740: LD_INT 26
50742: PUSH
50743: LD_INT 27
50745: PUSH
50746: LD_INT 28
50748: PUSH
50749: LD_INT 29
50751: PUSH
50752: LD_INT 30
50754: PUSH
50755: LD_INT 31
50757: PUSH
50758: LD_INT 32
50760: PUSH
50761: LD_INT 33
50763: PUSH
50764: LD_INT 34
50766: PUSH
50767: LD_INT 35
50769: PUSH
50770: LD_INT 36
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 101
50813: PUSH
50814: LD_INT 102
50816: PUSH
50817: LD_INT 103
50819: PUSH
50820: LD_INT 104
50822: PUSH
50823: LD_INT 105
50825: PUSH
50826: LD_INT 106
50828: PUSH
50829: LD_INT 107
50831: PUSH
50832: LD_INT 108
50834: PUSH
50835: LD_INT 109
50837: PUSH
50838: LD_INT 110
50840: PUSH
50841: LD_INT 111
50843: PUSH
50844: LD_INT 112
50846: PUSH
50847: LD_INT 113
50849: PUSH
50850: LD_INT 114
50852: PUSH
50853: LD_INT 115
50855: PUSH
50856: LD_INT 116
50858: PUSH
50859: LD_INT 117
50861: PUSH
50862: LD_INT 118
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: ST_TO_ADDR
50889: GO 50892
50891: POP
// end else
50892: GO 51123
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
50894: LD_ADDR_VAR 0 2
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: LD_INT 3
50907: PUSH
50908: LD_INT 4
50910: PUSH
50911: LD_INT 5
50913: PUSH
50914: LD_INT 6
50916: PUSH
50917: LD_INT 7
50919: PUSH
50920: LD_INT 8
50922: PUSH
50923: LD_INT 9
50925: PUSH
50926: LD_INT 10
50928: PUSH
50929: LD_INT 11
50931: PUSH
50932: LD_INT 12
50934: PUSH
50935: LD_INT 13
50937: PUSH
50938: LD_INT 14
50940: PUSH
50941: LD_INT 15
50943: PUSH
50944: LD_INT 16
50946: PUSH
50947: LD_INT 17
50949: PUSH
50950: LD_INT 18
50952: PUSH
50953: LD_INT 19
50955: PUSH
50956: LD_INT 20
50958: PUSH
50959: LD_INT 21
50961: PUSH
50962: LD_INT 22
50964: PUSH
50965: LD_INT 23
50967: PUSH
50968: LD_INT 24
50970: PUSH
50971: LD_INT 25
50973: PUSH
50974: LD_INT 26
50976: PUSH
50977: LD_INT 27
50979: PUSH
50980: LD_INT 28
50982: PUSH
50983: LD_INT 29
50985: PUSH
50986: LD_INT 30
50988: PUSH
50989: LD_INT 31
50991: PUSH
50992: LD_INT 32
50994: PUSH
50995: LD_INT 33
50997: PUSH
50998: LD_INT 34
51000: PUSH
51001: LD_INT 35
51003: PUSH
51004: LD_INT 36
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 101
51047: PUSH
51048: LD_INT 102
51050: PUSH
51051: LD_INT 103
51053: PUSH
51054: LD_INT 104
51056: PUSH
51057: LD_INT 105
51059: PUSH
51060: LD_INT 106
51062: PUSH
51063: LD_INT 107
51065: PUSH
51066: LD_INT 108
51068: PUSH
51069: LD_INT 109
51071: PUSH
51072: LD_INT 110
51074: PUSH
51075: LD_INT 111
51077: PUSH
51078: LD_INT 112
51080: PUSH
51081: LD_INT 113
51083: PUSH
51084: LD_INT 114
51086: PUSH
51087: LD_INT 115
51089: PUSH
51090: LD_INT 116
51092: PUSH
51093: LD_INT 117
51095: PUSH
51096: LD_INT 118
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: ST_TO_ADDR
// if result then
51123: LD_VAR 0 2
51127: IFFALSE 51913
// begin normal :=  ;
51129: LD_ADDR_VAR 0 5
51133: PUSH
51134: LD_STRING 
51136: ST_TO_ADDR
// hardcore :=  ;
51137: LD_ADDR_VAR 0 6
51141: PUSH
51142: LD_STRING 
51144: ST_TO_ADDR
// active :=  ;
51145: LD_ADDR_VAR 0 7
51149: PUSH
51150: LD_STRING 
51152: ST_TO_ADDR
// for i = 1 to normalCounter do
51153: LD_ADDR_VAR 0 8
51157: PUSH
51158: DOUBLE
51159: LD_INT 1
51161: DEC
51162: ST_TO_ADDR
51163: LD_EXP 16
51167: PUSH
51168: FOR_TO
51169: IFFALSE 51270
// begin tmp := 0 ;
51171: LD_ADDR_VAR 0 3
51175: PUSH
51176: LD_STRING 0
51178: ST_TO_ADDR
// if result [ 1 ] then
51179: LD_VAR 0 2
51183: PUSH
51184: LD_INT 1
51186: ARRAY
51187: IFFALSE 51252
// if result [ 1 ] [ 1 ] = i then
51189: LD_VAR 0 2
51193: PUSH
51194: LD_INT 1
51196: ARRAY
51197: PUSH
51198: LD_INT 1
51200: ARRAY
51201: PUSH
51202: LD_VAR 0 8
51206: EQUAL
51207: IFFALSE 51252
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
51209: LD_ADDR_VAR 0 2
51213: PUSH
51214: LD_VAR 0 2
51218: PPUSH
51219: LD_INT 1
51221: PPUSH
51222: LD_VAR 0 2
51226: PUSH
51227: LD_INT 1
51229: ARRAY
51230: PPUSH
51231: LD_INT 1
51233: PPUSH
51234: CALL_OW 3
51238: PPUSH
51239: CALL_OW 1
51243: ST_TO_ADDR
// tmp := 1 ;
51244: LD_ADDR_VAR 0 3
51248: PUSH
51249: LD_STRING 1
51251: ST_TO_ADDR
// end ; normal := normal & tmp ;
51252: LD_ADDR_VAR 0 5
51256: PUSH
51257: LD_VAR 0 5
51261: PUSH
51262: LD_VAR 0 3
51266: STR
51267: ST_TO_ADDR
// end ;
51268: GO 51168
51270: POP
51271: POP
// for i = 1 to hardcoreCounter do
51272: LD_ADDR_VAR 0 8
51276: PUSH
51277: DOUBLE
51278: LD_INT 1
51280: DEC
51281: ST_TO_ADDR
51282: LD_EXP 17
51286: PUSH
51287: FOR_TO
51288: IFFALSE 51393
// begin tmp := 0 ;
51290: LD_ADDR_VAR 0 3
51294: PUSH
51295: LD_STRING 0
51297: ST_TO_ADDR
// if result [ 2 ] then
51298: LD_VAR 0 2
51302: PUSH
51303: LD_INT 2
51305: ARRAY
51306: IFFALSE 51375
// if result [ 2 ] [ 1 ] = 100 + i then
51308: LD_VAR 0 2
51312: PUSH
51313: LD_INT 2
51315: ARRAY
51316: PUSH
51317: LD_INT 1
51319: ARRAY
51320: PUSH
51321: LD_INT 100
51323: PUSH
51324: LD_VAR 0 8
51328: PLUS
51329: EQUAL
51330: IFFALSE 51375
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
51332: LD_ADDR_VAR 0 2
51336: PUSH
51337: LD_VAR 0 2
51341: PPUSH
51342: LD_INT 2
51344: PPUSH
51345: LD_VAR 0 2
51349: PUSH
51350: LD_INT 2
51352: ARRAY
51353: PPUSH
51354: LD_INT 1
51356: PPUSH
51357: CALL_OW 3
51361: PPUSH
51362: CALL_OW 1
51366: ST_TO_ADDR
// tmp := 1 ;
51367: LD_ADDR_VAR 0 3
51371: PUSH
51372: LD_STRING 1
51374: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
51375: LD_ADDR_VAR 0 6
51379: PUSH
51380: LD_VAR 0 6
51384: PUSH
51385: LD_VAR 0 3
51389: STR
51390: ST_TO_ADDR
// end ;
51391: GO 51287
51393: POP
51394: POP
// if isGameLoad then
51395: LD_VAR 0 1
51399: IFFALSE 51874
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
51401: LD_ADDR_VAR 0 4
51405: PUSH
51406: LD_EXP 20
51410: PUSH
51411: LD_EXP 19
51415: PUSH
51416: LD_EXP 21
51420: PUSH
51421: LD_EXP 18
51425: PUSH
51426: LD_EXP 22
51430: PUSH
51431: LD_EXP 23
51435: PUSH
51436: LD_EXP 24
51440: PUSH
51441: LD_EXP 25
51445: PUSH
51446: LD_EXP 26
51450: PUSH
51451: LD_EXP 27
51455: PUSH
51456: LD_EXP 28
51460: PUSH
51461: LD_EXP 29
51465: PUSH
51466: LD_EXP 30
51470: PUSH
51471: LD_EXP 31
51475: PUSH
51476: LD_EXP 39
51480: PUSH
51481: LD_EXP 40
51485: PUSH
51486: LD_EXP 41
51490: PUSH
51491: LD_EXP 42
51495: PUSH
51496: LD_EXP 44
51500: PUSH
51501: LD_EXP 45
51505: PUSH
51506: LD_EXP 46
51510: PUSH
51511: LD_EXP 49
51515: PUSH
51516: LD_EXP 51
51520: PUSH
51521: LD_EXP 52
51525: PUSH
51526: LD_EXP 53
51530: PUSH
51531: LD_EXP 55
51535: PUSH
51536: LD_EXP 56
51540: PUSH
51541: LD_EXP 59
51545: PUSH
51546: LD_EXP 60
51550: PUSH
51551: LD_EXP 61
51555: PUSH
51556: LD_EXP 62
51560: PUSH
51561: LD_EXP 63
51565: PUSH
51566: LD_EXP 64
51570: PUSH
51571: LD_EXP 65
51575: PUSH
51576: LD_EXP 66
51580: PUSH
51581: LD_EXP 67
51585: PUSH
51586: LD_EXP 32
51590: PUSH
51591: LD_EXP 33
51595: PUSH
51596: LD_EXP 36
51600: PUSH
51601: LD_EXP 37
51605: PUSH
51606: LD_EXP 38
51610: PUSH
51611: LD_EXP 34
51615: PUSH
51616: LD_EXP 35
51620: PUSH
51621: LD_EXP 43
51625: PUSH
51626: LD_EXP 47
51630: PUSH
51631: LD_EXP 48
51635: PUSH
51636: LD_EXP 50
51640: PUSH
51641: LD_EXP 54
51645: PUSH
51646: LD_EXP 57
51650: PUSH
51651: LD_EXP 58
51655: PUSH
51656: LD_EXP 68
51660: PUSH
51661: LD_EXP 69
51665: PUSH
51666: LD_EXP 70
51670: PUSH
51671: LD_EXP 71
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: ST_TO_ADDR
// tmp :=  ;
51732: LD_ADDR_VAR 0 3
51736: PUSH
51737: LD_STRING 
51739: ST_TO_ADDR
// for i = 1 to normalCounter do
51740: LD_ADDR_VAR 0 8
51744: PUSH
51745: DOUBLE
51746: LD_INT 1
51748: DEC
51749: ST_TO_ADDR
51750: LD_EXP 16
51754: PUSH
51755: FOR_TO
51756: IFFALSE 51792
// begin if flags [ i ] then
51758: LD_VAR 0 4
51762: PUSH
51763: LD_VAR 0 8
51767: ARRAY
51768: IFFALSE 51790
// tmp := tmp & i & ; ;
51770: LD_ADDR_VAR 0 3
51774: PUSH
51775: LD_VAR 0 3
51779: PUSH
51780: LD_VAR 0 8
51784: STR
51785: PUSH
51786: LD_STRING ;
51788: STR
51789: ST_TO_ADDR
// end ;
51790: GO 51755
51792: POP
51793: POP
// for i = 1 to hardcoreCounter do
51794: LD_ADDR_VAR 0 8
51798: PUSH
51799: DOUBLE
51800: LD_INT 1
51802: DEC
51803: ST_TO_ADDR
51804: LD_EXP 17
51808: PUSH
51809: FOR_TO
51810: IFFALSE 51856
// begin if flags [ normalCounter + i ] then
51812: LD_VAR 0 4
51816: PUSH
51817: LD_EXP 16
51821: PUSH
51822: LD_VAR 0 8
51826: PLUS
51827: ARRAY
51828: IFFALSE 51854
// tmp := tmp & ( 100 + i ) & ; ;
51830: LD_ADDR_VAR 0 3
51834: PUSH
51835: LD_VAR 0 3
51839: PUSH
51840: LD_INT 100
51842: PUSH
51843: LD_VAR 0 8
51847: PLUS
51848: STR
51849: PUSH
51850: LD_STRING ;
51852: STR
51853: ST_TO_ADDR
// end ;
51854: GO 51809
51856: POP
51857: POP
// if tmp then
51858: LD_VAR 0 3
51862: IFFALSE 51874
// active := tmp ;
51864: LD_ADDR_VAR 0 7
51868: PUSH
51869: LD_VAR 0 3
51873: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
51874: LD_STRING getStreamItemsFromMission("
51876: PUSH
51877: LD_VAR 0 5
51881: STR
51882: PUSH
51883: LD_STRING ","
51885: STR
51886: PUSH
51887: LD_VAR 0 6
51891: STR
51892: PUSH
51893: LD_STRING ","
51895: STR
51896: PUSH
51897: LD_VAR 0 7
51901: STR
51902: PUSH
51903: LD_STRING ")
51905: STR
51906: PPUSH
51907: CALL_OW 559
// end else
51911: GO 51920
// ToLua ( getStreamItemsFromMission("","","") ) ;
51913: LD_STRING getStreamItemsFromMission("","","")
51915: PPUSH
51916: CALL_OW 559
// end ;
51920: LD_VAR 0 2
51924: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
51925: LD_EXP 15
51929: PUSH
51930: LD_EXP 20
51934: AND
51935: IFFALSE 52059
51937: GO 51939
51939: DISABLE
51940: LD_INT 0
51942: PPUSH
51943: PPUSH
// begin enable ;
51944: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
51945: LD_ADDR_VAR 0 2
51949: PUSH
51950: LD_INT 22
51952: PUSH
51953: LD_OWVAR 2
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 2
51964: PUSH
51965: LD_INT 34
51967: PUSH
51968: LD_INT 7
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 34
51977: PUSH
51978: LD_INT 45
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 34
51987: PUSH
51988: LD_INT 28
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 34
51997: PUSH
51998: LD_INT 47
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PPUSH
52016: CALL_OW 69
52020: ST_TO_ADDR
// if not tmp then
52021: LD_VAR 0 2
52025: NOT
52026: IFFALSE 52030
// exit ;
52028: GO 52059
// for i in tmp do
52030: LD_ADDR_VAR 0 1
52034: PUSH
52035: LD_VAR 0 2
52039: PUSH
52040: FOR_IN
52041: IFFALSE 52057
// begin SetLives ( i , 0 ) ;
52043: LD_VAR 0 1
52047: PPUSH
52048: LD_INT 0
52050: PPUSH
52051: CALL_OW 234
// end ;
52055: GO 52040
52057: POP
52058: POP
// end ;
52059: PPOPN 2
52061: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
52062: LD_EXP 15
52066: PUSH
52067: LD_EXP 21
52071: AND
52072: IFFALSE 52156
52074: GO 52076
52076: DISABLE
52077: LD_INT 0
52079: PPUSH
52080: PPUSH
// begin enable ;
52081: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
52082: LD_ADDR_VAR 0 2
52086: PUSH
52087: LD_INT 22
52089: PUSH
52090: LD_OWVAR 2
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 32
52101: PUSH
52102: LD_INT 3
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PPUSH
52113: CALL_OW 69
52117: ST_TO_ADDR
// if not tmp then
52118: LD_VAR 0 2
52122: NOT
52123: IFFALSE 52127
// exit ;
52125: GO 52156
// for i in tmp do
52127: LD_ADDR_VAR 0 1
52131: PUSH
52132: LD_VAR 0 2
52136: PUSH
52137: FOR_IN
52138: IFFALSE 52154
// begin SetLives ( i , 0 ) ;
52140: LD_VAR 0 1
52144: PPUSH
52145: LD_INT 0
52147: PPUSH
52148: CALL_OW 234
// end ;
52152: GO 52137
52154: POP
52155: POP
// end ;
52156: PPOPN 2
52158: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
52159: LD_EXP 15
52163: PUSH
52164: LD_EXP 18
52168: AND
52169: IFFALSE 52262
52171: GO 52173
52173: DISABLE
52174: LD_INT 0
52176: PPUSH
// begin enable ;
52177: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
52178: LD_ADDR_VAR 0 1
52182: PUSH
52183: LD_INT 22
52185: PUSH
52186: LD_OWVAR 2
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: LD_INT 25
52200: PUSH
52201: LD_INT 5
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 25
52210: PUSH
52211: LD_INT 9
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 25
52220: PUSH
52221: LD_INT 8
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PPUSH
52238: CALL_OW 69
52242: PUSH
52243: FOR_IN
52244: IFFALSE 52260
// begin SetClass ( i , 1 ) ;
52246: LD_VAR 0 1
52250: PPUSH
52251: LD_INT 1
52253: PPUSH
52254: CALL_OW 336
// end ;
52258: GO 52243
52260: POP
52261: POP
// end ;
52262: PPOPN 1
52264: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
52265: LD_EXP 15
52269: PUSH
52270: LD_EXP 19
52274: AND
52275: PUSH
52276: LD_OWVAR 65
52280: PUSH
52281: LD_INT 7
52283: LESS
52284: AND
52285: IFFALSE 52299
52287: GO 52289
52289: DISABLE
// begin enable ;
52290: ENABLE
// game_speed := 7 ;
52291: LD_ADDR_OWVAR 65
52295: PUSH
52296: LD_INT 7
52298: ST_TO_ADDR
// end ;
52299: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
52300: LD_EXP 15
52304: PUSH
52305: LD_EXP 22
52309: AND
52310: IFFALSE 52512
52312: GO 52314
52314: DISABLE
52315: LD_INT 0
52317: PPUSH
52318: PPUSH
52319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
52320: LD_ADDR_VAR 0 3
52324: PUSH
52325: LD_INT 81
52327: PUSH
52328: LD_OWVAR 2
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 21
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PPUSH
52351: CALL_OW 69
52355: ST_TO_ADDR
// if not tmp then
52356: LD_VAR 0 3
52360: NOT
52361: IFFALSE 52365
// exit ;
52363: GO 52512
// if tmp > 5 then
52365: LD_VAR 0 3
52369: PUSH
52370: LD_INT 5
52372: GREATER
52373: IFFALSE 52385
// k := 5 else
52375: LD_ADDR_VAR 0 2
52379: PUSH
52380: LD_INT 5
52382: ST_TO_ADDR
52383: GO 52395
// k := tmp ;
52385: LD_ADDR_VAR 0 2
52389: PUSH
52390: LD_VAR 0 3
52394: ST_TO_ADDR
// for i := 1 to k do
52395: LD_ADDR_VAR 0 1
52399: PUSH
52400: DOUBLE
52401: LD_INT 1
52403: DEC
52404: ST_TO_ADDR
52405: LD_VAR 0 2
52409: PUSH
52410: FOR_TO
52411: IFFALSE 52510
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
52413: LD_VAR 0 3
52417: PUSH
52418: LD_VAR 0 1
52422: ARRAY
52423: PPUSH
52424: LD_VAR 0 1
52428: PUSH
52429: LD_INT 4
52431: MOD
52432: PUSH
52433: LD_INT 1
52435: PLUS
52436: PPUSH
52437: CALL_OW 259
52441: PUSH
52442: LD_INT 10
52444: LESS
52445: IFFALSE 52508
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
52447: LD_VAR 0 3
52451: PUSH
52452: LD_VAR 0 1
52456: ARRAY
52457: PPUSH
52458: LD_VAR 0 1
52462: PUSH
52463: LD_INT 4
52465: MOD
52466: PUSH
52467: LD_INT 1
52469: PLUS
52470: PPUSH
52471: LD_VAR 0 3
52475: PUSH
52476: LD_VAR 0 1
52480: ARRAY
52481: PPUSH
52482: LD_VAR 0 1
52486: PUSH
52487: LD_INT 4
52489: MOD
52490: PUSH
52491: LD_INT 1
52493: PLUS
52494: PPUSH
52495: CALL_OW 259
52499: PUSH
52500: LD_INT 1
52502: PLUS
52503: PPUSH
52504: CALL_OW 237
52508: GO 52410
52510: POP
52511: POP
// end ;
52512: PPOPN 3
52514: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
52515: LD_EXP 15
52519: PUSH
52520: LD_EXP 23
52524: AND
52525: IFFALSE 52545
52527: GO 52529
52529: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
52530: LD_INT 4
52532: PPUSH
52533: LD_OWVAR 2
52537: PPUSH
52538: LD_INT 0
52540: PPUSH
52541: CALL_OW 324
52545: END
// every 0 0$1 trigger StreamModeActive and sShovel do
52546: LD_EXP 15
52550: PUSH
52551: LD_EXP 52
52555: AND
52556: IFFALSE 52576
52558: GO 52560
52560: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
52561: LD_INT 19
52563: PPUSH
52564: LD_OWVAR 2
52568: PPUSH
52569: LD_INT 0
52571: PPUSH
52572: CALL_OW 324
52576: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
52577: LD_EXP 15
52581: PUSH
52582: LD_EXP 24
52586: AND
52587: IFFALSE 52689
52589: GO 52591
52591: DISABLE
52592: LD_INT 0
52594: PPUSH
52595: PPUSH
// begin enable ;
52596: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
52597: LD_ADDR_VAR 0 2
52601: PUSH
52602: LD_INT 22
52604: PUSH
52605: LD_OWVAR 2
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: PUSH
52617: LD_INT 34
52619: PUSH
52620: LD_INT 11
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 34
52629: PUSH
52630: LD_INT 30
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: LIST
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PPUSH
52646: CALL_OW 69
52650: ST_TO_ADDR
// if not tmp then
52651: LD_VAR 0 2
52655: NOT
52656: IFFALSE 52660
// exit ;
52658: GO 52689
// for i in tmp do
52660: LD_ADDR_VAR 0 1
52664: PUSH
52665: LD_VAR 0 2
52669: PUSH
52670: FOR_IN
52671: IFFALSE 52687
// begin SetLives ( i , 0 ) ;
52673: LD_VAR 0 1
52677: PPUSH
52678: LD_INT 0
52680: PPUSH
52681: CALL_OW 234
// end ;
52685: GO 52670
52687: POP
52688: POP
// end ;
52689: PPOPN 2
52691: END
// every 0 0$1 trigger StreamModeActive and sBunker do
52692: LD_EXP 15
52696: PUSH
52697: LD_EXP 25
52701: AND
52702: IFFALSE 52722
52704: GO 52706
52706: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
52707: LD_INT 32
52709: PPUSH
52710: LD_OWVAR 2
52714: PPUSH
52715: LD_INT 0
52717: PPUSH
52718: CALL_OW 324
52722: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
52723: LD_EXP 15
52727: PUSH
52728: LD_EXP 26
52732: AND
52733: IFFALSE 52914
52735: GO 52737
52737: DISABLE
52738: LD_INT 0
52740: PPUSH
52741: PPUSH
52742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
52743: LD_ADDR_VAR 0 2
52747: PUSH
52748: LD_INT 22
52750: PUSH
52751: LD_OWVAR 2
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 33
52762: PUSH
52763: LD_INT 3
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PPUSH
52774: CALL_OW 69
52778: ST_TO_ADDR
// if not tmp then
52779: LD_VAR 0 2
52783: NOT
52784: IFFALSE 52788
// exit ;
52786: GO 52914
// side := 0 ;
52788: LD_ADDR_VAR 0 3
52792: PUSH
52793: LD_INT 0
52795: ST_TO_ADDR
// for i := 1 to 8 do
52796: LD_ADDR_VAR 0 1
52800: PUSH
52801: DOUBLE
52802: LD_INT 1
52804: DEC
52805: ST_TO_ADDR
52806: LD_INT 8
52808: PUSH
52809: FOR_TO
52810: IFFALSE 52858
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
52812: LD_OWVAR 2
52816: PUSH
52817: LD_VAR 0 1
52821: NONEQUAL
52822: PUSH
52823: LD_OWVAR 2
52827: PPUSH
52828: LD_VAR 0 1
52832: PPUSH
52833: CALL_OW 81
52837: PUSH
52838: LD_INT 2
52840: EQUAL
52841: AND
52842: IFFALSE 52856
// begin side := i ;
52844: LD_ADDR_VAR 0 3
52848: PUSH
52849: LD_VAR 0 1
52853: ST_TO_ADDR
// break ;
52854: GO 52858
// end ;
52856: GO 52809
52858: POP
52859: POP
// if not side then
52860: LD_VAR 0 3
52864: NOT
52865: IFFALSE 52869
// exit ;
52867: GO 52914
// for i := 1 to tmp do
52869: LD_ADDR_VAR 0 1
52873: PUSH
52874: DOUBLE
52875: LD_INT 1
52877: DEC
52878: ST_TO_ADDR
52879: LD_VAR 0 2
52883: PUSH
52884: FOR_TO
52885: IFFALSE 52912
// if Prob ( 60 ) then
52887: LD_INT 60
52889: PPUSH
52890: CALL_OW 13
52894: IFFALSE 52910
// SetSide ( i , side ) ;
52896: LD_VAR 0 1
52900: PPUSH
52901: LD_VAR 0 3
52905: PPUSH
52906: CALL_OW 235
52910: GO 52884
52912: POP
52913: POP
// end ;
52914: PPOPN 3
52916: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
52917: LD_EXP 15
52921: PUSH
52922: LD_EXP 28
52926: AND
52927: IFFALSE 53046
52929: GO 52931
52931: DISABLE
52932: LD_INT 0
52934: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
52935: LD_ADDR_VAR 0 1
52939: PUSH
52940: LD_INT 22
52942: PUSH
52943: LD_OWVAR 2
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 21
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 3
52964: PUSH
52965: LD_INT 23
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: LIST
52983: PPUSH
52984: CALL_OW 69
52988: PUSH
52989: FOR_IN
52990: IFFALSE 53044
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
52992: LD_VAR 0 1
52996: PPUSH
52997: CALL_OW 257
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 2
53007: PUSH
53008: LD_INT 3
53010: PUSH
53011: LD_INT 4
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: IN
53020: IFFALSE 53042
// SetClass ( un , rand ( 1 , 4 ) ) ;
53022: LD_VAR 0 1
53026: PPUSH
53027: LD_INT 1
53029: PPUSH
53030: LD_INT 4
53032: PPUSH
53033: CALL_OW 12
53037: PPUSH
53038: CALL_OW 336
53042: GO 52989
53044: POP
53045: POP
// end ;
53046: PPOPN 1
53048: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
53049: LD_EXP 15
53053: PUSH
53054: LD_EXP 27
53058: AND
53059: IFFALSE 53138
53061: GO 53063
53063: DISABLE
53064: LD_INT 0
53066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53067: LD_ADDR_VAR 0 1
53071: PUSH
53072: LD_INT 22
53074: PUSH
53075: LD_OWVAR 2
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 21
53086: PUSH
53087: LD_INT 3
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PPUSH
53098: CALL_OW 69
53102: ST_TO_ADDR
// if not tmp then
53103: LD_VAR 0 1
53107: NOT
53108: IFFALSE 53112
// exit ;
53110: GO 53138
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
53112: LD_VAR 0 1
53116: PUSH
53117: LD_INT 1
53119: PPUSH
53120: LD_VAR 0 1
53124: PPUSH
53125: CALL_OW 12
53129: ARRAY
53130: PPUSH
53131: LD_INT 100
53133: PPUSH
53134: CALL_OW 234
// end ;
53138: PPOPN 1
53140: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
53141: LD_EXP 15
53145: PUSH
53146: LD_EXP 29
53150: AND
53151: IFFALSE 53249
53153: GO 53155
53155: DISABLE
53156: LD_INT 0
53158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53159: LD_ADDR_VAR 0 1
53163: PUSH
53164: LD_INT 22
53166: PUSH
53167: LD_OWVAR 2
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 21
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PPUSH
53190: CALL_OW 69
53194: ST_TO_ADDR
// if not tmp then
53195: LD_VAR 0 1
53199: NOT
53200: IFFALSE 53204
// exit ;
53202: GO 53249
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
53204: LD_VAR 0 1
53208: PUSH
53209: LD_INT 1
53211: PPUSH
53212: LD_VAR 0 1
53216: PPUSH
53217: CALL_OW 12
53221: ARRAY
53222: PPUSH
53223: LD_INT 1
53225: PPUSH
53226: LD_INT 4
53228: PPUSH
53229: CALL_OW 12
53233: PPUSH
53234: LD_INT 3000
53236: PPUSH
53237: LD_INT 9000
53239: PPUSH
53240: CALL_OW 12
53244: PPUSH
53245: CALL_OW 492
// end ;
53249: PPOPN 1
53251: END
// every 0 0$1 trigger StreamModeActive and sDepot do
53252: LD_EXP 15
53256: PUSH
53257: LD_EXP 30
53261: AND
53262: IFFALSE 53282
53264: GO 53266
53266: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
53267: LD_INT 1
53269: PPUSH
53270: LD_OWVAR 2
53274: PPUSH
53275: LD_INT 0
53277: PPUSH
53278: CALL_OW 324
53282: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
53283: LD_EXP 15
53287: PUSH
53288: LD_EXP 31
53292: AND
53293: IFFALSE 53376
53295: GO 53297
53297: DISABLE
53298: LD_INT 0
53300: PPUSH
53301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
53302: LD_ADDR_VAR 0 2
53306: PUSH
53307: LD_INT 22
53309: PUSH
53310: LD_OWVAR 2
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 21
53321: PUSH
53322: LD_INT 3
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PPUSH
53333: CALL_OW 69
53337: ST_TO_ADDR
// if not tmp then
53338: LD_VAR 0 2
53342: NOT
53343: IFFALSE 53347
// exit ;
53345: GO 53376
// for i in tmp do
53347: LD_ADDR_VAR 0 1
53351: PUSH
53352: LD_VAR 0 2
53356: PUSH
53357: FOR_IN
53358: IFFALSE 53374
// SetBLevel ( i , 10 ) ;
53360: LD_VAR 0 1
53364: PPUSH
53365: LD_INT 10
53367: PPUSH
53368: CALL_OW 241
53372: GO 53357
53374: POP
53375: POP
// end ;
53376: PPOPN 2
53378: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
53379: LD_EXP 15
53383: PUSH
53384: LD_EXP 32
53388: AND
53389: IFFALSE 53500
53391: GO 53393
53393: DISABLE
53394: LD_INT 0
53396: PPUSH
53397: PPUSH
53398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53399: LD_ADDR_VAR 0 3
53403: PUSH
53404: LD_INT 22
53406: PUSH
53407: LD_OWVAR 2
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 25
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PPUSH
53430: CALL_OW 69
53434: ST_TO_ADDR
// if not tmp then
53435: LD_VAR 0 3
53439: NOT
53440: IFFALSE 53444
// exit ;
53442: GO 53500
// un := tmp [ rand ( 1 , tmp ) ] ;
53444: LD_ADDR_VAR 0 2
53448: PUSH
53449: LD_VAR 0 3
53453: PUSH
53454: LD_INT 1
53456: PPUSH
53457: LD_VAR 0 3
53461: PPUSH
53462: CALL_OW 12
53466: ARRAY
53467: ST_TO_ADDR
// if Crawls ( un ) then
53468: LD_VAR 0 2
53472: PPUSH
53473: CALL_OW 318
53477: IFFALSE 53488
// ComWalk ( un ) ;
53479: LD_VAR 0 2
53483: PPUSH
53484: CALL_OW 138
// SetClass ( un , class_sniper ) ;
53488: LD_VAR 0 2
53492: PPUSH
53493: LD_INT 5
53495: PPUSH
53496: CALL_OW 336
// end ;
53500: PPOPN 3
53502: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
53503: LD_EXP 15
53507: PUSH
53508: LD_EXP 33
53512: AND
53513: PUSH
53514: LD_OWVAR 67
53518: PUSH
53519: LD_INT 4
53521: LESS
53522: AND
53523: IFFALSE 53542
53525: GO 53527
53527: DISABLE
// begin Difficulty := Difficulty + 1 ;
53528: LD_ADDR_OWVAR 67
53532: PUSH
53533: LD_OWVAR 67
53537: PUSH
53538: LD_INT 1
53540: PLUS
53541: ST_TO_ADDR
// end ;
53542: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
53543: LD_EXP 15
53547: PUSH
53548: LD_EXP 34
53552: AND
53553: IFFALSE 53656
53555: GO 53557
53557: DISABLE
53558: LD_INT 0
53560: PPUSH
// begin for i := 1 to 5 do
53561: LD_ADDR_VAR 0 1
53565: PUSH
53566: DOUBLE
53567: LD_INT 1
53569: DEC
53570: ST_TO_ADDR
53571: LD_INT 5
53573: PUSH
53574: FOR_TO
53575: IFFALSE 53654
// begin uc_nation := nation_nature ;
53577: LD_ADDR_OWVAR 21
53581: PUSH
53582: LD_INT 0
53584: ST_TO_ADDR
// uc_side := 0 ;
53585: LD_ADDR_OWVAR 20
53589: PUSH
53590: LD_INT 0
53592: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53593: LD_ADDR_OWVAR 29
53597: PUSH
53598: LD_INT 12
53600: PUSH
53601: LD_INT 12
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: ST_TO_ADDR
// hc_agressivity := 20 ;
53608: LD_ADDR_OWVAR 35
53612: PUSH
53613: LD_INT 20
53615: ST_TO_ADDR
// hc_class := class_tiger ;
53616: LD_ADDR_OWVAR 28
53620: PUSH
53621: LD_INT 14
53623: ST_TO_ADDR
// hc_gallery :=  ;
53624: LD_ADDR_OWVAR 33
53628: PUSH
53629: LD_STRING 
53631: ST_TO_ADDR
// hc_name :=  ;
53632: LD_ADDR_OWVAR 26
53636: PUSH
53637: LD_STRING 
53639: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
53640: CALL_OW 44
53644: PPUSH
53645: LD_INT 0
53647: PPUSH
53648: CALL_OW 51
// end ;
53652: GO 53574
53654: POP
53655: POP
// end ;
53656: PPOPN 1
53658: END
// every 0 0$1 trigger StreamModeActive and sBomb do
53659: LD_EXP 15
53663: PUSH
53664: LD_EXP 35
53668: AND
53669: IFFALSE 53678
53671: GO 53673
53673: DISABLE
// StreamSibBomb ;
53674: CALL 53679 0 0
53678: END
// export function StreamSibBomb ; var i , x , y ; begin
53679: LD_INT 0
53681: PPUSH
53682: PPUSH
53683: PPUSH
53684: PPUSH
// result := false ;
53685: LD_ADDR_VAR 0 1
53689: PUSH
53690: LD_INT 0
53692: ST_TO_ADDR
// for i := 1 to 16 do
53693: LD_ADDR_VAR 0 2
53697: PUSH
53698: DOUBLE
53699: LD_INT 1
53701: DEC
53702: ST_TO_ADDR
53703: LD_INT 16
53705: PUSH
53706: FOR_TO
53707: IFFALSE 53906
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53709: LD_ADDR_VAR 0 3
53713: PUSH
53714: LD_INT 10
53716: PUSH
53717: LD_INT 20
53719: PUSH
53720: LD_INT 30
53722: PUSH
53723: LD_INT 40
53725: PUSH
53726: LD_INT 50
53728: PUSH
53729: LD_INT 60
53731: PUSH
53732: LD_INT 70
53734: PUSH
53735: LD_INT 80
53737: PUSH
53738: LD_INT 90
53740: PUSH
53741: LD_INT 100
53743: PUSH
53744: LD_INT 110
53746: PUSH
53747: LD_INT 120
53749: PUSH
53750: LD_INT 130
53752: PUSH
53753: LD_INT 140
53755: PUSH
53756: LD_INT 150
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: PPUSH
53779: LD_INT 15
53781: PPUSH
53782: CALL_OW 12
53786: ARRAY
53787: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53788: LD_ADDR_VAR 0 4
53792: PUSH
53793: LD_INT 10
53795: PUSH
53796: LD_INT 20
53798: PUSH
53799: LD_INT 30
53801: PUSH
53802: LD_INT 40
53804: PUSH
53805: LD_INT 50
53807: PUSH
53808: LD_INT 60
53810: PUSH
53811: LD_INT 70
53813: PUSH
53814: LD_INT 80
53816: PUSH
53817: LD_INT 90
53819: PUSH
53820: LD_INT 100
53822: PUSH
53823: LD_INT 110
53825: PUSH
53826: LD_INT 120
53828: PUSH
53829: LD_INT 130
53831: PUSH
53832: LD_INT 140
53834: PUSH
53835: LD_INT 150
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: PPUSH
53858: LD_INT 15
53860: PPUSH
53861: CALL_OW 12
53865: ARRAY
53866: ST_TO_ADDR
// if ValidHex ( x , y ) then
53867: LD_VAR 0 3
53871: PPUSH
53872: LD_VAR 0 4
53876: PPUSH
53877: CALL_OW 488
53881: IFFALSE 53904
// begin result := [ x , y ] ;
53883: LD_ADDR_VAR 0 1
53887: PUSH
53888: LD_VAR 0 3
53892: PUSH
53893: LD_VAR 0 4
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: ST_TO_ADDR
// break ;
53902: GO 53906
// end ; end ;
53904: GO 53706
53906: POP
53907: POP
// if result then
53908: LD_VAR 0 1
53912: IFFALSE 53972
// begin ToLua ( playSibBomb() ) ;
53914: LD_STRING playSibBomb()
53916: PPUSH
53917: CALL_OW 559
// wait ( 0 0$14 ) ;
53921: LD_INT 490
53923: PPUSH
53924: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
53928: LD_VAR 0 1
53932: PUSH
53933: LD_INT 1
53935: ARRAY
53936: PPUSH
53937: LD_VAR 0 1
53941: PUSH
53942: LD_INT 2
53944: ARRAY
53945: PPUSH
53946: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
53950: LD_VAR 0 1
53954: PUSH
53955: LD_INT 1
53957: ARRAY
53958: PPUSH
53959: LD_VAR 0 1
53963: PUSH
53964: LD_INT 2
53966: ARRAY
53967: PPUSH
53968: CALL_OW 429
// end ; end ;
53972: LD_VAR 0 1
53976: RET
// every 0 0$1 trigger StreamModeActive and sReset do
53977: LD_EXP 15
53981: PUSH
53982: LD_EXP 37
53986: AND
53987: IFFALSE 53999
53989: GO 53991
53991: DISABLE
// YouLost (  ) ;
53992: LD_STRING 
53994: PPUSH
53995: CALL_OW 104
53999: END
// every 0 0$1 trigger StreamModeActive and sFog do
54000: LD_EXP 15
54004: PUSH
54005: LD_EXP 36
54009: AND
54010: IFFALSE 54024
54012: GO 54014
54014: DISABLE
// FogOff ( your_side ) ;
54015: LD_OWVAR 2
54019: PPUSH
54020: CALL_OW 344
54024: END
// every 0 0$1 trigger StreamModeActive and sSun do
54025: LD_EXP 15
54029: PUSH
54030: LD_EXP 38
54034: AND
54035: IFFALSE 54063
54037: GO 54039
54039: DISABLE
// begin solar_recharge_percent := 0 ;
54040: LD_ADDR_OWVAR 79
54044: PUSH
54045: LD_INT 0
54047: ST_TO_ADDR
// wait ( 5 5$00 ) ;
54048: LD_INT 10500
54050: PPUSH
54051: CALL_OW 67
// solar_recharge_percent := 100 ;
54055: LD_ADDR_OWVAR 79
54059: PUSH
54060: LD_INT 100
54062: ST_TO_ADDR
// end ;
54063: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
54064: LD_EXP 15
54068: PUSH
54069: LD_EXP 39
54073: AND
54074: IFFALSE 54313
54076: GO 54078
54078: DISABLE
54079: LD_INT 0
54081: PPUSH
54082: PPUSH
54083: PPUSH
// begin tmp := [ ] ;
54084: LD_ADDR_VAR 0 3
54088: PUSH
54089: EMPTY
54090: ST_TO_ADDR
// for i := 1 to 6 do
54091: LD_ADDR_VAR 0 1
54095: PUSH
54096: DOUBLE
54097: LD_INT 1
54099: DEC
54100: ST_TO_ADDR
54101: LD_INT 6
54103: PUSH
54104: FOR_TO
54105: IFFALSE 54210
// begin uc_nation := nation_nature ;
54107: LD_ADDR_OWVAR 21
54111: PUSH
54112: LD_INT 0
54114: ST_TO_ADDR
// uc_side := 0 ;
54115: LD_ADDR_OWVAR 20
54119: PUSH
54120: LD_INT 0
54122: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
54123: LD_ADDR_OWVAR 29
54127: PUSH
54128: LD_INT 12
54130: PUSH
54131: LD_INT 12
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: ST_TO_ADDR
// hc_agressivity := 20 ;
54138: LD_ADDR_OWVAR 35
54142: PUSH
54143: LD_INT 20
54145: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
54146: LD_ADDR_OWVAR 28
54150: PUSH
54151: LD_INT 17
54153: ST_TO_ADDR
// hc_gallery :=  ;
54154: LD_ADDR_OWVAR 33
54158: PUSH
54159: LD_STRING 
54161: ST_TO_ADDR
// hc_name :=  ;
54162: LD_ADDR_OWVAR 26
54166: PUSH
54167: LD_STRING 
54169: ST_TO_ADDR
// un := CreateHuman ;
54170: LD_ADDR_VAR 0 2
54174: PUSH
54175: CALL_OW 44
54179: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
54180: LD_VAR 0 2
54184: PPUSH
54185: LD_INT 1
54187: PPUSH
54188: CALL_OW 51
// tmp := tmp ^ un ;
54192: LD_ADDR_VAR 0 3
54196: PUSH
54197: LD_VAR 0 3
54201: PUSH
54202: LD_VAR 0 2
54206: ADD
54207: ST_TO_ADDR
// end ;
54208: GO 54104
54210: POP
54211: POP
// repeat wait ( 0 0$1 ) ;
54212: LD_INT 35
54214: PPUSH
54215: CALL_OW 67
// for un in tmp do
54219: LD_ADDR_VAR 0 2
54223: PUSH
54224: LD_VAR 0 3
54228: PUSH
54229: FOR_IN
54230: IFFALSE 54304
// begin if IsDead ( un ) then
54232: LD_VAR 0 2
54236: PPUSH
54237: CALL_OW 301
54241: IFFALSE 54261
// begin tmp := tmp diff un ;
54243: LD_ADDR_VAR 0 3
54247: PUSH
54248: LD_VAR 0 3
54252: PUSH
54253: LD_VAR 0 2
54257: DIFF
54258: ST_TO_ADDR
// continue ;
54259: GO 54229
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
54261: LD_VAR 0 2
54265: PPUSH
54266: LD_INT 3
54268: PUSH
54269: LD_INT 22
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PPUSH
54283: CALL_OW 69
54287: PPUSH
54288: LD_VAR 0 2
54292: PPUSH
54293: CALL_OW 74
54297: PPUSH
54298: CALL_OW 115
// end ;
54302: GO 54229
54304: POP
54305: POP
// until not tmp ;
54306: LD_VAR 0 3
54310: NOT
54311: IFFALSE 54212
// end ;
54313: PPOPN 3
54315: END
// every 0 0$1 trigger StreamModeActive and sTroll do
54316: LD_EXP 15
54320: PUSH
54321: LD_EXP 40
54325: AND
54326: IFFALSE 54380
54328: GO 54330
54330: DISABLE
// begin ToLua ( displayTroll(); ) ;
54331: LD_STRING displayTroll();
54333: PPUSH
54334: CALL_OW 559
// wait ( 3 3$00 ) ;
54338: LD_INT 6300
54340: PPUSH
54341: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54345: LD_STRING hideTroll();
54347: PPUSH
54348: CALL_OW 559
// wait ( 1 1$00 ) ;
54352: LD_INT 2100
54354: PPUSH
54355: CALL_OW 67
// ToLua ( displayTroll(); ) ;
54359: LD_STRING displayTroll();
54361: PPUSH
54362: CALL_OW 559
// wait ( 1 1$00 ) ;
54366: LD_INT 2100
54368: PPUSH
54369: CALL_OW 67
// ToLua ( hideTroll(); ) ;
54373: LD_STRING hideTroll();
54375: PPUSH
54376: CALL_OW 559
// end ;
54380: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
54381: LD_EXP 15
54385: PUSH
54386: LD_EXP 41
54390: AND
54391: IFFALSE 54454
54393: GO 54395
54395: DISABLE
54396: LD_INT 0
54398: PPUSH
// begin p := 0 ;
54399: LD_ADDR_VAR 0 1
54403: PUSH
54404: LD_INT 0
54406: ST_TO_ADDR
// repeat game_speed := 1 ;
54407: LD_ADDR_OWVAR 65
54411: PUSH
54412: LD_INT 1
54414: ST_TO_ADDR
// wait ( 0 0$1 ) ;
54415: LD_INT 35
54417: PPUSH
54418: CALL_OW 67
// p := p + 1 ;
54422: LD_ADDR_VAR 0 1
54426: PUSH
54427: LD_VAR 0 1
54431: PUSH
54432: LD_INT 1
54434: PLUS
54435: ST_TO_ADDR
// until p >= 60 ;
54436: LD_VAR 0 1
54440: PUSH
54441: LD_INT 60
54443: GREATEREQUAL
54444: IFFALSE 54407
// game_speed := 4 ;
54446: LD_ADDR_OWVAR 65
54450: PUSH
54451: LD_INT 4
54453: ST_TO_ADDR
// end ;
54454: PPOPN 1
54456: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
54457: LD_EXP 15
54461: PUSH
54462: LD_EXP 42
54466: AND
54467: IFFALSE 54613
54469: GO 54471
54471: DISABLE
54472: LD_INT 0
54474: PPUSH
54475: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54476: LD_ADDR_VAR 0 1
54480: PUSH
54481: LD_INT 22
54483: PUSH
54484: LD_OWVAR 2
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: LD_INT 30
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 30
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: LIST
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PPUSH
54525: CALL_OW 69
54529: ST_TO_ADDR
// if not depot then
54530: LD_VAR 0 1
54534: NOT
54535: IFFALSE 54539
// exit ;
54537: GO 54613
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
54539: LD_ADDR_VAR 0 2
54543: PUSH
54544: LD_VAR 0 1
54548: PUSH
54549: LD_INT 1
54551: PPUSH
54552: LD_VAR 0 1
54556: PPUSH
54557: CALL_OW 12
54561: ARRAY
54562: PPUSH
54563: CALL_OW 274
54567: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
54568: LD_VAR 0 2
54572: PPUSH
54573: LD_INT 1
54575: PPUSH
54576: LD_INT 0
54578: PPUSH
54579: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
54583: LD_VAR 0 2
54587: PPUSH
54588: LD_INT 2
54590: PPUSH
54591: LD_INT 0
54593: PPUSH
54594: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
54598: LD_VAR 0 2
54602: PPUSH
54603: LD_INT 3
54605: PPUSH
54606: LD_INT 0
54608: PPUSH
54609: CALL_OW 277
// end ;
54613: PPOPN 2
54615: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
54616: LD_EXP 15
54620: PUSH
54621: LD_EXP 43
54625: AND
54626: IFFALSE 54723
54628: GO 54630
54630: DISABLE
54631: LD_INT 0
54633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54634: LD_ADDR_VAR 0 1
54638: PUSH
54639: LD_INT 22
54641: PUSH
54642: LD_OWVAR 2
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 21
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 3
54663: PUSH
54664: LD_INT 23
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: LIST
54682: PPUSH
54683: CALL_OW 69
54687: ST_TO_ADDR
// if not tmp then
54688: LD_VAR 0 1
54692: NOT
54693: IFFALSE 54697
// exit ;
54695: GO 54723
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
54697: LD_VAR 0 1
54701: PUSH
54702: LD_INT 1
54704: PPUSH
54705: LD_VAR 0 1
54709: PPUSH
54710: CALL_OW 12
54714: ARRAY
54715: PPUSH
54716: LD_INT 200
54718: PPUSH
54719: CALL_OW 234
// end ;
54723: PPOPN 1
54725: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
54726: LD_EXP 15
54730: PUSH
54731: LD_EXP 44
54735: AND
54736: IFFALSE 54815
54738: GO 54740
54740: DISABLE
54741: LD_INT 0
54743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
54744: LD_ADDR_VAR 0 1
54748: PUSH
54749: LD_INT 22
54751: PUSH
54752: LD_OWVAR 2
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 21
54763: PUSH
54764: LD_INT 2
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PPUSH
54775: CALL_OW 69
54779: ST_TO_ADDR
// if not tmp then
54780: LD_VAR 0 1
54784: NOT
54785: IFFALSE 54789
// exit ;
54787: GO 54815
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
54789: LD_VAR 0 1
54793: PUSH
54794: LD_INT 1
54796: PPUSH
54797: LD_VAR 0 1
54801: PPUSH
54802: CALL_OW 12
54806: ARRAY
54807: PPUSH
54808: LD_INT 60
54810: PPUSH
54811: CALL_OW 234
// end ;
54815: PPOPN 1
54817: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
54818: LD_EXP 15
54822: PUSH
54823: LD_EXP 45
54827: AND
54828: IFFALSE 54927
54830: GO 54832
54832: DISABLE
54833: LD_INT 0
54835: PPUSH
54836: PPUSH
// begin enable ;
54837: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
54838: LD_ADDR_VAR 0 1
54842: PUSH
54843: LD_INT 22
54845: PUSH
54846: LD_OWVAR 2
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 61
54857: PUSH
54858: EMPTY
54859: LIST
54860: PUSH
54861: LD_INT 33
54863: PUSH
54864: LD_INT 2
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: LIST
54875: PPUSH
54876: CALL_OW 69
54880: ST_TO_ADDR
// if not tmp then
54881: LD_VAR 0 1
54885: NOT
54886: IFFALSE 54890
// exit ;
54888: GO 54927
// for i in tmp do
54890: LD_ADDR_VAR 0 2
54894: PUSH
54895: LD_VAR 0 1
54899: PUSH
54900: FOR_IN
54901: IFFALSE 54925
// if IsControledBy ( i ) then
54903: LD_VAR 0 2
54907: PPUSH
54908: CALL_OW 312
54912: IFFALSE 54923
// ComUnlink ( i ) ;
54914: LD_VAR 0 2
54918: PPUSH
54919: CALL_OW 136
54923: GO 54900
54925: POP
54926: POP
// end ;
54927: PPOPN 2
54929: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
54930: LD_EXP 15
54934: PUSH
54935: LD_EXP 46
54939: AND
54940: IFFALSE 55080
54942: GO 54944
54944: DISABLE
54945: LD_INT 0
54947: PPUSH
54948: PPUSH
// begin ToLua ( displayPowell(); ) ;
54949: LD_STRING displayPowell();
54951: PPUSH
54952: CALL_OW 559
// uc_side := 0 ;
54956: LD_ADDR_OWVAR 20
54960: PUSH
54961: LD_INT 0
54963: ST_TO_ADDR
// uc_nation := 2 ;
54964: LD_ADDR_OWVAR 21
54968: PUSH
54969: LD_INT 2
54971: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
54972: LD_ADDR_OWVAR 37
54976: PUSH
54977: LD_INT 14
54979: ST_TO_ADDR
// vc_engine := engine_siberite ;
54980: LD_ADDR_OWVAR 39
54984: PUSH
54985: LD_INT 3
54987: ST_TO_ADDR
// vc_control := control_apeman ;
54988: LD_ADDR_OWVAR 38
54992: PUSH
54993: LD_INT 5
54995: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
54996: LD_ADDR_OWVAR 40
55000: PUSH
55001: LD_INT 29
55003: ST_TO_ADDR
// un := CreateVehicle ;
55004: LD_ADDR_VAR 0 2
55008: PUSH
55009: CALL_OW 45
55013: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55014: LD_VAR 0 2
55018: PPUSH
55019: LD_INT 1
55021: PPUSH
55022: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55026: LD_INT 35
55028: PPUSH
55029: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55033: LD_VAR 0 2
55037: PPUSH
55038: LD_INT 22
55040: PUSH
55041: LD_OWVAR 2
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PPUSH
55050: CALL_OW 69
55054: PPUSH
55055: LD_VAR 0 2
55059: PPUSH
55060: CALL_OW 74
55064: PPUSH
55065: CALL_OW 115
// until IsDead ( un ) ;
55069: LD_VAR 0 2
55073: PPUSH
55074: CALL_OW 301
55078: IFFALSE 55026
// end ;
55080: PPOPN 2
55082: END
// every 0 0$1 trigger StreamModeActive and sStu do
55083: LD_EXP 15
55087: PUSH
55088: LD_EXP 54
55092: AND
55093: IFFALSE 55109
55095: GO 55097
55097: DISABLE
// begin ToLua ( displayStucuk(); ) ;
55098: LD_STRING displayStucuk();
55100: PPUSH
55101: CALL_OW 559
// ResetFog ;
55105: CALL_OW 335
// end ;
55109: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
55110: LD_EXP 15
55114: PUSH
55115: LD_EXP 47
55119: AND
55120: IFFALSE 55261
55122: GO 55124
55124: DISABLE
55125: LD_INT 0
55127: PPUSH
55128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55129: LD_ADDR_VAR 0 2
55133: PUSH
55134: LD_INT 22
55136: PUSH
55137: LD_OWVAR 2
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 21
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PPUSH
55160: CALL_OW 69
55164: ST_TO_ADDR
// if not tmp then
55165: LD_VAR 0 2
55169: NOT
55170: IFFALSE 55174
// exit ;
55172: GO 55261
// un := tmp [ rand ( 1 , tmp ) ] ;
55174: LD_ADDR_VAR 0 1
55178: PUSH
55179: LD_VAR 0 2
55183: PUSH
55184: LD_INT 1
55186: PPUSH
55187: LD_VAR 0 2
55191: PPUSH
55192: CALL_OW 12
55196: ARRAY
55197: ST_TO_ADDR
// SetSide ( un , 0 ) ;
55198: LD_VAR 0 1
55202: PPUSH
55203: LD_INT 0
55205: PPUSH
55206: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
55210: LD_VAR 0 1
55214: PPUSH
55215: LD_OWVAR 3
55219: PUSH
55220: LD_VAR 0 1
55224: DIFF
55225: PPUSH
55226: LD_VAR 0 1
55230: PPUSH
55231: CALL_OW 74
55235: PPUSH
55236: CALL_OW 115
// wait ( 0 0$20 ) ;
55240: LD_INT 700
55242: PPUSH
55243: CALL_OW 67
// SetSide ( un , your_side ) ;
55247: LD_VAR 0 1
55251: PPUSH
55252: LD_OWVAR 2
55256: PPUSH
55257: CALL_OW 235
// end ;
55261: PPOPN 2
55263: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
55264: LD_EXP 15
55268: PUSH
55269: LD_EXP 48
55273: AND
55274: IFFALSE 55380
55276: GO 55278
55278: DISABLE
55279: LD_INT 0
55281: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55282: LD_ADDR_VAR 0 1
55286: PUSH
55287: LD_INT 22
55289: PUSH
55290: LD_OWVAR 2
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 2
55301: PUSH
55302: LD_INT 30
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 30
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PPUSH
55331: CALL_OW 69
55335: ST_TO_ADDR
// if not depot then
55336: LD_VAR 0 1
55340: NOT
55341: IFFALSE 55345
// exit ;
55343: GO 55380
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
55345: LD_VAR 0 1
55349: PUSH
55350: LD_INT 1
55352: ARRAY
55353: PPUSH
55354: CALL_OW 250
55358: PPUSH
55359: LD_VAR 0 1
55363: PUSH
55364: LD_INT 1
55366: ARRAY
55367: PPUSH
55368: CALL_OW 251
55372: PPUSH
55373: LD_INT 70
55375: PPUSH
55376: CALL_OW 495
// end ;
55380: PPOPN 1
55382: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
55383: LD_EXP 15
55387: PUSH
55388: LD_EXP 49
55392: AND
55393: IFFALSE 55604
55395: GO 55397
55397: DISABLE
55398: LD_INT 0
55400: PPUSH
55401: PPUSH
55402: PPUSH
55403: PPUSH
55404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55405: LD_ADDR_VAR 0 5
55409: PUSH
55410: LD_INT 22
55412: PUSH
55413: LD_OWVAR 2
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 21
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PPUSH
55436: CALL_OW 69
55440: ST_TO_ADDR
// if not tmp then
55441: LD_VAR 0 5
55445: NOT
55446: IFFALSE 55450
// exit ;
55448: GO 55604
// for i in tmp do
55450: LD_ADDR_VAR 0 1
55454: PUSH
55455: LD_VAR 0 5
55459: PUSH
55460: FOR_IN
55461: IFFALSE 55602
// begin d := rand ( 0 , 5 ) ;
55463: LD_ADDR_VAR 0 4
55467: PUSH
55468: LD_INT 0
55470: PPUSH
55471: LD_INT 5
55473: PPUSH
55474: CALL_OW 12
55478: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
55479: LD_ADDR_VAR 0 2
55483: PUSH
55484: LD_VAR 0 1
55488: PPUSH
55489: CALL_OW 250
55493: PPUSH
55494: LD_VAR 0 4
55498: PPUSH
55499: LD_INT 3
55501: PPUSH
55502: LD_INT 12
55504: PPUSH
55505: CALL_OW 12
55509: PPUSH
55510: CALL_OW 272
55514: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
55515: LD_ADDR_VAR 0 3
55519: PUSH
55520: LD_VAR 0 1
55524: PPUSH
55525: CALL_OW 251
55529: PPUSH
55530: LD_VAR 0 4
55534: PPUSH
55535: LD_INT 3
55537: PPUSH
55538: LD_INT 12
55540: PPUSH
55541: CALL_OW 12
55545: PPUSH
55546: CALL_OW 273
55550: ST_TO_ADDR
// if ValidHex ( x , y ) then
55551: LD_VAR 0 2
55555: PPUSH
55556: LD_VAR 0 3
55560: PPUSH
55561: CALL_OW 488
55565: IFFALSE 55600
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
55567: LD_VAR 0 1
55571: PPUSH
55572: LD_VAR 0 2
55576: PPUSH
55577: LD_VAR 0 3
55581: PPUSH
55582: LD_INT 3
55584: PPUSH
55585: LD_INT 6
55587: PPUSH
55588: CALL_OW 12
55592: PPUSH
55593: LD_INT 1
55595: PPUSH
55596: CALL_OW 483
// end ;
55600: GO 55460
55602: POP
55603: POP
// end ;
55604: PPOPN 5
55606: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
55607: LD_EXP 15
55611: PUSH
55612: LD_EXP 50
55616: AND
55617: IFFALSE 55711
55619: GO 55621
55621: DISABLE
55622: LD_INT 0
55624: PPUSH
55625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
55626: LD_ADDR_VAR 0 2
55630: PUSH
55631: LD_INT 22
55633: PUSH
55634: LD_OWVAR 2
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 32
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 21
55655: PUSH
55656: LD_INT 2
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: LIST
55667: PPUSH
55668: CALL_OW 69
55672: ST_TO_ADDR
// if not tmp then
55673: LD_VAR 0 2
55677: NOT
55678: IFFALSE 55682
// exit ;
55680: GO 55711
// for i in tmp do
55682: LD_ADDR_VAR 0 1
55686: PUSH
55687: LD_VAR 0 2
55691: PUSH
55692: FOR_IN
55693: IFFALSE 55709
// SetFuel ( i , 0 ) ;
55695: LD_VAR 0 1
55699: PPUSH
55700: LD_INT 0
55702: PPUSH
55703: CALL_OW 240
55707: GO 55692
55709: POP
55710: POP
// end ;
55711: PPOPN 2
55713: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
55714: LD_EXP 15
55718: PUSH
55719: LD_EXP 51
55723: AND
55724: IFFALSE 55790
55726: GO 55728
55728: DISABLE
55729: LD_INT 0
55731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
55732: LD_ADDR_VAR 0 1
55736: PUSH
55737: LD_INT 22
55739: PUSH
55740: LD_OWVAR 2
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 30
55751: PUSH
55752: LD_INT 29
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PPUSH
55763: CALL_OW 69
55767: ST_TO_ADDR
// if not tmp then
55768: LD_VAR 0 1
55772: NOT
55773: IFFALSE 55777
// exit ;
55775: GO 55790
// DestroyUnit ( tmp [ 1 ] ) ;
55777: LD_VAR 0 1
55781: PUSH
55782: LD_INT 1
55784: ARRAY
55785: PPUSH
55786: CALL_OW 65
// end ;
55790: PPOPN 1
55792: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
55793: LD_EXP 15
55797: PUSH
55798: LD_EXP 53
55802: AND
55803: IFFALSE 55932
55805: GO 55807
55807: DISABLE
55808: LD_INT 0
55810: PPUSH
// begin uc_side := 0 ;
55811: LD_ADDR_OWVAR 20
55815: PUSH
55816: LD_INT 0
55818: ST_TO_ADDR
// uc_nation := nation_arabian ;
55819: LD_ADDR_OWVAR 21
55823: PUSH
55824: LD_INT 2
55826: ST_TO_ADDR
// hc_gallery :=  ;
55827: LD_ADDR_OWVAR 33
55831: PUSH
55832: LD_STRING 
55834: ST_TO_ADDR
// hc_name :=  ;
55835: LD_ADDR_OWVAR 26
55839: PUSH
55840: LD_STRING 
55842: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
55843: LD_INT 1
55845: PPUSH
55846: LD_INT 11
55848: PPUSH
55849: LD_INT 10
55851: PPUSH
55852: CALL_OW 380
// un := CreateHuman ;
55856: LD_ADDR_VAR 0 1
55860: PUSH
55861: CALL_OW 44
55865: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55866: LD_VAR 0 1
55870: PPUSH
55871: LD_INT 1
55873: PPUSH
55874: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55878: LD_INT 35
55880: PPUSH
55881: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55885: LD_VAR 0 1
55889: PPUSH
55890: LD_INT 22
55892: PUSH
55893: LD_OWVAR 2
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PPUSH
55902: CALL_OW 69
55906: PPUSH
55907: LD_VAR 0 1
55911: PPUSH
55912: CALL_OW 74
55916: PPUSH
55917: CALL_OW 115
// until IsDead ( un ) ;
55921: LD_VAR 0 1
55925: PPUSH
55926: CALL_OW 301
55930: IFFALSE 55878
// end ;
55932: PPOPN 1
55934: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
55935: LD_EXP 15
55939: PUSH
55940: LD_EXP 55
55944: AND
55945: IFFALSE 55957
55947: GO 55949
55949: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
55950: LD_STRING earthquake(getX(game), 0, 32)
55952: PPUSH
55953: CALL_OW 559
55957: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
55958: LD_EXP 15
55962: PUSH
55963: LD_EXP 56
55967: AND
55968: IFFALSE 56059
55970: GO 55972
55972: DISABLE
55973: LD_INT 0
55975: PPUSH
// begin enable ;
55976: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
55977: LD_ADDR_VAR 0 1
55981: PUSH
55982: LD_INT 22
55984: PUSH
55985: LD_OWVAR 2
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 21
55996: PUSH
55997: LD_INT 2
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 33
56006: PUSH
56007: LD_INT 3
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: LIST
56018: PPUSH
56019: CALL_OW 69
56023: ST_TO_ADDR
// if not tmp then
56024: LD_VAR 0 1
56028: NOT
56029: IFFALSE 56033
// exit ;
56031: GO 56059
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56033: LD_VAR 0 1
56037: PUSH
56038: LD_INT 1
56040: PPUSH
56041: LD_VAR 0 1
56045: PPUSH
56046: CALL_OW 12
56050: ARRAY
56051: PPUSH
56052: LD_INT 1
56054: PPUSH
56055: CALL_OW 234
// end ;
56059: PPOPN 1
56061: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
56062: LD_EXP 15
56066: PUSH
56067: LD_EXP 57
56071: AND
56072: IFFALSE 56213
56074: GO 56076
56076: DISABLE
56077: LD_INT 0
56079: PPUSH
56080: PPUSH
56081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56082: LD_ADDR_VAR 0 3
56086: PUSH
56087: LD_INT 22
56089: PUSH
56090: LD_OWVAR 2
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 25
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PPUSH
56113: CALL_OW 69
56117: ST_TO_ADDR
// if not tmp then
56118: LD_VAR 0 3
56122: NOT
56123: IFFALSE 56127
// exit ;
56125: GO 56213
// un := tmp [ rand ( 1 , tmp ) ] ;
56127: LD_ADDR_VAR 0 2
56131: PUSH
56132: LD_VAR 0 3
56136: PUSH
56137: LD_INT 1
56139: PPUSH
56140: LD_VAR 0 3
56144: PPUSH
56145: CALL_OW 12
56149: ARRAY
56150: ST_TO_ADDR
// if Crawls ( un ) then
56151: LD_VAR 0 2
56155: PPUSH
56156: CALL_OW 318
56160: IFFALSE 56171
// ComWalk ( un ) ;
56162: LD_VAR 0 2
56166: PPUSH
56167: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
56171: LD_VAR 0 2
56175: PPUSH
56176: LD_INT 9
56178: PPUSH
56179: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
56183: LD_INT 28
56185: PPUSH
56186: LD_OWVAR 2
56190: PPUSH
56191: LD_INT 2
56193: PPUSH
56194: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
56198: LD_INT 29
56200: PPUSH
56201: LD_OWVAR 2
56205: PPUSH
56206: LD_INT 2
56208: PPUSH
56209: CALL_OW 322
// end ;
56213: PPOPN 3
56215: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
56216: LD_EXP 15
56220: PUSH
56221: LD_EXP 58
56225: AND
56226: IFFALSE 56337
56228: GO 56230
56230: DISABLE
56231: LD_INT 0
56233: PPUSH
56234: PPUSH
56235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56236: LD_ADDR_VAR 0 3
56240: PUSH
56241: LD_INT 22
56243: PUSH
56244: LD_OWVAR 2
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 25
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PPUSH
56267: CALL_OW 69
56271: ST_TO_ADDR
// if not tmp then
56272: LD_VAR 0 3
56276: NOT
56277: IFFALSE 56281
// exit ;
56279: GO 56337
// un := tmp [ rand ( 1 , tmp ) ] ;
56281: LD_ADDR_VAR 0 2
56285: PUSH
56286: LD_VAR 0 3
56290: PUSH
56291: LD_INT 1
56293: PPUSH
56294: LD_VAR 0 3
56298: PPUSH
56299: CALL_OW 12
56303: ARRAY
56304: ST_TO_ADDR
// if Crawls ( un ) then
56305: LD_VAR 0 2
56309: PPUSH
56310: CALL_OW 318
56314: IFFALSE 56325
// ComWalk ( un ) ;
56316: LD_VAR 0 2
56320: PPUSH
56321: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56325: LD_VAR 0 2
56329: PPUSH
56330: LD_INT 8
56332: PPUSH
56333: CALL_OW 336
// end ;
56337: PPOPN 3
56339: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
56340: LD_EXP 15
56344: PUSH
56345: LD_EXP 59
56349: AND
56350: IFFALSE 56494
56352: GO 56354
56354: DISABLE
56355: LD_INT 0
56357: PPUSH
56358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
56359: LD_ADDR_VAR 0 2
56363: PUSH
56364: LD_INT 22
56366: PUSH
56367: LD_OWVAR 2
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 21
56378: PUSH
56379: LD_INT 2
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 2
56388: PUSH
56389: LD_INT 34
56391: PUSH
56392: LD_INT 12
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 34
56401: PUSH
56402: LD_INT 51
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 34
56411: PUSH
56412: LD_INT 32
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: LIST
56429: PPUSH
56430: CALL_OW 69
56434: ST_TO_ADDR
// if not tmp then
56435: LD_VAR 0 2
56439: NOT
56440: IFFALSE 56444
// exit ;
56442: GO 56494
// for i in tmp do
56444: LD_ADDR_VAR 0 1
56448: PUSH
56449: LD_VAR 0 2
56453: PUSH
56454: FOR_IN
56455: IFFALSE 56492
// if GetCargo ( i , mat_artifact ) = 0 then
56457: LD_VAR 0 1
56461: PPUSH
56462: LD_INT 4
56464: PPUSH
56465: CALL_OW 289
56469: PUSH
56470: LD_INT 0
56472: EQUAL
56473: IFFALSE 56490
// SetCargo ( i , mat_siberit , 100 ) ;
56475: LD_VAR 0 1
56479: PPUSH
56480: LD_INT 3
56482: PPUSH
56483: LD_INT 100
56485: PPUSH
56486: CALL_OW 290
56490: GO 56454
56492: POP
56493: POP
// end ;
56494: PPOPN 2
56496: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
56497: LD_EXP 15
56501: PUSH
56502: LD_EXP 60
56506: AND
56507: IFFALSE 56690
56509: GO 56511
56511: DISABLE
56512: LD_INT 0
56514: PPUSH
56515: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56516: LD_ADDR_VAR 0 2
56520: PUSH
56521: LD_INT 22
56523: PUSH
56524: LD_OWVAR 2
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PPUSH
56533: CALL_OW 69
56537: ST_TO_ADDR
// if not tmp then
56538: LD_VAR 0 2
56542: NOT
56543: IFFALSE 56547
// exit ;
56545: GO 56690
// for i := 1 to 2 do
56547: LD_ADDR_VAR 0 1
56551: PUSH
56552: DOUBLE
56553: LD_INT 1
56555: DEC
56556: ST_TO_ADDR
56557: LD_INT 2
56559: PUSH
56560: FOR_TO
56561: IFFALSE 56688
// begin uc_side := your_side ;
56563: LD_ADDR_OWVAR 20
56567: PUSH
56568: LD_OWVAR 2
56572: ST_TO_ADDR
// uc_nation := nation_american ;
56573: LD_ADDR_OWVAR 21
56577: PUSH
56578: LD_INT 1
56580: ST_TO_ADDR
// vc_chassis := us_morphling ;
56581: LD_ADDR_OWVAR 37
56585: PUSH
56586: LD_INT 5
56588: ST_TO_ADDR
// vc_engine := engine_siberite ;
56589: LD_ADDR_OWVAR 39
56593: PUSH
56594: LD_INT 3
56596: ST_TO_ADDR
// vc_control := control_computer ;
56597: LD_ADDR_OWVAR 38
56601: PUSH
56602: LD_INT 3
56604: ST_TO_ADDR
// vc_weapon := us_double_laser ;
56605: LD_ADDR_OWVAR 40
56609: PUSH
56610: LD_INT 10
56612: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
56613: LD_VAR 0 2
56617: PUSH
56618: LD_INT 1
56620: ARRAY
56621: PPUSH
56622: CALL_OW 310
56626: NOT
56627: IFFALSE 56674
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
56629: CALL_OW 45
56633: PPUSH
56634: LD_VAR 0 2
56638: PUSH
56639: LD_INT 1
56641: ARRAY
56642: PPUSH
56643: CALL_OW 250
56647: PPUSH
56648: LD_VAR 0 2
56652: PUSH
56653: LD_INT 1
56655: ARRAY
56656: PPUSH
56657: CALL_OW 251
56661: PPUSH
56662: LD_INT 12
56664: PPUSH
56665: LD_INT 1
56667: PPUSH
56668: CALL_OW 50
56672: GO 56686
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
56674: CALL_OW 45
56678: PPUSH
56679: LD_INT 1
56681: PPUSH
56682: CALL_OW 51
// end ;
56686: GO 56560
56688: POP
56689: POP
// end ;
56690: PPOPN 2
56692: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
56693: LD_EXP 15
56697: PUSH
56698: LD_EXP 61
56702: AND
56703: IFFALSE 56925
56705: GO 56707
56707: DISABLE
56708: LD_INT 0
56710: PPUSH
56711: PPUSH
56712: PPUSH
56713: PPUSH
56714: PPUSH
56715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56716: LD_ADDR_VAR 0 6
56720: PUSH
56721: LD_INT 22
56723: PUSH
56724: LD_OWVAR 2
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 21
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 3
56745: PUSH
56746: LD_INT 23
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: LIST
56764: PPUSH
56765: CALL_OW 69
56769: ST_TO_ADDR
// if not tmp then
56770: LD_VAR 0 6
56774: NOT
56775: IFFALSE 56779
// exit ;
56777: GO 56925
// s1 := rand ( 1 , 4 ) ;
56779: LD_ADDR_VAR 0 2
56783: PUSH
56784: LD_INT 1
56786: PPUSH
56787: LD_INT 4
56789: PPUSH
56790: CALL_OW 12
56794: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
56795: LD_ADDR_VAR 0 4
56799: PUSH
56800: LD_VAR 0 6
56804: PUSH
56805: LD_INT 1
56807: ARRAY
56808: PPUSH
56809: LD_VAR 0 2
56813: PPUSH
56814: CALL_OW 259
56818: ST_TO_ADDR
// if s1 = 1 then
56819: LD_VAR 0 2
56823: PUSH
56824: LD_INT 1
56826: EQUAL
56827: IFFALSE 56847
// s2 := rand ( 2 , 4 ) else
56829: LD_ADDR_VAR 0 3
56833: PUSH
56834: LD_INT 2
56836: PPUSH
56837: LD_INT 4
56839: PPUSH
56840: CALL_OW 12
56844: ST_TO_ADDR
56845: GO 56855
// s2 := 1 ;
56847: LD_ADDR_VAR 0 3
56851: PUSH
56852: LD_INT 1
56854: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
56855: LD_ADDR_VAR 0 5
56859: PUSH
56860: LD_VAR 0 6
56864: PUSH
56865: LD_INT 1
56867: ARRAY
56868: PPUSH
56869: LD_VAR 0 3
56873: PPUSH
56874: CALL_OW 259
56878: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
56879: LD_VAR 0 6
56883: PUSH
56884: LD_INT 1
56886: ARRAY
56887: PPUSH
56888: LD_VAR 0 2
56892: PPUSH
56893: LD_VAR 0 5
56897: PPUSH
56898: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
56902: LD_VAR 0 6
56906: PUSH
56907: LD_INT 1
56909: ARRAY
56910: PPUSH
56911: LD_VAR 0 3
56915: PPUSH
56916: LD_VAR 0 4
56920: PPUSH
56921: CALL_OW 237
// end ;
56925: PPOPN 6
56927: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
56928: LD_EXP 15
56932: PUSH
56933: LD_EXP 62
56937: AND
56938: IFFALSE 57017
56940: GO 56942
56942: DISABLE
56943: LD_INT 0
56945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
56946: LD_ADDR_VAR 0 1
56950: PUSH
56951: LD_INT 22
56953: PUSH
56954: LD_OWVAR 2
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 30
56965: PUSH
56966: LD_INT 3
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PPUSH
56977: CALL_OW 69
56981: ST_TO_ADDR
// if not tmp then
56982: LD_VAR 0 1
56986: NOT
56987: IFFALSE 56991
// exit ;
56989: GO 57017
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56991: LD_VAR 0 1
56995: PUSH
56996: LD_INT 1
56998: PPUSH
56999: LD_VAR 0 1
57003: PPUSH
57004: CALL_OW 12
57008: ARRAY
57009: PPUSH
57010: LD_INT 1
57012: PPUSH
57013: CALL_OW 234
// end ;
57017: PPOPN 1
57019: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
57020: LD_EXP 15
57024: PUSH
57025: LD_EXP 63
57029: AND
57030: IFFALSE 57142
57032: GO 57034
57034: DISABLE
57035: LD_INT 0
57037: PPUSH
57038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
57039: LD_ADDR_VAR 0 2
57043: PUSH
57044: LD_INT 22
57046: PUSH
57047: LD_OWVAR 2
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 2
57058: PUSH
57059: LD_INT 30
57061: PUSH
57062: LD_INT 27
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 30
57071: PUSH
57072: LD_INT 26
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 30
57081: PUSH
57082: LD_INT 28
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PPUSH
57099: CALL_OW 69
57103: ST_TO_ADDR
// if not tmp then
57104: LD_VAR 0 2
57108: NOT
57109: IFFALSE 57113
// exit ;
57111: GO 57142
// for i in tmp do
57113: LD_ADDR_VAR 0 1
57117: PUSH
57118: LD_VAR 0 2
57122: PUSH
57123: FOR_IN
57124: IFFALSE 57140
// SetLives ( i , 1 ) ;
57126: LD_VAR 0 1
57130: PPUSH
57131: LD_INT 1
57133: PPUSH
57134: CALL_OW 234
57138: GO 57123
57140: POP
57141: POP
// end ;
57142: PPOPN 2
57144: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
57145: LD_EXP 15
57149: PUSH
57150: LD_EXP 64
57154: AND
57155: IFFALSE 57442
57157: GO 57159
57159: DISABLE
57160: LD_INT 0
57162: PPUSH
57163: PPUSH
57164: PPUSH
// begin i := rand ( 1 , 7 ) ;
57165: LD_ADDR_VAR 0 1
57169: PUSH
57170: LD_INT 1
57172: PPUSH
57173: LD_INT 7
57175: PPUSH
57176: CALL_OW 12
57180: ST_TO_ADDR
// case i of 1 :
57181: LD_VAR 0 1
57185: PUSH
57186: LD_INT 1
57188: DOUBLE
57189: EQUAL
57190: IFTRUE 57194
57192: GO 57204
57194: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
57195: LD_STRING earthquake(getX(game), 0, 32)
57197: PPUSH
57198: CALL_OW 559
57202: GO 57442
57204: LD_INT 2
57206: DOUBLE
57207: EQUAL
57208: IFTRUE 57212
57210: GO 57226
57212: POP
// begin ToLua ( displayStucuk(); ) ;
57213: LD_STRING displayStucuk();
57215: PPUSH
57216: CALL_OW 559
// ResetFog ;
57220: CALL_OW 335
// end ; 3 :
57224: GO 57442
57226: LD_INT 3
57228: DOUBLE
57229: EQUAL
57230: IFTRUE 57234
57232: GO 57338
57234: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57235: LD_ADDR_VAR 0 2
57239: PUSH
57240: LD_INT 22
57242: PUSH
57243: LD_OWVAR 2
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 25
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PPUSH
57266: CALL_OW 69
57270: ST_TO_ADDR
// if not tmp then
57271: LD_VAR 0 2
57275: NOT
57276: IFFALSE 57280
// exit ;
57278: GO 57442
// un := tmp [ rand ( 1 , tmp ) ] ;
57280: LD_ADDR_VAR 0 3
57284: PUSH
57285: LD_VAR 0 2
57289: PUSH
57290: LD_INT 1
57292: PPUSH
57293: LD_VAR 0 2
57297: PPUSH
57298: CALL_OW 12
57302: ARRAY
57303: ST_TO_ADDR
// if Crawls ( un ) then
57304: LD_VAR 0 3
57308: PPUSH
57309: CALL_OW 318
57313: IFFALSE 57324
// ComWalk ( un ) ;
57315: LD_VAR 0 3
57319: PPUSH
57320: CALL_OW 138
// SetClass ( un , class_mortar ) ;
57324: LD_VAR 0 3
57328: PPUSH
57329: LD_INT 8
57331: PPUSH
57332: CALL_OW 336
// end ; 4 :
57336: GO 57442
57338: LD_INT 4
57340: DOUBLE
57341: EQUAL
57342: IFTRUE 57346
57344: GO 57420
57346: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57347: LD_ADDR_VAR 0 2
57351: PUSH
57352: LD_INT 22
57354: PUSH
57355: LD_OWVAR 2
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 30
57366: PUSH
57367: LD_INT 29
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PPUSH
57378: CALL_OW 69
57382: ST_TO_ADDR
// if not tmp then
57383: LD_VAR 0 2
57387: NOT
57388: IFFALSE 57392
// exit ;
57390: GO 57442
// CenterNowOnUnits ( tmp [ 1 ] ) ;
57392: LD_VAR 0 2
57396: PUSH
57397: LD_INT 1
57399: ARRAY
57400: PPUSH
57401: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
57405: LD_VAR 0 2
57409: PUSH
57410: LD_INT 1
57412: ARRAY
57413: PPUSH
57414: CALL_OW 65
// end ; 5 .. 7 :
57418: GO 57442
57420: LD_INT 5
57422: DOUBLE
57423: GREATEREQUAL
57424: IFFALSE 57432
57426: LD_INT 7
57428: DOUBLE
57429: LESSEQUAL
57430: IFTRUE 57434
57432: GO 57441
57434: POP
// StreamSibBomb ; end ;
57435: CALL 53679 0 0
57439: GO 57442
57441: POP
// end ;
57442: PPOPN 3
57444: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
57445: LD_EXP 15
57449: PUSH
57450: LD_EXP 65
57454: AND
57455: IFFALSE 57611
57457: GO 57459
57459: DISABLE
57460: LD_INT 0
57462: PPUSH
57463: PPUSH
57464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
57465: LD_ADDR_VAR 0 2
57469: PUSH
57470: LD_INT 81
57472: PUSH
57473: LD_OWVAR 2
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 2
57484: PUSH
57485: LD_INT 21
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 21
57497: PUSH
57498: LD_INT 2
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: LIST
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PPUSH
57514: CALL_OW 69
57518: ST_TO_ADDR
// if not tmp then
57519: LD_VAR 0 2
57523: NOT
57524: IFFALSE 57528
// exit ;
57526: GO 57611
// p := 0 ;
57528: LD_ADDR_VAR 0 3
57532: PUSH
57533: LD_INT 0
57535: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57536: LD_INT 35
57538: PPUSH
57539: CALL_OW 67
// p := p + 1 ;
57543: LD_ADDR_VAR 0 3
57547: PUSH
57548: LD_VAR 0 3
57552: PUSH
57553: LD_INT 1
57555: PLUS
57556: ST_TO_ADDR
// for i in tmp do
57557: LD_ADDR_VAR 0 1
57561: PUSH
57562: LD_VAR 0 2
57566: PUSH
57567: FOR_IN
57568: IFFALSE 57599
// if GetLives ( i ) < 1000 then
57570: LD_VAR 0 1
57574: PPUSH
57575: CALL_OW 256
57579: PUSH
57580: LD_INT 1000
57582: LESS
57583: IFFALSE 57597
// SetLives ( i , 1000 ) ;
57585: LD_VAR 0 1
57589: PPUSH
57590: LD_INT 1000
57592: PPUSH
57593: CALL_OW 234
57597: GO 57567
57599: POP
57600: POP
// until p > 20 ;
57601: LD_VAR 0 3
57605: PUSH
57606: LD_INT 20
57608: GREATER
57609: IFFALSE 57536
// end ;
57611: PPOPN 3
57613: END
// every 0 0$1 trigger StreamModeActive and sTime do
57614: LD_EXP 15
57618: PUSH
57619: LD_EXP 66
57623: AND
57624: IFFALSE 57659
57626: GO 57628
57628: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
57629: LD_INT 28
57631: PPUSH
57632: LD_OWVAR 2
57636: PPUSH
57637: LD_INT 2
57639: PPUSH
57640: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
57644: LD_INT 30
57646: PPUSH
57647: LD_OWVAR 2
57651: PPUSH
57652: LD_INT 2
57654: PPUSH
57655: CALL_OW 322
// end ;
57659: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
57660: LD_EXP 15
57664: PUSH
57665: LD_EXP 67
57669: AND
57670: IFFALSE 57791
57672: GO 57674
57674: DISABLE
57675: LD_INT 0
57677: PPUSH
57678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57679: LD_ADDR_VAR 0 2
57683: PUSH
57684: LD_INT 22
57686: PUSH
57687: LD_OWVAR 2
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 21
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 3
57708: PUSH
57709: LD_INT 23
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: LIST
57727: PPUSH
57728: CALL_OW 69
57732: ST_TO_ADDR
// if not tmp then
57733: LD_VAR 0 2
57737: NOT
57738: IFFALSE 57742
// exit ;
57740: GO 57791
// for i in tmp do
57742: LD_ADDR_VAR 0 1
57746: PUSH
57747: LD_VAR 0 2
57751: PUSH
57752: FOR_IN
57753: IFFALSE 57789
// begin if Crawls ( i ) then
57755: LD_VAR 0 1
57759: PPUSH
57760: CALL_OW 318
57764: IFFALSE 57775
// ComWalk ( i ) ;
57766: LD_VAR 0 1
57770: PPUSH
57771: CALL_OW 138
// SetClass ( i , 2 ) ;
57775: LD_VAR 0 1
57779: PPUSH
57780: LD_INT 2
57782: PPUSH
57783: CALL_OW 336
// end ;
57787: GO 57752
57789: POP
57790: POP
// end ;
57791: PPOPN 2
57793: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
57794: LD_EXP 15
57798: PUSH
57799: LD_EXP 68
57803: AND
57804: IFFALSE 58092
57806: GO 57808
57808: DISABLE
57809: LD_INT 0
57811: PPUSH
57812: PPUSH
57813: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
57814: LD_OWVAR 2
57818: PPUSH
57819: LD_INT 9
57821: PPUSH
57822: LD_INT 1
57824: PPUSH
57825: LD_INT 1
57827: PPUSH
57828: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
57832: LD_INT 9
57834: PPUSH
57835: LD_OWVAR 2
57839: PPUSH
57840: CALL_OW 343
// uc_side := 9 ;
57844: LD_ADDR_OWVAR 20
57848: PUSH
57849: LD_INT 9
57851: ST_TO_ADDR
// uc_nation := 2 ;
57852: LD_ADDR_OWVAR 21
57856: PUSH
57857: LD_INT 2
57859: ST_TO_ADDR
// hc_name := Dark Warrior ;
57860: LD_ADDR_OWVAR 26
57864: PUSH
57865: LD_STRING Dark Warrior
57867: ST_TO_ADDR
// hc_gallery :=  ;
57868: LD_ADDR_OWVAR 33
57872: PUSH
57873: LD_STRING 
57875: ST_TO_ADDR
// hc_noskilllimit := true ;
57876: LD_ADDR_OWVAR 76
57880: PUSH
57881: LD_INT 1
57883: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
57884: LD_ADDR_OWVAR 31
57888: PUSH
57889: LD_INT 30
57891: PUSH
57892: LD_INT 30
57894: PUSH
57895: LD_INT 30
57897: PUSH
57898: LD_INT 30
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: ST_TO_ADDR
// un := CreateHuman ;
57907: LD_ADDR_VAR 0 3
57911: PUSH
57912: CALL_OW 44
57916: ST_TO_ADDR
// hc_noskilllimit := false ;
57917: LD_ADDR_OWVAR 76
57921: PUSH
57922: LD_INT 0
57924: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57925: LD_VAR 0 3
57929: PPUSH
57930: LD_INT 1
57932: PPUSH
57933: CALL_OW 51
// ToLua ( playRanger() ) ;
57937: LD_STRING playRanger()
57939: PPUSH
57940: CALL_OW 559
// p := 0 ;
57944: LD_ADDR_VAR 0 2
57948: PUSH
57949: LD_INT 0
57951: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57952: LD_INT 35
57954: PPUSH
57955: CALL_OW 67
// p := p + 1 ;
57959: LD_ADDR_VAR 0 2
57963: PUSH
57964: LD_VAR 0 2
57968: PUSH
57969: LD_INT 1
57971: PLUS
57972: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
57973: LD_VAR 0 3
57977: PPUSH
57978: CALL_OW 256
57982: PUSH
57983: LD_INT 1000
57985: LESS
57986: IFFALSE 58000
// SetLives ( un , 1000 ) ;
57988: LD_VAR 0 3
57992: PPUSH
57993: LD_INT 1000
57995: PPUSH
57996: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
58000: LD_VAR 0 3
58004: PPUSH
58005: LD_INT 81
58007: PUSH
58008: LD_OWVAR 2
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 91
58019: PUSH
58020: LD_VAR 0 3
58024: PUSH
58025: LD_INT 30
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: LIST
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PPUSH
58037: CALL_OW 69
58041: PPUSH
58042: LD_VAR 0 3
58046: PPUSH
58047: CALL_OW 74
58051: PPUSH
58052: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
58056: LD_VAR 0 2
58060: PUSH
58061: LD_INT 80
58063: GREATER
58064: PUSH
58065: LD_VAR 0 3
58069: PPUSH
58070: CALL_OW 301
58074: OR
58075: IFFALSE 57952
// if un then
58077: LD_VAR 0 3
58081: IFFALSE 58092
// RemoveUnit ( un ) ;
58083: LD_VAR 0 3
58087: PPUSH
58088: CALL_OW 64
// end ;
58092: PPOPN 3
58094: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
58095: LD_EXP 69
58099: IFFALSE 58215
58101: GO 58103
58103: DISABLE
58104: LD_INT 0
58106: PPUSH
58107: PPUSH
58108: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58109: LD_ADDR_VAR 0 2
58113: PUSH
58114: LD_INT 81
58116: PUSH
58117: LD_OWVAR 2
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 21
58128: PUSH
58129: LD_INT 1
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PPUSH
58140: CALL_OW 69
58144: ST_TO_ADDR
// ToLua ( playComputer() ) ;
58145: LD_STRING playComputer()
58147: PPUSH
58148: CALL_OW 559
// if not tmp then
58152: LD_VAR 0 2
58156: NOT
58157: IFFALSE 58161
// exit ;
58159: GO 58215
// for i in tmp do
58161: LD_ADDR_VAR 0 1
58165: PUSH
58166: LD_VAR 0 2
58170: PUSH
58171: FOR_IN
58172: IFFALSE 58213
// for j := 1 to 4 do
58174: LD_ADDR_VAR 0 3
58178: PUSH
58179: DOUBLE
58180: LD_INT 1
58182: DEC
58183: ST_TO_ADDR
58184: LD_INT 4
58186: PUSH
58187: FOR_TO
58188: IFFALSE 58209
// SetSkill ( i , j , 10 ) ;
58190: LD_VAR 0 1
58194: PPUSH
58195: LD_VAR 0 3
58199: PPUSH
58200: LD_INT 10
58202: PPUSH
58203: CALL_OW 237
58207: GO 58187
58209: POP
58210: POP
58211: GO 58171
58213: POP
58214: POP
// end ;
58215: PPOPN 3
58217: END
// every 0 0$1 trigger s30 do var i , tmp ;
58218: LD_EXP 70
58222: IFFALSE 58291
58224: GO 58226
58226: DISABLE
58227: LD_INT 0
58229: PPUSH
58230: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58231: LD_ADDR_VAR 0 2
58235: PUSH
58236: LD_INT 22
58238: PUSH
58239: LD_OWVAR 2
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PPUSH
58248: CALL_OW 69
58252: ST_TO_ADDR
// if not tmp then
58253: LD_VAR 0 2
58257: NOT
58258: IFFALSE 58262
// exit ;
58260: GO 58291
// for i in tmp do
58262: LD_ADDR_VAR 0 1
58266: PUSH
58267: LD_VAR 0 2
58271: PUSH
58272: FOR_IN
58273: IFFALSE 58289
// SetLives ( i , 300 ) ;
58275: LD_VAR 0 1
58279: PPUSH
58280: LD_INT 300
58282: PPUSH
58283: CALL_OW 234
58287: GO 58272
58289: POP
58290: POP
// end ;
58291: PPOPN 2
58293: END
// every 0 0$1 trigger s60 do var i , tmp ;
58294: LD_EXP 71
58298: IFFALSE 58367
58300: GO 58302
58302: DISABLE
58303: LD_INT 0
58305: PPUSH
58306: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58307: LD_ADDR_VAR 0 2
58311: PUSH
58312: LD_INT 22
58314: PUSH
58315: LD_OWVAR 2
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PPUSH
58324: CALL_OW 69
58328: ST_TO_ADDR
// if not tmp then
58329: LD_VAR 0 2
58333: NOT
58334: IFFALSE 58338
// exit ;
58336: GO 58367
// for i in tmp do
58338: LD_ADDR_VAR 0 1
58342: PUSH
58343: LD_VAR 0 2
58347: PUSH
58348: FOR_IN
58349: IFFALSE 58365
// SetLives ( i , 600 ) ;
58351: LD_VAR 0 1
58355: PPUSH
58356: LD_INT 600
58358: PPUSH
58359: CALL_OW 234
58363: GO 58348
58365: POP
58366: POP
// end ;
58367: PPOPN 2
58369: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58370: LD_INT 0
58372: PPUSH
// case cmd of 301 :
58373: LD_VAR 0 1
58377: PUSH
58378: LD_INT 301
58380: DOUBLE
58381: EQUAL
58382: IFTRUE 58386
58384: GO 58418
58386: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
58387: LD_VAR 0 6
58391: PPUSH
58392: LD_VAR 0 7
58396: PPUSH
58397: LD_VAR 0 8
58401: PPUSH
58402: LD_VAR 0 4
58406: PPUSH
58407: LD_VAR 0 5
58411: PPUSH
58412: CALL 59627 0 5
58416: GO 58539
58418: LD_INT 302
58420: DOUBLE
58421: EQUAL
58422: IFTRUE 58426
58424: GO 58463
58426: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
58427: LD_VAR 0 6
58431: PPUSH
58432: LD_VAR 0 7
58436: PPUSH
58437: LD_VAR 0 8
58441: PPUSH
58442: LD_VAR 0 9
58446: PPUSH
58447: LD_VAR 0 4
58451: PPUSH
58452: LD_VAR 0 5
58456: PPUSH
58457: CALL 59718 0 6
58461: GO 58539
58463: LD_INT 303
58465: DOUBLE
58466: EQUAL
58467: IFTRUE 58471
58469: GO 58508
58471: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
58472: LD_VAR 0 6
58476: PPUSH
58477: LD_VAR 0 7
58481: PPUSH
58482: LD_VAR 0 8
58486: PPUSH
58487: LD_VAR 0 9
58491: PPUSH
58492: LD_VAR 0 4
58496: PPUSH
58497: LD_VAR 0 5
58501: PPUSH
58502: CALL 58544 0 6
58506: GO 58539
58508: LD_INT 304
58510: DOUBLE
58511: EQUAL
58512: IFTRUE 58516
58514: GO 58538
58516: POP
// hHackTeleport ( unit , x , y ) ; end ;
58517: LD_VAR 0 2
58521: PPUSH
58522: LD_VAR 0 4
58526: PPUSH
58527: LD_VAR 0 5
58531: PPUSH
58532: CALL 60311 0 3
58536: GO 58539
58538: POP
// end ;
58539: LD_VAR 0 12
58543: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
58544: LD_INT 0
58546: PPUSH
58547: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
58548: LD_VAR 0 1
58552: PUSH
58553: LD_INT 1
58555: LESS
58556: PUSH
58557: LD_VAR 0 1
58561: PUSH
58562: LD_INT 3
58564: GREATER
58565: OR
58566: PUSH
58567: LD_VAR 0 5
58571: PPUSH
58572: LD_VAR 0 6
58576: PPUSH
58577: CALL_OW 428
58581: OR
58582: IFFALSE 58586
// exit ;
58584: GO 59314
// uc_side := your_side ;
58586: LD_ADDR_OWVAR 20
58590: PUSH
58591: LD_OWVAR 2
58595: ST_TO_ADDR
// uc_nation := nation ;
58596: LD_ADDR_OWVAR 21
58600: PUSH
58601: LD_VAR 0 1
58605: ST_TO_ADDR
// bc_level = 1 ;
58606: LD_ADDR_OWVAR 43
58610: PUSH
58611: LD_INT 1
58613: ST_TO_ADDR
// case btype of 1 :
58614: LD_VAR 0 2
58618: PUSH
58619: LD_INT 1
58621: DOUBLE
58622: EQUAL
58623: IFTRUE 58627
58625: GO 58638
58627: POP
// bc_type := b_depot ; 2 :
58628: LD_ADDR_OWVAR 42
58632: PUSH
58633: LD_INT 0
58635: ST_TO_ADDR
58636: GO 59258
58638: LD_INT 2
58640: DOUBLE
58641: EQUAL
58642: IFTRUE 58646
58644: GO 58657
58646: POP
// bc_type := b_warehouse ; 3 :
58647: LD_ADDR_OWVAR 42
58651: PUSH
58652: LD_INT 1
58654: ST_TO_ADDR
58655: GO 59258
58657: LD_INT 3
58659: DOUBLE
58660: EQUAL
58661: IFTRUE 58665
58663: GO 58676
58665: POP
// bc_type := b_lab ; 4 .. 9 :
58666: LD_ADDR_OWVAR 42
58670: PUSH
58671: LD_INT 6
58673: ST_TO_ADDR
58674: GO 59258
58676: LD_INT 4
58678: DOUBLE
58679: GREATEREQUAL
58680: IFFALSE 58688
58682: LD_INT 9
58684: DOUBLE
58685: LESSEQUAL
58686: IFTRUE 58690
58688: GO 58750
58690: POP
// begin bc_type := b_lab_half ;
58691: LD_ADDR_OWVAR 42
58695: PUSH
58696: LD_INT 7
58698: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
58699: LD_ADDR_OWVAR 44
58703: PUSH
58704: LD_INT 10
58706: PUSH
58707: LD_INT 11
58709: PUSH
58710: LD_INT 12
58712: PUSH
58713: LD_INT 15
58715: PUSH
58716: LD_INT 14
58718: PUSH
58719: LD_INT 13
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: PUSH
58730: LD_VAR 0 2
58734: PUSH
58735: LD_INT 3
58737: MINUS
58738: ARRAY
58739: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
58740: LD_ADDR_OWVAR 45
58744: PUSH
58745: LD_INT 9
58747: ST_TO_ADDR
// end ; 10 .. 13 :
58748: GO 59258
58750: LD_INT 10
58752: DOUBLE
58753: GREATEREQUAL
58754: IFFALSE 58762
58756: LD_INT 13
58758: DOUBLE
58759: LESSEQUAL
58760: IFTRUE 58764
58762: GO 58841
58764: POP
// begin bc_type := b_lab_full ;
58765: LD_ADDR_OWVAR 42
58769: PUSH
58770: LD_INT 8
58772: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
58773: LD_ADDR_OWVAR 44
58777: PUSH
58778: LD_INT 10
58780: PUSH
58781: LD_INT 12
58783: PUSH
58784: LD_INT 14
58786: PUSH
58787: LD_INT 13
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: PUSH
58796: LD_VAR 0 2
58800: PUSH
58801: LD_INT 9
58803: MINUS
58804: ARRAY
58805: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
58806: LD_ADDR_OWVAR 45
58810: PUSH
58811: LD_INT 11
58813: PUSH
58814: LD_INT 15
58816: PUSH
58817: LD_INT 12
58819: PUSH
58820: LD_INT 15
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: PUSH
58829: LD_VAR 0 2
58833: PUSH
58834: LD_INT 9
58836: MINUS
58837: ARRAY
58838: ST_TO_ADDR
// end ; 14 :
58839: GO 59258
58841: LD_INT 14
58843: DOUBLE
58844: EQUAL
58845: IFTRUE 58849
58847: GO 58860
58849: POP
// bc_type := b_workshop ; 15 :
58850: LD_ADDR_OWVAR 42
58854: PUSH
58855: LD_INT 2
58857: ST_TO_ADDR
58858: GO 59258
58860: LD_INT 15
58862: DOUBLE
58863: EQUAL
58864: IFTRUE 58868
58866: GO 58879
58868: POP
// bc_type := b_factory ; 16 :
58869: LD_ADDR_OWVAR 42
58873: PUSH
58874: LD_INT 3
58876: ST_TO_ADDR
58877: GO 59258
58879: LD_INT 16
58881: DOUBLE
58882: EQUAL
58883: IFTRUE 58887
58885: GO 58898
58887: POP
// bc_type := b_ext_gun ; 17 :
58888: LD_ADDR_OWVAR 42
58892: PUSH
58893: LD_INT 17
58895: ST_TO_ADDR
58896: GO 59258
58898: LD_INT 17
58900: DOUBLE
58901: EQUAL
58902: IFTRUE 58906
58904: GO 58934
58906: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
58907: LD_ADDR_OWVAR 42
58911: PUSH
58912: LD_INT 19
58914: PUSH
58915: LD_INT 23
58917: PUSH
58918: LD_INT 19
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: LIST
58925: PUSH
58926: LD_VAR 0 1
58930: ARRAY
58931: ST_TO_ADDR
58932: GO 59258
58934: LD_INT 18
58936: DOUBLE
58937: EQUAL
58938: IFTRUE 58942
58940: GO 58953
58942: POP
// bc_type := b_ext_radar ; 19 :
58943: LD_ADDR_OWVAR 42
58947: PUSH
58948: LD_INT 20
58950: ST_TO_ADDR
58951: GO 59258
58953: LD_INT 19
58955: DOUBLE
58956: EQUAL
58957: IFTRUE 58961
58959: GO 58972
58961: POP
// bc_type := b_ext_radio ; 20 :
58962: LD_ADDR_OWVAR 42
58966: PUSH
58967: LD_INT 22
58969: ST_TO_ADDR
58970: GO 59258
58972: LD_INT 20
58974: DOUBLE
58975: EQUAL
58976: IFTRUE 58980
58978: GO 58991
58980: POP
// bc_type := b_ext_siberium ; 21 :
58981: LD_ADDR_OWVAR 42
58985: PUSH
58986: LD_INT 21
58988: ST_TO_ADDR
58989: GO 59258
58991: LD_INT 21
58993: DOUBLE
58994: EQUAL
58995: IFTRUE 58999
58997: GO 59010
58999: POP
// bc_type := b_ext_computer ; 22 :
59000: LD_ADDR_OWVAR 42
59004: PUSH
59005: LD_INT 24
59007: ST_TO_ADDR
59008: GO 59258
59010: LD_INT 22
59012: DOUBLE
59013: EQUAL
59014: IFTRUE 59018
59016: GO 59029
59018: POP
// bc_type := b_ext_track ; 23 :
59019: LD_ADDR_OWVAR 42
59023: PUSH
59024: LD_INT 16
59026: ST_TO_ADDR
59027: GO 59258
59029: LD_INT 23
59031: DOUBLE
59032: EQUAL
59033: IFTRUE 59037
59035: GO 59048
59037: POP
// bc_type := b_ext_laser ; 24 :
59038: LD_ADDR_OWVAR 42
59042: PUSH
59043: LD_INT 25
59045: ST_TO_ADDR
59046: GO 59258
59048: LD_INT 24
59050: DOUBLE
59051: EQUAL
59052: IFTRUE 59056
59054: GO 59067
59056: POP
// bc_type := b_control_tower ; 25 :
59057: LD_ADDR_OWVAR 42
59061: PUSH
59062: LD_INT 36
59064: ST_TO_ADDR
59065: GO 59258
59067: LD_INT 25
59069: DOUBLE
59070: EQUAL
59071: IFTRUE 59075
59073: GO 59086
59075: POP
// bc_type := b_breastwork ; 26 :
59076: LD_ADDR_OWVAR 42
59080: PUSH
59081: LD_INT 31
59083: ST_TO_ADDR
59084: GO 59258
59086: LD_INT 26
59088: DOUBLE
59089: EQUAL
59090: IFTRUE 59094
59092: GO 59105
59094: POP
// bc_type := b_bunker ; 27 :
59095: LD_ADDR_OWVAR 42
59099: PUSH
59100: LD_INT 32
59102: ST_TO_ADDR
59103: GO 59258
59105: LD_INT 27
59107: DOUBLE
59108: EQUAL
59109: IFTRUE 59113
59111: GO 59124
59113: POP
// bc_type := b_turret ; 28 :
59114: LD_ADDR_OWVAR 42
59118: PUSH
59119: LD_INT 33
59121: ST_TO_ADDR
59122: GO 59258
59124: LD_INT 28
59126: DOUBLE
59127: EQUAL
59128: IFTRUE 59132
59130: GO 59143
59132: POP
// bc_type := b_armoury ; 29 :
59133: LD_ADDR_OWVAR 42
59137: PUSH
59138: LD_INT 4
59140: ST_TO_ADDR
59141: GO 59258
59143: LD_INT 29
59145: DOUBLE
59146: EQUAL
59147: IFTRUE 59151
59149: GO 59162
59151: POP
// bc_type := b_barracks ; 30 :
59152: LD_ADDR_OWVAR 42
59156: PUSH
59157: LD_INT 5
59159: ST_TO_ADDR
59160: GO 59258
59162: LD_INT 30
59164: DOUBLE
59165: EQUAL
59166: IFTRUE 59170
59168: GO 59181
59170: POP
// bc_type := b_solar_power ; 31 :
59171: LD_ADDR_OWVAR 42
59175: PUSH
59176: LD_INT 27
59178: ST_TO_ADDR
59179: GO 59258
59181: LD_INT 31
59183: DOUBLE
59184: EQUAL
59185: IFTRUE 59189
59187: GO 59200
59189: POP
// bc_type := b_oil_power ; 32 :
59190: LD_ADDR_OWVAR 42
59194: PUSH
59195: LD_INT 26
59197: ST_TO_ADDR
59198: GO 59258
59200: LD_INT 32
59202: DOUBLE
59203: EQUAL
59204: IFTRUE 59208
59206: GO 59219
59208: POP
// bc_type := b_siberite_power ; 33 :
59209: LD_ADDR_OWVAR 42
59213: PUSH
59214: LD_INT 28
59216: ST_TO_ADDR
59217: GO 59258
59219: LD_INT 33
59221: DOUBLE
59222: EQUAL
59223: IFTRUE 59227
59225: GO 59238
59227: POP
// bc_type := b_oil_mine ; 34 :
59228: LD_ADDR_OWVAR 42
59232: PUSH
59233: LD_INT 29
59235: ST_TO_ADDR
59236: GO 59258
59238: LD_INT 34
59240: DOUBLE
59241: EQUAL
59242: IFTRUE 59246
59244: GO 59257
59246: POP
// bc_type := b_siberite_mine ; end ;
59247: LD_ADDR_OWVAR 42
59251: PUSH
59252: LD_INT 30
59254: ST_TO_ADDR
59255: GO 59258
59257: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
59258: LD_ADDR_VAR 0 8
59262: PUSH
59263: LD_VAR 0 5
59267: PPUSH
59268: LD_VAR 0 6
59272: PPUSH
59273: LD_VAR 0 3
59277: PPUSH
59278: CALL_OW 47
59282: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
59283: LD_OWVAR 42
59287: PUSH
59288: LD_INT 32
59290: PUSH
59291: LD_INT 33
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: IN
59298: IFFALSE 59314
// PlaceWeaponTurret ( b , weapon ) ;
59300: LD_VAR 0 8
59304: PPUSH
59305: LD_VAR 0 4
59309: PPUSH
59310: CALL_OW 431
// end ;
59314: LD_VAR 0 7
59318: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
59319: LD_INT 0
59321: PPUSH
59322: PPUSH
59323: PPUSH
59324: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59325: LD_ADDR_VAR 0 4
59329: PUSH
59330: LD_INT 22
59332: PUSH
59333: LD_OWVAR 2
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 2
59344: PUSH
59345: LD_INT 30
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 30
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: LIST
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PPUSH
59374: CALL_OW 69
59378: ST_TO_ADDR
// if not tmp then
59379: LD_VAR 0 4
59383: NOT
59384: IFFALSE 59388
// exit ;
59386: GO 59447
// for i in tmp do
59388: LD_ADDR_VAR 0 2
59392: PUSH
59393: LD_VAR 0 4
59397: PUSH
59398: FOR_IN
59399: IFFALSE 59445
// for j = 1 to 3 do
59401: LD_ADDR_VAR 0 3
59405: PUSH
59406: DOUBLE
59407: LD_INT 1
59409: DEC
59410: ST_TO_ADDR
59411: LD_INT 3
59413: PUSH
59414: FOR_TO
59415: IFFALSE 59441
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
59417: LD_VAR 0 2
59421: PPUSH
59422: CALL_OW 274
59426: PPUSH
59427: LD_VAR 0 3
59431: PPUSH
59432: LD_INT 99999
59434: PPUSH
59435: CALL_OW 277
59439: GO 59414
59441: POP
59442: POP
59443: GO 59398
59445: POP
59446: POP
// end ;
59447: LD_VAR 0 1
59451: RET
// export function hHackSetLevel10 ; var i , j ; begin
59452: LD_INT 0
59454: PPUSH
59455: PPUSH
59456: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59457: LD_ADDR_VAR 0 2
59461: PUSH
59462: LD_INT 21
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PPUSH
59472: CALL_OW 69
59476: PUSH
59477: FOR_IN
59478: IFFALSE 59530
// if IsSelected ( i ) then
59480: LD_VAR 0 2
59484: PPUSH
59485: CALL_OW 306
59489: IFFALSE 59528
// begin for j := 1 to 4 do
59491: LD_ADDR_VAR 0 3
59495: PUSH
59496: DOUBLE
59497: LD_INT 1
59499: DEC
59500: ST_TO_ADDR
59501: LD_INT 4
59503: PUSH
59504: FOR_TO
59505: IFFALSE 59526
// SetSkill ( i , j , 10 ) ;
59507: LD_VAR 0 2
59511: PPUSH
59512: LD_VAR 0 3
59516: PPUSH
59517: LD_INT 10
59519: PPUSH
59520: CALL_OW 237
59524: GO 59504
59526: POP
59527: POP
// end ;
59528: GO 59477
59530: POP
59531: POP
// end ;
59532: LD_VAR 0 1
59536: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
59537: LD_INT 0
59539: PPUSH
59540: PPUSH
59541: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
59542: LD_ADDR_VAR 0 2
59546: PUSH
59547: LD_INT 22
59549: PUSH
59550: LD_OWVAR 2
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 21
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PPUSH
59573: CALL_OW 69
59577: PUSH
59578: FOR_IN
59579: IFFALSE 59620
// begin for j := 1 to 4 do
59581: LD_ADDR_VAR 0 3
59585: PUSH
59586: DOUBLE
59587: LD_INT 1
59589: DEC
59590: ST_TO_ADDR
59591: LD_INT 4
59593: PUSH
59594: FOR_TO
59595: IFFALSE 59616
// SetSkill ( i , j , 10 ) ;
59597: LD_VAR 0 2
59601: PPUSH
59602: LD_VAR 0 3
59606: PPUSH
59607: LD_INT 10
59609: PPUSH
59610: CALL_OW 237
59614: GO 59594
59616: POP
59617: POP
// end ;
59618: GO 59578
59620: POP
59621: POP
// end ;
59622: LD_VAR 0 1
59626: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
59627: LD_INT 0
59629: PPUSH
// uc_side := your_side ;
59630: LD_ADDR_OWVAR 20
59634: PUSH
59635: LD_OWVAR 2
59639: ST_TO_ADDR
// uc_nation := nation ;
59640: LD_ADDR_OWVAR 21
59644: PUSH
59645: LD_VAR 0 1
59649: ST_TO_ADDR
// InitHc ;
59650: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
59654: LD_INT 0
59656: PPUSH
59657: LD_VAR 0 2
59661: PPUSH
59662: LD_VAR 0 3
59666: PPUSH
59667: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
59671: LD_VAR 0 4
59675: PPUSH
59676: LD_VAR 0 5
59680: PPUSH
59681: CALL_OW 428
59685: PUSH
59686: LD_INT 0
59688: EQUAL
59689: IFFALSE 59713
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
59691: CALL_OW 44
59695: PPUSH
59696: LD_VAR 0 4
59700: PPUSH
59701: LD_VAR 0 5
59705: PPUSH
59706: LD_INT 1
59708: PPUSH
59709: CALL_OW 48
// end ;
59713: LD_VAR 0 6
59717: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
59718: LD_INT 0
59720: PPUSH
59721: PPUSH
// uc_side := your_side ;
59722: LD_ADDR_OWVAR 20
59726: PUSH
59727: LD_OWVAR 2
59731: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
59732: LD_VAR 0 1
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: LD_INT 2
59742: PUSH
59743: LD_INT 3
59745: PUSH
59746: LD_INT 4
59748: PUSH
59749: LD_INT 5
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: IN
59759: IFFALSE 59771
// uc_nation := nation_american else
59761: LD_ADDR_OWVAR 21
59765: PUSH
59766: LD_INT 1
59768: ST_TO_ADDR
59769: GO 59814
// if chassis in [ 11 , 12 , 13 , 14 ] then
59771: LD_VAR 0 1
59775: PUSH
59776: LD_INT 11
59778: PUSH
59779: LD_INT 12
59781: PUSH
59782: LD_INT 13
59784: PUSH
59785: LD_INT 14
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: IN
59794: IFFALSE 59806
// uc_nation := nation_arabian else
59796: LD_ADDR_OWVAR 21
59800: PUSH
59801: LD_INT 2
59803: ST_TO_ADDR
59804: GO 59814
// uc_nation := nation_russian ;
59806: LD_ADDR_OWVAR 21
59810: PUSH
59811: LD_INT 3
59813: ST_TO_ADDR
// vc_chassis := chassis ;
59814: LD_ADDR_OWVAR 37
59818: PUSH
59819: LD_VAR 0 1
59823: ST_TO_ADDR
// vc_engine := engine ;
59824: LD_ADDR_OWVAR 39
59828: PUSH
59829: LD_VAR 0 2
59833: ST_TO_ADDR
// vc_control := control ;
59834: LD_ADDR_OWVAR 38
59838: PUSH
59839: LD_VAR 0 3
59843: ST_TO_ADDR
// vc_weapon := weapon ;
59844: LD_ADDR_OWVAR 40
59848: PUSH
59849: LD_VAR 0 4
59853: ST_TO_ADDR
// un := CreateVehicle ;
59854: LD_ADDR_VAR 0 8
59858: PUSH
59859: CALL_OW 45
59863: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
59864: LD_VAR 0 8
59868: PPUSH
59869: LD_INT 0
59871: PPUSH
59872: LD_INT 5
59874: PPUSH
59875: CALL_OW 12
59879: PPUSH
59880: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
59884: LD_VAR 0 8
59888: PPUSH
59889: LD_VAR 0 5
59893: PPUSH
59894: LD_VAR 0 6
59898: PPUSH
59899: LD_INT 1
59901: PPUSH
59902: CALL_OW 48
// end ;
59906: LD_VAR 0 7
59910: RET
// export hInvincible ; every 1 do
59911: GO 59913
59913: DISABLE
// hInvincible := [ ] ;
59914: LD_ADDR_EXP 72
59918: PUSH
59919: EMPTY
59920: ST_TO_ADDR
59921: END
// every 10 do var i ;
59922: GO 59924
59924: DISABLE
59925: LD_INT 0
59927: PPUSH
// begin enable ;
59928: ENABLE
// if not hInvincible then
59929: LD_EXP 72
59933: NOT
59934: IFFALSE 59938
// exit ;
59936: GO 59982
// for i in hInvincible do
59938: LD_ADDR_VAR 0 1
59942: PUSH
59943: LD_EXP 72
59947: PUSH
59948: FOR_IN
59949: IFFALSE 59980
// if GetLives ( i ) < 1000 then
59951: LD_VAR 0 1
59955: PPUSH
59956: CALL_OW 256
59960: PUSH
59961: LD_INT 1000
59963: LESS
59964: IFFALSE 59978
// SetLives ( i , 1000 ) ;
59966: LD_VAR 0 1
59970: PPUSH
59971: LD_INT 1000
59973: PPUSH
59974: CALL_OW 234
59978: GO 59948
59980: POP
59981: POP
// end ;
59982: PPOPN 1
59984: END
// export function hHackInvincible ; var i ; begin
59985: LD_INT 0
59987: PPUSH
59988: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
59989: LD_ADDR_VAR 0 2
59993: PUSH
59994: LD_INT 2
59996: PUSH
59997: LD_INT 21
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 21
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: LIST
60021: PPUSH
60022: CALL_OW 69
60026: PUSH
60027: FOR_IN
60028: IFFALSE 60089
// if IsSelected ( i ) then
60030: LD_VAR 0 2
60034: PPUSH
60035: CALL_OW 306
60039: IFFALSE 60087
// begin if i in hInvincible then
60041: LD_VAR 0 2
60045: PUSH
60046: LD_EXP 72
60050: IN
60051: IFFALSE 60071
// hInvincible := hInvincible diff i else
60053: LD_ADDR_EXP 72
60057: PUSH
60058: LD_EXP 72
60062: PUSH
60063: LD_VAR 0 2
60067: DIFF
60068: ST_TO_ADDR
60069: GO 60087
// hInvincible := hInvincible union i ;
60071: LD_ADDR_EXP 72
60075: PUSH
60076: LD_EXP 72
60080: PUSH
60081: LD_VAR 0 2
60085: UNION
60086: ST_TO_ADDR
// end ;
60087: GO 60027
60089: POP
60090: POP
// end ;
60091: LD_VAR 0 1
60095: RET
// export function hHackInvisible ; var i , j ; begin
60096: LD_INT 0
60098: PPUSH
60099: PPUSH
60100: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
60101: LD_ADDR_VAR 0 2
60105: PUSH
60106: LD_INT 21
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PPUSH
60116: CALL_OW 69
60120: PUSH
60121: FOR_IN
60122: IFFALSE 60146
// if IsSelected ( i ) then
60124: LD_VAR 0 2
60128: PPUSH
60129: CALL_OW 306
60133: IFFALSE 60144
// ComForceInvisible ( i ) ;
60135: LD_VAR 0 2
60139: PPUSH
60140: CALL_OW 496
60144: GO 60121
60146: POP
60147: POP
// end ;
60148: LD_VAR 0 1
60152: RET
// export function hHackChangeYourSide ; begin
60153: LD_INT 0
60155: PPUSH
// if your_side = 8 then
60156: LD_OWVAR 2
60160: PUSH
60161: LD_INT 8
60163: EQUAL
60164: IFFALSE 60176
// your_side := 0 else
60166: LD_ADDR_OWVAR 2
60170: PUSH
60171: LD_INT 0
60173: ST_TO_ADDR
60174: GO 60190
// your_side := your_side + 1 ;
60176: LD_ADDR_OWVAR 2
60180: PUSH
60181: LD_OWVAR 2
60185: PUSH
60186: LD_INT 1
60188: PLUS
60189: ST_TO_ADDR
// end ;
60190: LD_VAR 0 1
60194: RET
// export function hHackChangeUnitSide ; var i , j ; begin
60195: LD_INT 0
60197: PPUSH
60198: PPUSH
60199: PPUSH
// for i in all_units do
60200: LD_ADDR_VAR 0 2
60204: PUSH
60205: LD_OWVAR 3
60209: PUSH
60210: FOR_IN
60211: IFFALSE 60289
// if IsSelected ( i ) then
60213: LD_VAR 0 2
60217: PPUSH
60218: CALL_OW 306
60222: IFFALSE 60287
// begin j := GetSide ( i ) ;
60224: LD_ADDR_VAR 0 3
60228: PUSH
60229: LD_VAR 0 2
60233: PPUSH
60234: CALL_OW 255
60238: ST_TO_ADDR
// if j = 8 then
60239: LD_VAR 0 3
60243: PUSH
60244: LD_INT 8
60246: EQUAL
60247: IFFALSE 60259
// j := 0 else
60249: LD_ADDR_VAR 0 3
60253: PUSH
60254: LD_INT 0
60256: ST_TO_ADDR
60257: GO 60273
// j := j + 1 ;
60259: LD_ADDR_VAR 0 3
60263: PUSH
60264: LD_VAR 0 3
60268: PUSH
60269: LD_INT 1
60271: PLUS
60272: ST_TO_ADDR
// SetSide ( i , j ) ;
60273: LD_VAR 0 2
60277: PPUSH
60278: LD_VAR 0 3
60282: PPUSH
60283: CALL_OW 235
// end ;
60287: GO 60210
60289: POP
60290: POP
// end ;
60291: LD_VAR 0 1
60295: RET
// export function hHackFog ; begin
60296: LD_INT 0
60298: PPUSH
// FogOff ( true ) ;
60299: LD_INT 1
60301: PPUSH
60302: CALL_OW 344
// end ;
60306: LD_VAR 0 1
60310: RET
// export function hHackTeleport ( unit , x , y ) ; begin
60311: LD_INT 0
60313: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
60314: LD_VAR 0 1
60318: PPUSH
60319: LD_VAR 0 2
60323: PPUSH
60324: LD_VAR 0 3
60328: PPUSH
60329: LD_INT 1
60331: PPUSH
60332: LD_INT 1
60334: PPUSH
60335: CALL_OW 483
// CenterOnXY ( x , y ) ;
60339: LD_VAR 0 2
60343: PPUSH
60344: LD_VAR 0 3
60348: PPUSH
60349: CALL_OW 84
// end ;
60353: LD_VAR 0 4
60357: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
60358: LD_INT 0
60360: PPUSH
60361: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
60362: LD_VAR 0 1
60366: NOT
60367: PUSH
60368: LD_VAR 0 2
60372: PPUSH
60373: LD_VAR 0 3
60377: PPUSH
60378: CALL_OW 488
60382: NOT
60383: OR
60384: PUSH
60385: LD_VAR 0 1
60389: PPUSH
60390: CALL_OW 266
60394: PUSH
60395: LD_INT 3
60397: NONEQUAL
60398: PUSH
60399: LD_VAR 0 1
60403: PPUSH
60404: CALL_OW 247
60408: PUSH
60409: LD_INT 1
60411: EQUAL
60412: NOT
60413: AND
60414: OR
60415: IFFALSE 60419
// exit ;
60417: GO 60568
// if GetType ( factory ) = unit_human then
60419: LD_VAR 0 1
60423: PPUSH
60424: CALL_OW 247
60428: PUSH
60429: LD_INT 1
60431: EQUAL
60432: IFFALSE 60449
// factory := IsInUnit ( factory ) ;
60434: LD_ADDR_VAR 0 1
60438: PUSH
60439: LD_VAR 0 1
60443: PPUSH
60444: CALL_OW 310
60448: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60449: LD_VAR 0 1
60453: PPUSH
60454: CALL_OW 266
60458: PUSH
60459: LD_INT 3
60461: NONEQUAL
60462: IFFALSE 60466
// exit ;
60464: GO 60568
// if HexInfo ( x , y ) = factory then
60466: LD_VAR 0 2
60470: PPUSH
60471: LD_VAR 0 3
60475: PPUSH
60476: CALL_OW 428
60480: PUSH
60481: LD_VAR 0 1
60485: EQUAL
60486: IFFALSE 60513
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
60488: LD_ADDR_EXP 73
60492: PUSH
60493: LD_EXP 73
60497: PPUSH
60498: LD_VAR 0 1
60502: PPUSH
60503: LD_INT 0
60505: PPUSH
60506: CALL_OW 1
60510: ST_TO_ADDR
60511: GO 60564
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
60513: LD_ADDR_EXP 73
60517: PUSH
60518: LD_EXP 73
60522: PPUSH
60523: LD_VAR 0 1
60527: PPUSH
60528: LD_VAR 0 1
60532: PPUSH
60533: CALL_OW 255
60537: PUSH
60538: LD_VAR 0 1
60542: PUSH
60543: LD_VAR 0 2
60547: PUSH
60548: LD_VAR 0 3
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: PPUSH
60559: CALL_OW 1
60563: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60564: CALL 60573 0 0
// end ;
60568: LD_VAR 0 4
60572: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
60573: LD_INT 0
60575: PPUSH
60576: PPUSH
60577: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60578: LD_STRING resetFactoryWaypoint();
60580: PPUSH
60581: CALL_OW 559
// if factoryWaypoints then
60585: LD_EXP 73
60589: IFFALSE 60715
// begin list := PrepareArray ( factoryWaypoints ) ;
60591: LD_ADDR_VAR 0 3
60595: PUSH
60596: LD_EXP 73
60600: PPUSH
60601: CALL 42600 0 1
60605: ST_TO_ADDR
// for i := 1 to list do
60606: LD_ADDR_VAR 0 2
60610: PUSH
60611: DOUBLE
60612: LD_INT 1
60614: DEC
60615: ST_TO_ADDR
60616: LD_VAR 0 3
60620: PUSH
60621: FOR_TO
60622: IFFALSE 60713
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60624: LD_STRING setFactoryWaypointXY(
60626: PUSH
60627: LD_VAR 0 3
60631: PUSH
60632: LD_VAR 0 2
60636: ARRAY
60637: PUSH
60638: LD_INT 1
60640: ARRAY
60641: STR
60642: PUSH
60643: LD_STRING ,
60645: STR
60646: PUSH
60647: LD_VAR 0 3
60651: PUSH
60652: LD_VAR 0 2
60656: ARRAY
60657: PUSH
60658: LD_INT 2
60660: ARRAY
60661: STR
60662: PUSH
60663: LD_STRING ,
60665: STR
60666: PUSH
60667: LD_VAR 0 3
60671: PUSH
60672: LD_VAR 0 2
60676: ARRAY
60677: PUSH
60678: LD_INT 3
60680: ARRAY
60681: STR
60682: PUSH
60683: LD_STRING ,
60685: STR
60686: PUSH
60687: LD_VAR 0 3
60691: PUSH
60692: LD_VAR 0 2
60696: ARRAY
60697: PUSH
60698: LD_INT 4
60700: ARRAY
60701: STR
60702: PUSH
60703: LD_STRING )
60705: STR
60706: PPUSH
60707: CALL_OW 559
60711: GO 60621
60713: POP
60714: POP
// end ; end ;
60715: LD_VAR 0 1
60719: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
60720: LD_INT 0
60722: PPUSH
// if HexInfo ( x , y ) = warehouse then
60723: LD_VAR 0 2
60727: PPUSH
60728: LD_VAR 0 3
60732: PPUSH
60733: CALL_OW 428
60737: PUSH
60738: LD_VAR 0 1
60742: EQUAL
60743: IFFALSE 60770
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60745: LD_ADDR_EXP 74
60749: PUSH
60750: LD_EXP 74
60754: PPUSH
60755: LD_VAR 0 1
60759: PPUSH
60760: LD_INT 0
60762: PPUSH
60763: CALL_OW 1
60767: ST_TO_ADDR
60768: GO 60821
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60770: LD_ADDR_EXP 74
60774: PUSH
60775: LD_EXP 74
60779: PPUSH
60780: LD_VAR 0 1
60784: PPUSH
60785: LD_VAR 0 1
60789: PPUSH
60790: CALL_OW 255
60794: PUSH
60795: LD_VAR 0 1
60799: PUSH
60800: LD_VAR 0 2
60804: PUSH
60805: LD_VAR 0 3
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: PPUSH
60816: CALL_OW 1
60820: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60821: CALL 60830 0 0
// end ;
60825: LD_VAR 0 4
60829: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60830: LD_INT 0
60832: PPUSH
60833: PPUSH
60834: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60835: LD_STRING resetWarehouseGatheringPoints();
60837: PPUSH
60838: CALL_OW 559
// if warehouseGatheringPoints then
60842: LD_EXP 74
60846: IFFALSE 60972
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60848: LD_ADDR_VAR 0 3
60852: PUSH
60853: LD_EXP 74
60857: PPUSH
60858: CALL 42600 0 1
60862: ST_TO_ADDR
// for i := 1 to list do
60863: LD_ADDR_VAR 0 2
60867: PUSH
60868: DOUBLE
60869: LD_INT 1
60871: DEC
60872: ST_TO_ADDR
60873: LD_VAR 0 3
60877: PUSH
60878: FOR_TO
60879: IFFALSE 60970
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60881: LD_STRING setWarehouseGatheringPointXY(
60883: PUSH
60884: LD_VAR 0 3
60888: PUSH
60889: LD_VAR 0 2
60893: ARRAY
60894: PUSH
60895: LD_INT 1
60897: ARRAY
60898: STR
60899: PUSH
60900: LD_STRING ,
60902: STR
60903: PUSH
60904: LD_VAR 0 3
60908: PUSH
60909: LD_VAR 0 2
60913: ARRAY
60914: PUSH
60915: LD_INT 2
60917: ARRAY
60918: STR
60919: PUSH
60920: LD_STRING ,
60922: STR
60923: PUSH
60924: LD_VAR 0 3
60928: PUSH
60929: LD_VAR 0 2
60933: ARRAY
60934: PUSH
60935: LD_INT 3
60937: ARRAY
60938: STR
60939: PUSH
60940: LD_STRING ,
60942: STR
60943: PUSH
60944: LD_VAR 0 3
60948: PUSH
60949: LD_VAR 0 2
60953: ARRAY
60954: PUSH
60955: LD_INT 4
60957: ARRAY
60958: STR
60959: PUSH
60960: LD_STRING )
60962: STR
60963: PPUSH
60964: CALL_OW 559
60968: GO 60878
60970: POP
60971: POP
// end ; end ;
60972: LD_VAR 0 1
60976: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
60977: LD_EXP 74
60981: IFFALSE 61666
60983: GO 60985
60985: DISABLE
60986: LD_INT 0
60988: PPUSH
60989: PPUSH
60990: PPUSH
60991: PPUSH
60992: PPUSH
60993: PPUSH
60994: PPUSH
60995: PPUSH
60996: PPUSH
// begin enable ;
60997: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
60998: LD_ADDR_VAR 0 3
61002: PUSH
61003: LD_EXP 74
61007: PPUSH
61008: CALL 42600 0 1
61012: ST_TO_ADDR
// if not list then
61013: LD_VAR 0 3
61017: NOT
61018: IFFALSE 61022
// exit ;
61020: GO 61666
// for i := 1 to list do
61022: LD_ADDR_VAR 0 1
61026: PUSH
61027: DOUBLE
61028: LD_INT 1
61030: DEC
61031: ST_TO_ADDR
61032: LD_VAR 0 3
61036: PUSH
61037: FOR_TO
61038: IFFALSE 61664
// begin depot := list [ i ] [ 2 ] ;
61040: LD_ADDR_VAR 0 8
61044: PUSH
61045: LD_VAR 0 3
61049: PUSH
61050: LD_VAR 0 1
61054: ARRAY
61055: PUSH
61056: LD_INT 2
61058: ARRAY
61059: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
61060: LD_ADDR_VAR 0 5
61064: PUSH
61065: LD_VAR 0 3
61069: PUSH
61070: LD_VAR 0 1
61074: ARRAY
61075: PUSH
61076: LD_INT 1
61078: ARRAY
61079: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
61080: LD_VAR 0 8
61084: PPUSH
61085: CALL_OW 301
61089: PUSH
61090: LD_VAR 0 5
61094: PUSH
61095: LD_VAR 0 8
61099: PPUSH
61100: CALL_OW 255
61104: NONEQUAL
61105: OR
61106: IFFALSE 61135
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
61108: LD_ADDR_EXP 74
61112: PUSH
61113: LD_EXP 74
61117: PPUSH
61118: LD_VAR 0 8
61122: PPUSH
61123: LD_INT 0
61125: PPUSH
61126: CALL_OW 1
61130: ST_TO_ADDR
// exit ;
61131: POP
61132: POP
61133: GO 61666
// end ; x := list [ i ] [ 3 ] ;
61135: LD_ADDR_VAR 0 6
61139: PUSH
61140: LD_VAR 0 3
61144: PUSH
61145: LD_VAR 0 1
61149: ARRAY
61150: PUSH
61151: LD_INT 3
61153: ARRAY
61154: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
61155: LD_ADDR_VAR 0 7
61159: PUSH
61160: LD_VAR 0 3
61164: PUSH
61165: LD_VAR 0 1
61169: ARRAY
61170: PUSH
61171: LD_INT 4
61173: ARRAY
61174: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
61175: LD_ADDR_VAR 0 9
61179: PUSH
61180: LD_VAR 0 6
61184: PPUSH
61185: LD_VAR 0 7
61189: PPUSH
61190: LD_INT 16
61192: PPUSH
61193: CALL 41188 0 3
61197: ST_TO_ADDR
// if not cratesNearbyPoint then
61198: LD_VAR 0 9
61202: NOT
61203: IFFALSE 61209
// exit ;
61205: POP
61206: POP
61207: GO 61666
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
61209: LD_ADDR_VAR 0 4
61213: PUSH
61214: LD_INT 22
61216: PUSH
61217: LD_VAR 0 5
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 3
61228: PUSH
61229: LD_INT 60
61231: PUSH
61232: EMPTY
61233: LIST
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 91
61241: PUSH
61242: LD_VAR 0 8
61246: PUSH
61247: LD_INT 6
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 2
61257: PUSH
61258: LD_INT 25
61260: PUSH
61261: LD_INT 2
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 25
61270: PUSH
61271: LD_INT 16
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: LIST
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: PPUSH
61289: CALL_OW 69
61293: PUSH
61294: LD_VAR 0 8
61298: PPUSH
61299: CALL_OW 313
61303: PPUSH
61304: LD_INT 3
61306: PUSH
61307: LD_INT 60
61309: PUSH
61310: EMPTY
61311: LIST
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 2
61319: PUSH
61320: LD_INT 25
61322: PUSH
61323: LD_INT 2
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 25
61332: PUSH
61333: LD_INT 16
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: LIST
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PPUSH
61349: CALL_OW 72
61353: UNION
61354: ST_TO_ADDR
// if tmp then
61355: LD_VAR 0 4
61359: IFFALSE 61439
// begin tmp := ShrinkArray ( tmp , 3 ) ;
61361: LD_ADDR_VAR 0 4
61365: PUSH
61366: LD_VAR 0 4
61370: PPUSH
61371: LD_INT 3
61373: PPUSH
61374: CALL 39157 0 2
61378: ST_TO_ADDR
// for j in tmp do
61379: LD_ADDR_VAR 0 2
61383: PUSH
61384: LD_VAR 0 4
61388: PUSH
61389: FOR_IN
61390: IFFALSE 61433
// begin if IsInUnit ( j ) then
61392: LD_VAR 0 2
61396: PPUSH
61397: CALL_OW 310
61401: IFFALSE 61412
// ComExit ( j ) ;
61403: LD_VAR 0 2
61407: PPUSH
61408: CALL 39240 0 1
// AddComCollect ( j , x , y ) ;
61412: LD_VAR 0 2
61416: PPUSH
61417: LD_VAR 0 6
61421: PPUSH
61422: LD_VAR 0 7
61426: PPUSH
61427: CALL_OW 177
// end ;
61431: GO 61389
61433: POP
61434: POP
// exit ;
61435: POP
61436: POP
61437: GO 61666
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
61439: LD_ADDR_VAR 0 4
61443: PUSH
61444: LD_INT 22
61446: PUSH
61447: LD_VAR 0 5
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 91
61458: PUSH
61459: LD_VAR 0 8
61463: PUSH
61464: LD_INT 8
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 2
61474: PUSH
61475: LD_INT 34
61477: PUSH
61478: LD_INT 12
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 34
61487: PUSH
61488: LD_INT 51
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 34
61497: PUSH
61498: LD_INT 32
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 34
61507: PUSH
61508: LD_INT 89
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: LIST
61526: PPUSH
61527: CALL_OW 69
61531: ST_TO_ADDR
// if tmp then
61532: LD_VAR 0 4
61536: IFFALSE 61662
// begin for j in tmp do
61538: LD_ADDR_VAR 0 2
61542: PUSH
61543: LD_VAR 0 4
61547: PUSH
61548: FOR_IN
61549: IFFALSE 61660
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
61551: LD_VAR 0 2
61555: PPUSH
61556: CALL_OW 262
61560: PUSH
61561: LD_INT 3
61563: EQUAL
61564: PUSH
61565: LD_VAR 0 2
61569: PPUSH
61570: CALL_OW 261
61574: PUSH
61575: LD_INT 20
61577: GREATER
61578: OR
61579: PUSH
61580: LD_VAR 0 2
61584: PPUSH
61585: CALL_OW 314
61589: NOT
61590: AND
61591: PUSH
61592: LD_VAR 0 2
61596: PPUSH
61597: CALL_OW 263
61601: PUSH
61602: LD_INT 1
61604: NONEQUAL
61605: PUSH
61606: LD_VAR 0 2
61610: PPUSH
61611: CALL_OW 311
61615: OR
61616: AND
61617: IFFALSE 61658
// begin ComCollect ( j , x , y ) ;
61619: LD_VAR 0 2
61623: PPUSH
61624: LD_VAR 0 6
61628: PPUSH
61629: LD_VAR 0 7
61633: PPUSH
61634: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
61638: LD_VAR 0 2
61642: PPUSH
61643: LD_VAR 0 8
61647: PPUSH
61648: CALL_OW 172
// exit ;
61652: POP
61653: POP
61654: POP
61655: POP
61656: GO 61666
// end ;
61658: GO 61548
61660: POP
61661: POP
// end ; end ;
61662: GO 61037
61664: POP
61665: POP
// end ; end_of_file end_of_file
61666: PPOPN 9
61668: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
61669: LD_INT 0
61671: PPUSH
61672: PPUSH
61673: PPUSH
61674: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
61675: LD_VAR 0 1
61679: PPUSH
61680: CALL_OW 264
61684: PUSH
61685: LD_INT 91
61687: EQUAL
61688: IFFALSE 61760
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
61690: LD_INT 68
61692: PPUSH
61693: LD_VAR 0 1
61697: PPUSH
61698: CALL_OW 255
61702: PPUSH
61703: CALL_OW 321
61707: PUSH
61708: LD_INT 2
61710: EQUAL
61711: IFFALSE 61723
// eff := 70 else
61713: LD_ADDR_VAR 0 4
61717: PUSH
61718: LD_INT 70
61720: ST_TO_ADDR
61721: GO 61731
// eff := 30 ;
61723: LD_ADDR_VAR 0 4
61727: PUSH
61728: LD_INT 30
61730: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
61731: LD_VAR 0 1
61735: PPUSH
61736: CALL_OW 250
61740: PPUSH
61741: LD_VAR 0 1
61745: PPUSH
61746: CALL_OW 251
61750: PPUSH
61751: LD_VAR 0 4
61755: PPUSH
61756: CALL_OW 495
// end ; end ;
61760: LD_VAR 0 2
61764: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
61765: LD_INT 0
61767: PPUSH
// end ;
61768: LD_VAR 0 4
61772: RET
// export function SOS_Command ( cmd ) ; begin
61773: LD_INT 0
61775: PPUSH
// end ;
61776: LD_VAR 0 2
61780: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
61781: LD_INT 0
61783: PPUSH
// end ;
61784: LD_VAR 0 6
61788: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
61789: LD_INT 0
61791: PPUSH
61792: PPUSH
// if not vehicle or not factory then
61793: LD_VAR 0 1
61797: NOT
61798: PUSH
61799: LD_VAR 0 2
61803: NOT
61804: OR
61805: IFFALSE 61809
// exit ;
61807: GO 62040
// if factoryWaypoints >= factory then
61809: LD_EXP 73
61813: PUSH
61814: LD_VAR 0 2
61818: GREATEREQUAL
61819: IFFALSE 62040
// if factoryWaypoints [ factory ] then
61821: LD_EXP 73
61825: PUSH
61826: LD_VAR 0 2
61830: ARRAY
61831: IFFALSE 62040
// begin if GetControl ( vehicle ) = control_manual then
61833: LD_VAR 0 1
61837: PPUSH
61838: CALL_OW 263
61842: PUSH
61843: LD_INT 1
61845: EQUAL
61846: IFFALSE 61927
// begin driver := IsDrivenBy ( vehicle ) ;
61848: LD_ADDR_VAR 0 4
61852: PUSH
61853: LD_VAR 0 1
61857: PPUSH
61858: CALL_OW 311
61862: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61863: LD_VAR 0 4
61867: PPUSH
61868: LD_EXP 73
61872: PUSH
61873: LD_VAR 0 2
61877: ARRAY
61878: PUSH
61879: LD_INT 3
61881: ARRAY
61882: PPUSH
61883: LD_EXP 73
61887: PUSH
61888: LD_VAR 0 2
61892: ARRAY
61893: PUSH
61894: LD_INT 4
61896: ARRAY
61897: PPUSH
61898: CALL_OW 171
// AddComExitVehicle ( driver ) ;
61902: LD_VAR 0 4
61906: PPUSH
61907: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
61911: LD_VAR 0 4
61915: PPUSH
61916: LD_VAR 0 2
61920: PPUSH
61921: CALL_OW 180
// end else
61925: GO 62040
// if GetControl ( vehicle ) = control_remote then
61927: LD_VAR 0 1
61931: PPUSH
61932: CALL_OW 263
61936: PUSH
61937: LD_INT 2
61939: EQUAL
61940: IFFALSE 62001
// begin wait ( 0 0$2 ) ;
61942: LD_INT 70
61944: PPUSH
61945: CALL_OW 67
// if Connect ( vehicle ) then
61949: LD_VAR 0 1
61953: PPUSH
61954: CALL 9448 0 1
61958: IFFALSE 61999
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
61960: LD_VAR 0 1
61964: PPUSH
61965: LD_EXP 73
61969: PUSH
61970: LD_VAR 0 2
61974: ARRAY
61975: PUSH
61976: LD_INT 3
61978: ARRAY
61979: PPUSH
61980: LD_EXP 73
61984: PUSH
61985: LD_VAR 0 2
61989: ARRAY
61990: PUSH
61991: LD_INT 4
61993: ARRAY
61994: PPUSH
61995: CALL_OW 171
// end else
61999: GO 62040
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62001: LD_VAR 0 1
62005: PPUSH
62006: LD_EXP 73
62010: PUSH
62011: LD_VAR 0 2
62015: ARRAY
62016: PUSH
62017: LD_INT 3
62019: ARRAY
62020: PPUSH
62021: LD_EXP 73
62025: PUSH
62026: LD_VAR 0 2
62030: ARRAY
62031: PUSH
62032: LD_INT 4
62034: ARRAY
62035: PPUSH
62036: CALL_OW 171
// end ; end ;
62040: LD_VAR 0 3
62044: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
62045: LD_INT 0
62047: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
62048: LD_VAR 0 1
62052: PUSH
62053: LD_INT 250
62055: EQUAL
62056: PUSH
62057: LD_VAR 0 2
62061: PPUSH
62062: CALL_OW 264
62066: PUSH
62067: LD_INT 81
62069: EQUAL
62070: AND
62071: IFFALSE 62092
// MinerPlaceMine ( unit , x , y ) ;
62073: LD_VAR 0 2
62077: PPUSH
62078: LD_VAR 0 4
62082: PPUSH
62083: LD_VAR 0 5
62087: PPUSH
62088: CALL 64916 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
62092: LD_VAR 0 1
62096: PUSH
62097: LD_INT 251
62099: EQUAL
62100: PUSH
62101: LD_VAR 0 2
62105: PPUSH
62106: CALL_OW 264
62110: PUSH
62111: LD_INT 81
62113: EQUAL
62114: AND
62115: IFFALSE 62136
// MinerDetonateMine ( unit , x , y ) ;
62117: LD_VAR 0 2
62121: PPUSH
62122: LD_VAR 0 4
62126: PPUSH
62127: LD_VAR 0 5
62131: PPUSH
62132: CALL 65191 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
62136: LD_VAR 0 1
62140: PUSH
62141: LD_INT 252
62143: EQUAL
62144: PUSH
62145: LD_VAR 0 2
62149: PPUSH
62150: CALL_OW 264
62154: PUSH
62155: LD_INT 81
62157: EQUAL
62158: AND
62159: IFFALSE 62180
// MinerCreateMinefield ( unit , x , y ) ;
62161: LD_VAR 0 2
62165: PPUSH
62166: LD_VAR 0 4
62170: PPUSH
62171: LD_VAR 0 5
62175: PPUSH
62176: CALL 65608 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
62180: LD_VAR 0 1
62184: PUSH
62185: LD_INT 253
62187: EQUAL
62188: PUSH
62189: LD_VAR 0 2
62193: PPUSH
62194: CALL_OW 257
62198: PUSH
62199: LD_INT 5
62201: EQUAL
62202: AND
62203: IFFALSE 62224
// ComBinocular ( unit , x , y ) ;
62205: LD_VAR 0 2
62209: PPUSH
62210: LD_VAR 0 4
62214: PPUSH
62215: LD_VAR 0 5
62219: PPUSH
62220: CALL 65977 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
62224: LD_VAR 0 1
62228: PUSH
62229: LD_INT 254
62231: EQUAL
62232: PUSH
62233: LD_VAR 0 2
62237: PPUSH
62238: CALL_OW 264
62242: PUSH
62243: LD_INT 99
62245: EQUAL
62246: AND
62247: PUSH
62248: LD_VAR 0 3
62252: PPUSH
62253: CALL_OW 263
62257: PUSH
62258: LD_INT 3
62260: EQUAL
62261: AND
62262: IFFALSE 62278
// HackDestroyVehicle ( unit , selectedUnit ) ;
62264: LD_VAR 0 2
62268: PPUSH
62269: LD_VAR 0 3
62273: PPUSH
62274: CALL 64280 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
62278: LD_VAR 0 1
62282: PUSH
62283: LD_INT 255
62285: EQUAL
62286: PUSH
62287: LD_VAR 0 2
62291: PPUSH
62292: CALL_OW 264
62296: PUSH
62297: LD_INT 14
62299: PUSH
62300: LD_INT 53
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: IN
62307: AND
62308: PUSH
62309: LD_VAR 0 4
62313: PPUSH
62314: LD_VAR 0 5
62318: PPUSH
62319: CALL_OW 488
62323: AND
62324: IFFALSE 62348
// CutTreeXYR ( unit , x , y , 12 ) ;
62326: LD_VAR 0 2
62330: PPUSH
62331: LD_VAR 0 4
62335: PPUSH
62336: LD_VAR 0 5
62340: PPUSH
62341: LD_INT 12
62343: PPUSH
62344: CALL 62443 0 4
// if cmd = 256 then
62348: LD_VAR 0 1
62352: PUSH
62353: LD_INT 256
62355: EQUAL
62356: IFFALSE 62377
// SetFactoryWaypoint ( unit , x , y ) ;
62358: LD_VAR 0 2
62362: PPUSH
62363: LD_VAR 0 4
62367: PPUSH
62368: LD_VAR 0 5
62372: PPUSH
62373: CALL 60358 0 3
// if cmd = 257 then
62377: LD_VAR 0 1
62381: PUSH
62382: LD_INT 257
62384: EQUAL
62385: IFFALSE 62406
// SetWarehouseGatheringPoint ( unit , x , y ) ;
62387: LD_VAR 0 2
62391: PPUSH
62392: LD_VAR 0 4
62396: PPUSH
62397: LD_VAR 0 5
62401: PPUSH
62402: CALL 60720 0 3
// if cmd = 258 then
62406: LD_VAR 0 1
62410: PUSH
62411: LD_INT 258
62413: EQUAL
62414: IFFALSE 62438
// BurnTreeXYR ( unit , x , y , 8 ) ;
62416: LD_VAR 0 2
62420: PPUSH
62421: LD_VAR 0 4
62425: PPUSH
62426: LD_VAR 0 5
62430: PPUSH
62431: LD_INT 8
62433: PPUSH
62434: CALL 62837 0 4
// end ;
62438: LD_VAR 0 6
62442: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
62443: LD_INT 0
62445: PPUSH
62446: PPUSH
62447: PPUSH
62448: PPUSH
62449: PPUSH
62450: PPUSH
62451: PPUSH
62452: PPUSH
62453: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
62454: LD_VAR 0 1
62458: PPUSH
62459: CALL_OW 302
62463: NOT
62464: PUSH
62465: LD_VAR 0 2
62469: PPUSH
62470: LD_VAR 0 3
62474: PPUSH
62475: CALL_OW 488
62479: NOT
62480: OR
62481: PUSH
62482: LD_VAR 0 4
62486: NOT
62487: OR
62488: IFFALSE 62492
// exit ;
62490: GO 62832
// list := [ ] ;
62492: LD_ADDR_VAR 0 13
62496: PUSH
62497: EMPTY
62498: ST_TO_ADDR
// if x - r < 0 then
62499: LD_VAR 0 2
62503: PUSH
62504: LD_VAR 0 4
62508: MINUS
62509: PUSH
62510: LD_INT 0
62512: LESS
62513: IFFALSE 62525
// min_x := 0 else
62515: LD_ADDR_VAR 0 7
62519: PUSH
62520: LD_INT 0
62522: ST_TO_ADDR
62523: GO 62541
// min_x := x - r ;
62525: LD_ADDR_VAR 0 7
62529: PUSH
62530: LD_VAR 0 2
62534: PUSH
62535: LD_VAR 0 4
62539: MINUS
62540: ST_TO_ADDR
// if y - r < 0 then
62541: LD_VAR 0 3
62545: PUSH
62546: LD_VAR 0 4
62550: MINUS
62551: PUSH
62552: LD_INT 0
62554: LESS
62555: IFFALSE 62567
// min_y := 0 else
62557: LD_ADDR_VAR 0 8
62561: PUSH
62562: LD_INT 0
62564: ST_TO_ADDR
62565: GO 62583
// min_y := y - r ;
62567: LD_ADDR_VAR 0 8
62571: PUSH
62572: LD_VAR 0 3
62576: PUSH
62577: LD_VAR 0 4
62581: MINUS
62582: ST_TO_ADDR
// max_x := x + r ;
62583: LD_ADDR_VAR 0 9
62587: PUSH
62588: LD_VAR 0 2
62592: PUSH
62593: LD_VAR 0 4
62597: PLUS
62598: ST_TO_ADDR
// max_y := y + r ;
62599: LD_ADDR_VAR 0 10
62603: PUSH
62604: LD_VAR 0 3
62608: PUSH
62609: LD_VAR 0 4
62613: PLUS
62614: ST_TO_ADDR
// for _x = min_x to max_x do
62615: LD_ADDR_VAR 0 11
62619: PUSH
62620: DOUBLE
62621: LD_VAR 0 7
62625: DEC
62626: ST_TO_ADDR
62627: LD_VAR 0 9
62631: PUSH
62632: FOR_TO
62633: IFFALSE 62750
// for _y = min_y to max_y do
62635: LD_ADDR_VAR 0 12
62639: PUSH
62640: DOUBLE
62641: LD_VAR 0 8
62645: DEC
62646: ST_TO_ADDR
62647: LD_VAR 0 10
62651: PUSH
62652: FOR_TO
62653: IFFALSE 62746
// begin if not ValidHex ( _x , _y ) then
62655: LD_VAR 0 11
62659: PPUSH
62660: LD_VAR 0 12
62664: PPUSH
62665: CALL_OW 488
62669: NOT
62670: IFFALSE 62674
// continue ;
62672: GO 62652
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
62674: LD_VAR 0 11
62678: PPUSH
62679: LD_VAR 0 12
62683: PPUSH
62684: CALL_OW 351
62688: PUSH
62689: LD_VAR 0 11
62693: PPUSH
62694: LD_VAR 0 12
62698: PPUSH
62699: CALL_OW 554
62703: AND
62704: IFFALSE 62744
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62706: LD_ADDR_VAR 0 13
62710: PUSH
62711: LD_VAR 0 13
62715: PPUSH
62716: LD_VAR 0 13
62720: PUSH
62721: LD_INT 1
62723: PLUS
62724: PPUSH
62725: LD_VAR 0 11
62729: PUSH
62730: LD_VAR 0 12
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PPUSH
62739: CALL_OW 2
62743: ST_TO_ADDR
// end ;
62744: GO 62652
62746: POP
62747: POP
62748: GO 62632
62750: POP
62751: POP
// if not list then
62752: LD_VAR 0 13
62756: NOT
62757: IFFALSE 62761
// exit ;
62759: GO 62832
// for i in list do
62761: LD_ADDR_VAR 0 6
62765: PUSH
62766: LD_VAR 0 13
62770: PUSH
62771: FOR_IN
62772: IFFALSE 62830
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
62774: LD_VAR 0 1
62778: PPUSH
62779: LD_STRING M
62781: PUSH
62782: LD_VAR 0 6
62786: PUSH
62787: LD_INT 1
62789: ARRAY
62790: PUSH
62791: LD_VAR 0 6
62795: PUSH
62796: LD_INT 2
62798: ARRAY
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: LD_INT 0
62808: PUSH
62809: LD_INT 0
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: PUSH
62821: EMPTY
62822: LIST
62823: PPUSH
62824: CALL_OW 447
62828: GO 62771
62830: POP
62831: POP
// end ;
62832: LD_VAR 0 5
62836: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
62837: LD_INT 0
62839: PPUSH
62840: PPUSH
62841: PPUSH
62842: PPUSH
62843: PPUSH
62844: PPUSH
62845: PPUSH
62846: PPUSH
62847: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
62848: LD_VAR 0 1
62852: PPUSH
62853: CALL_OW 302
62857: NOT
62858: PUSH
62859: LD_VAR 0 2
62863: PPUSH
62864: LD_VAR 0 3
62868: PPUSH
62869: CALL_OW 488
62873: NOT
62874: OR
62875: PUSH
62876: LD_VAR 0 4
62880: NOT
62881: OR
62882: IFFALSE 62886
// exit ;
62884: GO 63234
// list := [ ] ;
62886: LD_ADDR_VAR 0 13
62890: PUSH
62891: EMPTY
62892: ST_TO_ADDR
// if x - r < 0 then
62893: LD_VAR 0 2
62897: PUSH
62898: LD_VAR 0 4
62902: MINUS
62903: PUSH
62904: LD_INT 0
62906: LESS
62907: IFFALSE 62919
// min_x := 0 else
62909: LD_ADDR_VAR 0 7
62913: PUSH
62914: LD_INT 0
62916: ST_TO_ADDR
62917: GO 62935
// min_x := x - r ;
62919: LD_ADDR_VAR 0 7
62923: PUSH
62924: LD_VAR 0 2
62928: PUSH
62929: LD_VAR 0 4
62933: MINUS
62934: ST_TO_ADDR
// if y - r < 0 then
62935: LD_VAR 0 3
62939: PUSH
62940: LD_VAR 0 4
62944: MINUS
62945: PUSH
62946: LD_INT 0
62948: LESS
62949: IFFALSE 62961
// min_y := 0 else
62951: LD_ADDR_VAR 0 8
62955: PUSH
62956: LD_INT 0
62958: ST_TO_ADDR
62959: GO 62977
// min_y := y - r ;
62961: LD_ADDR_VAR 0 8
62965: PUSH
62966: LD_VAR 0 3
62970: PUSH
62971: LD_VAR 0 4
62975: MINUS
62976: ST_TO_ADDR
// max_x := x + r ;
62977: LD_ADDR_VAR 0 9
62981: PUSH
62982: LD_VAR 0 2
62986: PUSH
62987: LD_VAR 0 4
62991: PLUS
62992: ST_TO_ADDR
// max_y := y + r ;
62993: LD_ADDR_VAR 0 10
62997: PUSH
62998: LD_VAR 0 3
63002: PUSH
63003: LD_VAR 0 4
63007: PLUS
63008: ST_TO_ADDR
// for _x = min_x to max_x do
63009: LD_ADDR_VAR 0 11
63013: PUSH
63014: DOUBLE
63015: LD_VAR 0 7
63019: DEC
63020: ST_TO_ADDR
63021: LD_VAR 0 9
63025: PUSH
63026: FOR_TO
63027: IFFALSE 63144
// for _y = min_y to max_y do
63029: LD_ADDR_VAR 0 12
63033: PUSH
63034: DOUBLE
63035: LD_VAR 0 8
63039: DEC
63040: ST_TO_ADDR
63041: LD_VAR 0 10
63045: PUSH
63046: FOR_TO
63047: IFFALSE 63140
// begin if not ValidHex ( _x , _y ) then
63049: LD_VAR 0 11
63053: PPUSH
63054: LD_VAR 0 12
63058: PPUSH
63059: CALL_OW 488
63063: NOT
63064: IFFALSE 63068
// continue ;
63066: GO 63046
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
63068: LD_VAR 0 11
63072: PPUSH
63073: LD_VAR 0 12
63077: PPUSH
63078: CALL_OW 351
63082: PUSH
63083: LD_VAR 0 11
63087: PPUSH
63088: LD_VAR 0 12
63092: PPUSH
63093: CALL_OW 554
63097: AND
63098: IFFALSE 63138
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
63100: LD_ADDR_VAR 0 13
63104: PUSH
63105: LD_VAR 0 13
63109: PPUSH
63110: LD_VAR 0 13
63114: PUSH
63115: LD_INT 1
63117: PLUS
63118: PPUSH
63119: LD_VAR 0 11
63123: PUSH
63124: LD_VAR 0 12
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PPUSH
63133: CALL_OW 2
63137: ST_TO_ADDR
// end ;
63138: GO 63046
63140: POP
63141: POP
63142: GO 63026
63144: POP
63145: POP
// if not list then
63146: LD_VAR 0 13
63150: NOT
63151: IFFALSE 63155
// exit ;
63153: GO 63234
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
63155: LD_ADDR_VAR 0 13
63159: PUSH
63160: LD_VAR 0 1
63164: PPUSH
63165: LD_VAR 0 13
63169: PPUSH
63170: LD_INT 1
63172: PPUSH
63173: LD_INT 1
63175: PPUSH
63176: CALL 6590 0 4
63180: ST_TO_ADDR
// ComStop ( flame ) ;
63181: LD_VAR 0 1
63185: PPUSH
63186: CALL_OW 141
// for i in list do
63190: LD_ADDR_VAR 0 6
63194: PUSH
63195: LD_VAR 0 13
63199: PUSH
63200: FOR_IN
63201: IFFALSE 63232
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
63203: LD_VAR 0 1
63207: PPUSH
63208: LD_VAR 0 6
63212: PUSH
63213: LD_INT 1
63215: ARRAY
63216: PPUSH
63217: LD_VAR 0 6
63221: PUSH
63222: LD_INT 2
63224: ARRAY
63225: PPUSH
63226: CALL_OW 176
63230: GO 63200
63232: POP
63233: POP
// end ;
63234: LD_VAR 0 5
63238: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
63239: LD_EXP 76
63243: NOT
63244: IFFALSE 63294
63246: GO 63248
63248: DISABLE
// begin initHack := true ;
63249: LD_ADDR_EXP 76
63253: PUSH
63254: LD_INT 1
63256: ST_TO_ADDR
// hackTanks := [ ] ;
63257: LD_ADDR_EXP 77
63261: PUSH
63262: EMPTY
63263: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
63264: LD_ADDR_EXP 78
63268: PUSH
63269: EMPTY
63270: ST_TO_ADDR
// hackLimit := 3 ;
63271: LD_ADDR_EXP 79
63275: PUSH
63276: LD_INT 3
63278: ST_TO_ADDR
// hackDist := 12 ;
63279: LD_ADDR_EXP 80
63283: PUSH
63284: LD_INT 12
63286: ST_TO_ADDR
// hackCounter := [ ] ;
63287: LD_ADDR_EXP 81
63291: PUSH
63292: EMPTY
63293: ST_TO_ADDR
// end ;
63294: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
63295: LD_EXP 76
63299: PUSH
63300: LD_INT 34
63302: PUSH
63303: LD_INT 99
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PPUSH
63310: CALL_OW 69
63314: AND
63315: IFFALSE 63568
63317: GO 63319
63319: DISABLE
63320: LD_INT 0
63322: PPUSH
63323: PPUSH
// begin enable ;
63324: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
63325: LD_ADDR_VAR 0 1
63329: PUSH
63330: LD_INT 34
63332: PUSH
63333: LD_INT 99
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PPUSH
63340: CALL_OW 69
63344: PUSH
63345: FOR_IN
63346: IFFALSE 63566
// begin if not i in hackTanks then
63348: LD_VAR 0 1
63352: PUSH
63353: LD_EXP 77
63357: IN
63358: NOT
63359: IFFALSE 63442
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
63361: LD_ADDR_EXP 77
63365: PUSH
63366: LD_EXP 77
63370: PPUSH
63371: LD_EXP 77
63375: PUSH
63376: LD_INT 1
63378: PLUS
63379: PPUSH
63380: LD_VAR 0 1
63384: PPUSH
63385: CALL_OW 1
63389: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
63390: LD_ADDR_EXP 78
63394: PUSH
63395: LD_EXP 78
63399: PPUSH
63400: LD_EXP 78
63404: PUSH
63405: LD_INT 1
63407: PLUS
63408: PPUSH
63409: EMPTY
63410: PPUSH
63411: CALL_OW 1
63415: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
63416: LD_ADDR_EXP 81
63420: PUSH
63421: LD_EXP 81
63425: PPUSH
63426: LD_EXP 81
63430: PUSH
63431: LD_INT 1
63433: PLUS
63434: PPUSH
63435: EMPTY
63436: PPUSH
63437: CALL_OW 1
63441: ST_TO_ADDR
// end ; if not IsOk ( i ) then
63442: LD_VAR 0 1
63446: PPUSH
63447: CALL_OW 302
63451: NOT
63452: IFFALSE 63465
// begin HackUnlinkAll ( i ) ;
63454: LD_VAR 0 1
63458: PPUSH
63459: CALL 63571 0 1
// continue ;
63463: GO 63345
// end ; HackCheckCapturedStatus ( i ) ;
63465: LD_VAR 0 1
63469: PPUSH
63470: CALL 64014 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
63474: LD_ADDR_VAR 0 2
63478: PUSH
63479: LD_INT 81
63481: PUSH
63482: LD_VAR 0 1
63486: PPUSH
63487: CALL_OW 255
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 33
63498: PUSH
63499: LD_INT 3
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 91
63508: PUSH
63509: LD_VAR 0 1
63513: PUSH
63514: LD_EXP 80
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 50
63526: PUSH
63527: EMPTY
63528: LIST
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: PPUSH
63536: CALL_OW 69
63540: ST_TO_ADDR
// if not tmp then
63541: LD_VAR 0 2
63545: NOT
63546: IFFALSE 63550
// continue ;
63548: GO 63345
// HackLink ( i , tmp ) ;
63550: LD_VAR 0 1
63554: PPUSH
63555: LD_VAR 0 2
63559: PPUSH
63560: CALL 63707 0 2
// end ;
63564: GO 63345
63566: POP
63567: POP
// end ;
63568: PPOPN 2
63570: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
63571: LD_INT 0
63573: PPUSH
63574: PPUSH
63575: PPUSH
// if not hack in hackTanks then
63576: LD_VAR 0 1
63580: PUSH
63581: LD_EXP 77
63585: IN
63586: NOT
63587: IFFALSE 63591
// exit ;
63589: GO 63702
// index := GetElementIndex ( hackTanks , hack ) ;
63591: LD_ADDR_VAR 0 4
63595: PUSH
63596: LD_EXP 77
63600: PPUSH
63601: LD_VAR 0 1
63605: PPUSH
63606: CALL 5887 0 2
63610: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
63611: LD_EXP 78
63615: PUSH
63616: LD_VAR 0 4
63620: ARRAY
63621: IFFALSE 63702
// begin for i in hackTanksCaptured [ index ] do
63623: LD_ADDR_VAR 0 3
63627: PUSH
63628: LD_EXP 78
63632: PUSH
63633: LD_VAR 0 4
63637: ARRAY
63638: PUSH
63639: FOR_IN
63640: IFFALSE 63666
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
63642: LD_VAR 0 3
63646: PUSH
63647: LD_INT 1
63649: ARRAY
63650: PPUSH
63651: LD_VAR 0 3
63655: PUSH
63656: LD_INT 2
63658: ARRAY
63659: PPUSH
63660: CALL_OW 235
63664: GO 63639
63666: POP
63667: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
63668: LD_ADDR_EXP 78
63672: PUSH
63673: LD_EXP 78
63677: PPUSH
63678: LD_VAR 0 4
63682: PPUSH
63683: EMPTY
63684: PPUSH
63685: CALL_OW 1
63689: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
63690: LD_VAR 0 1
63694: PPUSH
63695: LD_INT 0
63697: PPUSH
63698: CALL_OW 505
// end ; end ;
63702: LD_VAR 0 2
63706: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
63707: LD_INT 0
63709: PPUSH
63710: PPUSH
63711: PPUSH
// if not hack in hackTanks or not vehicles then
63712: LD_VAR 0 1
63716: PUSH
63717: LD_EXP 77
63721: IN
63722: NOT
63723: PUSH
63724: LD_VAR 0 2
63728: NOT
63729: OR
63730: IFFALSE 63734
// exit ;
63732: GO 64009
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
63734: LD_ADDR_VAR 0 2
63738: PUSH
63739: LD_VAR 0 1
63743: PPUSH
63744: LD_VAR 0 2
63748: PPUSH
63749: LD_INT 1
63751: PPUSH
63752: LD_INT 1
63754: PPUSH
63755: CALL 6537 0 4
63759: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
63760: LD_ADDR_VAR 0 5
63764: PUSH
63765: LD_EXP 77
63769: PPUSH
63770: LD_VAR 0 1
63774: PPUSH
63775: CALL 5887 0 2
63779: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
63780: LD_EXP 78
63784: PUSH
63785: LD_VAR 0 5
63789: ARRAY
63790: PUSH
63791: LD_EXP 79
63795: LESS
63796: IFFALSE 63985
// begin for i := 1 to vehicles do
63798: LD_ADDR_VAR 0 4
63802: PUSH
63803: DOUBLE
63804: LD_INT 1
63806: DEC
63807: ST_TO_ADDR
63808: LD_VAR 0 2
63812: PUSH
63813: FOR_TO
63814: IFFALSE 63983
// begin if hackTanksCaptured [ index ] = hackLimit then
63816: LD_EXP 78
63820: PUSH
63821: LD_VAR 0 5
63825: ARRAY
63826: PUSH
63827: LD_EXP 79
63831: EQUAL
63832: IFFALSE 63836
// break ;
63834: GO 63983
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
63836: LD_ADDR_EXP 81
63840: PUSH
63841: LD_EXP 81
63845: PPUSH
63846: LD_VAR 0 5
63850: PPUSH
63851: LD_EXP 81
63855: PUSH
63856: LD_VAR 0 5
63860: ARRAY
63861: PUSH
63862: LD_INT 1
63864: PLUS
63865: PPUSH
63866: CALL_OW 1
63870: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
63871: LD_ADDR_EXP 78
63875: PUSH
63876: LD_EXP 78
63880: PPUSH
63881: LD_VAR 0 5
63885: PUSH
63886: LD_EXP 78
63890: PUSH
63891: LD_VAR 0 5
63895: ARRAY
63896: PUSH
63897: LD_INT 1
63899: PLUS
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PPUSH
63905: LD_VAR 0 2
63909: PUSH
63910: LD_VAR 0 4
63914: ARRAY
63915: PUSH
63916: LD_VAR 0 2
63920: PUSH
63921: LD_VAR 0 4
63925: ARRAY
63926: PPUSH
63927: CALL_OW 255
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PPUSH
63936: CALL 6102 0 3
63940: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
63941: LD_VAR 0 2
63945: PUSH
63946: LD_VAR 0 4
63950: ARRAY
63951: PPUSH
63952: LD_VAR 0 1
63956: PPUSH
63957: CALL_OW 255
63961: PPUSH
63962: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
63966: LD_VAR 0 2
63970: PUSH
63971: LD_VAR 0 4
63975: ARRAY
63976: PPUSH
63977: CALL_OW 141
// end ;
63981: GO 63813
63983: POP
63984: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63985: LD_VAR 0 1
63989: PPUSH
63990: LD_EXP 78
63994: PUSH
63995: LD_VAR 0 5
63999: ARRAY
64000: PUSH
64001: LD_INT 0
64003: PLUS
64004: PPUSH
64005: CALL_OW 505
// end ;
64009: LD_VAR 0 3
64013: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
64014: LD_INT 0
64016: PPUSH
64017: PPUSH
64018: PPUSH
64019: PPUSH
// if not hack in hackTanks then
64020: LD_VAR 0 1
64024: PUSH
64025: LD_EXP 77
64029: IN
64030: NOT
64031: IFFALSE 64035
// exit ;
64033: GO 64275
// index := GetElementIndex ( hackTanks , hack ) ;
64035: LD_ADDR_VAR 0 4
64039: PUSH
64040: LD_EXP 77
64044: PPUSH
64045: LD_VAR 0 1
64049: PPUSH
64050: CALL 5887 0 2
64054: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
64055: LD_ADDR_VAR 0 3
64059: PUSH
64060: DOUBLE
64061: LD_EXP 78
64065: PUSH
64066: LD_VAR 0 4
64070: ARRAY
64071: INC
64072: ST_TO_ADDR
64073: LD_INT 1
64075: PUSH
64076: FOR_DOWNTO
64077: IFFALSE 64249
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
64079: LD_ADDR_VAR 0 5
64083: PUSH
64084: LD_EXP 78
64088: PUSH
64089: LD_VAR 0 4
64093: ARRAY
64094: PUSH
64095: LD_VAR 0 3
64099: ARRAY
64100: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
64101: LD_VAR 0 5
64105: PUSH
64106: LD_INT 1
64108: ARRAY
64109: PPUSH
64110: CALL_OW 302
64114: NOT
64115: PUSH
64116: LD_VAR 0 5
64120: PUSH
64121: LD_INT 1
64123: ARRAY
64124: PPUSH
64125: CALL_OW 255
64129: PUSH
64130: LD_VAR 0 1
64134: PPUSH
64135: CALL_OW 255
64139: NONEQUAL
64140: OR
64141: IFFALSE 64247
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
64143: LD_VAR 0 5
64147: PUSH
64148: LD_INT 1
64150: ARRAY
64151: PPUSH
64152: CALL_OW 305
64156: PUSH
64157: LD_VAR 0 5
64161: PUSH
64162: LD_INT 1
64164: ARRAY
64165: PPUSH
64166: CALL_OW 255
64170: PUSH
64171: LD_VAR 0 1
64175: PPUSH
64176: CALL_OW 255
64180: EQUAL
64181: AND
64182: IFFALSE 64206
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
64184: LD_VAR 0 5
64188: PUSH
64189: LD_INT 1
64191: ARRAY
64192: PPUSH
64193: LD_VAR 0 5
64197: PUSH
64198: LD_INT 2
64200: ARRAY
64201: PPUSH
64202: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
64206: LD_ADDR_EXP 78
64210: PUSH
64211: LD_EXP 78
64215: PPUSH
64216: LD_VAR 0 4
64220: PPUSH
64221: LD_EXP 78
64225: PUSH
64226: LD_VAR 0 4
64230: ARRAY
64231: PPUSH
64232: LD_VAR 0 3
64236: PPUSH
64237: CALL_OW 3
64241: PPUSH
64242: CALL_OW 1
64246: ST_TO_ADDR
// end ; end ;
64247: GO 64076
64249: POP
64250: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64251: LD_VAR 0 1
64255: PPUSH
64256: LD_EXP 78
64260: PUSH
64261: LD_VAR 0 4
64265: ARRAY
64266: PUSH
64267: LD_INT 0
64269: PLUS
64270: PPUSH
64271: CALL_OW 505
// end ;
64275: LD_VAR 0 2
64279: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
64280: LD_INT 0
64282: PPUSH
64283: PPUSH
64284: PPUSH
64285: PPUSH
// if not hack in hackTanks then
64286: LD_VAR 0 1
64290: PUSH
64291: LD_EXP 77
64295: IN
64296: NOT
64297: IFFALSE 64301
// exit ;
64299: GO 64386
// index := GetElementIndex ( hackTanks , hack ) ;
64301: LD_ADDR_VAR 0 5
64305: PUSH
64306: LD_EXP 77
64310: PPUSH
64311: LD_VAR 0 1
64315: PPUSH
64316: CALL 5887 0 2
64320: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
64321: LD_ADDR_VAR 0 4
64325: PUSH
64326: DOUBLE
64327: LD_INT 1
64329: DEC
64330: ST_TO_ADDR
64331: LD_EXP 78
64335: PUSH
64336: LD_VAR 0 5
64340: ARRAY
64341: PUSH
64342: FOR_TO
64343: IFFALSE 64384
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
64345: LD_EXP 78
64349: PUSH
64350: LD_VAR 0 5
64354: ARRAY
64355: PUSH
64356: LD_VAR 0 4
64360: ARRAY
64361: PUSH
64362: LD_INT 1
64364: ARRAY
64365: PUSH
64366: LD_VAR 0 2
64370: EQUAL
64371: IFFALSE 64382
// KillUnit ( vehicle ) ;
64373: LD_VAR 0 2
64377: PPUSH
64378: CALL_OW 66
64382: GO 64342
64384: POP
64385: POP
// end ;
64386: LD_VAR 0 3
64390: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
64391: LD_EXP 82
64395: NOT
64396: IFFALSE 64431
64398: GO 64400
64400: DISABLE
// begin initMiner := true ;
64401: LD_ADDR_EXP 82
64405: PUSH
64406: LD_INT 1
64408: ST_TO_ADDR
// minersList := [ ] ;
64409: LD_ADDR_EXP 83
64413: PUSH
64414: EMPTY
64415: ST_TO_ADDR
// minerMinesList := [ ] ;
64416: LD_ADDR_EXP 84
64420: PUSH
64421: EMPTY
64422: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
64423: LD_ADDR_EXP 85
64427: PUSH
64428: LD_INT 5
64430: ST_TO_ADDR
// end ;
64431: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
64432: LD_EXP 82
64436: PUSH
64437: LD_INT 34
64439: PUSH
64440: LD_INT 81
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PPUSH
64447: CALL_OW 69
64451: AND
64452: IFFALSE 64913
64454: GO 64456
64456: DISABLE
64457: LD_INT 0
64459: PPUSH
64460: PPUSH
64461: PPUSH
64462: PPUSH
// begin enable ;
64463: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
64464: LD_ADDR_VAR 0 1
64468: PUSH
64469: LD_INT 34
64471: PUSH
64472: LD_INT 81
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PPUSH
64479: CALL_OW 69
64483: PUSH
64484: FOR_IN
64485: IFFALSE 64557
// begin if not i in minersList then
64487: LD_VAR 0 1
64491: PUSH
64492: LD_EXP 83
64496: IN
64497: NOT
64498: IFFALSE 64555
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
64500: LD_ADDR_EXP 83
64504: PUSH
64505: LD_EXP 83
64509: PPUSH
64510: LD_EXP 83
64514: PUSH
64515: LD_INT 1
64517: PLUS
64518: PPUSH
64519: LD_VAR 0 1
64523: PPUSH
64524: CALL_OW 1
64528: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
64529: LD_ADDR_EXP 84
64533: PUSH
64534: LD_EXP 84
64538: PPUSH
64539: LD_EXP 84
64543: PUSH
64544: LD_INT 1
64546: PLUS
64547: PPUSH
64548: EMPTY
64549: PPUSH
64550: CALL_OW 1
64554: ST_TO_ADDR
// end end ;
64555: GO 64484
64557: POP
64558: POP
// for i := minerMinesList downto 1 do
64559: LD_ADDR_VAR 0 1
64563: PUSH
64564: DOUBLE
64565: LD_EXP 84
64569: INC
64570: ST_TO_ADDR
64571: LD_INT 1
64573: PUSH
64574: FOR_DOWNTO
64575: IFFALSE 64911
// begin if IsLive ( minersList [ i ] ) then
64577: LD_EXP 83
64581: PUSH
64582: LD_VAR 0 1
64586: ARRAY
64587: PPUSH
64588: CALL_OW 300
64592: IFFALSE 64620
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
64594: LD_EXP 83
64598: PUSH
64599: LD_VAR 0 1
64603: ARRAY
64604: PPUSH
64605: LD_EXP 84
64609: PUSH
64610: LD_VAR 0 1
64614: ARRAY
64615: PPUSH
64616: CALL_OW 505
// if not minerMinesList [ i ] then
64620: LD_EXP 84
64624: PUSH
64625: LD_VAR 0 1
64629: ARRAY
64630: NOT
64631: IFFALSE 64635
// continue ;
64633: GO 64574
// for j := minerMinesList [ i ] downto 1 do
64635: LD_ADDR_VAR 0 2
64639: PUSH
64640: DOUBLE
64641: LD_EXP 84
64645: PUSH
64646: LD_VAR 0 1
64650: ARRAY
64651: INC
64652: ST_TO_ADDR
64653: LD_INT 1
64655: PUSH
64656: FOR_DOWNTO
64657: IFFALSE 64907
// begin side := GetSide ( minersList [ i ] ) ;
64659: LD_ADDR_VAR 0 3
64663: PUSH
64664: LD_EXP 83
64668: PUSH
64669: LD_VAR 0 1
64673: ARRAY
64674: PPUSH
64675: CALL_OW 255
64679: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
64680: LD_ADDR_VAR 0 4
64684: PUSH
64685: LD_EXP 84
64689: PUSH
64690: LD_VAR 0 1
64694: ARRAY
64695: PUSH
64696: LD_VAR 0 2
64700: ARRAY
64701: PUSH
64702: LD_INT 1
64704: ARRAY
64705: PPUSH
64706: LD_EXP 84
64710: PUSH
64711: LD_VAR 0 1
64715: ARRAY
64716: PUSH
64717: LD_VAR 0 2
64721: ARRAY
64722: PUSH
64723: LD_INT 2
64725: ARRAY
64726: PPUSH
64727: CALL_OW 428
64731: ST_TO_ADDR
// if not tmp then
64732: LD_VAR 0 4
64736: NOT
64737: IFFALSE 64741
// continue ;
64739: GO 64656
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
64741: LD_VAR 0 4
64745: PUSH
64746: LD_INT 81
64748: PUSH
64749: LD_VAR 0 3
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PPUSH
64758: CALL_OW 69
64762: IN
64763: PUSH
64764: LD_EXP 84
64768: PUSH
64769: LD_VAR 0 1
64773: ARRAY
64774: PUSH
64775: LD_VAR 0 2
64779: ARRAY
64780: PUSH
64781: LD_INT 1
64783: ARRAY
64784: PPUSH
64785: LD_EXP 84
64789: PUSH
64790: LD_VAR 0 1
64794: ARRAY
64795: PUSH
64796: LD_VAR 0 2
64800: ARRAY
64801: PUSH
64802: LD_INT 2
64804: ARRAY
64805: PPUSH
64806: CALL_OW 458
64810: AND
64811: IFFALSE 64905
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
64813: LD_EXP 84
64817: PUSH
64818: LD_VAR 0 1
64822: ARRAY
64823: PUSH
64824: LD_VAR 0 2
64828: ARRAY
64829: PUSH
64830: LD_INT 1
64832: ARRAY
64833: PPUSH
64834: LD_EXP 84
64838: PUSH
64839: LD_VAR 0 1
64843: ARRAY
64844: PUSH
64845: LD_VAR 0 2
64849: ARRAY
64850: PUSH
64851: LD_INT 2
64853: ARRAY
64854: PPUSH
64855: LD_VAR 0 3
64859: PPUSH
64860: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64864: LD_ADDR_EXP 84
64868: PUSH
64869: LD_EXP 84
64873: PPUSH
64874: LD_VAR 0 1
64878: PPUSH
64879: LD_EXP 84
64883: PUSH
64884: LD_VAR 0 1
64888: ARRAY
64889: PPUSH
64890: LD_VAR 0 2
64894: PPUSH
64895: CALL_OW 3
64899: PPUSH
64900: CALL_OW 1
64904: ST_TO_ADDR
// end ; end ;
64905: GO 64656
64907: POP
64908: POP
// end ;
64909: GO 64574
64911: POP
64912: POP
// end ;
64913: PPOPN 4
64915: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
64916: LD_INT 0
64918: PPUSH
64919: PPUSH
// result := false ;
64920: LD_ADDR_VAR 0 4
64924: PUSH
64925: LD_INT 0
64927: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
64928: LD_VAR 0 1
64932: PPUSH
64933: CALL_OW 264
64937: PUSH
64938: LD_INT 81
64940: EQUAL
64941: NOT
64942: IFFALSE 64946
// exit ;
64944: GO 65186
// index := GetElementIndex ( minersList , unit ) ;
64946: LD_ADDR_VAR 0 5
64950: PUSH
64951: LD_EXP 83
64955: PPUSH
64956: LD_VAR 0 1
64960: PPUSH
64961: CALL 5887 0 2
64965: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
64966: LD_EXP 84
64970: PUSH
64971: LD_VAR 0 5
64975: ARRAY
64976: PUSH
64977: LD_EXP 85
64981: GREATEREQUAL
64982: IFFALSE 64986
// exit ;
64984: GO 65186
// ComMoveXY ( unit , x , y ) ;
64986: LD_VAR 0 1
64990: PPUSH
64991: LD_VAR 0 2
64995: PPUSH
64996: LD_VAR 0 3
65000: PPUSH
65001: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65005: LD_INT 35
65007: PPUSH
65008: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
65012: LD_VAR 0 1
65016: PPUSH
65017: LD_VAR 0 2
65021: PPUSH
65022: LD_VAR 0 3
65026: PPUSH
65027: CALL 37639 0 3
65031: NOT
65032: PUSH
65033: LD_VAR 0 1
65037: PPUSH
65038: CALL_OW 314
65042: AND
65043: IFFALSE 65047
// exit ;
65045: GO 65186
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
65047: LD_VAR 0 2
65051: PPUSH
65052: LD_VAR 0 3
65056: PPUSH
65057: CALL_OW 428
65061: PUSH
65062: LD_VAR 0 1
65066: EQUAL
65067: PUSH
65068: LD_VAR 0 1
65072: PPUSH
65073: CALL_OW 314
65077: NOT
65078: AND
65079: IFFALSE 65005
// PlaySoundXY ( x , y , PlantMine ) ;
65081: LD_VAR 0 2
65085: PPUSH
65086: LD_VAR 0 3
65090: PPUSH
65091: LD_STRING PlantMine
65093: PPUSH
65094: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
65098: LD_VAR 0 2
65102: PPUSH
65103: LD_VAR 0 3
65107: PPUSH
65108: LD_VAR 0 1
65112: PPUSH
65113: CALL_OW 255
65117: PPUSH
65118: LD_INT 0
65120: PPUSH
65121: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
65125: LD_ADDR_EXP 84
65129: PUSH
65130: LD_EXP 84
65134: PPUSH
65135: LD_VAR 0 5
65139: PUSH
65140: LD_EXP 84
65144: PUSH
65145: LD_VAR 0 5
65149: ARRAY
65150: PUSH
65151: LD_INT 1
65153: PLUS
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PPUSH
65159: LD_VAR 0 2
65163: PUSH
65164: LD_VAR 0 3
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PPUSH
65173: CALL 6102 0 3
65177: ST_TO_ADDR
// result := true ;
65178: LD_ADDR_VAR 0 4
65182: PUSH
65183: LD_INT 1
65185: ST_TO_ADDR
// end ;
65186: LD_VAR 0 4
65190: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
65191: LD_INT 0
65193: PPUSH
65194: PPUSH
65195: PPUSH
// if not unit in minersList then
65196: LD_VAR 0 1
65200: PUSH
65201: LD_EXP 83
65205: IN
65206: NOT
65207: IFFALSE 65211
// exit ;
65209: GO 65603
// index := GetElementIndex ( minersList , unit ) ;
65211: LD_ADDR_VAR 0 6
65215: PUSH
65216: LD_EXP 83
65220: PPUSH
65221: LD_VAR 0 1
65225: PPUSH
65226: CALL 5887 0 2
65230: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
65231: LD_ADDR_VAR 0 5
65235: PUSH
65236: DOUBLE
65237: LD_EXP 84
65241: PUSH
65242: LD_VAR 0 6
65246: ARRAY
65247: INC
65248: ST_TO_ADDR
65249: LD_INT 1
65251: PUSH
65252: FOR_DOWNTO
65253: IFFALSE 65414
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
65255: LD_EXP 84
65259: PUSH
65260: LD_VAR 0 6
65264: ARRAY
65265: PUSH
65266: LD_VAR 0 5
65270: ARRAY
65271: PUSH
65272: LD_INT 1
65274: ARRAY
65275: PUSH
65276: LD_VAR 0 2
65280: EQUAL
65281: PUSH
65282: LD_EXP 84
65286: PUSH
65287: LD_VAR 0 6
65291: ARRAY
65292: PUSH
65293: LD_VAR 0 5
65297: ARRAY
65298: PUSH
65299: LD_INT 2
65301: ARRAY
65302: PUSH
65303: LD_VAR 0 3
65307: EQUAL
65308: AND
65309: IFFALSE 65412
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65311: LD_EXP 84
65315: PUSH
65316: LD_VAR 0 6
65320: ARRAY
65321: PUSH
65322: LD_VAR 0 5
65326: ARRAY
65327: PUSH
65328: LD_INT 1
65330: ARRAY
65331: PPUSH
65332: LD_EXP 84
65336: PUSH
65337: LD_VAR 0 6
65341: ARRAY
65342: PUSH
65343: LD_VAR 0 5
65347: ARRAY
65348: PUSH
65349: LD_INT 2
65351: ARRAY
65352: PPUSH
65353: LD_VAR 0 1
65357: PPUSH
65358: CALL_OW 255
65362: PPUSH
65363: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65367: LD_ADDR_EXP 84
65371: PUSH
65372: LD_EXP 84
65376: PPUSH
65377: LD_VAR 0 6
65381: PPUSH
65382: LD_EXP 84
65386: PUSH
65387: LD_VAR 0 6
65391: ARRAY
65392: PPUSH
65393: LD_VAR 0 5
65397: PPUSH
65398: CALL_OW 3
65402: PPUSH
65403: CALL_OW 1
65407: ST_TO_ADDR
// exit ;
65408: POP
65409: POP
65410: GO 65603
// end ; end ;
65412: GO 65252
65414: POP
65415: POP
// for i := minerMinesList [ index ] downto 1 do
65416: LD_ADDR_VAR 0 5
65420: PUSH
65421: DOUBLE
65422: LD_EXP 84
65426: PUSH
65427: LD_VAR 0 6
65431: ARRAY
65432: INC
65433: ST_TO_ADDR
65434: LD_INT 1
65436: PUSH
65437: FOR_DOWNTO
65438: IFFALSE 65601
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
65440: LD_EXP 84
65444: PUSH
65445: LD_VAR 0 6
65449: ARRAY
65450: PUSH
65451: LD_VAR 0 5
65455: ARRAY
65456: PUSH
65457: LD_INT 1
65459: ARRAY
65460: PPUSH
65461: LD_EXP 84
65465: PUSH
65466: LD_VAR 0 6
65470: ARRAY
65471: PUSH
65472: LD_VAR 0 5
65476: ARRAY
65477: PUSH
65478: LD_INT 2
65480: ARRAY
65481: PPUSH
65482: LD_VAR 0 2
65486: PPUSH
65487: LD_VAR 0 3
65491: PPUSH
65492: CALL_OW 298
65496: PUSH
65497: LD_INT 6
65499: LESS
65500: IFFALSE 65599
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65502: LD_EXP 84
65506: PUSH
65507: LD_VAR 0 6
65511: ARRAY
65512: PUSH
65513: LD_VAR 0 5
65517: ARRAY
65518: PUSH
65519: LD_INT 1
65521: ARRAY
65522: PPUSH
65523: LD_EXP 84
65527: PUSH
65528: LD_VAR 0 6
65532: ARRAY
65533: PUSH
65534: LD_VAR 0 5
65538: ARRAY
65539: PUSH
65540: LD_INT 2
65542: ARRAY
65543: PPUSH
65544: LD_VAR 0 1
65548: PPUSH
65549: CALL_OW 255
65553: PPUSH
65554: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65558: LD_ADDR_EXP 84
65562: PUSH
65563: LD_EXP 84
65567: PPUSH
65568: LD_VAR 0 6
65572: PPUSH
65573: LD_EXP 84
65577: PUSH
65578: LD_VAR 0 6
65582: ARRAY
65583: PPUSH
65584: LD_VAR 0 5
65588: PPUSH
65589: CALL_OW 3
65593: PPUSH
65594: CALL_OW 1
65598: ST_TO_ADDR
// end ; end ;
65599: GO 65437
65601: POP
65602: POP
// end ;
65603: LD_VAR 0 4
65607: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
65608: LD_INT 0
65610: PPUSH
65611: PPUSH
65612: PPUSH
65613: PPUSH
65614: PPUSH
65615: PPUSH
65616: PPUSH
65617: PPUSH
65618: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
65619: LD_VAR 0 1
65623: PPUSH
65624: CALL_OW 264
65628: PUSH
65629: LD_INT 81
65631: EQUAL
65632: NOT
65633: PUSH
65634: LD_VAR 0 1
65638: PUSH
65639: LD_EXP 83
65643: IN
65644: NOT
65645: OR
65646: IFFALSE 65650
// exit ;
65648: GO 65972
// index := GetElementIndex ( minersList , unit ) ;
65650: LD_ADDR_VAR 0 6
65654: PUSH
65655: LD_EXP 83
65659: PPUSH
65660: LD_VAR 0 1
65664: PPUSH
65665: CALL 5887 0 2
65669: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
65670: LD_ADDR_VAR 0 8
65674: PUSH
65675: LD_EXP 85
65679: PUSH
65680: LD_EXP 84
65684: PUSH
65685: LD_VAR 0 6
65689: ARRAY
65690: MINUS
65691: ST_TO_ADDR
// if not minesFreeAmount then
65692: LD_VAR 0 8
65696: NOT
65697: IFFALSE 65701
// exit ;
65699: GO 65972
// tmp := [ ] ;
65701: LD_ADDR_VAR 0 7
65705: PUSH
65706: EMPTY
65707: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
65708: LD_ADDR_VAR 0 5
65712: PUSH
65713: DOUBLE
65714: LD_INT 1
65716: DEC
65717: ST_TO_ADDR
65718: LD_VAR 0 8
65722: PUSH
65723: FOR_TO
65724: IFFALSE 65919
// begin _d := rand ( 0 , 5 ) ;
65726: LD_ADDR_VAR 0 11
65730: PUSH
65731: LD_INT 0
65733: PPUSH
65734: LD_INT 5
65736: PPUSH
65737: CALL_OW 12
65741: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
65742: LD_ADDR_VAR 0 12
65746: PUSH
65747: LD_INT 2
65749: PPUSH
65750: LD_INT 6
65752: PPUSH
65753: CALL_OW 12
65757: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
65758: LD_ADDR_VAR 0 9
65762: PUSH
65763: LD_VAR 0 2
65767: PPUSH
65768: LD_VAR 0 11
65772: PPUSH
65773: LD_VAR 0 12
65777: PPUSH
65778: CALL_OW 272
65782: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
65783: LD_ADDR_VAR 0 10
65787: PUSH
65788: LD_VAR 0 3
65792: PPUSH
65793: LD_VAR 0 11
65797: PPUSH
65798: LD_VAR 0 12
65802: PPUSH
65803: CALL_OW 273
65807: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
65808: LD_VAR 0 9
65812: PPUSH
65813: LD_VAR 0 10
65817: PPUSH
65818: CALL_OW 488
65822: PUSH
65823: LD_VAR 0 9
65827: PUSH
65828: LD_VAR 0 10
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_VAR 0 7
65841: IN
65842: NOT
65843: AND
65844: PUSH
65845: LD_VAR 0 9
65849: PPUSH
65850: LD_VAR 0 10
65854: PPUSH
65855: CALL_OW 458
65859: NOT
65860: AND
65861: IFFALSE 65903
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
65863: LD_ADDR_VAR 0 7
65867: PUSH
65868: LD_VAR 0 7
65872: PPUSH
65873: LD_VAR 0 7
65877: PUSH
65878: LD_INT 1
65880: PLUS
65881: PPUSH
65882: LD_VAR 0 9
65886: PUSH
65887: LD_VAR 0 10
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PPUSH
65896: CALL_OW 1
65900: ST_TO_ADDR
65901: GO 65917
// i := i - 1 ;
65903: LD_ADDR_VAR 0 5
65907: PUSH
65908: LD_VAR 0 5
65912: PUSH
65913: LD_INT 1
65915: MINUS
65916: ST_TO_ADDR
// end ;
65917: GO 65723
65919: POP
65920: POP
// for i in tmp do
65921: LD_ADDR_VAR 0 5
65925: PUSH
65926: LD_VAR 0 7
65930: PUSH
65931: FOR_IN
65932: IFFALSE 65970
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
65934: LD_VAR 0 1
65938: PPUSH
65939: LD_VAR 0 5
65943: PUSH
65944: LD_INT 1
65946: ARRAY
65947: PPUSH
65948: LD_VAR 0 5
65952: PUSH
65953: LD_INT 2
65955: ARRAY
65956: PPUSH
65957: CALL 64916 0 3
65961: NOT
65962: IFFALSE 65968
// exit ;
65964: POP
65965: POP
65966: GO 65972
65968: GO 65931
65970: POP
65971: POP
// end ;
65972: LD_VAR 0 4
65976: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
65977: LD_INT 0
65979: PPUSH
65980: PPUSH
65981: PPUSH
65982: PPUSH
65983: PPUSH
65984: PPUSH
65985: PPUSH
// if not GetClass ( unit ) = class_sniper then
65986: LD_VAR 0 1
65990: PPUSH
65991: CALL_OW 257
65995: PUSH
65996: LD_INT 5
65998: EQUAL
65999: NOT
66000: IFFALSE 66004
// exit ;
66002: GO 66392
// dist := 8 ;
66004: LD_ADDR_VAR 0 5
66008: PUSH
66009: LD_INT 8
66011: ST_TO_ADDR
// viewRange := 12 ;
66012: LD_ADDR_VAR 0 7
66016: PUSH
66017: LD_INT 12
66019: ST_TO_ADDR
// side := GetSide ( unit ) ;
66020: LD_ADDR_VAR 0 6
66024: PUSH
66025: LD_VAR 0 1
66029: PPUSH
66030: CALL_OW 255
66034: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
66035: LD_INT 61
66037: PPUSH
66038: LD_VAR 0 6
66042: PPUSH
66043: CALL_OW 321
66047: PUSH
66048: LD_INT 2
66050: EQUAL
66051: IFFALSE 66061
// viewRange := 16 ;
66053: LD_ADDR_VAR 0 7
66057: PUSH
66058: LD_INT 16
66060: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
66061: LD_VAR 0 1
66065: PPUSH
66066: LD_VAR 0 2
66070: PPUSH
66071: LD_VAR 0 3
66075: PPUSH
66076: CALL_OW 297
66080: PUSH
66081: LD_VAR 0 5
66085: GREATER
66086: IFFALSE 66165
// begin ComMoveXY ( unit , x , y ) ;
66088: LD_VAR 0 1
66092: PPUSH
66093: LD_VAR 0 2
66097: PPUSH
66098: LD_VAR 0 3
66102: PPUSH
66103: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66107: LD_INT 35
66109: PPUSH
66110: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
66114: LD_VAR 0 1
66118: PPUSH
66119: LD_VAR 0 2
66123: PPUSH
66124: LD_VAR 0 3
66128: PPUSH
66129: CALL 37639 0 3
66133: NOT
66134: IFFALSE 66138
// exit ;
66136: GO 66392
// until GetDistUnitXY ( unit , x , y ) < dist ;
66138: LD_VAR 0 1
66142: PPUSH
66143: LD_VAR 0 2
66147: PPUSH
66148: LD_VAR 0 3
66152: PPUSH
66153: CALL_OW 297
66157: PUSH
66158: LD_VAR 0 5
66162: LESS
66163: IFFALSE 66107
// end ; ComTurnXY ( unit , x , y ) ;
66165: LD_VAR 0 1
66169: PPUSH
66170: LD_VAR 0 2
66174: PPUSH
66175: LD_VAR 0 3
66179: PPUSH
66180: CALL_OW 118
// wait ( 5 ) ;
66184: LD_INT 5
66186: PPUSH
66187: CALL_OW 67
// _d := GetDir ( unit ) ;
66191: LD_ADDR_VAR 0 10
66195: PUSH
66196: LD_VAR 0 1
66200: PPUSH
66201: CALL_OW 254
66205: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
66206: LD_ADDR_VAR 0 8
66210: PUSH
66211: LD_VAR 0 1
66215: PPUSH
66216: CALL_OW 250
66220: PPUSH
66221: LD_VAR 0 10
66225: PPUSH
66226: LD_VAR 0 5
66230: PPUSH
66231: CALL_OW 272
66235: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
66236: LD_ADDR_VAR 0 9
66240: PUSH
66241: LD_VAR 0 1
66245: PPUSH
66246: CALL_OW 251
66250: PPUSH
66251: LD_VAR 0 10
66255: PPUSH
66256: LD_VAR 0 5
66260: PPUSH
66261: CALL_OW 273
66265: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66266: LD_VAR 0 8
66270: PPUSH
66271: LD_VAR 0 9
66275: PPUSH
66276: CALL_OW 488
66280: NOT
66281: IFFALSE 66285
// exit ;
66283: GO 66392
// ComAnimCustom ( unit , 1 ) ;
66285: LD_VAR 0 1
66289: PPUSH
66290: LD_INT 1
66292: PPUSH
66293: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
66297: LD_VAR 0 8
66301: PPUSH
66302: LD_VAR 0 9
66306: PPUSH
66307: LD_VAR 0 6
66311: PPUSH
66312: LD_VAR 0 7
66316: PPUSH
66317: CALL_OW 330
// repeat wait ( 1 ) ;
66321: LD_INT 1
66323: PPUSH
66324: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
66328: LD_VAR 0 1
66332: PPUSH
66333: CALL_OW 316
66337: PUSH
66338: LD_VAR 0 1
66342: PPUSH
66343: CALL_OW 314
66347: OR
66348: PUSH
66349: LD_VAR 0 1
66353: PPUSH
66354: CALL_OW 302
66358: NOT
66359: OR
66360: PUSH
66361: LD_VAR 0 1
66365: PPUSH
66366: CALL_OW 301
66370: OR
66371: IFFALSE 66321
// RemoveSeeing ( _x , _y , side ) ;
66373: LD_VAR 0 8
66377: PPUSH
66378: LD_VAR 0 9
66382: PPUSH
66383: LD_VAR 0 6
66387: PPUSH
66388: CALL_OW 331
// end ; end_of_file
66392: LD_VAR 0 4
66396: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66397: LD_VAR 0 1
66401: PUSH
66402: LD_INT 200
66404: DOUBLE
66405: GREATEREQUAL
66406: IFFALSE 66414
66408: LD_INT 299
66410: DOUBLE
66411: LESSEQUAL
66412: IFTRUE 66416
66414: GO 66448
66416: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66417: LD_VAR 0 1
66421: PPUSH
66422: LD_VAR 0 2
66426: PPUSH
66427: LD_VAR 0 3
66431: PPUSH
66432: LD_VAR 0 4
66436: PPUSH
66437: LD_VAR 0 5
66441: PPUSH
66442: CALL 62045 0 5
66446: GO 66525
66448: LD_INT 300
66450: DOUBLE
66451: GREATEREQUAL
66452: IFFALSE 66460
66454: LD_INT 399
66456: DOUBLE
66457: LESSEQUAL
66458: IFTRUE 66462
66460: GO 66524
66462: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66463: LD_VAR 0 1
66467: PPUSH
66468: LD_VAR 0 2
66472: PPUSH
66473: LD_VAR 0 3
66477: PPUSH
66478: LD_VAR 0 4
66482: PPUSH
66483: LD_VAR 0 5
66487: PPUSH
66488: LD_VAR 0 6
66492: PPUSH
66493: LD_VAR 0 7
66497: PPUSH
66498: LD_VAR 0 8
66502: PPUSH
66503: LD_VAR 0 9
66507: PPUSH
66508: LD_VAR 0 10
66512: PPUSH
66513: LD_VAR 0 11
66517: PPUSH
66518: CALL 58370 0 11
66522: GO 66525
66524: POP
// end ;
66525: PPOPN 11
66527: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66528: LD_VAR 0 1
66532: PPUSH
66533: LD_VAR 0 2
66537: PPUSH
66538: LD_VAR 0 3
66542: PPUSH
66543: LD_VAR 0 4
66547: PPUSH
66548: LD_VAR 0 5
66552: PPUSH
66553: CALL 61781 0 5
// end ;
66557: PPOPN 5
66559: END
